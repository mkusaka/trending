<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-11T01:29:38Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cloneofsimo/minSDXL</title>
    <updated>2023-08-11T01:29:38Z</updated>
    <id>tag:github.com,2023-08-11:/cloneofsimo/minSDXL</id>
    <link href="https://github.com/cloneofsimo/minSDXL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Huggingface-compatible SDXL Unet implementation that is readily hackable&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Huggingface Diffusers Compatible SDXL Unet Rewrite&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Find this useful? I&#39;m accumulating coffee until they become a A100 gpu.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/simoryu&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why do this?&lt;/h2&gt; &#xA;&lt;p&gt;While huggingface &lt;code&gt;diffusers&lt;/code&gt; library is amazing, nowdays, its &lt;code&gt;UNet2DConditionModel&lt;/code&gt;&#39;s implementation has gotten extremely big. There are various configurations, branches during initialization, and many other &#34;important-yet-not-related&#34; stuff that make it hard to understand. (I am also partly to blame this, because LoRA with AttentionProcessor logic has also gotten rather huge part of the Unet implementation.) I would argue it got bigger than one researcher can now reasonably understand and maintain, let alone extend. This will of course have pros and cons, but for many researchers, this is not ideal. (Trust me, I use diffusers all the time and still get confused by the codebase.)&lt;/p&gt; &#xA;&lt;p&gt;Since SDXL will likely be used by many researchers, I think it is very important to have concise implementations of the models, so that SDXL can be easily understood and extended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sdxl_rewrite.py&lt;/code&gt; tries to remove all the unnecessary parts of the original implementation, and tries to make it as concise as possible.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;SDXL Rewrite tries to be directly compatible with the original &lt;code&gt;diffusers&lt;/code&gt; library. You can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sdxl_rewrite import UNet2DConditionModel&#xA;unet_new = UNet2DConditionModel().cuda().half()&#xA;&#xA;# Load weights from the original model&#xA;from diffusers import DiffusionPipeline&#xA;&#xA;&#xA;pipe = DiffusionPipeline.from_pretrained(&#xA;        &#34;stabilityai/stable-diffusion-xl-base-1.0&#34;,&#xA;        torch_dtype=torch.float16,&#xA;        use_safetensors=True,&#xA;        variant=&#34;fp16&#34;,&#xA;).to(&#34;cuda&#34;)&#xA;&#xA;unet_new.load_state_dict(pipe.unet.state_dict())&#xA;&#xA;# use the weights&#xA;pipe.unet = unet_new&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Obviously in practice you would never do this. You would normaly copy this codebase and modify it to your needs, like putting adapters, loras, other modalities, etc etc.&lt;/p&gt; &#xA;&lt;p&gt;Have a look at &lt;code&gt;example.ipynb&lt;/code&gt; for bit more examples to use it directly with &lt;code&gt;diffusers&lt;/code&gt; library.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Guitaricet/relora</title>
    <updated>2023-08-11T01:29:38Z</updated>
    <id>tag:github.com,2023-08-11:/Guitaricet/relora</id>
    <link href="https://github.com/Guitaricet/relora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official code for ReLoRA from the paper Stack More Layers Differently: High-Rank Training Through Low-Rank Updates&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReLoRA -- PEFT Pretraining&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Official code for Stack More Layers Differently: High-Rank Training Through Low-Rank Updates &lt;a href=&#34;https://arxiv.org/abs/2307.05695&#34;&gt;https://arxiv.org/abs/2307.05695&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img width=&#34;813&#34; alt=&#34;ReLoRA&#34; src=&#34;https://github.com/Guitaricet/peft_pretraining/assets/2821124/41415bd0-b39f-4f2c-9bbd-5fd6555e87a7&#34;&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;All requirements are listed in &lt;code&gt;requirements.txt&lt;/code&gt; and kept up-to-date.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd peft_pretraining&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To train a model using ReLoRA, first, perform a warmup through regular training.&lt;/p&gt; &#xA;&lt;p&gt;Train language model with PEFT&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc-per-node &amp;lt;N_GPUS&amp;gt; torchrun_main.py \&#xA;    --model_config configs/llama_250m.json \&#xA;    --batch_size 24 \&#xA;    --total_batch_size 1152 \&#xA;    --lr 5e-4 \&#xA;    --max_length 512 \&#xA;    --tags warm_start_250M \&#xA;    --save_every 1000 \&#xA;    --num_training_steps 20000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Reproducibility note:&lt;/strong&gt; The way we ran the experiments in the paper was by specifying full num_training_steps, including both the warmup and the ReLoRA training, and stopping it after the desired number of steps was completed. Providing only the number of training steps should work too. The only difference will be the LR schedule during the warmup period.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When you have a warmed-up network checkpoint, run the script with ReLoRA enabled. Note that we use a larger LR during the ReLoRA stage.&lt;/p&gt; &#xA;&lt;p&gt;Train without PEFT&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc-per-node &amp;lt;N_GPUS&amp;gt; torchrun_main.py \&#xA;    --model_config configs/llama_250m.json \&#xA;    --batch_size 24 \&#xA;    --total_batch_size 1152 \&#xA;    --lr 1e-3 \&#xA;    --max_length 512 \&#xA;    --use_peft \&#xA;    --relora 5000 \&#xA;    --cycle_length 5000 \&#xA;    --restart_warmup_steps 100 \&#xA;    --scheduler cosine_restarts \&#xA;    --warmup_steps 500 \&#xA;    --reset_optimizer_on_relora True \&#xA;    --num_training_steps 20000 \&#xA;    --save_every 5000 \&#xA;    --eval_every 5000 \&#xA;    --continue_from checkpoints/llama_250m-2023-06-09-11-29-56/model_5000 \&#xA;    --tags relora_250M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Note on batch sizes&lt;/h2&gt; &#xA;&lt;p&gt;To minimize the pain with multi-GPU setups, we recommend avoiding using &lt;code&gt;--gradient_accumulation&lt;/code&gt; option directly. Instead, specify &lt;code&gt;--total_batch_size&lt;/code&gt; and allow the script to figure out the gradient accumulation option based on &lt;code&gt;--batch_size&lt;/code&gt; and the number of GPUs used.&lt;/p&gt; &#xA;&lt;h2&gt;Relora&lt;/h2&gt; &#xA;&lt;p&gt;Relora integrates existing LoRA parameters into the main network and resets them. In principle, such an approach can be more flexible than LoRA, but you need to be careful with&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Optimizer states&lt;/li&gt; &#xA; &lt;li&gt;Learning rate schedule during and right after the reset&lt;/li&gt; &#xA; &lt;li&gt;How frequently you reset&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Reset frequency is determined by &lt;code&gt;--relora&lt;/code&gt; parameter (in the number of update steps, not global steps). Optimizer reset options are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;--reset_optimizer_on_relora&#34;, default=True, type=lambda x: x.lower() == &#34;true&#34;&#xA;&#34;--optimizer_random_pruning&#34;, default=False, type=float&#xA;&#34;--optimizer_magnitude_pruning&#34;, default=False, type=float&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We found that using &lt;code&gt;--optimizer_magnitude_pruning 0.9&lt;/code&gt; or plain &lt;code&gt;--reset_optimizer_on_relora&lt;/code&gt; usually performs well. Note that &lt;code&gt;--reset_optimizer_on_relora is True by default&lt;/code&gt; and you need to provide &lt;code&gt;--reset_optimizer_on_relora False --optimizer_magnitude_pruning 0.9&lt;/code&gt; if you want to do magnitude pruning.&lt;/p&gt; &#xA;&lt;p&gt;ReLoRA currently only supports cosine decay learning rate scheduler. Specifically &lt;code&gt;cosine_restarts&lt;/code&gt; that works in cyclical mode that repeats the warmup every &lt;code&gt;--cycle_length&lt;/code&gt; update steps.&lt;/p&gt; &#xA;&lt;h2&gt;Warm starts&lt;/h2&gt; &#xA;&lt;p&gt;You can start LoRa from a partially trained checkpoint. To do that, provide &lt;code&gt;--continue_from&lt;/code&gt; option. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;torchrun torchrun_main.py ... &amp;lt;other options&amp;gt; .. --continue_from checkpoints/llama_1b-2023-05-05-20-12-43/model_1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distributed training&lt;/h2&gt; &#xA;&lt;p&gt;We support single-node distributed training using vanilla PyTorch DDP. | &lt;code&gt;main.py&lt;/code&gt; script does not have all features required for relora and will be deleted soon. We recommend to use &lt;code&gt;torchrun --nproc-per-node 1&lt;/code&gt; for a single-GPU training.&lt;/p&gt; &#xA;&lt;p&gt;An example of using torchrun&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc-per-node 8 torchrun_main.py \&#xA;    --model_config configs/llama_35m.json \&#xA;    --use_peft \&#xA;    --lora_r 128 \&#xA;    --relora 500 \&#xA;    --cycle_length 500 \&#xA;    --warmup_steps 250 \&#xA;    --reset_optimizer_on_relora False \&#xA;    --lr 0.001 \&#xA;    --batch_size 60 \&#xA;    --total_batch_size 480 \&#xA;    --num_training_steps 5000 \&#xA;    --save_every 5000 \&#xA;    --dtype bfloat16 \&#xA;    --tags relora_debug,example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;--nproc-per-node&lt;/code&gt; is the nubmer of GPUs you are using.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{lialin2023stack,&#xA;    title={Stack More Layers Differently: High-Rank Training Through Low-Rank Updates},&#xA;    author={Vladislav Lialin and Namrata Shivagunde and Sherin Muckatira and Anna Rumshisky},&#xA;    year={2023},&#xA;    eprint={2307.05695},&#xA;    archivePrefix={arXiv},&#xA;    primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>