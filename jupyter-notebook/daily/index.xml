<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-11T01:33:16Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FareedKhan-dev/all-rag-techniques</title>
    <updated>2025-06-11T01:33:16Z</updated>
    <id>tag:github.com,2025-06-11:/FareedKhan-dev/all-rag-techniques</id>
    <link href="https://github.com/FareedKhan-dev/all-rag-techniques" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of all RAG techniques in a simpler way&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;All RAG Techniques: A Simpler, Hands-On Approach ✨&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/release/python-370/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.7+-blue.svg?sanitize=true&#34; alt=&#34;Python 3.7+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloud.nebius.ai/services/llm-embedding&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Nebius%20AI-API-brightgreen&#34; alt=&#34;Nebius AI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openai.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OpenAI-API-lightgrey&#34; alt=&#34;OpenAI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://medium.com/@fareedkhandev/testing-every-rag-technique-to-find-the-best-094d166af27f&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Medium-Blog-black?logo=medium&#34; alt=&#34;Medium&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository takes a clear, hands-on approach to &lt;strong&gt;Retrieval-Augmented Generation (RAG)&lt;/strong&gt;, breaking down advanced techniques into straightforward, understandable implementations. Instead of relying on frameworks like &lt;code&gt;LangChain&lt;/code&gt; or &lt;code&gt;FAISS&lt;/code&gt;, everything here is built using familiar Python libraries &lt;code&gt;openai&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, and a few others.&lt;/p&gt; &#xA;&lt;p&gt;The goal is simple: provide code that is readable, modifiable, and educational. By focusing on the fundamentals, this project helps demystify RAG and makes it easier to understand how it really works.&lt;/p&gt; &#xA;&lt;h2&gt;Update: 📢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(12-May-2025) Added a new notebook on how to handle big data using Knowledge Graphs.&lt;/li&gt; &#xA; &lt;li&gt;(27-April-2025) Added a new notebook which finds best RAG technique for a given query (Simple RAG + Reranker + Query Rewrite).&lt;/li&gt; &#xA; &lt;li&gt;(20-Mar-2025) Added a new notebook on RAG with Reinforcement Learning.&lt;/li&gt; &#xA; &lt;li&gt;(07-Mar-2025) Added 20 RAG techniques to the repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 What&#39;s Inside?&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a collection of Jupyter Notebooks, each focusing on a specific RAG technique. Each notebook provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A concise explanation of the technique.&lt;/li&gt; &#xA; &lt;li&gt;A step-by-step implementation from scratch.&lt;/li&gt; &#xA; &lt;li&gt;Clear code examples with inline comments.&lt;/li&gt; &#xA; &lt;li&gt;Evaluations and comparisons to demonstrate the technique&#39;s effectiveness.&lt;/li&gt; &#xA; &lt;li&gt;Visualization to visualize the results.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s a glimpse of the techniques covered:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Notebook&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/01_simple_rag.ipynb&#34;&gt;1. Simple RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A basic RAG implementation. A great starting point!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/02_semantic_chunking.ipynb&#34;&gt;2. Semantic Chunking&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Splits text based on semantic similarity for more meaningful chunks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/03_chunk_size_selector.ipynb&#34;&gt;3. Chunk Size Selector&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Explores the impact of different chunk sizes on retrieval performance.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/04_context_enriched_rag.ipynb&#34;&gt;4. Context Enriched RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Retrieves neighboring chunks to provide more context.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/05_contextual_chunk_headers_rag.ipynb&#34;&gt;5. Contextual Chunk Headers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prepends descriptive headers to each chunk before embedding.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/06_doc_augmentation_rag.ipynb&#34;&gt;6. Document Augmentation RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Generates questions from text chunks to augment the retrieval process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/07_query_transform.ipynb&#34;&gt;7. Query Transform&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rewrites, expands, or decomposes queries to improve retrieval. Includes &lt;strong&gt;Step-back Prompting&lt;/strong&gt; and &lt;strong&gt;Sub-query Decomposition&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/08_reranker.ipynb&#34;&gt;8. Reranker&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Re-ranks initially retrieved results using an LLM for better relevance.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/09_rse.ipynb&#34;&gt;9. RSE&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Relevant Segment Extraction: Identifies and reconstructs continuous segments of text, preserving context.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/10_contextual_compression.ipynb&#34;&gt;10. Contextual Compression&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Implements contextual compression to filter and compress retrieved chunks, maximizing relevant information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/11_feedback_loop_rag.ipynb&#34;&gt;11. Feedback Loop RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Incorporates user feedback to learn and improve RAG system over time.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/12_adaptive_rag.ipynb&#34;&gt;12. Adaptive RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Dynamically selects the best retrieval strategy based on query type.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/13_self_rag.ipynb&#34;&gt;13. Self RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Implements Self-RAG, dynamically decides when and how to retrieve, evaluates relevance, and assesses support and utility.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/14_proposition_chunking.ipynb&#34;&gt;14. Proposition Chunking&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Breaks down documents into atomic, factual statements for precise retrieval.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/15_multimodel_rag.ipynb&#34;&gt;15. Multimodel RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Combines text and images for retrieval, generating captions for images using LLaVA.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/16_fusion_rag.ipynb&#34;&gt;16. Fusion RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Combines vector search with keyword-based (BM25) retrieval for improved results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/17_graph_rag.ipynb&#34;&gt;17. Graph RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Organizes knowledge as a graph, enabling traversal of related concepts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/18_hierarchy_rag.ipynb&#34;&gt;18. Hierarchy RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Builds hierarchical indices (summaries + detailed chunks) for efficient retrieval.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/19_HyDE_rag.ipynb&#34;&gt;19. HyDE RAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Uses Hypothetical Document Embeddings to improve semantic matching.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/20_crag.ipynb&#34;&gt;20. CRAG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Corrective RAG: Dynamically evaluates retrieval quality and uses web search as a fallback.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/21_rag_with_rl.ipynb&#34;&gt;21. Rag with RL&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Maximize the reward of the RAG model using Reinforcement Learning.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/best_rag_finder.ipynb&#34;&gt;Best RAG Finder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Finds the best RAG technique for a given query using Simple RAG + Reranker + Query Rewrite.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/FareedKhan-dev/all-rag-techniques/main/22_Big_data_with_KG.ipynb&#34;&gt;22. Big Data with Knowledge Graphs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Handles large datasets using Knowledge Graphs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🗂️ Repository Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;fareedkhan-dev-all-rag-techniques/&#xA;├── README.md                          &amp;lt;- You are here!&#xA;├── 01_simple_rag.ipynb&#xA;├── 02_semantic_chunking.ipynb&#xA;├── 03_chunk_size_selector.ipynb&#xA;├── 04_context_enriched_rag.ipynb&#xA;├── 05_contextual_chunk_headers_rag.ipynb&#xA;├── 06_doc_augmentation_rag.ipynb&#xA;├── 07_query_transform.ipynb&#xA;├── 08_reranker.ipynb&#xA;├── 09_rse.ipynb&#xA;├── 10_contextual_compression.ipynb&#xA;├── 11_feedback_loop_rag.ipynb&#xA;├── 12_adaptive_rag.ipynb&#xA;├── 13_self_rag.ipynb&#xA;├── 14_proposition_chunking.ipynb&#xA;├── 15_multimodel_rag.ipynb&#xA;├── 16_fusion_rag.ipynb&#xA;├── 17_graph_rag.ipynb&#xA;├── 18_hierarchy_rag.ipynb&#xA;├── 19_HyDE_rag.ipynb&#xA;├── 20_crag.ipynb&#xA;├── 21_rag_with_rl.ipynb&#xA;├── 22_big_data_with_KG.ipynb&#xA;├── best_rag_finder.ipynb&#xA;├── requirements.txt                   &amp;lt;- Python dependencies&#xA;└── data/&#xA;    └── val.json                       &amp;lt;- Sample validation data (queries and answers)&#xA;    └── AI_Information.pdf             &amp;lt;- A sample PDF document for testing.&#xA;    └── attention_is_all_you_need.pdf  &amp;lt;- A sample PDF document for testing (for Multi-Modal RAG).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🛠️ Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/FareedKhan-dev/all-rag-techniques.git&#xA;cd all-rag-techniques&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up your OpenAI API key:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Obtain an API key from &lt;a href=&#34;https://studio.nebius.com/&#34;&gt;Nebius AI&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Set the API key as an environment variable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export OPENAI_API_KEY=&#39;YOUR_NEBIUS_AI_API_KEY&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setx OPENAI_API_KEY &#34;YOUR_NEBIUS_AI_API_KEY&#34;  # On Windows&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or, within your Python script/notebook:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;os.environ[&#34;OPENAI_API_KEY&#34;] = &#34;YOUR_NEBIUS_AI_API_KEY&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run the notebooks:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Open any of the Jupyter Notebooks (&lt;code&gt;.ipynb&lt;/code&gt; files) using Jupyter Notebook or JupyterLab. Each notebook is self-contained and can be run independently. The notebooks are designed to be executed sequentially within each file.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;data/AI_Information.pdf&lt;/code&gt; file provides a sample document for testing. You can replace it with your own PDF. The &lt;code&gt;data/val.json&lt;/code&gt; file contains sample queries and ideal answers for evaluation. The &#39;attention_is_all_you_need.pdf&#39; is for testing Multi-Modal RAG Notebook.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;💡 Core Concepts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Embeddings:&lt;/strong&gt; Numerical representations of text that capture semantic meaning. We use Nebius AI&#39;s embedding API and, in many notebooks, also the &lt;code&gt;BAAI/bge-en-icl&lt;/code&gt; embedding model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vector Store:&lt;/strong&gt; A simple database to store and search embeddings. We create our own &lt;code&gt;SimpleVectorStore&lt;/code&gt; class using NumPy for efficient similarity calculations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cosine Similarity:&lt;/strong&gt; A measure of similarity between two vectors. Higher values indicate greater similarity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Chunking:&lt;/strong&gt; Dividing text into smaller, manageable pieces. We explore various chunking strategies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Retrieval:&lt;/strong&gt; The process of finding the most relevant text chunks for a given query.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Generation:&lt;/strong&gt; Using a Large Language Model (LLM) to create a response based on the retrieved context and the user&#39;s query. We use the &lt;code&gt;meta-llama/Llama-3.2-3B-Instruct&lt;/code&gt; model via Nebius AI&#39;s API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Evaluation:&lt;/strong&gt; Assessing the quality of the RAG system&#39;s responses, often by comparing them to a reference answer or using an LLM to score relevance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome!&lt;/p&gt;</summary>
  </entry>
</feed>