<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-14T01:36:10Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>erdewit/HiFiScan</title>
    <updated>2022-09-14T01:36:10Z</updated>
    <id>tag:github.com,2022-09-14:/erdewit/HiFiScan</id>
    <link href="https://github.com/erdewit/HiFiScan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Optimize the audio quality of loudspeakers&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|PyVersion| |Status| |PyPiVersion| |License|&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;The goal of HiFiScan is to help equalize an audio system to get the best possible audio quality from it. There are two ways to do this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Manual: The realtime frequency spectrum is displayed and the peaks and troughs can be interactively equalized away.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automatic: The frequency response is measured and a correction is calculated. This correction is a phase-neutral finite impulse response (FIR) that can be imported into most equalizer programs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The measuring is done by playing a &#34;chirp&#34; sound that sweeps across all frequencies and recording how loud each frequency comes out of the speakers. A good microphone is needed, with a wide frequency range and preferably with a flat frequency response.&lt;/p&gt; &#xA;&lt;p&gt;The equalization itself is not provided; It can be performed by an equalizer of your choice, such as &lt;code&gt;EasyEffects &amp;lt;https://github.com/wwmm/easyeffects/&amp;gt;&lt;/code&gt;_ for Linux, &lt;code&gt;Equalizer APO &amp;lt;https://sourceforge.net/projects/equalizerapo/&amp;gt;&lt;/code&gt;_ and &lt;code&gt;Peace &amp;lt;https://sourceforge.net/projects/peace-equalizer-apo-extension/&amp;gt;&lt;/code&gt;_ for Windows, or &lt;code&gt;eqMac &amp;lt;https://eqmac.app/&amp;gt;&lt;/code&gt;_ for macOS.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install hifiscan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The program is started from a console by typing::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hifiscan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All functionality is also available for interactive use in &lt;code&gt;this Jupyter notebook &amp;lt;chirp.ipynb&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;h2&gt;Laptop&lt;/h2&gt; &#xA;&lt;p&gt;Lets first optimize the speakers of a laptop. The laptop has tiny down-firing speakers and a massive case resonance that makes it sound about as bad as it gets.&lt;/p&gt; &#xA;&lt;p&gt;The sound is recorded with a USB studio microphone; The built-in microphone of the laptop is not suitable for this.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/laptop_setup.jpg&lt;/p&gt; &#xA;&lt;p&gt;Letting the measurements run it becomes clear just how bad the spectrum is, with a peak at 1 kHz about 20 dB above average. Every 10 dB is a factor 10 in power, so 20 dB is a factor 100.&lt;/p&gt; &#xA;&lt;p&gt;The low frequency is set to 200 Hz since the laptop can&#39;t possibly output anything below this.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/laptop-spectrum.png&lt;/p&gt; &#xA;&lt;p&gt;To get an automatic correction, we go to the &#34;Impulse Response&#34; section (selectable in the lower left corner). From here it&#39;s possible to use all-default values and click straight on &#34;Export as WAV&#34; to get a perfectly adequate result.&lt;/p&gt; &#xA;&lt;p&gt;But lets optimize a bit further for this laptop. There are various tradeoffs that can be made, one of which involves the &lt;strong&gt;Duration&lt;/strong&gt; of the impulse. A longer duration gives better bass control, but also adds more latency. The latency added by the equalizer is halve the duration of the impulse. Since the laptop has no bass anyway, we choose a 22 ms duration for a super-low 11 ms latency. This is less time than it takes sound to travel four meters and is good enough even for gaming or video-calls.&lt;/p&gt; &#xA;&lt;p&gt;We also increase the &lt;strong&gt;Range&lt;/strong&gt; to 27 dB to get just a little bit of extra equalization.&lt;/p&gt; &#xA;&lt;p&gt;The lower graph (in brown) shows how the equalized spectrum is expected to be, and it looks nicely flattened.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/laptop-IR.png&lt;/p&gt; &#xA;&lt;p&gt;So lets export the impulse response and import it into EasyEffects (In Convolver effect: &#34;Impulses -&amp;gt; Import Impulse&#34; and then &#34;Load&#34;):&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/Convolver.png&lt;/p&gt; &#xA;&lt;p&gt;We go back to the spectrum measurement and set the uncorrected spectrum as reference (to compare with later measurements). Measuring the equalized system gives this:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/laptop-flattened-spectrum.png&lt;/p&gt; &#xA;&lt;p&gt;It is seen that the equalization works by attenuation only: Everything gets chopped to some level under the top (27 dB here) and this flattens the whole landscape.&lt;/p&gt; &#xA;&lt;p&gt;All this attenuation does decrease the total loudness, so the volume has to be turned up to get the same loudness. This also brings up the flanks of the spectrum and increases the effective frequency range. There&#39;s a very welcome 40 Hz of extra bass and a whole lot of treble:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/laptop-spectrum-equivolume.png&lt;/p&gt; &#xA;&lt;p&gt;This is the point to leave the graphs and start to listen to some music. Is there an improvement? There are of course lots of different tastes in what sounds good, but for those who like a neutrally balanced sound there is a huge improvement. Voices are also much easier to understand.&lt;/p&gt; &#xA;&lt;p&gt;The lack of bass is somewhat offset by the &lt;code&gt;missing fundamental &amp;lt;https://en.wikipedia.org/wiki/Missing_fundamental&amp;gt;&lt;/code&gt;_ phenomenon, were the brain &#34;adds&#34; a missing low frequency based on its higher frequency harmonics. It seems that by equalizing the harmonics the phantom bass gets equalized as well.&lt;/p&gt; &#xA;&lt;h2&gt;HiFi Stereo&lt;/h2&gt; &#xA;&lt;p&gt;The HiFi installation has four JBL surround loudspeakers wired in series as a 2x2 stereo setup, plus a subwoofer. The sound can only be described as very dull, as if the tweeters are not working.&lt;/p&gt; &#xA;&lt;p&gt;To calibrate we use the same microphone as for the laptop, which is a Superlux E205UMKII. Lets this time correct for any non-flatness of the microphone. According to the documentation it has this frequency response:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/mic_response.png&lt;/p&gt; &#xA;&lt;p&gt;With EasyEffects we make the following correction. The correction can be applied either to the input or the output. Here it&#39;s applied to the output, as long as it is turned off after the calibration that&#39;s OK.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/mic_correction.png&lt;/p&gt; &#xA;&lt;p&gt;Measuring the spectrum bears out the concerning lack of treble:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/stereo-spectrum.png&lt;/p&gt; &#xA;&lt;p&gt;So lets go to the Impulse Response section to fix this.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Range&lt;/strong&gt; is set to 33 dB - this is an extreme value but what the heck.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Tapering&lt;/strong&gt; is left at 5. It pulls the flanks of the Impulse Response closer to zero (visible in the green curve), which also has a smoothing effect on the spectrum. A value less than 5 might leave the flanks of the green curve too high and this can cause nasty &lt;code&gt;pre-echos &amp;lt;https://en.wikipedia.org/wiki/Pre-echo&amp;gt;&lt;/code&gt;_. A value higher than 5 might cause too much smoothing of the bass region.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Smoothing&lt;/strong&gt; will also smooth the spectrum, but the smoothing is done proportional to the frequency. It will smooth the bass region less, allowing for better precision there. A good smoothing value can be judged from the Correction Factor graph (in red): It should be smooth with nicely rounded corners, yet with enough detail.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Duration&lt;/strong&gt; is fiddled with until an acceptable bass response is reached (visible in lowest graph in brown).&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/stereo-ir.png&lt;/p&gt; &#xA;&lt;p&gt;After exporting the Impulse Response and importing it into EasyEffects the result looks promising.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/stereo-spectrum-corrected.png&lt;/p&gt; &#xA;&lt;p&gt;We turn up the volume to get the same loudness as before and apply some visual smoothing to the spectrum for clarity. It turns out that the tweeters can do their job if only the amplifier drives them 100 times as hard.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/stereo-final.png&lt;/p&gt; &#xA;&lt;p&gt;The difference in sound quality is night and day. Music is really really good now. For movies it brings very immersive action and excellent clarity of dialogue.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned in the introduction, the equalization is phase- neutral. This means that despite the heavy and steep equalization there are no relative phase shifts added. The details in a lossless source of music (such as the bounces of a cymbal) remain as crisp as can be.&lt;/p&gt; &#xA;&lt;p&gt;As an aside, the amplifier used is a $18 circuit board based on the &lt;code&gt;TPA3116D2 digital amplifier chip &amp;lt;https://www.ti.com/product/TPA3116D2&amp;gt;&lt;/code&gt;_. It draws 1.1 Watt while playing which only increases if the subwoofer is really busy.&lt;/p&gt; &#xA;&lt;h2&gt;Bluetooth headphones&lt;/h2&gt; &#xA;&lt;p&gt;HiFiScan is not intended for use with headphones. There is the &lt;code&gt;AutoEq project &amp;lt;https://github.com/jaakkopasanen/AutoEq&amp;gt;&lt;/code&gt;_ with ready-made corrections for most headphones, Even so, it can be used for experiments. For example, I have very nice Dali IO-4 headphones that can be used with Bluetooth or passively with an analog audio cable. It sounds better with Bluetooth, which suggests that some equalization is taking place. Lets measure this!&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/dali.jpg&lt;/p&gt; &#xA;&lt;p&gt;It is seen that there is a indeed a bit of active tuning going on, although most of the tuning is done acoustically. In orange is bluetooth and in cyan is the analog cable. There&#39;s a wide -10dB attenuation at 1.8 kHz and a narrow -4dB one at 5.5 kHz. This tuning can be applied to the analog signal to get the same sound as with Bluetooth.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: images/dali-spectrum.png&lt;/p&gt; &#xA;&lt;p&gt;.. |PyPiVersion| image:: &lt;a href=&#34;https://img.shields.io/pypi/v/hifiscan.svg&#34;&gt;https://img.shields.io/pypi/v/hifiscan.svg&lt;/a&gt; :alt: PyPi :target: &lt;a href=&#34;https://pypi.python.org/pypi/hifiscan&#34;&gt;https://pypi.python.org/pypi/hifiscan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |PyVersion| image:: &lt;a href=&#34;https://img.shields.io/badge/python-3.8+-blue.svg&#34;&gt;https://img.shields.io/badge/python-3.8+-blue.svg&lt;/a&gt; :alt:&lt;/p&gt; &#xA;&lt;p&gt;.. |Status| image:: &lt;a href=&#34;https://img.shields.io/badge/status-stable-green.svg&#34;&gt;https://img.shields.io/badge/status-stable-green.svg&lt;/a&gt; :alt:&lt;/p&gt; &#xA;&lt;p&gt;.. |License| image:: &lt;a href=&#34;https://img.shields.io/badge/license-BSD-blue.svg&#34;&gt;https://img.shields.io/badge/license-BSD-blue.svg&lt;/a&gt; :alt:&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;The software is provided on the conditions of the simplified BSD license. Any blown speakers or shattered glasses are on you.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy,&lt;/p&gt; &#xA;&lt;p&gt;:author: Ewald de Wit &lt;a href=&#34;mailto:ewald.de.wit@gmail.com&#34;&gt;ewald.de.wit@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>h2oai/h2o-3</title>
    <updated>2022-09-14T01:36:10Z</updated>
    <id>tag:github.com,2022-09-14:/h2oai/h2o-3</id>
    <link href="https://github.com/h2oai/h2o-3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;H2O is an Open Source, Distributed, Fast &amp; Scalable Machine Learning Platform: Deep Learning, Gradient Boosting (GBM) &amp; XGBoost, Random Forest, Generalized Linear Modeling (GLM with Elastic Net), K-Means, PCA, Generalized Additive Models (GAM), RuleFit, Support Vector Machine (SVM), Stacked Ensembles, Automatic Machine Learning (AutoML), etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;H2O&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/h2oai/h2o-3?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/h2oai/h2o-3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;H2O is an in-memory platform for distributed, scalable machine learning. H2O uses familiar interfaces like R, Python, Scala, Java, JSON and the Flow notebook/web interface, and works seamlessly with big data technologies like Hadoop and Spark. H2O provides implementations of many popular &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/data-science.html&#34;&gt;algorithms&lt;/a&gt; such as Generalized Linear Models (GLM), Gradient Boosting Machines (including XGBoost), Random Forests, Deep Neural Networks, Stacked Ensembles, Naive Bayes, Generalized Additive Models (GAM), Cox Proportional Hazards, K-Means, PCA, Word2Vec, as well as a fully automatic machine learning algorithm (&lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html&#34;&gt;H2O AutoML&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;H2O is extensible so that developers can add data transformations and custom algorithms of their choice and access them through all of those clients. H2O models can be &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/save-and-load-model.html&#34;&gt;downloaded&lt;/a&gt; and loaded into H2O memory for scoring, or exported into POJO or MOJO format for extemely fast scoring in &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/productionizing.html&#34;&gt;production&lt;/a&gt;. More information can be found in the &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/index.html&#34;&gt;H2O User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;H2O-3 (this repository) is the third incarnation of H2O, and the successor to &lt;a href=&#34;https://github.com/h2oai/h2o-2&#34;&gt;H2O-2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Downloading&#34;&gt;Downloading H2O-3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Resources&#34;&gt;Open Source Resources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#IssueTracking&#34;&gt;Issue Tracking and Feature Requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#OpenSourceResources&#34;&gt;List of H2O Resources&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Artifacts&#34;&gt;Using H2O-3 Code Artifacts (libraries)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Building&#34;&gt;Building H2O-3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Launching&#34;&gt;Launching H2O after Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#BuildingHadoop&#34;&gt;Building H2O on Hadoop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Sparkling&#34;&gt;Sparkling Water&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Citing&#34;&gt;Citing H2O&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Community&#34;&gt;Community&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Advisors&#34;&gt;Advisors&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#Investors&#34;&gt;Investors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Downloading&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1. Downloading H2O-3&lt;/h2&gt; &#xA;&lt;p&gt;While most of this README is written for developers who do their own builds, most H2O users just download and use a pre-built version. If you are a Python or R user, the easiest way to install H2O is via &lt;a href=&#34;https://pypi.python.org/pypi/h2o&#34;&gt;PyPI&lt;/a&gt; or &lt;a href=&#34;https://anaconda.org/h2oai/h2o&#34;&gt;Anaconda&lt;/a&gt; (for Python) or &lt;a href=&#34;https://CRAN.R-project.org/package=h2o&#34;&gt;CRAN&lt;/a&gt; (for R):&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install h2o&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;R&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;h2o&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the latest stable, nightly, Hadoop (or Spark / Sparkling Water) releases, or the stand-alone H2O jar, please visit: &lt;a href=&#34;https://h2o.ai/download&#34;&gt;https://h2o.ai/download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More info on downloading &amp;amp; installing H2O is available in the &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/downloading.html&#34;&gt;H2O User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Resources&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2. Open Source Resources&lt;/h2&gt; &#xA;&lt;p&gt;Most people interact with three or four primary open source resources: &lt;strong&gt;GitHub&lt;/strong&gt; (which you&#39;ve already found), &lt;strong&gt;JIRA&lt;/strong&gt; (for bug reports and issue tracking), &lt;strong&gt;Stack Overflow&lt;/strong&gt; for H2O code/software-specific questions, and &lt;strong&gt;h2ostream&lt;/strong&gt; (a Google Group / email discussion forum) for questions not suitable for Stack Overflow. There is also a &lt;strong&gt;Gitter&lt;/strong&gt; H2O developer chat group, however for archival purposes &amp;amp; to maximize accessibility, we&#39;d prefer that standard H2O Q&amp;amp;A be conducted on Stack Overflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;IssueTracking&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.1 Issue Tracking and Feature Requests&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(Note: There is only one issue tracking system for the project. GitHub issues are not enabled; you must use JIRA.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can browse and create new issues in our open source &lt;strong&gt;JIRA&lt;/strong&gt;: &lt;a href=&#34;http://jira.h2o.ai&#34;&gt;http://jira.h2o.ai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can &lt;strong&gt;browse&lt;/strong&gt; and search for &lt;strong&gt;issues&lt;/strong&gt; without logging in to JIRA: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Click the &lt;code&gt;Issues&lt;/code&gt; menu&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;Search for issues&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;To &lt;strong&gt;create&lt;/strong&gt; an &lt;strong&gt;issue&lt;/strong&gt; (either a bug or a feature request), please create yourself an account first: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Click the &lt;code&gt;Log In&lt;/code&gt; button on the top right of the screen&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;code&gt;Create an acccount&lt;/code&gt; near the bottom of the login box&lt;/li&gt; &#xA;   &lt;li&gt;Once you have created an account and logged in, use the &lt;code&gt;Create&lt;/code&gt; button on the menu to create an issue&lt;/li&gt; &#xA;   &lt;li&gt;Create H2O-3 issues in the &lt;a href=&#34;https://0xdata.atlassian.net/projects/PUBDEV/issues&#34;&gt;PUBDEV&lt;/a&gt; project. (Note: Sparkling Water questions should be filed under the &lt;a href=&#34;https://0xdata.atlassian.net/projects/SW/issues&#34;&gt;SW&lt;/a&gt; project.)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;You can also vote for feature requests and/or other issues. Voting can help H2O prioritize the features that are included in each release. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Go to the &lt;a href=&#34;https://0xdata.atlassian.net/&#34;&gt;H2O JIRA page&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Click &lt;strong&gt;Log In&lt;/strong&gt; to either log in or create an account if you do not already have one.&lt;/li&gt; &#xA;   &lt;li&gt;Search for the feature that you want to prioritize, or create a new feature.&lt;/li&gt; &#xA;   &lt;li&gt;Click on the &lt;strong&gt;Vote for this issue&lt;/strong&gt; link. This is located on the right side of the issue under the &lt;strong&gt;People&lt;/strong&gt; section.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;OpenSourceResources&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.2 List of H2O Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;GitHub&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/h2o-3&#34;&gt;https://github.com/h2oai/h2o-3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;JIRA -- file bug reports / track issues here&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://0xdata.atlassian.net/projects/PUBDEV/issues&#34;&gt;PUBDEV&lt;/a&gt; project contains issues for the current H2O-3 project)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stack Overflow -- ask all code/software questions here&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/h2o&#34;&gt;http://stackoverflow.com/questions/tagged/h2o&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cross Validated (Stack Exchange) -- ask algorithm/theory questions here&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://stats.stackexchange.com/questions/tagged/h2o&#34;&gt;https://stats.stackexchange.com/questions/tagged/h2o&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;h2ostream Google Group -- ask non-code related questions here&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Web: &lt;a href=&#34;https://groups.google.com/d/forum/h2ostream&#34;&gt;https://groups.google.com/d/forum/h2ostream&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Mail to: &lt;a href=&#34;mailto:h2ostream@googlegroups.com&#34;&gt;h2ostream@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gitter H2O Developer Chat&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gitter.im/h2oai/h2o-3&#34;&gt;https://gitter.im/h2oai/h2o-3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;H2O User Guide (main docs): &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/index.html&#34;&gt;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/index.html&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;All H2O documenation links: &lt;a href=&#34;http://docs.h2o.ai&#34;&gt;http://docs.h2o.ai&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Nightly build page (nightly docs linked in page): &lt;a href=&#34;https://s3.amazonaws.com/h2o-release/h2o/master/latest.html&#34;&gt;https://s3.amazonaws.com/h2o-release/h2o/master/latest.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download (pre-built packages)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://h2o.ai/download&#34;&gt;http://h2o.ai/download&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Jenkins (H2O build and test system)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://test.h2o.ai&#34;&gt;http://test.h2o.ai&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Website&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://h2o.ai&#34;&gt;http://h2o.ai&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Twitter -- follow us for updates and H2O news!&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://twitter.com/h2oai&#34;&gt;https://twitter.com/h2oai&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Awesome H2O -- share your H2O-powered creations with us&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/awesome-h2o&#34;&gt;https://github.com/h2oai/awesome-h2o&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Artifacts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Using H2O-3 Artifacts&lt;/h2&gt; &#xA;&lt;p&gt;Every nightly build publishes R, Python, Java, and Scala artifacts to a build-specific repository. In particular, you can find Java artifacts in the maven/repo directory.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example snippet of a gradle build file using h2o-3 as a dependency. Replace x, y, z, and nnnn with valid numbers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// h2o-3 dependency information&#xA;def h2oBranch = &#39;master&#39;&#xA;def h2oBuildNumber = &#39;nnnn&#39;&#xA;def h2oProjectVersion = &#34;x.y.z.${h2oBuildNumber}&#34;&#xA;&#xA;repositories {&#xA;  // h2o-3 dependencies&#xA;  maven {&#xA;    url &#34;https://s3.amazonaws.com/h2o-release/h2o-3/${h2oBranch}/${h2oBuildNumber}/maven/repo/&#34;&#xA;  }&#xA;}&#xA;&#xA;dependencies {&#xA;  compile &#34;ai.h2o:h2o-core:${h2oProjectVersion}&#34;&#xA;  compile &#34;ai.h2o:h2o-algos:${h2oProjectVersion}&#34;&#xA;  compile &#34;ai.h2o:h2o-web:${h2oProjectVersion}&#34;&#xA;  compile &#34;ai.h2o:h2o-app:${h2oProjectVersion}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the latest H2O-3 bleeding edge &lt;a href=&#34;http://s3.amazonaws.com/h2o-release/h2o-3/master/latest.html&#34;&gt;nightly build page&lt;/a&gt; for information about installing nightly build artifacts.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/h2oai/h2o-droplets&#34;&gt;h2o-droplets GitHub repository&lt;/a&gt; for a working example of how to use Java artifacts with gradle.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Stable H2O-3 artifacts are periodically published to Maven Central (&lt;a href=&#34;http://search.maven.org/#search%7Cga%7C1%7Cai.h2o&#34;&gt;click here to search&lt;/a&gt;) but may substantially lag behind H2O-3 Bleeding Edge nightly builds.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Building&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Building H2O-3&lt;/h2&gt; &#xA;&lt;p&gt;Getting started with H2O development requires &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/welcome.html#java-requirements&#34;&gt;JDK 1.8+&lt;/a&gt;, &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;https://gradle.org/&#34;&gt;Gradle&lt;/a&gt;, &lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt; and &lt;a href=&#34;http://www.r-project.org/&#34;&gt;R&lt;/a&gt;. We use the Gradle wrapper (called &lt;code&gt;gradlew&lt;/code&gt;) to ensure up-to-date local versions of Gradle and other dependencies are installed in your development directory.&lt;/p&gt; &#xA;&lt;h3&gt;4.1. Before building&lt;/h3&gt; &#xA;&lt;p&gt;Building &lt;code&gt;h2o&lt;/code&gt; requires a properly set up R environment with &lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#InstallRPackagesInUnix&#34;&gt;required packages&lt;/a&gt; and Python environment with the following packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grip&#xA;future&#xA;tabulate&#xA;requests&#xA;wheel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install these packages you can use &lt;a href=&#34;https://pip.pypa.io/en/stable/installing/&#34;&gt;pip&lt;/a&gt; or &lt;a href=&#34;https://conda.io/&#34;&gt;conda&lt;/a&gt;. If you have troubles installing these packages on &lt;em&gt;Windows&lt;/em&gt;, please follow section &lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#SetupWin&#34;&gt;Setup on Windows&lt;/a&gt; of this guide.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(Note: It is recommended to use some virtual environment such as &lt;a href=&#34;https://virtualenv.pypa.io/&#34;&gt;VirtualEnv&lt;/a&gt;, to install all packages. )&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.2. Building from the command line (Quick Start)&lt;/h3&gt; &#xA;&lt;p&gt;To build H2O from the repository, perform the following steps.&lt;/p&gt; &#xA;&lt;h4&gt;Recipe 1: Clone fresh, build, skip tests, and run H2O&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build H2O&#xA;git clone https://github.com/h2oai/h2o-3.git&#xA;cd h2o-3&#xA;./gradlew build -x test&#xA;&#xA;You may encounter problems: e.g. npm missing. Install it:&#xA;brew install npm&#xA;&#xA;# Start H2O&#xA;java -jar build/h2o.jar&#xA;&#xA;# Point browser to http://localhost:54321&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Recipe 2: Clone fresh, build, and run tests (requires a working install of R)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/h2oai/h2o-3.git&#xA;cd h2o-3&#xA;./gradlew syncSmalldata&#xA;./gradlew syncRPackages&#xA;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Running tests starts five test JVMs that form an H2O cluster and requires at least 8GB of RAM (preferably 16GB of RAM).&lt;/li&gt; &#xA;  &lt;li&gt;Running &lt;code&gt;./gradlew syncRPackages&lt;/code&gt; is supported on Windows, OS X, and Linux, and is strongly recommended but not required. &lt;code&gt;./gradlew syncRPackages&lt;/code&gt; ensures a complete and consistent environment with pre-approved versions of the packages required for tests and builds. The packages can be installed manually, but we recommend setting an ENV variable and using &lt;code&gt;./gradlew syncRPackages&lt;/code&gt;. To set the ENV variable, use the following format (where `${WORKSPACE} can be any path):&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;mkdir -p ${WORKSPACE}/Rlibrary&#xA;export R_LIBS_USER=${WORKSPACE}/Rlibrary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Recipe 3: Pull, clean, build, and run tests&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull&#xA;./gradlew syncSmalldata&#xA;./gradlew syncRPackages&#xA;./gradlew clean&#xA;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We recommend using &lt;code&gt;./gradlew clean&lt;/code&gt; after each &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Skip tests by adding &lt;code&gt;-x test&lt;/code&gt; at the end the gradle build command line. Tests typically run for 7-10 minutes on a Macbook Pro laptop with 4 CPUs (8 hyperthreads) and 16 GB of RAM.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Syncing smalldata is not required after each pull, but if tests fail due to missing data files, then try &lt;code&gt;./gradlew syncSmalldata&lt;/code&gt; as the first troubleshooting step. Syncing smalldata downloads data files from AWS S3 to the smalldata directory in your workspace. The sync is incremental. Do not check in these files. The smalldata directory is in .gitignore. If you do not run any tests, you do not need the smalldata directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Running &lt;code&gt;./gradlew syncRPackages&lt;/code&gt; is supported on Windows, OS X, and Linux, and is strongly recommended but not required. &lt;code&gt;./gradlew syncRPackages&lt;/code&gt; ensures a complete and consistent environment with pre-approved versions of the packages required for tests and builds. The packages can be installed manually, but we recommend setting an ENV variable and using &lt;code&gt;./gradlew syncRPackages&lt;/code&gt;. To set the ENV variable, use the following format (where &lt;code&gt;${WORKSPACE}&lt;/code&gt; can be any path):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mkdir -p ${WORKSPACE}/Rlibrary&#xA;export R_LIBS_USER=${WORKSPACE}/Rlibrary&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Recipe 4: Just building the docs&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./gradlew clean &amp;amp;&amp;amp; ./gradlew build -x test &amp;amp;&amp;amp; (export DO_FAST=1; ./gradlew dist)&#xA;open target/docs-website/h2o-docs/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;SetupWin&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.3. Setup on Windows&lt;/h3&gt; &#xA;&lt;h5&gt;Step 1: Download and install &lt;a href=&#34;https://winpython.github.io&#34;&gt;WinPython&lt;/a&gt;.&lt;/h5&gt; &#xA;&lt;p&gt;From the command line, validate &lt;code&gt;python&lt;/code&gt; is using the newly installed package by using &lt;code&gt;which python&lt;/code&gt; (or &lt;code&gt;sudo which python&lt;/code&gt;). &lt;a href=&#34;https://github.com/winpython/winpython/wiki/Environment&#34;&gt;Update the Environment variable&lt;/a&gt; with the WinPython path.&lt;/p&gt; &#xA;&lt;h5&gt;Step 2: Install required Python packages:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install grip future tabulate wheel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 3: Install JDK&lt;/h5&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/welcome.html#java-requirements&#34;&gt;Java 1.8+&lt;/a&gt; and add the appropriate directory &lt;code&gt;C:\Program Files\Java\jdk1.7.0_65\bin&lt;/code&gt; with java.exe to PATH in Environment Variables. To make sure the command prompt is detecting the correct Java version, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;javac -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CLASSPATH variable also needs to be set to the lib subfolder of the JDK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CLASSPATH=/&amp;lt;path&amp;gt;/&amp;lt;to&amp;gt;/&amp;lt;jdk&amp;gt;/lib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 4. Install Node.js&lt;/h5&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://nodejs.org/download/&#34;&gt;Node.js&lt;/a&gt; and add the installed directory &lt;code&gt;C:\Program Files\nodejs&lt;/code&gt;, which must include node.exe and npm.cmd to PATH if not already prepended.&lt;/p&gt; &#xA;&lt;h5&gt;Step 5. Install R, the required packages, and Rtools:&lt;/h5&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://www.r-project.org/&#34;&gt;R&lt;/a&gt; and add the bin directory to your PATH if not already included.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;InstallRPackagesInUnix&#34;&gt;&lt;/a&gt; Install the following R packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=RCurl&#34;&gt;RCurl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=jsonlite&#34;&gt;jsonlite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=statmod&#34;&gt;statmod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=devtools&#34;&gt;devtools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=roxygen2&#34;&gt;roxygen2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=testthat&#34;&gt;testthat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install these packages from within an R session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pkgs &amp;lt;- c(&#34;RCurl&#34;, &#34;jsonlite&#34;, &#34;statmod&#34;, &#34;devtools&#34;, &#34;roxygen2&#34;, &#34;testthat&#34;)&#xA;for (pkg in pkgs) {&#xA;  if (! (pkg %in% rownames(installed.packages()))) install.packages(pkg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;a href=&#34;http://curl.haxx.se&#34;&gt;libcurl&lt;/a&gt; is required for installation of the &lt;strong&gt;RCurl&lt;/strong&gt; R package.&lt;/p&gt; &#xA;&lt;p&gt;Note that this packages don&#39;t cover running tests, they for building H2O only.&lt;/p&gt; &#xA;&lt;p&gt;Finally, install &lt;a href=&#34;http://cran.r-project.org/bin/windows/Rtools/&#34;&gt;Rtools&lt;/a&gt;, which is a collection of command line tools to facilitate R development on Windows.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: During Rtools installation, do &lt;strong&gt;not&lt;/strong&gt; install Cygwin.dll.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Step 6. Install &lt;a href=&#34;https://cygwin.com/setup-x86_64.exe&#34;&gt;Cygwin&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: During installation of Cygwin, deselect the Python packages to avoid a conflict with the Python.org package.&lt;/p&gt; &#xA;&lt;h6&gt;Step 6b. Validate Cygwin&lt;/h6&gt; &#xA;&lt;p&gt;If Cygwin is already installed, remove the Python packages or ensure that Native Python is before Cygwin in the PATH variable.&lt;/p&gt; &#xA;&lt;h5&gt;Step 7. Update or validate the Windows PATH variable to include R, Java JDK, Cygwin.&lt;/h5&gt; &#xA;&lt;h5&gt;Step 8. Git Clone &lt;a href=&#34;https://github.com/h2oai/h2o-3.git&#34;&gt;h2o-3&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you don&#39;t already have a Git client, please install one. The default one can be found here &lt;a href=&#34;http://git-scm.com/downloads&#34;&gt;http://git-scm.com/downloads&lt;/a&gt;. Make sure that command prompt support is enabled before the installation.&lt;/p&gt; &#xA;&lt;p&gt;Download and update h2o-3 source codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/h2oai/h2o-3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 9. Run the top-level gradle build:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd h2o-3&#xA;./gradlew.bat build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you encounter errors run again with &lt;code&gt;--stacktrace&lt;/code&gt; for more instructions on missing dependencies.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.4. Setup on OS X&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;, we recommend installing it. It makes package management for OS X easy.&lt;/p&gt; &#xA;&lt;h5&gt;Step 1. Install JDK&lt;/h5&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/welcome.html#java-requirementsl&#34;&gt;Java 1.8+&lt;/a&gt;. To make sure the command prompt is detecting the correct Java version, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;javac -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 2. Install Node.js:&lt;/h5&gt; &#xA;&lt;p&gt;Using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, install from the &lt;a href=&#34;http://nodejs.org/download/&#34;&gt;NodeJS website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Step 3. Install R and the required packages:&lt;/h5&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://www.r-project.org/&#34;&gt;R&lt;/a&gt; and add the bin directory to your PATH if not already included.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;InstallRPackagesInUnix&#34;&gt;&lt;/a&gt; Install the following R packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=RCurl&#34;&gt;RCurl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=jsonlite&#34;&gt;jsonlite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=statmod&#34;&gt;statmod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=devtools&#34;&gt;devtools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=roxygen2&#34;&gt;roxygen2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/package=testthat&#34;&gt;testthat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install these packages from within an R session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pkgs &amp;lt;- c(&#34;RCurl&#34;, &#34;jsonlite&#34;, &#34;statmod&#34;, &#34;devtools&#34;, &#34;roxygen2&#34;, &#34;testthat&#34;)&#xA;for (pkg in pkgs) {&#xA;  if (! (pkg %in% rownames(installed.packages()))) install.packages(pkg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;a href=&#34;http://curl.haxx.se&#34;&gt;libcurl&lt;/a&gt; is required for installation of the &lt;strong&gt;RCurl&lt;/strong&gt; R package.&lt;/p&gt; &#xA;&lt;p&gt;Note that this packages don&#39;t cover running tests, they for building H2O only.&lt;/p&gt; &#xA;&lt;h5&gt;Step 4. Install python and the required packages:&lt;/h5&gt; &#xA;&lt;p&gt;Install python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install pip package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo easy_install pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next install required packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pip install wheel requests future tabulate  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 5. Git Clone &lt;a href=&#34;https://github.com/h2oai/h2o-3.git&#34;&gt;h2o-3&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;OS X should already have Git installed. To download and update h2o-3 source codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/h2oai/h2o-3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 6. Run the top-level gradle build:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd h2o-3&#xA;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: on a regular machine it may take very long time (about an hour) to run all the tests.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you encounter errors run again with &lt;code&gt;--stacktrace&lt;/code&gt; for more instructions on missing dependencies.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.5. Setup on Ubuntu 14.04&lt;/h3&gt; &#xA;&lt;h5&gt;Step 1. Install Node.js&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_0.12 | sudo bash -&#xA;sudo apt-get install -y nodejs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 2. Install JDK:&lt;/h5&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/welcome.html#java-requirements&#34;&gt;Java 8&lt;/a&gt;. Installation instructions can be found here &lt;a href=&#34;http://askubuntu.com/questions/56104/how-can-i-install-sun-oracles-proprietary-java-jdk-6-7-8-or-jre&#34;&gt;JDK installation&lt;/a&gt;. To make sure the command prompt is detecting the correct Java version, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;javac -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 3. Install R and the required packages:&lt;/h5&gt; &#xA;&lt;p&gt;Installation instructions can be found here &lt;a href=&#34;http://cran.r-project.org&#34;&gt;R installation&lt;/a&gt;. Click “Download R for Linux”. Click “ubuntu”. Follow the given instructions.&lt;/p&gt; &#xA;&lt;p&gt;To install the required packages, follow the &lt;a href=&#34;https://raw.githubusercontent.com/h2oai/h2o-3/master/#InstallRPackagesInUnix&#34;&gt;same instructions as for OS X above&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If the process fails to install RStudio Server on Linux, run one of the following:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;sudo apt-get install libcurl4-openssl-dev&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;or&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;sudo apt-get install libcurl4-gnutls-dev&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Step 4. Git Clone &lt;a href=&#34;https://github.com/h2oai/h2o-3.git&#34;&gt;h2o-3&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;If you don&#39;t already have a Git client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download and update h2o-3 source codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/h2oai/h2o-3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 5. Run the top-level gradle build:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd h2o-3&#xA;./gradlew build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you encounter errors, run again using &lt;code&gt;--stacktrace&lt;/code&gt; for more instructions on missing dependencies.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure that you are not running as root, since &lt;code&gt;bower&lt;/code&gt; will reject such a run.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.6. Setup on Ubuntu 13.10&lt;/h3&gt; &#xA;&lt;h5&gt;Step 1. Install Node.js&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_16.x | sudo bash -&#xA;sudo apt-get install -y nodejs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Steps 2-4. Follow steps 2-4 for Ubuntu 14.04 (above)&lt;/h5&gt; &#xA;&lt;h3&gt;4.7. Setup on CentOS 7&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /opt&#xA;sudo wget --no-cookies --no-check-certificate --header &#34;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&#34; &#34;http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz&#34;&#xA;&#xA;sudo tar xzf jdk-7u79-linux-x64.tar.gz&#xA;cd jdk1.7.0_79&#xA;&#xA;sudo alternatives --install /usr/bin/java java /opt/jdk1.7.0_79/bin/java 2&#xA;&#xA;sudo alternatives --install /usr/bin/jar jar /opt/jdk1.7.0_79/bin/jar 2&#xA;sudo alternatives --install /usr/bin/javac javac /opt/jdk1.7.0_79/bin/javac 2&#xA;sudo alternatives --set jar /opt/jdk1.7.0_79/bin/jar&#xA;sudo alternatives --set javac /opt/jdk1.7.0_79/bin/javac&#xA;&#xA;cd /opt&#xA;&#xA;sudo wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm&#xA;sudo rpm -ivh epel-release-7-5.noarch.rpm&#xA;&#xA;sudo echo &#34;multilib_policy=best&#34; &amp;gt;&amp;gt; /etc/yum.conf&#xA;sudo yum -y update&#xA;&#xA;sudo yum -y install R R-devel git python-pip openssl-devel libxml2-devel libcurl-devel gcc gcc-c++ make openssl-devel kernel-devel texlive texinfo texlive-latex-fonts libX11-devel mesa-libGL-devel mesa-libGL nodejs npm python-devel numpy scipy python-pandas&#xA;&#xA;sudo pip install scikit-learn grip tabulate statsmodels wheel&#xA;&#xA;mkdir ~/Rlibrary&#xA;export JAVA_HOME=/opt/jdk1.7.0_79&#xA;export JRE_HOME=/opt/jdk1.7.0_79/jre&#xA;export PATH=$PATH:/opt/jdk1.7.0_79/bin:/opt/jdk1.7.0_79/jre/bin&#xA;export R_LIBS_USER=~/Rlibrary&#xA;&#xA;# install local R packages&#xA;R -e &#39;install.packages(c(&#34;RCurl&#34;,&#34;jsonlite&#34;,&#34;statmod&#34;,&#34;devtools&#34;,&#34;roxygen2&#34;,&#34;testthat&#34;), dependencies=TRUE, repos=&#34;http://cran.rstudio.com/&#34;)&#39;&#xA;&#xA;cd&#xA;git clone https://github.com/h2oai/h2o-3.git&#xA;cd h2o-3&#xA;&#xA;# Build H2O&#xA;./gradlew syncSmalldata&#xA;./gradlew syncRPackages&#xA;./gradlew build -x test&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Launching&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5. Launching H2O after Building&lt;/h2&gt; &#xA;&lt;p&gt;To start the H2O cluster locally, execute the following on the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -jar build/h2o.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A list of available start-up JVM and H2O options (e.g. &lt;code&gt;-Xmx&lt;/code&gt;, &lt;code&gt;-nthreads&lt;/code&gt;, &lt;code&gt;-ip&lt;/code&gt;), is available in the &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/starting-h2o.html#from-the-command-line&#34;&gt;H2O User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;BuildingHadoop&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Building H2O on Hadoop&lt;/h2&gt; &#xA;&lt;p&gt;Pre-built H2O-on-Hadoop zip files are available on the &lt;a href=&#34;http://h2o.ai/download&#34;&gt;download page&lt;/a&gt;. Each Hadoop distribution version has a separate zip file in h2o-3.&lt;/p&gt; &#xA;&lt;p&gt;To build H2O with Hadoop support yourself, first install sphinx for python: &lt;code&gt;pip install sphinx&lt;/code&gt; Then start the build by entering the following from the top-level h2o-3 directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(export BUILD_HADOOP=1; ./gradlew build -x test)&#xA;./gradlew dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a directory called &#39;target&#39; and generate zip files there. Note that &lt;code&gt;BUILD_HADOOP&lt;/code&gt; is the default behavior when the username is &lt;code&gt;jenkins&lt;/code&gt; (refer to &lt;code&gt;settings.gradle&lt;/code&gt;); otherwise you have to request it, as shown above.&lt;/p&gt; &#xA;&lt;h3&gt;Adding support for a new version of Hadoop&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;code&gt;h2o-hadoop&lt;/code&gt; directory, each Hadoop version has a build directory for the driver and an assembly directory for the fatjar.&lt;/p&gt; &#xA;&lt;p&gt;You need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add a new driver directory and assembly directory (each with a &lt;code&gt;build.gradle&lt;/code&gt; file) in &lt;code&gt;h2o-hadoop&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add these new projects to &lt;code&gt;h2o-3/settings.gradle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the new Hadoop version to &lt;code&gt;HADOOP_VERSIONS&lt;/code&gt; in &lt;code&gt;make-dist.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add the new Hadoop version to the list in &lt;code&gt;h2o-dist/buildinfo.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Secure user impersonation&lt;/h3&gt; &#xA;&lt;p&gt;Hadoop supports &lt;a href=&#34;https://hadoop.apache.org/docs/r2.7.3/hadoop-project-dist/hadoop-common/Superusers.html&#34;&gt;secure user impersonation&lt;/a&gt; through its Java API. A kerberos-authenticated user can be allowed to proxy any username that meets specified criteria entered in the NameNode&#39;s core-site.xml file. This impersonation only applies to interactions with the Hadoop API or the APIs of Hadoop-related services that support it (this is not the same as switching to that user on the machine of origin).&lt;/p&gt; &#xA;&lt;p&gt;Setting up secure user impersonation (for h2o):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create or find an id to use as proxy which has limited-to-no access to HDFS or related services; the proxy user need only be used to impersonate a user&lt;/li&gt; &#xA; &lt;li&gt;(Required if not using h2odriver) If you are not using the driver (e.g. you wrote your own code against h2o&#39;s API using Hadoop), make the necessary code changes to impersonate users (see &lt;a href=&#34;http://hadoop.apache.org/docs/r2.8.0/api/org/apache/hadoop/security/UserGroupInformation.html&#34;&gt;org.apache.hadoop.security.UserGroupInformation&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In either of Ambari/Cloudera Manager or directly on the NameNode&#39;s core-site.xml file, add 2/3 properties for the user we wish to use as a proxy (replace &#xA;  &lt;proxyusername&gt;&#xA;    with the simple user name - not the fully-qualified principal name). &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;hadoop.proxyuser.&amp;lt;proxyusername&amp;gt;.hosts&lt;/code&gt;: the hosts the proxy user is allowed to perform impersonated actions on behalf of a valid user from&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;hadoop.proxyuser.&amp;lt;proxyusername&amp;gt;.groups&lt;/code&gt;: the groups an impersonated user must belong to for impersonation to work with that proxy user&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;hadoop.proxyuser.&amp;lt;proxyusername&amp;gt;.users&lt;/code&gt;: the users a proxy user is allowed to impersonate&lt;/li&gt; &#xA;    &lt;li&gt;Example: &lt;code&gt;&amp;lt;property&amp;gt; &amp;lt;name&amp;gt;hadoop.proxyuser.myproxyuser.hosts&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;host1,host2&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;hadoop.proxyuser.myproxyuser.groups&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;group1,group2&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;property&amp;gt; &amp;lt;name&amp;gt;hadoop.proxyuser.myproxyuser.users&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;user1,user2&amp;lt;/value&amp;gt; &amp;lt;/property&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/proxyusername&gt;&lt;/li&gt; &#xA; &lt;li&gt;Restart core services such as HDFS &amp;amp; YARN for the changes to take effect&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Impersonated HDFS actions can be viewed in the hdfs audit log (&#39;auth:PROXY&#39; should appear in the &lt;code&gt;ugi=&lt;/code&gt; field in entries where this is applicable). YARN similarly should show &#39;auth:PROXY&#39; somewhere in the Resource Manager UI.&lt;/p&gt; &#xA;&lt;p&gt;To use secure impersonation with h2o&#39;s Hadoop driver:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Before this is attempted, see Risks with impersonation, below&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When using the h2odriver (e.g. when running with &lt;code&gt;hadoop jar ...&lt;/code&gt;), specify &lt;code&gt;-principal &amp;lt;proxy user kerberos principal&amp;gt;&lt;/code&gt;, &lt;code&gt;-keytab &amp;lt;proxy user keytab path&amp;gt;&lt;/code&gt;, and &lt;code&gt;-run_as_user &amp;lt;hadoop username to impersonate&amp;gt;&lt;/code&gt;, in addition to any other arguments needed. If the configuration was successful, the proxy user will log in and impersonate the &lt;code&gt;-run_as_user&lt;/code&gt; as long as that user is allowed by either the users or groups configuration property (configured above); this is enforced by HDFS &amp;amp; YARN, not h2o&#39;s code. The driver effectively sets its security context as the impersonated user so all supported Hadoop actions will be performed as that user (e.g. YARN, HDFS APIs support securely impersonated users, but others may not).&lt;/p&gt; &#xA;&lt;h4&gt;Precautions to take when leveraging secure impersonation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The target use case for secure impersonation is applications or services that pre-authenticate a user and then use (in this case) the h2odriver on behalf of that user. H2O&#39;s Steam is a perfect example: auth user in web app over SSL, impersonate that user when creating the h2o YARN container.&lt;/li&gt; &#xA; &lt;li&gt;The proxy user should have limited permissions in the Hadoop cluster; this means no permissions to access data or make API calls. In this way, if it&#39;s compromised it would only have the power to impersonate a specific subset of the users in the cluster and only from specific machines.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;hadoop.proxyuser.&amp;lt;proxyusername&amp;gt;.hosts&lt;/code&gt; property whenever possible or practical.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t give the proxyusername&#39;s password or keytab to any user you don&#39;t want to impersonate another user (this is generally &lt;em&gt;any&lt;/em&gt; user). The point of impersonation is not to allow users to impersonate each other. See the first bullet for the typical use case.&lt;/li&gt; &#xA; &lt;li&gt;Limit user logon to the machine the proxying is occurring from whenever practical.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the keytab used to login the proxy user is properly secured and that users can&#39;t login as that id (via &lt;code&gt;su&lt;/code&gt;, for instance)&lt;/li&gt; &#xA; &lt;li&gt;Never set hadoop.proxyuser.&#xA;  &lt;proxyusername&gt;&#xA;   .{users,groups} to &#39;*&#39; or &#39;hdfs&#39;, &#39;yarn&#39;, etc. Allowing any user to impersonate hdfs, yarn, or any other important user/group should be done with extreme caution and &#xA;   &lt;em&gt;strongly&lt;/em&gt; analyzed before it&#39;s allowed.&#xA;  &lt;/proxyusername&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Risks with secure impersonation&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The id performing the impersonation can be compromised like any other user id.&lt;/li&gt; &#xA; &lt;li&gt;Setting any &lt;code&gt;hadoop.proxyuser.&amp;lt;proxyusername&amp;gt;.{hosts,groups,users}&lt;/code&gt; property to &#39;*&#39; can greatly increase exposure to security risk.&lt;/li&gt; &#xA; &lt;li&gt;When users aren&#39;t authenticated before being used with the driver (e.g. like Steam does via a secure web app/API), auditability of the process/system is difficult.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git diff&#xA;diff --git a/h2o-app/build.gradle b/h2o-app/build.gradle&#xA;index af3b929..097af85 100644&#xA;--- a/h2o-app/build.gradle&#xA;+++ b/h2o-app/build.gradle&#xA;@@ -8,5 +8,6 @@ dependencies {&#xA;   compile project(&#34;:h2o-algos&#34;)&#xA;   compile project(&#34;:h2o-core&#34;)&#xA;   compile project(&#34;:h2o-genmodel&#34;)&#xA;+  compile project(&#34;:h2o-persist-hdfs&#34;)&#xA; }&#xA;&#xA;diff --git a/h2o-persist-hdfs/build.gradle b/h2o-persist-hdfs/build.gradle&#xA;index 41b96b2..6368ea9 100644&#xA;--- a/h2o-persist-hdfs/build.gradle&#xA;+++ b/h2o-persist-hdfs/build.gradle&#xA;@@ -2,5 +2,6 @@ description = &#34;H2O Persist HDFS&#34;&#xA;&#xA; dependencies {&#xA;   compile project(&#34;:h2o-core&#34;)&#xA;-  compile(&#34;org.apache.hadoop:hadoop-client:2.0.0-cdh4.3.0&#34;)&#xA;+  compile(&#34;org.apache.hadoop:hadoop-client:2.4.1-mapr-1408&#34;)&#xA;+  compile(&#34;org.json:org.json:chargebee-1.0&#34;)&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Sparkling&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7. Sparkling Water&lt;/h2&gt; &#xA;&lt;p&gt;Sparkling Water combines two open-source technologies: Apache Spark and the H2O Machine Learning platform. It makes H2O’s library of advanced algorithms, including Deep Learning, GLM, GBM, K-Means, and Distributed Random Forest, accessible from Spark workflows. Spark users can select the best features from either platform to meet their Machine Learning needs. Users can combine Spark&#39;s RDD API and Spark MLLib with H2O’s machine learning algorithms, or use H2O independently of Spark for the model building process and post-process the results in Spark.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sparkling Water Resources&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://h2o.ai/download/&#34;&gt;Download page for pre-built packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/sparkling-water&#34;&gt;Sparkling Water GitHub repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/sparkling-water/raw/master/README.md&#34;&gt;README&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/sparkling-water/raw/master/DEVEL.md&#34;&gt;Developer documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;8. Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Documenation Homepage&lt;/h3&gt; &#xA;&lt;p&gt;The main H2O documentation is the &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/index.html&#34;&gt;H2O User Guide&lt;/a&gt;. Visit &lt;a href=&#34;http://docs.h2o.ai&#34;&gt;http://docs.h2o.ai&lt;/a&gt; for the top-level introduction to documentation on H2O projects.&lt;/p&gt; &#xA;&lt;h3&gt;Generate REST API documentation&lt;/h3&gt; &#xA;&lt;p&gt;To generate the REST API documentation, use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/h2o-3&#xA;cd py&#xA;python ./generate_rest_api_docs.py  # to generate Markdown only&#xA;python ./generate_rest_api_docs.py --generate_html  --github_user GITHUB_USER --github_password GITHUB_PASSWORD # to generate Markdown and HTML&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default location for the generated documentation is &lt;code&gt;build/docs/REST&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If the build fails, try &lt;code&gt;gradlew clean&lt;/code&gt;, then &lt;code&gt;git clean -f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bleeding edge build documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation for each bleeding edge nightly build is available on the &lt;a href=&#34;http://s3.amazonaws.com/h2o-release/h2o/master/latest.html&#34;&gt;nightly build page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Citing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;9. Citing H2O&lt;/h2&gt; &#xA;&lt;p&gt;If you use H2O as part of your workflow in a publication, please cite your H2O resource(s) using the following BibTex entry:&lt;/p&gt; &#xA;&lt;h3&gt;H2O Software&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Manual{h2o_package_or_module,&#xA;    title = {package_or_module_title},&#xA;    author = {H2O.ai},&#xA;    year = {year},&#xA;    month = {month},&#xA;    note = {version_information},&#xA;    url = {resource_url},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Formatted H2O Software citation examples&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;H2O.ai (Oct. 2016). &lt;em&gt;Python Interface for H2O&lt;/em&gt;, Python module version 3.10.0.8. &lt;a href=&#34;https://github.com/h2oai/h2o-3&#34;&gt;https://github.com/h2oai/h2o-3&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;H2O.ai (Oct. 2016). &lt;em&gt;R Interface for H2O&lt;/em&gt;, R package version 3.10.0.8. &lt;a href=&#34;https://github.com/h2oai/h2o-3&#34;&gt;https://github.com/h2oai/h2o-3&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;H2O.ai (Oct. 2016). &lt;em&gt;H2O&lt;/em&gt;, H2O version 3.10.0.8. &lt;a href=&#34;https://github.com/h2oai/h2o-3&#34;&gt;https://github.com/h2oai/h2o-3&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;H2O Booklets&lt;/h3&gt; &#xA;&lt;p&gt;H2O algorithm booklets are available at the &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/index.html&#34;&gt;Documentation Homepage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Manual{h2o_booklet_name,&#xA;    title = {booklet_title},&#xA;    author = {list_of_authors},&#xA;    year = {year},&#xA;    month = {month},&#xA;    url = {link_url},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Formatted booklet citation examples&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Arora, A., Candel, A., Lanford, J., LeDell, E., and Parmar, V. (Oct. 2016). &lt;em&gt;Deep Learning with H2O&lt;/em&gt;. &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/booklets/DeepLearningBooklet.pdf&#34;&gt;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/booklets/DeepLearningBooklet.pdf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Click, C., Lanford, J., Malohlava, M., Parmar, V., and Roark, H. (Oct. 2016). &lt;em&gt;Gradient Boosted Models with H2O&lt;/em&gt;. &lt;a href=&#34;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/booklets/GBMBooklet.pdf&#34;&gt;http://docs.h2o.ai/h2o/latest-stable/h2o-docs/booklets/GBMBooklet.pdf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Roadmap&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;10. Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;H2O 3.36.0.1 - Winter 2021&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://h2oai.atlassian.net/browse/PUBDEV-4940&#34;&gt;[PUBDEV-4940]&lt;/a&gt; Uplift Trees&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://h2oai.atlassian.net/browse/PUBDEV-8074&#34;&gt;[PUBDEV-8074]&lt;/a&gt; Admissible ML - Infogram&lt;/li&gt; &#xA; &lt;li&gt;RuleFit improvements (multinomial support, rule deduplication and consolidation)&lt;/li&gt; &#xA; &lt;li&gt;Backward elimination in MAXR&lt;/li&gt; &#xA; &lt;li&gt;Improved support for CDP (S3A with IDBroker)&lt;/li&gt; &#xA; &lt;li&gt;Support for Java 16 and 17, Python 3.8&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;H2O 3.38.0.1 - Spring 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://h2oai.atlassian.net/browse/PUBDEV-8074&#34;&gt;[PUBDEV-8074]&lt;/a&gt; Admissible ML - stage 2 (algos)&lt;/li&gt; &#xA; &lt;li&gt;Multi-Output Regression in Deep Learning&lt;/li&gt; &#xA; &lt;li&gt;GAM Improvements (support for Monotonic Splines)&lt;/li&gt; &#xA; &lt;li&gt;XGBoost Upgrade&lt;/li&gt; &#xA; &lt;li&gt;Data Ingest Improvements (Secured Hive in Standalone/K8S)&lt;/li&gt; &#xA; &lt;li&gt;Extended Isolation Forest MOJO&lt;/li&gt; &#xA; &lt;li&gt;Uplift MOJO&lt;/li&gt; &#xA; &lt;li&gt;New features ICE plots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;11. Community&lt;/h2&gt; &#xA;&lt;p&gt;H2O has been built by a great many number of contributors over the years both within H2O.ai (the company) and the greater open source community. You can begin to contribute to H2O by answering &lt;a href=&#34;http://stackoverflow.com/questions/tagged/h2o&#34;&gt;Stack Overflow&lt;/a&gt; questions or &lt;a href=&#34;https://0xdata.atlassian.net/projects/PUBDEV/issues&#34;&gt;filing bug reports&lt;/a&gt;. Please join us!&lt;/p&gt; &#xA;&lt;h3&gt;Team &amp;amp; Committers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SriSatish Ambati&#xA;Cliff Click&#xA;Tom Kraljevic&#xA;Tomas Nykodym&#xA;Michal Malohlava&#xA;Kevin Normoyle&#xA;Spencer Aiello&#xA;Anqi Fu&#xA;Nidhi Mehta&#xA;Arno Candel&#xA;Josephine Wang&#xA;Amy Wang&#xA;Max Schloemer&#xA;Ray Peck&#xA;Prithvi Prabhu&#xA;Brandon Hill&#xA;Jeff Gambera&#xA;Ariel Rao&#xA;Viraj Parmar&#xA;Kendall Harris&#xA;Anand Avati&#xA;Jessica Lanford&#xA;Alex Tellez&#xA;Allison Washburn&#xA;Amy Wang&#xA;Erik Eckstrand&#xA;Neeraja Madabhushi&#xA;Sebastian Vidrio&#xA;Ben Sabrin&#xA;Matt Dowle&#xA;Mark Landry&#xA;Erin LeDell&#xA;Andrey Spiridonov&#xA;Oleg Rogynskyy&#xA;Nick Martin&#xA;Nancy Jordan&#xA;Nishant Kalonia&#xA;Nadine Hussami&#xA;Jeff Cramer&#xA;Stacie Spreitzer&#xA;Vinod Iyengar&#xA;Charlene Windom&#xA;Parag Sanghavi&#xA;Navdeep Gill&#xA;Lauren DiPerna&#xA;Anmol Bal&#xA;Mark Chan&#xA;Nick Karpov&#xA;Avni Wadhwa&#xA;Ashrith Barthur&#xA;Karen Hayrapetyan&#xA;Jo-fai Chow&#xA;Dmitry Larko&#xA;Branden Murray&#xA;Jakub Hava&#xA;Wen Phan&#xA;Magnus Stensmo&#xA;Pasha Stetsenko&#xA;Angela Bartz&#xA;Mateusz Dymczyk&#xA;Micah Stubbs&#xA;Ivy Wang&#xA;Terone Ward&#xA;Leland Wilkinson&#xA;Wendy Wong&#xA;Nikhil Shekhar&#xA;Pavel Pscheidl&#xA;Michal Kurka&#xA;Veronika Maurerova&#xA;Jan Sterba&#xA;Jan Jendrusak&#xA;Sebastien Poirier&#xA;Tomáš Frýda&#xA;Ard Kelmendi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Advisors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advisors&lt;/h2&gt; &#xA;&lt;p&gt;Scientific Advisory Council&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Stephen Boyd&#xA;Rob Tibshirani&#xA;Trevor Hastie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Systems, Data, FileSystems and Hadoop&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Doug Lea&#xA;Chris Pouliot&#xA;Dhruba Borthakur&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Investors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Investors&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Jishnu Bhattacharjee, Nexus Venture Partners&#xA;Anand Babu Periasamy&#xA;Anand Rajaraman&#xA;Ash Bhardwaj&#xA;Rakesh Mathur&#xA;Michael Marks&#xA;Egbert Bierman&#xA;Rajesh Ambati&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>