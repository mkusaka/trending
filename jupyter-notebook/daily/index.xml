<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-13T01:31:08Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebookresearch/Pearl</title>
    <updated>2024-08-13T01:31:08Z</updated>
    <id>tag:github.com,2024-08-13:/facebookresearch/Pearl</id>
    <link href="https://github.com/facebookresearch/Pearl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Production-ready Reinforcement Learning AI Agent Library brought by the Applied Reinforcement Learning team at Meta.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebookresearch/Pearl/main/logo/pearl_long.png&#34; alt=&#34;alt&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pearl - A Production-ready Reinforcement Learning AI Agent Library&lt;/h1&gt; &#xA;&lt;h3&gt;Proudly brought by Applied Reinforcement Learning @ Meta&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v0.1 - Pearl beta-version is now released! Announcements: &lt;a href=&#34;https://x.com/ZheqingZhu/status/1732880717263352149?s=20&#34;&gt;Twitter Post&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/posts/zheqingzhubill_github-facebookresearchpearl-a-production-ready-activity-7138647748102258688-rz-g?utm_source=share&amp;amp;utm_medium=member_desktop&#34;&gt;LinkedIn Post&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Highlighted on Meta NeurIPS 2023 Official Website: &lt;a href=&#34;https://ai.meta.com/events/neurips-2023/&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Highlighted by AI at Meta official handle on Twitter and LinkedIn: &lt;a href=&#34;https://x.com/AIatMeta/status/1734633932975407202?s=20&#34;&gt;Twitter Post&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/posts/aiatmeta_neurips2023-activity-7140398603868549120-5T7E?utm_source=share&amp;amp;utm_medium=member_desktop&#34;&gt;LinkedIn Post&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.fb.com/support-ukraine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/facebookresearch/Pearl&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/facebookresearch/Pearl/graph/badge.svg?token=CARFOP3E30&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More details of the library at our &lt;a href=&#34;https://pearlagent.github.io&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Pearl paper is &lt;a href=&#34;https://chs6.short.gy/pearl_paper&#34;&gt;available at Arxiv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our NeurIPS 2023 Presentation Slides is released &lt;a href=&#34;https://pearlagent.github.io/pearl_detailed_intro.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Pearl is a new production-ready Reinforcement Learning AI agent library open-sourced by the Applied Reinforcement Learning team at Meta. Furthering our efforts on open AI innovation, Pearl enables researchers and practitioners to develop Reinforcement Learning AI agents. These AI agents prioritize cumulative long-term feedback over immediate feedback and can adapt to environments with limited observability, sparse feedback, and high stochasticity. We hope that Pearl offers the community a means to build state-of-the-art Reinforcement Learning AI agents that can adapt to a wide range of complex production environments.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install Pearl, you can simply clone this repository and run &lt;code&gt;pip install -e .&lt;/code&gt; (you need &lt;code&gt;pip&lt;/code&gt; version ≥ 21.3 and &lt;code&gt;setuptools&lt;/code&gt; version ≥ 64):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/facebookresearch/Pearl.git&#xA;cd Pearl&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;To kick off a Pearl agent with a classic reinforcement learning environment, here&#39;s a quick example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from pearl.pearl_agent import PearlAgent&#xA;from pearl.action_representation_modules.one_hot_action_representation_module import (&#xA;    OneHotActionTensorRepresentationModule,&#xA;)&#xA;from pearl.policy_learners.sequential_decision_making.deep_q_learning import (&#xA;    DeepQLearning,&#xA;)&#xA;from pearl.replay_buffers.sequential_decision_making.fifo_off_policy_replay_buffer import (&#xA;    FIFOOffPolicyReplayBuffer,&#xA;)&#xA;from pearl.utils.instantiations.environments.gym_environment import GymEnvironment&#xA;&#xA;env = GymEnvironment(&#34;CartPole-v1&#34;)&#xA;&#xA;num_actions = env.action_space.n&#xA;agent = PearlAgent(&#xA;    policy_learner=DeepQLearning(&#xA;        state_dim=env.observation_space.shape[0],&#xA;        action_space=env.action_space,&#xA;        hidden_dims=[64, 64],&#xA;        training_rounds=20,&#xA;        action_representation_module=OneHotActionTensorRepresentationModule(&#xA;            max_number_actions=num_actions&#xA;        ),&#xA;    ),&#xA;    replay_buffer=FIFOOffPolicyReplayBuffer(10_000),&#xA;)&#xA;&#xA;observation, action_space = env.reset()&#xA;agent.reset(observation, action_space)&#xA;done = False&#xA;while not done:&#xA;    action = agent.act(exploit=False)&#xA;    action_result = env.step(action)&#xA;    agent.observe(action_result)&#xA;    agent.learn()&#xA;    done = action_result.done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users can replace the environment with any real-world problems.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;We provide a few tutorial Jupyter notebooks (and are currently working on more!):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nbviewer.org/github/facebookresearch/Pearl/blob/main/tutorials/single_item_recommender_system_example/single_item_recommender_system.ipynb&#34;&gt;A single item recommender system&lt;/a&gt;. We derived a small contrived recommender system environment using the MIND dataset (Wu et al. 2020).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nbviewer.org/github/facebookresearch/Pearl/blob/main/tutorials/contextual_bandits/contextual_bandits_tutorial.ipynb&#34;&gt;Contextual bandits&lt;/a&gt;. Demonstrates contextual bandit algorithms and their implementation using Pearl using a contextual bandit environment for providing data from UCI datasets, and tested the performance of neural implementations of SquareCB, LinUCB, and LinTS.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nbviewer.org/github/facebookresearch/Pearl/blob/main/tutorials/frozen_lake/frozen_lake.ipynb&#34;&gt;Frozen Lake&lt;/a&gt;. A simple example showing how to use a one-hot observation wrapper to learn the classic problem with DQN.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nbviewer.org/github/facebookresearch/Pearl/blob/main/tutorials/sequential_decision_making/DQN_and_DoubleDQN_example.ipynb&#34;&gt;Deep Q-Learning (DQN) and Double DQN&lt;/a&gt;. Demonstrates how to run DQN and Double DQN on the Cart-Pole environment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nbviewer.org/github/facebookresearch/Pearl/blob/main/tutorials/actor_critic_and_rc_safety_module/actor_critic_and_safe_actor_critic.ipynb&#34;&gt;Actor-critic algorithms with safety constraints&lt;/a&gt;. Demonstrates how to run Actor Critic methods, including a version with safe constraints.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Design and Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/facebookresearch/Pearl/main/logo/agent_interface.png&#34; alt=&#34;alt&#34;&gt; Pearl was built with a modular design so that industry practitioners or academic researchers can select any subset and flexibly combine features below to construct a Pearl agent customized for their specific use cases. Pearl offers a diverse set of unique features for production environments, including dynamic action spaces, offline learning, intelligent neural exploration, safe decision making, history summarization, and data augmentation.&lt;/p&gt; &#xA;&lt;p&gt;You can find many Pearl agent candidates with mix-and-match set of reinforcement learning features in utils/scripts/benchmark_config.py&lt;/p&gt; &#xA;&lt;h2&gt;Adoption in Real-world Applications&lt;/h2&gt; &#xA;&lt;p&gt;Pearl is in progress supporting real-world applications, including recommender systems, auction bidding systems and creative selection. Each of them requires a subset of features offered by Pearl. To visualize the subset of features used by each of the applications above, see the table below.&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Pearl Features&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Recommender Systems&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Auction Bidding&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Creative Selection&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Policy Learning&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Intelligent Exploration&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Safety&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;History Summarization&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Replay Buffer&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Contextual Bandit&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Offline RL&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Dynamic Action Space&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Large-scale Neural Network&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Comparison to Other Libraries&lt;/h2&gt; &#xA;&lt;center&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Pearl Features&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Pearl&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;ReAgent (Superseded by Pearl)&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;RLLib&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;SB3&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Tianshou&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Dopamine&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Agent Modularity&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Dynamic Action Space&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Offline RL&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Intelligent Exploration&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;⚪ (limited support)&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Contextual Bandit&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;⚪ (only linear support)&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Safe Decision Making&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;History Summarization&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;⚪ (requires modifying environment state)&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;Data Augmented Replay Buffer&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Cite Us&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{pearl2023paper,&#xA;    title = {Pearl: A Production-ready Reinforcement Learning Agent},&#xA;    author = {Zheqing Zhu, Rodrigo de Salvo Braz, Jalaj Bhandari, Daniel Jiang, Yi Wan, Yonathan Efroni, Ruiyang Xu, Liyuan Wang, Hongbo Guo, Alex Nikulkov, Dmytro Korenkevych, Urun Dogan, Frank Cheng, Zheng Wu, Wanqiao Xu},&#xA;    eprint = {arXiv preprint arXiv:2312.03814},&#xA;    year = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Pearl is MIT licensed, as found in the LICENSE file.&lt;/p&gt;</summary>
  </entry>
</feed>