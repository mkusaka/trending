<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-09T01:36:55Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mattyamonaca/layerdivider</title>
    <updated>2023-03-09T01:36:55Z</updated>
    <id>tag:github.com,2023-03-09:/mattyamonaca/layerdivider</id>
    <link href="https://github.com/mattyamonaca/layerdivider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool to divide a single illustration into a layered structure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;layerdivider&lt;/h1&gt; &#xA;&lt;p&gt;A tool to divide a single illustration into a layered structure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/mattyamonaca/layerdivider/blob/main/layerdivider_launch.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48423148/223202706-5c6e9108-0cf4-40dc-b840-9c3df3d540da.png&#34; alt=&#34;スクリーンショット 2023-03-07 034638&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48423148/223345165-e4e2e7f6-059f-445a-ac3d-2c9c3ecd094a.png&#34; alt=&#34;スクリーンショット_20230307_035053&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/48423148/223344286-bf2dff31-3fc5-4970-8d68-86274f1f36eb.mp4&#34;&gt;https://user-images.githubusercontent.com/48423148/223344286-bf2dff31-3fc5-4970-8d68-86274f1f36eb.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;処理内容&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;入力された画像をピクセル単位でRGB情報に従いクラスタリング&lt;/li&gt; &#xA; &lt;li&gt;色の類似度（CIEDE2000基準）が近いクラスタを統合&lt;/li&gt; &#xA; &lt;li&gt;入力された画像をブラー処理で平滑化&lt;/li&gt; &#xA; &lt;li&gt;クラスタごとにブラー処理後の色の平均値を出し、算出した平均値ですべてのピクセルを塗りなおし&lt;/li&gt; &#xA; &lt;li&gt;2-4を指定された回数繰り返し実行&lt;/li&gt; &#xA; &lt;li&gt;最終的なクラスタリング結果に基づき、ベースとなるレイヤーを作成&lt;/li&gt; &#xA; &lt;li&gt;ベースレイヤーの各色を、入力された画像のクラスタ毎の平均色で塗りなおし&lt;/li&gt; &#xA; &lt;li&gt;ベースレイヤーとオリジナルの色差に基づいて効果レイヤーを算出&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;パラメータ説明&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;roop: 処理2-4を繰り返す回数&lt;/li&gt; &#xA; &lt;li&gt;init_cluster: 処理1で生成するクラスタの数（大きいほど細かくレイヤー分けされる）&lt;/li&gt; &#xA; &lt;li&gt;ciede_threshold: 処理2でどの程度色が類似していたらクラスタを結合するか決める閾値&lt;/li&gt; &#xA; &lt;li&gt;blur_size: 処理3でかけるブラー処理の大きさ（大きいほど強くぼかす）&lt;/li&gt; &#xA; &lt;li&gt;output_layer_mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;normal: 通常レイヤーのみで出力されるPSDを構成&lt;/li&gt; &#xA;   &lt;li&gt;composite: 通常レイヤー、スクリーンレイヤー、乗算レイヤー、減算レイヤー、加算レイヤーを組み合わせて出力されるPSDを構成&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>gkamradt/langchain-tutorials</title>
    <updated>2023-03-09T01:36:55Z</updated>
    <id>tag:github.com,2023-03-09:/gkamradt/langchain-tutorials</id>
    <link href="https://github.com/gkamradt/langchain-tutorials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Overview and tutorial of the LangChain Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LangChain Tutorials&lt;/h1&gt; &#xA;&lt;p&gt;Overview and tutorial of the &lt;a href=&#34;https://langchain.readthedocs.io/en/latest/&#34;&gt;LangChain library&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the accompanying YouTube tutorials @ &lt;a href=&#34;https://www.youtube.com/channel/UCyR2Ct3pDOeZSRyZH5hPO-Q&#34;&gt;https://www.youtube.com/channel/UCyR2Ct3pDOeZSRyZH5hPO-Q&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to get updated when new tutorials are out, sign up at &lt;a href=&#34;https://raw.githubusercontent.com/gkamradt/langchain-tutorials/main/www.dataindependent.com&#34;&gt;DataIndependent&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This series is provided by and associated with &lt;a href=&#34;https://raw.githubusercontent.com/gkamradt/langchain-tutorials/main/www.dataindependent.com&#34;&gt;DataIndependent&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>XksA-me/ChatGPT-3.5-API</title>
    <updated>2023-03-09T01:36:55Z</updated>
    <id>tag:github.com,2023-03-09:/XksA-me/ChatGPT-3.5-API</id>
    <link href="https://github.com/XksA-me/ChatGPT-3.5-API" rel="alternate"></link>
    <summary type="html">&lt;p&gt;手把手教你使用Python调用 ChatGPT-3.5-API。Hands teach you to use Python to call ChatGPT-3.5-API.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;目录结构&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.&#xA;├── LICENSE&#xA;├── README.md      # 项目说明文件&#xA;├── demo-cmd.py    # 教程中多轮对话代码案例&#xA;├── demo.ipynb     # 教程中所有代码及注释&#xA;├── envs           # 存放 key&#xA;│&amp;nbsp;&amp;nbsp; └── openai_key&#xA;├── user_messages.json   # 存储用户访问数据文件&#xA;└── 【详细教程】手把手教你使用 Python 调用 ChatGPT-3.5-API.md   # 教程内容&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;运行说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装依赖&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install openai==0.27.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;国内访问需要自己配置代理，将代码中以下部分改成你自己代理端口即可:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;os.environ[&#34;HTTP_PROXY&#34;] = &#34;http://127.0.0.1:7890&#34;&#xA;os.environ[&#34;HTTPS_PROXY&#34;] = &#34;http://127.0.0.1:7890&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;envs/openai_key 文件中的 api 改成你自己的，如何获取 openai api 看教程内介绍。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;运行代码&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python demo-cmd.py&#xA;&#xA;&#39;&#39;&#39;&#xA;请输入用户名称: 简说Python&#xA;【简说Python】你好，用 画龙点睛 造句&#xA;【ChatGPT】在这篇论文中，作者使用了一种简单而精妙的方法来解决这个难题，正是这种方法起到了画龙点睛的作用，使得整个研究更加完美。&#xA;【简说Python】0&#xA;*********退出程序**********&#xA;&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更多拓展&lt;/h2&gt; &#xA;&lt;p&gt;** 后面将陆续更新到这个 repo。**&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;你可以写个函数，从 json 文件读取历史用户访问记录，然后每次访问可以选用户。&lt;/li&gt; &#xA; &lt;li&gt;你可以写个 web 服务，使用 session 或者数据库支持多用户同时登录，同时访问。&lt;/li&gt; &#xA; &lt;li&gt;你可以基于之前分享的钉钉机器人项目，将 gpt-3.5-turbo 接入钉钉机器人。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;你还可以上 Github 搜索更多 ChatGPT 相关项目，或者其他有意思的项目学习练手，欢迎学习交流。&lt;/p&gt; &#xA;&lt;p&gt;我创建了个 ChatGPT 应用交流群，如果你感兴趣可以扫下方二维码添加我微信申请加入（备注申请原因）。&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://img-blog.csdnimg.cn/8005475710f1431095f60b2e97af42c4.png&#34; width=&#34;60%&#34;&gt; &#xA; &lt;p&gt;扫码即可加我微信&lt;/p&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;项目更新计划&lt;/h2&gt; &#xA;&lt;h3&gt;2023.3.3&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于最新模型 gpt-3.5-turbo&lt;/li&gt; &#xA; &lt;li&gt;支持多轮对话&lt;/li&gt; &#xA; &lt;li&gt;仅实现 Python 控制台应用 程序代码文件：&lt;a href=&#34;https://github.com/XksA-me/ChatGPT-3.5-API/raw/master/demo-cmd.py&#34;&gt;demo-cmd.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2023.3.x&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;开发ing:&lt;/strong&gt;（预计本周上线）&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于flask，构建 chatgpt api&lt;/li&gt; &#xA; &lt;li&gt;支持根据用户账号密码自动生成 token&lt;/li&gt; &#xA; &lt;li&gt;支持限制单用户没日访问次数&lt;/li&gt; &#xA; &lt;li&gt;支持设置token有效期&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;下一步开发计划:&lt;/strong&gt;(预计下周上线)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于 pywebio/streamlit 的web 页面应用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;再下一步:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于flask的web页面应用&lt;/li&gt; &#xA; &lt;li&gt;支持登录注册&lt;/li&gt; &#xA; &lt;li&gt;限制单用户单日访问次数&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;再再下一步:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;钉钉机器人，可以参考项目&lt;a href=&#34;https://github.com/XksA-me/DingdingBot&#34;&gt;DingdingBot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;飞书机器人，如果有人有需要的话&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/XksA-me/ChatGPT-3.5-API/issues/2&#34;&gt;更多需求可以点击这里交流&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>