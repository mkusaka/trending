<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-24T01:37:22Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hwchase17/chroma-langchain</title>
    <updated>2023-04-24T01:37:22Z</updated>
    <id>tag:github.com,2023-04-24:/hwchase17/chroma-langchain</id>
    <link href="https://github.com/hwchase17/chroma-langchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chroma-langchain&lt;/h1&gt; &#xA;&lt;p&gt;A repository to highlight examples of using the Chroma (vector database) with LangChain (framework for developing LLM applications).&lt;/p&gt; &#xA;&lt;h2&gt;Document Question-Answering&lt;/h2&gt; &#xA;&lt;p&gt;For an example of using Chroma+LangChain to do question answering over documents, see &lt;a href=&#34;https://raw.githubusercontent.com/hwchase17/chroma-langchain/master/qa.ipynb&#34;&gt;this notebook&lt;/a&gt;. To use a persistent database with Chroma and Langchain, see &lt;a href=&#34;https://raw.githubusercontent.com/hwchase17/chroma-langchain/master/qa_persistent.ipynb&#34;&gt;this notebook&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aaparshina/22-23_Intro-to-DS</title>
    <updated>2023-04-24T01:37:22Z</updated>
    <id>tag:github.com,2023-04-24:/aaparshina/22-23_Intro-to-DS</id>
    <link href="https://github.com/aaparshina/22-23_Intro-to-DS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>PENGLU-WashU/IMC_Denoise</title>
    <updated>2023-04-24T01:37:22Z</updated>
    <id>tag:github.com,2023-04-24:/PENGLU-WashU/IMC_Denoise</id>
    <link href="https://github.com/PENGLU-WashU/IMC_Denoise" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IMC_Denoise: a software package to enhance Imaging Mass Cytometry - Nature Communications&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/PENGLU-WashU/IMC_Denoise&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/PENGLU-WashU/IMC_Denoise&#34; alt=&#34;GitHub release (latest by date)&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-v3.6-blue&#34; alt=&#34;Python version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/suggestions-welcome-green&#34; alt=&#34;Suggestions&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;IMC-Denoise: a content aware denoising pipeline to enhance Imaging Mass Cytometry&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/images/github.png&#34; alt=&#34;Logo&#34; width=&#34;600&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;Imaging Mass Cytometry (IMC) is an emerging multiplexed imaging technology for analyzing complex microenvironments that has the ability to detect the spatial distribution of at least 40 cell markers. However, this new modality has unique image data processing requirements, particularly when applying this technology to patient tissue specimens. In these cases, signal-to-noise ratio (SNR) for particular markers can be low despite optimization of staining conditions, and the presence of pixel intensity artifacts can deteriorate image quality and the performance of downstream analysis. Here we demonstrate a content aware pipeline, IMC-Denoise, to restore IMC images. Specifically, we deploy &lt;strong&gt;(i)&lt;/strong&gt; a &lt;strong&gt;D&lt;/strong&gt;ifferential &lt;strong&gt;I&lt;/strong&gt;ntensity &lt;strong&gt;M&lt;/strong&gt;ap-based &lt;strong&gt;R&lt;/strong&gt;estoration (&lt;strong&gt;DIMR&lt;/strong&gt;) algorithm for removing hot pixels and &lt;strong&gt;(ii, iii)&lt;/strong&gt; a self-supervised &lt;strong&gt;Deep&lt;/strong&gt; learning algorithm for &lt;strong&gt;S&lt;/strong&gt;hot &lt;strong&gt;N&lt;/strong&gt;oise &lt;strong&gt;i&lt;/strong&gt;mage &lt;strong&gt;F&lt;/strong&gt;iltering (&lt;strong&gt;DeepSNiF&lt;/strong&gt;). IMC-Denoise enables adaptive hot pixel removal without loss of resolution and delivers significant SNR improvement to a diverse set of IMC channels and datasets. Here we show how to implement IMC-Denoise and develop the software package &lt;strong&gt;IMC_Denoise&lt;/strong&gt;. We hope this package could help the researchers in the field of mass cytometry imaging.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of denoising results from human bone marrow IMC dataset&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Denoise lymphocyte antibody-stained images&lt;/b&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/images/Demo_figure.png&#34; alt=&#34;Logo&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Denoise other antibody-stained images&lt;/b&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/images/Demo_figure2.png&#34; alt=&#34;Logo&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#directory-structure-of-imc_denoise&#34;&gt;Directory structure of IMC_Denoise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#customize-environment-for-imc_denoise&#34;&gt;Customize environment for IMC_Denoise&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#our-imc_denoise-environment&#34;&gt;Our IMC_Denoise environment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#implement-imc_denoise&#34;&gt;Implement IMC_Denoise&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#directory-structure-of-raw-imc-images&#34;&gt;Directory structure of raw IMC images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#download-example-data&#34;&gt;Download example data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#imc_denoise-tutorials-with-jupyter-notebook&#34;&gt;IMC_Denoise tutorials with Jupyter Notebook&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#implement-imc_denoise-with-scripts&#34;&gt;Implement IMC_Denoise with scripts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PENGLU-WashU/IMC_Denoise/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory structure of IMC_Denoise&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;IMC_Denoise&#xA;|---IMC_Denoise&#xA;|---|---IMC_Denoise_main&#xA;|---|---|---DIMR.py&#xA;|---|---|---DeepSNiF.py&#xA;|---|---|---DeepSNiF_model.py&#xA;|---|---|---loss_functions.py&#xA;|---|---DeepSNiF_utils&#xA;|---|---|---DeepSNiF_DataGenerator.py&#xA;|---|---|---DeepSNiF_TrainGenerator.py&#xA;|---|---Anscombe_transform&#xA;|---|---|---Anscombe_transform_functions.py&#xA;|---|---|---Anscombe_vectors.mat&#xA;|---Jupyter_Notebook_examples&#xA;|---|---IMC_Denoise_Train_and_Predict.ipynb&#xA;|---|---IMC_Denoise_Train.ipynb&#xA;|---|---IMC_Denoise_Predict.ipynb&#xA;|---scripts&#xA;|---|---Data_generation_DeepSNiF_script.py&#xA;|---|---Training_DeepSNiF_script.py&#xA;|---|---Generate_data_and_training_DeepSNiF_script.py&#xA;|---|---Predict_DIMR_script.py&#xA;|---|---Predict_IMC_Denoise_script.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IMC_Denoise&lt;/strong&gt; implements DIMR and DeepSNiF algorithms to remove hot pixels and filter shot noise in IMC images, respectively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jupyter Notebooks&lt;/strong&gt; and &lt;strong&gt;scripts&lt;/strong&gt; include several examples to implement IMC_Denoise algorithms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize environment for IMC_Denoise&lt;/h2&gt; &#xA;&lt;h3&gt;Our IMC_Denoise environment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 10 64bit&lt;/li&gt; &#xA; &lt;li&gt;Python 3.6&lt;/li&gt; &#xA; &lt;li&gt;Tensorflow 2.2.0&lt;/li&gt; &#xA; &lt;li&gt;Keras 2.3.1&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA GPU + CUDA&lt;/li&gt; &#xA; &lt;li&gt;Note that Linux also works with such configurations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a virtual environment and install tensorflow-gpu and keras (we run all the codes in a Anaconda Powershell Prompt).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ conda create -n &#39;IMC_Denoise&#39; python=3.6&#xA;$ conda activate IMC_Denoise (some systems recommend: source activate IMC_Denoise)&#xA;$ conda install -c anaconda brotlipy&#xA;$ pip install tensorflow==2.2.0 keras==2.3.1&#xA;$ conda install -c anaconda cudnn=7.6.5 cudatoolkit=10.1.243&#xA;$ pip install jupyter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In case above commends do not work, please try:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ conda create -n IMC_Denoise python=3.6 anaconda&#xA;$ conda activate IMC_Denoise (some systems recommend: source activate IMC_Denoise)&#xA;$ pip install tensorflow==2.2.0 keras==2.3.1&#xA;$ conda install -c anaconda cudnn=7.6.5 cudatoolkit=10.1.243&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the source code and install the package in your folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/PENGLU-WashU/IMC_Denoise.git&#xA;$ cd IMC_Denoise&#xA;$ pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use dockerfile provided to build reproducible environment with IMC_Denoise.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/PENGLU-WashU/IMC_Denoise.git&#xA;$ cd IMC_Denoise&#xA;$ docker build -t imc_denoise:1.0 . --platform linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On LSF cluster to run scripts or jupyter notebooks, respectively:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ LSF_DOCKER_PORTS=&#34;8888:8888&#34; bsub -Is -R &#39;select[gpuhost,port8888=1]&#39; -gpu &#34;num=1:gmodel=TeslaV100_SXM2_32GB&#34; -a &#39;docker(imc_denoise:1.0)&#39; /bin/bash&#xA;$ cd /IMC_Denoise&#xA;&#xA;$ LSF_DOCKER_PORTS=&#34;8888:8888&#34; PATH=&#34;/opt/conda/bin:$PATH&#34; bsub -Is -R &#39;select[gpuhost,port8888=1]&#39; -gpu &#34;num=1:gmodel=TeslaV100_SXM2_32GB&#34; -a &#39;docker(imc_denoise:latest)&#39; jupyter-notebook --ip=0.0.0.0 --NotebookApp.allow_origin=*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implement IMC_Denoise&lt;/h2&gt; &#xA;&lt;h3&gt;Directory structure of raw IMC images&lt;/h3&gt; &#xA;&lt;p&gt;In order to generate a training set for DeepSNiF, the directory structure of raw IMC images must be arranged as follows. Note that the Channel_img names should contain the specific isotope names. For example, &#34;141Pr&#34; in &#34;141Pr-CD38_Pr141.tiff&#34; and &#34;144Nd&#34; in &#34;144Nd-CD14_Nd144.tiff&#34;. We define the isotope names as the channel names of the IMC images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;|---Raw_image_directory&#xA;|---|---Tissue1_sub_directory&#xA;|---|---|---Channel1_img.tiff&#xA;|---|---|---Channel2_img.tiff&#xA;             ...&#xA;|---|---|---Channel_n_img.tiff&#xA;|---|---Tissue2_sub_directory&#xA;|---|---|---Channel1_img.tiff&#xA;|---|---|---Channel2_img.tiff&#xA;             ...&#xA;|---|---|---Channel_n_img.tiff&#xA;             ...&#xA;|---|---Tissue_m_sub_directory&#xA;|---|---|---Channel1_img.tiff&#xA;|---|---|---Channel2_img.tiff&#xA;             ...&#xA;|---|---|---Channel_n_img.tiff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download example data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Please go to &lt;a href=&#34;https://doi.org/10.5281/zenodo.6533905&#34;&gt;https://doi.org/10.5281/zenodo.6533905&lt;/a&gt; and download &lt;strong&gt;Raw_IMC_dataset_for_training_supp_table5.zip&lt;/strong&gt;. Then unzip this file as the folder &lt;strong&gt;Raw_IMC_dataset_for_training_supp_table5&lt;/strong&gt;. This folder contains all the images for DeepSNiF training.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We also provide all the images of this human bone marrow IMC dataset, which are compressed in &lt;strong&gt;Raw_IMC_dataset_all_supp_table5&lt;/strong&gt; and can also be downloaded from &lt;a href=&#34;https://doi.org/10.5281/zenodo.6533905&#34;&gt;https://doi.org/10.5281/zenodo.6533905&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Previously generated training sets and trained weights can be accessed from &lt;a href=&#34;https://doi.org/10.5281/zenodo.7101454&#34;&gt;https://doi.org/10.5281/zenodo.7101454&lt;/a&gt;. Please refer to our paper for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commonly used hyper-parameters of the algorithm&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default Value&lt;/th&gt; &#xA;   &lt;th&gt;Data type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n_neighbours&lt;/td&gt; &#xA;   &lt;td&gt;The number of adjacent pixels used to compare with center pixel in DIMR algorithm.&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n_iter&lt;/td&gt; &#xA;   &lt;td&gt;The iteration number of DIMR algorithm.&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slide_window_size&lt;/td&gt; &#xA;   &lt;td&gt;The sliding window size in DIMR algorithm.&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ratio_thresh&lt;/td&gt; &#xA;   &lt;td&gt;The threshold of the sparsity of the generated patch, which is range from 0 to 1. If the percentage of zero-value pixel is larger than this threshold, the corresponding patch will not be saved in the generated training set.&lt;/td&gt; &#xA;   &lt;td&gt;0.8&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;train_epoches&lt;/td&gt; &#xA;   &lt;td&gt;The training epoches in DeepSNiF.&lt;/td&gt; &#xA;   &lt;td&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;train_batch_size&lt;/td&gt; &#xA;   &lt;td&gt;The training batch size in DeepSNiF. Try smaller value if memory is not enough.&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lambda_HF&lt;/td&gt; &#xA;   &lt;td&gt;The parameter for Hessian regularization. We recommend to set it as 3e-6.&lt;/td&gt; &#xA;   &lt;td&gt;3e-6&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;train_initial_lr&lt;/td&gt; &#xA;   &lt;td&gt;Initial training rate.&lt;/td&gt; &#xA;   &lt;td&gt;1e-3&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;truncated_max_rate&lt;/td&gt; &#xA;   &lt;td&gt;The max_val of the channel is 1.1*(truncated_max_rate*100)-th pixel values, which is used to mitigate the impact of extremely large pixel values. Normally set as 0.99999, 0.9999 or 0.999.&lt;/td&gt; &#xA;   &lt;td&gt;0.99999&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;val_set_percent&lt;/td&gt; &#xA;   &lt;td&gt;The percentage of patches used as validation set, which ranges from 0 to 1.&lt;/td&gt; &#xA;   &lt;td&gt;0.15&lt;/td&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;IMC_Denoise tutorials with Jupyter Notebook&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To start Jupyter Notebooks and run the examples.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ conda activate IMC_Denoise&#xA;$ jupyter notebook --notebook-dir=your_folder_of_notebook_examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Train and predict the DeepSNiF algorithm separately, in which the generated dataset and trained weights will be saved. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PENGLU-WashU/IMC_Denoise/raw/main/Jupyter_Notebook_examples/IMC_Denoise_Train.ipynb&#34;&gt;DeepSNiF: generate data and training&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PENGLU-WashU/IMC_Denoise/raw/main/Jupyter_Notebook_examples/IMC_Denoise_Predict.ipynb&#34;&gt;IMC_Denoise: remove hot pixels with DIMR and filter shot noise with the pre-trained model of DeepSNiF&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Train and predict the DeepSNiF algorithm in the same notebook, in which the generated dataset and trained weights will not be saved. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/PENGLU-WashU/IMC_Denoise/raw/main/Jupyter_Notebook_examples/IMC_Denoise_Train_and_Predict.ipynb&#34;&gt;IMC_Denoise: remove hot pixels with DIMR and filter shot noise with the onsite training of DeepSNiF&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Implement IMC_Denoise with scripts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Activate the IMC_Denoise environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ conda activate IMC_Denoise&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here we take the images with marker CD38 as an example. For our dataset, CD38 is conjucted with 141Pr. In this case, the &#34;channel_name&#34; should be set as its corresponding isotope name &#34;141Pr&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Generating training set and train a DeepSNiF model. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generate training set of a specific marker channel for DeepSNiF. The generated training data will be saved in a sub-directory &#34;Generated_training_set&#34; of the current folder other than setting a customized folder. For CD38, the saved name will be &#34;training_set_141Pr.npz&#34;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;python scripts/Data_generation_DeepSNiF_script.py --channel_name &#39;141Pr&#39; --Raw_directory &#39;Your_raw_img_directory&#39; --Save_directory &#39;your_generated_training_set_directory&#39;  --n_neighbours &#39;4&#39; --n_iter &#39;3&#39; --slide_window_size &#39;3&#39; --ratio_thresh &#39;0.8&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Train a DeepSNiF network. The generated training set will be loaded from a default folder other than choosing a customized folder. The trained weights will be saved in a sub-directory &#34;trained_weights&#34; of the current folder other than setting a customized folder. Hyper-parameters can be adjusted. Note that when implementing prediction, input the same &#34;trained_weights&#34; name. If your GPU has smaller memory so that it cannot afford a large &#34;train_batch_size&#34; such as 128 or 256, please use a smaller one, e.g. 64, 32.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;python scripts/Training_DeepSNiF_script.py --train_set_name &#39;training_set_141Pr.npz&#39; --train_data_directory &#39;directory_of_your_training_set&#39; --weights_name &#39;weights_141Pr-CD38.hdf5&#39; --train_epoches &#39;200&#39; --train_batch_size &#39;128&#39; --val_set_percent &#39;0.15&#39; --lambda_HF &#39;3e-6&#39; --train_initial_lr &#39;1e-3&#39; --truncated_max_rate &#39;0.99999&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generate training set for a specific marker channel and then train a DeepSNiF network. In this process, the generated training set will not be saved in a directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;python scripts/Generate_data_and_training_DeepSNiF_script.py --channel_name &#39;141Pr&#39; --weights_name &#39;weights_141Pr-CD38.hdf5&#39; --Raw_directory &#39;Your_raw_img_directory&#39; --train_epoches &#39;200&#39; --train_batch_size &#39;128&#39; --val_set_percent &#39;0.15&#39; --n_neighbours &#39;4&#39; --n_iter &#39;3&#39; --slide_window_size &#39;3&#39; --ratio_thresh &#39;0.8&#39; --lambda_HF &#39;3e-6&#39; --train_initial_lr &#39;1e-3&#39; --truncated_max_rate &#39;0.99999&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Combine multiple generated training sets from different channels into a single training set. &lt;pre&gt;&lt;code&gt;python scripts/Combine_multiple_datasets.py --load_directory &#39;the_folder_of_the_training_sets_to_be_combined&#39; --save_directory &#39;the_folder_to_save_the_combined_training_set&#39; --saved_training_set_name&#34; &#39;the_name_of_the_combined_training_set&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Implement IMC_Denoise to enhance IMC images. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement DIMR for a single IMC image if the SNR of the image is good.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;python scripts/Predict_DIMR_script.py --Raw_img_name &#39;your_raw_img_name(.tiff)&#39; --Denoised_img_name &#39;your_denoised_img_name(.tiff)&#39; --n_neighbours &#39;4&#39; --n_iter &#39;3&#39; --slide_window_size &#39;3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement DIMR for multiple IMC images if the SNR of the image is good.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;python scripts/Predict_DIMR_batch.py --channel_name &#39;141Pr&#39; --load_directory &#39;raw_image_folders (please refer to Section: Directory structure of IMC_Denoise)&#39; --save_directory &#39;DIMR_processed_image_folders&#39; --n_neighbours &#39;4&#39; --n_iter &#39;3&#39; --slide_window_size &#39;3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement IMC_Denoise including DIMR and DeepSNiF for a single IMC image if the image is contaminated by hot pixels and suffers from low SNR. The trained weights will be loaded from the default directory other than choosing a customized folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;python scripts/Predict_IMC_Denoise_script.py --Raw_img_name &#39;your_raw_img_name(.tiff)&#39; --Denoised_img_name &#39;your_denoised_img_name(.tiff)&#39; --weights_name &#39;weights_141Pr-CD38.hdf5&#39; --weights_save_directory &#39;your_directory_to_save_trained_weights&#39; --n_neighbours &#39;4&#39; --n_iter &#39;3&#39; --slide_window_size &#39;3&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Implement IMC_Denoise including DIMR and DeepSNiF for multiple IMC imagse if the images are contaminated by hot pixels and suffers from low SNR. The trained weights will be loaded from the default directory other than choosing a customized folder.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;python scripts/Predict_IMC_Denoise_batch.py --channel_name &#39;141Pr&#39; --load_directory &#39;raw_image_folders (please refer to Section: Directory structure of IMC_Denoise)&#39; --save_directory &#39;IMC_Denoise_processed_image_folders&#39; --weights_name &#39;weights_141Pr-CD38.hdf5&#39; --weights_save_directory &#39;your_directory_to_save_trained_weights&#39; --n_neighbours &#39;4&#39; --n_iter &#39;3&#39; --slide_window_size &#39;3&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;More specific parameters can also be added and adjusted. Please refer to the scripts files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Peng Lu - &lt;a href=&#34;https://twitter.com/penglu10&#34;&gt;@penglu10&lt;/a&gt; - &lt;a href=&#34;mailto:penglu@wustl.edu&#34;&gt;penglu@wustl.edu&lt;/a&gt; &lt;br&gt;Project Link: &lt;a href=&#34;https://github.com/PENGLU-WashU/IMC_Denoise&#34;&gt;https://github.com/PENGLU-WashU/IMC_Denoise&lt;/a&gt; &lt;br&gt;Lab Website: &lt;a href=&#34;https://sites.wustl.edu/thoreklab/&#34;&gt;Thorek Lab WashU&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;If you find our work useful in your research or if you use parts of this code please consider citing our &lt;a href=&#34;https://www.nature.com/articles/s41467-023-37123-6&#34;&gt;paper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Lu P, Oetjen K, Bender D, et al. IMC-Denoise: a content aware pipeline to enhance Imaging Mass Cytometry. Nature Communications, 14(1), 1601, 2023. &lt;a href=&#34;https://www.nature.com/articles/s41467-023-37123-6&#34;&gt;https://www.nature.com/articles/s41467-023-37123-6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{lu2023imc,&#xA;  title={IMC-Denoise: a content aware denoising pipeline to enhance Imaging Mass Cytometry},&#xA;  author={Lu, Peng and Oetjen, Karolyn A and Bender, Diane E and Ruzinova, Marianna B and Fisher, Daniel AC and Shim, Kevin G and Pachynski, Russell K and Brennen, W Nathaniel and Oh, Stephen T and Link, Daniel C and others},&#xA;  journal={Nature Communications},&#xA;  volume={14},&#xA;  number={1},&#xA;  pages={1601},&#xA;  year={2023},&#xA;  publisher={Nature Publishing Group UK London}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>