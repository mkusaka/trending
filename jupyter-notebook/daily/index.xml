<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-15T01:44:30Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>srush/GPU-Puzzles</title>
    <updated>2022-07-15T01:44:30Z</updated>
    <id>tag:github.com,2022-07-15:/srush/GPU-Puzzles</id>
    <link href="https://github.com/srush/GPU-Puzzles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solve puzzles. Learn CUDA.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GPU Puzzles&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by &lt;a href=&#34;http://rush-nlp.com&#34;&gt;Sasha Rush&lt;/a&gt; - &lt;a href=&#34;https://twitter.com/srush_nlp&#34;&gt;srush_nlp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/srush/GPU-Puzzles/raw/main/cuda.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GPU architectures are critical to machine learning, and seem to be becoming even more important every day. However you can be an expert in machine learning without ever touching GPU code. It is a bit weird to be work always through abstraction.&lt;/p&gt; &#xA;&lt;p&gt;This notebook is an attempt teach beginner GPU programming in a completely interactive fashion. Instead of providing text with concepts, it throws you right into coding and building GPU kernels. The exercises use NUMBA which directly maps Python code to CUDA kernels. It looks like Python but is basically identical to writing low-level CUDA code. In a few hours, I think you can go from basics to understanding the real algorithms that power 99% of deep learning today. If you do want to read the manual, it is here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://numba.readthedocs.io/en/stable/cuda/index.html&#34;&gt;NUMBA CUDA Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I recommend doing these in Colab, as it is easy to get started. Be sure to make your own copy, turn on GPU mode in the settings (&lt;code&gt;Runtime / Change runtime type&lt;/code&gt;, then set &lt;code&gt;Hardware accelerator&lt;/code&gt; to &lt;code&gt;GPU&lt;/code&gt;), and then get to coding.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/srush/GPU-Puzzles/blob/main/GPU_puzzlers.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(If you are into this style of puzzle, also check out my &lt;a href=&#34;https://github.com/srush/Tensor-Puzzles&#34;&gt;Tensor Puzzles&lt;/a&gt; for PyTorch.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;!pip install -qqq git+https://github.com/danoneata/chalk@srush-patch-1&#xA;!wget -q https://github.com/srush/GPU-Puzzles/raw/main/robot.png https://github.com/srush/GPU-Puzzles/raw/main/lib.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numba&#xA;import numpy as np&#xA;import warnings&#xA;from lib import CudaProblem, Coord&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;warnings.filterwarnings(&#xA;    action=&#34;ignore&#34;, category=numba.NumbaPerformanceWarning, module=&#34;numba&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 1: Map&lt;/h2&gt; &#xA;&lt;p&gt;Implement a &#34;kernel&#34; (GPU function) that adds 10 to each position of vector &lt;code&gt;a&lt;/code&gt; and stores it in vector &lt;code&gt;out&lt;/code&gt;. You have 1 thread per position.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; This code looks like Python but it is really CUDA! You cannot use standard python tools like list comprehensions or ask for Numpy properties like shape or size (if you need the size, it is given as an argument). The puzzles only require doing simple operations, basically +, *, simple array indexing, for loops, and if statements. If you get an error it is probably because you did something fancy :).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: Think of the function &lt;code&gt;call&lt;/code&gt; as being run 1 time for each thread. The only difference is that &lt;code&gt;cuda.threadIdx.x&lt;/code&gt; changes each time.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def map_spec(a):&#xA;    return a + 10&#xA;&#xA;&#xA;def map_test(cuda):&#xA;    def call(out, a) -&amp;gt; None:&#xA;        local_i = cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 1 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 4&#xA;out = np.zeros((SIZE,))&#xA;a = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Map&#34;, map_test, [a], out, threadsperblock=Coord(SIZE, 1), spec=map_spec&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Map&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_15_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0.]&#xA;Spec : [10 11 12 13]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 2 - Zip&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that adds together each position of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. You have 1 thread per position.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def zip_spec(a, b):&#xA;    return a + b&#xA;&#xA;&#xA;def zip_test(cuda):&#xA;    def call(out, a, b) -&amp;gt; None:&#xA;        local_i = cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 1 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 4&#xA;out = np.zeros((SIZE,))&#xA;a = np.arange(SIZE)&#xA;b = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Zip&#34;, zip_test, [a, b], out, threadsperblock=Coord(SIZE, 1), spec=zip_spec&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Zip&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_19_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0.]&#xA;Spec : [0 2 4 6]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 3 - Guards&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that adds 10 to each position of &lt;code&gt;a&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. You have more threads than positions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def map_guard_test(cuda):&#xA;    def call(out, a, size) -&amp;gt; None:&#xA;        local_i = cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 2 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 4&#xA;out = np.zeros((SIZE,))&#xA;a = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Guard&#34;,&#xA;    map_guard_test,&#xA;    [a],&#xA;    out,&#xA;    [SIZE],&#xA;    threadsperblock=Coord(8, 1),&#xA;    spec=map_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Guard&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_24_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0.]&#xA;Spec : [10 11 12 13]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 4 - Map 2D&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that adds 10 to each position of &lt;code&gt;a&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. Input &lt;code&gt;a&lt;/code&gt; is 2D and square. You have more threads than positions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def map_2D_test(cuda):&#xA;    def call(out, a, size) -&amp;gt; None:&#xA;        local_i = cuda.threadIdx.x&#xA;        local_j = cuda.threadIdx.y&#xA;        # FILL ME IN (roughly 2 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 2&#xA;out = np.zeros((SIZE, SIZE))&#xA;a = np.arange(SIZE * SIZE).reshape((SIZE, SIZE))&#xA;problem = CudaProblem(&#xA;    &#34;Map 2D&#34;, map_2D_test, [a], out, [SIZE], threadsperblock=Coord(3, 3), spec=map_spec&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Map 2D&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_28_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [[0. 0.]&#xA; [0. 0.]]&#xA;Spec : [[10 11]&#xA; [12 13]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 5 - Broadcast&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that adds &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. Inputs &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are vectors. You have more threads than positions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def broadcast_test(cuda):&#xA;    def call(out, a, b, size) -&amp;gt; None:&#xA;        local_i = cuda.threadIdx.x&#xA;        local_j = cuda.threadIdx.y&#xA;        # FILL ME IN (roughly 2 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 2&#xA;out = np.zeros((SIZE, SIZE))&#xA;a = np.arange(SIZE).reshape(SIZE, 1)&#xA;b = np.arange(SIZE).reshape(1, SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Broadcast&#34;,&#xA;    broadcast_test,&#xA;    [a, b],&#xA;    out,&#xA;    [SIZE],&#xA;    threadsperblock=Coord(3, 3),&#xA;    spec=zip_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Broadcast&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_32_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [[0. 0.]&#xA; [0. 0.]]&#xA;Spec : [[0 1]&#xA; [1 2]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 6 - Blocks&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that adds 10 to each position of &lt;code&gt;a&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. You have fewer threads per block than the size of &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: A block is a group of threads. The number of threads per block is limited, but we can have many different blocks. Variable &lt;code&gt;cuda.blockIdx&lt;/code&gt; tells us what block we are in.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def map_block_test(cuda):&#xA;    def call(out, a, size) -&amp;gt; None:&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 2 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 9&#xA;out = np.zeros((SIZE,))&#xA;a = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Blocks&#34;,&#xA;    map_block_test,&#xA;    [a],&#xA;    out,&#xA;    [SIZE],&#xA;    threadsperblock=Coord(4, 1),&#xA;    blockspergrid=Coord(3, 1),&#xA;    spec=map_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Blocks&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_37_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0. 0. 0. 0. 0. 0.]&#xA;Spec : [10 11 12 13 14 15 16 17 18]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 7 - Blocks 2D&lt;/h2&gt; &#xA;&lt;p&gt;Implement the same kernel in 2D. You have fewer threads per block than the size of &lt;code&gt;a&lt;/code&gt; in both directions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def map_block2D_test(cuda):&#xA;    def call(out, a, size) -&amp;gt; None:&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 4 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 5&#xA;out = np.zeros((SIZE, SIZE))&#xA;a = np.ones((SIZE, SIZE))&#xA;&#xA;problem = CudaProblem(&#xA;    &#34;Blocks 2D&#34;,&#xA;    map_block2D_test,&#xA;    [a],&#xA;    out,&#xA;    [SIZE],&#xA;    threadsperblock=Coord(3, 3),&#xA;    blockspergrid=Coord(2, 2),&#xA;    spec=map_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Blocks 2D&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_41_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [[0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0.]]&#xA;Spec : [[11. 11. 11. 11. 11.]&#xA; [11. 11. 11. 11. 11.]&#xA; [11. 11. 11. 11. 11.]&#xA; [11. 11. 11. 11. 11.]&#xA; [11. 11. 11. 11. 11.]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 8 - Shared&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that adds 10 to each position of &lt;code&gt;a&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. You have fewer threads per block than the size of &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Each block can only have a &lt;em&gt;constant&lt;/em&gt; amount of shared memory that threads in that block can read and write to. This needs to be a literal python constant not a variable. After writing to shared memory you need to call &lt;code&gt;cuda.syncthreads&lt;/code&gt; to ensure that threads do not cross.&lt;/p&gt; &#xA;&lt;p&gt;(This example does not really need shared memory or syncthreads, but it is a demo.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TPB = 4&#xA;def shared_test(cuda):&#xA;    def call(out, a, size) -&amp;gt; None:&#xA;        shared = cuda.shared.array(TPB, numba.float32)&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        local_i = cuda.threadIdx.x&#xA;&#xA;        if i &amp;lt; size:&#xA;            shared[local_i] = a[i]&#xA;            cuda.syncthreads()&#xA;&#xA;        # FILL ME IN (roughly 2 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 8&#xA;out = np.zeros(SIZE)&#xA;a = np.ones(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Shared&#34;,&#xA;    shared_test,&#xA;    [a],&#xA;    out,&#xA;    [SIZE],&#xA;    threadsperblock=Coord(TPB, 1),&#xA;    blockspergrid=Coord(2, 1),&#xA;    spec=map_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Shared&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             1 |             0 |             0 |             1 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_47_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0. 0. 0. 0. 0.]&#xA;Spec : [11. 11. 11. 11. 11. 11. 11. 11.]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 9 - Pooling&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that sums together the last 3 position of &lt;code&gt;a&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. You have 1 thread per position. You only need 1 global read and 1 global write per thread.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: Remember to be careful about syncing.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def pool_spec(a):&#xA;    out = np.zeros(*a.shape)&#xA;    for i in range(a.shape[0]):&#xA;        out[i] = a[max(i - 2, 0) : i + 1].sum()&#xA;    return out&#xA;&#xA;&#xA;TPB = 8&#xA;def pool_test(cuda):&#xA;    def call(out, a, size) -&amp;gt; None:&#xA;        shared = cuda.shared.array(TPB, numba.float32)&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        local_i = cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 8 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 8&#xA;out = np.zeros(SIZE)&#xA;a = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Pooling&#34;,&#xA;    pool_test,&#xA;    [a],&#xA;    out,&#xA;    [SIZE],&#xA;    threadsperblock=Coord(TPB, 1),&#xA;    blockspergrid=Coord(1, 1),&#xA;    spec=pool_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Pooling&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_52_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0. 0. 0. 0. 0.]&#xA;Spec : [ 0.  1.  3.  6.  9. 12. 15. 18.]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 10 - Dot Product&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that computes the dot-product of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. You have 1 thread per position. You only need 1 global read and 1 global write per thread.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: For this problem you don&#39;t need to worry about number of shared reads. We will handle that challenge later.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def dot_spec(a, b):&#xA;    return a @ b&#xA;&#xA;&#xA;TPB = 8&#xA;def dot_test(cuda):&#xA;    def call(out, a, b, size) -&amp;gt; None:&#xA;        shared = cuda.shared.array(TPB, numba.float32)&#xA;&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        local_i = cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 9 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;SIZE = 8&#xA;out = np.zeros(1)&#xA;a = np.arange(SIZE)&#xA;b = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Dot&#34;,&#xA;    dot_test,&#xA;    [a, b],&#xA;    out,&#xA;    [SIZE],&#xA;    threadsperblock=Coord(SIZE, 1),&#xA;    blockspergrid=Coord(1, 1),&#xA;    spec=dot_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Dot&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_56_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0.]&#xA;Spec : 140&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 11 - 1D Convolution&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that computes a 1D convolution between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. You need to handle the general case. You only need 2 global reads and 1 global write per thread.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def conv_spec(a, b):&#xA;    out = np.zeros(*a.shape)&#xA;    len = b.shape[0]&#xA;    for i in range(a.shape[0]):&#xA;        out[i] = sum([a[i + j] * b[j] for j in range(len) if i + j &amp;lt; a.shape[0]])&#xA;    return out&#xA;&#xA;&#xA;MAX_CONV = 5&#xA;TPB = 8&#xA;TPB_MAX_CONV = TPB + MAX_CONV&#xA;def conv_test(cuda):&#xA;    def call(out, a, b, a_size, b_size) -&amp;gt; None:&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        local_i = cuda.threadIdx.x&#xA;&#xA;        # FILL ME IN (roughly 17 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;# Test 1&#xA;&#xA;SIZE = 6&#xA;CONV = 3&#xA;out = np.zeros(SIZE)&#xA;a = np.arange(SIZE)&#xA;b = np.arange(CONV)&#xA;problem = CudaProblem(&#xA;    &#34;1D Conv (Simple)&#34;,&#xA;    conv_test,&#xA;    [a, b],&#xA;    out,&#xA;    [SIZE, CONV],&#xA;    Coord(1, 1),&#xA;    Coord(TPB, 1),&#xA;    spec=conv_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 1D Conv (Simple)&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_59_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0. 0. 0.]&#xA;Spec : [ 5.  8. 11. 14.  5.  0.]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test 2&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;out = np.zeros(15)&#xA;a = np.arange(15)&#xA;b = np.arange(4)&#xA;problem = CudaProblem(&#xA;    &#34;1D Conv (Full)&#34;,&#xA;    conv_test,&#xA;    [a, b],&#xA;    out,&#xA;    [15, 4],&#xA;    Coord(2, 1),&#xA;    Coord(TPB, 1),&#xA;    spec=conv_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 1D Conv (Full)&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_62_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]&#xA;Spec : [14. 20. 26. 32. 38. 44. 50. 56. 62. 68. 74. 80. 41. 14.  0.]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 12 - Prefix Sum&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that computes a sum over &lt;code&gt;a&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;. If the size of &lt;code&gt;a&lt;/code&gt; is greater than the block size, only store the sum of each block.&lt;/p&gt; &#xA;&lt;p&gt;We will do this using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Prefix_sum&#34;&gt;parallel prefix sum&lt;/a&gt; algorithm in shared memory. That is, each step of the algorithm should sum together half the remaining numbers. Follow this diagram:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35882/178757889-1c269623-93af-4a2e-a7e9-22cd55a42e38.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TPB = 8&#xA;def sum_spec(a):&#xA;    out = np.zeros((a.shape[0] + TPB - 1) // TPB)&#xA;    for j, i in enumerate(range(0, a.shape[-1], TPB)):&#xA;        out[j] = a[i : i + TPB].sum()&#xA;    return out&#xA;&#xA;&#xA;def sum_test(cuda):&#xA;    def call(out, a, size: int) -&amp;gt; None:&#xA;        cache = cuda.shared.array(TPB, numba.float32)&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        local_i = cuda.threadIdx.x&#xA;        # FILL ME IN (roughly 12 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;# Test 1&#xA;&#xA;SIZE = 8&#xA;out = np.zeros(1)&#xA;inp = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Sum (Simple)&#34;,&#xA;    sum_test,&#xA;    [inp],&#xA;    out,&#xA;    [SIZE],&#xA;    Coord(1, 1),&#xA;    Coord(TPB, 1),&#xA;    spec=sum_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Sum (Simple)&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_67_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0.]&#xA;Spec : [28.]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test 2&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SIZE = 15&#xA;out = np.zeros(2)&#xA;inp = np.arange(SIZE)&#xA;problem = CudaProblem(&#xA;    &#34;Sum (Full)&#34;,&#xA;    sum_test,&#xA;    [inp],&#xA;    out,&#xA;    [SIZE],&#xA;    Coord(2, 1),&#xA;    Coord(TPB, 1),&#xA;    spec=sum_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Sum (Full)&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_70_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [0. 0.]&#xA;Spec : [28. 77.]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 13 - Axis Sum&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that computes a sum over each row of &lt;code&gt;a&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TPB = 8&#xA;def sum_spec(a):&#xA;    out = np.zeros((a.shape[0], (a.shape[1] + TPB - 1) // TPB))&#xA;    for j, i in enumerate(range(0, a.shape[-1], TPB)):&#xA;        out[..., j] = a[..., i : i + TPB].sum(-1)&#xA;    return out&#xA;&#xA;&#xA;def axis_sum_test(cuda):&#xA;    def call(out, a, size: int) -&amp;gt; None:&#xA;        cache = cuda.shared.array(TPB, numba.float32)&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        local_i = cuda.threadIdx.x&#xA;        batch = cuda.blockIdx.y&#xA;        # FILL ME IN (roughly 12 lines)&#xA;&#xA;    return call&#xA;&#xA;&#xA;BATCH = 4&#xA;SIZE = 6&#xA;out = np.zeros((BATCH, 1))&#xA;inp = np.arange(BATCH * SIZE).reshape((BATCH, SIZE))&#xA;problem = CudaProblem(&#xA;    &#34;Axis Sum&#34;,&#xA;    axis_sum_test,&#xA;    [inp],&#xA;    out,&#xA;    [SIZE],&#xA;    Coord(1, BATCH),&#xA;    Coord(TPB, 1),&#xA;    spec=sum_spec,&#xA;)&#xA;problem.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Axis Sum&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_73_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [[0.]&#xA; [0.]&#xA; [0.]&#xA; [0.]]&#xA;Spec : [[ 15.]&#xA; [ 51.]&#xA; [ 87.]&#xA; [123.]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Puzzle 14 - Matrix Multiply!&lt;/h2&gt; &#xA;&lt;p&gt;Implement a kernel that multiplies square matrices &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and stores it in &lt;code&gt;out&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip: The most efficient algorithm here will copy a block into shared memory before computing each of the individual row-column dot products. This is easy to do if the matrix fits in shared memory. Do that case first. Then update your code to compute a partial dot-product and then iteratively move the part that you copied into shared memory.&lt;/em&gt; You should be able to do the hard case in 6 global reads.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def matmul_spec(a, b):&#xA;    return a @ b&#xA;&#xA;&#xA;TPB = 3&#xA;def mm_oneblock_test(cuda):&#xA;    def call(out, a, b, size: int) -&amp;gt; None:&#xA;        a_shared = cuda.shared.array((TPB, TPB), numba.float32)&#xA;        b_shared = cuda.shared.array((TPB, TPB), numba.float32)&#xA;&#xA;        i = cuda.blockIdx.x * cuda.blockDim.x + cuda.threadIdx.x&#xA;        j = cuda.blockIdx.y * cuda.blockDim.y + cuda.threadIdx.y&#xA;        local_i = cuda.threadIdx.x&#xA;        local_j = cuda.threadIdx.y&#xA;        # FILL ME IN (roughly 14 lines)&#xA;&#xA;    return call&#xA;&#xA;# Test 1&#xA;&#xA;SIZE = 2&#xA;out = np.zeros((SIZE, SIZE))&#xA;inp1 = np.arange(SIZE * SIZE).reshape((SIZE, SIZE))&#xA;inp2 = np.arange(SIZE * SIZE).reshape((SIZE, SIZE)).T&#xA;&#xA;problem = CudaProblem(&#xA;    &#34;Matmul (Simple)&#34;,&#xA;    mm_oneblock_test,&#xA;    [inp1, inp2],&#xA;    out,&#xA;    [SIZE],&#xA;    Coord(1, 1),&#xA;    Coord(TPB, TPB),&#xA;    spec=matmul_spec,&#xA;)&#xA;problem.show(sparse=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Matmul (Simple)&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_76_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [[0. 0.]&#xA; [0. 0.]]&#xA;Spec : [[ 1  3]&#xA; [ 3 13]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test 2&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SIZE = 8&#xA;out = np.zeros((SIZE, SIZE))&#xA;inp1 = np.arange(SIZE * SIZE).reshape((SIZE, SIZE))&#xA;inp2 = np.arange(SIZE * SIZE).reshape((SIZE, SIZE)).T&#xA;&#xA;problem = CudaProblem(&#xA;    &#34;Matmul (Full)&#34;,&#xA;    mm_oneblock_test,&#xA;    [inp1, inp2],&#xA;    out,&#xA;    [SIZE],&#xA;    Coord(3, 3),&#xA;    Coord(TPB, TPB),&#xA;    spec=matmul_spec,&#xA;)&#xA;problem.show(sparse=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Matmul (Full)&#xA; &#xA;   Score (Max Per Thread):&#xA;   |  Global Reads | Global Writes |  Shared Reads | Shared Writes |&#xA;   |             0 |             0 |             0 |             0 | &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/srush/GPU-Puzzles/main/GPU_puzzlers_files/GPU_puzzlers_79_1.svg?sanitize=true&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;problem.check()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Failed Tests.&#xA;Yours: [[0. 0. 0. 0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0. 0. 0. 0.]&#xA; [0. 0. 0. 0. 0. 0. 0. 0.]]&#xA;Spec : [[  140   364   588   812  1036  1260  1484  1708]&#xA; [  364  1100  1836  2572  3308  4044  4780  5516]&#xA; [  588  1836  3084  4332  5580  6828  8076  9324]&#xA; [  812  2572  4332  6092  7852  9612 11372 13132]&#xA; [ 1036  3308  5580  7852 10124 12396 14668 16940]&#xA; [ 1260  4044  6828  9612 12396 15180 17964 20748]&#xA; [ 1484  4780  8076 11372 14668 17964 21260 24556]&#xA; [ 1708  5516  9324 13132 16940 20748 24556 28364]]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Azure-Samples/cognitive-services-quickstart-code</title>
    <updated>2022-07-15T01:44:30Z</updated>
    <id>tag:github.com,2022-07-15:/Azure-Samples/cognitive-services-quickstart-code</id>
    <link href="https://github.com/Azure-Samples/cognitive-services-quickstart-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code Examples used by the Quickstarts in the Cognitive Services Documentation&lt;/p&gt;&lt;hr&gt;&lt;hr&gt; &#xA;&lt;p&gt;page_type: sample languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go&lt;/li&gt; &#xA; &lt;li&gt;python&lt;/li&gt; &#xA; &lt;li&gt;javascript&lt;/li&gt; &#xA; &lt;li&gt;csharp&lt;/li&gt; &#xA; &lt;li&gt;php&lt;/li&gt; &#xA; &lt;li&gt;ruby products:&lt;/li&gt; &#xA; &lt;li&gt;azure description: &#34;This repository contains the code examples used by the QuickStarts on the Cognitive Services Documentation&#34; urlFragment: cognitive-services-quickstart-code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Code examples for Cognitive Services Quickstarts&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the code examples used by the QuickStarts on the &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/cognitive-services/&#34;&gt;Cognitive Services Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What are code examples&lt;/h2&gt; &#xA;&lt;p&gt;Code examples are a collection of snippets whose primary purpose is to be demonstrated in the QuickStart documentation. This code can compile and run, but is not intended as a template for how a solution should be developed. They are intentionally shortened and written in script-style to make understanding their basic concepts, easier.&lt;/p&gt; &#xA;&lt;p&gt;Most of these examples can be run independent of the steps in the Quickstarts, yet represent what they offer.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;These code snippets back Quickstarts found on &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/cognitive-services/&#34;&gt;Cognitive Services Documentation&lt;/a&gt;. These snippets are not intended as standalone solutions or for production use. To learn how to use the Cognitive Services, go to a QuickStart for each service.&lt;/p&gt; &#xA;&lt;h3&gt;Running the code snippets&lt;/h3&gt; &#xA;&lt;p&gt;Choose the language and service you wish to run. Navigate to the corresponding folder and open the README. Each quickstart contains prerequisites and run instructions at the top of its main execution file.&lt;/p&gt; &#xA;&lt;h2&gt;How this repo is structured&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   .&#xA;    ├── python                   # Language of the code snippet&#xA;    │   ├── ComputerVision       # Cognitive Service&#xA;    │   └── ... &#xA;    ├──  ...&#xA;    └── README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Data files (images, audio, video) should not be checked into the repo. Please add data files to the following central location: &lt;a href=&#34;https://github.com/Azure-Samples/cognitive-services-sample-data-files&#34;&gt;cognitive-services-sample-data-files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Samples&lt;/h2&gt; &#xA;&lt;p&gt;Samples (unlike examples) are a more complete, best-practices solution for each of the snippets. They&#39;re better for integrating into production code.&lt;/p&gt; &#xA;&lt;p&gt;We offer samples for each language here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cognitive Services .NET SDK samples: &lt;a href=&#34;https://github.com/Azure-Samples/cognitive-services-dotnet-sdk-samples&#34;&gt;https://github.com/Azure-Samples/cognitive-services-dotnet-sdk-samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cognitive Services Java SDK samples: &lt;a href=&#34;https://github.com/Azure-Samples/cognitive-services-java-sdk-samples&#34;&gt;https://github.com/Azure-Samples/cognitive-services-java-sdk-samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cognitive Services Node.js SDK samples: &lt;a href=&#34;https://github.com/Azure-Samples/cognitive-services-node-sdk-samples&#34;&gt;https://github.com/Azure-Samples/cognitive-services-node-sdk-samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cognitive Services Python SDK samples: &lt;a href=&#34;https://github.com/Azure-Samples/cognitive-services-python-sdk-samples&#34;&gt;https://github.com/Azure-Samples/cognitive-services-python-sdk-samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Cognitive Services Go SDK Samples: &lt;a href=&#34;https://github.com/Azure-Samples/azure-sdk-for-go-samples/tree/master/cognitiveservices&#34;&gt;https://github.com/Azure-Samples/azure-sdk-for-go-samples/tree/master/cognitiveservices&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project page for Cognitive Services offerings and demos: &lt;a href=&#34;https://azure.microsoft.com/en-us/services/cognitive-services/&#34;&gt;https://azure.microsoft.com/en-us/services/cognitive-services/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Free trial access key link: &lt;a href=&#34;https://azure.microsoft.com/free/cognitive-services/&#34;&gt;https://azure.microsoft.com/free/cognitive-services/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support channels: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/azure-cognitive-services&#34;&gt;Stack Overflow&lt;/a&gt; or &lt;a href=&#34;https://azure.microsoft.com/en-us/support/options/&#34;&gt;Azure Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>goldmansachs/gs-quant</title>
    <updated>2022-07-15T01:44:30Z</updated>
    <id>tag:github.com,2022-07-15:/goldmansachs/gs-quant</id>
    <link href="https://github.com/goldmansachs/gs-quant" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python toolkit for quantitative finance&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GS Quant&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;GS Quant&lt;/strong&gt; is a Python toolkit for quantitative finance, created on top of one of the world’s most powerful risk transfer platforms. Designed to accelerate development of quantitative trading strategies and risk management solutions, crafted over 25 years of experience navigating global markets.&lt;/p&gt; &#xA;&lt;p&gt;It is created and maintained by quantitative developers (quants) at Goldman Sachs to enable the development of trading strategies and analysis of derivative products. GS Quant can be used to facilitate derivative structuring, trading, and risk management, or as a set of statistical packages for data analytics applications.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://developer.gs.com/docs/gsquant/&#34;&gt;Goldman Sachs Developer&lt;/a&gt; for additional information.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.6 or greater&lt;/li&gt; &#xA; &lt;li&gt;Access to PIP package manager&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install gs-quant&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;You can find examples, guides and tutorials in the respective folders as well as on &lt;a href=&#34;https://developer.gs.com/docs/gsquant/&#34;&gt;Goldman Sachs Developer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are encouraged! Please see CONTRIBUTING.MD for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Please reach out to &lt;code&gt;gs-quant@gs.com&lt;/code&gt; with any questions, comments or feedback.&lt;/p&gt;</summary>
  </entry>
</feed>