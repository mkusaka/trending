<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-01T01:37:51Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lion-agi/lionagi</title>
    <updated>2024-01-01T01:37:51Z</updated>
    <id>tag:github.com,2024-01-01:/lion-agi/lionagi</id>
    <link href="https://github.com/lion-agi/lionagi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Towards Automated General Intelligence.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/lionagi?labelColor=233476aa&amp;amp;color=231fc935&#34; alt=&#34;PyPI - Version&#34;&gt; &lt;img src=&#34;https://img.shields.io/readthedocs/lionagi&#34; alt=&#34;Read the Docs&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/l/lionagi?color=231fc935&#34; alt=&#34;PyPI - License&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/lionagi?color=blue&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/lionagi/&#34;&gt;PyPI&lt;/a&gt; | &lt;a href=&#34;https://lionagi.readthedocs.io/en/latest/&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/7RGWqpSxze&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;LionAGI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Towards Automated General Intelligence&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;LionAGI is a cutting-edge &lt;strong&gt;intelligent agent framework&lt;/strong&gt;. It integrates data manipulation with advanced machine learning tools, such as Large Language Models (i.e. OpenAI&#39;s GPT).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Designed for data-centric, production-level projects,&lt;/li&gt; &#xA; &lt;li&gt;dramatically lowers the barrier in creating intelligent, automated systems&lt;/li&gt; &#xA; &lt;li&gt;that can understand and interact meaningfully with large volumes of data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install LionAGI with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install lionagi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the &lt;code&gt;.env_template&lt;/code&gt; file, input your appropriate API_KEY, save the file, rename as &lt;code&gt;.env&lt;/code&gt; and put in your project&#39;s root directory. by default we use &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;supports all models in &lt;a href=&#34;https://openrouter.ai/models/&#34;&gt;OpenRouter&lt;/a&gt; (not released yet, you can have a preview in &lt;code&gt;main&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;supports all &lt;code&gt;langchain&lt;/code&gt; and &lt;code&gt;llamaindex&lt;/code&gt; splitters, chunkers, and readers (not released yet)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lionagi.readthedocs.io/en/v0.0.111/&#34;&gt;here&lt;/a&gt; is the the latest stable, please &lt;code&gt;pip install lionagi==0.0.111&lt;/code&gt; if you find 0.0.112 buggy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a production ready LLM application &lt;strong&gt;in hours&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;written in pure python, minimum dependency &lt;code&gt;aiohttp&lt;/code&gt;, &lt;code&gt;python-dotenv&lt;/code&gt;, &lt;code&gt;tiktoken&lt;/code&gt;, &lt;code&gt;pydantic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Efficient and verstile data operations for reading, chunking, binning, writing, storing and managing data&lt;/li&gt; &#xA; &lt;li&gt;(Work In Progress) support for all &lt;code&gt;langchain&lt;/code&gt; and &lt;code&gt;llamaindex&lt;/code&gt; splitters, chunkers, and readers&lt;/li&gt; &#xA; &lt;li&gt;Unified interface with any LLM provider, API or local &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Fast and &lt;strong&gt;concurrent&lt;/strong&gt; API call with &lt;code&gt;configurable rate limit&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;(Work In Progress) support for hundreds of models both API and local&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;LionAGI is designed to be &lt;code&gt;asynchronous&lt;/code&gt; only, please check python official documentation on how &lt;code&gt;async&lt;/code&gt; work: &lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;calling API with maximum throughput over large set of data with advanced models i.e. gpt-4 can get &lt;strong&gt;EXPENSIVE IN JUST SECONDS&lt;/strong&gt;,&lt;/li&gt; &#xA; &lt;li&gt;please know what you are doing, and check the usage on OpenAI regularly&lt;/li&gt; &#xA; &lt;li&gt;default rate limits are set to be &lt;strong&gt;tier 1&lt;/strong&gt; of OpenAI model &lt;code&gt;gpt-4-1104-preview&lt;/code&gt;, please check the &lt;a href=&#34;https://platform.openai.com/docs/guides/rate-limits?context=tier-free&#34;&gt;OpenAI usage limit documentation&lt;/a&gt; you can modify token rate parameters to fit different use cases.&lt;/li&gt; &#xA; &lt;li&gt;if you would like to build from source, please download the &lt;a href=&#34;https://github.com/lion-agi/lionagi/releases&#34;&gt;latest release&lt;/a&gt;, &lt;strong&gt;main is under development and will be changed without notice&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;The following example shows how to use LionAGI&#39;s &lt;code&gt;Session&lt;/code&gt; object to interact with &lt;code&gt;gpt-4&lt;/code&gt; model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import lionagi as li&#xA;&#xA;# define system messages, context and user instruction&#xA;system = &#34;You are a helpful assistant designed to perform calculations.&#34;&#xA;instruction = {&#34;Addition&#34;:&#34;Add the two numbers together i.e. x+y&#34;}&#xA;context = {&#34;x&#34;: 10, &#34;y&#34;: 5}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# in interactive environment (.ipynb for example)&#xA;calculator = li.Session(system=system)&#xA;result = await calculator.initiate(instruction=instruction,&#xA;                                   context=context,&#xA;                                   model=&#34;gpt-4-1106-preview&#34;)&#xA;&#xA;print(f&#34;Calculation Result: {result}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# or otherwise, you can use&#xA;import asyncio&#xA;&#xA;async def main():&#xA;    calculator = li.Session(system=system)&#xA;    result = await calculator.initiate(instruction=instruction,&#xA;                                       context=context, &#xA;                                       model=&#34;gpt-4-1106-preview&#34;)&#xA;    print(f&#34;Calculation Result: {result}&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    asyncio.run(main())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit our notebooks for our examples.&lt;/p&gt; &#xA;&lt;h3&gt;Community&lt;/h3&gt; &#xA;&lt;p&gt;We encourage contributions to LionAGI and invite you to enrich its features and capabilities. Engage with us and other community members &lt;a href=&#34;https://discord.gg/7RGWqpSxze&#34;&gt;Join Our Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Citation&lt;/h3&gt; &#xA;&lt;p&gt;When referencing LionAGI in your projects or research, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@software{Li_LionAGI_2023,&#xA;  author = {Haiyang Li},&#xA;  month = {12},&#xA;  year = {2023},&#xA;  title = {LionAGI: Towards Automated General Intelligence},&#xA;  url = {https://github.com/lion-agi/lionagi},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=lion-agi/lionagi&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Python 3.9 or higher.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mariarevueltamt/Procesamiento-de-Im-genes-con-IA</title>
    <updated>2024-01-01T01:37:51Z</updated>
    <id>tag:github.com,2024-01-01:/mariarevueltamt/Procesamiento-de-Im-genes-con-IA</id>
    <link href="https://github.com/mariarevueltamt/Procesamiento-de-Im-genes-con-IA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Biomedical Image Processing and AI-based Analysis&lt;/strong&gt; This repository contains notebooks worked during the Biomedical Image Processing based on AI course. They cover fundamental tasks on image processing such as mage reading, conversion to grayscale, thresholding, mathematical morphology, object detection, and measurement. Both the object detection model notebook and the emotion recognition notebook also dive into dataset preparation, model training and testing and evaluation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aliciavaquero/Procesamiento-de-Im-genes-con-IA</title>
    <updated>2024-01-01T01:37:51Z</updated>
    <id>tag:github.com,2024-01-01:/aliciavaquero/Procesamiento-de-Im-genes-con-IA</id>
    <link href="https://github.com/aliciavaquero/Procesamiento-de-Im-genes-con-IA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Procesamiento-de-Imagenes-con-IA&lt;/h1&gt; &#xA;&lt;p&gt;Esto es un repositorio que recoge todas las actividades que hemos realizado en la asignatura de Procesamiento de Imagen con Inteligencia Artificial.&lt;/p&gt;</summary>
  </entry>
</feed>