<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-30T01:31:14Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cuda-mode/lecture2</title>
    <updated>2024-01-30T01:31:14Z</updated>
    <id>tag:github.com,2024-01-30:/cuda-mode/lecture2</id>
    <link href="https://github.com/cuda-mode/lecture2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lecture 2 - 2024-01-20&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Supplementary Material for Lectures 2 &amp;amp; 3&lt;/h1&gt; &#xA;&lt;h2&gt;Lecture 2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recap Ch. 1-3 from the PMPP book&lt;/li&gt; &#xA; &lt;li&gt;Date: 2024-01-20, Speaker: &lt;a href=&#34;https://twitter.com/neurosp1ke&#34;&gt;Andreas Koepf&lt;/a&gt;, Book: &lt;a href=&#34;https://a.co/d/2S2fVzt&#34;&gt;Programming Massively Parallel Processors: A Hands-on Approach&lt;/a&gt; (Amazon link)&lt;/li&gt; &#xA; &lt;li&gt;Slides: The powerpoint file &lt;a href=&#34;https://raw.githubusercontent.com/cuda-mode/lecture2/main/cuda_mode_lecture2.pptx&#34;&gt;cuda_mode_lecture2.pptx&lt;/a&gt; can be found in the root directory of this repository. Alternatively &lt;a href=&#34;https://docs.google.com/presentation/d/1deqvEHdqEC4LHUpStO6z3TT77Dt84fNAvTIAxBJgDck/edit#slide=id.g2b1444253e5_1_75&#34;&gt;here&lt;/a&gt; as Google docs presentation.&lt;/li&gt; &#xA; &lt;li&gt;Examples: Please make sure PyTorch (2.1.2) and cuda-toolkit (nvcc compiler) are installed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vector_addition&lt;/code&gt;: Classic CUDA C example, to compile use &lt;code&gt;make&lt;/code&gt; in the &lt;code&gt;vector_addition&lt;/code&gt; directory.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rgb_to_grayscale&lt;/code&gt;: Example uses PyTorch&#39;s &lt;code&gt;torch.utils.cpp_extension.load_inline&lt;/code&gt; feature to compile a custom RGB to grayscale kernel and uses it to convert input image to grayscale and which is saved in as &lt;code&gt;output.png&lt;/code&gt;. Run in the &lt;code&gt;rgb_to_grayscale&lt;/code&gt; folder &lt;code&gt;python rgb_to_grayscale.py&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mean_filter&lt;/code&gt;: This example also uses the PyTorch&#39;s &lt;code&gt;cpp_extension.load_inline&lt;/code&gt; feature to compile a mean filter kernel. The kernel read pixel values in the surrounding (square area) of a pixel and computes the average value for each RGB channel individualy. The result is saved to &lt;code&gt;output.png&lt;/code&gt;. Run in the &lt;code&gt;mean_filter&lt;/code&gt; folder &lt;code&gt;python mean_filter.py&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lecture 3&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Title: Getting Started With CUDA&lt;/li&gt; &#xA; &lt;li&gt;Date: 2024-01-27, Speaker: &lt;a href=&#34;https://twitter.com/jeremyphoward&#34;&gt;Jeremy Howard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Notebook: See the &lt;code&gt;lecture3&lt;/code&gt; folder, or run the &lt;a href=&#34;https://colab.research.google.com/drive/180uk6frvMBeT4tywhhYXmz3PJaCIA_uk?usp=sharing&#34;&gt;Colab version&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>