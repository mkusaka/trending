<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-20T01:39:58Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TommyZihao/Train_Custom_Dataset</title>
    <updated>2022-08-20T01:39:58Z</updated>
    <id>tag:github.com,2022-08-20:/TommyZihao/Train_Custom_Dataset</id>
    <link href="https://github.com/TommyZihao/Train_Custom_Dataset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;标注自己的数据集，训练、评估、测试、部署自己的人工智能算法&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;即将上线，敬请期待&lt;/h1&gt; &#xA;&lt;p&gt;催更请B站私信 同济子豪兄 &lt;a href=&#34;https://space.bilibili.com/1900783&#34;&gt;https://space.bilibili.com/1900783&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>karpathy/micrograd</title>
    <updated>2022-08-20T01:39:58Z</updated>
    <id>tag:github.com,2022-08-20:/karpathy/micrograd</id>
    <link href="https://github.com/karpathy/micrograd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny scalar-valued autograd engine and a neural net library on top of it with PyTorch-like API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;micrograd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karpathy/micrograd/master/puppy.jpg&#34; alt=&#34;awww&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tiny Autograd engine (with a bite! :)). Implements backpropagation (reverse-mode autodiff) over a dynamically built DAG and a small neural networks library on top of it with a PyTorch-like API. Both are tiny, with about 100 and 50 lines of code respectively. The DAG only operates over scalar values, so e.g. we chop up each neuron into all of its individual tiny adds and multiplies. However, this is enough to build up entire deep neural nets doing binary classification, as the demo notebook shows. Potentially useful for educational purposes.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install micrograd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example usage&lt;/h3&gt; &#xA;&lt;p&gt;Below is a slightly contrived example showing a number of possible supported operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from micrograd.engine import Value&#xA;&#xA;a = Value(-4.0)&#xA;b = Value(2.0)&#xA;c = a + b&#xA;d = a * b + b**3&#xA;c += c + 1&#xA;c += 1 + c + (-a)&#xA;d += d * 2 + (b + a).relu()&#xA;d += 3 * d + (b - a).relu()&#xA;e = c - d&#xA;f = e**2&#xA;g = f / 2.0&#xA;g += 10.0 / f&#xA;print(f&#39;{g.data:.4f}&#39;) # prints 24.7041, the outcome of this forward pass&#xA;g.backward()&#xA;print(f&#39;{a.grad:.4f}&#39;) # prints 138.8338, i.e. the numerical value of dg/da&#xA;print(f&#39;{b.grad:.4f}&#39;) # prints 645.5773, i.e. the numerical value of dg/db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training a neural net&lt;/h3&gt; &#xA;&lt;p&gt;The notebook &lt;code&gt;demo.ipynb&lt;/code&gt; provides a full demo of training an 2-layer neural network (MLP) binary classifier. This is achieved by initializing a neural net from &lt;code&gt;micrograd.nn&lt;/code&gt; module, implementing a simple svm &#34;max-margin&#34; binary classification loss and using SGD for optimization. As shown in the notebook, using a 2-layer neural net with two 16-node hidden layers we achieve the following decision boundary on the moon dataset:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karpathy/micrograd/master/moon_mlp.png&#34; alt=&#34;2d neuron&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Tracing / visualization&lt;/h3&gt; &#xA;&lt;p&gt;For added convenience, the notebook &lt;code&gt;trace_graph.ipynb&lt;/code&gt; produces graphviz visualizations. E.g. this one below is of a simple 2D neuron, arrived at by calling &lt;code&gt;draw_dot&lt;/code&gt; on the code below, and it shows both the data (left number in each node) and the gradient (right number in each node).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from micrograd import nn&#xA;n = nn.Neuron(2)&#xA;x = [Value(1.0), Value(-2.0)]&#xA;y = n(x)&#xA;dot = draw_dot(y)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/karpathy/micrograd/master/gout.svg?sanitize=true&#34; alt=&#34;2d neuron&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit tests you will have to install &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt;, which the tests use as a reference for verifying the correctness of the calculated gradients. Then simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alphacep/vosk-api</title>
    <updated>2022-08-20T01:39:58Z</updated>
    <id>tag:github.com,2022-08-20:/alphacep/vosk-api</id>
    <link href="https://github.com/alphacep/vosk-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Offline speech recognition API for Android, iOS, Raspberry Pi and servers with Python, Java, C# and Node&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vosk Speech Recognition Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;Vosk is an offline open source speech recognition toolkit. It enables speech recognition for 20+ languages and dialects - English, Indian English, German, French, Spanish, Portuguese, Chinese, Russian, Turkish, Vietnamese, Italian, Dutch, Catalan, Arabic, Greek, Farsi, Filipino, Ukrainian, Kazakh, Swedish, Japanese, Esperanto, Hindi, Czech, Polish. More to come.&lt;/p&gt; &#xA;&lt;p&gt;Vosk models are small (50 Mb) but provide continuous large vocabulary transcription, zero-latency response with streaming API, reconfigurable vocabulary and speaker identification.&lt;/p&gt; &#xA;&lt;p&gt;Speech recognition bindings implemented for various programming languages like Python, Java, Node.JS, C#, C++, Rust, Go and others.&lt;/p&gt; &#xA;&lt;p&gt;Vosk supplies speech recognition for chatbots, smart home appliances, virtual assistants. It can also create subtitles for movies, transcription for lectures and interviews.&lt;/p&gt; &#xA;&lt;p&gt;Vosk scales from small devices like Raspberry Pi or Android smartphone to big clusters.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For installation instructions, examples and documentation visit &lt;a href=&#34;https://alphacephei.com/vosk&#34;&gt;Vosk Website&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>