<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-29T01:32:18Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>QwenLM/Qwen2.5-VL</title>
    <updated>2025-01-29T01:32:18Z</updated>
    <id>tag:github.com,2025-01-29:/QwenLM/Qwen2.5-VL</id>
    <link href="https://github.com/QwenLM/Qwen2.5-VL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qwen2-VL is the multimodal large language model series developed by Qwen team, Alibaba Cloud.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Qwen2.5-VL&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2.5-VL/qwen2.5vl_logo.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; üíú &lt;a href=&#34;https://chat.qwenlm.ai/&#34;&gt;&lt;b&gt;Qwen Chat&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü§ó &lt;a href=&#34;https://huggingface.co/collections/Qwen/qwen25-vl-6795ffac22b334a837c0f9a5&#34;&gt;Hugging Face&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü§ñ &lt;a href=&#34;https://modelscope.cn/organization/qwen&#34;&gt;ModelScope&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp; üìë &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2.5-vl/&#34;&gt;Blog&lt;/a&gt; &amp;nbsp;&amp;nbsp;| &amp;nbsp;&amp;nbsp; üìö &lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/tree/main/cookbooks&#34;&gt;Cookbooks&lt;/a&gt; &amp;nbsp;&amp;nbsp;| &amp;nbsp;&amp;nbsp; üìëPaper(is coming) &amp;nbsp;&amp;nbsp;  &lt;br&gt; üñ•Ô∏è &lt;a href=&#34;https://huggingface.co/spaces/Qwen/Qwen2.5-VL&#34;&gt;Demo&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üí¨ &lt;a href=&#34;https://github.com/QwenLM/Qwen/raw/main/assets/wechat.png&#34;&gt;WeChat (ÂæÆ‰ø°)&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü´® &lt;a href=&#34;https://discord.gg/CV4E9rpNSD&#34;&gt;Discord&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://help.aliyun.com/zh/model-studio/developer-reference/qwen-vl-api&#34;&gt; üìë API&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üñ•Ô∏è &lt;a href=&#34;https://gallery.pai-ml.com/#/preview/deepLearning/cv/qwen2.5-vl&#34;&gt;PAI-DSW&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In the past five months since Qwen2-VL&#39;s release, numerous developers have built new models on the Qwen2-VL vision-language models, providing us with valuable feedback. During this period, we focused on building more useful vision-language models. Today, we are excited to introduce the latest addition to the Qwen family: Qwen2.5-VL.&lt;/p&gt; &#xA;&lt;h4&gt;Key Enhancements:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Powerful Document Parsing Capabilities&lt;/strong&gt;: Upgrade text recognition to omnidocument parsing, excelling in processing multi-scene, multilingual, and various built-in (handwriting, tables, charts, chemical formulas, and music sheets) documents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Precise Object Grounding Across Formats&lt;/strong&gt;: Unlock improved accuracy in detecting, pointing, and counting objects, accommodating absolute coordinate and JSON formats for advanced spatial reasoning.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ultra-long Video Understanding and Fine-grained Video Grounding&lt;/strong&gt;: Extend native dynamic resolution to the temporal dimension, enhancing the ability to understand videos lasting hours while extracting event segments in seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enhanced Agent Functionality for Computer and Mobile Devicess&lt;/strong&gt;: Leverage advanced grounding, reasoning, and decision-making abilities, boosting the model with superior agent functionality on smartphones and computers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Model Architecture Updates:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Resolution and Frame Rate Training for Video Understanding&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We extend dynamic resolution to the temporal dimension by adopting dynamic FPS sampling, enabling the model to comprehend videos at various sampling rates. Accordingly, we update mRoPE in the time dimension with IDs and absolute time alignment, enabling the model to learn temporal sequence and speed, and ultimately acquire the ability to pinpoint specific moments.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2.5-VL/qwen2.5vl_arc.jpeg&#34; width=&#34;80%&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Streamlined and Efficient Vision Encoder&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We enhance both training and inference speeds by strategically implementing window attention into the ViT. The ViT architecture is further optimized with SwiGLU and RMSNorm, aligning it with the structure of the Qwen2.5 LLM.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2025.01.28: We have released the &lt;a href=&#34;https://huggingface.co/Qwen&#34;&gt;Qwen2.5-VL series&lt;/a&gt;. For more details, please check our &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2.5-vl/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;2024.12.25: We have released the &lt;a href=&#34;https://huggingface.co/Qwen/QVQ-72B-Preview&#34;&gt;QvQ-72B-Preview&lt;/a&gt;. QvQ-72B-Preview is an experimental research model, focusing on enhancing visual reasoning capabilities. For more details, please check our &lt;a href=&#34;https://qwenlm.github.io/blog/qvq-72b-preview/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;2024.09.19: The instruction-tuned &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct&#34;&gt;Qwen2-VL-72B model&lt;/a&gt; and its quantized version [&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-AWQ&#34;&gt;AWQ&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int4&#34;&gt;GPTQ-Int4&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int8&#34;&gt;GPTQ-Int8&lt;/a&gt;] are now available. We have also released the &lt;a href=&#34;https://arxiv.org/pdf/2409.12191&#34;&gt;Qwen2-VL paper&lt;/a&gt; simultaneously.&lt;/li&gt; &#xA; &lt;li&gt;2024.08.30: We have released the &lt;a href=&#34;%22https://huggingface.co/collections/Qwen/qwen2-vl-66cee7455501d7126940800d&#34;&gt;Qwen2-VL series&lt;/a&gt;. The 2B and 7B models are now available, and the 72B model for opensource is coming soon. For more details, please check our &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2-vl/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dataset&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2.5-VL-3B&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-3B-Instruct&#34;&gt;ü§ó&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2.5-VL-3B-Instruct&#34;&gt;ü§ñ&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2.5-VL-7B&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-7B-Instruct&#34;&gt;ü§ó&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2.5-VL-7B-Instruct&#34;&gt;ü§ñ&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2.5-VL-72B&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-72B-Instruct&#34;&gt;ü§ó&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2.5-VL-72B-Instruct&#34;&gt;ü§ñ&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Gemini-2 Flash&lt;/th&gt; &#xA;   &lt;th&gt;GPT-4o&lt;/th&gt; &#xA;   &lt;th&gt;Claude3.5 Sonnet&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2-VL 72B&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMMU&lt;/td&gt; &#xA;   &lt;td&gt;53.1&lt;/td&gt; &#xA;   &lt;td&gt;58.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;70.3&lt;/td&gt; &#xA;   &lt;td&gt;70.4&lt;/td&gt; &#xA;   &lt;td&gt;64.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMMU Pro&lt;/td&gt; &#xA;   &lt;td&gt;31.6&lt;/td&gt; &#xA;   &lt;td&gt;38.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;57&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;54.5&lt;/td&gt; &#xA;   &lt;td&gt;54.7&lt;/td&gt; &#xA;   &lt;td&gt;46.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DocVQA&lt;/td&gt; &#xA;   &lt;td&gt;93.9&lt;/td&gt; &#xA;   &lt;td&gt;95.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;96.4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;92.1&lt;/td&gt; &#xA;   &lt;td&gt;91.1&lt;/td&gt; &#xA;   &lt;td&gt;95.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;96.5&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InfoVQA&lt;/td&gt; &#xA;   &lt;td&gt;77.1&lt;/td&gt; &#xA;   &lt;td&gt;82.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;87.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;77.8&lt;/td&gt; &#xA;   &lt;td&gt;80.7&lt;/td&gt; &#xA;   &lt;td&gt;74.3&lt;/td&gt; &#xA;   &lt;td&gt;84.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CC-OCR&lt;/td&gt; &#xA;   &lt;td&gt;74.5&lt;/td&gt; &#xA;   &lt;td&gt;77.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;79.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;73.0&lt;/td&gt; &#xA;   &lt;td&gt;66.6&lt;/td&gt; &#xA;   &lt;td&gt;62.7&lt;/td&gt; &#xA;   &lt;td&gt;68.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCRBenchV2&lt;/td&gt; &#xA;   &lt;td&gt;54.3/52.1&lt;/td&gt; &#xA;   &lt;td&gt;56.3/57.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.5/63.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;46.5/32.3&lt;/td&gt; &#xA;   &lt;td&gt;45.2/39.6&lt;/td&gt; &#xA;   &lt;td&gt;47.8/46.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MegaBench&lt;/td&gt; &#xA;   &lt;td&gt;28.9&lt;/td&gt; &#xA;   &lt;td&gt;36.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;55.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;54.2&lt;/td&gt; &#xA;   &lt;td&gt;52.1&lt;/td&gt; &#xA;   &lt;td&gt;46.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMStar&lt;/td&gt; &#xA;   &lt;td&gt;55.8&lt;/td&gt; &#xA;   &lt;td&gt;63.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;69.4&lt;/td&gt; &#xA;   &lt;td&gt;64.7&lt;/td&gt; &#xA;   &lt;td&gt;65.1&lt;/td&gt; &#xA;   &lt;td&gt;68.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMBench1.1&lt;/td&gt; &#xA;   &lt;td&gt;81.5&lt;/td&gt; &#xA;   &lt;td&gt;84.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;88.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;83.0&lt;/td&gt; &#xA;   &lt;td&gt;82.1&lt;/td&gt; &#xA;   &lt;td&gt;83.4&lt;/td&gt; &#xA;   &lt;td&gt;86.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathVista&lt;/td&gt; &#xA;   &lt;td&gt;62.3&lt;/td&gt; &#xA;   &lt;td&gt;68.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;74.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;73.1&lt;/td&gt; &#xA;   &lt;td&gt;63.8&lt;/td&gt; &#xA;   &lt;td&gt;65.4&lt;/td&gt; &#xA;   &lt;td&gt;70.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathVision&lt;/td&gt; &#xA;   &lt;td&gt;21.2&lt;/td&gt; &#xA;   &lt;td&gt;25.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;38.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;41.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;30.4&lt;/td&gt; &#xA;   &lt;td&gt;38.3&lt;/td&gt; &#xA;   &lt;td&gt;25.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VideoMME&lt;/td&gt; &#xA;   &lt;td&gt;67.6/61.5&lt;/td&gt; &#xA;   &lt;td&gt;71.6/ 65.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;73.3/79.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-/-&lt;/td&gt; &#xA;   &lt;td&gt;71.9/77.2&lt;/td&gt; &#xA;   &lt;td&gt;60/62.9&lt;/td&gt; &#xA;   &lt;td&gt;71.2/77.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMBench-Video&lt;/td&gt; &#xA;   &lt;td&gt;1.63&lt;/td&gt; &#xA;   &lt;td&gt;1.79&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2.02&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;1.68&lt;/td&gt; &#xA;   &lt;td&gt;1.38&lt;/td&gt; &#xA;   &lt;td&gt;1.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LVBench&lt;/td&gt; &#xA;   &lt;td&gt;43.3&lt;/td&gt; &#xA;   &lt;td&gt;45.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;47.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;30.8&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CharadesSTA&lt;/td&gt; &#xA;   &lt;td&gt;38.8&lt;/td&gt; &#xA;   &lt;td&gt;43.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;50.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;35.7&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AITZ&lt;/td&gt; &#xA;   &lt;td&gt;76.9&lt;/td&gt; &#xA;   &lt;td&gt;81.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;83.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;35.3&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android Control&lt;/td&gt; &#xA;   &lt;td&gt;63.7/90.8&lt;/td&gt; &#xA;   &lt;td&gt;60.1/91.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.36/93.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;66.4/84.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScreenSpot&lt;/td&gt; &#xA;   &lt;td&gt;55.5&lt;/td&gt; &#xA;   &lt;td&gt;84.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;87.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;84.0&lt;/td&gt; &#xA;   &lt;td&gt;18.1&lt;/td&gt; &#xA;   &lt;td&gt;83.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScreenSpot Pro&lt;/td&gt; &#xA;   &lt;td&gt;23.9&lt;/td&gt; &#xA;   &lt;td&gt;29.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;43.6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;17.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AndroidWorld&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;35&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;34.5(SoM)&lt;/td&gt; &#xA;   &lt;td&gt;27.9&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OSWorld&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;8.83&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;5.03&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;14.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Below, we provide simple examples to show how to use Qwen2.5-VL with ü§ñ ModelScope and ü§ó Transformers.&lt;/p&gt; &#xA;&lt;p&gt;The code of Qwen2.5-VL has been in the latest Hugging face transformers and we advise you to build from source with command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/huggingface/transformers accelerate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you might encounter the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;KeyError: &#39;qwen2_5_vl&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We offer a toolkit to help you handle various types of visual input more conveniently, as if you were using an API. This includes base64, URLs, and interleaved images and videos. You can install it using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# It&#39;s highly recommanded to use `[decord]` feature for faster video loading.&#xA;pip install qwen-vl-utils[decord]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Linux, you might not be able to install &lt;code&gt;decord&lt;/code&gt; from PyPI. In that case, you can use &lt;code&gt;pip install qwen-vl-utils&lt;/code&gt; which will fall back to using torchvision for video processing. However, you can still &lt;a href=&#34;https://github.com/dmlc/decord?tab=readme-ov-file#install-from-source&#34;&gt;install decord from source&lt;/a&gt; to get decord used when loading video.&lt;/p&gt; &#xA;&lt;p&gt;We are preparing &lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/tree/main/cookbooks&#34;&gt;cookbooks&lt;/a&gt; for many capabilities, including recognition, localization, document parsing, video understanding, key information extraction, and more. Welcome to learn more!&lt;/p&gt; &#xA;&lt;h3&gt;Using ü§ó Transformers to Chat&lt;/h3&gt; &#xA;&lt;p&gt;Here we show a code snippet to show you how to use the chat model with &lt;code&gt;transformers&lt;/code&gt; and &lt;code&gt;qwen_vl_utils&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2_5_VLForConditionalGeneration, AutoTokenizer, AutoProcessor&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;# default: Load the model on the available device(s)&#xA;model = Qwen2_5_VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, torch_dtype=&#34;auto&#34;, device_map=&#34;auto&#34;&#xA;)&#xA;&#xA;# We recommend enabling flash_attention_2 for better acceleration and memory saving, especially in multi-image and video scenarios.&#xA;# model = Qwen2_5_VLForConditionalGeneration.from_pretrained(&#xA;#     &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;,&#xA;#     torch_dtype=torch.bfloat16,&#xA;#     attn_implementation=&#34;flash_attention_2&#34;,&#xA;#     device_map=&#34;auto&#34;,&#xA;# )&#xA;&#xA;# default processer&#xA;processor = AutoProcessor.from_pretrained(&#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;)&#xA;&#xA;# The default range for the number of visual tokens per image in the model is 4-16384.&#xA;# You can set min_pixels and max_pixels according to your needs, such as a token range of 256-1280, to balance performance and cost.&#xA;# min_pixels = 256*28*28&#xA;# max_pixels = 1280*28*28&#xA;# processor = AutoProcessor.from_pretrained(&#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, min_pixels=min_pixels, max_pixels=max_pixels)&#xA;&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference: Generation of the output&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Multi image inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Messages containing multiple images and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image1.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image2.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Identify the similarities between these images.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Video inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Messages containing a images list as a video and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: [&#xA;                    &#34;file:///path/to/frame1.jpg&#34;,&#xA;                    &#34;file:///path/to/frame2.jpg&#34;,&#xA;                    &#34;file:///path/to/frame3.jpg&#34;,&#xA;                    &#34;file:///path/to/frame4.jpg&#34;,&#xA;                ],&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Messages containing a local video path and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: &#34;file:///path/to/video1.mp4&#34;,&#xA;                &#34;max_pixels&#34;: 360 * 420,&#xA;                &#34;fps&#34;: 1.0,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Messages containing a video url and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2-VL/space_woaudio.mp4&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs, video_kwargs = process_vision_info(messages, return_video_kwargs=True)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    fps=fps,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;    **video_kwargs,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Video URL compatibility largely depends on the third-party library version. The details are in the table below. change the backend by &lt;code&gt;FORCE_QWENVL_VIDEO_READER=torchvision&lt;/code&gt; or &lt;code&gt;FORCE_QWENVL_VIDEO_READER=decord&lt;/code&gt; if you prefer not to use the default one.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Backend&lt;/th&gt; &#xA;    &lt;th&gt;HTTP&lt;/th&gt; &#xA;    &lt;th&gt;HTTPS&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;torchvision &amp;gt;= 0.19.0&lt;/td&gt; &#xA;    &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;    &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;torchvision &amp;lt; 0.19.0&lt;/td&gt; &#xA;    &lt;td&gt;‚ùå&lt;/td&gt; &#xA;    &lt;td&gt;‚ùå&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;decord&lt;/td&gt; &#xA;    &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;    &lt;td&gt;‚ùå&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Batch inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Sample messages for batch inference&#xA;messages1 = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image1.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image2.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What are the common elements in these pictures?&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;messages2 = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Who are you?&#34;},&#xA;]&#xA;# Combine messages for batch processing&#xA;messages = [messages1, messages2]&#xA;&#xA;# Preparation for batch inference&#xA;texts = [&#xA;    processor.apply_chat_template(msg, tokenize=False, add_generation_prompt=True)&#xA;    for msg in messages&#xA;]&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=texts,&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Batch Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_texts = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_texts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;ü§ñ ModelScope&lt;/h3&gt; &#xA;&lt;p&gt;We strongly advise users especially those in mainland China to use ModelScope. &lt;code&gt;snapshot_download&lt;/code&gt; can help you solve issues concerning downloading checkpoints.&lt;/p&gt; &#xA;&lt;h3&gt;More Usage Tips&lt;/h3&gt; &#xA;&lt;p&gt;For input images, we support local files, base64, and URLs. For videos, we currently only support local files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# You can directly insert a local file path, a URL, or a base64-encoded image into the position where you want in the text.&#xA;## Local file path&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;## Image URL&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;http://path/to/your/image.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;## Base64 encoded image&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;data:image;base64,/9j/...&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Image Resolution for performance boost&lt;/h4&gt; &#xA;&lt;p&gt;The model supports a wide range of resolution inputs. By default, it uses the native resolution for input, but higher resolutions can enhance performance at the cost of more computation. Users can set the minimum and maximum number of pixels to achieve an optimal configuration for their needs, such as a token count range of 256-1280, to balance speed and memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min_pixels = 256 * 28 * 28&#xA;max_pixels = 1280 * 28 * 28&#xA;processor = AutoProcessor.from_pretrained(&#xA;    &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, min_pixels=min_pixels, max_pixels=max_pixels&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, We provide two methods for fine-grained control over the image size input to the model:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify exact dimensions: Directly set &lt;code&gt;resized_height&lt;/code&gt; and &lt;code&gt;resized_width&lt;/code&gt;. These values will be rounded to the nearest multiple of 28.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define min_pixels and max_pixels: Images will be resized to maintain their aspect ratio within the range of min_pixels and max_pixels.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# resized_height and resized_width&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;,&#xA;                &#34;resized_height&#34;: 280,&#xA;                &#34;resized_width&#34;: 420,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;# min_pixels and max_pixels&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;,&#xA;                &#34;min_pixels&#34;: 50176,&#xA;                &#34;max_pixels&#34;: 50176,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add ids for Multiple Image Inputs&lt;/h4&gt; &#xA;&lt;p&gt;By default, images and video content are directly included in the conversation. When handling multiple images, it&#39;s helpful to add labels to the images and videos for better reference. Users can control this behavior with the following settings:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Add vision ids&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conversation = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [{&#34;type&#34;: &#34;image&#34;}, {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Hello, how are you?&#34;}],&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;I&#39;m doing well, thank you for asking. How can I assist you today?&#34;,&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Can you describe these images and video?&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;},&#xA;            {&#34;type&#34;: &#34;video&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;These are from my vacation.&#34;},&#xA;        ],&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;I&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&#34;,&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;It was a trip to the mountains. Can you see the details in the images and video?&#34;,&#xA;    },&#xA;]&#xA;&#xA;# default:&#xA;prompt_without_id = processor.apply_chat_template(&#xA;    conversation, add_generation_prompt=True&#xA;)&#xA;# Excepted output: &#39;&amp;lt;|im_start|&amp;gt;system\nYou are a helpful assistant.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\n&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Hello, how are you?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;m doing well, thank you for asking. How can I assist you today?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nCan you describe these images and video?&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;&amp;lt;|vision_start|&amp;gt;&amp;lt;|video_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;These are from my vacation.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nIt was a trip to the mountains. Can you see the details in the images and video?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\n&#39;&#xA;&#xA;&#xA;# add ids&#xA;prompt_with_id = processor.apply_chat_template(&#xA;    conversation, add_generation_prompt=True, add_vision_id=True&#xA;)&#xA;# Excepted output: &#39;&amp;lt;|im_start|&amp;gt;system\nYou are a helpful assistant.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nPicture 1: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Hello, how are you?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;m doing well, thank you for asking. How can I assist you today?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nCan you describe these images and video?Picture 2: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Picture 3: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Video 1: &amp;lt;|vision_start|&amp;gt;&amp;lt;|video_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;These are from my vacation.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nIt was a trip to the mountains. Can you see the details in the images and video?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Flash-Attention 2 to speed up generation&lt;/h4&gt; &#xA;&lt;p&gt;First, make sure to install the latest version of Flash Attention 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you should have a hardware that is compatible with Flash-Attention 2. Read more about it in the official documentation of the &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;flash attention repository&lt;/a&gt;. FlashAttention-2 can only be used when a model is loaded in &lt;code&gt;torch.float16&lt;/code&gt; or &lt;code&gt;torch.bfloat16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To load and run a model using Flash Attention-2, simply add &lt;code&gt;attn_implementation=&#34;flash_attention_2&#34;&lt;/code&gt; when loading the model as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2_5_VLForConditionalGeneration&#xA;&#xA;model = Qwen2_5_VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, &#xA;    torch_dtype=torch.bfloat16, &#xA;    attn_implementation=&#34;flash_attention_2&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Processing Long Texts&lt;/h3&gt; &#xA;&lt;p&gt;The current &lt;code&gt;config.json&lt;/code&gt; is set for context length up to 32,768 tokens. To handle extensive inputs exceeding 32,768 tokens, we utilize &lt;a href=&#34;https://arxiv.org/abs/2309.00071&#34;&gt;YaRN&lt;/a&gt;, a technique for enhancing model length extrapolation, ensuring optimal performance on lengthy texts.&lt;/p&gt; &#xA;&lt;p&gt;For supported frameworks, you could add the following to &lt;code&gt;config.json&lt;/code&gt; to enable YaRN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;...,&#xA;    &#34;type&#34;: &#34;yarn&#34;,&#xA;    &#34;mrope_section&#34;: [&#xA;        16,&#xA;        24,&#xA;        24&#xA;    ],&#xA;    &#34;factor&#34;: 4,&#xA;    &#34;original_max_position_embeddings&#34;: 32768&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, it should be noted that this method has a significant impact on the performance of temporal and spatial localization tasks, and is therefore not recommended for use.&lt;/p&gt; &#xA;&lt;p&gt;At the same time, for long video inputs, since MRoPE itself is more economical with ids, the max_position_embeddings can be directly modified to a larger value, such as 64k.&lt;/p&gt; &#xA;&lt;h3&gt;Try Qwen2.5-VL-72B with API!&lt;/h3&gt; &#xA;&lt;p&gt;To explore Qwen2.5-VL-72B, a more fascinating multimodal model, we encourage you to test our cutting-edge API service. Let&#39;s start the exciting journey right now!&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install dashscope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import dashscope&#xA;&#xA;&#xA;dashscope.api_key = &#34;your_api_key&#34;&#xA;&#xA;messages = [{&#xA;    &#39;role&#39;: &#39;user&#39;,&#xA;    &#39;content&#39;: [&#xA;        {&#xA;            &#39;image&#39;: &#34;https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg&#34;&#xA;        },&#xA;        {&#xA;            &#39;text&#39;: &#39;What are in the image?&#39;&#xA;        },&#xA;    ]&#xA;}]&#xA;&#xA;response = dashscope.MultiModalConversation.call(model=&#39;qwen2.5-vl-72b-instruct&#39;, messages=messages)&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more usage, please refer to the tutorial at &lt;a href=&#34;https://help.aliyun.com/zh/model-studio/developer-reference/qwen-vl-api&#34;&gt;aliyun&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Web UI Example&lt;/h3&gt; &#xA;&lt;p&gt;In this section, we provide instructions for users to build a web-based user interface (UI) demo. This UI demo allows users to interact with a predefined model or application through a web browser. Follow the steps below to get started.&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;Before you begin, ensure that you have the required dependencies installed on your system. You can install them by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements_web_demo.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Demo with FlashAttention-2&lt;/h4&gt; &#xA;&lt;p&gt;Once the required packages are installed, you can launch the web demo using the following command. This command will start a web server and provide you with a link to access the UI in your web browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: For enhanced performance and efficiency, especially in multi-image and video processing scenarios, we strongly recommend using &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;FlashAttention-2&lt;/a&gt;. FlashAttention-2 provides significant improvements in memory usage and speed, making it ideal for handling large-scale models and data processing.&lt;/p&gt; &#xA;&lt;p&gt;To enable FlashAttention-2, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo_mm.py --flash-attn2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load the model with FlashAttention-2 enabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default Usage&lt;/strong&gt;: If you prefer to run the demo without FlashAttention-2 or if you do not specify the &lt;code&gt;--flash-attn2&lt;/code&gt; option, the demo will load the model using the standard attention implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo_mm.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the command, you‚Äôll see a link generated in the terminal similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Running on local: http://127.0.0.1:7860/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy this link and paste it into your browser to access the web UI, where you can interact with the model by inputting text, uploading images, or using any other provided functionalities.&lt;/p&gt; &#xA;&lt;h5&gt;Running the Streaming Video Chat Demo&lt;/h5&gt; &#xA;&lt;p&gt;An experimental streaming video chat demo is also available in the &lt;code&gt;web_demo_streaming&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To run the streaming video chat demo, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web_demo_streaming/&#xA;python app.py --flash-attn2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to run the demo without FlashAttention-2, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web_demo_streaming/&#xA;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This demo supports webcam/screen capture as its video input source. To support screen capture video input, we use code snippet from the following hugginface space: &lt;a href=&#34;https://huggingface.co/spaces/gstaff/gradio-screen-recorder/tree/main&#34;&gt;gstaff/gradio-screen-recorder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üê≥ Docker&lt;/h2&gt; &#xA;&lt;p&gt;To simplify the deploy process, we provide docker images with pre-build environments: &lt;a href=&#34;https://hub.docker.com/r/qwenllm/qwenvl&#34;&gt;qwenllm/qwenvl&lt;/a&gt;. You only need to install the driver and download model files to launch demos.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --gpus all --ipc=host --network=host --rm --name qwen2 -it qwenllm/qwenvl:2-cu121 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our paper and code useful in your research, please consider giving a star &lt;span&gt;‚≠ê&lt;/span&gt; and citation &lt;span&gt;üìù&lt;/span&gt; :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;&#xA;@misc{qwen2.5-VL,&#xA;    title = {Qwen2.5-VL},&#xA;    url = {https://qwenlm.github.io/blog/qwen2.5-vl/},&#xA;    author = {Qwen Team},&#xA;    month = {January},&#xA;    year = {2025}&#xA;}&#xA;&#xA;&#xA;@article{Qwen2VL,&#xA;  title={Qwen2-VL: Enhancing Vision-Language Model&#39;s Perception of the World at Any Resolution},&#xA;  author={Wang, Peng and Bai, Shuai and Tan, Sinan and Wang, Shijie and Fan, Zhihao and Bai, Jinze and Chen, Keqin and Liu, Xuejing and Wang, Jialin and Ge, Wenbin and Fan, Yang and Dang, Kai and Du, Mengfei and Ren, Xuancheng and Men, Rui and Liu, Dayiheng and Zhou, Chang and Zhou, Jingren and Lin, Junyang},&#xA;  journal={arXiv preprint arXiv:2409.12191},&#xA;  year={2024}&#xA;}&#xA;&#xA;@article{Qwen-VL,&#xA;  title={Qwen-VL: A Versatile Vision-Language Model for Understanding, Localization, Text Reading, and Beyond},&#xA;  author={Bai, Jinze and Bai, Shuai and Yang, Shusheng and Wang, Shijie and Tan, Sinan and Wang, Peng and Lin, Junyang and Zhou, Chang and Zhou, Jingren},&#xA;  journal={arXiv preprint arXiv:2308.12966},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt;</summary>
  </entry>
</feed>