<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-20T01:33:40Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>williamyang1991/Rerender_A_Video</title>
    <updated>2023-09-20T01:33:40Z</updated>
    <id>tag:github.com,2023-09-20:/williamyang1991/Rerender_A_Video</id>
    <link href="https://github.com/williamyang1991/Rerender_A_Video" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rerender A Video: Zero-Shot Text-Guided Video-to-Video Translation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rerender A Video - Official PyTorch Implementation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/aa7dc164-dab7-43f4-a46b-758b34911f16&#34; alt=&#34;teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;!--https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/82c35efb-e86b-4376-bfbe-6b69159b8879--&gt; &#xA;&lt;p&gt;&lt;strong&gt;Rerender A Video: Zero-Shot Text-Guided Video-to-Video Translation&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://williamyang1991.github.io/&#34;&gt;Shuai Yang&lt;/a&gt;, &lt;a href=&#34;https://zhouyifan.net/&#34;&gt;Yifan Zhou&lt;/a&gt;, &lt;a href=&#34;https://liuziwei7.github.io/&#34;&gt;Ziwei Liu&lt;/a&gt; and &lt;a href=&#34;https://www.mmlab-ntu.com/person/ccloy/&#34;&gt;Chen Change Loy&lt;/a&gt;&lt;br&gt; in SIGGRAPH Asia 2023 Conference Proceedings &lt;br&gt; &lt;a href=&#34;https://www.mmlab-ntu.com/project/rerender/&#34;&gt;&lt;strong&gt;Project Page&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://arxiv.org/abs/2306.07954&#34;&gt;&lt;strong&gt;Paper&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://youtu.be/cxfxdepKVaM&#34;&gt;&lt;strong&gt;Supplementary Video&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://drive.google.com/file/d/1HkxG5eiLM_TQbbMZYOwjDbd5gWisOy4m/view?usp=sharing&#34;&gt;&lt;strong&gt;Input Data and Video Results&lt;/strong&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/Anonymous-sub/Rerender&#34;&gt;&lt;img src=&#34;https://huggingface.co/datasets/huggingface/badges/raw/main/open-in-hf-spaces-sm-dark.svg?sanitize=true&#34; alt=&#34;Web Demo&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://visitor-badge.laobi.icu/badge?page_id=williamyang1991/Rerender_A_Video&#34; alt=&#34;visitors&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt; &lt;em&gt;Large text-to-image diffusion models have exhibited impressive proficiency in generating high-quality images. However, when applying these models to video domain, ensuring temporal consistency across video frames remains a formidable challenge. This paper proposes a novel zero-shot text-guided video-to-video translation framework to adapt image models to videos. The framework includes two parts: key frame translation and full video translation. The first part uses an adapted diffusion model to generate key frames, with hierarchical cross-frame constraints applied to enforce coherence in shapes, textures and colors. The second part propagates the key frames to other frames with temporal-aware patch matching and frame blending. Our framework achieves global style and local texture temporal consistency at a low cost (without re-training or optimization). The adaptation is compatible with existing image diffusion techniques, allowing our framework to take advantage of them, such as customizing a specific subject with LoRA, and introducing extra spatial guidance with ControlNet. Extensive experimental results demonstrate the effectiveness of our proposed framework over existing methods in rendering high-quality and temporally-coherent videos.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt;:&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Temporal consistency&lt;/strong&gt;: cross-frame constraints for low-level temporal consistency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zero-shot&lt;/strong&gt;: no training or fine-tuning required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: compatible with off-the-shelf models (e.g., &lt;a href=&#34;https://github.com/lllyasviel/ControlNet&#34;&gt;ControlNet&lt;/a&gt;, &lt;a href=&#34;https://civitai.com/&#34;&gt;LoRA&lt;/a&gt;) for customized translation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/811fdea3-f0da-49c9-92b8-2d2ad360f0d6&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/811fdea3-f0da-49c9-92b8-2d2ad360f0d6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[09/2023] Code is released.&lt;/li&gt; &#xA; &lt;li&gt;[09/2023] Accepted to SIGGRAPH Asia 2023 Conference Proceedings!&lt;/li&gt; &#xA; &lt;li&gt;[06/2023] Integrated to ðŸ¤— &lt;a href=&#34;https://huggingface.co/spaces/Anonymous-sub/Rerender&#34;&gt;Hugging Face&lt;/a&gt;. Enjoy the web demo!&lt;/li&gt; &#xA; &lt;li&gt;[05/2023] This website is created.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integrate into Diffusers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add Inference instructions in README.md.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add Examples to webUI.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add optional poisson fusion to the pipeline.&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Add Installation instructions for Windows&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Please make sure your installation path only contain English letters or _&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. (Don&#39;t forget --recursive. Otherwise, please run &lt;code&gt;git submodule update --init --recursive&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:williamyang1991/Rerender_A_Video.git --recursive&#xA;cd Rerender_A_Video&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;If you have installed PyTorch CUDA, you can simply set up the environment with pip.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create a new conda environment from scratch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda env create -f environment.yml&#xA;conda activate rerender&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the installation script. The required models will be downloaded in &lt;code&gt;./models&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python install.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;You can run the demo with &lt;code&gt;rerender.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python rerender.py --cfg config/real2sculpture.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Installation on Windows&lt;/summary&gt; &#xA; &lt;p&gt;Before running the above 1-4 steps, you need prepare:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit-archive&#34;&gt;CUDA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;git&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://visualstudio.microsoft.com/&#34;&gt;VS&lt;/a&gt; with Windows 10/11 SDK (for building deps/ebsynth/bin/ebsynth.exe)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Installation Fails?&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;In case building ebsynth fails, we provides our complied &lt;a href=&#34;https://drive.google.com/drive/folders/1oSB3imKwZGz69q2unBUfcgmQpzwccoyD?usp=sharing&#34;&gt;ebsynth&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;KeyError: &#39;dataset&#39;&lt;/code&gt;: upgrade Gradio to the latest version (&lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/issues/14#issuecomment-1722778672&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/issues/14#issuecomment-1722778672&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;(1) Inference&lt;/h2&gt; &#xA;&lt;h3&gt;WebUI (recommended)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;python webUI.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gradio app also allows you to flexibly change the inference options. Just try it for more details. (For WebUI, you need to download &lt;a href=&#34;https://civitai.com/models/7371/rev-animated?modelVersionId=19575&#34;&gt;revAnimated_v11&lt;/a&gt; and &lt;a href=&#34;https://civitai.com/models/4201?modelVersionId=29460&#34;&gt;realisticVisionV20_v20&lt;/a&gt; to &lt;code&gt;./models/&lt;/code&gt; after Installation)&lt;/p&gt; &#xA;&lt;p&gt;Upload your video, input the prompt, select the seed, and hit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run 1st Key Frame&lt;/strong&gt;: only translate the first frame, so you can adjust the prompts/models/parameters to find your ideal output appearance before running the whole video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Key Frames&lt;/strong&gt;: translate all the key frames based on the settings of the first frame, so you can adjust the temporal-related parameters for better temporal consistency before running the whole video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Propagation&lt;/strong&gt;: propagate the key frames to other frames for full video translation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run All&lt;/strong&gt;: &lt;strong&gt;Run 1st Key Frame&lt;/strong&gt;, &lt;strong&gt;Run Key Frames&lt;/strong&gt; and &lt;strong&gt;Run Propagation&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/eb4e1ddc-11a3-42dd-baa4-622eecef04c7&#34; alt=&#34;UI&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We provide abundant advanced options to play with&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Using customized models&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Using LoRA/Dreambooth/Finetuned/Mixed SD models &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Modify &lt;code&gt;sd_model_cfg.py&lt;/code&gt; to add paths to the saved SD models&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Using other controls from ControlNet (e.g., Depth, Pose) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add more options like &lt;code&gt;control_type = gr.Dropdown([&#39;HED&#39;, &#39;canny&#39;, &#39;depth&#39;]&lt;/code&gt; here &lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/raw/b6cafb5d80a79a3ef831c689ffad92ec095f2794/webUI.py#L690&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/blob/b6cafb5d80a79a3ef831c689ffad92ec095f2794/webUI.py#L690&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Add model loading options like &lt;code&gt;elif control_type == &#39;depth&#39;:&lt;/code&gt; following &lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/raw/b6cafb5d80a79a3ef831c689ffad92ec095f2794/webUI.py#L88&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/blob/b6cafb5d80a79a3ef831c689ffad92ec095f2794/webUI.py#L88&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Add model detectors like &lt;code&gt;elif control_type == &#39;depth&#39;:&lt;/code&gt; following &lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/raw/b6cafb5d80a79a3ef831c689ffad92ec095f2794/webUI.py#L122&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/blob/b6cafb5d80a79a3ef831c689ffad92ec095f2794/webUI.py#L122&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;One example is given &lt;a href=&#34;https://huggingface.co/spaces/Anonymous-sub/Rerender/discussions/10/files&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Advanced options for the 1st frame translation&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Resolution related (&lt;strong&gt;Frame resolution&lt;/strong&gt;, &lt;strong&gt;left/top/right/bottom crop length&lt;/strong&gt;): crop the frame and resize its short side to 512.&lt;/li&gt; &#xA;  &lt;li&gt;ControlNet related: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;ControlNet strength&lt;/strong&gt;: how well the output matches the input control edges&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Control type&lt;/strong&gt;: HED edge or Canny edge&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Canny low/high threshold&lt;/strong&gt;: low values for more edge details&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;SDEdit related: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Denoising strength&lt;/strong&gt;: repaint degree (low value to make the output look more like the original video)&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Preserve color&lt;/strong&gt;: preserve the color of the original video&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;SD related: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;: denoising step&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;CFG scale&lt;/strong&gt;: how well the output matches the prompt&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Base model&lt;/strong&gt;: base Stable Diffusion model (SD 1.5) &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;Stable Diffusion 1.5: official model&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://civitai.com/models/7371/rev-animated?modelVersionId=19575&#34;&gt;revAnimated_v11&lt;/a&gt;: a semi-realistic (2.5D) model&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://civitai.com/models/4201?modelVersionId=29460&#34;&gt;realisticVisionV20_v20&lt;/a&gt;: a photo-realistic model&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Added prompt/Negative prompt&lt;/strong&gt;: supplementary prompts&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Advanced options for the key frame translation&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Key frame related &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Key frame frequency (K)&lt;/strong&gt;: Uniformly sample the key frame every K frames. Small value for large or fast motions.&lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Number of key frames (M)&lt;/strong&gt;: The final output video will have K*M+1 frames with M+1 key frames.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Temporal consistency related &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Cross-frame attention: &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Cross-frame attention start/end&lt;/strong&gt;: When applying cross-frame attention for global style consistency&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Cross-frame attention update frequency (N)&lt;/strong&gt;: Update the reference style frame every N key frames. Should be large for long videos to avoid error accumulation.&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Shape-aware fusion&lt;/strong&gt; Check to use this feature &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Shape-aware fusion start/end&lt;/strong&gt;: When applying shape-aware fusion for local shape consistency&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Pixel-aware fusion&lt;/strong&gt; Check to use this feature &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Pixel-aware fusion start/end&lt;/strong&gt;: When applying pixel-aware fusion for pixel-level temporal consistency&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Pixel-aware fusion strength&lt;/strong&gt;: The strength to preserve the non-inpainting region. Small to avoid error accumulation. Large to avoid burry textures.&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Pixel-aware fusion detail level&lt;/strong&gt;: The strength to sharpen the inpainting region. Small to avoid error accumulation. Large to avoid burry textures.&lt;/li&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Smooth fusion boundary&lt;/strong&gt;: Check to smooth the inpainting boundary (avoid error accumulation).&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;strong&gt;Color-aware AdaIN&lt;/strong&gt; Check to use this feature &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;strong&gt;Color-aware AdaIN start/end&lt;/strong&gt;: When applying AdaIN to make the video color consistent with the first frame&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Advanced options for the full video translation&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Gradient blending&lt;/strong&gt;: apply Poisson Blending to reduce ghosting artifacts. May slow the process and increase flickers.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Number of parallel processes&lt;/strong&gt;: multiprocessing to speed up the process. Large value (8) is recommended.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/ffebac15-e7e0-4cd4-a8fe-60f243450172&#34; alt=&#34;options&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;We also provide a flexible script &lt;code&gt;rerender.py&lt;/code&gt; to run our method.&lt;/p&gt; &#xA;&lt;h4&gt;Simple mode&lt;/h4&gt; &#xA;&lt;p&gt;Set the options via command line. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python rerender.py --input videos/pexels-antoni-shkraba-8048492-540x960-25fps.mp4 --output result/man/man.mp4 --prompt &#34;a handsome man in van gogh painting&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will run the full pipeline. A work directory will be created at &lt;code&gt;result/man&lt;/code&gt; and the result video will be saved as &lt;code&gt;result/man/man.mp4&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Advanced mode&lt;/h4&gt; &#xA;&lt;p&gt;Set the options via a config file. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python rerender.py --cfg config/van_gogh_man.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will run the full pipeline. We provide some examples of the config in &lt;code&gt;config&lt;/code&gt; directory. Most options in the config is the same as those in WebUI. Please check the explanations in the WebUI section.&lt;/p&gt; &#xA;&lt;p&gt;Specifying customized models by setting &lt;code&gt;sd_model&lt;/code&gt; in config. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;sd_model&#34;: &#34;models/realisticVisionV20_v20.safetensors&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customize the pipeline&lt;/h4&gt; &#xA;&lt;p&gt;Similar to WebUI, we provide three-step workflow: Rerender the first key frame, then rerender the full key frames, finally rerender the full video with propagation. To run only a single step, specify options &lt;code&gt;-one&lt;/code&gt;, &lt;code&gt;-nb&lt;/code&gt; and &lt;code&gt;-nr&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Rerender the first key frame&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python rerender.py --cfg config/van_gogh_man.json -one -nb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Rerender the full key frames&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python rerender.py --cfg config/van_gogh_man.json -nb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Rerender the full video with propagation&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python rerender.py --cfg config/van_gogh_man.json -nr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Our Ebsynth implementation&lt;/h4&gt; &#xA;&lt;p&gt;We provide a separate Ebsynth python script &lt;code&gt;video_blend.py&lt;/code&gt; with the temporal blending algorithm introduced in &lt;a href=&#34;https://dcgi.fel.cvut.cz/home/sykorad/ebsynth.html&#34;&gt;Stylizing Video by Example&lt;/a&gt; for interpolating style between key frames. It can work on your own stylized key frames independently of our Rerender algorithm.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;video_blend.py [-h] [--output OUTPUT] [--fps FPS] [--beg BEG] [--end END] [--itv ITV] [--key KEY]&#xA;                      [--n_proc N_PROC] [-ps] [-ne] [-tmp]&#xA;                      name&#xA;&#xA;positional arguments:&#xA;  name             Path to input video&#xA;&#xA;optional arguments:&#xA;  -h, --help       show this help message and exit&#xA;  --output OUTPUT  Path to output video&#xA;  --fps FPS        The FPS of output video&#xA;  --beg BEG        The index of the first frame to be stylized&#xA;  --end END        The index of the last frame to be stylized&#xA;  --itv ITV        The interval of key frame&#xA;  --key KEY        The subfolder name of stylized key frames&#xA;  --n_proc N_PROC  The max process count&#xA;  -ps              Use poisson gradient blending&#xA;  -ne              Do not run ebsynth (use previous ebsynth output)&#xA;  -tmp             Keep temporary output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to run Ebsynth on video &lt;code&gt;man.mp4&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Put the stylized key frames to &lt;code&gt;videos/man/keys&lt;/code&gt; for every 10 frames (named as &lt;code&gt;0001.png&lt;/code&gt;, &lt;code&gt;0011.png&lt;/code&gt;, ...)&lt;/li&gt; &#xA; &lt;li&gt;Put the original video frames in &lt;code&gt;videos/man/video&lt;/code&gt; (named as &lt;code&gt;0001.png&lt;/code&gt;, &lt;code&gt;0002.png&lt;/code&gt;, ...).&lt;/li&gt; &#xA; &lt;li&gt;Run Ebsynth on the first 101 frames of the video with poisson gradient blending and save the result to &lt;code&gt;videos/man/blend.mp4&lt;/code&gt; under FPS 25 with the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python video_blend.py videos/man \&#xA;  --beg 1 \&#xA;  --end 101 \&#xA;  --itv 10 \&#xA;  --key keys \&#xA;  --output videos/man/blend.mp4 \&#xA;  --fps 25.0 \&#xA;  -ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;(2) Results&lt;/h2&gt; &#xA;&lt;h3&gt;Key frame translation&lt;/h3&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/18666871-f273-44b2-ae67-7be85d43e2f6&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/61f59540-f06e-4e5a-86b6-1d7cb8ed6300&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/8e8ad51a-6a71-4b34-8633-382192d0f17c&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/b03cd35f-5d90-471a-9aa9-5c7773d7ac39&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;27.5%&#34; align=&#34;center&#34;&gt;white ancient Greek sculpture, Venus de Milo, light pink and blue background&lt;/td&gt; &#xA;   &lt;td width=&#34;27.5%&#34; align=&#34;center&#34;&gt;a handsome Greek man&lt;/td&gt; &#xA;   &lt;td width=&#34;21.5%&#34; align=&#34;center&#34;&gt;a traditional mountain in chinese ink wash painting&lt;/td&gt; &#xA;   &lt;td width=&#34;23.5%&#34; align=&#34;center&#34;&gt;a cartoon tiger&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/649a789e-0c41-41cf-94a4-0d524dcfb282&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/73590c16-916f-4ee6-881a-44a201dd85dd&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/fbdc0b8e-6046-414f-a37e-3cd9dd0adf5d&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/eb11d807-2afa-4609-a074-34300b67e6aa&#34; raw=&#34;true&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;26.0%&#34; align=&#34;center&#34;&gt;a swan in chinese ink wash painting, monochrome&lt;/td&gt; &#xA;   &lt;td width=&#34;29.0%&#34; align=&#34;center&#34;&gt;a beautiful woman in CG style&lt;/td&gt; &#xA;   &lt;td width=&#34;21.5%&#34; align=&#34;center&#34;&gt;a clean simple white jade sculpture&lt;/td&gt; &#xA;   &lt;td width=&#34;24.0%&#34; align=&#34;center&#34;&gt;a fluorescent jellyfish in the deep dark blue sea&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Full video translation&lt;/h3&gt; &#xA;&lt;p&gt;Text-guided virtual character generation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/1405b257-e59a-427f-890d-7652e6bed0a4&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/1405b257-e59a-427f-890d-7652e6bed0a4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/efee8cc6-9708-4124-bf6a-49baf91349fc&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/efee8cc6-9708-4124-bf6a-49baf91349fc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Video stylization and video editing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/1b72585c-99c0-401d-b240-5b8016df7a3f&#34;&gt;https://github.com/williamyang1991/Rerender_A_Video/assets/18130694/1b72585c-99c0-401d-b240-5b8016df7a3f&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this work useful for your research, please consider citing our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{yang2023rerender,&#xA;â€ƒtitle = {Rerender A Video: Zero-Shot Text-Guided Video-to-Video Translation},&#xA;â€ƒauthor = {Yang, Shuai and Zhou, Yifan and Liu, Ziwei and and Loy, Chen Change},&#xA; booktitle = {ACM SIGGRAPH Asia Conference Proceedings},&#xA;â€ƒyear = {2023},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;The code is mainly developed based on &lt;a href=&#34;https://github.com/lllyasviel/ControlNet&#34;&gt;ControlNet&lt;/a&gt;, &lt;a href=&#34;https://github.com/Stability-AI/stablediffusion&#34;&gt;Stable Diffusion&lt;/a&gt;, &lt;a href=&#34;https://github.com/haofeixu/gmflow&#34;&gt;GMFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/jamriska/ebsynth&#34;&gt;Ebsynth&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pytorch/xla</title>
    <updated>2023-09-20T01:33:40Z</updated>
    <id>tag:github.com,2023-09-20:/pytorch/xla</id>
    <link href="https://github.com/pytorch/xla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enabling PyTorch on XLA Devices (e.g. Google TPU)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyTorch/XLA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;b&gt;Current CI status:&lt;/b&gt; &lt;img src=&#34;https://github.com/pytorch/xla/actions/workflows/build_and_test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: PyTorch/XLA r2.1 will be the last release with XRT available as a legacy runtime. Our main release build will not include XRT, but it will be available in a separate package.&lt;/p&gt; &#xA;&lt;p&gt;PyTorch/XLA is a Python package that uses the &lt;a href=&#34;https://www.tensorflow.org/xla&#34;&gt;XLA deep learning compiler&lt;/a&gt; to connect the &lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch deep learning framework&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/tpu/&#34;&gt;Cloud TPUs&lt;/a&gt;. You can try it right now, for free, on a single Cloud TPU VM with &lt;a href=&#34;https://www.kaggle.com/discussions/product-feedback/369338&#34;&gt;Kaggle&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Take a look at one of our &lt;a href=&#34;https://github.com/pytorch/xla/tree/master/contrib/kaggle&#34;&gt;Kaggle notebooks&lt;/a&gt; to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytorch/xla/raw/master/contrib/kaggle/pytorch-xla-2-0-on-kaggle.ipynb&#34;&gt;Stable Diffusion with PyTorch/XLA 2.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pytorch/xla/raw/master/contrib/kaggle/distributed-pytorch-xla-basics-with-pjrt.ipynb&#34;&gt;Distributed PyTorch/XLA Basics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To install PyTorch/XLA a new VM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install torch~=2.0.0 https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-2.0-cp38-cp38-linux_x86_64.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update your existing training loop, make the following changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import torch.multiprocessing as mp&#xA;+import torch_xla.core.xla_model as xm&#xA;+import torch_xla.distributed.parallel_loader as pl&#xA;+import torch_xla.distributed.xla_multiprocessing as xmp&#xA;&#xA; def _mp_fn(index):&#xA;   ...&#xA;&#xA;+  # Move the model paramters to your XLA device&#xA;+  model.to(xm.xla_device())&#xA;+&#xA;+  # MpDeviceLoader preloads data to the XLA device&#xA;+  xla_train_loader = pl.MpDeviceLoader(train_loader, xm.xla_device())&#xA;&#xA;-  for inputs, labels in train_loader:&#xA;+  for inputs, labels in xla_train_loader:&#xA;     optimizer.zero_grad()&#xA;     outputs = model(inputs)&#xA;     loss = loss_fn(outputs, labels)&#xA;     loss.backward()&#xA;-    optimizer.step()&#xA;+&#xA;+    # `xm.optimizer_step` combines gradients across replicas&#xA;+    xm.optimizer_step()&#xA;&#xA; if __name__ == &#39;__main__&#39;:&#xA;-  mp.spawn(_mp_fn, args=(), nprocs=world_size)&#xA;+  # xmp.spawn automatically selects the correct world size&#xA;+  xmp.spawn(_mp_fn, args=())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;DistributedDataParallel&lt;/code&gt;, make the following changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import torch.distributed as dist&#xA;-import torch.multiprocessing as mp&#xA;+import torch_xla.core.xla_model as xm&#xA;+import torch_xla.distributed.parallel_loader as pl&#xA;+import torch_xla.distributed.xla_multiprocessing as xmp&#xA;+import torch_xla.distributed.xla_backend&#xA;&#xA; def _mp_fn(rank, world_size):&#xA;   ...&#xA;&#xA;-  os.environ[&#39;MASTER_ADDR&#39;] = &#39;localhost&#39;&#xA;-  os.environ[&#39;MASTER_PORT&#39;] = &#39;12355&#39;&#xA;-  dist.init_process_group(&#34;gloo&#34;, rank=rank, world_size=world_size)&#xA;+  # Rank and world size are inferred from the XLA device runtime&#xA;+  dist.init_process_group(&#34;xla&#34;, init_method=&#39;xla://&#39;)&#xA;+&#xA;+  model.to(xm.xla_device())&#xA;+  # `gradient_as_bucket_view=tpu` required for XLA&#xA;+  ddp_model = DDP(model, gradient_as_bucket_view=True)&#xA;&#xA;-  model = model.to(rank)&#xA;-  ddp_model = DDP(model, device_ids=[rank])&#xA;+  xla_train_loader = pl.MpDeviceLoader(train_loader, xm.xla_device())&#xA;&#xA;-  for inputs, labels in train_loader:&#xA;+  for inputs, labels in xla_train_loader:&#xA;     optimizer.zero_grad()&#xA;     outputs = ddp_model(inputs)&#xA;     loss = loss_fn(outputs, labels)&#xA;     loss.backward()&#xA;     optimizer.step()&#xA;&#xA; if __name__ == &#39;__main__&#39;:&#xA;-  mp.spawn(_mp_fn, args=(), nprocs=world_size)&#xA;+  xmp.spawn(_mp_fn, args=())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional information on PyTorch/XLA, including a description of its semantics and functions, is available at &lt;a href=&#34;http://pytorch.org/xla/&#34;&gt;PyTorch.org&lt;/a&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/xla/master/API_GUIDE.md&#34;&gt;API Guide&lt;/a&gt; for best practices when writing networks that run on XLA devices (TPU, GPU, CPU and...).&lt;/p&gt; &#xA;&lt;p&gt;Our comprehensive user guides are available at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pytorch.org/xla&#34;&gt;Documentation for the latest release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pytorch.org/xla/master&#34;&gt;Documentation for master branch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;PyTorch/XLA tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/tpu/docs/run-calculation-pytorch&#34;&gt;Cloud TPU VM quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/tpu/docs/pytorch-pods&#34;&gt;Cloud TPU Pod slice quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/tpu/docs/pytorch-xla-performance-profiling-tpu-vm&#34;&gt;Profiling on TPU VM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pytorch/xla/master/docs/gpu.md&#34;&gt;GPU guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available docker images and wheels&lt;/h2&gt; &#xA;&lt;h3&gt;Wheel&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Cloud TPU VMs Wheel&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0 (Python 3.8)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-2.0-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly &amp;gt;= 2023/04/25 (Python 3.8)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/pytorch-xla-releases/wheels/tpuvm/torch_xla-nightly-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly &amp;gt;= 2023/04/25 (Python 3.10)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/pytorch-xla-releases/wheels/tpuvm/torch_xla-nightly-cp310-cp310-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;older versions&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Version&lt;/th&gt; &#xA;    &lt;th&gt;Cloud TPU VMs Wheel&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1.13&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-1.13-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1.12&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-1.12-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1.11&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-1.11-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1.10&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-1.10-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;nightly &amp;lt;= 2023/04/25&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-nightly-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Note: For TPU Pod customers using XRT (our legacy runtime), we have custom wheels for &lt;code&gt;torch&lt;/code&gt;, &lt;code&gt;torchvision&lt;/code&gt;, and &lt;code&gt;torch_xla&lt;/code&gt; at &lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/xrt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Cloud TPU VMs Wheel (XRT on Pod, Legacy Only)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;torch_xla&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/xrt/torch_xla-2.0-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;torch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/xrt/torch-2.0-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;torchvision&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/xrt/torchvision-2.0-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;GPU Wheel + Python 3.8&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0 + CUDA 11.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/118/torch_xla-2.0-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0 + CUDA 11.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/117/torch_xla-2.0-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/112/torch_xla-1.13-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly + CUDA 12.0 &amp;gt;= 2023/06/27&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/pytorch-xla-releases/wheels/cuda/12.0/torch_xla-nightly-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly + CUDA 11.8 &amp;lt;= 2023/04/25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/118/torch_xla-nightly-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly + CUDA 11.8 &amp;gt;= 2023/04/25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/pytorch-xla-releases/wheels/cuda/11.8/torch_xla-nightly-cp38-cp38-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;GPU Wheel + Python 3.7&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/112/torch_xla-1.13-cp37-cp37m-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/112/torch_xla-1.12-cp37-cp37m-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/112/torch_xla-1.11-cp37-cp37m-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/cuda/112/torch_xla-nightly-cp37-cp37-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Colab TPU Wheel&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://storage.googleapis.com/tpu-pytorch/wheels/colab/torch_xla-2.0-cp310-cp310-linux_x86_64.whl&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can also add &lt;code&gt;+yyyymmdd&lt;/code&gt; after &lt;code&gt;torch_xla-nightly&lt;/code&gt; to get the nightly wheel of a specified date. To get the companion pytorch and torchvision nightly wheel, replace the &lt;code&gt;torch_xla&lt;/code&gt; with &lt;code&gt;torch&lt;/code&gt; or &lt;code&gt;torchvision&lt;/code&gt; on above wheel links.&lt;/p&gt; &#xA;&lt;h4&gt;Installing libtpu (before PyTorch/XLA 2.0)&lt;/h4&gt; &#xA;&lt;p&gt;For PyTorch/XLA release r2.0 and older and when developing PyTorch/XLA, install the &lt;code&gt;libtpu&lt;/code&gt; pip package with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install torch_xla[tpuvm]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is only required on Cloud TPU VMs.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Cloud TPU VMs Docker&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:r2.0_3.8_tpuvm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:r1.13_3.8_tpuvm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly python 3.10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.10_tpuvm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly python 3.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.8_tpuvm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly python 3.10(&amp;gt;= 2023/04/25)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.10_tpuvm_YYYYMMDD&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly python 3.8(&amp;gt;= 2023/04/25)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.8_tpuvm_YYYYMMDD&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly at date(&amp;lt; 2023/04/25)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:nightly_3.8_tpuvm_YYYYMMDD&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;GPU CUDA 12.0 + Python 3.8 Docker&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.8_cuda_12.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly at date(&amp;gt;=2023/06/27)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.8_cuda_12.0_YYYYMMDD&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;GPU CUDA 11.8 + Python 3.8 Docker&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:r2.0_3.8_cuda_11.8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.8_cuda_11.8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly at date(&amp;gt;=2023/04/25)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;us-central1-docker.pkg.dev/tpu-pytorch-releases/docker/xla:nightly_3.8_cuda_11.8_YYYYMMDD&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nightly at date(&amp;lt;2023/04/25)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:nightly_3.8_cuda_11.8_YYYYMMDD&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;GPU CUDA 11.7 + Python 3.8 Docker&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:r2.0_3.8_cuda_11.7&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;GPU CUDA 11.2 + Python 3.8 Docker&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:r1.13_3.8_cuda_11.2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;GPU CUDA 11.2 + Python 3.7 Docker&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:r1.13_3.7_cuda_11.2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gcr.io/tpu-pytorch/xla:r1.12_3.7_cuda_11.2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To run on &lt;a href=&#34;https://cloud.google.com/compute/docs/gpus/create-vm-with-gpus&#34;&gt;compute instances with GPUs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If PyTorch/XLA isn&#39;t performing as expected, see the &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/xla/master/TROUBLESHOOTING.md&#34;&gt;troubleshooting guide&lt;/a&gt;, which has suggestions for debugging and optimizing your network(s).&lt;/p&gt; &#xA;&lt;h2&gt;Providing Feedback&lt;/h2&gt; &#xA;&lt;p&gt;The PyTorch/XLA team is always happy to hear from users and OSS contributors! The best way to reach out is by filing an issue on this Github. Questions, bug reports, feature requests, build issues, etc. are all welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/xla/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This repository is jointly operated and maintained by Google, Facebook and a number of individual contributors listed in the &lt;a href=&#34;https://github.com/pytorch/xla/graphs/contributors&#34;&gt;CONTRIBUTORS&lt;/a&gt; file. For questions directed at Facebook, please send an email to &lt;a href=&#34;mailto:opensource@fb.com&#34;&gt;opensource@fb.com&lt;/a&gt;. For questions directed at Google, please send an email to &lt;a href=&#34;mailto:pytorch-xla@googlegroups.com&#34;&gt;pytorch-xla@googlegroups.com&lt;/a&gt;. For all other questions, please open up an issue in this repository &lt;a href=&#34;https://github.com/pytorch/xla/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Reads&lt;/h2&gt; &#xA;&lt;p&gt;You can find additional useful reading materials in&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/blog/topics/developers-practitioners/pytorchxla-performance-debugging-tpu-vm-part-1&#34;&gt;Performance debugging on Cloud TPU VM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch.org/blog/understanding-lazytensor-system-performance-with-pytorch-xla-on-cloud-tpu/&#34;&gt;Lazy tensor intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/blog/topics/developers-practitioners/scaling-deep-learning-workloads-pytorch-xla-and-cloud-tpu-vm&#34;&gt;Scaling deep learning workloads with PyTorch / XLA and Cloud TPU VM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch.org/blog/scaling-pytorch-models-on-cloud-tpus-with-fsdp/&#34;&gt;Scaling PyTorch models on Cloud TPUs with FSDP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>