<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-25T01:39:05Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DaviMarta/Automatiza-o</title>
    <updated>2023-01-25T01:39:05Z</updated>
    <id>tag:github.com,2023-01-25:/DaviMarta/Automatiza-o</id>
    <link href="https://github.com/DaviMarta/Automatiza-o" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Nesse projeto você terá tudo que é necessario para automatizar o processo da sua empresa.&lt;/p&gt; &#xA;&lt;p&gt;Lembrando que como ele está na versão beta, creio que nem todas as pessoas conseguiram utilizar o repositorio&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JWarmenhoven/ISLR-python</title>
    <updated>2023-01-25T01:39:05Z</updated>
    <id>tag:github.com,2023-01-25:/JWarmenhoven/ISLR-python</id>
    <link href="https://github.com/JWarmenhoven/ISLR-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Introduction to Statistical Learning (James, Witten, Hastie, Tibshirani, 2013): Python code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ISLR-python&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains Python code for a selection of tables, figures and LAB sections from the first edition of the book &lt;a target=&#34;_blank&#34; href=&#34;https://www.statlearning.com/&#34;&gt;&#39;An Introduction to Statistical Learning with Applications in R&#39;&lt;/a&gt; by James, Witten, Hastie, Tibshirani (2013).&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;Bayesian data analysis&lt;/strong&gt; using PyMC3, take a look at &lt;a href=&#34;https://github.com/JWarmenhoven/DBDA-python&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2018-01-15&lt;/strong&gt;:&lt;br&gt; Minor updates to the repository due to changes/deprecations in several packages. The notebooks have been tested with &lt;a href=&#34;http://nbviewer.jupyter.org/github/JWarmenhoven/ISLR-python/blob/master/Notebooks/Python%20module%20versions.ipynb&#34;&gt;these package versions&lt;/a&gt;. Thanks @lincolnfrias and @telescopeuser.&lt;/p&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;2016-08-30&lt;/strong&gt;:&lt;br&gt; Chapter 6: I included Ridge/Lasso regression code using the new &lt;a href=&#34;https://github.com/civisanalytics/python-glmnet&#34;&gt;python-glmnet&lt;/a&gt; library. This is a python wrapper for the Fortran library used in the &lt;em&gt;R&lt;/em&gt; package &lt;em&gt;glmnet&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JWarmenhoven/ISLR-python/master/Notebooks/ISL%20Cover%202.jpg&#34; height=&#34;20%&#34; width=&#34;20%&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%203.ipynb&#34;&gt;Chapter 3 - Linear Regression&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%204.ipynb&#34;&gt;Chapter 4 - Classification&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%205.ipynb&#34;&gt;Chapter 5 - Resampling Methods&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%206.ipynb&#34;&gt;Chapter 6 - Linear Model Selection and Regularization&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%207.ipynb&#34;&gt;Chapter 7 - Moving Beyond Linearity&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%208.ipynb&#34;&gt;Chapter 8 - Tree-Based Methods&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%209.ipynb&#34;&gt;Chapter 9 - Support Vector Machines&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://nbviewer.ipython.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Chapter%2010.ipynb&#34;&gt;Chapter 10 - Unsupervised Learning&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt; &lt;a href=&#34;http://nbviewer.jupyter.org/github/JWarmenhoven/ISL-python/blob/master/Notebooks/Simulate.expected.misclassification.rate.ipynb&#34;&gt;Extra: Misclassification rate simulation - SVM and Logistic Regression&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt; This great book gives a thorough introduction to the field of Statistical/Machine Learning. The book is available for download (see link below), but I think this is one of those books that is definitely worth buying. The book contains sections with applications in R based on public datasets available for download or which are part of the &lt;a target=&#34;_blank&#34; href=&#34;https://cran.r-project.org/web/packages/ISLR/index.html&#34;&gt;R-package ISLR&lt;/a&gt;. Furthermore, there is a Stanford University online course based on this book and taught by the authors (See &lt;a target=&#34;_blank&#34; href=&#34;https://www.edx.org/school/stanfordonline&#34;&gt;course catalogue&lt;/a&gt; for current schedule).&lt;/p&gt;&#xA;&lt;p&gt; Since Python is my language of choice for data analysis, I decided to try and do some of the calculations and plots in Jupyter Notebooks using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pandas&lt;/li&gt; &#xA; &lt;li&gt;numpy&lt;/li&gt; &#xA; &lt;li&gt;scipy&lt;/li&gt; &#xA; &lt;li&gt;scikit-learn&lt;/li&gt; &#xA; &lt;li&gt;python-glmnet&lt;/li&gt; &#xA; &lt;li&gt;statsmodels&lt;/li&gt; &#xA; &lt;li&gt;patsy&lt;/li&gt; &#xA; &lt;li&gt;matplotlib&lt;/li&gt; &#xA; &lt;li&gt;seaborn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It was a good way to learn more about Machine Learning in Python by creating these notebooks. I created some of the figures/tables of the chapters and worked through some LAB sections. At certain points I realize that it may look like I tried too hard to make the output identical to the tables and R-plots in the book. But I did this to explore some details of the libraries mentioned above (mostly matplotlib and seaborn). Note that this repository is &lt;strong&gt;not a standalone tutorial&lt;/strong&gt; and that you probably should have a copy of the book to follow along. Suggestions for improvement and help with unsolved issues are welcome! See Hastie et al. (2009) for an advanced treatment of these topics.&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4&gt;References:&lt;/h4&gt; &#xA;&lt;p&gt;James, G., Witten, D., Hastie, T., Tibshirani, R. (2013). &lt;i&gt;An Introduction to Statistical Learning with Applications in R&lt;/i&gt;, Springer Science+Business Media, New York. &lt;a href=&#34;https://www.statlearning.com/&#34;&gt;https://www.statlearning.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;James, G., Witten, D., Hastie, T., Tibshirani, R. (2021). &lt;i&gt;An Introduction to Statistical Learning with Applications in R, Second Edition&lt;/i&gt;, Springer Science+Business Media, New York. &lt;a href=&#34;https://www.statlearning.com/&#34;&gt;https://www.statlearning.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hastie, T., Tibshirani, R., Friedman, J. (2009). &lt;i&gt;Elements of Statistical Learning&lt;/i&gt;, Second Edition, Springer Science+Business Media, New York. &lt;a href=&#34;http://statweb.stanford.edu/~tibs/ElemStatLearn/&#34;&gt;http://statweb.stanford.edu/~tibs/ElemStatLearn/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pschatzmann/arduino-audio-tools</title>
    <updated>2023-01-25T01:39:05Z</updated>
    <id>tag:github.com,2023-01-25:/pschatzmann/arduino-audio-tools</id>
    <link href="https://github.com/pschatzmann/arduino-audio-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arduino Audio Tools (Music Player, Music Recorder supporting I2S, Microphones, DAC, ADC, A2DP, Url, MP3, AAC, AudioKit, ES8388)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arduino Audio Tools&lt;/h1&gt; &#xA;&lt;p&gt;Some basic &lt;strong&gt;header-only C++ classes&lt;/strong&gt; that can be used for &lt;strong&gt;Audio Processing&lt;/strong&gt; provided as &lt;strong&gt;Arduino Library&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We provide different &#34;Audio Sources&#34; and &#34;Audio Sinks&#34; (see next section)&lt;/li&gt; &#xA; &lt;li&gt;Support for different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_encoder.html&#34;&gt;Encoders&lt;/a&gt; and &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_decoder.html&#34;&gt;Decoders&lt;/a&gt; for MP3, AAC, WAV, FLAC, etc&lt;/li&gt; &#xA; &lt;li&gt;Different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_sound_generator.html&#34;&gt;Sound Generators&lt;/a&gt; (e.g. to generate a sine tone)&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_effect_stream_t.htmlESPNowStream&#34;&gt;Sound Effects&lt;/a&gt; with different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_effect.html&#34;&gt;Effect Implementations&lt;/a&gt; (e.g. Boost, Distortion, Echo, Reverb...)&lt;/li&gt; &#xA; &lt;li&gt;Different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_base_buffer.html&#34;&gt;Buffer Implementations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Different &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_base_converter.html&#34;&gt;Converters&lt;/a&gt; and &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_filter.html&#34;&gt;Filters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_musical_notes.html&#34;&gt;Musical Notes&lt;/a&gt; (with frequencies of notes)&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_timer_alarm_repeating.html&#34;&gt;Repeating Timer&lt;/a&gt; (e.g. for sampling audio data using exact times)&lt;/li&gt; &#xA; &lt;li&gt;Desktop Integration: Building of Arduino Audio Sketches to be run on &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Running-an-Audio-Sketch-on-the-Desktop&#34;&gt;Linux, Windows and OS/X&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This functionality provides the glue which makes different audio processing components and libraries work together. We also provide &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Examples&#34;&gt;plenty of examples&lt;/a&gt; that demonstrate how to implement the different scenarios. The &lt;strong&gt;design philosophy&lt;/strong&gt; is based on the Arduino conventions: we use the &lt;code&gt;begin()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; methods to start and stop the processing and we propagate the &lt;strong&gt;use of Streams&lt;/strong&gt;. We all know the &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/class_stream.html&#34;&gt;Arduino Streams&lt;/a&gt;: We usually use them to write out print messages and sometimes we use them to read the output from Serial devices. The same thing applies to “Audio Streams”: You can read audio data from “Audio Sources” and you write them to “Audio Sinks”.&lt;/p&gt; &#xA;&lt;p&gt;As “Audio Sources” we will have e.g.:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Digital Microphones – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_i2_s_stream.html&#34;&gt;I2SStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Analog Microphones – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_analog_audio_stream.html&#34;&gt;AnalogAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Files on the Internet – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_u_r_l_stream.html&#34;&gt;URLStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Streaming Internet Radios - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_i_c_y_stream.html&#34;&gt;ICYStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generated Sound – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_generated_sound_stream.html&#34;&gt;GeneratedSoundStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mobile Phone A2DP Bluetooth – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_a2_d_p_stream.html&#34;&gt;A2DPStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Binary Data in Flash Memory – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_memory_stream.html&#34;&gt;MemoryStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio generated by STK Framwork - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_s_t_k_stream.html&#34;&gt;STKStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Desktop Integration - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_port_audio_stream.html&#34;&gt;PortAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A Timer based Source - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_timer_callback_audio_stream.html&#34;&gt;TimerCallbackAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32 AudioKit - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_kit_stream.html&#34;&gt;AudioKitStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Input using FIR, IIR Filters - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_filtered_stream.html&#34;&gt;FilteredStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tensorflow Lite - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_tf_lite_audio_stream.html&#34;&gt;TfLiteAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Converting Streams - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_volume_stream.html&#34;&gt;VolumeStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_resample_stream.html&#34;&gt;ResampleStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_format_converter_stream.html&#34;&gt;FormatConverterStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_number_format_converter_stream.html&#34;&gt;NumberFormatConverterStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_channel_format_converter_stream.html&#34;&gt;ChannelFormatConverterStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_converted_stream.html&#34;&gt;ConvertedStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Communication - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_e_s_p_now_stream.html&#34;&gt;ESPNowStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_u_d_p_stream.html&#34;&gt;UDPStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any other Arduino Classes implementing Streams: SD, Ethernet etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As “Audio Sinks” we will have e.g:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;external DAC – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_i2_s_stream.html&#34;&gt;I2SStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Analog output e.g. to an Amplifier – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_analog_audio_stream.html&#34;&gt;AnalogAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output using PWM – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_p_w_m_audio_stream.html&#34;&gt;PWMAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output to SPDIF/TOSLINK - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_s_p_d_i_f_stream.html&#34;&gt;SPDIFStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bluetooth Speakers – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_a2_d_p_stream.html&#34;&gt;A2DPStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Serial to display the data as CSV – &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_csv_stream.html&#34;&gt;CsvStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Serial to display the data as hex dump - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_hex_dump_stream.html&#34;&gt;HexDumpStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Encoding and Decoding of Audio &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_encoded_audio_stream.html&#34;&gt;EncodedAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Desktop Integration - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_port_audio_stream.html&#34;&gt;PortAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ID3 Metadata for MP3 - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_meta_data_i_d3.html&#34;&gt;MetaDataID3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A Timer based Sink - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_timer_callback_audio_stream.html&#34;&gt;TimerCallbackAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ESP32 AudioKit - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_kit_stream.html&#34;&gt;AudioKitStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VS1053 Codec Module - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_v_s1053_stream.html&#34;&gt;VS1053Stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Callback integration e.g. with ESP8266Audio &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_output_with_callback.html&#34;&gt;AudioOutputWithCallback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output using FIR, IRR Filters - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_filtered_stream.html&#34;&gt;FilteredStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Determine the Volume - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_volume_print.html&#34;&gt;VolumePrint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Split the Output to different Destinations - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_multi_output.html&#34;&gt;MultiOutput&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;3 Band Equilizer - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_equilizer3_bands.html&#34;&gt;Equilizer3Bands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FFT - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_real_f_f_t.html&#34;&gt;AudioRealFFT&lt;/a&gt; and &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_kiss_f_f_t.html&#34;&gt;AudioKissFFT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tensorflow Lite - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_tf_lite_audio_stream.html&#34;&gt;TfLiteAudioStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Converting Streams - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_volume_stream.html&#34;&gt;VolumeStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_resample_stream.html&#34;&gt;ResampleStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_format_converter_stream.html&#34;&gt;FormatConverterStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_number_format_converter_stream.html&#34;&gt;NumberFormatConverterStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_channel_format_converter_stream.html&#34;&gt;ChannelFormatConverterStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_converted_stream.html&#34;&gt;ConvertedStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Communication - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_e_s_p_now_stream.html&#34;&gt;ESPNowStream&lt;/a&gt;, &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_u_d_p_stream.html&#34;&gt;UDPStream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiuser-Webserver for PCM Output - &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_w_a_v_server_ex.html&#34;&gt;AudioWAVServerEx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any other Arduino Classes implementing Streams: SD, Ethernet etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Here is an simple example which streams a file from the Flash Memory and writes it to I2S:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#include &#34;AudioTools.h&#34;&#xA;#include &#34;StarWars30.h&#34;&#xA;&#xA;uint8_t channels = 2;&#xA;uint16_t sample_rate = 22050;&#xA;&#xA;MemoryStream music(StarWars30_raw, StarWars30_raw_len);&#xA;I2SStream i2s;  // Output to I2S&#xA;StreamCopy copier(i2s, music); // copies sound into i2s&#xA;&#xA;void setup(){&#xA;    Serial.begin(115200);&#xA;&#xA;    auto config = i2s.defaultConfig(TX_MODE);&#xA;    config.sample_rate = sample_rate;&#xA;    config.channels = channels;&#xA;    config.bits_per_sample = 16;&#xA;    i2s.begin(config);&#xA;}&#xA;&#xA;void loop(){&#xA;    copier.copy();&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each stream has it&#39;s own &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/structaudio__tools_1_1_audio_base_info.html&#34;&gt;configuration object&lt;/a&gt; that should be passed to the begin method. The defaultConfig() method is providing a default proposal which will usually &#34;just work&#34;. Please consult the &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/modules.html&#34;&gt;class documentation&lt;/a&gt; for the available configuration parameters. You can also &lt;strong&gt;easily adapt&lt;/strong&gt; any provided examples: If you e.g. replace the I2SStream with the AnalogAudioStream class, you will get analog instead of digital output.&lt;/p&gt; &#xA;&lt;p&gt;I suggest you continue to read the more &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Introduction&#34;&gt;detailed introduction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Further examples can be found in the &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Examples&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dependent on the example you might need to install some &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Optional-Libraries&#34;&gt;addional libaries&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AudioPlayer&lt;/h3&gt; &#xA;&lt;p&gt;The library also provides a versatile &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/classaudio__tools_1_1_audio_player.html&#34;&gt;AudioPlayer&lt;/a&gt;. Further information can be found in the &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/The-Audio-Player-Class&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;The application uses a built in logger (see AudioLogger.h and AudioConfig.h). You can e.g. deactivate the logging by changing USE_AUDIO_LOGGING to false in the AudioConfig.h:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define USE_AUDIO_LOGGING false&#xA;#define LOG_LEVEL AudioLogger::Warning&#xA;#define LOG_STREAM Serial&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Per default we use the log level warning and the logging output is going to Serial. You can also change this in your sketch by calling AudioLogger begin with the output stream and the log level e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AudioLogger::instance().begin(Serial, AudioLogger::Debug);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show and Tell&lt;/h2&gt; &#xA;&lt;p&gt;Get some inspiration &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/discussions/categories/show-and-tell&#34;&gt;from projects that were using this library&lt;/a&gt; or share your projects with the community.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Here is the generated &lt;a href=&#34;https://pschatzmann.github.io/arduino-audio-tools/html/modules.html&#34;&gt;Class Documentation&lt;/a&gt;. Please use this before you start any question if something is possible!&lt;/li&gt; &#xA; &lt;li&gt;Please also check out the other &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki&#34;&gt;Information in the Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You also might find further information in &lt;a href=&#34;https://www.pschatzmann.ch/home/category/machine-sound/&#34;&gt;one of my Blogs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation in Arduino&lt;/h2&gt; &#xA;&lt;p&gt;You can download the library as zip and call include Library -&amp;gt; zip library. Or you can git clone this project into the Arduino libraries folder e.g. with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd  ~/Documents/Arduino/libraries&#xA;git clone pschatzmann/arduino-audio-tools.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I recommend to use git because you can easily update to the latest version just by executing the &lt;code&gt;git pull&lt;/code&gt; command in the project folder. If you want to use the library in PlatformIO, you can find a &lt;a href=&#34;https://github.com/pschatzmann/arduino-audio-tools/wiki/Working-with-PlatformIO&#34;&gt;detailed description in the Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Me&lt;/h2&gt; &#xA;&lt;p&gt;This software is totally free, but you can make me happy by rewarding me with a treat&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buymeacoffee.com/philschatzh&#34;&gt;Buy me a coffee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paypal.me/pschatzmann?country.x=CH&amp;amp;locale.x=en_US&#34;&gt;Paypal me&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>