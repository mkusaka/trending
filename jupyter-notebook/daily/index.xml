<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-05T01:33:16Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>codebasics/potato-disease-classification</title>
    <updated>2024-02-05T01:33:16Z</updated>
    <id>tag:github.com,2024-02-05:/codebasics/potato-disease-classification</id>
    <link href="https://github.com/codebasics/potato-disease-classification" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Potato Disease Classification - Training, Rest APIs, and Frontend to test.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Potato Disease Classification&lt;/h1&gt; &#xA;&lt;h2&gt;Setup for Python:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Python (&lt;a href=&#34;https://wiki.python.org/moin/BeginnersGuide&#34;&gt;Setup instructions&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Python packages&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install -r training/requirements.txt&#xA;pip3 install -r api/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install Tensorflow Serving (&lt;a href=&#34;https://www.tensorflow.org/tfx/serving/setup&#34;&gt;Setup instructions&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup for ReactJS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Nodejs (&lt;a href=&#34;https://nodejs.org/en/download/package-manager/&#34;&gt;Setup instructions&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install NPM (&lt;a href=&#34;https://www.npmjs.com/get-npm&#34;&gt;Setup instructions&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd frontend&#xA;npm install --from-lock-json&#xA;npm audit fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; as &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change API url in &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Setup for React-Native app&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to the &lt;a href=&#34;https://reactnative.dev/docs/environment-setup&#34;&gt;React Native environment setup&lt;/a&gt;, then select &lt;code&gt;React Native CLI Quickstart&lt;/code&gt; tab.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd mobile-app&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2.1 Only for mac users&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ios &amp;amp;&amp;amp; pod install &amp;amp;&amp;amp; cd ../&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; as &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change API url in &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Training the Model&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the data from &lt;a href=&#34;https://www.kaggle.com/arjuntejaswi/plant-village&#34;&gt;kaggle&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Only keep folders related to Potatoes.&lt;/li&gt; &#xA; &lt;li&gt;Run Jupyter Notebook in Browser.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter notebook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Open &lt;code&gt;training/potato-disease-training.ipynb&lt;/code&gt; in Jupyter Notebook.&lt;/li&gt; &#xA; &lt;li&gt;In cell #2, update the path to dataset.&lt;/li&gt; &#xA; &lt;li&gt;Run all the Cells one by one.&lt;/li&gt; &#xA; &lt;li&gt;Copy the model generated and save it with the version number in the &lt;code&gt;models&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the API&lt;/h2&gt; &#xA;&lt;h3&gt;Using FastAPI&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get inside &lt;code&gt;api&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run the FastAPI Server using uvicorn&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uvicorn main:app --reload --host 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Your API is now running at &lt;code&gt;0.0.0.0:8000&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using FastAPI &amp;amp; TF Serve&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get inside &lt;code&gt;api&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;models.config.example&lt;/code&gt; as &lt;code&gt;models.config&lt;/code&gt; and update the paths in file.&lt;/li&gt; &#xA; &lt;li&gt;Run the TF Serve (Update config file path below)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -t --rm -p 8501:8501 -v C:/Code/potato-disease-classification:/potato-disease-classification tensorflow/serving --rest_api_port=8501 --model_config_file=/potato-disease-classification/models.config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the FastAPI Server using uvicorn For this you can directly run it from your main.py or main-tf-serving.py using pycharm run option (as shown in the video tutorial) OR you can run it from command prompt as shown below,&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uvicorn main-tf-serving:app --reload --host 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Your API is now running at &lt;code&gt;0.0.0.0:8000&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the Frontend&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get inside &lt;code&gt;api&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;.env.example&lt;/code&gt; as &lt;code&gt;.env&lt;/code&gt; and update &lt;code&gt;REACT_APP_API_URL&lt;/code&gt; to API URL if needed.&lt;/li&gt; &#xA; &lt;li&gt;Run the frontend&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the app&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get inside &lt;code&gt;mobile-app&lt;/code&gt; folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd mobile-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;.env.example&lt;/code&gt; as &lt;code&gt;.env&lt;/code&gt; and update &lt;code&gt;URL&lt;/code&gt; to API URL if needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app (android/iOS)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run android&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run ios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Creating public (&lt;a href=&#34;https://reactnative.dev/docs/signed-apk-android&#34;&gt;signed APK&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Creating the TF Lite Model&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run Jupyter Notebook in Browser.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter notebook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Open &lt;code&gt;training/tf-lite-converter.ipynb&lt;/code&gt; in Jupyter Notebook.&lt;/li&gt; &#xA; &lt;li&gt;In cell #2, update the path to dataset.&lt;/li&gt; &#xA; &lt;li&gt;Run all the Cells one by one.&lt;/li&gt; &#xA; &lt;li&gt;Model would be saved in &lt;code&gt;tf-lite-models&lt;/code&gt; folder.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Deploying the TF Lite on GCP&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://console.cloud.google.com/freetrial/signup/tos?_ga=2.25841725.1677013893.1627213171-706917375.1627193643&amp;amp;_gac=1.124122488.1627227734.Cj0KCQjwl_SHBhCQARIsAFIFRVVUZFV7wUg-DVxSlsnlIwSGWxib-owC-s9k6rjWVaF4y7kp1aUv5eQaAj2kEALw_wcB&#34;&gt;GCP account&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://cloud.google.com/appengine/docs/standard/nodejs/building-app/creating-project&#34;&gt;Project on GCP&lt;/a&gt; (Keep note of the project id).&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://console.cloud.google.com/storage/browser/&#34;&gt;GCP bucket&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Upload the potatoes.h5 model in the bucket in the path &lt;code&gt;models/potatos.h5&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Google Cloud SDK (&lt;a href=&#34;https://cloud.google.com/sdk/docs/quickstarts&#34;&gt;Setup instructions&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Authenticate with Google Cloud SDK.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud auth login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Run the deployment script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd gcp&#xA;gcloud functions deploy predict_lite --runtime python38 --trigger-http --memory 512 --project project_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Your model is now deployed.&lt;/li&gt; &#xA; &lt;li&gt;Use Postman to test the GCF using the &lt;a href=&#34;https://cloud.google.com/functions/docs/calling/http&#34;&gt;Trigger URL&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Inspiration: &lt;a href=&#34;https://cloud.google.com/blog/products/ai-machine-learning/how-to-serve-deep-learning-models-using-tensorflow-2-0-with-cloud-functions&#34;&gt;https://cloud.google.com/blog/products/ai-machine-learning/how-to-serve-deep-learning-models-using-tensorflow-2-0-with-cloud-functions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploying the TF Model (.h5) on GCP&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://console.cloud.google.com/freetrial/signup/tos?_ga=2.25841725.1677013893.1627213171-706917375.1627193643&amp;amp;_gac=1.124122488.1627227734.Cj0KCQjwl_SHBhCQARIsAFIFRVVUZFV7wUg-DVxSlsnlIwSGWxib-owC-s9k6rjWVaF4y7kp1aUv5eQaAj2kEALw_wcB&#34;&gt;GCP account&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://cloud.google.com/appengine/docs/standard/nodejs/building-app/creating-project&#34;&gt;Project on GCP&lt;/a&gt; (Keep note of the project id).&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://console.cloud.google.com/storage/browser/&#34;&gt;GCP bucket&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Upload the tf .h5 model generate in the bucket in the path &lt;code&gt;models/potato-model.h5&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install Google Cloud SDK (&lt;a href=&#34;https://cloud.google.com/sdk/docs/quickstarts&#34;&gt;Setup instructions&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Authenticate with Google Cloud SDK.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud auth login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Run the deployment script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd gcp&#xA;gcloud functions deploy predict --runtime python38 --trigger-http --memory 512 --project project_id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Your model is now deployed.&lt;/li&gt; &#xA; &lt;li&gt;Use Postman to test the GCF using the &lt;a href=&#34;https://cloud.google.com/functions/docs/calling/http&#34;&gt;Trigger URL&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Inspiration: &lt;a href=&#34;https://cloud.google.com/blog/products/ai-machine-learning/how-to-serve-deep-learning-models-using-tensorflow-2-0-with-cloud-functions&#34;&gt;https://cloud.google.com/blog/products/ai-machine-learning/how-to-serve-deep-learning-models-using-tensorflow-2-0-with-cloud-functions&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>