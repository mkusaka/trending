<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-07T01:45:58Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexeygrigorev/mlbookcamp-code</title>
    <updated>2022-06-07T01:45:58Z</updated>
    <id>tag:github.com,2022-06-07:/alexeygrigorev/mlbookcamp-code</id>
    <link href="https://github.com/alexeygrigorev/mlbookcamp-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The code from the Machine Learning Bookcamp book and a free course based on the book&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Machine Learning Bookcamp&lt;/h1&gt; &#xA;&lt;p&gt;The code from the Machine Learning Bookcamp book&lt;/p&gt; &#xA;&lt;p&gt;Useful links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com&#34;&gt;https://mlbookcamp.com&lt;/a&gt;: supplimentary materials&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datatalks.club&#34;&gt;https://datatalks.club&lt;/a&gt;: the place to talk about data (and the book: join the &lt;code&gt;#ml-bookcamp&lt;/code&gt; channel to ask questions about the book and report any problems)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Machine Learning Zoomcamp&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/course-zoomcamp&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/images/zoomcamp.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Machine Learning Zoomcamp is a course based on the book&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s online and free&lt;/li&gt; &#xA; &lt;li&gt;You can join at any moment&lt;/li&gt; &#xA; &lt;li&gt;More information in the &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/course-zoomcamp&#34;&gt;course-zoomcamp&lt;/a&gt; folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reading Plan&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/images/plan.png&#34;&gt; &#xA;&lt;h1&gt;Chapters&lt;/h1&gt; &#xA;&lt;h2&gt;Chapter 1: Introduction to Machine Learning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understanding machine learning and the problems it can solve&lt;/li&gt; &#xA; &lt;li&gt;CRISP-DM: Organizing a successful machine learning project&lt;/li&gt; &#xA; &lt;li&gt;Training and selecting machine learning models&lt;/li&gt; &#xA; &lt;li&gt;Performing model validation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No code&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 2: Machine Learning for Regression&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating a car-price prediction project with a linear regression model&lt;/li&gt; &#xA; &lt;li&gt;Doing an initial exploratory data analysis with Jupyter notebooks&lt;/li&gt; &#xA; &lt;li&gt;Setting up a validation framework&lt;/li&gt; &#xA; &lt;li&gt;Implementing the linear regression model from scratch&lt;/li&gt; &#xA; &lt;li&gt;Performing simple feature engineering for the model&lt;/li&gt; &#xA; &lt;li&gt;Keeping the model under control with regularization&lt;/li&gt; &#xA; &lt;li&gt;Using the model to predict car prices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-02-car-price/02-carprice.ipynb&#34;&gt;chapter-02-car-price/02-carprice.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 3: Machine Learning for Classification&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predicting customers who will churn with logistic regression&lt;/li&gt; &#xA; &lt;li&gt;Doing exploratory data analysis for identifying important features&lt;/li&gt; &#xA; &lt;li&gt;Encoding categorical variables to use them in machine learning models&lt;/li&gt; &#xA; &lt;li&gt;Using logistic regression for classification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-03-churn-prediction/03-churn.ipynb&#34;&gt;chapter-03-churn-prediction/03-churn.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 4: Evaluation Metrics for Classification&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accuracy as a way of evaluating binary classification models and its limitations&lt;/li&gt; &#xA; &lt;li&gt;Determining where our model makes mistakes using a confusion table&lt;/li&gt; &#xA; &lt;li&gt;Deriving other metrics like precision and recall from the confusion table&lt;/li&gt; &#xA; &lt;li&gt;Using ROC and AUC to further understand the performance of a binary classification model&lt;/li&gt; &#xA; &lt;li&gt;Cross-validating a model to make sure it behaves optimally&lt;/li&gt; &#xA; &lt;li&gt;Tuning the parameters of a model to achieve the best predictive performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-03-churn-prediction/04-metrics.ipynb&#34;&gt;chapter-03-churn-prediction/04-metrics.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 5: Deploying Machine Learning Models&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Saving models with Pickle&lt;/li&gt; &#xA; &lt;li&gt;Serving models with Flask&lt;/li&gt; &#xA; &lt;li&gt;Managing dependencies with Pipenv&lt;/li&gt; &#xA; &lt;li&gt;Making the service self-contained with Docker&lt;/li&gt; &#xA; &lt;li&gt;Deploying it to the cloud using AWS Elastic Beanstalk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-05-deployment&#34;&gt;chapter-05-deployment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 6: Decision Trees and Ensemble Learning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Predicting the risk of default with tree-based models&lt;/li&gt; &#xA; &lt;li&gt;Decision trees and the decision tree learning algorithm&lt;/li&gt; &#xA; &lt;li&gt;Random forest: putting multiple trees together into one model&lt;/li&gt; &#xA; &lt;li&gt;Gradient boosting as an alternative way of combining decision trees&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-06-trees/06-trees.ipynb&#34;&gt;chapter-06-trees/06-trees.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 7: Neural Networks and Deep Learning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Convolutional neural networks for image classification&lt;/li&gt; &#xA; &lt;li&gt;TensorFlow and Keras — frameworks for building neural networks&lt;/li&gt; &#xA; &lt;li&gt;Using pre-trained neural networks&lt;/li&gt; &#xA; &lt;li&gt;Internals of a convolutional neural network&lt;/li&gt; &#xA; &lt;li&gt;Training a model with transfer learning&lt;/li&gt; &#xA; &lt;li&gt;Data augmentations — the process of generating more training data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-07-neural-nets/07-neural-nets-train.ipynb&#34;&gt;chapter-07-neural-nets/07-neural-nets-train.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 8: Serverless Deep Learning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serving models with TensorFlow-Lite — a light-weight environment for applying TensorFlow models&lt;/li&gt; &#xA; &lt;li&gt;Deploying deep learning models with AWS Lambda&lt;/li&gt; &#xA; &lt;li&gt;Exposing the Lambda function as a web service via API Gateway&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-08-serverless&#34;&gt;chapter-08-serverless&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chapter 9: Kubernetes and Kubeflow&lt;/h2&gt; &#xA;&lt;p&gt;Kubernetes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Understanding different methods of deploying and serving models in the cloud.&lt;/li&gt; &#xA; &lt;li&gt;Serving Keras and TensorFlow models with TensorFlow-Serving&lt;/li&gt; &#xA; &lt;li&gt;Deploying TensorFlow-Serving to Kubernetes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-09-kubernetes&#34;&gt;chapter-09-kubernetes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kubeflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using Kubeflow and KFServing for simplifying the deployment process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-09-kubeflow&#34;&gt;chapter-09-kubeflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Articles from &lt;a href=&#34;https://mlbookcamp.com&#34;&gt;mlbookcamp.com&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com/article/eks&#34;&gt;Creating an EKS Cluster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com/article/kfserving-eks-install&#34;&gt;Creating a KFServing Cluster on EKS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com/article/kfserving-transformers&#34;&gt;KFServing Transformers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Appendices&lt;/h1&gt; &#xA;&lt;h2&gt;Appendix A: Setting up the Environment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing Anaconda, a Python distribution that includes most of the scientific libraries we need&lt;/li&gt; &#xA; &lt;li&gt;Running a Jupyter Notebook service from a remote machine&lt;/li&gt; &#xA; &lt;li&gt;Installing and configuring the Kaggle command line interface tool for accessing datasets from Kaggle&lt;/li&gt; &#xA; &lt;li&gt;Creating an EC2 machine on AWS using the web interface and the command-line interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: no code&lt;/p&gt; &#xA;&lt;p&gt;Articles from &lt;a href=&#34;https://mlbookcamp.com&#34;&gt;mlbookcamp.com&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com/article/aws&#34;&gt;Creating an AWS account&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com/article/aws-ec2&#34;&gt;Renting an EC2 instance&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appendix B: Introduction to Python&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic python syntax: variables and control-flow structures&lt;/li&gt; &#xA; &lt;li&gt;Collections: lists, tuples, sets, and dictionaries&lt;/li&gt; &#xA; &lt;li&gt;List comprehensions: a concise way of operating on collections&lt;/li&gt; &#xA; &lt;li&gt;Reusability: functions, classes and importing code&lt;/li&gt; &#xA; &lt;li&gt;Package management: using pip for installing libraries&lt;/li&gt; &#xA; &lt;li&gt;Running python scripts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/appendix-b-python.ipynb&#34;&gt;appendix-b-python.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Articles from &lt;a href=&#34;https://mlbookcamp.com&#34;&gt;mlbookcamp.com&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com/article/python&#34;&gt;Introduction to Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appendix C: Introduction to NumPy and Linear Algebra&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One-dimensional and two-dimensional NumPy arrays&lt;/li&gt; &#xA; &lt;li&gt;Generating NumPy arrays randomly&lt;/li&gt; &#xA; &lt;li&gt;Operations with NumPy arrays: element-wise operations, summarizing operations, sorting and filtering&lt;/li&gt; &#xA; &lt;li&gt;Multiplication in linear algebra: vector-vector, matrix-vector and matrix-matrix multiplications&lt;/li&gt; &#xA; &lt;li&gt;Finding the inverse of a matrix and solving the normal equation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/appendix-c-numpy.ipynb&#34;&gt;appendix-c-numpy.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Articles from &lt;a href=&#34;https://mlbookcamp.com&#34;&gt;mlbookcamp.com&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlbookcamp.com/article/numpy&#34;&gt;Introduction to NumPy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appendix C: Introduction to Pandas&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The main data structures in Pandas: DataFrame and Series&lt;/li&gt; &#xA; &lt;li&gt;Accessing rows and columns of a DataFrame&lt;/li&gt; &#xA; &lt;li&gt;Element-wise and summarizing operations&lt;/li&gt; &#xA; &lt;li&gt;Working with missing values&lt;/li&gt; &#xA; &lt;li&gt;Sorting and grouping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/appendix-d-pandas.ipynb&#34;&gt;appendix-d-pandas.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Appendix D: AWS SageMaker&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increasing the GPU quota limits&lt;/li&gt; &#xA; &lt;li&gt;Renting a Jupyter notebook with GPU in AWS SageMaker&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jaakkopasanen/AutoEq</title>
    <updated>2022-06-07T01:45:58Z</updated>
    <id>tag:github.com,2022-06-07:/jaakkopasanen/AutoEq</id>
    <link href="https://github.com/jaakkopasanen/AutoEq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatic headphone equalization from frequency responses&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AutoEQ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; If you are here just looking to make your headphones sound better, find your headphone model in &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/results&#34;&gt;results&lt;/a&gt; folder&#39;s recommended headphones list and follow instructions in &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#usage&#34;&gt;Usage&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;About This Project&lt;/h2&gt; &#xA;&lt;p&gt;AutoEQ is a project for equalizing headphone frequency responses automatically and it achieves this by parsing frequency response measurements and producing equalization settings which correct the headphone to a neutral sound. This project currently has over 2500 headphones covered in the &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/results&#34;&gt;results&lt;/a&gt; folder. See &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#usage&#34;&gt;Usage&lt;/a&gt; for instructions how to use the results with different equalizer softwares and &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#results&#34;&gt;Results&lt;/a&gt; section for details about parameters and how the results were obtained.&lt;/p&gt; &#xA;&lt;p&gt;AutoEQ is not just a collection of automatically produced headphone equalization settings but also a tool for equalizing headphones for yourself. &lt;code&gt;autoeq.py&lt;/code&gt; provides methods for reading data, equalizing it to a given target response and saving the results for usage with equalizers. It&#39;s possible to use different compensation (target) curves, apply tilt for making the headphones brighter/darker and adding a bass boost. It&#39;s even possible to make one headphone sound (roughly) like another headphone. For more info about equalizing see &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#equalizing&#34;&gt;Equalizing&lt;/a&gt;. If you&#39;re looking for something light weight to install as a dependency for your own project, you&#39;ll find &lt;a href=&#34;https://github.com/jaakkopasanen/autoeq-pkg&#34;&gt;autoeq-pkg&lt;/a&gt; much more suited for your needs.&lt;/p&gt; &#xA;&lt;p&gt;Third major contribution of this project is the measurement data and compensation curves all in a numerical format except for Crinacle&#39;s raw data. Everything is stored as CSV files so they are easy to process with any programming language or even Microsoft Excel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/results/oratory1990/harman_over-ear_2018/Sennheiser%20HD%20800/Sennheiser%20HD%20800.png&#34; alt=&#34;Sennheiser HD 800&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Sennheiser HD 800 equalization results plotted&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;AutoEQ produces settings for basically all types of equalizer apps.&lt;/p&gt; &#xA;&lt;h3&gt;Convolution Equalizers&lt;/h3&gt; &#xA;&lt;p&gt;Convolution equalizer is the most powerful type of equalizer software. These equalizers allow extremly precise control over the frequency response and the results are the same on all devices and platforms when using the same FIR filter. Convolution equalizer is the preferred way to use AutoEq results.&lt;/p&gt; &#xA;&lt;p&gt;AutoEq supports convolution equalizers with FIR filters as WAV files and with EqualizerAPO&#39;s GraphicEQ filter type. The default results contain FIR filters for both 44.1 kHz and 48 kHz sampling rates. Other sampling rates are supported but not given in the default results. EqualizerAPO&#39;s GraphicEQ works with any sampling rate.&lt;/p&gt; &#xA;&lt;p&gt;To use the FIR filters, download the appropriate WAV file and import it to the EQ software of your choice. Please keep in mind that not all EQ softwares support convolution. Some equalizers can load multiple FIR filters at the same time. Download both WAV files, create a Zip file containing both and load the Zip file to for example Roon.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#EqualizerAPO&#34;&gt;EqualizerApo&lt;/a&gt; for instructions on how to use the GraphicEQ.&lt;/p&gt; &#xA;&lt;h3&gt;Parametric Equalizers&lt;/h3&gt; &#xA;&lt;p&gt;Parametric equalizers have filters (bands) with user adjustable gain, center frequency and quality Q. Keep in mind that parametric eq accuracy depends on the number of filters available. Usually 10 filters produce very good results but as little as 5 can be good enough. Keep in mind that different parametric equalizers will produce different outcomes with the same parameter values. Parameters produced by AutoEq are equal with EqualizerAPO using 48 kHz sampling rate. When using other equalizers or sampling rates, it&#39;s always highly recommended to check that the frequency response of the equalizer matches the parametric eq curve in the graphs.&lt;/p&gt; &#xA;&lt;p&gt;All parametric equalizer except Peace require you to configure the filter parameters manually with the software user interface. Some parametric equalizer use filter width (band width) instead of Q. Filter width can be calculated as: &lt;code&gt;bw = Fc / Q&lt;/code&gt; where &lt;code&gt;bw&lt;/code&gt; is the band width in Herts, &lt;code&gt;Fc&lt;/code&gt; is center frequency and &lt;code&gt;Q&lt;/code&gt; is quality. Filter width in octaves can be calculated as: &lt;code&gt;N = ln(1 + 1/(2*Q^2) + sqrt(((2*Q^2 + 1) / Q^2 )^2 / 4 - 1)) / ln(2)&lt;/code&gt; where &lt;code&gt;ln&lt;/code&gt; is the natural logarithm. See &lt;a href=&#34;http://www.sengpielaudio.com/calculator-bandwidth.htm&#34;&gt;http://www.sengpielaudio.com/calculator-bandwidth.htm&lt;/a&gt; for an online calculator.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s very important to set preamp according to the value given in the result README.md document. Parametric eq filters will produce positive gains and to avoid clipping a preamp with negative gain is required.&lt;/p&gt; &#xA;&lt;p&gt;Parametric eq settings can be used with Peace or any other parametric eq which has at least 5 bands available. Even fewer bands is possible but pre-computed results require to use minimum five first of the filters. Parametric equalizer filter parameters look like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Fc&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Q&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Gain&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;28 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.46&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6.3 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;162 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.91&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-2.3 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2237 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.94&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-4.6 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6093 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2.26&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-4.7 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8251 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.71&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-2.9 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Fixed Band Equalizers&lt;/h3&gt; &#xA;&lt;p&gt;Fixed band eq is more commonly known as graphic equalizer but in order not to confuse with EqualizerAPO GraphicEQ it is called like that in this project. Fixed band equalizer is like parametric equalizer with several peaking filters but don&#39;t have adjustable frequency information, only gain. All other types are preferred over fixed band equalizers but on some devices these are the only available ones.&lt;/p&gt; &#xA;&lt;p&gt;Fixed band equalizers have trouble compensating for narrow notches and peaks that fall between two bands. Good example is &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/results/oratory1990/harman_over-ear_2018/Sennheiser%20HD%20800&#34;&gt;Sennheiser HD 800&lt;/a&gt; with it&#39;s 6 kHz peak that is right in between 4 kHz and 8 kHz bands of standard 10-band equalizer. When using 10-band equalizer check if the fixed band equalization curve is very different than the desired equalization curve at some frequency and adjust the nearby filters by ear for best results.&lt;/p&gt; &#xA;&lt;p&gt;Fixed band equalizer settings look like this:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Fc&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Q&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Gain&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;31 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6.1 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;62 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.0 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;125 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-1.1 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;250 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-2.2 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;500 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-0.9 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1000 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.1 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.6 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4000 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-1.0 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8000 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-4.1 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;16000 Hz&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1.41&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-7.5 dB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;has &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#equalizerapo&#34;&gt;EqualizerAPO&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#peace&#34;&gt;Peace&lt;/a&gt; and many media players with parametric equalizers such as &lt;a href=&#34;https://www.microsoft.com/en-us/p/neutron-music-player/9nblggh4vp2h?activetab=pivot:overviewtab&#34;&gt;Neutron&lt;/a&gt;, &lt;a href=&#34;https://roonlabs.com/&#34;&gt;Roon&lt;/a&gt; and &lt;a href=&#34;https://www.foobar2000.org/&#34;&gt;Foobar2000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;EqualizerAPO&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s possible to use plain &lt;a href=&#34;https://sourceforge.net/projects/equalizerapo/&#34;&gt;EqualizerAPO&lt;/a&gt; and edit configuration file in &lt;code&gt;C:\Program Files\EqualizerAPO\config\config.txt&lt;/code&gt;. Replace contents of the file with the GraphicEQ.txt file found in results. Preamp is not needed because it is incorporated into the GraphicEQ line. Using &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/results/oratory1990/harman_over-ear_2018/Sennheiser%20HD%20650&#34;&gt;Sennheiser HD 650&lt;/a&gt; would make config file look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GraphicEQ: 20 -0.5; 21 -0.5; 22 -0.5; 23 -0.5; 24 -0.5; 26 -0.5; 27 -0.5; 29 -0.5; 30 -0.5; 32 -0.9; 34 -1.2; 36 -1.5; 38 -1.8; 40 -2.1; 43 -2.4; 45 -2.4; 48 -2.5; 50 -2.6; 53 -3.0; 56 -3.2; 59 -3.3; 63 -3.6; 66 -4.0; 70 -4.5; 74 -5.0; 78 -5.5; 83 -5.9; 87 -6.3; 92 -6.7; 97 -7.0; 103 -7.3; 109 -7.6; 115 -7.8; 121 -8.0; 128 -8.1; 136 -8.4; 143 -8.6; 151 -8.7; 160 -8.8; 169 -8.8; 178 -8.9; 188 -8.9; 199 -9.0; 210 -9.0; 222 -9.0; 235 -8.9; 248 -8.8; 262 -8.6; 277 -8.5; 292 -8.4; 309 -8.3; 326 -8.2; 345 -8.1; 364 -7.9; 385 -7.8; 406 -7.7; 429 -7.6; 453 -7.6; 479 -7.5; 506 -7.4; 534 -7.2; 565 -7.1; 596 -7.0; 630 -7.0; 665 -7.0; 703 -7.0; 743 -7.0; 784 -7.1; 829 -7.1; 875 -7.1; 924 -7.0; 977 -7.1; 1032 -7.2; 1090 -7.3; 1151 -7.2; 1216 -7.0; 1284 -6.9; 1357 -6.7; 1433 -6.4; 1514 -6.2; 1599 -6.1; 1689 -5.9; 1784 -5.6; 1885 -5.4; 1991 -5.2; 2103 -5.1; 2221 -5.2; 2347 -5.5; 2479 -5.8; 2618 -6.2; 2766 -6.6; 2921 -6.9; 3086 -7.0; 3260 -6.8; 3443 -6.2; 3637 -5.6; 3842 -5.1; 4058 -4.6; 4287 -4.2; 4528 -4.2; 4783 -4.8; 5052 -5.2; 5337 -4.8; 5637 -4.3; 5955 -4.7; 6290 -4.9; 6644 -4.7; 7018 -4.8; 7414 -5.7; 7831 -6.3; 8272 -6.5; 8738 -6.5; 9230 -6.5; 9749 -6.5; 10298 -6.5; 10878 -6.5; 11490 -6.5; 12137 -6.5; 12821 -7.8; 13543 -9.9; 14305 -9.7; 15110 -9.0; 15961 -11.0; 16860 -13.5; 17809 -14.5; 18812 -15.2; 19871 -15.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;EqualizerAPO has a graphical user interface for adjusting configurations. Launch the editor from &lt;code&gt;C:\Program Files\EqualizerAPO\Editor.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lHhRBuA.png&#34; alt=&#34;equalizerapo-editor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;EqualizerAPO Editor GUI&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Peace&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourceforge.net/projects/peace-equalizer-apo-extension/&#34;&gt;Peace&lt;/a&gt; is a GUI for manipulating parametric eq filters with EqualizerAPO. Peace also has visualization for the end result equalization frequency response, profile manager for multiple different eq settings and a switch for disabling everything among other features. Load eq settings into Peace by clicking &lt;em&gt;Import&lt;/em&gt; button and select the &lt;em&gt;&#xA;  &lt;model&gt;&#xA;    ParametricEQ.txt&#xA;  &lt;/model&gt;&lt;/em&gt; file. Set the preamp to value mentioned in the results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/e0POEbF.png&#34; alt=&#34;peace&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Peace with full GUI for EqualizerAPO&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;Android has several different equalizer options but not too many powerful apps which work with all apps. Wavelet is the best option for newer Androids (version 9 and up) but older devices have a built-in fixed band equalizer which works system wide but the center frequencies and Q values vary so might need to &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#equalizing&#34;&gt;produce your own results&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Wavelet&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.pittvandewitt.wavelet&#34;&gt;Wavelet&lt;/a&gt; is an Android app which comes with all the AutoEq eq profiles built in. The app works with all music apps so is closest to system-wide equalizer one can have on Android without rooting. The equalizer built into this app is very powerful and can represent the AutoEq profiles very accurately. There is also an option to tune the sound with graphic equalizer. Wavelet has the best Bluetooth device compatibility of all the tested eq apps on Android.&lt;/p&gt; &#xA;&lt;p&gt;The main functionalities of Wavelet are free (including AutoEq profiles and graphic eq) but some extra features can be unlocked with an in-app purchase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UGiBwFX.png&#34; alt=&#34;Wavelet&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Neutron&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.neutroncode.mp&#34;&gt;Neutron&lt;/a&gt; is a music player with parametric equalizer and comes with all of the AutoEq profiles built in but is not free.&lt;/p&gt; &#xA;&lt;h4&gt;USB Audio Player PRO&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.extreamsd.usbaudioplayerpro&#34;&gt;USB Audio Player PRO&lt;/a&gt; is an Android app with improved USB audio drivers for usage with USB DACs. USB Audio Player PRO is not system-wide but works with local files and many streaming services though not with Spotify. USB Audio Player has Toneboosters Morphit plugin which has parametric equalizer. This app and the plugin are not free.&lt;/p&gt; &#xA;&lt;h4&gt;Music EQ Equalizer&lt;/h4&gt; &#xA;&lt;p&gt;The best app for system wide equalization on older Android phones (without rooting) is &lt;a href=&#34;https://play.google.com/store/apps/details?id=mediam.music.equalizer&#34;&gt;Music Equalizer EQ&lt;/a&gt; which is a 10-band standard equalizer. Gains for each band can be adjusted with only 1 dB resolution but this isn&#39;t a problem because the average error is then only 0.25 dB, hardly noticeable. Bigger problem is the potential narrow peaks and notches between the bands&#39; center frequencies since there isn&#39;t really anything that can be done for those. See notes about &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#fixed-band-equalizers&#34;&gt;fixed band equalizers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The app starts in the presets view so you need to click the left arrow in the top left corner to get to the manual view. Here you can adjust the bands. Set each band level to the closest value to what the equalization settings ask. Pre-computed results only support standard 10-band equalizers which have band center frequencies at 31, 63, 125, 250, 500, 1000, 2000, 4000, 8000 and 16000 Hz. Q values are not adjustable so you don&#39;t have to worry about those even though they are given in the result settings.&lt;/p&gt; &#xA;&lt;h4&gt;Viper4Android&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forum.xda-developers.com/showthread.php?t=2191223&#34;&gt;Viper4Android&lt;/a&gt; is a system-wide convolution based equalizer (and much more) on Android but it requires rooting of the device. Viper4Android is supported with impulse response (WAV) files. For rooted users this is the best option.&lt;/p&gt; &#xA;&lt;h4&gt;JamesDSP&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://forum.xda-developers.com/android/apps-games/app-reformed-dsp-manager-t3607970&#34;&gt;JamesDSP&lt;/a&gt; is an alternative to Viper4Android. It provides a system wide solution, has a convolution engine but requires rooting.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;PulseEffects / EasyEffects&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wwmm/easyeffects&#34;&gt;PulseEffects / EasyEffects&lt;/a&gt; is a Linux module with wide variety of signal processing tools including convolution and parametric equalizers.&lt;/p&gt; &#xA;&lt;p&gt;From version 4.7.2 onwards PulseEffects added support for convolution FIR filters. This is the recommended way to apply AutoEq presets. Navigate to the plugins tab and add the convolver plugin, then click the waveform button above the stereo width controls (or just the &#39;Impulses&#39; button as of 6.1.x), click &#34;Import impulse&#34; and select the AutoEq generated WAV file. You may also need to manually click &#39;load&#39; in the Impulses menu for the filter to be fully loaded. PulseEffects&#39; convolver requires you to set the input gain to prevent clipping. The gain required by parametric eq should be sufficient, maybe 0.5 dB of negative gain more.&lt;/p&gt; &#xA;&lt;p&gt;To use parametric eq, from version 6.0.0 onwards, first select the &lt;code&gt;plugins&lt;/code&gt; tab at the bottom of the screen, add the equalizer plugin, and load APO settings by clicking &#34;Load APO Preset&#34; and selecting the ParametricEQ.txt file. For EasyEffects &amp;lt;= 6.1.3, Pre-amp can be adjusted with the input slider. Later versions support reading this from ParametricEQ.txt.&lt;/p&gt; &#xA;&lt;p&gt;From version 5.0.0 onwards, PulseEffects was renamed to EasyEffects and uses PipeWire instead of PulseAudio as backend. Load eq settings by clicking the top center cog &amp;amp; clicking &lt;em&gt;Import ACO Presets&lt;/em&gt; button and select the ParametricEQ.txt file. Pre-amp can be adjusted with the input slider.&lt;/p&gt; &#xA;&lt;p&gt;For versions prior to v4.8.0, adjust filter parameters by clicking the cog button on each filter and set type to &#34;Bell&#34;, mode to &#34;APO&#34; and adjust the gain with the slider. Number of filters can be changed by clicking the screwdriver and wrench button.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/32952512/112381638-6cd3b280-8d08-11eb-844a-b83600c6c02a.png&#34; alt=&#34;pulseeffects&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;OSX / MacOS&lt;/h3&gt; &#xA;&lt;p&gt;System wide parametric EQ solutions on OSX typically rely on separate plugin hosting software and the actual plugin which does the actual equalization.&lt;/p&gt; &#xA;&lt;p&gt;Pardon the lack of documentation for these. I have not tested any of the methods myself but they have been suggested by helpful AutoEQ users.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rogueamoeba.com/soundsource/&#34;&gt;SoundSource&lt;/a&gt; is the easiest way to use AutoEq on Mac since it comes with all of the profiles built in. The software is however not free.&lt;/p&gt; &#xA;&lt;p&gt;Audio plugin hosts include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple&#39;s own &lt;a href=&#34;https://www.apple.com/apple-music/apple-digital-masters/&#34;&gt;AU Lab&lt;/a&gt; hosts AU plugins and can be used as a system-wide audio output via &lt;a href=&#34;https://github.com/ExistentialAudio/BlackHole&#34;&gt;BlackHole&lt;/a&gt; or &lt;a href=&#34;https://github.com/mattingalls/Soundflower&#34;&gt;Soundflower&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.menubus.audio/versions&#34;&gt;MenuBus&lt;/a&gt; has a free version but is no longer actively developed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ju-x.com/hostingau.html&#34;&gt;Hosting AU&lt;/a&gt; with &lt;a href=&#34;https://github.com/ExistentialAudio/BlackHole&#34;&gt;BlackHole&lt;/a&gt; or &lt;a href=&#34;https://github.com/mattingalls/Soundflower&#34;&gt;Soundflower&lt;/a&gt; can be used as a system wide AU plugin host.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;EQ plugins include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.voxengo.com/product/primeeq/&#34;&gt;Voxengo PrimeEQ&lt;/a&gt; is a parametric EQ plugin but is not free.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fabfilter.com/products/pro-q-3-equalizer-plug-in&#34;&gt;Fabfilter Pro Q3&lt;/a&gt; is another parametric EQ plugin, more expensive than Voxengo but might be easier to install and use. Note: Pro Q3 uses a different system and all Q values need to be multiplied by 1.41!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://audio.lernvall.com/&#34;&gt;LAConvolver plugin&lt;/a&gt; is a free convolver EQ which works with impulse response WAV files.&lt;/li&gt; &#xA; &lt;li&gt;AUNBandEq comes built in with Mac OSX. Works at least with HostingAU + BlackHole&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38220377/71527191-9706ac80-28da-11ea-8f70-88caf57c4821.png&#34; alt=&#34;hostingau+blackhole&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tutorials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.superbestaudiofriends.org/index.php?threads/systemwide-eq-on-mac.7435/&#34;&gt;Apple AU Lab + Soundflower + AUNBandEQ Tutorial&lt;/a&gt; &lt;a href=&#34;https://discussions.apple.com/thread/8552731&#34;&gt;AU Lab Permission Issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;eqMac&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://eqmac.app&#34;&gt;eqMac&lt;/a&gt; is a Free &amp;amp; &lt;a href=&#34;https://github.com/bitgapp/eqmac&#34;&gt;Open Source&lt;/a&gt; System Wide equalizer for macOS. eqMac has a Free 10 Band EQ and an Unlimited Band EQ (paid) with built-in AutoEQ Integration! (Expert EQ)&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;512&#34; src=&#34;https://raw.githubusercontent.com/bitgapp/eqMac/master/assets/screenshots/autoeq-promo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;iOS unfortunately doesn&#39;t allow system-wide equalizers, so the only options are either music players with built-in equalizer or &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#Hardware&#34;&gt;hardware solutions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Neutron&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/app/neutron-music-player/id766858884&#34;&gt;Neutron&lt;/a&gt; is a music player with parametric equalizer and comes with all of the AutoEq profiles built in but is not free.&lt;/p&gt; &#xA;&lt;h4&gt;EQE&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rweichler/EQE&#34;&gt;EQE&lt;/a&gt; is a system wide parametric equalizer on iOS but requires jailbreaking. Here are instructions on how to set it up: &lt;a href=&#34;https://www.reddit.com/r/headphones/comments/dqbt81/psa_if_you_have_a_jailbroken_iphone_you_can/&#34;&gt;https://www.reddit.com/r/headphones/comments/dqbt81/psa_if_you_have_a_jailbroken_iphone_you_can/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;p&gt;Some devices have built-in equalizers and since they do the processing in the device, they work with any source which can connect to the device.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.qudelix.com/products/qudelix-5k-dac-amp&#34;&gt;Qudelix 5K&lt;/a&gt; is a portable DAC and amplifier with wired and Bluetooth connectivity and 10 band parametric equalizer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.radsone.com/earstudio&#34;&gt;Radsone EasStudio ES100&lt;/a&gt; is a Bluetooth DAC and amp with built-in 10 band equalizer. Since this is a hardware solution it will work with practically any source.&lt;/p&gt; &#xA;&lt;h2&gt;Equalizing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;autoeq.py&lt;/code&gt; is the tool used to produce the equalization results from measurement data. There is no fancy graphical user interface but instead it is used from command line.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and install Git: &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;. When installing Git on Windows, use Windows SSL verification instead of Open SSL or you might run into problems when installing project dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Download and install 64-bit &lt;strong&gt;&lt;a href=&#34;https://www.python.org/getit/&#34;&gt;Python 3.8&lt;/a&gt;&lt;/strong&gt;. Make sure to check &lt;em&gt;Add Python 3.8 to PATH&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You may need to install &lt;a href=&#34;http://www.mega-nerd.com/libsndfile/&#34;&gt;libsndfile&lt;/a&gt; if you&#39;re having problems with &lt;code&gt;soundfile&lt;/code&gt; when installing &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On Linux you may need to install Python dev packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install python3-dev python3-pip python3-venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Linux you may need to install &lt;a href=&#34;https://pip.pypa.io/en/stable/installing/&#34;&gt;pip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Windows you may need to install &lt;a href=&#34;https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads&#34;&gt;Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017, and 2019&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal / command prompt. On Windows, search &lt;code&gt;cmd&lt;/code&gt; in the start menu.&lt;/li&gt; &#xA; &lt;li&gt;Clone AutoEq&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jaakkopasanen/AutoEq.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to AutoEq location&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd AutoEq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check Python version. You should see Python 3.8.x printed out. If you see for example 3.9.x, you need to install Python &lt;strong&gt;3.8&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a python virtual environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Activate virtualenv&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On Windows&#xA;venv\Scripts\activate.bat&#xA;# On Linux and Mac&#xA;. venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update pip&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -U pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install required packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -U -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify installation. If everything went well, you&#39;ll see the list of command line parameters AutoEq accepts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When coming back at a later time you&#39;ll only need to activate virtual environment again&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# On Windows&#xA;cd AutoEq&#xA;venv\Scripts\activate.bat&#xA;# On Linux and Mac&#xA;cd AutoEq&#xA;. venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more about virtual environments, read &lt;a href=&#34;https://docs.python.org/3.8/library/venv.html&#34;&gt;Python&#39; venv documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Updating&lt;/h4&gt; &#xA;&lt;p&gt;AutoEq is in active development and gets new measurements, results and features all the time. You can get the latest version from git&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dependencies may change from time to time, you can update to the latest with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -U -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command Line Arguments&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: autoeq.py [-h] --input_dir INPUT_DIR [--output_dir OUTPUT_DIR] [--standardize_input] [--new_only] [--compensation COMPENSATION] [--equalize] [--parametric_eq] [--fixed_band_eq] [--rockbox] [--fc FC] [--q Q]&#xA;                 [--ten_band_eq] [--max_filters MAX_FILTERS] [--convolution_eq] [--fs FS] [--bit_depth BIT_DEPTH] [--phase PHASE] [--f_res F_RES] [--bass_boost BASS_BOOST] [--iem_bass_boost IEM_BASS_BOOST] [--tilt TILT]&#xA;                 [--sound_signature SOUND_SIGNATURE] [--max_gain MAX_GAIN] [--treble_f_lower TREBLE_F_LOWER] [--treble_f_upper TREBLE_F_UPPER] [--treble_gain_k TREBLE_GAIN_K] [--show_plot]&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  --input_dir INPUT_DIR&#xA;                        Path to input data directory. Will look for CSV files in the data directory and recursively in sub-directories.&#xA;  --output_dir OUTPUT_DIR&#xA;                        Path to results directory. Will keep the same relative paths for files found in input_dir.&#xA;  --standardize_input   Overwrite input data in standardized sampling and bias?&#xA;  --new_only            Only process input files which don&#39;t have results in output directory.&#xA;  --compensation COMPENSATION&#xA;                        File path to CSV containing compensation (target) curve. Compensation is necessary when equalizing because all input data is raw microphone data. See &#34;compensation&#34;, &#34;innerfidelity/resources&#34; and&#xA;                        &#34;headphonecom/resources&#34;.&#xA;  --equalize            Will run equalization if this parameter exists, no value needed.&#xA;  --parametric_eq       Will produce parametric eq settings if this parameter exists, no value needed.&#xA;  --fixed_band_eq       Will produce fixed band eq settings if this parameter exists, no value needed.&#xA;  --rockbox             Will produce a Rockbox .cfg file with 10 band eq settings if this parameter exists,no value needed.&#xA;  --fc FC               Comma separated list of center frequencies for fixed band eq.&#xA;  --q Q                 Comma separated list of Q values for fixed band eq. If only one value is passed it is used for all bands. Q value can be calculated from bandwidth in N octaves by Q = 2^(N/2)/(2^N-1).&#xA;  --ten_band_eq         Shortcut parameter for activating standard ten band eq optimization.&#xA;  --max_filters MAX_FILTERS&#xA;                        Maximum number of filters for parametric EQ. Multiple cumulative optimization runs can be done by giving multiple filter counts separated by &#34;+&#34;. &#34;5+5&#34; would create 10 filters where the first 5 are&#xA;                        usable independently from the rest 5 and the last 5 can only be used with the first 5. This allows to have muliple configurations for equalizers with different number of bands available. Not limited&#xA;                        by default.&#xA;  --convolution_eq      Will produce impulse response for convolution equalizers if this parameter exists, no value needed.&#xA;  --fs FS               Sampling frequency in Hertz for impulse response and parametric eq filters. Single value or multiple values separated by commas eg 44100,48000. When multiple values are given only the first one will&#xA;                        be used for parametric eq. Defaults to 44100.&#xA;  --bit_depth BIT_DEPTH&#xA;                        Number of bits for every sample in impulse response. Defaults to 16.&#xA;  --phase PHASE         Impulse response phase characteristic. &#34;minimum&#34;, &#34;linear&#34; or &#34;both&#34;. Defaults to &#34;minimum&#34;&#xA;  --f_res F_RES         Frequency resolution for impulse responses. If this is 20 then impulse response frequency domain will be sampled every 20 Hz. Filter length for impulse responses will be fs/f_res. Defaults to 10.&#xA;  --bass_boost BASS_BOOST&#xA;                        Bass boost shelf. Sub-bass frequencies will be boosted by this amount. Can be either a single value for a gain in dB or a comma separated list of three values for parameters of a low shelf filter,&#xA;                        where the first is gain in dB, second is center frequency (Fc) in Hz and the last is quality (Q). When only a single value (gain) is given, default values for Fc and Q are used which are 105.0 Hz and&#xA;                        0.71, respectively. For example &#34;--bass_boost=6&#34; or &#34;--bass_boost=9.5,150,0.69&#34;.&#xA;  --iem_bass_boost IEM_BASS_BOOST&#xA;                        iem_bass_boost argument has been removed, use &#34;--bass_boost&#34; instead!&#xA;  --tilt TILT           Target tilt in dB/octave. Positive value (upwards slope) will result in brighter frequency response and negative value (downwards slope) will result in darker frequency response. 1 dB/octave will&#xA;                        produce nearly 10 dB difference in desired value between 20 Hz and 20 kHz. Tilt is applied with bass boost and both will affect the bass gain.&#xA;  --sound_signature SOUND_SIGNATURE&#xA;                        File path to a sound signature CSV file. Sound signature is added to the compensation curve. Error data will be used as the sound signature target if the CSV file contains an error column and&#xA;                        otherwise the raw column will be used. This means there are two different options for using sound signature: 1st is pointing it to a result CSV file of a previous run and the 2nd is to create a CSV&#xA;                        file with just frequency and raw columns by hand (or other means). The Sound signature graph will be interpolated so any number of point at any frequencies will do, making it easy to create simple&#xA;                        signatures with as little as two or three points.&#xA;  --max_gain MAX_GAIN   Maximum positive gain in equalization. Higher max gain allows to equalize deeper dips in frequency response but will limit output volume if no analog gain is available because positive gain requires&#xA;                        negative digital preamp equal to maximum positive gain. Defaults to 6.0.&#xA;  --treble_f_lower TREBLE_F_LOWER&#xA;                        Lower bound for transition region between normal and treble frequencies. Treble frequencies can have different max gain and gain K. Defaults to 6000.0.&#xA;  --treble_f_upper TREBLE_F_UPPER&#xA;                        Upper bound for transition region between normal and treble frequencies. Treble frequencies can have different max gain and gain K. Defaults to 8000.0.&#xA;  --treble_gain_k TREBLE_GAIN_K&#xA;                        Coefficient for treble gain, affects both positive and negative gain. Useful for disabling or reducing equalization power in treble region. Defaults to 1.0.&#xA;  --show_plot           Plot will be shown if this parameter exists, no value needed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Reproducing Results&lt;/h4&gt; &#xA;&lt;p&gt;Reproducing pre-computed results for oratory1990 measured on-ear headphones:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/oratory1990/data/onear&#34; --output_dir=&#34;my_results/oratory1990/harman_over-ear_2018&#34; --compensation=&#34;compensation/harman_over-ear_2018_wo_bass.csv&#34; --equalize --parametric_eq --max_filters=5+5 --ten_band_eq --bass_boost=4.0 --convolution_eq --fs=44100,48000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reproducing pre-computed results for Rtings measured IEMs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/rtings/data/inear&#34; --output_dir=&#34;my_results/rtings/avg&#34; --compensation=&#34;measurements/rtings/resources/rtings_compensation_avg.csv&#34; --equalize --parametric_eq --max_filters=5+5 --ten_band_eq --bass_boost=6.0 --convolution_eq --fs=44100,48000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All parameters used for pre-computed results can be found in the &lt;code&gt;results/update.py&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h4&gt;Equalizing Individual Headphones&lt;/h4&gt; &#xA;&lt;p&gt;Equalizing Sennheiser HD 650 and saving results to &lt;code&gt;my_results/HD650&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/innerfidelity/data/onear/Sennheiser HD 650&#34; --output_dir=&#34;my_results/HD650&#34; --compensation=&#34;measurements/innerfidelity/resources/innerfidelity_harman_over-ear_2018_wo_bass.csv&#34; --equalize --bass_boost=4 --show_plot --convolution_eq --fs=44100,48000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fixed Band Equalizers&lt;/h4&gt; &#xA;&lt;p&gt;Filter parameters for fixed band equalizers can be adjusted with &lt;code&gt;--q&lt;/code&gt; and &lt;code&gt;--fc&lt;/code&gt; parameters. Producing fixed band equalizer settings for Sony WH-1000XM3 app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/oratory1990/data/onear/Sony WH-1000XM3&#34; --output_dir=&#34;my_results/Sony WH-1000XM3 (app)&#34; --compensation=&#34;compensation/harman_over-ear_2018_wo_bass.csv&#34; --equalize --bass_boost=4.0 --fixed_band_eq --fc=400,1000,2500,6300,16000 --q=1.05&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Sound Signatures&lt;/h4&gt; &#xA;&lt;p&gt;AutoEQ provides a way to play around with different sound signatures easily. The use-cases include making headphones deviate from the neutral target or making one headphone sound like another.&lt;/p&gt; &#xA;&lt;p&gt;Equalizing Sennheiser HD 800 to sound like Sennheiser HD 650 using pre-computed results. Both have been measured by oratory1990 so we&#39;ll use those measurements. Pre-computed results include 4dB of bass boost for over-ear headphones and therefore we need to apply a bass boost of 4dB here as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/oratory1990/data/onear/Sennheiser HD 800&#34; --output_dir=&#34;my_results/Sennheiser HD 800 (HD 650)&#34; --compensation=&#34;compensation/harman_over-ear_2018_wo_bass.csv&#34; --sound_signature=&#34;results/oratory1990/harman_over-ear_2018/Sennheiser HD 650/Sennheiser HD 650.csv&#34; --equalize --parametric_eq --max_filters=5+5 --ten_band_eq --bass_boost=4 --convolution_eq --fs=44100,48000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Equalizing Massdrop x Sennheiser HD 800 to sound like AKG K701. There is no K701 measurement made by oratory1990 so we&#39;ll use Innerfidelity&#39;s measurement for the sound signature. The list of recommended results always points to best measurement so you can check there which one to use (measurement system can be found in the URL).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/oratory1990/data/onear/Sennheiser HD 800&#34; --output_dir=&#34;my_results/Sennheiser HD 800 (K701)&#34; --compensation=&#34;compensation/harman_over-ear_2018_wo_bass.csv&#34; --sound_signature=&#34;results/innerfidelity/innerfidelity_harman_over-ear_2018/AKG K701/AKG K701.csv&#34; --equalize --parametric_eq --max_filters=5+5 --ten_band_eq --bass_boost=4 --convolution_eq --fs=44100,48000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Equalizing HiFiMAN HE400S to sound like Massdrop x Meze 99 Noir. HE400S is measured only by Innerfidelity so we&#39;ll point compensation file pointing to Innerfidelity&#39;s calibrated Harman target. Meze 99 Noir has massive natural bass boost and to capture that we need to relax max gain to +12dB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/innerfidelity/data/onear/HiFiMAN HE400S&#34; --output_dir=&#34;my_results/HE400S (99 Noir)&#34; --compensation=&#34;measurements/innerfidelity/resources/innerfidelity_harman_over-ear_2018_wo_bass.csv&#34; --sound_signature=&#34;results/oratory1990/harman_over-ear_2018/Meze 99 Noir/Meze 99 Noir.csv&#34; --equalize --parametric_eq --max_filters=5+5 --ten_band_eq --bass_boost=4 --max_gain=8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Applying V-shaped sound signature to Audeze Mobius. First step is to create the sound signature file. Save this to &lt;code&gt;my_data/v.csv&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;frequency,raw&#xA;20,4.0&#xA;1000,-4.0&#xA;10000,4.0&#xA;20000,0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use it by providing the path to &lt;code&gt;--sound_signature&lt;/code&gt; parameter. We&#39;ll set bass boost to 0dB because the sound signature already has a significant bass boost. Of course it&#39;s possible to add bass boost on top of the sound signature file if you want even more bass.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python autoeq.py --input_dir=&#34;measurements/rtings/data/onear/Audeze Mobius&#34; --output_dir=&#34;my_results/Audeze Mobius (V-signature)&#34; --compensation=&#34;measurements/rtings/resources/rtings_compensation_avg.csv&#34; --sound_signature=&#34;my_data/v.csv&#34; --equalize --parametric_eq --max_filters=5+5 --ten_band_eq --bass_boost=4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;The main principle used by AutoEQ for producing the equalization function is to invert the error curve. Error is the difference between raw microphone data and the compensation (target) curve. If headphone&#39;s frequency response is 4 dB below the target at 20 Hz equalization function will have +4 dB boost at 20 Hz. In reality simply inverting the error is not sufficient since measurements and equalization have several problems that need to be addressed, see &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/#technical-challenges&#34;&gt;Technical Challenges&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Results provided in this project currently have all the headphone measurements from&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crinacle.com/&#34;&gt;Crinacle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://graphs.headphone.com/&#34;&gt;Headphone.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.innerfidelity.com/headphone-measurements&#34;&gt;Innerfidelity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/oratory1990&#34;&gt;oratory1990&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reference-audio-analyzer.pro/en/catalog-reports.php?sp_1=1&amp;amp;tp=1&#34;&gt;Reference Audio Analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rtings.com/headphones&#34;&gt;Rtings&lt;/a&gt; with the exception of Reference Audio Analyzer measurements done on the SF1 system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Results are organized by &lt;code&gt;source/target/headphone&lt;/code&gt; so a Sennheiser HD 650 measured by Innerfidelity and tuned to a calibrated Harman target would be found in &lt;a href=&#34;https://raw.githubusercontent.com/jaakkopasanen/AutoEq/master/results/innerfidelity/innerfidelity_harman_over-ear_2018/Sennheiser%20HD%20650&#34;&gt;innerfidelity/innerfidelity_harman_over-ear_2018/Sennheiser HD 650&lt;/a&gt;. Multiple measurements of the same headphone by the same measurement entity are averaged. All different measurements for averaging have been renamed with snXXX (serial number) or sample X in the end of the name to distinguish from the averaged data which has no suffixes in the name.&lt;/p&gt; &#xA;&lt;p&gt;oratory1990 measurements have been done on Gras 43AG and 43AC couplers, the same which were used to develop Harman target responses by Olive et al. and therefore use Harman target responses for the equalization targets. These results are recommended over all other measurements because of this reason. Harman target data is in the &lt;code&gt;compensation&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Crinacle&#39;s in-ear measurements have been performed with IEC 60318-4 coupler and are therefore compatible with Harman in-ear targets. This fact also earns Crinacle&#39;s measurements second highest ranking recommendation after oratory1990. Crinacle&#39;s over-ear measurements use the same ear simulator attached to a MiniDSP ears pinna. The measurements done on this system are not as accurate as oratory1990&#39;s but because of the high quality ear simulator, these are a bit better than rest.&lt;/p&gt; &#xA;&lt;p&gt;Innerfidelity, Rtings and Headphone.com measurements have been performed on Head Acoustics HMSII.3 measurement system. This system is not an industry standard anymore because of the rigid pinnae. The Headphone.com measurements are the old ones which are no longer available. These are not to be consfused with the new measurements Resolve is producing using GRAS system.&lt;/p&gt; &#xA;&lt;p&gt;Reference Audio Analyzer have &lt;a href=&#34;https://reference-audio-analyzer.pro/en/stands.php&#34;&gt;three different measurement systems&lt;/a&gt; none of which seem to represent human hearing particularly well. The most recent HDM-X system is close to the Head Acoustics HMSII.3 systems but seems to suffer a bit more in the bass range. HDM1 is clearly worse than other systems and the measurements done on the SF1 system are not included at all because that is a flat plate coupler. IEM measurements are done with what looks like a tubing coupler and these don&#39;t look very accurate. Reference Audio Analyzer measurements and results are a last resort.&lt;/p&gt; &#xA;&lt;p&gt;All of the results use frequency response targets that were specifically developed for this project except oratory1990 and Crinacle&#39;s IEM measurements which use standard Harman targets. The target curves were developed by calibrating measurements against reference measurements by oratory1990 and Crinacle (IEMs) and modifying the Harman 2018 over-ear and 2019 in-ear targets with the calibration data.&lt;/p&gt; &#xA;&lt;p&gt;None of these targets have bass boost seen in Harman target responses and therefore a +4dB boost was applied for all over-ear headphones, +6dB for in-ear headphones and no boost for earbuds. Harman targets actually ask for about +6dB for over-ears and +9dB for in-ears but since some headphones cannot achieve this with positive gain limited to +6dB, a smaller boost was selected. Above 6 to 12 kHz data is filtered more heavily to avoid equalizing the narrow dips and notches that depend heavily on the listener&#39;s own ears.&lt;/p&gt; &#xA;&lt;h3&gt;oratory1990 IEM Target&lt;/h3&gt; &#xA;&lt;p&gt;In-ear results with oratory1990 target (formerly &#34;Usound&#34; target) are not longer given because the new 2019 Harman in-ear fixes the +10 kHz problems of the 2017 target. Also it is easy to transform results created for Harman 2019 to oratory1990 target without running the processing yourself if you are using parametric equalizer and have two filters (bands) available by adding these two to your eq software:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Fc&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Q&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Gain&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;113&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.75&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Peaking&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3766&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.63&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-2.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The results will be remarkably similar to results produced with the actual oratory1990 target:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kGYBOev.png&#34; alt=&#34;oratory1990 vs Harman in-ear 2019&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Of course it&#39;s still possible to produce native results with oratory1990 target by pointing compensation to the oratory1990 target file: &lt;code&gt;--compensation=&#34;compensation/oratory1990.csv&lt;/code&gt; or &lt;code&gt;--compensation=&#34;compensation/oratory1990_wo_bass.csv&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Innerfidelity Target by Super Best Audio Friends Forum User &#34;Serious&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Innerfidelity and Headphone.com measured headphones previously used &lt;a href=&#34;https://www.superbestaudiofriends.org/index.php?threads/innerfidelity-fr-target.5560/&#34;&gt;SBAF-Serious target&lt;/a&gt; only. The SBAF-Serious curve is no longer used for these measurements since a new targets were developed by calibrating Harman targets. This is a modified version of Innerfidelity target curve produced by a user called Serious on Super Best Audio Friends forum. This curve doesn&#39;t have any glaring problems and is quite well balanced overall. Curve was turned into a compensation for raw microphone data and tilted 0.2 dB / octave brighter. Innerfidelity measurements are recommended over Headphone.com measurements because SBAF-Serious target was developed for Innerfidelity. SBAF-Serious curve was modified to be suitable for Headphone.com measurements. CSV data files for Innerfidelity and Headphone.com are at &lt;code&gt;innerfidelity/resources/innerfidelity_compensation_sbaf-serious.csv&lt;/code&gt; and &lt;code&gt;headphonecom/resources/headphonecom_compensation_sbaf-serious.csv&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;h3&gt;Rtings Targets&lt;/h3&gt; &#xA;&lt;p&gt;Rtings measured headphones have a frequency response target made for this project. This treble average target is using an average of frequency responses of all Rtings measured headphones in the treble range with small manual reduction of the 9kHz peak and the Rtings native response below 2500 Hz without bass boost. Three different targets were compared in listening tests and the treble average target was found to sound the best. Other two were the Rtings native target curve and calibrated and uncalibrated versions of SBAF Serious target curve. Rtings uses the same measurement system as Innerfidelity uses so in theory the uncalibrated SBAF Serious target should work similarly with Rtings but listening tests found the treble average target to be slightly better. Rtings have &lt;a href=&#34;https://www.youtube.com/watch?v=HNEI3qLZEKo&#34;&gt;a very informative video&lt;/a&gt; about how they are doing the measurements and how they came up with the target they use.&lt;/p&gt; &#xA;&lt;p&gt;All of these Rtings targets retired when new calibrated Harman targets were developed for Rtings measurements.&lt;/p&gt; &#xA;&lt;h2&gt;Technical Challenges&lt;/h2&gt; &#xA;&lt;p&gt;Simply inverting headphone frequency response deviation from target response does not usually produce sufficient results. Some problems are caused by imperfections in measurements, some are reliability issues and some are practical end-user problems. Rtings has a good &lt;a href=&#34;https://www.youtube.com/watch?v=HNEI3qLZEKo&#34;&gt;video on Youtube&lt;/a&gt; about measurement system challenges and solutions which is definitely worth checking out. Innerfidelity also has a very educational &lt;a href=&#34;https://www.youtube.com/watch?v=SDRHFNfFCFU&#34;&gt;video on Youtube&lt;/a&gt; about measurements and what constitutes as a neutral sound. Main takeoffs are that bass and treble measurements are very inconsistent, neutral sound is not very well defined yet and on-ear headphones have big reliability problems in 8 to 9kHz range due to resonances which move when headphone placement is changed. Harman international has done some solid research into preferred headphone frequency response but since that research was done on a different measurement system the target does not apply directly to Innerfidelity (Summer 2018) and Headphone.com measurements.&lt;/p&gt; &#xA;&lt;p&gt;There is very little that can be done for fighting bass inconsistencies because the same problems will be there whether equalization is used or not. Headphones simply have different bass responses on different listeners (heads). Therefore bass is taken as is in AutoEQ and equalized as if there was nothing wrong with it. Your mileage may vary. Luckily bass has smaller impact on music and having too much bass (especially sub-bass) doesn&#39;t create problems of the same magnitude as having too much treble.&lt;/p&gt; &#xA;&lt;p&gt;Moving resonances around 8 to 9kHz may cause big problems if not taken into account. Spikes and dips in this range are of great amplitude and very narrow. If one equalizes these spikes and dips according to frequency response measurement in worst case scenario a spike will move in a place of dip when headphone is moved, and therefore the spike is amplified significantly, leading to a very sharp and piercing sound signature. To counter these problems by default AutoEQ uses heavy smoothing and limited positive gain above 6 to 8kHz. This way the equalization will follow a broader trend of the region and will not care so much about narrow spikes and dips. Also positive gain is limited to 0dB as an extra safety measure against amplifying spikes due to moving the headphone. Suppressing a narrow dip even further is not an optimal thing to do but in practice has little negative effect on the sound. Both of these measures will also alleviate upper treble measurement inconsistencies above 11 to 12 kHz.&lt;/p&gt; &#xA;&lt;p&gt;A practical end-user problem is if too high positive gain is allowed which asks for equal amount of negative digital pre-amp to prevent clipping. This negative preamp will limit maximum volume produced by the system if there is no analog gain available. If a dedicated headphone amplifier is available or if the motherboard/soundcard can drive the headphones loud enough even when using high negative preamp larger &lt;code&gt;--max_gain&lt;/code&gt; values can be used. By default &lt;code&gt;--max_gain&lt;/code&gt; is set to +6dB so as not to cripple the user&#39;s volume too much. Max gain will clip the equalization curve which produces sharp kinks in it. Sharp changes in equalization may produce unwanted equalization artifacts. To counter this AutoEQ rounds the corners whenever max gain clips the curve.&lt;/p&gt; &#xA;&lt;h2&gt;Parametric Equalizer Optimization&lt;/h2&gt; &#xA;&lt;p&gt;AutoEQ has an optimizer to fit several peaking filters to the desired equalization curve. Optimization is part heuristic initialization and part mathematical optimization.&lt;/p&gt; &#xA;&lt;p&gt;In the initialization phase peaks are detected from the target curve and a peaking filter is created to match the peak&#39;s height (gain) and location (frequency). This way, the optimizer finds a suitable number of filters to optimize. If the bass region has no peaks and therefore is missing filters entirely, a maximum of two filters will be added at 20 Hz and 60 Hz.&lt;/p&gt; &#xA;&lt;p&gt;A way to limit the number of filters used is provided with &lt;code&gt;max_filters&lt;/code&gt; parameter. If there are too many filters after initialization, some filters are removed. First filters with small gain (&amp;lt; 0.2 dB and &amp;lt; 0.33 dB) are removed. If there are too many filters after reduction of small gain filters, nearby filters are attempted to merge. Merged filter will be in the mid point of the merged filters. If merging filters did not reduce the count enough, smallest filters are removed until count matches maximum allowed number of filters. Image below shows initialization for 1More MK801 headphone. Red dots are the peaks of filters before reduction and green dots are the peaks after reduction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/UlMb2jK.png&#34; alt=&#34;filter-initialization&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Equalization target and initial peak filters for optimization before and after filter number limitation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;After suitable number of filters have been achieved and filter center frequencies and gains have been set to appropriate values a mathematical optimization is performed to fit sum frequency response of all filters to match as close as possible the desired curve. Optimization is based on gradient descent and will attempt to minimize mean squared error between the sum frequency response of the filters and the target. When improvements in the error are getting too small to make a practical difference the optimization is stopped. Animation below shows progress from the initialization to a close finished curve.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/pM7JYAb.gif&#34; alt=&#34;optimization-animation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Optimization of parametric eq filters (click to play)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jaakkopasanen/AutoEq/issues&#34;&gt;Issues&lt;/a&gt; are the way to go if you are experiencing problems, have ideas or if there is something unclear about how things are done or documented.&lt;/p&gt; &#xA;&lt;p&gt;You can find me in &lt;a href=&#34;https://www.reddit.com/user/jaakkopasanen&#34;&gt;Reddit&lt;/a&gt; and &lt;a href=&#34;https://www.head-fi.org/members/jaakkopasanen.491235/&#34;&gt;Head-fi&lt;/a&gt; if you just want to say hello.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>InFoCusp/diffusion_models</title>
    <updated>2022-06-07T01:45:58Z</updated>
    <id>tag:github.com,2022-06-07:/InFoCusp/diffusion_models</id>
    <link href="https://github.com/InFoCusp/diffusion_models" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Minimal standalone example of diffusion model&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Diffusion models&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/InFoCusp/diffusion_models/blob/main/Diffusion_models.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A minimal standalone example of diffusion model. The objective is to understand the forward as well as reverse mapping process of diffusion models. The notebook contains the equations along side the code and some visualizations.&lt;/p&gt; &#xA;&lt;p&gt;Hope you find it useful!&lt;/p&gt; &#xA;&lt;p&gt;The forward trajectory:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/InFoCusp/diffusion_models/main/assets/forward_diffusion.gif&#34; alt=&#34;Forward diffusion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reverse trajectory:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/InFoCusp/diffusion_models/main/assets/reverse_diffusion.gif&#34; alt=&#34;Reverse diffusion&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>