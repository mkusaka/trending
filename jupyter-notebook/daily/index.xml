<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-15T01:32:33Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/flax</title>
    <updated>2024-12-15T01:32:33Z</updated>
    <id>tag:github.com,2024-12-15:/google/flax</id>
    <link href="https://github.com/google/flax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flax is a neural network library for JAX that is designed for flexibility.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/google/flax/main/images/flax_logo_250px.png&#34; alt=&#34;logo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Flax: A neural network library and ecosystem for JAX designed for flexibility&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/flax/workflows/Build/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/google/flax&#34;&gt;&lt;img src=&#34;https://badgen.net/codecov/c/gh/google/flax&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/flax/main/#overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/google/flax/main/#quick-install&#34;&gt;&lt;strong&gt;Quick install&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/google/flax/main/#what-does-flax-look-like&#34;&gt;&lt;strong&gt;What does Flax look like?&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://flax.readthedocs.io/&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Released in 2024, Flax NNX is a new simplified Flax API that is designed to make it easier to create, inspect, debug, and analyze neural networks in &lt;a href=&#34;https://jax.readthedocs.io/&#34;&gt;JAX&lt;/a&gt;. It achieves this by adding first class support for Python reference semantics. This allows users to express their models using regular Python objects, enabling reference sharing and mutability.&lt;/p&gt; &#xA;&lt;p&gt;Flax NNX evolved from the &lt;a href=&#34;https://flax-linen.readthedocs.io/&#34;&gt;Flax Linen API&lt;/a&gt;, which was released in 2020 by engineers and researchers at Google Brain in close collaboration with the JAX team.&lt;/p&gt; &#xA;&lt;p&gt;You can learn more about Flax NNX on the &lt;a href=&#34;https://flax.readthedocs.io/&#34;&gt;dedicated Flax documentation site&lt;/a&gt;. Make sure you check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flax.readthedocs.io/en/latest/nnx_basics.html&#34;&gt;Flax NNX basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flax.readthedocs.io/en/latest/mnist_tutorial.html&#34;&gt;MNIST tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flax.readthedocs.io/en/latest/why.html&#34;&gt;Why Flax NNX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flax.readthedocs.io/en/latest/guides/linen_to_nnx.html&#34;&gt;Evolution from Flax Linen to Flax NNX&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Flax Linen&#39;s &lt;a href=&#34;https://flax-linen.readthedocs.io/&#34;&gt;documentation has its own site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Flax team&#39;s mission is to serve the growing JAX neural network research ecosystem - both within Alphabet and with the broader community, and to explore the use-cases where JAX shines. We use GitHub for almost all of our coordination and planning, as well as where we discuss upcoming design changes. We welcome feedback on any of our discussion, issue and pull request threads.&lt;/p&gt; &#xA;&lt;p&gt;You can make feature requests, let us know what you are working on, report issues, ask questions in our &lt;a href=&#34;https://github.com/google/flax/discussions&#34;&gt;Flax GitHub discussion forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We expect to improve Flax, but we don&#39;t anticipate significant breaking changes to the core API. We use &lt;a href=&#34;https://github.com/google/flax/tree/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; entries and deprecation warnings when possible.&lt;/p&gt; &#xA;&lt;p&gt;In case you want to reach us directly, we&#39;re at &lt;a href=&#34;mailto:flax-dev@google.com&#34;&gt;flax-dev@google.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Flax is a high-performance neural network library and ecosystem for JAX that is &lt;strong&gt;designed for flexibility&lt;/strong&gt;: Try new forms of training by forking an example and by modifying the training loop, not adding features to a framework.&lt;/p&gt; &#xA;&lt;p&gt;Flax is being developed in close collaboration with the JAX team and comes with everything you need to start your research, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Neural network API&lt;/strong&gt; (&lt;code&gt;flax.nnx&lt;/code&gt;): Including &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/linear.html#flax.nnx.Linear&#34;&gt;&lt;code&gt;Linear&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/linear.html#flax.nnx.Conv&#34;&gt;&lt;code&gt;Conv&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/normalization.html#flax.nnx.BatchNorm&#34;&gt;&lt;code&gt;BatchNorm&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/normalization.html#flax.nnx.LayerNorm&#34;&gt;&lt;code&gt;LayerNorm&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/normalization.html#flax.nnx.GroupNorm&#34;&gt;&lt;code&gt;GroupNorm&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/attention.html&#34;&gt;Attention&lt;/a&gt; (&lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/attention.html#flax.nnx.MultiHeadAttention&#34;&gt;&lt;code&gt;MultiHeadAttention&lt;/code&gt;&lt;/a&gt;), &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/recurrent.html#flax.nnx.nn.recurrent.LSTMCell&#34;&gt;&lt;code&gt;LSTMCell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/recurrent.html#flax.nnx.nn.recurrent.GRUCell&#34;&gt;&lt;code&gt;GRUCell&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://flax.readthedocs.io/en/latest/api_reference/flax.nnx/nn/stochastic.html#flax.nnx.Dropout&#34;&gt;&lt;code&gt;Dropout&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Utilities and patterns&lt;/strong&gt;: replicated training, serialization and checkpointing, metrics, prefetching on device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Educational examples&lt;/strong&gt;: &lt;a href=&#34;https://flax.readthedocs.io/en/latest/mnist_tutorial.html&#34;&gt;MNIST&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/flax/tree/main/examples/gemma&#34;&gt;Inference/sampling with the Gemma language model (transformer)&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/flax/tree/main/examples/lm1b_nnx&#34;&gt;Transformer LM1B&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick install&lt;/h2&gt; &#xA;&lt;p&gt;Flax uses JAX, so do check out &lt;a href=&#34;https://jax.readthedocs.io/en/latest/installation.html&#34;&gt;JAX installation instructions on CPUs, GPUs and TPUs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will need Python 3.8 or later. Install Flax from PyPi:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install flax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To upgrade to the latest version of Flax, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install --upgrade git+https://github.com/google/flax.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install some additional dependencies (like &lt;code&gt;matplotlib&lt;/code&gt;) that are required but not included by some dependencies, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#34;flax[all]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What does Flax look like?&lt;/h2&gt; &#xA;&lt;p&gt;We provide three examples using the Flax API: a simple multi-layer perceptron, a CNN and an auto-encoder.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the &lt;code&gt;Module&lt;/code&gt; abstraction, check out our &lt;a href=&#34;https://flax.readthedocs.io/&#34;&gt;docs&lt;/a&gt;, our &lt;a href=&#34;https://github.com/google/flax/raw/main/docs/linen_intro.ipynb&#34;&gt;broad intro to the Module abstraction&lt;/a&gt;. For additional concrete demonstrations of best practices, refer to our &lt;a href=&#34;https://flax.readthedocs.io/en/latest/guides/index.html&#34;&gt;guides&lt;/a&gt; and &lt;a href=&#34;https://flax.readthedocs.io/en/latest/developer_notes/index.html&#34;&gt;developer notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example of an MLP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class MLP(nnx.Module):&#xA;  def __init__(self, din: int, dmid: int, dout: int, *, rngs: nnx.Rngs):&#xA;    self.linear1 = Linear(din, dmid, rngs=rngs)&#xA;    self.dropout = nnx.Dropout(rate=0.1, rngs=rngs)&#xA;    self.bn = nnx.BatchNorm(dmid, rngs=rngs)&#xA;    self.linear2 = Linear(dmid, dout, rngs=rngs)&#xA;&#xA;  def __call__(self, x: jax.Array):&#xA;    x = nnx.gelu(self.dropout(self.bn(self.linear1(x))))&#xA;    return self.linear2(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example of a CNN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;class CNN(nnx.Module):&#xA;  def __init__(self, *, rngs: nnx.Rngs):&#xA;    self.conv1 = nnx.Conv(1, 32, kernel_size=(3, 3), rngs=rngs)&#xA;    self.conv2 = nnx.Conv(32, 64, kernel_size=(3, 3), rngs=rngs)&#xA;    self.avg_pool = partial(nnx.avg_pool, window_shape=(2, 2), strides=(2, 2))&#xA;    self.linear1 = nnx.Linear(3136, 256, rngs=rngs)&#xA;    self.linear2 = nnx.Linear(256, 10, rngs=rngs)&#xA;&#xA;  def __call__(self, x):&#xA;    x = self.avg_pool(nnx.relu(self.conv1(x)))&#xA;    x = self.avg_pool(nnx.relu(self.conv2(x)))&#xA;    x = x.reshape(x.shape[0], -1)  # flatten&#xA;    x = nnx.relu(self.linear1(x))&#xA;    x = self.linear2(x)&#xA;    return x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example of an autoencoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Encoder = lambda rngs: nnx.Linear(2, 10, rngs=rngs)&#xA;Decoder = lambda rngs: nnx.Linear(10, 2, rngs=rngs)&#xA;&#xA;class AutoEncoder(nnx.Module):&#xA;  def __init__(self, rngs):&#xA;    self.encoder = Encoder(rngs)&#xA;    self.decoder = Decoder(rngs)&#xA;&#xA;  def __call__(self, x) -&amp;gt; jax.Array:&#xA;    return self.decoder(self.encoder(x))&#xA;&#xA;  def encode(self, x) -&amp;gt; jax.Array:&#xA;    return self.encoder(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citing Flax&lt;/h2&gt; &#xA;&lt;p&gt;To cite this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{flax2020github,&#xA;  author = {Jonathan Heek and Anselm Levskaya and Avital Oliver and Marvin Ritter and Bertrand Rondepierre and Andreas Steiner and Marc van {Z}ee},&#xA;  title = {{F}lax: A neural network library and ecosystem for {JAX}},&#xA;  url = {http://github.com/google/flax},&#xA;  version = {0.10.2},&#xA;  year = {2024},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above bibtex entry, names are in alphabetical order, the version number is intended to be that from &lt;a href=&#34;https://github.com/google/flax/raw/main/flax/version.py&#34;&gt;flax/version.py&lt;/a&gt;, and the year corresponds to the project&#39;s open-source release.&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;Flax is an open source project maintained by a dedicated team at Google DeepMind, but is not an official Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>julep-ai/julep</title>
    <updated>2024-12-15T01:32:33Z</updated>
    <id>tag:github.com,2024-12-15:/julep-ai/julep</id>
    <link href="https://github.com/julep-ai/julep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A new DSL and server for AI agents and multi-step tasks&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/README-CN.md&#34;&gt;中文翻译&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/README-JA.md&#34;&gt;日本語翻訳&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/README-FR.md&#34;&gt;French&lt;/a&gt; &lt;/sup&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34; id=&#34;top&#34;&gt; &#xA; &lt;img src=&#34;https://socialify.git.ci/julep-ai/julep/image?description=1&amp;amp;descriptionEditable=Rapidly%20build%20AI%20workflows%20and%20agents&amp;amp;font=Source%20Code%20Pro&amp;amp;logo=https%3A%2F%2Fraw.githubusercontent.com%2Fjulep-ai%2Fjulep%2Fdev%2F.github%2Fjulep-logo.svg&amp;amp;owner=1&amp;amp;forks=1&amp;amp;pattern=Solid&amp;amp;stargazers=1&amp;amp;theme=Auto&#34; alt=&#34;julep&#34; width=&#34;640&#34; height=&#34;320&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://docs.julep.ai&#34; rel=&#34;dofollow&#34;&gt;Explore Docs (wip)&lt;/a&gt; · &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34; rel=&#34;dofollow&#34;&gt;Discord&lt;/a&gt; · &lt;a href=&#34;https://x.com/julep_ai&#34; rel=&#34;dofollow&#34;&gt;𝕏&lt;/a&gt; · &lt;a href=&#34;https://www.linkedin.com/company/julep-ai&#34; rel=&#34;dofollow&#34;&gt;LinkedIn&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@julep/sdk&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/%40julep%2Fsdk?style=social&amp;amp;logo=npm&amp;amp;link=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40julep%2Fsdk&#34; alt=&#34;NPM Version&#34;&gt;&lt;/a&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://pypi.org/project/julep&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/julep?style=social&amp;amp;logo=python&amp;amp;label=PyPI&amp;amp;link=https%3A%2F%2Fpypi.org%2Fproject%2Fjulep&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://hub.docker.com/u/julepai&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/julepai/agents-api?sort=semver&amp;amp;style=social&amp;amp;logo=docker&amp;amp;link=https%3A%2F%2Fhub.docker.com%2Fu%2Fjulepai&#34; alt=&#34;Docker Image Version&#34;&gt;&lt;/a&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://choosealicense.com/licenses/apache/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/julep-ai/julep&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Get your API key &lt;a href=&#34;https://dashboard-dev.julep.ai&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Contributions 🌟&lt;/b&gt; (Click to expand)&lt;/summary&gt; &#xA; &lt;h2&gt;Call for Contributors 🌟&lt;/h2&gt; &#xA; &lt;p&gt;We&#39;re excited to welcome new contributors to the Julep project! We&#39;ve created several &#34;good first issues&#34; to help you get started. Here&#39;s how you can contribute:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Check out our &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for guidelines on how to contribute.&lt;/li&gt; &#xA;  &lt;li&gt;Browse our &lt;a href=&#34;https://github.com/julep-ai/julep/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; to find a task that interests you.&lt;/li&gt; &#xA;  &lt;li&gt;If you have any questions or need help, don&#39;t hesitate to reach out on our &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34;&gt;Discord&lt;/a&gt; channel.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Your contributions, big or small, are valuable to us. Let&#39;s build something amazing together! 🚀&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h3&gt;📖 Table of Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#call-for-contributors-&#34;&gt;Call for Contributors 🌟&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#quick-example&#34;&gt;Quick Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#python-quick-start-&#34;&gt;Python Quick Start 🐍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#nodejs-quick-start-&#34;&gt;Node.js Quick Start 🟩&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#components&#34;&gt;Components&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#mental-model&#34;&gt;Mental Model&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#concepts&#34;&gt;Concepts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#understanding-tasks&#34;&gt;Understanding Tasks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#lifecycle-of-a-task&#34;&gt;Lifecycle of a Task&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#types-of-workflow-steps&#34;&gt;Types of Workflow Steps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#common-steps&#34;&gt;Common Steps&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#key-value-steps&#34;&gt;Key-Value Steps&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#iteration-steps&#34;&gt;Iteration Steps&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#conditional-steps&#34;&gt;Conditional Steps&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#other-control-flow&#34;&gt;Other Control Flow&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#tool-types&#34;&gt;Tool Types&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#user-defined-functions&#34;&gt;User-defined &lt;code&gt;functions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#system-tools&#34;&gt;&lt;code&gt;system&lt;/code&gt; tools&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#available-system-resources-and-operations&#34;&gt;Available &lt;code&gt;system&lt;/code&gt; resources and operations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#built-in-integrations&#34;&gt;Built-in &lt;code&gt;integrations&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#direct-api_calls&#34;&gt;Direct &lt;code&gt;api_calls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#integrations&#34;&gt;Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#other-features&#34;&gt;Other Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#adding-tools-to-agents&#34;&gt;Adding Tools to Agents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#managing-sessions-and-users&#34;&gt;Managing Sessions and Users&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#document-integration-and-search&#34;&gt;Document Integration and Search&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#reference&#34;&gt;Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#sdk-reference&#34;&gt;SDK Reference&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#api-reference&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#local-quickstart&#34;&gt;Local Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#whats-the-difference-between-julep-and-langchain-etc&#34;&gt;What&#39;s the difference between Julep and LangChain etc?&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#different-use-cases&#34;&gt;Different Use Cases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#different-form-factor&#34;&gt;Different Form Factor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#in-summary&#34;&gt;In Summary&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Julep is a platform for creating AI agents that remember past interactions and can perform complex tasks. It offers long-term memory and manages multi-step processes.&lt;/p&gt; &#xA;&lt;p&gt;Julep enables the creation of multi-step tasks incorporating decision-making, loops, parallel processing, and integration with numerous external tools and APIs.&lt;/p&gt; &#xA;&lt;p&gt;While many AI applications are limited to simple, linear chains of prompts and API calls with minimal branching, Julep is built to handle more complex scenarios which:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;have multiple steps,&lt;/li&gt; &#xA; &lt;li&gt;make decisions based on model outputs,&lt;/li&gt; &#xA; &lt;li&gt;spawn parallel branches,&lt;/li&gt; &#xA; &lt;li&gt;use lots of tools, and&lt;/li&gt; &#xA; &lt;li&gt;run for a long time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Imagine you want to build an AI agent that can do more than just answer simple questions—it needs to handle complex tasks, remember past interactions, and maybe even use other tools or APIs. That&#39;s where Julep comes in. Read &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#understanding-tasks&#34;&gt;Understanding Tasks&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🧠 &lt;strong&gt;Persistent AI Agents&lt;/strong&gt;: Remember context and information over long-term interactions.&lt;/li&gt; &#xA; &lt;li&gt;💾 &lt;strong&gt;Stateful Sessions&lt;/strong&gt;: Keep track of past interactions for personalized responses.&lt;/li&gt; &#xA; &lt;li&gt;🔄 &lt;strong&gt;Multi-Step Tasks&lt;/strong&gt;: Build complex, multi-step processes with loops and decision-making.&lt;/li&gt; &#xA; &lt;li&gt;⏳ &lt;strong&gt;Task Management&lt;/strong&gt;: Handle long-running tasks that can run indefinitely.&lt;/li&gt; &#xA; &lt;li&gt;🛠️ &lt;strong&gt;Built-in Tools&lt;/strong&gt;: Use built-in tools and external APIs in your tasks.&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;strong&gt;Self-Healing&lt;/strong&gt;: Julep will automatically retry failed steps, resend messages, and generally keep your tasks running smoothly.&lt;/li&gt; &#xA; &lt;li&gt;📚 &lt;strong&gt;RAG&lt;/strong&gt;: Use Julep&#39;s document store to build a system for retrieving and using your own data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/4355cbae-fcbd-4510-ac0d-f8f77b73af70&#34; alt=&#34;features&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Julep is ideal for applications that require AI use cases beyond simple prompt-response models.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick Example&lt;/h2&gt; &#xA;&lt;p&gt;Imagine a Research AI agent that can do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Take a topic&lt;/strong&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Come up with 30 search queries&lt;/strong&gt; for that topic,&lt;/li&gt; &#xA; &lt;li&gt;Perform those web &lt;strong&gt;searches in parallel&lt;/strong&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Summarize&lt;/strong&gt; the results,&lt;/li&gt; &#xA; &lt;li&gt;Send the &lt;strong&gt;summary to Discord&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] In Julep, this would be a single task under &lt;b&gt;80 lines of code&lt;/b&gt; and run &lt;b&gt;fully managed&lt;/b&gt; all on its own. All of the steps are executed on Julep&#39;s own servers and you don&#39;t need to lift a finger.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here&#39;s a working example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Research Agent&#xA;&#xA;# Optional: Define the input schema for the task&#xA;input_schema:&#xA;  type: object&#xA;  properties:&#xA;    topic:&#xA;      type: string&#xA;      description: The main topic to research&#xA;    num_questions:&#xA;      type: integer&#xA;      description: The number of search queries to generate&#xA;&#xA;# Define the tools that the agent can use&#xA;tools:&#xA;  - name: web_search&#xA;    type: integration&#xA;    integration:&#xA;      provider: brave&#xA;      setup:&#xA;        api_key: &amp;lt;your-brave-api-key&amp;gt;&#xA;&#xA;  - name: discord_webhook&#xA;    type: api_call&#xA;    api_call:&#xA;      url: https://discord.com/api/webhooks/&amp;lt;your-webhook-id&amp;gt;/&amp;lt;your-webhook-token&amp;gt;&#xA;      method: POST&#xA;      headers:&#xA;        Content-Type: application/json&#xA;&#xA;# Special variables:&#xA;# - inputs: for accessing the input to the task&#xA;# - outputs: for accessing the output of previous steps&#xA;# - _: for accessing the output of the previous step&#xA;&#xA;# Define the main workflow&#xA;main:&#xA;- prompt:&#xA;    - role: system&#xA;      content: &amp;gt;-&#xA;        You are a research assistant.&#xA;        Generate {{inputs[0].num_questions|default(30, true)}} diverse search queries related to the topic:&#xA;        {{inputs[0].topic}}&#xA;&#xA;        Write one query per line.&#xA;  unwrap: true&#xA;&#xA;# Evaluate the search queries using a simple python expression&#xA;- evaluate:&#xA;    search_queries: &#34;_.split(NEWLINE)&#34;&#xA;&#xA;# Run the web search in parallel for each query&#xA;- over: &#34;_.search_queries&#34;&#xA;  map:&#xA;    tool: web_search&#xA;    arguments:&#xA;      query: &#34;_&#34;&#xA;  parallelism: 5&#xA;&#xA;# Collect the results from the web search&#xA;- evaluate:&#xA;    search_results: _&#xA;&#xA;# Summarize the results&#xA;- prompt:&#xA;    - role: system&#xA;      content: &amp;gt;&#xA;        You are a research summarizer. Create a comprehensive summary of the following research results on the topic {{inputs[0].topic}}.&#xA;        The summary should be well-structured, informative, and highlight key findings and insights. Keep the summary concise and to the point.&#xA;        The length of the summary should be less than 150 words.&#xA;        Here are the search results:&#xA;        {{_.search_results}}&#xA;  unwrap: true&#xA;  settings:&#xA;    model: gpt-4o-mini&#xA;&#xA;- evaluate:&#xA;    discord_message: |-&#xA;      f&#39;&#39;&#39;&#xA;      **Research Summary for {inputs[0].topic}**&#xA;      {_}&#xA;      &#39;&#39;&#39;&#xA;&#xA;  # Send the summary to Discord&#xA;- tool: discord_webhook&#xA;  arguments:&#xA;    json_: &#xA;      content: _.discord_message[:2000] # Discord has a 2000 character limit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, Julep will automatically manage parallel executions, retry failed steps, resend API requests, and keep the tasks running reliably until completion.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This runs in under 30 seconds and returns the following output:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Research Summary for AI&lt;/b&gt; &lt;i&gt;(Click to expand)&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Research Summary for AI&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;h3&gt;Summary of Research Results on Artificial Intelligence (AI)&lt;/h3&gt; &#xA;  &lt;h4&gt;Introduction&lt;/h4&gt; &#xA;  &lt;p&gt;The field of Artificial Intelligence (AI) has seen significant advancements in recent years, marked by the development of methods and technologies that enable machines to perceive their environment, learn from data, and make decisions. The primary focus of this summary is on the insights derived from various research findings related to AI.&lt;/p&gt; &#xA;  &lt;h4&gt;Key Findings&lt;/h4&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Definition and Scope of AI&lt;/strong&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;AI is defined as a branch of computer science focused on creating systems that can perform tasks requiring human-like intelligence, including learning, reasoning, and problem-solving (Wikipedia).&lt;/li&gt; &#xA;     &lt;li&gt;It encompasses various subfields, including machine learning, natural language processing, robotics, and computer vision.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Impact and Applications&lt;/strong&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;AI technologies are being integrated into numerous sectors, improving efficiency and productivity. Applications range from autonomous vehicles and healthcare diagnostics to customer service automation and financial forecasting (OpenAI).&lt;/li&gt; &#xA;     &lt;li&gt;Google&#39;s commitment to making AI beneficial for everyone highlights its potential to significantly improve daily life by enhancing user experiences across various platforms (Google AI).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ethical Considerations&lt;/strong&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;There is an ongoing discourse regarding the ethical implications of AI, including concerns about privacy, bias, and accountability in decision-making processes. The need for a framework that ensures the safe and responsible use of AI technologies is emphasized (OpenAI).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Learning Mechanisms&lt;/strong&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;AI systems utilize different learning mechanisms, such as supervised learning, unsupervised learning, and reinforcement learning. These methods allow AI to improve performance over time by learning from past experiences and data (Wikipedia).&lt;/li&gt; &#xA;     &lt;li&gt;The distinction between supervised and unsupervised learning is critical; supervised learning relies on labeled data, while unsupervised learning identifies patterns without predefined labels (Unsupervised).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Future Directions&lt;/strong&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Future AI developments are expected to focus on enhancing the interpretability and transparency of AI systems, ensuring that they can provide justifiable decisions and actions (OpenAI).&lt;/li&gt; &#xA;     &lt;li&gt;There is also a push towards making AI systems more accessible and user-friendly, encouraging broader adoption across different demographics and industries (Google AI).&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;h4&gt;Conclusion&lt;/h4&gt; &#xA;  &lt;p&gt;AI represents a transformative force across multiple domains, promising to reshape industries and improve quality of life. However, as its capabilities expand, it is crucial to address the ethical and societal implications that arise. Continued research and collaboration among technologists, ethicists, and policymakers will be essential in navigating the future landscape of AI.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Julep, install it using &lt;a href=&#34;https://www.npmjs.com/package/@julep/sdk&#34;&gt;npm&lt;/a&gt; or &lt;a href=&#34;https://pypi.org/project/julep/&#34;&gt;pip&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @julep/sdk&#xA;&#xA;# or&#xA;&#xA;bun add @julep/sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install julep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Get your API key &lt;a href=&#34;https://dashboard-dev.julep.ai&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;While we are in beta, you can also reach out on &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34;&gt;Discord&lt;/a&gt; to get rate limits lifted on your API key.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] 💻 Are you a &lt;em&gt;show me the code!™&lt;/em&gt; kind of person? We have created a ton of cookbooks for you to get started with. &lt;strong&gt;Check out the &lt;a href=&#34;https://github.com/julep-ai/julep/tree/dev/cookbooks&#34;&gt;cookbooks&lt;/a&gt;&lt;/strong&gt; to browse through examples.&lt;/p&gt; &#xA; &lt;p&gt;💡 There&#39;s also lots of ideas that you can build on top of Julep. &lt;strong&gt;Check out the &lt;a href=&#34;https://github.com/julep-ai/julep/tree/dev/cookbooks/IDEAS.md&#34;&gt;list of ideas&lt;/a&gt;&lt;/strong&gt; to get some inspiration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Python Quick Start 🐍&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;### Step 0: Setup&#xA;&#xA;import time&#xA;import yaml&#xA;from julep import Julep # or AsyncJulep&#xA;&#xA;client = Julep(api_key=&#34;your_julep_api_key&#34;)&#xA;&#xA;### Step 1: Create an Agent&#xA;&#xA;agent = client.agents.create(&#xA;    name=&#34;Storytelling Agent&#34;,&#xA;    model=&#34;claude-3.5-sonnet&#34;,&#xA;    about=&#34;You are a creative storyteller that crafts engaging stories on a myriad of topics.&#34;,&#xA;)&#xA;&#xA;### Step 2: Create a Task that generates a story and comic strip&#xA;&#xA;task_yaml = &#34;&#34;&#34;&#xA;name: Storyteller&#xA;description: Create a story based on an idea.&#xA;&#xA;tools:&#xA;  - name: research_wikipedia&#xA;    type: integration&#xA;    integration:&#xA;      provider: wikipedia&#xA;      method: search&#xA;&#xA;main:&#xA;  # Step 1: Generate plot idea&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Based on the idea &#39;{{_.idea}}&#39;, generate a list of 5 plot ideas. Go crazy and be as creative as possible. Return your output as a list of long strings inside ```yaml tags at the end of your response.&#xA;    unwrap: true&#xA;&#xA;  - evaluate:&#xA;      plot_ideas: load_yaml(_.split(&#39;```yaml&#39;)[1].split(&#39;```&#39;)[0].strip())&#xA;&#xA;  # Step 2: Extract research fields from the plot ideas&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Here are some plot ideas for a story:&#xA;          {% for idea in _.plot_ideas %}&#xA;          - {{idea}}&#xA;          {% endfor %}&#xA;&#xA;          To develop the story, we need to research for the plot ideas.&#xA;          What should we research? Write down wikipedia search queries for the plot ideas you think are interesting.&#xA;          Return your output as a yaml list inside ```yaml tags at the end of your response.&#xA;    unwrap: true&#xA;    settings:&#xA;      model: gpt-4o-mini&#xA;      temperature: 0.7&#xA;&#xA;  - evaluate:&#xA;      research_queries: load_yaml(_.split(&#39;```yaml&#39;)[1].split(&#39;```&#39;)[0].strip())&#xA;&#xA;  # Step 3: Research each plot idea&#xA;  - foreach:&#xA;      in: _.research_queries&#xA;      do:&#xA;        tool: research_wikipedia&#xA;        arguments:&#xA;          query: _&#xA;&#xA;  - evaluate:&#xA;      wikipedia_results: &#39;NEWLINE.join([f&#34;- {doc.metadata.title}: {doc.metadata.summary}&#34; for item in _ for doc in item.documents])&#39;&#xA;&#xA;  # Step 4: Think and deliberate&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: |-&#xA;          Before we write the story, let&#39;s think and deliberate. Here are some plot ideas:&#xA;          {% for idea in outputs[1].plot_ideas %}&#xA;          - {{idea}}&#xA;          {% endfor %}&#xA;&#xA;          Here are the results from researching the plot ideas on Wikipedia:&#xA;          {{_.wikipedia_results}}&#xA;&#xA;          Think about the plot ideas critically. Combine the plot ideas with the results from Wikipedia to create a detailed plot for a story.&#xA;          Write down all your notes and thoughts.&#xA;          Then finally write the plot as a yaml object inside ```yaml tags at the end of your response. The yaml object should have the following structure:&#xA;&#xA;          ```yaml&#xA;          title: &#34;&amp;lt;string&amp;gt;&#34;&#xA;          characters:&#xA;          - name: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            about: &#34;&amp;lt;string&amp;gt;&#34;&#xA;          synopsis: &#34;&amp;lt;string&amp;gt;&#34;&#xA;          scenes:&#xA;          - title: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            description: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            characters:&#xA;            - name: &#34;&amp;lt;string&amp;gt;&#34;&#xA;              role: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            plotlines:&#xA;            - &#34;&amp;lt;string&amp;gt;&#34;```&#xA;&#xA;          Make sure the yaml is valid and the characters and scenes are not empty. Also take care of semicolons and other gotchas of writing yaml.&#xA;    unwrap: true&#xA;&#xA;  - evaluate:&#xA;      plot: &#34;load_yaml(_.split(&#39;```yaml&#39;)[1].split(&#39;```&#39;)[0].strip())&#34;&#xA;&#34;&#34;&#34;&#xA;&#xA;task = client.tasks.create(&#xA;    agent_id=agent.id,&#xA;    **yaml.safe_load(task_yaml)&#xA;)&#xA;&#xA;### Step 3: Execute the Task&#xA;&#xA;execution = client.executions.create(&#xA;    task_id=task.id,&#xA;    input={&#34;idea&#34;: &#34;A cat who learns to fly&#34;}&#xA;)&#xA;&#xA;# 🎉 Watch as the story and comic panels are generated&#xA;while (result := client.executions.get(execution.id)).status not in [&#39;succeeded&#39;, &#39;failed&#39;]:&#xA;    print(result.status, result.output)&#xA;    time.sleep(1)&#xA;&#xA;# 📦 Once the execution is finished, retrieve the results&#xA;if result.status == &#34;succeeded&#34;:&#xA;    print(result.output)&#xA;else:&#xA;    raise Exception(result.error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the full python example &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/example.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Node.js Quick Start 🟩&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Step 0: Setup&#xA;const dotenv = require(&#34;dotenv&#34;);&#xA;const { Julep } = require(&#34;@julep/sdk&#34;);&#xA;const yaml = require(&#34;yaml&#34;);&#xA;&#xA;dotenv.config();&#xA;&#xA;const client = new Julep({&#xA;  apiKey: process.env.JULEP_API_KEY,&#xA;  environment: process.env.JULEP_ENVIRONMENT || &#34;production&#34;,&#xA;});&#xA;&#xA;/* Step 1: Create an Agent */&#xA;&#xA;async function createAgent() {&#xA;  const agent = await client.agents.create({&#xA;    name: &#34;Storytelling Agent&#34;,&#xA;    model: &#34;claude-3.5-sonnet&#34;,&#xA;    about:&#xA;      &#34;You are a creative storyteller that crafts engaging stories on a myriad of topics.&#34;,&#xA;  });&#xA;  return agent;&#xA;}&#xA;&#xA;/* Step 2: Create a Task that generates a story and comic strip */&#xA;&#xA;const taskYaml = `&#xA;name: Storyteller&#xA;description: Create a story based on an idea.&#xA;&#xA;tools:&#xA;  - name: research_wikipedia&#xA;    integration:&#xA;      provider: wikipedia&#xA;      method: search&#xA;&#xA;main:&#xA;  # Step 1: Generate plot idea&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Based on the idea &#39;{{_.idea}}&#39;, generate a list of 5 plot ideas. Go crazy and be as creative as possible. Return your output as a list of long strings inside \`\`\`yaml tags at the end of your response.&#xA;    unwrap: true&#xA;&#xA;  - evaluate:&#xA;      plot_ideas: load_yaml(_.split(&#39;\`\`\`yaml&#39;)[1].split(&#39;\`\`\`&#39;)[0].strip())&#xA;&#xA;  # Step 2: Extract research fields from the plot ideas&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Here are some plot ideas for a story:&#xA;          {% for idea in _.plot_ideas %}&#xA;          - {{idea}}&#xA;          {% endfor %}&#xA;&#xA;          To develop the story, we need to research for the plot ideas.&#xA;          What should we research? Write down wikipedia search queries for the plot ideas you think are interesting.&#xA;          Return your output as a yaml list inside \`\`\`yaml tags at the end of your response.&#xA;    unwrap: true&#xA;    settings:&#xA;      model: gpt-4o-mini&#xA;      temperature: 0.7&#xA;&#xA;  - evaluate:&#xA;      research_queries: load_yaml(_.split(&#39;\`\`\`yaml&#39;)[1].split(&#39;\`\`\`&#39;)[0].strip())&#xA;&#xA;  # Step 3: Research each plot idea&#xA;  - foreach:&#xA;      in: _.research_queries&#xA;      do:&#xA;        tool: research_wikipedia&#xA;        arguments:&#xA;          query: _&#xA;&#xA;  - evaluate:&#xA;      wikipedia_results: &#39;NEWLINE.join([f&#34;- {doc.metadata.title}: {doc.metadata.summary}&#34; for item in _ for doc in item.documents])&#39;&#xA;&#xA;  # Step 4: Think and deliberate&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: |-&#xA;          Before we write the story, let&#39;s think and deliberate. Here are some plot ideas:&#xA;          {% for idea in outputs[1].plot_ideas %}&#xA;          - {{idea}}&#xA;          {% endfor %}&#xA;&#xA;          Here are the results from researching the plot ideas on Wikipedia:&#xA;          {{_.wikipedia_results}}&#xA;&#xA;          Think about the plot ideas critically. Combine the plot ideas with the results from Wikipedia to create a detailed plot for a story.&#xA;          Write down all your notes and thoughts.&#xA;          Then finally write the plot as a yaml object inside \`\`\`yaml tags at the end of your response. The yaml object should have the following structure:&#xA;&#xA;          \`\`\`yaml&#xA;          title: &#34;&amp;lt;string&amp;gt;&#34;&#xA;          characters:&#xA;          - name: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            about: &#34;&amp;lt;string&amp;gt;&#34;&#xA;          synopsis: &#34;&amp;lt;string&amp;gt;&#34;&#xA;          scenes:&#xA;          - title: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            description: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            characters:&#xA;            - name: &#34;&amp;lt;string&amp;gt;&#34;&#xA;              role: &#34;&amp;lt;string&amp;gt;&#34;&#xA;            plotlines:&#xA;            - &#34;&amp;lt;string&amp;gt;&#34;\`\`\`&#xA;&#xA;          Make sure the yaml is valid and the characters and scenes are not empty. Also take care of semicolons and other gotchas of writing yaml.&#xA;    unwrap: true&#xA;&#xA;  - evaluate:&#xA;      plot: &#34;load_yaml(_.split(&#39;\`\`\`yaml&#39;)[1].split(&#39;\`\`\`&#39;)[0].strip())&#34;&#xA;`;&#xA;&#xA;async function createTask(agentId) {&#xA;  const task = await client.tasks.create(agentId, yaml.parse(taskYaml));&#xA;  return task;&#xA;}&#xA;&#xA;/* Step 3: Execute the Task */&#xA;&#xA;async function executeTask(taskId) {&#xA;  const execution = await client.executions.create(taskId, {&#xA;    input: { idea: &#34;A cat who learns to fly&#34; },&#xA;  });&#xA;&#xA;  // 🎉 Watch as the story and comic panels are generated&#xA;  while (true) {&#xA;    const result = await client.executions.get(execution.id);&#xA;    console.log(result.status, result.output);&#xA;&#xA;    if (result.status === &#34;succeeded&#34; || result.status === &#34;failed&#34;) {&#xA;      // 📦 Once the execution is finished, retrieve the results&#xA;      if (result.status === &#34;succeeded&#34;) {&#xA;        console.log(result.output);&#xA;      } else {&#xA;        throw new Error(result.error);&#xA;      }&#xA;      break;&#xA;    }&#xA;&#xA;    await new Promise((resolve) =&amp;gt; setTimeout(resolve, 1000));&#xA;  }&#xA;}&#xA;&#xA;// Main function to run the example&#xA;async function main() {&#xA;  try {&#xA;    const agent = await createAgent();&#xA;    const task = await createTask(agent.id);&#xA;    await executeTask(task.id);&#xA;  } catch (error) {&#xA;    console.error(&#34;An error occurred:&#34;, error);&#xA;  }&#xA;}&#xA;&#xA;main()&#xA;  .then(() =&amp;gt; console.log(&#34;Done&#34;))&#xA;  .catch(console.error);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find the full Node.js example &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/example.js&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;Julep is made up of the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Julep Platform&lt;/strong&gt;: The Julep platform is a cloud service that runs your workflows. It includes a language for describing workflows, a server for running those workflows, and an SDK for interacting with the platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Julep SDKs&lt;/strong&gt;: Julep SDKs are a set of libraries for building workflows. There are SDKs for Python and JavaScript, with more on the way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Julep API&lt;/strong&gt;: The Julep API is a RESTful API that you can use to interact with the Julep platform.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mental Model&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/38420b5d-9342-4c8d-bae9-b47c28ae45af&#34; height=&#34;360&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Think of Julep as a platform that combines both client-side and server-side components to help you build advanced AI agents. Here&#39;s how to visualize it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Your Application Code:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can use the Julep SDK in your application to define agents, tasks, and workflows.&lt;/li&gt; &#xA;   &lt;li&gt;The SDK provides functions and classes that make it easy to set up and manage these components.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Julep Backend Service:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The SDK communicates with the Julep backend over the network.&lt;/li&gt; &#xA;   &lt;li&gt;The backend handles execution of tasks, maintains session state, stores documents, and orchestrates workflows.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Integration with Tools and APIs:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Within your workflows, you can integrate external tools and services.&lt;/li&gt; &#xA;   &lt;li&gt;The backend facilitates these integrations, so your agents can, for example, perform web searches, access databases, or call third-party APIs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;p&gt;Julep is built on several key technical components that work together to create powerful AI workflows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD&#xA;    User[User] ==&amp;gt; Session[Session]&#xA;    Session --&amp;gt; Agent[Agent]&#xA;    Agent --&amp;gt; Tasks[Tasks]&#xA;    Agent --&amp;gt; LLM[Large Language Model]&#xA;    Tasks --&amp;gt; Tools[Tools]&#xA;    Agent --&amp;gt; Documents[Documents]&#xA;    Documents --&amp;gt; VectorDB[Vector Database]&#xA;    Tasks --&amp;gt; Executions[Executions]&#xA;&#xA;    classDef client fill:#9ff,stroke:#333,stroke-width:1px;&#xA;    class User client;&#xA;&#xA;    classDef core fill:#f9f,stroke:#333,stroke-width:2px;&#xA;    class Agent,Tasks,Session core;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agents&lt;/strong&gt;: AI-powered entities backed by large language models (LLMs) that execute tasks and interact with users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt;: Entities that interact with agents through sessions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sessions&lt;/strong&gt;: Stateful interactions between agents and users, maintaining context across multiple exchanges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tasks&lt;/strong&gt;: Multi-step, programmatic workflows that agents can execute, including various types of steps like prompts, tool calls, and conditional logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Integrations that extend an agent&#39;s capabilities, including user-defined functions, system tools, or third-party API integrations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documents&lt;/strong&gt;: Text or data objects associated with agents or users, vectorized and stored for semantic search and retrieval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Executions&lt;/strong&gt;: Instances of tasks that have been initiated with specific inputs, with their own lifecycle and state machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Understanding Tasks&lt;/h2&gt; &#xA;&lt;p&gt;Tasks are the core of Julep&#39;s workflow system. They allow you to define complex, multi-step AI workflows that your agents can execute. Here&#39;s a brief overview of task components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Name, Description and Input Schema&lt;/strong&gt;: Each task has a unique name and description for easy identification. An input schema (optional) that is used to validate the input to the task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Main Steps&lt;/strong&gt;: The core of a task, defining the sequence of actions to be performed. Each step can be a prompt, tool call, evaluate, wait_for_input, log, get, set, foreach, map_reduce, if-else, switch, sleep, or return. (See &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#types-of-workflow-steps&#34;&gt;Types of Workflow Steps&lt;/a&gt; for more details)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Optional integrations that extend the capabilities of your agent during task execution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Lifecycle of a Task&lt;/h3&gt; &#xA;&lt;p&gt;You create a task using the Julep SDK and specify the main steps that the agent will execute. When you execute a task, the following lifecycle happens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;    participant D as Your Code&#xA;    participant C as Julep Client&#xA;    participant S as Julep Server&#xA;&#xA;    D-&amp;gt;&amp;gt;C: Create Task&#xA;    C-&amp;gt;&amp;gt;S: Submit Execution&#xA;    Note over S: Execute Task&#xA;    Note over S: Manage State&#xA;    S--&amp;gt;&amp;gt;C: Execution Events&#xA;    C--&amp;gt;&amp;gt;D: Progress Updates&#xA;    S-&amp;gt;&amp;gt;C: Execution Completion&#xA;    C-&amp;gt;&amp;gt;D: Final Result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Types of Workflow Steps&lt;/h3&gt; &#xA;&lt;p&gt;Tasks in Julep can include various types of steps, allowing you to create complex and powerful workflows. Here&#39;s an overview of the available step types:&lt;/p&gt; &#xA;&lt;h4&gt;Common Steps&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;About&lt;/th&gt; &#xA;   &lt;th&gt;Syntax&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Prompt&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Send a message to the AI model and receive a response &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The prompt step uses Jinja templates and you can access context variables in them. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- prompt: &#34;Analyze the following data: {{agent.name}}&#34; # &amp;lt;-- this is a jinja template&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- prompt:&#xA;    - role: system&#xA;      content: &#34;You are {{agent.name}}. {{agent.about}}&#34;&#xA;    - role: user&#xA;      content: &#34;Analyze the following data: {{_.data}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Tool Call&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Execute an integrated tool or API that you have previously declared in the task. &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The tool call step uses Python expressions inside the arguments. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- tool: web_search&#xA;  arguments:&#xA;    query: &#39;&#34;Latest AI developments&#34;&#39; # &amp;lt;-- this is a python expression (notice the quotes)&#xA;    num_results: len(_.topics) # &amp;lt;-- python expression to access the length of a list&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Evaluate&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Perform calculations or manipulate data &lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The evaluate step uses Python expressions. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- evaluate:&#xA;    average_score: sum(scores) / len(scores)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Wait for Input&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Pause workflow until input is received. It accepts an `info` field that can be used by your application to collect input from the user. &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The wait_for_input step is useful when you want to pause the workflow and wait for user input e.g. to collect a response to a prompt.&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- wait_for_input:&#xA;    info:&#xA;      message: &#39;&#34;Please provide additional information about {_.required_info}.&#34;&#39; # &amp;lt;-- python expression to access the context variable&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Log&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Log a specified value or message. &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The log step uses Jinja templates and you can access context variables in them.&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- log: &#34;Processing completed for item {{_.item_id}}&#34; # &amp;lt;-- jinja template to access the context variable&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Key-Value Steps&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Name &lt;/th&gt; &#xA;   &lt;th&gt; About &lt;/th&gt;&#xA;   &lt;th&gt;Syntax&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Get&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Retrieve a value from the execution&#39;s key-value store. &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- get: user_preference&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Set&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Assign a value to a key in the execution&#39;s key-value store. &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The set step uses Python expressions.&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- set:&#xA;    user_preference: &#39;&#34;dark_mode&#34;&#39; # &amp;lt;-- python expression&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Iteration Steps&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Name &lt;/th&gt; &#xA;   &lt;th&gt; About &lt;/th&gt;&#xA;   &lt;th&gt;Syntax&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Foreach&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Iterate over a collection and perform steps for each item &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- foreach:&#xA;    in: _.data_list # &amp;lt;-- python expression to access the context variable&#xA;    do:&#xA;      - log: &#34;Processing item {{_.item}}&#34; # &amp;lt;-- jinja template to access the context variable&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Map-Reduce&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Map over a collection and reduce the results &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- map_reduce:&#xA;    over: _.numbers # &amp;lt;-- python expression to access the context variable&#xA;    map:&#xA;      - evaluate:&#xA;          squared: &#34;_ ** 2&#34;&#xA;    reduce: results + [_] # &amp;lt;-- (optional) python expression to reduce the results. This is the default if omitted.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- map_reduce:&#xA;    over: _.topics&#xA;    map:&#xA;      - prompt: Write an essay on {{_}}&#xA;    parallelism: 10&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Parallel&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Run multiple steps in parallel &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- parallel:&#xA;    - tool: web_search&#xA;      arguments:&#xA;        query: &#39;&#34;AI news&#34;&#39;&#xA;    - tool: weather_check&#xA;      arguments:&#xA;        location: &#39;&#34;New York&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Conditional Steps&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Name &lt;/th&gt; &#xA;   &lt;th&gt; About &lt;/th&gt;&#xA;   &lt;th&gt;Syntax&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;If-Else&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Conditional execution of steps &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- if: _.score &amp;gt; 0.8 # &amp;lt;-- python expression&#xA;  then:&#xA;    - log: High score achieved&#xA;  else:&#xA;    - error: Score needs improvement&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Switch&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Execute steps based on multiple conditions &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- switch:&#xA;    - case: _.category == &#39;A&#39;&#xA;      then:&#xA;        - log: &#34;Category A processing&#34;&#xA;    - case: _.category == &#39;B&#39;&#xA;      then:&#xA;        - log: &#34;Category B processing&#34;&#xA;    - case: _ # Default case&#xA;      then:&#xA;        - error: Unknown category&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Other Control Flow&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Name &lt;/th&gt; &#xA;   &lt;th&gt; About &lt;/th&gt;&#xA;   &lt;th&gt;Syntax&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Sleep&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Pause the workflow for a specified duration &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- sleep:&#xA;    seconds: 30&#xA;    # minutes: 1&#xA;    # hours: 1&#xA;    # days: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Return&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Return a value from the workflow &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note:&lt;/b&gt; The return step uses Python expressions.&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- return:&#xA;    result: &#39;&#34;Task completed successfully&#34;&#39; # &amp;lt;-- python expression&#xA;    time: datetime.now().isoformat() # &amp;lt;-- python expression&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Yield&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Run a subworkflow and await its completion &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- yield:&#xA;    workflow: process_data&#xA;    arguments:&#xA;      input_data: _.raw_data # &amp;lt;-- python expression&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Error&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; Handle errors by specifying an error message &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- error: &#34;Invalid input provided&#34; # &amp;lt;-- Strings only&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Each step type serves a specific purpose in building sophisticated AI workflows. This categorization helps in understanding the various control flows and operations available in Julep tasks.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Tool Types&lt;/h2&gt; &#xA;&lt;p&gt;Agents can be given access to a number of &#34;tools&#34; -- any programmatic interface that a foundation model can &#34;call&#34; with a set of inputs to achieve a goal. For example, it might use a &lt;code&gt;web_search(query)&lt;/code&gt; tool to search the Internet for some information.&lt;/p&gt; &#xA;&lt;p&gt;Unlike agent frameworks, julep is a &lt;em&gt;backend&lt;/em&gt; that manages agent execution. Clients can interact with agents using our SDKs. julep takes care of executing tasks and running integrations.&lt;/p&gt; &#xA;&lt;p&gt;Tools in julep can be one of:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;User-defined &lt;code&gt;functions&lt;/code&gt;&lt;/strong&gt;: These are function signatures that you can give the model to choose from, similar to how [openai]&#39;s function-calling works. They need to be handled by the client. The workflow will pause until the client calls the function and gives the results back to julep.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;system&lt;/code&gt; tools&lt;/strong&gt;: Built-in tools that can be used to call the julep APIs themselves, like triggering a task execution, appending to a metadata field, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;integrations&lt;/code&gt;&lt;/strong&gt;: Built-in third party tools that can be used to extend the capabilities of your agents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;api_calls&lt;/code&gt;&lt;/strong&gt;: Direct api calls during workflow executions as tool calls.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;User-defined &lt;code&gt;functions&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These are function signatures that you can give the model to choose from, similar to how [openai]&#39;s function-calling works. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Example system tool task&#xA;description: List agents using system call&#xA;&#xA;tools:&#xA;  - name: send_notification&#xA;    description: Send a notification to the user&#xA;    type: function&#xA;    function:&#xA;      parameters:&#xA;        type: object&#xA;        properties:&#xA;          text:&#xA;            type: string&#xA;            description: Content of the notification&#xA;&#xA;main:&#xA;  - tool: send_notification&#xA;    arguments:&#xA;      content: &#39;&#34;hi&#34;&#39; # &amp;lt;-- python expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whenever julep encounters a &lt;em&gt;user-defined function&lt;/em&gt;, it pauses, giving control back to the client and waits for the client to run the function call and give the results back to julep.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;system&lt;/code&gt; tools&lt;/h3&gt; &#xA;&lt;p&gt;Built-in tools that can be used to call the julep APIs themselves, like triggering a task execution, appending to a metadata field, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;system&lt;/code&gt; tools are built into the backend. They get executed automatically when needed. They do &lt;em&gt;not&lt;/em&gt; require any action from the client-side.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Example system tool task&#xA;description: List agents using system call&#xA;&#xA;tools:&#xA;  - name: list_agent_docs&#xA;    description: List all docs for the given agent&#xA;    type: system&#xA;    system:&#xA;      resource: agent&#xA;      subresource: doc&#xA;      operation: list&#xA;&#xA;main:&#xA;  - tool: list_agents&#xA;    arguments:&#xA;      limit: 10 # &amp;lt;-- python expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Available &lt;code&gt;system&lt;/code&gt; resources and operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;agent&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all agents.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: Get a single agent by id.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create&lt;/code&gt;: Create a new agent.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: Update an existing agent.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: Delete an existing agent.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;user&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all users.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: Get a single user by id.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create&lt;/code&gt;: Create a new user.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: Update an existing user.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: Delete an existing user.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;session&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all sessions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: Get a single session by id.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create&lt;/code&gt;: Create a new session.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: Update an existing session.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: Delete an existing session.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;chat&lt;/code&gt;: Chat with a session.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;history&lt;/code&gt;: Get the chat history with a session.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;task&lt;/code&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all tasks.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;get&lt;/code&gt;: Get a single task by id.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create&lt;/code&gt;: Create a new task.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;update&lt;/code&gt;: Update an existing task.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: Delete an existing task.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;doc&lt;/code&gt; (subresource for &lt;code&gt;agent&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;list&lt;/code&gt;: List all documents.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create&lt;/code&gt;: Create a new document.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: Delete an existing document.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;search&lt;/code&gt;: Search for documents.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional operations available for some resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;embed&lt;/code&gt;: Embed a resource (specific resources not specified in the provided code).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;change_status&lt;/code&gt;: Change the status of a resource (specific resources not specified in the provided code).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chat&lt;/code&gt;: Chat with a resource (specific resources not specified in the provided code).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;history&lt;/code&gt;: Get the chat history with a resource (specific resources not specified in the provided code).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_or_update&lt;/code&gt;: Create a new resource or update an existing one (specific resources not specified in the provided code).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: The availability of these operations may vary depending on the specific resource and implementation details.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] &amp;gt; &lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/06-browser-use.ipynb&#34;&gt;cookbooks/06-browser-use.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Built-in &lt;code&gt;integrations&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Julep comes with a number of built-in integrations (as described in the section below). &lt;code&gt;integration&lt;/code&gt; tools are directly executed on the julep backend. Any additional parameters needed by them at runtime can be set in the agent/session/user&#39;s &lt;code&gt;metadata&lt;/code&gt; fields.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#integrations&#34;&gt;Integrations&lt;/a&gt; for details on the available integrations.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] &amp;gt; &lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/01-website-crawler.ipynb&#34;&gt;cookbooks/01-website-crawler.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Direct &lt;code&gt;api_calls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;julep can also directly make api calls during workflow executions as tool calls. Same as &lt;code&gt;integration&lt;/code&gt;s, additional runtime parameters are loaded from &lt;code&gt;metadata&lt;/code&gt; fields.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Example api_call task&#xA;tools:&#xA;  - type: api_call&#xA;    name: hello&#xA;    api_call:&#xA;      method: GET&#xA;      url: https://httpbin.org/get&#xA;&#xA;main:&#xA;  - tool: hello&#xA;    arguments:&#xA;      json:&#xA;        test: _.input # &amp;lt;-- python expression&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;Julep supports various integrations that extend the capabilities of your AI agents. Here&#39;s a list of available integrations and their supported arguments:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Brave Search&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  api_key: string # The API key for Brave Search&#xA;&#xA;arguments:&#xA;  query: string # The search query for searching with Brave&#xA;&#xA;output:&#xA;  result: list[dict] # A list of search results, each containing: title, link, snippet&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/02-sarcastic-news-headline-generator.ipynb&#34;&gt;cookbooks/02-sarcastic-news-headline-generator.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;BrowserBase&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  api_key: string # The API key for BrowserBase&#xA;  project_id: string # The project ID for BrowserBase&#xA;  session_id: string # (Optional) The session ID for BrowserBase&#xA;&#xA;arguments:&#xA;  urls: list[string] # The URLs for loading with BrowserBase&#xA;&#xA;output:&#xA;  documents: list # The documents loaded from the URLs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/06-browser-use.ipynb&#34;&gt;cookbooks/06-browser-use.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Email&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  host: string # The host of the email server&#xA;  port: integer # The port of the email server&#xA;  user: string # The username of the email server&#xA;  password: string # The password of the email server&#xA;&#xA;arguments:&#xA;  to: string # The email address to send the email to&#xA;  from: string # The email address to send the email from&#xA;  subject: string # The subject of the email&#xA;  body: string # The body of the email&#xA;&#xA;output:&#xA;  success: boolean # Whether the email was sent successfully&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/00-Devfest-Email-Assistant.ipynb&#34;&gt;cookbooks/00-Devfest-Email-Assistant.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Spider&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  spider_api_key: string # The API key for Spider&#xA;&#xA;arguments:&#xA;  url: string # The URL for which to fetch data&#xA;  params: dict # (Optional) The parameters for the Spider API&#xA;  content_type: string # (Optional) The content type to return. Default is &#34;application/json&#34;. Other options: &#34;text/csv&#34;, &#34;application/xml&#34;, &#34;application/jsonl&#34;&#xA;&#xA;output:&#xA;  result: list[dict] # A list of results, each containing: content, error, status, costs, url&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/01-website-crawler.ipynb&#34;&gt;cookbooks/01-website-crawler.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Weather&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  openweathermap_api_key: string # The API key for OpenWeatherMap&#xA;&#xA;arguments:&#xA;  location: string # The location for which to fetch weather data&#xA;&#xA;output:&#xA;  result: string # The weather data for the specified location&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/03-trip-planning-assistant.ipynb&#34;&gt;cookbooks/03-trip-planning-assistant.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;  &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Wikipedia&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;arguments:&#xA;  query: string # The search query string&#xA;  load_max_docs: integer # (Optional) Maximum number of documents to load. Default is 2.&#xA;&#xA;output:&#xA;  documents: list # The documents returned from the Wikipedia search&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/03-trip-planning-assistant.ipynb&#34;&gt;cookbooks/03-trip-planning-assistant.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;FFmpeg&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;arguments:&#xA;  cmd: string # The FFmpeg command to execute&#xA;  file: string # The base64 encoded file to process&#xA;&#xA;output:&#xA;  fileoutput: string # The output file from the FFmpeg command in base64 encoding&#xA;  result: boolean # Whether the FFmpeg command was executed successfully&#xA;  mime_type: string # The MIME type of the output file&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Llama Parse&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  llamaparse_api_key: string # The API key for Llama Parse&#xA;  params: dict # (Optional) Additional parameters for the Llama Parse integration&#xA;&#xA;arguments:&#xA;  file: string | Array&amp;lt;string&amp;gt; # The base64 encoded file to parse or an array of http/https URLs to load.&#xA;  filename: string # (Optional). The filename of the file. Default is a random UUID. Only used if file is a base64 encoded string.&#xA;  params: dict # (Optional) Additional parameters for the Llama Parse integration. Overrides the setup parameters.&#xA;  base64: boolean # Whether the input file is base64 encoded. Default is false.&#xA;&#xA;output:&#xA;  documents: list[Document] # A list of parsed documents&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/07-personalized-research-assistant.ipynb&#34;&gt;cookbooks/07-personalized-research-assistant.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Cloudinary&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;method: media_upload | media_edit # The method to use for the Cloudinary integration&#xA;&#xA;setup:&#xA;  cloudinary_cloud_name: string # Your Cloudinary cloud name&#xA;  cloudinary_api_key: string # Your Cloudinary API key&#xA;  cloudinary_api_secret: string # Your Cloudinary API secret&#xA;  params: dict # (Optional) Additional parameters for the Cloudinary integration&#xA;&#xA;arguments:&#xA;  file: string # The URL of the file upload. Only available for media_upload method.&#xA;  upload_params: dict # (Optional) Additional parameters for the upload. Only available for media_upload method.&#xA;  public_id: string # (Optional) The public ID for the file. For media_edit method it is MANDATORY. For media_upload method it is optional. Default is a random UUID.&#xA;  transformation: list[dict] # The transformations to apply to the file. Only available for media_edit method.&#xA;  return_base64: boolean # Whether to return the file in base64 encoding. Default is false.&#xA;&#xA;output:&#xA;  url: string # The URL of the uploaded file. Only available for media_upload method.&#xA;  meta_data: dict # Additional metadata from the upload response. Only available for media_upload method.&#xA;  public_id: string # The public ID of the uploaded file. Only available for media_upload method.&#xA;  transformed_url: string # (Optional) The transformed URL. Only available for media_edit method.&#xA;  base64: string # (Optional) The base64 encoded file if return_base64 is true.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/05-video-processing-with-natural-language.ipynb&#34;&gt;cookbooks/05-video-processing-with-natural-language.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;b&gt;Arxiv&lt;/b&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;method: search # The method to use for the Arxiv integration&#xA;&#xA;setup:&#xA;  # No specific setup parameters are required for Arxiv&#xA;&#xA;arguments:&#xA;  query: string # The search query for searching with Arxiv&#xA;  id_list: list[string] | None # (Optional) The list of Arxiv IDs to search with&#xA;  max_results: integer # The maximum number of results to return, must be between 1 and 300000&#xA;  download_pdf: boolean # Whether to download the PDF of the results. Default is false.&#xA;  sort_by: string # The sort criterion for the results, options: relevance, lastUpdatedDate, submittedDate&#xA;  sort_order: string # The sort order for the results, options: ascending, descending&#xA;&#xA;output:&#xA;  result: list[dict] # A list of search results, each containing: entry_id, title, updated, published, authors, summary, comment, journal_ref, doi, primary_category, categories, links, pdf_url, pdf_downloaded&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Example cookbook&lt;/strong&gt;: &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/cookbooks/07-personalized-research-assistant.ipynb&#34;&gt;cookbooks/07-personalized-research-assistant.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more details, refer to our &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#integrations&#34;&gt;Integrations Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Other Features&lt;/h2&gt; &#xA;&lt;p&gt;Julep offers a range of advanced features to enhance your AI workflows:&lt;/p&gt; &#xA;&lt;h3&gt;Adding Tools to Agents&lt;/h3&gt; &#xA;&lt;p&gt;Extend your agent&#39;s capabilities by integrating external tools and APIs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;client.agents.tools.create(&#xA;    agent_id=agent.id,&#xA;    name=&#34;web_search&#34;,&#xA;    description=&#34;Search the web for information.&#34;,&#xA;    integration={&#xA;        &#34;provider&#34;: &#34;brave&#34;,&#xA;        &#34;method&#34;: &#34;search&#34;,&#xA;        &#34;setup&#34;: {&#34;api_key&#34;: &#34;your_brave_api_key&#34;},&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Managing Sessions and Users&lt;/h3&gt; &#xA;&lt;p&gt;Julep provides robust session management for persistent interactions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;session = client.sessions.create(&#xA;    agent_id=agent.id,&#xA;    user_id=user.id,&#xA;    context_overflow=&#34;adaptive&#34;&#xA;)&#xA;&#xA;# Continue conversation in the same session&#xA;response = client.sessions.chat(&#xA;    session_id=session.id,&#xA;    messages=[&#xA;      {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;Follow up on the previous conversation.&#34;&#xA;      }&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Document Integration and Search&lt;/h3&gt; &#xA;&lt;p&gt;Easily manage and search through documents for your agents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Upload a document&#xA;document = client.agents.docs.create(&#xA;    title=&#34;AI advancements&#34;,&#xA;    content=&#34;AI is changing the world...&#34;,&#xA;    metadata={&#34;category&#34;: &#34;research_paper&#34;}&#xA;)&#xA;&#xA;# Search documents&#xA;results = client.agents.docs.search(&#xA;    text=&#34;AI advancements&#34;,&#xA;    metadata_filter={&#34;category&#34;: &#34;research_paper&#34;}&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;SDK Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; &lt;a href=&#34;https://github.com/julep-ai/node-sdk/raw/main/api.md&#34;&gt;SDK Reference&lt;/a&gt; | &lt;a href=&#34;https://www.npmjs.com/package/@julep/sdk&#34;&gt;NPM Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt; &lt;a href=&#34;https://github.com/julep-ai/python-sdk/raw/main/api.md&#34;&gt;SDK Reference&lt;/a&gt; | &lt;a href=&#34;https://pypi.org/project/julep/&#34;&gt;PyPI Package&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API Reference&lt;/h3&gt; &#xA;&lt;p&gt;Explore our API documentation to learn more about agents, tasks, and executions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.julep.ai/api/docs#tag/agents&#34;&gt;Agents API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.julep.ai/api/docs#tag/tasks&#34;&gt;Tasks API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev.julep.ai/api/docs#tag/executions&#34;&gt;Executions API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Local Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;latest docker compose installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/julep-ai/julep.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd julep&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker volume create cozo_backup&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker volume create cozo_data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cp .env.example .env # &amp;lt;-- Edit this file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker compose --env-file .env --profile temporal-ui --profile single-tenant --profile self-hosted-db up --build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What&#39;s the difference between Julep and LangChain etc?&lt;/h2&gt; &#xA;&lt;h3&gt;Different Use Cases&lt;/h3&gt; &#xA;&lt;p&gt;Think of LangChain and Julep as tools with different focuses within the AI development stack.&lt;/p&gt; &#xA;&lt;p&gt;LangChain is great for creating sequences of prompts and managing interactions with LLMs. It has a large ecosystem with lots of pre-built integrations, which makes it convenient if you want to get something up and running quickly. LangChain fits well with simple use cases that involve a linear chain of prompts and API calls.&lt;/p&gt; &#xA;&lt;p&gt;Julep, on the other hand, is more about building persistent AI agents that can maintain context over long-term interactions. It shines when you need complex workflows that involve multi-step tasks, conditional logic, and integration with various tools or APIs directly within the agent&#39;s process. It&#39;s designed from the ground up to manage persistent sessions and complex workflows.&lt;/p&gt; &#xA;&lt;p&gt;Use Julep if you imagine building a complex AI assistant that needs to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep track of user interactions over days or weeks.&lt;/li&gt; &#xA; &lt;li&gt;Perform scheduled tasks, like sending daily summaries or monitoring data sources.&lt;/li&gt; &#xA; &lt;li&gt;Make decisions based on prior interactions or stored data.&lt;/li&gt; &#xA; &lt;li&gt;Interact with multiple external services as part of its workflow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then Julep provides the infrastructure to support all that without you having to build it from scratch.&lt;/p&gt; &#xA;&lt;h3&gt;Different Form Factor&lt;/h3&gt; &#xA;&lt;p&gt;Julep is a &lt;strong&gt;platform&lt;/strong&gt; that includes a language for describing workflows, a server for running those workflows, and an SDK for interacting with the platform. In order to build something with Julep, you write a description of the workflow in &lt;code&gt;YAML&lt;/code&gt;, and then run the workflow in the cloud.&lt;/p&gt; &#xA;&lt;p&gt;Julep is built for heavy-lifting, multi-step, and long-running workflows and there&#39;s no limit to how complex the workflow can be.&lt;/p&gt; &#xA;&lt;p&gt;LangChain is a &lt;strong&gt;library&lt;/strong&gt; that includes a few tools and a framework for building linear chains of prompts and tools. In order to build something with LangChain, you typically write Python code that configures and runs the model chains you want to use.&lt;/p&gt; &#xA;&lt;p&gt;LangChain might be sufficient and quicker to implement for simple use cases that involve a linear chain of prompts and API calls.&lt;/p&gt; &#xA;&lt;h3&gt;In Summary&lt;/h3&gt; &#xA;&lt;p&gt;Use LangChain when you need to manage LLM interactions and prompt sequences in a stateless or short-term context.&lt;/p&gt; &#xA;&lt;p&gt;Choose Julep when you need a robust framework for stateful agents with advanced workflow capabilities, persistent sessions, and complex task orchestration.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#top&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Back%20to%20Top-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Back to Top&#34;&gt; &lt;/a&gt;&amp;nbsp;|&amp;nbsp; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#-table-of-contents&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Table%20of%20Contents-000000?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;Table of Contents&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>