<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-18T01:38:31Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IBM-EPBL/IBM-Project-17508-1659672731</title>
    <updated>2022-09-18T01:38:31Z</updated>
    <id>tag:github.com,2022-09-18:/IBM-EPBL/IBM-Project-17508-1659672731</id>
    <link href="https://github.com/IBM-EPBL/IBM-Project-17508-1659672731" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fertilizers Recommendation System For Disease Prediction&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;fill&#34;&gt; &lt;img src=&#34;https://i.postimg.cc/HnQSb20b/IBM.jpg&#34;&gt; &lt;/h1&gt; &#xA;&lt;h2&gt;Fertilizers Recommendation System For Disease Prediction &lt;img src=&#34;https://media1.giphy.com/media/f9Auu2zwYo1XGTsSPg/giphy.gif?cid=ecf05e47tnkhhm9of0gy1c66gntftbo34jm2iv8h5o4tq63e&amp;amp;rid=giphy.gif&amp;amp;ct=s&#34; width=&#34;30px&#34;&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;MOTIVATION &lt;img src=&#34;https://raw.githubusercontent.com/MartinHeinz/MartinHeinz/master/wave.gif&#34; width=&#34;30px&#34;&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Farming is one of the major sectors that influences a country’s economic growth.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In country like India, majority of the population is dependent on agriculture for their livelihood. Many new technologies, such as Machine Learning and Deep Learning, are being implemented into agriculture so that it is easier for farmers to grow and maximize their yield.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In this project, I present a website in which the following applications are implemented; Crop recommendation, Fertilizer recommendation and Plant disease prediction, respectively.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;In the crop recommendation application, the user can provide the soil data from their side and the application will predict which crop should the user grow.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For the fertilizer recommendation application, the user can input the soil data and the type of crop they are growing, and the application will predict what the soil lacks or has excess of and will recommend improvements.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For the last application, that is the plant disease prediction application, the user can input an image of a diseased plant leaf, and the application will predict what disease it is and will also give a little background about the disease and suggestions to cure it.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project status: Prototype&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project workflow &lt;img src=&#34;https://media3.giphy.com/media/BtVpIOi3doaz3RE5w4/giphy.gif?cid=ecf05e47rkw5pzp7hc9nz6ue1646xz5f4s8ucn1gp6omn9d5&amp;amp;rid=giphy.gif&amp;amp;ct=s&#34; width=&#34;30px&#34;&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Use for instance &lt;a href=&#34;https://github.com/IBM-EPBL/IBM-Project-17508-1659672731&#34;&gt;https://github.com/IBM-EPBL/IBM-Project-17508-1659672731&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Fertilizers Recommendation System For Disease Prediction&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;  * Project Progress &#xA;  &#xA;      * [Problem Statement] - [ https://github.com/IBM-EPBL/IBM-Project-17508-1659672731/blob/main/Problem_Statement_Fertilizer_recomentation_system_for_disease_prediction.pdf ]&#xA;      &#xA;      * [Empathy Map] - [ https://user-images.githubusercontent.com/87495210/189498124-818e4c89-cfda-4961-bd84-85d1c1ab10d2.png ]&#xA;      &#xA;      * [Literature Review] - [ https://github.com/IBM-EPBL/IBM-Project-17508-1659672731/blob/main/IBM_literature%20_survey.pdf ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h2&gt;Project Objectives: &lt;img src=&#34;https://media3.giphy.com/media/PiAjGFVGKd9vvhrxLa/giphy.gif?cid=ecf05e47q3eaer6sqflvudf7hihc8qzeq95zw7nga3pcbccc&amp;amp;rid=giphy.gif&amp;amp;ct=s&#34; width=&#34;30px&#34;&gt;&lt;/h2&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;    1. Preprocess the images.&#xA;&#xA;    2. Applying the CNN algorithm to the dataset.&#xA;&#xA;    3. How deep neural networks detect the disease.&#xA;&#xA;    4. You will be able to know how to find the accuracy of the model.&#xA;&#xA;    5. You will be able to build web applications using the Flask framework.   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Agriculture is the most important sector in today’s life. Most plants are affected by a wide variety of bacterial and fungal diseases. Diseases on plants placed a major constraint on the production and a major threat to food security. Hence, early and accurate identification of plant diseases is essential to ensure high quantity and best quality. In recent years, the number of diseases on plants and the degree of harm caused has increased due to the variation in pathogen varieties, changes in cultivation methods, and inadequate plant protection techniques.&lt;/p&gt; &#xA;&lt;p&gt;An automated system is introduced to identify different diseases on plants by checking the symptoms shown on the leaves of the plant. Deep learning techniques are used to identify the diseases and suggest the precautions that can be taken for those diseases.&lt;/p&gt; &#xA;&lt;h2&gt;Technical Architecture :&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/89697515/189512983-8f4757ef-6f88-4a87-b3c3-9755d09a61e5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paulrobustelli/CHEM101.6</title>
    <updated>2022-09-18T01:38:31Z</updated>
    <id>tag:github.com,2022-09-18:/paulrobustelli/CHEM101.6</id>
    <link href="https://github.com/paulrobustelli/CHEM101.6" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;These are the Materials For the Dartmouth Course CHEM101.6 &#34;Computational Methods in Chemistry and Biophysics&#34;.&lt;/p&gt; &#xA;&lt;p&gt;We utilized the Zuckerman&#39;s &#34;Statistical Physics of Biomolecules&#34; as our primary textbook for this course.&lt;/p&gt; &#xA;&lt;p&gt;The course was structured with to have a 1.5 hour lecture and a 1.5 hour interactive jupyter notebook coding lab each week.&lt;/p&gt; &#xA;&lt;p&gt;This repo contains jupyter notebooks for the 6 in class execrcises, and links to the recordings of 7 1.5 hour lectures.&lt;/p&gt; &#xA;&lt;p&gt;Each exercise had an in class demo portion, where I completed a portion of the notebooks interactively with the students, but I don&#39;t have video for many of these classes.&lt;/p&gt; &#xA;&lt;p&gt;For some exercises, I have posted a second notebook that has the solutions to the classroom activities completed. A few exercises have &#34;Instructor Solutions&#34; available as well.&lt;/p&gt; &#xA;&lt;p&gt;Lecture 1 (Force Field &amp;amp; MD Basics)&lt;/p&gt; &#xA;&lt;p&gt;Lecture 1 Notes: &lt;a href=&#34;https://www.dropbox.com/s/8strabjkktz78qc/CHEM101.6_W22_Lecture1_1.11.22.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/8strabjkktz78qc/CHEM101.6_W22_Lecture1_1.11.22.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/a92l53671ybouyt/CHEM101.6_W22_Lecture1_1.11.22.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/a92l53671ybouyt/CHEM101.6_W22_Lecture1_1.11.22.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 1 Video: &lt;a href=&#34;https://www.dropbox.com/s/dyud7rw25s9i6so/CHEM101.6-W22_Lecture1_ForceFIelds_MDbasics.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/dyud7rw25s9i6so/CHEM101.6-W22_Lecture1_ForceFIelds_MDbasics.mp4?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 1: (OpenMM Simulations of Butane, MD Traj Basics, Concepts From Zuckerman Chapters 1-2) &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/Chem101.6_Project1_Classroom_Solutions_1.13.22.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/Chem101.6_Project1_Classroom_Solutions_1.13.22.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 1 Solutions: &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/Chem101.6_Project1_Classroom_Solutions_1.13.22.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/Chem101.6_Project1_Classroom_Solutions_1.13.22.ipynb&lt;/a&gt; &lt;a href=&#34;https://github.com/paulrobustelli/python_demos/raw/main/Chem101.6_Project1_Instructor_Solutions.ipynb&#34;&gt;https://github.com/paulrobustelli/python_demos/blob/main/Chem101.6_Project1_Instructor_Solutions.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 2 (MD &amp;amp; Protein Structure Basics)&lt;/p&gt; &#xA;&lt;p&gt;Lecture 2 Notes: &lt;a href=&#34;https://www.dropbox.com/s/tg7rjfhh12m85jv/CHEM101.6_W22_Lecture2_1.18.22.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/tg7rjfhh12m85jv/CHEM101.6_W22_Lecture2_1.18.22.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/uchtd3cq72ie8hp/CHEM101.6_W22_Lecture2_1.18.22.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/uchtd3cq72ie8hp/CHEM101.6_W22_Lecture2_1.18.22.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 2 Video: part 1: &lt;a href=&#34;https://www.dropbox.com/s/r7gsenuvieud8m1/CHEM101.6-W22_Lecture2_Part1_ProteinStructure.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/r7gsenuvieud8m1/CHEM101.6-W22_Lecture2_Part1_ProteinStructure.mp4?dl=0&lt;/a&gt; part 2: &lt;a href=&#34;https://www.dropbox.com/s/yp7wmafrrtiifah/CHEM101.6-W22_Lecture2_Part2_ProteinStructure.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/yp7wmafrrtiifah/CHEM101.6-W22_Lecture2_Part2_ProteinStructure.mp4?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 2 (VMD &amp;amp; Protein Dynamics Basics): &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/CHEM101.6_Project2_Students.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/CHEM101.6_Project2_Students.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 2 Class Portion: &lt;a href=&#34;https://dartmouth.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=e018e7cd-110a-4735-9552-ae2301664532&#34;&gt;https://dartmouth.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=e018e7cd-110a-4735-9552-ae2301664532&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 3 (Topics From Zuckerman Chapters 1-4)&lt;/p&gt; &#xA;&lt;p&gt;Lecture 3 Notes: With Space for additional note taking: &lt;a href=&#34;https://www.dropbox.com/s/0lf0kaqgrc7p605/CHEM101.6_W22_Lecture3_1.25.22_blanks.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/0lf0kaqgrc7p605/CHEM101.6_W22_Lecture3_1.25.22_blanks.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/hpnqc2eb4g0f5fi/CHEM101.6_W22_Lecture3_1.25.22_blanks.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/hpnqc2eb4g0f5fi/CHEM101.6_W22_Lecture3_1.25.22_blanks.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additional notes filled in: &lt;a href=&#34;https://www.dropbox.com/s/ph0ml80e3gasmjq/CHEM101.6_W22_Lecture3_1.25.22_notes.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/ph0ml80e3gasmjq/CHEM101.6_W22_Lecture3_1.25.22_notes.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/s62s5qqxnowuazb/CHEM101.6_W22_Lecture3_1.25.22_notes.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/s62s5qqxnowuazb/CHEM101.6_W22_Lecture3_1.25.22_notes.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 3 Video: &lt;a href=&#34;https://www.dropbox.com/s/5ni4m8z7l409kgw/CHEM101.6-W22_Lecture3_Zuckerman_Ch1-4.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/5ni4m8z7l409kgw/CHEM101.6-W22_Lecture3_Zuckerman_Ch1-4.mp4?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 3 (Ubiquitin Dynamics): &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/CHEM101.6_Project3_UBQ_Students.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/CHEM101.6_Project3_UBQ_Students.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 3: Solutions: &lt;a href=&#34;https://github.com/paulrobustelli/python_demos/raw/main/CHEM101.6_Project3_Instructor.ipynb&#34;&gt;https://github.com/paulrobustelli/python_demos/blob/main/CHEM101.6_Project3_Instructor.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 4 (Topics From Zuckerman Chapters 3-4, Protein Folding &amp;amp; Intrinsically Disordered Proteins)&lt;/p&gt; &#xA;&lt;p&gt;Lecture 4 Notes: &lt;a href=&#34;https://www.dropbox.com/s/wtf0jmovn8d5yhn/CHEM101.6_W22_Lecture4_2.1.22.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/wtf0jmovn8d5yhn/CHEM101.6_W22_Lecture4_2.1.22.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/45eb3qir98gw6st/CHEM101.6_W22_Lecture4_2.1.22.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/45eb3qir98gw6st/CHEM101.6_W22_Lecture4_2.1.22.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 4 Video: &lt;a href=&#34;https://www.dropbox.com/s/n3ptlg1b14nc43f/CHEM101.6-W22_Lecture4_ProteinFolding_IDPs.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/n3ptlg1b14nc43f/CHEM101.6-W22_Lecture4_ProteinFolding_IDPs.mp4?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 4 (Analyzing a Protein Folding MD Simulations) &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/CHEM101.6_Project4_Student.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/CHEM101.6_Project4_Student.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 5 (Protein Structure and Dynamics from NMR)&lt;/p&gt; &#xA;&lt;p&gt;Lecture 5 Notes: &lt;a href=&#34;https://www.dropbox.com/s/so8lvb5pcn6vh78/CHEM101.6_W22_Lecture5_2.8.22.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/so8lvb5pcn6vh78/CHEM101.6_W22_Lecture5_2.8.22.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/quj0z4yjl67vjk3/CHEM101.6_W22_Lecture5_2.8.22.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/quj0z4yjl67vjk3/CHEM101.6_W22_Lecture5_2.8.22.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 5 Video: &lt;a href=&#34;https://www.dropbox.com/s/zh7s3ap5mayokd5/CHEM101.6-W22_Lecture5_NMR.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/zh7s3ap5mayokd5/CHEM101.6-W22_Lecture5_NMR.mp4?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 6 (Enhanced Sampling - Replica Exchange &amp;amp; Metadynamics)&lt;/p&gt; &#xA;&lt;p&gt;Lecture 6 Notes: &lt;a href=&#34;https://www.dropbox.com/s/m1gresone4xsdqo/CHEM101.6_W22_Lecture6_2.14.22.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/m1gresone4xsdqo/CHEM101.6_W22_Lecture6_2.14.22.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/dtvn5jv1pb3qewx/CHEM101.6_W22_Lecture6_2.14.22.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/dtvn5jv1pb3qewx/CHEM101.6_W22_Lecture6_2.14.22.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 6 Video: &lt;a href=&#34;https://www.dropbox.com/s/2s90mif1tvjchdk/CHEM101.6-W22_Lecture6_EnhancedSampling.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/2s90mif1tvjchdk/CHEM101.6-W22_Lecture6_EnhancedSampling.mp4?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 5 (Alanine Dipeptide Metadynamics): &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/CHEM101.6_Project5_MetaDynamics_aladipeptide_student.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/CHEM101.6_Project5_MetaDynamics_aladipeptide_student.ipynb&lt;/a&gt; &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/Project5_MetaDynamics_aladipeptide_student.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/Project5_MetaDynamics_aladipeptide_student.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 5 Class Solutions: &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/Project5_MetaDynamics_aladipeptide_class_solutions.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/Project5_MetaDynamics_aladipeptide_class_solutions.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 6 (Replica Exchange &amp;amp; Statistical Errors): &lt;a href=&#34;https://github.com/paulrobustelli/CHEM101.6/raw/main/Project6_repex_blockerrors.ipynb&#34;&gt;https://github.com/paulrobustelli/CHEM101.6/blob/main/Project6_repex_blockerrors.ipynb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercise 6 Demo (Replica Exchange &amp;amp; Statistical Errors From Blocking): &lt;a href=&#34;https://dartmouth.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=cb86ff15-2c80-47a5-9e77-ae4601678547&#34;&gt;https://dartmouth.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=cb86ff15-2c80-47a5-9e77-ae4601678547&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 7 (Water/Solvation &amp;amp; Ligand Binding)&lt;/p&gt; &#xA;&lt;p&gt;Lecture 7 Notes: &lt;a href=&#34;https://www.dropbox.com/s/9c6n1brakmfrzmv/CHEM101.6_W22_Lecture7_3.1.22.pdf?dl=0&#34;&gt;https://www.dropbox.com/s/9c6n1brakmfrzmv/CHEM101.6_W22_Lecture7_3.1.22.pdf?dl=0&lt;/a&gt; &lt;a href=&#34;https://www.dropbox.com/s/q2y3litmsg9d95a/CHEM101.6_W22_Lecture7_3.1.22.pptx?dl=0&#34;&gt;https://www.dropbox.com/s/q2y3litmsg9d95a/CHEM101.6_W22_Lecture7_3.1.22.pptx?dl=0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lecture 7 Video: &lt;a href=&#34;https://www.dropbox.com/s/83jih2xw3kgcxm1/CHEM101.6-W22_Lecture7_Water_LigandBinding.mp4?dl=0&#34;&gt;https://www.dropbox.com/s/83jih2xw3kgcxm1/CHEM101.6-W22_Lecture7_Water_LigandBinding.mp4?dl=0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>a-r-j/graphein</title>
    <updated>2022-09-18T01:38:31Z</updated>
    <id>tag:github.com,2022-09-18:/a-r-j/graphein</id>
    <link href="https://github.com/a-r-j/graphein" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protein Graph Library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://mybinder.org/v2/gh/a-r-j/graphein-binder/master?urlpath=git-pull%3Frepo%3Dhttps%253A%252F%252Fgithub.com%252Fa-r-j%252Fgraphein%26urlpath%3Dlab%252Ftree%252Fgraphein%252Fnotebooks%26branch%3Dmaster&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/graphein&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/graphein.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/graphein&#34; alt=&#34;supported python versions&#34;&gt; &lt;a href=&#34;http://www.graphein.ai&#34;&gt;&lt;img src=&#34;https://assets.readthedocs.org/static/projects/badges/passing-flat.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.1101/2020.07.15.204701&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.1101/2020.07.15.204701.svg?sanitize=true&#34; alt=&#34;DOI:10.1101/2020.07.15.204701&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;Project Status: Active – The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;Project Status: Active – The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/a-r-j/graphein&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/a-r-j/graphein/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=a-r-j_graphein&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=a-r-j_graphein&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=a-r-j_graphein&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=a-r-j_graphein&amp;amp;metric=bugs&#34; alt=&#34;Bugs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=a-r-j_graphein&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=a-r-j_graphein&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=a-r-j_graphein&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=a-r-j_graphein&amp;amp;metric=reliability_rating&#34; alt=&#34;Reliability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/graphein&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img alt=&#34;Code style: black&#34; src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.graphein.ai/#gh-light-mode-only&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/a-r-j/graphein/master/imgs/graphein.png&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.graphein.ai/#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/a-r-j/graphein/master/imgs/graphein_dark.png&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.graphein.ai&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://www.biorxiv.org/content/10.1101/2020.07.15.204701v1&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;http://graphein.ai/notebooks_index.html&#34;&gt;Tutorials&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/a-r-j/graphein/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Protein &amp;amp; Interactomic Graph Library&lt;/p&gt; &#xA;&lt;p&gt;This package provides functionality for producing geometric representations of protein and RNA structures, and biological interaction networks. We provide compatibility with standard PyData formats, as well as graph objects designed for ease of use with popular deep learning libraries.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s New?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/molecule_tutorial.html&#34;&gt;Constructing molecular graphs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/molecule_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/dataloader_tutorial.html&#34;&gt;Ready-to-go Dataloaders for PyTorch Geometric&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/dataloader_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/subgraphing_tutorial.html&#34;&gt;Extracting subgraphs from protein graphs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/subgraphing_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/protein_graph_analytics.html&#34;&gt;Protein Graph Analytics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/protein_graph_analytics.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/getting_started/usage.html&#34;&gt;Graphein CLI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/alphafold_protein_graph_tutorial.html&#34;&gt;Protein Graph Creation from AlphaFold2!&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/residue_graphs.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/interactive_plotly_example.html&#34;&gt;Protein Graph Visualisation!&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/interactive_plotly_example.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.rna.html&#34;&gt;RNA Graph Construction from Dotbracket notation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/rna_graph_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/ppi_tutorial.html&#34;&gt;Protein - Protein Interaction Network Support &amp;amp; Structural Interactomics (Using AlphaFold2!)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/ppi_graph.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/residue_graphs.html&#34;&gt;High and Low-level API for massive flexibility - create your own bespoke workflows!&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/residue_graphs.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;p&gt;Graphein provides both a programmatic API and a command-line interface for constructing graphs.&lt;/p&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;Graphein configs can be specified as &lt;code&gt;.yaml&lt;/code&gt; files to batch process graphs from the commandline.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://graphein.ai/getting_started/usage.html&#34;&gt;Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;graphein -c config.yaml -p path/to/pdbs -o path/to/output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Protein Graph&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/residue_graphs.html&#34;&gt;Tutorial (Residue-level)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/atom_graph_tutorial.html&#34;&gt;Tutorial (Atomic)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.protein.html#module-graphein.protein.graphs&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/residue_graphs.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/atom_graph_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab(https://colab.research.google.com/assets/colab-badge.svg)&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphein.protein.config import ProteinGraphConfig&#xA;from graphein.protein.graphs import construct_graph&#xA;&#xA;config = ProteinGraphConfig()&#xA;g = construct_graph(config=config, pdb_code=&#34;3eiy&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Protein Graph from the AlphaFold Protein Structure Database&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/alphafold_protein_graph_tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.protein.html#module-graphein.protein.graphs&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/residue_graphs.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphein.protein.config import ProteinGraphConfig&#xA;from graphein.protein.graphs import construct_graph&#xA;from graphein.protein.utils import download_alphafold_structure&#xA;&#xA;config = ProteinGraphConfig()&#xA;fp = download_alphafold_structure(&#34;Q5VSL9&#34;, aligned_score=False)&#xA;g = construct_graph(config=config, pdb_path=fp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Protein Mesh&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/protein_mesh_tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.protein.html#module-graphein.protein.meshes&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/protein_mesh_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphein.protein.config import ProteinMeshConfig&#xA;from graphein.protein.meshes import create_mesh&#xA;&#xA;verts, faces, aux = create_mesh(pdb_code=&#34;3eiy&#34;, config=config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating Molecular Graphs&lt;/h3&gt; &#xA;&lt;p&gt;Graphein can create molecular graphs from smiles strings as well as &lt;code&gt;.sdf&lt;/code&gt;, &lt;code&gt;.mol2&lt;/code&gt;, and &lt;code&gt;.pdb&lt;/code&gt; files&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/molecule_tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.molecule.html&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/molecule_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphein.molecule.config import MoleculeGraphConfig&#xA;from graphein.molecule.graphs import construct_graph&#xA;&#xA;g = create_graph(smiles=&#34;CC(=O)OC1=CC=CC=C1C(=O)O&#34;, config=config)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating an RNA Graph&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/rna_notebooks.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.rna.html&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/rna_graph_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphein.rna.graphs import construct_rna_graph&#xA;# Build the graph from a dotbracket &amp;amp; optional sequence&#xA;rna = construct_rna_graph(dotbracket=&#39;..(((((..(((...)))..)))))...&#39;,&#xA;                          sequence=&#39;UUGGAGUACACAACCUGUACACUCUUUC&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Protein-Protein Interaction Graph&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/ppi_tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.ppi.html&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/ppi_graph.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphein.ppi.config import PPIGraphConfig&#xA;from graphein.ppi.graphs import compute_ppi_graph&#xA;from graphein.ppi.edges import add_string_edges, add_biogrid_edges&#xA;&#xA;config = PPIGraphConfig()&#xA;protein_list = [&#34;CDC42&#34;, &#34;CDK1&#34;, &#34;KIF23&#34;, &#34;PLK1&#34;, &#34;RAC2&#34;, &#34;RACGAP1&#34;, &#34;RHOA&#34;, &#34;RHOB&#34;]&#xA;&#xA;g = compute_ppi_graph(config=config,&#xA;                      protein_list=protein_list,&#xA;                      edge_construction_funcs=[add_string_edges, add_biogrid_edges]&#xA;                     )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating a Gene Regulatory Network Graph&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/notebooks/grn_tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://graphein.ai/modules/graphein.grn.html&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://colab.research.google.com/github/a-r-j/graphein/blob/master/notebooks/grn_tutorial.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from graphein.grn.config import GRNGraphConfig&#xA;from graphein.grn.graphs import compute_grn_graph&#xA;from graphein.grn.edges import add_regnetwork_edges, add_trrust_edges&#xA;&#xA;config = GRNGraphConfig()&#xA;gene_list = [&#34;AATF&#34;, &#34;MYC&#34;, &#34;USF1&#34;, &#34;SP1&#34;, &#34;TP53&#34;, &#34;DUSP1&#34;]&#xA;&#xA;g = compute_grn_graph(&#xA;    gene_list=gene_list,&#xA;    edge_construction_funcs=[&#xA;        partial(add_trrust_edges, trrust_filtering_funcs=config.trrust_config.filtering_functions),&#xA;        partial(add_regnetwork_edges, regnetwork_filtering_funcs=config.regnetwork_config.filtering_functions),&#xA;    ],&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Pip&lt;/h3&gt; &#xA;&lt;p&gt;The simplest install is via pip. &lt;em&gt;N.B this does not install ML/DL libraries which are required for conversion to their data formats and for generating protein structure meshes with PyTorch 3D.&lt;/em&gt; &lt;a href=&#34;http://graphein.ai//getting_started/installation.html&#34;&gt;Further details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install graphein # For base install&#xA;pip install graphein[extras] # For additional featurisation dependencies&#xA;pip install graphein[dev] # For dev dependencies&#xA;pip install graphein[all] # To get the lot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, there are a number of (optional) utilities (&lt;a href=&#34;https://anaconda.org/salilab/dssp&#34;&gt;DSSP&lt;/a&gt;, &lt;a href=&#34;https://pymol.org/2/&#34;&gt;PyMol&lt;/a&gt;, &lt;a href=&#34;https://getcontacts.github.io/&#34;&gt;GetContacts&lt;/a&gt;) that are not available via PyPI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c salilab dssp # Required for computing secondary structural features&#xA;conda install -c schrodinger pymol # Required for PyMol visualisations &amp;amp; mesh generation&#xA;&#xA;# GetContacts - used as an alternative way to compute intramolecular interactions&#xA;conda install -c conda-forge vmd-python&#xA;git clone https://github.com/getcontacts/getcontacts&#xA;&#xA;# Add folder to PATH&#xA;echo &#34;export PATH=\$PATH:`pwd`/getcontacts&#34; &amp;gt;&amp;gt; ~/.bashrc&#xA;source ~/.bashrc&#xA;To test the installation, run:&#xA;&#xA;cd getcontacts/example/5xnd&#xA;get_dynamic_contacts.py --topology 5xnd_topology.pdb \&#xA;                        --trajectory 5xnd_trajectory.dcd \&#xA;                        --itypes hb \&#xA;                        --output 5xnd_hbonds.tsv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conda environment&lt;/h3&gt; &#xA;&lt;p&gt;The dev environment includes GPU Builds (CUDA 11.1) for each of the deep learning libraries integrated into graphein.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://www.github.com/a-r-j/graphein&#xA;cd graphein&#xA;conda env create -f environment-dev.yml&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A lighter install can be performed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://www.github.com/a-r-j/graphein&#xA;cd graphein&#xA;conda env create -f environment.yml&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dockerfile&lt;/h3&gt; &#xA;&lt;p&gt;We provide two &lt;code&gt;docker-compose&lt;/code&gt; files for CPU (&lt;code&gt;docker-compose.cpu.yml&lt;/code&gt;) and GPU usage (&lt;code&gt;docker-compose.yml&lt;/code&gt;) locally. For GPU usage please ensure that you have &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt; installed. Ensure that you install the locally mounted volume after entering the container (&lt;code&gt;pip install -e .&lt;/code&gt;). This will also setup the dev environment locally.&lt;/p&gt; &#xA;&lt;p&gt;To build (GPU) run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d --build # start the container&#xA;docker-compose down # stop the container&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citing Graphein&lt;/h2&gt; &#xA;&lt;p&gt;Please consider citing graphein if it proves useful in your work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article {Jamasb2020.07.15.204701,&#xA; author = {Jamasb, Arian R. and Vi{\~n}as, Ramon and Ma, Eric J. and Harris, Charlie and Huang, Kexin and Hall, Dominic and Li{\&#39;o}, Pietro and Blundell, Tom L.},&#xA; title = {Graphein - a Python Library for Geometric Deep Learning and Network Analysis on Protein Structures and Interaction Networks},&#xA; elocation-id = {2020.07.15.204701},&#xA; year = {2021},&#xA; doi = {10.1101/2020.07.15.204701},&#xA; publisher = {Cold Spring Harbor Laboratory},&#xA; abstract = {Geometric deep learning has well-motivated applications in the context of biology, a domain where relational structure in datasets can be meaningfully leveraged. Currently, efforts in both geometric deep learning and, more broadly, deep learning applied to biomolecular tasks have been hampered by a scarcity of appropriate datasets accessible to domain specialists and machine learning researchers alike. However, there has been little exploration of how to best to integrate and construct geometric representations of these datatypes. To address this, we introduce Graphein as a turn-key tool for transforming raw data from widely-used bioinformatics databases into machine learning-ready datasets in a high-throughput and flexible manner. Graphein is a Python library for constructing graph and surface-mesh representations of protein structures and biological interaction networks for computational analysis. Graphein provides utilities for data retrieval from widely-used bioinformatics databases for structural data, including the Protein Data Bank, the recently-released AlphaFold Structure Database, and for biomolecular interaction networks from STRINGdb, BioGrid, TRRUST and RegNetwork. The library interfaces with popular geometric deep learning libraries: DGL, PyTorch Geometric and PyTorch3D though remains framework agnostic as it is built on top of the PyData ecosystem to enable inter-operability with scientific computing tools and libraries. Graphein is designed to be highly flexible, allowing the user to specify each step of the data preparation, scalable to facilitate working with large protein complexes and interaction graphs, and contains useful pre-processing tools for preparing experimental files. Graphein facilitates network-based, graph-theoretic and topological analyses of structural and interaction datasets in a high-throughput manner. As example workflows, we make available two new protein structure-related datasets, previously unused by the geometric deep learning community. We envision that Graphein will facilitate developments in computational biology, graph representation learning and drug discovery.Availability and implementation Graphein is written in Python. Source code, example usage and tutorials, datasets, and documentation are made freely available under the MIT License at the following URL: graphein.aiCompeting Interest StatementThe authors have declared no competing interest.},&#xA; URL = {https://www.biorxiv.org/content/early/2021/10/12/2020.07.15.204701},&#xA; eprint = {https://www.biorxiv.org/content/early/2021/10/12/2020.07.15.204701.full.pdf},&#xA; journal = {bioRxiv}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>