<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T01:37:22Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IDEA-Research/Grounded-Segment-Anything</title>
    <updated>2023-04-09T01:37:22Z</updated>
    <id>tag:github.com,2023-04-09:/IDEA-Research/Grounded-Segment-Anything</id>
    <link href="https://github.com/IDEA-Research/Grounded-Segment-Anything" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Marrying Grounding DINO with Segment Anything &amp; Stable Diffusion - Detect , Segment and Generate Anything with Text Inputs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IDEA-Research/Grounded-Segment-Anything/main/assets/Grounded-SAM_logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Grounded-Segment-Anything&lt;/h1&gt; &#xA;&lt;p&gt;We plan to create a very interesting demo by combining &lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO&#34;&gt;Grounding DINO&lt;/a&gt; and &lt;a href=&#34;https://github.com/facebookresearch/segment-anything&#34;&gt;Segment Anything&lt;/a&gt;! Right now, this is just a simple small project. We will continue to improve it and create more interesting demos.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why this project?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/segment-anything&#34;&gt;Segment Anything&lt;/a&gt; is a strong segmentation model. But it need prompts (like boxes/points) to generate masks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO&#34;&gt;Grounding DINO&lt;/a&gt; is a strong zero-shot detector which enable to generate high quality boxes and labels with free-form text.&lt;/li&gt; &#xA; &lt;li&gt;The combination of the two models enable to &lt;strong&gt;detect and segment everything&lt;/strong&gt; with text inputs!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Grounded-SAM&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/IDEA-Research/Grounded-Segment-Anything/main/assets/grounded_sam2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Grounded-SAM + Stable-Diffusion Inpainting&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/IDEA-Research/Grounded-Segment-Anything/main/assets/grounded_sam_inpainting_demo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Imagine space&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some possible avenues for future work ...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic image generation to construct new datasets.&lt;/li&gt; &#xA; &lt;li&gt;Stronger foundation models with segmentation pre-training.&lt;/li&gt; &#xA; &lt;li&gt;Colleboration with (Chat-)GPT.&lt;/li&gt; &#xA; &lt;li&gt;A whole pipeline for automatically label image (with box and mask) and generate new image.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;More Examples&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/IDEA-Research/Grounded-Segment-Anything/main/assets/grounded_sam_demo3_demo4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üî•&lt;/span&gt; What&#39;s New&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;üÜï&lt;/span&gt; Checkout our related human-face-edit branch &lt;a href=&#34;https://github.com/IDEA-Research/Grounded-Segment-Anything/tree/humanFace&#34;&gt;here&lt;/a&gt;. We&#39;ll keep updating this branch with more interesting features. Here are some examples:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/IDEA-Research/Grounded-Segment-Anything/raw/humanFace/assets/231-hair-edit.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìë&lt;/span&gt; Catelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GroundingDINO Demo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GroundingDINO + Segment-Anything Demo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GroundingDINO + Segment-Anything + Diffusion Demo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Huggingface Demo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Colab demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üìñ&lt;/span&gt; Notebook Demo&lt;/h2&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://raw.githubusercontent.com/IDEA-Research/Grounded-Segment-Anything/main/grounded_sam.ipynb&#34;&gt;notebook file&lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üõ†&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;The code requires &lt;code&gt;python&amp;gt;=3.8&lt;/code&gt;, as well as &lt;code&gt;pytorch&amp;gt;=1.7&lt;/code&gt; and &lt;code&gt;torchvision&amp;gt;=0.8&lt;/code&gt;. Please follow the instructions &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;here&lt;/a&gt; to install both PyTorch and TorchVision dependencies. Installing both PyTorch and TorchVision with CUDA support is strongly recommended.&lt;/p&gt; &#xA;&lt;p&gt;Install Segment Anything:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -e segment_anything&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install GroundingDINO:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install -e GroundingDINO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install diffusers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --upgrade diffusers[torch]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following optional dependencies are necessary for mask post-processing, saving masks in COCO format, the example notebooks, and exporting the model in ONNX format. &lt;code&gt;jupyter&lt;/code&gt; is also required to run the example notebooks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install opencv-python pycocotools matplotlib onnxruntime onnx ipykernel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details can be found in &lt;a href=&#34;https://github.com/facebookresearch/segment-anything#installation&#34;&gt;install segment anything&lt;/a&gt; and &lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO#install&#34;&gt;install GroundingDINO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üèÉ&lt;/span&gt; Run GroundingDINO Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the checkpoint for groundingdino:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Grounded-Segment-Anything&#xA;&#xA;wget https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CUDA_VISIBLE_DEVICES=0&#xA;python grounding_dino_demo.py \&#xA;  --config GroundingDINO/groundingdino/config/GroundingDINO_SwinT_OGC.py \&#xA;  --grounded_checkpoint groundingdino_swint_ogc.pth \&#xA;  --input_image assets/demo1.jpg \&#xA;  --output_dir &#34;outputs&#34; \&#xA;  --box_threshold 0.3 \&#xA;  --text_threshold 0.25 \&#xA;  --text_prompt &#34;bear&#34; \&#xA;  --device &#34;cuda&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The model prediction visualization will be saved in &lt;code&gt;output_dir&lt;/code&gt; as follow:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IDEA-Research/Grounded-Segment-Anything/main/assets/grounding_dino_output_demo1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;üèÉ‚ôÇ&lt;/span&gt; Run Grounded-Segment-Anything Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the checkpoint for segment-anything and grounding-dino:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd Grounded-Segment-Anything&#xA;&#xA;wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_h_4b8939.pth&#xA;wget https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Demo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CUDA_VISIBLE_DEVICES=0&#xA;python grounded_sam_demo.py \&#xA;  --config GroundingDINO/groundingdino/config/GroundingDINO_SwinT_OGC.py \&#xA;  --grounded_checkpoint groundingdino_swint_ogc.pth \&#xA;  --sam_checkpoint sam_vit_h_4b8939.pth \&#xA;  --input_image assets/demo1.jpg \&#xA;  --output_dir &#34;outputs&#34; \&#xA;  --box_threshold 0.3 \&#xA;  --text_threshold 0.25 \&#xA;  --text_prompt &#34;bear&#34; \&#xA;  --device &#34;cuda&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The model prediction visualization will be saved in &lt;code&gt;output_dir&lt;/code&gt; as follow:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IDEA-Research/Grounded-Segment-Anything/main/assets/grounded_sam_output_demo1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚õ∑&lt;/span&gt; Run Grounded-Segment-Anything + Inpainting Demo&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CUDA_VISIBLE_DEVICES=0&#xA;python grounded_sam_inpainting_demo.py \&#xA;  --config GroundingDINO/groundingdino/config/GroundingDINO_SwinT_OGC.py \&#xA;  --grounded_checkpoint groundingdino_swint_ogc.pth \&#xA;  --sam_checkpoint sam_vit_h_4b8939.pth \&#xA;  --input_image assets/inpaint_demo.jpg \&#xA;  --output_dir &#34;outputs&#34; \&#xA;  --box_threshold 0.3 \&#xA;  --text_threshold 0.25 \&#xA;  --det_prompt &#34;bench&#34; \&#xA;  --inpaint_prompt &#34;A sofa, high quality, detailed&#34; \&#xA;  --device &#34;cuda&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üèå&lt;/span&gt; Run Grounded-Segment-Anything + Inpainting Gradio APP&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python gradio_app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;üíò&lt;/span&gt; Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/segment-anything&#34;&gt;segment-anything&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO&#34;&gt;GroundingDINO&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this project helpful for your research, please consider citing the following BibTeX entry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTex&#34;&gt;@article{kirillov2023segany,&#xA;  title={Segment Anything}, &#xA;  author={Kirillov, Alexander and Mintun, Eric and Ravi, Nikhila and Mao, Hanzi and Rolland, Chloe and Gustafson, Laura and Xiao, Tete and Whitehead, Spencer and Berg, Alexander C. and Lo, Wan-Yen and Doll{\&#39;a}r, Piotr and Girshick, Ross},&#xA;  journal={arXiv:2304.02643},&#xA;  year={2023}&#xA;}&#xA;&#xA;@inproceedings{ShilongLiu2023GroundingDM,&#xA;  title={Grounding DINO: Marrying DINO with Grounded Pre-Training for Open-Set Object Detection},&#xA;  author={Shilong Liu and Zhaoyang Zeng and Tianhe Ren and Feng Li and Hao Zhang and Jie Yang and Chunyuan Li and Jianwei Yang and Hang Su and Jun Zhu and Lei Zhang},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>unit-mesh/unit-minions</title>
    <updated>2023-04-09T01:37:22Z</updated>
    <id>tag:github.com,2023-04-09:/unit-mesh/unit-minions</id>
    <link href="https://github.com/unit-mesh/unit-minions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;„ÄäAI Á†îÂèëÊèêÊïàÁ†îÁ©∂ÔºöËá™Â∑±Âä®ÊâãËÆ≠ÁªÉ LoRA„ÄãÔºåLlama Ê®°ÂûãÁ§∫‰æãÔºö‰ª£Á†ÅÁîüÊàê„ÄÅÊµãËØï‰ª£Á†ÅÁîüÊàê„ÄÅÁî®Êà∑ÊïÖ‰∫ãÁîüÊàê‚Ä¶‚Ä¶ÔºåChatGLM Ê®°ÂûãÁ§∫‰æãÔºö‰ª£Á†ÅÁîüÊàê„ÄÅÊµãËØï‰ª£Á†ÅÁîüÊàê„ÄÅÁî®Êà∑ÊïÖ‰∫ãÁîüÊàê‚Ä¶‚Ä¶&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;„ÄäAI Á†îÂèëÊèêÊïàÁ†îÁ©∂ÔºöËá™Â∑±Âä®ÊâãËÆ≠ÁªÉ LoRA„Äã&lt;/h1&gt; &#xA;&lt;p&gt;ÂØπ‰∫éÂ∑•Á®ãÂ∏àËÄåË®ÄÔºåÊàë‰ª¨ÂèØ‰ª•ÊòæËÄåÊòìËßÅÁöÑÁúãÂà∞ ChatGPT Á≠âÂ§ßËØ≠Ë®ÄÊ®°ÂûãÂ∏¶Êù•ÁöÑÂΩ±ÂìçÔºåÂÄüÊ≠§Êàë‰ª¨Â±ïÂºÄ‰∫Ü AI ÂØπ‰∫éÁ†îÂèëÊïàËÉΩÊèêÂçáÁöÑÁ†îÁ©∂ ‚Äî‚Äî ËÆ≠ÁªÉ‰∫ÜÂá†‰∏™ LLaMA LoRA„ÄÅChatGLM LoRA Áî®Êù•Á†îÁ©∂Á†îÂèëÊïàËÉΩÊèêÂçáÁöÑÊñπÊ≥ï„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Ëøô‰∏™È°πÁõÆÊòØÊàë‰ª¨ÁöÑÁ†îÁ©∂ÊàêÊûúÔºåÂåÖÊã¨‰∫Ü‰∏Ä‰∫õËßÜÈ¢ë‰ªãÁªç„ÄÅËÆ≠ÁªÉÂ•ΩÁöÑÊ®°Âûã„ÄÅËÆ≠ÁªÉ‰ª£Á†Å„ÄÅËÆ≠ÁªÉÊï∞ÊçÆ„ÄÅËÆ≠ÁªÉËøáÁ®ã‰∏≠ÁöÑ‰∏Ä‰∫õËÆ∞ÂΩï„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;LLaMA Á≥ªÂàóÂú®Á∫øËßÜÈ¢ëÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;„Ää&lt;a href=&#34;https://www.bilibili.com/video/BV1Rh411u74H/&#34;&gt;‰ª£Á†ÅËæÖÂä©ÁîüÊàê&lt;/a&gt;„Äã&lt;/li&gt; &#xA; &lt;li&gt;„Ää&lt;a href=&#34;https://www.bilibili.com/video/BV1jg4y1G7Xc/&#34;&gt;ÊµãËØï‰ª£Á†ÅÁîüÊàê&lt;/a&gt;„Äã&lt;/li&gt; &#xA; &lt;li&gt;„Ää&lt;a href=&#34;https://www.bilibili.com/video/BV1Us4y1N7rd/&#34;&gt;ËØ¶ÁªÜÈúÄÊ±ÇÁîüÊàê&lt;/a&gt;„Äã&lt;/li&gt; &#xA; &lt;li&gt;„Ää&lt;a href=&#34;https://www.bilibili.com/video/BV1uv4y1H7bg/&#34;&gt;ÊñáÊú¨ËΩ¨ SQL&lt;/a&gt;„Äã&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ChatGLM Á≥ªÂàóÂú®Á∫øËßÜÈ¢ëÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TODOs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ÂØπÊØîËßÜÈ¢ëÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;„Ää&lt;a href=&#34;https://www.bilibili.com/video/BV1fv4y1n7Y3/&#34;&gt;LoRA Â§ßÊØîÊãºÔºöChatGLM vs LLaMAÔºåË∞ÅÊõ¥‰ºöÂÜôÈúÄÊ±ÇÊñáÊ°£Ôºü&lt;/a&gt;„Äã&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ËøòÊúâËøô‰∏™ÊåáÂçóÔºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E3%80%8Aai-%E7%A0%94%E5%8F%91%E6%8F%90%E6%95%88%E7%A0%94%E7%A9%B6%EF%BC%9A%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E8%AE%AD%E7%BB%83-lora%E3%80%8B&#34;&gt;„ÄäAI Á†îÂèëÊèêÊïàÁ†îÁ©∂ÔºöËá™Â∑±Âä®ÊâãËÆ≠ÁªÉ LoRA„Äã&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#introduction&#34;&gt;Introduction&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%80%BB%E7%BB%93%E8%AE%BE%E8%AE%A1%EF%BC%9A%E6%B5%81%E7%A8%8B%E6%A0%87%E5%87%86%E5%8C%96&#34;&gt;ÊÄªÁªìËÆæËÆ°ÔºöÊµÅÁ®ãÊ†áÂáÜÂåñ&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E7%A0%94%E5%8F%91%E6%95%88%E8%83%BD&#34;&gt;Á†îÂèëÊïàËÉΩ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#unit-mesh&#34;&gt;Unit Mesh&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90%EF%BC%9A%E8%B4%A8%E9%87%8F%E9%A9%B1%E5%8A%A8&#34;&gt;Êï∞ÊçÆÁîüÊàêÔºöË¥®ÈáèÈ©±Âä®&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E7%94%9F%E6%88%90&#34;&gt;Áî®Êà∑ÊïÖ‰∫ãÁîüÊàê&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%AD%A5%E9%AA%A4-1.-%E7%94%9F%E6%88%90%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1&#34;&gt;Ê≠•È™§ 1. ÁîüÊàêÁî®Êà∑‰ªªÂä°&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%AD%A5%E9%AA%A4-2.-%E5%88%86%E8%A7%A3%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1%E4%B8%BA%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B&#34;&gt;Ê≠•È™§ 2. ÂàÜËß£Áî®Êà∑‰ªªÂä°‰∏∫Áî®Êà∑ÊïÖ‰∫ã&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E4%BB%A3%E7%A0%81%E8%BE%85%E5%8A%A9%E7%94%9F%E6%88%90&#34;&gt;‰ª£Á†ÅËæÖÂä©ÁîüÊàê&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%AD%A5%E9%AA%A4-1.-%E5%87%86%E5%A4%87%E6%95%B0%E6%8D%AE&#34;&gt;Ê≠•È™§ 1. ÂáÜÂ§áÊï∞ÊçÆ&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%AD%A5%E9%AA%A4-2.-%E7%94%9F%E6%88%90%E6%8C%87%E4%BB%A4&#34;&gt;Ê≠•È™§ 2. ÁîüÊàêÊåá‰ª§&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E7%B1%BB%E4%BF%A1%E6%81%AF%E6%A0%BC%E5%BC%8F&#34;&gt;Á±ª‰ø°ÊÅØÊ†ºÂºè&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E5%85%B6%E5%AE%83%EF%BC%9A%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E9%80%BB%E8%BE%91&#34;&gt;ÂÖ∂ÂÆÉÔºöÊ†∏ÂøÉ‰ª£Á†ÅÈÄªËæë&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90&#34;&gt;ÊµãËØï‰ª£Á†ÅÁîüÊàê&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%AD%A5%E9%AA%A4-1.-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81&#34;&gt;Ê≠•È™§ 1. ÁîüÊàêÊµãËØï‰ª£Á†Å&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%AD%A5%E9%AA%A4-2.-%E5%80%9F%E5%8A%A9-openai-davinci-%E7%BC%96%E5%86%99%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%EF%BC%88%E5%8EF%BC%89&#34;&gt;Ê≠•È™§ 2. ÂÄüÂä© OpenAI Davinci ÁºñÂÜôÂÆûÁé∞‰ª£Á†ÅÔºàÂèØÈÄâÔºâ&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E8%AE%AD%E7%BB%83%E9%98%B6%E6%AE%B5&#34;&gt;ËÆ≠ÁªÉÈò∂ÊÆµ&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E5%9F%BA%E4%BA%8E-meta-%E7%9A%84-llama-%E8%AE%AD%E7%BB%83-lora&#34;&gt;Âü∫‰∫é Meta ÁöÑ Llama ËÆ≠ÁªÉ LoRA&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E8%AE%AD%E7%BB%83-1%EF%BC%9A%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90&#34;&gt;ËÆ≠ÁªÉ 1ÔºöÊµãËØï‰ª£Á†ÅÁîüÊàê&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E8%AE%AD%E7%BB%83-2%EF%BC%9A%E6%8B%86%E5%88%86%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B&#34;&gt;ËÆ≠ÁªÉ 2ÔºöÊãÜÂàÜÁî®Êà∑ÊïÖ‰∫ã&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E8%AE%AD%E7%BB%83-3%EF%BC%9A%E4%BB%A3%E7%A0%81%E8%BE%85%E5%8A%A9&#34;&gt;ËÆ≠ÁªÉ 3Ôºö‰ª£Á†ÅËæÖÂä©&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#sql-%E8%BD%AC%E4%BB%A3%E7%A0%81&#34;&gt;SQL ËΩ¨‰ª£Á†Å&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E5%9F%BA%E4%BA%8E%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E7%9A%84-chatglm-%E8%AE%AD%E7%BB%83-lora&#34;&gt;Âü∫‰∫éÊ∏ÖÂçéÂ§ßÂ≠¶ÁöÑ ChatGLM ËÆ≠ÁªÉ LoRA&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90&#34;&gt;‰ª£Á†ÅÁîüÊàê&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E6%B5%8B%E8%AF%95%E7%94%9F%E6%88%90&#34;&gt;ÊµãËØïÁîüÊàê&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/#%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E7%94%9F%E6%88%90&#34;&gt;Áî®Êà∑ÊïÖ‰∫ãÁîüÊàê&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Áõ∏ÂÖ≥Êï∞ÊçÆËΩ¨Êç¢ÂèÇËßÅÔºö&lt;a href=&#34;https://github.com/unit-mesh/minions-data-prepare&#34;&gt;https://github.com/unit-mesh/minions-data-prepare&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;RoadmapÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉÔºöÊµãËØï‰ª£Á†ÅÁîüÊàêÔºàDoneÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉÔºöÁîüÊàêÁî®Êà∑ÊïÖ‰∫ãÔºàDoneÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉÔºö‰ª£Á†ÅËæÖÂä©ÁîüÊàêÔºàDoneÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉÔºöSQL ËΩ¨Êç¢ÔºàDoneÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉÔºöÊñáÊú¨ËΩ¨‰ª£Á†ÅÔºàDoingÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉÔºö‚Ä¶‚Ä¶&lt;/li&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉÔºöÁîüÊàê Unit Mesh ÁöÑ‰ª£Á†ÅÂùó&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Thanks: &lt;a href=&#34;https://github.com/aios-chat&#34;&gt;AIOS Club&lt;/a&gt; for OpenAI Key, Thanks &lt;a href=&#34;https://openbayes.com/console/signup?r=phodal_uVxU&#34;&gt;OpenBayes&lt;/a&gt; for Cloud GPU&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gzzengwei&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/656662?s=70&amp;amp;v=4&#34; width=&#34;30px&#34; alt=&#34;gzzengwei&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/trampboy&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2819756?s=70&amp;amp;v=4&#34; width=&#34;30px&#34; alt=&#34;trampboy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/daochouwangu&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4903149?s=120&amp;amp;v=4&#34; width=&#34;30px&#34; alt=&#34;daochouwangu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xuzongbao&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/12446449?s=70&amp;amp;v=4&#34; width=&#34;30px&#34; alt=&#34;xuzongbao&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stevenchendan&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/30310671?s=70&amp;amp;v=4&#34; width=&#34;30px&#34; alt=&#34;stevenchendan&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/coderprepares&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/66911083?s=64&amp;amp;v=4&#34; width=&#34;30px&#34; alt=&#34;coderprepares&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-maple&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/97354215?s=64&amp;amp;v=4&#34; width=&#34;30px&#34; alt=&#34;go-maple&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aios-chat&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/126129567?v=4&#34; width=&#34;30px&#34; alt=&#34;aios-chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PSÔºöËÆ≠ÁªÉÁÉßÈí±‚Ä¶‚Ä¶ÔºàË∞ÉÁî® OpenAI ÁîüÊàêÊï∞ÊçÆÔºà‰ªÖÈôê‰∫éÈúÄÊ±ÇÁªÜÂåñÔºâ„ÄÅ‰∫ë GPUÔºâÔºåÂ¶ÇÊûú‰Ω†ËßâÂæóÂ∏ÆÂà∞‰Ω†ÔºåÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèÔºåÂ∏ÆÂä©Êàë‰ª¨ÁªßÁª≠ÂæÄÂâç„ÄÇ&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/images/alipay.pic.jpg&#34; alt=&#34;1&#34; width=&#34;240px&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/images/zsxq.pic.jpg&#34; alt=&#34;2&#34; width=&#34;240px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Áî®ÊîØ‰ªòÂÆùÁöÑÂêåÂ≠¶ËÆ∞ÂæóÊ≥®Êòé‰Ω†ÁöÑ GitHub id„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;ÊÄªÁªìËÆæËÆ°ÔºöÊµÅÁ®ãÊ†áÂáÜÂåñ&lt;/h1&gt; &#xA;&lt;p&gt;Unit Mesh ‰æùËµñ‰∫éÂØπÁ†îÂèëÊïàËÉΩÁöÑÊ†áÂáÜÂåñ„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Á†îÂèëÊïàËÉΩ&lt;/h2&gt; &#xA;&lt;p&gt;‰∏∫‰∫ÜËÆ≠ÁªÉÁöÑÁªìÊûúÊõ¥Âä†ÂáÜÁ°ÆÔºåÊàë‰ª¨ËØ¶ÁªÜÊãÜÂàÜ‰∫ÜËΩØ‰ª∂ÂºÄÂèëÁöÑÊ≠•È™§Ôºå‰ª•Á°Æ‰øùÊØè‰∏ÄÊ≠•ÁîüÊàêÁöÑÊòØÂáÜÁ°ÆÔºåËøõËÄåÈ©±Âä®Âá∫ÂáÜÁ°ÆÁöÑÁªìÊûú„ÄÇÂ¶Ç‰∏ãÊòØÊàë‰ª¨ÊãÜÂàÜÁöÑ‰∏ÄÂ∞èÈÉ®ÂàÜÁªÜÊµÅÁ®ãÁöÑÁ§∫‰æãÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;design_restful_api&lt;/li&gt; &#xA; &lt;li&gt;design_plantuml_java_datastructure&lt;/li&gt; &#xA; &lt;li&gt;implementation_spring_controller&lt;/li&gt; &#xA; &lt;li&gt;implementation_controller_test&lt;/li&gt; &#xA; &lt;li&gt;implementation_spring_service&lt;/li&gt; &#xA; &lt;li&gt;‚Ä¶.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Êàë‰ª¨ÈúÄË¶ÅÊãÜÂàÜÂà∞ÊØè‰∏Ä‰∏™Â∞ΩÂèØËÉΩÂ∞èÁöÑÊ≠•È™§ÔºåÂú®ÊØè‰∏Ä‰∏™ÁªÜÂåñÁöÑÊ≠•È™§ÈáåÔºåÂñÇÂÖ•Êï∞ÊçÆÔºåÊâç‰ºöËÆ© AI ‰∫ßÁîüÊúÄÂ§ßÁöÑÂ§çËØªÊú∫ÊïàÊûú„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Unit Mesh&lt;/h2&gt; &#xA;&lt;p&gt;Todos&lt;/p&gt; &#xA;&lt;h1&gt;Êï∞ÊçÆÁîüÊàêÔºöË¥®ÈáèÈ©±Âä®&lt;/h1&gt; &#xA;&lt;p&gt;Êàë‰ª¨‰ΩøÁî®ÈùûÂ∏∏ÁÆÄÂçïÁöÑ instructÔºåÂπ∂Â∞ΩÂèØËÉΩÊèê‰æõÔºå‰ª•‰æø‰∫éÈõÜÊàêÂà∞Â∑•ÂÖ∑‰∏≠‰ΩøÁî®„ÄÇÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÊãÜÂàÜ‰ªªÂä°„ÄÇinstructionÔºösplit user story tasksÔºåinputÔºöÊäòÂàÜÁî®Êà∑ÊïÖ‰∫ã‰ªªÂä°&lt;/li&gt; &#xA; &lt;li&gt;ÈúÄÊ±ÇÁªÜÂåñ„ÄÇinstructionÔºöcreate Agile user story for following topicÔºåinputÔºöÂäüËÉΩÁöÑÂü∫Êú¨‰ø°ÊÅØ&lt;/li&gt; &#xA; &lt;li&gt;‰ª£Á†ÅÁîüÊàê„ÄÇinstructionÔºöImplement the method xxxÔºåinputÔºöÁ±ªÁöÑÂü∫Êú¨‰ø°ÊÅØ&lt;/li&gt; &#xA; &lt;li&gt;ÊµãËØïÁîüÊàê„ÄÇinstructionÔºöWrite test for follow codeÔºåinputÔºöÁ±ªÁöÑÂü∫Êú¨‰ø°ÊÅØ&lt;/li&gt; &#xA; &lt;li&gt;SQL ÁîüÊàê„ÄÇinstructionÔºötext to sqlÔºåinputÔºöÈóÆÈ¢ò&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ÂØπÂ∫îÁöÑÂäüËÉΩ‰ªãÁªçÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÈúÄÊ±ÇÁªÜÂåñ„ÄÇAI ËæÖÂä©Â∞ÜÊ®°Á≥äÁöÑÈúÄÊ±ÇËΩ¨Âèò‰∏∫ÁöÑÈúÄÊ±ÇËÆæËÆ°ÔºåÊØîÂ¶Ç ‚ÄúÊ≥®ÂÜå‚Äù ÂäüËÉΩÔºåÁîüÊàê‰∏∫Ôºö‚Äù‰Ωú‰∏∫‰∏Ä‰∏™Áî®Êà∑ xxxÔºåÂ°´ÂÖ•Áî®Êà∑Âêç„ÄÅÂØÜÁ†Å‰ø°ÊÅØÁ≠âÁ≠âÔºåÊé•ÁùÄÁî±‰∫∫Á±ªÂéªÊ£ÄÊü•ÂíåÂÆåÂñÑ„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;‰ª£Á†ÅÁîüÊàê„ÄÇAI ËæÖÂä©Â∞ÜËØ¶ÁªÜÁöÑÈúÄÊ±ÇËÆæËÆ°ÁøªËØë‰∏∫ÁõÆÊ†áÁöÑ‰ª£Á†ÅÔºåÂÜçÊé•ÁùÄÁî±‰∫∫Á±ªÂéªÊ£ÄÊü•ÂíåÂÆåÂñÑ„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÊµãËØïÁîüÊàê„ÄÇAI ËæÖÂä©Ê†πÊçÆÁîüÊàêÁöÑ‰ª£Á†ÅÁîüÊàêÂØπÂ∫îÁöÑÊµãËØï‰ª£Á†ÅÔºåÂÜçÊé•ÁùÄÁî±‰∫∫Á±ªÂéªÊ£ÄÊü•ÂíåÂÆåÂñÑ„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;‰ªéÊµãËØïÁªìÊûúÊù•ÁúãÔºåÈöèÁùÄÊï∞ÊçÆÈáèÁöÑÂ¢ûÂ§öÔºåÊØîÂ¶Ç 20000 ‰∏™‰ª£Á†ÅÁî®‰æãÊØî 10000 ‰∏™‰ª£Á†ÅÁî®‰æãÊõ¥Âä†ÁöÑ ‚ÄúËÅ™Êòé‚Äù„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Áî®Êà∑ÊïÖ‰∫ãÁîüÊàê&lt;/h2&gt; &#xA;&lt;p&gt;Âü∫Êú¨ÊÄùË∑ØÔºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ÁªìÂêàÂ∏∏ËßÅÁöÑÈ¢ÜÂüüÔºàÂ¶ÇÂú®Á∫øÁΩëÁ´ôÔºâÔºåÂÄüÁî® OpenAI ÁîüÊàêÁî®Êà∑‰ªªÂä°ÔºàÂ¶ÇÁôªÂΩï„ÄÅÊµèËßàÂàóË°®Á≠âÁ≠âÔºâ&lt;/li&gt; &#xA; &lt;li&gt;Ê†πÊçÆÁî®Êà∑ÊïÖ‰∫ãÁîüÊàêÁî®Êà∑ÊïÖ‰∫ã„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ËÆ≠ÁªÉ Alpaca LoRA„ÄÇ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Â¶Ç‰∏ãÊâÄÁ§∫Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/images/alpaca-user-story-lora.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ê≠•È™§ 1. ÁîüÊàêÁî®Êà∑‰ªªÂä°&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ë∞ÉÁî® OpenAI ÊåâÂàÜÁ±ªÂàõÂª∫Áî®Êà∑‰ªªÂä°„ÄÇprompt Â¶Ç‰∏ãÔºö&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;Design a User Story Mapping for ${domain} application based on your understanding. Here are the requirements: &#xA;&#xA;1. Your user story map should include only user tasks to demonstrate how users will interact with the application.&#xA;2. Our user story map should be based on your understanding of the ${domain} application and its users, and should be designed to address their needs and pain points.&#xA;3. You may use any tools or formats you choose to create your user story map, but it should be easily shareable and understandable by stakeholders.&#xA;4. Your expression should be more concise and clear.&#xA;5. Your return should be like as follows:&#xA;&#xA;###&#xA;User Tasks:&#xA;1. ...&#xA;###&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Á§∫‰æãËæìÂá∫Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;User Tasks:&#xA;1. Browse and search for animations and comics&#xA;2. View details of animations and comics&#xA;3. Create an account&#xA;4. Log in to the account&#xA;5. Add animations and comics to favorites&#xA;6. Download animations and comics&#xA;7. Share animations and comics with friends&#xA;8. Rate and review animations and comics&#xA;9. Create and upload animations and comics&#xA;10. Participate in online forums and discussions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ê≠•È™§ 2. ÂàÜËß£Áî®Êà∑‰ªªÂä°‰∏∫Áî®Êà∑ÊïÖ‰∫ã&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ë∞ÉÁî® OpenAI Ê†πÊçÆÁî®Êà∑‰ªªÂä°ÂàõÂª∫Áî®Êà∑ÊïÖ‰∫ã„ÄÇprompt Â¶Ç‰∏ãÔºö&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;‰∏∫‰∏ãÈù¢ÁöÑÈúÄÊ±ÇÁºñÂÜôÁî®Êà∑ÊïÖ‰∫ãÔºö${domain} Â∫îÁî®ÁöÑ ${story_name} ÂäüËÉΩ„ÄÇ Ë¶ÅÊ±ÇÂ¶Ç‰∏ãÔºö&#xA;&#xA;1. ÂøÖÈ°ªË¶ÅËÄÉËôëÂ∞ΩÂèØËÉΩËÄÉËôëÂêÑÁßçÂºÇÂ∏∏Âú∫ÊôØÔºåÊ∑ªÂä†Êõ¥Â§öÁöÑ AC„ÄÇ&#xA;2. ‰Ω†ÁöÑËøîÂõûÊ®°ÊùøÂ¶Ç‰∏ãÊâÄÁ§∫Ôºö&#xA;&#xA;###&#xA;Áî®Êà∑ÊïÖ‰∫ãÔºöÂèØ‰ª•ÈÄâÊã©ÂÆùË¥ùÂá∫Ë°åÊúçÂä°&#xA;‰Ωú‰∏∫ ËéâËéâÂ¶à&#xA;ÊàëÊÉ≥ Âú®Êª¥Êª¥ÊâìËΩ¶ÁöÑÊâãÊú∫ÂÆ¢Êà∑Á´ØÈáåÈÄâÊã©ÂÆùË¥ùÂá∫Ë°åÊúçÂä°&#xA;‰ª•‰æø‰∫é ÊàëËÉΩÂ§üÂ∏¶ÂÆùÂÆùÊâìËΩ¶Âá∫Ë°åÁöÑÊó∂ÂÄôÊâìÂà∞ÊúâÂÑøÁ´•Â∫ßÊ§ÖÁöÑËΩ¶&#xA;&#xA;AC 1:  ËéâËéâÂ¶àÂèØ‰ª•ÈÄâÊã©ÂÆùË¥ùÂá∫Ë°åÊúçÂä°&#xA;ÂÅáËÆæ xxx&#xA;ÂΩì xxx&#xA;‰∫éÊòØ xxx&#xA;###&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Á§∫‰æãËæìÂá∫Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Áî®Êà∑ÊïÖ‰∫ãÔºöÂèØ‰ª•ÂàõÂª∫Âíå‰∏ä‰º†Âä®ÁîªÂíåÊº´Áîª&#xA;‰Ωú‰∏∫‰∏Ä‰∏™ Animation and Comics Â∫îÁî®ÁöÑÁî®Êà∑&#xA;ÊàëÊÉ≥Ë¶ÅÂàõÂª∫Âíå‰∏ä‰º†Âä®ÁîªÂíåÊº´Áîª&#xA;‰ª•‰æø‰∫éÊàëÂèØ‰ª•ÂàÜ‰∫´ÊàëÁöÑ‰ΩúÂìÅÁªôÂÖ∂‰ªñÁî®Êà∑&#xA;&#xA;AC 1: Áî®Êà∑ÂèØ‰ª•ÂàõÂª∫Âíå‰∏ä‰º†Âä®ÁîªÂíåÊº´Áîª&#xA;ÂÅáËÆæ Áî®Êà∑Â∑≤ÁªèÁôªÂΩïÂà∞ Animation and Comics Â∫îÁî®&#xA;ÂΩì Áî®Êà∑ÁÇπÂáªÂàõÂª∫Âíå‰∏ä‰º†Âä®ÁîªÂíåÊº´ÁîªÊåâÈíÆ&#xA;‰∫éÊòØ Áî®Êà∑ÂèØ‰ª•ÂàõÂª∫Âíå‰∏ä‰º†Âä®ÁîªÂíåÊº´Áîª&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‰ª£Á†ÅËæÖÂä©ÁîüÊàê&lt;/h2&gt; &#xA;&lt;p&gt;Âü∫Êú¨ÊÄùË∑ØÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/images/copilot-elements.png&#34; alt=&#34;Copilot Element&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ê≠•È™§ 1. ÂáÜÂ§áÊï∞ÊçÆ&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;‰∏ãËΩΩ GitHub ‰∏äÁöÑÈ°πÁõÆÔºàÈúÄË¶ÅÂåÖÂê´ÊµãËØïÁî®‰æãÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ÈÅçÂéÜ &lt;code&gt;src/main&lt;/code&gt; ‰∏ãÁöÑ Java Êñá‰ª∂„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÁîüÊàêÊØè‰∏™Á±ªÁöÑÂü∫Êú¨‰ø°ÊÅØÔºö&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;PostService(PostRepository, UserRepository, ImageService)&#xA;- fields: postRepository:PostRepository, userRepository:UserRepository, userPosts:Set&amp;lt;Post&amp;gt;, imageService:ImageService&#xA;- methods: findAll(): List&amp;lt;Post&amp;gt;, addNewPost(Post): Post, saveImageToPost(String, MultipartFile, Post): int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ê≠•È™§ 2. ÁîüÊàêÊåá‰ª§&lt;/h3&gt; &#xA;&lt;p&gt;È¢ÑÊúü JSON Ê†ºÂºèÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;instruction: Implement the method ${methodName}&lt;/li&gt; &#xA; &lt;li&gt;input: ${classInformation}&lt;/li&gt; &#xA; &lt;li&gt;output: ${code}&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Á§∫‰æãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;instruction&#34;:&#34;Implement the method action&#34;,&#34;input&#34;:&#34;com.thoughtworks.go.config.rules.AbstractDirective(DirectiveType, DirectiveType, String, String, String)\n- fields: action:String, type:String, resource:String, configErrors:ConfigErrors, directiveType:DirectiveType\n- methods: validate(ValidationContext): void, isInvalid(String, List&amp;lt;String&amp;gt;): boolean, matchesAction(String): boolean, matchesType(Class&amp;lt;? extends Validatable&amp;gt;): boolean, matchesResource(String): boolean, errors(): ConfigErrors, addError(String, String): void, equals(Object): boolean, action(): String, type(): String, resource(): String, hashCode(): int, hasErrors(): boolean, getDirectiveType(): DirectiveType&#34;,&#34;output&#34;:&#34;public abstract class AbstractDirective implements Directive {\n\n    @ConfigAttribute(value = \&#34;action\&#34;, optional = false)\n    protected String action;\n\n    @ConfigAttribute(value = \&#34;type\&#34;, optional = false)\n    protected String type;\n\n    @ConfigValue\n    private String resource;\n\n    private final ConfigErrors configErrors = new ConfigErrors();\n\n    private DirectiveType directiveType;\n\n    public AbstractDirective(DirectiveType allow) {\n        this.directiveType = allow;\n    }\n\n    public AbstractDirective(DirectiveType allow, String action, String type, String resource) {\n        this.directiveType = allow;\n        this.action = action;\n        this.type = type;\n        this.resource = resource;\n    }\n\n    @Override\n    public String action() {\n        return this.action;\n    }\n}\n&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Á±ª‰ø°ÊÅØÊ†ºÂºè&lt;/h3&gt; &#xA;&lt;p&gt;Ê†ºÂºèËßÑËåÉÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ÂåÖÂêç.Á±ªÂêç(Á±ªÁöÑÊûÑÈÄ†Á±ªÂûã)&#xA;- fieldsÔºöÊàêÂëòÂèòÈáèÈõÜÂêàÔºàÂèòÈáèÂêç:Á±ªÂûãÔºâ&#xA;- methodsÔºöÊñπÊ≥ïÊäΩË±°ÈõÜÂêàÔºàÊñπÊ≥ïÂêç(ÂèÇÊï∞Á±ªÂûã): ËæìÂá∫Á±ªÂûãÔºâ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÁªìÊûúÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;com.thoughtworks.go.config.rules.AbstractDirective(DirectiveType, DirectiveType, String, String, String)&#xA;- fields: action:String, type:String, resource:String, configErrors:ConfigErrors, directiveType:DirectiveType&#xA;- methods: validate(ValidationContext): void, isInvalid(String, List&amp;lt;String&amp;gt;): boolean, matchesAction(String): boolean, matchesType(Class&amp;lt;? extends Validatable&amp;gt;): boolean, matchesResource(String): boolean, errors(): ConfigErrors, addError(String, String): void, equals(Object): boolean, action(): String, type(): String, resource(): String, hashCode(): int, hasErrors(): boolean, getDirectiveType(): DirectiveType&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ÂÖ∂ÂÆÉÔºöÊ†∏ÂøÉ‰ª£Á†ÅÈÄªËæë&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kotlin&#34;&gt;val javaProcessor = JavaProcessor(file.readText())&#xA;val shotClass = javaProcessor.toShortClass() ?: return@forEach&#xA;&#xA;javaProcessor&#xA;   .removePackage()&#xA;   .removeAllImport()&#xA;   .removeLicenseInfoBeforeImport()&#xA;&#xA;javaProcessor.splitMethods().forEach { (key, value) -&amp;gt;&#xA;   CodegenPrompt(&#xA;       instruction = &#34;Implement the method $key&#34;,&#xA;       input = shotClass.toString(),&#xA;       output = value&#xA;   ).let { prompt -&amp;gt;&#xA;       val output = Json.encodeToString(prompt)&#xA;       File(&#34;$targetPath${key}.json&#34;).writeText(output)&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ÊµãËØï‰ª£Á†ÅÁîüÊàê&lt;/h2&gt; &#xA;&lt;p&gt;Âü∫Êú¨ÊÄùË∑Ø&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/images/test-process.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ËØ≠Ê≥ïÂàÜÊûêÊÄùË∑ØÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÊñπÂºè 1 - Âú®Êó∂Èó¥ÊúâÈôêÁöÑÊÉÖÂÜµ‰∏ãÔºåÂü∫‰∫é OpenAI ÁöÑÊï∞ÊçÆÊù•ÂÆåÂñÑ„ÄÇ‰ΩÜÊòØÔºåOpenAI ÁºñÂÜôÁöÑÊµãËØïÁî®‰æã‰∏ç‰∏ÄÂÆöÈù†Ë∞±ÔºåÊâÄ‰ª•ËÆ©‰ªñÁîüÊàê‰∏öÂä°‰ª£Á†Å„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÊñπÂºè 2 - Âú®Êó∂Èó¥ÂÖÖË£ïÁöÑÊÉÖÂÜµ‰∏ãÔºåÂèØ‰ª•ÂàÜÊûê AST Êù•ÂêàÂπ∂Á¨¨‰∏ÄÂíåÁ¨¨‰∫åÊ≠•Ôºå‰πüÊòØÊØîËæÉÂêàÁêÜÁöÑÊñπÊ°àÔºåÊØïÁ´ü OpenAI ÁöÑ API ÂæàË¥µ„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ê≠•È™§ 1. ÁîüÊàêÊµãËØï‰ª£Á†Å&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;‰∏ãËΩΩ GitHub ‰∏äÁöÑÈ°πÁõÆÔºàÈúÄË¶ÅÂåÖÂê´ÊµãËØïÁî®‰æãÔºâ&lt;/li&gt; &#xA; &lt;li&gt;Âª∫Á´ãÊØè‰∏™È°πÁõÆÁöÑ &lt;code&gt;src/main&lt;/code&gt; ‰∏ãÁöÑ Java Êñá‰ª∂ mapÔºåÂ¶ÇÊûúÂêåÊó∂Â≠òÂú®ÂØπÂ∫îÁöÑÊµãËØïÊñá‰ª∂ÔºåÂàôÊãâÂÖ•ÁöÑÊï∞ÊçÆÈõÜ‰∏≠„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Âπ∂ÁîüÊàêÊØè‰∏™ÊµãËØïÂØπÂ∫îÁöÑÁ±ªÁöÑÂü∫Êú¨‰ø°ÊÅØÔºà‰ª•ÂáèÂ∞ë OpenAI Token ‰ΩøÁî®ÔºâÔºö&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;org.unitmesh.processor.TestClass(String, Int)&#xA;- fields: field1:String, field2:Int&#xA;- methods: method1(String, Int): String, method2(): Int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;ÊåâÊµãËØïÁî®‰æãÔºàÂç≥ @Test ÊñπÊ≥ïÔºâÊãÜÂàÜÊØè‰∏™ÊµãËØïÊñá‰ª∂ÔºåÊãÜÊàê N ‰∏™ÔºàÂç≥ test1„ÄÅtest2 ÊòØ‰∏§‰∏™‰∏çÂêåÁöÑÊï∞ÊçÆÔºâ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class TestProcessorTest {&#xA;    @Test&#xA;    void test1() {&#xA;    }&#xA;    &#xA;    @Test&#xA;    void test2() {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÊúÄÂêéÔºåÁîüÊàêÁöÑÊï∞ÊçÆÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;p&gt;{&#34;classInfo&#34;: &#34;com.thoughtworks.go.security.AESEncrypter(AESCipherProvider)\n- fields: ENCODER:Base64.Encoder, DECODER:Base64.Decoder, cipherProvider:AESCipherProvider, ivProvider:IVProvider\n- methods: createIVProviderInstance(): IVProvider, canDecrypt(String): boolean, encrypt(String): String, decrypt(String): String, createSecretKeySpec(): SecretKeySpec&#34;, &#34;testMethod&#34;: &#34;public class AESEncrypterTest {\n\n private AESEncrypter aesEncrypter;\n\n @Test\n public void shouldGenerateEncryptedText() throws CryptoException {\n String encrypt = aesEncrypter.encrypt(&#34;p@ssw0rd&#34;);\n assertThat(encrypt).startsWith(&#34;AES&#34;);\n assertThat(encrypt.split(&#34;:&#34;)).hasSize(3);\n }\n}\n&#34;, &#34;id&#34;: &#34;task_0&#34;}&lt;/p&gt; &#xA;&lt;h3&gt;Ê≠•È™§ 2. ÂÄüÂä© OpenAI Davinci ÁºñÂÜôÂÆûÁé∞‰ª£Á†ÅÔºàÂèØÈÄâÔºâ&lt;/h3&gt; &#xA;&lt;p&gt;ËØ¶ÁªÜ‰ª£Á†ÅËßÅÔºö&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/code/test-to-code.py&#34;&gt;test-to-code.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Â∞Ü‰∏äÈù¢ÁöÑÊï∞ÊçÆËΩ¨Êç¢‰∏∫ JSONLÔºåÂêàÂπ∂Êàê prompt„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ËÆ© Davinci ÂÆåÊàêÂ°´Á©∫È¢ò„ÄÇ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;ÊúÄÂêéÁîüÊàêÁöÑ prompt Á§∫‰æãÂ¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;You are a programmer and implementation a method with TDD. Here are the requirements:&#xA;&#xA;1. According follows class information and tests code to write a method.&#xA;2. Try you best to thinking corner case.&#xA;3. You only return the code, no explain.&#xA;&#xA;class information: &#xA;&#xA;### &#xA;io.github.robwin.swagger.test.AbstractContractValidator()&#xA;- methods: findExpectedPaths(Swagger, SwaggerAssertionConfig): Map&amp;lt;String,Path&amp;gt;, getPathsIncludingBasePath(Swagger): Map&amp;lt;String,Path&amp;gt;, getPathsWithPrefix(Swagger, String): Map&amp;lt;String,Path&amp;gt;, isBlankOrSlash(String): boolean&#xA;###&#xA;&#xA;test code: &#xA;&#xA;### &#xA;/**&#xA; * Tests AbstractContractValidator.&#xA; */&#xA;@RunWith(Enclosed.class)&#xA;public class AbstractContractValidatorTest {&#xA;&#xA;    /**&#xA;     * Tests getPathsIncludingBasePath().&#xA;     */&#xA;    public static class GetPathsIncludingBasePath {&#xA;&#xA;        @Test&#xA;        public void shouldReturnPathsPrefixedIfBasePathSet() {&#xA;            // given&#xA;            Swagger swagger = buildSwaggerFrom(&#34;/swagger.json&#34;);&#xA;            // when&#xA;            Map&amp;lt;String, Path&amp;gt; paths = new DummyValidator().getPathsIncludingBasePath(swagger);&#xA;            // then&#xA;            paths.entrySet().forEach(e -&amp;gt; assertThat(e.getKey(), startsWith(swagger.getBasePath())));&#xA;        }&#xA;    }&#xA;&#xA;    /**&#xA;     * Tests findExpectedPaths().&#xA;     */&#xA;    public static class FindExpectedPaths {&#xA;    }&#xA;&#xA;    private static class DummyValidator extends AbstractContractValidator {&#xA;    }&#xA;}&#xA;###&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ËÆ≠ÁªÉÈò∂ÊÆµ&lt;/h1&gt; &#xA;&lt;h2&gt;Âü∫‰∫é Meta ÁöÑ Llama ËÆ≠ÁªÉ LoRA&lt;/h2&gt; &#xA;&lt;p&gt;ËÆ≠ÁªÉÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÊñπÂºè 1ÔºöÁõ¥Êé•‰ΩøÁî®Ôºö&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/alpaca-lora.ipynb&#34;&gt;alpaca-lora.ipynb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ÊñπÂºè 2ÔºöÁõ¥Êé•‰ΩøÁî®Ôºö&lt;a href=&#34;https://openbayes.com/console/phodal/containers/JBx5YD7HTdS&#34;&gt;OpenBayes ÂÆπÂô®&lt;/a&gt; ÔºàPSÔºö‰ΩøÁî®ÊàëÁöÑ‰∏ìÁî®ÈÇÄËØ∑ÈìæÊé•ÔºåÊ≥®ÂÜå OpenBayesÔºåÂèåÊñπÂêÑËé∑Âæó 60 ÂàÜÈíü RTX 3090 ‰ΩøÁî®Êó∂ÈïøÔºåÊîØÊåÅÁ¥ØÁßØÔºåÊ∞∏‰πÖÊúâÊïàÔºö &lt;a href=&#34;https://openbayes.com/console/signup?r=phodal_uVxU&#34;&gt;https://openbayes.com/console/signup?r=phodal_uVxU&lt;/a&gt;) Ôºâ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ËÆ≠ÁªÉÊó∂Èó¥Ôºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3400+ Áî®Êà∑ÊïÖ‰∫ãÔºåÁ∫¶ 25 ÂàÜÈíü&lt;/li&gt; &#xA; &lt;li&gt;8000+ ÊµãËØï‰ª£Á†ÅÔºåÁ∫¶ 1 Â∞èÊó∂&lt;/li&gt; &#xA; &lt;li&gt;10000+ ‰ª£Á†ÅËæÖÂä©ÁîüÊàêÔºåÁ∫¶ 1.5 Â∞èÊó∂&lt;/li&gt; &#xA; &lt;li&gt;20000+ ‰ª£Á†ÅËæÖÂä©ÁîüÊàêÔºåÁ∫¶ 3 Â∞èÊó∂&lt;/li&gt; &#xA; &lt;li&gt;40000+ ‰ª£Á†ÅËæÖÂä©ÁîüÊàêÔºåÁ∫¶ 6 Â∞èÊó∂&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Áõ∏ÂÖ≥ËÉåÊôØÔºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Âü∫Á°ÄÊ®°ÂûãÔºöMeta ÂºÄÊ∫ê LLaMA Á≥ªÂàóÊ®°ÂûãÔºö&lt;a href=&#34;https://huggingface.co/decapoda-research/llama-7b-hf&#34;&gt;llama-7b-hf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stanford Alpaca: &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;https://github.com/tatsu-lab/stanford_alpaca&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alpaca LoraÔºö&lt;a href=&#34;https://github.com/tloen/alpaca-lora&#34;&gt;https://github.com/tloen/alpaca-lora&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Áî±‰∫éÔºåÊàë‰ª¨ÁöÑÁõÆÊ†á‰∏çÊòØÂØπÊ®°ÂûãË∞É‰ºò„ÄÅÁîüÊàêÈÄöÁî®ÁöÑÊ®°ÂûãÔºåËÄåÊòØËÆ≠ÁªÉÁâπÂÆöÁî®ÈÄîÁöÑ Lora„ÄÇÂõ†Ê≠§ÔºåÊàë‰ª¨Ê≤°ÊúâÂä†ÂÖ•ÔºöStanford Alpaca ‰∏≠ÁöÑÊï∞ÊçÆÔºå ÊïÖÊâÄÈúÄË¶ÅÊó∂Èó¥Êõ¥Áü≠ÔºåÂ¶Ç 8000+ ÊµãËØï‰ª£Á†ÅÂè™ÈúÄË¶Å 1 Â∞èÊó∂Ôºå3400+ ÁöÑÁî®Êà∑ÊïÖ‰∫ãÂè™ÈúÄË¶Å 25 ÂàÜÈíü„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;ËÆ≠ÁªÉ 1ÔºöÊµãËØï‰ª£Á†ÅÁîüÊàê&lt;/h3&gt; &#xA;&lt;p&gt;ËÆ≠ÁªÉÁªìÊûúÔºàLoRAÔºâËßÅÔºö&lt;a href=&#34;https://github.com/unit-mesh/unit-minions/releases/tag/v0.0.1&#34;&gt;https://github.com/unit-mesh/unit-minions/releases/tag/v0.0.1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print(evaluate(&#34;write test&#34;, &#34;&#34;&#34;&#xA;public Set&amp;lt;String&amp;gt; listFilesUsingJavaIO(String dir) {&#xA;    return Stream.of(new File(dir).listFiles())&#xA;      .filter(file -&amp;gt; !file.isDirectory())&#xA;      .map(File::getName)&#xA;      .collect(Collectors.toSet());&#xA;}&#xA;&#34;&#34;&#34;, 0.1, 0.75, 40, 4, 512))&#xA;&#xA;## Output:&#xA;&#xA;public class ListFilesUsingJavaIOTest {&#xA;    @Test&#xA;    public void shouldListFilesUsingJavaIO() {&#xA;        Set&amp;lt;String&amp;gt; files = ListFilesUsingJavaIO.listFilesUsingJavaIO(new File(&#34;dir&#34;));&#xA;        assertThat(files, containsInAnyOrder(&#34;file1&#34;, &#34;file2&#34;, &#34;file3&#34;));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ËÆ≠ÁªÉ 2ÔºöÊãÜÂàÜÁî®Êà∑ÊïÖ‰∫ã&lt;/h3&gt; &#xA;&lt;p&gt;ËÆ≠ÁªÉÁªìÊûúÔºàLoRAÔºâËßÅÔºö&lt;a href=&#34;https://github.com/unit-mesh/unit-minions/releases/tag/v0.0.2&#34;&gt;https://github.com/unit-mesh/unit-minions/releases/tag/v0.0.2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ê≥®ÊÑèÔºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Â¶ÇÊûúÊï∞ÊçÆÈõÜÂ§™Â∞èÔºåËÆæÁΩÆ‰∏Ä‰∏ã val_set_sizeÔºåÊØîÂ¶ÇÔºö&lt;code&gt;--val_set_size 500&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Â¶ÇÊûúÊï∞ÊçÆÈõÜÂ§™Â∞èÔºåËÆæÁΩÆ‰∏Ä‰∏ã val_set_sizeÔºåÊØîÂ¶ÇÔºö&lt;code&gt;--val_set_size 500&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Â¶ÇÊûúÊï∞ÊçÆÈõÜÂ§™Â∞èÔºåËÆæÁΩÆ‰∏Ä‰∏ã val_set_sizeÔºåÊØîÂ¶ÇÔºö&lt;code&gt;--val_set_size 500&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Á§∫‰æãËæìÂá∫&lt;/strong&gt;Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print(evaluate(&#34;create Agile user story for following topic: &#34;, &#34;Ë¥≠‰π∞ÁîµÂΩ±Á•®&#34;, 0.1, 0.75, 40, 4, 512))&#xA;&#xA;Áî®Êà∑ÊïÖ‰∫ãÔºöÂèØ‰ª•Ë¥≠‰π∞ÁîµÂΩ±Á•®&#xA;‰Ωú‰∏∫‰∏Ä‰∏™ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖ&#xA;ÊàëÊÉ≥Âú®Ë¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®‰∏≠Ë¥≠‰π∞ÁîµÂΩ±Á•®&#xA;‰ª•‰æø‰∫éÊàëÂèØ‰ª•Ë¥≠‰π∞ÁîµÂΩ±Á•®&#xA;AC 1: ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂèØ‰ª•Âú®Ë¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®‰∏≠Ë¥≠‰π∞ÁîµÂΩ±Á•®&#xA;ÂÅáËÆæ ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂ∑≤ÁªèÁôªÂΩïË¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®&#xA;ÂΩì ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÁÇπÂáª‚ÄúË¥≠‰π∞ÁîµÂΩ±Á•®‚ÄùÊåâÈíÆ&#xA;‰∫éÊòØ ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂèØ‰ª•Âú®Ë¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®‰∏≠Ë¥≠‰π∞ÁîµÂΩ±Á•®&#xA;AC 2: ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂèØ‰ª•Âú®Ë¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®‰∏≠Êü•ÁúãË¥≠‰π∞ËÆ∞ÂΩï&#xA;ÂÅáËÆæ ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂ∑≤ÁªèÁôªÂΩïË¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®&#xA;ÂΩì ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÁÇπÂáª‚ÄúÊü•ÁúãË¥≠‰π∞ËÆ∞ÂΩï‚ÄùÊåâÈíÆ&#xA;‰∫éÊòØ ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂèØ‰ª•Âú®Ë¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®‰∏≠Êü•ÁúãË¥≠‰π∞ËÆ∞ÂΩï&#xA;AC 3: ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂèØ‰ª•Âú®Ë¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®‰∏≠Êü•ÁúãË¥≠‰π∞ËÆ∞ÂΩï&#xA;ÂÅáËÆæ ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÂ∑≤ÁªèÁôªÂΩïË¥≠‰π∞ÁîµÂΩ±Á•®Â∫îÁî®&#xA;ÂΩì ÁîµÂΩ±Á•®Ë¥≠‰π∞ËÄÖÁÇπÂáª‚ÄúÊü•ÁúãË¥≠‰π∞ËÆ∞ÂΩï‚ÄùÊåâÔøΩÔøΩ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ËÆ≠ÁªÉ 3Ôºö‰ª£Á†ÅËæÖÂä©&lt;/h3&gt; &#xA;&lt;p&gt;ËÆ≠ÁªÉÁªìÊûúÔºàLoRAÔºâËßÅÔºö&lt;a href=&#34;https://github.com/unit-mesh/unit-minions/releases/tag/v0.0.3&#34;&gt;https://github.com/unit-mesh/unit-minions/releases/tag/v0.0.3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Á§∫‰æãËæìÂá∫&lt;/strong&gt;Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;print(evaluate(&#34;Implement the method rmFiles&#34;, &#34;FileUtils:&#34;, 0.1, 0.75, 40, 4, 512))&#xA;&#xA;public class FileUtils {&#xA;&#xA;    private FileUtils() {&#xA;    }&#xA;&#xA;    public static void rmFiles(String path) {&#xA;        File dir = new File(path);&#xA;        File[] files = dir.listFiles();&#xA;        if (files != null) {&#xA;            for (File file : files) {&#xA;                if (file.isFile()) {&#xA;                    file.delete();&#xA;                } else if (file.isDirectory()) {&#xA;                    FileUtils.rmFiles(file.getAbsolutePath());&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQL ËΩ¨‰ª£Á†Å&lt;/h3&gt; &#xA;&lt;p&gt;ËΩ¨Êç¢ËÑöÊú¨Ôºö&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/code/text-to-sql.py&#34;&gt;code/text-to-sql.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Áõ¥Êé•‰ªéÔºö&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/datasets/sql/sql-train.jsonl&#34;&gt;datasets/sql/sql-train.jsonl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Á§∫‰æãËæìÂá∫&lt;/strong&gt;Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;evaluate(&#34;text to sql&#34;, &#34;Ë∞ÅÊòØÊúÄÁæé‰∏ΩÁöÑ‰∫∫&#34;, 0.1, 0.75, 40, 4, 512)&#xA;evaluate(&#34;text to sql&#34;, &#34;Â∞èÊòé‰ªäÂπ¥Âá†Â≤Å&#34;, 0.1, 0.75, 40, 4, 512)&#xA;evaluate(&#34;text to sql&#34;, &#34;What hand guard system is used with a gas piston commando?&#34;, 0.1, 0.75, 40, 4, 512)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Âü∫‰∫éÊ∏ÖÂçéÂ§ßÂ≠¶ÁöÑ ChatGLM ËÆ≠ÁªÉ LoRA&lt;/h2&gt; &#xA;&lt;p&gt;ËÆ≠ÁªÉÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Áõ¥Êé•‰ΩøÁî®Ôºö&lt;a href=&#34;https://raw.githubusercontent.com/unit-mesh/unit-minions/master/chatglm-tuning.ipynb&#34;&gt;chatglm-tuning.ipynb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;‰ª£Á†ÅÁîüÊàê&lt;/h3&gt; &#xA;&lt;h3&gt;ÊµãËØïÁîüÊàê&lt;/h3&gt; &#xA;&lt;h3&gt;Áî®Êà∑ÊïÖ‰∫ãÁîüÊàê&lt;/h3&gt; &#xA;&lt;p&gt;Á§∫‰æã 1Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;evaluate(&#34;Instruction: ÂàõÂª∫Áî®Êà∑ÊïÖ‰∫ã\nInput: ÁîµÂΩ±ÁΩëÁ´ô: Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ \nAnswer:&#34;)&#xA;&#xA;Instruction: ÂàõÂª∫Áî®Êà∑ÊïÖ‰∫ã&#xA;Input: ÁîµÂΩ±ÁΩëÁ´ô: Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ &#xA;Answer:&#xA;&#xA;Áî®Êà∑ÊïÖ‰∫ã:ÂèØ‰ª•Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ&#xA;‰Ωú‰∏∫‰∏Ä‰∏™ÁîµÂΩ±ÁΩëÁ´ôÁöÑÁî®Êà∑&#xA;ÊàëÊÉ≥Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ&#xA;‰ª•‰æø‰∫éÊàëÂèØ‰ª•‰∫ÜËß£ËÆ¢ÂçïÁöÑËØ¶ÁªÜ‰ø°ÊÅØ,Â¶ÇËÆ¢ÂçïÂè∑„ÄÅËÆ¢ÂçïÁä∂ÊÄÅ„ÄÅËÆ¢ÂçïÂÜÖÂÆπÁ≠â„ÄÇ&#xA;&#xA;AC 1: Áî®Êà∑ÂèØ‰ª•Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ&#xA;ÂÅáËÆæ Áî®Êà∑Â∑≤ÁªèÁôªÂΩï&#xA;ÂΩì Áî®Êà∑ÁÇπÂáªÊü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖÊåâÈíÆ&#xA;‰∫éÊòØ Áî®Êà∑ÂèØ‰ª•Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ,ÂåÖÊã¨ËÆ¢ÂçïÂè∑„ÄÅËÆ¢ÂçïÁä∂ÊÄÅ„ÄÅËÆ¢ÂçïÂÜÖÂÆπÁ≠â„ÄÇ&#xA;&#xA;AC 2: Áî®Êà∑ÂèØ‰ª•Êü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ&#xA;ÂÅáËÆæ Áî®Êà∑Ê≤°ÊúâÁôªÂΩï&#xA;ÂΩì Áî®Êà∑ÁÇπÂáªÊü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖÊåâÈíÆ&#xA;‰∫éÊòØ Áî®Êà∑Ë¢´Ë¶ÅÊ±ÇÂÖàÁôªÂΩï,ÁÑ∂ÂêéÊâçËÉΩÊü•ÁúãËÆ¢ÂçïËØ¶ÊÉÖ,ÂåÖÊã¨ËÆ¢ÂçïÂè∑„ÄÅËÆ¢ÂçïÁä∂ÊÄÅ„ÄÅËÆ¢ÂçïÂÜÖÂÆπÁ≠â„ÄÇ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Á§∫‰æã 2Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;evaluate(&#34;Instruction: ÂàõÂª∫Áî®Êà∑ÊïÖ‰∫ã\nInput: Âõ¢Ë¥≠ÁΩëÁ´ô:Áî®Êà∑Ê≥®ÂÜå\nAnswer:&#34;)&#xA;&#xA;Instruction: ÂàõÂª∫Áî®Êà∑ÊïÖ‰∫ã&#xA;Input: Âõ¢Ë¥≠ÁΩëÁ´ô:Áî®Êà∑Ê≥®ÂÜå&#xA;Answer:&#xA;Âõ¢Ë¥≠ÁΩëÁ´ôÁöÑÁî®Êà∑Ê≥®ÂÜåÊïÖ‰∫ã:&#xA;&#xA;‰Ωú‰∏∫‰∏Ä‰∏™Âõ¢Ë¥≠ÁΩëÁ´ôÁöÑÁî®Êà∑&#xA;&#xA;ÊàëÊÉ≥Ê≥®ÂÜå‰∏Ä‰∏™Âõ¢Ë¥≠ÁΩëÁ´ôÁöÑÁî®Êà∑Ë¥¶Âè∑&#xA;&#xA;‰ª•‰æø‰∫éÊàëÂèØ‰ª•‰ΩøÁî®Âõ¢Ë¥≠ÊúçÂä°,Â¶ÇË¥≠‰π∞ÂïÜÂìÅ„ÄÅÊúçÂä°Á≠â„ÄÇ&#xA;&#xA;AC 1: Âõ¢Ë¥≠ÁΩëÁ´ôÁöÑÁî®Êà∑Ê≥®ÂÜåË¥¶Âè∑&#xA;ÂÅáËÆæ Áî®Êà∑ËæìÂÖ•‰∫ÜÊ≥®ÂÜå‰ø°ÊÅØ&#xA;ÂΩì Áî®Êà∑Êèê‰∫§Ê≥®ÂÜå‰ø°ÊÅØ&#xA;‰∫éÊòØ Áî®Êà∑ÂèØ‰ª•ÊàêÂäüÊ≥®ÂÜå‰∏Ä‰∏™Âõ¢Ë¥≠ÁΩëÁ´ôÁöÑÁî®Êà∑Ë¥¶Âè∑&#xA;&#xA;AC 2: Âõ¢Ë¥≠ÁΩëÁ´ôÁöÑÁî®Êà∑Ê≥®ÂÜåË¥¶Âè∑&#xA;ÂÅáËÆæ Áî®Êà∑ËæìÂÖ•‰∫ÜÈîôËØØÁöÑÊ≥®ÂÜå‰ø°ÊÅØ&#xA;ÂΩì Áî®Êà∑Êèê‰∫§Ê≥®ÂÜå‰ø°ÊÅØ&#xA;‰∫éÊòØ Áî®Êà∑ÂèØ‰ª•Ë¢´ÊèêÁ§∫ËæìÂÖ•Ê≠£Á°ÆÁöÑÊ≥®ÂÜå‰ø°ÊÅØ,Âπ∂ÈáçÊñ∞Êèê‰∫§Ê≥®ÂÜå‰ø°ÊÅØ&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>cvg/GlueStick</title>
    <updated>2023-04-09T01:37:22Z</updated>
    <id>tag:github.com,2023-04-09:/cvg/GlueStick</id>
    <link href="https://github.com/cvg/GlueStick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Joint Deep Matcher for Points and Lines üñºÔ∏èüí•üñºÔ∏è&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GlueStick&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/cvg/GlueStick/blob/main/gluestick_matching_demo.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2304.02008&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-2304.02008-b31b1b.svg?style=flat&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://iago-suarez.com/gluestick&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/color/project/green?icon=awesome&amp;amp;label&#34; alt=&#34;Project Page&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Joint deep matcher for points and lines üñºÔ∏èüí•üñºÔ∏è&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cvg/GlueStick/main/resources/demo_seq1.gif&#34; alt=&#34;Visualization of point and line matches&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the official implementation of &lt;a href=&#34;https://arxiv.org/abs/2304.02008&#34;&gt;GlueStick: Robust Image Matching by Sticking Points and Lines Together&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install üõ†Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;To install the software in Ubuntu 22.04 follow these instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential cmake libopencv-dev libopencv-contrib-dev&#xA;git clone --recursive https://github.com/cvg/GlueStick.git&#xA;cd GlueStick&#xA;# Create and activate a virtual environment&#xA;python -m venv venv&#xA;source venv/bin/activate&#xA;pip install -r requirements.txt&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running GlueStick üèÉ&lt;/h2&gt; &#xA;&lt;p&gt;Download the weights of the model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/cvg/GlueStick/releases/download/v0.1_arxiv/checkpoint_GlueStick_MD.tar -P resources/weights&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can execute the inference with it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m gluestick.run -img1 resources/img1.jpg -img2 resources/img2.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training üèãÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;We want to provide you with high-quality and flexible code for training. Stay tuned, we will release it soon!&lt;/p&gt; &#xA;&lt;h2&gt;Citation üìù&lt;/h2&gt; &#xA;&lt;p&gt;If you use this code in your project, please consider citing the following paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{pautrat_suarez_2023_gluestick,&#xA;    title={{GlueStick}: Robust Image Matching by Sticking Points and Lines Together},&#xA;    author={Pautrat, R{\&#39;e}mi* and Su{\&#39;a}rez, Iago* and Yu, Yifan and Pollefeys, Marc and Larsson, Viktor},&#xA;    journal={ArXiv},&#xA;    year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>