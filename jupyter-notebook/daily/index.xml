<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-06T01:43:55Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>andyzoujm/autocast</title>
    <updated>2022-07-06T01:43:55Z</updated>
    <id>tag:github.com,2022-07-06:/andyzoujm/autocast</id>
    <link href="https://github.com/andyzoujm/autocast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Forecasting Future World Events with Neural Networks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Forecasting Future World Events with Neural Networks&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for &#34;&lt;a href=&#34;http://arxiv.org/abs/2206.15474&#34;&gt;Forecasting Future World Events with Neural Networks&lt;/a&gt;&#34;&lt;br&gt; by &lt;a href=&#34;https://andyzoujm.github.io/&#34;&gt;Andy Zou&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/tristan-xiao/&#34;&gt;Tristan Xiao&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/ryanjia/&#34;&gt;Ryan Jia&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/andyzoujm/autocast/master/joekwon.io&#34;&gt;Joe Kwon&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/mmazeika/&#34;&gt;Mantas Mazeika&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/lirichard23/&#34;&gt;Richard Li&lt;/a&gt;, &lt;a href=&#34;https://people.eecs.berkeley.edu/~dawnsong/&#34;&gt;Dawn Song&lt;/a&gt;, &lt;a href=&#34;https://www.stat.berkeley.edu/~jsteinhardt/&#34;&gt;Jacob Steinhardt&lt;/a&gt;, &lt;a href=&#34;https://owainevans.github.io/&#34;&gt;Owain Evans&lt;/a&gt;, and &lt;a href=&#34;https://danhendrycks.com/&#34;&gt;Dan Hendrycks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/andyzoujm/autocast/master/assets/splash.png&#34; width=&#34;750&#34;&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Forecasting future world events is a challenging but valuable task. Forecasts of climate, geopolitical conflict, pandemics and economic indicators help shape policy and decision making. In these domains, the judgment of expert humans contributes to the best forecasts. Given advances in language modeling, can these forecasts be automated? To this end, we introduce Autocast, a dataset containing thousands of forecasting questions and an accompanying news corpus. Questions are taken from forecasting tournaments, ensuring high quality, real-world importance, and diversity. The news corpus is organized by date, allowing us to precisely simulate the conditions under which humans made past forecasts (avoiding leakage from the future). We test language models on our forecasting task and find that performance is far below a human expert baseline. However, performance improves with increased model size and incorporation of relevant information from the news corpus. In sum, Autocast poses a novel challenge for large language models and improved performance could bring large practical benefits.&lt;/p&gt; &#xA;&lt;h2&gt;Autocast Dataset&lt;/h2&gt; &#xA;&lt;p&gt;The latest version of the &lt;a href=&#34;https://people.eecs.berkeley.edu/~hendrycks/autocast.tar.gz&#34;&gt;Autocast dataset can be downloaded here&lt;/a&gt;. The collection of news articles will be released soon. For more details on how to use the Autocast dataset, please refer to our short demonstration in &lt;code&gt;usage.ipynb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each question has the following fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;:                &#34;unique identifier (str)&#34;,&#xA;  &#34;question&#34;:          &#34;question body (str)&#34;,&#xA;  &#34;background&#34;:        &#34;question context/details (str)&#34;,&#xA;  &#34;qtype&#34;:             &#34;question type (str)&#34;,&#xA;  &#34;status&#34;:            &#34;question status (str)&#34;,&#xA;  &#34;choices&#34;:           &#34;choices or possible ranges (List or Dict)&#34;,&#xA;  &#34;answer&#34;:            &#34;question resolution (str or float)&#34;,&#xA;  &#34;crowd&#34;:             &#34;human crowd forecasts over time (List)&#34;,&#xA;  &#34;publish_time&#34;:      &#34;publish timestamp (str)&#34;,&#xA;  &#34;close_time&#34;:        &#34;close timestamp (str)&#34;,&#xA;  &#34;prediction_count&#34;:  &#34;number of crowd predictions (int)&#34;,&#xA;  &#34;forecaster_count&#34;:  &#34;number of crowd forecasters (int)&#34;,&#xA;  &#34;tags&#34;:              &#34;question category (List)&#34;,&#xA;  &#34;source_links&#34;:      &#34;source links from comments (List)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We obtained permission from &lt;a href=&#34;https://www.metaculus.com/&#34;&gt;Metaculus&lt;/a&gt; to host the dataset on GitHub for research purposes only.&lt;/p&gt; &#xA;&lt;h2&gt;IntervalQA Dataset&lt;/h2&gt; &#xA;&lt;p&gt;Motivated by the difficulty of forecasting numbers across orders of magnitude (e.g. global cases of COVID-19 in 2022), we also curate IntervalQA, a dataset of numerical questions and metrics for calibration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~hendrycks/intervalqa.tar.gz&#34;&gt;Download the IntervalQA dataset here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this useful in your research, please consider citing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{zouforecasting2022,&#xA;  title={Forecasting Future World Events with Neural Networks},&#xA;  author={Andy Zou and Tristan Xiao and Ryan Jia and Joe Kwon and Mantas Mazeika and Richard Li and Dawn Song and Jacob Steinhardt and Owain Evans and Dan Hendrycks},&#xA;  journal={arXiv preprint arXiv:2206.15474},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Lkruitwagen/global-fossil-fuel-supply-chain</title>
    <updated>2022-07-06T01:43:55Z</updated>
    <id>tag:github.com,2022-07-06:/Lkruitwagen/global-fossil-fuel-supply-chain</id>
    <link href="https://github.com/Lkruitwagen/global-fossil-fuel-supply-chain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The global fossil fuel supply chain, mapped at the asset-level.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Asset-level Transition Risk in the Global Coal, Oil, and Gas Supply Chains&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kruitwagen, L., Klaas, J., Baghaei Lakeh, A., &amp;amp; Fan, J.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A repo for building a network model of the global fossil fuel supply chain using asset-level data. A project in support of the &lt;a href=&#34;https://www.oxfordmartin.ox.ac.uk/post-carbon/&#34;&gt;Oxford Martin Programme on the Post-Carbon Transition&lt;/a&gt; generously supported by &lt;a href=&#34;https://www.microsoft.com/en-us/ai/ai-for-earth&#34;&gt;Microsoft AI for Earth&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;p&gt;Climate change risks manifest in the real economy, with grave consequences for welfare of human populations and the biosphere; the economic returns of industrial sectors; and geopolitical stability. Understanding the diffusion of risks in real infrastructure networks is an urgent priority for delivering climate change mitigation, adaptation, and resiliency. The oil, gas, and coal supply chains are the most salient progenitors and inheritors of these environmental risks. We prepare a geospatial arrangement of the global oil, gas, and coal supply chains using open-source asset-level data. The resulting complex network has 6.09mn nodes and 15.70mn edges and is implemented in a graph database. With estimates of annual coal, gas, and oil demand in 13,229 global population centres and 8,165 global power stations, we use a minimum-cost flow method to estimate global asset-level energy flows. We develop a method for cross-validating and tuning our network flow simulation using aggregate country-level import and export statistics. We demonstrate two analyses of asset-level transition risk: a counter-factual demand shock scenario consistent with the IEA Sustainable Development Scenario; and supply shock scenarios developed by interdicting regionally-aggregated coal, oil, and gas supplies. Our contribution lies in the global scope of our asset-level supply chain and the novelty of our minimum-cost flow method. We conclude with a discussion of further research directions and make the graph database and supporting code publicly available.&lt;/p&gt; &#xA;&lt;p&gt;The full paper is available &lt;a href=&#34;https://papers.ssrn.com/abstract=3783412&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Figure 1: Global coal, oil, and gas asset-level data&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/all_assets.png&#34; alt=&#34;Global fossil fuel infrastructure&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;p&gt;Our work uses only open-source data in order to maximise accessibility and reporduceability. We build on the substantial efforts of public sector organisations to develop and publish open datasets of energy system infrastrucutre and activity, particularly the work of the Global Energy Monitor, the World Resources Institute ResourceWatch, the Global Oil and Gas Features Database, the European Commision Joint Research Council, OpenStreetMap.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;N_installations&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;N_sources&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Quality&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Icon&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Well Pads&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9,845&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Good&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/OILWELL.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oil Fields&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;25,236&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;63&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Good&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/OILFIELD.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Coal Mines&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3,099&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;32&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Adequate&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/COALMINE.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Processing &amp;amp; Refining Facilities&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2,501&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;55&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Good&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/REFINERY.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LNG Liqufication &amp;amp; Regasification&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;329&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Excellent&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/LNGTERMINAL.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pipelines&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;94,448&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;82&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Good&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/PIPELINE.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ports&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3,702&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Excellent&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/PORT.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shipping Routes&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8,273&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Excellent&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/SHIPPINGROUTE.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Railways&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;496,808&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;52&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Excellent&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/RAILWAY.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Power Stations&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;28,664&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Good&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/POWERSTATION.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Population Centres&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;13,229&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Excellent&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/CITY.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Data must be &lt;a href=&#34;https://drive.google.com/file/d/1LWXT3WyNpMS8xmdFzStbUyQlzdPLGhv_/view?usp=sharing&#34;&gt;downloaded&lt;/a&gt; and unzipped in a folder &lt;code&gt;data/&lt;/code&gt; in the main directory.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h4&gt;Environment&lt;/h4&gt; &#xA;&lt;p&gt;On a fresh linux install you will require the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install python3-dev build-essential libspatialindex-dev openjdk-8-jre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;conda&lt;/a&gt; for environment management. Create a new environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n ffsc python=3.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Activate your conda environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda activate ffsc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone and change directory into this repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Lkruitwagen/global-fossil-fuel-supply-chain.git&#xA;cd global-fossil-fuel-supply-chain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install pip package manager to the environment if it isn&#39;t already:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the project packages. Conda is used to install geospatial packages with c binary dependancies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;conda install -c conda-forge --file conda_reqs.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;Save the environment variables we need in activation and deactivation scripts in the conda environment. Follow the &lt;a href=&#34;https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#setting-environment-variables&#34;&gt;conda instructions&lt;/a&gt; for your os, and adapt the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd CONDA_PREFIX&#xA;mkdir -p ./etc/conda/activate.d&#xA;mkdir -p ./etc/conda/deactivate.d&#xA;touch ./etc/conda/activate.d/env_vars.sh&#xA;touch ./etc/conda/deactivate.d/env_vars.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;edit &lt;code&gt;./etc/conda/activate.d/env_vars.sh&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;export USE_PYGEOS=1&#xA;export PYTHONPATH=$PWD&#xA;export NUMEXPR_MAX_THREADS=24 # or something suiting your resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;edit &lt;code&gt;./etc/conda/deactivate.d/env_vars.sh&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/sh&#xA;&#xA;unset PYTHONPATH&#xA;unset USE_PYGEOS&#xA;unset NUMEXPR_MAX_THREADS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save and close both files.&lt;/p&gt; &#xA;&lt;h4&gt;Community Detection&lt;/h4&gt; &#xA;&lt;p&gt;Clone &lt;a href=&#34;https://github.com/nicolasdugue/DirectedLouvain&#34;&gt;the DirectedLouvain repository&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/nicolasdugue/DirectedLouvain.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enter the repository and run the MakeFile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd DirectedLouvain&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PyPy&lt;/h4&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://www.pypy.org/index.html&#34;&gt;PyPy&lt;/a&gt; to significantly speed-up dijkstra minimum-cost path search. PyPy uses a just-in-time compiler to significantly speed-up Python code execution. &lt;a href=&#34;https://www.pypy.org/download.html&#34;&gt;Download&lt;/a&gt; the correct version of PyPy to &lt;code&gt;bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;(Optional) Neo4J Database&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Note if ssh tunnelling you will need to redirect port 8678 and 8888&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neo4j.com/docs/operations-manual/current/installation/linux/&#34;&gt;Install neo4j server&lt;/a&gt;. We use Neo4j 3.5 in our experiments, but everything described here should also work with Neo4j 4.0&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Useage&lt;/h2&gt; &#xA;&lt;h3&gt;Running the computational pipeline&lt;/h3&gt; &#xA;&lt;p&gt;The main pipeline entrypoint is &lt;code&gt;cli.py&lt;/code&gt;. The commands available to &lt;code&gt;cli.py&lt;/code&gt; can be found with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python cli.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following top-level commands are available: &lt;code&gt;network-assembly&lt;/code&gt;,&lt;code&gt;solve-flow&lt;/code&gt;,&lt;code&gt;shock-analysis&lt;/code&gt;, and &lt;code&gt;visualisation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The pipeline makes extensive use of &lt;a href=&#34;https://kedro.readthedocs.io/en/stable/&#34;&gt;Kedro&lt;/a&gt;, which is a computational graph manager. Kedro uses of a data catalog, which is here: &lt;a href=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/conf/base/catalog.yml&#34;&gt;conf/base/catalog.yml&lt;/a&gt;. The catalog can also be used in other scripts and environments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from kedro.io import DataCatalog&#xA;import yaml&#xA;&#xA;catalog = DataCatalog(yaml.load(open(&#39;/path/to/conf/base/catalog.yaml&#39;,&#39;r&#39;),Loader=yaml.SafeLoader))&#xA;dataframe = catalog.load(&#39;&amp;lt;dataframe-key&amp;gt;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each pipeline is a computational graph with computation nodes and dataset edges, creating a version-controlled reproduceable workflow from raw data through to analysis. Computation nodes are labelled with &lt;em&gt;tags&lt;/em&gt; so the pipeline can be run one-node-at-a-time, if desired. The computational graph for the &lt;code&gt;network-assembly&lt;/code&gt; pipeline is shown in the figure below. Each pipeline can be run using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python cli.py &amp;lt;pipeline-command&amp;gt; --tags=&amp;lt;list,of,comma-separated,tags&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tags are nested such that top-level tags will execute a while pipeline step, and nested tags will execute substeps for certain asset types or energy carriers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Figure A-1: Network assembly computational graph&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Lkruitwagen/global-fossil-fuel-supply-chain/master/image_assets/dag.png&#34; alt=&#34;Computational graph&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Assembling the infrastructure network&lt;/h3&gt; &#xA;&lt;p&gt;This pipeline assembles the asset-level infrastructure network. It can be run with &lt;code&gt;python cli.py network-assembly&lt;/code&gt;. A comma-separated list of &lt;code&gt;--tags&lt;/code&gt; can also be passed. Passing &lt;code&gt;--help&lt;/code&gt; produces the following documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: cli.py network-assembly [OPTIONS]&#xA;&#xA;Assemble the basic network from asset-level data. See&#xA;ffsc.pipeline.pipeline.py for detailed tags.&#xA;&#xA;AVAILABLE TOP-LEVEL TAGS:&#xA;-------------------------&#xA;--preprocess : Preprocessing and homogenisation of all raw asset data.&#xA;--prep       : Geospatial preparation operations on all data.&#xA;--sjoin      : Spatial join operations matching linear and point assets.&#xA;--flmile     : First- and last-mile matching operations to gapfill missing data.&#xA;--explode    : Geospatial post-processing of joining and matching.&#xA;--simplify   : Simplification operations to reduce the number of nodes.&#xA;&#xA;Options:&#xA;--tags TEXT  Optionally specify any individual node tags you want to run in&#xA;           a comma-separated list.&#xA;&#xA;--help       Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Solving energy flow on the network&lt;/h3&gt; &#xA;&lt;p&gt;This pipeline calculates asset-level energy flow through the network, from energy sources (i.e. coalmines, and oil and gas fields and wells) through to energy sinks (population centres and powerstations). It can be run with &lt;code&gt;python cli.py solve-flow&lt;/code&gt;. A comma-separated list of &lt;code&gt;--tags&lt;/code&gt; can also be passed. Passing &lt;code&gt;--help&lt;/code&gt; produces the following documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: cli.py solve-flow [OPTIONS]&#xA;&#xA;Assemble the basic network from asset-level data. See&#xA;ffsc.flow.flow_pipeline.py, ffsc.communities.community_pipeline.py, and&#xA;ffsc.interdiction.interdiction_pipeline.py for detailed tags.&#xA;&#xA;AVAILABLE TOP-LEVEL TAGS:&#xA;-------------------------&#xA;--flow_edges           : Prepare network edges dataframe.&#xA;--flow_nodes           : Prepare network nodes dataframe.&#xA;--flow_nx              : Test network connectivity and prepared for flow calculations.&#xA;--community-prep       : Prepare to add communities to network.&#xA;--community-run        : Run community detection algorithm.&#xA;--community-post-nodes : Post-process community detection onto node dataframe.&#xA;--community-post-edges : Post-process community detection onto edge dataframe.&#xA;--dijkstra-pickle      : Pickle edges in preparation for dijkstra mincost path.&#xA;--dijkstra-paths       : Run async dijkstra mincost path.&#xA;--dijkstra-adj         : Post-process dijkstra to mincost adjacency matrix.&#xA;--dijkstra-flow        : Solve flow using iterative cost-scaling.&#xA;&#xA;Options:&#xA;--tags TEXT  Optionally specify any individual node tags you want to run&#xA;--help       Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Analysing demand and supply shocks&lt;/h3&gt; &#xA;&lt;p&gt;The energy infrastructure network can be treated with demand and supply shocks. Flow can be recalculated to see the effect of the shocks on asset-level energy flow and costs. The pipeline can be run with &lt;code&gt;python cli.py shock-analysis&lt;/code&gt;. A comma-separated list of &lt;code&gt;--tags&lt;/code&gt; can also be passed. Passing &lt;code&gt;--help&lt;/code&gt; produces the following documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: cli.py shock-analysis [OPTIONS]&#xA;&#xA;Prepare demand and supply shock analysis. See&#xA;ffsc.interdiction.interdiction_pipeline.py for detailed tags.&#xA;&#xA;AVAILABLE TOP-LEVEL TAGS:&#xA;-------------------------&#xA;--sds_counterfactual       : Prepare Sustainable Development Scenario demand shock analysis.&#xA;--supply-interdiction      : Prepare supply interdiction shock analysis.&#xA;--post-supply-interdiction : Post-process supply interdiction shock analysis.&#xA;&#xA;Options:&#xA;--tags TEXT  Optionally specify any individual node tags you want to run&#xA;--help       Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Visualising the data, flow, and analysis&lt;/h3&gt; &#xA;&lt;p&gt;The asset-level data can be visualised on a world map, and scaled and colored by the amount of energy flow passing through each asset. The pipeline can be run with &lt;code&gt;python cli.py visualisation&lt;/code&gt;. A comma-separated list of &lt;code&gt;--tags&lt;/code&gt; can also be passed. Passing &lt;code&gt;--help&lt;/code&gt; produces the following documentation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: cli.py visualisation [OPTIONS]&#xA;&#xA;Prepare visualisation of assets, flow, and demand shock counterfactual.&#xA;See ffsc.visualisation.visualise_pipeline.py for detailed tags.&#xA;&#xA;AVAILABLE TOP-LEVEL TAGS:&#xA;-------------------------&#xA;--visualise-assets      : Visualise all assets.&#xA;--visualise-iso2        : Add iso2 country codes to dataframes.&#xA;--visualise-trade-prep  : Prepare trade dataframes for comparison.&#xA;--visualise-trade       : Visualise actual trade and production vs simulated.&#xA;--visualise-flow        : Visualise energy flow.&#xA;--compare-flow          : Compare energy flow to SDS demand shock energy flow.&#xA;&#xA;Options:&#xA;--tags TEXT  Optionally specify any individual node tags you want to run&#xA;--help       Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing files into Neo4j&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure Neo4j is shut down. The installer might start up neo4j under a different user (e.g. Neo4j). In this case, you might want to find the process under which Neo4j runs using &lt;code&gt;sudo ps -a | grep neo4j&lt;/code&gt;. Find the PID of the process and kill it using &lt;code&gt;sudo kill&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;As Neo4j&#39;s files may be restricted, you want to do the next steps as root.&lt;/li&gt; &#xA; &lt;li&gt;Delete Neo4j&#39;s data folder from the old database. On Linux, this is stored under &lt;code&gt;/var/lib/neo4j/data&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Import the data by executing the &lt;code&gt;bin/import.sh&lt;/code&gt; script, which you can find under &lt;code&gt;src/neo4j_commands&lt;/code&gt; in this repository.&lt;/li&gt; &#xA; &lt;li&gt;After the import is complete, restart Neo4j using &lt;code&gt;neo4j start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>bukosabino/ta</title>
    <updated>2022-07-06T01:43:55Z</updated>
    <id>tag:github.com,2022-07-06:/bukosabino/ta</id>
    <link href="https://github.com/bukosabino/ta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Technical Analysis Library using Pandas and Numpy&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/circleci/build/github/bukosabino/ta/master&#34; alt=&#34;CircleCI&#34;&gt; &lt;a href=&#34;https://technical-analysis-library-in-python.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/technical-analysis-library-in-python/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/bukosabino/ta&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/bukosabino/ta/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://prospector.landscape.io/en/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linter-Prospector-coral.svg?sanitize=true&#34; alt=&#34;Linter: Prospector&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/ta&#34; alt=&#34;PyPI&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dm/ta&#34; alt=&#34;PyPI - Downloads&#34;&gt; &lt;a href=&#34;https://www.paypal.me/guau/3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate%20%24-PayPal-brightgreen.svg?sanitize=true&#34; alt=&#34;Donate PayPal&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Technical Analysis Library in Python&lt;/h1&gt; &#xA;&lt;p&gt;It is a Technical Analysis library useful to do feature engineering from financial time series datasets (Open, Close, High, Low, Volume). It is built on Pandas and Numpy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bukosabino/ta/master/static/figure.png&#34; alt=&#34;Bollinger Bands graph example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The library has implemented 42 indicators:&lt;/p&gt; &#xA;&lt;h4&gt;Volume&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Money Flow Index (MFI)&lt;/li&gt; &#xA; &lt;li&gt;Accumulation/Distribution Index (ADI)&lt;/li&gt; &#xA; &lt;li&gt;On-Balance Volume (OBV)&lt;/li&gt; &#xA; &lt;li&gt;Chaikin Money Flow (CMF)&lt;/li&gt; &#xA; &lt;li&gt;Force Index (FI)&lt;/li&gt; &#xA; &lt;li&gt;Ease of Movement (EoM, EMV)&lt;/li&gt; &#xA; &lt;li&gt;Volume-price Trend (VPT)&lt;/li&gt; &#xA; &lt;li&gt;Negative Volume Index (NVI)&lt;/li&gt; &#xA; &lt;li&gt;Volume Weighted Average Price (VWAP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Volatility&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Average True Range (ATR)&lt;/li&gt; &#xA; &lt;li&gt;Bollinger Bands (BB)&lt;/li&gt; &#xA; &lt;li&gt;Keltner Channel (KC)&lt;/li&gt; &#xA; &lt;li&gt;Donchian Channel (DC)&lt;/li&gt; &#xA; &lt;li&gt;Ulcer Index (UI)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Trend&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple Moving Average (SMA)&lt;/li&gt; &#xA; &lt;li&gt;Exponential Moving Average (EMA)&lt;/li&gt; &#xA; &lt;li&gt;Weighted Moving Average (WMA)&lt;/li&gt; &#xA; &lt;li&gt;Moving Average Convergence Divergence (MACD)&lt;/li&gt; &#xA; &lt;li&gt;Average Directional Movement Index (ADX)&lt;/li&gt; &#xA; &lt;li&gt;Vortex Indicator (VI)&lt;/li&gt; &#xA; &lt;li&gt;Trix (TRIX)&lt;/li&gt; &#xA; &lt;li&gt;Mass Index (MI)&lt;/li&gt; &#xA; &lt;li&gt;Commodity Channel Index (CCI)&lt;/li&gt; &#xA; &lt;li&gt;Detrended Price Oscillator (DPO)&lt;/li&gt; &#xA; &lt;li&gt;KST Oscillator (KST)&lt;/li&gt; &#xA; &lt;li&gt;Ichimoku Kinkō Hyō (Ichimoku)&lt;/li&gt; &#xA; &lt;li&gt;Parabolic Stop And Reverse (Parabolic SAR)&lt;/li&gt; &#xA; &lt;li&gt;Schaff Trend Cycle (STC)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Momentum&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Relative Strength Index (RSI)&lt;/li&gt; &#xA; &lt;li&gt;Stochastic RSI (SRSI)&lt;/li&gt; &#xA; &lt;li&gt;True strength index (TSI)&lt;/li&gt; &#xA; &lt;li&gt;Ultimate Oscillator (UO)&lt;/li&gt; &#xA; &lt;li&gt;Stochastic Oscillator (SR)&lt;/li&gt; &#xA; &lt;li&gt;Williams %R (WR)&lt;/li&gt; &#xA; &lt;li&gt;Awesome Oscillator (AO)&lt;/li&gt; &#xA; &lt;li&gt;Kaufman&#39;s Adaptive Moving Average (KAMA)&lt;/li&gt; &#xA; &lt;li&gt;Rate of Change (ROC)&lt;/li&gt; &#xA; &lt;li&gt;Percentage Price Oscillator (PPO)&lt;/li&gt; &#xA; &lt;li&gt;Percentage Volume Oscillator (PVO)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Others&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Daily Return (DR)&lt;/li&gt; &#xA; &lt;li&gt;Daily Log Return (DLR)&lt;/li&gt; &#xA; &lt;li&gt;Cumulative Return (CR)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://technical-analysis-library-in-python.readthedocs.io/en/latest/&#34;&gt;https://technical-analysis-library-in-python.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Motivation to use&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/technical-analysis-library-to-financial-datasets-with-pandas-python-4b2b390d3543&#34;&gt;English&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/datos-y-ciencia/biblioteca-de-an%C3%A1lisis-t%C3%A9cnico-sobre-series-temporales-financieras-para-machine-learning-con-cb28f9427d0&#34;&gt;Spanish&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to use (Python 3)&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip install --upgrade ta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this library you should have a financial time series dataset including &lt;code&gt;Timestamp&lt;/code&gt;, &lt;code&gt;Open&lt;/code&gt;, &lt;code&gt;High&lt;/code&gt;, &lt;code&gt;Low&lt;/code&gt;, &lt;code&gt;Close&lt;/code&gt; and &lt;code&gt;Volume&lt;/code&gt; columns.&lt;/p&gt; &#xA;&lt;p&gt;You should clean or fill NaN values in your dataset before add technical analysis features.&lt;/p&gt; &#xA;&lt;p&gt;You can get code examples in &lt;a href=&#34;https://github.com/bukosabino/ta/tree/master/examples_to_use&#34;&gt;examples_to_use&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;You can visualize the features in &lt;a href=&#34;https://github.com/bukosabino/ta/raw/master/examples_to_use/visualize_features.ipynb&#34;&gt;this notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Example adding all features&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;from ta import add_all_ta_features&#xA;from ta.utils import dropna&#xA;&#xA;&#xA;# Load datas&#xA;df = pd.read_csv(&#39;ta/tests/data/datas.csv&#39;, sep=&#39;,&#39;)&#xA;&#xA;# Clean NaN values&#xA;df = dropna(df)&#xA;&#xA;# Add all ta features&#xA;df = add_all_ta_features(&#xA;    df, open=&#34;Open&#34;, high=&#34;High&#34;, low=&#34;Low&#34;, close=&#34;Close&#34;, volume=&#34;Volume_BTC&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example adding particular feature&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;from ta.utils import dropna&#xA;from ta.volatility import BollingerBands&#xA;&#xA;&#xA;# Load datas&#xA;df = pd.read_csv(&#39;ta/tests/data/datas.csv&#39;, sep=&#39;,&#39;)&#xA;&#xA;# Clean NaN values&#xA;df = dropna(df)&#xA;&#xA;# Initialize Bollinger Bands Indicator&#xA;indicator_bb = BollingerBands(close=df[&#34;Close&#34;], window=20, window_dev=2)&#xA;&#xA;# Add Bollinger Bands features&#xA;df[&#39;bb_bbm&#39;] = indicator_bb.bollinger_mavg()&#xA;df[&#39;bb_bbh&#39;] = indicator_bb.bollinger_hband()&#xA;df[&#39;bb_bbl&#39;] = indicator_bb.bollinger_lband()&#xA;&#xA;# Add Bollinger Band high indicator&#xA;df[&#39;bb_bbhi&#39;] = indicator_bb.bollinger_hband_indicator()&#xA;&#xA;# Add Bollinger Band low indicator&#xA;df[&#39;bb_bbli&#39;] = indicator_bb.bollinger_lband_indicator()&#xA;&#xA;# Add Width Size Bollinger Bands&#xA;df[&#39;bb_bbw&#39;] = indicator_bb.bollinger_wband()&#xA;&#xA;# Add Percentage Bollinger Bands&#xA;df[&#39;bb_bbp&#39;] = indicator_bb.bollinger_pband()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Deploy and develop (for developers)&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/bukosabino/ta.git&#xA;$ cd ta&#xA;$ pip install -r requirements-play.txt&#xA;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sponsor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bukosabino/ta/master/static/logo_neuroons_byOS_blue.png&#34; alt=&#34;Logo OpenSistemas&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thank you to &lt;a href=&#34;https://opensistemas.com&#34;&gt;OpenSistemas&lt;/a&gt;! It is because of your contribution that I am able to continue the development of this open source library.&lt;/p&gt; &#xA;&lt;h1&gt;Based on&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Technical_analysis&#34;&gt;https://en.wikipedia.org/wiki/Technical_analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandas.pydata.org&#34;&gt;https://pandas.pydata.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FreddieWitherden/ta&#34;&gt;https://github.com/FreddieWitherden/ta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/femtotrader/pandas_talib&#34;&gt;https://github.com/femtotrader/pandas_talib&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;In Progress&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automated tests for all the indicators.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/pydata/numexpr&#34;&gt;NumExpr&lt;/a&gt; to speed up the NumPy/Pandas operations? &lt;a href=&#34;https://towardsdatascience.com/speed-up-your-numpy-and-pandas-with-numexpr-package-25bd1ab0836b&#34;&gt;Article Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://en.wikipedia.org/wiki/Technical_analysis&#34;&gt;more technical analysis features&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Wrapper to get financial data.&lt;/li&gt; &#xA; &lt;li&gt;Use of the Pandas multi-indexing techniques to calculate several indicators at the same time.&lt;/li&gt; &#xA; &lt;li&gt;Use Plotly/Streamlit to visualize features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Changelog&lt;/h1&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/bukosabino/ta/raw/master/RELEASE.md&#34;&gt;changelog&lt;/a&gt; of project.&lt;/p&gt; &#xA;&lt;h1&gt;Donation&lt;/h1&gt; &#xA;&lt;p&gt;If you think &lt;code&gt;ta&lt;/code&gt; library help you, please consider &lt;a href=&#34;https://www.paypal.me/guau/3&#34;&gt;buying me a coffee&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Developed by Darío López Padial (aka Bukosabino) and &lt;a href=&#34;https://github.com/bukosabino/ta/graphs/contributors&#34;&gt;other contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please, let me know about any comment or feedback.&lt;/p&gt; &#xA;&lt;p&gt;Also, I am a software engineer freelance focused on Data Science using Python tools such as Pandas, Scikit-Learn, Backtrader, Zipline or Catalyst. Don&#39;t hesitate to contact me if you need to develop something related with this library, Python, Technical Analysis, AlgoTrading, Machine Learning, etc.&lt;/p&gt;</summary>
  </entry>
</feed>