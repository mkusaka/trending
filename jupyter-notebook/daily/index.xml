<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-25T01:33:26Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>williamgilpin/dysts</title>
    <updated>2023-12-25T01:33:26Z</updated>
    <id>tag:github.com,2023-12-25:/williamgilpin/dysts</id>
    <link href="https://github.com/williamgilpin/dysts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;More than a hundred strange attractors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dysts&lt;/h1&gt; &#xA;&lt;p&gt;Analyze more than a hundred chaotic systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/dysts/data/fig_github.png&#34; alt=&#34;An embedding of all chaotic systems in the collection&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import a model and run a simulation with default initial conditions and parameter values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dysts.flows import Lorenz&#xA;&#xA;model = Lorenz()&#xA;sol = model.make_trajectory(1000)&#xA;# plt.plot(sol[:, 0], sol[:, 1])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify a model&#39;s parameter values and re-integrate&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = Lorenz()&#xA;model.gamma = 1&#xA;model.ic = [0.1, 0.0, 5]&#xA;sol = model.make_trajectory(1000)&#xA;# plt.plot(sol[:, 0], sol[:, 1])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Integrate new trajectories from all 135 chaotic systems with a custom granularity&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dysts.base import make_trajectory_ensemble&#xA;&#xA;all_out = make_trajectory_ensemble(100, resample=True, pts_per_period=75)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load a precomputed collection of time series from all 135 chaotic systems&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dysts.datasets import load_dataset&#xA;&#xA;data = load_dataset(subsets=&#34;train&#34;, data_format=&#34;numpy&#34;, standardize=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional functionality and examples can be found in &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/demos.ipynb&#34;&gt;&lt;code&gt;the demonstrations notebook.&lt;/code&gt;&lt;/a&gt;. The full API documentation &lt;a href=&#34;http://www.wgilpin.com/dysts/spbuild/html/index.html&#34;&gt;can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;For more information, or if using this code for published work, please consider citing the papers.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;William Gilpin. &#34;Chaos as an interpretable benchmark for forecasting and data-driven modelling&#34; Advances in Neural Information Processing Systems (NeurIPS) 2021 &lt;a href=&#34;https://arxiv.org/abs/2110.05266&#34;&gt;https://arxiv.org/abs/2110.05266&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;William Gilpin. &#34;Model scale versus domain knowledge in statistical forecasting of chaotic systems&#34; Physical Review Research 2023 &lt;a href=&#34;https://arxiv.org/abs/2303.08011&#34;&gt;https://arxiv.org/abs/2303.08011&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We are very grateful for any suggestions or contributions. See &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from PyPI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install dysts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/#additional-installation-guide&#34;&gt;additional installation guide&lt;/a&gt; for more options.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The benchmarks reported in our preprint can be found in &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/benchmarks/&#34;&gt;&lt;code&gt;benchmarks&lt;/code&gt;&lt;/a&gt;. An overview of the contents of the directory can be found in &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/benchmarks/BENCHMARKS.md&#34;&gt;&lt;code&gt;BENCHMARKS.md&lt;/code&gt;&lt;/a&gt;, while individual task areas are summarized in corresponding Jupyter Notebooks within the top level of the directory.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code to generate benchmark forecasting and training experiments are included in &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/benchmarks/&#34;&gt;&lt;code&gt;benchmarks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pre-computed time series with training and test partitions are included in &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/dysts/data/&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The raw definitions metadata for all chaotic systems are included in the database file &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/dysts/data/chaotic_attractors.json&#34;&gt;&lt;code&gt;chaotic_attractors&lt;/code&gt;&lt;/a&gt;. The Python implementations of differential equations can be found in &lt;a href=&#34;https://raw.githubusercontent.com/williamgilpin/dysts/master/dysts/flows.py&#34;&gt;&lt;code&gt;the flows module&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Additional Installation Guide&lt;/h2&gt; &#xA;&lt;p&gt;To obtain the latest version, including new features and bug fixes, download and install the project directly from GitHub&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/williamgilpin/dysts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test that everything is working&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m unittest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the optional precomputed trajectories (a large, static dataset), install directly from GitHub&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/williamgilpin/dysts_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key dependencies are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3+&lt;/li&gt; &#xA; &lt;li&gt;numpy&lt;/li&gt; &#xA; &lt;li&gt;scipy&lt;/li&gt; &#xA; &lt;li&gt;pandas&lt;/li&gt; &#xA; &lt;li&gt;sdeint (optional, but required for stochastic dynamics)&lt;/li&gt; &#xA; &lt;li&gt;numba (optional, but speeds up generation of trajectories)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These additional optional dependencies are needed to reproduce some portions of this repository, such as benchmarking experiments and estimation of invariant properties of each dynamical system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nolds (used for calculating the correlation dimension)&lt;/li&gt; &#xA; &lt;li&gt;darts (used for forecasting benchmarks)&lt;/li&gt; &#xA; &lt;li&gt;sktime (used for classification benchmarks)&lt;/li&gt; &#xA; &lt;li&gt;tsfresh (used for statistical quantity extraction)&lt;/li&gt; &#xA; &lt;li&gt;pytorch (used for neural network benchmarks)&lt;/li&gt; &#xA; &lt;li&gt;sympy (used for equation analysis benchmarks)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Currently there are 131 continuous time models, including several delay diffential equations. There is also a separate module with 10 discrete maps, which is currently being expanded.&lt;/li&gt; &#xA; &lt;li&gt;The right hand side of each dynamical equation is compiled using &lt;code&gt;numba&lt;/code&gt;, wherever possible. Ensembles of trajectories are vectorized where needed.&lt;/li&gt; &#xA; &lt;li&gt;Attractor names, default parameter values, references, and other metadata are stored in parseable JSON database files. Parameter values are based on standard or published values, and default initial conditions were generated by running each model until the moments of the autocorrelation function all become stationary.&lt;/li&gt; &#xA; &lt;li&gt;The default integration step is stored in each continuous-time model&#39;s &lt;code&gt;dt&lt;/code&gt; field. This integration timestep was chosen based on the highest significant frequency observed in the power spectrum, with significance being determined relative to &lt;a href=&#34;https://en.wikipedia.org/wiki/Surrogate_data_testing&#34;&gt;random phase surrogates&lt;/a&gt;. The &lt;code&gt;period&lt;/code&gt; field contains the timescale associated with the dominant frequency in each system&#39;s power spectrum. When using the &lt;code&gt;model.make_trajectory()&lt;/code&gt; method with the optional setting &lt;code&gt;resample=True&lt;/code&gt;, integration is performed at the default &lt;code&gt;dt&lt;/code&gt;. The integrated trajectory is then resampled based on the &lt;code&gt;period&lt;/code&gt;. The resulting trajectories will have have consistant dominant timescales across models, despite having different integration timesteps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Two existing collections of named systems can be found on the webpages of &lt;a href=&#34;http://www.3d-meier.de/tut19/Seite1.html&#34;&gt;JÃ¼rgen Meier&lt;/a&gt; and &lt;a href=&#34;http://sprott.physics.wisc.edu/sprott.htm&#34;&gt;J. C. Sprott&lt;/a&gt;. The current version of &lt;code&gt;dysts&lt;/code&gt; contains all systems from both collections.&lt;/li&gt; &#xA; &lt;li&gt;Several of the analysis routines (such as calculation of the correlation dimension) use the library &lt;a href=&#34;https://github.com/CSchoel/nolds&#34;&gt;nolds&lt;/a&gt;. If re-using the fractal dimension code that depends on &lt;code&gt;nolds&lt;/code&gt;, please be sure to credit that library and heed its license. The Lyapunov exponent calculation is based on the QR factorization approach used by &lt;a href=&#34;https://www.sciencedirect.com/science/article/abs/pii/0167278985900119&#34;&gt;Wolf et al 1985&lt;/a&gt; and &lt;a href=&#34;https://journals.aps.org/pra/abstract/10.1103/PhysRevA.34.4971&#34;&gt;Eckmann et al 1986&lt;/a&gt;, with implementation details adapted from conventions in the Julia library &lt;a href=&#34;https://github.com/JuliaDynamics/DynamicalSystems.jl/&#34;&gt;DynamicalSystems.jl&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ethics &amp;amp; Reporting&lt;/h2&gt; &#xA;&lt;p&gt;Dataset datasheets and metadata are reported using the dataset documentation guidelines described in &lt;a href=&#34;https://arxiv.org/abs/1803.09010&#34;&gt;Gebru et al 2018&lt;/a&gt;; please see our preprint for a full dataset datasheet and other information. We note that all datasets included here are mathematical in nature, and do not contain human or clinical observations. If any users become aware of unintended ethics or trademark issues that may arise due to the use of this data, we encourage reporting them by submitting an issue on this repository.&lt;/p&gt;</summary>
  </entry>
</feed>