<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:46:10Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jeffheaton/t81_558_deep_learning</title>
    <updated>2022-07-13T01:46:10Z</updated>
    <id>tag:github.com,2022-07-13:/jeffheaton/t81_558_deep_learning</id>
    <link href="https://github.com/jeffheaton/t81_558_deep_learning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Washington University (in St. Louis) Course T81-558: Applications of Deep Neural Networks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;T81 558:Applications of Deep Neural Networks&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.wustl.edu&#34;&gt;Washington University in St. Louis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Instructor: &lt;a href=&#34;https://sites.wustl.edu/jeffheaton/&#34;&gt;Jeff Heaton&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The content of this course changes as technology evolves&lt;/strong&gt;, to keep up to date with changes &lt;a href=&#34;https://github.com/jeffheaton&#34;&gt;follow me on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Section 1. Fall 2022, Monday, 2:30 PM, Location: TBD&lt;/li&gt; &#xA; &lt;li&gt;Section 2. Fall 2022, Online&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Course Description&lt;/h1&gt; &#xA;&lt;p&gt;Deep learning is a group of exciting new technologies for neural networks. Through a combination of advanced training techniques and neural network architectural components, it is now possible to create neural networks that can handle tabular data, images, text, and audio as both input and output. Deep learning allows a neural network to learn hierarchies of information in a way that is like the function of the human brain. This course will introduce the student to classic neural network structures, Convolution Neural Networks (CNN), Long Short-Term Memory (LSTM), Gated Recurrent Neural Networks (GRU), General Adversarial Networks (GAN) and reinforcement learning. Application of these architectures to computer vision, time series, security, natural language processing (NLP), and data generation will be covered. High Performance Computing (HPC) aspects will demonstrate how deep learning can be leveraged both on graphical processing units (GPUs), as well as grids. Focus is primarily upon the application of deep learning to problems, with some introduction to mathematical foundations. Students will use the Python programming language to implement deep learning using Google TensorFlow and Keras. It is not necessary to know Python prior to this course; however, familiarity of at least one programming language is assumed. This course will be delivered in a hybrid format that includes both classroom and online instruction.&lt;/p&gt; &#xA;&lt;h1&gt;Textbook&lt;/h1&gt; &#xA;&lt;p&gt;The complete text for this course is here on GitHub. This same material is also available in &lt;a href=&#34;https://www.heatonresearch.com/book/applications-deep-neural-networks-keras.html&#34;&gt;book format&lt;/a&gt;. The course textbook is “Applications of Deep Neural networks with Keras“, ISBN 9798416344269.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to cite the material from this course/book, please use the following BibTex citation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{heaton2020applications,&#xA;    title={Applications of Deep Neural Networks},&#xA;    author={Jeff Heaton},&#xA;    year={2020},&#xA;    eprint={2009.05673},&#xA;    archivePrefix={arXiv},&#xA;    primaryClass={cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Objectives&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Explain how neural networks (deep and otherwise) compare to other machine learning models.&lt;/li&gt; &#xA; &lt;li&gt;Determine when a deep neural network would be a good choice for a particular problem.&lt;/li&gt; &#xA; &lt;li&gt;Demonstrate your understanding of the material through a final project uploaded to GitHub.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Syllabus&lt;/h1&gt; &#xA;&lt;p&gt;This syllabus presents the expected class schedule, due dates, and reading assignments. &lt;a href=&#34;https://data.heatonresearch.com/wustl/jheaton-t81-558-spring-2022-syllabus.pdf&#34;&gt;Download current syllabus.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Module&lt;/th&gt; &#xA;   &lt;th&gt;Content&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_01_1_overview.ipynb&#34;&gt;Module 1&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Meet on 08/29/2022&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 1: Python Preliminaries&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 1.1: Course Overview&lt;/li&gt;&#xA;     &lt;li&gt;Part 1.2: Introduction to Python&lt;/li&gt;&#xA;     &lt;li&gt;Part 1.3: Python Lists, Dictionaries, Sets &amp;amp; JSON&lt;/li&gt;&#xA;     &lt;li&gt;Part 1.4: File Handling&lt;/li&gt;&#xA;     &lt;li&gt;Part 1.5: Functions, Lambdas, and Map/ReducePython Preliminaries&lt;/li&gt;&#xA;     &lt;li&gt;&lt;strong&gt;We will meet on campus this week! (first meeting)&lt;/strong&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_02_1_python_pandas.ipynb&#34;&gt;Module 2&lt;/a&gt;&lt;br&gt;Week of 09/12/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 2: Python for Machine Learning&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt; Part 2.1: Introduction to Pandas for Deep Learning&lt;/li&gt;&#xA;     &lt;li&gt;Part 2.2: Encoding Categorical Values in Pandas&lt;/li&gt;&#xA;     &lt;li&gt;Part 2.3: Grouping, Sorting, and Shuffling&lt;/li&gt;&#xA;     &lt;li&gt;Part 2.4: Using Apply and Map in Pandas&lt;/li&gt;&#xA;     &lt;li&gt;Part 2.5: Feature Engineering in Padas&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class1.ipynb&#34;&gt;Module 1 Program&lt;/a&gt; due: 09/13/2022&lt;/li&gt;&#xA;     &lt;li&gt; Icebreaker due: 09/13/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_03_1_neural_net.ipynb&#34;&gt;Module 3&lt;/a&gt;&lt;br&gt;Week of 09/19/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 3: TensorFlow and Keras for Neural Networks&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 3.1: Deep Learning and Neural Network Introduction&lt;/li&gt;&#xA;     &lt;li&gt;Part 3.2: Introduction to Tensorflow &amp;amp; Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 3.3: Saving and Loading a Keras Neural Network&lt;/li&gt;&#xA;     &lt;li&gt;Part 3.4: Early Stopping in Keras to Prevent Overfitting&lt;/li&gt;&#xA;     &lt;li&gt;Part 3.5: Extracting Keras Weights and Manual Neural Network Calculation&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class2.ipynb&#34;&gt;Module 2: Program&lt;/a&gt; due: 09/20/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_04_1_feature_encode.ipynb&#34;&gt;Module 4&lt;/a&gt;&lt;br&gt;Week of 09/26/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 4: Training for Tabular Data&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 4.1: Encoding a Feature Vector for Keras Deep Learning&lt;/li&gt;&#xA;     &lt;li&gt;Part 4.2: Keras Multiclass Classification for Deep Neural Networks with ROC and AUC&lt;/li&gt;&#xA;     &lt;li&gt;Part 4.3: Keras Regression for Deep Neural Networks with RMSE&lt;/li&gt;&#xA;     &lt;li&gt;Part 4.4: Backpropagation, Nesterov Momentum, and ADAM Training&lt;/li&gt;&#xA;     &lt;li&gt;Part 4.5: Neural Network RMSE and Log Loss Error Calculation from Scratch&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class3.ipynb&#34;&gt;Module 3 Program&lt;/a&gt; due: 09/27/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_05_1_reg_ridge_lasso.ipynb&#34;&gt;Module 5&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Meet on 10/03/2022&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 5: Regularization and Dropout&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 5.1: Introduction to Regularization: Ridge and Lasso&lt;/li&gt;&#xA;     &lt;li&gt;Part 5.2: Using K-Fold Cross Validation with Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 5.3: Using L1 and L2 Regularization with Keras to Decrease Overfitting&lt;/li&gt;&#xA;     &lt;li&gt;Part 5.4: Drop Out for Keras to Decrease Overfitting&lt;/li&gt;&#xA;     &lt;li&gt;Part 5.5: Bootstrapping and Benchmarking Hyperparameters&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class4.ipynb&#34;&gt;Module 4 Program&lt;/a&gt; due: 10/04/2022&lt;/li&gt;&#xA;     &lt;li&gt;&lt;strong&gt;We will meet on campus this week! (second meeting)&lt;/strong&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_06_1_python_images.ipynb&#34;&gt;Module 6&lt;/a&gt;&lt;br&gt;Week of 10/17/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 6: CNN for Vision&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;      Part 6.1: Image Processing in Python&#xA;     &lt;li&gt;Part 6.2: Using Convolutional Networks with Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 6.3: Using Pretrained Neural Networks&lt;/li&gt;&#xA;     &lt;li&gt;Part 6.4: Looking at Keras Generators and Image Augmentation&lt;/li&gt;&#xA;     &lt;li&gt;Part 6.5: Recognizing Multiple Images with YOLOv5&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class5.ipynb&#34;&gt;Module 5 Program&lt;/a&gt; due: 10/18/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_07_1_gan_intro.ipynb&#34;&gt;Module 7&lt;/a&gt;&lt;br&gt;Week of 10/24/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 7: Generative Adversarial Networks (GANs)&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 7.1: Introduction to GANS for Image and Data Generation&lt;/li&gt;&#xA;     &lt;li&gt;Part 7.2: Train StyleGAN3 with your Own Images&lt;/li&gt;&#xA;     &lt;li&gt;Part 7.3: Exploring the StyleGAN Latent Vector&lt;/li&gt;&#xA;     &lt;li&gt;Part 7.4: GANS to Enhance Old Photographs Deoldify&lt;/li&gt;&#xA;     &lt;li&gt;Part 7.5: GANs for Tabular Synthetic Data Generation&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class6.ipynb&#34;&gt;Module 6 Assignment&lt;/a&gt; due: 10/25/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_08_1_kaggle_intro.ipynb&#34;&gt;Module 8&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Meet on 10/31/2022&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 8: Kaggle&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 8.1: Introduction to Kaggle&lt;/li&gt;&#xA;     &lt;li&gt;Part 8.2: Building Ensembles with Scikit-Learn and Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 8.3: How Should you Architect Your Keras Neural Network: Hyperparameters&lt;/li&gt;&#xA;     &lt;li&gt;Part 8.4: Bayesian Hyperparameter Optimization for Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 8.5: Current Semester&#39;s Kaggle&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class7.ipynb&#34;&gt;Module 7 Assignment&lt;/a&gt; due: 11/01/2022&lt;/li&gt;&#xA;     &lt;li&gt;&lt;strong&gt;We will meet on campus this week! (third meeting)&lt;/strong&gt;&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_09_1_keras_transfer.ipynb&#34;&gt;Module 9&lt;/a&gt;&lt;br&gt;Week of 11/07/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 9: Transfer Learning&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 9.1: Introduction to Keras Transfer Learning&lt;/li&gt;&#xA;     &lt;li&gt;Part 9.2: Keras Transfer Learning for Computer Vision&lt;/li&gt;&#xA;     &lt;li&gt;Part 9.3: Transfer Learning for NLP with Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 9.4: Transfer Learning for Facial Feature Recognition&lt;/li&gt;&#xA;     &lt;li&gt;Part 9.5: Transfer Learning for Style Transfer&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class8.ipynb&#34;&gt;Module 8 Assignment&lt;/a&gt; due: 11/08/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_10_1_timeseries.ipynb&#34;&gt;Module 10&lt;/a&gt;&lt;br&gt;Week of 11/14/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 10: Time Series in Keras&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 10.1: Time Series Data Encoding for Deep Learning, Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 10.2: Programming LSTM with Keras and&lt;/li&gt;&#xA;     &lt;li&gt;Part 10.3: Text Generation with Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 10.4: Introduction to Transformers&lt;/li&gt;&#xA;     &lt;li&gt;Part 10.5: Transformers for Timeseries&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class9.ipynb&#34;&gt;Module 9 Assignment&lt;/a&gt; due: 11/15/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_11_01_huggingface.ipynb&#34;&gt;Module 11&lt;/a&gt;&lt;br&gt;Week of 11/21/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 11: Natural Language Processing&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 11.1: Hugging Face Introduction&lt;/li&gt;&#xA;     &lt;li&gt;Part 11.2: Hugging Face Tokenizers&lt;/li&gt;&#xA;     &lt;li&gt;Part 11.3: Hugging Face Data Sets&lt;/li&gt;&#xA;     &lt;li&gt;Part 11.4: Training a Model in Hugging Face&lt;/li&gt;&#xA;     &lt;li&gt;Part 11.5: What are Embedding Layers in Keras&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class10.ipynb&#34;&gt;Module 10 Assignment&lt;/a&gt; due: 11/22/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_12_01_ai_gym.ipynb&#34;&gt;Module 12&lt;/a&gt;&lt;br&gt;Week of 11/28/2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 12: Reinforcement Learning&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Kaggle Assignment due: 11/29/2022 (approx 4-6PM, due to Kaggle GMT timezone)&lt;/li&gt;&#xA;     &lt;li&gt;Part 12.1: Introduction to the OpenAI Gym&lt;/li&gt;&#xA;     &lt;li&gt;Part 12.2: Introduction to Q-Learning for Keras&lt;/li&gt;&#xA;     &lt;li&gt;Part 12.3: Keras Q-Learning in the OpenAI Gym&lt;/li&gt;&#xA;     &lt;li&gt;Part 12.4: Atari Games with Keras Neural Networks&lt;/li&gt;&#xA;     &lt;li&gt;Part 12.5: Application of Reinforcement Learning&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class11.ipynb&#34;&gt;Module 11 Assignment&lt;/a&gt; due: 11/29/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jeffheaton/t81_558_deep_learning/master/t81_558_class_13_01_flask.ipynb&#34;&gt;Module 13&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Meet on 12/05/2022&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Module 13: Deployment and Monitoring&lt;/strong&gt;&#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;Part 13.1: Flask and Deep Learning Web Services &lt;/li&gt;&#xA;     &lt;li&gt;Part 13.2: Interrupting and Continuing Training&lt;/li&gt;&#xA;     &lt;li&gt;Part 13.3: Using a Keras Deep Neural Network with a Web Application&lt;/li&gt;&#xA;     &lt;li&gt;Part 13.4: When to Retrain Your Neural Network&lt;/li&gt;&#xA;     &lt;li&gt;Part 13.5: Tensor Processing Units (TPUs)&lt;/li&gt;&#xA;     &lt;li&gt;&lt;strong&gt;We will meet on campus this week! (fourth meeting)&lt;/strong&gt;&lt;/li&gt;&#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/jeffheaton/t81_558_deep_learning/raw/master/assignments/assignment_yourname_class12.ipynb&#34;&gt;Module 12 Assignment&lt;/a&gt; due: 12/06/2022&lt;/li&gt;&#xA;    &lt;/ul&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Datasets&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://data.heatonresearch.com/data/t81-558/index.html&#34;&gt;Datasets can be downloaded here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aymericdamien/TensorFlow-Examples</title>
    <updated>2022-07-13T01:46:10Z</updated>
    <id>tag:github.com,2022-07-13:/aymericdamien/TensorFlow-Examples</id>
    <link href="https://github.com/aymericdamien/TensorFlow-Examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TensorFlow Tutorial and Examples for Beginners (support TF v1 &amp; v2)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TensorFlow Examples&lt;/h1&gt; &#xA;&lt;p&gt;This tutorial was designed for easily diving into TensorFlow, through examples. For readability, it includes both notebooks and source codes with explanation, for both TF v1 &amp;amp; v2.&lt;/p&gt; &#xA;&lt;p&gt;It is suitable for beginners who want to find clear and concise examples about TensorFlow. Besides the traditional &#39;raw&#39; TensorFlow implementations, you can also find the latest TensorFlow API practices (such as &lt;code&gt;layers&lt;/code&gt;, &lt;code&gt;estimator&lt;/code&gt;, &lt;code&gt;dataset&lt;/code&gt;, ...).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update (05/16/2020):&lt;/strong&gt; Moving all default examples to TF2. For TF v1 examples: &lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1&#34;&gt;check here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial index&lt;/h2&gt; &#xA;&lt;h4&gt;0 - Prerequisite&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/0_Prerequisite/ml_introduction.ipynb&#34;&gt;Introduction to Machine Learning&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/0_Prerequisite/mnist_dataset_intro.ipynb&#34;&gt;Introduction to MNIST Dataset&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1 - Introduction&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hello World&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/1_Introduction/helloworld.ipynb&#34;&gt;notebook&lt;/a&gt;). Very simple example to learn how to print &#34;hello world&#34; using TensorFlow 2.0+.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Operations&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/1_Introduction/basic_operations.ipynb&#34;&gt;notebook&lt;/a&gt;). A simple example that cover TensorFlow 2.0+ basic operations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2 - Basic Models&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linear Regression&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/2_BasicModels/linear_regression.ipynb&#34;&gt;notebook&lt;/a&gt;). Implement a Linear Regression with TensorFlow 2.0+.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Logistic Regression&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/2_BasicModels/logistic_regression.ipynb&#34;&gt;notebook&lt;/a&gt;). Implement a Logistic Regression with TensorFlow 2.0+.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Word2Vec (Word Embedding)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/2_BasicModels/word2vec.ipynb&#34;&gt;notebook&lt;/a&gt;). Build a Word Embedding Model (Word2Vec) from Wikipedia data, with TensorFlow 2.0+.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GBDT (Gradient Boosted Decision Trees)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/2_BasicModels/gradient_boosted_trees.ipynb&#34;&gt;notebooks&lt;/a&gt;). Implement a Gradient Boosted Decision Trees with TensorFlow 2.0+ to predict house value using Boston Housing dataset.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3 - Neural Networks&lt;/h4&gt; &#xA;&lt;h5&gt;Supervised&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple Neural Network&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/neural_network.ipynb&#34;&gt;notebook&lt;/a&gt;). Use TensorFlow 2.0 &#39;layers&#39; and &#39;model&#39; API to build a simple neural network to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple Neural Network (low-level)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/neural_network_raw.ipynb&#34;&gt;notebook&lt;/a&gt;). Raw implementation of a simple neural network to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convolutional Neural Network&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/convolutional_network.ipynb&#34;&gt;notebook&lt;/a&gt;). Use TensorFlow 2.0+ &#39;layers&#39; and &#39;model&#39; API to build a convolutional neural network to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convolutional Neural Network (low-level)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/convolutional_network_raw.ipynb&#34;&gt;notebook&lt;/a&gt;). Raw implementation of a convolutional neural network to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recurrent Neural Network (LSTM)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/recurrent_network.ipynb&#34;&gt;notebook&lt;/a&gt;). Build a recurrent neural network (LSTM) to classify MNIST digits dataset, using TensorFlow 2.0 &#39;layers&#39; and &#39;model&#39; API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bi-directional Recurrent Neural Network (LSTM)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/bidirectional_rnn.ipynb&#34;&gt;notebook&lt;/a&gt;). Build a bi-directional recurrent neural network (LSTM) to classify MNIST digits dataset, using TensorFlow 2.0+ &#39;layers&#39; and &#39;model&#39; API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Recurrent Neural Network (LSTM)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/dynamic_rnn.ipynb&#34;&gt;notebook&lt;/a&gt;). Build a recurrent neural network (LSTM) that performs dynamic calculation to classify sequences of variable length, using TensorFlow 2.0+ &#39;layers&#39; and &#39;model&#39; API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Unsupervised&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto-Encoder&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/autoencoder.ipynb&#34;&gt;notebook&lt;/a&gt;). Build an auto-encoder to encode an image to a lower dimension and re-construct it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DCGAN (Deep Convolutional Generative Adversarial Networks)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/3_NeuralNetworks/dcgan.ipynb&#34;&gt;notebook&lt;/a&gt;). Build a Deep Convolutional Generative Adversarial Network (DCGAN) to generate images from noise.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4 - Utilities&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Save and Restore a model&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/4_Utils/save_restore_model.ipynb&#34;&gt;notebook&lt;/a&gt;). Save and Restore a model with TensorFlow 2.0+.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build Custom Layers &amp;amp; Modules&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/4_Utils/build_custom_layers.ipynb&#34;&gt;notebook&lt;/a&gt;). Learn how to build your own layers / modules and integrate them into TensorFlow 2.0+ Models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tensorboard&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/4_Utils/tensorboard.ipynb&#34;&gt;notebook&lt;/a&gt;). Track and visualize neural network computation graph, metrics, weights and more using TensorFlow 2.0+ tensorboard.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;5 - Data Management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Load and Parse data&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/5_DataManagement/load_data.ipynb&#34;&gt;notebook&lt;/a&gt;). Build efficient data pipeline with TensorFlow 2.0 (Numpy arrays, Images, CSV files, custom data, ...).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build and Load TFRecords&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/5_DataManagement/tfrecords.ipynb&#34;&gt;notebook&lt;/a&gt;). Convert data into TFRecords format, and load them with TensorFlow 2.0+.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Transformation (i.e. Image Augmentation)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/5_DataManagement/image_transformation.ipynb&#34;&gt;notebook&lt;/a&gt;). Apply various image augmentation techniques with TensorFlow 2.0+, to generate distorted images for training.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;6 - Hardware&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-GPU Training&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v2/notebooks/6_Hardware/multigpu_training.ipynb&#34;&gt;notebook&lt;/a&gt;). Train a convolutional neural network with multiple GPUs on CIFAR-10 dataset.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TensorFlow v1&lt;/h2&gt; &#xA;&lt;p&gt;The tutorial index for TF v1 is available here: &lt;a href=&#34;https://raw.githubusercontent.com/aymericdamien/TensorFlow-Examples/master/tensorflow_v1&#34;&gt;TensorFlow v1.15 Examples&lt;/a&gt;. Or see below for a list of the examples.&lt;/p&gt; &#xA;&lt;h2&gt;Dataset&lt;/h2&gt; &#xA;&lt;p&gt;Some examples require MNIST dataset for training and testing. Don&#39;t worry, this dataset will automatically be downloaded when running examples. MNIST is a database of handwritten digits, for a quick description of that dataset, you can check &lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/notebooks/0_Prerequisite/mnist_dataset_intro.ipynb&#34;&gt;this notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Official Website: &lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34;&gt;http://yann.lecun.com/exdb/mnist/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To download all the examples, simply clone this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/aymericdamien/TensorFlow-Examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run them, you also need the latest version of TensorFlow. To install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install tensorflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or (with GPU support):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install tensorflow_gpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details about TensorFlow installation, you can check &lt;a href=&#34;https://www.tensorflow.org/install/&#34;&gt;TensorFlow Installation Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TensorFlow v1 Examples - Index&lt;/h2&gt; &#xA;&lt;p&gt;The tutorial index for TF v1 is available here: &lt;a href=&#34;https://raw.githubusercontent.com/aymericdamien/TensorFlow-Examples/master/tensorflow_v1&#34;&gt;TensorFlow v1.15 Examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;0 - Prerequisite&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/notebooks/tensorflow_v1/0_Prerequisite/ml_introduction.ipynb&#34;&gt;Introduction to Machine Learning&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/notebooks/tensorflow_v1/0_Prerequisite/mnist_dataset_intro.ipynb&#34;&gt;Introduction to MNIST Dataset&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;1 - Introduction&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hello World&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/1_Introduction/helloworld.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/1_Introduction/helloworld.py&#34;&gt;code&lt;/a&gt;). Very simple example to learn how to print &#34;hello world&#34; using TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Operations&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/notebooks/tensorflow_v1/1_Introduction/basic_operations.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-examples/Examples/blob/master/tensorflow_v1/1_Introduction/basic_operations.py&#34;&gt;code&lt;/a&gt;). A simple example that cover TensorFlow basic operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TensorFlow Eager API basics&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/1_Introduction/basic_eager_api.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/1_Introduction/basic_eager_api.py&#34;&gt;code&lt;/a&gt;). Get started with TensorFlow&#39;s Eager API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2 - Basic Models&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linear Regression&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/linear_regression.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/linear_regression.py&#34;&gt;code&lt;/a&gt;). Implement a Linear Regression with TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linear Regression (eager api)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/linear_regression_eager_api.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/linear_regression_eager_api.py&#34;&gt;code&lt;/a&gt;). Implement a Linear Regression using TensorFlow&#39;s Eager API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Logistic Regression&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/logistic_regression.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/logistic_regression.py&#34;&gt;code&lt;/a&gt;). Implement a Logistic Regression with TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Logistic Regression (eager api)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/logistic_regression_eager_api.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/logistic_regression_eager_api.py&#34;&gt;code&lt;/a&gt;). Implement a Logistic Regression using TensorFlow&#39;s Eager API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nearest Neighbor&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/nearest_neighbor.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/nearest_neighbor.py&#34;&gt;code&lt;/a&gt;). Implement Nearest Neighbor algorithm with TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;K-Means&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/kmeans.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/kmeans.py&#34;&gt;code&lt;/a&gt;). Build a K-Means classifier with TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Random Forest&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/random_forest.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/random_forest.py&#34;&gt;code&lt;/a&gt;). Build a Random Forest classifier with TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gradient Boosted Decision Tree (GBDT)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/gradient_boosted_decision_tree.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/gradient_boosted_decision_tree.py&#34;&gt;code&lt;/a&gt;). Build a Gradient Boosted Decision Tree (GBDT) with TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Word2Vec (Word Embedding)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/2_BasicModels/word2vec.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/2_BasicModels/word2vec.py&#34;&gt;code&lt;/a&gt;). Build a Word Embedding Model (Word2Vec) from Wikipedia data, with TensorFlow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3 - Neural Networks&lt;/h4&gt; &#xA;&lt;h5&gt;Supervised&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple Neural Network&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/3_NeuralNetworks/notebooks/neural_network_raw.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/neural_network_raw.py&#34;&gt;code&lt;/a&gt;). Build a simple neural network (a.k.a Multi-layer Perceptron) to classify MNIST digits dataset. Raw TensorFlow implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple Neural Network (tf.layers/estimator api)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/neural_network.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/neural_network.py&#34;&gt;code&lt;/a&gt;). Use TensorFlow &#39;layers&#39; and &#39;estimator&#39; API to build a simple neural network (a.k.a Multi-layer Perceptron) to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple Neural Network (eager api)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/neural_network_eager_api.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/neural_network_eager_api.py&#34;&gt;code&lt;/a&gt;). Use TensorFlow Eager API to build a simple neural network (a.k.a Multi-layer Perceptron) to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convolutional Neural Network&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/convolutional_network_raw.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/convolutional_network_raw.py&#34;&gt;code&lt;/a&gt;). Build a convolutional neural network to classify MNIST digits dataset. Raw TensorFlow implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convolutional Neural Network (tf.layers/estimator api)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/convolutional_network.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/convolutional_network.py&#34;&gt;code&lt;/a&gt;). Use TensorFlow &#39;layers&#39; and &#39;estimator&#39; API to build a convolutional neural network to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recurrent Neural Network (LSTM)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/recurrent_network.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/recurrent_network.py&#34;&gt;code&lt;/a&gt;). Build a recurrent neural network (LSTM) to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bi-directional Recurrent Neural Network (LSTM)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/bidirectional_rnn.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/bidirectional_rnn.py&#34;&gt;code&lt;/a&gt;). Build a bi-directional recurrent neural network (LSTM) to classify MNIST digits dataset.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Recurrent Neural Network (LSTM)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/dynamic_rnn.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/dynamic_rnn.py&#34;&gt;code&lt;/a&gt;). Build a recurrent neural network (LSTM) that performs dynamic calculation to classify sequences of different length.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Unsupervised&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto-Encoder&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/autoencoder.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/autoencoder.py&#34;&gt;code&lt;/a&gt;). Build an auto-encoder to encode an image to a lower dimension and re-construct it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variational Auto-Encoder&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/variational_autoencoder.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/variational_autoencoder.py&#34;&gt;code&lt;/a&gt;). Build a variational auto-encoder (VAE), to encode and generate images from noise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GAN (Generative Adversarial Networks)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/gan.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/gan.py&#34;&gt;code&lt;/a&gt;). Build a Generative Adversarial Network (GAN) to generate images from noise.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DCGAN (Deep Convolutional Generative Adversarial Networks)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/3_NeuralNetworks/dcgan.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/3_NeuralNetworks/dcgan.py&#34;&gt;code&lt;/a&gt;). Build a Deep Convolutional Generative Adversarial Network (DCGAN) to generate images from noise.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4 - Utilities&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Save and Restore a model&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/4_Utils/save_restore_model.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/4_Utils/save_restore_model.py&#34;&gt;code&lt;/a&gt;). Save and Restore a model with TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tensorboard - Graph and loss visualization&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/4_Utils/tensorboard_basic.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/4_Utils/tensorboard_basic.py&#34;&gt;code&lt;/a&gt;). Use Tensorboard to visualize the computation Graph and plot the loss.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tensorboard - Advanced visualization&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/4_Utils/tensorboard_advanced.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/4_Utils/tensorboard_advanced.py&#34;&gt;code&lt;/a&gt;). Going deeper into Tensorboard; visualize the variables, gradients, and more...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;5 - Data Management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build an image dataset&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/5_DataManagement/build_an_image_dataset.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/5_DataManagement/build_an_image_dataset.py&#34;&gt;code&lt;/a&gt;). Build your own images dataset with TensorFlow data queues, from image folders or a dataset file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TensorFlow Dataset API&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/5_DataManagement/tensorflow_dataset_api.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/5_DataManagement/tensorflow_dataset_api.py&#34;&gt;code&lt;/a&gt;). Introducing TensorFlow Dataset API for optimizing the input data pipeline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Load and Parse data&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/5_DataManagement/load_data.ipynb&#34;&gt;notebook&lt;/a&gt;). Build efficient data pipeline (Numpy arrays, Images, CSV files, custom data, ...).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build and Load TFRecords&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/5_DataManagement/tfrecords.ipynb&#34;&gt;notebook&lt;/a&gt;). Convert data into TFRecords format, and load them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Transformation (i.e. Image Augmentation)&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/5_DataManagement/image_transformation.ipynb&#34;&gt;notebook&lt;/a&gt;). Apply various image augmentation techniques, to generate distorted images for training.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;6 - Multi GPU&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic Operations on multi-GPU&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/6_MultiGPU/multigpu_basics.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/6_MultiGPU/multigpu_basics.py&#34;&gt;code&lt;/a&gt;). A simple example to introduce multi-GPU in TensorFlow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Train a Neural Network on multi-GPU&lt;/strong&gt; (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/notebooks/6_MultiGPU/multigpu_cnn.ipynb&#34;&gt;notebook&lt;/a&gt;) (&lt;a href=&#34;https://github.com/aymericdamien/TensorFlow-Examples/raw/master/tensorflow_v1/examples/6_MultiGPU/multigpu_cnn.py&#34;&gt;code&lt;/a&gt;). A clear and simple TensorFlow implementation to train a convolutional neural network on multiple GPUs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;p&gt;The following examples are coming from &lt;a href=&#34;https://github.com/tflearn/tflearn&#34;&gt;TFLearn&lt;/a&gt;, a library that provides a simplified interface for TensorFlow. You can have a look, there are many &lt;a href=&#34;https://github.com/tflearn/tflearn/tree/master/examples&#34;&gt;examples&lt;/a&gt; and &lt;a href=&#34;http://tflearn.org/doc_index/#api&#34;&gt;pre-built operations and layers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tutorials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tflearn/tflearn/raw/master/tutorials/intro/quickstart.md&#34;&gt;TFLearn Quickstart&lt;/a&gt;. Learn the basics of TFLearn through a concrete machine learning task. Build and train a deep neural network classifier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tflearn/tflearn/raw/master/examples&#34;&gt;TFLearn Examples&lt;/a&gt;. A large collection of examples using TFLearn.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>https-deeplearning-ai/machine-learning-engineering-for-production-public</title>
    <updated>2022-07-13T01:46:10Z</updated>
    <id>tag:github.com,2022-07-13:/https-deeplearning-ai/machine-learning-engineering-for-production-public</id>
    <link href="https://github.com/https-deeplearning-ai/machine-learning-engineering-for-production-public" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Public repo for DeepLearning.AI MLEP Specialization&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Machine Learning Engineering for Production&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the public repo for &lt;a href=&#34;https://www.deeplearning.ai/&#34;&gt;deeplearning.ai&lt;/a&gt;&#39;s Machine Learning Engineering for Production Specialization.&lt;/p&gt; &#xA;&lt;p&gt;Here you will find public resources for the courses of this specialization.&lt;/p&gt;</summary>
  </entry>
</feed>