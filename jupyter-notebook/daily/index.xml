<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-11T01:32:58Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mit-han-lab/torchquantum</title>
    <updated>2023-10-11T01:32:58Z</updated>
    <id>tag:github.com,2023-10-11:/mit-han-lab/torchquantum</id>
    <link href="https://github.com/mit-han-lab/torchquantum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PyTorch-based framework for Quantum Simulation, Quantum Machine Learning, Quantum Neural Networks, Parameterized Quantum Circuits with support for easy deployments on real quantum computers.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/torchquantum_logo.jpg&#34; alt=&#34;torchquantum Logo&#34; width=&#34;450&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&lt;p align=&#34;center&#34;&gt;A PyTorch Library for Quantum Simulation and Quantum Machine Learning&lt;/p&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;p align=&#34;center&#34;&gt;Faster, Scalable, Easy Debugging, Easy Deployment on Real Machine&lt;/p&gt;&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/mit-han-lab/torchquantum/raw/master/LICENSE&#34;&gt; &lt;img alt=&#34;MIT License&#34; src=&#34;https://img.shields.io/github/license/mit-han-lab/torchquantum&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://torchquantum.readthedocs.io/&#34;&gt; &lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/readthedocs/torchquantum/main&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/torchquantum/shared_invite/zt-1ghuf283a-OtP4mCPJREd~367VX~TaQQ&#34;&gt; &lt;img alt=&#34;Chat @ Slack&#34; src=&#34;https://img.shields.io/badge/slack-chat-2eb67d.svg?logo=slack&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/VTHZAB5E&#34;&gt; &lt;img alt=&#34;Chat @ Discord&#34; src=&#34;https://img.shields.io/badge/contact-me-blue?logo=discord&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://qmlsys.hanruiwang.me&#34;&gt; &lt;img alt=&#34;Forum&#34; src=&#34;https://img.shields.io/discourse/status?server=https%3A%2F%2Fqmlsys.hanruiwang.me%2F&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://qmlsys.mit.edu&#34;&gt; &lt;img alt=&#34;Website&#34; src=&#34;https://img.shields.io/website?up_message=qmlsys&amp;amp;url=https%3A%2F%2Fqmlsys.mit.edu&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/torchquantum/&#34;&gt; &lt;img alt=&#34;Pypi&#34; src=&#34;https://img.shields.io/pypi/v/torchquantum&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://unitary.fund/&#34;&gt; &lt;img alt=&#34;Pypi&#34; src=&#34;https://img.shields.io/badge/supported%20by-Unitary%20Fund-green&#34;&gt; &lt;/a&gt;  &lt;a href=&#34;https://pytorch.org/ecosystem/&#34;&gt; &lt;img alt=&#34;Pypi&#34; src=&#34;https://img.shields.io/badge/integration%20-PyTorch%20Ecosystem-blue&#34;&gt; &lt;/a&gt;  &lt;a href=&#34;https://qiskit.org/ecosystem/&#34;&gt; &lt;img alt=&#34;Pypi&#34; src=&#34;https://img.shields.io/badge/integration%20-Qiskit%20Ecosystem-blue&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;ðŸ‘‹ Welcome&lt;/h1&gt; &#xA;&lt;h4&gt;What it is doing&lt;/h4&gt; &#xA;&lt;p&gt;Quantum simulation framework based on PyTorch. It supports statevector simulation and pulse simulation (coming soon) on GPUs. It can scale up to the simulation of 30+ qubits with multiple GPUs.&lt;/p&gt; &#xA;&lt;h4&gt;Who will benefit&lt;/h4&gt; &#xA;&lt;p&gt;Researchers on quantum algorithm design, parameterized quantum circuit training, quantum optimal control, quantum machine learning, quantum neural networks.&lt;/p&gt; &#xA;&lt;h4&gt;Differences from Qiskit/Pennylane&lt;/h4&gt; &#xA;&lt;p&gt;Dynamic computation graph, automatic gradient computation, fast GPU support, batch model tersorized processing.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v0.1.7 Available!&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://join.slack.com/t/torchquantum/shared_invite/zt-1ghuf283a-OtP4mCPJREd~367VX~TaQQ&#34;&gt;Slack&lt;/a&gt; for real time support!&lt;/li&gt; &#xA; &lt;li&gt;Welcome to contribute! Please contact us or post in the &lt;a href=&#34;https://qmlsys.hanruiwang.me&#34;&gt;forum&lt;/a&gt; if you want to have new examples implemented by TorchQuantum or any other questions.&lt;/li&gt; &#xA; &lt;li&gt;Qmlsys website goes online: &lt;a href=&#34;https://qmlsys.mit.edu&#34;&gt;qmlsys.mit.edu&lt;/a&gt; and &lt;a href=&#34;https://torchquantum.org&#34;&gt;torchquantum.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy construction and simulation of quantum circuits in &lt;strong&gt;PyTorch&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic computation graph&lt;/strong&gt; for easy debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gradient support&lt;/strong&gt; via autograd&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batch mode&lt;/strong&gt; inference and training on &lt;strong&gt;CPU/GPU&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easy &lt;strong&gt;deployment on real quantum devices&lt;/strong&gt; such as IBMQ&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy hybrid classical-quantum&lt;/strong&gt; model construction&lt;/li&gt; &#xA; &lt;li&gt;(coming soon) &lt;strong&gt;pulse-level simulation&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mit-han-lab/torchquantum.git&#xA;cd torchquantum&#xA;pip install --editable .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torchquantum as tq&#xA;import torchquantum.functional as tqf&#xA;&#xA;qdev = tq.QuantumDevice(n_wires=2, bsz=5, device=&#34;cpu&#34;, record_op=True) # use device=&#39;cuda&#39; for GPU&#xA;&#xA;# use qdev.op&#xA;qdev.h(wires=0)&#xA;qdev.cnot(wires=[0, 1])&#xA;&#xA;# use tqf&#xA;tqf.h(qdev, wires=1)&#xA;tqf.x(qdev, wires=1)&#xA;&#xA;# use tq.Operator&#xA;op = tq.RX(has_params=True, trainable=True, init_params=0.5)&#xA;op(qdev, wires=0)&#xA;&#xA;# print the current state (dynamic computation graph supported)&#xA;print(qdev)&#xA;&#xA;# obtain the qasm string&#xA;from torchquantum.plugin import op_history2qasm&#xA;print(op_history2qasm(qdev.n_wires, qdev.op_history))&#xA;&#xA;# measure the state on z basis&#xA;print(tq.measure(qdev, n_shots=1024))&#xA;&#xA;# obtain the expval on a observable by stochastic sampling (doable on simulator and real quantum hardware)&#xA;from torchquantum.measurement import expval_joint_sampling&#xA;expval_sampling = expval_joint_sampling(qdev, &#39;ZX&#39;, n_shots=1024)&#xA;print(expval_sampling)&#xA;&#xA;# obtain the expval on a observable by analytical computation (only doable on classical simulator)&#xA;from torchquantum.measurement import expval_joint_analytical&#xA;expval = expval_joint_analytical(qdev, &#39;ZX&#39;)&#xA;print(expval)&#xA;&#xA;# obtain gradients of expval w.r.t. trainable parameters&#xA;expval[0].backward()&#xA;print(op.params.grad)&#xA;&#xA;&#xA;# Apply gates to qdev with tq.QuantumModule&#xA;ops = [&#xA;    {&#39;name&#39;: &#39;hadamard&#39;, &#39;wires&#39;: 0}, &#xA;    {&#39;name&#39;: &#39;cnot&#39;, &#39;wires&#39;: [0, 1]},&#xA;    {&#39;name&#39;: &#39;rx&#39;, &#39;wires&#39;: 0, &#39;params&#39;: 0.5, &#39;trainable&#39;: True},&#xA;    {&#39;name&#39;: &#39;u3&#39;, &#39;wires&#39;: 0, &#39;params&#39;: [0.1, 0.2, 0.3], &#39;trainable&#39;: True},&#xA;    {&#39;name&#39;: &#39;h&#39;, &#39;wires&#39;: 1, &#39;inverse&#39;: True}&#xA;]&#xA;&#xA;qmodule = tq.QuantumModule.from_op_history(ops)&#xA;qmodule(qdev)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;## Basic Usage 2&#xA;&#xA;```python&#xA;import torchquantum as tq&#xA;import torchquantum.functional as tqf&#xA;&#xA;x = tq.QuantumDevice(n_wires=2)&#xA;&#xA;tqf.hadamard(x, wires=0)&#xA;tqf.x(x, wires=1)&#xA;tqf.cnot(x, wires=[0, 1])&#xA;&#xA;# print the current state (dynamic computation graph supported)&#xA;print(x.states)&#xA;&#xA;# obtain the classical bitstring distribution&#xA;print(tq.measure(x, n_shots=2048))&#xA;```&#xA; --&gt; &#xA;&lt;h2&gt;Guide to the examples&lt;/h2&gt; &#xA;&lt;p&gt;We also prepare many example and tutorials using TorchQuantum.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;beginning level&lt;/strong&gt;, you may check &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/mnist&#34;&gt;QNN for MNIST&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/quanvolution&#34;&gt;Quantum Convolution (Quanvolution)&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/quantum_kernel_method&#34;&gt;Quantum Kernel Method&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/regression&#34;&gt;Quantum Regression&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;intermediate level&lt;/strong&gt;, you may check &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/amplitude_encoding_mnist&#34;&gt;Amplitude Encoding for MNIST&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/clifford_qnn&#34;&gt;Clifford gate QNN&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/save_load_example&#34;&gt;Save and Load QNN models&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/PauliSumOp&#34;&gt;PauliSum Operation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/converter_tq_qiskit&#34;&gt;How to convert tq to Qiskit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;expert&lt;/strong&gt;, you may check &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/param_shift_onchip_training&#34;&gt;Parameter Shift on-chip Training&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/gradient_pruning&#34;&gt;VQA Gradient Pruning&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/vqe&#34;&gt;VQE&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/train_state_prep&#34;&gt;VQA for State Prepration&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/qaoa&#34;&gt;QAOA (Quantum Approximate Optimization Algorithm)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Construct parameterized quantum circuit models as simple as constructing a normal pytorch model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch.nn as nn&#xA;import torch.nn.functional as F&#xA;import torchquantum as tq&#xA;import torchquantum.functional as tqf&#xA;&#xA;class QFCModel(nn.Module):&#xA;  def __init__(self):&#xA;    super().__init__()&#xA;    self.n_wires = 4&#xA;    self.measure = tq.MeasureAll(tq.PauliZ)&#xA;&#xA;    self.encoder_gates = [tqf.rx] * 4 + [tqf.ry] * 4 + \&#xA;                         [tqf.rz] * 4 + [tqf.rx] * 4&#xA;    self.rx0 = tq.RX(has_params=True, trainable=True)&#xA;    self.ry0 = tq.RY(has_params=True, trainable=True)&#xA;    self.rz0 = tq.RZ(has_params=True, trainable=True)&#xA;    self.crx0 = tq.CRX(has_params=True, trainable=True)&#xA;&#xA;  def forward(self, x):&#xA;    bsz = x.shape[0]&#xA;    # down-sample the image&#xA;    x = F.avg_pool2d(x, 6).view(bsz, 16)&#xA;&#xA;    # create a quantum device to run the gates&#xA;    qdev = tq.QuantumDevice(n_wires=self.n_wires, bsz=bsz, device=x.device)&#xA;&#xA;    # encode the classical image to quantum domain&#xA;    for k, gate in enumerate(self.encoder_gates):&#xA;      gate(qdev, wires=k % self.n_wires, params=x[:, k])&#xA;&#xA;    # add some trainable gates (need to instantiate ahead of time)&#xA;    self.rx0(qdev, wires=0)&#xA;    self.ry0(qdev, wires=1)&#xA;    self.rz0(qdev, wires=3)&#xA;    self.crx0(qdev, wires=[0, 2])&#xA;&#xA;    # add some more non-parameterized gates (add on-the-fly)&#xA;    qdev.h(wires=3)&#xA;    qdev.sx(wires=2)&#xA;    qdev.cnot(wires=[3, 0])&#xA;    qdev.qubitunitary(wires=[1, 2], params=[[1, 0, 0, 0],&#xA;                                            [0, 1, 0, 0],&#xA;                                            [0, 0, 0, 1j],&#xA;                                            [0, 0, -1j, 0]])&#xA;&#xA;    # perform measurement to get expectations (back to classical domain)&#xA;    x = self.measure(qdev).reshape(bsz, 2, 2)&#xA;&#xA;    # classification&#xA;    x = x.sum(-1).squeeze()&#xA;    x = F.log_softmax(x, dim=1)&#xA;&#xA;    return x&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VQE Example&lt;/h2&gt; &#xA;&lt;p&gt;Train a quantum circuit to perform VQE task. Quito quantum computer as in &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/simple_vqe/simple_vqe.py&#34;&gt;simple_vqe.py&lt;/a&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cd examples/vqe&#xA;python vqe.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MNIST Example&lt;/h2&gt; &#xA;&lt;p&gt;Train a quantum circuit to perform MNIST classification task and deploy on the real IBM Quito quantum computer as in &lt;a href=&#34;https://raw.githubusercontent.com/mit-han-lab/torchquantum/main/examples/simple_mnist/mnist_example_no_binding.py&#34;&gt;mnist_example.py&lt;/a&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cd examples/mnist&#xA;python mnist.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Files&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;devices.py&lt;/td&gt; &#xA;   &lt;td&gt;QuantumDevice class which stores the statevector&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;encoding.py&lt;/td&gt; &#xA;   &lt;td&gt;Encoding layers to encode classical values to quantum domain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;functional.py&lt;/td&gt; &#xA;   &lt;td&gt;Quantum gate functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;operators.py&lt;/td&gt; &#xA;   &lt;td&gt;Quantum gate classes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;layers.py&lt;/td&gt; &#xA;   &lt;td&gt;Layer templates such as RandomLayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;measure.py&lt;/td&gt; &#xA;   &lt;td&gt;Measurement of quantum states to get classical values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;graph.py&lt;/td&gt; &#xA;   &lt;td&gt;Quantum gate graph used in static mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;super_layer.py&lt;/td&gt; &#xA;   &lt;td&gt;Layer templates for SuperCircuits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;plugins/qiskit*&lt;/td&gt; &#xA;   &lt;td&gt;Convertors and processors for easy deployment on IBMQ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;examples/&lt;/td&gt; &#xA;   &lt;td&gt;More examples for training QML and VQE models&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Coding Style&lt;/h2&gt; &#xA;&lt;p&gt;torchquantum uses pre-commit hooks to ensure Python style consistency and prevent common mistakes in its codebase.&lt;/p&gt; &#xA;&lt;p&gt;To enable it pre-commit hooks please reproduce:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pre-commit&#xA;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Papers using TorchQuantum&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[HPCA&#39;22] &lt;a href=&#34;https://arxiv.org/abs/2107.10845&#34;&gt;Wang et al., &#34;QuantumNAS: Noise-Adaptive Search for Robust Quantum Circuits&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[DAC&#39;22] &lt;a href=&#34;https://arxiv.org/abs/2110.11331&#34;&gt;Wang et al., &#34;QuantumNAT: Quantum Noise-Aware Training with Noise Injection, Quantization and Normalization&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[DAC&#39;22] &lt;a href=&#34;https://arxiv.org/abs/2202.13239&#34;&gt;Wang et al., &#34;QOC: Quantum On-Chip Training with Parameter Shift and Gradient Pruning&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[QCE&#39;22] &lt;a href=&#34;https://arxiv.org/abs/2203.17267&#34;&gt;Liang et al., &#34;Variational Quantum Pulse Learning&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[ICCAD&#39;22] &lt;a href=&#34;https://arxiv.org/abs/2207.01578&#34;&gt;Hu et al., &#34;Quantum Neural Network Compression&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[ICCAD&#39;22] &lt;a href=&#34;https://arxiv.org/abs/2210.16724&#34;&gt;Wang et al., &#34;QuEst: Graph Transformer for Quantum Circuit Reliability Estimation&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[ICML Workshop] &lt;a href=&#34;https://dynn-icml2022.github.io/spapers/paper_7.pdf&#34;&gt;Yun et al., &#34;Slimmable Quantum Federated Learning&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[IEEE ICDCS] &lt;a href=&#34;https://ieeexplore.ieee.org/document/9912289&#34;&gt;Yun et al., &#34;Quantum Multi-Agent Reinforcement Learning via Variational Quantum Circuit Design&#34;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manuscripts&lt;/summary&gt; &#xA; &lt;h2&gt;Manuscripts&lt;/h2&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2210.16731&#34;&gt;Yun et al., &#34;Projection Valued Measure-based Quantum Machine Learning for Multi-Class Classification&#34;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2210.09728&#34;&gt;Baek et al., &#34;3D Scalable Quantum Convolutional Neural Networks for Point Cloud Data Processing in Classification Applications&#34;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2209.12372&#34;&gt;Baek et al., &#34;Scalable Quantum Convolutional Neural Networks&#34;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2208.11510&#34;&gt;Yun et al., &#34;Quantum Multi-Agent Meta Reinforcement Learning&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;3.9 &amp;gt;= Python &amp;gt;= 3.7 (Python 3.10 may have the &lt;code&gt;concurrent&lt;/code&gt; package issue for Qiskit)&lt;/li&gt; &#xA; &lt;li&gt;PyTorch &amp;gt;= 1.8.0&lt;/li&gt; &#xA; &lt;li&gt;configargparse &amp;gt;= 0.14&lt;/li&gt; &#xA; &lt;li&gt;GPU model training requires NVIDIA GPUs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;TorchQuantum &lt;a href=&#34;https://qmlsys.hanruiwang.me&#34;&gt;Forum&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hanrui Wang &lt;a href=&#34;mailto:hanrui@mit.edu&#34;&gt;hanrui@mit.edu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Jiannan Cao, Jessica Ding, Jiai Gu, Song Han, Zhirui Hu, Zirui Li, Zhiding Liang, Pengyu Liu, Yilian Liu, Mohammadreza Tavasoli, Hanrui Wang, Zhepeng Wang, Zhuoyang Ye&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{hanruiwang2022quantumnas,&#xA;    title     = {Quantumnas: Noise-adaptive search for robust quantum circuits},&#xA;    author    = {Wang, Hanrui and Ding, Yongshan and Gu, Jiaqi and Li, Zirui and Lin, Yujun and Pan, David Z and Chong, Frederic T and Han, Song},&#xA;    booktitle = {The 28th IEEE International Symposium on High-Performance Computer Architecture (HPCA-28)},&#xA;    year      = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>manan-shxrma/Robosocnith_database</title>
    <updated>2023-10-11T01:32:58Z</updated>
    <id>tag:github.com,2023-10-11:/manan-shxrma/Robosocnith_database</id>
    <link href="https://github.com/manan-shxrma/Robosocnith_database" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repo is used as a database for upcoming projects and a central repository&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;readme-top&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/manan-shxrma/Robosocnith_database.svg?style=for-the-badge&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/manan-shxrma/Robosocnith_database.svg?style=for-the-badge&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/manan-shxrma/Robosocnith_database.svg?style=for-the-badge&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/manan-shxrma/Robosocnith_database.svg?style=for-the-badge&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/manan-shxrma/Robosocnith_database.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://linkedin.com/in/manan-shxrma&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-LinkedIn-black.svg?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;colorB=555&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Robosocnith_database&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; This is dedicated repository for maintaining souce code of Robotics Society, NITH. The maintainers are not responsible for any plagiarism inadvertently crept into this repository. &lt;br&gt; &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database&#34;&gt;&lt;strong&gt;Explore the docs Â»&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database&#34;&gt;View Demo&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/issues&#34;&gt;Report Bug&lt;/a&gt; Â· &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/issues&#34;&gt;Request Feature&lt;/a&gt; &lt;/p&gt;  &#xA;&lt;!-- TABLE OF CONTENTS --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#built-with&#34;&gt;Built With&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Built With&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://isocpp.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Cpp-20232A?style=for-the-badge&amp;amp;logo=Cpp&amp;amp;logoColor=61DAFB&#34; alt=&#34;C++&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-35495E?style=for-the-badge&amp;amp;logo=Python&amp;amp;logoColor=4FC08D&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cprogramming.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/C-000000?style=for-the-badge&amp;amp;logo=C&amp;amp;logoColor=white&#34; alt=&#34;C&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- GETTING STARTED --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To run any of the Code/Program follow this steps to run it locally on your machine. To get a local copy up and running follow these simple example steps.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Based on your choice of program choose your desired compiler to be installed on your machine&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arduino&lt;/li&gt; &#xA; &lt;li&gt;C++&lt;/li&gt; &#xA; &lt;li&gt;C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use this Repository to learn and prepare for your internships and campus placements. This repository will contain most of the Repository which will be helpful to students.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For more examples, please refer to the &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database&#34;&gt;Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/manan-shxrma/Robosocnith_database/issues&#34;&gt;open issues&lt;/a&gt; for a full list of proposed features (and known issues).&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- CONTRIBUTING --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag &#34;enhancement&#34;. Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/manan-shxrma/Robosocnith_database/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
</feed>