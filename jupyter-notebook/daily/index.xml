<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:33:02Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>langchain-ai/agents-from-scratch</title>
    <updated>2025-07-01T01:33:02Z</updated>
    <id>tag:github.com,2025-07-01:/langchain-ai/agents-from-scratch</id>
    <link href="https://github.com/langchain-ai/agents-from-scratch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build an email assistant with human-in-the-loop and memory&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agents From Scratch&lt;/h1&gt; &#xA;&lt;p&gt;The repo is a guide to building agents from scratch. It builds up to an &lt;a href=&#34;https://blog.langchain.dev/introducing-ambient-agents/&#34;&gt;&#34;ambient&#34;&lt;/a&gt; agent that can manage your email with connection to the Gmail API. It&#39;s grouped into 4 sections, each with a notebook and accompanying code in the &lt;code&gt;src/email_assistant&lt;/code&gt; directory. These section build from the basics of agents, to agent evaluation, to human-in-the-loop, and finally to memory. These all come together in an agent that you can deploy, and the principles can be applied to other agents across a wide range of tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/overview.png&#34; alt=&#34;overview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Python Version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure you&#39;re using Python 3.11 or later.&lt;/li&gt; &#xA; &lt;li&gt;This version is required for optimal compatibility with LangGraph.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API Keys&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you don&#39;t have an OpenAI API key, you can sign up &lt;a href=&#34;https://openai.com/index/openai-api/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Sign up for LangSmith &lt;a href=&#34;https://smith.langchain.com/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate a LangSmith API key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Set Environment Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the root directory:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Copy the .env.example file to .env&#xA;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;.env&lt;/code&gt; file with the following:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;LANGSMITH_API_KEY=your_langsmith_api_key&#xA;LANGSMITH_TRACING=true&#xA;LANGSMITH_PROJECT=&#34;interrupt-workshop&#34;&#xA;OPENAI_API_KEY=your_openai_api_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also set the environment variables in your terminal:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export LANGSMITH_API_KEY=your_langsmith_api_key&#xA;export LANGSMITH_TRACING=true&#xA;export OPENAI_API_KEY=your_openai_api_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Package Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended: Using uv (faster and more reliable)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install uv if you haven&#39;t already&#xA;pip install uv&#xA;&#xA;# Install the package with development dependencies&#xA;uv sync --extra dev&#xA;&#xA;# Activate the virtual environment&#xA;source .venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternative: Using pip&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ python3 -m venv .venv&#xA;$ source .venv/bin/activate&#xA;# Ensure you have a recent version of pip (required for editable installs with pyproject.toml)&#xA;$ python3 -m pip install --upgrade pip&#xA;# Install the package in editable mode&#xA;$ pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ IMPORTANT&lt;/strong&gt;: Do not skip the package installation step! This editable install is &lt;strong&gt;required&lt;/strong&gt; for the notebooks to work correctly. The package is installed as &lt;code&gt;interrupt_workshop&lt;/code&gt; with import name &lt;code&gt;email_assistant&lt;/code&gt;, allowing you to import from anywhere with &lt;code&gt;from email_assistant import ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;The repo is organized into the 4 sections, with a notebook for each and accompanying code in the &lt;code&gt;src/email_assistant&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Preface: LangGraph 101&lt;/h3&gt; &#xA;&lt;p&gt;For a brief introduction to LangGraph and some of the concepts used in this repo, see the &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/langgraph_101.ipynb&#34;&gt;LangGraph 101 notebook&lt;/a&gt;. This notebook explains the basics of chat models, tool calling, agents vs workflows, LangGraph nodes / edges / memory, and LangGraph Studio.&lt;/p&gt; &#xA;&lt;h3&gt;Building an agent&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notebook: &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/agent.ipynb&#34;&gt;notebooks/agent.ipynb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/email_assistant.py&#34;&gt;src/email_assistant/email_assistant.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/overview_agent.png&#34; alt=&#34;overview-agent&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This notebook shows how to build the email assistant, combining an &lt;a href=&#34;https://langchain-ai.github.io/langgraph/tutorials/workflows/&#34;&gt;email triage step&lt;/a&gt; with an agent that handles the email response. You can see the linked code for the full implementation in &lt;code&gt;src/email_assistant/email_assistant.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/studio.png&#34; alt=&#34;Screenshot 2025-04-04 at 4 06 18 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Evaluation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notebook: &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/evaluation.ipynb&#34;&gt;notebooks/evaluation.ipynb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/overview_eval.png&#34; alt=&#34;overview-eval&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This notebook introduces evaluation with an email dataset in &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/eval/email_dataset.py&#34;&gt;eval/email_dataset.py&lt;/a&gt;. It shows how to run evaluations using Pytest and the LangSmith &lt;code&gt;evaluate&lt;/code&gt; API. It runs evaluation for emails responses using LLM-as-a-judge as well as evaluations for tools calls and triage decisions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/eval.png&#34; alt=&#34;Screenshot 2025-04-08 at 8 07 48 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Human-in-the-loop&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notebook: &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/hitl.ipynb&#34;&gt;notebooks/hitl.ipynb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/email_assistant_hitl.py&#34;&gt;src/email_assistant/email_assistant_hitl.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/overview_hitl.png&#34; alt=&#34;overview-hitl&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This notebooks shows how to add human-in-the-loop (HITL), allowing the user to review specific tool calls (e.g., send email, schedule meeting). For this, we use &lt;a href=&#34;https://github.com/langchain-ai/agent-inbox&#34;&gt;Agent Inbox&lt;/a&gt; as an interface for human in the loop. You can see the linked code for the full implementation in &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/email_assistant_hitl.py&#34;&gt;src/email_assistant/email_assistant_hitl.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/agent-inbox.png&#34; alt=&#34;Agent Inbox showing email threads&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Memory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notebook: &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/memory.ipynb&#34;&gt;notebooks/memory.ipynb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Code: &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/email_assistant_hitl_memory.py&#34;&gt;src/email_assistant/email_assistant_hitl_memory.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/notebooks/img/overview_memory.png&#34; alt=&#34;overview-memory&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This notebook shows how to add memory to the email assistant, allowing it to learn from user feedback and adapt to preferences over time. The memory-enabled assistant (&lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/email_assistant_hitl_memory.py&#34;&gt;email_assistant_hitl_memory.py&lt;/a&gt;) uses the &lt;a href=&#34;https://langchain-ai.github.io/langgraph/concepts/memory/#long-term-memory&#34;&gt;LangGraph Store&lt;/a&gt; to persist memories. You can see the linked code for the full implementation in &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/email_assistant_hitl_memory.py&#34;&gt;src/email_assistant/email_assistant_hitl_memory.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting to APIs&lt;/h2&gt; &#xA;&lt;p&gt;The above notebooks using mock email and calendar tools.&lt;/p&gt; &#xA;&lt;h3&gt;Gmail Integration and Deployment&lt;/h3&gt; &#xA;&lt;p&gt;Set up Google API credentials following the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/tools/gmail/README.md&#34;&gt;Gmail Tools README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The README also explains how to deploy the graph to LangGraph Platform.&lt;/p&gt; &#xA;&lt;p&gt;The full implementation of the Gmail integration is in &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/src/email_assistant/email_assistant_hitl_memory_gmail.py&#34;&gt;src/email_assistant/email_assistant_hitl_memory_gmail.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;The repository includes an automated test suite to evaluate the email assistant.&lt;/p&gt; &#xA;&lt;p&gt;Tests verify correct tool usage and response quality using LangSmith for tracking.&lt;/p&gt; &#xA;&lt;h3&gt;Running Tests with &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/agents-from-scratch/main/tests/run_all_tests.py&#34;&gt;run_all_tests.py&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python tests/run_all_tests.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test Results&lt;/h3&gt; &#xA;&lt;p&gt;Test results are logged to LangSmith under the project name specified in your &lt;code&gt;.env&lt;/code&gt; file (&lt;code&gt;LANGSMITH_PROJECT&lt;/code&gt;). This provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual inspection of agent traces&lt;/li&gt; &#xA; &lt;li&gt;Detailed evaluation metrics&lt;/li&gt; &#xA; &lt;li&gt;Comparison of different agent implementations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Available Test Implementations&lt;/h3&gt; &#xA;&lt;p&gt;The available implementations for testing are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;email_assistant&lt;/code&gt; - Basic email assistant&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing Notebooks&lt;/h3&gt; &#xA;&lt;p&gt;You can also run tests to verify all notebooks execute without errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Run all notebook tests&#xA;python tests/test_notebooks.py&#xA;&#xA;# Or run via pytest&#xA;pytest tests/test_notebooks.py -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;a href=&#34;https://langchain-ai.github.io/langmem/&#34;&gt;LangMem&lt;/a&gt; to manage memories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manage a collection of background memories.&lt;/li&gt; &#xA; &lt;li&gt;Add memory tools that can look up facts in the background memories.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>