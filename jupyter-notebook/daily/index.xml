<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-26T01:34:22Z</updated>
  <subtitle>Daily Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>benmoseley/harmonic-oscillator-pinn</title>
    <updated>2022-11-26T01:34:22Z</updated>
    <id>tag:github.com,2022-11-26:/benmoseley/harmonic-oscillator-pinn</id>
    <link href="https://github.com/benmoseley/harmonic-oscillator-pinn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code accompanying my blog post: So, what is a physics-informed neural network?&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;harmonic-oscillator-pinn&lt;/h1&gt; &#xA;&lt;p&gt;Code accompanying my blog post: &lt;a href=&#34;https://benmoseley.blog/my-research/so-what-is-a-physics-informed-neural-network/&#34;&gt;So, what is a physics-informed neural network?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/benmoseley/harmonic-oscillator-pinn/main/figures/pinn.gif&#34; width=&#34;850&#34;&gt;</summary>
  </entry>
  <entry>
    <title>alan-turing-institute/WorldCupPrediction</title>
    <updated>2022-11-26T01:34:22Z</updated>
    <id>tag:github.com,2022-11-26:/alan-turing-institute/WorldCupPrediction</id>
    <link href="https://github.com/alan-turing-institute/WorldCupPrediction" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Predicting results for the 2022 world cup.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WorldCupPrediction | AIrgentina&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://raw.githubusercontent.com/alan-turing-institute/WorldCupPrediction/main/plots/AIrgentina_hex.png&#34;&gt; &#xA;&lt;p&gt;Predicting results for the 2022 World Cup.&lt;/p&gt; &#xA;&lt;p&gt;Matches are predicted using a framework based on the team-level model in &lt;a href=&#34;https://github.com/alan-turing-institute/AIrsenal&#34;&gt;https://github.com/alan-turing-institute/AIrsenal&lt;/a&gt;, which in turn uses &lt;a href=&#34;https://github.com/anguswilliams91/bpl-next&#34;&gt;https://github.com/anguswilliams91/bpl-next&lt;/a&gt;. This model is trained on international mens football results obtained from &lt;a href=&#34;https://github.com/martj42/international_results&#34;&gt;https://github.com/martj42/international_results&lt;/a&gt;. The original model is a version of &lt;a href=&#34;https://rss.onlinelibrary.wiley.com/doi/10.1111/1467-9876.00065&#34;&gt;Dixon and Coles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;In the media&lt;/h2&gt; &#xA;&lt;p&gt;There is some background information and description of the results &lt;a href=&#34;https://www.turing.ac.uk/blog/can-our-algorithm-predict-winner-2022-football-world-cup&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;https://www.newscientist.com/article/2347699-brazil-picked-as-2022-world-cup-winners-by-alan-turing-institute-model/&#34;&gt;New Scientist&lt;/a&gt;&lt;/strong&gt; also has an article, as does &lt;strong&gt;The Daily Mail&lt;/strong&gt;, which prompted one reader to enthuse: &lt;em&gt;&#34;What an absolute load of rubbish, but typical of the anti-English establishment today!&#34;&lt;/em&gt;, and another to ponder: &lt;em&gt;&#34;I have NEVER KNOW a Prediction from a Scientist to be Right Ever, But on this Prediction I may be wrong.&#34;&lt;/em&gt;. High praise indeed!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to use the code is via &lt;a href=&#34;https://python-poetry.org/&#34;&gt;poetry&lt;/a&gt;. If you have poetry installed, from this directory, you can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry shell&#xA;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to first open a shell in a virtual environment, and then install the dependencies and the &lt;code&gt;wcpredictor&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Simulating a tournament multiple times&lt;/h3&gt; &#xA;&lt;p&gt;There are a couple of command-line applications that can be run when the &lt;code&gt;wcpredictor&lt;/code&gt; package is installed as described above.&lt;/p&gt; &#xA;&lt;p&gt;In order to simulate the tournament N times, you can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wcpred_run_simulations --num_simulations &amp;lt;N&amp;gt; --tournament_year &amp;lt;year&amp;gt; --training_data_start &amp;lt;YYYY-MM-DD&amp;gt; --training_data_end &amp;lt;YYYY-MM-DD&amp;gt; --output_csv &amp;lt;outputfilename&amp;gt; --use_ratings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the results, in the form of a table of how many times each team got to each stage of the competition, will be saved in the specified csv file. At present, the allowed values for &lt;code&gt;tournament_year&lt;/code&gt; are &#34;2014&#34;, &#34;2018&#34;, and &#34;2022&#34; (the default).&lt;/p&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Warning:&lt;/strong&gt; ⚠️ The simulations can use &lt;em&gt;&lt;strong&gt;a lot&lt;/strong&gt;&lt;/em&gt; of memory. If you want to run more than around 250 simulationns we recommend checking the help (&lt;code&gt;wcpred_run_simulations --help&lt;/code&gt;) and setting the &lt;code&gt;--num_thread&lt;/code&gt; and &lt;code&gt;--per_tournament&lt;/code&gt; arguments (start low andd then slowly increase them whilst monitoring CPU/memory usage on your system).&lt;/p&gt; &#xA;&lt;p&gt;Once you have a csv file saved from running the simulation, you can plot the top ten most frequent winners by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wcpred_plot_winners --input_csv &amp;lt;inputfilename&amp;gt; --output_png &amp;lt;outputfilename&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the results will be saved in the specified png.&lt;/p&gt; &#xA;&lt;p&gt;You can also make a plot showing how far in the tournament a selection of teams got, by running e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wcpred_plot_progress --input_csv &amp;lt;inputfilename&amp;gt; --output_png &amp;lt;outputfilename&amp;gt; --team_list &#34;England,Wales&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that both these commands can be run with &lt;code&gt;--help&lt;/code&gt; to see the options.&lt;/p&gt; &#xA;&lt;h3&gt;Running a single tournament&lt;/h3&gt; &#xA;&lt;p&gt;In a python session, you can do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python&#xA;&amp;gt;&amp;gt;&amp;gt; from wcpredictor import Tournament, get_and_train_model&#xA;&amp;gt;&amp;gt;&amp;gt; t = Tournament(&#34;2022&#34;) # can also choose &#34;2018&#34; or &#34;2014&#34;&#xA;&amp;gt;&amp;gt;&amp;gt; model = get_and_train_model(start_date=&#34;2016-06-01&#34;, end_date=&#34;2022-11-20&#34;) # choose dates for training data&#xA;&amp;gt;&amp;gt;&amp;gt; t.play_group_stage(model)&#xA;&amp;gt;&amp;gt;&amp;gt; # at this stage, we can look at how each group is doing&#xA;&amp;gt;&amp;gt;&amp;gt; print(t.groups[&#34;A&#34;])&#xA;Position |  Team   | Points | GS |  GA&#xA;   1st    Netherlands   6      8     4&#xA;   2nd    Qatar         4      2     1&#xA;   3rd    Ecuador       4      1     5&#xA;   4th    Senegal       3      4     5&#xA;&amp;gt;&amp;gt;&amp;gt; # or, we can go ahead and play the knockout stages&#xA;&amp;gt;&amp;gt;&amp;gt; t.play_knockout_stages(model)&#xA;&amp;gt;&amp;gt;&amp;gt; print(t.winner)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-tournament predictions:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alan-turing-institute/WorldCupPrediction/main/plots/plots/predictions.png&#34; alt=&#34;world_cup_2022_predictions&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>