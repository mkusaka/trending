<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Jupyter Notebook Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-01T01:56:01Z</updated>
  <subtitle>Monthly Trending of Jupyter Notebook in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>QwenLM/Qwen2.5-VL</title>
    <updated>2025-03-01T01:56:01Z</updated>
    <id>tag:github.com,2025-03-01:/QwenLM/Qwen2.5-VL</id>
    <link href="https://github.com/QwenLM/Qwen2.5-VL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qwen2.5-VL is the multimodal large language model series developed by Qwen team, Alibaba Cloud.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Qwen2.5-VL&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2.5-VL/qwen2.5vl_logo.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; üíú &lt;a href=&#34;https://chat.qwenlm.ai/&#34;&gt;&lt;b&gt;Qwen Chat&lt;/b&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü§ó &lt;a href=&#34;https://huggingface.co/collections/Qwen/qwen25-vl-6795ffac22b334a837c0f9a5&#34;&gt;Hugging Face&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü§ñ &lt;a href=&#34;https://modelscope.cn/organization/qwen&#34;&gt;ModelScope&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üìë &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2.5-vl/&#34;&gt;Blog&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üìö &lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/tree/main/cookbooks&#34;&gt;Cookbooks&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üìë &lt;a href=&#34;https://arxiv.org/abs/2502.13923&#34;&gt;Paper&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;br&gt; üñ•Ô∏è &lt;a href=&#34;https://huggingface.co/spaces/Qwen/Qwen2.5-VL&#34;&gt;Demo&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üí¨ &lt;a href=&#34;https://github.com/QwenLM/Qwen/raw/main/assets/wechat.png&#34;&gt;WeChat (ÂæÆ‰ø°)&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;ü´® &lt;a href=&#34;https://discord.gg/CV4E9rpNSD&#34;&gt;Discord&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üìë &lt;a href=&#34;https://help.aliyun.com/zh/model-studio/developer-reference/qwen-vl-api&#34;&gt;API&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;üñ•Ô∏è &lt;a href=&#34;https://gallery.pai-ml.com/#/preview/deepLearning/cv/qwen2.5-vl&#34;&gt;PAI-DSW&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;In the past five months since Qwen2-VL&#39;s release, numerous developers have built new models on the Qwen2-VL vision-language models, providing us with valuable feedback. During this period, we focused on building more useful vision-language models. Today, we are excited to introduce the latest addition to the Qwen family: Qwen2.5-VL.&lt;/p&gt; &#xA;&lt;h4&gt;Key Enhancements:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Powerful Document Parsing Capabilities&lt;/strong&gt;: Upgrade text recognition to omnidocument parsing, excelling in processing multi-scene, multilingual, and various built-in (handwriting, tables, charts, chemical formulas, and music sheets) documents.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Precise Object Grounding Across Formats&lt;/strong&gt;: Unlock improved accuracy in detecting, pointing, and counting objects, accommodating absolute coordinate and JSON formats for advanced spatial reasoning.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ultra-long Video Understanding and Fine-grained Video Grounding&lt;/strong&gt;: Extend native dynamic resolution to the temporal dimension, enhancing the ability to understand videos lasting hours while extracting event segments in seconds.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Enhanced Agent Functionality for Computer and Mobile Devices&lt;/strong&gt;: Leverage advanced grounding, reasoning, and decision-making abilities, boosting the model with superior agent functionality on smartphones and computers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Model Architecture Updates:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Resolution and Frame Rate Training for Video Understanding&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We extend dynamic resolution to the temporal dimension by adopting dynamic FPS sampling, enabling the model to comprehend videos at various sampling rates. Accordingly, we update mRoPE in the time dimension with IDs and absolute time alignment, enabling the model to learn temporal sequence and speed, and ultimately acquire the ability to pinpoint specific moments.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2.5-VL/qwen2.5vl_arc.jpeg&#34; width=&#34;80%&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Streamlined and Efficient Vision Encoder&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We enhance both training and inference speeds by strategically implementing window attention into the ViT. The ViT architecture is further optimized with SwiGLU and RMSNorm, aligning it with the structure of the Qwen2.5 LLM.&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2025.02.20: we have released the &lt;a href=&#34;https://arxiv.org/abs/2502.13923&#34;&gt;Qwen2.5-VL Technical Report&lt;/a&gt;. Alongside the report, we have also released AWQ-quantized models for Qwen2.5-VL in three different sizes: &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-3B-Instruct-AWQ&#34;&gt;3B&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-7B-Instruct-AWQ&#34;&gt;7B&lt;/a&gt; , and &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-72B-Instruct-AWQ&#34;&gt;72B&lt;/a&gt; parameters.&lt;/li&gt; &#xA; &lt;li&gt;2025.01.28: We have released the &lt;a href=&#34;https://huggingface.co/Qwen&#34;&gt;Qwen2.5-VL series&lt;/a&gt;. For more details, please check our &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2.5-vl/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;2024.12.25: We have released the &lt;a href=&#34;https://huggingface.co/Qwen/QVQ-72B-Preview&#34;&gt;QvQ-72B-Preview&lt;/a&gt;. QvQ-72B-Preview is an experimental research model, focusing on enhancing visual reasoning capabilities. For more details, please check our &lt;a href=&#34;https://qwenlm.github.io/blog/qvq-72b-preview/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;2024.09.19: The instruction-tuned &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct&#34;&gt;Qwen2-VL-72B model&lt;/a&gt; and its quantized version [&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-AWQ&#34;&gt;AWQ&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int4&#34;&gt;GPTQ-Int4&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int8&#34;&gt;GPTQ-Int8&lt;/a&gt;] are now available. We have also released the &lt;a href=&#34;https://arxiv.org/pdf/2409.12191&#34;&gt;Qwen2-VL paper&lt;/a&gt; simultaneously.&lt;/li&gt; &#xA; &lt;li&gt;2024.08.30: We have released the &lt;a href=&#34;https://huggingface.co/collections/Qwen/qwen2-vl-66cee7455501d7126940800d&#34;&gt;Qwen2-VL series&lt;/a&gt;. The 2B and 7B models are now available, and the 72B model for open source is coming soon. For more details, please check our &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2-vl/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dataset&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2.5-VL-3B&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-3B-Instruct&#34;&gt;ü§ó&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2.5-VL-3B-Instruct&#34;&gt;ü§ñ&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2.5-VL-7B&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-7B-Instruct&#34;&gt;ü§ó&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2.5-VL-7B-Instruct&#34;&gt;ü§ñ&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2.5-VL-72B&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2.5-VL-72B-Instruct&#34;&gt;ü§ó&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2.5-VL-72B-Instruct&#34;&gt;ü§ñ&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Gemini-2 Flash&lt;/th&gt; &#xA;   &lt;th&gt;GPT-4o&lt;/th&gt; &#xA;   &lt;th&gt;Claude3.5 Sonnet&lt;/th&gt; &#xA;   &lt;th&gt;Qwen2-VL 72B&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMMU&lt;/td&gt; &#xA;   &lt;td&gt;53.1&lt;/td&gt; &#xA;   &lt;td&gt;58.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;70.3&lt;/td&gt; &#xA;   &lt;td&gt;70.4&lt;/td&gt; &#xA;   &lt;td&gt;64.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMMU Pro&lt;/td&gt; &#xA;   &lt;td&gt;31.6&lt;/td&gt; &#xA;   &lt;td&gt;38.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;57&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;54.5&lt;/td&gt; &#xA;   &lt;td&gt;54.7&lt;/td&gt; &#xA;   &lt;td&gt;46.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DocVQA&lt;/td&gt; &#xA;   &lt;td&gt;93.9&lt;/td&gt; &#xA;   &lt;td&gt;95.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;96.4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;92.1&lt;/td&gt; &#xA;   &lt;td&gt;91.1&lt;/td&gt; &#xA;   &lt;td&gt;95.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;96.5&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InfoVQA&lt;/td&gt; &#xA;   &lt;td&gt;77.1&lt;/td&gt; &#xA;   &lt;td&gt;82.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;87.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;77.8&lt;/td&gt; &#xA;   &lt;td&gt;80.7&lt;/td&gt; &#xA;   &lt;td&gt;74.3&lt;/td&gt; &#xA;   &lt;td&gt;84.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CC-OCR&lt;/td&gt; &#xA;   &lt;td&gt;74.5&lt;/td&gt; &#xA;   &lt;td&gt;77.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;79.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;73.0&lt;/td&gt; &#xA;   &lt;td&gt;66.6&lt;/td&gt; &#xA;   &lt;td&gt;62.7&lt;/td&gt; &#xA;   &lt;td&gt;68.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCRBenchV2&lt;/td&gt; &#xA;   &lt;td&gt;54.3/52.1&lt;/td&gt; &#xA;   &lt;td&gt;56.3/57.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.5/63.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;46.5/32.3&lt;/td&gt; &#xA;   &lt;td&gt;45.2/39.6&lt;/td&gt; &#xA;   &lt;td&gt;47.8/46.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MegaBench&lt;/td&gt; &#xA;   &lt;td&gt;28.9&lt;/td&gt; &#xA;   &lt;td&gt;36.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;55.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;54.2&lt;/td&gt; &#xA;   &lt;td&gt;52.1&lt;/td&gt; &#xA;   &lt;td&gt;46.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMStar&lt;/td&gt; &#xA;   &lt;td&gt;55.8&lt;/td&gt; &#xA;   &lt;td&gt;63.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;69.4&lt;/td&gt; &#xA;   &lt;td&gt;64.7&lt;/td&gt; &#xA;   &lt;td&gt;65.1&lt;/td&gt; &#xA;   &lt;td&gt;68.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMBench1.1&lt;/td&gt; &#xA;   &lt;td&gt;81.5&lt;/td&gt; &#xA;   &lt;td&gt;84.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;88.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;83.0&lt;/td&gt; &#xA;   &lt;td&gt;82.1&lt;/td&gt; &#xA;   &lt;td&gt;83.4&lt;/td&gt; &#xA;   &lt;td&gt;86.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathVista&lt;/td&gt; &#xA;   &lt;td&gt;62.3&lt;/td&gt; &#xA;   &lt;td&gt;68.2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;74.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;73.1&lt;/td&gt; &#xA;   &lt;td&gt;63.8&lt;/td&gt; &#xA;   &lt;td&gt;65.4&lt;/td&gt; &#xA;   &lt;td&gt;70.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathVision&lt;/td&gt; &#xA;   &lt;td&gt;21.2&lt;/td&gt; &#xA;   &lt;td&gt;25.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;38.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;41.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;30.4&lt;/td&gt; &#xA;   &lt;td&gt;38.3&lt;/td&gt; &#xA;   &lt;td&gt;25.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VideoMME&lt;/td&gt; &#xA;   &lt;td&gt;61.5/67.6&lt;/td&gt; &#xA;   &lt;td&gt;65.1/71.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;73.3/79.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-/-&lt;/td&gt; &#xA;   &lt;td&gt;71.9/77.2&lt;/td&gt; &#xA;   &lt;td&gt;60/62.9&lt;/td&gt; &#xA;   &lt;td&gt;71.2/77.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMBench-Video&lt;/td&gt; &#xA;   &lt;td&gt;1.63&lt;/td&gt; &#xA;   &lt;td&gt;1.79&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2.02&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;1.68&lt;/td&gt; &#xA;   &lt;td&gt;1.38&lt;/td&gt; &#xA;   &lt;td&gt;1.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LVBench&lt;/td&gt; &#xA;   &lt;td&gt;43.3&lt;/td&gt; &#xA;   &lt;td&gt;45.3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;47.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;30.8&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CharadesSTA&lt;/td&gt; &#xA;   &lt;td&gt;38.8&lt;/td&gt; &#xA;   &lt;td&gt;43.6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;50.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;35.7&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AITZ&lt;/td&gt; &#xA;   &lt;td&gt;76.9&lt;/td&gt; &#xA;   &lt;td&gt;81.9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;83.2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;35.3&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android Control&lt;/td&gt; &#xA;   &lt;td&gt;63.7/90.8&lt;/td&gt; &#xA;   &lt;td&gt;60.1/91.4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.36/93.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;66.4/84.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScreenSpot&lt;/td&gt; &#xA;   &lt;td&gt;55.5&lt;/td&gt; &#xA;   &lt;td&gt;84.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;87.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;84.0&lt;/td&gt; &#xA;   &lt;td&gt;18.1&lt;/td&gt; &#xA;   &lt;td&gt;83.0&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ScreenSpot Pro&lt;/td&gt; &#xA;   &lt;td&gt;23.9&lt;/td&gt; &#xA;   &lt;td&gt;29.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;43.6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;17.1&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AndroidWorld&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;35&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;34.5(SoM)&lt;/td&gt; &#xA;   &lt;td&gt;27.9&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OSWorld&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;8.83&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;5.03&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;14.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Below, we provide simple examples to show how to use Qwen2.5-VL with ü§ñ ModelScope and ü§ó Transformers.&lt;/p&gt; &#xA;&lt;p&gt;The code of Qwen2.5-VL has been in the latest Hugging face transformers and we advise you to build from source with command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/huggingface/transformers accelerate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you might encounter the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;KeyError: &#39;qwen2_5_vl&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We offer a toolkit to help you handle various types of visual input more conveniently, as if you were using an API. This includes base64, URLs, and interleaved images and videos. You can install it using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# It&#39;s highly recommended to use `[decord]` feature for faster video loading.&#xA;pip install qwen-vl-utils[decord]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Linux, you might not be able to install &lt;code&gt;decord&lt;/code&gt; from PyPI. In that case, you can use &lt;code&gt;pip install qwen-vl-utils&lt;/code&gt; which will fall back to using torchvision for video processing. However, you can still &lt;a href=&#34;https://github.com/dmlc/decord?tab=readme-ov-file#install-from-source&#34;&gt;install decord from source&lt;/a&gt; to get decord used when loading video.&lt;/p&gt; &#xA;&lt;p&gt;We are preparing &lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/tree/main/cookbooks&#34;&gt;cookbooks&lt;/a&gt; for many capabilities, including recognition, localization, document parsing, video understanding, key information extraction, and more. Welcome to learn more!&lt;/p&gt; &#xA;&lt;h2&gt;Cookbooks&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cookbook&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Open&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/universal_recognition.ipynb&#34;&gt;Universal Recognition&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not only identify animals, plants, people, and scenic spots but also recognize various objects such as cars and merchandise.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/universal_recognition.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/document_parsing.ipynb&#34;&gt;Powerful Document Parsing Capabilities&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The parsing of documents has reached a higher level, including not only text but also layout position information and our Qwen HTML format.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/document_parsing.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/spatial_understanding.ipynb&#34;&gt;Precise Object Grounding Across Formats&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Using absolute position coordinates, it supports both boxes and points, allowing for diverse combinations of positioning and labeling tasks.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/spatial_understanding.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/ocr.ipynb&#34;&gt;General OCR and Key Information Extraction&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stronger text recognition capabilities in natural scenes and multiple languages, supporting diverse key information extraction needs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/ocr.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/video_understanding.ipynb&#34;&gt;Video Understanding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Better video OCR, long video understanding, and video grounding.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/video_understanding.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/mobile_agent.ipynb&#34;&gt;Mobile Agent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Locate and think for mobile phone control.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/mobile_agent.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/computer_use.ipynb&#34;&gt;Computer-Use Agent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Locate and think for controlling computers and Web.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/QwenLM/Qwen2.5-VL/raw/main/cookbooks/computer_use.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Colab&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using ü§ó Transformers to Chat&lt;/h3&gt; &#xA;&lt;p&gt;Here we show a code snippet to show you how to use the chat model with &lt;code&gt;transformers&lt;/code&gt; and &lt;code&gt;qwen_vl_utils&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2_5_VLForConditionalGeneration, AutoProcessor&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;# default: Load the model on the available device(s)&#xA;model = Qwen2_5_VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, torch_dtype=&#34;auto&#34;, device_map=&#34;auto&#34;&#xA;)&#xA;&#xA;# We recommend enabling flash_attention_2 for better acceleration and memory saving, especially in multi-image and video scenarios.&#xA;# model = Qwen2_5_VLForConditionalGeneration.from_pretrained(&#xA;#     &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;,&#xA;#     torch_dtype=torch.bfloat16,&#xA;#     attn_implementation=&#34;flash_attention_2&#34;,&#xA;#     device_map=&#34;auto&#34;,&#xA;# )&#xA;&#xA;# default processor&#xA;processor = AutoProcessor.from_pretrained(&#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;)&#xA;&#xA;# The default range for the number of visual tokens per image in the model is 4-16384.&#xA;# You can set min_pixels and max_pixels according to your needs, such as a token range of 256-1280, to balance performance and cost.&#xA;# min_pixels = 256*28*28&#xA;# max_pixels = 1280*28*28&#xA;# processor = AutoProcessor.from_pretrained(&#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, min_pixels=min_pixels, max_pixels=max_pixels)&#xA;&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(model.device)&#xA;&#xA;# Inference: Generation of the output&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Multi image inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Messages containing multiple images and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image1.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image2.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Identify the similarities between these images.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Video inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Messages containing a images list as a video and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: [&#xA;                    &#34;file:///path/to/frame1.jpg&#34;,&#xA;                    &#34;file:///path/to/frame2.jpg&#34;,&#xA;                    &#34;file:///path/to/frame3.jpg&#34;,&#xA;                    &#34;file:///path/to/frame4.jpg&#34;,&#xA;                ],&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Messages containing a local video path and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: &#34;file:///path/to/video1.mp4&#34;,&#xA;                &#34;max_pixels&#34;: 360 * 420,&#xA;                &#34;fps&#34;: 1.0,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Messages containing a video url and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2-VL/space_woaudio.mp4&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs, video_kwargs = process_vision_info(messages, return_video_kwargs=True)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    fps=fps,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;    **video_kwargs,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Video URL compatibility largely depends on the third-party library version. The details are in the table below. change the backend by &lt;code&gt;FORCE_QWENVL_VIDEO_READER=torchvision&lt;/code&gt; or &lt;code&gt;FORCE_QWENVL_VIDEO_READER=decord&lt;/code&gt; if you prefer not to use the default one.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Backend&lt;/th&gt; &#xA;    &lt;th&gt;HTTP&lt;/th&gt; &#xA;    &lt;th&gt;HTTPS&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;torchvision &amp;gt;= 0.19.0&lt;/td&gt; &#xA;    &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;    &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;torchvision &amp;lt; 0.19.0&lt;/td&gt; &#xA;    &lt;td&gt;‚ùå&lt;/td&gt; &#xA;    &lt;td&gt;‚ùå&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;decord&lt;/td&gt; &#xA;    &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;    &lt;td&gt;‚ùå&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Batch inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Sample messages for batch inference&#xA;messages1 = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image1.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image2.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What are the common elements in these pictures?&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;messages2 = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Who are you?&#34;},&#xA;]&#xA;# Combine messages for batch processing&#xA;messages = [messages1, messages2]&#xA;&#xA;# Preparation for batch inference&#xA;texts = [&#xA;    processor.apply_chat_template(msg, tokenize=False, add_generation_prompt=True)&#xA;    for msg in messages&#xA;]&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=texts,&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Batch Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_texts = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_texts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;ü§ñ ModelScope&lt;/h3&gt; &#xA;&lt;p&gt;We strongly advise users especially those in mainland China to use ModelScope. &lt;code&gt;snapshot_download&lt;/code&gt; can help you solve issues concerning downloading checkpoints.&lt;/p&gt; &#xA;&lt;h3&gt;More Usage Tips&lt;/h3&gt; &#xA;&lt;p&gt;For input images, we support local files, base64, and URLs. For videos, we currently only support local files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# You can directly insert a local file path, a URL, or a base64-encoded image into the position where you want in the text.&#xA;## Local file path&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;## Image URL&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;http://path/to/your/image.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;## Base64 encoded image&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;data:image;base64,/9j/...&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Image Resolution for performance boost&lt;/h4&gt; &#xA;&lt;p&gt;The model supports a wide range of resolution inputs. By default, it uses the native resolution for input, but higher resolutions can enhance performance at the cost of more computation. Users can set the minimum and maximum number of pixels to achieve an optimal configuration for their needs, such as a token count range of 256-1280, to balance speed and memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min_pixels = 256 * 28 * 28&#xA;max_pixels = 1280 * 28 * 28&#xA;processor = AutoProcessor.from_pretrained(&#xA;    &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, min_pixels=min_pixels, max_pixels=max_pixels&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, We provide two methods for fine-grained control over the image size input to the model:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify exact dimensions: Directly set &lt;code&gt;resized_height&lt;/code&gt; and &lt;code&gt;resized_width&lt;/code&gt;. These values will be rounded to the nearest multiple of 28.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define min_pixels and max_pixels: Images will be resized to maintain their aspect ratio within the range of min_pixels and max_pixels.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# resized_height and resized_width&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;,&#xA;                &#34;resized_height&#34;: 280,&#xA;                &#34;resized_width&#34;: 420,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;# min_pixels and max_pixels&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;,&#xA;                &#34;min_pixels&#34;: 50176,&#xA;                &#34;max_pixels&#34;: 50176,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add ids for Multiple Image Inputs&lt;/h4&gt; &#xA;&lt;p&gt;By default, images and video content are directly included in the conversation. When handling multiple images, it&#39;s helpful to add labels to the images and videos for better reference. Users can control this behavior with the following settings:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Add vision ids&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conversation = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [{&#34;type&#34;: &#34;image&#34;}, {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Hello, how are you?&#34;}],&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;I&#39;m doing well, thank you for asking. How can I assist you today?&#34;,&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Can you describe these images and video?&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;},&#xA;            {&#34;type&#34;: &#34;video&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;These are from my vacation.&#34;},&#xA;        ],&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;I&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&#34;,&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;It was a trip to the mountains. Can you see the details in the images and video?&#34;,&#xA;    },&#xA;]&#xA;&#xA;# default:&#xA;prompt_without_id = processor.apply_chat_template(&#xA;    conversation, add_generation_prompt=True&#xA;)&#xA;# Excepted output: &#39;&amp;lt;|im_start|&amp;gt;system\nYou are a helpful assistant.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\n&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Hello, how are you?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;m doing well, thank you for asking. How can I assist you today?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nCan you describe these images and video?&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;&amp;lt;|vision_start|&amp;gt;&amp;lt;|video_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;These are from my vacation.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nIt was a trip to the mountains. Can you see the details in the images and video?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\n&#39;&#xA;&#xA;&#xA;# add ids&#xA;prompt_with_id = processor.apply_chat_template(&#xA;    conversation, add_generation_prompt=True, add_vision_id=True&#xA;)&#xA;# Excepted output: &#39;&amp;lt;|im_start|&amp;gt;system\nYou are a helpful assistant.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nPicture 1: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Hello, how are you?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;m doing well, thank you for asking. How can I assist you today?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nCan you describe these images and video?Picture 2: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Picture 3: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Video 1: &amp;lt;|vision_start|&amp;gt;&amp;lt;|video_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;These are from my vacation.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nIt was a trip to the mountains. Can you see the details in the images and video?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Flash-Attention 2 to speed up generation&lt;/h4&gt; &#xA;&lt;p&gt;First, make sure to install the latest version of Flash Attention 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you should have a hardware that is compatible with Flash-Attention 2. Read more about it in the official documentation of the &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;flash attention repository&lt;/a&gt;. FlashAttention-2 can only be used when a model is loaded in &lt;code&gt;torch.float16&lt;/code&gt; or &lt;code&gt;torch.bfloat16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To load and run a model using Flash Attention-2, simply add &lt;code&gt;attn_implementation=&#34;flash_attention_2&#34;&lt;/code&gt; when loading the model as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2_5_VLForConditionalGeneration&#xA;&#xA;model = Qwen2_5_VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;, &#xA;    torch_dtype=torch.bfloat16, &#xA;    attn_implementation=&#34;flash_attention_2&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Processing Long Texts&lt;/h3&gt; &#xA;&lt;p&gt;The current &lt;code&gt;config.json&lt;/code&gt; is set for context length up to 32,768 tokens. To handle extensive inputs exceeding 32,768 tokens, we utilize &lt;a href=&#34;https://arxiv.org/abs/2309.00071&#34;&gt;YaRN&lt;/a&gt;, a technique for enhancing model length extrapolation, ensuring optimal performance on lengthy texts.&lt;/p&gt; &#xA;&lt;p&gt;For supported frameworks, you could add the following to &lt;code&gt;config.json&lt;/code&gt; to enable YaRN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;...,&#xA;    &#34;type&#34;: &#34;yarn&#34;,&#xA;    &#34;mrope_section&#34;: [&#xA;        16,&#xA;        24,&#xA;        24&#xA;    ],&#xA;    &#34;factor&#34;: 4,&#xA;    &#34;original_max_position_embeddings&#34;: 32768&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, it should be noted that this method has a significant impact on the performance of temporal and spatial localization tasks, and is therefore not recommended for use.&lt;/p&gt; &#xA;&lt;p&gt;At the same time, for long video inputs, since MRoPE itself is more economical with ids, the max_position_embeddings can be directly modified to a larger value, such as 64k.&lt;/p&gt; &#xA;&lt;h3&gt;Try Qwen2.5-VL-72B with API!&lt;/h3&gt; &#xA;&lt;p&gt;To explore Qwen2.5-VL-72B, a more fascinating multimodal model, we encourage you to test our cutting-edge API service. Let&#39;s start the exciting journey right now!&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install dashscope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import dashscope&#xA;&#xA;&#xA;dashscope.api_key = &#34;your_api_key&#34;&#xA;&#xA;messages = [{&#xA;    &#39;role&#39;: &#39;user&#39;,&#xA;    &#39;content&#39;: [&#xA;        {&#xA;            &#39;image&#39;: &#34;https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg&#34;&#xA;        },&#xA;        {&#xA;            &#39;text&#39;: &#39;What are in the image?&#39;&#xA;        },&#xA;    ]&#xA;}]&#xA;&#xA;response = dashscope.MultiModalConversation.call(model=&#39;qwen2.5-vl-72b-instruct&#39;, messages=messages)&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more usage, please refer to the tutorial at &lt;a href=&#34;https://help.aliyun.com/zh/model-studio/developer-reference/qwen-vl-api&#34;&gt;aliyun&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Web UI Example&lt;/h3&gt; &#xA;&lt;p&gt;In this section, we provide instructions for users to build a web-based user interface (UI) demo. This UI demo allows users to interact with a predefined model or application through a web browser. Follow the steps below to get started.&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;Before you begin, ensure that you have the required dependencies installed on your system. You can install them by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements_web_demo.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Demo with FlashAttention-2&lt;/h4&gt; &#xA;&lt;p&gt;Once the required packages are installed, you can launch the web demo using the following command. This command will start a web server and provide you with a link to access the UI in your web browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: For enhanced performance and efficiency, especially in multi-image and video processing scenarios, we strongly recommend using &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;FlashAttention-2&lt;/a&gt;. FlashAttention-2 provides significant improvements in memory usage and speed, making it ideal for handling large-scale models and data processing.&lt;/p&gt; &#xA;&lt;p&gt;To enable FlashAttention-2, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo_mm.py --flash-attn2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load the model with FlashAttention-2 enabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default Usage&lt;/strong&gt;: If you prefer to run the demo without FlashAttention-2 or if you do not specify the &lt;code&gt;--flash-attn2&lt;/code&gt; option, the demo will load the model using the standard attention implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo_mm.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the command, you‚Äôll see a link generated in the terminal similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Running on local: http://127.0.0.1:7860/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy this link and paste it into your browser to access the web UI, where you can interact with the model by inputting text, uploading images, or using any other provided functionalities.&lt;/p&gt; &#xA;&lt;h5&gt;Running the Streaming Video Chat Demo&lt;/h5&gt; &#xA;&lt;p&gt;An experimental streaming video chat demo is also available in the &lt;code&gt;web_demo_streaming&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To run the streaming video chat demo, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web_demo_streaming/&#xA;python app.py --flash-attn2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to run the demo without FlashAttention-2, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web_demo_streaming/&#xA;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This demo supports webcam/screen capture as its video input source. To support screen capture video input, we use code snippet from the following hugginface space: &lt;a href=&#34;https://huggingface.co/spaces/gstaff/gradio-screen-recorder/tree/main&#34;&gt;gstaff/gradio-screen-recorder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using vLLM for fast Qwen2.5-VL deployment and inference. You need to install &lt;code&gt;vllm&amp;gt;0.7.2&lt;/code&gt; to enable Qwen2.5-VL support. You can also use our &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen2.5-VL/main/#-docker&#34;&gt;official docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check &lt;a href=&#34;https://docs.vllm.ai/en/latest/serving/multimodal_inputs.html&#34;&gt;vLLM official documentation&lt;/a&gt; for more details about online serving and offline inference.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/huggingface/transformers@f3f6c86582611976e72be054675e2bf0abb5f775&#xA;pip install accelerate&#xA;pip install qwen-vl-utils&#xA;pip install &#39;vllm&amp;gt;0.7.2&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start an OpenAI API Service&lt;/h3&gt; &#xA;&lt;p&gt;Run the command below to start an OpenAI-compatible API service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vllm serve Qwen/Qwen2.5-VL-7B-Instruct --port 8000 --host 0.0.0.0 --dtype bfloat16 --limit-mm-per-prompt image=5,video=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use the chat API as below (via curl or Python API):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://localhost:8000/v1/chat/completions \&#xA;    -H &#34;Content-Type: application/json&#34; \&#xA;    -d &#39;{&#xA;    &#34;model&#34;: &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;,&#xA;    &#34;messages&#34;: [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: [&#xA;        {&#34;type&#34;: &#34;image_url&#34;, &#34;image_url&#34;: {&#34;url&#34;: &#34;https://modelscope.oss-cn-beijing.aliyuncs.com/resource/qwen.png&#34;}},&#xA;        {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;}&#xA;    ]}&#xA;    ]&#xA;    }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from openai import OpenAI&#xA;&#xA;# Set OpenAI&#39;s API key and API base to use vLLM&#39;s API server.&#xA;openai_api_key = &#34;EMPTY&#34;&#xA;openai_api_base = &#34;http://localhost:8000/v1&#34;&#xA;&#xA;client = OpenAI(&#xA;    api_key=openai_api_key,&#xA;    base_url=openai_api_base,&#xA;)&#xA;&#xA;chat_response = client.chat.completions.create(&#xA;    model=&#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;,&#xA;    messages=[&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;        {&#xA;            &#34;role&#34;: &#34;user&#34;,&#xA;            &#34;content&#34;: [&#xA;                {&#xA;                    &#34;type&#34;: &#34;image_url&#34;,&#xA;                    &#34;image_url&#34;: {&#xA;                        &#34;url&#34;: &#34;https://modelscope.oss-cn-beijing.aliyuncs.com/resource/qwen.png&#34;&#xA;                    },&#xA;                },&#xA;                {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;},&#xA;            ],&#xA;        },&#xA;    ],&#xA;)&#xA;print(&#34;Chat response:&#34;, chat_response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also upload base64-encoded local images (see &lt;a href=&#34;https://platform.openai.com/docs/guides/vision/uploading-base-64-encoded-images&#34;&gt;OpenAI API protocol document&lt;/a&gt; for more details):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import base64&#xA;from openai import OpenAI&#xA;# Set OpenAI&#39;s API key and API base to use vLLM&#39;s API server.&#xA;openai_api_key = &#34;EMPTY&#34;&#xA;openai_api_base = &#34;http://localhost:8000/v1&#34;&#xA;client = OpenAI(&#xA;    api_key=openai_api_key,&#xA;    base_url=openai_api_base,&#xA;)&#xA;image_path = &#34;/path/to/local/image.png&#34;&#xA;with open(image_path, &#34;rb&#34;) as f:&#xA;    encoded_image = base64.b64encode(f.read())&#xA;encoded_image_text = encoded_image.decode(&#34;utf-8&#34;)&#xA;base64_qwen = f&#34;data:image;base64,{encoded_image_text}&#34;&#xA;chat_response = client.chat.completions.create(&#xA;    model=&#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;,&#xA;    messages=[&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;        {&#xA;            &#34;role&#34;: &#34;user&#34;,&#xA;            &#34;content&#34;: [&#xA;                {&#xA;                    &#34;type&#34;: &#34;image_url&#34;,&#xA;                    &#34;image_url&#34;: {&#xA;                        &#34;url&#34;: base64_qwen&#xA;                    },&#xA;                },&#xA;                {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;},&#xA;            ],&#xA;        },&#xA;    ],&#xA;)&#xA;print(&#34;Chat response:&#34;, chat_response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For videos, you can use the chat API as followsÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import base64&#xA;import numpy as np&#xA;from PIL import Image&#xA;from io import BytesIO&#xA;from openai import OpenAI&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;&#xA;# Set OpenAI&#39;s API key and API base to use vLLM&#39;s API server.&#xA;openai_api_key = &#34;EMPTY&#34;&#xA;openai_api_base = &#34;http://localhost:8000/v1&#34;&#xA;&#xA;client = OpenAI(&#xA;    api_key=openai_api_key,&#xA;    base_url=openai_api_base,&#xA;)&#xA;&#xA;&#xA;video_messages = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: [&#xA;        {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;ËØ∑Áî®Ë°®Ê†ºÊÄªÁªì‰∏Ä‰∏ãËßÜÈ¢ë‰∏≠ÁöÑÂïÜÂìÅÁâπÁÇπ&#34;},&#xA;        {&#xA;            &#34;type&#34;: &#34;video&#34;,&#xA;            &#34;video&#34;: &#34;https://duguang-labelling.oss-cn-shanghai.aliyuncs.com/qiansun/video_ocr/videos/50221078283.mp4&#34;,&#xA;            &#34;total_pixels&#34;: 20480 * 28 * 28, &#34;min_pixels&#34;: 16 * 28 * 2, &#xA;            &#39;fps&#39;: 3.0  # The default value is 2.0, but for demonstration purposes, we set it to 3.0.&#xA;        }]&#xA;    },&#xA;]&#xA;&#xA;&#xA;def prepare_message_for_vllm(content_messages):&#xA;    &#34;&#34;&#34;&#xA;    The frame extraction logic for videos in `vLLM` differs from that of `qwen_vl_utils`.&#xA;    Here, we utilize `qwen_vl_utils` to extract video frames, with the `media_typ`e of the video explicitly set to `video/jpeg`.&#xA;    By doing so, vLLM will no longer attempt to extract frames from the input base64-encoded images.&#xA;    &#34;&#34;&#34;&#xA;    vllm_messages, fps_list = [], []&#xA;    for message in content_messages:&#xA;        message_content_list = message[&#34;content&#34;]&#xA;        if not isinstance(message_content_list, list):&#xA;            vllm_messages.append(message)&#xA;            continue&#xA;&#xA;        new_content_list = []&#xA;        for part_message in message_content_list:&#xA;            if &#39;video&#39; in part_message:&#xA;                video_message = [{&#39;content&#39;: [part_message]}]&#xA;                image_inputs, video_inputs, video_kwargs = process_vision_info(video_message, return_video_kwargs=True)&#xA;                assert video_inputs is not None, &#34;video_inputs should not be None&#34;&#xA;                video_input = (video_inputs.pop()).permute(0, 2, 3, 1).numpy().astype(np.uint8)&#xA;                fps_list.extend(video_kwargs.get(&#39;fps&#39;, []))&#xA;&#xA;                # encode image with base64&#xA;                base64_frames = []&#xA;                for frame in video_input:&#xA;                    img = Image.fromarray(frame)&#xA;                    output_buffer = BytesIO()&#xA;                    img.save(output_buffer, format=&#34;jpeg&#34;)&#xA;                    byte_data = output_buffer.getvalue()&#xA;                    base64_str = base64.b64encode(byte_data).decode(&#34;utf-8&#34;)&#xA;                    base64_frames.append(base64_str)&#xA;&#xA;                part_message = {&#xA;                    &#34;type&#34;: &#34;video_url&#34;,&#xA;                    &#34;video_url&#34;: {&#34;url&#34;: f&#34;data:video/jpeg;base64,{&#39;,&#39;.join(base64_frames)}&#34;}&#xA;                }&#xA;            new_content_list.append(part_message)&#xA;        message[&#34;content&#34;] = new_content_list&#xA;        vllm_messages.append(message)&#xA;    return vllm_messages, {&#39;fps&#39;: fps_list}&#xA;&#xA;&#xA;video_messages, video_kwargs = prepare_message_for_vllm(video_messages)&#xA;chat_response = client.chat.completions.create(&#xA;    model=&#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;,&#xA;    messages=video_messages,&#xA;    extra_body={&#xA;        &#34;mm_processor_kwargs&#34;: video_kwargs&#xA;    }&#xA;)&#xA;print(&#34;Chat response:&#34;, chat_response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inference Locally&lt;/h3&gt; &#xA;&lt;p&gt;You can also use vLLM to inference Qwen2.5-VL locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoProcessor&#xA;from vllm import LLM, SamplingParams&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;MODEL_PATH = &#34;Qwen/Qwen2.5-VL-7B-Instruct&#34;&#xA;&#xA;llm = LLM(&#xA;    model=MODEL_PATH,&#xA;    limit_mm_per_prompt={&#34;image&#34;: 10, &#34;video&#34;: 10},&#xA;)&#xA;&#xA;sampling_params = SamplingParams(&#xA;    temperature=0.1,&#xA;    top_p=0.001,&#xA;    repetition_penalty=1.05,&#xA;    max_tokens=256,&#xA;    stop_token_ids=[],&#xA;)&#xA;&#xA;image_messages = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;https://modelscope.oss-cn-beijing.aliyuncs.com/resource/qwen.png&#34;,&#xA;                &#34;min_pixels&#34;: 224 * 224,&#xA;                &#34;max_pixels&#34;: 1280 * 28 * 28,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;},&#xA;        ],&#xA;    },&#xA;]&#xA;&#xA;&#xA;# For video input, you can pass following values instead:&#xA;# &#34;type&#34;: &#34;video&#34;,&#xA;# &#34;video&#34;: &#34;&amp;lt;video URL&amp;gt;&#34;,&#xA;video_messages = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;ËØ∑Áî®Ë°®Ê†ºÊÄªÁªì‰∏Ä‰∏ãËßÜÈ¢ë‰∏≠ÁöÑÂïÜÂìÅÁâπÁÇπ&#34;},&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;, &#xA;                &#34;video&#34;: &#34;https://duguang-labelling.oss-cn-shanghai.aliyuncs.com/qiansun/video_ocr/videos/50221078283.mp4&#34;,&#xA;                &#34;total_pixels&#34;: 20480 * 28 * 28, &#34;min_pixels&#34;: 16 * 28 * 28&#xA;            }&#xA;        ]&#xA;    },&#xA;]&#xA;&#xA;# Here we use video messages as a demonstration&#xA;messages = video_messages&#xA;&#xA;processor = AutoProcessor.from_pretrained(MODEL_PATH)&#xA;prompt = processor.apply_chat_template(&#xA;    messages,&#xA;    tokenize=False,&#xA;    add_generation_prompt=True,&#xA;)&#xA;image_inputs, video_inputs, video_kwargs = process_vision_info(messages, return_video_kwargs=True)&#xA;&#xA;mm_data = {}&#xA;if image_inputs is not None:&#xA;    mm_data[&#34;image&#34;] = image_inputs&#xA;if video_inputs is not None:&#xA;    mm_data[&#34;video&#34;] = video_inputs&#xA;&#xA;llm_inputs = {&#xA;    &#34;prompt&#34;: prompt,&#xA;    &#34;multi_modal_data&#34;: mm_data,&#xA;&#xA;    # FPS will be returned in video_kwargs&#xA;    &#34;mm_processor_kwargs&#34;: video_kwargs,&#xA;}&#xA;&#xA;outputs = llm.generate([llm_inputs], sampling_params=sampling_params)&#xA;generated_text = outputs[0].outputs[0].text&#xA;&#xA;print(generated_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üê≥ Docker&lt;/h2&gt; &#xA;&lt;p&gt;To simplify the deploy process, we provide docker images with pre-build environments: &lt;a href=&#34;https://hub.docker.com/r/qwenllm/qwenvl&#34;&gt;qwenllm/qwenvl&lt;/a&gt;. You only need to install the driver and download model files to launch demos.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --gpus all --ipc=host --network=host --rm --name qwen2.5 -it qwenllm/qwenvl:2.5-cu121 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our paper and code useful in your research, please consider giving a star &lt;span&gt;‚≠ê&lt;/span&gt; and citation &lt;span&gt;üìù&lt;/span&gt; :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;&#xA;@article{Qwen2.5-VL,&#xA;  title={Qwen2.5-VL Technical Report},&#xA;  author={Bai, Shuai and Chen, Keqin and Liu, Xuejing and Wang, Jialin and Ge, Wenbin and Song, Sibo and Dang, Kai and Wang, Peng and Wang, Shijie and Tang, Jun and Zhong, Humen and Zhu, Yuanzhi and Yang, Mingkun and Li, Zhaohai and Wan, Jianqiang and Wang, Pengfei and Ding, Wei and Fu, Zheren and Xu, Yiheng and Ye, Jiabo and Zhang, Xi and Xie, Tianbao and Cheng, Zesen and Zhang, Hang and Yang, Zhibo and Xu, Haiyang and Lin, Junyang},&#xA;  journal={arXiv preprint arXiv:2502.13923},&#xA;  year={2025}&#xA;}&#xA;&#xA;@article{Qwen2-VL,&#xA;  title={Qwen2-VL: Enhancing Vision-Language Model&#39;s Perception of the World at Any Resolution},&#xA;  author={Wang, Peng and Bai, Shuai and Tan, Sinan and Wang, Shijie and Fan, Zhihao and Bai, Jinze and Chen, Keqin and Liu, Xuejing and Wang, Jialin and Ge, Wenbin and Fan, Yang and Dang, Kai and Du, Mengfei and Ren, Xuancheng and Men, Rui and Liu, Dayiheng and Zhou, Chang and Zhou, Jingren and Lin, Junyang},&#xA;  journal={arXiv preprint arXiv:2409.12191},&#xA;  year={2024}&#xA;}&#xA;&#xA;@article{Qwen-VL,&#xA;  title={Qwen-VL: A Versatile Vision-Language Model for Understanding, Localization, Text Reading, and Beyond},&#xA;  author={Bai, Jinze and Bai, Shuai and Yang, Shusheng and Wang, Shijie and Tan, Sinan and Wang, Peng and Lin, Junyang and Zhou, Chang and Zhou, Jingren},&#xA;  journal={arXiv preprint arXiv:2308.12966},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>langchain-ai/open_deep_research</title>
    <updated>2025-03-01T01:56:01Z</updated>
    <id>tag:github.com,2025-03-01:/langchain-ai/open_deep_research</id>
    <link href="https://github.com/langchain-ai/open_deep_research" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Open Deep Research&lt;/h1&gt; &#xA;&lt;p&gt;Open Deep Research is a web research assistant that generates comprehensive reports on any topic following a workflow similar to &lt;a href=&#34;https://openai.com/index/introducing-deep-research/&#34;&gt;OpenAI&lt;/a&gt; and &lt;a href=&#34;https://blog.google/products/gemini/google-gemini-deep-research/&#34;&gt;Gemini&lt;/a&gt; Deep Research. However, it allows you to customize the models, prompts, report structure, search API, and research depth. Specifically, you can customize:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provide an outline with a desired report structure&lt;/li&gt; &#xA; &lt;li&gt;set the planner model (e.g., DeepSeek, OpenAI reasoning model, etc)&lt;/li&gt; &#xA; &lt;li&gt;give feedback on the plan of report sections and iterate until user approval&lt;/li&gt; &#xA; &lt;li&gt;set the search API (e.g., Tavily, Perplexity) and # of searches to run for each research iteration&lt;/li&gt; &#xA; &lt;li&gt;set the depth of search for each section (# of iterations of writing, reflection, search, re-write)&lt;/li&gt; &#xA; &lt;li&gt;customize the writer model (e.g., Anthropic)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/6595d5cd-c981-43ec-8e8b-209e4fefc596&#34; alt=&#34;report-generation&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you have API keys set for your desired tools.&lt;/p&gt; &#xA;&lt;p&gt;Select a web search tool (by default Open Deep Research uses Tavily):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily API&lt;/a&gt; - General web search&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.perplexity.ai/hub/blog/introducing-the-sonar-pro-api&#34;&gt;Perplexity API&lt;/a&gt; - General web search&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exa.ai/&#34;&gt;Exa API&lt;/a&gt; - Powerful neural search for web content&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/&#34;&gt;ArXiv&lt;/a&gt; - Academic papers in physics, mathematics, computer science, and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/&#34;&gt;PubMed&lt;/a&gt; - Biomedical literature from MEDLINE, life science journals, and online books&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkup.so/&#34;&gt;Linkup API&lt;/a&gt; - General web search&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Select a writer model (by default Open Deep Research uses Anthropic Claude 3.5 Sonnet):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anthropic.com/&#34;&gt;Anthropic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Select a planner model (by default Open Deep Research uses Claude 3.7 Sonnet with thinking enabled):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.anthropic.com/&#34;&gt;Anthropic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openai.com/&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groq.com/&#34;&gt;Groq&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using the package&lt;/h3&gt; &#xA;&lt;p&gt;(Recommended: Create a virtual environment):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv open_deep_research&#xA;source open_deep_research/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install open-deep-research&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure API keys are set for web search and planner / writer models, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export TAVILY_API_KEY=&amp;lt;your_tavily_api_key&amp;gt;&#xA;export ANTHROPIC_API_KEY=&amp;lt;your_anthropic_api_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/open_deep_research/main/src/open_deep_research/graph.ipynb&#34;&gt;src/open_deep_research/graph.ipynb&lt;/a&gt; for an example of usage in a Jupyter notebook.&lt;/p&gt; &#xA;&lt;p&gt;Import and compile the graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langgraph.checkpoint.memory import MemorySaver&#xA;from open_deep_research.graph import builder&#xA;memory = MemorySaver()&#xA;graph = builder.compile(checkpointer=memory)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View the graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.display import Image, display&#xA;display(Image(graph.get_graph(xray=1).draw_mermaid_png()))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the graph with a desired topic and configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import uuid &#xA;thread = {&#34;configurable&#34;: {&#34;thread_id&#34;: str(uuid.uuid4()),&#xA;                           &#34;search_api&#34;: &#34;tavily&#34;,&#xA;                           &#34;planner_provider&#34;: &#34;openai&#34;,&#xA;                           &#34;planner_model&#34;: &#34;claude-3-7-sonnet-latest&#34;,&#xA;                           &#34;writer_provider&#34;: &#34;anthropic&#34;,&#xA;                           &#34;writer_model&#34;: &#34;claude-3-5-sonnet-latest&#34;,&#xA;                           &#34;max_search_depth&#34;: 1,&#xA;                           }}&#xA;&#xA;topic = &#34;Overview of the AI inference market with focus on Fireworks, Together.ai, Groq&#34;&#xA;async for event in graph.astream({&#34;topic&#34;:topic,}, thread, stream_mode=&#34;updates&#34;):&#xA;    print(event)&#xA;    print(&#34;\n&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The graph will stop when the report plan is generated, and you can pass feedback to update the report plan:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langgraph.types import Command&#xA;async for event in graph.astream(Command(resume=&#34;Include a revenue estimate (ARR) in the sections&#34;), thread, stream_mode=&#34;updates&#34;):&#xA;    print(event)&#xA;    print(&#34;\n&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you are satisfied with the report plan, you can pass &lt;code&gt;True&lt;/code&gt; to proceed to report generation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pass True to approve the report plan and proceed to report generation&#xA;async for event in graph.astream(Command(resume=True), thread, stream_mode=&#34;updates&#34;):&#xA;    print(event)&#xA;    print(&#34;\n&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running LangGraph Studio UI locally&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/langchain-ai/open_deep_research.git&#xA;cd open_deep_research&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;.env&lt;/code&gt; file with your API keys (e.g., the API keys for default selections are shown below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set whatever APIs needed for your model and search tool choices&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export TAVILY_API_KEY=&amp;lt;your_tavily_api_key&amp;gt;&#xA;export ANTHROPIC_API_KEY=&amp;lt;your_anthropic_api_key&amp;gt;&#xA;export OPENAI_API_KEY=&amp;lt;your_openai_api_key&amp;gt;&#xA;export PERPLEXITY_API_KEY=&amp;lt;your_perplexity_api_key&amp;gt;&#xA;export EXA_API_KEY=&amp;lt;your_exa_api_key&amp;gt;&#xA;export PUBMED_API_KEY=&amp;lt;your_pubmed_api_key&amp;gt;&#xA;export PUBMED_EMAIL=&amp;lt;your_email@example.com&amp;gt;&#xA;export LINKUP_API_KEY=&amp;lt;your_linkup_api_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch the assistant with the LangGraph server locally, which will open in your browser:&lt;/p&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install uv package manager&#xA;curl -LsSf https://astral.sh/uv/install.sh | sh&#xA;&#xA;# Install dependencies and start the LangGraph server&#xA;uvx --refresh --from &#34;langgraph-cli[inmem]&#34; --with-editable . --python 3.11 langgraph dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Install dependencies &#xA;pip install -e .&#xA;pip install langgraph-cli[inmem]&#xA;&#xA;# Start the LangGraph server&#xA;langgraph dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use this to open the Studio UI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- üöÄ API: http://127.0.0.1:2024&#xA;- üé® Studio UI: https://smith.langchain.com/studio/?baseUrl=http://127.0.0.1:2024&#xA;- üìö API Docs: http://127.0.0.1:2024/docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(1) Provide a &lt;code&gt;Topic&lt;/code&gt; and hit &lt;code&gt;Submit&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;img width=&#34;1326&#34; alt=&#34;input&#34; src=&#34;https://github.com/user-attachments/assets/de264b1b-8ea5-4090-8e72-e1ef1230262f&#34;&gt; &#xA;&lt;p&gt;(2) This will generate a report plan and present it to the user for review.&lt;/p&gt; &#xA;&lt;p&gt;(3) We can pass a string (&lt;code&gt;&#34;...&#34;&lt;/code&gt;) with feedback to regenerate the plan based on the feedback.&lt;/p&gt; &#xA;&lt;img width=&#34;1326&#34; alt=&#34;feedback&#34; src=&#34;https://github.com/user-attachments/assets/c308e888-4642-4c74-bc78-76576a2da919&#34;&gt; &#xA;&lt;p&gt;(4) Or, we can just pass &lt;code&gt;true&lt;/code&gt; to accept the plan.&lt;/p&gt; &#xA;&lt;img width=&#34;1480&#34; alt=&#34;accept&#34; src=&#34;https://github.com/user-attachments/assets/ddeeb33b-fdce-494f-af8b-bd2acc1cef06&#34;&gt; &#xA;&lt;p&gt;(5) Once accepted, the report sections will be generated.&lt;/p&gt; &#xA;&lt;img width=&#34;1326&#34; alt=&#34;report_gen&#34; src=&#34;https://github.com/user-attachments/assets/74ff01cc-e7ed-47b8-bd0c-4ef615253c46&#34;&gt; &#xA;&lt;p&gt;The report is produced as markdown.&lt;/p&gt; &#xA;&lt;img width=&#34;1326&#34; alt=&#34;report&#34; src=&#34;https://github.com/user-attachments/assets/92d9f7b7-3aea-4025-be99-7fb0d4b47289&#34;&gt; &#xA;&lt;h2&gt;üìñ Customizing the report&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the research assistant&#39;s behavior through several parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;report_structure&lt;/code&gt;: Define a custom structure for your report (defaults to a standard research report format)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;number_of_queries&lt;/code&gt;: Number of search queries to generate per section (default: 2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_search_depth&lt;/code&gt;: Maximum number of reflection and search iterations (default: 2)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;planner_provider&lt;/code&gt;: Model provider for planning phase (default: &#34;openai&#34;, but can be &#34;groq&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;planner_model&lt;/code&gt;: Specific model for planning (default: &#34;o3-mini&#34;, but can be any Groq hosted model such as &#34;deepseek-r1-distill-llama-70b&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;writer_model&lt;/code&gt;: Model for writing the report (default: &#34;claude-3-5-sonnet-latest&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;search_api&lt;/code&gt;: API to use for web searches (default: &#34;tavily&#34;, options include &#34;perplexity&#34;, &#34;exa&#34;, &#34;arxiv&#34;, &#34;pubmed&#34;, &#34;linkup&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These configurations allow you to fine-tune the research process based on your needs, from adjusting the depth of research to selecting specific AI models for different phases of report generation.&lt;/p&gt; &#xA;&lt;h3&gt;Search API Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Not all search APIs support additional configuration parameters. Here are the ones that do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exa&lt;/strong&gt;: &lt;code&gt;max_characters&lt;/code&gt;, &lt;code&gt;num_results&lt;/code&gt;, &lt;code&gt;include_domains&lt;/code&gt;, &lt;code&gt;exclude_domains&lt;/code&gt;, &lt;code&gt;subpages&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note: &lt;code&gt;include_domains&lt;/code&gt; and &lt;code&gt;exclude_domains&lt;/code&gt; cannot be used together&lt;/li&gt; &#xA;   &lt;li&gt;Particularly useful when you need to narrow your research to specific trusted sources, ensure information accuracy, or when your research requires using specified domains (e.g., academic journals, government sites)&lt;/li&gt; &#xA;   &lt;li&gt;Provides AI-generated summaries tailored to your specific query, making it easier to extract relevant information from search results&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ArXiv&lt;/strong&gt;: &lt;code&gt;load_max_docs&lt;/code&gt;, &lt;code&gt;get_full_documents&lt;/code&gt;, &lt;code&gt;load_all_available_meta&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PubMed&lt;/strong&gt;: &lt;code&gt;top_k_results&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;api_key&lt;/code&gt;, &lt;code&gt;doc_content_chars_max&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linkup&lt;/strong&gt;: &lt;code&gt;depth&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example with Exa configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;thread = {&#34;configurable&#34;: {&#34;thread_id&#34;: str(uuid.uuid4()),&#xA;                           &#34;search_api&#34;: &#34;exa&#34;,&#xA;                           &#34;search_api_config&#34;: {&#xA;                               &#34;num_results&#34;: 5,&#xA;                               &#34;include_domains&#34;: [&#34;nature.com&#34;, &#34;sciencedirect.com&#34;]&#xA;                           },&#xA;                           # Other configuration...&#xA;                           }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model Considerations&lt;/h3&gt; &#xA;&lt;p&gt;(1) With Groq, there are token per minute (TPM) limits if you are on the &lt;code&gt;on_demand&lt;/code&gt; service tier:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;on_demand&lt;/code&gt; service tier has a limit of &lt;code&gt;6000 TPM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You will want a &lt;a href=&#34;https://github.com/cline/cline/issues/47#issuecomment-2640992272&#34;&gt;paid plan&lt;/a&gt; for section writing with Groq models&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(2) &lt;code&gt;deepseek&lt;/code&gt; &lt;a href=&#34;https://api-docs.deepseek.com/guides/reasoning_model&#34;&gt;isn&#39;t great at function calling&lt;/a&gt;. Our assistant uses function calling to generate structured outputs for report sections and search queries within each section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Because, section writing performs a larger number of function calls, OpenAI, Anthropic, and certain OSS models that are stromng at function calling like Groq&#39;s &lt;code&gt;llama-3.3-70b-versatile&lt;/code&gt; are advised.&lt;/li&gt; &#xA; &lt;li&gt;If you see the following error, it is likely due to the model not being able to produce structured outputs (see &lt;a href=&#34;https://smith.langchain.com/public/8a6da065-3b8b-4a92-8df7-5468da336cbe/r&#34;&gt;trace&lt;/a&gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;groq.APIError: Failed to call a function. Please adjust your prompt. See &#39;failed_generation&#39; for more details.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Plan and Execute&lt;/code&gt; - Open Deep Research follows a &lt;a href=&#34;https://github.com/assafelovic/gpt-researcher&#34;&gt;plan-and-execute workflow&lt;/a&gt; that separates planning from research, allowing for human-in-the-loop approval of a report plan before the more time-consuming research phase. It uses, by default, a &lt;a href=&#34;https://www.youtube.com/watch?v=f0RbwrBcFmc&#34;&gt;reasoning model&lt;/a&gt; to plan the report sections. During this phase, it uses web search to gather general information about the report topic to help in planning the report sections. But, it also accepts a report structure from the user to help guide the report sections as well as human feedback on the report plan.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Research and Write&lt;/code&gt; - Each section of the report is written in parallel. The research assistant uses web search via &lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily API&lt;/a&gt;, &lt;a href=&#34;https://www.perplexity.ai/hub/blog/introducing-the-sonar-pro-api&#34;&gt;Perplexity&lt;/a&gt;, &lt;a href=&#34;https://exa.ai/&#34;&gt;Exa&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/&#34;&gt;ArXiv&lt;/a&gt;, &lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/&#34;&gt;PubMed&lt;/a&gt; or &lt;a href=&#34;https://www.linkup.so/&#34;&gt;Linkup&lt;/a&gt; to gather information about each section topic. It will reflect on each report section and suggest follow-up questions for web search. This &#34;depth&#34; of research will proceed for any many iterations as the user wants. Any final sections, such as introductions and conclusions, are written after the main body of the report is written, which helps ensure that the report is cohesive and coherent. The planner determines main body versus final sections during the planning phase.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Managing different types&lt;/code&gt; - Open Deep Research is built on LangGraph, which has native support for configuration management &lt;a href=&#34;https://langchain-ai.github.io/langgraph/concepts/assistants/&#34;&gt;using assistants&lt;/a&gt;. The report &lt;code&gt;structure&lt;/code&gt; is a field in the graph configuration, which allows users to create different assistants for different types of reports.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;UX&lt;/h2&gt; &#xA;&lt;h3&gt;Local deployment&lt;/h3&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/open_deep_research/main/#-quickstart&#34;&gt;quickstart&lt;/a&gt; to start LangGraph server locally.&lt;/p&gt; &#xA;&lt;h3&gt;Hosted deployment&lt;/h3&gt; &#xA;&lt;p&gt;You can easily deploy to &lt;a href=&#34;https://langchain-ai.github.io/langgraph/concepts/#deployment-options&#34;&gt;LangGraph Platform&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AI4Finance-Foundation/FinRL</title>
    <updated>2025-03-01T01:56:01Z</updated>
    <id>tag:github.com,2025-03-01:/AI4Finance-Foundation/FinRL</id>
    <link href="https://github.com/AI4Finance-Foundation/FinRL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FinRL: Financial Reinforcement Learning. üî•&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img align=&#34;center&#34; width=&#34;30%&#34; alt=&#34;image&#34; src=&#34;https://github.com/AI4Finance-Foundation/FinGPT/assets/31713746/e0371951-1ce1-488e-aa25-0992dafcc139&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;FinRL: Financial Reinforcement Learning &lt;a href=&#34;https://twitter.com/intent/tweet?text=FinRL-Financial-Deep-Reinforcement-Learning%20&amp;amp;url=https://github.com/AI4Finance-Foundation/FinRL&amp;amp;hashtags=DRL&amp;amp;hashtags=AI&#34;&gt;&lt;img src=&#34;http://www.tensorlet.org/wp-content/uploads/2021/01/button_twitter_22x22.png&#34; alt=&#34;twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.facebook.com/sharer.php?u=http%3A%2F%2Fgithub.com%2FAI4Finance-Foundation%2FFinRL&#34;&gt;&lt;img src=&#34;http://www.tensorlet.org/wp-content/uploads/2021/01/facebook-button_22x22.png&#34; alt=&#34;facebook&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plus.google.com/share?url=https://github.com/AI4Finance-Foundation/FinRL&#34;&gt;&lt;img src=&#34;http://www.tensorlet.org/wp-content/uploads/2021/01/button_google_22.xx_.png&#34; alt=&#34;google+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/sharing/share-offsite/?url=http%3A%2F%2Fgithub.com%2FAI4Finance-Foundation%2FFinRL&#34;&gt;&lt;img src=&#34;http://www.tensorlet.org/wp-content/uploads/2021/01/button_linkedin_22x22.png&#34; alt=&#34;linkedin&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/figs/logo_transparent_background.png&#34; width=&#34;55%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pepy.tech/project/finrl&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/finrl&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/finrl&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/finrl/week&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/release/python-360/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.6-blue.svg?sanitize=true&#34; alt=&#34;Python 3.6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/finrl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/finrl.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://finrl.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/finrl/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/AI4Finance-Foundation/finrl.svg?color=brightgreen&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-raw/AI4Finance-Foundation/finrl?label=Issues&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-closed-raw/AI4Finance-Foundation/finrl?label=Closed+Issues&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr-raw/AI4Finance-Foundation/finrl?label=Open+PRs&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr-closed-raw/AI4Finance-Foundation/finrl?label=Closed+PRs&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AI4Finance-Foundation/ChatGPT-for-FinTech&#34;&gt;FinGPT&lt;/a&gt;: Open-source for open-finance! Revolutionize FinTech.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/trsr8SXpW5&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/trsr8SXpW5&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://api.visitorbadge.io/api/VisitorHit?user=AI4Finance-Foundation&amp;amp;repo=FinRL&amp;amp;countColor=%23B17A&#34; alt=&#34;Visitors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Financial reinforcement learning (FinRL)&lt;/strong&gt; (&lt;a href=&#34;https://finrl.readthedocs.io/en/latest/index.html&#34;&gt;Document website&lt;/a&gt;) is &lt;strong&gt;the first open-source framework&lt;/strong&gt; for financial reinforcement learning. FinRL has evolved into an &lt;strong&gt;ecosystem&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dev Roadmap&lt;/th&gt; &#xA;   &lt;th&gt;Stage&lt;/th&gt; &#xA;   &lt;th&gt;Users&lt;/th&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.0 (Preparation)&lt;/td&gt; &#xA;   &lt;td&gt;entrance&lt;/td&gt; &#xA;   &lt;td&gt;practitioners&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL-Meta&#34;&gt;FinRL-Meta&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;gym-style market environments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.0 (Proof-of-Concept)&lt;/td&gt; &#xA;   &lt;td&gt;full-stack&lt;/td&gt; &#xA;   &lt;td&gt;developers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL&#34;&gt;this repo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;automatic pipeline&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.0 (Professional)&lt;/td&gt; &#xA;   &lt;td&gt;profession&lt;/td&gt; &#xA;   &lt;td&gt;experts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AI4Finance-Foundation/ElegantRL&#34;&gt;ElegantRL&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;algorithms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3.0 (Production)&lt;/td&gt; &#xA;   &lt;td&gt;service&lt;/td&gt; &#xA;   &lt;td&gt;hedge funds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL_Podracer&#34;&gt;Podracer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;cloud-native deployment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Outline&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#file-structure&#34;&gt;File Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#supported-data-sources&#34;&gt;Supported Data Sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#status-update&#34;&gt;Status Update&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#publications&#34;&gt;Publications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#news&#34;&gt;News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#citing-finrl&#34;&gt;Citing FinRL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#join-and-contribute&#34;&gt;Join and Contribute&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#sponsorship&#34;&gt;Sponsorship&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/#license&#34;&gt;LICENSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;FinRL has three layers: market environments, agents, and applications. For a trading task (on the top), an agent (in the middle) interacts with a market environment (at the bottom), making sequential decisions.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/figs/finrl_framework.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;A quick start: Stock_NeurIPS2018.ipynb. Videos &lt;a href=&#34;http://www.youtube.com/watch?v=ZSGJjtM-5jA&#34;&gt;FinRL&lt;/a&gt; at &lt;a href=&#34;https://www.youtube.com/channel/UCrVri6k3KPBa3NhapVV4K5g&#34;&gt;AI4Finance Youtube Channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;File Structure&lt;/h2&gt; &#xA;&lt;p&gt;The main folder &lt;strong&gt;finrl&lt;/strong&gt; has three subfolders &lt;strong&gt;applications, agents, meta&lt;/strong&gt;. We employ a &lt;strong&gt;train-test-trade&lt;/strong&gt; pipeline with three files: train.py, test.py, and trade.py.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FinRL&#xA;‚îú‚îÄ‚îÄ finrl (main folder)&#xA;‚îÇ   ‚îú‚îÄ‚îÄ applications&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ Stock_NeurIPS2018&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ imitation_learning&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ cryptocurrency_trading&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ high_frequency_trading&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ portfolio_allocation&#xA;‚îÇ   &#x9;‚îî‚îÄ‚îÄ stock_trading&#xA;‚îÇ   ‚îú‚îÄ‚îÄ agents&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ elegantrl&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ rllib&#xA;‚îÇ   &#x9;‚îî‚îÄ‚îÄ stablebaseline3&#xA;‚îÇ   ‚îú‚îÄ‚îÄ meta&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ data_processors&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ env_cryptocurrency_trading&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ env_portfolio_allocation&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ env_stock_trading&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ preprocessor&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ data_processor.py&#xA;‚îÇ       ‚îú‚îÄ‚îÄ meta_config_tickers.py&#xA;‚îÇ   &#x9;‚îî‚îÄ‚îÄ meta_config.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ config.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ config_tickers.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ main.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ plot.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ train.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ test.py&#xA;‚îÇ   ‚îî‚îÄ‚îÄ trade.py&#xA;‚îÇ&#xA;‚îú‚îÄ‚îÄ examples&#xA;‚îú‚îÄ‚îÄ unit_tests (unit tests to verify codes on env &amp;amp; data)&#xA;‚îÇ   ‚îú‚îÄ‚îÄ environments&#xA;‚îÇ   &#x9;‚îî‚îÄ‚îÄ test_env_cashpenalty.py&#xA;‚îÇ   ‚îî‚îÄ‚îÄ downloaders&#xA;‚îÇ   &#x9;‚îú‚îÄ‚îÄ test_yahoodownload.py&#xA;‚îÇ   &#x9;‚îî‚îÄ‚îÄ test_alpaca_downloader.py&#xA;‚îú‚îÄ‚îÄ setup.py&#xA;‚îú‚îÄ‚îÄ requirements.txt&#xA;‚îî‚îÄ‚îÄ README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Data Sources&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Data Source&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Range and Frequency&lt;/th&gt; &#xA;   &lt;th&gt;Request Limits&lt;/th&gt; &#xA;   &lt;th&gt;Raw Data&lt;/th&gt; &#xA;   &lt;th&gt;Preprocessed Data&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpaca.markets/docs/introduction/&#34;&gt;Akshare&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CN Securities&lt;/td&gt; &#xA;   &lt;td&gt;2015-now, 1day&lt;/td&gt; &#xA;   &lt;td&gt;Account-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://alpaca.markets/docs/introduction/&#34;&gt;Alpaca&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;US Stocks, ETFs&lt;/td&gt; &#xA;   &lt;td&gt;2015-now, 1min&lt;/td&gt; &#xA;   &lt;td&gt;Account-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://baostock.com/baostock/index.php/Python_API%E6%96%87%E6%A1%A3&#34;&gt;Baostock&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CN Securities&lt;/td&gt; &#xA;   &lt;td&gt;1990-12-19-now, 5min&lt;/td&gt; &#xA;   &lt;td&gt;Account-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://binance-docs.github.io/apidocs/spot/en/#public-api-definitions&#34;&gt;Binance&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cryptocurrency&lt;/td&gt; &#xA;   &lt;td&gt;API-specific, 1s, 1min&lt;/td&gt; &#xA;   &lt;td&gt;API-specific&lt;/td&gt; &#xA;   &lt;td&gt;Tick-level daily aggegrated trades, OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ccxt.com/en/latest/manual.html&#34;&gt;CCXT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cryptocurrency&lt;/td&gt; &#xA;   &lt;td&gt;API-specific, 1min&lt;/td&gt; &#xA;   &lt;td&gt;API-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eodhistoricaldata.com/financial-apis/&#34;&gt;EODhistoricaldata&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;US Securities&lt;/td&gt; &#xA;   &lt;td&gt;Frequency-specific, 1min&lt;/td&gt; &#xA;   &lt;td&gt;API-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iexcloud.io/docs/api/&#34;&gt;IEXCloud&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NMS US securities&lt;/td&gt; &#xA;   &lt;td&gt;1970-now, 1 day&lt;/td&gt; &#xA;   &lt;td&gt;100 per second per IP&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.joinquant.com/&#34;&gt;JoinQuant&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CN Securities&lt;/td&gt; &#xA;   &lt;td&gt;2005-now, 1min&lt;/td&gt; &#xA;   &lt;td&gt;3 requests each time&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.quantconnect.com/docs/home/home&#34;&gt;QuantConnect&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;US Securities&lt;/td&gt; &#xA;   &lt;td&gt;1998-now, 1s&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ricequant.com/doc/rqdata/python/&#34;&gt;RiceQuant&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CN Securities&lt;/td&gt; &#xA;   &lt;td&gt;2005-now, 1ms&lt;/td&gt; &#xA;   &lt;td&gt;Account-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sinotrade.github.io/zh_TW/tutor/prepare/terms/&#34;&gt;Sinopac&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Taiwan securities&lt;/td&gt; &#xA;   &lt;td&gt;2023-04-13~now, 1min&lt;/td&gt; &#xA;   &lt;td&gt;Account-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://tushare.pro/document/1?doc_id=131&#34;&gt;Tushare&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CN Securities, A share&lt;/td&gt; &#xA;   &lt;td&gt;-now, 1 min&lt;/td&gt; &#xA;   &lt;td&gt;Account-specific&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wrds-www.wharton.upenn.edu/pages/about/data-vendors/nyse-trade-and-quote-taq/&#34;&gt;WRDS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;US Securities&lt;/td&gt; &#xA;   &lt;td&gt;2003-now, 1ms&lt;/td&gt; &#xA;   &lt;td&gt;5 requests each time&lt;/td&gt; &#xA;   &lt;td&gt;Intraday Trades&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/yfinance/&#34;&gt;YahooFinance&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;US Securities&lt;/td&gt; &#xA;   &lt;td&gt;Frequency-specific, 1min&lt;/td&gt; &#xA;   &lt;td&gt;2,000/hour&lt;/td&gt; &#xA;   &lt;td&gt;OHLCV&lt;/td&gt; &#xA;   &lt;td&gt;Prices&amp;amp;Indicators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- |Data Source |Type |Max Frequency |Raw Data|Preprocessed Data|&#xA;|  ----  |  ----  |  ----  |  ----  |  ----  |&#xA;|    AkShare |  CN Securities | 1 day  |  OHLCV |  Prices, indicators |&#xA;|    Alpaca |  US Stocks, ETFs |  1 min |  OHLCV |  Prices, indicators |&#xA;|    Alpha Vantage | Stock, ETF, forex, crypto, technical indicators | 1 min |  OHLCV  &amp; Prices, indicators |&#xA;|    Baostock |  CN Securities |  5 min |  OHLCV |  Prices, indicators |&#xA;|    Binance |  Cryptocurrency |  1 s |  OHLCV |  Prices, indicators |&#xA;|    CCXT |  Cryptocurrency |  1 min  |  OHLCV |  Prices, indicators |&#xA;|    currencyapi |  Exchange rate | 1 day |  Exchange rate | Exchange rate, indicators |&#xA;|    currencylayer |  Exchange rate | 1 day  |  Exchange rate | Exchange rate, indicators |&#xA;|    EOD Historical Data | US stocks, and ETFs |  1 day  |  OHLCV  | Prices, indicators |&#xA;|    Exchangerates |  Exchange rate |  1 day  |  Exchange rate | Exchange rate, indicators |&#xA;|    findatapy |  CN Securities | 1 day  |  OHLCV |  Prices, indicators |&#xA;|    Financial Modeling prep | US stocks, currencies, crypto |  1 min |  OHLCV  | Prices, indicators |&#xA;|    finnhub | US Stocks, currencies, crypto |   1 day |  OHLCV  | Prices, indicators |&#xA;|    Fixer |  Exchange rate |  1 day  |  Exchange rate | Exchange rate, indicators |&#xA;|    IEXCloud |  NMS US securities | 1 day  | OHLCV |  Prices, indicators |&#xA;|    JoinQuant |  CN Securities |  1 min  |  OHLCV |  Prices, indicators |&#xA;|    Marketstack | 50+ countries |  1 day  |  OHLCV | Prices, indicators |&#xA;|    Open Exchange Rates |  Exchange rate |  1 day  |  Exchange rate | Exchange rate, indicators |&#xA;|    pandas\_datareader |  US Securities |  1 day |  OHLCV | Prices, indicators |&#xA;|    pandas-finance |  US Securities |  1 day  |  OHLCV  &amp; Prices, indicators |&#xA;|    Polygon |  US Securities |  1 day  |  OHLCV  | Prices, indicators |&#xA;|    Quandl | 250+ sources |  1 day  |  OHLCV  | Prices, indicators |&#xA;|    QuantConnect |  US Securities |  1 s |  OHLCV |  Prices, indicators |&#xA;|    RiceQuant |  CN Securities |  1 ms  |  OHLCV |  Prices, indicators |&#xA;|    Sinopac   | Taiwan securities | 1min | OHLCV |  Prices, indicators |&#xA;|    Tiingo | Stocks, crypto |  1 day  |  OHLCV  | Prices, indicators |&#xA;|    Tushare |  CN Securities | 1 min  |  OHLCV |  Prices, indicators |&#xA;|    WRDS |  US Securities |  1 ms  |  Intraday Trades | Prices, indicators |&#xA;|    XE |  Exchange rate |  1 day  |  Exchange rate | Exchange rate, indicators |&#xA;|    Xignite |  Exchange rate |  1 day  |  Exchange rate | Exchange rate, indicators |&#xA;|    YahooFinance |  US Securities | 1 min  |  OHLCV  |  Prices, indicators |&#xA;|    ystockquote |  US Securities |  1 day  |  OHLCV | Prices, indicators | --&gt; &#xA;&lt;p&gt;OHLCV: open, high, low, and close prices; volume. adjusted_close: adjusted close price&lt;/p&gt; &#xA;&lt;p&gt;Technical indicators: &#39;macd&#39;, &#39;boll_ub&#39;, &#39;boll_lb&#39;, &#39;rsi_30&#39;, &#39;dx_30&#39;, &#39;close_30_sma&#39;, &#39;close_60_sma&#39;. Users also can add new features.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AI4Finance-Foundation/FinRL/master/docs/source/start/installation.rst&#34;&gt;Install description for all operating systems (MAC OS, Ubuntu, Windows 10)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai4finance.medium.com/finrl-for-quantitative-finance-install-and-setup-tutorial-for-beginners-1db80ad39159&#34;&gt;FinRL for Quantitative Finance: Install and Setup Tutorial for Beginners&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status Update&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Version History&lt;/b&gt; &lt;i&gt;[click to expand]&lt;/i&gt;&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2022-06-25 0.3.5: Formal release of FinRL, neo_finrl is chenged to FinRL-Meta with related files in directory: &lt;em&gt;meta&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;2021-08-25 0.3.1: pytorch version with a three-layer architecture, apps (financial tasks), drl_agents (drl algorithms), neo_finrl (gym env)&lt;/li&gt; &#xA;   &lt;li&gt;2020-12-14 Upgraded to &lt;strong&gt;Pytorch&lt;/strong&gt; with stable-baselines3; Remove tensorflow 1.0 at this moment, under development to support tensorflow 2.0&lt;/li&gt; &#xA;   &lt;li&gt;2020-11-27 0.1: Beta version with tensorflow 1.5&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[Towardsdatascience] &lt;a href=&#34;https://towardsdatascience.com/deep-reinforcement-learning-for-automated-stock-trading-f1dad0126a02&#34;&gt;Deep Reinforcement Learning for Automated Stock Trading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Title&lt;/th&gt; &#xA;   &lt;th&gt;Conference/Journal&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Citations&lt;/th&gt; &#xA;   &lt;th&gt;Year&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Datasets and Market Environments for Financial Reinforcement Learning&lt;/td&gt; &#xA;   &lt;td&gt;Machine Learning - Springer Nature&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2304.13174&#34;&gt;paper&lt;/a&gt; &lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL-Meta&#34;&gt;code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;2024&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;FinRL-Meta&lt;/strong&gt;: FinRL-Meta: Market Environments and Benchmarks for Data-Driven Financial Reinforcement Learning&lt;/td&gt; &#xA;   &lt;td&gt;NeurIPS 2022&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2211.03107&#34;&gt;paper&lt;/a&gt; &lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL-Meta&#34;&gt;code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;37&lt;/td&gt; &#xA;   &lt;td&gt;2022&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;FinRL&lt;/strong&gt;: Deep reinforcement learning framework to automate trading in quantitative finance&lt;/td&gt; &#xA;   &lt;td&gt;ACM International Conference on AI in Finance (ICAIF)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3955949&#34;&gt;paper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;49&lt;/td&gt; &#xA;   &lt;td&gt;2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;FinRL&lt;/strong&gt;: A deep reinforcement learning library for automated stock trading in quantitative finance&lt;/td&gt; &#xA;   &lt;td&gt;NeurIPS 2020 Deep RL Workshop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/2011.09607&#34;&gt;paper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;87&lt;/td&gt; &#xA;   &lt;td&gt;2020&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deep reinforcement learning for automated stock trading: An ensemble strategy&lt;/td&gt; &#xA;   &lt;td&gt;ACM International Conference on AI in Finance (ICAIF)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3690996&#34;&gt;paper&lt;/a&gt; &lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL-Meta/raw/master/tutorials/2-Advance/FinRL_Ensemble_StockTrading_ICAIF_2020/FinRL_Ensemble_StockTrading_ICAIF_2020.ipynb&#34;&gt;code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;154&lt;/td&gt; &#xA;   &lt;td&gt;2020&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Practical deep reinforcement learning approach for stock trading&lt;/td&gt; &#xA;   &lt;td&gt;NeurIPS 2018 Workshop on Challenges and Opportunities for AI in Financial Services&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://arxiv.org/abs/1811.07522&#34;&gt;paper&lt;/a&gt; &lt;a href=&#34;https://github.com/AI4Finance-Foundation/DQN-DDPG_Stock_Trading%5D(https://github.com/AI4Finance-Foundation/FinRL/tree/master/examples)&#34;&gt;code&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;164&lt;/td&gt; &#xA;   &lt;td&gt;2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[Â§ÆÂπøÁΩë] &lt;a href=&#34;http://tech.cnr.cn/techph/20211123/t20211123_525669092.shtml&#34;&gt;2021 IDEAÂ§ß‰ºö‰∫éÁ¶èÁî∞ÂúÜÊª°ËêΩÂπïÔºöÁæ§Ëã±ËçüËêÉËÆ∫ÈÅìAI Â§öÈ°πÁõÆÂèëÂ∏É‰∫ÆÁÇπÁ∫∑Âëà&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Â§ÆÂπøÁΩë] &lt;a href=&#34;https://baijiahao.baidu.com/s?id=1717101783873523790&amp;amp;wfr=spider&amp;amp;for=pc&#34;&gt;2021 IDEAÂ§ß‰ºöÂºÄÂêØAIÊÄùÊÉ≥ÁõõÂÆ¥ Ê≤àÂêëÊ¥ãÁêÜ‰∫ãÈïøÂèëÂ∏ÉÂÖ≠Â§ßÂâçÊ≤ø‰∫ßÂìÅ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[IDEAÊñ∞Èóª] &lt;a href=&#34;https://idea.edu.cn/news/20211213143128.html&#34;&gt;2021 IDEAÂ§ß‰ºöÂèëÂ∏É‰∫ßÂìÅFinRL-Meta‚Äî‚ÄîÂü∫‰∫éÊï∞ÊçÆÈ©±Âä®ÁöÑÂº∫ÂåñÂ≠¶‰π†ÈáëËûçÈ£éÈô©Ê®°ÊãüÁ≥ªÁªü&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Áü•‰πé] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/437804814&#34;&gt;FinRL-MetaÂü∫‰∫éÊï∞ÊçÆÈ©±Âä®ÁöÑÂº∫ÂåñÂ≠¶‰π†ÈáëËûçÂÖÉÂÆáÂÆô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[ÈáèÂåñÊäïËµÑ‰∏éÊú∫Âô®Â≠¶‰π†] &lt;a href=&#34;https://www.mdeditor.tw/pl/p5Gg&#34;&gt;Âü∫‰∫éÊ∑±Â∫¶Âº∫ÂåñÂ≠¶‰π†ÁöÑËÇ°Á•®‰∫§ÊòìÁ≠ñÁï•Ê°ÜÊû∂Ôºà‰ª£Á†Å+ÊñáÊ°£)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[ËøêÁ≠πORÂ∏∑ÂπÑ] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/353557417&#34;&gt;È¢ÜËØªËÆ°ÂàíNO.10 | Âü∫‰∫éÊ∑±Â∫¶Â¢ûÂº∫Â≠¶‰π†ÁöÑÈáèÂåñ‰∫§ÊòìÊú∫Âô®‰∫∫Ôºö‰ªéAlphaGoÂà∞FinRLÁöÑÊºîÂèòËøáÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Ê∑±Â∫¶Âº∫ÂåñÂÆûÈ™åÂÆ§] &lt;a href=&#34;https://blog.csdn.net/deeprl/article/details/114828024&#34;&gt;„ÄêÈáçÁ£ÖÊé®Ëçê„ÄëÂì•Â§ßÂºÄÊ∫ê‚ÄúFinRL‚Äù: ‰∏Ä‰∏™Áî®‰∫éÈáèÂåñÈáëËûçËá™Âä®‰∫§ÊòìÁöÑÊ∑±Â∫¶Âº∫ÂåñÂ≠¶‰π†Â∫ì&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[ÂïÜ‰∏öÊñ∞Áü•] &lt;a href=&#34;https://www.shangyexinzhi.com/article/4170766.html&#34;&gt;ÈáëËûçÁßëÊäÄËÆ≤Â∫ßÂõûÈ°æ|AI4Finance: ‰ªéAlphaGoÂà∞FinRL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Kaggle] &lt;a href=&#34;https://www.kaggle.com/c/jane-street-market-prediction/discussion/199313&#34;&gt;Jane Street Market Prediction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Áü©Ê±†‰∫ëMatpool] &lt;a href=&#34;http://www.python88.com/topic/111918&#34;&gt;Âú®Áü©Ê±†‰∫ë‰∏äÂ¶Ç‰ΩïËøêË°åFinRLËÇ°Á•®‰∫§ÊòìÁ≠ñÁï•Ê°ÜÊû∂&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Ë¥¢Êô∫Êó†Áïå] &lt;a href=&#34;https://www.sohu.com/a/486837028_120929319&#34;&gt;ÈáëËûçÂ≠¶‰ºöÂ∏∏Âä°ÁêÜ‰∫ãÈôàÂ≠¶ÂΩ¨: Ê∑±Â∫¶Âº∫ÂåñÂ≠¶‰π†Âú®ÈáëËûçËµÑ‰∫ßÁÆ°ÁêÜ‰∏≠ÁöÑÂ∫îÁî®&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Neurohive] &lt;a href=&#34;https://neurohive.io/ru/gotovye-prilozhenija/finrl-glubokoe-obuchenie-s-podkrepleniem-dlya-trejdinga/&#34;&gt;FinRL: –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[ICHI.PRO] &lt;a href=&#34;https://ichi.pro/ko/yangjeog-geum-yung-eul-wihan-finrl-dan-il-jusig-geolaeleul-wihan-tyutolieol-61395882412716&#34;&gt;ÏñëÏ†Å Í∏àÏúµÏùÑÏúÑÌïú FinRL: Îã®Ïùº Ï£ºÏãù Í±∞ÎûòÎ•ºÏúÑÌïú ÌäúÌÜ†Î¶¨Ïñº&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Áü•‰πé] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/563238735&#34;&gt;Âü∫‰∫éÊ∑±Â∫¶Âº∫ÂåñÂ≠¶‰π†ÁöÑÈáëËûç‰∫§ÊòìÁ≠ñÁï•ÔºàFinRL+Stable baselines3Ôºå‰ª•ÈÅìÁêºÊñØ30ËÇ°Á•®‰∏∫‰æãÔºâ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Áü•‰πé] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/616799055&#34;&gt;Âä®ÊÄÅÊï∞ÊçÆÈ©±Âä®ÁöÑÈáëËûçÂº∫ÂåñÂ≠¶‰π†&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Áü•‰πé] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/498115373&#34;&gt;FinRLÁöÑW&amp;amp;BÂåñ+Ë∂ÖÂèÇÊï∞ÊêúÁ¥¢ÂíåÊ®°Âûã‰ºòÂåñ(Âü∫‰∫éStable Baselines 3Ôºâ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Áü•‰πé] &lt;a href=&#34;https://zhuanlan.zhihu.com/p/544621882&#34;&gt;FinRL-Meta: Êú™Êù•ÈáëËûçÂº∫ÂåñÂ≠¶‰π†ÁöÑÂÖÉÂÆáÂÆô&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citing FinRL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{dynamic_datasets,&#xA;    author = {Liu, Xiao-Yang and Xia, Ziyi and Yang, Hongyang and Gao, Jiechao and Zha, Daochen and Zhu, Ming and Wang, Christina Dan and Wang, Zhaoran and Guo, Jian},&#xA;    title = {Dynamic Datasets and Market Environments for Financial Reinforcement Learning},&#xA;    journal = {Machine Learning - Springer Nature},&#xA;    year = {2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{liu2022finrl_meta,&#xA;  title={FinRL-Meta: Market Environments and Benchmarks for Data-Driven Financial Reinforcement Learning},&#xA;  author={Liu, Xiao-Yang and Xia, Ziyi and Rui, Jingyang and Gao, Jiechao and Yang, Hongyang and Zhu, Ming and Wang, Christina Dan and Wang, Zhaoran and Guo, Jian},&#xA;  journal={NeurIPS},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{liu2021finrl,&#xA;    author  = {Liu, Xiao-Yang and Yang, Hongyang and Gao, Jiechao and Wang, Christina Dan},&#xA;    title   = {{FinRL}: Deep reinforcement learning framework to automate trading in quantitative finance},&#xA;    journal = {ACM International Conference on AI in Finance (ICAIF)},&#xA;    year    = {2021}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{finrl2020,&#xA;    author  = {Liu, Xiao-Yang and Yang, Hongyang and Chen, Qian and Zhang, Runjia and Yang, Liuqing and Xiao, Bowen and Wang, Christina Dan},&#xA;    title   = {{FinRL}: A deep reinforcement learning library for automated stock trading in quantitative finance},&#xA;    journal = {Deep RL Workshop, NeurIPS 2020},&#xA;    year    = {2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{liu2018practical,&#xA;  title={Practical deep reinforcement learning approach for stock trading},&#xA;  author={Liu, Xiao-Yang and Xiong, Zhuoran and Zhong, Shan and Yang, Hongyang and Walid, Anwar},&#xA;  journal={NeurIPS Workshop on Deep Reinforcement Learning},&#xA;  year={2018}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We published &lt;a href=&#34;http://tensorlet.org/projects/ai-in-finance/&#34;&gt;FinRL papers&lt;/a&gt; that are listed at &lt;a href=&#34;https://scholar.google.com/citations?view_op=list_works&amp;amp;hl=en&amp;amp;hl=en&amp;amp;user=XsdPXocAAAAJ&#34;&gt;Google Scholar&lt;/a&gt;. Previous papers are given in the &lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL/raw/master/tutorials/FinRL_papers.md&#34;&gt;list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Join and Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to &lt;strong&gt;AI4Finance&lt;/strong&gt; community!&lt;/p&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://github.com/AI4Finance-Foundation/FinRL-Tutorials/raw/master/Contributing.md&#34;&gt;Contributing Guidances&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/AI4Finance-LLC/FinRL-Library/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=AI4Finance-LLC/FinRL-Library&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer: We are sharing codes for academic purpose under the MIT education license. Nothing herein is financial advice, and NOT a recommendation to trade real money. Please use common sense and always first consult a professional before trading or investing.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>