<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-05T01:36:48Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>t4rzsan/sql2types</title>
    <updated>2022-10-05T01:36:48Z</updated>
    <id>tag:github.com,2022-10-05:/t4rzsan/sql2types</id>
    <link href="https://github.com/t4rzsan/sql2types" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate F# types from SQL tables&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sql2types&lt;/h1&gt; &#xA;&lt;p&gt;Generate F# record types from SQL tables.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is a simple tool to generate F# record types from database tables on Microsoft SQL Server databases. All it does is create a record type with properties according to the fields in the database table.&lt;/p&gt; &#xA;&lt;p&gt;There is no synchronization and there is no annoying references to Entity Framework or anything. All you get is a type that you can use as a starting point when working with Microsoft SQL Server, for example if you use &lt;a href=&#34;https://github.com/DapperLib/Dapper&#34;&gt;Dapper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;p&gt;So far there is no cool dotnet tool or other means of installing sql2types. Your only option is to get a copy of the code and run it. This is a .NET 6.0 project, s√• you can use &lt;code&gt;dotnet run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run sql2types from a command prompt, for example like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;dotnet run --connectionstring &#34;Integrated Security=SSPI;Initial Catalog=MyDatabase;Data Source=MySQLServer;Trust Server Certificate=True;&#34; --schemaname &#34;Data&#34; --tablename &#34;User&#34; --outputfolder &#34;c:\temp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a table &lt;code&gt;Data.User&lt;/code&gt; defined like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE Data.User&#xA;(&#xA;    UserId INT PRIMARY KEY NOT NULL,&#xA;    Name VARCHAR(100) NOT NULL,&#xA;    Email VARCHAR(100) NULL,&#xA;    LastSignin: DATETIME2(7)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you will get a file &lt;code&gt;c:\temp\User.fs&lt;/code&gt; looking like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type User = &#xA;    {  UserId: int&#xA;       Name: string&#xA;       Email: string option&#xA;       LastSignin: System.DateTime }       &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool will convert basic types like &lt;code&gt;VARCHAR&lt;/code&gt;, &lt;code&gt;INT&lt;/code&gt;, &lt;code&gt;BIGINT&lt;/code&gt; and a few others to F# intrinsic types. Other types, like &lt;code&gt;DATETIME2&lt;/code&gt; will show as .NET types, like &lt;code&gt;System.DateTime&lt;/code&gt;. As you can see, the tool converts nullable columns to &lt;code&gt;option&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the tool only works for on-premise Microsoft SQL Server (i.e. not Azure).&lt;/p&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add possibility for Azure SQL databases (also with MFA).&lt;/li&gt; &#xA; &lt;li&gt;Add a way to run the tool for several tables in one go.&lt;/li&gt; &#xA; &lt;li&gt;Publish as dotnet tool.&lt;/li&gt; &#xA; &lt;li&gt;Add some tests.&lt;/li&gt; &#xA; &lt;li&gt;Add C# generator for C# classes and/or records.&lt;/li&gt; &#xA; &lt;li&gt;Prevent SQL injection in case little Bobby Tables uses the tool.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>