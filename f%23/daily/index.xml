<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T01:40:55Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xamarin/apple-api-docs</title>
    <updated>2022-06-02T01:40:55Z</updated>
    <id>tag:github.com,2022-06-02:/xamarin/apple-api-docs</id>
    <link href="https://github.com/xamarin/apple-api-docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xamarin.iOS &amp; Xamarin.Mac API documentation in ECMA XML format&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xamarin Apple API docs&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source of the Xamarin API documentation for native functions in Apple operating systems:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iOS&lt;/li&gt; &#xA; &lt;li&gt;macOS&lt;/li&gt; &#xA; &lt;li&gt;tvOS&lt;/li&gt; &#xA; &lt;li&gt;watchOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example URL to start browsing is &lt;a href=&#34;http://docs.microsoft.com/dotnet/api/uikit&#34;&gt;http://docs.microsoft.com/dotnet/api/uikit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Microsoft Open Source Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Style guidelines&lt;/h2&gt; &#xA;&lt;p&gt;All Xamarin Apple API docs are written in the &lt;a href=&#34;https://grammarist.com/grammar/english-moods/&#34;&gt;indicative mood&lt;/a&gt;. For instance, instead of saying &#34;You call this function to foo the bar,&#34; the docs should be &#34;The developer calls this function to foo the bar.&#34; The agents we refer to are typically &#34;the developer,&#34; &#34;the method&#34; (or &#34;the object&#34;), &#34;the framework,&#34; and &#34;the system&#34; (meaning the underlying operating system or hardware services). The indicative mood often takes a little time to get used to, but it helps avoid ambiguity about responsibilities and cuts down on the temptation to use passive voice.&lt;/p&gt; &#xA;&lt;p&gt;API docs are divided between &lt;code&gt;summary&lt;/code&gt; and &lt;code&gt;remarks&lt;/code&gt; elements. Summaries are displayed in IntelliSense and should be quite short (perhaps around 140 characters, certainly fewer than 250). If there is a numeric value with an underlying unit-of-measure, include the unit in the summary (e.g., &#34;The angle, in radians,&#34; or &#34;the distance, in meters&#34;).&lt;/p&gt; &#xA;&lt;p&gt;Summaries may contain tags, but should not wrap their content in another tag:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Right: &lt;code&gt;&amp;lt;summary&amp;gt;Foos the &amp;lt;paramref name=&#34;bar&#34;/&amp;gt;.&amp;lt;/summary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wrong: &lt;code&gt;&amp;lt;summary&amp;gt;&amp;lt;para&amp;gt;Foos the &amp;lt;paramref name=&#34;bar&#34;/&amp;gt;.&amp;lt;/para&amp;gt;&amp;lt;/summary&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scripts included in the repository&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;make all&lt;/strong&gt;: run xmllint with the bundled monodoc-ecma.xsl to verify the syntax of the documentation in the repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using DocWriter&lt;/h2&gt; &#xA;&lt;p&gt;Use github.com/xamarin/DocWriter to author documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;In case macdoc blows up when trying to load the documentation or you can&#39;t compile the docs or similar check for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;busted index.xml&lt;/strong&gt;: run the above &lt;code&gt;missing&lt;/code&gt; script which will give you the entry in the xml that are not present in the filesystem&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;parse error&lt;/strong&gt;: run &lt;code&gt;make all&lt;/code&gt; to check for syntax errors in the documentation files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using MacDoc?&lt;/h2&gt; &#xA;&lt;p&gt;Run macdoc by passing the absolute path to the en/ directory (i.e. where the index.xml file is) preprended with the character &#39;+&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./macdoc.app/Contents/MacOS/macdoc &#39;+/path/to/ios-api-docs/en/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need a recent macdoc. You can compile it yourself by cloning &lt;a href=&#34;https://github.com/mono/monomac&#34;&gt;https://github.com/mono/monomac&lt;/a&gt; and running the build process there. Macdoc is under the samples directory.&lt;/p&gt; &#xA;&lt;p&gt;This repository is also submoduled by XamarinVS to fetch the baseline docs from where MSXML docs are generated and later merged with iOS docs on the user&#39;s machine.&lt;/p&gt; &#xA;&lt;h2&gt;Viewing history?&lt;/h2&gt; &#xA;&lt;p&gt;On January 22, 2018, commits 542f219f and ce6f06729 renamed the directories from, e.g., &lt;code&gt;en/MonoTouch.UIKit&lt;/code&gt; to &lt;code&gt;en/UIKit&lt;/code&gt;. In almost all cases &lt;code&gt;git log {type.xml}&lt;/code&gt; will track back only to these commits. To track past those commits, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git log --follow --find-copies-harder --find-renames=40 {type.xml}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lowering the &lt;code&gt;find-renames&lt;/code&gt; threshold to around 40 seems to work in almost all cases. You can try lower thresholds, although at some point you could presumably start triggering incorrect matches.&lt;/p&gt; &#xA;&lt;h2&gt;Legal Notices&lt;/h2&gt; &#xA;&lt;p&gt;Microsoft and any contributors grant you a license to the Microsoft documentation and other content in this repository under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;Creative Commons Attribution 4.0 International Public License&lt;/a&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/xamarin/apple-api-docs/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file, and grant you a license to any code in the repository under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/xamarin/apple-api-docs/main/LICENSE-CODE&#34;&gt;LICENSE-CODE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Microsoft, Windows, Microsoft Azure and/or other Microsoft products and services referenced in the documentation may be either trademarks or registered trademarks of Microsoft in the United States and/or other countries. The licenses for this project do not grant you rights to use any Microsoft names, logos, or trademarks. Microsoft&#39;s general trademark guidelines can be found at &lt;a href=&#34;http://go.microsoft.com/fwlink/?LinkID=254653&#34;&gt;http://go.microsoft.com/fwlink/?LinkID=254653&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Privacy information can be found at &lt;a href=&#34;https://privacy.microsoft.com/en-us/&#34;&gt;https://privacy.microsoft.com/en-us/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft and any contributors reserve all others rights, whether under their respective copyrights, patents, or trademarks, whether by implication, estoppel or otherwise.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Tarmil/FSharp.Data.LiteralProviders</title>
    <updated>2022-06-02T01:40:55Z</updated>
    <id>tag:github.com,2022-06-02:/Tarmil/FSharp.Data.LiteralProviders</id>
    <link href="https://github.com/Tarmil/FSharp.Data.LiteralProviders" rel="alternate"></link>
    <summary type="html">&lt;p&gt;F# Type providers generating literals from the compile-time environment&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FSharp.Data.LiteralProviders&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Tarmil/FSharp.Data.LiteralProviders/actions?query=workflow%3ABuild+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/Tarmil/FSharp.Data.LiteralProviders/workflows/Build/badge.svg?branch=master&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuget.org/packages/FSharp.Data.LiteralProviders&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/FSharp.Data.LiteralProviders?logo=nuget&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a collection of type providers that provide literals: compile-time constants that can be used in regular code, but also as parameters to other type providers or .NET attributes.&lt;/p&gt; &#xA;&lt;!-- doctoc --github --notitle README.md --&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#reference&#34;&gt;Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#env&#34;&gt;Env&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#textfile&#34;&gt;TextFile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#exec&#34;&gt;Exec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#equality&#34;&gt;Equality&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#comparison&#34;&gt;Comparison&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#boolean-operations&#34;&gt;Boolean operations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#if&#34;&gt;If&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#builddate&#34;&gt;BuildDate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#parsed-value&#34;&gt;Parsed value&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#tips-for-combining-type-providers&#34;&gt;Tips for combining type providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#packaging&#34;&gt;Packaging&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#using-nuget&#34;&gt;Using NuGet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tarmil/FSharp.Data.LiteralProviders/master/#using-paket&#34;&gt;Using Paket&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Env&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FSharp.Data.LiteralProviders.Env&lt;/code&gt; contains literals for environment variables during compile time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;/// The compile-time value of the &#34;OS&#34; environment variable&#xA;let compileOS = Env.OS.Value&#xA;&#xA;match compileOS with&#xA;| &#34;Windows_NT&#34; -&amp;gt; printfn &#34;This program was compiled on Windows!&#34;&#xA;| &#34;Unix&#34; -&amp;gt; printfn &#34;This program was compiled on OSX or Linux!&#34;&#xA;| _ -&amp;gt; printfn &#34;I don&#39;t know the platform this program was compiled on :(&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a more useful example, using it as a parameter to another type provider (namely, &lt;a href=&#34;http://fsprojects.github.io/SQLProvider/&#34;&gt;SQLProvider&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.Sql&#xA;open FSharp.Data.LiteralProviders&#xA;&#xA;type Sql = SqlProvider&amp;lt;Common.DatabaseProviderTypes.MSSQLSERVER,&#xA;                       Env.CONNECTION_STRING.Value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when called this way, &lt;code&gt;Env&lt;/code&gt; fails to compile if the environment variable is not set.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, the environment variable&#39;s name can be passed as a string parameter. In this case, &lt;code&gt;Env&lt;/code&gt; returns the empty string if the variable is not set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let vsVersion = Env&amp;lt;&#34;VisualStudioEdition&#34;&amp;gt;.Value&#xA;&#xA;match vsVersion with&#xA;| &#34;&#34; -&amp;gt; printfn &#34;This program wasn&#39;t compiled with Visual Studio.&#34;&#xA;| v -&amp;gt; printfn &#34;This program was built with Visual Studio %s.&#34; v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When used with a parameter, &lt;code&gt;Env&lt;/code&gt; also provides a value &lt;code&gt;IsSet : bool&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additional parameters can be passed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DefaultValue : string&lt;/code&gt; will be used as the value if the environment variable isn&#39;t set, instead of the empty string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.Sql&#xA;open FSharp.Data.LiteralProviders&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] connString =&#xA;    Env&amp;lt;&#34;CONNECTION_STRING&#34;, &#34;Server=localhost;Integrated Security=true&#34;&amp;gt;.Value&#xA;&#xA;type Sql = SqlProvider&amp;lt;Common.DatabaseProviderTypes.MSSQLSERVER, connString&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;EnsureExists : bool&lt;/code&gt; specifies the behavior when the environment variable isn&#39;t set.&lt;/p&gt; &lt;p&gt;If false (the default), then &lt;code&gt;Value&lt;/code&gt; is an empty string (or &lt;code&gt;DefaultValue&lt;/code&gt; if provided).&lt;/p&gt; &lt;p&gt;If true, then the type provider raises a compile-time error.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;/// Throws a compile-time error &#34;Environment variable does not exist: CONNECTION_STRING&#34;.&#xA;let [&amp;lt;Literal&amp;gt;] connString = Env&amp;lt;&#34;CONNECTION_STRING&#34;, EnsureExists = true&amp;gt;.Text&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TextFile&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FSharp.Data.LiteralProviders.TextFile&lt;/code&gt; contains literals that are read from text files during compilation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;/// The compile-time contents of the file &amp;lt;projectFolder&amp;gt;/build/version.txt&#xA;let [&amp;lt;Literal&amp;gt;] version = TextFile.build.``version.txt``.Text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, the file path can be passed as a string parameter. In this case, &lt;code&gt;TextFile&lt;/code&gt; returns the empty string if the file doesn&#39;t exist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;/// The compile-time contents of the file &amp;lt;projectFolder&amp;gt;/build/version.txt&#xA;/// or &#34;&#34; if this file doesn&#39;t exist.&#xA;let [&amp;lt;Literal&amp;gt;] version = TextFile&amp;lt;&#34;build/version.txt&#34;&amp;gt;.Text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional parameters can be passed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DefaultValue : string&lt;/code&gt; will be used as the value if the file doesn&#39;t exist, instead of the empty string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;/// The compile-time contents of the file &amp;lt;projectFolder&amp;gt;/build/version.txt&#xA;/// or &#34;1.0&#34; if this file doesn&#39;t exist.&#xA;let [&amp;lt;Literal&amp;gt;] version = TextFile&amp;lt;&#34;build/version.txt&#34;, DefaultValue = &#34;1.0&#34;&amp;gt;.Text&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Encoding : string&lt;/code&gt; specifies the text encoding.&lt;/p&gt; &lt;p&gt;The possible values are &lt;code&gt;UTF-8&lt;/code&gt;, &lt;code&gt;UTF-16-le&lt;/code&gt;, &lt;code&gt;UTF-16-be&lt;/code&gt;, &lt;code&gt;UTF-32-le&lt;/code&gt; and &lt;code&gt;UTF-32-be&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When not specified, &lt;code&gt;TextFile&lt;/code&gt; tries to guess the encoding.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] script = TextFile&amp;lt;&#34;LoadData.sql&#34;, Encoding = &#34;UTF-16-le&#34;&amp;gt;.Text&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: regardless of the encoding, if the file starts with a byte order mark, then the BOM is stripped from the string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;EnsureExists : bool&lt;/code&gt; specifies the behavior when the file doesn&#39;t exist.&lt;/p&gt; &lt;p&gt;If false (the default), then the &lt;code&gt;Text&lt;/code&gt; value is an empty string (or &lt;code&gt;DefaultValue&lt;/code&gt; if provided).&lt;/p&gt; &lt;p&gt;If true, then the type provider raises a compile-time error.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;/// Throws a compile-time error &#34;File does not exist: fileThatDoesntExist.txt&#34;.&#xA;let [&amp;lt;Literal&amp;gt;] test = TextFile&amp;lt;&#34;fileThatDoesntExist.txt&#34;, EnsureExists = true&amp;gt;.Text&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exec&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FSharp.Data.LiteralProviders.Exec&lt;/code&gt; executes an external program during compilation and captures its output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] currentBranch = Exec&amp;lt;&#34;git&#34;, &#34;branch --show-current&#34;&amp;gt;.Output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional parameters can be passed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Input: string&lt;/code&gt;: text that is passed to the program&#39;s standard output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Directory: string&lt;/code&gt;: the working directory. The default is the project directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;EnsureSuccess: bool&lt;/code&gt;: if true, the provider ensures that the program exits successfully, and fails otherwise.&lt;br&gt; If false, no error is raised.&lt;br&gt; The default is true.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Timeout: int&lt;/code&gt;: timeout in milliseconds. Raise an error if the program takes longer to finish.&lt;br&gt; The default is 10_000 (10 seconds).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following values are provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Output: string&lt;/code&gt;: the program&#39;s standard output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Error: string&lt;/code&gt;: the program&#39;s standard error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ExitCode: int&lt;/code&gt;: the program&#39;s exit code. Only useful with &lt;code&gt;EnsureSuccess = false&lt;/code&gt;, otherwise always 0.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FSharp.Data.LiteralProviders&lt;/code&gt; contains sub-namespaces &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Int&lt;/code&gt; and &lt;code&gt;Bool&lt;/code&gt; for conditional operations on these types.&lt;/p&gt; &#xA;&lt;h4&gt;Equality&lt;/h4&gt; &#xA;&lt;p&gt;The providers &lt;code&gt;EQ&lt;/code&gt; and &lt;code&gt;NE&lt;/code&gt; contain &lt;code&gt;Value: bool&lt;/code&gt; that checks whether the two parameters are equal / not equal, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] branch = Exec&amp;lt;&#34;git&#34;, &#34;branch --show-current&#34;&amp;gt;.Output&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] isMaster = String.EQ&amp;lt;branch, &#34;master&#34;&amp;gt;.Value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comparison&lt;/h4&gt; &#xA;&lt;p&gt;In sub-namespace &lt;code&gt;Int&lt;/code&gt;, the providers &lt;code&gt;LT&lt;/code&gt;, &lt;code&gt;LE&lt;/code&gt;, &lt;code&gt;GT&lt;/code&gt; and &lt;code&gt;GE&lt;/code&gt; contain &lt;code&gt;Value: bool&lt;/code&gt; that checks whether the first parameter is less than / less than or equal / greater than / greater than or equal to the second parameter, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] gitStatusCode = Exec&amp;lt;&#34;git&#34;, &#34;status&#34;, EnsureSuccess = false&amp;gt;.ExitCode&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] notInGitRepo = Int.GT&amp;lt;gitStatusCode, 0&amp;gt;.Value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Boolean operations&lt;/h4&gt; &#xA;&lt;p&gt;In sub-namespace &lt;code&gt;Bool&lt;/code&gt;, the providers &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;XOR&lt;/code&gt; and &lt;code&gt;NOT&lt;/code&gt; contain &lt;code&gt;Value: bool&lt;/code&gt; that performs the corresponding boolean operation on its parameter(s).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;type GithubAction = Env&amp;lt;&#34;GITHUB_ACTION&#34;&amp;gt;&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] isLocalBuild = Bool.NOT&amp;lt;GithubAction.IsSet&amp;gt;.Value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;If&lt;/h4&gt; &#xA;&lt;p&gt;The provider &lt;code&gt;IF&lt;/code&gt; takes a condition and two values as parameters. It returns the first value if the condition is true, and the second value if the condition is false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] versionSuffix = String.IF&amp;lt;isMaster, &#34;&#34;, &#34;-pre&#34;&amp;gt;.Value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that even though only one value is returned, both are evaluated. So if one branch fails, even though the other one is returned, the whole provider will fail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let [&amp;lt;Literal&amp;gt;] isCI = Env&amp;lt;&#34;CI&#34;, &#34;false&#34;&amp;gt;.ValueAsBool&#xA;&#xA;// The following will fail, because when CI is false, GITHUB_REF_NAME is not defined.&#xA;let [&amp;lt;Literal&amp;gt;] badRef =&#xA;    String.IF&amp;lt;isCI,&#xA;        Env.GITHUB_REF_NAME.Value,&#xA;        const Exec&amp;lt;&#34;git&#34;, &#34;branch --current&#34;&amp;gt;.Value&amp;gt;.Value&#xA;&#xA;// Instead, make sure to use a version that never fails.&#xA;// Here, Env returns an empty string if GITHUB_REF_NAME is not defined.&#xA;let [&amp;lt;Literal&amp;gt;] goodRef =&#xA;    String.IF&amp;lt;isCI,&#xA;        Env&amp;lt;&#34;GITHUB_REF_NAME&#34;&amp;gt;.Value,&#xA;        const Exec&amp;lt;&#34;git&#34;, &#34;branch --current&#34;&amp;gt;.Value&amp;gt;.Value&#xA;&#xA;// Even better, avoid using IF if you can achieve the same result with default values.&#xA;// For example, here, no need to check the CI variable:&#xA;// GITHUB_REF_NAME is set iff compiling on Github Actions anyway.&#xA;// So you can directly use GITHUB_REF_NAME, with `git branch` as default value.&#xA;let [&amp;lt;Literal&amp;gt;] betterRef =&#xA;    Env&amp;lt;&#34;GITHUB_REF_NAME&#34;, const Exec&amp;lt;&#34;git&#34;, &#34;branch --current&#34;&amp;gt;.Value&amp;gt;.Value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BuildDate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;FSharp.Data.LiteralProviders.BuildDate&lt;/code&gt; contains the build time as a literal string in ISO-8601 format (&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#Roundtrip&#34;&gt;&#34;o&#34; format&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let utcBuildDate = BuildDate.Utc      // &#34;2019-08-24T19:45:03.2279236Z&#34;&#xA;let localBuildDate = BuildDate.Local  // &#34;2019-08-24T21:45:03.2279236+02:00&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It can be optionally parameterized by a &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings&#34;&gt;date format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let buildTime = BuildDate&amp;lt;&#34;hh:mm:ss&#34;&amp;gt;.Utc  // &#34;21:45:03&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parsed value&lt;/h3&gt; &#xA;&lt;p&gt;The providers try to parse string values as integer and as boolean. If any of these succeed, a value suffixed with &lt;code&gt;AsInt&lt;/code&gt; or &lt;code&gt;AsBool&lt;/code&gt; is provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Data.LiteralProviders&#xA;&#xA;let runNumber = Env&amp;lt;&#34;GITHUB_RUN_NUMBER&#34;&amp;gt;.Value // eg. &#34;42&#34;&#xA;&#xA;let runNumber = Env&amp;lt;&#34;GITHUB_RUN_NUMBER&#34;&amp;gt;.ValueAsInt // eg. 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following values are parsed this way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Env.Value&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TextFile.Text&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Exec.Output&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Exec.Error&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips for combining type providers&lt;/h2&gt; &#xA;&lt;p&gt;One of the main use cases for FSharp.Data.LiteralProviders is to provide a literal to pass to another type provider. There are several ways to do so:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Declare each TP with a type alias:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type ConnectionString = Env&amp;lt;&#34;CONNECTION_STRING&#34;&amp;gt;&#xA;&#xA;type Sql = SqlProvider&amp;lt;Common.DatabaseProviderTypes.MSSQLSERVER, ConnectionString.Value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Declare a TP&#39;s value as Literal then pass it to another TP:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let [&amp;lt;Literal&amp;gt;] ConnectionString = Env&amp;lt;&#34;CONNECTION_STRING&#34;&amp;gt;.Value&#xA;&#xA;type Sql = SqlProvider&amp;lt;Common.DatabaseProviderTypes.MSSQLSERVER, ConnectionString&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use a TP entirely inside a parameter of another TP, prefix it with the keyword &lt;code&gt;const&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Sql = SqlProvider&amp;lt;Common.DatabaseProviderTypes.MSSQLSERVER,&#xA;                       const Env&amp;lt;&#34;CONNECTION_STRING&#34;&amp;gt;.Value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;p&gt;FSharp.Data.LiteralProviders is a compile-time only package: all of its provided values are baked into the compiled assembly. This means that if you are writing a library that uses FSharp.Data.LiteralProviders, your downstream users don&#39;t need to depend on it.&lt;/p&gt; &#xA;&lt;p&gt;Here is how to exclude FSharp.Data.LiteralProviders from your NuGet dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;Using NuGet&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;dotnet&lt;/code&gt;&#39;s built-in package management, then in your project file, replace the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PackageReference Include=&#34;FSharp.Data.LiteralProviders&#34; Version=&#34;...&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;PackageReference Include=&#34;FSharp.Data.LiteralProviders&#34; Version=&#34;...&#34;&amp;gt;&#xA;    &amp;lt;PrivateAssets&amp;gt;All&amp;lt;/PrivateAssets&amp;gt;&#xA;&amp;lt;/PackageReference&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Paket&lt;/h3&gt; &#xA;&lt;p&gt;If you are packaging your library with &lt;code&gt;paket pack&lt;/code&gt;, add the following to your &lt;code&gt;paket.template&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;excludeddependencies&#xA;    FSharp.Data.LiteralProviders&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>fsprojects/Paket</title>
    <updated>2022-06-02T01:40:55Z</updated>
    <id>tag:github.com,2022-06-02:/fsprojects/Paket</id>
    <link href="https://github.com/fsprojects/Paket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A dependency manager for .NET with support for NuGet packages and Git repositories.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/fsprojects/Paket?branch=master&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/fsprojects/Paket.svg?branch=master&#34; alt=&#34;Travis build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/paket/paket/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/f77ejdp6mtkris2u/branch/master?svg=true&#34; alt=&#34;Appveyor Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Paket/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Paket.svg?style=flat&#34; alt=&#34;NuGet Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/fsprojects/Paket?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/fsprojects/Paket&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/PaketManager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-PaketManager-blue.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Paket&lt;/h1&gt; &#xA;&lt;p&gt;A dependency manager for .NET with support for NuGet packages and git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Why Paket?&lt;/h2&gt; &#xA;&lt;p&gt;NuGet does not separate out the concept of transitive dependencies. If you install a package into your project and that package has further dependencies then all transitive packages are included in the packages.config. There is no way to tell which packages are only transitive dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Even more importantly: If two packages reference conflicting versions of a package, NuGet will silently take the latest version (&lt;a href=&#34;https://fsprojects.github.io/Paket/controlling-nuget-resolution.html&#34;&gt;read more&lt;/a&gt;). You have no control over this process.&lt;/p&gt; &#xA;&lt;p&gt;Paket on the other hand maintains this information on a consistent and stable basis within the &lt;a href=&#34;https://fsprojects.github.io/Paket/lock-file.html&#34;&gt;&lt;code&gt;paket.lock&lt;/code&gt; file&lt;/a&gt; in the solution root. This file, together with the &lt;a href=&#34;https://fsprojects.github.io/Paket/dependencies-file.html&#34;&gt;&lt;code&gt;paket.dependencies&lt;/code&gt; file&lt;/a&gt; enables you to determine exactly what&#39;s happening with your dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Paket also enables you to &lt;a href=&#34;https://fsprojects.github.io/Paket/git-dependencies.html&#34;&gt;reference files directly from git&lt;/a&gt; repositories or any &lt;a href=&#34;https://fsprojects.github.io/Paket/http-dependencies.html&#34;&gt;http-resource&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more reasons see the &lt;a href=&#34;https://fsprojects.github.io/Paket/faq.html&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Online resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fsprojects/Paket/&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsprojects.github.io/Paket/get-started.html&#34;&gt;Getting started guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/fsprojects/Paket/releases/latest&#34;&gt;paket.exe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/fsprojects/Paket/releases/latest&#34;&gt;paket.bootstrapper.exe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting and support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Found a bug or missing a feature? Feed the &lt;a href=&#34;https://github.com/fsprojects/Paket/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Announcements and related miscellanea through Twitter (&lt;a href=&#34;https://twitter.com/PaketManager&#34;&gt;@PaketManager&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As of &lt;a href=&#34;https://github.com/fsprojects/Paket/pull/2664&#34;&gt;https://github.com/fsprojects/Paket/pull/2664&lt;/a&gt;, paket now automatically bootstraps all required dependencies and builds on a clean windows installation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;up-to-date Mono (&amp;gt;= 5.0 required, &amp;gt;= 5.2 recommended, just install the latest nightly)&lt;/li&gt; &#xA; &lt;li&gt;up-to-date MSBuild (&amp;gt;= 15.0, support for &#34;Directory.Build.props&#34; required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On most distros, it should be enough to follow &lt;a href=&#34;http://www.mono-project.com/docs/getting-started/install/linux/&#34;&gt;this guide&lt;/a&gt; and install &lt;code&gt;mono-devel&lt;/code&gt;, which contains MSBuild. Note: if the paket build script fails at &lt;code&gt;paket restore&lt;/code&gt; just rerun it a few times until it succeeds.&lt;/p&gt; &#xA;&lt;h2&gt;Quick contributing guide&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork and clone locally.&lt;/li&gt; &#xA; &lt;li&gt;Build the solution with Visual Studio, &lt;code&gt;build.cmd&lt;/code&gt; or &lt;code&gt;build.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a topic specific branch in git. Add a nice feature in the code. Do not forget to add tests and/or docs.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;build.cmd&lt;/code&gt; (&lt;code&gt;build.sh&lt;/code&gt; on Mono) to make sure all tests are still passing.&lt;/li&gt; &#xA; &lt;li&gt;When built, you&#39;ll find the binaries in &lt;code&gt;./bin&lt;/code&gt; which you can then test with locally, to ensure the bug or feature has been successfully implemented.&lt;/li&gt; &#xA; &lt;li&gt;Send a Pull Request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to contribute to the &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;docs&lt;/a&gt; then please modify the markdown files in &lt;code&gt;/docs/content&lt;/code&gt; and send a pull request. Note, that short description and syntax for each command is generated automatically from the &lt;code&gt;Paket.Commands&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/fsprojects/Paket/raw/master/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer(s)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/forki&#34;&gt;@forki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agross&#34;&gt;@agross&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudroutine&#34;&gt;@cloudroutine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matthid&#34;&gt;@matthid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isaacabraham&#34;&gt;@isaacabraham&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/theimowski&#34;&gt;@theimowski&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default maintainer account for projects under &#34;fsprojects&#34; is &lt;a href=&#34;https://github.com/fsprojectsgit&#34;&gt;@fsprojectsgit&lt;/a&gt; - F# Community Project Incubation Space (repo management)&lt;/p&gt;</summary>
  </entry>
</feed>