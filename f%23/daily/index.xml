<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-02T01:34:33Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lucasteles/FsFaker</title>
    <updated>2023-03-02T01:34:33Z</updated>
    <id>tag:github.com,2023-03-02:/lucasteles/FsFaker</id>
    <link href="https://github.com/lucasteles/FsFaker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data builder with Bogus for F#&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/lucasteles/FsFaker/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/lucasteles/FsFaker/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FsFaker&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/FsFaker.svg?style=flat&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FsFaker&lt;/h1&gt; &#xA;&lt;p&gt;Easily define data builders with &lt;a href=&#34;https://github.com/bchavez/Bogus&#34;&gt;Bogus&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️&lt;/strong&gt; This library is beta&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/FsFaker&#34;&gt;NuGet package&lt;/a&gt; available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps&#34;&gt;$ dotnet add package FsFaker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Defining Builders&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open FsFaker&#xA;&#xA;type Status =&#xA;    | Enabled&#xA;    | Disabled&#xA;&#xA;type MaritalStatus =&#xA;    | Single = 1&#xA;    | Married = 2&#xA;    | Widowed = 3&#xA;&#xA;type AddressType =&#xA;    | Principal&#xA;    | Secondary&#xA;&#xA;[&amp;lt;CLIMutable&amp;gt;]&#xA;type Address =&#xA;    { Street: string&#xA;      City: string&#xA;      Type: AddressType }&#xA;&#xA;[&amp;lt;CLIMutable&amp;gt;]&#xA;type Person =&#xA;    { Id: Guid&#xA;      Name: string&#xA;      Email: string&#xA;      Age: int&#xA;      Status: string&#xA;      BirthDate: DateTime&#xA;      MaritalStatusEnum: MaritalStatus&#xA;      Address: Address&#xA;      OtherAddresses: Address list }&#xA;&#xA;// default locale &#xA;FsFakerConfig.setLocale &#34;pt_BR&#34;&#xA;&#xA;let address&#39; =&#xA;    BuilderFor&amp;lt;Address&amp;gt;() {&#xA;        locale &#34;en&#34;&#xA;        build into address&#xA;        set address.City (fun f -&amp;gt; f.Address.City())&#xA;        set address.Street (fun f -&amp;gt; f.Address.StreetName())&#xA;        set address.Type (fun f -&amp;gt; f.Random.Union&amp;lt;AddressType&amp;gt;())&#xA;    }&#xA;&#xA;let person&#39; =&#xA;    BuilderFor&amp;lt;Person&amp;gt;() {&#xA;        build into person&#xA;        set person.Name (fun f -&amp;gt; f.Person.FirstName)&#xA;        set person.Email (fun f -&amp;gt; f.Person.Email)&#xA;        set person.BirthDate (fun f -&amp;gt; f.Date.Past())&#xA;        set person.Age (fun f p -&amp;gt; DateTime.Today.Subtract(p.BirthDate).TotalDays |&amp;gt; int)&#xA;        set person.Address address&#39;&#xA;        set person.OtherAddresses address&#39; 2&#xA;&#xA;        rand person.Id&#xA;        rand person.MaritalStatusEnum&#xA;        rand person.Status &#34;active&#34; &#34;disabled&#34;&#xA;    }&#xA;&#xA;let person1 = person&#39;.Generate()&#xA;&#xA;let person2 =&#xA;    person&#39; {&#xA;        rule (fun p -&amp;gt; p.Name) &#34;Lucas&#34;&#xA;        rule (fun p -&amp;gt; p.BirthDate) (DateTime.Today.AddYears -32)&#xA;        one&#xA;    }&#xA;&#xA;let persons =&#xA;    person&#39; {&#xA;        rule (fun p -&amp;gt; p.Status) &#34;other&#34;&#xA;        list 5&#xA;    }&#xA;&#xA;let infinitePersons = person&#39; { lazy_seq }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending Builders&lt;/h2&gt; &#xA;&lt;p&gt;You can extend builders with your own operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FsFaker&#xA;open FsFaker.Types&#xA;&#xA;type CustomPersonBuilder(?faker) =&#xA;    inherit BaseBuilder&amp;lt;Person, CustomPersonBuilder&amp;gt;(faker)&#xA;&#xA;    [&amp;lt;CustomOperation(&#34;withName&#34;)&amp;gt;]&#xA;    member _.WithName(faker: LazyFaker&amp;lt;Person&amp;gt;, name: string) =&#xA;        faker&#xA;            .RuleFor((fun x -&amp;gt; x.Name), name)&#xA;            .RuleFor((fun x -&amp;gt; x.Email), (fun f -&amp;gt; $&#34;{name}@{f.Internet.DomainName()}.com&#34;))&#xA;&#xA;    [&amp;lt;CustomOperation(&#34;canDrive&#34;)&amp;gt;]&#xA;    member _.CanDrive(faker: LazyFaker&amp;lt;Person&amp;gt;) =&#xA;        faker&#xA;            .RuleFor((fun x -&amp;gt; x.Age), 18)&#xA;            .RuleFor((fun x -&amp;gt; x.BirthDate), (fun _ p -&amp;gt; DateTime.Today.AddYears(-p.Age)))&#xA;&#xA;let customResult =&#xA;    CustomPersonBuilder() {&#xA;    &#xA;        // your operations&#xA;        withName &#34;Artorias&#34;&#xA;        canDrive&#xA;&#xA;        // you can mix with property rules&#xA;        rule (fun p -&amp;gt; p.Address) address&#39;&#xA;        rule (fun p -&amp;gt; p.OtherAddresses) []&#xA;&#xA;        // or even with build syntax&#xA;        build into person&#xA;        rand person.Id&#xA;        set person.Status &#34;active&#34;&#xA;        set person.MaritalStatusEnum MaritalStatus.Single&#xA;&#xA;        one&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>exercism/fsharp</title>
    <updated>2023-03-02T01:34:33Z</updated>
    <id>tag:github.com,2023-03-02:/exercism/fsharp</id>
    <link href="https://github.com/exercism/fsharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exercism exercises in F#.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Exercism F# Track&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/exercism/fsharp/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exercism exercises in F#&lt;/p&gt; &#xA;&lt;h2&gt;Support and Discussion&lt;/h2&gt; &#xA;&lt;p&gt;We have an &lt;a href=&#34;https://forum.exercism.org/c/programming/f/67&#34;&gt;F# subcategory&lt;/a&gt; on the &lt;a href=&#34;https://forum.exercism.org/&#34;&gt;Exercism forum&lt;/a&gt; where you can get support for any issues you might be facing (build setup, failing tests, etc.) or brainstorm with other people for the solution.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Guide&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://github.com/exercism/docs/tree/master/contributing-to-language-tracks&#34;&gt;contributing guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Local Tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PowerShell/PowerShell&#34;&gt;PowerShell&lt;/a&gt;, &lt;a href=&#34;https://github.com/fsprojects/fantomas&#34;&gt;Fantomas&lt;/a&gt;, and &lt;a href=&#34;https://github.com/fsprojects/FSharpLint&#34;&gt;FSharpLint&lt;/a&gt; are are available in this repo as &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#local-tools&#34;&gt;local tools&lt;/a&gt;. (This requires &lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;.NET Core&lt;/a&gt; &amp;gt;=3.0) Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet tool restore&#xA;Tool &#39;dotnet-fsharplint&#39; (version &#39;0.12.3&#39;) was restored. Available commands: dotnet-fsharplint&#xA;Tool &#39;fantomas-tool&#39; (version &#39;2.9.2&#39;) was restored. Available commands: fantomas&#xA;Tool &#39;powershell&#39; (version &#39;6.2.3&#39;) was restored. Available commands: pwsh&#xA;&#xA;Restore was successful.&#xA;&#xA;&amp;gt; dotnet fsharplint -sf generators/Track.fs&#xA;========== Linting generators/Track.fs ==========&#xA;========== Finished: 0 warnings ==========&#xA;========== Summary: 0 warnings ==========&#xA;&#xA;&amp;gt; dotnet fantomas generators/Track.fs&#xA;generators/Track.fs has been written.&#xA;&#xA;&amp;gt; dotnet pwsh ./test.ps1&#xA;Linting config.json&#xA;-&amp;gt; An implementation for &#39;bracket-push&#39; was found, but config.json does not reference this exercise.&#xA;-&amp;gt; The implementation for &#39;bracket-push&#39; is missing a README.&#xA;-&amp;gt; The implementation for &#39;bracket-push&#39; is missing an example solution.&#xA;-&amp;gt; The implementation for &#39;bracket-push&#39; is missing a test suite.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;F# icon&lt;/h3&gt; &#xA;&lt;p&gt;The F# Software Foundation logo for F# is an asset of the F# Software Foundation. We have adapted it with permission.&lt;/p&gt;</summary>
  </entry>
</feed>