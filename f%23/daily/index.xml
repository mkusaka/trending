<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-31T01:35:33Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotnet-websharper/core</title>
    <updated>2023-05-31T01:35:33Z</updated>
    <id>tag:github.com,2023-05-31:/dotnet-websharper/core</id>
    <link href="https://github.com/dotnet-websharper/core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebSharper - Full-stack, functional, reactive web apps and microservices in F# and C#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebSharper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/intellifactory/websharper?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/intellifactory/websharper&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WebSharper is an &lt;a href=&#34;http://fsharp.org&#34;&gt;F#&lt;/a&gt;-based web programming platform including compilers from F# and C# code to JavaScript.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#contrib&#34;&gt;Building and contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#running&#34;&gt;Running your applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#helloworld&#34;&gt;Hello world!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#spa&#34;&gt;Single-Page Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#mpa&#34;&gt;Multi-Page Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#clientside&#34;&gt;Adding client-side functionality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#jslibs&#34;&gt;Using JavaScript libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#rest&#34;&gt;Creating REST applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contrib&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and contributing&lt;/h2&gt; &#xA;&lt;p&gt;This readme is directed to end users. To build the WebSharper compiler and core libraries for yourself, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/dotnet-websharper/core/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;WebSharper is an open-source project, and contributions are welcome!&lt;/p&gt; &#xA;&lt;p&gt;Also don&#39;t hesitate to &lt;a href=&#34;https://github.com/dotnet-websharper/core/issues&#34;&gt;report issues on the tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;installing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started is from an application template. You can install the various WebSharper &lt;a href=&#34;http://websharper.com/docs/templates&#34;&gt;project templates&lt;/a&gt; by following the instructions below for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://websharper.com/docs/install&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, you can use the &lt;a href=&#34;https://github.com/fsprojects/generator-fsharp&#34;&gt;F# Yeoman Generator&lt;/a&gt; to install template files for your favorite editor. You can then build your project by running &lt;code&gt;msbuild&lt;/code&gt; in the project root folder.&lt;/p&gt; &#xA;&lt;h3&gt;Creating WebSharper project by hand&lt;/h3&gt; &#xA;&lt;p&gt;If you are using any one of the available WebSharper project templates, they should compile and run without any modifications.&lt;/p&gt; &#xA;&lt;p&gt;If you are creating your project files manually, the following is a typical string of steps to get you up and running, although you should really consider starting off of an existing WebSharper template:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Start from an ordinary F# library project&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;WebSharper&lt;/code&gt; using &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;paket&lt;/a&gt;. This will include the main &lt;code&gt;WebSharper.targets&lt;/code&gt; and the core references in your project file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add a special project file property to drive how you want to compile your project. These are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;WebSharperProject&amp;gt;Html&amp;lt;/WebSharperProject&amp;gt;&lt;/code&gt; for HTML Applications&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;WebSharperProject&amp;gt;Site&amp;lt;/WebSharperProject&amp;gt;&lt;/code&gt; for Client-Server Applications&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;WebSharperProject&amp;gt;Bundle&amp;lt;/WebSharperProject&amp;gt;&lt;/code&gt; for Single-Page Applications&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include any further bits in your project file you may need. For instance, you will need to reference &lt;code&gt;Microsoft.WebApplication.targets&lt;/code&gt; if you intend to host your application in IIS or the built-in web server in Visual Studio.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;running&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running your applications&lt;/h2&gt; &#xA;&lt;p&gt;With the exception of the self-hosted templates, all WebSharper templates produce applications that can run inside an ASP.NET-compatible container. (HTML applications can be deployed in any web server by copying the contents of the &lt;code&gt;bin\html&lt;/code&gt; folder.)&lt;/p&gt; &#xA;&lt;p&gt;In the examples below, you will see how to create &lt;a href=&#34;http://websharper.com/docs/sitelets&#34;&gt;WebSharper sitelets&lt;/a&gt;. Sitelets are web applications encoded in the F# type system. They have a set of endpoints (accessed via GET, POST, etc.) to which they respond by serving web content asynchronously. You can run these the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;In ASP.NET Core or hosted in IIS or any other compatible container&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Annotate your main sitelet with the &lt;code&gt;[&amp;lt;Website&amp;gt;]&lt;/code&gt; attribute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;[&amp;lt;Website&amp;gt;]&#xA;let MySite = ...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;As a Suave application&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Suave is a light-weight web server built in F#. You can easily use WebSharper in your existing Suave application, or host your WebSharper applications (which should be a console project) on Suave, by adding &lt;code&gt;WebSharper.Suave&lt;/code&gt; to your project and calling the WebSharper adapter to convert your sitelet to a Suave &lt;code&gt;WebPart&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module WebSharperOnSuave&#xA;&#xA;open WebSharper&#xA;open WebSharper.Sitelets&#xA;&#xA;let MySite =&#xA;    Application.Text (fun ctx -&amp;gt; &#34;Hello World&#34;)&#xA;&#xA;open global.Suave&#xA;open Suave.Web&#xA;open WebSharper.Suave&#xA;&#xA;startWebServer defaultConfig&#xA;    (WebSharperAdapter.ToWebPart(MySite, RootDirectory=&#34;../..&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;helloworld&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hello World!&lt;/h2&gt; &#xA;&lt;p&gt;With WebSharper you can develop pure JS/HTML, and single- and multi-page web applications with an optional server side, all in F#. Unless you are looking for low-level control, we recommend that you start by creating a &lt;a href=&#34;http://websharper.com/docs/sitelets&#34;&gt;sitelet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The simplest sitelet serves text on a single endpoint at the root of the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module YourApp&#xA;&#xA;open WebSharper&#xA;open WebSharper.Sitelets&#xA;&#xA;[&amp;lt;Website&amp;gt;]&#xA;let Main = Application.Text (fun ctx -&amp;gt; &#34;Hello World!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/fZgqeKjl.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/fZgqeKjm.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;spa&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Single Page Applications&lt;/h2&gt; &#xA;&lt;p&gt;While serving text is fun and often useful, going beyond isn&#39;t any complicated. For instance, you can easily construct single-page applications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module YourApp&#xA;&#xA;open WebSharper&#xA;open WebSharper.Sitelets&#xA;open WebSharper.UI.Html&#xA;open WebSharper.UI.Server&#xA;&#xA;[&amp;lt;Website&amp;gt;]&#xA;let Main =&#xA;    Application.SinglePage (fun ctx -&amp;gt;&#xA;        Content.Page(&#xA;            h1 [] [text &#34;Hello World!&#34;]&#xA;        )&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code creates an empty HTML document and inserts a header node.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/xYITvCql.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/xYITvCqm.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;HTML responses&lt;/h3&gt; &#xA;&lt;p&gt;Pages are a special type of content responses, and you can easily finetune them by specifying where you want content to be added, by using an optional &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Head&lt;/code&gt;, &lt;code&gt;Body&lt;/code&gt;, and &lt;code&gt;Doctype&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;    ...&#xA;    Application.SinglePage (fun ctx -&amp;gt;&#xA;        Content.Page(&#xA;            Title = &#34;My Hello World app&#34;,&#xA;            Body = [&#xA;                h1 [text &#34;Hello World!&#34;]&#xA;            ],&#xA;            ...&#xA;        )&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can construct HTML via the (soon legacy) WebSharper 3.x markup combinators in &lt;code&gt;WebSharper.Html.Server&lt;/code&gt; and &lt;code&gt;WebSharper.Html.Client&lt;/code&gt; (for client-side markup, see the section below), or using the next generation reactive HTML language from WebSharper UI (as above and in the examples on this page; formerly called UI.Next). A quick syntax guide to the HTML constructors in WebSharper UI:&lt;/p&gt; &#xA;&lt;p&gt;(TBA)&lt;/p&gt; &#xA;&lt;h3&gt;Custom responses&lt;/h3&gt; &#xA;&lt;p&gt;Content responses are asynchronous. Next to full HTML pages, you can return:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Plain text&lt;/strong&gt; with &lt;code&gt;Content.Text&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;Content.Text &#34;Hello World!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;JSON values&lt;/strong&gt; with &lt;code&gt;Content.Json&lt;/code&gt; (visit &lt;a href=&#34;http://websharper.com/docs/json&#34;&gt;JSON documentation&lt;/a&gt; or &lt;a href=&#34;http://websharper.com/docs/json-ref&#34;&gt;JSON cheatsheet&lt;/a&gt; for more info):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Person = { First: string; Last: string; Age: int}&#xA;&#xA;Content.Json { First=&#34;John&#34;; Last=&#34;Smith&#34;; Age=30 }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Files&lt;/strong&gt; with &lt;code&gt;Content.File&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;Content.File(&#34;Main.fs&#34;, ContentType=&#34;text/plain&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Various &lt;strong&gt;error codes&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Content.Unauthorized&lt;/code&gt; (401)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Content.Forbidden&lt;/code&gt; (403)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Content.NotFound&lt;/code&gt; (404)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Content.MethodNotAllowed&lt;/code&gt; (405)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Content.ServerError&lt;/code&gt; (500)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;You can also create your own custom error code response:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;Content.Custom(Status=Http.Status.Custom 402 (Some &#34;Payment Required&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Any other &lt;strong&gt;custom content&lt;/strong&gt; with &lt;code&gt;Content.Custom&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;mpa&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Multi-page applications&lt;/h2&gt; &#xA;&lt;p&gt;Multi-page applications have multiple endpoints: pairs of HTTP verbs and paths, and are represented as an annotated &lt;strong&gt;union type&lt;/strong&gt; we typically call &lt;code&gt;Endpoints&lt;/code&gt; (or &lt;code&gt;Action&lt;/code&gt; in previous terminology). The endpoints, as defined by this union type - given the various annotations on each union case - are mapped to content to be served using &lt;code&gt;Application.MultiPage&lt;/code&gt;. Links to endpoints in your site can be calculated from the serving context, so you will never have invalid URLs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module YourApp&#xA;&#xA;open WebSharper&#xA;open WebSharper.Sitelets&#xA;open WebSharper.UI&#xA;open WebSharper.UI.Html&#xA;open WebSharper.UI.Server&#xA;&#xA;type Endpoints =&#xA;    | [&amp;lt;EndPoint &#34;GET /&#34;&amp;gt;] Home&#xA;    | [&amp;lt;EndPoint &#34;GET /about&#34;&amp;gt;] About&#xA;&#xA;[&amp;lt;Website&amp;gt;]&#xA;let Main =&#xA;    Application.MultiPage (fun ctx endpoint -&amp;gt;&#xA;        let (=&amp;gt;) label endpoint = a [attr.href (ctx.Link endpoint)] [text label]&#xA;        match endpoint with&#xA;        | Endpoints.Home -&amp;gt;&#xA;            Content.Page(&#xA;                Body = [&#xA;                    h1 [] [text &#34;Hello world!&#34;]&#xA;                    &#34;About&#34; =&amp;gt; Endpoints.About&#xA;                ]&#xA;            )&#xA;        | Endpoints.About -&amp;gt;&#xA;            Content.Page(&#xA;                Body = [&#xA;                    p [] [text &#34;This is a simple app&#34;]&#xA;                    &#34;Home&#34; =&amp;gt; Endpoints.Home&#xA;                ]&#xA;            )&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/WMnmzIPl.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/WMnmzIPm.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;clientside&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Adding client-side functionality&lt;/h2&gt; &#xA;&lt;p&gt;WebSharper applications can easily incorporate client-side content, expressed in F#, giving an absolute edge over any web development library. Just mark your client-side functions or modules with &lt;code&gt;[&amp;lt;JavaScript&amp;gt;]&lt;/code&gt; and embed them into server side markup using &lt;code&gt;client&lt;/code&gt;. Server-side RPC functions are annotated with &lt;code&gt;[&amp;lt;Rpc&amp;gt;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The example below is reimplemented from the blog entry &lt;a href=&#34;http://websharper.com/blog-entry/4368&#34;&gt;Deploying WebSharper apps to Azure via GitHub&lt;/a&gt;, also available in the main WebSharper templates, and although it omits the more advanced templating in that approach (which is straightforward to add to this implementation), it should give you an recipe for adding client-side functionality to your sitelets easily.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module YourApp&#xA;&#xA;open WebSharper&#xA;open WebSharper.Sitelets&#xA;open WebSharper.UI&#xA;open WebSharper.UI.Html&#xA;open WebSharper.UI.Client&#xA;&#xA;module Server =&#xA;    [&amp;lt;Rpc&amp;gt;]&#xA;    let DoWork (s: string) = &#xA;        async {&#xA;            return System.String(List.ofSeq s |&amp;gt; List.rev |&amp;gt; Array.ofList)&#xA;        }&#xA;&#xA;[&amp;lt;JavaScript&amp;gt;]&#xA;module Client =&#xA;    open WebSharper.JavaScript&#xA;&#xA;    let Main () =&#xA;        let input = input [attr.value &#34;&#34;] []&#xA;        let output = h1 [] []&#xA;        div [&#xA;            input&#xA;            button [&#xA;                on.click (fun _ _ -&amp;gt;&#xA;                    async {&#xA;                        let! data = Server.DoWork input.Value&#xA;                        output.Text &amp;lt;- data&#xA;                    }&#xA;                    |&amp;gt; Async.Start&#xA;                )&#xA;            ] [text &#34;Send&#34;]&#xA;            hr [] []&#xA;            h4A [attr.``class`` &#34;text-muted&#34;] [text &#34;The server responded:&#34;]&#xA;            div [attr.``class`` &#34;jumbotron&#34;] [output]&#xA;        ]&#xA;&#xA;open WebSharper.UI.Server&#xA;&#xA;[&amp;lt;Website&amp;gt;]&#xA;let MySite =&#xA;    Application.SinglePage (fun ctx -&amp;gt;&#xA;        Content.Page(&#xA;            Body = [&#xA;                h1 [] [text &#34;Say Hi to the server&#34;]&#xA;                div [] [client &amp;lt;@ Client.Main() @&amp;gt;]&#xA;            ]&#xA;        )&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/9sPa4lzl.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/9sPa4lzm.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;jslibs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using JavaScript libraries&lt;/h2&gt; &#xA;&lt;p&gt;WebSharper extensions bring JavaScript libraries to WebSharper. You can &lt;a href=&#34;http://websharper.com/downloads&#34;&gt;download&lt;/a&gt; extensions or develop your own using &lt;a href=&#34;http://websharper.com/docs/wig&#34;&gt;WIG&lt;/a&gt;, among others. Below is an example using &lt;a href=&#34;https://github.com/intellifactory/websharper.charting&#34;&gt;WebSharper.Charting&lt;/a&gt; and &lt;a href=&#34;http://www.chartjs.org/&#34;&gt;chart.js&lt;/a&gt; underneath.&lt;/p&gt; &#xA;&lt;p&gt;Note that these and any other dependencies you may be using will be automatically injected into a &lt;code&gt;Content.Page&lt;/code&gt; or other sitelet HTML response, and you will never have to deal with them manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module YourApp&#xA;&#xA;open WebSharper&#xA;open WebSharper.Sitelets&#xA;open WebSharper.UI&#xA;open WebSharper.UI.Html&#xA;&#xA;[&amp;lt;JavaScript&amp;gt;]&#xA;module Client =&#xA;    open WebSharper.JavaScript&#xA;    open WebSharper.UI.Client&#xA;    open WebSharper.Charting&#xA;&#xA;    let RadarChart () =&#xA;        let labels =    &#xA;            [| &#34;Eating&#34;; &#34;Drinking&#34;; &#34;Sleeping&#34;;&#xA;               &#34;Designing&#34;; &#34;Coding&#34;; &#34;Cycling&#34;; &#34;Running&#34; |]&#xA;        let data1 = [|28.0; 48.0; 40.0; 19.0; 96.0; 27.0; 100.0|]&#xA;        let data2 = [|65.0; 59.0; 90.0; 81.0; 56.0; 55.0; 40.0|]&#xA;&#xA;        let ch =&#xA;            Chart.Combine [&#xA;                Chart.Radar(Seq.zip labels data1)&#xA;                    .WithFillColor(Color.Rgba(151, 187, 205, 0.2))&#xA;                    .WithStrokeColor(Color.Rgba(151, 187, 205, 1.))&#xA;                    .WithPointColor(Color.Rgba(151, 187, 205, 1.))&#xA;&#xA;                Chart.Radar(Seq.zip labels data2)&#xA;                    .WithFillColor(Color.Rgba(220, 220, 220, 0.2))&#xA;                    .WithStrokeColor(Color.Rgba(220, 220, 220, 1.))&#xA;                    .WithPointColor(Color.Rgba(220, 220, 220, 1.))&#xA;            ]&#xA;        Renderers.ChartJs.Render(ch, Size = Size(400, 400))&#xA;&#xA;open WebSharper.UI.Server&#xA;&#xA;[&amp;lt;Website&amp;gt;]&#xA;let MySite =&#xA;    Application.SinglePage (fun ctx -&amp;gt;&#xA;        Content.Page(&#xA;            Body = [&#xA;                h1 [] [text &#34;Charts are easy with WebSharper Warp!&#34;]&#xA;                div [] [client &amp;lt;@ Client.RadarChart() @&amp;gt;]&#xA;            ])&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://i.imgur.com/9o7x2b1l.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/9o7x2b1m.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;rest&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creating REST applications&lt;/h2&gt; &#xA;&lt;p&gt;TBA.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a name=&#34;links&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.websharper.com&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://websharper.com/downloads&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://try.websharper.com&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.websharper.com&#34;&gt;Forums&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/dotnet-websharper/core/blob/master/LICENSE.md&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Community &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://github.com/dotnet-websharper/core&#34;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dotnet-websharper/core/issues&#34;&gt;Issue tracker on GitHub&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gitter.im/intellifactory/websharper&#34;&gt;Chat on Gitter.im&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/websharper&#34;&gt;WebSharper on StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://webchat.freenode.net/?channels=#websharper&#34;&gt;#websharper on freenode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://websharper.com/contact&#34;&gt;Contact IntelliFactory&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>