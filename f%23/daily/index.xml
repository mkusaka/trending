<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-27T01:30:40Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RonaldSchlenker/Trulla</title>
    <updated>2023-09-27T01:30:40Z</updated>
    <id>tag:github.com,2023-09-27:/RonaldSchlenker/Trulla</id>
    <link href="https://github.com/RonaldSchlenker/Trulla" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Strongly typed text templates usable as type provider (F#) or source generator (C#)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trulla Templates&lt;/h1&gt; &#xA;&lt;p&gt;...it&#39;s like Handlebars or Mustache templates, but statically typed!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status: Stable&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;C# Source Generator: &lt;a href=&#34;https://www.nuget.org/packages/Trulla&#34;&gt;&lt;img src=&#34;http://img.shields.io/nuget/v/Trulla.svg?style=flat&#34; alt=&#34;NuGet Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;F# Type Provider: &lt;a href=&#34;https://www.nuget.org/packages/Trulla.SourceGenerator&#34;&gt;&lt;img src=&#34;http://img.shields.io/nuget/v/Trulla.SourceGenerator.svg?style=flat&#34; alt=&#34;NuGet Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The Trulla Approcah&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide a text template with: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;template parameters&lt;/li&gt; &#xA;   &lt;li&gt;iterations&lt;/li&gt; &#xA;   &lt;li&gt;conditionals&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A model type is infered from a given template.&lt;/li&gt; &#xA; &lt;li&gt;An instance of the model is provided by the user for rendering the final template.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples and Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C# usage via Source Generators: Go to the &lt;a href=&#34;https://raw.githubusercontent.com/RonaldSchlenker/Trulla/main/src/docs/SourceGenerator.md&#34;&gt;C# Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;F# usage via Type Providers: Go to the &lt;a href=&#34;https://raw.githubusercontent.com/RonaldSchlenker/Trulla/main/src/docs/TypeProvider.md&#34;&gt;F# Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General Template Syntax&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/RonaldSchlenker/Trulla/main/src/TypeProvider/Tests/RenderExamples.fs&#34;&gt;tests&lt;/a&gt; for more samples!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;for loops (with separator)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This will render &#39;abc&#39; for given chars = [&#34;a&#34;; &#34;b&#34;; &#34;c&#34;]:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{for c in chars}}{{c}}{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With a given separator between items, this will render &#39;a;b;c&#39; for given chars = [&#34;a&#34;; &#34;b&#34;; &#34;c&#34;]:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{for x in numbers|;}}{{x.id}}{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;if/else&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This will print &#34;Order is active.&#34; or &#34;Order is closed.&#34; depending on the value of order.isActive:&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;else&lt;/code&gt; part is optional.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Order is {{if order.isActive}}active{{else}}closed{{end}}.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works internals&lt;/h2&gt; &#xA;&lt;p&gt;Trulla is implemented in F#. It basically contains everything a &#34;real&#34; language has, like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a parser&lt;/li&gt; &#xA; &lt;li&gt;an untyped AST&lt;/li&gt; &#xA; &lt;li&gt;type inference with a solver&lt;/li&gt; &#xA; &lt;li&gt;a typed AST&lt;/li&gt; &#xA; &lt;li&gt;code generation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to know more, have a look at the (Internals)[./src/docs/Internals.md].&lt;/p&gt;</summary>
  </entry>
</feed>