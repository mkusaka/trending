<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-09T01:38:34Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>artempyanykh/marksman</title>
    <updated>2022-06-09T01:38:34Z</updated>
    <id>tag:github.com,2022-06-09:/artempyanykh/marksman</id>
    <link href="https://github.com/artempyanykh/marksman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Markdown LSP server providing completion, cross-references, diagnostics, and more.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/logo.png&#34; width=&#34;90&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;Marksman&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Markdown LSP server for note-taking and more.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/artempyanykh/marksman/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/artempyanykh/marksman/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Marksman is an LSP server for Markdown that provides &lt;strong&gt;completion&lt;/strong&gt;, goto &lt;strong&gt;definition&lt;/strong&gt;, find &lt;strong&gt;references&lt;/strong&gt;, &lt;strong&gt;diagnostics&lt;/strong&gt;, etc. It also supports &lt;strong&gt;wiki-link&lt;/strong&gt;-style references that enable &lt;a href=&#34;https://en.wikipedia.org/wiki/Zettelkasten&#34;&gt;Zettelkasten-like&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/#fn1&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; note taking. See more about Marksman&#39;s features below.&lt;/p&gt; &#xA;&lt;p&gt;Marksman &lt;strong&gt;works on MacOS, Linux, and Windows&lt;/strong&gt; and is distributed as a &lt;strong&gt;self-contained binary&lt;/strong&gt; for each OS.&lt;/p&gt; &#xA;&lt;p&gt;The server provides assistance with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Markdown inline links: &lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;This is [inline link](/some-file.md#some-heading).&#xA;This is an internal [anchor link](#heading).&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Markdown reference links: &lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;See [reference].&#xA;&#xA;[reference]: /url &#34;Title&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wiki-links: &lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;Link to [[another-note]].&#xA;Link to [[another-notes#heading]].&#xA;Internal link to [[#a-heading]].&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All types of links support completion, hover, goto definition/references. Additionally, Marksman provides diagnostics for wiki-links to detect broken references and duplicate/ambiguous headings.&lt;/p&gt; &#xA;&lt;h2&gt;Existing editor integrations&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/#fn3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VSCode via &lt;a href=&#34;https://github.com/artempyanykh/marksman-vscode&#34;&gt;Marksman VSCode&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Neovim via &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#marksman&#34;&gt;nvim-lspconfig&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(&lt;strong&gt;TODO&lt;/strong&gt;: &lt;em&gt;needs upstreaming&lt;/em&gt;) Emacs via Emacs LSP.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: use pre-built binary&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/artempyanykh/marksman/releases&#34;&gt;Releases&lt;/a&gt; page: each release has pre-built binaries for Linux, MacOS, and Windows. Download the binary for your OS.&lt;/li&gt; &#xA; &lt;li&gt;Rename the binary and make it executable: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MacOS: &lt;code&gt;mv marksman-macos marksman &amp;amp;&amp;amp; chmod +x marksman&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;mv marksman-linux marksman &amp;amp;&amp;amp; chmod +x marksman&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: rename &lt;code&gt;marksman-windows.exe&lt;/code&gt; to &lt;code&gt;marksman.exe&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Place the binary somewhere in your &lt;code&gt;PATH&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;XDG recommends using &lt;code&gt;$HOME/.local/bin/&lt;/code&gt; (make sure this folder is in your &lt;code&gt;PATH&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Option 2: build from source&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download&#34;&gt;Dotnet SDK&lt;/a&gt; for your OS.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/artempyanykh/marksman.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inside &lt;code&gt;marksman&lt;/code&gt; folder run &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The binary will be installed under &lt;code&gt;$HOME/.local/bin&lt;/code&gt; (make sure this folder is in your &lt;code&gt;PATH&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Below is a mix of VSCode, Neovim, and Emacs screenshots. Although, not all features demonstrated for each editor, generally most features should work equaly in all editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Document symbols&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Emacs: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/emacs-doc-symbols.png&#34; alt=&#34;Symbols Emacs&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hover preview&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VSCode, wiki link: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/vsc-wiki-hover.png&#34; alt=&#34;Hover-VSCode-Wiki&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Neovim, wiki link: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/nvim-wiki-hover.png&#34; alt=&#34;Hover-VSCode-Wiki&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Neovim, reference link: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/nvim-ref-hover.png&#34; alt=&#34;Hover-VSCode-Ref&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completion&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VSCode, wiki link: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/vsc-wiki-compl.png&#34; alt=&#34;Completion-VSCode-Wiki&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;VSCode, wiki link heading: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/vsc-wiki-heading-compl.png&#34; alt=&#34;Completion-VSCode-Wiki-Heading&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;VSCode, reference link: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/vsc-ref-compl.png&#34; alt=&#34;Completion-VSCode-Ref&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Neovim, inline link: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/nvim-inline-link-compl.png&#34; alt=&#34;Completion-Neovim-Inline&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Neovim, inline anchor link: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/nvim-inline-link-heading-compl.png&#34; alt=&#34;Completion-Neovim-Inline-Heading&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Neovim, wiki link heading: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/nvim-wiki-heading-compl.png&#34; alt=&#34;Completion-Neovim-Wiki-Heading&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Find references&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VSCode: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/vsc-find-references.png&#34; alt=&#34;Show references VSCode&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Neovim: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/nvim-find-references.png&#34; alt=&#34;Show references Neovim&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project-wide diagnostics&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;VSCode: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/vsc-diag.png&#34; alt=&#34;Diagnostics VSCode&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Neovim: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/nvim-diag.png&#34; alt=&#34;Diagnostics VSCode&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features and plans&lt;/h2&gt; &#xA;&lt;p&gt;âœ… - done; ðŸ—“ - planned.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;âœ… Completion for links (inline, reference, wiki).&lt;/li&gt; &#xA; &lt;li&gt;âœ… Hover prevew for links.&lt;/li&gt; &#xA; &lt;li&gt;âœ… &#34;Go to definition&#34; for links.&lt;/li&gt; &#xA; &lt;li&gt;âœ… &#34;Find references&#34; for headings and links.&lt;/li&gt; &#xA; &lt;li&gt;âœ… Diagnostics for wiki-links.&lt;/li&gt; &#xA; &lt;li&gt;âœ… Support multi-folder workspaces.&lt;/li&gt; &#xA; &lt;li&gt;âœ… Custom parser for more fine-grained note structure.&lt;/li&gt; &#xA; &lt;li&gt;ðŸ—“ Code Lens with &#34;# references&#34; on headings.&lt;/li&gt; &#xA; &lt;li&gt;ðŸ—“ Rename refactor.&lt;/li&gt; &#xA; &lt;li&gt;ðŸ—“ Add support for images (diagnostics, completion, goto).&lt;/li&gt; &#xA; &lt;li&gt;ðŸ—“ Add &#34;check&#34; command for standalone workspace checking.&lt;/li&gt; &#xA; &lt;li&gt;ðŸ—“ Add &#34;build&#34; command that rewrites all cross-references into proper relative markdown links for further embedding into a static site generator such as Jekyll or Hakyll.&lt;/li&gt; &#xA; &lt;li&gt;ðŸ—“ Support for Jupyter notebooks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where&#39;s &lt;code&gt;zeta-note&lt;/code&gt; and where&#39;s Rust?&lt;/h2&gt; &#xA;&lt;p&gt;After much deliberation, I&#39;ve decided that it&#39;d be &lt;em&gt;cheaper&lt;/em&gt; for me to write a new from-scratch implementation of the language server &lt;strong&gt;in F#&lt;/strong&gt; and add new features to it, than it is to add new features to the Rust version.&lt;/p&gt; &#xA;&lt;p&gt;The original Rust implementation is archived &lt;a href=&#34;https://github.com/artempyanykh/zeta-note&#34;&gt;in a separate repo&lt;/a&gt;. Further development will happen in this repository in F#.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span id=&#34;fn1&#34;&gt;[1]&lt;/span&gt;: You may have heard about &lt;a href=&#34;https://roamresearch.com&#34;&gt;Roam Research&lt;/a&gt;. This is a commercial implementation of the Zettelkasten method and another point of reference for what Marksman is about. However, unlike a proprietary Roam Research, Zeta Note is free, open-source and integrated into your favourite editor (albeit for not not as feature rich as Roam Research).&lt;/p&gt; &#xA;&lt;p&gt;&lt;span id=&#34;fn2&#34;&gt;[2]&lt;/span&gt;: There is an excellent VSCode extension called &lt;a href=&#34;https://github.com/svsool/vscode-memo&#34;&gt;Markdown Memo&lt;/a&gt;. You definitely need to check it out if you&#39;re primarily using VSCode as it has some features that are missing in Marksman and &lt;a href=&#34;https://github.com/artempyanykh/marksman-vscode&#34;&gt;Marksman VSCode extension&lt;/a&gt;. However, Markdown Memo is VSCode specific while Marksman is a generic language server, so can be used with any editor that has LSP support: Emacs, Vim, Neovim, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span id=&#34;fn3&#34;&gt;[3]&lt;/span&gt;: Since Marksman is a regular Language Server most of the functionality works out of the box with any LSP client.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ninjarobot/FsPdf</title>
    <updated>2022-06-09T01:38:34Z</updated>
    <id>tag:github.com,2022-06-09:/ninjarobot/FsPdf</id>
    <link href="https://github.com/ninjarobot/FsPdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Builds PDF&#39;s from pure F# (and needs a more interesting name)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FsPdf&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Builds PDF&#39;s from pure F# (and needs a more interesting name)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ninjarobot/FsPdf/actions/workflows/build-and-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/ninjarobot/FsPdf/actions/workflows/build-and-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FsPdf/&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/FsPdf&#34; alt=&#34;FsPdf on Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generates PDF content to enable developers to build PDF&#39;s programatically. PDF&#39;s are helpful for offline documentation, printing, certificates of achievement, TPS reports, customer invoices, taxes, or being an actuary.&lt;/p&gt; &#xA;&lt;h3&gt;What works?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Makes a PDF without any extra dependencies (beyond a .NET Standard 2.0 runtime).&lt;/li&gt; &#xA; &lt;li&gt;Simple page layout formatting.&lt;/li&gt; &#xA; &lt;li&gt;Paths and shapes.&lt;/li&gt; &#xA; &lt;li&gt;Formatted text.&lt;/li&gt; &#xA; &lt;li&gt;A higher level DSL so you&#39;re not working with PDF primitives.&lt;/li&gt; &#xA; &lt;li&gt;Word wrap - wraps at spaces between words (left aligned text).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What&#39;s in progress&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A nicer DSL for building text without having to understand PDF instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Then what?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Font embedding.&lt;/li&gt; &#xA; &lt;li&gt;Images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;Here is an example of a &lt;a href=&#34;https://gist.github.com/ninjarobot/550331efbe260f18a2a64352213af12b&#34;&gt;PDF&lt;/a&gt; generated by &lt;a href=&#34;https://github.com/ninjarobot/FsPdf/raw/171a8d665f7b5a4cf1f80e6f2291d8e05a7b8a2b/tests/FsPdf.Tests/Tests.fs#L49&#34;&gt;this test&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;F# API&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;PdfFile&lt;/code&gt; type is the main type to create, and it contains document metadata as well as a &#34;catalog&#34; which holds the pages themselves. The catalog has a default page size that will apply to all pages unless they override it.&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;Page&lt;/code&gt; holds &lt;code&gt;Resources&lt;/code&gt; (currently just fonts), the contents as a list of PDF stream instructions, and optionally can override the page media to have a different page size. Because the instructions themselves are low level, there are some helpful functions for building shapes, wrapping strings, etc.&lt;/p&gt; &#xA;&lt;p&gt;The result looks roughly like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let pdf =&#xA;    {&#xA;        Catalog =&#xA;            {&#xA;                PageLayout = SinglePage&#xA;                DefaultMedia = Media.Letter&#xA;                Pages =&#xA;                    [&#xA;                        {&#xA;                            Resources =&#xA;                                Map.empty&#xA;                                |&amp;gt; Map.add &#34;F1&#34; (FontResource (Type1, &#34;Helvetica&#34;))&#xA;                            Contents =&#xA;                                [&#xA;                                    BeginText&#xA;                                    Leading (20)&#xA;                                    FontSize (&#34;F1&#34;, 12.)&#xA;                                    NextLineTranslate (50, 600)&#xA;                                    ShowText &#34;hello world&#34;&#xA;                                    EndText&#xA;                                ]&#xA;                            MediaSize = Some (Letter)&#xA;                        }&#xA;                    ]&#xA;            }&#xA;        Info = None&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a PDF with a single page. The page contains some text, set at 50 points from the left side and 600 points from the bottom of the page.&lt;/p&gt;</summary>
  </entry>
</feed>