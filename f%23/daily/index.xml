<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-22T01:34:59Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>easybuild-org/EasyBuild.FileSystemProvider</title>
    <updated>2024-04-22T01:34:59Z</updated>
    <id>tag:github.com,2024-04-22:/easybuild-org/EasyBuild.FileSystemProvider</id>
    <link href="https://github.com/easybuild-org/EasyBuild.FileSystemProvider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EasyBuild.FileSystemProvider&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/EasyBuild.FileSystemProvider&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/EasyBuild.FileSystemProvider.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mangelmaxime.github.io/sponsors/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Sponsors-EA4AAA&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;EasyBuild.FileSystemProvider is a library that provides a set of F# Type Providers to provide a typed representation of files and directories based on your project structure or a virtual file system.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;In every project of mine, I need to orchestrate tasks like building, testing, etc. which involves working with files and directories. The standard way of doing it is by using hardcoded &lt;code&gt;string&lt;/code&gt; but it is easy to break. You also need to remember what is current working directory or relative path you are working with.&lt;/p&gt; &#xA;&lt;p&gt;To fix this problem, I created this library that provides 2 F# Type Providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RelativeFileSystemProvider&lt;/code&gt;, typed representation of files and directories based on your project structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;VirtualFileSystemProvider&lt;/code&gt;, typed representation of files and directories based on a virtual file system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;When to use each one?&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;RelativeFileSystemProvider&lt;/code&gt; when you want to access files and directories that are tracked in your project. For example, you want to access the path of your &lt;code&gt;fsproj&lt;/code&gt; file or a &lt;code&gt;public&lt;/code&gt; assets folder.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;VirtualFileSystemProvider&lt;/code&gt; when you want to access files and directories that are not tracked in your project. For example, you want to use a destination folder or access a &lt;code&gt;obj&lt;/code&gt;, &lt;code&gt;bin&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet add package EasyBuild.FileSystemProvider&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;RelativeFileSystemProvider&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Provide a representation based on your file system structure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open EasyBuild.FileSystemProvider&#xA;&#xA;// Path the relative path you want to work with&#xA;// You can use `&#34;.&#34;` or `&#34;&#34;` to represent the current directory&#xA;&#xA;type Workspace = RelativeFileSystem&amp;lt;&#34;.&#34;&amp;gt;&#xA;&#xA;type SourceWorkspace = RelativeFileSystem&amp;lt;&#34;./src/&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each folder have 2 special properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;``.``&lt;/code&gt;: Represents the current folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;``..``&lt;/code&gt;: Represents the parent folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Imagine you have the following project structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/home/project/&#xA;├── client/&#xA;│   ├── index.html&#xA;│   └── app.js&#xA;└── docs/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Workspace represents the root folder `/home/project/`&#xA;type Workspace = RelativeFileSystem&amp;lt;&#34;.&#34;&amp;gt;&#xA;&#xA;Workspace.client.``index.html`` // gives you &#34;/home/project/client/index.html&#34;&#xA;Workspace.client.``.`` // gives you &#34;/home/project/client&#34;&#xA;Workspace.client.``..``.docs // gives you &#34;/home/project/docs&#34;&#xA;// etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] At the time of writing, &lt;code&gt;RelativeFileSystemProvider&lt;/code&gt; does not watch you filesystem for changes. In order for your IDE, to pick changes, you either need to restart it or make a change to &lt;code&gt;RelativeFileSystemProvider&amp;lt;&#34;.&#34;&amp;gt;&lt;/code&gt; to force a refresh.&lt;/p&gt; &#xA; &lt;p&gt;This is &lt;a href=&#34;https://github.com/easybuild-org/EasyBuild.FileSystemProvider/issues/1&#34;&gt;planned&lt;/a&gt; to be improved in the future&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;code&gt;VirtualFileSystemProvider&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Provide a representation based on a virtual file system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open EasyBuild.FileSystemProvider&#xA;&#xA;type VirtualWorkspace =&#xA;    VirtualFileSystem&amp;lt;&#xA;        &#34;.&#34;,    // Relative path for the root folder&#xA;        &#34;&#34;&#34;&#xA;dist&#xA;    client&#xA;        index.html&#xA;        app.js&#xA;docs/&#xA;public&#xA;    style.css&#xA;    &#34;&#34;&#34;&#xA;     &amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Empty directories are represented by a line with the directory name followed by &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;docs/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Files are represented by a line with the file name:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;index.html&#xA;docs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Here &lt;code&gt;docs&lt;/code&gt; is a file, not a directory because it does not have a &lt;code&gt;/&lt;/code&gt; at the end.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Indentation is used to represent the hierarchy of the files and directories.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;[!NOTE] You can use any number of spaces or tabs for indentation.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;dist&#xA;    client&#xA;        index.html&#xA;        app.js&#xA;docs/&#xA;public&#xA;    style.css&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;We consider that you are initializing the &lt;code&gt;VirtualWorkspace&lt;/code&gt; at &lt;code&gt;/home/project/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// VirtualWorkspace represents the root folder `/home/project/`&#xA;type VirtualWorkspace =&#xA;    VirtualFileSystem&amp;lt;&#xA;        &#34;.&#34;,&#xA;        &#34;&#34;&#34;&#xA;dist&#xA;    client&#xA;        index.html&#xA;        app.js&#xA;docs/&#xA;public&#xA;    style.css&#xA;    &#34;&#34;&#34;&#xA;     &amp;gt;&#xA;&#xA;VirtualWorkspace.dist.client.``index.html`` // gives you &#34;/home/project/dist/client/index.html&#34;&#xA;VirtualWorkspace.dist.client.``.`` // gives you &#34;/home/project/dist/client&#34;&#xA;VirtualWorkspace.dist.``..``.docs.``.`` // gives you &#34;/home/project/docs&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute to this project, and see errors in the &lt;code&gt;build&lt;/code&gt; because of the Type Providers, it is possible that you need to build them manually once.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotnet build src&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reload the project in your IDE&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Everything should be fine now&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>