<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-04T01:36:48Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>misterspeedy/FsExcel</title>
    <updated>2023-06-04T01:36:48Z</updated>
    <id>tag:github.com,2023-06-04:/misterspeedy/FsExcel</id>
    <link href="https://github.com/misterspeedy/FsExcel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An F# Excel spreadsheet generator&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/misterspeedy/FsExcel/main/assets/logo.png&#34; alt=&#34;FsExcel Logo&#34; style=&#34;width: 150px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/fsexcel&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/fsexcel.svg?style=social&amp;amp;label=Twitter%20%40FsExcel&#34; alt=&#34;Twitter URL&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/FsExcel/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Fsexcel&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Welcome!&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to FsExcel, a library for generating Excel spreadsheets using very simple code.&lt;/p&gt; &#xA;&lt;p&gt;FsExcel is based on &lt;a href=&#34;https://github.com/ClosedXML/ClosedXML&#34;&gt;ClosedXML&lt;/a&gt; but abstracts away many of the complications of building spreadsheets cell by cell.&lt;/p&gt; &#xA;&lt;p&gt;This tutorial is also available as an &lt;a href=&#34;https://raw.githubusercontent.com/misterspeedy/FsExcel/main/src/Notebooks/Tutorial.dib&#34; download=&#34;Tutorial.dib&#34;&gt;interactive notebook&lt;/a&gt;. Download it, open in Visual Studio Code, and start generating spreadsheets for real!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Contributors&lt;/em&gt; - please see &lt;a href=&#34;https://raw.githubusercontent.com/misterspeedy/FsExcel/main/Contributing.md&#34;&gt;Contributing.md&lt;/a&gt; for getting-started information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Usage example&lt;/em&gt; - for an example of FsExcel in action, see &lt;a href=&#34;http://www.pushbuttonreceivetables.com&#34;&gt;http://www.pushbuttonreceivetables.com&lt;/a&gt;. Source code on &lt;a href=&#34;https://github.com/misterspeedy/HtmlExcel&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Hello World&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s the complete code to generate a spreadsheet with a single cell containing a string.&lt;/p&gt; &#xA;&lt;p&gt;Run this and you should find a spreadsheet called &lt;code&gt;HelloWorld.xlsx&lt;/code&gt; in your &lt;code&gt;/temp&lt;/code&gt; folder. (Change the path to suit.)&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// For scripts only; for programs, use NuGet to install FsExcel:&#xA;#r &#34;nuget: FsExcel&#34;&#xA;&#xA;let savePath = &#34;/temp&#34;&#xA;&#xA;open System.IO&#xA;open FsExcel&#xA;&#xA;[&#xA;    Cell [ String &#34;Hello world!&#34; ]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;HelloWorld.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/HelloWorld.PNG?raw=true&#34; alt=&#34;Hello World example&#34; style=&#34;width: 120px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This example embodies the main stages of building a spreadsheet using FsExcel:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build a list using a list comprehension: &lt;code&gt;[ ... ]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the list make cells using &lt;code&gt;Cell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Each cell gets a list of properties, in this case just the cell content, which here is a string: &lt;code&gt;String &#34;Hello world!&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you&#39;ve used &lt;code&gt;Fable.React&lt;/code&gt;, or a similar library, you&#39;ll already be familiar with the concepts so far.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Send the resulting list to &lt;code&gt;FsExcel.Render.AsFile&lt;/code&gt;, providing a path.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Multiple Cells&lt;/h2&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open FsExcel&#xA;&#xA;[&#xA;    for i in 1..10 do&#xA;        Cell [ Integer i ]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;MultipleCells.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/MultipleCells.PNG?raw=true&#34; alt=&#34;Multiple Cells example&#34; style=&#34;width: 500px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here we use a &lt;code&gt;for...&lt;/code&gt; comprehension to build multiple cells. (Don&#39;t panic: we could have used &lt;code&gt;List.map&lt;/code&gt; instead!)&lt;/p&gt; &#xA;&lt;p&gt;By default each new cell is put on the right of its predecessor.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Vertical Movement&lt;/h2&gt; &#xA;&lt;p&gt;If you want the next cell to be rendered below instead of to the right, you can add a &lt;code&gt;Next(DownBy 1)&lt;/code&gt; property to the cell:&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;&#xA;[&#xA;    for m in 1..12 do&#xA;        let monthName = CultureInfo.GetCultureInfoByIetfLanguageTag(&#34;en-GB&#34;).DateTimeFormat.GetMonthName(m)&#xA;        Cell [&#xA;            String monthName&#xA;            Next(DownBy 1)&#xA;        ]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;VerticalMovement.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/VerticalMovement.PNG?raw=true&#34; alt=&#34;Vertical Movement example&#34; style=&#34;width: 100px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;code&gt;Next&lt;/code&gt; property overrides the default behaviour of rendering each successive cell one to the right. In this case we override it with a &#39;go down by 1&#39; behaviour.&lt;/p&gt; &#xA;&lt;p&gt;But what if you want a table of cells? Use the default behaviour for each cell in a row except the last. In the last cell use &lt;code&gt;Next NewRow&lt;/code&gt;. This causes the next cell to be rendered in column 1 of the next row.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;&#xA;[&#xA;    for m in 1..12 do&#xA;        let monthName = CultureInfo.GetCultureInfoByIetfLanguageTag(&#34;en-GB&#34;).DateTimeFormat.GetMonthName(m)&#xA;        Cell [&#xA;            String monthName&#xA;        ]&#xA;        Cell [&#xA;            Integer monthName.Length&#xA;            Next NewRow&#xA;        ]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;Rows.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/Rows.PNG?raw=true&#34; alt=&#34;Rows example&#34; style=&#34;width: 150px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Maybe you don&#39;t like the idea of saying where to go next in the properties of a cell. No problem, you can have standalone position-control with the &lt;code&gt;Go&lt;/code&gt; instruction:&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;&#xA;[&#xA;    for m in 1..12 do&#xA;        let monthName = CultureInfo.GetCultureInfoByIetfLanguageTag(&#34;en-GB&#34;).DateTimeFormat.GetMonthName(m)&#xA;        Cell [ String monthName ]&#xA;        Cell [ Integer monthName.Length ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;RowsGo.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/RowsGo.PNG?raw=true&#34; alt=&#34;Rows Go example&#34; style=&#34;width: 150px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Indentation&lt;/h2&gt; &#xA;&lt;p&gt;Maybe you want a series of rows that don&#39;t start in column 1. Use &lt;code&gt;Indent&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;&#xA;[&#xA;    Go(Indent 2)&#xA;&#xA;    for m in 1..12 do&#xA;        let monthName = CultureInfo.GetCultureInfoByIetfLanguageTag(&#34;en-GB&#34;).DateTimeFormat.GetMonthName(m)&#xA;        Cell [ String monthName ]&#xA;        Cell [ Integer monthName.Length ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;Indentation.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/Indentation.PNG?raw=true&#34; alt=&#34;Indentation example&#34; style=&#34;width: 220px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now each row begins at column 2.&lt;/p&gt; &#xA;&lt;p&gt;Indents apply to all &lt;code&gt;NewRow&lt;/code&gt; operations until some other indent value is set using &lt;code&gt;Go(Indent n)&lt;/code&gt;. Specify no indenting with &lt;code&gt;Go(Indent 1)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can specify indents relative to the current indent level using &lt;code&gt;Go(IndentBy n)&lt;/code&gt; where &lt;em&gt;n&lt;/em&gt; can be a positive or negative integer.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Border and Font Styling&lt;/h2&gt; &#xA;&lt;p&gt;You can add border styling and font emphasis (bold, italic, underline or strikethrough) styling using &lt;code&gt;Border (...)&lt;/code&gt; and &lt;code&gt;FontEmphasis ...&lt;/code&gt; cell properties.&lt;/p&gt; &#xA;&lt;p&gt;The border style values are in &lt;code&gt;ClosedXML.Excel.XLBorderStyleValues&lt;/code&gt; and the underline values are in &lt;code&gt;ClosedXML.Excel.XLFontUnderlineValues&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;[&#xA;    for heading in [&#34;Month&#34;; &#34;Letter Count&#34;] do&#xA;        Cell [&#xA;            String heading&#xA;            Border (Border.Bottom XLBorderStyleValues.Medium)&#xA;            FontEmphasis Bold&#xA;            FontEmphasis Italic&#xA;        ]&#xA;    Go NewRow&#xA;    &#xA;    for m in 1..12 do&#xA;        let monthName = CultureInfo.GetCultureInfoByIetfLanguageTag(&#34;en-GB&#34;).DateTimeFormat.GetMonthName(m)&#xA;        Cell [ &#xA;            String monthName&#xA;            FontEmphasis (Underline XLFontUnderlineValues.DoubleAccounting)&#xA;            if monthName = &#34;May&#34; then&#xA;                FontEmphasis StrikeThrough&#xA;        ]&#xA;        Cell [ Integer monthName.Length ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;Styling.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/Styling.PNG?raw=true&#34; alt=&#34;Styling example&#34; style=&#34;width: 150px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;As they are just list items, styles can be composed and applied together as a list. You&#39;ll need a &lt;code&gt;yield!&lt;/code&gt; to include these multiple elements in your cell property list.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;let headingStyle = &#xA;    [&#xA;        Border(Border.Bottom XLBorderStyleValues.Medium)&#xA;        FontEmphasis Bold&#xA;        FontEmphasis Italic &#xA;    ]&#xA;&#xA;[&#xA;    for heading in [&#34;Month&#34;; &#34;Letter Count&#34;] do&#xA;        Cell [&#xA;            String heading&#xA;            yield! headingStyle&#xA;        ]&#xA;    Go NewRow&#xA;    &#xA;    for m in 1..12 do&#xA;        let monthName = CultureInfo.GetCultureInfoByIetfLanguageTag(&#34;en-GB&#34;).DateTimeFormat.GetMonthName(m)&#xA;        Cell [ String monthName ]&#xA;        Cell [ Integer monthName.Length ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;ComposedStyling.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Font Name and Size&lt;/h2&gt; &#xA;&lt;p&gt;You can set the font name using &lt;code&gt;FontName&lt;/code&gt; and the size using &lt;code&gt;FontSize&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;// ClosedXml currently depends on SixLabors.Fonts - &#xA;// we use that to enumerate fonts so this code works cross-platform:&#xA;let fontNames = &#xA;    SixLabors.Fonts.SystemFonts.Collection.Families&#xA;    |&amp;gt; Seq.map (fun font -&amp;gt; font.Name)&#xA;    |&amp;gt; Seq.sort&#xA;    |&amp;gt; Seq.truncate 20&#xA;&#xA;[&#xA;    for i, fontName in fontNames |&amp;gt; Seq.indexed do&#xA;        Cell [&#xA;            String fontName&#xA;            FontName fontName&#xA;            FontSize (10 + (i * 2) |&amp;gt; float)&#xA;        ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;FontNameSize.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/FontNameSize.PNG?raw=true&#34; alt=&#34;Number Format and Alignment example&#34; style=&#34;width: 250px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Wrap Text&lt;/h2&gt; &#xA;&lt;p&gt;You can wrap text in cells with long sentences/many words using &lt;code&gt;WrapText true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;[&#xA;    Cell [ String &#34;Without wrap text:&#34;&#xA;           HorizontalAlignment Center&#xA;           VerticalAlignment Middle&#xA;           CellSize (ColWidth 16) ]&#xA;    Cell [ String &#34;The quick brown fox jumps over the lazy dog.&#34;&#xA;           HorizontalAlignment Center&#xA;           VerticalAlignment Middle ]&#xA;    Go NewRow&#xA;    Cell [ String &#34;With wrap text:&#34;&#xA;           HorizontalAlignment Center&#xA;           VerticalAlignment Middle &#xA;           CellSize (ColWidth 16) ]&#xA;    Cell [ String &#34;The quick brown fox jumps over the lazy dog.&#34;&#xA;           HorizontalAlignment Center&#xA;           VerticalAlignment Middle&#xA;           WrapText true ]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;WrapText.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/WrapText.PNG?raw=true&#34; alt=&#34;Wrap Text Example&#34; style=&#34;width: 350px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Text Rotation&lt;/h2&gt; &#xA;&lt;p&gt;You can rotate text between -90° and +90° with &lt;code&gt;TextRotation n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open FsExcel&#xA;&#xA;let p, m, g = &#34;⏺&#34;, &#34;◑&#34;, &#34;⭘&#34;&#xA;let performances = &#xA;    [|&#xA;        [| p; m; g; g; p;  p; g; p; p; g |]&#xA;        [| g; m; g; m; g;  p; g; p; p; g |]&#xA;        [| g; m; m; g; g;  p; g; g; p; g |]&#xA;        [| m; m; m; p; p;  p; g; m; p; g |]&#xA;    &#xA;        [| p; p; p; p; g;  g; m; m; p; g |]&#xA;        [| p; g; p; g; g;  g; p; g; m; m |]&#xA;        [| g; p; g; p; m;  p; m; p; p; g |]&#xA;        [| p; p; m; g; p;  p; p; m; p; m |]&#xA;    |]&#xA;&#xA;let getPerformance (categoryIndex : int) (supplierIndex : int) =&#xA;    performances[supplierIndex-1][categoryIndex-1]&#xA;&#xA;[&#xA;    Go (RC(1, 2))&#xA;    for category in 1..10 do&#xA;        Cell [String $&#34;Category {category}&#34;; TextRotation 45; CellSize (RowHeight 45)]&#xA;    Go NewRow&#xA;    for supplier in 1..8 do&#xA;        Cell [String $&#34;Supplier {supplier}&#34;; CellSize (ColWidth 10)]&#xA;        Go NewRow&#xA;    Go (RC(2, 2))&#xA;    Go (Indent 2)&#xA;    for supplier in 1..8 do&#xA;        for category in 1..10 do&#xA;            Cell [ String (getPerformance category supplier); HorizontalAlignment Center]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (System.IO.Path.Combine(savePath, &#34;TextRotation.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/TextRotation.PNG?raw=true&#34; alt=&#34;Wrap Text Example&#34; style=&#34;width: 500px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Number Formatting and Alignment&lt;/h2&gt; &#xA;&lt;p&gt;Number styling can be applied using standard Excel format strings. You can also apply horizontal alignment.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;module PseudoRandom =&#xA;&#xA;    let mutable state = 1u&#xA;    let mangle (n : UInt64) = (n &amp;amp;&amp;amp;&amp;amp; (0x7fffffff |&amp;gt; uint64)) + (n &amp;gt;&amp;gt;&amp;gt; 31)&#xA;&#xA;    let nextDouble() =&#xA;        state &amp;lt;- (state |&amp;gt; uint64) * 48271UL |&amp;gt; mangle |&amp;gt; mangle |&amp;gt; uint32&#xA;        (float state) / (float Int32.MaxValue)&#xA;&#xA;let headingStyle = &#xA;    [&#xA;        Border(Border.Bottom XLBorderStyleValues.Medium)&#xA;        FontEmphasis Bold&#xA;        FontEmphasis Italic &#xA;    ]&#xA;&#xA;[&#xA;    for heading, alignment in [&#34;Stock Item&#34;, Left; &#34;Price&#34;, Right ; &#34;Count&#34;, Right] do&#xA;        Cell [&#xA;            String heading&#xA;            yield! headingStyle&#xA;            HorizontalAlignment alignment&#xA;        ]&#xA;    &#xA;    Go NewRow&#xA;&#xA;    for item in [&#34;Apples&#34;; &#34;Oranges&#34;; &#34;Pears&#34;] do&#xA;        Cell [&#xA;            String item&#xA;        ]&#xA;        Cell [&#xA;            Float ((PseudoRandom.nextDouble()*1000.))&#xA;            FormatCode &#34;$0.00&#34;&#xA;        ]&#xA;        Cell [&#xA;            Integer (int (PseudoRandom.nextDouble()*100.))&#xA;            FormatCode &#34;#,##0&#34;&#xA;        ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;NumberFormatAndAlignment.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/NumberFormatAndAlignment.PNG?raw=true&#34; alt=&#34;Number Format and Alignment example&#34; style=&#34;width: 250px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Formulae&lt;/h2&gt; &#xA;&lt;p&gt;You can add a formula to a cell using &lt;code&gt;FormulaA1(...)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently only the &lt;code&gt;A1&lt;/code&gt; style of cell referencing is supported, meaning that you will need to keep track of the column letter and row number you want to refer to:&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;module PseudoRandom =&#xA;&#xA;    let mutable state = 1u&#xA;    let mangle (n : UInt64) = (n &amp;amp;&amp;amp;&amp;amp; (0x7fffffff |&amp;gt; uint64)) + (n &amp;gt;&amp;gt;&amp;gt; 31)&#xA;&#xA;    let nextDouble() =&#xA;        state &amp;lt;- (state |&amp;gt; uint64) * 48271UL |&amp;gt; mangle |&amp;gt; mangle |&amp;gt; uint32&#xA;        (float state) / (float Int32.MaxValue)&#xA;&#xA;let headingStyle = &#xA;    [&#xA;        Border(Border.Bottom XLBorderStyleValues.Medium)&#xA;        FontEmphasis Bold&#xA;        FontEmphasis Italic &#xA;    ]&#xA;&#xA;[&#xA;    for heading, alignment in [&#34;Stock Item&#34;, Left; &#34;Price&#34;, Right ; &#34;Count&#34;, Right; &#34;Total&#34;, Right] do&#xA;        Cell [&#xA;            String heading&#xA;            yield! headingStyle&#xA;            HorizontalAlignment alignment&#xA;        ]&#xA;    &#xA;    Go NewRow&#xA;&#xA;    for index, item in [&#34;Apples&#34;; &#34;Oranges&#34;; &#34;Pears&#34;] |&amp;gt; List.indexed do&#xA;        Cell [&#xA;            String item&#xA;        ]&#xA;        Cell [&#xA;            Float (PseudoRandom.nextDouble()*1000.)&#xA;            FormatCode &#34;$0.00&#34;&#xA;        ]&#xA;        Cell [&#xA;            Integer (int (PseudoRandom.nextDouble()*1000.))&#xA;            FormatCode &#34;#,##0&#34;&#xA;        ]&#xA;        Cell [&#xA;            FormulaA1 $&#34;=B{index+2}*C{index+2}&#34;&#xA;            FormatCode &#34;$#,##0.00&#34;&#xA;        ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;Formulae.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/Formulae.PNG?raw=true&#34; alt=&#34;Styling example&#34; style=&#34;width: 300px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Color&lt;/h2&gt; &#xA;&lt;p&gt;Set the font color with &lt;code&gt;FontColor&lt;/code&gt; and the background color with the &lt;code&gt;BackgroundColor&lt;/code&gt; property. Set the border color with &lt;code&gt;BorderColor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The color values and color creation functions are in &lt;code&gt;ClosedXml.Excel.XLColor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;[&#xA;    let values = [0..32..224] @ [255]&#xA;    for r in values do&#xA;        for g in values do&#xA;            for b in values do&#xA;                // N.B. the API refuses to fill a cell with black if its font is black&#xA;                // so the very first cell won&#39;t be colored.&#xA;                let backgroundColor = ClosedXML.Excel.XLColor.FromArgb(0, r, g, b)&#xA;                let fontColor = ClosedXML.Excel.XLColor.FromArgb(0, b, r, g)&#xA;                let borderColor = ClosedXML.Excel.XLColor.FromArgb(0, g, b, r)&#xA;                Cell [&#xA;                    String $&#34;R={r};G={g};B={b}&#34;&#xA;                    FontColor fontColor&#xA;                    BackgroundColor backgroundColor&#xA;                    Border (Border.Top XLBorderStyleValues.Thick)&#xA;                    Border (Border.Right XLBorderStyleValues.Thick)&#xA;                    Border (Border.Bottom XLBorderStyleValues.Thick)&#xA;                    Border (Border.Left XLBorderStyleValues.Thick)&#xA;                    // Could also have used Border.All:&#xA;                    // Border (Border.All XLBorderStyleValues.Thick)&#xA;                    BorderColor (BorderColor.Top borderColor)&#xA;                    BorderColor (BorderColor.Right borderColor)&#xA;                    BorderColor (BorderColor.Bottom borderColor)&#xA;                    BorderColor (BorderColor.Left borderColor)&#xA;                    // Could also have used BorderColor.All:&#xA;                    // BorderColor (BorderColor.All borderColor)&#xA;                ]&#xA;            Go NewRow&#xA;        Go NewRow&#xA;&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;Color.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/Color.PNG?raw=true&#34; alt=&#34;Color example&#34; style=&#34;width: 400px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Range Styles&lt;/h2&gt; &#xA;&lt;p&gt;You can apply any properties to all cells from a point in your code using &lt;code&gt;Style [ prop; prop...]&lt;/code&gt;. Don&#39;t forget to reset style with &lt;code&gt;Style []&lt;/code&gt; afterwards.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;module PseudoRandom =&#xA;&#xA;    let mutable state = 1u&#xA;    let mangle (n : UInt64) = (n &amp;amp;&amp;amp;&amp;amp; (0x7fffffff |&amp;gt; uint64)) + (n &amp;gt;&amp;gt;&amp;gt; 31)&#xA;&#xA;    let nextDouble() =&#xA;        state &amp;lt;- (state |&amp;gt; uint64) * 48271UL |&amp;gt; mangle |&amp;gt; mangle |&amp;gt; uint32&#xA;        (float state) / (float Int32.MaxValue)&#xA;&#xA;[&#xA;    Style [&#xA;        Border(Border.Bottom XLBorderStyleValues.Medium)&#xA;        FontEmphasis Bold&#xA;        FontEmphasis Italic &#xA;    ]&#xA;    for heading in [&#34;Stock Item&#34;; &#34;Price&#34;; &#34;Count&#34;] do&#xA;        Cell [ String heading ]&#xA;    Style []&#xA;    &#xA;    Go NewRow&#xA;    for item in [&#34;Apples&#34;; &#34;Oranges&#34;; &#34;Pears&#34;] do&#xA;        Cell [&#xA;            String item&#xA;        ]&#xA;        Style [ FontEmphasis Italic ]        &#xA;        Cell [&#xA;            Float ((PseudoRandom.nextDouble()*1000.))&#xA;            FormatCode &#34;$0.00&#34;&#xA;        ]&#xA;        Cell [&#xA;            Integer (int (PseudoRandom.nextDouble()*100.))&#xA;            FormatCode &#34;#,##0&#34;&#xA;        ]&#xA;        Style []&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;RangeStyle.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/RangeStyle.PNG?raw=true&#34; alt=&#34;Range Style example&#34; style=&#34;width: 250px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Adding a Border to Merged Cells&lt;/h2&gt; &#xA;&lt;p&gt;To add a border to all cells in an Item list that includes &lt;em&gt;merged cells&lt;/em&gt;, use:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;BorderMergedCell [ BorderType (Border.x XLBorderStyleValues.[......]); ColorBorder (BorderColor.x (XLColor.FromArgb(0, 68, 114, 196)))]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;where &lt;em&gt;x&lt;/em&gt; = [All, Top, Right, Bottom, Left]. Include this border styling &lt;em&gt;after&lt;/em&gt; any merged cells.&lt;/p&gt; &#xA;&lt;p&gt;Other styling such as background color, font emphasis, font style etc. can be applied to all cells (including merged cells) using &lt;code&gt;Style [prop; prop...]&lt;/code&gt; at the &lt;em&gt;start&lt;/em&gt; of the Item list as outlined above. These styling propeties are retained when a cell is merged, unlike with cell borders.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System&#xA;open ClosedXML.Excel&#xA;open FsExcel &#xA;&#xA;&#xA;[   Go NewRow&#xA;    for heading, colWidth in [&#34;ID&#34;, 3.22; &#34;Car Name&#34;, 10.33; &#34;Car Description&#34;, 49.33; &#34;Car Regestration&#34;, 16.89 ] do&#xA;        Cell [&#xA;            String heading&#xA;            FontEmphasis Bold&#xA;            FontName &#34;Calibri&#34;&#xA;            FontSize 11&#xA;            HorizontalAlignment Center&#xA;            FontColor (XLColor.FromArgb(0, 255, 255, 255))&#xA;            BackgroundColor (XLColor.FromArgb(0, 68, 114, 196))&#xA;            Border (Border.All XLBorderStyleValues.Thin)&#xA;            CellSize (ColWidth colWidth)&#xA;        ]&#xA;    Go NewRow&#xA;    Style [ HorizontalAlignment Center&#xA;            VerticalAlignment Middle&#xA;            BackgroundColor (XLColor.FromArgb(0, 240, 240, 210))]&#xA;    Cell [  Integer 1&#xA;            //HorizontalAlignment Left&#xA;            //VerticalAlignment TopMost&#xA;            Name &#34;ID&#34; ] &#xA;    Cell [  String &#34;Ford Fiesta&#34; ]&#xA;            //HorizontalAlignment Center&#xA;            //VerticalAlignment Middle ] &#xA;    Cell [  String &#34;Car Technical Details:&#34;&#xA;            Next (DownBy 1) ]&#xA;    Cell [  String &#34;Technical Detail 1&#34;&#xA;            Next (DownBy 1) ]&#xA;    Cell [  String &#34;Technical Detail 2&#34;&#xA;            Next (DownBy 1)]&#xA;    Cell [  String &#34;Technical Detail 3&#34;&#xA;            Name &#34;LastL&#34; ]&#xA;    Go (RC (3, 4))&#xA;    Cell [  String &#34;AB12 CDE&#34; &#xA;            //HorizontalAlignment Right&#xA;            //VerticalAlignment Base&#xA;            Name &#34;Reg&#34; ]&#xA;    Go (RC (6, 4))&#xA;    Cell [Name &#34;RegEnd&#34;]&#xA;    Go (RC (7, 3))&#xA;    Cell [  String &#34;Another Technical Detail&#34;&#xA;            FontEmphasis Italic&#xA;            //VerticalAlignment Middle&#xA;            Name &#34;TD&#34; &#xA;            Next Stay]&#xA;    Go (DownBy 1)&#xA;    Cell [ Name &#34;info&#34;]&#xA;&#xA;    // Merging between named and specific cells&#xA;    MergeCells (ColRowLabel (&#34;B&#34;, 3), ColRowLabel (&#34;B&#34;, 6))&#xA;    MergeCells (NamedCell &#34;ID&#34;, ColRowLabel (&#34;A&#34;, 6))&#xA;    MergeCells (ColRowLabel (&#34;C&#34;, 7), NamedCell &#34;info&#34;)&#xA;    MergeCells (NamedCell &#34;Reg&#34;, NamedCell &#34;RegEnd&#34;) &#xA;    // Adding a border to merged cells - any original border around a single cell is lost post merging cells&#xA;    BorderMergedCell [ BorderType (Border.All XLBorderStyleValues.Thin)&#xA;                       ColorBorder (BorderColor.All (XLColor.FromArgb(0, 68, 114, 196)))]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;BorderMergedCells.xlsx&#34;))  &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/BorderMergedCells.PNG?raw=true&#34; alt=&#34;Adding a border to merged cells&#34; style=&#34;width: 500px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Absolute Positioning&lt;/h2&gt; &#xA;&lt;p&gt;FsExcel is designed to save you from having to keep track of absolute row- and column-numbers. However sometimes you might want to position a cell at an absolute row or column position - or both.&lt;/p&gt; &#xA;&lt;p&gt;After the explicitly-positioned cell, subsequent cells are by default rendered to the right again.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;[&#xA;    Go (Col 3)&#xA;    Cell [ String &#34;Col 3&#34;]&#xA;    Go (Row 4)&#xA;    Cell [ String &#34;Row 4&#34;]&#xA;    Go (RC(6, 5))&#xA;    Cell [ String &#34;R6C5&#34;]&#xA;    Cell [ String &#34;R6C6&#34;]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;AbsolutePositioning.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/AbsolutePositioning.PNG?raw=true&#34; alt=&#34;Absolute Positioning example&#34; style=&#34;width: 350px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Remember that, by default, successive cells are placed to the right of their predecessors? Sometimes (rarely) you might want to suppress that behaviour completely. To do that use &lt;code&gt;Next Stay&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open FsExcel&#xA;&#xA;[&#xA;    for i in 1..5 do&#xA;        Cell [&#xA;            Integer i&#xA;            Next Stay&#xA;        ]&#xA;        Go(DownBy i)&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;Stay.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/Stay.PNG?raw=true&#34; alt=&#34;Stay example&#34; style=&#34;width: 150px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Named cells&lt;/h2&gt; &#xA;&lt;p&gt;To create worksheet scoped name use&lt;br&gt; &lt;code&gt;Name &#34;Username&#34;&lt;/code&gt;&lt;br&gt; or&lt;br&gt; &lt;code&gt;ScopedName (&#34;Email&#34;, NameScope.Worksheet)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To create workbook scoped name use&lt;br&gt; &lt;code&gt;ScopedName (&#34;Email&#34;, NameScope.Workbook)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open FsExcel&#xA;&#xA;[&#xA;    Cell [ &#xA;        String &#34;JohnDoe&#34;&#xA;        Name &#34;Username&#34; ]&#xA;    Cell [ &#xA;        String &#34;john.doe@company.com&#34;&#xA;        ScopedName (&#34;Email&#34;, NameScope.Workbook) ]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;NamedCells.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Worksheets (Tabs)&lt;/h2&gt; &#xA;&lt;p&gt;By default, all cells are placed into a worksheet (tab) called &#34;Sheet1&#34;. You can override this, and create additional worksheets, using &lt;code&gt;Worksheet ...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you do not want a &#34;Sheet1&#34; tab you&#39;ll need to use &lt;code&gt;Worksheet&lt;/code&gt; to create an explicitly named sheet - before creating any cells.&lt;/p&gt; &#xA;&lt;p&gt;Each new worksheet starts at the top-left cell, has an indent setting of 1 (no indent), and has an empty list as its current &lt;code&gt;Style [...]&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;Worksheet&lt;/code&gt; with the name of a worksheet that already exists, that worksheet becomes active with a current position of &lt;code&gt;RC(1, 1)&lt;/code&gt;, no indent and an empty &lt;code&gt;Style [...]&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open FsExcel&#xA;&#xA;let britishCultureNativeName = &#34;English (United Kingdom)&#34;&#xA;let ukrainianCultureNativeName = &#34;українська&#34;&#xA;&#xA;let britishCultureDateTimeFormatGetMonthName =&#xA;    [ &#34;January&#34;; &#34;February&#34;; &#34;March&#34;; &#34;April&#34;; &#34;May&#34;; &#34;June&#34;; &#34;July&#34;;&#xA;       &#34;August&#34;; &#34;September&#34;; &#34;October&#34;; &#34;November&#34;; &#34;December&#34; ]&#xA;&#xA;let britishCultureDateTimeFormatAbbreviatedMonthNames =&#xA;    [ &#34;Jan&#34;; &#34;Feb&#34;; &#34;Mar&#34;; &#34;Apr&#34;; &#34;May&#34;; &#34;Jun&#34;; &#34;Jul&#34;; &#34;Aug&#34;; &#34;Sep&#34;; &#34;Oct&#34;;&#xA;      &#34;Nov&#34;; &#34;Dec&#34; ]&#xA;&#xA;let ukrainianCultureDateTimeFormatGetMonthName =&#xA;    [ &#34;січень&#34;; &#34;лютий&#34;; &#34;березень&#34;; &#34;квітень&#34;; &#34;травень&#34;; &#34;червень&#34;;&#xA;      &#34;липень&#34;; &#34;серпень&#34;; &#34;вересень&#34;; &#34;жовтень&#34;; &#34;листопад&#34;; &#34;грудень&#34; ]&#xA;&#xA;let ukrainianCultureDateTimeFormatAbbreviatedMonthNames =&#xA;    [ &#34;січ&#34;; &#34;лют&#34;; &#34;бер&#34;; &#34;кві&#34;; &#34;тра&#34;; &#34;чер&#34;; &#34;лип&#34;; &#34;сер&#34;; &#34;вер&#34;; &#34;жов&#34;;&#xA;      &#34;лис&#34;; &#34;гру&#34; ]&#xA;&#xA;[&#xA;    Worksheet britishCultureNativeName&#xA;    for m in 0..11 do&#xA;        let monthName = britishCultureDateTimeFormatGetMonthName.[m]&#xA;        Cell [ String monthName ]&#xA;        Cell [ Integer monthName.Length ]&#xA;        Go NewRow&#xA;&#xA;    Worksheet ukrainianCultureNativeName&#xA;    for m in 0..11 do&#xA;        let monthName = ukrainianCultureDateTimeFormatGetMonthName.[m]&#xA;        Cell [ String monthName ]&#xA;        Cell [ Integer monthName.Length ]&#xA;        Go NewRow&#xA;&#xA;    Worksheet britishCultureNativeName // Switch back to the first worksheet&#xA;    Go (RC(13, 1))&#xA;    for m in 0..11 do&#xA;        let monthAbbreviation = britishCultureDateTimeFormatAbbreviatedMonthNames.[m]&#xA;        Cell [ String monthAbbreviation ]&#xA;        Cell [ Integer monthAbbreviation.Length ]&#xA;        Go NewRow&#xA;&#xA;    Worksheet ukrainianCultureNativeName // Switch back to the second worksheet&#xA;    Go (RC(13, 1))&#xA;    for m in 0..11 do&#xA;        let monthAbbreviation = ukrainianCultureDateTimeFormatAbbreviatedMonthNames.[m]&#xA;        Cell [ String monthAbbreviation ]&#xA;        Cell [ Integer monthAbbreviation.Length ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;Worksheets.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/Worksheets.PNG?raw=true&#34; alt=&#34;Worksheets example&#34; style=&#34;width: 350px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Working with an existing workbook&lt;/h2&gt; &#xA;&lt;p&gt;You can update an existing workbook by using &lt;code&gt;Workbook ...&lt;/code&gt; as the first item in the list. By default, this will set the first worksheet in the workbook as the active sheet.&lt;/p&gt; &#xA;&lt;p&gt;Typically, you will want to immediately follow with a &lt;code&gt;Worksheet ...&lt;/code&gt; to either move to the worksheet you want to update or create a new worksheet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Workbook&lt;/code&gt; requires you to pass in a reference to a valid &lt;code&gt;ClosedXML.Excel.XLWorkbook&lt;/code&gt; object. See &lt;a href=&#34;https://raw.githubusercontent.com/misterspeedy/FsExcel/main/#insertingblankrows&#34;&gt;Inserting blank rows&lt;/a&gt; below for an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;insertingblankrows&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Inserting blank rows&lt;/h2&gt; &#xA;&lt;p&gt;One common task when working with existing workbooks is inserting rows of data above existing rows. You can use &lt;code&gt;InsertRowsAbove n&lt;/code&gt; which will insert &lt;code&gt;n&lt;/code&gt; blank rows above the current row.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;InsertRowsAbove&lt;/code&gt; does not change the current position. However, the row at that position is now the first inserted (blank) row. Note that if a formula refers to a cell that is moved, the formula is automatically updated.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open ClosedXML.Excel&#xA;open FsExcel&#xA;&#xA;// Open Worksheets.xlsx created in the previous snippet:&#xA;let workbook = new XLWorkbook(Path.Combine(savePath, &#34;Worksheets.xlsx&#34;))&#xA;&#xA;let britishCultureNativeName = &#34;English (United Kingdom)&#34;&#xA;let ukrainianCultureNativeName = &#34;українська&#34;&#xA;&#xA;let altMonthNames = [| &#34;Vintagearious&#34;; &#34;Fogarious&#34;; &#34;Frostarious&#34;; &#34;Snowous&#34;; &#34;Rainous&#34;; &#34;Windous&#34;; &#34;Buddal&#34;; &#34;Floweral&#34;; &#34;Meadowal&#34;; &#34;Reapidor&#34;; &#34;Heatidor&#34;; &#34;Fruitidor&#34; |]&#xA;&#xA;[&#xA;    Workbook workbook&#xA;    Worksheet ukrainianCultureNativeName&#xA;    Go(RC(1,3))&#xA;    Cell [FormulaA1 $&#34;=&#39;{britishCultureNativeName}&#39;!B1*2&#34; ]&#xA;    Worksheet britishCultureNativeName&#xA;    InsertRowsAbove 12 // The cell reference in the  formula above will be updated to B13&#xA;    for m in 0..11 do&#xA;        Cell [ String altMonthNames[m] ]&#xA;        Cell [ Integer altMonthNames[m].Length ]&#xA;        Go NewRow&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;WorksheetsRevised.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/InsertRowsAbove.PNG?raw=true&#34; alt=&#34;InsertRowsAbove example&#34; style=&#34;width: 300px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Column Widths and Row Heights for All Cells&lt;/h2&gt; &#xA;&lt;p&gt;You can set a specific width for &lt;em&gt;all&lt;/em&gt; columns and a specific height for &lt;em&gt;all&lt;/em&gt; rows with &lt;code&gt;SizeAll (ColWidth x)&lt;/code&gt; and &lt;code&gt;SizeAll (RowHeight x)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Excel and ClosedXml documentation is not clear on what units are used. The width unit correlates with ~10% of the width given number of pixels. For example, if you need a cell to be ~50 pixels wide, then you would set the ColWidth to ~5. The width unit appears to be, roughly, average character width. The height unit is 60% of the pixel height. For example, if you want the height to be 45 pixels, then you would set the RowHeight to 27.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;&#xA;[&#xA;    for x in 1..12 do&#xA;        for y in 0..12 do&#xA;            Cell [ Integer (x * y) ]&#xA;        Go NewRow&#xA;&#xA;    SizeAll (ColWidth 5)&#xA;    SizeAll (RowHeight 20)&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;ColumnWidthRowHeight.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/ColumnWidthRowHeight.PNG?raw=true&#34; alt=&#34;Column Width and Row Height example&#34; style=&#34;width: 350px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Individual Cell Sizing&lt;/h2&gt; &#xA;&lt;p&gt;To size individual cells within an Item list (e.g. &lt;code&gt;[ Cell [....]; Go NewRow; Cell [...]; Go NewRow etc.&lt;/code&gt;]&lt;code&gt;)&lt;/code&gt;, use &lt;code&gt;CellSize (ColWidth 10)&lt;/code&gt; and &lt;code&gt;CellSize (RowHeight 10)&lt;/code&gt; as part of a Cell&#39;s list of properties.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System&#xA;open ClosedXML.Excel&#xA;open FsExcel&#xA;&#xA;[   Go NewRow&#xA;    for heading, colWidth in [&#34;ID&#34;, 3.22; &#34;Car Name&#34;, 10.33; &#34;Car Description&#34;, 49.33; &#34;Car Registration&#34;, 16.89 ] do&#xA;        Cell [&#xA;            String heading&#xA;            FontEmphasis Bold&#xA;            FontName &#34;Calibri&#34;&#xA;            FontSize 11&#xA;            HorizontalAlignment Center&#xA;            FontColor (XLColor.FromArgb(0, 255, 255, 255))&#xA;            BackgroundColor (XLColor.FromArgb(0, 68, 114, 196))&#xA;            Border(Border.All XLBorderStyleValues.Thin)&#xA;            CellSize (ColWidth colWidth)&#xA;        ]&#xA;    Go NewRow&#xA;    Cell [ Integer 1&#xA;           HorizontalAlignment Center ] &#xA;    Cell [ String &#34;Ford Fiesta&#34; ]&#xA;    Cell [ String &#34;Car Technical Details...&#34;]  &#xA;    Cell [ String &#34;AB12 CDE&#34; &#xA;           HorizontalAlignment Center]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;IndividualCellSize.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/IndividualCellSize.PNG?raw=true&#34; alt=&#34;Individual Cell Size example&#34; style=&#34;width: 400px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Autofitting&lt;/h2&gt; &#xA;&lt;p&gt;You can set the widths of columns to fit their contents using &lt;code&gt;AutoFit AllCols&lt;/code&gt;. You can auto fit a range of columns with &lt;code&gt;AutoFit (ColRange(&amp;lt;c1&amp;gt;, &amp;lt;c2&amp;gt;))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can autofit heights of rows with &lt;code&gt;AutoFit AllRows&lt;/code&gt; and &lt;code&gt;AutoFit (RowRange(&amp;lt;r1&amp;gt;,&amp;lt;r2&amp;gt;))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can autofit all columns &lt;em&gt;and&lt;/em&gt; all rows with &lt;code&gt;AutoFit All&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Perform &lt;code&gt;AutoFit&lt;/code&gt; operations &lt;em&gt;after&lt;/em&gt; the cells have been populated!&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System.Globalization&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;// For non-Windows runtime environments you will have to add these lines to use AutoFit.&#xA;// This is because ClosedXML needs a font to work with when computing sizes. You may have&#xA;// to use a different font name if Liberation Sans is not installed on the target system.&#xA;open System.Runtime.InteropServices&#xA;if not (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) then&#xA;    LoadOptions.DefaultGraphicEngine &amp;lt;- new ClosedXML.Graphics.DefaultGraphicEngine(&#34;Liberation Sans&#34;) &#xA;//&#xA;&#xA;let headingStyle = &#xA;    [&#xA;        Border(Border.Bottom XLBorderStyleValues.Medium)&#xA;        FontEmphasis Bold&#xA;        FontEmphasis Italic &#xA;    ]&#xA;&#xA;[&#xA;    for heading in [&#34;Month&#34;; &#34;Letter Count&#34;] do&#xA;        Cell [&#xA;            String heading&#xA;            yield! headingStyle&#xA;        ]&#xA;    Go NewRow&#xA;    &#xA;    for m in 1..12 do&#xA;        let monthName = CultureInfo.GetCultureInfoByIetfLanguageTag(&#34;en-GB&#34;).DateTimeFormat.GetMonthName(m)&#xA;        Cell [ String monthName ]&#xA;        Cell [ Integer monthName.Length ]&#xA;        Go NewRow&#xA;&#xA;    AutoFit AllCols&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;AutosizeColumns.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/AutosizeColumns.PNG?raw=true&#34; alt=&#34;Autosize Columns example&#34; style=&#34;width: 200px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Merging Cells and Vertical Alignment&lt;/h2&gt; &#xA;&lt;p&gt;You can merge cells by using &lt;code&gt;MergeCells (CellLabel , CellLabel)&lt;/code&gt; where a &lt;code&gt;CellLabel&lt;/code&gt; can be a:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;specific cell - &lt;code&gt;ColRowLabel (&#34;&amp;lt;column letter&amp;gt;&#34;, &amp;lt;row number&amp;gt;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;named cell - &lt;code&gt;NamedCell &#34;CellName&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;specified depth and span - &lt;code&gt;SpanDepth (&amp;lt;column span&amp;gt;, &amp;lt;row depth&amp;gt;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cells can be merged before or after placing text in them, however, as per Excel cell naming convention with merged cells, the following rules must be observed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merging cells vertically&lt;/strong&gt; - text must be assigned to the &lt;em&gt;top-most cell label&lt;/em&gt; of the merged cell. For example, if there is a vertically merged cell spanning from cell A3 to A6, any text within the range A3 to A6 must be assigned to cell A3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merging cells horizontally&lt;/strong&gt; - text must be assigned to the &lt;em&gt;left-most cell label&lt;/em&gt; of the merged cell. For example, if there is a horizontally merged cell spanning from cell A2 to E2, any text within the range A2 to E2 must be assigned to cell A2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merging cells horizontally &amp;amp; vertically&lt;/strong&gt; - text must be assigned to the &lt;em&gt;top-left cell label&lt;/em&gt; of the merged cell. For example, if there is a merged cell spanning from cell A2 to E10, any text within the range A2 to E2 must be assigned to cell A2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;code&gt;SpanDepth&lt;/code&gt; of e.g. (1, 3) creates a merged cell spanning one column and a depth of three rows. The column span and row depth of a merged cell from a starting cell can be specified in two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Forward Merging&lt;/strong&gt; i.e. merging from top left to bottom right with the starting cell being in the top left hand corner of the merged cell. This method retains cell name, cell contents, cell shading &amp;amp; the top left hand corner of the original starting cell border. This is achieved by having SpanDepth as the second item in the Merge tuple: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MergeCells ((NamedCell &#34;CellName&#34;, SpanDepth (3, 3)))&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MergeCells ((ColRowLabel (&#34;B&#34;, 15), SpanDepth (1, 2)))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reverse Merging&lt;/strong&gt; i.e. merging from bottom right to top left with the starting cell being in the bottom right hand corner of the merged cell. This method loses the cell name, cell contents, cell shading of the original starting cell. However, the bottom right hand corner of the original starting cell border is retained. In the case of starting with e.g cell B2 and requesting a reverse merge SpanDepth of (5, 5), i.e. merging to beyond the excel sheet boundaries, the cell to merge to will be defaulted to cell A1. The Reverse Merging is achieved by having SpanDepth as the first item in the Merge tuple: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MergeCells ((SpanDepth (3, 3)), NamedCell &#34;CellName&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MergeCells ((SpanDepth (1, 2)), (ColRowLabel (&#34;B&#34;, 15))&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vertical Alignment&lt;/strong&gt; for a given cell can be achieved by using &lt;code&gt;Vertical Alignment [Base, Middle, TopMost]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that when using two &lt;code&gt;NamedCell&lt;/code&gt; references in a &lt;code&gt;MergeCells ()&lt;/code&gt; call, the cell names must differ between the first and second cell. For example the following construct will not result in merged cells (though it does not cause an error):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;[&#xA;    Cell [String &#34;Hello&#34;; Name &#34;name&#34;]&#xA;    Cell [String &#34;Hello2&#34;; Name &#34;name&#34;]&#xA;    MergeCells ((NamedCell &#34;name&#34;, NamedCell &#34;name&#34;))&#xA;] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Merges which lead to a column reference beyond the maximum supported by Excel (&#34;XFD&#34;) will result in an &lt;code&gt;ArgumentException&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System.IO&#xA;open System&#xA;open ClosedXML.Excel&#xA;open FsExcel&#xA;&#xA;[   Go NewRow&#xA;    for heading, colWidth in [&#34;ID&#34;, 3.22; &#34;Car Name&#34;, 10.33; &#34;Car Description&#34;, 49.33; &#34;Car Registration&#34;, 16.89 ] do&#xA;        Cell [&#xA;            String heading&#xA;            FontEmphasis Bold&#xA;            FontName &#34;Calibri&#34;&#xA;            FontSize 11&#xA;            HorizontalAlignment Center&#xA;            FontColor (XLColor.FromArgb(0, 255, 255, 255))&#xA;            BackgroundColor (XLColor.FromArgb(0, 68, 114, 196))&#xA;            Border(Border.All XLBorderStyleValues.Thin)&#xA;            CellSize (ColWidth colWidth)&#xA;        ]&#xA;    Go NewRow&#xA;    Cell [  Integer 1&#xA;            HorizontalAlignment Left&#xA;            VerticalAlignment TopMost&#xA;            Name &#34;ID&#34; ] &#xA;    Cell [  String &#34;Ford Fiesta&#34;&#xA;            HorizontalAlignment Center&#xA;            VerticalAlignment Middle ] &#xA;    Cell [  String &#34;Car Technical Details:&#34;&#xA;            Next (DownBy 1) ]&#xA;    Cell [  String &#34;Technical Detail 1&#34;&#xA;            Next (DownBy 1) ]&#xA;    Cell [  String &#34;Technical Detail 2&#34;&#xA;            Next (DownBy 1)]&#xA;    Cell [  String &#34;Technical Detail 3&#34;&#xA;            Name &#34;LastL&#34; ]&#xA;    Go (RC (3, 4))&#xA;    Cell [  String &#34;AB12 CDE&#34; &#xA;            HorizontalAlignment Right&#xA;            VerticalAlignment Base&#xA;            Name &#34;Reg&#34; ]&#xA;    Go (RC (6, 4))&#xA;    Cell [Name &#34;RegEnd&#34;]&#xA;    Go (RC (7, 3))&#xA;    Cell [  String &#34;Another Technical Detail&#34;&#xA;            FontEmphasis Italic&#xA;            VerticalAlignment Middle&#xA;            Name &#34;TD&#34; &#xA;            Next Stay]&#xA;    Go (DownBy 1)&#xA;    Cell [ Name &#34;info&#34;]&#xA;&#xA;    // Merging between named and specific cells&#xA;    MergeCells ((ColRowLabel (&#34;B&#34;, 3), ColRowLabel (&#34;B&#34;, 6)))&#xA;    MergeCells ((NamedCell &#34;ID&#34;, ColRowLabel (&#34;A&#34;, 6)))&#xA;    MergeCells ((ColRowLabel (&#34;C&#34;, 7), NamedCell &#34;info&#34;)) &#xA;    MergeCells ((NamedCell &#34;Reg&#34;, NamedCell &#34;RegEnd&#34;)) &#xA;    &#xA;    Go (RC (10, 1))&#xA;    Cell [  String &#34;Merging from a starting cell given a depth and span&#34;&#xA;            BackgroundColor (XLColor.FromArgb(0, 80, 180, 220))&#xA;            FontEmphasis Bold&#xA;            HorizontalAlignment Center ] &#xA;    MergeCells ((ColRowLabel (&#34;A&#34;, 10), ColRowLabel (&#34;D&#34;, 10)))&#xA;&#xA;    Go (RC (12, 2))&#xA;    Cell [  String &#34;The components that make up a car are: &#34;&#xA;            Name &#34;components&#34; &#xA;            HorizontalAlignment Left&#xA;            VerticalAlignment TopMost&#xA;            Border(Border.All XLBorderStyleValues.MediumDashDot)]&#xA;    Go (RC (12, 4))&#xA;    Cell [ Border(Border.All XLBorderStyleValues.MediumDashDot)]&#xA;    Go (RC (14, 4))&#xA;    Cell [ Border(Border.All XLBorderStyleValues.MediumDashDot)]&#xA;&#xA;    Go (RC (15, 2))&#xA;    Cell [  String &#34;Road Tax&#34;&#xA;            HorizontalAlignment Center&#xA;            VerticalAlignment Middle&#xA;            Border(Border.All XLBorderStyleValues.SlantDashDot)]&#xA;    Go (RC (16, 2))&#xA;    Cell [ Border(Border.All XLBorderStyleValues.SlantDashDot)]&#xA;&#xA;    // Forward merging - cell name, cell contents, shading &amp;amp; top LH corner of border are retained&#xA;    MergeCells ((NamedCell &#34;components&#34;, SpanDepth (3, 3)))&#xA;    MergeCells ((ColRowLabel (&#34;B&#34;, 15), SpanDepth (1, 2))) &#xA;&#xA;    Go (RC (17, 4))&#xA;    Cell [  String &#34;Insurance&#34;&#xA;            Name &#34;insurance&#34; // NamedCells cannot begin with a number&#xA;            Border(Border.All XLBorderStyleValues.Dashed) ]&#xA;    Go (RC (17, 3))&#xA;    Cell [ Border(Border.All XLBorderStyleValues.Dashed)]&#xA;    Go (RC (17, 2))&#xA;    Cell [ Border(Border.All XLBorderStyleValues.Dashed)] &#xA;   &#xA;    Go (RC (16, 4))&#xA;    Cell [  String &#34;Signature&#34;]&#xA;&#xA;    // Reverse Merging - original cell contents, cell name and cell shading are lost&#xA;    // Only bottom RH corner of the border is retained&#xA;    MergeCells ((SpanDepth (3, 1), NamedCell &#34;insurance&#34;)) &#xA;    MergeCells ((SpanDepth (2, 2), ColRowLabel (&#34;D&#34;, 16))) &#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;MergeCellsWithVerticalAlignment.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/MergedCellWithVerticalAlignment.PNG?raw=true&#34; alt=&#34;Merged Cell with Vertical Alignment example&#34; style=&#34;width: 800px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Tables from Records&lt;/h2&gt; &#xA;&lt;p&gt;You can create a table of cells from an F# record or a sequence of F# records.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The tables created using this approach are not proper Excel tables, simply grids of cells with potentially a little formatting. To create true Excel tables, see &lt;a href=&#34;https://github.com/misterspeedy/FsExcel/raw/main/ExcelTableTutorial.md&#34;&gt;Excel Table Tutorial&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Table.fromInstance&lt;/code&gt; or &lt;code&gt;Table.fromSeq&lt;/code&gt; and provide&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an orientation (&lt;code&gt;Table.Direction.Horizontal&lt;/code&gt; or &lt;code&gt;Table.Direction.Vertical&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;a function which, given an index and a field name, returns a list of properties for styling. (This style can be an empty list.)&lt;/li&gt; &#xA; &lt;li&gt;the instance or sequence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In horizontal tables, the values for each record appear beside one another. In vertical tables the values for a record appear below one another.&lt;/p&gt; &#xA;&lt;p&gt;Calls to the cell style function are given 0 for the header, 1 for the first (or only) data row, 2 for the next and so on.&lt;/p&gt; &#xA;&lt;p&gt;Tables don&#39;t automatically autofit - you&#39;ll have to do that (if you want) after the table is built.&lt;/p&gt; &#xA;&lt;p&gt;Regardless of table orientation, the &#39;current cell&#39; (i.e. the address at which any further new cell is rendered) is always just below the bottom-left corner of the table that was just created.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open ClosedXML.Excel&#xA;open FsExcel&#xA;&#xA;type JoiningInfo = {&#xA;    Name : string&#xA;    Age : int&#xA;    Fees : decimal&#xA;    DateJoined : string&#xA;}&#xA;&#xA;// This works just as well if these are anonymous record instances,&#xA;// eg. {| Name = &#34;...&#34;; ... |}&#xA;&#xA;let records = [&#xA;    { Name = &#34;Jane Smith&#34;; Age = 32; Fees = 59.25m; DateJoined = &#34;2022-03-12&#34; } // Excel will treat these strings as dates&#xA;    { Name = &#34;Michael Nguyễn&#34;; Age = 23; Fees = 61.2m; DateJoined = &#34;2022-03-13&#34; }&#xA;    { Name = &#34;Sofia Hernández&#34;; Age = 58; Fees = 59.25m; DateJoined = &#34;2022-03-15&#34; }&#xA;]&#xA;&#xA;let cellStyleVertical index name =&#xA;    if index = 0 then&#xA;        [ FontEmphasis Bold ]&#xA;    elif name = &#34;Fees&#34; then&#xA;        [ FormatCode &#34;$0.00&#34; ]&#xA;    else&#xA;        []&#xA;&#xA;let cellStyleHorizontal index name =&#xA;    if index = 0 then&#xA;        [&#xA;            Border(Border.Bottom XLBorderStyleValues.Medium)&#xA;            FontEmphasis Bold&#xA;        ]&#xA;    elif name = &#34;Fees&#34; then&#xA;        [ FormatCode &#34;$0.00&#34; ]&#xA;    else&#xA;        []&#xA;&#xA;records&#xA;|&amp;gt; Table.fromSeq Table.Direction.Vertical cellStyleVertical&#xA;|&amp;gt; fun cells -&amp;gt; cells @ [ AutoFit All ]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;RecordSequenceVertical.xlsx&#34;))&#xA;&#xA;records&#xA;|&amp;gt; Table.fromSeq Table.Direction.Horizontal cellStyleHorizontal&#xA;|&amp;gt; fun cells -&amp;gt; cells @ [ AutoFit All ]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;RecordSequenceHorizontal.xlsx&#34;))&#xA;&#xA;records&#xA;|&amp;gt; Seq.tryHead&#xA;|&amp;gt; Option.iter (fun r -&amp;gt;&#xA;&#xA;    r &#xA;    |&amp;gt; Table.fromInstance Table.Direction.Vertical cellStyleVertical&#xA;    |&amp;gt; fun cells -&amp;gt; cells @ [ AutoFit All ]&#xA;    |&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;RecordInstanceVertical.xlsx&#34;))&#xA;&#xA;    r &#xA;    |&amp;gt; Table.fromInstance Table.Direction.Horizontal cellStyleHorizontal&#xA;    |&amp;gt; fun cells -&amp;gt; cells @ [ AutoFit All ]&#xA;    |&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;RecordInstanceHorizontal.xlsx&#34;)))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/RecordSequenceVertical.PNG?raw=true&#34; alt=&#34;Table example - vertical record sequence&#34; style=&#34;width: 450px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/RecordSequenceHorizontal.PNG?raw=true&#34; alt=&#34;Table example - horizontal record sequence&#34; style=&#34;width: 320px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/RecordInstanceVertical.PNG?raw=true&#34; alt=&#34;Table example - vertical record instance&#34; style=&#34;width: 200px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/RecordInstanceHorizontal.PNG?raw=true&#34; alt=&#34;Table example - horizontal record instance&#34; style=&#34;width: 280px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Rendering in Fable Elmish and similar web applications&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;Render.AsStream &amp;lt;stream&amp;gt; &amp;lt;items&amp;gt;&lt;/code&gt; to render to a pre-existing stream, or &lt;code&gt;Render.AsStreamBytes &amp;lt;items&amp;gt;&lt;/code&gt; to render as a byte array.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Render.AsStreamBytes&lt;/code&gt; is useful for Fable-based and other web app scenarios. Render to a byte array on the server, and transfer the bytes to the client using Fable Remoting. On the client use the &lt;code&gt;SaveFileAs&lt;/code&gt; extension function to start a browser download. Make sure you have opened the &lt;code&gt;Fable.Remoting.Client&lt;/code&gt; to get the &lt;code&gt;SaveFileAs&lt;/code&gt; method of a byte array.&lt;/p&gt; &#xA;&lt;p&gt;For a working example, see &lt;a href=&#34;http://www.pushbuttonreceivetables.com/&#34;&gt;http://www.pushbuttonreceivetables.com/&lt;/a&gt;, in particular &lt;a href=&#34;https://github.com/misterspeedy/HtmlExcel/raw/main/src/Server/Html.fs#L105&#34;&gt;https://github.com/misterspeedy/HtmlExcel/blob/main/src/Server/Html.fs#L105&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FsExcel&#xA;&#xA;[&#xA;    Cell [ String &#34;Hello world!&#34; ]&#xA;]&#xA;|&amp;gt; Render.AsStreamBytes&#xA;|&amp;gt; fun bytes -&amp;gt;&#xA;    $&#34;Bytes length: {bytes.Length}&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Types&lt;/h2&gt; &#xA;&lt;p&gt;FsExcel supports the following data types for cell content:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Integer&lt;/li&gt; &#xA; &lt;li&gt;Float&lt;/li&gt; &#xA; &lt;li&gt;Boolean&lt;/li&gt; &#xA; &lt;li&gt;DateTime&lt;/li&gt; &#xA; &lt;li&gt;TimeSpan&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open FsExcel&#xA;&#xA;[&#xA;    Cell [ String &#34;String&#34;]; Cell [ String &#34;string&#34; ]&#xA;    Go NewRow&#xA;    Cell [ String &#34;Integer&#34; ]; Cell [ Integer 42 ]&#xA;    Go NewRow&#xA;    Cell [ String &#34;Number&#34; ]; Cell [ Float Math.PI ]&#xA;    Go NewRow&#xA;    Cell [ String &#34;Boolean&#34; ]; Cell [ Boolean false  ]&#xA;    Go NewRow&#xA;    Cell [ String &#34;DateTime&#34; ]; Cell [ DateTime (System.DateTime(1903, 12, 17)) ]&#xA;    Go NewRow&#xA;    Cell [ String &#34;TimeSpan&#34; ]&#xA;    Cell [ &#xA;        TimeSpan (System.TimeSpan(hours=1, minutes=2, seconds=3)) &#xA;        FormatCode &#34;hh:mm:ss&#34;&#xA;    ]&#xA;]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;DataTypes.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/DataTypes.PNG?raw=true&#34; alt=&#34;Data Types example&#34; style=&#34;width: 200px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Rendering as HTML&lt;/h2&gt; &#xA;&lt;p&gt;You can render a workbook as a set of HTML tables. You will get one table per worksheet.&lt;/p&gt; &#xA;&lt;p&gt;This feature is primarily for use in Dotnet Interactive Notebooks, where you can use the &lt;code&gt;HTML()&lt;/code&gt; helper method to display the resulting HTML. This can be useful when experimenting with cell layouts, to avoid having to view an Excel file on every iteration.&lt;/p&gt; &#xA;&lt;p&gt;The styling representation is approximate:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bold and italic font emphasis should show correctly. (Note that VS Code does not default to representing &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; items in bold)&lt;/li&gt; &#xA; &lt;li&gt;Underlining, where present, will always be be shown as a single underline.&lt;/li&gt; &#xA; &lt;li&gt;Cell borders, where present, will always be a single line. (Note that VS Code does not yet show borders on tables.)&lt;/li&gt; &#xA; &lt;li&gt;Font names, sizes, cell alignment and any kind of color are not currently supported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;AsHtml&lt;/code&gt; function takes a function parameter which is called for every cell rendered, with a row and column index (both zero based, originating from the top-left-most occupied cell). When this function returns true, the cell is rendered as &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;, otherwise it is rendered as &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open FsExcel&#xA;open ClosedXML.Excel&#xA;&#xA;let isHeader r c =&#xA;    r = 0 || c = 0&#xA;&#xA;[&#xA;    Worksheet &#34;Worksheet 1&#34;&#xA;&#xA;    Style [ FontEmphasis Bold ]&#xA;    Cell [ String &#34;Item&#34; ]&#xA;    Cell [ String &#34;Example&#34; ]&#xA;    Style []&#xA;    Go NewRow&#xA;&#xA;    Cell [ String &#34;String&#34;]&#xA;    Cell [ String &#34;string&#34; ]&#xA;    Go NewRow&#xA;&#xA;    Cell [ String &#34;Integer&#34; ]&#xA;    Cell [ Integer 42 ]&#xA;    Go NewRow&#xA;    &#xA;    Cell [ String &#34;Number&#34; ]&#xA;    Cell [ Float Math.PI ]&#xA;    Go NewRow&#xA;    &#xA;    Cell [ String &#34;Boolean&#34; ]&#xA;    Cell [ Boolean false  ]&#xA;    Go NewRow&#xA;&#xA;    Cell [ String &#34;DateTime&#34; ]&#xA;    Cell [ DateTime (System.DateTime(1903, 12, 17)) ]&#xA;    Go NewRow&#xA;&#xA;    Cell [ String &#34;TimeSpan&#34; ]&#xA;    Cell [ &#xA;        TimeSpan (System.TimeSpan(hours=1, minutes=2, seconds=3)) &#xA;        FormatCode &#34;hh:mm:ss&#34;&#xA;    ]&#xA;    Go NewRow&#xA;&#xA;    Cell [ String &#34;Bold&#34; ]&#xA;    Cell [&#xA;        String &#34;I am bold&#34;&#xA;        FontEmphasis Bold&#xA;    ]&#xA;    Go NewRow&#xA;&#xA;    Cell [ String &#34;Italic&#34; ]&#xA;    Cell [&#xA;        String &#34;I am Italic&#34;&#xA;        FontEmphasis Italic&#xA;    ]&#xA;    Go NewRow&#xA;&#xA;    Cell [ String &#34;Underlined&#34; ]&#xA;    Cell [&#xA;        String &#34;I am underlined&#34;&#xA;        FontEmphasis (Underline XLFontUnderlineValues.Single)&#xA;    ]&#xA;    Go NewRow&#xA;&#xA;    Worksheet &#34;Worksheet 2&#34;&#xA;    Cell [String &#34;I am another table&#34;]&#xA;]&#xA;|&amp;gt; Render.AsHtml isHeader&#xA;|&amp;gt; HTML&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AutoFilter&lt;/h2&gt; &#xA;&lt;p&gt;You can add filters to a WorkSheet.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable Only: Enables but does not apply an AutoFilter.&lt;/li&gt; &#xA; &lt;li&gt;Apply filter: Enables and applies an AutoFilter.&lt;/li&gt; &#xA; &lt;li&gt;Clear filter: Clears an AutoFilter.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;AutoFilterRange&lt;/h3&gt; &#xA;&lt;p&gt;There can be multiple &lt;code&gt;AutoFilters&lt;/code&gt; on a given worksheet. This means that the area to be filtered has to be specified when defining the filter. This is done with &lt;code&gt;AutoFilterRange&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RangeUsed&lt;/code&gt;: The entire range used in the worksheet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CurrentRegion&lt;/code&gt; of string: The current region around a spcified cell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Range&lt;/code&gt; of string: A specified range.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;AutoFilter [ EnableOnly RangeUsed ]&#xA;&#xA;AutoFilter [ EnableOnly CurrentRegion ]&#xA;&#xA;AutoFilter [ GreaterThanInt (&#34;A1:E6&#34;, 2, 3) ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;List of available filters&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;EnableOnly of AutoFilterRange&#xA;Clear of AutoFilterRange&#xA;&#xA;EqualToString of range : AutoFilterRange * column : int * value : string&#xA;EqualToInt of range : AutoFilterRange * column : int * value : int&#xA;EqualToFloat of range : AutoFilterRange * column : int * value : float&#xA;EqualToDateTime of range : AutoFilterRange * column : int * value : DateTime&#xA;EqualToBool of range : AutoFilterRange * column : int * value : bool&#xA;&#xA;NotEqualToString of range : AutoFilterRange * column : int * value : string&#xA;NotEqualToInt of range : AutoFilterRange * column : int * value : int&#xA;NotEqualToFloat of range : AutoFilterRange * column : int * value : float&#xA;NotEqualToDateTime of range : AutoFilterRange * column : int * value : DateTime&#xA;NotEqualToBool of range : AutoFilterRange * column : int * value : bool&#xA;&#xA;BetweenInt of range : AutoFilterRange * column : int * min : int * max : int&#xA;BetweenFloat of range : AutoFilterRange * column : int * min : float * max : float&#xA;BetweenDateTime of range : AutoFilterRange * column : int * min : DateTime * max : DateTime&#xA;&#xA;NotBetweenInt of range : AutoFilterRange * column : int * min : int * max : int&#xA;NotBetweenFloat of range : AutoFilterRange * column : int * min : float * max : float&#xA;NotBetweenDateTime of range : AutoFilterRange * column : int * min : DateTime * max : DateTime&#xA;&#xA;ContainsString of range : AutoFilterRange * column : int * value : string&#xA;NotContainsString of range : AutoFilterRange * column : int * value : string&#xA;&#xA;BeginsWithString of range : AutoFilterRange * column : int * value : string&#xA;NotBeginsWithString of range : AutoFilterRange * column : int * value : string&#xA;&#xA;EndsWithString of range : AutoFilterRange * column : int * value : string&#xA;NotEndsWithString of range : AutoFilterRange * column : int * value : string&#xA;&#xA;Top of range : AutoFilterRange * column : int * value : int * topType : XLTopBottomType&#xA;Bottom of range : AutoFilterRange * column : int * value : int * bottomType : XLTopBottomType&#xA;&#xA;GreaterThanInt of range : AutoFilterRange * column : int * value : int&#xA;GreaterThanFloat of range : AutoFilterRange * column : int * value : float&#xA;GreaterThanDateTime of range : AutoFilterRange * column : int * value : DateTime&#xA;&#xA;LessThanInt of range : AutoFilterRange * column : int * value : int&#xA;LessThanFloat of range : AutoFilterRange * column : int * value : float&#xA;LessThanDateTime of range : AutoFilterRange * column : int * value : DateTime&#xA;&#xA;EqualOrGreaterThanInt of range : AutoFilterRange * column : int * value : int&#xA;EqualOrGreaterThanFloat of range : AutoFilterRange * column : int * value : float&#xA;EqualOrGreaterThanDateTime of range : AutoFilterRange * column : int * value : DateTime&#xA;&#xA;EqualOrLessThanInt of range : AutoFilterRange * column : int * value : int&#xA;EqualOrLessThanFloat of range : AutoFilterRange * column : int * value : float&#xA;EqualOrLessThanDateTime of range : AutoFilterRange * column : int * value : DateTime&#xA;&#xA;AboveAverage of range : AutoFilterRange * column : int&#xA;BelowAverage of range : AutoFilterRange * column : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Known Issues&lt;/h3&gt; &#xA;&lt;p&gt;EqualToDateTime:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Works but, both Equals and Custom Filter are blank.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;NotEqualToDateTime:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Does not work. Does contains. Should be not contains.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;BetweenDateTime&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Does not work. Excel filter shows 07/01/1900. Reapply hides all rows.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;NotBetweenDateTime&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Works but, shows as a Custom filter with 07/01/1900 in Excel.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;NotContains&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Works but, shows as a Contains filter in Excel. Reapply does Contains.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;GreaterThanDateTime&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Works but, filter name is After and shows 07/01/1900.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;LessThanDateTime&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Works but, filter name is Before and shows 07/01/1900.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;EqualOrGreaterThanDateTime&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Works but, filter name is Custom Filter and shows 07/01/1900.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;EqualOrLessThanDateTime&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Works but, filter name is Custom Filter and shows 07/01/1900.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Some of the above issues may be related to one of these:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ClosedXML/ClosedXML/issues/701&#34;&gt;Setting AutoFilter EqualTo on Date Column Doesn&#39;t Display Values When Spreadsheet Is Opened Until Filters Are Reapplied #701&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ClosedXML/ClosedXML/issues/1891&#34;&gt;Text to number coercion doesn&#39;t work correctly #1891&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Enable Only&lt;/h3&gt; &#xA;&lt;p&gt;In the example below and &lt;code&gt;AutoFilter&lt;/code&gt; is enabled for the &lt;code&gt;RangeUsed&lt;/code&gt;, but no filter is applied.&lt;/p&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open FsExcel&#xA;&#xA;let headings =&#xA;    [ Cell [ String &#34;StringCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;IntCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;FloatCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;DateTimeCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;BooleanCol&#34;; HorizontalAlignment Center ]&#xA;      Go NewRow ]&#xA;&#xA;let rows =&#xA;    [ 1 .. 5 ]&#xA;    |&amp;gt; Seq.map(fun i -&amp;gt;&#xA;        [ Cell [ String $&#34;String{i}&#34; ]&#xA;          Cell [ Integer i ]&#xA;          Cell [ Float ((i |&amp;gt; float) + 0.1) ]&#xA;          Cell [ DateTime (DateTime.Parse(&#34;15-July-2017 05:33:00&#34;).AddMinutes(i)) ]&#xA;          Cell [ Boolean (i % 2 |&amp;gt; Convert.ToBoolean) ]&#xA;          Go NewRow ])&#xA;    |&amp;gt; Seq.collect id&#xA;    |&amp;gt; List.ofSeq&#xA;&#xA;headings @ rows @ [ AutoFit All; AutoFilter [ EnableOnly RangeUsed ] ]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;AutoFilterEnableOnly.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/AutoFilterEnableOnly.PNG?raw=true&#34; alt=&#34;AutoFilter Enable Only example&#34; style=&#34;width: 500px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Apply AutoFilter&lt;/h3&gt; &#xA;&lt;p&gt;In the example below &lt;code&gt;AutoFilter&lt;/code&gt; is enabled (this is automatic if you create a filter).&lt;/p&gt; &#xA;&lt;p&gt;The following compound filter is created:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RangeUsed&lt;/code&gt;, column 2 is filtered for greater than 3&lt;/li&gt; &#xA; &lt;li&gt;and &lt;code&gt;RangeUsed&lt;/code&gt;, column 5 is filtered to equal &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Test --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;open System.IO&#xA;open FsExcel&#xA;&#xA;let headings =&#xA;    [ Cell [ String &#34;StringCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;IntCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;FloatCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;DateTimeCol&#34;; HorizontalAlignment Center ]&#xA;      Cell [ String &#34;BooleanCol&#34;; HorizontalAlignment Center ]&#xA;      Go NewRow ]&#xA;&#xA;let rows =&#xA;    [ 1 .. 5 ]&#xA;    |&amp;gt; Seq.map(fun i -&amp;gt;&#xA;        [ Cell [ String $&#34;String{i}&#34; ]&#xA;          Cell [ Integer i ]&#xA;          Cell [ Float ((i |&amp;gt; float) + 0.1) ]&#xA;          Cell [ DateTime (DateTime.Parse(&#34;15-July-2017 05:33:00&#34;).AddMinutes(i)) ]&#xA;          Cell [ Boolean (i % 2 |&amp;gt; Convert.ToBoolean) ]&#xA;          Go NewRow ])&#xA;    |&amp;gt; Seq.collect id&#xA;    |&amp;gt; List.ofSeq&#xA;&#xA;headings @ rows @ [ AutoFit All; AutoFilter [ GreaterThanInt (RangeUsed, 2, 3); EqualToBool (RangeUsed, 5, true) ] ]&#xA;|&amp;gt; Render.AsFile (Path.Combine(savePath, &#34;AutoFilterCompound.xlsx&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No AutoFilter:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/AutoFilterBefore.PNG?raw=true&#34; alt=&#34;AutoFilter Enable Only example&#34; style=&#34;width: 500px;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;AutoFilter applied:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/misterspeedy/FsExcel/raw/main/assets/AutoFilterAfter.PNG?raw=true&#34; alt=&#34;AutoFilter example&#34; style=&#34;width: 500px;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Excel Tables&lt;/h2&gt; &#xA;&lt;p&gt;To create &lt;a href=&#34;https://support.microsoft.com/en-us/office/overview-of-excel-tables-7ab0bb7d-3a9e-4b56-a3c9-6c94334e492c&#34;&gt;Excel Tables&lt;/a&gt;, see the separate &lt;a href=&#34;https://github.com/misterspeedy/FsExcel/raw/main/ExcelTableTutorial.md&#34;&gt;Excel Table Tutorial&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>