<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:40:28Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BSLang/BS</title>
    <updated>2022-06-15T01:40:28Z</updated>
    <id>tag:github.com,2022-06-15:/BSLang/BS</id>
    <link href="https://github.com/BSLang/BS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of the BS language as created by Mark Rendle at BuildStuff.lt 2014. Refer to this repo for information and canonical list of language features&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BS&lt;/h1&gt; &#xA;&lt;p&gt;Implementation of the BS language as created by Mark Rendle at BuildStuff.lt 2014&lt;/p&gt; &#xA;&lt;p&gt;BS is a general purpose Gradually typed language which can and should be used for building absolutely everything absolutely all the time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BS Hates programmers&lt;/li&gt; &#xA; &lt;li&gt;Booby trapped aztec temple pit of fail&lt;/li&gt; &#xA; &lt;li&gt;Programs must be edited and saved using Microsoft Word (2003)&lt;/li&gt; &#xA; &lt;li&gt;Compiles to ECMAScript3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://skillsmatter.com/skillscasts/6088-the-worst-programming-language-ever&#34;&gt;Watch the talk, recorded at SkillsMatter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;##Example program&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#define /^my (.*?) thing:$/class \1:/&#xA;my Greeter thing:&#xA;  public function __construct(€name)&#xA;      HALT_AND_CATCH_FIRE&#xA;    (unless €name !=== null);&#xA;    €this-&amp;gt;name = €name;&#xA;    Delete €name;&#xA;&#xA;  public function say(€thing isProbablyA String)&#xA;    echo €thing, « », €this-&amp;gt;name, BS::EOL;&#xA;    Delete €thing;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;##Language Features&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Significant whitespace&lt;/li&gt; &#xA; &lt;li&gt;Significant formatting&lt;/li&gt; &#xA; &lt;li&gt;17 bit integers&lt;/li&gt; &#xA; &lt;li&gt;Variables must be prefixed by €&lt;/li&gt; &#xA; &lt;li&gt;Variable hoisting from all scopes&lt;/li&gt; &#xA; &lt;li&gt;Exception handling - BS has only one exception - HALT_AND_CATCH_FIRE&lt;/li&gt; &#xA; &lt;li&gt;Raise exceptions conditionally with &lt;code&gt;(unless &amp;lt;condition&amp;gt;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;String processing: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#39; &#39; Single quotes for ASCII strings&lt;/li&gt; &#xA;   &lt;li&gt;&#39;&#39; &#39;&#39; Double single quotes for ANSI strings&lt;/li&gt; &#xA;   &lt;li&gt;&#34; &#34; Double quotes&lt;/li&gt; &#xA;   &lt;li&gt;&#34;&#34; &#34;&#34; Double double quotes&lt;/li&gt; &#xA;   &lt;li&gt;« » European quotes are used for UTF-256&lt;/li&gt; &#xA;   &lt;li&gt;«« »» Double european quotes used for UTF-256 with string interpolation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mandatory Comments - at the end of every line, demarked by 5 spaces&lt;/li&gt; &#xA; &lt;li&gt;Optionally end statements with ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unless&lt;/code&gt; statements must be terminated with ;&lt;/li&gt; &#xA; &lt;li&gt;Regex Aliasing - #define&lt;/li&gt; &#xA; &lt;li&gt;Line numbers are mandatory, and must increment in steps of 42&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>