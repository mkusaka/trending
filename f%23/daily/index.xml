<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-17T01:34:52Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Savelenko/storage-machine-backend</title>
    <updated>2023-05-17T01:34:52Z</updated>
    <id>tag:github.com,2023-05-17:/Savelenko/storage-machine-backend</id>
    <link href="https://github.com/Savelenko/storage-machine-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Storage Machine exercises&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Storage Machine is a small but realistic and rather complete back-end of a Web-application. It does not include the front-end part so you will use Postman or similar to interact with it.&lt;/p&gt; &#xA;&lt;p&gt;The goal is to see an example of a complete system made using F# and get acquainted with the Onion architecture. You will do this by example functionalities and (architectural and FP) patterns already implemented in the back-end and extend it with new ones, by applying the same patterns.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As always, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/&#34;&gt;F# language reference&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Storage Machine uses &lt;a href=&#34;https://github.com/giraffe-fsharp/Giraffe/raw/master/DOCUMENTATION.md&#34;&gt;Giraffe&lt;/a&gt; -- a library for creating Web-applications using F# as a thin layer on top of ASP.NET Core in FP style, unlike heavily OO-based ASP.NET Core model.&lt;/li&gt; &#xA; &lt;li&gt;For JSON serialization the &lt;a href=&#34;https://thoth-org.github.io/Thoth.Json/documentation/concept/introduction.html&#34;&gt;Thoth.Json&lt;/a&gt; library is used because it provides FP-oriented combinator style of JSON (de)serialization.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise 0 (warming up)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Fill in missing parts to complete the functionality of retrieving an overview of products in stock.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Requirements and hints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;Stock&lt;/code&gt; component already contains two other complete and working functionalities. Study the corresponding use-case functions &lt;code&gt;binOverview&lt;/code&gt; and &lt;code&gt;stockOverview&lt;/code&gt; in the Application layer.&lt;/li&gt; &#xA; &lt;li&gt;Study how other layers support these two working use-cases.&lt;/li&gt; &#xA; &lt;li&gt;Discover how to trigger these use-cases from outside and use Postman to see the results.&lt;/li&gt; &#xA; &lt;li&gt;Fill in all &#34;holes&#34; marked with &#34;Exercise 0&#34; required to complete implementation of &lt;code&gt;productsInStock&lt;/code&gt; in the Application layer.&lt;/li&gt; &#xA; &lt;li&gt;Compare the response in Postman with simulated (hard-coded) data in the Data Access layer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise A&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Extend the &lt;code&gt;Stock&lt;/code&gt; component with functionality to store a new bin containing zero or one products.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Requirements and hints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adding a bin should be possible using a &lt;code&gt;POST&lt;/code&gt; request.&lt;/li&gt; &#xA; &lt;li&gt;After adding a bin, it should be visible in the bin and/or stock overview already implemented in by the same &lt;code&gt;Stock&lt;/code&gt; component.&lt;/li&gt; &#xA; &lt;li&gt;Extend the data access interface in the Application layer.&lt;/li&gt; &#xA; &lt;li&gt;Define the use-case function in the Application layer.&lt;/li&gt; &#xA; &lt;li&gt;Is there anything missing in the Model layer or is it complete for this functionality?&lt;/li&gt; &#xA; &lt;li&gt;Extend the data access implementation object in the Data Access layer part of the &lt;code&gt;Stock&lt;/code&gt; component.&lt;/li&gt; &#xA; &lt;li&gt;Make a &lt;code&gt;Decoder&lt;/code&gt; for bins.&lt;/li&gt; &#xA; &lt;li&gt;Module &lt;code&gt;PostExample&lt;/code&gt; in the Service layer contains an example of decoding (simple) JSON values from the body of a &lt;code&gt;POST&lt;/code&gt; request and returing various responses.&lt;/li&gt; &#xA; &lt;li&gt;Existing functionality in the &lt;code&gt;Stock&lt;/code&gt; component contains examples of serializing JSON responses.&lt;/li&gt; &#xA; &lt;li&gt;Make an &lt;code&gt;HttpHandler&lt;/code&gt; for the handling the &lt;code&gt;POST&lt;/code&gt; request and combine it with existing handlers of the &lt;code&gt;Stock&lt;/code&gt; component.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise B&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Implement &#34;product repacking&#34; functionality in the &lt;code&gt;Repacking&lt;/code&gt; component.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Requirements and hints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bins can be nested in other bins, this is already modeled in the Model layer of the &lt;code&gt;Repacking&lt;/code&gt; component.&lt;/li&gt; &#xA; &lt;li&gt;Products stored in bins (&#34;bin trees&#34;) need to get protective packaging. Each individual product needs to be wrapped in a package, but the overall shape of the bin tree must remain the same. Storage Maching can magically mechanically do this, if you implement this repacking in F#.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;Repacking&lt;/code&gt; component contains working functionality for viewing bin trees and counting products in a bin tree. Experiment with these.&lt;/li&gt; &#xA; &lt;li&gt;After repacking, the number of products in a bin tree should remain the same. Use this as a sanity check for your repacking implementation.&lt;/li&gt; &#xA; &lt;li&gt;Adjust the model to express the packaging requirement.&lt;/li&gt; &#xA; &lt;li&gt;Implement repacking as a bin tree transformation function.&lt;/li&gt; &#xA; &lt;li&gt;Add the repacking step to an existing use-case function in the Application layer of the &lt;code&gt;Repacking&lt;/code&gt; component.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercise C&lt;/h2&gt; &#xA;&lt;p&gt;TODO: Something more advanced?&lt;/p&gt;</summary>
  </entry>
</feed>