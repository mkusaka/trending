<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:42:00Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JamesRandall/fsharp-wolfenstein</title>
    <updated>2022-06-21T01:42:00Z</updated>
    <id>tag:github.com,2022-06-21:/JamesRandall/fsharp-wolfenstein</id>
    <link href="https://github.com/JamesRandall/fsharp-wolfenstein" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An F# port of the 1992 classic Wolfenstein 3D&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;F# / Fable Wolfenstein&lt;/h1&gt; &#xA;&lt;p&gt;A work in progress F# port of Wolfenstein 3D. Wolfenstein was a formative experience for me! I was big into my PC gaming and the shareware scene when it came out and I remember not knowing anything about it but downloading it from a BBS, installing it, and then excitedly running round the house proclaiming &#34;THIS CHANGES EVERYTHING&#34; over and over again. No one cared.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JamesRandall/fsharp-wolfenstein/main/README_screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I had a go at writing a raycaster myself, in C, after I&#39;d played this back in 92/93 and I did get something running but it was both slow and fish eyed. It remained an itch to be scratched and so this F# port seems to have somehow happened.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve generally tried to keep things fairly functional with performance taking a bit of a hit in some cases as a result.&lt;/p&gt; &#xA;&lt;p&gt;The engine will run in the browser using Fable or as a native app on Mac, Windows and Linux - I&#39;ve only got a Mac to hand at the moment so that&#39;s all I&#39;ve tested. In theory should work on other platforms...&lt;/p&gt; &#xA;&lt;p&gt;The majority of the core code is shared between the two implementations though I didn&#39;t set off with multi-targetting in mind. I wrote the Fable version first and so if you look at the desktop code you will see I&#39;m essentially writing some lightweight JS runtime (DataView predominantly) implementations.&lt;/p&gt; &#xA;&lt;p&gt;Some of the code is rather scruffy and their are some arguments about ints and floats! Was learning as I went... Now its pretty much solved will slowly refactor into something cleaner over time. The Open GL code in the desktop port (I don&#39;t use OpenGL to render the game scene, rather I use it to render a single raycast texture) may look excessive - to expedite things I simply picked up some code from a virtual console I&#39;ve been working on on and off for a year or two and used that.&lt;/p&gt; &#xA;&lt;p&gt;I aim to at least get the AI working (and you can see the seeds of that in the code) and I will probably add the Wolfenstein health / info bar. Beyond that... don&#39;t know. Other fun projects to be built!&lt;/p&gt; &#xA;&lt;h2&gt;Prerequiresites&lt;/h2&gt; &#xA;&lt;p&gt;On Windows install OpenAL SDK from &lt;a href=&#34;https://www.openal.org/downloads/&#34;&gt;https://www.openal.org/downloads/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Controls in both cases:&lt;/p&gt; &#xA;&lt;p&gt;Cursor keys - movement Left Ctrl - fire Space bar - action (e.g. open door)&lt;/p&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;p&gt;Compatible with node 16, 17, 18.&lt;/p&gt; &#xA;&lt;p&gt;To run the game:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to the browser folder&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;npm ci&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start the compiler in watch mode and a development server: &lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After the first compilation is finished, in your browser open: &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build it for distribution&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;npm run build&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Desktop&lt;/h3&gt; &#xA;&lt;p&gt;You will need .net 6 installed to run this. To run the game:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to the desktop folder&lt;/li&gt; &#xA; &lt;li&gt;Enter: &lt;code&gt;dotnet run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation / File Format Notes&lt;/h2&gt; &#xA;&lt;p&gt;Things I found...&lt;/p&gt; &#xA;&lt;h3&gt;Orientable Sprite Layouts&lt;/h3&gt; &#xA;&lt;p&gt;Orientable enemies (i.e. those that can face away from the player - e.g. guards, dogs etc.) have the following index layout (using a compass to define things as shown below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   N            G&#xA;W     E&#xA;   S            P&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sprite&lt;/th&gt; &#xA;   &lt;th&gt;Faces direction&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;S (towards player)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;SW&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;W&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;NW&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;NE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;E&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;SE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Their are then a number of repetitions of this block for various animation frames:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Block&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Stationary - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Running frame 1 - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Running frame 2 - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Running frame 3 - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Running frame 4 - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The number of running frames can vary by enemy type - the above example is for a guard but a dog is different:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Block&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Stationary - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Running frame 1 - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Running frame 2 - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Running frame 3 - block of 8 sprites as above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;So their are 40 sprites for the position and movement state of each enemy.&lt;/p&gt; &#xA;&lt;p&gt;Their are then an arbitary (per enemy type) number of death sprites and firing sprites.&lt;/p&gt; &#xA;&lt;h3&gt;Sounds&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sound Index&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Huh guards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Dog bark&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Door close&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Door open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Player machine gun&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Player pistol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Or is this the player pistol?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Chain gun&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;Machine gun&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;Mein leben&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;Guard pistol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td&gt;Double bark&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;Yeah&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;33&lt;/td&gt; &#xA;   &lt;td&gt;Shite&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;34&lt;/td&gt; &#xA;   &lt;td&gt;Aieeee&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;35&lt;/td&gt; &#xA;   &lt;td&gt;Ohohaw&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Player -&amp;gt; Enemy Bullet Hit Detection&lt;/h3&gt; &#xA;&lt;p&gt;Considered a couple of approaches for detecting what, if any, enemy the player will hit if they fire. I could have cast a ray or rays but given the renderer has just walked the object tree and done the depth sorting and clipping I instead take note of the front most sprite that is in the centre of the viewport and apply a tolerance to it.&lt;/p&gt; &#xA;&lt;h3&gt;Asset Extraction&lt;/h3&gt; &#xA;&lt;p&gt;Didn&#39;t really want to process WLx files by myself so I used a couple of tools to extract the assets.&lt;/p&gt; &#xA;&lt;p&gt;Firstly &lt;a href=&#34;https://github.com/HiPhish/Wolf3DExtract&#34;&gt;Wolf3dExtract&lt;/a&gt; to retrieve the components and then &lt;a href=&#34;https://imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt; to convert textures from PPM to PNG format.&lt;/p&gt; &#xA;&lt;h3&gt;Screen Layout&lt;/h3&gt; &#xA;&lt;p&gt;Wolfenstein ran at 320x200. The actual 3D viewport max size is 304x152 - the viewport is surrounded by a 1 pixel black border Their is a 3 pixel border teal border at the top of the viewport above the black border and a 7 pixel border to the left and right of that black border.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve included the Shareware assets in this public repository. And all copyrights of the original game clearly remain with the copyright holders and all props to the geniuses behind the original game (I have no idea if Carmack, Romero, et al. are still copyright holders).&lt;/p&gt; &#xA;&lt;p&gt;All my efforts (so the F# code and surrounding build systems) are under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yatli/fvim</title>
    <updated>2022-06-21T01:42:00Z</updated>
    <id>tag:github.com,2022-06-21:/yatli/fvim</id>
    <link href="https://github.com/yatli/fvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross platform Neovim front-end UI, built with F# + Avalonia&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FVim&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/fvim.png&#34; width=&#34;40&#34; height=&#34;40&#34;&gt; &lt;a href=&#34;https://dev.azure.com/v-yadli/fvim/_build/latest?definitionId=2&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/v-yadli/fvim/_apis/build/status/yatli.fvim?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Cross platform Neovim front-end UI, built with &lt;a href=&#34;https://fsharp.org/&#34;&gt;F#&lt;/a&gt; + &lt;a href=&#34;http://avaloniaui.net/&#34;&gt;Avalonia&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/images/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yatli/fvim/releases&#34;&gt;Download&lt;/a&gt; the latest release package for your system, extract and run &lt;code&gt;FVim&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Windows 7 / Vista / 8.1 / Server 2008 R2 / Server 2012 R2, use the &lt;code&gt;win7-x64&lt;/code&gt; package. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/core/install/windows?tabs=netcore31&amp;amp;pivots=os-windows#additional-deps&#34;&gt;these additional steps to install compatibility patches&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The link to the KB update is no longer functioning. &lt;a href=&#34;https://github.com/dotnet/docs/issues/20459&#34;&gt;The issue is tracked here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Windows 10, use the &lt;code&gt;win-x64&lt;/code&gt; package -- this version has faster startup.&lt;/li&gt; &#xA; &lt;li&gt;For macOS, it&#39;s packaged as an app bundle -- unzip and drag it to your applications folder.&lt;/li&gt; &#xA; &lt;li&gt;For Linux: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Debian based distributions: &lt;code&gt;dpkg -i fvim_package_name.deb&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch Linux: &lt;a href=&#34;https://aur.archlinux.org/packages/fvim/&#34;&gt;Install via AUR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;RPM-based distributions: &lt;code&gt;rpm -ivh fvim_package_name.rpm&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Fedora: &lt;code&gt;dnf install fvim_package_name.rpm&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Compile from Source (having dotnet-sdk-6.0.x installed): &lt;pre&gt;&lt;code&gt;    git clone https://github.com/yatli/fvim &amp;amp;&amp;amp; cd fvim &amp;amp;&amp;amp; dotnet publish -f net6.0 -c Release -r linux-x64 --self-contained&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Theming done the (Neo)Vim way &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Cursor color/blink&lt;/li&gt; &#xA;   &lt;li&gt;Background image/composition&lt;/li&gt; &#xA;   &lt;li&gt;Custom UI elements are themed with &lt;code&gt;colorscheme&lt;/code&gt; settings&lt;/li&gt; &#xA;   &lt;li&gt;And more!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Font handling &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Proper font rendering -- respects font style, baseline, &lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;ligatures&lt;/a&gt; etc.&lt;/li&gt; &#xA;   &lt;li&gt;Built-in support for Nerd font -- no need to patch your fonts!&lt;/li&gt; &#xA;   &lt;li&gt;East Asia wide glyph display with font fallback options&lt;/li&gt; &#xA;   &lt;li&gt;Fine-grained font tweaking knobs for personal font rendering&lt;/li&gt; &#xA;   &lt;li&gt;Emojis!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GUI framework &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;HiDPI support -- try dragging it across two screens with different DPIs ;)&lt;/li&gt; &#xA;   &lt;li&gt;High performance rendering, low latency (60FPS on 4K display with reasonable font size!)&lt;/li&gt; &#xA;   &lt;li&gt;GPU acceleration&lt;/li&gt; &#xA;   &lt;li&gt;Multi-grid support -- try &lt;code&gt;Ctrl-w ge&lt;/code&gt; to detach a window into a separate OS window!&lt;/li&gt; &#xA;   &lt;li&gt;Input method support built from scratch&lt;/li&gt; &#xA;   &lt;li&gt;Rich information scrollbar (currently read-only)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yatli/gui-widgets.nvim&#34;&gt;Extend with UI Server Protocol&lt;/a&gt; -- UI widgets as NeoVim plugins&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Remoting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use a Windows FVim frontend with a WSL neovim: &lt;code&gt;fvim --wsl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use custom neovim binary: &lt;code&gt;fvim --nvim ~/bin/nvim.appimage&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use the front end with a remote neovim: &lt;code&gt;fvim --ssh user@host&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Connect to a remote NeoVim backend: &lt;code&gt;fvim --connect localhost:9527&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;tmux-like session server: &lt;code&gt;fvim --fvr attach --ssh user@host&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;As a terminal emulator: &lt;code&gt;fvim --terminal&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Try these bindings (note, fvim-specific settings only work in &lt;code&gt;ginit.vim&lt;/code&gt;, not &lt;code&gt;init.vim&lt;/code&gt;!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;if exists(&#39;g:fvim_loaded&#39;)&#xA;    &#34; good old &#39;set guifont&#39; compatibility with HiDPI hints...&#xA;    if g:fvim_os == &#39;windows&#39; || g:fvim_render_scale &amp;gt; 1.0&#xA;      set guifont=Iosevka\ Slab:h14&#xA;    else&#xA;      set guifont=Iosevka\ Slab:h28&#xA;    endif&#xA;      &#xA;    &#34; Ctrl-ScrollWheel for zooming in/out&#xA;    nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-ScrollWheelUp&amp;gt; :set guifont=+&amp;lt;CR&amp;gt;&#xA;    nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-ScrollWheelDown&amp;gt; :set guifont=-&amp;lt;CR&amp;gt;&#xA;    nnoremap &amp;lt;A-CR&amp;gt; :FVimToggleFullScreen&amp;lt;CR&amp;gt;&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some fancy cursor effects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;if exists(&#39;g:fvim_loaded&#39;)&#xA;    FVimCursorSmoothMove v:true&#xA;    FVimCursorSmoothBlink v:true&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yatli/fvim/master/images/fluent_cursor.gif&#34; alt=&#34;fluent_cursor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Detaching a window into an external OS window with &lt;code&gt;Ctrl-w ge&lt;/code&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/yatli/fvim/master/images/ext_win.gif&#34; alt=&#34;ext_win&#34;&gt; Detach as many and span them over your monitors!&lt;/p&gt; &#xA;&lt;p&gt;Custom popup menu entry icons (see below for how to configure): &lt;img src=&#34;https://user-images.githubusercontent.com/20684720/159672096-2630cbda-243d-46c3-b8f7-6d0a4743dffe.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re now targeting &lt;code&gt;net6.0&lt;/code&gt; so make sure to install the latest preview SDK from the &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET site&lt;/a&gt;. We&#39;re actively tracking the head of &lt;code&gt;Avalonia&lt;/code&gt;, and fetch the nightly packages from myget (see &lt;code&gt;NuGet.config&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Then, simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/yatli/fvim&#xA;cd fvim&#xA;dotnet build -c Release&#xA;dotnet run -c Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FVim-specific commands&lt;/h3&gt; &#xA;&lt;p&gt;The following new commands are available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;&#34; Toggle between normal and fullscreen&#xA;FVimToggleFullScreen&#xA;&#xA;&#34; Cursor tweaks&#xA;FVimCursorSmoothMove v:true&#xA;FVimCursorSmoothBlink v:true&#xA;&#xA;&#34; Background composition&#xA;FVimBackgroundComposition &#39;acrylic&#39;   &#34; &#39;none&#39;, &#39;transparent&#39;, &#39;blur&#39; or &#39;acrylic&#39;&#xA;FVimBackgroundOpacity 0.85            &#34; value between 0 and 1, default bg opacity.&#xA;FVimBackgroundAltOpacity 0.85         &#34; value between 0 and 1, non-default bg opacity.&#xA;FVimBackgroundImage &#39;C:/foobar.png&#39;   &#34; background image&#xA;FVimBackgroundImageVAlign &#39;center&#39;    &#34; vertial position, &#39;top&#39;, &#39;center&#39; or &#39;bottom&#39;&#xA;FVimBackgroundImageHAlign &#39;center&#39;    &#34; horizontal position, &#39;left&#39;, &#39;center&#39; or &#39;right&#39;&#xA;FVimBackgroundImageStretch &#39;fill&#39;     &#34; &#39;none&#39;, &#39;fill&#39;, &#39;uniform&#39;, &#39;uniformfill&#39;&#xA;FVimBackgroundImageOpacity 0.85       &#34; value between 0 and 1, bg image opacity&#xA;&#xA;&#34; Title bar tweaks&#xA;FVimCustomTitleBar v:true             &#34; themed with colorscheme&#xA;&#xA;&#34; Debug UI overlay&#xA;FVimDrawFPS v:true&#xA;&#xA;&#34; Font tweaks&#xA;FVimFontAntialias v:true&#xA;FVimFontAutohint v:true&#xA;FVimFontHintLevel &#39;full&#39;&#xA;FVimFontLigature v:true&#xA;FVimFontLineHeight &#39;+1.0&#39; &#34; can be &#39;default&#39;, &#39;14.0&#39;, &#39;-1.0&#39; etc.&#xA;FVimFontSubpixel v:true&#xA;FVimFontNoBuiltinSymbols v:true &#34; Disable built-in Nerd font symbols&#xA;&#xA;&#34; Try to snap the fonts to the pixels, reduces blur&#xA;&#34; in some situations (e.g. 100% DPI).&#xA;FVimFontAutoSnap v:true&#xA;&#xA;&#34; Font weight tuning, possible valuaes are 100..900&#xA;FVimFontNormalWeight 400&#xA;FVimFontBoldWeight 700&#xA;&#xA;&#34; Font debugging -- draw bounds around each glyph&#xA;FVimFontDrawBounds v:true&#xA;&#xA;&#34; UI options (all default to v:false)&#xA;FVimUIPopupMenu v:true      &#34; external popup menu&#xA;FVimUIWildMenu v:false      &#34; external wildmenu -- work in progress&#xA;&#xA;&#34; Keyboard mapping options&#xA;FVimKeyDisableShiftSpace v:true &#34; disable unsupported sequence &amp;lt;S-Space&amp;gt;&#xA;FVimKeyAutoIme v:true           &#34; Automatic input method engagement in Insert mode&#xA;FVimKeyAltGr v:true             &#34; Recognize AltGr. Side effect is that &amp;lt;C-A-Key&amp;gt; is then impossible&#xA;&#xA;&#34; Default options (workspace-agnostic)&#xA;FVimDefaultWindowWidth 1600     &#34; Default window size in a new workspace&#xA;FVimDefaultWindowHeight 900&#xA;&#xA;&#34; Detach from a remote session without killing the server&#xA;&#34; If this command is executed on a standalone instance,&#xA;&#34; the embedded process will be terminated anyway.&#xA;FVimDetach&#xA;&#xA;&#34; =========== BREAKING CHANGES -- the following commands are disabled ============&#xA;&#34; FVimUIMultiGrid v:true     -- per-window grid system -- done and enabled by default&#xA;&#34; FVimUITabLine v:false      -- external tabline -- not implemented&#xA;&#34; FVimUICmdLine v:false      -- external cmdline -- not implemented&#xA;&#34; FVimUIMessages v:false     -- external messages -- not implemented&#xA;&#34; FVimUITermColors v:false   -- not implemented&#xA;&#34; FVimUIHlState v:false      -- not implemented&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Startup options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: FVim [FVim-args] [NeoVim-args]&#xA;&#xA;FVim-args:&#xA;&#xA;    =========================== Client options ===================================&#xA;&#xA;    --ssh user@host             Start NeoVim remotely over ssh&#xA;    --wsl                       Start NeoVim in WSL&#xA;    --nvim path-to-program      Use an alternative nvim program&#xA;&#xA;    --nvr target                Connect to a remote NeoVim backend. The target&#xA;                                can be an IP endpoint (127.0.0.1:9527), or a&#xA;                                Unix socket address (/tmp/path/to/socket), or a&#xA;                                Windows named pipe (PipeName).&#xA;&#xA;    --setup                     Registers FVim as a text editor, and updates&#xA;                                file association and icons. Requires UAC&#xA;                                elevation on Windows.&#xA;    --uninstall                 Unregisters FVim as a text editor, and removes&#xA;                                file association and icons. Requires UAC&#xA;                                elevation on Windows.&#xA;&#xA;    =========================== FVim Remoting ====================================&#xA;                                &#xA;    --daemon                    Start a FVR multiplexer server.&#xA;                                Can be used with --nvim for alternative program.&#xA;&#xA;    --pipe name                 Override the named pipe address of the daemon.&#xA;                                When this option is not given, defaults to&#xA;                                &#39;/tmp/fvr-main&#39;&#xA;&#xA;    --fvr id [FILES...]         Connects to a FVR server.&#xA;    --fvr a[ttach] [FILES...]    - id: an integer session id to connect&#xA;    --fvr n[ew] [args...]        - attach: attach to the first available session &#xA;                                 - new: create a new session with args passed to&#xA;                                   NeoVim.&#xA;                                Can be used with --ssh or --wsl for connecting a&#xA;                                remote server. If neither is specified, connects&#xA;                                to the local server.&#xA;                                Can be used with --pipe to override the server &#xA;                                address.&#xA;&#xA;    =========================== Debug options ====================================&#xA;&#xA;    --trace-to-stdout           Trace to stdout.&#xA;    --trace-to-file             Trace to a file.&#xA;    --trace-patterns            Filter trace output by a list of keyword strings&#xA;&#xA;    =========================== Terminal emulator ================================&#xA;&#xA;    --terminal                  Start as a terminal emulator.&#xA;    --terminal-cmd              Command to run instead of the default shell.&#xA;&#xA;&#xA;The FVim arguments will be consumed and filtered before the rest are passed to NeoVim.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom PUM icons&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;PUM text&lt;/th&gt; &#xA;   &lt;th&gt;FVim&lt;/th&gt; &#xA;   &lt;th&gt;NERD equivalent&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;   &lt;td&gt;t&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Text_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Method&lt;/td&gt; &#xA;   &lt;td&gt;:&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Method_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;f&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Method_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Constructor&lt;/td&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/NewClass_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Field&lt;/td&gt; &#xA;   &lt;td&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Field_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ﰠ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Variable&lt;/td&gt; &#xA;   &lt;td&gt;v&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/LocalVariable_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Class&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Class_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ﴯ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Interface&lt;/td&gt; &#xA;   &lt;td&gt;I&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Interface_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Module&lt;/td&gt; &#xA;   &lt;td&gt;M&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Module_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Property&lt;/td&gt; &#xA;   &lt;td&gt;p&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Property_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ﰠ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unit&lt;/td&gt; &#xA;   &lt;td&gt;U&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Dimension_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;塞&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Value&lt;/td&gt; &#xA;   &lt;td&gt;l&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Literal_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enum&lt;/td&gt; &#xA;   &lt;td&gt;E&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Enumerator_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Keyword&lt;/td&gt; &#xA;   &lt;td&gt;k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/IntelliSenseKeyword_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Snippet&lt;/td&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Snippet_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Color&lt;/td&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/ColorPalette_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File&lt;/td&gt; &#xA;   &lt;td&gt;F&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/TextFile_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reference&lt;/td&gt; &#xA;   &lt;td&gt;r&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Reference_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Folder&lt;/td&gt; &#xA;   &lt;td&gt;d&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Folder_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EnumMember&lt;/td&gt; &#xA;   &lt;td&gt;m&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/EnumItem_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Constant&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Constant_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Struct&lt;/td&gt; &#xA;   &lt;td&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Structure_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;פּ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Event&lt;/td&gt; &#xA;   &lt;td&gt;e&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Event_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Operator&lt;/td&gt; &#xA;   &lt;td&gt;o&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Operator_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeParameter&lt;/td&gt; &#xA;   &lt;td&gt;T&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/yatli/fvim/raw/master/Assets/intellisense/Type_16x.png&#34; alt=&#34;Symbol&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;T&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;So instead of populating your symbol dictionary with the NERD-specific characters, use textual characters. FVim will pick them up and display graphical icons stored in &lt;code&gt;Assets/intellisense&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep up with the latest NeoVim features&lt;/li&gt; &#xA; &lt;li&gt;Ergonomics improvements via GUI/native OS integration&lt;/li&gt; &#xA; &lt;li&gt;Drive the flexible and accessible UI extension method &#34;UI Server Protocol&#34; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The idea is to establish a standard protocol for UI extensions, so that the nice GUI additions are not limited to one specific front-end. Think of a front end as a UI server handling UI Server Protocol requests issued from front-end-agnostic plugins. It&#39;s like Language Server Protocol, but for UI.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Non-Goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Electron ecosystem integration :p&lt;/li&gt; &#xA; &lt;li&gt;No walled garden. Everything should be accessible from the NeoVim core, which means: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No project explorers -- use a NeoVim plugin&lt;/li&gt; &#xA;   &lt;li&gt;No custom tab lines / document wells -- use a NeoVim plugin&lt;/li&gt; &#xA;   &lt;li&gt;No side-by-side markdown viewer, unless it&#39;s a NeoVim plugin, implemented via the UI-Protocol extensions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Fellow Front-Ends (to name a few)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovide/neovide&#34;&gt;Neovide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akiyosi/goneovim&#34;&gt;goneovim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vhakulinen/gnvim&#34;&gt;Gnvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smolck/uivonim&#34;&gt;Uivonim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glacambre/firenvim&#34;&gt;firenvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>