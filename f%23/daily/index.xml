<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-12T01:42:16Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>UnoSD/Pulumi.FSharp.Extensions</title>
    <updated>2022-07-12T01:42:16Z</updated>
    <id>tag:github.com,2022-07-12:/UnoSD/Pulumi.FSharp.Extensions</id>
    <link href="https://github.com/UnoSD/Pulumi.FSharp.Extensions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;F# computational expressions to reduce boilerplate in Pulumi code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pulumi.FSharp.Extensions&lt;/h1&gt; &#xA;&lt;p&gt;F# computational expressions to reduce boilerplate in Pulumi code&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.Azure&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.Azure&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.Aws&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.Aws&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.Kubernetes&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.Kubernetes&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.AzureAD&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.AzureAD&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.Core&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.Core&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.AzureNative&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.AzureNative&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.Gcp&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.Gcp&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Pulumi.FSharp.Tls&#34;&gt;&lt;img src=&#34;https://buildstats.info/nuget/Pulumi.FSharp.Tls&#34; alt=&#34;NuGet Version and Downloads count&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Readability difference&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Pulumi.Tls&lt;/strong&gt; vs &lt;strong&gt;Pulumi.FSharp.Tls&lt;/strong&gt; for a self signed certificate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/UnoSD/Pulumi.FSharp.Extensions/master/readability.png&#34; alt=&#34;Pulumi.Tls&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The computational expression syntax removes redundant parenthesis, &lt;code&gt;input&lt;/code&gt;/&lt;code&gt;io&lt;/code&gt;/&lt;code&gt;inputList&lt;/code&gt; helpers, equal signs, lists for single input, subitems boilerplate.&lt;/p&gt; &#xA;&lt;h1&gt;Packages examples&lt;/h1&gt; &#xA;&lt;h2&gt;Pulumi.FSharp.Aws&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;bucket {&#xA;    name &#34;bucket-example&#34;&#xA;    acl  &#34;private&#34;&#xA;&#xA;    bucketWebsite { &#xA;        indexDocument &#34;index.html&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pulumi.FSharp.Azure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;let rg =&#xA;    resourceGroup {&#xA;        name                   &#34;ResourceGroupName&#34;&#xA;    }&#xA;&#xA;let sa =&#xA;    storageAccount {&#xA;        name                   &#34;StorageAccountName&#34;&#xA;        resourceGroup          rg.Name&#xA;        accountReplicationType &#34;LRS&#34;&#xA;        accountTier            &#34;Standard&#34;&#xA;        enableHttpsTrafficOnly true&#xA;    }&#xA;    &#xA;let container =&#xA;    storageContainer {&#xA;        name                   &#34;StorageContainer&#34;&#xA;        account                sa.Name&#xA;    }&#xA;    &#xA;let contentBlob =&#xA;    blob {&#xA;        name                   &#34;StorageBlob&#34;&#xA;        storageAccountName     storage&#xA;        storageContainerName   buildContainer&#xA;        source                 { Text = &#34;Blob content&#34; }.ToPulumiType&#xA;    }&#xA;    &#xA;let sasToken =&#xA;    sasToken {&#xA;        storage         sa&#xA;        blob            contentBlob&#xA;    }&#xA;    &#xA;let appServicePlan =&#xA;    plan {&#xA;        name                   &#34;FunctionAppServiceName&#34;&#xA;        resourceGroup          rg.Name&#xA;        kind                   &#34;FunctionApp&#34;&#xA;        &#xA;        planSku {&#xA;            size &#34;Y1&#34;&#xA;            tier &#34;Dynamic&#34;&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pulumi.FSharp.AzureAD&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;application {&#xA;    name                    &#34;AzureADApplicationName&#34;&#xA;    displayName             &#34;AzureAD application name&#34;&#xA;    oauth2AllowImplicitFlow true&#xA;    &#xA;    replyUrls               [&#xA;        config.[&#34;WebEndpoint&#34;]&#xA;        &#34;https://jwt.ms&#34;&#xA;        &#34;http://localhost:8080&#34;&#xA;    ]            &#xA;    &#xA;    applicationOptionalClaims {&#xA;        idTokens [&#xA;            applicationOptionalClaimsIdToken {&#xA;                name                 &#34;upn&#34;&#xA;                additionalProperties &#34;include_externally_authenticated_upn&#34;&#xA;                essential            true&#xA;            }&#xA;        ]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pulumi.FSharp.AzureNative&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;let storage =&#xA;    storageAccount {&#xA;        resourceGroup rg.Name&#xA;        location      rg.Location&#xA;        name          &#34;StorageAccount&#34;            &#xA;        sku           { name &#34;LRS&#34; }            &#xA;        kind          Kind.StorageV2&#xA;    }&#xA;&#xA;blobContainer { &#xA;    accountName   storage.Name&#xA;    resourceGroup rg.Name&#xA;    name          &#34;StorageContainer&#34;&#xA;    &#xA;    PublicAccess.None&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pulumi.FSharp.Core&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;// Output computational expressions&#xA;let deploymentCountBars =&#xA;    output {&#xA;        let! previousOutputs =&#xA;            StackReference(Deployment.Instance.StackName).Outputs&#xA;        &#xA;        return previousOutputs.[&#34;CountBars&#34;] + &#34;I&#34;&#xA;    }&#xA;    &#xA;// Output as secret&#xA;let someSecret =&#xA;    secretOutput {&#xA;        let! key1 = sa.PrimaryConnectionString&#xA;        let! key2 = sa.SecondaryConnectionString&#xA;        &#xA;        return $&#34;Secret connection strings: {key1} {key2}&#34;&#xA;    }&#xA;    &#xA;// Mixing Output&amp;lt;&amp;gt; and Task&amp;lt;&amp;gt;&#xA;let sas =&#xA;    output {&#xA;        let! connectionString = sa.PrimaryConnectionString&#xA;        let! containerName = container.Name&#xA;        let! url = blob.Url&#xA;&#xA;        let start =&#xA;            DateTime.Now.ToString(&#34;u&#34;).Replace(&#39; &#39;, &#39;T&#39;)&#xA;        &#xA;        let expiry =&#xA;            DateTime.Now.AddHours(1.).ToString(&#34;u&#34;).Replace(&#39; &#39;, &#39;T&#39;)&#xA;        &#xA;        // Task to Output&#xA;        let! tokenResult =&#xA;            GetAccountBlobContainerSASArgs(&#xA;                ConnectionString = connectionString,&#xA;                ContainerName = containerName,&#xA;                Start = start,&#xA;                Expiry = expiry,&#xA;                Permissions = (GetAccountBlobContainerSASPermissionsArgs(Read = true))&#xA;            ) |&amp;gt;&#xA;            // This returns Task&amp;lt;&amp;gt;&#xA;            GetAccountBlobContainerSAS.InvokeAsync&#xA;&#xA;        return url + tokenResult.Sas&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pulumi.FSharp.Kubernetes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;deployment {&#xA;    name &#34;application&#34;&#xA;&#xA;    deploymentSpec {&#xA;        replicas 1&#xA;&#xA;        labelSelector { &#xA;            matchLabels [ &#34;app&#34;, input &#34;nginx&#34; ]&#xA;        }&#xA;&#xA;        podTemplateSpec {&#xA;            objectMeta {&#xA;                labels [ &#34;app&#34;, input &#34;nginx&#34; ]&#xA;            }&#xA;&#xA;            podSpec {&#xA;                containers [&#xA;                    container {&#xA;                        name  &#34;nginx&#34;&#xA;                        image &#34;nginx&#34;&#xA;                        ports [ containerPort { containerPortValue 80 } ]&#xA;                    }&#xA;                ]&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Full stack file example&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a Pulumi F# project using &lt;code&gt;pulumi new fsharp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upgrade the project to .NET 5&lt;/li&gt; &#xA; &lt;li&gt;Add the NuGet package &lt;code&gt;Pulumi.FSharp.Azure&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;Program.fs&lt;/code&gt; and paste the example below&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pulumi up&lt;/code&gt; and create the infrastructure using a readable strongly-typed DSL&lt;/li&gt; &#xA; &lt;li&gt;Log in your new Visual Studio VM using the IP from the outputs and credentials in code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To discover available properties for each resource, examine the code documentation of the builders (E.G. hover over a &lt;code&gt;Pulumi.FSharp.Azure.Compute.windowsVirtualMachine&lt;/code&gt; computational expression to find all available properties and on each property to discover their description)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;module Program&#xA;&#xA;open Pulumi.FSharp.Azure.Compute.Inputs&#xA;open Pulumi.FSharp.Azure.Network.Inputs&#xA;open Pulumi.FSharp.Azure.Compute&#xA;open Pulumi.FSharp.Azure.Network&#xA;open Pulumi.FSharp.Azure.Core&#xA;open Pulumi.FSharp&#xA;&#xA;let infra () =&#xA;    let rg =&#xA;        resourceGroup {&#xA;            name     &#34;rg-example&#34;&#xA;            location &#34;West Europe&#34;&#xA;        }&#xA;&#xA;    let pip =&#xA;        publicIp {&#xA;            name             &#34;pip-example&#34;&#xA;            resourceGroup    rg.Name&#xA;            location         rg.Location&#xA;            allocationMethod &#34;Dynamic&#34;&#xA;        }&#xA;    &#xA;    let vnet =&#xA;        virtualNetwork {&#xA;            name          &#34;vnet-example&#34;&#xA;            addressSpaces &#34;10.0.0.0/16&#34;&#xA;            location      rg.Location&#xA;            resourceGroup rg.Name&#xA;        }&#xA;&#xA;    let subnet =&#xA;        subnet {&#xA;            name               &#34;snet-example&#34;&#xA;            resourceGroup      rg.Name&#xA;            virtualNetworkName vnet.Name&#xA;            addressPrefixes    &#34;10.0.2.0/24&#34;&#xA;        }&#xA;&#xA;    let nic =&#xA;        networkInterface {&#xA;            name          &#34;nic-example&#34;&#xA;            location      rg.Location&#xA;            resourceGroup rg.Name&#xA;&#xA;            ipConfigurations [ &#xA;                networkInterfaceIpConfiguration {&#xA;                    name                       &#34;internal&#34;&#xA;                    subnetId                   subnet.Id&#xA;                    privateIpAddressAllocation &#34;Dynamic&#34;&#xA;                    publicIpAddressId          pip.Id&#xA;                }&#xA;            ]&#xA;        }&#xA;    &#xA;    let vm =&#xA;        windowsVirtualMachine {&#xA;            name                &#34;vm-example&#34;&#xA;            resourceName        &#34;vm-example&#34;&#xA;            resourceGroup       rg.Name&#xA;            size                &#34;Standard_A1_v2&#34;&#xA;            networkInterfaceIds nic.Id&#xA;            &#xA;            windowsVirtualMachineOsDisk {&#xA;                caching            &#34;ReadWrite&#34;&#xA;                storageAccountType &#34;Standard_LRS&#34;&#xA;            }&#xA;            &#xA;            adminUsername &#34;unosdpulumi&#34;&#xA;            adminPassword &#34;ReplaceThisWithAProperPassword%%55&#34;&#xA;            &#xA;            windowsVirtualMachineSourceImageReference {&#xA;                offer     &#34;visualstudio2019latest&#34;&#xA;                publisher &#34;microsoftvisualstudio&#34;&#xA;                sku       &#34;vs-2019-comm-latest-win10-n&#34;&#xA;                version   &#34;latest&#34;&#xA;            }&#xA;        }&#xA;        &#xA;    dict [ &#34;PublicIP&#34;, vm.PublicIpAddress :&amp;gt; obj ]&#xA;           &#xA;[&amp;lt;EntryPoint&amp;gt;]&#xA;let main _ =&#xA;  Deployment.run infra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Examples library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/UnoSD/Pulumi.FSharp.Extensions.Examples&#34;&gt;https://github.com/UnoSD/Pulumi.FSharp.Extensions.Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Example project using the library&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/UnoSD/UnoCash/raw/master/UnoCash.Pulumi/Program.fs&#34;&gt;https://github.com/UnoSD/UnoCash&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;One language to rule them all (F# eXchange 2020)&lt;/h1&gt; &#xA;&lt;p&gt;I had the pleasure of being invited to speak at the F# eXchange 2020 on the 21st of October and, as promised, I have created a repo to share the slides of the talk: &lt;a href=&#34;https://github.com/UnoSD/FSharp-eXChange2020&#34;&gt;https://github.com/UnoSD/FSharp-eXChange2020&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The talk goes through infrastructure as code in F# with Pulumi in general and explains the rationale and some of the technical details behind this repository.&lt;/p&gt; &#xA;&lt;p&gt;Link to the video: &lt;a href=&#34;https://skillsmatter.com/skillscasts/14888-lightning-talk-one-language-to-rule-them-all-iac-in-f-sharp&#34;&gt;https://skillsmatter.com/skillscasts/14888-lightning-talk-one-language-to-rule-them-all-iac-in-f-sharp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development notes&lt;/h1&gt; &#xA;&lt;p&gt;Given that changes to the &lt;code&gt;Pulumi.FSharp.Myriad&lt;/code&gt; project do not trigger re-generation unless the Myriad.fs file is modified, a &lt;code&gt;PreBuildEvent&lt;/code&gt; in each &lt;code&gt;fsproj&lt;/code&gt; file uses &lt;code&gt;sed&lt;/code&gt; to change a dummy variable to a random integer on each build (this only works on GNU/Linux machines with &lt;code&gt;sed&lt;/code&gt;). To avoid &lt;code&gt;git&lt;/code&gt; finding changes in the &lt;code&gt;Myriad.fs&lt;/code&gt; file every time, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git update-index --skip-worktree Pulumi.FSharp.Aws/Myriad.fs&#xA;git update-index --skip-worktree Pulumi.FSharp.Gcp/Myriad.fs&#xA;git update-index --skip-worktree Pulumi.FSharp.Tls/Myriad.fs&#xA;git update-index --skip-worktree Pulumi.FSharp.Azure/Myriad.fs&#xA;git update-index --skip-worktree Pulumi.FSharp.AzureAD/Myriad.fs&#xA;git update-index --skip-worktree Pulumi.FSharp.Kubernetes/Myriad.fs&#xA;git update-index --skip-worktree Pulumi.FSharp.AzureNative/Myriad.fs&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>