<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-20T01:35:33Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>slaveOftime/Fun.AspNetCore</title>
    <updated>2023-02-20T01:35:33Z</updated>
    <id>tag:github.com,2023-02-20:/slaveOftime/Fun.AspNetCore</id>
    <link href="https://github.com/slaveOftime/Fun.AspNetCore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fun.AspNetCore&lt;/h1&gt; &#xA;&lt;p&gt;This is a experimental project for provide a very thin layer on AspNetCore minimal api for fsharp developers who love CE syntax (‚ù§).&lt;/p&gt; &#xA;&lt;p&gt;There is a convention for using it:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;endpoints&lt;/strong&gt; is a group of endpoint, it can contain nested &lt;strong&gt;endpoints&lt;/strong&gt; or get/put/post/delete/patch endpoints etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;endpoints &#34;api&#34; {&#xA;    // the settings like authorization, goes first&#xA;    &#xA;    // nested endpoints&#xA;    endpoints &#34;user&#34; {&#xA;        ...&#xA;    }&#xA;&#xA;    // single endpoint&#xA;    get &#34;hi&#34; { ... }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a single endpoint it also follow similar pattern&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;get &#34;hi&#34; {&#xA;    // the settings like authorization, goes first&#xA;&#xA;    // handle should put in the last&#xA;    handle (fun (v1: T1) (v2: T2) ... -&amp;gt; ...)&#xA;    // The function argumentS should not be tuples&#xA;    // You can use function which is defined in other places, but it must be defined as Func&amp;lt;_, _&amp;gt;(fun (v1: T1) (v2: T2) ... -&amp;gt; ...).&#xA;    // Like: let getUser = Func&amp;lt;int, User&amp;gt;(fun userId -&amp;gt; { Id = userId; Name = &#34;foo&#34; })&#xA;    // The different with csharp minimal api is: you can not add attribute to the argument because of fsharp limitation.&#xA;&#xA;    // You can also yield IResult and NodeRenderFragment(for Fun.Blazor) without use handle, they are special&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fun.AspNetCore example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;...&#xA;let builder = WebApplication.CreateBuilder(Environment.GetCommandLineArgs())&#xA;let services = builder.Services&#xA;...&#xA;let app = builder.Build()&#xA;...&#xA;&#xA;app.MapGroup(&#xA;    endpoints &#34;api&#34; {&#xA;        get &#34;hi&#34; { Results.Text &#34;world&#34; }&#xA;        // You can nest endpoints&#xA;        endpoints &#34;user&#34; {&#xA;            get &#34;{userId}&#34; {&#xA;                authorization&#xA;                produces typedef&amp;lt;User&amp;gt; 200&#xA;                producesProblem 404&#xA;                handle UserApis.getUser&#xA;            }&#xA;            put &#34;{userId}&#34; {&#xA;                // You can access all apis provided by AspNetCore by use set operation&#xA;                set (fun route -&amp;gt; route.Accepts(&#34;application/json&#34;).WithName(&#34;foo&#34;))&#xA;                handle (fun (userId: int) (user: User) -&amp;gt; Results.Text $&#34;Updated: {userId} {user.Name}&#34;)&#xA;            }&#xA;        }&#xA;        endpoints &#34;account&#34; {&#xA;            anonymous&#xA;            get &#34;login&#34; { handle (fun () -&amp;gt; &#34;logged in&#34;) }&#xA;        }&#xA;        endpoints &#34;security&#34; {&#xA;            authorization&#xA;            tags &#34;high-security&#34;&#xA;            get &#34;money&#34; { handle (fun () -&amp;gt; &#34;world&#34;) }&#xA;            put &#34;money&#34; { handle (fun () -&amp;gt; &#34;world&#34;) }&#xA;        }&#xA;    }&#xA;)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fun.AspNetCore.Blazor example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;...&#xA;let builder = WebApplication.CreateBuilder(Environment.GetCommandLineArgs())&#xA;let services = builder.Services&#xA;...&#xA;services.AddControllersWithViews() // Will register some service for writing dom into response&#xA;...&#xA;let app = builder.Build()&#xA;...&#xA;&#xA;app.MapGroup(&#xA;    endpoints &#34;view&#34; {&#xA;        // Integrate with Fun.Blazor&#xA;        get &#34;time&#34; {&#xA;            cacheOutput (fun b -&amp;gt; b.Expire(TimeSpan.FromSeconds 5))&#xA;            div { $&#34;{DateTime.Now}&#34; }&#xA;        }&#xA;        get &#34;blog-list&#34; {&#xA;            div {&#xA;                class&#39; &#34;blog-list my-5&#34;&#xA;                childContent [&#xA;                    for i in 1..2 do&#xA;                        a {&#xA;                            href $&#34;/view/blog/{i}&#34;&#xA;                            $&#34;blog {i}&#34;&#xA;                        }&#xA;                ]&#xA;            }&#xA;        }&#xA;        get &#34;blog/{blogId}&#34; {&#xA;            handle (fun (blogId: int) -&amp;gt;&#xA;                div {&#xA;                    h2 { $&#34;Blog {blogId}&#34; }&#xA;                    p { &#34;Please give me feedback if you want.&#34; }&#xA;                }&#xA;                |&amp;gt; Results.View&#xA;            )&#xA;        }&#xA;    }&#xA;)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>