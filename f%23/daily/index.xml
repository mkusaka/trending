<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-12T01:27:19Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ieviev/fflat</title>
    <updated>2023-10-12T01:27:19Z</updated>
    <id>tag:github.com,2023-10-12:/ieviev/fflat</id>
    <link href="https://github.com/ieviev/fflat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;F# native script compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fflat - F# native script compiler on &lt;a href=&#34;https://flattened.net/&#34;&gt;bflat&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;img alt=&#34;Nuget&#34; src=&#34;https://img.shields.io/nuget/v/fflat&#34;&gt; &#xA;&lt;h2&gt;Build 1MB native executables from .fsx scripts!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ieviev/fflat/main/img/2023-10-08T04:48.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet tool install --global fflat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fflat script.fsx            # about 13MB, full .NET&#xA;fflat script.fsx --small    # about 2.6MB, no debug/globalization/symbols&#xA;fflat script.fsx --tiny     # about 1MB, no reflection/exceptions, no printfn!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;run &lt;code&gt;fflat --help&lt;/code&gt; for a list of options&lt;/p&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fflat ./helloworld.fsx --small build -x -r &#34;mylibrary.dll&#34; --os windows ## ... etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;‚ùØ fflat ./helloworld.fsx build --help&#xA;Usage:&#xA;  fflat &amp;lt;script&amp;gt; [fflat options] build|build-il [&amp;lt;&amp;gt;...] [bflat options]&#xA;&#xA;fflat options:&#xA;    -t, --tiny                            Smallest possible executable (adds bflat args&#xA;                                          --no-reflection --no-globalization --no-stacktrace-data&#xA;                                          --no-exception-messages --no-debug-info&#xA;                                          --separate-symbols -Os). avoid using printfn!&#xA;    -s, --small                           small executable but retains reflection, stack trace&#xA;                                          and exception messages (adds bflat args --no-debug-info&#xA;                                          --no-globalization --separate-symbols -Os)&#xA;    --output, -o &amp;lt;outputFile&amp;gt;             output executable path&#xA;&#xA;bflat options:&#xA;  -d, --define &amp;lt;define&amp;gt;                    Define conditional compilation symbol(s)&#xA;  -r, --reference &amp;lt;file list&amp;gt;              Additional .NET assemblies to include&#xA;  --target &amp;lt;Exe|Shared|WinExe&amp;gt;             Build target&#xA;  -o, --out &amp;lt;file&amp;gt;                         Output file path&#xA;  -c                                       Produce object file, but don&#39;t run linker&#xA;  --ldflags &amp;lt;ldflags&amp;gt;                      Arguments to pass to the linker&#xA;  -x                                       Print the commands&#xA;  --arch &amp;lt;x64|arm64&amp;gt;                       Target architecture&#xA;  --os &amp;lt;linux|windows|uefi&amp;gt;                Target operating system&#xA;  --libc &amp;lt;libc&amp;gt;                            Target libc (Windows: shcrt|none, Linux: glibc|bionic)&#xA;  -Os, --optimize-space                    Favor code space when optimizing&#xA;  -Ot, --optimize-time                     Favor code speed when optimizing&#xA;  -O0, --no-optimization                   Disable optimizations&#xA;  --no-reflection                          Disable support for reflection&#xA;  --no-stacktrace-data                     Disable support for textual stack traces&#xA;  --no-globalization                       Disable support for globalization (use invariant mode)&#xA;  --no-exception-messages                  Disable exception messages&#xA;  --no-pie                                 Do not generate position independent executable&#xA;  --separate-symbols                       Separate debugging symbols (Linux)&#xA;  --no-debug-info                          Disable generation of debug information&#xA;  --map &amp;lt;file&amp;gt;                             Generate an object map file&#xA;  -i &amp;lt;library|library!function&amp;gt;            Bind to entrypoint statically&#xA;  --feature &amp;lt;Feature=[true|false]&amp;gt;         Set feature switch value&#xA;  -res &amp;lt;&amp;lt;file&amp;gt;[,&amp;lt;name&amp;gt;[,public|private]]&amp;gt;  Managed resource to include&#xA;  --stdlib &amp;lt;DotNet|None|Zero&amp;gt;              C# standard library to use&#xA;  --deterministic                          Produce deterministic outputs including timestamps&#xA;  --verbose                                Enable verbose logging&#xA;  --langversion &amp;lt;langversion&amp;gt;              C# language version (&#39;latest&#39;, &#39;default&#39;, &#39;latestmajor&#39;,&#xA;                                           &#39;preview&#39;, or version like &#39;6&#39; or &#39;7.1&#39;&#xA;  -?, -h, --help                           Show help and usage information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Common questions, troubleshooting&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Why?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;there is almost a 1000x difference in startup time for dotnet fsi scripts using nuget!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ieviev/fflat/main/img/2023-10-09T17:12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;there is also &lt;a href=&#34;https://github.com/kant2002/FSharpPacker/tree/main&#34;&gt;FSharpPacker&lt;/a&gt; for .fsx scripts, which compiles .fsx scripts to native executables using the standard MSBuild pipeline (PublishAOT), but &lt;a href=&#34;https://flattened.net/&#34;&gt;bflat&lt;/a&gt; can produce significantly smaller executables or even omit the .NET runtime/GC all together.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;TypeInitialization_Type_NoTypeAvailable&lt;/code&gt; errors&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;use &lt;code&gt;--small&lt;/code&gt; instead of &lt;code&gt;--tiny&lt;/code&gt;, --tiny will crash if your script uses any reflection features.&lt;/p&gt; &#xA;&lt;p&gt;there&#39;s many untrimmable features in the F# core library like printfn, quotations and linq. substituting all printfn calls with stdout.WriteLine will produce significantly smaller binaries as well.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Have fun!&lt;/p&gt;</summary>
  </entry>
</feed>