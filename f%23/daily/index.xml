<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-29T01:31:49Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AngelMunoz/FsFediverseArchive</title>
    <updated>2022-11-29T01:31:49Z</updated>
    <id>tag:github.com,2022-11-29:/AngelMunoz/FsFediverseArchive</id>
    <link href="https://github.com/AngelMunoz/FsFediverseArchive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Set of Google Cloud Functions Written in F# to archive some of my fediverse activity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;F# and Google Cloud Functions&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple and small project to set up an endpoint for misskey webhooks every time I publish a note (toot/tweet) and I (or someone else) reply on my own notes.&lt;/p&gt; &#xA;&lt;p&gt;The idea is quite simple:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Publish notes in misskey&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;MkWebHook&lt;/code&gt; &lt;a href=&#34;https://cloud.google.com/functions/docs/create-deploy-gcloud#functions-prepare-environment-csharp&#34;&gt;function&lt;/a&gt; endpoint gets hit in &lt;a href=&#34;https://cloud.google.com&#34;&gt;google cloud platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Parse the content and fire a &lt;a href=&#34;https://cloud.google.com/pubsub/docs/publish-receive-messages-client-library?hl=en#pubsub-client-libraries-csharp&#34;&gt;Pub/Sub&lt;/a&gt; event&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;MkSaveNote&lt;/code&gt; function gets triggered when the a Pub/Sub topic is published from &lt;code&gt;MkWebHook&lt;/code&gt; and saves the content of the note to &lt;a href=&#34;https://firebase.google.com/docs/firestore/query-data/get-data#c&#34;&gt;Firestore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;MkDisplay&lt;/code&gt; function grabs whatever it is currently stored in firestore and renders an HTML document with some of the information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While arguably most of that could have been done in the same function I wanted to try to connect different services along the way, as cloud services are often more than just a tutorial kind of function where once you get out of your rails it is nothing like the tutorial, so far I find this satisfactory and it was a good learning excercise, feel free to ask and raise issues if you have questions.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h1&gt;What is &lt;a href=&#34;https://https://github.com/misskey-dev/misskey&#34;&gt;MissKey&lt;/a&gt;?&lt;/h1&gt; &#xA; &lt;p&gt;Misskey is a social network that just as mastodon, pixelfed, and other decentralized social media, implements the &lt;a href=&#34;https://activitypub.rocks/&#34;&gt;ActivityPub&lt;/a&gt; protocol it can federate content and is compatible with mastodon up to some extent (where the spec is respected by both parties)&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>AlexeyRaga/fsharp-foldl</title>
    <updated>2022-11-29T01:31:49Z</updated>
    <id>tag:github.com,2022-11-29:/AlexeyRaga/fsharp-foldl</id>
    <link href="https://github.com/AlexeyRaga/fsharp-foldl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This library provides strict left folds that stream in constant memory, and you can combine folds using Applicative style to derive new folds. Derived folds still traverse the container just once and are often as efficient as hand-written folds.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FSharp.Foldl&lt;/h1&gt; &#xA;&lt;p&gt;An F# port of a wonderful &lt;a href=&#34;https://github.com/Gabriella439/foldl&#34;&gt;foldl&lt;/a&gt; by &lt;a href=&#34;https://github.com/Gabriella439&#34;&gt;Gabriella Gonzalez&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use this foldl library when you want to compute multiple folds over a collection in one pass over the data without space leaks.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose that you want to simultaneously compute the sum of the list and the length of the list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let sumAndLength (xs : int seq) : (int, int) =&#xA;    (Seq.sum xs, Seq.length xs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, this solution is suboptimal because it goes over the sequence in two passes. It may not even be possible (or correct) when the sequence is &#34;hot&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Usually people work around this by hand-writing a strict left fold that looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let sumAndLength (xs : int seq) : (int, int) =&#xA;    let step (x, y) n = x + n, y + 1&#xA;    xs |&amp;gt; Seq.fold step (0, 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That now goes over the sequence in one pass, however, this is not satisfactory because you have to reimplement the guts of every fold that you care about.&lt;/p&gt; &#xA;&lt;p&gt;What if you just stored the step function and accumulator for each individual fold and let some high-level library do the combining for you? That&#39;s exactly what this library does! Using this library you can instead write:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Foldl&#xA;&#xA;let sumAndLength (xs : int seq) : (int, int) =&#xA;    Fold.fold (Fold.zip Fold.sum Fold.length) xs&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see how this works, the &lt;code&gt;Fold.sum&lt;/code&gt; value is just a datatype storing the step function and the starting state (and a final extraction function):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let sum = Fold.create 0 (+) id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same thing for the Fold.length value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let length = Fold.create 0 (fun n _ -&amp;gt; n + 1) id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and &lt;code&gt;Fold.zip&lt;/code&gt; combines them into a new datatype storing the composite step function and starting state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Fold&amp;lt;int, int * int&amp;gt;&#xA;let sumAndLengthFold = Fold.zip sum length&#xA;&#xA;let result = Fold.fold sumAndLengthFold [1.0 .. 10] // (55.0, 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively the Applicative syntax can be used to compose folds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Foldl.Operators&#xA;&#xA;let tuple a b = (a, b)&#xA;&#xA;let sumAndLengthFold = tuple &amp;lt;!&amp;gt; sum &amp;lt;*&amp;gt; length&#xA;&#xA;let result = Fold.fold sumAndLengthFold [1.0 .. 10] // (55.0, 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a computation expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let sumAndLengthFold =&#xA;    fold {&#xA;        let! x = sum&#xA;        and! y = length&#xA;        return (x, y)&#xA;    }&#xA;&#xA;let result = Fold.fold sumAndLengthFold [1.0 .. 10] // (55.0, 10)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>