<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-16T01:28:06Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ronnieholm/FSharp-clean-architecture-sample</title>
    <updated>2023-10-16T01:28:06Z</updated>
    <id>tag:github.com,2023-10-16:/ronnieholm/FSharp-clean-architecture-sample</id>
    <link href="https://github.com/ronnieholm/FSharp-clean-architecture-sample" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Applying F# principles to domain driven design/clean architecture.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scrum clean architecture sample&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Got a comment or a question? Don&#39;t hesitate to drop me an email or open an issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This sample focuses on applying functional constructs over cluing together libraries and frameworks. It substitutes the .NET dependency injection container, FluentValidation, MediatR, Entity Framework, Moq, Respawn, and a migration tool for simpler constructs.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s an example of imperative shell, functional core. Specifically, &lt;code&gt;Program.fs&lt;/code&gt; and &lt;code&gt;Infrastructure.fs&lt;/code&gt; make up the shell while &lt;code&gt;Application.fs&lt;/code&gt; and &lt;code&gt;Domain.fs&lt;/code&gt; make up the core.&lt;/p&gt; &#xA;&lt;p&gt;Where F# shines is in the core and &lt;code&gt;IntegrationTest.fs&lt;/code&gt;. The shell is similar in nature to many C# applications.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ronnieholm/FSharp-clean-architecture-sample/master/docs/onion-architecture.png&#34; width=&#34;550px&#34;&gt; &#xA;&lt;p&gt;The application has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;REST API adhering to the &lt;a href=&#34;https://opensource.zalando.com/restful-api-guidelines/&#34;&gt;Zalando API guidelines&lt;/a&gt; with JWTs supporting role-based security.&lt;/li&gt; &#xA; &lt;li&gt;A simple identity provider to issue, renew, and inspect JWTs accepted by the REST API.&lt;/li&gt; &#xA; &lt;li&gt;Command Query Responsibility Segregation (CQRS) access to the application layer from clients.&lt;/li&gt; &#xA; &lt;li&gt;Paged responses for endpoints which return collections.&lt;/li&gt; &#xA; &lt;li&gt;Integration tests with the ability to fake any dependency.&lt;/li&gt; &#xA; &lt;li&gt;Database migrations and initial data seeding.&lt;/li&gt; &#xA; &lt;li&gt;ASP.NET health checks for memory and database.&lt;/li&gt; &#xA; &lt;li&gt;Architecture decision records under &lt;code&gt;docs/architecture-decision-records&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Scrum domain was chosen because it offers sufficient complexity and everyone is familiar with it, though most aspects of the application is illustrated with stories and tasks only.&lt;/p&gt; &#xA;&lt;p&gt;With only stories and tasks, clean architecture may seem to introduce a disproportional amount of complexity. A larger domain and integrations with external services is where clean architecture starts to pays off.&lt;/p&gt; &#xA;&lt;p&gt;That said, not every project requires an implementation of every concept from clean architecture and domain driven design. Those should be scaled up or down based on actual business complexity.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Running the tests or the web app creates the SQLite databases in the Git root as &lt;code&gt;scrum_web.sqlite&lt;/code&gt; and &lt;code&gt;scrum_test.sqlite&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dotnet tool restore&#xA;$ dotnet build&#xA;$ dotnet test&#xA;$ dotnet run --project src/Scrum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Opening the Git repository with VSCode will make it pick up the DevContainer configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Operations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Authentication (supported roles: member and/or admin)&#xA;## Post&#xA;curl &#34;https://localhost:5000/authentication/issue-token?userId=1&amp;amp;roles=member,admin&#34; --insecure --request post&#xA;curl https://localhost:5000/authentication/renew-token --insecure --request post -H &#34;Authorization: Bearer &amp;lt;token&amp;gt;&#34;&#xA;curl https://localhost:5000/authentication/introspect --insecure --request post -H &#34;Authorization: Bearer &amp;lt;token&amp;gt;&#34;&#xA;&#xA;# Stories&#xA;## Post&#xA;curl https://localhost:5000/stories --insecure --request post -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39; -d &#39;{&#34;title&#34;: &#34;title&#34;, &#34;description&#34;: &#34;description&#34;}&#39;&#xA;curl https://localhost:5000/stories/&amp;lt;storyId&amp;gt;/tasks --insecure --request post -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39; -d &#39;{&#34;title&#34;: &#34;title&#34;,&#34;description&#34;: &#34;description&#34;}&#39;&#xA;&#xA;## Put&#xA;curl https://localhost:5000/stories/&amp;lt;storyId&amp;gt; --insecure --request put -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39; -d &#39;{&#34;title&#34;: &#34;title1&#34;,&#34;description&#34;: &#34;description1&#34;}&#39;&#xA;curl https://localhost:5000/stories/&amp;lt;storyId&amp;gt;/tasks/&amp;lt;taskId&amp;gt; --insecure --request put -H &#39;Content-Type: application/json&#39; -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39; -d &#39;{&#34;title&#34;: &#34;title1&#34;,&#34;description&#34;: &#34;description1&#34;}&#39;&#xA;&#xA;## Delete&#xA;curl https://localhost:5000/stories/&amp;lt;storyId&amp;gt;/tasks/&amp;lt;taskId&amp;gt; --insecure --request delete -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39;&#xA;curl https://localhost:5000/stories/&amp;lt;storyId&amp;gt; --insecure --request delete -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39;&#xA;&#xA;## Get&#xA;curl https://localhost:5000/stories/&amp;lt;storyId&amp;gt; --insecure -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39;&#xA;curl &#34;https://localhost:5000/stories?limit=&amp;lt;limit&amp;gt;&amp;amp;cursor=&amp;lt;cursor&amp;gt;&#34; --insecure -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39;&#xA;&#xA;# PersistedDomainEvents&#xA;## Get&#xA;curl https://localhost:5000/persisted-domain-events/&amp;lt;aggregateId&amp;gt; --insecure -H &#39;Authorization: Bearer &amp;lt;token&amp;gt;&#39;&#xA;&#xA;# Health&#xA;## Get&#xA;curl https://localhost:5000/health --insecure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&#34;&gt;Implementing Domain-Driven Design by Vaughn Vernon&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Domain-Modeling-Made-Functional-Domain-Driven/dp/1680502549&#34;&gt;Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F# by Scott Wlaschin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jasontaylrdev/CleanArchitecture&#34;&gt;Jason Taylor&#39;s C# Clean Architecture Solution Template&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WpkDN78P884&#34;&gt;Uncle Bob: Architecture the Lost Years&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/architecture/microservices&#34;&gt;.NET Microservices: Architecture for Containerized .NET Applications&lt;/a&gt;, specifically the chapter on &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns&#34;&gt;Tackling Business Complexity in a Microservice with DDD and CQRS Patterns&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fsprojects/FSharp.UMX&#34;&gt;F# units of measure for primitive non-numeric types&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>