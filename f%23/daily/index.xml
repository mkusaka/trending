<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T01:40:11Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DieselMeister/Terminal.Gui.Elmish</title>
    <updated>2022-06-19T01:40:11Z</updated>
    <id>tag:github.com,2022-06-19:/DieselMeister/Terminal.Gui.Elmish</id>
    <link href="https://github.com/DieselMeister/Terminal.Gui.Elmish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An elmish wrapper around Miguel de Icaza&#39;s &#39;Gui.cs&#39; https://github.com/migueldeicaza/gui.cs including a fable like view DSL.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Terminal.Gui.Elmish&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/DieselMeister/Terminal.Gui.Elmish&#34;&gt;&lt;img src=&#34;https://travis-ci.org/DieselMeister/Terminal.Gui.Elmish.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An elmish wrapper around Miguel de Icaza&#39;s &#39;Gui.cs&#39; &lt;a href=&#34;https://github.com/migueldeicaza/gui.cs&#34;&gt;https://github.com/migueldeicaza/gui.cs&lt;/a&gt; including a Feliz-like like view DSL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13096516/173627457-eb4d5e71-9819-4c9f-aa13-a037846745a4.gif&#34; alt=&#34;20220614_terminal_gui_2&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Major Changes&lt;/h1&gt; &#xA;&lt;p&gt;I decided to rework the DSL to a Feliz-style. Thank you Zaid Ajaj (&lt;a href=&#34;https://github.com/Zaid-Ajaj/Feliz&#34;&gt;https://github.com/Zaid-Ajaj/Feliz&lt;/a&gt;) for that awesome idea! You can leverage now more the Intellisense of your IDE.&lt;br&gt; I also introduced a diffing mechanism, so that the elements are not recreated on every cycle. I try actually to update the current elements.&lt;/p&gt; &#xA;&lt;p&gt;This can be end up sometimes in some weird behavior or exceptions. I try to find all the quirks, but help me out and open an issue if you find something.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s missing again!&lt;/p&gt; &#xA;&lt;p&gt;Almost all properties from the View-Elements should be available. Some events I extended. For example the Toggled-Event from a checkbox returns the old value in the event.&lt;br&gt; I mapped the event to return both.&lt;/p&gt; &#xA;&lt;h1&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;In the examples you find the old project, which I converted to the new DSL&lt;/p&gt; &#xA;&lt;h1&gt;Usage:&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;Program.mkProgram init update view  &#xA;|&amp;gt; Program.run&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some fable-elmish DSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;&#xA;module Counter&#xA;&#xA;open Terminal.Gui&#xA;open Terminal.Gui.Elmish&#xA;open System&#xA;&#xA;type Model = {&#xA;    Counter:int&#xA;    IsSpinning: bool&#xA;}&#xA;&#xA;type Msg =&#xA;    | Increment&#xA;    | Decrement&#xA;    | Reset&#xA;    | StartSpin&#xA;    | StopSpin&#xA;    | Spinned&#xA;&#xA;let init () : Model * Cmd&amp;lt;Msg&amp;gt; =&#xA;    let model = {&#xA;        Counter = 0&#xA;        IsSpinning = false&#xA;    }&#xA;    model, Cmd.none&#xA;&#xA;&#xA;module Commands =&#xA;    let startSpinning isSpinning =&#xA;        fun dispatch -&amp;gt;&#xA;            async {&#xA;                do! Async.Sleep 20&#xA;                if isSpinning then&#xA;                    dispatch Increment&#xA;                    dispatch Spinned&#xA;            }&#xA;            |&amp;gt; Async.StartImmediate&#xA;        |&amp;gt; Cmd.ofSub&#xA;&#xA;let update (msg:Msg) (model:Model) =&#xA;    match msg with&#xA;    | Increment -&amp;gt;&#xA;        {model with Counter = model.Counter + 1}, Cmd.none&#xA;    | Decrement -&amp;gt;&#xA;        {model with Counter = model.Counter - 1}, Cmd.none&#xA;    | Reset -&amp;gt;&#xA;        {model with Counter = 0}, Cmd.none&#xA;    | StartSpin -&amp;gt;&#xA;        {model with IsSpinning = true}, Commands.startSpinning true&#xA;    | StopSpin -&amp;gt;&#xA;        {model with IsSpinning = false}, Cmd.none&#xA;    | Spinned -&amp;gt;&#xA;        model, Commands.startSpinning model.IsSpinning&#xA;        &#xA;&#xA;&#xA;let view (model:Model) (dispatch:Msg-&amp;gt;unit) =&#xA;    View.page [&#xA;        page.menuBar [&#xA;            menubar.menus [&#xA;                menu.menuBarItem [&#xA;                    menu.prop.title &#34;Menu 1&#34;&#xA;                    menu.prop.children [&#xA;                        menu.submenuItem [&#xA;                            menu.prop.title &#34;Sub Menu 1&#34;&#xA;                            menu.prop.children [&#xA;                                menu.menuItem (&#34;Sub Item 1&#34;, (fun () -&amp;gt; System.Diagnostics.Debug.WriteLine($&#34;Sub menu 1 triggered&#34;)))&#xA;                                menu.menuItem [&#xA;                                    menu.prop.title &#34;Sub Item 2&#34;&#xA;                                    menu.item.action (fun () -&amp;gt; System.Diagnostics.Debug.WriteLine($&#34;Sub menu 2 triggered&#34;))&#xA;                                    menu.item.itemstyle.check&#xA;                                    menu.item.isChecked true&#xA;                                ]&#xA;                            ]&#xA;                        ]&#xA;                    ]&#xA;                ]&#xA;            ]&#xA;        ]&#xA;        prop.children [&#xA;            View.label [&#xA;                prop.position.x.center&#xA;                prop.position.y.at 1&#xA;                prop.textAlignment.centered&#xA;                prop.color (Color.BrightYellow, Color.Green)&#xA;                prop.text &#34;&#39;F#ncy&#39; Counter!&#34;&#xA;            ] &#xA;&#xA;            View.button [&#xA;                prop.position.x.center&#xA;                prop.position.y.at 5&#xA;                prop.text &#34;Up&#34;&#xA;                button.onClick (fun () -&amp;gt; dispatch Increment)&#xA;            ] &#xA;&#xA;            View.label [&#xA;                let c = (model.Counter |&amp;gt; float) / 100.0&#xA;                let x = (16.0 * Math.Cos(c)) |&amp;gt; int &#xA;                let y = (8.0 * Math.Sin(c)) |&amp;gt; int&#xA;&#xA;                prop.position.x.at (x + 20)&#xA;                prop.position.y.at (y + 10)&#xA;                prop.textAlignment.centered&#xA;                prop.color (Color.Magenta, Color.BrightYellow)&#xA;                prop.text $&#34;The Count of &#39;Fancyness&#39; is {model.Counter}&#34;&#xA;            ] &#xA;&#xA;&#xA;            View.button [&#xA;                prop.position.x.center&#xA;                prop.position.y.at 7&#xA;                prop.text &#34;Down&#34;&#xA;                button.onClick (fun () -&amp;gt; dispatch Decrement)&#xA;            ] &#xA;&#xA;            View.button [&#xA;                prop.position.x.center&#xA;                prop.position.y.at 9&#xA;                prop.text &#34;Start Spinning&#34;&#xA;                button.onClick (fun () -&amp;gt; dispatch StartSpin)&#xA;            ] &#xA;&#xA;            View.button [&#xA;                prop.position.x.center&#xA;                prop.position.y.at 11&#xA;                prop.text &#34;Stop Spinning&#34;&#xA;                button.onClick (fun () -&amp;gt; dispatch StopSpin)&#xA;            ] &#xA;&#xA;            View.button [&#xA;                prop.position.x.center&#xA;                prop.position.y.at 13&#xA;                prop.text &#34;Reset&#34;&#xA;                button.onClick (fun () -&amp;gt; dispatch Reset)&#xA;            ]&#xA;        ]&#xA;    ]&#xA;&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install via Nuget:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Terminal.Gui.Elmish&#34;&gt;https://www.nuget.org/packages/Terminal.Gui.Elmish&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet add package Terminal.Gui.Elmish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Referencing the underlying Element&lt;/h1&gt; &#xA;&lt;p&gt;You can reference the underlying element. Also use this to influcence further setting when the element is created!&lt;/p&gt; &#xA;&lt;p&gt;use &lt;code&gt;prop.ref (fun view -&amp;gt; ...)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;View.button [&#xA;    prop.position.x.center&#xA;    prop.position.y.at 13&#xA;    prop.text &#34;Reset&#34;&#xA;    button.onClick (fun () -&amp;gt; dispatch Reset)&#xA;    prop.ref (fun view -&amp;gt; myButtonRef &amp;lt;- (view :?&amp;gt; Terminal.Gui.Button).xxxx // do your stuff here)&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A lot of Thanks to Miguel de Icaza. Nice Project!.&lt;/p&gt;</summary>
  </entry>
</feed>