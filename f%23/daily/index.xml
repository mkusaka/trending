<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T01:34:48Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jwosty/FSharp.Logf</title>
    <updated>2023-01-08T01:34:48Z</updated>
    <id>tag:github.com,2023-01-08:/jwosty/FSharp.Logf</id>
    <link href="https://github.com/jwosty/FSharp.Logf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;printf-style functions for Microsoft.Extensions.Logging.ILogger (Fable-compatible) - https://www.nuget.org/packages?q=FSharp.Logf&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;logf - printf-style functions for ILogger&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jwosty/FSharp.Logf/actions/workflows/ci-ubuntu.yml&#34;&gt;&lt;img src=&#34;https://github.com/jwosty/FSharp.Logf/actions/workflows/ci-ubuntu.yml/badge.svg?sanitize=true&#34; alt=&#34;CI (Ubuntu)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library implements printf-style logging functions for any Microsoft.Extensions.Logging.ILogger, allowing you to log in an F# style with the full power of structured logging. Here&#39;s an example, adding logging to the snippet from &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/fsharp/tutorials/async#combine-asynchronous-computations&#34;&gt;https://learn.microsoft.com/en-us/dotnet/fsharp/tutorials/async#combine-asynchronous-computations&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Put this in a project and reference these packages: FSharp.Logf, Microsoft.Extensions.Logging, Microsoft.Extensions.Logging.Console&#xA;open System&#xA;open System.IO&#xA;open Microsoft.Extensions.Logging&#xA;open FSharp.Logf&#xA;&#xA;// Type annotation would be inferred if omitted (included here for clarity)&#xA;let printTotalFileBytes (ml: ILogger) path =&#xA;    async {&#xA;        try&#xA;            let! bytes = File.ReadAllBytesAsync(path) |&amp;gt; Async.AwaitTask&#xA;            let fileName = Path.GetFileName(path)&#xA;            // Log at information level, with fileName and bytesLength as the parameter names for any logging sinks&#xA;            // supporting structured logging&#xA;            logfi ml &#34;File %s{fileName} has %d{bytesLength} bytes&#34; fileName bytes.Length&#xA;        with e -&amp;gt; &#xA;            // Log at error level, setting an exception&#xA;            elogfe ml e &#34;Exception accessing file: &#39;%s{path}&#39;&#34; path&#xA;    }&#xA;&#xA;[&amp;lt;EntryPoint&amp;gt;]&#xA;let main argv =&#xA;    // Create a Microsoft-provided logger. Choose your favorite Logger provider (for example: Serilog, NLog, log4net)&#xA;    let logger = LoggerFactory.Create(fun builder -&amp;gt; builder.AddConsole().SetMinimumLevel(LogLevel.Debug) |&amp;gt; ignore).CreateLogger()&#xA;    &#xA;    // Log at debug level. Since the NewLine argument doesn&#39;t have a parameter name right after it, it will be baked&#xA;    // directly into the string. The argv argument, however, will be parameterized like the others.&#xA;    logfd logger &#34;ARGV:%s%s{argv}&#34; Environment.NewLine (&#34;[|&#34; + (argv |&amp;gt; String.concat &#34;;&#34;) + &#34;|]&#34;)&#xA;&#xA;    argv&#xA;    |&amp;gt; Seq.map (printTotalFileBytes logger)&#xA;    |&amp;gt; Async.Parallel&#xA;    |&amp;gt; Async.Ignore&#xA;    |&amp;gt; Async.RunSynchronously&#xA;    &#xA;    0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fable compatability&lt;/h2&gt; &#xA;&lt;p&gt;This library is Fable-compatible. You can take advantage of this like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;#if !FABLE_COMPILER&#xA;open Microsoft.Extensions.Logging&#xA;open FSharp.Logf&#xA;#else&#xA;open Fable.Microsoft.Extensions.Logging&#xA;open Fable.FSharp.Logf&#xA;#endif&#xA;&#xA;let ml =&#xA;#if !FABLE_COMPILER&#xA;    LoggerFactory.Create(fun builder -&amp;gt; builder.AddConsole().SetMinimumLevel(LogLevel.Debug) |&amp;gt; ignore)&#xA;#else&#xA;    ConsoleLogger()&#xA;#endif&#xA;&#xA;logfi ml &#34;Hello, %s{arg}!&#34; &#34;world&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>