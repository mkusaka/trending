<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T01:38:58Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fsprojects/SIMDArray</title>
    <updated>2022-05-30T01:38:58Z</updated>
    <id>tag:github.com,2022-05-30:/fsprojects/SIMDArray</id>
    <link href="https://github.com/fsprojects/SIMDArray" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SIMD enhanced Array operations&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/fsprojects/SIMDArray/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/fsprojects/SIMDArray/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; test for dotnet 3.1, 5.0, 6.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SIMDArray FSharp&lt;/h1&gt; &#xA;&lt;p&gt;SIMD and other Performance enhanced Array operations for F#&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;//Faster map&#xA;&#xA;let array = [| 1 .. 1000 |]&#xA;let squaredArray = array |&amp;gt; Array.SIMD.map (fun x -&amp;gt; x*x) (fun x -&amp;gt; x*x)  &#xA;&#xA;// Map and many other functions need one lambda to map the Vector&amp;lt;T&amp;gt;, &#xA;// and one to handle any leftover elements if array is not divisible by &#xA;// Vector&amp;lt;T&amp;gt;.Count. In the case of simple arithmetic operations they can&#xA;// often be the same as shown here. If you arrange your arrays such that &#xA;// they will never have leftovers, or don&#39;t care how leftovers are treated &#xA;// just pass a nop like so:&#xA;&#xA;open SIMDArrayUtils&#xA;&#xA;let array = [|1;2;3;4;5;6;7;8|]&#xA;let squaredArray = array |&amp;gt; Array.SIMD.map (fun x -&amp;gt; x*x) nop&#xA;&#xA;&#xA;// Some functions can be used just like the existing array functions but run faster&#xA;// such as create and sum:&#xA;&#xA;let newArray = Array.SIMD.create 1000 5 //create a new array of length 1000 filled with 5&#xA;let sum = Array.SIMD.sum newArray&#xA;&#xA;// The Performance module has functions that are faster and/or use less memory&#xA;// via other means than SIMD. Usually by relaxing ordering constraints or adding&#xA;// constraints to predicates:&#xA;&#xA;let distinctElements = Array.Performance.distinctUnordered someArray&#xA;let filteredElements = Array.Performance.filterLessThan 5 someArray&#xA;let filteredElements = Array.Performance.filterSimplePredicate (fun x -&amp;gt; x*x &amp;lt; 100) someArray&#xA;Array.Performance.mapInPlace (fun x-&amp;gt; x*x) someArray&#xA;&#xA;// The SIMDParallel module has parallelized versions of some of the SIMD operations:&#xA;&#xA;let sum = Array.SIMDParallel.sum array&#xA;let map = Array.SIMDParallel.map (fun x -&amp;gt; x*x) array&#xA;&#xA;// Two extensions are added to System.Threading.Tasks.Parallel, to enable Parallel.For loops&#xA;// with a stride length efficiently. They also have much less overhead. You can use them to roll your own &#xA;// parallel SIMD functions, or any parallel operation that needs a stride length &amp;gt; 1&#xA;&#xA;// Using:&#xA;// ForStride (fromInclusive : int) (toExclusive :int) (stride : int) (f : int -&amp;gt; unit)&#xA;// You can map each Vector in an array and store it in result&#xA;Parallel.ForStride 0 array.Length (Vector&amp;lt; ^T&amp;gt;.Count) &#xA;        (fun i -&amp;gt; (vf (Vector&amp;lt; ^T&amp;gt;(array,i ))).CopyTo(result,i))&#xA;&#xA;// Using:&#xA;// ForStrideAggreagate (fromInclusive : int) (toExclusive :int) (stride : int) (acc: ^T) (f : int -&amp;gt; ^T -&amp;gt; ^T) combiner&#xA;// You can sum or otherwise aggregate the elements of an array a Vector at a time, starting from an initial acc&#xA;let result = Parallel.ForStrideAggreagate 0 array.Length (Vector&amp;lt; ^T&amp;gt;.Count) Vector&amp;lt; ^T&amp;gt;(0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(fun i acc -&amp;gt; acc + (Vector&amp;lt; ^T&amp;gt;(array,i)))  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(fun x acc -&amp;gt; x + acc)  //combines the results from each task into a final Vector that is returned&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;Only 64 bit builds are supported. Mono should work with 5.0+, but I have not yet tested it. Performance improvements will vary depending on your CPU architecture, width of Vector type, and the operations you apply. For small arrays the core libs may be faster due SIMD overhead. When measuring performance be sure to use Release builds with optimizations turned on.&lt;/p&gt; &#xA;&lt;p&gt;Floating point addition is not associative, so results with SIMD operations will not be identical, though often they will be more accurate, such as in the case of sum, or average.&lt;/p&gt; &#xA;&lt;h2&gt;Upd: .NET 7.0 Basic Tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;// * Summary *&#xA;&#xA;BenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1526 (21H2)&#xA;AMD Ryzen 7 3800X, 1 CPU, 16 logical and 8 physical cores&#xA;.NET SDK=7.0.100-preview.3.22179.4&#xA;  [Host]     : .NET 7.0.0 (7.0.22.17504), X64 RyuJIT DEBUG&#xA;  DefaultJob : .NET 7.0.0 (7.0.22.17504), X64 RyuJIT&#xA;&#xA;&#xA;|     Method |  Length |            Mean |         Error |        StdDev |   Gen 0 |   Gen 1 |   Gen 2 |   Allocated |&#xA;|----------- |-------- |----------------:|--------------:|--------------:|--------:|--------:|--------:|------------:|&#xA;|     ForSum |     100 |        98.78 ns |      0.533 ns |      0.473 ns |  0.0507 |       - |       - |       424 B |&#xA;| ForSumSIMD |     100 |        56.32 ns |      0.378 ns |      0.353 ns |  0.0507 |  0.0001 |       - |       424 B |&#xA;|        Dot |     100 |       157.32 ns |      0.672 ns |      0.629 ns |       - |       - |       - |           - |&#xA;|    DotSIMD |     100 |        19.59 ns |      0.121 ns |      0.107 ns |       - |       - |       - |           - |&#xA;|        Max |     100 |        55.57 ns |      0.146 ns |      0.129 ns |       - |       - |       - |           - |&#xA;|    MaxSIMD |     100 |        13.53 ns |      0.070 ns |      0.065 ns |       - |       - |       - |           - |&#xA;|      MaxBy |     100 |        60.37 ns |      0.163 ns |      0.153 ns |       - |       - |       - |           - |&#xA;|  MaxBySIMD |     100 |        20.06 ns |      0.063 ns |      0.056 ns |       - |       - |       - |           - |&#xA;|     ForSum |    1000 |       862.28 ns |      5.412 ns |      5.063 ns |  0.4807 |  0.0067 |       - |     4,024 B |&#xA;| ForSumSIMD |    1000 |       441.22 ns |      2.874 ns |      2.548 ns |  0.4809 |  0.0072 |       - |     4,024 B |&#xA;|        Dot |    1000 |     1,484.23 ns |      5.292 ns |      4.691 ns |       - |       - |       - |           - |&#xA;|    DotSIMD |    1000 |       162.66 ns |      1.095 ns |      0.971 ns |       - |       - |       - |           - |&#xA;|        Max |    1000 |       526.03 ns |      2.177 ns |      1.818 ns |       - |       - |       - |           - |&#xA;|    MaxSIMD |    1000 |        44.45 ns |      0.101 ns |      0.094 ns |       - |       - |       - |           - |&#xA;|      MaxBy |    1000 |       506.51 ns |      0.619 ns |      0.548 ns |       - |       - |       - |           - |&#xA;|  MaxBySIMD |    1000 |       139.48 ns |      0.126 ns |      0.106 ns |       - |       - |       - |           - |&#xA;|     ForSum | 1000000 | 1,642,884.15 ns | 32,686.799 ns | 52,783.087 ns | 93.7500 | 93.7500 | 93.7500 | 4,000,061 B |&#xA;| ForSumSIMD | 1000000 |   484,576.66 ns |  9,685.048 ns |  9,512.012 ns | 95.7031 | 95.7031 | 95.7031 | 4,000,055 B |&#xA;|        Dot | 1000000 | 1,468,907.49 ns |  6,495.111 ns |  5,070.956 ns |       - |       - |       - |           - |&#xA;|    DotSIMD | 1000000 |   160,549.66 ns |    277.915 ns |    232.071 ns |       - |       - |       - |           - |&#xA;|        Max | 1000000 |   485,969.64 ns |    565.230 ns |    501.061 ns |       - |       - |       - |           - |&#xA;|    MaxSIMD | 1000000 |    48,748.71 ns |     72.373 ns |     67.698 ns |       - |       - |       - |           - |&#xA;|      MaxBy | 1000000 |   490,922.69 ns |    563.828 ns |    470.822 ns |       - |       - |       - |           - |&#xA;|  MaxBySIMD | 1000000 |   135,049.15 ns |     57.546 ns |     51.013 ns |       - |       - |       - |           - |&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Performance Comparison vs Standard Array Functions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fsprojects/SIMDArray/master/#parallel&#34;&gt;VS Core Lib Parallel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fsprojects/SIMDArray/master/#core32&#34;&gt;VS Core Lib 32bit Floats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fsprojects/SIMDArray/master/#core64&#34;&gt;VS Core Lib 64bit Floats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fsprojects/SIMDArray/master/#mathnet&#34;&gt;VS MathNET.Numerics 32bit Floats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fsprojects/SIMDArray/master/#mathnetnative&#34;&gt;VS MathNET.Numerics MKL Native 32bit Floats&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;&#xA;Host Process Environment Information:&#xA;BenchmarkDotNet=v0.9.8.0&#xA;OS=Microsoft Windows NT 6.2.9200.0&#xA;Processor=Intel(R) Core(TM) i7-4712HQ CPU 2.30GHz, ProcessorCount=8&#xA;Frequency=2240907 ticks, Resolution=446.2479 ns, Timer=TSC&#xA;CLR=MS.NET 4.0.30319.42000, Arch=64-bit RELEASE [RyuJIT]&#xA;GC=Concurrent Workstation&#xA;JitModules=clrjit-v4.6.1590.0&#xA;&#xA;Type=SIMDBenchmark  Mode=Throughput  Platform=X64  &#xA;Jit=RyuJit  GarbageCollection=Concurrent Workstation  &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sum 1 million 32bit ints, ParallelSIMD vs SIMD vs Core Lib &lt;a name=&#34;parallel&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Length&lt;/th&gt; &#xA;   &lt;th&gt;Median&lt;/th&gt; &#xA;   &lt;th&gt;StdDev&lt;/th&gt; &#xA;   &lt;th&gt;Scaled&lt;/th&gt; &#xA;   &lt;th&gt;Gen 0&lt;/th&gt; &#xA;   &lt;th&gt;Gen 1&lt;/th&gt; &#xA;   &lt;th&gt;Gen 2&lt;/th&gt; &#xA;   &lt;th&gt;Bytes Allocated/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;979.9477 us&lt;/td&gt; &#xA;   &lt;td&gt;15.4036 us&lt;/td&gt; &#xA;   &lt;td&gt;1.00&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;1.00&lt;/td&gt; &#xA;   &lt;td&gt;14,967.09&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDsum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;163.5663 us&lt;/td&gt; &#xA;   &lt;td&gt;2.7872 us&lt;/td&gt; &#xA;   &lt;td&gt;0.17&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.17&lt;/td&gt; &#xA;   &lt;td&gt;1,960.97&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDParallelsum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;82.3069 us&lt;/td&gt; &#xA;   &lt;td&gt;6.4637 us&lt;/td&gt; &#xA;   &lt;td&gt;0.08&lt;/td&gt; &#xA;   &lt;td&gt;3.74&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.04&lt;/td&gt; &#xA;   &lt;td&gt;1,674.94&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;With 32bit Floats Vs Core Lib. Map function &lt;code&gt;(fun x -&amp;gt; x*x)&lt;/code&gt;&lt;a name=&#34;core32&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Length&lt;/th&gt; &#xA;   &lt;th&gt;Median&lt;/th&gt; &#xA;   &lt;th&gt;StdDev&lt;/th&gt; &#xA;   &lt;th&gt;Gen 0&lt;/th&gt; &#xA;   &lt;th&gt;Gen 1&lt;/th&gt; &#xA;   &lt;th&gt;Gen 2&lt;/th&gt; &#xA;   &lt;th&gt;Bytes Allocated/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDContains&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;10&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;32.3354 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.0933 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;22.80&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;13.0234 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.6457 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMap&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;37.3615 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.0693 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.09&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;53.95&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Map&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;15.6651 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.2422 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.04&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;25.80&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;19.3450 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.1866 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;6.2273 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.2982 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMax&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;20.8972 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.7380 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;7.9275 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.9701 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDContains&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;100&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.6295 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;5.0472 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.04&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;24.92&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;140.9920 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.4739 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMap&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;75.8733 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.5875 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.33&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;192.40&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Map&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;120.3029 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.4232 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.29&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;172.39&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;32.0058 ns&lt;/td&gt; &#xA;   &lt;td&gt;1.1225 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;77.6100 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.4902 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMax&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;35.9042 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.0587 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;92.1754 ns&lt;/td&gt; &#xA;   &lt;td&gt;9.6637 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDContains&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;417.0760 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;10.6672 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.04&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;1,333.0239 ns&lt;/td&gt; &#xA;   &lt;td&gt;11.8959 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMap&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;439.8549 ns&lt;/td&gt; &#xA;   &lt;td&gt;7.5810 ns&lt;/td&gt; &#xA;   &lt;td&gt;3.05&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;2,176.91&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Map&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;1,073.2894 ns&lt;/td&gt; &#xA;   &lt;td&gt;16.1444 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.93&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;2,086.24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;162.8308 ns&lt;/td&gt; &#xA;   &lt;td&gt;5.8158 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;947.1124 ns&lt;/td&gt; &#xA;   &lt;td&gt;14.4370 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMax&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;167.0257 ns&lt;/td&gt; &#xA;   &lt;td&gt;5.3584 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;698.2252 ns&lt;/td&gt; &#xA;   &lt;td&gt;21.2244 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.03&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDContains&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;427,765.2001 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3,541.8344 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.23&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7,507.17&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;1,315,198.8375 ns&lt;/td&gt; &#xA;   &lt;td&gt;19,634.6409 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.36&lt;/td&gt; &#xA;   &lt;td&gt;14,912.24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMap&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;1,747,002.9295 ns&lt;/td&gt; &#xA;   &lt;td&gt;18,219.0807 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;519.18&lt;/td&gt; &#xA;   &lt;td&gt;1,198,305.57&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Map&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;1,962,408.1761 ns&lt;/td&gt; &#xA;   &lt;td&gt;23,319.8186 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;746.00&lt;/td&gt; &#xA;   &lt;td&gt;1,702,687.72&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;160,972.7015 ns&lt;/td&gt; &#xA;   &lt;td&gt;3,359.1696 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.05&lt;/td&gt; &#xA;   &lt;td&gt;1,960.97&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;955,224.0942 ns&lt;/td&gt; &#xA;   &lt;td&gt;12,365.7613 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.38&lt;/td&gt; &#xA;   &lt;td&gt;14,853.87&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMax&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;158,835.3746 ns&lt;/td&gt; &#xA;   &lt;td&gt;3,773.1697 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.06&lt;/td&gt; &#xA;   &lt;td&gt;1,961.66&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;633,761.7634 ns&lt;/td&gt; &#xA;   &lt;td&gt;6,149.8767 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.24&lt;/td&gt; &#xA;   &lt;td&gt;7,495.76&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;With 64bit Floats vs Core Lib. Map function &lt;code&gt;(fun x -&amp;gt; x*x+x)&lt;/code&gt;&lt;a name=&#34;core64&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Length&lt;/th&gt; &#xA;   &lt;th&gt;Median&lt;/th&gt; &#xA;   &lt;th&gt;StdDev&lt;/th&gt; &#xA;   &lt;th&gt;Gen 0&lt;/th&gt; &#xA;   &lt;th&gt;Gen 1&lt;/th&gt; &#xA;   &lt;th&gt;Gen 2&lt;/th&gt; &#xA;   &lt;th&gt;Bytes Allocated/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDContains&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;842.2604 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;36.6615 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.13&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;1,338.2032 ns&lt;/td&gt; &#xA;   &lt;td&gt;21.7835 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;302.8986 ns&lt;/td&gt; &#xA;   &lt;td&gt;12.0417 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.03&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;953.9314 ns&lt;/td&gt; &#xA;   &lt;td&gt;7.3770 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMax&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;302.3690 ns&lt;/td&gt; &#xA;   &lt;td&gt;11.8064 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.03&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;713.9227 ns&lt;/td&gt; &#xA;   &lt;td&gt;23.1721 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMap&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;905.3396 ns&lt;/td&gt; &#xA;   &lt;td&gt;21.1726 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.79&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;4,447.68&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Map&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;1,369.6668 ns&lt;/td&gt; &#xA;   &lt;td&gt;17.1072 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.88&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;4,591.74&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDContains&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;100000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;86,987.0417 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;212.5612 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;204.08&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;129,737.5287 ns&lt;/td&gt; &#xA;   &lt;td&gt;2,300.6178 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;398.91&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;30,836.7527 ns&lt;/td&gt; &#xA;   &lt;td&gt;52.3596 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;103.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;97,310.6367 ns&lt;/td&gt; &#xA;   &lt;td&gt;444.7469 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;203.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMax&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;30,755.6959 ns&lt;/td&gt; &#xA;   &lt;td&gt;189.2460 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;103.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;65,190.8396 ns&lt;/td&gt; &#xA;   &lt;td&gt;810.8605 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;203.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMap&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;250,263.5686 ns&lt;/td&gt; &#xA;   &lt;td&gt;23,822.3931 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;351.03&lt;/td&gt; &#xA;   &lt;td&gt;384,182.34&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Map&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;239,693.9435 ns&lt;/td&gt; &#xA;   &lt;td&gt;20,283.1824 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;350.24&lt;/td&gt; &#xA;   &lt;td&gt;383,399.62&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDContains&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;952,116.9191 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;22,885.3666 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.17&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;29,960.47&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;1,469,353.0761 ns&lt;/td&gt; &#xA;   &lt;td&gt;44,872.5327 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.15&lt;/td&gt; &#xA;   &lt;td&gt;28,150.78&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;493,523.5731 ns&lt;/td&gt; &#xA;   &lt;td&gt;6,629.8292 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.12&lt;/td&gt; &#xA;   &lt;td&gt;15,020.79&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;1,059,862.2497 ns&lt;/td&gt; &#xA;   &lt;td&gt;21,029.2608 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.17&lt;/td&gt; &#xA;   &lt;td&gt;29,921.97&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMax&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;486,232.3883 ns&lt;/td&gt; &#xA;   &lt;td&gt;3,963.6126 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.11&lt;/td&gt; &#xA;   &lt;td&gt;15,080.61&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;771,554.3061 ns&lt;/td&gt; &#xA;   &lt;td&gt;7,083.0659 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.12&lt;/td&gt; &#xA;   &lt;td&gt;15,008.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDMap&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;3,625,255.0307 ns&lt;/td&gt; &#xA;   &lt;td&gt;40,939.9131 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;439.00&lt;/td&gt; &#xA;   &lt;td&gt;3,763,516.65&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Map&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;3,490,854.2334 ns&lt;/td&gt; &#xA;   &lt;td&gt;51,255.2300 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;413.00&lt;/td&gt; &#xA;   &lt;td&gt;3,589,365.95&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;With 32bit Floats vs MathNET.Numerics managed. Map function &lt;code&gt;(fun x -&amp;gt; x*x+x)&lt;/code&gt; &lt;a name=&#34;mathnet&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Length&lt;/th&gt; &#xA;   &lt;th&gt;Median&lt;/th&gt; &#xA;   &lt;th&gt;StdDev&lt;/th&gt; &#xA;   &lt;th&gt;Gen 0&lt;/th&gt; &#xA;   &lt;th&gt;Gen 1&lt;/th&gt; &#xA;   &lt;th&gt;Gen 2&lt;/th&gt; &#xA;   &lt;th&gt;Bytes Allocated/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMapInPlace&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;100&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;46.5269 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;4.9229 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.08&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;22.54&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETMapInPlace&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;354.0866 ns&lt;/td&gt; &#xA;   &lt;td&gt;7.5375 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.36&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;99.59&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;32.0283 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.9529 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETSum&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;88.7532 ns&lt;/td&gt; &#xA;   &lt;td&gt;1.9561 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMapInPlace&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;165.7885 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;9.0778 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.01&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETMapInPlace&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;3,057.9378 ns&lt;/td&gt; &#xA;   &lt;td&gt;56.8845 ns&lt;/td&gt; &#xA;   &lt;td&gt;0.30&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;94.64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;163.1672 ns&lt;/td&gt; &#xA;   &lt;td&gt;6.7001 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETSum&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;962.2084 ns&lt;/td&gt; &#xA;   &lt;td&gt;13.9839 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMapInPlace&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;100000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;21,078.0491 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;627.8978 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;56.61&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETMapInPlace&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;104,831.7547 ns&lt;/td&gt; &#xA;   &lt;td&gt;8,823.8473 ns&lt;/td&gt; &#xA;   &lt;td&gt;5.26&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;2,267.50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;15,134.0240 ns&lt;/td&gt; &#xA;   &lt;td&gt;708.8177 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;46.02&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETSum&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;97,051.7780 ns&lt;/td&gt; &#xA;   &lt;td&gt;875.9276 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;217.82&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMapInPlace&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;220,760.2212 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7,167.1597 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.46&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;7,402.18&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETMapInPlace&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;824,388.9221 ns&lt;/td&gt; &#xA;   &lt;td&gt;47,134.8321 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;1.87&lt;/td&gt; &#xA;   &lt;td&gt;33,210.67&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIMDSum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;159,887.6959 ns&lt;/td&gt; &#xA;   &lt;td&gt;5,030.3486 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;0.18&lt;/td&gt; &#xA;   &lt;td&gt;3,433.93&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETSum&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;967,761.7422 ns&lt;/td&gt; &#xA;   &lt;td&gt;17,557.1206 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;2.00&lt;/td&gt; &#xA;   &lt;td&gt;29,450.93&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;With 32bit Floats vs MathNET.Numerics MKL Native. Adding two arrays &lt;a name=&#34;mathnetnative&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Length&lt;/th&gt; &#xA;   &lt;th&gt;Median&lt;/th&gt; &#xA;   &lt;th&gt;StdDev&lt;/th&gt; &#xA;   &lt;th&gt;Gen 0&lt;/th&gt; &#xA;   &lt;th&gt;Gen 1&lt;/th&gt; &#xA;   &lt;th&gt;Gen 2&lt;/th&gt; &#xA;   &lt;th&gt;Bytes Allocated/Op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMap2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;100&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;92.1515 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3.0304 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2.70&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;212.76&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETAdd&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;156.7522 ns&lt;/td&gt; &#xA;   &lt;td&gt;7.3969 ns&lt;/td&gt; &#xA;   &lt;td&gt;2.92&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;230.42&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMap2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;493.5448 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;8.1340 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;21.40&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2,048.32&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETAdd&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;444.0753 ns&lt;/td&gt; &#xA;   &lt;td&gt;5.9375 ns&lt;/td&gt; &#xA;   &lt;td&gt;20.12&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;1,553.56&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMap2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;100000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;161,024.7782 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;24,704.0627 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2,348.29&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;197,602.33&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETAdd&lt;/td&gt; &#xA;   &lt;td&gt;100000&lt;/td&gt; &#xA;   &lt;td&gt;155,985.3149 ns&lt;/td&gt; &#xA;   &lt;td&gt;1,478.0502 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;1,755.36&lt;/td&gt; &#xA;   &lt;td&gt;155,754.29&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;SIMDMap2&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1000000&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2,024,351.2170 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;242,101.0167 ns&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;3,317.76&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;2,025,584.78&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MathNETAdd&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;   &lt;td&gt;1,551,270.9391 ns&lt;/td&gt; &#xA;   &lt;td&gt;216,545.6630 ns&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;2,466.00&lt;/td&gt; &#xA;   &lt;td&gt;1,693,319.93&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/fsharp</title>
    <updated>2022-05-30T01:38:58Z</updated>
    <id>tag:github.com,2022-05-30:/dotnet/fsharp</id>
    <link href="https://github.com/dotnet/fsharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The F# compiler, F# core library, F# language service, and F# tooling integration for Visual Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The F# compiler, F# core library, and F# editor tools&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;re invited to contribute to future releases of the F# compiler, core library, and tools. Development of this repository can be done on any OS supported by &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;.NET&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will also need the latest .NET 6 SDK installed from &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Quickstart on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Build from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;build.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build depends on an installation of Visual Studio. To build the compiler without this dependency use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;build.cmd -noVisualStudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it&#39;s finished, open either &lt;code&gt;FSharp.sln&lt;/code&gt; or &lt;code&gt;VisualFSharp.sln&lt;/code&gt; in your editor of choice. The latter solution is larger but includes the F# tools for Visual Studio and its associated infrastructure.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart on Linux or macOS&lt;/h3&gt; &#xA;&lt;p&gt;Build from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it&#39;s finished, open &lt;code&gt;FSharp.sln&lt;/code&gt; in your editor of choice.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation for contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/docs/index.md&#34;&gt;Compiler Documentation&lt;/a&gt; is essential reading for any larger contributions to the F# compiler codebase and contains links to learning videos, architecture diagrams and other resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The same docs are also published as the &lt;a href=&#34;https://fsharp.github.io/fsharp-compiler-docs/&#34;&gt;The F# Compiler Guide&lt;/a&gt;. It also contains the public searchable docs for FSharp.Compiler.Service component.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/DEVGUIDE.md&#34;&gt;DEVGUIDE.md&lt;/a&gt; for more details on configurations for building the codebase. In practice, you only really need to run &lt;code&gt;build.cmd&lt;/code&gt;/&lt;code&gt;build.sh&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/TESTGUIDE.md&#34;&gt;TESTGUIDE.md&lt;/a&gt; for information about the various test suites in this codebase and how to run them individually.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation for F# community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/&#34;&gt;The F# Documentation&lt;/a&gt; is the primary documentation for F#. The source for the content is &lt;a href=&#34;https://github.com/dotnet/docs/tree/main/docs/fsharp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/fsharp/fslang-design/&#34;&gt;The F# Language Design Process&lt;/a&gt; is the fundamental design process for the language, from &lt;a href=&#34;https://github.com/fsharp/fslang-suggestions&#34;&gt;suggestions&lt;/a&gt; to completed RFCs. There are also &lt;a href=&#34;https://github.com/fsharp/fslang-design/tree/main/tooling&#34;&gt;tooling RFCs&lt;/a&gt; for some topics where cross-community co-operation and visibility is most useful.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fsharp.org/specs/language-spec/&#34;&gt;The F# Language Specification&lt;/a&gt; is an in-depth description of the F# language. This is essential for understanding some behaviors of the F# compiler and some of the rules within the compiler codebase. For example, the order and way name resolution happens is specified here, which greatly impacts how the code in Name Resolutions works and why certain decisions are made.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No contribution is too small&lt;/h3&gt; &#xA;&lt;p&gt;Even if you find a single-character typo, we&#39;re happy to take the change! Although the codebase can feel daunting for beginners, we and other contributors are happy to help you along.&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;main&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=496&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/fsharp/fsharp-ci?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Per-build NuGet packages&lt;/h2&gt; &#xA;&lt;p&gt;Per-build &lt;a href=&#34;https://dev.azure.com/dnceng/public/_packaging?_a=package&amp;amp;feed=dotnet-tools&amp;amp;view=versions&amp;amp;package=FSharp.Compiler.Service&amp;amp;protocolType=NuGet&#34;&gt;versions&lt;/a&gt; of our NuGet packages are available via this URL: &lt;code&gt;https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;These are the branches in use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;main&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Almost all contributions go here.&lt;/li&gt; &#xA;   &lt;li&gt;Able to be built, installed and used in the latest public Visual Studio release.&lt;/li&gt; &#xA;   &lt;li&gt;May contain updated F# features and logic.&lt;/li&gt; &#xA;   &lt;li&gt;Used to build nightly VSIX (see above).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev15.9&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Long-term servicing branch for VS 2017 update 15.9.x. We do not expect to service that release, but if we do, that&#39;s where the changes will go.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev17.x&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Latest release branch for the particular point release of Visual Studio.&lt;/li&gt; &#xA;   &lt;li&gt;Incorporates features and fixes from main up to a particular branch point, then selective cherry-picks.&lt;/li&gt; &#xA;   &lt;li&gt;May contain new features that depend on new things or fixes in the corresponding forthcoming Visual Studio release.&lt;/li&gt; &#xA;   &lt;li&gt;Gets integrated back into main once the corresponding Visual Studio release is made.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;F# language and core library evolution&lt;/h2&gt; &#xA;&lt;p&gt;Evolution of the F# language and core library follows a process spanning two additional repositories. The process is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/fsharp/fslang-suggestions/&#34;&gt;F# language suggestions repo&lt;/a&gt; to search for ideas, vote on ones you like, submit new ideas, and discuss details with the F# community.&lt;/li&gt; &#xA; &lt;li&gt;Ideas that are &#34;approved in principle&#34; are eligible for a new RFC in the &lt;a href=&#34;https://github.com/fsharp/fslang-design&#34;&gt;F# language design repo&lt;/a&gt;. This is where the technical specification and discussion of approved suggestions go.&lt;/li&gt; &#xA; &lt;li&gt;Implementations and testing of an RFC are submitted to this repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is subject to the MIT License. A copy of this license is in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/License.txt&#34;&gt;License.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct to clarify expected behavior in our community. You can read it at &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get In Touch&lt;/h2&gt; &#xA;&lt;p&gt;Members of the &lt;a href=&#34;https://fsharp.org&#34;&gt;F# Software Foundation&lt;/a&gt; are invited to the &lt;a href=&#34;https://fsharp.org/guides/slack/&#34;&gt;FSSF Slack&lt;/a&gt;. You can find support from other contributors in the &lt;code&gt;#compiler&lt;/code&gt; and &lt;code&gt;#editor-support&lt;/code&gt; channels.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can use the &lt;code&gt;#fsharp&lt;/code&gt; tag on Twitter if you have general F# questions, including about this repository. Chances are you&#39;ll get multiple responses.&lt;/p&gt; &#xA;&lt;h2&gt;About F#&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re curious about F# itself, check out these links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/what-is-fsharp&#34;&gt;What is F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/get-started/&#34;&gt;Get started with F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharp.org&#34;&gt;F# Software Foundation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharp.org/testimonials&#34;&gt;F# Testimonials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/Quantum-NC</title>
    <updated>2022-05-30T01:38:58Z</updated>
    <id>tag:github.com,2022-05-30:/microsoft/Quantum-NC</id>
    <link href="https://github.com/microsoft/Quantum-NC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Quantum Computing Libraries for noncommercial use&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft Quantum Development Kit: Non-Commercial Libraries&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Microsoft Quantum Development Kit!&lt;/p&gt; &#xA;&lt;p&gt;This repository contains shared-source libraries that can be used for research and academics, but that cannot be used for commercial purposes. Please note that these libraries are not intended for production use, and may be modified as research proceeds. For more information please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Quantum-NC/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using the non-commercial research libraries&lt;/h2&gt; &#xA;&lt;p&gt;The non-commercial libraries in this repository can be used via NuGet packages beginning with the prefix &lt;a href=&#34;https://www.nuget.org/packages?q=owner:QuantumEngineering%20id:research&#34;&gt;&#34;Microsoft.Quantum.Research.&#34;&lt;/a&gt; For more details, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/Quantum-NC/wiki/Research-packages&#34;&gt;Research packages&lt;/a&gt; on the &lt;a href=&#34;https://github.com/microsoft/Quantum-NC/wiki/&#34;&gt;Quantum-NC wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you have feedback about the libraries in this repository, please let us know by filing a &lt;a href=&#34;https://github.com/microsoft/Quantum-NC/issues/new&#34;&gt;new issue&lt;/a&gt;! If you have feedback about some other part of the Microsoft Quantum Development Kit, please see the &lt;a href=&#34;https://docs.microsoft.com/azure/quantum/contributing-overview&#34;&gt;contribution guide&lt;/a&gt; for more information on the best places to file it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please note: &lt;strong&gt;this project does not accept external contributions&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to the rest of the Quantum Development Kit, please see the &lt;a href=&#34;https://docs.microsoft.com/azure/quantum/contributing-overview&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>