<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-06T01:31:10Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ChrSteinert/ArrayPrinter</title>
    <updated>2023-12-06T01:31:10Z</updated>
    <id>tag:github.com,2023-12-06:/ChrSteinert/ArrayPrinter</id>
    <link href="https://github.com/ChrSteinert/ArrayPrinter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;F# library to make human readable byte array formats.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Array Printer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/ArrayPrinter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/ArrayPrinter.svg?style=flat&#34; alt=&#34;NuGet Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A F# library to format byte arrays in a human readable fashion.&lt;/p&gt; &#xA;&lt;p&gt;F# does not provide an easy method of visualizing byte arrays (that I am aware of). For instance the output via &lt;code&gt;printfn &#34;%A&#34;&lt;/code&gt; of an array like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;&#34;eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ&#34; |&amp;gt; System.Convert.FromBase64String&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;[|123uy; 34uy; 115uy; 117uy; 98uy; 34uy; 58uy; 34uy; 49uy; 50uy; 51uy; 52uy;&#xA;  53uy; 54uy; 55uy; 56uy; 57uy; 48uy; 34uy; 44uy; 34uy; 110uy; 97uy; 109uy;&#xA;  101uy; 34uy; 58uy; 34uy; 74uy; 111uy; 104uy; 110uy; 32uy; 68uy; 111uy; 101uy;&#xA;  34uy; 44uy; 34uy; 105uy; 97uy; 116uy; 34uy; 58uy; 49uy; 53uy; 49uy; 54uy; 50uy;&#xA;  51uy; 57uy; 48uy; 50uy; 50uy; 125uy|]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Array Printer Library provides a method for pretty printing such arrays.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;ArrayPrinter.printArray PrinterOptions.defaults myArray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;returns the string&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0000  7B 22 73 75 62 22 3A 22 31 32 33 34 35 36 37 38  {&#34;sub&#34;:&#34;12345678&#xA;0010  39 30 22 2C 22 6E 61 6D 65 22 3A 22 4A 6F 68 6E  90&#34;,&#34;name&#34;:&#34;John&#xA;0020  20 44 6F 65 22 2C 22 69 61 74 22 3A 31 35 31 36  .Doe&#34;,&#34;iat&#34;:1516&#xA;0030  32 33 39 30 32 32 7D                             239022}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;nuget&gt; &#xA; &lt;p&gt;The output can be controlled via the &lt;code&gt;ArrayPrinter.PrinterOptions&lt;/code&gt;. Defaults for Hex, Decimal, Octal and Binary display are provided via &lt;code&gt;PrinterOptions.*Defaults&lt;/code&gt;. &lt;code&gt;PrinterOptions.defaults&lt;/code&gt; uses Hex.&lt;/p&gt; &#xA; &lt;p&gt;Row headers, the array content and a data interpretation of that content are the three parts of the output. The row headers and the data interpretation can be disabled:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;// Disable the data part.&#xA;ArrayPrinter.printArray ({ PrinterOptions.defaults with WithData = false }) myArray&#xA;&#xA;// Disable the header part.&#xA;ArrayPrinter.printArray ({ PrinterOptions.defaults with WithHeader = false }) myArray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Additionally, the width of a row can be adjusted:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-fs&#34;&gt;// Use looong rows&#xA;ArrayPrinter.printArray ({ PrinterOptions.defaults with RowWidth = 32 }) myArray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The defaults are 16 for hex, 10 for decimal, 8 for ocal and 4 for binary (because it is so large…).&lt;/p&gt; &#xA; &lt;h1&gt;What can be built with it&lt;/h1&gt; &#xA; &lt;p&gt;This repository contains the ArrayPrinter.Console. A simple console application that reads from stdin, and feeds that into the &lt;code&gt;ArrayPrinter&lt;/code&gt;. Bind the binary to (for instance) &lt;code&gt;ap&lt;/code&gt; and you could do something like this:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;~/A/s/ArrayPrinter (main)&amp;gt; cat Program.fs | ap&#xA;0000  EF BB BF 0D 0A 6F 70 65 6E 20 53 79 73 74 65 6D  ï»¿..open.System&#xA;0010  0D 0A 6F 70 65 6E 20 53 79 73 74 65 6D 2E 49 4F  ..open.System.IO&#xA;0020  0D 0A 0D 0A 6F 70 65 6E 20 41 72 72 61 79 50 72  ....open.ArrayPr&#xA;0030  69 6E 74 65 72 0D 0A 0D 0A 5B 3C 45 6E 74 72 79  inter....[.Entry&#xA;0040  50 6F 69 6E 74 3E 5D 0D 0A 6C 65 74 20 6D 61 69  Point.]..let.mai&#xA;0050  6E 20 5F 20 3D 0D 0A 20 20 20 20 75 73 65 20 69  n._........use.i&#xA;0060  6E 27 20 3D 20 43 6F 6E 73 6F 6C 65 2E 4F 70 65  n&#39;...Console.Ope&#xA;0070  6E 53 74 61 6E 64 61 72 64 49 6E 70 75 74 28 29  nStandardInput()&#xA;0080  0D 0A 20 20 20 20 75 73 65 20 6D 65 6D 20 3D 20  ......use.mem...&#xA;0090  6E 65 77 20 4D 65 6D 6F 72 79 53 74 72 65 61 6D  new.MemoryStream&#xA;00A0  28 29 0D 0A 20 20 20 20 69 6E 27 2E 43 6F 70 79  ()......in&#39;.Copy&#xA;00B0  54 6F 20 6D 65 6D 0D 0A 20 20 20 20 6D 65 6D 2E  To.mem......mem.&#xA;00C0  54 6F 41 72 72 61 79 20 28 29 0D 0A 20 20 20 20  ToArray.()......&#xA;00D0  7C 3E 20 41 72 72 61 79 50 72 69 6E 74 65 72 2E  ...ArrayPrinter.&#xA;00E0  70 72 69 6E 74 41 72 72 61 79 20 50 72 69 6E 74  printArray.Print&#xA;00F0  65 72 4F 70 74 69 6F 6E 73 2E 64 65 66 61 75 6C  erOptions.defaul&#xA;0100  74 73 0D 0A 20 20 20 20 7C 3E 20 70 72 69 6E 74  ts.........print&#xA;0110  66 6E 20 22 25 73 22 0D 0A 20 20 20 20 30 0D 0A  fn.&#34;%s&#34;......0..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/nuget&gt;</summary>
  </entry>
</feed>