<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-02T01:28:32Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ocsigen/ts2ocaml</title>
    <updated>2024-02-02T01:28:32Z</updated>
    <id>tag:github.com,2024-02-02:/ocsigen/ts2ocaml</id>
    <link href="https://github.com/ocsigen/ts2ocaml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate OCaml bindings from TypeScript definitions via the TypeScript compiler API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ts2ocaml&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@ocsigen/ts2ocaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@ocsigen/ts2ocaml/latest.svg?sanitize=true&#34; alt=&#34;npm latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@ocsigen/ts2ocaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@ocsigen/ts2ocaml/beta.svg?sanitize=true&#34; alt=&#34;npm latest version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generate OCaml bindings from TypeScript definitions via the TypeScript compiler API.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Try out v2 beta!&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;npm install -g @ocsigen/ts2ocaml@beta&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g @ocsigen/ts2ocaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using yarn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn global add @ocsigen/ts2ocaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An in-browser version may be available in future.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provide a way to quickly generate a missing binding to some JS package you need in your project. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This tool can generate OCaml bindings to JS packages from TS definition files (&lt;code&gt;.d.ts&lt;/code&gt;), which you can use with minimal modification.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Help library authors by reducing the amount of boilerplate code they have to write by hand. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This tool can be configured to generate an imperfect but simpler version of bindings, which you can easily modify to create a better binding library.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Non-goals:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate a binding written in 100% OCaml-idiomatic way. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;OCaml has very different programming concepts from TypeScript, so it&#39;s not very straightforward to translate TypeScript&#39;s concepts to OCaml&#39;s one.&lt;/li&gt; &#xA;   &lt;li&gt;This tool will simply generate bindings which closely resembles the original TypeScript definitions. It&#39;s human&#39;s job to translate it to OCaml-idiomatic API.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Perfectly replicate TypeScript&#39;s type system in OCaml. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Many of &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/types-from-types.html&#34;&gt;the advanced types in TypeScript&lt;/a&gt;, such as &lt;code&gt;keyof T&lt;/code&gt; or &lt;code&gt;T extends U ? A : B&lt;/code&gt;, are simply impossible to simulate in OCaml.&lt;/li&gt; &#xA;   &lt;li&gt;In those cases, this tool will leave them as untyped. It&#39;s also human&#39;s job to (possibly) restore type safety with some other means.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocsigen/ts2ocaml/main/docs/common_options.md&#34;&gt;Common options&lt;/a&gt; among all the targets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocsigen/ts2ocaml/main/docs/js_of_ocaml.md&#34;&gt;ts2ocaml for js_of_ocaml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ts2ocaml for ReScript &lt;a href=&#34;https://github.com/ocsigen/ts2ocaml/pull/32&#34;&gt;(ongoing)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For developers and contributors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocsigen/ts2ocaml/main/docs/development.md&#34;&gt;Overview for developers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ocsigen/ts2ocaml/main/docs/modeling_subtyping.md&#34;&gt;Note on modeling TS subtyping in OCaml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About this tool&lt;/h2&gt; &#xA;&lt;p&gt;This tool is heavily inspired by &lt;a href=&#34;https://github.com/fable-compiler/ts2fable&#34;&gt;fable-compiler/ts2fable&lt;/a&gt;, which generates &lt;a href=&#34;https://fable.io/&#34;&gt;Fable&lt;/a&gt; (F# AltJS) bindings from TS definition files.&lt;/p&gt; &#xA;&lt;p&gt;This tools is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/ocsigen/ts2ocaml/main/LICENSE.md&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>