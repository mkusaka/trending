<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-22T01:35:21Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kerams/EpubFs</title>
    <updated>2022-08-22T01:35:21Z</updated>
    <id>tag:github.com,2022-08-22:/kerams/EpubFs</id>
    <link href="https://github.com/kerams/EpubFs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EPUB authoring library for F#.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EpubFs&lt;/h1&gt; &#xA;&lt;p&gt;EPUB authoring library for F#.&lt;/p&gt; &#xA;&lt;h2&gt;Nuget package&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/EpubFs&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/EpubFs.svg?colorB=green&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;This library has been extracted from a personal project of mine and represents the bare minimum necessary to create EPUB files for my purposes. As such, I do not intend to continue developing any new major features.&lt;/p&gt; &#xA;&lt;p&gt;However, if you or your company have a need for a particular feature or require that some other part of the EPUB spec be implemented, and you are willing to pay for the development, I would be more than happy to work with you!&lt;/p&gt; &#xA;&lt;p&gt;Bug reports and PRs will naturally still be looked at.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In order to create an EPUB, you need to supply some metadata and a file manifest including the title page, list of files with the actual book content as well as any CSS files you want to use.&lt;/p&gt; &#xA;&lt;h3&gt;Content files&lt;/h3&gt; &#xA;&lt;p&gt;Content files are accepted in the form of &lt;code&gt;XmlNode list&lt;/code&gt;, which you can construct using the &lt;a href=&#34;https://github.com/giraffe-fsharp/Giraffe.ViewEngine&#34;&gt;&lt;code&gt;Giraffe.ViewEngine&lt;/code&gt; DSL&lt;/a&gt;, or as a &lt;code&gt;Stream&lt;/code&gt; containing an XHTML that you have obtained in some other way.&lt;/p&gt; &#xA;&lt;h3&gt;CSS files&lt;/h3&gt; &#xA;&lt;p&gt;You can also include stylesheets to be used in the book. If a content file is provided as &lt;code&gt;XmlNode list&lt;/code&gt;, every CSS file will automatically be referenced therein. On the other hand, if you&#39;re supplying a full XHTML file, you need to import the stylesheet (in the traditional HTML fashion) yourself by using the &lt;code&gt;FileName&lt;/code&gt; of a matching CSS file.&lt;/p&gt; &#xA;&lt;h3&gt;Table of contents (navigation document)&lt;/h3&gt; &#xA;&lt;p&gt;Every EPUB requires a navigation document. There are two choices here - either you supply an XHTML (it has to conform to the navigation spec!) directly, or you let the library generate a simple table of contents page with hyperlinks to each of your content files (whose &lt;code&gt;Navigation&lt;/code&gt; is not set to &lt;code&gt;None&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open EpubFs&#xA;open EpubFs.Write&#xA;open Giraffe.ViewEngine&#xA;open System.IO&#xA;open System.Text&#xA;&#xA;let metadata = {&#xA;    // A unique book identifier, could be ISBN or URL...&#xA;    Id = &#34;my-book&#34;&#xA;    Title = &#34;Ὀδύσσεια&#34;&#xA;    // List of language tags - you should use ISO 639-2&#xA;    // If you specify more than one, the first is considered the primary language of the book&#xA;    Languages = [ &#34;grc&#34; ]&#xA;    // `None` defaults to DateTimeOffset.UtcNow&#xA;    ModifiedAt = None&#xA;    Source = Some &#34;https://el.wikisource.org/wiki/%CE%9F%CE%B4%CF%8D%CF%83%CF%83%CE%B5%CE%B9%CE%B1&#34;&#xA;    Creators = [ &#34;John Doe&#34;; &#34;Ὅμηρος&#34; ]&#xA;}&#xA;&#xA;// The CSS Stream you would like to use throughout the book&#xA;let css = new MemoryStream (Encoding.UTF8.GetBytes &#34;.red-font { color: red }&#34;)&#xA;&#xA;// Let&#39;s declare the title page document using `Giraffe.ViewEngine`&#xA;// Use the `red-font` class from our stylesheet&#xA;let titlePage = {&#xA;    FileName = &#34;title.xhtml&#34;&#xA;    Title = &#34;Title&#34;&#xA;    Input = Structured [&#xA;        h1 [ _class &#34;red-font&#34; ] [&#xA;            str &#34;Ὀδύσσεια&#34;&#xA;        ]&#xA;    ]&#xA;    Navigation = None&#xA;}&#xA;&#xA;// We already have a pre-built XHTML of the first content document, so pass it as a stream&#xA;// Notice the manual reference to our stylesheet&#xA;use chapter1Stream =&#xA;    &#34;&#34;&#34;&amp;lt;!DOCTYPE html PUBLIC &#34;-//W3C//DTD XHTML 1.1//EN&#34; &#34;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&#34;&amp;gt;&amp;lt;html xmlns=&#34;http://www.w3.org/1999/xhtml&#34;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;link href=&#34;main.css&#34; type=&#34;text/css&#34; rel=&#34;stylesheet&#34;/&amp;gt;&amp;lt;title&amp;gt;Page one&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div class=&#34;red-font&#34;&amp;gt;Ἄνδρα μοι ἔννεπε, Μοῦσα, πολύτροπον, ὃς μάλα πολλὰ&amp;lt;/div&amp;gt;&amp;lt;div&amp;gt;πλάγχθη, ἐπεὶ Τροίης ἱερὸν πτολίεθρον ἔπερσε·&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;&#34;&#34;&#xA;    |&amp;gt; Encoding.UTF8.GetBytes&#xA;    |&amp;gt; MemoryStream&#xA;&#xA;let chapter1 = {&#xA;    FileName = &#34;chapter1.xhtml&#34;&#xA;    Title = &#34;Chapter 1&#34;&#xA;    Input = ContentInput.Raw (RawInput.Stream page1Stream)&#xA;    // Setting navigation to `Some` so that this document appears in the table of contents&#xA;    Navigation = Some Linear&#xA;}&#xA;&#xA;let manifest = {&#xA;    // Usually used by e-book readers as the book thumbnail&#xA;    CoverImage = None&#xA;    // Table of contents will be generated for us&#xA;    NavXhtml = Autogenerated&#xA;    TitlePage = titlePage&#xA;    ContentFiles = [ chapter1 ]&#xA;    CssFiles = [&#xA;        // The file will be stored in the archive under this name&#xA;        // It&#39;s also what you use to reference the stylesheet in XHTML&#xA;        { FileName = &#34;main.css&#34;; Input = RawInput.Stream css }&#xA;    ]&#xA;}&#xA;&#xA;use fs = File.OpenWrite &#34;odyssey.epub&#34;&#xA;write fs metadata manifest&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>