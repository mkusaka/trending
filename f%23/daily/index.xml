<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-20T01:31:25Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vzarytovskii/FSharp.Core.Extended</title>
    <updated>2025-05-20T01:31:25Z</updated>
    <id>tag:github.com,2025-05-20:/vzarytovskii/FSharp.Core.Extended</id>
    <link href="https://github.com/vzarytovskii/FSharp.Core.Extended" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A drop-in replacement for F# core library with generally faster defaults&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/FSharp.Core.Extended/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/FSharp.Core.Extended.svg?style=flat-square&#34; alt=&#34;NuGet version (FSharp.Core.Extended)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This library is very much work in progress, expect issues.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library tries to be a drop-in replacement for the &lt;code&gt;FSharp.Core&lt;/code&gt; with functions, which are generally faster and more flexible than built-in ones, but may be backwards-incompatible at runtime/compile-time.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of current (and future planned) backwards-incompatibilities:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some collections functions (&lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, etc) can handle things like &lt;code&gt;NaN&lt;/code&gt; differently than &lt;code&gt;FSharp.Core&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;All &lt;code&gt;try*&lt;/code&gt; functions return &lt;code&gt;ValueOption&amp;lt;&#39;T&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Option&amp;lt;&#39;T&amp;gt;&lt;/code&gt; is aliasing &lt;code&gt;ValueOption&amp;lt;&#39;T&amp;gt;&lt;/code&gt;, all &lt;code&gt;Option&lt;/code&gt; module functions shadowing the ones from &lt;code&gt;FSharp.Core&lt;/code&gt;, several helper functions/methods provided to convert back and from the &lt;code&gt;FSharp.Core.Option&amp;lt;&#39;T&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;...&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use:&lt;/h2&gt; &#xA;&lt;p&gt;This library being a &lt;code&gt;drop-in&lt;/code&gt; replacement doesn&#39;t mean that just referencing its NuGet package is enough. Shadowing is achieved by opening this library&#39;s namespace (works on any granularity), for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Core.Extended&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will shadow every module and type defined in this library (e.g. &lt;code&gt;Option&lt;/code&gt; type, &lt;code&gt;Option&lt;/code&gt; module, &lt;code&gt;Array&lt;/code&gt; module, &lt;code&gt;List&lt;/code&gt; module, etc)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Core.Extended.Collections&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will shadow every module and type defined for collections&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FSharp.Core.Extended.Collections.Array&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will shadow every type and module defined for arrays&lt;/p&gt; &#xA;&lt;p&gt;And so on.&lt;/p&gt;</summary>
  </entry>
</feed>