<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:34:28Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kerams/Fable.SqlJs</title>
    <updated>2022-09-20T01:34:28Z</updated>
    <id>tag:github.com,2022-09-20:/kerams/Fable.SqlJs</id>
    <link href="https://github.com/kerams/Fable.SqlJs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fable bindings for sql.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fable.SqlJs&lt;/h1&gt; &#xA;&lt;p&gt;Fable bindings for the SQLite library in JS &lt;a href=&#34;https://github.com/sql-js/sql.js&#34;&gt;sql.js&lt;/a&gt; (&lt;a href=&#34;https://www.npmjs.com/package/sql.js&#34;&gt;NPM package&lt;/a&gt;) version ^1.8.0. Web worker bits are not covered.&lt;/p&gt; &#xA;&lt;h2&gt;Nuget package&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Fable.SqlJs&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Fable.SqlJs.svg?colorB=green&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation with &lt;a href=&#34;https://github.com/Zaid-Ajaj/Femto&#34;&gt;Femto&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;femto install Fable.SqlJs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Standard installation&lt;/h2&gt; &#xA;&lt;p&gt;Nuget package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;paket add Fable.SqlJs -p YourProject.fsproj&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NPM package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install sql.js@1.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The sql.js library consists of a JS part and a WebAssembly part. Both need to be distributed with your application. If you&#39;re using Webpack 5, calling &lt;code&gt;initSqlJsWebpack5&lt;/code&gt; should do most of the work. Otherwise you will use &lt;code&gt;initSqlJs&lt;/code&gt; and point the library to the &lt;code&gt;sql-wasm.wasm&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open Fable.SqlJs&#xA;open Fable.Core.JsInterop&#xA;open Fable.Core&#xA;&#xA;// Type annotation for `x` is required, otherwise we would get wrong type matches.&#xA;let valueToString (x: SqlValue option) =&#xA;    match x with&#xA;    | None -&amp;gt; &#34;null&#34; // null values&#xA;    | Some (U3.Case1 x) -&amp;gt; x.ToString () // numbers&#xA;    | Some (U3.Case3 x) -&amp;gt; $&#34;[{x}]&#34; // binary data&#xA;    | Some (U3.Case2 x) -&amp;gt; x // strings&#xA;&#xA;// Load the WASM file locally in Webpack 5. It will be automatically copied by Webpack as an asset.&#xA;// You might also have to add the following to module.exports in the Webpack config file:&#xA;//&#xA;//    resolve: {&#xA;//        fallback: {&#xA;//            &#34;crypto&#34;: false,&#xA;//            &#34;fs&#34;: false,&#xA;//            &#34;path&#34;: false&#xA;//       }&#xA;//    },&#xA;let sqlJs = initSqlJsWebpack5 ()&#xA;&#xA;// Load the WASM file from /sql-wasm.wasm. You will need to make sure to deploy this file to the web server.&#xA;//let db = initSqlJs (jsOptions&amp;lt;SqlJsConfig&amp;gt;(fun x -&amp;gt; x.locateFile &amp;lt;- fun f -&amp;gt; f))&#xA;// or&#xA;//let db = initSqlJs JS.undefined&#xA;&#xA;// Load the WASM file from a CDN. Make sure to reference the matching version.&#xA;//let db = initSqlJs (jsOptions&amp;lt;SqlJsConfig&amp;gt;(fun x -&amp;gt; x.locateFile &amp;lt;- fun f -&amp;gt; $&#34;https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.8.0/{f}&#34;))&#xA;&#xA;// Do stuff once the initialization promise resolves. In an Elmish application you will typically want to pass `sqlJs` to `Cmd.OfPromise.either`.&#xA;sqlJs.``then``(fun x -&amp;gt;&#xA;    // Create an empty database. To open an existing one, pass in the byte array as the parameter instead.&#xA;    let db = x.CreateDatabase ()&#xA;&#xA;    // Execute a command, discarding any return values.&#xA;    db.run &#34;CREATE TABLE thing(id integer, name text, picture binary)&#34;&#xA;&#xA;    // Execute a command, discarding any return values.&#xA;    // Parameters are passed in in an array and are applied positionally.&#xA;    // !^ applies erased casts to make parameter passing a bit easier since the JS API is very dynamic.&#xA;    db.run (&#34;INSERT INTO thing VALUES (1, $name1, null), ($id2, &#39;car&#39;, null), (3, $name3, $picture3)&#34;, !^[| !^&#34;ball&#34;; !^2.; !!null; !^[| 222uy; 223uy |] |])&#xA;    &#xA;    // Execute 2 commands, which will gives us an array with 2 elements with the rows returned by each command.&#xA;    // This time we have decided to pass the parameters in as a JS object, which we are constructing using an anonymous record.&#xA;    // Now the parameters are matched by name, not positionally.&#xA;    let resultSets = db.exec (&#34;SELECT sqlite_version(); SELECT id, picture, name FROM thing WHERE id &amp;gt; $id&#34;, !^{| ``$id`` = 1 |})&#xA;&#xA;    // Print the DB version using the first column in the first row of the first result set.&#xA;    printfn $&#34;SQLite version: {resultSets.[0].values.[0].[0]}&#34;&#xA;&#xA;    // Iterate over the second result set, printing the values in each row.&#xA;    // The order of values in the `columns` and `values` matches, and is the same as the order in the SELECT clause.&#xA;    for columnValuesInRow in resultSets.[1].values do&#xA;        for i, column in Array.indexed resultSets.[1].columns do&#xA;            printfn $&#34;{column}: {valueToString columnValuesInRow.[i]}&#34;&#xA;&#xA;        printfn &#34;&#34;&#xA;&#xA;    // Export (back up) the database as a byte array to store it somewhere.&#xA;    let dbData = db.export ()&#xA;&#xA;    // Close the database when done to free the resources.&#xA;    db.close ()&#xA;) |&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following should be printed in the console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5063478/189690952-e5ce4f67-c8aa-40d9-88ff-a7e3fce355e0.png&#34; alt=&#34;vivaldi_jJ4eBFBBPo&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>