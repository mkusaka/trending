<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-06T01:31:55Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sheganinans/Smoosh</title>
    <updated>2023-01-06T01:31:55Z</updated>
    <id>tag:github.com,2023-01-06:/sheganinans/Smoosh</id>
    <link href="https://github.com/sheganinans/Smoosh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Blazing Fast, Bit-Oriented Serializer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smoosh: Every last bit out of your messaging protocol!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Smoosh/&#34;&gt;&lt;code&gt;Smoosh&lt;/code&gt; Nuget&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/Smoosh.Latency/&#34;&gt;&lt;code&gt;Smoosh.Latency&lt;/code&gt; Nuget&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bit oriented&lt;/h2&gt; &#xA;&lt;p&gt;If your type fits in a bit, it&#39;s encoded as a bit. Some types are even encoded as &lt;em&gt;zero&lt;/em&gt; bits!&lt;/p&gt; &#xA;&lt;h2&gt;Blazing Fast&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sheganinans/Smoosh/main/BENCHMARKS.md&#34;&gt;Read the Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Powered with &lt;a href=&#34;https://github.com/eiriktsarpalis/TypeShape&#34;&gt;TypeShape&lt;/a&gt; and Bit Arithmeticâ„¢&lt;/li&gt; &#xA; &lt;li&gt;Focus on IP fragmentation reduction, for more information see: &lt;a href=&#34;https://raw.githubusercontent.com/sheganinans/Smoosh/main/IMPLEMENTATION_NOTES.md&#34;&gt;IMPLEMENTATION_NOTES.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open Smoosh.Latency.Decoder&#xA;open Smoosh.Latency.Encoder&#xA;&#xA;type Tree =&#xA;  | Leaf&#xA;  | Node of byte * Tree * Tree&#xA;&#xA;let rec mkTree d =&#xA;  if d = 0&#xA;  then Leaf&#xA;  else Node (0xF0uy, mkTree (d-1), mkTree (d-1))&#xA;&#xA;let tree = mkTree 10&#xA;&#xA;let treeEnc = mkEncoder&amp;lt;Tree&amp;gt; () &#xA;let treeDec = mkDecoder&amp;lt;Tree&amp;gt; ()&#xA;&#xA;let eTree = tree |&amp;gt; treeEnc&#xA;&#xA;eTree |&amp;gt; BitConverter.ToString |&amp;gt; printfn &#34;%s&#34;&#xA;eTree |&amp;gt; treeDec |&amp;gt; fun dTree -&amp;gt; printfn $&#34;%i{eTree.Length}: %b{dTree = tree}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should expect to see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;F8-7C-3E-1F-0F-87-C3-E1-...-F8-7C-3E-07-C0-F8-7C-0F-80&#xA;1279: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sheganinans/Smoosh/main/SAMPLES.md&#34;&gt;Read more samples here!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Read the Specs!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sheganinans/Smoosh/main/SPEC.md&#34;&gt;General Encoder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sheganinans/Smoosh/main/SPEC.LATENCY.md&#34;&gt;Latency Sensitive Encoder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sheganinans/Smoosh/main/TODO.md&#34;&gt;TODO.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;This project was inspired by: &lt;a href=&#34;https://hackage.haskell.org/package/flat&#34;&gt;Flat&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>