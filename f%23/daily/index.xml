<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-25T01:39:42Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AngelMunoz/Bix</title>
    <updated>2022-07-25T01:39:42Z</updated>
    <id>tag:github.com,2022-07-25:/AngelMunoz/Bix</id>
    <link href="https://github.com/AngelMunoz/Bix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bix, an F# micro-framework for cross-runtime JavaScript backends&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bix&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;the &#34;&lt;strong&gt;&lt;em&gt;Bix&lt;/em&gt;&lt;/strong&gt;&#34; name is just a &lt;em&gt;codename&lt;/em&gt; for now (until I decide it&#39;s good to go).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;An F# microframework that provides a router and http handler abstractions for web frameworks that work with a &lt;code&gt;Request -&amp;gt; Response&lt;/code&gt; http server model.&lt;/p&gt; &#xA;&lt;p&gt;Examples of runtimes that work with this model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.sh&#34;&gt;Bun.sh&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/AngelMunoz/fable-bun&#34;&gt;Fable.Bun&lt;/a&gt; + Bix.Bun&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deno.land&#34;&gt;Deno&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://github.com/AngelMunoz/fable-deno&#34;&gt;Fable.Deno&lt;/a&gt; + Bix.Deno&lt;/li&gt; &#xA; &lt;li&gt;Service Workers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Browser Service Worker&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://developers.cloudflare.com/workers/&#34;&gt;Cloudflare Workers&lt;/a&gt; -&amp;gt; Bix.Cloudflare&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This microframework is heavily inspired by &lt;a href=&#34;https://giraffe.wiki&#34;&gt;Giraffe&lt;/a&gt;, and &lt;a href=&#34;https://github.com/SaturnFramework/Saturn&#34;&gt;Saturn&lt;/a&gt; frameworks from F# land so if you have ever used that server model then Bix will feel fairly similar.&lt;/p&gt; &#xA;&lt;p&gt;An hypotetical example could be like the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// define a function that takes HttpHandlers to satisfy existing handler constrains&#xA;let authenticateOrRedirect (authenticatedRoute: HttpHandler, notAuthenticatedRoute: HttpHandler) =&#xA;    Handlers.authenticateUser&#xA;        authenticatedRoute&#xA;        notAuthenticatedRoute&#xA;&#xA;// compose different handlers for code reusability&#xA;// and granular control of handler execution&#xA;let checkAdminCredentials successRoute =&#xA;    authenticateOrRedirect (successRoute, Admin.Login)&#xA;    &amp;gt;=&amp;gt; Handlers.requiresAdmin&#xA;&#xA;let checkUserCredentials successRoute =&#xA;    authenticateOrRedirect (successRoute, Views.Login)&#xA;    &amp;gt;=&amp;gt; Handlers.requiresUserOrAbove&#xA;&#xA;// define routes for this application&#xA;let routes =&#xA;    Router.Empty&#xA;    |&amp;gt; Router.get(&#34;/&#34;, authenticateOrRedirect &amp;gt;=&amp;gt; Views.Landing)&#xA;    |&amp;gt; Router.get (&#34;/login&#34;, authenticateOrRedirect &amp;gt;=&amp;gt; Views.Login)&#xA;    |&amp;gt; Router.get (&#34;/me&#34;, checkUserCredentials(Views.Login))&#xA;    |&amp;gt; Router.get (&#34;/portal&#34;, checkUserCredentials(Views.Portal))&#xA;    |&amp;gt; Router.get (&#34;/admin&#34;, checkAdminCredentials(Admin.Portal))&#xA;    |&amp;gt; Router.post (&#34;/users&#34;, checkAdminCredentials(Api.Users.Create &amp;gt;=&amp;gt; negotiateContent))&#xA;    |&amp;gt; Router.patch (&#34;/users/:id&#34;, checkAdminCredentials(Api.Users.Update &amp;gt;=&amp;gt; negotiateContent))&#xA;&#xA;// Start the web server&#xA;Server.Empty&#xA;|&amp;gt; Server.withPort 5000&#xA;|&amp;gt; Server.withDevelopment true&#xA;|&amp;gt; Server.withRouter routes&#xA;|&amp;gt; Server.run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The idea is to create simple and single purposed functions that work like middleware so you can organize and re-use&lt;/p&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;p&gt;Bix currently has two adapters&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bix.Deno&lt;/li&gt; &#xA; &lt;li&gt;Bix.Bun&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Adapters under investigation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bix.ServiceWorker&lt;/li&gt; &#xA; &lt;li&gt;Bix.CloudflareWorker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;This project is developed with VSCode in Linux/Windows/WSL but either rider, and visual studio should work just fine.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET6 and above - &lt;a href=&#34;https://get.dot.net&#34;&gt;https://get.dot.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bun - &lt;a href=&#34;https://bun.sh&#34;&gt;bun.sh&lt;/a&gt; - (in case of running bun)&lt;/li&gt; &#xA; &lt;li&gt;Deno - &lt;a href=&#34;https://deno.land&#34;&gt;deno&lt;/a&gt; - (in case of running deno)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Try the samples&lt;/h2&gt; &#xA;&lt;p&gt;Depending on what you want to try change the directory to your selected sample, example: &lt;code&gt;cd samples/Bix.Bun.Sample&lt;/code&gt; and run one of the following commands&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;dotnet tool restore&lt;/code&gt; (run once per clone)&lt;/li&gt; &#xA; &lt;li&gt;start the project &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;bun start&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;deno task start&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;both commands will restore the projects and run fable, bun/deno in watch mode.&lt;/p&gt;</summary>
  </entry>
</feed>