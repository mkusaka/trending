<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-01T01:25:35Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrLSD/riscv-fs</title>
    <updated>2023-08-01T01:25:35Z</updated>
    <id>tag:github.com,2023-08-01:/mrLSD/riscv-fs</id>
    <link href="https://github.com/mrLSD/riscv-fs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;F# RISC-V Instruction Set formal specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RISC-V formal ISA Specification&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/mrLSD/riscv-fs&#34;&gt;&lt;img src=&#34;https://travis-ci.org/mrLSD/riscv-fs.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Copyright Â© Evgeny Ukhanov&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a formal (and executable) specification for the RISC-V ISA (Instruction Set Architecture), written in &lt;strong&gt;F# purely functional style&lt;/strong&gt;. We deliberately choose an &#34;&lt;em&gt;extremely elementary&lt;/em&gt;&#34; implementation of F# to make it readable and usable by wide audience who do not know F# and who do not plan to learn F#.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/2474/1*88Zj-QJq48IZTiCGUo5mSQ.png&#34; alt=&#34;F# RISC-V ISA Formal Specification&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a work-in-progress, one of several similar concurrent efforts within the &lt;strong&gt;ISA Formal Specification&lt;/strong&gt; Technical Group constituted by The RISC-V Foundation (&lt;a href=&#34;https://riscv.org&#34;&gt;https://riscv.org&lt;/a&gt;). We welcome your feedback, comments and suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#features--current-status&#34;&gt;Features &amp;amp; Current status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#reading-the-code&#34;&gt;Reading the code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#how-to-build-and-run-it-on-risc-v-binaries&#34;&gt;How to build and run it on RISC-V binaries&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#install-.net-sdk&#34;&gt;Install .NET SDK&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#make-the-application-executable&#34;&gt;Make the application executable&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#run-the-application-executable&#34;&gt;Run the application executable&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#how-to-contribute&#34;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/#licence&#34;&gt;Licence&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features &amp;amp; Current status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the following features (or &lt;em&gt;in active development state&lt;/em&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Base instruction set: RV32I&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tests RV32I&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Base instruction set: RV64I&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tests RV64I&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Standard extension M (integer multiply/divide)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tests for Standard extension M RV32/RV64&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Standard extension A (atomic memory ops)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tests for Standard extension A RV32/RV64&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Features under development &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Standard extension C (Compressed 16-bit instructions)&lt;/li&gt; &#xA;   &lt;li&gt;Standard extension F (Single-precision floating point)&lt;/li&gt; &#xA;   &lt;li&gt;Standard extension D (Double-precision floating point)&lt;/li&gt; &#xA;   &lt;li&gt;Privilege Level M (Machine)&lt;/li&gt; &#xA;   &lt;li&gt;Privilege Level U (User)&lt;/li&gt; &#xA;   &lt;li&gt;Privilege Level S (Supervisor) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Virtual Memory schemes SV32, SV39 and SV48&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Application can be executed as a F# program flexible with CLI (&lt;em&gt;command line interface&lt;/em&gt;) support, which in turn executes RISC-V ELF binaries. This is a sequential interpretation: one-instruction-at-a-time, sequential memory model.&lt;/li&gt; &#xA; &lt;li&gt;Tests passing for RISC-V &lt;strong&gt;under development&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Basic instruction flow&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rv32ui-p-*, rv64ui-p-*&lt;/code&gt; (Base instruction set)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rv32um-p-*, rv64um-p-*&lt;/code&gt; (M extension)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rv32ua-p-*, rv64ua-p-*&lt;/code&gt; (A extension)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;rv32uc-p-*, rv64uc-p-*&lt;/code&gt; (C extension)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reading the code&lt;/h2&gt; &#xA;&lt;p&gt;We expect that many people might use this as a reading reference (whether or not they build and execute it) to clarify their understanding of RISC-V ISA semantics.&lt;/p&gt; &#xA;&lt;p&gt;Main part for reading Specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Decode*.fs&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Decodes contain decoders for specific instructions set and notified with instruction/extension set symbol. For example &lt;code&gt;DecodeI.fs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Execute*.fs&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Executes contain executions for specific instructions set and notified with instruction/extension set symbol. For example &lt;code&gt;ExecuteI.fs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Utilities:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;CLI.fs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Contain helper function and types for building effective CLI commands and options.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Bits.fs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Basic type specific functions for manipulations with &lt;code&gt;bits&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Run.fs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Basic Run flow - fetch, decode, execute, logging execution flow.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Architecture&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Arch.fs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Basic architecture types for RISC-V specification.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;MachineState.fs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Basic type and functions described RISC-V machine state.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Main app&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Program.fs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Main application to execute &lt;strong&gt;RISC-V simulator/emulator&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Test/*.fs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Contain unit-tests for instructions set and extensions&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Test/asm/&lt;/p&gt; &lt;p&gt;Contain Assembler test programs for manual testing RISC-V CPI implementation. It depend on &lt;strong&gt;risc-v toolchain&lt;/strong&gt; and it has special auto-build &lt;code&gt;Makefile&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to build and run it on RISC-V binaries&lt;/h2&gt; &#xA;&lt;p&gt;Application can be executed as a &lt;em&gt;sequential RISC-V simulator&lt;/em&gt; (sequential, one-instruction-at-a-time semantics), by building and executing it as a standard F# program.&lt;/p&gt; &#xA;&lt;p&gt;Supported OS:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;MacOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported &lt;strong&gt;.NET SDK&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;.NET SDK 2.2&lt;/li&gt; &#xA; &lt;li&gt;.NET SDK 3.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install .NET SDK&lt;/h3&gt; &#xA;&lt;p&gt;For Windows preferred way to use Visual Studio.&lt;/p&gt; &#xA;&lt;p&gt;Other examples will be for Linux. Please follow to instruction &lt;a href=&#34;https://dotnet.microsoft.com/download&#34;&gt;https://dotnet.microsoft.com/download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Ubuntu:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb&#xA;$ sudo dpkg -i packages-microsoft-prod.deb&#xA;$ sudo apt-get update&#xA;$ sudo apt-get install apt-transport-https&#xA;$ sudo apt-get update&#xA;$ sudo apt-get install dotnet-sdk-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check installation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ dotnet --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;will tell you what version of &lt;code&gt;dotnet&lt;/code&gt; you have.&lt;/p&gt; &#xA;&lt;h3&gt;Make the application executable&lt;/h3&gt; &#xA;&lt;p&gt;You can build the application executable with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ dotnet build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run the application executable&lt;/h3&gt; &#xA;&lt;p&gt;Most simple way to run immediately &lt;code&gt;run&lt;/code&gt; (without additional &lt;code&gt;build&lt;/code&gt; command) to see command-line options on the executable:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ dotnet run -- --help&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you run the application without option:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ dotnet run&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;you&#39;ll receive error message:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Wrong parameters put --help to get more information&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; to run specific ISA with extensions, verbosity output and ELF file for execution in RISC-V CPI simulator:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ dotnet run -- -A rv32i -v myapp.elf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please read file &lt;a href=&#34;https://raw.githubusercontent.com/mrLSD/riscv-fs/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;github ISA manual: &lt;a href=&#34;https://github.com/riscv/riscv-isa-manual&#34;&gt;https://github.com/riscv/riscv-isa-manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RISC-V specification: &lt;a href=&#34;https://riscv.org/specifications/&#34;&gt;https://riscv.org/specifications/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RISC-V Formal Verification Framework: &lt;a href=&#34;https://github.com/SymbioticEDA/riscv-formal&#34;&gt;https://github.com/SymbioticEDA/riscv-formal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;MIT License&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>