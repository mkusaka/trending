<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-07T01:28:12Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ken-okabe/vanfs</title>
    <updated>2024-05-07T01:28:12Z</updated>
    <id>tag:github.com,2024-05-07:/ken-okabe/vanfs</id>
    <link href="https://github.com/ken-okabe/vanfs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üç¶ VanFS: 1:1 bindings from F# to üç¶VanJS (an ultra-lightweight , zero-dependency , and unopinionated Reactive UI framework based on pure vanilla JavaScript and DOM without React/JSX) + WebComponents + micro FRP&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;vanfs&lt;/h6&gt; &#xA;&lt;h1&gt;üç¶ VanFS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714596612787.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS is a project template&lt;/strong&gt; for 1:1 bindings from &lt;a href=&#34;https://fsharp.org/&#34;&gt;F#&lt;/a&gt; to &lt;a href=&#34;https://vanjs.org/&#34;&gt;VanJS&lt;/a&gt; (A tiny Reactive UI Framework without React/JSX) + &lt;a href=&#34;https://m3.material.io/develop/web&#34;&gt;WebComponents&lt;/a&gt; + micro FRP (&lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_reactive_programming&#34;&gt;Functional reactive programming&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;What is VanJS?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712047413143.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vanjs-org/van&#34;&gt;https://github.com/vanjs-org/van&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üç¶ VanJS: World&#39;s smallest reactive UI framework. Incredibly Powerful, Insanely Small - Everyone can build a useful UI app in an hour.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vanjs.org&#34;&gt;https://vanjs.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;VanJS&lt;/strong&gt; (&lt;a href=&#34;https://vanjs.org/about#name&#34;&gt;abbreviated Vanilla JavaScript&lt;/a&gt;) is an &lt;em&gt;&lt;strong&gt;ultra-lightweight&lt;/strong&gt;&lt;/em&gt; , &lt;em&gt;&lt;strong&gt;zero-dependency&lt;/strong&gt;&lt;/em&gt; , and &lt;em&gt;&lt;strong&gt;unopinionated&lt;/strong&gt;&lt;/em&gt; Reactive UI framework based on pure vanilla JavaScript and DOM. Programming with &lt;strong&gt;VanJS&lt;/strong&gt; feels like building React apps in a &lt;a href=&#34;https://vanjs.org/about#story&#34;&gt;scripting language&lt;/a&gt;, without JSX. Check-out the Hello World code below:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;VanJS code in JavaScript&lt;/h3&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import van from &#34;vanjs-core&#34;&#xA;&#xA;const { a, p, div, li, ul } = van.tags&#xA;// Reusable components can be just pure vanilla JavaScript functions.&#xA;// Here we capitalize the first letter to follow React conventions.&#xA;const Hello =&#xA;    () =&amp;gt;&#xA;        div(&#xA;            p(&#34;üëãHello&#34;),&#xA;            ul(&#xA;                li(&#34;üó∫Ô∏èWorld&#34;),&#xA;                li(a({ href: &#34;https://vanjs.org/&#34; }, &#34;üç¶VanJS&#34;)),&#xA;            ),&#xA;        )&#xA;&#xA;van.add(document.body, Hello())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://jsfiddle.net/gh/get/library/pure/vanjs-org/vanjs-org.github.io/tree/master/jsfiddle/home/hello&#34;&gt;Try on jsfiddle&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;VanFS is a F# project template for one-to-one direct bindings of VanJS&lt;/h2&gt; &#xA;&lt;h3&gt;VanFS code in F#&lt;/h3&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module HelloApp&#xA;open Browser&#xA;open Browser.Types&#xA;open Fable.Core.JsInterop&#xA;open Van.Basic // import tags, add&#xA;&#xA;let a: Tag = tags?a&#xA;let p: Tag = tags?p&#xA;let div: Tag = tags?div&#xA;let ul: Tag = tags?ul&#xA;let li: Tag = tags?li&#xA;&#xA;let Hello =&#xA;    fun _ -&amp;gt;&#xA;        div [&#xA;            p [&#34;üëãHello&#34;]&#xA;            ul [&#xA;                li [&#34;üó∫Ô∏èWorld&#34;]&#xA;                li [a [{|href=&#34;https://vanjs.org/&#34;|}; &#34;üç¶VanJS&#34;]]&#xA;            ]&#xA;        ]&#xA;&#xA;add [document.body; Hello()]&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/VwNOVOx&#34;&gt;https://codepen.io/kentechgeek/pen/VwNOVOx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714590641481.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Components with parameters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanJS&lt;/strong&gt; components are just functions in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS&lt;/strong&gt; components are just functions in F#, and &lt;strong&gt;there are no strict rules like functional components in React.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;However, if we aim for a consistent style for &lt;strong&gt;components with parameters&lt;/strong&gt; that is similar to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;a [{|href=&#34;https://vanjs.org/&#34;|}; &#34;üç¶VanJS&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the following code should be more appropriate:&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let Greeting: Tag =&#xA;    fun list -&amp;gt;&#xA;        let name: string = list[0]?name&#xA;        div [$&#34;Hello {name}!&#34;]&#xA;&#xA;add [document.body; Greeting [{|name=&#34;Ken&#34;|}]]&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714896318658.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is the corresponding TSX code:&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/tsx.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Greeting: Component&amp;lt;{ name: string }&amp;gt; =&#xA;    ({ name }) =&amp;gt; &#xA;        &amp;lt;div&amp;gt;Hello {name}!&amp;lt;/div&amp;gt;;&#xA;&#xA;render(() =&amp;gt; &amp;lt;Greeting name=&#34;Ken&#34; /&amp;gt;, document.body);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why VanJS is based on Vanilla JavaScript&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712047413143.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vanjs.org/about#story&#34;&gt;VanJS: About - the Story behind VanJS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;But I think, in a nutshell, the best way to describe it is: &lt;em&gt;&lt;strong&gt;VanJS&lt;/strong&gt; is the scripting language for UI, just like bash is the &lt;em&gt;scripting language&lt;/em&gt; for terminal.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Being the scripting language for UI&lt;/em&gt; , is the fundamental principle that guides the design of &lt;strong&gt;VanJS&lt;/strong&gt; . It&#39;s based on JavaScript so that it can work in as many environments as possibles, not only for websites, but also for webviews which most major OSes support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vanjs.org/about#name&#34;&gt;VanJS: About - How Did VanJS Get Its Name?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Under the hood, &lt;strong&gt;VanJS&lt;/strong&gt; stays truthful to Vanilla JavaScript as close as possible, as there is no transpiling, virtual DOM or any hidden logic. &lt;strong&gt;VanJS&lt;/strong&gt; code can be translated to Vanilla JavaScript code in a very straightforward way.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Why we should avoid using JavaScript&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanJS is a library based on Vanilla JavaScript for the well-established reasons.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714981242090.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;However, to take full advantage of &lt;strong&gt;VanJS&lt;/strong&gt; , we should consider using &lt;strong&gt;alternative languages instead of JavaScript&lt;/strong&gt; , which are commonly referred to as &lt;strong&gt;AltJS&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;One of the critical reasons is that &lt;strong&gt;JavaScript is not a &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_safety&#34;&gt;type-safe language&lt;/a&gt;&lt;/strong&gt; , which can lead to &lt;strong&gt;runtime errors and bugs.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.slashdot.org/story/14/11/05/0530228/the-effect-of-programming-language-on-software-quality&#34;&gt;The Effect of Programming Language On Software Quality&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.researchgate.net/publication/221321863_An_Experiment_About_Static_and_Dynamic_Type_Systems_Doubts_About_the_Positive_Impact_of_Static_Type_Systems_on_Development_Time&#34;&gt;An Experiment About Static and Dynamic Type Systems Doubts About the Positive Impact of Static Type Systems on Development Time&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Most notably, it does appear that strong typing is modestly better than weak typing, and among functional languages, static typing is also somewhat better than dynamic typing. We also find that functional languages are somewhat better than procedural languages. It is worth noting that these modest effects arising from language design are overwhelmingly dominated by the process factors such as project size, team size, and commit size. However, we hasten to caution the reader that even these modest effects might quite possibly be due to other, intangible process factors, e.g., the preference of certain personality types for functional, static and strongly typed languages.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In fact, in modern web development, JavaScript has increasingly become &lt;strong&gt;a compile target&lt;/strong&gt; from other languages, such as &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714519844346.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TypeScript -&amp;gt; JavaScript&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VanJS can be regarded as a compile target from VanFS (AltJS)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS (AltJS) -&amp;gt; VanJS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714597338717.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS project includes some TypeScript code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;1. The internal mechanism of VanFS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/raw/main/van-api/ts/basic.ts&#34;&gt;https://github.com/ken-okabe/vanfs/blob/main/van-api/ts/basic.ts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TS code for the purpose of conversion using JS Proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// unary function ([a,b,c,...]) in F#  &#xA;// -&amp;gt; n-ary function (a,b,c,...) in VanJS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is under the &lt;code&gt;van-api&lt;/code&gt; directory which is essential and we would not want to modify it to keep things working.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;2. For styles and Web Components&lt;/h3&gt; &#xA;&lt;p&gt;Users must install any required &lt;strong&gt;CSS&lt;/strong&gt; or &lt;strong&gt;Web Components&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanJS does not provide the specific installation support beause it&#39;s just a VanillaJS.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, &lt;strong&gt;VanFS&lt;/strong&gt; clarifies the step-by-step process as below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;CSS&lt;/h4&gt; &#xA;&lt;p&gt;Everything we need to customize or import is located under web-imports directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714863909626.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Import and Register the web components&lt;/h4&gt; &#xA;&lt;h5&gt;/web-imports/components.ts&lt;/h5&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {&#xA;    provideFluentDesignSystem,&#xA;    fluentCard,&#xA;    fluentCheckbox&#xA;} from &#34;@fluentui/web-components&#34;;&#xA;&#xA;provideFluentDesignSystem()&#xA;    .register(&#xA;        fluentCard()&#xA;    );&#xA;&#xA;provideFluentDesignSystem()&#xA;    .register(&#xA;        fluentCheckbox()&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;/web-imports/css-urls.ts&lt;/h5&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export let cssURLs = [&#xA; &#34;https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&#34;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regardless, all the required code within the VanFS project is compiled into a single VanillaJS bundle using Fable and Vite.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714047967751.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;Why we should avoid using TypeScript and migrate to F#&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714520217543.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://fsharp.org/&#34;&gt;F#&lt;/a&gt; gives you &lt;strong&gt;simplicity&lt;/strong&gt; and &lt;strong&gt;succinctness&lt;/strong&gt; like Python with &lt;strong&gt;correctness&lt;/strong&gt; , &lt;strong&gt;robustness&lt;/strong&gt; and &lt;strong&gt;performance&lt;/strong&gt; beyond C# or Java.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Undoubtedly, TypeScript is the most commonly used AltJS. It is a superset of JavaScript that adds type safety and other features. &lt;strong&gt;So why not use TypeScript?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are many reasons, but chief among them is developer &lt;strong&gt;productivity&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;For instance, the below are the identical code written in TypeScript and F#.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;let bindT = &amp;lt;A, B&amp;gt;&#xA;    (monadf: (a: A) =&amp;gt; Timeline&amp;lt;B&amp;gt;) =&amp;gt;&#xA;    (timelineA: Timeline&amp;lt;A&amp;gt;): Timeline&amp;lt;B&amp;gt; =&amp;gt; {&#xA;        let timelineB = monadf(timelineA.lastVal);&#xA;        let newFn = (a: A) =&amp;gt; {&#xA;            nextT(monadf(a).lastVal)(timelineB);&#xA;            return undefined;&#xA;        };&#xA;        timelineA.lastFns = timelineA.lastFns.concat([newFn]);&#xA;        return timelineB;&#xA;    };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In TypeScript, compared with legacy JavaScript, an additional step is required to add type signatures to all variables, functions, and parameters. This is often overwhelming.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let bindT =&#xA;    fun monadf timelineA -&amp;gt;&#xA;        let timelineB = timelineA.lastVal |&amp;gt; monadf&#xA;        let newFn =&#xA;            fun a -&amp;gt;&#xA;                timelineB&#xA;                |&amp;gt; nextT (a |&amp;gt; monadf).lastVal&#xA;                |&amp;gt; ignore&#xA;        timelineA.lastFns &amp;lt;- timelineA.lastFns @ [ newFn ]&#xA;        timelineB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The F# code is much cleaner and more readable than TypeScript code.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In F#, we rarely need to add types manually thanks to its powerful type inference. This makes F# development feel similar to legacy JavaScript coding.&lt;/p&gt; &#xA;&lt;p&gt;In reality, it is much more than that.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714543169576.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The powerful F# compiler &lt;strong&gt;automatically generates type annotations&lt;/strong&gt; in &lt;strong&gt;VSCode&lt;/strong&gt; editor, eliminating the need for manual typing that TypeScript demands.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;While programmers may want to define fundamental object types that form the backbone of their code, in other places, if the F# compiler warns for a demand of manual type annotations, usually, &lt;strong&gt;something is wrong&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;In F#, if the compiler cannot infer the type, it often suggests that there may be mathematical inconsistencies.&lt;/p&gt; &#xA;&lt;p&gt;In TypeScript, if the compiler cannot infer the type, it often suggests limitations in its type inference capabilities. This makes it hard to determine the precise cause of the problem.&lt;/p&gt; &#xA;&lt;p&gt;As a result, F# programmers are naturally led to write mathematically consistent and rigorous code; unfortunately, this benefit &lt;strong&gt;rarely&lt;/strong&gt; happens in TypeScript.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;F# as an AltJS: A Comparison with TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;F# is generally recognized as running on the &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;.NET Framework&lt;/a&gt;, but just as TypeScript is compiled to JavaScript, F# is also compiled to JavaScript.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;TypeScript -&amp;gt; JavaScript&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;F# -&amp;gt; JavaScript&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More precisely,&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;TypeScirpt&lt;/strong&gt;&lt;br&gt; ‚¨á &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler&#34;&gt;TypeScript Compiler&lt;/a&gt; running on &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; (&lt;code&gt;npx tsc&lt;/code&gt;)&lt;br&gt; &lt;strong&gt;JavaScript&lt;/strong&gt; running in the browser&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;F#&lt;/strong&gt;&lt;br&gt; ‚¨á &lt;a href=&#34;https://github.com/fable-compiler/Fable&#34;&gt;Fable Compiler&lt;/a&gt; running on &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;.NET&lt;/a&gt; (&lt;code&gt;dotnet fable&lt;/code&gt;)&lt;br&gt; &lt;strong&gt;JavaScript&lt;/strong&gt; running in the browser&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Therefore, the backbone of &lt;strong&gt;VanFS&lt;/strong&gt; is &lt;a href=&#34;https://github.com/fable-compiler/Fable&#34;&gt;Fable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712070754189.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fable enables F# code to be compiled to JavaScript and run in the browser.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why browser? Why VanJS?&lt;/h2&gt; &#xA;&lt;p&gt;There are a lot of &lt;strong&gt;Why&lt;/strong&gt; s here!&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve created a separate article on this topic since it&#39;s part of the larger frontend app development landscape and deserves a focused discussion with my own opinions.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;üì± Versatility of Web Technology for Cross-Platform App Development&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712154361707.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;getting-started&lt;/h6&gt; &#xA;&lt;h1&gt;üöÄ Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Build a VanFS project template&lt;/h2&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet&#34;&gt;.NET SDK&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Node.js&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt; CLI or Alternatives (&lt;a href=&#34;https://bun.sh/&#34;&gt;Bun&lt;/a&gt; / &lt;a href=&#34;https://deno.com/&#34;&gt;Deno&lt;/a&gt; / &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;yarn&lt;/a&gt; etc.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are new to F# and using &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;, read &lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-fsharpVSCode.md&#34;&gt;F# Settings on VSCode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A &lt;strong&gt;VanFS/Fable&lt;/strong&gt; project is a hybrid of &lt;strong&gt;F#.NET project&lt;/strong&gt; and &lt;strong&gt;npm project&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://fable.io/docs/getting-started/setup.html&#34;&gt;Fable Setup Documentaion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ken-okabe/vanfs&#xA;cd vanfs&#xA;dotnet restore  # .NET project setup&#xA;dotnet tool restore&#xA;npm i           #  npm project setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711727772764.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;or Create a project from scratch&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711729299132.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir my-project&#xA;cd my-project&#xA;dotnet new console -lang F#&#xA;dotnet new tool-manifest&#xA;dotnet tool install fable&#xA;dotnet add package Fable.Core&#xA;dotnet add package Fable.Browser.Dom&#xA;npm init -y&#xA;npm i -D vanjs-core&#xA;npm i -D vite&#xA;# Copy&amp;amp;Place `van-api` `web-imports` directory&#xA;# Copy&amp;amp;Place `index.html` `Program.fs` `vite.config.ts` file&#xA;# modify `my-project.fsproj`&#xA;#  &amp;lt;ItemGroup&amp;gt;&#xA;#    &amp;lt;Compile Include=&#34;van-api/fs/*.fs&#34; /&amp;gt;&#xA;#    &amp;lt;Compile Include=&#34;Program.fs&#34; /&amp;gt;&#xA;#  &amp;lt;/ItemGroup&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;/my-project.fsproj&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Project Sdk=&#34;Microsoft.NET.Sdk&#34;&amp;gt;&#xA;&#xA;  &amp;lt;PropertyGroup&amp;gt;&#xA;    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;&#xA;    &amp;lt;TargetFramework&amp;gt;net8.0&amp;lt;/TargetFramework&amp;gt;&#xA;    &amp;lt;RootNamespace&amp;gt;my_project&amp;lt;/RootNamespace&amp;gt;&#xA;  &amp;lt;/PropertyGroup&amp;gt;&#xA;&#xA;  &amp;lt;ItemGroup&amp;gt;&#xA;    &amp;lt;Compile Include=&#34;van-api/fs/*.fs&#34; /&amp;gt;&#xA;    &amp;lt;Compile Include=&#34;Program.fs&#34; /&amp;gt;&#xA;  &amp;lt;/ItemGroup&amp;gt;&#xA;&#xA;  &amp;lt;ItemGroup&amp;gt;&#xA;    &amp;lt;PackageReference Include=&#34;Fable.Browser.Dom&#34; Version=&#34;2.16.0&#34; /&amp;gt;&#xA;    &amp;lt;PackageReference Include=&#34;Fable.Core&#34; Version=&#34;4.3.0&#34; /&amp;gt;&#xA;  &amp;lt;/ItemGroup&amp;gt;&#xA;&#xA;&amp;lt;/Project&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Compile F# to JavaScript&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet fable watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live Preview with Vite&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx vite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711730067105.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711730144988.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build with Vite&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx vite build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The production files will be under &lt;code&gt;build&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714047967751.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;CSS&lt;/h2&gt; &#xA;&lt;p&gt;Everything we need to customize or import is located under &lt;code&gt;web-imports&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711754186205.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;/web-imports/custom.css&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/css.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {&#xA;    font-family: sans-serif;&#xA;    padding: 1em;&#xA;    background-color: beige;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/zYXQyxz&#34;&gt;https://codepen.io/kentechgeek/pen/zYXQyxz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714591131074.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;web-components&lt;/h6&gt; &#xA;&lt;h1&gt;üåê Web Components&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS&lt;/strong&gt; can leverage custom HTML tags provided by &lt;strong&gt;Web Components&lt;/strong&gt; with &lt;strong&gt;design systems&lt;/strong&gt; : &lt;a href=&#34;https://fluent2.microsoft.design/&#34;&gt;Microsoft Fluent&lt;/a&gt;, &lt;a href=&#34;https://m3.material.io/&#34;&gt;Google Material Design&lt;/a&gt;, etc. .&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://fluent2.microsoft.design/&#34;&gt;Fluent&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711756843224.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711756903076.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/fluentui/&#34;&gt;https://github.com/microsoft/fluentui/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install the Fluent UI Web Components with NPM or Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@fluentui/web-components&#34;&gt;https://www.npmjs.com/package/@fluentui/web-components&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @fluentui/web-components&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Import and Register the web components&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s use Fruent Web &lt;strong&gt;Card&lt;/strong&gt; and &lt;strong&gt;Checkbox&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/fluent-ui/web-components/components/card?pivots=typescript&#34;&gt;https://learn.microsoft.com/en-us/fluent-ui/web-components/components/card?pivots=typescript&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/fluent-ui/web-components/components/checkbox?pivots=typescript&#34;&gt;https://learn.microsoft.com/en-us/fluent-ui/web-components/components/checkbox?pivots=typescript&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711754186205.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;/web-imports/components.ts&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {&#xA;    provideFluentDesignSystem,&#xA;    fluentCard,&#xA;    fluentCheckbox&#xA;} from &#34;@fluentui/web-components&#34;;&#xA;&#xA;provideFluentDesignSystem()&#xA;    .register(&#xA;        fluentCard()&#xA;    );&#xA;&#xA;provideFluentDesignSystem()&#xA;    .register(&#xA;        fluentCheckbox()&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Some Web Components use CSS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711754186205.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;/web-imports/custom.css&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/css.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {&#xA;    font-family: sans-serif;&#xA;    padding: 1em;&#xA;    background-color: beige;&#xA;  }&#xA;&#xA;.custom {&#xA;    --card-width: 200px;&#xA;    --card-height: 150px;&#xA;    padding: 22px;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use Web Components from &lt;code&gt;Program.fs&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module WebComponentsApp&#xA;open Browser&#xA;open Browser.Types&#xA;open Fable.Core.JsInterop&#xA;open Van.Basic // import tags, add&#xA;&#xA;let br : Tag = tags?br&#xA;&#xA;// Define the fluent-card and fluent-checkbox tags&#xA;let fluentCard: Tag = tags?``fluent-card``&#xA;let fluentCheckbox: Tag = tags?``fluent-checkbox``&#xA;&#xA;let List =&#xA;    fun _ -&amp;gt;&#xA;        fluentCard [&#xA;            {|``class``=&#34;custom&#34;|}&#xA;            // class is a reserved word in F#&#xA;            // so we use backticks to escape it&#xA;            fluentCheckbox [&#34;Did you check this?&#34;]&#xA;            br []&#xA;            fluentCheckbox [{|``checked``=true; disabled=true|}; &#34;Is this disabled?&#34;]&#xA;            br []&#xA;            fluentCheckbox [{|``checked``=true|}; &#34;Checked by default?&#34; ]&#xA;        ]&#xA;&#xA;add [document.body; List()]&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Clean the fable project and compile again&lt;/h2&gt; &#xA;&lt;p&gt;When major changes are made, cleaning the Fable project is sometimes necessary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dotnet fable clean&#xA;&#xA;dotnet fable watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Live Preview with Vite&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx vite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711758425606.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://m3.material.io/&#34;&gt;Material Design&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711759476213.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://material-web.dev/about/intro/&#34;&gt;https://material-web.dev/about/intro/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711759837554.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/material-components/material-web&#34;&gt;https://github.com/material-components/material-web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install the Material Web Components with NPM or Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://material-web.dev/about/quick-start/&#34;&gt;https://material-web.dev/about/quick-start/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@material/web&#34;&gt;https://www.npmjs.com/package/@material/web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @material/web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Import the web components&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s use Material web &lt;strong&gt;Text field&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://material-web.dev/components/text-field/&#34;&gt;https://material-web.dev/components/text-field/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714462036427.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://material-web.dev/components/text-field/stories/&#34;&gt;https://material-web.dev/components/text-field/stories/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714462362951.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711754186205.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;/web-imports/components.ts&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#39;@material/web/textfield/filled-text-field.js&#39;;&#xA;import &#39;@material/web/button/text-button.js&#39;;&#xA;import &#39;@material/web/button/outlined-button.js&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;/web-imports/custom.css&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/css.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.custom3 {&#xA;    --card-width: 460px;&#xA;    --card-height: 150px;&#xA;    padding: 20px;&#xA;  }&#xA;&#xA;.row {&#xA;  align-items: flex-start;&#xA;  display: flex;&#xA;  flex-wrap: wrap;&#xA;  gap: 16px;&#xA;}&#xA;&#xA;.buttons {&#xA;  justify-content: flex-end;&#xA;  padding: 16px;&#xA;}&#xA;&#xA;md-filled-text-field,&#xA;md-outlined-text-field {&#xA;  width: 200px;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module MaterialUI&#xA;open Browser&#xA;open Browser.Types&#xA;open Fable.Core.JsInterop&#xA;open Van.Basic // import tags, add&#xA;&#xA;let div: Tag = tags?div&#xA;let form: Tag = tags?form&#xA;&#xA;let fluentCard: Tag = tags?``fluent-card``&#xA;let mdFilledTextField: Tag = tags?``md-filled-text-field``&#xA;let mdTextButton: Tag = tags?``md-text-button``&#xA;let mdOutlinedButton: Tag = tags?``md-outlined-button``&#xA;&#xA;let Form =&#xA;    fun _ -&amp;gt;&#xA;        fluentCard [&#xA;            {|``class``=&#34;custom3&#34;|}&#xA;            form [&#xA;                div [&#xA;                    {|``class``=&#34;row&#34;|}&#xA;                    mdFilledTextField [&#xA;                        {|&#xA;                        label=&#34;First name&#34;&#xA;                        name=&#34;first-name&#34;&#xA;                        required=&#34;&#34;&#xA;                        autocomplete=&#34;given-name&#34;&#xA;                        |}&#xA;                    ]&#xA;                    mdFilledTextField [&#xA;                        {|&#xA;                        label=&#34;Last name&#34;&#xA;                        name=&#34;last-name&#34;&#xA;                        required=&#34;&#34;&#xA;                        autocomplete=&#34;family-name&#34;&#xA;                        |}&#xA;                    ]&#xA;                ]&#xA;                div [&#xA;                    {|``class``=&#34;row buttons&#34;|}&#xA;                    mdTextButton [&#xA;                        {|``type``= &#34;reset&#34;|}&#xA;                        &#34;Reset&#34;&#xA;                    ]&#xA;                    mdOutlinedButton [&#xA;                        {|``type``= &#34;submit&#34;|}&#xA;                        &#34;Submit&#34;&#xA;                    ]&#xA;                ]&#xA;            ]&#xA;        ]&#xA;&#xA;add [document.body; Form()]&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build with Vite&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx vite build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/KKYLwgN?editors=1111&#34;&gt;https://codepen.io/kentechgeek/pen/KKYLwgN?editors=1111&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714465827447.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Import the web components&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s use Material web &lt;strong&gt;Icon Buttons&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://material-web.dev/components/icon-button/&#34;&gt;https://material-web.dev/components/icon-button/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711760987250.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711754186205.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;/web-imports/components.ts&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import &#39;@material/web/icon/icon.js&#39;;&#xA;import &#39;@material/web/iconbutton/icon-button.js&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Material Web Components use Google Fonts/Icons&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://m3.material.io/styles/icons/overview&#34;&gt;https://m3.material.io/styles/icons/overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711761560892.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/icons&#34;&gt;https://fonts.google.com/icons&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711761915503.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install Google Fonts/Icons&lt;/h2&gt; &#xA;&lt;p&gt;Obtain required CSS URLs from the Google Fonts page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fonts.google.com/icons?selected=Material+Symbols+Outlined&lt;span&gt;‚≠ê&lt;/span&gt;FILL@0;wght@400;GRAD@0;opsz@24&#34;&gt;https://fonts.google.com/icons?selected=Material+Symbols+Outlined&lt;span&gt;‚≠ê&lt;/span&gt;FILL@0;wght@400;GRAD@0;opsz@24&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712042147933.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add the CSS URL to&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1711754186205.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;/web-imports/css-urls.ts&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/typescript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export let cssURLs = [&#xA; &#34;https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&#34;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;frp&lt;/h6&gt; &#xA;&lt;h1&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/h1&gt; &#xA;&lt;h2&gt;(1:1 bindings for composing UIs) + micro FRP&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS&lt;/strong&gt; is described as&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;1:1 bindings from F# to &lt;strong&gt;VanJS&lt;/strong&gt; (A tiny Reactive UI Framework without React/JSX) + WebComponents + micro FRP&lt;/p&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS&lt;/strong&gt; is a F# project template for one-to-one direct bindings of &lt;strong&gt;VanJS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;1:1 bindings is absolutely true within the scope of the basic features for composing UIs, but not a case for its state management.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VanJS is a framework that embraces Reactive Programming&lt;/h2&gt; &#xA;&lt;p&gt;VanJS reactively binds its state objects to corresponding DOM elements. This means that when a state object updates, the corresponding DOM element automatically updates as well. This approach is a common feature among declarative UI libraries such as React, SolidJS, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712039784885.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VanJS state API&lt;/h2&gt; &#xA;&lt;p&gt;In order to utilize the state management, VanJS provides two APIs: &lt;code&gt;van.state&lt;/code&gt; and &lt;code&gt;van.derive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712106536645.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712106745588.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712106818761.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VanFS is a framework that embraces Functional Reactive Programming (FRP)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanJS&lt;/strong&gt; is &lt;strong&gt;Reactive&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VanFS&lt;/strong&gt; is &lt;strong&gt;Functional Reactive&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is Functional Programming?&lt;/h2&gt; &#xA;&lt;p&gt;Given the critical significance of Functional Programming in modern software development, I have dedicated a separate article to exploring its key concepts and benefits.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;üí° What is Functional Programming?&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;üí° How does Functional Programming Code Drive?&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;VanFS provides binary operations to utilize the state management&lt;/h2&gt; &#xA;&lt;p&gt;In Functional Programming, everything is an expression or operation (&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;üí° What is Functional Programming?&lt;/a&gt;). Accordingly, VanFS provides &lt;strong&gt;binary operations for the reactive state management&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;$$ TimelineA ~ ~ * ~ ~ Function \quad \rightarrow \quad TimelineB $$&lt;/p&gt; &#xA;&lt;p&gt;$$ TimelineB \quad = \quad TimelineA ~ ~ * ~ ~ Function $$&lt;/p&gt; &#xA;&lt;p&gt;This binary operation corresponds to an operation in &lt;a href=&#34;https://www.google.com/intl/en/sheets/about/&#34;&gt;spreadsheet apps&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712461813235.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712453265841.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;$TimelineA \quad = \quad$ &lt;strong&gt;A1&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;$TimelineB \quad = \quad$ &lt;strong&gt;B1&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;$Function \quad = \quad$ &lt;em&gt;&lt;strong&gt;fx&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;This is the identical structure of:&lt;/p&gt; &#xA;&lt;p&gt;$$ ListA ~ ~ * ~ ~ Function \quad \rightarrow \quad ListB $$&lt;/p&gt; &#xA;&lt;p&gt;$$ ListB \quad = \quad ListA ~ ~ * ~ ~ Function $$&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images2/main/img_1694006796227.png#gh-dark-mode-only&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images2/main/img_1694901961984.png#gh-light-mode-only&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;So, this is FRP.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Functional Reactive Programming (FRP)&lt;/strong&gt; is a programming paradigm that uses mathematical expressions, specifically &lt;strong&gt;binary operations&lt;/strong&gt; , as a means of implementing &lt;strong&gt;Reactive Programming&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;timeline&lt;/h6&gt; &#xA;&lt;h1&gt;‚è±Ô∏è Timeline&lt;/h1&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt; is a fundamentally standalone FRP library, with no dependencies on &lt;strong&gt;VanJS&lt;/strong&gt; or &lt;strong&gt;F#&lt;/strong&gt; asynchronous features. &lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/timeline/timeline.fs&#34;&gt;The codebase is a compact pure function implementation of approximately 30-40 lines of code. &lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714543169576.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/van-api/fs/timeline-element.fs&#34;&gt;&lt;strong&gt;TimelineElement&lt;/strong&gt;&lt;/a&gt; is a modified version of &lt;strong&gt;Timeline&lt;/strong&gt;, which wraps the &lt;code&gt;State&lt;/code&gt; object of &lt;strong&gt;VanJS&lt;/strong&gt; and serves as an additional module for utilizing the state management of &lt;strong&gt;VanFS&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;üîç Type&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;Timeline&amp;lt;&#39;a&amp;gt;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;record Timeline&amp;lt;&#39;a&amp;gt;&#xA;  val mutable lastVal: &#39;a&#xA;  val el: StateElement&amp;lt;&#39;a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Van.state&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lastVal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Last value of the Timeline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;State.val&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;el&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reactive DOM element of the Timeline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;State&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;üîç Functions&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ë† Function to initialize &lt;code&gt;Timeline&amp;lt;&#39;a&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;Timeline&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;&#39;a -&amp;gt; Timeline&amp;lt;&#39;a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;VanJS&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let counter = van.state(0);&#xA;&#xA;console.log(counter.val);&#xA;// 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;VanFS&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let counter = Timeline 0&#xA;&#xA;console.log counter.lastVal&#xA;// 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Consider the &lt;code&gt;Timeline&lt;/code&gt; as a specific container for a value, similar to a &lt;strong&gt;Cell&lt;/strong&gt; in &lt;a href=&#34;https://www.google.com/intl/en/sheets/about/&#34;&gt;spreadsheet apps&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712455522726.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ë° Functions for the binary operations&lt;/h2&gt; &#xA;&lt;p&gt;$$ TimelineA ~ ~ * ~ ~ Function \quad \rightarrow \quad TimelineB $$&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;mapT&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;(&#39;a -&amp;gt; &#39;b) -&amp;gt; (Timeline&amp;lt;&#39;a&amp;gt; -&amp;gt; Timeline&amp;lt;&#39;b&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;bindT&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;(&#39;a -&amp;gt; Timeline&amp;lt;&#39;b&amp;gt;) -&amp;gt; (Timeline&amp;lt;&#39;a&amp;gt; -&amp;gt; Timeline&amp;lt;&#39;b&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;VanFS&lt;/h4&gt; &#xA;&lt;p&gt;When the binary operator: $*$ is &lt;code&gt;mapT&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;p&gt;$$ TimelineB \quad = \quad TimelineA \quad \triangleright mapT \quad double $$&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let double = fun a -&amp;gt; a * 2&#xA;&#xA;let timelineA = Timeline 1&#xA;&#xA;let timelineB =&#xA;    timelineA |&amp;gt; mapT double&#xA;&#xA;console.log timelineB.lastVal&#xA;// 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This code for the binary operation simply corresponds to the basic usage of spreadsheet apps&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712453265841.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg?sanitize=true&#34;&gt; &#xA;&lt;p&gt;This is the identical structure of:&lt;/p&gt; &#xA;&lt;p&gt;$$ ListB \quad = \quad ListA \quad \triangleright List.map \quad double $$&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let double = a =&amp;gt; a * 2;&#xA;&#xA;let arrayA = [1];&#xA;&#xA;let arrayB =&#xA;    arrayA.map(double);&#xA;&#xA;console.log(arrayB);&#xA;// [2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let double =&#xA;    fun a -&amp;gt; a * 2&#xA;&#xA;let listA = [1]&#xA;&#xA;let listB =&#xA;    listA |&amp;gt; List.map double&#xA;&#xA;console.log listB&#xA;// [2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We could recognize the array &lt;code&gt;[2]&lt;/code&gt; is identical to the &lt;strong&gt;Cell&lt;/strong&gt; and &lt;strong&gt;Value&lt;/strong&gt; &lt;code&gt;2&lt;/code&gt; of a spreadsheet; however, the spreadsheet and &lt;strong&gt;Timeline&lt;/strong&gt; maintain a &lt;code&gt;double&lt;/code&gt; relationship &lt;strong&gt;as values change over the timeline&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg?sanitize=true&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ë¢ Function to update &lt;code&gt;Timeline&amp;lt;&#39;a&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;$$TimelineA \quad \triangleright nextT \quad newValue \quad \rightarrow \quad TimelineA&#39;$$&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;nextT&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;&#39;a -&amp;gt; Timeline&amp;lt;&#39;a&amp;gt; -&amp;gt; Timeline&amp;lt;&#39;a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$$ TimelineA&#39; \quad = \quad TimelineA \quad \triangleright nextT \quad newValue $$&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let timelineA&#39; =&#xA;    timelineA |&amp;gt; nextT 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, in most cases, we don‚Äôt need another &lt;code&gt;timelineA&#39;&lt;/code&gt; and want to discard it, so simply &lt;code&gt;ignore&lt;/code&gt; the returned value.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let timelineA = Timeline 1&#xA;&#xA;timelineA&#xA;|&amp;gt; nextT 3&#xA;|&amp;gt; ignore&#xA;&#xA;console.log timelineA.lastVal&#xA;// 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712456400282.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ë†‚ë°‚ë¢ action of &lt;code&gt;Timeline&amp;lt;&#39;a&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The update to &lt;code&gt;timelineA&lt;/code&gt; will trigger a reactive update of &lt;code&gt;timelineB&lt;/code&gt; according to the rule defined by the binary operation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712453321296.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let double = fun a -&amp;gt; a * 2&#xA;&#xA;// ‚ë† initialize timelineA&#xA;let timelineA = Timeline 1&#xA;&#xA;// confirm the lastVal of timelineA&#xA;console.log timelineA.lastVal&#xA;// 1&#xA;&#xA;// ‚ë° the binary operation&#xA;let timelineB =&#xA;    timelineA |&amp;gt; mapT double&#xA;&#xA;// confirm the lastVal of timelineB&#xA;console.log timelineB.lastVal&#xA;// 2&#xA;&#xA;//=====================================&#xA;// ‚ë¢ update the lastVal of timelineA&#xA;timelineA&#xA;|&amp;gt; nextT 3&#xA;|&amp;gt; ignore&#xA;// update to timelineA will trigger&#xA;//   a reactive update of timelineB&#xA;&#xA;// confirm the lastVal of timelineA &amp;amp; timelineB&#xA;console.log timelineA.lastVal&#xA;// 3&#xA;console.log timelineB.lastVal&#xA;// 6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Counter app&lt;/h2&gt; &#xA;&lt;h4&gt;VanJS&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/javascript.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import van from &#34;vanjs-core&#34;&#xA;&#xA;const { button, div, h2 } = van.tags&#xA;&#xA;const Counter =&#xA;    () =&amp;gt; {&#xA;        const counter = van.state(0)&#xA;&#xA;        van.derive(() =&amp;gt;&#xA;            console.log(`Counter: ${counter.val}`))&#xA;&#xA;        return div(&#xA;            h2(&#34;‚ù§Ô∏è &#34;, counter),&#xA;            button(&#xA;                {&#xA;                    onclick: () =&amp;gt; ++counter.val&#xA;                },&#xA;                &#34;üëç&#34;&#xA;            ),&#xA;            button(&#xA;                {&#xA;                    onclick: () =&amp;gt; --counter.val&#xA;                },&#xA;                &#34;üëé&#34;&#xA;            ),&#xA;        )&#xA;    }&#xA;&#xA;van.add(document.body, Counter())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;VanFS&lt;/h4&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module CounterApp&#xA;&#xA;open Browser&#xA;open Browser.Types&#xA;open Fable.Core.JsInterop&#xA;&#xA;open Van.Basic // import tags, add&#xA;open Van.TimelineElement // import Timeline&#xA;&#xA;let div: Tag = tags?div&#xA;let h2: Tag = tags?h2&#xA;let icon: Tag = tags?``md-icon``&#xA;let iconButton: Tag = tags?``md-icon-button``&#xA;&#xA;let Counter =&#xA;    fun _ -&amp;gt;&#xA;        let counter = Timeline 0 // ‚ë† initialize an Timeline&#xA;&#xA;        counter // ‚ë° the binary operation of the Timeline&#xA;        |&amp;gt; mapT (fun value -&amp;gt;&#xA;                     console.log $&#34;Counter: {value}&#34;)&#xA;        |&amp;gt; ignore&#xA;        // ignore the return value of `console.log`&#xA;&#xA;        div [&#xA;            h2 [&#34;‚ù§Ô∏è &#34;; counter.el] // üëà `counter.el`&#xA;            iconButton [           // for Reactive DOM element&#xA;                {|onclick = fun _ -&amp;gt;&#xA;                                counter // ‚ë¢ update the Timeline&#xA;                                |&amp;gt; nextT (counter.lastVal + 1)&#xA;                |}&#xA;                icon [&#34;thumb_up&#34;]&#xA;            ]&#xA;            iconButton [&#xA;                {|onclick = fun _ -&amp;gt;&#xA;                                counter // ‚ë¢ update the Timeline&#xA;                                |&amp;gt; nextT (counter.lastVal - 1)&#xA;                |}&#xA;                icon [&#34;thumb_down&#34;]&#xA;            ]&#xA;        ]&#xA;&#xA;add [document.body; Counter()]&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/gOyqNqb?editors=1111&#34;&gt;https://codepen.io/kentechgeek/pen/gOyqNqb?editors=1111&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714045747403.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;nullable&lt;/h6&gt; &#xA;&lt;h1&gt;‚è±Ô∏è Nullable Types&lt;/h1&gt; &#xA;&lt;h2&gt;What is Null?&lt;/h2&gt; &#xA;&lt;p&gt;Given the critical significance of &lt;strong&gt;Null&lt;/strong&gt; in modern software development, I have dedicated a separate article to exploring its key concepts and benefits.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;üí° What is Null, Nullable and Option Types?&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Nullable types in F#&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/nullable-value-types&#34;&gt;Nullable value types&lt;/a&gt; in F#&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A &lt;em&gt;nullable value type&lt;/em&gt; &lt;code&gt;Nullable&amp;lt;&#39;T&amp;gt;&lt;/code&gt; represents any &lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/structs.md&#34;&gt;struct&lt;/a&gt; type that could also be &lt;code&gt;null&lt;/code&gt;. This is helpful when interacting with libraries and components that may choose to represent these kinds of types, like integers, with a &lt;code&gt;null&lt;/code&gt; value for efficiency reasons. The underlying type that backs this construct is &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/nullable-value-types&#34;&gt;System.Nullable&#xA;   &lt;t&gt;&lt;/t&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;can only represents &lt;code&gt;struct&lt;/code&gt; type, which limitation is problematic.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/63605221/using-nullable-reference-types-in-f&#34;&gt;Using Nullable Reference Types in F#&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/73497807/f-how-do-i-convert-optiona-to-nullable-also-when-a-can-be-system-string&#34;&gt;F#: How do I convert Option&amp;lt;&#39;a&amp;gt; to Nullable, also when &#39;a can be System.String?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It would be nice if we could write &lt;strong&gt;any Nullable types including reference types&lt;/strong&gt; in F#.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fsharp/fslang-design/raw/main/RFCs/FS-1060-nullable-reference-types.md&#34;&gt;F# RFC FS-1060 - Nullable Reference Types&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1713855675109.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Currently, this syntax will generate an error.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, here&#39;s the alternative implementation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/raw/main/timeline/x-nullable.fs&#34;&gt;https://github.com/ken-okabe/vanfs/blob/main/timeline/x-nullable.fs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;NullableT&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type NullableT&amp;lt;&#39;a&amp;gt; =&#xA;    | Null&#xA;    | T of &#39;a&#xA;    member this.Value&#xA;            = match this with&#xA;            | Null -&amp;gt; failwith &#34;Value is null&#34;&#xA;            | T a -&amp;gt; a&#xA;&#xA;let NullableT a =&#xA;    match box a with&#xA;    | :? NullableT&amp;lt;&#39;a&amp;gt; as nullable -&amp;gt; nullable&#xA;    | _ -&amp;gt; T a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let nullable1 =&#xA;    Null&#xA;&#xA;let nullable2 =&#xA;    NullableT &#34;hello&#34;&#xA;&#xA;log nullable1&#xA;// Null&#xA;log nullable2&#xA;// T hello&#xA;log nullable2.Value&#xA;// hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This specification resembles F#&#39;s native &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/fsharp/language-reference/nullable-value-types&#34;&gt;nullable value types&lt;/a&gt;, but unlike it, &lt;strong&gt;&lt;code&gt;NullableT&lt;/code&gt; can also represent any reference types.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://www.compositional-it.com/news-blog/fsharp-nullness-support/&#34;&gt;F# Nullness support&lt;/a&gt; may come soon!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;a preview of the work being done on the F# compiler to support .NET&#39;s nullness capabilities.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;timeline-nullable&lt;/h6&gt; &#xA;&lt;h1&gt;‚è±Ô∏è Timeline Nullable&lt;/h1&gt; &#xA;&lt;p&gt;By utilizing the &lt;strong&gt;Nullable type&lt;/strong&gt; , we can provide new operators that pair with &lt;strong&gt;Timeline&lt;/strong&gt; .&lt;/p&gt; &#xA;&lt;p&gt;Initializing a &lt;strong&gt;Timeline&lt;/strong&gt; with &lt;code&gt;Null&lt;/code&gt; value, the provided function remains unexecuted and waits in a pending state. Once the &lt;strong&gt;Timeline&lt;/strong&gt; value is updated to a non &lt;code&gt;Null&lt;/code&gt; value by a valid event, the function is then triggered and executed.&lt;/p&gt; &#xA;&lt;h2&gt;üîç Functions&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;‚ë† Function to initialize &lt;code&gt;Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;Timeline&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;NullableT&amp;lt;&#39;a&amp;gt; -&amp;gt; Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let timelineNullable = Timeline Null&#xA;&#xA;log timelineNullable.lastVal // use `log` of Timeline&#xA;// Null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Consider this &lt;strong&gt;Timeline&lt;/strong&gt; as an empty &lt;strong&gt;Cell&lt;/strong&gt; in &lt;a href=&#34;https://www.google.com/intl/en/sheets/about/&#34;&gt;spreadsheet apps&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712816212511.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/note.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;üîç Type&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Timeline&lt;/code&gt; type and the function:&lt;/p&gt; &#xA;&lt;p&gt;‚ë† Function to initialize &lt;code&gt;Timeline&amp;lt;&#39;a&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;‚ë† Function to initialize &lt;code&gt;Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;is the &lt;em&gt;same entity&lt;/em&gt; .&lt;/p&gt; &#xA;&lt;p&gt;Consider &lt;code&gt;Timeline&lt;/code&gt; can accept any generic types of &lt;code&gt;&#39;a&lt;/code&gt; including &lt;code&gt;NullableT&amp;lt;&#39;a&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, in the case of &lt;code&gt;Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt;&lt;/code&gt; where the parameter value is a nullable type, if we need the &lt;code&gt;Timeline&lt;/code&gt; behavior to ignore the provided function and simply pass through the &lt;code&gt;Null&lt;/code&gt; value when the parameter is &lt;code&gt;Null&lt;/code&gt; , we can use specific operators as shown below.&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/notefooter.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;‚ë° Functions for the binary operations&lt;/h2&gt; &#xA;&lt;p&gt;$$ TimelineA ~ ~ * ~ ~ Function \quad \rightarrow \quad TimelineB $$&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;mapTN&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;(NullableT&amp;lt;&#39;a&amp;gt; -&amp;gt; NullableT&amp;lt;&#39;b&amp;gt;) -&amp;gt; (Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt; -&amp;gt; Timeline&amp;lt;NullableT&amp;lt;&#39;b&amp;gt;&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;bindTN&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;(NullableT&amp;lt;&#39;a&amp;gt; -&amp;gt;  Timeline&amp;lt;NullableT&amp;lt;&#39;b&amp;gt;&amp;gt;) -&amp;gt; (Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt; -&amp;gt; Timeline&amp;lt;NullableT&amp;lt;&#39;b&amp;gt;&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the binary operator: $*$ is &lt;code&gt;mapT&lt;/code&gt;,&lt;/p&gt; &#xA;&lt;p&gt;$$ TimelineB \quad = \quad TimelineA \quad \triangleright mapTN \quad double $$&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let double =&#xA;    fun a -&amp;gt; NullableT (a * 2)&#xA;&#xA;// ‚ë† initialize timelineA&#xA;let timelineA = Timeline Null&#xA;&#xA;log timelineA.lastVal // use `log` of Timeline&#xA;// Null&#xA;&#xA;// ‚ë° the binary operation&#xA;let timelineB =&#xA;    timelineA |&amp;gt; mapTN double&#xA;// currently, `timelineA = Timeline Null`&#xA;// so, `double` function is ignored&#xA;// and `timelineB` value becomes `Null`&#xA;log timelineB.lastVal // use `log` of Timeline&#xA;// Null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;This code for the binary operation simply corresponds to the basic usage of spreadsheet apps.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712816540787.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The operator behaves similarly to JavaScript&#39;s Promise or its syntactic sugar, async-await.&lt;/p&gt; &#xA;&lt;h2&gt;‚ë¢ Function to update &lt;code&gt;Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;$$TimelineA \quad \triangleright nextTN \quad newNullableValue \quad \rightarrow \quad TimelineA&#39;$$&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;nextTN&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;NullableT&amp;lt;&#39;a&amp;gt; -&amp;gt; Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt; -&amp;gt; Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;$$ TimelineA&#39; \quad = \quad TimelineA \quad \triangleright nextTN \quad newNullableValue $$&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712816212511.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712456400282.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let timelineA&#39; =&#xA;    timelineA |&amp;gt; nextTN (NullableT 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, in most cases, we don‚Äôt need another &lt;code&gt;timelineA&#39;&lt;/code&gt; and want to discard it, so simply &lt;code&gt;ignore&lt;/code&gt; the returned value.&lt;/p&gt; &#xA;&lt;h2&gt;‚ë†‚ë°‚ë¢ action of &lt;code&gt;Timeline&amp;lt;&#39;a&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1712818474514.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The update to &lt;code&gt;timelineA&lt;/code&gt; will trigger a reactive update of &lt;code&gt;timelineB&lt;/code&gt; according to the rule defined by the binary operation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let double =&#xA;    fun a -&amp;gt; NullableT (a * 2)&#xA;&#xA;// ‚ë† initialize timelineA&#xA;let timelineA = Timeline Null&#xA;&#xA;log timelineA.lastVal // use `log` of Timeline&#xA;// Null&#xA;&#xA;// ‚ë° the binary operation&#xA;let timelineB =&#xA;    timelineA |&amp;gt; mapTN double&#xA;// currently, `timelineA = Timeline Null`&#xA;// so, `double` function is ignored&#xA;// and `timelineB` value becomes `Null`&#xA;log timelineB.lastVal // use `log` of Timeline&#xA;// Null&#xA;&#xA;// ‚ë¢ update the lastVal of timelineA&#xA;timelineA&#xA;|&amp;gt; nextTN (NullableT 3)&#xA;|&amp;gt; ignore&#xA;&#xA;log timelineA.lastVal // use `log` of Timeline&#xA;// T 3&#xA;&#xA;// Now, `timelineA` value is updated to non `Null` value&#xA;// Accordingly, `timelineB` reactively becomes `double` of it&#xA;log timelineB.lastVal&#xA;// T 6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module Number&#xA;&#xA;open Browser&#xA;open Browser.Types&#xA;open Fable.Core.JsInterop&#xA;&#xA;open Van.Basic // import tags, add&#xA;open Van.TimelineElement // import Timeline&#xA;open Van.TimelineElementNullable // import Timelinetc.&#xA;open Van.Nullable // import NullableT&#xA;open Van.TimelineElementTask&#xA;&#xA;let h4: Tag = tags?h4&#xA;let fluentCard: Tag = tags?``fluent-card``&#xA;let fluentTextField: Tag = tags?``fluent-text-field``&#xA;&#xA;let Number =&#xA;    fun _ -&amp;gt;&#xA;        let number = Timeline Null&#xA;&#xA;        let numberX2 =&#xA;            number&#xA;            |&amp;gt; mapTN (fun n -&amp;gt; NullableT(n * 2)) //System.Nullable&#xA;&#xA;        fluentCard [&#xA;            {|``class``=&#34;custom1&#34;|}&#xA;&#xA;            h4 [ &#34;Number&#34; ]&#xA;            fluentTextField [&#xA;                {|&#xA;                appearance=&#34;outline&#34;&#xA;                required=true&#xA;                ``type``=&#34;number&#34;&#xA;                placeholder=&#34;1&#34;&#xA;                oninput=&#xA;                    fun e -&amp;gt;&#xA;                        let value =&#xA;                            if e?target?value=&#34;&#34;&#xA;                            then Null&#xA;                            else NullableT e?target?value&#xA;&#xA;                        if value=Null // clear the output textField&#xA;                        then numberX2&#xA;                             |&amp;gt; nextTN Null&#xA;                             |&amp;gt; ignore&#xA;                             document.getElementById(&#34;output-field&#34;)?value&#xA;                                &amp;lt;- &#34;Null&#34; // clear the output textField&#xA;                        else ()&#xA;&#xA;                        number&#xA;                        |&amp;gt; nextTN value&#xA;                        |&amp;gt; ignore&#xA;                |}&#xA;            ]&#xA;&#xA;            h4 [ &#34;Number √ó 2&#34; ]&#xA;            fluentTextField [&#xA;                {|&#xA;                appearance=&#34;outline&#34;&#xA;                readonly=true&#xA;                value=numberX2.el&#xA;                id=&#34;output-field&#34;&#xA;                |}&#xA;            ]&#xA;&#xA;        ]&#xA;&#xA;add [document.body; Number()]&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/wvZNVzJ?editors=1111&#34;&gt;https://codepen.io/kentechgeek/pen/wvZNVzJ?editors=1111&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714047297731.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;timeline-task&lt;/h6&gt; &#xA;&lt;h1&gt;‚è±Ô∏è Timeline Task&lt;/h1&gt; &#xA;&lt;p&gt;While &lt;strong&gt;Timeline Nullable&lt;/strong&gt; operators offer a basic principle similar to JavaScript&#39;s &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt;, they are not capable of managing Task chaining, such as &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&#34;&gt;Promie.then&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Based on &lt;strong&gt;Timeline Nullable&lt;/strong&gt; , we can obtain &lt;strong&gt;Timeline Task&lt;/strong&gt; which is capable of Task chaining.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt; -&amp;gt; &#39;b -&amp;gt; unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt; let task =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task1 started...&#34;&#xA;        log previousResult&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;.......task1 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN (NullableT 1)&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 2000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;taskT&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;Task&amp;lt;&#39;a, NullableT&amp;lt;&#39;a0&amp;gt;&amp;gt; -&amp;gt; Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt; -&amp;gt; Timeline&amp;lt;NullableT&amp;lt;&#39;a&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let timelineStarter =&#xA;    Timeline (NullableT 0)&#xA;    // tasks start immediately&#xA;&#xA;timelineStarter&#xA;|&amp;gt; taskT task1&#xA;|&amp;gt; taskT task2&#xA;|&amp;gt; taskT task3&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;timeline-task-concat&lt;/h6&gt; &#xA;&lt;h1&gt;‚è±Ô∏è Timeline Task Concat&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;taskConcat&lt;/code&gt; or &lt;code&gt;(+&amp;gt;)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;(Task -&amp;gt; Task) -&amp;gt; Task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let task12 =&#xA;    task1 +&amp;gt; task2&#xA;&#xA;let task123 =&#xA;    task1 +&amp;gt; task2 +&amp;gt; task3&#xA;&#xA;let task1234 =&#xA;    task123 +&amp;gt; task4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module Tasks&#xA;&#xA;open Browser&#xA;open Browser.Types&#xA;open Fable.Core.JsInterop&#xA;&#xA;open Van.Basic // import tags, add&#xA;open Van.TimelineElement // import Timeline&#xA;open Van.TimelineElementNullable // import Timelinetc.&#xA;open Van.Nullable // import NullableT&#xA;open Van.TimelineElementTask&#xA;open Van.TimelineElementTaskConcat&#xA;&#xA;open System.Timers&#xA;let setTimeout f delay =&#xA;    let timer = new Timer(float delay)&#xA;    timer.AutoReset &amp;lt;- false&#xA;    timer.Elapsed.Add(fun _ -&amp;gt; f())&#xA;    timer.Start()&#xA;let br: Tag = tags?``br``&#xA;let fluentCard: Tag = tags?``fluent-card``&#xA;let linerProgress: Tag = tags?``md-linear-progress``&#xA;&#xA;let Tasks =&#xA;    fun _ -&amp;gt;&#xA;        let progressInit = false&#xA;        let progressStart = true&#xA;        let progressDone = false&#xA;        let percentInit = 0.0&#xA;        let percentStart = 0.0&#xA;        let percentDone = 1.0&#xA;&#xA;        let timelineProgress1 = Timeline progressInit&#xA;        let timelineProgress2 = Timeline progressInit&#xA;        let timelineProgress3 = Timeline progressInit&#xA;        let timelinePercent1 = Timeline percentInit&#xA;        let timelinePercent2 = Timeline percentInit&#xA;        let timelinePercent3 = Timeline percentInit&#xA;&#xA;        let taskStart =&#xA;            fun timelineProgress timelinePercent -&amp;gt;&#xA;                timelineProgress&#xA;                |&amp;gt; nextT progressStart&#xA;                |&amp;gt; ignore&#xA;                timelinePercent&#xA;                |&amp;gt; nextT percentStart&#xA;                |&amp;gt; ignore&#xA;&#xA;        let taskDone =&#xA;            fun timelineProgress timelinePercent timelineResult-&amp;gt;&#xA;                timelineProgress&#xA;                |&amp;gt; nextT progressDone&#xA;                |&amp;gt; ignore&#xA;                timelinePercent&#xA;                |&amp;gt; nextT percentDone&#xA;                |&amp;gt; ignore&#xA;                timelineResult&#xA;                |&amp;gt; nextTN (NullableT 999)&#xA;                |&amp;gt; ignore&#xA;&#xA;        let task1 =&#xA;            fun timelineResult previousResult -&amp;gt;&#xA;                log &#34;-----------task1 started...&#34;&#xA;                taskStart timelineProgress1 timelinePercent1&#xA;                // delay-------------------------------&#xA;                let f = fun _ -&amp;gt;&#xA;                    log &#34;...task1 done&#34;&#xA;                    taskDone timelineProgress1 timelinePercent1 timelineResult&#xA;                setTimeout f 2500&#xA;&#xA;        let task2 =&#xA;            fun timelineResult previousResult -&amp;gt;&#xA;                log &#34;-----------task2 started...&#34;&#xA;                taskStart timelineProgress2 timelinePercent2&#xA;                // delay-------------------------------&#xA;                let f = fun _ -&amp;gt;&#xA;                    log &#34;...task2 done&#34;&#xA;                    taskDone timelineProgress2 timelinePercent2 timelineResult&#xA;                setTimeout f 2500&#xA;&#xA;        let task3 =&#xA;            fun timelineResult previousResult -&amp;gt;&#xA;                log &#34;-----------task3 started...&#34;&#xA;                taskStart timelineProgress3 timelinePercent3&#xA;                // delay-------------------------------&#xA;                let f = fun _ -&amp;gt;&#xA;                    log &#34;...task3 done&#34;&#xA;                    taskDone timelineProgress3 timelinePercent3 timelineResult&#xA;                setTimeout f 2500&#xA;&#xA;        let timelineStarter = Timeline Null //tasks disabled initially&#xA;&#xA;        let task123 =&#xA;            task1 +&amp;gt;&#xA;            task2 +&amp;gt;&#xA;            task3&#xA;&#xA;        timelineStarter&#xA;        |&amp;gt; taskT task123&#xA;        |&amp;gt; ignore&#xA;&#xA;(* task123 can be written as below&#xA;&#xA;timelineStarter&#xA;|&amp;gt; taskT task1&#xA;|&amp;gt; taskT task2&#xA;|&amp;gt; taskT task3&#xA;|&amp;gt; ignore&#xA;&#xA;*)&#xA;        let start =&#xA;            fun _ -&amp;gt; // timeline will start&#xA;                timelineStarter&#xA;                |&amp;gt; nextTN (NullableT 0)&#xA;                |&amp;gt; ignore&#xA;&#xA;        setTimeout start 2000&#xA;&#xA;        fluentCard [&#xA;            {|``class``=&#34;custom2&#34;|}&#xA;            br []&#xA;            linerProgress [&#xA;                {|indeterminate=timelineProgress1.el&#xA;                  value=timelinePercent1.el|}&#xA;            ]&#xA;            br []&#xA;            linerProgress [&#xA;                {|indeterminate=timelineProgress2.el&#xA;                  value=timelinePercent2.el|}&#xA;            ]&#xA;            br []&#xA;            linerProgress [&#xA;                {|indeterminate=timelineProgress3.el&#xA;                  value=timelinePercent3.el|}&#xA;            ]&#xA;        ]&#xA;&#xA;add [document.body; Tasks()]&#xA;|&amp;gt; ignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/jORdjvy?editors=1111&#34;&gt;https://codepen.io/kentechgeek/pen/jORdjvy?editors=1111&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714045356535.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;It&#39;s also possible to write a &lt;strong&gt;Console app&lt;/strong&gt; without browserUIs.&lt;/p&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module Tasks&#xA;&#xA;open Van.TimelineElement // import Timeline&#xA;open Van.TimelineElementNullable // import Timelinetc.&#xA;open Van.Nullable // import NullableT&#xA;open Van.TimelineElementTask&#xA;open Van.TimelineElementTaskConcat&#xA;&#xA;open System.Timers&#xA;let setTimeout f delay =&#xA;    let timer = new Timer(float delay)&#xA;    timer.AutoReset &amp;lt;- false&#xA;    timer.Elapsed.Add(fun _ -&amp;gt; f())&#xA;    timer.Start()&#xA;&#xA;let nonNull = NullableT true // some non-null value&#xA;&#xA;let task1 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task1 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task1 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN nonNull&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 2500&#xA;&#xA;let task2 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task2 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task2 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN nonNull&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 1000&#xA;&#xA;let task3 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task3 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task3 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN nonNull&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 3000&#xA;&#xA;let timelineStarter = Timeline Null //tasks disabled initially&#xA;&#xA;let task123 =&#xA;    task1 +&amp;gt;&#xA;    task2 +&amp;gt;&#xA;    task3&#xA;&#xA;timelineStarter&#xA;|&amp;gt; taskT task123&#xA;|&amp;gt; ignore&#xA;&#xA;(* task123 can be written as below&#xA;&#xA;timelineStarter&#xA;|&amp;gt; taskT task1&#xA;|&amp;gt; taskT task2&#xA;|&amp;gt; taskT task3&#xA;|&amp;gt; ignore&#xA;&#xA;*)&#xA;&#xA;let start =&#xA;    fun _ -&amp;gt; // timeline will start&#xA;        timelineStarter&#xA;        |&amp;gt; nextTN nonNull&#xA;        |&amp;gt; ignore&#xA;&#xA;setTimeout start 2000&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/BaEeyvL?editors=1111&#34;&gt;https://codepen.io/kentechgeek/pen/BaEeyvL?editors=1111&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714468061916.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;timeline-task-or&lt;/h6&gt; &#xA;&lt;h1&gt;‚è±Ô∏è Timeline Task Or&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;taskOr&lt;/code&gt; or &lt;code&gt;(+|)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;(Task -&amp;gt; Task) -&amp;gt; Task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let task12 =&#xA;    task1 +| task2&#xA;&#xA;let task123 =&#xA;    task1 +| task2 +| task3&#xA;&#xA;let task1234 =&#xA;    task123 +| task4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module TaskOr&#xA;&#xA;open Van.TimelineElement // import Timeline&#xA;open Van.TimelineElementNullable // import Timelinetc.&#xA;open Van.Nullable // import NullableT&#xA;open Van.TimelineElementTask&#xA;open Van.TimelineElementTaskOr&#xA;&#xA;open System.Timers&#xA;let setTimeout f delay =&#xA;    let timer = new Timer(float delay)&#xA;    timer.AutoReset &amp;lt;- false&#xA;    timer.Elapsed.Add(fun _ -&amp;gt; f())&#xA;    timer.Start()&#xA;&#xA;let nonNull = NullableT true&#xA;&#xA;let task1 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task1 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task1 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN (NullableT &#34;task1&#34;)&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 2500&#xA;&#xA;let task2 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task2 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task2 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN (NullableT &#34;task2&#34;)&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 1000&#xA;&#xA;let task3 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task3 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task3 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN (NullableT &#34;task3&#34;)&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 3000&#xA;&#xA;let timelineStarter = Timeline Null //tasks disabled initially&#xA;&#xA;let task123 =&#xA;    task1 +| task2 +| task3&#xA;&#xA;let taskOutput =&#xA;    fun timelineResult (previousResult: NullableT&amp;lt;string&amp;gt;)&#xA;        -&amp;gt;  log (&#34;The fastest result from: &#34;&#xA;                + previousResult.Value)&#xA;&#xA;timelineStarter&#xA;|&amp;gt; taskT task123 // Run all tasks then return the fastest result &#xA;|&amp;gt; taskT taskOutput  // log the fastest result &#xA;|&amp;gt; ignore&#xA;&#xA;let start =&#xA;    fun _ -&amp;gt; // timeline will start&#xA;        timelineStarter&#xA;        |&amp;gt; nextTN nonNull&#xA;        |&amp;gt; ignore&#xA;&#xA;setTimeout start 2000&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/zYXQGwQ?editors=1111&#34;&gt;https://codepen.io/kentechgeek/pen/zYXQGwQ?editors=1111&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714470766342.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/separator.svg?sanitize=true&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#vanfs&#34;&gt;üç¶ &lt;strong&gt;VanFS&lt;/strong&gt; &lt;/a&gt; &lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-why.md&#34;&gt;&lt;sub&gt;üì± Versatility of Web Technology &lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for Cross-Platform App Development&lt;sub&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#getting-started&#34;&gt;üöÄ Getting Started&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#web-components&#34;&gt;üåê Web Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#frp&#34;&gt;‚ö°Ô∏è Functional Reactive Programming (FRP)&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisFP.md&#34;&gt;&lt;sub&gt;üí° What is Functional Programming?&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-howFP.md&#34;&gt;&lt;sub&gt;üí° How does Functional Programming Code Drive?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline&#34;&gt;‚è±Ô∏è Timeline&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#nullable&#34;&gt;‚è±Ô∏è Nullable Types&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/README-whatisNull.md&#34;&gt;&lt;sub&gt;üí° What is Null, Nullable and Option Types?&lt;/sub&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-nullable&#34;&gt;‚è±Ô∏è Timeline Nullable&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task&#34;&gt;‚è±Ô∏è Timeline Task&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-concat&#34;&gt;‚è±Ô∏è Timeline Task Concat&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-or&#34;&gt;‚è±Ô∏è Timeline Task Or&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ken-okabe/vanfs/main/#timeline-task-and&#34;&gt;‚è±Ô∏è Timeline Task And&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ken-okabe/vanfs/discussions&#34;&gt;üí¨ Discussions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;timeline-task-and&lt;/h6&gt; &#xA;&lt;h1&gt;‚è±Ô∏è Timeline Task And&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;taskAnd&lt;/code&gt; or &lt;code&gt;(+&amp;amp;)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;(Task -&amp;gt; Task) -&amp;gt; Task&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let task12 =&#xA;    task1 +&amp;amp; task2&#xA;&#xA;let task123 =&#xA;    task1 +&amp;amp; task2 +&amp;amp; task3&#xA;&#xA;let task1234 =&#xA;    task123 +&amp;amp; task4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Program.fs&lt;/h4&gt; &#xA;&lt;img width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images/main/fsharp.svg?sanitize=true&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;module TaskAnd&#xA;&#xA;open Van.TimelineElement // import Timeline&#xA;open Van.TimelineElementNullable // import Timelinetc.&#xA;open Van.Nullable // import NullableT&#xA;open Van.TimelineElementTask&#xA;open Van.TimelineElementTaskAnd&#xA;&#xA;open System.Timers&#xA;let setTimeout f delay =&#xA;    let timer = new Timer(float delay)&#xA;    timer.AutoReset &amp;lt;- false&#xA;    timer.Elapsed.Add(fun _ -&amp;gt; f())&#xA;    timer.Start()&#xA;&#xA;let nonNull = NullableT true&#xA;&#xA;let task1 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task1 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task1 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN (NullableT &#34;task1&#34;)&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 2500&#xA;&#xA;let task2 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task2 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task2 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN (NullableT &#34;task2&#34;)&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 1000&#xA;&#xA;let task3 =&#xA;    fun timelineResult previousResult -&amp;gt;&#xA;        log &#34;-----------task3 started...&#34;&#xA;        // delay-------------------------------&#xA;        let f = fun _ -&amp;gt;&#xA;            log &#34;...task3 done&#34;&#xA;            timelineResult&#xA;            |&amp;gt; nextTN (NullableT &#34;task3&#34;)&#xA;            |&amp;gt; ignore&#xA;        setTimeout f 3000&#xA;&#xA;let timelineStarter = Timeline Null //tasks disabled initially&#xA;&#xA;let task123 =&#xA;    task1 +&amp;amp; task2 +&amp;amp; task3&#xA;&#xA;let taskOutput =&#xA;    fun timelineResult (previousResult: NullableT&amp;lt;ListResult&amp;lt;&#39;a&amp;gt;&amp;gt;)&#xA;        -&amp;gt;  log previousResult.Value.results&#xA;&#xA;timelineStarter&#xA;|&amp;gt; taskT task123 // Run all tasks then return the list of results &#xA;|&amp;gt; taskT taskOutput  // log the list of results &#xA;|&amp;gt; ignore&#xA;&#xA;let start =&#xA;    fun _ -&amp;gt; // timeline will start&#xA;        timelineStarter&#xA;        |&amp;gt; nextTN nonNull&#xA;        |&amp;gt; ignore&#xA;&#xA;setTimeout start 2000&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/kentechgeek/pen/poBmJZq?editors=1111&#34;&gt;https://codepen.io/kentechgeek/pen/poBmJZq?editors=1111&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ken-okabe/web-images4/main/img_1714472322054.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>