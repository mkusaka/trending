<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-02T01:31:10Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/Angara</title>
    <updated>2025-07-02T01:31:10Z</updated>
    <id>tag:github.com,2025-07-02:/microsoft/Angara</id>
    <link href="https://github.com/microsoft/Angara" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Angara: the modelling environment https://www.microsoft.com/en-us/research/project/distribution-modeller&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Angara&lt;/h1&gt; &#xA;&lt;p&gt;A cross-platform framework for composing, evaluating, inspecting and persisting computation experiments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/Angara.Chart</title>
    <updated>2025-07-02T01:31:10Z</updated>
    <id>tag:github.com,2025-07-02:/microsoft/Angara.Chart</id>
    <link href="https://github.com/microsoft/Angara.Chart" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Allows to define and display a chart as a collection of plots such as line, band, markers, heatmap. Supports visualization of uncertain values represented as quantiles.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Angara.Chart&lt;/h1&gt; &#xA;&lt;p&gt;An F# library that allows to define and display a chart as a collection of plots such as line, band, markers, heatmap. Supports visualization of uncertain values represented as quantiles.&lt;/p&gt; &#xA;&lt;p&gt;Also, there is a similar TypeScript component &lt;a href=&#34;https://github.com/predictionmachines/InteractiveDataDisplay/raw/master/ChartViewer.md&#34;&gt;ChartViewer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Samples gallery&lt;/h2&gt; &#xA;&lt;p&gt;Each sample is represented as an F# module containing function &lt;code&gt;samples: unit -&amp;gt; Chart list&lt;/code&gt;. It builds the list of sample charts, so that then all the charts can be rendered using &lt;a href=&#34;https://github.com/Microsoft/Angara&#34;&gt;Angara.Html&lt;/a&gt; library to an html file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;module Program&#xA;&#xA;open Angara.Charting&#xA;&#xA;type SampleCharts = &#xA;    { Lines: Chart list &#xA;    ; Band: Chart list&#xA;    ; Markers: Chart list &#xA;    ; Heatmap: Chart list }&#xA;&#xA;[&amp;lt;EntryPoint&amp;gt;]&#xA;let main argv = &#xA;    let samples = &#xA;        { Lines = Line.samples() &#xA;        ; Band = Band.samples()&#xA;        ; Markers = Markers.samples() &#xA;        ; Heatmap = Heatmap.samples() }&#xA;    Angara.Html.Save &#34;Angara.Chart.SampleGallery.html&#34; samples    &#xA;    0 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Loading data using Angara.Table&lt;/h3&gt; &#xA;&lt;p&gt;All the samples below will use the &lt;code&gt;Data&lt;/code&gt; module to get sample data series. We use &lt;a href=&#34;https://github.com/Microsoft/Angara.Table&#34;&gt;Angara.Table&lt;/a&gt; library to read data from CSV file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;module Data&#xA;&#xA;open Angara.Charting&#xA;&#xA;let wheat = Table.ReadFile(&#34;wheat.csv&#34;)&#xA;let uwheat = Table.ReadFile(&#34;uwheat.csv&#34;)&#xA;let site = Table.ReadFile(&#34;site.csv&#34;)&#xA;let npz = Table.ReadFile(&#34;npz.csv&#34;)&#xA;let grid = Table.ReadFile(&#34;grid.csv&#34;)&#xA;let ugrid = Table.ReadFile(&#34;ugrid.csv&#34;)&#xA;&#xA;let col colName = Tables.ToArray&amp;lt;float[]&amp;gt; colName&#xA;let quantiles prefix table = &#xA;    { median = table |&amp;gt; col (prefix + &#34;_median&#34;)&#xA;      lower68 = table |&amp;gt; col (prefix + &#34;_lb68&#34;)&#xA;      upper68 = table |&amp;gt; col (prefix + &#34;_ub68&#34;)&#xA;      lower95 = table |&amp;gt; col (prefix + &#34;_lb95&#34;)&#xA;      upper95 = table |&amp;gt; col (prefix + &#34;_ub95&#34;) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;module Line&#xA;&#xA;open Angara.Charting&#xA;&#xA;&#xA;let samples() =&#xA;    let t = Data.site |&amp;gt; Data.col &#34;t&#34;&#xA;    let p = Data.site |&amp;gt; Data.col &#34;p&#34;&#xA;    let p_uncertain = Data.npz |&amp;gt; Data.quantiles &#34;p&#34;&#xA;&#xA;    [&#xA;        [ Plot.line(t, p) ] |&amp;gt; Chart.ofList&#xA;&#xA;        [ Plot.line(Array.init 100 (fun i -&amp;gt; let x = float(i)/10.0 in x*x), stroke = &#34;#7F7F7F&#34;, thickness = 3.0) ] |&amp;gt; Chart.ofList&#xA;&#xA;        [ Plot.line(LineX.Values t, LineY.UncertainValues p_uncertain) ] |&amp;gt; Chart.ofList&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Markers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;module Markers&#xA;&#xA;open Angara.Charting&#xA;&#xA;&#xA;let samples() =&#xA;    let lon = Data.wheat |&amp;gt; Data.col &#34;Lon&#34;&#xA;    let lat = Data.wheat |&amp;gt; Data.col &#34;Lat&#34;&#xA;    let wheat = Data.wheat |&amp;gt; Data.col &#34;wheat&#34;&#xA;    let wheat_uncertain = Data.uwheat |&amp;gt; Data.quantiles &#34;w&#34;&#xA;    [&#xA;        [ Plot.markers(lon, lat, displayName = &#34;Lat/lon&#34;) ] |&amp;gt; Chart.ofList&#xA;        &#xA;        [ Plot.markers(lon, lat, &#xA;            color = MarkersColor.Values wheat, colorPalette = &#34;0=Red=Green=Yellow=Blue=10&#34;, &#xA;            shape = MarkersShape.Circle, displayName = &#34;Lat/lon/color&#34;)] |&amp;gt; Chart.ofList&#xA;        &#xA;        [ Plot.markers(lon, lat, &#xA;            color = MarkersColor.Values wheat, colorPalette = &#34;0=Red=Green=Yellow=Blue=10&#34;, &#xA;            size = MarkersSize.Values wheat, sizeRange = (5.0, 25.0),&#xA;            shape = MarkersShape.Diamond, displayName = &#34;Lat/lon/color/size&#34;)] |&amp;gt; Chart.ofList&#xA;        &#xA;        [ Plot.markers(lon, lat, &#xA;            color = MarkersColor.UncertainValues wheat_uncertain,&#xA;            size = MarkersSize.Value 15.0,&#xA;            shape = MarkersShape.Circle, displayName = &#34;uncertain color&#34;)] |&amp;gt; Chart.ofList&#xA;        &#xA;        [ Plot.markers(lon, lat, &#xA;            color = MarkersColor.Values wheat_uncertain.median,&#xA;            size = MarkersSize.UncertainValues wheat_uncertain, sizeRange = (5.0, 25.0),&#xA;            displayName = &#34;uncertain size&#34;)] |&amp;gt; Chart.ofList&#xA;&#xA;        [ Plot.markers(MarkersX.Values lat, MarkersY.UncertainValues wheat_uncertain,&#xA;            displayName = &#34;uncertain y&#34;)] |&amp;gt; Chart.ofList&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Band&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;module Band&#xA;&#xA;open Angara.Charting&#xA;&#xA;&#xA;let samples() =&#xA;    let t = Data.site |&amp;gt; Data.col &#34;t&#34;&#xA;    let p_lb95 = Data.npz |&amp;gt; Data.col &#34;p_lb95&#34;&#xA;    let p_ub95 = Data.npz |&amp;gt; Data.col &#34;p_ub95&#34;&#xA;&#xA;    [&#xA;        [ Plot.band(t, p_lb95, p_ub95) ] |&amp;gt; Chart.ofList&#xA;    ]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Heatmap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-F#&#34;&gt;module Heatmap&#xA;&#xA;open Angara.Charting&#xA;&#xA;&#xA;let samples() =&#xA;    let lon = Data.grid |&amp;gt; Data.col &#34;lon&#34;&#xA;    let lat = Data.grid |&amp;gt; Data.col &#34;lat&#34;&#xA;    let value = Data.grid |&amp;gt; Data.col &#34;value&#34;&#xA;&#xA;    let lon2 = Data.ugrid |&amp;gt; Data.col &#34;lon&#34;&#xA;    let lat2 = Data.ugrid |&amp;gt; Data.col &#34;lat&#34;&#xA;    let value_uncertain = Data.ugrid |&amp;gt; Data.quantiles &#34;value&#34;&#xA;&#xA;    [&#xA;        [ Plot.heatmap(lon, lat, value) ] |&amp;gt; Chart.ofList&#xA;&#xA;        [ Plot.heatmap(lon, lat, value, treatAs = HeatmapTreatAs.Discrete) ] |&amp;gt; Chart.ofList&#xA;&#xA;        [ Plot.heatmap(lon2, lat2, HeatmapValues.TabularUncertainValues value_uncertain, colorPalette = &#34;blue,white,yellow,orange&#34;) ] |&amp;gt; Chart.ofList&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>