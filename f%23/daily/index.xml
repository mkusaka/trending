<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-02T01:32:57Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CSBiology/FSharp.FGL</title>
    <updated>2022-11-02T01:32:57Z</updated>
    <id>tag:github.com,2022-11-02:/CSBiology/FSharp.FGL</id>
    <link href="https://github.com/CSBiology/FSharp.FGL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Functional graph library for F#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FSharp.FGL&lt;/h1&gt; &#xA;&lt;p&gt;FSharp.FGL is intended to be a user friendly functional graph-library written in F#.&lt;/p&gt; &#xA;&lt;p&gt;The library is based on Martin Erwigs &lt;a href=&#34;https://web.engr.oregonstate.edu/~erwig/papers/InductiveGraphs_JFP01.pdf&#34;&gt;Inductive Graph Model&lt;/a&gt;. The implementation itself is based on the &lt;a href=&#34;https://github.com/xyncro/hekate&#34;&gt;Hekate graph library&lt;/a&gt;. The aim of the FSharp.FGL library is to offer a more thorough set of graph related functions, so users focus on usage rather than implementation.&lt;/p&gt; &#xA;&lt;p&gt;The documentation for FSharp.FGL can be found &lt;a href=&#34;https://csbiology.github.io/FSharp.FGL&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fscheck/FsCheck</title>
    <updated>2022-11-02T01:32:57Z</updated>
    <id>tag:github.com,2022-11-02:/fscheck/FsCheck</id>
    <link href="https://github.com/fscheck/FsCheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Random Testing for .NET&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;What is FsCheck?&lt;/h1&gt; &#xA;&lt;p&gt;FsCheck is a tool for testing .NET programs automatically. The programmer provides a specification of the program, in the form of properties which functions, methods or objects should satisfy, and FsCheck then tests that the properties hold in a large number of randomly generated cases. While writing the properties, you are actually writing a testable specification of your program. Specifications are expressed in F#, C# or VB, using combinators defined in the FsCheck library. FsCheck provides combinators to define properties, observe the distribution of test data, and define test data generators. When a property fails, FsCheck automatically displays a minimal counter example.&lt;/p&gt; &#xA;&lt;p&gt;FsCheck is a port of Haskell&#39;s &lt;a href=&#34;http://www.cse.chalmers.se/~rjmh/QuickCheck/&#34;&gt;QuickCheck&lt;/a&gt;. Important parts of the &lt;a href=&#34;https://fscheck.github.io/FsCheck/&#34;&gt;manual&lt;/a&gt; for using FsCheck is almost literally adapted from the QuickCheck &lt;a href=&#34;http://www.cse.chalmers.se/~rjmh/QuickCheck/manual.html&#34;&gt;manual&lt;/a&gt;. Any errors and omissions are entirely my responsibility.&lt;/p&gt; &#xA;&lt;p&gt;Since v0.5, &lt;a href=&#34;https://github.com/rickynils/scalacheck&#34;&gt;scalacheck&lt;/a&gt; has influenced FsCheck as well. Scalacheck is itself a port of QuickCheck to Scala.&lt;/p&gt; &#xA;&lt;p&gt;FsCheck&#39;s generator combinators can be used in any testing framework to easily generate a number of random values for many types, and FsCheck itself integrates nicely with existing unit testing frameworks such as NUnit, xUnit, MSTest and MbUnit.&lt;/p&gt; &#xA;&lt;h1&gt;Releases&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nuget.org/List/Packages/FsCheck&#34;&gt;FsCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nuget.org/List/Packages/FsCheck.Xunit&#34;&gt;FsCheck.Xunit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nuget.org/packages/FsCheck.Nunit/&#34;&gt;FsCheck.Nunit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;FsCheck follows &lt;a href=&#34;http://semver.org/spec/v2.0.0.html&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;, except for the API exposed in &lt;code&gt;FsCheck.Experimental&lt;/code&gt; which is subject to change at any time.&lt;/p&gt; &#xA;&lt;p&gt;All AppVeyor builds are available using the NuGet feed: &lt;a href=&#34;https://ci.appveyor.com/nuget/fscheck&#34;&gt;https://ci.appveyor.com/nuget/fscheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If using Paket, add the source at the top of &lt;code&gt;paket.dependencies&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-paket&#34;&gt;source https://www.nuget.org/api/v2&#xA;source https://ci.appveyor.com/nuget/fscheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the build history for a list of available versions: &lt;a href=&#34;https://ci.appveyor.com/project/kurtschelfthout/fscheck/history&#34;&gt;https://ci.appveyor.com/project/kurtschelfthout/fscheck/history&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are some options for specifying the dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-paket&#34;&gt;nuget FsCheck&#xA;nuget FsCheck prerelease&#xA;nuget FsCheck 2.0.4&#xA;nuget FsCheck 2.0.5-b247&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fscheck.github.io/FsCheck/&#34;&gt;English&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Pull requests very welcome!&lt;/p&gt; &#xA;&lt;p&gt;Check out the issues marked up-for-grabs if you need any inspiration.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s very rare that we reject PRs. Generally, if you intend to make a bigger change, it&#39;s better to open an issue first to discuss.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the project and run build.cmd on Windows or build.sh on Linux/OSX. That should pull in all the dependencies, build and run the tests.&lt;/p&gt; &#xA;&lt;p&gt;For Visual Studio/MonoDevelop/Xamarin Studio/VsCode: open (the folder that contains) FsCheck.sln and start coding.&lt;/p&gt; &#xA;&lt;p&gt;FsCheck uses FAKE, run &lt;code&gt;build.[cmd|sh] -t &amp;lt;Target&amp;gt;&lt;/code&gt; to do something. Important targets are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Build&lt;/code&gt;: cleanly builds all platforms in Release mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Tests&lt;/code&gt;: builds and runs the tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Docs&lt;/code&gt;: builds and generates documentation. FsCheck uses FSharp.Formatting, so literate fsx files in the docs folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WatchDocs&lt;/code&gt;: convenient when developing documentation - starts a local webserver and watches for changes in the docs folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PacketPack&lt;/code&gt;: Creates NuGet packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CI&lt;/code&gt;: Target that is run on AppVeyor, basically all of the above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CI&lt;/h2&gt; &#xA;&lt;p&gt;AppVeyor &lt;a href=&#34;https://ci.appveyor.com/project/kurtschelfthout/fscheck&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/7ytaslpgxxtw7036/branch/master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>