<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:35:38Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aardvark-platform/aardvark.rendering</title>
    <updated>2023-06-24T01:35:38Z</updated>
    <id>tag:github.com,2023-06-24:/aardvark-platform/aardvark.rendering</id>
    <link href="https://github.com/aardvark-platform/aardvark.rendering" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The dependency-aware, high-performance aardvark rendering engine. This repo is part of aardvark - an open-source platform for visual computing, real-time graphics and visualization.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/aardvark-platform/aardvark.rendering/workflows/Windows/badge.svg?sanitize=true&#34; alt=&#34;Windows&#34;&gt; &lt;img src=&#34;https://github.com/aardvark-platform/aardvark.rendering/workflows/MacOS/badge.svg?sanitize=true&#34; alt=&#34;MacOS&#34;&gt; &lt;img src=&#34;https://github.com/aardvark-platform/aardvark.rendering/workflows/Linux/badge.svg?sanitize=true&#34; alt=&#34;Linux&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/UyecnhM&#34;&gt;&lt;img src=&#34;https://badgen.net/discord/online-members/UyecnhM&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aardvark-platform/aardvark.rendering/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/aardvark-platform/aardvark.rendering.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aardvarkians.com/&#34;&gt;The Aardvark Platform&lt;/a&gt; | &lt;a href=&#34;https://github.com/aardvarkplatform/aardvark.docs/wiki&#34;&gt;Platform Wiki&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/aardvark-platform/aardvark.rendering/master/%2Fsrc%2FExamples%20(netcore)&#34;&gt;aardvark.rendering Examples&lt;/a&gt; | &lt;a href=&#34;https://github.com/aardvark-platform/walkthrough&#34;&gt;Technical Walkthrough and Examples&lt;/a&gt; | &lt;a href=&#34;https://github.com/aardvark-platform/aardvark.docs/wiki/Examples&#34;&gt;Platform Examples&lt;/a&gt; | &lt;a href=&#34;https://github.com/aardvarkplatform/aardvark.docs/wiki/Gallery&#34;&gt;Gallery&lt;/a&gt; | &lt;a href=&#34;https://github.com/aardvarkplatform/aardvark.docs/wiki/Quickstart-Windows&#34;&gt;Quickstart&lt;/a&gt; | &lt;a href=&#34;https://github.com/aardvarkplatform/aardvark.docs/wiki/Status&#34;&gt;Status&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Aardvark.Rendering is part of the open-source &lt;a href=&#34;https://github.com/aardvark-platform/aardvark.docs/wiki&#34;&gt;Aardvark platform&lt;/a&gt; for visual computing, real-time graphics and visualization. This repository heavily builds on datastructures and tools from &lt;a href=&#34;https://github.com/aardvark-platform/aardvark.base&#34;&gt;aardvark.base&lt;/a&gt;. The engine can be used standalone or using &lt;a href=&#34;https://github.com/aardvark-platform/aardvark.media&#34;&gt;aardvark.media&lt;/a&gt; which provides purely functional ELM style application abstraction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aardvark-platform/aardvark.rendering/master/data/context.svg?sanitize=true&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The aardvark rendering engine was the vital spark which finally led to the complete ecosystem of libraries, we now call aardvark-platform. The engine as such was born in 2006. At that time, the engine was written mostly in C# (which was rather unusual in a world of highly optimized C++ engines). Later we more and more moved towards functional programming. In various rewrites we modernized the engine over and over again. Now most code is written in F#. The unique features of the engine are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The engine tries to bridge the gap between &lt;em&gt;efficiency&lt;/em&gt; and &lt;em&gt;high-level easy to use abstractions&lt;/em&gt;. We used a lot of energy to get out good performance for a lot cases. We did a lot but we look forward to getting better and better in this regard. &lt;a href=&#34;https://www.youtube.com/watch?v=QjVRJworUOw&#34;&gt;This video&lt;/a&gt; demonstrates the rapid prototyping features of aardvark.&lt;/li&gt; &#xA; &lt;li&gt;It is used in applied research and industry but it is also used as vehicle for basic research.&lt;/li&gt; &#xA; &lt;li&gt;The engine heavily embraces &lt;em&gt;incremental computation&lt;/em&gt;. Rendering engines typically use some form of scene description which is then interpreted by the rendering kernel. The interpretation of large scenes quickly becomes a &lt;a href=&#34;https://www.cg.tuwien.ac.at/courses/RendEng/2015/RendEng-2015-11-16-paper2.pdf&#34;&gt;bottleneck&lt;/a&gt;. Aardvark by contrast tracks all changes in the scene description and automatically updates affected parts in the &lt;em&gt;incrementally maintained optimization datstructures&lt;/em&gt;. The approach was published in a paper &lt;a href=&#34;https://www.vrvis.at/publications/pdfs/PB-VRVis-2015-015.pdf&#34;&gt;An Incremental Rendering VM&lt;/a&gt;. The scene graph concept and implementation is published in the paper &lt;a href=&#34;https://www.vrvis.at/publications/pdfs/PB-VRVis-2019-004.pdf&#34;&gt;Attribute Grammars for Incremental Scene Graph Rendering&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The engine currently has two backends: OpenGL and Vulkan, runs on netstandard and is basically platform independent&lt;/li&gt; &#xA; &lt;li&gt;Not like classic rendering engines, the aardvark rendering engine does not provide any tooling such as level editors etc. but lives from the aardvark platform as whole which provides tools to &lt;em&gt;create customized tooling for various needs&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Aardvark does not understand light, shadows or particular material workflows as in most game engines. Instead, the codebase provides a &lt;em&gt;rich set of tools&lt;/em&gt; to customize those features to fit the needs.&lt;/li&gt; &#xA; &lt;li&gt;For application and UI programming we recommend to climb the abstraction ladder up towards &lt;a href=&#34;https://github.com/aardvark-platform/aardvark.media&#34;&gt;aardvark.media&lt;/a&gt; which provides easy-to-use ELM style API to both UI and high-performance computer graphics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are constantly looking for cool contributions ideas etc! Meet us on &lt;a href=&#34;https://discord.gg/UyecnhM&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To list some, the most important &lt;a href=&#34;https://www.nuget.org/packages?q=aardvark.Rendering.*&#34;&gt;packages found on nuget&lt;/a&gt; are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aardvark.Rendering&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Rendering.GL&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Rendering.Vulkan&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.SceneGraph&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.WPF.GL&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.WPF&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.WinForms.GL&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.WinForms.Vulkan&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.WinForms&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.GPGPU&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.OpenVR&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.Slim&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.Slim.GL&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Application.Slim.Vulkan&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.Rendering.Text&lt;/li&gt; &#xA; &lt;li&gt;Aardvark.SceneGraph.IO&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>demystifyfp/FsConfig</title>
    <updated>2023-06-24T01:35:38Z</updated>
    <id>tag:github.com,2023-06-24:/demystifyfp/FsConfig</id>
    <link href="https://github.com/demystifyfp/FsConfig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FsConfig is a F# library for reading configuration data from environment variables and AppSettings with type safety.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FsConfig&lt;/h1&gt; &#xA;&lt;p&gt;FsConfig is a F# library for reading configuration data from environment variables and AppSettings with type safety&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.nuget.org/packages/FsConfig&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/dt/FsConfig.svg?sanitize=true&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/demystifyfp/FsConfig/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/demystifyfp/FsConfig/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build master&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why FsConfig?&lt;/h2&gt; &#xA;&lt;p&gt;To understand FsConfig, let&#39;s have a look at an use case from the &lt;a href=&#34;https://github.com/demystifyfp/FsTweet&#34;&gt;FsTweet&lt;/a&gt; application.&lt;/p&gt; &#xA;&lt;p&gt;The FsTweet application follows &lt;a href=&#34;https://12factor.net/config&#34;&gt;The Twelve-Factor App&lt;/a&gt; guideline for managing the configuration data. During the application bootstrap, it retrieves its ten configuration parameters from their respective environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open System&#xA;&#xA;let main argv =&#xA;&#xA;  let fsTweetConnString = &#xA;   Environment.GetEnvironmentVariable  &#34;FSTWEET_DB_CONN_STRING&#34;&#xA;&#xA;  let serverToken =&#xA;    Environment.GetEnvironmentVariable &#34;FSTWEET_POSTMARK_SERVER_TOKEN&#34;&#xA;&#xA;  let senderEmailAddress =&#xA;    Environment.GetEnvironmentVariable &#34;FSTWEET_SENDER_EMAIL_ADDRESS&#34;&#xA;&#xA;  let env = &#xA;    Environment.GetEnvironmentVariable &#34;FSTWEET_ENVIRONMENT&#34;&#xA;&#xA;  let streamConfig : GetStream.Config = {&#xA;      ApiKey = &#xA;        Environment.GetEnvironmentVariable &#34;FSTWEET_STREAM_KEY&#34;&#xA;      ApiSecret = &#xA;        Environment.GetEnvironmentVariable &#34;FSTWEET_STREAM_SECRET&#34;&#xA;      AppId = &#xA;        Environment.GetEnvironmentVariable &#34;FSTWEET_STREAM_APP_ID&#34;&#xA;  }&#xA;&#xA;  let serverKey = &#xA;    Environment.GetEnvironmentVariable &#34;FSTWEET_SERVER_KEY&#34;&#xA;&#xA;  let port = &#xA;    Environment.GetEnvironmentVariable &#34;PORT&#34; |&amp;gt; uint16&#xA;&#xA;  // ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Though the code snippet does the job, there are some shortcomings.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The code is verbose.&lt;/li&gt; &#xA; &lt;li&gt;There is no error handling to deal with the absence of values or wrong values.&lt;/li&gt; &#xA; &lt;li&gt;Explicit type casting&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;With the help of FsConfig, we can overcome these limitations by specifying the configuration data as a F# Record type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type StreamConfig = {&#xA;  Key : string&#xA;  Secret : string&#xA;  AppId : string&#xA;}&#xA;&#xA;[&amp;lt;Convention(&#34;FSTWEET&#34;)&amp;gt;]&#xA;type Config = {&#xA;&#xA;  DbConnString : string&#xA;  PostmarkServerToken : string&#xA;  SenderEmailAddress : string&#xA;  ServerKey : string&#xA;  Environment : string&#xA;&#xA;  [&amp;lt;CustomName(&#34;PORT&#34;)&amp;gt;]&#xA;  Port : uint16&#xA;  Stream : StreamConfig&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then read all the associated environment variables in a single function call with type safety and error handling!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let main argv =&#xA;&#xA;  let config = &#xA;    match EnvConfig.Get&amp;lt;Config&amp;gt;() with&#xA;    | Ok config -&amp;gt; config&#xA;    | Error error -&amp;gt; &#xA;      match error with&#xA;      | NotFound envVarName -&amp;gt; &#xA;        failwithf &#34;Environment variable %s not found&#34; envVarName&#xA;      | BadValue (envVarName, value) -&amp;gt;&#xA;        failwithf &#34;Environment variable %s has invalid value %s&#34; envVarName value&#xA;      | NotSupported msg -&amp;gt; &#xA;        failwith msg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Data Types&lt;/h2&gt; &#xA;&lt;p&gt;FsConfig supports the following data types and leverages their respective &lt;code&gt;TryParse&lt;/code&gt; function to do the type conversion.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;SByte&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Single&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Decimal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Char&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimeSpan&lt;/code&gt;, &lt;code&gt;DateTimeOffset&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Guid&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list&lt;/code&gt; of all the above types&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;option&lt;/code&gt; of all the above types&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Option Type&lt;/h3&gt; &#xA;&lt;p&gt;FsConfig allows us to specify optional configuration parameters using the &lt;code&gt;option&lt;/code&gt; type. In the previous example, if the configuration parameter &lt;code&gt;Port&lt;/code&gt; is optional, we can define it like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;type Config = {&#xA;   ...&#xA;-  Port : uint16&#xA;+  Port : uint16 option&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discriminated Union Type&lt;/h3&gt; &#xA;&lt;p&gt;FsConfig supports Discriminated Union Types that has cases alone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;type Color =&#xA;| Red&#xA;| Green&#xA;| Blue &#xA;&#xA;type Config = {&#xA;  ConsoleColor : Color&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With this configuration declaration, FsConfig read the environment variable &lt;code&gt;CONSOLE_COLOR&lt;/code&gt; and populates the &lt;code&gt;ConsoleColor&lt;/code&gt; field of type &lt;code&gt;Color&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;List of Discriminated Union Types also supported!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;List Type&lt;/h3&gt; &#xA;&lt;p&gt;FsConfig also supports &lt;code&gt;list&lt;/code&gt; type, and it expects comma separated individual values.&lt;/p&gt; &#xA;&lt;p&gt;For example, to get mulitple ports, we can define the config as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Config = {&#xA;  Port : uint16 list&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then pass the value &lt;code&gt;8084,8085,8080&lt;/code&gt; using the environment variable &lt;code&gt;PORT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The default separator for the list can be changed if needed using the &lt;code&gt;ListSeparator&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;  [&amp;lt;Convention(&#34;MYENV&#34;)&amp;gt;]&#xA;  type CustomListSeparatorSampleConfig = {&#xA;    ProcessNames : string list&#xA;    [&amp;lt;ListSeparator(&#39;;&#39;)&amp;gt;]&#xA;    ProcessIds : uint16 list&#xA;    [&amp;lt;ListSeparator(&#39;|&#39;)&amp;gt;]&#xA;    PipedFlow : int list    &#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With this configuration declaration, FSConfig would be able to read the following entries from App.settings.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;  &amp;lt;add key=&#34;MYENVProcessNames&#34; value=&#34;conhost.exe,gitter.exe&#34;/&amp;gt;&#xA;  &amp;lt;add key=&#34;MYENVProcessIds&#34; value=&#34;4700;15680&#34;/&amp;gt;&#xA;  &amp;lt;add key=&#34;MYENVPipedFlow&#34; value=&#34;4700|15680|-1&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A definition similar to the one shown below will allow parsing of standalone lists.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;  type IntListUsingSemiColonsConfig = {&#xA;    [&amp;lt;ListSeparator(&#39;;&#39;)&amp;gt;]&#xA;    IntListUp : int list&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;E.g. an environment containing&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;INT_LIST_UP=42;43;44 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Record Type&lt;/h3&gt; &#xA;&lt;p&gt;As shown in the initial example, FsConfig allows us to group similar configuration into a record type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type AwsConfig = {&#xA;  AccessKeyId : string&#xA;  DefaultRegion : string&#xA;  SecretAccessKey : string&#xA;}&#xA;&#xA;type Config = {&#xA;  Aws : AwsConfig&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;With this configuration declaration, FsConfig read the environment variables &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;, &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;, and &lt;code&gt;AWS_DEFAULT_REGION&lt;/code&gt; and populates the &lt;code&gt;Aws&lt;/code&gt; field of type &lt;code&gt;AwsConfig&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Default Value&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to use a default value in the absence of a field value, you can make use of the &lt;code&gt;DefaultValue&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Config = {&#xA;  [&amp;lt;DefaultValue(&#34;8080&#34;)&amp;gt;]&#xA;  HttpServerPort : int16&#xA;  [&amp;lt;DefaultValue(&#34;Server=localhost;Port=5432;Database=FsTweet;User Id=postgres;Password=test;&#34;)&amp;gt;]&#xA;  DbConnectionString: string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Variable Name Convention &amp;amp; Customization&lt;/h2&gt; &#xA;&lt;p&gt;By default, FsConfig follows Underscores with uppercase convention, as in &lt;code&gt;UPPER_CASE&lt;/code&gt;, for deriving the environment variable name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Config = {&#xA;  ServerKey : string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Using this configuration declaration, FsConfig read the environment variable &lt;code&gt;SERVER_KEY&lt;/code&gt; and populates the &lt;code&gt;ServerKey&lt;/code&gt; field&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To specify a custom prefix in the environment variables, we can make use of the &lt;code&gt;Convention&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;[&amp;lt;Convention(&#34;FSTWEET&#34;)&amp;gt;]&#xA;type Config = {&#xA;  ServerKey : string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For this configuration declaration, FsConfig read the environment variable &lt;code&gt;FSTWEET_SERVER_KEY&lt;/code&gt; and populates the &lt;code&gt;ServerKey&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We can also override the separator character &lt;code&gt;_&lt;/code&gt; using the &lt;code&gt;Convention&lt;/code&gt; attribute&#39;s optional field &lt;code&gt;Separator&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;[&amp;lt;Convention(&#34;FSTWEET&#34;, Separator=&#34;-&#34;)&amp;gt;]&#xA;type Config = {&#xA;  ServerKey : string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In this case, FsConfig derives the environment variable name as &lt;code&gt;FSTWEET-SERVER-KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If an environment variable name is not following a convention, we can override the environment variable name at the field level using the &lt;code&gt;CustomName&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type Config = {&#xA;  [&amp;lt;CustomName(&#34;MY_SERVER_KEY&#34;)&amp;gt;]&#xA;  ServerKey : string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Here, FsConfig uses the environment variable name &lt;code&gt;MY_SERVER_KEY&lt;/code&gt; to get the ServerKey.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We can also merely customise (or control) the environment variable name generation by passing an higher-order function while calling the &lt;code&gt;Get&lt;/code&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FsConfig&#xA;&#xA;// Prefix -&amp;gt; string -&amp;gt; string&#xA;let lowerCaseConfigNameCanonicalizer (Prefix prefix) (name : string) = &#xA;  let lowerCaseName = name.ToLowerInvariant()&#xA;  if String.IsNullOrEmpty prefix then &#xA;    name.ToLowerInvariant()&#xA;  else&#xA;    sprintf &#34;%s-%s&#34; (prefix.ToLowerInvariant()) lowerCaseName&#xA;&#xA;&#xA;[&amp;lt;Convention(&#34;FSTWEET&#34;)&amp;gt;]&#xA;type Config = {&#xA;  ServerKey : string&#xA;}&#xA;&#xA;let main argv =&#xA;  let config = &#xA;    match EnvConfig.Get&amp;lt;Config&amp;gt; lowerCaseConfigNameCanonicalizer with&#xA;    | Ok config -&amp;gt; config&#xA;    | Error error -&amp;gt; failwithf &#34;Error : %A&#34; error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;FsConfig computes the environment variable name as &lt;code&gt;fstweet-server-key&lt;/code&gt; in this scenario.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Individual Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;FsConfig also supports reading value directly by explicitly specifying the environment variable name&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;EnvConfig.Get&amp;lt;decimal&amp;gt; &#34;MY_APP_INITIAL_BALANCE&#34; // Result&amp;lt;decimal, ConfigParseError&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;App Config&lt;/h2&gt; &#xA;&lt;p&gt;FsConfig supports App Config for both DotNet Core and Non DotNet Core Applications.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/demystifyfp/FsConfig/master/#dotnet-core-configuration-supported-from-v200-or-above&#34;&gt;DotNet Core Applications&lt;/a&gt; (Supported from V2.0.0 or above)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/demystifyfp/FsConfig/master/#appsettings-only-supported-in-v006-or-below&#34;&gt;Non DotNet Core Applications&lt;/a&gt; (Only Supported in V0.0.6 or below)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;DotNet Core Configuration (Supported from V2.0.0 or above)&lt;/h3&gt; &#xA;&lt;p&gt;FsConfig abstracts the configuration provider by depending on &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.iconfigurationroot&#34;&gt;IConfigurationRoot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let configurationRoot : IConfigurationRoot = // ...&#xA;let appConfig = new AppConfig(configurationRoot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After creating an instance &lt;code&gt;appConfig&lt;/code&gt; (of type &lt;code&gt;AppConfig&lt;/code&gt; from FsConfig), you can use it to read the configuration values as below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Reading Primitive&#xA;let result = &#xA;  appConfig.Get&amp;lt;int&amp;gt; &#34;processId&#34; // Result&amp;lt;int, ConfigParseError&amp;gt;&#xA;&#xA;// A Sample Record&#xA;type SampleConfig = {&#xA;  ProcessId : int&#xA;  ProcessName : string&#xA;}&#xA;&#xA;// Reading a Record type&#xA;let result = &#xA;  appConfig.Get&amp;lt;SampleConfig&amp;gt; () // Result&amp;lt;SampleConfig, ConfigParseError&amp;gt;&#xA;&#xA;// A Sample Nested Record&#xA;type AwsConfig = {&#xA;  AccessKeyId : string&#xA;  DefaultRegion : string&#xA;  SecretAccessKey : string&#xA;}&#xA;&#xA;type Config = {&#xA;  MagicNumber : int&#xA;  Aws : AwsConfig&#xA;}&#xA;&#xA;// Reading a Nested Record type&#xA;let result = &#xA;  appConfig.Get&amp;lt;Config&amp;gt; () // Result&amp;lt;Config, ConfigParseError&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer below for creating &lt;code&gt;configurationRoot&lt;/code&gt; based on the file type and using FsConfig to read the values.&lt;/p&gt; &#xA;&lt;h4&gt;JSON&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;processId&#34; : &#34;123&#34;,&#xA;  &#34;processName&#34; : &#34;FsConfig&#34;,&#xA;  &#34;magicNumber&#34; : 42,&#xA;  &#34;aws&#34; : {&#xA;    &#34;accessKeyId&#34; : &#34;Id-123&#34;,&#xA;    &#34;defaultRegion&#34; : &#34;us-east-1&#34;,&#xA;    &#34;secretAccessKey&#34; : &#34;secret123&#34;&#xA;  },&#xA;  &#34;colors&#34; : &#34;Red,Green&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This JSON file can be read using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Requires NuGet package&#xA;// Microsoft.Extensions.Configuration.Json&#xA;let configurationRoot =  &#xA;  ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())&#xA;    .AddJsonFile(&#34;settings.json&#34;).Build()&#xA;&#xA;let appConfig = new AppConfig(configurationRoot)&#xA;let result = &#xA;  appConfig.Get&amp;lt;Config&amp;gt; () // Result&amp;lt;Config, ConfigParseError&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;XML&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;Settings&amp;gt;&#xA;  &amp;lt;ProcessId&amp;gt;123&amp;lt;/ProcessId&amp;gt;&#xA;  &amp;lt;ProcessName&amp;gt;FsConfig&amp;lt;/ProcessName&amp;gt;&#xA;  &amp;lt;MagicNumber&amp;gt;42&amp;lt;/MagicNumber&amp;gt;&#xA;  &amp;lt;Aws&amp;gt;&#xA;    &amp;lt;AccessKeyId&amp;gt;Id-123&amp;lt;/AccessKeyId&amp;gt;&#xA;    &amp;lt;DefaultRegion&amp;gt;us-east-1&amp;lt;/DefaultRegion&amp;gt;&#xA;    &amp;lt;SecretAccessKey&amp;gt;secret123&amp;lt;/SecretAccessKey&amp;gt;&#xA;  &amp;lt;/Aws&amp;gt;&#xA;  &amp;lt;Colors&amp;gt;Red,Green&amp;lt;/Colors&amp;gt;&#xA;&amp;lt;/Settings&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This XML file can be read using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Requires NuGet package&#xA;// Microsoft.Extensions.Configuration.Xml&#xA;let configurationRoot =  &#xA;  ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())&#xA;    .AddXmlFile(&#34;settings.xml&#34;).Build()&#xA;&#xA;let appConfig = new AppConfig(configurationRoot)&#xA;let result = &#xA;  appConfig.Get&amp;lt;Config&amp;gt; () // Result&amp;lt;Config, ConfigParseError&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;INI&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;ProcessId=123&#xA;ProcessName=FsConfig&#xA;MagicNumber=42&#xA;Colors=Red,Green&#xA;&#xA;[Aws]&#xA;AccessKeyId=Id-123&#xA;DefaultRegion=us-east-1&#xA;SecretAccessKey=secret123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This INI file can be read using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// Requires NuGet package&#xA;// Microsoft.Extensions.Configuration.Ini&#xA;let configurationRoot =  &#xA;  ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())&#xA;    .AddIniFile(&#34;settings.ini&#34;).Build()&#xA;&#xA;let appConfig = new AppConfig(configurationRoot)&#xA;let result = &#xA;  appConfig.Get&amp;lt;Config&amp;gt; () // Result&amp;lt;Config, ConfigParseError&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;appSettings (Only Supported in V0.0.6 or below)&lt;/h3&gt; &#xA;&lt;p&gt;We can read the &lt;code&gt;appSettings&lt;/code&gt; values using the &lt;code&gt;AppConfig&lt;/code&gt; type instead of &lt;code&gt;EnvConfig&lt;/code&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;FsConfig uses the exact name of the field to derive the &lt;code&gt;appSettings&lt;/code&gt; key name and doesn&#39;t use any separator by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;type AwsConfig = {&#xA;  AccessKeyId : string&#xA;  DefaultRegion : string&#xA;  SecretAccessKey : string&#xA;}&#xA;&#xA;type Config = {&#xA;  Port : uint16&#xA;  Aws : AwsConfig&#xA;}&#xA;&#xA;let main argv =&#xA;  let config = &#xA;    match AppConfig.Get&amp;lt;Config&amp;gt;() with&#xA;    | Ok config -&amp;gt; config&#xA;    | Error error -&amp;gt; failwithf &#34;Error : %A&#34; error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The above code snippet looks for &lt;code&gt;appSettings&lt;/code&gt; values with the name &lt;code&gt;Port&lt;/code&gt;, &lt;code&gt;AwsAccessKeyId&lt;/code&gt;, &lt;code&gt;AwsDefaultRegion&lt;/code&gt;, &lt;code&gt;AwsSecretAccessKey&lt;/code&gt; and populates the respective fields.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;All the customisation that we have seen for &lt;code&gt;EnvConfig&lt;/code&gt; is applicable for &lt;code&gt;AppConfig&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;How FsConfig Works&lt;/h2&gt; &#xA;&lt;p&gt;If you are curious to know how FsConfig works and its internals then you might be interested in my blog post, &lt;a href=&#34;https://www.demystifyfp.com/fsharp/blog/generic-programming-made-easy/&#34;&gt;Generic Programming Made Easy&lt;/a&gt; that deep dives into the initial implementation of FsConfig.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We all need people who will give us feedback. That&#39;s how we improve - Bill Gates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Your suggestions/feedback are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The idea of FsConfig is inspired by &lt;a href=&#34;https://twitter.com/kelseyhightower&#34;&gt;Kelsey Hightower&lt;/a&gt;&#39;s golang library &lt;a href=&#34;https://github.com/kelseyhightower/envconfig&#34;&gt;envconfig&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;FsConfig uses &lt;a href=&#34;https://twitter.com/eiriktsarpalis&#34;&gt;Eirik Tsarpalis&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/eiriktsarpalis/TypeShape&#34;&gt;TypeShape&lt;/a&gt; library for generic programming.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer(s)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamizhvendan&#34;&gt;@tamizhvendan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>fslaborg/FSharp.Charting</title>
    <updated>2023-06-24T01:35:38Z</updated>
    <id>tag:github.com,2023-06-24:/fslaborg/FSharp.Charting</id>
    <link href="https://github.com/fslaborg/FSharp.Charting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Charting library suitable for interactive F# scripting&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FSharp.Charting &lt;a href=&#34;https://travis-ci.org/fslaborg/FSharp.Charting&#34;&gt;&lt;img src=&#34;https://travis-ci.org/fslaborg/FSharp.Charting.png&#34; alt=&#34;Travis build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/tpetricek/fsharp-charting/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/enfmk5gpa6f12tu6/branch/master?svg=true&#34; alt=&#34;AppVeyor Build status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;FSharp.Charting&lt;/code&gt; library implements charting suitable for use from F# scripting.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://fslab.org/FSharp.Charting/&#34;&gt;https://fslab.org/FSharp.Charting/&lt;/a&gt; and &lt;a href=&#34;https://fsharp.org/guides/data-science/#charting&#34;&gt;other charting libraries for use with F#&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Library license&lt;/h2&gt; &#xA;&lt;p&gt;The library is available under MIT. For more information see the &lt;a href=&#34;https://github.com/fslaborg/FSharp.Charting/raw/master/LICENSE.md&#34;&gt;License file&lt;/a&gt; in the GitHub repository.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer(s)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dsyme&#34;&gt;@dsyme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpetricek&#34;&gt;@tpetricek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simra&#34;&gt;@simra&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default maintainer account for projects under &#34;fslaborg&#34; is &lt;a href=&#34;https://github.com/fsprojects&#34;&gt;@fsprojects&lt;/a&gt; - F# Community Project Incubation Space (repo management)&lt;/p&gt; &#xA;&lt;h2&gt;Releasing&lt;/h2&gt; &#xA;&lt;p&gt;Release packages using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set APIKEY=...&#xA;..\fsharp\.nuget\NuGet.exe push -source https://nuget.org bin\*.nupkg %APIKEY%&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>