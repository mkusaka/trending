<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:32:38Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>phasetr/AlgorithmsAndDataStructureByFSharp</title>
    <updated>2022-11-20T01:32:38Z</updated>
    <id>tag:github.com,2022-11-20:/phasetr/AlgorithmsAndDataStructureByFSharp</id>
    <link href="https://github.com/phasetr/AlgorithmsAndDataStructureByFSharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;algorithms and data structures by F#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Algorithms and Data Structures by (mainly) the F# language&lt;/h1&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;d like to write codes for algorithms and data structures &lt;strong&gt;by F#&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have many many books for them in &lt;strong&gt;imperative or objective-oriented&lt;/strong&gt; languages, but we have few books in functional languages. We have some famous books in functional languages, but they are difficult to me. And, for some reasons, I&#39;d like to study the themes by F#. Some comments are here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Richard Bird, Pearls of Functional Algorithm Design, written by Haskell: This is very difficult and we meet many unusual themes in it. I&#39;d like to study usual themes. Furthermore it treats only algorithms.&lt;/li&gt; &#xA; &lt;li&gt;Chris Okasaki, Purely Functional Data Structures, written by SML and Haskell: We have only data structure themes in this book, and small amount of them.&lt;/li&gt; &#xA; &lt;li&gt;Masood, Learning F# Functional Data Structures and Algorithms written by F#: The codes in this book is written by imperative style, I think. I&#39;d like to study functional style algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vkostyukov/scalacaster&#34;&gt;vkostrykov, scalacaster&lt;/a&gt; written by Scala: Data structure objects seem to be mutable objects. I&#39;d like to study immutable style.&lt;/li&gt; &#xA; &lt;li&gt;Rabhi and Lapalme, Algorithms A Functional Programming Approach written by Haskell: This looks more algorithms than others.&lt;/li&gt; &#xA; &lt;li&gt;(NEW! 2020) &lt;a href=&#34;https://www.cambridge.org/core/books/algorithm-design-with-haskell/824BE0319E3762CE8BA5B1D91EEA3F52&#34;&gt;Bird, Gibbons, Algorithm Design with Haskell&lt;/a&gt;. Now I reading this book (at 2022/1), and I am rewriting to F#! This book includes data structures, and is relatively easy to read.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hence I decide to write codes by myself.&lt;/p&gt; &#xA;&lt;p&gt;For my study and seminars I also contains programs by several languages other than F#, e.g., C++, Python.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AOJ: Codes for the contests in &lt;a href=&#34;https://judge.u-aizu.ac.jp/onlinejudge/&#34;&gt;AOJ&lt;/a&gt;. This site also contains some fundamental algorithms and data structure codes in the form of problems, and is very good introductory one.&lt;/li&gt; &#xA; &lt;li&gt;AtCoder: Codes for the contests in &lt;a href=&#34;https://atcoder.jp/&#34;&gt;AtCoder&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;DataStructures: Codes for data structures. I added comments for referenced sites, pages, book pages.&lt;/li&gt; &#xA; &lt;li&gt;Book-AlgorithmsAndDataStructuresForProgrammingContests: Codes for &lt;a href=&#34;https://tatsu-zine.com/books/algorithm-and-datastructure&#34;&gt;this book&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Library: Codes for important processes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;I know their names, but I do not read them thoroughly.&lt;/p&gt; &#xA;&lt;h3&gt;F# references&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharp.github.io/fsharp-core-docs&#34;&gt;GitHub: F# Core Library Documentation (community edition)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qiita.com/cannorin/items/59d79cc9a3b64c761cd4&#34;&gt;F# を知ってほしい (in Japanese), by cannorin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fsharp/&#34;&gt;docs.microsoft.com&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/visualfsharpdocs/conceptual/visual-fsharp&#34;&gt;msdn, visual fsharp&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharpforfunandprofit.com/&#34;&gt;F# for fun and profit&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://swlaschin.gitbooks.io/fsharpforfunandprofit/content/&#34;&gt;Gitbook&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/F_Sharp_Programming&#34;&gt;Wikibook: F# Programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/ScottWlaschin/fp-patterns-ndc-london2014&#34;&gt;Functional Programming Patterns&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Descriptions on &#34;Pattern: Chaining callbacks with continuation&#34; from P.85 helps me very much.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Monadic Bind&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/essential-fsharp&#34;&gt;Russel, Essential Functional-First F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;コンピュテーション式 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/dotnet/fsharp/language-reference/computation-expressions&#34;&gt;コンピュテーション式, docs.microsoft.com (in Japanese)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://bleis-tift.hatenablog.com/entry/computation-expression&#34;&gt;詳説コンピュテーション式 (in Japanese)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://qiita.com/7shi/items/2036e7a739c2a9e04025&#34;&gt;F# for Math series by @7shi (in Japanese)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write yourself a scheme in 48 hours &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://write-yourself-a-scheme.pangwa.com&#34;&gt;Using F#&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://lucabolognese.wordpress.com/2011/08/05/write-yourself-a-scheme-in-48-hours-in-f-part-vi/&#34;&gt;Other series&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours/First_Steps&#34;&gt;Haskell Original&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Algorithms and data structures&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vkostyukov/scalacaster&#34;&gt;https://github.com/vkostyukov/scalacaster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rabhi, Lapalme, Algorithms A Functional Programming Approach&lt;/li&gt; &#xA; &lt;li&gt;Heineman, Pollice, Selkow, Algorithms in a Nutshell&lt;/li&gt; &#xA; &lt;li&gt;Richard Bird, Pearls of Functional Algorithm Design&lt;/li&gt; &#xA; &lt;li&gt;Skiena, The Algorithm Design Manual&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/F_Sharp_Programming/Advanced_Data_Structures&#34;&gt;Advanced Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(In Japanese) 紀平拓男、春日伸弥、プログラミングの宝箱 アルゴリズムとデータ構造 第 2 版&lt;/li&gt; &#xA; &lt;li&gt;(In Japanese) 渡部有隆, Ozy(協力), 秋葉 拓哉(協力), プログラミングコンテスト攻略のためのアルゴリズムとデータ構造, &lt;a href=&#34;https://tatsu-zine.com/books/algorithm-and-datastructure&#34;&gt;for buying pdf&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://book.mynavi.jp/support/pc/5295/&#34;&gt;Support site (in Japanese)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://judge.u-aizu.ac.jp/&#34;&gt;AOJ&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://lepensemoi.free.fr/index.php/tag/data-structure&#34;&gt;PENSE-MOI&lt;/a&gt;: This site describes the F# implementation of the algorithms in Chris Okasaki&#39;s &#34;Purely functional data structures&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/natsukium/FsProCon/tree/master/src&#34;&gt;FsProCon, AtCoder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/F_Sharp_Programming/Advanced_Data_Structures&#34;&gt;F# : Advanced Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://opendatastructures.org/&#34;&gt;Open Data Structures&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://sites.google.com/view/open-data-structures-ja&#34;&gt;日本語ページ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/spinute/ods&#34;&gt;日本語ソースコード&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nakanihon.co.jp/gijyutsu/Shimada/Computational%20geometry/index.html&#34;&gt;幾何の計算にコンピュータを使う 易しくない 計算幾何学&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nobsun/ProjectEuler&#34;&gt;nobsun/ProjectEuler&lt;/a&gt; by Haskell&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Python&#34;&gt;TheAlgorithms / Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/drken1215/book_algorithm_solution&#34;&gt;drken1215, book_algorithm_solution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/drken1215/algorithm&#34;&gt;drken1215, algorithm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;F# official&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fsprojects/FSharpx.Collections/tree/master/src/FSharpx.Collections&#34;&gt;FSharpx.collections&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;memo&lt;/h2&gt; &#xA;&lt;h3&gt;Sample codes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phasetr/mathcodes&#34;&gt;mathcodes&lt;/a&gt;: by myself&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Useful pages in fsharpforfunandprofit.com&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharpforfunandprofit.com/posts/elevated-world/&#34;&gt;Understanding map and apply-A toolset for working with elevated worlds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Jargon Alert&lt;/h3&gt; &#xA;&lt;p&gt;From the book Domain Modeling Made Functional by Wlaschin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the error-handling context, the bind function converts a Result-generating function into a two-track function. It’s used to chain Result-generating functions &#34;in series.&#34; More generally, the bind function is a key component of a monad.&lt;/li&gt; &#xA; &lt;li&gt;In the error-handling context, the map function converts a one-track function into a two-track function.&lt;/li&gt; &#xA; &lt;li&gt;The monadic approach to composition refers to combining functions in series using bind.&lt;/li&gt; &#xA; &lt;li&gt;The applicative approach to composition refers to combining results in parallel.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>