<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-25T01:36:19Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nfdi4plants/converters</title>
    <updated>2023-02-25T01:36:19Z</updated>
    <id>tag:github.com,2023-02-25:/nfdi4plants/converters</id>
    <link href="https://github.com/nfdi4plants/converters" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Converters for different endpoint repositories&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ARC Converters&lt;/h1&gt; &#xA;&lt;p&gt;Auto-deployed collection of &lt;a href=&#34;https://github.com/nfdi4plants/ARC-specification&#34;&gt;ARC&lt;/a&gt; converters for converting ARCs to end-point repositories.&lt;/p&gt; &#xA;&lt;h2&gt;General workflow&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Converters in this repository are simple &lt;code&gt;fsx&lt;/code&gt; script files that share a common structure&lt;/li&gt; &#xA; &lt;li&gt;When pushed to the main branch, they get automatically compiled and released&lt;/li&gt; &#xA; &lt;li&gt;Now they are accessible using the &lt;a href=&#34;https://github.com/nfdi4plants/arcCommander&#34;&gt;ArcCommander&lt;/a&gt;, which makes use of the common structure to to run a streamlined conversion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution Guide&lt;/h2&gt; &#xA;&lt;h3&gt;Guidelines&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create issue with background information about the converter you want to add. This also serves as a place for discussion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/fork-a-repo&#34;&gt;Fork&lt;/a&gt; this repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a feature branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;&gt;Clone&lt;/a&gt; your fork-branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nfdi4plants/converters/main/#create-a-converter&#34;&gt;Add/Update&lt;/a&gt; &lt;strong&gt;ONE&lt;/strong&gt; new converter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nfdi4plants/converters/main/#test-a-converter&#34;&gt;Test&lt;/a&gt; your converter locally.&lt;/li&gt; &#xA; &lt;li&gt;Commit, push and &lt;a href=&#34;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork&#34;&gt;sync your branch&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ðŸ‘€ Add your issue id (for example #32) to your commit so it is automatically linked.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open a &lt;a href=&#34;https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests&#34;&gt;pull request&lt;/a&gt; &lt;strong&gt;referencing your issue&lt;/strong&gt;. &lt;span&gt;ðŸŽ‰&lt;/span&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Create a converter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start with adding a file to the &lt;code&gt;converters&lt;/code&gt; folder. It MUST follow the naming scheme &lt;code&gt;arc-convert-&amp;lt;FORMATNAME&amp;gt;.fsx&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Go into the file and add a reference to &lt;code&gt;arcIO.NET&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add a &lt;code&gt;create()&lt;/code&gt; function which has the converter body as return value&lt;/li&gt; &#xA; &lt;li&gt;The converter body must be of type &lt;code&gt;ARCconverter&lt;/code&gt;(located in &lt;code&gt;arcIO.NET.Converter&lt;/code&gt;), selecting the return type you want. Your code could now look like this: &lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;#r &#34;nuget: arcIO.NET, 0.1.0-preview.5&#34; &#xA;#r &#34;nuget: FSharp.Data, 5.0.2&#34;&#xA;&#xA;open ISADotNet&#xA;open ISADotNet.QueryModel&#xA;open ISADotNet.QueryModel.Linq.Spreadsheet&#xA;open arcIO.NET.Converter&#xA;open FsSpreadsheet.DSL&#xA;open FSharp.Data&#xA;&#xA;let create() = ARCconverter.ARCtoXLSX (&#xA;    fun i s a -&amp;gt;&#xA;     &#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; Note, that all converters take a &lt;code&gt;QInvestigation&lt;/code&gt;, a &lt;code&gt;QStudy&lt;/code&gt; and a &lt;code&gt;QAssay&lt;/code&gt; as input. Which &lt;code&gt;study&lt;/code&gt; and &lt;code&gt;assay&lt;/code&gt; are selected to be converted is decided by the &lt;code&gt;ArcCommander&lt;/code&gt; when running the conversion.&lt;/li&gt; &#xA; &lt;li&gt;Now fill out the converter body as you wish, the return type being determined by the format case you specified. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Documentation about the &lt;code&gt;ISADotNet Querymodel&lt;/code&gt; can be found &lt;a href=&#34;https://nfdi4plants.github.io/ISADotNet-docs/docs/linq.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Documentation about the &lt;code&gt;FsSpreadsheet DSL&lt;/code&gt; can be found &lt;a href=&#34;https://github.com/CSBiology/FsSpreadsheet#dsl&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Documentation about the &lt;code&gt;LitXML DSL&lt;/code&gt; can be found &lt;a href=&#34;https://github.com/CSBiology/LitXml#usage&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Test a converter&lt;/h3&gt; &#xA;&lt;p&gt;Lorem ipsum&lt;/p&gt; &#xA;&lt;h3&gt;Run a deployed converter&lt;/h3&gt; &#xA;&lt;p&gt;Released converters can be run by the &lt;a href=&#34;https://github.com/nfdi4plants/arcCommander&#34;&gt;ArcCommander&lt;/a&gt; using the syntax:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;arc convert geo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;code&gt;arc convert --help&lt;/code&gt; for additional info.&lt;/p&gt; &#xA;&lt;h3&gt;Allowed references&lt;/h3&gt; &#xA;&lt;p&gt;Only references to libraries referenced by the &lt;a href=&#34;https://github.com/nfdi4plants/arcCommander&#34;&gt;ArcCommander&lt;/a&gt; are allowed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;#r &#34;nuget: arcIO.NET, 0.1.0-preview.5&#34; &#xA;#r &#34;nuget: FSharp.Data, 5.0.2&#34;&#xA;#r &#34;nuget: LitXml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that &lt;code&gt;arcIO.NET&lt;/code&gt; is always required and already comes packed with all dependencies for using the &lt;code&gt;ISADotNet QueryModel&lt;/code&gt; and parsing to &lt;code&gt;Spreadsheet&lt;/code&gt; based output formats.&lt;/p&gt;</summary>
  </entry>
</feed>