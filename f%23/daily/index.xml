<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-20T01:38:54Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>razzmatazz/csharp-language-server</title>
    <updated>2022-06-20T01:38:54Z</updated>
    <id>tag:github.com,2022-06-20:/razzmatazz/csharp-language-server</id>
    <link href="https://github.com/razzmatazz/csharp-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Roslyn-based LSP language server for C#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This is a hacky Roslyn-based LSP server as an alternative to &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn&#34;&gt;omnisharp-roslyn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp-ls&lt;/code&gt; requires .NET 6 SDK to be installed. However it has been reported to work with projects using older versions of dotnet SDK, including .NET Core 3, .NET Framework 4.8 and possibly older ones too as it uses the standard Roslyn/MSBuild libs that Visual Studio &amp;amp; omnisharp does.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;symbol rename;&lt;/li&gt; &#xA; &lt;li&gt;go-to-definition;&lt;/li&gt; &#xA; &lt;li&gt;find references;&lt;/li&gt; &#xA; &lt;li&gt;document/workspace symbol search;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;textDocument/documentHighlight&lt;/code&gt; support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;highlighting other symbol references in the document on hover;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;codeAction/resolve&lt;/code&gt; support for better performance when invoking code actions;&lt;/li&gt; &#xA; &lt;li&gt;go-to-definition in metadata support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;(needs integration from your LSP client -- &lt;code&gt;emacs-lsp/lsp-mode&lt;/code&gt; has it.).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/razzmatazz/csharp-language-server/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for the list of recent improvements/fixes.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;dotnet tool install --global csharp-ls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.nuget.org/packages/csharp-ls/&#34;&gt;csharp-ls nuget page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;csharp-ls uses LSP interface from &lt;a href=&#34;https://github.com/ionide/LanguageServerProtocol&#34;&gt;Ionide.LanguageServerProtocol&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;csharp-ls uses Roslyn to parse and update code; Roslyn maps really nicely to LSP w/relatively little impedance mismatch;&lt;/li&gt; &#xA; &lt;li&gt;csharp-ls uses &lt;a href=&#34;https://github.com/icsharpcode/ILSpy&#34;&gt;ILSpy/ICSharpCode.Decompiler&lt;/a&gt; to decompile types in assemblies to C# source;&lt;/li&gt; &#xA; &lt;li&gt;csharp-ls is not affiliated with Microsoft Corp.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;TODO list&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support for pull diagnostics (lsp 3.17);&lt;/li&gt; &#xA; &lt;li&gt;support for inlay hints (lsp 3.17);&lt;/li&gt; &#xA; &lt;li&gt;go-to-def in metadata does not work for Attribute as those have Attribute suffix;&lt;/li&gt; &#xA; &lt;li&gt;progress support;&lt;/li&gt; &#xA; &lt;li&gt;properly escape docxml text, e.g. backquote is a special character in markdown;&lt;/li&gt; &#xA; &lt;li&gt;selection range provider&lt;/li&gt; &#xA; &lt;li&gt;semantic tokens&lt;/li&gt; &#xA; &lt;li&gt;ability to run tests / test browser support like fsac has?&lt;/li&gt; &#xA; &lt;li&gt;razorls integration (server-side)&lt;/li&gt; &#xA; &lt;li&gt;analyzer support&lt;/li&gt; &#xA; &lt;li&gt;code generator support&lt;/li&gt; &#xA; &lt;li&gt;vscode plugin&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alan-turing-institute/nowwhat</title>
    <updated>2022-06-20T01:38:54Z</updated>
    <id>tag:github.com,2022-06-20:/alan-turing-institute/nowwhat</id>
    <link href="https://github.com/alan-turing-institute/nowwhat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provide an overview of which projects REG are doing right now, reimagination of whatnow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Now What?&lt;/h1&gt; &#xA;&lt;h2&gt;REG project tracking tool&lt;/h2&gt; &#xA;&lt;p&gt;Reimagination of &lt;a href=&#34;https://github.com/alan-turing-institute/whatnow&#34;&gt;whatnow&lt;/a&gt;, also borrowing from &lt;a href=&#34;https://github.com/alan-turing-institute/whatnext&#34;&gt;whatnext&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;.NET Core 6.0 Runtime and SDK&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For Mac OSX you can run &lt;code&gt;brew install dotnet&lt;/code&gt; (Runtime) and &lt;code&gt;brew install dotnet-sdk&lt;/code&gt; (SDK)&lt;/li&gt; &#xA;   &lt;li&gt;To test your install is working runt &lt;code&gt;dotnet fsi&lt;/code&gt; from the terminal (to quit run &lt;code&gt;#quit;;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;code&gt;dotnet tool restore&lt;/code&gt; and then &lt;code&gt;dotnet paket restore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Git config&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;a href=&#34;https://raw.githubusercontent.com/alan-turing-institute/nowwhat/main/script/dev-setup.sh&#34;&gt;&lt;code&gt;script/dev-setup.sh&lt;/code&gt;&lt;/a&gt; from project root.&lt;/p&gt; &#xA;&lt;h3&gt;App configuration&lt;/h3&gt; &#xA;&lt;p&gt;The app needs the following information to authenticate to the GitHub and Forecast APIs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Github &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token&#34;&gt;personal access token&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The scope you need is &lt;code&gt;repo&lt;/code&gt; (&lt;code&gt;Full control of private repositories&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The Forecast ID for your organisation. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Most easily found by logging into &lt;a href=&#34;https://forecastapp.com/&#34;&gt;Forecast&lt;/a&gt; via web interface and reading number that appears in URL just after server name&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A Forecast personal access token. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Log into &lt;a href=&#34;https://forecastapp.com/&#34;&gt;Forecast&lt;/a&gt;, go to My Profile and then Developers section; there will be an option to obtain a Personal Access Token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Set via config file&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file in &lt;code&gt;~/.config/nowwhat/secrets.json&lt;/code&gt; and add each variable as a top-level JSON field. e.g.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;gitHubToken&#34;: &#34;&amp;lt;NOWWHAT_GITHUB_TOKEN&amp;gt;&#34;,&#xA;  &#34;forecastId&#34;: &#34;&amp;lt;FORECAST_ID&amp;gt;&#34;,&#xA;  &#34;forecastToken&#34;: &#34;&amp;lt;NOWWHAT_FORECAST_TOKEN&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set via environment variables&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@johnjjung/how-to-store-sensitive-environment-variables-on-macos-76bd5ba464f6&#34;&gt;How to store sensitive environment variables on MacOS&lt;/a&gt; may be useful.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NOWWHAT_GITHUB_TOKEN&lt;/code&gt; - GitHub personal access token&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FORECAST_ID&lt;/code&gt; - Forecast organisation ID&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NOWWHAT_FORECAST_TOKEN&lt;/code&gt; - Forecast personal access token&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building and running&lt;/h3&gt; &#xA;&lt;p&gt;To build or run, in the &lt;code&gt;NowWhat&lt;/code&gt; folder run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dotnet build&#xA;dotnet run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/alan-turing-institute/nowwhat/main/Test/README.md&#34;&gt;testing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Writing documentation&lt;/h3&gt; &#xA;&lt;p&gt;See&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsprojects.github.io/FSharp.Formatting/&#34;&gt;&lt;code&gt;FSharp.Formatting&lt;/code&gt;&lt;/a&gt; for the documentation system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/xml-documentation&#34;&gt;XML documentation&lt;/a&gt; for writing docs&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>