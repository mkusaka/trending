<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-19T01:29:14Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ForNeVeR/Generaptor</title>
    <updated>2024-02-19T01:29:14Z</updated>
    <id>tag:github.com,2024-02-19:/ForNeVeR/Generaptor</id>
    <link href="https://github.com/ForNeVeR/Generaptor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub Actions configuration generator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ¦– Generaptor &lt;a href=&#34;https://andivionian.fornever.me/v1/#status-ventis-&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-ventis-yellow.svg?sanitize=true&#34; alt=&#34;Status Ventis&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Generaptor helps you to maintain GitHub actions for your project. It can generate the YAML files, according to the specification defined in your code.&lt;/p&gt; &#xA;&lt;p&gt;Now you can manage your action definitions via NuGet packages, and port the whole workflows between repositories. A bit of strong typing will also help to avoid mistakes!&lt;/p&gt; &#xA;&lt;p&gt;NuGet package links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/Generaptor&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Generaptor?label=Generaptor&#34; alt=&#34;Generaptor&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/Generaptor.Library&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Generaptor.Library?label=Generaptor.Library&#34; alt=&#34;Generaptor.Library&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;Consider this F# program (this is actually used in this very repository):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let mainBranch = &#34;main&#34;&#xA;let images = [&#xA;    &#34;macos-12&#34;&#xA;    &#34;ubuntu-22.04&#34;&#xA;    &#34;windows-2022&#34;&#xA;]&#xA;&#xA;let workflows = [&#xA;    workflow &#34;main&#34; [&#xA;        name &#34;Main&#34;&#xA;        onPushTo mainBranch&#xA;        onPullRequestTo mainBranch&#xA;        onSchedule(day = DayOfWeek.Saturday)&#xA;        onWorkflowDispatch&#xA;        job &#34;main&#34; [&#xA;            checkout&#xA;            yield! dotNetBuildAndTest()&#xA;        ] |&amp;gt; addMatrix images&#xA;    ]&#xA;]&#xA;&#xA;[&amp;lt;EntryPoint&amp;gt;]&#xA;let main(args: string[]): int =&#xA;    EntryPoint.Process args workflows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(See the actual example with all the imports in &lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/Infrastructure/GitHubActions/Program.fs&#34;&gt;the main program file&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;It will generate the following GitHub action configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Main&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - main&#xA;  pull_request:&#xA;    branches:&#xA;      - main&#xA;  schedule:&#xA;    - cron: 0 0 * * 6&#xA;  workflow_dispatch:&#xA;jobs:&#xA;  main:&#xA;    strategy:&#xA;      matrix:&#xA;        image:&#xA;          - macos-12&#xA;          - ubuntu-22.04&#xA;          - windows-2022&#xA;      fail-fast: false&#xA;    runs-on: ${{ matrix.image }}&#xA;    env:&#xA;      DOTNET_CLI_TELEMETRY_OPTOUT: 1&#xA;      DOTNET_NOLOGO: 1&#xA;      NUGET_PACKAGES: ${{ github.workspace }}/.github/nuget-packages&#xA;    steps:&#xA;      - uses: actions/checkout@v4&#xA;      - name: Set up .NET SDK&#xA;        uses: actions/setup-dotnet@v4&#xA;        with:&#xA;          dotnet-version: 8.0.x&#xA;      - name: NuGet cache&#xA;        uses: actions/cache@v4&#xA;        with:&#xA;          key: ${{ runner.os }}.nuget.${{ hashFiles(&#39;**/*.fsproj&#39;) }}&#xA;          path: ${{ env.NUGET_PACKAGES }}&#xA;      - name: Build&#xA;        run: dotnet build&#xA;      - name: Test&#xA;        run: dotnet test&#xA;        timeout-minutes: 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new F# project in your solution. The location doesn&#39;t matter, but we recommend calling it &lt;code&gt;GitHubActions&lt;/code&gt; and put inside the &lt;code&gt;Infrastructure&lt;/code&gt; solution folder, to not mix it with the main code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;code&gt;Generaptor.Library&lt;/code&gt; NuGet package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Call the &lt;code&gt;Generaptor.EntryPoint.Process&lt;/code&gt; method with the arguments passed to the &lt;code&gt;main&lt;/code&gt; function and the list of workflows you want to generate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the program from the repository root folder in your shell, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd &amp;lt;your-repository-root-folder&amp;gt;&#xA;$ dotnet run --project ./Infrastructure/GitHubActions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When called with empty arguments of with command &lt;code&gt;generate&lt;/code&gt;, it will (re-)generate the workflow files in &lt;code&gt;.github/workflows&lt;/code&gt; folder, relatively to the current directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For basic GitHub Action support (workflow and step DSL), see &lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/Generaptor/GitHubActions.fs&#34;&gt;the &lt;code&gt;GitHubActions.fs&lt;/code&gt; file&lt;/a&gt;. The basic actions are in the main &lt;strong&gt;Generaptor&lt;/strong&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;For advanced patterns and action commands ready for use, see &lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/Generaptor.Library/Actions.fs&#34;&gt;Actions&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/Generaptor.Library/Patterns.fs&#34;&gt;Patterns&lt;/a&gt; files. These are in the auxiliary &lt;strong&gt;Generaptor.Library&lt;/strong&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to create your own actions and patterns, and either send a PR to this repository, or publish your own NuGet packages!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/LICENSE.md&#34;&gt;License (MIT)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/MAINTAINERSHIP.md&#34;&gt;Maintainer Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ForNeVeR/Generaptor/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct (adapted from the Contributor Covenant)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>saolsen/pokey-playthings</title>
    <updated>2024-02-19T01:29:14Z</updated>
    <id>tag:github.com,2024-02-19:/saolsen/pokey-playthings</id>
    <link href="https://github.com/saolsen/pokey-playthings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;fsharp experiments&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Pokey Playthings&lt;/h3&gt; &#xA;&lt;p&gt;This is just a collection of fsharp experiments that are too small to make into their own projects. (Well, there&#39;s also the fact that I have no idea how to create an fsharp projects yet)&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m trying to do things on mono with emacs. I&#39;ve installed mono 3 on osx and the emacs fsharp-mode. This lets me open fsharpi, the interpreter, in emacs. That lets me send things from the fsharp buffer to the repl and evaluate things there. That&#39;s step 1 and it works pretty well.&lt;/p&gt; &#xA;&lt;p&gt;#Things I have no idea how to do yet.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up an fsharp project. Every tutorial I see uses visual studio. fsharp-mode supposedly has a way to do all the great intellisense things that visual studio does inside emacs which sounds awesome to me. It needs an fsharp project file which as far as I can tell is just some gross xml thing that&#39;s generated by vs. I&#39;ve heard of FAKE and wonder if that&#39;s just a way to write build scripts or if that has to do with project fileness too.&lt;/li&gt; &#xA; &lt;li&gt;Manage dependencies. I think nuget is what&#39;s suppossed to be used but have no idea how to do so, how to manage them on a project by project basis and how to get them installed in a place that I can use them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The language impresses me, the mono tooling just seems to be crap....&lt;/p&gt;</summary>
  </entry>
</feed>