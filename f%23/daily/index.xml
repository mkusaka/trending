<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:40:20Z</updated>
  <subtitle>Daily Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gearg100/Compilers</title>
    <updated>2022-06-01T01:40:20Z</updated>
    <id>tag:github.com,2022-06-01:/gearg100/Compilers</id>
    <link href="https://github.com/gearg100/Compilers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compilers&#39; Course Project&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>bigby-the-wolf/WebApiTest</title>
    <updated>2022-06-01T01:40:20Z</updated>
    <id>tag:github.com,2022-06-01:/bigby-the-wolf/WebApiTest</id>
    <link href="https://github.com/bigby-the-wolf/WebApiTest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sustainable Web API written in F# that showcases the language&#39;s strengths via a functional style.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;F# WebApiTest&lt;/h1&gt; &#xA;&lt;p&gt;Web API written in F# that showcases the language&#39;s strengths via a functional style.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;As a .NET developer with experience in C# and OOP I wanted to take a plunge in the functional world. After learning Haskell and F# I wanted to see how an enterprise level API solution would be structured in a functional setting.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve read multiple posts from both Mark Seemann&#39;s &lt;a href=&#34;https://blog.ploeh.dk/about/&#34;&gt;blog&lt;/a&gt; and Scott Wlaschin&#39;s &lt;a href=&#34;https://fsharpforfunandprofit.com/about/&#34;&gt;blog&lt;/a&gt; to further this goal and pick up best practices and principles.&lt;/p&gt; &#xA;&lt;h2&gt;Goal&lt;/h2&gt; &#xA;&lt;p&gt;The focus is creating a sustainable software solution using .NET and F#.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies and Tools&lt;/h2&gt; &#xA;&lt;p&gt;The solution is built on .NET 5 in VS2019.&lt;/p&gt; &#xA;&lt;p&gt;For DB access I chose &lt;a href=&#34;https://fsprojects.github.io/FSharp.Data.SqlClient/&#34;&gt;FSharp.Data.SqlClient&lt;/a&gt; as it&#39;s a type provider and showcases the language&#39;s strengths.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/giraffe-fsharp/Giraffe&#34;&gt;Giraffe&lt;/a&gt; is used on top of ASP.NET for it&#39;s funtional first features.&lt;/p&gt; &#xA;&lt;p&gt;For package management I selected &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;Paket&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Railway Oriented Programming (see &lt;a href=&#34;https://fsharpforfunandprofit.com/rop/&#34;&gt;this&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dependency Rejection (see &lt;a href=&#34;https://blog.ploeh.dk/2017/02/02/dependency-rejection/&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;https://fsharpforfunandprofit.com/posts/dependencies/&#34;&gt;this&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Parse don&#39;t validate (see &lt;a href=&#34;https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/&#34;&gt;this&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Async&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/fsharp</title>
    <updated>2022-06-01T01:40:20Z</updated>
    <id>tag:github.com,2022-06-01:/dotnet/fsharp</id>
    <link href="https://github.com/dotnet/fsharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The F# compiler, F# core library, F# language service, and F# tooling integration for Visual Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The F# compiler, F# core library, and F# editor tools&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;re invited to contribute to future releases of the F# compiler, core library, and tools. Development of this repository can be done on any OS supported by &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;.NET&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will also need the latest .NET 6 SDK installed from &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Quickstart on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Build from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;build.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build depends on an installation of Visual Studio. To build the compiler without this dependency use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;build.cmd -noVisualStudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it&#39;s finished, open either &lt;code&gt;FSharp.sln&lt;/code&gt; or &lt;code&gt;VisualFSharp.sln&lt;/code&gt; in your editor of choice. The latter solution is larger but includes the F# tools for Visual Studio and its associated infrastructure.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart on Linux or macOS&lt;/h3&gt; &#xA;&lt;p&gt;Build from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it&#39;s finished, open &lt;code&gt;FSharp.sln&lt;/code&gt; in your editor of choice.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation for contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/docs/index.md&#34;&gt;Compiler Documentation&lt;/a&gt; is essential reading for any larger contributions to the F# compiler codebase and contains links to learning videos, architecture diagrams and other resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The same docs are also published as the &lt;a href=&#34;https://fsharp.github.io/fsharp-compiler-docs/&#34;&gt;The F# Compiler Guide&lt;/a&gt;. It also contains the public searchable docs for FSharp.Compiler.Service component.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/DEVGUIDE.md&#34;&gt;DEVGUIDE.md&lt;/a&gt; for more details on configurations for building the codebase. In practice, you only really need to run &lt;code&gt;build.cmd&lt;/code&gt;/&lt;code&gt;build.sh&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/TESTGUIDE.md&#34;&gt;TESTGUIDE.md&lt;/a&gt; for information about the various test suites in this codebase and how to run them individually.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation for F# community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/&#34;&gt;The F# Documentation&lt;/a&gt; is the primary documentation for F#. The source for the content is &lt;a href=&#34;https://github.com/dotnet/docs/tree/main/docs/fsharp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/fsharp/fslang-design/&#34;&gt;The F# Language Design Process&lt;/a&gt; is the fundamental design process for the language, from &lt;a href=&#34;https://github.com/fsharp/fslang-suggestions&#34;&gt;suggestions&lt;/a&gt; to completed RFCs. There are also &lt;a href=&#34;https://github.com/fsharp/fslang-design/tree/main/tooling&#34;&gt;tooling RFCs&lt;/a&gt; for some topics where cross-community co-operation and visibility is most useful.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fsharp.org/specs/language-spec/&#34;&gt;The F# Language Specification&lt;/a&gt; is an in-depth description of the F# language. This is essential for understanding some behaviors of the F# compiler and some of the rules within the compiler codebase. For example, the order and way name resolution happens is specified here, which greatly impacts how the code in Name Resolutions works and why certain decisions are made.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No contribution is too small&lt;/h3&gt; &#xA;&lt;p&gt;Even if you find a single-character typo, we&#39;re happy to take the change! Although the codebase can feel daunting for beginners, we and other contributors are happy to help you along.&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;main&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=496&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/fsharp/fsharp-ci?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Per-build NuGet packages&lt;/h2&gt; &#xA;&lt;p&gt;Per-build &lt;a href=&#34;https://dev.azure.com/dnceng/public/_packaging?_a=package&amp;amp;feed=dotnet-tools&amp;amp;view=versions&amp;amp;package=FSharp.Compiler.Service&amp;amp;protocolType=NuGet&#34;&gt;versions&lt;/a&gt; of our NuGet packages are available via this URL: &lt;code&gt;https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;These are the branches in use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;main&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Almost all contributions go here.&lt;/li&gt; &#xA;   &lt;li&gt;Able to be built, installed and used in the latest public Visual Studio release.&lt;/li&gt; &#xA;   &lt;li&gt;May contain updated F# features and logic.&lt;/li&gt; &#xA;   &lt;li&gt;Used to build nightly VSIX (see above).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev15.9&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Long-term servicing branch for VS 2017 update 15.9.x. We do not expect to service that release, but if we do, that&#39;s where the changes will go.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev17.x&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Latest release branch for the particular point release of Visual Studio.&lt;/li&gt; &#xA;   &lt;li&gt;Incorporates features and fixes from main up to a particular branch point, then selective cherry-picks.&lt;/li&gt; &#xA;   &lt;li&gt;May contain new features that depend on new things or fixes in the corresponding forthcoming Visual Studio release.&lt;/li&gt; &#xA;   &lt;li&gt;Gets integrated back into main once the corresponding Visual Studio release is made.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;F# language and core library evolution&lt;/h2&gt; &#xA;&lt;p&gt;Evolution of the F# language and core library follows a process spanning two additional repositories. The process is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/fsharp/fslang-suggestions/&#34;&gt;F# language suggestions repo&lt;/a&gt; to search for ideas, vote on ones you like, submit new ideas, and discuss details with the F# community.&lt;/li&gt; &#xA; &lt;li&gt;Ideas that are &#34;approved in principle&#34; are eligible for a new RFC in the &lt;a href=&#34;https://github.com/fsharp/fslang-design&#34;&gt;F# language design repo&lt;/a&gt;. This is where the technical specification and discussion of approved suggestions go.&lt;/li&gt; &#xA; &lt;li&gt;Implementations and testing of an RFC are submitted to this repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is subject to the MIT License. A copy of this license is in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/License.txt&#34;&gt;License.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct to clarify expected behavior in our community. You can read it at &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get In Touch&lt;/h2&gt; &#xA;&lt;p&gt;Members of the &lt;a href=&#34;https://fsharp.org&#34;&gt;F# Software Foundation&lt;/a&gt; are invited to the &lt;a href=&#34;https://fsharp.org/guides/slack/&#34;&gt;FSSF Slack&lt;/a&gt;. You can find support from other contributors in the &lt;code&gt;#compiler&lt;/code&gt; and &lt;code&gt;#editor-support&lt;/code&gt; channels.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can use the &lt;code&gt;#fsharp&lt;/code&gt; tag on Twitter if you have general F# questions, including about this repository. Chances are you&#39;ll get multiple responses.&lt;/p&gt; &#xA;&lt;h2&gt;About F#&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re curious about F# itself, check out these links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/what-is-fsharp&#34;&gt;What is F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/get-started/&#34;&gt;Get started with F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharp.org&#34;&gt;F# Software Foundation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharp.org/testimonials&#34;&gt;F# Testimonials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/Quantum-NC</title>
    <updated>2022-06-01T01:40:20Z</updated>
    <id>tag:github.com,2022-06-01:/microsoft/Quantum-NC</id>
    <link href="https://github.com/microsoft/Quantum-NC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Microsoft Quantum Computing Libraries for noncommercial use&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft Quantum Development Kit: Non-Commercial Libraries&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the Microsoft Quantum Development Kit!&lt;/p&gt; &#xA;&lt;p&gt;This repository contains shared-source libraries that can be used for research and academics, but that cannot be used for commercial purposes. Please note that these libraries are not intended for production use, and may be modified as research proceeds. For more information please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/Quantum-NC/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using the non-commercial research libraries&lt;/h2&gt; &#xA;&lt;p&gt;The non-commercial libraries in this repository can be used via NuGet packages beginning with the prefix &lt;a href=&#34;https://www.nuget.org/packages?q=owner:QuantumEngineering%20id:research&#34;&gt;&#34;Microsoft.Quantum.Research.&#34;&lt;/a&gt; For more details, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/Quantum-NC/wiki/Research-packages&#34;&gt;Research packages&lt;/a&gt; on the &lt;a href=&#34;https://github.com/microsoft/Quantum-NC/wiki/&#34;&gt;Quantum-NC wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you have feedback about the libraries in this repository, please let us know by filing a &lt;a href=&#34;https://github.com/microsoft/Quantum-NC/issues/new&#34;&gt;new issue&lt;/a&gt;! If you have feedback about some other part of the Microsoft Quantum Development Kit, please see the &lt;a href=&#34;https://docs.microsoft.com/azure/quantum/contributing-overview&#34;&gt;contribution guide&lt;/a&gt; for more information on the best places to file it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please note: &lt;strong&gt;this project does not accept external contributions&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to the rest of the Quantum Development Kit, please see the &lt;a href=&#34;https://docs.microsoft.com/azure/quantum/contributing-overview&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>