<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T02:12:47Z</updated>
  <subtitle>Monthly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dungpa/opt-query</title>
    <updated>2023-06-01T02:12:47Z</updated>
    <id>tag:github.com,2023-06-01:/dungpa/opt-query</id>
    <link href="https://github.com/dungpa/opt-query" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A query expression for optimization, using Microsoft SolverFoundation and F#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OptQuery - a query expression for optimization&lt;/h1&gt; &#xA;&lt;h3&gt;Built upon &lt;a href=&#34;http://blogs.msdn.com/b/lengningliu/archive/2009/09/04/optimization-domain-specific-language-in-f-with-units-of-measure.aspx&#34;&gt;Microsoft SolverFoundation&#39;s ODSL&lt;/a&gt; and F# 3.0&#39;s &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hh289709.aspx&#34;&gt;custom keywords&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;let petrochem () =   &#xA;    opt { let! sa = var&amp;lt;Barrel/Day&amp;gt;()&#xA;          let! vz = var&amp;lt;_&amp;gt;()&#xA;          assume (0.3 * sa + 0.4 * vz &amp;gt;= 2000.&amp;lt;_&amp;gt;)&#xA;          assume (0.4 * sa + 0.2 * vz &amp;gt;= 1500.&amp;lt;_&amp;gt;)&#xA;          assume (0.2 * sa + 0.3 * vz &amp;gt;= 500.&amp;lt;_&amp;gt;)&#xA;          assume (sa &amp;lt;= 9000.&amp;lt;_&amp;gt; &amp;amp;&amp;amp; sa &amp;gt;= 0.&amp;lt;_&amp;gt;)&#xA;          assume (vz &amp;lt;= 6000.&amp;lt;_&amp;gt; &amp;amp;&amp;amp; vz &amp;gt;= 0.&amp;lt;_&amp;gt;)   &#xA;          minimise (20.0&amp;lt;Dollar/Barrel&amp;gt; * sa + 15.0&amp;lt;_&amp;gt; * vz)&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;p&gt;The language implemented in this sample has the following grammar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;LinearProgram := (Variables, LinearConstraints, ObjectiveFunction)&#xA;&#xA;Variables := Variable &#xA;          := Variable \n Variables&#xA;&#xA;Variable := let identifier = var       &amp;lt;UnitAnnotation&amp;gt;() &#xA;         := let identifier = vararray1 &amp;lt;UnitAnnotation&amp;gt;(range) &#xA;         := let identifier = vararray2 &amp;lt;UnitAnnotation&amp;gt;(range,range) &#xA;&#xA;ObjectiveFunction := minimise LinearFunction&#xA;                  := maximise LinearFunction&#xA;&#xA;LinearFunction&#x9;:= RealConstant * RealVariable&#xA;                := LinearFunction + LinearFunction&#xA;                := sum range (fun identifier -&amp;gt; LinearFunction) &#xA;&#xA;LinearConstraints := LinearConstraint&#xA;                  := LinearConstraint \n LinearConstraints &#xA;&#xA;LinearConstraint := assume Constraint&#xA;&#xA;Constraint := LinearFunction &amp;lt;= RealConstant&#xA;           := LinearFunction &amp;gt;= RealConstant&#xA;           := LinearFunction =  RealConstant&#xA;           := integral identifier&#xA;           := foreach range (fun identifier -&amp;gt; Constraint)&#xA;&#xA;RealConstant := float_literal_constant&#xA;             := identifier&#xA;             := identifier.[Integer]&#xA;             := identifier.[Integer, Integer] &#xA;&#xA;RealVariable := identifier&#xA;             := identifier.[Integer]&#xA;             := identifier.[Integer, Integer]&#xA;&#xA;Integer := integer_literal_constant&#xA;        := identifier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;More details will be added later.&lt;/p&gt;</summary>
  </entry>
</feed>