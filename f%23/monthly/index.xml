<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-02T02:38:39Z</updated>
  <subtitle>Monthly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>darklang/dark</title>
    <updated>2022-06-02T02:38:39Z</updated>
    <id>tag:github.com,2022-06-02:/darklang/dark</id>
    <link href="https://github.com/darklang/dark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Client, backend, and services for Dark: https://darklang.com&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dark&lt;/h1&gt; &#xA;&lt;p&gt;This is the main repo for &lt;a href=&#34;https://darklang.com&#34;&gt;Dark&lt;/a&gt;, a combined language, editor, and infrastructure to make it easy to build backends.&lt;/p&gt; &#xA;&lt;p&gt;This repo is intended to help Dark users solve their needs by fixing bugs, expanding features, or otherwise contributing. Dark is &lt;a href=&#34;https://github.com/darklang/dark/raw/main/LICENSE.md&#34;&gt;source available, not open source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/darklang/projects/5&#34;&gt;Project Tracking&lt;/a&gt; - what we&#39;re actually working on right&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://darklang.com/slack-invite&#34;&gt;Darklang Community Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darklang/dark/issues/3284&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.darklang.com/contributing/getting-started&#34;&gt;Contributor guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See our &lt;a href=&#34;https://docs.darklang.com/contributing/repo-layout&#34;&gt;guide to the repo&lt;/a&gt; for help browsing.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are committed to make Dark easy to contribute to. Our &lt;a href=&#34;https://docs.darklang.com/contributing/getting-started&#34;&gt;contributor docs&lt;/a&gt; will help guide you through your first PR, find good projects to contribute to, and learn about the code base.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;We try to make it really easy to get started. If you have any problems, please ask in &lt;a href=&#34;https://darklang.com/slack-invite&#34;&gt;Slack&lt;/a&gt; and we&#39;ll work to fix any issues you have.&lt;/p&gt; &#xA;&lt;h3&gt;Install dependencies&lt;/h3&gt; &#xA;&lt;p&gt;We develop Dark within a docker container, so there is not a lot of setup. However, we do need to setup the host system in a few ways to support running scripts, and Docker.&lt;/p&gt; &#xA;&lt;h4&gt;OSX&lt;/h4&gt; &#xA;&lt;p&gt;To build and run the server you must have the following installed (and running):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew for Mac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;Docker for Mac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bash 4 or later: &lt;code&gt;brew install bash&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;p&gt;Everything should just work on Linux, so long as you have docker installed and you are using bash 4 or later.&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;On Windows, you can run Dark in WSL2 (Windows Subsystem for Linux):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You must be on at least Windows 10 Version 2004, and you must run WSL 2 (docker does not work in WSL 1)&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install-win10#update-to-wsl-2&#34;&gt;WSL 2 installation instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://docs.docker.com/docker-for-windows/wsl/&#34;&gt;Docker for WSL 2 installation instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You need to clone the dark repo with the git &lt;code&gt;core.autocrlf&lt;/code&gt; setting set to &lt;code&gt;false&lt;/code&gt;. You can configure this by running &lt;code&gt;git config --global core.autocrlf false&lt;/code&gt;. If you have already cloned dark, you will need to reclone it.&lt;/li&gt; &#xA; &lt;li&gt;This section of the guide is incomplete. Please &lt;a href=&#34;https://github.com/darklang/dark/issues&#34;&gt;create an issue&lt;/a&gt; if you find something doesn&#39;t work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building and running for the first time&lt;/h3&gt; &#xA;&lt;h4&gt;Running the build script&lt;/h4&gt; &#xA;&lt;p&gt;Now that the pre-requisites are installed, we should be able to build the development container in Docker, which has the exact right versions of all the tools we use.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re using VSCode, we run our build scripts in the VSCode devcontainer. See &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/vscode-setup.md&#34;&gt;the VSCode instructions&lt;/a&gt; for instructions.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, simply run &lt;code&gt;scripts/builder --compile --watch --test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These steps apply for all builds, VSCode or using &lt;code&gt;scripts/builder&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wait until the terminal says &#34;Initial compile succeeded&#34; - this means the build server is ready. The &lt;code&gt;builder&lt;/code&gt; script will sit open, waiting for file changes in order to recompile&lt;/li&gt; &#xA; &lt;li&gt;If you see &#34;initial compile failed&#34;, it may be a memory issue. Sometimes trying again will work. If not, ensure you have Docker configured to provide 4GB or more of memory, then try again.&lt;/li&gt; &#xA; &lt;li&gt;Open your browser to &lt;a href=&#34;http://darklang.localhost:8000/a/dark/&#34;&gt;http://darklang.localhost:8000/a/dark/&lt;/a&gt;, username &#34;dark&#34;, password &#34;what&#34;&lt;/li&gt; &#xA; &lt;li&gt;Edit code normally - on each save to your filesystem, the app will be rebuilt and the browser will reload as necessary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using Dark scripts&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/scripts&#34;&gt;&lt;code&gt;scripts/&lt;/code&gt;&lt;/a&gt; directory is full of scripts. They automatically execute in the dev container, even if they are run on the host (see &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/scripts/devcontainer/_assert-in-container&#34;&gt;&lt;code&gt;scripts/devcontainer/_assert-in-container&lt;/code&gt;&lt;/a&gt; for how this works). Scripts starting with an underscore are primarily intended to be run by other scripts. Scripts without an underscore are usually intended to be called by a human, though they are often also called by other scripts as well.&lt;/p&gt; &#xA;&lt;h2&gt;Read the contributor docs&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve gotten this far, you&#39;re now ready to &lt;a href=&#34;https://darklang.github.io/docs/contributing/getting-started#first-contribution&#34;&gt;contribute your first PR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/dnsmasq.md&#34;&gt;setting up dnsmasq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/livereload.md&#34;&gt;setting up browser-reloading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Unit tests run when you specify &lt;code&gt;--test&lt;/code&gt; to &lt;code&gt;scripts/builder&lt;/code&gt;. You can run them as a once off using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/run-client-tests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/run-backend-tests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/run-fsharp-tests&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Integration tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/run-in-docker ./integration-tests/run.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also run integration tests on your (host) machine, which gives you some debugging ability, and typically runs faster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./integration-tests/run.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are good debugging options for integration testing. See &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/integration-tests/README.md&#34;&gt;integration-tests/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running unix commands in the container&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/run-in-docker bash&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Accessing the local db&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/run-in-docker psql -d devdb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Config files&lt;/h2&gt; &#xA;&lt;p&gt;Config files (&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/config&#34;&gt;config/&lt;/a&gt;) define all env vars that you can use in Dark code. All config vars must start with &lt;code&gt;DARK_CONFIG&lt;/code&gt;. Changing a config variable in &lt;code&gt;config/dev&lt;/code&gt; requires restaring the devcontanier.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging the client&lt;/h2&gt; &#xA;&lt;p&gt;You can enable the FluidDebugger by mousing over the Gear in the left-sidebar. There is also &#34;Enable debugger&#34; which enables a legacy debugger that nobody uses and doesn&#39;t work well.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using Chrome, enable Custom Formatters to see ReScript values in Chrome Dev Tools instead of their JS representation. From within Chrome Dev Tools, click &#34;⠇&#34;, &#34;Settings&#34;, &#34;Preferences&#34;, &#34;Enable Custom Formatters&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging dotnet&lt;/h2&gt; &#xA;&lt;h3&gt;Debugger&lt;/h3&gt; &#xA;&lt;p&gt;The VSCode debugger works out of the box with Dark, supporting stepping, breakpoints, inspecting the stack, etc. You must launch the executable from VSCode for this to work--attaching does not currently seem to work. You can edit &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/.vscode/launch.json&#34;&gt;&lt;code&gt;launch.json&lt;/code&gt;&lt;/a&gt; to change what tests are run or how other binaries are started up, which should be straightforward.&lt;/p&gt; &#xA;&lt;h3&gt;REPL (fsi)&lt;/h3&gt; &#xA;&lt;p&gt;You can get a REPL with all of the Dark libraries loaded by running:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/scripts/build/dotnet-fsi&#34;&gt;&lt;code&gt;scripts/build/dotnet-fsi&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Segfaults and crashes&lt;/h3&gt; &#xA;&lt;p&gt;When dotnet crashes, you can debug it by running:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lldb -- [your command]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In LLDB, you can use &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&#34;&gt;dotnet&#39;s SOS plugin&lt;/a&gt; to read the stack, values, etc. The plugin is automatically loaded in lldb in the dev container.&lt;/p&gt; &#xA;&lt;h2&gt;Production Services&lt;/h2&gt; &#xA;&lt;p&gt;The app is split into &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/backend&#34;&gt;backend/&lt;/a&gt; (being converted into &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/fsharp-backend&#34;&gt;fsharp-backend&lt;/a&gt;) and &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/client&#34;&gt;client/&lt;/a&gt;. Part of the backend is used in the client (&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/backend/jsanalysis&#34;&gt;jsanalysis&lt;/a&gt;, and in F#: &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/fsharp-backend/src/Wasm&#34;&gt;Wasm&lt;/a&gt;). These are compiled to create libraries and binaries.&lt;/p&gt; &#xA;&lt;p&gt;These are put into containers, whose definitions are in &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/containers&#34;&gt;containers/&lt;/a&gt;. We also have some containers which are defined entirely in their directory (typically, these have a self-contained codebase).&lt;/p&gt; &#xA;&lt;p&gt;The containers are deployed via Kubernetes. A group of containers are deployed together, which is called a pod. Those pods, and how they are run (for example, how many of them, what secrets they have access to, how to check if they are still alive) are defined by a set of Yaml files which is called a &lt;em&gt;deployment&lt;/em&gt;. Our deployments are all defined in the &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/services&#34;&gt;services&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;service&lt;/em&gt; in our repo typically wraps a deployment, but it can sometimes mean other things, so we also have a number of other services, defined via yaml files, in &lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/services&#34;&gt;services&lt;/a&gt;. Some of the services are deployments that use 3rdparty containers (eg, &#34;Let&#39;s Encrypt&#34;), and some are abstractions around Google Cloud services.&lt;/p&gt; &#xA;&lt;h2&gt;Other important docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.darklang.com/contributing/getting-started&#34;&gt;Contributor docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/builder-options.md&#34;&gt;Other ways to run the dev container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/editor-setup.md&#34;&gt;Setting up your editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/unittests.md&#34;&gt;Running unit tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/fsharp-backend/tests/testfiles/README.md&#34;&gt;Dark unit tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/interviewing.md&#34;&gt;If you&#39;re interviewing at Dark, read this&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Less important docs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/production&#34;&gt;Docs around running Dark in production&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/running-against-production.md&#34;&gt;Running the client against production (ngrok)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/oplist-serialization.md&#34;&gt;Oplist serialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/bs-tea.md&#34;&gt;Intricacies of Bucklescript-tea&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/writing-docstrings.md&#34;&gt;Writing Stdlib docstrings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/modifying-libraries.md&#34;&gt;Editing other BS libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/add-account.md&#34;&gt;Add an account for yourself&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/fuzzer.md&#34;&gt;Using fuzzers to develop Dark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/logging-and-telemetry.md&#34;&gt;Logging and telemetry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/darklang/dark/main/docs/writing-docstrings.md&#34;&gt;Writing docstrings in the Dark Standard library&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dzamkov/DJ</title>
    <updated>2022-06-02T02:38:39Z</updated>
    <id>tag:github.com,2022-06-02:/dzamkov/DJ</id>
    <link href="https://github.com/dzamkov/DJ" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Music player with pitch/volume controls&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>