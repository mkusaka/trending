<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T02:36:40Z</updated>
  <subtitle>Monthly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fsprojects/Paket</title>
    <updated>2022-05-30T02:36:40Z</updated>
    <id>tag:github.com,2022-05-30:/fsprojects/Paket</id>
    <link href="https://github.com/fsprojects/Paket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A dependency manager for .NET with support for NuGet packages and Git repositories.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/fsprojects/Paket?branch=master&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/fsprojects/Paket.svg?branch=master&#34; alt=&#34;Travis build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/paket/paket/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/f77ejdp6mtkris2u/branch/master?svg=true&#34; alt=&#34;Appveyor Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Paket/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/Paket.svg?style=flat&#34; alt=&#34;NuGet Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/fsprojects/Paket?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/fsprojects/Paket&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/PaketManager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-PaketManager-blue.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Paket&lt;/h1&gt; &#xA;&lt;p&gt;A dependency manager for .NET with support for NuGet packages and git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Why Paket?&lt;/h2&gt; &#xA;&lt;p&gt;NuGet does not separate out the concept of transitive dependencies. If you install a package into your project and that package has further dependencies then all transitive packages are included in the packages.config. There is no way to tell which packages are only transitive dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Even more importantly: If two packages reference conflicting versions of a package, NuGet will silently take the latest version (&lt;a href=&#34;https://fsprojects.github.io/Paket/controlling-nuget-resolution.html&#34;&gt;read more&lt;/a&gt;). You have no control over this process.&lt;/p&gt; &#xA;&lt;p&gt;Paket on the other hand maintains this information on a consistent and stable basis within the &lt;a href=&#34;https://fsprojects.github.io/Paket/lock-file.html&#34;&gt;&lt;code&gt;paket.lock&lt;/code&gt; file&lt;/a&gt; in the solution root. This file, together with the &lt;a href=&#34;https://fsprojects.github.io/Paket/dependencies-file.html&#34;&gt;&lt;code&gt;paket.dependencies&lt;/code&gt; file&lt;/a&gt; enables you to determine exactly what&#39;s happening with your dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Paket also enables you to &lt;a href=&#34;https://fsprojects.github.io/Paket/git-dependencies.html&#34;&gt;reference files directly from git&lt;/a&gt; repositories or any &lt;a href=&#34;https://fsprojects.github.io/Paket/http-dependencies.html&#34;&gt;http-resource&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more reasons see the &lt;a href=&#34;https://fsprojects.github.io/Paket/faq.html&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Online resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fsprojects/Paket/&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsprojects.github.io/Paket/get-started.html&#34;&gt;Getting started guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/fsprojects/Paket/releases/latest&#34;&gt;paket.exe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/fsprojects/Paket/releases/latest&#34;&gt;paket.bootstrapper.exe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting and support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Found a bug or missing a feature? Feed the &lt;a href=&#34;https://github.com/fsprojects/Paket/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Announcements and related miscellanea through Twitter (&lt;a href=&#34;https://twitter.com/PaketManager&#34;&gt;@PaketManager&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As of &lt;a href=&#34;https://github.com/fsprojects/Paket/pull/2664&#34;&gt;https://github.com/fsprojects/Paket/pull/2664&lt;/a&gt;, paket now automatically bootstraps all required dependencies and builds on a clean windows installation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;up-to-date Mono (&amp;gt;= 5.0 required, &amp;gt;= 5.2 recommended, just install the latest nightly)&lt;/li&gt; &#xA; &lt;li&gt;up-to-date MSBuild (&amp;gt;= 15.0, support for &#34;Directory.Build.props&#34; required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On most distros, it should be enough to follow &lt;a href=&#34;http://www.mono-project.com/docs/getting-started/install/linux/&#34;&gt;this guide&lt;/a&gt; and install &lt;code&gt;mono-devel&lt;/code&gt;, which contains MSBuild. Note: if the paket build script fails at &lt;code&gt;paket restore&lt;/code&gt; just rerun it a few times until it succeeds.&lt;/p&gt; &#xA;&lt;h2&gt;Quick contributing guide&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork and clone locally.&lt;/li&gt; &#xA; &lt;li&gt;Build the solution with Visual Studio, &lt;code&gt;build.cmd&lt;/code&gt; or &lt;code&gt;build.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a topic specific branch in git. Add a nice feature in the code. Do not forget to add tests and/or docs.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;build.cmd&lt;/code&gt; (&lt;code&gt;build.sh&lt;/code&gt; on Mono) to make sure all tests are still passing.&lt;/li&gt; &#xA; &lt;li&gt;When built, you&#39;ll find the binaries in &lt;code&gt;./bin&lt;/code&gt; which you can then test with locally, to ensure the bug or feature has been successfully implemented.&lt;/li&gt; &#xA; &lt;li&gt;Send a Pull Request.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to contribute to the &lt;a href=&#34;https://fsprojects.github.io/Paket/&#34;&gt;docs&lt;/a&gt; then please modify the markdown files in &lt;code&gt;/docs/content&lt;/code&gt; and send a pull request. Note, that short description and syntax for each command is generated automatically from the &lt;code&gt;Paket.Commands&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/fsprojects/Paket/raw/master/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer(s)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/forki&#34;&gt;@forki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agross&#34;&gt;@agross&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudroutine&#34;&gt;@cloudroutine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matthid&#34;&gt;@matthid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isaacabraham&#34;&gt;@isaacabraham&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/theimowski&#34;&gt;@theimowski&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default maintainer account for projects under &#34;fsprojects&#34; is &lt;a href=&#34;https://github.com/fsprojectsgit&#34;&gt;@fsprojectsgit&lt;/a&gt; - F# Community Project Incubation Space (repo management)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dotnet/fsharp</title>
    <updated>2022-05-30T02:36:40Z</updated>
    <id>tag:github.com,2022-05-30:/dotnet/fsharp</id>
    <link href="https://github.com/dotnet/fsharp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The F# compiler, F# core library, F# language service, and F# tooling integration for Visual Studio&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The F# compiler, F# core library, and F# editor tools&lt;/h1&gt; &#xA;&lt;p&gt;You&#39;re invited to contribute to future releases of the F# compiler, core library, and tools. Development of this repository can be done on any OS supported by &lt;a href=&#34;https://dotnet.microsoft.com/&#34;&gt;.NET&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will also need the latest .NET 6 SDK installed from &lt;a href=&#34;https://dotnet.microsoft.com/download/dotnet/6.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Quickstart on Windows&lt;/h3&gt; &#xA;&lt;p&gt;Build from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;build.cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The build depends on an installation of Visual Studio. To build the compiler without this dependency use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;build.cmd -noVisualStudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it&#39;s finished, open either &lt;code&gt;FSharp.sln&lt;/code&gt; or &lt;code&gt;VisualFSharp.sln&lt;/code&gt; in your editor of choice. The latter solution is larger but includes the F# tools for Visual Studio and its associated infrastructure.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart on Linux or macOS&lt;/h3&gt; &#xA;&lt;p&gt;Build from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After it&#39;s finished, open &lt;code&gt;FSharp.sln&lt;/code&gt; in your editor of choice.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation for contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/docs/index.md&#34;&gt;Compiler Documentation&lt;/a&gt; is essential reading for any larger contributions to the F# compiler codebase and contains links to learning videos, architecture diagrams and other resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The same docs are also published as the &lt;a href=&#34;https://fsharp.github.io/fsharp-compiler-docs/&#34;&gt;The F# Compiler Guide&lt;/a&gt;. It also contains the public searchable docs for FSharp.Compiler.Service component.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/DEVGUIDE.md&#34;&gt;DEVGUIDE.md&lt;/a&gt; for more details on configurations for building the codebase. In practice, you only really need to run &lt;code&gt;build.cmd&lt;/code&gt;/&lt;code&gt;build.sh&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/TESTGUIDE.md&#34;&gt;TESTGUIDE.md&lt;/a&gt; for information about the various test suites in this codebase and how to run them individually.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation for F# community&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/&#34;&gt;The F# Documentation&lt;/a&gt; is the primary documentation for F#. The source for the content is &lt;a href=&#34;https://github.com/dotnet/docs/tree/main/docs/fsharp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/fsharp/fslang-design/&#34;&gt;The F# Language Design Process&lt;/a&gt; is the fundamental design process for the language, from &lt;a href=&#34;https://github.com/fsharp/fslang-suggestions&#34;&gt;suggestions&lt;/a&gt; to completed RFCs. There are also &lt;a href=&#34;https://github.com/fsharp/fslang-design/tree/main/tooling&#34;&gt;tooling RFCs&lt;/a&gt; for some topics where cross-community co-operation and visibility is most useful.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fsharp.org/specs/language-spec/&#34;&gt;The F# Language Specification&lt;/a&gt; is an in-depth description of the F# language. This is essential for understanding some behaviors of the F# compiler and some of the rules within the compiler codebase. For example, the order and way name resolution happens is specified here, which greatly impacts how the code in Name Resolutions works and why certain decisions are made.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;No contribution is too small&lt;/h3&gt; &#xA;&lt;p&gt;Even if you find a single-character typo, we&#39;re happy to take the change! Although the codebase can feel daunting for beginners, we and other contributors are happy to help you along.&lt;/p&gt; &#xA;&lt;h2&gt;Build Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Branch&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;main&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/dnceng/public/_build/latest?definitionId=496&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/dnceng/public/_apis/build/status/dotnet/fsharp/fsharp-ci?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Per-build NuGet packages&lt;/h2&gt; &#xA;&lt;p&gt;Per-build &lt;a href=&#34;https://dev.azure.com/dnceng/public/_packaging?_a=package&amp;amp;feed=dotnet-tools&amp;amp;view=versions&amp;amp;package=FSharp.Compiler.Service&amp;amp;protocolType=NuGet&#34;&gt;versions&lt;/a&gt; of our NuGet packages are available via this URL: &lt;code&gt;https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;These are the branches in use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;main&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Almost all contributions go here.&lt;/li&gt; &#xA;   &lt;li&gt;Able to be built, installed and used in the latest public Visual Studio release.&lt;/li&gt; &#xA;   &lt;li&gt;May contain updated F# features and logic.&lt;/li&gt; &#xA;   &lt;li&gt;Used to build nightly VSIX (see above).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev15.9&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Long-term servicing branch for VS 2017 update 15.9.x. We do not expect to service that release, but if we do, that&#39;s where the changes will go.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;release/dev17.x&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Latest release branch for the particular point release of Visual Studio.&lt;/li&gt; &#xA;   &lt;li&gt;Incorporates features and fixes from main up to a particular branch point, then selective cherry-picks.&lt;/li&gt; &#xA;   &lt;li&gt;May contain new features that depend on new things or fixes in the corresponding forthcoming Visual Studio release.&lt;/li&gt; &#xA;   &lt;li&gt;Gets integrated back into main once the corresponding Visual Studio release is made.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;F# language and core library evolution&lt;/h2&gt; &#xA;&lt;p&gt;Evolution of the F# language and core library follows a process spanning two additional repositories. The process is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/fsharp/fslang-suggestions/&#34;&gt;F# language suggestions repo&lt;/a&gt; to search for ideas, vote on ones you like, submit new ideas, and discuss details with the F# community.&lt;/li&gt; &#xA; &lt;li&gt;Ideas that are &#34;approved in principle&#34; are eligible for a new RFC in the &lt;a href=&#34;https://github.com/fsharp/fslang-design&#34;&gt;F# language design repo&lt;/a&gt;. This is where the technical specification and discussion of approved suggestions go.&lt;/li&gt; &#xA; &lt;li&gt;Implementations and testing of an RFC are submitted to this repository.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is subject to the MIT License. A copy of this license is in &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/License.txt&#34;&gt;License.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://contributor-covenant.org/&#34;&gt;Contributor Covenant&lt;/a&gt; code of conduct to clarify expected behavior in our community. You can read it at &lt;a href=&#34;https://raw.githubusercontent.com/dotnet/fsharp/main/CODE_OF_CONDUCT.md&#34;&gt;CODE_OF_CONDUCT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get In Touch&lt;/h2&gt; &#xA;&lt;p&gt;Members of the &lt;a href=&#34;https://fsharp.org&#34;&gt;F# Software Foundation&lt;/a&gt; are invited to the &lt;a href=&#34;https://fsharp.org/guides/slack/&#34;&gt;FSSF Slack&lt;/a&gt;. You can find support from other contributors in the &lt;code&gt;#compiler&lt;/code&gt; and &lt;code&gt;#editor-support&lt;/code&gt; channels.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can use the &lt;code&gt;#fsharp&lt;/code&gt; tag on Twitter if you have general F# questions, including about this repository. Chances are you&#39;ll get multiple responses.&lt;/p&gt; &#xA;&lt;h2&gt;About F#&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re curious about F# itself, check out these links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/what-is-fsharp&#34;&gt;What is F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/dotnet/fsharp/get-started/&#34;&gt;Get started with F#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharp.org&#34;&gt;F# Software Foundation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fsharp.org/testimonials&#34;&gt;F# Testimonials&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PragmaticFlow/NBomber</title>
    <updated>2022-05-30T02:36:40Z</updated>
    <id>tag:github.com,2022-05-30:/PragmaticFlow/NBomber</id>
    <link href="https://github.com/PragmaticFlow/NBomber" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern and flexible load testing framework for Pull and Push scenarios, designed to test any system regardless a protocol (HTTP/WebSockets/AMQP etc) or a semantic model (Pull/Push).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/PragmaticFlow/NBomber/raw/dev/assets/nbomber_logo.png&#34; alt=&#34;NBomber logo&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PragmaticFlow/NBomber/actions/workflows/dotnet.yml/badge.svg?branch=dev&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://www.nuget.org/packages/nbomber/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/nbomber.svg?sanitize=true&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/nbomber/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/nbomber/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Very simple load testing framework for Pull and Push scenarios. It&#39;s 100% written in F# and targeting .NET Core and full .NET Framework.&lt;/p&gt; &#xA;&lt;h3&gt;How to install&lt;/h3&gt; &#xA;&lt;p&gt;To install NBomber via NuGet, run this command in NuGet package manager console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-code&#34;&gt;PM&amp;gt; Install-Package NBomber&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation is located &lt;a href=&#34;https://nbomber.com/docs/overview/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Run test scenario&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://nbomber.com/assets/images/nbomber_v2_console-6a596abc247223cefefa397c62e620f4.gif&#34; alt=&#34;how to run a scenario gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;View report&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PragmaticFlow/NBomber/dev/assets/nbomber_report.jpg&#34; alt=&#34;view report&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Analyze trends&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/PragmaticFlow/NBomber/raw/dev/assets/influx_trends.png&#34; alt=&#34;analyze trends&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Why we build NBomber and what you can do with it?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The main reason behind NBomber is to provide a &lt;strong&gt;lightweight&lt;/strong&gt; framework for writing load tests which you can use to test literally &lt;strong&gt;any&lt;/strong&gt; system and simulate &lt;strong&gt;any&lt;/strong&gt; production workload. We wanted to provide only a few abstractions so that we could describe any type of load and still have a simple, intuitive API.&lt;/li&gt; &#xA; &lt;li&gt;Another goal is to provide building blocks to validate your POC (proof of concept) projects by applying any complex load distribution.&lt;/li&gt; &#xA; &lt;li&gt;With NBomber you can test any PULL or PUSH system (HTTP, WebSockets, GraphQl, gRPC, SQL Databse, MongoDb, Redis etc).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;NBomber as a modern framework provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zero dependencies on protocol (HTTP/WebSockets/AMQP/SQL)&lt;/li&gt; &#xA; &lt;li&gt;Zero dependencies on semantic model (Pull/Push)&lt;/li&gt; &#xA; &lt;li&gt;Very flexible configuration and dead simple API&lt;/li&gt; &#xA; &lt;li&gt;Cluster support&lt;/li&gt; &#xA; &lt;li&gt;Reporting sinks&lt;/li&gt; &#xA; &lt;li&gt;CI/CD integration&lt;/li&gt; &#xA; &lt;li&gt;Plugins/extensions support&lt;/li&gt; &#xA; &lt;li&gt;Data feed support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What makes it very simple?&lt;/h3&gt; &#xA;&lt;p&gt;NBomber is a foundation of building blocks which you can use to describe your test scenario, run it and get reports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;// FSharp example&#xA;&#xA;let step = Step.create(&#34;step&#34;, fun context -&amp;gt; task {&#xA;&#xA;    // you can do any logic here: go to http, websocket etc&#xA;    do! Task.Delay(seconds 1)&#xA;    return Response.Ok()&#xA;})&#xA;&#xA;Scenario.create &#34;scenario&#34; [step]&#xA;|&amp;gt; NBomberRunner.registerScenario&#xA;|&amp;gt; NBomberRunner.run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;// CSharp example&#xA;&#xA;var step = Step.Create(&#34;step&#34;, async context =&amp;gt;&#xA;{&#xA;    // you can do any logic here: go to http, websocket etc&#xA;&#xA;    await Task.Delay(TimeSpan.FromSeconds(1));&#xA;    return Response.Ok();&#xA;});&#xA;&#xA;var scenario = ScenarioBuilder.CreateScenario(&#34;scenario&#34;, step);&#xA;&#xA;NBomberRunner&#xA;    .RegisterScenarios(scenario)&#xA;    .Run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PragmaticFlow/NBomber/tree/dev/examples/FSharpProd&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PragmaticFlow/NBomber/tree/dev/examples/CSharpProd&#34;&gt;link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Would you like to help make NBomber even better? We keep a list of issues that are approachable for newcomers under the &lt;a href=&#34;https://github.com/PragmaticFlow/NBomber/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;good-first-issue&lt;/a&gt; label.&lt;/p&gt;</summary>
  </entry>
</feed>