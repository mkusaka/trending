<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:50:16Z</updated>
  <subtitle>Monthly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>artempyanykh/marksman</title>
    <updated>2022-09-01T01:50:16Z</updated>
    <id>tag:github.com,2022-09-01:/artempyanykh/marksman</id>
    <link href="https://github.com/artempyanykh/marksman" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Write Markdown with code assist and intelligence in the comfort of your favourite editor.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/artempyanykh/marksman/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/artempyanykh/marksman/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build &amp;amp; Test&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/artempyanykh/marksman&#34; alt=&#34;release&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Marksman&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Write Markdown with code assist and intelligence in the comfort of your favourite editor.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/splash.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Marksman is a program that integrates with your editor to assist you in writing and maintaining your Markdown documents. Using &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;LSP protocol&lt;/a&gt; it provides &lt;strong&gt;completion&lt;/strong&gt;, goto &lt;strong&gt;definition&lt;/strong&gt;, find &lt;strong&gt;references&lt;/strong&gt;, &lt;strong&gt;rename&lt;/strong&gt; refactoring, &lt;strong&gt;diagnostics&lt;/strong&gt;, and more. In addition to regular Markdown, it also supports &lt;strong&gt;wiki-link&lt;/strong&gt;-style references that enable &lt;a href=&#34;https://en.wikipedia.org/wiki/Zettelkasten&#34;&gt;Zettelkasten-like&lt;/a&gt;&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/#fn1&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/#fn2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; note taking. See more about Marksman&#39;s features below.&lt;/p&gt; &#xA;&lt;p&gt;Marksman &lt;strong&gt;works on MacOS, Linux, and Windows&lt;/strong&gt; and is distributed as a &lt;strong&gt;self-contained binary&lt;/strong&gt; for each OS.&lt;/p&gt; &#xA;&lt;p&gt;The server provides assistance with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Markdown inline links: &lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;This is [inline link](/some-file.md#some-heading).&#xA;This is an internal [anchor link](#heading).&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Markdown reference links: &lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;See [reference].&#xA;&#xA;[reference]: /url &#34;Title&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Wiki-links: &lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;Link to [[another-note]].&#xA;Link to [[another-notes#heading]].&#xA;Internal link to [[#a-heading]].&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All types of links support completion, hover, goto definition/references. Additionally, Marksman provides diagnostics for wiki-links to detect broken references and duplicate/ambiguous headings.&lt;/p&gt; &#xA;&lt;h2&gt;Existing editor integrations&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/#fn3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode via &lt;a href=&#34;https://github.com/artempyanykh/marksman-vscode&#34;&gt;Marksman VSCode&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;via &lt;a href=&#34;https://github.com/williamboman/nvim-lsp-installer&#34;&gt;nvim-lsp-installer&lt;/a&gt; (automatic server installation),&lt;/li&gt; &#xA;   &lt;li&gt;via &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#marksman&#34;&gt;nvim-lspconfig&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;via &lt;a href=&#34;https://github.com/yaegassy/coc-marksman&#34;&gt;CoC-marksman&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Emacs:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;via &lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/page/lsp-marksman/&#34;&gt;LSP Mode&lt;/a&gt; (automatic server installation).&lt;/p&gt; &lt;p&gt;Example config for &lt;code&gt;use-package&lt;/code&gt; users:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(use-package markdown-mode&#xA;  :hook (markdown-mode . lsp)&#xA;  :config&#xA;  (require &#39;lsp-marksman))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;via &lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;Eglot&lt;/a&gt;, requires configuration (unless &lt;a href=&#34;https://github.com/joaotavora/eglot/pull/1013&#34;&gt;eglot#1013&lt;/a&gt; gets merged); add the following to your &lt;code&gt;init.el&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lisp&#34;&gt;(add-to-list &#39;eglot-server-programs &#39;(markdown-mode . (&#34;marksman&#34;)))      &#xA;(add-hook &#39;markdown-mode-hook #&#39;eglot-ensure)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://helix-editor.com&#34;&gt;Helix&lt;/a&gt; requires configuration (unless &lt;a href=&#34;https://github.com/helix-editor/helix/pull/3499&#34;&gt;helix#3499&lt;/a&gt; gets merged); add the following to your &lt;code&gt;~/.config/helix/languages.toml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[language]]&#xA;name = &#34;markdown&#34;&#xA;scope = &#34;source.md&#34;&#xA;injection-regex = &#34;md|markdown&#34;&#xA;file-types = [&#34;md&#34;]&#xA;roots = [&#34;.marksman.toml&#34;]&#xA;language-server = { command = &#34;marksman&#34;, args=[&#34;server&#34;] }&#xA;indent = { tab-width = 2, unit = &#34;  &#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime Text via &lt;a href=&#34;https://github.com/bitsper2nd/LSP-marksman&#34;&gt;LSP-marksman&lt;/a&gt; (automatic server installation).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: use pre-built binary&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/artempyanykh/marksman/releases&#34;&gt;Releases&lt;/a&gt; page: each release has pre-built binaries for Linux, MacOS, and Windows. Download the binary for your OS.&lt;/li&gt; &#xA; &lt;li&gt;Rename the binary and make it executable: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MacOS: &lt;code&gt;mv marksman-macos marksman &amp;amp;&amp;amp; chmod +x marksman&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Linux: &lt;code&gt;mv marksman-linux marksman &amp;amp;&amp;amp; chmod +x marksman&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: rename &lt;code&gt;marksman-windows.exe&lt;/code&gt; to &lt;code&gt;marksman.exe&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Place the binary somewhere in your &lt;code&gt;PATH&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;XDG recommends using &lt;code&gt;$HOME/.local/bin/&lt;/code&gt; (make sure this folder is in your &lt;code&gt;PATH&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Option 2: build from source&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://dotnet.microsoft.com/en-us/download&#34;&gt;Dotnet SDK&lt;/a&gt; for your OS.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/artempyanykh/marksman.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inside &lt;code&gt;marksman&lt;/code&gt; folder run &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The binary will be installed under &lt;code&gt;$HOME/.local/bin&lt;/code&gt; (make sure this folder is in your &lt;code&gt;PATH&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Below is a mix of VSCode, Neovim, and Emacs screenshots. Although, not all features demonstrated for each editor, generally most features should work equaly in all editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Document symbols&lt;/strong&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/document-symbols.gif&#34; alt=&#34;Document Symbols&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hover preview&lt;/strong&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/hover.gif&#34; alt=&#34;Hover&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completion&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/completion-markdown.gif&#34; alt=&#34;Completion Markdown&#34;&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/completion-wiki.gif&#34; alt=&#34;Completion Wiki&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Find references&lt;/strong&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/find-references.gif&#34; alt=&#34;Find references&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project-wide diagnostics&lt;/strong&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/diagnostics.gif&#34; alt=&#34;Diagnostics&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rename refactor for headings and reference links&lt;/strong&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/rename.gif&#34; alt=&#34;Rename Refactor&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features and plans&lt;/h2&gt; &#xA;&lt;p&gt;✅ - done; 🗓 - planned.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Document symbols from headings.&lt;/li&gt; &#xA; &lt;li&gt;✅ Workspace symbols from headings. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Query matching is subsequence-based, that is &lt;code&gt;lsp&lt;/code&gt; will match both &lt;code&gt;LSP&lt;/code&gt; and &lt;code&gt;Low Seimic Profile&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;✅ Completion for links (inline, reference, wiki).&lt;/li&gt; &#xA; &lt;li&gt;✅ Hover prevew for links.&lt;/li&gt; &#xA; &lt;li&gt;✅ &#34;Go to definition&#34; for links.&lt;/li&gt; &#xA; &lt;li&gt;✅ &#34;Find references&#34; for headings and links.&lt;/li&gt; &#xA; &lt;li&gt;✅ Diagnostics for wiki-links.&lt;/li&gt; &#xA; &lt;li&gt;✅ Support multi-folder workspaces.&lt;/li&gt; &#xA; &lt;li&gt;✅ Custom parser for more fine-grained note structure.&lt;/li&gt; &#xA; &lt;li&gt;🗓 Code Lens with &#34;# references&#34; on headings.&lt;/li&gt; &#xA; &lt;li&gt;✅ Rename refactor.&lt;/li&gt; &#xA; &lt;li&gt;🗓 Add support for images (diagnostics, completion, goto).&lt;/li&gt; &#xA; &lt;li&gt;🗓 Add &#34;check&#34; command for standalone workspace checking.&lt;/li&gt; &#xA; &lt;li&gt;🗓 Add &#34;build&#34; command that rewrites all cross-references into proper relative markdown links for further embedding into a static site generator such as Jekyll or Hakyll.&lt;/li&gt; &#xA; &lt;li&gt;🗓 Support for Jupyter notebooks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code actions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;: Marksman has a code action to create and update a table of contents of a document.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/assets/readme/gifs/toc.gif&#34; alt=&#34;Table of Contents&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Ignore files&lt;/h3&gt; &#xA;&lt;p&gt;Marksman by default reads ignore globs from &lt;code&gt;.gitignore&lt;/code&gt;, &lt;code&gt;.hgignore&lt;/code&gt;, and &lt;code&gt;.ignore&lt;/code&gt; and doesn&#39;t scan directories matching any of the glob patterns.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Marksman will only read &lt;strong&gt;top-level&lt;/strong&gt; ignore files, or in other words ignore files at the root of your workspace folder. This is unlike Git which supports ignore files inside any project folder. If the lack of support for non top-level ignore files affects your workflow do open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Workspace folders and project roots&lt;/h3&gt; &#xA;&lt;p&gt;The LSP specification is designed to work with projects rather than individual files&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/artempyanykh/marksman/main/#fn4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. How a root folder of a project is found varies between editors, but usually it&#39;s either&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;a root of the version control system (applicable to all languages),&lt;/li&gt; &#xA; &lt;li&gt;a folder with &lt;code&gt;.marksman.toml&lt;/code&gt; marker file (specific to Marksman integrations).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Therefore, in case Marksman doesn&#39;t provide Markdown language assist for your files and you don&#39;t understand why, you can either:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;check your project into version control, or&lt;/li&gt; &#xA; &lt;li&gt;create a &lt;code&gt;.marksman.toml&lt;/code&gt; at the root folder of your project, or&lt;/li&gt; &#xA; &lt;li&gt;refer to your editor/LSP client documentation regarding how project root is defined.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Where&#39;s &lt;code&gt;zeta-note&lt;/code&gt; and where&#39;s Rust?&lt;/h2&gt; &#xA;&lt;p&gt;After much deliberation, I&#39;ve decided that it&#39;d be &lt;em&gt;cheaper&lt;/em&gt; for me to write a new from-scratch implementation of the language server &lt;strong&gt;in F#&lt;/strong&gt; and add new features to it, than it is to add new features to the Rust version.&lt;/p&gt; &#xA;&lt;p&gt;The original Rust implementation is archived &lt;a href=&#34;https://github.com/artempyanykh/zeta-note&#34;&gt;in a separate repo&lt;/a&gt;. Further development will happen in this repository in F#.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span id=&#34;fn1&#34;&gt;[1]&lt;/span&gt;: You may have heard about &lt;a href=&#34;https://roamresearch.com&#34;&gt;Roam Research&lt;/a&gt;. This is a commercial implementation of the Zettelkasten method and another point of reference for what Marksman is about. However, unlike a proprietary Roam Research, Marksman is free, open-source and integrated into your favourite editor (albeit for not not as feature rich as Roam Research).&lt;/p&gt; &#xA;&lt;p&gt;&lt;span id=&#34;fn2&#34;&gt;[2]&lt;/span&gt;: There is an excellent VSCode extension called &lt;a href=&#34;https://github.com/svsool/vscode-memo&#34;&gt;Markdown Memo&lt;/a&gt;. You definitely need to check it out if you&#39;re primarily using VSCode as it has some features that are missing in Marksman and &lt;a href=&#34;https://github.com/artempyanykh/marksman-vscode&#34;&gt;Marksman VSCode extension&lt;/a&gt;. However, Markdown Memo is VSCode specific while Marksman is a generic language server, so can be used with any editor that has LSP support: Emacs, Vim, Neovim, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span id=&#34;fn3&#34;&gt;[3]&lt;/span&gt;: Since Marksman is a regular Language Server most of the functionality works out of the box with any LSP client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span id=&#34;fn4&#34;&gt;[4]&lt;/span&gt;: There is an initiative to add a single-file mode to LSP but it&#39;s not a part of the spec at least until and including v3.17.&lt;/p&gt;</summary>
  </entry>
</feed>