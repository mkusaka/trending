<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:50:26Z</updated>
  <subtitle>Weekly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fsprojects/Avalonia.FuncUI</title>
    <updated>2023-11-26T01:50:26Z</updated>
    <id>tag:github.com,2023-11-26:/fsprojects/Avalonia.FuncUI</id>
    <link href="https://github.com/fsprojects/Avalonia.FuncUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Develop cross-plattform GUI Applications using F# and Avalonia!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://vshymanskyy.github.io/StandWithUkraine&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg?sanitize=true&#34; alt=&#34;Stand With Ukraine&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fsprojects/Avalonia.FuncUI/master/github/img/logo/FuncUI_Boxed.png&#34; width=&#34;32px&#34; alt=&#34;Avalonia FuncUI&#34;&gt; Avalonia FuncUI &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Develop cross-platform GUI Applications using &lt;a href=&#34;https://fsharp.org&#34;&gt;F#&lt;/a&gt;&lt;a&gt; and &lt;/a&gt;&lt;a href=&#34;https://github.com/AvaloniaUI/Avalonia&#34;&gt;AvaloniaUI&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/fsprojects/Avalonia.FuncUI&#34; alt=&#34;GitHub top language&#34;&gt; &lt;img alt=&#34;GitHub repo size&#34; src=&#34;https://img.shields.io/github/repo-size/fsprojects/Avalonia.FuncUI&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/fsprojects/Avalonia.FuncUI&#34;&gt; &lt;img alt=&#34;Nuget (with prereleases)&#34; src=&#34;https://img.shields.io/nuget/vpre/Avalonia.FuncUI?color=green&amp;amp;label=package%20Avalonia.FuncUI&#34;&gt; &lt;/p&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fsprojects/Avalonia.FuncUI/master/github/img/hero-multiple-apps.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;FuncUI is a thin layer built on top of &lt;a href=&#34;https://github.com/AvaloniaUI/Avalonia&#34;&gt;AvaloniaUI&lt;/a&gt;. It contains abstractions for writing UI applications in different programming styles. It also contains a component &amp;amp; state management system.&lt;/p&gt; &#xA;&lt;p&gt;FuncUI mostly consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Virtual DOM&lt;/li&gt; &#xA; &lt;li&gt;View DSL&lt;/li&gt; &#xA; &lt;li&gt;Component model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ’¨ &lt;a href=&#34;https://funcui.avaloniaui.net&#34;&gt;Getting started&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ“š &lt;a href=&#34;https://funcui.avaloniaui.net/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ðŸ““ &lt;a href=&#34;https://github.com/fsprojects/Avalonia.FuncUI/tree/master/src/Examples&#34;&gt;Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please contribute to this library through issue reports, pull requests, code reviews, documentation, and discussion.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Example using components&lt;/h3&gt; &#xA;&lt;p&gt;A simple counter made with the component library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;type Components =&#xA;    static member Counter () =&#xA;        Component (fun ctx -&amp;gt;&#xA;            let state = ctx.useState 0&#xA;    &#xA;            DockPanel.create [&#xA;                DockPanel.children [&#xA;                    Button.create [&#xA;                        Button.onClick (fun _ -&amp;gt; state.Set(state.Current - 1))&#xA;                        Button.content &#34;click to decrement&#34;&#xA;                    ]&#xA;                    Button.create [&#xA;                        Button.onClick (fun _ -&amp;gt; state.Set(state.Current + 1))&#xA;                        Button.content &#34;click to increment&#34;&#xA;                    ]&#xA;                    TextBlock.create [&#xA;                        TextBlock.dock Dock.Top&#xA;                        TextBlock.text (string state.Current)&#xA;                    ]&#xA;                ]&#xA;            ]&#xA;        )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find more examples using components in the &lt;a href=&#34;https://github.com/fsprojects/Avalonia.FuncUI/tree/master/src/Examples/Component%20Examples&#34;&gt;Components Examples folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example using Elmish&lt;/h3&gt; &#xA;&lt;p&gt;The same counter as above but using the &lt;code&gt;Avalonia.FuncUI.Elmish&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-f#&#34;&gt;module Counter =&#xA;&#xA;    type CounterState = {&#xA;        count : int&#xA;    }&#xA;&#xA;    let init = {&#xA;        count = 0&#xA;    }&#xA;&#xA;    type Msg =&#xA;        | Increment&#xA;        | Decrement&#xA;&#xA;    let update (msg: Msg) (state: CounterState) : CounterState =&#xA;        match msg with&#xA;        | Increment -&amp;gt; { state with count =  state.count + 1 }&#xA;        | Decrement -&amp;gt; { state with count =  state.count - 1 }&#xA;    &#xA;    let view (state: CounterState) (dispatch): IView =&#xA;        DockPanel.create [&#xA;            DockPanel.children [&#xA;                Button.create [&#xA;                    Button.onClick (fun _ -&amp;gt; dispatch Increment)&#xA;                    Button.content &#34;click to increment&#34;&#xA;                ]&#xA;                Button.create [&#xA;                    Button.onClick (fun _ -&amp;gt; dispatch Decrement)&#xA;                    Button.content &#34;click to decrement&#34; &#xA;                ]&#xA;                TextBlock.create [&#xA;                    TextBlock.dock Dock.Top&#xA;                    TextBlock.text (sprintf &#34;the count is %i&#34; state.count)&#xA;                ]&#xA;            ]&#xA;        ]    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find more examples using Elmish in the &lt;a href=&#34;https://github.com/fsprojects/Avalonia.FuncUI/tree/master/src/Examples/Elmish%20Examples&#34;&gt;Elmish Examples folder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Maintainer(s)&lt;/h1&gt; &#xA;&lt;p&gt;The current co-maintainers of Avalonia.FuncUI are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@JordanMarr&lt;/li&gt; &#xA; &lt;li&gt;@sleepyfran&lt;/li&gt; &#xA; &lt;li&gt;@JaggerJo (project originator)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default maintainer account for projects under &#34;fsprojects&#34; is @fsprojectsgit - F# Community Project Incubation Space (repo management)&lt;/p&gt;</summary>
  </entry>
</feed>