<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:54:10Z</updated>
  <subtitle>Weekly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JordanMarr/Elmish.Avalonia</title>
    <updated>2023-02-26T01:54:10Z</updated>
    <id>tag:github.com,2023-02-26:/JordanMarr/Elmish.Avalonia</id>
    <link href="https://github.com/JordanMarr/Elmish.Avalonia" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static Avalonia views for Elmish programs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elmish.Avalonia&lt;/h1&gt; &#xA;&lt;p&gt;Static Avalonia views for Elmish programs&lt;/p&gt; &#xA;&lt;p&gt;This project is a port of the awesome &lt;a href=&#34;https://github.com/elmish/Elmish.WPF&#34;&gt;Elmish.WPF&lt;/a&gt; library. Most of the codebase is directly copied, but the WPF bits have been replaced with Avalonia bits and adapted where necessary. There is a sample project here to get you started, but there is a plethora of &lt;a href=&#34;https://github.com/elmish/Elmish.WPF/tree/master/src/Samples&#34;&gt;Elmish.WPF examples&lt;/a&gt; that you can also refer to.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Avalonia.FuncUI already exists and it is fantastic. So then why make an Elmish.Avalonia port?&lt;/p&gt; &#xA;&lt;h3&gt;Benefits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some people may prefer using xaml, and it can be an easier sell for some teams due to the immediate availability of all community controls.&lt;/li&gt; &#xA; &lt;li&gt;Bindings have to be created for controls. Some controls (such as the DataGrid) are too &#34;OOP&#34; and are difficult or impossible to create bindings for. This makes a library like Elmish.Avalonia very useful.&lt;/li&gt; &#xA; &lt;li&gt;There is not currently a reliable design preview tool (there is a very experimental project, but the author has stopped working on it and it&#39;s way too complex for me to want to mess with it). For me to do any kind of real project work with Avalonia and F#, I feel that a design preview is a necessity. After recently trying Elmish.WPF, I fell in love with the &lt;code&gt;ViewModel.designInstance&lt;/code&gt; preview functionality that lets you preview your &lt;code&gt;init&lt;/code&gt; values in the design preview panel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other reasons&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avalonia UI is a big deal in the .NET OSS community; it is always nice for F# community to be able to participate in the latest and greatest with as many options as possible.&lt;/li&gt; &#xA; &lt;li&gt;Avalonia already provides first class templates to create an F# project that include creating .axaml views within the same project! (Not possible with WPF!)&lt;/li&gt; &#xA; &lt;li&gt;While the built-in F# templates do allow you to do classic MVVM style, Elmish is more powerful and has become the standard for F# UI projects.&lt;/li&gt; &#xA; &lt;li&gt;The &#34;Avalonia UI for Visual Studio 2022&#34; extension provides a xaml preview pane that works with F#! ðŸ˜„ (Also not possible with WPF!)&lt;/li&gt; &#xA; &lt;li&gt;The Elmish.WPF &lt;code&gt;ViewModel.designInstance&lt;/code&gt; concept works with this extension very well. This allows you populate your &#34;Design Preview&#34; window with the defaults from your Elmish &lt;code&gt;init&lt;/code&gt; function!&lt;/li&gt; &#xA; &lt;li&gt;Keeping with tradition that the F# community will &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/fsharp/strategy&#34;&gt;provide important libraries, developer tools and workload support&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sample App&lt;/h1&gt; &#xA;&lt;p&gt;The included sample app shows a obligatory Elmish counter app, and also the Avalonia DataGrid control.&lt;/p&gt; &#xA;&lt;h2&gt;Design View&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t forget to install the &#34;Avalonia for Visual Studio 2022&#34; extension. JetBrains Rider also supports Avalonia previews out-of-the-box! &lt;a href=&#34;https://docs.avaloniaui.net/docs/getting-started/ide-support&#34;&gt;https://docs.avaloniaui.net/docs/getting-started/ide-support&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1030435/219173023-a47d5d9b-8926-4f9d-833b-1406661e1c82.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Runtime View&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1030435/219145003-b4168921-ddab-41bc-92ea-d3f432fbc844.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;View Model&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1030435/219173496-2c10fc75-933a-4ca0-9825-ba62e5e24d8e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Master View&lt;/h2&gt; &#xA;&lt;p&gt;The sample project uses the &lt;code&gt;ViewLocator&lt;/code&gt; to instantiate the view, bind the Elmish view model and start the Elmish loop. Since the design preview is set for both the &lt;code&gt;MasterView&lt;/code&gt; and the &lt;code&gt;CounterView&lt;/code&gt;, we are able to see the counter on the &lt;code&gt;MasterView&lt;/code&gt; design preview!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1030435/219421157-cfa2254c-a1aa-417c-9a8b-69a5bc4ef038.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Project Setup&lt;/h1&gt; &#xA;&lt;p&gt;As of now, the easiest way to get started is to copy the included &lt;code&gt;AvaloniaExample&lt;/code&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Here are some key differences from the default F# MVVM template in the &lt;code&gt;AvaloniaExample&lt;/code&gt; project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;code&gt;Avalonia.ReactiveUI&lt;/code&gt; package has been replaced with the &lt;code&gt;Elmish.Avalonia&lt;/code&gt; package.&lt;/li&gt; &#xA; &lt;li&gt;In &lt;code&gt;Program.fs&lt;/code&gt;, &lt;code&gt;.UseReactiveUI()&lt;/code&gt; has been replaced with &lt;code&gt;.UseElmishBindings()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The template &lt;code&gt;ViewLocator&lt;/code&gt; has code has been modified to work with a custom &lt;code&gt;IStart&lt;/code&gt; that makes it easier to bind the view/viewmodel and start the Elmish loop. This allows us to bind the &lt;code&gt;MainView.axaml&lt;/code&gt; &lt;code&gt;Content&lt;/code&gt; via the &lt;code&gt;ViewLocator&lt;/code&gt; to locate the appropriate view and start the Elmish loop.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>