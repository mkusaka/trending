<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:49:45Z</updated>
  <subtitle>Weekly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>razzmatazz/csharp-language-server</title>
    <updated>2023-12-24T01:49:45Z</updated>
    <id>tag:github.com,2023-12-24:/razzmatazz/csharp-language-server</id>
    <link href="https://github.com/razzmatazz/csharp-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Roslyn-based LSP language server for C#&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;This is a hacky Roslyn-based LSP server for C#, as an alternative to &lt;a href=&#34;https://github.com/OmniSharp/omnisharp-roslyn&#34;&gt;omnisharp-roslyn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp-ls&lt;/code&gt; requires .NET 7 SDK to be installed. However it has been reported to work with projects using older versions of dotnet SDK, including .NET Core 3, .NET Framework 4.8 and possibly older ones too as it uses the standard Roslyn/MSBuild libs that Visual Studio &amp;amp; omnisharp does.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/razzmatazz/csharp-language-server/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for the list of recent improvements/fixes.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;csharp-ls is not affiliated with Microsoft Corp;&lt;/li&gt; &#xA; &lt;li&gt;csharp-ls uses LSP interface from &lt;a href=&#34;https://github.com/ionide/LanguageServerProtocol&#34;&gt;Ionide.LanguageServerProtocol&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;csharp-ls uses &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt; to parse and update code; Roslyn maps really nicely to LSP w/relatively little impedance mismatch;&lt;/li&gt; &#xA; &lt;li&gt;csharp-ls uses &lt;a href=&#34;https://github.com/icsharpcode/ILSpy&#34;&gt;ILSpy/ICSharpCode.Decompiler&lt;/a&gt; to decompile types in assemblies to C# source.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;dotnet tool install --global csharp-ls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.nuget.org/packages/csharp-ls/&#34;&gt;csharp-ls nuget page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Settings&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;csharp.solution&lt;/code&gt; - solution to load, optional&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Clients/Editor plugins&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;csharp-ls&lt;/code&gt; implements the standard LSP protocol to interact with your editor. However there are some features that need a non-standard implementation and this is where editor-specific plugins can be helpful.&lt;/p&gt; &#xA;&lt;h2&gt;Emacs&lt;/h2&gt; &#xA;&lt;h3&gt;emacs/lsp-mode&lt;/h3&gt; &#xA;&lt;p&gt;Supports automatic installation, go-to-metatada (can view code from nuget/compiled dlls) and some additional features.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/emacs-lsp/lsp-mode&#34;&gt;emacs/lsp-mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Visual Studio Code&lt;/h2&gt; &#xA;&lt;h3&gt;vytautassurvila/vscode-csharp-ls&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports code decompilation from metadata&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vytautassurvila.csharp-ls&#34;&gt;csharp-ls&lt;/a&gt; and &lt;a href=&#34;https://github.com/vytautassurvila/vscode-csharp-ls&#34;&gt;vscode-csharp-ls @ github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;statiolake/vscode-csharp-ls&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=statiolake.vscode-csharp-ls&#34;&gt;vscode-csharp-ls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;On Linux/macOS&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ (cd src &amp;amp;&amp;amp; dotnet build)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;symbol rename;&lt;/li&gt; &#xA; &lt;li&gt;code refactorings from roslyn;&lt;/li&gt; &#xA; &lt;li&gt;go-to-definition;&lt;/li&gt; &#xA; &lt;li&gt;find references;&lt;/li&gt; &#xA; &lt;li&gt;document/workspace symbol search;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;textDocument/documentHighlight&lt;/code&gt; support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;highlighting other symbol references in the document on hover;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;codeAction/resolve&lt;/code&gt; support for better performance when invoking code actions;&lt;/li&gt; &#xA; &lt;li&gt;semantic token support (thanks to @tcx4c70);&lt;/li&gt; &#xA; &lt;li&gt;inlay hint support (thanks to @tcx4c70);&lt;/li&gt; &#xA; &lt;li&gt;go-to-definition in metadata support (needs integration from your LSP client).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;TODO list&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;check we&#39;re not doing lense stuff or other funny things on metadata code (emacs-lsp/lsp-mode issue?);&lt;/li&gt; &#xA; &lt;li&gt;find-refs is blocking r/w operations, request scheduling needs smarter refactoring; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;should we cancel existing ones? -- where cancellable? how to know?&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;support for pull diagnostics (lsp 3.17);&lt;/li&gt; &#xA; &lt;li&gt;go-to-def in metadata does not work for Attribute as those have Attribute suffix;&lt;/li&gt; &#xA; &lt;li&gt;progress support;&lt;/li&gt; &#xA; &lt;li&gt;properly escape docxml text, e.g. backquote is a special character in markdown;&lt;/li&gt; &#xA; &lt;li&gt;selection range provider&lt;/li&gt; &#xA; &lt;li&gt;ability to run tests / test browser support like fsac has?&lt;/li&gt; &#xA; &lt;li&gt;razorls integration (server-side)&lt;/li&gt; &#xA; &lt;li&gt;analyzer support&lt;/li&gt; &#xA; &lt;li&gt;code generator support&lt;/li&gt; &#xA; &lt;li&gt;vscode plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;decompile for your editor , with the example of neovim&lt;/h2&gt; &#xA;&lt;h3&gt;api&lt;/h3&gt; &#xA;&lt;p&gt;The api is &#34;csharp/metadata&#34;, in neovim ,you can request it like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  local result, err = client.request_sync(&#34;csharp/metadata&#34;, params, 10000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;sender&lt;/h4&gt; &#xA;&lt;p&gt;You need to send a uri, it is like&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;csharp:/metadata/projects/trainning2/assemblies/System.Console/symbols/System.Console.cs&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In neovim, it will be result(s) from vim.lsp.handles[&#34;textDocument/definition&#34;]&lt;/p&gt; &#xA;&lt;p&gt;and the key of uri is the key,&lt;/p&gt; &#xA;&lt;p&gt;The key to send is like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local params = {&#xA;&#x9;timeout = 5000,&#xA;&#x9;textDocument = {&#xA;&#x9;&#x9;uri = uri,&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key of textDocument is needed. And timeout is just for neovim. It is the same if is expressed by json.&lt;/p&gt; &#xA;&lt;h3&gt;receiver&lt;/h3&gt; &#xA;&lt;p&gt;The object received is like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;&#x9;projectName = &#34;csharp-test&#34;,&#xA;&#x9;assemblyName = &#34;System.Runtime&#34;,&#xA;&#x9;symbolName = &#34;System.String&#34;,&#xA;&#x9;source = &#34;using System.Buffers;\n ....&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And In neovim, You receive the &#34;result&#34; above, you can get the decompile source from&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local result, err = client.request_sync(&#34;csharp/metadata&#34;, params, 10000)&#xA;local source&#xA;if not err then&#xA;&#x9;source = result.result.source&#x9;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And there is a plugin of neovim for you to decompile it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chen244/csharpls-extended-lsp.nvim&#34;&gt;csharpls-extended-lsp.nvim&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>