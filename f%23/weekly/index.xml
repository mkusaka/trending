<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:42:27Z</updated>
  <subtitle>Weekly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CaptnCodr/Fli</title>
    <updated>2022-10-16T01:42:27Z</updated>
    <id>tag:github.com,2022-10-16:/CaptnCodr/Fli</id>
    <link href="https://github.com/CaptnCodr/Fli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Execute CLI commands from your F# code in F# style!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fli&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CaptnCodr/Fli/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/CaptnCodr/Fli/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/Fli/&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/v/fli?color=33cc56&#34; alt=&#34;Nuget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Execute CLI commands from your F# code in F# style!&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;Get it from Nuget: &lt;code&gt;dotnet add package Fli&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just &lt;code&gt;open Fli&lt;/code&gt; and start ...&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Shell CMD&#xA;    Command &#34;echo Hello World!&#34;&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that starts &lt;code&gt;CMD.exe&lt;/code&gt; as Shell and &lt;code&gt;echo Hello World!&lt;/code&gt; is the command to execute.&lt;/p&gt; &#xA;&lt;p&gt;Run a file with PowerShell from a specific directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Shell PWSH&#xA;    Command &#34;test.bat&#34;&#xA;    WorkingDirectory (Environment.GetFolderPath Environment.SpecialFolder.UserProfile)&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Executing programs with arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Exec &#34;path/to/executable&#34;&#xA;    Arguments &#34;--info&#34;&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;an example with &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Exec &#34;git&#34;&#xA;    Arguments [&#34;commit&#34;; &#34;-m&#34;; &#34;Fixing issue #1337.&#34;]&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add a verb to your executing program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Exec &#34;adobe.exe&#34;&#xA;    Arguments (Path.Combine ((Environment.GetFolderPath Environment.SpecialFolder.UserProfile), &#34;test.pdf&#34;))&#xA;    Verb &#34;open&#34;&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add environment variables for the executing program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Exec &#34;git&#34;&#xA;    EnvironmentVariables [(&#34;GIT_AUTHOR_NAME&#34;, &#34;Jon Doe&#34;); (&#34;GIT_AUTHOR_EMAIL&#34;, &#34;jon.doe@domain.com&#34;)]&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add credentials to program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Exec &#34;program&#34;&#xA;    Credentials (&#34;domain&#34;, &#34;bobk&#34;, &#34;password123&#34;)&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hint: Running a process as a different user is supported on all platforms. Other options (Domain, Password) are only available on Windows. As an alternative for not Windows based systems there is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Exec &#34;path/to/program&#34;&#xA;    Username &#34;admin&#34;&#xA;}&#xA;|&amp;gt; Command.execute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Command.execute&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Command.execute&lt;/code&gt; returns record: &lt;code&gt;type Output = { Text: string option; ExitCode: int; Error: string option }&lt;/code&gt; which has getter methods to get only one value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;toText: Output -&amp;gt; string&#xA;toExitCode: Output -&amp;gt; int&#xA;toError: Output -&amp;gt; string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Shell CMD&#xA;    Command &#34;echo Hello World!&#34;&#xA;}&#xA;|&amp;gt; Command.execute // { Text = Some &#34;Hello World!&#34;; ExitCode = 0; Error = None }&#xA;|&amp;gt; Output.toText // &#34;Hello World!&#34;&#xA;&#xA;// same with Output.toExitCode:&#xA;cli { ... }&#xA;|&amp;gt; Command.execute // { Text = Some &#34;Hello World!&#34;; ExitCode = 0; Error = None }&#xA;|&amp;gt; Output.toExitCode // 0&#xA;&#xA;// in case of an error:&#xA;cli { ... }&#xA;|&amp;gt; Command.execute // { Text = None; ExitCode = 1; Error = Some &#34;This is an error!&#34; }&#xA;|&amp;gt; Output.toError // &#34;This is an error!&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Command.toString&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Command.toString&lt;/code&gt; concatenates only the the executing shell/program + the given commands/arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Shell PS&#xA;    Command &#34;Write-Host Hello World!&#34;&#xA;}&#xA;|&amp;gt; Command.toString // &#34;powershell.exe -Command Write-Host Hello World!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;cli {&#xA;    Exec &#34;cmd.exe&#34;&#xA;    Arguments [ &#34;/C&#34;; &#34;echo&#34;; &#34;Hello World!&#34; ]&#xA;}&#xA;|&amp;gt; Command.toString // &#34;cmd.exe /C echo Hello World!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Builder operations:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;ShellContext&lt;/code&gt; operations (&lt;code&gt;cli { Shell ... }&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operation&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Fli.Shells&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Input&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WorkingDirectory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EnvironmentVariable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string * string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EnvironmentVariables&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(string * string) list&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;System.Text.Encoding&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;ExecContext&lt;/code&gt; operations (&lt;code&gt;cli { Exec ... }&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operation&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Exec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Arguments&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; / &lt;code&gt;string seq&lt;/code&gt; / &lt;code&gt;string list&lt;/code&gt; / &lt;code&gt;string array&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Input&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Verb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Username&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Credentials&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string * string * string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;WorkingDirectory&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EnvironmentVariable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string * string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EnvironmentVariables&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(string * string) list&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;System.Text.Encoding&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Currently provided &lt;code&gt;Fli.Shells&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CMD&lt;/code&gt; runs &lt;code&gt;cmd.exe /c ...&lt;/code&gt; or &lt;code&gt;cmd.exe /k ...&lt;/code&gt; (depends if &lt;code&gt;Input&lt;/code&gt; is provided or not)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PS&lt;/code&gt; runs &lt;code&gt;powershell.exe -Command ...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PWSH&lt;/code&gt; runs &lt;code&gt;pwsh.exe -Command ...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BASH&lt;/code&gt; runs &lt;code&gt;bash -c ...&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Something&#39;s missing?&lt;/h3&gt; &#xA;&lt;p&gt;Don&#39;t hesitate to open an &lt;a href=&#34;https://github.com/CaptnCodr/Fli/issues&#34;&gt;issue&lt;/a&gt; or start a &lt;a href=&#34;https://github.com/CaptnCodr/Fli/discussions&#34;&gt;discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Inspiration&lt;/h3&gt; &#xA;&lt;p&gt;Use CE&#39;s for command line interface commands came in mind while using &lt;a href=&#34;https://github.com/fsprojects/FsHttp&#34;&gt;FsHttp&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>