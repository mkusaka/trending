<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub F# Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-23T01:54:12Z</updated>
  <subtitle>Weekly Trending of F# in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ilari-makimattila/FCalculator</title>
    <updated>2023-07-23T01:54:12Z</updated>
    <id>tag:github.com,2023-07-23:/ilari-makimattila/FCalculator</id>
    <link href="https://github.com/ilari-makimattila/FCalculator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A mathematical expression evaluator written using the F# language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A mathematical expression library written in F# language&lt;/h1&gt; &#xA;&lt;p&gt;The parser can parse about any mathematical expression and evaluate the result, including static variables and custom functions.&lt;/p&gt; &#xA;&lt;p&gt;The parser is hand written using regular expressions (yes, I solved two problems ;) and simple string parsing. I wanted to do this without lexers and any stuff like that.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Simple expressions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FCalculator.Evaluator&#xA;&#xA;let result = EvaluateExpression &#34;1 + 2 * 3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Variables and functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FCalculator.Evaluator&#xA;&#xA;let myFuncs = [ (&#34;multiply&#34;, fun (args:obj list) -&amp;gt; (unbox args.[0]) * (unbox args.[1])) ] |&amp;gt; Map.ofList&#xA;let myVars = [ (&#34;x&#34;, box 4); (&#34;y&#34;, box 2) ] |&amp;gt; Map.ofList&#xA;&#xA;let result = EvaluateExpressionWithFunctionsAndVariables myFuncs myVars &#34;multiply(x, y)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Function and variable names are always case sensitive.&lt;/p&gt; &#xA;&lt;h3&gt;Parsing without evaluating&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fsharp&#34;&gt;open FCalculator.Parser&#xA;&#xA;let topNode = ParseExpression &#34;1 * (2 + 2) / 4&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;There is no error handling. You might get a SyntaxError exception but they&#39;re thrown only because something needs to be returned in those cases.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;This was my first touch to functional programming and I thought that writing a string parser and evaluating expression trees would be a fun exercise. And it was.&lt;/p&gt;</summary>
  </entry>
</feed>