<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:21:48Z</updated>
  <subtitle>Monthly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yihui/knitr</title>
    <updated>2023-10-01T02:21:48Z</updated>
    <id>tag:github.com,2023-10-01:/yihui/knitr</id>
    <link href="https://github.com/yihui/knitr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A general-purpose tool for dynamic report generation in R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;knitr&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yihui/knitr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/yihui/knitr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/yihui/knitr/actions/workflows/knitr-examples.yaml&#34;&gt;&lt;img src=&#34;https://github.com/yihui/knitr/actions/workflows/knitr-examples.yaml/badge.svg?sanitize=true&#34; alt=&#34;Check knitr examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/yihui/knitr?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/yihui/knitr/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=knitr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/knitr&#34; alt=&#34;CRAN release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The R package &lt;strong&gt;knitr&lt;/strong&gt; is a general-purpose literate programming engine, with lightweight API&#39;s designed to give users full control of the output without heavy coding work. It combines many features into one package with slight tweaks motivated from my everyday use of Sweave. See the package &lt;a href=&#34;https://yihui.org/knitr/&#34;&gt;homepage&lt;/a&gt; for details and examples. See &lt;a href=&#34;https://yihui.org/knitr/faq/&#34;&gt;FAQ&#39;s&lt;/a&gt; for a list of frequently asked questions (including where to ask questions).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the stable version on &lt;a href=&#34;https://cran.r-project.org/package=knitr&#34;&gt;CRAN&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;knitr&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install the development version (hourly build) from &lt;a href=&#34;https://yihui.r-universe.dev&#34;&gt;https://yihui.r-universe.dev&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(repos = c(&#xA;  yihui = &#39;https://yihui.r-universe.dev&#39;,&#xA;  CRAN = &#39;https://cloud.r-project.org&#39;&#xA;))&#xA;&#xA;install.packages(&#39;knitr&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;While Sweave and related add-on packages like &lt;a href=&#34;https://cran.r-project.org/package=cacheSweave&#34;&gt;&lt;strong&gt;cacheSweave&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/package=pgfSweave&#34;&gt;&lt;strong&gt;pgfSweave&lt;/strong&gt;&lt;/a&gt; are fairly good engines for literate programming in R, I often feel my hands are tied. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I stared at the source code of Sweave and wished for hundreds of times, &lt;em&gt;if only I could easily insert&lt;/em&gt; &lt;code&gt;[width=.8\textwidth]&lt;/code&gt; &lt;em&gt;between&lt;/em&gt; &lt;code&gt;\includegraphics&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;{my-plot.pdf}&lt;/code&gt;. (The official way in Sweave is &lt;code&gt;\setkeys{Gin}&lt;/code&gt; but it is setting a global width, which is unrealistic since we often have to set widths individually; yes, you can use &lt;code&gt;\setkeys{Gin}&lt;/code&gt; for many times, but why not just provide an option for each chunk?)&lt;/li&gt; &#xA; &lt;li&gt;I wished for many times, &lt;em&gt;if only I could use graphics devices other than PDF and postscript&lt;/em&gt;; now the dream has come true in the official R, but what I was hoping for was an option as simple as &lt;code&gt;dev = &#39;png&#39;&lt;/code&gt; or &lt;code&gt;dev = &#39;CairoJPEG&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I wished multiple plots in a code chunk could be recorded instead of only the last one.&lt;/li&gt; &#xA; &lt;li&gt;I wished there was a way to round the numbers in &lt;code&gt;\Sexpr{}&lt;/code&gt; other than writing expressions like &lt;code&gt;\Sexpr{round(x, 3)}&lt;/code&gt; for &lt;em&gt;each single&lt;/em&gt; &lt;code&gt;\Sexpr{}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;I wished I did not have to &lt;code&gt;print()&lt;/code&gt; plots from. &lt;a href=&#34;https://cran.r-project.org/package=ggplot2&#34;&gt;&lt;strong&gt;ggplot2&lt;/strong&gt;&lt;/a&gt; and a simple &lt;code&gt;qplot(x, y)&lt;/code&gt; would just give me a plot in Sweave.&lt;/li&gt; &#xA; &lt;li&gt;I wished users would never need instructions on &lt;code&gt;Sweave.sty&lt;/code&gt; or run into troubles due to the fact that LaTeX cannot find &lt;code&gt;Sweave.sty&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I wished &lt;strong&gt;cacheSweave&lt;/strong&gt; could print the results of a code chunk even if it was cached.&lt;/li&gt; &#xA; &lt;li&gt;I wished &lt;a href=&#34;https://cran.r-project.org/package=brew&#34;&gt;&lt;strong&gt;brew&lt;/strong&gt;&lt;/a&gt; could support graphics.&lt;/li&gt; &#xA; &lt;li&gt;I wished &lt;a href=&#34;https://cran.r-project.org/package=R2HTML&#34;&gt;&lt;strong&gt;R2HTML&lt;/strong&gt;&lt;/a&gt; could support R code syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/dp/1498716962/&#34;&gt;&lt;img src=&#34;http://i.imgur.com/yYw46aF.jpg&#34; align=&#34;right&#34; alt=&#34;The book Dynamic Documents with R and knitr&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The package &lt;strong&gt;knitr&lt;/strong&gt; was designed to give the user access to every part of the process of dealing with a literate programming document, so there is no need to hack at any core components if you want more freedom. I have gone through the source code of &lt;strong&gt;pgfSweave&lt;/strong&gt; and &lt;strong&gt;cacheSweave&lt;/strong&gt; for a couple of times and I often feel uncomfortable with the large amount of code copied from official R, especially when R has a new version released (I will begin to worry if the add-on packages are still up-to-date with the official Sweave).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr)&#xA;?knit&#xA;knit(input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If options are not explicitly specified, &lt;strong&gt;knitr&lt;/strong&gt; will try to guess reasonable default settings. A few manuals are available such as the &lt;a href=&#34;https://yihui.org/knitr/demo/manual/&#34;&gt;main manual&lt;/a&gt;, and the &lt;a href=&#34;https://yihui.org/knitr/demo/graphics/&#34;&gt;graphics manual&lt;/a&gt;. For a more organized reference, see the &lt;a href=&#34;https://www.amazon.com/dp/1498716962/&#34;&gt;knitr book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This package is free and open source software, licensed under GPL.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>r-lib/devtools</title>
    <updated>2023-10-01T02:21:48Z</updated>
    <id>tag:github.com,2023-10-01:/r-lib/devtools</id>
    <link href="https://github.com/r-lib/devtools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools to make an R developer&#39;s life easier&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;devtools &lt;a href=&#34;https://devtools.r-lib.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/r-lib/devtools/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/devtools/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/r-lib/devtools/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-lib/devtools?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-lib/devtools/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=devtools&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/devtools&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The aim of devtools is to make package development easier by providing R functions that simplify and expedite common tasks. &lt;a href=&#34;https://r-pkgs.org/&#34;&gt;R Packages&lt;/a&gt; is a book based around this workflow.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install devtools from CRAN&#xA;install.packages(&#34;devtools&#34;)&#xA;&#xA;# Or the development version from GitHub:&#xA;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;r-lib/devtools&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cheatsheet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rstudio/cheatsheets/main/package-development.pdf&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/cheatsheets/raw/main/pngs/thumbnails/package-development-thumbs.png&#34; height=&#34;252&#34; alt=&#34;thumbnail of package development cheatsheet&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All devtools functions accept a path as an argument, e.g. &lt;code&gt;load_all(&#34;path/to/mypkg&#34;)&lt;/code&gt;. If you don&#39;t specify a path, devtools will look in the current working directory - this is a recommended practice.&lt;/p&gt; &#xA;&lt;h3&gt;Frequent development tasks:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;load_all()&lt;/code&gt; simulates installing and reloading your package, loading R code in &lt;code&gt;R/&lt;/code&gt;, compiled shared objects in &lt;code&gt;src/&lt;/code&gt; and data files in &lt;code&gt;data/&lt;/code&gt;. During development you would usually want to access all functions (even un-exported internal ones) so &lt;code&gt;load_all()&lt;/code&gt; works as if all functions were exported in the package &lt;code&gt;NAMESPACE&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;document()&lt;/code&gt; updates generated documentation in &lt;code&gt;man/&lt;/code&gt;, file collation and &lt;code&gt;NAMESPACE&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;test()&lt;/code&gt; reloads your code with &lt;code&gt;load_all()&lt;/code&gt;, then runs all &lt;code&gt;testthat&lt;/code&gt; tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;test_coverage()&lt;/code&gt; runs test coverage on your package with &lt;a href=&#34;https://github.com/r-lib/covr&#34;&gt;covr&lt;/a&gt;. This makes it easy to see what parts of your package could use more tests!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building and installing:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;install()&lt;/code&gt; reinstalls the package, detaches the currently loaded version then reloads the new version with &lt;code&gt;library()&lt;/code&gt;. Reloading a package is not guaranteed to work: see the documentation for &lt;code&gt;unload()&lt;/code&gt; for caveats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;build()&lt;/code&gt; builds a package file from package sources. You can use it to build a binary version of your package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;install_*&lt;/code&gt; functions install an R package:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;install_github()&lt;/code&gt; from GitHub&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;install_gitlab()&lt;/code&gt; from GitLab&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;install_bitbucket()&lt;/code&gt; from Bitbucket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;install_url()&lt;/code&gt; from an arbitrary url&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;install_git()&lt;/code&gt; and &lt;code&gt;install_svn()&lt;/code&gt; from an arbitrary git or SVN repository&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;install_local()&lt;/code&gt; from a local file on disk&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;install_version()&lt;/code&gt; from a specific version on CRAN&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;update_packages()&lt;/code&gt; updates a package to the latest version. This works both on packages installed from CRAN as well as those installed from any of the &lt;code&gt;install_*&lt;/code&gt; functions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Check and release:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;check()&lt;/code&gt; updates the documentation, then builds and checks the package locally. &lt;code&gt;check_win()&lt;/code&gt; checks a package using &lt;a href=&#34;https://win-builder.r-project.org/&#34;&gt;win-builder&lt;/a&gt;, and &lt;code&gt;check_rhub()&lt;/code&gt; checks a package using &lt;a href=&#34;https://log.r-hub.io/&#34;&gt;r-hub&lt;/a&gt;. This allows you to easily check your package on all systems CRAN uses before submission.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;release()&lt;/code&gt; makes sure everything is ok with your package (including asking you a number of questions), then builds and uploads to CRAN.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learning more&lt;/h2&gt; &#xA;&lt;p&gt;R package development can be intimidating, however there are now a number of valuable resources to help!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://r-pkgs.org&#34;&gt;&lt;img src=&#34;http://r-pkgs.org/images/cover.png&#34; height=&#34;252&#34; align=&#34;right&#34; alt=&#34;Cover image of R Packages book&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;R Packages is a book that gives a comprehensive treatment of all common parts of package development and uses devtools throughout.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The first edition is available at &lt;a href=&#34;https://r-pkgs.org/&#34;&gt;https://r-pkgs.org/&lt;/a&gt;, but note that it has grown somewhat out of sync with the current version of devtools.&lt;/li&gt; &#xA;   &lt;li&gt;A second edition is under development and is evolving to reflect the current state of devtools. It is available at &lt;a href=&#34;https://r-pkgs.org&#34;&gt;https://r-pkgs.org&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://r-pkgs.org/whole-game.html&#34;&gt;Whole Game&lt;/a&gt; and &lt;a href=&#34;https://r-pkgs.org/package-structure-state.html&#34;&gt;Package structure&lt;/a&gt; chapters make great places to start.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://community.rstudio.com/c/package-development/11&#34;&gt;RStudio community - package development&lt;/a&gt; is a great place to ask specific questions related to package development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://devguide.ropensci.org/&#34;&gt;rOpenSci packages&lt;/a&gt; has extensive documentation on best practices for R packages looking to be contributed to rOpenSci, but also very useful general recommendations for package authors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are a number of fantastic blog posts on writing your first package, including&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/&#34;&gt;Writing an R package from scratch - Hilary Parker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://masalmon.eu/2017/12/11/goodrpackages/&#34;&gt;How to develop good R packages - Maëlle Salmon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://tinyheero.github.io/jekyll/update/2015/07/26/making-your-first-R-package.html&#34;&gt;Making your first R package - Fong Chun Chan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r-mageddon.netlify.app/post/writing-an-r-package-from-scratch/&#34;&gt;Writing an R package from scratch - Tomas Westlake&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/doc/manuals/r-release/R-exts.html&#34;&gt;Writing R Extensions&lt;/a&gt; is the exhaustive, canonical reference for writing R packages, maintained by the R core developers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Conscious uncoupling&lt;/h2&gt; &#xA;&lt;p&gt;devtools started off as a lean-and-mean package to facilitate local package development, but over the years it accumulated more and more functionality. devtools has undergone a &lt;a href=&#34;https://web.archive.org/web/20140326060230/https://www.goop.com/journal/be/conscious-uncoupling&#34;&gt;conscious uncoupling&lt;/a&gt; to split out functionality into smaller, more tightly focussed packages. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/testthat&#34;&gt;testthat&lt;/a&gt;: Writing and running tests (i.e. &lt;code&gt;test()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/roxygen2&#34;&gt;roxygen2&lt;/a&gt;: Function and package documentation (i.e. &lt;code&gt;document()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/remotes&#34;&gt;remotes&lt;/a&gt;: Installing packages (i.e. &lt;code&gt;install_github()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/pkgbuild&#34;&gt;pkgbuild&lt;/a&gt;: Building binary packages (including checking if build tools are available) (i.e. &lt;code&gt;build()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/pkgload&#34;&gt;pkgload&lt;/a&gt;: Simulating package loading (i.e. &lt;code&gt;load_all()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/rcmdcheck&#34;&gt;rcmdcheck&lt;/a&gt;: Running R CMD check and reporting the results (i.e. &lt;code&gt;check()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/revdepcheck&#34;&gt;revdepcheck&lt;/a&gt;: Running R CMD check on all reverse dependencies, and figuring out what&#39;s changed since the last CRAN release (i.e. &lt;code&gt;revdep_check()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/sessioninfo&#34;&gt;sessioninfo&lt;/a&gt;: R session info (i.e. &lt;code&gt;session_info()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/usethis&#34;&gt;usethis&lt;/a&gt;: Automating package setup (i.e. &lt;code&gt;use_test()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Generally, you would not need to worry about these different packages, because devtools installs all of them automatically. You will need to care, however, if you&#39;re filing a bug because reporting it at the correct place will lead to a speedier resolution.&lt;/p&gt; &#xA;&lt;p&gt;You may also need to care if you are trying to use some devtools functionality in your own package or deployed application. Generally in these cases it is better to depend on the particular package directly rather than depend on devtools, e.g. use &lt;code&gt;sessioninfo::session_info()&lt;/code&gt; rather than &lt;code&gt;devtools::session_info()&lt;/code&gt;, or &lt;code&gt;remotes::install_github()&lt;/code&gt; vs &lt;code&gt;devtools::install_github()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However for day to day development we recommend you continue to use &lt;code&gt;library(devtools)&lt;/code&gt; to quickly load all needed development tools, just like &lt;code&gt;library(tidyverse)&lt;/code&gt; quickly loads all the tools necessary for data exploration and visualization.&lt;/p&gt; &#xA;&lt;h2&gt;Code of conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the devtools project is released with a &lt;a href=&#34;https://github.com/r-lib/devtools/raw/main/.github/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sjp/gridSVG</title>
    <updated>2023-10-01T02:21:48Z</updated>
    <id>tag:github.com,2023-10-01:/sjp/gridSVG</id>
    <link href="https://github.com/sjp/gridSVG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Do not use this version of gridSVG as it is out of date. The version on CRAN is newer and development occurs on R-Forge.&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;R-Forge SVN README&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This file explains the repository structure of your project. A more detailed guide to R-Forge is available by Theußl and Zeileis (2010) [1] and the R-Forge Administration and Development Team (2009) [2].&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Introduction&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;R is free software distributed under a GNU-style copyleft. R-Forge is a central platform for the development of R packages, R-related software and further projects. Among many other web-based features it provides facilities for collaborative source code management via Subversion (SVN) [3].&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;The directory you&#39;re in&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This is the repository of your project. It contains two important pre-defined directories namely &#39;pkg&#39; and &#39;www&#39;. These directories must not be deleted otherwise R-Forge&#39;s core functionality will not be available (i.e., daily checking and building of your package or the project websites). &#39;pkg&#39; and &#39;www&#39; are standardized and therefore are going to be described in this README. The rest of your repository can be used as you like.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#39;pkg&#39; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;To make use of the package building and checking feature the package source code has to be put into the &#39;pkg&#39; directory of your repository (i.e., &#39;pkg/DESCRIPTION&#39;, &#39;pkg/R&#39;, &#39;pkg/man&#39;, etc.) or, alternatively, a subdirectory of &#39;pkg&#39;. The latter structure allows for having more than one package in a single project, e.g., if a project consists of the packages foo and bar then the source code will be located in &#39;pkg/foo&#39; and &#39;pkg/bar&#39;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;R-Forge automatically examines the &#39;pkg&#39; directory of every repository and builds the package sources as well as the package binaries on a daily basis for Mac OS X and Windows (if applicable). The package builds are provided in the &#39;R Packages&#39; tab for download or can be installed directly in R from a CRAN-style repository using &#39;install.packages(&#34;foo&#34;, repos=&#34;&lt;a href=&#34;http://R-Forge.R-project.org&#34;&gt;http://R-Forge.R-project.org&lt;/a&gt;&#34;)&#39;. Furthermore, in the &#39;R Packages&#39; tab developers can examine logs generated on different platforms by the build and check process.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#39;www&#39; directory&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Developers may present their project on a subdomain of R-Forge, e.g., &#39;&lt;a href=&#34;http://foo.R-Forge.R-project.org&#34;&gt;http://foo.R-Forge.R-project.org&lt;/a&gt;&#39;, or via a link to an external website.&lt;/p&gt; &#xA;&lt;p&gt;This directory contains the project homepage which gets updated hourly on R-Forge, so please take into consideration that it will not be available right after you commit your changes or additions.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Help&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you need help don&#39;t hesitate to submit a support request at &lt;a href=&#34;https://r-forge.r-project.org/tracker/?func=add&amp;amp;group_id=34&amp;amp;atid=194&#34;&gt;https://r-forge.r-project.org/tracker/?func=add&amp;amp;group_id=34&amp;amp;atid=194&lt;/a&gt;, search the forum &lt;a href=&#34;https://r-forge.r-project.org/forum/forum.php?forum_id=78&amp;amp;group_id=34&#34;&gt;https://r-forge.r-project.org/forum/forum.php?forum_id=78&amp;amp;group_id=34&lt;/a&gt;, or contact us at &lt;a href=&#34;mailto:R-Forge@R-project.org&#34;&gt;R-Forge@R-project.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;References&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;[1] Stefan Theußl and Achim Zeileis. Collaborative software development using R-Forge. The R Journal, 1(1):9-14, May 2009. URL &lt;a href=&#34;http://journal.r-project.org/2009-1/RJournal_2009-1_Theussl+Zeileis.pdf&#34;&gt;http://journal.r-project.org/2009-1/RJournal_2009-1_Theussl+Zeileis.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[2] R-Forge Administration and Development Team. RForge User’s Manual, 2008. URL &lt;a href=&#34;http://download.R-Forge.R-project.org/R-Forge.pdf&#34;&gt;http://download.R-Forge.R-project.org/R-Forge.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[3] C. M. Pilato, B. Collins-Sussman, and B. W. Fitzpatrick. Version Control with Subversion. O’Reilly, 2004. Full book available online at &lt;a href=&#34;http://svnbook.red-bean.com/&#34;&gt;http://svnbook.red-bean.com/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>