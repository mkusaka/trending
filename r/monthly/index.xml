<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T02:11:02Z</updated>
  <subtitle>Monthly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rstudio/shiny</title>
    <updated>2024-04-01T02:11:02Z</updated>
    <id>tag:github.com,2024-04-01:/rstudio/shiny</id>
    <link href="https://github.com/rstudio/shiny" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy interactive web applications with R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shiny &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/shiny/main/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;120&#34; height=&#34;139&#34; alt=&#34;&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=shiny&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/shiny&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rstudio/shiny/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/shiny/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.posit.co/new-topic?category=shiny&amp;amp;tags=shiny&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/community-shiny-blue?style=social&amp;amp;logo=rstudio&amp;amp;logoColor=75AADB&#34; alt=&#34;RStudio community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Easily build rich and productive interactive web apps in R — no HTML/CSS/JavaScript required.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An intuitive and extensible &lt;a href=&#34;https://en.wikipedia.org/wiki/Reactive_programming&#34;&gt;reactive programming&lt;/a&gt; model which makes it easy to transform existing R code into a &#34;live app&#34; where outputs automatically react to new user input. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Compared to event-based programming, reactivity allows Shiny to do the minimum amount of work when input(s) change, and allows humans to more easily reason about complex &lt;a href=&#34;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34;&gt;MVC logic&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A prebuilt set of highly sophisticated, customizable, and easy-to-use widgets (e.g., plots, tables, sliders, dropdowns, date pickers, and more).&lt;/li&gt; &#xA; &lt;li&gt;An attractive default look based on &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; which can also be easily customized with the &lt;a href=&#34;https://github.com/rstudio/bslib&#34;&gt;bslib&lt;/a&gt; package or avoided entirely with more direct R bindings to HTML/CSS/JavaScript.&lt;/li&gt; &#xA; &lt;li&gt;Seamless integration with &lt;a href=&#34;https://shiny.rstudio.com/articles/interactive-docs.html&#34;&gt;R Markdown&lt;/a&gt;, making it easy to embed numerous applications natively within a larger dynamic document.&lt;/li&gt; &#xA; &lt;li&gt;Tools for improving and monitoring performance, including native support for &lt;a href=&#34;https://posit.co/blog/shiny-1-1-0/&#34;&gt;async programming&lt;/a&gt;, &lt;a href=&#34;https://talks.cpsievert.me/20201117&#34;&gt;caching&lt;/a&gt;, &lt;a href=&#34;https://rstudio.github.io/shinyloadtest/&#34;&gt;load testing&lt;/a&gt;, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shiny.rstudio.com/articles/modules.html&#34;&gt;Modules&lt;/a&gt;: a framework for reducing code duplication and complexity.&lt;/li&gt; &#xA; &lt;li&gt;An ability to &lt;a href=&#34;https://shiny.rstudio.com/articles/bookmarking-state.html&#34;&gt;bookmark application state&lt;/a&gt; and/or &lt;a href=&#34;https://github.com/rstudio/shinymeta&#34;&gt;generate code to reproduce output(s)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A rich ecosystem of extension packages for more &lt;a href=&#34;http://www.htmlwidgets.org/&#34;&gt;custom widgets&lt;/a&gt;, &lt;a href=&#34;https://github.com/rstudio/shinyvalidate&#34;&gt;input validation&lt;/a&gt;, &lt;a href=&#34;https://github.com/rstudio/shinytest&#34;&gt;unit testing&lt;/a&gt;, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the stable version from CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;shiny&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, load the library and run an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)&#xA;# Launches an app, with the app&#39;s source code included&#xA;runExample(&#34;06_tabsets&#34;)&#xA;# Lists more prepackaged examples&#xA;runExample()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples and inspiration, check out the &lt;a href=&#34;https://shiny.rstudio.com/gallery/&#34;&gt;Shiny User Gallery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For help with learning fundamental Shiny programming concepts, check out the &lt;a href=&#34;https://mastering-shiny.org/&#34;&gt;Mastering Shiny&lt;/a&gt; book and the &lt;a href=&#34;https://shiny.rstudio.com/tutorial/&#34;&gt;Shiny Tutorial&lt;/a&gt;. The former is currently more up-to-date with modern Shiny features, whereas the latter takes a deeper, more visual, dive into fundamental concepts.&lt;/p&gt; &#xA;&lt;h2&gt;Join the conversation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to chat about Shiny, meet other developers, or help us decide what to work on next, &lt;a href=&#34;https://discord.com/invite/yMGCamUMnS&#34;&gt;join us on Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;To ask a question about Shiny, please use the &lt;a href=&#34;https://forum.posit.co/new-topic?category=shiny&amp;amp;tags=shiny&#34;&gt;RStudio Community website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For bug reports, please use the &lt;a href=&#34;https://github.com/rstudio/shiny/issues&#34;&gt;issue tracker&lt;/a&gt; and also keep in mind that by &lt;a href=&#34;https://github.com/rstudio/shiny/wiki/Writing-Good-Bug-Reports&#34;&gt;writing a good bug report&lt;/a&gt;, you&#39;re more likely to get help with your problem.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to the &lt;strong&gt;shiny&lt;/strong&gt; package. Please see our &lt;a href=&#34;https://github.com/rstudio/shiny/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for detailed guidelines of how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The shiny package as a whole is licensed under the GPLv3. See the &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/shiny/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;R version support&lt;/h2&gt; &#xA;&lt;p&gt;Shiny is supported on the latest release version of R, as well as the previous four minor release versions of R. For example, if the latest release R version is 4.1, then that version is supported, as well as 4.0, 3.6, 3.5, and 3.4.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thomasp85/patchwork</title>
    <updated>2024-04-01T02:11:02Z</updated>
    <id>tag:github.com,2024-04-01:/thomasp85/patchwork</id>
    <link href="https://github.com/thomasp85/patchwork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Composer of ggplots&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;patchwork &lt;a href=&#34;https://patchwork.data-imaginist.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/patchwork/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;131.5&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thomasp85/patchwork/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/thomasp85/patchwork/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=patchwork&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version-ago/patchwork&#34; alt=&#34;CRAN_Release_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=patchwork&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/patchwork&#34; alt=&#34;CRAN_Download_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/thomasp85/patchwork?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/thomasp85/patchwork/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of &lt;code&gt;patchwork&lt;/code&gt; is to make it ridiculously simple to combine separate ggplots into the same graphic. As such it tries to solve the same problem as &lt;code&gt;gridExtra::grid.arrange()&lt;/code&gt; and &lt;code&gt;cowplot::plot_grid&lt;/code&gt; but using an API that incites exploration and iteration, and scales to arbitrarily complex layouts.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install patchwork from CRAN using &lt;code&gt;install.packages(&#39;patchwork&#39;)&lt;/code&gt;. Alternatively you can grab the development version from github using devtools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;thomasp85/patchwork&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic example&lt;/h2&gt; &#xA;&lt;p&gt;The usage of &lt;code&gt;patchwork&lt;/code&gt; is simple: just add plots together!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;library(patchwork)&#xA;&#xA;p1 &amp;lt;- ggplot(mtcars) + geom_point(aes(mpg, disp))&#xA;p2 &amp;lt;- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))&#xA;&#xA;p1 + p2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/patchwork/main/man/figures/README-example-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;patchwork provides rich support for arbitrarily complex layouts with full alignment. As an example, check out this very readable code for nesting three plots on top of a third:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p3 &amp;lt;- ggplot(mtcars) + geom_smooth(aes(disp, qsec))&#xA;p4 &amp;lt;- ggplot(mtcars) + geom_bar(aes(carb))&#xA;&#xA;(p1 | p2 | p3) /&#xA;      p4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/patchwork/main/man/figures/README-unnamed-chunk-2-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;patchwork can do so much more. Check out the guides for learning everything there is to know about all the different features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patchwork.data-imaginist.com/articles/patchwork.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patchwork.data-imaginist.com/articles/guides/assembly.html&#34;&gt;Assembling Plots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patchwork.data-imaginist.com/articles/guides/layout.html&#34;&gt;Defining Layouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patchwork.data-imaginist.com/articles/guides/annotation.html&#34;&gt;Adding Annotation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patchwork.data-imaginist.com/articles/guides/multipage.html&#34;&gt;Aligning across pages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the patchwork project is released with a &lt;a href=&#34;https://patchwork.data-imaginist.com/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/reticulate</title>
    <updated>2024-04-01T02:11:02Z</updated>
    <id>tag:github.com,2024-04-01:/rstudio/reticulate</id>
    <link href="https://github.com/rstudio/reticulate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R Interface to Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R Interface to Python&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/reticulate/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/reticulate/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The &lt;strong&gt;reticulate&lt;/strong&gt; package provides a comprehensive set of tools for interoperability between Python and R. The package includes facilities for:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/man/figures/reticulated_python.png&#34; alt=&#34;reticulated python&#34; width=&#34;200&#34; align=&#34;right&#34; style=&#34;margin-left: 15px;&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Calling Python from R in a variety of ways including R Markdown, sourcing Python scripts, importing Python modules, and using Python interactively within an R session.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Translation between R and Python objects (for example, between R and Pandas data frames, or between R matrices and NumPy arrays).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flexible binding to different versions of Python including virtual environments and Conda environments.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reticulate embeds a Python session within your R session, enabling seamless, high-performance interoperability. If you are an R developer that uses Python for some of your work or a member of data science team that uses both languages, reticulate can dramatically streamline your workflow!&lt;/p&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;Install the &lt;strong&gt;reticulate&lt;/strong&gt; package from CRAN as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;reticulate&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Python version&lt;/h4&gt; &#xA;&lt;p&gt;By default, reticulate uses an isolated python virtual environment named &#34;r-reticulate&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;use_python()&lt;/code&gt; function enables you to specify an alternate python, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(reticulate)&#xA;use_python(&#34;/usr/local/bin/python&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;use_virtualenv()&lt;/code&gt; and &lt;code&gt;use_condaenv()&lt;/code&gt; functions enable you to specify versions of Python in virtual or Conda environments, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(reticulate)&#xA;use_virtualenv(&#34;myenv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the article on &lt;a href=&#34;https://rstudio.github.io/reticulate/articles/versions.html&#34;&gt;Python Version Configuration&lt;/a&gt; for additional details.&lt;/p&gt; &#xA;&lt;h4&gt;Python packages&lt;/h4&gt; &#xA;&lt;p&gt;You can install any required Python packages using standard shell tools like &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;conda&lt;/code&gt;. Alternately, reticulate includes a set of functions for managing and installing packages within virtualenvs and Conda environments. See the article on &lt;a href=&#34;https://rstudio.github.io/reticulate/articles/python_packages.html&#34;&gt;Installing Python Packages&lt;/a&gt; for additional details.&lt;/p&gt; &#xA;&lt;h4&gt;Calling Python&lt;/h4&gt; &#xA;&lt;p&gt;There are a variety of ways to integrate Python code into your R projects:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/#python-in-r-markdown&#34;&gt;Python in R Markdown&lt;/a&gt; — A new Python language engine for R Markdown that supports bi-directional communication between R and Python (R chunks can access Python objects and vice-versa).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/#importing-python-modules&#34;&gt;Importing Python modules&lt;/a&gt; — The &lt;code&gt;import()&lt;/code&gt; function enables you to import any Python module and call it’s functions directly from R.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/#sourcing-python-scripts&#34;&gt;Sourcing Python scripts&lt;/a&gt; — The &lt;code&gt;source_python()&lt;/code&gt; function enables you to source a Python script the same way you would &lt;code&gt;source()&lt;/code&gt; an R script (Python functions and objects defined within the script become directly available to the R session).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/#python-repl&#34;&gt;Python REPL&lt;/a&gt; — The &lt;code&gt;repl_python()&lt;/code&gt; function creates an interactive Python console within R. Objects you create within Python are available to your R session (and vice-versa).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Each of these techniques is explained in more detail below.&lt;/p&gt; &#xA;&lt;h2&gt;Python in R Markdown&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;reticulate&lt;/strong&gt; package includes a Python engine for &lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown&lt;/a&gt; with the following features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run Python chunks in a single Python session embedded within your R session (shared variables/state between Python chunks)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Printing of Python output, including graphical output from &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access to objects created within Python chunks from R using the &lt;code&gt;py&lt;/code&gt; object (e.g. &lt;code&gt;py$x&lt;/code&gt; would access an &lt;code&gt;x&lt;/code&gt; variable created within Python from R).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access to objects created within R chunks from Python using the &lt;code&gt;r&lt;/code&gt; object (e.g. &lt;code&gt;r.x&lt;/code&gt; would access to &lt;code&gt;x&lt;/code&gt; variable created within R from Python)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Built in conversion for many Python object types is provided, including &lt;a href=&#34;https://numpy.org/&#34;&gt;NumPy&lt;/a&gt; arrays and &lt;a href=&#34;https://pandas.pydata.org/&#34;&gt;Pandas&lt;/a&gt; data frames. For example, you can use Pandas to read and manipulate data then easily plot the Pandas data frame using &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;ggplot2&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/man/figures/rmarkdown_engine_zoomed.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the reticulate Python engine is enabled by default within R Markdown whenever reticulate is installed.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://rstudio.github.io/reticulate/articles/r_markdown.html&#34;&gt;R Markdown Python Engine&lt;/a&gt; documentation for additional details.&lt;/p&gt; &#xA;&lt;h2&gt;Importing Python modules&lt;/h2&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;import()&lt;/code&gt; function to import any Python module and call it from R. For example, this code imports the Python &lt;code&gt;os&lt;/code&gt; module and calls the &lt;code&gt;listdir()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(reticulate)&#xA;os &amp;lt;- import(&#34;os&#34;)&#xA;os$listdir(&#34;.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; [1] &#34;.git&#34;             &#34;.gitignore&#34;       &#34;.Rbuildignore&#34;    &#34;.RData&#34;&#xA; [5] &#34;.Rhistory&#34;        &#34;.Rproj.user&#34;      &#34;.travis.yml&#34;      &#34;appveyor.yml&#34;&#xA; [9] &#34;DESCRIPTION&#34;      &#34;docs&#34;             &#34;external&#34;         &#34;index.html&#34;&#xA;[13] &#34;index.Rmd&#34;        &#34;inst&#34;             &#34;issues&#34;           &#34;LICENSE&#34;&#xA;[17] &#34;man&#34;              &#34;NAMESPACE&#34;        &#34;NEWS.md&#34;          &#34;pkgdown&#34;&#xA;[21] &#34;R&#34;                &#34;README.md&#34;        &#34;reticulate.Rproj&#34; &#34;src&#34;&#xA;[25] &#34;tests&#34;            &#34;vignettes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Functions and other data within Python modules and classes can be accessed via the &lt;code&gt;$&lt;/code&gt; operator (analogous to the way you would interact with an R list, environment, or reference class).&lt;/p&gt; &#xA;&lt;p&gt;Imported Python modules support code completion and inline help:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/man/figures/reticulate_completion.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://rstudio.github.io/reticulate/articles/calling_python.html&#34;&gt;Calling Python from R&lt;/a&gt; for additional details on interacting with Python objects from within R.&lt;/p&gt; &#xA;&lt;h2&gt;Sourcing Python scripts&lt;/h2&gt; &#xA;&lt;p&gt;You can source any Python script just as you would source an R script using the &lt;code&gt;source_python()&lt;/code&gt; function. For example, if you had the following Python script &lt;em&gt;flights.py&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas&#xA;def read_flights(file):&#xA;  flights = pandas.read_csv(file)&#xA;  flights = flights[flights[&#39;dest&#39;] == &#34;ORD&#34;]&#xA;  flights = flights[[&#39;carrier&#39;, &#39;dep_delay&#39;, &#39;arr_delay&#39;]]&#xA;  flights = flights.dropna()&#xA;  return flights&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can source the script and call the &lt;code&gt;read_flights()&lt;/code&gt; function as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source_python(&#34;flights.py&#34;)&#xA;flights &amp;lt;- read_flights(&#34;flights.csv&#34;)&#xA;&#xA;library(ggplot2)&#xA;ggplot(flights, aes(carrier, arr_delay)) + geom_point() + geom_jitter()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;code&gt;source_python()&lt;/code&gt; documentation for additional details on sourcing Python code.&lt;/p&gt; &#xA;&lt;h2&gt;Python REPL&lt;/h2&gt; &#xA;&lt;p&gt;If you want to work with Python interactively you can call the &lt;code&gt;repl_python()&lt;/code&gt; function, which provides a Python REPL embedded within your R session. Objects created within the Python REPL can be accessed from R using the &lt;code&gt;py&lt;/code&gt; object exported from reticulate. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/reticulate/main/man/figures/python_repl.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter &lt;code&gt;exit&lt;/code&gt; within the Python REPL to return to the R prompt.&lt;/p&gt; &#xA;&lt;p&gt;Note that Python code can also access objects from within the R session using the &lt;code&gt;r&lt;/code&gt; object (e.g. &lt;code&gt;r.flights&lt;/code&gt;). See the &lt;code&gt;repl_python()&lt;/code&gt; documentation for additional details on using the embedded Python REPL.&lt;/p&gt; &#xA;&lt;h2&gt;Type conversions&lt;/h2&gt; &#xA;&lt;p&gt;When calling into Python, R data types are automatically converted to their equivalent Python types. When values are returned from Python to R they are converted back to R types. Types are converted as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;R&lt;/th&gt; &#xA;   &lt;th&gt;Python&lt;/th&gt; &#xA;   &lt;th&gt;Examples&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Single-element atomic vector&lt;/td&gt; &#xA;   &lt;td&gt;Scalar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;, &lt;code&gt;1L&lt;/code&gt;, &lt;code&gt;TRUE&lt;/code&gt;, &lt;code&gt;&#34;foo&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Unnamed list or multi-element atomic vector&lt;/td&gt; &#xA;   &lt;td&gt;List&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;c(1.0, 2.0, 3.0)&lt;/code&gt;, &lt;code&gt;c(1L, 2L, 3L)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Named list&lt;/td&gt; &#xA;   &lt;td&gt;Dict&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;list(a = 1L, b = 2.0)&lt;/code&gt;, &lt;code&gt;dict(x = x_data)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix/Array&lt;/td&gt; &#xA;   &lt;td&gt;NumPy ndarray&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;matrix(c(1,2,3,4), nrow = 2, ncol = 2)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Data Frame&lt;/td&gt; &#xA;   &lt;td&gt;Pandas DataFrame&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;data.frame(x = c(1,2,3), y = c(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;))&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;Python function&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function(x) x + 1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NULL, TRUE, FALSE&lt;/td&gt; &#xA;   &lt;td&gt;None, True, False&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;TRUE&lt;/code&gt;, &lt;code&gt;FALSE&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If a Python object of a custom class is returned then an R reference to that object is returned. You can call methods and access properties of the object just as if it was an instance of an R reference class.&lt;/p&gt; &#xA;&lt;h2&gt;Learning more&lt;/h2&gt; &#xA;&lt;p&gt;The following articles cover the various aspects of using &lt;strong&gt;reticulate&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/articles/calling_python.html&#34;&gt;Calling Python from R&lt;/a&gt; — Describes the various ways to access Python objects from R as well as functions available for more advanced interactions and conversion behavior.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/articles/r_markdown.html&#34;&gt;R Markdown Python Engine&lt;/a&gt; — Provides details on using Python chunks within R Markdown documents, including how call Python code from R chunks and vice-versa.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/articles/versions.html&#34;&gt;Python Version Configuration&lt;/a&gt; — Describes facilities for determining which version of Python is used by reticulate within an R session.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/articles/python_packages.html&#34;&gt;Installing Python Packages&lt;/a&gt; — Documentation on installing Python packages from PyPI or Conda, and managing package installations using virtualenvs and Conda environments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/articles/package.html&#34;&gt;Using reticulate in an R Package&lt;/a&gt; — Guidelines and best practices for using reticulate in an R package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/articles/arrays.html&#34;&gt;Arrays in R and Python&lt;/a&gt; — Advanced discussion of the differences between arrays in R and Python and the implications for conversion and interoperability.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/reticulate/articles/python_primer.html&#34;&gt;Python Primer&lt;/a&gt; — Introduction to Python for R users.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why reticulate?&lt;/h2&gt; &#xA;&lt;p&gt;From the &lt;a href=&#34;https://en.wikipedia.org/wiki/Reticulated_python&#34;&gt;Wikipedia&lt;/a&gt; article on the reticulated python:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The reticulated python is a species of python found in Southeast Asia. They are the world’s longest snakes and longest reptiles…The specific name, reticulatus, is Latin meaning “net-like”, or reticulated, and is a reference to the complex colour pattern.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;From the &lt;a href=&#34;https://www.merriam-webster.com/dictionary/reticulate&#34;&gt;Merriam-Webster&lt;/a&gt; definition of reticulate:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;1: resembling a net or network; especially : having veins, fibers, or lines crossing a reticulate leaf. 2: being or involving evolutionary change dependent on genetic recombination involving diverse interbreeding populations.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The package enables you to &lt;em&gt;reticulate&lt;/em&gt; Python code into R, creating a new breed of project that weaves together the two languages.&lt;/p&gt;</summary>
  </entry>
</feed>