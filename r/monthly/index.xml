<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-01T02:05:40Z</updated>
  <subtitle>Monthly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kassambara/ggpubr</title>
    <updated>2022-12-01T02:05:40Z</updated>
    <id>tag:github.com,2022-12-01:/kassambara/ggpubr</id>
    <link href="https://github.com/kassambara/ggpubr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#39;ggplot2&#39; Based Publication Ready Plots&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kassambara/ggpubr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/kassambara/ggpubr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/ggpubr&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/ggpubr&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/ggpubr?color=orange&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ggpubr: ‘ggplot2’ Based Publication Ready Plots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;ggplot2, by Hadley Wickham,&lt;/a&gt; is an excellent and flexible package for elegant data visualization in R. However the default generated plots requires some formatting before we can send them for publication. Furthermore, to customize a ggplot, the syntax is opaque and this raises the level of difficulty for researchers with no advanced R programming skills.&lt;/p&gt; &#xA;&lt;p&gt;The ‘ggpubr’ package provides some easy-to-use functions for creating and customizing ‘ggplot2’- based publication ready plots.&lt;/p&gt; &#xA;&lt;p&gt;Find out more at &lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr/&#34; class=&#34;uri&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr/&#34;&gt;https://rpkgs.datanovia.com/ggpubr/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and loading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install from &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;CRAN&lt;/a&gt; as follow:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;ggpubr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or, install the latest version from &lt;a href=&#34;https://github.com/kassambara/ggpubr&#34;&gt;GitHub&lt;/a&gt; as follow:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install&#xA;if(!require(devtools)) install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;kassambara/ggpubr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distribution&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggpubr)&#xA;#&amp;gt; Loading required package: ggplot2&#xA;# Create some data format&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;set.seed(1234)&#xA;wdata = data.frame(&#xA;   sex = factor(rep(c(&#34;F&#34;, &#34;M&#34;), each=200)),&#xA;   weight = c(rnorm(200, 55), rnorm(200, 58)))&#xA;head(wdata, 4)&#xA;#&amp;gt;   sex   weight&#xA;#&amp;gt; 1   F 53.79293&#xA;#&amp;gt; 2   F 55.27743&#xA;#&amp;gt; 3   F 56.08444&#xA;#&amp;gt; 4   F 52.65430&#xA;&#xA;# Density plot with mean lines and marginal rug&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change outline and fill colors by groups (&#34;sex&#34;)&#xA;# Use custom palette&#xA;ggdensity(wdata, x = &#34;weight&#34;,&#xA;   add = &#34;mean&#34;, rug = TRUE,&#xA;   color = &#34;sex&#34;, fill = &#34;sex&#34;,&#xA;   palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Histogram plot with mean lines and marginal rug&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change outline and fill colors by groups (&#34;sex&#34;)&#xA;# Use custom color palette&#xA;gghistogram(wdata, x = &#34;weight&#34;,&#xA;   add = &#34;mean&#34;, rug = TRUE,&#xA;   color = &#34;sex&#34;, fill = &#34;sex&#34;,&#xA;   palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Box plots and violin plots&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load data&#xA;data(&#34;ToothGrowth&#34;)&#xA;df &amp;lt;- ToothGrowth&#xA;head(df, 4)&#xA;#&amp;gt;    len supp dose&#xA;#&amp;gt; 1  4.2   VC  0.5&#xA;#&amp;gt; 2 11.5   VC  0.5&#xA;#&amp;gt; 3  7.3   VC  0.5&#xA;#&amp;gt; 4  5.8   VC  0.5&#xA;&#xA;# Box plots with jittered points&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change outline colors by groups: dose&#xA;# Use custom color palette&#xA;# Add jitter points and change the shape by groups&#xA; p &amp;lt;- ggboxplot(df, x = &#34;dose&#34;, y = &#34;len&#34;,&#xA;                color = &#34;dose&#34;, palette =c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;),&#xA;                add = &#34;jitter&#34;, shape = &#34;dose&#34;)&#xA; p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-box-plot-dot-plots-strip-charts-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; &#xA; # Add p-values comparing groups&#xA; # Specify the comparisons you want&#xA;my_comparisons &amp;lt;- list( c(&#34;0.5&#34;, &#34;1&#34;), c(&#34;1&#34;, &#34;2&#34;), c(&#34;0.5&#34;, &#34;2&#34;) )&#xA;p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value&#xA;  stat_compare_means(label.y = 50)                   # Add global p-value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-box-plot-dot-plots-strip-charts-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA; &#xA;# Violin plots with box plots inside&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change fill color by groups: dose&#xA;# add boxplot with white fill color&#xA;ggviolin(df, x = &#34;dose&#34;, y = &#34;len&#34;, fill = &#34;dose&#34;,&#xA;         palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;),&#xA;         add = &#34;boxplot&#34;, add.params = list(fill = &#34;white&#34;))+&#xA;  stat_compare_means(comparisons = my_comparisons, label = &#34;p.signif&#34;)+ # Add significance levels&#xA;  stat_compare_means(label.y = 50)                                      # Add global the p-value &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-box-plot-dot-plots-strip-charts-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bar plots&lt;/h2&gt; &#xA;&lt;h3&gt;Demo data set&lt;/h3&gt; &#xA;&lt;p&gt;Load and prepare data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load data&#xA;data(&#34;mtcars&#34;)&#xA;dfm &amp;lt;- mtcars&#xA;# Convert the cyl variable to a factor&#xA;dfm$cyl &amp;lt;- as.factor(dfm$cyl)&#xA;# Add the name colums&#xA;dfm$name &amp;lt;- rownames(dfm)&#xA;# Inspect the data&#xA;head(dfm[, c(&#34;name&#34;, &#34;wt&#34;, &#34;mpg&#34;, &#34;cyl&#34;)])&#xA;#&amp;gt;                                name    wt  mpg cyl&#xA;#&amp;gt; Mazda RX4                 Mazda RX4 2.620 21.0   6&#xA;#&amp;gt; Mazda RX4 Wag         Mazda RX4 Wag 2.875 21.0   6&#xA;#&amp;gt; Datsun 710               Datsun 710 2.320 22.8   4&#xA;#&amp;gt; Hornet 4 Drive       Hornet 4 Drive 3.215 21.4   6&#xA;#&amp;gt; Hornet Sportabout Hornet Sportabout 3.440 18.7   8&#xA;#&amp;gt; Valiant                     Valiant 3.460 18.1   6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ordered bar plots&lt;/h3&gt; &#xA;&lt;p&gt;Change the fill color by the grouping variable “cyl”. Sorting will be done globally, but not by groups.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;          fill = &#34;cyl&#34;,               # change fill color by cyl&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;desc&#34;,          # Sort the value in dscending order&#xA;          sort.by.groups = FALSE,     # Don&#39;t sort inside each group&#xA;          x.text.angle = 90           # Rotate vertically x axis texts&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ordered-bar-plots-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sort bars inside each group. Use the argument &lt;strong&gt;sort.by.groups = TRUE&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;          fill = &#34;cyl&#34;,               # change fill color by cyl&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;asc&#34;,           # Sort the value in dscending order&#xA;          sort.by.groups = TRUE,      # Sort inside each group&#xA;          x.text.angle = 90           # Rotate vertically x axis texts&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ordered-bar-plots-by-groups-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Deviation graphs&lt;/h3&gt; &#xA;&lt;p&gt;The deviation graph shows the deviation of quantitatives values to a reference value. In the R code below, we’ll plot the mpg z-score from the mtcars dataset.&lt;/p&gt; &#xA;&lt;p&gt;Calculate the z-score of the mpg data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Calculate the z-score of the mpg data&#xA;dfm$mpg_z &amp;lt;- (dfm$mpg -mean(dfm$mpg))/sd(dfm$mpg)&#xA;dfm$mpg_grp &amp;lt;- factor(ifelse(dfm$mpg_z &amp;lt; 0, &#34;low&#34;, &#34;high&#34;), &#xA;                     levels = c(&#34;low&#34;, &#34;high&#34;))&#xA;# Inspect the data&#xA;head(dfm[, c(&#34;name&#34;, &#34;wt&#34;, &#34;mpg&#34;, &#34;mpg_z&#34;, &#34;mpg_grp&#34;, &#34;cyl&#34;)])&#xA;#&amp;gt;                                name    wt  mpg      mpg_z mpg_grp cyl&#xA;#&amp;gt; Mazda RX4                 Mazda RX4 2.620 21.0  0.1508848    high   6&#xA;#&amp;gt; Mazda RX4 Wag         Mazda RX4 Wag 2.875 21.0  0.1508848    high   6&#xA;#&amp;gt; Datsun 710               Datsun 710 2.320 22.8  0.4495434    high   4&#xA;#&amp;gt; Hornet 4 Drive       Hornet 4 Drive 3.215 21.4  0.2172534    high   6&#xA;#&amp;gt; Hornet Sportabout Hornet Sportabout 3.440 18.7 -0.2307345     low   8&#xA;#&amp;gt; Valiant                     Valiant 3.460 18.1 -0.3302874     low   6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an ordered barplot, colored according to the level of mpg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg_z&#34;,&#xA;          fill = &#34;mpg_grp&#34;,           # change fill color by mpg_level&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;asc&#34;,           # Sort the value in ascending order&#xA;          sort.by.groups = FALSE,     # Don&#39;t sort inside each group&#xA;          x.text.angle = 90,          # Rotate vertically x axis texts&#xA;          ylab = &#34;MPG z-score&#34;,&#xA;          xlab = FALSE,&#xA;          legend.title = &#34;MPG Group&#34;&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-deviation-graphs-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rotate the plot: use rotate = TRUE and sort.val = “desc”&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg_z&#34;,&#xA;          fill = &#34;mpg_grp&#34;,           # change fill color by mpg_level&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;desc&#34;,          # Sort the value in descending order&#xA;          sort.by.groups = FALSE,     # Don&#39;t sort inside each group&#xA;          x.text.angle = 90,          # Rotate vertically x axis texts&#xA;          ylab = &#34;MPG z-score&#34;,&#xA;          legend.title = &#34;MPG Group&#34;,&#xA;          rotate = TRUE,&#xA;          ggtheme = theme_minimal()&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-deviation-graphs-horizontal-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dot charts&lt;/h2&gt; &#xA;&lt;h3&gt;Lollipop chart&lt;/h3&gt; &#xA;&lt;p&gt;Lollipop chart is an alternative to bar plots, when you have a large set of values to visualize.&lt;/p&gt; &#xA;&lt;p&gt;Lollipop chart colored by the grouping variable “cyl”:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;ascending&#34;,                        # Sort value in descending order&#xA;           add = &#34;segments&#34;,                             # Add segments from y = 0 to dots&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-lollipop-chart-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sort in decending order. &lt;strong&gt;sorting = “descending”&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Rotate the plot vertically, using &lt;strong&gt;rotate = TRUE&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Sort the mpg value inside each group by using &lt;strong&gt;group = “cyl”&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;strong&gt;dot.size&lt;/strong&gt; to 6.&lt;/li&gt; &#xA; &lt;li&gt;Add mpg values as label. &lt;strong&gt;label = “mpg”&lt;/strong&gt; or &lt;strong&gt;label = round(dfm$mpg)&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;descending&#34;,                       # Sort value in descending order&#xA;           add = &#34;segments&#34;,                             # Add segments from y = 0 to dots&#xA;           rotate = TRUE,                                # Rotate vertically&#xA;           group = &#34;cyl&#34;,                                # Order by groups&#xA;           dot.size = 6,                                 # Large dot size&#xA;           label = round(dfm$mpg),                        # Add mpg values as dot labels&#xA;           font.label = list(color = &#34;white&#34;, size = 9, &#xA;                             vjust = 0.5),               # Adjust label parameters&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-lollipop-chart-rotate-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deviation graph:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use y = “mpg_z”&lt;/li&gt; &#xA; &lt;li&gt;Change segment color and size: add.params = list(color = “lightgray”, size = 2)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg_z&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;descending&#34;,                       # Sort value in descending order&#xA;           add = &#34;segments&#34;,                             # Add segments from y = 0 to dots&#xA;           add.params = list(color = &#34;lightgray&#34;, size = 2), # Change segment color and size&#xA;           group = &#34;cyl&#34;,                                # Order by groups&#xA;           dot.size = 6,                                 # Large dot size&#xA;           label = round(dfm$mpg_z,1),                        # Add mpg values as dot labels&#xA;           font.label = list(color = &#34;white&#34;, size = 9, &#xA;                             vjust = 0.5),               # Adjust label parameters&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )+&#xA;  geom_hline(yintercept = 0, linetype = 2, color = &#34;lightgray&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-lollipop-chart-deviation-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cleveland’s dot plot&lt;/h3&gt; &#xA;&lt;p&gt;Color y text by groups. Use y.text.col = TRUE.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;descending&#34;,                       # Sort value in descending order&#xA;           rotate = TRUE,                                # Rotate vertically&#xA;           dot.size = 2,                                 # Large dot size&#xA;           y.text.col = TRUE,                            # Color y text by groups&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )+&#xA;  theme_cleveland()                                      # Add dashed grids&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-cleveland-dot-plots-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;Find out more at &lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr/&#34; class=&#34;uri&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr/&#34;&gt;https://rpkgs.datanovia.com/ggpubr/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blog posts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A. Kassambara. &lt;a href=&#34;http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/&#34;&gt;ggpubr R Package: ggplot2-Based Publication Ready Plots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>easystats/performance</title>
    <updated>2022-12-01T02:05:40Z</updated>
    <id>tag:github.com,2022-12-01:/easystats/performance</id>
    <link href="https://github.com/easystats/performance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💪 Models&#39; quality and performance metrics (R2, ICC, LOO, AIC, BF, ...)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;performance &lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doi.org/10.21105/joss.03139&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.03139/status.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=performance&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/performance&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cranlogs.r-pkg.org/&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/performance&#34; alt=&#34;total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=performance&#34;&gt;&lt;img src=&#34;https://tinyverse.netlify.com/badge/performance&#34; alt=&#34;status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Test if your model is a good model!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A crucial aspect when building regression models is to evaluate the quality of modelfit. It is important to investigate how well models fit to the data and which fit indices to report. Functions to create diagnostic plots or to compute fit measures do exist, however, mostly spread over different packages. There is no unique and consistent approach to assess the model quality for different kind of models.&lt;/p&gt; &#xA;&lt;p&gt;The primary goal of the &lt;strong&gt;performance&lt;/strong&gt; package is to fill this gap and to provide utilities for computing &lt;strong&gt;indices of model quality&lt;/strong&gt; and &lt;strong&gt;goodness of fit&lt;/strong&gt;. These include measures like r-squared (R2), root mean squared error (RMSE) or intraclass correlation coefficient (ICC) , but also functions to check (mixed) models for overdispersion, zero-inflation, convergence or singularity.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=performance&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/performance&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.r-universe.dev&#34;&gt;&lt;img src=&#34;https://easystats.r-universe.dev/badges/performance&#34; alt=&#34;performance status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/easystats/performance/actions&#34;&gt;&lt;img src=&#34;https://github.com/easystats/performance/workflows/R-CMD-check/badge.svg?branch=main&#34; alt=&#34;R check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;performance&lt;/em&gt; package is available on CRAN, while its latest development version is available on R-universe (from &lt;em&gt;rOpenSci&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Release&lt;/td&gt; &#xA;   &lt;td&gt;CRAN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;performance&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;R-universe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;performance&#34;, repos = &#34;https://easystats.r-universe.dev&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Once you have downloaded the package, you can then load it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#34;performance&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Instead of &lt;code&gt;library(performance)&lt;/code&gt;, use &lt;code&gt;library(easystats)&lt;/code&gt;. This will make all features of the easystats-ecosystem available.&lt;/p&gt; &#xA; &lt;p&gt;To stay updated, use &lt;code&gt;easystats::install_latest()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;To cite performance in publications use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;citation(&#34;performance&#34;)&#xA;#&amp;gt; &#xA;#&amp;gt; To cite package &#39;performance&#39; in publications use:&#xA;#&amp;gt; &#xA;#&amp;gt;   Lüdecke et al., (2021). performance: An R Package for Assessment, Comparison and&#xA;#&amp;gt;   Testing of Statistical Models. Journal of Open Source Software, 6(60), 3139.&#xA;#&amp;gt;   https://doi.org/10.21105/joss.03139&#xA;#&amp;gt; &#xA;#&amp;gt; A BibTeX entry for LaTeX users is&#xA;#&amp;gt; &#xA;#&amp;gt;   @Article{,&#xA;#&amp;gt;     title = {{performance}: An {R} Package for Assessment, Comparison and Testing of Statistical Models},&#xA;#&amp;gt;     author = {Daniel Lüdecke and Mattan S. Ben-Shachar and Indrajeet Patil and Philip Waggoner and Dominique Makowski},&#xA;#&amp;gt;     year = {2021},&#xA;#&amp;gt;     journal = {Journal of Open Source Software},&#xA;#&amp;gt;     volume = {6},&#xA;#&amp;gt;     number = {60},&#xA;#&amp;gt;     pages = {3139},&#xA;#&amp;gt;     doi = {10.21105/joss.03139},&#xA;#&amp;gt;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;There is a nice introduction into the package on &lt;a href=&#34;https://www.youtube.com/watch?v=EPIxQ5i5oxs&#34;&gt;youtube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The &lt;em&gt;performance&lt;/em&gt; workflow&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/main/man/figures/figure_workflow.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h3&gt;Assessing model quality&lt;/h3&gt; &#xA;&lt;h4&gt;R-squared&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt; has a generic &lt;code&gt;r2()&lt;/code&gt; function, which computes the r-squared for many different models, including mixed effects and Bayesian regression models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;r2()&lt;/code&gt; returns a list containing values related to the “most appropriate” r-squared for the given model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- lm(mpg ~ wt + cyl, data = mtcars)&#xA;r2(model)&#xA;#&amp;gt; # R2 for Linear Regression&#xA;#&amp;gt;        R2: 0.830&#xA;#&amp;gt;   adj. R2: 0.819&#xA;&#xA;model &amp;lt;- glm(am ~ wt + cyl, data = mtcars, family = binomial)&#xA;r2(model)&#xA;#&amp;gt; # R2 for Logistic Regression&#xA;#&amp;gt;   Tjur&#39;s R2: 0.705&#xA;&#xA;library(MASS)&#xA;data(housing)&#xA;model &amp;lt;- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)&#xA;r2(model)&#xA;#&amp;gt;   Nagelkerke&#39;s R2: 0.108&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The different R-squared measures can also be accessed directly via functions like &lt;code&gt;r2_bayes()&lt;/code&gt;, &lt;code&gt;r2_coxsnell()&lt;/code&gt; or &lt;code&gt;r2_nagelkerke()&lt;/code&gt; (see a full list of functions &lt;a href=&#34;https://easystats.github.io/performance/reference/index.html#section-r-functions&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For mixed models, the &lt;em&gt;conditional&lt;/em&gt; and &lt;em&gt;marginal&lt;/em&gt; R-squared are returned. The &lt;em&gt;marginal R-squared&lt;/em&gt; considers only the variance of the fixed effects and indicates how much of the model’s variance is explained by the fixed effects part only. The &lt;em&gt;conditional R-squared&lt;/em&gt; takes both the fixed and random effects into account and indicates how much of the model’s variance is explained by the “complete” model.&lt;/p&gt; &#xA;&lt;p&gt;For frequentist mixed models, &lt;code&gt;r2()&lt;/code&gt; (resp. &lt;code&gt;r2_nakagawa()&lt;/code&gt;) computes the &lt;em&gt;mean&lt;/em&gt; random effect variances, thus &lt;code&gt;r2()&lt;/code&gt; is also appropriate for mixed models with more complex random effects structures, like random slopes or nested random effects (Johnson 2014; Nakagawa, Johnson, and Schielzeth 2017).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(123)&#xA;library(rstanarm)&#xA;&#xA;model &amp;lt;- stan_glmer(Petal.Length ~ Petal.Width + (1 | Species), data = iris, cores = 4)&#xA;&#xA;r2(model)&#xA;#&amp;gt; # Bayesian R2 with Compatibility Interval&#xA;#&amp;gt; &#xA;#&amp;gt;   Conditional R2: 0.953 (95% CI [0.942, 0.964])&#xA;#&amp;gt;      Marginal R2: 0.825 (95% CI [0.721, 0.900])&#xA;&#xA;library(lme4)&#xA;model &amp;lt;- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;r2(model)&#xA;#&amp;gt; # R2 for Mixed Models&#xA;#&amp;gt; &#xA;#&amp;gt;   Conditional R2: 0.799&#xA;#&amp;gt;      Marginal R2: 0.279&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Intraclass Correlation Coefficient (ICC)&lt;/h4&gt; &#xA;&lt;p&gt;Similar to R-squared, the ICC provides information on the explained variance and can be interpreted as “the proportion of the variance explained by the grouping structure in the population” (Hox 2010).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;icc()&lt;/code&gt; calculates the ICC for various mixed model objects, including &lt;code&gt;stanreg&lt;/code&gt; models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(lme4)&#xA;model &amp;lt;- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;icc(model)&#xA;#&amp;gt; # Intraclass Correlation Coefficient&#xA;#&amp;gt; &#xA;#&amp;gt;     Adjusted ICC: 0.722&#xA;#&amp;gt;   Unadjusted ICC: 0.521&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…and models of class &lt;code&gt;brmsfit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(brms)&#xA;set.seed(123)&#xA;model &amp;lt;- brm(mpg ~ wt + (1 | cyl) + (1 + wt | gear), data = mtcars)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;icc(model)&#xA;#&amp;gt; # Intraclass Correlation Coefficient&#xA;#&amp;gt; &#xA;#&amp;gt;     Adjusted ICC: 0.930&#xA;#&amp;gt;   Unadjusted ICC: 0.771&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model diagnostics&lt;/h3&gt; &#xA;&lt;h4&gt;Check for overdispersion&lt;/h4&gt; &#xA;&lt;p&gt;Overdispersion occurs when the observed variance in the data is higher than the expected variance from the model assumption (for Poisson, variance roughly equals the mean of an outcome). &lt;code&gt;check_overdispersion()&lt;/code&gt; checks if a count model (including mixed models) is overdispersed or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(glmmTMB)&#xA;data(Salamanders)&#xA;model &amp;lt;- glm(count ~ spp + mined, family = poisson, data = Salamanders)&#xA;check_overdispersion(model)&#xA;#&amp;gt; # Overdispersion test&#xA;#&amp;gt; &#xA;#&amp;gt;        dispersion ratio =    2.946&#xA;#&amp;gt;   Pearson&#39;s Chi-Squared = 1873.710&#xA;#&amp;gt;                 p-value =  &amp;lt; 0.001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overdispersion can be fixed by either modelling the dispersion parameter (not possible with all packages), or by choosing a different distributional family (like Quasi-Poisson, or negative binomial, see (Gelman and Hill 2007)).&lt;/p&gt; &#xA;&lt;h4&gt;Check for zero-inflation&lt;/h4&gt; &#xA;&lt;p&gt;Zero-inflation (in (Quasi-)Poisson models) is indicated when the amount of observed zeros is larger than the amount of predicted zeros, so the model is &lt;em&gt;underfitting&lt;/em&gt; zeros. In such cases, it is recommended to use negative binomial or zero-inflated models.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;check_zeroinflation()&lt;/code&gt; to check if zero-inflation is present in the fitted model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- glm(count ~ spp + mined, family = poisson, data = Salamanders)&#xA;check_zeroinflation(model)&#xA;#&amp;gt; # Check for zero-inflation&#xA;#&amp;gt; &#xA;#&amp;gt;    Observed zeros: 387&#xA;#&amp;gt;   Predicted zeros: 298&#xA;#&amp;gt;             Ratio: 0.77&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Check for singular model fits&lt;/h4&gt; &#xA;&lt;p&gt;A “singular” model fit means that some dimensions of the variance-covariance matrix have been estimated as exactly zero. This often occurs for mixed models with overly complex random effects structures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;check_singularity()&lt;/code&gt; checks mixed models (of class &lt;code&gt;lme&lt;/code&gt;, &lt;code&gt;merMod&lt;/code&gt;, &lt;code&gt;glmmTMB&lt;/code&gt; or &lt;code&gt;MixMod&lt;/code&gt;) for singularity, and returns &lt;code&gt;TRUE&lt;/code&gt; if the model fit is singular.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(lme4)&#xA;data(sleepstudy)&#xA;&#xA;# prepare data&#xA;set.seed(123)&#xA;sleepstudy$mygrp &amp;lt;- sample(1:5, size = 180, replace = TRUE)&#xA;sleepstudy$mysubgrp &amp;lt;- NA&#xA;for (i in 1:5) {&#xA;    filter_group &amp;lt;- sleepstudy$mygrp == i&#xA;    sleepstudy$mysubgrp[filter_group] &amp;lt;- sample(1:30, size = sum(filter_group), replace = TRUE)&#xA;}&#xA;&#xA;# fit strange model&#xA;model &amp;lt;- lmer(Reaction ~ Days + (1 | mygrp/mysubgrp) + (1 | Subject), data = sleepstudy)&#xA;&#xA;check_singularity(model)&#xA;#&amp;gt; [1] TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remedies to cure issues with singular fits can be found &lt;a href=&#34;https://easystats.github.io/performance/reference/check_singularity.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Check for heteroskedasticity&lt;/h4&gt; &#xA;&lt;p&gt;Linear models assume constant error variance (homoskedasticity).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;check_heteroscedasticity()&lt;/code&gt; functions assess if this assumption has been violated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(cars)&#xA;model &amp;lt;- lm(dist ~ speed, data = cars)&#xA;&#xA;check_heteroscedasticity(model)&#xA;#&amp;gt; Warning: Heteroscedasticity (non-constant error variance) detected (p = 0.031).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comprehensive visualization of model checks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt; provides many functions to check model assumptions, like &lt;code&gt;check_collinearity()&lt;/code&gt;, &lt;code&gt;check_normality()&lt;/code&gt; or &lt;code&gt;check_heteroscedasticity()&lt;/code&gt;. To get a comprehensive check, use &lt;code&gt;check_model()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# defining a model&#xA;model &amp;lt;- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)&#xA;&#xA;# checking model assumptions&#xA;check_model(model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/main/man/figures/unnamed-chunk-14-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;Model performance summaries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;model_performance()&lt;/code&gt; computes indices of model performance for regression models. Depending on the model object, typical indices might be r-squared, AIC, BIC, RMSE, ICC or LOOIC.&lt;/p&gt; &#xA;&lt;h4&gt;Linear model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m1 &amp;lt;- lm(mpg ~ wt + cyl, data = mtcars)&#xA;model_performance(m1)&#xA;#&amp;gt; # Indices of model performance&#xA;#&amp;gt; &#xA;#&amp;gt; AIC     |    AICc |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma&#xA;#&amp;gt; ---------------------------------------------------------------&#xA;#&amp;gt; 156.010 | 157.492 | 161.873 | 0.830 |     0.819 | 2.444 | 2.568&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logistic regression&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m2 &amp;lt;- glm(vs ~ wt + mpg, data = mtcars, family = &#34;binomial&#34;)&#xA;model_performance(m2)&#xA;#&amp;gt; # Indices of model performance&#xA;#&amp;gt; &#xA;#&amp;gt; AIC    |   AICc |    BIC | Tjur&#39;s R2 |  RMSE | Sigma | Log_loss | Score_log | Score_spherical |   PCP&#xA;#&amp;gt; -----------------------------------------------------------------------------------------------------&#xA;#&amp;gt; 31.298 | 32.155 | 35.695 |     0.478 | 0.359 | 0.934 |    0.395 |   -14.903 |           0.095 | 0.743&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linear mixed model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(lme4)&#xA;m3 &amp;lt;- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;model_performance(m3)&#xA;#&amp;gt; # Indices of model performance&#xA;#&amp;gt; &#xA;#&amp;gt; AIC      |     AICc |      BIC | R2 (cond.) | R2 (marg.) |   ICC |   RMSE |  Sigma&#xA;#&amp;gt; ----------------------------------------------------------------------------------&#xA;#&amp;gt; 1755.628 | 1756.114 | 1774.786 |      0.799 |      0.279 | 0.722 | 23.438 | 25.592&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Models comparison&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;compare_performance()&lt;/code&gt; function can be used to compare the performance and quality of several models (including models of different types).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;counts &amp;lt;- c(18, 17, 15, 20, 10, 20, 25, 13, 12)&#xA;outcome &amp;lt;- gl(3, 1, 9)&#xA;treatment &amp;lt;- gl(3, 3)&#xA;m4 &amp;lt;- glm(counts ~ outcome + treatment, family = poisson())&#xA;&#xA;compare_performance(m1, m2, m3, m4)&#xA;#&amp;gt; # Comparison of Model Performance Indices&#xA;#&amp;gt; &#xA;#&amp;gt; Name |   Model |  AIC (weights) | AICc (weights) |  BIC (weights) |   RMSE |  Sigma | Score_log | Score_spherical |    R2 | R2 (adj.) | Tjur&#39;s R2 | Log_loss |   PCP | R2 (cond.) | R2 (marg.) |   ICC | Nagelkerke&#39;s R2&#xA;#&amp;gt; ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;#&amp;gt; m1   |      lm |  156.0 (&amp;lt;.001) |  157.5 (&amp;lt;.001) |  161.9 (&amp;lt;.001) |  2.444 |  2.568 |           |                 | 0.830 |     0.819 |           |          |       |            |            |       |                &#xA;#&amp;gt; m2   |     glm |   31.3 (&amp;gt;.999) |   32.2 (&amp;gt;.999) |   35.7 (&amp;gt;.999) |  0.359 |  0.934 |   -14.903 |           0.095 |       |           |     0.478 |    0.395 | 0.743 |            |            |       |                &#xA;#&amp;gt; m3   | lmerMod | 1764.0 (&amp;lt;.001) | 1764.5 (&amp;lt;.001) | 1783.1 (&amp;lt;.001) | 23.438 | 25.592 |           |                 |       |           |           |          |       |      0.799 |      0.279 | 0.722 |                &#xA;#&amp;gt; m4   |     glm |   56.8 (&amp;lt;.001) |   76.8 (&amp;lt;.001) |   57.7 (&amp;lt;.001) |  3.043 |  1.132 |    -2.598 |           0.324 |       |           |           |          |       |            |            |       |           0.657&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;General index of model performance&lt;/h4&gt; &#xA;&lt;p&gt;One can also easily compute and a &lt;a href=&#34;https://easystats.github.io/performance/reference/compare_performance.html#details&#34;&gt;&lt;strong&gt;composite index&lt;/strong&gt;&lt;/a&gt; of model performance and sort the models from the best one to the worse.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;compare_performance(m1, m2, m3, m4, rank = TRUE)&#xA;#&amp;gt; # Comparison of Model Performance Indices&#xA;#&amp;gt; &#xA;#&amp;gt; Name |   Model |   RMSE |  Sigma | AIC weights | AICc weights | BIC weights | Performance-Score&#xA;#&amp;gt; -----------------------------------------------------------------------------------------------&#xA;#&amp;gt; m2   |     glm |  0.359 |  0.934 |       1.000 |        1.000 |       1.000 |           100.00%&#xA;#&amp;gt; m4   |     glm |  3.043 |  1.132 |    2.96e-06 |     2.06e-10 |    1.63e-05 |            37.51%&#xA;#&amp;gt; m1   |      lm |  2.444 |  2.568 |    8.30e-28 |     6.07e-28 |    3.99e-28 |            36.87%&#xA;#&amp;gt; m3   | lmerMod | 23.438 | 25.592 |    0.00e+00 |     0.00e+00 |    0.00e+00 |             0.00%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Visualisation of indices of models’ performance&lt;/h4&gt; &#xA;&lt;p&gt;Finally, we provide convenient visualisation (the &lt;code&gt;see&lt;/code&gt; package must be installed).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(compare_performance(m1, m2, m4, rank = TRUE))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/main/man/figures/unnamed-chunk-20-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;Testing models&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;test_performance()&lt;/code&gt; (and &lt;code&gt;test_bf&lt;/code&gt;, its Bayesian sister) carries out the most relevant and appropriate tests based on the input (for instance, whether the models are nested or not).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(123)&#xA;data(iris)&#xA;&#xA;lm1 &amp;lt;- lm(Sepal.Length ~ Species, data = iris)&#xA;lm2 &amp;lt;- lm(Sepal.Length ~ Species + Petal.Length, data = iris)&#xA;lm3 &amp;lt;- lm(Sepal.Length ~ Species * Sepal.Width, data = iris)&#xA;lm4 &amp;lt;- lm(Sepal.Length ~ Species * Sepal.Width + Petal.Length + Petal.Width, data = iris)&#xA;&#xA;test_performance(lm1, lm2, lm3, lm4)&#xA;#&amp;gt; Name | Model |       BF | Omega2 | p (Omega2) |    LR | p (LR)&#xA;#&amp;gt; --------------------------------------------------------------&#xA;#&amp;gt; lm1  |    lm |          |        |            |       |       &#xA;#&amp;gt; lm2  |    lm | 3.45e+26 |   0.69 |     &amp;lt; .001 | -6.25 | &amp;lt; .001&#xA;#&amp;gt; lm3  |    lm | 4.69e+07 |   0.36 |     &amp;lt; .001 | -3.44 | &amp;lt; .001&#xA;#&amp;gt; lm4  |    lm | 7.58e+29 |   0.73 |     &amp;lt; .001 | -7.77 | &amp;lt; .001&#xA;#&amp;gt; Each model is compared to lm1.&#xA;&#xA;test_bf(lm1, lm2, lm3, lm4)&#xA;#&amp;gt; Bayes Factors for Model Comparison&#xA;#&amp;gt; &#xA;#&amp;gt;       Model                                                    BF&#xA;#&amp;gt; [lm2] Species + Petal.Length                             3.45e+26&#xA;#&amp;gt; [lm3] Species * Sepal.Width                              4.69e+07&#xA;#&amp;gt; [lm4] Species * Sepal.Width + Petal.Length + Petal.Width 7.58e+29&#xA;#&amp;gt; &#xA;#&amp;gt; * Against Denominator: [lm1] Species&#xA;#&amp;gt; *   Bayes Factor Type: BIC approximation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the performance project is released with a &lt;a href=&#34;https://easystats.github.io/performance/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We are happy to receive bug reports, suggestions, questions, and (most of all) contributions to fix problems and add features.&lt;/p&gt; &#xA;&lt;p&gt;Please follow contributing guidelines mentioned here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://easystats.github.io/performance/CONTRIBUTING.html&#34;&gt;https://easystats.github.io/performance/CONTRIBUTING.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt; &#xA; &lt;div id=&#34;ref-gelman_data_2007&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Gelman, Andrew, and Jennifer Hill. 2007. &lt;em&gt;Data Analysis Using Regression and Multilevel/Hierarchical Models&lt;/em&gt;. Analytical Methods for Social Research. Cambridge ; New York: Cambridge University Press.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-hox_multilevel_2010&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Hox, J. J. 2010. &lt;em&gt;Multilevel Analysis: Techniques and Applications&lt;/em&gt;. 2nd ed. Quantitative Methodology Series. New York: Routledge.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-johnson_extension_2014&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Johnson, Paul C. D. 2014. “Extension of Nakagawa &amp;amp; Schielzeth’s R2 GLMM to Random Slopes Models.” Edited by Robert B. O’Hara. &lt;em&gt;Methods in Ecology and Evolution&lt;/em&gt; 5 (9): 944–46.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-nakagawa_coefficient_2017&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Nakagawa, Shinichi, Paul C. D. Johnson, and Holger Schielzeth. 2017. “The Coefficient of Determination R2 and Intra-Class Correlation Coefficient from Generalized Linear Mixed-Effects Models Revisited and Expanded.” &lt;em&gt;Journal of The Royal Society Interface&lt;/em&gt; 14 (134): 20170213. &lt;a href=&#34;https://doi.org/10.1098/rsif.2017.0213&#34;&gt;https://doi.org/10.1098/rsif.2017.0213&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>r-spatial/sf</title>
    <updated>2022-12-01T02:05:40Z</updated>
    <id>tag:github.com,2022-12-01:/r-spatial/sf</id>
    <link href="https://github.com/r-spatial/sf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Features for R&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/r-spatial/sf/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-spatial/sf/workflows/tic/badge.svg?branch=main&#34; alt=&#34;tic&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/r-spatial/sf/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-spatial/sf/workflows/tic-db/badge.svg?branch=main&#34; alt=&#34;tic-db&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/r-spatial/sf?branch=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/r-spatial/sf/main.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-2.0.html&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-GPL%20%28%3E=%202%29-brightgreen.svg?style=flat&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=sf&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/sf&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/web/checks/check_results_sf.html&#34;&gt;&lt;img src=&#34;https://cranchecks.info/badges/worst/sf&#34; alt=&#34;cran checks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.r-pkg.org/pkg/sf&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/sf?color=brightgreen&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=sf&#34;&gt;&lt;img src=&#34;https://tinyverse.netlify.com/badge/sf&#34; alt=&#34;status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h1&gt;Simple Features for R&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/edzer/f461a3a95570c4ab7edf3125c2f19d20&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://user-images.githubusercontent.com/520851/34887433-ce1d130e-f7c6-11e7-83fc-d60ad4fae6bd.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A package that provides &lt;a href=&#34;https://en.wikipedia.org/wiki/Simple_Features&#34;&gt;simple features access&lt;/a&gt; for R.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/#blogs-presentations-vignettes-sp-sf-wiki&#34;&gt;Blogs, links&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/#cheatsheet&#34;&gt;Cheatsheet&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/#installing&#34;&gt;Installing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/#contributing&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/#acknowledgment&#34;&gt;Acknowledgment&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/#how-to-cite&#34;&gt;How to cite&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Package sf:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;represents simple features as records in a &lt;code&gt;data.frame&lt;/code&gt; or &lt;code&gt;tibble&lt;/code&gt; with a geometry list-column&lt;/li&gt; &#xA; &lt;li&gt;represents natively in R all 17 simple feature types for all dimensions (XY, XYZ, XYM, XYZM)&lt;/li&gt; &#xA; &lt;li&gt;interfaces to &lt;a href=&#34;https://libgeos.org&#34;&gt;GEOS&lt;/a&gt; for geometrical operations on projected coordinates, and to &lt;a href=&#34;https://s2geometry.io/&#34;&gt;s2geometry&lt;/a&gt; for geometrical operations on ellipsoidal coordinates&lt;/li&gt; &#xA; &lt;li&gt;interfaces to &lt;a href=&#34;http://www.gdal.org/&#34;&gt;GDAL&lt;/a&gt;, supporting all driver options, &lt;code&gt;Date&lt;/code&gt; and &lt;code&gt;POSIXct&lt;/code&gt; and list-columns&lt;/li&gt; &#xA; &lt;li&gt;interfaces to &lt;a href=&#34;http://proj.org/&#34;&gt;PRØJ&lt;/a&gt; for coordinate reference system conversion and transformation&lt;/li&gt; &#xA; &lt;li&gt;uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Well-known_text#Well-known_binary&#34;&gt;well-known-binary&lt;/a&gt; serialisations written in C++/Rcpp for fast I/O with GDAL and GEOS&lt;/li&gt; &#xA; &lt;li&gt;reads from and writes to spatial databases such as &lt;a href=&#34;http://postgis.net/&#34;&gt;PostGIS&lt;/a&gt; using &lt;a href=&#34;https://cran.r-project.org/web/packages/DBI/index.html&#34;&gt;DBI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;is extended by &lt;a href=&#34;https://github.com/r-spatial/lwgeom/&#34;&gt;lwgeom&lt;/a&gt; for selected liblwgeom/PostGIS functions&lt;/li&gt; &#xA; &lt;li&gt;is extended by &lt;a href=&#34;https://github.com/r-spatial/stars/&#34;&gt;stars&lt;/a&gt; for raster data, and raster or vector data cubes (spatial time series)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/edzer/442d74a5775abcd5068cf3e73b23687b&#34;&gt;&lt;img align=&#34;left&#34; src=&#34;https://user-images.githubusercontent.com/520851/50280460-e35c1880-044c-11e9-9ed7-cc46754e49db.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Illustration (c) by &lt;a href=&#34;https://twitter.com/allison_horst/status/1071456081308614656&#34;&gt;Allison Horst&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Blogs, presentations, vignettes, sp-sf wiki&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;an open access &lt;a href=&#34;https://journal.r-project.org/archive/2018/RJ-2018-009/index.html&#34;&gt;R Journal article&lt;/a&gt; summarizes the package&lt;/li&gt; &#xA; &lt;li&gt;package vignettes: &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf1.html&#34;&gt;first&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf2.html&#34;&gt;second&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf3.html&#34;&gt;third&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf4.html&#34;&gt;fourth&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf5.html&#34;&gt;fifth&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf6.html&#34;&gt;sixth&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/sf/articles/sf7.html&#34;&gt;seventh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;blog posts: &lt;a href=&#34;http://r-spatial.org/r/2016/02/15/simple-features-for-r.html&#34;&gt;first&lt;/a&gt;, &lt;a href=&#34;http://r-spatial.org/r/2016/07/18/sf2.html&#34;&gt;second&lt;/a&gt;, &lt;a href=&#34;http://r-spatial.org/r/2016/11/02/sfcran.html&#34;&gt;third&lt;/a&gt;, &lt;a href=&#34;http://r-spatial.org/r/2017/01/12/newssf.html&#34;&gt;fourth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the original R Consortium ISC &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/PROPOSAL.md&#34;&gt;proposal&lt;/a&gt;, the R Consortium &lt;a href=&#34;https://www.r-consortium.org/blog/2017/01/03/simple-features-now-on-cran&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;presentations: &lt;a href=&#34;https://edzer.github.io/rstudio_conf/#1&#34;&gt;rstudio::conf 2018&lt;/a&gt; (&lt;a href=&#34;https://www.rstudio.com/resources/videos/tidy-spatial-data-analysis/&#34;&gt;video&lt;/a&gt;), &lt;a href=&#34;http://pebesma.staff.ifgi.de/pebesma_sfr.pdf&#34;&gt;UseR! 2016&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;wiki page describing &lt;a href=&#34;https://github.com/r-spatial/sf/wiki/Migrating&#34;&gt;sp-sf migration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cheatsheet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC 4.0&lt;/a&gt; BY &lt;a href=&#34;http://github.com/ryangarnett&#34;&gt;Ryan Garnett&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/main/sf.pdf&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/cheatsheets/main/pngs/sf.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Install either from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;sf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install binary packages on Windows and MacOS, unless you configured R such that it tries to install source packages; in that case, see below.&lt;/p&gt; &#xA;&lt;p&gt;Install development versions from GitHub with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(remotes)&#xA;install_github(&#34;r-spatial/sf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Installing sf from source works under Windows when &lt;a href=&#34;https://cran.r-project.org/bin/windows/Rtools/&#34;&gt;Rtools&lt;/a&gt; is installed.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;p&gt;MacOS users are strongly encouraged to install the &lt;code&gt;sf&lt;/code&gt; binary packages from CRAN, unless they are familiar with compilers, linking, C++ source code, and homebrew.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to install &lt;code&gt;gdal&lt;/code&gt; is using Homebrew. Recent versions of Homebrew include a full-featured up-to-date &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/gdal.rb&#34;&gt;gdal formula&lt;/a&gt;, which installs &lt;code&gt;proj&lt;/code&gt; and &lt;code&gt;gdal&lt;/code&gt; at the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install pkg-config&#xA;brew install gdal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once gdal is installed, you will be able to install &lt;code&gt;sf&lt;/code&gt; package from source in R. With the current version of &lt;code&gt;proj&lt;/code&gt; on homebrew, installation requires additional configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;sf&#34;, configure.args = &#34;--with-proj-lib=/usr/local/lib/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the development version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(remotes)&#xA;install_github(&#34;r-spatial/sf&#34;, configure.args = &#34;--with-proj-lib=/usr/local/lib/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;sf&lt;/code&gt; and &lt;code&gt;rgdal&lt;/code&gt; together, it is necessary to install &lt;code&gt;rgdal&lt;/code&gt; from source using this configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;rgdal&#34;, configure.args = c(&#34;--with-proj-lib=/usr/local/lib/&#34;, &#34;--with-proj-include=/usr/local/include/&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://stat.ethz.ch/pipermail/r-sig-mac/2017-June/012429.html&#34;&gt;these instructions&lt;/a&gt; explain how to install gdal using kyngchaos frameworks.&lt;/p&gt; &#xA;&lt;p&gt;For Mac OS 11 Big Sur source install instruction, see &lt;a href=&#34;https://github.com/r-spatial/sf/issues/1536#issuecomment-727342736&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;For Unix-alikes, GDAL (&amp;gt;= 2.0.1), GEOS (&amp;gt;= 3.4.0) and Proj.4 (&amp;gt;= 4.8.0) are required.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;Dependencies for recent versions of Ubuntu (18.04 and later) are available in the official repositories; you can install them with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;apt-get -y update &amp;amp;&amp;amp; apt-get install -y  libudunits2-dev libgdal-dev libgeos-dev libproj-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, to get more up-to-date versions of dependencies such as GDAL, we recommend adding the &lt;a href=&#34;http://ppa.launchpad.net/ubuntugis/ubuntugis-unstable/ubuntu/&#34;&gt;ubuntugis-unstable&lt;/a&gt; PPA to the package repositories and installing them as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable&#xA;sudo apt-get update&#xA;sudo apt-get install libudunits2-dev libgdal-dev libgeos-dev libproj-dev &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adding this PPA is required for installing &lt;code&gt;sf&lt;/code&gt; on older versions of Ubuntu (e.g. Xenial).&lt;/p&gt; &#xA;&lt;p&gt;Another option, for advanced users, is to install dependencies from source; see e.g. an older &lt;a href=&#34;https://github.com/r-spatial/sf/raw/593ee48b34001fe3b383ea73ea57063ecf690732/.travis.yml&#34;&gt;Travis&lt;/a&gt; config file for hints.&lt;/p&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;p&gt;The following command installs all required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo dnf install gdal-devel proj-devel geos-devel sqlite-devel udunits2-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch&lt;/h4&gt; &#xA;&lt;p&gt;Get gdal, proj and geos from the main repos, and udunits from the AUR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S gdal proj geos&#xA;yay/pacaur/yaourt/whatever -S udunits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;p&gt;To install on Debian, the &lt;a href=&#34;https://github.com/rocker-org/geospatial&#34;&gt;rocker geospatial&lt;/a&gt; Dockerfiles may be helpful. Ubuntu Dockerfiles are found &lt;a href=&#34;https://github.com/r-spatial/sf/tree/master/inst/docker&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple GDAL, GEOS and/or PROJ versions on your system&lt;/h3&gt; &#xA;&lt;p&gt;If you use dynamic linking (installation from source) and have multiple versions of these libraries installed (e.g. one from ubuntugis-unstable, another installed from source in &lt;code&gt;/usr/local/lib&lt;/code&gt;) then this will in general not work, even when setting &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; manually. See &lt;a href=&#34;https://github.com/r-spatial/sf/issues/844&#34;&gt;here&lt;/a&gt; for the reason why.&lt;/p&gt; &#xA;&lt;h3&gt;lwgeom&lt;/h3&gt; &#xA;&lt;p&gt;Functions and methods that require &lt;code&gt;liblwgeom&lt;/code&gt;, including &lt;code&gt;st_make_valid&lt;/code&gt; and all spherical or ellipsoidal metrics (area, distances), have since sf 0.5-5 been moved to their own package, &lt;a href=&#34;https://github.com/r-spatial/lwgeom&#34;&gt;lwgeom&lt;/a&gt;, which is also on &lt;a href=&#34;https://cran.r-project.org/package=lwgeom&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions of all sorts are most welcome, issues and pull requests are the preferred ways of sharing them.&lt;/li&gt; &#xA; &lt;li&gt;When contributing pull requests, please adhere to the package style (in package code use &lt;code&gt;=&lt;/code&gt; rather than &lt;code&gt;&amp;lt;-&lt;/code&gt;; don&#39;t change indentation; tab stops of 4 spaces are preferred)&lt;/li&gt; &#xA; &lt;li&gt;This project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/sf/main/CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to cite&lt;/h2&gt; &#xA;&lt;p&gt;Package &lt;code&gt;sf&lt;/code&gt; can be cited as: Edzer Pebesma, 2018. Simple Features for R: Standardized Support for Spatial Vector Data. The R Journal &lt;a href=&#34;https://journal.r-project.org/archive/2018/RJ-2018-009/index.html&#34;&gt;10:1, 439-446.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;This project gratefully acknowledges financial &lt;a href=&#34;https://www.r-consortium.org/projects&#34;&gt;support&lt;/a&gt; from the&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.r-consortium.org/all-projects/awarded-projects/2016-group-1&#34;&gt; &lt;img src=&#34;https://www.r-consortium.org/wp-content/uploads/sites/13/2016/09/RConsortium_Horizontal_Pantone.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &#xA;&lt;!--&#xA;&lt;img src=&#34;http://pebesma.staff.ifgi.de/RConsortium_Horizontal_Pantone.png&#34; width=&#34;300&#34;&gt;&#xA;--&gt;</summary>
  </entry>
</feed>