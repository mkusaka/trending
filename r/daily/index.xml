<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-14T01:46:51Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cozygene/FEAST</title>
    <updated>2023-06-14T01:46:51Z</updated>
    <id>tag:github.com,2023-06-14:/cozygene/FEAST</id>
    <link href="https://github.com/cozygene/FEAST" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast expectation maximization for microbial source tracking&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;FEAST - a scalable algorithm for quantifying the origins of complex microbial communities&lt;/h2&gt; &#xA;&lt;p&gt;A major challenge of analyzing the compositional structure of microbiome data is identifying its potential origins. Here, we introduce Fast Expectation-mAximization microbial Source Tracking (&lt;em&gt;FEAST&lt;/em&gt;), a ready-to-use scalable framework that can simultaneously estimate the contribution of thousands of potential source environments in a timely manner, thereby helping unravel the origins of complex microbial communities. The information gained from &lt;em&gt;FEAST&lt;/em&gt; may provide insight into quantifying contamination, tracking the formation of developing microbial communities, as well as distinguishing and characterizing bacteria-related health conditions. For more details see Shenhav et al., Nature Methods 2019 (&lt;a href=&#34;https://www.nature.com/articles/s41592-019-0431-x&#34;&gt;https://www.nature.com/articles/s41592-019-0431-x&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For support using FEAST, please email: &lt;a href=&#34;mailto:liashenhav@gmail.com&#34;&gt;liashenhav@gmail.com&lt;/a&gt;. This is our new beta version - your comments/insights would be greatly appreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Software Requirements and dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;FEAST&lt;/em&gt; is implemented in R (&amp;gt;= 3.4.4) and requires the following dependencies: &lt;strong&gt;Rcpp&lt;/strong&gt;, &lt;strong&gt;RcppArmadillo&lt;/strong&gt;, &lt;strong&gt;vegan&lt;/strong&gt;, &lt;strong&gt;dplyr&lt;/strong&gt;, &lt;strong&gt;reshape2&lt;/strong&gt;, &lt;strong&gt;gridExtra&lt;/strong&gt;, &lt;strong&gt;ggplot2&lt;/strong&gt;, &lt;strong&gt;ggthemes&lt;/strong&gt;. Please install and load them prior to trying to install &lt;em&gt;FEAST&lt;/em&gt;. If you are using a mac and having installation issues with &lt;strong&gt;Rcpp&lt;/strong&gt; and or &lt;strong&gt;RcppArmadillo&lt;/strong&gt;, try installing homebrew or xcode then reinstalling &lt;strong&gt;Rcpp&lt;/strong&gt; and &lt;strong&gt;RcppArmadillo&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Packages &amp;lt;- c(&#34;Rcpp&#34;, &#34;RcppArmadillo&#34;, &#34;vegan&#34;, &#34;dplyr&#34;, &#34;reshape2&#34;, &#34;gridExtra&#34;, &#34;ggplot2&#34;, &#34;ggthemes&#34;)&#xA;install.packages(Packages)&#xA;lapply(Packages, library, character.only = TRUE)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;FEAST&lt;/em&gt; will be available on QIIME 2 very soon. Until then you can you can simply install &lt;em&gt;FEAST&lt;/em&gt; using &lt;strong&gt;devtools&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devtools::install_github(&#34;cozygene/FEAST&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;As input, &lt;em&gt;FEAST&lt;/em&gt; takes mandatory arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;C&lt;/em&gt; - An &lt;em&gt;m&lt;/em&gt; by &lt;em&gt;n&lt;/em&gt; count matrix, where &lt;em&gt;m&lt;/em&gt; is the number samples and &lt;em&gt;n&lt;/em&gt; is the number of taxa.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;metadata&lt;/em&gt; - An &lt;em&gt;m&lt;/em&gt; by 3 table, where &lt;em&gt;m&lt;/em&gt; is the number of samples. The metadata table has three columns (i.e., &#39;Env&#39;, &#39;SourceSink&#39;, &#39;id&#39;). The first column is a description of the sampled environment (e.g., human gut), the second column indicates if this sample is a source or a sink (can take the value &#39;Source&#39; or &#39;Sink&#39;). The third column is the Sink-Source id. When using multiple sinks, each tested with the same group of sources, only the rows with &#39;SourceSink&#39; = Sink will get an id (between 1 - number of sinks in the data). In this scenario, the sourcesâ€™ ids are blank. When using multiple sinks, each tested with a distinct group of sources, each combination of sink and its corresponding sources should get the same id (between 1 - number of sinks in the data). Note that these names must be respected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;EM_iterations&lt;/em&gt; - A numeric value indicating the number of EM iterations (default 1000).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;COVERAGE&lt;/em&gt; - A numeric value indicating the rarefaction depth (default = minimal sequencing depth within each group of sink and its corresponding sources).&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;different_sources_flag&lt;/em&gt; - A Boolean value indicating the source-sink assignment. different_sources_flag = 1 if different sources are assigned to each sink , otherwise = 0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;dir_path&lt;/em&gt; - A path to an output.txt file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;outfile&lt;/em&gt; - the prefix for saving the output file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Value:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;FEAST&lt;/em&gt; returns an S1 by S2 matrix P, where S1 is the number sinks and S2 is the number of sources (including an unknown source). Each row in matrix P sums to 1. Pij is the contribution of source j to sink i. If Pij == NA it indicates that source j was not used in the analysis of sink i. &lt;em&gt;FEAST&lt;/em&gt; will save the file &#34;demo_FEAST.txt&#34; (a file containing matrix P) .&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;We provide a dataset for an example of FEAST usage. Download the demo files &lt;a href=&#34;https://github.com/cozygene/FEAST/tree/FEAST_beta/Data_files&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First load the &lt;strong&gt;FEAST&lt;/strong&gt; packages into R:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(FEAST)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, load the datasets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;metadata &amp;lt;- Load_metadata(metadata_path = &#34;~/FEAST/Data_files/metadata_example_multi.txt&#34;)&#xA;otus &amp;lt;- Load_CountMatrix(CountMatrix_path = &#34;~/FEAST/Data_files/otu_example_multi.txt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;em&gt;FEAST&lt;/em&gt;, saving the output with prefix &#34;demo&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FEAST_output &amp;lt;- FEAST(C = otus, metadata = metadata, different_sources_flag = 1, dir_path = &#34;~/FEAST/Data_files/&#34;,&#xA;                      outfile=&#34;demo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;FEAST&lt;/em&gt; will then save the file &lt;em&gt;demo_FEAST.txt&lt;/em&gt; - A file containing an S1 by S2 matrix P, where S1 is the number sinks and S2 is the number of sources (including an unknown source). Each row in matrix P sums to 1.&lt;/p&gt; &#xA;&lt;p&gt;Graphical representation:&lt;/p&gt; &#xA;&lt;p&gt;As input, &lt;em&gt;PlotSourceContribution&lt;/em&gt; takes mandatory arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;SinkNames&lt;/em&gt; - A vector with the sink names to plot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;SourceNames&lt;/em&gt; - A vector with all the sources&#39; names.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Same_sources_flag&lt;/em&gt; - A Boolean value indicating the source-sink plotting assignment. Same_sources_flag = 1 if the same sources are assigned to the pre-defined sink samples , otherwise = 0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;dir_path&lt;/em&gt; - A path to an output .png file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;mixing_proportions&lt;/em&gt; - A list of vectors, where entry i corresponds to the vector of source contributions (summing to 1) to sink i.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Plot_title&lt;/em&gt; - Plot&#39;s title and output .png file&#39;s name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;N&lt;/em&gt; - Number of barplots in each output .png file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;PlotSourceContribution(SinkNames = rownames(FEAST_output)[c(5:8)],&#xA;                       SourceNames = colnames(FEAST_output), dir_path = &#34;~/FEAST/Data_files/&#34;,&#xA;                       mixing_proportions = FEAST_output, Plot_title = &#34;Test_&#34;,Same_sources_flag = 0, N = 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Input format&lt;/h2&gt; &#xA;&lt;p&gt;The input to &lt;em&gt;FEAST&lt;/em&gt; is composed of two tab-delimited ASCII text files:&lt;/p&gt; &#xA;&lt;p&gt;(1) count table - An m by n count matrix, where m is the number samples and n is the number of taxa. Row names are the sample ids (&#39;SampleID&#39;). Column names are the taxa ids. Every consecutive column contains read counts for each sample. Note that this order must be respected.&lt;/p&gt; &#xA;&lt;p&gt;count matrix (first 4 rows and columns):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;ERR525698&lt;/th&gt; &#xA;   &lt;th&gt;ERR525693&lt;/th&gt; &#xA;   &lt;th&gt;ERR525688&lt;/th&gt; &#xA;   &lt;th&gt;ERR525699&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;taxa_1&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;taxa_2&lt;/td&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;taxa_3&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;taxa_4&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;(2) metadata - An m by 3 table, where m is the number of samples. The metadata table has three columns (i.e., &#39;Env&#39;, &#39;SourceSink&#39;, &#39;id&#39;). The first column is a description of the sampled environment (e.g., human gut), the second column indicates if this sample is a source or a sink (can take the value &#39;Source&#39; or &#39;Sink&#39;). The third column is the Sink-Source id. When using multiple sinks, each tested with the same group of sources, only the rows with &#39;SourceSink&#39; = Sink will get an id (between 1 - number of sinks in the data). In this scenario, the sourcesâ€™ ids are blank. When using multiple sinks, each tested with a distinct group of sources, each combination of sink and its corresponding sources should get the same id (between 1 - number of sinks in the data). Note that these names must be respected.&lt;/p&gt; &#xA;&lt;p&gt;*using multiple sinks, each tested with the same group of sources:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SampleID&lt;/th&gt; &#xA;   &lt;th&gt;Env&lt;/th&gt; &#xA;   &lt;th&gt;SourceSink&lt;/th&gt; &#xA;   &lt;th&gt;id&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525698&lt;/td&gt; &#xA;   &lt;td&gt;infant gut 1&lt;/td&gt; &#xA;   &lt;td&gt;Sink&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525693&lt;/td&gt; &#xA;   &lt;td&gt;infant gut 2&lt;/td&gt; &#xA;   &lt;td&gt;Sink&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525688&lt;/td&gt; &#xA;   &lt;td&gt;Adult gut 1&lt;/td&gt; &#xA;   &lt;td&gt;Source&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525699&lt;/td&gt; &#xA;   &lt;td&gt;Adult gut 2&lt;/td&gt; &#xA;   &lt;td&gt;Source&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525697&lt;/td&gt; &#xA;   &lt;td&gt;Adult gut 3&lt;/td&gt; &#xA;   &lt;td&gt;Source&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*using multiple sinks, each tested with a different group of sources:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;SampleID&lt;/th&gt; &#xA;   &lt;th&gt;Env&lt;/th&gt; &#xA;   &lt;th&gt;SourceSink&lt;/th&gt; &#xA;   &lt;th&gt;id&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525698&lt;/td&gt; &#xA;   &lt;td&gt;infant gut 1&lt;/td&gt; &#xA;   &lt;td&gt;Sink&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525688&lt;/td&gt; &#xA;   &lt;td&gt;Adult gut 1&lt;/td&gt; &#xA;   &lt;td&gt;Source&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525691&lt;/td&gt; &#xA;   &lt;td&gt;Adult gut 2&lt;/td&gt; &#xA;   &lt;td&gt;Source&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525699&lt;/td&gt; &#xA;   &lt;td&gt;infant gut 2&lt;/td&gt; &#xA;   &lt;td&gt;Sink&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525697&lt;/td&gt; &#xA;   &lt;td&gt;Adult gut 3&lt;/td&gt; &#xA;   &lt;td&gt;Source&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERR525696&lt;/td&gt; &#xA;   &lt;td&gt;Adult gut 4&lt;/td&gt; &#xA;   &lt;td&gt;Source&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Output -&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;infant gut 2&lt;/th&gt; &#xA;   &lt;th&gt;Adult gut 1&lt;/th&gt; &#xA;   &lt;th&gt;Adult gut 2&lt;/th&gt; &#xA;   &lt;th&gt;Adult gut 3&lt;/th&gt; &#xA;   &lt;th&gt;Adult skin 1&lt;/th&gt; &#xA;   &lt;th&gt;Adult skin 2&lt;/th&gt; &#xA;   &lt;th&gt;Adult skin 3&lt;/th&gt; &#xA;   &lt;th&gt;Soil 1&lt;/th&gt; &#xA;   &lt;th&gt;Soil 2&lt;/th&gt; &#xA;   &lt;th&gt;unknown&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.108461e-01&lt;/td&gt; &#xA;   &lt;td&gt;9.584116e-23&lt;/td&gt; &#xA;   &lt;td&gt;4.980321e-12&lt;/td&gt; &#xA;   &lt;td&gt;2.623358e-02&lt;/td&gt; &#xA;   &lt;td&gt;5.043635e-13&lt;/td&gt; &#xA;   &lt;td&gt;8.213667e-59&lt;/td&gt; &#xA;   &lt;td&gt;1.773058e-10&lt;/td&gt; &#xA;   &lt;td&gt;2.704118e-14&lt;/td&gt; &#xA;   &lt;td&gt;3.460067e-02&lt;/td&gt; &#xA;   &lt;td&gt;4.283196e-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>r-lib/cereal</title>
    <updated>2023-06-14T01:46:51Z</updated>
    <id>tag:github.com,2023-06-14:/r-lib/cereal</id>
    <link href="https://github.com/r-lib/cereal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Serialize vctrs objects to JSON ðŸ¥£&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cereal ðŸ¥£&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/cereal/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/r-lib/cereal/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=cereal&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/cereal&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-lib/cereal?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-lib/cereal/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of cereal is to provide methods to &lt;a href=&#34;https://en.wikipedia.org/wiki/Serialization&#34;&gt;serialize&lt;/a&gt; objects from &lt;a href=&#34;https://vctrs.r-lib.org/&#34;&gt;vctrs&lt;/a&gt; to &lt;a href=&#34;https://en.wikipedia.org/wiki/JSON&#34;&gt;JSON&lt;/a&gt;, as well as back from JSON to vctrs objects.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of vetiver from &lt;a href=&#34;https://CRAN.R-project.org&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;cereal&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version of cereal from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;r-lib/cereal&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A data frame is a rectangular collection of variables (in the columns) and observations (in the rows). Each variable is a vector of one data type, like factor or datetime:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- tibble::tibble(&#xA;  a = c(1.2, 2.3, 3.4),&#xA;  b = 2L:4L,&#xA;  c = Sys.Date() + 0:2,&#xA;  d = as.POSIXct(&#34;2019-01-01&#34;, tz = &#34;America/New_York&#34;) + 100:102,&#xA;  e = sample(letters, 3),&#xA;  f = factor(c(&#34;blue&#34;, &#34;blue&#34;, &#34;green&#34;), levels = c(&#34;blue&#34;, &#34;green&#34;, &#34;red&#34;)),&#xA;  g = ordered(c(&#34;small&#34;, &#34;large&#34;, &#34;medium&#34;), levels = c(&#34;small&#34;, &#34;medium&#34;, &#34;large&#34;))&#xA;)&#xA;&#xA;df&#xA;#&amp;gt; # A tibble: 3 Ã— 7&#xA;#&amp;gt;       a     b c          d                   e     f     g     &#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;ord&amp;gt; &#xA;#&amp;gt; 1   1.2     2 2023-06-09 2019-01-01 00:01:40 b     blue  small &#xA;#&amp;gt; 2   2.3     3 2023-06-10 2019-01-01 00:01:41 p     blue  large &#xA;#&amp;gt; 3   3.4     4 2023-06-11 2019-01-01 00:01:42 k     green medium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The vctrs package has a &lt;a href=&#34;https://vctrs.r-lib.org/articles/type-size.html&#34;&gt;concept of a &lt;strong&gt;vector prototype&lt;/strong&gt;&lt;/a&gt; which captures the metadata associated with a vector without keeping any of the data itself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vctrs::vec_ptype(df)&#xA;#&amp;gt; # A tibble: 0 Ã— 7&#xA;#&amp;gt; # â„¹ 7 variables: a &amp;lt;dbl&amp;gt;, b &amp;lt;int&amp;gt;, c &amp;lt;date&amp;gt;, d &amp;lt;dttm&amp;gt;, e &amp;lt;chr&amp;gt;, f &amp;lt;fct&amp;gt;,&#xA;#&amp;gt; #   g &amp;lt;ord&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The information stored in such a vector prototype includes, for example, the levels of a factor and the timezone for a datetime. This can be useful or important information when deploying code or models, such as when using &lt;a href=&#34;https://vetiver.rstudio.com/&#34;&gt;vetiver&lt;/a&gt;. We could store this vector prototype as an R binary object saved as an &lt;code&gt;.rds&lt;/code&gt; file, but with cereal, you can store this vector prototype in plain text as JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(cereal)&#xA;json &amp;lt;- cereal_to_json(df)&#xA;json&#xA;#&amp;gt; {&#xA;#&amp;gt;   &#34;a&#34;: {&#xA;#&amp;gt;     &#34;type&#34;: &#34;numeric&#34;,&#xA;#&amp;gt;     &#34;example&#34;: &#34;1.2&#34;,&#xA;#&amp;gt;     &#34;details&#34;: []&#xA;#&amp;gt;   },&#xA;#&amp;gt;   &#34;b&#34;: {&#xA;#&amp;gt;     &#34;type&#34;: &#34;integer&#34;,&#xA;#&amp;gt;     &#34;example&#34;: &#34;2&#34;,&#xA;#&amp;gt;     &#34;details&#34;: []&#xA;#&amp;gt;   },&#xA;#&amp;gt;   &#34;c&#34;: {&#xA;#&amp;gt;     &#34;type&#34;: &#34;Date&#34;,&#xA;#&amp;gt;     &#34;example&#34;: &#34;2023-06-09&#34;,&#xA;#&amp;gt;     &#34;details&#34;: []&#xA;#&amp;gt;   },&#xA;#&amp;gt;   &#34;d&#34;: {&#xA;#&amp;gt;     &#34;type&#34;: &#34;POSIXct&#34;,&#xA;#&amp;gt;     &#34;example&#34;: &#34;2019-01-01 00:01:40&#34;,&#xA;#&amp;gt;     &#34;details&#34;: {&#xA;#&amp;gt;       &#34;tzone&#34;: &#34;America/New_York&#34;&#xA;#&amp;gt;     }&#xA;#&amp;gt;   },&#xA;#&amp;gt;   &#34;e&#34;: {&#xA;#&amp;gt;     &#34;type&#34;: &#34;character&#34;,&#xA;#&amp;gt;     &#34;example&#34;: &#34;b&#34;,&#xA;#&amp;gt;     &#34;details&#34;: []&#xA;#&amp;gt;   },&#xA;#&amp;gt;   &#34;f&#34;: {&#xA;#&amp;gt;     &#34;type&#34;: &#34;factor&#34;,&#xA;#&amp;gt;     &#34;example&#34;: &#34;blue&#34;,&#xA;#&amp;gt;     &#34;details&#34;: {&#xA;#&amp;gt;       &#34;levels&#34;: [&#34;blue&#34;, &#34;green&#34;, &#34;red&#34;]&#xA;#&amp;gt;     }&#xA;#&amp;gt;   },&#xA;#&amp;gt;   &#34;g&#34;: {&#xA;#&amp;gt;     &#34;type&#34;: &#34;ordered&#34;,&#xA;#&amp;gt;     &#34;example&#34;: &#34;small&#34;,&#xA;#&amp;gt;     &#34;details&#34;: {&#xA;#&amp;gt;       &#34;levels&#34;: [&#34;small&#34;, &#34;medium&#34;, &#34;large&#34;]&#xA;#&amp;gt;     }&#xA;#&amp;gt;   }&#xA;#&amp;gt; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Storing prototype information as JSON (rather than a binary file) means it can be used as plain-text metadata for a model.&lt;/p&gt; &#xA;&lt;p&gt;You can also convert from JSON back to the original prototype:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cereal_from_json(json)&#xA;#&amp;gt; # A tibble: 0 Ã— 7&#xA;#&amp;gt; # â„¹ 7 variables: a &amp;lt;dbl&amp;gt;, b &amp;lt;int&amp;gt;, c &amp;lt;date&amp;gt;, d &amp;lt;dttm&amp;gt;, e &amp;lt;chr&amp;gt;, f &amp;lt;fct&amp;gt;,&#xA;#&amp;gt; #   g &amp;lt;ord&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an approach to this same task using Python, &lt;a href=&#34;https://docs.pydantic.dev/latest/usage/exporting_models/#modeljson&#34;&gt;see Pydanticâ€™s &lt;code&gt;model.json()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This project is released with a &lt;a href=&#34;https://www.contributor-covenant.org/version/2/1/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you think you have encountered a bug, please &lt;a href=&#34;https://github.com/r-lib/cereal/issues&#34;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Either way, learn how to create and share a &lt;a href=&#34;https://reprex.tidyverse.org/articles/articles/learn-reprex.html&#34;&gt;reprex&lt;/a&gt; (a minimal, reproducible example), to clearly communicate about your code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>