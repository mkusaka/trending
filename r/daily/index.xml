<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-13T01:36:22Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>irudnyts/openai</title>
    <updated>2022-12-13T01:36:22Z</updated>
    <id>tag:github.com,2022-12-13:/irudnyts/openai</id>
    <link href="https://github.com/irudnyts/openai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R package-wrapper around OpenAI API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openai &lt;img src=&#34;https://raw.githubusercontent.com/irudnyts/openai/main/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;120&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/irudnyts/openai/actions&#34;&gt;&lt;img src=&#34;https://github.com/irudnyts/openai/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/irudnyts/openai?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/irudnyts/openai/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=openai&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/openai&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cranlogs.r-pkg.org/badges/grand-total/openai?color=brightgreen&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/openai?color=brightgreen&#34; alt=&#34;CRAN Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;{openai}&lt;/code&gt; is an R wrapper of OpenAI API endpoints. This package covers Models, Completions, Edits, Images, Embeddings, Files, Fine-tunes, Moderations, and legacy Engines endpoints. The latter endpoints, namely Engines, are left for backward compatibility and will be removed soon.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install &lt;code&gt;{openai}&lt;/code&gt; from CRAN is to use the “official” &lt;code&gt;install.packages()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;openai&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install the development version of &lt;code&gt;{openai}&lt;/code&gt; from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(remotes))&#xA;    install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;irudnyts/openai&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;To use the OpenAI API, you need to provide an API key. First, sign up for OpenAI API on &lt;a href=&#34;https://openai.com/api/&#34;&gt;this page&lt;/a&gt;. Once you signed up and logged in, you need to open &lt;a href=&#34;https://beta.openai.com&#34;&gt;this page&lt;/a&gt;, click on &lt;strong&gt;Personal&lt;/strong&gt;, and select &lt;strong&gt;View API keys&lt;/strong&gt; in drop-down menu. You can then copy the key by clicking on the green text &lt;strong&gt;Copy&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, functions of &lt;code&gt;{openai}&lt;/code&gt; will look for &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable. If you want to set a global environment variable, you can use the following command (where &lt;code&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/code&gt; should be replaced with your actual key):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.setenv(&#xA;    OPENAI_API_KEY = &#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can add the key to the &lt;code&gt;.Renviron&lt;/code&gt; file of the project. The following commands will open &lt;code&gt;.Renviron&lt;/code&gt; for editing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(usethis))&#xA;    install.packages(&#34;usethis&#34;)&#xA;&#xA;usethis::edit_r_environ(scope = &#34;project&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the following line to the file (again, replace &lt;code&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/code&gt; with your actual key):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;OPENAI_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are using GitHub/Gitlab, do not forget to add &lt;code&gt;.Renviron&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can always provide the key manually to the functions of the package.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Functions of &lt;code&gt;{openai}&lt;/code&gt; have self-explanatory names. For example, to create a completion, one can use &lt;code&gt;create_completion()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(openai)&#xA;&#xA;create_completion(&#xA;    model = &#34;ada&#34;,&#xA;    prompt = &#34;Generate a question and an answer&#34;&#xA;)&#xA;#&amp;gt; $id&#xA;#&amp;gt; [1] &#34;cmpl-6MiImjcaCSuQYY6u8UA2Mm0rCdbEo&#34;&#xA;#&amp;gt; &#xA;#&amp;gt; $object&#xA;#&amp;gt; [1] &#34;text_completion&#34;&#xA;#&amp;gt; &#xA;#&amp;gt; $created&#xA;#&amp;gt; [1] 1670871532&#xA;#&amp;gt; &#xA;#&amp;gt; $model&#xA;#&amp;gt; [1] &#34;ada&#34;&#xA;#&amp;gt; &#xA;#&amp;gt; $choices&#xA;#&amp;gt;                                                                             text&#xA;#&amp;gt; 1  within 5 minutes, up to an hour depending on how your users are different and&#xA;#&amp;gt;   index logprobs finish_reason&#xA;#&amp;gt; 1     0       NA        length&#xA;#&amp;gt; &#xA;#&amp;gt; $usage&#xA;#&amp;gt; $usage$prompt_tokens&#xA;#&amp;gt; [1] 7&#xA;#&amp;gt; &#xA;#&amp;gt; $usage$completion_tokens&#xA;#&amp;gt; [1] 16&#xA;#&amp;gt; &#xA;#&amp;gt; $usage$total_tokens&#xA;#&amp;gt; [1] 23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further, one can generate an image using DALL·E text-to-image model with &lt;code&gt;create_image()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;create_image(&#34;An astronaut riding a horse in a photorealistic style&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/irudnyts/openai/main/man/figures/astronaut.png&#34; width=&#34;256px&#34; style=&#34;display: block; margin: auto;&#34;&gt;</summary>
  </entry>
  <entry>
    <title>BruceBuurstra/MovieDataCleaner</title>
    <updated>2022-12-13T01:36:22Z</updated>
    <id>tag:github.com,2022-12-13:/BruceBuurstra/MovieDataCleaner</id>
    <link href="https://github.com/BruceBuurstra/MovieDataCleaner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cleaning Datasets with KNN and NMF Imputation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MovieDataCleaner&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;MovieDataCleaner&lt;/code&gt; is an R package for &lt;strong&gt;cleaning missing datasets&lt;/strong&gt; with &lt;strong&gt;NMF imputation&lt;/strong&gt; and &lt;strong&gt;kNN imputation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;pkgdown&lt;/code&gt; site here: &lt;a href=&#34;https://brucebuurstra.github.io/MovieDataCleaner/&#34;&gt;https://brucebuurstra.github.io/MovieDataCleaner/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MovieDataCleaner easily:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;drops rows and columns containg missing values&lt;/li&gt; &#xA; &lt;li&gt;imputes missing values using NMF or kNN&lt;/li&gt; &#xA; &lt;li&gt;clusters imputed datasets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of MovieDataCleaner from &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;BruceBuurstra/MovieDataCleaner&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tagteam/registerTargets</title>
    <updated>2022-12-13T01:36:22Z</updated>
    <id>tag:github.com,2022-12-13:/tagteam/registerTargets</id>
    <link href="https://github.com/tagteam/registerTargets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;Welcome&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here you find the material for our PhD course &#39;Targeted Register Analysis&#39;.&lt;/p&gt; &#xA;&lt;p&gt;** Venue&lt;/p&gt; &#xA;&lt;p&gt;CSS-22-0-19, Øster Farimagsgade 5, 1014 Copenhagen. See map of CSS:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://publichealth.ku.dk/contact/&#34;&gt;https://publichealth.ku.dk/contact/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;** Schedule&lt;/p&gt; &#xA;&lt;p&gt;*** Monday 2022-12-12 |----------------+--------------------------------------------------------+-------------------------| | 8:15 -- 8:20 | Introduction to the course | Thomas Alexander Gerds | | 8:20 -- 11:00 | Lectures on Register Epidemiology (with coffee breaks) | Christian Torp-Pedersen | | 11:15 -- 11:45 | Introduction to exercises | Thomas Alexander Gerds | | 12:30 -- 14:30 | Exercises | |&lt;/p&gt; &#xA;&lt;p&gt;*** Tuesday 2022-12-13 |----------------+-------------------------------------------------------------------+------------------------| | 8:15 -- 11:00 | Lectures on The Roadmap of Targeted Learning (with coffee breaks) | Andrew Mertens | | 11:15 -- 11:45 | Introduction to exercises | Thomas Alexander Gerds | | 12:30 -- 14:30 | Exercises | | |----------------+-------------------------------------------------------------------+------------------------|&lt;/p&gt; &#xA;&lt;p&gt;*** Wednesday 2022-12-14 |----------------+--------------------------------------------------------------------+------------------------| | 8:15 -- 11:00 | Lectures on Machine Learning in Register Data (with coffee breaks) | Marvin N. Wright | | 11:15 -- 11:45 | Introduction to exercises | Thomas Alexander Gerds | | 12:30 -- 14:30 | Exercises | | |----------------+--------------------------------------------------------------------+------------------------|&lt;/p&gt; &#xA;&lt;p&gt;*** Thursday 2022-12-15 |----------------+------------------------------------------------------------------------------+------------------------| | 8:15 -- 11:00 | Lectures on Longitudinal Targeted Minimum Loss Learning (with coffee breaks) | Zeyi Wang | | 11:15 -- 11:45 | Introduction to exercises | Thomas Alexander Gerds | | 12:30 -- 14:30 | Exercises | | |----------------+------------------------------------------------------------------------------+------------------------|&lt;/p&gt; &#xA;&lt;h1&gt;Footer:&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;**** Navigation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[[https://github.com/tagteam/registerTargets/blob/main/exercises/targeted-exercises-day1.org][targeted exercises day 1]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tagteam/registerTargets/blob/main/exercises/targeted-exercises-day2.org][targeted exercises day 2]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tagteam/registerTargets/blob/main/exercises/targeted-exercises-day3.org][targeted exercises day 3]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tagteam/registerTargets/blob/main/exercises/targeted-exercises-day4.org][targeted exercises day 4]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tagteam/registerTargets/blob/main/lecture_notes][lecture notes]]&lt;/li&gt; &#xA; &lt;li&gt;[[https://github.com/tagteam/registerTargets/blob/main/exercises/goodies][goodies]]&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>