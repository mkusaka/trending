<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:36:54Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AfricaBirdData/BIRDIE</title>
    <updated>2023-10-15T01:36:54Z</updated>
    <id>tag:github.com,2023-10-15:/AfricaBirdData/BIRDIE</id>
    <link href="https://github.com/AfricaBirdData/BIRDIE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;code and documentation related to the South Africa Biodiversity Data Pipeline for Wetlands and Waterbirds (BIRDIE) project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BIRDIE&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains code and documentation related to the South Africa Biodiversity Data Pipeline for Wetlands and Waterbirds (BIRDIE) project: &lt;a href=&#34;https://jrsbiodiversity.org/grants/sanbi-2020/&#34;&gt;https://jrsbiodiversity.org/grants/sanbi-2020/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic structure&lt;/h2&gt; &#xA;&lt;p&gt;There are two basic elements in the BIRDIE repo: i) a package that contains functions and data that is installed as an extension to base R and ii) an analysis folder that contains analysis scripts and data that runs in R but that is not integrated in R. In other words, the package adds functionality and the analysis uses this functionality. This means that to use the pipeline we don&#39;t only have to install the package, but we also need to clone the repository. Inside the package there are some vignettes that explain how to run the different modules of the pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;INSTRUCTIONS TO CLONE AND INSTALL PACKAGE&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository to your local machine: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In RStudio, create a new project&lt;/li&gt; &#xA;   &lt;li&gt;In the &#39;Create project&#39; menu, select &#39;Version Control&#39;/&#39;Git&#39;&lt;/li&gt; &#xA;   &lt;li&gt;Copy the repository URL (click on the &#39;Code&#39; green button and copy the link)&lt;/li&gt; &#xA;   &lt;li&gt;Choose the appropiate directory and &#39;Create project&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the package &#39;devtools&#39; in case you don´t have it and run &lt;code&gt;devtools::install(build_vignettes = TRUE)&lt;/code&gt; from the project directory&lt;/li&gt; &#xA; &lt;li&gt;Remember to pull the latest version regularly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;INSTRUCTIONS TO CONTRIBUTE CODE TO THE PACKAGE&lt;/h2&gt; &#xA;&lt;p&gt;For site owners:&lt;/p&gt; &#xA;&lt;p&gt;There is the danger of multiple people working simultaneously on the project code. If you make changes locally on your computer and, before you push your changes, others push theirs, there might be conflicts. This is because the HEAD pointer in the main branch has moved since you started working.&lt;/p&gt; &#xA;&lt;p&gt;To deal with these lurking issues, I would suggest opening and working on a topic branch. This is a just a regular branch that has a short lifespan. In steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a branch at your local machine&lt;/li&gt; &#xA; &lt;li&gt;Push to the remote repo&lt;/li&gt; &#xA; &lt;li&gt;Make your changes in your local machine&lt;/li&gt; &#xA; &lt;li&gt;Commit and push to remote&lt;/li&gt; &#xA; &lt;li&gt;Merge your changes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the GitHub repo you will now see an option that notifies of changes in a branch: click compare and pull request.&lt;/li&gt; &#xA;   &lt;li&gt;If there are no conflicts &#39;merge pull request&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Delete the branch. You will have to delete it in the remote repo (GitHub) and also in your local machine. In your local machine you have to use Git directly, apparently RStudio doesn´t do it: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In your local machine, change to master branch.&lt;/li&gt; &#xA;   &lt;li&gt;Either use the Git GUI (go to branches/delete/select branch/push).&lt;/li&gt; &#xA;   &lt;li&gt;Or use the console typing &#39;git branch -d your_branch_name&#39;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Opening branches is quick and easy, so there is no harm in opening multiple branches a day. However, it is important to merge and delete them often to keep things tidy. Git provides functionality to deal with conflicting branches. More about branches here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&#34;&gt;https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another idea is to use the &#39;issues&#39; tab that you find in the project header. There, we can identify issues with the package, assign tasks and warn other contributors that we will be working on the code.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ropensci/tic</title>
    <updated>2023-10-15T01:36:54Z</updated>
    <id>tag:github.com,2023-10-15:/ropensci/tic</id>
    <link href="https://github.com/ropensci/tic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tasks Integrating Continuously: CI-Agnostic Workflow Definitions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tic&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/tic/actions&#34;&gt;&lt;img src=&#34;https://github.com/ropensci/tic/workflows/tic/badge.svg?branch=master&#34; alt=&#34;tic&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/ropensci/tic&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/build/gh/ropensci/tic/master?label=Linux&amp;amp;logo=circle&amp;amp;logoColor=green&amp;amp;style=flat-square&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=tic&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/tic&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ropensci/tic&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ropensci/tic/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;Lifecycle: stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ropensci.r-universe.dev&#34;&gt;&lt;img src=&#34;https://ropensci.r-universe.dev/badges/tic&#34; alt=&#34;tic status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/software-review/issues/305&#34;&gt;&lt;img src=&#34;https://badges.ropensci.org/305_status.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of tic is to enhance and simplify working with continuous integration (CI) systems.&lt;/p&gt; &#xA;&lt;p&gt;The following providers are supported:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th&gt;R package&lt;/th&gt; &#xA;   &lt;th&gt;Platforms&lt;/th&gt; &#xA;   &lt;th&gt;Info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Circle CI&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ropensci.org/circle/&#34;&gt;{circle}&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;via Docker images from &lt;a href=&#34;https://github.com/rocker-org/rocker&#34;&gt;rocker&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Github Actions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://maxheld.de/ghactions&#34;&gt;{ghactions}&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linux, macOS, Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In addition there is partial support for &lt;a href=&#34;https://raw.githubusercontent.com/ropensci/tic/main/drone.io&#34;&gt;Drone CI&lt;/a&gt; via class &lt;code&gt;DRONE_CI&lt;/code&gt;. This means that {tic} recognizes Drone CI as a CI platform and does not exit early or requires setting a fake env var to mimic another CI provider. However, there is neither an R client package for Drone CI currently nor {tic} templates available for bootstrapping CI configuration via &lt;code&gt;tic::use_tic()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about CI, read our &lt;a href=&#34;https://docs.ropensci.org/tic/articles/tic.html#prerequisites&#34;&gt;Getting Started&lt;/a&gt; vignette.&lt;/p&gt; &#xA;&lt;p&gt;The most important improvements over existing solutions are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Deployment to a Git repository is greatly simplified. Update your repository with results from the CI build.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for R packages and other kinds of projects (bookdown, blogdown, etc.), with predefined templates. Set up your project to deploy rendered versions of your book or blog with a single push to Git.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Workflow specification in a single &lt;code&gt;.R&lt;/code&gt; file, regardless of CI system used. Forget about &lt;code&gt;.yml&lt;/code&gt; files or web browser configurations.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;{tic} can be installed from GitHub with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;ropensci/tic&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;By calling &lt;code&gt;tic::use_tic()&lt;/code&gt; a production ready CI setup is initialized, tailored to your specific R project. The created templates will use the providers &lt;a href=&#34;https://circleci.com&#34;&gt;Circle CI&lt;/a&gt; and &lt;a href=&#34;https://github.com/actions&#34;&gt;Github Actions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If only the CI YAML templates from {tic} are desired, the &lt;code&gt;use_&amp;lt;provider&amp;gt;_yml()&lt;/code&gt; functions can be used. Refer to &lt;a href=&#34;https://docs.ropensci.org/tic/reference/yaml_templates.html&#34;&gt;the complete list of options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For an R package, the following steps will be set up for the CI workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installation of required dependencies for the project (dependencies are scraped from the DESCRIPTION file*)&lt;/li&gt; &#xA; &lt;li&gt;Satisfying build-time dependencies of steps to be run in all CI stages (by scraping &lt;code&gt;pkg::fun&lt;/code&gt; calls in &lt;code&gt;tic.R&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Checking of package via &lt;code&gt;rcmdcheck::rcmdcheck()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Creation of a &lt;code&gt;pkgdown&lt;/code&gt; site including Github deployment&lt;/li&gt; &#xA; &lt;li&gt;Running a code coverage and upload to &lt;a href=&#34;https://codecov.io/&#34;&gt;codecov.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.ropensci.org/tic/articles/tic.html&#34;&gt;Getting Started&lt;/a&gt; vignette for more information and links to &lt;a href=&#34;https://docs.ropensci.org/tic/articles/tic.html#examples-projects&#34;&gt;minimal example repositories&lt;/a&gt; for various R projects (package, blogdown, bookdown and more).&lt;/p&gt; &#xA;&lt;h4&gt;Quickstart&lt;/h4&gt; &#xA;&lt;p&gt;If you are a new user, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tic::use_tic()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already use {tic} and want to configure a new CI provider, do one of the following (depending on your preferred CI provider)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### Circle CI ------------------------------------------------------------------&#xA;&#xA;circle::use_circle_deploy() # (optional for deployment)&#xA;tic::use_circle_yml() # optional: Change `type` arg to your liking&#xA;tic::use_tic_r(&#34;package&#34;, deploy_on = &#34;circle&#34;)&#xA;# (all of the above in one call)&#xA;# tic::use_tic(wizard = FALSE, linux = &#34;circle&#34;, mac = &#34;none&#34;, windows = &#34;none&#34;,&#xA;#              matrix = &#34;circle&#34;, deploy = &#34;circle&#34;)&#xA;tic::use_update_tic()&#xA;&#xA;### GitHub Actions -------------------------------------------------------------&#xA;&#xA;tic::use_ghactions_deploy() # (optional for deployment)&#xA;tic::use_ghactions_yml() # optional: Change `type` arg to your liking&#xA;tic::use_tic_r(&#34;package&#34;, deploy_on = &#34;ghactions&#34;)&#xA;# (all of the above in one call)&#xA;# tic::use_tic(wizard = FALSE, linux = &#34;ghactions&#34;, mac = &#34;ghactions&#34;,&#xA;#              windows = &#34;ghactions&#34;, matrix = &#34;ghactions&#34;, deploy = &#34;ghactions&#34;)&#xA;&#xA;tic::use_tic_badge(&#34;ghactions&#34;)&#xA;tic::use_update_tic()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Good to know&lt;/h2&gt; &#xA;&lt;p&gt;We would like to mention that {tic} is a choice and sits on top of existing community efforts providing R support for various CI providers. While {tic} will prevent you from dealing/learning every CIs YAML syntax, you will have to learn {tic}&#39;s way of specifying your tasks on CI systems.&lt;/p&gt; &#xA;&lt;p&gt;Also, there is no way around familiarizing yourself with the basics of CI systems in general. Without this knowledge, you will also have a hard way understanding {tic}.&lt;/p&gt; &#xA;&lt;p&gt;We also recommend to take a look at the projects providing the direct R support for each CI system (which {tic} builds upon) to gain a deeper understanding of the whole concept.&lt;/p&gt; &#xA;&lt;h2&gt;Keeping CI templates up-to-date&lt;/h2&gt; &#xA;&lt;p&gt;{tic} is refreshing its template every few months. There are two ways to stay up-to-date and have a functional CI YAML definition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual updates&lt;/strong&gt;: You can keep {tic} up-to-date by rerunning the &lt;code&gt;use_*_()&lt;/code&gt; function which you have used to init {tic} the first time. If you have forgotten which settings you have chosen back then, you can have a look at the first line of your YAML file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic updates via GHA&lt;/strong&gt;: If you&#39;re using GitHub actions, you can use &lt;code&gt;tic::use_update_tic()&lt;/code&gt;. This will initialize a new workflow which checks daily for new template updates. Important: This workflow requires a personal access token with &#34;workflow&#34; scopes. After creation, you can add it via &lt;code&gt;tic::gha_add_secret()&lt;/code&gt; to your repo account. Hint: If you&#39;re operating in an organization, you can set this GHA secret organization-wide which saves you adding it to multiple single repos.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See vignette &lt;a href=&#34;https://docs.ropensci.org/tic/articles/updating.html&#34;&gt;&#34;Updating Templates&#34;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Vignettes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/tic.html&#34;&gt;Get started&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/features.html&#34;&gt;Feature Overview&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/build-lifecycle.html&#34;&gt;The CI Build Lifecycle&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/ci-providers.html&#34;&gt;CI Providers&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/ci-client-packages.html&#34;&gt;CI Client Packages&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/advanced.html&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/custom-steps.html&#34;&gt;Custom Steps&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.ropensci.org/tic/articles/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;The setup functions in this package assume Git as version control system, and GitHub as platform. Automated setup works best if the project under test is located in the root of the Git repository. Multi-project repositories are not supported, see &lt;a href=&#34;https://github.com/ropensci/tic/issues/117#issuecomment-460814990&#34;&gt;the comment by @jwijffels&lt;/a&gt; for guidance to work around this limitation.&lt;/p&gt; &#xA;&lt;p&gt;The DESCRIPTION files needs to live in the project root. To simplify its creation have a look at &lt;a href=&#34;https://usethis.r-lib.org/reference/use_package.html&#34;&gt;usethis::use_package()&lt;/a&gt; or &lt;a href=&#34;https://usethis.r-lib.org/reference/use_description.html&#34;&gt;usethis::use_description()&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>