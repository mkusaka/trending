<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-09T01:49:53Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>easystats/performance</title>
    <updated>2022-06-09T01:49:53Z</updated>
    <id>tag:github.com,2022-06-09:/easystats/performance</id>
    <link href="https://github.com/easystats/performance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí™ Models&#39; quality and performance metrics (R2, ICC, LOO, AIC, BF, ...)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;performance &lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/master/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doi.org/10.21105/joss.03139&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.03139/status.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=performance&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/performance&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cranlogs.r-pkg.org/&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/performance&#34; alt=&#34;total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=performance&#34;&gt;&lt;img src=&#34;https://tinyverse.netlify.com/badge/performance&#34; alt=&#34;status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Test if your model is a good model!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A crucial aspect when building regression models is to evaluate the quality of modelfit. It is important to investigate how well models fit to the data and which fit indices to report. Functions to create diagnostic plots or to compute fit measures do exist, however, mostly spread over different packages. There is no unique and consistent approach to assess the model quality for different kind of models.&lt;/p&gt; &#xA;&lt;p&gt;The primary goal of the &lt;strong&gt;performance&lt;/strong&gt; package is to fill this gap and to provide utilities for computing &lt;strong&gt;indices of model quality&lt;/strong&gt; and &lt;strong&gt;goodness of fit&lt;/strong&gt;. These include measures like r-squared (R2), root mean squared error (RMSE) or intraclass correlation coefficient (ICC) , but also functions to check (mixed) models for overdispersion, zero-inflation, convergence or singularity.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=performance&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/performance&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.r-universe.dev&#34;&gt;&lt;img src=&#34;https://easystats.r-universe.dev/badges/performance&#34; alt=&#34;performance status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/easystats/performance/actions&#34;&gt;&lt;img src=&#34;https://github.com/easystats/performance/workflows/R-check/badge.svg?branch=master&#34; alt=&#34;R check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;performance&lt;/em&gt; package is available on CRAN, while its latest development version is available on R-universe (from &lt;em&gt;rOpenSci&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Release&lt;/td&gt; &#xA;   &lt;td&gt;CRAN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;performance&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;R-universe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;performance&#34;, repos = &#34;https://easystats.r-universe.dev&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Once you have downloaded the package, you can then load it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#34;performance&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;To cite performance in publications use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;citation(&#34;performance&#34;)&#xA;#&amp;gt; &#xA;#&amp;gt;   L√ºdecke et al., (2021). performance: An R Package for Assessment, Comparison and&#xA;#&amp;gt;   Testing of Statistical Models. Journal of Open Source Software, 6(60), 3139.&#xA;#&amp;gt;   https://doi.org/10.21105/joss.03139&#xA;#&amp;gt; &#xA;#&amp;gt; A BibTeX entry for LaTeX users is&#xA;#&amp;gt; &#xA;#&amp;gt;   @Article{,&#xA;#&amp;gt;     title = {{performance}: An {R} Package for Assessment, Comparison and Testing of Statistical Models},&#xA;#&amp;gt;     author = {Daniel L√ºdecke and Mattan S. Ben-Shachar and Indrajeet Patil and Philip Waggoner and Dominique Makowski},&#xA;#&amp;gt;     year = {2021},&#xA;#&amp;gt;     journal = {Journal of Open Source Software},&#xA;#&amp;gt;     volume = {6},&#xA;#&amp;gt;     number = {60},&#xA;#&amp;gt;     pages = {3139},&#xA;#&amp;gt;     doi = {10.21105/joss.03139},&#xA;#&amp;gt;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://easystats.github.io/performance/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-performance-orange.svg?colorB=E91E63&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.github.io/blog/posts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/blog-easystats-orange.svg?colorB=FF9800&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.github.io/performance/reference/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/features-performance-orange.svg?colorB=2196F3&#34; alt=&#34;Features&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is a nice introduction into the package on &lt;a href=&#34;https://www.youtube.com/watch?v=EPIxQ5i5oxs&#34;&gt;youtube&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;The &lt;em&gt;performance&lt;/em&gt; workflow&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/master/man/figures/figure_workflow.png&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h3&gt;Assessing model quality&lt;/h3&gt; &#xA;&lt;h4&gt;R-squared&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt; has a generic &lt;code&gt;r2()&lt;/code&gt; function, which computes the r-squared for many different models, including mixed effects and Bayesian regression models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;r2()&lt;/code&gt; returns a list containing values related to the ‚Äúmost appropriate‚Äù r-squared for the given model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- lm(mpg ~ wt + cyl, data = mtcars)&#xA;r2(model)&#xA;#&amp;gt; # R2 for Linear Regression&#xA;#&amp;gt;        R2: 0.830&#xA;#&amp;gt;   adj. R2: 0.819&#xA;&#xA;model &amp;lt;- glm(am ~ wt + cyl, data = mtcars, family = binomial)&#xA;r2(model)&#xA;#&amp;gt; # R2 for Logistic Regression&#xA;#&amp;gt;   Tjur&#39;s R2: 0.705&#xA;&#xA;library(MASS)&#xA;data(housing)&#xA;model &amp;lt;- polr(Sat ~ Infl + Type + Cont, weights = Freq, data = housing)&#xA;r2(model)&#xA;#&amp;gt;   Nagelkerke&#39;s R2: 0.108&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The different R-squared measures can also be accessed directly via functions like &lt;code&gt;r2_bayes()&lt;/code&gt;, &lt;code&gt;r2_coxsnell()&lt;/code&gt; or &lt;code&gt;r2_nagelkerke()&lt;/code&gt; (see a full list of functions &lt;a href=&#34;https://easystats.github.io/performance/reference/index.html#section-r-functions&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For mixed models, the &lt;em&gt;conditional&lt;/em&gt; and &lt;em&gt;marginal&lt;/em&gt; R-squared are returned. The &lt;em&gt;marginal R-squared&lt;/em&gt; considers only the variance of the fixed effects and indicates how much of the model‚Äôs variance is explained by the fixed effects part only. The &lt;em&gt;conditional R-squared&lt;/em&gt; takes both the fixed and random effects into account and indicates how much of the model‚Äôs variance is explained by the ‚Äúcomplete‚Äù model.&lt;/p&gt; &#xA;&lt;p&gt;For frequentist mixed models, &lt;code&gt;r2()&lt;/code&gt; (resp. &lt;code&gt;r2_nakagawa()&lt;/code&gt;) computes the &lt;em&gt;mean&lt;/em&gt; random effect variances, thus &lt;code&gt;r2()&lt;/code&gt; is also appropriate for mixed models with more complex random effects structures, like random slopes or nested random effects (Johnson 2014; Nakagawa, Johnson, and Schielzeth 2017).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(123)&#xA;library(rstanarm)&#xA;&#xA;model &amp;lt;- stan_glmer(Petal.Length ~ Petal.Width + (1 | Species), data = iris, cores = 4)&#xA;&#xA;r2(model)&#xA;#&amp;gt; # Bayesian R2 with Compatibility Interval&#xA;#&amp;gt; &#xA;#&amp;gt;   Conditional R2: 0.953 (95% CI [0.941, 0.963])&#xA;#&amp;gt;      Marginal R2: 0.824 (95% CI [0.713, 0.896])&#xA;&#xA;library(lme4)&#xA;model &amp;lt;- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;r2(model)&#xA;#&amp;gt; # R2 for Mixed Models&#xA;#&amp;gt; &#xA;#&amp;gt;   Conditional R2: 0.799&#xA;#&amp;gt;      Marginal R2: 0.279&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Intraclass Correlation Coefficient (ICC)&lt;/h4&gt; &#xA;&lt;p&gt;Similar to R-squared, the ICC provides information on the explained variance and can be interpreted as ‚Äúthe proportion of the variance explained by the grouping structure in the population‚Äù (Hox 2010).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;icc()&lt;/code&gt; calculates the ICC for various mixed model objects, including &lt;code&gt;stanreg&lt;/code&gt; models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(lme4)&#xA;model &amp;lt;- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;icc(model)&#xA;#&amp;gt; # Intraclass Correlation Coefficient&#xA;#&amp;gt; &#xA;#&amp;gt;      Adjusted ICC: 0.722&#xA;#&amp;gt;   Conditional ICC: 0.521&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;‚Ä¶and models of class &lt;code&gt;brmsfit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(brms)&#xA;set.seed(123)&#xA;model &amp;lt;- brm(mpg ~ wt + (1 | cyl) + (1 + wt | gear), data = mtcars)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;icc(model)&#xA;#&amp;gt; # Intraclass Correlation Coefficient&#xA;#&amp;gt; &#xA;#&amp;gt;      Adjusted ICC: 0.930&#xA;#&amp;gt;   Conditional ICC: 0.771&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model diagnostics&lt;/h3&gt; &#xA;&lt;h4&gt;Check for overdispersion&lt;/h4&gt; &#xA;&lt;p&gt;Overdispersion occurs when the observed variance in the data is higher than the expected variance from the model assumption (for Poisson, variance roughly equals the mean of an outcome). &lt;code&gt;check_overdispersion()&lt;/code&gt; checks if a count model (including mixed models) is overdispersed or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(glmmTMB)&#xA;data(Salamanders)&#xA;model &amp;lt;- glm(count ~ spp + mined, family = poisson, data = Salamanders)&#xA;check_overdispersion(model)&#xA;#&amp;gt; # Overdispersion test&#xA;#&amp;gt; &#xA;#&amp;gt;        dispersion ratio =    2.946&#xA;#&amp;gt;   Pearson&#39;s Chi-Squared = 1873.710&#xA;#&amp;gt;                 p-value =  &amp;lt; 0.001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overdispersion can be fixed by either modelling the dispersion parameter (not possible with all packages), or by choosing a different distributional family (like Quasi-Poisson, or negative binomial, see (Gelman and Hill 2007)).&lt;/p&gt; &#xA;&lt;h4&gt;Check for zero-inflation&lt;/h4&gt; &#xA;&lt;p&gt;Zero-inflation (in (Quasi-)Poisson models) is indicated when the amount of observed zeros is larger than the amount of predicted zeros, so the model is &lt;em&gt;underfitting&lt;/em&gt; zeros. In such cases, it is recommended to use negative binomial or zero-inflated models.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;check_zeroinflation()&lt;/code&gt; to check if zero-inflation is present in the fitted model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- glm(count ~ spp + mined, family = poisson, data = Salamanders)&#xA;check_zeroinflation(model)&#xA;#&amp;gt; # Check for zero-inflation&#xA;#&amp;gt; &#xA;#&amp;gt;    Observed zeros: 387&#xA;#&amp;gt;   Predicted zeros: 298&#xA;#&amp;gt;             Ratio: 0.77&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Check for singular model fits&lt;/h4&gt; &#xA;&lt;p&gt;A ‚Äúsingular‚Äù model fit means that some dimensions of the variance-covariance matrix have been estimated as exactly zero. This often occurs for mixed models with overly complex random effects structures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;check_singularity()&lt;/code&gt; checks mixed models (of class &lt;code&gt;lme&lt;/code&gt;, &lt;code&gt;merMod&lt;/code&gt;, &lt;code&gt;glmmTMB&lt;/code&gt; or &lt;code&gt;MixMod&lt;/code&gt;) for singularity, and returns &lt;code&gt;TRUE&lt;/code&gt; if the model fit is singular.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(lme4)&#xA;data(sleepstudy)&#xA;&#xA;# prepare data&#xA;set.seed(123)&#xA;sleepstudy$mygrp &amp;lt;- sample(1:5, size = 180, replace = TRUE)&#xA;sleepstudy$mysubgrp &amp;lt;- NA&#xA;for (i in 1:5) {&#xA;    filter_group &amp;lt;- sleepstudy$mygrp == i&#xA;    sleepstudy$mysubgrp[filter_group] &amp;lt;- sample(1:30, size = sum(filter_group), replace = TRUE)&#xA;}&#xA;&#xA;# fit strange model&#xA;model &amp;lt;- lmer(Reaction ~ Days + (1 | mygrp/mysubgrp) + (1 | Subject), data = sleepstudy)&#xA;&#xA;check_singularity(model)&#xA;#&amp;gt; [1] TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remedies to cure issues with singular fits can be found &lt;a href=&#34;https://easystats.github.io/performance/reference/check_singularity.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Check for heteroskedasticity&lt;/h4&gt; &#xA;&lt;p&gt;Linear models assume constant error variance (homoskedasticity).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;check_heteroscedasticity()&lt;/code&gt; functions assess if this assumption has been violated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(cars)&#xA;model &amp;lt;- lm(dist ~ speed, data = cars)&#xA;&#xA;check_heteroscedasticity(model)&#xA;#&amp;gt; Warning: Heteroscedasticity (non-constant error variance) detected (p = 0.031).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comprehensive visualization of model checks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;performance&lt;/strong&gt; provides many functions to check model assumptions, like &lt;code&gt;check_collinearity()&lt;/code&gt;, &lt;code&gt;check_normality()&lt;/code&gt; or &lt;code&gt;check_heteroscedasticity()&lt;/code&gt;. To get a comprehensive check, use &lt;code&gt;check_model()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# defining a model&#xA;model &amp;lt;- lm(mpg ~ wt + am + gear + vs * cyl, data = mtcars)&#xA;&#xA;# checking model assumptions&#xA;check_model(model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/master/man/figures/unnamed-chunk-14-1.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;h3&gt;Model performance summaries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;model_performance()&lt;/code&gt; computes indices of model performance for regression models. Depending on the model object, typical indices might be r-squared, AIC, BIC, RMSE, ICC or LOOIC.&lt;/p&gt; &#xA;&lt;h4&gt;Linear model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m1 &amp;lt;- lm(mpg ~ wt + cyl, data = mtcars)&#xA;model_performance(m1)&#xA;#&amp;gt; # Indices of model performance&#xA;#&amp;gt; &#xA;#&amp;gt; AIC     |     BIC |    R2 | R2 (adj.) |  RMSE | Sigma&#xA;#&amp;gt; -----------------------------------------------------&#xA;#&amp;gt; 156.010 | 161.873 | 0.830 |     0.819 | 2.444 | 2.568&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logistic regression&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m2 &amp;lt;- glm(vs ~ wt + mpg, data = mtcars, family = &#34;binomial&#34;)&#xA;model_performance(m2)&#xA;#&amp;gt; # Indices of model performance&#xA;#&amp;gt; &#xA;#&amp;gt; AIC    |    BIC | Tjur&#39;s R2 |  RMSE | Sigma | Log_loss | Score_log | Score_spherical |   PCP&#xA;#&amp;gt; --------------------------------------------------------------------------------------------&#xA;#&amp;gt; 31.298 | 35.695 |     0.478 | 0.359 | 0.934 |    0.395 |   -14.903 |           0.095 | 0.743&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linear mixed model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(lme4)&#xA;m3 &amp;lt;- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;model_performance(m3)&#xA;#&amp;gt; # Indices of model performance&#xA;#&amp;gt; &#xA;#&amp;gt; AIC      |     AICc |      BIC | R2 (cond.) | R2 (marg.) |   ICC |   RMSE |  Sigma&#xA;#&amp;gt; ----------------------------------------------------------------------------------&#xA;#&amp;gt; 1755.628 | 1756.114 | 1774.786 |      0.799 |      0.279 | 0.722 | 23.438 | 25.592&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Models comparison&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;compare_performance()&lt;/code&gt; function can be used to compare the performance and quality of several models (including models of different types).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;counts &amp;lt;- c(18, 17, 15, 20, 10, 20, 25, 13, 12)&#xA;outcome &amp;lt;- gl(3, 1, 9)&#xA;treatment &amp;lt;- gl(3, 3)&#xA;m4 &amp;lt;- glm(counts ~ outcome + treatment, family = poisson())&#xA;&#xA;compare_performance(m1, m2, m3, m4)&#xA;#&amp;gt; # Comparison of Model Performance Indices&#xA;#&amp;gt; &#xA;#&amp;gt; Name |   Model |      AIC | AIC weights |      BIC | BIC weights |   RMSE |  Sigma | Score_log | Score_spherical |    R2 | R2 (adj.) | Tjur&#39;s R2 | Log_loss |   PCP |     AICc | AICc weights | R2 (cond.) | R2 (marg.) |   ICC | Nagelkerke&#39;s R2&#xA;#&amp;gt; -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#xA;#&amp;gt; m1   |      lm |  156.010 |     &amp;lt; 0.001 |  161.873 |     &amp;lt; 0.001 |  2.444 |  2.568 |           |                 | 0.830 |     0.819 |           |          |       |          |              |            |            |       |                &#xA;#&amp;gt; m2   |     glm |   31.298 |       1.000 |   35.695 |       1.000 |  0.359 |  0.934 |   -14.903 |           0.095 |       |           |     0.478 |    0.395 | 0.743 |          |              |            |            |       |                &#xA;#&amp;gt; m3   | lmerMod | 1763.986 |     &amp;lt; 0.001 | 1783.144 |     &amp;lt; 0.001 | 23.438 | 25.592 |           |                 |       |           |           |          |       | 1764.471 |              |      0.799 |      0.279 | 0.722 |                &#xA;#&amp;gt; m4   |     glm |   56.761 |     &amp;lt; 0.001 |   57.747 |     &amp;lt; 0.001 |  3.043 |  1.132 |    -2.598 |           0.324 |       |           |           |          |       |          |              |            |            |       |           0.657&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;General index of model performance&lt;/h4&gt; &#xA;&lt;p&gt;One can also easily compute and a &lt;a href=&#34;https://easystats.github.io/performance/reference/compare_performance.html#details&#34;&gt;&lt;strong&gt;composite index&lt;/strong&gt;&lt;/a&gt; of model performance and sort the models from the best one to the worse.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;compare_performance(m1, m2, m3, m4, rank = TRUE)&#xA;#&amp;gt; # Comparison of Model Performance Indices&#xA;#&amp;gt; &#xA;#&amp;gt; Name |   Model |   RMSE |  Sigma | AIC weights | BIC weights | Performance-Score&#xA;#&amp;gt; --------------------------------------------------------------------------------&#xA;#&amp;gt; m2   |     glm |  0.359 |  0.934 |       1.000 |       1.000 |           100.00%&#xA;#&amp;gt; m4   |     glm |  3.043 |  1.132 |     &amp;lt; 0.001 |     &amp;lt; 0.001 |            46.89%&#xA;#&amp;gt; m1   |      lm |  2.444 |  2.568 |     &amp;lt; 0.001 |     &amp;lt; 0.001 |            46.09%&#xA;#&amp;gt; m3   | lmerMod | 23.438 | 25.592 |     &amp;lt; 0.001 |     &amp;lt; 0.001 |             0.00%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Visualisation of indices of models‚Äô performance&lt;/h4&gt; &#xA;&lt;p&gt;Finally, we provide convenient visualisation (the &lt;code&gt;see&lt;/code&gt; package must be installed).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(compare_performance(m1, m2, m4, rank = TRUE))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/performance/master/man/figures/unnamed-chunk-20-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;Testing models&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;test_performance()&lt;/code&gt; (and &lt;code&gt;test_bf&lt;/code&gt;, its Bayesian sister) carries out the most relevant and appropriate tests based on the input (for instance, whether the models are nested or not).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(123)&#xA;data(iris)&#xA;&#xA;lm1 &amp;lt;- lm(Sepal.Length ~ Species, data = iris)&#xA;lm2 &amp;lt;- lm(Sepal.Length ~ Species + Petal.Length, data = iris)&#xA;lm3 &amp;lt;- lm(Sepal.Length ~ Species * Sepal.Width, data = iris)&#xA;lm4 &amp;lt;- lm(Sepal.Length ~ Species * Sepal.Width + Petal.Length + Petal.Width, data = iris)&#xA;&#xA;test_performance(lm1, lm2, lm3, lm4)&#xA;#&amp;gt; Name | Model |     BF | Omega2 | p (Omega2) |    LR | p (LR)&#xA;#&amp;gt; ------------------------------------------------------------&#xA;#&amp;gt; lm1  |    lm |        |        |            |       |       &#xA;#&amp;gt; lm2  |    lm | &amp;gt; 1000 |   0.69 |     &amp;lt; .001 | -6.25 | &amp;lt; .001&#xA;#&amp;gt; lm3  |    lm | &amp;gt; 1000 |   0.36 |     &amp;lt; .001 | -3.44 | &amp;lt; .001&#xA;#&amp;gt; lm4  |    lm | &amp;gt; 1000 |   0.73 |     &amp;lt; .001 | -7.77 | &amp;lt; .001&#xA;#&amp;gt; Each model is compared to lm1.&#xA;&#xA;test_bf(lm1, lm2, lm3, lm4)&#xA;#&amp;gt; Bayes Factors for Model Comparison&#xA;#&amp;gt; &#xA;#&amp;gt;       Model                                                    BF&#xA;#&amp;gt; [lm2] Species + Petal.Length                             3.45e+26&#xA;#&amp;gt; [lm3] Species * Sepal.Width                              4.69e+07&#xA;#&amp;gt; [lm4] Species * Sepal.Width + Petal.Length + Petal.Width 7.58e+29&#xA;#&amp;gt; &#xA;#&amp;gt; * Against Denominator: [lm1] Species&#xA;#&amp;gt; *   Bayes Factor Type: BIC approximation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the performance project is released with a &lt;a href=&#34;https://easystats.github.io/performance/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We are happy to receive bug reports, suggestions, questions, and (most of all) contributions to fix problems and add features.&lt;/p&gt; &#xA;&lt;p&gt;Please follow contributing guidelines mentioned here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://easystats.github.io/performance/CONTRIBUTING.html&#34;&gt;https://easystats.github.io/performance/CONTRIBUTING.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt; &#xA; &lt;div id=&#34;ref-gelman_data_2007&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Gelman, Andrew, and Jennifer Hill. 2007. &lt;em&gt;Data Analysis Using Regression and Multilevel/Hierarchical Models&lt;/em&gt;. Analytical Methods for Social Research. Cambridge ; New York: Cambridge University Press.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-hox_multilevel_2010&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Hox, J. J. 2010. &lt;em&gt;Multilevel Analysis: Techniques and Applications&lt;/em&gt;. 2nd ed. Quantitative Methodology Series. New York: Routledge.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-johnson_extension_2014&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Johnson, Paul C. D. 2014. ‚ÄúExtension of Nakagawa &amp;amp; Schielzeth‚Äôs R2 GLMM to Random Slopes Models.‚Äù Edited by Robert B. O‚ÄôHara. &lt;em&gt;Methods in Ecology and Evolution&lt;/em&gt; 5 (9): 944‚Äì46. &lt;a href=&#34;https://doi.org/10.1111/2041-210X.12225&#34;&gt;https://doi.org/10.1111/2041-210X.12225&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-nakagawa_coefficient_2017&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Nakagawa, Shinichi, Paul C. D. Johnson, and Holger Schielzeth. 2017. ‚ÄúThe Coefficient of Determination R2 and Intra-Class Correlation Coefficient from Generalized Linear Mixed-Effects Models Revisited and Expanded.‚Äù &lt;em&gt;Journal of The Royal Society Interface&lt;/em&gt; 14 (134): 20170213. &lt;a href=&#34;https://doi.org/10.1098/rsif.2017.0213&#34;&gt;https://doi.org/10.1098/rsif.2017.0213&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>r-lib/rlang</title>
    <updated>2022-06-09T01:49:53Z</updated>
    <id>tag:github.com,2022-06-09:/r-lib/rlang</id>
    <link href="https://github.com/r-lib/rlang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low-level API for programming with R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rlang &lt;img src=&#34;https://raw.githubusercontent.com/r-lib/rlang/main/man/figures/logo.png&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.codecov.io/gh/r-lib/rlang?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-lib/rlang/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-green.svg?sanitize=true&#34; alt=&#34;Lifecycle Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/r-lib/rlang/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/r-lib/rlang/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;rlang is a collection of frameworks and APIs for programming with R.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks&lt;/h2&gt; &#xA;&lt;p&gt;Two comprehensive frameworks are implemented in rlang.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tidy eval&lt;/strong&gt;, a programmable &lt;a href=&#34;https://rlang.r-lib.org/reference/topic-data-mask.html&#34;&gt;data-masking&lt;/a&gt; framework used in tidyverse packages like dplyr and ggplot2. As a user, you will encounter the embracing operator &lt;a href=&#34;https://rlang.r-lib.org/reference/embrace-operator.html&#34;&gt;&lt;code&gt;{{&lt;/code&gt;&lt;/a&gt; and name injection with the &lt;a href=&#34;https://glue.tidyverse.org/&#34;&gt;glue&lt;/a&gt; operators &lt;a href=&#34;https://rlang.r-lib.org/reference/glue-operators.html&#34;&gt;&lt;code&gt;&#34;{&#34;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://rlang.r-lib.org/reference/glue-operators.html&#34;&gt;&lt;code&gt;&#34;{{&#34;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rlang errors&lt;/strong&gt;, a set of tools to signal and display errors. This includes backtrace capture with &lt;code&gt;global_entrace()&lt;/code&gt; and backtrace display with &lt;code&gt;last_error()&lt;/code&gt; and &lt;code&gt;last_warnings()&lt;/code&gt;. Use &lt;code&gt;abort()&lt;/code&gt; to create errors with bullet lists, structured metadata, and error chaining support.&lt;/p&gt; &lt;p&gt;The display of error messages is optimised for bullet lists and chained errors and optionally integrates with the cli package (see &lt;code&gt;local_use_cli()&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Argument intake&lt;/h2&gt; &#xA;&lt;p&gt;A set of tools help you check, validate, and preprocess arguments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Checking function arguments, e.g. &lt;code&gt;arg_match()&lt;/code&gt;, &lt;code&gt;check_required()&lt;/code&gt;, and &lt;code&gt;check_exclusive()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checking dots, e.g. &lt;code&gt;check_dots_used()&lt;/code&gt; and &lt;code&gt;check_dots_empty()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Collecting &lt;a href=&#34;https://rlang.r-lib.org/reference/dyn-dots.html&#34;&gt;dynamic dots&lt;/a&gt;, e.g. &lt;code&gt;list2()&lt;/code&gt;. These dots support splicing with &lt;a href=&#34;https://rlang.r-lib.org/reference/splice-operator.html&#34;&gt;&lt;code&gt;!!!&lt;/code&gt;&lt;/a&gt; and name injection with the &lt;a href=&#34;https://glue.tidyverse.org/&#34;&gt;glue&lt;/a&gt; operators &lt;a href=&#34;https://rlang.r-lib.org/reference/glue-operators.html&#34;&gt;&lt;code&gt;&#34;{&#34;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://rlang.r-lib.org/reference/glue-operators.html&#34;&gt;&lt;code&gt;&#34;{{&#34;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Programming interfaces&lt;/h2&gt; &#xA;&lt;p&gt;rlang provides various interfaces for working with R and R objects.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The R session, e.g. &lt;code&gt;check_installed()&lt;/code&gt;, &lt;code&gt;on_load()&lt;/code&gt;, and &lt;code&gt;on_package_load()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Environments, e.g. &lt;code&gt;env()&lt;/code&gt;, &lt;code&gt;env_has()&lt;/code&gt;, &lt;code&gt;env_get()&lt;/code&gt;, &lt;code&gt;env_bind()&lt;/code&gt;, &lt;code&gt;env_unbind()&lt;/code&gt;, &lt;code&gt;env_print()&lt;/code&gt;, and &lt;code&gt;local_bindings()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Evaluation, e.g. &lt;code&gt;inject()&lt;/code&gt; and &lt;code&gt;eval_bare()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Calls and symbols, e.g. &lt;code&gt;call2()&lt;/code&gt;, &lt;code&gt;is_call()&lt;/code&gt;, &lt;code&gt;is_call_simple()&lt;/code&gt;, &lt;code&gt;data_sym()&lt;/code&gt;, and &lt;code&gt;data_syms()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Functions, e.g. &lt;code&gt;new_function()&lt;/code&gt; and &lt;code&gt;as_function()&lt;/code&gt;. The latter supports the purrr-style formula notation for lambda functions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the released version of rlang from CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;rlang&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install the development version from GitHub with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;pak&#34;)&#xA;pak::pkg_install(&#34;r-lib/rlang&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the rlang project is released with a &lt;a href=&#34;https://rlang.r-lib.org/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>immunogenomics/harmony</title>
    <updated>2022-06-09T01:49:53Z</updated>
    <id>tag:github.com,2022-06-09:/immunogenomics/harmony</id>
    <link href="https://github.com/immunogenomics/harmony" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, sensitive and accurate integration of single-cell data with Harmony&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Harmony &lt;img src=&#34;https://raw.githubusercontent.com/immunogenomics/harmony/master/man/figures/logo.png&#34; width=&#34;181px&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/immunogenomics/harmony&#34;&gt;&lt;img src=&#34;https://travis-ci.org/immunogenomics/harmony.svg?branch=master&#34; alt=&#34;Travis-CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/immunogenomics/harmony&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/immunogenomics/harmony?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.1038/s41592-019-0619-0&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/doi/10.1038/s41592-019-0619-0.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Fast, sensitive and accurate integration of single-cell data with Harmony&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out the manuscript in Nature Methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nature.com/articles/s41592-019-0619-0&#34;&gt;nature website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nature.com/articles/s41592-019-0619-0.epdf?shared_access_token=rDg_Rd07lrFXExt_ySj7V9RgN0jAjWel9jnR3ZoTv0NfDJkKCfDV_X9Mq3lweQmKiXEXxhrebQRjJEZdc-xNv6-7ZN1XotlD_mo5TSS4Z4eWn-kUo6mBwA5dEAKlTfR8OT6E10MZY_E-906ajbzvgg%3D%3D&#34;&gt;read link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Python users, check out the &lt;a href=&#34;https://github.com/slowkow/harmonypy&#34;&gt;harmonypy package&lt;/a&gt; by Kamil Slowikowski.&lt;/p&gt; &#xA;&lt;h1&gt;System requirements&lt;/h1&gt; &#xA;&lt;p&gt;Harmony has been tested on R versions &amp;gt;= 3.4. Please consult the DESCRIPTION file for more details on required R packages. Harmony has been tested on Linux, OS X, and Windows platforms.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To run Harmony, open R and install harmony from CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;harmony&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like the latest development version, install from this github directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(devtools)&#xA;install_github(&#34;immunogenomics/harmony&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage/Demos&lt;/h1&gt; &#xA;&lt;p&gt;We made it easy to run Harmony in most common R analysis pipelines.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://github.com/immunogenomics/harmony/raw/master/vignettes/quickstart.Rmd&#34;&gt;vignette&lt;/a&gt; for a quick start tutorial.&lt;/p&gt; &#xA;&lt;h2&gt;PCA matrix&lt;/h2&gt; &#xA;&lt;p&gt;The Harmony algorithm iteratively corrects PCA embeddings. To input your own low dimensional embeddings directly, set &lt;code&gt;do_pca=FALSE&lt;/code&gt;. Harmony is packaged with a small dataset&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(harmony)&#xA;my_harmony_embeddings &amp;lt;- HarmonyMatrix(my_pca_embeddings, meta_data, &#34;dataset&#34;, do_pca=FALSE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Normalized gene matrix&lt;/h2&gt; &#xA;&lt;p&gt;You can also run Harmony on a sparse matrix of library size normalized expression counts. Harmony will scale these counts, run PCA, and finally perform integration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(harmony)&#xA;my_harmony_embeddings &amp;lt;- HarmonyMatrix(normalized_counts, meta_data, &#34;dataset&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Seurat&lt;/h2&gt; &#xA;&lt;p&gt;You can run Harmony within your Seurat workflow. You&#39;ll only need to make two changes to your code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run Harmony with the &lt;code&gt;RunHarmony()&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;In downstream analyses, use the Harmony embeddings instead of PCA.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, run Harmony and then UMAP in two lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;seuratObj &amp;lt;- RunHarmony(seuratObj, &#34;dataset&#34;)&#xA;seuratObj &amp;lt;- RunUMAP(seuratObj, reduction = &#34;harmony&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details, check out these vignettes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/raw/master/docs/SeuratV2.html&#34;&gt;Seurat V2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/raw/master/docs/SeuratV3.html&#34;&gt;Seurat V3&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MUDAN&lt;/h2&gt; &#xA;&lt;p&gt;You can run Harmony with functions from the &lt;a href=&#34;https://github.com/jefworks/mudan&#34;&gt;MUDAN package&lt;/a&gt;. For more, details, check out this &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/raw/master/docs/mudan.html&#34;&gt;vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Harmony with two or more covariates&lt;/h2&gt; &#xA;&lt;p&gt;Harmony can integrate over multiple covariates. To do this, specify a vector covariates to integrate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_harmony_embeddings &amp;lt;- HarmonyMatrix(&#xA;  my_pca_embeddings, meta_data, c(&#34;dataset&#34;, &#34;donor&#34;, &#34;batch_id&#34;),&#xA;  do_pca = FALSE&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do the same with your Seurat object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;seuratObject &amp;lt;- RunHarmony(seuratObject, c(&#34;dataset&#34;, &#34;donor&#34;, &#34;batch_id&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;p&gt;The examples above all return integrated PCA embeddings. We created a more &lt;a href=&#34;http://htmlpreview.github.io/?https://github.com/immunogenomics/harmony/raw/master/docs/advanced.html&#34;&gt;advanced tutorial&lt;/a&gt; that explores the internal data structures used in the Harmony algorithm.&lt;/p&gt; &#xA;&lt;h1&gt;Reproducing results from manuscript&lt;/h1&gt; &#xA;&lt;p&gt;Code to reproduce Harmony results from the Korsunsky et al 2019 manuscript will be made available on github.com/immunogenomics/harmony2019.&lt;/p&gt;</summary>
  </entry>
</feed>