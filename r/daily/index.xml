<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-19T01:46:29Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davidcarslaw/openair</title>
    <updated>2023-06-19T01:46:29Z</updated>
    <id>tag:github.com,2023-06-19:/davidcarslaw/openair</id>
    <link href="https://github.com/davidcarslaw/openair" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for air quality data analysis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openair: open source tools for air quality data analysis &lt;img src=&#34;https://raw.githubusercontent.com/davidcarslaw/openair/master/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;200&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/davidcarslaw/openair/actions&#34;&gt;&lt;img src=&#34;https://github.com/davidcarslaw/openair/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=openair&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/openair&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/openair&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;strong&gt;openair&lt;/strong&gt; is an R package developed for the purpose of analysing air quality data — or more generally atmospheric composition data. The package is extensively used in academia, the public and private sectors. The project was initially funded by the UK Natural Environment Research Council (&lt;a href=&#34;https://www.ukri.org/councils/nerc/&#34;&gt;NERC&lt;/a&gt;), with additional funds from Defra.&lt;/p&gt; &#xA;&lt;p&gt;The most up to date information on &lt;code&gt;openair&lt;/code&gt; can be found in the package itself and at the book website (&lt;a href=&#34;https://bookdown.org/david_carslaw/openair/&#34;&gt;https://bookdown.org/david_carslaw/openair/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installation can be done in the normal way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;openair&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The development version can be installed from GitHub. Installation of &lt;code&gt;openair&lt;/code&gt; from GitHub is easy using the &lt;code&gt;devtools&lt;/code&gt; package. Note, because &lt;code&gt;openair&lt;/code&gt; contains C++ code a compiler is also needed. For Windows - for example, &lt;a href=&#34;https://cran.r-project.org/bin/windows/Rtools/&#34;&gt;Rtools&lt;/a&gt; is needed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;davidcarslaw/openair&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;openair&lt;/code&gt; has developed over several years to help analyse air quality data.&lt;/p&gt; &#xA;&lt;p&gt;This package continues to develop and input from other developers would be welcome. A summary of some of the features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access to data&lt;/strong&gt; from several hundred UK air pollution monitoring sites through the &lt;code&gt;importAURN&lt;/code&gt; and family functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Utility functions&lt;/strong&gt; such as &lt;code&gt;timeAverage&lt;/code&gt; and &lt;code&gt;selectByDate&lt;/code&gt; to make it easier to manipulate atmospheric composition data.&lt;/li&gt; &#xA; &lt;li&gt;Flexible &lt;strong&gt;wind and pollution roses&lt;/strong&gt; through &lt;code&gt;windRose&lt;/code&gt; and &lt;code&gt;pollutionRose&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Flexible plot conditioning to easily plot data by hour or the day, day of the week, season etc. through the &lt;code&gt;openair&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; option available in most functions.&lt;/li&gt; &#xA; &lt;li&gt;More sophisticated &lt;strong&gt;bivariate polar plots&lt;/strong&gt; and conditional probability functions to help characterise different sources of pollution. A paper on the latter is available &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S1364815214001339&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access to NOAA Hysplit pre-calculated annual 96-hour back &lt;strong&gt;trajectories&lt;/strong&gt; and many plotting and analysis functions e.g. trajectory frequencies, Potential Source Contribution Function and trajectory clustering.&lt;/li&gt; &#xA; &lt;li&gt;Many functions for air quality &lt;strong&gt;model evaluation&lt;/strong&gt; using the flexible methods described above e.g.&amp;nbsp;the &lt;code&gt;type&lt;/code&gt; option to easily evaluate models by season, hour of the day etc. These include key model statistics, Taylor Diagram, Conditional Quantile plots.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Brief examples&lt;/h2&gt; &#xA;&lt;h3&gt;Import data from the UK Automatic Urban and Rural Network&lt;/h3&gt; &#xA;&lt;p&gt;It is easy to import hourly data from 100s of sites and to import several sites at one time and several years of data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(openair)&#xA;kc1 &amp;lt;- importAURN(site = &#34;kc1&#34;, year = 2020)&#xA;kc1&#xA;#&amp;gt; # A tibble: 8,784 × 14&#xA;#&amp;gt;    site      code  date                   co   nox   no2    no    o3   so2  pm10&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt; &amp;lt;dttm&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 London N… KC1   2020-01-01 00:00:00 0.214  64.8  46.2 12.1   1.13    NA  41.8&#xA;#&amp;gt;  2 London N… KC1   2020-01-01 01:00:00 0.237  74.1  45.0 19.0   1.20    NA  43  &#xA;#&amp;gt;  3 London N… KC1   2020-01-01 02:00:00 0.204  60.5  41.4 12.4   1.50    NA  46.0&#xA;#&amp;gt;  4 London N… KC1   2020-01-01 03:00:00 0.204  53.5  39.8  8.93  1.60    NA  48.5&#xA;#&amp;gt;  5 London N… KC1   2020-01-01 04:00:00 0.169  37.7  33.6  2.63  5.79    NA  45.4&#xA;#&amp;gt;  6 London N… KC1   2020-01-01 05:00:00 0.160  43.3  36.8  4.25  6.09    NA  43.8&#xA;#&amp;gt;  7 London N… KC1   2020-01-01 06:00:00 0.157  48.2  39.4  5.76  2.74    NA  43.6&#xA;#&amp;gt;  8 London N… KC1   2020-01-01 07:00:00 0.178  60.5  44.7 10.3   1.20    NA  42.1&#xA;#&amp;gt;  9 London N… KC1   2020-01-01 08:00:00 0.233  71.8  47.9 15.6   2.25    NA  41.8&#xA;#&amp;gt; 10 London N… KC1   2020-01-01 09:00:00 0.329 128.   46.9 53.2   2.25    NA  37.6&#xA;#&amp;gt; # ℹ 8,774 more rows&#xA;#&amp;gt; # ℹ 4 more variables: pm2.5 &amp;lt;dbl&amp;gt;, ws &amp;lt;dbl&amp;gt;, wd &amp;lt;dbl&amp;gt;, air_temp &amp;lt;dbl&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utility functions&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;selectByDate&lt;/code&gt; function it is easy to select quite complex time-based periods. For example, to select weekday (Monday to Friday) data from June to September for 2012 &lt;em&gt;and&lt;/em&gt; for the hours 7am to 7pm inclusive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sub &amp;lt;- selectByDate(kc1,&#xA;  day = &#34;weekday&#34;,&#xA;  year = 2020,&#xA;  month = 6:9,&#xA;  hour = 7:19&#xA;)&#xA;sub&#xA;#&amp;gt; # A tibble: 1,144 × 14&#xA;#&amp;gt;    date                site     code      co   nox   no2    no    o3   so2  pm10&#xA;#&amp;gt;    &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 2020-06-01 07:00:00 London … KC1   0.125   23.1 16.8  4.14   56.5  2.29  14.8&#xA;#&amp;gt;  2 2020-06-01 08:00:00 London … KC1   0.133   25.2 17.8  4.79   61.7  2.68  17.8&#xA;#&amp;gt;  3 2020-06-01 09:00:00 London … KC1   0.119   15.6 12.2  2.22   75.8  2.35  15.4&#xA;#&amp;gt;  4 2020-06-01 10:00:00 London … KC1   0.104   13.8 11.1  1.79   87.1  1.57  15.2&#xA;#&amp;gt;  5 2020-06-01 11:00:00 London … KC1   0.0956  14.0 11.8  1.46   96.7  1.44  11.4&#xA;#&amp;gt;  6 2020-06-01 12:00:00 London … KC1   0.0985  11.3  9.97 0.893 106.   1.44  11.9&#xA;#&amp;gt;  7 2020-06-01 13:00:00 London … KC1   0.0927  11.0  9.64 0.893 112.   2.03  11.8&#xA;#&amp;gt;  8 2020-06-01 14:00:00 London … KC1   0.0927  12.5 10.8  1.14  114.   2.81  11.9&#xA;#&amp;gt;  9 2020-06-01 15:00:00 London … KC1   0.0811  10.7  9.48 0.822 115.   2.88  10  &#xA;#&amp;gt; 10 2020-06-01 16:00:00 London … KC1   0.0898  13.9 11.9  1.29  104.   2.22   9.1&#xA;#&amp;gt; # ℹ 1,134 more rows&#xA;#&amp;gt; # ℹ 4 more variables: pm2.5 &amp;lt;dbl&amp;gt;, ws &amp;lt;dbl&amp;gt;, wd &amp;lt;dbl&amp;gt;, air_temp &amp;lt;dbl&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly it is easy to time-average data in many flexible ways. For example, 2-week means can be calculated as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sub2 &amp;lt;- timeAverage(kc1, avg.time = &#34;2 week&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The &lt;code&gt;type&lt;/code&gt; option&lt;/h3&gt; &#xA;&lt;p&gt;One of the key aspects of &lt;code&gt;openair&lt;/code&gt; is the use of the &lt;code&gt;type&lt;/code&gt; option, which is available for almost all &lt;code&gt;openair&lt;/code&gt; functions. The &lt;code&gt;type&lt;/code&gt; option partitions data by different categories of variable. There are many built-in options that &lt;code&gt;type&lt;/code&gt; can take based on splitting your data by different date values. A summary of in-built values of type are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;“year” splits data by year&lt;/li&gt; &#xA; &lt;li&gt;“month” splits variables by month of the year&lt;/li&gt; &#xA; &lt;li&gt;“monthyear” splits data by year &lt;em&gt;and&lt;/em&gt; month&lt;/li&gt; &#xA; &lt;li&gt;“season” splits variables by season. Note in this case the user can also supply a &lt;code&gt;hemisphere&lt;/code&gt; option that can be either “northern” (default) or “southern”&lt;/li&gt; &#xA; &lt;li&gt;“weekday” splits variables by day of the week&lt;/li&gt; &#xA; &lt;li&gt;“weekend” splits variables by Saturday, Sunday, weekday&lt;/li&gt; &#xA; &lt;li&gt;“daylight” splits variables by nighttime/daytime. Note the user must supply a &lt;code&gt;longitude&lt;/code&gt; and &lt;code&gt;latitude&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;“dst” splits variables by daylight saving time and non-daylight saving time (see manual for more details)&lt;/li&gt; &#xA; &lt;li&gt;“wd” if wind direction (&lt;code&gt;wd&lt;/code&gt;) is available &lt;code&gt;type = &#34;wd&#34;&lt;/code&gt; will split the data up into 8 sectors: N, NE, E, SE, S, SW, W, NW.&lt;/li&gt; &#xA; &lt;li&gt;“seasonyear (or”yearseason”) will split the data into year-season intervals, keeping the months of a season together. For example, December 2010 is considered as part of winter 2011 (with January and February 2011). This makes it easier to consider contiguous seasons. In contrast, &lt;code&gt;type = &#34;season&#34;&lt;/code&gt; will just split the data into four seasons regardless of the year.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a categorical variable is present in a data frame e.g.&amp;nbsp;&lt;code&gt;site&lt;/code&gt; then that variables can be used directly e.g.&amp;nbsp;&lt;code&gt;type = &#34;site&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;type&lt;/code&gt; can also be a numeric variable. In this case the numeric variable is split up into 4 &lt;em&gt;quantiles&lt;/em&gt; i.e.&amp;nbsp;four partitions containing equal numbers of points. Note the user can supply the option &lt;code&gt;n.levels&lt;/code&gt; to indicate how many quantiles to use.&lt;/p&gt; &#xA;&lt;h3&gt;Example directional analysis&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;openair&lt;/code&gt; can plot basic wind roses very easily provided the variables &lt;code&gt;ws&lt;/code&gt; (wind speed) and &lt;code&gt;wd&lt;/code&gt; (wind direction) are available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;windRose(mydata)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidcarslaw/openair/master/man/figures/README-windrose-1.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;However, the real flexibility comes from being able to use the &lt;code&gt;type&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;windRose(mydata,&#xA;  type = &#34;year&#34;,&#xA;  layout = c(4, 2)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidcarslaw/openair/master/man/figures/README-windrose2-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;There are many flavours of bivariate polar plots, as described &lt;a href=&#34;https://bookdown.org/david_carslaw/openair/sections/directional-analysis/polar-plots.html&#34;&gt;here&lt;/a&gt; that are useful for understanding air pollution sources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polarPlot(mydata,&#xA;  pollutant = &#34;so2&#34;,&#xA;  statistic = &#34;cpf&#34;,&#xA;  percentile = 90,&#xA;  cols = &#34;YlGnBu&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidcarslaw/openair/master/man/figures/README-polarCPF-1.png&#34; width=&#34;60%&#34;&gt;</summary>
  </entry>
  <entry>
    <title>cran/CptNonPar</title>
    <updated>2023-06-19T01:46:29Z</updated>
    <id>tag:github.com,2023-06-19:/cran/CptNonPar</id>
    <link href="https://github.com/cran/CptNonPar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❗ This is a read-only mirror of the CRAN R package repository. CptNonPar — Nonparametric Change Point Detection for Multivariate Time Series. Homepage: https://github.com/EuanMcGonigle/CptNonPar Report bugs for this package: https://github.com/EuanMcGonigle/CptNonPar/issues&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CptNonPar&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EuanMcGonigle/CptNonPar/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/EuanMcGonigle/CptNonPar/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/EuanMcGonigle/CptNonPar?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/EuanMcGonigle/CptNonPar/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Nonparametric change point detection for multivariate time series. Implements the NP-MOJO methodology proposed in&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;McGonigle, E. T., Cho, H. (2023). Nonparametric data segmentation in multivariate time series via joint characteristic functions. arXiv preprint &lt;a href=&#34;https://arxiv.org/abs/2305.07581&#34;&gt;arXiv:2305.07581&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of &lt;code&gt;CptNonPar&lt;/code&gt; from &lt;a href=&#34;https://CRAN.R-project.org&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#34;CptNonPar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version of &lt;code&gt;CptNonPar&lt;/code&gt; from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devtools::install_github(&#34;https://github.com/EuanMcGonigle/CptNonPar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For further examples, see the help files within the package. We can generate an example for change point detection as follows.&lt;/p&gt; &#xA;&lt;p&gt;We generate a univariate time series of length 1000, with a mean change at time 300, and an autocovariance (but not marginal) change at time 650. Then, we perform the multi-lag NP-MOJO algorithm with lags 0 and 1, and print the estimated change points and the associated clusters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(CptNonPar)&#xA;&#xA;n &amp;lt;- 1000&#xA;set.seed(123)&#xA;&#xA;noise1 &amp;lt;- stats::arima.sim(model = list(ar = -0.5), n = n, sd = sqrt(1 - 0.5^2))&#xA;noise2 &amp;lt;- stats::arima.sim(model = list(ar = 0.5), n = n, sd = sqrt(1 - 0.5^2))&#xA;&#xA;noise &amp;lt;- c(noise1[1:650], noise2[651:n])&#xA;&#xA;signal &amp;lt;- c(rep(0, 300), rep(0.7, 700))&#xA;&#xA;x &amp;lt;- signal + noise&#xA;&#xA;x.c &amp;lt;- np.mojo.multilag(x, G = 166, lags = c(0, 1))&#xA;&#xA;x.c$cpts&#xA;#&amp;gt;       cp lag p.val&#xA;#&amp;gt; [1,] 295   0 0.000&#xA;#&amp;gt; [2,] 648   1 0.005&#xA;&#xA;x.c$cpt.clusters&#xA;#&amp;gt; [[1]]&#xA;#&amp;gt;       cp lag p.val&#xA;#&amp;gt; [1,] 295   0     0&#xA;#&amp;gt; [2,] 296   1     0&#xA;#&amp;gt; &#xA;#&amp;gt; [[2]]&#xA;#&amp;gt;       cp lag p.val&#xA;#&amp;gt; [1,] 648   1 0.005&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>