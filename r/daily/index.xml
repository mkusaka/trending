<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-12T01:39:30Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cararthompson/verbaliseR</title>
    <updated>2022-10-12T01:39:30Z</updated>
    <id>tag:github.com,2022-10-12:/cararthompson/verbaliseR</id>
    <link href="https://github.com/cararthompson/verbaliseR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A package to help make your R-generated text mighty fine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;verbaliseR&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=verbaliseR&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/verbaliseR&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/verbaliseR?color=#0B3748&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cararthompson/verbaliseR/main/inst/figures/logo-social.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Make your text mighty fine&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;{verbaliseR}&lt;/strong&gt; is a collection of functions that make it easier to turn R analysis outputs into sentences. Here’s a quick example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)&#xA;&#xA;unique_species &amp;lt;- palmerpenguins::penguins %&amp;gt;%&#xA;  pull(species) %&amp;gt;%&#xA;  unique()&#xA;&#xA;paste0(&#34;There are &#34;, &#xA;       verbaliseR::pluralise(word = &#34;species&#34;, &#xA;                             count = length(unique_species), &#xA;                             plural = &#34;species&#34;, &#xA;                             add_or_swap = &#34;swap&#34;), &#xA;       &#34; of penguins in this dataset: &#34;,&#xA;       verbaliseR::listify(unique_species, &#xA;                           linking_word = &#34;and&#34;),&#xA;       &#34;.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;There are three species of penguins in this dataset: Adelie, Gentoo and Chinstrap.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# From CRAN&#xA;install.packages(&#34;verbaliseR&#34;)&#xA;&#xA;# From Github...&#xA;# ... if you don&#39;t already have the {remotes} package installed:&#xA;install.packages(&#34;remotes&#34;)&#xA;&#xA;# ... then:&#xA;remotes::install_github(&#34;cararthompson/verbaliseR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Main functions&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;listify()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Takes a vector and returns a string where the items in the vector are listed in prose. The link word can be anything you like, and there is an option to add an Oxford comma if desired. Here are a few examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The default returns a list with &#34;and&#34; ...&#xA;verbaliseR::listify(c(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;a, b and c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# to which you can choose add an Oxford comma&#xA;verbaliseR::listify(c(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;),&#xA;                    oxford_comma = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;a, b, and c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# You can modify the linking word...&#xA;verbaliseR::listify(c(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;), &#xA;                    linking_word = &#34;or&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;a, b or c&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ... and get quite creative with it ...&#xA;verbaliseR::listify(c(verbaliseR::listify(c(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;), &#xA;                                          linking_word = &#34;or&#34;),&#xA;                      &#34;d&#34;),&#xA;                    linking_word = &#34;but most certainly not&#34;,&#xA;                    oxford_comma = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;a, b or c, but most certainly not d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ... in whatever language you choose&#xA;verbaliseR::listify(c(verbaliseR::listify(c(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;), &#xA;                                          linking_word = &#34;ou&#34;),&#xA;                      &#34;d&#34;),&#xA;                    linking_word = &#34;mais jamais au grand jamais&#34;,&#xA;                    oxford_comma = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;a, b ou c, mais jamais au grand jamais d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;prettify_date()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Takes a &lt;code&gt;date&lt;/code&gt; or string formatted as “YYYY_MM_DD” or “YYYY/MM/DD” and returns a string which is the date formatted in prose. Options include UK/US style and formal/informal (without / with the ordinals)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Defaults to UK style, informal&#xA;verbaliseR::prettify_date(Sys.Date())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;15th September 2022&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Can also do US style&#xA;verbaliseR::prettify_date(&#34;2022/09/15&#34;, &#xA;                          uk_or_us = &#34;US&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;September 15th, 2022&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# To remove the ordinals, select formal_or_informal = &#34;formal&#34;&#xA;verbaliseR::prettify_date(&#34;2022-09-15&#34;, &#xA;                          uk_or_us = &#34;US&#34;, &#xA;                          formal_or_informal = &#34;formal&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;September 15, 2022&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;num_to_text()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Used within &lt;code&gt;pluralise()&lt;/code&gt; this function can also be useful on its own. It takes a number (whole number as numeric or integer) and writes it out in full, applying the following rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Numbers 0-10 are always written out in full, regardless of their place in the sentence&lt;/li&gt; &#xA; &lt;li&gt;Numbers 11-1000 are written out in full only if they are at the start of a sentence&lt;/li&gt; &#xA; &lt;li&gt;Numbers above 1000 or numbers containing a decimal point are never written out in full, but are formatted for readability with a big mark delimiter (e.g.&amp;nbsp;12345.67 turns into “1,2345.67”)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The big mark can be modified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;verbaliseR::num_to_text(3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;three&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 0 defaults to &#34;no&#34;, but can be changed to anything&#xA;verbaliseR::num_to_text(0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;no&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;verbaliseR::num_to_text(0, zero_or_no = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;none&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;verbaliseR::num_to_text(3, &#xA;                        sentence_start = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;Three&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Only whole numbers are returned as text; a warning is issued accordingly&#xA;verbaliseR::num_to_text(1.25, &#xA;                        sentence_start = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Warning in verbaliseR::num_to_text(1.25, sentence_start = TRUE): 1.25 is not a&#xA;## whole number. It is kept as a numeral.&#xA;&#xA;## [1] &#34;1.25&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Numbers greater than 1000 are not returned as text even if they are at the start of a sentence; &#xA;# a warning is issued accordingly&#xA;# They are however formatted for readability&#xA;verbaliseR::num_to_text(3333, &#xA;                        sentence_start = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Warning in verbaliseR::num_to_text(3333, sentence_start = TRUE): Numbers greater&#xA;## than 1000 are returned as numerals, regardless of their place in the sentence.&#xA;&#xA;## [1] &#34;3,333&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# To change the default formatting, specify a custom big_mark&#xA;verbaliseR::num_to_text(3333, &#xA;                        sentence_start = TRUE, &#xA;                        big_mark = &#34; &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Warning in verbaliseR::num_to_text(3333, sentence_start = TRUE, big_mark = &#34; &#34;):&#xA;## Numbers greater than 1000 are returned as numerals, regardless of their place in&#xA;## the sentence.&#xA;&#xA;## [1] &#34;3 333&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;pluralise()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Takes a string and turns it into its plural, based on user input. It also retains the number, applying the rules of &lt;code&gt;num_to_text()&lt;/code&gt; to it, unless specified otherwise. The flexibility of this function means it can be used in any language, but since numbers are currently returned only in English, users of other languages will need to specify &lt;code&gt;include_number = FALSE&lt;/code&gt; for now if the number is between 1 and 10 or if &lt;code&gt;sentence_start&lt;/code&gt; is &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The default plural is an s tagged onto the end of the word ...&#xA;verbaliseR::pluralise(&#34;penguin&#34;, 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;three penguins&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ... but this can be changed ...&#xA;verbaliseR::pluralise(&#34;bateau&#34;, 3, &#xA;                      plural = &#34;x&#34;, &#xA;                      include_number = FALSE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;bateaux&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ... or a new word can be substituted&#xA;verbaliseR::pluralise(&#34;sheep&#34;, 3, &#xA;                      plural = &#34;sheep&#34;, &#xA;                      add_or_swap = &#34;swap&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;three sheep&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Numbers below 1001 are written out in full at the start of sentences ...&#xA;verbaliseR::pluralise(&#34;penguin&#34;, 333,&#xA;                      sentence_start = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;Three hundred and thirty-three penguins&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ... but not in the middle of sentences&#xA;verbaliseR::pluralise(&#34;penguin&#34;, 333)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;333 penguins&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Numbers above 1000 are never written out in full but are formatted for readability ...&#xA;verbaliseR::pluralise(&#34;penguin&#34;, 33333,&#xA;                      sentence_start = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;33,333 penguins&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ... with a customisable big mark to allow for different conventions&#xA;verbaliseR::pluralise(&#34;penguin&#34;, 33333,&#xA;                      big_mark = &#34; &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;33 333 penguins&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Numbers with decimals are always left as numerals and aren&#39;t formatted&#xA;verbaliseR::pluralise(&#34;unit&#34;, 12345.67)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;12345.67 units&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;restore_capitals()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Takes a string in which some or all capitalisation has been lost, and restores capitals in the specified items.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &#34;Should i tell c-3po the french call him z-6po?&#34;&#xA;&#xA;verbaliseR::restore_capitals(x, c(&#34;I&#34;, &#34;C-3PO&#34;, &#34;French&#34;, &#34;Z-6PO&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;Should I tell C-3PO the French call him Z-6PO?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Further information&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Report bugs or suggest new features &lt;a href=&#34;https://github.com/cararthompson/verbaliseR/issues&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open to PRs from rstats users who want to make &lt;code&gt;num_to_text&lt;/code&gt; and &lt;code&gt;prettify_date()&lt;/code&gt; work in different languages.&lt;/li&gt; &#xA; &lt;li&gt;Logo by &lt;a href=&#34;https://www.jennylegrandphotography.com/&#34;&gt;Jenny Legrand Photography&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jcrodriguez1989/rco</title>
    <updated>2022-10-12T01:39:30Z</updated>
    <id>tag:github.com,2022-10-12:/jcrodriguez1989/rco</id>
    <link href="https://github.com/jcrodriguez1989/rco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Package: The R Code Optimizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rco - The R Code Optimizer&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=rco&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/rco&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;Lifecycle: stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/jcrodriguez1989/rco&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jcrodriguez1989/rco.svg?branch=master&#34; alt=&#34;Travis build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/jcrodriguez1989/rco&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/jcrodriguez1989/rco?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/jcrodriguez1989/rco?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/jcrodriguez1989/rco/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Make your R code run faster! &lt;code&gt;rco&lt;/code&gt; analyzes your code and applies different optimization strategies that return an R code that runs faster.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;rco&lt;/code&gt; project, from its start to version 1.0.0, was made possible by a &lt;a href=&#34;https://summerofcode.withgoogle.com/archive/2019/projects/6300906386096128/&#34;&gt;Google Summer of Code 2019 project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the kind mentorship of &lt;a href=&#34;https://yihui.org/en/&#34;&gt;Dr.&amp;nbsp;Yihui Xie&lt;/a&gt; and &lt;a href=&#34;https://cs.famaf.unc.edu.ar/~nicolasw/&#34;&gt;Dr.&amp;nbsp;Nicolás Wolovick&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the current released version of &lt;code&gt;rco&lt;/code&gt; from &lt;a href=&#34;https://cran.r-project.org/package=rco&#34;&gt;CRAN&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;rco&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or install the development version from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;if (!require(&#34;remotes&#34;)) {&#xA;  install.packages(&#34;remotes&#34;)&#xA;}&#xA;remotes::install_github(&#34;jcrodriguez1989/rco&#34;, dependencies = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rco&lt;/code&gt; can be used in three ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the RStudio Addins&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Optimize active file&lt;/code&gt;: Optimizes the file currently open in RStudio. It will apply the optimizers present in &lt;code&gt;all_optimizers&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Optimize selection&lt;/code&gt;: Optimizes the code currently highlited in the RStudio Source Pane. It will apply the optimizers present in &lt;code&gt;all_optimizers&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the &lt;code&gt;shiny&lt;/code&gt; GUIs&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;rco_gui(&#34;code_optimizer&#34;)&lt;/code&gt; opens a &lt;code&gt;shiny&lt;/code&gt; interface in a browser. This GUI allows to easily optimize chunks of code.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;rco_gui(&#34;pkg_optimizer&#34;)&lt;/code&gt; opens a &lt;code&gt;shiny&lt;/code&gt; interface in a browser. This GUI allows to easily optimize R packages that are hosted at CRAN or GitHub.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using the R functions&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Optimize some &lt;code&gt;.R&lt;/code&gt; code files&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;optimize_files(c(&#34;file_to_optimize_1.R&#34;, &#34;file_to_optimize_2.R&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Optimize some code in a character vector&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;code &amp;lt;- paste(&#xA;  &#34;code_to_optimize &amp;lt;- 8 ^ 8 * 1918&#34;,&#xA;  &#34;cto &amp;lt;- code_to_optimize * 2&#34;,&#xA;  sep = &#34;\n&#34;&#xA;)&#xA;optimize_text(code)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Optimize all &lt;code&gt;.R&lt;/code&gt; code files into a folder&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;optimize_folder(&#34;~/myfolder_to_optimize&#34;, recursive = FALSE)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Suppose we have the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;code &amp;lt;- paste(&#xA;  &#34;# I want to know my age in seconds!&#34;,&#xA;  &#34;years_old &amp;lt;- 29&#34;,&#xA;  &#34;days_old &amp;lt;- 365 * years_old # leap years don&#39;t exist&#34;,&#xA;  &#34;hours_old &amp;lt;- 24 * days_old&#34;,&#xA;  &#34;seconds_old &amp;lt;- 60 * 60 * hours_old&#34;,&#xA;  &#34;&#34;,&#xA;  &#34;if (seconds_old &amp;gt; 10e6) {&#34;,&#xA;  &#39;  print(&#34;Whoa! More than a million seconds old, what a wise man!&#34;)&#39;,&#xA;  &#34;} else {&#34;,&#xA;  &#39;  print(&#34;Meh!&#34;)&#39;,&#xA;  &#34;}&#34;,&#xA;  sep = &#34;\n&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can automatically optimize it by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opt_code &amp;lt;- optimize_text(code, iterations = 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Optimization number 1&#xA;&#xA;## # I want to know my age in seconds!&#xA;## years_old &amp;lt;- 29&#xA;## days_old &amp;lt;- 365 * 29 # leap years don&#39;t exist&#xA;## hours_old &amp;lt;- 24 * days_old&#xA;## seconds_old &amp;lt;- 3600 * hours_old&#xA;## &#xA;## if (seconds_old &amp;gt; 10e6) {&#xA;##   print(&#34;Whoa! More than a million seconds old, what a wise man!&#34;)&#xA;## } else {&#xA;##   print(&#34;Meh!&#34;)&#xA;## }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After one optimization pass we can see that it has only propagated the &lt;code&gt;years_old&lt;/code&gt; variable. Another pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opt_code &amp;lt;- optimize_text(opt_code, iterations = 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Optimization number 1&#xA;&#xA;## # I want to know my age in seconds!&#xA;## years_old &amp;lt;- 29&#xA;## days_old &amp;lt;- 10585 # leap years don&#39;t exist&#xA;## hours_old &amp;lt;- 24 * 10585&#xA;## seconds_old &amp;lt;- 3600 * hours_old&#xA;## &#xA;## if (seconds_old &amp;gt; 10e6) {&#xA;##   print(&#34;Whoa! More than a million seconds old, what a wise man!&#34;)&#xA;## } else {&#xA;##   print(&#34;Meh!&#34;)&#xA;## }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, it has folded the &lt;code&gt;days_old&lt;/code&gt; variable, and then propagated it. Another pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opt_code &amp;lt;- optimize_text(opt_code, iterations = 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Optimization number 1&#xA;&#xA;## # I want to know my age in seconds!&#xA;## years_old &amp;lt;- 29&#xA;## days_old &amp;lt;- 10585 # leap years don&#39;t exist&#xA;## hours_old &amp;lt;- 254040&#xA;## seconds_old &amp;lt;- 3600 * 254040&#xA;## &#xA;## if (seconds_old &amp;gt; 10e6) {&#xA;##   print(&#34;Whoa! More than a million seconds old, what a wise man!&#34;)&#xA;## } else {&#xA;##   print(&#34;Meh!&#34;)&#xA;## }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has folded the &lt;code&gt;hours_old&lt;/code&gt; variable, and then propagated it. Another pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opt_code &amp;lt;- optimize_text(opt_code, iterations = 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Optimization number 1&#xA;&#xA;## # I want to know my age in seconds!&#xA;## years_old &amp;lt;- 29&#xA;## days_old &amp;lt;- 10585 # leap years don&#39;t exist&#xA;## hours_old &amp;lt;- 254040&#xA;## seconds_old &amp;lt;- 914544000&#xA;## &#xA;## if (914544000 &amp;gt; 10e6) {&#xA;##   print(&#34;Whoa! More than a million seconds old, what a wise man!&#34;)&#xA;## } else {&#xA;##   print(&#34;Meh!&#34;)&#xA;## }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It has folded the &lt;code&gt;seconds_old&lt;/code&gt; variable, and then propagated it into the &lt;code&gt;if&lt;/code&gt; condition. Another pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;opt_code &amp;lt;- optimize_text(opt_code, iterations = 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Optimization number 1&#xA;&#xA;## # I want to know my age in seconds!&#xA;## years_old &amp;lt;- 29&#xA;## days_old &amp;lt;- 10585 # leap years don&#39;t exist&#xA;## hours_old &amp;lt;- 254040&#xA;## seconds_old &amp;lt;- 914544000&#xA;## &#xA;## print(&#34;Whoa! More than a million seconds old, what a wise man!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, it has folded the &lt;code&gt;if&lt;/code&gt; condition, and as it was &lt;code&gt;TRUE&lt;/code&gt; it just kept its body, as testing the condition or the &lt;code&gt;else&lt;/code&gt; clause were dead code. So, &lt;code&gt;optimize_text&lt;/code&gt; function has automatically detected constant variables, constant foldable operations, and dead code. And returned an optimized R code.&lt;/p&gt; &#xA;&lt;h2&gt;Guidelines for contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rco&lt;/code&gt; is an open source package, and the contributions to the development of the library are more than welcome. Please see our &lt;a href=&#34;https://github.com/jcrodriguez1989/rco/raw/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file and &lt;a href=&#34;https://jcrodriguez1989.github.io/rco/articles/contributing-an-optimizer.html&#34;&gt;“Contributing an Optimizer”&lt;/a&gt; article for detailed guidelines of how to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the ‘rco’ project is released with a &lt;a href=&#34;https://github.com/jcrodriguez1989/rco/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
</feed>