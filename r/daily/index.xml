<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-10T01:40:24Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>quadbiolab/Pando</title>
    <updated>2022-10-10T01:40:24Z</updated>
    <id>tag:github.com,2022-10-10:/quadbiolab/Pando</id>
    <link href="https://github.com/quadbiolab/Pando" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multiome GRN inference.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/quadbiolab/Pando/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pando &lt;img src=&#34;https://raw.githubusercontent.com/quadbiolab/Pando/main/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;180&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Pando leverages multi-modal single-cell measurements to infer gene regulatory networks using a flexible linear model-based framework. By modeling the relationship between TF-binding site pairs with the expression of target genes, Pando simultaneously infers gene modules and sets of regulatory regions for each transcription factor.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The fate and state of a cell is regulated through complex circuits of transcription factors (TFs) converging at regulatory elements to enable precise control of gene expression. Modern single-cell genomic approaches allow the simultaneous profiling of gene expression and chromatin accessibility in individual cells, which opens up new opportunities for the inference of cell regulomes. Pando jointly utilizes scRNA-seq and scATAC-seq data to infer regulatory relationships between TFs and target genes.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#39;quadbiolab/Pando&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;If you have a &lt;code&gt;seurat_object&lt;/code&gt; with transcriptomic and chromantin accessibility data, you can start right away with inferring the regulatory network:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load Packages&#xA;library(Pando)&#xA;library(Seurat)&#xA;library(BSgenome.Hsapiens.UCSC.hg38)&#xA;&#xA;# Get motif data&#xA;data(motifs)&#xA;&#xA;# Select variable features&#xA;seurat_object &amp;lt;- Seurat::FindVariableFeatures(seurat_object, assay=&#39;RNA&#39;)&#xA;&#xA;# Initiate GRN object and select candidate regions&#xA;seurat_object &amp;lt;- initiate_grn(seurat_object)&#xA;&#xA;# Scan candidate regions for TF binding motifs&#xA;seurat_object &amp;lt;- find_motifs(&#xA;    seurat_object,&#xA;    pfm = motifs,&#xA;    genome = BSgenome.Hsapiens.UCSC.hg38&#xA;)&#xA;&#xA;# Infer gene regulatory network&#xA;seurat_object &amp;lt;- infer_grn(seurat_object)&#xA;&#xA;# Print inferred coefficients&#xA;coef(seurat_object)&#xA;&#xA;# Find gene and regulatory modules &#xA;test_srt &amp;lt;- find_modules(test_srt)&#xA;&#xA;# Print modules&#xA;NetworkModules(test_srt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;More info about Pando can be found on our &lt;a href=&#34;https://quadbiolab.github.io/Pando/&#34;&gt;website&lt;/a&gt;. There you can find an API reference and a number of tutorial vignettes that give an introduction on how to use Pando most effectively.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>r-lib/testthat</title>
    <updated>2022-10-10T01:40:24Z</updated>
    <id>tag:github.com,2022-10-10:/r-lib/testthat</id>
    <link href="https://github.com/r-lib/testthat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R ðŸ“¦ to make testing ðŸ˜€&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;testthat &lt;img src=&#34;https://raw.githubusercontent.com/r-lib/testthat/main/man/figures/logo.png&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=testthat&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/testthat&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/r-lib/testthat/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/r-lib/testthat/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-lib/testthat?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-lib/testthat/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Testing your code can be painful and tedious, but it greatly increases the quality of your code. &lt;strong&gt;testthat&lt;/strong&gt; tries to make testing as fun as possible, so that you get a visceral satisfaction from writing tests. Testing should be addictive, so you do it all the time. To make that happen, testthat:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Provides functions that make it easy to describe what you expect a function to do, including catching errors, warnings, and messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easily integrates in your existing workflow, whether itâ€™s informal testing on the command line, building test suites, or using R CMD check.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Displays test progress visually, showing a pass, fail, or error for every expectation. If youâ€™re using the terminal or a recent version of RStudio, itâ€™ll even colour the output.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;testthat draws inspiration from the xUnit family of testing packages, as well as from many of the innovative ruby testing libraries, like &lt;a href=&#34;https://rspec.info/&#34;&gt;rspec&lt;/a&gt;, &lt;a href=&#34;https://github.com/ahoward/testy&#34;&gt;testy&lt;/a&gt;, &lt;a href=&#34;https://github.com/leahneukirchen/bacon&#34;&gt;bacon&lt;/a&gt; and &lt;a href=&#34;https://cucumber.io&#34;&gt;cucumber&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;testthat is the most popular unit testing package for R and is used by thousands of CRAN packages.&lt;/p&gt; &#xA;&lt;p&gt;If youâ€™re not familiar with testthat, the &lt;a href=&#34;https://r-pkgs.org/testing-basics.html&#34;&gt;testing chapter&lt;/a&gt; in &lt;a href=&#34;https://r-pkgs.org&#34;&gt;R packages&lt;/a&gt; gives a good overview, along with workflow advice and concrete examples.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install the released version from CRAN&#xA;install.packages(&#34;testthat&#34;)&#xA;&#xA;# Or the development version from GitHub:&#xA;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;r-lib/testthat&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get started is with &lt;a href=&#34;https://github.com/r-lib/usethis&#34;&gt;usethis&lt;/a&gt;. Assuming youâ€™re in a package directory, just run &lt;code&gt;usethis::use_test(&#34;name&#34;)&lt;/code&gt; to create a test file, and set up all the other infrastructure you need. If youâ€™re using RStudio, press Cmd/Ctrl + Shift + T (or run &lt;code&gt;devtools::test()&lt;/code&gt; if not) to run all the tests in a package.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>USCbiostats/data-science-data</title>
    <updated>2022-10-10T01:40:24Z</updated>
    <id>tag:github.com,2022-10-10:/USCbiostats/data-science-data</id>
    <link href="https://github.com/USCbiostats/data-science-data" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data repository for data science&lt;/h1&gt; &#xA;&lt;p&gt;We will organize the data as first-come-first-served using folders with the following name structure (expressed as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions&#34;&gt;Perl regular expression&lt;/a&gt;): &lt;code&gt;[0-9]{2}-[a-z]{1,}&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;00-children-study&#xA;01-COVID-la-county&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each folder, besides the data, should contain a README file in markdown format. The header of the file should include the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name: [name of the dataset]&#xA;short-desc: [short description (one-sentence)]&#xA;date-collected:  YYYY-MM-DD&#xA;source-url: [URL to the source]&#xA;keywords: [kw1, kw2,etc.]&#xA;format: [csv, tab, ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The body of the MD file should be a more detailed description of the data. We need the structure of the MD file so that we can automatically process the datasets and list them here, in the repository&#39;s main README file.&lt;/p&gt;</summary>
  </entry>
</feed>