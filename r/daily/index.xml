<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-14T01:40:35Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NicChr/timeplyr</title>
    <updated>2023-12-14T01:40:35Z</updated>
    <id>tag:github.com,2023-12-14:/NicChr/timeplyr</id>
    <link href="https://github.com/NicChr/timeplyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast tidy functions for date manipulation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/NicChr/timeplyr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/NicChr/timeplyr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=timeplyr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/timeplyr&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h1&gt;timeplyr&lt;/h1&gt; &#xA;&lt;h1&gt;&lt;strong&gt;Fast Tidy Tools for Date and Datetime Manipulation&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This package provides a set of functions to make working with date and datetime data much easier!&lt;/p&gt; &#xA;&lt;p&gt;While most time-based packages are designed to work with clean and pre-aggregate data, timeplyr contains a set of tidy tools to complete, expand and summarise both raw and aggregate date/datetime data.&lt;/p&gt; &#xA;&lt;p&gt;Significant efforts have been made to ensure that grouped calculations are fast and efficient thanks to the excellent functionality within the &lt;a href=&#34;https://sebkrantz.github.io/collapse/reference/collapse-package.html&#34;&gt;collapse&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install and load &lt;code&gt;timeplyr&lt;/code&gt; using the below code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# CRAN version&#xA;install.packages(&#34;timeplyr&#34;)&#xA;&#xA;# Development version&#xA;remotes::install_github(&#34;NicChr/timeplyr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(timeplyr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Basic examples&lt;/h1&gt; &#xA;&lt;h2&gt;Convert &lt;code&gt;ts&lt;/code&gt;, &lt;code&gt;mts&lt;/code&gt;, &lt;code&gt;xts&lt;/code&gt;, &lt;code&gt;zoo&lt;/code&gt;and &lt;code&gt;timeSeries&lt;/code&gt; objects using &lt;code&gt;ts_as_tibble&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;#&amp;gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;#&amp;gt; ✔ dplyr     1.1.4     ✔ readr     2.1.4&#xA;#&amp;gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1&#xA;#&amp;gt; ✔ ggplot2   3.4.4     ✔ tibble    3.2.1&#xA;#&amp;gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.0&#xA;#&amp;gt; ✔ purrr     1.0.2     &#xA;#&amp;gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;#&amp;gt; ✖ dplyr::desc()   masks timeplyr::desc()&#xA;#&amp;gt; ✖ dplyr::filter() masks stats::filter()&#xA;#&amp;gt; ✖ dplyr::lag()    masks stats::lag()&#xA;#&amp;gt; ✖ dplyr::top_n()  masks timeplyr::top_n()&#xA;#&amp;gt; ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;eu_stock &amp;lt;- EuStockMarkets %&amp;gt;%&#xA;  ts_as_tibble()&#xA;eu_stock&#xA;#&amp;gt; # A tibble: 7,440 × 3&#xA;#&amp;gt;    group  time value&#xA;#&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 DAX   1991. 1629.&#xA;#&amp;gt;  2 DAX   1992. 1614.&#xA;#&amp;gt;  3 DAX   1992. 1607.&#xA;#&amp;gt;  4 DAX   1992. 1621.&#xA;#&amp;gt;  5 DAX   1992. 1618.&#xA;#&amp;gt;  6 DAX   1992. 1611.&#xA;#&amp;gt;  7 DAX   1992. 1631.&#xA;#&amp;gt;  8 DAX   1992. 1640.&#xA;#&amp;gt;  9 DAX   1992. 1635.&#xA;#&amp;gt; 10 DAX   1992. 1646.&#xA;#&amp;gt; # ℹ 7,430 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Easily plot time series using &lt;code&gt;time_ggplot&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eu_stock %&amp;gt;%&#xA;  time_ggplot(time, value, group)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NicChr/timeplyr/main/man/figures/README-unnamed-chunk-2-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the next examples we use flights departing from New York City in 2013.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(nycflights13)&#xA;library(lubridate)&#xA;flights &amp;lt;- flights %&amp;gt;%&#xA;  mutate(date = as_date(time_hour))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_by&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Group your time variable by any time unit&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights_monthly &amp;lt;- flights %&amp;gt;%&#xA;  select(date, arr_delay) %&amp;gt;%&#xA;  time_by(date, &#34;month&#34;)&#xA;&#xA;flights_monthly&#xA;#&amp;gt; # A tibble: 336,776 x 2&#xA;#&amp;gt; # Time:     date [12]&#xA;#&amp;gt; # By:       month&#xA;#&amp;gt; # Span:     2013-01-01 - 2013-12-31&#xA;#&amp;gt;    date       arr_delay&#xA;#&amp;gt;    &amp;lt;date&amp;gt;         &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 2013-01-01        11&#xA;#&amp;gt;  2 2013-01-01        20&#xA;#&amp;gt;  3 2013-01-01        33&#xA;#&amp;gt;  4 2013-01-01       -18&#xA;#&amp;gt;  5 2013-01-01       -25&#xA;#&amp;gt;  6 2013-01-01        12&#xA;#&amp;gt;  7 2013-01-01        19&#xA;#&amp;gt;  8 2013-01-01       -14&#xA;#&amp;gt;  9 2013-01-01        -8&#xA;#&amp;gt; 10 2013-01-01         8&#xA;#&amp;gt; # ℹ 336,766 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can then use this to create a monthly summary of the number of flights and average arrival delay&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights_monthly %&amp;gt;%&#xA;  summarise(n = n(),&#xA;            mean_arr_delay = mean(arr_delay, na.rm = TRUE))&#xA;#&amp;gt; # A tibble: 12 × 3&#xA;#&amp;gt;    date           n mean_arr_delay&#xA;#&amp;gt;    &amp;lt;date&amp;gt;     &amp;lt;int&amp;gt;          &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 2013-01-01 27004          6.13 &#xA;#&amp;gt;  2 2013-02-01 24951          5.61 &#xA;#&amp;gt;  3 2013-03-01 28834          5.81 &#xA;#&amp;gt;  4 2013-04-01 28330         11.2  &#xA;#&amp;gt;  5 2013-05-01 28796          3.52 &#xA;#&amp;gt;  6 2013-06-01 28243         16.5  &#xA;#&amp;gt;  7 2013-07-01 29425         16.7  &#xA;#&amp;gt;  8 2013-08-01 29327          6.04 &#xA;#&amp;gt;  9 2013-09-01 27574         -4.02 &#xA;#&amp;gt; 10 2013-10-01 28889         -0.167&#xA;#&amp;gt; 11 2013-11-01 27268          0.461&#xA;#&amp;gt; 12 2013-12-01 28135         14.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the time unit is left unspecified, the &lt;code&gt;time&lt;/code&gt; functions try to find the highest time unit possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  time_by(time_hour)&#xA;#&amp;gt; # A tibble: 336,776 x 20&#xA;#&amp;gt; # Time:     time_hour [6,936]&#xA;#&amp;gt; # By:       hour&#xA;#&amp;gt; # Span:     2013-01-01 05:00:00 - 2013-12-31 23:00:00&#xA;#&amp;gt;     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time&#xA;#&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1  2013     1     1      517            515         2      830            819&#xA;#&amp;gt;  2  2013     1     1      533            529         4      850            830&#xA;#&amp;gt;  3  2013     1     1      542            540         2      923            850&#xA;#&amp;gt;  4  2013     1     1      544            545        -1     1004           1022&#xA;#&amp;gt;  5  2013     1     1      554            600        -6      812            837&#xA;#&amp;gt;  6  2013     1     1      554            558        -4      740            728&#xA;#&amp;gt;  7  2013     1     1      555            600        -5      913            854&#xA;#&amp;gt;  8  2013     1     1      557            600        -3      709            723&#xA;#&amp;gt;  9  2013     1     1      557            600        -3      838            846&#xA;#&amp;gt; 10  2013     1     1      558            600        -2      753            745&#xA;#&amp;gt; # ℹ 336,766 more rows&#xA;#&amp;gt; # ℹ 12 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;,&#xA;#&amp;gt; #   hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, date &amp;lt;date&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_complete()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Complete missing gaps in time&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  count(time_hour) %&amp;gt;%&#xA;  time_complete(time_hour)&#xA;#&amp;gt; Assuming a time granularity of 1 hour(s)&#xA;#&amp;gt; # A tibble: 8,755 × 2&#xA;#&amp;gt;    time_hour               n&#xA;#&amp;gt;    &amp;lt;dttm&amp;gt;              &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 2013-01-01 05:00:00     6&#xA;#&amp;gt;  2 2013-01-01 06:00:00    52&#xA;#&amp;gt;  3 2013-01-01 07:00:00    49&#xA;#&amp;gt;  4 2013-01-01 08:00:00    58&#xA;#&amp;gt;  5 2013-01-01 09:00:00    56&#xA;#&amp;gt;  6 2013-01-01 10:00:00    39&#xA;#&amp;gt;  7 2013-01-01 11:00:00    37&#xA;#&amp;gt;  8 2013-01-01 12:00:00    56&#xA;#&amp;gt;  9 2013-01-01 13:00:00    54&#xA;#&amp;gt; 10 2013-01-01 14:00:00    48&#xA;#&amp;gt; # ℹ 8,745 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_count()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Count by any time unit&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  time_count(date, time_by = &#34;quarter&#34;)&#xA;#&amp;gt; # A tibble: 4 × 2&#xA;#&amp;gt;   date           n&#xA;#&amp;gt;   &amp;lt;date&amp;gt;     &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1 2013-01-01 80789&#xA;#&amp;gt; 2 2013-04-01 85369&#xA;#&amp;gt; 3 2013-07-01 86326&#xA;#&amp;gt; 4 2013-10-01 84292&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ensure full weeks/months/years by using &lt;code&gt;time_floor = TRUE&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;start &amp;lt;- dmy(&#34;17-Jan-2013&#34;)&#xA;flights %&amp;gt;%&#xA;  time_count(date,&#xA;             time_by = &#34;week&#34;, from = start, time_floor = TRUE)&#xA;#&amp;gt; # A tibble: 52 × 2&#xA;#&amp;gt;    date           n&#xA;#&amp;gt;    &amp;lt;date&amp;gt;     &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 2013-01-14  3311&#xA;#&amp;gt;  2 2013-01-21  6049&#xA;#&amp;gt;  3 2013-01-28  6063&#xA;#&amp;gt;  4 2013-02-04  6104&#xA;#&amp;gt;  5 2013-02-11  6236&#xA;#&amp;gt;  6 2013-02-18  6381&#xA;#&amp;gt;  7 2013-02-25  6444&#xA;#&amp;gt;  8 2013-03-04  6546&#xA;#&amp;gt;  9 2013-03-11  6555&#xA;#&amp;gt; 10 2013-03-18  6547&#xA;#&amp;gt; # ℹ 42 more rows&#xA;flights %&amp;gt;%&#xA;  time_count(date,&#xA;             time_by = &#34;month&#34;, from = start, time_floor = TRUE)&#xA;#&amp;gt; # A tibble: 13 × 2&#xA;#&amp;gt;    date           n&#xA;#&amp;gt;    &amp;lt;date&amp;gt;     &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 2013-01-01 13001&#xA;#&amp;gt;  2 2013-02-01 24951&#xA;#&amp;gt;  3 2013-03-01 28834&#xA;#&amp;gt;  4 2013-04-01 28330&#xA;#&amp;gt;  5 2013-05-01 28796&#xA;#&amp;gt;  6 2013-06-01 28243&#xA;#&amp;gt;  7 2013-07-01 29425&#xA;#&amp;gt;  8 2013-08-01 29327&#xA;#&amp;gt;  9 2013-09-01 27574&#xA;#&amp;gt; 10 2013-10-01 28889&#xA;#&amp;gt; 11 2013-11-01 27268&#xA;#&amp;gt; 12 2013-12-01 28135&#xA;#&amp;gt; 13 NA         14003&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Check for missing gaps in time&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;missing_dates(flights$date) # No missing dates&#xA;#&amp;gt; Date of length 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;time_num_gaps(flights$time_hour, time_by = &#34;hours&#34;) # Missing hours&#xA;#&amp;gt; [1] 1819&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check for regularity use &lt;code&gt;time_is_regular&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hours &amp;lt;- sort(flights$time_hour)&#xA;time_is_regular(hours, time_by = &#34;hours&#34;)&#xA;#&amp;gt; [1] TRUE&#xA;time_is_regular(hours, time_by = &#34;hours&#34;, allow_gaps = FALSE)&#xA;#&amp;gt; [1] FALSE&#xA;time_is_regular(hours, time_by = &#34;hours&#34;, allow_dups = FALSE)&#xA;#&amp;gt; [1] FALSE&#xA;&#xA;# By-group&#xA;time_num_gaps(flights$time_hour, g = flights$origin, time_by = &#34;hours&#34;)&#xA;#&amp;gt;  EWR  JFK  LGA &#xA;#&amp;gt; 2489 1820 2468&#xA;time_is_regular(flights$time_hour, g = flights$origin, time_by = &#34;hours&#34;)&#xA;#&amp;gt;   EWR   JFK   LGA &#xA;#&amp;gt; FALSE FALSE FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_expand()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here we create monthly sequences for each destination that accounts for the start and end dates of each destination&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  group_by(dest) %&amp;gt;%&#xA;  time_expand(date, time_by = &#34;month&#34;) %&amp;gt;%&#xA;  summarise(n = n(), start = min(date), end = max(date))&#xA;#&amp;gt; # A tibble: 105 × 4&#xA;#&amp;gt;    dest      n start      end       &#xA;#&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    &#xA;#&amp;gt;  1 ABQ       9 2013-04-22 2013-12-22&#xA;#&amp;gt;  2 ACK       6 2013-05-16 2013-10-16&#xA;#&amp;gt;  3 ALB      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  4 ANC       2 2013-07-06 2013-08-06&#xA;#&amp;gt;  5 ATL      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  6 AUS      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  7 AVL      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  8 BDL      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  9 BGR      10 2013-03-02 2013-12-02&#xA;#&amp;gt; 10 BHM      12 2013-01-02 2013-12-02&#xA;#&amp;gt; # ℹ 95 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create the same grid of months for each dest, we can do the following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  time_expand(date, dest, time_by = &#34;month&#34;) %&amp;gt;%&#xA;  summarise(n = n(), start = min(date), end = max(date), .by = dest)&#xA;#&amp;gt; # A tibble: 105 × 4&#xA;#&amp;gt;    dest      n start      end       &#xA;#&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;    &#xA;#&amp;gt;  1 ABQ      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  2 ACK      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  3 ALB      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  4 ANC      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  5 ATL      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  6 AUS      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  7 AVL      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  8 BDL      12 2013-01-01 2013-12-01&#xA;#&amp;gt;  9 BGR      12 2013-01-01 2013-12-01&#xA;#&amp;gt; 10 BHM      12 2013-01-01 2013-12-01&#xA;#&amp;gt; # ℹ 95 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ability to create time sequences by group is one of the most powerful features of timeplyr.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_summarise()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We can shortcut the time aggregation and then additional summary by using &lt;code&gt;time_summarise()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  time_summarise(date, # Time variable &#xA;                 across(c(arr_time, dep_time), # By-month summaries&#xA;                        ~ mean(.x, na.rm = TRUE)),&#xA;                 time_by = &#34;month&#34;,   &#xA;                 time_floor = TRUE, # Full months&#xA;                 include_interval = TRUE) # Time interval&#xA;#&amp;gt; # A tibble: 12 × 4&#xA;#&amp;gt;    date       interval                       arr_time dep_time&#xA;#&amp;gt;    &amp;lt;date&amp;gt;     &amp;lt;Interval&amp;gt;                        &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 2013-01-01 2013-01-01 UTC--2013-02-01 UTC    1523.    1347.&#xA;#&amp;gt;  2 2013-02-01 2013-02-01 UTC--2013-03-01 UTC    1522.    1348.&#xA;#&amp;gt;  3 2013-03-01 2013-03-01 UTC--2013-04-01 UTC    1510.    1359.&#xA;#&amp;gt;  4 2013-04-01 2013-04-01 UTC--2013-05-01 UTC    1501.    1353.&#xA;#&amp;gt;  5 2013-05-01 2013-05-01 UTC--2013-06-01 UTC    1503.    1351.&#xA;#&amp;gt;  6 2013-06-01 2013-06-01 UTC--2013-07-01 UTC    1468.    1351.&#xA;#&amp;gt;  7 2013-07-01 2013-07-01 UTC--2013-08-01 UTC    1456.    1353.&#xA;#&amp;gt;  8 2013-08-01 2013-08-01 UTC--2013-09-01 UTC    1495.    1350.&#xA;#&amp;gt;  9 2013-09-01 2013-09-01 UTC--2013-10-01 UTC    1504.    1334.&#xA;#&amp;gt; 10 2013-10-01 2013-10-01 UTC--2013-11-01 UTC    1520.    1340.&#xA;#&amp;gt; 11 2013-11-01 2013-11-01 UTC--2013-12-01 UTC    1523.    1344.&#xA;#&amp;gt; 12 2013-12-01 2013-12-01 UTC--2013-12-31 UTC    1505.    1357.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Grouped rolling time functions&lt;/h1&gt; &#xA;&lt;h2&gt;By-group rolling mean over the last 3 calendar months&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eu_stock &amp;lt;- eu_stock %&amp;gt;%&#xA;  mutate(date = date_decimal(time))&#xA;&#xA;eu_stock %&amp;gt;%&#xA;    mutate(month_mean = time_roll_mean(value, window = months(3), &#xA;                                       time = date, &#xA;                                       g = group)) %&amp;gt;%&#xA;    time_ggplot(date, month_mean, group)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NicChr/timeplyr/main/man/figures/README-unnamed-chunk-16-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;By-group rolling (locf) NA fill&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Prerequisite: Create Time series with missing values&#xA;x &amp;lt;- ts(c(NA, 3, 4, NA, 6, NA, NA, 8))&#xA;g &amp;lt;- seq_id(c(3, 5)) # Two groups of size 3 + 5&#xA;&#xA;.roll_na_fill(x) # Simple locf fill&#xA;#&amp;gt; Time Series:&#xA;#&amp;gt; Start = 1 &#xA;#&amp;gt; End = 8 &#xA;#&amp;gt; Frequency = 1 &#xA;#&amp;gt; [1] NA  3  4  4  6  6  6  8&#xA;roll_na_fill(x, fill_limit = 1) # Fill up to 1 NA&#xA;#&amp;gt; Time Series:&#xA;#&amp;gt; Start = 1 &#xA;#&amp;gt; End = 8 &#xA;#&amp;gt; Frequency = 1 &#xA;#&amp;gt; [1] NA  3  4  4  6  6 NA  8&#xA;&#xA;roll_na_fill(x, g = g) # Very efficient on large data too&#xA;#&amp;gt; Time Series:&#xA;#&amp;gt; Start = 1 &#xA;#&amp;gt; End = 8 &#xA;#&amp;gt; Frequency = 1 &#xA;#&amp;gt; [1] NA  3  4 NA  6  6  6  8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;year_month&lt;/code&gt; and &lt;code&gt;year_quarter&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;timeplyr has its own lightweight ‘yearmonth’ and `yearquarter’ classes inspired by the excellent ‘zoo’ and ‘tsibble’ packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;today &amp;lt;- today()&#xA;year_month(today)&#xA;#&amp;gt; [1] &#34;2023 Dec&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The underlying data for a &lt;code&gt;year_month&lt;/code&gt; is the number of months since 1 January 1970 (epoch).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unclass(year_month(&#34;1970-01-01&#34;))&#xA;#&amp;gt; [1] 0&#xA;unclass(year_month(&#34;1971-01-01&#34;))&#xA;#&amp;gt; [1] 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a sequence of ‘year_months’, one can use base arithmetic&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;year_month(today) + 0:12&#xA;#&amp;gt;  [1] &#34;2023 Dec&#34; &#34;2024 Jan&#34; &#34;2024 Feb&#34; &#34;2024 Mar&#34; &#34;2024 Apr&#34; &#34;2024 May&#34;&#xA;#&amp;gt;  [7] &#34;2024 Jun&#34; &#34;2024 Jul&#34; &#34;2024 Aug&#34; &#34;2024 Sep&#34; &#34;2024 Oct&#34; &#34;2024 Nov&#34;&#xA;#&amp;gt; [13] &#34;2024 Dec&#34;&#xA;year_quarter(today) + 0:4&#xA;#&amp;gt; [1] &#34;2023 Q4&#34; &#34;2024 Q1&#34; &#34;2024 Q2&#34; &#34;2024 Q3&#34; &#34;2024 Q4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_elapsed()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Let’s look at the time between consecutive flights for a specific flight number&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(42)&#xA;flight_201 &amp;lt;- flights %&amp;gt;%&#xA;  distinct(time_hour, flight) %&amp;gt;%&#xA;  filter(flight %in% sample(flight, size = 1)) %&amp;gt;%&#xA;  arrange(time_hour)&#xA;&#xA;top_n_tbl(time_elapsed(flight_201$time_hour, &#34;hours&#34;))&#xA;#&amp;gt; # A tibble: 5 × 2&#xA;#&amp;gt;   value     n&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1    24   218&#xA;#&amp;gt; 2    18    34&#xA;#&amp;gt; 3     6    33&#xA;#&amp;gt; 4    48     4&#xA;#&amp;gt; 5    25     3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flight 201 seems to depart mostly consistently every 24 hours&lt;/p&gt; &#xA;&lt;p&gt;We can efficiently do the same for all flight numbers&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# We use fdistinct with sort as it&#39;s much faster and simpler to write&#xA;all_flights &amp;lt;- flights %&amp;gt;%&#xA;  fdistinct(flight, time_hour, sort = TRUE)&#xA;all_flights &amp;lt;- all_flights %&amp;gt;%&#xA;  mutate(elapsed = time_elapsed(time_hour, g = flight, fill = 0))&#xA;#&amp;gt; Assuming a time granularity of 1 hour(s)&#xA;&#xA;# Flight numbers with largest relative deviation in time between flights&#xA;all_flights %&amp;gt;%&#xA;  q_summarise(elapsed, .by = flight) %&amp;gt;%&#xA;  mutate(relative_iqr = p75 / p25) %&amp;gt;%&#xA;  arrange(desc(relative_iqr))&#xA;#&amp;gt;       flight    p0   p25   p50    p75  p100 relative_iqr&#xA;#&amp;gt;        &amp;lt;int&amp;gt; &amp;lt;num&amp;gt; &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;  &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;        &amp;lt;num&amp;gt;&#xA;#&amp;gt;    1:   3664     0    12    24 3252.0  6480     271.0000&#xA;#&amp;gt;    2:   5709     0    12    24 3080.5  6137     256.7083&#xA;#&amp;gt;    3:    513     0    12    24 2250.5  4477     187.5417&#xA;#&amp;gt;    4:   3364     0    12    24 2204.5  4385     183.7083&#xA;#&amp;gt;    5:   1578     0    24    48 4182.5  8317     174.2708&#xA;#&amp;gt;   ---                                                   &#xA;#&amp;gt; 3840:   6114     0     0     0    0.0     0          NaN&#xA;#&amp;gt; 3841:   6140     0     0     0    0.0     0          NaN&#xA;#&amp;gt; 3842:   6165     0     0     0    0.0     0          NaN&#xA;#&amp;gt; 3843:   6171     0     0     0    0.0     0          NaN&#xA;#&amp;gt; 3844:   8500     0     0     0    0.0     0          NaN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;time_seq_id()&lt;/code&gt; allows us to create unique IDs for regular sequences A new ID is created every time there is a gap in the sequence&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  select(time_hour) %&amp;gt;%&#xA;  arrange(time_hour) %&amp;gt;%&#xA;  mutate(time_id = time_seq_id(time_hour)) %&amp;gt;%&#xA;  filter(time_id != lag(time_id)) %&amp;gt;%&#xA;  count(hour(time_hour))&#xA;#&amp;gt; Assuming a time granularity of 1 hour(s)&#xA;#&amp;gt; # A tibble: 2 × 2&#xA;#&amp;gt;   `hour(time_hour)`     n&#xA;#&amp;gt;               &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1                 1     1&#xA;#&amp;gt; 2                 5   364&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can see that the gaps typically occur at 11pm and the sequence resumes at 5am.&lt;/p&gt; &#xA;&lt;h3&gt;Other convenience functions are included below&lt;/h3&gt; &#xA;&lt;h2&gt;&lt;code&gt;add_calendar()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;Easily join common date information to your data&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights_calendar &amp;lt;- flights %&amp;gt;%&#xA;  select(time_hour) %&amp;gt;%&#xA;  add_calendar(time_hour)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that gaps in time have been filled and we have joined our date table, it is easy to count by any time dimension we like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights_calendar %&amp;gt;% &#xA;  fcount(isoyear, isoweek)&#xA;#&amp;gt; # A tibble: 53 × 3&#xA;#&amp;gt;    isoyear isoweek     n&#xA;#&amp;gt;      &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1    2013       1  5166&#xA;#&amp;gt;  2    2013       2  6114&#xA;#&amp;gt;  3    2013       3  6034&#xA;#&amp;gt;  4    2013       4  6049&#xA;#&amp;gt;  5    2013       5  6063&#xA;#&amp;gt;  6    2013       6  6104&#xA;#&amp;gt;  7    2013       7  6236&#xA;#&amp;gt;  8    2013       8  6381&#xA;#&amp;gt;  9    2013       9  6444&#xA;#&amp;gt; 10    2013      10  6546&#xA;#&amp;gt; # ℹ 43 more rows&#xA;flights_calendar %&amp;gt;% &#xA;  fcount(isoweek = iso_week(time_hour))&#xA;#&amp;gt; # A tibble: 53 × 2&#xA;#&amp;gt;    isoweek      n&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 2013-W01  5166&#xA;#&amp;gt;  2 2013-W02  6114&#xA;#&amp;gt;  3 2013-W03  6034&#xA;#&amp;gt;  4 2013-W04  6049&#xA;#&amp;gt;  5 2013-W05  6063&#xA;#&amp;gt;  6 2013-W06  6104&#xA;#&amp;gt;  7 2013-W07  6236&#xA;#&amp;gt;  8 2013-W08  6381&#xA;#&amp;gt;  9 2013-W09  6444&#xA;#&amp;gt; 10 2013-W10  6546&#xA;#&amp;gt; # ℹ 43 more rows&#xA;flights_calendar %&amp;gt;% &#xA;  fcount(month_l)&#xA;#&amp;gt; # A tibble: 12 × 2&#xA;#&amp;gt;    month_l     n&#xA;#&amp;gt;    &amp;lt;ord&amp;gt;   &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 Jan     27004&#xA;#&amp;gt;  2 Feb     24951&#xA;#&amp;gt;  3 Mar     28834&#xA;#&amp;gt;  4 Apr     28330&#xA;#&amp;gt;  5 May     28796&#xA;#&amp;gt;  6 Jun     28243&#xA;#&amp;gt;  7 Jul     29425&#xA;#&amp;gt;  8 Aug     29327&#xA;#&amp;gt;  9 Sep     27574&#xA;#&amp;gt; 10 Oct     28889&#xA;#&amp;gt; 11 Nov     27268&#xA;#&amp;gt; 12 Dec     28135&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;.time_units&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;See a list of available time units&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;.time_units&#xA;#&amp;gt;  [1] &#34;picoseconds&#34;  &#34;nanoseconds&#34;  &#34;microseconds&#34; &#34;milliseconds&#34; &#34;seconds&#34;     &#xA;#&amp;gt;  [6] &#34;minutes&#34;      &#34;hours&#34;        &#34;days&#34;         &#34;weeks&#34;        &#34;months&#34;      &#xA;#&amp;gt; [11] &#34;years&#34;        &#34;fortnights&#34;   &#34;quarters&#34;     &#34;semesters&#34;    &#34;olympiads&#34;   &#xA;#&amp;gt; [16] &#34;lustrums&#34;     &#34;decades&#34;      &#34;indictions&#34;   &#34;scores&#34;       &#34;centuries&#34;   &#xA;#&amp;gt; [21] &#34;milleniums&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;age_years()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Calculate ages (years) accurately&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;age_years(dmy(&#34;28-02-2000&#34;))&#xA;#&amp;gt; [1] 23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_seq()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A lubridate version of &lt;code&gt;seq()&lt;/code&gt; for dates and datetimes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;start &amp;lt;- dmy(31012020)&#xA;end &amp;lt;- start + years(1)&#xA;seq(start, end, by = &#34;month&#34;) # Base R version&#xA;#&amp;gt;  [1] &#34;2020-01-31&#34; &#34;2020-03-02&#34; &#34;2020-03-31&#34; &#34;2020-05-01&#34; &#34;2020-05-31&#34;&#xA;#&amp;gt;  [6] &#34;2020-07-01&#34; &#34;2020-07-31&#34; &#34;2020-08-31&#34; &#34;2020-10-01&#34; &#34;2020-10-31&#34;&#xA;#&amp;gt; [11] &#34;2020-12-01&#34; &#34;2020-12-31&#34; &#34;2021-01-31&#34;&#xA;time_seq(start, end, time_by = &#34;month&#34;) # lubridate version&#xA;#&amp;gt;  [1] &#34;2020-01-31&#34; &#34;2020-02-29&#34; &#34;2020-03-31&#34; &#34;2020-04-30&#34; &#34;2020-05-31&#34;&#xA;#&amp;gt;  [6] &#34;2020-06-30&#34; &#34;2020-07-31&#34; &#34;2020-08-31&#34; &#34;2020-09-30&#34; &#34;2020-10-31&#34;&#xA;#&amp;gt; [11] &#34;2020-11-30&#34; &#34;2020-12-31&#34; &#34;2021-01-31&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;time_seq()&lt;/code&gt; doesn’t mind mixing dates and datetimes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;time_seq(start, as_datetime(end), time_by = &#34;2 weeks&#34;)&#xA;#&amp;gt;  [1] &#34;2020-01-31 UTC&#34; &#34;2020-02-14 UTC&#34; &#34;2020-02-28 UTC&#34; &#34;2020-03-13 UTC&#34;&#xA;#&amp;gt;  [5] &#34;2020-03-27 UTC&#34; &#34;2020-04-10 UTC&#34; &#34;2020-04-24 UTC&#34; &#34;2020-05-08 UTC&#34;&#xA;#&amp;gt;  [9] &#34;2020-05-22 UTC&#34; &#34;2020-06-05 UTC&#34; &#34;2020-06-19 UTC&#34; &#34;2020-07-03 UTC&#34;&#xA;#&amp;gt; [13] &#34;2020-07-17 UTC&#34; &#34;2020-07-31 UTC&#34; &#34;2020-08-14 UTC&#34; &#34;2020-08-28 UTC&#34;&#xA;#&amp;gt; [17] &#34;2020-09-11 UTC&#34; &#34;2020-09-25 UTC&#34; &#34;2020-10-09 UTC&#34; &#34;2020-10-23 UTC&#34;&#xA;#&amp;gt; [21] &#34;2020-11-06 UTC&#34; &#34;2020-11-20 UTC&#34; &#34;2020-12-04 UTC&#34; &#34;2020-12-18 UTC&#34;&#xA;#&amp;gt; [25] &#34;2021-01-01 UTC&#34; &#34;2021-01-15 UTC&#34; &#34;2021-01-29 UTC&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_seq_v()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A vectorised version of &lt;code&gt;time_seq()&lt;/code&gt; Currently it is vectorised over from, to and by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 3 sequences&#xA;time_seq_v(from = start, &#xA;           to = end, &#xA;           time_by = list(&#34;months&#34; = 1:3))&#xA;#&amp;gt;  [1] &#34;2020-01-31&#34; &#34;2020-02-29&#34; &#34;2020-03-31&#34; &#34;2020-04-30&#34; &#34;2020-05-31&#34;&#xA;#&amp;gt;  [6] &#34;2020-06-30&#34; &#34;2020-07-31&#34; &#34;2020-08-31&#34; &#34;2020-09-30&#34; &#34;2020-10-31&#34;&#xA;#&amp;gt; [11] &#34;2020-11-30&#34; &#34;2020-12-31&#34; &#34;2021-01-31&#34; &#34;2020-01-31&#34; &#34;2020-03-31&#34;&#xA;#&amp;gt; [16] &#34;2020-05-31&#34; &#34;2020-07-31&#34; &#34;2020-09-30&#34; &#34;2020-11-30&#34; &#34;2021-01-31&#34;&#xA;#&amp;gt; [21] &#34;2020-01-31&#34; &#34;2020-04-30&#34; &#34;2020-07-31&#34; &#34;2020-10-31&#34; &#34;2021-01-31&#34;&#xA;# Equivalent to &#xA;c(time_seq(start, end, time_by = &#34;month&#34;),&#xA;  time_seq(start, end, time_by = &#34;2 months&#34;),&#xA;  time_seq(start, end, time_by = &#34;3 months&#34;))&#xA;#&amp;gt;  [1] &#34;2020-01-31&#34; &#34;2020-02-29&#34; &#34;2020-03-31&#34; &#34;2020-04-30&#34; &#34;2020-05-31&#34;&#xA;#&amp;gt;  [6] &#34;2020-06-30&#34; &#34;2020-07-31&#34; &#34;2020-08-31&#34; &#34;2020-09-30&#34; &#34;2020-10-31&#34;&#xA;#&amp;gt; [11] &#34;2020-11-30&#34; &#34;2020-12-31&#34; &#34;2021-01-31&#34; &#34;2020-01-31&#34; &#34;2020-03-31&#34;&#xA;#&amp;gt; [16] &#34;2020-05-31&#34; &#34;2020-07-31&#34; &#34;2020-09-30&#34; &#34;2020-11-30&#34; &#34;2021-01-31&#34;&#xA;#&amp;gt; [21] &#34;2020-01-31&#34; &#34;2020-04-30&#34; &#34;2020-07-31&#34; &#34;2020-10-31&#34; &#34;2021-01-31&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_seq_sizes()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Vectorised function that calculates time sequence lengths&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;seq_lengths &amp;lt;- time_seq_sizes(start, start + days(c(1, 10, 20)), &#xA;                              time_by = list(&#34;days&#34; = c(1, 5, 10)))&#xA;seq_lengths&#xA;#&amp;gt; [1] 2 3 3&#xA;&#xA;# Use time_seq_v2() if you know the sequence lengths&#xA;seqs &amp;lt;- time_seq_v2(seq_lengths, start, time_by = list(&#34;days&#34; = c(1, 5, 10)))&#xA;seqs&#xA;#&amp;gt; [1] &#34;2020-01-31&#34; &#34;2020-02-01&#34; &#34;2020-01-31&#34; &#34;2020-02-05&#34; &#34;2020-02-10&#34;&#xA;#&amp;gt; [6] &#34;2020-01-31&#34; &#34;2020-02-10&#34; &#34;2020-02-20&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dealing with impossible dates and datetimes is very simple&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;time_seq(start, end, time_by = &#34;month&#34;, roll_month = &#34;postday&#34;) # roll impossible months forward&#xA;#&amp;gt;  [1] &#34;2020-01-31&#34; &#34;2020-03-01&#34; &#34;2020-03-31&#34; &#34;2020-05-01&#34; &#34;2020-05-31&#34;&#xA;#&amp;gt;  [6] &#34;2020-07-01&#34; &#34;2020-07-31&#34; &#34;2020-08-31&#34; &#34;2020-10-01&#34; &#34;2020-10-31&#34;&#xA;#&amp;gt; [11] &#34;2020-12-01&#34; &#34;2020-12-31&#34; &#34;2021-01-31&#34;&#xA;time_seq(start, end, time_by = &#34;month&#34;, roll_month = &#34;NA&#34;) # no roll&#xA;#&amp;gt;  [1] &#34;2020-01-31&#34; NA           &#34;2020-03-31&#34; NA           &#34;2020-05-31&#34;&#xA;#&amp;gt;  [6] NA           &#34;2020-07-31&#34; &#34;2020-08-31&#34; NA           &#34;2020-10-31&#34;&#xA;#&amp;gt; [11] NA           &#34;2020-12-31&#34; &#34;2021-01-31&#34;&#xA;&#xA;time_seq(start, end, time_by = dmonths(1)) # lubridate version with durations&#xA;#&amp;gt;  [1] &#34;2020-01-31 00:00:00 UTC&#34; &#34;2020-03-01 10:30:00 UTC&#34;&#xA;#&amp;gt;  [3] &#34;2020-03-31 21:00:00 UTC&#34; &#34;2020-05-01 07:30:00 UTC&#34;&#xA;#&amp;gt;  [5] &#34;2020-05-31 18:00:00 UTC&#34; &#34;2020-07-01 04:30:00 UTC&#34;&#xA;#&amp;gt;  [7] &#34;2020-07-31 15:00:00 UTC&#34; &#34;2020-08-31 01:30:00 UTC&#34;&#xA;#&amp;gt;  [9] &#34;2020-09-30 12:00:00 UTC&#34; &#34;2020-10-30 22:30:00 UTC&#34;&#xA;#&amp;gt; [11] &#34;2020-11-30 09:00:00 UTC&#34; &#34;2020-12-30 19:30:00 UTC&#34;&#xA;#&amp;gt; [13] &#34;2021-01-30 06:00:00 UTC&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;iso_week()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Simple function to get formatted ISO weeks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iso_week(today())&#xA;#&amp;gt; [1] &#34;2023-W50&#34;&#xA;iso_week(today(), day = TRUE)&#xA;#&amp;gt; [1] &#34;2023-W50-2&#34;&#xA;iso_week(today(), year = FALSE)&#xA;#&amp;gt; [1] &#34;W50&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;time_cut()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Create pretty time axes using &lt;code&gt;time_cut()&lt;/code&gt; and &lt;code&gt;time_breaks()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;times &amp;lt;- flights$time_hour&#xA;dates &amp;lt;- flights$date&#xA;&#xA;levels(time_cut(dates, n = 10))&#xA;#&amp;gt; [1] &#34;[2013-01-01, 2013-03-01)&#34; &#34;[2013-03-01, 2013-05-01)&#34;&#xA;#&amp;gt; [3] &#34;[2013-05-01, 2013-07-01)&#34; &#34;[2013-07-01, 2013-09-01)&#34;&#xA;#&amp;gt; [5] &#34;[2013-09-01, 2013-11-01)&#34; &#34;[2013-11-01, 2013-12-31]&#34;&#xA;date_breaks &amp;lt;- time_breaks(dates, n = 12)&#xA;time_breaks &amp;lt;- time_breaks(times, n = 12, time_floor = TRUE)&#xA;&#xA;weekly_data &amp;lt;- flights %&amp;gt;%&#xA;  time_count(time = date, time_by = &#34;week&#34;,&#xA;             to = max(time_span(date, time_by = &#34;week&#34;)),&#xA;             include_interval = TRUE) %&amp;gt;%&#xA;  # Filter full weeks&#xA;  mutate(n_days = interval/days(1)) %&amp;gt;%&#xA;  filter(n_days == 7)&#xA;weekly_data %&amp;gt;%&#xA;  ggplot(aes(x = date, y = n)) + &#xA;  geom_bar(stat = &#34;identity&#34;, fill = &#34;#0072B2&#34;) + &#xA;  scale_x_date(breaks = date_breaks, labels = scales::label_date_short())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NicChr/timeplyr/main/man/figures/README-unnamed-chunk-34-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;flights %&amp;gt;%&#xA;  ggplot(aes(x = time_hour)) + &#xA;  geom_bar(fill = &#34;#0072B2&#34;) + &#xA;  scale_x_datetime(breaks = time_breaks, labels = scales::label_date_short())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/NicChr/timeplyr/main/man/figures/README-unnamed-chunk-34-2.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Efficient grouped functions&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;code&gt;group_collapse()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Collapse your data into unique groups with key information&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  group_collapse(origin, dest)&#xA;#&amp;gt; # A tibble: 224 × 7&#xA;#&amp;gt;    origin dest  .group        .loc .start   .end .size&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;list&amp;lt;int&amp;gt;&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    IAH       35     [3,973]      1 336738  3973&#xA;#&amp;gt;  2 LGA    IAH      188     [2,951]      2 336619  2951&#xA;#&amp;gt;  3 JFK    MIA      123     [3,314]      3 336567  3314&#xA;#&amp;gt;  4 JFK    BQN       94       [599]      4 335788   599&#xA;#&amp;gt;  5 LGA    ATL      157    [10,263]      5 336671 10263&#xA;#&amp;gt;  6 EWR    ORD       56     [6,100]      6 336676  6100&#xA;#&amp;gt;  7 EWR    FLL       27     [3,793]      7 336707  3793&#xA;#&amp;gt;  8 LGA    IAD      187     [1,803]      8 336642  1803&#xA;#&amp;gt;  9 JFK    MCO      121     [5,464]      9 336764  5464&#xA;#&amp;gt; 10 LGA    ORD      205     [8,857]     10 336710  8857&#xA;#&amp;gt; # ℹ 214 more rows&#xA;# Sorted (like dplyr::group_data())&#xA;flights %&amp;gt;%&#xA;  group_collapse(origin, dest, sort = TRUE)&#xA;#&amp;gt; # A tibble: 224 × 7&#xA;#&amp;gt;    origin dest  .group        .loc .start   .end .size&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;list&amp;lt;int&amp;gt;&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    ALB        1       [439]    361 331200   439&#xA;#&amp;gt;  2 EWR    ANC        2         [8] 255456 302527     8&#xA;#&amp;gt;  3 EWR    ATL        3     [5,022]     30 336725  5022&#xA;#&amp;gt;  4 EWR    AUS        4       [968]    440 336715   968&#xA;#&amp;gt;  5 EWR    AVL        5       [265]    212 336461   265&#xA;#&amp;gt;  6 EWR    BDL        6       [443]    364 334280   443&#xA;#&amp;gt;  7 EWR    BNA        7     [2,336]    512 336618  2336&#xA;#&amp;gt;  8 EWR    BOS        8     [5,327]    108 336756  5327&#xA;#&amp;gt;  9 EWR    BQN        9       [297]    720 335753   297&#xA;#&amp;gt; 10 EWR    BTV       10       [931]    307 302836   931&#xA;#&amp;gt; # ℹ 214 more rows&#xA;# By order of first appearance&#xA;flights %&amp;gt;%&#xA;  group_collapse(origin, dest, order = FALSE)&#xA;#&amp;gt; # A tibble: 224 × 7&#xA;#&amp;gt;    origin dest  .group        .loc .start   .end .size&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;list&amp;lt;int&amp;gt;&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    IAH        1     [3,973]      1 336738  3973&#xA;#&amp;gt;  2 LGA    IAH        2     [2,951]      2 336619  2951&#xA;#&amp;gt;  3 JFK    MIA        3     [3,314]      3 336567  3314&#xA;#&amp;gt;  4 JFK    BQN        4       [599]      4 335788   599&#xA;#&amp;gt;  5 LGA    ATL        5    [10,263]      5 336671 10263&#xA;#&amp;gt;  6 EWR    ORD        6     [6,100]      6 336676  6100&#xA;#&amp;gt;  7 EWR    FLL        7     [3,793]      7 336707  3793&#xA;#&amp;gt;  8 LGA    IAD        8     [1,803]      8 336642  1803&#xA;#&amp;gt;  9 JFK    MCO        9     [5,464]      9 336764  5464&#xA;#&amp;gt; 10 LGA    ORD       10     [8,857]     10 336710  8857&#xA;#&amp;gt; # ℹ 214 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;fcount()&lt;/code&gt;/&lt;code&gt;fadd_count()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  fgroup_by(origin, dest, tailnum) %&amp;gt;%&#xA;  fcount(flight, carrier)&#xA;#&amp;gt; # A tibble: 186,870 × 6&#xA;#&amp;gt; # Groups:   origin, dest, tailnum [52,783]&#xA;#&amp;gt;    origin dest  tailnum flight carrier     n&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    ALB   N10575    4117 EV          2&#xA;#&amp;gt;  2 EWR    ALB   N10575    4162 EV          2&#xA;#&amp;gt;  3 EWR    ALB   N10575    4309 EV          1&#xA;#&amp;gt;  4 EWR    ALB   N10575    4566 EV          1&#xA;#&amp;gt;  5 EWR    ALB   N10575    6043 EV          2&#xA;#&amp;gt;  6 EWR    ALB   N11113    4264 EV          1&#xA;#&amp;gt;  7 EWR    ALB   N11119    4093 EV          1&#xA;#&amp;gt;  8 EWR    ALB   N11119    4271 EV          2&#xA;#&amp;gt;  9 EWR    ALB   N11150    5675 EV          1&#xA;#&amp;gt; 10 EWR    ALB   N11164    4088 EV          1&#xA;#&amp;gt; # ℹ 186,860 more rows&#xA;flights %&amp;gt;%&#xA;  fselect(origin, dest, tailnum, flight, carrier) %&amp;gt;%&#xA;  fadd_count(across(all_of(c(&#34;flight&#34;, &#34;carrier&#34;))), &#xA;             .by = c(origin, dest, tailnum))&#xA;#&amp;gt; # A tibble: 336,776 × 6&#xA;#&amp;gt;    origin dest  tailnum flight carrier     n&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    IAH   N14228    1545 UA          1&#xA;#&amp;gt;  2 LGA    IAH   N24211    1714 UA          1&#xA;#&amp;gt;  3 JFK    MIA   N619AA    1141 AA          2&#xA;#&amp;gt;  4 JFK    BQN   N804JB     725 B6          1&#xA;#&amp;gt;  5 LGA    ATL   N668DN     461 DL          2&#xA;#&amp;gt;  6 EWR    ORD   N39463    1696 UA          1&#xA;#&amp;gt;  7 EWR    FLL   N516JB     507 B6          3&#xA;#&amp;gt;  8 LGA    IAD   N829AS    5708 EV          2&#xA;#&amp;gt;  9 JFK    MCO   N593JB      79 B6          3&#xA;#&amp;gt; 10 LGA    ORD   N3ALAA     301 AA          5&#xA;#&amp;gt; # ℹ 336,766 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;group_id()&lt;/code&gt;/&lt;code&gt;add_group_id()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This calculates sorted and non-sorted group IDs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  fgroup_by(origin, dest) %&amp;gt;%&#xA;  group_id(order = FALSE) %&amp;gt;%&#xA;  unique()&#xA;#&amp;gt;   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18&#xA;#&amp;gt;  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36&#xA;#&amp;gt;  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54&#xA;#&amp;gt;  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72&#xA;#&amp;gt;  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90&#xA;#&amp;gt;  [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108&#xA;#&amp;gt; [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126&#xA;#&amp;gt; [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144&#xA;#&amp;gt; [145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162&#xA;#&amp;gt; [163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180&#xA;#&amp;gt; [181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198&#xA;#&amp;gt; [199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216&#xA;#&amp;gt; [217] 217 218 219 220 221 222 223 224&#xA;flights %&amp;gt;%&#xA;  fselect(origin, dest) %&amp;gt;%&#xA;  add_group_id(.by = everything()) %&amp;gt;%&#xA;  fdistinct(origin, dest, group_id)&#xA;#&amp;gt; # A tibble: 224 × 3&#xA;#&amp;gt;    origin dest  group_id&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    IAH         35&#xA;#&amp;gt;  2 LGA    IAH        188&#xA;#&amp;gt;  3 JFK    MIA        123&#xA;#&amp;gt;  4 JFK    BQN         94&#xA;#&amp;gt;  5 LGA    ATL        157&#xA;#&amp;gt;  6 EWR    ORD         56&#xA;#&amp;gt;  7 EWR    FLL         27&#xA;#&amp;gt;  8 LGA    IAD        187&#xA;#&amp;gt;  9 JFK    MCO        121&#xA;#&amp;gt; 10 LGA    ORD        205&#xA;#&amp;gt; # ℹ 214 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;fslice()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Fast row index slicing with lots of groups&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  fgroup_by(origin, dest, tailnum) %&amp;gt;%&#xA;  fslice(1:5)&#xA;#&amp;gt; # A tibble: 172,983 × 20&#xA;#&amp;gt; # Groups:   origin, dest, tailnum [52,783]&#xA;#&amp;gt;     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time&#xA;#&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1  2013     1    30     2224           2000       144     2316           2101&#xA;#&amp;gt;  2  2013     2    17     2012           2010         2     2120           2114&#xA;#&amp;gt;  3  2013     2    26     2356           2000       236       41           2104&#xA;#&amp;gt;  4  2013     3    13     1958           2005        -7     2056           2109&#xA;#&amp;gt;  5  2013     5    16     2214           2000       134     2307           2112&#xA;#&amp;gt;  6  2013     9     8     2156           2159        -3     2250           2303&#xA;#&amp;gt;  7  2013     1    26     1614           1620        -6     1706           1724&#xA;#&amp;gt;  8  2013     2    11       NA           1619        NA       NA           1723&#xA;#&amp;gt;  9  2013     2    17     1604           1609        -5     1715           1713&#xA;#&amp;gt; 10  2013    11     8     2203           2159         4     2250           2301&#xA;#&amp;gt; # ℹ 172,973 more rows&#xA;#&amp;gt; # ℹ 12 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;,&#xA;#&amp;gt; #   hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, date &amp;lt;date&amp;gt;&#xA;flights %&amp;gt;%&#xA;  fgroup_by(origin, dest, tailnum) %&amp;gt;%&#xA;  fslice_head(n = 5)&#xA;#&amp;gt; # A tibble: 172,983 × 20&#xA;#&amp;gt; # Groups:   origin, dest, tailnum [52,783]&#xA;#&amp;gt;     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time&#xA;#&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1  2013     1    30     2224           2000       144     2316           2101&#xA;#&amp;gt;  2  2013     2    17     2012           2010         2     2120           2114&#xA;#&amp;gt;  3  2013     2    26     2356           2000       236       41           2104&#xA;#&amp;gt;  4  2013     3    13     1958           2005        -7     2056           2109&#xA;#&amp;gt;  5  2013     5    16     2214           2000       134     2307           2112&#xA;#&amp;gt;  6  2013     9     8     2156           2159        -3     2250           2303&#xA;#&amp;gt;  7  2013     1    26     1614           1620        -6     1706           1724&#xA;#&amp;gt;  8  2013     2    11       NA           1619        NA       NA           1723&#xA;#&amp;gt;  9  2013     2    17     1604           1609        -5     1715           1713&#xA;#&amp;gt; 10  2013    11     8     2203           2159         4     2250           2301&#xA;#&amp;gt; # ℹ 172,973 more rows&#xA;#&amp;gt; # ℹ 12 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;,&#xA;#&amp;gt; #   hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, date &amp;lt;date&amp;gt;&#xA;# Use keep_order to retain the data input order&#xA;flights %&amp;gt;%&#xA;  fgroup_by(origin, dest, tailnum) %&amp;gt;%&#xA;  fslice_tail(prop = 0.5, keep_order = TRUE)&#xA;#&amp;gt; # A tibble: 153,350 × 20&#xA;#&amp;gt; # Groups:   origin, dest, tailnum [40,633]&#xA;#&amp;gt;     year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time&#xA;#&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1  2013     1     2      919            830        49     1135           1038&#xA;#&amp;gt;  2  2013     1     2     1126           1125         1     1333           1325&#xA;#&amp;gt;  3  2013     1     3      603            605        -2      709            705&#xA;#&amp;gt;  4  2013     1     3     1336           1340        -4     1641           1626&#xA;#&amp;gt;  5  2013     1     3     1348           1350        -2     1631           1640&#xA;#&amp;gt;  6  2013     1     4      628            630        -2     1124           1140&#xA;#&amp;gt;  7  2013     1     4      712            715        -3     1021           1035&#xA;#&amp;gt;  8  2013     1     4      716            720        -4      855            840&#xA;#&amp;gt;  9  2013     1     4     1101           1106        -5     1349           1404&#xA;#&amp;gt; 10  2013     1     4     1249           1235        14     1434           1415&#xA;#&amp;gt; # ℹ 153,340 more rows&#xA;#&amp;gt; # ℹ 12 more variables: arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;,&#xA;#&amp;gt; #   hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;, date &amp;lt;date&amp;gt;&#xA;&#xA;# Stratified sampling&#xA;flights %&amp;gt;%&#xA;    fselect(origin, dest) %&amp;gt;%&#xA;    fgroup_by(origin, dest) %&amp;gt;%&#xA;    add_row_id() %&amp;gt;%&#xA;    fslice_sample(seed = 91239)&#xA;#&amp;gt; # A tibble: 336,776 × 3&#xA;#&amp;gt; # Groups:   origin, dest [224]&#xA;#&amp;gt;    origin dest  row_id&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    ALB      347&#xA;#&amp;gt;  2 EWR    ALB      211&#xA;#&amp;gt;  3 EWR    ALB      298&#xA;#&amp;gt;  4 EWR    ALB      316&#xA;#&amp;gt;  5 EWR    ALB      267&#xA;#&amp;gt;  6 EWR    ALB      286&#xA;#&amp;gt;  7 EWR    ALB      418&#xA;#&amp;gt;  8 EWR    ALB      270&#xA;#&amp;gt;  9 EWR    ALB      306&#xA;#&amp;gt; 10 EWR    ALB       78&#xA;#&amp;gt; # ℹ 336,766 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;fdistinct()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Distinct rows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  fgroup_by(origin, dest, tailnum) %&amp;gt;%&#xA;  fdistinct(year, month, day)&#xA;#&amp;gt; # A tibble: 316,477 × 6&#xA;#&amp;gt; # Groups:   origin, dest, tailnum [52,783]&#xA;#&amp;gt;    origin dest  tailnum  year month   day&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    IAH   N14228   2013     1     1&#xA;#&amp;gt;  2 LGA    IAH   N24211   2013     1     1&#xA;#&amp;gt;  3 JFK    MIA   N619AA   2013     1     1&#xA;#&amp;gt;  4 JFK    BQN   N804JB   2013     1     1&#xA;#&amp;gt;  5 LGA    ATL   N668DN   2013     1     1&#xA;#&amp;gt;  6 EWR    ORD   N39463   2013     1     1&#xA;#&amp;gt;  7 EWR    FLL   N516JB   2013     1     1&#xA;#&amp;gt;  8 LGA    IAD   N829AS   2013     1     1&#xA;#&amp;gt;  9 JFK    MCO   N593JB   2013     1     1&#xA;#&amp;gt; 10 LGA    ORD   N3ALAA   2013     1     1&#xA;#&amp;gt; # ℹ 316,467 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;fduplicates()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Duplicate rows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  fgroup_by(origin, dest, tailnum) %&amp;gt;%&#xA;  fduplicates(year, month, day)&#xA;#&amp;gt; # A tibble: 20,299 × 6&#xA;#&amp;gt; # Groups:   origin, dest, tailnum [6,122]&#xA;#&amp;gt;    origin dest  tailnum  year month   day&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 EWR    BOS   N206JB   2013     1     1&#xA;#&amp;gt;  2 JFK    DCA   N846MQ   2013     1     1&#xA;#&amp;gt;  3 JFK    RDU   N828MQ   2013     1     1&#xA;#&amp;gt;  4 LGA    CMH   N739MQ   2013     1     1&#xA;#&amp;gt;  5 LGA    MIA   N3EMAA   2013     1     1&#xA;#&amp;gt;  6 EWR    FLL   N516JB   2013     1     1&#xA;#&amp;gt;  7 JFK    MCO   N5FMAA   2013     1     1&#xA;#&amp;gt;  8 LGA    DCA   N951UW   2013     1     1&#xA;#&amp;gt;  9 EWR    PWM   N11544   2013     1     1&#xA;#&amp;gt; 10 LGA    DFW   N3DUAA   2013     1     1&#xA;#&amp;gt; # ℹ 20,289 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;row_id()&lt;/code&gt;/&lt;code&gt;add_row_id()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Fast grouped row IDs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;iris &amp;lt;- as_tibble(iris)&#xA;range(row_id(iris))&#xA;#&amp;gt; [1]   1 150&#xA;iris %&amp;gt;%&#xA;  add_row_id()&#xA;#&amp;gt; # A tibble: 150 × 6&#xA;#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species row_id&#xA;#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;    &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1          5.1         3.5          1.4         0.2 setosa       1&#xA;#&amp;gt;  2          4.9         3            1.4         0.2 setosa       2&#xA;#&amp;gt;  3          4.7         3.2          1.3         0.2 setosa       3&#xA;#&amp;gt;  4          4.6         3.1          1.5         0.2 setosa       4&#xA;#&amp;gt;  5          5           3.6          1.4         0.2 setosa       5&#xA;#&amp;gt;  6          5.4         3.9          1.7         0.4 setosa       6&#xA;#&amp;gt;  7          4.6         3.4          1.4         0.3 setosa       7&#xA;#&amp;gt;  8          5           3.4          1.5         0.2 setosa       8&#xA;#&amp;gt;  9          4.4         2.9          1.4         0.2 setosa       9&#xA;#&amp;gt; 10          4.9         3.1          1.5         0.1 setosa      10&#xA;#&amp;gt; # ℹ 140 more rows&#xA;iris %&amp;gt;% &#xA;  add_row_id(Species)&#xA;#&amp;gt; # A tibble: 150 × 6&#xA;#&amp;gt;    Sepal.Length Sepal.Width Petal.Length Petal.Width Species row_id&#xA;#&amp;gt;           &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;    &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1          5.1         3.5          1.4         0.2 setosa       1&#xA;#&amp;gt;  2          4.9         3            1.4         0.2 setosa       2&#xA;#&amp;gt;  3          4.7         3.2          1.3         0.2 setosa       3&#xA;#&amp;gt;  4          4.6         3.1          1.5         0.2 setosa       4&#xA;#&amp;gt;  5          5           3.6          1.4         0.2 setosa       5&#xA;#&amp;gt;  6          5.4         3.9          1.7         0.4 setosa       6&#xA;#&amp;gt;  7          4.6         3.4          1.4         0.3 setosa       7&#xA;#&amp;gt;  8          5           3.4          1.5         0.2 setosa       8&#xA;#&amp;gt;  9          4.4         2.9          1.4         0.2 setosa       9&#xA;#&amp;gt; 10          4.9         3.1          1.5         0.1 setosa      10&#xA;#&amp;gt; # ℹ 140 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;stat_summarise()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Fast Grouped statistical functions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# This is extremely fast and efficient, especially with lots of groups&#xA;flights %&amp;gt;%&#xA;  stat_summarise(arr_time, .by = origin, stat = c(&#34;n&#34;, &#34;mean&#34;, &#34;min&#34;, &#34;max&#34;))&#xA;#&amp;gt; The below stat functions are available for use in stat_summarise&#xA;#&amp;gt; n&#xA;#&amp;gt; nmiss&#xA;#&amp;gt; ndistinct&#xA;#&amp;gt; min&#xA;#&amp;gt; max&#xA;#&amp;gt; mean&#xA;#&amp;gt; median&#xA;#&amp;gt; sd&#xA;#&amp;gt; var&#xA;#&amp;gt; mode&#xA;#&amp;gt; first&#xA;#&amp;gt; last&#xA;#&amp;gt; sum&#xA;#&amp;gt; prop_complete&#xA;#&amp;gt; This message is displayed once per session.&#xA;#&amp;gt;    origin      n     mean   min   max&#xA;#&amp;gt;    &amp;lt;char&amp;gt;  &amp;lt;int&amp;gt;    &amp;lt;num&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1:    EWR 120835 1491.876     1  2400&#xA;#&amp;gt; 2:    JFK 111279 1520.070     1  2400&#xA;#&amp;gt; 3:    LGA 104662 1494.424     1  2400&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;q_summarise()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h1&gt;Fast grouped quantiles&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flights %&amp;gt;%&#xA;  q_summarise(arr_time, .by = tailnum)&#xA;#&amp;gt;       tailnum    p0     p25    p50     p75  p100&#xA;#&amp;gt;        &amp;lt;char&amp;gt; &amp;lt;num&amp;gt;   &amp;lt;num&amp;gt;  &amp;lt;num&amp;gt;   &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;&#xA;#&amp;gt;    1:  D942DN  1142 1424.00 1578.0 1680.25  1807&#xA;#&amp;gt;    2:  N0EGMQ    15 1128.50 1528.5 1915.25  2354&#xA;#&amp;gt;    3:  N10156     3 1012.75 1412.5 1840.25  2352&#xA;#&amp;gt;    4:  N102UW   701  812.50 1275.5 1507.25  2319&#xA;#&amp;gt;    5:  N103US   633  801.75 1150.5 1355.75  1732&#xA;#&amp;gt;   ---                                           &#xA;#&amp;gt; 4040:  N998AT    32 1250.00 1839.0 2035.00  2207&#xA;#&amp;gt; 4041:  N998DL     5 1124.00 1525.0 1925.75  2349&#xA;#&amp;gt; 4042:  N999DN   153 1058.00 1500.0 1913.00  2254&#xA;#&amp;gt; 4043:  N9EAMQ    11 1148.00 1535.0 1921.25  2348&#xA;#&amp;gt; 4044:    &amp;lt;NA&amp;gt;    NA      NA     NA      NA    NA&#xA;&#xA;# Pivot longer for data wrangling or plotting&#xA;flights %&amp;gt;%&#xA;  q_summarise(arr_time, .by = origin, &#xA;              pivot = &#34;long&#34;)&#xA;#&amp;gt;     origin .quantile arr_time&#xA;#&amp;gt;     &amp;lt;char&amp;gt;    &amp;lt;fctr&amp;gt;    &amp;lt;num&amp;gt;&#xA;#&amp;gt;  1:    EWR        p0        1&#xA;#&amp;gt;  2:    EWR       p25     1102&#xA;#&amp;gt;  3:    EWR       p50     1522&#xA;#&amp;gt;  4:    EWR       p75     1928&#xA;#&amp;gt;  5:    EWR      p100     2400&#xA;#&amp;gt;  6:    JFK        p0        1&#xA;#&amp;gt;  7:    JFK       p25     1059&#xA;#&amp;gt;  8:    JFK       p50     1625&#xA;#&amp;gt;  9:    JFK       p75     2016&#xA;#&amp;gt; 10:    JFK      p100     2400&#xA;#&amp;gt; 11:    LGA        p0        1&#xA;#&amp;gt; 12:    LGA       p25     1112&#xA;#&amp;gt; 13:    LGA       p50     1509&#xA;#&amp;gt; 14:    LGA       p75     1913&#xA;#&amp;gt; 15:    LGA      p100     2400&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>