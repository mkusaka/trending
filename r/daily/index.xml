<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-27T01:36:15Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DanLoboCastro/AnalyzeR</title>
    <updated>2022-12-27T01:36:15Z</updated>
    <id>tag:github.com,2022-12-27:/DanLoboCastro/AnalyzeR</id>
    <link href="https://github.com/DanLoboCastro/AnalyzeR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AnalyzeR is a R Shiny Web App that provides advanced &amp; interactive data analysis.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AnalyzeR&lt;/h1&gt; &#xA;&lt;p&gt;AnalyzeR is a R Shiny Web App that provides advanced &amp;amp; interactive data analysis.&lt;/p&gt; &#xA;&lt;p&gt;shinyapps.io link: &lt;a href=&#34;http://danlobocastro.shinyapps.io/analyzer_final&#34;&gt;http://danlobocastro.shinyapps.io/analyzer_final&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here you can do:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Exploratory Data Analysis (tables, plots, clustering...)&lt;/li&gt; &#xA; &lt;li&gt;Missing values Imputation&lt;/li&gt; &#xA; &lt;li&gt;Hypothesis testing&lt;/li&gt; &#xA; &lt;li&gt;Regression analysis&lt;/li&gt; &#xA; &lt;li&gt;Survival Analysis&lt;/li&gt; &#xA; &lt;li&gt;Dimensionality reduction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92683061/146679218-5e45036d-5270-45f1-a5be-96471b759754.gif&#34; alt=&#34;exp_2_Trim&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92683061/146679414-e84daa64-3e3b-4070-8046-7cf2113c9413.gif&#34; alt=&#34;ezgif com-gif-maker (1)&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/92683061/146679220-af87c88b-4106-4aa0-8529-404403cf8f14.gif&#34; alt=&#34;pca_Trim&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Azure/AzureKusto</title>
    <updated>2022-12-27T01:36:15Z</updated>
    <id>tag:github.com,2022-12-27:/Azure/AzureKusto</id>
    <link href="https://github.com/Azure/AzureKusto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R interface to Azure Data Explorer, aka Kusto&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AzureKusto &lt;img src=&#34;https://raw.githubusercontent.com/Azure/AzureKusto/master/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;150&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=AzureKusto&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/AzureKusto&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/AzureKusto&#34; alt=&#34;Downloads&#34;&gt; &lt;img src=&#34;https://github.com/Azure/AzureKusto/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;R interface to Kusto, also known as &lt;a href=&#34;https://azure.microsoft.com/en-us/services/data-explorer/&#34;&gt;Azure Data Explorer&lt;/a&gt;, a fast and highly scalable data exploration service.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;AzureKusto is available on &lt;a href=&#34;https://cran.r-project.org/package=AzureKusto&#34;&gt;CRAN&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(repos=&#34;https://cloud.r-project.org&#34;)&#xA;install.packages(&#34;AzureKusto&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version from GitHub. The primary repo is &lt;a href=&#34;https://github.com/Azure/AzureKusto&#34;&gt;https://github.com/Azure/AzureKusto&lt;/a&gt;; please submit issues and pull requests there. AzureKusto is also mirrored at the Cloudyr organisation, at &lt;a href=&#34;https://github.com/cloudyr/AzureKusto&#34;&gt;https://github.com/cloudyr/AzureKusto&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;Azure/AzureKusto&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;h3&gt;Kusto endpoint interface&lt;/h3&gt; &#xA;&lt;p&gt;Connect to a Kusto cluster by instantiating a &lt;code&gt;kusto_database_endpoint&lt;/code&gt; object with the cluster URI and database name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;library(AzureKusto)&#xA;&#xA;Samples &amp;lt;- kusto_database_endpoint(server=&#34;https://help.kusto.windows.net&#34;, database=&#34;Samples&#34;)&#xA;# (New in 1.1.0) Some other ways to call this that also work:&#xA;# Samples &amp;lt;- kusto_database_endpoint(server=&#34;help&#34;, database=&#34;Samples&#34;)&#xA;# Samples &amp;lt;- kusto_database_endpoint(cluster=&#34;help&#34;, database=&#34;Samples&#34;)&#xA;&#xA;# No app ID supplied; using KustoClient app&#xA;# Waiting for authentication in browser...&#xA;# Press Esc/Ctrl + C to abort&#xA;# VSCode WebView only supports showing local http content.&#xA;# Opening in external browser...&#xA;# Browsing https://login.microsoftonline.com/common/oauth2/v2.0/authorize...&#xA;# Authentication complete.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can issue queries to the Kusto database with &lt;code&gt;run_query&lt;/code&gt; and get the results back as a data.frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;res &amp;lt;- run_query(Samples, &#34;StormEvents | summarize EventCount = count() by State | order by State asc&#34;)&#xA;&#xA;head(res)&#xA;&#xA;##            State EventCount&#xA;## 1        ALABAMA       1315&#xA;## 2         ALASKA        257&#xA;## 3 AMERICAN SAMOA         16&#xA;## 4        ARIZONA        340&#xA;## 5       ARKANSAS       1028&#xA;## 6 ATLANTIC NORTH        188&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;run_query()&lt;/code&gt; also supports query parameters. Pass your parameters as additional keyword arguments and they will be escaped and interpolated into the query string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;res &amp;lt;- run_query(Samples, &#34;MyFunction(lim)&#34;, lim=10L)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Command statements work much the same way, except that they do not accept parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;res &amp;lt;- run_query(Samples, &#34;.show tables&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;dplyr Interface&lt;/h3&gt; &#xA;&lt;p&gt;The package also implements a &lt;a href=&#34;https://github.com/tidyverse/dplyr&#34;&gt;dplyr&lt;/a&gt;-style interface for building a query upon a &lt;code&gt;tbl_kusto&lt;/code&gt; object and then running it on the remote Kusto database and returning the result as a regular tibble object with &lt;code&gt;collect()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;library(dplyr)&#xA;&#xA;StormEvents &amp;lt;- tbl_kusto(Samples, &#34;StormEvents&#34;)&#xA;&#xA;q &amp;lt;- StormEvents %&amp;gt;%&#xA;    group_by(State) %&amp;gt;%&#xA;    summarize(EventCount=n()) %&amp;gt;%&#xA;    arrange(State)&#xA;&#xA;show_query(q)&#xA;&#xA;## &amp;lt;KQL&amp;gt; database(&#39;Samples&#39;).[&#39;StormEvents&#39;]&#xA;## | summarize [&#39;EventCount&#39;] = count() by [&#39;State&#39;]&#xA;## | order by [&#39;State&#39;] asc&#xA;&#xA;collect(q)&#xA;&#xA;## # A tibble: 67 x 2&#xA;##    State          EventCount&#xA;##    &amp;lt;chr&amp;gt;               &amp;lt;dbl&amp;gt;&#xA;##  1 ALABAMA              1315&#xA;##  2 ALASKA                257&#xA;##  3 AMERICAN SAMOA         16&#xA;##  4 ARIZONA               340&#xA;##  5 ARKANSAS             1028&#xA;##  6 ATLANTIC NORTH        188&#xA;##  7 ATLANTIC SOUTH        193&#xA;##  8 CALIFORNIA            898&#xA;##  9 COLORADO             1654&#xA;## 10 CONNECTICUT           148&#xA;## # ... with 57 more rows&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(New in 1.1.0) The &lt;code&gt;$&lt;/code&gt; operator can be used to access fields in dynamic columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;q &amp;lt;- StormEvents %&amp;gt;%&#xA;    slice_sample(10) %&amp;gt;%&#xA;    mutate(Description = as.character(StormSummary$Details$Description)) %&amp;gt;%&#xA;    select(EventId, Description)&#xA;&#xA;show_query(q)&#xA;&#xA;# &amp;lt;KQL&amp;gt; cluster(&#39;https://help.kusto.windows.net&#39;).database(&#39;Samples&#39;).[&#39;StormEvents&#39;]&#xA;# | sample 10&#xA;# | extend [&#39;Description&#39;] = tostring([&#39;StormSummary&#39;] . [&#39;Details&#39;] . [&#39;Description&#39;])&#xA;# | project [&#39;EventId&#39;], [&#39;Description&#39;]&#xA;&#xA;# # A tibble: 10 × 2&#xA;#    EventId Description                                                                                                                                                                                                                &#xA;#      &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                                                                                                                                                                                                                      &#xA;#  1   61032 A waterspout formed in the Atlantic southeast of Melbourne Beach and briefly moved toward shore.                                                                                                                           &#xA;#  2   60904 As much as 9 inches of rain fell in a 24-hour period across parts of coastal Volusia County.                                                                                                                               &#xA;#  3   60913 A tornado touched down in the Town of Eustis at the northern end of West Crooked Lake. The tornado quickly intensified to EF1 strength as it moved north northwest through Eustis. The track was just under two miles long…&#xA;#  4   64588 The county dispatch reported several trees were blown down along Quincey Batten Loop near State Road 206. The cost of tree removal was estimated.                                                                          &#xA;#  5   68796 Numerous large trees were blown down with some down on power lines. Damage occurred in eastern Adams county.                                                                                                               &#xA;#  6   68814 This tornado began as a small, narrow path of minor damage, including a porch being blown off a house. It reached its maximum intensity as it crossed highway 29. Here, a brick home had all of its roof structure blown o…&#xA;#  7   68834 Several trees and power lines were blown down along Zetus Road in the Zetus Community. A few of those trees were down on a mobile home which caused significant damage.                                                    &#xA;#  8   68846 A swath of penny to quarter sized hail fell from just east of French Camp to about 6 miles north of Weir.                                                                                                                  &#xA;#  9   73241 The heavy rain from an active monsoonal trough that had been nearly stationary just to the south of the islands caused widespread flooding across Tutuila.  Flash Flooding was reported from the Malaeimi Valley to the Ba…&#xA;# 10   64725 State Route 8 and Rock Run Road were flooded and impassable&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;tbl_kusto&lt;/code&gt; also accepts query parameters, in case the Kusto source table is a parameterized function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;MyFunctionDate &amp;lt;- tbl_kusto(Samples, &#34;MyFunctionDate(dt)&#34;, dt=as.Date(&#34;2019-01-01&#34;))&#xA;&#xA;MyFunctionDate %&amp;gt;%&#xA;    select(StartTime, EndTime, EpisodeId, EventId, State) %&amp;gt;%&#xA;    head() %&amp;gt;%&#xA;    collect()&#xA;&#xA;## # A tibble: 6 x 5&#xA;##   StartTime           EndTime             EpisodeId EventId State         &#xA;##   &amp;lt;dttm&amp;gt;              &amp;lt;dttm&amp;gt;                  &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         &#xA;## 1 2007-09-29 08:11:00 2007-09-29 08:11:00     11091   61032 ATLANTIC SOUTH&#xA;## 2 2007-09-18 20:00:00 2007-09-19 18:00:00     11074   60904 FLORIDA       &#xA;## 3 2007-09-20 21:57:00 2007-09-20 22:05:00     11078   60913 FLORIDA       &#xA;## 4 2007-12-30 16:00:00 2007-12-30 16:05:00     11749   64588 GEORGIA       &#xA;## 5 2007-12-20 07:50:00 2007-12-20 07:53:00     12554   68796 MISSISSIPPI   &#xA;## 6 2007-12-20 10:32:00 2007-12-20 10:36:00     12554   68814 MISSISSIPPI   &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Exporting to storage&lt;/h3&gt; &#xA;&lt;p&gt;(New in 1.1.0) The function &lt;code&gt;export()&lt;/code&gt; enables you to export a query result to Azure Storage in one step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;export(&#xA;    database = Samples,&#xA;    storage_uri = &#34;https://mystorage.blob.core.windows.net/StormEvents&#34;,&#xA;    query = &#34;StormEvents | summarize EventCount = count() by State | order by State&#34;,&#xA;    name_prefix = &#34;events&#34;,&#xA;    format = &#34;parquet&#34;&#xA;)&#xA;&#xA;#                                                                                 Path NumRecords SizeInBytes&#xA;# 1 https://mystorage.blob.core.windows.net/StormEvents/events/events_1.snappy.parquet         67        1511&#xA;&#xA;library(dplyr)&#xA;StormEvents &amp;lt;- tbl_kusto(Samples, &#34;StormEvents&#34;)&#xA;q &amp;lt;- StormEvents %&amp;gt;%&#xA;    group_by(State) %&amp;gt;%&#xA;    summarize(EventCount=n()) %&amp;gt;%&#xA;    arrange(State) %&amp;gt;%&#xA;    export(&#34;https://mystorage.blob.core.windows.net/StormEvents&#34;)&#xA;&#xA;# # A tibble: 1 × 3&#xA;#   Path                                                                              NumRecords SizeInBytes&#xA;#   &amp;lt;chr&amp;gt;                                                                                  &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;&#xA;# 1 https://mystorage.blob.core.windows.net/StormEvents/export/export_1.snappy.parquet        50       59284&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DBI interface&lt;/h3&gt; &#xA;&lt;p&gt;AzureKusto implements a subset of the DBI specification for interacting with databases. It should be noted that Kusto is quite different to the SQL databases that DBI targets, which affects the behaviour of certain DBI methods and renders other moot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)&#xA;&#xA;# connect to the server: basically a wrapper for kusto_database_endpoint()&#xA;Samples &amp;lt;- dbConnect(AzureKusto(),&#xA;                     server=&#34;https://help.kusto.windows.net&#34;,&#xA;                     database=&#34;Samples&#34;)&#xA;&#xA;dbListTables(Samples)&#xA;&#xA;## [1] &#34;StormEvents&#34;       &#34;demo_make_series1&#34; &#34;demo_series2&#34;     &#xA;## [4] &#34;demo_series3&#34;      &#34;demo_many_series1&#34;&#xA;&#xA;dbExistsTable(Samples, &#34;StormEvents&#34;)&#xA;&#xA;##[1] TRUE&#xA;&#xA;dbGetQuery(Samples, &#34;StormEvents | summarize ct = count()&#34;)&#xA;&#xA;##      ct&#xA;## 1 59066&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Azure Resource Manager interface&lt;/h2&gt; &#xA;&lt;p&gt;On the admin side, AzureKusto extends the framework supplied by the &lt;a href=&#34;https://github.com/Azure/AzureRMR&#34;&gt;AzureRMR&lt;/a&gt; to support Kusto. Methods are provided to create and delete clusters and databases, and manage database principals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a new Kusto cluster&#xA;az &amp;lt;- AzureRMR::get_azure_login()&#xA;ku &amp;lt;- az$&#xA;    get_subscription(&#34;sub_id&#34;)$&#xA;    get_resource_group(&#34;rgname&#34;)$&#xA;    create_kusto_cluster(&#34;mykustocluster&#34;)&#xA;&#xA;# create a new database&#xA;db1 &amp;lt;- ku$create_database(&#34;database1&#34;)&#xA;&#xA;# add a user&#xA;db1$add_principals(&#34;myusername&#34;, role=&#34;User&#34;, fqn=&#34;aaduser=username@mydomain&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Azure/AzureR&#34;&gt;&lt;img src=&#34;https://github.com/Azure/AzureR/raw/master/images/logo2.png&#34; width=&#34;800&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cran/PPtreeregViz</title>
    <updated>2022-12-27T01:36:15Z</updated>
    <id>tag:github.com,2022-12-27:/cran/PPtreeregViz</id>
    <link href="https://github.com/cran/PPtreeregViz" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❗ This is a read-only mirror of the CRAN R package repository. PPtreeregViz — Projection Pursuit Regression Tree Visualization. Homepage: https://github.com/sunsmiling/PPtreeregViz&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;PPtreeregViz&lt;/h2&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sunsmiling/PPtreeregViz/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/sunsmiling/PPtreeregViz/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=PPtreeregViz&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/PPtreeregViz&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;Lifecycle: stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;This package was developed to visualize the Projection Pursuit Regression Tree model &lt;a href=&#34;https://www.mdpi.com/2076-3417/11/21/9885/pdf&#34;&gt;&lt;/a&gt; and add explanatory possibilities of the model using techniques. Since projection pursuit regression tree is based on tree method and grows using projection of input features, the model has excellent interpretability itself. By visualizing each node of this model, global analysis of the model is possible. (This method is model-specific because it can only be used in the model.) Global interpretation using this method is possible, but it is difficult to interpret one observation because it goes through several projections. To overcome this, the developed techniques were slightly modified to fit the structure of model. Using these visualization methods, it is possible to figure out how and what features have affected the model’s prediction. Through these processes, we can determine whether the model is trustworthy or not.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sunsmiling/PPtreeregViz&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138.5&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install the released version of from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;PPtreeregViz&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the development version from GitHub with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;sunsmiling/PPtreeregViz&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Data&lt;/h2&gt; &#xA;&lt;p&gt;As an example, Boston house price data from the MASS library was used. In the first part, we will talk about visualizing model itself. Next, we will see an example of explaining model by applying techniques.&lt;/p&gt; &#xA;&lt;h3&gt;Boston Data&lt;/h3&gt; &#xA;&lt;p&gt;The Boston data were divided into a train data set and a test data set at a ratio of 7:3. In particular, the first observation in the test data set was specifically selected as “sample_one”.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(&#34;Boston&#34;)&#xA;&#xA;set.seed(1234)&#xA;proportion = 0.7&#xA;idx_train = sample(1:nrow(Boston), size = round(proportion * nrow(Boston)))&#xA;sample_train = Boston[idx_train, ]&#xA;sample_test =  Boston[-idx_train, ]&#xA;set.seed(1234)&#xA;sample_one &amp;lt;- sample_test[sample(1:nrow(sample_test),1),-14]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build Model &amp;amp; Plot Model itself&lt;/h2&gt; &#xA;&lt;p&gt;Create a model with Depth as 2 for ease of visualization and interpretation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(PPtreeregViz)&#xA;Model &amp;lt;- PPtreeregViz::PPTreereg(medv ~., data = sample_train, DEPTH = 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(Model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-treeplot-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code&gt;#&amp;gt; NULL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Through &lt;code&gt;pp_ggparty&lt;/code&gt;, marginal predicted values and actual values are drawn according to independent variables for each final node. In the group with the lower 25% of house prices, (lower status of the population (percent)) had a wide range from 10 to 30, but in the group with the top 25%, had only values less than 15.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pp_ggparty(Model, &#34;lstat&#34;, final.rule = 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-pp_ggparty-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pp_ggparty(Model, &#34;lstat&#34;, final.rule = 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-3-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pp_ggparty(Model, &#34;lstat&#34;, final.rule = 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-4-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;variable importance plot&lt;/h3&gt; &#xA;&lt;p&gt;By using the combination of the regression coefficient values of the projection values at each split node, the importance of the variables for which the model was built can be calculated. &lt;code&gt;PPimportance&lt;/code&gt; calculate split node’s coefficients and can be drawn for each final leaf. The blue bar represents the positive slope (effect), and the red bar represents the negative slope.&lt;/p&gt; &#xA;&lt;p&gt;Variables are sorted according to the overall size of each bar, so you can know the variables that are considered important for each final node sequentially.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Tree.Imp &amp;lt;- PPimportance(Model) &#xA;plot(Tree.Imp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-5-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;p&gt;If you use some arguments such as &lt;code&gt;marginal = TRUE&lt;/code&gt; and &lt;code&gt;num_var&lt;/code&gt;, you can see the desired number of marginal variable importance of the whole rather than each final leaf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(Tree.Imp, marginal = TRUE, num_var = 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-6-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;Node visualization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;PPregNodeViz&lt;/code&gt; can visualize how train data is fitted for each node. When the node.id is 4 (i.e.&amp;nbsp;first final node), the result of fitted data is displayed in black color. In order to improve accuracy, can choose the final rule from 1 to 5, whether to use a single value or a linear combination of independent variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPregNodeViz(Model, node.id = 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-7-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPregNodeViz(Model, node.id = 4)&#xA;#&amp;gt; Warning: Removed 2 rows containing missing values (`geom_point()`).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-8-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;p&gt;4th final leaf’s node id is 7.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPregNodeViz(Model,node.id = 7)&#xA;#&amp;gt; Warning: Removed 2 rows containing missing values (`geom_point()`).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-9-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;Variable visualization&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;code&gt;PPregvarViz&lt;/code&gt; shows results similar to partial dependent plots of how independent variable affects the prediction of Y in actual data. If the argument &lt;code&gt;Indiv=TRUE&lt;/code&gt;, the picture is drawn by dividing the grid for each final node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPregVarViz(Model,&#34;lstat&#34;)&#xA;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-10-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPregVarViz(Model,&#34;lstat&#34;,indiv = TRUE)&#xA;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula = &#39;y ~ x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-11-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPregVarViz(Model,&#34;chas&#34;,var.factor = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-12-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPregVarViz(Model,&#34;chas&#34;,indiv = TRUE, var.factor = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-13-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h2&gt;Using method&lt;/h2&gt; &#xA;&lt;h3&gt;Calculate SHAP for method&lt;/h3&gt; &#xA;&lt;p&gt;So far, we have only seen the global movement of the model itself. From now on, we will proceed with model analysis using SHAP values. Using the SHAP value, you can see locally how one sample data moves in the model. In order to calculate the SHAP value more faster, the method for calculating the kernel shap of the package was slightly modified and used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sample_one&#xA;#&amp;gt;       crim zn indus chas   nox    rm  age    dis rad tax ptratio black lstat&#xA;#&amp;gt; 81 0.04113 25  4.86    0 0.426 6.727 33.5 5.4007   4 281      19 396.9  5.29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the &lt;code&gt;empirical&lt;/code&gt; method, which is a more accurate calculation method, takes more time to calculate, a &lt;code&gt;simple&lt;/code&gt; calculation method, which is an estimate of this value, was used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ppshapr.simple(PPTreeregOBJ = Model, testObs = sample_one, final.rule = 5)$dt&#xA;#&amp;gt;        none       crim           zn     indus       chas      nox        rm&#xA;#&amp;gt; 1: 34.19573 -0.3102618 -0.005457964 0.1946273 -0.1216814 1.159332 -3.260457&#xA;#&amp;gt;           age        dis        rad       tax   ptratio      black     lstat&#xA;#&amp;gt; 1: 0.08411667 -0.3871038 -0.2375765 0.3034294 -1.093994 -0.1602463 0.6558048&#xA;#&amp;gt;    finalLeaf&#xA;#&amp;gt; 1:         4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although the difference in calculation speed between and is quite large, it can be seen that the results are similar.&lt;/p&gt; &#xA;&lt;h3&gt;Decision plot&lt;/h3&gt; &#xA;&lt;p&gt;creates a tree based on the range of y values. Therefore, when calculating the contributions of features of one observation, it is natural that different values are calculated for each final leaf. Compared with the data with y value in the lower 25% (first final leaf), the effect of of [&lt;code&gt;sample_one&lt;/code&gt;] was very large. On the other hand, it can be seen that the influence of rm (average number of rooms per dwelling) is very large in data with upper 25% large y value (4th final leaf). How each feature affects y hat in one observation can be drawn in two ways. &lt;code&gt;decisionplot&lt;/code&gt; and &lt;code&gt;waterfallplot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;decisionplot(Model, testObs = sample_one, method=&#34;simple&#34;,varImp = &#34;shapImp&#34;,final.rule=5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-16-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;waterfallplot(Model, testObs = sample_one, method=&#34;simple&#34;, final.rule=5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-17-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;Summary &amp;amp; Dependence plot&lt;/h3&gt; &#xA;&lt;p&gt;We would like to see how the entire SHAP values of train data move in the model, not the effect of one observation. Since this could be quiet computationally expensive, so it is calculated at once using .&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shap_long &amp;lt;- ppshapr_prep(Model, final.rule = 5, method = &#34;simple&#34;) #takes about 4 minutes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The summary plot visualizes how the overall features of the training data affect the SHAP distribution. For each final leaf, a red dot means that the feature value corresponding to that point has a high value. The yellow color means the middle value of the feature value, and the blue color has a lower feature value. For each leaf, features are sorted in descending order of the SHAP’s variance. In all final leaves, rm, , and tax had a great influence in determining the house price in common.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPshapsummary(data_long = shap_long)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-19-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;p&gt;Through the dependency plot, for each final leaf, the effect of the number of rooms on the house price can be seen. When the number of rooms was 6 or less, the number of rooms did not have a significant effect on the house price in the low house price (first final leaf), but the SHAP value had a negative value as the number of rooms decreased in the data corresponding to the top 25% of the house price. In other words, it can be interpreted that in an area with a low house price, when the number of rooms was small or average, it did not affect house price, but in an area with a high house price, a small number of rooms had a negative effect on the house price.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPshapdependence(shap_long,x = &#34;rm&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-20-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;p&gt;You can add color to see how it relates to other feature. As a result of specifying as a color, it can be seen that the lower the and the larger the number of rooms, SHAP values increase.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPshapdependence(shap_long, x = &#34;rm&#34;, color_feature = &#34;lstat&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-21-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;p&gt;Next, as a result of examining and age, the higher contributed to the lower house price.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;PPshapdependence(shap_long,x = &#34;crim&#34;, color_feature = &#34;age&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-22-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;Submodular Pick for Projection pursuit regression Tree&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pick_obs_1 &amp;lt;- subpick(shap_long,final.leaf = 1, obsnum = 10)&#xA;pick_obs_4 &amp;lt;- subpick(shap_long,final.leaf = 4, obsnum = 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;subpick(shap_long,final.leaf =1, obsnum = 5)&#xA;#&amp;gt; $df&#xA;#&amp;gt;        crim zn indus chas   nox    rm   age    dis rad tax ptratio  black lstat&#xA;#&amp;gt; 1: 67.92080  0 18.10    0 0.693 5.683 100.0 1.4254  24 666    20.2 384.97 22.98&#xA;#&amp;gt; 2:  0.25387  0  6.91    0 0.448 5.399  95.3 5.8700   3 233    17.9 396.90 30.81&#xA;#&amp;gt; 3:  1.41385  0 19.58    1 0.871 6.129  96.0 1.7494   5 403    14.7 321.02 15.12&#xA;#&amp;gt; 4:  1.13081  0  8.14    0 0.538 5.713  94.1 4.2330   4 307    21.0 360.17 22.60&#xA;#&amp;gt; 5:  4.54192  0 18.10    0 0.770 6.398  88.0 2.5182  24 666    20.2 374.56  7.79&#xA;#&amp;gt; &#xA;#&amp;gt; $obs&#xA;#&amp;gt; [1]   3  62  97 186 230&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;decisionplot(Model, testObs = pick_obs_1$df ,&#xA;             method=&#34;simple&#34;,&#xA;             varImp = &#34;shapImp&#34;,final.rule = 5, Yrange = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-decisionplot-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;&#xA;&#xA;decisionplot(Model, testObs = pick_obs_4$df ,&#xA;             method=&#34;simple&#34;,&#xA;             varImp = &#34;shapImp&#34;,final.rule = 5, Yrange = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-decisionplot-2.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;h3&gt;Collaboration with other packages&lt;/h3&gt; &#xA;&lt;p&gt;It can be collaborate with various that have already been developed ( and lime). If you use these package, you cannot see the characteristics of each final node, but you can see the results of the entire model. The following shows an example using the functions in the package.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#34;DALEX&#34;)&#xA;#&amp;gt; Welcome to DALEX (version: 2.4.2).&#xA;#&amp;gt; Find examples and detailed introduction at: http://ema.drwhy.ai/&#xA;#&amp;gt; &#xA;#&amp;gt; 다음의 패키지를 부착합니다: &#39;DALEX&#39;&#xA;#&amp;gt; The following object is masked from &#39;package:dplyr&#39;:&#xA;#&amp;gt; &#xA;#&amp;gt;     explain&#xA;new_explainer &amp;lt;- explain_PP(PPTreeregOBJ = Model, data = sample_train[,-14], &#xA;                            y = sample_train[,14], final.rule = 4)&#xA;#&amp;gt; Preparation of a new explainer is initiated&#xA;#&amp;gt;   -&amp;gt; model label       :  PPTreereg with final rule:  4 &#xA;#&amp;gt;   -&amp;gt; data              :  354  rows  13  cols &#xA;#&amp;gt;   -&amp;gt; target variable   :  354  values &#xA;#&amp;gt;   -&amp;gt; predict function  :  function(m, x) as.numeric(predict.PPTreereg(m, x, final.rule = final.rule)) &#xA;#&amp;gt;   -&amp;gt; predicted values  :  No value for predict function target column. (  default  )&#xA;#&amp;gt;   -&amp;gt; model_info        :  package Model of class: PPTreereg package unrecognized , ver. Unknown , task regression (  default  ) &#xA;#&amp;gt;   -&amp;gt; predicted values  :  numerical, min =  6.23836 , mean =  22.16265 , max =  50.86801  &#xA;#&amp;gt;   -&amp;gt; residual function :  difference between y and yhat (  default  )&#xA;#&amp;gt;   -&amp;gt; residuals         :  numerical, min =  -22.9165 , mean =  0.2167251 , max =  29.68961  &#xA;#&amp;gt;   A new explainer has been created!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;DALEX::model_performance(new_explainer)&#xA;#&amp;gt; Measures for:  regression&#xA;#&amp;gt; mse        : 16.23654 &#xA;#&amp;gt; rmse       : 4.029459 &#xA;#&amp;gt; r2         : 0.8056848 &#xA;#&amp;gt; mad        : 1.566196&#xA;#&amp;gt; &#xA;#&amp;gt; Residuals:&#xA;#&amp;gt;           0%          10%          20%          30%          40%          50% &#xA;#&amp;gt; -22.91649613  -3.46075535  -2.01332404  -1.09793019  -0.59868895  -0.09435965 &#xA;#&amp;gt;          60%          70%          80%          90%         100% &#xA;#&amp;gt;   0.57727933   1.21600562   2.26041174   4.14090308  29.68961335&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;DALEX::model_performance(new_explainer) %&amp;gt;% plot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-27-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;DALEX::model_profile(new_explainer, variables = &#34;rm&#34;) %&amp;gt;% plot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-28-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;DALEX::model_profile(new_explainer, variables = &#34;rm&#34;) %&amp;gt;%&#xA;  plot(geom=&#34;profiles&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-29-1.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;DALEX::predict_parts(new_explainer, new_observation = sample_one) %&amp;gt;% plot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cran/PPtreeregViz/master/man/figures/README-unnamed-chunk-30-1.png&#34; width=&#34;80%&#34;&gt;</summary>
  </entry>
</feed>