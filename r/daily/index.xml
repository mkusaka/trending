<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-09T01:42:29Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CBIIT/ChildhoodCancerDataInitiative-COG_TransformR</title>
    <updated>2023-04-09T01:42:29Z</updated>
    <id>tag:github.com,2023-04-09:/CBIIT/ChildhoodCancerDataInitiative-COG_TransformR</id>
    <link href="https://github.com/CBIIT/ChildhoodCancerDataInitiative-COG_TransformR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This script takes a directory of COG JSON files and transforms them into a table.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChildhoodCancerDataInitiative-COG_TransformR&lt;/h1&gt; &#xA;&lt;p&gt;This script takes a directory of COG JSON files and transforms them into a table.&lt;/p&gt; &#xA;&lt;p&gt;To run the script, run the following command in a terminal where R is installed for help.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rscript --vanilla COG_TransformR.R -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: COG_TransformR.R [options]&#xA;&#xA;COG_TransformR.R v1.0.0&#xA;&#xA;This script takes a directory of COG JSON files and transforms them into a table.&#xA;&#xA;&#xA;Options:&#xA;&#x9;-d CHARACTER, --directory=CHARACTER&#xA;&#x9;&#x9;Model file yaml&#xA;&#xA;&#x9;-h, --help&#xA;&#x9;&#x9;Show this help message and exit&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>kroganlab/shinyKrogan</title>
    <updated>2023-04-09T01:42:29Z</updated>
    <id>tag:github.com,2023-04-09:/kroganlab/shinyKrogan</id>
    <link href="https://github.com/kroganlab/shinyKrogan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shinyKrogan&lt;/h1&gt; &#xA;&lt;p&gt;A repo for R shiny apps developed in the UCSF QBI Krogan Lab.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RestlessTail/ggGenshin</title>
    <updated>2023-04-09T01:42:29Z</updated>
    <id>tag:github.com,2023-04-09:/RestlessTail/ggGenshin</id>
    <link href="https://github.com/RestlessTail/ggGenshin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a collection of ggplot2 color scales&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ggGenshin&lt;/h1&gt; &#xA;&lt;p&gt;a collection of ggplot2 color scales&lt;/p&gt; &#xA;&lt;p&gt;ggGenshin is a package inspired by ggsci and content creator 阿昆的科研日常 of bilibili. The package provides a collection palettes in the style of Genshin and has both R(ggplot2) and Python (Matplotlib) interfaces.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;R&lt;/h3&gt; &#xA;&lt;p&gt;Paste the code to the R console to install ggGenshin from GitHub.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;devtools::install_github(&#34;RestlessTail/ggGenshin&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;Use pip to install ggGenshinPy from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install git+https://github.com/RestlessTail/ggGenshin@master-python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;R&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;scale_color_XXX&lt;/code&gt;/&lt;code&gt;scale_colour_XXX&lt;/code&gt; or &lt;code&gt;scale_fill_XXX&lt;/code&gt; to create a palette like in ggsci. But parameters can be somewhat different.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;#p is a ggplot object&#xA;print(p + scale_color_albedo())&#xA;print(p + scale_colour_albedo())&#xA;print(p + scale_fill_albedo())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each palette of ggGenshin has both discrete and continuous versions. ggGenshin returns a discrete palette by default. Use &lt;code&gt;discrete = FALSE&lt;/code&gt; to create a continuous palette.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;#p is a ggplot object&#xA;print(p + scale_color_albedo(discrete = FALSE))&#xA;print(p + scale_colour_albedo(discrete = FALSE))&#xA;print(p + scale_fill_albedo(discrete = FALSE))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;palette&lt;/code&gt; is not available in ggGenshin. Use &lt;code&gt;alpha&lt;/code&gt; to set transparency and use &lt;code&gt;reverse&lt;/code&gt; to reverse the palette.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;#p is a ggplot object&#xA;print(p + scale_color_albedo(alpha = 0.8))&#xA;print(p + scale_colour_albedo(alpha = 0.8, reverse = TRUE))&#xA;print(p + scale_fill_albedo(alpha = 0.8))&#xA;print(p + scale_fill_albedo(alpha = 0.8, reverse = TRUE))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;pal_XXX&lt;/code&gt; and &lt;code&gt;rgb_XXX&lt;/code&gt; are also available in ggGenshin. Use the two functions to export colors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;pal_albedo()(10) #create 10 colors&#xA;pal_albedo(alpha = 0.5)(10)&#xA;pal_albedo(alpha = 0.7, reverse = TRUE)(10)&#xA;&#xA;rgb_albedo(10) #create 10 colors&#xA;rgb_albedo(n = 10, alpha = 0.5)&#xA;rgb_albedo(n = 10, alpha = 0.7, reverse = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;ggGenshin::keys()&lt;/code&gt; for available palettes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;ggGenshin::keys()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;p&gt;Import &lt;code&gt;colormap&lt;/code&gt; module of ggGenshinPy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import colormap from ggGenshinPy as ggg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;cmapXXX&lt;/code&gt; method to create a Matplotlib colormap object. ggGenshinPy returns a linear segmented colormap by default. Use &lt;code&gt;listed = True&lt;/code&gt; to create a listed colormap.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# import Matplotlib&#xA;import matplotlib.pyplot as plt&#xA;&#xA;# create a listed colormap&#xA;plt.bar(range(4), range(1, 5), color = ggg.cmapSayu(listed = True)(range(4)))&#xA;&#xA;# create a linear segmented colormap&#xA;heatmapDat = ([0.3, 1.5, 6.3, 5.3], [5.3, 9.6, 2.4, 6.7], [2.5, 7.6, 4.9, 4.3], [3.4, 9.0, 6.7, 0.6], [2.2, 5.3, 4.8, 9.8])&#xA;plt.imshow(heatmapDat, cmap = ggg.cmapYoimiya())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;keys()&lt;/code&gt; for available palettes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;ggg.keys()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>