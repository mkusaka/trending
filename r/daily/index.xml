<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-30T01:39:44Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pola-rs/r-polars</title>
    <updated>2022-12-30T01:39:44Z</updated>
    <id>tag:github.com,2022-12-30:/pola-rs/r-polars</id>
    <link href="https://github.com/pola-rs/r-polars" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bring polars to R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rpolars&lt;/h1&gt; &#xA;&lt;p&gt;Use awesome &lt;a href=&#34;https://www.pola.rs/&#34;&gt;polars&lt;/a&gt; DataFrame library from R!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;r-polars is not completely translated yet - aim to finish March 2023&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See what is currently translated in &lt;a href=&#34;https://rpolars.github.io/reference/index.html&#34;&gt;latest documentation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h1&gt;Install latest rpolars release&lt;/h1&gt; &#xA;&lt;p&gt;No dependencies other than R (≥ 4.1.0)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Macbbook x86_64 &lt;code&gt;install.packages(repos=NULL, &#34;https://github.com/pola-rs/r-polars/releases/latest/download/rpolars__x86_64-apple-darwin17.0.tgz&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux x86_64 &lt;code&gt;install.packages(repos=NULL, &#34;https://github.com/pola-rs/r-polars/releases/latest/download/rpolars__x86_64-pc-linux-gnu.gz&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows &lt;code&gt;install.packages(repos=NULL, &#34;https://github.com/pola-rs/r-polars/releases/latest/download/rpolars.zip&#34;)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other targets? Start a new issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install a specific version? Find the version specific url, via &lt;a href=&#34;https://github.com/pola-rs/r-polars/releases&#34;&gt;releases section&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Documentation:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sorhawell.github.io/reference/index.html&#34;&gt;Latest docs found here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;d freaking love any contributions &amp;lt;3 Just reach out if any questions.&lt;/p&gt; &#xA;&lt;h3&gt;Simple contribution example to implement the cosine expression:&lt;/h3&gt; &#xA;&lt;h2&gt;NB! these examples link to old repo rpolars/rpolars source code, but the idea is the same&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up the &lt;a href=&#34;https://pola-rs.github.io/polars/py-polars/html/reference/expressions/api/polars.Expr.cos.html&#34;&gt;polars.Expr.cos method in py-polars documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press the &lt;code&gt;[source]&lt;/code&gt; button to see the &lt;a href=&#34;https://github.com/pola-rs/polars/raw/a1afbc4b78f5850314351f7e85ded95fd68b6453/py-polars/polars/internals/expr/expr.py#L5215-L5237&#34;&gt;python impl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find the cos &lt;a href=&#34;https://github.com/pola-rs/polars/raw/a1afbc4b78f5850314351f7e85ded95fd68b6453/py-polars/src/lazy/dsl.rs#L395&#34;&gt;py-polars rust implementation&lt;/a&gt; (likely just a simple call to the rust-polars api)&lt;/li&gt; &#xA; &lt;li&gt;Adapt the rust part and place it &lt;a href=&#34;https://github.com/rpolars/rpolars/raw/26799beeb42c7fc71a975afa0c47f6062c201625/src/rust/src/rdataframe/rexpr.rs#L738&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Adapt the python part into R and place it &lt;a href=&#34;https://github.com/rpolars/rpolars/raw/26799beeb42c7fc71a975afa0c47f6062c201625/R/expr__expr.R#L3175&#34;&gt;here&lt;/a&gt;. Add roxygen docs + examples above.&lt;/li&gt; &#xA; &lt;li&gt;Notice &lt;code&gt;Expr_cos = &#34;use_extendr_wrapper&#34;&lt;/code&gt;, it means we&#39;re this time just using unmodfied the &lt;a href=&#34;https://github.com/rpolars/rpolars/raw/26799beeb42c7fc71a975afa0c47f6062c201625/R/extendr-wrappers.R#L251&#34;&gt;extendr auto-generated wrapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write a test &lt;a href=&#34;https://github.com/rpolars/rpolars/raw/main/tests/testthat/test-expr.R&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run renv::restore() and resolve all R packages&lt;/li&gt; &#xA; &lt;li&gt;Run extendr::document() to recompile, see new method can be used e.g. like &lt;code&gt;pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(&#34;a&#34;)$cos())&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run devtools::test()&lt;/li&gt; &#xA; &lt;li&gt;If you fork rpolars and make a PR, your code will be built and tested on all platforms according to github-actions workflow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;news:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;update 28th December: r-polars is now hosted at &lt;a href=&#34;https://github.com/pola-rs/r-polars&#34;&gt;https://github.com/pola-rs/r-polars&lt;/a&gt;. Happy to be here. You might encounter a bunch of links to the old repository the first weeks. I plan to work on r-polars full time the next 3 months, because why not :) Any contributions are much appreciated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;update 24th November: minipolars is getting bigger and is changing name to rpolars and is hosted on &lt;a href=&#34;https://github.com/rpolars/rpolars/&#34;&gt;github.com/rpolars/rpolars&lt;/a&gt;. Translation, testing and documenting progress is unfortunately not fast enough to finish in 2022. Goal postponed to March 2023. rlang is dropped as install dependency. No dependencies should make it very easy to install and manage versions long term.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;update 10th November 2022: Full support for Windows, see installation section. After digging through gnu ld linker documentation and R source code idiosyncrasies, rpolars, can now be build for windows (nighly-gnu). In the end adding this super simple &lt;a href=&#34;https://github.com/sorhawell/rpolars/raw/main/src/rpolars-win.def&#34;&gt;linker export definition file&lt;/a&gt; prevented the linker from trying to export all +160_000 internal variables into a 16bit symbol table maxing out at 65000 variables. Many thanks for 24-hour support from extendr-team &amp;lt;3.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;update 4th November 2022: &lt;a href=&#34;https://sorhawell.github.io/reference/index.html#expr&#34;&gt;Latest documentation shows half (125) of all expression functions are now ported&lt;/a&gt;. Automatic binary release for Mac and Linux. Windows still pending. It is now very easy to install rpolars from binary. See install section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;update: 5th October 2022 Currently ~20% of features have been translated. To make polars call R multi-threaded was a really hard nut to crack as R has no Global-interpreter-lock feature. My solution is to have a main thread in charge of R calls, and any abitrary polars child threads can request to have R user functions executed. Implemented with flume mpsc channels. No serious obstacles left known to me. Just a a lot of writing. Priliminary perfomance benchmarking promise rpolars is going to perform just as fast pypolars.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is polars&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://pola.rs&#34;&gt;Polars&lt;/a&gt; is the &lt;a href=&#34;https://h2oai.github.io/db-benchmark/&#34;&gt;fastest&lt;/a&gt; data table query library. The syntax is related to Spark, but column oriented and not row oriented. All R libraries are also column oriented so this should feel familiar. Unlike Spark, polars is natively multithreaded instead of multinode(d). This make polars simple to install and use as any other R package. Like Spark and SQL-variants polars optimizes queries for memory consuption and speed so you don’t have to. Expect 5-10 speedup compared to dplyr on simple transformations from &amp;gt;500Mb data. When chaining many operations the speedup due to optimization can be even higher. Polars is built on the apache-arrow memory model.&lt;/p&gt; &#xA;&lt;p&gt;This port relies on extendr &lt;a href=&#34;https://github.com/extendr&#34;&gt;https://github.com/extendr&lt;/a&gt; which is the R equivalent to pyo3+maturin. Extendr is very convenient for calling rust from R and the reverse.&lt;/p&gt; &#xA;&lt;h1&gt;Build from source&lt;/h1&gt; &#xA;&lt;p&gt;Install rust + set buildchain to nightly + 3rd party dependencies. See installation workflows/pkgdown.yaml for Windows, Linux and Mac.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install rust with &#39;rustup&#39;, the cross-platform rust installer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustup toolchain install nightly&lt;/code&gt; #install nightly&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rustup default nightly&lt;/code&gt; #choose nightly&lt;/li&gt; &#xA; &lt;li&gt;clone this repo&lt;/li&gt; &#xA; &lt;li&gt;on Windows rtools42 must be in path&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With repo as root dir:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;source(&#34;./renv/activate.R&#34;)&lt;/code&gt; # (likely automatically triggered by .Rprofile)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;renv::restore()&lt;/code&gt; # to install and set up R packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rextendr::document()&lt;/code&gt; # to compile rust code and quick build package&lt;/li&gt; &#xA; &lt;li&gt;or &lt;code&gt;R CMD INSTALL --no-multiarch --with-keep.source rpolars&lt;/code&gt; to build final package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;devtools::test()&lt;/code&gt; to run all unit tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;rpolars_teaser&lt;/h1&gt; &#xA;&lt;p&gt;================ Søren Welling 11/24/2022&lt;/p&gt; &#xA;&lt;h2&gt;Hello world&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#loading the package rpolars only exposes a few functions &#xA;library(rpolars)&#xA;&#xA;#all constructors are accessed via pl&#xA;&#xA;#Here we go, Hello world written with polars expressions&#xA;pl$col(&#34;hello&#34;)$sum()$over(&#34;world&#34;,&#34;from&#34;)$alias(&#34;polars&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## polars Expr: col(&#34;hello&#34;).sum().over([col(&#34;world&#34;), col(&#34;from&#34;)]).alias(&#34;polars&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Typical ussage&lt;/h2&gt; &#xA;&lt;p&gt;Where &lt;code&gt;dplyr&lt;/code&gt; has &lt;code&gt;%&amp;gt;%&lt;/code&gt;-piping and `&lt;code&gt;data.table&lt;/code&gt; has &lt;code&gt;[,]&lt;/code&gt;-indexing, method chaining &lt;code&gt;object$m1()$m2()&lt;/code&gt; is the bread and butter syntax of polars. For now the best learning material to understand the syntax and the power of polars is the &lt;a href=&#34;https://pola-rs.github.io/polars-book/user-guide/&#34;&gt;official user guide for python&lt;/a&gt;. As rpolars syntax is the same ( except &lt;code&gt;$&lt;/code&gt; instead of &lt;code&gt;.&lt;/code&gt;) the guide should be quite useful. The following example shows a typical ‘DataFrame’ method together with chained expressions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#create DataFrame from iris&#xA;df = pl$DataFrame(iris)&#xA;&#xA;#make selection (similar to dplyr mutute() and data.table [,.()] ) and use expressions or strings.&#xA;df = df$select(&#xA;  pl$col(&#34;Sepal.Width&#34;)$sum()$over(&#34;Species&#34;)$alias(&#34;sw_sum_over_species&#34;),&#xA;  pl$col(&#34;Sepal.Length&#34;)$sum()$over(&#34;Species&#34;)$alias(&#34;sl_sum_over_species&#34;),&#xA;  &#34;Petal.Width&#34;&#xA;)&#xA;&#xA;#polars expressions are column instructions&#xA;&#xA;#1 take the column named Sepal.Width&#xA;#2 sum it...&#xA;#3 over(by) the column  Species&#xA;#4 rename/alias to sw_sum_over_species&#xA;&#xA;&#xA;#convert back to data.frame&#xA;head(df$as_data_frame())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##   sw_sum_over_species sl_sum_over_species Petal.Width&#xA;## 1               171.4               250.3         0.2&#xA;## 2               171.4               250.3         0.2&#xA;## 3               171.4               250.3         0.2&#xA;## 4               171.4               250.3         0.2&#xA;## 5               171.4               250.3         0.2&#xA;## 6               171.4               250.3         0.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;DataFrame&lt;/code&gt; from &lt;code&gt;series&lt;/code&gt; and R vectors&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#a single column outside a DataFrame is called a series&#xA;pl$Series((1:5) * 5,&#34;my_series&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## polars Series: shape: (5,)&#xA;## Series: &#39;my_series&#39; [f64]&#xA;## [&#xA;##  5.0&#xA;##  10.0&#xA;##  15.0&#xA;##  20.0&#xA;##  25.0&#xA;## ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#Create DataFrame from a mix of series and/or plain R vectors.&#xA;pl$DataFrame(&#xA;  newname = pl$Series(c(1,2,3,4,5),name = &#34;b&#34;), #overwrite name b with &#39;newname&#39;&#xA;  pl$Series((1:5) * 5,&#34;a&#34;),&#xA;  pl$Series(letters[1:5],&#34;b&#34;),&#xA;  c(5,4,3,2,1), #unnamed vector&#xA;  named_vector = c(15,14,13,12,11) ,#named provide&#xA;  c(5,4,3,2,0)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## polars DataFrame: shape: (5, 6)&#xA;## ┌─────────┬──────┬─────┬────────────┬──────────────┬──────────────┐&#xA;## │ newname ┆ a    ┆ b   ┆ new_column ┆ named_vector ┆ new_column_1 │&#xA;## │ ---     ┆ ---  ┆ --- ┆ ---        ┆ ---          ┆ ---          │&#xA;## │ f64     ┆ f64  ┆ str ┆ f64        ┆ f64          ┆ f64          │&#xA;## ╞═════════╪══════╪═════╪════════════╪══════════════╪══════════════╡&#xA;## │ 1.0     ┆ 5.0  ┆ a   ┆ 5.0        ┆ 15.0         ┆ 5.0          │&#xA;## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 2.0     ┆ 10.0 ┆ b   ┆ 4.0        ┆ 14.0         ┆ 4.0          │&#xA;## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 3.0     ┆ 15.0 ┆ c   ┆ 3.0        ┆ 13.0         ┆ 3.0          │&#xA;## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 4.0     ┆ 20.0 ┆ d   ┆ 2.0        ┆ 12.0         ┆ 2.0          │&#xA;## ├╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌┼╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┼╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 5.0     ┆ 25.0 ┆ e   ┆ 1.0        ┆ 11.0         ┆ 0.0          │&#xA;## └─────────┴──────┴─────┴────────────┴──────────────┴──────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Data types&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#polars is strongly typed. Data-types can be created like this:&#xA;pl$dtypes$Float64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## polars DataType: Float64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# currently translated dtypes&#xA;pl$dtypes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$Boolean&#xA;polars DataType: Boolean&#xA;&#xA;$Float32&#xA;polars DataType: Float32&#xA;&#xA;$Float64&#xA;polars DataType: Float64&#xA;&#xA;$Int32&#xA;polars DataType: Int32&#xA;&#xA;$Int64&#xA;polars DataType: Int64&#xA;&#xA;$UInt32&#xA;polars DataType: UInt32&#xA;&#xA;$UInt64&#xA;polars DataType: UInt64&#xA;&#xA;$Utf8&#xA;polars DataType: Utf8&#xA;&#xA;$Categorical&#xA;polars DataType: Categorical(&#xA;    None,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Read csv and the &lt;code&gt;LazyFrame&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  #using iris.csv as example&#xA;  write.csv(iris, &#34;iris.csv&#34;,row.names = FALSE)&#xA;&#xA;  #read csv into a LazyFrame and compute sum of Sepal.Width over Species&#xA;  lpf = pl$lazy_csv_reader(&#34;iris.csv&#34;)$select(&#xA;    pl$col(&#34;Sepal.Width&#34;)$sum()$over(&#34;Species&#34;)&#xA;  )&#xA;  &#xA;  #a lazy frame is only a tree of instructions&#xA;  print(lpf) #same as lpf$describe_plan()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)&#34;&#xA;##    SELECT [col(&#34;Sepal.Width&#34;).sum().over([col(&#34;Species&#34;)])] FROM&#xA;##     CSV SCAN iris.csv; PROJECT */5 COLUMNS; SELECTION: None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  #read plan from bottom to top, says:  &#34;read entire csv, then compute sum x over y&#34;&#xA;  &#xA;  #what polars actually will do is the optimized plan&#xA;  &#xA;  lpf$describe_optimized_plan()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##    SELECT [col(&#34;Sepal.Width&#34;).sum().over([col(&#34;Species&#34;)])] FROM&#xA;##     CSV SCAN iris.csv; PROJECT 2/5 COLUMNS; SELECTION: None&#xA;&#xA;## NULL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  #optimized plan says:  &#34;read only column x and y from csv, compute sum x over y&#34;&#xA;  &#xA;  #Only reading some columns or in other cases some row in to memory can save speed downstream operations. This is called peojection. &#xA;  &#xA;  &#xA;  #to execute plan, simply call $collect() and get a DataFrame as result&#xA;  &#xA;  lpf$collect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## polars DataFrame: shape: (150, 1)&#xA;## ┌─────────────┐&#xA;## │ Sepal.Width │&#xA;## │ ---         │&#xA;## │ f64         │&#xA;## ╞═════════════╡&#xA;## │ 171.4       │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 171.4       │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 171.4       │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 171.4       │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ ...         │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 148.7       │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 148.7       │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 148.7       │&#xA;## ├╌╌╌╌╌╌╌╌╌╌╌╌╌┤&#xA;## │ 148.7       │&#xA;## └─────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Execute R functions within a polars query&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to mix R code with polars by passing R functions to polars. R functions are slower. Use native polar functions/expressions where possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;    pl$DataFrame(iris)$select(&#xA;      pl$col(&#34;Sepal.Length&#34;)$map(\(s) { #map with a R function&#xA;        x = s$to_r_vector() #convert from Series to a native R vector&#xA;        x[x&amp;gt;=5] = 10&#xA;        x[1:10] # if return is R vector, it will automatically be converted to Series again&#xA;      })&#xA;    )$as_data_frame()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##    Sepal.Length&#xA;## 1          10.0&#xA;## 2           4.9&#xA;## 3           4.7&#xA;## 4           4.6&#xA;## 5          10.0&#xA;## 6          10.0&#xA;## 7           4.6&#xA;## 8          10.0&#xA;## 9           4.4&#xA;## 10          4.9&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>iagomosqueira/WKREBUILD_toolset</title>
    <updated>2022-12-30T01:39:44Z</updated>
    <id>tag:github.com,2022-12-30:/iagomosqueira/WKREBUILD_toolset</id>
    <link href="https://github.com/iagomosqueira/WKREBUILD_toolset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FLR toolset for WKREBUILD2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WKREBUILD_toolset&lt;/h1&gt; &#xA;&lt;p&gt;FLR toolset for ICES WKREBUILD2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>