<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-27T01:39:04Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coolbutuseless/rbytecode</title>
    <updated>2023-10-27T01:39:04Z</updated>
    <id>tag:github.com,2023-10-27:/coolbutuseless/rbytecode</id>
    <link href="https://github.com/coolbutuseless/rbytecode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R bytecode assembler/disassembler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rbytecode &lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/rbytecode/main/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;40%&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/cool-useless-green.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Modern R now executes most code in a stack-based virtual machine (VM).&lt;/p&gt; &#xA;&lt;p&gt;The R code you write is first parsed to an abstract syntax tree, which is then compiled to bytecode, and this bytecode is then executed in &lt;em&gt;R’s bytecode VM&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{rbytecode}&lt;/code&gt; provides an assembler and disassembler for R bytecode - allowing you to peek under the hood at what R is doing to execute your code.&lt;/p&gt; &#xA;&lt;p&gt;The disassembler is a way of inspecting R code internals by dissecting existing code.&lt;/p&gt; &#xA;&lt;p&gt;The assembler is a way of compiling R &lt;em&gt;bytecode assembly&lt;/em&gt; directly into a &lt;em&gt;bytecode object&lt;/em&gt; i.e. writing directly in the virtual machine language understood internally by R’s bytecode VM.&lt;/p&gt; &#xA;&lt;p&gt;This work is heavily based around the &lt;code&gt;{compiler}&lt;/code&gt; package (built-in to R) and Luke Tierney’s document &lt;a href=&#34;https://homepage.cs.uiowa.edu/~luke/R/compiler/compiler.pdf&#34;&gt;A Byte Code Compiler for R&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;This package has a book!&lt;/h2&gt; &#xA;&lt;p&gt;I have written a book to accompany this package. The book gives some background on R’s execution of code in its stack-based virtual machine and a reference for the different bytecode instructions understood by this VM.&lt;/p&gt; &#xA;&lt;p&gt;Available from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leanpub.com/rbytecode&#34;&gt;LeanPub&lt;/a&gt; EPUB available for free - but if you felt like showing support there is an option for a small payment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coolbutuseless.github.io/book/rbytecodebook/&#34;&gt;Online html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Ideas for the Future&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add support for &lt;code&gt;SWITCH&lt;/code&gt; instruction&lt;/li&gt; &#xA; &lt;li&gt;Keep track of stack size during assembly to try and catch bad code.&lt;/li&gt; &#xA; &lt;li&gt;Write a small VM - maybe only covering a subset of instructions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What’s in the box&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;dis()&lt;/code&gt; disassembles R language objects to bytecode assembly&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disq()&lt;/code&gt; a helper function where &lt;code&gt;disq(1 + x)&lt;/code&gt; is equivalent to &lt;code&gt;dis(quote(1 + x))&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;asm()&lt;/code&gt; an assembler for R bytecode. Takes R bytecode assembly and outputs an executable bytecode object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install from &lt;a href=&#34;https://github.com/coolbutuseless/rbytecode&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.package(&#39;remotes&#39;)&#xA;remotes::install_github(&#39;coolbutuseless/rbytecode&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disassembler&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rbytecode)&#xA;&#xA;disq(x + 1) |&amp;gt; &#xA;  as.character()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;GETVAR x&#xA;LDCONST 1&#xA;ADD &#xA;RETURN &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;disq(function(x, y = 1) {x + y}) |&amp;gt; &#xA;  as.character()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;MAKECLOSURE x; y = 1&#xA;  GETVAR x&#xA;  GETVAR y&#xA;  ADD &#xA;  RETURN &#xA;ENDMAKECLOSURE &#xA;RETURN &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Assembler - simple example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;# Create bytecode assembly&#xA;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;code &amp;lt;- r&#34;(&#xA;LDCONST 1&#xA;LDCONST 2&#xA;ADD&#xA;RETURN&#xA;)&#34;&#xA;&#xA;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;# Assemble the code into a bytecode object&#xA;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;bc &amp;lt;- asm(code)&#xA;bc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;bytecode: 0x1307dd978&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;# Evaluate the bytecode&#xA;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;eval(bc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[1] 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bytecode Assembly - Fibonacci&lt;/h2&gt; &#xA;&lt;p&gt;The following bytecode assembly is a reimplementation of R code for calculating the 11th Fibonacci number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;# R implementation&#xA;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;i   &amp;lt;- 0&#xA;fn2 &amp;lt;- 0&#xA;fn1 &amp;lt;- 1&#xA;while (i &amp;lt; 10) {&#xA;  fnnew &amp;lt;- fn1 + fn2&#xA;  fn2   &amp;lt;- fn1&#xA;  fn1   &amp;lt;- fnnew&#xA;  i     &amp;lt;- i + 1&#xA;}&#xA;fn1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[1] 89&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;# Bytecode implementation&#xA;#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;code &amp;lt;- r&#34;(&#xA;LDCONST 0L&#xA;SETVAR i&#xA;SETVAR fn2&#xA;LDCONST 1L&#xA;SETVAR fn1&#xA;@start &#xA;GETVAR i&#xA;LDCONST 10L&#xA;LT &#xA;BRIFNOT @end&#xA;GETVAR fn1&#xA;GETVAR fn2&#xA;ADD &#xA;SETVAR fnnew&#xA;POP &#xA;GETVAR fn1&#xA;SETVAR fn2&#xA;POP &#xA;GETVAR fnnew&#xA;SETVAR fn1&#xA;POP &#xA;GETVAR i&#xA;LDCONST 1L&#xA;ADD &#xA;SETVAR i&#xA;POP &#xA;GOTO @start&#xA;@end &#xA;GETVAR fn1&#xA;RETURN &#xA;)&#34;&#xA;&#xA;asm(code) |&amp;gt; eval()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[1] 89&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Software&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;{compiler}&lt;/code&gt; package. One of the base R packages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;R Core for developing and maintaining the language.&lt;/li&gt; &#xA; &lt;li&gt;CRAN maintainers, for patiently shepherding packages onto CRAN and maintaining the repository&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>