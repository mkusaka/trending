<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-06T01:31:49Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coolbutuseless/emphatic</title>
    <updated>2024-05-06T01:31:49Z</updated>
    <id>tag:github.com,2024-05-06:/coolbutuseless/emphatic</id>
    <link href="https://github.com/coolbutuseless/emphatic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ANSI colouring of R output&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;emphatic&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/cool-useless-green.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/developing-rapidly-orange.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/coolbutuseless/emphatic/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/coolbutuseless/emphatic/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;{emphatic}&lt;/code&gt; allows for user-defined highlighting of data.frames.&lt;/p&gt; &#xA;&lt;p&gt;This highlighting works&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;in the console&lt;/li&gt; &#xA; &lt;li&gt;rendered to HTML (e.g.&amp;nbsp;in Rmarkdown documents)&lt;/li&gt; &#xA; &lt;li&gt;rendered to latex&lt;/li&gt; &#xA; &lt;li&gt;rendered to &lt;a href=&#34;https://typst.app&#34;&gt;typst&lt;/a&gt; (e.g.&amp;nbsp;in Quarto documents)&lt;/li&gt; &#xA; &lt;li&gt;rendered to SVG and animated SVG&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/examples.gif&#34;&gt; &#xA;&lt;h4&gt;What‚Äôs in the box&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hl()&lt;/code&gt; for user-defined highlighting of data.frames&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hl_diff()&lt;/code&gt; for highlighting differences between two objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hl_grep()&lt;/code&gt; highlight regular expression matches in an object or string&lt;/li&gt; &#xA; &lt;li&gt;Output from &lt;code&gt;hl_*()&lt;/code&gt; functions will automatically be rendered in Rmarkdown and Quarto documents (where the output format is one of html, PDF or typst).&lt;/li&gt; &#xA; &lt;li&gt;The highlighted output can be explicitly converted to other formats using: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;as_html()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;as_svg()&lt;/code&gt; and animated &lt;code&gt;as_svg_anim()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;as_typst()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;write_xlsx()&lt;/code&gt; - Excel document&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;You can install from &lt;a href=&#34;https://github.com/coolbutuseless/emphatic&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#39;remotes&#39;)&#xA;remotes::install_github(&#39;coolbutuseless/emphatic&#39;, ref = &#39;main&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlighting of data.frames with &lt;code&gt;hl()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;specify rows and columns you want to highlight&lt;/li&gt; &#xA; &lt;li&gt;specify a palette &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;a single colour&lt;/li&gt; &#xA;   &lt;li&gt;a vector of colours&lt;/li&gt; &#xA;   &lt;li&gt;a &lt;code&gt;ggplot2&lt;/code&gt; ‚ÄúScale‚Äù object e.g.&amp;nbsp;&lt;code&gt;scale_colour_continuous()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Simple data.frame example&lt;/h4&gt; &#xA;&lt;p&gt;By default, colouring will be applied to all rows and columns, and the supplied vector of colours will be recycled to meet the required length.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars |&amp;gt;&#xA;  head(15) |&amp;gt;&#xA;  hl(c(&#39;red&#39;, &#39;white&#39;, &#39;blue&#39;)) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/example1.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h4&gt;Complex data.frame example&lt;/h4&gt; &#xA;&lt;p&gt;A more complex example showing how to highlight the &lt;code&gt;mtcars&lt;/code&gt; dataset where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Determine the colours using &lt;code&gt;scale_colour_viridis_c()&lt;/code&gt; applied to &lt;code&gt;mpg&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Apply the scale‚Äôs colouring to all columns from &lt;code&gt;mpg&lt;/code&gt; to &lt;code&gt;disp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;highlight the row for the car with the minimum horsepower (&lt;code&gt;hp&lt;/code&gt;) in &lt;code&gt;hotpink&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;hl()&lt;/code&gt; calls are cumulative - you can build up the highlighting you need step-by-step&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars |&amp;gt;&#xA;  head(15) |&amp;gt;&#xA;  hl(&#xA;    palette     = ggplot2::scale_colour_viridis_c(),&#xA;    cols        = mpg,      # Where the colour scale is calculated&#xA;    scale_apply = mpg:disp, # Where the colour scale is applied&#xA;    show_legend = TRUE&#xA;  ) |&amp;gt;&#xA;  hl(&#39;hotpink&#39;, rows = hp == min(hp), cols = hp:carb) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/example2.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Highlight difference between two objects with &lt;code&gt;hl_diff()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The Levenshtein edit distance is calculated between the string representation of two objects and these edits are then coloured üü¢ = insert, üî¥ = delete, üîµ = substitute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- &#34;Paris in the the spring?&#34;&#xA;y &amp;lt;- &#34;Not Paris in the spring!&#34;&#xA;hl_diff(x, y)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/example-strdiff-3.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Levenshtein‚Äôs edit distance naturally applies to strings, but &lt;code&gt;hl_diff()&lt;/code&gt; can visualise the difference between arbitrary objects by first converting them to a string representation. Coercion to a string is controlled by the &lt;code&gt;coerce&lt;/code&gt; argument, and defaults to the output if the objects were &lt;code&gt;print()&lt;/code&gt;ed.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the difference between the &lt;code&gt;mean()&lt;/code&gt; and &lt;code&gt;median()&lt;/code&gt; function definitions is highlighted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hl_diff(mean, median, coerce = &#39;print&#39;, sep = &#34; &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/example-strdiff-4.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Highlight regular expression matches in objects with &lt;code&gt;hl_grep()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;hl_grep()&lt;/code&gt; highlights the regular expression matches within a string or objects coerced into a string representation.&lt;/p&gt; &#xA;&lt;h4&gt;Highlight regular expression matches in a character string&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;txt &amp;lt;- &#34;Among the few possessions he left to his heirs was a set of &#xA;Encyclopedia Britannica in storage at the Lindbergh Palace Hotel under the &#xA;names Ari and Uzi Tenenbaum. No-one spoke at the funeral, and Father &#xA;Petersen&#39;s leg had not yet mended, but it was agreed among them that Royal &#xA;would have found the event to be most satisfactory.&#xA;[Chas, now wearing a black Adidas tracksuit, nods to his sons]&#34;&#xA;&#xA;hl_grep(txt, &#34;event.*satisfactory&#34;, coerce = &#39;character&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/example-hlgrep-1.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h4&gt;Highlight regular expression matches within an object&lt;/h4&gt; &#xA;&lt;p&gt;Other R objects (functions, lists, data.frames, etc) can also be highlighted with regular expressions. How an object is coerced into string representation is controlled by the &lt;code&gt;coerce&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;In this example, the function body for &lt;code&gt;mode()&lt;/code&gt; is searched for the word &lt;code&gt;switch&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;hl_grep(mode, &#39;switch&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/example-hlgrep-2.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;Animated SVG&lt;/h1&gt; &#xA;&lt;p&gt;Multiple &lt;em&gt;emphatic&lt;/em&gt; objects may be rendered to an svg animation using &lt;code&gt;as_svg_anim()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;objs &amp;lt;- list(&#xA;  hl_grep(&#34;hello&#34;, &#34;there&#34;),&#xA;  hl_grep(&#34;goodbye&#34;, &#34;good boy&#34;)&#xA;) &#xA;&#xA;svg &amp;lt;- as_svg_anim(objs, width = 600, height = 300, duration = 2, &#xA;                   playback = &#39;infinite&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/emphatic/main/data-raw/figures/example-svg-anim.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;hl_opts()&lt;/code&gt; create a named list of default options accepted by the functions in this package&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hl_adjust()&lt;/code&gt; to adjust options after creation.&lt;/li&gt; &#xA; &lt;li&gt;These options are initialised at package start time using &lt;code&gt;Sys.getenv()&lt;/code&gt;. Set these values as environment variables in your &lt;code&gt;.Rprofile&lt;/code&gt; to save your preferred settings across different sessions. e.g. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Sys.setenv(HL_NA = &#34;&amp;lt;none&amp;gt;&#34;)&lt;/code&gt; prior to loading package or in &lt;code&gt;.Rprofile&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;options(HL_NA = FALSE)&lt;/code&gt; at any time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Option&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HL_NA&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String to use for NA values. Default ‚ÄúNA‚Äù&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HL_FULL_COLOUR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Should full colour ANSI codes be used when outputting to the console? Default: FALSE on Rstudio, but TRUE on all other R consoles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HL_TEXT_MODE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;How to handle text if no text colour has been explicitly specified by the user&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;contrast&#34;&lt;/code&gt; (default) automatically select a colour which contrasts with the background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;asis&#34;&lt;/code&gt; do not change the colour from the console‚Äôs default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;remove&#34;&lt;/code&gt; remove all text without a user-defined colour&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HL_TEXT_CONTRAST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;When &lt;code&gt;text_mode = &#34;contrast&#34;&lt;/code&gt; this numeric value (in range [0, 1]) adjusts the visibility of the text. Default: 1 (high contrast)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HL_GREP_COL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The fill colour to use with &lt;code&gt;hl_grep()&lt;/code&gt; if no colour is specified. Default: ‚Äú#0F19F0‚Äù&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HL_SUB_COL&lt;/code&gt;, &lt;code&gt;HL_INS_COL&lt;/code&gt;, &lt;code&gt;HL_DEL_COL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;the default colours to use with &lt;code&gt;hl_diff()&lt;/code&gt; for substitution, insertion and deletion (respectively).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Vignettes&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://coolbutuseless.github.io/package/emphatic/index.html&#34;&gt;online documentation&lt;/a&gt; for vignettes and more examples.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coolbutuseless.github.io/package/emphatic/articles/aaa-data-frames.html&#34;&gt;Highlighting data.frames&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Specifying rows, columns and colours &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://coolbutuseless.github.io/package/emphatic/articles/specify-rows.html&#34;&gt;Specifying rows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://coolbutuseless.github.io/package/emphatic/articles/specify-columns.html&#34;&gt;Specifying columns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://coolbutuseless.github.io/package/emphatic/articles/specify-colours.html&#34;&gt;Specifying colours&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Worked Examples &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://coolbutuseless.github.io/package/emphatic/articles/challenger.html&#34;&gt;Space Shuttle O-ring dataset - Challenger Disaster&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TESS-Laboratory/chmloader</title>
    <updated>2024-05-06T01:31:49Z</updated>
    <id>tag:github.com,2024-05-06:/TESS-Laboratory/chmloader</id>
    <link href="https://github.com/TESS-Laboratory/chmloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Download and review 1 m Canopy Height Model data produced by Tolan et al. (2024)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chmloader&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Permian-Global-Research/chmloader/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/Permian-Global-Research/chmloader/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/TESS-Laboratory/chmloader?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/TESS-Laboratory/chmloader/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/license/apache-2-0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of chmloader is to download the Canopy Height Model (CHM) data from this recent work by &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S003442572300439X&#34;&gt;Tolan et al.&amp;nbsp;(2024)&lt;/a&gt;. A high-level summary of this work can be found &lt;a href=&#34;https://sustainability.fb.com/blog/2024/04/22/using-artificial-intelligence-to-map-the-earths-forests/&#34;&gt;here&lt;/a&gt;. The data is downloaded from AWS s3 storage - further details on the bucket can be found &lt;a href=&#34;https://registry.opendata.aws/dataforgood-fb-forests/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install chmloader like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;pak&#34;)&#xA;pak::pkg_install(&#34;TESS-Laboratory/chmloader&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic example which shows you how to download some data. The &lt;code&gt;download_chm&lt;/code&gt; function uses &lt;a href=&#34;https://gdal.org/programs/gdalwarp.html&#34;&gt;gdalwarp&lt;/a&gt; (via &lt;a href=&#34;https://r-spatial.github.io/sf/reference/gdal_utils.html&#34;&gt;&lt;code&gt;sf::gdal_utils&lt;/code&gt;&lt;/a&gt;) to efficiently retrieve only the required data from multiple tiles - the default resolution is 1 m but this can be reprojected as needed using the &lt;code&gt;res&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(chmloader)&#xA;&#xA;parana_cuiana &amp;lt;- sf::st_point(c(-61.89, -4.12)) |&amp;gt;&#xA;  sf::st_sfc(crs = 4326) |&amp;gt;&#xA;  sf::st_buffer(3000)&#xA;&#xA;pc_chm &amp;lt;- download_chm(&#xA;  parana_cuiana,&#xA;  filename = tempfile(fileext = &#34;.tif&#34;)&#xA;)&#xA;terra::plot(pc_chm, col = hcl.colors(256, &#34;viridis&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/TESS-Laboratory/chmloader/main/man/figures/README-example-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;This package also provides a simple function to create plots for comparing different CHMs. The intention of this function is to enable simple and robust evaluation of the Tolan et al.&amp;nbsp;(2024) CHM data with LiDAR-based models and other ML-derived products. The chmloader package comes with a small set of LiDAR-based CHM example datasets, derived from the English Environment Agency‚Äôs &lt;a href=&#34;https://www.data.gov.uk/dataset/227ab487-e8f2-4cbb-b26a-9e6d3b662265/lidar-vegetation-object-model-vom&#34;&gt;Vegetation Object Model dataset&lt;/a&gt; Below is an example using one of these example datasets from Fingle Woods, Devon, UK:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fingle_woods &amp;lt;- reference_data(&#34;fingle_woods&#34;)&#xA;&#xA;compare_models(fingle_woods, aggregate = 10, drop_zeros = TRUE)&#xA;#&amp;gt; ‚Ñπ meta/WRI CHM not provided, downloading now...&#xA;#&amp;gt; ‚úî CHM downloaded successfully!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TESS-Laboratory/chmloader/main/man/figures/README-example2-1.png&#34; width=&#34;100%&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TESS-Laboratory/chmloader/main/man/figures/README-example2-2.png&#34; width=&#34;100%&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note in this example, the &lt;code&gt;aggregate&lt;/code&gt; argument is used to reduce the resolution of both the reference and Meta/WRI CHM by a factor of 10 (resulting in a 10 m model) and test both this coarser scale model in addition to the original 1 m model. This functionality may help to reveal what the true resolution of the Meta/WRI CHM is, and how it compares to the LiDAR-based model across scales.&lt;/p&gt; &#xA;&lt;p&gt;Also, the &lt;code&gt;drop_zeros&lt;/code&gt; argument is used to remove zero values from the both the 2d density plot and the derived statistics, where values from the reference/benchmark data and the Meta/WRI CHM are both zero. This is particularly useful where the main interest is to evaluate the tree canopy rather than the absence of trees and/or where tree cover is sparse; however, the default &lt;code&gt;drop_zeros&lt;/code&gt; value is &lt;code&gt;FALSE&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jasongullifer/sent2wordbyword</title>
    <updated>2024-05-06T01:31:49Z</updated>
    <id>tag:github.com,2024-05-06:/jasongullifer/sent2wordbyword</id>
    <link href="https://github.com/jasongullifer/sent2wordbyword" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;sent2wordbyword.R&lt;/p&gt; &#xA;&lt;p&gt;This R function will take an input file that contains a data frame that includes full sentences in one column, associated target words in another column, and any number of other associated columns. The sentences are split into separate columns by word, and the target word of the sentence is placed in its own target column. This segmenting is useful for rapid serial visual presentation or self- paced reading experiments.&lt;/p&gt;</summary>
  </entry>
</feed>