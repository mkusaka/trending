<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-15T01:37:24Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thomasp85/gganimate</title>
    <updated>2022-11-15T01:37:24Z</updated>
    <id>tag:github.com,2022-11-15:/thomasp85/gganimate</id>
    <link href="https://github.com/thomasp85/gganimate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Grammar of Animated Graphics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gganimate &lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/gganimate/main/man/figures/logo.png&#34; align=&#34;right&#34; style=&#34;padding-left:10px;background-color:white;&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thomasp85/gganimate/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/thomasp85/gganimate/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=gganimate&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version-ago/gganimate&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=gganimate&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/gganimate&#34; alt=&#34;CRAN_Download_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/thomasp85/gganimate?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/thomasp85/gganimate/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;gganimate&lt;/code&gt; extends the grammar of graphics as implemented by &lt;a href=&#34;https://github.com/tidyverse/ggplot2&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt; to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;transition_*()&lt;/code&gt; defines how the data should be spread out and how it relates to itself across time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;view_*()&lt;/code&gt; defines how the positional scales should change along the animation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shadow_*()&lt;/code&gt; defines how data from other points in time should be presented in the given point in time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enter_*()&lt;/code&gt;/&lt;code&gt;exit_*()&lt;/code&gt; defines how new data should appear and how old data should disappear during the course of the animation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ease_aes()&lt;/code&gt; defines how different aesthetics should be eased during transitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;An Example&lt;/h2&gt; &#xA;&lt;p&gt;All of the above might seem a bit abstract. Let’s try with a contrived example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;library(gganimate)&#xA;&#xA;ggplot(mtcars, aes(factor(cyl), mpg)) + &#xA;  geom_boxplot() + &#xA;  # Here comes the gganimate code&#xA;  transition_states(&#xA;    gear,&#xA;    transition_length = 2,&#xA;    state_length = 1&#xA;  ) +&#xA;  enter_fade() + &#xA;  exit_shrink() +&#xA;  ease_aes(&#39;sine-in-out&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/gganimate/main/man/figures/README-unnamed-chunk-2-1.gif&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here we take a simple boxplot of fuel consumption as a function of cylinders and lets it transition between the number of gears available in the cars. As this is a discrete split (&lt;code&gt;gear&lt;/code&gt; being best described as an ordered factor) we use &lt;code&gt;transition_states&lt;/code&gt; and provides a relative length to use for transition and state view. As not all combinations of data is present there are states missing a box. We define that when a box appears it should fade into view, whereas at should shrink away when it disappear. Lastly we decide to use a sinusoidal easing for all our aesthetics (here, only &lt;code&gt;y&lt;/code&gt; is changing)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;gganimate&lt;/code&gt; is available on CRAN and can be installed with &lt;code&gt;install.packages(&#39;gganimate&#39;)&lt;/code&gt;. If you wish to install the development version you can install directly from github using devtools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#39;devtools&#39;)&#xA;devtools::install_github(&#39;thomasp85/gganimate&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Yet Another Example&lt;/h2&gt; &#xA;&lt;p&gt;It is impossible to cover everything possible with &lt;code&gt;gganimate&lt;/code&gt; in a README, but animations are fun, so let’s at least have one more:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(gapminder)&#xA;&#xA;ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +&#xA;  geom_point(alpha = 0.7, show.legend = FALSE) +&#xA;  scale_colour_manual(values = country_colors) +&#xA;  scale_size(range = c(2, 12)) +&#xA;  scale_x_log10() +&#xA;  facet_wrap(~continent) +&#xA;  # Here comes the gganimate specific bits&#xA;  labs(title = &#39;Year: {frame_time}&#39;, x = &#39;GDP per capita&#39;, y = &#39;life expectancy&#39;) +&#xA;  transition_time(year) +&#xA;  ease_aes(&#39;linear&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/gganimate/main/man/figures/README-unnamed-chunk-4-1.gif&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;In this example we see the use of &lt;code&gt;transition_time()&lt;/code&gt; which can be used with continuous variables such as &lt;code&gt;year&lt;/code&gt;. With this transition it is not necessary to provide transition and state length as the “transition variable” provides this directly (e.g.&amp;nbsp;it should take twice as long to transition between 1980 and 1990 compared to 2000 to 2005). We also see the use of string literal interpolation in titles. &lt;code&gt;gganimate&lt;/code&gt; lets you specify variables to evaluate inside titles and different transitions provide different type of information to use.&lt;/p&gt; &#xA;&lt;h2&gt;Where is my animation?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;gganimate&lt;/code&gt; mimics the way &lt;code&gt;ggplot2&lt;/code&gt; renders its output, in that the rendering is done automatically when the &lt;code&gt;gganim&lt;/code&gt; object is printed. Under the hood, the &lt;code&gt;animate()&lt;/code&gt; function is called which renders the frame and passes the frames to a renderer functions which takes care of combining them to the final animation. The default renderer is &lt;code&gt;gifski_renderer()&lt;/code&gt; which returns a &lt;code&gt;gif_image&lt;/code&gt; object which is a simple wrapper around a path to a gif file. If &lt;code&gt;animate()&lt;/code&gt; has been called implicitly as part of &lt;code&gt;print&lt;/code&gt; the &lt;code&gt;gif_image&lt;/code&gt; object is available using the &lt;code&gt;last_animation()&lt;/code&gt; function (analogous to &lt;code&gt;ggplot2::last_plot()&lt;/code&gt;). In order to save the animation to a specific location, you can use the &lt;code&gt;anim_save()&lt;/code&gt; function which, like &lt;code&gt;ggplot2::ggsave&lt;/code&gt;, defaults to taking the last rendered animation and writes it to a file.&lt;/p&gt; &#xA;&lt;h2&gt;I don’t like gifs…&lt;/h2&gt; &#xA;&lt;p&gt;gif is a fantastic format for animations due to its wide support, but sometimes another format is required. &lt;code&gt;gganimate&lt;/code&gt; is agnostic to the renderer and while the default is to use &lt;a href=&#34;https://github.com/r-rust/gifski&#34;&gt;gifski&lt;/a&gt; to combine the frames into a gif, it doesn’t have to be so. By passing an alternate renderer to the &lt;code&gt;animate()&lt;/code&gt; function you can control the animation format, and &lt;code&gt;gganimate&lt;/code&gt; comes with a bunch (and you can write your own). To create video files you can e.g.&amp;nbsp;use the &lt;code&gt;ffmpeg_renderer()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- ggplot(airquality, aes(Day, Temp)) + &#xA;  geom_line(size = 2, colour = &#39;steelblue&#39;) + &#xA;  transition_states(Month, 4, 1) + &#xA;  shadow_mark(size = 1, colour = &#39;grey&#39;)&#xA;animate(p, renderer = ffmpeg_renderer())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Video output are automatically embedded in RMarkdown documents, but GitHub strips video when rendering READMEs so you can’t see it here&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Further there’s support for rendering to sprite sheets if that is your vice.&lt;/p&gt; &#xA;&lt;h2&gt;Old API&lt;/h2&gt; &#xA;&lt;p&gt;This is the second iteration of the gganimate package. The first, developed by &lt;a href=&#34;https://github.com/dgrtwo&#34;&gt;David Robinson&lt;/a&gt; had a very different API, and relied on specifying animation frame membership inside &lt;code&gt;aes()&lt;/code&gt; blocks in the &lt;code&gt;geom_*()&lt;/code&gt; calls. This approach was easy to grasp, but essentially limited in capabilities and has thus been abandoned for a more thorough grammar.&lt;/p&gt; &#xA;&lt;p&gt;Code written for the old API will not work with this &lt;code&gt;gganimate&lt;/code&gt; version and there will not come a future support for it. If you wish to continue using the old API then avoid upgrading &lt;code&gt;gganimate&lt;/code&gt;. If you’ve already upgraded and wish to downgrade, the latest version of the old API is available as a &lt;a href=&#34;https://github.com/thomasp85/gganimate/releases/tag/v0.1.1&#34;&gt;GitHub release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to convert your old animations to the new API, the closest you get is probably with &lt;code&gt;transition_manual&lt;/code&gt;, even though it is not completely substitutable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Old code&#xA;ggplot(mtcars) + &#xA;  geom_boxplot(aes(factor(cyl), mpg, frame = gear))&#xA;&#xA;# New code&#xA;ggplot(mtcars) + &#xA;  geom_boxplot(aes(factor(cyl), mpg)) + &#xA;  transition_manual(gear)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>