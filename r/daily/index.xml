<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-30T01:38:38Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>thebioengineer/camcorder</title>
    <updated>2022-08-30T01:38:38Z</updated>
    <id>tag:github.com,2022-08-30:/thebioengineer/camcorder</id>
    <link href="https://github.com/thebioengineer/camcorder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Record plots generated during an R session and replay as a gif!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;camcorder &lt;img src=&#34;https://raw.githubusercontent.com/thebioengineer/camcorder/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;200&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.codecov.io/gh/thebioengineer/camcorder?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/thebioengineer/camcorder/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/thebioengineer/camcorder/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/thebioengineer/camcorder/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal for {camcorder} is to track and record the ggplots that are created across one or multiple sessions with the eventual goal of creating a gif showing all the plots created sequentially.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Currently {camcorder} is only available on github, and can be installed using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;camcorder&#34;)&#xA;remotes::install_github(&#34;thebioengineer/camcorder&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;End Product&lt;/h2&gt; &#xA;&lt;p&gt;The idea of tracking your plots as part of your development process and generating a gif/movie was popularized by two contributors to this project: Georgios Karamanis and Cédric Scherer. They have wowed the R community weekly with their &#34;how its made&#34; videos. Below are a few examples of the goal end products.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;p&gt; Cédric Scherer, TidyTuesday 2020/28 &lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/thebioengineer/camcorder/main/inst/gif_samples/cscherer_coffee_ratings.gif&#34; height=&#34;350&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p&gt; Georgios Karamanis, TidyTuesday 2020/15 &lt;/p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/thebioengineer/camcorder/main/inst/gif_samples/gkaramanis_tour_de_france.gif&#34; height=&#34;350&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How To&lt;/h2&gt; &#xA;&lt;p&gt;To get started, load {camcorder} and initialize recording using the &lt;code&gt;gg_record()&lt;/code&gt; function. This function has several options, such as where to save the recordings, device to use to save the recordings, and the height/width of the image to create. By default it will save to a temporary directory so recordings will go away once the rsession is closed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;library(ggplot2)&#xA;library(camcorder)&#xA;&#xA;gg_record(&#xA;  dir = file.path(tempdir(),&#34;recording&#34;), # where to save the recording&#xA;  device = &#34;png&#34;, # device to use to save images&#xA;  width = 4, # width of saved image&#xA;  height = 6, # height of saved image&#xA;  units = &#34;in&#34;, # units for width and height&#xA;  dpi = 300 # dpi to use when saving image&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the recorder is initialized, any ggplot that is made and printed will be automagically recorded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;&#xA;ggplot(mtcars) +&#xA;  geom_point(aes(x = mpg, y = hp))&#xA;&#xA;ggplot(mtcars) + &#xA;  geom_point(aes(x = mpg, y = hp, shape = as.factor(gear)))&#xA;&#xA;ggplot(mtcars) + &#xA;  geom_point(aes(x = mpg, y = hp, color = gear))&#xA;&#xA;ggplot(mtcars) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear)) +&#xA;  geom_smooth(aes(x = mpg, y = hp))&#xA;&#xA;ggplot(mtcars) +&#xA;  geom_smooth(aes(x = mpg, y = hp)) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear))&#xA;&#xA;ggplot(mtcars) + &#xA;  geom_smooth(aes(x = mpg, y = hp)) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear)) +&#xA;  theme_light()&#xA;&#xA;ggplot(mtcars) + &#xA;  geom_smooth(aes(x = mpg, y = hp)) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear)) +&#xA;  theme_light()+&#xA;  ggtitle(&#34;MPG vs Horse Power!&#34;)&#xA;&#xA;ggplot(mtcars) + &#xA;  geom_smooth(aes(x = mpg, y = hp)) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear)) +&#xA;  theme_light()+&#xA;  ggtitle(&#34;MPG vs Horse Power!&#34;)+&#xA;  labs(subtitle = &#34;Power and economy, the classic compromise!&#34;)&#xA;&#xA;ggplot(mtcars) + &#xA;  geom_smooth(aes(x = mpg, y = hp)) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear)) +&#xA;  theme_light()+&#xA;  ggtitle(&#34;MPG vs Horse Power!&#34;)+&#xA;  labs(&#xA;    subtitle = &#34;Power and economy, the classic compromise!&#34;, &#xA;    x = &#34;Efficiency (Miles/Gallon)&#34;,&#xA;    y = &#34;Power (Horsepower)&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If at any point, that you want to save your plots in a different format than what the recorder was initialized with this can be done through the &lt;code&gt;gg_resize_film()&lt;/code&gt; function. This will set the size and dpi of all plots going forward.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;&#xA;gg_resize_film(&#xA;  height = 4,&#xA;  width = 6,&#xA;  units = &#34;in&#34;,&#xA;  dpi = 350&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;&#xA;ggplot(mtcars) + &#xA;  geom_smooth(aes(x = mpg, y = hp)) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear)) +&#xA;  theme_light()+&#xA;  ggtitle(&#34;MPG vs Horse Power!&#34;)+&#xA;  labs(&#xA;    subtitle = &#34;Power and economy, the classic compromise!&#34;, &#xA;    x = &#34;Efficiency (Miles/Gallon)&#34;,&#xA;    y = &#34;Power (Horsepower)&#34;) +&#xA;  theme(&#xA;    legend.position = &#34;bottom&#34;,&#xA;    panel.background = element_rect(colour = &#34;green&#34;)&#xA;  )&#xA;&#xA;ggplot(mtcars) + &#xA;  geom_smooth(aes(x = mpg, y = hp)) +&#xA;  geom_point(aes(x = mpg, y = hp, color = gear)) +&#xA;  theme_light()+&#xA;  ggtitle(&#34;MPG vs Horse Power!&#34;)+&#xA;  labs(&#xA;    subtitle = &#34;Power and economy, the classic compromise!&#34;, &#xA;    x = &#34;Efficiency (Miles/Gallon)&#34;,&#xA;    y = &#34;Power (Horsepower)&#34;) +&#xA;  theme(&#xA;    legend.position = &#34;bottom&#34;,&#xA;    panel.background = element_rect(colour = &#34;green&#34;,fill = &#34;green&#34;)&#xA;  )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to generate the final gif, use the &lt;code&gt;gg_playback()&lt;/code&gt; function. The user can define:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;where the final gif gets saved by setting the &lt;code&gt;name&lt;/code&gt; argument,&lt;/li&gt; &#xA; &lt;li&gt;duration of the first and last images with &lt;code&gt;first_image_duration&lt;/code&gt; or &lt;code&gt;last_image_duration&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;delay between frames in seconds with &lt;code&gt;frame_duration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;&#xA;gg_playback(&#xA;  name = file.path(tempdir(),&#34;recording&#34;,&#34;vignette_gif.gif&#34;),&#xA;  first_image_duration = 8,&#xA;  last_image_duration = 12,&#xA;  frame_duration = .25&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once rendering is complete, a gif is opened in your viewer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thebioengineer/camcorder/main/vignettes/vignette_gif.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BIFX552-22/BIFXproject</title>
    <updated>2022-08-30T01:38:38Z</updated>
    <id>tag:github.com,2022-08-30:/BIFX552-22/BIFXproject</id>
    <link href="https://github.com/BIFX552-22/BIFXproject" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Welcome to my project.&lt;/p&gt;</summary>
  </entry>
</feed>