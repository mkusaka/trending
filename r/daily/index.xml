<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:38:47Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mlr-org/mlr3</title>
    <updated>2022-11-01T01:38:47Z</updated>
    <id>tag:github.com,2022-11-01:/mlr-org/mlr3</id>
    <link href="https://github.com/mlr-org/mlr3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mlr3: Machine Learning in R - next generation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mlr3 &lt;img src=&#34;https://raw.githubusercontent.com/mlr-org/mlr3/main/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;120&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Package website: &lt;a href=&#34;https://mlr3.mlr-org.com/&#34;&gt;release&lt;/a&gt; | &lt;a href=&#34;https://mlr3.mlr-org.com/dev/&#34;&gt;dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Efficient, object-oriented programming on the building blocks of machine learning. Successor of &lt;a href=&#34;https://github.com/mlr-org/mlr&#34;&gt;mlr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr3/actions&#34;&gt;&lt;img src=&#34;https://github.com/mlr-org/mlr3/workflows/tic/badge.svg?branch=main&#34; alt=&#34;tic&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.21105/joss.01903&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.01903/status.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=mlr3&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version-ago/mlr3&#34; alt=&#34;CRAN Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/questions/tagged/mlr3&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-mlr3-orange.svg?sanitize=true&#34; alt=&#34;StackOverflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lmmisld-lmu-stats-slds.srv.mwn.de/mlr_invite/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-mattermost-orange.svg?sanitize=true&#34; alt=&#34;Mattermost&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Resources (for users and developers)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We &lt;em&gt;started&lt;/em&gt; writing a &lt;a href=&#34;https://mlr3book.mlr-org.com/&#34;&gt;book&lt;/a&gt;. This should be the central entry point to the package.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://mlr3gallery.mlr-org.com&#34;&gt;mlr3gallery&lt;/a&gt; has some case studies and demonstrates how frequently occurring problems can be solved. It is still in early days so stay tuned for more to come.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlr3.mlr-org.com/reference/&#34;&gt;Reference manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ask questions on &lt;a href=&#34;https://stackoverflow.com/questions/tagged/mlr3&#34;&gt;Stackoverflow (tag #mlr3)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extension Learners&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommended core regression, classification, and survival learners are in &lt;a href=&#34;https://github.com/mlr-org/mlr3learners&#34;&gt;mlr3learners&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;All others are in &lt;a href=&#34;https://github.com/mlr-org/mlr3extralearners&#34;&gt;mlr3extralearners&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use the &lt;a href=&#34;https://mlr3extralearners.mlr-org.com/articles/learners/list_learners.html&#34;&gt;learner search&lt;/a&gt; to get a simple overview&lt;/li&gt; &#xA;   &lt;li&gt;Use the &lt;a href=&#34;https://mlr3extralearners.mlr-org.com/articles/learners/test_overview.html&#34;&gt;learner status&lt;/a&gt; to see their build status&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cheatsheets&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cheatsheets.mlr-org.com&#34;&gt;Overview of cheatsheets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cheatsheets.mlr-org.com/mlr3.pdf&#34;&gt;mlr3&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cheatsheets.mlr-org.com/mlr3tuning.pdf&#34;&gt;mlr3tuning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cheatsheets.mlr-org.com/mlr3pipelines.pdf&#34;&gt;mlr3pipelines&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Videos&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wsP2hiFnDQs&#34;&gt;useR2019 talk on mlr3&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gEW5RxkbQuQ&#34;&gt;useR2019 talk on mlr3pipelines and mlr3tuning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=T43hO2o_nZw&#34;&gt;useR2020 tutorial on mlr3, mlr3tuning and mlr3pipelines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://av.tib.eu/media/55271&#34;&gt;Recorded talk about mlr3spatiotempcv and mlr3spatial at OpenDataScience Europe Conference 2021 in Wageningen, NL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Courses/Lectures&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The course &lt;a href=&#34;https://introduction-to-machine-learning.netlify.app/&#34;&gt;Introduction to Machine learning (I2ML)&lt;/a&gt; is a free and open flipped classroom course on the basics of machine learning. &lt;code&gt;mlr3&lt;/code&gt; is used in the &lt;a href=&#34;https://github.com/slds-lmu/lecture_i2ml/tree/master/code-demos-pdf&#34;&gt;demos&lt;/a&gt; and &lt;a href=&#34;https://github.com/slds-lmu/lecture_i2ml/tree/master/exercises&#34;&gt;exercises&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Templates/Tutorials&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr3-targets&#34;&gt;mlr3-targets&lt;/a&gt;: Tutorial showcasing how to use {mlr3} with &lt;a href=&#34;https://docs.ropensci.org/targets/&#34;&gt;targets&lt;/a&gt; for reproducible ML workflow automation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/Extension-Packages&#34;&gt;List of extension packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr-outreach&#34;&gt;mlr-outreach&lt;/a&gt; contains public talks and slides resources.&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://mlr-org.com/&#34;&gt;blog&lt;/a&gt; about &lt;em&gt;mlr&lt;/em&gt; and &lt;em&gt;mlr3&lt;/em&gt;. (We are not the most frequent bloggers ;) )&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki&#34;&gt;Wiki&lt;/a&gt;: Contains mainly information for developers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the last release from CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;mlr3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the development version from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;mlr-org/mlr3&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to get started with &lt;code&gt;mlr3&lt;/code&gt;, we recommend installing the &lt;a href=&#34;https://mlr3verse.mlr-org.com/&#34;&gt;mlr3verse&lt;/a&gt; meta-package which installs &lt;code&gt;mlr3&lt;/code&gt; and some of the most important extension packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;mlr3verse&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h3&gt;Constructing Learners and Tasks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(mlr3)&#xA;&#xA;# create learning task&#xA;task_penguins = as_task_classif(species ~ ., data = palmerpenguins::penguins)&#xA;task_penguins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## &amp;lt;TaskClassif:palmerpenguins::penguins&amp;gt; (344 x 8)&#xA;## * Target: species&#xA;## * Properties: multiclass&#xA;## * Features (7):&#xA;##   - int (3): body_mass_g, flipper_length_mm, year&#xA;##   - dbl (2): bill_depth_mm, bill_length_mm&#xA;##   - fct (2): island, sex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# load learner and set hyperparameter&#xA;learner = lrn(&#34;classif.rpart&#34;, cp = .01)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic train + predict&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# train/test split&#xA;split = partition(task_penguins, ratio = 0.67)&#xA;&#xA;# train the model&#xA;learner$train(task_penguins, split$train_set)&#xA;&#xA;# predict data&#xA;prediction = learner$predict(task_penguins, split$test_set)&#xA;&#xA;# calculate performance&#xA;prediction$confusion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##            truth&#xA;## response    Adelie Chinstrap Gentoo&#xA;##   Adelie       146         5      0&#xA;##   Chinstrap      6        63      1&#xA;##   Gentoo         0         0    123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;measure = msr(&#34;classif.acc&#34;)&#xA;prediction$score(measure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## classif.acc &#xA;##   0.9651163&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resample&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# 3-fold cross validation&#xA;resampling = rsmp(&#34;cv&#34;, folds = 3L)&#xA;&#xA;# run experiments&#xA;rr = resample(task_penguins, learner, resampling)&#xA;&#xA;# access results&#xA;rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##                     task_id    learner_id iteration classif.acc&#xA;## 1: palmerpenguins::penguins classif.rpart         1   0.9391304&#xA;## 2: palmerpenguins::penguins classif.rpart         2   0.9478261&#xA;## 3: palmerpenguins::penguins classif.rpart         3   0.9298246&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rr$aggregate(measure)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## classif.acc &#xA;##    0.938927&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extension Packages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlr-org/mlr3/main/man/figures/mlr3verse.svg?sanitize=true&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlr-org/mlr3/main/man/figures/mlr3verse.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Consult the &lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/Extension-Packages&#34;&gt;wiki&lt;/a&gt; for short descriptions and links to the respective repositories.&lt;/p&gt; &#xA;&lt;p&gt;For beginners, we strongly recommend to install and load the &lt;a href=&#34;https://mlr3verse.mlr-org.com/&#34;&gt;mlr3verse&lt;/a&gt; package for a better user experience.&lt;/p&gt; &#xA;&lt;h2&gt;Why a rewrite?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr&#34;&gt;mlr&lt;/a&gt; was first released to &lt;a href=&#34;https://cran.r-project.org/package=mlr&#34;&gt;CRAN&lt;/a&gt; in 2013. Its core design and architecture date back even further. The addition of many features has led to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Feature_creep&#34;&gt;feature creep&lt;/a&gt; which makes &lt;a href=&#34;https://github.com/mlr-org/mlr&#34;&gt;mlr&lt;/a&gt; hard to maintain and hard to extend. We also think that while mlr was nicely extensible in some parts (learners, measures, etc.), other parts were less easy to extend from the outside. Also, many helpful R libraries did not exist at the time &lt;a href=&#34;https://github.com/mlr-org/mlr&#34;&gt;mlr&lt;/a&gt; was created, and their inclusion would result in non-trivial API changes.&lt;/p&gt; &#xA;&lt;h2&gt;Design principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only the basic building blocks for machine learning are implemented in this package.&lt;/li&gt; &#xA; &lt;li&gt;Focus on computation here. No visualization or other stuff. That can go in extra packages.&lt;/li&gt; &#xA; &lt;li&gt;Overcome the limitations of R’s &lt;a href=&#34;https://adv-r.hadley.nz/s3.html&#34;&gt;S3 classes&lt;/a&gt; with the help of &lt;a href=&#34;https://cran.r-project.org/package=R6&#34;&gt;R6&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Embrace &lt;a href=&#34;https://cran.r-project.org/package=R6&#34;&gt;R6&lt;/a&gt; for a clean OO-design, object state-changes and reference semantics. This might be less “traditional R”, but seems to fit &lt;code&gt;mlr&lt;/code&gt; nicely.&lt;/li&gt; &#xA; &lt;li&gt;Embrace &lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt; for fast and convenient data frame computations.&lt;/li&gt; &#xA; &lt;li&gt;Combine &lt;code&gt;data.table&lt;/code&gt; and &lt;code&gt;R6&lt;/code&gt;, for this we will make heavy use of list columns in data.tables.&lt;/li&gt; &#xA; &lt;li&gt;Defensive programming and type safety. All user input is checked with &lt;a href=&#34;https://cran.r-project.org/package=checkmate&#34;&gt;&lt;code&gt;checkmate&lt;/code&gt;&lt;/a&gt;. Return types are documented, and mechanisms popular in base R which “simplify” the result unpredictably (e.g., &lt;code&gt;sapply()&lt;/code&gt; or &lt;code&gt;drop&lt;/code&gt; argument in &lt;code&gt;[.data.frame&lt;/code&gt;) are avoided.&lt;/li&gt; &#xA; &lt;li&gt;Be light on dependencies. &lt;code&gt;mlr3&lt;/code&gt; requires the following packages at runtime: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=parallelly&#34;&gt;&lt;code&gt;parallelly&lt;/code&gt;&lt;/a&gt;: Helper functions for parallelization. No extra recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=future.apply&#34;&gt;&lt;code&gt;future.apply&lt;/code&gt;&lt;/a&gt;: Resampling and benchmarking is parallelized with the &lt;a href=&#34;https://cran.r-project.org/package=future&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt; abstraction interfacing many parallel backends.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=backports&#34;&gt;&lt;code&gt;backports&lt;/code&gt;&lt;/a&gt;: Ensures backward compatibility with older R releases. Developed by members of the &lt;code&gt;mlr&lt;/code&gt; team. No recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=checkmate&#34;&gt;&lt;code&gt;checkmate&lt;/code&gt;&lt;/a&gt;: Fast argument checks. Developed by members of the &lt;code&gt;mlr&lt;/code&gt; team. No extra recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=mlr3misc&#34;&gt;&lt;code&gt;mlr3misc&lt;/code&gt;&lt;/a&gt;: Miscellaneous functions used in multiple mlr3 &lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/Extension-Packages&#34;&gt;extension packages&lt;/a&gt;. Developed by the &lt;code&gt;mlr&lt;/code&gt; team.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=paradox&#34;&gt;&lt;code&gt;paradox&lt;/code&gt;&lt;/a&gt;: Descriptions for parameters and parameter sets. Developed by the &lt;code&gt;mlr&lt;/code&gt; team. No extra recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=R6&#34;&gt;&lt;code&gt;R6&lt;/code&gt;&lt;/a&gt;: Reference class objects. No recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt;: Extension of R’s &lt;code&gt;data.frame&lt;/code&gt;. No recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=digest&#34;&gt;&lt;code&gt;digest&lt;/code&gt;&lt;/a&gt; (via &lt;code&gt;mlr3misc&lt;/code&gt;): Hash digests. No recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=uuid&#34;&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/a&gt;: Create unique string identifiers. No recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=lgr&#34;&gt;&lt;code&gt;lgr&lt;/code&gt;&lt;/a&gt;: Logging facility. No extra recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=mlr3measures&#34;&gt;&lt;code&gt;mlr3measures&lt;/code&gt;&lt;/a&gt;: Performance measures. No extra recursive dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=mlbench&#34;&gt;&lt;code&gt;mlbench&lt;/code&gt;&lt;/a&gt;: A collection of machine learning data sets. No dependencies.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=palmerpenguins&#34;&gt;&lt;code&gt;palmerpenguins&lt;/code&gt;&lt;/a&gt;: A classification data set about penguins, used on examples and provided as a toy task. No dependencies.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29&#34;&gt;Reflections&lt;/a&gt;: Objects are queryable for properties and capabilities, allowing you to program on them.&lt;/li&gt; &#xA; &lt;li&gt;Additional functionality that comes with extra dependencies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To capture output, warnings and exceptions, &lt;a href=&#34;https://cran.r-project.org/package=evaluate&#34;&gt;&lt;code&gt;evaluate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/package=callr&#34;&gt;&lt;code&gt;callr&lt;/code&gt;&lt;/a&gt; can be used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to mlr3&lt;/h2&gt; &#xA;&lt;p&gt;This R package is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/lgpl-3.0.en.html&#34;&gt;LGPL-3&lt;/a&gt;. If you encounter problems using this software (lack of documentation, misleading or wrong documentation, unexpected behavior, bugs, …) or just want to suggest features, please open an issue in the &lt;a href=&#34;https://github.com/mlr-org/mlr3/issues&#34;&gt;issue tracker&lt;/a&gt;. Pull requests are welcome and will be included at the discretion of the maintainers.&lt;/p&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/&#34;&gt;wiki&lt;/a&gt; for a &lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/Style-Guide&#34;&gt;style guide&lt;/a&gt;, a &lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/Roxygen-Guide&#34;&gt;roxygen guide&lt;/a&gt; and a &lt;a href=&#34;https://github.com/mlr-org/mlr3/wiki/PR-Guidelines&#34;&gt;pull request guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citing mlr3&lt;/h2&gt; &#xA;&lt;p&gt;If you use mlr3, please cite our &lt;a href=&#34;https://doi.org/10.21105/joss.01903&#34;&gt;JOSS article&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Article{mlr3,&#xA;  title = {{mlr3}: A modern object-oriented machine learning framework in {R}},&#xA;  author = {Michel Lang and Martin Binder and Jakob Richter and Patrick Schratz and Florian Pfisterer and Stefan Coors and Quay Au and Giuseppe Casalicchio and Lars Kotthoff and Bernd Bischl},&#xA;  journal = {Journal of Open Source Software},&#xA;  year = {2019},&#xA;  month = {dec},&#xA;  doi = {10.21105/joss.01903},&#xA;  url = {https://joss.theoj.org/papers/10.21105/joss.01903},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>r-lib/styler</title>
    <updated>2022-11-01T01:38:47Z</updated>
    <id>tag:github.com,2022-11-01:/r-lib/styler</id>
    <link href="https://github.com/r-lib/styler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Non-invasive pretty printing of R code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;styler&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/styler/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-lib/styler/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;Life cycle: stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-lib/styler&#34;&gt;&lt;img src=&#34;https://app.codecov.io/gh/r-lib/styler/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=styler&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/styler&#34; alt=&#34;CRAN Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;styler formats your code according to the &lt;a href=&#34;https://style.tidyverse.org&#34;&gt;tidyverse style guide&lt;/a&gt; (or your custom style guide) so you can direct your attention to the content of your code. It helps to keep the coding style consistent across projects and facilitate collaboration. You can access styler through&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the RStudio Addin as demonstrated below&lt;/li&gt; &#xA; &lt;li&gt;R functions like &lt;code&gt;style_pkg()&lt;/code&gt;, &lt;code&gt;style_file()&lt;/code&gt; or &lt;code&gt;style_text()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;various other tools described in &lt;code&gt;vignette(&#34;third-party-integrations&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lorenzwalthert/some_raw_data/master/styler_0.1.gif&#34; width=&#34;650px&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package from CRAN.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;styler&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or get the development version from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;r-lib/styler&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The following online docs are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://styler.r-lib.org&#34;&gt;latest CRAN release&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://styler.r-lib.org/dev/&#34;&gt;GitHub development version&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>statisfactions/simpr</title>
    <updated>2022-11-01T01:38:47Z</updated>
    <id>tag:github.com,2022-11-01:/statisfactions/simpr</id>
    <link href="https://github.com/statisfactions/simpr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tidyverse-friendly simulations and power analysis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://statisfactions.github.io/simpr/&#34;&gt;simpr&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;simpr&lt;/code&gt; provides a general, simple, and tidyverse-friendly framework for generating simulated data, fitting models on simulations, and tidying model results. The full workflow can happen in a single tidy pipeline without creating external functions, global values, or using loops. It’s useful for power analysis, design analysis, simulation studies, and for teaching statistics.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://statisfactions.github.io/simpr/articles/simpr.html&#34;&gt;&lt;strong&gt;Easily readable simulation specifications.&lt;/strong&gt;&lt;/a&gt; You can specify simulations in a few lines, including referring to other simulation variables and to simulation parameters that you’re varying (such as sample size). &lt;code&gt;simpr&lt;/code&gt; takes care of all the details of generating your simulation across varying parameters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://statisfactions.github.io/simpr/articles/simulation-errors.html&#34;&gt;&lt;strong&gt;Sensibly handle errors.&lt;/strong&gt;&lt;/a&gt; &lt;code&gt;simpr&lt;/code&gt; has various options to keep going even when simulation or model-fitting hits errors, so that you don’t need to start over if a single iteration hits fatal numerical issues.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://statisfactions.github.io/simpr/articles/reproducibility.html&#34;&gt;&lt;strong&gt;Reproducible workflows.&lt;/strong&gt;&lt;/a&gt; Individual simulations can be reproduced exactly without needed to perform the whole simulation again.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://statisfactions.github.io/simpr/articles/optimization.html&#34;&gt;&lt;strong&gt;Easy-to-use parallel processing.&lt;/strong&gt;&lt;/a&gt; Building on &lt;code&gt;furrr&lt;/code&gt;, parallel processing for &lt;code&gt;simpr&lt;/code&gt; can usually be turned on with a couple lines of code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The hardest part of any simulation is designing the data-generating process and deciding what values of parameters you want to explore. &lt;code&gt;simpr&lt;/code&gt; takes care of the rest so you can focus on these central issues.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and loading&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Install stable CRAN version&#xA;install.packages(&#34;simpr&#34;)&#xA;&#xA;## Install latest development version&#xA;remotes::install_github(&#34;statisfactions/simpr&#34;)&#xA;&#xA;library(simpr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example simulation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;simpr&lt;/code&gt; workflow, inspired by the &lt;a href=&#34;https://infer.netlify.app&#34;&gt;&lt;code&gt;infer&lt;/code&gt;&lt;/a&gt; package, distills a simulation study into five primary steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;specify()&lt;/code&gt; your data-generating process&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;define()&lt;/code&gt; parameters that you want to systematically vary across your simulation design (e.g.&amp;nbsp;&lt;em&gt;n&lt;/em&gt;, effect size)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;generate()&lt;/code&gt; the simulation data&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fit()&lt;/code&gt; models to your data (e.g.&amp;nbsp;&lt;code&gt;lm()&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tidy_fits()&lt;/code&gt; for further processing using &lt;code&gt;broom::tidy()&lt;/code&gt;, such as computing power or Type I Error rates&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;simpr&lt;/code&gt; makes no assumptions about your data and is not specialized to any particular type of data generating process or model. If R can generate it and if R can fit models, you can use &lt;code&gt;simpr&lt;/code&gt; to run your simulation. (The tidying step is limited by the models supported &lt;code&gt;broom::tidy()&lt;/code&gt;, although you can also supply your own tidying function or expression.)&lt;/p&gt; &#xA;&lt;p&gt;Suppose we are calculating the power for a two-sample &lt;em&gt;t&lt;/em&gt;-test where the data is log-normally distributed, which can be generated by &lt;code&gt;stats::rlnorm()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(100)&#xA;&#xA;## Data-generating mechanism&#xA;specify(a = ~ rlnorm(n, mean = 0),&#xA;        b = ~ rlnorm(n, mean = 0.5)) %&amp;gt;% &#xA;  ## Vary n from 30 to 100&#xA;  define(n = seq(30, 100, by = 10)) %&amp;gt;% &#xA;  ## 100 repetitions&#xA;  generate(100) %&amp;gt;% &#xA;  ## fit t-tests&#xA;  fit(t_test = ~ t.test(a, b)) %&amp;gt;%&#xA;  ## bring model results into a tidy tibble&#xA;  tidy_fits()&#xA;#&amp;gt; # A tibble: 800 × 14&#xA;#&amp;gt;    .sim_id     n   rep Source estimate estimate1 estimate2 statistic p.value&#xA;#&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1       1    30     1 t_test   -0.953      1.73      2.68    -1.60  0.117  &#xA;#&amp;gt;  2       2    40     1 t_test   -0.249      1.64      1.89    -0.581 0.563  &#xA;#&amp;gt;  3       3    50     1 t_test   -0.616      1.67      2.29    -1.19  0.237  &#xA;#&amp;gt;  4       4    60     1 t_test   -1.75       1.28      3.03    -3.30  0.00146&#xA;#&amp;gt;  5       5    70     1 t_test   -0.876      1.61      2.48    -1.96  0.0525 &#xA;#&amp;gt;  6       6    80     1 t_test   -0.780      1.71      2.49    -2.13  0.0352 &#xA;#&amp;gt;  7       7    90     1 t_test   -0.818      1.60      2.42    -2.51  0.0129 &#xA;#&amp;gt;  8       8   100     1 t_test   -0.878      1.51      2.38    -2.61  0.00988&#xA;#&amp;gt;  9       9    30     2 t_test   -0.487      1.96      2.44    -0.713 0.479  &#xA;#&amp;gt; 10      10    40     2 t_test   -2.29       1.37      3.66    -1.76  0.0851 &#xA;#&amp;gt; # … with 790 more rows, and 5 more variables: parameter &amp;lt;dbl&amp;gt;, conf.low &amp;lt;dbl&amp;gt;,&#xA;#&amp;gt; #   conf.high &amp;lt;dbl&amp;gt;, method &amp;lt;chr&amp;gt;, alternative &amp;lt;chr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;specify()&lt;/code&gt; creates two variables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; that are distributed lognormally (any R expression that generates data can be used here). The &lt;code&gt;specify&lt;/code&gt; expressions refer to the sample size, &lt;code&gt;n&lt;/code&gt;. &lt;code&gt;define()&lt;/code&gt; clarifies that &lt;code&gt;n&lt;/code&gt; varies between 30 and 100 by 10s. &lt;code&gt;generate()&lt;/code&gt; actually does the data generation, with 100 simulated datasets for each possible value of &lt;code&gt;define()&lt;/code&gt;. &lt;code&gt;fit()&lt;/code&gt; applies an arbitrary R expression to each simulated dataset, and &lt;code&gt;tidy_fits()&lt;/code&gt; brings things together in a tidy tibble that can be easily aggregated and plotted to calculate bias, power, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Further resources&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;vignette(&#34;simpr&#34;)&lt;/code&gt; to get started on using the package, or view the &lt;code&gt;simpr&lt;/code&gt; &lt;a href=&#34;https://statisfactions.github.io/simpr/articles/articles/Showcase.html&#34;&gt;showcase&lt;/a&gt; for several applied examples.&lt;/p&gt;</summary>
  </entry>
</feed>