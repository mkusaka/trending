<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-14T01:41:26Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cran/GEmetrics</title>
    <updated>2024-04-14T01:41:26Z</updated>
    <id>tag:github.com,2024-04-14:/cran/GEmetrics</id>
    <link href="https://github.com/cran/GEmetrics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❗ This is a read-only mirror of the CRAN R package repository. GEmetrics — Best Linear Unbiased Prediction of Genotype-by-Environment Metrics&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GEmetrics&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of GEmetrics is to provide functions to calculate the best linear unbiased prediction (BLUP) of the following genotype-by-environment (GE) metrics: ecovalence, environmental variance, Finlay and Wilkinson regression and Lin and Binns superiority measure, based on a multi-environment genomic prediction model.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install GEmetrics directly from the CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(pkg=&#39;GEmetrics&#39;,repos=&#39;https://cran.r-project.org/&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(pkg=&#39;devtools&#39;,repos=&#39;https://cran.r-project.org/&#39;)     ## install devtools&#xA;devtools::install_git(&#39;https://github.com/TheRocinante-lab/GEmetrics&#39;)   ## install GEmetrics from GitHub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic example which shows you how to calculate the BLUP of GE metrics.&lt;/p&gt; &#xA;&lt;h4&gt;Simulate phenotypic data&lt;/h4&gt; &#xA;&lt;p&gt;Multi-environment trial data is first simulated based on the “wheat” dataset from BGLR.&lt;/p&gt; &#xA;&lt;p&gt;A design data frame is generated displaying all combinations of genotypes and environments. Some combinations are discarded to set sparseness in the data (75% here).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Set seed for reproductibility&#xA;set.seed(123)&#xA;&#xA;## Load &#34;wheat&#34; dataset from BGLR&#xA;data(&#34;wheat&#34;,package = &#34;BGLR&#34;)&#xA;&#xA;## Generate a design data frame for all genotypes in 5 environments&#xA;Design &amp;lt;- expand.grid(Genotype=rownames(wheat.A),Environment=paste0(&#34;Env&#34;,1:5))&#xA;&#xA;## Set sparseness by discarding 75% of the combinatons&#xA;Design &amp;lt;- Design[-sample(nrow(Design),round(nrow(Design)*3/4)),]&#xA;head(Design)&#xA;#&amp;gt;    Genotype Environment&#xA;#&amp;gt; 3      2167        Env1&#xA;#&amp;gt; 6      3889        Env1&#xA;#&amp;gt; 15    13396        Env1&#xA;#&amp;gt; 22    14103        Env1&#xA;#&amp;gt; 26    16004        Env1&#xA;#&amp;gt; 28    16262        Env1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Phenotypes are then simulated using trait and environments parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;h2: heritability, either a single value for a heritability common to all environments (e.g.&amp;nbsp;0.5 in the example below), or a vector of heritabilities associated with each environment&lt;/li&gt; &#xA; &lt;li&gt;rho: genetic correlations between environment pairs, either a single value for a genetic correlation common to all environment pairs (e.g.&amp;nbsp;0.5 in the example below), or a square correlation matrix&lt;/li&gt; &#xA; &lt;li&gt;sd_mu: standard deviation of the Gaussian distribution in which environment means are drawn (e.g.&amp;nbsp;1 in the example below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Simulate phenotypic data with default parameter values&#xA;DataSim &amp;lt;- GEmetrics::Simulate_MET_data(Design=Design,K=wheat.A,h2=0.5,rho=0.5,sd_mu=1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting DataSim object include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pheno: data frame with simulated phenotypes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Simulated phenotypes&#xA;head(DataSim$Pheno)&#xA;#&amp;gt;             Y Genotype Environment&#xA;#&amp;gt; 3   1.5105722     2167        Env1&#xA;#&amp;gt; 6   0.1510397     3889        Env1&#xA;#&amp;gt; 15 -3.3939121    13396        Env1&#xA;#&amp;gt; 22  0.3920105    14103        Env1&#xA;#&amp;gt; 26 -0.4409719    16004        Env1&#xA;#&amp;gt; 28 -1.1378441    16262        Env1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;EnvBV: matrix of simulated environment-specific breeding values&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Simulated environment-specific breeding values&#xA;head(DataSim$EnvBV)&#xA;#&amp;gt;            Env1       Env2       Env3       Env4      Env5&#xA;#&amp;gt; 775  -0.8188854  0.7310795 -0.7722164 -2.9188405 0.1487880&#xA;#&amp;gt; 2166  0.5865631  2.1463691  1.9910743  0.7155801 1.7982954&#xA;#&amp;gt; 2167  0.6615584  2.1808788  1.9865398  0.7955096 1.9156231&#xA;#&amp;gt; 2465  0.6525278  0.7716421  0.5629410  0.0811664 1.8413287&#xA;#&amp;gt; 3881  0.3101735  0.6611265  1.6816084 -2.2797745 1.7717076&#xA;#&amp;gt; 3889 -1.0755458 -2.0130535 -1.5269430 -2.4387551 0.5240766&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Omega_G: genetic covariance matrix between environments&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Genetic covariance matrix between environments&#xA;DataSim$Omega_G&#xA;#&amp;gt;      Env1 Env2 Env3 Env4 Env5&#xA;#&amp;gt; Env1  1.0  0.5  0.5  0.5  0.5&#xA;#&amp;gt; Env2  0.5  1.0  0.5  0.5  0.5&#xA;#&amp;gt; Env3  0.5  0.5  1.0  0.5  0.5&#xA;#&amp;gt; Env4  0.5  0.5  0.5  1.0  0.5&#xA;#&amp;gt; Env5  0.5  0.5  0.5  0.5  1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Omega_E: error covariance matrix between environments&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Error covariance matrix between environments&#xA;DataSim$Omega_E&#xA;#&amp;gt;      Env1 Env2 Env3 Env4 Env5&#xA;#&amp;gt; Env1    1    0    0    0    0&#xA;#&amp;gt; Env2    0    1    0    0    0&#xA;#&amp;gt; Env3    0    0    1    0    0&#xA;#&amp;gt; Env4    0    0    0    1    0&#xA;#&amp;gt; Env5    0    0    0    0    1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Estimate variance components using BGLR&lt;/h4&gt; &#xA;&lt;p&gt;From simulated data, variance components can be estimated using an inference method like &lt;a href=&#34;https://github.com/gdlc/BGLR-R&#34;&gt;BGLR&lt;/a&gt;, or any other methods able to infer Omega_G and Omega_E.&lt;/p&gt; &#xA;&lt;p&gt;First, the phenotypic data frame must be transformed into a phenotypic response matrix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Generate the phenotypic response matrix for BGLR and the corresponding K matrix&#xA;BGLR_data &amp;lt;- GEmetrics::BGLR_format(Pheno=DataSim$Pheno,K=wheat.A)&#xA;head(BGLR_data$BGLR_pheno)&#xA;#&amp;gt;           Env1        Env2        Env3      Env4     Env5&#xA;#&amp;gt; 775         NA -0.04697659          NA        NA       NA&#xA;#&amp;gt; 2167 1.5105722          NA          NA  1.580189 1.205947&#xA;#&amp;gt; 2465        NA          NA  1.49828160        NA       NA&#xA;#&amp;gt; 3881        NA  0.50301295          NA        NA       NA&#xA;#&amp;gt; 3889 0.1510397          NA          NA        NA       NA&#xA;#&amp;gt; 4248        NA          NA -0.04786517 -1.401185       NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The inference can be done using the “Multitrait” function of BGLR to estimate the Omega_G and Omega_E covariance matrices. Note that the current CRAN version of BGLR (October 2023) may lead to an issue when the phenotypic data is very sparse, but not the most recent GitHub version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Run BGLR inference&#xA;ETA&amp;lt;-list(list(K=BGLR_data$BGLR_K,model=&#34;RKHS&#34;))&#xA;BGLR_results &amp;lt;- BGLR::Multitrait(y=BGLR_data$BGLR_pheno,ETA=ETA,&#xA;                                 resCov=list(type=&#34;DIAG&#34;),&#xA;                                 nIter=1000,burnIn=500,verbose = F,saveAt = &#34;Test_&#34;)&#xA;#&amp;gt; Checking variance co-variance matrix K  for linear term 1&#xA;#&amp;gt; Ok&#xA;#&amp;gt; Setting linear term 1&#xA;#&amp;gt; MSx=1.60381006430079&#xA;#&amp;gt; UNstructured covariance matrix&#xA;#&amp;gt; df0 was set to 6&#xA;#&amp;gt; S0 set to&#xA;#&amp;gt;            Env1      Env2     Env3     Env4      Env5&#xA;#&amp;gt; Env1 10.1237857  3.523954 2.648470 2.804323 0.9866993&#xA;#&amp;gt; Env2  3.5239541 11.076081 2.746944 3.647022 1.7981729&#xA;#&amp;gt; Env3  2.6484702  2.746944 9.101782 2.333046 2.4699484&#xA;#&amp;gt; Env4  2.8043233  3.647022 2.333046 9.662190 1.1637173&#xA;#&amp;gt; Env5  0.9866993  1.798173 2.469948 1.163717 5.9543964&#xA;#&amp;gt; Initializing resCov&#xA;#&amp;gt; Setting hyperparameters for DIAG R&#xA;#&amp;gt; df0 set to  5 for all the traits&#xA;#&amp;gt; S0 was set to&#xA;#&amp;gt;      Env1      Env2      Env3      Env4      Env5 &#xA;#&amp;gt;  9.471367 10.362293  8.515226  9.039518  5.570671&#xA;#&amp;gt; Done&#xA;unlink(c(&#34;Test_R.dat&#34;,&#34;Test_Omega_1.dat&#34;,&#34;Test_mu.dat&#34;))&#xA;Omega_G &amp;lt;- BGLR_results$ETA[[1]]$Cov$Omega&#xA;Omega_E &amp;lt;- BGLR_results$resCov$R&#xA;rownames(Omega_E) &amp;lt;- rownames(Omega_E) &amp;lt;- rownames(Omega_G)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The estimate of the genetic covariance matrix Omega_G is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Omega_G&#xA;#&amp;gt;           Env1      Env2      Env3      Env4      Env5&#xA;#&amp;gt; Env1 1.0247664 0.4677599 0.3996223 0.4624807 0.2011146&#xA;#&amp;gt; Env2 0.4677599 0.9498619 0.3683848 0.3746494 0.2067460&#xA;#&amp;gt; Env3 0.3996223 0.3683848 0.7740551 0.3278520 0.2372795&#xA;#&amp;gt; Env4 0.4624807 0.3746494 0.3278520 0.8901805 0.2105031&#xA;#&amp;gt; Env5 0.2011146 0.2067460 0.2372795 0.2105031 0.4848253&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the estimate of the error covariance matrix Omega_E is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Omega_E&#xA;#&amp;gt;          [,1]     [,2]     [,3]    [,4]      [,5]&#xA;#&amp;gt; Env1 1.118006 0.000000 0.000000 0.00000 0.0000000&#xA;#&amp;gt; Env2 0.000000 1.045441 0.000000 0.00000 0.0000000&#xA;#&amp;gt; Env3 0.000000 0.000000 1.141221 0.00000 0.0000000&#xA;#&amp;gt; Env4 0.000000 0.000000 0.000000 1.21129 0.0000000&#xA;#&amp;gt; Env5 0.000000 0.000000 0.000000 0.00000 0.9782482&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Calculate BLUP and conditional variance of environment-specific breeding values&lt;/h4&gt; &#xA;&lt;p&gt;The BLUP and the conditional variance of environment-specific breeding values can be calculated from the phenotypes and the variance component estimates. Note that the BLUPs could also be obtained directly from BGLR outputs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Calculate BLUP and conditional variance&#xA;BlupEnvBV &amp;lt;- GEmetrics::EnvBV_blup(Pheno=DataSim$Pheno,K=wheat.A,Omega_G=Omega_G,Omega_E=Omega_E)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The BLUPs obtained:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;head(BlupEnvBV$G_hat)&#xA;#&amp;gt;             Env1       Env2       Env3       Env4      Env5&#xA;#&amp;gt; 775  -0.66753201 -0.2112071  0.4905182 -1.5057121 0.8578696&#xA;#&amp;gt; 2166  0.81771762  0.4090425  1.3872625  0.5760052 1.4273601&#xA;#&amp;gt; 2167  0.82168849  0.4112842  1.3889899  0.5801013 1.4281564&#xA;#&amp;gt; 2465  0.64992740  0.9668607  1.4473134 -0.3386963 1.5218385&#xA;#&amp;gt; 3881 -0.08437372  0.2692015  0.9020293 -1.6997681 0.6887119&#xA;#&amp;gt; 3889 -1.37042995 -2.3024314 -0.5541623 -2.0430040 0.4299118&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the conditional variance matrix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BlupEnvBV$P[1:5,1:5]&#xA;#&amp;gt;             Env1:775    Env1:2166    Env1:2167    Env1:2465    Env1:3881&#xA;#&amp;gt; Env1:775  1.09832586  0.013557905  0.013513339  0.053213436  0.241726662&#xA;#&amp;gt; Env1:2166 0.01355791  0.517089943  0.514962943 -0.001668494 -0.006067685&#xA;#&amp;gt; Env1:2167 0.01351334  0.514962943  0.516518608 -0.001649603 -0.006042546&#xA;#&amp;gt; Env1:2465 0.05321344 -0.001668494 -0.001649603  0.502314319  0.015195531&#xA;#&amp;gt; Env1:3881 0.24172666 -0.006067685 -0.006042546  0.015195531  0.776973074&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Obtain GE metrics estimates&lt;/h4&gt; &#xA;&lt;p&gt;Each GE metric can be estimated using the complete BLUP involving both the squared expectation and the variance term:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;metrics &amp;lt;- c(&#34;Ecovalence&#34;,&#34;EnvironmentalVar&#34;,&#34;FinlayWilkRegression&#34;,&#34;LinBinns&#34;)&#xA;GEmetrics_hat_geno_exp_var &amp;lt;- sapply(metrics,function(m)&#xA;  GEmetrics::GEmetrics_blup(G_hat=BlupEnvBV$G_hat,metric=m,P=BlupEnvBV$P))&#xA;head(GEmetrics_hat_geno_exp_var)&#xA;#&amp;gt;      Ecovalence EnvironmentalVar FinlayWilkRegression LinBinns&#xA;#&amp;gt; 775    2.394463        1.4653910            1.0064156 5.107793&#xA;#&amp;gt; 2166   3.337781        0.7363370            0.4428062 2.576045&#xA;#&amp;gt; 2167   3.347547        0.7364124            0.4414242 2.572119&#xA;#&amp;gt; 2465   1.631830        0.9115902            0.7942961 2.281372&#xA;#&amp;gt; 3881   2.532864        1.5401010            1.0298445 4.236280&#xA;#&amp;gt; 3889   1.780832        1.4125020            1.0651308 8.526201&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using the partial BLUP including the the squared expectation only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;metrics &amp;lt;- c(&#34;Ecovalence&#34;,&#34;EnvironmentalVar&#34;,&#34;FinlayWilkRegression&#34;,&#34;LinBinns&#34;)&#xA;GEmetrics_hat_geno_exp &amp;lt;- sapply(metrics,function(m)&#xA;  GEmetrics::GEmetrics_blup(G_hat=BlupEnvBV$G_hat,metric=m))&#xA;head(GEmetrics_hat_geno_exp)&#xA;#&amp;gt;      Ecovalence EnvironmentalVar FinlayWilkRegression LinBinns&#xA;#&amp;gt; 775   0.1037494        0.8798098            1.0043964 4.383918&#xA;#&amp;gt; 2166  1.3178871        0.2163899            0.4332007 1.927741&#xA;#&amp;gt; 2167  1.3237323        0.2154950            0.4318088 1.923486&#xA;#&amp;gt; 2465  0.3207806        0.5687083            0.7885727 1.797779&#xA;#&amp;gt; 3881  0.6793336        1.0639080            1.0281445 3.616348&#xA;#&amp;gt; 3889  1.2136119        1.2559158            1.0626649 8.104803&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Estimates can be compared to the true GE metric values obtained from simulated environment-specific breeding values using the correlation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;GEmetrics_true &amp;lt;- sapply(metrics,function(m)GEmetrics::GEmetrics_blup(G_hat=DataSim$EnvBV,metric=m,P=NULL))&#xA;data.frame(&#34;Geno_Exp_Var&#34; = diag(cor(GEmetrics_hat_geno_exp_var,GEmetrics_true)),&#xA;           &#34;Geno_Exp&#34; = diag(cor(GEmetrics_hat_geno_exp,GEmetrics_true)))&#xA;#&amp;gt;                      Geno_Exp_Var  Geno_Exp&#xA;#&amp;gt; Ecovalence              0.3596291 0.2137034&#xA;#&amp;gt; EnvironmentalVar        0.5047009 0.4749053&#xA;#&amp;gt; FinlayWilkRegression    0.5315392 0.5316567&#xA;#&amp;gt; LinBinns                0.7944993 0.7935010&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the root mean-square error of estimation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data.frame(&#34;Geno_Exp_Var&#34; = sqrt(colMeans((GEmetrics_hat_geno_exp_var-GEmetrics_true)^2)),&#xA;           &#34;Geno_Exp&#34; = sqrt(colMeans((GEmetrics_hat_geno_exp-GEmetrics_true)^2)))&#xA;#&amp;gt;                      Geno_Exp_Var  Geno_Exp&#xA;#&amp;gt; Ecovalence              2.0265446 3.0840888&#xA;#&amp;gt; EnvironmentalVar        0.8941891 1.1087231&#xA;#&amp;gt; FinlayWilkRegression    0.3837222 0.3837641&#xA;#&amp;gt; LinBinns                3.4556773 4.0040074&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>cran/complex</title>
    <updated>2024-04-14T01:41:26Z</updated>
    <id>tag:github.com,2024-04-14:/cran/complex</id>
    <link href="https://github.com/cran/complex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❗ This is a read-only mirror of the CRAN R package repository. complex — Time Series Analysis and Forecasting Using Complex Variables. Homepage: https://github.com/config-i1/complex Report bugs for this package: https://github.com/config-i1/complex/issues&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;complex package for R&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=complex&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/complex&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=complex&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/complex&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/config-i1/complex/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/config-i1/complex/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/G2G51C4C4&#34;&gt;&lt;img src=&#34;https://ivan.svetunkov.ru/ko-fi.png&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Time series analysis and forecasting using complex variables&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/config-i1/complex/raw/master/man/figures/complex-web.png?raw=true&#34; alt=&#34;hex-sticker of the complex package for R&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The package includes basic instruments for correlation and regression analysis of complex-valued variables. The package supports the monograph by Svetunkov &amp;amp; Svetunkov &#34;Complex-valued Econometrics with Examples in R&#34;, which is to be published by Springer in 2024.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Stable version can be installed from CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;complex&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For installation from github use the remotes package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&#34;remotes&#34;)){install.packages(&#34;remotes&#34;)}&#xA;remotes::install_github(&#34;config-i1/complex&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>cran/surveyPrev</title>
    <updated>2024-04-14T01:41:26Z</updated>
    <id>tag:github.com,2024-04-14:/cran/surveyPrev</id>
    <link href="https://github.com/cran/surveyPrev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❗ This is a read-only mirror of the CRAN R package repository. surveyPrev — Mapping the Prevalence of Binary Indicators using Survey Data in Small Areas. Homepage: https://github.com/richardli/surveyPrev Report bugs for this package: https://github.com/richardli/surveyPrev/issues&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;surveyPrev&lt;/h1&gt; &#xA;&lt;p&gt;R package to process and map prevalence of common DHS indicators.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install and load the latest version of &lt;code&gt;surveyPrev&lt;/code&gt; package, use the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(devtools)&#xA;install_github(&#34;richardli/SUMMER&#34;)&#xA;install_github(&#34;richardli/surveyPrev&#34;)&#xA;&#xA;library(surveyPrev)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the &lt;code&gt;surveyPrev&lt;/code&gt; package is developed concurrently with the &lt;a href=&#34;https://github.com/richardli/summer&#34;&gt;&lt;code&gt;SUMMER&lt;/code&gt; package&lt;/a&gt;, so it is highly recommended that you update both packages to the latest version on Github first.&lt;/p&gt;</summary>
  </entry>
</feed>