<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-29T01:33:44Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FantasyFootballAnalytics/ffanalytics</title>
    <updated>2024-08-29T01:33:44Z</updated>
    <id>tag:github.com,2024-08-29:/FantasyFootballAnalytics/ffanalytics</id>
    <link href="https://github.com/FantasyFootballAnalytics/ffanalytics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ffanalytics R package&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ffanalytics&lt;/h1&gt; &#xA;&lt;p&gt;This package allows users to scrape projected stats from several sites that have publicly available projections. Once data is scraped the user can then use functions within the package to calculate projected points and produce rankings. The package relies heavily on the vocabulary from the &lt;code&gt;tidyverse&lt;/code&gt; and users will better be able to use the package if they familiarize themselves with the &lt;code&gt;tidyverse&lt;/code&gt; way of creating code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Version 3 of the package&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Summer of 2022 we incremented to version 3.0 of the package. There are several things worth highlighting:&lt;/p&gt; &#xA;&lt;p&gt;Breaking changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;add_risk()&lt;/code&gt; is no longer exported and is superseded by &lt;code&gt;add_uncertainty()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Several helper functions are no-longer exported&lt;/li&gt; &#xA; &lt;li&gt;When loading &lt;code&gt;ffanalytics&lt;/code&gt;, no other packages load with it (i.e., we removed all packages from the &#34;Depends&#34; field). Previously, calling &lt;code&gt;library(ffanalytics)&lt;/code&gt; also loaded &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt;, and several other packages.&lt;/li&gt; &#xA; &lt;li&gt;We no longer use the projection_sources &lt;code&gt;R6&lt;/code&gt; object internally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Individual scrapes are now self-contained internally (e.g. &lt;code&gt;ffanalytics:::scrape_cbs()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rate limits have been added to all scrapes (typically waiting 2 seconds between pages)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;projections_table&lt;/code&gt; function has a new argument: &lt;code&gt;avg_type = c(&#34;average&#34;, &#34;robust&#34;, &#34;weighted&#34;)&lt;/code&gt;. By default the &lt;code&gt;projections_table&lt;/code&gt; function will compute all average types, but one or two can be specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Installation of the &lt;code&gt;ffanalytics&lt;/code&gt; package can be done directly from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;FantasyFootballAnalytics/ffanalytics&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projection sources&lt;/h2&gt; &#xA;&lt;p&gt;The following sources are available for scraping:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For seasonal data: CBS, ESPN, FantasyPros, FantasySharks, FFToday, NumberFire, FantasyFootballNerd, NFL, RTSports, Walterfootball&lt;/li&gt; &#xA; &lt;li&gt;For weekly data: CBS, ESPN, FantasyPros, FantasySharks, FFToday, FleaFlicker, NumberFire, FantasyFootballNerd, NFL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Although the scrape functions allows the user to specify season and week, scraping historical periods will not be successful.&lt;/p&gt; &#xA;&lt;h2&gt;Scraping data&lt;/h2&gt; &#xA;&lt;p&gt;The main function for scraping data is &lt;code&gt;scrape_data&lt;/code&gt;. This function will pull data from the sources specified, for the positions specified in the season and week specified. To pull data for QBs, RBs, WRs, TEs and DSTs from CBS, NFL and NumberFire for the 2022 season the user would run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_scrape &amp;lt;- scrape_data(src = c(&#34;CBS&#34;, &#34;NFL&#34;, &#34;NumberFire&#34;), &#xA;                         pos = c(&#34;QB&#34;, &#34;RB&#34;, &#34;WR&#34;, &#34;TE&#34;, &#34;DST&#34;),&#xA;                         season = NULL, # NULL grabs the current season&#xA;                         week = NULL) # NULL grabs the current week&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;my_scrape&lt;/code&gt; will be a list of tibbles, one for each position scraped, which contains the data for each source for that position. In the &lt;code&gt;tibble&lt;/code&gt; the &lt;code&gt;data_src&lt;/code&gt; column specifies the source of the data.&lt;/p&gt; &#xA;&lt;h2&gt;Calculating projections&lt;/h2&gt; &#xA;&lt;p&gt;Once data is scraped the projected points can be calculated. this is done with the &lt;code&gt;projections_table&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_projections &amp;lt;-  projections_table(my_scrape)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will calculate projections using the default settings. You can provide additional parameters for the &lt;code&gt;projections_table&lt;/code&gt; function to customize the calculations. See &lt;code&gt;?projections_table&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Adding additional information&lt;/h2&gt; &#xA;&lt;p&gt;To add rankings information, risk value and ADP/AAV data use the &lt;code&gt;add_ecr&lt;/code&gt;, &lt;code&gt;add_uncertainty&lt;/code&gt; (superseding &lt;code&gt;add_risk&lt;/code&gt;), &lt;code&gt;add_adp&lt;/code&gt;, and &lt;code&gt;add_aav&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_projections &amp;lt;- my_projections %&amp;gt;% &#xA;  add_ecr() %&amp;gt;% &#xA;  add_adp() %&amp;gt;% &#xA;  add_aav() %&amp;gt;%&#xA;  add_uncertainty() &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;add_ecr&lt;/code&gt; will need to be called before &lt;code&gt;add_uncertainty&lt;/code&gt; to ensure that the ECR data is available for the uncertainty calculation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;add_adp&lt;/code&gt; and &lt;code&gt;add_aav&lt;/code&gt; allows to specify sources for ADP and AAV. See &lt;code&gt;?add_adp&lt;/code&gt;, and &lt;code&gt;?add_aav&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Player data&lt;/h2&gt; &#xA;&lt;p&gt;Player data is pulled from MFL when the package loads and stored in the &lt;code&gt;player_table&lt;/code&gt; object. To add player data to the projections table use &lt;code&gt;add_player_info&lt;/code&gt;, which adds the player names, teams, positions, age, and experience to the data set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_projections &amp;lt;- my_projections %&amp;gt;% &#xA;  add_player_info()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>