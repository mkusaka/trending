<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:52:04Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>insightsengineering/tern.mmrm</title>
    <updated>2022-08-04T01:52:04Z</updated>
    <id>tag:github.com,2022-08-04:/insightsengineering/tern.mmrm</id>
    <link href="https://github.com/insightsengineering/tern.mmrm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create MMRM TLGs using lme4 and tern&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tern.mmrm&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tern.mmrm&lt;/code&gt; provides an interface for mixed model repeated measures (MMRM) within the &lt;code&gt;tern&lt;/code&gt; framework. Please refer to documentation of &lt;code&gt;fit_mmrm()&lt;/code&gt; to see a minimal example.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;For details on why we and how we implemented the MMRM in R please see the following slides: &lt;a href=&#34;https://drive.google.com/file/d/1sOZUAFOc004H4jO8vuUc_4HyYHEgu45b/view&#34;&gt;Implementing Mixed Models with Repeated Measures (MMRM) in R&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For releases from August 2022 it is recommended that you &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;create and use a Github PAT&lt;/a&gt; to install the latest version of this package. Once you have the PAT, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.setenv(GITHUB_PAT = &#34;your_access_token_here&#34;)&#xA;if (!require(&#34;remotes&#34;)) install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;insightsengineering/tern.mmrm@*release&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A stable release of all &lt;code&gt;NEST&lt;/code&gt; packages from June 2022 is also available &lt;a href=&#34;https://github.com/insightsengineering/depository#readme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See package vignettes &lt;code&gt;browseVignettes(package = &#34;tern.mmrm&#34;)&lt;/code&gt; for usage of this package.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/connectwidgets</title>
    <updated>2022-08-04T01:52:04Z</updated>
    <id>tag:github.com,2022-08-04:/rstudio/connectwidgets</id>
    <link href="https://github.com/rstudio/connectwidgets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The {connectwidgets} package allows you to curate your content on RStudio Connect, helping to create organized groups of content within an RMarkdown document or Shiny app.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;connectwidgets &lt;a href=&#34;https://rstudio.github.io/connectwidgets/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/connectwidgets/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Curate your content on RStudio Connect&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=connectwidgets&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/connectwidgets&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-green&#34; alt=&#34;Lifecycle: stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rstudio/connectwidgets/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/connectwidgets/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rstudio/connectwidgets/actions/workflows/lint.yaml&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/connectwidgets/actions/workflows/lint.yaml/badge.svg?sanitize=true&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;connectwidgets&lt;/code&gt; is an R package that can be used to query an RStudio Connect server for a subset of your existing content items, then organize them within &lt;code&gt;htmlwidget&lt;/code&gt; components in an R Markdown document or Shiny application.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;connectwidgets&lt;/code&gt; to create a content hub or knowledge repository, a customized summary page for a particular group of stakeholders, or a presentation layer for any group of related content.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;connectwidgets&lt;/code&gt; from CRAN using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;connectwidgets&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can install the development version from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;rstudio/connectwidgets&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Use the template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rmarkdown::draft(&#34;example-page.Rmd&#34;, template = &#34;connectwidgets&#34;, package = &#34;connectwidgets&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also copy and knit the following example, or read on for more details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;title: an example page&#xA;output: html_document&#xA;---&#xA;&#xA;```{r setup, include=FALSE}&#xA;library(connectwidgets)&#xA;library(dplyr)&#xA;&#xA;knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)&#xA;&#xA;client &amp;lt;- connect(&#xA;  # server  = Sys.getenv(&#34;CONNECT_SERVER&#34;),&#xA;  # api_key = Sys.getenv(&#34;CONNECT_API_KEY&#34;)&#xA;  )&#xA;&#xA;all_content &amp;lt;- client %&amp;gt;%&#xA;  content()&#xA;&#xA;sample_content &amp;lt;- all_content %&amp;gt;%&#xA;  arrange(desc(updated_time)) %&amp;gt;%&#xA;  slice_head(n = 50)&#xA;```&#xA;&#xA;![](https://source.unsplash.com/1920x1080/?forest &#34;A random forest.&#34;)&#xA;&#xA;## Components&#xA;&#xA;### card&#xA;&#xA;```{r card}&#xA;sample_content %&amp;gt;%&#xA;  slice(1) %&amp;gt;%&#xA;  rsc_card()&#xA;```&#xA;&#xA;### grid&#xA;&#xA;```{r grid}&#xA;sample_content %&amp;gt;%&#xA;  rsc_grid()&#xA;```&#xA;&#xA;### table&#xA;&#xA;```{r table}&#xA;sample_content %&amp;gt;%&#xA;  rsc_table()&#xA;```&#xA;&#xA;### search &amp;amp; filter&#xA;&#xA;```{r search-and-filter}&#xA;rsc_cols(rsc_search(all_content), rsc_filter(all_content), widths = c(2, 2))&#xA;rsc_table(all_content)&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;The client object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Validates your API key with the RStudio Connect server&lt;/li&gt; &#xA; &lt;li&gt;Ensures you are running a recent enough version of Connect&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use an &lt;code&gt;.Renviron&lt;/code&gt; file to set the &lt;code&gt;CONNECT_SERVER&lt;/code&gt; and &lt;code&gt;CONNECT_API_KEY&lt;/code&gt; environment variables. If you’re not familiar with setting environment variables, check out the &lt;a href=&#34;https://rstats.wtf/r-startup.html#renviron&#34;&gt;R Startup chapter&lt;/a&gt; of What They Forgot to Teach You About R. RStudio Connect will &lt;a href=&#34;https://docs.rstudio.com/connect/user/content-settings/#content-vars&#34;&gt;automatically apply&lt;/a&gt; values for these at document run time, so there is no need to include them in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(connectwidgets)&#xA;library(dplyr, warn.conflicts = FALSE)&#xA;&#xA;knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)&#xA;&#xA;client &amp;lt;- connect(&#xA;  # server  = Sys.getenv(&#34;CONNECT_SERVER&#34;),&#xA;  # api_key = Sys.getenv(&#34;CONNECT_API_KEY&#34;)&#xA;  )&#xA;&#xA;all_content &amp;lt;- client %&amp;gt;%&#xA;  content()&#xA;&#xA;glimpse(all_content)&#xA;#&amp;gt; Rows: 1,213&#xA;#&amp;gt; Columns: 15&#xA;#&amp;gt; $ id               &amp;lt;int&amp;gt; 3979, 4603, 4602, 5061, 5015, 5054, 5055, 5052, 5030,…&#xA;#&amp;gt; $ guid             &amp;lt;chr&amp;gt; &#34;ca22a1f6-bab5-4fc0-8f38-ed8021be41f5&#34;, &#34;e7c26684-ec4…&#xA;#&amp;gt; $ name             &amp;lt;chr&amp;gt; &#34;github-issues-connect&#34;, &#34;group-info&#34;, &#34;user-info&#34;, &#34;…&#xA;#&amp;gt; $ title            &amp;lt;chr&amp;gt; NA, &#34;group-info&#34;, &#34;user-info&#34;, &#34;plumbertabeau&#34;, &#34;RSC+…&#xA;#&amp;gt; $ description      &amp;lt;chr&amp;gt; &#34;A table pin with 19718 rows and 10 columns.&#34;, &#34;Resul…&#xA;#&amp;gt; $ app_mode         &amp;lt;chr&amp;gt; &#34;static&#34;, &#34;static&#34;, &#34;static&#34;, &#34;api&#34;, &#34;static&#34;, &#34;api&#34;,…&#xA;#&amp;gt; $ content_category &amp;lt;chr&amp;gt; &#34;pin&#34;, &#34;pin&#34;, &#34;pin&#34;, &#34;api&#34;, &#34;site&#34;, &#34;api&#34;, &#34;&#34;, &#34;&#34;, &#34;s…&#xA;#&amp;gt; $ url              &amp;lt;chr&amp;gt; &#34;https://rsc.radixu.com/content/ca22a1f6-bab5-4fc0-8f…&#xA;#&amp;gt; $ owner_guid       &amp;lt;chr&amp;gt; &#34;1d6cc041-eb11-411e-810e-718508cde25b&#34;, &#34;0fc96747-ec9…&#xA;#&amp;gt; $ owner_username   &amp;lt;chr&amp;gt; &#34;brian&#34;, &#34;kelly.obriant&#34;, &#34;kelly.obriant&#34;, &#34;david&#34;, &#34;…&#xA;#&amp;gt; $ owner_first_name &amp;lt;chr&amp;gt; &#34;Brian&#34;, &#34;Kelly&#34;, &#34;Kelly&#34;, &#34;E. David&#34;, &#34;Aron&#34;, &#34;Toph&#34;…&#xA;#&amp;gt; $ owner_last_name  &amp;lt;chr&amp;gt; &#34;Smith&#34;, &#34;@RStudio&#34;, &#34;@RStudio&#34;, &#34;Aja&#34;, &#34;Atkins&#34;, &#34;Al…&#xA;#&amp;gt; $ tags             &amp;lt;list&amp;gt; [&amp;lt;data.frame[2 x 5]&amp;gt;], [&amp;lt;data.frame[1 x 5]&amp;gt;], [&amp;lt;data…&#xA;#&amp;gt; $ created_time     &amp;lt;dttm&amp;gt; 2020-04-03 17:54:27, 2020-12-05 02:37:30, 2020-12-05…&#xA;#&amp;gt; $ updated_time     &amp;lt;dttm&amp;gt; 2021-07-28 07:03:10, 2021-07-28 07:00:41, 2021-07-28…&#xA;&#xA;sample_content &amp;lt;- all_content %&amp;gt;%&#xA;  arrange(desc(updated_time)) %&amp;gt;%&#xA;  slice_head(n = 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;content()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;content()&lt;/code&gt; returns a data frame with the following columns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; - Auto-incrementing identifier for each content item (legacy)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;guid&lt;/code&gt; - Unique identifier for each content item (preferred)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app_mode&lt;/code&gt; - The type of the content item (examples: &lt;code&gt;shiny&lt;/code&gt;, &lt;code&gt;rmd-static&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;python-dash&lt;/code&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;content_category&lt;/code&gt; - For &lt;code&gt;static&lt;/code&gt; app modes, the specific category of content (examples: &lt;code&gt;site&lt;/code&gt;, &lt;code&gt;plot&lt;/code&gt;, &lt;code&gt;pin&lt;/code&gt;, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; - The name of the content item as set at initial publishing&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt; - The user-provided title of the content item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt; - The user-provided description of the content item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; - The URL to the content item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;owner_guid&lt;/code&gt; - Unique identifier of the owner of the content item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;owner_username&lt;/code&gt; - Username of the owner of the content item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;owner_first_name&lt;/code&gt; - First name of the owner of the content item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;owner_last_name&lt;/code&gt; - Last name of the owner of the content item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tags&lt;/code&gt; - A data frame of the tags associated with the content item, with the following columns: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;parent_id&lt;/code&gt;, &lt;code&gt;created_time&lt;/code&gt;, &lt;code&gt;updated_time&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;created_time&lt;/code&gt; - The timestamp at which the content item was created&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;updated_time&lt;/code&gt; - The timestamp at which the content item was last updated&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The data frame contains one row for each item visible to the requesting user. For users in an “administrator” role, that will be all content items.&lt;/p&gt; &#xA;&lt;h4&gt;Filtering Content&lt;/h4&gt; &#xA;&lt;p&gt;We provide helper functions to filter by both owners and tags.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;by_tags()&lt;/code&gt; - Filters the data frame to only include content that has been tagged with the specified tag name(s). You can pass a single tag name or a vector of tag names. &lt;code&gt;by_tag&lt;/code&gt; is provided as an alias for readability when using a single tag.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;by_owners()&lt;/code&gt; - Filters the data frame to only include content with the specified owner(s) by username. You can pass a single username or a vector of usernames. &lt;code&gt;by_owner&lt;/code&gt; is provided as an alias for readability when using a single username.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_content %&amp;gt;% &#xA;  by_tag(&#34;Audit Reports&#34;)&#xA;#&amp;gt; # A tibble: 6 x 15&#xA;#&amp;gt;      id guid  name  title description app_mode content_category url   owner_guid&#xA;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     &#xA;#&amp;gt; 1  4875 7cbd… Audi… Audi… Using the … rmd-sta… &#34;&#34;               http… 0fc96747-…&#xA;#&amp;gt; 2  4619 b191… tag-… Tag … List all t… rmd-sta… &#34;&#34;               http… 0fc96747-…&#xA;#&amp;gt; 3  4618 4348… acl-… Cont… Generate a… rmd-sta… &#34;&#34;               http… 0fc96747-…&#xA;#&amp;gt; 4  4597 6a8f… cont… Basi… List all c… rmd-sta… &#34;&#34;               http… 0fc96747-…&#xA;#&amp;gt; 5  4596 3f7a… vani… Vani… List all d… rmd-sta… &#34;&#34;               http… 0fc96747-…&#xA;#&amp;gt; 6  4595 5687… envi… R an… R and Pyth… rmd-sta… &#34;&#34;               http… 0fc96747-…&#xA;#&amp;gt; # … with 6 more variables: owner_username &amp;lt;chr&amp;gt;, owner_first_name &amp;lt;chr&amp;gt;,&#xA;#&amp;gt; #   owner_last_name &amp;lt;chr&amp;gt;, tags &amp;lt;list&amp;gt;, created_time &amp;lt;dttm&amp;gt;,&#xA;#&amp;gt; #   updated_time &amp;lt;dttm&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;all_content&lt;/code&gt; is a &lt;code&gt;tibble()&lt;/code&gt;, you can also manipulate it with dplyr:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;all_content %&amp;gt;% &#xA;  filter(updated_time &amp;gt;= &#34;2021-01-01&#34;) %&amp;gt;% &#xA;  arrange(created_time)&#xA;#&amp;gt; # A tibble: 77 x 15&#xA;#&amp;gt;       id guid    name    title  description    app_mode content_category url    &#xA;#&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;  &#xA;#&amp;gt;  1  1440 d7bf0e… cs_rep… cs_re… &#34;&#34;             rmd-sta… &#34;&#34;               https:…&#xA;#&amp;gt;  2  1890 be63ca… rmd     rmd4   &#34;This rmd is … rmd-sta… &#34;&#34;               https:…&#xA;#&amp;gt;  3  3724 b5e57e… team-d… Team-… &#34;&#34;             static   &#34;&#34;               https:…&#xA;#&amp;gt;  4  3979 ca22a1… github… &amp;lt;NA&amp;gt;   &#34;A table pin … static   &#34;pin&#34;            https:…&#xA;#&amp;gt;  5  4364 9ffbbd… shiny-… shiny… &#34;&#34;             shiny    &#34;&#34;               https:…&#xA;#&amp;gt;  6  4602 e21598… user-i… user-… &#34;Results pull… static   &#34;pin&#34;            https:…&#xA;#&amp;gt;  7  4603 e7c266… group-… group… &#34;Results pull… static   &#34;pin&#34;            https:…&#xA;#&amp;gt;  8  4630 f12eb8… top-5-… top-5… &#34;&#34;             python-… &#34;&#34;               https:…&#xA;#&amp;gt;  9  4631 68c9b2… top-5-… top-5… &#34;&#34;             python-… &#34;&#34;               https:…&#xA;#&amp;gt; 10  4650 ebdea3… reticu… retic… &#34;&#34;             static   &#34;&#34;               https:…&#xA;#&amp;gt; # … with 67 more rows, and 7 more variables: owner_guid &amp;lt;chr&amp;gt;,&#xA;#&amp;gt; #   owner_username &amp;lt;chr&amp;gt;, owner_first_name &amp;lt;chr&amp;gt;, owner_last_name &amp;lt;chr&amp;gt;,&#xA;#&amp;gt; #   tags &amp;lt;list&amp;gt;, created_time &amp;lt;dttm&amp;gt;, updated_time &amp;lt;dttm&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;Once your content data are filtered, &lt;code&gt;connectwidgets&lt;/code&gt; provides components for displaying information about them. The title, description, and preview image can be set &lt;a href=&#34;https://docs.rstudio.com/connect/user/content-settings/#content-metadata&#34;&gt;from the RStudio Connect dashboard.&lt;/a&gt; For content deployed to Connect where no image has been supplied, a default image will be used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In many cases, you will only see default images until your content is deployed.&lt;/p&gt; &#xA;&lt;h4&gt;card&lt;/h4&gt; &#xA;&lt;p&gt;Use a card to highlight an individual piece of content:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/connectwidgets/main/man/figures/README-card-1.png&#34; alt=&#34;a sample card&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;grid&lt;/h4&gt; &#xA;&lt;p&gt;Display multiple content items via a grid:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/connectwidgets/main/man/figures/README-grid-1.png&#34; alt=&#34;a sample grid&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;table&lt;/h4&gt; &#xA;&lt;p&gt;Provide a more detailed view with a table:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/connectwidgets/main/man/figures/README-table-1.png&#34; alt=&#34;a sample table&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;search &amp;amp; filter&lt;/h4&gt; &#xA;&lt;p&gt;The search and filter components help viewers find the content they are most interested in. You must pass the same content data frame to &lt;code&gt;rsc_search()&lt;/code&gt;, &lt;code&gt;rsc_filter()&lt;/code&gt;, and &lt;code&gt;rsc_table()&lt;/code&gt; or &lt;code&gt;rsc_grid()&lt;/code&gt; in order for filter and search to work. You can also create your own &lt;code&gt;crosstalk::SharedData()&lt;/code&gt; object to pass to the components if you want more control over searching and filtering. Read more at &lt;code&gt;vignette(&#34;using-crosstalk&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/connectwidgets/main/man/figures/README-search-filter-2.png&#34; alt=&#34;search and filter widgets&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Theming&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;connectwidgets&lt;/code&gt; components support styling in &lt;code&gt;rmarkdown::html_document&lt;/code&gt; via the &lt;a href=&#34;https://rstudio.github.io/bslib/&#34;&gt;&lt;code&gt;bslib&lt;/code&gt;&lt;/a&gt; package. You can supply a &lt;a href=&#34;https://bootswatch.com/4/&#34;&gt;Bootswatch theme&lt;/a&gt; in the yaml header, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;output:&#xA;  html_document:&#xA;    theme:&#xA;      bootswatch: minty&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or pass a custom theme consistent with your organization’s style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml:&#34;&gt;---&#xA;output:&#xA;  html_document:&#xA;    theme:&#xA;      bg: &#34;#FFF&#34;&#xA;      fg: &#34;#22333B&#34; &#xA;      primary: &#34;#4F772D&#34;&#xA;      dark: &#34;#252525&#34;&#xA;      light: &#34;#DCE6D3&#34;&#xA;      base_font: &#34;Lato, sans-serif&#34;&#xA;      heading_font: &#34;Lato, sans-serif&#34;&#xA;      border-color: &#34;#E9F5DB&#34;&#xA;      gray-100: &#34;#F7FCF0&#34;&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you’re happy with the look of your page, Publish it to RStudio Connect. Read more at &lt;code&gt;vignette(&#34;publishing&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;A more customized example:&lt;/h2&gt; &#xA;&lt;p&gt;Putting it all together, the example API portal page below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uses CSS to create a full-width image with inset text&lt;/li&gt; &#xA; &lt;li&gt;uses a Bootswatch theme&lt;/li&gt; &#xA; &lt;li&gt;overrides the &lt;code&gt;description&lt;/code&gt; text for a couple of cards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If no APIs are deployed on your RStudio Connect server, try filtering for static documents or Shiny apps instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;output:&#xA;  html_document:&#xA;    theme:&#xA;      bootswatch: lumen&#xA;---&#xA;&#xA;```{css, echo=FALSE}&#xA;.main-container {&#xA;    width: 100%;&#xA;    max-width: unset;&#xA;}&#xA;&#xA;.main {&#xA;    max-width: 940px;&#xA;    margin-left: auto;&#xA;    margin-right: auto;&#xA;}&#xA;&#xA;/* https://codepen.io/eversionsystems/pen/YOmqdj */&#xA;.jumbotron {&#xA;  color: white;&#xA;  background-image: url(&#34;https://source.unsplash.com/d30sszrW7Vw/1920x1080&#34;);&#xA;  background-position: center;&#xA;  background-repeat: no-repeat;&#xA;  background-size: cover;&#xA;  height: 50vh;&#xA;}&#xA;```&#xA;&#xA;```{r, include=FALSE}&#xA;library(connectwidgets)&#xA;library(dplyr)&#xA;library(htmltools)&#xA;&#xA;knitr::opts_chunk$set(&#xA;  comment = &#34;&#34;,&#xA;  echo = FALSE, warning = FALSE, message = FALSE&#xA;)&#xA;&#xA;rsc_content &amp;lt;-&#xA;  connect() %&amp;gt;%&#xA;  content()&#xA;&#xA;apis &amp;lt;- rsc_content %&amp;gt;%&#xA;  filter(app_mode %in% c(&#34;api&#34;, &#34;python-api&#34;))&#xA;```&#xA;&#xA;```{r}&#xA;div(&#xA;  class = &#34;jumbotron jumbotron-fluid&#34;,&#xA;  div(&#xA;    class = &#34;container&#34;,&#xA;    h1(&#34;Connect API Portal&#34;, class = &#34;display-4&#34;),&#xA;    p(&#34;Model APIs maintained by the data science team&#34;)&#xA;  )&#xA;)&#xA;```&#xA;&#xA;```{r}&#xA;div(&#xA;  class = &#34;main&#34;,&#xA;  h3(&#34;Featured APIs&#34;, class = &#34;text-center&#34;),&#xA;  {&#xA;    model_copy &amp;lt;- c(&#xA;      &#34;Our most important model: Distillery retro taiyaki fashion axe.&#xA;      Art party cray intelligentsia flexitarian.&#34;,&#xA;      &#34;Our second most important model: Pug af twee portland pitchfork brunch&#xA;      kogi gochujang organic migas shaman four dollar toast 90&#39;s slow-carb.&#34;&#xA;      )&#xA;&#xA;    apis %&amp;gt;%&#xA;      slice_head(n = 2) %&amp;gt;%&#xA;      mutate(&#xA;      description = model_copy&#xA;      ) %&amp;gt;%&#xA;      rsc_card()&#xA;  },&#xA;  h3(&#34;All APIs&#34;, class = &#34;text-center&#34;),&#xA;  p(&#34;that thing George Box said one time. You know what thing.&#34;),&#xA;  {&#xA;    tagList(&#xA;      rsc_cols(rsc_search(apis), rsc_filter(apis)),&#xA;      rsc_grid(apis)&#xA;    )&#xA;  }&#xA;)&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>bossiernesto/RCommon</title>
    <updated>2022-08-04T01:52:04Z</updated>
    <id>tag:github.com,2022-08-04:/bossiernesto/RCommon</id>
    <link href="https://github.com/bossiernesto/RCommon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Common functions for general use in R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RCommon&lt;/h1&gt; &#xA;&lt;p&gt;A small package for my common functions that i generally use in R. These functions are organized by functionality.&lt;/p&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;p&gt;Just run the following command in your shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;shell$ R CMD INSTALL -l /path/to/library rcommon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you want to run the battery of tests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;shell$ R CMD check rcommon&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>