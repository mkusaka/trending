<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-24T01:33:53Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MilesMcBain/datapasta</title>
    <updated>2024-10-24T01:33:53Z</updated>
    <id>tag:github.com,2024-10-24:/MilesMcBain/datapasta</id>
    <link href="https://github.com/MilesMcBain/datapasta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;On top of spaghetti, all covered in cheese....&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;datapasta 3.1.1 &#39;Leave to Simmer&#39;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://milesmcbain.r-universe.dev&#34;&gt;&lt;img src=&#34;https://milesmcbain.r-universe.dev/badges/datapasta&#34; alt=&#34;r-universe status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.r-pkg.org/pkg/datapasta&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/datapasta&#34; alt=&#34;CRAN status.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=datapasta&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/datapasta&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/milesmcbain/datapasta/master/inst/media/hex_web.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;h1&gt;The Goods&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/milesmcbain/datapasta/master/inst/media/tribble_paste.gif&#34; alt=&#34;pow!&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introducing datapasta&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;datapasta&lt;/code&gt; is about reducing resistance associated with copying and pasting data to and from R. It is a response to the realisation that I often found myself using intermediate programs like Sublime to munge text into suitable formats. Addins and functions in &lt;code&gt;datapasta&lt;/code&gt; support a wide variety of input and output situations, so it (probably) &#34;just works&#34;. Hopefully tools in this package will remove such intermediate steps and associated frustrations from our data slinging workflows.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux users will need to install either &lt;code&gt;xsel&lt;/code&gt; or &lt;code&gt;xclip&lt;/code&gt;. These applications provide an interface to X selections (clipboard-like). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example: &lt;code&gt;sudo apt-get install xsel&lt;/code&gt; - it&#39;s 72kb...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows and MacOS have nothing extra to do.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;R Universe (preferred)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;install with R universe repo:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#xA;   &#34;datapasta&#34;, &#xA;   repos = c(mm = &#34;https://milesmcbain.r-universe.dev&#34;, getOption(&#34;repos&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Set the keyboard shortcuts using &lt;strong&gt;Tools&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Addins&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Browse Addins&lt;/strong&gt;, then click &lt;strong&gt;Keyboard Shortcuts...&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;CRAN (outdated)&lt;/h2&gt; &#xA;&lt;p&gt;For now, no further versions of &lt;code&gt;datapasta&lt;/code&gt; will be going to CRAN. There are some known bugs in the CRAN version that have been fixed in &lt;code&gt;3.1.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;install.packages(&#34;datapasta&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Use with RStudio&lt;/h2&gt; &#xA;&lt;h3&gt;Getting data into source&lt;/h3&gt; &#xA;&lt;p&gt;At the moment this package contains these RStudio addins that paste data to the cursor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tribble_paste&lt;/code&gt; which pastes a table as a nicely formatted call to &lt;code&gt;tibble::tribble()&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommend &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;t&lt;/kbd&gt; as shortcut.&lt;/li&gt; &#xA;   &lt;li&gt;Table can be delimited with tab, comma, pipe or semicolon.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector_paste&lt;/code&gt; which will paste delimited data as a vector definition, e.g. &lt;code&gt;c(&#34;a&#34;, &#34;b&#34;)&lt;/code&gt; etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommend &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;v&lt;/kbd&gt; as shortcut.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vector_paste_vertical&lt;/code&gt; which will paste delimited data as a vertically formatted vector definition. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommend &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;v&lt;/kbd&gt; as shortcut&lt;/li&gt; &#xA;   &lt;li&gt;example output:&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;c(&#34;Mint&#34;,&#xA;  &#34;Fedora&#34;,&#xA;  &#34;Debian&#34;,&#xA;  &#34;Ubuntu&#34;,&#xA;  &#34;OpenSUSE&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;df_paste&lt;/code&gt; which pastes a table on the clipboard as a standard &lt;code&gt;data.frame&lt;/code&gt; definition rather than a &lt;code&gt;tribble&lt;/code&gt; call. This has certain advantages in the context of reproducible examples and educational posts. Many thanks to &lt;a href=&#34;https://github.com/jonocarroll&#34;&gt;Jonathan Carroll&lt;/a&gt; for getting this rolling and coding the bulk of the feature. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommend &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;d&lt;/kbd&gt; as shortcut.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dt_paste&lt;/code&gt; which is the same as &lt;code&gt;df_paste&lt;/code&gt;, but for &lt;code&gt;data.table&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Massaging data in source&lt;/h3&gt; &#xA;&lt;p&gt;There are two Addins that can help with creating and aligning data in your editor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Fiddle Selection&lt;/code&gt; will perform magic on a selection. It can be used to:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Turn raw data delimited by any combination of commas, spaces, and newlines into a &lt;code&gt;c()&lt;/code&gt; expression&lt;/li&gt; &#xA;   &lt;li&gt;Pivot a &lt;code&gt;c()&lt;/code&gt; expr between horizontal and vertical layout.&lt;/li&gt; &#xA;   &lt;li&gt;Reflow messy &lt;code&gt;tribble()&lt;/code&gt; and &lt;code&gt;data.frame()&lt;/code&gt; exprs.&lt;/li&gt; &#xA;   &lt;li&gt;Recommend &lt;kbd&gt;Ctrl&lt;/kbd&gt; +&lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;f&lt;/kbd&gt; as shortcut.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Toggle Vector Quotes&lt;/code&gt; will toggle a &lt;code&gt;c()&lt;/code&gt; expr between all elements wrapped in &lt;code&gt;&#34;&#34;&lt;/code&gt; and all bare unquoted form. Handy in combination with above to save mucho keystrokes.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommend &lt;kbd&gt;Ctrl&lt;/kbd&gt; +&lt;kbd&gt;Shift&lt;/kbd&gt; + &lt;kbd&gt;q&lt;/kbd&gt; as shortcut.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Getting Data out of an R session&lt;/h3&gt; &#xA;&lt;p&gt;There are two R functions available that accept R objects and output formatted text for pasting to a &lt;a href=&#34;https://github.com/tidyverse/reprex&#34;&gt;reprex&lt;/a&gt; or other application:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dpasta&lt;/code&gt; accepts tibbles, data.frames, and vectors. Data is output in a format that matches in input class. Formatted text is pasted at the cursor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dmdclip&lt;/code&gt; accepts the same inputs as &lt;code&gt;dpasta&lt;/code&gt; but inserts the formatted text onto the clipboard, preceded by 4 spaces so that is can be as pasted as a preformatted block to Github, Stackoverflow etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use with other editors&lt;/h2&gt; &#xA;&lt;p&gt;The only hard dependency of &lt;code&gt;datapasta&lt;/code&gt; is &lt;code&gt;readr&lt;/code&gt; for type guessing. All the above &lt;code&gt;*paste&lt;/code&gt; functions can be called directly instead of as an addin, and will fall back to console output if the &lt;code&gt;rstudioapi&lt;/code&gt; is not available.&lt;/p&gt; &#xA;&lt;p&gt;On system without access to the clipboard (or without &lt;code&gt;clipr&lt;/code&gt; installed) &lt;code&gt;datapasta&lt;/code&gt; can still be used to output R objects from an R session. &lt;code&gt;dpasta&lt;/code&gt; is probably the only function you care about in this scenario.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;datapasta&lt;/code&gt; imports &lt;code&gt;clipr&lt;/code&gt; and &lt;code&gt;rstudioapi&lt;/code&gt; so as to make installation smooth and easy for most users. If you wish to avoid installing an &lt;code&gt;rstudioapi&lt;/code&gt; you will never use you can use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;install.packages(&#34;datapasta&#34;, dependencies = &#34;Depends&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Followed by &lt;code&gt;install.packages(&#34;clipr&#34;)&lt;/code&gt; to enable clipboard features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Pitfalls&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tribble_paste&lt;/code&gt; works well with CSVs, excel files, and html tables, but is currently brittle with respect to irregular table structures like merged cells or multi-line column headings. For some reason Wikipedia seems chock full of these. :(&lt;/li&gt; &#xA; &lt;li&gt;Quoted csv data, where the quotes contain commas will not be parsed correctly.&lt;/li&gt; &#xA; &lt;li&gt;Nested list columns have limited support with &lt;code&gt;tribble_paste()&lt;/code&gt;/&lt;code&gt;dpasta()&lt;/code&gt;. Nested lists of length 1 fail unless all are length 1 - It&#39;s complicated. You still get some output so it might be viable to fix and reflow with &lt;code&gt;Fiddle Selection&lt;/code&gt;. Tread with caution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Prior art&lt;/h1&gt; &#xA;&lt;p&gt;This package is made possible by &lt;a href=&#34;https://github.com/mdlincoln/clipr&#34;&gt;mdlincon&#39;s clipr&lt;/a&gt;, and Hadley&#39;s packages &lt;a href=&#34;https://github.com/hadley/tibble&#34;&gt;tibble&lt;/a&gt; and &lt;a href=&#34;https://github.com/hadley/tibble&#34;&gt;readr&lt;/a&gt; (for data-type guessing). I especially appreciate &lt;code&gt;clipr&#39;s&lt;/code&gt; thoughtful approach to the clipboard on Linux, which pretty much every other R clipboard package just nope&#39;d out on.&lt;/p&gt; &#xA;&lt;h1&gt;Future developments&lt;/h1&gt; &#xA;&lt;p&gt;I am interested in expanding the types of objects supported by the output functions &lt;code&gt;dpasta&lt;/code&gt;. I would also like to eventually have &lt;code&gt;Fiddle Selection&lt;/code&gt; to pivot function calls and named vectors. Feel free to contribute your ideas to the open issues.&lt;/p&gt; &#xA;&lt;h1&gt;Bonus&lt;/h1&gt; &#xA;&lt;p&gt;0 to &lt;code&gt;datapasta&lt;/code&gt; in 64 seconds via a video vignette:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/Sz-tEVqZh5s&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/Sz-tEVqZh5s/0.jpg&#34; alt=&#34;Datapasta in 64 seconds&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>