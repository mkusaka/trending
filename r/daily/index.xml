<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-01T01:38:26Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>r-lib/httr2</title>
    <updated>2023-11-01T01:38:26Z</updated>
    <id>tag:github.com,2023-11-01:/r-lib/httr2</id>
    <link href="https://github.com/r-lib/httr2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make HTTP requests and process their responses. A modern reimagining of httr.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;httr2&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/r-lib/httr2/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-lib/httr2/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-lib/httr2?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-lib/httr2/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;httr2 is a ground-up rewrite of &lt;a href=&#34;https://httr.r-lib.org&#34;&gt;httr&lt;/a&gt; that provides a pipeable API with an explicit request object that solves more problems felt by packages that wrap APIs (e.g.&amp;nbsp;built-in rate-limiting, retries, OAuth, secure secrets, and more).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install httr from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;httr2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use httr2, start by creating a &lt;strong&gt;request&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(httr2)&#xA;&#xA;req &amp;lt;- request(&#34;https://r-project.org&#34;)&#xA;req&#xA;#&amp;gt; &amp;lt;httr2_request&amp;gt;&#xA;#&amp;gt; GET https://r-project.org&#xA;#&amp;gt; Body: empty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can tailor this request with the &lt;code&gt;req_&lt;/code&gt; family of functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Add custom headers&#xA;req %&amp;gt;% req_headers(&#34;Accept&#34; = &#34;application/json&#34;)&#xA;#&amp;gt; &amp;lt;httr2_request&amp;gt;&#xA;#&amp;gt; GET https://r-project.org&#xA;#&amp;gt; Headers:&#xA;#&amp;gt; • Accept: &#39;application/json&#39;&#xA;#&amp;gt; Body: empty&#xA;&#xA;# Add a body, turning it into a POST&#xA;req %&amp;gt;% req_body_json(list(x = 1, y = 2))&#xA;#&amp;gt; &amp;lt;httr2_request&amp;gt;&#xA;#&amp;gt; POST https://r-project.org&#xA;#&amp;gt; Body: json encoded data&#xA;&#xA;# Automatically retry if the request fails&#xA;req %&amp;gt;% req_retry(max_tries = 5)&#xA;#&amp;gt; &amp;lt;httr2_request&amp;gt;&#xA;#&amp;gt; GET https://r-project.org&#xA;#&amp;gt; Body: empty&#xA;#&amp;gt; Policies:&#xA;#&amp;gt; • retry_max_tries: 5&#xA;&#xA;# Change the HTTP method&#xA;req %&amp;gt;% req_method(&#34;PATCH&#34;)&#xA;#&amp;gt; &amp;lt;httr2_request&amp;gt;&#xA;#&amp;gt; PATCH https://r-project.org&#xA;#&amp;gt; Body: empty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And see exactly what httr2 will send to the server with &lt;code&gt;req_dry_run()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;req %&amp;gt;% req_dry_run()&#xA;#&amp;gt; GET / HTTP/1.1&#xA;#&amp;gt; Host: r-project.org&#xA;#&amp;gt; User-Agent: httr2/0.2.3.9000 r-curl/5.0.2 libcurl/8.1.2&#xA;#&amp;gt; Accept: */*&#xA;#&amp;gt; Accept-Encoding: deflate, gzip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;req_perform()&lt;/code&gt; to perform the request, retrieving a &lt;strong&gt;response&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resp &amp;lt;- req_perform(req)&#xA;resp&#xA;#&amp;gt; &amp;lt;httr2_response&amp;gt;&#xA;#&amp;gt; GET https://www.r-project.org/&#xA;#&amp;gt; Status: 200 OK&#xA;#&amp;gt; Content-Type: text/html&#xA;#&amp;gt; Body: In memory (6549 bytes)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;resp_&lt;/code&gt; functions help you extract various useful components of the response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;resp %&amp;gt;% resp_content_type()&#xA;#&amp;gt; [1] &#34;text/html&#34;&#xA;resp %&amp;gt;% resp_status_desc()&#xA;#&amp;gt; [1] &#34;OK&#34;&#xA;resp %&amp;gt;% resp_body_html()&#xA;#&amp;gt; {html_document}&#xA;#&amp;gt; &amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;#&amp;gt; [1] &amp;lt;head&amp;gt;\n&amp;lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=UTF-8 ...&#xA;#&amp;gt; [2] &amp;lt;body&amp;gt;\n    &amp;lt;div class=&#34;container page&#34;&amp;gt;\n      &amp;lt;div class=&#34;row&#34;&amp;gt;\n       ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Major differences to httr&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can now create and modify a request without performing it. This means that there’s now a single function to perform the request and fetch the result: &lt;code&gt;req_perform()&lt;/code&gt;. &lt;code&gt;req_perform()&lt;/code&gt; replaces &lt;code&gt;httr::GET()&lt;/code&gt;, &lt;code&gt;httr::POST()&lt;/code&gt;, &lt;code&gt;httr::DELETE()&lt;/code&gt;, and more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HTTP errors are automatically converted into R errors. Use &lt;code&gt;req_error()&lt;/code&gt; to override the defaults (which turn all 4xx and 5xx responses into errors) or to add additional details to the error message.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can automatically retry if the request fails or encounters a transient HTTP error (e.g.&amp;nbsp;a 429 rate limit request). &lt;code&gt;req_retry()&lt;/code&gt; defines the maximum number of retries, which errors are transient, and how long to wait between tries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;OAuth support has been totally overhauled to directly support many more flows and to make it much easier to both customise the built-in flows and to create your own.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can manage secrets (often needed for testing) with &lt;code&gt;secret_encrypt()&lt;/code&gt; and friends. You can obfuscate mildly confidential data with &lt;code&gt;obfuscate()&lt;/code&gt;, preventing it from being scraped from published code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can automatically cache all cacheable results with &lt;code&gt;req_cache()&lt;/code&gt;. Relatively few API responses are cacheable, but when they are it typically makes a big difference.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;httr2 wouldn’t be possible without &lt;a href=&#34;https://jeroen.cran.dev/curl/&#34;&gt;curl&lt;/a&gt;, &lt;a href=&#34;https://github.com/jeroen/openssl/&#34;&gt;openssl&lt;/a&gt;, &lt;a href=&#34;https://jeroen.cran.dev/jsonlite/&#34;&gt;jsonlite&lt;/a&gt;, and &lt;a href=&#34;https://github.com/r-lib/jose/&#34;&gt;jose&lt;/a&gt;, which are all maintained by &lt;a href=&#34;https://github.com/jeroen&#34;&gt;Jeroen Ooms&lt;/a&gt;. A big thanks also go to &lt;a href=&#34;https://jennybryan.org&#34;&gt;Jenny Bryan&lt;/a&gt; and &lt;a href=&#34;https://research.google/people/CraigCitro/&#34;&gt;Craig Citro&lt;/a&gt; who have given me much useful feedback on both the design of the internals and the user facing API.&lt;/p&gt;</summary>
  </entry>
</feed>