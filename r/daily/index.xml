<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-03T01:46:32Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mlverse/chattr</title>
    <updated>2023-06-03T01:46:32Z</updated>
    <id>tag:github.com,2023-06-03:/mlverse/chattr</id>
    <link href="https://github.com/mlverse/chattr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chattr&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/edgararuiz/chattr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/edgararuiz/chattr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/edgararuiz/chattr?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/edgararuiz/chattr/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=chattr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/chattr.png&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/man/figures/lifecycle-experimental.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/man/figures/readme/chattr.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- toc: start --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#available-models&#34;&gt;Available models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#using&#34;&gt;Using&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#the-app&#34;&gt;The App&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#keyboard-shortcut&#34;&gt;Keyboard Shortcut&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#how-to-setup-the-keyboard-shortcut&#34;&gt;How to setup the keyboard shortcut&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- toc: end --&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;chattr&lt;/code&gt; is an interface to LLMs (Large Language Models). It enables interaction with the model directly from the RStudio IDE. &lt;code&gt;chattr&lt;/code&gt; allows you to submit a prompt to the LLM from your script, or by using the provided Shiny Gadget.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chattr&lt;/code&gt;’s main goal is to aid in EDA tasks. The additional information appended to your request, provides a sort of “guard rails”, so that the packages and techniques we usually recommend as best practice, are used in the model’s responses.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Since this is a very early version of the package install the package from Github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;edgararuiz/chattr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available models&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;chattr&lt;/code&gt; provides two main integration with two main LLM back-ends. Each back-end provides access to multiple LLM types:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;colgroup&gt; &#xA;  &lt;col style=&#34;width: 25%&#34;&gt; &#xA;  &lt;col style=&#34;width: 48%&#34;&gt; &#xA;  &lt;col style=&#34;width: 25%&#34;&gt; &#xA; &lt;/colgroup&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr class=&#34;header&#34;&gt; &#xA;   &lt;th style=&#34;text-align: center;&#34;&gt;Provider&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align: center;&#34;&gt;Models&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align: center;&#34;&gt;Setup Instructions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr class=&#34;odd&#34;&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://platform.openai.com/docs/introduction&#34;&gt;OpenAI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt;GPT Models accessible via the OpenAI’s REST API. &lt;code&gt;chattr&lt;/code&gt; provides a convenient way to interact with GPT 3.5, and DaVinci 3.&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://mlverse.github.io/chattr/articles/openai-gpt.html&#34;&gt;Interact with OpenAI GPT models&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;even&#34;&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://github.com/kuvaus/LlamaGPTJ-chat&#34;&gt;LLamaGPT-Chat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt;LLM models available in your computer. Including GPT-J, LLaMA, and MPT. Tested on a &lt;a href=&#34;https://gpt4all.io/index.html&#34;&gt;GPT4ALL&lt;/a&gt; model. &lt;strong&gt;LLamaGPT-Chat&lt;/strong&gt; is a command line chat program for models written in C++.&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;https://mlverse.github.io/chattr/articles/backend-llamagpt.html&#34;&gt;Interact with local models&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The idea is that as time goes by, more back-ends will be added.&lt;/p&gt; &#xA;&lt;h2&gt;Using&lt;/h2&gt; &#xA;&lt;h3&gt;The App&lt;/h3&gt; &#xA;&lt;p&gt;The main way to use &lt;code&gt;chattr&lt;/code&gt; is through the Shiny Gadget app. By default, it runs inside the Viewer pane. The fastest way to activate the app is by calling it via the provided function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chattr::chattr_app()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/man/figures/readme/chat1.png&#34; alt=&#34;Screenshot of the Sniny gadget app in a dark mode RStudio theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lot of effort was put in to make the app’s appearance as close as possible to the IDE. This way it feels more integrated with your work space. This includes switching the color scheme based on the current RStudio theme being light, or dark.&lt;/p&gt; &#xA;&lt;p&gt;Automatically, the app will automatically add buttons to each code section. The buttons lets us copy the code to the clipboard, or to send it to the document. If you &lt;a href=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/#keyboard-shortcut&#34;&gt;“call”&lt;/a&gt; the app from a Quarto document, the app will envelop the code inside a chunk.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;chattr&lt;/code&gt; enriches your request with additional instructions, name and structure of data frames currently in your environment, the path for the data files in your working directory. If supported by the model, &lt;code&gt;chattr&lt;/code&gt; will include the current chat history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/man/figures/readme/chattr-diagram.png&#34; alt=&#34;Diagram that illustrates how chattr handles model requests&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To see what &lt;code&gt;chattr&lt;/code&gt; will send to the model, set the &lt;code&gt;preview&lt;/code&gt; argument to &lt;code&gt;TRUE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(chattr)&#xA;&#xA;data(mtcars)&#xA;data(iris)&#xA;&#xA;chattr(preview = TRUE)&#xA;#&amp;gt; &#xA;#&amp;gt; ── chattr ──────────────────────────────────────────────────────────────────────&#xA;#&amp;gt; &#xA;#&amp;gt; ── Preview for: Console&#xA;#&amp;gt; • Provider: Open AI - Chat Completions&#xA;#&amp;gt; • Path/URL: https://api.openai.com/v1/chat/completions&#xA;#&amp;gt; • Model: gpt-3.5-turbo&#xA;#&amp;gt; • temperature: 0.01&#xA;#&amp;gt; • max_tokens: 1000&#xA;#&amp;gt; • stream: TRUE&#xA;#&amp;gt; &#xA;#&amp;gt; ── Prompt:&#xA;#&amp;gt; role: system&#xA;#&amp;gt; content: You are a helpful coding assistant&#xA;#&amp;gt; role: user&#xA;#&amp;gt; content:&#xA;#&amp;gt; * Use the &#39;Tidy Modeling with R&#39; (https://www.tmwr.org/) book as main reference&#xA;#&amp;gt; * Use the &#39;R for Data Science&#39; (https://r4ds.had.co.nz/) book as main reference&#xA;#&amp;gt; * Use tidyverse packages: readr, ggplot2, dplyr, tidyr&#xA;#&amp;gt; * For models, use tidymodels packages: recipes, parsnip, yardstick, workflows,&#xA;#&amp;gt; broom&#xA;#&amp;gt; * Avoid explanations unless requested by user, expecting code only&#xA;#&amp;gt; [Your future prompt goes here]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keyboard Shortcut&lt;/h2&gt; &#xA;&lt;p&gt;The best way to access &lt;code&gt;chattr&lt;/code&gt;’s app is by setting up a keyboard shortcut for it. This package includes an RStudio Addin that gives us direct access to the app, which in turn, allows a &lt;strong&gt;keyboard shortcut&lt;/strong&gt; to be assigned to the addin. The name of the addin is: “Open Chat”. If you are not familiar with how to assign a keyboard shortcut see the next section.&lt;/p&gt; &#xA;&lt;h3&gt;How to setup the keyboard shortcut&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Select &lt;em&gt;Tools&lt;/em&gt; in the top menu, and then select &lt;em&gt;Modify Keyboard Shortcuts&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/man/figures/readme/keyboard-shortcuts.png&#34; width=&#34;700&#34; alt=&#34;Screenshot that shows where to find the option to modify the keyboard shortcuts&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Search for the &lt;code&gt;chattr&lt;/code&gt; adding by writing “open chat”, in the search box&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/man/figures/readme/addin-find.png&#34; width=&#34;500&#34; alt=&#34;Screenshot that shows where to input the addin search&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To select a key combination for your shortcut, click on the Shortcut box and then type &lt;em&gt;press&lt;/em&gt; the key combination in your keyboard. In my case, I chose &lt;em&gt;Ctrl+Shift+C&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mlverse/chattr/main/man/figures/readme/addin-assign.png&#34; width=&#34;500&#34; alt=&#34;Screenshot that shows what the interface looks like when a shortcut has been selected&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>