<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-23T01:37:50Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>johnmyleswhite/BanditsBook</title>
    <updated>2023-08-23T01:37:50Z</updated>
    <id>tag:github.com,2023-08-23:/johnmyleswhite/BanditsBook</id>
    <link href="https://github.com/johnmyleswhite/BanditsBook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for my book on Multi-Armed Bandit Algorithms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Code to Accompany the Book &#34;Bandit Algorithms for Website Optimization&#34;&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains code in several languages that implements several standard algorithms for solving the Multi-Armed Bandits Problem, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;epsilon-Greedy&lt;/li&gt; &#xA; &lt;li&gt;Softmax (Boltzmann)&lt;/li&gt; &#xA; &lt;li&gt;UCB1&lt;/li&gt; &#xA; &lt;li&gt;UCB2&lt;/li&gt; &#xA; &lt;li&gt;Hedge&lt;/li&gt; &#xA; &lt;li&gt;Exp3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also contains code that provides a testing framework for bandit algorithms based around simple Monte Carlo simulations.&lt;/p&gt; &#xA;&lt;h1&gt;Languages&lt;/h1&gt; &#xA;&lt;p&gt;This codebase is split up by language. In most languages, there are parallel implementations of the core algorithms and infrastructure for testing the algorithms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In R, there is a body of code for visualizing the results of simulations and analyzing those results. The R code would benefit from some refactoring to make it DRYer.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in seeing how some of these algorithms would be implemented in Javascript, you should try out Mark Reid&#39;s code: &lt;a href=&#34;http://mark.reid.name/code/bandits/&#34;&gt;http://mark.reid.name/code/bandits/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for Java code, try Dani Sola&#39;s work: &lt;a href=&#34;https://github.com/danisola/bandit&#34;&gt;https://github.com/danisola/bandit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for Scala code, try everpeace(Shingo Omura)&#39;s work: &lt;a href=&#34;https://github.com/everpeace/banditsbook-scala&#34;&gt;https://github.com/everpeace/banditsbook-scala&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for Go code, try Rany Keddo&#39;s work: &lt;a href=&#34;https://github.com/purzelrakete/bandit&#34;&gt;https://github.com/purzelrakete/bandit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for Clojure code, try Paul Ingles&#39;s work: &lt;a href=&#34;https://github.com/pingles/clj-bandit&#34;&gt;https://github.com/pingles/clj-bandit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for Swift code, see &lt;a href=&#34;https://github.com/crenwick/Swiper&#34;&gt;https://github.com/crenwick/Swiper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a Flask implementation, see &lt;a href=&#34;https://github.com/DeaconDesperado/flask_mab&#34;&gt;https://github.com/DeaconDesperado/flask_mab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;To try out this code, you can go into the Python or Julia directories and then run the demo script.&lt;/p&gt; &#xA;&lt;p&gt;In Python, that looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Julia, that looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;julia demo.jl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should step through that code line-by-line to understand what the functions are doing. The book provides more in-depth explanations of how the algorithms work.&lt;/p&gt; &#xA;&lt;p&gt;The Ruby code was contributed by Kashif Rasul. If you&#39;re interested in translating the code into another language, please submit a pull request. I will merge any new implementations as soon as I can.&lt;/p&gt; &#xA;&lt;h1&gt;Adding New Algorithms: API Expectations&lt;/h1&gt; &#xA;&lt;p&gt;As described in the book, a Bandit algorithm should implement two methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;select_arm()&lt;/code&gt;: A method that returns the index of the Arm that the Bandit object selects on the current play. No arguments are required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;update()&lt;/code&gt;: A method that updates the internal state of the Bandit object in response to its most recently selected arm&#39;s reward. The index of the chosen arm and the amount of reward received must be passed as arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As described in the book, an Arm simulator should implement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;draw()&lt;/code&gt;: A method that returns a single instance of reward from the arm that was pulled. No arguments are required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, the Bandit algorithms are designed to implement one additional method used in simulations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;initialize()&lt;/code&gt;: A method that returns nothing. Instead, this method resets all of the data-driven variables in a Bandit object. For most objects, this resets the counts and values field to their initial states. No arguments are required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Beyond the testing framework described in the book, I am currently providing an additional system built around the concept of an Environment. Environment objects encapsulate not only a set of Arms, but also a mechanism for having those Arms change over time. This allows you to simulate complex scenarios that aren&#39;t well described by a constant set of arms.&lt;/p&gt; &#xA;&lt;p&gt;If you would like to implement your own Environment, you will need to provide a very simple interface. The Environment interface requries you to implement two methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;arms()&lt;/code&gt;: A method that returns the array of arms that exist at time T. You must pass T as an argument.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n_arms()&lt;/code&gt;: A method that returns the number of arms that the environment will return with each call to &lt;code&gt;arms()&lt;/code&gt;. While the arms may change over time, the number of arms should not. No arguments are required.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>