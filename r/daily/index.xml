<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-04T01:29:45Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>r-dbi/dbi3</title>
    <updated>2024-05-04T01:29:45Z</updated>
    <id>tag:github.com,2024-05-04:/r-dbi/dbi3</id>
    <link href="https://github.com/r-dbi/dbi3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DBI revisited&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dbi3&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=dbi3&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/dbi3&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of this repository is to design a new database interface from scratch, based on the lessons learned from DBI and the previous R Consortium projects. The interface provides compatibility to DBI in both directions: the new interface supports existing DBI backends (possibly with degraded performance), and backends implemented against the new interface automatically support DBI. Backends for the new interface will be easier to implement, because they can use the full feature set provided by dbi3.&lt;/p&gt; &#xA;&lt;p&gt;In the beginning, the issue tracker will be used to collect and categorize issues that did not fit the scope of {DBI} or related packages. Eventually, the repository will contain a working package and a design document.&lt;/p&gt; &#xA;&lt;h2&gt;Properties&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;async-first &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;required for efficient web applications: Shiny and Plumber&lt;/li&gt; &#xA;   &lt;li&gt;simpler to implement a synchronous interface from an async interface than the other way round&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;only pure functions/methods with callbacks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;idiomatic to R&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;agnostic to query language &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;concepts: context, connection, query objects, tables, query strings, parameters&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;reference implementation: generic backend for DBI classic&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues and solutions&lt;/h2&gt; &#xA;&lt;p&gt;The following list of issues, collected 2024-04-14, were categorized by how (and where) they can be solved, taking into account the new &lt;a href=&#34;https://arrow.apache.org/adbc/&#34;&gt;ADBC standard&lt;/a&gt; and the new &lt;a href=&#34;https://adbi.r-dbi.org/&#34;&gt;adbi package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Solved by ADBC: Performance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/20&#34;&gt;Query cancellation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/48&#34;&gt;Arrow/Flight SQL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/9&#34;&gt;let dbreadtable use copy &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Solved by ADBC: Data format&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/2&#34;&gt;Send parameter types&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/10&#34;&gt;libpq expects knowledge about data types for parametrized queries&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/58&#34;&gt;Optionally return tibbles&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/6&#34;&gt;Raise error if data type domain differs between R and database&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/22&#34;&gt;Specialised data types in R&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/17&#34;&gt;Think about column conversion&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/44&#34;&gt;Support arrays natively&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Solved by ADBC: Usability&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/47&#34;&gt;Rethink &lt;code&gt;immediate&lt;/code&gt; argument&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/56&#34;&gt;Streaming multiple statements in a single dbExecute/dbQuery/etc. call&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/51&#34;&gt;Add default dbWriteTable() method&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To be solved by ADBC/Arrow: Usability&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/19&#34;&gt;Think about asynchronous operations&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/11&#34;&gt;Implement RStudio Connection Contract&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/23&#34;&gt;dbGetChunkedQuery()&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interface: wrapper around adbcdrivermanager?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/16&#34;&gt;Progress bar for dbWriteTable?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/24&#34;&gt;dbWithConnection() and dbWithResult()&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/25&#34;&gt;Specify n argument for dbReadTable()&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/57&#34;&gt;Default connection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quoting: dbplyr?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/55&#34;&gt;&lt;code&gt;dbQuoteIdentifier&lt;/code&gt; should validate SQL inputs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/46&#34;&gt;Reading and writing tables with dots in name&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/45&#34;&gt;Stronger guarantees for quoting literals&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/52&#34;&gt;Specify limits per connection or per driver&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SQL generation: dbplyr?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/4&#34;&gt;Allow creation of tables with primary key and/or index&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/18&#34;&gt;Do you have any intention of adding the &#34;upsert&#34; function?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/43&#34;&gt;Support passing lists as arguments for queries like &lt;code&gt;SELECT a, b WHERE a IN ($1)&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/53&#34;&gt;How to create an external table in Hive?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/41&#34;&gt;Name collision when creating tables&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Introspection: dm?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/15&#34;&gt;More arguments to dbListObjects() to narrow result set&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/12&#34;&gt;Think about listing temporary tables&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interface: maintenance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/5&#34;&gt;Use ellipsis::check_dots_used() in dbConnect&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/7&#34;&gt;Consider standard timezone and timezone_out arguments to dbConnect()&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/37&#34;&gt;Add tweak for restricting to one result set per connection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation: maintenance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/26&#34;&gt;Dynamically list methods in generic documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/27&#34;&gt;dbConnect should give advice about argument names&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/35&#34;&gt;Should backends use &#34;Depends: DBI&#34;?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testing: maintenance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/49&#34;&gt;How to run tests on a user&#39;s database?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/36&#34;&gt;Reenable test for dbIsReadOnly()&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/8&#34;&gt;Think about moving DBItest code here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/3&#34;&gt;Avoid DML in tests&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/42&#34;&gt;Avoid hard-coded data types in queries&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/40&#34;&gt;Specify and test case-sensitivity for table names&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/39&#34;&gt;Test for formals(dbXxx) ineffective&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/38&#34;&gt;Specify binding of different argument types for different calls of dbBind()&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/50&#34;&gt;Feature Request: Virtual connection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parameterized queries: unclear, are they necessary for data analysis?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/34&#34;&gt;Provide interfaces and support for Parameterised Queries&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/1&#34;&gt;Think about ways to specify placeholder in prepared/parametrized query&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/13&#34;&gt;Used named parameters in parameterized statements&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Reconnection: unclear, long-lived or serializable connections seem a specialized use case?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/54&#34;&gt;Reconnection&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/14&#34;&gt;&lt;code&gt;dbIsValid()&lt;/code&gt; fails in new sessions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/21&#34;&gt;Connector class needs to store expression to create driver&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/30&#34;&gt;Feature request: add a dbResetConnection() generic&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Out of scope?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/29&#34;&gt;Interface to call stored procedure with various parameters and their attributes need to be supported in DBI&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/r-dbi/dbi3/issues/28&#34;&gt;Any way to know if a connection is already inside a transaction?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hrbrmstr/rdaradar</title>
    <updated>2024-05-04T01:29:45Z</updated>
    <id>tag:github.com,2024-05-04:/hrbrmstr/rdaradar</id>
    <link href="https://github.com/hrbrmstr/rdaradar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;☢️ Safety Radar for RDA Files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rdaradar (RDA Radar)&lt;/h1&gt; &#xA;&lt;p&gt;Sanity check R data files before use.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;“Researchers” from HiddenLayer took advantage of the hype cycle before RSAC 2024 to &lt;a href=&#34;https://hiddenlayer.com/research/r-bitrary-code-execution/&#34;&gt;broadcast a non-vulnerability in R&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;They (IMO) inappropriately received a CVE assignment (CVE-2024-27322) for, what is, expected behavior in the deserialization of R objects via standard mechanisms. I am not shocked as I am also of the opinion that the current state of “CVE” in general is “busted”.&lt;/p&gt; &#xA;&lt;p&gt;There is no mention of this CVE in the release of R 4.4.0 which &lt;em&gt;did&lt;/em&gt; modify the behavior of deserializing certain objects within R data files. I am going to make an assumption the change was made because of this CVE.&lt;/p&gt; &#xA;&lt;p&gt;However, the “weakness” is by no means closed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mastodon.social/@klmr#.&#34;&gt;Konrad Rudolph&lt;/a&gt; and &lt;a href=&#34;https://mstdn.science/@idavydov&#34;&gt;Iakov Davydov&lt;/a&gt; did some ace cyber sleuthing and &lt;a href=&#34;https://mastodon.social/@klmr/112360501388055184&#34;&gt;figured out other ways R data file deserialization can be abused&lt;/a&gt;. Please take a moment and drop a note on Mastodon to them saying “thank you”. This is excellent work. We need more folks like them in this ecosystem.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that &lt;em&gt;this is all expected behavior&lt;/em&gt;. R has many “defaults” that can get one into trouble. Seven years ago I &lt;a href=&#34;https://github.com/hrbrmstr/rpwnd/&#34;&gt;made this example repo/package&lt;/a&gt; to demonstrate some of the more overt “gotchas” that can lead to potential unwanted behavior. Back in 2019, the fine folks at rOpenSci &lt;a href=&#34;https://ropensci.org/blog/2019/04/09/commcall-may2019/#resources&#34;&gt;also let us poke at making R a bit safer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;I’m including one of their sample “calc” exploit payloads since hiding it really doesn’t do much to determined attackers.&lt;/p&gt; &#xA;&lt;p&gt;When you &lt;code&gt;load()&lt;/code&gt; an R data file directly into your R session into the global environment, the object will, well, &lt;em&gt;load there&lt;/em&gt;. So, if it has an object named &lt;code&gt;print&lt;/code&gt; that’s going to be in your global environment and get called when &lt;code&gt;print()&lt;/code&gt; gets called. Lather/rinse/repeat for any other object name. It should be pretty obvious how this could be abused.&lt;/p&gt; &#xA;&lt;p&gt;A tad more insidious is what happens when you quit R. By default, on &lt;code&gt;quit()&lt;/code&gt;, unless you specify otherwise, that function invocation will also call &lt;code&gt;.Last()&lt;/code&gt; if it exists in the environment. This functionality exists in the event things need to be cleaned up. One “nice” aspect of &lt;code&gt;.&lt;/code&gt;-prefixed R objects is that they’re hidden by default from the environment. So, you may not even notice if an R data file you’ve loaded has that defined. (You likely do not check what’s loaded anyway.)&lt;/p&gt; &#xA;&lt;p&gt;It’s also possible to create custom R objects that have their own “finalizers” (ref &lt;code&gt;reg.finalizer&lt;/code&gt;), which will also get called by default when the objects are being destroyed on quit.&lt;/p&gt; &#xA;&lt;p&gt;There are also likely other ways to trigger unwanted behavior.&lt;/p&gt; &#xA;&lt;p&gt;If you want to see how this works, start R from RStudio, the command line, or R GUI. Then, load &lt;code&gt;exploit.rda&lt;/code&gt;. Then, quit R/RStudio/R GUI (this will be less dramatic on linux, but the demo should still be effective).&lt;/p&gt; &#xA;&lt;p&gt;The main takeaway from this is DO NOT LOAD ANY R DATA FILES YOU DID NOT CREATE OR TRUST THE PROVENANCE OF.&lt;/p&gt; &#xA;&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; take in untrusted R data files, keep reading.&lt;/p&gt; &#xA;&lt;h2&gt;What (Does This Do)?&lt;/h2&gt; &#xA;&lt;p&gt;You can either run the &lt;code&gt;check.R&lt;/code&gt; script directly or via the Docker container version of it. It will load the specified R data file into a “quarantined” environment, then list out the objects in the environment, compare them to known, potentially dangerous ones, and also print out the contents of any functions defined.&lt;/p&gt; &#xA;&lt;p&gt;It will exit with a status code of &lt;code&gt;1&lt;/code&gt; if anything dangerous is found.&lt;/p&gt; &#xA;&lt;p&gt;It’s a work-in-progress (I’m really short on time this week), and filing issues with suggestions for improvement (then, PRs) would be most welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Usage: Bare Script (POTENTIALLY DANGEROUS)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ Rscript check.R /path/to/RDATAFILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output for the &lt;code&gt;exploit.rda&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-----------------------------------------------&#xA;Loading R data file in quarantined environment…&#xA;-----------------------------------------------&#xA;&#xA;Loading objects:&#xA;  .Last&#xA;  quit&#xA;&#xA;-----------------------------------------&#xA;Enumerating objects in loaded R data file&#xA;-----------------------------------------&#xA;&#xA;.Last : function (...)  &#xA; - attr(*, &#34;srcref&#34;)= &#39;srcref&#39; int [1:8] 1 13 6 1 13 1 1 6&#xA;  ..- attr(*, &#34;srcfile&#34;)=Classes &#39;srcfilecopy&#39;, &#39;srcfile&#39; &amp;lt;environment: 0x12cb25f48&amp;gt; &#xA;quit : function (...)  &#xA; - attr(*, &#34;srcref&#34;)= &#39;srcref&#39; int [1:8] 1 13 6 1 13 1 1 6&#xA;  ..- attr(*, &#34;srcfile&#34;)=Classes &#39;srcfilecopy&#39;, &#39;srcfile&#39; &amp;lt;environment: 0x12cb25f48&amp;gt; &#xA;&#xA;------------------------------------&#xA;Functions found: enumerating sources&#xA;------------------------------------&#xA;&#xA;Checking `.Last`…&#xA;&#xA;!! `.Last` may execute arbitrary code on your system under certain conditions !!&#xA;&#xA;`.Last` source:&#xA;{&#xA;    cmd = if (.Platform$OS.type == &#34;windows&#34;) &#xA;        &#34;calc.exe&#34;&#xA;    else if (grepl(&#34;^darwin&#34;, version$os)) &#xA;        &#34;open -a Calculator.app&#34;&#xA;    else &#34;echo pwned\\!&#34;&#xA;    system(cmd)&#xA;}&#xA;&#xA;&#xA;Checking `quit`…&#xA;&#xA;!! `quit` may execute arbitrary code on your system under certain conditions !!&#xA;&#xA;`quit` source:&#xA;{&#xA;    cmd = if (.Platform$OS.type == &#34;windows&#34;) &#xA;        &#34;calc.exe&#34;&#xA;    else if (grepl(&#34;^darwin&#34;, version$os)) &#xA;        &#34;open -a Calculator.app&#34;&#xA;    else &#34;echo pwned\\!&#34;&#xA;    system(cmd)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While this should theoretically be “safe”, it is much safer to run this in a Docker container.&lt;/p&gt; &#xA;&lt;h2&gt;Usage: Docker&lt;/h2&gt; &#xA;&lt;p&gt;Build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker build -t rdaradar:0.1.0 -t rdaradar:latest .  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --rm -v &#34;$(pwd)/exploit.rda:/unsafe.rda&#34; rdaradar &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output for the &lt;code&gt;exploit.rda&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-----------------------------------------------&#xA;Loading R data file in quarantined environment…&#xA;-----------------------------------------------&#xA;&#xA;Loading objects:&#xA;  .Last&#xA;  quit&#xA;&#xA;-----------------------------------------&#xA;Enumerating objects in loaded R data file&#xA;-----------------------------------------&#xA;&#xA;.Last : function (...)  &#xA; - attr(*, &#34;srcref&#34;)= &#39;srcref&#39; int [1:8] 1 13 6 1 13 1 1 6&#xA;  ..- attr(*, &#34;srcfile&#34;)=Classes &#39;srcfilecopy&#39;, &#39;srcfile&#39; &amp;lt;environment: 0xaaaac3a30568&amp;gt; &#xA;quit : function (...)  &#xA; - attr(*, &#34;srcref&#34;)= &#39;srcref&#39; int [1:8] 1 13 6 1 13 1 1 6&#xA;  ..- attr(*, &#34;srcfile&#34;)=Classes &#39;srcfilecopy&#39;, &#39;srcfile&#39; &amp;lt;environment: 0xaaaac3a30568&amp;gt; &#xA;&#xA;------------------------------------&#xA;Functions found: enumerating sources&#xA;------------------------------------&#xA;&#xA;Checking `.Last`…&#xA;&#xA;!! `.Last` may execute arbitrary code on your system under certain conditions !!&#xA;&#xA;`.Last` source:&#xA;{&#xA;    cmd = if (.Platform$OS.type == &#34;windows&#34;) &#xA;        &#34;calc.exe&#34;&#xA;    else if (grepl(&#34;^darwin&#34;, version$os)) &#xA;        &#34;open -a Calculator.app&#34;&#xA;    else &#34;echo pwned\\!&#34;&#xA;    system(cmd)&#xA;}&#xA;&#xA;&#xA;Checking `quit`…&#xA;&#xA;!! `quit` may execute arbitrary code on your system under certain conditions !!&#xA;&#xA;`quit` source:&#xA;{&#xA;    cmd = if (.Platform$OS.type == &#34;windows&#34;) &#xA;        &#34;calc.exe&#34;&#xA;    else if (grepl(&#34;^darwin&#34;, version$os)) &#xA;        &#34;open -a Calculator.app&#34;&#xA;    else &#34;echo pwned\\!&#34;&#xA;    system(cmd)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better write-up&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More checks&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>