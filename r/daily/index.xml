<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-06T01:36:21Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gesistsa/rio</title>
    <updated>2023-09-06T01:36:21Z</updated>
    <id>tag:github.com,2023-09-06:/gesistsa/rio</id>
    <link href="https://github.com/gesistsa/rio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Swiss-Army Knife for Data I/O&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rio: A Swiss-Army Knife for Data I/O &lt;img src=&#34;https://raw.githubusercontent.com/gesistsa/rio/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=rio&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/rio&#34; alt=&#34;CRAN Version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/rio&#34; alt=&#34;Downloads&#34;&gt; &#xA; &lt;!-- badges: end --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The aim of &lt;strong&gt;rio&lt;/strong&gt; is to make data file I/O in R as easy as possible by implementing two main functions in Swiss-army knife style:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;import()&lt;/code&gt; provides a painless data import experience by automatically choosing the appropriate import/read function based on file extension (or a specified &lt;code&gt;format&lt;/code&gt; argument)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;export()&lt;/code&gt; provides the same painless file recognition for data export/write functionality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The package is available on &lt;a href=&#34;https://cran.r-project.org/package=rio&#34;&gt;CRAN&lt;/a&gt; and can be installed directly in R using &lt;code&gt;install.packages()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;rio&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The latest development version on GitHub can be installed using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&#34;remotes&#34;)){&#xA;    install.packages(&#34;remotes&#34;)&#xA;}&#xA;remotes::install_github(&#34;gesistsa/rio&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional: Installation of additional formats (see below: &lt;strong&gt;Supported file formats&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rio)&#xA;install_formats()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Because &lt;strong&gt;rio&lt;/strong&gt; is meant to streamline data I/O, the package is extremely easy to use. Here are some examples of reading, writing, and converting data files.&lt;/p&gt; &#xA;&lt;h3&gt;Import&lt;/h3&gt; &#xA;&lt;p&gt;Importing data is handled with one function, &lt;code&gt;import()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#34;rio&#34;)&#xA;import(&#34;starwars.xlsx&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##                  Name homeworld species&#xA;## 1      Luke Skywalker  Tatooine   Human&#xA;## 2               C-3PO  Tatooine   Human&#xA;## 3               R2-D2  Alderaan   Human&#xA;## 4         Darth Vader  Tatooine   Human&#xA;## 5         Leia Organa  Tatooine   Human&#xA;## 6           Owen Lars  Tatooine   Human&#xA;## 7  Beru Whitesun lars   Stewjon   Human&#xA;## 8               R5-D4  Tatooine   Human&#xA;## 9   Biggs Darklighter  Kashyyyk Wookiee&#xA;## 10     Obi-Wan Kenobi  Corellia   Human&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;import(&#34;starwars.csv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##                  Name homeworld species&#xA;## 1      Luke Skywalker  Tatooine   Human&#xA;## 2               C-3PO  Tatooine   Human&#xA;## 3               R2-D2  Alderaan   Human&#xA;## 4         Darth Vader  Tatooine   Human&#xA;## 5         Leia Organa  Tatooine   Human&#xA;## 6           Owen Lars  Tatooine   Human&#xA;## 7  Beru Whitesun lars   Stewjon   Human&#xA;## 8               R5-D4  Tatooine   Human&#xA;## 9   Biggs Darklighter  Kashyyyk Wookiee&#xA;## 10     Obi-Wan Kenobi  Corellia   Human&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Because of inconsistencies across underlying packages, the data.frame returned by &lt;code&gt;import&lt;/code&gt; might vary slightly (in variable classes and attributes) depending on file type.&lt;/p&gt; &#xA;&lt;h3&gt;Export&lt;/h3&gt; &#xA;&lt;p&gt;Exporting data is handled with one function, &lt;code&gt;export()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;export(mtcars, &#34;mtcars.csv&#34;) # comma-separated values&#xA;export(mtcars, &#34;mtcars.rds&#34;) # R serialized&#xA;export(mtcars, &#34;mtcars.sav&#34;) # SPSS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A particularly useful feature of rio is the ability to import from and export to compressed (e.g., zip) directories, saving users the extra step of compressing a large exported file, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;export(mtcars, &#34;mtcars.tsv.zip&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;export()&lt;/code&gt; can also write multiple data frames to respective sheets of an Excel workbook or an HTML file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;export(list(mtcars = mtcars, iris = iris), file = &#34;mtcars.xlsx&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported file formats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; supports a wide range of file formats. To keep the package slim, several formats are supported via “Suggests” packages, which are not installed (or loaded) by default. To ensure rio is fully functional, install these packages the first time you use &lt;strong&gt;rio&lt;/strong&gt; via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install_formats()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full list of supported formats is below:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Typical Extension&lt;/th&gt; &#xA;   &lt;th&gt;Import Package&lt;/th&gt; &#xA;   &lt;th&gt;Export Package&lt;/th&gt; &#xA;   &lt;th&gt;Installed by Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Comma-separated data&lt;/td&gt; &#xA;   &lt;td&gt;.csv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pipe-separated data&lt;/td&gt; &#xA;   &lt;td&gt;.psv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tab-separated data&lt;/td&gt; &#xA;   &lt;td&gt;.tsv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSVY (CSV + YAML metadata header)&lt;/td&gt; &#xA;   &lt;td&gt;.csvy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SAS&lt;/td&gt; &#xA;   &lt;td&gt;.sas7bdat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt; (but &lt;a href=&#34;https://github.com/tidyverse/haven/issues/224&#34;&gt;deprecated&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPSS&lt;/td&gt; &#xA;   &lt;td&gt;.sav&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPSS (compressed)&lt;/td&gt; &#xA;   &lt;td&gt;.zsav&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stata&lt;/td&gt; &#xA;   &lt;td&gt;.dta&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SAS XPORT&lt;/td&gt; &#xA;   &lt;td&gt;.xpt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SPSS Portable&lt;/td&gt; &#xA;   &lt;td&gt;.por&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Excel&lt;/td&gt; &#xA;   &lt;td&gt;.xls&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=readxl&#34;&gt;&lt;strong&gt;readxl&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Excel&lt;/td&gt; &#xA;   &lt;td&gt;.xlsx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=readxl&#34;&gt;&lt;strong&gt;readxl&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=openxlsx&#34;&gt;&lt;strong&gt;openxlsx&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R syntax&lt;/td&gt; &#xA;   &lt;td&gt;.R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;base&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;base&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Saved R objects&lt;/td&gt; &#xA;   &lt;td&gt;.RData, .rda&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;base&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;base&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Serialized R objects&lt;/td&gt; &#xA;   &lt;td&gt;.rds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;base&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;base&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Epiinfo&lt;/td&gt; &#xA;   &lt;td&gt;.rec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=foreign&#34;&gt;&lt;strong&gt;foreign&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Minitab&lt;/td&gt; &#xA;   &lt;td&gt;.mtp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=foreign&#34;&gt;&lt;strong&gt;foreign&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Systat&lt;/td&gt; &#xA;   &lt;td&gt;.syd&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=foreign&#34;&gt;&lt;strong&gt;foreign&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;“XBASE” database files&lt;/td&gt; &#xA;   &lt;td&gt;.dbf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=foreign&#34;&gt;&lt;strong&gt;foreign&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=foreign&#34;&gt;&lt;strong&gt;foreign&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Weka Attribute-Relation File Format&lt;/td&gt; &#xA;   &lt;td&gt;.arff&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=foreign&#34;&gt;&lt;strong&gt;foreign&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=foreign&#34;&gt;&lt;strong&gt;foreign&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Data Interchange Format&lt;/td&gt; &#xA;   &lt;td&gt;.dif&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;utils&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fortran data&lt;/td&gt; &#xA;   &lt;td&gt;no recognized extension&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;utils&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fixed-width format data&lt;/td&gt; &#xA;   &lt;td&gt;.fwf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;utils&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;utils&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gzip comma-separated data&lt;/td&gt; &#xA;   &lt;td&gt;.csv.gz&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;utils&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;utils&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apache Arrow (Parquet)&lt;/td&gt; &#xA;   &lt;td&gt;.parquet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=arrow&#34;&gt;&lt;strong&gt;arrow&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=arrow&#34;&gt;&lt;strong&gt;arrow&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EViews&lt;/td&gt; &#xA;   &lt;td&gt;.wf1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=hexView&#34;&gt;&lt;strong&gt;hexView&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feather R/Python interchange format&lt;/td&gt; &#xA;   &lt;td&gt;.feather&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=feather&#34;&gt;&lt;strong&gt;feather&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=feather&#34;&gt;&lt;strong&gt;feather&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fast Storage&lt;/td&gt; &#xA;   &lt;td&gt;.fst&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=fst&#34;&gt;&lt;strong&gt;fst&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=fst&#34;&gt;&lt;strong&gt;fst&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;.json&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=jsonlite&#34;&gt;&lt;strong&gt;jsonlite&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=jsonlite&#34;&gt;&lt;strong&gt;jsonlite&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matlab&lt;/td&gt; &#xA;   &lt;td&gt;.mat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=rmatio&#34;&gt;&lt;strong&gt;rmatio&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=rmatio&#34;&gt;&lt;strong&gt;rmatio&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenDocument Spreadsheet&lt;/td&gt; &#xA;   &lt;td&gt;.ods&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=readODS&#34;&gt;&lt;strong&gt;readODS&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=readODS&#34;&gt;&lt;strong&gt;readODS&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTML Tables&lt;/td&gt; &#xA;   &lt;td&gt;.html&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=xml2&#34;&gt;&lt;strong&gt;xml2&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=xml2&#34;&gt;&lt;strong&gt;xml2&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shallow XML documents&lt;/td&gt; &#xA;   &lt;td&gt;.xml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=xml2&#34;&gt;&lt;strong&gt;xml2&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=xml2&#34;&gt;&lt;strong&gt;xml2&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML&lt;/td&gt; &#xA;   &lt;td&gt;.yml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=yaml&#34;&gt;&lt;strong&gt;yaml&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=yaml&#34;&gt;&lt;strong&gt;yaml&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clipboard&lt;/td&gt; &#xA;   &lt;td&gt;default is tsv&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=clipr&#34;&gt;&lt;strong&gt;clipr&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=clipr&#34;&gt;&lt;strong&gt;clipr&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.google.com/sheets/about/&#34;&gt;Google Sheets&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;as Comma-separated data&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graphpad Prism&lt;/td&gt; &#xA;   &lt;td&gt;.pzfx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=pzfx&#34;&gt;&lt;strong&gt;pzfx&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cran.r-project.org/package=pzfx&#34;&gt;&lt;strong&gt;pzfx&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Additionally, any format that is not supported by &lt;strong&gt;rio&lt;/strong&gt; but that has a known R implementation will produce an informative error message pointing to a package and import or export function. Unrecognized formats will yield a simple “Unrecognized file format” error.&lt;/p&gt; &#xA;&lt;h2&gt;Other functions&lt;/h2&gt; &#xA;&lt;h3&gt;Convert&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;convert()&lt;/code&gt; function links &lt;code&gt;import()&lt;/code&gt; and &lt;code&gt;export()&lt;/code&gt; by constructing a dataframe from the imported file and immediately writing it back to disk. &lt;code&gt;convert()&lt;/code&gt; invisibly returns the file name of the exported file, so that it can be used to programmatically access the new file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;convert(&#34;mtcars.sav&#34;, &#34;mtcars.dta&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to use &lt;strong&gt;rio&lt;/strong&gt; on the command-line by calling &lt;code&gt;Rscript&lt;/code&gt; with the &lt;code&gt;-e&lt;/code&gt; (expression) argument. For example, to convert a file from Stata (.dta) to comma-separated values (.csv), simply do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Rscript -e &#34;rio::convert(&#39;iris.dta&#39;, &#39;iris.csv&#39;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;*_list&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;import_list()&lt;/code&gt; allows users to import a list of data frames from a multi-object file (such as an Excel workbook, .Rdata file, zip directory, or HTML file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;str(m &amp;lt;- import_list(&#34;mtcars.xlsx&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## List of 2&#xA;##  $ mtcars:&#39;data.frame&#39;:  32 obs. of  11 variables:&#xA;##   ..$ mpg : num [1:32] 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...&#xA;##   ..$ cyl : num [1:32] 6 6 4 6 8 6 8 4 4 6 ...&#xA;##   ..$ disp: num [1:32] 160 160 108 258 360 ...&#xA;##   ..$ hp  : num [1:32] 110 110 93 110 175 105 245 62 95 123 ...&#xA;##   ..$ drat: num [1:32] 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...&#xA;##   ..$ wt  : num [1:32] 2.62 2.88 2.32 3.21 3.44 ...&#xA;##   ..$ qsec: num [1:32] 16.5 17 18.6 19.4 17 ...&#xA;##   ..$ vs  : num [1:32] 0 0 1 1 0 1 0 1 1 1 ...&#xA;##   ..$ am  : num [1:32] 1 1 1 0 0 0 0 0 0 0 ...&#xA;##   ..$ gear: num [1:32] 4 4 4 3 3 3 3 4 4 4 ...&#xA;##   ..$ carb: num [1:32] 4 4 1 1 2 1 4 2 2 4 ...&#xA;##  $ iris  :&#39;data.frame&#39;:  150 obs. of  5 variables:&#xA;##   ..$ Sepal.Length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...&#xA;##   ..$ Sepal.Width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...&#xA;##   ..$ Petal.Length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...&#xA;##   ..$ Petal.Width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...&#xA;##   ..$ Species     : chr [1:150] &#34;setosa&#34; &#34;setosa&#34; &#34;setosa&#34; &#34;setosa&#34; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;export_list()&lt;/code&gt; makes it easy to export a list of (possibly named) data frames to multiple files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;export_list(m, &#34;%s.tsv&#34;)&#xA;c(&#34;mtcars.tsv&#34;, &#34;iris.tsv&#34;) %in% dir()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] TRUE TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Package Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;The core advantage of &lt;strong&gt;rio&lt;/strong&gt; is that it makes assumptions that the user is probably willing to make. Eight of these are important:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; uses the file extension of a file name to determine what kind of file it is. This is the same logic used by Windows OS, for example, in determining what application is associated with a given file type. By removing the need to manually match a file type (which a beginner may not recognize) to a particular import or export function, &lt;strong&gt;rio&lt;/strong&gt; allows almost all common data formats to be read with the same function. And if a file extension is incorrect, users can force a particular import method by specifying the &lt;code&gt;format&lt;/code&gt; argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; uses &lt;code&gt;data.table::fread()&lt;/code&gt; for text-delimited files to automatically determine the file format regardless of the extension. So, a CSV that is actually tab-separated will still be correctly imported. It’s also crazy fast.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt;, wherever possible, does not import character strings as factors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; supports web-based imports natively, including from SSL (HTTPS) URLs, from shortened URLs, from URLs that lack proper extensions, and from (public) Google Documents Spreadsheets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; imports from from single-file .zip and .tar archives automatically, without the need to explicitly decompress them. Export to compressed directories is also supported.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; wraps a variety of faster, more stream-lined I/O packages than those provided by base R or the &lt;strong&gt;foreign&lt;/strong&gt; package. It uses &lt;a href=&#34;https://cran.r-project.org/package=data.table&#34;&gt;&lt;strong&gt;data.table&lt;/strong&gt;&lt;/a&gt; for delimited formats, &lt;a href=&#34;https://cran.r-project.org/package=haven&#34;&gt;&lt;strong&gt;haven&lt;/strong&gt;&lt;/a&gt; for SAS, Stata, and SPSS files, smarter and faster fixed-width file import and export routines, and &lt;a href=&#34;https://cran.r-project.org/package=readxl&#34;&gt;&lt;strong&gt;readxl&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/package=openxlsx&#34;&gt;&lt;strong&gt;openxlsx&lt;/strong&gt;&lt;/a&gt; for reading and writing Excel workbooks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; stores metadata from rich file formats (SPSS, Stata, etc.) in variable-level attributes in a consistent form regardless of file type or underlying import function. These attributes are identified as:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;label&lt;/code&gt;: a description of variable&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;labels&lt;/code&gt;: a vector mapping numeric values to character strings those values represent&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;format&lt;/code&gt;: a character string describing the variable storage type in the original file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The &lt;code&gt;gather_attrs()&lt;/code&gt; function makes it easy to move variable-level attributes to the data frame level (and &lt;code&gt;spread_attrs()&lt;/code&gt; reverses that gathering process). These can be useful, especially, during file conversion to more easily modify attributes that are handled differently across file formats. As an example, the following idiom can be used to trim SPSS value labels to the 32-character maximum allowed by Stata:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat &amp;lt;- gather_attrs(rio::import(&#34;data.sav&#34;))&#xA;attr(dat, &#34;labels&#34;) &amp;lt;- lapply(attributes(dat)$labels, function(x) {&#xA;    if (!is.null(x)) {&#xA;        names(x) &amp;lt;- substring(names(x), 1, 32)&#xA;    }&#xA;    x&#xA;})&#xA;export(spread_attrs(dat), &#34;data.dta&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In addition, two functions (added in v0.5.5) provide easy ways to create character and factor variables from these “labels” attributes. &lt;code&gt;characterize()&lt;/code&gt; converts a single variable or all variables in a data frame that have “labels” attributes into character vectors based on the mapping of values to value labels. &lt;code&gt;factorize()&lt;/code&gt; does the same but returns factor variables. This can be especially helpful for converting these rich file formats into open formats (e.g., &lt;code&gt;export(characterize(import(&#34;file.dta&#34;)), &#34;file.csv&#34;)&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rio&lt;/strong&gt; imports and exports files based on an internal S3 class infrastructure. This means that other packages can contain extensions to &lt;strong&gt;rio&lt;/strong&gt; by registering S3 methods. These methods should take the form &lt;code&gt;.import.rio_X()&lt;/code&gt; and &lt;code&gt;.export.rio_X()&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the file extension of a file type. An example is provided in the &lt;a href=&#34;https://github.com/leeper/rio.db&#34;&gt;rio.db package&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Other projects&lt;/h2&gt; &#xA;&lt;h3&gt;GUIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lbraglia/rioweb&#34;&gt;&lt;strong&gt;rioweb&lt;/strong&gt;&lt;/a&gt; that provides access to the file conversion features of rio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stan125/GREA/&#34;&gt;&lt;strong&gt;GREA&lt;/strong&gt;&lt;/a&gt; is an RStudio add-in that provides an interactive interface for reading in data using rio.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Similar packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=reader&#34;&gt;&lt;strong&gt;reader&lt;/strong&gt;&lt;/a&gt; handles certain text formats and R binary files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=io&#34;&gt;&lt;strong&gt;io&lt;/strong&gt;&lt;/a&gt; offers a set of custom formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=ImportExport&#34;&gt;&lt;strong&gt;ImportExport&lt;/strong&gt;&lt;/a&gt; focuses on select binary formats (Excel, SPSS, and Access files) and provides a Shiny interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=SchemaOnRead&#34;&gt;&lt;strong&gt;SchemaOnRead&lt;/strong&gt;&lt;/a&gt; iterates through a large number of possible import methods until one works successfully&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pharmaverse/pharmaverseadam</title>
    <updated>2023-09-06T01:36:21Z</updated>
    <id>tag:github.com,2023-09-06:/pharmaverse/pharmaverseadam</id>
    <link href="https://github.com/pharmaverse/pharmaverseadam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Test ADaM data for use with pharmaverse&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;admiral package extension Template &lt;img src=&#34;https://raw.githubusercontent.com/pharmaverse/pharmaverseadam/devel/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;200&#34; style=&#34;margin-left:50px;&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pharmaverse.org&#34;&gt;&lt;img src=&#34;http://pharmaverse.org/shields/admiral.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=admiral&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/admiral&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pharmaverse/admiraltemplate/actions/workflows/code-coverage.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pharmaverse/admiraltemplate/badges/main/test-coverage.svg?sanitize=true&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pharmaverse/pharmaverseadam/devel/#extension-expectations&#34;&gt;Extension Expectations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pharmaverse/pharmaverseadam/devel/#what-is-included-in-the-template&#34;&gt;What is included in the template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pharmaverse/pharmaverseadam/devel/#package-extension-guidance&#34;&gt;Package Extension Guidance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pharmaverse/pharmaverseadam/devel/#quick-start-guide-for-template&#34;&gt;Quick Start Guide for Template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extension Expectations&lt;/h2&gt; &#xA;&lt;p&gt;To be included as an &lt;code&gt;{admiral}&lt;/code&gt; package extension we expect developers to adhere to the following standards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pharmaverse.github.io/admiral/main/CODE_OF_CONDUCT.html&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pharmaverse.github.io/admiral/main/index.html?q=manifest#admiral-manifesto&#34;&gt;Manifesto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pharmaverse.github.io/admiraldev/main/articles/programming_strategy.html&#34;&gt;Programming Strategy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pharmaverse.github.io/admiraldev/main/articles/development_process.html&#34;&gt;Development Process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow consistent workflow checks&lt;/li&gt; &#xA; &lt;li&gt;A CRAN Release means 90% or greater test coverage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have developed this repository template in order to reduce the burden on developers to follow these standards. This template will also help to harmonize the &lt;code&gt;{admiral}&lt;/code&gt; family of R packages, to ensure a consistent user experience and ease of installing and adopting all the packages. With this in mind, we expect the same core package dependencies and versions as used for &lt;code&gt;{admiral}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What is included in the template&lt;/h2&gt; &#xA;&lt;p&gt;The repository template includes the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;License file (Apache 2.0 - but company co-developers need to be added to copyright section)&lt;/li&gt; &#xA; &lt;li&gt;Required folders (R; test; templates; vignettes; renv; etc)&lt;/li&gt; &#xA; &lt;li&gt;Set-up files (DESCRIPTION; NAMESPACE; renv.lock; etc)&lt;/li&gt; &#xA; &lt;li&gt;Issue Templates (Bug Template; Feature Request; Documentation Request/Update; Onboarding)&lt;/li&gt; &#xA; &lt;li&gt;Pull Request Template&lt;/li&gt; &#xA; &lt;li&gt;Workflow actions (a selection of generic and specific CI/CD auto-checks)&lt;/li&gt; &#xA; &lt;li&gt;Package badges (Test coverage; etc)&lt;/li&gt; &#xA; &lt;li&gt;Branch protection rules&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Package Extension Guidance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;{admiral}&lt;/code&gt; is made up of a family of packages and we foresee this only growing over time to cover more specific areas such as TA (Therapeutic Area) package extensions, with a wider range of companies and individuals getting on board to join development efforts. This step-by-step guidance talks through our recommendations on how new development teams would go about creating such package extensions. It is critical that this guidance is followed, as our users need to feel a consistent experience when working across &lt;code&gt;{admiral}&lt;/code&gt; packages. If an admiral package extension doesn’t follow these conventions then we wouldn’t include it under pharmaverse and as part of the &lt;code&gt;{admiral}&lt;/code&gt; family.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The ordering numbers below are suggested but don’t all need to strictly be followed in this sequence.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Raise the need for a new &lt;code&gt;{admiral}&lt;/code&gt; package extension with the sponsors (Ross Farrugia &lt;a href=&#34;mailto:ross.farrugia@roche.com&#34;&gt;ross.farrugia@roche.com&lt;/a&gt; &amp;amp; Ben Arancibia &lt;a href=&#34;mailto:benjamin.c.arancibia@gsk.com&#34;&gt;benjamin.c.arancibia@gsk.com&lt;/a&gt;). The naming convention needs to be &lt;code&gt;{admiralxxx}&lt;/code&gt; and we request that the scope is not targeted overly narrow, for example instead of a package extension for HIV we’d prefer one across virology. Otherwise the number of packages may become unmanageable.&lt;/li&gt; &#xA; &lt;li&gt;Once agreed, reach out to other company contacts working in similar areas to see if a collaborative development can be achieved. &lt;em&gt;Our recommendation here is always to target at least 2 companies to start so that any implementation remains robust and we protect from going down a company-specific route. However, consider that if more than 4 or 5 companies get involved too early it may slow down decision-making.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;From the companies that agree to co-develop, identify a lead from each. One company should act as the driver for the overall package extension and put forward a product owner and technical lead who ultimately have final say on any contentious decisions. The product owner would cover project decisions (e.g.&amp;nbsp;around scope and priorities), whereas the technical lead would cover technical decisions (e.g.&amp;nbsp;around design and implementation). &lt;em&gt;Ideally, the technical lead should have had some earlier involvement in &lt;code&gt;{admiral}&lt;/code&gt; such as being part of the core development team or as a contributor, as this is a key role in order to keep the design true to the manifesto.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Agree on a charter and expectations of each company, e.g.&amp;nbsp;we usually ask for at least 3 developers with at least 25% capacity and a mix of R, GitHub and TA experience. Within the charter make sure the scope and timelines are clear. &lt;em&gt;It is important here not to try to boil the ocean. Focus first on the very common endpoints required as a foundation and then the package can build up from here via contributions from both the co-development companies and also the wider across-industry admiral community. If useful, the &lt;code&gt;{admiralonco}&lt;/code&gt; charter could be shared as a guide.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Each company should start to identify the required developer resources. Then they all need to attend one of the monthly admiral onboarding sessions (as advertised via our Slack channel - which they should join using this &lt;a href=&#34;https://join.slack.com/t/pharmaverse/shared_invite/zt-yv5atkr4-Np2ytJ6W_QKz_4Olo7Jo9A&#34;&gt;link&lt;/a&gt;). All should read up on the admiral &lt;a href=&#34;https://pharmaverse.github.io/admiral/main/&#34;&gt;site&lt;/a&gt;, especially the developer guides which all need to be followed for package extensions.&lt;/li&gt; &#xA; &lt;li&gt;Optionally it can be useful to host a kick-off meeting to decide how the team will work, for which we recommend agile/scrum practices.&lt;/li&gt; &#xA; &lt;li&gt;Set up a “admiralxxx_dev” channel on Slack to add all team members to for informal team chat, and agree a way to share working documents across the co-development team.&lt;/li&gt; &#xA; &lt;li&gt;A useful starter development activity could be to look into &lt;code&gt;{admiral.test}&lt;/code&gt; to check that the test data there is sufficient for your TA needs, e.g.&amp;nbsp;for &lt;code&gt;{admiralonco}&lt;/code&gt; we had to generate new test data for SDTM domains such as RS and TU. Note that no personal data should be used here (even if anonymized) and it is important to keep any data generated in-line with the CDISC pilot data we use here, i.e.&amp;nbsp;use same USUBJIDs as DM etc.&lt;/li&gt; &#xA; &lt;li&gt;Optionally draft, agree and sign a collaboration agreement if the collaborating companies so wish, as this could be useful for protecting secondary IP such as company standard specifications that may be shared within the team. An example is stored &lt;a href=&#34;https://github.com/pharmaverse/pharmaverse/raw/main/content/contribute/Pharmaverse%20Collaborative%20Agreement%20(template).docx&#34;&gt;here&lt;/a&gt;, but work with your Legal teams as required.&lt;/li&gt; &#xA; &lt;li&gt;Share company-specific implementations and specifications to be able to harmonize into your design strategy for the package extension. &lt;em&gt;Here it is important to remain pragmatic and consider a higher perspective than any one company. Engage your company standards representatives and where you find discrepancies across company approaches then question if you really need to be doing things differently here (do health authorities or patients benefit at all if you do?). Also consider that we always expect a level of company-specifics to be covered in the internal company package extensions.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set up a new public GitHub repo under the &lt;a href=&#34;https://github.com/pharmaverse&#34;&gt;pharmaverse org&lt;/a&gt; using &lt;a href=&#34;https://github.com/pharmaverse/admiraltemplate&#34;&gt;admiraltemplate&lt;/a&gt; - this includes set-up pieces (such as CI/CD checks and issue/PR templates) that will enable your package to stay consistent with others in the admiral family, as well as the same core package dependencies and versions. See Quick Start Guide for Template section below for instructions. &lt;em&gt;Note that this step requires org member access which could be granted by of the pharmaverse council reps, who are admins for this org. Also you are free to add additional package dependencies as needed assuming only reliable packages are used, but they must not depend on newer versions of other packages (always reply “no” if updates are suggested during installation).&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once the repo is available the technical lead could be granted admin access to this repo and then could set up a GitHub team with the same name as the package extension to assign required access for all other co-development team members. Most will only require write access, but you may choose to give the other leads admin access as well so that never a bottle-neck waiting on one person.&lt;/li&gt; &#xA; &lt;li&gt;Update the template license file in your repo by adding the co-development company names in place of Roche &amp;amp; GSK - for &lt;code&gt;{admiral}&lt;/code&gt; package extensions we use Apache 2.0, which is our preferred permissive license. Agree with the co-development companies any required extra wording for the copyright/IP section.&lt;/li&gt; &#xA; &lt;li&gt;Set up a project board, such as &lt;a href=&#34;https://github.com/orgs/pharmaverse/projects/12&#34;&gt;this&lt;/a&gt;, to help manage your backlog.&lt;/li&gt; &#xA; &lt;li&gt;Assuming you work under agile/scrum, then create a product backlog, prioritize and make a sprint plan.&lt;/li&gt; &#xA; &lt;li&gt;The intention is always to re-use as much as possible from &lt;code&gt;{admiral}&lt;/code&gt; core package. If you find anything additional needed for the package extension, you should first question whether it might be a common need for other TAs and if so consider instead raising an issue to &lt;code&gt;{admiral}&lt;/code&gt; core. When designing new functions always try to stay aligned with the &lt;a href=&#34;https://pharmaverse.github.io/admiraldev/main/articles/programming_strategy.html&#34;&gt;programming strategy.&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start development of your foundational first release 0.1.0. Follow a consistent &lt;a href=&#34;https://pharmaverse.github.io/admiraldev/main/articles/development_process.html&#34;&gt;development process&lt;/a&gt; to &lt;code&gt;{admiral}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Line up testers from your companies and others and set expectations around when you believe a stable version would be available for user testing. You can use the admiral Slack community to raise interest to get involved.&lt;/li&gt; &#xA; &lt;li&gt;Add a pharmaverse badge to your README: &lt;a href=&#34;https://pharmaverse.org/contribute/badges/&#34;&gt;https://pharmaverse.org/contribute/badges/&lt;/a&gt; - needs support from a pharmaverse council rep.&lt;/li&gt; &#xA; &lt;li&gt;Raise an &lt;code&gt;{admiral}&lt;/code&gt; repo issue to ensure your package extension site is linked from the core &lt;code&gt;{admiral}&lt;/code&gt; site &lt;a href=&#34;https://pharmaverse.github.io/admiral/main/index.html#types-of-packages&#34;&gt;here.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;It is important that the &lt;code&gt;{admiral}&lt;/code&gt; family of packages keep to a similar release schedule and cadence, in order to ease adoption by our users and to give clear expectations. The &lt;code&gt;{admiral}&lt;/code&gt; core package cadence of releases is one every quarter on a fixed schedule (every first Monday of the last month of a quarter - March, June, September, December). The core package will set the release schedule for the package extensions to follow, i.e.&amp;nbsp;once &lt;code&gt;{admiral}&lt;/code&gt; releases we’d expect package extension releases targeted within a 2 week window. These releases are communicated via our Slack channel as well as at our quarterly user community meetings.&lt;/li&gt; &#xA; &lt;li&gt;Once you are happy your package extension has been well tested and is at a sufficient state then make a submission to CRAN. The technical lead should be named as maintainer. After the CRAN release, you should advertise this via Slack &amp;amp; LinkedIn.&lt;/li&gt; &#xA; &lt;li&gt;Plan any future further enhancements and make issues. When your team feels ready you can open up to development contributions for these from the wider community - see &lt;a href=&#34;https://pharmaverse.github.io/admiral/main/CONTRIBUTING.html#type-1-contribution-with-code&#34;&gt;this page.&lt;/a&gt;. Please use the &lt;em&gt;“good first issue”&lt;/em&gt; (ideal for new starters) &amp;amp; &lt;em&gt;“help wanted”&lt;/em&gt; (ideal for more experienced contributors) issue labels.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick Start Guide for Template&lt;/h2&gt; &#xA;&lt;p&gt;Please thoroughly read the Package Extension Guidance above. The intention of the Quick Start is to just get the template code into a new repo and check that the package works in your environment. Please contact us via slack if any issues arise.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click the Green &lt;code&gt;Use this Template&lt;/code&gt; Button.&lt;/li&gt; &#xA; &lt;li&gt;Change owner to &lt;code&gt;pharmaverse&lt;/code&gt; and enter your repository name&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;devel&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt; branches. These will be important later for workflows!&lt;/li&gt; &#xA; &lt;li&gt;Once repo has been created click Green Code button and download the repo using &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;ssh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;renv::restore()&lt;/code&gt; - you will see a prompt and this will take a few minutes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will ensure that your development environment for your extension package is synced with other admiral packages&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update/Remove the following files to use your extension name: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DESCRIPTION&lt;/code&gt; File - Name, Authors&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;admiraltemplate.Rproj&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;testthat.R&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;News.md&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;devtools::load_all()&lt;/code&gt; and resolve issues&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;devtools::document()&lt;/code&gt; and resolve issues&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pkgdown::build_site()&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reach out to slack for help with creating a hex sticker/logo to replace pharmaverse logo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Recommended&lt;/em&gt;: Review the &lt;a href=&#34;https://pharmaverse.github.io/admiralci/main/#what-these-workflows-do&#34;&gt;documentation on the CI/CD workflows&lt;/a&gt; for information about how to reuse the workflows from this template. Pay special attention to the section on creating the &lt;code&gt;badges&lt;/code&gt; orphan branch in &lt;a href=&#34;https://pharmaverse.github.io/admiralci/main/#code-coverage&#34;&gt;this section&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Test out a dummy branch and do a Pull Request to ensure CI/CD works.&lt;/li&gt; &#xA; &lt;li&gt;Any clearly dummy files like &lt;code&gt;R/my_first_fcn.R&lt;/code&gt; or &lt;code&gt;inst/templates/ad_adxx.R&lt;/code&gt; can be updated or removed.&lt;/li&gt; &#xA; &lt;li&gt;Set up &lt;a href=&#34;https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule&#34;&gt;branch protections rules&lt;/a&gt; for &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;devel&lt;/code&gt;, and optionally for &lt;code&gt;pre-release&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; depending on your branching strategy.&lt;/li&gt; &#xA; &lt;li&gt;Set up and assign admin and write rights in Settings/Collaborators for members of the repository - using a GitHub team for all developers.&lt;/li&gt; &#xA; &lt;li&gt;Change badges and hex image in &lt;code&gt;README.Rmd&lt;/code&gt; to your package.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>