<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:38:46Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>r-tidy-remote-sensing/tidyrgee</title>
    <updated>2022-09-20T01:38:46Z</updated>
    <id>tag:github.com,2022-09-20:/r-tidy-remote-sensing/tidyrgee</id>
    <link href="https://github.com/r-tidy-remote-sensing/tidyrgee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create tidyverse methods for dealing with GEE image and imageCollections.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tidyrgee&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/r-tidy-remote-sensing/tidyrgee/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-tidy-remote-sensing/tidyrgee/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=tidyrgee&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/tidyrgee&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-tidy-remote-sensing/tidyrgee&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-tidy-remote-sensing/tidyrgee/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dwyl/esta/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;tidyrgee brings components of &lt;a href=&#34;https://github.com/tidyverse/dplyr/&#34;&gt;dplyr’s&lt;/a&gt; syntax to remote sensing analysis, using the &lt;a href=&#34;https://github.com/r-spatial/rgee&#34;&gt;rgee&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;rgee is an R-API for the &lt;a href=&#34;https://earthengine.google.com/&#34;&gt;Google Earth Engine (GEE)&lt;/a&gt; which provides R support to the methods/functions available in the JavaScript code editor and python API. The &lt;code&gt;rgee&lt;/code&gt; syntax was written to be very similar to the GEE Javascript/python. However, this syntax can feel unnatural and difficult at times especially to users with less experience in GEE. Simple concepts that are easy express verbally can be cumbersome even to advanced users (see &lt;em&gt;Syntax Comparison&lt;/em&gt;). The &lt;code&gt;tidyverse&lt;/code&gt; has provided &lt;a href=&#34;https://tidyr.tidyverse.org/articles/tidy-data.html&#34;&gt;principals and concepts&lt;/a&gt; that help data scientists/R-users efficiently write and communicate there code in a clear and concise manner. &lt;code&gt;tidyrgee&lt;/code&gt; aims to bring these principals to GEE-remote sensing analyses.&lt;/p&gt; &#xA;&lt;p&gt;tidyrgee provides the convenience of pipe-able dplyr style methods such as &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;group_by&lt;/code&gt;, &lt;code&gt;summarise&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;,&lt;code&gt;mutate&lt;/code&gt;,etc. using &lt;a href=&#34;https://github.com/r-lib/rlang&#34;&gt;rlang’s&lt;/a&gt; style of non-standard evaluation (NSE)&lt;/p&gt; &#xA;&lt;p&gt;try it out!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;tidyrgee&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version of tidyrgee from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;r-tidy-remote-sensing/tidyrgee&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important to note that to use tidyrgee you must be signed up for a GEE developer account. Additionally you must install the rgee package following there &lt;a href=&#34;https://github.com/r-spatial/rgee&#34;&gt;installation and setup instructions here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Syntax Comparison&lt;/h2&gt; &#xA;&lt;p&gt;Below is a quick example demonstrating the simplified syntax. Note that the &lt;code&gt;rgee&lt;/code&gt; syntax is very similar to the syntax in the Javascript code editor. In this example I want to simply calculate mean monthly NDVI (per pixel) for every year from 2000-2015. This is clearly a fairly simple analysis to verbalize/conceptualize. Yet, using using standard GEE conventions, the process is not so simple. Aside, from many peculiarities such as &lt;code&gt;flattening&lt;/code&gt; a list and then calling and then rebuilding the &lt;code&gt;imageCollection&lt;/code&gt; at the end, I also have to write and &lt;strong&gt;think about&lt;/strong&gt; a double mapping statement using months and years (sort of like a double for-loop). By comparison the tidyrgee syntax removes the complexity and allows me to write the code in a more human readable/interpretable format.&lt;/p&gt; &#xA;&lt;table class=&#34;table&#34; width=&#34;100%&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; rgee (similar to Javascript) &lt;/th&gt; &#xA;   &lt;th&gt; tidyrgee &lt;/th&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis &amp;lt;- ee$ImageCollection( &#34;MODIS/006/MOD13Q1&#34;)&#xA;modis_ndvi &amp;lt;-  modis$select(&#34;NDVI&#34;)&#xA;month_list &amp;lt;- ee$List$sequence(1,12)&#xA;year_list &amp;lt;- ee$List$sequence(2000,2015)&#xA;  &#xA;  &#xA;mean_ndvi &amp;lt;- ee$ImageCollection$fromImages(&#xA;    year_list$map(&#xA;      ee_utils_pyfunc(function (y) {&#xA;        month_list$map(&#xA;          ee_utils_pyfunc(function (m) {&#xA;            # dat_pre_filt &amp;lt;- &#xA;            modis_ndvi$&#xA;              filter(ee$Filter$calendarRange(y, y, &#39;year&#39;))$&#xA;              filter(ee$Filter$calendarRange(m, m, &#39;month&#39;))$&#xA;              mean()$&#xA;              set(&#39;year&#39;,y)$&#xA;              set(&#39;month&#39;,m)$&#xA;              set(&#39;date&#39;,ee$Date$fromYMD(y,m,1))$&#xA;              set(&#39;system:time_start&#39;,ee$Date$millis(ee$Date$fromYMD(y,m,1)))&#xA;              &#xA;            &#xA;          })&#xA;        )&#xA;      }))$flatten())&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis &amp;lt;- ee$ImageCollection( &#34;MODIS/006/MOD13Q1&#34;)&#xA;modis_tidy &amp;lt;-  as_tidyee(modis) &#xA;&#xA;mean_ndvi &amp;lt;-  modis_tidy |&amp;gt; &#xA;  select(&#34;NDVI&#34;) |&amp;gt; &#xA;  filter(year %in% 2000:2015) |&amp;gt; &#xA;  group_by(year, month) |&amp;gt; &#xA;  summarise(stat= &#34;mean&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;p&gt;Below are a couple examples showing some of the available functions.&lt;/p&gt; &#xA;&lt;p&gt;To load images/imageCollections you follow the standard approach using &lt;code&gt;rgee&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;load libraries&lt;/li&gt; &#xA; &lt;li&gt;initialize the GEE session&lt;/li&gt; &#xA; &lt;li&gt;load &lt;code&gt;ee$ImageCollection&lt;/code&gt;/ &lt;code&gt;ee$Image&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyrgee)&#xA;library(rgee)&#xA;ee_Initialize(quiet = T)&#xA;&#xA;modis_ic &amp;lt;- ee$ImageCollection(&#34;MODIS/006/MOD13Q1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the above steps are performed you can convert the &lt;code&gt;ee$ImageCollection&lt;/code&gt; to a &lt;code&gt;tidyee&lt;/code&gt; object with the function &lt;code&gt;as_tidyee&lt;/code&gt;. The tidyee object stores the original &lt;code&gt;ee$ImageCollection&lt;/code&gt; as &lt;code&gt;ee_ob&lt;/code&gt; (for earth engine object) and produces as virtual table/data.frame stored as &lt;code&gt;vrt&lt;/code&gt;. This vrt not only facilitates the use of dplyr/tidyverse methods, but also allows the user to better view the data stored in the accompanying imageCollection. The &lt;code&gt;ee_ob&lt;/code&gt; and &lt;code&gt;vrt&lt;/code&gt; inside the tidyee object are linked, any function applied to the tidyee object will apply to them both so that they remain in sync.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis_tidy &amp;lt;-  as_tidyee(modis_ic)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the &lt;code&gt;vrt&lt;/code&gt; comes with a few built in columns which you can use off the bat for filtering and grouping, but you can also &lt;code&gt;mutate&lt;/code&gt; additional info for filtering and grouping (i.e using &lt;code&gt;lubridate&lt;/code&gt; to create new temporal groupings)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knitr::kable(modis_tidy$vrt |&amp;gt; head())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;id&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;time_start&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;system_index&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;date&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;month&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;year&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;doy&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;band_names&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MODIS/006/MOD13Q1/2000_02_18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-02-18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000_02_18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-02-18&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;49&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NDVI , EVI , DetailedQA , sur_refl_b01 , sur_refl_b02 , sur_refl_b03 , sur_refl_b07 , ViewZenith , SolarZenith , RelativeAzimuth, DayOfYear , SummaryQA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MODIS/006/MOD13Q1/2000_03_05&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-03-05&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000_03_05&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-03-05&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;65&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NDVI , EVI , DetailedQA , sur_refl_b01 , sur_refl_b02 , sur_refl_b03 , sur_refl_b07 , ViewZenith , SolarZenith , RelativeAzimuth, DayOfYear , SummaryQA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MODIS/006/MOD13Q1/2000_03_21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-03-21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000_03_21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-03-21&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;81&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NDVI , EVI , DetailedQA , sur_refl_b01 , sur_refl_b02 , sur_refl_b03 , sur_refl_b07 , ViewZenith , SolarZenith , RelativeAzimuth, DayOfYear , SummaryQA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MODIS/006/MOD13Q1/2000_04_06&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-04-06&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000_04_06&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-04-06&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;97&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NDVI , EVI , DetailedQA , sur_refl_b01 , sur_refl_b02 , sur_refl_b03 , sur_refl_b07 , ViewZenith , SolarZenith , RelativeAzimuth, DayOfYear , SummaryQA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MODIS/006/MOD13Q1/2000_04_22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-04-22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000_04_22&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-04-22&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;113&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NDVI , EVI , DetailedQA , sur_refl_b01 , sur_refl_b02 , sur_refl_b03 , sur_refl_b07 , ViewZenith , SolarZenith , RelativeAzimuth, DayOfYear , SummaryQA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MODIS/006/MOD13Q1/2000_05_08&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-05-08&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000_05_08&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2000-05-08&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;129&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NDVI , EVI , DetailedQA , sur_refl_b01 , sur_refl_b02 , sur_refl_b03 , sur_refl_b07 , ViewZenith , SolarZenith , RelativeAzimuth, DayOfYear , SummaryQA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Next we demonstrate filtering by date, month, and year. The &lt;code&gt;vrt&lt;/code&gt; and &lt;code&gt;ee_ob&lt;/code&gt; are always filtered together&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;by date&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis_tidy   |&amp;gt; &#xA;  filter(date&amp;gt;=&#34;2021-06-01&#34;)&#xA;#&amp;gt; band names: [ NDVI, EVI, DetailedQA, sur_refl_b01, sur_refl_b02, sur_refl_b03, sur_refl_b07, ViewZenith, SolarZenith, RelativeAzimuth, DayOfYear, SummaryQA ] &#xA;#&amp;gt; &#xA;#&amp;gt; $ee_ob&#xA;#&amp;gt; EarthEngine Object: ImageCollection&#xA;#&amp;gt; $vrt&#xA;#&amp;gt; # A tibble: 28 x 9&#xA;#&amp;gt;    id              time_start          system_index date       month  year   doy&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;           &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;        &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 MODIS/006/MOD1~ 2021-06-10 00:00:00 2021_06_10   2021-06-10     6  2021   161&#xA;#&amp;gt;  2 MODIS/006/MOD1~ 2021-06-26 00:00:00 2021_06_26   2021-06-26     6  2021   177&#xA;#&amp;gt;  3 MODIS/006/MOD1~ 2021-07-12 00:00:00 2021_07_12   2021-07-12     7  2021   193&#xA;#&amp;gt;  4 MODIS/006/MOD1~ 2021-07-28 00:00:00 2021_07_28   2021-07-28     7  2021   209&#xA;#&amp;gt;  5 MODIS/006/MOD1~ 2021-08-13 00:00:00 2021_08_13   2021-08-13     8  2021   225&#xA;#&amp;gt;  6 MODIS/006/MOD1~ 2021-08-29 00:00:00 2021_08_29   2021-08-29     8  2021   241&#xA;#&amp;gt;  7 MODIS/006/MOD1~ 2021-09-14 00:00:00 2021_09_14   2021-09-14     9  2021   257&#xA;#&amp;gt;  8 MODIS/006/MOD1~ 2021-09-30 00:00:00 2021_09_30   2021-09-30     9  2021   273&#xA;#&amp;gt;  9 MODIS/006/MOD1~ 2021-10-16 00:00:00 2021_10_16   2021-10-16    10  2021   289&#xA;#&amp;gt; 10 MODIS/006/MOD1~ 2021-11-01 00:00:00 2021_11_01   2021-11-01    11  2021   305&#xA;#&amp;gt; # ... with 18 more rows, and 2 more variables: band_names &amp;lt;list&amp;gt;,&#xA;#&amp;gt; #   tidyee_index &amp;lt;chr&amp;gt;&#xA;#&amp;gt; &#xA;#&amp;gt; attr(,&#34;class&#34;)&#xA;#&amp;gt; [1] &#34;tidyee&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;by year&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis_tidy   |&amp;gt; &#xA;  filter(year%in% 2010:2011)&#xA;#&amp;gt; band names: [ NDVI, EVI, DetailedQA, sur_refl_b01, sur_refl_b02, sur_refl_b03, sur_refl_b07, ViewZenith, SolarZenith, RelativeAzimuth, DayOfYear, SummaryQA ] &#xA;#&amp;gt; &#xA;#&amp;gt; $ee_ob&#xA;#&amp;gt; EarthEngine Object: ImageCollection&#xA;#&amp;gt; $vrt&#xA;#&amp;gt; # A tibble: 46 x 9&#xA;#&amp;gt;    id              time_start          system_index date       month  year   doy&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;           &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;        &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 MODIS/006/MOD1~ 2010-01-01 00:00:00 2010_01_01   2010-01-01     1  2010     1&#xA;#&amp;gt;  2 MODIS/006/MOD1~ 2010-01-17 00:00:00 2010_01_17   2010-01-17     1  2010    17&#xA;#&amp;gt;  3 MODIS/006/MOD1~ 2010-02-02 00:00:00 2010_02_02   2010-02-02     2  2010    33&#xA;#&amp;gt;  4 MODIS/006/MOD1~ 2010-02-18 00:00:00 2010_02_18   2010-02-18     2  2010    49&#xA;#&amp;gt;  5 MODIS/006/MOD1~ 2010-03-06 00:00:00 2010_03_06   2010-03-06     3  2010    65&#xA;#&amp;gt;  6 MODIS/006/MOD1~ 2010-03-22 00:00:00 2010_03_22   2010-03-22     3  2010    81&#xA;#&amp;gt;  7 MODIS/006/MOD1~ 2010-04-07 00:00:00 2010_04_07   2010-04-07     4  2010    97&#xA;#&amp;gt;  8 MODIS/006/MOD1~ 2010-04-23 00:00:00 2010_04_23   2010-04-23     4  2010   113&#xA;#&amp;gt;  9 MODIS/006/MOD1~ 2010-05-09 00:00:00 2010_05_09   2010-05-09     5  2010   129&#xA;#&amp;gt; 10 MODIS/006/MOD1~ 2010-05-25 00:00:00 2010_05_25   2010-05-25     5  2010   145&#xA;#&amp;gt; # ... with 36 more rows, and 2 more variables: band_names &amp;lt;list&amp;gt;,&#xA;#&amp;gt; #   tidyee_index &amp;lt;chr&amp;gt;&#xA;#&amp;gt; &#xA;#&amp;gt; attr(,&#34;class&#34;)&#xA;#&amp;gt; [1] &#34;tidyee&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;by month&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis_tidy   |&amp;gt; &#xA;  filter(month%in% c(7,8))&#xA;#&amp;gt; band names: [ NDVI, EVI, DetailedQA, sur_refl_b01, sur_refl_b02, sur_refl_b03, sur_refl_b07, ViewZenith, SolarZenith, RelativeAzimuth, DayOfYear, SummaryQA ] &#xA;#&amp;gt; &#xA;#&amp;gt; $ee_ob&#xA;#&amp;gt; EarthEngine Object: ImageCollection&#xA;#&amp;gt; $vrt&#xA;#&amp;gt; # A tibble: 91 x 9&#xA;#&amp;gt;    id              time_start          system_index date       month  year   doy&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;           &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt;        &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 MODIS/006/MOD1~ 2000-07-11 00:00:00 2000_07_11   2000-07-11     7  2000   193&#xA;#&amp;gt;  2 MODIS/006/MOD1~ 2000-07-27 00:00:00 2000_07_27   2000-07-27     7  2000   209&#xA;#&amp;gt;  3 MODIS/006/MOD1~ 2000-08-12 00:00:00 2000_08_12   2000-08-12     8  2000   225&#xA;#&amp;gt;  4 MODIS/006/MOD1~ 2000-08-28 00:00:00 2000_08_28   2000-08-28     8  2000   241&#xA;#&amp;gt;  5 MODIS/006/MOD1~ 2001-07-12 00:00:00 2001_07_12   2001-07-12     7  2001   193&#xA;#&amp;gt;  6 MODIS/006/MOD1~ 2001-07-28 00:00:00 2001_07_28   2001-07-28     7  2001   209&#xA;#&amp;gt;  7 MODIS/006/MOD1~ 2001-08-13 00:00:00 2001_08_13   2001-08-13     8  2001   225&#xA;#&amp;gt;  8 MODIS/006/MOD1~ 2001-08-29 00:00:00 2001_08_29   2001-08-29     8  2001   241&#xA;#&amp;gt;  9 MODIS/006/MOD1~ 2002-07-12 00:00:00 2002_07_12   2002-07-12     7  2002   193&#xA;#&amp;gt; 10 MODIS/006/MOD1~ 2002-07-28 00:00:00 2002_07_28   2002-07-28     7  2002   209&#xA;#&amp;gt; # ... with 81 more rows, and 2 more variables: band_names &amp;lt;list&amp;gt;,&#xA;#&amp;gt; #   tidyee_index &amp;lt;chr&amp;gt;&#xA;#&amp;gt; &#xA;#&amp;gt; attr(,&#34;class&#34;)&#xA;#&amp;gt; [1] &#34;tidyee&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Putting a dplyr-like chain together:&lt;/h3&gt; &#xA;&lt;p&gt;In this next example we pipe together multiple functions (&lt;code&gt;select&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;group_by&lt;/code&gt;, &lt;code&gt;summarise&lt;/code&gt;) to&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;select the &lt;code&gt;NDVI&lt;/code&gt; band from the ImageCollection&lt;/li&gt; &#xA; &lt;li&gt;filter the imageCollection to a desired date range&lt;/li&gt; &#xA; &lt;li&gt;group the filtered ImageCollection by month&lt;/li&gt; &#xA; &lt;li&gt;summarizing each pixel by year and month.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The result will be an &lt;code&gt;ImageCollection&lt;/code&gt; with the one &lt;code&gt;Image&lt;/code&gt; per month (12 images) where each pixel in each image represents the average NDVI value for that month calculated using monthly data from 2000 2015.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis_tidy |&amp;gt; &#xA;  select(&#34;NDVI&#34;) |&amp;gt; &#xA;  filter(year %in% 2000:2015) |&amp;gt; &#xA;  group_by(month) |&amp;gt; &#xA;  summarise(stat= &#34;mean&#34;)&#xA;#&amp;gt; band names: [ NDVI_mean ] &#xA;#&amp;gt; &#xA;#&amp;gt; $ee_ob&#xA;#&amp;gt; EarthEngine Object: ImageCollection&#xA;#&amp;gt; $vrt&#xA;#&amp;gt; # A tibble: 12 x 6&#xA;#&amp;gt;    month dates_summarised number_images time_start          time_end           &#xA;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;                   &amp;lt;int&amp;gt; &amp;lt;dttm&amp;gt;              &amp;lt;dttm&amp;gt;             &#xA;#&amp;gt;  1     1 &amp;lt;date [30]&amp;gt;                 30 2001-01-01 00:00:00 2001-01-01 00:00:00&#xA;#&amp;gt;  2     2 &amp;lt;date [31]&amp;gt;                 31 2000-02-18 00:00:00 2000-02-18 00:00:00&#xA;#&amp;gt;  3     3 &amp;lt;date [32]&amp;gt;                 32 2000-03-05 00:00:00 2000-03-05 00:00:00&#xA;#&amp;gt;  4     4 &amp;lt;date [32]&amp;gt;                 32 2000-04-06 00:00:00 2000-04-06 00:00:00&#xA;#&amp;gt;  5     5 &amp;lt;date [32]&amp;gt;                 32 2000-05-08 00:00:00 2000-05-08 00:00:00&#xA;#&amp;gt;  6     6 &amp;lt;date [32]&amp;gt;                 32 2000-06-09 00:00:00 2000-06-09 00:00:00&#xA;#&amp;gt;  7     7 &amp;lt;date [32]&amp;gt;                 32 2000-07-11 00:00:00 2000-07-11 00:00:00&#xA;#&amp;gt;  8     8 &amp;lt;date [32]&amp;gt;                 32 2000-08-12 00:00:00 2000-08-12 00:00:00&#xA;#&amp;gt;  9     9 &amp;lt;date [32]&amp;gt;                 32 2000-09-13 00:00:00 2000-09-13 00:00:00&#xA;#&amp;gt; 10    10 &amp;lt;date [20]&amp;gt;                 20 2000-10-15 00:00:00 2000-10-15 00:00:00&#xA;#&amp;gt; 11    11 &amp;lt;date [28]&amp;gt;                 28 2000-11-16 00:00:00 2000-11-16 00:00:00&#xA;#&amp;gt; 12    12 &amp;lt;date [32]&amp;gt;                 32 2000-12-02 00:00:00 2000-12-02 00:00:00&#xA;#&amp;gt; # ... with 1 more variable: band_names &amp;lt;list&amp;gt;&#xA;#&amp;gt; &#xA;#&amp;gt; attr(,&#34;class&#34;)&#xA;#&amp;gt; [1] &#34;tidyee&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can easily &lt;code&gt;group_by&lt;/code&gt; more than 1 property to calculate different summary stats. Below we&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;filter to only data from 2021-2022&lt;/li&gt; &#xA; &lt;li&gt;group by year, month and calculate the median NDVI pixel value&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As we are using the MODIS 16-day composite we summarising approximately 2 images per month to create median composite image fo reach month in the specified years. The &lt;code&gt;vrt&lt;/code&gt; holds a &lt;code&gt;list-col&lt;/code&gt; containing all the dates summarised per new composite image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis_tidy |&amp;gt; &#xA;  select(&#34;NDVI&#34;) |&amp;gt; &#xA;  filter(year %in% 2021:2022) |&amp;gt; &#xA;  group_by(year,month) |&amp;gt; &#xA;  summarise(stat= &#34;median&#34;)&#xA;#&amp;gt; band names: [ NDVI_median ] &#xA;#&amp;gt; &#xA;#&amp;gt; $ee_ob&#xA;#&amp;gt; EarthEngine Object: ImageCollection&#xA;#&amp;gt; $vrt&#xA;#&amp;gt; # A tibble: 20 x 7&#xA;#&amp;gt;     year month dates_summarised number_images time_start time_end   band_names&#xA;#&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;                   &amp;lt;int&amp;gt; &amp;lt;date&amp;gt;     &amp;lt;date&amp;gt;     &amp;lt;list&amp;gt;    &#xA;#&amp;gt;  1  2021     1 &amp;lt;date [2]&amp;gt;                   2 2021-01-01 2021-01-17 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  2  2021     2 &amp;lt;date [2]&amp;gt;                   2 2021-02-02 2021-02-18 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  3  2021     3 &amp;lt;date [2]&amp;gt;                   2 2021-03-06 2021-03-22 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  4  2021     4 &amp;lt;date [2]&amp;gt;                   2 2021-04-07 2021-04-23 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  5  2021     5 &amp;lt;date [2]&amp;gt;                   2 2021-05-09 2021-05-25 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  6  2021     6 &amp;lt;date [2]&amp;gt;                   2 2021-06-10 2021-06-26 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  7  2021     7 &amp;lt;date [2]&amp;gt;                   2 2021-07-12 2021-07-28 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  8  2021     8 &amp;lt;date [2]&amp;gt;                   2 2021-08-13 2021-08-29 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt;  9  2021     9 &amp;lt;date [2]&amp;gt;                   2 2021-09-14 2021-09-30 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 10  2021    10 &amp;lt;date [1]&amp;gt;                   1 2021-10-16 2021-10-16 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 11  2021    11 &amp;lt;date [2]&amp;gt;                   2 2021-11-01 2021-11-17 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 12  2021    12 &amp;lt;date [2]&amp;gt;                   2 2021-12-03 2021-12-19 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 13  2022     1 &amp;lt;date [2]&amp;gt;                   2 2022-01-01 2022-01-17 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 14  2022     2 &amp;lt;date [2]&amp;gt;                   2 2022-02-02 2022-02-18 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 15  2022     3 &amp;lt;date [2]&amp;gt;                   2 2022-03-06 2022-03-22 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 16  2022     4 &amp;lt;date [2]&amp;gt;                   2 2022-04-07 2022-04-23 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 17  2022     5 &amp;lt;date [2]&amp;gt;                   2 2022-05-09 2022-05-25 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 18  2022     6 &amp;lt;date [2]&amp;gt;                   2 2022-06-10 2022-06-26 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 19  2022     7 &amp;lt;date [2]&amp;gt;                   2 2022-07-12 2022-07-28 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; 20  2022     8 &amp;lt;date [1]&amp;gt;                   1 2022-08-13 2022-08-13 &amp;lt;chr [1]&amp;gt; &#xA;#&amp;gt; &#xA;#&amp;gt; attr(,&#34;class&#34;)&#xA;#&amp;gt; [1] &#34;tidyee&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To improve interoperability with &lt;code&gt;rgee&lt;/code&gt; we have included the &lt;code&gt;as_ee&lt;/code&gt; function to return the &lt;code&gt;tidyee&lt;/code&gt; object back to &lt;code&gt;rgee&lt;/code&gt; classes when necessary&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;modis_ic &amp;lt;- modis_tidy |&amp;gt; as_ee()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sriharijala/coursera-exploratory-data-analysis-course-project-2</title>
    <updated>2022-09-20T01:38:46Z</updated>
    <id>tag:github.com,2022-09-20:/sriharijala/coursera-exploratory-data-analysis-course-project-2</id>
    <link href="https://github.com/sriharijala/coursera-exploratory-data-analysis-course-project-2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Exploratory Data Analysis - Course Project 2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: My work and answers to the questions are at the bottom of this document.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Fine particulate matter (PM2.5) is an ambient air pollutant for which there is strong evidence that it is harmful to human health. In the United States, the Environmental Protection Agency (EPA) is tasked with setting national ambient air quality standards for fine PM and for tracking the emissions of this pollutant into the atmosphere. Approximatly every 3 years, the EPA releases its database on emissions of PM2.5. This database is known as the National Emissions Inventory (NEI). You can read more information about the NEI at the EPA National &lt;a href=&#34;http://www.epa.gov/ttn/chief/eiinformation.html&#34;&gt;Emissions Inventory web site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For each year and for each type of PM source, the NEI records how many tons of PM2.5 were emitted from that source over the course of the entire year. The data that you will use for this assignment are for 1999, 2002, 2005, and 2008.&lt;/p&gt; &#xA;&lt;h1&gt;Data&lt;/h1&gt; &#xA;&lt;p&gt;The data for this assignment are available from the course web site as a single zip file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip&#34;&gt;Data for Peer Assessment [29Mb]&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The zip file contains two files:&lt;/p&gt; &#xA;&lt;p&gt;PM2.5 Emissions Data (&lt;code&gt;summarySCC_PM25.rds&lt;/code&gt;): This file contains a data frame with all of the PM2.5 emissions data for 1999, 2002, 2005, and 2008. For each year, the table contains number of tons of PM2.5 emitted from a specific type of source for the entire year. Here are the first few rows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;##     fips      SCC Pollutant Emissions  type year&#xA;## 4  09001 10100401  PM25-PRI    15.714 POINT 1999&#xA;## 8  09001 10100404  PM25-PRI   234.178 POINT 1999&#xA;## 12 09001 10100501  PM25-PRI     0.128 POINT 1999&#xA;## 16 09001 10200401  PM25-PRI     2.036 POINT 1999&#xA;## 20 09001 10200504  PM25-PRI     0.388 POINT 1999&#xA;## 24 09001 10200602  PM25-PRI     1.490 POINT 1999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fips&lt;/code&gt;: A five-digit number (represented as a string) indicating the U.S. county&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SCC&lt;/code&gt;: The name of the source as indicated by a digit string (see source code classification table)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pollutant&lt;/code&gt;: A string indicating the pollutant&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Emissions&lt;/code&gt;: Amount of PM2.5 emitted, in tons&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: The type of source (point, non-point, on-road, or non-road)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;year&lt;/code&gt;: The year of emissions recorded&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Source Classification Code Table (&lt;code&gt;Source_Classification_Code.rds&lt;/code&gt;): This table provides a mapping from the SCC digit strings int he Emissions table to the actual name of the PM2.5 source. The sources are categorized in a few different ways from more general to more specific and you may choose to explore whatever categories you think are most useful. For example, source “10100101” is known as “Ext Comb /Electric Gen /Anthracite Coal /Pulverized Coal”.&lt;/p&gt; &#xA;&lt;p&gt;You can read each of the two files using the &lt;code&gt;readRDS()&lt;/code&gt; function in R. For example, reading in each file can be done with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;## This first line will likely take a few seconds. Be patient!&#xA;NEI &amp;lt;- readRDS(&#34;summarySCC_PM25.rds&#34;)&#xA;SCC &amp;lt;- readRDS(&#34;Source_Classification_Code.rds&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as long as each of those files is in your current working directory (check by calling &lt;code&gt;dir()&lt;/code&gt; and see if those files are in the listing).&lt;/p&gt; &#xA;&lt;h1&gt;Assignment&lt;/h1&gt; &#xA;&lt;p&gt;The overall goal of this assignment is to explore the National Emissions Inventory database and see what it say about fine particulate matter pollution in the United states over the 10-year period 1999–2008. You may use any R package you want to support your analysis.&lt;/p&gt; &#xA;&lt;h2&gt;Making and Submitting Plots&lt;/h2&gt; &#xA;&lt;p&gt;For each plot you should&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Construct the plot and save it to a PNG file.&lt;/li&gt; &#xA; &lt;li&gt;Create a separate R code file (plot1.R, plot2.R, etc.) that constructs the corresponding plot, i.e. code in plot1.R constructs the plot1.png plot. Your code file should include code for reading the data so that the plot can be fully reproduced. You should also include the code that creates the PNG file. Only include the code for a single plot (i.e. plot1.R should only include code for producing plot1.png)&lt;/li&gt; &#xA; &lt;li&gt;Upload the PNG file on the Assignment submission page&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste the R code from the corresponding R file into the text box at the appropriate point in the peer assessment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In preparation we first ensure the data sets archive is downloaded and extracted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;# Download archive file, if it does not exist&#xA;archiveFile &amp;lt;- &#34;NEI_data.zip&#34;&#xA;if(!file.exists(archiveFile)) {&#xA;&#x9;archiveURL &amp;lt;- &#34;https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip&#34;&#xA;&#x9;if(Sys.info()[&#34;sysname&#34;] == &#34;Darwin&#34;) {&#xA;&#x9;&#x9;download.file(url=archiveURL,destfile=archiveFile,method=&#34;curl&#34;)&#xA;&#x9;} else {&#xA;&#x9;&#x9;download.file(url=url,destfile=archiveFile)&#xA;&#x9;}&#xA;}&#xA;if(!(file.exists(&#34;summarySCC_PM25.rds&#34;) &amp;amp;&amp;amp; &#xA;&#x9;file.exists(&#34;Source_Classification_Code.rds&#34;))) { unzip(archiveFile) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We now load the NEI and SCC data frames from the .rds files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;NEI &amp;lt;- readRDS(&#34;summarySCC_PM25.rds&#34;)&#xA;SCC &amp;lt;- readRDS(&#34;Source_Classification_Code.rds&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Questions&lt;/h2&gt; &#xA;&lt;p&gt;You must address the following questions and tasks in your exploratory analysis. For each question/task you will need to make a single plot. Unless specified, you can use any plotting system in R to make your plot.&lt;/p&gt; &#xA;&lt;h3&gt;Question 1&lt;/h3&gt; &#xA;&lt;p&gt;First we&#39;ll aggregate the total PM2.5 emission from all sources for each of the years 1999, 2002, 2005, and 2008.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;aggTotals &amp;lt;- aggregate(Emissions ~ year,NEI, sum)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the base plotting system, now we plot the total PM2.5 Emission from all sources,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;barplot(&#xA;  (aggTotals$Emissions)/10^6,&#xA;  names.arg=aggTotals$year,&#xA;  xlab=&#34;Year&#34;,&#xA;  ylab=&#34;PM2.5 Emissions (10^6 Tons)&#34;,&#xA;  main=&#34;Total PM2.5 Emissions From All US Sources&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Have total emissions from PM2.5 decreased in the United States from 1999 to 2008?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;As we can see from the plot, total emissions have decreased in the US from 1999 to 2008.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sriharijala/coursera-exploratory-data-analysis-course-project-2/master/plot1.png&#34; alt=&#34;plot of plot1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Question 2&lt;/h3&gt; &#xA;&lt;p&gt;First we aggregate total emissions from PM2.5 for Baltimore City, Maryland (fips=&#34;24510&#34;) from 1999 to 2008.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;baltimoreNEI &amp;lt;- NEI[NEI$fips==&#34;24510&#34;,]&#xA;aggTotalsBaltimore &amp;lt;- aggregate(Emissions ~ year, baltimoreNEI,sum)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we use the base plotting system to make a plot of this data,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;barplot(&#xA;  aggTotalsBaltimore$Emissions,&#xA;  names.arg=aggTotalsBaltimore$year,&#xA;  xlab=&#34;Year&#34;,&#xA;  ylab=&#34;PM2.5 Emissions (Tons)&#34;,&#xA;  main=&#34;Total PM2.5 Emissions From All Baltimore City Sources&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Have total emissions from PM2.5 decreased in the Baltimore City, Maryland (fips == &#34;24510&#34;) from 1999 to 2008?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overall total emissions from PM2.5 have decreased in Baltimore City, Maryland from 1999 to 2008.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sriharijala/coursera-exploratory-data-analysis-course-project-2/master/plot2.png&#34; alt=&#34;plot of plot2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Question 3&lt;/h3&gt; &#xA;&lt;p&gt;Using the ggplot2 plotting system,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;library(ggplot2)&#xA;&#xA;ggp &amp;lt;- ggplot(baltimoreNEI,aes(factor(year),Emissions,fill=type)) +&#xA;  geom_bar(stat=&#34;identity&#34;) +&#xA;  theme_bw() + guides(fill=FALSE)+&#xA;  facet_grid(.~type,scales = &#34;free&#34;,space=&#34;free&#34;) + &#xA;  labs(x=&#34;year&#34;, y=expression(&#34;Total PM&#34;[2.5]*&#34; Emission (Tons)&#34;)) + &#xA;  labs(title=expression(&#34;PM&#34;[2.5]*&#34; Emissions, Baltimore City 1999-2008 by Source Type&#34;))&#xA;&#xA;print(ggp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Of the four types of sources indicated by the type (point, nonpoint, onroad, nonroad) variable, which of these four sources have seen decreases in emissions from 1999–2008 for Baltimore City?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;non-road&lt;/code&gt;, &lt;code&gt;nonpoint&lt;/code&gt;, &lt;code&gt;on-road&lt;/code&gt; source types have all seen decreased emissions overall from 1999-2008 in Baltimore City.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which have seen increases in emissions from 1999–2008?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;point&lt;/code&gt; source saw a slight increase overall from 1999-2008. Also note that the &lt;code&gt;point&lt;/code&gt; source saw a significant increase until 2005 at which point it decreases again by 2008 to just above the starting values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sriharijala/coursera-exploratory-data-analysis-course-project-2/master/plot3.png&#34; alt=&#34;plot of plot3.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Question 4&lt;/h3&gt; &#xA;&lt;p&gt;First we subset coal combustion source factors NEI data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;# Subset coal combustion related NEI data&#xA;combustionRelated &amp;lt;- grepl(&#34;comb&#34;, SCC$SCC.Level.One, ignore.case=TRUE)&#xA;coalRelated &amp;lt;- grepl(&#34;coal&#34;, SCC$SCC.Level.Four, ignore.case=TRUE) &#xA;coalCombustion &amp;lt;- (combustionRelated &amp;amp; coalRelated)&#xA;combustionSCC &amp;lt;- SCC[coalCombustion,]$SCC&#xA;combustionNEI &amp;lt;- NEI[NEI$SCC %in% combustionSCC,]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The SCC levels go from generic to specific. We assume that coal combustion related SCC records are those where SCC.Level.One contains the substring &#39;comb&#39; and SCC.Level.Four contains the substring &#39;coal&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;library(ggplot2)&#xA;&#xA;ggp &amp;lt;- ggplot(combustionNEI,aes(factor(year),Emissions/10^5)) +&#xA;  geom_bar(stat=&#34;identity&#34;,fill=&#34;grey&#34;,width=0.75) +&#xA;  theme_bw() +  guides(fill=FALSE) +&#xA;  labs(x=&#34;year&#34;, y=expression(&#34;Total PM&#34;[2.5]*&#34; Emission (10^5 Tons)&#34;)) + &#xA;  labs(title=expression(&#34;PM&#34;[2.5]*&#34; Coal Combustion Source Emissions Across US from 1999-2008&#34;))&#xA;&#xA;print(ggp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Across the United States, how have emissions from coal combustion-related sources changed from 1999–2008?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emissions from coal combustion related sources have decreased from 6 * 10^6 to below 4 * 10^6 from 1999-2008.&lt;/p&gt; &#xA;&lt;p&gt;Eg. Emissions from coal combustion related sources have decreased by about 1/3 from 1999-2008!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sriharijala/coursera-exploratory-data-analysis-course-project-2/master/plot4.png&#34; alt=&#34;plot of plot4.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Question 5&lt;/h3&gt; &#xA;&lt;p&gt;First we subset the motor vehicles, which we assume is anything like Motor Vehicle in SCC.Level.Two.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;vehicles &amp;lt;- grepl(&#34;vehicle&#34;, SCC$SCC.Level.Two, ignore.case=TRUE)&#xA;vehiclesSCC &amp;lt;- SCC[vehicles,]$SCC&#xA;vehiclesNEI &amp;lt;- NEI[NEI$SCC %in% vehiclesSCC,]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next we subset for motor vehicles in Baltimore,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;baltimoreVehiclesNEI &amp;lt;- vehiclesNEI[vehiclesNEI$fips==24510,]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally we plot using ggplot2,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;library(ggplot2)&#xA;ggp &amp;lt;- ggplot(baltimoreVehiclesNEI,aes(factor(year),Emissions)) +&#xA;  geom_bar(stat=&#34;identity&#34;,fill=&#34;grey&#34;,width=0.75) +&#xA;  theme_bw() +  guides(fill=FALSE) +&#xA;  labs(x=&#34;year&#34;, y=expression(&#34;Total PM&#34;[2.5]*&#34; Emission (10^5 Tons)&#34;)) + &#xA;  labs(title=expression(&#34;PM&#34;[2.5]*&#34; Motor Vehicle Source Emissions in Baltimore from 1999-2008&#34;))&#xA;&#xA;print(ggp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sriharijala/coursera-exploratory-data-analysis-course-project-2/master/plot5.png&#34; alt=&#34;plot of plot5.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How have emissions from motor vehicle sources changed from 1999–2008 in Baltimore City?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Emissions from motor vehicle sources have dropped from 1999-2008 in Baltimore City!&lt;/p&gt; &#xA;&lt;h3&gt;Question 6&lt;/h3&gt; &#xA;&lt;p&gt;Comparing emissions from motor vehicle sources in Baltimore City (fips == &#34;24510&#34;) with emissions from motor vehicle sources in Los Angeles County, California (fips == &#34;06037&#34;),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;vehiclesBaltimoreNEI &amp;lt;- vehiclesNEI[vehiclesNEI$fips == 24510,]&#xA;vehiclesBaltimoreNEI$city &amp;lt;- &#34;Baltimore City&#34;&#xA;vehiclesLANEI &amp;lt;- vehiclesNEI[vehiclesNEI$fips==&#34;06037&#34;,]&#xA;vehiclesLANEI$city &amp;lt;- &#34;Los Angeles County&#34;&#xA;bothNEI &amp;lt;- rbind(vehiclesBaltimoreNEI,vehiclesLANEI)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we plot using the ggplot2 system,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r&#34;&gt;library(ggplot2)&#xA; &#xA;ggp &amp;lt;- ggplot(bothNEI, aes(x=factor(year), y=Emissions, fill=city)) +&#xA; geom_bar(aes(fill=year),stat=&#34;identity&#34;) +&#xA; facet_grid(scales=&#34;free&#34;, space=&#34;free&#34;, .~city) +&#xA; guides(fill=FALSE) + theme_bw() +&#xA; labs(x=&#34;year&#34;, y=expression(&#34;Total PM&#34;[2.5]*&#34; Emission (Kilo-Tons)&#34;)) + &#xA; labs(title=expression(&#34;PM&#34;[2.5]*&#34; Motor Vehicle Source Emissions in Baltimore &amp;amp; LA, 1999-2008&#34;))&#xA; &#xA;print(ggp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Which city has seen greater changes over time in motor vehicle emissions?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Los Angeles County has seen the greatest changes over time in motor vehicle emissions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sriharijala/coursera-exploratory-data-analysis-course-project-2/master/plot6.png&#34; alt=&#34;plot of plot6.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mong/imongr</title>
    <updated>2022-09-20T01:38:46Z</updated>
    <id>tag:github.com,2022-09-20:/mong/imongr</id>
    <link href="https://github.com/mong/imongr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your data contribution to qmongr&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;imongr &lt;img src=&#34;https://raw.githubusercontent.com/mong/imongr/master/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;150&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mong/imongr/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/mong/imongr?sort=semver&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mong/imongr/actions&#34;&gt;&lt;img src=&#34;https://github.com/mong/imongr/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/mong/imongr?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/mong/imongr/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mong/imongr/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/mong/imongr.svg?sanitize=true&#34; alt=&#34;GitHub open issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mong.github.io/imongr/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Doc--grey.svg?sanitize=true&#34; alt=&#34;Doc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Primarily a tool to update data used by the &lt;a href=&#34;https://github.com/mong/qmongjs/&#34;&gt;qmongjs&lt;/a&gt; application.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of imongr from &lt;a href=&#34;https://github.com/mong/imongr&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;mong/imongr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://mong.github.io/#/utvikling&#34;&gt;mong documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ethics&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the &#39;imongr&#39; project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/mong/imongr/master/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
</feed>