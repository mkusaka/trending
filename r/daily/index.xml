<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-28T01:43:37Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jamiefolson/rsql</title>
    <updated>2023-01-28T01:43:37Z</updated>
    <id>tag:github.com,2023-01-28:/jamiefolson/rsql</id>
    <link href="https://github.com/jamiefolson/rsql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R package for programmatic construction of SQL, similar to SQLAlchemy&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This package is an attempt to bring programmatic query construction as in SQLAlchemy to R. Tables are represented as S4 objects, with the &lt;code&gt;$&lt;/code&gt; operator overloaded to allow query construction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; library(rsql)&#xA;&amp;gt; tab = rsql_table(&#39;test&#39;,c(&#39;x&#39;,&#39;y&#39;,&#39;z&#39;))&#xA;&amp;gt; to_sql(tab$select())&#xA;[1] &#34;SELECT test.x AS x,\n\ttest.y AS y,\n\ttest.z AS z\nFROM test&#34;&#xA;&amp;gt; writeLines(to_sql(tab$select()))&#xA;SELECT test.x AS x,&#xA;  test.y AS y,&#xA;  test.z AS z&#xA;FROM test&#xA;&amp;gt; writeLines(to_sql(tab$select(.(a=x,b=y&amp;gt;5))$where(from(tab,.(z &amp;lt;5)))))&#xA;SELECT test.x AS a,&#xA;  test.y &amp;gt; 5 AS b&#xA;FROM test&#xA;WHERE test.z &amp;lt; 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An ever-expanding list of SQL expressions are supported. For me information see the package documentation, especially for the &lt;code&gt;rsql&lt;/code&gt; function.&lt;/p&gt;</summary>
  </entry>
</feed>