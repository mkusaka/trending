<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-02T01:34:49Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>devOpifex/communicate</title>
    <updated>2023-11-02T01:34:49Z</updated>
    <id>tag:github.com,2023-11-02:/devOpifex/communicate</id>
    <link href="https://github.com/devOpifex/communicate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ’¬ Communicate between client and server in Shiny via HTTP&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/devOpifex/communicate/master/inst/logo.png&#34; height=&#34;200&#34;&gt; &#xA; &lt;p&gt;Small framework to communicate between Shiny client and server via HTTP requests. Run &lt;code&gt;communicate::example()&lt;/code&gt; for a short demo.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;devOpifex/communicate&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Create a shiny application and &#34;commincation channels.&#34; Add callback functions with &lt;code&gt;com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)&#xA;library(communicate)&#xA;&#xA;add &amp;lt;- \(x){&#xA;  x + 2&#xA;}&#xA;&#xA;ui &amp;lt;- fluidPage(&#xA;  h1(&#34;Hello&#34;)&#xA;)&#xA;&#xA;server &amp;lt;- \(input, output, session){&#xA;  com(&#34;add&#34;, add)&#xA;}&#xA;&#xA;shinyApp(ui, server)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the JavaScript library to communicate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)&#xA;library(communicate)&#xA;&#xA;add &amp;lt;- \(x){&#xA;  x + 2&#xA;}&#xA;&#xA;script &amp;lt;- &#34;&#xA;  $(&#39;#btn&#39;).on(&#39;click&#39;, () =&amp;gt; {&#xA;    communicate.com(&#39;add&#39;, {x: 1})&#xA;      .then(res =&amp;gt; alert(`equals: ${res}`));&#xA;  })&#xA;&#34;&#xA;&#xA;ui &amp;lt;- fluidPage(&#xA;  # import dependencies&#xA;  useCommunicate(),&#xA;  h1(&#34;Hello&#34;),&#xA;  tags$a(&#34;Communicate&#34;, id = &#34;btn&#34;),&#xA;  tags$script(HTML(script))&#xA;)&#xA;&#xA;server &amp;lt;- \(input, output, session){&#xA;  com(&#34;add&#34;, add)&#xA;}&#xA;&#xA;shinyApp(ui, server)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Types&lt;/h3&gt; &#xA;&lt;p&gt;Though optional it is recommended to specify the types of the arguments of your callback function. This enables type conversion and type check when communicating from the client.&lt;/p&gt; &#xA;&lt;p&gt;Existing types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Character&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Posixct&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Posixlt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Character&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;List&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)&#xA;library(communicate)&#xA;&#xA;add &amp;lt;- \(x){&#xA;  x + 2&#xA;}&#xA;&#xA;script &amp;lt;- &#34;&#xA;  $(&#39;#btn&#39;).on(&#39;click&#39;, () =&amp;gt; {&#xA;    communicate.com(&#39;add&#39;, {x: 1})&#xA;      .then(res =&amp;gt; alert(`equals: ${res}`));&#xA;  })&#xA;&#34;&#xA;&#xA;ui &amp;lt;- fluidPage(&#xA;  # import dependencies&#xA;  useCommunicate(),&#xA;  h1(&#34;Hello&#34;),&#xA;  tags$a(&#34;Communicate&#34;, id = &#34;btn&#34;),&#xA;  tags$script(HTML(script))&#xA;)&#xA;&#xA;server &amp;lt;- \(input, output, session){&#xA;  com(&#34;add&#34;, add)(x = Integer)&#xA;}&#xA;&#xA;shinyApp(ui, server)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defaults&lt;/h3&gt; &#xA;&lt;p&gt;You can also specifiy callback functions&#39; argument defaults as done below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)&#xA;library(communicate)&#xA;&#xA;add &amp;lt;- \(x, y){&#xA;  x + y&#xA;}&#xA;&#xA;script &amp;lt;- &#34;&#xA;  $(&#39;#btn&#39;).on(&#39;click&#39;, () =&amp;gt; {&#xA;    communicate.com(&#39;add&#39;, {x: 1})&#xA;      .then(res =&amp;gt; alert(`equals: ${res}`));&#xA;  })&#xA;&#34;&#xA;&#xA;ui &amp;lt;- fluidPage(&#xA;  # import dependencies&#xA;  useCommunicate(),&#xA;  h1(&#34;Hello&#34;),&#xA;  tags$a(&#34;Communicate&#34;, id = &#34;btn&#34;),&#xA;  tags$script(HTML(script))&#xA;)&#xA;&#xA;server &amp;lt;- \(input, output, session){&#xA;  com(&#34;add&#34;, add)(x = Integer, y = Numeric)(y = 1.1)&#xA;}&#xA;&#xA;shinyApp(ui, server)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JavaScript&lt;/h2&gt; &#xA;&lt;p&gt;Accessible from &lt;code&gt;communicate&lt;/code&gt;, functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;com&lt;/code&gt; - communicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hasCom&lt;/code&gt; - check if communication channel registered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getCom&lt;/code&gt; - get communication channel and its arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getComs&lt;/code&gt; - get all communication channels registered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;p&gt;You import the dependency with &lt;code&gt;useCommunicate()&lt;/code&gt;. Alternatively you can install the npm package, e.g.: if you use &lt;a href=&#34;https://packer.john-coene.com/&#34;&gt;packer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @devopifex/communicate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;packer::npm_install(&#34;@devopifex/communicate&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;communicate.hasCom(&#34;add&#34;)&#xA;&#xA;communicate.getCom(&#34;add&#34;)&#xA;&#xA;communicate.com(&#34;add&#34;, {x: 1, y: 2})&#xA;  .then(data =&amp;gt; console.log(data))&#xA;  .catch(error =&amp;gt; console.error(error))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>christophM/iml</title>
    <updated>2023-11-02T01:34:49Z</updated>
    <id>tag:github.com,2023-11-02:/christophM/iml</id>
    <link href="https://github.com/christophM/iml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iml: interpretable machine learning R package&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/christophM/iml/actions&#34;&gt;&lt;img src=&#34;https://github.com/christophM/iml/workflows/tic/badge.svg?branch=master&#34; alt=&#34;tic&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=iml&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/iml&#34; alt=&#34;CRAN Status Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=iml&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/iml&#34; alt=&#34;CRAN Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/christophM/iml?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/christophM/iml/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.21105/joss.00786&#34;&gt;&lt;img src=&#34;http://joss.theoj.org/papers/10.21105/joss.00786/status.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h1&gt;iml&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;iml&lt;/code&gt; is an R package that interprets the behavior and explains predictions of machine learning models. &lt;img src=&#34;https://github.com/christophM/iml/raw/master/man/figures/iml.png?raw=true&#34; align=&#34;right&#34; height=&#34;140/&#34;&gt; It implements model-agnostic interpretability methods - meaning they can be used with any machine learning model.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feature importance&lt;/li&gt; &#xA; &lt;li&gt;Partial dependence plots&lt;/li&gt; &#xA; &lt;li&gt;Individual conditional expectation plots (ICE)&lt;/li&gt; &#xA; &lt;li&gt;Accumulated local effects&lt;/li&gt; &#xA; &lt;li&gt;Tree surrogate&lt;/li&gt; &#xA; &lt;li&gt;LocalModel: Local Interpretable Model-agnostic Explanations&lt;/li&gt; &#xA; &lt;li&gt;Shapley value for explaining single predictions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more about the methods in the &lt;a href=&#34;https://christophm.github.io/interpretable-ml-book/agnostic.html&#34;&gt;Interpretable Machine Learning&lt;/a&gt; book.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Start an interactive notebook tutorial by clicking on this badge &lt;a href=&#34;http://beta.mybinder.org/v2/gh/christophM/iml/master?filepath=./notebooks/tutorial-intro.ipynb&#34;&gt;&lt;img src=&#34;http://mybinder.org/badge.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The package can be installed directly from CRAN and the development version from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Stable version&#xA;install.packages(&#34;iml&#34;)&#xA;&#xA;# Development version&#xA;remotes::install_github(&#34;christophM/iml&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;Changes of the packages can be accessed in the &lt;a href=&#34;https://christophm.github.io/iml/news/index.html&#34;&gt;NEWS file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;First we train a Random Forest to predict the Boston median housing value. How does &lt;code&gt;lstat&lt;/code&gt; influence the prediction individually and on average? (Accumulated local effects)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#34;iml&#34;)&#xA;library(&#34;randomForest&#34;)&#xA;data(&#34;Boston&#34;, package = &#34;MASS&#34;)&#xA;rf = randomForest(medv ~ ., data = Boston, ntree = 50)&#xA;X = Boston[which(names(Boston) != &#34;medv&#34;)]&#xA;model = Predictor$new(rf, data = X, y = Boston$medv)&#xA;effect = FeatureEffects$new(model)&#xA;effect$plot(features = c(&#34;lstat&#34;, &#34;age&#34;, &#34;rm&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/christophM/iml/main/man/figures/README-unnamed-chunk-2-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/christophM/iml/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use iml in a scientific publication, please cite it as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Molnar, Christoph, Giuseppe Casalicchio, and Bernd Bischl. &#34;iml: An R package for interpretable machine learning.&#34; Journal of Open Source Software 3.26 (2018): 786.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;@article{molnar2018iml,&#xA;  title={iml: An R package for interpretable machine learning},&#xA;  author={Molnar, Christoph and Casalicchio, Giuseppe and Bischl, Bernd},&#xA;  journal={Journal of Open Source Software},&#xA;  volume={3},&#xA;  number={26},&#xA;  pages={786},&#xA;  year={2018}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Â© 2018 - 2022 &lt;a href=&#34;https://christophm.github.io/&#34;&gt;Christoph Molnar&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The contents of this repository are distributed under the MIT license. See below for details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;The MIT License (MIT)&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;This work is funded by the Bavarian State Ministry of Education, Science and the Arts in the framework of the Centre Digitisation.Bavaria (ZD.B)&lt;/p&gt;</summary>
  </entry>
</feed>