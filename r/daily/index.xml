<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-02T01:38:53Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TsaiLintung/fastdid</title>
    <updated>2023-12-02T01:38:53Z</updated>
    <id>tag:github.com,2023-12-02:/TsaiLintung/fastdid</id>
    <link href="https://github.com/TsaiLintung/fastdid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lightning-fast staggered Difference-in-Differences estimators&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fastdid - fast Difference-in-Differences&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TsaiLintung/fastdid/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/TsaiLintung/fastdid/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastdid&lt;/strong&gt; is a lightning-fast implementation of &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0304407620303948&#34;&gt;Callaway and Sant&#39;Anna&#39;s (2021)&lt;/a&gt; staggered Difference-in-Differences (DiD) estimators. DiD setup for millions of units used to take hours to run. With &lt;strong&gt;fastdid&lt;/strong&gt;, it takes seconds.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the staggered Difference-in-differences estimators implemented, visit Callaway and Sant&#39;Anna&#39;s &lt;a href=&#34;https://bcallaway11.github.io/did/articles/did-basics.html&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install &lt;strong&gt;fastdid&lt;/strong&gt; from GitHub.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;TsaiLintung/fastdid&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;fastdid&lt;/code&gt; is the main function provided by &lt;strong&gt;fastdid&lt;/strong&gt;. When using &lt;code&gt;fastdid&lt;/code&gt;, you need to provide the dataset (&lt;code&gt;dt&lt;/code&gt;), specify the names of the relevant columns (&lt;code&gt;-var&lt;/code&gt;), and the type of target (aggregated) parameters (&lt;code&gt;result_type&lt;/code&gt; such as &lt;code&gt;&#34;group_time&#34;&lt;/code&gt;, &lt;code&gt;&#34;time&#34;&lt;/code&gt;, &lt;code&gt;&#34;dynamic&#34;&lt;/code&gt;, or &lt;code&gt;&#34;simple&#34;&lt;/code&gt;.) Here is a simple call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#loading the package&#xA;library(fastdid)&#xA;&#xA;#generate simulated data&#xA;simdt &amp;lt;- sim_did(1e+03, 10, cov = &#34;cont&#34;, second_cov = TRUE, second_outcome = TRUE)&#xA;dt &amp;lt;- simdt$dt&#xA;&#xA;#calling fastdid&#xA;result &amp;lt;- fastdid(dt, #the dataset&#xA;                  timevar = &#34;time&#34;, cohortvar = &#34;G&#34;, unitvar = &#34;unit&#34;, outcomevar = &#34;y&#34;, #name of the columns&#xA;                  result_type = &#34;group_time&#34;) #the result type&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can control for covariates by providing the name of the data columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;result &amp;lt;- fastdid(dt, &#xA;                  timevar = &#34;time&#34;, cohortvar = &#34;G&#34;, unitvar = &#34;unit&#34;, outcomevar = &#34;y&#34;,&#xA;                  result_type = &#34;group_time&#34;,&#xA;                  covaraitesvar = c(&#34;x&#34;, &#34;x2&#34;)) #add covariates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clustered standard error can be obtained from multiplier bootstrap.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;result &amp;lt;- fastdid(dt,&#xA;                  timevar = &#34;time&#34;, cohortvar = &#34;G&#34;, unitvar = &#34;unit&#34;, outcomevar = &#34;y&#34;,&#xA;                  result_type = &#34;group_time&#34;,&#xA;                  clustervar = &#34;x&#34;, boot = TRUE) #add clustering by using bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Estimation for multiple outcomes can be done in one call by providing a vector of outcome column names (saves a lot of time when controlling for covariates since logit estimands can be recycled across outcomes).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#calling fastdid&#xA;result &amp;lt;- fastdid(dt, #the dataset&#xA;                  timevar = &#34;time&#34;, cohortvar = &#34;G&#34;, unitvar = &#34;unit&#34;, outcomevar = c(&#34;y&#34;, &#34;y2&#34;), #name of the columns&#xA;                  result_type = &#34;group_time&#34;) #the result type&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Performance&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastdid&lt;/strong&gt; is magnitudes faster than &lt;strong&gt;did&lt;/strong&gt;, and 15x faster than the fastest alternative &lt;strong&gt;DiDforBigData&lt;/strong&gt; for large dataset.&lt;/p&gt; &#xA;&lt;p&gt;Here is a comparison of run time for &lt;strong&gt;fastdid&lt;/strong&gt;, &lt;strong&gt;did&lt;/strong&gt;, and &lt;strong&gt;DiDforBigData&lt;/strong&gt; (dfbd for short) using a panel of 10 periods and varying samples sizes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/s5v32Rw.png&#34; alt=&#34;time comparison&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, the Author&#39;s computer fails to run &lt;strong&gt;did&lt;/strong&gt; at 1 million sample. For a rough idea, &lt;strong&gt;DiDforBigData&lt;/strong&gt; is about 100x faster than &lt;strong&gt;did&lt;/strong&gt; in Bradley Setzler&#39;s &lt;a href=&#34;https://setzler.github.io/DiDforBigData/articles/Background.html&#34;&gt;benchmark&lt;/a&gt;. Other staggered DiD implementations are even slower than &lt;strong&gt;did&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastdid&lt;/strong&gt; also uses less memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7emkgOz.png&#34; alt=&#34;RAM comparison&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the benchmark, a baseline group-time ATT is estimated with no covariates control, no bootstrap, and no explicit parallelization. Computing time is measured by &lt;code&gt;microbenchmark&lt;/code&gt; and peak RAM by &lt;code&gt;peakRAM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;strong&gt;fastdid&lt;/strong&gt; and &lt;strong&gt;did&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;p&gt;As the name suggests, &lt;strong&gt;fastdid&lt;/strong&gt;&#39;s goal is to be fast &lt;strong&gt;did&lt;/strong&gt;. Besides performance, here are some comparisons between the two packages.&lt;/p&gt; &#xA;&lt;h2&gt;Estimates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastdid&lt;/strong&gt;&#39;s estimators is identical to &lt;strong&gt;did&lt;/strong&gt;&#39;s. As the performance gains mostly come from efficient data manipulation, the key estimation implementations are analogous. For example, 2x2 DiD (&lt;code&gt;estimate_did.R&lt;/code&gt; and &lt;code&gt;DRDID::std_ipw_did_panel&lt;/code&gt;), influence function from weights (&lt;code&gt;aggregate_gt.R/get_weight_influence&lt;/code&gt;, &lt;code&gt;compute.aggte.R/wif&lt;/code&gt;), and multiplier bootstrap (&lt;code&gt;get_se.R&lt;/code&gt; and &lt;code&gt;mboot.R&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Therefore, the estimates are practically identical. For point estimates, the difference is negligible (smaller than 1e-12), and is most likely the result of &lt;a href=&#34;https://en.wikipedia.org/wiki/Floating-point_error_mitigation&#34;&gt;floating-point error&lt;/a&gt;. For standard errors, the estimates can be slightly different sometimes, but the difference never exceeds 1% of &lt;strong&gt;did&lt;/strong&gt;&#39;s standard error estimates.&lt;/p&gt; &#xA;&lt;h2&gt;Interface&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastdid&lt;/strong&gt; should feel very similar to &lt;code&gt;att_gt&lt;/code&gt;. But there are a few differences:&lt;/p&gt; &#xA;&lt;p&gt;Control group option:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;fastdid&lt;/th&gt; &#xA;   &lt;th&gt;did&lt;/th&gt; &#xA;   &lt;th&gt;control group used&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;both&lt;/td&gt; &#xA;   &lt;td&gt;notyettreated&lt;/td&gt; &#xA;   &lt;td&gt;never-treated + not-yet-but-eventually-treated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;never&lt;/td&gt; &#xA;   &lt;td&gt;nevertreated&lt;/td&gt; &#xA;   &lt;td&gt;never-treated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;notyet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;not-yet-but-eventually-treated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Aggregated parameters: &lt;code&gt;fastdid&lt;/code&gt; aggregates in the same function.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;fastdid&lt;/th&gt; &#xA;   &lt;th&gt;did&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;group_time&lt;/td&gt; &#xA;   &lt;td&gt;no aggregation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dynamic&lt;/td&gt; &#xA;   &lt;td&gt;dynamic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;time&lt;/td&gt; &#xA;   &lt;td&gt;calendar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;group&lt;/td&gt; &#xA;   &lt;td&gt;group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;simple&lt;/td&gt; &#xA;   &lt;td&gt;simple&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;p&gt;Notable differences in feature include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;fastdid&lt;/strong&gt; currently only offers inverse probability weights estimators for controlling for covariates (OR and DR likely to be added soon)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fastdid&lt;/strong&gt; only uses the time before the event as base periods (&#34;universal&#34; in &lt;code&gt;attgt&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fastdid&lt;/strong&gt; can only deal with balanced panels, no repeated cross-sections.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastdid&lt;/strong&gt; is still in active development. Many features are planned to be added:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple outcomes &lt;span&gt;✅&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Min/max event time and balanced composition&lt;/li&gt; &#xA; &lt;li&gt;DR and OR estimators&lt;/li&gt; &#xA; &lt;li&gt;Larger-than-memory data support&lt;/li&gt; &#xA; &lt;li&gt;User-provided aggregation scheme&lt;/li&gt; &#xA; &lt;li&gt;drop-in interface for did&lt;/li&gt; &#xA; &lt;li&gt;Anticipation&lt;/li&gt; &#xA; &lt;li&gt;Varying base periods&lt;/li&gt; &#xA; &lt;li&gt;User-provided logit formula&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Further optimization!&lt;/p&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;h2&gt;0.9.1 (2023/10/20)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;now supprts estimation for multiple outcomes in one go!&lt;/li&gt; &#xA; &lt;li&gt;data validation: no longer check missing values for columns not used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Acknowledgments&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;fastdid&lt;/strong&gt; is created by Lin-Tung Tsai, Maxwell Kellogg,and Kuan-Ju Tseng.&lt;/p&gt;</summary>
  </entry>
</feed>