<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-05T01:37:46Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cran/TSSVM</title>
    <updated>2022-12-05T01:37:46Z</updated>
    <id>tag:github.com,2022-12-05:/cran/TSSVM</id>
    <link href="https://github.com/cran/TSSVM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❗ This is a read-only mirror of the CRAN R package repository. TSSVM — Time Series Forecasting using SVM Model&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>hadley/minby</title>
    <updated>2022-12-05T01:37:46Z</updated>
    <id>tag:github.com,2022-12-05:/hadley/minby</id>
    <link href="https://github.com/hadley/minby" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compute minimum of one variable grouped by another&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;minby&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of minby is to solve the common problem of finding the minimum of a variable broken down by a group. To save you even more time, it includes a precomputed dataset giving the answer to one of the most important data science questions of 2022: what is the minimum of mpg by cyl?&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of minby like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;hadley/minby&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(minby)&#xA;min_mpg_by_cyl&#xA;#&amp;gt;   cyl  mpg&#xA;#&amp;gt; 1   4 21.4&#xA;#&amp;gt; 2   6 17.8&#xA;#&amp;gt; 3   8 10.4&#xA;&#xA;mtcars |&amp;gt; min_by(cyl, c(vs, am))&#xA;#&amp;gt; # A tibble: 4 × 3&#xA;#&amp;gt; # Groups:   vs [2]&#xA;#&amp;gt;      vs    am   cyl&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1     0     0     8&#xA;#&amp;gt; 2     0     1     4&#xA;#&amp;gt; 3     1     0     4&#xA;#&amp;gt; 4     1     1     4&#xA;mtcars |&amp;gt; min_by(where(is.numeric), cyl)&#xA;#&amp;gt; # A tibble: 3 × 11&#xA;#&amp;gt;     cyl   mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1     4  21.4  71.1    52  3.69  1.51  16.7     0     0     3     1&#xA;#&amp;gt; 2     6  17.8 145     105  2.76  2.62  15.5     0     0     3     1&#xA;#&amp;gt; 3     8  10.4 276.    150  2.76  3.17  14.5     0     0     3     2&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>NorskRegnesentral/shapr</title>
    <updated>2022-12-05T01:37:46Z</updated>
    <id>tag:github.com,2022-12-05:/NorskRegnesentral/shapr</id>
    <link href="https://github.com/NorskRegnesentral/shapr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Explaining the output of machine learning models with more accurately estimated Shapley values&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shapr &lt;img src=&#34;https://raw.githubusercontent.com/NorskRegnesentral/shapr/master/man/figures/NR-logo_utvidet_r32g60b136_small.png&#34; align=&#34;right&#34; height=&#34;50px&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=shapr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version-last-release/shapr&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=shapr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/shapr&#34; alt=&#34;CRAN_Downloads_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NorskRegnesentral/shapr/actions?query=workflow%3AR-CMD-check&#34;&gt;&lt;img src=&#34;https://github.com/NorskRegnesentral/shapr/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.21105/joss.02027&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.02027/status.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h1&gt;NOTE: This package is undergoing severe restructuring. A new version (with breaking changes) will be available on GitHub soon.&lt;/h1&gt; &#xA;&lt;p&gt;The most common machine learning task is to train a model which is able to predict an unknown outcome (response variable) based on a set of known input variables/features. When using such models for real life applications, it is often crucial to understand why a certain set of features lead to exactly that prediction. However, explaining predictions from complex, or seemingly simple, machine learning models is a practical and ethical question, as well as a legal issue. Can I trust the model? Is it biased? Can I explain it to others? We want to explain individual predictions from a complex machine learning model by learning simple, interpretable explanations.&lt;/p&gt; &#xA;&lt;p&gt;Shapley values is the only prediction explanation framework with a solid theoretical foundation (Lundberg and Lee (2017)). Unless the true distribution of the features are known, and there are less than say 10-15 features, these Shapley values needs to be estimated/approximated. Popular methods like Shapley Sampling Values (Štrumbelj and Kononenko (2014)), SHAP/Kernel SHAP (Lundberg and Lee (2017)), and to some extent TreeSHAP (Lundberg, Erion, and Lee (2018)), assume that the features are independent when approximating the Shapley values for prediction explanation. This may lead to very inaccurate Shapley values, and consequently wrong interpretations of the predictions. Aas, Jullum, and Løland (2021) extends and improves the Kernel SHAP method of Lundberg and Lee (2017) to account for the dependence between the features, resulting in significantly more accurate approximations to the Shapley values. &lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S0004370221000539&#34;&gt;See the paper for details&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This package implements the methodology of Aas, Jullum, and Løland (2021).&lt;/p&gt; &#xA;&lt;p&gt;The following methodology/features are currently implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native support of explanation of predictions from models fitted with the following functions &lt;code&gt;stats::glm&lt;/code&gt;, &lt;code&gt;stats::lm&lt;/code&gt;,&lt;code&gt;ranger::ranger&lt;/code&gt;, &lt;code&gt;xgboost::xgboost&lt;/code&gt;/&lt;code&gt;xgboost::xgb.train&lt;/code&gt; and &lt;code&gt;mgcv::gam&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Accounting for feature dependence assuming the features are Gaussian (Aas, Jullum, and Løland (2021)).&lt;/li&gt; &#xA; &lt;li&gt;Accounting for feature dependence with a Gaussian copula (Gaussian dependence structure, any marginal) (Aas, Jullum, and Løland (2021)).&lt;/li&gt; &#xA; &lt;li&gt;Accounting for feature dependence using the Mahalanobis distance based empirical (conditional) distribution approach of Aas, Jullum, and Løland (2021).&lt;/li&gt; &#xA; &lt;li&gt;Accounting for feature dependence using conditional inference trees (Redelmeier, Jullum, and Aas (2020)).&lt;/li&gt; &#xA; &lt;li&gt;Combining any of the four methods.&lt;/li&gt; &#xA; &lt;li&gt;Optional use of the AICc criterion of Hurvich, Simonoff, and Tsai (1998) when optimizing the bandwidth parameter in the empirical (conditional) approach of Aas, Jullum, and Løland (2021).&lt;/li&gt; &#xA; &lt;li&gt;Functionality for visualizing the explanations.&lt;/li&gt; &#xA; &lt;li&gt;Support for models not supported natively.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;Current methodological restrictions:&#xA;&#xA;- The features must follow a continuous distribution&#xA;- Discrete features typically work just fine in practice although the theory breaks down&#xA;- Ordered/unordered categorical features are not supported&#xA;--&gt; &#xA;&lt;p&gt;Future releases will include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for parallelization over explanations, Monte Carlo sampling and features subsets for non-parallelizable prediction functions.&lt;/li&gt; &#xA; &lt;li&gt;Computational improvement of the AICc optimization approach,&lt;/li&gt; &#xA; &lt;li&gt;Adaptive selection of method to account for the feature dependence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that both the features and the prediction must be numeric. The approach is constructed for continuous features. Discrete features may also work just fine with the empirical (conditional) distribution approach. Unlike SHAP and TreeSHAP, we decompose probability predictions directly to ease the interpretability, i.e.&amp;nbsp;not via log odds transformations. The application programming interface (API) of &lt;code&gt;shapr&lt;/code&gt; is inspired by Pedersen and Benesty (2019).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the current stable release from CRAN, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;shapr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the current development version, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;NorskRegnesentral/shapr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to install all packages of the models we currently support, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;NorskRegnesentral/shapr&#34;, dependencies = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would also like to build and view the vignette locally, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;NorskRegnesentral/shapr&#34;, dependencies = TRUE, build_vignettes = TRUE)&#xA;vignette(&#34;understanding_shapr&#34;, &#34;shapr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can always check out the latest version of the vignette &lt;a href=&#34;https://norskregnesentral.github.io/shapr/articles/understanding_shapr.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;shapr&lt;/code&gt; supports computation of Shapley values with any predictive model which takes a set of numeric features and produces a numeric outcome.&lt;/p&gt; &#xA;&lt;p&gt;The following example shows how a simple &lt;code&gt;xgboost&lt;/code&gt; model is trained using the &lt;em&gt;Boston Housing Data&lt;/em&gt;, and how &lt;code&gt;shapr&lt;/code&gt; explains the individual predictions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(xgboost)&#xA;library(shapr)&#xA;&#xA;data(&#34;Boston&#34;, package = &#34;MASS&#34;)&#xA;&#xA;x_var &amp;lt;- c(&#34;lstat&#34;, &#34;rm&#34;, &#34;dis&#34;, &#34;indus&#34;)&#xA;y_var &amp;lt;- &#34;medv&#34;&#xA;&#xA;ind_x_test &amp;lt;- 1:6&#xA;x_train &amp;lt;- as.matrix(Boston[-ind_x_test, x_var])&#xA;y_train &amp;lt;- Boston[-ind_x_test, y_var]&#xA;x_test &amp;lt;- as.matrix(Boston[ind_x_test, x_var])&#xA;&#xA;# Looking at the dependence between the features&#xA;cor(x_train)&#xA;#&amp;gt;            lstat         rm        dis      indus&#xA;#&amp;gt; lstat  1.0000000 -0.6108040 -0.4928126  0.5986263&#xA;#&amp;gt; rm    -0.6108040  1.0000000  0.1999130 -0.3870571&#xA;#&amp;gt; dis   -0.4928126  0.1999130  1.0000000 -0.7060903&#xA;#&amp;gt; indus  0.5986263 -0.3870571 -0.7060903  1.0000000&#xA;# Fitting a basic xgboost model to the training data&#xA;model &amp;lt;- xgboost(&#xA;  data = x_train,&#xA;  label = y_train,&#xA;  nround = 20,&#xA;  verbose = FALSE&#xA;)&#xA;&#xA;# Prepare the data for explanation&#xA;explainer &amp;lt;- shapr(x_train, model)&#xA;#&amp;gt; &#xA;#&amp;gt; Success with message:&#xA;#&amp;gt; The specified model provides feature classes that are NA. The classes of data are taken as the truth.&#xA;# Specifying the phi_0, i.e. the expected prediction without any features&#xA;p &amp;lt;- mean(y_train)&#xA;&#xA;# Computing the actual Shapley values with kernelSHAP accounting for feature dependence using&#xA;# the empirical (conditional) distribution approach with bandwidth parameter sigma = 0.1 (default)&#xA;explanation &amp;lt;- explain(&#xA;  x_test,&#xA;  approach = &#34;empirical&#34;,&#xA;  explainer = explainer,&#xA;  prediction_zero = p&#xA;)&#xA;&#xA;# Printing the Shapley values for the test data.&#xA;# For more information about the interpretation of the values in the table, see ?shapr::explain.&#xA;print(explanation$dt)&#xA;#&amp;gt;      none     lstat         rm       dis      indus&#xA;#&amp;gt; 1: 22.446 5.2632030 -1.2526613 0.2920444  4.5528644&#xA;#&amp;gt; 2: 22.446 0.1671901 -0.7088401 0.9689005  0.3786871&#xA;#&amp;gt; 3: 22.446 5.9888022  5.5450858 0.5660134 -1.4304351&#xA;#&amp;gt; 4: 22.446 8.2142204  0.7507572 0.1893366  1.8298304&#xA;#&amp;gt; 5: 22.446 0.5059898  5.6875103 0.8432238  2.2471150&#xA;#&amp;gt; 6: 22.446 1.9929673 -3.6001958 0.8601984  3.1510531&#xA;# Finally we plot the resulting explanations&#xA;plot(explanation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/NorskRegnesentral/shapr/master/man/figures/README-basic_example-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;All feedback and suggestions are very welcome. Details on how to contribute can be found &lt;a href=&#34;https://norskregnesentral.github.io/shapr/CONTRIBUTING.html&#34;&gt;here&lt;/a&gt;. If you have any questions or comments, feel free to open an issue &lt;a href=&#34;https://github.com/NorskRegnesentral/shapr/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the ‘shapr’ project is released with a &lt;a href=&#34;https://norskregnesentral.github.io/shapr/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt; &#xA; &lt;div id=&#34;ref-aas2019explaining&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Aas, Kjersti, Martin Jullum, and Anders Løland. 2021. “Explaining Individual Predictions When Features Are Dependent: More Accurate Approximations to Shapley Values.” &lt;em&gt;Artificial Intelligence&lt;/em&gt; 298.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-hurvich1998smoothing&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Hurvich, Clifford M, Jeffrey S Simonoff, and Chih-Ling Tsai. 1998. “Smoothing Parameter Selection in Nonparametric Regression Using an Improved Akaike Information Criterion.” &lt;em&gt;Journal of the Royal Statistical Society: Series B (Statistical Methodology)&lt;/em&gt; 60 (2): 271–93.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-lundberg2018consistent&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Lundberg, Scott M, Gabriel G Erion, and Su-In Lee. 2018. “Consistent Individualized Feature Attribution for Tree Ensembles.” &lt;em&gt;arXiv Preprint arXiv:1802.03888&lt;/em&gt;.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-lundberg2017unified&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Lundberg, Scott M, and Su-In Lee. 2017. “A Unified Approach to Interpreting Model Predictions.” In &lt;em&gt;Advances in Neural Information Processing Systems&lt;/em&gt;, 4765–74.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-lime_api&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Pedersen, Thomas Lin, and Michaël Benesty. 2019. &lt;em&gt;Lime: Local Interpretable Model-Agnostic Explanations&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=lime&#34;&gt;https://CRAN.R-project.org/package=lime&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-redelmeier2020explaining&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Redelmeier, Annabelle, Martin Jullum, and Kjersti Aas. 2020. “Explaining Predictive Models with Mixed Features Using Shapley Values and Conditional Inference Trees.” In &lt;em&gt;International Cross-Domain Conference for Machine Learning and Knowledge Extraction&lt;/em&gt;, 117–37. Springer.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-vstrumbelj2014explaining&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Štrumbelj, Erik, and Igor Kononenko. 2014. “Explaining Prediction Models and Individual Predictions with Feature Contributions.” &lt;em&gt;Knowledge and Information Systems&lt;/em&gt; 41 (3): 647–65.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>