<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:37:49Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>course-dprep/Formula1-event-on-Airbnb-prices</title>
    <updated>2022-10-16T01:37:49Z</updated>
    <id>tag:github.com,2022-10-16:/course-dprep/Formula1-event-on-Airbnb-prices</id>
    <link href="https://github.com/course-dprep/Formula1-event-on-Airbnb-prices" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is created for the course Data Preparation and Workflow Management taught at the university of Tilburg. Our goal is to compare a city&#39;s availability on Airbnb during a Formula 1 event with a city that is comparable, but where no event is hosted. As for the scientific method, we are going to implement a quasi-experiment.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;How the popularity of F1 influences the prices of Airbnb listings in different cities&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/109277196/194825057-e42f7bf1-74fb-40be-ab0a-332552b59e9a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Project description&lt;/h1&gt; &#xA;&lt;p&gt;Formula 1 is becoming a more popular sport every year, with weekend attendaces of hundreds of thousands of visitors in many cities around the world, with a record of around 420,00 visitors in Melbourne, Australia(ESPN, 2022). Many of those visitors are from all over the world and are in need of an accommadation for the weekend. Hotels are quickly booked up for the weekend, so the F1 fans are looking for other options. Airbnb listings are an afforable option and it feels a lot like home, with among others, kitchens and livingrooms.&lt;/p&gt; &#xA;&lt;p&gt;We were, however, curious if the prices were significanlty higher in those weekends compared to other weekends in the same city. Hotels change their prices a lot in the peak season, so it would make sense Airbnb listers to the same thing. That&#39;s why we are conducting a research on the price infleunces of a Formula 1 event on Airbnb listings. We attempt to answer the following research question:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&#34;To what extent does the presence of a Formula 1 race weekend influence the prices of Airbnb listings in the respective city?&#34;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Analysis&lt;/h1&gt; &#xA;&lt;p&gt;This project aims to compare the prices of Airbnb’s in cities where the Formula 1 race will take place and cities where there is no Formula 1 race (in the same country and around the same size) at the same moment in time. This way we can check if the prices are not influenced by other factors, like it is just a busier weekend. The data of the following cities will be used to test the research question:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Melbourne (F1 race) will be compared with Sydney (No F1 race) on 8-10 of April&lt;/li&gt; &#xA; &lt;li&gt;Barcelona (F1 race) will be compared with Madrid (No F1 Race) on 20-22 of May We wil also consider the influence of time in the analysis by looking at the week prior to the respective race weekend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variable types&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Data class&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;price&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Listing price of room per night&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;numeric&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;city&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;City of observation&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;date&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Date of booking&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;Date&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;room type&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Type of room&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;neighbourhood&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Neighbourhood of city&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Type of analysis&lt;/h3&gt; &#xA;&lt;p&gt;The type of analysis that is used in this paper is a quasi-experiment with the difference in differences method. With this method, one can check if a treatment (in the case of this paper, a Formula 1 event) has effect on an outcome (in the case of this paper the mean Airbnb price) by comparing the average change over time in the outcome variable for the treatment group to the average change over time for the control group.&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion analysis&lt;/h2&gt; &#xA;&lt;p&gt;The results of the analyses performed only confirms the hypothesis in the case of the Formula 1 event that was held in Australia. In that case, the mean Airbnb price of the city where the event was held (Melbourne) was higher than the city (Sydney) where no event was held. The dataset of Spain showed opposite results. The mean price Airbnb of the city where no event was held (Madrid), was higher than the city where the event was held (Barcelona). This went in against the hypothesis.&lt;/p&gt; &#xA;&lt;h1&gt;Structure of the repository&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── data&#xA;├── gen&#xA;   ├── analysis&#xA;   ├── data-preparation&#xA;   └── paper&#xA;└── src&#xA;   ├── analysis&#xA;   ├── data-preparation&#xA;   └── paper&#xA;├── .gitignore&#xA;├── README.md&#xA;├── makefile&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example of reproducible research workflow&lt;/h1&gt; &#xA;&lt;p&gt;The main aim of this to have a basic structure, which can be easily adjusted to use in an actual project. In this example project, the following is done:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and prepare data from insideairbnb.com (Calender and listings data from Barcelona, Madrid, Melbounre and Sydney)&lt;/li&gt; &#xA; &lt;li&gt;Run some analysis on the cleaned and filtered data (filtered on date, removed unnecessary columns and merged all the datasets into two final datasets)&lt;/li&gt; &#xA; &lt;li&gt;Analyse the results (see if the prices are influenced by the F1 events that took place in Barcelona and Melbourne.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;R &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;R Markdown, R script&lt;/li&gt; &#xA;   &lt;li&gt;R packages: Tidyverse, Dplyr, Readr&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Gnu Make &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Makefile&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Git Bash&lt;/li&gt; &#xA; &lt;li&gt;GitHub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to run the project&lt;/h2&gt; &#xA;&lt;p&gt;To run the entire project, type &#34;make&#34; in the command prompt and run. type make -n beforehand to check what changes will be made.&lt;/p&gt; &#xA;&lt;p&gt;Sidenotes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make has to be installed in order for it to work.&lt;/li&gt; &#xA; &lt;li&gt;It can take some time fo the whole project to run.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Insideairbnb (&lt;a href=&#34;http://insideairbnb.com/get-the-data/&#34;&gt;http://insideairbnb.com/get-the-data/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ESPN (&lt;a href=&#34;https://www.espn.com/f1/story/_/id/33710400/australian-grand-prix-sets-new-formula-one-melbourne-sporting-attendance-records&#34;&gt;https://www.espn.com/f1/story/_/id/33710400/australian-grand-prix-sets-new-formula-one-melbourne-sporting-attendance-records&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IMPORTANT: In &lt;code&gt;makefile&lt;/code&gt;, when using &lt;code&gt;\&lt;/code&gt; to split code into multiple lines, no space should follow &lt;code&gt;\&lt;/code&gt;. Otherwise Gnu make aborts with error 193.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;This repository is produced for the course Data Preperation and Workflow Management taught by Hannes Datta, at the Tilburg School of Economics and Management, as part of the Master&#39;s program Marketing Analytics. The repository is collabarted on by team 15, consisting of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bjorn Lauwers&lt;/li&gt; &#xA; &lt;li&gt;Luc van Bree&lt;/li&gt; &#xA; &lt;li&gt;Sam Villevoye&lt;/li&gt; &#xA; &lt;li&gt;Sjoerd Bijl&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SmritiChawla/Precily</title>
    <updated>2022-10-16T01:37:49Z</updated>
    <id>tag:github.com,2022-10-16:/SmritiChawla/Precily</id>
    <link href="https://github.com/SmritiChawla/Precily" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; Title: Gene expression based inference of cancer drug sensitivity &lt;/h1&gt; &#xA;&lt;h3&gt; Precily, Deep neural network based framework for prediction of drug response in both in vivo and in vitro settings.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SmritiChawla/Precily/main/Workflow.png&#34; alt=&#34;Workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt; System Requirements &lt;/h3&gt; &#xA;&lt;h2&gt; Hardware &lt;/h2&gt; &#xA;&lt;p&gt;The machine learning and deep learning models were trained on a system with a following specs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;RAM: 16+ GB&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;CPU: 16+ cores&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The expected runtime for the demo code is less than a minute. The typical installation time for setting up the environment is approximately 6 minutes. The runtimes are generated using a computer with the specs (16GB RAM, 4 cores@ 2.42 GHz)&lt;/p&gt; &#xA;&lt;h2&gt; Platforms used for training models and other analyses &lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux (Ubuntu 20.04.3)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows (version 21H2, OS Build 22000.739)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This resource provides code to reproduce key results in the manuscript. &lt;/p&gt; &#xA;&lt;h3&gt;Getting started&lt;/h3&gt; &#xA;&lt;h3&gt;Download Github repository &lt;/h3&gt; &#xA;&lt;p&gt;git clone &lt;a href=&#34;https://github.com/SmritiChawla/Precily.git&#34;&gt;https://github.com/SmritiChawla/Precily.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt; Requirements &lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keras 2.8.0&lt;/li&gt; &#xA; &lt;li&gt;keras-tuner 1.1.0&lt;/li&gt; &#xA; &lt;li&gt;caret(v6.0.90)&lt;/li&gt; &#xA; &lt;li&gt;glmnet(v4.1.3)&lt;/li&gt; &#xA; &lt;li&gt;ranger(v0.13.1)&lt;/li&gt; &#xA; &lt;li&gt;GSVA(v1.40.1)&lt;/li&gt; &#xA; &lt;li&gt;h2o(v3.36.0.4)&lt;/li&gt; &#xA; &lt;li&gt;PubChemPy(v1.0.4)&lt;/li&gt; &#xA; &lt;li&gt;SMILESVec&lt;/li&gt; &#xA; &lt;li&gt;EDASeq(v2.26.1)&lt;/li&gt; &#xA; &lt;li&gt;impute(v1.66.0)&lt;/li&gt; &#xA; &lt;li&gt;ggpubr(v0.4.0)&lt;/li&gt; &#xA; &lt;li&gt;ggplot2(v3.3.5)&lt;/li&gt; &#xA; &lt;li&gt;pheatmap(v1.0.12)&lt;/li&gt; &#xA; &lt;li&gt;parsnip(v0.2.1)&lt;/li&gt; &#xA; &lt;li&gt;ggridges(v0.5.3)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Data folder contains a zipped file used for training CCLE/GDSC and CCLE/CTRPv2 models. The CCLE GSVA scores are also included in this folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Data folder also contains GSVA pathway scores for Prostate cancer datasets used for evaluation of Precily. For reproducibility, respective datasets are also provided in each figure directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use R script EnvSet.R provided in the directory EnvironmentSetup to set up an environment in R for loading python trained deep neural network models.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run individual codes from the figure wise directories for reproducing manuscript results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We have provided pre-trained CCLE/GDSC models for drug response prediction. DrugsPred.R is the main function used for making predictions and takes the following inputs: &lt;br&gt;1. Pathway enrichment scores/GSVA scores &lt;br&gt;2. Metadata file. This file contains drugs and cell line names, cancer types and drug descriptors &lt;br&gt;3. Cancer Type. Type of cancer to be used for the input test dataset. Cancer types are encoded in form of TCGA abbreviations.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;b&gt;Example code:&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Predictions = drugPred(enrichment.scores,metadata,&#34;BRCA&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output file is a list of drug response predictions for the individual samples present in the test set.&lt;/p&gt; &#xA;&lt;h3&gt; Description &lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fig 1: This folder contains codes for evaluating the CCLE/GDSC data trained model and includes the following subdirectories:&lt;/p&gt; &lt;p&gt;Fig 1c. Pre-trained models to assess performance of Precily.&lt;/p&gt; &lt;p&gt;Fig 1d. CCLE/GDSC2 data trained models and independent test dataset used to evaluate Precily based deep neural network model.&lt;/p&gt; &lt;p&gt;Fig 1e. CCLE/CTRPv2 data trained models and independent test dataset used to evaluate Precily based deep neural network model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fig 2: This folder contains codes used for evaluating CCLE/GDSC data trained model on scRNA-seq datasets and includes the following subdirectories:&lt;/p&gt; &lt;p&gt;Fig 2a. This folder contains CCLE/GDSC dataset trained models, processed Kinker, G. S. et al. scRNA-seq dataset and ground truth labels for evaluation of Precily.&lt;/p&gt; &lt;p&gt;Fig 2b. This folder contains code for assessing the efficiency of our model on Lee et al. scRNA-seq profiles of MDA-MB-231 breast cancer cells.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fig 3: This directory contains codes for evaluating Precily on the prostate cancer cell line datasets. The GSVA scores for untreated prostate cancer cell lines and treated LNCaP cell lines are provided for drug response prediction.&lt;/p&gt; &lt;p&gt;Fg 3a &amp;amp; b. Evaluation of Precily using Prostate cancer (PCa) baseline cell lines. This folder contains CCLE/GDSC2 models retrained after removing the concerned cell lines present in PCa cell line independent test set and GSVA scores.&lt;/p&gt; &lt;p&gt;Fig 3c. This folder contains CCLE/GDSC pre-trained models to assess the performance of Precily on LNCaP cell lines and compare it with groud truth from GDSC database.&lt;/p&gt; &lt;p&gt;Fig 3d. This folder contains pre-trained CCLE/GDSC models and enrichment scores of LNCaP cell lines under different treatment conditions for making predictions.&lt;/p&gt; &lt;p&gt;Fig 3e. This folder contains enrichment scores of LNCaP cell lines under different treatment conditions to investigate the enrichment of proliferation related pathways.&lt;/p&gt; &lt;p&gt;Fig 3f. This folder contains pre-trained CCLE/GDSC models and enrichment scores of LNCaP cell lines under different treatment conditions for analysis of predictions of DNA replication pathway related drugs.&lt;/p&gt; &lt;p&gt;Fig 3g. The folder contains CCLE/GDSC pre-trained models and file containing SMILES for Orlistat and Metformin drugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fig 4: This directory contains codes for reproducing results for LNCaP derived xenografts datasets. We have included predictions for 155 drugs for 54 samples and GSVA scores.&lt;/p&gt; &lt;p&gt;Fig 4b. CCLE/GDSC pre-trained models for making predictions on PCa xenograft data. This directory also contains pre-computed predictions used for downstream analysis. Our xenograft dataset clustered into 3 groups based on the predictions.&lt;/p&gt; &lt;p&gt;Fig 4c. This folder contains code to visualize distribution of predictions across 3 clusters.&lt;/p&gt; &lt;p&gt;Fig 4d. This folder contains pathway enrichment scores of PCa xenograft dataset to visualize the distribution of proliferation related pathways across 3 clusters.&lt;/p&gt; &lt;p&gt;Fig 4e. This directory contains pre-computed predictions on PCa xenograft dataset for visualization of overall predictions across different tumor types.&lt;/p&gt; &lt;p&gt;Fig 4f. This folder contains pathway enrichment scores of PCa xenograft dataset to visualize the distribution of proliferation related pathways across tumor types.&lt;/p&gt; &lt;p&gt;Fig 4g. This directory contains pre-computed predictions on PCa xenograft dataset for analyzing predictions of EGFR related inhibitors across tumor types.&lt;/p&gt; &lt;p&gt;Fig 4h. This directory contains code and SMILES to predict drug response for three drugs (Apalutamide, Enzalutamide and Bicalutamide). These three drugs are not part of our training data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fig 5. This directory contains codes for evaluating model trained on TCGA patient RNA-seq bulk profiles.&lt;/p&gt; &lt;p&gt;Fig 5a. This folder contains script and data used for training AutoML models.&lt;/p&gt; &lt;p&gt;Fig 5b. This folder contains predictions obtained on the TCGA test dataset using the best AutoML model and code for computing survival based on these predictions.&lt;/p&gt; &lt;p&gt;Fig 5d-f. This folder contains codes for evaluating TCGA model using the external Wagle, Nikhil, et al. dataset.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supplementary directory contains codes for reproducing supplementary figures.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>t-kalinowski/Rapp</title>
    <updated>2022-10-16T01:37:49Z</updated>
    <id>tag:github.com,2022-10-16:/t-kalinowski/Rapp</id>
    <link href="https://github.com/t-kalinowski/Rapp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build CLI applications in R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rapp&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Rapp (short for &#34;R application&#34;) makes it fun to write and share command line applications in R.&lt;/p&gt; &#xA;&lt;p&gt;It is an alternative front end to R, a drop-in replacement for &lt;code&gt;Rscript&lt;/code&gt; that does automatic handling of command line arguments. It converts a simple R script into a command line application with a rich and robust support for command line arguments.&lt;/p&gt; &#xA;&lt;p&gt;It aims to provides a seamless transition from interactive repl-driven development at the R console to non-interactive execution at the command line.&lt;/p&gt; &#xA;&lt;p&gt;Here is a simple example Rapp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#!/usr/bin/env Rapp&#xA;#| name: flip-coin&#xA;#| description: Flip a coin.&#xA;&#xA;#| description: Number of coin flips&#xA;n &amp;lt;- 1&#xA;&#xA;cat(sample(c(&#34;heads&#34;, &#34;tails&#34;), n, TRUE), fill = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can invoke it from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ flip-coin&#xA;tails&#xA;&#xA;$ flip-coin --n=3&#xA;tails heads tails&#xA;&#xA;$ flip-coin --help --yaml&#xA;name: flip-coin&#xA;description: Flip a coin.&#xA;options:&#xA;  &#39;n&#39;:&#xA;    default: 1.0&#xA;    val_type: float&#xA;    arg_type: option&#xA;    description: Number of coin flips&#xA;arguments: {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Application options and arguments work like this:&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Simple assignments of scalar literals at the top level of the R script are automatically treated as command line &lt;em&gt;options&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n &amp;lt;- 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;becomes an option at the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flip-coin --n 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Option values passed from the command line are parsed as yaml/json, and then coerced to the original R type. The following option value types are supported: int, float, string, and bool. Values can be supplied after the option, or as part of the option with &lt;code&gt;=&lt;/code&gt;. The following two usages are the same:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flip-coin --n=1&#xA;flip-coin --n 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bool options, (that is, assignments of &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; in an R app) are a little different. They support usage as switches at the command line. For example in an R script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;echo &amp;lt;- TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;means that at the command line the following are supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my-app --echo       # TRUE &#xA;my-app --echo=yes   # TRUE &#xA;my-app --echo=true  # TRUE&#xA;my-app --echo=1     # TRUE&#xA;&#xA;my-app --no-echo     # FALSE &#xA;my-app --echo=no     # FALSE &#xA;my-app --echo=false  # FALSE &#xA;my-app --echo=0      # FALSE &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Positional Arguments&lt;/h3&gt; &#xA;&lt;p&gt;Simple assignments of length-0 objects at the top level of an R script become positional arguments. If the R symbol has a &lt;code&gt;...&lt;/code&gt; suffix or prefix, it becomes a collector for a variable number of positional arguments. Positional arguments always come into the R app as character strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;args... &amp;lt;- c()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;first_arg      &amp;lt;- c()&#xA;...middle_args &amp;lt;- c()&#xA;last_arg       &amp;lt;- c()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shipping an Rapp as part of an R package&lt;/h2&gt; &#xA;&lt;p&gt;You can easily share your R app command line executable as part of an R package.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add {Rapp} as a dependency in your DESCRIPTION&lt;/li&gt; &#xA; &lt;li&gt;Place your app in the &lt;code&gt;exec&lt;/code&gt; folder in your package, e.g: &lt;code&gt;exec/myapp&lt;/code&gt;. Apps are automatically installed as executable.&lt;/li&gt; &#xA; &lt;li&gt;Instruct your users to add executables from Rapp and your package to their PATH. On Linux and macOS, add the following to .bashrc or .zshrc (or equivalent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$(Rscript -e &#39;cat(system.file(&#34;exec&#34;, package = &#34;Rapp&#34;))&#39;):$PATH&#xA;export PATH=$(Rscript -e &#39;cat(system.file(&#34;exec&#34;, package = &#34;my.package.name&#34;))&#39;):$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Windows&lt;/h1&gt; &#xA;&lt;p&gt;Rapp works on Windows. However, because there is no native support for &lt;code&gt;!#&lt;/code&gt; shebang executable on Windows, you must invoke Rapp directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;Rapp flip-coin --n 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;inst/examples&lt;/code&gt; folder for more example R apps.&lt;/p&gt;</summary>
  </entry>
</feed>