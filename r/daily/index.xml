<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-06T01:37:35Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BlakeRMills/MoMAColors</title>
    <updated>2023-10-06T01:37:35Z</updated>
    <id>tag:github.com,2023-10-06:/BlakeRMills/MoMAColors</id>
    <link href="https://github.com/BlakeRMills/MoMAColors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Color Schemes based around artwork and the Museum of Modern Art.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MoMAColors&lt;/h1&gt; &#xA;&lt;p&gt;Palettes inspired by works at the Museum of Modern Art in New York.&lt;/p&gt; &#xA;&lt;p&gt;This is the sister package to &lt;a href=&#34;https://github.com/BlakeRMills/MetBrewer&#34;&gt;&lt;code&gt;MetBrewer&lt;/code&gt;&lt;/a&gt;, which contains color schemes based around artwork at the Metropolitan Museum of Art in New York. Structure of the package was based on coding from the &lt;a href=&#34;https://github.com/jakelawlor/PNWColors&#34;&gt;&lt;code&gt;PNWColors&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/karthik/wesanderson&#34;&gt;&lt;code&gt;wesanderson&lt;/code&gt;&lt;/a&gt; packages.&lt;/p&gt; &#xA;&lt;p&gt;For requests, questions, comments, concerns, or any thing else, feel free to reach out to me:&lt;br&gt; My Website: &lt;a href=&#34;https://www.blakerobertmills.com&#34;&gt;Here&lt;/a&gt;&lt;br&gt; Twitter: &lt;a href=&#34;https://twitter.com/BlakeRobMills&#34;&gt;Here&lt;/a&gt;&lt;br&gt; LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/blake-m-79a74513a/&#34;&gt;Here&lt;/a&gt; &lt;br&gt;Email: &lt;a href=&#34;mailto:blakerobertmills@gmail.com&#34;&gt;blakerobertmills@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Content&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BlakeRMills/MoMAColors/main/#install-package&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BlakeRMills/MoMAColors/main/#palettes&#34;&gt;Palettes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BlakeRMills/MoMAColors/main/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install Package&lt;/h2&gt; &#xA;&lt;h3&gt;R&lt;/h3&gt; &#xA;&lt;p&gt;MoMAColors is currently only available through GitHub. Use the following code to download it in R.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;BlakeRMills/MoMAColors&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Palettes&lt;/h2&gt; &#xA;&lt;h3&gt;All Palettes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex9.png&#34; alt=&#34;AllPals&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Abbott&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Abbott_Side.png&#34; alt=&#34;Abbott&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tress, 1994, Matthew Abbott, Synthetic polymer paint and modeling paste on linen, &lt;a href=&#34;https://www.moma.org/collection/works/79703?artist_id=7388&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Alkalay1&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Alkalay1_Side.png&#34; alt=&#34;Alkalay1&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stack, 2008, Shay Alkalay, Painted plywood and steel, &lt;a href=&#34;https://www.moma.org/collection/works/126819?artist_id=36511&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Alkalay2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Alkalay2_Side.png&#34; alt=&#34;Alkalay2&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stack, 2008, Shay Alkalay, Painted plywood and steel, &lt;a href=&#34;https://www.moma.org/collection/works/126820?classifications=3&amp;amp;date_begin=Pre-1850&amp;amp;date_end=2023&amp;amp;direction=fwd&amp;amp;page=5&amp;amp;q=&amp;amp;utf8=%E2%9C%93&amp;amp;with_images=1&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Althoff&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Althoff_Side.png&#34; alt=&#34;Althoff&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regulatory Reestablishment, 2000, Kai Althoff, Felt, fabric, quilt, and wool, &lt;a href=&#34;https://www.moma.org/collection/works/125097?artist_id=26178&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Andri&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Andri_Side.png&#34; alt=&#34;Andri&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Poster for the Twenty-sixth Secession Exhibition, 1906, Ferdinand Andri, Lithograph, &lt;a href=&#34;https://www.moma.org/collection/works/423767?sov_referrer=theme&amp;amp;theme_id=5611&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Avedon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Avedon_Side.png&#34; alt=&#34;Avedon&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;George Harrison, 1967, Richard Avedon, Lithograph, &lt;a href=&#34;https://www.moma.org/collection/works/8742&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Budnitz&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Budnitz_Side.png&#34; alt=&#34;Budnitz&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cycle Dunny, 2005, Paul Budnitz, Tristan Eaton, Cycle, Vinyl, &lt;a href=&#34;https://www.moma.org/collection/works/109304?artist_id=32733&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Clay&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Clay_Side.png&#34; alt=&#34;Clay&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sarah Cross, 1980, Maude Schuyler Clay, Chromogenic print, &lt;a href=&#34;https://www.moma.org/collection/works/49695?artist_id=1139&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Connors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Connors_Side.png&#34; alt=&#34;Connors&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Egypt, Hard G, 2015, Matt Connors, Acrylic on canvas with painted wood frame, &lt;a href=&#34;https://www.moma.org/collection/works/202454?artist_id=36363&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Dali&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Dali_Side.png&#34; alt=&#34;Dali&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Persistence of Memory, 1931, Salvador Dalí, Oil on canvas, &lt;a href=&#34;https://www.moma.org/collection/works/79018&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Doughton&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Doughton_Side.png&#34; alt=&#34;Doughton&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ferrum 5000, 1995, Steve Doughton, Film, &lt;a href=&#34;https://www.moma.org/collection/works/314423&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Ernst&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Ernst_Side.png&#34; alt=&#34;Ernst&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Two Children Are Threatened by a Nightingale (Deux Enfants sont menacés par un rossignol), 1924, Max Ernst, Oil with painted wood elements and cut-and-pasted printed paper on wood with wood frame, &lt;a href=&#34;https://www.moma.org/collection/works/79293&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Exter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Exter_Side.png&#34; alt=&#34;Exter&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don Juan, Hell (Don Juan, l’enfer) from Alexandra Exter: Stage Sets (Alexandra Exter: Décors de théâtre), 1929, Alexandra Exter, Mediun, &lt;a href=&#34;https://www.moma.org/collection/works/85213&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Flash&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Flash_Side.png&#34; alt=&#34;Flash&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Self-Portrait, New York City, New York, 1991, Lola Flash, Inkjet print, printed 2021, &lt;a href=&#34;https://www.moma.org/collection/works/423864&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Fritsch&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Fritsch_Side.png&#34; alt=&#34;Fritsch&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Group of Figures, 2006-08, Katharina Fritsch, Painted stainless steel, painted bronze, and painted copper electrotype filled with resin and fiberglass, &lt;a href=&#34;https://www.moma.org/collection/works/130959&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Kippenberger&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Kippenberger_Side.png&#34; alt=&#34;Kippenberger&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;War is No Nice, 1985, Martin Kippenberger, Oil and silicone rubber on canvas, &lt;a href=&#34;https://www.moma.org/collection/works/79453&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Klein&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Klein_Side.png&#34; alt=&#34;Klein&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New York Fly TWA, 1956, David Klein, Photolithograph, &lt;a href=&#34;https://www.moma.org/collection/works/6291?artist_id=3134&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Koons&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Koons_Side.png&#34; alt=&#34;Koons&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pink Panther, 1988, Jeff Koons, Porcelain on formica base, &lt;a href=&#34;https://www.moma.org/collection/works/81095?artist_id=6622&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Levine1&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Levine1_Side.png&#34; alt=&#34;Levine1&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After Mondrian from Meltdown, 1989, Sherrie Levine, One from a portfolio of four woodcuts, &lt;a href=&#34;https://www.moma.org/collection/works/65715&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Levine2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Levine2_Side.png&#34; alt=&#34;Levine2&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After Kirchner from Meltdown, 1989, Sherrie Levine, One from a portfolio of four woodcuts, &lt;a href=&#34;https://www.moma.org/collection/works/65714&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Liu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Liu_Side.png&#34; alt=&#34;Liu&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tulou Collective Housing, Nanhai, Guandong, China, 2005-08, Xiao Du Liu, Yan Meng, Hui Wang, Digital rendering, &lt;a href=&#34;https://www.moma.org/collection/works/416251&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Lupi&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Lupi_Side.png&#34; alt=&#34;Lupi&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dear Data: Week 43 (Trying New Things / A Week of New Things), 2015, Giorgia Lupi, Stefanie Posavec, Ink, pencil, colored pencil, and marker on paper, &lt;a href=&#34;https://www.moma.org/collection/works/216768?classifications=3&amp;amp;date_begin=Pre-1850&amp;amp;date_end=2023&amp;amp;direction=fwd&amp;amp;page=2&amp;amp;q=&amp;amp;utf8=%E2%9C%93&amp;amp;with_images=1&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Ohchi&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Ohchi_Side.png&#34; alt=&#34;Ohchi&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Radio, 1954, Hiroshi Ohchi, Silkscreen, &lt;a href=&#34;https://www.moma.org/collection/works/8819?artist_id=4381&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;OKeeffe&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/OKeeffe_Side.png&#34; alt=&#34;OKeeffe&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Evening Star No. III, 1917, Georgia O&#39;Keeffe, Watercolor on paper mounted on board, &lt;a href=&#34;https://www.moma.org/collection/works/78677?sov_referrer=theme&amp;amp;theme_id=5264&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Palermo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Palermo_Side.png&#34; alt=&#34;Palermo&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4 White Forms, 1975, Blinky Palermo, Synthetic polymer paint on aluminum, four panels, &lt;a href=&#34;https://www.moma.org/collection/works/119047&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Panton&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Panton_Side.png&#34; alt=&#34;Panton&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spectrum Textile, 1974, Verner Panton, Printed cotton, &lt;a href=&#34;https://www.moma.org/collection/works/292747?artist_id=4485&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Picabia&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Picabia_Side.png&#34; alt=&#34;Picabia&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Spring, 1912, Francis Picabia, Oil on canvas, &lt;a href=&#34;https://www.moma.org/collection/works/80658?artist_id=4607&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Picasso&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Picasso_Side.png&#34; alt=&#34;Picasso&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Les Demoiselles d&#39;Avignon, 1907, Pablo Picaso, Oil on canvas, &lt;a href=&#34;https://www.moma.org/collection/works/79766?sov_referrer=theme&amp;amp;theme_id=5135&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Rattner&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Rattner_Side.png&#34; alt=&#34;Rattner&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mother and Child, 1938, Abraham Rattner, Oil on canvas, &lt;a href=&#34;https://www.moma.org/collection/works/78474?classifications=9&amp;amp;date_begin=Pre-1850&amp;amp;date_end=2023&amp;amp;direction=fwd&amp;amp;include_uncataloged_works=1&amp;amp;page=37&amp;amp;q=&amp;amp;utf8=%E2%9C%93&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Sidhu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Sidhu_Side.png&#34; alt=&#34;Sidhu&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;May 24 from the series Doomscrolling, 2020-2021, Zorawar Sidhu, Rob Swainston, Woodcut, &lt;a href=&#34;https://www.moma.org/collection/works/431041?artist_id=134546&amp;amp;page=1&amp;amp;sov_referrer=artist&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Smith&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Smith_Side.png&#34; alt=&#34;Smith&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;White Rope, 1973, Richard Smith, Synthetic polymer paint on canvas with metal rods, rope, and string, &lt;a href=&#34;https://www.moma.org/collection/works/80052?classifications=9&amp;amp;date_begin=1970&amp;amp;date_end=1980&amp;amp;direction=fwd&amp;amp;page=4&amp;amp;q=&amp;amp;utf8=%E2%9C%93&amp;amp;with_images=1&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;ustwo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/ustwo_Side.png&#34; alt=&#34;ustwo&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monument Valley, 2014, ustwo Games, Video game software, &lt;a href=&#34;https://www.moma.org/collection/works/409699?classifications=3&amp;amp;date_begin=Pre-1850&amp;amp;date_end=2023&amp;amp;direction=fwd&amp;amp;page=3&amp;amp;q=&amp;amp;utf8=%E2%9C%93&amp;amp;with_images=1&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;VanGogh&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/VanGogh_Side.png&#34; alt=&#34;VanGogh&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Starry Night, 1889, Vincent van Gogh, Oil on canvas, &lt;a href=&#34;https://www.moma.org/collection/works/79802?sov_referrer=theme&amp;amp;theme_id=5134&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;vonHeyl&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/vonHeyl_Side.png&#34; alt=&#34;vonHeyl&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carlotta, Charline von Heyl, 2013, Oil, acrylic and charcoal on canvas, &lt;a href=&#34;https://www.moma.org/collection/works/178801?classifications=9&amp;amp;date_begin=Pre-1850&amp;amp;date_end=2023&amp;amp;q=&amp;amp;utf8=%E2%9C%93&amp;amp;with_images=1&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Colorblind-Friendly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Warhol&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Palettes/Warhol_Side.png&#34; alt=&#34;Warhol&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Collection of Marilyns, 1967, Andy Warhol, Portfolio of ten screenprints, &lt;a href=&#34;&#34;&gt;Link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;You can retrieve palettes using various methods listed below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;moma.colors(&#34;vonHeyl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex1.png&#34; alt=&#34;Ex1&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;moma.colors(&#34;Liu&#34;, n=6, type=&#34;discrete&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex2.png&#34; alt=&#34;Ex2&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;moma.colors(&#34;Clay&#34;, 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex3.png&#34; alt=&#34;Ex3&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;moma.colors(&#34;Ernst&#34; , n=100, type=&#34;continuous&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex4.png&#34; alt=&#34;Ex4&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Displaying All Palettes&lt;/h2&gt; &#xA;&lt;p&gt;All palettes can be displayed at once using the display.all.moma function. This returns all palettes in their entirety if no n is provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;display.all.moma()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex9.png&#34; alt=&#34;Ex9&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You are also able to enter the desired number of colors to view all palettes at the specific level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;display.all.moma(5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex10.png&#34; alt=&#34;Ex10&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You are able to only view colorblind-friendly palettes with the colorblind_only parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;display.all.moma(colorblind_only = T)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex11.png&#34; alt=&#34;Ex11&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All other parameters in moma.colors can be passed into display.all.moma&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;display.all.moma(n=4, override_order = T, direction = -1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex12.png&#34; alt=&#34;Ex12&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ggplot2 Examples&lt;/h3&gt; &#xA;&lt;p&gt;Here are also some ways you can incorporate this package into {ggplot2}&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=iris, aes(x=Species, y=Petal.Length, fill=Species)) +&#xA;  geom_violin() +&#xA;  scale_fill_manual(values=moma.colors(&#34;Smith&#34;, 3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/FillExample.png&#34; alt=&#34;Ex5&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +&#xA;  geom_point(size=2) +&#xA;  scale_color_moma_d(&#34;Liu&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/ColorMomaExample.png&#34; alt=&#34;Ex6&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data=iris, aes(x=Species, y=Sepal.Width, color=Sepal.Width)) +&#xA;  geom_point(size=3) +&#xA;  scale_color_gradientn(colors=moma.colors(&#34;Alkalay2&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/GradientExample.png&#34; alt=&#34;Ex7&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(urbnmapr)&#xA;countydata %&amp;gt;%&#xA;  left_join(counties, by = &#34;county_fips&#34;) %&amp;gt;%&#xA;  filter(state_name ==&#34;Nebraska&#34;) %&amp;gt;%&#xA;  ggplot(mapping=aes(long,lat,group = group, fill = horate)) +&#xA;  geom_polygon(color=&#34;black&#34;,size=.25) +&#xA;  scale_fill_moma_c(&#34;Kippenberger&#34;) +&#xA;  coord_fixed() +&#xA;  labs(fill=&#34;Homeownership rate&#34;) +&#xA;  theme_void()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/GradientMomaExample.png&#34; alt=&#34;Ex8&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Colorblind Friendly Checking&lt;/h2&gt; &#xA;&lt;p&gt;The package has been updated to check for colorblind-friendlyness You can list out the colorblind-friendly palettes with the following code&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;MoMAColors::colorblind_moma_palettes&#xA;&#xA; [1] &#34;Alkalay1&#34;     &#34;Alkalay2&#34;     &#34;Althoff&#34;      &#34;Andri&#34;        &#34;Connors&#34;      &#34;Doughton&#34;    &#xA; [7] &#34;Ernst&#34;        &#34;Exter&#34;        &#34;Flash&#34;        &#34;Fritsch&#34;      &#34;Kippenberger&#34; &#34;Koons&#34;       &#xA;[13] &#34;Levine2&#34;      &#34;Ohchi&#34;        &#34;OKeeffe&#34;      &#34;Palermo&#34;      &#34;Picabia&#34;      &#34;Picasso&#34;     &#xA;[19] &#34;Rattner&#34;      &#34;Sidhu&#34;        &#34;Smith&#34;        &#34;ustwo&#34;        &#34;VanGogh&#34;      &#34;vonHeyl&#34;     &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also test is a palettes is colorblind friendly using the function provided&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;MoMAColors::colorblind.friendly.moma(&#34;Palermo&#34;)&#xA;[1] TRUE&#xA;&#xA;MoMAColors::colorblind.friendly.moma(&#34;Avedon&#34;)&#xA;[1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Plots&lt;/h2&gt; &#xA;&lt;p&gt;The test.plots.moma function returns 4 different visualization types to get a quick glimse of how a desired palette would look in practice. This includes a starburst plot, a stream plot, a violin plot, and a stack bar chart. The test.plots.moma function can take all parameters that moma.colors is able to; however, plots cannot be generated when more than 26 colors are requested.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;test.plots.moma(&#34;Picabia&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex13.png&#34; alt=&#34;Ex13&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;test.plots.moma(&#34;Picasso&#34;, 5, direction = -1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/BlakeRMills/MoMAColors/raw/main/PackageImages/Examples/Ex14.png&#34; alt=&#34;Ex14&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ulisesbalza/mapas_R_intro</title>
    <updated>2023-10-06T01:37:35Z</updated>
    <id>tag:github.com,2023-10-06:/ulisesbalza/mapas_R_intro</id>
    <link href="https://github.com/ulisesbalza/mapas_R_intro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Intro a mapas en R&lt;/h1&gt; &#xA;&lt;h2&gt;Ulises Balza&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;mailto:ulisesbalza@gmail.com&#34;&gt;ulisesbalza@gmail.com&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Hay mucho material en internet para armar análisis espaciales y mapas en R! Mi idea es pasarles unos ejemplos que funcionen para que eso los anime a ir modificándolos y explorando cada vez más. Es muy importante que sepan que:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No necesariamente sé qué hago en cada paso, así funciona esto! Sabemos hasta donde podemos/queremos, sigue siendo mejor que algo empaquetado de lo que no sabemos nada. En R usamos lo que hicieron los demás, copiamos y pegamos, erramos, y al final aprendemos lo que se puede; lo importante es que todo está acá y se puede mejorar.&lt;/li&gt; &#xA; &lt;li&gt;Trate de no repetir cosas en los tres scripts (por ejemplo, la mayor parte de lo lindo de los mapas y como ponerle cositas está concentrando en el primer script, pero en el resto hay cosas que creo son interesantes por otras razones). Les dejo a ustedes como transformar lo más analítico en más visual (pero lo analítico es clave, porque requiere -más aún que lo visual- de algo que sea repetible)&lt;/li&gt; &#xA; &lt;li&gt;No hice todo de cero! Es lo lindo de lo replicable. Cada &#34;nuevo&#34; script está basado en mucho de lo anterior.&lt;/li&gt; &#xA; &lt;li&gt;Esto lo mas lindo que hay? No, pero sabés qué? Si lo mejorás y lo compartís ganamos todes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Software y datos libres&lt;/h3&gt; &#xA;&lt;p&gt;Todo lo que aparece en los scripts es de libre descarga y uso Usé datos de IUCN (iucnredlist.org), GBIF (gbif.org) y las siluetas de los bichitos son de Phylopic (phylopic.org). Todo está a disposición para ser usado, reusado y mejorado, la única manera en que podemos avanzar y seguir aprendiendo.&lt;/p&gt; &#xA;&lt;h3&gt;Scripts&lt;/h3&gt; &#xA;&lt;p&gt;El primer script tiene el primer mapita que mostré en ex-Twitter (&lt;a href=&#34;https://x.com/UlisesBalza/status/1708926526014537973?s=20&#34;&gt;https://x.com/UlisesBalza/status/1708926526014537973?s=20&lt;/a&gt;). El segundo script es para armarse su propia base de datos basada en registros públicos y armar un mapa de riqueza de especies. El tercer script es para hacer un mapa con datos de movimientos de animales.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MilesMcBain/flippingtables</title>
    <updated>2023-10-06T01:37:35Z</updated>
    <id>tag:github.com,2023-10-06:/MilesMcBain/flippingtables</id>
    <link href="https://github.com/MilesMcBain/flippingtables" rel="alternate"></link>
    <summary type="html">&lt;p&gt;turn the tables on data.frame printing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;(╯°□°）╯︵ ┻━┻ {flippingtables} (╯°□°）╯︵ ┻━┻&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;All data.frame print methods are wrong, but some are useful&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Inside you are two R users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One seeks meaning and truth in the numbers&lt;/li&gt; &#xA; &lt;li&gt;One seeks correctness and reproducibility in the code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The problem with all &lt;code&gt;print()&lt;/code&gt; methods is that none can satisfy both users.&lt;/p&gt; &#xA;&lt;p&gt;Methods like &lt;code&gt;paint::paint()&lt;/code&gt;, &lt;code&gt;pillar::glimpse()&lt;/code&gt;, and &lt;code&gt;str()&lt;/code&gt; are pitched at the developer. They aim to succinctly display types, and convey a feel for the data with examples.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;code&gt;print.data.frame()&lt;/code&gt; aims to give the analyst all the numbers, and even does an okay job of it, provided you have a ultra-wide screen monitor, and less than a couple of hundred rows.&lt;/p&gt; &#xA;&lt;p&gt;Others try to compromise between the two modalities, and they are generally the worst to use. They’ll consider the volume of data and space available, and concoct methods of truncation. Not rows, nor columns, nor column names, nor decimal places are held sacred. Using these involves a lot of retracing your steps fiddling with print arguments or setting options. It’s enough to make you want to flip tables.&lt;/p&gt; &#xA;&lt;p&gt;You need multiple ways of printing data to suit whatever kind of user you happen to be today, and you need them arrayed easily at your fingertips to keep you in the zone. This package places the way you view your data in your session fully within your control.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;MilesMcBain/flippingtables&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to flip() tables&lt;/h2&gt; &#xA;&lt;p&gt;The setup is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a configuration (probably in .Rprofile) with &lt;code&gt;register_flips()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable the config with &lt;code&gt;flip_on()&lt;/code&gt; (possibly in .Rprofile)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;may seem redundant but thank me when you need to &lt;code&gt;flip_off()&lt;/code&gt; custom print methods because they balk at exotic text encodings or some such.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Use &lt;code&gt;flip()&lt;/code&gt; to cycle between configured print methods for configured classes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Probably via a keyboard shortcut&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here’s an example config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(flippingtables)&#xA;register_flips(&#xA;  printer_fns = list(&#xA;    paint::paint, # a pretty good option if I do say so myself.&#xA;    function(x) default_print(x, .args = list(print_arg(c(&#34;n&#34;, &#34;max&#34;), 100))), # a long format, uses .args see help(default_print)&#xA;    function(x) withr::with_options(list(width = 300), default_print(x)) # a wide format&#xA;  ),&#xA;  printed_classes = list(&#xA;    print_override(class = &#34;tbl&#34;, pkg_namespace = &#34;pillar&#34;),&#xA;    print_override(class = &#34;data.frame&#34;, pkg_namespace = &#34;base&#34;),&#xA;    print_override(class = &#34;data.table&#34;, pkg_namespace = &#34;data.table&#34;)&#xA;  )&#xA;)&#xA;#&amp;gt; [1] TRUE&#xA;flip_on() # now it&#39;s live!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First in &lt;code&gt;printer_fns&lt;/code&gt; we declare the print methods we want be able to toggle between for use as the automatic &lt;code&gt;print()&lt;/code&gt; in our R consolse sessions. Using anonymous functions is a great way to prototype custom print methods. The special function &lt;code&gt;print_default()&lt;/code&gt; stands in for whatever the default print for the class being printed would normally be.&lt;/p&gt; &#xA;&lt;p&gt;Then we nominate &lt;code&gt;tbl&lt;/code&gt;, &lt;code&gt;data.frame&lt;/code&gt;, and &lt;code&gt;data.table&lt;/code&gt; as ‘flippable’ classes. We have to nominate the ‘top-level’ class that has the print method we want to override. I.e. even though &lt;code&gt;tbl&lt;/code&gt; (a generic &lt;code&gt;tibble&lt;/code&gt; used by &lt;code&gt;{pillar}&lt;/code&gt;) and &lt;code&gt;data.table&lt;/code&gt; are also &lt;code&gt;data.frame&lt;/code&gt; we can’t just configure &lt;code&gt;data.frame&lt;/code&gt; because objects of those classes have the &lt;code&gt;&#34;tbl&#34;&lt;/code&gt; or &lt;code&gt;&#34;data.table&#34;&lt;/code&gt; appear earlier in their vector of classes. This means their corresponding &lt;code&gt;print()&lt;/code&gt; methods dispatched instead of &lt;code&gt;print.data.frame&lt;/code&gt; (or the custom print method we routed that too).&lt;/p&gt; &#xA;&lt;h3&gt;Flipping&lt;/h3&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;flippingtables::flip()&lt;/code&gt; will advance the binding for the current print method to be used for all configured classes to the next one in the list. Print methods are cycled through in the order they are configured, and of course the cycle wraps around so cycling can happen endlessly.&lt;/p&gt; &#xA;&lt;p&gt;If the last result (&lt;code&gt;.Last.value&lt;/code&gt;) has a class that is configured for flipping, then the object is automatically re-printed with the new print method selected by &lt;code&gt;flip()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here’s how it might look:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# assuming config above&#xA;library(palmerpenguins)&#xA;penguins&#xA;&#xA;# tibble [344, 8]&#xA;# species           fct Adelie Adelie Adelie Adelie Adelie Ad~&#xA;# island            fct Torgersen Torgersen Torgersen Torgers~&#xA;# bill_length_mm    dbl 39.1 39.5 40.3 NA 36.7 39.3&#xA;# bill_depth_mm     dbl 18.7 17.4 18 NA 19.3 20.6&#xA;# flipper_length_mm int 181 186 195 NA 193 190&#xA;# body_mass_g       int 3750 3800 3250 NA 3450 3650&#xA;# sex               fct male female female NA female male&#xA;# year              int 2007 2007 2007 2007 2007 2007&#xA;&#xA;flip()&#xA;&#xA;#  A tibble: 344 × 8&#xA;#     species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g&#xA;#     &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;              &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;&#xA;#   1 Adelie  Torgersen           39.1          18.7               181        3750&#xA;#   2 Adelie  Torgersen           39.5          17.4               186        3800&#xA;#   3 Adelie  Torgersen           40.3          18                 195        3250&#xA;#   4 Adelie  Torgersen           NA            NA                  NA          NA&#xA;#   5 Adelie  Torgersen           36.7          19.3               193        3450&#xA;&#xA;#   .. Output continues ..&#xA;&#xA;#  95 Adelie  Dream               36.2          17.3               187        3300&#xA;#  96 Adelie  Dream               40.8          18.9               208        4300&#xA;#  97 Adelie  Dream               38.1          18.6               190        3700&#xA;#  98 Adelie  Dream               40.3          18.5               196        4350&#xA;#  99 Adelie  Dream               33.1          16.1               178        2900&#xA;# 100 Adelie  Dream               43.2          18.5               192        4100&#xA;# # ℹ 244 more rows&#xA;# # ℹ 2 more variables: sex &amp;lt;fct&amp;gt;, year &amp;lt;int&amp;gt;&#xA;# # ℹ Use `print(n = ...)` to see more rows&#xA;&#xA;# it&#39;s sticky!&#xA;penguins&#xA;&#xA;#  A tibble: 344 × 8&#xA;#     species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g&#xA;#     &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;              &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt;&#xA;#   1 Adelie  Torgersen           39.1          18.7               181        3750&#xA;#   2 Adelie  Torgersen           39.5          17.4               186        3800&#xA;#   3 Adelie  Torgersen           40.3          18                 195        3250&#xA;#   4 Adelie  Torgersen           NA            NA                  NA          NA&#xA;#   5 Adelie  Torgersen           36.7          19.3               193        3450&#xA;&#xA;#   .. Output continues ..&#xA;&#xA;#  95 Adelie  Dream               36.2          17.3               187        3300&#xA;#  96 Adelie  Dream               40.8          18.9               208        4300&#xA;#  97 Adelie  Dream               38.1          18.6               190        3700&#xA;#  98 Adelie  Dream               40.3          18.5               196        4350&#xA;#  99 Adelie  Dream               33.1          16.1               178        2900&#xA;# 100 Adelie  Dream               43.2          18.5               192        4100&#xA;# # ℹ 244 more rows&#xA;# # ℹ 2 more variables: sex &amp;lt;fct&amp;gt;, year &amp;lt;int&amp;gt;&#xA;# # ℹ Use `print(n = ...)` to see more rows&#xA;&#xA;flip()&#xA;&#xA;# # A tibble: 344 × 8&#xA;#    species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex     year&#xA;#    &amp;lt;fct&amp;gt;   &amp;lt;fct&amp;gt;              &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;             &amp;lt;int&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;fct&amp;gt;  &amp;lt;int&amp;gt;&#xA;#  1 Adelie  Torgersen           39.1          18.7               181        3750 male    2007&#xA;#  2 Adelie  Torgersen           39.5          17.4               186        3800 female  2007&#xA;#  3 Adelie  Torgersen           40.3          18                 195        3250 female  2007&#xA;#  4 Adelie  Torgersen           NA            NA                  NA          NA NA      2007&#xA;#  5 Adelie  Torgersen           36.7          19.3               193        3450 female  2007&#xA;#  6 Adelie  Torgersen           39.3          20.6               190        3650 male    2007&#xA;#  7 Adelie  Torgersen           38.9          17.8               181        3625 female  2007&#xA;#  8 Adelie  Torgersen           39.2          19.6               195        4675 male    2007&#xA;#  9 Adelie  Torgersen           34.1          18.1               193        3475 NA      2007&#xA;# 10 Adelie  Torgersen           42            20.2               190        4250 NA      2007&#xA;# # ℹ 334 more rows&#xA;# # ℹ Use `print(n = ...)` to see more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keyboard shortcut&lt;/h3&gt; &#xA;&lt;p&gt;In VSCode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;      &#34;description&#34;: &#34;flip() between print methods&#34;,&#xA;      &#34;key&#34;: &#34;&amp;lt;CHOOSE A KEYBINDING&amp;gt;&#34;,&#xA;      &#34;command&#34;: &#34;r.runCommand&#34;,&#xA;      &#34;when&#34;: &#34;editorTextFocus&#34;,&#xA;      &#34;args&#34;: &#34;flippingtables::flip()&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In RStudio:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;flip()&lt;/code&gt; is exposed as an RStudio addin, which can be bound to a keyboard shortcut. See &lt;a href=&#34;https://docs.posit.co/ide/user/ide/guide/productivity/custom-shortcuts.html&#34;&gt;instructions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In other editor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I think you should mostly be fine since it doesn’t depend on any editor state, but let me know if I can expose anything that makes it easier.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cookbook&lt;/h3&gt; &#xA;&lt;p&gt;On of my personal favourites for looking at sumarised data analytically (provided it is sorted sensibly) is &lt;code&gt;knitr::kable()&lt;/code&gt;. It has the added benefit that you can easily copy-paste the output to make nice tables in applications that speak markdown. It presents two problems for use directly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;it doesn’t return the data it printed invisibly, unlike most methods intended to be used for this purpose. This will cause printing the &lt;code&gt;.Last.value&lt;/code&gt; with flip() to stop as soon as this method is hit.&lt;/li&gt; &#xA; &lt;li&gt;it returns an object of a different class which has its own print method. R console seems not to like the idea of running through the print dispatch again, so we get nothing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We work around this like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(flippingtables)&#xA;register_flips(&#xA;  printer_fns = list(&#xA;    paint::paint, # a pretty good option if I do say so myself.&#xA;    function(x) {&#xA;      print(knitr::kable(x))&#xA;      invisible(x)&#xA;    }&#xA;  ),&#xA;  printed_classes = list(&#xA;    print_override(class = &#34;tbl&#34;, pkg_namespace = &#34;pillar&#34;),&#xA;    print_override(class = &#34;data.frame&#34;, pkg_namespace = &#34;base&#34;),&#xA;    print_override(class = &#34;data.table&#34;, pkg_namespace = &#34;data.table&#34;)&#xA;  )&#xA;)&#xA;flip_on() # now it&#39;s live!&#xA;flip()&#xA;penguins&#xA;&#xA;# |species   |island    | bill_length_mm| bill_depth_mm| flipper_length_mm| body_mass_g|sex    | year|&#xA;# |:---------|:---------|--------------:|-------------:|-----------------:|-----------:|:------|----:|&#xA;# |Adelie    |Torgersen |           39.1|          18.7|               181|        3750|male   | 2007|&#xA;# |Adelie    |Torgersen |           39.5|          17.4|               186|        3800|female | 2007|&#xA;# |Adelie    |Torgersen |           40.3|          18.0|               195|        3250|female | 2007|&#xA;# .. Output continues ..&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>