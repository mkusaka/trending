<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-21T01:41:24Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>r-spatial/rgee</title>
    <updated>2022-09-21T01:41:24Z</updated>
    <id>tag:github.com,2022-09-21:/r-spatial/rgee</id>
    <link href="https://github.com/r-spatial/rgee" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Earth Engine for R&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/r-spatial/rgee/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/118376965-5f7dca80-b5cb-11eb-9a82-47876680a3e6.png&#34; alt=&#34;Markdownify&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/r-earthengine/rgeeExtra/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/118376968-63a9e800-b5cb-11eb-83e7-3f36299e17cb.png&#34; alt=&#34;Markdownify&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/r-earthengine/rgeebook/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/118376966-60aef780-b5cb-11eb-8df2-ca70dcfe04c5.png&#34; alt=&#34;Markdownify&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;br&gt; rgee: Google Earth Engine for R &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;rgee is an R binding package for calling &lt;a href=&#34;https://developers.google.com/earth-engine/&#34; target=&#34;_blank&#34;&gt;Google Earth Engine API&lt;/a&gt; from within R. &lt;a href=&#34;https://r-spatial.github.io/rgee/reference/index.html&#34; target=&#34;_blank&#34;&gt;Various functions&lt;/a&gt; are implemented to simplify the connection with the R spatial ecosystem.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://colab.research.google.com/github/r-spatial/rgee/blob/examples/rgee_colab.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34; title=&#34;Open and Execute in Google Colaboratory&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/r-spatial/rgee/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-spatial/rgee/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;Project Status: Active – The project has reached a stable, usable&#xA;state and is being actively&#xA;developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/r-spatial/rgee&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-spatial/rgee/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tidyverse.org/lifecycle/#maturing&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-maturing-blue.svg?sanitize=true&#34; alt=&#34;lifecycle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://joss.theoj.org/papers/aea42ddddd79df480a858bc1e51857fc&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/aea42ddddd79df480a858bc1e51857fc/status.svg?sanitize=true&#34; alt=&#34;status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=rgee&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/rgee&#34; alt=&#34;CRAN&#xA;status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.5281/zenodo.3945409&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.3945409.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/web/packages/rgee/index.html&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/rgee&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.buymeacoffee.com/csay&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/#installation&#34;&gt;Installation&lt;/a&gt; &amp;nbsp;• &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/#hello-world&#34;&gt;Hello World&lt;/a&gt; &amp;nbsp;• &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/#how-does-rgee-work&#34;&gt;How does rgee work?&lt;/a&gt; &amp;nbsp;• &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/#quick-start-users-guide-for-rgee&#34;&gt;Guides&lt;/a&gt; &amp;nbsp;• &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/#contributing-guide&#34;&gt;Contributing&lt;/a&gt; &amp;nbsp;• &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/#share-the-love&#34;&gt;Citation&lt;/a&gt; &amp;nbsp;• &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/#credits&#34;&gt;Credits&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is Google Earth Engine?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://earthengine.google.com/&#34;&gt;Google Earth Engine&lt;/a&gt; is a cloud-based platform that lets users access a petabyte-scale archive of remote sensing data and run geospatial analysis on Google&#39;s infrastructure. Currently, Google offers support only for Python and JavaScript. &lt;code&gt;rgee&lt;/code&gt; fills the gap &lt;strong&gt;by providing support for R!&lt;/strong&gt;. Below you will find the comparison between the syntax of &lt;code&gt;rgee&lt;/code&gt; and the two other Google-supported client libraries.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; JS (Code Editor) &lt;/th&gt; &#xA;   &lt;th&gt; Python &lt;/th&gt; &#xA;   &lt;th&gt; R &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var db = &#39;CGIAR/SRTM90_V4&#39;&#xA;var image = ee.Image(db)&#xA;print(image.bandNames())&#xA;#&amp;gt; &#39;elevation&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import ee&#xA;ee.Initialize()&#xA;db = &#39;CGIAR/SRTM90_V4&#39;&#xA;image = ee.Image(db)&#xA;image.bandNames().getInfo()&#xA;#&amp;gt; [u&#39;elevation&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgee)&#xA;ee_Initialize()&#xA;db &amp;lt;- &#39;CGIAR/SRTM90_V4&#39;&#xA;image &amp;lt;- ee$Image(db)&#xA;image$bandNames()$getInfo()&#xA;#&amp;gt; [1] &#34;elevation&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Quite similar, isn&#39;t it?&lt;/strong&gt;. However, additional more minor changes should be considered when using Google Earth Engine with R. Please check the &lt;a href=&#34;https://r-spatial.github.io/rgee/articles/rgee02.html&#34;&gt;consideration section&lt;/a&gt; before you start coding!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING: The Authentication of new users now required &lt;a href=&#34;https://cloud.google.com/sdk/docs/install#deb&#34;&gt;gcloud CLI&lt;/a&gt;. Please set it up before logging in.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;rgee&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the development versions from github with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(remotes)&#xA;install_github(&#34;r-spatial/rgee&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;rgee&lt;/code&gt; depends on the &lt;a href=&#34;https://rstudio.github.io/reticulate/articles/package.html&#34;&gt;Python packages&lt;/a&gt;: &lt;a href=&#34;https://pypi.org/project/numpy/&#34;&gt;numpy&lt;/a&gt; and &lt;a href=&#34;https://pypi.org/project/earthengine-api/&#34;&gt;ee&lt;/a&gt;. To install them, users can follow any of these three methods:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://r-spatial.github.io/rgee/reference/ee_install.html&#34;&gt;&lt;strong&gt;ee_install&lt;/strong&gt;&lt;/a&gt; (Highly recommended for users with no experience with Python environments)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rgee::ee_install()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://r-spatial.github.io/rgee/reference/ee_install_set_pyenv.html&#34;&gt;&lt;strong&gt;ee_install_set_pyenv&lt;/strong&gt;&lt;/a&gt; (Recommended for users with experience with Python environments)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rgee::ee_install_set_pyenv(&#xA;  py_path = &#34;/home/csaybar/.virtualenvs/rgee/bin/python&#34;, # Change it for your own Python PATH&#xA;  py_env = &#34;rgee&#34; # Change it for your own Python ENV&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take into account that the Python PATH you set must have installations of the Earth Engine Python API and numpy. The use of &lt;strong&gt;miniconda/anaconda is mandatory for Windows users,&lt;/strong&gt; Linux and MacOS users could also use virtualenv. See &lt;a href=&#34;https://rstudio.github.io/reticulate/articles/python_packages.html&#34;&gt;reticulate&lt;/a&gt; documentation for more details.&lt;/p&gt; &#xA;&lt;p&gt;Another option, only possible for MacOS and Linux, is just set the Python PATH:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rgee::ee_install_set_pyenv(&#xA;  py_path = &#34;/usr/bin/python3&#34;,&#xA;  py_env = NULL&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, &lt;a href=&#34;https://r-spatial.github.io/rgee/reference/ee_install_upgrade.html&#34;&gt;&lt;strong&gt;rgee::ee_install_upgrade&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://rstudio.github.io/reticulate/reference/py_install.html&#34;&gt;&lt;strong&gt;reticulate::py_install&lt;/strong&gt;&lt;/a&gt; will not work until you set a Python ENV.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Use the Python PATH setting support that offer &lt;a href=&#34;https://blog.rstudio.com/2020/10/07/rstudio-v1-4-preview-python-support/&#34;&gt;Rstudio v.1.4 &amp;gt;&lt;/a&gt;. See this &lt;a href=&#34;https://github.com/r-spatial/rgee/tree/help/rstudio/&#34;&gt;tutorial&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After install &lt;code&gt;Python dependencies&lt;/code&gt; (and Restart R!!), you might use the function below for checking the status of rgee.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ee_check() # Check non-R dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sync rgee with other Python packages&lt;/h2&gt; &#xA;&lt;p&gt;Integrate &lt;a href=&#34;https://r-spatial.github.io/rgee/&#34;&gt;rgee&lt;/a&gt; with &lt;a href=&#34;https://geemap.org/&#34;&gt;geemap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(reticulate)&#xA;library(rgee)&#xA;&#xA;# 1. Initialize the Python Environment&#xA;ee_Initialize()&#xA;&#xA;# 2. Install geemap in the same Python ENV that use rgee&#xA;py_install(&#34;geemap&#34;)&#xA;gm &amp;lt;- import(&#34;geemap&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upgrade the &lt;a href=&#34;https://pypi.org/project/earthengine-api/&#34;&gt;earthengine-api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgee)&#xA;ee_Initialize()&#xA;ee_install_upgrade()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Package Conventions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All &lt;code&gt;rgee&lt;/code&gt; functions have the prefix ee_. Auto-completion is your friend :).&lt;/li&gt; &#xA; &lt;li&gt;Full access to the Earth Engine API with the prefix &lt;a href=&#34;https://developers.google.com/earth-engine/&#34;&gt;&lt;strong&gt;ee$...&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Authenticate and Initialize the Earth Engine R API with &lt;a href=&#34;https://r-spatial.github.io/rgee/reference/ee_Initialize.html&#34;&gt;&lt;strong&gt;ee_Initialize&lt;/strong&gt;&lt;/a&gt;. It is necessary once per session!.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rgee&lt;/code&gt; is &#34;pipe-friendly&#34;; we re-export %&amp;gt;% but do not require its use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hello World&lt;/h2&gt; &#xA;&lt;h3&gt;1. Compute the trend of night-time lights (&lt;a href=&#34;https://github.com/google/earthengine-api/&#34;&gt;JS version&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Authenticate and Initialize the Earth Engine R API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgee)&#xA;ee_Initialize()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adds a band containing image date as years since 1991.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;createTimeBand &amp;lt;-function(img) {&#xA;  year &amp;lt;- ee$Date(img$get(&#39;system:time_start&#39;))$get(&#39;year&#39;)$subtract(1991L)&#xA;  ee$Image(year)$byte()$addBands(img)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Map the time band creation helper over the &lt;a href=&#34;https://developers.google.com/earth-engine/datasets/catalog/NOAA_DMSP-OLS_NIGHTTIME_LIGHTS/&#34;&gt;night-time lights collection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;collection &amp;lt;- ee$&#xA;  ImageCollection(&#39;NOAA/DMSP-OLS/NIGHTTIME_LIGHTS&#39;)$&#xA;  select(&#39;stable_lights&#39;)$&#xA;  map(createTimeBand)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compute a linear fit over the series of values at each pixel, visualizing the y-intercept in green, and positive/negative slopes as red/blue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;col_reduce &amp;lt;- collection$reduce(ee$Reducer$linearFit())&#xA;col_reduce &amp;lt;- col_reduce$addBands(&#xA;  col_reduce$select(&#39;scale&#39;))&#xA;ee_print(col_reduce)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an interactive visualization!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Map$setCenter(9.08203, 47.39835, 3)&#xA;Map$addLayer(&#xA;  eeObject = col_reduce,&#xA;  visParams = list(&#xA;    bands = c(&#34;scale&#34;, &#34;offset&#34;, &#34;scale&#34;),&#xA;    min = 0,&#xA;    max = c(0.18, 20, -0.18)&#xA;  ),&#xA;  name = &#34;stable lights trend&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/71565699-51e4a500-2aa9-11ea-83c3-9e1d32c82ba6.png&#34; alt=&#34;rgee_01&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Extract precipitation values&lt;/h3&gt; &#xA;&lt;p&gt;Install and load &lt;code&gt;tidyverse&lt;/code&gt; and &lt;code&gt;sf&lt;/code&gt; R packages, and initialize the Earth Engine R API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;library(rgee)&#xA;library(sf)&#xA;&#xA;ee_Initialize()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read the &lt;code&gt;nc&lt;/code&gt; shapefile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nc &amp;lt;- st_read(system.file(&#34;shape/nc.shp&#34;, package = &#34;sf&#34;), quiet = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Map each image from 2001 to extract the monthly precipitation (Pr) from the &lt;a href=&#34;https://developers.google.com/earth-engine/datasets/catalog/IDAHO_EPSCOR_TERRACLIMATE/&#34;&gt;Terraclimate dataset&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;terraclimate &amp;lt;- ee$ImageCollection(&#34;IDAHO_EPSCOR/TERRACLIMATE&#34;) %&amp;gt;%&#xA;  ee$ImageCollection$filterDate(&#34;2001-01-01&#34;, &#34;2002-01-01&#34;) %&amp;gt;%&#xA;  ee$ImageCollection$map(function(x) x$select(&#34;pr&#34;)) %&amp;gt;% # Select only precipitation bands&#xA;  ee$ImageCollection$toBands() %&amp;gt;% # from imagecollection to image&#xA;  ee$Image$rename(sprintf(&#34;PP_%02d&#34;,1:12)) # rename the bands of an image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract monthly precipitation values from the Terraclimate ImageCollection through &lt;code&gt;ee_extract&lt;/code&gt;. &lt;code&gt;ee_extract&lt;/code&gt; works similar to &lt;code&gt;raster::extract&lt;/code&gt;, you just need to define: the ImageCollection object (x), the geometry (y), and a function to summarize the values (fun).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ee_nc_rain &amp;lt;- ee_extract(x = terraclimate, y = nc[&#34;NAME&#34;], sf = FALSE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use ggplot2 to generate a beautiful static plot!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ee_nc_rain %&amp;gt;%&#xA;  pivot_longer(-NAME, names_to = &#34;month&#34;, values_to = &#34;pr&#34;) %&amp;gt;%&#xA;  mutate(month, month=gsub(&#34;PP_&#34;, &#34;&#34;, month)) %&amp;gt;%&#xA;  ggplot(aes(x = month, y = pr, group = NAME, color = pr)) +&#xA;  geom_line(alpha = 0.4) +&#xA;  xlab(&#34;Month&#34;) +&#xA;  ylab(&#34;Precipitation (mm)&#34;) +&#xA;  theme_minimal()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/16768318/81945044-2cbd8280-95c3-11ea-9ef5-fd9f6fd5fe89.png&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;3. Create an NDVI-animation (&lt;a href=&#34;https://developers.google.com/earth-engine/tutorials/community/modis-ndvi-time-series-animation/&#34;&gt;JS version&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Install and load &lt;code&gt;sf&lt;/code&gt;, after that, initialize the Earth Engine R API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(magick)&#xA;library(rgee)&#xA;library(sf)&#xA;&#xA;ee_Initialize()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define the regional bounds of animation frames and a mask to clip the NDVI data by.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mask &amp;lt;- system.file(&#34;shp/arequipa.shp&#34;, package = &#34;rgee&#34;) %&amp;gt;%&#xA;  st_read(quiet = TRUE) %&amp;gt;%&#xA;  sf_as_ee()&#xA;region &amp;lt;- mask$geometry()$bounds()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Retrieve the MODIS Terra Vegetation Indices 16-Day Global 1km dataset as an &lt;code&gt;ee.ImageCollection&lt;/code&gt; and select the NDVI band.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;col &amp;lt;- ee$ImageCollection(&#39;MODIS/006/MOD13A2&#39;)$select(&#39;NDVI&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Group images by composite date&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;col &amp;lt;- col$map(function(img) {&#xA;  doy &amp;lt;- ee$Date(img$get(&#39;system:time_start&#39;))$getRelative(&#39;day&#39;, &#39;year&#39;)&#xA;  img$set(&#39;doy&#39;, doy)&#xA;})&#xA;distinctDOY &amp;lt;- col$filterDate(&#39;2013-01-01&#39;, &#39;2014-01-01&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define a filter that identifies which images from the complete collection match the DOY from the distinct DOY collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filter &amp;lt;- ee$Filter$equals(leftField = &#39;doy&#39;, rightField = &#39;doy&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define a join; convert the resulting FeatureCollection to an ImageCollection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;join &amp;lt;- ee$Join$saveAll(&#39;doy_matches&#39;)&#xA;joinCol &amp;lt;- ee$ImageCollection(join$apply(distinctDOY, col, filter))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apply median reduction among matching DOY collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;comp &amp;lt;- joinCol$map(function(img) {&#xA;  doyCol = ee$ImageCollection$fromImages(&#xA;    img$get(&#39;doy_matches&#39;)&#xA;  )&#xA;  doyCol$reduce(ee$Reducer$median())&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define RGB visualization parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;visParams = list(&#xA;  min = 0.0,&#xA;  max = 9000.0,&#xA;  bands = &#34;NDVI_median&#34;,&#xA;  palette = c(&#xA;    &#39;FFFFFF&#39;, &#39;CE7E45&#39;, &#39;DF923D&#39;, &#39;F1B555&#39;, &#39;FCD163&#39;, &#39;99B718&#39;, &#39;74A901&#39;,&#xA;    &#39;66A000&#39;, &#39;529400&#39;, &#39;3E8601&#39;, &#39;207401&#39;, &#39;056201&#39;, &#39;004C00&#39;, &#39;023B01&#39;,&#xA;    &#39;012E01&#39;, &#39;011D01&#39;, &#39;011301&#39;&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create RGB visualization images for use as animation frames.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rgbVis &amp;lt;- comp$map(function(img) {&#xA;  do.call(img$visualize, visParams) %&amp;gt;%&#xA;    ee$Image$clip(mask)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define GIF visualization parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gifParams &amp;lt;- list(&#xA;  region = region,&#xA;  dimensions = 600,&#xA;  crs = &#39;EPSG:3857&#39;,&#xA;  framesPerSecond = 10&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get month names&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dates_modis_mabbr &amp;lt;- distinctDOY %&amp;gt;%&#xA;  ee_get_date_ic %&amp;gt;% # Get Image Collection dates&#xA;  &#39;[[&#39;(&#34;time_start&#34;) %&amp;gt;% # Select time_start column&#xA;  lubridate::month() %&amp;gt;% # Get the month component of the datetime&#xA;  &#39;[&#39;(month.abb, .) # subset around month abbreviations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use ee_utils_gif_* functions to render the GIF animation and add some texts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;animation &amp;lt;- ee_utils_gif_creator(rgbVis, gifParams, mode = &#34;wb&#34;)&#xA;animation %&amp;gt;%&#xA;  ee_utils_gif_annotate(&#xA;    text = &#34;NDVI: MODIS/006/MOD13A2&#34;,&#xA;    size = 15, color = &#34;white&#34;,&#xA;    location = &#34;+10+10&#34;&#xA;  ) %&amp;gt;%&#xA;  ee_utils_gif_annotate(&#xA;    text = dates_modis_mabbr,&#xA;    size = 30,&#xA;    location = &#34;+290+350&#34;,&#xA;    color = &#34;white&#34;,&#xA;    font = &#34;arial&#34;,&#xA;    boxcolor = &#34;#000000&#34;&#xA;  ) # -&amp;gt; animation_wtxt&#xA;&#xA;# ee_utils_gif_save(animation_wtxt, path = &#34;raster_as_ee.gif&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/16768318/77121867-203e0300-6a34-11ea-97ba-6bed74ef4300.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;How does rgee work?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rgee&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; a native Earth Engine API like the Javascript or Python client. Developing an Earth Engine API from scratch would create too much maintenance burden, especially considering that the API is in &lt;a href=&#34;https://github.com/google/earthengine-api&#34;&gt;active development&lt;/a&gt;. So, how is it possible to run Earth Engine using R? the answer is &lt;a href=&#34;https://rstudio.github.io/reticulate/&#34;&gt;reticulate&lt;/a&gt;. &lt;code&gt;reticulate&lt;/code&gt; is an R package designed to allow seamless interoperability between R and Python. When an Earth Engine &lt;strong&gt;request&lt;/strong&gt; is created in R, &lt;code&gt;reticulate&lt;/code&gt; will translate this request into Python and pass it to the &lt;code&gt;Earth Engine Python API&lt;/code&gt;, which converts the request to a &lt;code&gt;JSON&lt;/code&gt; format. Finally, the request is received by the GEE Platform through a Web REST API. The &lt;strong&gt;response&lt;/strong&gt; will follow the same path in reverse.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/71569603-3341d680-2ac8-11ea-8787-4dd1fbba326f.png&#34; alt=&#34;workflow&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start User&#39;s Guide for rgee&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bit.ly/35W0pwa&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/88080933-5b1c8880-cb45-11ea-9546-f0640da13997.png&#34; height=&#34;99&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bit.ly/3iyxvYi&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/86457619-8ef45300-bce9-11ea-9f08-7c1ee14071fb.png&#34; height=&#34;100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ambarja.github.io/Handbook_rgee/pdf/vol01.pdf&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16768318/86457622-90be1680-bce9-11ea-92f0-78cfb915c4bc.png&#34; height=&#34;101&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Created by:&lt;/strong&gt; - EN and POR: Andres Luiz Lima Costa &lt;a href=&#34;https://bit.ly/3p1DFm9&#34;&gt;https://bit.ly/3p1DFm9&lt;/a&gt; - SPA: Antony Barja Ingaruca &lt;a href=&#34;https://ambarja.github.io/&#34;&gt;https://ambarja.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the &lt;code&gt;rgee&lt;/code&gt; project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing Guide&lt;/h2&gt; &#xA;&lt;p&gt;👍 Thanks for taking the time to contribute! 🎉👍 Please review our &lt;a href=&#34;https://raw.githubusercontent.com/r-spatial/rgee/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Share the love&lt;/h2&gt; &#xA;&lt;p&gt;Think &lt;strong&gt;rgee&lt;/strong&gt; is useful? Let others discover it, by telling them in person via Twitter or a blog post.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;strong&gt;rgee&lt;/strong&gt; for a paper you are writing? Consider citing it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;citation(&#34;rgee&#34;)&#xA;To cite rgee in publications use:&#xA;&#xA;  C Aybar, Q Wu, L Bautista, R Yali and A Barja (2020) rgee: An R&#xA;  package for interacting with Google Earth Engine Journal of Open&#xA;  Source Software URL https://github.com/r-spatial/rgee/.&#xA;&#xA;A BibTeX entry for LaTeX users is&#xA;&#xA;@Article{,&#xA;  title = {rgee: An R package for interacting with Google Earth Engine},&#xA;  author = {Cesar Aybar and Quisheng Wu and Lesly Bautista and Roy Yali and Antony Barja},&#xA;  journal = {Journal of Open Source Software},&#xA;  year = {2020},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;We want to offer a &lt;strong&gt;special thanks&lt;/strong&gt; &lt;span&gt;🙌&lt;/span&gt; &lt;span&gt;👏&lt;/span&gt; to &lt;a href=&#34;https://github.com/jdbcode&#34;&gt;&lt;strong&gt;Justin Braaten&lt;/strong&gt;&lt;/a&gt; for his wise and helpful comments in the whole development of &lt;strong&gt;rgee&lt;/strong&gt;. As well, we would like to mention the following third-party R/Python packages for contributing indirectly to the improvement of rgee:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tracek/gee_asset_manager/&#34;&gt;&lt;strong&gt;gee_asset_manager - Lukasz Tracewski&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samapriya/geeup/&#34;&gt;&lt;strong&gt;geeup - Samapriya Roy&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samapriya/gee_asset_manager_addon/&#34;&gt;&lt;strong&gt;geeadd - Samapriya Roy&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KMarkert/cartoee/&#34;&gt;&lt;strong&gt;cartoee - Kel Markert&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gee-community/gee_tools/&#34;&gt;&lt;strong&gt;geetools - Rodrigo E. Principe&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/loicdtx/landsat-extract-gee/&#34;&gt;&lt;strong&gt;landsat-extract-gee - Loïc Dutrieux&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JesJehle/earthEngineGrabR/&#34;&gt;&lt;strong&gt;earthEngineGrabR - JesJehle&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-spatial/sf/&#34;&gt;&lt;strong&gt;sf - Edzer Pebesma&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-spatial/stars/&#34;&gt;&lt;strong&gt;stars - Edzer Pebesma&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appelmar/gdalcubes/&#34;&gt;&lt;strong&gt;gdalcubes - Marius Appel&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wch/r-source</title>
    <updated>2022-09-21T01:41:24Z</updated>
    <id>tag:github.com,2022-09-21:/wch/r-source</id>
    <link href="https://github.com/wch/r-source" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Read-only mirror of R source code from https://svn.r-project.org/R/, updated hourly. See the build instructions on the wiki page.&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;THE BASIC R README&#xA;&#xA;&#xA;   (See &#34;doc/FAQ&#34; and &#34;doc/RESOURCES&#34; for more detailed information&#xA;&#x9;&#x9;&#x9;      - these files are only in the tarballs)&#xA;   (See &#34;INSTALL&#34;             for help on installation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;INTRODUCTION&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This directory contains the source code tree for R, which is a language which is not entirely unlike (versions 3 and 4 of) the S language developed at AT&amp;amp;T Bell Laboratories by Rick Becker, John Chambers and Allan Wilks.&lt;/p&gt; &#xA;&lt;p&gt;R is free software distributed under a GNU-style copyleft.&lt;/p&gt; &#xA;&lt;p&gt;The core of R is an interpreted computer language with a syntax superficially similar to C, but which is actually a &#34;functional programming language&#34; with capabilities similar to Scheme. The language allows branching and looping as well as modular programming using functions. Most of the user-visible functions in R are written in R, calling upon a smaller set of internal primitives. It is possible for the user to interface to procedures written in C or Fortran languages for efficiency, and also to write additional primitives.&lt;/p&gt; &#xA;&lt;p&gt;The R distribution contains functionality for a large number of statistical procedures. Among these are: linear and generalized linear models, nonlinear regression models, time series analysis, classical parametric and nonparametric tests, clustering and smoothing. There is also a large set of functions which provide a flexible graphical environment for creating various kinds of data presentations.&lt;/p&gt; &#xA;&lt;p&gt;A package specification allows the production of loadable modules for specific purposes, and several thousand contributed packages are made available through the CRAN sites (see &lt;a href=&#34;https://CRAN.R-project.org/mirrors.html&#34;&gt;https://CRAN.R-project.org/mirrors.html&lt;/a&gt; for the current members).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;HISTORY&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;R was initially written by Robert Gentleman and Ross Ihaka of the Statistics Department of the University of Auckland. In addition, a large group of individuals has contributed to R by sending code and bug reports.&lt;/p&gt; &#xA;&lt;p&gt;Since mid-1997 there has been a core group who can modify the R source code archive, listed in file doc/AUTHORS.&lt;/p&gt; &#xA;&lt;p&gt;R 1.0.0 was released on 29 February 2000 and 2.0.0 on 4 October 2004. R 3.0.0 came out on 3 April 2013.&lt;/p&gt; &#xA;&lt;p&gt;This file has been minimally revised since the release of R 1.0.0.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;PRESENT STATUS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The present version implements most of the functionality in the 1988 book &#34;The New S Language&#34; (the &#34;Blue Book&#34;) and many of the applications. In addition, we have implemented a large part of the functionality from the 1992 book &#34;Statistical Models in S&#34; (the &#34;White Book&#34;) and the 1998 book &#34;Programming with Data&#34; (the &#34;Green Book&#34;).&lt;/p&gt; &#xA;&lt;p&gt;All the R functions have been documented in the form of help pages in an &#34;output independent&#34; form which can be used to create versions for HTML, PDF, text etc. A 1900+ page Reference Index (a collection of most of the help pages: there is also a 3300+ page version with all the help pages, including recommended packages) can be obtained in PDF. The manual &lt;code&gt;An Introduction to R&#39; provides a more user-friendly starting point, and there is an FAQ, a draft &lt;/code&gt;R Language Definition&#39; manual and more specialized manuals on admininstration, data import/export and extending R. See INSTALL for instructions on how to generate these documents.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;GOALS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Our aim at the start of this project was to demonstrate that it was possible to produce an S-like environment which did not suffer from the memory-demands and performance problems which S has. Somewhat later, we started to turn R into a &#34;real&#34; system, but unfortunately we lost a large part of the efficiency advantage in the process, so have revised the memory management mechanism and implemented delayed loading of R objects. A lot of performance tuning has been done, including the ability to use tuned linear-algebra libraries.&lt;/p&gt; &#xA;&lt;p&gt;Longer-term goals include to explore new ideas: e.g. virtual objects and component-based programming, and expanding the scope of existing ones like formula-based interfaces. Further, we wish to get a handle on a general approach to graphical user interfaces (preferably with cross-platform portability), and to develop better 3-D and dynamic graphics.&lt;/p&gt; &#xA;&lt;p&gt;Sincerely, The R Core Team.&lt;/p&gt;</summary>
  </entry>
</feed>