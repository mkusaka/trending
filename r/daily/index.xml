<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-26T01:35:52Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>data-cleaning/validatedb</title>
    <updated>2022-12-26T01:35:52Z</updated>
    <id>tag:github.com,2022-12-26:/data-cleaning/validatedb</id>
    <link href="https://github.com/data-cleaning/validatedb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Validate on a table in a DB, using dbplyr&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;validatedb&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=validatedb&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/validatedb&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/data-cleaning/validatedb/actions&#34;&gt;&lt;img src=&#34;https://github.com/data-cleaning/validatedb/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/data-cleaning/validatedb?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/data-cleaning/validatedb/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.awesomeofficialstatistics.org&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Official Statistics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;validatedb&lt;/code&gt; executes validation checks written with R package &lt;code&gt;validate&lt;/code&gt; on a database. This allows for checking the validity of records in a database.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install a development version with&lt;/p&gt; &#xA;&lt;!-- You can install the released version of validatedb from [CRAN](https://CRAN.R-project.org) with: --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;data-cleaning/validatedb&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(validatedb)&#xA;#&amp;gt; Loading required package: validate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First we setup a table in a database (for demo purpose)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# create a table in a database&#xA;income &amp;lt;- data.frame(id=1:2, age=c(12,35), salary = c(1000,NA))&#xA;con &amp;lt;- DBI::dbConnect(RSQLite::SQLite())&#xA;DBI::dbWriteTable(con, &#34;income&#34;, income)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We retrieve a reference/handle to the table in the DB with &lt;code&gt;dplyr&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tbl_income &amp;lt;- tbl(con, &#34;income&#34;)&#xA;print(tbl_income)&#xA;#&amp;gt; # Source:   table&amp;lt;income&amp;gt; [?? x 3]&#xA;#&amp;gt; # Database: sqlite 3.37.2 []&#xA;#&amp;gt;      id   age salary&#xA;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1     1    12   1000&#xA;#&amp;gt; 2     2    35     NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Letâ€™s define a rule set and confront the table with it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rules &amp;lt;- validator( is_adult   = age &amp;gt;= 18&#xA;                  , has_income = salary &amp;gt; 0&#xA;                  , mean_age   = mean(age,na.rm=TRUE) &amp;gt; 24&#xA;                  , has_values = is_complete(age, salary)&#xA;                  )&#xA;&#xA;# and confront!&#xA;cf &amp;lt;- confront(tbl_income, rules, key = &#34;id&#34;)&#xA;&#xA;print(cf)&#xA;#&amp;gt; Object of class &#39;tbl_validation&#39;&#xA;#&amp;gt; Call:&#xA;#&amp;gt;     confront.tbl_sql(tbl = dat, x = x, ref = ref, key = key, sparse = sparse)&#xA;#&amp;gt; &#xA;#&amp;gt; Confrontations: 4&#xA;#&amp;gt; Tbl           : income ()&#xA;#&amp;gt; Key column    : id&#xA;#&amp;gt; Sparse        : FALSE&#xA;#&amp;gt; Fails         : [??] (see `values`, `summary`)&#xA;#&amp;gt; Errors        : 0&#xA;&#xA;summary(cf)&#xA;#&amp;gt;                  name items npass nfail nNA warning error&#xA;#&amp;gt; is_adult     is_adult     2     1     1   0   FALSE FALSE&#xA;#&amp;gt; has_income has_income     2     1     0   1   FALSE FALSE&#xA;#&amp;gt; mean_age     mean_age     1     0     1   0   FALSE FALSE&#xA;#&amp;gt; has_values has_values     2     1     1   0   FALSE FALSE&#xA;#&amp;gt;                              expression&#xA;#&amp;gt; is_adult             age - 18 &amp;gt;= -1e-08&#xA;#&amp;gt; has_income                   salary &amp;gt; 0&#xA;#&amp;gt; mean_age   mean(age, na.rm = TRUE) &amp;gt; 24&#xA;#&amp;gt; has_values     is_complete(age, salary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Values (i.e.&amp;nbsp;validations on the table) can be retrieved like in &lt;code&gt;validate&lt;/code&gt; with &lt;code&gt;type=&#34;matrix&#34;&lt;/code&gt; or &lt;code&gt;type=&#34;list&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;values(cf, type = &#34;matrix&#34;)&#xA;#&amp;gt; [[1]]&#xA;#&amp;gt;      is_adult has_income has_values&#xA;#&amp;gt; [1,]    FALSE       TRUE       TRUE&#xA;#&amp;gt; [2,]     TRUE         NA      FALSE&#xA;#&amp;gt; &#xA;#&amp;gt; [[2]]&#xA;#&amp;gt;      mean_age&#xA;#&amp;gt; [1,]    FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But often this seems more handy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;values(cf, type = &#34;tbl&#34;)&#xA;#&amp;gt; # Source:   lazy query [?? x 5]&#xA;#&amp;gt; # Database: sqlite 3.37.2 []&#xA;#&amp;gt;      id is_adult has_income mean_age has_values&#xA;#&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1     1        0          1        0          1&#xA;#&amp;gt; 2     2        1         NA        0          0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;values(cf, type = &#34;tbl&#34;, sparse=TRUE)&#xA;#&amp;gt; # Source:   lazy query [?? x 3]&#xA;#&amp;gt; # Database: sqlite 3.37.2 []&#xA;#&amp;gt;      id rule        fail&#xA;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1     1 is_adult       1&#xA;#&amp;gt; 2     2 has_income    NA&#xA;#&amp;gt; 3     1 mean_age       1&#xA;#&amp;gt; 4     2 mean_age       1&#xA;#&amp;gt; 5     2 has_values     1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can see the sql code by using &lt;code&gt;show_query&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;show_query(cf)&#xA;#&amp;gt; &amp;lt;SQL&amp;gt;&#xA;#&amp;gt; SELECT `id`, CAST(`is_adult` AS BOOLEAN) AS `is_adult`, CAST(`has_income` AS BOOLEAN) AS `has_income`, CAST(`mean_age` AS BOOLEAN) AS `mean_age`, CAST(`has_values` AS BOOLEAN) AS `has_values`&#xA;#&amp;gt; FROM (SELECT `id`, NULLIF(`is_adult`, -1) AS `is_adult`, NULLIF(`has_income`, -1) AS `has_income`, NULLIF(`mean_age`, -1) AS `mean_age`, NULLIF(`has_values`, -1) AS `has_values`&#xA;#&amp;gt; FROM (SELECT `id`, MIN(`is_adult`) AS `is_adult`, MIN(`has_income`) AS `has_income`, MIN(`mean_age`) AS `mean_age`, MIN(`has_values`) AS `has_values`&#xA;#&amp;gt; FROM (SELECT `id`, CASE `rule` WHEN (&#39;is_adult&#39;) THEN (COALESCE(1 - CAST(`fail` AS INTEGER), -1)) ELSE (1) END AS `is_adult`, CASE `rule` WHEN (&#39;has_income&#39;) THEN (COALESCE(1 - CAST(`fail` AS INTEGER), -1)) ELSE (1) END AS `has_income`, CASE `rule` WHEN (&#39;mean_age&#39;) THEN (COALESCE(1 - CAST(`fail` AS INTEGER), -1)) ELSE (1) END AS `mean_age`, CASE `rule` WHEN (&#39;has_values&#39;) THEN (COALESCE(1 - CAST(`fail` AS INTEGER), -1)) ELSE (1) END AS `has_values`&#xA;#&amp;gt; FROM (SELECT `LHS`.`id` AS `id`, `rule`, `fail`&#xA;#&amp;gt; FROM (SELECT `id`&#xA;#&amp;gt; FROM `income`) AS `LHS`&#xA;#&amp;gt; LEFT JOIN (SELECT `id`, &#39;is_adult&#39; AS `rule`, 1 AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `age`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (`age` - 18.0 &amp;lt; -1e-08)&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;is_adult&#39; AS `rule`, NULL AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `age`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (((`age`) IS NULL))&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;has_income&#39; AS `rule`, 1 AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `salary`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (`salary` &amp;lt;= 0.0)&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;has_income&#39; AS `rule`, NULL AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `salary`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (((`salary`) IS NULL))&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;mean_age&#39; AS `rule`, 1 AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `age`&#xA;#&amp;gt; FROM (SELECT `id`, `age`, AVG(`age`) OVER () AS `q01`&#xA;#&amp;gt; FROM (SELECT `id`, `age`&#xA;#&amp;gt; FROM `income`))&#xA;#&amp;gt; WHERE (`q01` &amp;lt;= 24.0))&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;mean_age&#39; AS `rule`, NULL AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `age`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (((`age`) IS NULL))&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;has_values&#39; AS `rule`, 1 AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `age`, `salary`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (((`age`) IS NULL) OR ((`salary`) IS NULL))) AS `RHS`&#xA;#&amp;gt; ON (`LHS`.`id` = `RHS`.`id`)&#xA;#&amp;gt; ))&#xA;#&amp;gt; GROUP BY `id`))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or write the sql to a file for documentation (and inspiration)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dump_sql(cf, &#34;validation.sql&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;------------------------------------------------------------&#xA;-- Do not edit, automatically generated with R package validatedb.&#xA;-- validatedb: 0.3.1.9000&#xA;-- validate: 1.1.0&#xA;-- R version 4.1.2 (2021-11-01)&#xA;-- Database: &#39;&#39;, Table: &#39;income&#39;&#xA;-- Date: 2022-03-14&#xA;------------------------------------------------------------&#xA;&#xA;--------------------------------------&#xA;--  is_adult:  &#xA;--  validation rule:  age &amp;gt;= 18&#xA;&#xA;SELECT `id`, &#39;is_adult&#39; AS `rule`, 1 AS `fail`&#xA;FROM (SELECT `id`, `age`&#xA;FROM `income`)&#xA;WHERE (`age` - 18.0 &amp;lt; -1e-08)&#xA;UNION ALL&#xA;SELECT `id`, &#39;is_adult&#39; AS `rule`, NULL AS `fail`&#xA;FROM (SELECT `id`, `age`&#xA;FROM `income`)&#xA;WHERE (((`age`) IS NULL))&#xA;&#xA;--------------------------------------&#xA;&#xA;UNION ALL&#xA;&#xA;--------------------------------------&#xA;--  has_income:  &#xA;--  validation rule:  salary &amp;gt; 0&#xA;&#xA;SELECT `id`, &#39;has_income&#39; AS `rule`, 1 AS `fail`&#xA;FROM (SELECT `id`, `salary`&#xA;FROM `income`)&#xA;WHERE (`salary` &amp;lt;= 0.0)&#xA;UNION ALL&#xA;SELECT `id`, &#39;has_income&#39; AS `rule`, NULL AS `fail`&#xA;FROM (SELECT `id`, `salary`&#xA;FROM `income`)&#xA;WHERE (((`salary`) IS NULL))&#xA;&#xA;--------------------------------------&#xA;&#xA;UNION ALL&#xA;&#xA;--------------------------------------&#xA;--  mean_age:  &#xA;--  validation rule:  mean(age, na.rm = TRUE) &amp;gt; 24&#xA;&#xA;SELECT `id`, &#39;mean_age&#39; AS `rule`, 1 AS `fail`&#xA;FROM (SELECT `id`, `age`&#xA;FROM (SELECT `id`, `age`, AVG(`age`) OVER () AS `q01`&#xA;FROM (SELECT `id`, `age`&#xA;FROM `income`))&#xA;WHERE (`q01` &amp;lt;= 24.0))&#xA;UNION ALL&#xA;SELECT `id`, &#39;mean_age&#39; AS `rule`, NULL AS `fail`&#xA;FROM (SELECT `id`, `age`&#xA;FROM `income`)&#xA;WHERE (((`age`) IS NULL))&#xA;&#xA;--------------------------------------&#xA;&#xA;UNION ALL&#xA;&#xA;--------------------------------------&#xA;--  has_values:  &#xA;--  validation rule:  is_complete(age, salary)&#xA;&#xA;SELECT `id`, &#39;has_values&#39; AS `rule`, 1 AS `fail`&#xA;FROM (SELECT `id`, `age`, `salary`&#xA;FROM `income`)&#xA;WHERE (((`age`) IS NULL) OR ((`salary`) IS NULL))&#xA;&#xA;--------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Aggregate example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;income &amp;lt;- data.frame(id = 1:2, age=c(12,35), salary = c(1000,NA))&#xA;con &amp;lt;- dbplyr::src_memdb()&#xA;tbl_income &amp;lt;- dplyr::copy_to(con, income, overwrite=TRUE)&#xA;print(tbl_income)&#xA;#&amp;gt; # Source:   table&amp;lt;income&amp;gt; [?? x 3]&#xA;#&amp;gt; # Database: sqlite 3.37.2 [:memory:]&#xA;#&amp;gt;      id   age salary&#xA;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1     1    12   1000&#xA;#&amp;gt; 2     2    35     NA&#xA;&#xA;# Let&#39;s define a rule set and confront the table with it:&#xA;rules &amp;lt;- validator( is_adult   = age &amp;gt;= 18&#xA;                    , has_income = salary &amp;gt; 0&#xA;)&#xA;&#xA;# and confront!&#xA;# in general with a db table it is handy to use a key&#xA;cf &amp;lt;- confront(tbl_income, rules, key=&#34;id&#34;)&#xA;aggregate(cf, by = &#34;rule&#34;)&#xA;#&amp;gt; # Source:   lazy query [?? x 7]&#xA;#&amp;gt; # Database: sqlite 3.37.2 [:memory:]&#xA;#&amp;gt;   rule       npass nfail   nNA rel.pass rel.fail rel.NA&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;lgl&amp;gt;       &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 is_adult       1     1     0 NA            0.5    0  &#xA;#&amp;gt; 2 has_income     1     0     1 NA            0      0.5&#xA;aggregate(cf, by = &#34;record&#34;)&#xA;#&amp;gt; # Source:   lazy query [?? x 3]&#xA;#&amp;gt; # Database: sqlite 3.37.2 [:memory:]&#xA;#&amp;gt;      id nfails   nNA&#xA;#&amp;gt;   &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1     1      1     0&#xA;#&amp;gt; 2     2      0     1&#xA;&#xA;# to tweak performance of the db query the following options are available&#xA;# 1) store validation result in db&#xA;cf &amp;lt;- confront(tbl_income, rules, key=&#34;id&#34;, compute = TRUE)&#xA;# or identical&#xA;cf &amp;lt;- confront(tbl_income, rules, key=&#34;id&#34;)&#xA;cf &amp;lt;- compute(cf)&#xA;&#xA;# 2) Store the validation sparsely&#xA;cf_sparse &amp;lt;- confront(tbl_income, rules, key=&#34;id&#34;, sparse=TRUE )&#xA;&#xA;show_query(cf_sparse)&#xA;#&amp;gt; &amp;lt;SQL&amp;gt;&#xA;#&amp;gt; SELECT `id`, &#39;is_adult&#39; AS `rule`, 1 AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `age`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (`age` - 18.0 &amp;lt; -1e-08)&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;is_adult&#39; AS `rule`, NULL AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `age`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (((`age`) IS NULL))&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;has_income&#39; AS `rule`, 1 AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `salary`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (`salary` &amp;lt;= 0.0)&#xA;#&amp;gt; UNION ALL&#xA;#&amp;gt; SELECT `id`, &#39;has_income&#39; AS `rule`, NULL AS `fail`&#xA;#&amp;gt; FROM (SELECT `id`, `salary`&#xA;#&amp;gt; FROM `income`)&#xA;#&amp;gt; WHERE (((`salary`) IS NULL))&#xA;values(cf_sparse, type=&#34;tbl&#34;)&#xA;#&amp;gt; # Source:   lazy query [?? x 3]&#xA;#&amp;gt; # Database: sqlite 3.37.2 [:memory:]&#xA;#&amp;gt;      id rule        fail&#xA;#&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1     1 is_adult       1&#xA;#&amp;gt; 2     2 has_income    NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;validate specific functions&lt;/h2&gt; &#xA;&lt;h3&gt;Added:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;is_complete&lt;/code&gt;, &lt;code&gt;all_complete&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;is_unique&lt;/code&gt;, &lt;code&gt;all_unique&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;exists_any&lt;/code&gt;, &lt;code&gt;exists_one&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;do_by&lt;/code&gt;, &lt;code&gt;sum_by&lt;/code&gt;, &lt;code&gt;mean_by&lt;/code&gt;, &lt;code&gt;min_by&lt;/code&gt;, &lt;code&gt;max_by&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Todo&lt;/h3&gt; &#xA;&lt;p&gt;Some newly added &lt;code&gt;validate&lt;/code&gt; utility functions are (still) missing from &lt;code&gt;validatedb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;contains_exactly&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;is_linear_sequence&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;hierachy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>