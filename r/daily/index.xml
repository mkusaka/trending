<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-15T01:40:31Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>protonKitto/eating_Out</title>
    <updated>2022-10-15T01:40:31Z</updated>
    <id>tag:github.com,2022-10-15:/protonKitto/eating_Out</id>
    <link href="https://github.com/protonKitto/eating_Out" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>m-clark/mixedup</title>
    <updated>2022-10-15T01:40:31Z</updated>
    <id>tag:github.com,2022-10-15:/m-clark/mixedup</id>
    <link href="https://github.com/m-clark/mixedup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R package for extracting results from mixed models that are easy to use and viable for presentation.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/m-clark/mixedup/master/man/figures/package_logo.png&#34; style=&#34;margin: 0 auto; width: 120px; valign: top&#34; align=&#34;right&#34; alt=&#34;mixedup Logo&#34; width=&#34;120&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mixedup&lt;/h1&gt; &#xA;&lt;h5&gt;a package for extracting clean results from mixed models&lt;/h5&gt; &#xA;&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/m-clark/mixedup?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/m-clark/mixedup/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/m-clark/mixedup/actions/workflows/check-standard.yaml&#34;&gt;&lt;img src=&#34;https://github.com/m-clark/mixedup/actions/workflows/check-standard.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/m-clark/mixedup/actions/workflows/pkgdown.yaml&#34;&gt;&lt;img src=&#34;https://github.com/m-clark/mixedup/actions/workflows/pkgdown.yaml/badge.svg?sanitize=true&#34; alt=&#34;pkgdown&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/m-clark/mixedup/actions/workflows/test-coverage.yaml&#34;&gt;&lt;img src=&#34;https://github.com/m-clark/mixedup/actions/workflows/test-coverage.yaml/badge.svg?sanitize=true&#34; alt=&#34;test-coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;This package provides extended functionality for mixed models. The goal of &lt;code&gt;mixedup&lt;/code&gt; is to solve little problems I have had that slip through the cracks from the various modeling packages and others in trying to get presentable output. Basically the idea is to create (tidy) objects that are easy to use and essentially ready for presentation, as well as &lt;em&gt;consistent&lt;/em&gt; across packages and across functions. Such objects would be things like variance components and random effects. I use several of these packages (including mgcv) for mixed models, and typically have to do some notable post processing to get some viable output even with &lt;code&gt;broom::tidy&lt;/code&gt;, and this effort often isn’t applicable if I switch to another package for the same type of model. These functions attempt to address this issue.&lt;/p&gt; &#xA;&lt;p&gt;For more details and examples see &lt;a href=&#34;https://m-clark.github.io/mixedup/&#34;&gt;https://m-clark.github.io/mixedup/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install mixedup from GitHub with &lt;code&gt;remotes&lt;/code&gt;. Use the second approach if you don’t already have &lt;code&gt;rstanarm&lt;/code&gt; or &lt;code&gt;brms&lt;/code&gt; (they aren’t required to use in general).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#39;m-clark/mixedup&#39;)&#xA;&#xA;# if you don&#39;t already have rstanarm and/or brms&#xA;&#xA;withr::with_envvar(c(R_REMOTES_NO_ERRORS_FROM_WARNINGS = &#34;true&#34;), &#xA;  remotes::install_github(&#39;m-clark/mixedup&#39;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported models&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lme4&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;glmmTMB&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nlme&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mgcv&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rstanarm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brms&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feature list&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extract Variance Components&lt;/li&gt; &#xA; &lt;li&gt;Extract Random Effects&lt;/li&gt; &#xA; &lt;li&gt;Extract Fixed Effects&lt;/li&gt; &#xA; &lt;li&gt;Extract Random Coefficients&lt;/li&gt; &#xA; &lt;li&gt;Extract Heterogeneous Variances&lt;/li&gt; &#xA; &lt;li&gt;Extract Correlation Structure&lt;/li&gt; &#xA; &lt;li&gt;Extract Model Data&lt;/li&gt; &#xA; &lt;li&gt;Summarize Model&lt;/li&gt; &#xA; &lt;li&gt;Find Typical&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not all features are available to the various modeling packages (e.g.&amp;nbsp;autocorrelation for &lt;code&gt;lme4&lt;/code&gt;), and some functionality may just not be supported for this package, but most functions are applicable to the packages listed.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;In the following I suppress the package startup and other information that isn’t necessary for demo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(lme4)&#xA;&#xA;lmer_model &amp;lt;- lmer(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;&#xA;library(glmmTMB)&#xA;&#xA;tmb_model &amp;lt;- glmmTMB(Reaction ~ Days + (1 + Days | Subject), data = sleepstudy)&#xA;&#xA;library(nlme)&#xA;&#xA;nlme_model &amp;lt;-  nlme(&#xA;  height ~ SSasymp(age, Asym, R0, lrc),&#xA;  data = Loblolly,&#xA;  fixed = Asym + R0 + lrc ~ 1,&#xA;  random = Asym ~ 1,&#xA;  start = c(Asym = 103, R0 = -8.5, lrc = -3.3)&#xA;)&#xA;&#xA;library(brms)&#xA;&#xA;# brm_model = brm(&#xA;#   Reaction ~ Days + (1 + Days | Subject), &#xA;#   data = sleepstudy, &#xA;#   refresh = -1,&#xA;#   verbose = FALSE,&#xA;#   open_progress = FALSE,&#xA;#   cores = 4,&#xA;#   iter = 1000&#xA;# )&#xA;&#xA;library(rstanarm)&#xA;&#xA;# rstanarm_model = stan_glmer(&#xA;#   Reaction ~ Days + (1 + Days | Subject), &#xA;#   data = sleepstudy, &#xA;#   refresh = -1,&#xA;#   verbose = FALSE,&#xA;#   show_messages = FALSE,&#xA;#   open_progress = FALSE,&#xA;#   cores = 4,&#xA;#   iter = 1000&#xA;# )&#xA;&#xA;library(mgcv)&#xA;&#xA;gam_model = gam(&#xA;  Reaction ~  Days +&#xA;    s(Subject, bs = &#39;re&#39;) +&#xA;    s(Days, Subject, bs = &#39;re&#39;),&#xA;  data = lme4::sleepstudy,&#xA;  method = &#39;REML&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extract Output from a Mixed Model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(mixedup)&#xA;&#xA;extract_random_effects(tmb_model)&#xA;# A tibble: 36 × 7&#xA;   group_var effect    group  value    se lower_2.5 upper_97.5&#xA;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;fct&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&#xA; 1 Subject   Intercept 308     2.82  13.7    -23.9        29.6&#xA; 2 Subject   Intercept 309   -40.0   13.8    -67.2       -12.9&#xA; 3 Subject   Intercept 310   -38.4   13.7    -65.4       -11.5&#xA; 4 Subject   Intercept 330    22.8   13.9     -4.51       50.2&#xA; 5 Subject   Intercept 331    21.6   13.6     -5.11       48.2&#xA; 6 Subject   Intercept 332     8.82  12.9    -16.5        34.1&#xA; 7 Subject   Intercept 333    16.4   13.1     -9.23       42.1&#xA; 8 Subject   Intercept 334    -7.00  12.9    -32.3        18.3&#xA; 9 Subject   Intercept 335    -1.04  14.0    -28.5        26.4&#xA;10 Subject   Intercept 337    34.7   13.6      7.94       61.4&#xA;# … with 26 more rows&#xA;&#xA;extract_fixed_effects(nlme_model)&#xA;# A tibble: 3 × 7&#xA;  term   value    se     z p_value lower_2.5 upper_97.5&#xA;  &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&#xA;1 Asym  101.   2.46   41.2       0     96.5      106.  &#xA;2 R0     -8.63 0.318 -27.1       0     -9.26      -7.99&#xA;3 lrc    -3.23 0.034 -94.4       0     -3.30      -3.16&#xA;&#xA;extract_random_coefs(lmer_model)&#xA;# A tibble: 36 × 7&#xA;   group_var effect    group value    se lower_2.5 upper_97.5&#xA;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;fct&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&#xA; 1 Subject   Intercept 308    254.  13.9      226.       281.&#xA; 2 Subject   Intercept 309    211.  13.9      184.       238.&#xA; 3 Subject   Intercept 310    212.  13.9      185.       240.&#xA; 4 Subject   Intercept 330    275.  13.9      248.       302.&#xA; 5 Subject   Intercept 331    274.  13.9      246.       301.&#xA; 6 Subject   Intercept 332    260.  13.9      233.       288.&#xA; 7 Subject   Intercept 333    268.  13.9      241.       295.&#xA; 8 Subject   Intercept 334    244.  13.9      217.       271.&#xA; 9 Subject   Intercept 335    251.  13.9      224.       278.&#xA;10 Subject   Intercept 337    286.  13.9      259.       313.&#xA;# … with 26 more rows&#xA;&#xA;extract_vc(brm_model, ci_level = .8)&#xA;# A tibble: 3 × 7&#xA;  group    effect    variance    sd sd_10 sd_90 var_prop&#xA;  &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&#xA;1 Subject  Intercept    793.  28.2  18.7   38.3    0.527&#xA;2 Subject  Days          42.2  6.50  4.73   8.1    0.028&#xA;3 Residual &amp;lt;NA&amp;gt;         669.  25.9  23.6   28.0    0.445&#xA;&#xA;summarize_model(lmer_model, cor_re = TRUE, digits = 1)&#xA;Computing profile confidence intervals ...&#xA;&#xA;Variance Components:&#xA;    Group    Effect Variance   SD SD_2.5 SD_97.5 Var_prop&#xA;  Subject Intercept    612.1 24.7   14.4    37.7      0.5&#xA;  Subject      Days     35.1  5.9    3.8     8.8      0.0&#xA; Residual              654.9 25.6   22.9    28.9      0.5&#xA;&#xA;Fixed Effects:&#xA;      Term Value  SE    t P_value Lower_2.5 Upper_97.5&#xA; Intercept 251.4 6.8 36.8     0.0     238.0      264.8&#xA;      Days  10.5 1.5  6.8     0.0       7.4       13.5&#xA;&#xA;find_typical(gam_model, probs = c(.25, .50, .75))&#xA;# A tibble: 6 × 8&#xA;  group_var effect    group   value    se lower_2.5 upper_97.5 probs&#xA;  &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;&#xA;1 Subject   Days      331    -3.19   2.67     -8.43       2.04 25%  &#xA;2 Subject   Days      369     0.873  2.67     -4.36       6.11 50%  &#xA;3 Subject   Days      352     3.51   2.67     -1.73       8.75 75%  &#xA;4 Subject   Intercept 350   -13.9   13.3     -39.9       12.2  25%  &#xA;5 Subject   Intercept 369     3.26  13.3     -22.8       29.3  50%  &#xA;6 Subject   Intercept 333    17.2   13.3      -8.87      43.2  75%  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Consistent output&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mods = list(&#xA;  tmb  = tmb_model,&#xA;  lmer = lmer_model, &#xA;  brm  = brm_model,&#xA;  stan = rstanarm_model,&#xA;  gam  = gam_model&#xA;)&#xA;&#xA;purrr::map_df(mods, extract_vc, .id = &#39;model&#39;) &#xA;Computing profile confidence intervals ...&#xA;# A tibble: 15 × 8&#xA;   model group    effect      variance    sd sd_2.5 sd_97.5 var_prop&#xA; * &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;&#xA; 1 tmb   Subject  &#34;Intercept&#34;    566.  23.8   15.0    37.7     0.451&#xA; 2 tmb   Subject  &#34;Days&#34;          32.7  5.72   3.80    8.59    0.026&#xA; 3 tmb   Residual  &amp;lt;NA&amp;gt;          655.  25.6   NA      NA       0.523&#xA; 4 lmer  Subject  &#34;Intercept&#34;    612.  24.7   14.4    37.7     0.47 &#xA; 5 lmer  Subject  &#34;Days&#34;          35.1  5.92   3.80    8.75    0.027&#xA; 6 lmer  Residual &#34;&#34;             655.  25.6   22.9    28.9     0.503&#xA; 7 brm   Subject  &#34;Intercept&#34;    793.  28.2   15.8    46.3     0.527&#xA; 8 brm   Subject  &#34;Days&#34;          42.2  6.50   4.32    9.28    0.028&#xA; 9 brm   Residual  &amp;lt;NA&amp;gt;          669.  25.9   22.5    29.6     0.445&#xA;10 stan  Subject  &#34;Intercept&#34;    585.  24.2   12.3    36.3     0.447&#xA;11 stan  Subject  &#34;Days&#34;          44.0  6.64   4.00    9.98    0.034&#xA;12 stan  Residual  &amp;lt;NA&amp;gt;          680.  26.1   NA      NA       0.519&#xA;13 gam   Subject  &#34;Intercept&#34;    628.  25.1   16.1    39.0     0.477&#xA;14 gam   Subject  &#34;Days&#34;          35.9  5.99   4.03    8.91    0.027&#xA;15 gam   Residual  &amp;lt;NA&amp;gt;          654.  25.6   22.8    28.7     0.496&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the ‘mixedup’ project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/m-clark/mixedup/master/.github/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tidyverse/purrr</title>
    <updated>2022-10-15T01:40:31Z</updated>
    <id>tag:github.com,2022-10-15:/tidyverse/purrr</id>
    <link href="https://github.com/tidyverse/purrr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A functional programming toolkit for R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;purrr &lt;img src=&#34;https://raw.githubusercontent.com/tidyverse/purrr/main/man/figures/logo.png&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=purrr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/purrr&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/tidyverse/purrr?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tidyverse/purrr/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tidyverse/purrr/actions&#34;&gt;&lt;img src=&#34;https://github.com/tidyverse/purrr/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;purrr enhances R’s functional programming (FP) toolkit by providing a complete and consistent set of tools for working with functions and vectors. If you’ve never heard of FP before, the best place to start is the family of &lt;code&gt;map()&lt;/code&gt; functions which allow you to replace many for loops with code that is both more succinct and easier to read. The best place to learn about the &lt;code&gt;map()&lt;/code&gt; functions is the &lt;a href=&#34;https://r4ds.had.co.nz/iteration.html&#34;&gt;iteration chapter&lt;/a&gt; in R for data science.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The easiest way to get purrr is to install the whole tidyverse:&#xA;install.packages(&#34;tidyverse&#34;)&#xA;&#xA;# Alternatively, install just purrr:&#xA;install.packages(&#34;purrr&#34;)&#xA;&#xA;# Or the the development version from GitHub:&#xA;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;tidyverse/purrr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cheatsheet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/purrr.pdf&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/cheatsheets/master/pngs/thumbnails/purrr-cheatsheet-thumbs.png&#34; width=&#34;630&#34; height=&#34;252&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following example uses purrr to solve a fairly realistic problem: split a data frame into pieces, fit a model to each piece, compute the summary, then extract the R&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(purrr)&#xA;&#xA;mtcars |&amp;gt; &#xA;  split(mtcars$cyl) |&amp;gt;  # from base R&#xA;  map(\(df) lm(mpg ~ wt, data = df)) |&amp;gt; &#xA;  map(summary) %&amp;gt;%&#xA;  map_dbl(&#34;r.squared&#34;)&#xA;#&amp;gt;         4         6         8 &#xA;#&amp;gt; 0.5086326 0.4645102 0.4229655&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example illustrates some of the advantages of purrr functions over the equivalents in base R:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first argument is always the data, so purrr works naturally with the pipe.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All purrr functions are type-stable. They always return the advertised output type (&lt;code&gt;map()&lt;/code&gt; returns lists; &lt;code&gt;map_dbl()&lt;/code&gt; returns double vectors), or they throw an error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All &lt;code&gt;map()&lt;/code&gt; functions accept functions (named, anonymous, and lambda), character vector (used to extract components by name), or numeric vectors (used to extract by position).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://purrr.tidyverse.org/CODE_OF_CONDUCT&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
</feed>