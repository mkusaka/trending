<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-28T01:38:16Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AusSoilsDSM/SLGA</title>
    <updated>2022-10-28T01:38:16Z</updated>
    <id>tag:github.com,2022-10-28:/AusSoilsDSM/SLGA</id>
    <link href="https://github.com/AusSoilsDSM/SLGA" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code used in the development of the Soil and Landscape Grid of Australia&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SLGA&lt;/h1&gt; &#xA;&lt;p&gt;Code used in the development of the Soil and Landscape Grid of Australia - &lt;a href=&#34;https://esoil.io/TERNLandscapes/Public/Pages/SLGA/index.html&#34;&gt;https://esoil.io/TERNLandscapes/Public/Pages/SLGA/index.html&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nrennie/aRt</title>
    <updated>2022-10-28T01:38:16Z</updated>
    <id>tag:github.com,2022-10-28:/nrennie/aRt</id>
    <link href="https://github.com/nrennie/aRt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R package to create generative art.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/nrennie/aRt/actions&#34;&gt;&lt;img src=&#34;https://github.com/nrennie/aRt/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h1&gt;aRt &lt;img src=&#34;https://raw.githubusercontent.com/nrennie/aRt/main/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;120&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;aRt is an R package to create generative art.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;nrennie/aRt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;nrennie/aRt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Colour palettes&lt;/h2&gt; &#xA;&lt;p&gt;Some of the functions in previous releases of the {aRt} package took names of colour palettes as arguments. These colour palettes came from external R packages, and the names of the palettes were not necessarily obvious. These functions have been updated to allow any choice of colours, rather than restricting a user to a single package from which to choose palettes.&lt;/p&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;abacus&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;abacus()&lt;/code&gt; function produces generative art based on points and lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;abacus(nx = 30, ny = 100, max_size = 2, main_col = &#34;black&#34;, bg_col = &#34;white&#34;, s = 123)&#xA;abacus(nx = 20, ny = 10, max_size = 4, main_col = &#34;white&#34;, bg_col = &#34;black&#34;, s = 12)&#xA;abacus(nx = 100, ny = 100, max_size = 3, main_col = &#34;#008080&#34;, bg_col = &#34;white&#34;, s = 123)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/abacus1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/abacus2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/abacus3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;attraction&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;attraction()&lt;/code&gt; function produces generative art based on strange attractors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;attraction(n=50000, a=-3, b=1, c=0.5, d=-1, main_col=&#34;black&#34;, bg_col=&#34;white&#34;)&#xA;attraction(n=50000, a=-6, b=1, c=0.5, d=-2, main_col=&#34;black&#34;, bg_col=&#34;white&#34;)&#xA;attraction(n=50000, a=-3, b=-2, c=1, d=-1, main_col=rcartocolor::carto_pal(n = 7, &#34;SunsetDark&#34;), bg_col=&#34;white&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/attraction1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/attraction2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/attraction3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;black hole&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;black_hole()&lt;/code&gt; function produces generative art of many boxes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;black_hole(r_max = c(50, 150, 250, 350), n = 10000, lim = 300, main_cols = rcartocolor::carto_pal(n = 7, name = &#34;SunsetDark&#34;), bg_col = &#34;black&#34;, size = 0.01, a = 0.5, s = 1234)&#xA;black_hole(r_max = 100, n = 50000, lim = 300, main_cols = rev(rcartocolor::carto_pal(n = 7, name = &#34;Teal&#34;)), bg_col = &#34;white&#34;, size = 0.05, a = 0.3, s = 1234)&#xA;black_hole(r_max = c(50, 150, 250), n = 20000, lim = 500, main_cols = rcartocolor::carto_pal(n = 7, name = &#34;SunsetDark&#34;), bg_col = &#34;black&#34;, size = 0.01, a = 0.75, s = 1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/black_hole1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/black_hole2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/black_hole3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;blending&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;blending()&lt;/code&gt; function produces generative art of many boxes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;blending(n = 100, down = &#34;white&#34;, up = &#34;black&#34;, s = 1234)&#xA;blending(n = 500, down = &#34;white&#34;, up = &#34;black&#34;, s = 1234)&#xA;blending(n = 100, down = &#34;#ba1141&#34;, up = &#34;#003366&#34;, s = 1234)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/blending1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/blending2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/blending3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;boxes&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;boxes()&lt;/code&gt; function produces generative art of many boxes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;boxes(n=100, perc=0.1, col_palette=rcartocolor::carto_pal(n = 7, &#34;DarkMint&#34;), bg_col=&#34;black&#34;, s=1234)&#xA;boxes(n=20, perc=0.1, col_palette=rcartocolor::carto_pal(n = 7, &#34;DarkMint&#34;), bg_col=&#34;black&#34;, s=1234)&#xA;boxes(n=100, perc=0.5, col_palette=rcartocolor::carto_pal(n = 7, &#34;Magenta&#34;), bg_col=&#34;black&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/boxes_n100_p1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/boxes_n20_p1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/boxes_n100_p5.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;bricks&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;bricks()&lt;/code&gt; function draws multiple rectangular polygons in rows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bricks(n_y=20, colours=c(&#34;#9B1D20&#34;, &#34;#3D2B3D&#34;, &#34;#CBEFB6&#34;, &#34;#635D5C&#34;), bg_col=&#34;gray97&#34;)&#xA;bricks(n_y=200, colours=c(&#34;#9B1D20&#34;, &#34;#3D2B3D&#34;, &#34;#CBEFB6&#34;, &#34;#635D5C&#34;), bg_col=&#34;gray97&#34;)&#xA;bricks(n_y=20, colours=rcartocolor::carto_pal(7, &#34;Burg&#34;), bg_col=&#34;gray97&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bricks1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bricks2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bricks3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;bubbles&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;bubbles()&lt;/code&gt; function produces generative art using layered polar bar charts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bubbles(num_circles = 20, main_col = &#34;black&#34;, col_palette = rcartocolor::carto_pal(n = 12, &#34;Bold&#34;), bg_col = &#34;white&#34;, s = 1234)&#xA;bubbles(num_circles = 20, main_col = &#34;lightgrey&#34;, col_palette = rcartocolor::carto_pal(n = 12, &#34;Bold&#34;), bg_col = &#34;white&#34;, s = 123)&#xA;bubbles(num_circles = 10, main_col = &#34;white&#34;, col_palette = rcartocolor::carto_pal(n = 12, &#34;Prism&#34;), bg_col = &#34;black&#34;, s = 2022)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bubbles1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bubbles2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bubbles3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;bullseye&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;bullseye()&lt;/code&gt; function produces generative art using layered polar bar charts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bullseye(main_col=&#34;black&#34;, bg_col=&#34;white&#34;, s=1234)&#xA;bullseye(main_col=&#34;white&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;bullseye(main_col=&#34;black&#34;, bg_col=&#34;white&#34;, s=2021)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bullseye_1234.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bullseye_1234n.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/bullseye_2021.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;circles&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;circles()&lt;/code&gt; function produces generative art using dendograms and circular graphs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;circles(n=100, smoothness=100, col_palette=rcartocolor::carto_pal(n = 12, &#34;Bold&#34;), line_col=NA, bg_col=&#34;black&#34;, s=1234)&#xA;circles(n=10, smoothness=100, col_palette=rcartocolor::carto_pal(n = 12, &#34;Bold&#34;), line_col=NA, bg_col=&#34;#e73f74&#34;, s=1234)&#xA;circles(n=2, smoothness=3, col_palette=rcartocolor::carto_pal(n = 12, &#34;Bold&#34;), line_col=&#34;black&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/circles1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/circles2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/circles3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;circular&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;circular()&lt;/code&gt; function produces circular generative art produced by many random paths from the centre of the circle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;circular(n=2, main_col=&#34;black&#34;, bg_col=&#34;white&#34;, s=56)&#xA;circular(n=10, main_col=&#34;black&#34;, bg_col=&#34;white&#34;, s=56)&#xA;circular(n=100, main_col=&#34;black&#34;, bg_col=&#34;white&#34;, s=56)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/circular_n2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/circular_n10.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/circular_n100.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;connected&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;connected()&lt;/code&gt; function produces generative art by connected points on a circle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;connected(n=100, n_geom=10, random=F, col_palette=RColorBrewer::brewer.pal(n = 9,&#34;RdPu&#34;), bg_col=&#34;#ae217e&#34;, s=1234)&#xA;connected(n=100, n_geom=10, random=T, col_palette=RColorBrewer::brewer.pal(n = 9,&#34;RdPu&#34;), bg_col=&#34;#ae217e&#34;, s=1234)&#xA;connected(n=250, n_geom=2, random=F, col_palette=RColorBrewer::brewer.pal(n = 5,&#34;RdPu&#34;), bg_col=&#34;#ae217e&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/connected_100_10F.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/connected_100_10T.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/connected_250_2F.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;crawling&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;crawling()&lt;/code&gt; function produces generative art using dendograms and tree graphs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;crawling(n=50, edge_colour=&#34;black&#34;, node_size=1, node_colour=&#34;black&#34;, bg_col=&#34;white&#34;, s=1234)&#xA;crawling(n=250, edge_colour=&#34;black&#34;, node_size=1, node_colour=&#34;black&#34;, bg_col=&#34;white&#34;, s=1234)&#xA;crawling(n=1000, edge_colour=&#34;black&#34;, node_size=1, node_colour=&#34;black&#34;, bg_col=&#34;white&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/crawling50.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/crawling250.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/crawling1000.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;dots&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;dots()&lt;/code&gt; function produces generative art using jittered points.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dots(n_x=50, n_y=100, jitter_size_width=0.5, jitter_size_height=0.5, col_palette = rcartocolor::carto_pal(n = 7, &#34;Purp&#34;), bg_col=&#34;#63589f&#34;, s=1234)&#xA;dots(n_x=500, n_y=100, jitter_size_width=0.5, jitter_size_height=5, col_palette = rcartocolor::carto_pal(n = 7, &#34;Purp&#34;), bg_col=&#34;#63589f&#34;, s=1234)&#xA;dots(n_x=50, n_y=100, jitter_size_width=0.05, jitter_size_height=50, col_palette = rcartocolor::carto_pal(n = 7, &#34;Purp&#34;), bg_col=&#34;#63589f&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/dots1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/dots2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/dots3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;fading&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;fading()&lt;/code&gt; function produces generative art using voronoi tiles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fading(n_layers=6, n_points=10, col_palette=rcartocolor::carto_pal(n = 7, &#34;SunsetDark&#34;), s=1234)&#xA;fading(n_layers=6, n_points=1, col_palette=rcartocolor::carto_pal(n = 7, &#34;Sunset&#34;), s=1234)&#xA;fading(n_layers=10, n_points=10, col_palette=rcartocolor::carto_pal(n = 7, &#34;SunsetDark&#34;), s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/fading_6_10.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/fading_6_1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/fading_10_10.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;flow fields&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;flow_fields()&lt;/code&gt; function produces generative art using particle traces. These functions are inspired by a blog post by &lt;a href=&#34;https://www.williamrchase.com/post/flow-fields-12-months-of-art-september/&#34;&gt;Will Chase&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;flow_fields(n = 10000, granualarity = 1000, x_freq = 1, y_freq = 1, alpha = 1, line_col = c(&#34;#edf8fb&#34;,&#34;#bfd3e6&#34;,&#34;#9ebcda&#34;,&#34;#8c96c6&#34;,&#34;#8c6bb1&#34;,&#34;#88419d&#34;,&#34;#6e016b&#34;), bg_col = &#34;lightgrey&#34;, s = 1234)&#xA;flow_fields(n = 10000, granualarity = 1000, x_freq = 1, y_freq = 1, alpha = 0.3, line_col = &#34;black&#34;, bg_col = &#34;white&#34;, s = 1234)&#xA;flow_fields(n = 10000, granualarity = 1000, x_freq = 3, y_freq = 0.2, alpha = 1, line_col = c(&#34;#edf8fb&#34;,&#34;#bfd3e6&#34;,&#34;#9ebcda&#34;,&#34;#8c96c6&#34;,&#34;#8c6bb1&#34;,&#34;#88419d&#34;,&#34;#6e016b&#34;), bg_col = &#34;lightgrey&#34;, s = 1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/flow_fields1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/flow_fields2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/flow_fields3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;fractals&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;fractals()&lt;/code&gt; function produces generative art based on fractal patterns. These functions are inspired by a blog post on &lt;a href=&#34;https://www.r-bloggers.com/2010/08/fractals-in-r/&#34;&gt;R-bloggers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fractals(N = 25, col_palette = MetBrewer::met.brewer(&#34;Demuth&#34;, n = 25),&#xA;         shift = 0, left = -1, right = 1,&#xA;         y_param = 3, resolution = 0.005, dist_max = 4)&#xA;fractals(N = 25, col_palette = rev(MetBrewer::met.brewer(&#34;Benedictus&#34;, n = 25)),&#xA;         shift = 0, left = -3, right = 3,&#xA;         y_param = 2, resolution = 0.005, dist_max = 4)&#xA;fractals(N = 20, col_palette = grey.colors(30),&#xA;         shift = -1, left = -1, right = 1,&#xA;         y_param = 2, resolution = 0.005, dist_max = 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/fractals1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/fractals2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/fractals3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;heart&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;heart()&lt;/code&gt; function draws a heart from many overlapping lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;heart(n=25, col_scheme=&#34;mono&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;heart(n=100, col_scheme=&#34;mono&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;heart(n=25, col_scheme=&#34;rainbow&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/heart_n25_m.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/heart_n100_m.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/heart_n25_r.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;infinity&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;infinity()&lt;/code&gt; function draws an infinity symbol from many overlapping lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;infinity(n=25, col_scheme=&#34;mono&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;infinity(n=100, col_scheme=&#34;mono&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;infinity(n=25, col_scheme=&#34;rainbow&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/infinity_n25_m.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/infinity_n100_m.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/infinity_n25_r.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;mosaic&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;mosaic()&lt;/code&gt; function creates a set of voronoi tiles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mosaic(n = 100, fill_cols = c(&#34;#4B3F72&#34;, &#34;#CBB3BF&#34;, &#34;#FFC857&#34;, &#34;#119DA4&#34;, &#34;#19647E&#34;), line_col = &#34;white&#34;, bg_col = &#34;white&#34;, line_size = 1, x_means = c(0, 10, 5), y_means = c(0, 7, 8), xy_var = 2, s = 1234)&#xA;mosaic(n = 100, fill_cols = &#34;white&#34;, line_col = &#34;black&#34;, bg_col = &#34;black&#34;, line_size = 1, x_means = 0, y_means = 0, xy_var = 5, s = 1234)&#xA;mosaic(n = 500, fill_cols = c(&#34;#436f85&#34;, &#34;#432263&#34;, &#34;#de7a00&#34;, &#34;#416322&#34;, &#34;#860a4d&#34;), line_col = &#34;white&#34;, bg_col = &#34;white&#34;, line_size = 0.5, x_means = c(0, 10, 5), y_means = c(0, 7, 8), xy_var = 2, s = 1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/mosaic1.png?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/mosaic2.png?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/mosaic3.png?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;mosaic sketch&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;mosaic_sketch()&lt;/code&gt; function creates a set of voronoi tiles with a hand-drawn feel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mosaic_sketch(n = 10, fill_cols = c(&#34;#4B3F72&#34;, &#34;#CBB3BF&#34;, &#34;#FFC857&#34;, &#34;#119DA4&#34;, &#34;#19647E&#34;), line_col = &#34;white&#34;, bg_col = &#34;white&#34;, line_size = 2, x_means = c(0, 10, 5), y_means = c(0, 7, 8), xy_var = 2, s = 1234)&#xA;mosaic_sketch(n = 20, fill_cols = c(&#34;white&#34;, &#34;#008080&#34;), line_col = &#34;white&#34;, bg_col = &#34;#008080&#34;, line_size = 1.5, x_means = c(0, 10, 5), y_means = c(0, 7, 8), xy_var = 2, s = 1234)&#xA;mosaic_sketch(n = 6, fill_cols = &#34;black&#34;, line_col = &#34;white&#34;, bg_col = &#34;white&#34;, line_size = 2, x_means = c(0, 10, 5), y_means = c(0, 7, 8), xy_var = 2, s = 1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/mosaic_sketch1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/mosaic_sketch2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/mosaic_sketch3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;polygons&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;polygons()&lt;/code&gt; function draws multiple polygons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;polygons(n_x=12, n_y=18, gap_size=0.5, deg_jitter=0.1, colours=c(&#34;#9B1D20&#34;, &#34;#3D2B3D&#34;, &#34;#CBEFB6&#34;, &#34;#635D5C&#34;), rand = FALSE, bg_col=&#34;gray97&#34;)&#xA;polygons(n_x=6, n_y=9, gap_size=0.2, deg_jitter=0.1, colours=c(&#34;#9B1D20&#34;, &#34;#3D2B3D&#34;, &#34;#CBEFB6&#34;, &#34;#635D5C&#34;), rand = FALSE, bg_col=&#34;gray97&#34;)&#xA;polygons(n_x=12, n_y=18, gap_size=0.5, deg_jitter=0.5, colours=rcartocolor::carto_pal(7, &#34;Burg&#34;), rand = FALSE, bg_col=&#34;gray97&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/polygons1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/polygons2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/polygons3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;rectangles&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;rectangles()&lt;/code&gt; function draws multiple rectangles.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rectangles(n = 100, max_height = 7, max_width = 5, size = 2, main_col = &#34;lightgrey&#34;, col_palette = rcartocolor::carto_pal(n = 12, &#34;Bold&#34;), bg_col = &#34;white&#34;, s = 123)&#xA;rectangles(n = 10, max_height = 15, max_width = 15, size = 4, main_col = &#34;lightgrey&#34;, col_palette = rcartocolor::carto_pal(n = 12, &#34;Bold&#34;), bg_col = &#34;white&#34;, s = 123)&#xA;rectangles(n = 100, max_height = 4, max_width = 6, size = 1, main_col = ggplot2::alpha(&#34;white&#34;, 0.5), col_palette = rcartocolor::carto_pal(n = 12, &#34;Prism&#34;), bg_col = &#34;black&#34;, s = 123)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/rectangles1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/rectangles2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/rectangles3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;shell&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;shells()&lt;/code&gt; function produces generative art using sine and cosine waves.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shells(n = 4, alpha = 1, main_col = &#34;black&#34;, bg_col = &#34;white&#34;)&#xA;shells(n = 10, alpha = 1, main_col = &#34;black&#34;, bg_col = &#34;white&#34;)&#xA;shells(n = 6, alpha = 0.5, main_col = &#34;#CC338B&#34;, bg_col = alpha(&#34;#CC338B&#34;, 0.2))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/shell1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/shell2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/shell3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;spirals&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;spirals()&lt;/code&gt; function produces generative art consisting of dots arranged in a spiral.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spirals(perc=0.2, s=1234)&#xA;spirals(perc=0.5, s=1234)&#xA;spirals(perc=0.8, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/spirals_p2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/spirals_p5.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/spirals_p8.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;squares&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;squares()&lt;/code&gt; function produces generative art consisting of pattern-filled squares.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;squares(n = 7, line_col = &#34;white&#34;, pattern_col = &#34;white&#34;, pattern_fill = &#34;black&#34;, pattern_size = 0.4, size = 1.5, s = 1234)&#xA;squares(n = 5, line_col = &#34;#2DC2BD&#34;, pattern_col = &#34;#392759&#34;, pattern_fill = &#34;#2DC2BD&#34;, pattern_size = 0.4, size = 1.5, s = 5678)&#xA;squares(n = 20, line_col = &#34;white&#34;, pattern_col = &#34;white&#34;, pattern_fill = &#34;black&#34;, pattern_size = 0.4, size = 1.5, s = 1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/squares_01.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/squares_02.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/squares_03.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;static&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;static()&lt;/code&gt; function produces generative art reminiscent of the noise displayed on analog televisions when no transmission signal is received.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;static(perc=0.01, n=500, s=1234)&#xA;static(perc=0.1, n=500, s=1234)&#xA;static(perc=0.3, n=500, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/static_p01_n500.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/static_p10_n500.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/static_p30_n500.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;streams&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;streams()&lt;/code&gt; function produces generative art consisting of stream charts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;streams(bg_col = &#34;white&#34;, line_col = &#34;white&#34;, fill_col = c(&#34;#5F4690&#34;, &#34;#1D6996&#34;, &#34;#38A6A5&#34;, &#34;#0F8554&#34;, &#34;#73AF48&#34;, &#34;#EDAD08&#34;, &#34;#E17C05&#34;, &#34;#CC503E&#34;, &#34;#94346E&#34;, &#34;#6F4070&#34;), type = &#34;right&#34;, s = 1234)&#xA;streams(bg_col = &#34;black&#34;, line_col = NA, fill_col = grey.colors(n = 25), type = &#34;up&#34;, s = 450)&#xA;streams(bg_col = &#34;white&#34;, line_col = NA, fill_col = rep(&#34;purple&#34;, 8), type = &#34;left&#34;, s = 13)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/streams1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/streams2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/streams3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;stripes&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;stripes()&lt;/code&gt; function produces generative art consisting of rows of vertical stripes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;stripes(perc=0, n=3, col_palette = rcartocolor::carto_pal(n = 7, &#34;TealGrn&#34;), alpha = 1, s=1234)&#xA;stripes(perc=0.5, n=3, col_palette = rcartocolor::carto_pal(n = 7, &#34;TealGrn&#34;), alpha = 1, s=1234)&#xA;stripes(perc=1, n=3, col_palette = rcartocolor::carto_pal(n = 7, &#34;TealGrn&#34;), alpha = 1, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/stripes_p00_n3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/stripes_p50_n3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/stripes_p100_n3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;sunbursts&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;sunbursts()&lt;/code&gt; function produces generative art consisting of two-dimesional density plots.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sunbursts(n = 100, x_means = c(0, 10, 5), y_means = c(0, 7, 8), xy_var = 5, low = &#34;#074050&#34;, high = &#34;#d3f2a3&#34;, s = 1234)&#xA;sunbursts(n = 5, x_means = c(0, 1, 15), y_means = c(0, 2, 16), xy_var = 10, low = &#34;#4e0550&#34;, high = &#34;#facdfc&#34;, s = 1234)&#xA;sunbursts(n = 250, x_means = c(1, 2, 9, 50), y_means = c(3, 6, 8, -3), xy_var = 100, low = &#34;white&#34;, high = &#34;black&#34;, s = 1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/sunbursts1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/sunbursts2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/sunbursts3.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;tiles&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tiles()&lt;/code&gt; function produces generative art using square polygons.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tiles(n_x=12, n_y=12, col_palette=MetBrewer::met.brewer(&#34;Veronese&#34;, 5), s=1234)&#xA;tiles(n_x=50, n_y=50, col_palette=MetBrewer::met.brewer(&#34;Veronese&#34;, 6), s=1234)&#xA;tiles(n_x=12, n_y=12, col_palette=MetBrewer::met.brewer(&#34;Pissaro&#34;, 5), s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/tiles_veronese1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/tiles_veronese2.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/tiles_pissaro1.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;vortex&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;vortex()&lt;/code&gt; function produces circular vortex generative art produced by a line plot and polar coordinates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vortex(n=25, start_val=90, col_scheme=&#34;mono&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;vortex(n=100, start_val=90, col_scheme=&#34;mono&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;vortex(n=25, start_val=90, col_scheme=&#34;rainbow&#34;, bg_col=&#34;black&#34;, s=1234)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/vortex_n25_m.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/vortex_n100_m.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/vortex_n25_r.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;waves&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;waves()&lt;/code&gt; function produces generative art using sine and cosine waves.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;waves(a=23, b=6, main_col=&#34;white&#34;, bg_col=&#34;black&#34;, s=2021)&#xA;waves(a=23, b=6, main_col=rcartocolor::carto_pal(n = 7, &#34;Prism&#34;), bg_col=&#34;#edad08&#34;, s=2021)&#xA;waves(a=6, b=23, main_col=&#34;black&#34;, bg_col=&#34;white&#34;, s=2021)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/waves23_6_bw.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/waves23_6_col.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;img src=&#34;https://github.com/nrennie/aRt/raw/main/man/figures/waves6_23_bw.jpeg?raw=true&#34; width=&#34;30%&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Roche/crmPack</title>
    <updated>2022-10-28T01:38:16Z</updated>
    <id>tag:github.com,2022-10-28:/Roche/crmPack</id>
    <link href="https://github.com/Roche/crmPack" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Object-Oriented Implementation of CRM Designs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;crmPack&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Roche/crmPack/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;131.5&#34; alt=&#34;crmPack-logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;Project Status: Active - The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goal of crmPack is to implement a wide range of model-based dose escalation designs, ranging from classical and modern continual reassessment methods (CRMs) based on dose-limiting toxicity endpoints to dual-endpoint designs taking into account a biomarker/efficacy outcome. The focus is on Bayesian inference, making it very easy to setup a new design with your own JAGS code. However, it is also possible to implement 3+3 designs for comparison or models with non-Bayesian estimation. The whole package is written in a modular form in the S4 class system, making it very flexible for adaptation to new models, escalation or stopping rules.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of crmPack from github with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;Roche/crmPack&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the stable release version of crmPack from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;crmPack&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic example which shows how to run simulations from a CRM with a 2-parameter logistic regression model, using a log normal prior distribution, and custom cohort size, stopping and maximum increments rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(crmPack)&#xA;&#xA;# Define the dose grid.&#xA;empty_data &amp;lt;- Data(doseGrid = c(1, 3, 5, 10, 15, 20, 25, 40, 50, 80, 100))&#xA;&#xA;# Initialize the CRM model.&#xA;model &amp;lt;- LogisticLogNormal(&#xA;  mean = c(-0.85, 1),&#xA;  cov = matrix(c(1, -0.5, -0.5, 1), nrow = 2),&#xA;  refDose = 56&#xA;)&#xA;&#xA;# Choose the rule for selecting the next dose.&#xA;my_next_best &amp;lt;- NextBestNCRM(&#xA;  target = c(0.2, 0.35),&#xA;  overdose = c(0.35, 1),&#xA;  maxOverdoseProb = 0.25&#xA;)&#xA;&#xA;# Choose the rule for the cohort size.&#xA;my_size_1 &amp;lt;- CohortSizeRange(&#xA;  intervals = c(0, 30),&#xA;  cohortSize = c(1, 3)&#xA;)&#xA;my_size_2 &amp;lt;- CohortSizeDLT(&#xA;  DLTintervals = c(0, 1),&#xA;  cohortSize = c(1, 3)&#xA;)&#xA;my_size &amp;lt;- maxSize(my_size_1, my_size_2)&#xA;&#xA;# Choose the rule for stopping.&#xA;my_stopping_1 &amp;lt;- StoppingMinCohorts(nCohorts = 3)&#xA;my_stopping_2 &amp;lt;- StoppingTargetProb(&#xA;  target = c(0.2, 0.35),&#xA;  prob = 0.5&#xA;)&#xA;my_stopping_3 &amp;lt;- StoppingMinPatients(nPatients = 20)&#xA;my_stopping &amp;lt;- (my_stopping_1 &amp;amp; my_stopping_2) | my_stopping_3&#xA;&#xA;# Choose the rule for dose increments.&#xA;my_increments &amp;lt;- IncrementsRelative(&#xA;  intervals = c(0, 20),&#xA;  increments = c(1, 0.33)&#xA;)&#xA;&#xA;# Initialize the design.&#xA;design &amp;lt;- Design(&#xA;  model = model,&#xA;  nextBest = my_next_best,&#xA;  stopping = my_stopping,&#xA;  increments = my_increments,&#xA;  cohortSize = my_size,&#xA;  data = empty_data,&#xA;  startingDose = 3&#xA;)&#xA;&#xA;# Define the true function.&#xA;my_truth &amp;lt;- function(dose) {&#xA;  alpha0 &amp;lt;- 7&#xA;  alpha1 &amp;lt;- 8&#xA;  ref_dose &amp;lt;- 56&#xA;  stand_log_dose &amp;lt;- log(dose / ref_dose)&#xA;  plogis(alpha0 + alpha1 * stand_log_dose)&#xA;}&#xA;&#xA;# Run the simulation on the desired design.&#xA;# We only generate 1 trial outcome here for illustration, for the actual study&#xA;# this should be increased of course.&#xA;options &amp;lt;- McmcOptions(&#xA;  burnin = 100,&#xA;  step = 1,&#xA;  samples = 2000&#xA;)&#xA;time &amp;lt;- system.time(my_sims &amp;lt;- simulate(design,&#xA;  args = NULL,&#xA;  truth = my_truth,&#xA;  nsim = 1,&#xA;  seed = 819,&#xA;  mcmcOptions = options,&#xA;  parallel = FALSE&#xA;))[3]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>