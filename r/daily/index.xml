<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-03T01:37:55Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>survival-lumc/ValidationCompRisks</title>
    <updated>2023-01-03T01:37:55Z</updated>
    <id>tag:github.com,2023-01-03:/survival-lumc/ValidationCompRisks</id>
    <link href="https://github.com/survival-lumc/ValidationCompRisks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code repository for the manuscript &#39;Validation of the performance of competing risks prediction models: a guide through modern methods&#39; (published in BMJ)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Validation of prediction models in presence of competing risks: a guide through modern methods&lt;/h1&gt; &#xA;&lt;p&gt;R Code repository for the manuscript &lt;a href=&#34;https://www.bmj.com/content/377/bmj-2021-069249&#34;&gt;&#39;Validation of prediction models in presence of competing risks: a guide through modern methods&#39;&lt;/a&gt; published in BMJ.&lt;/p&gt; &#xA;&lt;p&gt;The repository contains the following code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/survival-lumc/ValidationCompRisks/main/Prediction_CSC_minimal.R&#34;&gt;Prediction_CSC_minimal.R&lt;/a&gt; : the companion R script for the manuscript. This script reproduces all main tables and figures of the manuscript. The file evaluates the performance of a cause specific hazards prediction model. Data are available &lt;a href=&#34;https://github.com/survival-lumc/ValidationCompRisks/tree/main/Data&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/survival-lumc/ValidationCompRisks/main/Prediction_CSC.md&#34;&gt;Prediction_CSC.md&lt;/a&gt; : a markdown document containing a more in-depth version of the script, with details on model development, descriptive tables and supplementary plots. This document requires installing several add-on packages that are not needed to run the minimal script. The RMarkdown source code (.Rmd) is &lt;a href=&#34;https://github.com/survival-lumc/ValidationCompRisks/raw/main/Prediction_CSC.Rmd&#34;&gt;here&lt;/a&gt;. Additional functions useful for this script are available &lt;a href=&#34;https://github.com/survival-lumc/ValidationCompRisks/tree/main/R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additional code to alternatively develop a competing risk prediction model using the subdistribution hazard approach (Fine &amp;amp; Gray) is &lt;a href=&#34;https://github.com/survival-lumc/ValidationCompRisks/raw/main/Development_SDH.md&#34;&gt;here&lt;/a&gt;. The Rmarkdown source code (.Rmd) is &lt;a href=&#34;https://github.com/survival-lumc/ValidationCompRisks/raw/main/Development_SDH.Rmd&#34;&gt;here&lt;/a&gt;. A more concise R source code (.R) is &lt;a href=&#34;https://github.com/survival-lumc/ValidationCompRisks/raw/main/Development_SDH_minimal.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/survival-lumc/ValidationCompRisks/main/sharing_CSC_model.R&#34;&gt;sharing_CSC_model.R&lt;/a&gt; : example/template of how to share a cause-specific hazards prediction model for external validation, without having to share the original development data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;If you are git user, you can clone the directory by using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/survival-lumc/ValidationCompRisks.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can simply download a zip file containing the directory by clicking Code -&amp;gt; Download ZIP at the top-right of this Github page. Extract the zipped files to a directory of your choice.&lt;/p&gt; &#xA;&lt;p&gt;Afterwards, you can double-click the &lt;code&gt;ValidationCompRisks.Rproj&lt;/code&gt; file to open an Rstudio session in the directory you have just downloaded. This will ensure all file-paths called in the files are maintained. The minimal script and the .Rmd files can now be executed.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Affiliation&lt;/th&gt; &#xA;   &lt;th&gt;Role&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/danielegiardiello/&#34;&gt;Daniele Giardiello&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Netherlands Cancer Institute (NL) &lt;br&gt; Leiden University Medical Center (NL) &lt;br&gt; EURAC research (IT)&lt;/td&gt; &#xA;   &lt;td&gt;Author .Rmd files/maintainer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.lumc.nl/org/bds/medewerkers/1968807&#34;&gt;Edouard Bonneville&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Leiden University Medical Center (NL)&lt;/td&gt; &#xA;   &lt;td&gt;Author minimal .R and CSC sharing scripts/review of .Rmd scripts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.lumc.nl/org/bds/medewerkers/1216536?setlanguage=English&amp;amp;setcountry=en&#34;&gt;Nan van Geloven&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Leiden University Medical Center (NL)&lt;/td&gt; &#xA;   &lt;td&gt;Review of both .R and .Rmd scripts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.umcutrecht.nl/en/research/researchers/van-smeden-maarten-m&#34;&gt;Maarten van Smeden&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;University Medical Centre Utrecht (NL)&lt;/td&gt; &#xA;   &lt;td&gt;Review of .Rmd script&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>jfjelstul/eumaps</title>
    <updated>2023-01-03T01:37:55Z</updated>
    <id>tag:github.com,2023-01-03:/jfjelstul/eumaps</id>
    <link href="https://github.com/jfjelstul/eumaps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R package that provides easy-to-use tools for making professional-quality choropleth maps of the European Union (EU)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eumaps&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;eumaps&lt;/code&gt; makes it easy to make professional-quality choropleth maps of the European Union (EU) with only a few lines of code â€”&amp;nbsp;and without knowing anything about map-making.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;eumaps&lt;/code&gt; breaks down the process of making a map into three basic steps: (1) specifying the geography to plot, (2) specifying the color palette to use, and (3) specifying a theme that defines the aesthetics of the map.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;eumaps&lt;/code&gt; includes a wide array of intuitive customization options. It returns a standard &lt;code&gt;ggplot&lt;/code&gt; object so you can add labels or other layers.&lt;/p&gt; &#xA;&lt;p&gt;The data for the country borders comes from &lt;a href=&#34;https://www.naturalearthdata.com&#34;&gt;Natural Earth&lt;/a&gt;, a popular public domain database. This package follows Eurostat in showing Northern Cyprus as part of Cyprus. For all other country borders, this package follows Natural Earth in showing current territorial control.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/main-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/main-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the latest development version of the &lt;code&gt;eumaps&lt;/code&gt; package from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;jfjelstul/eumaps@0.1.0&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; This package depends on &lt;code&gt;sf&lt;/code&gt;, which requires &lt;code&gt;gdal&lt;/code&gt;. Follow &lt;a href=&#34;https://r-spatial.github.io/sf/&#34;&gt;these instructions&lt;/a&gt; to install &lt;code&gt;gdal&lt;/code&gt; and the &lt;code&gt;sf&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use the &lt;code&gt;eumaps&lt;/code&gt; package to make a map for a project or paper, please cite the package:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Joshua Fjelstul (2021). eumaps: Tools to make maps of the European Union. R package version 0.1.0.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The &lt;code&gt;BibTeX&lt;/code&gt; entry for the package is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Manual{,&#xA;  title = {eumaps: Tools to make maps of the European Union},&#xA;  author = {Joshua Fjelstul},&#xA;  year = {2021},&#xA;  note = {R package version 0.1.0},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Problems&lt;/h2&gt; &#xA;&lt;p&gt;If you notice an error in the data or a bug in the &lt;code&gt;R&lt;/code&gt; package, please report it &lt;a href=&#34;https://github.com/jfjelstul/eumaps/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;The main function of the &lt;code&gt;eumaps&lt;/code&gt; package is &lt;code&gt;make_map()&lt;/code&gt;. The &lt;code&gt;make_map()&lt;/code&gt; function has three inputs: an object of the class &lt;code&gt;eumaps.geography&lt;/code&gt; created by &lt;code&gt;create_geography()&lt;/code&gt; that the specifies geography to plot, an object of class &lt;code&gt;eumap.palette&lt;/code&gt; created by &lt;code&gt;create_palette()&lt;/code&gt; that specifies the color palette to use, and an object of class &lt;code&gt;eumaps.theme&lt;/code&gt; created by &lt;code&gt;create_theme()&lt;/code&gt; that specifies the theme. You can also choose a title for your map using &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;geography&lt;/code&gt; input, which needs to be an object of class &lt;code&gt;eumaps.geography&lt;/code&gt; created by &lt;code&gt;create_geography()&lt;/code&gt;, specifies the geography to plot. The appropriate geography to plot is influenced by which countries are member states on the date of the data, whether the map should center on a subset of member states, the aspect ratio of the map, how zoomed out the map should be, whether the map should include non-member states, whether there should be insets for some member states, and whether the map should use high or low resolution border data. See the section below on creating the geography for more details.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;palette&lt;/code&gt; input, which needs to be an object of class &lt;code&gt;eumaps.palette&lt;/code&gt; created by &lt;code&gt;create_palette()&lt;/code&gt;, specifies a mapping between a continuous variable and a color ramp with a fixed number of colors. It also specifies the colors and labels to use for member states with missing data, for member states where the data is not applicable, and for non-member states. See the section below on creating a color palette for more details.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;theme&lt;/code&gt; input, which needs to be an object of class &lt;code&gt;eumaps.theme&lt;/code&gt; created by &lt;code&gt;create_theme()&lt;/code&gt;, specifies the aesthetics of the map, including the style of the map border, the country borders, the title, the legend, and any insets. See the section below on creating a theme for more details.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;eumaps&lt;/code&gt; package makes it easy to customize the look of your map. The functions &lt;code&gt;create_geography()&lt;/code&gt;, &lt;code&gt;create_palette()&lt;/code&gt;, and &lt;code&gt;create_theme()&lt;/code&gt; let you customize nearly every aspect of the map.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of a map with a diverging color palette that uses the default options. This example uses the &lt;code&gt;simulate_data()&lt;/code&gt; function to randomly generate fake data. The colors are specified in an RGB format. Note that only &lt;code&gt;create_palette()&lt;/code&gt; requires you to choose some values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# simulate data&#xA;data &amp;lt;- simulate_data(&#xA;  min = -1,&#xA;  max = 1,&#xA;  seed = 2468,&#xA;)&#xA;&#xA;# make map&#xA;map &amp;lt;- make_map(&#xA;  geography = create_geography(),&#xA;  palette = create_palette(&#xA;    member_states = data$member_state,&#xA;    values = data$value,&#xA;    value_min = -1,&#xA;    value_max = 1,&#xA;    count_colors = 8,&#xA;    color_low = c(231, 76, 59),&#xA;    color_high = c(53, 151, 219),&#xA;    color_mid = c(255, 255, 255)&#xA;  ),&#xA;  theme = create_theme()&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/quick-start.png?raw=true&#34; width=&#34;75%&#34;&gt; &#xA;&lt;h2&gt;Creating the geography&lt;/h2&gt; &#xA;&lt;p&gt;The function &lt;code&gt;create_geometry()&lt;/code&gt; creates the geography for a map made by &lt;code&gt;make_map()&lt;/code&gt;. It creates a object of type &lt;code&gt;eumaps.geography&lt;/code&gt;, which you can pass to the &lt;code&gt;geography&lt;/code&gt; argument of &lt;code&gt;make_maps()&lt;/code&gt;. You can use &lt;code&gt;create_geography()&lt;/code&gt; to set a variety of options that make it easy to make the map look exactly how you want.&lt;/p&gt; &#xA;&lt;p&gt;The examples below use the following &lt;code&gt;palette&lt;/code&gt; and &lt;code&gt;theme&lt;/code&gt; objects. Germany is coded &lt;code&gt;NA&lt;/code&gt; to illustrate how missing values are treated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# simulate data&#xA;data &amp;lt;- simulate_data(&#xA;  min = -1,&#xA;  max = 1,&#xA;  missing = &#34;Germany&#34;,&#xA;  seed = 2468&#xA;)&#xA;&#xA;# create palette&#xA;palette &amp;lt;- create_palette(&#xA;  member_states = data$member_state,&#xA;  values = data$value,&#xA;  value_min = -1,&#xA;  value_max = 1,&#xA;  count_colors = 8,&#xA;  color_low = c(231, 76, 59),&#xA;  color_high = c(53, 151, 219),&#xA;  color_mid = c(255, 255, 255)&#xA;)&#xA;&#xA;# create theme&#xA;theme &amp;lt;- create_theme()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And each map is made using the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# make map&#xA;map &amp;lt;- make_map(&#xA;  geography = geography,&#xA;  palette = palette,&#xA;  theme = theme,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only thing that is changing is the &lt;code&gt;geography&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;h3&gt;Choosing member states&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;create_geography()&lt;/code&gt; will automatically center the map on all countries that are member states on the date indicated by the argument &lt;code&gt;date&lt;/code&gt;. This way, you never have to specify the bounds of the map, which can be complicated. You also don&#39;t have to know the accession dates of the member states. By default, &lt;code&gt;date&lt;/code&gt; is set to today&#39;s date. When you use &lt;code&gt;date&lt;/code&gt;, data is not plotted for countries that aren&#39;t member states on that date. You can use the optional argument &lt;code&gt;subset&lt;/code&gt; to center the map on a subset of member states. Data is still plotted for member states that are not in the subset.&lt;/p&gt; &#xA;&lt;p&gt;The first example is centered on all current member states, the second is centered on all member states on &lt;code&gt;2000-01-01&lt;/code&gt;, and the third is centered on all member states on &lt;code&gt;1960-01-01&lt;/code&gt;, and the fourth is centered on a subset containing the original member states (France, Germany, Italy, Belgium, the Netherlands, and Luxembourg). The difference between the third and fourth examples is that, in the third example, data is plotted just for countries that are member states on &lt;code&gt;1960-01-01&lt;/code&gt;, whereas in the fourth example, data is plotted for all current member states (because the default value of &lt;code&gt;date&lt;/code&gt; is today&#39;s date), but the map is centered on a subset of them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example 1 (using the default values)&#xA;geography &amp;lt;- create_geography()&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  date = &#34;2000-01-01&#34;&#xA;)&#xA;&#xA;# example 3 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  date = &#34;1960-01-01&#34;&#xA;)&#xA;&#xA;# example 4 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  subset = c(&#xA;    &#34;France&#34;, &#34;Germany&#34;, &#34;Italy&#34;,&#xA;    &#34;Belgium&#34;, &#34;Netherlands&#34;, &#34;Luxembourg&#34;&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/member-states-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/member-states-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/member-states-3.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/member-states-4.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;The aspect ratio&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;aspect_ratio&lt;/code&gt; to specify the aspect ratio of the map. A value greater than &lt;code&gt;1&lt;/code&gt; makes a map that is wider than it is tall and a value less than &lt;code&gt;1&lt;/code&gt; makes a map that is taller than it is wide. The minimum value is &lt;code&gt;0.5&lt;/code&gt; and the maximum value is &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first example shows an aspect ratio of &lt;code&gt;0.8&lt;/code&gt;, and the second shows an aspect ratio of &lt;code&gt;1.2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example 1 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  aspect_ratio = 0.8&#xA;)&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  aspect_ratio = 1.2&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/aspect-ratio-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/aspect-ratio-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Zooming&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;zoom&lt;/code&gt; to choose a zoom factor. A value of &lt;code&gt;1&lt;/code&gt; focuses the map tightly around the selected member states, and values less than &lt;code&gt;1&lt;/code&gt; zoom out the map. The minimum value is &lt;code&gt;0.5&lt;/code&gt;. The default is &lt;code&gt;0.9&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first example shows a zoom of &lt;code&gt;0.8&lt;/code&gt;, and the second shows a zoom of &lt;code&gt;0.7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example 1 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  zoom = 0.8&#xA;)&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  zoom = 0.7&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/zoom-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/zoom-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Showing non-member states&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;show_non_member_states&lt;/code&gt; to choose whether or not to plot non-member states. The default value is &lt;code&gt;TRUE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first example shows non-member states, and the second does not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example 1 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  show_non_member_states = TRUE&#xA;)&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  show_non_member_states = FALSE&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/non-member-states-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/non-member-states-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Insets&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;insets&lt;/code&gt; to create insets for member states whose values would be hard to read otherwise. By default, &lt;code&gt;insets&lt;/code&gt; equals &lt;code&gt;NULL&lt;/code&gt;, in which case no insets are created. You can provide a vector of member state names to create insets for those member states. You can create insets for Luxembourg, Malta, and Cyprus. The insets will appear in the top right corner of the map in the order given by the vector.&lt;/p&gt; &#xA;&lt;p&gt;The first example includes insets for Luxembourg and Malta, and the second includes insets for Luxembourg, Malta, and Cyprus.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example 1 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  insets = c(&#34;Luxembourg&#34;, &#34;Malta&#34;)&#xA;)&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  insets = c(&#34;Luxembourg&#34;, &#34;Cyprus&#34;, &#34;Malta&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/insets-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/insets-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Resolution&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;resolution&lt;/code&gt; to choose between low or high resolution border data. The default value is &lt;code&gt;high&lt;/code&gt; and the alternative is &lt;code&gt;low&lt;/code&gt;. The map will take longer to render if you use the high resolution data. The function always uses high resolution border data for the insets.&lt;/p&gt; &#xA;&lt;p&gt;The first example uses the high resolution border data, and the second uses the low resolution data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# example 1 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  resolution = &#34;high&#34;&#xA;)&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;geography &amp;lt;- create_geography(&#xA;  resolution = &#34;low&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/resolution-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/resolution-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Creating the palette&lt;/h2&gt; &#xA;&lt;p&gt;The function &lt;code&gt;create_palette()&lt;/code&gt; creates the color palette for a map made by &lt;code&gt;make_map()&lt;/code&gt;. It creates a object of type &lt;code&gt;eumaps.geography&lt;/code&gt;, which you can pass to the &lt;code&gt;palette&lt;/code&gt; argument of &lt;code&gt;make_maps()&lt;/code&gt;. An &lt;code&gt;eumaps.palette&lt;/code&gt; object creates a mapping between a continuous variable and a color ramp with a fixed number of colors. It also defines the colors and labels to use for member states with missing data, member states where the data is not applicable, and non-member states.&lt;/p&gt; &#xA;&lt;p&gt;Note that an &lt;code&gt;eumaps.palette&lt;/code&gt; object only defines the colors used for shading countries on the map. It doesn&#39;t define the background color (i.e., the color of the water), the color of country borders, or the color of the border around the map, These are defined using &lt;code&gt;create_theme()&lt;/code&gt;, which returns an &lt;code&gt;eumaps.theme&lt;/code&gt; object that you can pass to the &lt;code&gt;theme&lt;/code&gt; argument of &lt;code&gt;make_map()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;create_palette()&lt;/code&gt; creates a mapping between a continuous variable and a color ramp with a fixed number of colors. First, you need to provide two vectors: a vector that contains member state names (using the argument &lt;code&gt;member_states&lt;/code&gt;) and a vector that contains values corresponding to each member state to be used for shading the member states (using &lt;code&gt;values&lt;/code&gt;). Member state names should not be repeated. You can run &lt;code&gt;list_member_states()&lt;/code&gt; to get a list of valid member state names.&lt;/p&gt; &#xA;&lt;p&gt;You can also code certain member states as not applicable (using &lt;code&gt;not_applicable&lt;/code&gt;). This is useful in many applications. For example, if you&#39;re making a map of the Eurozone, you may only want to plot data for Eurozone members (some of which could have missing data), but still want to visually differentiate between member states that are not members of the Eurozone and countries that are not EU member states. Here, the data would not be applicable for member states that are not members of the Eurozone.&lt;/p&gt; &#xA;&lt;p&gt;Second, you need to specify minimum and maximum data values (&lt;code&gt;value_min&lt;/code&gt; and &lt;code&gt;value_max&lt;/code&gt;). These values should be rounded to sensible values, and all of the data points that you want to plot should fall within this range. The function asks you to specify these yourself, instead of calculating the minimum and maximum values in the data (provided via the &lt;code&gt;values&lt;/code&gt; argument), because having non-rounded values as the limits of the color ramp doesn&#39;t look good. The bounds should either be the theoretical range of the variable you&#39;re plotting or rounded values close to the in-sample minimum and maximum values.&lt;/p&gt; &#xA;&lt;p&gt;Third, you need to specify a low color (&lt;code&gt;color_low&lt;/code&gt;) and a high color (&lt;code&gt;color_high&lt;/code&gt;) for the color ramp. You also have the option to specify a middle color (&lt;code&gt;color_mid&lt;/code&gt;), which lets you to create a diverging color palette. You can speciify colors in an RGB format as a vector, like &lt;code&gt;c(255, 255, 255)&lt;/code&gt;, or in a hex format as a string, like &lt;code&gt;&#34;#FFFFFF&#34;&lt;/code&gt;. The leading &lt;code&gt;#&lt;/code&gt; is optional. See the documentation for the &lt;code&gt;convert_color()&lt;/code&gt; utility function for more details about how you can specify colors.&lt;/p&gt; &#xA;&lt;p&gt;Fourth, you need to specify the number of colors in the color ramp (&lt;code&gt;count_numbers&lt;/code&gt;). There is a limit of 10 colors. Any more than this, and it can become hard to tell them apart, particularly for a linear color ramp. The number of colors in the color ramp determines the number of bins that the data will be divided into. The number of bins is always the same as the number of colors. The break points between the bins will be evenly spaced between the minimum and maximum data values you provide. There is always one fewer break points than the number of colors.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;create_palette()&lt;/code&gt; to specify the colors to use for member states with missing data (&lt;code&gt;color_missing&lt;/code&gt;), for member states where the data is not applicable (&lt;code&gt;color_not_applicable&lt;/code&gt;), and for non-member states (&lt;code&gt;color_non_member_state&lt;/code&gt;), along with the labels to use for these three categories in the map legend (&lt;code&gt;label_missing&lt;/code&gt;, &lt;code&gt;label_not_applicable&lt;/code&gt;, and &lt;code&gt;label_non_member_state&lt;/code&gt;). All of these arguments have sensible default values (i.e., shades of gray), so you don&#39;t have to specify them every time.&lt;/p&gt; &#xA;&lt;p&gt;These three colors only appear in the legend when applicable. In other words, &lt;code&gt;color_missing&lt;/code&gt; doesn&#39;t appear in the legend if there are no missing values, &lt;code&gt;color_not_applicable&lt;/code&gt; doesn&#39;t appear if &lt;code&gt;not_applicable&lt;/code&gt; is set to &lt;code&gt;NULL&lt;/code&gt;, and &lt;code&gt;color_non_member_state&lt;/code&gt; doesn&#39;t appear if non-member states are not plotted (i.e., if &lt;code&gt;show_non_member_states&lt;/code&gt; in &lt;code&gt;create_geometry()&lt;/code&gt; is set to &lt;code&gt;FALSE&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here are two examples of how to create a color palette. These maps only show data for Eurozone members, making use of the &lt;code&gt;not_applicable&lt;/code&gt; argument. The first example uses a linear color ramp, and the second example uses a divergant color ramp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data &amp;lt;- simulate_data(&#xA;  min = 0,&#xA;  max = 1,&#xA;  missing = &#34;Germany&#34;,&#xA;  seed = 1357&#xA;)&#xA;&#xA;# example 1 (using the default values for all other arguments)&#xA;map &amp;lt;- make_map(&#xA;  geography = create_geography(&#xA;    insets = c(&#34;Luxembourg&#34;, &#34;Cyprus&#34;, &#34;Malta&#34;)&#xA;  ),&#xA;  palette = create_palette(&#xA;    member_states = data$member_state,&#xA;    values = data$value,&#xA;    not_applicable = c(&#xA;      &#34;Bulgaria&#34;, &#34;Croatia&#34;, &#34;Czech Rebpulic&#34;,&#xA;      &#34;Denmark&#34;, &#34;Hungary&#34;, &#34;Poland&#34;,&#xA;      &#34;Romania&#34;, &#34;Sweden&#34;&#xA;    ),&#xA;    value_min = 0,&#xA;    value_max = 1,&#xA;    count_colors = 8,&#xA;    color_low = c(226, 240, 249),&#xA;    color_high = c(53, 151, 219),&#xA;    label_not_applicable = &#34;Not a member of the Eurozone&#34;&#xA;  ),&#xA;  theme = create_theme()&#xA;)&#xA;&#xA;# simulate data&#xA;data &amp;lt;- simulate_data(&#xA;  min = -1,&#xA;  max = 1,&#xA;  missing = &#34;Germany&#34;,&#xA;  seed = 1357,&#xA;)&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;map &amp;lt;- make_map(&#xA;  geography = create_geography(&#xA;    insets = c(&#34;Luxembourg&#34;, &#34;Cyprus&#34;, &#34;Malta&#34;)&#xA;  ),&#xA;  palette = create_palette(&#xA;    member_states = data$member_state,&#xA;    values = data$value,&#xA;    not_applicable = c(&#xA;      &#34;Bulgaria&#34;, &#34;Croatia&#34;, &#34;Czech Rebpulic&#34;,&#xA;      &#34;Denmark&#34;, &#34;Hungary&#34;, &#34;Poland&#34;,&#xA;      &#34;Romania&#34;, &#34;Sweden&#34;&#xA;    ),&#xA;    value_min = -1,&#xA;    value_max = 1,&#xA;    count_colors = 8,&#xA;    color_low = c(231, 76, 59),&#xA;    color_high = c(53, 151, 219),&#xA;    color_mid = c(255, 255, 255),&#xA;    label_not_applicable = &#34;Not a member of the Eurozone&#34;&#xA;  ),&#xA;  theme = create_theme()&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/palette-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/palette-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Creating the theme&lt;/h2&gt; &#xA;&lt;p&gt;The function &lt;code&gt;create_theme()&lt;/code&gt; creates the theme for a map made by &lt;code&gt;make_map()&lt;/code&gt;. It creates a object of type &lt;code&gt;eumaps.geography&lt;/code&gt;, which you can pass to the &lt;code&gt;theme&lt;/code&gt; argument of &lt;code&gt;make_maps()&lt;/code&gt;. An &lt;code&gt;eumaps.theme&lt;/code&gt; object defines the aesthetics of the map, including the style of the map border, the country borders, the title, the legend, and any insets.&lt;/p&gt; &#xA;&lt;p&gt;See the documentation for details on all available options.&lt;/p&gt; &#xA;&lt;p&gt;Here are two examples of how to create a theme. The first example uses the default options, and the second example uses custom options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# simulate data&#xA;data &amp;lt;- simulate_data(&#xA;  min = -1,&#xA;  max = 1,&#xA;  seed = 1357&#xA;)&#xA;&#xA;# example 1 (using the default values for all other arguments)&#xA;map &amp;lt;- make_map(&#xA;  geography = create_geography(),&#xA;  palette = create_palette(&#xA;    member_states = data$member_state,&#xA;    values = data$value,&#xA;    value_min = -1,&#xA;    value_max = 1,&#xA;    count_colors = 8,&#xA;    color_low = c(231, 76, 59),&#xA;    color_high = c(53, 151, 219),&#xA;    color_mid = c(255, 255, 255),&#xA;  ),&#xA;  theme = create_theme()&#xA;)&#xA;&#xA;# example 2 (using the default values for all other arguments)&#xA;map &amp;lt;- make_map(&#xA;  geography = create_geography(),&#xA;  palette = create_palette(&#xA;    member_states = data$member_state,&#xA;    values = data$value,&#xA;    value_min = -1,&#xA;    value_max = 1,&#xA;    count_colors = 8,&#xA;    color_low = c(231, 76, 59),&#xA;    color_high = c(53, 151, 219),&#xA;    color_mid = c(255, 255, 255),&#xA;    color_non_member_state = c(0.9, 0.9, 0.9)&#xA;  ),&#xA;  theme = create_theme(&#xA;    color_map_border = c(1, 1, 1),&#xA;    width_map_border = 2,&#xA;    color_country_borders = c(1, 1, 1),&#xA;    width_country_borders = 0.2,&#xA;    space_before_legend = 32,&#xA;    size_legend_keys = 18,&#xA;    space_between_legend_keys = 12&#xA;  )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/theme-1.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/jfjelstul/eumaps/raw/master/examples/theme-2.png?raw=true&#34; width=&#34;45%&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>