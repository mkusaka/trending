<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-12T02:33:06Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JBGruber/askgpt</title>
    <updated>2023-04-12T02:33:06Z</updated>
    <id>tag:github.com,2023-04-12:/JBGruber/askgpt</id>
    <link href="https://github.com/JBGruber/askgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A chat interface build on top of OpenAI&#39;s API endpoints&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;askgpt &lt;img src=&#34;https://raw.githubusercontent.com/JBGruber/askgpt/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-green.svg?sanitize=true&#34; alt=&#34;Lifecycle: stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JBGruber/askgpt/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/JBGruber/askgpt/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/JBGruber/askgpt?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/JBGruber/askgpt/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=askgpt&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/askgpt&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=askgpt&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/askgpt&#34; alt=&#34;CRAN_Download_Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;You’re new to R? You don’t quite understand the code you copied from that tutorial? You get error messages that make no sense to you? Don’t worry, just &lt;em&gt;askgpt&lt;/em&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;askgpt&lt;/code&gt; is basically ChatGPT but from R (technically, it sends prompts to &lt;a href=&#34;https://openai.com/api/&#34;&gt;OpenAI’s API&lt;/a&gt; directly from R). It also has some additional functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prompt &lt;em&gt;“What is wrong with my last command?”&lt;/em&gt; (or &lt;em&gt;“help!”&lt;/em&gt;) to get help on the last error R emitted&lt;/li&gt; &#xA; &lt;li&gt;Use the RStudio addin to comment, annotate or explain highlighted code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See more under &lt;a href=&#34;https://raw.githubusercontent.com/JBGruber/askgpt/main/#usage&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install release version of askgpt like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;askgpt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version of askgpt like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;JBGruber/askgpt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Log In&lt;/h2&gt; &#xA;&lt;p&gt;You can log into OpenAI’s API running the dedicated &lt;code&gt;login()&lt;/code&gt; function or just ask something with &lt;code&gt;askgpt()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(askgpt)&#xA;login()&#xA;#&amp;gt; ℹ It looks like you have not provided an API key yet. Let me guide you through the process:&#xA;#&amp;gt;   1. Go to &amp;lt;https://platform.openai.com/account/api-keys&amp;gt;&#xA;#&amp;gt;   2. (Log into your account if you haven&#39;t done so yet)&#xA;#&amp;gt;   3. On the site, click the button + Create new secret key&#xA;#&amp;gt;   to create an API key&#xA;#&amp;gt;   4. Copy this key into R/RStudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div class=&#34;figure&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/JBGruber/askgpt/main/vignettes/figs/key.png&#34; alt=&#34;Copy the API key from OpenAI&#39;s website&#34; width=&#34;100%&#34;&gt; &#xA; &lt;p class=&#34;caption&#34;&gt; Copy the API key from OpenAI’s website &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;figure&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/JBGruber/askgpt/main/vignettes/figs/key-rs.png&#34; alt=&#34;And paste it into RStudio&#34; width=&#34;100%&#34;&gt; &#xA; &lt;p class=&#34;caption&#34;&gt; And paste it into RStudio &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;You will not need to do this again after the first time. (Technical detail: This will store an encrypted version of your key in the directory returned by &lt;code&gt;rappdirs::user_cache_dir(&#34;askgpt&#34;)&lt;/code&gt;.) If your old API key does not work any more, you can store a new one with: &lt;code&gt;login(force_refresh = TRUE)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To enable error logging (which you need if you want askgpt to explain errors to you) first run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;log_init()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After this, the key phrase &lt;strong&gt;“What is wrong with my last command?”&lt;/strong&gt; (or just “help!”) will make &lt;code&gt;askgpt&lt;/code&gt; look up your last command and error message and return some help for you. The other important key phrase is &lt;strong&gt;“Can you elaborate on that?”&lt;/strong&gt; (or just “What?”), which will elaborate on the previous answer. You can ask basically any question you want though:&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/23524101/220632749-da59fe90-d6a2-4ebd-bbfe-d1164e8a7944.mp4&#34; controls=&#34;&#34;&gt;&#xA;  &lt;a href=&#34;https://user-images.githubusercontent.com/23524101/220632749-da59fe90-d6a2-4ebd-bbfe-d1164e8a7944.mp4&#34;&gt;some examples&lt;/a&gt;&#xA; &lt;/video&gt; &#xA; &lt;figcaption aria-hidden=&#34;true&#34;&gt;&#xA;  some examples&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;p&gt;You can configure how &lt;code&gt;askgpt&lt;/code&gt; makes that start with &lt;code&gt;askgpt_*&lt;/code&gt;. For example, to use a different model to use in &lt;code&gt;askgpt()&lt;/code&gt; use &lt;code&gt;options(askgpt_chat_model = &#34;gpt-3.5-turbo-0301&#34;)&lt;/code&gt;. If you use the completions instead of the chat API (&lt;code&gt;chat = FALSE&lt;/code&gt; in &lt;code&gt;askgpt()&lt;/code&gt;) use &lt;code&gt;options(askgpt_completions_model = &#34;text-curie-001&#34;)&lt;/code&gt;. It does not matter if the API parameter is listed in the function or not. All are used. See the complete list &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://platform.openai.com/docs/api-reference/completions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The most important setting, however, is &lt;code&gt;askgpt_config&lt;/code&gt;. This can be used to configure the chat using plain English:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(askgpt_config = &#34;I&#39;m 8 years old, please explain things easily&#34;)&#xA;askgpt(&#34;What is an R function?&#34;)&#xA;#&amp;gt; &#xA;#&amp;gt; ── Answer ──────────────────────────────────────────────────────────────────────&#xA;#&amp;gt; An R function is like giving your friend a set of instructions to perform a&#xA;#&amp;gt; particular task. In R programming, a function is a set of instructions or steps&#xA;#&amp;gt; that is given a name, and when you call that name, the function will perform&#xA;#&amp;gt; those instructions. A function can take information or inputs, do something&#xA;#&amp;gt; with those inputs (like adding or subtracting), and then give the result back&#xA;#&amp;gt; as output.&#xA;#&amp;gt; &#xA;#&amp;gt; For example, think about giving your friend the instructions to make a peanut&#xA;#&amp;gt; butter sandwich. The instructions might be:&#xA;#&amp;gt; &#xA;#&amp;gt; 1. Take two slices of bread 2. Spread peanut butter on one slice 3. Spread&#xA;#&amp;gt; jelly on the other slice 4. Put the two slices together&#xA;#&amp;gt; &#xA;#&amp;gt; In R, a function might take a number (like 5) and add 1 to it, and then return&#xA;#&amp;gt; the result (which would be 6).&#xA;#&amp;gt; &#xA;#&amp;gt; Functions in R are used to make code easier to use, understand, and reuse. They&#xA;#&amp;gt; can also help programmers write complex and efficient programs.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>DSCI-310/dsci-310-group-09-pkg</title>
    <updated>2023-04-12T02:33:06Z</updated>
    <id>tag:github.com,2023-04-12:/DSCI-310/dsci-310-group-09-pkg</id>
    <link href="https://github.com/DSCI-310/dsci-310-group-09-pkg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ln.knn.regression&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/DSCI-310/dsci-310-group-09-pkg&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/DSCI-310/dsci-310-group-09-pkg/branch/main/graph/badge.svg?token=gOMgyT71QL&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of &lt;code&gt;ln.knn.regression&lt;/code&gt; is to assist in creating a regression analysis project from start to finish. It includes &lt;strong&gt;R&lt;/strong&gt; functions that help to explore, summarize and visualize the data. It also includes functions that directly build and visualize linear and k-nn models. Additionally, it contains functions that can test the model’s error and accuracy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ln.knn.regression&lt;/code&gt; is similar to &lt;a href=&#34;https://www.tidymodels.org/packages/&#34;&gt;&lt;code&gt;tidymodels&lt;/code&gt;&lt;/a&gt; which is a collection of packages for modeling and machine learning using &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;&lt;code&gt;tidyverse&lt;/code&gt;&lt;/a&gt; principles. &lt;code&gt;ln.knn.regression&lt;/code&gt; imports many of the same packages that &lt;code&gt;tidymodels&lt;/code&gt; and &lt;code&gt;tidyverse&lt;/code&gt; use, such as &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://parsnip.tidymodels.org/&#34;&gt;&lt;code&gt;parsnip&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://rsample.tidymodels.org/&#34;&gt;&lt;code&gt;rsample&lt;/code&gt;&lt;/a&gt; and more. Like &lt;code&gt;tidymodels&lt;/code&gt;, &lt;code&gt;ln.knn.regression&lt;/code&gt; contains functions for building models and performing data analysis. However, &lt;code&gt;ln.knn.regression&lt;/code&gt; is a smaller and more simple package that is used specifically for regression modeling and analysis.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of &lt;code&gt;ln.knn.regression&lt;/code&gt; from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;DSCI-310/dsci-310-group-09-pkg&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bar_graph()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hist_plot()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;knn_model()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;linearmodel()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;model_rmspe()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scatter_plot()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;summarize_column()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is a basic example which shows you how to explore the data and build a linear regression model.&lt;/p&gt; &#xA;&lt;h4&gt;1. EDA&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ln.knn.regression)&#xA;&#xA;summarize_column(mtcars, mtcars$mpg)&#xA;#&amp;gt;       mean  med       sd&#xA;#&amp;gt; 1 20.09062 19.2 6.026948&#xA;&#xA;hist_plot(mtcars, mpg, &#34;MPG&#34;, &#34;Count&#34;, &#34;Histogram for MPG of Cars&#34;, 10)&#xA;#&amp;gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/DSCI-310/dsci-310-group-09-pkg/main/man/figures/README-EDA-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h4&gt;2. Model Building&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars_model &amp;lt;- linearmodel(recipes::recipe(mpg ~ hp, mtcars_training), mtcars_training)&#xA;mtcars_model&#xA;#&amp;gt; ══ Workflow [trained] ══════════════════════════════════════════════════════════&#xA;#&amp;gt; Preprocessor: Recipe&#xA;#&amp;gt; Model: linear_reg()&#xA;#&amp;gt; &#xA;#&amp;gt; ── Preprocessor ────────────────────────────────────────────────────────────────&#xA;#&amp;gt; 0 Recipe Steps&#xA;#&amp;gt; &#xA;#&amp;gt; ── Model ───────────────────────────────────────────────────────────────────────&#xA;#&amp;gt; &#xA;#&amp;gt; Call:&#xA;#&amp;gt; stats::lm(formula = ..y ~ ., data = data)&#xA;#&amp;gt; &#xA;#&amp;gt; Coefficients:&#xA;#&amp;gt; (Intercept)           hp  &#xA;#&amp;gt;    28.36292     -0.05863&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Visualizations&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;scatter_plot(mtcars_training, &#xA;             hp, &#xA;             mpg, &#xA;             &#34;Horse Power (HP)&#34;, &#xA;             &#34;Miles Per Gallon (mpg)&#34;,&#xA;             &#34;Best Fit Line for MPG vs HP&#34;, &#xA;             15,&#xA;             &#34;lm&#34;) &#xA;#&amp;gt; `geom_smooth()` using formula = &#39;y ~ x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/DSCI-310/dsci-310-group-09-pkg/main/man/figures/README-visualization-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h4&gt;4. Finding model’s accuracy&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars_rmspe &amp;lt;- model_rmspe(mtcars_model, mtcars_testing, &#34;mpg&#34;)&#xA;mtcars_rmspe&#xA;#&amp;gt; [1] 4.99694&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells us that the model has a prediction error of around 5 miles per gallon when tested on data it has not seen before.&lt;/p&gt; &#xA;&lt;h2&gt;Further Resources&lt;/h2&gt; &#xA;&lt;p&gt;For a detailed tutorial on how to use each of the functions in &lt;code&gt;ln.knn.regression&lt;/code&gt;, refer to our &lt;a href=&#34;https://github.com/DSCI-310/dsci-310-group-09-pkg/raw/main/vignettes/ln_knn_regression-vignette.Rmd&#34;&gt;Vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To view an example of when this package was used for an analysis, please view this &lt;a href=&#34;https://github.com/jennalenoble/dsci-310-group-09&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate contributions to the &lt;code&gt;ln.knn.regression&lt;/code&gt; package. Please refer to our &lt;a href=&#34;https://github.com/DSCI-310/dsci-310-group-09-pkg/raw/main/CONTRIBUTING.md&#34;&gt;Contributing document&lt;/a&gt; and &lt;a href=&#34;https://github.com/DSCI-310/dsci-310-group-09-pkg/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The software provided in this project is offered under the &lt;a href=&#34;https://opensource.org/license/mit/&#34;&gt;MIT open source license&lt;/a&gt;. Refer to the &lt;a href=&#34;https://github.com/DSCI-310/dsci-310-group-09-pkg/raw/main/LICENSE.md&#34;&gt;license file&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>DESUC/30DayChartChallenge2023</title>
    <updated>2023-04-12T02:33:06Z</updated>
    <id>tag:github.com,2023-04-12:/DESUC/30DayChartChallenge2023</id>
    <link href="https://github.com/DESUC/30DayChartChallenge2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;30DayChartChallenge2023&lt;/h1&gt; &#xA;&lt;p&gt;Participación en #30DayChartChallenge 2023 (ver: &lt;a href=&#34;https://twitter.com/30DayChartChall&#34;&gt;https://twitter.com/30DayChartChall&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;En la carpeta &#34;R&#34; encuentras los script de los gráficos subidos según día.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;En la carpeta &#34;input&#34; puedes encontrar las bases de datos, a menos que éstas sean públicas. De ser así en el script encontrarás un link a ellas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;En la carpeta &#34;output&#34; encuentras las imágenes de los gráficos.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Equipo &lt;a href=&#34;http://sociologia.uc.cl/desuc/quienes-somos-desuc/&#34;&gt;DESUC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nuestro blog &lt;a href=&#34;https://blog.desuc.cl/&#34;&gt;aquí&lt;/a&gt; y lo que hacemos &lt;a href=&#34;https://blog.desuc.cl/incidencia.html&#34;&gt;aquí&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 1: Part-to-whole&lt;/h3&gt; &#xA;&lt;p&gt;Este tipo de gráficos que se engloban en los &#34;part-to-whole&#34; permiten mostrar partes dentro de una variable. Aquí quisimos mostrar datos de felicidad para Chile desde World Values Survey.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;https://ourworldindata.org/happiness-and-life-satisfaction&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/01-part-to-whole.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Cristina Marchant.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day1_part_to_whole_1.png&#34; alt=&#34;Día 1&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 2: waffle&lt;/h3&gt; &#xA;&lt;p&gt;Este tipo de gráficos permiten mostrar mediante un pictograma la distribución de ciertos datos. Aquí quisimos mostrar información respecto del envejecimiento poblacional en Chile.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;https://ourworldindata.org/age-structure&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/02-waffle.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Cristina Marchant.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day2_waffle_1.png&#34; alt=&#34;Día 2&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 3: Fauna/flora&lt;/h3&gt; &#xA;&lt;p&gt;En este gráfico se utilizaron datos del Sistema de Información Digital para el Control de Operaciones de CONAF, con el fin de observar las hectáreas afectadas por incendios forestales en Chile.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/input/incendios_forestales_2023.csv&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/03-flora_fauna.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Josefa Guerra.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day3_flora_fauna.png&#34; alt=&#34;Día 3&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 4: Historical&lt;/h3&gt; &#xA;&lt;p&gt;Este tipo de gráficos permiten mostrar datos de secuencias históricas. Seguimos en la demografía mostrando datos respecto a la caída de matrimonios en Chile en comparación con otros países a lo largo del tiempo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;https://ourworldindata.org/marriages-and-divorces&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/04-historical.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Cristina Marchant.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day4_historical_1.png&#34; alt=&#34;Día 4&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 5: Slopes&lt;/h3&gt; &#xA;&lt;p&gt;Este tipo de gráficos permiten mostrar variaciones a través de los años. El día de hoy nos centramos en el cambio que ha tenido la percepción del aborto en Chile en los últimos ocho años.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/input/Datos_aborto_bicentenario.xlsx&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/05-slopes.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Jonatan Salazar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day5_slopes_1.png&#34; alt=&#34;Día 5&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 6: Data day OWID&lt;/h3&gt; &#xA;&lt;p&gt;Este día era el último de la serie de &#34;distributions&#34;, y correspondía a un gráfico con datos de Our World in Data &lt;a href=&#34;https://ourworldindata.org/&#34;&gt;OWID&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;https://ourworldindata.org/migration&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/06-data-day-OWID.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Vicky Rojas.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day_6_data_day_OWID_1.png&#34; alt=&#34;Día 5&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 7: Hazards&lt;/h3&gt; &#xA;&lt;p&gt;Hoy empezaban los gráficos de distribuciones, sin embargo, nos quedamos atrás. Pero tomamos en consideración la idea de &#34;riesgos&#34;, para graficar los casos policiales entre 2021 y 2022.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;http://cead.spd.gov.cl/wp-content/uploads/file-manager/Presentaci%C3%B3n-Estad%C3%ADsticas-anual-2022.pdf&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/07-hazards.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Vicky Rojas.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day_7_hazards_1.png&#34; alt=&#34;Día 7&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 8: Humans&lt;/h3&gt; &#xA;&lt;p&gt;Hoy continuamos con el tema &#34;humanos&#34; y el tipo de gráfico de distribuciones.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Datos para la elaboración del gráfico disponibles &lt;a href=&#34;https://ourworldindata.org/future-population-growth&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/08-humans.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Cristina Marchant.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day8_humans_1.png&#34; alt=&#34;Día 8&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Día 9: Híbrido&lt;/h3&gt; &#xA;&lt;p&gt;Este gráfico utiliza la librería &lt;code&gt;tuber&lt;/code&gt; que nos permite descargar la información de canales y playlist de YouTube. Con esta información, construímos un gráfico que muestra el número de visitas/reproducciones que hay en el canal de NewJeans y los videos de &lt;strong&gt;NewJeans&lt;/strong&gt; en el canal de HYBE LABELS. Dejando aquellos videos con más de 10M de reproducciones, es posible observar los videos más visitados de este nuevo grupo de kpop. El concepto híbrido se pensó en la combinación de &lt;code&gt;ggplot2&lt;/code&gt; e imágenes en png.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Código disponible &lt;a href=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/R/10-hi%CC%81brido.R&#34;&gt;aquí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Autoría Soledad Araya.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/DESUC/30DayChartChallenge2023/main/output/day10_hibrido.png&#34; alt=&#34;Día 10&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>