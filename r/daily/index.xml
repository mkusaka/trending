<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-12T01:46:14Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rstudio/vetiver-r</title>
    <updated>2023-06-12T01:46:14Z</updated>
    <id>tag:github.com,2023-06-12:/rstudio/vetiver-r</id>
    <link href="https://github.com/rstudio/vetiver-r" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Version, share, deploy, and monitor models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vetiver &lt;a href=&#34;https://rstudio.github.io/vetiver-r/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/vetiver-r/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/vetiver-r/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/vetiver-r/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=vetiver&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/vetiver&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/rstudio/vetiver-r?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rstudio/vetiver-r/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Vetiver, the oil of tranquility, is used as a stabilizing ingredient in perfumery to preserve more volatile fragrances.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The goal of vetiver is to provide fluent tooling to version, share, deploy, and monitor a trained model. Functions handle both recording and checking the model’s input data prototype, and predicting from a remote API endpoint. The vetiver package is extensible, with generics that can support many kinds of models, and available for both R and Python. To learn more about vetiver, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the documentation at &lt;a href=&#34;https://vetiver.rstudio.com/&#34;&gt;https://vetiver.rstudio.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the Python package at &lt;a href=&#34;https://rstudio.github.io/vetiver-python/&#34;&gt;https://rstudio.github.io/vetiver-python/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use vetiver with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.tidymodels.org/&#34;&gt;tidymodels&lt;/a&gt; workflow (including &lt;a href=&#34;https://stacks.tidymodels.org/&#34;&gt;stacks&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://topepo.github.io/caret/&#34;&gt;caret&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlr3.mlr-org.com/&#34;&gt;mlr3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xgboost.readthedocs.io/en/latest/R-package/&#34;&gt;XGBoost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=ranger&#34;&gt;ranger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stat.ethz.ch/R-manual/R-patched/library/stats/html/lm.html&#34;&gt;&lt;code&gt;lm()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-patched/library/stats/html/glm.html&#34;&gt;&lt;code&gt;glm()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GAMS fit with &lt;a href=&#34;https://CRAN.R-project.org/package=mgcv&#34;&gt;mgcv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tensorflow.rstudio.com/&#34;&gt;keras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://torch.mlverse.org/&#34;&gt;the luz API for torch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of vetiver from &lt;a href=&#34;https://CRAN.R-project.org&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;vetiver&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the development version from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;rstudio/vetiver-r&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;vetiver_model()&lt;/code&gt; object collects the information needed to store, version, and deploy a trained model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(parsnip)&#xA;library(workflows)&#xA;data(Sacramento, package = &#34;modeldata&#34;)&#xA;&#xA;rf_spec &amp;lt;- rand_forest(mode = &#34;regression&#34;)&#xA;rf_form &amp;lt;- price ~ type + sqft + beds + baths&#xA;&#xA;rf_fit &amp;lt;- &#xA;    workflow(rf_form, rf_spec) %&amp;gt;%&#xA;    fit(Sacramento)&#xA;&#xA;library(vetiver)&#xA;v &amp;lt;- vetiver_model(rf_fit, &#34;sacramento_rf&#34;)&#xA;v&#xA;#&amp;gt; &#xA;#&amp;gt; ── sacramento_rf ─ &amp;lt;bundled_workflow&amp;gt; model for deployment &#xA;#&amp;gt; A ranger regression modeling workflow using 4 features&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;version&lt;/strong&gt; and &lt;strong&gt;share&lt;/strong&gt; your &lt;code&gt;vetiver_model()&lt;/code&gt; by choosing a &lt;a href=&#34;https://pins.rstudio.com&#34;&gt;pins&lt;/a&gt; “board” for it, including a local folder, Posit Connect, Amazon S3, and more.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(pins)&#xA;model_board &amp;lt;- board_temp()&#xA;model_board %&amp;gt;% vetiver_pin_write(v)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;deploy&lt;/strong&gt; your pinned &lt;code&gt;vetiver_model()&lt;/code&gt; via a &lt;a href=&#34;https://www.rplumber.io/&#34;&gt;Plumber API&lt;/a&gt;, which can be &lt;a href=&#34;https://www.rplumber.io/articles/hosting.html&#34;&gt;hosted in a variety of ways&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(plumber)&#xA;pr() %&amp;gt;%&#xA;  vetiver_api(v) %&amp;gt;%&#xA;  pr_run(port = 8088)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the deployed model endpoint is running via one R process (either remotely on a server or locally, perhaps via a &lt;a href=&#34;https://docs.posit.co/ide/user/ide/guide/tools/jobs.html&#34;&gt;background job in the RStudio IDE&lt;/a&gt;), you can make predictions with that deployed model and new data in another, separate R process. First, create a model endpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(vetiver)&#xA;endpoint &amp;lt;- vetiver_endpoint(&#34;http://127.0.0.1:8088/predict&#34;)&#xA;endpoint&#xA;#&amp;gt; &#xA;#&amp;gt; ── A model API endpoint for prediction: &#xA;#&amp;gt; http://127.0.0.1:8088/predict&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Such a model API endpoint deployed with vetiver will return predictions for appropriate new data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;new_sac &amp;lt;- Sacramento %&amp;gt;% &#xA;    slice_sample(n = 20) %&amp;gt;% &#xA;    select(type, sqft, beds, baths)&#xA;&#xA;predict(endpoint, new_sac)&#xA;#&amp;gt; # A tibble: 20 x 1&#xA;#&amp;gt;      .pred&#xA;#&amp;gt;      &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 165042.&#xA;#&amp;gt;  2 212461.&#xA;#&amp;gt;  3 119008.&#xA;#&amp;gt;  4 201752.&#xA;#&amp;gt;  5 223096.&#xA;#&amp;gt;  6 115696.&#xA;#&amp;gt;  7 191262.&#xA;#&amp;gt;  8 211706.&#xA;#&amp;gt;  9 259336.&#xA;#&amp;gt; 10 206826.&#xA;#&amp;gt; 11 234952.&#xA;#&amp;gt; 12 221993.&#xA;#&amp;gt; 13 204983.&#xA;#&amp;gt; 14 548052.&#xA;#&amp;gt; 15 151186.&#xA;#&amp;gt; 16 299365.&#xA;#&amp;gt; 17 213439.&#xA;#&amp;gt; 18 287993.&#xA;#&amp;gt; 19 272017.&#xA;#&amp;gt; 20 226629.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is released with a &lt;a href=&#34;https://www.contributor-covenant.org/version/2/1/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For questions and discussions about modeling, machine learning, and MLOps please &lt;a href=&#34;https://community.rstudio.com/new-topic?category_id=15&amp;amp;tags=vetiver,question&#34;&gt;post on RStudio Community&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you think you have encountered a bug, please &lt;a href=&#34;https://github.com/rstudio/vetiver-r/issues&#34;&gt;submit an issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Either way, learn how to create and share a &lt;a href=&#34;https://reprex.tidyverse.org/articles/articles/learn-reprex.html&#34;&gt;reprex&lt;/a&gt; (a minimal, reproducible example), to clearly communicate about your code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>epicentre-msf/leafcirclelegend</title>
    <updated>2023-06-12T01:46:14Z</updated>
    <id>tag:github.com,2023-06-12:/epicentre-msf/leafcirclelegend</id>
    <link href="https://github.com/epicentre-msf/leafcirclelegend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add a Scaled Circle Legend to a Leaflet Map&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;leafcirclelegend&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Add scaled circle legends to leaflet maps.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of &lt;code&gt;leafcirclelegend&lt;/code&gt; using the &lt;code&gt;remotes&lt;/code&gt; package`:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;epicentre-msf/leafcirclelegend&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h4&gt;Setup&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;library(leaflet)&#xA;library(leafcirclelegend)&#xA;&#xA;data(&#34;quakes&#34;)&#xA;&#xA;# take a sample of the data for example purposes&#xA;df_leaf &amp;lt;- slice_sample(quakes, n = 20) %&amp;gt;% arrange(desc(depth))&#xA;&#xA;# make a scaling function to convert real numbers to radii appropriate for leaflet&#xA;calc_radius &amp;lt;- function(n, scale_factor = 30) {&#xA;  sqrt(n) / sqrt(max(n)) * scale_factor&#xA;}&#xA;&#xA;# define stroke and fill params&#xA;stroke_color &amp;lt;- &#34;#FFFFFF&#34;&#xA;stroke_weight &amp;lt;- 1&#xA;fill_color &amp;lt;- &#34;#e06e22&#34;&#xA;fill_opacity &amp;lt;- 0.7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Map&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;leaflet(df_leaf) %&amp;gt;% &#xA;  addTiles() %&amp;gt;% &#xA;  addLayersControl(&#xA;    overlayGroups = &#34;Circles&#34;, &#xA;    position = &#34;topleft&#34;,&#xA;    options = layersControlOptions(collapsed = FALSE)&#xA;  ) %&amp;gt;% &#xA;  addCircleMarkers(&#xA;    lng = ~long, &#xA;    lat = ~lat, &#xA;    radius = ~calc_radius(depth),&#xA;    label = ~depth,&#xA;    fillColor = fill_color, &#xA;    fillOpacity = fill_opacity, &#xA;    weight = stroke_weight, &#xA;    color = stroke_color,&#xA;    group = &#34;Circles&#34;&#xA;  ) %&amp;gt;% &#xA;  addCircleLegend(&#xA;    title = &#34;Quake Depth&#34;,&#xA;    values = ~depth,&#xA;    scaling_fn = calc_radius,&#xA;    fillColor = fill_color, &#xA;    fillOpacity = fill_opacity, &#xA;    weight = stroke_weight, &#xA;    color = stroke_color,&#xA;    position = &#34;topright&#34;,&#xA;    group = &#34;Circles&#34;&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/epicentre-msf/leafcirclelegend/master/man/figures/example.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/tomroh/leaflegend&#34;&gt;&lt;code&gt;leaflegend&lt;/code&gt;&lt;/a&gt; package provides many additional legend options for leaflet maps, but does not have a scaled circle option in the style of this package. Some code, most notably the javascript code to add the legend to a group that can be controlled by a layer control, was taken from &lt;code&gt;leaflegend&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/rsconnect</title>
    <updated>2023-06-12T01:46:14Z</updated>
    <id>tag:github.com,2023-06-12:/rstudio/rsconnect</id>
    <link href="https://github.com/rstudio/rsconnect" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Publish Shiny Applications, RMarkdown Documents, Jupyter Notebooks, Plumber APIs, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rsconnect &lt;a href=&#34;https://rstudio.github.io/rstudioapi/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/rsconnect/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=rsconnect&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/rsconnect&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;lifecycle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rstudio/rsconnect/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/rsconnect/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;rsconnect makes it easy to publish your Shiny apps, RMarkdown and Quarto documents, and Plumber APIs to &lt;a href=&#34;https://posit.co/products/enterprise/connect/&#34;&gt;Posit Connect&lt;/a&gt;, &lt;a href=&#34;https://www.shinyapps.io/&#34;&gt;ShinyApps.io&lt;/a&gt;, and &lt;a href=&#34;https://posit.cloud/&#34;&gt;Posit Cloud&lt;/a&gt; from R.&lt;/p&gt; &#xA;&lt;p&gt;(If you’re looking for the Python equivalent, try &lt;a href=&#34;https://pypi.org/project/rsconnect-python/&#34;&gt;rsconnect-python&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of rsconnect from &lt;a href=&#34;https://CRAN.R-project.org&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;rsconnect&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the development version from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;rstudio/rsconnect&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;To use rsconnect, you first need to teach it about the server you want to publish to. If you use the RStudio IDE, the easiest way to get set up is to use the publishing dialog, which you can find by clicking the “Tools” menu, then selecting “Global options”, then clicking “Publishing”. Click “Connect” to add new servers.&lt;/p&gt; &#xA;&lt;p&gt;You can also connect from any R session by running a little code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For shinyapps.io, go to your &lt;a href=&#34;https://www.shinyapps.io/admin/#/tokens&#34;&gt;tokens page&lt;/a&gt; and click “Add Token”, then follow the instructions to copy and paste the appropriate call to &lt;code&gt;setAccountInfo()&lt;/code&gt;. Learn more in the &lt;a href=&#34;https://www.shinyapps.io/admin/#/tokens&#34;&gt;Getting Started Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Posit Connect, first use &lt;code&gt;addServer()&lt;/code&gt; to register your server with rsconnect, then call either &lt;code&gt;connectUser()&lt;/code&gt; or &lt;code&gt;connectApiUser()&lt;/code&gt;. &lt;code&gt;connectUser()&lt;/code&gt; is a bit simpler if you’re in an interactive session; &lt;code&gt;connectApiUser()&lt;/code&gt; works anywhere but requires a you to copy and paste an API key from your user profile.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Posit Cloud, login, then click your name in the top-right corner, click “Account”, then click “Tokens” in the navbar at the top of the page. Click “New Token”, then “Copy” next to the token you just created, and then follow the instructions to copy and paste the appropriate call to &lt;code&gt;setAccountInfo()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now that you’re setup you can use &lt;code&gt;deployApp()&lt;/code&gt;, &lt;code&gt;deployDoc()&lt;/code&gt;, and friends to publish your apps, documentations, APIs and more.&lt;/p&gt;</summary>
  </entry>
</feed>