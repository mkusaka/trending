<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-28T01:44:15Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>r-spatial/stars</title>
    <updated>2023-02-28T01:44:15Z</updated>
    <id>tag:github.com,2023-02-28:/r-spatial/stars</id>
    <link href="https://github.com/r-spatial/stars" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spatiotemporal Arrays, Raster and Vector Data Cubes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Spatiotemporal Arrays: Raster and Vector Datacubes&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/r-spatial/stars/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-spatial/stars/workflows/tic/badge.svg?branch=main&#34; alt=&#34;tic&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=stars&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/stars&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/web/checks/check_results_stars.html&#34;&gt;&lt;img src=&#34;https://badges.cranchecks.info/worst/stars.svg?sanitize=true&#34; alt=&#34;cran checks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.r-pkg.org/pkg/stars&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/stars?color=brightgreen&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=stars&#34;&gt;&lt;img src=&#34;https://tinyverse.netlify.com/badge/stars&#34; alt=&#34;status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-spatial/stars?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-spatial/stars/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Spatiotemporal data often comes in the form of dense arrays, with space and time being array dimensions. Examples include&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;socio-economic or demographic data,&lt;/li&gt; &#xA; &lt;li&gt;environmental variables monitored at fixed stations,&lt;/li&gt; &#xA; &lt;li&gt;raster maps&lt;/li&gt; &#xA; &lt;li&gt;time series of satellite images with multiple spectral bands,&lt;/li&gt; &#xA; &lt;li&gt;spatial simulations, and&lt;/li&gt; &#xA; &lt;li&gt;climate or weather model output.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This R package provides classes and methods for reading, manipulating, plotting and writing such data cubes, to the extent that there are proper formats for doing so.&lt;/p&gt; &#xA;&lt;h2&gt;Raster and vector data cubes&lt;/h2&gt; &#xA;&lt;p&gt;The canonical data cube most of us have in mind is that where two dimensions represent spatial raster dimensions, and the third time (or band), as e.g.&amp;nbsp;shown here:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/master/images/cube1.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;By data cubes however we also consider higher-dimensional cubes (hypercubes) such as a five-dimensional cube where in addition to time, spectral band and sensor form dimensions:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/master/images/cube2.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;or lower-dimensional cubes such as a raster image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;suppressPackageStartupMessages(library(dplyr))&#xA;library(stars)&#xA;# Loading required package: abind&#xA;# Loading required package: sf&#xA;# Linking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.1; sf_use_s2() is TRUE&#xA;tif = system.file(&#34;tif/L7_ETMs.tif&#34;, package = &#34;stars&#34;)&#xA;read_stars(tif) %&amp;gt;%&#xA;  slice(index = 1, along = &#34;band&#34;) %&amp;gt;%&#xA;  plot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/main/man/figures/README-plot1-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Raster data do not need to be regular and aligned with North/East, and package &lt;code&gt;stars&lt;/code&gt; supports besides &lt;em&gt;regular&lt;/em&gt; also &lt;em&gt;rotated&lt;/em&gt;, &lt;em&gt;sheared&lt;/em&gt;, &lt;em&gt;rectilinear&lt;/em&gt; and &lt;em&gt;curvilinear&lt;/em&gt; rasters:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/main/man/figures/README-plot2-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Vector data cubes arise when we do not have two regularly discretized spatial dimensions, but a single dimension that points to distinct spatial feature geometries, such as polygons (e.g.&amp;nbsp;denoting administrative regions):&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/master/images/cube3.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;or points (e.g.&amp;nbsp;denoting sensor locations):&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/master/images/cube4.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;NetCDF’s CF-convention calls this a &lt;a href=&#34;https://cfconventions.org/Data/cf-conventions/cf-conventions-1.8/cf-conventions.html#discrete-axis&#34;&gt;discrete axis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;NetCDF, GDAL&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;stars&lt;/code&gt; provides two functions to read data: &lt;code&gt;read_ncdf&lt;/code&gt; and &lt;code&gt;read_stars&lt;/code&gt;, where the latter reads through GDAL. (In the future, both will be integrated in &lt;code&gt;read_stars&lt;/code&gt;.) For reading NetCDF files, package &lt;code&gt;RNetCDF&lt;/code&gt; is used, for reading through GDAL, package &lt;code&gt;sf&lt;/code&gt; provides the binary linking to GDAL.&lt;/p&gt; &#xA;&lt;p&gt;For vector and raster operations, &lt;code&gt;stars&lt;/code&gt; uses as much as possible the routines available in GDAL and PROJ (e.g.&amp;nbsp;&lt;code&gt;st_transform&lt;/code&gt;, &lt;code&gt;rasterize&lt;/code&gt;, &lt;code&gt;polygonize&lt;/code&gt;, &lt;code&gt;warp&lt;/code&gt;). Read more about this in the vignette on &lt;a href=&#34;https://r-spatial.github.io/stars/articles/stars5.html&#34;&gt;vector-raster conversions, reprojection, warping&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Out-of-memory (on-disk) rasters&lt;/h2&gt; &#xA;&lt;p&gt;Package &lt;code&gt;stars&lt;/code&gt; provides &lt;code&gt;stars_proxy&lt;/code&gt; objects (currently only when read through GDAL), which contain only the dimensions metadata and pointers to the files on disk. These objects work lazily: reading and processing data is postponed to the moment that pixels are really needed (at plot time, or when writing to disk), and is done at the lowest spatial resolution possible that still fulfills the resolution of the graphics device. More details are found in the &lt;a href=&#34;https://r-spatial.github.io/stars/articles/stars2.html&#34;&gt;stars proxy vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following methods are currently available for &lt;code&gt;stars_proxy&lt;/code&gt; objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;methods(class = &#34;stars_proxy&#34;)&#xA;#  [1] [               [[&amp;lt;-            [&amp;lt;-             adrop          &#xA;#  [5] aggregate       aperm           as.data.frame   c              &#xA;#  [9] coerce          dim             droplevels      filter         &#xA;# [13] hist            initialize      is.na           Math           &#xA;# [17] merge           mutate          Ops             plot           &#xA;# [21] predict         print           pull            rename         &#xA;# [25] select          show            slice           slotsFromS3    &#xA;# [29] split           st_apply        st_as_sf        st_as_stars    &#xA;# [33] st_crop         st_dimensions&amp;lt;- st_downsample   st_mosaic      &#xA;# [37] st_redimension  st_sample       st_set_bbox     transmute      &#xA;# [41] write_stars    &#xA;# see &#39;?methods&#39; for accessing help and source code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Raster and vector time series analysis example&lt;/h2&gt; &#xA;&lt;p&gt;In the following, a curvilinear grid with hourly precipitation values of a hurricane is imported and the first 12 time steps are plotted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;prec_file = system.file(&#34;nc/test_stageiv_xyt.nc&#34;, package = &#34;stars&#34;)&#xA;(prec = read_stars(gdal_subdatasets(prec_file)[[1]]))&#xA;# stars object with 3 dimensions and 1 attribute&#xA;# attribute(s):&#xA;#                                            Min. 1st Qu. Median     Mean 3rd Qu.&#xA;# Total_precipitation_surface_1_... [kg/m^2]    0       0   0.75 4.143009    4.63&#xA;#                                              Max.&#xA;# Total_precipitation_surface_1_... [kg/m^2] 163.75&#xA;# dimension(s):&#xA;#      from  to                  offset   delta  refsys&#xA;# x       1  87                      NA      NA  WGS 84&#xA;# y       1 118                      NA      NA  WGS 84&#xA;# time    1  23 2018-09-13 19:00:00 UTC 1 hours POSIXct&#xA;#                                      values x/y&#xA;# x    [87x118] -80.6113 [°],...,-74.8822 [°] [x]&#xA;# y      [87x118] 32.4413 [°],...,37.6193 [°] [y]&#xA;# time                                   NULL    &#xA;# curvilinear grid&#xA;# or: (prec = read_ncdf(prec_file, curvilinear = c(&#34;lon&#34;, &#34;lat&#34;), ignore_bounds = TRUE))&#xA;sf::read_sf(system.file(&#34;gpkg/nc.gpkg&#34;, package = &#34;sf&#34;), &#34;nc.gpkg&#34;) %&amp;gt;%&#xA;  st_transform(st_crs(prec)) -&amp;gt; nc # transform from NAD27 to WGS84&#xA;nc_outline = st_union(st_geometry(nc))&#xA;plot_hook = function() plot(nc_outline, border = &#39;red&#39;, add = TRUE)&#xA;prec %&amp;gt;%&#xA;  slice(index = 1:12, along = &#34;time&#34;) %&amp;gt;%&#xA;  plot(downsample = c(3, 3, 1), hook = plot_hook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/main/man/figures/README-plot3-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;and next, intersected with with the counties of North Carolina, where the maximum precipitation intensity was obtained per county, and plotted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;a = aggregate(prec, by = nc, FUN = max)&#xA;plot(a, max.plot = 23, border = &#39;grey&#39;, lwd = .5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/main/man/figures/README-plot4-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can integrate over (reduce) time, for instance to find out &lt;em&gt;when&lt;/em&gt; the maximum precipitation occurred. The following code finds the time index, and then the corresponding time value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;index_max = function(x) ifelse(all(is.na(x)), NA, which.max(x))&#xA;st_apply(a, &#34;geom&#34;, index_max) %&amp;gt;%&#xA;  mutate(when = st_get_dimension_values(a, &#34;time&#34;)[.$index_max]) %&amp;gt;%&#xA;  select(when) %&amp;gt;%&#xA;  plot(key.pos = 1, main = &#34;time of maximum precipitation&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/r-spatial/stars/main/man/figures/README-plot5-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other packages for data cubes&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/appelmar/gdalcubes_R/&#34;&gt;&lt;code&gt;gdalcubes&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Package &lt;code&gt;gdalcubes&lt;/code&gt; can be used to create data cubes (or functions from them) from image collections, sets of multi-band images with varying&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;spatial resolution&lt;/li&gt; &#xA; &lt;li&gt;spatial extent&lt;/li&gt; &#xA; &lt;li&gt;coordinate reference systems (e.g., spread over multiple UTM zones)&lt;/li&gt; &#xA; &lt;li&gt;observation times&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and does this by resampling and/or aggregating over space and/or time. It reuses GDAL VRT’s and gdalwarp for spatial resampling and/or warping, and handles temporal resampling or aggregation itself.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/USGS-R/ncdfgeom&#34;&gt;&lt;code&gt;ncdfgeom&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ncdfgeom&lt;/code&gt; reads and writes vector data cubes from and to netcdf files in a standards-compliant way.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/rspatial/raster/&#34;&gt;&lt;code&gt;raster&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Package &lt;code&gt;raster&lt;/code&gt; is a powerful package for handling raster maps and stacks of raster maps both in memory and on disk, but does not address&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;non-raster time series,&lt;/li&gt; &#xA; &lt;li&gt;multi-attribute rasters time series&lt;/li&gt; &#xA; &lt;li&gt;rasters with mixed type attributes (e.g., numeric, logical, factor, POSIXct)&lt;/li&gt; &#xA; &lt;li&gt;rectilinear or curvilinear rasters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A list of &lt;code&gt;stars&lt;/code&gt; commands matching existing &lt;code&gt;raster&lt;/code&gt; commands is found in this &lt;a href=&#34;https://github.com/r-spatial/stars/wiki/How-%60raster%60-functions-map-to-%60stars%60-functions&#34;&gt;wiki&lt;/a&gt;. A list of translations in the opposite direction (from &lt;code&gt;stars&lt;/code&gt; to &lt;code&gt;raster&lt;/code&gt;) still needs to be made.&lt;/p&gt; &#xA;&lt;h2&gt;Other &lt;code&gt;stars&lt;/code&gt; resources:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;blog posts: &lt;a href=&#34;https://r-spatial.org/r/2017/11/23/stars1.html&#34;&gt;first&lt;/a&gt;, &lt;a href=&#34;https://www.r-spatial.org/r/2018/03/22/stars2.html&#34;&gt;second&lt;/a&gt;, &lt;a href=&#34;https://www.r-spatial.org/r/2018/03/23/stars3.html&#34;&gt;third&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;vignettes: &lt;a href=&#34;https://r-spatial.github.io/stars/articles/stars1.html&#34;&gt;first&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/stars/articles/stars2.html&#34;&gt;second&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/stars/articles/stars3.html&#34;&gt;third&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/stars/articles/stars4.html&#34;&gt;fourth&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/stars/articles/stars5.html&#34;&gt;fifth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the original &lt;a href=&#34;https://github.com/edzer/stars/raw/master/PROPOSAL.md&#34;&gt;R Consortium proposal&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Acknowledgment&lt;/h3&gt; &#xA;&lt;p&gt;This project has been realized with financial &lt;a href=&#34;https://www.r-consortium.org/blog/2017/04/03/q1-2017-isc-grants&#34;&gt;support&lt;/a&gt; from the&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.r-consortium.org/all-projects/awarded-projects/2017-group-1&#34;&gt; &lt;img src=&#34;http://pebesma.staff.ifgi.de/RConsortium_Horizontal_Pantone.png&#34; width=&#34;300&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>TheEconomist/the-economist-war-fire-model</title>
    <updated>2023-02-28T01:44:15Z</updated>
    <id>tag:github.com,2023-02-28:/TheEconomist/the-economist-war-fire-model</id>
    <link href="https://github.com/TheEconomist/the-economist-war-fire-model" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code and data for The Economist&#39;s Ukraine war-fire model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;em&gt;The Economist&#39;s&lt;/em&gt; Ukraine war-fire model&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code and data associated with &lt;em&gt;The Economist’s&lt;/em&gt; Ukraine war-fire model. This model uses statistical techniques from machine learning and satellite data on temperature anomalies to detect war events. Between February 24th, 2022, and February 18th, 2023, we detected 14,068 such events in the country.&lt;/p&gt; &#xA;&lt;h2&gt;Scripts, sources and output data&lt;/h2&gt; &#xA;&lt;p&gt;Generating the model ensemble, as well as model outputs, maps, and analysis charts can be done by running the master script:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheEconomist/the-economist-war-fire-model/master/00-master-script.R&#34;&gt;&lt;code&gt;scripts/00-master-script.R&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This script calls component scripts as well as auxiliary scripts. These produce, among other things, the following map, where each of the 14,068 dots is a fire event with a precise location (in most cases, to within 500m accuracy), a date, and a time of day.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TheEconomist/the-economist-war-fire-model/master/plots/ukraine_fire_map.png&#34; alt=&#34;Chart of fire events assessed as war-related&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Classification of events&lt;/h2&gt; &#xA;&lt;p&gt;All details on the procedure used to classify events are available in the above scripts. In brief, events are classified as war-related if they met the following thresholds:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Excess fire activity in a given 0.1 latitude by 0.1 longitude area of Ukraine on a given day is so large as to have less than 5% probability of occuring in a normal year.&lt;/li&gt; &#xA; &lt;li&gt;Such excess happens in this cell on at least two occasions, at least 7 days apart.&lt;/li&gt; &#xA; &lt;li&gt;or: A fire event takes place in a cell less than 10 days after it has meet the above two requirements. (In other words, other activity producing fire events, typically from agriculture, does not resume until 10 days after an area has seen a war events.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Many war events do not produce heat at a level detectable by the satellite systems we use, and even if they do, events may go unrecorded because they happen under cloud cover, which regularly obscures much of the country from such satellite monitoring, or have cooled by the time the satellites pass overhead. This means not all war events are detected.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, our statistical method classifying events as war-related (or not war-related) is probabilistic. This means that it will sometimes categorise events which were unrelated to the war as war-related, and more frequently, given our strict thresholds, classify events related to the fighting as insufficiently abnormal to be labelled war-related.&lt;/p&gt; &#xA;&lt;h2&gt;Historical versions and sources&lt;/h2&gt; &#xA;&lt;p&gt;This model was first published on February 23th, 2023.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;The Economist&lt;/em&gt; gratefully acknowledge helpful discussions with Daniel Arribas-Bel and Francisco Rowe of the University of Liverpool on the construction of training features and modelling approach.&lt;/p&gt; &#xA;&lt;p&gt;If you have any suggestions or questions, please email &lt;a href=&#34;mailto:sondresolstad@economist.com&#34;&gt;sondresolstad@economist.com&lt;/a&gt; or open a ticket.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;This software is published by &lt;a href=&#34;https://www.economist.com&#34;&gt;&lt;em&gt;The Economist&lt;/em&gt;&lt;/a&gt; under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT licence&lt;/a&gt;. The data generated by &lt;em&gt;The Economist&lt;/em&gt; are available under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The data and files that we have generated from open sources are freely available for public use, as long as &lt;em&gt;The Economist&lt;/em&gt; is cited as a source.&lt;/p&gt; &#xA;&lt;h2&gt;Suggested citation&lt;/h2&gt; &#xA;&lt;p&gt;The Economist and Solstad, Sondre. (corresponding author), 2023. Data from satellites reveal the vast extent of fighting in Ukraine [online] The Economist. First published in the article &#34;A hail of destruction&#34;, The Economist, February 25th issue, 2023.&lt;/p&gt;</summary>
  </entry>
</feed>