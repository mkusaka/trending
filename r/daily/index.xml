<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-30T01:44:19Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DavZim/dataverifyr</title>
    <updated>2023-05-30T01:44:19Z</updated>
    <id>tag:github.com,2023-05-30:/DavZim/dataverifyr</id>
    <link href="https://github.com/DavZim/dataverifyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;dataverifyr&lt;/code&gt; - A Lightweight, Flexible, and Fast Data Validation Package that Can Handle All Sizes of Data&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.r-pkg.org/pkg/dataverifyr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/dataverifyr&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.r-pkg.org/pkg/dataverifyr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/dataverifyr&#34; alt=&#34;CRAN RStudio mirror downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/DavZim/dataverifyr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/DavZim/dataverifyr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of &lt;code&gt;dataverifyr&lt;/code&gt; is to allow a wide variety of flexible data validation checks (verifications). That means, you can specify a set of rules (R expressions) and compare any arbitrary dataset against it.&lt;/p&gt; &#xA;&lt;p&gt;The package is built in such a way, that it adapts to your type of data and choice of data package (data.frame, data.table, tibble, arrow, or SQL connection) and chooses the right data backend automatically, this is especially handy when large or complicated datasets are involved. That way, you can concentrate on writing the rules and making sure that your data is valid rather than spending time writing boilerplate code.&lt;/p&gt; &#xA;&lt;p&gt;The package is lightweight as all the heavy dependencies are Suggests-only, that means if you want to use &lt;code&gt;data.table&lt;/code&gt; for the task, you don’t need to install the other packages (&lt;code&gt;arrow&lt;/code&gt;, &lt;code&gt;DBI&lt;/code&gt;, etc) unless you explicitly tell R to install all suggested packages as well when installing the package.&lt;/p&gt; &#xA;&lt;p&gt;The backend for your analysis is automatically chosen based on the type of input dataset as well as the available packages. By using the underlying technologies and handing over all evaluation of code to the backend, this package can deal with all sizes of data the backends can deal with.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of &lt;code&gt;dataverifyr&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# development version&#xA;# devtools::install_github(&#34;DavZim/dataverifyr&#34;)&#xA;&#xA;# CRAN release&#xA;install.packages(&#34;dataverifyr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic example which shows you how to&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;create a rule set manually, consisting of R expressions&lt;/li&gt; &#xA; &lt;li&gt;check if a dataset matches all given rules&lt;/li&gt; &#xA; &lt;li&gt;save and load the rules to a yaml-file for better maintainability&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that each rule is an R expression that is evaluated within the dataset. Our first rule, for example, states that we believe all values of the &lt;code&gt;mpg&lt;/code&gt; variable are in the range 10 to 30 (exclusive). At the moment rules work in a window/vectorized approach only, that means that a rule like this will work &lt;code&gt;mpg &amp;gt; 10 * wt&lt;/code&gt;, whereas a rule like this &lt;code&gt;sum(mpg) &amp;gt; 0&lt;/code&gt; will not work as it aggregates values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dataverifyr)&#xA;&#xA;# define a rule set within our R code; alternatively in a yaml file&#xA;rules &amp;lt;- ruleset(&#xA;  rule(mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30), # mpg goes up to 34&#xA;  rule(cyl %in% c(4, 8)), # missing 6 cyl&#xA;  rule(vs %in% c(0, 1), allow_na = TRUE)&#xA;)&#xA;&#xA;# print the rules&#xA;rules&#xA;#&amp;gt; &amp;lt;Verification Ruleset with 3 elements&amp;gt;&#xA;#&amp;gt;   [1] &#39;Rule for: mpg&#39; matching `mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30` (allow_na: FALSE)&#xA;#&amp;gt;   [2] &#39;Rule for: cyl&#39; matching `cyl %in% c(4, 8)` (allow_na: FALSE)&#xA;#&amp;gt;   [3] &#39;Rule for: vs&#39; matching `vs %in% c(0, 1)` (allow_na: TRUE)&#xA;&#xA;# check if the data matches our rules&#xA;res &amp;lt;- check_data(mtcars, rules)&#xA;res&#xA;#&amp;gt;             name                expr allow_na negate tests pass fail warn error              time&#xA;#&amp;gt; 1: Rule for: mpg mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30    FALSE  FALSE    32   28    4            0.0055301189 secs&#xA;#&amp;gt; 2: Rule for: cyl    cyl %in% c(4, 8)    FALSE  FALSE    32   25    7            0.0034749508 secs&#xA;#&amp;gt; 3:  Rule for: vs     vs %in% c(0, 1)     TRUE  FALSE    32   32    0            0.0004439354 secs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As we can see, our dataset &lt;code&gt;mtcars&lt;/code&gt; does not conform to all of our rules. We have four fails (fail=rule is not met) for the first rule &lt;code&gt;mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30&lt;/code&gt; (there are &lt;code&gt;mpg&lt;/code&gt; values up to 33.9) and seven fails for the second rule &lt;code&gt;cyl %in% c(4, 8)&lt;/code&gt; (there are &lt;code&gt;cyl&lt;/code&gt; values of 6), while the third rule &lt;code&gt;vs %in% c(0, 1)&lt;/code&gt; is always met.&lt;/p&gt; &#xA;&lt;p&gt;To see which values do not meet our expectations, use the &lt;code&gt;filter_fails()&lt;/code&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;filter_fails(res, mtcars, per_rule = TRUE)&#xA;#&amp;gt; $`mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30`&#xA;#&amp;gt;     mpg cyl disp  hp drat    wt  qsec vs am gear carb&#xA;#&amp;gt; 1: 32.4   4 78.7  66 4.08 2.200 19.47  1  1    4    1&#xA;#&amp;gt; 2: 30.4   4 75.7  52 4.93 1.615 18.52  1  1    4    2&#xA;#&amp;gt; 3: 33.9   4 71.1  65 4.22 1.835 19.90  1  1    4    1&#xA;#&amp;gt; 4: 30.4   4 95.1 113 3.77 1.513 16.90  1  1    5    2&#xA;#&amp;gt; &#xA;#&amp;gt; $`cyl %in% c(4, 8)`&#xA;#&amp;gt;     mpg cyl  disp  hp drat    wt  qsec vs am gear carb&#xA;#&amp;gt; 1: 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4&#xA;#&amp;gt; 2: 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4&#xA;#&amp;gt; 3: 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1&#xA;#&amp;gt; 4: 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1&#xA;#&amp;gt; 5: 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4&#xA;#&amp;gt; 6: 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4&#xA;#&amp;gt; 7: 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also visualize the results using the &lt;code&gt;plot_res()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot_res(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/DavZim/dataverifyr/main/man/figures/README-plotres-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Note that you can also save and load a ruleset to and from a &lt;code&gt;yaml&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;write_rules(rules, &#34;example_rules.yaml&#34;)&#xA;r2 &amp;lt;- read_rules(&#34;example_rules.yaml&#34;)&#xA;identical(rules, r2)&#xA;#&amp;gt; [1] TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting &lt;code&gt;example_rules.yaml&lt;/code&gt; looks like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: &#39;Rule for: mpg&#39;&#xA;  expr: mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30&#xA;  allow_na: no&#xA;  negate: no&#xA;  index: 1&#xA;- name: &#39;Rule for: cyl&#39;&#xA;  expr: cyl %in% c(4, 8)&#xA;  allow_na: no&#xA;  negate: no&#xA;  index: 2&#xA;- name: &#39;Rule for: vs&#39;&#xA;  expr: vs %in% c(0, 1)&#xA;  allow_na: yes&#xA;  negate: no&#xA;  index: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One helpful use case is to use this functionality to assert that your data has the right values in a custom read function like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;read_custom &amp;lt;- function(file, rules) {&#xA;  data &amp;lt;- read.csv(file) # or however you read in your data&#xA;  stopifnot(check_data(data, rules, xname = file,&#xA;                       fail_on_error = TRUE, fail_on_warn = TRUE))&#xA;  # ...&#xA;  data&#xA;}&#xA;# nothing happens when the data matches the rules&#xA;data &amp;lt;- read_custom(&#34;correct_data.csv&#34;, rules)&#xA;&#xA;# an error is thrown when warnings or errors are found&#xA;data &amp;lt;- read_custom(&#34;wrong_data.csv&#34;, rules)&#xA;#&amp;gt; Error in check_data(data, rules, fail_on_error = TRUE, fail_on_warn = TRUE) : &#xA;#&amp;gt;   In dataset &#39;wrong_data.csv&#39; found 1 warnings and 1 errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Backends&lt;/h2&gt; &#xA;&lt;p&gt;At the moment the following backends are supported. Note that they are automatically chosen based on data type and package availability. Eg, when the dataset is a &lt;code&gt;dplyr::tbl()&lt;/code&gt; connected to an &lt;code&gt;SQLite&lt;/code&gt; database, the package will automatically choose &lt;code&gt;RSQLite&lt;/code&gt;/&lt;code&gt;DBI&lt;/code&gt;/&lt;code&gt;dbplyr&lt;/code&gt; for the task.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead class=&#34;header&#34;&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;th style=&#34;text-align:left;&#34;&gt; Backend / Library &lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt; Status &lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:left;&#34;&gt; Data Type &lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:left;&#34;&gt; Example Code &lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:left;&#34;&gt; Comment &lt;/th&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr class=&#34;odd&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;base-R&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ✔️ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;data.frame&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data &amp;lt;- data.frame(x = 1:10)&#xA;check_data(data, rs)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;When &lt;code&gt;data.table&lt;/code&gt; or &lt;code&gt;dplyr&lt;/code&gt; are available, they are used for faster speeds.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;even&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ✔️ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;tibble&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)&#xA;data &amp;lt;- tibble(x = 1:10)&#xA;check_data(data, rs)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;odd&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://r-datatable.com&#34;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ✔️ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(data.table)&#xA;data &amp;lt;- data.table(x = 1:10)&#xA;check_data(data, rs)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;even&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://arrow.apache.org/docs/r/&#34;&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ✔️ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;Table&lt;/code&gt;, &lt;code&gt;ArrowTabular&lt;/code&gt;, &lt;code&gt;ArrowObject&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(arrow)&#xA;data &amp;lt;- arrow_table(x = 1:10)&#xA;# Alternatively:&#xA;data &amp;lt;- read_parquet(&#xA;  file,&#xA;  as_data_frame = FALSE&#xA;)&#xA;check_data(data, rs)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;odd&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://arrow.apache.org/docs/r/&#34;&gt;&lt;code&gt;arrow&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ✔️ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;FileSystemDataset&lt;/code&gt;, &lt;code&gt;Dataset&lt;/code&gt;, &lt;code&gt;ArrowObject&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(arrow)&#xA;data &amp;lt;- open_dataset(dir)&#xA;check_data(data, rs)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; Especially handy for large datasets &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;even&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://rsqlite.r-dbi.org/&#34;&gt;&lt;code&gt;RSQLite&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dbi.r-dbi.org/&#34;&gt;&lt;code&gt;DBI&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dbplyr.tidyverse.org/&#34;&gt;&lt;code&gt;dbplyr&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ✔️ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;tbl_SQLiteConnection&lt;/code&gt;, &lt;code&gt;tbl_dbi&lt;/code&gt;, &lt;code&gt;tbl_sql&lt;/code&gt;, &lt;code&gt;tbl_lazy&lt;/code&gt;, &lt;code&gt;tbl&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)&#xA;con &amp;lt;- dbConnect(RSQLite::SQLite())&#xA;# dbWriteTable(con, tablename, data)&#xA;tbl &amp;lt;- dplyr::tbl(con, tablename)&#xA;check_data(tbl, rs)&#xA;&#xA;dbDisconnect(con)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;Note that missing values are converted to &lt;code&gt;0&lt;/code&gt; when using sqlite by default (&lt;a href=&#34;https://stackoverflow.com/a/57746647/3048453&#34;&gt;c.f. this SO answer&lt;/a&gt;)&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;odd&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://duckdb.org/docs/api/r.html&#34;&gt;&lt;code&gt;duckdb&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dbi.r-dbi.org/&#34;&gt;&lt;code&gt;DBI&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dbplyr.tidyverse.org/&#34;&gt;&lt;code&gt;dbplyr&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ✔️ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;tbl_duckdb_connection&lt;/code&gt;, &lt;code&gt;tbl_dbi&lt;/code&gt;, &lt;code&gt;tbl_sql&lt;/code&gt;, &lt;code&gt;tbl_lazy&lt;/code&gt;, &lt;code&gt;tbl&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)&#xA;con &amp;lt;- dbConnect(duckdb::duckdb())&#xA;# dbWriteTable(con, tablename, data)&#xA;tbl &amp;lt;- dplyr::tbl(con, tablename)&#xA;check_data(tbl, rs)&#xA;&#xA;dbDisconnect(con, shutdown = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr class=&#34;even&#34;&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;a href=&#34;https://rpostgres.r-dbi.org/&#34;&gt;&lt;code&gt;RPostgres&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://dbi.r-dbi.org/&#34;&gt;&lt;code&gt;DBI&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dbplyr.tidyverse.org/&#34;&gt;&lt;code&gt;dbplyr&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt; ❓ &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;&lt;code&gt;tbl_PqConnection&lt;/code&gt;, &lt;code&gt;tbl_dbi&lt;/code&gt;, &lt;code&gt;tbl_sql&lt;/code&gt;, &lt;code&gt;tbl_lazy&lt;/code&gt;, &lt;code&gt;tbl&lt;/code&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)&#xA;con &amp;lt;- dbConnect(&#xA;  RPostgres::Postgres(), &#xA;  ...&#xA;)&#xA;# dbWriteTable(con, tablename, data)&#xA;tbl &amp;lt;- dplyr::tbl(con, tablename)&#xA;check_data(tbl, rs)&#xA;&#xA;dbDisconnect(con)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:left;&#34;&gt; &lt;p&gt;Not tested, but should work out-of-the-box using &lt;a href=&#34;https://dbi.r-dbi.org/&#34;&gt;&lt;code&gt;DBI&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;rs&lt;/code&gt; object in the example code above refers to a &lt;code&gt;ruleset()&lt;/code&gt;. Larger complete examples can be found below.&lt;/p&gt; &#xA;&lt;h2&gt;Larger Example using the &lt;code&gt;arrow&lt;/code&gt; backend&lt;/h2&gt; &#xA;&lt;p&gt;For a more involved example, using a different backend, let’s say we have a larger dataset of taxi trips from NY (see also the official &lt;a href=&#34;https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page&#34;&gt;source of the data&lt;/a&gt;), that we have saved as a local arrow dataset (using parquet as a data format), where we want to make sure that some variables are in-line with our expectations/rules.&lt;/p&gt; &#xA;&lt;h3&gt;1 Download and Prepare Data&lt;/h3&gt; &#xA;&lt;p&gt;First we prepare the data by downloading it and writing the dataset to &lt;code&gt;.parquet&lt;/code&gt; files. This needs to be done only once and is shown for reproducibility reasons only, the actual &lt;code&gt;dataverifyr&lt;/code&gt; code is shown below the next block&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(arrow)&#xA;url &amp;lt;- &#34;https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2018-01.parquet&#34;&#xA;file &amp;lt;- &#34;yellow_tripdata_2018-01.parquet&#34;&#xA;if (!file.exists(file)) download.file(url, file, method = &#34;curl&#34;)&#xA;file.size(file) / 1e6 # in MB&#xA;#&amp;gt; [1] 123.6685&#xA;&#xA;# quick check of the filesize&#xA;d &amp;lt;- read_parquet(file)&#xA;dim(d)&#xA;#&amp;gt; [1] 8760687      19&#xA;names(d)&#xA;#&amp;gt;  [1] &#34;VendorID&#34;              &#34;tpep_pickup_datetime&#34;  &#34;tpep_dropoff_datetime&#34; &#34;passenger_count&#34;      &#xA;#&amp;gt;  [5] &#34;trip_distance&#34;         &#34;RatecodeID&#34;            &#34;store_and_fwd_flag&#34;    &#34;PULocationID&#34;         &#xA;#&amp;gt;  [9] &#34;DOLocationID&#34;          &#34;payment_type&#34;          &#34;fare_amount&#34;           &#34;extra&#34;                &#xA;#&amp;gt; [13] &#34;mta_tax&#34;               &#34;tip_amount&#34;            &#34;tolls_amount&#34;          &#34;improvement_surcharge&#34;&#xA;#&amp;gt; [17] &#34;total_amount&#34;          &#34;congestion_surcharge&#34;  &#34;airport_fee&#34;&#xA;&#xA;# write the dataset to disk&#xA;write_dataset(d, &#34;nyc-taxi-data&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2 Create Rules in &lt;code&gt;yaml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Next, we can create some rules that we will use to check our data. As we saw earlier, we can create the rules in R using the &lt;code&gt;rule()&lt;/code&gt; and &lt;code&gt;ruleset()&lt;/code&gt; functions, there is however, the (in my opinion) preferred option to separate the code from the rules by writing the rules in a separate yaml file and reading them into R.&lt;/p&gt; &#xA;&lt;p&gt;First we display the hand-written contents of the &lt;code&gt;nyc_data_rules.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: &#39;Rule for: passenger_count&#39;&#xA;  expr: passenger_count &amp;gt;= 0 &amp;amp; passenger_count &amp;lt;= 10&#xA;  allow_na: no&#xA;  negate: no&#xA;  index: 1&#xA;- name: &#39;Rule for: trip_distance&#39;&#xA;  expr: trip_distance &amp;gt;= 0 &amp;amp; trip_distance &amp;lt;= 1000&#xA;  allow_na: no&#xA;  negate: no&#xA;  index: 2&#xA;- name: &#39;Rule for: payment_type&#39;&#xA;  expr: payment_type %in% c(0, 1, 2, 3, 4)&#xA;  allow_na: no&#xA;  negate: no&#xA;  index: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, we can load, display, and finally check the rules against the data&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rules &amp;lt;- read_rules(&#34;nyc_data_rules.yaml&#34;)&#xA;rules&#xA;#&amp;gt; &amp;lt;Verification Ruleset with 3 elements&amp;gt;&#xA;#&amp;gt;   [1] &#39;Rule for: passenger_count&#39; matching `passenger_count &amp;gt;= 0 &amp;amp; passenger_count &amp;lt;= 10` (allow_na: FALSE)&#xA;#&amp;gt;   [2] &#39;Rule for: trip_distance&#39; matching `trip_distance &amp;gt;= 0 &amp;amp; trip_distance &amp;lt;= 1000` (allow_na: FALSE)&#xA;#&amp;gt;   [3] &#39;Rule for: payment_type&#39; matching `payment_type %in% c(0, 1, 2, 3, 4)` (allow_na: FALSE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3 Verify that the Data matches the given Rules&lt;/h3&gt; &#xA;&lt;p&gt;Now we can check if the data follows our rules or if we have unexpected data points:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# open the dataset &#xA;ds &amp;lt;- open_dataset(&#34;nyc-taxi-data/&#34;)&#xA;&#xA;# perform the data validation check&#xA;res &amp;lt;- check_data(ds, rules)&#xA;res&#xA;#&amp;gt; # A tibble: 3 × 10&#xA;#&amp;gt;   name                      expr              allow…¹ negate   tests    pass  fail warn  error time &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;                     &amp;lt;chr&amp;gt;             &amp;lt;lgl&amp;gt;   &amp;lt;lgl&amp;gt;    &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;drt&amp;gt;&#xA;#&amp;gt; 1 Rule for: passenger_count passenger_count … FALSE   FALSE  8760687 8760687     0 &#34;&#34;    &#34;&#34;    0.56…&#xA;#&amp;gt; 2 Rule for: trip_distance   trip_distance &amp;gt;=… FALSE   FALSE  8760687 8760686     1 &#34;&#34;    &#34;&#34;    0.43…&#xA;#&amp;gt; 3 Rule for: payment_type    payment_type %in… FALSE   FALSE  8760687 8760687     0 &#34;&#34;    &#34;&#34;    0.42…&#xA;#&amp;gt; # … with abbreviated variable name ¹​allow_na&#xA;&#xA;plot_res(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/DavZim/dataverifyr/main/man/figures/README-taxi3-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Using the power of &lt;code&gt;arrow&lt;/code&gt;, we were able to scan 8+mln observations for three rules in about 1.5 seconds (YMMV). As we can see from the results, there is one unexpected value, lets quickly investigate using the &lt;code&gt;filter_fails()&lt;/code&gt; function, which filters a dataset for the failed rule matches&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res |&amp;gt;&#xA;  filter_fails(ds) |&amp;gt; &#xA;  # only select a couple of variables for brevity&#xA;  dplyr::select(tpep_pickup_datetime, tpep_dropoff_datetime, trip_distance)&#xA;#&amp;gt; # A tibble: 1 × 3&#xA;#&amp;gt;   tpep_pickup_datetime tpep_dropoff_datetime trip_distance&#xA;#&amp;gt;   &amp;lt;dttm&amp;gt;               &amp;lt;dttm&amp;gt;                        &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 2018-01-30 12:41:02  2018-01-30 12:42:09         189484.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As we can see, this is probably a data error (a trip distance of 190k miles in 1 minute seems - ehm stellar…).&lt;/p&gt; &#xA;&lt;h2&gt;Using a &lt;code&gt;DBI&lt;/code&gt; Backend&lt;/h2&gt; &#xA;&lt;p&gt;If you have a &lt;code&gt;SQLite&lt;/code&gt; or &lt;code&gt;duckdb&lt;/code&gt; database, you can use the package like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DBI)&#xA;library(dplyr)&#xA;&#xA;# connect to a duckdb database&#xA;con &amp;lt;- dbConnect(duckdb::duckdb(&#34;duckdb-database.duckdb&#34;))&#xA;# for demo purposes write the data once&#xA;dbWriteTable(con, &#34;mtcars&#34;, mtcars)&#xA;&#xA;# create a tbl connection, which can be used in the checks&#xA;tbl &amp;lt;- tbl(con, &#34;mtcars&#34;)&#xA;&#xA;# create rules&#xA;rules &amp;lt;- ruleset(&#xA;  rule(mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30),&#xA;  rule(cyl %in% c(4, 8)),&#xA;  rule(vs %in% c(0, 1), allow_na = TRUE)&#xA;)&#xA;&#xA;# check rules&#xA;res &amp;lt;- check_data(tbl, rules)&#xA;res&#xA;#&amp;gt; # A tibble: 3 × 10&#xA;#&amp;gt;   name          expr                allow_na negate tests  pass  fail warn  error time          &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;               &amp;lt;lgl&amp;gt;    &amp;lt;lgl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;drtn&amp;gt;        &#xA;#&amp;gt; 1 Rule for: mpg mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30 FALSE    FALSE     32    28     4 &#34;&#34;    &#34;&#34;    3.5227668 secs&#xA;#&amp;gt; 2 Rule for: cyl cyl %in% c(4, 8)    FALSE    FALSE     32    25     7 &#34;&#34;    &#34;&#34;    0.2015200 secs&#xA;#&amp;gt; 3 Rule for: vs  vs %in% c(0, 1)     TRUE     FALSE     32    32     0 &#34;&#34;    &#34;&#34;    0.1898661 secs&#xA;&#xA;filter_fails(res, tbl, per_rule = TRUE)&#xA;#&amp;gt; $`mpg &amp;gt; 10 &amp;amp; mpg &amp;lt; 30`&#xA;#&amp;gt; # A tibble: 4 × 11&#xA;#&amp;gt;     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1  32.4     4  78.7    66  4.08 2.2   19.47     1     1     4     1&#xA;#&amp;gt; 2  30.4     4  75.7    52  4.93 1.615 18.52     1     1     4     2&#xA;#&amp;gt; 3  33.9     4  71.1    65  4.22 1.835 19.9      1     1     4     1&#xA;#&amp;gt; 4  30.4     4  95.1   113  3.77 1.513 16.9      1     1     5     2&#xA;#&amp;gt; &#xA;#&amp;gt; $`cyl %in% c(4, 8)`&#xA;#&amp;gt; # A tibble: 7 × 11&#xA;#&amp;gt;     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1  21       6 160     110  3.9  2.62  16.46     0     1     4     4&#xA;#&amp;gt; 2  21       6 160     110  3.9  2.875 17.02     0     1     4     4&#xA;#&amp;gt; 3  21.4     6 258     110  3.08 3.215 19.44     1     0     3     1&#xA;#&amp;gt; 4  18.1     6 225     105  2.76 3.46  20.22     1     0     3     1&#xA;#&amp;gt; 5  19.2     6 167.6   123  3.92 3.44  18.3      1     0     4     4&#xA;#&amp;gt; 6  17.8     6 167.6   123  3.92 3.44  18.9      1     0     4     4&#xA;#&amp;gt; 7  19.7     6 145     175  3.62 2.77  15.5      0     1     5     6&#xA;&#xA;# lastly disconnect from the database again&#xA;dbDisconnect(con, shutdown = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Alternative Data Validation R Libraries&lt;/h1&gt; &#xA;&lt;p&gt;If this library is not what you are looking for, the following might be good alternatives to validate your data:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rich-iannone.github.io/pointblank/&#34;&gt;&lt;code&gt;pointblank&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/data-cleaning/validate&#34;&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Appsilon/data.validator&#34;&gt;&lt;code&gt;data.validator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>