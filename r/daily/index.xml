<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-25T01:38:31Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>randellsoteo/R-Analytics</title>
    <updated>2023-12-25T01:38:31Z</updated>
    <id>tag:github.com,2023-12-25:/randellsoteo/R-Analytics</id>
    <link href="https://github.com/randellsoteo/R-Analytics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For web scraping&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>YuLab-SMU/fanyi</title>
    <updated>2023-12-25T01:38:31Z</updated>
    <id>tag:github.com,2023-12-25:/YuLab-SMU/fanyi</id>
    <link href="https://github.com/YuLab-SMU/fanyi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Translate Words or Sentences via Online Translators&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;fanyi&lt;/code&gt;: Translate Words or Sentences via Online Translators&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=fanyi&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/fanyi?color=green&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/fanyi?color=green&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/fanyi?color=green&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/last-week/fanyi?color=green&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Useful functions to translate text for multiple languages using online translators. For example, by translating error messages and descriptive analysis results into a language familiar to the user, it enables a better understanding of the information, thereby reducing the barriers caused by language. It offers several helper functions to query gene information to help interpretation of interested genes (e.g., marker genes, differential expression genes), and provides utilities to translate ggplot graphics.&lt;/p&gt; &#xA;&lt;p&gt;To cite fanyi in publications use:&lt;/p&gt; &#xA;&lt;p&gt;G Yu. Using fanyi to assist research communities in retrieving and interpreting information. &lt;em&gt;&lt;strong&gt;bioRxiv&lt;/strong&gt;&lt;/em&gt;, 2023. doi: &lt;a href=&#34;https://www.biorxiv.org/content/10.1101/2023.12.21.572729&#34;&gt;10.1101/2023.12.21.572729&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;✍&lt;/span&gt; Authors&lt;/h2&gt; &#xA;&lt;p&gt;Guangchuang YU&lt;/p&gt; &#xA;&lt;p&gt;School of Basic Medical Sciences, Southern Medical University&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://yulab-smu.top&#34;&gt;https://yulab-smu.top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;⏬&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;Get the released version from CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;fanyi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the development version from github:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## install.packages(&#34;yulab.utils&#34;)&#xA;yulab.utils::install_zip_gh(&#34;YuLab-SMU/fanyi&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔰&lt;/span&gt; Usages&lt;/h2&gt; &#xA;&lt;h3&gt;to switch from different online translators:&lt;/h3&gt; &#xA;&lt;p&gt;use &lt;code&gt;set_translate_source()&lt;/code&gt; to set the default translator using in &lt;code&gt;translate()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;to use &lt;code&gt;baidu&lt;/code&gt; translate:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;go to &lt;a href=&#34;https://fanyi-api.baidu.com/manage/developer&#34;&gt;https://fanyi-api.baidu.com/manage/developer&lt;/a&gt; and regist as an individual developer&lt;/li&gt; &#xA; &lt;li&gt;get &lt;code&gt;appid&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; (密钥)&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;appid&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;source = &#34;baidu&#34;&lt;/code&gt; using &lt;code&gt;set_translate_option()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;have fun with &lt;code&gt;translate()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;to use &lt;code&gt;bing&lt;/code&gt; translate:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;regist a free azure account&lt;/li&gt; &#xA; &lt;li&gt;enable &lt;code&gt;Azure AI services | Translator&lt;/code&gt; from &lt;a href=&#34;https://portal.azure.com/&#34;&gt;https://portal.azure.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;create a translation service with free tier pricing version (you need a visa/master card to complete registion and will not be charged until exceed 2 million characters monthly)&lt;/li&gt; &#xA; &lt;li&gt;get your &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt; with &lt;code&gt;source = &#34;bing&#34;&lt;/code&gt; using &lt;code&gt;set_translate_option()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;have fun with &lt;code&gt;translate()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;to use &lt;code&gt;youdao&lt;/code&gt; translate:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;go to &lt;a href=&#34;https://ai.youdao.com/&#34;&gt;https://ai.youdao.com/&lt;/a&gt; and register an account&lt;/li&gt; &#xA; &lt;li&gt;click &lt;code&gt;自然语言翻译服务&lt;/code&gt; and create an app from subsection &lt;code&gt;文本翻译&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;get your &lt;code&gt;应用ID&lt;/code&gt; as appid, and &lt;code&gt;应用秘钥&lt;/code&gt; as key&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;appid&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;source = &#34;youdao&#34;&lt;/code&gt; using &lt;code&gt;set_translate_option()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;have fun with &lt;code&gt;translate()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(bonus) you can also create &lt;code&gt;术语表&lt;/code&gt; (dictionary for the terms) as a user-defined dictionary and get the dict id to help you get precise translation in certain domain.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;helper functions:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gene_summary()&lt;/code&gt; allows retrieving gene information from NCBI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;translate_ggplot()&lt;/code&gt; allows translating axis labels of a ggplot graph.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🉐&lt;/span&gt; Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(fanyi)&#xA;&#xA;##&#xA;## run `set_translate_option()` to setup&#xA;##&#xA;&#xA;text &amp;lt;- &#39;clusterProfiler supports exploring functional &#xA;    characteristics of both coding and non-coding genomics &#xA;    data for thousands of species with up-to-date gene annotation&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;translate(text, from=&#39;en&#39;, to=&#39;zh&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;clusterProfiler支持通过最新的基因注释探索数千个物种的编码和非编码基因组学数据的功能特征&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;translate(text, from=&#39;en&#39;, to=&#39;jp&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;clusterProfilerは、最新の遺伝子注釈による数千種の種の符号化および非符号化ゲノム学データの機能的特徴の探索を支援する&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(DOSE)&#xA;library(enrichplot)&#xA;data(geneList)&#xA;de &amp;lt;- names(geneList)[1:200]&#xA;x &amp;lt;- enrichDO(de)&#xA;p &amp;lt;- dotplot(x)&#xA;p2 &amp;lt;- translate_ggplot(p, axis=&#39;y&#39;)&#xA;p3 &amp;lt;- translate_ggplot(p, axis=&#39;y&#39;, to=&#39;kor&#39;)&#xA;p4 &amp;lt;- translate_ggplot(p, axis=&#39;y&#39;, to=&#39;ara&#39;)&#xA;aplot::plot_list(English = p, Chinese = p2, &#xA;                Korean = p3, Arabic = p4, ncol=2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YuLab-SMU/fanyi/devel/README_files/figure-gfm/ggplot-fanyi-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;symbol &amp;lt;- c(&#34;CCR7&#34;, &#34;CD3E&#34;)&#xA;gene &amp;lt;- clusterProfiler::bitr(symbol, &#xA;            fromType = &#39;SYMBOL&#39;, &#xA;            toType = &#39;ENTREZID&#39;, &#xA;            OrgDb = &#39;org.Hs.eg.db&#39;)&#xA;&#xA;gene&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##   SYMBOL ENTREZID&#xA;## 1   CCR7     1236&#xA;## 2   CD3E      916&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res &amp;lt;- gene_summary(gene$ENTREZID)&#xA;names(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;uid&#34;         &#34;name&#34;        &#34;description&#34; &#34;summary&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d &amp;lt;- data.frame(desc=res$description,&#xA;              desc2=translate(res$description))&#xA;d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;##                                             desc                     desc2&#xA;## 1                 C-C motif chemokine receptor 7      C-C基序趋化因子受体7&#xA;## 2 CD3 epsilon subunit of T-cell receptor complex T细胞受体复合体的CD3ε亚基&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;res$summary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[1] The protein encoded by this gene is a member of the G protein-coupled receptor family. This receptor was identified as a gene induced by the Epstein-Barr virus (EBV), and is thought to be a mediator of EBV effects on B lymphocytes. This receptor is expressed in various lymphoid tissues and activates B and T lymphocytes. It has been shown to control the migration of memory T cells to inflamed tissues, as well as stimulate dendritic cell maturation. The chemokine (C-C motif) ligand 19 (CCL19/ECL) has been reported to be a specific ligand of this receptor. Signals mediated by this receptor regulate T cell homeostasis in lymph nodes, and may also function in the activation and polarization of T cells, and in chronic inflammation pathogenesis. Alternative splicing of this gene results in multiple transcript variants. [provided by RefSeq, Sep 2014]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[2] The protein encoded by this gene is the CD3-epsilon polypeptide, which together with CD3-gamma, -delta and -zeta, and the T-cell receptor alpha/beta and gamma/delta heterodimers, forms the T-cell receptor-CD3 complex. This complex plays an important role in coupling antigen recognition to several intracellular signal-transduction pathways. The genes encoding the epsilon, gamma and delta polypeptides are located in the same cluster on chromosome 11. The epsilon polypeptide plays an essential role in T-cell development. Defects in this gene cause immunodeficiency. This gene has also been linked to a susceptibility to type I diabetes in women. [provided by RefSeq, Jul 2008]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;translate(res$summary)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[1] 该基因编码的蛋白质是G蛋白偶联受体家族的成员。该受体被鉴定为EB病毒（EBV）诱导的基因，被认为是EB病毒对B淋巴细胞影响的媒介。这种受体在各种淋巴组织中表达，并激活B和T淋巴细胞。它已被证明可以控制记忆T细胞向炎症组织的迁移，并刺激树突细胞成熟。据报道，趋化因子（C-C基序）配体19（CCL19/ECL）是该受体的特异性配体。该受体介导的信号调节淋巴结中的T细胞稳态，也可能在T细胞的激活和极化以及慢性炎症发病机制中发挥作用。该基因的选择性剪接导致多种转录物变体。【RefSeq提供，2014年9月】&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[2] 该基因编码的蛋白质是CD3ε多肽，其与CD3γ、-Δ和-ζ以及T细胞受体α/β和γ/Δ异二聚体一起形成T细胞受体-CD3复合物。这种复合物在将抗原识别与几种细胞内信号转导途径偶联方面起着重要作用。编码ε、γ和δ多肽的基因位于11号染色体上的同一簇中。ε多肽在T细胞发育中起着重要作用。这种基因的缺陷会导致免疫缺陷。该基因也与女性易患I型糖尿病有关。【RefSeq提供，2008年7月】&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>simon-smart88/shinyscholar</title>
    <updated>2023-12-25T01:38:31Z</updated>
    <id>tag:github.com,2023-12-25:/simon-smart88/shinyscholar</id>
    <link href="https://github.com/simon-smart88/shinyscholar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A template for creating modular shiny applications that meet academic standards and are reproducible&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shinyscholar (v0.1.0)&lt;/h1&gt; &#xA;&lt;img src=&#34;https://github.com/simon-smart88/shinyscholar/raw/master/inst/shiny/www/logo.png&#34; width=&#34;259&#34; height=&#34;300&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;Shinyscholar is a basic application written in R that can be used as a template to create complex applications that are modular, meet academic standards of attribution and are reproducible outside of the application. By using &lt;em&gt;shinyscholar&lt;/em&gt;, to create a template application, developers will be encouraged to produce applications that are maintainable and run reliably without having to learn software development best-practices from scratch. &lt;em&gt;shinyscholar&lt;/em&gt; was &lt;a href=&#34;https://github.com/wallaceEcoMod/wallace/tree/51a3ebe10ffd797fc36ad2d2cf8245b014d11b41&#34;&gt;forked&lt;/a&gt; from &lt;code&gt;{wallace}&lt;/code&gt; v2.0.5 (&lt;a href=&#34;https://cran.r-project.org/package=wallace&#34;&gt;CRAN&lt;/a&gt;, &lt;a href=&#34;https://wallaceecomod.github.io/wallace/index.html&#34;&gt;website&lt;/a&gt;) a modular platform for reproducible modelling of species distributions. Specifically, it harnesses the higher-level structure and core attributes of Wallace but removes its discipline-specific features, yielding a generic template for developers to make their own applications. We are very grateful to the contributors to &lt;code&gt;{wallace}&lt;/code&gt; and the features retained from it and the new features added in &lt;em&gt;shinyscholar&lt;/em&gt; are described in &lt;code&gt;NEWS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Shinyscholar&lt;/em&gt; contains four components (Select, Plot, Reproduce, Template) each of which contain one or two modules (&lt;code&gt;select_query&lt;/code&gt;, &lt;code&gt;select_user&lt;/code&gt;, &lt;code&gt;plot_hist&lt;/code&gt;, &lt;code&gt;plot_scatter&lt;/code&gt;, &lt;code&gt;rep_markdown&lt;/code&gt; and &lt;code&gt;rep_refPackages&lt;/code&gt;, &lt;code&gt;template_create&lt;/code&gt;) and their code is found in the &lt;code&gt;inst/shiny/modules&lt;/code&gt; directory. Each of the modules in the Select and Plot components calls a function with the same name that is found in the &lt;code&gt;R&lt;/code&gt; directory. The &lt;code&gt;select_query&lt;/code&gt; module and underlying function is the most complex, containing various components for handling errors, both in the module and in the function. The other modules are very simple but included to demonstrate how multiple components and modules can be used. The Reproduce component is used to generate an rmarkdown document that reproduces the analysis conducted in the application. The Template component can be used to produce and download a template version of an app with the same features.&lt;/p&gt; &#xA;&lt;p&gt;Install &lt;em&gt;shinyscholar&lt;/em&gt; via Github and run the application with the following R code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;simon-smart88/shinyscholar&#34;)&#xA;library(shinyscholar)&#xA;run_shinyscholar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An individual module can be run for development purposes using &lt;code&gt;run_module()&lt;/code&gt; e.g. &lt;code&gt;run_module(&#34;select_query&#34;)&lt;/code&gt; but this requires the most recent version of the module to be installed.&lt;/p&gt; &#xA;&lt;h2&gt;Justification&lt;/h2&gt; &#xA;&lt;p&gt;Shiny apps are a great way to lower the barrier for entry for users to complete complex analyses, by enabling online access to the rich ecosystem of R packages through a graphical user interface. However, often apps produced by academics do not follow best practices in software development or open science. If apps become popular, more features are requested and developers move onto new roles, it may become difficult to maintain their codebase. If users cannot reproduce their analyses outside of the application, it prevents them from modifying analyses to suit their particular use-case, makes it harder to understand the analysis and limits their ability to use the results in publications. Additionally, it may not be possible to determine which R packages are being used in the application, making it more onerous to cite the packages in publications. Other packages exist for creating templates of shiny apps, e.g. &lt;code&gt;{golem}&lt;/code&gt; and &lt;code&gt;{rhino}&lt;/code&gt; but these are not geared towards use by academics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{wallace}&lt;/code&gt; addressed these shortcomings and the attributes of &lt;em&gt;shinyscholar&lt;/em&gt; are built upon those of &lt;code&gt;{wallace}&lt;/code&gt;. Apps built using &lt;em&gt;shinyscholar&lt;/em&gt; should maintain these characteristics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;accessible&lt;/strong&gt;: lowers barriers to implementing complex modular &lt;code&gt;{shiny}&lt;/code&gt; apps for scientific analysis by providing an intuitive graphical user interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;open&lt;/strong&gt;: the code is free to use and modify (GPL 3.0) and can be viewed from inside the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;expandable&lt;/strong&gt;: users can author and contribute modules that enable new methodological options&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;flexible&lt;/strong&gt;: options for user uploads and downloads of results&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;interactive&lt;/strong&gt;: includes an embedded zoomable &lt;code&gt;{leaflet}&lt;/code&gt; map, sortable &lt;code&gt;{DF}&lt;/code&gt; data tables, and visualizations of results&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;instructive&lt;/strong&gt;: features guidance text that educates users about theoretical and analytical aspects of each step in the workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;reproducible&lt;/strong&gt;: users can download an &lt;code&gt;{rmarkdown}&lt;/code&gt; .Rmd file that when run reproduces the analysis, and also save sessions and load them later&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;reliable&lt;/strong&gt;: modules and their underlying functions are tested using &lt;code&gt;{testthat}&lt;/code&gt; and &lt;code&gt;{shinytest2}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;p&gt;Shinyscholar is aimed towards creating applications for complex analyses that have several steps and where there may be multiple options for each step e.g. where the data is sourced from, which model is used or how the results are plotted. It is probably not suitable for use if you have never developed a shiny app before, but if you have developed a simple app which is growing in complexity, it should be fairly straightforward to migrate your code across.&lt;/p&gt; &#xA;&lt;h2&gt;Using shinyscholar as a template&lt;/h2&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Shinyscholar is licensed under the GPLv3 license and consequently any apps made using shinyscholar must be licensed under the same license.&lt;/p&gt; &#xA;&lt;h3&gt;Initialisation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;create_template()&lt;/code&gt; function can be used to create the template for a new app. For example, the following call will produce a folder called &lt;code&gt;demo&lt;/code&gt; in your Documents folder and create an app containing two components (load and plot) each containing two modules. You can choose whether certain features are included in the overall app by setting the &lt;code&gt;include_*&lt;/code&gt; parameters and also whether each module contains mapping, result, rmarkdown and save functionality by setting the parameters inside the &lt;code&gt;modules&lt;/code&gt; dataframe. &lt;code&gt;common_objects&lt;/code&gt; contains a list of the objects which will be shared between modules and will be available inside all of the modules as e.g. &lt;code&gt;common$raster&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also generate a template app using the Template component of the app either run locally with &lt;code&gt;run_shinyscholar()&lt;/code&gt; or at &lt;a href=&#34;https://simonsmart.shinyapps.io/shinyscholar/&#34;&gt;https://simonsmart.shinyapps.io/shinyscholar/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;modules &amp;lt;- data.frame(&#xA;&#34;component&#34; = c(&#34;load&#34;, &#34;load&#34;, &#34;plot&#34;, &#34;plot&#34;),&#xA;&#34;long_component&#34; = c(&#34;Load data&#34;, &#34;Load data&#34;, &#34;Plot data&#34;, &#34;Plot data&#34;),&#xA;&#34;module&#34; = c(&#34;user&#34;, &#34;database&#34;, &#34;histogram&#34;, &#34;scatter&#34;),&#xA;&#34;long_module&#34; = c(&#34;Upload your own data&#34;, &#34;Query a database to obtain data&#34;, &#34;Plot the data as a histogram&#34;, &#34;Plot the data as a scatterplot&#34;),&#xA;&#34;map&#34; = c(TRUE, TRUE, FALSE, FALSE),&#xA;&#34;result&#34; = c(FALSE, FALSE, TRUE, TRUE),&#xA;&#34;rmd&#34; = c(TRUE, TRUE, TRUE, TRUE),&#xA;&#34;save&#34; = c(TRUE, TRUE, TRUE, TRUE))&#xA;&#xA;common_objects = c(&#34;raster&#34;, &#34;histogram&#34;, &#34;scatter&#34;)&#xA;&#xA;shinyscholar::create_template(path = &#34;~/Documents&#34;, name = &#34;demo&#34;, author = &#34;Simon E. H. Smart&#34;,&#xA;include_map = TRUE, include_table = TRUE, include_code = TRUE, common_objects = common_objects, modules = modules, install = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;create_template()&lt;/code&gt; creates the file structure of a package and if &lt;code&gt;install&lt;/code&gt; is set to &lt;code&gt;TRUE&lt;/code&gt; it will be installed automatically. If you prefer to install manually, run &lt;code&gt;devtools::install_local(path = &#34;~/Documents/demo&#34;, force=TRUE)&lt;/code&gt; (assuming as in the example above the app was initiated in &lt;code&gt;~/Documents/demo&lt;/code&gt;). You need to repeat this process after making changes to the app, or if using Rstudio, use Ctrl+Shift+B or Command+Shift+B. Now you can run the app using &lt;code&gt;shiny::runApp(system.file(&#39;shiny&#39;, package=&#39;demo&#39;))&lt;/code&gt; or &lt;code&gt;demo::run_demo()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;h4&gt;Modules&lt;/h4&gt; &#xA;&lt;p&gt;After installing the initial version, the modules only contain skeleton code. There are four files for each module located in &lt;code&gt;/inst/shiny/modules&lt;/code&gt; and each module calls a function found in &lt;code&gt;/R&lt;/code&gt;. It may be helpful to familiarise yourself with the code for the existing application either by viewing the files in &lt;code&gt;/inst/shiny/modules&lt;/code&gt; or by using the Code tab in the app.&lt;/p&gt; &#xA;&lt;h5&gt;.R&lt;/h5&gt; &#xA;&lt;p&gt;This is the main module file and contains the UI and server components as well as any other functionality specified at initialisation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;*_module_ui&lt;/code&gt; function can be developed just like a normal UI function inside a shiny app, but only contains *Input elements and the input ids need wrapping inside &lt;code&gt;ns()&lt;/code&gt; to create ids that are unique to the module. The template contains an &lt;code&gt;actionButton&lt;/code&gt; which when clicked runs the code inside the &lt;code&gt;*_module_server&lt;/code&gt; function. If the computations performed by the module are simple, then you could choose to remove the &lt;code&gt;actionButton()&lt;/code&gt; in the UI and the &lt;code&gt;observeEvent()&lt;/code&gt; so that the server runs reactively whenever the inputs are changed.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;*_module_server&lt;/code&gt; function contains an &lt;code&gt;observeEvent()&lt;/code&gt; which is run when the &lt;code&gt;actionButton()&lt;/code&gt; in the UI is clicked. Inside the &lt;code&gt;observeEvent()&lt;/code&gt; there is a consistent structure to the code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the &lt;em&gt;warning&lt;/em&gt; block, examine inputs to check that they are as expected and issue warnings if not using &lt;code&gt;common$logger %&amp;gt;% writeLog()&lt;/code&gt; See the documentation of &lt;code&gt;shinyscholar::writeLog()&lt;/code&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;function call&lt;/em&gt; block, pass the inputs to the module function.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;load into common&lt;/em&gt; block, store the result(s) of the function call in the relevant &lt;code&gt;common&lt;/code&gt; object.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;metadata&lt;/em&gt; block, store any relevant input metadata which is required to reproduce the function call in the &lt;code&gt;common$meta&lt;/code&gt; object.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;trigger&lt;/em&gt; block, &lt;code&gt;gargoyle::trigger()&lt;/code&gt; is called which can be used to trigger actions elsewhere in the module or app using &lt;code&gt;gargoyle::watch()&lt;/code&gt;. This should not need editing.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;result&lt;/em&gt; block, use the relevant &lt;code&gt;input&lt;/code&gt; values or &lt;code&gt;common&lt;/code&gt; objects to produce &lt;code&gt;render*&lt;/code&gt; objects which will be passed to the &lt;code&gt;_module_result&lt;/code&gt; function.&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;em&gt;return&lt;/em&gt; block, the current &lt;code&gt;input&lt;/code&gt; values can be stored as a &lt;code&gt;list&lt;/code&gt; inside the &lt;code&gt;save&lt;/code&gt; function e.g. &lt;code&gt;select_date = input$date&lt;/code&gt; when the app is saved and then retrieved when the app is loaded using various &lt;code&gt;updateInput&lt;/code&gt; functions inside the &lt;code&gt;load&lt;/code&gt; function e.g. &lt;code&gt;updateSelectInput(session, &#34;date&#34;, selected = state$select_date&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;*_module_result&lt;/code&gt; function contains the &lt;code&gt;*Output()&lt;/code&gt; functions which would normally be included in the UI function. As in the &lt;code&gt;*_module_ui&lt;/code&gt; function, the object ids need wrapping inside &lt;code&gt;ns()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;*_module_map&lt;/code&gt; function updates the &lt;code&gt;{leaflet}&lt;/code&gt; map. &lt;code&gt;map&lt;/code&gt; is a &lt;code&gt;leafletProxy()&lt;/code&gt; object created in the main server function so leaflet functions can be piped to it e.g. &lt;code&gt;map &amp;amp;&amp;gt;&amp;amp; addRasterImage()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;*_module_rmd&lt;/code&gt; function creates a list of objects which are passed to the module&#39;s .Rmd file to reproduce the analysis. The first &lt;code&gt;*_knit&lt;/code&gt; object is a boolean used to control whether or not the module has been used and therefore whether the markdown should be included in the user&#39;s markdown. If the object to be passed over is a vector, then it should be wrapped in &lt;code&gt;printVecAsis()&lt;/code&gt; which converts it to a string so that it can be knitted into the .Rmd.&lt;/p&gt; &#xA;&lt;h5&gt;.Rmd&lt;/h5&gt; &#xA;&lt;p&gt;This is a template for the rmarkdown that can be used to reproduce the module. Objects from &lt;code&gt;*_module_rmd&lt;/code&gt; are passed into this template when the user downloads the rmarkdown. Objects from the &lt;code&gt;*_module_rmd&lt;/code&gt; function are passed into the template when the document is knitted. If &lt;code&gt;module_setting&lt;/code&gt; is added to the list in &lt;code&gt;*_module_rmd&lt;/code&gt; then the value will be substituted for &lt;code&gt;{{module_setting}}&lt;/code&gt; inside the .Rmd. If &lt;code&gt;module_setting&lt;/code&gt; is a string, then you need to use &lt;code&gt;&#34;{{module_setting}}&#34;&lt;/code&gt; inside the .Rmd.&lt;/p&gt; &#xA;&lt;h5&gt;.md&lt;/h5&gt; &#xA;&lt;p&gt;This is a guidance document to explain the theoretical background behind the module and how it has been implemented.&lt;/p&gt; &#xA;&lt;h5&gt;.yml&lt;/h5&gt; &#xA;&lt;p&gt;This is a configuration file used when the modules are loaded. Add any R packages used inside the module or the function that it calls to &lt;code&gt;package&lt;/code&gt; so that they can be cited. Package names should be included as plain text rather than as strings e.g. &lt;code&gt;package: [dplyr,shiny]&lt;/code&gt;. The &lt;code&gt;short_name&lt;/code&gt; field is used to generate the UI for selecting which module to use. By default it uses the &lt;code&gt;module&lt;/code&gt; column of the &lt;code&gt;modules&lt;/code&gt; dataframe but you may wish to edit this for clarity.&lt;/p&gt; &#xA;&lt;h5&gt;.R function&lt;/h5&gt; &#xA;&lt;p&gt;This function performs the computation of the module. Creating this function separately to the shiny functionality is advantageous because it is easier to test and because it can be called from inside the .Rmd file. Messages can be posted to the log from inside these functions if it is passed &lt;code&gt;common$logger&lt;/code&gt; - see &lt;code&gt;/R/select_query.R&lt;/code&gt; for an example.&lt;/p&gt; &#xA;&lt;h4&gt;Components&lt;/h4&gt; &#xA;&lt;p&gt;Each component has a skeleton guidance document located in &lt;code&gt;inst/shiny/Rmd&lt;/code&gt; e.g. &lt;code&gt;gtext_plot.Rmd&lt;/code&gt; which you should use to describe the functionality of the component in general and also include any relevant references.&lt;/p&gt; &#xA;&lt;h4&gt;server.R and ui.R&lt;/h4&gt; &#xA;&lt;p&gt;These should not require substantial editing unless you wish to change the layout or appearance of the app. One exception is the block of code in &lt;code&gt;server.R&lt;/code&gt; that creates the table because this is shared between modules. If your app uses &lt;code&gt;{terra}&lt;/code&gt; objects, they need to be wrapped and unwrapped using &lt;code&gt;terra::wrap()&lt;/code&gt; and &lt;code&gt;terra::unwrap()&lt;/code&gt; when they are saved and loaded (see the &lt;code&gt;server.R&lt;/code&gt; file of this repository for an example).&lt;/p&gt; &#xA;&lt;h4&gt;Theme&lt;/h4&gt; &#xA;&lt;p&gt;The colour of elements in the app are controlled by the theme present in the &lt;code&gt;bslib::bs_theme()&lt;/code&gt; function inside &lt;code&gt;ui.R&lt;/code&gt;. The default theme used is &lt;code&gt;spacelab&lt;/code&gt;, but you can choose your own from &lt;a href=&#34;https://bootswatch.com/&#34;&gt;https://bootswatch.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;common.R&lt;/h4&gt; &#xA;&lt;p&gt;This file contains the data structure that is shared between modules and you can add extra objects as you wish. &lt;code&gt;common&lt;/code&gt; is an R6 class object. By default, all the objects in &lt;code&gt;common&lt;/code&gt; are created as &lt;code&gt;NULL&lt;/code&gt; but you may wish to change these load a default value. Objects inside &lt;code&gt;common&lt;/code&gt; are not reactive by default, but you can make them &lt;code&gt;reactiveVal&lt;/code&gt; or &lt;code&gt;reactiveValues&lt;/code&gt;, for example like &lt;code&gt;common$logger&lt;/code&gt;. Objects in &lt;code&gt;common&lt;/code&gt; can also be functions, for example in the demonstration app, &lt;code&gt;common$add_map_layer()&lt;/code&gt; is used to add a layer to &lt;code&gt;common$map_layers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;R/run_module.R&lt;/h4&gt; &#xA;&lt;p&gt;This function is designed to make it easier to develop modules by being able to run a single module in isolation. If your module requires objects from previous steps in an analysis, you can modify this function to modify the state of &lt;code&gt;common&lt;/code&gt; so that the objects a module is dependent on are available immediately. For example, in the demonstration app, the function loads a raster image from a file when the module being run is from the plot component.&lt;/p&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;One test file for each module is created by &lt;code&gt;create_template()&lt;/code&gt; and placed in &lt;code&gt;tests/testthat/&lt;/code&gt;. It contains one unit test for the function which checks that it returns &lt;code&gt;NULL&lt;/code&gt; and one end-to-end test which runs the app runs and that one of the objects in &lt;code&gt;common&lt;/code&gt; remains set as &lt;code&gt;NULL&lt;/code&gt;. During development of the modules, you should add tests to check the function runs as expected, returns errors when it cannot run and that the function runs when called from the app.&lt;/p&gt; &#xA;&lt;h5&gt;Unit tests&lt;/h5&gt; &#xA;&lt;p&gt;Unit tests should be added for each function called by each module to ensure that it produces the intended output and returns errors appropriately. These tests are run in the conventional manner by &lt;code&gt;{testthat}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;End-to-end testing&lt;/h5&gt; &#xA;&lt;p&gt;End-to-end testing is used to validate that the app itself is functions and uses &lt;code&gt;{shinytest2}&lt;/code&gt;. Tests can be recorded using &lt;code&gt;shinytest2::record_test()&lt;/code&gt; but the snapshot functionality of the package does not work well with the architecture of this package. Recording tests is still a useful way to record the input names required to navigate through the app. &lt;code&gt;common&lt;/code&gt; is made available for use inside tests by using &lt;code&gt;common &amp;lt;- app$get_value(export = &#34;common&#34;)&lt;/code&gt; so you can check that objects are in the expected state after running a module.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;shinyscholar was developed as part of a project to develop digital tools for modelling infectious diseases &lt;a href=&#34;https://wellcome.org/news/digital-tools-climate-sensitive-infectious-disease&#34;&gt;funded by Wellcome&lt;/a&gt; at the &lt;a href=&#34;https://le.ac.uk/&#34;&gt;University of Leicester&lt;/a&gt;. The version of Wallace that shinyscholar was derived from was funded by the &lt;a href=&#34;https://www.gbif.org/&#34;&gt;Global Biodiversity Information Facility&lt;/a&gt;, &lt;a href=&#34;https://www.nsf.gov/&#34;&gt;National Science Foundation&lt;/a&gt; and &lt;a href=&#34;https://www.nasa.gov/&#34;&gt;NASA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes for Windows users&lt;/h2&gt; &#xA;&lt;h3&gt;PDF download of session code&lt;/h3&gt; &#xA;&lt;p&gt;If PDF downloading of session code is not working for you, please follow the following instructions, taken from &lt;a href=&#34;https://github.com/rstudio/shiny-examples/issues/34&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;: - Step 1: Download and Install MiKTeX from &lt;a href=&#34;http://miktex.org/2.9/setup&#34;&gt;http://miktex.org/2.9/setup&lt;/a&gt; - Step 2: Run &lt;code&gt;Sys.getenv(&#34;PATH&#34;)&lt;/code&gt; in R studio. This command returns the path where Rstudio is trying to find pdflatex.exe. In Windows (64-bit), it should return &#34;C:\Program Files\MiKTeX 2.9\miktex\bin\x64\pdflatex.exe&#34;. If pdflatex.exe is not located in this location Rstudio gives this error code 41. - Step 3: To set this path variable run: &lt;code&gt;Sys.setenv(PATH=paste(Sys.getenv(&#34;PATH&#34;),&#34;C:/Program Files/MiKTeX 2.9/miktex/bin/x64/&#34;,sep=&#34;;&#34;))&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Only for Github installation&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Windows, please download and install &lt;a href=&#34;https://cran.r-project.org/bin/windows/Rtools/&#34; target=&#34;_blank&#34;&gt;RTools&lt;/a&gt; before installing the &lt;code&gt;devtools&lt;/code&gt; package. After you install RTools, please make sure you add &#34;C:\Rtools\bin&#34; to your PATH variable (instructions &lt;a href=&#34;https://stackoverflow.com/questions/29129681/create-zip-file-error-running-command-had-status-127/29480538#29480538&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). Additionally, when using &lt;code&gt;devtools&lt;/code&gt; on Windows machines, there is a known &lt;a href=&#34;https://github.com/r-lib/devtools/issues/1298&#34; target=&#34;_blank&#34;&gt;bug&lt;/a&gt; that sometimes results in the inability to download all package dependencies. If this happens to you, please install the packages and their dependencies directly from CRAN.&lt;/p&gt;</summary>
  </entry>
</feed>