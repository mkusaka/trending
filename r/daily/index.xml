<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-21T01:45:36Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RConsortium/OOP-WG</title>
    <updated>2023-02-21T01:45:36Z</updated>
    <id>tag:github.com,2023-02-21:/RConsortium/OOP-WG</id>
    <link href="https://github.com/RConsortium/OOP-WG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collaboration space for the Object-oriented Programming Working Group&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;S7&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RConsortium/OOP-WG/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/RConsortium/OOP-WG/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/RConsortium/OOP-WG?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/RConsortium/OOP-WG/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The S7 package is a new OOP system designed to be a successor to S3 and S4. It has been designed and implemented collaboratively by the RConsortium Object-Oriented Programming Working Group, which includes representatives from R-Core, BioConductor, RStudio/tidyverse, and the wider R community.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The long-term goal of this project is to merge S7 in to base R. For now, you can experiment by installing the in-development version from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;rconsortium/OOP-WG&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This section gives a very brief overview of the entirety of S7. Learn more of the basics in &lt;code&gt;vignettte(&#34;S7&#34;)&lt;/code&gt;, the details of method dispatch in &lt;code&gt;vignette(&#34;dispatch&#34;)&lt;/code&gt;, and compatibility with S3 and S4 in &lt;code&gt;vignette(&#34;compatibility&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(S7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Classes and objects&lt;/h3&gt; &#xA;&lt;p&gt;S7 classes have a formal definition, which includes a list of properties and an optional validator. Use &lt;code&gt;new_class()&lt;/code&gt; to define a class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;range &amp;lt;- new_class(&#34;range&#34;,&#xA;  properties = list(&#xA;    start = class_double,&#xA;    end = class_double&#xA;  ),&#xA;  validator = function(self) {&#xA;    if (length(self@start) != 1) {&#xA;      &#34;@start must be length 1&#34;&#xA;    } else if (length(self@end) != 1) {&#xA;      &#34;@end must be length 1&#34;&#xA;    } else if (self@end &amp;lt; self@start) {&#xA;      &#34;@end must be greater than or equal to @start&#34;&#xA;    }&#xA;  }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;new_class()&lt;/code&gt; returns the class object, which is also the constructor you use to create instances of the class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- range(start = 1, end = 10)&#xA;x&#xA;#&amp;gt; &amp;lt;range&amp;gt;&#xA;#&amp;gt;  @ start: num 1&#xA;#&amp;gt;  @ end  : num 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Properties&lt;/h3&gt; &#xA;&lt;p&gt;The data possessed by an object is called its &lt;strong&gt;properties&lt;/strong&gt;. Use &lt;code&gt;@&lt;/code&gt; to get and set properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x@start&#xA;#&amp;gt; [1] 1&#xA;x@end &amp;lt;- 20&#xA;x&#xA;#&amp;gt; &amp;lt;range&amp;gt;&#xA;#&amp;gt;  @ start: num 1&#xA;#&amp;gt;  @ end  : num 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Properties are automatically validated against the type declared in &lt;code&gt;new_class()&lt;/code&gt; (&lt;code&gt;double&lt;/code&gt; in this case), and with the class &lt;strong&gt;validator&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x@end &amp;lt;- &#34;x&#34;&#xA;#&amp;gt; Error: &amp;lt;range&amp;gt;@end must be &amp;lt;double&amp;gt;, not &amp;lt;character&amp;gt;&#xA;x@end &amp;lt;- -1&#xA;#&amp;gt; Error: &amp;lt;range&amp;gt; object is invalid:&#xA;#&amp;gt; - @end must be greater than or equal to @start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generics and methods&lt;/h3&gt; &#xA;&lt;p&gt;Like S3 and S4, S7 uses &lt;strong&gt;functional OOP&lt;/strong&gt; where methods belong to &lt;strong&gt;generic&lt;/strong&gt; functions, and method calls look like all other function calls: &lt;code&gt;generic(object, arg2, arg3)&lt;/code&gt;. This style is called functional because from the outside it looks like a regular function call, and internally the components are also functions.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;new_generic()&lt;/code&gt; to create a new generic: the first argument is the generic name (used in error messages) and the second gives the arguments used for dispatch. The third, and optional argument, supplies the body of the generic. This is only needed if your generic has additional arguments that arenâ€™t used for method dispatch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;inside &amp;lt;- new_generic(&#34;inside&#34;, &#34;x&#34;, function(x, y) {&#xA;  # Actually finds and calls the appropriate method&#xA;  S7_dispatch()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have a generic, you can define a method for a specific class with &lt;code&gt;method&amp;lt;-&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Add a method for our class&#xA;method(inside, range) &amp;lt;- function(x, y) {&#xA;  y &amp;gt;= x@start &amp;amp; y &amp;lt;= x@end&#xA;}&#xA;inside&#xA;#&amp;gt; &amp;lt;S7_generic&amp;gt; function (x, y)  with 1 methods:&#xA;#&amp;gt; 1: method(inside, range)&#xA;&#xA;inside(x, c(0, 5, 10, 15))&#xA;#&amp;gt; [1] FALSE  TRUE  TRUE  TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;method&amp;lt;-&lt;/code&gt; to register methods for base types on S7 generics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;method(inside, class_numeric) &amp;lt;- function(x, y) {&#xA;  y &amp;gt;= min(x) &amp;amp; y &amp;lt;= max(x)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And register methods for S7 classes on S3 or S4 generics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;method(format, range) &amp;lt;- function(x, ...) {&#xA;  paste0(&#34;[&#34;, x@start, &#34;, &#34;, x@end, &#34;]&#34;)&#xA;}&#xA;format(x)&#xA;#&amp;gt; [1] &#34;[1, 20]&#34;&#xA;&#xA;method(mean, range) &amp;lt;- function(x, ...) {&#xA;  (x@start + x@end) / 2&#xA;}&#xA;mean(x)&#xA;#&amp;gt; [1] 10.5&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>