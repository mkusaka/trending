<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:53:00Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JosiahParry/sfdep</title>
    <updated>2022-08-02T01:53:00Z</updated>
    <id>tag:github.com,2022-08-02:/JosiahParry/sfdep</id>
    <link href="https://github.com/JosiahParry/sfdep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tidy interface for spatial dependence&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sfdep&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=sfdep&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/sfdep&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JosiahParry/sfdep/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/JosiahParry/sfdep/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;Lifecycle: stable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the released version from CRAN&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;sfdep&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version of sfdep like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;josiahparry/sfdep&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;There are three main categories of functionality relating to geometry neighbors, weights, and local indicators of spatial association (LISAs).&lt;/p&gt; &#xA;&lt;h3&gt;Neighbors&lt;/h3&gt; &#xA;&lt;p&gt;The most fundamental usage is to find contiguous neighbors from a polygon. This is done with &lt;code&gt;st_contiguity()&lt;/code&gt; which, by default creates queen weights. If rook weights are desired, set &lt;code&gt;queen = FALSE&lt;/code&gt;. Additional arguments can be passed to the underlying &lt;code&gt;spdep::poly2nb()&lt;/code&gt; via &lt;code&gt;...&lt;/code&gt;. &lt;code&gt;st_contiguity()&lt;/code&gt; creates an object of class &lt;code&gt;nb&lt;/code&gt; as used by &lt;code&gt;spdep&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(sf)&#xA;library(sfdep)&#xA;library(dplyr)&#xA;&#xA;# grab geometry&#xA;geo &amp;lt;- st_geometry(guerry)&#xA;&#xA;nb &amp;lt;- st_contiguity(geo)&#xA;&#xA;nb&#xA;#&amp;gt; Neighbour list object:&#xA;#&amp;gt; Number of regions: 85 &#xA;#&amp;gt; Number of nonzero links: 420 &#xA;#&amp;gt; Percentage nonzero weights: 5.813149 &#xA;#&amp;gt; Average number of links: 4.941176&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can identify higher order neighbors with &lt;code&gt;st_nb_lag()&lt;/code&gt; and the cumulative higher order neighbors with &lt;code&gt;st_nb_lag_cumul()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;st_nb_lag(nb, 2)&#xA;#&amp;gt; Neighbour list object:&#xA;#&amp;gt; Number of regions: 85 &#xA;#&amp;gt; Number of nonzero links: 756 &#xA;#&amp;gt; Percentage nonzero weights: 10.46367 &#xA;#&amp;gt; Average number of links: 8.894118&#xA;st_nb_lag_cumul(nb, 2)&#xA;#&amp;gt; Neighbour list object:&#xA;#&amp;gt; Number of regions: 85 &#xA;#&amp;gt; Number of nonzero links: 1176 &#xA;#&amp;gt; Percentage nonzero weights: 16.27682 &#xA;#&amp;gt; Average number of links: 13.83529&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other point geometry neighbor functions are &lt;code&gt;st_knn()&lt;/code&gt;, &lt;code&gt;st_dist_band()&lt;/code&gt;, &lt;code&gt;st_nb_dists()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Weights&lt;/h3&gt; &#xA;&lt;p&gt;Polygon weights are created with &lt;code&gt;st_weights()&lt;/code&gt; (which calls &lt;code&gt;spdep::nb2listw&lt;/code&gt;). By default they are row standardized weights.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wt &amp;lt;- st_weights(nb)&#xA;&#xA;wt[1:2]&#xA;#&amp;gt; [[1]]&#xA;#&amp;gt; [1] 0.25 0.25 0.25 0.25&#xA;#&amp;gt; &#xA;#&amp;gt; [[2]]&#xA;#&amp;gt; [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other point based weights can be created with &lt;code&gt;st_nb_dists()&lt;/code&gt;, &lt;code&gt;st_kernel_weights()&lt;/code&gt; and &lt;code&gt;st_inverse_weights()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Local Indicators of Spatial Association (LISAs)&lt;/h3&gt; &#xA;&lt;p&gt;LISAs are created from a combination of neighbors and weights and are intended to be used inside of a dplyr pipeline. The below is a worked example of calculating the spatial lag and the local moran.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;g &amp;lt;- guerry %&amp;gt;% &#xA;  mutate(&#xA;    nb = st_contiguity(geometry),&#xA;    wt = st_weights(nb)&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then calculate the spatial lag with &lt;code&gt;st_lag()&lt;/code&gt;. Given that we’ve only modified an sf object, we can visualize this with ggplot2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;&#xA;# create spatial lag&#xA;g %&amp;gt;% &#xA;  mutate(crime_pers_lag = st_lag(crime_pers, nb, wt)) %&amp;gt;% &#xA;  ggplot(aes(fill = crime_pers_lag)) + &#xA;  geom_sf(lwd = 0.2, color = &#34;black&#34;) +&#xA;  theme_void()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JosiahParry/sfdep/main/man/figures/README-unnamed-chunk-6-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Most users will be interested in local indicators of spatial association (LISA). Utilize &lt;code&gt;local_moran()&lt;/code&gt; to do this. &lt;code&gt;local_moran()&lt;/code&gt; will create a data frame column which contains a number of informative variables. For example the cluster that a polygon falls into based on mean, median, or pysal calculations. This will need to be unnested or certain variables hoisted.&lt;/p&gt; &#xA;&lt;p&gt;Create the Local Moran data frame column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lisa &amp;lt;- g %&amp;gt;% &#xA;  mutate(moran = local_moran(crime_pers, nb, wt))&#xA;&#xA;pull(lisa, moran) %&amp;gt;% &#xA;  glimpse()&#xA;#&amp;gt; Rows: 85&#xA;#&amp;gt; Columns: 12&#xA;#&amp;gt; $ ii           &amp;lt;dbl&amp;gt; 0.52226452, 0.82801651, 0.80353997, 0.74188966, 0.2311871…&#xA;#&amp;gt; $ eii          &amp;lt;dbl&amp;gt; -0.0436664933, 0.0169987175, -0.0106696690, -0.0015410148…&#xA;#&amp;gt; $ var_ii       &amp;lt;dbl&amp;gt; 0.3648295427, 0.1244317578, 0.1409560743, 0.2311181704, 0…&#xA;#&amp;gt; $ z_ii         &amp;lt;dbl&amp;gt; 0.9369545, 2.2991365, 2.1686743, 1.5464057, 1.1463544, 1.…&#xA;#&amp;gt; $ p_ii         &amp;lt;dbl&amp;gt; 0.348781971, 0.021497187, 0.030107416, 0.122006629, 0.251…&#xA;#&amp;gt; $ p_ii_sim     &amp;lt;dbl&amp;gt; 0.376, 0.016, 0.036, 0.092, 0.284, 0.124, 0.560, 0.108, 0…&#xA;#&amp;gt; $ p_folded_sim &amp;lt;dbl&amp;gt; 0.188, 0.008, 0.018, 0.046, 0.142, 0.062, 0.280, 0.054, 0…&#xA;#&amp;gt; $ skewness     &amp;lt;dbl&amp;gt; 0.186247324, -0.166050386, -0.065842084, -0.148874532, 0.…&#xA;#&amp;gt; $ kurtosis     &amp;lt;dbl&amp;gt; -0.256988635, -0.083615702, -0.115769407, -0.105166850, 0…&#xA;#&amp;gt; $ mean         &amp;lt;fct&amp;gt; High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo…&#xA;#&amp;gt; $ median       &amp;lt;fct&amp;gt; High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo…&#xA;#&amp;gt; $ pysal        &amp;lt;fct&amp;gt; High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo…&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visualize this by converting insignificant values to NA. This uses a cutoff of 0.1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lisa %&amp;gt;% &#xA;  tidyr::unnest(moran) %&amp;gt;% &#xA;  mutate(pysal = ifelse(p_folded_sim &amp;lt;= 0.1, as.character(pysal), NA)) |&amp;gt; &#xA;  ggplot(aes(fill = pysal)) +&#xA;  geom_sf() +&#xA;  geom_sf(lwd = 0.2, color = &#34;black&#34;) +&#xA;  theme_void() +&#xA;  scale_fill_manual(values = c(&#34;#1C4769&#34;, &#34;#24975E&#34;, &#34;#EACA97&#34;, &#34;#B20016&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JosiahParry/sfdep/main/man/figures/README-unnamed-chunk-8-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Other topics:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sfdep.josiahparry.com/articles/understanding-emerging-hotspots.html#using-emerging_hotspot_analysis&#34;&gt;Emerging Hot Spot Analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sfdep.josiahparry.com/articles/spacetime-s3.html&#34;&gt;Spatio-Temporal Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sfdep.josiahparry.com/reference/index.html#networks&#34;&gt;&lt;code&gt;{sfnetworks}&lt;/code&gt; integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ## Neighbor apply function --&gt; &#xA;&lt;!-- In the case that you want to create custom local level metrics, you can do so with the function `st_nb_apply()`. This provides a purrr like interface to do calculation on an observation $x_{i}$ using it&#39;s neighbors, $x_{ij}$, and their respective weights $w_{ij}$. In the formula syntax utilize `.xij`, `.nb` and `.wt` for these values respectively. We can specify the type of output with the suffix argument. By default this will be `&#34;dbl&#34;`. These can be any purrr sufix. To get the default list output use `&#34;list&#34;`.  --&gt; &#xA;&lt;!-- For example  --&gt; &#xA;&lt;!-- ```{r} --&gt; &#xA;&lt;!-- g %&gt;%  --&gt; &#xA;&lt;!--   transmute(x = st_nb_apply(crime_pers, nb, wt,  --&gt; &#xA;&lt;!--                             .f = function(.xij, .wt, ...) sum((.xij - crime_pers)^2) / (length(.wt) + 1), suffix = &#34;dbl&#34;)) --&gt; &#xA;&lt;!-- ``` --&gt;</summary>
  </entry>
  <entry>
    <title>markjrieke/nplyr</title>
    <updated>2022-08-02T01:53:00Z</updated>
    <id>tag:github.com,2022-08-02:/markjrieke/nplyr</id>
    <link href="https://github.com/markjrieke/nplyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nplyr: a grammar of (nested) data manipulation 🐦&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nplyr&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt; &lt;a href=&#34;https://www.thedatadiary.net/about/&#34;&gt;Mark Rieke&lt;/a&gt;&lt;br&gt; &lt;strong&gt;License:&lt;/strong&gt; &lt;a href=&#34;https://github.com/markjrieke/nplyr/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/markjrieke/nplyr/actions&#34;&gt;&lt;img src=&#34;https://github.com/markjrieke/nplyr/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=nplyr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/nplyr&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=nplyr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/nplyr&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;{nplyr}&lt;/code&gt; is a grammar of nested data manipulation that allows users to perform &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;dplyr&lt;/a&gt;-like manipulations on data frames nested within a list-col of another data frame. Most dplyr verbs have nested equivalents in nplyr. A (non-exhaustive) list of examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nest_mutate()&lt;/code&gt; is the nested equivalent of &lt;code&gt;mutate()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nest_select()&lt;/code&gt; is the nested equivalent of &lt;code&gt;select()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nest_filter()&lt;/code&gt; is the nested equivalent of &lt;code&gt;filter()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nest_summarise()&lt;/code&gt; is the nested equivalent of &lt;code&gt;summarise()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nest_group_by()&lt;/code&gt; is the nested equivalent of &lt;code&gt;group_by()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;nplyr is largely a wrapper for dplyr. For the most up-to-date information on dplyr please visit &lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;dplyr’s website&lt;/a&gt;. If you are new to dplyr, the best place to start is the &lt;a href=&#34;https://r4ds.had.co.nz/transform.html&#34;&gt;data transformation chapter&lt;/a&gt; in R for data science.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of nplyr from CRAN or the development version from github with the &lt;a href=&#34;https://cran.r-project.org/package=devtools&#34;&gt;devtools&lt;/a&gt; or &lt;a href=&#34;https://cran.r-project.org/package=remotes&#34;&gt;remotes&lt;/a&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install from CRAN&#xA;install.packages(&#34;nplyr&#34;)&#xA;&#xA;# install from github&#xA;devtools::install_github(&#34;markjrieke/nplyr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started, we’ll create a nested column for the country data within each continent from the &lt;a href=&#34;https://CRAN.R-project.org/package=gapminder&#34;&gt;gapminder&lt;/a&gt; dataset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(nplyr)&#xA;&#xA;gm_nest &amp;lt;- &#xA;  gapminder::gapminder_unfiltered %&amp;gt;%&#xA;  tidyr::nest(country_data = -continent)&#xA;&#xA;gm_nest&#xA;#&amp;gt; # A tibble: 6 × 2&#xA;#&amp;gt;   continent country_data        &#xA;#&amp;gt;   &amp;lt;fct&amp;gt;     &amp;lt;list&amp;gt;              &#xA;#&amp;gt; 1 Asia      &amp;lt;tibble [578 × 5]&amp;gt;  &#xA;#&amp;gt; 2 Europe    &amp;lt;tibble [1,302 × 5]&amp;gt;&#xA;#&amp;gt; 3 Africa    &amp;lt;tibble [637 × 5]&amp;gt;  &#xA;#&amp;gt; 4 Americas  &amp;lt;tibble [470 × 5]&amp;gt;  &#xA;#&amp;gt; 5 FSU       &amp;lt;tibble [139 × 5]&amp;gt;  &#xA;#&amp;gt; 6 Oceania   &amp;lt;tibble [187 × 5]&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;dplyr can perform operations on the top-level data frame, but with nplyr, we can perform operations on the nested data frames:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gm_nest_example &amp;lt;- &#xA;  gm_nest %&amp;gt;%&#xA;  nest_filter(country_data, year == max(year)) %&amp;gt;%&#xA;  nest_mutate(country_data, pop_millions = pop/1000000)&#xA;&#xA;# each nested tibble is now filtered to the most recent year&#xA;gm_nest_example&#xA;#&amp;gt; # A tibble: 6 × 2&#xA;#&amp;gt;   continent country_data     &#xA;#&amp;gt;   &amp;lt;fct&amp;gt;     &amp;lt;list&amp;gt;           &#xA;#&amp;gt; 1 Asia      &amp;lt;tibble [43 × 6]&amp;gt;&#xA;#&amp;gt; 2 Europe    &amp;lt;tibble [34 × 6]&amp;gt;&#xA;#&amp;gt; 3 Africa    &amp;lt;tibble [53 × 6]&amp;gt;&#xA;#&amp;gt; 4 Americas  &amp;lt;tibble [33 × 6]&amp;gt;&#xA;#&amp;gt; 5 FSU       &amp;lt;tibble [9 × 6]&amp;gt; &#xA;#&amp;gt; 6 Oceania   &amp;lt;tibble [11 × 6]&amp;gt;&#xA;&#xA;# if we unnest, we can see that a new column for pop_millions has been added&#xA;gm_nest_example %&amp;gt;%&#xA;  slice_head(n = 1) %&amp;gt;%&#xA;  tidyr::unnest(country_data)&#xA;#&amp;gt; # A tibble: 43 × 7&#xA;#&amp;gt;    continent country           year lifeExp        pop gdpPercap pop_millions&#xA;#&amp;gt;    &amp;lt;fct&amp;gt;     &amp;lt;fct&amp;gt;            &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;      &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 Asia      Afghanistan       2007    43.8   31889923      975.       31.9  &#xA;#&amp;gt;  2 Asia      Azerbaijan        2007    67.5    8017309     7709.        8.02 &#xA;#&amp;gt;  3 Asia      Bahrain           2007    75.6     708573    29796.        0.709&#xA;#&amp;gt;  4 Asia      Bangladesh        2007    64.1  150448339     1391.      150.   &#xA;#&amp;gt;  5 Asia      Bhutan            2007    65.6    2327849     4745.        2.33 &#xA;#&amp;gt;  6 Asia      Brunei            2007    77.1     386511    48015.        0.387&#xA;#&amp;gt;  7 Asia      Cambodia          2007    59.7   14131858     1714.       14.1  &#xA;#&amp;gt;  8 Asia      China             2007    73.0 1318683096     4959.     1319.   &#xA;#&amp;gt;  9 Asia      Hong Kong, China  2007    82.2    6980412    39725.        6.98 &#xA;#&amp;gt; 10 Asia      India             2007    64.7 1110396331     2452.     1110.   &#xA;#&amp;gt; # … with 33 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;nplyr also supports grouped operations with &lt;code&gt;nest_group_by()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gm_nest_example &amp;lt;- &#xA;  gm_nest %&amp;gt;%&#xA;  nest_group_by(country_data, year) %&amp;gt;%&#xA;  nest_summarise(&#xA;    country_data, &#xA;    n = n(),&#xA;    lifeExp = median(lifeExp),&#xA;    pop = median(pop),&#xA;    gdpPercap = median(gdpPercap)&#xA;  )&#xA;&#xA;gm_nest_example&#xA;#&amp;gt; # A tibble: 6 × 2&#xA;#&amp;gt;   continent country_data     &#xA;#&amp;gt;   &amp;lt;fct&amp;gt;     &amp;lt;list&amp;gt;           &#xA;#&amp;gt; 1 Asia      &amp;lt;tibble [58 × 5]&amp;gt;&#xA;#&amp;gt; 2 Europe    &amp;lt;tibble [58 × 5]&amp;gt;&#xA;#&amp;gt; 3 Africa    &amp;lt;tibble [13 × 5]&amp;gt;&#xA;#&amp;gt; 4 Americas  &amp;lt;tibble [57 × 5]&amp;gt;&#xA;#&amp;gt; 5 FSU       &amp;lt;tibble [44 × 5]&amp;gt;&#xA;#&amp;gt; 6 Oceania   &amp;lt;tibble [56 × 5]&amp;gt;&#xA;&#xA;# unnesting shows summarised tibbles for each continent&#xA;gm_nest_example %&amp;gt;%&#xA;  slice(2) %&amp;gt;%&#xA;  tidyr::unnest(country_data)&#xA;#&amp;gt; # A tibble: 58 × 6&#xA;#&amp;gt;    continent  year     n lifeExp      pop gdpPercap&#xA;#&amp;gt;    &amp;lt;fct&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 Europe     1950    22    65.8 7408264      6343.&#xA;#&amp;gt;  2 Europe     1951    18    65.7 7165515      6509.&#xA;#&amp;gt;  3 Europe     1952    31    65.9 7124673      5210.&#xA;#&amp;gt;  4 Europe     1953    17    67.3 7346100      6774.&#xA;#&amp;gt;  5 Europe     1954    17    68.0 7423300      7046.&#xA;#&amp;gt;  6 Europe     1955    17    68.5 7499400      7817.&#xA;#&amp;gt;  7 Europe     1956    17    68.5 7575800      8224.&#xA;#&amp;gt;  8 Europe     1957    31    67.5 7363802      6093.&#xA;#&amp;gt;  9 Europe     1958    18    69.6 8308052.     8833.&#xA;#&amp;gt; 10 Europe     1959    18    69.6 8379664.     9088.&#xA;#&amp;gt; # … with 48 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found in the package vignettes and function documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Bug reports/feature requests&lt;/h2&gt; &#xA;&lt;p&gt;If you notice a bug, want to request a new feature, or have recommendations on improving documentation, please &lt;a href=&#34;https://github.com/markjrieke/nplyr/issues&#34;&gt;open an issue&lt;/a&gt; in the package repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cynkra/constructive</title>
    <updated>2022-08-02T01:53:00Z</updated>
    <id>tag:github.com,2022-08-02:/cynkra/constructive</id>
    <link href="https://github.com/cynkra/constructive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display Idiomatic Code to Construct Most R Objects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;constructive&lt;/h1&gt; &#xA;&lt;p&gt;{constructive} prints code that can be used to recreate R objects. In a sense it is similar to &lt;code&gt;base::dput()&lt;/code&gt; but {constructive} strives to use “natural” constructors (&lt;code&gt;factor&lt;/code&gt; for factors, &lt;code&gt;as.Date()&lt;/code&gt; for dates, &lt;code&gt;data.frame()&lt;/code&gt; for data frames etc), in order to get output readable by humans.&lt;/p&gt; &#xA;&lt;p&gt;Some use cases are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snapshot tests&lt;/li&gt; &#xA; &lt;li&gt;Exploring objects (alternative to &lt;code&gt;dput()&lt;/code&gt; or &lt;code&gt;str()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Creating reproducible examples from existing data&lt;/li&gt; &#xA; &lt;li&gt;Comparing two objects (using &lt;code&gt;construct_diff()&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;remotes::install_github(&#34;cynkra/constructive&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;A few examples compared to their &lt;code&gt;dput()&lt;/code&gt; output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(constructive)&#xA;&#xA;construct(head(iris, 2))&#xA;#&amp;gt; data.frame(&#xA;#&amp;gt;   Sepal.Length = c(5.1, 4.9),&#xA;#&amp;gt;   Sepal.Width = c(3.5, 3),&#xA;#&amp;gt;   Petal.Length = c(1.4, 1.4),&#xA;#&amp;gt;   Petal.Width = c(0.2, 0.2),&#xA;#&amp;gt;   Species = factor(c(&#34;setosa&#34;, &#34;setosa&#34;), levels = c(&#34;setosa&#34;, &#34;versicolor&#34;, &#34;virginica&#34;))&#xA;#&amp;gt; )&#xA;dput(head(iris, 2))&#xA;#&amp;gt; structure(list(Sepal.Length = c(5.1, 4.9), Sepal.Width = c(3.5, &#xA;#&amp;gt; 3), Petal.Length = c(1.4, 1.4), Petal.Width = c(0.2, 0.2), Species = structure(c(1L, &#xA;#&amp;gt; 1L), .Label = c(&#34;setosa&#34;, &#34;versicolor&#34;, &#34;virginica&#34;), class = &#34;factor&#34;)), row.names = 1:2, class = &#34;data.frame&#34;)&#xA;&#xA;construct(.leap.seconds)&#xA;#&amp;gt; as.POSIXct(&#xA;#&amp;gt;   c(&#xA;#&amp;gt;     &#34;1972-07-01&#34;, &#34;1973-01-01&#34;, &#34;1974-01-01&#34;, &#34;1975-01-01&#34;, &#34;1976-01-01&#34;,&#xA;#&amp;gt;     &#34;1977-01-01&#34;, &#34;1978-01-01&#34;, &#34;1979-01-01&#34;, &#34;1980-01-01&#34;, &#34;1981-07-01&#34;,&#xA;#&amp;gt;     &#34;1982-07-01&#34;, &#34;1983-07-01&#34;, &#34;1985-07-01&#34;, &#34;1988-01-01&#34;, &#34;1990-01-01&#34;,&#xA;#&amp;gt;     &#34;1991-01-01&#34;, &#34;1992-07-01&#34;, &#34;1993-07-01&#34;, &#34;1994-07-01&#34;, &#34;1996-01-01&#34;,&#xA;#&amp;gt;     &#34;1997-07-01&#34;, &#34;1999-01-01&#34;, &#34;2006-01-01&#34;, &#34;2009-01-01&#34;, &#34;2012-07-01&#34;,&#xA;#&amp;gt;     &#34;2015-07-01&#34;, &#34;2017-01-01&#34;&#xA;#&amp;gt;   ),&#xA;#&amp;gt;   tz = &#34;GMT&#34;&#xA;#&amp;gt; )&#xA;dput(.leap.seconds)&#xA;#&amp;gt; structure(c(78796800, 94694400, 126230400, 157766400, 189302400, &#xA;#&amp;gt; 220924800, 252460800, 283996800, 315532800, 362793600, 394329600, &#xA;#&amp;gt; 425865600, 489024000, 567993600, 631152000, 662688000, 709948800, &#xA;#&amp;gt; 741484800, 773020800, 820454400, 867715200, 915148800, 1136073600, &#xA;#&amp;gt; 1230768000, 1341100800, 1435708800, 1483228800), class = c(&#34;POSIXct&#34;, &#xA;#&amp;gt; &#34;POSIXt&#34;), tzone = &#34;GMT&#34;)&#xA;&#xA;library(dplyr, warn.conflicts = FALSE)&#xA;grouped_band_members &amp;lt;- group_by(band_members, band)&#xA;dput(grouped_band_members)&#xA;#&amp;gt; structure(list(name = c(&#34;Mick&#34;, &#34;John&#34;, &#34;Paul&#34;), band = c(&#34;Stones&#34;, &#xA;#&amp;gt; &#34;Beatles&#34;, &#34;Beatles&#34;)), class = c(&#34;grouped_df&#34;, &#34;tbl_df&#34;, &#34;tbl&#34;, &#xA;#&amp;gt; &#34;data.frame&#34;), row.names = c(NA, -3L), groups = structure(list(&#xA;#&amp;gt;     band = c(&#34;Beatles&#34;, &#34;Stones&#34;), .rows = structure(list(2:3, &#xA;#&amp;gt;         1L), ptype = integer(0), class = c(&#34;vctrs_list_of&#34;, &#34;vctrs_vctr&#34;, &#xA;#&amp;gt;     &#34;list&#34;))), class = c(&#34;tbl_df&#34;, &#34;tbl&#34;, &#34;data.frame&#34;), row.names = c(NA, &#xA;#&amp;gt; -2L), .drop = TRUE))&#xA;construct(grouped_band_members)&#xA;#&amp;gt; tibble::tibble(name = c(&#34;Mick&#34;, &#34;John&#34;, &#34;Paul&#34;), band = c(&#34;Stones&#34;, &#34;Beatles&#34;, &#34;Beatles&#34;)) |&amp;gt;&#xA;#&amp;gt;   dplyr::group_by(band)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can provide to the &lt;code&gt;data&lt;/code&gt;argument a list, environment, or package where to look for data so we don’t print more than necessary, for example improving the previous example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;construct(grouped_band_members, data = &#34;dplyr&#34;)&#xA;#&amp;gt; band_members |&amp;gt;&#xA;#&amp;gt;   dplyr::group_by(band)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also trim the output and display only &lt;code&gt;max_atomic&lt;/code&gt; elements at most from a vector, or &lt;code&gt;max_list&lt;/code&gt; elements from a list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;construct(dplyr::starwars, max_atomic = 2, max_list = 1)&#xA;#&amp;gt; tibble::tibble(&#xA;#&amp;gt;   name = c(&#34;Luke Skywalker&#34;, &#34;C-3PO&#34;, +85),&#xA;#&amp;gt;   height = c(172L, 167L, +85),&#xA;#&amp;gt;   mass = c(77, 75, +85),&#xA;#&amp;gt;   hair_color = c(&#34;blond&#34;, NA, +85),&#xA;#&amp;gt;   skin_color = c(&#34;fair&#34;, &#34;gold&#34;, +85),&#xA;#&amp;gt;   eye_color = c(&#34;blue&#34;, &#34;yellow&#34;, +85),&#xA;#&amp;gt;   birth_year = c(19, 112, +85),&#xA;#&amp;gt;   sex = c(&#34;male&#34;, &#34;none&#34;, +85),&#xA;#&amp;gt;   gender = c(&#34;masculine&#34;, &#34;masculine&#34;, +85),&#xA;#&amp;gt;   homeworld = c(&#34;Tatooine&#34;, &#34;Tatooine&#34;, +85),&#xA;#&amp;gt;   species = c(&#34;Human&#34;, &#34;Droid&#34;, +85),&#xA;#&amp;gt;   films = list(c(&#34;The Empire Strikes Back&#34;, &#34;Revenge of the Sith&#34;, +3), +86),&#xA;#&amp;gt;   vehicles = list(c(&#34;Snowspeeder&#34;, &#34;Imperial Speeder Bike&#34;), +86),&#xA;#&amp;gt;   starships = list(c(&#34;X-wing&#34;, &#34;Imperial shuttle&#34;), +86),&#xA;#&amp;gt; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we set those to &lt;code&gt;0&lt;/code&gt; we build a prototype :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;construct(dplyr::starwars, max_atomic = 0, max_list = 0)&#xA;#&amp;gt; tibble::tibble(&#xA;#&amp;gt;   name = character(0),&#xA;#&amp;gt;   height = integer(0),&#xA;#&amp;gt;   mass = numeric(0),&#xA;#&amp;gt;   hair_color = character(0),&#xA;#&amp;gt;   skin_color = character(0),&#xA;#&amp;gt;   eye_color = character(0),&#xA;#&amp;gt;   birth_year = numeric(0),&#xA;#&amp;gt;   sex = character(0),&#xA;#&amp;gt;   gender = character(0),&#xA;#&amp;gt;   homeworld = character(0),&#xA;#&amp;gt;   species = character(0),&#xA;#&amp;gt;   films = list(),&#xA;#&amp;gt;   vehicles = list(),&#xA;#&amp;gt;   starships = list(),&#xA;#&amp;gt; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some other options :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;construct(band_members, tribble = TRUE)&#xA;#&amp;gt; tibble::tribble(&#xA;#&amp;gt;   ~name,  ~band,&#xA;#&amp;gt;   &#34;Mick&#34;, &#34;Stones&#34;,&#xA;#&amp;gt;   &#34;John&#34;, &#34;Beatles&#34;,&#xA;#&amp;gt;   &#34;Paul&#34;, &#34;Beatles&#34;,&#xA;#&amp;gt; )&#xA;construct(as.data.frame(band_members), read.table = TRUE)&#xA;#&amp;gt; read.table(header = TRUE, text = &#34;&#xA;#&amp;gt; name band&#xA;#&amp;gt; Mick Stones&#xA;#&amp;gt; John Beatles&#xA;#&amp;gt; Paul Beatles&#xA;#&amp;gt; &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Environments are not always possible to reproduce but we support some common cases. Due to this several objects such as formulas, srcrefs, R6 objects, ggplot objects etc might not be reproducible exactly. If an approximation is enough one might set &lt;code&gt;check = FALSE&lt;/code&gt; (don’t fail if object cannot be reproduced), &lt;code&gt;ignore_srcref = TRUE&lt;/code&gt; (don’t fail if srcrefs are different), &lt;code&gt;env_as_list = FALSE&lt;/code&gt; (don’t attempt to recreate fancy environments, simply use &lt;code&gt;new.env()&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;construct_diff&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;construct_diff()&lt;/code&gt; highlights the differences in the code used to produce 2 objects.&lt;/p&gt; &#xA;&lt;p&gt;Let’s try it on ggplot objects, these objects are very complex and {constructive} cannot reproduce them exactly (because environments can’t be reproduced reliably) but we can get close enough to see how adding a geom changes the structure of the object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;construct_diff(&#xA;  ggplot(cars, aes(speed, dist)),&#xA;  ggplot(cars, aes(speed, dist)) + geom_point(),&#xA;  max_atomic = 3, &#xA;  env_as_list = FALSE, #  -&amp;gt; use `new.env()` to produce env objects&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cynkra/constructive/master/man/figures/construct_diff.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>