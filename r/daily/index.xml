<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-04T01:42:11Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>swcarpentry/r-novice-inflammation</title>
    <updated>2023-08-04T01:42:11Z</updated>
    <id>tag:github.com,2023-08-04:/swcarpentry/r-novice-inflammation</id>
    <link href="https://github.com/swcarpentry/r-novice-inflammation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Programming with R&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/swcarpentry/r-novice-inflammation/actions/workflows/sandpaper-main.yaml&#34;&gt;&lt;img src=&#34;https://github.com/swcarpentry/r-novice-inflammation/workflows/01%20Build%20and%20Deploy%20Site/badge.svg?sanitize=true&#34; alt=&#34;Build and Deploy Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swc-slack-invite.herokuapp.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Create_Slack_Account-The_Carpentries-071159.svg?sanitize=true&#34; alt=&#34;Create a Slack Account with us&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://swcarpentry.slack.com/messages/C9WDPCMUG&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack_Channel-swc--r--inflammation-E01563.svg?sanitize=true&#34; alt=&#34;Slack Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;r-novice-inflammation&lt;/h1&gt; &#xA;&lt;p&gt;build-and-deploy-readme-badge&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://carpentries.org/&#34;&gt;The Carpentries&lt;/a&gt; teach foundational coding, and data science skills to researchers worldwide. This GitHub repository generates the Software Carpentry lesson website &#34;Introduction to R for non-programmers using inflammation data.&#34; The &lt;a href=&#34;https://swcarpentry.github.io/r-novice-inflammation/&#34;&gt;lesson website can be viewed here&lt;/a&gt;. Making changes in this GitHub repository allows us to change the content of the lesson website.&lt;/p&gt; &#xA;&lt;p&gt;The following people are maintainers for this lesson, and are responsible for determining which changes to incorporate into the lesson:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://diyadas.github.io&#34;&gt;Diya Das&lt;/a&gt; (@diyadas)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carpentries.org/instructors/#HaoZeke&#34;&gt;Rohit Goswami&lt;/a&gt; (@haozeke)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alumni:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://software-carpentry.org/team/#chen_daniel&#34;&gt;Daniel Chen&lt;/a&gt; (@chendaniely)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://carpentries.org/instructors/#katrinleinweber&#34;&gt;Katrin Leinweber&lt;/a&gt; (@katrinleinweber)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The goal of this lesson is to teach novice programmers to write modular code to perform a data analysis. R is used to teach these skills because it is a commonly used programming language in many scientific disciplines. However, the emphasis is not on teaching every aspect of R, but instead on language agnostic principles like automation with loops and encapsulation with functions (see &lt;a href=&#34;https://journals.plos.org/plosbiology/article?id=10.1371/journal.pbio.1001745&#34;&gt;Best Practices for Scientific Computing&lt;/a&gt; to learn more). This lesson is a translation of the &lt;a href=&#34;https://github.com/swcarpentry/python-novice-inflammation&#34;&gt;Python version&lt;/a&gt;, and is also available in &lt;a href=&#34;https://github.com/swcarpentry/matlab-novice-inflammation&#34;&gt;MATLAB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The example used in this lesson analyzes a set of 12 data files with inflammation data collected from a trial for a new treatment for arthritis (the data was simulated). Learners are shown how it is better to create a function and apply it to each of the 12 files using a loop instead of using copy-paste to analyze the 12 files individually.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We value your contributions. How to contribute to this lesson is outlined in &lt;a href=&#34;https://github.com/swcarpentry/r-novice-inflammation/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. If you have questions about our contributing guidelines, please create a new issue in the &lt;a href=&#34;https://github.com/swcarpentry/r-novice-inflammation/issues&#34;&gt;issues&lt;/a&gt; tab and one of the maintainers will respond.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/carpentries/lesson-example&#34;&gt;https://github.com/carpentries/lesson-example&lt;/a&gt; for instructions on formatting, building, and submitting lessons, or run &lt;code&gt;make&lt;/code&gt; in this directory for a list of helpful commands.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions or proposals, please send them to the &lt;a href=&#34;https://carpentries.topicbox.com/groups/discuss&#34;&gt;r-discuss&lt;/a&gt; mailing list.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>b-rodrigues/rix</title>
    <updated>2023-08-04T01:42:11Z</updated>
    <id>tag:github.com,2023-08-04:/b-rodrigues/rix</id>
    <link href="https://github.com/b-rodrigues/rix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reproducible development environments for R with Nix&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/b-rodrigues/rix/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/b-rodrigues/rix/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- badges: end --&gt;&lt;/p&gt; &#xA;&lt;!-- README.md is generated from README.Rmd. Please edit that file --&gt; &#xA;&lt;h1&gt;Rix: Reproducible Environments with Nix&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;{rix}&lt;/code&gt; is an R package that provides functions to help you setup reproducible and isolated development environments that contain R and all the required packages that you need for your project. This is achieved by using the Nix package manager that you must install separately. The Nix package manager is extremely powerful: with it, it is possible to work on totally reproducible development environments, and even install old releases of R and R packages. With Nix, it is essentially possible to replace &lt;code&gt;{renv}&lt;/code&gt; and Docker combined. If you need other tools or languages like Python or Julia, this can also be done easily. Nix is available for Linux, macOS and Windows.&lt;/p&gt; &#xA;&lt;h2&gt;The Nix package manager&lt;/h2&gt; &#xA;&lt;p&gt;Nix is a piece of software that can be installed on your computer (regardless of OS) and can be used to install software like with any other package manager. If you&#39;re familiar with the Ubuntu Linux distribution, you likely have used &lt;code&gt;apt-get&lt;/code&gt; to install software. On macOS, you may have used &lt;code&gt;homebrew&lt;/code&gt; for similar purposes. Nix functions in a similar way, but has many advantages over classic package managers. The main advantage of Nix, at least for our purposes, is that its repository of software is huge. As of writing, it contains more than 80&#39;000 packages, and the entirety of CRAN is available through Nix&#39;s repositories. This means that using Nix, it is possible to install not only R, but also all the packages required for your project. The obvious question is why use Nix instead of simply installing R and R packages as usual. The answer is that Nix makes sure to install every dependency of any package, up to required system libraries. For example, the &lt;code&gt;{xlsx}&lt;/code&gt; package requires the Java programming language to be installed on your computer to successfully install. This can be difficult to achieve, and &lt;code&gt;{xlsx}&lt;/code&gt; bullied many R developers throughout the years (especially those using a Linux distribution, &lt;code&gt;sudo R CMD javareconf&lt;/code&gt; still plagues my nightmares). But with Nix, it suffices to declare that we want the &lt;code&gt;{xlsx}&lt;/code&gt; package for our project, and Nix figures out automatically that Java is required and installs and configures it. It all just happens without any required intervention from the user. The second advantage of Nix is that it is possible to &lt;em&gt;pin&lt;/em&gt; a certain &lt;em&gt;revision&lt;/em&gt; for our project. Pinning a revision ensures that every package that Nix installs will always be at exactly the same versions, regardless of when in the future the packages get installed.&lt;/p&gt; &#xA;&lt;h2&gt;Rix workflow&lt;/h2&gt; &#xA;&lt;p&gt;The idea of &lt;code&gt;{rix}&lt;/code&gt; is for you to declare the environment you need, using the provided &lt;code&gt;rix()&lt;/code&gt; function, which in turn generates the required file for Nix to actually generate that environment. You can then use this environment to either work interactively, or run R scripts. It is possible to have as many environments as projects. Each environment is isolated (or not, it&#39;s up to you).&lt;/p&gt; &#xA;&lt;p&gt;The main function of &lt;code&gt;{rix}&lt;/code&gt; is called &lt;code&gt;rix()&lt;/code&gt;. &lt;code&gt;rix()&lt;/code&gt; has several arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the R version you need for your project&lt;/li&gt; &#xA; &lt;li&gt;a list of R packages that your project needs&lt;/li&gt; &#xA; &lt;li&gt;an optional list of additional software (for example, a Python interpreter, or Quarto)&lt;/li&gt; &#xA; &lt;li&gt;an optional list with packages to install from Github&lt;/li&gt; &#xA; &lt;li&gt;whether you want to use RStudio as an IDE for your project (or VS Code, or another environment)&lt;/li&gt; &#xA; &lt;li&gt;a path to save a file called &lt;code&gt;default.nix&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rix(r_ver = &#34;current&#34;, r_pkgs = c(&#34;dplyr&#34;, &#34;chronicler&#34;), ide = &#34;rstudio&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The call above writes a &lt;code&gt;default.nix&lt;/code&gt; file in the current working directory. This &lt;code&gt;default.nix&lt;/code&gt; can in turn be used by Nix to build an environment containing RStudio, the current (or latest) version of R, and the latest versions of the &lt;code&gt;{dplyr}&lt;/code&gt; and &lt;code&gt;{chronicler}&lt;/code&gt; packages. In th case of RStudio, it actually needs to be installed for each environment. This is because RStudio changes some default environment variables and a globally installed RStudio (the one you install normally) would not recognize the R installed in the Nix environment. This is not the case for other IDEs such as VS code or Emacs. Another example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rix(r_ver = &#34;4.1.0&#34;, r_pkgs = c(&#34;dplyr&#34;, &#34;chronicler&#34;), ide = &#34;code&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This call will generate a &lt;code&gt;default.nix&lt;/code&gt; that installs R version 4.1.0, with the &lt;code&gt;{dplyr}&lt;/code&gt; and &lt;code&gt;{chronicler}&lt;/code&gt; packages. Because the user wishes to use VS Code, the &lt;code&gt;ide&lt;/code&gt; argument was set to &#34;code&#34;. This installs the required &lt;code&gt;{languageserver}&lt;/code&gt; package as well, but unlike &lt;code&gt;ide = &#34;rstudio&#34;&lt;/code&gt; does not install VS Code in that environment. Users should instead use the globally installed VS Code.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also possible to install specific versions of packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rix(r_ver = &#34;current&#34;, r_pkgs = c(&#34;dplyr@1.0.0&#34;), ide = &#34;code&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but usually it is better to build an environment using the version of R that was current at the time of the release of &lt;code&gt;{dplyr}&lt;/code&gt; version 1.0.0, instead of using the current version of R and install an old package.&lt;/p&gt; &#xA;&lt;h3&gt;default.nix&lt;/h3&gt; &#xA;&lt;p&gt;The Nix package manager can be used to build reproducible development environments according to the specifications found in a file called &lt;code&gt;default.nix&lt;/code&gt;, which contains an &lt;em&gt;expression&lt;/em&gt;, in Nix jargon. To make it easier for R programmers to use Nix, &lt;code&gt;{rix}&lt;/code&gt; can be used to write this file for you. &lt;code&gt;{rix}&lt;/code&gt; does not require Nix to be installed, so you could generate expressions and use them on other machines. To actually build an environment using a &lt;code&gt;default.nix&lt;/code&gt;, file, go to where you chose to write it (ideally in a new, empty folder that will be the root folder of your project) and use the Nix package manager to build the environment. Call the following function in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Nix done building the environment, you can start working on it interactively by using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will &lt;em&gt;drop&lt;/em&gt; into a Nix shell. You can now call the IDE of your choice. For RStudio, simply call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rstudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start RStudio. RStudio will use the version of R and library of packages from that environment.&lt;/p&gt; &#xA;&lt;h3&gt;Running programs from an environment&lt;/h3&gt; &#xA;&lt;p&gt;You could create a bash script that you put in the path to make this process more streamlined. For example, if your project is called &lt;code&gt;housing&lt;/code&gt;, you could create this script and execute it to start your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;!#/bin/bash&#xA;nix-shell /absolute/path/to/housing/default.nix --run rstudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will execute RStudio in the environment for the &lt;code&gt;housing&lt;/code&gt; project. If you use &lt;code&gt;{targets}&lt;/code&gt; you could execute the pipeline in the environment by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /absolute/path/to/housing/ &amp;amp;&amp;amp; nix-shell default.nix --run &#34;Rscript -e &#39;targets::tar_make()&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s possible to execute the pipeline automatically using a so-called &#34;shell hook&#34;. See the &#34;Non-interactive use&#34; vignette for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of rix from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;b-rodrigues/rix&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As stated above, &lt;code&gt;{rix}&lt;/code&gt; does not require Nix to be installed to generate &lt;code&gt;default.nix&lt;/code&gt; files. But if you are on a machine on which R is not already installed, and you want to start using &lt;code&gt;{rix}&lt;/code&gt; to generate &lt;code&gt;default.nix&lt;/code&gt; files, you could first start by installing Nix, and then use the following command to drop into a temporary Nix shell that comes with R and &lt;code&gt;{rix}&lt;/code&gt; pre-installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-shell --expr &#34;$(curl -sl https://raw.githubusercontent.com/b-rodrigues/rix/master/inst/extdata/default.nix)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should immediately start an R session inside your terminal. You can now run something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rix(r_ver = &#34;current&#34;,&#xA;    r_pkgs = c(&#34;dplyr&#34;, &#34;ggplot2&#34;),&#xA;    other_pkgs = NULL,&#xA;    git_pkgs = NULL,&#xA;    ide = &#34;rstudio&#34;,&#xA;    path = &#34;.&#34;,&#xA;    overwrite = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to generate a &lt;code&gt;default.nix&lt;/code&gt;, and then use that file to generate an environment with R, Rstudio, &lt;code&gt;{dplyr}&lt;/code&gt; and &lt;code&gt;{ggplot2}&lt;/code&gt;. If you need to add packages for your project, rerun the command above, but add the needed packages to &lt;code&gt;r_pkgs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing Nix&lt;/h2&gt; &#xA;&lt;h3&gt;Windows pre-requisites&lt;/h3&gt; &#xA;&lt;p&gt;If you are on Windows, you need the Windows Subsystem for Linux 2 (WSL2) to run Nix. If you are on a recent version of Windows 10 or 11, you can simply run this as an administrator in PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ps&#34;&gt;wsl --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find further installation notes at &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install&#34;&gt;this official MS documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Nix using the Determinate Systems installer&lt;/h3&gt; &#xA;&lt;p&gt;To make installation and de-installation of Nix simple, we recommend the Determinate Systems installer which you can find &lt;a href=&#34;https://zero-to-nix.com/start/install&#34;&gt;here&lt;/a&gt;. This installer works for any system and make &lt;a href=&#34;https://zero-to-nix.com/start/uninstall&#34;&gt;uninstalling Nix very easy as well&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can also try out Nix inside Docker. To do so, you can start your image from the &lt;a href=&#34;https://hub.docker.com/r/nixos/nix/&#34;&gt;NixOS Docker image&lt;/a&gt;. NixOS is a full GNU/Linux distribution that uses Nix as its system package manager.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This package is developed using the &lt;code&gt;{fusen}&lt;/code&gt; package. If you want to contribute, please edit the &lt;code&gt;.Rmd&lt;/code&gt; files found in the &lt;code&gt;dev/&lt;/code&gt; folder. Then, inflate the package using &lt;code&gt;fusen::inflate_all()&lt;/code&gt;. If no errors are found (warning and notes are ok), then commit and open a PR. To learn how to use &lt;code&gt;{fusen}&lt;/code&gt; (don&#39;t worry, it&#39;s super easy), refer to this &lt;a href=&#34;https://thinkr-open.github.io/fusen/articles/How-to-use-fusen.html&#34;&gt;vignette&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>