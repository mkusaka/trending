<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-15T01:48:45Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ctlab/fgsea</title>
    <updated>2023-06-15T01:48:45Z</updated>
    <id>tag:github.com,2023-06-15:/ctlab/fgsea</id>
    <link href="https://github.com/ctlab/fgsea" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast Gene Set Enrichment Analysis&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ctlab/fgsea&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ctlab/fgsea.svg?branch=master&#34; alt=&#34;Travis-CI Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/assaron/fgsea&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/ctlab/fgsea?branch=master&amp;amp;svg=true&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ctlab/fgsea&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ctlab/fgsea/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;fgsea &lt;img src=&#34;http://jb.gg/badges/research-flat-square.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;fgsea&lt;/code&gt; is an R-package for fast preranked gene set enrichment analysis (GSEA). This package allows to quickly and accurately calculate arbitrarily low GSEA P-values for a collection of gene sets. P-value estimation is based on an adaptive multi-level split Monte-Carlo scheme. See &lt;a href=&#34;https://www.biorxiv.org/content/10.1101/060012v3&#34;&gt;the preprint&lt;/a&gt; for algorithmic details.&lt;/p&gt; &#xA;&lt;p&gt;Full vignette can be found here: &lt;a href=&#34;http://bioconductor.org/packages/devel/bioc/vignettes/fgsea/inst/doc/fgsea-tutorial.html&#34;&gt;http://bioconductor.org/packages/devel/bioc/vignettes/fgsea/inst/doc/fgsea-tutorial.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fgsea&lt;/code&gt; is a part of R/Bioconductor and is availble on Linux, macOS and Windows platforms. For the installation instructions and more details please refer to &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/fgsea.html&#34;&gt;https://bioconductor.org/packages/release/bioc/html/fgsea.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The latest version of &lt;code&gt;fgsea&lt;/code&gt; can be installed from GitHub using &lt;code&gt;devtools&lt;/code&gt; package, which can take up to a few minutes to install all the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(devtools)&#xA;install_github(&#34;ctlab/fgsea&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick run&lt;/h2&gt; &#xA;&lt;p&gt;Loading libraries&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(data.table)&#xA;library(fgsea)&#xA;library(ggplot2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading example pathways and gene-level statistics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;data(examplePathways)&#xA;data(exampleRanks)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running fgsea (should take about 10 seconds):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;fgseaRes &amp;lt;- fgsea(pathways = examplePathways, &#xA;                  stats    = exampleRanks,&#xA;                  minSize  = 15,&#xA;                  maxSize  = 500)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The head of resulting table sorted by p-value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pathway                                 pval   padj   log2err  ES      NES     size&#xA;5990979_Cell_Cycle,_Mitotic             1e-10  4e-09  NA       0.5595  2.7437  317&#xA;5990980_Cell_Cycle                      1e-10  4e-09  NA       0.5388  2.6876  369&#xA;5990981_DNA_Replication                 1e-10  4e-09  NA       0.6440  2.6390  82&#xA;5990987_Synthesis_of_DNA                1e-10  4e-09  NA       0.6479  2.6290  78&#xA;5990988_S_Phase                         1e-10  4e-09  NA       0.6013  2.5069  98&#xA;5990990_G1_S_Transition                 1e-10  4e-09  NA       0.6233  2.5625  84&#xA;5990991_Mitotic_G1-G1_S_phases          1e-10  4e-09  NA       0.6285  2.6256  101&#xA;5991209_RHO_GTPase_Effectors            1e-10  4e-09  NA       0.5249  2.3712  157&#xA;5991454_M_Phase                         1e-10  4e-09  NA       0.5576  2.5491  173&#xA;5991502_Mitotic_Metaphase_and_Anaphase  1e-10  4e-09  NA       0.6053  2.6331  123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see &lt;code&gt;fgsea&lt;/code&gt; has a default lower bound &lt;code&gt;eps=1e-10&lt;/code&gt; for estimating P-values. If you need to estimate P-value more accurately, you can set the &lt;code&gt;eps&lt;/code&gt; argument to zero in the &lt;code&gt;fgsea&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;fgseaRes &amp;lt;- fgsea(pathways = examplePathways, &#xA;                  stats    = exampleRanks,&#xA;                  eps      = 0.0,&#xA;                  minSize  = 15,&#xA;                  maxSize  = 500)&#xA;&#xA;head(fgseaRes[order(pval), ])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;pathway                                          pval      padj      log2err  ES      NES     size&#xA;5990979_Cell_Cycle,_Mitotic                      4.44e-26  1.70e-23  1.3267   0.5595  2.7414  317&#xA;5990980_Cell_Cycle                               5.80e-26  1.70e-23  1.3189   0.5388  2.6747  369&#xA;5991851_Mitotic_Prometaphase                     8.50e-19  1.66e-16  1.1239   0.7253  2.9674  82&#xA;5992217_Resolution_of_Sister_Chromatid_Cohesion  1.50e-17  2.19e-15  1.0769   0.7348  2.9482  74&#xA;5991454_M_Phase                                  1.10e-14  1.29e-12  0.9865   0.5576  2.5436  173&#xA;5991599_Separation_of_Sister_Chromatids          3.01e-14  2.94e-12  0.9653   0.6165  2.6630  116&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One can make an enrichment plot for a pathway:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;plotEnrichment(examplePathways[[&#34;5991130_Programmed_Cell_Death&#34;]],&#xA;               exampleRanks) + labs(title=&#34;Programmed Cell Death&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.dropbox.com/s/zusn9pju7f608sn/enrichment.png?raw=1&#34; alt=&#34;enrichment.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or make a table plot for a bunch of selected pathways:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;topPathwaysUp &amp;lt;- fgseaRes[ES &amp;gt; 0][head(order(pval), n=10), pathway]&#xA;topPathwaysDown &amp;lt;- fgseaRes[ES &amp;lt; 0][head(order(pval), n=10), pathway]&#xA;topPathways &amp;lt;- c(topPathwaysUp, rev(topPathwaysDown))&#xA;plotGseaTable(examplePathways[topPathways], exampleRanks, fgseaRes, &#xA;              gseaParam=0.5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://ctlab.itmo.ru/files/software/fgsea/readme_enrichmentPlot.png&#34;&gt;</summary>
  </entry>
  <entry>
    <title>cole-trapnell-lab/cicero-release</title>
    <updated>2023-06-15T01:48:45Z</updated>
    <id>tag:github.com,2023-06-15:/cole-trapnell-lab/cicero-release</id>
    <link href="https://github.com/cole-trapnell-lab/cicero-release" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/cole-trapnell-lab/cicero-release/actions/workflows/check-standard.yaml/badge.svg?sanitize=true&#34; alt=&#34;example workflow&#34;&gt; &lt;a href=&#34;https://codecov.io/github/cole-trapnell-lab/cicero-release?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/cole-trapnell-lab/cicero-release/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cicero&lt;/h1&gt; &#xA;&lt;h3&gt;Predicting the cis-regulatory landscape&lt;/h3&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;http://cole-trapnell-lab.github.io/cicero-release/&#34;&gt;website&lt;/a&gt; for information on installing and using Cicero&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cran/lidR</title>
    <updated>2023-06-15T01:48:45Z</updated>
    <id>tag:github.com,2023-06-15:/cran/lidR</id>
    <link href="https://github.com/cran/lidR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;❗ This is a read-only mirror of the CRAN R package repository. lidR — Airborne LiDAR Data Manipulation and Visualization for Forestry Applications. Homepage: https://github.com/r-lidar/lidR Report bugs for this package: https://github.com/r-lidar/lidR/issues&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lidR &lt;img src=&#34;https://raw.githubusercontent.com/r-lidar/lidR/master/man/figures/logo200x231.png&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Licence-GPL--3-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;a href=&#34;https://github.com/r-lidar/lidR/actions&#34;&gt;&lt;img src=&#34;https://github.com/r-lidar/lidR/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/r-lidar/lidR?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/r-lidar/lidR/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;R package for Airborne LiDAR Data Manipulation and Visualization for Forestry Applications&lt;/p&gt; &#xA;&lt;p&gt;The lidR package provides functions to read and write &lt;code&gt;.las&lt;/code&gt; and &lt;code&gt;.laz&lt;/code&gt; files, plot point clouds, compute metrics using an area-based approach, compute digital canopy models, thin LiDAR data, manage a collection of LAS/LAZ files, automatically extract ground inventories, process a collection of tiles using multicore processing, segment individual trees, classify points from geographic data, and provides other tools to manipulate LiDAR data in a research and development context.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📖&lt;/span&gt; Read &lt;a href=&#34;https://r-lidar.github.io/lidRbook/index.html&#34;&gt;the book&lt;/a&gt; to get started with the lidR package. See changelogs on &lt;a href=&#34;https://github.com/r-lidar/lidR/raw/master/NEWS.md&#34;&gt;NEW.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To cite the package use &lt;code&gt;citation()&lt;/code&gt; from within R:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;citation(&#34;lidR&#34;)&#xA;#&amp;gt; Roussel, J.R., Auty, D., Coops, N. C., Tompalski, P., Goodbody, T. R. H., Sánchez Meador, A., Bourdon, J.F., De Boissieu, F., Achim, A. (2020). lidR : An R package for analysis of Airborne Laser Scanning (ALS) data. Remote Sensing of Environment, 251 (August), 112061. &amp;lt;doi:10.1016/j.rse.2020.112061&amp;gt;.&#xA;#&amp;gt; Jean-Romain Roussel and David Auty (2021). Airborne LiDAR Data Manipulation and Visualization for Forestry Applications. R package version 3.1.0. https://cran.r-project.org/package=lidR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Key features&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/Jean-Romain/storage/master/README/point-cloud-rotating.gif&#34;&gt; &#xA;&lt;h3&gt;Read and display a las file&lt;/h3&gt; &#xA;&lt;p&gt;In R-fashion style the function &lt;code&gt;plot&lt;/code&gt;, based on &lt;code&gt;rgl&lt;/code&gt;, enables the user to display, rotate and zoom a point cloud. Because &lt;code&gt;rgl&lt;/code&gt; has limited capabilities with respect to large datasets, we also made a package &lt;a href=&#34;https://github.com/Jean-Romain/lidRviewer&#34;&gt;lidRviewer&lt;/a&gt; with better display capabilities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;las &amp;lt;- readLAS(&#34;&amp;lt;file.las&amp;gt;&#34;)&#xA;plot(las)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compute a canopy height model&lt;/h3&gt; &#xA;&lt;img align=&#34;left&#34; src=&#34;https://raw.githubusercontent.com/Jean-Romain/storage/master/README/chm-Khosravipour.png&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;lidR&lt;/code&gt; has several algorithms from the literature to compute canopy height models either point-to-raster based or triangulation based. This allows testing and comparison of some methods that rely on a CHM, such as individual tree segmentation or the computation of a canopy roughness index.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;las &amp;lt;- readLAS(&#34;&amp;lt;file.las&amp;gt;&#34;)&#xA;&#xA;# Khosravipour et al. pitfree algorithm&#xA;thr &amp;lt;- c(0,2,5,10,15)&#xA;edg &amp;lt;- c(0, 1.5)&#xA;chm &amp;lt;- rasterize_canopy(las, 1, pitfree(thr, edg))&#xA;&#xA;plot(chm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read and display a catalog of las files&lt;/h3&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/Jean-Romain/storage/master/README/catalog-plot_interactive.gif&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;lidR&lt;/code&gt; enables the user to manage, use and process a collection of &lt;code&gt;las&lt;/code&gt; files. The function &lt;code&gt;readLAScatalog&lt;/code&gt; builds a &lt;code&gt;LAScatalog&lt;/code&gt; object from a folder. The function &lt;code&gt;plot&lt;/code&gt; displays this collection on an interactive map using the &lt;code&gt;mapview&lt;/code&gt; package (if installed).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ctg &amp;lt;- readLAScatalog(&#34;&amp;lt;folder/&amp;gt;&#34;)&#xA;plot(ctg, map = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a &lt;code&gt;LAScatalog&lt;/code&gt; object the user can (for example) extract some regions of interest (ROI) with &lt;code&gt;clip_roi()&lt;/code&gt;. Using a catalog for the extraction of the ROI guarantees fast and memory-efficient clipping. &lt;code&gt;LAScatalog&lt;/code&gt; objects allow many other manipulations that can be done with multicore processing.&lt;/p&gt; &#xA;&lt;h3&gt;Individual tree segmentation&lt;/h3&gt; &#xA;&lt;img align=&#34;left&#34; src=&#34;https://raw.githubusercontent.com/Jean-Romain/storage/master/README/its-rotating-tree-segmented.gif&#34; margin-right=&#34;5px&#34;&gt; &#xA;&lt;p&gt;The &lt;code&gt;segment_trees()&lt;/code&gt; function has several algorithms from the literature for individual tree segmentation, based either on the digital canopy model or on the point-cloud. Each algorithm has been coded from the source article to be as close as possible to what was written in the peer-reviewed papers. Our goal is to make published algorithms usable, testable and comparable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;las &amp;lt;- readLAS(&#34;&amp;lt;file.las&amp;gt;&#34;)&#xA;&#xA;las &amp;lt;- segment_trees(las, li2012())&#xA;col &amp;lt;- random.colors(200)&#xA;plot(las, color = &#34;treeID&#34;, colorPalette = col)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wall-to-wall dataset processing&lt;/h3&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/Jean-Romain/storage/master/README/catalog-processing.gif&#34;&gt; &#xA;&lt;p&gt;Most of the lidR functions can seamlessly process a set of tiles and return a continuous output. Users can create their own methods using the &lt;code&gt;LAScatalog&lt;/code&gt; processing engine via the &lt;code&gt;catalog_apply()&lt;/code&gt; function. Among other features the engine takes advantage of point indexation with lax files, takes care of processing tiles with a buffer and allows for processing big files that do not fit in memory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load a LAScatalog instead of a LAS file&#xA;ctg &amp;lt;- readLAScatalog(&#34;&amp;lt;path/to/folder/&amp;gt;&#34;)&#xA;&#xA;# Process it like a LAS file&#xA;chm &amp;lt;- rasterize_canopy(ctg, 2, p2r())&#xA;col &amp;lt;- random.colors(50)&#xA;plot(chm, col = col)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full waveform&lt;/h3&gt; &#xA;&lt;img align=&#34;left&#34; src=&#34;https://raw.githubusercontent.com/Jean-Romain/storage/master/FWF/fwf.gif&#34;&gt; &#xA;&lt;p&gt;lidR can read full waveform data from LAS files and provides interpreter functions to convert the raw data into something easier to manage and display in R. The support of FWF is still in the early stages of development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fwf &amp;lt;- readLAS(&#34;&amp;lt;fullwaveform.las&amp;gt;&#34;)&#xA;&#xA;# Interpret the waveform into something easier to manage&#xA;las &amp;lt;- interpret_waveform(fwf)&#xA;&#xA;# Display discrete points and waveforms&#xA;x &amp;lt;- plot(fwf, colorPalette = &#34;red&#34;, bg = &#34;white&#34;)&#xA;plot(las, color = &#34;Amplitude&#34;, add = x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;lidR&lt;/strong&gt; is developed openly at &lt;a href=&#34;https://www.ulaval.ca/en&#34;&gt;Laval University&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development of the &lt;code&gt;lidR&lt;/code&gt; package between 2015 and 2018 was made possible thanks to the financial support of the &lt;a href=&#34;https://awareproject.ca/&#34;&gt;AWARE project (NSERC CRDPJ 462973-14)&lt;/a&gt;; grantee &lt;a href=&#34;https://forestry.ubc.ca/faculty-profile/nicholas-coops/&#34;&gt;Prof Nicholas Coops&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Development of the &lt;code&gt;lidR&lt;/code&gt; package between 2018 and 2021 was made possible thanks to the financial support of the &lt;a href=&#34;https://mffp.gouv.qc.ca/&#34;&gt;Ministère des Forêts, de la Faune et des Parcs of Québec&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Jean-Romain/storage/master/README/logos.svg?sanitize=true&#34; width=&#34;600&#34; align=&#34;center&#34;&gt; &#xA;&lt;h1&gt;Install &lt;code&gt;lidR&lt;/code&gt; dependencies on GNU/Linux&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Ubuntu&#xA;sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable&#xA;sudo apt-get update&#xA;sudo apt-get install libgdal-dev libgeos++-dev libudunits2-dev libproj-dev libx11-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libxt-dev libfftw3-dev&#xA;&#xA;# Fedora&#xA;sudo dnf install gdal-devel geos-devel udunits2-devel proj-devel mesa-libGL-devel mesa-libGLU-devel freetype-devel libjpeg-turbo-devel&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>