<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-08T01:34:55Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tidyomics/plyranges</title>
    <updated>2024-04-08T01:34:55Z</updated>
    <id>tag:github.com,2024-04-08:/tidyomics/plyranges</id>
    <link href="https://github.com/tidyomics/plyranges" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A grammar of genomic data transformation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plyranges: fluent genomic data analysis &lt;img id=&#34;plyranges_logo&#34; src=&#34;https://raw.githubusercontent.com/tidyomics/plyranges/devel/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;125&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tidyomics/plyranges/actions?query=workflow%3AR-CMD-check-bioc&#34;&gt;&lt;img src=&#34;https://github.com/tidyomics/plyranges/workflows/R-CMD-check-bioc/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check-bioc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bioconductor.org/checkResults/release/bioc-LATEST/plyranges&#34;&gt;&lt;img src=&#34;http://www.bioconductor.org/shields/build/release/bioc/plyranges.svg?sanitize=true&#34; alt=&#34;BioC status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/tidyomics/plyranges?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tidyomics/plyranges/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bioconductor.org/packages/release/bioc/html/plyranges.html&#34;&gt;plyranges&lt;/a&gt; provides a consistent interface for importing and wrangling genomics data from a variety of sources. The package defines a grammar of genomic data transformation based on &lt;code&gt;dplyr&lt;/code&gt; and the Bioconductor packages &lt;code&gt;IRanges&lt;/code&gt;, &lt;code&gt;GenomicRanges&lt;/code&gt;, and &lt;code&gt;rtracklayer&lt;/code&gt;. It does this by providing a set of verbs for developing analysis pipelines based on &lt;em&gt;Ranges&lt;/em&gt; objects that represent genomic regions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modify genomic regions with the &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;stretch()&lt;/code&gt; functions.&lt;/li&gt; &#xA; &lt;li&gt;Modify genomic regions while fixing the start/end/center coordinates with the &lt;code&gt;anchor_&lt;/code&gt; family of functions.&lt;/li&gt; &#xA; &lt;li&gt;Sort genomic ranges with &lt;code&gt;arrange()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Modify, subset, and aggregate genomic data with the &lt;code&gt;mutate()&lt;/code&gt;, &lt;code&gt;filter()&lt;/code&gt;, and &lt;code&gt;summarise()&lt;/code&gt;functions.&lt;/li&gt; &#xA; &lt;li&gt;Any of the above operations can be performed on partitions of the data with &lt;code&gt;group_by()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Find nearest neighbour genomic regions with the &lt;code&gt;join_nearest_&lt;/code&gt; family of functions.&lt;/li&gt; &#xA; &lt;li&gt;Find overlaps between ranges with the &lt;code&gt;join_overlaps_&lt;/code&gt; family of functions.&lt;/li&gt; &#xA; &lt;li&gt;Merge all overlapping and adjacent genomic regions with &lt;code&gt;reduce_ranges()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Merge the end points of all genomic regions with &lt;code&gt;disjoin_ranges()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Import and write common genomic data formats with the &lt;code&gt;read_/write_&lt;/code&gt; family of functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details on the features of plyranges, read the &lt;a href=&#34;https://tidyomics.github.io/plyranges/articles/an-introduction.html&#34;&gt;vignette&lt;/a&gt;. For a complete case-study on using plyranges to combine ATAC-seq and RNA-seq results read the &lt;a href=&#34;https://tidyomics.github.io/fluentGenomics&#34;&gt;&lt;em&gt;fluentGenomics&lt;/em&gt; workflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bioconductor.org/packages/release/bioc/html/plyranges.html&#34;&gt;plyranges&lt;/a&gt; can be installed from the latest Bioconductor release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;BiocManager&#34;)&#xA;BiocManager::install(&#34;plyranges&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the development version from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BiocManager::install(&#34;tidyomics/plyranges&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick overview&lt;/h1&gt; &#xA;&lt;h2&gt;About &lt;code&gt;Ranges&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Ranges&lt;/code&gt; objects can either represent sets of integers as &lt;code&gt;IRanges&lt;/code&gt; (which have start, end and width attributes) or represent genomic intervals (which have additional attributes, sequence name, and strand) as &lt;code&gt;GRanges&lt;/code&gt;. In addition, both types of &lt;code&gt;Ranges&lt;/code&gt; can store information about their intervals as metadata columns (for example GC content over a genomic interval).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Ranges&lt;/code&gt; objects follow the tidy data principle: each row of a &lt;code&gt;Ranges&lt;/code&gt; object corresponds to an interval, while each column will represent a variable about that interval, and generally each object will represent a single unit of observation (like gene annotations).&lt;/p&gt; &#xA;&lt;p&gt;We can construct a &lt;code&gt;IRanges&lt;/code&gt; object from a &lt;code&gt;data.frame&lt;/code&gt; with a &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;width&lt;/code&gt; using the &lt;code&gt;as_iranges()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(plyranges)&#xA;df &amp;lt;- data.frame(start = 1:5, width = 5)&#xA;as_iranges(df)&#xA;#&amp;gt; IRanges object with 5 ranges and 0 metadata columns:&#xA;#&amp;gt;           start       end     width&#xA;#&amp;gt;       &amp;lt;integer&amp;gt; &amp;lt;integer&amp;gt; &amp;lt;integer&amp;gt;&#xA;#&amp;gt;   [1]         1         5         5&#xA;#&amp;gt;   [2]         2         6         5&#xA;#&amp;gt;   [3]         3         7         5&#xA;#&amp;gt;   [4]         4         8         5&#xA;#&amp;gt;   [5]         5         9         5&#xA;# alternatively with end&#xA;df &amp;lt;- data.frame(start = 1:5, end = 5:9)&#xA;as_iranges(df)&#xA;#&amp;gt; IRanges object with 5 ranges and 0 metadata columns:&#xA;#&amp;gt;           start       end     width&#xA;#&amp;gt;       &amp;lt;integer&amp;gt; &amp;lt;integer&amp;gt; &amp;lt;integer&amp;gt;&#xA;#&amp;gt;   [1]         1         5         5&#xA;#&amp;gt;   [2]         2         6         5&#xA;#&amp;gt;   [3]         3         7         5&#xA;#&amp;gt;   [4]         4         8         5&#xA;#&amp;gt;   [5]         5         9         5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also construct a &lt;code&gt;GRanges&lt;/code&gt; object in a similar manner. Note that a &lt;code&gt;GRanges&lt;/code&gt; object requires at least a seqnames column to be present in the data.frame (but not necessarily a strand column).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(seqnames = c(&#34;chr1&#34;, &#34;chr2&#34;, &#34;chr2&#34;, &#34;chr1&#34;, &#34;chr2&#34;),&#xA;                 start = 1:5,&#xA;                 width = 5)&#xA;as_granges(df)&#xA;#&amp;gt; GRanges object with 5 ranges and 0 metadata columns:&#xA;#&amp;gt;       seqnames    ranges strand&#xA;#&amp;gt;          &amp;lt;Rle&amp;gt; &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;&#xA;#&amp;gt;   [1]     chr1       1-5      *&#xA;#&amp;gt;   [2]     chr2       2-6      *&#xA;#&amp;gt;   [3]     chr2       3-7      *&#xA;#&amp;gt;   [4]     chr1       4-8      *&#xA;#&amp;gt;   [5]     chr2       5-9      *&#xA;#&amp;gt;   -------&#xA;#&amp;gt;   seqinfo: 2 sequences from an unspecified genome; no seqlengths&#xA;# strand can be specified with `+`, `*` (mising) and `-`&#xA;df$strand &amp;lt;- c(&#34;+&#34;, &#34;+&#34;, &#34;-&#34;, &#34;-&#34;, &#34;*&#34;)&#xA;as_granges(df)&#xA;#&amp;gt; GRanges object with 5 ranges and 0 metadata columns:&#xA;#&amp;gt;       seqnames    ranges strand&#xA;#&amp;gt;          &amp;lt;Rle&amp;gt; &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt;&#xA;#&amp;gt;   [1]     chr1       1-5      +&#xA;#&amp;gt;   [2]     chr2       2-6      +&#xA;#&amp;gt;   [3]     chr2       3-7      -&#xA;#&amp;gt;   [4]     chr1       4-8      -&#xA;#&amp;gt;   [5]     chr2       5-9      *&#xA;#&amp;gt;   -------&#xA;#&amp;gt;   seqinfo: 2 sequences from an unspecified genome; no seqlengths&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example: finding GWAS hits that overlap known exons&lt;/h1&gt; &#xA;&lt;p&gt;Letâ€™s look at a more a realistic example (taken from HelloRanges vignette).&lt;/p&gt; &#xA;&lt;p&gt;Suppose we have two &lt;em&gt;GRanges&lt;/em&gt; objects: one containing coordinates of known exons and another containing SNPs from a GWAS.&lt;/p&gt; &#xA;&lt;p&gt;The first and last 5 exons are printed below, there are two additional columns corresponding to the exon name, and a score.&lt;/p&gt; &#xA;&lt;p&gt;We could check the number of exons per chromosome using &lt;code&gt;group_by&lt;/code&gt; and &lt;code&gt;summarise&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;exons&#xA;#&amp;gt; GRanges object with 459752 ranges and 2 metadata columns:&#xA;#&amp;gt;            seqnames            ranges strand |                   name     score&#xA;#&amp;gt;               &amp;lt;Rle&amp;gt;         &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; |            &amp;lt;character&amp;gt; &amp;lt;numeric&amp;gt;&#xA;#&amp;gt;        [1]     chr1       11874-12227      + | NR_046018_exon_0_0_c..         0&#xA;#&amp;gt;        [2]     chr1       12613-12721      + | NR_046018_exon_1_0_c..         0&#xA;#&amp;gt;        [3]     chr1       13221-14409      + | NR_046018_exon_2_0_c..         0&#xA;#&amp;gt;        [4]     chr1       14362-14829      - | NR_024540_exon_0_0_c..         0&#xA;#&amp;gt;        [5]     chr1       14970-15038      - | NR_024540_exon_1_0_c..         0&#xA;#&amp;gt;        ...      ...               ...    ... .                    ...       ...&#xA;#&amp;gt;   [459748]     chrY 59338754-59338859      + | NM_002186_exon_6_0_c..         0&#xA;#&amp;gt;   [459749]     chrY 59338754-59338859      + | NM_176786_exon_7_0_c..         0&#xA;#&amp;gt;   [459750]     chrY 59340194-59340278      + | NM_002186_exon_7_0_c..         0&#xA;#&amp;gt;   [459751]     chrY 59342487-59343488      + | NM_002186_exon_8_0_c..         0&#xA;#&amp;gt;   [459752]     chrY 59342487-59343488      + | NM_176786_exon_8_0_c..         0&#xA;#&amp;gt;   -------&#xA;#&amp;gt;   seqinfo: 93 sequences from an unspecified genome; no seqlengths&#xA;exons %&amp;gt;%&#xA;  group_by(seqnames) %&amp;gt;%&#xA;  summarise(n = n())&#xA;#&amp;gt; DataFrame with 49 rows and 2 columns&#xA;#&amp;gt;           seqnames         n&#xA;#&amp;gt;              &amp;lt;Rle&amp;gt; &amp;lt;integer&amp;gt;&#xA;#&amp;gt; 1             chr1     43366&#xA;#&amp;gt; 2            chr10     19420&#xA;#&amp;gt; 3            chr11     24476&#xA;#&amp;gt; 4            chr12     24949&#xA;#&amp;gt; 5            chr13      7974&#xA;#&amp;gt; ...            ...       ...&#xA;#&amp;gt; 45  chrUn_gl000222        20&#xA;#&amp;gt; 46  chrUn_gl000223        22&#xA;#&amp;gt; 47  chrUn_gl000228        85&#xA;#&amp;gt; 48            chrX     18173&#xA;#&amp;gt; 49            chrY      4128&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next we create a column representing the transcript_id with &lt;code&gt;mutate&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;exons &amp;lt;- exons %&amp;gt;%&#xA;  mutate(tx_id = sub(&#34;_exon.*&#34;, &#34;&#34;, name))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To find all GWAS SNPs that overlap exons, we use &lt;code&gt;join_overlap_inner&lt;/code&gt;. This will create a new &lt;em&gt;GRanges&lt;/em&gt; with the coordinates of SNPs that overlap exons, as well as metadata from both objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;olap &amp;lt;- join_overlap_inner(gwas, exons)&#xA;olap&#xA;#&amp;gt; GRanges object with 3439 ranges and 4 metadata columns:&#xA;#&amp;gt;          seqnames    ranges strand |      name.x                 name.y     score&#xA;#&amp;gt;             &amp;lt;Rle&amp;gt; &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; | &amp;lt;character&amp;gt;            &amp;lt;character&amp;gt; &amp;lt;numeric&amp;gt;&#xA;#&amp;gt;      [1]     chr1   1079198      * |  rs11260603 NR_038869_exon_2_0_c..         0&#xA;#&amp;gt;      [2]     chr1   1247494      * |     rs12103 NM_001256456_exon_1_..         0&#xA;#&amp;gt;      [3]     chr1   1247494      * |     rs12103 NM_001256460_exon_1_..         0&#xA;#&amp;gt;      [4]     chr1   1247494      * |     rs12103 NM_001256462_exon_1_..         0&#xA;#&amp;gt;      [5]     chr1   1247494      * |     rs12103 NM_001256463_exon_1_..         0&#xA;#&amp;gt;      ...      ...       ...    ... .         ...                    ...       ...&#xA;#&amp;gt;   [3435]     chrX 153764217      * |   rs1050828 NM_001042351_exon_9_..         0&#xA;#&amp;gt;   [3436]     chrX 153764217      * |   rs1050828 NM_000402_exon_9_0_c..         0&#xA;#&amp;gt;   [3437]     chrX 153764217      * |   rs1050828 NM_001042351_exon_9_..         0&#xA;#&amp;gt;   [3438]     chrX 153764217      * |   rs1050828 NM_000402_exon_9_0_c..         0&#xA;#&amp;gt;   [3439]     chrX 153764217      * |   rs1050828 NM_001042351_exon_9_..         0&#xA;#&amp;gt;                 tx_id&#xA;#&amp;gt;           &amp;lt;character&amp;gt;&#xA;#&amp;gt;      [1]    NR_038869&#xA;#&amp;gt;      [2] NM_001256456&#xA;#&amp;gt;      [3] NM_001256460&#xA;#&amp;gt;      [4] NM_001256462&#xA;#&amp;gt;      [5] NM_001256463&#xA;#&amp;gt;      ...          ...&#xA;#&amp;gt;   [3435] NM_001042351&#xA;#&amp;gt;   [3436]    NM_000402&#xA;#&amp;gt;   [3437] NM_001042351&#xA;#&amp;gt;   [3438]    NM_000402&#xA;#&amp;gt;   [3439] NM_001042351&#xA;#&amp;gt;   -------&#xA;#&amp;gt;   seqinfo: 93 sequences from an unspecified genome; no seqlengths&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For each SNP we can count the number of times it overlaps a transcript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;olap %&amp;gt;%&#xA;  group_by(name.x, tx_id) %&amp;gt;%&#xA;  summarise(n = n())&#xA;#&amp;gt; DataFrame with 1619 rows and 3 columns&#xA;#&amp;gt;           name.x        tx_id         n&#xA;#&amp;gt;      &amp;lt;character&amp;gt;  &amp;lt;character&amp;gt; &amp;lt;integer&amp;gt;&#xA;#&amp;gt; 1     rs10043775 NM_001271723         1&#xA;#&amp;gt; 2     rs10043775    NM_030793         1&#xA;#&amp;gt; 3        rs10078 NM_001242412         1&#xA;#&amp;gt; 4        rs10078    NM_020731         1&#xA;#&amp;gt; 5        rs10089    NM_001046         1&#xA;#&amp;gt; ...          ...          ...       ...&#xA;#&amp;gt; 1615   rs9906595 NM_001008777         1&#xA;#&amp;gt; 1616      rs9948    NM_017623         1&#xA;#&amp;gt; 1617      rs9948    NM_199078         1&#xA;#&amp;gt; 1618    rs995030    NM_000899         4&#xA;#&amp;gt; 1619    rs995030    NM_003994         4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also generate 2bp splice sites on either side of the exon using &lt;code&gt;flank_left&lt;/code&gt; and &lt;code&gt;flank_right&lt;/code&gt;. We add a column indicating the side of flanking for illustrative purposes. The &lt;code&gt;interweave&lt;/code&gt; function pairs the left and right ranges objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;left_ss &amp;lt;- flank_left(exons, 2L)&#xA;right_ss &amp;lt;- flank_right(exons, 2L)&#xA;all_ss &amp;lt;- interweave(left_ss, right_ss, .id = &#34;side&#34;)&#xA;all_ss&#xA;#&amp;gt; GRanges object with 919504 ranges and 4 metadata columns:&#xA;#&amp;gt;            seqnames            ranges strand |                   name     score&#xA;#&amp;gt;               &amp;lt;Rle&amp;gt;         &amp;lt;IRanges&amp;gt;  &amp;lt;Rle&amp;gt; |            &amp;lt;character&amp;gt; &amp;lt;numeric&amp;gt;&#xA;#&amp;gt;        [1]     chr1       11872-11873      + | NR_046018_exon_0_0_c..         0&#xA;#&amp;gt;        [2]     chr1       12228-12229      + | NR_046018_exon_0_0_c..         0&#xA;#&amp;gt;        [3]     chr1       12611-12612      + | NR_046018_exon_1_0_c..         0&#xA;#&amp;gt;        [4]     chr1       12722-12723      + | NR_046018_exon_1_0_c..         0&#xA;#&amp;gt;        [5]     chr1       13219-13220      + | NR_046018_exon_2_0_c..         0&#xA;#&amp;gt;        ...      ...               ...    ... .                    ...       ...&#xA;#&amp;gt;   [919500]     chrY 59340279-59340280      + | NM_002186_exon_7_0_c..         0&#xA;#&amp;gt;   [919501]     chrY 59342485-59342486      + | NM_002186_exon_8_0_c..         0&#xA;#&amp;gt;   [919502]     chrY 59343489-59343490      + | NM_002186_exon_8_0_c..         0&#xA;#&amp;gt;   [919503]     chrY 59342485-59342486      + | NM_176786_exon_8_0_c..         0&#xA;#&amp;gt;   [919504]     chrY 59343489-59343490      + | NM_176786_exon_8_0_c..         0&#xA;#&amp;gt;                  tx_id        side&#xA;#&amp;gt;            &amp;lt;character&amp;gt; &amp;lt;character&amp;gt;&#xA;#&amp;gt;        [1]   NR_046018        left&#xA;#&amp;gt;        [2]   NR_046018       right&#xA;#&amp;gt;        [3]   NR_046018        left&#xA;#&amp;gt;        [4]   NR_046018       right&#xA;#&amp;gt;        [5]   NR_046018        left&#xA;#&amp;gt;        ...         ...         ...&#xA;#&amp;gt;   [919500]   NM_002186       right&#xA;#&amp;gt;   [919501]   NM_002186        left&#xA;#&amp;gt;   [919502]   NM_002186       right&#xA;#&amp;gt;   [919503]   NM_176786        left&#xA;#&amp;gt;   [919504]   NM_176786       right&#xA;#&amp;gt;   -------&#xA;#&amp;gt;   seqinfo: 93 sequences from an unspecified genome; no seqlengths&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Learning more&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://sa-lee.github.io/fluentGenomics&#34;&gt;&lt;em&gt;fluentGenomics&lt;/em&gt; workflow&lt;/a&gt; package shows you how to combine differential expression genes and differential chromatin accessibility peaks using plyranges. It extends the &lt;a href=&#34;https://github.com/mikelove/plyrangesTximetaCaseStudy&#34;&gt;case study&lt;/a&gt; by Michael Love for using plyranges with &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/tximeta.html&#34;&gt;tximeta&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://github.com/sa-lee/plyrangesWorkshops&#34;&gt;extended vignette in the plyrangesWorkshops package&lt;/a&gt; has a detailed walk through of using plyranges for coverage analysis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://bioconductor.github.io/BiocWorkshops/fluent-genomic-data-analysis-with-plyranges.html&#34;&gt;Bioc 2018 Workshop book&lt;/a&gt; has worked examples of using &lt;code&gt;plyranges&lt;/code&gt; to analyse publicly available genomics data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;If you found &lt;code&gt;plyranges&lt;/code&gt; useful for your work please cite our &lt;a href=&#34;http://dx.doi.org/10.1186/s13059-018-1597-8&#34;&gt;paper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@ARTICLE{Lee2019,&#xA;  title    = &#34;plyranges: a grammar of genomic data transformation&#34;,&#xA;  author   = &#34;Lee, Stuart and Cook, Dianne and Lawrence, Michael&#34;,&#xA;  journal  = &#34;Genome Biol.&#34;,&#xA;  volume   =  20,&#xA;  number   =  1,&#xA;  pages    = &#34;4&#34;,&#xA;  month    =  jan,&#xA;  year     =  2019,&#xA;  url      = &#34;http://dx.doi.org/10.1186/s13059-018-1597-8&#34;,&#xA;  doi      = &#34;10.1186/s13059-018-1597-8&#34;,&#xA;  pmc      = &#34;PMC6320618&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We welcome contributions from the R/Bioconductor community. We ask that contributors follow the &lt;a href=&#34;https://raw.githubusercontent.com/tidyomics/plyranges/devel/.github/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; and the guide outlined &lt;a href=&#34;https://raw.githubusercontent.com/tidyomics/plyranges/devel/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>