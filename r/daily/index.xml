<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T01:53:05Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dgrtwo/dbcooper</title>
    <updated>2022-08-01T01:53:05Z</updated>
    <id>tag:github.com,2022-08-01:/dgrtwo/dbcooper</id>
    <link href="https://github.com/dgrtwo/dbcooper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create user-friendly accessor functions from a database connection&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dbcooper&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tidyverse.org/lifecycle/#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/dgrtwo/dbcooper&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dgrtwo/dbcooper.svg?branch=master&#34; alt=&#34;Travis build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The dbcooper package turns a database connection into a collection of functions, handling logic for keeping track of connections and letting you take advantage of autocompletion when exploring a database.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s especially helpful to use when authoring database-specific R packages, for instance in an internal company package or one wrapping a public data source.&lt;/p&gt; &#xA;&lt;p&gt;The package&#39;s name is a reference to the bandit &lt;a href=&#34;https://en.wikipedia.org/wiki/D._B._Cooper&#34;&gt;D.B. Cooper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For the Python version of the package, see &lt;a href=&#34;https://github.com/machow/dbcooper-py&#34;&gt;machow/dbcooper-py&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For an example of a database package created with dbcooper, see &lt;a href=&#34;https://github.com/dgrtwo/stackbigquery/&#34;&gt;stackbigquery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For some slides about the package, see &lt;a href=&#34;http://varianceexplained.org/files/dbcooper-rstudio-conf-2022.pdf&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;dgrtwo/dbcooper&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h3&gt;Initializing the functions&lt;/h3&gt; &#xA;&lt;p&gt;The dbcooper package asks you to create the connection first. As an example, we&#39;ll use the Lahman baseball database packaged with dbplyr.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)&#xA;&#xA;lahman_db &amp;lt;- dbplyr::lahman_sqlite()&#xA;lahman_db&#xA;#&amp;gt; &amp;lt;SQLiteConnection&amp;gt;&#xA;#&amp;gt;   Path: /private/var/folders/wp/6jpw10dj1b13vw5n9bvf1dvc0000gn/T/RtmpuEyzKR/lahman.sqlite&#xA;#&amp;gt;   Extensions: TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You set up dbcooper with the &lt;code&gt;dbc_init&lt;/code&gt; function, passing it a prefix &lt;code&gt;lahman&lt;/code&gt; that will apply to all the functions it creates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dbcooper)&#xA;dbc_init(lahman_db, &#34;lahman&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;dbc_init&lt;/code&gt; then creates user-friendly accessor functions in your global environment. (You could also pass it an environment in which the functions will be created).&lt;/p&gt; &#xA;&lt;h3&gt;Using database functions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;dbc_init&lt;/code&gt; adds several functions when it initializes a database source. In this case, each will start with the &lt;code&gt;lahman_&lt;/code&gt; prefix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;_list&lt;/code&gt;: Get a list of tables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_tbl&lt;/code&gt;: Access a table that can be worked with in dbplyr&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_query&lt;/code&gt;: Perform of a SQL query and work with the result&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_execute&lt;/code&gt;: Execute a query (such as a &lt;code&gt;CREATE&lt;/code&gt; or &lt;code&gt;DROP&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_src&lt;/code&gt;: Retrieve a &lt;code&gt;dbi_src&lt;/code&gt; for the database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For instance, we could start by finding the names of the tables in the Lahman database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_list()&#xA;#&amp;gt;  [1] &#34;AllstarFull&#34;         &#34;Appearances&#34;         &#34;AwardsManagers&#34;     &#xA;#&amp;gt;  [4] &#34;AwardsPlayers&#34;       &#34;AwardsShareManagers&#34; &#34;AwardsSharePlayers&#34; &#xA;#&amp;gt;  [7] &#34;Batting&#34;             &#34;BattingPost&#34;         &#34;CollegePlaying&#34;     &#xA;#&amp;gt; [10] &#34;Fielding&#34;            &#34;FieldingOF&#34;          &#34;FieldingOFsplit&#34;    &#xA;#&amp;gt; [13] &#34;FieldingPost&#34;        &#34;HallOfFame&#34;          &#34;HomeGames&#34;          &#xA;#&amp;gt; [16] &#34;LahmanData&#34;          &#34;Managers&#34;            &#34;ManagersHalf&#34;       &#xA;#&amp;gt; [19] &#34;Master&#34;              &#34;Parks&#34;               &#34;People&#34;             &#xA;#&amp;gt; [22] &#34;Pitching&#34;            &#34;PitchingPost&#34;        &#34;Salaries&#34;           &#xA;#&amp;gt; [25] &#34;Schools&#34;             &#34;SeriesPost&#34;          &#34;Teams&#34;              &#xA;#&amp;gt; [28] &#34;TeamsFranchises&#34;     &#34;TeamsHalf&#34;           &#34;sqlite_stat1&#34;       &#xA;#&amp;gt; [31] &#34;sqlite_stat4&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can access one of these tables with &lt;code&gt;lahman_tbl()&lt;/code&gt;, then put it through any kind of dplyr operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_tbl(&#34;Batting&#34;)&#xA;#&amp;gt; # Source:   SQL [?? x 22]&#xA;#&amp;gt; # Database: sqlite 3.34.1&#xA;#&amp;gt; #   [/private/var/folders/wp/6jpw10dj1b13vw5n9bvf1dvc0000gn/T/RtmpuEyzKR/lahman.sqlite]&#xA;#&amp;gt;    playerID  yearID stint teamID lgID      G    AB     R     H   X2B&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 abercda01   1871     1 TRO    NA        1     4     0     0     0&#xA;#&amp;gt;  2 addybo01    1871     1 RC1    NA       25   118    30    32     6&#xA;#&amp;gt;  3 allisar01   1871     1 CL1    NA       29   137    28    40     4&#xA;#&amp;gt;  4 allisdo01   1871     1 WS3    NA       27   133    28    44    10&#xA;#&amp;gt;  5 ansonca01   1871     1 RC1    NA       25   120    29    39    11&#xA;#&amp;gt;  6 armstbo01   1871     1 FW1    NA       12    49     9    11     2&#xA;#&amp;gt;  7 barkeal01   1871     1 RC1    NA        1     4     0     1     0&#xA;#&amp;gt;  8 barnero01   1871     1 BS1    NA       31   157    66    63    10&#xA;#&amp;gt;  9 barrebi01   1871     1 FW1    NA        1     5     1     1     1&#xA;#&amp;gt; 10 barrofr01   1871     1 BS1    NA       18    86    13    13     2&#xA;#&amp;gt; # … with more rows, and 12 more variables: X3B &amp;lt;int&amp;gt;, HR &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   RBI &amp;lt;int&amp;gt;, SB &amp;lt;int&amp;gt;, CS &amp;lt;int&amp;gt;, BB &amp;lt;int&amp;gt;, SO &amp;lt;int&amp;gt;, IBB &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   HBP &amp;lt;int&amp;gt;, SH &amp;lt;int&amp;gt;, SF &amp;lt;int&amp;gt;, GIDP &amp;lt;int&amp;gt;&#xA;#&amp;gt; # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names&#xA;&#xA;lahman_tbl(&#34;Batting&#34;) %&amp;gt;%&#xA;  count(teamID, sort = TRUE)&#xA;#&amp;gt; # Source:     lazy query [?? x 2]&#xA;#&amp;gt; # Database:   sqlite 3.34.1&#xA;#&amp;gt; #   [/private/var/folders/wp/6jpw10dj1b13vw5n9bvf1dvc0000gn/T/RtmpuEyzKR/lahman.sqlite]&#xA;#&amp;gt; # Ordered by: desc(n)&#xA;#&amp;gt;    teamID     n&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 CHN     5060&#xA;#&amp;gt;  2 PHI     4971&#xA;#&amp;gt;  3 PIT     4920&#xA;#&amp;gt;  4 SLN     4853&#xA;#&amp;gt;  5 CIN     4731&#xA;#&amp;gt;  6 CLE     4683&#xA;#&amp;gt;  7 BOS     4515&#xA;#&amp;gt;  8 CHA     4476&#xA;#&amp;gt;  9 NYA     4471&#xA;#&amp;gt; 10 DET     4413&#xA;#&amp;gt; # … with more rows&#xA;#&amp;gt; # ℹ Use `print(n = ...)` to see more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we&#39;d rather write SQL than dplyr, we could also run &lt;code&gt;lahman_query()&lt;/code&gt; (which can also take a filename).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_query(&#34;SELECT&#xA;                playerID,&#xA;                sum(AB) as AB&#xA;              FROM Batting&#xA;              GROUP BY playerID&#34;)&#xA;#&amp;gt; # Source:   SQL [?? x 2]&#xA;#&amp;gt; # Database: sqlite 3.34.1&#xA;#&amp;gt; #   [/private/var/folders/wp/6jpw10dj1b13vw5n9bvf1dvc0000gn/T/RtmpuEyzKR/lahman.sqlite]&#xA;#&amp;gt;    playerID     AB&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 aardsda01     4&#xA;#&amp;gt;  2 aaronha01 12364&#xA;#&amp;gt;  3 aaronto01   944&#xA;#&amp;gt;  4 aasedo01      5&#xA;#&amp;gt;  5 abadan01     21&#xA;#&amp;gt;  6 abadfe01      9&#xA;#&amp;gt;  7 abadijo01    49&#xA;#&amp;gt;  8 abbated01  3044&#xA;#&amp;gt;  9 abbeybe01   225&#xA;#&amp;gt; 10 abbeych01  1756&#xA;#&amp;gt; # … with more rows&#xA;#&amp;gt; # ℹ Use `print(n = ...)` to see more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, &lt;code&gt;lahman_execute()&lt;/code&gt; is for commands like &lt;code&gt;CREATE&lt;/code&gt; and &lt;code&gt;DROP&lt;/code&gt; that don&#39;t return a table, but rather execute a command on the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lahman_execute(&#34;CREATE TABLE Players AS&#xA;                  SELECT playerID, SUM(AB) AS AB&#xA;                  FROM Batting&#xA;                  GROUP BY playerID&#34;)&#xA;#&amp;gt; [1] 0&#xA;&#xA;lahman_tbl(&#34;Players&#34;)&#xA;#&amp;gt; # Source:   SQL [?? x 2]&#xA;#&amp;gt; # Database: sqlite 3.34.1&#xA;#&amp;gt; #   [/private/var/folders/wp/6jpw10dj1b13vw5n9bvf1dvc0000gn/T/RtmpuEyzKR/lahman.sqlite]&#xA;#&amp;gt;    playerID     AB&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 aardsda01     4&#xA;#&amp;gt;  2 aaronha01 12364&#xA;#&amp;gt;  3 aaronto01   944&#xA;#&amp;gt;  4 aasedo01      5&#xA;#&amp;gt;  5 abadan01     21&#xA;#&amp;gt;  6 abadfe01      9&#xA;#&amp;gt;  7 abadijo01    49&#xA;#&amp;gt;  8 abbated01  3044&#xA;#&amp;gt;  9 abbeybe01   225&#xA;#&amp;gt; 10 abbeych01  1756&#xA;#&amp;gt; # … with more rows&#xA;#&amp;gt; # ℹ Use `print(n = ...)` to see more rows&#xA;&#xA;lahman_execute(&#34;DROP TABLE Players&#34;)&#xA;#&amp;gt; [1] 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Autocompleted tables&lt;/h3&gt; &#xA;&lt;p&gt;Besides the &lt;code&gt;_list&lt;/code&gt;, &lt;code&gt;_tbl&lt;/code&gt;, &lt;code&gt;_query&lt;/code&gt;, and &lt;code&gt;_execute&lt;/code&gt; functions, the package also creates auto-completed table accessors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Same result as lahman_tbl(&#34;Batting&#34;)&#xA;lahman_batting()&#xA;#&amp;gt; # Source:   SQL [?? x 22]&#xA;#&amp;gt; # Database: sqlite 3.34.1&#xA;#&amp;gt; #   [/private/var/folders/wp/6jpw10dj1b13vw5n9bvf1dvc0000gn/T/RtmpuEyzKR/lahman.sqlite]&#xA;#&amp;gt;    playerID  yearID stint teamID lgID      G    AB     R     H   X2B&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1 abercda01   1871     1 TRO    NA        1     4     0     0     0&#xA;#&amp;gt;  2 addybo01    1871     1 RC1    NA       25   118    30    32     6&#xA;#&amp;gt;  3 allisar01   1871     1 CL1    NA       29   137    28    40     4&#xA;#&amp;gt;  4 allisdo01   1871     1 WS3    NA       27   133    28    44    10&#xA;#&amp;gt;  5 ansonca01   1871     1 RC1    NA       25   120    29    39    11&#xA;#&amp;gt;  6 armstbo01   1871     1 FW1    NA       12    49     9    11     2&#xA;#&amp;gt;  7 barkeal01   1871     1 RC1    NA        1     4     0     1     0&#xA;#&amp;gt;  8 barnero01   1871     1 BS1    NA       31   157    66    63    10&#xA;#&amp;gt;  9 barrebi01   1871     1 FW1    NA        1     5     1     1     1&#xA;#&amp;gt; 10 barrofr01   1871     1 BS1    NA       18    86    13    13     2&#xA;#&amp;gt; # … with more rows, and 12 more variables: X3B &amp;lt;int&amp;gt;, HR &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   RBI &amp;lt;int&amp;gt;, SB &amp;lt;int&amp;gt;, CS &amp;lt;int&amp;gt;, BB &amp;lt;int&amp;gt;, SO &amp;lt;int&amp;gt;, IBB &amp;lt;int&amp;gt;,&#xA;#&amp;gt; #   HBP &amp;lt;int&amp;gt;, SH &amp;lt;int&amp;gt;, SF &amp;lt;int&amp;gt;, GIDP &amp;lt;int&amp;gt;&#xA;#&amp;gt; # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names&#xA;&#xA;# Same result as lahman_tbl(&#34;Master&#34;) %&amp;gt;% count()&#xA;lahman_master() %&amp;gt;%&#xA;  count()&#xA;#&amp;gt; # Source:   lazy query [?? x 1]&#xA;#&amp;gt; # Database: sqlite 3.34.1&#xA;#&amp;gt; #   [/private/var/folders/wp/6jpw10dj1b13vw5n9bvf1dvc0000gn/T/RtmpuEyzKR/lahman.sqlite]&#xA;#&amp;gt;       n&#xA;#&amp;gt;   &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1 20093&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are useful because they let you use auto-complete to complete table names as you&#39;re exploring a data source.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the &#39;dbcooper&#39; project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/dgrtwo/dbcooper/master/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brshallo/funspotr</title>
    <updated>2022-08-01T01:53:05Z</updated>
    <id>tag:github.com,2022-08-01:/brshallo/funspotr</id>
    <link href="https://github.com/brshallo/funspotr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R function spotter, a helper package for identifying the functions and/or packages from file(s) or a github repository.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;funspotr &lt;a href=&#34;https://brshallo.github.io/funspotr/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brshallo/funspotr/actions&#34;&gt;&lt;img src=&#34;https://github.com/brshallo/funspotr/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#linked-examples&#34;&gt;Linked examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#talks-and-posts&#34;&gt;Talks and posts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#funspotr-built-reference-tables&#34;&gt;funspotr built reference tables&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#spot-functions-in-a-file&#34;&gt;Spot functions in a file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#spot-functions-on-all-files-in-a-project&#34;&gt;Spot functions on all files in a project&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#previewing-and-customizing-files-to-parse&#34;&gt;Previewing and customizing files to parse&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#other-things&#34;&gt;Other things&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#files-you-didnt-write&#34;&gt;Files you didn’t write&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#package-dependencies-in-another-file&#34;&gt;Package dependencies in another file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#show-all-function-calls&#34;&gt;Show all function calls&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#helper-for-blogdown-tags&#34;&gt;Helper for blogdown tags&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#unexported-functions&#34;&gt;Unexported functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#how-spot_funs-works&#34;&gt;How &lt;code&gt;spot_funs()&lt;/code&gt; works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#limitations-problems-musings&#34;&gt;Limitations, problems, musings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- README.md is generated from README.Rmd. Please edit that file --&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of funspotr (R function spotter) is to make it easy to identify which functions and packages are used in files and projects. It was initially written to create reference tables of the functions and packages used in a few popular github repositories[1].&lt;/p&gt; &#xA;&lt;p&gt;There are roughly three types of functions in funspotr:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;list_files_*()&lt;/code&gt;: that identify files in a repository or related location&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spot_*()&lt;/code&gt;: that identify functions or packages in files&lt;/li&gt; &#xA; &lt;li&gt;other helpers that manipulate or plot outputs from the above functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;funspotr is primarily designed for identifying the functions / packages in self-contained files or collections of files[2] like R markdown files or blogdown projects respectively[3].&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of funspotr from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;brshallo/funspotr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Package will be submitted to CRAN shortly.&lt;/p&gt; &#xA;&lt;h2&gt;Linked examples&lt;/h2&gt; &#xA;&lt;p&gt;funspotr can be used to quickly create reference tables of the functions and packages used in R projects.&lt;/p&gt; &#xA;&lt;h3&gt;Talks and posts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;slides from Rstudio Conf 2022 &lt;a href=&#34;https://github.com/brshallo/funspotr-rstudioconf2022&#34;&gt;From summarizing projects to setting tags, uses of parsing R files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Part 1 of a series on &lt;a href=&#34;https://www.bryanshalloway.com/2022/01/18/identifying-r-functions-packages-used-in-github-repos/&#34;&gt;Identifying R functions and packages…&lt;/a&gt; (WARNING: uses old API)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;funspotr built reference tables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/01/18/identifying-r-functions-packages-used-in-github-repos/#julia-silge-blog&#34;&gt;Julia Silge blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/01/18/identifying-r-functions-packages-used-in-github-repos/#david-robinson-tidy-tuesday&#34;&gt;David Robinson screencasts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/01/18/identifying-r-functions-packages-used-in-github-repos/#r-for-data-science-chapters&#34;&gt;R for Data Science book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/01/18/identifying-r-functions-packages-used-in-github-repos/#bryan-shalloway-blog&#34;&gt;Bryan Shalloway blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/02/07/identifying-r-functions-packages-in-your-github-gists/#binding-files-together&#34;&gt;brshallo gists&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Spot functions in a file&lt;/h2&gt; &#xA;&lt;p&gt;The primary function in funspotr is &lt;code&gt;spot_funs()&lt;/code&gt; which returns a dataframe showing the functions and associated packages used in a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(funspotr)&#xA;library(dplyr)&#xA;&#xA;file_lines &amp;lt;- &#34;&#xA;library(dplyr)&#xA;require(tidyr)&#xA;&#xA;as_tibble(mpg) %&amp;gt;% &#xA;  mutate(class = as.character(class)) %&amp;gt;%&#xA;  group_by(class) %&amp;gt;%&#xA;  nest() %&amp;gt;%&#xA;  mutate(stats = purrr::map(data,&#xA;                            ~lm(cty ~ hwy, data = .x)))&#xA; &#xA;made_up_fun()&#xA;&#34;&#xA;&#xA;file_output &amp;lt;- tempfile(fileext = &#34;.R&#34;)&#xA;writeLines(file_lines, file_output)&#xA;&#xA;spot_funs(file_path = file_output)&#xA;#&amp;gt; # A tibble: 10 x 2&#xA;#&amp;gt;    funs         pkgs     &#xA;#&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;    &#xA;#&amp;gt;  1 library      base     &#xA;#&amp;gt;  2 require      base     &#xA;#&amp;gt;  3 as_tibble    tidyr    &#xA;#&amp;gt;  4 mutate       dplyr    &#xA;#&amp;gt;  5 as.character base     &#xA;#&amp;gt;  6 group_by     dplyr    &#xA;#&amp;gt;  7 nest         tidyr    &#xA;#&amp;gt;  8 map          purrr    &#xA;#&amp;gt;  9 lm           stats    &#xA;#&amp;gt; 10 made_up_fun  (unknown)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;funs&lt;/code&gt;: functions in file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkgs&lt;/code&gt;: best guess as to the package the functions came from&lt;/li&gt; &#xA; &lt;li&gt;…[4]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- The example below uses `spot_pkgs_from_DESCRIPTION()` to load in package dependencies and then passes the resulting character vector to `spot_funs_custom()`. --&gt; &#xA;&lt;h2&gt;Spot functions on all files in a project&lt;/h2&gt; &#xA;&lt;p&gt;funspotr has a few &lt;code&gt;list_files_*()&lt;/code&gt; functions that return a dataframe of &lt;code&gt;relative_paths&lt;/code&gt; and &lt;code&gt;absolute_paths&lt;/code&gt; of all the R or R markdown files in a specified location (e.g.&amp;nbsp;github repo, gists). These can be combined with a variant of &lt;code&gt;spot_funs()&lt;/code&gt; that maps the function across each file path found, &lt;code&gt;spot_funs_files()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# repo for an old presentation I gave&#xA;gh_ex &amp;lt;- list_files_github_repo(&#xA;  repo = &#34;brshallo/feat-eng-lags-presentation&#34;, &#xA;  branch = &#34;main&#34;) %&amp;gt;% &#xA;  spot_funs_files()&#xA;&#xA;gh_ex&#xA;#&amp;gt; # A tibble: 4 x 3&#xA;#&amp;gt;   relative_paths                absolute_paths                      spotted     &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;                         &amp;lt;chr&amp;gt;                               &amp;lt;list&amp;gt;      &#xA;#&amp;gt; 1 R/Rmd-to-R.R                  https://raw.githubusercontent.com/~ &amp;lt;named list&amp;gt;&#xA;#&amp;gt; 2 R/feat-engineering-lags.R     https://raw.githubusercontent.com/~ &amp;lt;named list&amp;gt;&#xA;#&amp;gt; 3 R/load-inspections-save-csv.R https://raw.githubusercontent.com/~ &amp;lt;named list&amp;gt;&#xA;#&amp;gt; 4 R/types-of-splits.R           https://raw.githubusercontent.com/~ &amp;lt;named list&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;relative_paths&lt;/code&gt; : relative filepath&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;absolute_paths&lt;/code&gt;: absolute filepath (in this case URL to raw file on github)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spotted&lt;/code&gt;: &lt;code&gt;purrr::safely()&lt;/code&gt; style list-column of results[5] from mapping &lt;code&gt;spot_funs()&lt;/code&gt; across &lt;code&gt;absolute_paths&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These results may then be unnested with the helper &lt;code&gt;funspotr::unnest_results()&lt;/code&gt; to provide a table of functions and packages by filepath. This can be manipulated like any other dataframe – say we want to filter to only those files where &lt;a href=&#34;https://here.r-lib.org/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://readr.tidyverse.org/&#34;&gt;readr&lt;/a&gt; or &lt;a href=&#34;https://rsample.tidymodels.org/&#34;&gt;rsample&lt;/a&gt; packages are used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gh_ex %&amp;gt;% &#xA;  unnest_results() %&amp;gt;% &#xA;  filter(pkgs %in% c(&#34;here&#34;, &#34;readr&#34;, &#34;rsample&#34;))&#xA;#&amp;gt; # A tibble: 8 x 4&#xA;#&amp;gt;   funs               pkgs    relative_paths                absolute_paths       &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                         &amp;lt;chr&amp;gt;                &#xA;#&amp;gt; 1 here               here    R/Rmd-to-R.R                  https://raw.githubus~&#xA;#&amp;gt; 2 read_csv           readr   R/feat-engineering-lags.R     https://raw.githubus~&#xA;#&amp;gt; 3 initial_time_split rsample R/feat-engineering-lags.R     https://raw.githubus~&#xA;#&amp;gt; 4 training           rsample R/feat-engineering-lags.R     https://raw.githubus~&#xA;#&amp;gt; 5 testing            rsample R/feat-engineering-lags.R     https://raw.githubus~&#xA;#&amp;gt; 6 sliding_period     rsample R/feat-engineering-lags.R     https://raw.githubus~&#xA;#&amp;gt; 7 write_csv          readr   R/load-inspections-save-csv.R https://raw.githubus~&#xA;#&amp;gt; 8 here               here    R/load-inspections-save-csv.R https://raw.githubus~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The outputs from &lt;code&gt;funspotr::unnest_results()&lt;/code&gt; can also be passed into &lt;code&gt;funspotr::network_plot()&lt;/code&gt; to build a network visualization of the connections between functions/packages and files[6].&lt;/p&gt; &#xA;&lt;h3&gt;Previewing and customizing files to parse&lt;/h3&gt; &#xA;&lt;p&gt;You might only want to parse a subset of the files in a repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;preview_files &amp;lt;- list_files_github_repo(&#xA;  repo = &#34;brshallo/feat-eng-lags-presentation&#34;, &#xA;  branch = &#34;main&#34;)&#xA;&#xA;preview_files&#xA;#&amp;gt; # A tibble: 4 x 2&#xA;#&amp;gt;   relative_paths                absolute_paths                                  &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;                         &amp;lt;chr&amp;gt;                                           &#xA;#&amp;gt; 1 R/Rmd-to-R.R                  https://raw.githubusercontent.com/brshallo/feat~&#xA;#&amp;gt; 2 R/feat-engineering-lags.R     https://raw.githubusercontent.com/brshallo/feat~&#xA;#&amp;gt; 3 R/load-inspections-save-csv.R https://raw.githubusercontent.com/brshallo/feat~&#xA;#&amp;gt; 4 R/types-of-splits.R           https://raw.githubusercontent.com/brshallo/feat~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Say we only want to parse the “types-of-splits.R” and “Rmd-to-R.R” files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;preview_files %&amp;gt;% &#xA;  filter(stringr::str_detect(relative_paths, &#34;types-of-splits|Rmd-to-R&#34;)) %&amp;gt;% &#xA;  spot_funs_files() %&amp;gt;% &#xA;  unnest_results()&#xA;#&amp;gt; # A tibble: 24 x 4&#xA;#&amp;gt;    funs      pkgs      relative_paths      absolute_paths                       &#xA;#&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt;                                &#xA;#&amp;gt;  1 purl      knitr     R/Rmd-to-R.R        https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  2 here      here      R/Rmd-to-R.R        https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  3 library   base      R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  4 theme_set ggplot    R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  5 theme_bw  ggplot    R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  6 set.seed  base      R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  7 tibble    dplyr     R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  8 rep       base      R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt;  9 today     lubridate R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt; 10 days      lubridate R/types-of-splits.R https://raw.githubusercontent.com/br~&#xA;#&amp;gt; # ... with 14 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you have a lot of files in a repo you may need to set-up sleep periods or clone the repo locally &lt;em&gt;and then&lt;/em&gt; parse the files from there so as to stay within the limits of github API hits.&lt;/p&gt; &#xA;&lt;h2&gt;Other things&lt;/h2&gt; &#xA;&lt;h3&gt;Files you didn’t write&lt;/h3&gt; &#xA;&lt;p&gt;Functions created in the file as well as functions from unavailable packages (or packages that don’t exist) will output as &lt;code&gt;pkgs = &#34;(unknown)&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;file_lines_missing_pkgs &amp;lt;- &#34;&#xA;library(dplyr)&#xA;&#xA;as_tibble(mpg)&#xA;&#xA;hello_world &amp;lt;- function() print(&#39;hello world&#39;)&#xA;&#xA;madeuppkg::made_up_fun()&#xA;&#xA;hello_world()&#xA;&#34;&#xA;&#xA;missing_pkgs_ex &amp;lt;- tempfile(fileext = &#34;.R&#34;)&#xA;writeLines(file_lines_missing_pkgs, missing_pkgs_ex)&#xA;&#xA;spot_funs(file_path = missing_pkgs_ex)&#xA;#&amp;gt; # A tibble: 5 x 2&#xA;#&amp;gt;   funs        pkgs     &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;    &#xA;#&amp;gt; 1 library     base     &#xA;#&amp;gt; 2 as_tibble   dplyr    &#xA;#&amp;gt; 3 print       base     &#xA;#&amp;gt; 4 made_up_fun (unknown)&#xA;#&amp;gt; 5 hello_world (unknown)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;To spot which package a function is from you must have the package installed locally.&lt;/em&gt; Hence for files on others’ github repos or that you created on a different machine, it is a good idea to start with &lt;code&gt;funspotr::check_pkgs_availability()&lt;/code&gt; to see which packages you are missing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;funspotr:::install_missing_pkgs()&lt;/code&gt; is an unexported helper for installing missing packages (see “R/spot-pkgs.R” for documentation):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;check_pkgs_availability(file_path) %&amp;gt;% &#xA;  funspotr:::install_missing_pkgs()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you may want to clone the repository locally and then use &lt;code&gt;renv::dependencies()&lt;/code&gt; and only then start using funspotr[7].&lt;/p&gt; &#xA;&lt;h3&gt;Package dependencies in another file&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;spot_funs()&lt;/code&gt; is currently set-up for self-contained files. But &lt;code&gt;spot_funs_custom()&lt;/code&gt; allows the user to explicitly specify &lt;code&gt;pkgs&lt;/code&gt; where functions may come from. This is useful in cases where the packages loaded are not in the same location as the &lt;code&gt;file_path&lt;/code&gt; (e.g.&amp;nbsp;they are loaded via &lt;code&gt;source()&lt;/code&gt; or a DESCRIPTION file, or some other workflow). For example, below is a made-up example where the &lt;code&gt;library()&lt;/code&gt; calls are made in a separate file and &lt;code&gt;source()&lt;/code&gt;d in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# file where packages are loaded&#xA;file_libs &amp;lt;- &#34;library(dplyr)&#xA;library(lubridate)&#34;&#xA;&#xA;file_libs_output &amp;lt;- tempfile(fileext = &#34;.R&#34;)&#xA;writeLines(file_libs, file_libs_output)&#xA;&#xA;# File of interest where things happen&#xA;file_run &amp;lt;- glue::glue(&#xA;&#34;source(&#39;{ file_libs_output }&#39;)&#xA;  &#xA;tibble::tibble(days_from_today = 0:10) %&amp;gt;% &#xA;    mutate(date = today() + days(days_from_today))&#xA;&#34;, &#xA;file_libs_output = stringr::str_replace_all(file_libs_output, &#34;\\\\&#34;, &#34;/&#34;)&#xA;)&#xA;&#xA;file_run_output &amp;lt;- tempfile(fileext = &#34;.R&#34;)&#xA;writeLines(file_run, file_run_output)&#xA;&#xA;# Identify packages using both files and then pass in explicitly to `spot_funs_custom()`&#xA;pkgs &amp;lt;- c(spot_pkgs(file_libs_output), &#xA;          spot_pkgs(file_run_output, show_explicit_funs = TRUE))&#xA;&#xA;spot_funs_custom(&#xA;  pkgs = pkgs,&#xA;  file_path = file_run_output)&#xA;#&amp;gt; # A tibble: 5 x 2&#xA;#&amp;gt;   funs   pkgs     &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &#xA;#&amp;gt; 1 source base     &#xA;#&amp;gt; 2 tibble tibble   &#xA;#&amp;gt; 3 mutate dplyr    &#xA;#&amp;gt; 4 today  lubridate&#xA;#&amp;gt; 5 days   lubridate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also see &lt;code&gt;funspotr:::spot_pkgs_from_description()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Show all function calls&lt;/h3&gt; &#xA;&lt;p&gt;Passing in &lt;code&gt;show_each_use = TRUE&lt;/code&gt; to &lt;code&gt;...&lt;/code&gt; in &lt;code&gt;spot_funs()&lt;/code&gt; or &lt;code&gt;spot_funs_files()&lt;/code&gt; will return &lt;em&gt;all&lt;/em&gt; instances of a function call rather than just once for each file.&lt;/p&gt; &#xA;&lt;p&gt;Compared to the initial example, &lt;code&gt;mutate()&lt;/code&gt; now shows-up at both rows 4 and 8:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spot_funs(file_path = file_output, show_each_use = TRUE)&#xA;#&amp;gt; # A tibble: 11 x 2&#xA;#&amp;gt;    funs         pkgs     &#xA;#&amp;gt;    &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;    &#xA;#&amp;gt;  1 library      base     &#xA;#&amp;gt;  2 require      base     &#xA;#&amp;gt;  3 as_tibble    tidyr    &#xA;#&amp;gt;  4 mutate       dplyr    &#xA;#&amp;gt;  5 as.character base     &#xA;#&amp;gt;  6 group_by     dplyr    &#xA;#&amp;gt;  7 nest         tidyr    &#xA;#&amp;gt;  8 mutate       dplyr    &#xA;#&amp;gt;  9 map          purrr    &#xA;#&amp;gt; 10 lm           stats    &#xA;#&amp;gt; 11 made_up_fun  (unknown)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Helper for &lt;a href=&#34;https://pkgs.rstudio.com/blogdown/&#34;&gt;blogdown&lt;/a&gt; tags&lt;/h3&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;as_yaml_tags = TRUE&lt;/code&gt; in &lt;code&gt;spot_pkgs()&lt;/code&gt; flattens the dependencies and outputs them in a format that can be copied and pasted into the &lt;strong&gt;tags&lt;/strong&gt; section of a blogdown post’s YAML header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Example from old blogdown post&#xA;spot_pkgs(&#xA;  file_path = &#34;https://raw.githubusercontent.com/brshallo/brshallo/master/content/post/2020-02-06-maximizing-magnetic-volume-the-perfect-bowl.Rmd&#34;,&#xA;  as_yaml_tags = TRUE) %&amp;gt;% &#xA;  cat()&#xA;#&amp;gt;   - knitr&#xA;#&amp;gt;   - tidyverse&#xA;#&amp;gt;   - ggforce&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;spot_pkgs_used()&lt;/code&gt; will only return those packages that have functions actually used[8].&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;To automatically have your packages used as the tags for a post&lt;/em&gt; you can add the function &lt;code&gt;funspotr::spot_tags()&lt;/code&gt; to a bullet in the &lt;code&gt;tags&lt;/code&gt; argument of your YAML header[9]. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;title: This is a post&#xA;author: brshallo&#xA;date: &#39;2022-02-11&#39;&#xA;tags: &#xA;  - &#34;`r funspotr::spot_tags()`&#34;&#xA;slug: this-is-a-post&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unexported functions&lt;/h3&gt; &#xA;&lt;p&gt;Many of the unexported functions in funspotr may be helpful in building up other workflows for mapping &lt;code&gt;spot_funs()&lt;/code&gt; across multiple files[10] &lt;em&gt;If you have a suggestion for a function, feel free to open an issue.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- **If you&#39;ve used {funspotr} to map the R functions and packages of a public blog or repository, open an issue to add a link in the README.** --&gt; &#xA;&lt;h2&gt;How &lt;code&gt;spot_funs()&lt;/code&gt; works&lt;/h2&gt; &#xA;&lt;p&gt;funspotr mimics the search space of each file prior to identifying &lt;code&gt;pkgs&lt;/code&gt;/&lt;code&gt;funs&lt;/code&gt;[11]. At a high-level…&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new R instance using &lt;a href=&#34;https://github.com/r-lib/callr&#34;&gt;callr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Load packages. Explicit calls (e.g.&amp;nbsp;&lt;code&gt;pkg::fun()&lt;/code&gt;) are loaded individually via &lt;a href=&#34;https://github.com/rticulate/import&#34;&gt;import&lt;/a&gt; and are loaded last (putting them at the top of the search space)[12].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(steps 1 and 2 needed so that step 4 has the best chance of identifying the package a function comes from in the file.)&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Pass file through &lt;code&gt;utils::getParseData()&lt;/code&gt; and filter to just functions[13]&lt;/li&gt; &#xA; &lt;li&gt;Pass functions through &lt;code&gt;utils::find()&lt;/code&gt; to identify associated package&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Limitations, problems, musings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a file contains R syntax that is not well defined it will not be parsed and will return an error. See &lt;a href=&#34;https://yihui.org/formatr/#6-further-notes&#34;&gt;formatR#further-notes&lt;/a&gt; (used by {funspotr} in parsing) for other common reasons for failure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;knitr::read_chunk()&lt;/code&gt; and &lt;code&gt;knitr::purl()&lt;/code&gt; in a file passed to {funspotr} will also frequently cause an error in parsing. See &lt;a href=&#34;https://github.com/yihui/knitr/issues/1753&#34;&gt;knitr#1753&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/yihui/knitr/issues/1938&#34;&gt;knitr#1938&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Please open an issue if you find other cases where parsing breaks :-) .&lt;/li&gt; &#xA; &lt;li&gt;As mentioned elsewhere, the default parsing of &lt;code&gt;spot_funs()&lt;/code&gt; is primarily for cases where package dependencies are loaded in the same file that they are used in[14]. Scripts that are not self-contained typically should have the &lt;code&gt;pkgs&lt;/code&gt; argument provided explicitly via &lt;code&gt;spot_funs_custom()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;funspotr does not pay attention to when functions are reexported from elsewhere. For example, many tibble functions are reexported by dplyr and tidyr – funspotr though will not know the “true” home of these functions it is simply looking at the top of the search space[15].&lt;/li&gt; &#xA; &lt;li&gt;Feel free to open an issue if you’d be interested in a simplifying function or vignette for mapping &lt;code&gt;spot_funs()&lt;/code&gt; through other folder structures not yet mentioned.&lt;/li&gt; &#xA; &lt;li&gt;All the functions in “R/spot-pkgs.R” would probably be better handled by something like &lt;code&gt;renv::dependencies()&lt;/code&gt; or a parsing based approach. The simple regex’s I use have a variety of problems. As just one example &lt;code&gt;funspotr::get_pkgs()&lt;/code&gt; will not recognize when a package is within quotes or being escaped[16]. Another useful package for installing missing dependencies may be &lt;a href=&#34;https://thinkr-open.github.io/attachment/index.html&#34;&gt;attachment&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;I am curious if there is something to be learned from how &lt;code&gt;R CMD check&lt;/code&gt; does function parsing. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;`funspotr’s current approach is slow&lt;/li&gt; &#xA;   &lt;li&gt;Current approach uses some imperfect heuristics&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Does not identify infix operators, e.g.&amp;nbsp;&lt;code&gt;+&lt;/code&gt;[17]&lt;/li&gt; &#xA; &lt;li&gt;funspotr has lots of dependencies. It may have make sense to move some of the non-core functionality into a separate package (e.g.&amp;nbsp;stuff concerning &lt;code&gt;list_files*()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rather than running &lt;code&gt;list_files_github_repo()&lt;/code&gt; it may make sense to instead clone the repo locally and then run &lt;code&gt;list_files_wd()&lt;/code&gt; from the repo prior to running &lt;code&gt;spot_funs_files()&lt;/code&gt; as this will limit the number of API hits to github.&lt;/li&gt; &#xA; &lt;li&gt;Currently it’s possible to have github block you pretty soon due to hitting too many files (in which case you’ll likely get a 403 or connection error). There are some things that could probably be done to reduce number of github API hits (e.g.&amp;nbsp;above bullet, &lt;code&gt;Sys.sleep()&lt;/code&gt;, …).&lt;/li&gt; &#xA; &lt;li&gt;Throughout the code and package documentation I have “inspiration” bullets followed by a link pointing to places where I took stuff from stack overflow, github, or other packages. Also see the footnotes of the README&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[1] The following posts were written using the initial API for funspotr – the key functions used in these posts have now been deprecated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/01/18/identifying-r-functions-packages-used-in-github-repos/&#34;&gt;Identifying R Functions &amp;amp; Packages Used in GitHub Repos (funspotr part 1)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/02/07/identifying-r-functions-packages-in-your-github-gists/&#34;&gt;Identifying R Functions &amp;amp; Packages in Github Gists (funspotr part 2)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bryanshalloway.com/2022/03/17/network-plots-of-code-collections-funspotr-part-3/&#34;&gt;Network Plots of Code Collections (funspotr part 3)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[2] See &lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#package-dependencies-in-another-file&#34;&gt;Package dependencies in another file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;[3] Rather than, for example, &lt;a href=&#34;https://github.com/ropensci/targets&#34;&gt;targets&lt;/a&gt; workflows. Also, in some cases funspotr may not identify &lt;em&gt;every&lt;/em&gt; function and/or package in a file (see &lt;a href=&#34;https://raw.githubusercontent.com/brshallo/funspotr/main/#limitations-problems-musings&#34;&gt;Limitations, problems, musings&lt;/a&gt;) or read the source code for details).&lt;/p&gt; &#xA;&lt;p&gt;[4] &lt;code&gt;in_multiple_pkgs&lt;/code&gt;: (by default is dropped, pass in &lt;code&gt;keep_in_multiple_pkgs = TRUE&lt;/code&gt; to &lt;code&gt;...&lt;/code&gt; to display)Whether the function has multiple packages/environments on it’s (guessed) search space. By default only the package at the top of the search space is returned. E.g. &lt;code&gt;as_tibble()&lt;/code&gt; is attributed to &lt;a href=&#34;https://tidyr.tidyverse.org/&#34;&gt;tidyr&lt;/a&gt; by &lt;code&gt;spot_funs()&lt;/code&gt; however &lt;code&gt;as_tibble()&lt;/code&gt; is also in &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;dplyr&lt;/a&gt;. I don’t worry about getting to the root source of the package or the fact that both of those packages are just reexporting it from &lt;a href=&#34;https://tibble.tidyverse.org/&#34;&gt;tibble&lt;/a&gt;. Setting &lt;code&gt;keep_search_list = TRUE&lt;/code&gt; will return rows for each item in the search list which may be helpful if getting unexpected results.)&lt;/p&gt; &#xA;&lt;p&gt;[5] list-column output where each item is a list containing &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[6] Took some inspiration from &lt;code&gt;plot()&lt;/code&gt; method in &lt;a href=&#34;https://github.com/ikosmidis/cranly&#34;&gt;cranly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[7] &lt;a href=&#34;https://rstudio.github.io/renv/&#34;&gt;renv&lt;/a&gt; is a more robust approach to finding and installing dependencies – particularly in cases where you are missing many dependencies or don’t want to alter the packages in your global library.&lt;/p&gt; &#xA;&lt;p&gt;[8] E.g. for cases when there are library calls that aren’t actually used in the file. This may be useful in cases when metapackages like tidyverse or tidymodels are loaded but not all packages are actually used.&lt;/p&gt; &#xA;&lt;p&gt;[9] See (&lt;a href=&#34;https://github.com/rstudio/blogdown/issues/647#issuecomment-1041599327&#34;&gt;blogdown#647&lt;/a&gt;, &lt;a href=&#34;https://github.com/rstudio/blogdown/issues/693&#34;&gt;blogdown#693&lt;/a&gt;) for an explanation of how &lt;code&gt;funspotr::spot_tags()&lt;/code&gt; works.&lt;/p&gt; &#xA;&lt;p&gt;[10] Most unexported functions in &lt;code&gt;funspotr&lt;/code&gt; still include a man file and at least partial documentation.&lt;/p&gt; &#xA;&lt;p&gt;[11] In a language like python, where calls are explicit (e.g.&amp;nbsp;&lt;code&gt;np.*&lt;/code&gt;), all of this stuff with recreating the search space would likely be unnecessary and you could just identify packages/functions with simple parsing.&lt;/p&gt; &#xA;&lt;p&gt;[12] This heuristic is imperfect and means that a file with “library(dplyr); select(); MASS::select()” would view both &lt;code&gt;select()&lt;/code&gt; calls as coming from {MASS} – when what it should do is view the first was as coming from {dplyr} and the second from {MASS}.&lt;/p&gt; &#xA;&lt;p&gt;[13] inspired by &lt;code&gt;NCmisc::list.functions.in.file()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;[14] i.e.&amp;nbsp;in interactive R scripts or Rmd documents where you use &lt;code&gt;library()&lt;/code&gt; or related calls within the script.&lt;/p&gt; &#xA;&lt;p&gt;[15] For example when reviewing David Robinson’s Tidy Tuesday code I found that the &lt;a href=&#34;https://github.com/GuangchuangYu/meme&#34;&gt;meme&lt;/a&gt; package was used far more than I would have expected. Turns out it was just due to it reexporting the &lt;code&gt;aes()&lt;/code&gt; function from ggplot.&lt;/p&gt; &#xA;&lt;p&gt;[16] e.g.&amp;nbsp;in this case &lt;code&gt;lines &amp;lt;- &#34;library(pkg)&#34;&lt;/code&gt; the &lt;code&gt;pkg&lt;/code&gt; would show-up as a dependency despite just being part of a quote rather than actually loaded.&lt;/p&gt; &#xA;&lt;p&gt;[17] maybe that’s fine though.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ipeaGIT/accessibility</title>
    <updated>2022-08-01T01:53:05Z</updated>
    <id>tag:github.com,2022-08-01:/ipeaGIT/accessibility</id>
    <link href="https://github.com/ipeaGIT/accessibility" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Calculate accessibility measures in R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;accessibility&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/ipeaGIT/accessibility/main/man/figures/logo.png&#34; alt=&#34;logo&#34; width=&#34;180&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=accessibility&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/accessibility&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ipeaGIT/accessibility/actions&#34;&gt;&lt;img src=&#34;https://github.com/ipeaGIT/accessibility/workflows/rcmdcheck/badge.svg?sanitize=true&#34; alt=&#34;rcmdcheck&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=accessibility&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/accessibility?color=yellow&#34; alt=&#34;CRAN/METACRAN Total downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/ipeaGIT/accessibility?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ipeaGIT/accessibility/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;accessibility&lt;/strong&gt; offers a set of fast and convenient functions to calculate multiple transport accessibility measures. Given a pre-computed travel cost matrix and a land use dataset (containing the location of jobs, healthcare and population, for example), the package allows one to calculate active and passive accessibility levels using multiple accessibility measures, such as: cumulative opportunities (using either travel cost cutoffs or intervals), minimum travel cost to closest N number of activities, gravity-based (with different decay functions) and different floating catchment area methods.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Stable version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;accessibility&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Development version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;ipeaGIT/accessibility&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(accessibility)&#xA;&#xA;# required data: a travel matrix and some land use data&#xA;data_dir &amp;lt;- system.file(&#34;extdata&#34;, package = &#34;accessibility&#34;)&#xA;travel_matrix &amp;lt;- readRDS(file.path(data_dir, &#34;travel_matrix.rds&#34;))&#xA;land_use_data &amp;lt;- readRDS(file.path(data_dir, &#34;land_use_data.rds&#34;))&#xA; &#xA;cost_closest &amp;lt;- cost_to_closest(&#xA;  travel_matrix,&#xA;  land_use_data,&#xA;  opportunity = &#34;schools&#34;,&#xA;  travel_cost = &#34;travel_time&#34;,&#xA;  n = 1&#xA;)&#xA;head(cost_closest)&#xA;#&amp;gt;                 id travel_time&#xA;#&amp;gt; 1: 89a881a5a2bffff          29&#xA;#&amp;gt; 2: 89a881a5a2fffff          24&#xA;#&amp;gt; 3: 89a881a5a67ffff          28&#xA;#&amp;gt; 4: 89a881a5a6bffff          33&#xA;#&amp;gt; 5: 89a881a5a6fffff          32&#xA;#&amp;gt; 6: 89a881a5b03ffff          17&#xA;&#xA;cum_cutoff &amp;lt;- cumulative_cutoff(&#xA;  travel_matrix,&#xA;  land_use_data,&#xA;  opportunity = &#34;jobs&#34;,&#xA;  travel_cost = &#34;travel_time&#34;,&#xA;  cutoff = 30&#xA;)&#xA;head(cum_cutoff)&#xA;#&amp;gt;                 id  jobs&#xA;#&amp;gt; 1: 89a88cdb57bffff 22239&#xA;#&amp;gt; 2: 89a88cdb597ffff 36567&#xA;#&amp;gt; 3: 89a88cdb5b3ffff 42372&#xA;#&amp;gt; 4: 89a88cdb5cfffff 55571&#xA;#&amp;gt; 5: 89a88cd909bffff 26774&#xA;#&amp;gt; 6: 89a88cd90b7ffff 36991&#xA;&#xA;cum_interval &amp;lt;- cumulative_interval(&#xA;  travel_matrix,&#xA;  land_use_data,&#xA;  opportunity = &#34;jobs&#34;,&#xA;  travel_cost = &#34;travel_time&#34;,&#xA;  interval = c(20, 30)&#xA;)&#xA;head(cum_interval)&#xA;#&amp;gt;                 id  jobs&#xA;#&amp;gt; 1: 89a88cdb57bffff  7649&#xA;#&amp;gt; 2: 89a88cdb597ffff 21990&#xA;#&amp;gt; 3: 89a88cdb5b3ffff 22282&#xA;#&amp;gt; 4: 89a88cdb5cfffff 26841&#xA;#&amp;gt; 5: 89a88cd909bffff 14421&#xA;#&amp;gt; 6: 89a88cd90b7ffff 25699&#xA;&#xA;grav &amp;lt;- gravity(&#xA;  travel_matrix,&#xA;  land_use_data,&#xA;  opportunity = &#34;schools&#34;,&#xA;  travel_cost = &#34;travel_time&#34;,&#xA;  decay_function = decay_exponential(decay_value = 0.2)&#xA;)&#xA;head(grav)&#xA;#&amp;gt;                 id    schools&#xA;#&amp;gt; 1: 89a88cdb57bffff 0.03041853&#xA;#&amp;gt; 2: 89a88cdb597ffff 1.15549493&#xA;#&amp;gt; 3: 89a88cdb5b3ffff 0.56519126&#xA;#&amp;gt; 4: 89a88cdb5cfffff 0.19852152&#xA;#&amp;gt; 5: 89a88cd909bffff 0.41378042&#xA;#&amp;gt; 6: 89a88cd90b7ffff 0.95737555&#xA;                       &#xA;fca &amp;lt;- floating_catchment_area(&#xA;  travel_matrix,&#xA;  land_use_data,&#xA;  opportunity = &#34;jobs&#34;,&#xA;  travel_cost = &#34;travel_time&#34;,&#xA;  demand = &#34;population&#34;,&#xA;  method = &#34;2sfca&#34;,&#xA;  decay_function = decay_binary(cutoff = 50)&#xA;)&#xA;head(fca)&#xA;#&amp;gt;                 id      jobs&#xA;#&amp;gt; 1: 89a88cdb57bffff 0.4357418&#xA;#&amp;gt; 2: 89a88cdb597ffff 0.3938630&#xA;#&amp;gt; 3: 89a88cdb5b3ffff 0.4589910&#xA;#&amp;gt; 4: 89a88cdb5cfffff 0.5469433&#xA;#&amp;gt; 5: 89a88cd909bffff 0.4358530&#xA;#&amp;gt; 6: 89a88cd90b7ffff 0.5271746&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please read the vignettes for more details on the usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Introduction to &lt;strong&gt;accessibility&lt;/strong&gt;: calculating accessibility measures. Run &lt;a href=&#34;https://ipeagit.github.io/accessibility/articles/accessibility.html&#34;&gt;&lt;code&gt;vignette(&#34;accessibility&#34;)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Decay functions. Run &lt;a href=&#34;https://ipeagit.github.io/accessibility/articles/decay_functions.html&#34;&gt;&lt;code&gt;vignette(&#34;decay_functions&#34;, package = &#34;accessibility&#34;)&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related work:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ipeaGIT/r5r&#34;&gt;r5r&lt;/a&gt;: Rapid Realistic Routing with R5 in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jamaps/tracc&#34;&gt;tracc&lt;/a&gt;: Transport accessibility measures in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://access.readthedocs.io/en/latest/&#34;&gt;access&lt;/a&gt;: Spatial Access for PySAL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgement &lt;a href=&#34;https://www.ipea.gov.br&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ipeaGIT/accessibility/main/man/figures/ipea_logo.png&#34; alt=&#34;IPEA&#34; align=&#34;right&#34; width=&#34;300&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;accessibility&lt;/strong&gt; is developed by a team at the Institute for Applied Economic Research (Ipea), Brazil.&lt;/p&gt;</summary>
  </entry>
</feed>