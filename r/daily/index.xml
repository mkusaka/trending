<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-20T01:40:37Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hadley/herndon-ash-pollin</title>
    <updated>2024-04-20T01:40:37Z</updated>
    <id>tag:github.com,2024-04-20:/hadley/herndon-ash-pollin</id>
    <link href="https://github.com/hadley/herndon-ash-pollin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A rewrite of the R code used by Herndon, Ash and Pollin to replicate Reinhart-Rogoff&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repository contains a rewrite of the R code used by Thomas Herndon, Michael Ash and Robert Pollin from their paper &lt;a href=&#34;http://www.peri.umass.edu/236/hash/31e2ff374b6377b2ddec04deaa6388b1/publication/566/&#34;&gt;Does High Public Debt Consistently Stifle Economic Growth? A Critique of Reinhart and Rogoff&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(I have no affiliation with the authors, I just thought it would be fun to play around with the data)&lt;/p&gt; &#xA;&lt;h3&gt;Changes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Greece had commas in the RGDP column for 1991-2006. Previouly &lt;code&gt;as.numeric&lt;/code&gt; was used to get rid of them which just turned them into NAs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s unclear exactly how to pick between GDP, GDP1 and GDP2. I choose to use GDP2 where available, falling back to GDP1 where not available. This may be different from the original paper.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hypebright/shinyconf2024-shiny101</title>
    <updated>2024-04-20T01:40:37Z</updated>
    <id>tag:github.com,2024-04-20:/hypebright/shinyconf2024-shiny101</id>
    <link href="https://github.com/hypebright/shinyconf2024-shiny101" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shiny 101: Modular App Blueprint workshop ‚ú®&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ShinyConf2024 workshop: Modular App Blue print&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the code for the ShinyConf2024 workshop on building modular Shiny apps. The workshop will be held on the 17th of April, 2024 üìÖ.&lt;/p&gt; &#xA;&lt;h2&gt;About the data&lt;/h2&gt; &#xA;&lt;p&gt;In this workshop, we will be using data related to Women&#39;s International Football results ‚öΩÔ∏è. The data is available in the &lt;code&gt;data&lt;/code&gt; folder and it contains some pre-processing. The data is sourced from &lt;a href=&#34;https://www.kaggle.com/datasets/martj42/womens-international-football-results?resource=download&#34;&gt;Kaggle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shiny courses&lt;/h2&gt; &#xA;&lt;p&gt;Want to keep learning? We are launching two online courses that are all about Shiny ‚ú®:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://athlyticz.com/shiny-ii&#34;&gt;ProductioniZing Shiny Course&lt;/a&gt;, during which you will learn everything about Shiny: from building your first app to testing and deployment üöÄ.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://athlyticz.com/shiny-iii&#34;&gt;CustomiZing WidgetZ Course&lt;/a&gt;, which is all about creating outstanding user interfaces with Shiny. During this course you will build your own Shiny package and some very cool widgets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://athlyticz.com/shiny-ii&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hypebright/shinyconf2024-shiny101/main/images/athlyticz.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other resources&lt;/h2&gt; &#xA;&lt;p&gt;Some of my favourite resources to learn more about Shiny:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastering-shiny.org&#34;&gt;Mastering Shiny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering-shiny.org&#34;&gt;Engineering Production-Grade Shiny Applications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html&#34;&gt;Official Shiny Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>r-devel/recheck</title>
    <updated>2024-04-20T01:40:37Z</updated>
    <id>tag:github.com,2024-04-20:/r-devel/recheck</id>
    <link href="https://github.com/r-devel/recheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GitHub action to run reverse dependency check&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;recheck&lt;/h1&gt; &#xA;&lt;p&gt;Tools to run a reverse dependency check similar to CRAN.&lt;/p&gt; &#xA;&lt;h2&gt;How to use with GitHub Actions&lt;/h2&gt; &#xA;&lt;p&gt;To use this on GitHub Actions you can simply call the &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/reusing-workflows&#34;&gt;reusable workflow&lt;/a&gt;. To do this, create a new workflow in your package git repo named &lt;code&gt;.github/workflows/recheck.yml&lt;/code&gt; which contains the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;on:&#xA;  workflow_dispatch:&#xA;    inputs:&#xA;      which:&#xA;        type: choice&#xA;        description: Which dependents to check&#xA;        options:&#xA;        - strong&#xA;        - most&#xA;&#xA;name: Reverse dependency check&#xA;&#xA;jobs:&#xA;  revdep_check:&#xA;    name: Reverse check ${{ inputs.which }} dependents&#xA;    uses: r-devel/recheck/.github/workflows/recheck.yml@v1&#xA;    with:&#xA;      which: ${{ inputs.which }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then trigger it manually using the &#39;run workflow&#39; button under the actions tab. Note that you can pick a branch to test, so you can perform reverse dependency checks on a feature branch before merging into main.&lt;/p&gt; &#xA;&lt;p&gt;A summary of the results can be seen in the GHA webUI. Upon completion, the full install/check logs for all packages are available in the &#39;artifacts&#39; section.&lt;/p&gt; &#xA;&lt;h2&gt;Recheck goals and limitations&lt;/h2&gt; &#xA;&lt;p&gt;A reverse dependency check can be a useful diagnostic tool to identify potential regressions that may need further investigation. However it is often impractical to use as a red/green CI test: checks from other packages that depend on yours can be influenced by all sorts of factors specific to the platform, hardware, network, system setup, or just random failures.&lt;/p&gt; &#xA;&lt;p&gt;The goal of this repo is to provide a simple tool that can run on free infrastructure to discover potential problems with reverse dependencies of your package. However it is still up to you to interpret the results, and possibly investigate them to identify problems. We try to create a setup similar to CRAN, but we need to make trade offs to keep this practical (see below).&lt;/p&gt; &#xA;&lt;h2&gt;Important caveats&lt;/h2&gt; &#xA;&lt;p&gt;To be able check reverse dependencies, we first need to install all dependencies (including Suggests) for each of those packages. Many CRAN packages indirectly depend on 100+ other packages, so this quickly adds up.&lt;/p&gt; &#xA;&lt;p&gt;Hence even if your package only has a handful of dependents, you may need to install over a thousand other packages, before even starting the revdep check. For this reason it is only practical to do this on a platforms for which precompiled R binary packages are available.&lt;/p&gt; &#xA;&lt;p&gt;CRAN runs revdep checks on &lt;code&gt;r-devel&lt;/code&gt; on a server with &lt;code&gt;debian:testing&lt;/code&gt; but there are currently no R binary packages available for this platform. Instead our containers are based on &lt;code&gt;ubuntu:latest&lt;/code&gt; and run &lt;code&gt;r-release&lt;/code&gt;, for which public binary packages are available via &lt;a href=&#34;https://p3m.dev&#34;&gt;https://p3m.dev&lt;/a&gt; and &lt;a href=&#34;https://r-universe.dev&#34;&gt;https://r-universe.dev&lt;/a&gt;. This is one reason results might be slighlty different from what CRAN would show, though in practice it is usually irrelevant.&lt;/p&gt; &#xA;&lt;h2&gt;On rcheckserver&lt;/h2&gt; &#xA;&lt;p&gt;On GitHub actions we run the check inside the &lt;a href=&#34;https://github.com/r-devel/rcheckserver&#34;&gt;rcheckserver&lt;/a&gt; container. This container has the same system libraries installed as the CRAN Debian server.&lt;/p&gt;</summary>
  </entry>
</feed>