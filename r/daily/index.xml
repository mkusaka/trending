<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:52:14Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rstudio/gt</title>
    <updated>2022-06-15T01:52:14Z</updated>
    <id>tag:github.com,2022-06-15:/rstudio/gt</id>
    <link href="https://github.com/rstudio/gt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily generate information-rich, publication-quality tables from R&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;hr style=&#34;color:transparent&#34;&gt; &#xA; &lt;a href=&#34;https://gt.rstudio.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/gt/master/man/figures/logo.svg?sanitize=true&#34; width=&#34;350px&#34;&gt;&lt;/a&gt; &#xA; &lt;hr style=&#34;color:transparent&#34;&gt; &#xA; &lt;!-- badges: start --&gt; &#xA; &lt;a href=&#34;https://cran.r-project.org/package=gt&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/gt&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/rstudio/gt/actions&#34;&gt;&lt;img src=&#34;https://github.com/rich-iannone/pointblank/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://app.codecov.io/gh/rstudio/gt?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rstudio/gt/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5593&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5593/badge&#34; alt=&#34;Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=gt&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/gt&#34; alt=&#34;Monthly Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=gt&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/gt&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://rstudio.cloud/project/779965&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/RStudio%20Cloud-gt%20Test%20Drive-blue?style=social&amp;amp;logo=rstudio&amp;amp;logoColor=75AADB&#34; alt=&#34;RStudio community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.contributor-covenant.org/version/2/0/code_of_conduct/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- badges: end --&gt; &#xA; &lt;hr style=&#34;color:transparent&#34;&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;With the &lt;strong&gt;gt&lt;/strong&gt; package, anyone can make wonderful-looking tables using the &lt;strong&gt;R&lt;/strong&gt; programming language. The &lt;strong&gt;gt&lt;/strong&gt; philosophy: we can construct a wide variety of useful tables with a cohesive set of table parts. These include the &lt;em&gt;table header&lt;/em&gt;, the &lt;em&gt;stub&lt;/em&gt;, the &lt;em&gt;column labels&lt;/em&gt; and &lt;em&gt;spanner column labels&lt;/em&gt;, the &lt;em&gt;table body&lt;/em&gt;, and the &lt;em&gt;table footer&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/gt/master/man/figures/gt_parts_of_a_table.svg?sanitize=true&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It all begins with &lt;strong&gt;table data&lt;/strong&gt; (be it a tibble or a data frame). You then decide how to compose your &lt;strong&gt;gt table&lt;/strong&gt; with the elements and formatting you need for the task at hand. Finally, the table is rendered by printing it at the console, including it in an R Markdown document, or exporting to a file using &lt;code&gt;gtsave()&lt;/code&gt;. Currently, &lt;strong&gt;gt&lt;/strong&gt; supports the &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;LaTeX&lt;/strong&gt;, and &lt;strong&gt;RTF&lt;/strong&gt; output formats.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/gt/master/man/figures/gt_workflow_diagram.svg?sanitize=true&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The &lt;strong&gt;gt&lt;/strong&gt; package is designed to be both straightforward yet powerful. The emphasis is on simple functions for the everyday display table needs. Here is a brief example of how to use &lt;strong&gt;gt&lt;/strong&gt; to create a table from the included &lt;code&gt;sp500&lt;/code&gt; dataset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(gt)&#xA;library(tidyverse)&#xA;library(glue)&#xA;&#xA;# Define the start and end dates for the data range&#xA;start_date &amp;lt;- &#34;2010-06-07&#34;&#xA;end_date &amp;lt;- &#34;2010-06-14&#34;&#xA;&#xA;# Create a gt table based on preprocessed&#xA;# `sp500` table data&#xA;sp500 %&amp;gt;%&#xA;  filter(date &amp;gt;= start_date &amp;amp; date &amp;lt;= end_date) %&amp;gt;%&#xA;  select(-adj_close) %&amp;gt;%&#xA;  gt() %&amp;gt;%&#xA;  tab_header(&#xA;    title = &#34;S&amp;amp;P 500&#34;,&#xA;    subtitle = glue(&#34;{start_date} to {end_date}&#34;)&#xA;  ) %&amp;gt;%&#xA;  fmt_date(&#xA;    columns = date,&#xA;    date_style = 3&#xA;  ) %&amp;gt;%&#xA;  fmt_currency(&#xA;    columns = c(open, high, low, close),&#xA;    currency = &#34;USD&#34;&#xA;  ) %&amp;gt;%&#xA;  fmt_number(&#xA;    columns = volume,&#xA;    suffixing = TRUE&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/gt/master/man/figures/gt_sp500_table.svg?sanitize=true&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;There are six datasets included in &lt;strong&gt;gt&lt;/strong&gt;: &lt;code&gt;countrypops&lt;/code&gt;, &lt;code&gt;sza&lt;/code&gt;, &lt;code&gt;gtcars&lt;/code&gt;, &lt;code&gt;sp500&lt;/code&gt;, &lt;code&gt;pizzaplace&lt;/code&gt;, and &lt;code&gt;exibble&lt;/code&gt;. All of them are useful for experimenting with &lt;strong&gt;gt&lt;/strong&gt;’s functions.&lt;/p&gt; &#xA;&lt;p&gt;Beyond this simple example, there are many functions available in &lt;strong&gt;gt&lt;/strong&gt; for creating super-customized tables. For much more information on these, visit the &lt;a href=&#34;https://gt.rstudio.com/&#34;&gt;documentation website&lt;/a&gt; or take a &lt;em&gt;Test Drive&lt;/em&gt; in the &lt;a href=&#34;https://rstudio.cloud/project/779965&#34;&gt;RStudio Cloud project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;DISCUSSIONS&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s talk about making tables with &lt;strong&gt;gt&lt;/strong&gt; in &lt;a href=&#34;https://github.com/rstudio/gt/discussions&#34;&gt;&lt;em&gt;Discussions&lt;/em&gt;&lt;/a&gt;! It&#39;s a great place to ask questions about how to use the package, discuss some ideas, engage with others, and much more!&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;gt&lt;/strong&gt; package can be installed from &lt;strong&gt;CRAN&lt;/strong&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;gt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also choose to install the development version of &lt;strong&gt;gt&lt;/strong&gt; from &lt;strong&gt;GitHub&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;rstudio/gt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter a bug, have usage questions, or want to share ideas to make this package better, please feel free to file an &lt;a href=&#34;https://github.com/rstudio/gt/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How &lt;strong&gt;gt&lt;/strong&gt; fits in with Other Packages that Generate Display Tables&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;gt&lt;/strong&gt; package joins a burgeoning collection of packages for display table generation. Why another? We feel that there is enough room in this space to innovate further. Here are some of the ways that &lt;strong&gt;gt&lt;/strong&gt; contributes to this ecosystem:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the interface is high-level and declarative (general instructions versus very specific)&lt;/li&gt; &#xA; &lt;li&gt;the formatting options are ‘batteries included’ (scientific notation, uncertainty, ranges, percentages, suffixes, localized currency, dates/times + much more)&lt;/li&gt; &#xA; &lt;li&gt;there is excellent, pain-free support for footnotes&lt;/li&gt; &#xA; &lt;li&gt;the output is ‘camera-ready’&lt;/li&gt; &#xA; &lt;li&gt;multiple output formats are supported with the same declarative interface&lt;/li&gt; &#xA; &lt;li&gt;the API closely follows tidyverse conventions by adhering to the &lt;a href=&#34;https://style.tidyverse.org&#34;&gt;tidyverse style guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;there’s a focus on making the package documentation and examples the best they can be&lt;/li&gt; &#xA; &lt;li&gt;rigorous QA/QC measures: high test coverage for automated tests, and thorough manual testing by QA engineers (with every proposed code change)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While &lt;strong&gt;gt&lt;/strong&gt; is trying to do something different with its own interface, it may not suit your specific needs. Here is a listing of other leading table-making &lt;strong&gt;R&lt;/strong&gt; packages, with links to their respective project pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;knitr&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/yihui/knitr&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://yihui.org/knitr/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kableExtra&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/haozhu233/kableExtra&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://haozhu233.github.io/kableExtra/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;formattable&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/renkun-ken/formattable&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://renkun-ken.github.io/formattable/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DT&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/rstudio/DT&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://rstudio.github.io/DT/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;pander&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/Rapporter/pander&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;http://rapporter.github.io/pander/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;huxtable&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/hughjonesd/huxtable&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://hughjonesd.github.io/huxtable/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;reactable&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/glin/reactable&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://glin.github.io/reactable/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;flextable&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/davidgohel/flextable&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://davidgohel.github.io/flextable/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ftextra&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/atusy/ftExtra&#34;&gt;GITHUB&lt;/a&gt;,&amp;nbsp;&lt;a href=&#34;https://ftextra.atusy.net/&#34;&gt;WEBSITE&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;pixiedust&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/nutterb/pixiedust&#34;&gt;GITHUB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tangram&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/spgarbet/tangram&#34;&gt;GITHUB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ztable&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/cardiomoon/ztable&#34;&gt;GITHUB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;condformat&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://github.com/zeehio/condformat&#34;&gt;GITHUB&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;stargazer&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://CRAN.R-project.org/package=stargazer&#34;&gt;CRAN&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;xtable&lt;/strong&gt;&amp;nbsp;(&lt;a href=&#34;https://CRAN.R-project.org/package=xtable&#34;&gt;CRAN&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the gt project is released with a &lt;a href=&#34;https://www.contributor-covenant.org/version/2/0/code_of_conduct/&#34;&gt;contributor code of conduct&lt;/a&gt;.&lt;br&gt;By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;gt&lt;/strong&gt; is licensed under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/gt/master/LICENSE.md&#34;&gt;&lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;p&gt;© RStudio, PBC.&lt;/p&gt; &#xA;&lt;h2&gt;🏛️ Governance&lt;/h2&gt; &#xA;&lt;p&gt;This project is primarily maintained by &lt;a href=&#34;https://twitter.com/riannone&#34;&gt;Rich Iannone&lt;/a&gt;. Other authors may occasionally assist with some of these duties.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/gt/master/man/figures/gt_tables_footer.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tidyverse/tibble</title>
    <updated>2022-06-15T01:52:14Z</updated>
    <id>tag:github.com,2022-06-15:/tidyverse/tibble</id>
    <link href="https://github.com/tidyverse/tibble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern re-imagining of the data frame&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tibble &lt;img src=&#34;https://raw.githubusercontent.com/tidyverse/tibble/main/man/figures/logo.png&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tidyverse/tibble/actions&#34;&gt;&lt;img src=&#34;https://github.com/tidyverse/tibble/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/tidyverse/tibble?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tidyverse/tibble/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=tibble&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/tibble&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;Life cycle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;strong&gt;tibble&lt;/strong&gt;, or &lt;code&gt;tbl_df&lt;/code&gt;, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e.&amp;nbsp;they don’t change variable names or types, and don’t do partial matching) and complain more (e.g.&amp;nbsp;when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced &lt;a href=&#34;https://rdrr.io/r/base/print.html&#34;&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/a&gt; method which makes them easier to use with large datasets containing complex objects.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to tibbles, the best place to start is the &lt;a href=&#34;https://r4ds.had.co.nz/tibbles.html&#34;&gt;tibbles chapter&lt;/a&gt; in &lt;em&gt;R for data science&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre class=&#34;chroma&#34;&gt;&#xA;&lt;span class=&#34;c&#34;&gt;# The easiest way to get tibble is to install the whole tidyverse:&lt;/span&gt;&#xA;&lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://rdrr.io/r/utils/install.packages.html&#34;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;tidyverse&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span class=&#34;c&#34;&gt;# Alternatively, install just tibble:&lt;/span&gt;&#xA;&lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://rdrr.io/r/utils/install.packages.html&#34;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;tibble&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&#xA;&lt;span class=&#34;c&#34;&gt;# Or the the development version from GitHub:&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;# install.packages(&#34;devtools&#34;)&lt;/span&gt;&#xA;&lt;span class=&#34;nf&#34;&gt;devtools&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://devtools.r-lib.org/reference/remote-reexports.html&#34;&gt;install_github&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&#34;tidyverse/tibble&#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre class=&#34;chroma&#34;&gt;&#xA;&lt;span class=&#34;kr&#34;&gt;&lt;a href=&#34;https://rdrr.io/r/base/library.html&#34;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;&lt;a href=&#34;https://tibble.tidyverse.org/&#34;&gt;tibble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a tibble from an existing object with &lt;a href=&#34;https://tibble.tidyverse.org/reference/as_tibble.html&#34;&gt;&lt;code&gt;as_tibble()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre class=&#34;chroma&#34;&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://rdrr.io/r/base/data.frame.html&#34;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;a &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;, b &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;letters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;, c &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://rdrr.io/r/base/Sys.time.html&#34;&gt;Sys.Date&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt;   a b          c&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; 1 1 a 2022-03-30&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; 2 2 b 2022-03-29&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; 3 3 c 2022-03-28&lt;/span&gt;&#xA;&#xA;&lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://tibble.tidyverse.org/reference/as_tibble.html&#34;&gt;as_tibble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;# A tibble: 3 × 3&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt;       &lt;span style=&#34;font-weight: bold;&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;font-weight: bold;&#34;&gt;b&lt;/span&gt;     &lt;span style=&#34;font-weight: bold;&#34;&gt;c&lt;/span&gt;         &lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt;   &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;date&amp;gt;&lt;/span&gt;    &lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;1&lt;/span&gt;     1 a     2022-03-30&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;2&lt;/span&gt;     2 b     2022-03-29&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;3&lt;/span&gt;     3 c     2022-03-28&lt;/span&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will work for reasonable inputs that are already data.frames, lists, matrices, or tables.&lt;/p&gt; &#xA;&lt;p&gt;You can also create a new tibble from column vectors with &lt;a href=&#34;https://tibble.tidyverse.org/reference/tibble.html&#34;&gt;&lt;code&gt;tibble()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre class=&#34;chroma&#34;&gt;&#xA;&lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://tibble.tidyverse.org/reference/tibble.html&#34;&gt;tibble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;, y &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;, z &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;# A tibble: 5 × 3&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt;       &lt;span style=&#34;font-weight: bold;&#34;&gt;x&lt;/span&gt;     &lt;span style=&#34;font-weight: bold;&#34;&gt;y&lt;/span&gt;     &lt;span style=&#34;font-weight: bold;&#34;&gt;z&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt;   &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;int&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;1&lt;/span&gt;     1     1     2&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;2&lt;/span&gt;     2     1     5&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;3&lt;/span&gt;     3     1    10&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;4&lt;/span&gt;     4     1    17&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;5&lt;/span&gt;     5     1    26&lt;/span&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tibble.tidyverse.org/reference/tibble.html&#34;&gt;&lt;code&gt;tibble()&lt;/code&gt;&lt;/a&gt; does much less than &lt;a href=&#34;https://rdrr.io/r/base/data.frame.html&#34;&gt;&lt;code&gt;data.frame()&lt;/code&gt;&lt;/a&gt;: it never changes the type of the inputs (e.g.&amp;nbsp;it never converts strings to factors!), it never changes the names of variables, it only recycles inputs of length 1, and it never creates &lt;a href=&#34;https://rdrr.io/r/base/row.names.html&#34;&gt;&lt;code&gt;row.names()&lt;/code&gt;&lt;/a&gt;. You can read more about these features in &lt;a href=&#34;https://tibble.tidyverse.org/articles/tibble.html&#34;&gt;&lt;code&gt;vignette(&#34;tibble&#34;)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can define a tibble row-by-row with &lt;a href=&#34;https://tibble.tidyverse.org/reference/tribble.html&#34;&gt;&lt;code&gt;tribble()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre class=&#34;chroma&#34;&gt;&#xA;&lt;span class=&#34;nf&#34;&gt;&lt;a href=&#34;https://tibble.tidyverse.org/reference/tribble.html&#34;&gt;tribble&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&#xA;  &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;, &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;,  &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;z&lt;/span&gt;,&#xA;  &lt;span class=&#34;s&#34;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;,  &lt;span class=&#34;m&#34;&gt;3.6&lt;/span&gt;,&#xA;  &lt;span class=&#34;s&#34;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;,  &lt;span class=&#34;m&#34;&gt;8.5&lt;/span&gt;&#xA;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;# A tibble: 2 × 3&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt;   &lt;span style=&#34;font-weight: bold;&#34;&gt;x&lt;/span&gt;         &lt;span style=&#34;font-weight: bold;&#34;&gt;y&lt;/span&gt;     &lt;span style=&#34;font-weight: bold;&#34;&gt;z&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt;   &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555; font-style: italic;&#34;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;1&lt;/span&gt; a         2   3.6&lt;/span&gt;&#xA;&lt;span class=&#34;c&#34;&gt;#&amp;gt; &lt;span style=&#34;color: #555555;&#34;&gt;2&lt;/span&gt; b         1   8.5&lt;/span&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related work&lt;/h2&gt; &#xA;&lt;p&gt;The tibble print method draws inspiration from &lt;a href=&#34;https://rdatatable.gitlab.io/data.table&#34;&gt;data.table&lt;/a&gt;, and &lt;a href=&#34;https://github.com/patperry/r-frame&#34;&gt;frame&lt;/a&gt;. Like &lt;a href=&#34;https://Rdatatable.gitlab.io/data.table/reference/data.table.html&#34;&gt;&lt;code&gt;data.table::data.table()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://tibble.tidyverse.org/reference/tibble.html&#34;&gt;&lt;code&gt;tibble()&lt;/code&gt;&lt;/a&gt; doesn’t coerce strings to factors by default, doesn’t change column names, and doesn’t use rownames.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the tibble project is released with a &lt;a href=&#34;https://tibble.tidyverse.org/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gdagstn/swatcheR</title>
    <updated>2022-06-15T01:52:14Z</updated>
    <id>tag:github.com,2022-06-15:/gdagstn/swatcheR</id>
    <link href="https://github.com/gdagstn/swatcheR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast automatic selection of color swatches from images&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/21171362/171850532-ded8fd04-6233-4f68-b278-2a23bf1ee495.png&#34; align=&#34;right&#34; alt=&#34;&#34; width=&#34;150&#34;&gt; &#xA;&lt;h1&gt;swatcheR&lt;/h1&gt; &#xA;&lt;p&gt;Fast automatic selection of color swatches from images&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;swatcheR&lt;/code&gt; through &lt;code&gt;devtools&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devtools::install_github(&#34;gdagstn/swatcheR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Motivation and methodology&lt;/h1&gt; &#xA;&lt;p&gt;This package lets you automatically and quickly select a color palette (or &lt;strong&gt;swatch&lt;/strong&gt;) from a picture in .jpg or .png format. It is based on hierarchical or k-means clustering, which means that there will be some variability in the results unless you set a seed for the random number generator.&lt;/p&gt; &#xA;&lt;p&gt;The idea is not new: the &lt;code&gt;paletter&lt;/code&gt; &lt;a href=&#34;https://github.com/AndreaCirilloAC/paletter&#34;&gt;package&lt;/a&gt; by Andrea Cirillo does exactly this. However, the approach presented here is different and arguably much faster (with some caveats).&lt;/p&gt; &#xA;&lt;p&gt;The approach works as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;First, the RGB cube (made of 255^3 colors) is transformed to LAB and then DIN99 color spaces. These spaces are perceptually uniform, which means that the Euclidean distance between colors in these spaces reflects better how humans perceive different colors. This is good for working with Euclidean-distance based methods such as k-means clustering and hierachical clustering.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The DIN99 space is then summarized using k-means clustering, setting k = 4096 (square root of 256^3). This means that every color with an RGB specification can be assigned to a cluster, and therefore to a cluster centroid; rounding the coordinates of a cluster centroid gives a mean color for each cluster. This summarized space and its clustering results are kept constant as they only need to be created once, and are distributed in the package.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Colors are read from a picture and assigned to a summary color, quantifying the number of pixels that have been assigned to each color. &#34;Extreme&#34; values, such as total white/total black and other colors for which the R, G, B values are either 255 or 0, are kept separately to accommodate for very sharp colors (e.g. a total white background).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Colors are sorted, keeping the top 2000 most abundant ones by default - this can be changed by the user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally, colors can be filtered on high/low luminance and/or chroma (as defined by the HCL color space). Luminance is normally distributed and is filtered using mean +/- standard deviation(s), whereas chroma is filtered using median +/- median absolute deviation(s).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sorted colors are clustered in one of two possible ways:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hierachical clustering&lt;/strong&gt;: colors are projected to CIELab space and their $\Delta E$ DIN99 distance is measured. The distance matrix is used for hierachical clustering, and the dendrogram is cut at a height resulting in a user-defined number of clusters, corresponding to the palette size.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;K-means clustering&lt;/strong&gt; (the default): colors are projected again to the DIN99 space and k-means clustering is run again, setting a user-defined number of centers k, which corresponds to the palette size&lt;/li&gt; &#xA;   &lt;li&gt;an additional method, &lt;strong&gt;classic K-means&lt;/strong&gt; (for lack of a better name) applies k-means clustering directly on picture colors projected to the DIN99 space, bypassing summarization in the reduced color space. It is a slower method that can still yield good results, but does not allow to compare palettes on a shared space.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The most abundant color in the painting from each cluster is retained, so that every part of the color space is well represented.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;880&#34; alt=&#34;Screenshot 2022-06-05 at 2 10 51 PM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172037835-bb66539c-a905-4152-8a7a-0a62972ffcfc.png&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;San Matteo e l&#39;Angelo (Saint Matthew and the Angel)&lt;/em&gt;, Caravaggio, 1602&lt;/p&gt; &#xA;&lt;p&gt;The swatch will then have &lt;strong&gt;k * m&lt;/strong&gt; colors, where &lt;strong&gt;k&lt;/strong&gt; is the number of &lt;em&gt;clusters&lt;/em&gt; (most diverse colors) and &lt;strong&gt;m&lt;/strong&gt; is the number of &lt;em&gt;most representative colors per cluster&lt;/em&gt; (hues within the cluster). This means that looking for 20 colors with k = 20 and m = 1 will yield a different result than k = 10 and m = 2, although the final number of colors will be the same; k = 20 gives more separated colors (as it will effectively partition the DIN99 space in 20 separate clusters), whereas k = 10 and m = 2 will select color couples from each cluster. The difference may be subtle in many cases but it allows users to fine tune the process.&lt;/p&gt; &#xA;&lt;img width=&#34;1147&#34; alt=&#34;Screenshot 2022-06-05 at 2 24 24 PM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172038264-710610a1-f9e3-45cf-9cd2-5be370a46a58.png&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;Wheat Field with Cypresses&lt;/em&gt;, Vincent Van Gogh, 1889&lt;/p&gt; &#xA;&lt;p&gt;This procedure is quite fast mainly because of two tricks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the use of a pre-clustered reduced color space greatly reduces the feature space and speeds up the lookup&lt;/li&gt; &#xA; &lt;li&gt;there is no need to optimize the palette by randomization, as the projection in perceptual spaces space followed by clustering affords a better color separation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, there is a very naive option to optimize the palette that re-runs k-means several times (up to 100) and keeps the palette whose minimum color difference is above a user-defined threshold.&lt;/p&gt; &#xA;&lt;p&gt;The other positive aspect is that if you are using &lt;code&gt;swatcher&lt;/code&gt; to analyze paintings &lt;em&gt;en masse&lt;/em&gt;, they will all be assigned to a shared feature space of 4096 colors, making other types of analyses - such as embedding in a reduced space - feasible. Identifying swatches using &lt;code&gt;swatcher&lt;/code&gt; also amounts to some sort of &#34;feature selection&#34; for statistical analyses of color in paintings.&lt;/p&gt; &#xA;&lt;h2&gt;What about continuous palettes?&lt;/h2&gt; &#xA;&lt;p&gt;It is notoriously hard to interpolate colors that have a high variability in hue. For a given categorical palette several different continuous palettes can be automatically generated. &lt;code&gt;swatcheR&lt;/code&gt; tries to find good continuous palettes borrowing some tricks from computational geometry and graph theory:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;First, a large (n &amp;gt; 100) palette is used as input, and projected in DIN99 space.&lt;/li&gt; &#xA; &lt;li&gt;The palette is clustered via k-means (k set to the square root of the number of colors in the palette)&lt;/li&gt; &#xA; &lt;li&gt;a k-nearest neighbor graph is built on these clusters, using k = 2 neighbors&lt;/li&gt; &#xA; &lt;li&gt;only the largest component of the graph is retained, and a minimum spanning tree is calculated for the subgraph&lt;/li&gt; &#xA; &lt;li&gt;the longest path on the MST of the subgraph is retained&lt;/li&gt; &#xA; &lt;li&gt;a principal curve is fit in DIN99 space using only colors belonging to the clusters included in the longest MST path&lt;/li&gt; &#xA; &lt;li&gt;principal curve coordinates are converted to colors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The clustering step introduces a high level of randomness, which in this case is desirable, as many different continuous swatches can be built from a categorical one.&lt;/p&gt; &#xA;&lt;p&gt;This is the result of 12 random swatches from Caravaggio&#39;s &lt;em&gt;I bari&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;img width=&#34;500&#34; alt=&#34;Screenshot 2022-06-06 at 1 37 48 AM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172063105-f524933b-17ef-4159-9de6-e9ee54a7d234.png&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;I bari (Cardsharps)&lt;/em&gt;, Caravaggio, 1594&lt;/p&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;Screenshot 2022-06-06 at 1 36 34 AM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172063070-cd6dc50f-b00c-4fbd-b2ee-939109215ad8.png&#34;&gt; &#xA;&lt;p&gt;As you can see the yellow tones tend to appear frequently, but all swatches are different.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Using &lt;code&gt;swatcheR&lt;/code&gt; is easy. The two main functions are &lt;code&gt;analyzePictureCol()&lt;/code&gt; to get the summary color distribution from a picture, and &lt;code&gt;getPalette()&lt;/code&gt; to generate a palette from the distribution. A third function, &lt;code&gt;plotWithPal()&lt;/code&gt; is a convenience function that wraps the two main functions and shows the picture and the resulting palette side by side.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(swatcheR)&#xA;&#xA;analysis = analyzePictureCol(link = &#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/2560px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg&#34;)&#xA;&#xA;head(analysis)&#xA;#550704 #170B04 #761B04 #1B1C04 #0E2404 #5D5F04 &#xA;     17   19676      47    8096    2476     698 &#xA;    &#xA;pal = getPalette(analysis = analysis, n = 20, sub = 1)&#xA;pal&#xA; [1] &#34;#BCC37C&#34; &#34;#B7BB9F&#34; &#34;#BCA834&#34; &#34;#94A9A4&#34; &#34;#BD9D23&#34; &#34;#8799B5&#34; &#34;#8C896F&#34; &#34;#758293&#34; &#34;#5B7593&#34; &#34;#5F7678&#34; &#34;#4A6593&#34; &#34;#596B2E&#34; &#34;#365398&#34; &#34;#344876&#34;&#xA;[15] &#34;#4C4519&#34; &#34;#414137&#34; &#34;#2E413B&#34; &#34;#443527&#34; &#34;#2F3539&#34; &#34;#1C2A5C&#34;&#xA;&#xA;plotWithPal(link = &#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/2560px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg&#34;, bg = &#34;white&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;517&#34; alt=&#34;Screenshot 2022-06-05 at 2 29 01 PM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172038396-b13347d7-d1a5-4f4e-9efd-02540dfa6115.png&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;The Starry Night&lt;/em&gt;, Vincent Van Gogh, 1889&lt;/p&gt; &#xA;&lt;p&gt;The palette changes slightly, because the k-means search has a stochastic component to it, although this is mitigated by using 100 restarts.&lt;/p&gt; &#xA;&lt;p&gt;The user can optionally decide whether to apply filters to color brightness (luminance) and saturation (chroma), and how much these filters remove in proportion to the luminance/chroma value distribution.&lt;/p&gt; &#xA;&lt;p&gt;For continuous palettes &lt;code&gt;getContinuousPalette()&lt;/code&gt; can be used specifying the number of resulting palette (&lt;code&gt;tries&lt;/code&gt;). It is a good idea to first generate a large palette:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pal = getPalette(analysis = analysis, n = 50, sub = 3)&#xA;&#xA;cont_pal = getContinuousPalette(pal, tries = 5)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;Screenshot 2022-06-06 at 1 42 00 AM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172063266-9ec9fa88-54ad-465d-bd7c-e6531cf94956.png&#34;&gt; &#xA;&lt;h2&gt;Hierachical clustering or k-means?&lt;/h2&gt; &#xA;&lt;p&gt;There are some use cases in which HC outperforms k-means, and vice versa. For instance, if your picture has few colors, HC is the best choice:&lt;/p&gt; &#xA;&lt;img width=&#34;764&#34; alt=&#34;Screenshot 2022-06-05 at 2 21 02 PM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172038112-beddeba8-662e-47ab-9d5e-a633a3fa3574.png&#34;&gt; &#xA;&lt;p&gt;If there are many different colors, k-means can have a higher range to capture nuances:&lt;/p&gt; &#xA;&lt;img width=&#34;1077&#34; alt=&#34;Screenshot 2022-06-05 at 8 00 25 PM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172049432-e384c45f-446a-43cb-8b9d-64f514d7b524.png&#34;&gt; &#xA;&lt;p&gt;In the picture above, HC fails to capture the more saturated yellow component of the sunset, whereas k-means has a better coverage of the range.&lt;/p&gt; &#xA;&lt;p&gt;There are many parameteres that can be tuned to generate a satistfying palette.&lt;/p&gt; &#xA;&lt;h2&gt;Different reference spaces&lt;/h2&gt; &#xA;&lt;img width=&#34;503&#34; alt=&#34;Screenshot 2022-06-05 at 3 06 44 PM&#34; src=&#34;https://user-images.githubusercontent.com/21171362/172039666-dfd2e000-237f-432c-ad7c-e35c4babf9a2.png&#34;&gt; &#xA;&lt;p&gt;A 3D representation of summary colors and their coordinates in the &lt;code&gt;din_4096&lt;/code&gt; reference space, included in the package.&lt;/p&gt; &#xA;&lt;p&gt;The package comes with a reference space built on 4096 clusters in DIN99 space. However, if you want to use a different reference space, you can build your own using &lt;code&gt;makeReferenceSpace()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lab_1500 = makeReferenceSpace(k = 1500, space = &#34;LAB&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available options at the moment are CIELab (&#34;LAB&#34;) and DIN99 (&#34;DIN99&#34;).&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aditi Rajagopal for the package sticker&lt;/li&gt; &#xA; &lt;li&gt;Andrea Cirillo for the &lt;code&gt;paletter&lt;/code&gt; package&lt;/li&gt; &#xA; &lt;li&gt;Ross Ihaka, Paul Murrell, Kurt Hornik, Jason C. Fisher, Reto Stauffer, Claus O. Wilke, Claire D. McWhite, Achim Zeileis for the &lt;code&gt;colorspace&lt;/code&gt; package&lt;/li&gt; &#xA; &lt;li&gt;Jose Gama for the &lt;code&gt;colorscience&lt;/code&gt; package&lt;/li&gt; &#xA; &lt;li&gt;Hadley Wickham, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, and Hiroaki Yutani for the &lt;code&gt;ggplot2&lt;/code&gt; package&lt;/li&gt; &#xA; &lt;li&gt;Thomas Lin Pedersen, Berendea Nicolae, Romain François for the &lt;code&gt;farver&lt;/code&gt; package&lt;/li&gt; &#xA; &lt;li&gt;Simon Urbanek for the &lt;code&gt;png&lt;/code&gt; and &lt;code&gt;jpeg&lt;/code&gt; packages&lt;/li&gt; &#xA; &lt;li&gt;Hadley Wickham for the &lt;code&gt;reshape2&lt;/code&gt; package&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;igraph&lt;/code&gt; package &lt;a href=&#34;https://cran.r-project.org/web/packages/igraph/AUTHORS&#34;&gt;authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Trevor Hastie Andreas Weingessel, Kurt Hornik, Henrik Bengtsson, and Robrecht Cannoodt for the &lt;code&gt;princurve&lt;/code&gt; package&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>