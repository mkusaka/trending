<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-28T01:43:25Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rstudio/pointblank</title>
    <updated>2023-07-28T01:43:25Z</updated>
    <id>tag:github.com,2023-07-28:/rstudio/pointblank</id>
    <link href="https://github.com/rstudio/pointblank" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data quality assessment and metadata reporting for data frames and database tables&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://rstudio.github.io/pointblank/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/man/figures/logo.svg?sanitize=true&#34; width=&#34;350px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- badges: start --&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=pointblank&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/pointblank&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/license/mit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rstudio/pointblank/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/pointblank/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rstudio/pointblank/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/pointblank/workflows/lint/badge.svg?sanitize=true&#34; alt=&#34;Linting&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/rstudio/pointblank?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rstudio/pointblank/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/4310&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/4310/badge&#34; alt=&#34;Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=pointblank&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/pointblank&#34; alt=&#34;Monthly Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=pointblank&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/pointblank&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://rstudio.cloud/project/3411822&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Posit%20Cloud-pointblank%20Test%20Drive-blue?style=social&amp;amp;logo=rstudio&amp;amp;logoColor=75AADB&#34; alt=&#34;Posit Cloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.contributor-covenant.org/version/2/1/code_of_conduct.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.1%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- badges: end --&gt; &#xA; &lt;hr style=&#34;color:transparent&#34;&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;With the &lt;strong&gt;pointblank&lt;/strong&gt; package it’s really easy to methodically validate your data whether in the form of data frames or as database tables. On top of the validation toolset, the package gives you the means to provide and keep up-to-date with the information that &lt;em&gt;defines&lt;/em&gt; your tables.&lt;/p&gt; &#xA;&lt;p&gt;For table &lt;em&gt;validation&lt;/em&gt;, the &lt;em&gt;agent&lt;/em&gt; object works with a large collection of simple (yet powerful!) validation functions. We can enable much more sophisticated validation checks by using custom expressions, segmenting the data, and by selective mutations of the target table. The suite of validation functions ensures that &lt;em&gt;everything just works&lt;/em&gt; no matter whether your table is a data frame or a database table.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes, we want to maintain table &lt;em&gt;information&lt;/em&gt; and update it when the table goes through changes. For that, we can use an &lt;em&gt;informant&lt;/em&gt; object plus associated functions to help define the metadata entries and present it as a data dictionary. Just like we can with validation, &lt;strong&gt;pointblank&lt;/strong&gt; offers easy ways to have the metadata updated so that this important documentation doesn&#39;t become stale.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/man/figures/data_quality_reporting_workflow.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;TABLE VALIDATIONS WITH AN AGENT AND DATA QUALITY REPORTING&lt;/h2&gt; &#xA;&lt;p&gt;Data validation can be carried out in &lt;em&gt;Data Quality Reporting&lt;/em&gt; workflow, ultimately resulting in the production of of a data quality analysis report. This is most useful in a non-interactive mode where data quality for database tables and on-disk data files must be periodically checked. The &lt;strong&gt;pointblank&lt;/strong&gt; &lt;em&gt;agent&lt;/em&gt; is given a collection of validation functions to define validation steps. We can get extracts of data rows that failed validation, set up custom functions that are invoked by exceeding set threshold failure rates, etc. Want to email the report regularly (or, only if certain conditions are met)? Yep, you can do all that.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to use &lt;strong&gt;pointblank&lt;/strong&gt; to validate a local table with an &lt;em&gt;agent&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Generate a simple `action_levels` object to&#xA;# set the `warn` state if a validation step&#xA;# has a single &#39;fail&#39; test unit&#xA;al &amp;lt;- action_levels(warn_at = 1)&#xA;&#xA;# Create a pointblank `agent` object, with the&#xA;# tibble as the target table. Use three validation&#xA;# functions, then, `interrogate()`. The agent will&#xA;# then have some useful intel.&#xA;agent &amp;lt;- &#xA;  dplyr::tibble(&#xA;    a = c(5, 7, 6, 5, NA, 7),&#xA;    b = c(6, 1, 0, 6,  0, 7)&#xA;  ) %&amp;gt;%&#xA;  create_agent(&#xA;    label = &#34;A very *simple* example.&#34;,&#xA;    actions = al&#xA;  ) %&amp;gt;%&#xA;  col_vals_between(&#xA;    vars(a), 1, 9,&#xA;    na_pass = TRUE&#xA;  ) %&amp;gt;%&#xA;  col_vals_lt(&#xA;    vars(c), 12,&#xA;    preconditions = ~ . %&amp;gt;% dplyr::mutate(c = a + b)&#xA;  ) %&amp;gt;%&#xA;  col_is_numeric(vars(a, b)) %&amp;gt;%&#xA;  interrogate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The reporting’s pretty sweet. We can get a &lt;strong&gt;gt&lt;/strong&gt;-based report by printing an &lt;em&gt;agent&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/man/figures/agent_report.png&#34;&gt; &#xA;&lt;p&gt;The &lt;strong&gt;pointblank&lt;/strong&gt; package is designed to be both straightforward yet powerful. And fast! Local data frames don’t take very long to validate extensively and all validation checks on remote tables are done entirely in-database. So we can add dozens or even hundreds of validation steps without any long waits for reporting.&lt;/p&gt; &#xA;&lt;p&gt;Should you want to perform validation checks on database or &lt;em&gt;Spark&lt;/em&gt; tables, provide a &lt;code&gt;tbl_dbi&lt;/code&gt; or &lt;code&gt;tbl_spark&lt;/code&gt; object to &lt;code&gt;create_agent()&lt;/code&gt;. The &lt;strong&gt;pointblank&lt;/strong&gt; package currently supports &lt;em&gt;PostgreSQL&lt;/em&gt;. &lt;em&gt;MySQL&lt;/em&gt;, &lt;em&gt;MariaDB&lt;/em&gt;, &lt;em&gt;Microsoft SQL Server&lt;/em&gt;, &lt;em&gt;Google BigQuery&lt;/em&gt;, &lt;em&gt;DuckDB&lt;/em&gt;, &lt;em&gt;SQLite&lt;/em&gt;, and &lt;em&gt;Spark DataFrames&lt;/em&gt; (through the &lt;strong&gt;sparklyr&lt;/strong&gt; package).&lt;/p&gt; &#xA;&lt;p&gt;Here are some validation reports for the considerably larger &lt;code&gt;intendo::intendo_revenue&lt;/code&gt; table.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpubs.com/rich_i/intendo_rev_postgres&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Validation%20Report&amp;amp;message=postgres&amp;amp;color=466288&#34; alt=&#34;postgres&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://rpubs.com/rich_i/intendo_rev_mysql&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Validation%20Report&amp;amp;message=mysql&amp;amp;color=e2af55&#34; alt=&#34;mysql&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://rpubs.com/rich_i/intendo_rev_duckdb&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Validation%20Report&amp;amp;message=duckdb&amp;amp;color=black&#34; alt=&#34;duckdb&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/man/figures/pipeline_data_validation_workflow.svg?sanitize=true&#34;&gt; &#xA;&lt;h2&gt;VALIDATIONS DIRECTLY ON DATA&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;Pipeline Data Validation&lt;/em&gt; workflow uses the same collection of validation functions but without need of an &lt;em&gt;agent&lt;/em&gt;. This is useful for an ETL process where we want to periodically check data and trigger warnings, raise errors, or write out logs when exceeding specified failure thresholds. It’s a cinch to perform checks on import of the data and at key points during the transformation process, perhaps stopping data flow if things are unacceptable with regard to data quality.&lt;/p&gt; &#xA;&lt;p&gt;The following example uses the same three validation functions as before but, this time, we use them directly on the data. The validation functions act as a filter, passing data through unless execution is stopped by failing validations beyond the set threshold. In this workflow, by default, an error will occur if there is a single ‘fail’ test unit in any validation step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dplyr::tibble(&#xA;    a = c(5, 7, 6, 5, NA, 7),&#xA;    b = c(6, 1, 0, 6,  0, 7)&#xA;  ) %&amp;gt;%&#xA;  col_vals_between(&#xA;    vars(a), 1, 9,&#xA;    na_pass = TRUE&#xA;  ) %&amp;gt;%&#xA;  col_vals_lt(&#xA;    vars(c), 12,&#xA;    preconditions = ~ . %&amp;gt;% dplyr::mutate(c = a + b)&#xA;  ) %&amp;gt;%&#xA;  col_is_numeric(vars(a, b))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Error: Exceedance of failed test units where values in `c` should have been &amp;lt; `12`.&#xA;The `col_vals_lt()` validation failed beyond the absolute threshold level (1).&#xA;* failure level (2) &amp;gt;= failure threshold (1) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can downgrade this error to a warning with the &lt;code&gt;warn_on_fail()&lt;/code&gt; helper function (assigning it to &lt;code&gt;actions&lt;/code&gt;). In this way, the data will always be returned, but warnings will appear.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The `warn_on_fail()` function is a nice&#xA;# shortcut for `action_levels(warn_at = 1)`;&#xA;# it works great in this data checking workflow&#xA;# (and the threshold can still be adjusted)&#xA;dplyr::tibble(&#xA;    a = c(5, 7, 6, 5, NA, 7),&#xA;    b = c(6, 1, 0, 6,  0, 7)&#xA;  ) %&amp;gt;%&#xA;  col_vals_between(&#xA;    vars(a), 1, 9,&#xA;    na_pass = TRUE,&#xA;    actions = warn_on_fail()&#xA;  ) %&amp;gt;%&#xA;  col_vals_lt(&#xA;    vars(c), 12,&#xA;    preconditions = ~ . %&amp;gt;% dplyr::mutate(c = a + b),&#xA;    actions = warn_on_fail()&#xA;  ) %&amp;gt;%&#xA;  col_is_numeric(&#xA;    vars(a, b),&#xA;    actions = warn_on_fail()&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tibble: 6 x 2&#xA;#&amp;gt;       a     b&#xA;#&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1     5     6&#xA;#&amp;gt; 2     7     1&#xA;#&amp;gt; 3     6     0&#xA;#&amp;gt; 4     5     6&#xA;#&amp;gt; 5    NA     0&#xA;#&amp;gt; 6     7     7&#xA;&#xA;Warning message:&#xA;Exceedance of failed test units where values in `c` should have been &amp;lt; `12`.&#xA;The `col_vals_lt()` validation failed beyond the absolute threshold level (1).&#xA;* failure level (2) &amp;gt;= failure threshold (1) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Should you need more fine-grained thresholds and resultant actions, the &lt;code&gt;action_levels()&lt;/code&gt; function can be used to specify multiple failure thresholds and side effects for each failure state. However, with &lt;code&gt;warn_on_fail()&lt;/code&gt; and &lt;code&gt;stop_on_fail()&lt;/code&gt; (applied by default, with &lt;code&gt;stop_at = 1&lt;/code&gt;), you should have good enough options for this validation workflow.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;VALIDATIONS IN R MARKDOWN DOCUMENTS&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;strong&gt;pointblank&lt;/strong&gt; in an R Markdown workflow is enabled by default once the &lt;strong&gt;pointblank&lt;/strong&gt; library is loaded. The framework allows for validation testing within specialized validation code chunks where the &lt;code&gt;validate = TRUE&lt;/code&gt; option is set. Using &lt;strong&gt;pointblank&lt;/strong&gt; validation functions on data in these marked code chunks will flag overall failure if the stop threshold is exceeded anywhere. All errors are reported in the validation code chunk after rendering the document to HTML, where green or red status buttons indicate whether all validations succeeded or failures occurred. Click them to reveal the otherwise hidden validation statements and any associated error messages.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/man/figures/pointblank_rmarkdown.png&#34; width=&#34;100%&#34; style=&#34;border:2px solid #021a40;&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The above R Markdown document is available as a template in the RStudio IDE; it’s called &lt;code&gt;Pointblank Validation&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;TABLE INFORMATION&lt;/h2&gt; &#xA;&lt;p&gt;Table information can be synthesized in an &lt;em&gt;information management&lt;/em&gt; workflow, giving us a snapshot of a data table we care to collect information on. The &lt;strong&gt;pointblank&lt;/strong&gt; &lt;em&gt;informant&lt;/em&gt; is fed a series of &lt;code&gt;info_*()&lt;/code&gt; functions to define bits of information about a table. This info text can pertain to individual columns, the table as a whole, and whatever additional information makes sense for your organization. We can even glean little snippets of information (like column stats or sample values) from the target table with &lt;code&gt;info_snippet()&lt;/code&gt; and the &lt;code&gt;snip_*()&lt;/code&gt; functions and mix them into the data dictionary wherever they&#39;re needed.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to use &lt;strong&gt;pointblank&lt;/strong&gt; to incorporate pieces of info text into an &lt;em&gt;informant&lt;/em&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Create a pointblank `informant` object, with the&#xA;# tibble as the target table. Use a few information&#xA;# functions and end with `incorporate()`. The informant&#xA;# will then show you information about the tibble.&#xA;informant &amp;lt;- &#xA;  dplyr::tibble(&#xA;    a = c(5, 7, 6, 5, NA, 7),&#xA;    b = c(6, 1, 0, 6,  0, 7)&#xA;  ) %&amp;gt;%&#xA;  create_informant(&#xA;    label = &#34;A very *simple* example.&#34;,&#xA;    tbl_name = &#34;example_tbl&#34;&#xA;  ) %&amp;gt;%&#xA;  info_tabular(&#xA;    description = &#34;This two-column table is nothing all that&#xA;    interesting, but, it&#39;s fine for examples on **GitHub**&#xA;    `README` pages. Column names are `a` and `b`. ((Cool stuff))&#34;&#xA;  ) %&amp;gt;%&#xA;  info_columns(&#xA;    columns = &#34;a&#34;,&#xA;    info = &#34;This column has an `NA` value. [[Watch out!]]&amp;lt;&amp;lt;color: red;&amp;gt;&amp;gt;&#34;&#xA;  ) %&amp;gt;%&#xA;  info_columns(&#xA;    columns = &#34;a&#34;,&#xA;    info = &#34;Mean value is `{a_mean}`.&#34;&#xA;  ) %&amp;gt;%&#xA;  info_columns(&#xA;    columns = &#34;b&#34;,&#xA;    info = &#34;Like column `a`. The lowest value is `{b_lowest}`.&#34;&#xA;  ) %&amp;gt;%&#xA;  info_columns(&#xA;    columns = &#34;b&#34;,&#xA;    info = &#34;The highest value is `{b_highest}`.&#34;&#xA;  ) %&amp;gt;%&#xA;  info_snippet(&#xA;    snippet_name = &#34;a_mean&#34;,&#xA;    fn = ~ . %&amp;gt;% .$a %&amp;gt;% mean(na.rm = TRUE) %&amp;gt;% round(2)&#xA;  ) %&amp;gt;%&#xA;  info_snippet(snippet_name = &#34;b_lowest&#34;, fn = snip_lowest(&#34;b&#34;)) %&amp;gt;%&#xA;  info_snippet(snippet_name = &#34;b_highest&#34;, fn = snip_highest(&#34;b&#34;)) %&amp;gt;%&#xA;  info_section(&#xA;    section_name = &#34;further information&#34;, &#xA;    `examples and documentation` = &#34;Examples for how to use the&#xA;    `info_*()` functions (and many more) are available at the&#xA;    [**pointblank** site](https://rstudio.github.io/pointblank/).&#34;&#xA;  ) %&amp;gt;%&#xA;  incorporate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By printing the &lt;em&gt;informant&lt;/em&gt; we get the table information report.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/man/figures/informant_report.png&#34;&gt; &#xA;&lt;p&gt;Here is a link to a hosted information report for the &lt;code&gt;intendo::intendo_revenue&lt;/code&gt; table:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpubs.com/rich_i/info_revenue_postgres&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Information%20Report&amp;amp;message=intendo::intendo_revenue&amp;amp;color=466288&#34; alt=&#34;Information Report for intendo::intendo_revenue&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;TABLE SCANS&lt;/h2&gt; &#xA;&lt;p&gt;We can use the &lt;code&gt;scan_data()&lt;/code&gt; function to generate a comprehensive summary of a tabular dataset. This allows us to quickly understand what&#39;s in the dataset and it helps us determine if there are any peculiarities within the data. Scanning the &lt;code&gt;dplyr::storms&lt;/code&gt; dataset with &lt;code&gt;scan_data(tbl = dplyr::storms)&lt;/code&gt; gives us an interactive HTML report. Here are a few of them, published in &lt;strong&gt;RPubs&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpubs.com/rich_i/scan_data_storms&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Table%20Scan&amp;amp;message=dplyr::storms&amp;amp;color=blue&#34; alt=&#34;Table Scan of dplyr::storms&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpubs.com/rich_i/scan_data_game_revenue&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Table%20Scan&amp;amp;message=pointblank::game_revenue&amp;amp;color=blue&#34; alt=&#34;Table Scan of pointblank::game_revenue&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Database tables can be used with &lt;code&gt;scan_data()&lt;/code&gt; as well. Here are two examples using (1) the &lt;code&gt;full_region&lt;/code&gt; table of the &lt;strong&gt;Rfam&lt;/strong&gt; database (hosted publicly at &lt;code&gt;mysql-rfam-public.ebi.ac.uk&lt;/code&gt;) and (2) the &lt;code&gt;assembly&lt;/code&gt; table of the &lt;strong&gt;Ensembl&lt;/strong&gt; database (hosted publicly at &lt;code&gt;ensembldb.ensembl.org&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpubs.com/rich_i/rfam_full_region&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Table%20Scan&amp;amp;message=Rfam:%20full_region&amp;amp;color=green&#34; alt=&#34;Rfam: full_region&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpubs.com/rich_i/ensembl_assembly&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Table%20Scan&amp;amp;message=Ensembl:%20assembly&amp;amp;color=green&#34; alt=&#34;Ensembl: assembly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;OVERVIEW OF PACKAGE FUNCTIONS&lt;/h2&gt; &#xA;&lt;p&gt;There are many functions available in &lt;strong&gt;pointblank&lt;/strong&gt; for understanding data quality and creating data documentation. Here is an overview of all of them, grouped by family. For much more information on these, visit the &lt;a href=&#34;https://rstudio.github.io/pointblank/&#34;&gt;documentation website&lt;/a&gt; or take a &lt;em&gt;Test Drive&lt;/em&gt; in the &lt;a href=&#34;https://rstudio.cloud/project/3411822&#34;&gt;Posit Cloud project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/man/figures/pointblank_functions.svg?sanitize=true&#34; width=&#34;100%&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;DISCUSSIONS&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s talk about data validation and data documentation in &lt;a href=&#34;https://github.com/rstudio/pointblank/discussions&#34;&gt;&lt;strong&gt;pointblank&lt;/strong&gt; Discussions&lt;/a&gt;! It&#39;s a great place to ask questions about how to use the package, discuss some ideas, engage with others, and much more!&lt;/p&gt; &#xA;&lt;h2&gt;INSTALLATION&lt;/h2&gt; &#xA;&lt;p&gt;Want to try this out? The &lt;strong&gt;pointblank&lt;/strong&gt; package is available on &lt;strong&gt;CRAN&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;pointblank&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install the development version of &lt;strong&gt;pointblank&lt;/strong&gt; from &lt;strong&gt;GitHub&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;rstudio/pointblank&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter a bug, have usage questions, or want to share ideas to make this package better, feel free to file an &lt;a href=&#34;https://github.com/rstudio/pointblank/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the gt project is released with a &lt;a href=&#34;https://www.contributor-covenant.org/version/2/1/code_of_conduct.html&#34;&gt;contributor code of conduct&lt;/a&gt;.&lt;br&gt;By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;pointblank&lt;/strong&gt; is licensed under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/pointblank/main/LICENSE.md&#34;&gt;&lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/a&gt; file for more details.&lt;/p&gt; &#xA;&lt;p&gt;© Posit Software, PBC.&lt;/p&gt; &#xA;&lt;h2&gt;🏛️ Governance&lt;/h2&gt; &#xA;&lt;p&gt;This project is primarily maintained by &lt;a href=&#34;https://twitter.com/riannone&#34;&gt;Rich Iannone&lt;/a&gt;. Other authors may occasionally assist with some of these duties.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>habitus-eu/hbGPS</title>
    <updated>2023-07-28T01:43:25Z</updated>
    <id>tag:github.com,2023-07-28:/habitus-eu/hbGPS</id>
    <link href="https://github.com/habitus-eu/hbGPS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R package to process GPS data collected in human behaviour with option to merge/utilise time series from accelerometer data&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/habitus-eu/hbGPS/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions R-CMD-check&#34;&gt; &lt;a href=&#34;https://app.codecov.io/gh/habitus-eu/hbGPS&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/habitus-eu/hbGPS/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;hbGPS&lt;/h1&gt; &#xA;&lt;p&gt;R package to process GPS data collected in human behaviour with option to merge time series derived with the GGIR R package for accelerometer data. The package offers a pipeline that does:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Load GPS csv files (aim is to make this flexible to most common formats)&lt;/li&gt; &#xA; &lt;li&gt;Account for timezone in timestamp interpretation&lt;/li&gt; &#xA; &lt;li&gt;Signal to noise calculation in GPS data&lt;/li&gt; &#xA; &lt;li&gt;Outlier detection and removal for speed and elevation&lt;/li&gt; &#xA; &lt;li&gt;Distance and speed calculation&lt;/li&gt; &#xA; &lt;li&gt;Indoor/Outdoor detection&lt;/li&gt; &#xA; &lt;li&gt;Trip detection where it allows for breaks in trips&lt;/li&gt; &#xA; &lt;li&gt;Merging of GGIR time series output data, this allows for flexibility to work with a wide variety of accelerometer brands and data formats&lt;/li&gt; &#xA; &lt;li&gt;User control over key parameters&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>etiennebacher/tidypolars</title>
    <updated>2023-07-28T01:43:25Z</updated>
    <id>tag:github.com,2023-07-28:/etiennebacher/tidypolars</id>
    <link href="https://github.com/etiennebacher/tidypolars" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An attempt at making polars syntax easier to use&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tidypolars&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; If you’re looking for the Python package “tidypolars”, you’re on the wrong repo. The right one is here: &lt;a href=&#34;https://github.com/markfairbanks/tidypolars&#34;&gt;markfairbanks/tidypolars&lt;/a&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/etiennebacher/tidypolars/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/etiennebacher/tidypolars/main/#general-syntax&#34;&gt;General syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/etiennebacher/tidypolars/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;polars&lt;/code&gt; (both the Rust source and the R implementation) are amazing packages. I won’t argue here for the interest of using &lt;code&gt;polars&lt;/code&gt;, there are already a lot of resources on &lt;a href=&#34;https://rpolars.github.io/&#34;&gt;its website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One characteristic of &lt;code&gt;polars&lt;/code&gt; is that its syntax is 1) extremely verbose, and 2) very close to the &lt;code&gt;pandas&lt;/code&gt; syntax in Python. While this makes it quite easy to read, it is &lt;strong&gt;yet another syntax to learn&lt;/strong&gt; for R users that are accustomed so far to either base R, &lt;code&gt;data.table&lt;/code&gt; or the &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The objective of &lt;code&gt;tidypolars&lt;/code&gt; is to &lt;strong&gt;provide functions that are very close to the &lt;code&gt;tidyverse&lt;/code&gt; ones&lt;/strong&gt; but that call the &lt;code&gt;polars&lt;/code&gt; functions under the hood so that we don’t lose anything of its capacities. Moreover, the objective is to keep &lt;code&gt;tidypolars&lt;/code&gt; &lt;strong&gt;dependency-free&lt;/strong&gt; with the exception of &lt;code&gt;polars&lt;/code&gt; itself (which has no dependencies).&lt;/p&gt; &#xA;&lt;h2&gt;General syntax&lt;/h2&gt; &#xA;&lt;p&gt;Overall, you only need to add &lt;code&gt;pl_&lt;/code&gt; as a prefix to the &lt;code&gt;tidyverse&lt;/code&gt; function you’re used to. For example, &lt;code&gt;dplyr::mutate()&lt;/code&gt; modifies classic &lt;code&gt;R&lt;/code&gt; dataframes, and &lt;code&gt;tidypolars::pl_mutate()&lt;/code&gt; modifies &lt;code&gt;polars&lt;/code&gt;’ &lt;code&gt;DataFrame&lt;/code&gt;s and &lt;code&gt;LazyFrame&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tidypolars&lt;/code&gt; makes it easier for R users to use &lt;code&gt;polars&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(polars)&#xA;library(tidypolars)&#xA;&#xA;# polars syntax&#xA;pl$DataFrame(iris)$&#xA;  select(c(&#34;Sepal.Length&#34;, &#34;Sepal.Width&#34;, &#34;Petal.Length&#34;, &#34;Petal.Width&#34;))$&#xA;  with_columns(&#xA;    pl$when(&#xA;      (pl$col(&#34;Petal.Length&#34;) / pl$col(&#34;Petal.Width&#34;) &amp;gt; 3)&#xA;    )$then(&#34;long&#34;)$&#xA;      otherwise(&#34;large&#34;)$&#xA;      alias(&#34;petal_type&#34;)&#xA;  )&#xA;#&amp;gt; shape: (150, 5)&#xA;#&amp;gt; ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐&#xA;#&amp;gt; │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ petal_type │&#xA;#&amp;gt; │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │&#xA;#&amp;gt; │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str        │&#xA;#&amp;gt; ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡&#xA;#&amp;gt; │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ …            ┆ …           ┆ …            ┆ …           ┆ …          │&#xA;#&amp;gt; │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ large      │&#xA;#&amp;gt; │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ large      │&#xA;#&amp;gt; │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ large      │&#xA;#&amp;gt; │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ large      │&#xA;#&amp;gt; └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘&#xA;&#xA;# tidypolars syntax&#xA;iris |&amp;gt; &#xA;  as_polars() |&amp;gt; &#xA;  pl_select(starts_with(&#34;Sep&#34;, &#34;Pet&#34;)) |&amp;gt; &#xA;  pl_mutate(&#xA;    petal_type = ifelse((Petal.Length / Petal.Width) &amp;gt; 3, &#34;long&#34;, &#34;large&#34;)&#xA;  )&#xA;#&amp;gt; shape: (150, 5)&#xA;#&amp;gt; ┌──────────────┬─────────────┬──────────────┬─────────────┬────────────┐&#xA;#&amp;gt; │ Sepal.Length ┆ Sepal.Width ┆ Petal.Length ┆ Petal.Width ┆ petal_type │&#xA;#&amp;gt; │ ---          ┆ ---         ┆ ---          ┆ ---         ┆ ---        │&#xA;#&amp;gt; │ f64          ┆ f64         ┆ f64          ┆ f64         ┆ str        │&#xA;#&amp;gt; ╞══════════════╪═════════════╪══════════════╪═════════════╪════════════╡&#xA;#&amp;gt; │ 5.1          ┆ 3.5         ┆ 1.4          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ 4.9          ┆ 3.0         ┆ 1.4          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ 4.7          ┆ 3.2         ┆ 1.3          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ 4.6          ┆ 3.1         ┆ 1.5          ┆ 0.2         ┆ long       │&#xA;#&amp;gt; │ …            ┆ …           ┆ …            ┆ …           ┆ …          │&#xA;#&amp;gt; │ 6.3          ┆ 2.5         ┆ 5.0          ┆ 1.9         ┆ large      │&#xA;#&amp;gt; │ 6.5          ┆ 3.0         ┆ 5.2          ┆ 2.0         ┆ large      │&#xA;#&amp;gt; │ 6.2          ┆ 3.4         ┆ 5.4          ┆ 2.3         ┆ large      │&#xA;#&amp;gt; │ 5.9          ┆ 3.0         ┆ 5.1          ┆ 1.8         ┆ large      │&#xA;#&amp;gt; └──────────────┴─────────────┴──────────────┴─────────────┴────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And it’s still as fast as the original &lt;code&gt;polars&lt;/code&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr, warn.conflicts = FALSE)&#xA;&#xA;large_iris &amp;lt;- data.table::rbindlist(rep(list(iris), 100000))&#xA;&#xA;bench::mark(&#xA;  polars = {&#xA;    pl$DataFrame(large_iris)$&#xA;      select(c(&#34;Sepal.Length&#34;, &#34;Sepal.Width&#34;, &#34;Petal.Length&#34;, &#34;Petal.Width&#34;))$&#xA;      with_columns(&#xA;        pl$when(&#xA;          (pl$col(&#34;Petal.Length&#34;) / pl$col(&#34;Petal.Width&#34;) &amp;gt; 3)&#xA;        )$then(&#34;long&#34;)$&#xA;          otherwise(&#34;large&#34;)$&#xA;          alias(&#34;petal_type&#34;)&#xA;      )&#xA;  }, &#xA;  tidypolars = {&#xA;    large_iris |&amp;gt; &#xA;      as_polars() |&amp;gt; &#xA;      pl_select(starts_with(&#34;Sep&#34;, &#34;Pet&#34;)) |&amp;gt; &#xA;      pl_mutate(&#xA;        petal_type = ifelse((Petal.Length / Petal.Width) &amp;gt; 3, &#34;long&#34;, &#34;large&#34;)&#xA;      )&#xA;  },&#xA;  dplyr = {&#xA;    large_iris |&amp;gt; &#xA;      select(starts_with(c(&#34;Sep&#34;, &#34;Pet&#34;))) |&amp;gt; &#xA;      mutate(&#xA;        petal_type = ifelse((Petal.Length / Petal.Width) &amp;gt; 3, &#34;long&#34;, &#34;large&#34;)&#xA;      )&#xA;  },&#xA;  check = FALSE,&#xA;  iterations = 10&#xA;)&#xA;#&amp;gt; # A tibble: 3 × 6&#xA;#&amp;gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`&#xA;#&amp;gt;   &amp;lt;bch:expr&amp;gt; &amp;lt;bch:tm&amp;gt; &amp;lt;bch:tm&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;bch:byt&amp;gt;    &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 polars        1.88s    2.07s     0.482     629MB     2.89&#xA;#&amp;gt; 2 tidypolars    1.86s    1.91s     0.491     629MB     1.80&#xA;#&amp;gt; 3 dplyr         3.81s    3.81s     0.263     918MB     3.68&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>