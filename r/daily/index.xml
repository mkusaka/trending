<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-22T01:39:35Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yuezhengfu/CNPS.cycle</title>
    <updated>2023-11-22T01:39:35Z</updated>
    <id>tag:github.com,2023-11-22:/yuezhengfu/CNPS.cycle</id>
    <link href="https://github.com/yuezhengfu/CNPS.cycle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is an R package for element cycle analysis using metagenomic data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CNPS.cycle&lt;/h1&gt; &#xA;&lt;p&gt;This is an R package for element cycle analysis using metagenomic data.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sandialabs/veesa</title>
    <updated>2023-11-22T01:39:35Z</updated>
    <id>tag:github.com,2023-11-22:/sandialabs/veesa</id>
    <link href="https://github.com/sandialabs/veesa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VEESA: Explainable machine learning with functional data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VEESA R Package&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;R Library for VEESA Pipeline for Explainable Machine Learning with Functional Data&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sandialabs/veesa/actions/workflows/r.yml&#34;&gt;&lt;img src=&#34;https://github.com/sandialabs/veesa/actions/workflows/r.yml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=veesa&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/veesa&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;A R package for explainable machine learning with functional data. Utilizes elastic functional data analysis framework&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;v0.1.0 will soon be on &lt;a href=&#34;https://cran.r-project.org/package=veesa&#34;&gt;CRAN&lt;/a&gt; and can be installed as&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;install.packages(&#34;veesa&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download zip or tar.gz of package or clone repository&lt;/li&gt; &#xA; &lt;li&gt;Install into R (&amp;gt; 4.1.0)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;install.packages(&#34;veesa.tar.gz&#34;, repos = NULL)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;paper soon&gt; &#xA; &lt;h1&gt;Set Up&lt;/h1&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load R packages&#xA;library(cowplot)&#xA;library(dplyr)&#xA;library(ggplot2)&#xA;library(purrr)&#xA;library(randomForest)&#xA;library(tidyr)&#xA;library(veesa)&#xA;&#xA;# Specify a color palette&#xA;color_pal = wesanderson::wes_palette(&#34;Zissou1&#34;, 5, type = &#34;continuous&#34;)&#xA;&#xA;# Specify colors for PC direction plots&#xA;col_plus1 = &#34;#784D8C&#34;&#xA;col_plus2 = &#34;#A289AE&#34;&#xA;col_minus1 = &#34;#EA9B44&#34;&#xA;col_minus2 = &#34;#EBBC88&#34;&#xA;col_pcdir_1sd = c(col_plus1, &#34;black&#34;, col_minus1)&#xA;col_pcdir_2sd = c(col_plus2, col_plus1, &#34;black&#34;, col_minus1, col_minus2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h1&gt;Data Simulation&lt;/h1&gt; &#xA; &lt;p&gt;Simulate data:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sim_data = simulate_functions(M = 100, N = 75, seed = 20211130)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Separate data into training/testing:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(20211130)&#xA;id = unique(sim_data$id)&#xA;M_test = length(id) * 0.25&#xA;id_test = sample(x = id, size = M_test, replace = F)&#xA;sim_data = sim_data %&amp;gt;% mutate(data = ifelse(id %in% id_test, &#34;test&#34;, &#34;train&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Simulated functions colored by covariates:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;/p&gt; &#xA; &lt;p&gt;Prepare matrices from the data frames:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;prep_matrix &amp;lt;- function(df, train_test) {&#xA;  df %&amp;gt;%&#xA;    filter(data == train_test) %&amp;gt;%&#xA;    select(id, t, y) %&amp;gt;%&#xA;    ungroup() %&amp;gt;%&#xA;    pivot_wider(id_cols = t,&#xA;                names_from = id,&#xA;                values_from = y) %&amp;gt;%&#xA;    select(-t) %&amp;gt;%&#xA;    as.matrix()&#xA;}&#xA;&#xA;sim_train_matrix = prep_matrix(df = sim_data, train_test = &#34;train&#34;)&#xA;sim_test_matrix = prep_matrix(df = sim_data, train_test = &#34;test&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Create a vector of times:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;times = sim_data$t %&amp;gt;% unique()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h1&gt;Alignment and fPCA&lt;/h1&gt; &#xA; &lt;p&gt;Prepare train data&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;train_transformed_jfpca &amp;lt;-&#xA;  prep_training_data(&#xA;    f = sim_train_matrix,&#xA;    time = times, &#xA;    fpca_method = &#34;jfpca&#34;,&#xA;    optim_method = &#34;DPo&#34;&#xA;  )&#xA;&#xA;train_transformed_vfpca &amp;lt;-&#xA;  prep_training_data(&#xA;    f = sim_train_matrix,&#xA;    time = times, &#xA;    fpca_method = &#34;vfpca&#34;,&#xA;    optim_method = &#34;DPo&#34;&#xA;  )&#xA;&#xA;train_transformed_hfpca &amp;lt;-&#xA;  prep_training_data(&#xA;    f = sim_train_matrix,&#xA;    time = times, &#xA;    fpca_method = &#34;hfpca&#34;,&#xA;    optim_method = &#34;DPo&#34;&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Prepare test data:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;test_transformed_jfpca &amp;lt;-&#xA;  prep_testing_data(&#xA;    f = sim_test_matrix,&#xA;    time = times,&#xA;    train_prep = train_transformed_jfpca,&#xA;    optim_method = &#34;DPo&#34;&#xA;  )&#xA;&#xA;test_transformed_vfpca &amp;lt;-&#xA;  prep_testing_data(&#xA;    f = sim_test_matrix,&#xA;    time = times,&#xA;    train_prep = train_transformed_vfpca,&#xA;    optim_method = &#34;DPo&#34;&#xA;  )&#xA;&#xA;test_transformed_hfpca &amp;lt;-&#xA;  prep_testing_data(&#xA;    f = sim_test_matrix,&#xA;    time = times,&#xA;    train_prep = train_transformed_hfpca,&#xA;    optim_method = &#34;DPo&#34;&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Plot several PCs:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-9-1.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-9-2.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-9-3.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;/p&gt; &#xA; &lt;p&gt;Compare jfPCA coefficients from train and test data:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-10-1.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-10-2.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-10-3.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;/p&gt; &#xA; &lt;h1&gt;Models&lt;/h1&gt; &#xA; &lt;p&gt;Create response variable:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x1_train &amp;lt;- &#xA;  sim_data %&amp;gt;% filter(data == &#34;train&#34;) %&amp;gt;%&#xA;  select(id, x1) %&amp;gt;%&#xA;  distinct() %&amp;gt;% &#xA;  pull(x1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Create data frames with PCs and response for random forest:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rf_jfpca_df &amp;lt;- &#xA;  train_transformed_jfpca$fpca_res$coef %&amp;gt;%&#xA;  data.frame() %&amp;gt;%&#xA;  rename_all(.funs = function(x) stringr::str_replace(x, &#34;X&#34;, &#34;pc&#34;)) %&amp;gt;%&#xA;  mutate(x1 = x1_train) %&amp;gt;%&#xA;  select(x1, everything())&#xA;&#xA;rf_vfpca_df &amp;lt;- &#xA;  train_transformed_vfpca$fpca_res$coef %&amp;gt;%&#xA;  data.frame() %&amp;gt;%&#xA;  rename_all(.funs = function(x) stringr::str_replace(x, &#34;X&#34;, &#34;pc&#34;)) %&amp;gt;%&#xA;  mutate(x1 = x1_train) %&amp;gt;%&#xA;  select(x1, everything())&#xA;&#xA;rf_hfpca_df &amp;lt;- &#xA;  train_transformed_hfpca$fpca_res$coef %&amp;gt;%&#xA;  data.frame() %&amp;gt;%&#xA;  rename_all(.funs = function(x) stringr::str_replace(x, &#34;X&#34;, &#34;pc&#34;)) %&amp;gt;%&#xA;  mutate(x1 = x1_train) %&amp;gt;%&#xA;  select(x1, everything())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Fit random forests:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(20211130)&#xA;rf_jfpca = randomForest(x1 ~ ., data = rf_jfpca_df)&#xA;rf_vfpca = randomForest(x1 ~ ., data = rf_vfpca_df)&#xA;rf_hfpca = randomForest(x1 ~ ., data = rf_hfpca_df)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h1&gt;PFI&lt;/h1&gt; &#xA; &lt;p&gt;Compute PFI:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(20211130)&#xA;pfi_jfpca &amp;lt;-&#xA;  compute_pfi(&#xA;    x = rf_jfpca_df %&amp;gt;% select(-x1),&#xA;    y = rf_jfpca_df$x1,&#xA;    f = rf_jfpca,&#xA;    K = 10,&#xA;    metric = &#34;nmse&#34;&#xA;  )&#xA;pfi_vfpca &amp;lt;-&#xA;  compute_pfi(&#xA;    x = rf_vfpca_df %&amp;gt;% select(-x1),&#xA;    y = rf_vfpca_df$x1,&#xA;    f = rf_vfpca,&#xA;    K = 10,&#xA;    metric = &#34;nmse&#34;&#xA;  )&#xA;pfi_hfpca &amp;lt;-&#xA;  compute_pfi(&#xA;    x = rf_hfpca_df %&amp;gt;% select(-x1),&#xA;    y = rf_hfpca_df$x1,&#xA;    f = rf_hfpca,&#xA;    K = 10,&#xA;    metric = &#34;nmse&#34;&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;PFI results (mean of reps):&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-15-1.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-15-2.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-15-3.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;/p&gt; &#xA; &lt;p&gt;PFI results (variability across reps):&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-16-1.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-16-2.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-16-3.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;/p&gt; &#xA; &lt;p&gt;Identify the top PC for each elastic fPCA method:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;top_pc_jfpca &amp;lt;- &#xA;  data.frame(pfi = pfi_jfpca$pfi) %&amp;gt;%&#xA;  mutate(pc = 1:n()) %&amp;gt;%&#xA;  arrange(desc(pfi)) %&amp;gt;%&#xA;  slice(1) %&amp;gt;%&#xA;  pull(pc)&#xA;&#xA;top_pc_vfpca &amp;lt;- &#xA;  data.frame(pfi = pfi_vfpca$pfi) %&amp;gt;%&#xA;  mutate(pc = 1:n()) %&amp;gt;%&#xA;  arrange(desc(pfi)) %&amp;gt;%&#xA;  slice(1) %&amp;gt;%&#xA;  pull(pc)&#xA;&#xA;top_pc_hfpca &amp;lt;- &#xA;  data.frame(pfi = pfi_hfpca$pfi) %&amp;gt;%&#xA;  mutate(pc = 1:n()) %&amp;gt;%&#xA;  arrange(desc(pfi)) %&amp;gt;%&#xA;  slice(1) %&amp;gt;%&#xA;  pull(pc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Principal directions of top PC for each jfPCA method:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-18-1.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-18-2.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sandialabs/veesa/master/README_files/figure-gfm/unnamed-chunk-18-3.png&#34; alt=&#34;&#34;&gt;&#xA;  &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;/paper&gt;</summary>
  </entry>
  <entry>
    <title>matloff/ArtOfML</title>
    <updated>2023-11-22T01:39:35Z</updated>
    <id>tag:github.com,2023-11-22:/matloff/ArtOfML</id>
    <link href="https://github.com/matloff/ArtOfML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Companion to &#34;The Art of Machine Learning&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Art of Machine Learning, NSP 2023&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/ArtOfML/main/FrontCover.png&#34; alt=&#34;Front cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hi, everyone. Norm Matloff of UC Davis here, author of this book. I do research, teach and write in computer science and statistics (&lt;a href=&#34;https://heather.cs.ucdavis.edu/matloff.html&#34;&gt;see my Bio&lt;/a&gt;). I&#39;ve written a number of books, including an award-winning one, but I&#39;ve found writing this one to be especially gratifying.&lt;/p&gt; &#xA;&lt;h2&gt;Why I wrote this book&lt;/h2&gt; &#xA;&lt;p&gt;There are many great machine learning (ML) books out there, of course, but none really &lt;em&gt;empowers&lt;/em&gt; the reader to use ML effectively in real-world problems. In many cases, the books are too theoretical, but I am equally concerned that the applied books tend to be &#34;cookbooks,&#34; too &#34;recipe-oriented,&#34; treating the subject in a Step 1, Step 2, Step 3 manner. Key concepts, e.g. overfitting, are mentioned just in passing, no connection made to specific ML algorithms. Examples are of the &#34;sanitized&#34; variety.&lt;/p&gt; &#xA;&lt;p&gt;The result is that while the reader may know the software well, she is not positioned to &lt;em&gt;use&lt;/em&gt; ML well in real applications. So:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;There was a need for a book that &lt;em&gt;uses&lt;/em&gt; the R language but is not &lt;em&gt;about&lt;/em&gt; R. This is a book on ML that happens to &lt;em&gt;use R for examples&lt;/em&gt;, not a book about &lt;em&gt;the use of R in ML&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There was a need for an ML book that recognizes that &lt;em&gt;ML is an art, not a science.&lt;/em&gt; (Hence the title of this book.) No flow charts, recipes or the like here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;One does not have to be a math whiz or know advanced math in order to use ML effectively, but &lt;em&gt;one does need to understand the concepts well --- the Why? and How? of ML methods.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All three of these bullets go back to the &#34;anti-cookbook&#34; theme. My goal is then this:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We will &lt;em&gt;empower&lt;/em&gt; the reader with a strong &lt;em&gt;practical&lt;/em&gt;, real-world knowledge of ML methods --- their strengths and weaknesses, what makes them work and fail, what to watch out for. We will do so without much formal math, and will definitely take a hands-on approach, using prominent software packages on real datasets. But we will do so in a savvy manner. We will be &#34;informed consumers.&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Recurring special sections&lt;/h2&gt; &#xA;&lt;p&gt;There are special recurring sections and chapters throughout book:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bias vs. Variance&lt;/strong&gt; sections explain in concrete terms --- no superstition! --- how these two central notions play out for each specific ML method.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pitfalls&lt;/strong&gt; sections warn the reader of potential problems, and show how to avoid them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Diagnostic&lt;/strong&gt; sections show how to find areas for improvement of one&#39;s ML model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clearing the Confusion&lt;/strong&gt; sections dispel various misunderstandings regarding ML that one often sees on the Web, in books and so on, such as dealing with unbalanced data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The Verdict&lt;/strong&gt; sections summarize the pros and cons of the methods under discussion.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;p&gt;The R code for all the examples is &lt;a href=&#34;https://raw.githubusercontent.com/matloff/ArtOfML/main/Code/AllCodeOrdered.R&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Errata&lt;/h3&gt; &#xA;&lt;p&gt;Correction of errors, and various clarifications, are &lt;a href=&#34;https://raw.githubusercontent.com/matloff/ArtOfML/main/Errata/Errata.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;NSP book site&lt;/h3&gt; &#xA;&lt;p&gt;The NSP Web page for this book is &lt;a href=&#34;https://nostarch.com/art-machine-learning&#34;&gt;here&lt;/a&gt;. It contains brief and detailed versions of the Table of Contents, as well as a sample chapter.&lt;/p&gt;</summary>
  </entry>
</feed>