<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-24T01:38:00Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ryantibs/conformal</title>
    <updated>2022-09-24T01:38:00Z</updated>
    <id>tag:github.com,2022-09-24:/ryantibs/conformal</id>
    <link href="https://github.com/ryantibs/conformal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for conformal inference in regression&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Conformal Inference R Project&lt;/h1&gt; &#xA;&lt;h2&gt;Maintained by Ryan Tibshirani&lt;/h2&gt; &#xA;&lt;h3&gt;Based on work by Rina Barber, Emmanuel Candes, Max G&#39;Sell, Jing Lei, Aaditya Ramdas, Alessandro Rinaldo, Ryan Tibshirani, Larry Wasserman&lt;/h3&gt; &#xA;&lt;p&gt;This repository contains R software tools for conformal inference. The current emphasis is on conformal prediction in regression. We may eventually add tools for density estimation and classification.&lt;/p&gt; &#xA;&lt;p&gt;The folder &#34;conformalInference&#34; can be installed as an R package, providing access to the software tools, and the file &#34;conformalInference.pdf&#34; contains documentation.&lt;/p&gt; &#xA;&lt;p&gt;The folder &#34;lei2018&#34; contains R code to reproduce all examples in the paper &lt;a href=&#34;http://www.stat.cmu.edu/~ryantibs/papers/conformal.pdf&#34;&gt;Distribution-Free Predictive Inference for Regression&lt;/a&gt; by Lei, G&#39;Sell, Rinaldo, Tibshirani, Wasserman (2018). The folder &#34;tibshirani2019&#34; contains R code to reproduce all examples in the paper &lt;a href=&#34;http://www.stat.cmu.edu/~ryantibs/papers/weightedcp.pdf&#34;&gt;Conformal Prediction Under Covariate Shift&lt;/a&gt; by Tibshirani, Barber, Candes, Ramdas (2019). This code all relies on the &#34;conformalInference&#34; R package.&lt;/p&gt; &#xA;&lt;p&gt;Relevant work (in reverse chronological order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.stat.cmu.edu/~ryantibs/papers/weightedcp.pdf&#34;&gt;Conformal Prediction Under Covariate Shift&lt;/a&gt; by Ryan Tibshirani, Rina Barber, Emmanuel Candes, Aaditya Ramdas, Advances in Neural Information Processing Systems, 2019.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.stat.cmu.edu/~ryantibs/papers/conformal.pdf&#34;&gt;Distribution-Free Predictive Inference for Regression&lt;/a&gt; by Jing Lei, Max G&#39;Sell, Alessandro Rinaldo, Ryan Tibshirani, and Larry Wasserman, Journal of the American Statistical Association, 113(523), 1094-1111, 2018.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/rssb.12021&#34;&gt;Distribution-Free Prediction Bands for Non-parametric Regression&lt;/a&gt; by Jing Lei and Larry Wasserman, Journal of the Royal Statistical Society: Series B, 76(1), 71-96, 2014.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.springer.com/article/10.1007%2Fs10472-013-9366-6&#34;&gt;A Conformal Prediction Approach to Explore Functional Data&lt;/a&gt; by Jing Lei, Alessandro Rinaldo, and Larry Wasserman, Annals of Mathematics and Artificial Intelligence, 74(4), 29-43, 2013.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amstat.tandfonline.com/doi/abs/10.1080/01621459.2012.751873&#34;&gt;Distribution Free Prediction Sets&lt;/a&gt; by Jing Lei, James Robins, and Larry Wasserman, Journal of the American Statistical Association, 108(501), 278-287, 2013.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.alrw.net/articles/01.pdf&#34;&gt;On-line Predictive Linear Regression&lt;/a&gt; by Vladimir Vovk, Ilia Nouretdinov, and Alex Gammerman, Annals of Statistics, 37(3), 1566-1590, 2009.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.alrw.net&#34;&gt;Algorithmic Learning in a Random World&lt;/a&gt; by Vladimir Vovk, Alex Gammerman, and Glenn Shafer, Springer, 2005.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install the R package&lt;/h3&gt; &#xA;&lt;p&gt;To install the conformalInference R package directly from github, run the following in R:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;library(devtools)&#xA;install_github(repo=&#34;ryantibs/conformal&#34;, subdir=&#34;conformalInference&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>huizezhang-sherry/cubble</title>
    <updated>2022-09-24T01:38:00Z</updated>
    <id>tag:github.com,2022-09-24:/huizezhang-sherry/cubble</id>
    <link href="https://github.com/huizezhang-sherry/cubble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tidy structure for spatio-temporal data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cubble&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/huizezhang-sherry/cubble/actions&#34;&gt;&lt;img src=&#34;https://github.com/huizezhang-sherry/cubble/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Cubble provides a new data structure to manipulate spatio-temporal vector data. It arranges variables into two forms: nested form and long form. The nested form shows each site in a row and time invariant variables as columns. The time varying variables are nested into a &lt;code&gt;ts&lt;/code&gt; column. In the long form, each row is cross-identified by the site and time, time varying variables are presented, and time invariant variables are stored as an attribute. The two forms can be switched back and forth for manipulation on the spatial and temporal dimension of the data.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the released version of cubble from &lt;a href=&#34;https://CRAN.R-project.org&#34;&gt;CRAN&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;cubble&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the development version from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;huizezhang-sherry/cubble&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;as_cubble()&lt;/code&gt; creates a cubble in the nested form by supplying the spatial identifier, &lt;code&gt;key&lt;/code&gt;, temporal identifier, &lt;code&gt;index&lt;/code&gt;, and the spatial coordinates that defines the site, &lt;code&gt;coords&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(cubble)&#xA;library(dplyr)&#xA;#&amp;gt; Warning: package &#39;dplyr&#39; was built under R version 4.1.2&#xA;nested &amp;lt;- climate_flat |&amp;gt; &#xA;  as_cubble(key = id, index = date, coords = c(long, lat))&#xA;nested&#xA;#&amp;gt; # cubble:   id [5]: nested form&#xA;#&amp;gt; # bbox:     [115.97, -32.94, 133.55, -12.42]&#xA;#&amp;gt; # temporal: date [date], prcp [dbl], tmax [dbl], tmin [dbl]&#xA;#&amp;gt;   id            lat  long  elev name           wmo_id ts                &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;            &#xA;#&amp;gt; 1 ASN00009021 -31.9  116.  15.4 perth airport   94610 &amp;lt;tibble [366 × 4]&amp;gt;&#xA;#&amp;gt; 2 ASN00010311 -31.9  117. 179   york            94623 &amp;lt;tibble [366 × 4]&amp;gt;&#xA;#&amp;gt; 3 ASN00010614 -32.9  117. 338   narrogin        94627 &amp;lt;tibble [366 × 4]&amp;gt;&#xA;#&amp;gt; 4 ASN00014015 -12.4  131.  30.4 darwin airport  94120 &amp;lt;tibble [366 × 4]&amp;gt;&#xA;#&amp;gt; 5 ASN00015131 -17.6  134. 220   elliott         94236 &amp;lt;tibble [366 × 4]&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;face_temporal()&lt;/code&gt; switches a cubble from the nested form to the long form. The long form cubble is for operations whose output is cross-identified by &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt;, for example, filtering January records:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;long &amp;lt;- nested |&amp;gt; &#xA;  face_temporal() |&amp;gt; &#xA;  filter(lubridate::month(date) == 1)&#xA;long&#xA;#&amp;gt; # cubble:  date, id [5]: long form&#xA;#&amp;gt; # bbox:    [115.97, -32.94, 133.55, -12.42]&#xA;#&amp;gt; # spatial: lat [dbl], long [dbl], elev [dbl], name [chr], wmo_id [dbl]&#xA;#&amp;gt;    id          date        prcp  tmax  tmin&#xA;#&amp;gt;    &amp;lt;chr&amp;gt;       &amp;lt;date&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt;  1 ASN00009021 2020-01-01     0  31.9  15.3&#xA;#&amp;gt;  2 ASN00009021 2020-01-02     0  24.9  16.4&#xA;#&amp;gt;  3 ASN00009021 2020-01-03     6  23.2  13  &#xA;#&amp;gt;  4 ASN00009021 2020-01-04     0  28.4  12.4&#xA;#&amp;gt;  5 ASN00009021 2020-01-05     0  35.3  11.6&#xA;#&amp;gt;  6 ASN00009021 2020-01-06     0  34.8  13.1&#xA;#&amp;gt;  7 ASN00009021 2020-01-07     0  32.8  15.1&#xA;#&amp;gt;  8 ASN00009021 2020-01-08     0  30.4  17.4&#xA;#&amp;gt;  9 ASN00009021 2020-01-09     0  28.7  17.3&#xA;#&amp;gt; 10 ASN00009021 2020-01-10     0  32.6  15.8&#xA;#&amp;gt; # … with 145 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;face_spatial()&lt;/code&gt; switches the long cubble back to the nested cubble. The nested form is for operations whose output is only identified by the &lt;code&gt;key&lt;/code&gt;, for example, mutating the average maximum temperature in January:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;long |&amp;gt; &#xA;  face_spatial() |&amp;gt; &#xA;  mutate(avg_max = mean(ts$tmax, na.rm = TRUE))&#xA;#&amp;gt; # cubble:   id [5]: nested form&#xA;#&amp;gt; # bbox:     [115.97, -32.94, 133.55, -12.42]&#xA;#&amp;gt; # temporal: date [date], prcp [dbl], tmax [dbl], tmin [dbl]&#xA;#&amp;gt;   id            lat  long  elev name           wmo_id ts                avg_max&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;           &amp;lt;dbl&amp;gt; &amp;lt;list&amp;gt;              &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 ASN00009021 -31.9  116.  15.4 perth airport   94610 &amp;lt;tibble [31 × 4]&amp;gt;    31.6&#xA;#&amp;gt; 2 ASN00010311 -31.9  117. 179   york            94623 &amp;lt;tibble [31 × 4]&amp;gt;    34.6&#xA;#&amp;gt; 3 ASN00010614 -32.9  117. 338   narrogin        94627 &amp;lt;tibble [31 × 4]&amp;gt;    31.4&#xA;#&amp;gt; 4 ASN00014015 -12.4  131.  30.4 darwin airport  94120 &amp;lt;tibble [31 × 4]&amp;gt;    32.8&#xA;#&amp;gt; 5 ASN00015131 -17.6  134. 220   elliott         94236 &amp;lt;tibble [31 × 4]&amp;gt;    38.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naming&lt;/strong&gt;: Cubble stands for “cubical tibble” and you can think of multivariate spatio-temporal data as a &lt;em&gt;cube&lt;/em&gt; with three axes: variable, location, and time.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ropensci/targets</title>
    <updated>2022-09-24T01:38:00Z</updated>
    <id>tag:github.com,2022-09-24:/ropensci/targets</id>
    <link href="https://github.com/ropensci/targets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Function-oriented Make-like declarative workflows for R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;targets &lt;img src=&#34;https://raw.githubusercontent.com/ropensci/targets/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/software-review/issues/401&#34;&gt;&lt;img src=&#34;https://badges.ropensci.org/401_status.svg?sanitize=true&#34; alt=&#34;ropensci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.21105/joss.02959&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.02959/status.svg?sanitize=true&#34; alt=&#34;JOSS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/200093430&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/200093430.svg?sanitize=true&#34; alt=&#34;zenodo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://wlandau.github.io/targetopia/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/R_Targetopia-member-blue?style=flat&amp;amp;labelColor=gray&#34; alt=&#34;R Targetopia&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=targets&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/targets&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/targets/actions?query=workflow%3Acheck&#34;&gt;&lt;img src=&#34;https://github.com/ropensci/targets/workflows/check/badge.svg?sanitize=true&#34; alt=&#34;check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/ropensci/targets&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ropensci/targets/branch/main/graph/badge.svg?token=3T5DlLwUVl&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ropensci/targets/actions?query=workflow%3Alint&#34;&gt;&lt;img src=&#34;https://github.com/ropensci/targets/workflows/lint/badge.svg?sanitize=true&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;targets&lt;/code&gt; package is a &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;Make&lt;/a&gt;-like pipeline tool for statistics and data science in R. With &lt;code&gt;targets&lt;/code&gt;, you can maintain a reproducible workflow without repeating yourself. &lt;code&gt;targets&lt;/code&gt; skips costly runtime for tasks that are already up to date, orchestrates the necessary computation with implicit parallel computing, and abstracts files as R objects. An up-to-date &lt;code&gt;targets&lt;/code&gt; pipeline is tangible evidence that the output aligns with the code and data, which substantiates trust in the results.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;A pipeline is a computational workflow that does statistics, analytics, or data science. Examples include forecasting customer behavior, simulating a clinical trial, and detecting differential expression from genomics data. A pipeline contains tasks to prepare datasets, run models, and summarize results for a business deliverable or research paper. The methods behind these tasks are user-defined R functions that live in R scripts, ideally in a folder called &lt;code&gt;&#34;R/&#34;&lt;/code&gt; in the project. The tasks themselves are called “targets”, and they run the functions and return R objects. The &lt;code&gt;targets&lt;/code&gt; package orchestrates the targets and stores the output objects to make your pipeline efficient, painless, and reproducible.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Familiarity with the &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R programming language&lt;/a&gt;, covered in &lt;a href=&#34;https://r4ds.had.co.nz/&#34;&gt;R for Data Science&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rstats.wtf/index.html&#34;&gt;Data science workflow management techniques&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r4ds.had.co.nz/functions.html&#34;&gt;How to write functions&lt;/a&gt; to prepare data, analyze data, and summarize results in a data analysis project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Release&lt;/td&gt; &#xA;   &lt;td&gt;CRAN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;targets&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;GitHub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;remotes::install_github(&#34;ropensci/targets&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;rOpenSci&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;targets&#34;, repos = &#34;https://dev.ropensci.org&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Get started in 4 minutes&lt;/h2&gt; &#xA;&lt;p&gt;The 4-minute video at &lt;a href=&#34;https://vimeo.com/700982360&#34;&gt;https://vimeo.com/700982360&lt;/a&gt; demonstrates the example pipeline used in the &lt;a href=&#34;https://books.ropensci.org/targets/walkthrough.html&#34;&gt;walkthrough&lt;/a&gt; and &lt;a href=&#34;https://books.ropensci.org/targets/functions.html&#34;&gt;functions&lt;/a&gt; chapters of the &lt;a href=&#34;https://books.ropensci.org/targets/&#34;&gt;user manual&lt;/a&gt;. Visit &lt;a href=&#34;https://github.com/wlandau/targets-four-minutes&#34;&gt;https://github.com/wlandau/targets-four-minutes&lt;/a&gt; for the code and &lt;a href=&#34;https://rstudio.cloud/project/3946303&#34;&gt;https://rstudio.cloud/project/3946303&lt;/a&gt; to try out the code in a browser (no download or installation required).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vimeo.com/700982360&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ropensci/targets/main/man/figures/video.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To create a pipeline of your own:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://books.ropensci.org/targets/functions.html&#34;&gt;Write R functions&lt;/a&gt; for a pipeline and save them to R scripts (ideally in the &lt;code&gt;&#34;R/&#34;&lt;/code&gt; folder of your project).&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;a href=&#34;https://docs.ropensci.org/targets/reference/use_targets.html&#34;&gt;&lt;code&gt;use_targets()&lt;/code&gt;&lt;/a&gt; to write key files, including the vital &lt;code&gt;_targets.R&lt;/code&gt; file which configures and defines the pipeline.&lt;/li&gt; &#xA; &lt;li&gt;Follow the comments in &lt;code&gt;_targets.R&lt;/code&gt; to fill in the details of your specific pipeline.&lt;/li&gt; &#xA; &lt;li&gt;Check the pipeline with &lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_visnetwork.html&#34;&gt;&lt;code&gt;tar_visnetwork()&lt;/code&gt;&lt;/a&gt;, run it with &lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_make.html&#34;&gt;&lt;code&gt;tar_make()&lt;/code&gt;&lt;/a&gt;, and read output with &lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_read.html&#34;&gt;&lt;code&gt;tar_read()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://docs.ropensci.org/targets/reference/index.html&#34;&gt;More functions&lt;/a&gt; are available.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://books.ropensci.org/targets/&#34;&gt;User manual&lt;/a&gt;: in-depth discussion about how to use &lt;code&gt;targets&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/targets/&#34;&gt;Reference website&lt;/a&gt;: formal documentation of all user-side functions, the statement of need, and multiple design documents of the internal architecture.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://books.ropensci.org/targets-design/&#34;&gt;Developer documentation&lt;/a&gt;: software design documents for developers contributing to the deep internal architecture of &lt;code&gt;targets&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Courses&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlandau/targets-tutorial&#34;&gt;Official half-day interactive tutorial&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recorded talks&lt;/h2&gt; &#xA;&lt;h3&gt;English&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vimeo.com/700982360&#34;&gt;Get started with &lt;code&gt;targets&lt;/code&gt; in 4 minutes (4:08)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/HJI5mQJRGpY&#34;&gt;R/Medicine 2021 (15.33)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GRqKJBaC5g4&amp;amp;list=PLMtxz1fUYA5C0YflXsR8EEAQXfjntlV1H&amp;amp;index=6&#34;&gt;R/Pharma 2020 (9:24)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Qq25BUxpJu4&#34;&gt;LA R Users Meetup, October 2020 (1:14:40)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Gqn7Xn4d5NI&#34;&gt;New York Open Statistical Programming Meetup, December 2020 (1:54:28)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLvgdJdJDL-APJqHy5CXs6m4N7hUVp5rb4&#34;&gt;ds-incubator series, 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/FODSavXGjYg&#34;&gt;Lille R User Group, June 2021 (45:54)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Español&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Vj312AfdpBo&#34;&gt;R-Ladies Barcelona, 2021-05-25 (1:25:12)&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;日本語&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://togotv.dbcls.jp/20220331.html&#34;&gt;Bio&#34;Pack&#34;athon, 2022-03-31 (1:04:10)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlandau/targets-four-minutes&#34;&gt;Four-minute example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlandau/targets-minimal&#34;&gt;Minimal example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlandau/targets-keras&#34;&gt;Machine learning with Keras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlandau/targets-stan&#34;&gt;Validate a minimal Stan model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlandau/rmedicine2021-pipeline&#34;&gt;Using Target Markdown and &lt;code&gt;stantargets&lt;/code&gt; to validate a Bayesian longitudinal model for clinical trial data analysis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wlandau/targets-shiny&#34;&gt;Shiny app that runs a pipeline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sol-eng/targets-deployment-rsc&#34;&gt;Deploy a pipeline to RStudio Connect&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Apps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_watch.html&#34;&gt;&lt;code&gt;tar_watch()&lt;/code&gt;&lt;/a&gt;: a built-in Shiny app to visualize progress while a pipeline is running. Available as a Shiny module via &lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_watch_ui.html&#34;&gt;&lt;code&gt;tar_watch_ui()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_watch_server.html&#34;&gt;&lt;code&gt;tar_watch_server()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wlandau.shinyapps.io/targetsketch&#34;&gt;&lt;code&gt;targetsketch&lt;/code&gt;&lt;/a&gt;: a Shiny app to help sketch pipelines (&lt;a href=&#34;https://wlandau.shinyapps.io/targetsketch&#34;&gt;app&lt;/a&gt;, &lt;a href=&#34;https://github.com/wlandau/targetsketch&#34;&gt;source&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://solutions.rstudio.com/r/workflows/&#34;&gt;https://solutions.rstudio.com/r/workflows/&lt;/a&gt; explains how to deploy a pipeline to RStudio Connect (&lt;a href=&#34;https://github.com/sol-eng/targets-deployment-rsc&#34;&gt;example code&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_github_actions.html&#34;&gt;&lt;code&gt;tar_github_actions()&lt;/code&gt;&lt;/a&gt; sets up a pipeline to run on GitHub Actions. The &lt;a href=&#34;https://github.com/wlandau/targets-minimal&#34;&gt;minimal example&lt;/a&gt; demonstrates this approach.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extending and customizing targets&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wlandau.github.io/targetopia/&#34;&gt;R Targetopia&lt;/a&gt;: a collection of &lt;a href=&#34;https://wlandau.github.io/targetopia/packages.html&#34;&gt;R packages&lt;/a&gt; that extend &lt;code&gt;targets&lt;/code&gt;. &lt;a href=&#34;https://wlandau.github.io/targetopia/packages.html&#34;&gt;These packages&lt;/a&gt; simplify pipeline construction for specific fields of Statistics and data science.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wlandau.github.io/targetopia/contributing.html#target-factories&#34;&gt;Target factories&lt;/a&gt;: a programming technique to write specialized interfaces for custom pipelines. Posts &lt;a href=&#34;https://ropensci.org/blog/2021/02/03/targets/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://wlandau.github.io/targetopia/contributing.html&#34;&gt;here&lt;/a&gt; describe how.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Post to the &lt;a href=&#34;https://github.com/ropensci/targets/discussions&#34;&gt;GitHub discussion forum&lt;/a&gt; to ask questions. To get the best help about a specific issue, create a reproducible example with &lt;a href=&#34;https://docs.ropensci.org/targets/reference/tar_reprex.html&#34;&gt;&lt;code&gt;targets::tar_reprex()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://reprex.tidyverse.org/reference/reprex.html&#34;&gt;&lt;code&gt;reprex::reprex()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;RStudio Community&lt;/a&gt; forum is full of friendly enthusiasts of R and the tidyverse. Use the &lt;a href=&#34;https://community.rstudio.com/tag/targets&#34;&gt;&lt;code&gt;targets&lt;/code&gt; tag&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; broadcasts to the entire open source community. Use the &lt;a href=&#34;https://stackoverflow.com/questions/tagged/targets-r-package&#34;&gt;&lt;code&gt;targets-r-package&lt;/code&gt; tag&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that this package is released with a &lt;a href=&#34;https://ropensci.org/code-of-conduct/&#34;&gt;Contributor Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;citation(&#34;targets&#34;)&#xA;&#xA;To cite targets in publications use:&#xA;&#xA;  Landau, W. M., (2021). The targets R package: a dynamic Make-like&#xA;  function-oriented pipeline toolkit for reproducibility and&#xA;  high-performance computing. Journal of Open Source Software, 6(57),&#xA;  2959, https://doi.org/10.21105/joss.02959&#xA;&#xA;A BibTeX entry for LaTeX users is&#xA;&#xA;  @Article{,&#xA;    title = {The targets R package: a dynamic Make-like function-oriented pipeline toolkit for reproducibility and high-performance computing},&#xA;    author = {William Michael Landau},&#xA;    journal = {Journal of Open Source Software},&#xA;    year = {2021},&#xA;    volume = {6},&#xA;    number = {57},&#xA;    pages = {2959},&#xA;    url = {https://doi.org/10.21105/joss.02959},&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>