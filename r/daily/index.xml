<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-30T01:52:23Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>swirldev/swirl</title>
    <updated>2022-06-30T01:52:23Z</updated>
    <id>tag:github.com,2022-06-30:/swirldev/swirl</id>
    <link href="https://github.com/swirldev/swirl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåÄ Learn R, in R.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swirl&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/swirldev/swirl&#34;&gt;&lt;img src=&#34;https://travis-ci.org/swirldev/swirl.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=swirl&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/swirl?color=3399ff&#34; alt=&#34;CRAN version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://cran-logs.rstudio.com/&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/swirl?color=3399ff&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://swirlstats.com&#34;&gt;http://swirlstats.com&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;swirl is a platform for learning (and teaching) statistics and R simultaneously and interactively. It presents a choice of course lessons and interactively tutors a student through them. A student may be asked to watch a video, to answer a multiple-choice or fill-in-the-blanks question, or to enter a command in the R console precisely as if he or she were using R in practice. Emphasis is on the last, interacting with the R console. User responses are tested for correctness and hints are given if appropriate. Progress is automatically saved so that a user may quit at any time and later resume without losing work.&lt;/p&gt; &#xA;&lt;p&gt;swirl leans heavily on exercising a student&#39;s use of the R console. A callback mechanism, suggested and first demonstrated for the purpose by Hadley Wickham, is used to capture student input and to provide immediate feedback relevant to the course material at hand.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swirldev/swirlify&#34;&gt;swirlify&lt;/a&gt; is a separate R package that provides a comprehensive toolbox for swirl instructors. Content is authored in &lt;a href=&#34;http://en.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt; using the handy tools described on the &lt;a href=&#34;http://swirlstats.com/instructors.html&#34;&gt;instructors page&lt;/a&gt; of our website.&lt;/p&gt; &#xA;&lt;p&gt;The program is initiated with &lt;code&gt;swirl()&lt;/code&gt;. Functions which control swirl&#39;s behavior include &lt;code&gt;bye()&lt;/code&gt; to quit, &lt;code&gt;skip()&lt;/code&gt; to skip a question, &lt;code&gt;main()&lt;/code&gt; to return to the main menu, &lt;code&gt;play()&lt;/code&gt; to allow experimentation in the R console without interference from swirl, &lt;code&gt;nxt()&lt;/code&gt; to resume interacting with swirl, and &lt;code&gt;info()&lt;/code&gt; to display a help menu.&lt;/p&gt; &#xA;&lt;h2&gt;Installing swirl (from CRAN)&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install and run swirl is by typing the following from the R console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#34;swirl&#34;)&#xA;library(swirl)&#xA;swirl()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As we continue adding new features and content, we will make new versions available on CRAN as appropriate (every 1-2 months, most likely).&lt;/p&gt; &#xA;&lt;h2&gt;Installing the latest development version (from GitHub)&lt;/h2&gt; &#xA;&lt;p&gt;To access the most recent features and content, you can install and run the development version of swirl using the &lt;a href=&#34;https://github.com/hadley/devtools&#34;&gt;devtools&lt;/a&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;swirldev/swirl&#34;, ref = &#34;dev&#34;)&#xA;library(swirl)&#xA;swirl()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing to swirl&#39;s development&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to get involved, please fork this repository and submit a pull request with your proposed changes. We&#39;re happy to chat if you have any questions about the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Using swirl in the classroom&lt;/h2&gt; &#xA;&lt;p&gt;Instructors around the world are using swirl in their classrooms. We think this is awesome. If you&#39;re an instructor, please feel free to do the same -- free of charge. While your students may be paying to take your course or attend your institution, we simply ask that you don&#39;t charge people &lt;em&gt;directly&lt;/em&gt; for the use of our software or instructional content.&lt;/p&gt; &#xA;&lt;p&gt;If you are not sure about a particular use case, don&#39;t hesitate to send us an email at &lt;a href=&#34;mailto:info@swirlstats.com&#34;&gt;info@swirlstats.com&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pharmaverse/admiral</title>
    <updated>2022-06-30T01:52:23Z</updated>
    <id>tag:github.com,2022-06-30:/pharmaverse/admiral</id>
    <link href="https://github.com/pharmaverse/admiral" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ADaM in R Asset Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;admiral &lt;img src=&#34;https://raw.githubusercontent.com/pharmaverse/admiral/main/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;200&#34; style=&#34;margin-left:50px;&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pharmaverse.org&#34;&gt;&lt;img src=&#34;http://pharmaverse.org/shields/admiral.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=admiral&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/admiral&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pharmaverse/admiral/actions/workflows/R-CMD-check.yml&#34;&gt;&lt;img src=&#34;https://github.com/pharmaverse/admiral/actions/workflows/R-CMD-check.yml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pharmaverse/admiral/actions/workflows/style.yml&#34;&gt;&lt;img src=&#34;https://github.com/pharmaverse/admiral/actions/workflows/style.yml/badge.svg?sanitize=true&#34; alt=&#34;Style&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pharmaverse/admiral/actions/workflows/spellcheck.yml&#34;&gt;&lt;img src=&#34;https://github.com/pharmaverse/admiral/actions/workflows/spellcheck.yml/badge.svg?sanitize=true&#34; alt=&#34;Spelling&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pharmaverse/admiral/actions/workflows/man-pages.yml&#34;&gt;&lt;img src=&#34;https://github.com/pharmaverse/admiral/actions/workflows/man-pages.yml/badge.svg?sanitize=true&#34; alt=&#34;Man Pages üìÉ&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pharmaverse/admiral/actions/workflows/code-coverage.yml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pharmaverse/admiral/badges/devel/test-coverage.svg?sanitize=true&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;ADaM in R Asset Library&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;To provide an open source, modularized toolbox that enables the pharmaceutical programming community to develop ADaM datasets in R.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The package is available from CRAN and can be installed by running &lt;code&gt;install.packages(&#34;admiral&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install the latest development version of the package directly from GitHub use the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&#34;remotes&#34;, quietly = TRUE)) {&#xA;  install.packages(&#34;remotes&#34;)&#xA;}&#xA;&#xA;remotes::install_github(&#34;pharmaverse/admiral.test&#34;, ref = &#34;devel&#34;) # This is a required dependency of {admiral}&#xA;remotes::install_github(&#34;pharmaverse/admiral&#34;, ref = &#34;devel&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Main Goal&lt;/h2&gt; &#xA;&lt;p&gt;Provide users with an open source, modularized toolbox with which to create ADaM datasets in R. &lt;em&gt;As opposed to a ‚Äúrun 1 line and an ADaM appears‚Äù black-box solution or an attempt to automate ADaM.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;One of the key aspects of &lt;code&gt;{admiral}&lt;/code&gt; is its development by the users for the users. It gives an entry point for all to collaborate, co-create and contribute to a harmonised approach of developing ADaMs in R across the pharmaceutical industry.&lt;/p&gt; &#xA;&lt;h2&gt;Scope&lt;/h2&gt; &#xA;&lt;p&gt;To set expectations: It is not our target that &lt;code&gt;{admiral}&lt;/code&gt; will ever provide all possible solutions for all ADaM datasets outside of study specific needs. It depends on the user&#39;s collaboration and contribution to help grow over time to an asset library that is robust, easy to use and has an across-industry focus. We do not see a coverage of 100% of all ADaM derivations as ever achievable---ADaM is endless.&lt;/p&gt; &#xA;&lt;p&gt;We will provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A toolbox of re-usable functions and utilities to create ADaM datasets using R scripts in a modular manner (an &#34;opinionated&#34; design strategy)&lt;/li&gt; &#xA; &lt;li&gt;Pharmaceutical communities and companies are encouraged to contribute to &lt;code&gt;{admiral}&lt;/code&gt; following the provided programming strategy and modular approach&lt;/li&gt; &#xA; &lt;li&gt;Functions that are comprehensively documented and tested, including example calls---these are all listed in the &lt;a href=&#34;https://pharmaverse.github.io/admiral/reference/index.html&#34;&gt;Reference section&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vignettes on how to create ADSL, BDS and OCCDS datasets, including example scripts&lt;/li&gt; &#xA; &lt;li&gt;Vignettes for ADaM dataset specific functionality (i.e. dictionary coding, date imputation, SMQs ...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Types of Packages&lt;/h2&gt; &#xA;&lt;p&gt;There will be 3 foreseeable types of &lt;code&gt;{admiral}&lt;/code&gt; packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Core package---one package containing all core functions required to create ADaMs, usable by any company (i.e. general derivations, utility functions and checks for ADSL, OCCDS and BDS)&lt;/li&gt; &#xA; &lt;li&gt;TA (Therapeutic Area) package extensions---one package per TA with functions that are specific to algorithms and requirements for that particular TA (e.g. &lt;code&gt;{admiralonco}&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Company package extensions---specific needs and plug-ins for the company, such as access to metadata (e.g. &lt;code&gt;{admiralroche}&lt;/code&gt; or &lt;code&gt;{admiralgsk}&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Admiral Manifesto&lt;/h2&gt; &#xA;&lt;p&gt;For &lt;code&gt;{admiral}&lt;/code&gt; and all extension packages, we prioritise providing our users with a &lt;strong&gt;simple to adopt&lt;/strong&gt; toolkit that enables them to produce &lt;strong&gt;readable&lt;/strong&gt; and &lt;strong&gt;easily constructible&lt;/strong&gt; ADaM programs. The following explains our philosophy, which we try to adhere to across the &lt;code&gt;{admiral}&lt;/code&gt; family of packages. There isn‚Äôt always a clear single, straightforward rule, but there are guiding principles we adhere to for &lt;code&gt;{admiral}&lt;/code&gt;. This manifesto helps show the considerations of our developers when making decisions.&lt;/p&gt; &#xA;&lt;p&gt;We have four design principles to achieve the main goal:&lt;/p&gt; &#xA;&lt;h3&gt;Usability&lt;/h3&gt; &#xA;&lt;p&gt;All &lt;code&gt;{admiral}&lt;/code&gt; functions should be easy to use.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation is an absolute priority. Each function reference page should cover the purpose, descriptions of each argument with permitted values, the expected input and output, with clear real-life examples---so that users don‚Äôt need to dig through code to find answers.&lt;/li&gt; &#xA; &lt;li&gt;Vignettes that complement the functional documentation to help users see how best the functions can be applied to achieve ADaM requirements.&lt;/li&gt; &#xA; &lt;li&gt;Functions should be written and structured in a way that users are able to read, re-use or extend them for study specific purposes if needed (see Readability below).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simplicity&lt;/h3&gt; &#xA;&lt;p&gt;All &lt;code&gt;{admiral}&lt;/code&gt; functions have a clear purpose.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We try not to ever design single functions that could achieve numerous very different derivations. For example if you as a user pick up a function with &amp;gt;10 different arguments then chances are it is going to be difficult to understand if this function could be applied for your specific need. The intention is that arguments/parameters can influence how the output of a function is calculated, but not change the purpose of the function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We try to combine similar tasks and algorithms into one function where applicable to reduce the amount of repetitive functions with similar algorithms and to group together similar functionality to increase usability (e.g. one study day calculation rather than a function per variable).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We strive to design functions that are not too general and trying to fulfil multiple, complex purposes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Functions should not allow expressions as arguments that are used as code snippets in function calls.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We recommend to avoid copy and paste of complex computational algorithms or repetitive code like checks and advise to wrap them into a function. However we would also like to avoid multi-layered functional nesting, so this needs to be considered carefully to keep the nesting of 3-4 functions an exception rather than the rule.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Findability&lt;/h3&gt; &#xA;&lt;p&gt;All &lt;code&gt;{admiral}&lt;/code&gt; functions are easily findable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In a growing codebase, across a family of packages, we make every effort to make our functions easily findable.&lt;/li&gt; &#xA; &lt;li&gt;We use consistent naming conventions across all our functions, and provide vignettes and ADaM templates that help users to get started and build familiarity. Each &lt;code&gt;{admiral}&lt;/code&gt; family package website is searchable.&lt;/li&gt; &#xA; &lt;li&gt;We avoid repetitive functions that will do similar tasks (as explained above with study day example).&lt;/li&gt; &#xA; &lt;li&gt;Each package extension is kept focused on the specific scope, e.g. features that are relevant across multiple extension packages will be moved to the core &lt;code&gt;{admiral}&lt;/code&gt; package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Readability&lt;/h3&gt; &#xA;&lt;p&gt;All &lt;code&gt;{admiral}&lt;/code&gt; functions follow the &lt;a href=&#34;https://pharmaverse.github.io/admiral/articles/programming_strategy.html&#34;&gt;Programming Strategy&lt;/a&gt; that all our developers and contributors must follow, so that all our code has a high degree of consistency and readability.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We mandate use of tidyverse (e.g. dplyr) over similar functionality existing in base R.&lt;/li&gt; &#xA; &lt;li&gt;For sections of code that perform the actual derivations (e.g. besides assertions or basic utilities), we try to limit nesting of too many dependencies or functions.&lt;/li&gt; &#xA; &lt;li&gt;Modularity is a focus---we don‚Äôt try to achieve too many steps in one.&lt;/li&gt; &#xA; &lt;li&gt;All code has to be well commented.&lt;/li&gt; &#xA; &lt;li&gt;We recognise that a user or a Health Authority reviewer may have the wish to delve into the codebase (especially given this open source setting), or users may need to extend/adapt the code for their study specific needs. We therefore want any module to be understandable to all, not only the &lt;code&gt;{admiral}&lt;/code&gt; developers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References and Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please go to &lt;a href=&#34;https://pharmaverse.github.io/admiral/articles/admiral.html&#34;&gt;Get Started&lt;/a&gt; section to start using &lt;code&gt;{admiral}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://pharmaverse.github.io/admiral/articles/programming_strategy.html&#34;&gt;Programming Strategy&lt;/a&gt; to understand how functions are created&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://pharmaverse.github.io/admiral/articles/faq.html&#34;&gt;FAQ&lt;/a&gt; for the most frequent questions&lt;/li&gt; &#xA; &lt;li&gt;Please see the &lt;a href=&#34;https://pharmaverse.github.io/admiral/articles/contribution_model.html&#34;&gt;Contribution Model&lt;/a&gt; for how to get involved with making contributions&lt;/li&gt; &#xA; &lt;li&gt;Please see &lt;a href=&#34;https://pharmaverse.github.io/admiral/articles/faq.html#why-do-we-use-a-certain-r-version-and-package-versions-for-development&#34;&gt;FAQ: R and Package Versions&lt;/a&gt; for why we develop with certain R and package versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Conference Presentations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N7Bw8c3D5fU&#34;&gt;R/Pharma 2021 talk&lt;/a&gt; (recording)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pharmaverse/pharmaverse.workshop.phuseUS2022&#34;&gt;PHUSE US Connect 2022 pharmaverse workshop&lt;/a&gt; (slides and materials---including &lt;code&gt;{admiral}&lt;/code&gt; workshop slides from PHUSE EU Connect 2021)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;We use the following for support and communications between user and developer community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.slack.com/client/T028PB489D3/C02M8KN8269&#34;&gt;Slack&lt;/a&gt;---for informal discussions, Q&amp;amp;A and building our user community. If you don&#39;t have access, use this &lt;a href=&#34;https://join.slack.com/t/pharmaverse/shared_invite/zt-yv5atkr4-Np2ytJ6W_QKz_4Olo7Jo9A&#34;&gt;link&lt;/a&gt; to join the pharmaverse Slack workspace&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pharmaverse/admiral/issues&#34;&gt;GitHub Issues&lt;/a&gt;---for direct feedback, enhancement requests or raising bugs&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dgkf/ggpackets</title>
    <updated>2022-06-30T01:52:23Z</updated>
    <id>tag:github.com,2022-06-30:/dgkf/ggpackets</id>
    <link href="https://github.com/dgkf/ggpackets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cleaner composition of ggplot layers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ggpackets &lt;img src=&#34;https://raw.githubusercontent.com/dgkf/ggpackets/master/man/figures/ggpackets-hex-small.png&#34; align=&#34;right&#34; width=&#34;134px&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=ggpackets&#34;&gt;&lt;img src=&#34;https://img.shields.io/cran/v/ggpackets.svg?sanitize=true&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dgkf/ggpackets/actions?query=workflow%3AR-CMD-check&#34;&gt;&lt;img src=&#34;https://github.com/dgkf/ggpackets/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R CMD check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/dgkf/ggpackets&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/dgkf/ggpackets/master.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the &lt;strong&gt;&lt;a href=&#34;https://dgkf.github.io/ggpackets/&#34;&gt;ggpackets project page&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Easily build components of ggplots without sacrificing the ease of ggplot‚Äôs layer parameters and construction syntax.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ggpackets&lt;/code&gt; is not yet available on CRAN. Until it is, you can install the most recent development version using the short script below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devtools::install_github(&#39;dgkf/ggpackets&#39;, build_vignettes = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;There are plenty of ways to help contribute:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;File issues!&lt;/strong&gt;&lt;br&gt; Found a bug? Think the syntax looks ugly? Don‚Äôt like the name? Tell me! &lt;a href=&#34;https://github.com/dgkf/ggpackets/issues&#34;&gt;Issues&lt;/a&gt; are the best way to start the conversation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Write documentation!&lt;/strong&gt;&lt;br&gt; More resources always helps. Found a function unintuitive? Example code and improved function descriptors would be helpful. If you use the package and would feel comfortable writing about a topic not yet covered in a vignette, feel free to contribute a new vignette for it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Write Unit Tests!&lt;/strong&gt;&lt;br&gt; There‚Äôs some pretty sophisticated manipulations going on under the hood to make everything as clean as possible, because of that it‚Äôs important to make sure everything stays working the way we expect it to. Unit test contributions always welcome!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Contribute Code!&lt;/strong&gt;&lt;br&gt; Last but not least, code contributors are welcome. Reach out and get in touch if you‚Äôre passionate about the goal of the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Define common ggplot layer sets together into a singled object. Connect all your plots with a single plot component definition and debug one central location. Build beautiful templates and save them once, reuse them easily and without having to abandon the ggplot construction framework.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggpk_box_and_scatter &amp;lt;- ggpacket() +&#xA;  geom_point(position = position_jitter(width = 0.4), alpha = 0.02) + &#xA;  geom_boxplot(outlier.shape = NA, fill = NA, color = &#39;black&#39;) + &#xA;  geom_text(stat = &#39;summary&#39;, vjust = -1, fun.data = function(d) c(&#xA;    y = quantile(d, 0.75, names = F) + 1.5 * IQR(d),&#xA;    label = length(d)&#xA;  )) + &#xA;  theme_linedraw() + &#xA;  scale_color_distiller(palette = &#34;Set1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can use that template repeatedly with a much simpler ggplot call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(diamonds, aes(x = cut, y = price, color = carat)) + &#xA;  ggpk_box_and_scatter() + &#xA;  ggtitle(&#39;Diamond price distribution by cut&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/18220321/98409555-f0298b80-2027-11eb-83f9-b2d208e1c037.png&#34; width=&#34;600px&#34; height=&#34;400px&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h2&gt;Handle custom arguments &amp;amp; parameter propagation&lt;/h2&gt; &#xA;&lt;p&gt;In addition to simply wrapping multiple &lt;code&gt;ggplot2&lt;/code&gt; layers, &lt;code&gt;ggpackets&lt;/code&gt; can streamline a number of complicated plotting scenarios such as passing arguments to sets of layers, setting default argument values with scoped overrides, routing aesthetic mappings to be reused within specific layers for other aesthetics and scoping data usage over a set of layers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggpk_labelled_heatmap &amp;lt;- function(...) {&#xA;  ggpacket(...) %+%&#xA;    geom_tile(.id = &#39;tile&#39;, color = NA, ...) %+% &#xA;    geom_text(.id = c(&#34;text&#34;, &#34;text1&#34;), color = &#34;black&#34;, vjust = -0.3, &#xA;      fontface = &#34;bold&#34;, ...) %+%&#xA;    geom_text(.id = c(&#34;text&#34;, &#34;text2&#34;), &#xA;      aes(label = sprintf(&#34;(%.1f)&#34;, ..fill..)), &#xA;      color = &#34;black&#34;, vjust = 1.1, ...) %+%&#xA;    theme_void()&#xA;} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this function we make use of a number of these specialized behaviors.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;.id&lt;/code&gt; parameters are set to tag specific layers with an identifier, which can be used to prefix arguments to route them to a subset of the &lt;code&gt;ggpacket&lt;/code&gt; layers. Multiple IDs can be used, and arguments will filter down into that layer if they match any of the provided IDs.&lt;/li&gt; &#xA; &lt;li&gt;Ellipsis are first passed to &lt;code&gt;ggpacket(...)&lt;/code&gt;, which will pass them on as default values to all &lt;code&gt;ggpacket&lt;/code&gt; layers.&lt;/li&gt; &#xA; &lt;li&gt;Ellipsis are also passed at the tail end of each layer call, allowing arguments to mask default values. The placement of the ellipsis determines whether arguments will override or be overridden by the existing parameters. After expanding the ellipsis, the last instance of each argument is used to build the call.&lt;/li&gt; &#xA; &lt;li&gt;Aesthetics are rerouted using the specialized &lt;code&gt;..&amp;lt;aesthetic&amp;gt;..&lt;/code&gt; syntax.&lt;/li&gt; &#xA; &lt;li&gt;We use &lt;code&gt;%+%&lt;/code&gt; instead of the commonly-used &lt;code&gt;+&lt;/code&gt; to add layers together, which allows &lt;code&gt;ggpackets&lt;/code&gt; to accept non-standard arguments before ggplot sends us warnings about them.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- end list --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(as.data.frame(OrchardSprays)) + &#xA;  aes(x = rowpos, y = colpos, label = treatment, fill = decrease) + &#xA;  ggpk_labelled_heatmap(text.color = &#34;white&#34;, text2.alpha = 0.5) + &#xA;  ggtitle(&#39;Honeybee population decline in repellent trial grid&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/18220321/98409633-12230e00-2028-11eb-87c9-163156f03514.png&#34; width=&#34;600px&#34; height=&#34;400px&#34; style=&#34;display: block; margin: auto;&#34;&gt;</summary>
  </entry>
</feed>