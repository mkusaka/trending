<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:40:50Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bayesianops/stan-survival-model-workshop</title>
    <updated>2023-10-22T01:40:50Z</updated>
    <id>tag:github.com,2023-10-22:/bayesianops/stan-survival-model-workshop</id>
    <link href="https://github.com/bayesianops/stan-survival-model-workshop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building a Survival Model in Stan.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Building a Survival Model in Stan&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the materials from a 2-hour workshop taught on October 16, 2023 as part of &lt;a href=&#34;https://rinpharma.com/workshop/2023conference/&#34;&gt;R/Pharma 2023&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Slides: &lt;a href=&#34;https://raw.githubusercontent.com/bayesianops/stan-survival-model-workshop/main/Building-a-Survival-Model-in-Stan.pdf&#34;&gt;Building-a-Survival-Model-in-Stan.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;R script to generate data and run models: &lt;a href=&#34;https://raw.githubusercontent.com/bayesianops/stan-survival-model-workshop/main/script.R&#34;&gt;script.R&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are 4 examples, each in its own Stan program (&lt;code&gt;survival_1.stan&lt;/code&gt;, &lt;code&gt;survival_2.stan&lt;/code&gt;, &lt;code&gt;survival_3.stan&lt;/code&gt;, &lt;code&gt;survival_4.stan&lt;/code&gt;). These programs are meant for you to complete as part of the workshop. The full, working programs are in the &lt;code&gt;solution/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;In this hands-on workshop, we will be building a survival model from scratch in Stan. We will work through some of the math, how it connects with Stan code, and building from a simple model to one that includes censoring. Although the example will be survival analysis, the workshop will be geared towards exploring hierarchical models, priors, and simulation. For this workshop, it would be helpful to have a working Stan installation (CmdStanR) and some familiarity with Stan programming.&lt;/p&gt; &#xA;&lt;h2&gt;Bio&lt;/h2&gt; &#xA;&lt;p&gt;Daniel Lee is a computational Bayesian statistician who helped create and develop Stan, the open-source statistical modeling language. He has 20 years of experience in numeric computation and software; over 10 years of experience creating and working with Stan; and has spent the last 5 years working on pharma-related models including joint models for estimating oncology treatment efficacy and PK/PD models. Past projects have covered estimating vote share for state and national elections; clinical trials for rare diseases and non-small-cell lung cancer; satellite control software for television and government; retail price sensitivity; data fusion for U.S. Navy applications; sabermetrics for an MLB team; and assessing “clutch” moments in NFL footage. Daniel has led workshops and given talks in applied statistics and Stan at Columbia University, MIT, Penn State, UC Irvine, UCLA, University of Washington, Vanderbilt University, Amazon, Climate Corp, Swiss Statistical Society, IBM AI Systems Day, R/Pharma, StanCon, PAGANZ, ISBA, PROBPROG, and NeurIPS. He holds a B.S. in Mathematics with Computer Science from MIT, and a Master of Advanced Studies in Statistics from Cambridge University.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dankelley/oce</title>
    <updated>2023-10-22T01:40:50Z</updated>
    <id>tag:github.com,2023-10-22:/dankelley/oce</id>
    <link href="https://github.com/dankelley/oce" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R package for oceanographic processing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oce &lt;img src=&#34;https://raw.githubusercontent.com/dankelley/oce/develop/oce-logo-3.png&#34; align=&#34;right&#34; height=&#34;95&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=oce&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/oce&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://joss.theoj.org/papers/10.21105/joss.03594&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.03594/status.svg?sanitize=true&#34; alt=&#34;status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.repostatus.org/&#34;&gt;&lt;img src=&#34;http://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;Project Status: Active – The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/last-commit/dankelley/oce&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/dankelley/oce&#34; alt=&#34;GitHub last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dankelley/oce/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/dankelley/oce/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/last-month/oce&#34; alt=&#34;RStudio CRAN mirror downloads&#34;&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/last-week/oce&#34; alt=&#34;RStudio CRAN mirror downloads&#34;&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/last-day/oce&#34; alt=&#34;RStudio CRAN mirror downloads&#34;&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/oce&#34; alt=&#34;RStudio CRAN mirror downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Why use R for oceanographic analysis?&lt;/h2&gt; &#xA;&lt;p&gt;The R language is popular in many branches of science, and Oceanography is no exception. With its broad statistical support, R is a natural choice for oceanographers in the biological, chemical and geological sub-disciplines. However, some physical oceanographers have remained attached to Matlab, which was widely adopted during the 1990s. Lately, this has been changing, as oceanographers turn to open-source systems such as Python and R. A particular strength of R is its provision of many powerful and well-vetted packages for handling specialized calculations. The oce package is a prime example.&lt;/p&gt; &#xA;&lt;h2&gt;What the oce package provides&lt;/h2&gt; &#xA;&lt;p&gt;The oce package handles a wide variety of tasks that come up in the analysis of Oceanographic data. In addition to the present README file, a brief sketch of the package has been written by the core developers (Kelley Dan E., Clark Richards and Chantelle Layton, 2022. &lt;a href=&#34;https://doi.org/10.21105/joss.03594&#34;&gt;oce: an R package for Oceanographic Analysis&lt;/a&gt;. Journal of Open Source Software, 7(71), 3594), and the primary developer uses the package extensively in his book about the place of R in oceanographic analysis (Kelley, Dan E., 2018. &lt;a href=&#34;https://link.springer.com/book/10.1007/978-1-4939-8844-0&#34;&gt;Oceanographic Analysis with R&lt;/a&gt;. New York. Springer-Verlag ISBN 978-1-4939-8844-0). Details of oce functions are provided within the R help system, and in the package &lt;a href=&#34;https://dankelley.github.io/oce/&#34;&gt;webpage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing oce&lt;/h2&gt; &#xA;&lt;p&gt;Stable versions of oce are available from CRAN, and may be installed from within R, in the same way as other packages. However, the CRAN version is only updated a few times a year (pursuant to policy), so many users install the &lt;code&gt;&#34;develop&#34;&lt;/code&gt; branch instead. This branch may be updated several times per day, as the authors fix bugs or add features that are motivated by day-to-day usage. This is the branch favoured by users who need new features or who would wish to contribute to Oce development.&lt;/p&gt; &#xA;&lt;p&gt;The easy way to install the &lt;code&gt;&#34;develop&#34;&lt;/code&gt; branch is to execute the following commands in R.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;remotes::install_github(&#34;dankelley/oce&#34;, ref=&#34;develop&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and most readers should also install Ocedata, with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;remotes::install_github(&#34;dankelley/ocedata&#34;, ref=&#34;main&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evolution of oce&lt;/h2&gt; &#xA;&lt;p&gt;Oce is emphatically an open-source system, and so the participation of users is very important. This is why Git is used for version control of the Oce source code, and why GitHub is the host for that code. Users are invited to take part in the development process, by suggesting features, by reporting bugs, or just by watching as others do such things. Oceanography is a collaborative discipline, so it makes sense that the evolution of Oce be similarly collaborative.&lt;/p&gt; &#xA;&lt;h2&gt;Examples using built-in datasets&lt;/h2&gt; &#xA;&lt;h3&gt;CTD&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(oce)&#xA;data(ctd)&#xA;plot(ctd, which=c(1,2,3,5), type=&#34;l&#34;, span=150)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dankelley/oce/develop/oce-demo-1.png&#34; alt=&#34;Sample CTD plot.&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Acoustic Doppler profiler&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(oce)&#xA;data(adp)&#xA;plot(adp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dankelley/oce/develop/oce-demo-2.png&#34; alt=&#34;Sample adp plot.&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sealevel and tides&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(oce)&#xA;data(sealevel)&#xA;m &amp;lt;- tidem(sealevel)&#xA;par(mfrow=c(2, 1))&#xA;plot(sealevel, which=1)&#xA;plot(m)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dankelley/oce/develop/oce-demo-3.png&#34; alt=&#34;Sample sealevel plot.&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Echosounder&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(oce)&#xA;data(echosounder)&#xA;plot(echosounder, which=2, drawTimeRange=TRUE, drawBottom=TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dankelley/oce/develop/oce-demo-4.png&#34; alt=&#34;Sample echosounder plot.&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Map&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(oce)&#xA;par(mar=rep(0.5, 4))&#xA;data(endeavour, package=&#34;ocedata&#34;)&#xA;data(coastlineWorld, package=&#34;oce&#34;)&#xA;mapPlot(coastlineWorld, col=&#34;gray&#34;)&#xA;mapPoints(endeavour$longitude, endeavour$latitude, pch=20, col=&#34;red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dankelley/oce/develop/oce-demo-5.png&#34; alt=&#34;Sample map plot.&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Landsat image&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(ocedata)&#xA;library(oce)&#xA;data(landsat)&#xA;plot(landsat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dankelley/oce/develop/oce-demo-6.png&#34; alt=&#34;Sample landsat image plot.&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>