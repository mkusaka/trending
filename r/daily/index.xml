<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-10T01:41:51Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>omnideconv/immunedeconv</title>
    <updated>2023-11-10T01:41:51Z</updated>
    <id>tag:github.com,2023-11-10:/omnideconv/immunedeconv</id>
    <link href="https://github.com/omnideconv/immunedeconv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A unified interface to immune deconvolution methods (CIBERSORT, EPIC, quanTIseq, TIMER, xCell, MCPcounter) and mouse deconvolution methods&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/omnideconv/immunedeconv/master/man/figures/immunedeconv_logo_sm.png&#34; alt=&#34;immunedeconv&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;an R package for unified access to computational methods for estimating immune cell fractions from bulk RNA sequencing data.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/omnideconv/immunedeconv/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/omnideconv/immunedeconv/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omnideconv/immunedeconv/actions/workflows/conda.yml&#34;&gt;&lt;img src=&#34;https://github.com/omnideconv/immunedeconv/actions/workflows/conda.yml/badge.svg?sanitize=true&#34; alt=&#34;test-conda&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://bioconda.github.io/recipes/r-immunedeconv/README.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat&#34; alt=&#34;install with bioconda&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/omnideconv/immunedeconv/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL2-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://omnideconv.github.io/immunedeconv&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-pkgdown-blue.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/omnideconv/immunedeconv?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/omnideconv/immunedeconv/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;Deconvolution of human data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;immunedeconv::deconvolute(gene_expression_matrix, &#34;quantiseq&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deconvolution of mouse data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;immunedeconv::deconvolute_mouse(gene_expression_matrix, &#34;mmcp_counter&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;gene_expression_matrix&lt;/code&gt; is a matrix with genes in rows and samples in columns. The rownames must be &lt;a href=&#34;https://www.genenames.org/&#34;&gt;HGNC&lt;/a&gt; symbols for human data, or &lt;a href=&#34;http://www.informatics.jax.org/mgihome/nomen/&#34;&gt;MGI&lt;/a&gt; gene symbols for mouse data. The colnames must be sample names. For human data, the method can be one of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;quantiseq&#xA;timer&#xA;cibersort&#xA;cibersort_abs&#xA;mcp_counter&#xA;xcell&#xA;epic&#xA;abis&#xA;consensus_tme&#xA;estimate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://bioinformatics.mdanderson.org/public-software/estimate/&#34;&gt;ESTIMATE&lt;/a&gt; algorithm, which computes a score for the tumoral, immune and stromal components and the fraction of tumor purity of a sample, has been implemented.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;immunedeconv::deconvolute_estimate(gene_expression_matrix)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The methods available for the deconvolution of mouse data are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mmcp_counter&#xA;seqimmucc&#xA;dcq&#xA;base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, human-based methods can be used to deconvolute mouse data through the conversion to orthologous gene names&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gene_expression_matrix &amp;lt;- immunedeconv::mouse_genes_to_human(gene_expression_matrix)&#xA;immunedeconv::deconvolute(gene_expression_matrix, &#34;quantiseq&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, certain methods can be used with custom signatures, consisting of either a signature matrix or signature genes for the cell types of interest. Since the information used to deconvolute the bulk is user-provided, these functions can be used for different tissues and organisms. The functions may require different input data formats, related to the requirements of each method. Please refer to their documentation. The available methods are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base:  deconvolute_base_custom()&#xA;cibersort norm/abs:  deconvolute_cibersort_custom()&#xA;epic: deconvolute_epic_custom()&#xA;consensus_tme: deconvolute_consensus_tme_custom()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more detailed usage instructions, see the Documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omnideconv.org/immunedeconv/articles/immunedeconv.html&#34;&gt;Getting started&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omnideconv.org/immunedeconv/articles/detailed_example.html&#34;&gt;Detailed example&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://omnideconv.org/immunedeconv/articles/detailed_example_mouse.html&#34;&gt;Detailed example - mouse&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available methods, Licenses, Citations&lt;/h2&gt; &#xA;&lt;p&gt;Note that, while &lt;em&gt;immunedeconv&lt;/em&gt; itself is free (&lt;a href=&#34;https://github.com/omnideconv/immunedeconv/raw/master/LICENSE&#34;&gt;BSD&lt;/a&gt;), you may need to obtain a license to use the individual methods. See the table below for more information. If you use this package in your work, please cite both our package and the method(s) you are using.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sturm, G., Finotello, F., Petitprez, F., Zhang, J. D., Baumbach, J., Fridman, W. H., ..., List, M., Aneichyk, T. (2019). Comprehensive evaluation of transcriptome-based cell-type quantification methods for immuno-oncology. Bioinformatics, 35(14), i436-i445. &lt;a href=&#34;https://doi.org/10.1093/bioinformatics/btz363&#34;&gt;https://doi.org/10.1093/bioinformatics/btz363&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;method&lt;/th&gt; &#xA;   &lt;th&gt;organism&lt;/th&gt; &#xA;   &lt;th&gt;license&lt;/th&gt; &#xA;   &lt;th&gt;citation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://icbi.at/software/quantiseq/doc/index.html&#34;&gt;quanTIseq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://github.com/omnideconv/immunedeconv/raw/master/LICENSE.md&#34;&gt;BSD&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Finotello, F., Mayer, C., Plattner, C., Laschober, G., Rieder, D., Hackl, H., ..., Sopper, S. (2019). Molecular and pharmacological modulators of the tumor immune contexture revealed by deconvolution of RNA-seq data. Genome medicine, 11(1), 34. &lt;a href=&#34;https://doi.org/10.1186/s13073-019-0638-6&#34;&gt;https://doi.org/10.1186/s13073-019-0638-6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cistrome.org/TIMER/&#34;&gt;TIMER&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;http://cistrome.org/TIMER/download.html&#34;&gt;GPL 2.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Li, B., Severson, E., Pignon, J.-C., Zhao, H., Li, T., Novak, J., … Liu, X. S. (2016). Comprehensive analyses of tumor immunity: implications for cancer immunotherapy. Genome Biology, 17(1), 174. &lt;a href=&#34;https://doi.org/10.1186/s13059-016-1028-7&#34;&gt;https://doi.org/10.1186/s13059-016-1028-7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cibersort.stanford.edu/&#34;&gt;CIBERSORT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free for non-commerical use only&lt;/td&gt; &#xA;   &lt;td&gt;Newman, A. M., Liu, C. L., Green, M. R., Gentles, A. J., Feng, W., Xu, Y., … Alizadeh, A. A. (2015). Robust enumeration of cell subsets from tissue expression profiles. Nature Methods, 12(5), 453–457. &lt;a href=&#34;https://doi.org/10.1038/nmeth.3337&#34;&gt;https://doi.org/10.1038/nmeth.3337&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ebecht/MCPcounter&#34;&gt;MCPCounter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://github.com/ebecht/MCPcounter/raw/master/Source/License&#34;&gt;GPL 3.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Becht, E., Giraldo, N. A., Lacroix, L., Buttard, B., Elarouci, N., Petitprez, F., … de Reyniès, A. (2016). Estimating the population abundance of tissue-infiltrating immune and stromal cell populations using gene expression. Genome Biology, 17(1), 218. &lt;a href=&#34;https://doi.org/10.1186/s13059-016-1070-5&#34;&gt;https://doi.org/10.1186/s13059-016-1070-5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://xcell.ucsf.edu/&#34;&gt;xCell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://github.com/dviraran/xCell/raw/master/DESCRIPTION&#34;&gt;GPL 3.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Aran, D., Hu, Z., &amp;amp; Butte, A. J. (2017). xCell: digitally portraying the tissue cellular heterogeneity landscape. Genome Biology, 18(1), 220. &lt;a href=&#34;https://doi.org/10.1186/s13059-017-1349-1&#34;&gt;https://doi.org/10.1186/s13059-017-1349-1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gfellerlab.shinyapps.io/EPIC_1-1/&#34;&gt;EPIC&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free for non-commercial use only (&lt;a href=&#34;https://github.com/GfellerLab/EPIC/raw/master/LICENSE&#34;&gt;Academic License&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Racle, J., de Jonge, K., Baumgaertner, P., Speiser, D. E., &amp;amp; Gfeller, D. (2017). Simultaneous enumeration of cancer and immune cell types from bulk tumor gene expression data. ELife, 6, e26476. &lt;a href=&#34;https://doi.org/10.7554/eLife.26476&#34;&gt;https://doi.org/10.7554/eLife.26476&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gfellerlab.shinyapps.io/EPIC_1-1/&#34;&gt;ESTIMATE&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://bioinformatics.mdanderson.org/public-software/estimate/&#34;&gt;GPL 2.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Yoshihara, K., Shahmoradgoli, M., Martínez, E., Vegesna, R., Kim, H., Torres-Garcia, W., Treviño, V., Shen, H., Laird, P. W., Levine, D. A., Carter, S. L., Getz, G., Stemke-Hale, K., Mills, G. B., &amp;amp; Verhaak, R. G. (2013). Inferring tumour purity and stromal and immune cell admixture from expression data. Nature communications, 4, 2612. &lt;a href=&#34;https://doi.org/10.1038/ncomms3612&#34;&gt;https://doi.org/10.1038/ncomms3612&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://giannimonaco.shinyapps.io/ABIS/&#34;&gt;ABIS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://github.com/giannimonaco/ABIS&#34;&gt;GPL 2.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Monaco, G., Lee, B., Xu, W., Mustafah, S., Hwang, Y. Y., ..., Larbi, A. (2019). RNA-Seq Signatures Normalized by mRNA Abundance Allow Absolute Deconvolution of Human Immune Cell Types. Cell reports, 26(6), 1627–1640.e7. &lt;a href=&#34;https://doi.org/10.1016/j.celrep.2019.01.041&#34;&gt;https://doi.org/10.1016/j.celrep.2019.01.041&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://olliecast.shinyapps.io/Deconvolution_Benchmarking/&#34;&gt;ConsensusTME&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;human&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://github.com/cansysbio/ConsensusTME/raw/master/LICENSE.md&#34;&gt;GPL 3.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Jiménez-Sánchez, A., Cast, O., &amp;amp; Miller, M. L. (2019). Comprehensive Benchmarking and Integration of Tumor Microenvironment Cell Estimation Methods. Cancer research, 79(24), 6238–6246. &lt;a href=&#34;https://doi.org/10.1158/0008-5472.CAN-18-3560&#34;&gt;https://doi.org/10.1158/0008-5472.CAN-18-3560&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cit-bioinfo/mMCP-counter&#34;&gt;mMCPCounter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;mouse&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://github.com/cit-bioinfo/mMCP-counter/raw/master/LICENSE.md&#34;&gt;GPL 3.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Petitprez, F., Levy, S., Sun, C. M., Meylan, M., ..., de Reyniès, A. (2020). The murine Microenvironment Cell Population counter method to estimate abundance of tissue-infiltrating immune and stromal cell populations in murine samples using gene expression. Genome medicine, 12(1), 86. &lt;a href=&#34;https://doi.org/10.1186/s13073-020-00783-w&#34;&gt;https://doi.org/10.1186/s13073-020-00783-w&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/omnideconv/immunedeconv/master/218.4.234.74:3200/immune/&#34;&gt;seqImmuCC&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;mouse&lt;/td&gt; &#xA;   &lt;td&gt;free for non-commerical use only&lt;/td&gt; &#xA;   &lt;td&gt;Chen, Z., Quan, L., Huang, A., Zhao, Q., Yuan, Y., Yuan, X., ..., Wu, A. (2018). seq-ImmuCC: Cell-Centric View of Tissue Transcriptome Measuring Cellular Compositions of Immune Microenvironment From Mouse RNA-Seq Data. Frontiers in immunology, 9, 1286. &lt;a href=&#34;https://doi.org/10.3389/fimmu.2018.01286&#34;&gt;https://doi.org/10.3389/fimmu.2018.01286&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://dcq.tau.ac.il/&#34;&gt;DCQ&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;mouse&lt;/td&gt; &#xA;   &lt;td&gt;free (&lt;a href=&#34;https://cran.r-project.org/web/packages/ComICS/index.html&#34;&gt;GPL 2.0&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Altboum, Z., Steuerman, Y., David, E., Barnett-Itzhaki, Z., Valadarsky, L., ..., Amit, I. (2014). Digital cell quantification identifies global immune cell dynamics during influenza infection. Molecular systems biology, 10(2), 720. &lt;a href=&#34;https://doi.org/10.1002/msb.134947&#34;&gt;https://doi.org/10.1002/msb.134947&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BASE&lt;/td&gt; &#xA;   &lt;td&gt;mouse&lt;/td&gt; &#xA;   &lt;td&gt;free&lt;/td&gt; &#xA;   &lt;td&gt;Varn, F. S., Andrews, E. H., Mullins, D. W., &amp;amp; Cheng, C. (2016). Integrative analysis of breast cancer reveals prognostic haematopoietic activity and patient-specific immune response profiles. Nature communications, 7, 10248. &lt;a href=&#34;https://doi.org/10.1038/ncomms10248&#34;&gt;https://doi.org/10.1038/ncomms10248&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Comparison of the methods&lt;/h3&gt; &#xA;&lt;p&gt;For a benchmark comparison of the human-based methods, please see our &lt;a href=&#34;https://doi.org/10.1101/463828&#34;&gt;publication&lt;/a&gt;. If you would like to benchmark additional methods, please see our &lt;a href=&#34;https://github.com/omnideconv/immune_deconvolution_benchmark&#34;&gt;benchmark pipeline&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;System requirements: R &amp;gt;= 4.1. Only linux is officially supported, but Mac/Windows should work, too.&lt;/p&gt; &#xA;&lt;h3&gt;Bioconda (Linux/MacOS only)&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to retrieve this package and all its dependencies is to use &lt;a href=&#34;https://conda.io/miniconda.html&#34;&gt;Anaconda&lt;/a&gt;. The installation typically completes within minutes.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;a href=&#34;https://conda.io/miniconda.html&#34;&gt;Miniconda&lt;/a&gt;, if you don&#39;t have a conda installation already.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) create and activate an environment for deconvolution:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n deconvolution&#xA;conda activate deconvolution&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install the &lt;code&gt;immunedeconv&lt;/code&gt; package&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c bioconda -c conda-forge r-immunedeconv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;conda&lt;/code&gt; will automatically install the package and all dependencies. You can then open an &lt;code&gt;R&lt;/code&gt; instance within the environment and use the package.&lt;/p&gt; &#xA;&lt;h3&gt;Standard R Package&lt;/h3&gt; &#xA;&lt;p&gt;We highly recommend using &lt;code&gt;conda&lt;/code&gt;, as it will avoid incompatibilities between different package versions. That being said, you can also install &lt;code&gt;immunedeconv&lt;/code&gt; as a regular R package in your default R installation. The installation typically completes within 30 minutes, depending on how many dependency packages need to be compiled.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to do so is to use the &lt;code&gt;remotes&lt;/code&gt; package, which will automatically download all CRAN, Bioconductor and GitHub dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;omnideconv/immunedeconv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This package was originally developed by &lt;a href=&#34;https://github.com/grst&#34;&gt;Gregor Sturm&lt;/a&gt; in 2018 at &lt;a href=&#34;https://www.pieris.com/&#34;&gt;Pieris Pharmaceuticals GmbH&lt;/a&gt; in collaboration with &lt;a href=&#34;https://biomedical-big-data.de/&#34;&gt;Markus List&lt;/a&gt;, &lt;a href=&#34;https://www.independentdatalab.com/team&#34;&gt;Tatsiana Aneichyk&lt;/a&gt;, and &lt;a href=&#34;https://computationalbiomedicinegroup.github.io/&#34;&gt;Francesca Finotello&lt;/a&gt;. Gregor Sturm continued to support this package while at &lt;a href=&#34;https://icbi.at&#34;&gt;ICBI (Med Uni Innsbruck)&lt;/a&gt;. In 2022, this repository moved to the &lt;a href=&#34;https://omnideconv.org&#34;&gt;omnideconv&lt;/a&gt; organization, a joint effort of the &lt;a href=&#34;https://biomedical-big-data.de/&#34;&gt;List Lab&lt;/a&gt; and &lt;a href=&#34;https://computationalbiomedicinegroup.github.io/&#34;&gt;Finotello Lab&lt;/a&gt; dedicated to improve accessibility of deconvolution methods. At this point &lt;a href=&#34;https://github.com/LorenzoMerotto&#34;&gt;Lorenzo Merotto&lt;/a&gt; became primary maintainer of the immunedeconv package.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lewinfox/icecream</title>
    <updated>2023-11-10T01:41:51Z</updated>
    <id>tag:github.com,2023-11-10:/lewinfox/icecream</id>
    <link href="https://github.com/lewinfox/icecream" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Never use `print()` to debug again.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;icecream &lt;img src=&#34;https://raw.githubusercontent.com/lewinfox/icecream/master/man/figures/logo.svg?sanitize=true&#34; align=&#34;right&#34; width=&#34;120&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=icecream&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/icecream&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lewinfox/icecream/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/lewinfox/icecream/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;icecream is designed to make print debugging easier. It allows you to print out an expression, its value and (optionally) which function and file the call originated in.&lt;/p&gt; &#xA;&lt;p&gt;This is an R port of &lt;a href=&#34;https://github.com/gruns/icecream&#34;&gt;gruns/icecream&lt;/a&gt;. All credit for the idea belongs to &lt;a href=&#34;https://github.com/gruns&#34;&gt;Ansgar Grunseid&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;icecream&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can install the development version from GitHub with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;lewinfox/icecream&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inspect variables&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;ic()&lt;/code&gt; function prints its argument and its value. It also returns the value of the evaluated argument, meaning that it is effectively transparent in code - just wrap an expression in &lt;code&gt;ic()&lt;/code&gt; to get debugging output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(icecream)&#xA;&#xA;is_negative &amp;lt;- function(x) x &amp;lt; 0&#xA;&#xA;ic(is_negative(1))&#xA;#&amp;gt; ℹ ic| `is_negative(1)`: logi FALSE&#xA;&#xA;ic(is_negative(-1))&#xA;#&amp;gt; ℹ ic| `is_negative(-1)`: logi TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You’re more likely to want to do this within a function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;some_function &amp;lt;- function(x) {&#xA;  intermediate_value &amp;lt;- x * 10&#xA;  answer &amp;lt;- ic(intermediate_value / 2)&#xA;  return(answer)&#xA;}&#xA;&#xA;some_function(1)&#xA;#&amp;gt; ℹ ic| `intermediate_value / 2`: num 5&#xA;#&amp;gt; [1] 5&#xA;&#xA;some_function(10)&#xA;#&amp;gt; ℹ ic| `intermediate_value / 2`: num 50&#xA;#&amp;gt; [1] 50&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More complex inputs like lists and data frames are summarised to avoid cluttering the terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- ic(iris)&#xA;#&amp;gt; ℹ ic| `iris`: data.frame [150 x 5]: $&#39;Sepal.Length&#39;: dbl [150], ...&#xA;&#xA;my_list &amp;lt;- ic(list(a = 1, b = 3, c = 1:100))&#xA;#&amp;gt; ℹ ic| `list(a = 1, b = 3, c = 1:100)`: list [3]: $&#39;a&#39;: dbl [1], $&#39;b&#39;: dbl [1], $&#39;c&#39;: int [100]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inspect execution&lt;/h2&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;ic()&lt;/code&gt; with no arguments causes it to print out the file, line and parent function it was called from.&lt;/p&gt; &#xA;&lt;p&gt;In this example we have a file &lt;code&gt;demo.R&lt;/code&gt; that contains two functions. We’ve inserted &lt;code&gt;ic()&lt;/code&gt; calls at strategic points so we can track what’s being executed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# demo.R&#xA;f1 &amp;lt;- function(x) {&#xA;  ic()&#xA;  if (x &amp;gt; 0) {&#xA;    f2()&#xA;  }&#xA;}&#xA;&#xA;f2 &amp;lt;- function() {&#xA;  ic()&#xA;}&#xA;&#xA;f3 &amp;lt;- function(x) {&#xA;  ic(x)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;source(&#34;demo.R&#34;)&#xA;&#xA;f1(-1)&#xA;#&amp;gt; ℹ ic| `global::f1()` in demo.R:3:2&#xA;&#xA;f1(1)&#xA;#&amp;gt; ℹ ic| `global::f1()` in demo.R:3:2&#xA;#&amp;gt; ℹ ic| `global::f2()` in demo.R:10:2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the case of functions that haven’t been &lt;code&gt;source()&lt;/code&gt;d or loaded from a package there is no source code to refer to. In these cases the function’s environment will be displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;orphan_func &amp;lt;- function() {&#xA;  ic()&#xA;  TRUE&#xA;}&#xA;&#xA;orphan_func()&#xA;#&amp;gt; ℹ ic| `global::orphan_func()` in &amp;lt;env: global&amp;gt;&#xA;#&amp;gt; [1] TRUE&#xA;&#xA;e &amp;lt;- new.env()&#xA;attr(e, &#34;name&#34;) &amp;lt;- &#34;icecream_van&#34;&#xA;environment(orphan_func) &amp;lt;- e&#xA;&#xA;orphan_func()&#xA;#&amp;gt; ℹ ic| `orphan_func()` in &amp;lt;env: icecream_van&amp;gt;&#xA;#&amp;gt; [1] TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enable / disable&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;ic_enable()&lt;/code&gt; and &lt;code&gt;ic_disable()&lt;/code&gt; functions enable or disable the &lt;code&gt;ic()&lt;/code&gt; function. If disabled, &lt;code&gt;ic()&lt;/code&gt; will return the result of evaluating its input but will not print anything.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ic_enable() # This is TRUE by default&#xA;&#xA;ic(mean(1:100))&#xA;#&amp;gt; ℹ ic| `mean(1:100)`: num 50.5&#xA;&#xA;ic_disable()&#xA;&#xA;ic(mean(1:100))&#xA;#&amp;gt; [1] 50.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convenience functions &lt;code&gt;with_ic_enable()&lt;/code&gt; and &lt;code&gt;with_ic_disable()&lt;/code&gt; are also provided.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ic_enable()&#xA;&#xA;with_ic_disable(ic(mean(1:100)))&#xA;#&amp;gt; [1] 50.5&#xA;&#xA;ic_disable()&#xA;&#xA;with_ic_enable(ic(mean(1:100)))&#xA;#&amp;gt; ℹ ic| `mean(1:100)`: num 50.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;The following options can be used to control behaviour:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;icecream.enabled&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Boolean. If &lt;code&gt;FALSE&lt;/code&gt;, calls to &lt;code&gt;ic(foo)&lt;/code&gt; simply evaluate and return &lt;code&gt;foo&lt;/code&gt;. No output is printed. This option can be set directly or with the &lt;code&gt;ic_enable()&lt;/code&gt; and &lt;code&gt;ic_disable()&lt;/code&gt; functions.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;icecream.prefix&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is printed at the beginning of every line. Defaults to &lt;code&gt;&#34;ic|&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ic(mean(1:5))&#xA;#&amp;gt; ℹ ic| `mean(1:5)`: num 3&#xA;&#xA;options(icecream.prefix = &#34;DEBUG:&#34;)&#xA;ic(mean(1:5))&#xA;#&amp;gt; ℹ DEBUG: `mean(1:5)`: num 3&#xA;&#xA;options(icecream.prefix = &#34;\U1F366&#34;)&#xA;ic(mean(1:5))&#xA;#&amp;gt; ℹ 🍦 `mean(1:5)`: num 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;icecream.always.include.context&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Boolean. If &lt;code&gt;TRUE&lt;/code&gt;, when calling &lt;code&gt;ic(foo)&lt;/code&gt; the source file and line will be printed along with the expression and value. If no &lt;code&gt;srcref()&lt;/code&gt; is available the function’s environment will be displayed instead. This can be useful for more complicated debugging but produces a lot of output so is disabled by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f3(1)&#xA;#&amp;gt; ℹ ic| `x`: num 1&#xA;&#xA;options(icecream.always.include.context = TRUE)&#xA;&#xA;f3(1)&#xA;#&amp;gt; ℹ ic| `global::f3()` in demo.R:14:2 | `x`: num 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;ic()&lt;/code&gt; is called with no arguments, the context is always printed because showing the location of the call is the only reason to call &lt;code&gt;ic()&lt;/code&gt; on its own.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;icecream.peeking.function&lt;/code&gt; and &lt;code&gt;icecream.max.lines&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These two options control how the result of evaluation of an expression is printed. &lt;code&gt;icecream.peeking.function&lt;/code&gt; indicates the function that summarizes the object. Default value is &lt;code&gt;ic_autopeek&lt;/code&gt;, which works like &lt;code&gt;utils::str&lt;/code&gt; for most of the time, but gives more informative output for &lt;code&gt;lists&lt;/code&gt;, &lt;code&gt;data.frames&lt;/code&gt; and their subclasses in a more compact way. &lt;code&gt;icecream.max.lines&lt;/code&gt; determines maximum number of lines that the peek of an object occupies; defaults to 1.&lt;/p&gt; &#xA;&lt;p&gt;For more complex data you may want to use e.g.&amp;nbsp;&lt;code&gt;head&lt;/code&gt; function and 5 lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(iris)&#xA;&#xA;ic(iris) # we would like to see header of the data&#xA;#&amp;gt; ℹ ic| `iris`: data.frame [150 x 5]: $&#39;Sepal.Length&#39;: dbl [150], ...&#xA;&#xA;options(icecream.peeking.function = head,&#xA;        icecream.max.lines = 5)&#xA;&#xA;ic(iris)&#xA;#&amp;gt; ℹ ic| `iris`: &#xA;#&amp;gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species&#xA;#&amp;gt; 1          5.1         3.5          1.4         0.2  setosa&#xA;#&amp;gt; 2          4.9         3.0          1.4         0.2  setosa&#xA;#&amp;gt; 3          4.7         3.2          1.3         0.2  setosa&#xA;#&amp;gt; 4          4.6         3.1          1.5         0.2  setosa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if &lt;code&gt;icecream.max.lines&lt;/code&gt; is greater than 1 and summary of an object is longer than 1, the alert occupies one line more due to the header.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;icecream.output.function&lt;/code&gt;, &lt;code&gt;icecream.arg.to.string.function&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Not implemented yet. See the &lt;a href=&#34;https://github.com/gruns/icecream#configuration&#34;&gt;configuration&lt;/a&gt; section of the original project docs for details of what they will do.&lt;/p&gt; &#xA;&lt;h2&gt;TODO:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement &lt;code&gt;ic.format()&lt;/code&gt; (see &lt;a href=&#34;https://github.com/gruns/icecream#miscellaneous&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Implement &lt;code&gt;ic.output.function&lt;/code&gt;. At the moment it uses &lt;code&gt;cli::cli_alert_info()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implement &lt;code&gt;ic.arg.to.string.function&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>