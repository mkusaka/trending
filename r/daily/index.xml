<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-18T01:50:05Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>easystats/see</title>
    <updated>2022-06-18T01:50:05Z</updated>
    <id>tag:github.com,2022-06-18:/easystats/see</id>
    <link href="https://github.com/easystats/see" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üé® Visualisation toolbox for beautiful and publication-ready figures&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;see &lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doi.org/10.21105/joss.03393&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/10.21105/joss.03393/status.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=see&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/see&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cranlogs.r-pkg.org/&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/see&#34; alt=&#34;total&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;‚ÄúDamned are those who believe without seeing‚Äù&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;easystats&lt;/em&gt; is a collection of packages that operate in synergy to provide a consistent and intuitive syntax when working with statistical models in the R programming language (R Core Team, 2021). Most &lt;em&gt;easystats&lt;/em&gt; packages return comprehensive numeric summaries of model parameters and performance. The &lt;em&gt;see&lt;/em&gt; package complements these numeric summaries with a host of functions and tools to produce a range of publication-ready visualizations for model parameters, predictions, and performance diagnostics. As a core pillar of &lt;em&gt;easystats&lt;/em&gt;, the &lt;em&gt;see&lt;/em&gt; package helps users to utilize visualization for more informative, communicable, and well-rounded scientific reporting.&lt;/p&gt; &#xA;&lt;h1&gt;Statement of Need&lt;/h1&gt; &#xA;&lt;p&gt;The grammar of graphics (Wilkinson, 2012), largely due to its implementation in the &lt;em&gt;ggplot2&lt;/em&gt; package (Wickham, 2016), has become the dominant approach to visualization in R. Building a model visualization with &lt;em&gt;ggplot2&lt;/em&gt; is somewhat disconnected from the model fitting and evaluation process. Generally, this process entails:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fitting a model.&lt;/li&gt; &#xA; &lt;li&gt;Extracting desired results from the model (e.g., model parameters and intervals, model predictions, diagnostic statistics) and arranging them into a dataframe.&lt;/li&gt; &#xA; &lt;li&gt;Passing the results dataframe to &lt;code&gt;ggplot()&lt;/code&gt; and specifying the graphical parameters. For example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;&#xA;# step-1&#xA;model &amp;lt;- lm(mpg ~ factor(cyl) * wt, data = mtcars)&#xA;&#xA;# step-2&#xA;results &amp;lt;- fortify(model)&#xA;&#xA;# step-3&#xA;ggplot(results) +&#xA;  geom_point(aes(x = wt, y = mpg, color = factor(cyl))) +&#xA;  geom_line(aes(x = wt, y = .fitted, color = `factor(cyl)`))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A number of packages have been developed to extend &lt;em&gt;ggplot2&lt;/em&gt; and assist with model visualization (for a sampling of these packages, visit &lt;a href=&#34;https://exts.ggplot2.tidyverse.org/gallery/&#34;&gt;ggplot2-gallery&lt;/a&gt;). Some of these packages provide functions for additional geoms, annotations, or common visualization types without linking them to a specific statistical analysis or fundamentally changing the &lt;em&gt;ggplot2&lt;/em&gt; workflow (e.g., &lt;em&gt;ggrepel&lt;/em&gt;, &lt;em&gt;ggalluvial&lt;/em&gt;, &lt;em&gt;ggridges&lt;/em&gt;, &lt;em&gt;ggdist&lt;/em&gt;, &lt;em&gt;ggpubr&lt;/em&gt;, etc.). Other &lt;em&gt;ggplot2&lt;/em&gt; extensions provide functions to generate publication-ready visualizations for specific types of models (e.g., &lt;em&gt;metaviz&lt;/em&gt;, &lt;em&gt;tidymv&lt;/em&gt;, &lt;em&gt;sjPlot&lt;/em&gt;, &lt;em&gt;survminer&lt;/em&gt;). For example, the &lt;em&gt;ggstatsplot&lt;/em&gt; package (Patil, 2021) offers visualizations for statistical analysis of one-way factorial designs, and the &lt;em&gt;plotmm&lt;/em&gt; package (Waggoner, 2020) supports specific types of mixture model objects.&lt;/p&gt; &#xA;&lt;p&gt;The aim of the &lt;em&gt;see&lt;/em&gt; package is to produce visualizations for a wide variety of models and statistical analyses in a way that is tightly linked with the model fitting process and requires minimal interruption of users‚Äô workflow. &lt;em&gt;see&lt;/em&gt; accomplishes this aim by providing a single &lt;code&gt;plot()&lt;/code&gt; method for objects created by the other &lt;em&gt;easystats&lt;/em&gt; packages, such as &lt;em&gt;parameters&lt;/em&gt; tables, &lt;em&gt;modelbased&lt;/em&gt; predictions, &lt;em&gt;performance&lt;/em&gt; diagnostic tests, &lt;em&gt;correlation&lt;/em&gt; matrices, and so on. The &lt;em&gt;easystats&lt;/em&gt; packages compute numeric results for a wide range of statistical models, and the &lt;em&gt;see&lt;/em&gt; package acts as a visual support to the entire &lt;em&gt;easystats&lt;/em&gt; ecosystem. As such, visualizations corresponding to all stages of statistical analysis, from model fitting to diagnostics to reporting, can be easily created using &lt;em&gt;see&lt;/em&gt;. &lt;em&gt;see&lt;/em&gt; plots are compatible with other &lt;em&gt;ggplot2&lt;/em&gt; functions for further customization (e.g., &lt;code&gt;labs()&lt;/code&gt; for a plot title). In addition, &lt;em&gt;see&lt;/em&gt; provides several aesthetic utilities to embellish both &lt;em&gt;easystats&lt;/em&gt; plots and other &lt;em&gt;ggplot2&lt;/em&gt; plots. The result is a package that minimizes the barrier to producing high-quality statistical visualizations in R.&lt;/p&gt; &#xA;&lt;p&gt;The central goal of &lt;em&gt;easystats&lt;/em&gt; is to make the task of doing statistics in R as easy as possible. This goal is realized through intuitive and consistent syntax, consistent and transparent argument names, comprehensive documentation, informative warnings and error messages, and smart functions with sensible default parameter values. The &lt;em&gt;see&lt;/em&gt; package follows this philosophy by using a single access point‚Äîthe generic &lt;code&gt;plot()&lt;/code&gt; method‚Äîfor visualization of all manner of statistical results supported by &lt;em&gt;easystats&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=see&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/see&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.r-universe.dev&#34;&gt;&lt;img src=&#34;https://easystats.r-universe.dev/badges/see&#34; alt=&#34;see status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/easystats/see/actions&#34;&gt;&lt;img src=&#34;https://github.com/easystats/see/workflows/R-check/badge.svg?branch=master&#34; alt=&#34;R check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;see&lt;/em&gt; package is available on CRAN, while its latest development version is available on R-universe (from &lt;em&gt;rOpenSci&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Release&lt;/td&gt; &#xA;   &lt;td&gt;CRAN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;see&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;R-universe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;see&#34;, repos = &#34;https://easystats.r-universe.dev&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Once you have downloaded the package, you can then load it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#34;see&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This package provides visualisation toolbox for R packages in the &lt;em&gt;easystats&lt;/em&gt; &lt;a href=&#34;https://easystats.github.io/easystats/&#34;&gt;ecosystem&lt;/a&gt;. But note that it will not download any of the &lt;em&gt;easystats&lt;/em&gt; packages for you. Rather, it will be loaded when a respective plotting method is requested by an &lt;em&gt;easystats&lt;/em&gt; package.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Following resources are a good way to get to know more about the functionality offered by this package:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://easystats.github.io/see/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/documentation-see-orange.svg?colorB=E91E63&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.github.io/see/reference/index.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/features-see-orange.svg?colorB=2196F3&#34; alt=&#34;Features&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.github.io/blog/posts/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/blog-easystats-orange.svg?colorB=FF9800&#34; alt=&#34;Blog&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Plotting functions for ‚Äòeasystats‚Äô packages&lt;/h1&gt; &#xA;&lt;p&gt;Below we present one or two plotting methods for each &lt;em&gt;easystats&lt;/em&gt; package, but many other methods are available. Interested readers are encouraged to explore the range of examples on the package &lt;a href=&#34;https://easystats.github.io/see/articles/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/easystats/parameters&#34;&gt;parameters&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;parameters&lt;/em&gt; package converts summaries of regression model objects into dataframes (L√ºdecke et al., 2020). The &lt;em&gt;see&lt;/em&gt; package can take this transformed object and, for example, create a dot-and-whisker plot for the extracted regression estimates simply by passing the &lt;code&gt;parameters&lt;/code&gt; class object to &lt;code&gt;plot()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(parameters)&#xA;library(see)&#xA;&#xA;model &amp;lt;- lm(wt ~ am * cyl, data = mtcars)&#xA;&#xA;plot(parameters(model))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/parameters1-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;As &lt;em&gt;see&lt;/em&gt; outputs objects of class &lt;code&gt;ggplot&lt;/code&gt;, &lt;em&gt;ggplot2&lt;/em&gt; functions can be added as layers to the plot the same as with all other &lt;em&gt;ggplot2&lt;/em&gt; visualizations. For example, we might add a title using &lt;code&gt;labs()&lt;/code&gt; from &lt;em&gt;ggplot2&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(parameters)&#xA;library(see)&#xA;&#xA;model &amp;lt;- lm(wt ~ am * cyl, data = mtcars)&#xA;&#xA;plot(parameters(model)) +&#xA;  ggplot2::labs(title = &#34;A Dot-and-Whisker Plot&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/parameters2-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plotting functions for the &lt;strong&gt;parameters&lt;/strong&gt; package are demonstrated &lt;a href=&#34;https://easystats.github.io/see/articles/parameters.html&#34;&gt;in this vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/easystats/bayestestR&#34;&gt;bayestestR&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Similarly, for Bayesian regression model objects, which are handled by the &lt;em&gt;bayestestR&lt;/em&gt; package (Makowski et al., 2019), the &lt;em&gt;see&lt;/em&gt; package provides special plotting methods relevant for Bayesian models (e.g., Highest Density Interval, or &lt;em&gt;HDI&lt;/em&gt;). Users can fit the model and pass the model results, extracted via &lt;em&gt;bayestestR&lt;/em&gt;, to &lt;code&gt;plot()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(bayestestR)&#xA;library(rstanarm)&#xA;library(see)&#xA;&#xA;set.seed(123)&#xA;model &amp;lt;- stan_glm(wt ~ mpg, data = mtcars, refresh = 0)&#xA;result &amp;lt;- hdi(model, ci = c(0.5, 0.75, 0.89, 0.95))&#xA;&#xA;plot(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/bayestestR-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plotting functions for the &lt;strong&gt;bayestestR&lt;/strong&gt; package are demonstrated &lt;a href=&#34;https://easystats.github.io/see/articles/bayestestR.html&#34;&gt;in this vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/easystats/performance&#34;&gt;performance&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;performance&lt;/em&gt; package is primarily concerned with checking regression model assumptions (L√ºdecke et al., 2021). The &lt;em&gt;see&lt;/em&gt; package offers tools to visualize these assumption checks, such as the normality of residuals. Users simply pass the fit model object to the relevant &lt;em&gt;performance&lt;/em&gt; function (&lt;code&gt;check_normality()&lt;/code&gt; in the example below). Then, this result can be passed to &lt;code&gt;plot()&lt;/code&gt; to produce a &lt;em&gt;ggplot2&lt;/em&gt; visualization of the check on normality of the residuals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(performance)&#xA;library(see)&#xA;&#xA;model &amp;lt;- lm(wt ~ mpg, data = mtcars)&#xA;check &amp;lt;- check_normality(model)&#xA;&#xA;plot(check, type = &#34;qq&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/performance-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plotting functions for the &lt;strong&gt;performance&lt;/strong&gt; package are demonstrated &lt;a href=&#34;https://easystats.github.io/see/articles/performance.html&#34;&gt;in this vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/easystats/effectsize&#34;&gt;effectsize&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;effectsize&lt;/em&gt; package computes a variety of effect size metrics for fitted models to assesses the practical importance of observed effects (Ben-Shachar et al., 2020). In conjunction with &lt;em&gt;see&lt;/em&gt;, users are able to visualize the magnitude and uncertainty of effect sizes by passing the model object to the relevant &lt;em&gt;effectsize&lt;/em&gt; function (&lt;code&gt;omega_squared()&lt;/code&gt; in the following example), and then to &lt;code&gt;plot()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(effectsize)&#xA;library(see)&#xA;&#xA;model &amp;lt;- aov(wt ~ am * cyl, data = mtcars)&#xA;&#xA;plot(omega_squared(model))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/effectsize-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plotting functions for the &lt;strong&gt;effectsize&lt;/strong&gt; package are demonstrated &lt;a href=&#34;https://easystats.github.io/see/articles/effectsize.html&#34;&gt;in this vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/easystats/modelbased&#34;&gt;modelbased&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;modelbased&lt;/em&gt; package computes model-based estimates and predictions from fitted models (Makowski et al., 2020a). &lt;em&gt;see&lt;/em&gt; provides methods to quickly visualize these model predictions. For the following example to work, you need to have installed the &lt;em&gt;emmeans&lt;/em&gt; package first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(modelbased)&#xA;library(see)&#xA;&#xA;data(mtcars)&#xA;mtcars$gear &amp;lt;- as.factor(mtcars$gear)&#xA;model &amp;lt;- lm(mpg ~ wt * gear, data = mtcars)&#xA;&#xA;predicted &amp;lt;- estimate_expectation(model, data = &#34;grid&#34;)&#xA;plot(predicted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/modelbased1-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;One can also visualize &lt;em&gt;marginal means&lt;/em&gt; (i.e., the mean at each factor level averaged over other predictors) using &lt;code&gt;estimate_means()&lt;/code&gt;, that is then passed to &lt;code&gt;plot()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;means &amp;lt;- estimate_means(model)&#xA;&#xA;plot(means)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/modelbased2-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plotting functions for the &lt;strong&gt;modelbased&lt;/strong&gt; package are demonstrated &lt;a href=&#34;https://easystats.github.io/see/articles/modelbased.html&#34;&gt;in this vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/easystats/correlation&#34;&gt;correlation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;correlation&lt;/em&gt; package provides a unified syntax and human-readable code to carry out many types of correlation analysis (Makowski et al., 2020b). A user can run &lt;code&gt;summary(correlation(data))&lt;/code&gt; to create a construct a correlation matrix for the variables in a dataframe. With &lt;em&gt;see&lt;/em&gt;, this matrix can be passed to &lt;code&gt;plot()&lt;/code&gt; to visualize these correlations in a correlation matrix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(correlation)&#xA;library(see)&#xA;&#xA;results &amp;lt;- summary(correlation(iris))&#xA;&#xA;plot(results, show_data = &#34;points&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/correlation-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plotting functions for the &lt;strong&gt;correlation&lt;/strong&gt; package are demonstrated &lt;a href=&#34;https://easystats.github.io/see/articles/correlation.html&#34;&gt;in this vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Themes&lt;/h1&gt; &#xA;&lt;h3&gt;Modern&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;&#xA;ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +&#xA;  geom_point2() +&#xA;  theme_modern()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lucid&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;&#xA;p &amp;lt;- ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length, color = Species)) +&#xA;  geom_point2()&#xA;&#xA;p + theme_lucid()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-5-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Blackboard&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + theme_blackboard()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-6-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Abyss&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + theme_abyss()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-7-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Palettes&lt;/h1&gt; &#xA;&lt;p&gt;This is just one example of the available palettes. See &lt;a href=&#34;https://easystats.github.io/see/articles/seecolorscales.html&#34;&gt;this vignette&lt;/a&gt; for a detailed overview of palettes and color scales.&lt;/p&gt; &#xA;&lt;h3&gt;Material design&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p1 &amp;lt;- ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +&#xA;  geom_boxplot() +&#xA;  theme_modern(axis.text.angle = 45) +&#xA;  scale_fill_material_d()&#xA;&#xA;p2 &amp;lt;- ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +&#xA;  geom_violin() +&#xA;  theme_modern(axis.text.angle = 45) +&#xA;  scale_fill_material_d(palette = &#34;ice&#34;)&#xA;&#xA;p3 &amp;lt;- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, color = Sepal.Length)) +&#xA;  geom_point2() +&#xA;  theme_modern() +&#xA;  scale_color_material_c(palette = &#34;rainbow&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multiple plots&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;plots()&lt;/code&gt; function allows us to plot the figures side by side.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plots(p1, p2, p3, n_columns = 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-9-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;plots()&lt;/code&gt; function can also be used to add &lt;strong&gt;tags&lt;/strong&gt; (&lt;em&gt;i.e.&lt;/em&gt;, labels for subfigures).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plots(p1, p2, p3,&#xA;  n_columns = 2,&#xA;  tags = paste(&#34;Fig. &#34;, 1:3)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-10-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Geoms&lt;/h1&gt; &#xA;&lt;h2&gt;Better looking points&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;geom_points2()&lt;/code&gt; and &lt;code&gt;geom_jitter2()&lt;/code&gt; allow points without borders and contour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;normal &amp;lt;- ggplot(iris, aes(x = Petal.Width, y = Sepal.Length)) +&#xA;  geom_point(size = 8, alpha = 0.3) +&#xA;  theme_modern()&#xA;&#xA;new &amp;lt;- ggplot(iris, aes(x = Petal.Width, y = Sepal.Length)) +&#xA;  geom_point2(size = 8, alpha = 0.3) +&#xA;  theme_modern()&#xA;&#xA;plots(normal, new, n_columns = 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-11-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Half-violin Half-dot plot&lt;/h2&gt; &#xA;&lt;p&gt;Create a half-violin half-dot plot, useful for visualising the distribution and the sample size at the same time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +&#xA;  geom_violindot(fill_dots = &#34;black&#34;) +&#xA;  theme_modern() +&#xA;  scale_fill_material_d()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-12-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Radar chart (Spider plot)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(poorman)&#xA;library(datawizard)&#xA;&#xA;# prepare the data in tidy format&#xA;data &amp;lt;- iris %&amp;gt;%&#xA;      group_by(Species) %&amp;gt;%&#xA;      summarise(across(everything(), mean)) %&amp;gt;%&#xA;      reshape_longer(c(&#34;Sepal.Length&#34;, &#34;Sepal.Width&#34;, &#34;Petal.Length&#34;, &#34;Petal.Width&#34;))&#xA;&#xA;data %&amp;gt;%&#xA;  ggplot(aes(&#xA;    x = Name,&#xA;    y = Value,&#xA;    color = Species,&#xA;    group = Species,&#xA;    fill = Species&#xA;  )) +&#xA;  geom_polygon(size = 1, alpha = .1) +&#xA;  coord_radar() +&#xA;  theme_radar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/see/master/man/figures/unnamed-chunk-13-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing and Support&lt;/h1&gt; &#xA;&lt;p&gt;In case you want to file an issue or contribute in another way to the package, please follow &lt;a href=&#34;https://github.com/easystats/see/raw/master/.github/CONTRIBUTING.md&#34;&gt;this guide&lt;/a&gt;. For questions about the functionality, you may either contact us via email or also file an issue.&lt;/p&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://easystats.github.io/see/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34; line-spacing=&#34;2&#34;&gt; &#xA; &lt;div id=&#34;ref-Ben-Shachar2020&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Ben-Shachar, M. S., L√ºdecke, D., &amp;amp; Makowski, D. (2020). &lt;span class=&#34;nocase&#34;&gt;e&lt;/span&gt;ffectsize: Estimation of effect size indices and standardized parameters. &lt;em&gt;Journal of Open Source Software&lt;/em&gt;, &lt;em&gt;5&lt;/em&gt;(56), 2815. &lt;a href=&#34;https://doi.org/10.21105/joss.02815&#34;&gt;https://doi.org/10.21105/joss.02815&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-L√ºdecke2020parameters&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;L√ºdecke, D., Ben-Shachar, M. S., Patil, I., &amp;amp; Makowski, D. (2020). Extracting, computing and exploring the parameters of statistical models using R. &lt;em&gt;Journal of Open Source Software&lt;/em&gt;, &lt;em&gt;5&lt;/em&gt;(53), 2445. &lt;a href=&#34;https://doi.org/10.21105/joss.02445&#34;&gt;https://doi.org/10.21105/joss.02445&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-L√ºdecke2020performance&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;L√ºdecke, D., Ben-Shachar, M. S., Patil, I., Waggoner, P., &amp;amp; Makowski, D. (2021). &lt;span class=&#34;nocase&#34;&gt;performance&lt;/span&gt;: An R package for assessment, comparison and testing of statistical models. &lt;em&gt;Journal of Open Source Software&lt;/em&gt;, &lt;em&gt;6&lt;/em&gt;(60), 3139. &lt;a href=&#34;https://doi.org/10.21105/joss.03139&#34;&gt;https://doi.org/10.21105/joss.03139&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Makowski2019&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Makowski, D., Ben-Shachar, M. S., &amp;amp; L√ºdecke, D. (2019). &lt;span class=&#34;nocase&#34;&gt;bayestestR&lt;/span&gt;: Describing effects and their uncertainty, existence and significance within the Bayesian framework. &lt;em&gt;Journal of Open Source Software&lt;/em&gt;, &lt;em&gt;4&lt;/em&gt;(40), 1541. &lt;a href=&#34;https://doi.org/10.21105/joss.01541&#34;&gt;https://doi.org/10.21105/joss.01541&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Makowski2020modelbased&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Makowski, D., Ben-Shachar, M. S., Patil, I., &amp;amp; L√ºdecke, D. (2020a). Estimation of model-based predictions, contrasts and means. &lt;em&gt;CRAN&lt;/em&gt;. &lt;a href=&#34;https://github.com/easystats/modelbased&#34;&gt;https://github.com/easystats/modelbased&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Makowski2020&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Makowski, D., Ben-Shachar, M. S., Patil, I., &amp;amp; L√ºdecke, D. (2020b). Methods and algorithms for correlation analysis in R. &lt;em&gt;Journal of Open Source Software&lt;/em&gt;, &lt;em&gt;5&lt;/em&gt;(51), 2306. &lt;a href=&#34;https://doi.org/10.21105/joss.02306&#34;&gt;https://doi.org/10.21105/joss.02306&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Patil2021&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Patil, I. (2021). &lt;span class=&#34;nocase&#34;&gt;Visualizations with statistical details: The &lt;span class=&#34;nocase&#34;&gt;‚Äôggstatsplot‚Äô&lt;/span&gt; approach&lt;/span&gt;. &lt;em&gt;Journal of Open Source Software&lt;/em&gt;, &lt;em&gt;6&lt;/em&gt;(61), 3167. &lt;a href=&#34;https://doi.org/10.21105/joss.03167&#34;&gt;https://doi.org/10.21105/joss.03167&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-base2021&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;R Core Team. (2021). &lt;em&gt;R: A language and environment for statistical computing&lt;/em&gt;. R Foundation for Statistical Computing. &lt;a href=&#34;https://www.R-project.org/&#34;&gt;https://www.R-project.org/&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Waggoner2020&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Waggoner, P. D. (2020). &lt;em&gt;&lt;span class=&#34;nocase&#34;&gt;plotmm&lt;/span&gt;: Tidy tools for visualizing mixture models&lt;/em&gt;. &lt;a href=&#34;https://CRAN.R-project.org/package=plotmm&#34;&gt;https://CRAN.R-project.org/package=plotmm&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Wickham2016&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Wickham, H. (2016). &lt;em&gt;&lt;span class=&#34;nocase&#34;&gt;ggplot2&lt;/span&gt;: Elegant graphics for data analysis&lt;/em&gt;. Springer-Verlag New York.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-wilkinson2012grammar&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Wilkinson, L. (2012). &lt;span class=&#34;nocase&#34;&gt;The Grammar of Graphics&lt;/span&gt;. In &lt;em&gt;Handbook of computational statistics&lt;/em&gt; (pp. 375‚Äì414). Springer.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/tinytex</title>
    <updated>2022-06-18T01:50:05Z</updated>
    <id>tag:github.com,2022-06-18:/rstudio/tinytex</id>
    <link href="https://github.com/rstudio/tinytex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, cross-platform, portable, and easy-to-maintain LaTeX distribution based on TeX Live&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TinyTeX&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/tinytex/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/tinytex/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/rstudio/tinytex?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rstudio/tinytex/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=tinytex&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/tinytex&#34; alt=&#34;CRAN release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://yihui.org/tinytex/&#34;&gt;&lt;img src=&#34;https://yihui.org/images/logo-tinytex.png&#34; alt=&#34;tinytex logo&#34; align=&#34;right&#34; width=&#34;200px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The motivation behind TinyTeX was from two common problems in installing and maintaining LaTeX distributions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You have to either install a basic version that is relatively small (several hundred MB) but basically doesn&#39;t work, because it is very likely that certain frequently used LaTeX packages are missing; or you install the full version that is several GB, but in your whole life, you probably will only use 1% of the packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The documentation for installation and maintenance is often too long for beginners. For example, &lt;a href=&#34;https://www.tug.org/texlive/doc/tlmgr.html&#34;&gt;the &lt;code&gt;tlmgr&lt;/code&gt; manual&lt;/a&gt; is comprehensive and very useful, but it is often hard to figure out what to do when running into a LaTeX issue that says a certain &lt;code&gt;.sty&lt;/code&gt; file is not found.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I believe these problems can be solved by TinyTeX, a custom LaTeX distribution based on TeX Live that is small in size but still functions well in most cases. Even if you run into the problem of missing LaTeX packages, it should be super clear to you what you need to do. In fact, if you are an R Markdown user, there is nothing you need to do, because missing packages will just be installed automatically. You may not even know the existence of LaTeX at all since it should rarely bother you.&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the installation scripts of TinyTeX (under the &lt;code&gt;tools&lt;/code&gt; directory) and the R companion package &lt;strong&gt;tinytex&lt;/strong&gt;. Please see the full documentation at &lt;a href=&#34;https://yihui.org/tinytex/&#34;&gt;https://yihui.org/tinytex/&lt;/a&gt;. Obviously I hope it is not too long.&lt;/p&gt; &#xA;&lt;p&gt;The R package &lt;strong&gt;tinytex&lt;/strong&gt; is licensed under MIT. The LaTeX distribution TinyTeX is &lt;a href=&#34;https://github.com/rstudio/tinytex-releases#license&#34;&gt;licensed under GPL-2&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>r4ds/bookclub-bayes_rules</title>
    <updated>2022-06-18T01:50:05Z</updated>
    <id>tag:github.com,2022-06-18:/r4ds/bookclub-bayes_rules</id>
    <link href="https://github.com/r4ds/bookclub-bayes_rules" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R4DS Bayes Rules! Book Club&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the R4DS Bayes Rules! Book Club!&lt;/p&gt; &#xA;&lt;p&gt;We are working together to read &lt;a href=&#34;https://www.bayesrulesbook.com/&#34;&gt;&lt;em&gt;Bayes Rules!&lt;/em&gt;&lt;/a&gt; by Alicia A. Johnson, Miles Q. Ott, &amp;amp; Mine Dogucu (Chapman and Hall/CRC, copyright 2022, &lt;a href=&#34;https://www.routledge.com/Bayes-Rules-An-Introduction-to-Applied-Bayesian-Modeling/Johnson-Ott-Dogucu/p/book/9780367255398?utm_source=website&amp;amp;utm_medium=shared_link&amp;amp;utm_campaign=B023819_jm1_5ll_7pp_d676_bayesrulesauthorshare&#34;&gt;9780367255398&lt;/a&gt;). Join the &lt;a href=&#34;https://rfordatascience.slack.com/archives/C03EK4FUMQX&#34;&gt;#book_club-bayes_rules&lt;/a&gt; channel on the &lt;a href=&#34;https://r4ds.io/join&#34;&gt;R4DS Slack&lt;/a&gt; to participate. As we read, we are producing &lt;a href=&#34;https://r4ds.io/bayes_rules&#34;&gt;notes about the book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Meeting Schedule&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to present, please see the sign-up sheet for your cohort (linked below, and pinned in the &lt;a href=&#34;https://rfordatascience.slack.com/archives/C03EK4FUMQX&#34;&gt;#book_club-bayes_rules&lt;/a&gt; channel on Slack)!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/18IDSOU2bfkD55kOB18qCB7Idbpiyp4_9qeWjkvE-Syc/edit?usp=sharing&#34;&gt;Cohort 1&lt;/a&gt; (started 2022-06-02): &lt;a href=&#34;https://www.timeanddate.com/worldclock/converter.html?iso=20220602T180000&amp;amp;p1=24&amp;amp;p2=195&amp;amp;p3=1440&#34;&gt;Thursdays, 13:00 CST/CDT&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/playlist?list=PL3x6DOfs2NGg3BSs7FW5_LPYfAyNft7I0&#34;&gt;meeting videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1RENoDi6HNBw_l_OsOttl_3sA5CNVF6JExgnjwoSR5y4/edit?usp=sharing&#34;&gt;Cohort 2&lt;/a&gt; (started 2022-06-15): &lt;a href=&#34;https://www.timeanddate.com/worldclock/converter.html?iso=20220615T170000&amp;amp;p1=24&amp;amp;p2=197&amp;amp;p3=1440&#34;&gt;Wednesdays, 12:00 CST/CDT&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/playlist?list=PL3x6DOfs2NGj_iXxIxkutG3rUzh-Z5vi7&#34;&gt;meeting videos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How to Present&lt;/h2&gt; &#xA;&lt;p&gt;This repository is structured as a &lt;a href=&#34;https://CRAN.R-project.org/package=bookdown&#34;&gt;{bookdown}&lt;/a&gt; site. To present, follow these instructions:&lt;/p&gt; &#xA;&lt;p&gt;Do these steps once:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hNUNPkoledI&#34;&gt;Setup Github Locally&lt;/a&gt; (also see &lt;a href=&#34;https://happygitwithr.com/github-acct.html&#34;&gt;&lt;em&gt;Happy Git and GitHub for the useR&lt;/em&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install {usethis} and {devtools} &lt;code&gt;install.packages(c(&#34;usethis&#34;, &#34;devtools&#34;))&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;usethis::create_from_github(&#34;r4ds/bookclub-bayes_rules&#34;)&lt;/code&gt; (cleanly creates your own copy of this repository).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Do these steps each time you present another chapter:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your project for this book.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;usethis::pr_init(&#34;my-chapter&#34;)&lt;/code&gt; (creates a branch for your work, to avoid confusion, making sure that you have the latest changes from other contributors; replace &lt;code&gt;my-chapter&lt;/code&gt; with a descriptive name, ideally).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;devtools::install_dev_deps()&lt;/code&gt; (installs any packages used by the book that you don&#39;t already have installed).&lt;/li&gt; &#xA; &lt;li&gt;Edit the appropriate chapter file, if necessary. Use &lt;code&gt;##&lt;/code&gt; to indicate new slides (new sections).&lt;/li&gt; &#xA; &lt;li&gt;If you use any packages that are not already in the &lt;code&gt;DESCRIPTION&lt;/code&gt;, add them. You can use &lt;code&gt;usethis::use_package(&#34;myCoolPackage&#34;)&lt;/code&gt; to add them quickly!&lt;/li&gt; &#xA; &lt;li&gt;Build the book! ctrl-shift-b (or command-shift-b) will render the full book, or ctrl-shift-k (command-shift-k) to render just your slide. Please do this to make sure it works before you push your changes up to the main repo!&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (either through the command line or using Rstudio&#39;s Git tab).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;usethis::pr_push()&lt;/code&gt; (pushes the changes up to github, and opens a &#34;pull request&#34; (PR) to let us know your work is ready).&lt;/li&gt; &#xA; &lt;li&gt;(If we request changes, make them)&lt;/li&gt; &#xA; &lt;li&gt;When your PR has been accepted (&#34;merged&#34;), &lt;code&gt;usethis::pr_finish()&lt;/code&gt; to close out your branch and prepare your local repository for future work.&lt;/li&gt; &#xA; &lt;li&gt;Now that your local copy is up-to-date with the main repo, you need to update your remote fork. Run &lt;code&gt;gert::git_push()&lt;/code&gt; or click the &lt;code&gt;Push&lt;/code&gt; button on the &lt;code&gt;Git&lt;/code&gt; tab of Rstudio.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When your PR is checked into the main branch, the bookdown site will rebuild, adding your slides to &lt;a href=&#34;https://r4ds.io/bayes_rules&#34;&gt;this site&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>