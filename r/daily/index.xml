<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-20T01:48:01Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JMSLab/eventstudyr</title>
    <updated>2023-06-20T01:48:01Z</updated>
    <id>tag:github.com,2023-06-20:/JMSLab/eventstudyr</id>
    <link href="https://github.com/JMSLab/eventstudyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eventstudyr &lt;img src=&#34;https://raw.githubusercontent.com/JMSLab/eventstudyr/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=eventstudyr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/eventstudyr&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://r-pkg.org/pkg/eventstudyr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/eventstudyr&#34; alt=&#34;CRAN RStudio mirror downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;eventstudyr&lt;/strong&gt; package implements tools for estimating linear panel event study models, following the recommendations in &lt;a href=&#34;https://www.nber.org/papers/w29170&#34;&gt;Freyaldenhoven et al.&amp;nbsp;(2021)&lt;/a&gt;. Includes sup-t bands, testing for key hypotheses, least wiggly path through the Wald region. Allows instrumental variables estimation following &lt;a href=&#34;https://www.aeaweb.org/articles?id=10.1257/aer.20180609&#34;&gt;Freyaldenhoven et al.&amp;nbsp;(2019)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install from CRAN&#xA;install.packages(&#34;eventstudyr&#34;)&#xA;&#xA;# Install latest version from GitHub&#xA;install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;JMSLab/eventstudyr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Find a minimal example below. For more examples see the package &lt;a href=&#34;https://cran.r-project.org/package=eventstudyr/eventstudyr.pdf&#34;&gt;documentation&lt;/a&gt; and &lt;a href=&#34;https://cran.r-project.org/package=eventstudyr/vignettes/documentation.html&#34;&gt;vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(eventstudyr)&#xA;set.seed(10) # for reproducibility of sup-t bands&#xA;&#xA;estimates_ols &amp;lt;- EventStudy(&#xA;   estimator = &#34;OLS&#34;,&#xA;   data = example_data,   # Use package sample data&#xA;   outcomevar = &#34;y_smooth_m&#34;,&#xA;   policyvar = &#34;z&#34;,&#xA;   idvar = &#34;id&#34;,&#xA;   timevar = &#34;t&#34;,&#xA;   controls = &#34;x_r&#34;,&#xA;   pre = 0,  post = 4&#xA;)&#xA;&#xA;plt &amp;lt;- EventStudyPlot(estimates = estimates_ols)&#xA;plt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/JMSLab/eventstudyr/main/man/figures/README-example-1.png&#34; alt=&#34;Event-study plot using the example data of the package and default plotting options.&#34;&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Simon Freyaldenhoven, Christian Hansen, Jorge Pérez Pérez, and Jesse M. Shapiro. “Visualization, Identification, and Estimation in the Panel Event-Study Design.” &lt;a href=&#34;https://www.nber.org/papers/w29170&#34;&gt;NBER Working Paper No.&amp;nbsp;29170&lt;/a&gt;, August 2021.&lt;/p&gt; &#xA;&lt;p&gt;Simon Freyaldenhoven, Christian Hansen, Jorge Pérez Pérez, Jesse M. Shapiro, Veli M. Andirin, Richard Calvo, Santiago Hermo, Nathan Schor, Emily Wang. “&lt;code&gt;eventstudyr&lt;/code&gt; package.” Code and data repository at &lt;a href=&#34;https://github.com/JMSLab/eventstudyr&#34;&gt;https://github.com/JMSLab/eventstudyr&lt;/a&gt;, March 2023.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to Eliana Sena Sarmiento and Melissa Wu for their excellent work testing and reviewing &lt;code&gt;eventstudyr&lt;/code&gt; prior to its public release.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MattCowgill/ggdirectlabel</title>
    <updated>2023-06-20T01:48:01Z</updated>
    <id>tag:github.com,2023-06-20:/MattCowgill/ggdirectlabel</id>
    <link href="https://github.com/MattCowgill/ggdirectlabel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ggdirectlabel&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MattCowgill/ggdirectlabel/actions&#34;&gt;&lt;img src=&#34;https://github.com/MattCowgill/ggdirectlabel/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MattCowgill/ggdirectlabel/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/MattCowgill/ggdirectlabel/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of ggdirectlabel is to make it easier to directly label ggplot2 charts rather than using legends.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of ggdirectlabel from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;MattCowgill/ggdirectlabel&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggdirectlabel)&#xA;library(ggplot2)&#xA;library(magrittr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;geom_richlegend()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here’s a standard ggplot2 scatterplot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base_scatter &amp;lt;- mtcars |&amp;gt; &#xA;  ggplot(aes(x = wt, y = mpg, col = factor(cyl))) +&#xA;  geom_point()&#xA;&#xA;base_scatter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-unnamed-chunk-3-1.png&#34; width=&#34;672&#34;&gt; &#xA;&lt;p&gt;This is fine! But sometimes you might like the legend levels (4, 6, and 8 in this example) to be coloured according to the levels in the data. That’s where &lt;code&gt;geom_richlegend()&lt;/code&gt; comes in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base_scatter +&#xA;  geom_richlegend(aes(label = cyl)) +&#xA;  theme(legend.position = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-unnamed-chunk-4-1.png&#34; width=&#34;672&#34;&gt; &#xA;&lt;p&gt;You can move the ‘rich legend’ around:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base_scatter +&#xA;  geom_richlegend(aes(label = cyl),&#xA;                  legend.position = &#34;bottomleft&#34;,&#xA;                  vjust = 0,&#xA;                  hjust = 0) +&#xA;  theme(legend.position = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-unnamed-chunk-5-1.png&#34; width=&#34;672&#34;&gt; &#xA;&lt;p&gt;&lt;code&gt;geom_richlegend()&lt;/code&gt; respects facets - it’ll place a little legend annotation for each level of the data that appears in that panel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;base_scatter +&#xA;  geom_richlegend(aes(label = paste0(cyl, &#34; cylinders&#34;))) +&#xA;  facet_wrap(~cyl)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-unnamed-chunk-6-1.png&#34; width=&#34;672&#34;&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;geom_linepoint()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Without ggirectlabel, we might do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;ggplot2::economics_long %&amp;gt;%&#xA;  ggplot(aes(x = date, y = value, col = variable)) +&#xA;  geom_line() +&#xA;  geom_point(data = ~dplyr::filter(., date == max(date)),&#xA;             fill = &#34;white&#34;,&#xA;             shape = 21,&#xA;             size = 2.5,&#xA;             stroke = 1.25)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-no-directlabel-1.png&#34; width=&#34;672&#34;&gt; &#xA;&lt;p&gt;This is fine! But this is a more straightforward way to achieve the same thing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot2::economics_long %&amp;gt;%&#xA;  ggplot(aes(x = date, y = value, col = variable)) +&#xA;  geom_linepoint()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-example-1.png&#34; width=&#34;672&#34;&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;scale_x_date_rightalign()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In time series line charts, it’s often important to make clear the date of your most recent observation. The &lt;code&gt;scale_x_date_rightalign()&lt;/code&gt; function aligns the breaks of your x-axis so that the most recent observation is included in the breaks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot2::economics_long %&amp;gt;%&#xA;  ggplot(aes(x = date, y = value, col = variable)) +&#xA;  geom_linepoint() +&#xA;  scale_x_date_rightalign()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-scale_x_date_rightalign-1.png&#34; width=&#34;672&#34;&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;geom_finallabel()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In time series line charts, you may wish to label the final point in the series. The &lt;code&gt;geom_finallabel()&lt;/code&gt; function makes that easy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot2::economics_long %&amp;gt;%&#xA;  ggplot(aes(x = date, y = value, col = variable)) +&#xA;  geom_linepoint() +&#xA;  geom_finallabel(aes(label = round(value, 0))) +&#xA;  scale_x_date_rightalign(expand = expansion(c(0, 0.15))) +&#xA;  theme(legend.position = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/MattCowgill/ggdirectlabel/main/man/figures/README-geom_finallabel-1.png&#34; width=&#34;672&#34;&gt;</summary>
  </entry>
  <entry>
    <title>Merck/bards-aactreveal</title>
    <updated>2023-06-20T01:48:01Z</updated>
    <id>tag:github.com,2023-06-20:/Merck/bards-aactreveal</id>
    <link href="https://github.com/Merck/bards-aactreveal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Provides tools for extracting and querying data from the AACT (Aggregate Content of ClinicalTrials.gov) database for subsequent analyses.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aactreveal&lt;/h1&gt; &#xA;&lt;p&gt;The goal of aactreveal is to provide tools for extracting and querying data from the AACT (Aggregate Content of ClinicalTrials.gov) database for subsequent analyses. See for more details on the AACT database.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of aactreveal from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;Merck/bards-aactreveal&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The first step is to load the package. AACT data is either loaded from a local path (need to download AACT raw txt files) or the AACT database directly (requires user-id and password). For illustration purposes, we highlight this step with the pre-loaded data-sets within “aactreveal.” Pre-loading the data is NOT required however (see below some examples).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(aactreveal)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In practice, the user can access the latest AACT data by connecting directly to the database, or by downloading the raw data (in txt file format) and pointing to the folder containing the downloaded files. Refer to for details on obtaining a username/password along with downloading the raw files. The “load_aact_data” function pre-loads the data for subsequent queries and building analysis-ready data-sets, see below. Note that “user_name” and “pw” are examples only, the user should supply their own user-name and passwords after registering an AACT account.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load Data by connecting to AACT database #&#xA;library(RPostgreSQL)&#xA;library(dplyr)&#xA;drv &amp;lt;- dbDriver(&#39;PostgreSQL&#39;)&#xA;user_name &amp;lt;- &#34;AACT_username&#34;&#xA;pw &amp;lt;- &#34;AACT_pw&#34;&#xA;con &amp;lt;- dbConnect(drv, dbname=&#34;aact&#34;,host=&#34;aact-db.ctti-clinicaltrials.org&#34;, port=5432, user=user_name, password=pw)&#xA;load_aact_data(con=con, path_raw=NULL, table_names = table_names)&#xA;&#xA;# Alternatively, can download the raw txt files and load by using &#34;path_raw&#34; argument.&#xA;example_path &amp;lt;- &#34;//location/for/aact_data/&#34;&#xA;load_aact_data(con=NULL, path_raw=example_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The “load_aact_data” function pre-loads the data to the R environment for subsequent queries and building analysis-ready data-sets. This is not required for any of the query functions, but can speed things up. Individual data-tables can also be loaded via the “load_data” function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;studies &amp;lt;- load_data(con=con, path_raw=NULL, table_name = &#34;studies&#34;)&#xA;outcome_measurements &amp;lt;- load_data(con=con, path_raw=NULL, table_name = &#34;outcome_measurements&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, let’s query the data for specific interventions and conditions of interest. By default, based on input query terms, the package will also search for “related terms” by web-scraping clinialtrials.gov. See below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;terms_int &amp;lt;- &#34;pembrolizumab&#34;&#xA;terms_cond &amp;lt;- &#34;breast cancer&#34;&#xA;query_init &amp;lt;- query_aact(terms_int = terms_int, terms_cond = terms_cond)&#xA;#&amp;gt; Querying treatment......&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Querying condition......&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Querying designs, studies, and sponsor data-tables...&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;user_nct_ids &amp;lt;- query_init$user_nct_ids # Unique NCT ids &#xA;search_terms_int &amp;lt;- query_init$trt_search_terms&#xA;names(query_init)&#xA;#&amp;gt; [1] &#34;analy_study&#34;       &#34;user_nct_ids&#34;      &#34;trt_search_terms&#34; &#xA;#&amp;gt; [4] &#34;cond_search_terms&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same function can be run without pre-loaded data, for example by specifying the path or connection argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;query_aact(terms_int = terms_int, terms_cond = terms_cond, path_raw=path_raw)&#xA;query_aact(terms_int = terms_int, terms_cond = terms_cond, con=con)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, based on the queried data-set, let’s search for clinical outcomes. Here we search for objective response rate (ORR) date and overall survival (OS) outcomes. The key input is a list of arguments, named “outcome_list”:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;orr_list &amp;lt;- list(&#xA;  include = c(&#34;overall response rate&#34;, &#34;objective response rate&#34;),&#xA;  exclude = c(&#34;disease control rate&#34;),&#xA;  type = c(&#34;number&#34;),&#xA;  range = c(0, 100)&#xA;)&#xA;os_list &amp;lt;- list(&#xA;  include = c(&#34;overall survival&#34;)&#xA;)&#xA;outcome_list &amp;lt;- list(orr_list, os_list)&#xA;outcome_name &amp;lt;- c(&#34;ORR&#34;, &#34;OS&#34;)&#xA;query_out &amp;lt;- query_outcomes(user_nct_ids = query_init$user_nct_ids,&#xA;                          outcome_list = outcome_list, outcome_name = outcome_name,&#xA;                          analy_study = query_init$analy_study,&#xA;                          search_terms_int = search_terms_int,&#xA;                          verbose = TRUE)&#xA;#&amp;gt; Querying outcomes......&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; [1] &#34;augmenting is_trt and is_combo from query_aact&#34;&#xA;#&amp;gt;       is_trt_new&#xA;#&amp;gt; is_trt  0  1&#xA;#&amp;gt;   0     8  0&#xA;#&amp;gt;   1     0 13&#xA;#&amp;gt;   &amp;lt;NA&amp;gt;  6 34&#xA;#&amp;gt;         is_combo_new&#xA;#&amp;gt; is_combo  0  1&#xA;#&amp;gt;     0    17  0&#xA;#&amp;gt;     1     0  4&#xA;#&amp;gt;     &amp;lt;NA&amp;gt;  6 34&#xA;#&amp;gt; Warning: Unknown or uninitialised column: `is_trt`.&#xA;#&amp;gt; [1] &#34;no is_trt found: identifying treatments&#34;&#xA;#&amp;gt;       is_trt_new&#xA;#&amp;gt; is_trt 1&#xA;#&amp;gt;   &amp;lt;NA&amp;gt; 6&#xA;#&amp;gt;         is_combo_new&#xA;#&amp;gt; is_combo 0&#xA;#&amp;gt;     &amp;lt;NA&amp;gt; 6&#xA;names(query_out)&#xA;#&amp;gt; [1] &#34;outcome_measures_final&#34;   &#34;outcome_analyses_final&#34;  &#xA;#&amp;gt; [3] &#34;uniq_title&#34;               &#34;uniq_units&#34;              &#xA;#&amp;gt; [5] &#34;uniq_measures_param_type&#34; &#34;uniq_analyses_param_type&#34;&#xA;#&amp;gt; [7] &#34;outcome_analyses_full&#34;&#xA;head(query_out$outcome_analyses_final[,c(&#34;outcome_cat&#34;, &#34;nct_id&#34;, &#34;title&#34;,&#xA;                                         &#34;param_comparison&#34;, &#34;comp&#34;, &#34;ref&#34;,&#xA;                                         &#34;param_type&#34;,&#xA;                                         &#34;param_value&#34;)])&#xA;#&amp;gt; # A tibble: 6 × 8&#xA;#&amp;gt;   outcome_cat nct_id      title              param…¹ comp  ref   param…² param…³&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 ORR         NCT02555657 Overall Response … pembro… pemb… chem… differ…    8.3 &#xA;#&amp;gt; 2 ORR         NCT02555657 Overall Response … pembro… pemb… chem… differ…    2.9 &#xA;#&amp;gt; 3 ORR         NCT02555657 Overall Response … pembro… pemb… chem… differ…   -1   &#xA;#&amp;gt; 4 OS          NCT02555657 Overall Survival … pembro… pemb… chem… hazard…    0.78&#xA;#&amp;gt; 5 OS          NCT02555657 Overall Survival … pembro… pemb… chem… hazard…    0.86&#xA;#&amp;gt; 6 OS          NCT02555657 Overall Survival … pembro… pemb… chem… hazard…    0.97&#xA;#&amp;gt; # … with abbreviated variable names ¹​param_comparison, ²​param_type,&#xA;#&amp;gt; #   ³​param_value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, instead of the individual steps, you can run the whole process using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;out_all &amp;lt;- extract_aact(con=NULL, path_raw=NULL, terms_int=terms_int, terms_cond=terms_cond, &#xA;                        outcome_list = outcome_list, outcome_name = outcome_name, verbose = TRUE)&#xA;#&amp;gt; Querying treatment......&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Querying condition......&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Querying designs, studies, and sponsor data-tables...&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Searching for outcome(s) of interest......&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Check inputs into load_data function: Loading aactreveal package data&#xA;#&amp;gt; Querying outcomes......&#xA;#&amp;gt; [1] &#34;augmenting is_trt and is_combo from query_aact&#34;&#xA;#&amp;gt;       is_trt_new&#xA;#&amp;gt; is_trt  0  1&#xA;#&amp;gt;   0     8  0&#xA;#&amp;gt;   1     0 13&#xA;#&amp;gt;   &amp;lt;NA&amp;gt;  6 34&#xA;#&amp;gt;         is_combo_new&#xA;#&amp;gt; is_combo  0  1&#xA;#&amp;gt;     0    17  0&#xA;#&amp;gt;     1     0  4&#xA;#&amp;gt;     &amp;lt;NA&amp;gt;  6 34&#xA;#&amp;gt; Warning: Unknown or uninitialised column: `is_trt`.&#xA;#&amp;gt; [1] &#34;no is_trt found: identifying treatments&#34;&#xA;#&amp;gt;       is_trt_new&#xA;#&amp;gt; is_trt 1&#xA;#&amp;gt;   &amp;lt;NA&amp;gt; 6&#xA;#&amp;gt;         is_combo_new&#xA;#&amp;gt; is_combo 0&#xA;#&amp;gt;     &amp;lt;NA&amp;gt; 6&#xA;names(out_all)&#xA;#&amp;gt;  [1] &#34;analy_study&#34;            &#34;outcome_measures_query&#34; &#34;outcome_analyses_query&#34;&#xA;#&amp;gt;  [4] &#34;outcome_measures_raw&#34;   &#34;outcome_analyses_raw&#34;   &#34;outcome_analyses_full&#34; &#xA;#&amp;gt;  [7] &#34;result_groups&#34;          &#34;baseline_dat&#34;           &#34;trt_search_terms&#34;      &#xA;#&amp;gt; [10] &#34;cond_search_terms&#34;&#xA;head(out_all$outcome_analyses_query[,c(&#34;outcome_cat&#34;, &#34;nct_id&#34;, &#34;title&#34;,&#xA;                                         &#34;param_comparison&#34;, &#34;comp&#34;, &#34;ref&#34;,&#xA;                                         &#34;param_type&#34;,&#xA;                                         &#34;param_value&#34;)])&#xA;#&amp;gt; # A tibble: 6 × 8&#xA;#&amp;gt;   outcome_cat nct_id      title              param…¹ comp  ref   param…² param…³&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 ORR         NCT02555657 Overall Response … pembro… pemb… chem… differ…    8.3 &#xA;#&amp;gt; 2 ORR         NCT02555657 Overall Response … pembro… pemb… chem… differ…    2.9 &#xA;#&amp;gt; 3 ORR         NCT02555657 Overall Response … pembro… pemb… chem… differ…   -1   &#xA;#&amp;gt; 4 OS          NCT02555657 Overall Survival … pembro… pemb… chem… hazard…    0.78&#xA;#&amp;gt; 5 OS          NCT02555657 Overall Survival … pembro… pemb… chem… hazard…    0.86&#xA;#&amp;gt; 6 OS          NCT02555657 Overall Survival … pembro… pemb… chem… hazard…    0.97&#xA;#&amp;gt; # … with abbreviated variable names ¹​param_comparison, ²​param_type,&#xA;#&amp;gt; #   ³​param_value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overall, aactreveal aims to facilitate analyses using the AACT database which includes all information posted on clinicaltrials.gov. We caution the user that the package outputs may still need cleaning (ex: convert median OS values to month unit).&lt;/p&gt;</summary>
  </entry>
</feed>