<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-26T01:41:56Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MatthewBJane/theme_park</title>
    <updated>2023-07-26T01:41:56Z</updated>
    <id>tag:github.com,2023-07-26:/MatthewBJane/theme_park</id>
    <link href="https://github.com/MatthewBJane/theme_park" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fun ggplot themes for popular culture&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/MatthewBJane/theme_park/assets/52077481/4c2e2885-d879-46e6-b61d-b253d8382597&#34; alt=&#34;theme_park_banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Theme Park&lt;/h1&gt; &#xA;&lt;p&gt;Theme Park is a soon to be package for fun ggplot themes related to popular culture (movies, TV shows, video-games, etc.). I don&#39;t have much time to expand this further so please consider submitting a theme!&lt;/p&gt; &#xA;&lt;h2&gt;Submit a Theme&lt;/h2&gt; &#xA;&lt;p&gt;Please help grow this package by submitting your own custom ggplot theme for a movie, show, or videogame. To submit, edit the &#39;theme_template.R&#39; script file and send the edited script to &lt;a href=&#34;mailto:matthew.jane@uconn.edu&#34;&gt;matthew.jane@uconn.edu&lt;/a&gt;. I will review it and add it or respond with suggested edits. Have fun with it!&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Matthew B. Jané&lt;/strong&gt; &lt;code&gt;theme_barbie&lt;/code&gt;, &lt;code&gt;theme_oppenheimer&lt;/code&gt;, &lt;code&gt;theme_starwars&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Toki Liam&lt;/strong&gt; &lt;code&gt;theme_oppenheimer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alex Slavenko&lt;/strong&gt; &lt;code&gt;theme_zelda&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Velu P.K. Immonen&lt;/strong&gt; &lt;code&gt;theme_spiderman&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Begum Ozemek&lt;/strong&gt; &lt;code&gt;theme_slytherin&lt;/code&gt;, &lt;code&gt;theme_hufflepuff&lt;/code&gt;, &lt;code&gt;theme_ravenclaw&lt;/code&gt;, &lt;code&gt;theme_gryffindor&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;devtools&#39;)&#xA;theme_name = &#34;theme_barbie&#34; # Pick which theme you want&#xA;&#xA;paste(&#34;https://raw.githubusercontent.com/MatthewBJane/theme_park/main/&#34;, theme_name ,&#34;.R&#34;)&#xA;source_url(&#34;https://raw.githubusercontent.com/MatthewBJane/theme_park/main/theme_barbie.R&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example (theme_barbie)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;`X variable` = rnorm(50,0,1)&#xA;`Y variable` = rnorm(50,0,1)&#xA;&#xA;ggplot(data=NULL, aes(x = `X variable`,y = `Y variable`)) +&#xA;       theme_barbie(barbie_font=TRUE) +&#xA;       geom_smooth(method=&#39;lm&#39;,color=dark_color_barbie, fill = light_color_barbie) +&#xA;       geom_point(color = medium_color_barbie) +&#xA;       ggtitle(&#39;Barbie Scatter Plot&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;534&#34; alt=&#34;image&#34; src=&#34;https://github.com/MatthewBJane/theme_barbie/assets/52077481/cc45bdd6-d1f6-44a9-b9f3-cb52736f4188&#34;&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;h3&gt;BibTeX:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{JaneBarbie2023,&#xA;  author = {Jané, Matthew B},&#xA;  month = {6},&#xA;  title = {theme_park: popular culture ggplot themes},&#xA;  url = {https://github.com/MatthewBJane/theme_park},&#xA;  version = {1.0.0},&#xA;  year = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;APA:&lt;/h3&gt; &#xA;&lt;p&gt;Jané, M.B. (2023). theme_park: popular culture ggplot themes (Version 0.0.1) [Source Code]. &lt;a href=&#34;https://github.com/MatthewBJane/theme_park&#34;&gt;https://github.com/MatthewBJane/theme_park&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wlandau/instantiate</title>
    <updated>2023-07-26T01:41:56Z</updated>
    <id>tag:github.com,2023-07-26:/wlandau/instantiate</id>
    <link href="https://github.com/wlandau/instantiate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pre-compiled CmdStan models in R packages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;instantiate: pre-compiled CmdStan models in R packages&lt;/h1&gt; &#xA;&lt;!--[![CRAN](https://www.r-pkg.org/badges/version/instantiate)](https://CRAN.R-project.org/package=instantiate)--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wlandau/instantiate/actions?query=workflow%3Acheck&#34;&gt;&lt;img src=&#34;https://github.com/wlandau/instantiate/workflows/check/badge.svg?sanitize=true&#34; alt=&#34;check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/wlandau/instantiate&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/wlandau/instantiate/branch/main/graph/badge.svg?token=3T5DlLwUVl&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wlandau/instantiate/actions?query=workflow%3Alint&#34;&gt;&lt;img src=&#34;https://github.com/wlandau/instantiate/workflows/lint/badge.svg?sanitize=true&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://mc-stan.org/rstantools/&#34;&gt;&lt;code&gt;rstantools&lt;/code&gt;&lt;/a&gt; for &lt;a href=&#34;https://mc-stan.org/rstan/&#34;&gt;&lt;code&gt;rstan&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;instantiate&lt;/code&gt; package builds pre-compiled &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; models into CRAN-ready statistical modeling R packages. The models compile once during installation, the executables live inside the file systems of their respective packages, and users have the full power and convenience of &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;CmdStanR&lt;/code&gt;&lt;/a&gt; without any additional compilation. This approach saves time, allows R package developers to migrate from &lt;a href=&#34;https://mc-stan.org/rstan/&#34;&gt;&lt;code&gt;rstan&lt;/code&gt;&lt;/a&gt; to the more modern &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;CmdStanR&lt;/code&gt;&lt;/a&gt;, and fits well with centrally maintained R installations where users may have trouble installing their own packages, diagnosing compilation errors, and setting environment variables.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The website at &lt;a href=&#34;https://wlandau.github.io/instantiate/&#34;&gt;https://wlandau.github.io/instantiate/&lt;/a&gt; includes a &lt;a href=&#34;https://wlandau.github.io/instantiate/reference/index.html&#34;&gt;function reference&lt;/a&gt; and other documentation.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;instantiate&lt;/code&gt; uses &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;CmdStanR&lt;/code&gt;&lt;/a&gt;, and the directions below describe different ways to install all three. Regardless of the approach, the last step is always to install the &lt;code&gt;instantiate&lt;/code&gt; package using one of the R commands below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Release&lt;/td&gt; &#xA;   &lt;td&gt;CRAN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;instantiate&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;GitHub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;remotes::install_github(&#34;wlandau/instantiate&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Development&lt;/td&gt; &#xA;   &lt;td&gt;R-universe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;install.packages(&#34;instantiate&#34;, repos = &#34;https://wlandau.r-universe.dev&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;instantiate&lt;/code&gt; package uses environment variables to to control the installation of &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;. An environment variable is an operating system setting with a name and a value (both text strings). In R, there are two ways to set environment variables:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Sys.getenv()&lt;/code&gt;, which sets environment variables temporarily for the current R session.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;.Renviron&lt;/code&gt; text file in you home directory, which passes environment variables to all new R sessions. the &lt;a href=&#34;https://usethis.r-lib.org/reference/edit.html&#34;&gt;&lt;code&gt;edit_r_environ()&lt;/code&gt;&lt;/a&gt; function from the &lt;a href=&#34;https://usethis.r-lib.org/&#34;&gt;&lt;code&gt;usethis&lt;/code&gt;&lt;/a&gt; package helps.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The important environment variables for &lt;code&gt;instantiate&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;CMDSTAN&lt;/code&gt;: directory path to &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;. Used by the &lt;code&gt;&#34;fixed&#34;&lt;/code&gt; and &lt;code&gt;&#34;cmdstanr&#34;&lt;/code&gt; installation modes defined below.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CMDSTAN_INSTALL&lt;/code&gt;: the installation mode of &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;instantiate&lt;/code&gt;. If you manually set a value, it must be equal to &lt;code&gt;&#34;internal&#34;&lt;/code&gt;, &lt;code&gt;&#34;fixed&#34;&lt;/code&gt;, or &lt;code&gt;&#34;cmdstanr&#34;&lt;/code&gt;. Otherwise, you can leave &lt;code&gt;CMDSTAN_INSTALL&lt;/code&gt; unset (the empty string &lt;code&gt;&#34;&#34;&lt;/code&gt;). Each of these options is described below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Internal installation&lt;/h2&gt; &#xA;&lt;p&gt;This approach installs &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; inside the installed file system of &lt;code&gt;instantiate&lt;/code&gt; when the &lt;code&gt;instantiate&lt;/code&gt; package installs. This approach is useful for centrally maintained R installations where many users share a common set of R packages and system libraries, as is common in highly regulated industries. The procedure may be slower complete than the other options, and it is not amenable to &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt; workflows which upload R package libraries as archives, but it is the least complicated approach when it works. Steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;CMDSTAN_INSTALL&lt;/code&gt; environment variable to &lt;code&gt;&#34;internal&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;instantiate&lt;/code&gt; using &lt;code&gt;install.packages(&#34;instantiate&#34;)&lt;/code&gt; or similar.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fixed installation&lt;/h2&gt; &#xA;&lt;p&gt;In this approach, &lt;code&gt;instantiate&lt;/code&gt; commits itself permanently to a pre-existing installation of &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;. This is helpful for centrally maintained R installations, but unlike internal installation, fixed installation can leverage a pre-existing installation of &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;. This helps when your organization has a policy for maintaining non-R system libraries and already has &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; installed. Steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;CMDSTAN&lt;/code&gt; environment variable to the existing path to &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;instantiate&lt;/code&gt; using &lt;code&gt;install.packages(&#34;instantiate&#34;)&lt;/code&gt; or similar.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Beyond this point, you can change or unset the &lt;code&gt;CMDSTAN&lt;/code&gt; environment variable without changing where &lt;code&gt;instantiate&lt;/code&gt; looks for &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;. To redirect &lt;code&gt;instantiate&lt;/code&gt; to a different &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; path, set &lt;code&gt;CMDSTAN&lt;/code&gt; to the new path and then run &lt;code&gt;install.packages(&#34;instantiate&#34;)&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;cmdstanr&lt;/code&gt; installation&lt;/h2&gt; &#xA;&lt;p&gt;For maximum flexibility, &lt;code&gt;instantiate&lt;/code&gt; can let &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;cmdstanr&lt;/code&gt;&lt;/a&gt; control the path to &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;. This choice is the most practical approach for individual users and continuous integration workflows such as those on &lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;. The easiest way to set this up is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unset the &lt;code&gt;CMDSTAN&lt;/code&gt; environment variable.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;instantiate&lt;/code&gt; using &lt;code&gt;install.packages(&#34;instantiate&#34;)&lt;/code&gt; or similar.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- --&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;is not strictly necessary if you set &lt;code&gt;CMDSTAN_INSTALL=cmdstanr&lt;/code&gt; at runtime (after installation).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To install &lt;code&gt;instantiate&lt;/code&gt; as part of a &lt;a href=&#34;https://github.com/r-lib/actions&#34;&gt;GitHub Actions package check workflow&lt;/a&gt;,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generate your &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions&#34;&gt;workflow YAML file&lt;/a&gt; the usual way, e.g.&amp;nbsp;&lt;a href=&#34;https://usethis.r-lib.org/reference/github_actions.html&#34;&gt;&lt;code&gt;use_github_action(&#34;check-standard&#34;)&lt;/code&gt;&lt;/a&gt; for package checks or &lt;a href=&#34;https://usethis.r-lib.org/reference/github_actions.html&#34;&gt;&lt;code&gt;use_github_action(&#34;test-coverage&#34;)&lt;/code&gt;&lt;/a&gt; for test coverage. See &lt;a href=&#34;https://github.com/r-lib/actions&#34;&gt;https://github.com/r-lib/actions&lt;/a&gt; for a list of workflow archetypes.&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;extra-repositories: &#39;https://mc-stan.org/r-packages/&#39;&lt;/code&gt; under &lt;code&gt;with:&lt;/code&gt; inside the &lt;code&gt;uses: r-lib/actions/setup-r&lt;/code&gt; step. This is necessary while &lt;a href=&#34;https://github.com/stan-dev/cmdstanr&#34;&gt;&lt;code&gt;cmdstanr&lt;/code&gt;&lt;/a&gt; is not on CRAN.&lt;/li&gt; &#xA; &lt;li&gt;Add a manual workflow step to after between &lt;a href=&#34;https://github.com/r-lib/actions/tree/v2-branch/setup-r&#34;&gt;R setup&lt;/a&gt; and &lt;a href=&#34;https://github.com/r-lib/actions/tree/v2-branch/setup-r-dependencies&#34;&gt;package dependency setup&lt;/a&gt; to install &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;cmdstanr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The inserted YAML may look like this (although typically with more settings under &lt;code&gt;with:&lt;/code&gt; in &lt;code&gt;setup-r&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- uses: r-lib/actions/setup-r@v2&#xA;  with:&#xA;    extra-repositories: &#39;https://mc-stan.org/r-packages/&#39;&#xA;&#xA;- name: Install CmdStan&#xA;  shell: Rscript {0}&#xA;  run: |&#xA;    install.packages(&#34;cmdstanr&#34;, repos = c(&#34;https://mc-stan.org/r-packages/&#34;, getOption(&#34;repos&#34;)))&#xA;    cmdstanr::check_cmdstan_toolchain(fix = TRUE)&#xA;    cmdstanr::install_cmdstan()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Choosing the installation&lt;/h2&gt; &#xA;&lt;p&gt;At runtime, &lt;code&gt;instantiate&lt;/code&gt; automatically looks to the &lt;code&gt;CMDSTAN_INSTALL&lt;/code&gt; environment variable to find &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;CMDSTAN_INSTALL&lt;/code&gt; is not set (i.e.&amp;nbsp;if &lt;code&gt;Sys.getenv(&#34;CMDSTAN_INSTALL&#34;)&lt;/code&gt; is &lt;code&gt;&#34;&#34;&lt;/code&gt;) then &lt;code&gt;instantiate&lt;/code&gt; attempts to find &lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; at the internal installation, then the fixed installation, then using &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;cmdstanr&lt;/code&gt;&lt;/a&gt;, in that order. You can also control this choice using the &lt;code&gt;cmdstan_install&lt;/code&gt; argument to functions such as &lt;code&gt;stan_package_compile()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Packaging&lt;/h1&gt; &#xA;&lt;p&gt;These instructions explain how to create an R package with pre-compiled Stan models.&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;Begin with an R package with one or more Stan model files inside the &lt;code&gt;inst/stan/&lt;/code&gt; directory. &lt;code&gt;stan_package_create()&lt;/code&gt; is a convenient way to start.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;stan_package_create(path = &#34;package_folder&#34;)&#xA;#&amp;gt; Example package named &#34;example&#34; created at &#34;package_folder&#34;. Run stan_package_configure(path = &#34;package_folder&#34;) so that the built-in Stan model will compile when the package installs.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At minimum the package file structure should look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::dir_tree(&#34;package_folder&#34;)&#xA;#&amp;gt; package_folder&#xA;#&amp;gt; ├── DESCRIPTION&#xA;#&amp;gt; └── inst&#xA;#&amp;gt;     └── stan&#xA;#&amp;gt;         └── bernoulli.stan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configure the package so the Stan models compile during installation. &lt;code&gt;stan_package_configure()&lt;/code&gt; writes scripts &lt;code&gt;configure&lt;/code&gt; and &lt;code&gt;configure.win&lt;/code&gt; for this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;stan_package_configure(path = &#34;package_folder&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::dir_tree(&#34;package_folder&#34;)&#xA;#&amp;gt; package_folder&#xA;#&amp;gt; ├── DESCRIPTION&#xA;#&amp;gt; ├── configure&#xA;#&amp;gt; ├── configure.win&#xA;#&amp;gt; └── inst&#xA;#&amp;gt;     └── stan&#xA;#&amp;gt;         └── bernoulli.stan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the package at &lt;code&gt;package_folder&lt;/code&gt; just like you would any other R package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;package_folder&#34;, type = &#34;source&#34;, repos = NULL)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;A user can now run a model from the package without any additional compilation. See the documentation of &lt;a href=&#34;https://mc-stan.org/cmdstanr/index.html&#34;&gt;&lt;code&gt;CmdStanR&lt;/code&gt;&lt;/a&gt; to learn how to use &lt;a href=&#34;https://mc-stan.org/cmdstanr/index.html&#34;&gt;&lt;code&gt;CmdStanR&lt;/code&gt;&lt;/a&gt; model objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(example)&#xA;model &amp;lt;- stan_package_model(name = &#34;bernoulli&#34;, package = &#34;example&#34;)&#xA;print(model) # CmdStanR model object&#xA;#&amp;gt; data {&#xA;#&amp;gt;   int&amp;lt;lower=0&amp;gt; N;&#xA;#&amp;gt;   array[N] int&amp;lt;lower=0,upper=1&amp;gt; y;&#xA;#&amp;gt; }&#xA;#&amp;gt; parameters {&#xA;#&amp;gt;   real&amp;lt;lower=0,upper=1&amp;gt; theta;&#xA;#&amp;gt; }&#xA;#&amp;gt; model {&#xA;#&amp;gt;   theta ~ beta(1,1);  // uniform prior on interval 0,1&#xA;#&amp;gt;   y ~ bernoulli(theta);&#xA;#&amp;gt; }&#xA;fit &amp;lt;- model$sample(&#xA;  data = list(N = 10, y = c(1, 0, 1, 0, 1, 0, 0, 0, 0, 0)),&#xA;  refresh = 0,&#xA;  iter_warmup = 2000,&#xA;  iter_sampling = 4000&#xA;)&#xA;#&amp;gt; Running MCMC with 4 sequential chains...&#xA;#&amp;gt; &#xA;#&amp;gt; Chain 1 finished in 0.0 seconds.&#xA;#&amp;gt; Chain 2 finished in 0.0 seconds.&#xA;#&amp;gt; Chain 3 finished in 0.0 seconds.&#xA;#&amp;gt; Chain 4 finished in 0.0 seconds.&#xA;#&amp;gt; &#xA;#&amp;gt; All 4 chains finished successfully.&#xA;#&amp;gt; Mean chain execution time: 0.0 seconds.&#xA;#&amp;gt; Total execution time: 0.6 seconds.&#xA;&#xA;fit$summary()&#xA;#&amp;gt; # A tibble: 2 × 10&#xA;#&amp;gt;   variable   mean median    sd   mad     q5    q95  rhat ess_bulk ess_tail&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;num&amp;gt;  &amp;lt;num&amp;gt; &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;  &amp;lt;num&amp;gt;  &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;    &amp;lt;num&amp;gt;    &amp;lt;num&amp;gt;&#xA;#&amp;gt; 1 lp__     -8.15  -7.87  0.725 0.317 -9.60  -7.64   1.00    7365.    8498.&#xA;#&amp;gt; 2 theta     0.333  0.324 0.130 0.134  0.137  0.563  1.00    6229.    7560.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can write an exported user-side function in your R package to access the model. For example, you might store this code in a &lt;code&gt;R/model.R&lt;/code&gt; file in the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; @title Fit the Bernoulli model.&#xA;#&#39; @export&#xA;#&#39; @family models&#xA;#&#39; @description Fit the Bernoulli Stan model and return posterior summaries.&#xA;#&#39; @return A data frame of posterior summaries.&#xA;#&#39; @param y Numeric vector of Bernoulli observations (zeroes and ones).&#xA;#&#39; @param `...` Named arguments to the `sample()` method of CmdStan model&#xA;#&#39;   objects: &amp;lt;https://mc-stan.org/cmdstanr/reference/model-method-sample.html&amp;gt;&#xA;#&#39; @examples&#xA;#&#39; if (instantiate::stan_cmdstan_exists()) {&#xA;#&#39;   run_bernoulli_model(y = c(1, 0, 1, 0, 1, 0, 0, 0, 0, 0))&#xA;#&#39; }&#xA;run_bernoulli_model &amp;lt;- function(y, ...) {&#xA;  stopifnot(is.numeric(y) &amp;amp;&amp;amp; all(y &amp;gt;= 0 &amp;amp; y &amp;lt;= 1))&#xA;  model &amp;lt;- stan_package_model(name = &#34;bernoulli&#34;, package = &#34;mypackage&#34;)&#xA;  fit &amp;lt;- model$sample(data = list(N = length(y), y = y), ...)&#xA;  fit$summary()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In your package &lt;code&gt;DESCRIPTION&lt;/code&gt; file, list &lt;a href=&#34;https://mc-stan.org/r-packages/&#34;&gt;https://mc-stan.org/r-packages/&lt;/a&gt; in the &lt;code&gt;Additional_repositories:&lt;/code&gt; field (&lt;a href=&#34;https://github.com/paul-buerkner/brms/raw/5c09251daabd5416e3d47004cc6c62816dc53cfa/DESCRIPTION#L95-L96&#34;&gt;example in &lt;code&gt;brms&lt;/code&gt;&lt;/a&gt;). This step is only necessary while &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;cmdstanr&lt;/code&gt;&lt;/a&gt; is not yet on CRAN.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- --&gt; &#xA;&lt;pre&gt;&lt;code&gt;Additional_repositories:&#xA;    https://mc-stan.org/r-packages/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In your package &lt;code&gt;DESCRIPTION&lt;/code&gt; and &lt;code&gt;NAMESPACE&lt;/code&gt; files, import the &lt;code&gt;instantiate&lt;/code&gt; package and function &lt;code&gt;stan_package_model()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Write user-side statistical modeling functions which call the models in your package as mentioned above.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mc-stan.org/users/interfaces/cmdstan&#34;&gt;&lt;code&gt;CmdStan&lt;/code&gt;&lt;/a&gt; is too big for &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN&lt;/a&gt;, so &lt;code&gt;instantiate&lt;/code&gt; will not be able to access it there. So if you plan to submit your package to CRAN, please skip the appropriate code in your examples, vignettes, and tests when &lt;code&gt;instantiate::stan_cmdstan_exists()&lt;/code&gt; is &lt;code&gt;FALSE&lt;/code&gt;. Explicit &lt;code&gt;if()&lt;/code&gt; statements like the above one in the &lt;a href=&#34;https://roxygen2.r-lib.org/&#34;&gt;&lt;code&gt;roxygen2&lt;/code&gt;&lt;/a&gt; &lt;code&gt;@examples&lt;/code&gt; work for examples and vignettes. For tests, it is convenient to use &lt;a href=&#34;https://testthat.r-lib.org/reference/skip.html&#34;&gt;&lt;code&gt;testthat::skip_if_not()&lt;/code&gt;&lt;/a&gt;, e.g.&amp;nbsp;&lt;code&gt;skip_if_not(stan_cmdstan_exists())&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;a href=&#34;https://devguide.ropensci.org/ci.html&#34;&gt;continuous integration&lt;/a&gt; (e.g.&amp;nbsp;on &lt;a href=&#34;https://github.com/r-lib/actions&#34;&gt;GitHub Actions&lt;/a&gt;), please use &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;&lt;code&gt;cmdstanr&lt;/code&gt;&lt;/a&gt;-based installation as explained above, and tweak your workflow YAML files as explained in that section.&lt;/li&gt; &#xA; &lt;li&gt;For general information on R package development, please consult the free online book &lt;a href=&#34;https://r-pkgs.org/&#34;&gt;R Packages (2e)&lt;/a&gt; by &lt;a href=&#34;https://github.com/hadley&#34;&gt;Hadley Wickham&lt;/a&gt; and &lt;a href=&#34;https://github.com/jennybc&#34;&gt;Jennifer Bryan&lt;/a&gt;, as well as the official manual on &lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-exts.html&#34;&gt;Writing R Extensions&lt;/a&gt; by the R Core Team.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the &lt;code&gt;instantiate&lt;/code&gt; project is released with a &lt;a href=&#34;https://github.com/wlandau/instantiate/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;To cite package ‘instantiate’ in publications use:&#xA;&#xA;  Landau WM (2023). _instantiate: A Minimal CmdStan Client for R Packages_.&#xA;  https://wlandau.github.io/instantiate/, https://github.com/wlandau/instantiate.&#xA;&#xA;A BibTeX entry for LaTeX users is&#xA;&#xA;  @Manual{,&#xA;    title = {instantiate: A Minimal CmdStan Client for R Packages},&#xA;    author = {William Michael Landau},&#xA;    year = {2023},&#xA;    note = {https://wlandau.github.io/instantiate/,&#xA;https://github.com/wlandau/instantiate},&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>