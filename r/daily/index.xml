<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-06T01:35:54Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AllanCameron/geomtextpath</title>
    <updated>2023-01-06T01:35:54Z</updated>
    <id>tag:github.com,2023-01-06:/AllanCameron/geomtextpath</id>
    <link href="https://github.com/AllanCameron/geomtextpath" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create curved text paths in ggplot2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;geomtextpath &lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;137&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=geomtextpath&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/geomtextpath&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AllanCameron/geomtextpath/actions&#34;&gt;&lt;img src=&#34;https://github.com/AllanCameron/geomtextpath/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/AllanCameron/geomtextpath?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/AllanCameron/geomtextpath/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=geomtextpath&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/geomtextpath&#34; alt=&#34;metacran downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Create curved text in ggplot2&lt;/h2&gt; &#xA;&lt;p&gt;The existing text-based geom layers in ggplot2 (&lt;code&gt;geom_text&lt;/code&gt; and &lt;code&gt;geom_label&lt;/code&gt;) are ideal for the majority of plots, since typically textual annotations are short, straight and in line with the axes. However, there are some occasions when it is useful to have text follow a curved path. This may be to create or recreate a specific visual effect, or it may be to label a circular / polar plot in a more “natural” way. Direct and automatic text labels that adhere to their associated line can also provide a neat alternative to legends, without the need for specifying exact label positions, and with a lower risk of overplotting.&lt;/p&gt; &#xA;&lt;p&gt;Using geomtextpath, your text can follow any path, and will remain correctly spaced and angled, even if you change the size and aspect ratio of your plotting device. It does so without the need to redraw your plot each time, as shown in the &lt;a href=&#34;https://allancameron.github.io/geomtextpath/articles/geomtextpath.html&#34;&gt;introduction&lt;/a&gt; vignette.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install geomtextpath from CRAN using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;geomtextpath&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can install the latest development version of geomtextpath from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;AllanCameron/geomtextpath&#34;, quiet = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using &lt;strong&gt;geomtextpath&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, we simply call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(geomtextpath)&#xA;#&amp;gt; Loading required package: ggplot2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core functions in this package, &lt;code&gt;geom_textpath&lt;/code&gt; and &lt;code&gt;geom_labelpath&lt;/code&gt;, work like any other &lt;code&gt;geom&lt;/code&gt; in &lt;code&gt;ggplot2&lt;/code&gt;. They take their x co-ordinates, their y co-ordinates and their text label from an aesthetic mapping. At its most basic, this allows the &lt;code&gt;label&lt;/code&gt; to be plotted on an arbitrary path, as shown in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Set a consistent theme for the plots here&#xA;theme_set(theme_minimal() + &#xA;          theme(axis.line = element_line(size = 0.25, colour = &#34;gray75&#34;)))&#xA;&#xA;t &amp;lt;- seq(5, -1, length.out = 1000) * pi&#xA;&#xA;spiral &amp;lt;- data.frame(x    = sin(t) * 1:1000, &#xA;                     y    = cos(t) * 1:1000,&#xA;                     text = paste(&#34;Like a circle in a spiral,&#34;,&#xA;                                  &#34;like a wheel within a wheel,&#34;,&#xA;                                  &#34;never ending or beginning,&#34;,&#xA;                                  &#34;on an ever spinning reel&#34;)&#xA;                     )&#xA;&#xA;ggplot(spiral, aes(x, y, label = text)) +&#xA;  geom_textpath(size = 7, vjust = 2, text_only = TRUE) +&#xA;  coord_equal(xlim = c(-1500, 1500), ylim = c(-1500, 1500))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-spiral-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;If we want our text in a box, even when the text is curved, we can use &lt;code&gt;geom_labelpath&lt;/code&gt; instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;set.seed(5)&#xA;x  &amp;lt;- runif(5)&#xA;y  &amp;lt;- runif(5)&#xA;df &amp;lt;- data.frame(x = spline(1:5, x, xout = seq(1, 5, 1/100))$y,&#xA;                 y = spline(1:5, y, runif(5), xout = seq(1, 5, 1/100))$y,&#xA;                 z = &#34;A curved textbox on an arbitrary path&#34;)&#xA;&#xA;ggplot(df, aes(x, y, label = z)) + &#xA;  geom_labelpath(size = 5, fill = &#34;#F6F6FF&#34;, hjust = 0.55) +&#xA;  geom_point(data = data.frame(x = x, y = y, z = 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-intro_label-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;Of course, the point of this package is not to produce such graphical novelties, but to provide an easy and visually appealing way to present your data. Just as &lt;code&gt;geom_path&lt;/code&gt; is the foundation for several other geoms in &lt;code&gt;ggplot2&lt;/code&gt;, so too are &lt;code&gt;geom_textpath&lt;/code&gt; and &lt;code&gt;geom_labelpath&lt;/code&gt; the foundation of the other geoms in this package. The line-based geoms in &lt;code&gt;ggplot&lt;/code&gt; all have two equivalents in this package:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;ggplot geom&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Text equivalent&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;strong&gt;Label equivalent&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textpath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelpath&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_segment&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textsegment&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelsegment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_line&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_abline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textabline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelabline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_hline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_texthline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelhline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_vline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textvline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelvline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_curve&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textcurve&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelcurve&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_density&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textdensity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labeldensity&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_smooth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textsmooth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelsmooth&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_contour&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textcontour&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelcontour&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_density2d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textdensity2d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labeldensity2d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_sf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_textsf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;geom_labelsf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Each of these aims to replicate all the functionality of the equivalent &lt;code&gt;ggplot2&lt;/code&gt; function, but with direct text labels that follow the shape of the lines drawn.&lt;/p&gt; &#xA;&lt;p&gt;For the special case of &lt;code&gt;geom_sf&lt;/code&gt;, which draws different shapes based on the geometry objects drawn, the equivalent &lt;code&gt;geom_textsf&lt;/code&gt; and &lt;code&gt;geom_labelsf&lt;/code&gt;, will identify and label the linestring components (typically rivers and roads), without attempting to label polygons.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;geom_textline&lt;/code&gt; and &lt;code&gt;geom_labelline&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;geom_textline&lt;/code&gt; and &lt;code&gt;geom_labelline&lt;/code&gt; as a drop in for &lt;code&gt;geom_line&lt;/code&gt; if you want it directly labelled. Just pass the &lt;code&gt;label&lt;/code&gt; you want as an argument to &lt;code&gt;geom_textline&lt;/code&gt; (or if you have grouped data, you can pass the label as an aesthetic mapping). As in the other geoms here, you can specify the line’s appearance and the text’s appearance separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(pressure, aes(temperature, pressure)) +&#xA;  geom_textline(label = &#34;Mercury vapor pressure&#34;, size = 6, vjust = -0.5,&#xA;                linewidth = 1, linecolor = &#34;red4&#34;, linetype = 2, &#xA;                color = &#34;deepskyblue4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-textline_demo-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;&lt;code&gt;geom_textdensity&lt;/code&gt; and &lt;code&gt;geom_labeldensity&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These are the analogues of &lt;code&gt;geom_density&lt;/code&gt; that allows for smoothly curved labels on density plots&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(iris, aes(x = Sepal.Length, colour = Species, label = Species)) +&#xA;  geom_textdensity(size = 6, fontface = 2, hjust = 0.2, vjust = 0.3) +&#xA;  theme(legend.position = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-density_demo-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;Note that we have been able to “reclaim” the space normally taken up by the legend without leaving any ambiguity in the plot.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;geom_textsmooth&lt;/code&gt; and &lt;code&gt;geom_labelsmooth&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We can use these geoms to get labelled trend lines through scatterplots:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(iris, aes(x = Sepal.Length, y = Petal.Length, color = Species)) +&#xA;  geom_point(alpha = 0.3) +&#xA;  geom_labelsmooth(aes(label = Species), text_smoothing = 30, fill = &#34;#F6F6FF&#34;,&#xA;                method = &#34;loess&#34;, formula = y ~ x,&#xA;                size = 4, linewidth = 1, boxlinewidth = 0.3) +&#xA;  scale_colour_manual(values = c(&#34;forestgreen&#34;, &#34;deepskyblue4&#34;, &#34;tomato4&#34;)) +&#xA;  theme(legend.position = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-smooth-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;Note that by design, we have not included the standard error ribbon in these geoms because the naming of the &lt;code&gt;fill&lt;/code&gt; aesthetic would clash with the fill of the text boxes. If necessary, a standard &lt;code&gt;geom_smooth&lt;/code&gt; can be drawn first to obtain the ribbon.&lt;/p&gt; &#xA;&lt;h3&gt;Labelled contour lines&lt;/h3&gt; &#xA;&lt;p&gt;Adding labels to the level of your contour lines is now as simple as calling &lt;code&gt;geom_textcontour&lt;/code&gt; or &lt;code&gt;geom_labelcontour&lt;/code&gt; instead of &lt;code&gt;geom_contour&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;df &amp;lt;- expand.grid(x = seq(nrow(volcano)), y = seq(ncol(volcano)))&#xA;df$z &amp;lt;- as.vector(volcano)&#xA;&#xA;ggplot(df, aes(x, y, z = z)) + &#xA;  geom_contour_filled(bins = 6, alpha = 0.6) + &#xA;  geom_textcontour(bins = 6, size = 2.5, straight = TRUE) + &#xA;  scale_fill_manual(values = terrain.colors(11)) + &#xA;  theme(legend.position = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-volcano-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;We also have &lt;code&gt;geom_textdensity2d&lt;/code&gt; and &lt;code&gt;geom_labeldensity2d&lt;/code&gt; for the common use case of 2D density contours:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(1)&#xA;&#xA;df  &amp;lt;- data.frame(x = rnorm(100), y = rnorm(100))&#xA;&#xA;ggplot(df, aes(x, y)) + &#xA;  geom_textdensity2d()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-density2d-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;&lt;code&gt;geom_textsf&lt;/code&gt; and &lt;code&gt;geom_labelsf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;These geoms behave much the same way as &lt;code&gt;geom_sf&lt;/code&gt;, except linestrings such as rivers and roads can be given (curved) text labels:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;library(sf)&#xA;#&amp;gt; Linking to GEOS 3.10.2, GDAL 3.4.2, PROJ 8.2.1; sf_use_s2() is TRUE&#xA;&#xA;df &amp;lt;- data.frame(x = c(-4.2518, -3.1883), &#xA;                 y = c(55.8642, 55.9533),&#xA;                 label = c(&#34;Glasgow&#34;, &#34;Edinburgh&#34;))&#xA;&#xA;ggplot(data = df) +&#xA;  geom_textsf(data = waterways,&#xA;              aes(label = name), text_smoothing = 65, linecolour = &#34;#8888B3&#34;, &#xA;              color = &#34;gray30&#34;, vjust = -0.8, fill = &#34;#E6F0B3&#34;, &#xA;              alpha = 0.8, fontface = 3, size = 3) + &#xA;  geom_point(aes(x, y), data = df, color = &#34;gray50&#34;, size = 3) + &#xA;  geom_textpath(aes(x, y, label = label), color = &#34;gray50&#34;,&#xA;                hjust = c(-0.2, 1.2)) +&#xA;  theme(panel.grid = element_line()) + &#xA;  lims(x = c(-4.7, -3), y = c(55.62, 56.25))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-geom_textsf-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;Reference lines&lt;/h3&gt; &#xA;&lt;p&gt;Often, a reference line added to a plot requires a text annotation. We can do this directly with &lt;code&gt;geom_textabline&lt;/code&gt;, &lt;code&gt;geom_textvline&lt;/code&gt; and &lt;code&gt;geom_texthline&lt;/code&gt;, or their text-box equivalents &lt;code&gt;geom_labelabline&lt;/code&gt;, &lt;code&gt;geom_labelvline&lt;/code&gt; and &lt;code&gt;geom_labelhline&lt;/code&gt;. Although such lines aren’t curved, there are some benefits to using the &lt;code&gt;geomtextpath&lt;/code&gt; functions if a labelled reference line is required: only a single call is needed, co-ordinates are not required for the text label, the text can be put in-line with an appropriate break in the line automatically, and the label will orientate and curve appropriately in polar co-ordinates.&lt;/p&gt; &#xA;&lt;p&gt;This example shows all three text-based reference line geoms:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(mtcars, aes(mpg, disp)) + &#xA;  geom_point() + &#xA;  geom_texthline(yintercept = 200, label = &#34;displacement threshold&#34;, &#xA;                 hjust = 0.8, color = &#34;red4&#34;) +&#xA;  geom_textvline(xintercept = 20, label = &#34;consumption threshold&#34;, hjust = 0.8,&#xA;                 linetype = 2, vjust = 1.3, color = &#34;blue4&#34;) +&#xA;  geom_textabline(slope = 15, intercept = -100, label = &#34;partition line&#34;, &#xA;                  color = &#34;green4&#34;, hjust = 0.6, vjust = -0.2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-vline-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;In addition to the straight reference lines, there is also a pair of geom layers for curved reference lines: &lt;code&gt;geom_textcurve&lt;/code&gt; and &lt;code&gt;geom_labelcurve&lt;/code&gt;. These are typically used for annotations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(Activity = c(&#34;Work&#34;, &#34;Play&#34;), Happiness = c(0.5, 0.7))&#xA;&#xA;ggplot(df, aes(Activity, Happiness)) + &#xA;  geom_col(fill = &#34;gold&#34;, color = &#34;gray50&#34;) + &#xA;  geom_textcurve(data = data.frame(x = 1, xend = 2, y = 0.72, yend = 0.52), &#xA;                 aes(x, y, xend = xend, yend = yend), hjust = 0.35, ncp = 20,&#xA;                 curvature = -0.8, label = &#34;significant difference&#34;) +&#xA;  geom_point(aes(y = Happiness + 0.02)) +&#xA;  scale_y_continuous(limits = c(0, 1))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-curve-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;Arbitrary &lt;code&gt;stat&lt;/code&gt; transformations&lt;/h3&gt; &#xA;&lt;p&gt;Other “stat” transformations can be used directly on &lt;code&gt;geom_textpath&lt;/code&gt; and &lt;code&gt;geom_labelpath&lt;/code&gt;. For example, functions can be labelled with paths created in &lt;code&gt;stat_function&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() + &#xA;  xlim(c(0, 1)) + &#xA;  stat_function(geom = &#34;textpath&#34;,&#xA;                fun = dgamma, color = &#34;red4&#34;,&#xA;                label = &#34;gamma distribution with shape = 1&#34;,&#xA;                size = 5, vjust = -0.2, hjust = 0.1, args = list(shape = 1)) +&#xA;  stat_function(geom = &#34;textpath&#34;,&#xA;                fun = dgamma, color = &#34;blue4&#34;,&#xA;                label = &#34;gamma distribution with shape = 2&#34;,&#xA;                size = 5, vjust = -0.2, hjust = 0.1, args = list(shape = 2)) +&#xA;  stat_function(geom = &#34;textpath&#34;,&#xA;                fun = dgamma, color = &#34;green4&#34;,&#xA;                label = &#34;gamma distribution with shape = 3&#34;,&#xA;                size = 5, vjust = -0.2, hjust = 0.1, args = list(shape = 3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-stat_function-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;Controlling text position&lt;/h3&gt; &#xA;&lt;p&gt;Just like &lt;code&gt;geom_text&lt;/code&gt;, the &lt;code&gt;vjust&lt;/code&gt; parameter controls vertical justification of the text, though in &lt;code&gt;geom_textpath&lt;/code&gt; and its related geoms, the text is justified relative to the path rather than a single point. If the &lt;code&gt;vjust&lt;/code&gt; parameter moves the text above or below the line, the line is automatically “filled in”.&lt;/p&gt; &#xA;&lt;p&gt;For short text labels applied to long paths, we need a parameter to control how far along the path the text is placed. For this we use the horizontal justification (&lt;code&gt;hjust&lt;/code&gt;) parameter. This can be numeric (0 to 1), or can accept position descriptions such as “xmid”, “ymax”, or “auto”.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of text justified above the line of the path using a small negative value of &lt;code&gt;vjust&lt;/code&gt;, and the &lt;code&gt;hjust&lt;/code&gt; set to “ymax” to place the labels over the peak of each curve:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- ggplot(iris, aes(x = Sepal.Length, colour = Species, label = Species)) +&#xA;       theme(legend.position = &#34;none&#34;)&#xA;&#xA;p + &#xA;  geom_textdensity(size = 6, fontface = 2, spacing = 50,&#xA;                   vjust = -0.2, hjust = &#34;ymax&#34;) +&#xA;  ylim(c(0, 1.3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-density_vjust-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;You can read more about text positioning in the &lt;a href=&#34;https://allancameron.github.io/geomtextpath/articles/aesthetics.html&#34;&gt;aesthetics vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Smoothing text while preserving path details&lt;/h3&gt; &#xA;&lt;p&gt;Some lines may be too “noisy” or too angular for direct labels to remain legible if they adhere too closely to the line. We have therefore added the ability to smooth the text label while keeping the path unaltered, using a &lt;code&gt;text_smoothing&lt;/code&gt; parameter, which can be set from 0 (none) to 100 (maximum).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;ggplot(economics, aes(date, unemploy)) +&#xA;  geom_textline(linecolour = &#34;grey&#34;, size = 4, vjust = -1.5,&#xA;                label = &#34;1990s Decline&#34;, text_smoothing = 30)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-smooth2-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;&lt;code&gt;Plotmath&lt;/code&gt; support&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use plotmath expressions you can do so much as you would with &lt;code&gt;geom_text&lt;/code&gt;. Just tell &lt;code&gt;geom_textpath&lt;/code&gt; that your labels should be parsed using &lt;code&gt;parse = TRUE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lab &amp;lt;- expression(paste(&#34;y = &#34;, frac(1, sigma*sqrt(2*pi)), &#34; &#34;,&#xA;                            plain(e)^{frac(-(x-mu)^2, 2*sigma^2)}))&#xA;&#xA;df &amp;lt;- data.frame(x = seq(-2, 0, len = 100),&#xA;                 y = dnorm(seq(-2, 0, len = 100)),&#xA;                 z = as.character(lab))&#xA;&#xA;ggplot(df, aes(x, y)) + &#xA;  geom_textpath(aes(label = z), vjust = -0.2, hjust = 0.1, size = 8, parse = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-plotmath-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;Note that, due to the way the &lt;code&gt;grid&lt;/code&gt; package draws plotmath expressions, all plotmath labels will be straight rather than curved. However, as in the example above, they will still be angled according to the gradient of the curve.&lt;/p&gt; &#xA;&lt;h3&gt;Rich text support&lt;/h3&gt; &#xA;&lt;p&gt;The geoms here also feature richtext support. If you want your text labels to be interpreted as rich text, simply pass &lt;code&gt;rich = TRUE&lt;/code&gt; as a parameter in the call to the geom layer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;lab &amp;lt;- paste(&#34;&amp;lt;span style=&#39;color:gray30;font-size:10pt&#39;&amp;gt;Plasma&amp;lt;/span&amp;gt;&#34;,&#xA;             &#34;&amp;lt;strong style=&#39;color:red4;font-size:10pt&#39;&amp;gt;Indometacin&amp;lt;/strong&amp;gt;&#34;,&#xA;             &#34;&amp;lt;span style =&#39;color:gray30;font-size:10pt&#39;&amp;gt;Concentration &amp;lt;/span&amp;gt;&#34;,&#xA;             &#34;&amp;lt;i style=&#39;color:gray50;font-size:8pt&#39;&amp;gt;&amp;lt;sub&amp;gt;(\u03BCg/l)&amp;lt;/sub&amp;gt;&amp;lt;/i&amp;gt;&#34;)&#xA;&#xA;ggplot(Indometh, aes(time, conc, group = 1)) + &#xA;  geom_textsmooth(formula = y ~ x, method = loess, &#xA;                  label = lab, rich = TRUE, vjust = -0.5, size = 4.5, &#xA;                  text_smoothing = 40, linecolor = &#34;red4&#34;) + &#xA;  xlim(c(0, 4))&#xA;#&amp;gt; Warning: Removed 18 rows containing non-finite values (stat_smooth).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-richtext-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;Text paths in polar coordinates&lt;/h3&gt; &#xA;&lt;p&gt;Straight text paths in Cartesian coordinates become curved in polar coordinates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(x = c(1, 1000), y = 1, text = &#34;This is a perfectly flat label&#34;)&#xA;&#xA;p &amp;lt;- ggplot(df, aes(x, y, label = text)) +&#xA;  geom_labelpath(size = 6, text_only = TRUE, fill = &#34;#F6F6FF&#34;) +&#xA;  ylim(c(0.9, 1.1))&#xA;&#xA;p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-coords_cartesian-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + coord_polar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-coords_polar-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;We have included the ability to have &lt;em&gt;point-like&lt;/em&gt; text paths. While this sounds paradoxical, it means that &lt;code&gt;geom_textpath&lt;/code&gt; can be used as a drop-in for &lt;code&gt;geom_text&lt;/code&gt;, and will behave in much the same way, with the exception that the text will automatically curve in polar co-ordinates. Compare &lt;code&gt;geom_textpath&lt;/code&gt; used in Cartesian co-ordinates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(x = 1:4, y = c(4, 7, 6, 3),&#xA;                 color = c(&#34;royalblue&#34;, &#34;orangered&#34;, &#34;deepskyblue4&#34;, &#34;violet&#34;))&#xA;&#xA;p &amp;lt;- ggplot(df, aes(x, y, color = color, label = color)) +&#xA;       geom_point(size = 1.5) +&#xA;       geom_textpath(size = 8, hjust = -0.1) +&#xA;       scale_color_identity() +&#xA;       lims(x = c(0, 6), y = c(0, 8)) &#xA;&#xA;p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-pointlike-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;And in polar co-ordinates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p + coord_polar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-polar_compare-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;By default, any labels that would have been upside down (or even mostly upside down) are automatically flipped to be facing in a legible direction. This can be turned off using &lt;code&gt;upright = FALSE&lt;/code&gt; in the call to &lt;code&gt;geom_textpath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can even construct diagrams or infographics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- data.frame(x1 = c(seq(0, 10/6 * pi, pi/3),&#xA;                  seq(0, 10/6 * pi, 2*pi/3)),&#xA;           y1 = c(rep(2, 6), rep(-1, 3)),&#xA;           x2 = c(seq(0, 10/6 * pi, pi/3)  + pi/3,&#xA;                  seq(0, 10/6 * pi, 2*pi/3) + 2*pi/3),&#xA;           y2 = c(rep(4, 6), rep(2, 3)),&#xA;           group = letters[c(1:6, (1:3) * 2)],&#xA;           alpha = c(rep(1, 6), rep(0.4, 3))) |&amp;gt;&#xA;  ggplot(aes(x1, y1)) +&#xA;  geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2, fill = group,&#xA;                alpha = alpha),&#xA;            color = &#34;white&#34;, size = 2) +&#xA;  geom_textpath(data = data.frame(x1 = seq(0, 2 * pi, length = 300),&#xA;           y1 = rep(0.5, 300),&#xA;           label = rep(c(&#34;stats&#34;, &#34;effects&#34;, &#34;polar&#34;), each = 100)),&#xA;           aes(label = label), linetype = 0, size = 8,&#xA;           upright = TRUE) +&#xA;  geom_textpath(data = data.frame(x1 = seq(0, 2 * pi, length = 300),&#xA;           y1 = rep(3, 300),&#xA;           label = rep(c(&#34;density&#34;, &#34;smooth&#34;, &#34;unique&#34;, &#34;organic&#34;,&#xA;                         &#34;easy to use&#34;, &#34;automatic&#34;), &#xA;                       each = 50)),&#xA;           aes(label = label), linetype = 0, size = 4.6, color = &#34;white&#34;,&#xA;           upright = TRUE) +&#xA;  scale_y_continuous(limits = c(-5, 4)) +&#xA;  scale_x_continuous(limits = c(0, 2*pi)) +&#xA;  scale_fill_manual(values = c(&#34;deepskyblue3&#34;, &#34;deepskyblue4&#34;,&#xA;                               &#34;green3&#34;, &#34;green4&#34;,&#34;tomato&#34;, &#34;tomato2&#34;)) +&#xA;  scale_alpha_identity() +&#xA;  theme_void() +&#xA;  theme(legend.position = &#34;none&#34;) &#xA;&#xA;p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-fancy_cartesian-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;That flip nicely to polar co-ordinates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;p + coord_polar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-fancy_polar-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h2&gt;&lt;code&gt;coord_curvedpolar&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Another function exported from this package is &lt;code&gt;coord_curvedpolar&lt;/code&gt;. This behaves identically to &lt;code&gt;coord_polar&lt;/code&gt;, except that the circumferential axis labels are curved. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;clock &amp;lt;- function(x) {&#xA;  &#xA;  hours &amp;lt;- c(rep(x[1] %% 12 + tail(x, 1) / 60, 2), 0, 3.5)&#xA;  minutes &amp;lt;- c(rep(tail(x, 1)/5, 2), 0, 5)&#xA;&#xA;  ggplot(as.data.frame(rbind(hours, minutes)), aes(V1, V3)) + &#xA;      geom_segment(aes(xend = V2, yend = V4), &#xA;                   size = c(3, 2), lineend = &#34;round&#34;) +&#xA;      geom_point(x = 0, y = 0, size = 6) +&#xA;      scale_x_continuous(limits = c(0, 12), breaks = 1:12,&#xA;                         label = as.roman) +&#xA;      scale_y_continuous(limits = c(0, 6), expand = c(0, 0)) +&#xA;      theme_void() + &#xA;      theme(axis.text.x = element_text(size = 25, face = 2),&#xA;            plot.margin = margin(20, 20, 20, 20))&#xA;}&#xA;&#xA;clock(19:15) + coord_curvedpolar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-coord_curvedpolar-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;p&gt;This can be useful to achieve a particular aesthetic effect (as above), but can also be of practical utility when axis labels are long, which can produce some problems in standard &lt;code&gt;coord_polar&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;df &amp;lt;- data.frame(x = c(&#34;A long axis label&#34;, &#34;Another long label&#34;,&#xA;                       &#34;The longest label of all&#34;, &#34;Yet another label&#34;),&#xA;                 y = c(8, 6, 10, 4))&#xA;&#xA;p &amp;lt;- ggplot(df, aes(x, y, fill = x)) + &#xA;      geom_col(width = 0.5) +&#xA;      scale_fill_brewer(type = &#34;qual&#34;) +&#xA;      theme(axis.text.x = element_text(size = 15),&#xA;            legend.position = &#34;none&#34;)&#xA;&#xA;p + coord_curvedpolar()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AllanCameron/geomtextpath/main/man/figures/README-coord_curvedpolar2-1.png&#34; width=&#34;100%&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;Not every graphics device renders text equally well. In particular, the default Windows graphics device makes text look horrible, especially when placed on paths. To get the best looking results for raster graphics, we recommend the &lt;a href=&#34;https://ragg.r-lib.org/&#34;&gt;{ragg}&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;There are limitations inherent in the plotting of text elements in ggplot due to the way that the underlying &lt;code&gt;grid&lt;/code&gt; graphics handles text. A text string is dealt with as a zero-width object, and therefore the rotation and spacing of the letters making up the string can only be dealt with by treating each letter separately.&lt;/p&gt; &#xA;&lt;p&gt;It is important to realise that the letters are only rotated, and do not undergo any change in shape. Thus, for example, large text appearing on convex curves will not be deformed so that individual letters are narrower at the bottom and wider at the top. Doing so would require reinterpreting the letters as polygons, which would likely cause more problems than it would solve.&lt;/p&gt; &#xA;&lt;p&gt;Other paths may have points of tight curvature, and setting an &lt;code&gt;offset&lt;/code&gt; / &lt;code&gt;vjust&lt;/code&gt; for the text that is larger than the distance to the focus point of that curve will produce odd effects. The package tries to detect and warn the user when this happens, and will suggest remedies.&lt;/p&gt; &#xA;&lt;h3&gt;Acknowledgments&lt;/h3&gt; &#xA;&lt;p&gt;The authors would like to thank &lt;a href=&#34;https://github.com/byteit101&#34;&gt;Patrick Plenefisch&lt;/a&gt; for posting the &lt;a href=&#34;https://stackoverflow.com/questions/69867669/is-there-way-in-ggplot2-to-place-text-on-a-curved-path&#34;&gt;Stackoverflow question&lt;/a&gt; that prompted them to develop this package, and for raising some important issues early in its development.&lt;/p&gt; &#xA;&lt;p&gt;Of course this package wouldn’t be possible without the brilliant &lt;a href=&#34;https://github.com/tidyverse/ggplot2&#34;&gt;ggplot2&lt;/a&gt; package. Although we’re grateful to all the developers on the tidyverse team for creating and maintaining such useful open-source software, we’d like to give particular thanks to &lt;a href=&#34;https://github.com/clauswilke&#34;&gt;Claus Wilke&lt;/a&gt; for also creating the excellent &lt;a href=&#34;https://wilkelab.org/gridtext/&#34;&gt;gridtext&lt;/a&gt; package from which &lt;code&gt;geomtextpath&lt;/code&gt; borrows, and &lt;a href=&#34;https://github.com/thomasp85&#34;&gt;Thomas Lin Pedersen&lt;/a&gt;, whose &lt;a href=&#34;https://github.com/r-lib/textshaping&#34;&gt;textshaping&lt;/a&gt; package was integral to getting the mechanism working.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rafapereirabr/bot_esquinadobrasil</title>
    <updated>2023-01-06T01:35:54Z</updated>
    <id>tag:github.com,2023-01-06:/rafapereirabr/bot_esquinadobrasil</id>
    <link href="https://github.com/rafapereirabr/bot_esquinadobrasil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;todos_setores&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Twitter bot: Cada esquina do Brasil &lt;img align=&#34;right&#34; src=&#34;https://www.urbandemographics.org/img/package_logo/esquinadobrasil_logo.png&#34; alt=&#34;logo&#34; width=&#34;250&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rafapereirabr/todos_setores/actions&#34;&gt;&lt;img src=&#34;https://github.com/rafapereirabr/todos_setores/actions/workflows/bot-schedule.yaml/badge.svg?sanitize=true&#34; alt=&#34;Passing check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/V.-0.1.0-yellow&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/V.-0.1.0-yellow&#34; alt=&#34;versao&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://twitter.com/esquinadobrasil&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%40esquinadobrasil-blue?style=flat&amp;amp;labelColor=1DA1F2&amp;amp;color=1DA1F2&amp;amp;logo=twitter&amp;amp;logoColor=white&#34; alt=&#34;“Follow&#34; me&#34; height=&#34;22&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Twitter bot &lt;span&gt;🤖&lt;/span&gt; que posta imagens de satélite de todos setores censitários do Brasil. Um novo setor a cada 15 minutos. A ordem dos setores foi sorteada aleatoriamente. O objetivo com esse bot é &lt;del&gt;procrastinar&lt;/del&gt; levar as pessoas a &#34;visitar&#34; cada esquina desse imenso Brasil, em toda sua beleza e também desigualdade. O propósito também é educacional para despertar a curiosidade e interesse sobre ciências de dados espaciais e programação em R.&lt;/p&gt; &#xA;&lt;p&gt;Bot criado por &lt;a href=&#34;https://www.urbandemographics.org/about/&#34;&gt;Rafael H. M. Pereira&lt;/a&gt; (&lt;a href=&#34;https://twitter.com/UrbanDemog&#34;&gt;@UrbanDemog&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;Dados:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setores censitários (geometria, estimativas de população e bairro): Censo Demográfico de 2010, IBGE&lt;/li&gt; &#xA; &lt;li&gt;Imagens de Satélite: Microsoft VirtualEarth, via GDAL Web Map Services&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Código e automação&lt;/h1&gt; &#xA;&lt;p&gt;O bot foi escrito em R usando os seguintes pacotes / ferramentas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ipeagit.github.io/geobr/&#34;&gt;{geobr}&lt;/a&gt; para baixar dados de setores censitários&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hypertidy/gdalio&#34;&gt;{gdalio}&lt;/a&gt; para baixar imagens de satélite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r-spatial.github.io/sf/index.html&#34;&gt;{sf}&lt;/a&gt; para operações em dados espaciais&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rspatial.github.io/terra/index.html&#34;&gt;{terra}&lt;/a&gt; para visualizar os dados&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/rtweet/&#34;&gt;{rtweet}&lt;/a&gt; para postagens no Twitter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt; para automação&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Inspirado em outros bots:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/everytract&#34;&gt;@everytract&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/italiancomuni&#34;&gt;@italiancomuni&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/londonmapbot&#34;&gt;@londonmapbot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/spainmunic&#34;&gt;@spainmunic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>