<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:39:06Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>posit-dev/r-shinylive</title>
    <updated>2023-09-17T01:39:06Z</updated>
    <id>tag:github.com,2023-09-17:/posit-dev/r-shinylive</id>
    <link href="https://github.com/posit-dev/r-shinylive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shinylive&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/posit-dev/r-shinylive/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/posit-dev/r-shinylive/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=shinylive&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/shinylive&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;!-- [py-shinylive Documentation site](https://shiny.rstudio.com/py/docs/shinylive.html) --&gt; &#xA;&lt;p&gt;This repository contains an R package for exporting Shiny applications as Shinylive applications.&lt;/p&gt; &#xA;&lt;p&gt;This repository is not the same as the &lt;a href=&#34;https://github.com/posit-dev/shinylive&#34;&gt;https://github.com/posit-dev/shinylive&lt;/a&gt; repository. That repository is used to generate the Shinylive assets distribution, which is a bundle containing HTML, JavaScript, CSS, and wasm files. The R package in this repository downloads the assets and uses them to create Shinylive applications.&lt;/p&gt; &#xA;&lt;p&gt;Twin shinylive python package: &lt;a href=&#34;https://github.com/posit-dev/py-shinylive&#34;&gt;https://github.com/posit-dev/py-shinylive&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of shinylive from GitHub via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;posit-dev/r-shinylive&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;(Optional) Create a basic shiny application in a new directory &lt;code&gt;myapp/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Copy &#34;Hello World&#34; from `{shiny}`&#xA;system.file(&#34;examples&#34;, &#34;01_hello&#34;, package=&#34;shiny&#34;) |&amp;gt;&#xA;    fs::dir_copy(&#34;myapp&#34;, overwrite = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have a Shiny application in &lt;code&gt;myapp/&lt;/code&gt; and would like turn it into a Shinylive app in &lt;code&gt;site/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinylive::export(&#34;myapp&#34;, &#34;site&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can preview the application by running a web server and visiting it in a browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;httpuv::runStaticServer(&#34;site/&#34;, port=8008)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, you can deploy the &lt;code&gt;site/&lt;/code&gt; directory to any static web hosting service.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple applications&lt;/h3&gt; &#xA;&lt;p&gt;If you have multiple applications that you want to put on the same site, you can export them to subdirectories of the site, so that they can all share the same Shinylive assets. You can do this with the &lt;code&gt;--subdir&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinylive::export(&#34;myapp1&#34;, &#34;site&#34;, subdir = &#34;app1&#34;)&#xA;shinylive::export(&#34;myapp2&#34;, &#34;site&#34;, subdir = &#34;app2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Shinylive asset management&lt;/h2&gt; &#xA;&lt;p&gt;Each version of the Shinylive R package is associated with a particular version of the Shinylive web assets. (&lt;a href=&#34;https://github.com/posit-dev/shinylive/releases&#34;&gt;See the releases here&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;To see which version of this R package you have, and which version of the web assets it is associated with, simply run &lt;code&gt;shinylive::assets_info()&lt;/code&gt; in your R session. It will also show which asset versions you have already installed locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinylive::assets_info()&#xA;#&amp;gt; shinylive R package version:  0.0.1&#xA;#&amp;gt; shinylive web assets version: 0.1.7&#xA;#&amp;gt;&#xA;#&amp;gt; Local cached shinylive asset dir:&#xA;#&amp;gt;     /Users/username/Library/Caches/shinylive&#xA;#&amp;gt;&#xA;#&amp;gt; Installed assets:&#xA;#&amp;gt;     /Users/username/Library/Caches/shinylive/0.1.7&#xA;#&amp;gt;     /Users/username/Library/Caches/shinylive/0.1.6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The web assets will be downloaded and cached the first time you run &lt;code&gt;shinylive::export()&lt;/code&gt;. Or, you can run &lt;code&gt;shinylive::assets_download()&lt;/code&gt; to fetch them manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinylive::assets_download(&#34;0.1.5&#34;)&#xA;#&amp;gt; Downloading shinylive v0.1.5...&#xA;#&amp;gt; Unzipping to /Users/username/Library/Caches/shinylive/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can remove old versions with &lt;code&gt;shinylive::assets_cleanup()&lt;/code&gt;. This will remove all versions except the one that the Python package wants to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinylive::assets_cleanup()&#xA;#&amp;gt; Keeping version 0.1.7&#xA;#&amp;gt; Removing /Users/username/Library/Caches/shinylive/0.1.6&#xA;#&amp;gt; Removing /Users/username/Library/Caches/shinylive/0.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To remove a specific version, use &lt;code&gt;shinylive::assets_remove()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinylive::assets_remove(&#34;0.1.5&#34;)&#xA;#&amp;gt; Removing /Users/username/Library/Caches/shinylive/0.1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A single quarto document can have both &lt;code&gt;shinylive-python&lt;/code&gt; and &lt;code&gt;shinylive-r&lt;/code&gt; code blocks, but &lt;code&gt;shinylive-r&lt;/code&gt; code block must come first. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Details: Only the first shinylive code block will be initialized. Currently &lt;code&gt;posit-dev/shinylive-py&lt;/code&gt; does not know about &lt;code&gt;shinylive-r&lt;/code&gt; code blocks.&lt;/li&gt; &#xA;   &lt;li&gt;Details: This should be (naturally) fixed in the next release of &lt;code&gt;posit-dev/shinylive-py&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The current R common files contain files for python&#39;s pyodide and pyright. These should be removed in the future to make smaller bundles / faster loading.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Setup - shinylive assets&lt;/h3&gt; &#xA;&lt;p&gt;Works with latest GitHub version of &lt;a href=&#34;https://github.com/posit-dev/shinylive/&#34;&gt;&lt;code&gt;posit-dev/shinylive&lt;/code&gt;&lt;/a&gt; (&amp;gt;= v&lt;code&gt;0.2.0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Before linking the shinylive assets to the asset cache folder, you must first build the shiny live assets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## In your shinylive assets repo&#xA;# cd PATH/TO/posit-dev/shinylive&#xA;&#xA;# Generate the shiny live assets&#xA;make submodules all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then link the assets (using the &lt;code&gt;{shinylive}&lt;/code&gt; R package) to the asset cache folder so that changes to the assets are automatically in your cached shinylive assets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Link to your local shinylive repo&#xA;shinylive::assets_install_link(&#34;PATH/TO/posit-dev/shinylive&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup - quarto&lt;/h3&gt; &#xA;&lt;p&gt;In your quarto project, call the following lines in the terminal to install the updated shinylive quarto extension:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go to the quarto project directory&#xA;cd local/quarto&#xA;&#xA;# Install the updated shinylive quarto extension&#xA;quarto add quarto-ext/shinylive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the extension will used the installed &lt;code&gt;{shinylive}&lt;/code&gt; R package. To use the local &lt;code&gt;{shinylive}&lt;/code&gt; R package, run the following in your R session to update the quarto extension locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;if (!require(&#34;pkgload&#34;)) install.packages(&#34;pkgload&#34;)&#xA;&#xA;shinylive_lua &amp;lt;- file.path(&#34;local&#34;, &#34;quarto&#34;, &#34;_extensions&#34;, &#34;quarto-ext&#34;, &#34;shinylive&#34;, &#34;shinylive.lua&#34;)&#xA;shinylive_lua |&amp;gt;&#xA;    brio::read_file() |&amp;gt;&#xA;    sub(&#xA;        pattern = &#34;shinylive::quarto_ext()&#34;,&#xA;        replacement = &#34;pkgload::load_all(&#39;../../&#39;, quiet = TRUE); shinylive::quarto_ext()&#34;,&#xA;        fixed = TRUE&#xA;    ) |&amp;gt;&#xA;    brio::write_file(shinylive_lua)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execute - &lt;code&gt;export()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Export a local app to a directory and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pkgload::load_all()&#xA;# Delete prior&#xA;unlink(&#34;local/shiny-apps-out/&#34;)&#xA;export(&#34;local/shiny-apps/simple-r&#34;, &#34;local/shiny-apps-out&#34;)&#xA;#&amp;gt; Run the following in an R session to serve the app:&#xA;#&amp;gt;   httpuv::runStaticServer(&#34;local/shiny-apps-out&#34;, port=8008)&#xA;&#xA;# Host the local directory&#xA;httpuv::runStaticServer(&#34;local/shiny-apps-out&#34;, port=8008)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>10XGenomics/loupeR</title>
    <updated>2023-09-17T01:39:06Z</updated>
    <id>tag:github.com,2023-09-17:/10XGenomics/loupeR</id>
    <link href="https://github.com/10XGenomics/loupeR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Convert Seurat objects to 10x Genomics Loupe files.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/10XGenomics/loupeR/main/tools/doc/logo.svg?sanitize=true&#34; width=&#34;50%&#34; alt=&#34;loupeR - convert Seurat objects to Loupe files&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/10XGenomics/loupeR/actions?query=workflow%3Acheck&#34;&gt;&lt;img src=&#34;https://github.com/10XGenomics/loupeR/actions/workflows/check.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/10XGenomics/loupeR/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/latest_release-green&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://10xgen.com/EULA&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/EULA-purple&#34; alt=&#34;EULA&#34;&gt;&lt;/a&gt; &lt;br&gt; Convert Seurat objects to 10x Genomics Loupe files. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/10XGenomics/loupeR/main/#how-to-use&#34;&gt;How To Use&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/10XGenomics/loupeR/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/10XGenomics/loupeR/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;loupeR&lt;/code&gt; creates a 10x Genomics Loupe file from a Seurat object. 10x Genomics Loupe Browser can visualize single-cell and spatial data from 10x Genomics. &lt;em&gt;Only single-cell gene expression datasets are supported&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;Converting a Seurat object to a Loupe file is as simple as the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# import the library&#xA;library(&#34;loupeR&#34;)&#xA;&#xA;# convert the SeuratObject named `seurat_obj` to a Loupe file&#xA;create_loupe_from_seurat(seurat_obj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the function &lt;code&gt;create_loupe&lt;/code&gt; if you need more control in the clusters and projetions that included in the Loupe file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# import the library&#xA;library(&#34;loupeR&#34;)&#xA;&#xA;# Gene Expression RNA assay&#xA;assay &amp;lt;- seurat_obj[[&#34;RNA&#34;]]&#xA;&#xA;# convert the count matrix, clusters, and projections into a Loupe file&#xA;create_loupe(&#xA;    assay@counts,&#xA;    clusters = select_clusters(seurat_obj),&#xA;    projections = select_projections(seurat_obj)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;HDF5&lt;/h3&gt; &#xA;&lt;p&gt;Before using &lt;code&gt;loupeR&lt;/code&gt;, make sure that your system has installed &lt;a href=&#34;https://www.hdfgroup.org/downloads/hdf5&#34;&gt;HDF5&lt;/a&gt;. The HDF5 organization requires registration before being able to download the installer. Below are some other more convenient methods for installing HDF5 if you happen to have these package managers installed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;macOS with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; - &lt;code&gt;brew install hdf5&lt;/code&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;windows with &lt;a href=&#34;https://vcpkg.io/en/index.html&#34;&gt;vcpkg&lt;/a&gt; - &lt;code&gt;.\vcpkg install hdf5&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing loupeR from prebuilt bundle&lt;/h3&gt; &#xA;&lt;p&gt;In RStudio, or your R shell, run the following to install this package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install dependencies&#xA;if (!require(&#34;hdf5r&#34;)) install.packages(&#34;hdf5r&#34;)&#xA;if (!require(&#34;Seurat&#34;)) install.packages(&#34;Seurat&#34;)&#xA;&#xA;# install platform specific source package&#xA;os &amp;lt;- sub(&#34;Darwin&#34;, &#34;macOS&#34;, Sys.info()[&#34;sysname&#34;])&#xA;url &amp;lt;- paste0(&#34;https://github.com/10XGenomics/loupeR/releases/latest/download/loupeR_&#34;, os, &#34;.tar.gz&#34;)&#xA;install.packages(url, repos = NULL, type = &#34;source&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing loupeR using the &lt;code&gt;remotes&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;Another installation option is to use the &lt;code&gt;remotes&lt;/code&gt; package to directly install &lt;code&gt;loupeR&lt;/code&gt; and its dependencies. The installed package won&#39;t include the prebundled louper executable, so you must invoke the &lt;code&gt;loupeR::setup()&lt;/code&gt; function which will go and download it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;10XGenomics/loupeR&#34;)&#xA;loupeR::setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;For more in depth documentation and support please head to our &lt;a href=&#34;https://10xgen.com/louper&#34;&gt;support page&lt;/a&gt; or send an email to &lt;a href=&#34;mailto:support@10xgenomics.com&#34;&gt;support@10xgenomics.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, we have provided utility functions to help gather useful information when contacting support or creating a Github issue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# import the library&#xA;library(&#34;loupeR&#34;)&#xA;&#xA;# print extra debug information&#xA;create_bugreport_from_seurat(seurat_obj)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>