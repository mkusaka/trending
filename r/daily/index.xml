<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-28T01:37:58Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MichelNivard/gptstudio</title>
    <updated>2022-12-28T01:37:58Z</updated>
    <id>tag:github.com,2022-12-28:/MichelNivard/gptstudio</id>
    <link href="https://github.com/MichelNivard/gptstudio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GPT addins for Rstudio&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=GPTstudio&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/GPTstudio&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JamesHWade/GPTstudio/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/JamesHWade/GPTstudio/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/JamesHWade/GPTstudio?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/JamesHWade/GPTstudio/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of gptstudio is for R programmers to easily incorporate use of large language models (LLMs), specifically for now GPT variants developed by OpenAI, into their project workflows. These models appear to be a step change in our use of text for knowledge work, but you should carefully consider ethical implications of using these models. Ethics of LLMs (also called &lt;a href=&#34;https://arxiv.org/abs/2108.07258&#34;&gt;Foundation Models&lt;/a&gt;) is an area of very active discussion.&lt;/p&gt; &#xA;&lt;p&gt;This package relies on the excellent &lt;a href=&#34;https://github.com/irudnyts/openai&#34;&gt;openai&lt;/a&gt; r package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;read the privacy note at the bottom, this is alpha software there is no warranty for anything.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make an OpenAI account. As of now, the free one will do.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;Create an OpenAI API key&lt;/a&gt; to use &lt;code&gt;{openai}&lt;/code&gt; package within Rstudio&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the API key up in Rstudio in one of two ways:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, functions of &lt;code&gt;{openai}&lt;/code&gt; will look for &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable. If you want to set a global environment variable, you can use the following command, where &lt;code&gt;&#34;&amp;lt;APIKEY&amp;gt;&#34;&lt;/code&gt; should be replaced with your actual key:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.setenv(OPENAI_API_KEY = &#34;&amp;lt;APIKEY&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively, you can set the key in your .Renviron file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Otherwise, you can add the key to the .Renviron file of the project. The following commands will open .Renviron for editing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(usethis)&#xA;edit_r_environ(scope = &#34;project&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the following line to the file (again, replace &lt;code&gt;&#34;&amp;lt;APIKEY&amp;gt;&#34;&lt;/code&gt; with your actual key):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=&#34;&amp;lt;APIKEY&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This now set the API key every time you start up this particular project. Note: If you are using GitHub/Gitlab, do not forget to add .Renviron to .gitignore!&lt;/p&gt; &#xA;&lt;h2&gt;Install the addins from this package:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;require(devtools)&#xA;install_github(&#34;MichelNivard/gptstudio&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Some examples of use.&lt;/p&gt; &#xA;&lt;h3&gt;Spelling ang grammar check&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Addins &amp;gt; GPTSTUDIO &amp;gt; Spelling and Grammar:&lt;/strong&gt; Takes the selected text sends it to OpenAI’s best model and instructs it to return a spelling and grammar checked version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichelNivard/gptstudio/main/media/spelling.gif&#34; alt=&#34;spelling&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Freeform GPT editor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Addins &amp;gt; GPTSTUDIO &amp;gt; Freeform GPT editor:&lt;/strong&gt; Apply any edit what YOU desire or can dream up to a selection of code or text. Here it&#39;s shown translating a famous French poem by Victor Hugo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichelNivard/gptstudio/main/media/hugo2.gif&#34; alt=&#34;freeform&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Active voice&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Addins &amp;gt; GPTSTUDIO &amp;gt; Change text to active voice:&lt;/strong&gt; Takes the selected text sends it to OpenAI’s best model and instructs it to return the text in the active voice.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichelNivard/gptstudio/main/media/active_voice.gif&#34; alt=&#34;active_voice&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Write/code from prompt&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Addins &amp;gt; GPTSTUDIO &amp;gt; Write/Code from prompt:&lt;/strong&gt; Takes the selected text and sends it to OpenAI as a prompt for the model to work with. This is most like the ChatGPT experience.&lt;/p&gt; &#xA;&lt;p&gt;Text from prompt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichelNivard/gptstudio/main/media/promt_text.gif&#34; alt=&#34;prompt_text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code from prompt:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichelNivard/gptstudio/main/media/prompt_code.gif&#34; alt=&#34;prompt_code&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Comment your code:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Addins &amp;gt; GPTSTUDIO &amp;gt; Comment your code:&lt;/strong&gt; Takes the selected text sends it to OpenAI as a prompt for a code specific model to work with, asks for a version with a comment added explaining the code line by line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichelNivard/gptstudio/main/media/comments.gif&#34; alt=&#34;add comments to code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Privacy note:&lt;/strong&gt; these functions work by taking the text or code you have highlighted/selected with the cursor and send these to OpenAI as part of a prompt, they fall under their privacy notice/rules/exceptions you agreed to with OpenAI when making an account. I do not know how secure these are when sent to OpenAI, I also don’t know what OpenAI does with them. The code is designed to ONLY share the highlighted/selected text and no other elements of your R environment (i.e.&amp;nbsp;data) unless you have highlighted it when running the addin. This may limit usability for now, but I do not want people to accidentally share sensitive data with OpenAI.&lt;/p&gt; &#xA;&lt;p&gt;DO NOT HIGHLIGHT, AND THEREFORE UPLOAD, DATA/CODE/TEXT THAT SHOULD REMAIN PRIVATE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>svalvaro/drawCell</title>
    <updated>2022-12-28T01:37:58Z</updated>
    <id>tag:github.com,2022-12-28:/svalvaro/drawCell</id>
    <link href="https://github.com/svalvaro/drawCell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R package to create cell pictures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;drawCell&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of drawCell is to easily obtain nice cell pictures in R!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To obtain the cell pictures, &lt;code&gt;drawCell&lt;/code&gt; connects to the &lt;a href=&#34;https://www.swissbiopics.org/&#34;&gt;SwissBioPics API&lt;/a&gt; so an internet connection is required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;svalvaro/drawCell&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can use drawCell in two ways, one is to use the Web application created with Shiny. We will have this app deployed soon. You can run it locally with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;drawCell::drawCellShiny()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to get the cells pictures in your Rmarkdown documents, reports, you just need to use the main function &lt;code&gt;drawCell()&lt;/code&gt;. It requires the &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/taxonomy/&#34;&gt;taxonomy id&lt;/a&gt; of your species of interest, and one or multiple SL codes for subcellular locations that will be colored. The SL codes for each subcellular location can be found at &lt;a href=&#34;https://www.uniprot.org/docs/subcell&#34;&gt;Uniprot&lt;/a&gt; and &lt;a href=&#34;http://current.geneontology.org/ontology/external2go/uniprotkb_sl2go&#34;&gt;uniprotkb_sl2go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To generate a cell of Homo sapiens (Taxonomy id: &lt;code&gt;9606&lt;/code&gt;) with highlighted Endoplasmic Reticulum (SL code: &lt;code&gt;0095&lt;/code&gt;) and lipid droplets (SL code: &lt;code&gt;0154&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(drawCell)&#xA;&#xA;drawCell(organism_identifier = &#39;9606&#39;, list_sl_colors = list(&#34;SL0173&#34; = &#34;red&#34;, &#34;SL0101&#34; = &#34;blue&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svalvaro/drawCell/master/README_files/figure-gfm/animal_cell-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;organism_identifier&lt;/code&gt; for &lt;em&gt;Quercus ilex&lt;/em&gt; a common tree in the south of Spain is &lt;code&gt;58334&lt;/code&gt; and as an example I will use the SL code of the chloroplast: &lt;code&gt;0049&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;drawCell(organism_identifier = &#39;58334&#39;, list_sl_colors = list(&#34;SL0049&#34; = &#39;lightgreen&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svalvaro/drawCell/master/README_files/figure-gfm/plantcell-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can also obtain pictures of viruses, yeast, and pretty much everything that exists!&lt;/p&gt; &#xA;&lt;p&gt;For the baker’s yeast &lt;em&gt;Saccharomyces cerevisiae&lt;/em&gt; whose &lt;code&gt;organism_identifier&lt;/code&gt; is &lt;code&gt;4932&lt;/code&gt; we will highlight the nucleus: &lt;code&gt;0191&lt;/code&gt; and the vacuole: &lt;code&gt;0272&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;drawCell(organism_identifier = &#39;4932&#39;, list_sl_colors = list(&#34;SL0191&#34; = &#34;pink&#34;, &#34;SL0272&#34; = &#34;yellow&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/svalvaro/drawCell/master/README_files/figure-gfm/sacc2-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt;</summary>
  </entry>
</feed>