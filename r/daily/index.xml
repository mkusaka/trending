<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-03T01:41:27Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>twitter/AnomalyDetection</title>
    <updated>2023-04-03T01:41:27Z</updated>
    <id>tag:github.com,2023-04-03:/twitter/AnomalyDetection</id>
    <link href="https://github.com/twitter/AnomalyDetection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Anomaly Detection with R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AnomalyDetection R package&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/twitter/AnomalyDetection&#34;&gt;&lt;img src=&#34;https://travis-ci.org/twitter/AnomalyDetection.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/twitter/AnomalyDetection/pulls&#34;&gt;&lt;img src=&#34;http://githubbadges.herokuapp.com/twitter/AnomalyDetection/pulls.svg?style=flat&#34; alt=&#34;Pending Pull-Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/twitter/AnomalyDetection/issues&#34;&gt;&lt;img src=&#34;http://githubbadges.herokuapp.com/twitter/AnomalyDetection/issues.svg?sanitize=true&#34; alt=&#34;Github Issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AnomalyDetection is an open-source R package to detect anomalies which is robust, from a statistical standpoint, in the presence of seasonality and an underlying trend. The AnomalyDetection package can be used in wide variety of contexts. For example, detecting anomalies in system metrics after a new software release, user engagement post an A/B test, or for problems in econometrics, financial engineering, political and social sciences.&lt;/p&gt; &#xA;&lt;h2&gt;How the package works&lt;/h2&gt; &#xA;&lt;p&gt;The underlying algorithm – referred to as Seasonal Hybrid ESD (S-H-ESD) builds upon the Generalized ESD test for detecting anomalies. Note that S-H-ESD can be used to detect both global as well as local anomalies. This is achieved by employing time series decomposition and using robust statistical metrics, viz., median together with ESD. In addition, for long time series (say, 6 months of minutely data), the algorithm employs piecewise approximation - this is rooted to the fact that trend extraction in the presence of anomalies in non-trivial - for anomaly detection.&lt;/p&gt; &#xA;&lt;p&gt;Besides time series, the package can also be used to detect anomalies in a vector of numerical values. We have found this very useful as many times the corresponding timestamps are not available. The package provides rich visualization support. The user can specify the direction of anomalies, the window of interest (such as last day, last hour), enable/disable piecewise approximation; additionally, the x- and y-axis are annotated in a way to assist visual data analysis.&lt;/p&gt; &#xA;&lt;h2&gt;How to get started&lt;/h2&gt; &#xA;&lt;p&gt;Install the R package using the following commands on the R console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;twitter/AnomalyDetection&#34;)&#xA;library(AnomalyDetection)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function AnomalyDetectionTs is called to detect one or more statistically significant anomalies in the input time series. The documentation of the function AnomalyDetectionTs, which can be seen by using the following command, details the input arguments and the output of the function AnomalyDetectionTs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;help(AnomalyDetectionTs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function AnomalyDetectionVec is called to detect one or more statistically significant anomalies in a vector of observations. The documentation of the function AnomalyDetectionVec, which can be seen by using the following command, details the input arguments and the output of the function AnomalyDetectionVec.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;help(AnomalyDetectionVec)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A simple example&lt;/h2&gt; &#xA;&lt;p&gt;To get started, the user is recommended to use the example dataset which comes with the packages. Execute the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data(raw_data)&#xA;res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction=&#39;both&#39;, plot=TRUE)&#xA;res$plot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/twitter/AnomalyDetection/raw/master/figs/Fig1.png&#34; alt=&#34;Fig 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;From the plot, we observe that the input time series experiences both positive and negative anomalies. Furthermore, many of the anomalies in the time series are local anomalies within the bounds of the time series’ seasonality (hence, cannot be detected using the traditional approaches). The anomalies detected using the proposed technique are annotated on the plot. In case the timestamps for the plot above were not available, anomaly detection could then carried out using the AnomalyDetectionVec function; specifically, one can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AnomalyDetectionVec(raw_data[,2], max_anoms=0.02, period=1440, direction=&#39;both&#39;, only_last=FALSE, plot=TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Often, anomaly detection is carried out on a periodic basis. For instance, at times, one may be interested in determining whether there was any anomaly yesterday. To this end, we support a flag only_last whereby one can subset the anomalies that occurred during the last day or last hour. Execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction=&#39;both&#39;, only_last=”day”, plot=TRUE)&#xA;res$plot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/twitter/AnomalyDetection/raw/master/figs/Fig2.png&#34; alt=&#34;Fig 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;From the plot, we observe that only the anomalies that occurred during the last day have been annotated. Further, the prior six days are included to expose the seasonal nature of the time series but are put in the background as the window of prime interest is the last day.&lt;/p&gt; &#xA;&lt;p&gt;Anomaly detection for long duration time series can be carried out by setting the longterm argument to T.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2015 Twitter, Inc and other contributors&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the GPLv3&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jimbrig/lossrx</title>
    <updated>2023-04-03T01:41:27Z</updated>
    <id>tag:github.com,2023-04-03:/jimbrig/lossrx</id>
    <link href="https://github.com/jimbrig/lossrx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R package, plumber API, database, and Shiny App for Actuarial Loss Development and Reserving Workflows.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lossrx &lt;img src=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.repostatus.org/#wip&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/wip.svg?sanitize=true&#34; alt=&#34;Project Status: WIP&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jimbrig/lossrx/actions/workflows/pkgdown.yml&#34;&gt;&lt;img src=&#34;https://github.com/jimbrig/lossrx/actions/workflows/pkgdown.yml/badge.svg?sanitize=true&#34; alt=&#34;pkgdown&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jimbrig/lossrx/actions&#34;&gt;&lt;img src=&#34;https://github.com/jimbrig/lossrx/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/jimbrig/lossrx&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/jimbrig/lossrx/branch/main/graph/badge.svg?token=QbpFfJMCPZ&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;!-- [![codecov](https://codecov.io/gh/jimbrig/lossrx/branch/main/graph/badge.svg?token=14426d5e-bed0-4cea-b8ff-ff4561ccda4f)](https://codecov.io/gh/jimbrig/lossrx?branch=main) --&gt; &#xA;&lt;p&gt;&lt;em&gt;View the &lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/inst/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; for detailed progression on development of the package.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;View the &lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/.github/GITHUB.md&#34;&gt;GITHUB.md&lt;/a&gt; document for details on the various CI/CD workflows implemented with this repository on the R Package (~14 total workflows).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;View the &lt;a href=&#34;https://dbdocs.io/jimbrigf0cdc6204e/Actuarial-Database&#34;&gt;Latest Database Documentation&lt;/a&gt; for a detailed look into its structure.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/#data&#34;&gt;Data&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/#data-preparation&#34;&gt;Data Preparation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/#checks&#34;&gt;Checks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The desired outcome of the &lt;code&gt;lossrx&lt;/code&gt; R package is to provide actuaries and data scientists valuable tools and frameworks for performing Property Casualty related workflows.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, the package will contain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A suite of utility and workflow oriented functions bundled as an R package&lt;/li&gt; &#xA; &lt;li&gt;A plumber API that serves various endpoints related to a backend database and models&lt;/li&gt; &#xA; &lt;li&gt;A comprehensive, yet simple migration-friendly relational database representing the various entities, attributes, and relationships involved with actuarial reserving.[^1]&lt;/li&gt; &#xA; &lt;li&gt;A demo Shiny App for Actuarial Loss Development and Reserving including triangles, loss development factor selection, preliminary ultimates, etc. and a backend database/API to store results and selections.&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive documentation and tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of &lt;code&gt;lossrx&lt;/code&gt; with &lt;code&gt;pak&lt;/code&gt;: [^2]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pak::pak(&#34;jimbrig/lossrx&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data&lt;/h2&gt; &#xA;&lt;h3&gt;Data Preparation&lt;/h3&gt; &#xA;&lt;p&gt;This package utilizes a lot of data and in turn has a lot of code inside the &lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/data-raw&#34;&gt;data-raw&lt;/a&gt; folder. I recommend taking a look at its &lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/data-raw/README.md&#34;&gt;README&lt;/a&gt; to gain an understanding of how the data was prepared for both use in the package as well as included and uploaded to the database.&lt;/p&gt; &#xA;&lt;p&gt;Data is prepared in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulated transactional claims data using the &lt;a href=&#34;https://github.com/jimbrig/lossrx/raw/main/data-raw/scripts/claims_transactional.R&#34;&gt;claims_transactional.R Simulation R Script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloaded and extracted using ropensci’s &lt;a href=&#34;https://github.com/ropensci/piggyback&#34;&gt;piggyback package&lt;/a&gt; - see the &lt;a href=&#34;https://github.com/jimbrig/lossrx/raw/main/data-raw/scripts/dataprep.R&#34;&gt;dataprep.R Script&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Supplemental &lt;em&gt;mocked data&lt;/em&gt; generated using the &lt;a href=&#34;https://www.mockaroo.com/&#34;&gt;Mockaroo API&lt;/a&gt; for randomizing certain data attribute’s.&lt;/li&gt; &#xA; &lt;li&gt;Uploaded and merged into the relational database using &lt;code&gt;SQL&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;CSVs&lt;/code&gt;, and &lt;code&gt;YAML&lt;/code&gt; files (see below about database details).&lt;/li&gt; &#xA; &lt;li&gt;Certain datasets are budled and included with the package as native &lt;code&gt;.rda&lt;/code&gt; packaged data files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;View Detailed &lt;a href=&#34;https://dbdocs.io/jimbrigf0cdc6204e/Actuarial-Database&#34;&gt;Database Documentation&lt;/a&gt; created via &lt;code&gt;dbdocs&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The core database files are housed in the &lt;a href=&#34;https://raw.githubusercontent.com/jimbrig/lossrx/main/inst/database&#34;&gt;inst/database&lt;/a&gt; directory and are included on package installation.&lt;/p&gt; &#xA;&lt;h2&gt;Checks&lt;/h2&gt; &#xA;&lt;p&gt;Latest &lt;code&gt;R CMD CHECK&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;-- R CMD check results -------------------------------------- lossrx 0.0.2 ----&#xA;Duration: 1m 19.3s&#xA;&#xA;0 errors v | 0 warnings v | 0 notes v&#xA;&#xA;R CMD check succeeded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Jimmy Briggs | 2022&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;[^1]: See the &lt;a href=&#34;https://github.com/jimbrig/lossrx/pkgs/container/actuarialdb&#34;&gt;database container package&lt;/a&gt; for details on how to run the database as a container image.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: Similarly, you can install the package using the more common &lt;code&gt;devtools::install_github()&lt;/code&gt; and &lt;code&gt;remotes::install_github()&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>business-science/timetk</title>
    <updated>2023-04-03T01:41:27Z</updated>
    <id>tag:github.com,2023-04-03:/business-science/timetk</id>
    <link href="https://github.com/business-science/timetk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Time series analysis in the `tidyverse`&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;timetk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=timetk&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/timetk&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/timetk?color=brightgreen&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/timetk?color=brightgreen&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/business-science/timetk/actions&#34;&gt;&lt;img src=&#34;https://github.com/business-science/timetk/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/business-science/timetk&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/business-science/timetk/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Time series analysis in the &lt;code&gt;tidyverse&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Download the development version with latest features&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;business-science/timetk&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Or, download CRAN approved version&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;timetk&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Package Functionality&lt;/h2&gt; &#xA;&lt;p&gt;There are &lt;em&gt;many&lt;/em&gt; R packages for working with Time Series data. Here’s how &lt;code&gt;timetk&lt;/code&gt; compares to the “tidy” time series R packages for data visualization, wrangling, and feature engineeering (those that leverage data frames or tibbles).&lt;/p&gt; &#xA;&lt;div class=&#34;comparison&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Task&lt;/th&gt; &#xA;    &lt;th&gt;&lt;a href=&#34;https://business-science.github.io/timetk/&#34;&gt;timetk&lt;/a&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;a href=&#34;https://tsibble.tidyverts.org/index.html&#34;&gt;tsibble&lt;/a&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;a href=&#34;https://feasts.tidyverts.org/index.html&#34;&gt;feasts&lt;/a&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;a href=&#34;https://business-science.github.io/tibbletime/&#34;&gt;tibbletime&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;Structure&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Data Structure&lt;/td&gt; &#xA;    &lt;td&gt;tibble (tbl)&lt;/td&gt; &#xA;    &lt;td&gt;tsibble (tbl_ts)&lt;/td&gt; &#xA;    &lt;td&gt;tsibble (tbl_ts)&lt;/td&gt; &#xA;    &lt;td&gt;tibbletime (tbl_time)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK04_Plotting_Time_Series.html&#34;&gt;&lt;strong&gt;Visualization&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Interactive Plots (plotly)&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Static Plots (ggplot)&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK04_Plotting_Time_Series.html&#34;&gt;Time Series&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK05_Plotting_Seasonality_and_Correlation.html&#34;&gt;Correlation, Seasonality&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK07_Time_Series_Data_Wrangling.html&#34;&gt;&lt;strong&gt;Data Wrangling&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Time-Based Summarization&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Time-Based Filtering&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Padding Gaps&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Low to High Frequency&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Imputation&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Sliding / Rolling&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK03_Forecasting_Using_Time_Series_Signature.html&#34;&gt;Time Series Machine Learning&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK08_Automatic_Anomaly_Detection.html&#34;&gt;Anomaly Detection&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK09_Clustering.html&#34;&gt;Clustering&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK03_Forecasting_Using_Time_Series_Signature.html&#34;&gt;&lt;strong&gt;Feature Engineering (recipes)&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Date Feature Engineering&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Holiday Feature Engineering&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Fourier Series&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Smoothing &amp;amp; Rolling&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Padding&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Imputation&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;Cross Validation (rsample)&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/reference/time_series_cv.html&#34;&gt;Time Series Cross Validation&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/reference/plot_time_series_cv_plan.html&#34;&gt;Time Series CV Plan Visualization&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;More Awesomeness&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK02_Time_Series_Date_Sequences.html&#34;&gt;Making Time Series (Intelligently)&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK02_Time_Series_Date_Sequences.html&#34;&gt;Handling Holidays &amp;amp; Weekends&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK00_Time_Series_Coercion.html&#34;&gt;Class Conversion&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK06_Automatic_Frequency_And_Trend_Selection.html&#34;&gt;Automatic Frequency &amp;amp; Trend&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK04_Plotting_Time_Series.html&#34;&gt;Visualizing Time Series&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK07_Time_Series_Data_Wrangling.html&#34;&gt;Wrangling Time Series&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://business-science.github.io/timetk/articles/TK03_Forecasting_Using_Time_Series_Signature.html&#34;&gt;Full Time Series Machine Learning and Feature Engineering Tutorial&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://business-science.github.io/timetk/&#34;&gt;API Documentation&lt;/a&gt; for articles and a &lt;a href=&#34;https://business-science.github.io/timetk/reference/index.html&#34;&gt;complete list of function references&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;Timetk is an amazing package that is part of the &lt;code&gt;modeltime&lt;/code&gt; ecosystem for time series analysis and forecasting. The forecasting system is extensive, and it can take a long time to learn:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many algorithms&lt;/li&gt; &#xA; &lt;li&gt;Ensembling and Resampling&lt;/li&gt; &#xA; &lt;li&gt;Machine Learning&lt;/li&gt; &#xA; &lt;li&gt;Deep Learning&lt;/li&gt; &#xA; &lt;li&gt;Scalable Modeling: 10,000+ time series&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Your probably thinking how am I ever going to learn time series forecasting. Here’s the solution that will save you years of struggling.&lt;/p&gt; &#xA;&lt;h2&gt;Take the High-Performance Forecasting Course&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become the forecasting expert for your organization&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://university.business-science.io/p/ds4b-203-r-high-performance-time-series-forecasting/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.filepicker.io/api/file/bKyqVAi5Qi64sS05QYLk&#34; alt=&#34;High-Performance Time Series Forecasting Course&#34; width=&#34;100%&#34; style=&#34;box-shadow: 0 0 5px 2px rgba(0, 0, 0, .5);&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://university.business-science.io/p/ds4b-203-r-high-performance-time-series-forecasting/&#34;&gt;&lt;em&gt;High-Performance Time Series Course&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Time Series is Changing&lt;/h3&gt; &#xA;&lt;p&gt;Time series is changing. &lt;strong&gt;Businesses now need 10,000+ time series forecasts every day.&lt;/strong&gt; This is what I call a &lt;em&gt;High-Performance Time Series Forecasting System (HPTSF)&lt;/em&gt; - Accurate, Robust, and Scalable Forecasting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;High-Performance Forecasting Systems will save companies by improving accuracy and scalability.&lt;/strong&gt; Imagine what will happen to your career if you can provide your organization a “High-Performance Time Series Forecasting System” (HPTSF System).&lt;/p&gt; &#xA;&lt;h3&gt;How to Learn High-Performance Time Series Forecasting&lt;/h3&gt; &#xA;&lt;p&gt;I teach how to build a HPTFS System in my &lt;a href=&#34;https://university.business-science.io/p/ds4b-203-r-high-performance-time-series-forecasting&#34;&gt;&lt;strong&gt;High-Performance Time Series Forecasting Course&lt;/strong&gt;&lt;/a&gt;. You will learn:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time Series Machine Learning&lt;/strong&gt; (cutting-edge) with &lt;code&gt;Modeltime&lt;/code&gt; - 30+ Models (Prophet, ARIMA, XGBoost, Random Forest, &amp;amp; many more)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deep Learning&lt;/strong&gt; with &lt;code&gt;GluonTS&lt;/code&gt; (Competition Winners)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time Series Preprocessing&lt;/strong&gt;, Noise Reduction, &amp;amp; Anomaly Detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature engineering&lt;/strong&gt; using lagged variables &amp;amp; external regressors&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hyperparameter Tuning&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time series cross-validation&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ensembling&lt;/strong&gt; Multiple Machine Learning &amp;amp; Univariate Modeling Techniques (Competition Winner)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable Forecasting&lt;/strong&gt; - Forecast 1000+ time series in parallel&lt;/li&gt; &#xA; &lt;li&gt;and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p class=&#34;text-center&#34; style=&#34;font-size:24px;&#34;&gt; Become the Time Series Expert for your organization. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p class=&#34;text-center&#34; style=&#34;font-size:30px;&#34;&gt; &lt;a href=&#34;https://university.business-science.io/p/ds4b-203-r-high-performance-time-series-forecasting&#34;&gt;Take the High-Performance Time Series Forecasting Course&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;timetk&lt;/code&gt; package wouldn’t be possible without other amazing time series packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rdrr.io/r/stats/stats-package.html&#34;&gt;stats&lt;/a&gt; - Basically every &lt;code&gt;timetk&lt;/code&gt; function that uses a period (frequency) argument owes it to &lt;code&gt;ts()&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;plot_acf_diagnostics()&lt;/code&gt;: Leverages &lt;code&gt;stats::acf()&lt;/code&gt;, &lt;code&gt;stats::pacf()&lt;/code&gt; &amp;amp; &lt;code&gt;stats::ccf()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;plot_stl_diagnostics()&lt;/code&gt;: Leverages &lt;code&gt;stats::stl()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lubridate.tidyverse.org/&#34;&gt;lubridate&lt;/a&gt;: &lt;code&gt;timetk&lt;/code&gt; makes heavy use of &lt;code&gt;floor_date()&lt;/code&gt;, &lt;code&gt;ceiling_date()&lt;/code&gt;, and &lt;code&gt;duration()&lt;/code&gt; for “time-based phrases”. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add and Subtract Time (&lt;code&gt;%+time%&lt;/code&gt; &amp;amp; &lt;code&gt;%-time%&lt;/code&gt;): &lt;code&gt;&#34;2012-01-01&#34; %+time% &#34;1 month 4 days&#34;&lt;/code&gt; uses &lt;code&gt;lubridate&lt;/code&gt; to intelligently offset the day&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshuaulrich/xts&#34;&gt;xts&lt;/a&gt;: Used to calculate periodicity and fast lag automation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.robjhyndman.com/forecast/&#34;&gt;forecast (retired)&lt;/a&gt;: Possibly my favorite R package of all time. It’s based on &lt;code&gt;ts&lt;/code&gt;, and it’s predecessor is the &lt;code&gt;tidyverts&lt;/code&gt; (&lt;code&gt;fable&lt;/code&gt;, &lt;code&gt;tsibble&lt;/code&gt;, &lt;code&gt;feasts&lt;/code&gt;, and &lt;code&gt;fabletools&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;ts_impute_vec()&lt;/code&gt; function for low-level vectorized imputation using STL + Linear Interpolation uses &lt;code&gt;na.interp()&lt;/code&gt; under the hood.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;ts_clean_vec()&lt;/code&gt; function for low-level vectorized imputation using STL + Linear Interpolation uses &lt;code&gt;tsclean()&lt;/code&gt; under the hood.&lt;/li&gt; &#xA;   &lt;li&gt;Box Cox transformation &lt;code&gt;auto_lambda()&lt;/code&gt; uses &lt;code&gt;BoxCox.Lambda()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://business-science.github.io/tibbletime/&#34;&gt;tibbletime (retired)&lt;/a&gt;: While &lt;code&gt;timetk&lt;/code&gt; does not import &lt;code&gt;tibbletime&lt;/code&gt;, it uses much of the innovative functionality to interpret time-based phrases: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tk_make_timeseries()&lt;/code&gt; - Extends &lt;code&gt;seq.Date()&lt;/code&gt; and &lt;code&gt;seq.POSIXt()&lt;/code&gt; using a simple phase like “2012-02” to populate the entire time series from start to finish in February 2012.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filter_by_time()&lt;/code&gt;, &lt;code&gt;between_time()&lt;/code&gt; - Uses innovative endpoint detection from phrases like “2012”&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;slidify()&lt;/code&gt; is basically &lt;code&gt;rollify()&lt;/code&gt; using &lt;code&gt;slider&lt;/code&gt; (see below).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slider.r-lib.org/&#34;&gt;slider&lt;/a&gt;: A powerful R package that provides a &lt;code&gt;purrr&lt;/code&gt;-syntax for complex rolling (sliding) calculations. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;slidify()&lt;/code&gt; uses &lt;code&gt;slider::pslide&lt;/code&gt; under the hood.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;slidify_vec()&lt;/code&gt; uses &lt;code&gt;slider::slide_vec()&lt;/code&gt; for simple vectorized rolls (slides).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://edwinth.github.io/padr/&#34;&gt;padr&lt;/a&gt;: Used for padding time series from low frequency to high frequency and filling in gaps. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;pad_by_time()&lt;/code&gt; function is a wrapper for &lt;code&gt;padr::pad()&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;See the &lt;code&gt;step_ts_pad()&lt;/code&gt; to apply padding as a preprocessing recipe!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/TSstudio&#34;&gt;TSstudio&lt;/a&gt;: This is the best interactive time series visualization tool out there. It leverages the &lt;code&gt;ts&lt;/code&gt; system, which is the same system the &lt;code&gt;forecast&lt;/code&gt; R package uses. A ton of inspiration for visuals came from using &lt;code&gt;TSstudio&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>