<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T01:47:14Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>whitead/peplib</title>
    <updated>2023-05-28T01:47:14Z</updated>
    <id>tag:github.com,2023-05-28:/whitead/peplib</id>
    <link href="https://github.com/whitead/peplib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Peptide library methods&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Peptide Library Analysis Methods&lt;/h1&gt; &#xA;&lt;p&gt;This package provides a variety of methods for dealing with analysis of peptide library data, including clustering, motif finding, and QSAR model fitting. It is for the R programming language and is described in a &lt;a href=&#34;http://pubs.acs.org/doi/full/10.1021/ci300484q&#34;&gt;recent paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing From Source (preferred)&lt;/h2&gt; &#xA;&lt;p&gt;To install the latest version from the source here, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/whitead/peplib/archive/master.zip&#xA;unzip master.zip &amp;amp;&amp;amp; rm master.zip&#xA;R CMD build peplib-master&#xA;sudo R CMD INSTALL peplib_*.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing From CRAN&lt;/h2&gt; &#xA;&lt;p&gt;To install from CRAN, type the following command from an R session&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#34;peplib&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;code&gt;tutorial.pdf&lt;/code&gt; file. It contains many more details than the brief information below and detailed tutorials.&lt;/p&gt; &#xA;&lt;h2&gt;Loading Sequences&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to load sequences is to use the &lt;code&gt;read.sequences&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;seq &amp;lt;- read.sequences(&#34;seqfile.txt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;seqfile.txt&lt;/code&gt; looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;FDDSDF&#xA;FDSA&#xA;GGHIT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For most of the methods, it&#39;s recommended to have the same length for all sequences.&lt;/p&gt; &#xA;&lt;h2&gt;Calculating Peptide Descriptors&lt;/h2&gt; &#xA;&lt;p&gt;To calculate descriptors on your sequences, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;seq.desc &amp;lt;- simpleDescriptors(seq)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will calculate about 10 descriptors. To calculate a few hundred, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;seq.desc &amp;lt;- descriptors(seq)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These descriptors are all relative to glycine. So, for example, molecular weight is not the actual molecular weight but the difference between a given amino acid and glycine.&lt;/p&gt; &#xA;&lt;h2&gt;Plotting Sequences&lt;/h2&gt; &#xA;&lt;p&gt;One nice feature of peplib is the ability to plot sequences with a combination of a finding the substitution distance between sequences and then projecting that distance matrix to 2 dimensions. This may be done like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plot(seq)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This method also clusters your sequences assuming that there are 3 clusters. That may be changed by adding one argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plot(seq, 1)&#xA;plot(seq, 5)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>zoecastillo/microbiomeExplorer</title>
    <updated>2023-05-28T01:47:14Z</updated>
    <id>tag:github.com,2023-05-28:/zoecastillo/microbiomeExplorer</id>
    <link href="https://github.com/zoecastillo/microbiomeExplorer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Microbiome Explorer provides methods to analyze and visualize microbial community sequencing data either from the R command line or through a Shiny application. Written by Janina Reeder and Joseph N. Paulson.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microbiome Explorer&lt;/h1&gt; &#xA;&lt;h2&gt;An R package for the analysis and visualization of microbial communities.&lt;/h2&gt; &#xA;&lt;h2&gt;To install and run Shiny app:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BiocManager::install(&#34;zoecastillo/microbiomeExplorer&#34;, &#xA;                         ref = &#34;master&#34;)&#xA;                         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The microbiomeExplorer package and the Shiny application contained with it provides methods and visualizations to explore the results of 16S rRNA amplicon sequencing experiment. The analyses can be performed entirely via the R command line, but the primary intent of the package is to enable access to many of these analyses to non-computational users through the Shiny user interface.&lt;/p&gt; &#xA;&lt;p&gt;The interface is launched through the R environment by calling &lt;code&gt;MicrobiomeExplorerApp()&lt;/code&gt; after loading the package or made available via deployment on a Shiny server. This document is intended to give an introduction of how to use the Shiny application with the addition of R code chunks that a command line user would use to produce the same results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(microbiomeExplorer)&#xA;runMicrobiomeExplorer()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data upload&lt;/h2&gt; &#xA;&lt;h4&gt;Microbiome Explorer accepts several different data upload formats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MRexperiment-class objects stored as RDATA or RDS files&lt;/li&gt; &#xA; &lt;li&gt;The Biological Observation Matrix (BIOM) formattes files produced by any program including qiime2 or mothur&lt;/li&gt; &#xA; &lt;li&gt;Raw counts files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For further details, please refer to the package vignette.&lt;/p&gt; &#xA;&lt;h4&gt;Accessing example data via &lt;code&gt;metagenomeSeq&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The mouseData example data set is included with the &lt;code&gt;metagenomeSeq&lt;/code&gt; package on which &lt;code&gt;microbiomeExplorer&lt;/code&gt; depends. The easiest way to make this data available for the application is to store it as an RDS object on your file system. Then, you can open it via the &#34;Browse&#34; button under &lt;em&gt;Upload Feature Count Data&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;data(&#34;mouseData&#34;, package = &#34;metagenomeSeq&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data QC&lt;/h2&gt; &#xA;&lt;p&gt;Before starting an analysis, it is recommend to review the results of the sequencing experiment and perform quality control. Multiple QC plots can be generated, including those showing the number of unique features in each sample as a barplot or in a scatterplot against the number of reads.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/data_input_filter.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &#xA;&lt;h2&gt;Analysis&lt;/h2&gt; &#xA;&lt;p&gt;The analysis workflow within the application is split into six different sections: intra sample, intra feature, inter sample, correlation, differential and longitudinal. All visualizations are implemented using the plotly R package which provides basic interactivity, including zooming or panning via its modebar. In addition, the user can export the plot in its current state (i.e. showing specific user interactions) as a svg file using the camera icon of the modebar.&lt;/p&gt; &#xA;&lt;h3&gt;Intra-Sample Analysis&lt;/h3&gt; &#xA;&lt;p&gt;Intra-sample analysis contains functions focus on investigating the microbial composition within a sample or a group of samples. Relative abundance shows the most abundant feature in a barplot summarized by a user-defined variable across the x-asis. The feature abundance plot shows the individual abundance of a specific feature either as a boxplot or a categorical scatterplot depending on the x-axis variable chosen. Alpha diversity is a measure of the complexity or diversity within a particular sample, eg. habitat or area. Alpha diversity is computed by functions in the vegan package and is visualized as a boxplot using the same input definitions by feature and relative abundance.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/analysis_intra_faceted.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &#xA;&lt;h3&gt;Intra-Feature Analysis&lt;/h3&gt; &#xA;&lt;p&gt;Intra-feature analysis provides a different view on the feature prevalence in the dataset by showing the average abundance for each feature with added error bars indicating the standard deviation across all of the samples in a particular group.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/analysis_features.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &#xA;&lt;h3&gt;Inter-Sample Analysis&lt;/h3&gt; &#xA;&lt;p&gt;Inter-sample analyses focus on differences between samples or groups of samples via feature heatmaps and beta diversity calculations.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/analysis_inter_beta.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &#xA;&lt;h3&gt;Correlation&lt;/h3&gt; &#xA;&lt;p&gt;Correlation allows the user to visualize the relationship between either two features or a feature and a numeric phenotype in a scatterplot enhanced with a linear regression statistic.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/analysis_correlation.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &#xA;&lt;h3&gt;Differential abundance&lt;/h3&gt; &#xA;&lt;p&gt;Differential abundance (DA) analysis is focused on testing the null hypothesis that the mean or mean ranks between groups are the same for a specific feature. DA analysis can help detect changes in feature abundance across two or more different levels of a phenotype. Four different methods can be chosen via the application: DESeq2, Kruskal-Wallis, limma, or a zero-inflated log normal model.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/analysis_diff_details.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &#xA;&lt;h3&gt;Longitudinal&lt;/h3&gt; &#xA;&lt;p&gt;Longitudinal analysis allows the user to generate feature plots with more control over the data shown within the plot. For a specific feature, the user can choose a phenotype and specific levels of that phenotype to show in the plot. The chosen order of the levels will be kept within the visualization which allows sorting by specific dates or tissues among other things.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/analysis_longitudinal.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt; &#xA;&lt;h2&gt;Reports&lt;/h2&gt; &#xA;&lt;p&gt;Once an analysis is complete, a user might like to share the results with collaborators or download them for further analysis beyond the functionality provided via the Microbiome Explorer. To do this, we are providing the option to include any part of the analysis in a report which is fully reproducible outside of the application.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zoecastillo/microbiomeExplorer/master/inst/shiny/www/img/report_output.jpg&#34; width=&#34;70%&#34; height=&#34;70%&#34;&gt;</summary>
  </entry>
  <entry>
    <title>edgararuiz/chattr</title>
    <updated>2023-05-28T01:47:14Z</updated>
    <id>tag:github.com,2023-05-28:/edgararuiz/chattr</id>
    <link href="https://github.com/edgararuiz/chattr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;chattr&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/edgararuiz/chattr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/edgararuiz/chattr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/edgararuiz/chattr?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/edgararuiz/chattr/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=chattr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/chattr.png&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/man/figures/lifecycle-experimental.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/man/figures/readme/chattr.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;!-- toc: start --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#intro&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#secret-key&#34;&gt;Secret key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#test-connection&#34;&gt;Test connection&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#using&#34;&gt;Using&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#the-app&#34;&gt;The App&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#keyboard-shortcut&#34;&gt;Keyboard Shortcut&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#how-it-works&#34;&gt;How it works&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#prompt-defaults&#34;&gt;Prompt defaults&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#appendix&#34;&gt;Appendix&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#how-to-setup-the-keyboard-shortcut&#34;&gt;How to setup the keyboard shortcut&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- toc: end --&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;chattr&lt;/code&gt; is an interface to LLMs (Large Language Models). At this time, it integrates with OpenAI’s GPT 3.5 and DaVinci models. In the future, &lt;code&gt;chattr&lt;/code&gt; will be extended to support other LLM’s. &lt;code&gt;chattr&lt;/code&gt; enriches your request with additional context to improve the quality of the model’s response. For more info, see the &lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#how-it-works&#34;&gt;How it works&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chattr&lt;/code&gt;’s main goal is to aid in EDA tasks. The additional information appended to your request, provides a sort of “guard rails”, so that the packages and techniques we usually recommend as best practice, are used in the model’s responses.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Since this is a very early version of the package, you can either clone the repo, or install the package from GH:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;edgararuiz/chattr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Secret key&lt;/h3&gt; &#xA;&lt;p&gt;OpenAI requires a &lt;strong&gt;secret key&lt;/strong&gt; to authenticate your user. It is required for any application non-OpenAI application, such as &lt;code&gt;chattr&lt;/code&gt;, to have one in order to function. A key is a long alphanumeric sequence. The sequence is created in the OpenAI portal. To obtain your &lt;strong&gt;secret key&lt;/strong&gt;, follow this link: &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API Keys&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;chattr&lt;/code&gt; will look for the &lt;strong&gt;secret key&lt;/strong&gt; inside the a Environment Variable called &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;. Other packages that integrate with OpenAI use the same variable name.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Sys.setenv()&lt;/code&gt; to set the variable. The downside of using this method is that the variable will only be available during the current R session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.setenv(&#34;OPENAI_API_KEY&#34; = &#34;####################&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A preferred method is to save the secret key to the &lt;code&gt;.Renviron&lt;/code&gt; file. This way, there is no need to load the environment variable every time you start a new R session. The &lt;code&gt;.Renviron&lt;/code&gt; file is available in your home directory. Here is an example of the entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=####################&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test connection&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;chattr_test()&lt;/code&gt; function to confirm that your connection works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chattr_test()&#xA;✔ Connection with OpenAI cofirmed&#xA;✔ Access to models confirmed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using&lt;/h2&gt; &#xA;&lt;h3&gt;The App&lt;/h3&gt; &#xA;&lt;p&gt;The main way to use &lt;code&gt;chattr&lt;/code&gt; is through the Shiny Gadget app. By default, it runs inside the Viewer pane. The fastest way to activate the app is by calling it via the provided function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chattr::chattr_app()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/man/figures/readme/chat1.png&#34; alt=&#34;Screenshot of the Sniny gadget app in a dark mode RStudio theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lot of effort was put in to make the app’s appearance as close as possible to the IDE. This way it feels more integrated with your work space. This includes switching the color scheme based on the current RStudio theme being light, or dark.&lt;/p&gt; &#xA;&lt;p&gt;Automatically, the app will automatically add buttons to each code section. The buttons lets us copy the code to the clipboard, or to send it to the document. If you &lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#keyboard-shortcut&#34;&gt;“call”&lt;/a&gt; the app from a Quarto document, the app will envelop the code inside a chunk.&lt;/p&gt; &#xA;&lt;h3&gt;Keyboard Shortcut&lt;/h3&gt; &#xA;&lt;p&gt;The best way to access &lt;code&gt;chattr&lt;/code&gt;’s app is by setting up a keyboard shortcut for it. This package includes an RStudio Addin that gives us direct access to the app, which in turn, allows a &lt;strong&gt;keyboard shortcut&lt;/strong&gt; to be assigned to the addin. The name of the addin is: “Open Chat”. If you are not familiar with how to assign a keyboard shortcut to the adding see the Appendix section: &lt;a href=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/#how-to-setup-the-keyboard-shortcut&#34;&gt;How to setup the keyboard shortcut&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/man/figures/readme/chattr-diagram.png&#34; alt=&#34;Diagram that illustrates how chattr handles model requests&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chattr&lt;/code&gt; enriches your request with additional instructions, name and structure of data frames currently in your environment, the path for the data files in your working directory. If supported by the model, &lt;code&gt;chattr&lt;/code&gt; will include the current chat history.&lt;/p&gt; &#xA;&lt;p&gt;To see what &lt;code&gt;chattr&lt;/code&gt; will send to the model, set the &lt;code&gt;preview&lt;/code&gt; argument to &lt;code&gt;TRUE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(chattr)&#xA;&#xA;data(mtcars)&#xA;data(iris)&#xA;&#xA;chattr(preview = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;── chattr ────────────────────────────────────────────────────────────────&#xA;&#xA;── Preview for: Console &#xA;• Provider: Open AI&#xA;• Model: GPT 3.5 Turbo&#xA;• temperature: 0.01&#xA;• max_tokens: 1000&#xA;• stream: TRUE&#xA;&#xA;── Prompt: &#xA;role: system&#xA;content: You are a helpful coding assistant&#xA;role: user&#xA;content:&#xA;* Use the &#39;Tidy Modeling with R&#39; (https://www.tmwr.org/) book as main reference&#xA;* Use the &#39;R for Data Science&#39; (https://r4ds.had.co.nz/) book as main reference&#xA;* Use tidyverse packages: readr, ggplot2, dplyr, tidyr&#xA;* For models, use tidymodels packages: recipes, parsnip, yardstick, workflows, broom&#xA;* Avoid explanations unless requested by user, expecting code only&#xA;* Data files available:&#xA;|- inst/prompt/base.txt&#xA;* Data frames currently in R memory (and columns):&#xA;|-- iris (Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species)&#xA;|-- mtcars (mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb)&#xA;[Your future prompt goes here]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prompt defaults&lt;/h3&gt; &#xA;&lt;p&gt;To edit what &lt;code&gt;chattr&lt;/code&gt; is sending to the model you can use &lt;code&gt;ch_defaults()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ch_defaults()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;── chattr ────────────────────────────────────────────────────────&#xA;&#xA;── Defaults for: Notebook ──&#xA;&#xA;── Prompt: &#xA;• {{readLines(system.file(&#39;prompt/base.txt&#39;, package =&#xA;&#39;chattr&#39;))}}&#xA;&#xA;── Model &#xA;• Provider: Open AI&#xA;Model: GPT 3.5 Turbo&#xA;&#xA;── Model Arguments: &#xA;• temperature: 0.01&#xA;• max_tokens: 1000&#xA;• stream: TRUE&#xA;&#xA;── Context: &#xA;Max Data Files: 20&#xA;Max Data Frames: 20&#xA;✔ Chat History&#xA;✖ Document contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To modify, simply pass the new value as an argument to the function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ch_defaults(prompt = c(&#34;New instructions&#34;, &#34;New line&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;── chattr ────────────────────────────────────────────────────────&#xA;&#xA;── Defaults for: Notebook ──&#xA;&#xA;── Prompt: &#xA;• New instructions&#xA;• New line&#xA;&#xA;── Model &#xA;• Provider: Open AI&#xA;Model: GPT 3.5 Turbo&#xA;&#xA;── Model Arguments: &#xA;• temperature: 0.01&#xA;• max_tokens: 1000&#xA;• stream: TRUE&#xA;&#xA;── Context: &#xA;Max Data Files: 20&#xA;Max Data Frames: 20&#xA;✔ Chat History&#xA;✖ Document contents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;How to setup the keyboard shortcut&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Select &lt;em&gt;Tools&lt;/em&gt; in the top menu, and then select &lt;em&gt;Modify Keyboard Shortcuts&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/man/figures/readme/keyboard-shortcuts.png&#34; width=&#34;700&#34; alt=&#34;Screenshot that shows where to find the option to modify the keyboard shortcuts&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Search for the &lt;code&gt;chattr&lt;/code&gt; adding by writing “open chat”, in the search box&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/man/figures/readme/addin-find.png&#34; width=&#34;500&#34; alt=&#34;Screenshot that shows where to input the addin search&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To select a key combination for your shortcut, click on the Shortcut box and then type &lt;em&gt;press&lt;/em&gt; the key combination in your keyboard. In my case, I chose &lt;em&gt;Ctrl+Shift+C&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/edgararuiz/chattr/main/man/figures/readme/addin-assign.png&#34; width=&#34;500&#34; alt=&#34;Screenshot that shows what the interface looks like when a shortcut has been selected&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>