<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-18T01:42:41Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>davidsjoberg/ggsankey</title>
    <updated>2023-06-18T01:42:41Z</updated>
    <id>tag:github.com,2023-06-18:/davidsjoberg/ggsankey</id>
    <link href="https://github.com/davidsjoberg/ggsankey" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make sankey, alluvial and sankey bump plots in ggplot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ggsankey&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of ggsankey is to make beautiful sankey, alluvial and sankey bump plots in &lt;code&gt;ggplot2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of ggsankey from &lt;code&gt;github&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;davidsjoberg/ggsankey&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How does it work&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/chart/interactive/docs/gallery/sankey&#34;&gt;Google&lt;/a&gt; defines a sankey as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;A sankey diagram is a visualization used to depict a flow from one set of values to another. The things being connected are called nodes and the connections are called links. Sankeys are best used when you want to show a many-to-many mapping between two domains or multiple paths through a set of stages.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To plot a sankey diagram with &lt;code&gt;ggsankey&lt;/code&gt; each observation has a &lt;em&gt;stage&lt;/em&gt; (called a discrete x-value in &lt;code&gt;ggplot&lt;/code&gt;) and be part of a &lt;em&gt;node&lt;/em&gt;. Furthermore, each observation needs to have instructions of which &lt;em&gt;node&lt;/em&gt; it will belong to in the next &lt;em&gt;stage&lt;/em&gt;. See the image below for some clarification.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidsjoberg/ggsankey/main/man/figures/README-unnamed-chunk-2-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Hence, to use &lt;code&gt;geom_sankey&lt;/code&gt; the aestethics &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;next_x&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;next_node&lt;/code&gt; are required. The last &lt;em&gt;stage&lt;/em&gt; should point to &lt;code&gt;NA&lt;/code&gt;. The aestethics fill and color will affect both &lt;em&gt;nodes&lt;/em&gt; and &lt;em&gt;flows&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To plot a sankey diagram with &lt;code&gt;ggsankey&lt;/code&gt; each observation has a &lt;em&gt;stage&lt;/em&gt; (called a discrete x-value in &lt;code&gt;ggplot&lt;/code&gt;) and be part of a &lt;em&gt;node&lt;/em&gt;. Furthermore, each observation needs to have instructions of which &lt;em&gt;node&lt;/em&gt; it will belong to in the next &lt;em&gt;stage&lt;/em&gt;. See the image below for some clarification.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidsjoberg/ggsankey/main/man/figures/README-unnamed-chunk-3-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;To controll geometries (not changed by data) like fill, color, size, alpha etc for &lt;em&gt;nodes&lt;/em&gt; and &lt;em&gt;flows&lt;/em&gt; you can either choose to set a global value that affect both, or you can specify which one you want to alter. For example &lt;code&gt;node.color = &#39;black&#39;&lt;/code&gt; will only draw a black line around the nodes, but not the flows (links).&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidsjoberg/ggsankey/main/man/figures/README-unnamed-chunk-4-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;h3&gt;geom_sankey&lt;/h3&gt; &#xA;&lt;p&gt;A basic sankey plot that shows how dimensions are linked.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggsankey)&#xA;library(dplyr)&#xA;library(ggplot2)&#xA;&#xA;df &amp;lt;- mtcars %&amp;gt;%&#xA;  make_long(cyl, vs, am, gear, carb)&#xA;&#xA;ggplot(df, aes(x = x, &#xA;               next_x = next_x, &#xA;               node = node, &#xA;               next_node = next_node,&#xA;               fill = factor(node))) +&#xA;  geom_sankey()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidsjoberg/ggsankey/main/man/figures/README-example-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;And by adding a little pimp.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Labels with &lt;code&gt;geom_sankey_label&lt;/code&gt; which places labels in the center of nodes if given the same aestethics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ggsankey&lt;/code&gt; also comes with custom minimalistic themes that can be used. Here I use &lt;code&gt;theme_sankey&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- end list --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(df, aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = factor(node), label = node)) +&#xA;  geom_sankey(flow.alpha = .6,&#xA;              node.color = &#34;gray30&#34;) +&#xA;  geom_sankey_label(size = 3, color = &#34;white&#34;, fill = &#34;gray40&#34;) +&#xA;  scale_fill_viridis_d() +&#xA;  theme_sankey(base_size = 18) +&#xA;  labs(x = NULL) +&#xA;  theme(legend.position = &#34;none&#34;,&#xA;        plot.title = element_text(hjust = .5)) +&#xA;  ggtitle(&#34;Car features&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidsjoberg/ggsankey/main/man/figures/README-sankey-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;geom_alluvial&lt;/h3&gt; &#xA;&lt;p&gt;Alluvial plots are very similiar to sankey plots but have no spaces between nodes and start at y = 0 instead being centered around the x-axis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(df, aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = factor(node), label = node)) +&#xA;  geom_alluvial(flow.alpha = .6) +&#xA;  geom_alluvial_text(size = 3, color = &#34;white&#34;) +&#xA;  scale_fill_viridis_d() +&#xA;  theme_alluvial(base_size = 18) +&#xA;  labs(x = NULL) +&#xA;  theme(legend.position = &#34;none&#34;,&#xA;        plot.title = element_text(hjust = .5)) +&#xA;  ggtitle(&#34;Car features&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidsjoberg/ggsankey/main/man/figures/README-alluvial-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;geom_sankey_bump&lt;/h3&gt; &#xA;&lt;p&gt;Sankey bump plots is mix between bump plots and sankey and mostly useful for time series. When a group becomes larger than another it bumps above it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;gapminder&#34;)&#xA;library(gapminder)&#xA;&#xA;df &amp;lt;- gapminder %&amp;gt;%&#xA;  group_by(continent, year) %&amp;gt;%&#xA;  summarise(gdp = (sum(pop * gdpPercap)/1e9) %&amp;gt;% round(0), .groups = &#34;keep&#34;) %&amp;gt;%&#xA;  ungroup()&#xA;&#xA;ggplot(df, aes(x = year,&#xA;               node = continent,&#xA;               fill = continent,&#xA;               value = gdp)) +&#xA;  geom_sankey_bump(space = 0, type = &#34;alluvial&#34;, color = &#34;transparent&#34;, smooth = 6) +&#xA;  scale_fill_viridis_d(option = &#34;A&#34;, alpha = .8) +&#xA;  theme_sankey_bump(base_size = 16) +&#xA;  labs(x = NULL,&#xA;       y = &#34;GDP ($ bn)&#34;,&#xA;       fill = NULL,&#xA;       color = NULL) +&#xA;  theme(legend.position = &#34;bottom&#34;) +&#xA;  labs(title = &#34;GDP development per continent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/davidsjoberg/ggsankey/main/man/figures/README-sankey_bump-1.png&#34; width=&#34;100%&#34;&gt;</summary>
  </entry>
  <entry>
    <title>sta1562/mongo-covid</title>
    <updated>2023-06-18T01:42:41Z</updated>
    <id>tag:github.com,2023-06-18:/sta1562/mongo-covid</id>
    <link href="https://github.com/sta1562/mongo-covid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Coronavirus Cases using MongoDB&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Daily Scraping Covid&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sta1562/mongo-covid/actions/workflows/covid-scrape.yml&#34;&gt;&lt;img src=&#34;https://github.com/sta1562/mongo-covid/actions/workflows/covid-scrape.yml/badge.svg?sanitize=true&#34; alt=&#34;Daily Scraping Covid&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#39;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt; &#xA;&lt;h2&gt;Deskripsi&lt;/h2&gt; &#xA;&lt;p&gt;Menceritakan tentang situs web yang discraping.&lt;/p&gt; &#xA;&lt;h2&gt;Contoh dokumen&lt;/h2&gt; &#xA;&lt;p&gt;Berikut ini adalah contoh dokumen pada koleksi MongoDB yang sudah tersimpan&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;_id&#34;:&#xA;  {&#34;$oid&#34;:&#34;64748315df0bae6a4b05efd1&#34;},&#xA;  &#34;no&#34;: {&#xA;    &#34;$numberDouble&#34;:&#34;2.0&#34;&#xA;  },&#xA;  &#34;cases&#34;:&#34;6,806,288&#34;,&#xA;  &#34;deaths&#34;:&#34;161,739&#34;,&#xA;  &#34;recovered&#34;:&#34;6,631,118&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>thomasp85/scico</title>
    <updated>2023-06-18T01:42:41Z</updated>
    <id>tag:github.com,2023-06-18:/thomasp85/scico</id>
    <link href="https://github.com/thomasp85/scico" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Palettes for R based on the Scientific Colour-Maps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;scico &lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/scico/main/man/figures/logo.png&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/thomasp85/scico/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/thomasp85/scico/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=scico&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version-ago/scico&#34; alt=&#34;CRAN_Release_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/thomasp85/scico?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/thomasp85/scico/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;This is a small package to provide access to the colour palettes developed by Fabio Crameri and published at &lt;a href=&#34;http://www.fabiocrameri.ch/colourmaps.php&#34;&gt;http://www.fabiocrameri.ch/colourmaps.php&lt;/a&gt;. It uses more or less the same api as &lt;a href=&#34;https://github.com/sjmgarnier/viridis&#34;&gt;&lt;code&gt;viridis&lt;/code&gt;&lt;/a&gt; and provides scales for &lt;a href=&#34;https://github.com/tidyverse/ggplot2&#34;&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/a&gt; without requiring &lt;code&gt;ggplot2&lt;/code&gt; to be installed.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;scico&lt;/code&gt; can be installed from CRAN with &lt;code&gt;install.packages(&#39;scico&#39;)&lt;/code&gt;. If you want the development version then install directly from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;thomasp85/scico&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Palettes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;scico&lt;/code&gt; provides 35 different palettes, all of which are perceptually uniform and colourblind safe. An overview can be had with the &lt;code&gt;scico_palette_show()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(scico)&#xA;&#xA;scico_palette_show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/scico/main/man/figures/README-unnamed-chunk-3-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you’ve decided on a palette you can generate colour values using the &lt;code&gt;scico()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;scico(30, palette = &#39;lapaz&#39;)&#xA;#&amp;gt;  [1] &#34;#190C65&#34; &#34;#1D196C&#34; &#34;#1E2575&#34; &#34;#202F7D&#34; &#34;#223A85&#34; &#34;#25448B&#34; &#34;#274E92&#34;&#xA;#&amp;gt;  [8] &#34;#2A5898&#34; &#34;#2E629D&#34; &#34;#336CA1&#34; &#34;#3774A3&#34; &#34;#3F7DA5&#34; &#34;#4886A6&#34; &#34;#528EA6&#34;&#xA;#&amp;gt; [15] &#34;#5F95A5&#34; &#34;#6C9AA3&#34; &#34;#7A9E9F&#34; &#34;#87A19A&#34; &#34;#95A494&#34; &#34;#A2A58F&#34; &#34;#ADA78B&#34;&#xA;#&amp;gt; [22] &#34;#BBA989&#34; &#34;#CAAD8A&#34; &#34;#DBB592&#34; &#34;#EBC0A0&#34; &#34;#F6CCB0&#34; &#34;#FBD7C2&#34; &#34;#FDE0D2&#34;&#xA;#&amp;gt; [29] &#34;#FFEAE2&#34; &#34;#FFF2F2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ggplot2 support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;scico&lt;/code&gt; provides relevant scales for use with &lt;code&gt;ggplot2&lt;/code&gt;. It only suggests &lt;code&gt;ggplot2&lt;/code&gt; in order to stay lightweight, but if &lt;code&gt;ggplot2&lt;/code&gt; is available you’ll have access to the &lt;code&gt;scale_[colour|fill]_scico()&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;volcano &amp;lt;- data.frame(&#xA;  x = rep(seq_len(ncol(volcano)), each = nrow(volcano)),&#xA;  y = rep(seq_len(nrow(volcano)), ncol(volcano)),&#xA;  height = as.vector(volcano)&#xA;)&#xA;ggplot(volcano, aes(x = x, y = y, fill = height)) + &#xA;  geom_raster() + &#xA;  scale_fill_scico(palette = &#39;davos&#39;) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/thomasp85/scico/main/man/figures/README-unnamed-chunk-5-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Crameri, Fabio. (2021, September 12). &lt;em&gt;Scientific colour maps (Version 7.0.1)&lt;/em&gt;. Zenodo. doi: 10.5281/zenodo.5501399&lt;/li&gt; &#xA; &lt;li&gt;Crameri, Fabio. (2018). &lt;em&gt;Geodynamic diagnostics, scientific visualisation and StagLab 3.0&lt;/em&gt;. Geosci. Model Dev. Discuss. doi: 10.5194/gmd-2017-328&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>