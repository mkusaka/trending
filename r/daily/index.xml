<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-26T01:33:58Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ellessenne/comorbidity</title>
    <updated>2024-03-26T01:33:58Z</updated>
    <id>tag:github.com,2024-03-26:/ellessenne/comorbidity</id>
    <link href="https://github.com/ellessenne/comorbidity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R package for computing comorbidity scores.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The {comorbidity} Package: Computing Comorbidity Scores &lt;img src=&#34;https://raw.githubusercontent.com/ellessenne/comorbidity/master/man/figures/hex.png&#34; width=&#34;150&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Last updated: 2023-05-02 06:21:44.356829&lt;/p&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ellessenne/comorbidity/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/ellessenne/comorbidity/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/ellessenne/comorbidity?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ellessenne/comorbidity/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=comorbidity&#34;&gt;&lt;img src=&#34;http://www.r-pkg.org/badges/version/comorbidity&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=comorbidity&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/comorbidity&#34; alt=&#34;CRAN_Logs_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=comorbidity&#34;&gt;&lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/comorbidity&#34; alt=&#34;CRAN_Logs_Badge_Total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.21105/joss.00648&#34;&gt;&lt;img src=&#34;http://joss.theoj.org/papers/10.21105/joss.00648/status.svg?sanitize=true&#34; alt=&#34;JOSS DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://makeapullrequest.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;comorbidity&lt;/code&gt; is an R package for computing comorbidity scores such as the weighted Charlson score and the Elixhauser comorbidity score; both ICD-10 and ICD-9 coding systems are supported.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;comorbidity&lt;/code&gt; is on CRAN. You can install it as usual with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;comorbidity&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can install the development version from GitHub with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;ellessenne/comorbidity&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simulating ICD-10 codes&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;comorbidity&lt;/code&gt; packages includes a function named &lt;code&gt;sample_diag()&lt;/code&gt; that allows simulating ICD diagnostic codes in a straightforward way. For instance, we could simulate ICD-10 codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# load the comorbidity package&#xA;library(comorbidity)&#xA;# set a seed for reproducibility&#xA;set.seed(1)&#xA;# simulate 50 ICD-10 codes for 5 individuals&#xA;x &amp;lt;- data.frame(&#xA;  id = sample(1:5, size = 50, replace = TRUE),&#xA;  code = sample_diag(n = 50)&#xA;)&#xA;x &amp;lt;- x[order(x$id, x$code), ]&#xA;print(head(x, n = 15), row.names = FALSE)&#xA;##  id code&#xA;##   1  B02&#xA;##   1 B582&#xA;##   1 I749&#xA;##   1 J450&#xA;##   1 L893&#xA;##   1 Q113&#xA;##   1  Q26&#xA;##   1 Q978&#xA;##   1 T224&#xA;##   1 V101&#xA;##   1 V244&#xA;##   1  V46&#xA;##   2 A665&#xA;##   2 C843&#xA;##   2 D838&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to simulate from two different versions of the ICD-10 coding system. The default is to simulate ICD-10 codes from the 2011 version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(1)&#xA;x1 &amp;lt;- data.frame(&#xA;  id = sample(1:3, size = 30, replace = TRUE),&#xA;  code = sample_diag(n = 30)&#xA;)&#xA;set.seed(1)&#xA;x2 &amp;lt;- data.frame(&#xA;  id = sample(1:3, size = 30, replace = TRUE),&#xA;  code = sample_diag(n = 30, version = &#34;ICD10_2011&#34;)&#xA;)&#xA;# should return TRUE&#xA;all.equal(x1, x2)&#xA;## [1] TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you could use the 2009 version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(1)&#xA;x1 &amp;lt;- data.frame(&#xA;  id = sample(1:3, size = 30, replace = TRUE),&#xA;  code = sample_diag(n = 30, version = &#34;ICD10_2009&#34;)&#xA;)&#xA;set.seed(1)&#xA;x2 &amp;lt;- data.frame(&#xA;  id = sample(1:3, size = 30, replace = TRUE),&#xA;  code = sample_diag(n = 30, version = &#34;ICD10_2011&#34;)&#xA;)&#xA;# should not return TRUE&#xA;all.equal(x1, x2)&#xA;## [1] &#34;Component \&#34;code\&#34;: 30 string mismatches&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simulating ICD-9 codes&lt;/h2&gt; &#xA;&lt;p&gt;ICD-9 codes can be easily simulated too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(2)&#xA;x9 &amp;lt;- data.frame(&#xA;  id = sample(1:3, size = 30, replace = TRUE),&#xA;  code = sample_diag(n = 30, version = &#34;ICD9_2015&#34;)&#xA;)&#xA;x9 &amp;lt;- x9[order(x9$id, x9$code), ]&#xA;print(head(x9, n = 15), row.names = FALSE)&#xA;##  id  code&#xA;##   1 01130&#xA;##   1 01780&#xA;##   1 30151&#xA;##   1  3073&#xA;##   1 36907&#xA;##   1 37845&#xA;##   1 64212&#xA;##   1 66704&#xA;##   1 72633&#xA;##   1  9689&#xA;##   1  V289&#xA;##   2  0502&#xA;##   2 09169&#xA;##   2 20046&#xA;##   2 25082&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Computing comorbidity scores&lt;/h2&gt; &#xA;&lt;p&gt;The main function of the &lt;code&gt;comorbidity&lt;/code&gt; package is named &lt;code&gt;comorbidity()&lt;/code&gt;, and it can be used to compute any supported comorbidity score; scores can be specified by setting the &lt;code&gt;score&lt;/code&gt; argument, which is required.&lt;/p&gt; &#xA;&lt;p&gt;Say we have 3 individuals with a total of 30 ICD-10 diagnostic codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(1)&#xA;x &amp;lt;- data.frame(&#xA;  id = sample(1:3, size = 30, replace = TRUE),&#xA;  code = sample_diag(n = 30)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We could compute the Charlson comorbidity domains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;charlson &amp;lt;- comorbidity(x = x, id = &#34;id&#34;, code = &#34;code&#34;, map = &#34;charlson_icd10_quan&#34;, assign0 = FALSE)&#xA;charlson&#xA;##   id mi chf pvd cevd dementia cpd rheumd pud mld diab diabwc hp rend canc msld metacanc aids&#xA;## 1  1  0   0   0    0        0   0      0   0   0    0      0  0    0    1    0        0    1&#xA;## 2  2  0   0   0    0        0   0      0   0   0    0      0  0    0    1    0        0    0&#xA;## 3  3  0   0   0    0        0   0      0   0   0    0      0  0    0    0    0        0    0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We set the &lt;code&gt;assign0&lt;/code&gt; argument to &lt;code&gt;FALSE&lt;/code&gt; to not apply a hierarchy of comorbidity codes, as described in &lt;code&gt;?comorbidity::comorbidity&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, we could compute the Elixhauser score:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;elixhauser &amp;lt;- comorbidity(x = x, id = &#34;id&#34;, code = &#34;code&#34;, map = &#34;elixhauser_icd10_quan&#34;, assign0 = FALSE)&#xA;elixhauser&#xA;##   id chf carit valv pcd pvd hypunc hypc para ond cpd diabunc diabc hypothy rf ld pud aids lymph&#xA;## 1  1   0     0    0   0   0      0    0    0   0   0       0     0       0  0  0   0    1     0&#xA;## 2  2   0     0    1   0   0      0    0    0   0   0       0     0       0  0  0   0    0     0&#xA;## 3  3   0     0    0   0   0      0    0    0   1   0       0     0       0  0  0   0    0     0&#xA;##   metacanc solidtum rheumd coag obes wloss fed blane dane alcohol drug psycho depre&#xA;## 1        0        1      0    0    0     0   0     0    0       0    0      0     0&#xA;## 2        0        1      0    0    0     0   0     0    0       0    0      0     0&#xA;## 3        0        0      0    0    0     0   0     0    0       0    0      0     0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Weighted an unweighted comorbidity scores can be obtained using the &lt;code&gt;score()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unw_cci &amp;lt;- score(charlson, weights = NULL, assign0 = FALSE)&#xA;unw_cci&#xA;## [1] 2 1 0&#xA;## attr(,&#34;map&#34;)&#xA;## [1] &#34;charlson_icd10_quan&#34;&#xA;&#xA;quan_cci &amp;lt;- score(charlson, weights = &#34;quan&#34;, assign0 = FALSE)&#xA;quan_cci&#xA;## [1] 6 2 0&#xA;## attr(,&#34;map&#34;)&#xA;## [1] &#34;charlson_icd10_quan&#34;&#xA;## attr(,&#34;weights&#34;)&#xA;## [1] &#34;quan&#34;&#xA;&#xA;all.equal(unw_cci, quan_cci)&#xA;## [1] &#34;Attributes: &amp;lt; Length mismatch: comparison on first 1 components &amp;gt;&#34;&#xA;## [2] &#34;Mean relative difference: 1.666667&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code for the Elixhauser score is omitted, but works analogously.&lt;/p&gt; &#xA;&lt;p&gt;Conversely, say we have 5 individuals with a total of 100 ICD-9 diagnostic codes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;set.seed(3)&#xA;x &amp;lt;- data.frame(&#xA;  id = sample(1:5, size = 100, replace = TRUE),&#xA;  code = sample_diag(n = 100, version = &#34;ICD9_2015&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Charlson and Elixhauser comorbidity codes can be easily computed once again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;charlson9 &amp;lt;- comorbidity(x = x, id = &#34;id&#34;, code = &#34;code&#34;, map = &#34;charlson_icd9_quan&#34;, assign0 = FALSE)&#xA;charlson9&#xA;##   id mi chf pvd cevd dementia cpd rheumd pud mld diab diabwc hp rend canc msld metacanc aids&#xA;## 1  1  0   0   1    0        0   0      0   0   0    0      0  0    0    1    0        0    0&#xA;## 2  2  0   0   0    1        0   0      0   0   0    0      0  0    0    0    0        0    0&#xA;## 3  3  0   0   0    0        0   0      0   1   0    0      0  0    0    0    0        0    0&#xA;## 4  4  0   0   1    1        0   0      0   0   0    0      0  0    0    1    0        0    0&#xA;## 5  5  0   0   0    0        0   0      0   0   0    0      0  0    0    1    0        0    0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;elixhauser9 &amp;lt;- comorbidity(x = x, id = &#34;id&#34;, code = &#34;code&#34;, map = &#34;elixhauser_icd9_quan&#34;, assign0 = FALSE)&#xA;elixhauser9&#xA;##   id chf carit valv pcd pvd hypunc hypc para ond cpd diabunc diabc hypothy rf ld pud aids lymph&#xA;## 1  1   0     0    0   0   1      0    0    0   0   0       0     0       0  0  0   0    0     0&#xA;## 2  2   0     0    0   0   0      0    0    0   1   0       0     0       0  0  0   0    0     0&#xA;## 3  3   0     0    0   0   0      0    0    0   0   0       0     0       0  0  0   0    0     0&#xA;## 4  4   0     0    0   1   1      0    0    0   0   0       0     0       0  0  0   0    0     0&#xA;## 5  5   0     0    0   0   0      0    0    0   0   0       0     0       0  0  0   0    0     0&#xA;##   metacanc solidtum rheumd coag obes wloss fed blane dane alcohol drug psycho depre&#xA;## 1        0        0      0    0    0     0   0     0    0       0    0      0     0&#xA;## 2        0        0      0    0    0     0   0     0    0       0    0      0     0&#xA;## 3        0        0      0    0    0     0   0     0    0       0    0      1     0&#xA;## 4        0        0      0    0    0     0   0     0    0       0    0      0     0&#xA;## 5        0        0      1    0    0     0   0     0    0       0    0      0     0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scores:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unw_eci &amp;lt;- score(elixhauser9, weights = NULL, assign0 = FALSE)&#xA;vw_eci &amp;lt;- score(elixhauser9, weights = &#34;vw&#34;, assign0 = FALSE)&#xA;all.equal(unw_eci, vw_eci)&#xA;## [1] &#34;Attributes: &amp;lt; Length mismatch: comparison on first 1 components &amp;gt;&#34;&#xA;## [2] &#34;Mean relative difference: 2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find &lt;code&gt;comorbidity&lt;/code&gt; useful, please cite it in your publications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;citation(&#34;comorbidity&#34;)&#xA;## To cite package &#39;comorbidity&#39; in publications use:&#xA;## &#xA;##   Gasparini, (2018). comorbidity: An R package for computing comorbidity scores. Journal&#xA;##   of Open Source Software, 3(23), 648, https://doi.org/10.21105/joss.00648&#xA;## &#xA;## A BibTeX entry for LaTeX users is&#xA;## &#xA;##   @Article{,&#xA;##     author = {Alessandro Gasparini},&#xA;##     title = {comorbidity: An R package for computing comorbidity scores},&#xA;##     journal = {Journal of Open Source Software},&#xA;##     year = {2018},&#xA;##     volume = {3},&#xA;##     issue = {23},&#xA;##     pages = {648},&#xA;##     doi = {10.21105/joss.00648},&#xA;##     url = {https://doi.org/10.21105/joss.00648},&#xA;##   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;More details on which comorbidity mapping and scoring algorithm are available within the package can be found in the two accompanying vignettes, which can be accessed on CRAN or directly from your R session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vignette(&#34;A-introduction&#34;, package = &#34;comorbidity&#34;)&#xA;vignette(&#34;B-comorbidity-scores&#34;, package = &#34;comorbidity&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;The icon for the hex sticker was made by &lt;a href=&#34;https://www.flaticon.com/authors/monkik&#34;&gt;monkik&lt;/a&gt; from &lt;a href=&#34;https://www.flaticon.com&#34;&gt;www.flaticon.com&lt;/a&gt;, and is licensed by &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0&#34;&gt;Creative Commons BY 3.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Samuel-Osian-Andrews/GroupThink</title>
    <updated>2024-03-26T01:33:58Z</updated>
    <id>tag:github.com,2024-03-26:/Samuel-Osian-Andrews/GroupThink</id>
    <link href="https://github.com/Samuel-Osian-Andrews/GroupThink" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R Package for Easy, Fast &amp; Accurate Survey Data Analysis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GroupThink&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Samuel-Osian-Andrews/GroupThink/raw/main/readme_files/GroupThink_narrow.png&#34; alt=&#34;Banner image for GroupThink package&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Samuel-Osian-Andrews/GroupThink/raw/main/readme_files/GroupThink_second.png&#34; alt=&#34;Graphic depicting code and output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#introduction-and-install&#34;&gt;Introduction and Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#benefits-of-groupthink&#34;&gt;Benefits of GroupThink&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#core-functionality&#34;&gt;Core Functionality&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#the-unify-function&#34;&gt;The &lt;code&gt;unify()&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#left-out-responses&#34;&gt;Left Out Responses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#data-for-unify&#34;&gt;Data for &lt;code&gt;unify()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#view-column-index-numbers&#34;&gt;View Column Index Numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#the-assess-function&#34;&gt;The &lt;code&gt;assess()&lt;/code&gt; Function&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#further-functionality&#34;&gt;Further Functionality&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#aggregate-across-multiple-columnsquestions&#34;&gt;Aggregate Across Multiple Columns/Questions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#make-formatted-tables&#34;&gt;Make Formatted Tables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#filter-out-responses-from-the-output-only&#34;&gt;Filter Out Responses From the Output Only&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#integrate-with-ggplot&#34;&gt;Integrate with ggplot&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#even-more-functionality&#34;&gt;Even More Functionality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#future-plans&#34;&gt;Future Plans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/#bug-reports-and-feature-requests&#34;&gt;Bug Reports and Feature Requests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction and Install&lt;/h2&gt; &#xA;&lt;p&gt;GroupThink is a package designed to assist in the analysis in categorical survey data. It mainly acts as an interface for existing &lt;code&gt;tidyverse&lt;/code&gt; functions - but makes it easier to aggregate responses, do cross-question analysis, and avoid classic mistakes typical of survey data analysis.&lt;/p&gt; &#xA;&lt;p&gt;It currently has two functions:&lt;code&gt;unify()&lt;/code&gt; and &lt;code&gt;assess()&lt;/code&gt; (though others are planned for the future…!).&lt;/p&gt; &#xA;&lt;p&gt;GroupThink isn’t on CRAN, so you’ll need to use &lt;code&gt;devtools&lt;/code&gt; to install it. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;devtools&#34;)&#xA;library(devtools)&#xA;&#xA;devtools::install_github(&#34;Samuel-Osian-Andrews/GroupThink&#34;)&#xA;library(GroupThink)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As GroupThink is still in development, you should periodically reinstall the package to get updates.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;GroupThink depends on &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;tidyr&lt;/code&gt; and &lt;code&gt;gt&lt;/code&gt; libraries. If these aren’t installed automatically when you install GroupThink, you may need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(c(&#34;dplyr&#34;, &#34;tidyr&#34;, &#34;gt&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Benefits of GroupThink&lt;/h2&gt; &#xA;&lt;p&gt;GroupThink is a response to key bottlenecks and common mistakes when analysing survey data. The function is beneficial because it…&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Allows for easy groupings.&lt;/strong&gt; &lt;code&gt;unify()&lt;/code&gt; makes it very easy to group together different Likert-style responses (e.g.&amp;nbsp;combining &lt;code&gt;Somewhat agree&lt;/code&gt; with &lt;code&gt;Strongly agree&lt;/code&gt;, or &lt;code&gt;Excellent&lt;/code&gt; and &lt;code&gt;Very good&lt;/code&gt;). It’s now extremely difficult to make mistakes with incorrect groupings, as &lt;code&gt;unify()&lt;/code&gt; alerts you of any unassigned responses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automates your calculations.&lt;/strong&gt; &lt;code&gt;unify()&lt;/code&gt; handles n and proportion calculations for you, meaning you no longer have to undertake complex data manipulation tasks, avoiding functions such as &lt;code&gt;pivot_longer()&lt;/code&gt;, which can result in inaccurate figures if you’re not careful!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Works with full questions as column headers.&lt;/strong&gt; Typically, exporting survey responses (such as from Microsoft Forms or SurveyMonkey) will leave you with full questions (e.g.&amp;nbsp;“Do you agree or disagree that…”) as column headers. This is usually a nightmare to work with in R. Because &lt;code&gt;unify()&lt;/code&gt; works on column indexes, rather than column names, you don’t need to worry about recoding your columns or typing out full survey questions throughout your code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Gives usable outputs.&lt;/strong&gt;. &lt;code&gt;unify()&lt;/code&gt; neatly integrates with ggplot, allowing you to visualise your aggregated data. Alternatively, you can produce formatted tables through the gtTable argument.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Presents clear, readable syntax.&lt;/strong&gt; Even for those unfamiliar with R syntax, &lt;code&gt;unify()&lt;/code&gt; makes it very clear exactly how you’ve grouped together your responses, improving readability and reproducibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Means faster insights.&lt;/strong&gt; With just a few lines of code, this function could save you hours worth of work for large survey projects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Core functionality&lt;/h2&gt; &#xA;&lt;h3&gt;The &lt;code&gt;unify()&lt;/code&gt; function&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;unify()&lt;/code&gt; function groups together Likert-style responses for a given question or set of questions, returning a summarised output that contains the n and proportion for each of these groupings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unify(data, cols = 1, # ...dataframe name and column index number(s) to analyse&#xA;      &#xA;      # Below, we &#39;group&#39; responses via custom grouping labels (e.g. &#39;Agree&#39;):&#xA;      Agree = c(&#34;Somewhat agree&#34;, &#34;Strongly agree&#34;),&#xA;      Disagree = c(&#34;Somewhat disagree&#34;, &#34;Strongly disagree&#34;),&#xA;      Neutral = &#34;Neither agree nor disagree&#34;,&#xA;&#xA;      ignore = &#34;Don&#39;t know&#34;) # ...optionally, set response(s) to ignore from calcs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 7&#xA;##   Question         `Agree (n)` `Disagree (n)` `Neutral (n)` `Agree (Proportion)`&#xA;##   &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;         &amp;lt;int&amp;gt;                &amp;lt;dbl&amp;gt;&#xA;## 1 I find the cour…          38             32            18                 43.2&#xA;## # ℹ 2 more variables: `Disagree (Proportion)` &amp;lt;dbl&amp;gt;,&#xA;## #   `Neutral (Proportion)` &amp;lt;dbl&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The grouping labels can be anything you like. For example, &lt;code&gt;Agree&lt;/code&gt; could instead be &lt;code&gt;Positive&lt;/code&gt;, &lt;code&gt;Good&lt;/code&gt;, &lt;code&gt;Satisifed&lt;/code&gt; or something else entirely. Similarly, &lt;code&gt;Don&#39;t know&lt;/code&gt; could be its own group, instead of being ignored. You may include as many grouping labels as you’d like.&lt;/p&gt; &#xA;&lt;p&gt;There’s of course nothing wrong with having just 1 response option per group (e.g.&amp;nbsp;&lt;code&gt;&#34;Somewhat agree&#34; = &#34;Somewhat agree&#34;&lt;/code&gt;). The main purpose of &lt;code&gt;unify()&lt;/code&gt; is that it forces you to be &lt;strong&gt;intentional&lt;/strong&gt; with how you handle your data, to improve consistency and avoid mistakes.&lt;br&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Left out responses&lt;/h3&gt; &#xA;&lt;p&gt;If you forgot to include a response in your custom groupings, &lt;code&gt;unify()&lt;/code&gt; will throw an error. This is crucial for avoiding mistakes in your proportion calculations. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unify(data, 1, Agree = &#34;Somewhat agree&#34;,&#xA;                #&#34;Strongly agree&#34;), -- let&#39;s stop unify() from seeing this line&#xA;      Disagree = c(&#34;Somewhat disagree&#34;, &#34;Strongly disagree&#34;),&#xA;      Neutral = &#34;Neither agree nor disagree&#34;,&#xA;      ignore = &#34;Don&#39;t know&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Error in unify(data, 1, Agree = &#34;Somewhat agree&#34;, Disagree = c(&#34;Somewhat disagree&#34;, : The following responses are not accounted for in the provided groups: &#39;Strongly agree&#39;. Please check your grouping arguments.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As seen above, the output tells you that you forgot to assign “Strongly agree” to a grouping variable.&lt;/p&gt; &#xA;&lt;p&gt;These errors are crucial, since other R functions do not warn you if you haven’t accounted for a group, or mistyped “Strongly &lt;strong&gt;A&lt;/strong&gt;gree”, as “Strongly &lt;strong&gt;a&lt;/strong&gt;gree”, for example.&lt;br&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Data for unify()&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;unify()&lt;/code&gt; function expects data that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 10 × 3&#xA;##    I find the course material en…¹ The course workload …² Feedback from assign…³&#xA;##    &amp;lt;fct&amp;gt;                           &amp;lt;fct&amp;gt;                  &amp;lt;fct&amp;gt;                 &#xA;##  1 Somewhat disagree               Agree                  Disagree              &#xA;##  2 Strongly agree                  Disagree               No opinion            &#xA;##  3 Somewhat agree                  Agree                  &amp;lt;NA&amp;gt;                  &#xA;##  4 Somewhat disagree               Unsure                 Disagree              &#xA;##  5 Somewhat agree                  &amp;lt;NA&amp;gt;                   Strongly agree        &#xA;##  6 Strongly agree                  Neither agree nor dis… &amp;lt;NA&amp;gt;                  &#xA;##  7 Strongly disagree               Neither agree nor dis… Strongly agree        &#xA;##  8 Somewhat agree                  Highly disagree        Strongly agree        &#xA;##  9 Somewhat disagree               Neither agree nor dis… Strongly disagree     &#xA;## 10 Somewhat agree                  Neither agree nor dis… Agree                 &#xA;## # ℹ abbreviated names: ¹​`I find the course material engaging and relevant.`,&#xA;## #   ²​`The course workload is manageable within my schedule.`,&#xA;## #   ³​`Feedback from assignments is helpful for my learning.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Responses do not need to be consistently labelled either within or between different questions/columns, and can contain missing data (you’ll likely want to assign &lt;code&gt;NA&lt;/code&gt; to the ignore parameter).&lt;br&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;View column index numbers&lt;/h3&gt; &#xA;&lt;p&gt;Since GroupThink functions work with column &lt;strong&gt;index numbers&lt;/strong&gt;, not column names, you’ll likely want to summarise all index numbers of your dataset. For this, run &lt;code&gt;colnames()&lt;/code&gt; from base-R.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;colnames(data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## [1] &#34;I find the course material engaging and relevant.&#34;    &#xA;## [2] &#34;The course workload is manageable within my schedule.&#34;&#xA;## [3] &#34;Feedback from assignments is helpful for my learning.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;assess()&lt;/code&gt; function&lt;/h3&gt; &#xA;&lt;p&gt;You might find it beneficial to run GroupThink’s &lt;code&gt;assess()&lt;/code&gt; function, which provides an overview of the different response options in your specified columns.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;assess(data, cols = c(2, 3))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## Examining the following columns:&#xA;## &#xA;## Column [2]: The course workload is manageable within my schedule.&#xA;## Column [3]: Feedback from assignments is helpful for my learning.&#xA;## &#xA;## &#xA;## 11 unique responses were found across these columns. Please make sure each response&#xA;## below is accounted for within your `unify()` function call:&#xA;## &#xA;## &#xA;## Agree&#xA;## Disagree&#xA;## Highly agree&#xA;## Highly disagree&#xA;## Indifferent&#xA;## Neither agree nor disagree&#xA;## No opinion&#xA;## Strongly agree&#xA;## Strongly disagree&#xA;## Unsure&#xA;## NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Further functionality&lt;/h2&gt; &#xA;&lt;h4&gt;Aggregate across multiple columns/questions&lt;/h4&gt; &#xA;&lt;p&gt;You are not restricted to analysing just one question/column with &lt;code&gt;unify()&lt;/code&gt;. You can specify multiple columns/questions to use for the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unify(data, c(1, 2, 3), # ...analyse Columns 1, 2 and 3&#xA;      Positive = c(&#34;Somewhat agree&#34;, &#34;Strongly agree&#34;, &#34;Highly agree&#34;, &#34;Agree&#34;),&#xA;      Negative = c(&#34;Somewhat disagree&#34;, &#34;Strongly disagree&#34;, &#34;Highly disagree&#34;,&#xA;                   &#34;Disagree&#34;),&#xA;      ignore = c(NA, &#34;Don&#39;t know&#34;, &#34;Unsure&#34;, &#34;Neither agree nor disagree&#34;,&#xA;                 &#34;No opinion&#34;, &#34;Indifferent&#34;),&#xA;      &#xA;      hideN = TRUE) # ...(optional) hide n column from output (a lot cleaner!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 3 × 3&#xA;##   Question                         Positive (Proportion…¹ Negative (Proportion…²&#xA;##   &amp;lt;chr&amp;gt;                                             &amp;lt;dbl&amp;gt;                  &amp;lt;dbl&amp;gt;&#xA;## 1 Feedback from assignments is he…                   57.8                   42.2&#xA;## 2 I find the course material enga…                   54.3                   45.7&#xA;## 3 The course workload is manageab…                   36.7                   63.3&#xA;## # ℹ abbreviated names: ¹​`Positive (Proportion)`, ²​`Negative (Proportion)`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…Just make sure that you’ve accounted for each response option across your range of columns, otherwise you’ll get an error.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;Make formatted tables&lt;/h4&gt; &#xA;&lt;p&gt;Using the gtTable argument, &lt;code&gt;unify()&lt;/code&gt; makes it simple to create nice, formatted tables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unify(data, 1, Agree = c(&#34;Somewhat agree&#34;, &#34;Strongly agree&#34;),&#xA;      Disagree = c(&#34;Somewhat disagree&#34;, &#34;Strongly disagree&#34;),&#xA;      Neutral = &#34;Neither agree nor disagree&#34;,&#xA;      ignore = &#34;Don&#39;t know&#34;,&#xA;      filter = c(&#34;Agree&#34;, &#34;Disagree&#34;),&#xA;      hideN = TRUE, # ...optionally, hide N column&#xA;      &#xA;      gtTable = TRUE) # ...set gtTable to TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Question&lt;/th&gt; &#xA;   &lt;th&gt;Agree (Proportion)&lt;/th&gt; &#xA;   &lt;th&gt;Disagree (Proportion)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;I find the course material engaging and relevant.&lt;/td&gt; &#xA;   &lt;td&gt;43.2&lt;/td&gt; &#xA;   &lt;td&gt;36.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;Filter out responses from the output only&lt;/h4&gt; &#xA;&lt;p&gt;If you want to only display one response option in the output, we can use the &lt;code&gt;filter&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;Note that this is different from the &lt;code&gt;ignore&lt;/code&gt; parameter: &lt;code&gt;filter&lt;/code&gt; removes unwanted responses &lt;em&gt;after&lt;/em&gt; the calculations have been performed, while &lt;code&gt;ignore&lt;/code&gt; removes them &lt;em&gt;before&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;unify(data, 3,&#xA;      Agree = c(&#34;Agree&#34;, &#34;Strongly agree&#34;),&#xA;      Disagree = c(&#34;Disagree&#34;, &#34;Strongly disagree&#34;),&#xA;      Neither = c(&#34;No opinion&#34;, &#34;Indifferent&#34;),&#xA;      ignore = c(NA, &#34;Don&#39;t know&#34;),&#xA;      &#xA;      filter = &#34;Agree&#34;) # ...only include the Agree group in the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 1 × 3&#xA;##   Question                                      `Agree (n)` `Agree (Proportion)`&#xA;##   &amp;lt;chr&amp;gt;                                               &amp;lt;int&amp;gt;                &amp;lt;dbl&amp;gt;&#xA;## 1 Feedback from assignments is helpful for my …          37                 38.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The other variable groupings are used for the calculations, but only “Agree” responses are shown in the final output.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h4&gt;Integrate with ggplot&lt;/h4&gt; &#xA;&lt;p&gt;Unless you’ve set &lt;code&gt;unify()&lt;/code&gt;’s gtTable() argument to &lt;code&gt;TRUE&lt;/code&gt;, it will output as a tibble. This means it integrates neatly into &lt;code&gt;ggplot()&lt;/code&gt; function calls.&lt;/p&gt; &#xA;&lt;p&gt;Let’s pretend we’ve already run &lt;code&gt;unify()&lt;/code&gt; on columns 1, 2 &amp;amp; 3, and assigned it to the name &lt;code&gt;united&lt;/code&gt;…&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(data = united, # ...unify() output becomes ggplot()&#39;s data argument&#xA;       aes(x = Question, y = `Agree (Proportion)`, fill = Question)) +&#xA;  geom_col() +&#xA;  &#xA;  # ...below are just optional customisation options:&#xA;  coord_flip() +&#xA;  theme_bw() +&#xA;  scale_fill_manual(values = c(&#34;cornflowerblue&#34;, &#34;coral&#34;, &#34;chartreuse3&#34;)) +&#xA;  scale_y_continuous(limits = c(0, 70)) +&#xA;  theme(legend.position = &#34;none&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Samuel-Osian-Andrews/GroupThink/main/readme_files/figure-gfm/ggplot-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Even more functionality&lt;/h2&gt; &#xA;&lt;p&gt;For other functionality not covered in this document, please run &lt;code&gt;?unify()&lt;/code&gt; and &lt;code&gt;?assess()&lt;/code&gt; to view the help files, which covers all function parameters.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Future plans&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;unify()&lt;/code&gt; support for demographic comparison (comparing figures between factors such as age, sex, etc.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add support for &lt;code&gt;stargazer&lt;/code&gt; tables into &lt;code&gt;unify()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Develop a separate function for analysing multiple choice data for data formats typical of exported survey data.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Bug reports and feature requests&lt;/h2&gt; &#xA;&lt;p&gt;Please do let me know of any issues you come across. You can use the &lt;a href=&#34;https://github.com/Samuel-Osian-Andrews/GroupThink/issues&#34;&gt;Issues&lt;/a&gt; tab in GitHub for any bug reports.&lt;/p&gt; &#xA;&lt;p&gt;If you have any ideas for existing features, or perhaps even new ones, then I’d love to hear them. Let me know in the &lt;a href=&#34;https://github.com/Samuel-Osian-Andrews/GroupThink/discussions&#34;&gt;Discussions&lt;/a&gt; tab in GitHub.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pomprodpran/DM-Group-2</title>
    <updated>2024-03-26T01:33:58Z</updated>
    <id>tag:github.com,2024-03-26:/pomprodpran/DM-Group-2</id>
    <link href="https://github.com/pomprodpran/DM-Group-2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Repository for Data Management Group Assignment (Group 2)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DM-Group-2&lt;/h1&gt; &#xA;&lt;p&gt;Repository for Data Management Group Assignment (Group 2)&lt;/p&gt;</summary>
  </entry>
</feed>