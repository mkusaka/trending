<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-19T01:37:42Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PoolLab/ReferenceEnhancer</title>
    <updated>2023-09-19T01:37:42Z</updated>
    <id>tag:github.com,2023-09-19:/PoolLab/ReferenceEnhancer</id>
    <link href="https://github.com/PoolLab/ReferenceEnhancer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ReferenceEnhancer&lt;/h1&gt; &#xA;&lt;p&gt;The goal of ReferenceEnhancer is to generate a scRNA-seq optimized transcriptomic reference.&lt;/p&gt; &#xA;&lt;p&gt;Generating a scRNA-seq optimized transcriptomic reference requires optimizing the genome annotation (&#34;xxx.gtf&#34;) file that transcriptomic references are based on.&lt;/p&gt; &#xA;&lt;p&gt;The following three aspects of genome annotations need to be optimized: A) Resolving gene overlap derived read loss; B) Recovering intergenic reads from 3&#39; un-annotated exons; and C) Recovering intronic reads.&lt;/p&gt; &#xA;&lt;p&gt;After optimizing and assembling the genome annotation, you can use &#34;cellranger mkref&#34; pipeline to assemble the optimized transcriptomic reference for mapping sequencing read data and compiling gene-cell matrices with the &#34;cellranger count&#34; (or other) pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of ReferenceEnhancer as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;devtools&#34;) &#xA;require(devtools) &#xA;install_github(&#34;PoolLab/ReferenceEnhancer&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h1&gt;This is a sample workflow of the package:&lt;/h1&gt; &#xA;&lt;p&gt;This is the basic workflow for optimizing a genome annotation for single-cell RNA-seq work using ReferenceEnhancer:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Load ReferenceEnhancer and import ENSEMBL/10x Genomics default genome annotation file (GTF).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This file can be downloaded from 10x Genomics provided reference transcriptome &#34;gene&#34; folder at &#34;&lt;a href=&#34;https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest&#34;&gt;https://support.10xgenomics.com/single-cell-gene-expression/software/downloads/latest&lt;/a&gt;&#34; or Ensembl.org if wish to customize more.&lt;/p&gt; &#xA;&lt;p&gt;For testing, we have provided a sample file.&lt;/p&gt; &#xA;&lt;p&gt;library(ReferenceEnhancer)&lt;/p&gt; &#xA;&lt;p&gt;genome_annotation &amp;lt;- LoadGtf(unoptimized_annotation_path = &#34;test_genes.gtf&#34;)&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Identify all overlapping genes based on the ENSEMBL/10x Genomics default genome annotation file (GTF), rank-order them according to the number of gene overlaps.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Prioritize this gene list for manual curation focusing on exonically overlapping genes. The function saves the list of overlapping genes in working directory as overlapping_gene_list.csv.&lt;/p&gt; &#xA;&lt;p&gt;gene_overlaps &amp;lt;- IdentifyOverlappers(genome_annotation = genome_annotation)&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Generate recommended actions for overlapping genes based on original genome annotation .gtf file and a list of overlapping genes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The function updates overlapping_gene_list.csv file with added recommendations.&lt;/p&gt; &#xA;&lt;p&gt;OverlapResolutions(genome_annotation = genome_annotation, overlap_data = gene_overlaps, gene_pattern = c(&#34;Rik$&#34;, &#34;^Gm&#34;))&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Extract intergenic reads from Cell Ranger aligned bam file. The function saves extracted intergenic reads in working directory as intergenic_reads.bed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;IsolateIntergenicReads(bam_file_name = &#34;test_bam.bam&#34;, index_file_name = &#34;test_index.bam.bai&#34;, barcode_length = 26)&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Generate gene boundaries in order to assign intergenic reads to a specific gene. The function save resulting in working directory as gene_ranges.bed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: This step runs partially in bash/linux terminal. Before this step, make sure that bedops (&lt;a href=&#34;https://bedops.readthedocs.io/en/latest/&#34;&gt;https://bedops.readthedocs.io/en/latest/&lt;/a&gt;) has been installed to your computer.&lt;/p&gt; &#xA;&lt;p&gt;GenerateGeneLocationBed(genome_annotation = genome_annotation, bedops_loc = NULL)&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Identify candidate genes for extension with excess 3&#39; intergenic reads and create a rank ordered list of genes as a function of 3&#39; intergenic read mapping within 10kb of known gene end. A rank ordered list of gene extension candidates is saved in working directory as gene_extension_candidates.csv.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: This step runs partially in bash/linux terminal. Before this step, make sure that bedtools (&lt;a href=&#34;https://bedtools.readthedocs.io/en/latest/content/installation.html&#34;&gt;https://bedtools.readthedocs.io/en/latest/content/installation.html&lt;/a&gt;) has been installed to your computer and that it has been added to to the path in your R environment.&lt;/p&gt; &#xA;&lt;p&gt;GenerateExtensionCandidates(bedtools_loc = NULL)&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Create the final optimized annotation file. The function saves the result in working directory as optimized_reference.gtf.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;OptimizedAnnotationAssembler(unoptimized_annotation_path = &#34;test_genes.gtf&#34;, gene_overlaps = &#34;test_overlapping_gene_list.csv&#34;, gene_extension = &#34;gene_extension_candidates.csv&#34;, gene_replacement = &#34;test_gene_replacement.csv&#34;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trevor-harris/GeneralOptimization_GradientMethods</title>
    <updated>2023-09-19T01:37:42Z</updated>
    <id>tag:github.com,2023-09-19:/trevor-harris/GeneralOptimization_GradientMethods</id>
    <link href="https://github.com/trevor-harris/GeneralOptimization_GradientMethods" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Azure/AzureRMR</title>
    <updated>2023-09-19T01:37:42Z</updated>
    <id>tag:github.com,2023-09-19:/Azure/AzureRMR</id>
    <link href="https://github.com/Azure/AzureRMR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R package for interacting with Azure Resource Manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AzureRMR &lt;img src=&#34;https://raw.githubusercontent.com/Azure/AzureRMR/master/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;150&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=AzureRMR&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/AzureRMR&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/AzureRMR&#34; alt=&#34;Downloads&#34;&gt; &lt;img src=&#34;https://github.com/Azure/AzureRMR/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;AzureRMR is a package for interacting with Azure Resource Manager: list subscriptions, manage resource groups, deploy and delete templates and resources. It calls the Resource Manager &lt;a href=&#34;https://docs.microsoft.com/en-us/rest/api/resources&#34;&gt;REST API&lt;/a&gt; directly, so you don&#39;t need to have PowerShell or Python installed. Azure Active Directory OAuth tokens are obtained using the &lt;a href=&#34;https://github.com/Azure/AzureAuth&#34;&gt;AzureAuth&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;The primary repo for this package is at &lt;a href=&#34;https://github.com/Azure/AzureRMR&#34;&gt;https://github.com/Azure/AzureRMR&lt;/a&gt;; please submit issues and PRs there. It is also mirrored at the Cloudyr org at &lt;a href=&#34;https://github.com/cloudyr/AzureRMR&#34;&gt;https://github.com/cloudyr/AzureRMR&lt;/a&gt;. You can install the development version of the package with &lt;code&gt;devtools::install_github(&#34;Azure/AzureRMR&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;Under the hood, AzureRMR uses a similar authentication process to the &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest&#34;&gt;Azure CLI&lt;/a&gt;. The first time you authenticate with a given Azure Active Directory tenant, you call &lt;code&gt;create_azure_login()&lt;/code&gt; and supply your credentials. AzureRMR will prompt you for permission to create a special data directory in which to cache the obtained authentication token and Resource Manager login. Once this information is saved on your machine, it can be retrieved in subsequent R sessions with &lt;code&gt;get_azure_login()&lt;/code&gt;. Your credentials will be automatically refreshed so you don&#39;t have to reauthenticate.&lt;/p&gt; &#xA;&lt;p&gt;Unless you have a specific reason otherwise, it&#39;s recommended that you allow AzureRMR to create this caching directory. Note that many other cloud engineering tools save credentials in this way, including the Azure CLI itself.&lt;/p&gt; &#xA;&lt;p&gt;See the &#34;Authentication basics&#34; vignette for more details on how to authenticate with AzureRMR.&lt;/p&gt; &#xA;&lt;h2&gt;Sample workflow&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(AzureRMR)&#xA;&#xA;# authenticate with Azure AD:&#xA;# - on first login to this client, call create_azure_login()&#xA;# - on subsequent logins, call get_azure_login()&#xA;az &amp;lt;- create_azure_login()&#xA;&#xA;# get a subscription and resource group&#xA;sub &amp;lt;- az$get_subscription(&#34;{subscription_id}&#34;)&#xA;rg &amp;lt;- sub$get_resource_group(&#34;rgname&#34;)&#xA;&#xA;# get a resource (storage account)&#xA;stor &amp;lt;- rg$get_resource(type=&#34;Microsoft.Storage/storageAccounts&#34;, name=&#34;mystorage&#34;)&#xA;&#xA;# method chaining works too&#xA;stor &amp;lt;- az$&#xA;    get_subscription(&#34;{subscription_id}&#34;)$&#xA;    get_resource_group(&#34;rgname&#34;)$&#xA;    get_resource(type=&#34;Microsoft.Storage/storageAccounts&#34;, name=&#34;mystorage&#34;)&#xA;&#xA;&#xA;# create a new resource group and resource&#xA;rg2 &amp;lt;- sub$create_resource_group(&#34;newrgname&#34;, location=&#34;westus&#34;)&#xA;&#xA;stor2 &amp;lt;- rg2$create_resource(type=&#34;Microsoft.Storage/storageAccounts&#34;, name=&#34;mystorage2&#34;,&#xA;    kind=&#34;Storage&#34;, sku=list(name=&#34;Standard_LRS&#34;))&#xA;&#xA;# tagging&#xA;stor2$set_tags(comment=&#34;hello world!&#34;, created_by=&#34;AzureRMR&#34;)&#xA;&#xA;# role-based access control (RBAC)&#xA;# this uses the AzureGraph package to retrieve the user ID&#xA;gr &amp;lt;- AzureGraph::get_graph_login()&#xA;usr &amp;lt;- gr$get_user(&#34;username@aadtenant.com&#34;)&#xA;stor2$add_role_assignment(usr, &#34;Storage blob data contributor&#34;)&#xA;&#xA;# pass the GUID of the principal if you don&#39;t have AzureGraph installed&#xA;stor2$add_role_assignment(&#34;041ff2be-4eb0-11e9-8f38-394fbcd0b29d&#34;, &#34;Storage blob data contributor&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending&lt;/h2&gt; &#xA;&lt;p&gt;AzureRMR is meant to be a generic mechanism for working with Resource Manager. You can extend it to provide support for service-specific features; examples of packages that do this include &lt;a href=&#34;https://github.com/Azure/AzureVM&#34;&gt;AzureVM&lt;/a&gt; for &lt;a href=&#34;https://azure.microsoft.com/en-us/services/virtual-machines/&#34;&gt;virtual machines&lt;/a&gt;, and &lt;a href=&#34;https://github.com/Azure/AzureStor&#34;&gt;AzureStor&lt;/a&gt; for &lt;a href=&#34;https://azure.microsoft.com/en-us/product-categories/storage/&#34;&gt;storage accounts&lt;/a&gt;. For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/Azure/AzureRMR/master/vignettes/extend.Rmd&#34;&gt;&#34;Extending AzureRMR&#34; vignette&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;AzureRMR is inspired by the package AzureSMR, originally written by Alan Weaver and Andrie de Vries, and would not have been possible without their pioneering work. Thanks, guys!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Azure/AzureR&#34;&gt;&lt;img src=&#34;https://github.com/Azure/AzureR/raw/master/images/logo2.png&#34; width=&#34;800&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>