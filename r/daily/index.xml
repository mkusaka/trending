<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-03T02:29:26Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>coolbutuseless/cgrep</title>
    <updated>2023-03-03T02:29:26Z</updated>
    <id>tag:github.com,2023-03-03:/coolbutuseless/cgrep</id>
    <link href="https://github.com/coolbutuseless/cgrep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Highlighted grep of R objects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cgrep&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/cool-useless-green.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;cgrep&lt;/code&gt; is a package for highlighting character representations of R objects using regular expressions.&lt;/p&gt; &#xA;&lt;h2&gt;What’s in the box:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cgrep()&lt;/code&gt; for working directly on character strings&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cgrep_character()&lt;/code&gt; matches against the &lt;code&gt;as.character()&lt;/code&gt; output of the object&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cgrep_deparse()&lt;/code&gt; matches against the &lt;code&gt;deparse1()&lt;/code&gt; output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cgrep_print()&lt;/code&gt; matches against the default &lt;code&gt;print()&lt;/code&gt; output of the object&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cgrep_str()&lt;/code&gt; matches against the &lt;code&gt;str()&lt;/code&gt; representation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install from &lt;a href=&#34;https://github.com/coolbutuseless/cgrep&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.package(&#39;remotes&#39;)&#xA;remotes::install_github(&#39;coolbutuseless/cgrep&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example: Highlight a string in a data.frame&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(cgrep)&#xA;&#xA;mtcars |&amp;gt; &#xA;  head(20) |&amp;gt;&#xA;  cgrep_print(&#34;Merc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/cgrep/main/man/figures/df1.png&#34;&gt; &#xA;&lt;h3&gt;Highlight a row in a data.frame which matches a word&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mtcars |&amp;gt; &#xA;  head(20) |&amp;gt;&#xA;  cgrep_print(&#34;^.*wood.*?$&#34;, fg = &#39;blue&#39;, bg = &#39;hotpink&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/cgrep/main/man/figures/df2.png&#34;&gt; &#xA;&lt;h3&gt;Highlight text in a string&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;string &amp;lt;- &#xA;&#34;&amp;lt;xml&amp;gt;&#xA;   &amp;lt;this is=&#39;not&#39;&amp;gt;a real XML doc&amp;lt;/this&amp;gt;&#xA;   &amp;lt;this is=&#39;not&#39;&amp;gt;a real HTML doc&amp;lt;/this&amp;gt;&#xA;   &amp;lt;this is=&#39;not&#39;&amp;gt;a real XML doc&amp;lt;/this&amp;gt;&#xA;   &amp;lt;this is=&#39;not&#39;&amp;gt;a real XML doc&amp;lt;/this&amp;gt;&#xA;&amp;lt;/xml&amp;gt;&#34;&#xA;&#xA;cgrep(string, &#34;html&#34;, ignore.case = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/cgrep/main/man/figures/char1.png&#34;&gt; &#xA;&lt;h3&gt;Highlighting within a character vector&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vals &amp;lt;- c(&#39;hello&#39;, &#39;there&#39;, &#39;#rstats&#39;, &#39;on&#39;, &#39;mastodon&#39;)&#xA;&#xA;cgrep(vals, &#34;rstats&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/cgrep/main/man/figures/vec_print.png&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cgrep_deparse(vals, &#34;rstats&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/coolbutuseless/cgrep/main/man/figures/vec_deparse.png&#34;&gt; &#xA;&lt;h2&gt;Related Software&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coolbutuseless/emphatic&#34;&gt;emphatic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;R Core for developing and maintaining the language.&lt;/li&gt; &#xA; &lt;li&gt;CRAN maintainers, for patiently shepherding packages onto CRAN and maintaining the repository&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nwslR/nwslR</title>
    <updated>2023-03-03T02:29:26Z</updated>
    <id>tag:github.com,2023-03-03:/nwslR/nwslR</id>
    <link href="https://github.com/nwslR/nwslR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nwslR &lt;img src=&#34;https://raw.githubusercontent.com/nwslR/nwslR/main/man/figures/nwslR.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tidyverse.org/lifecycle/#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nwslR/nwslR/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/nwslR/nwslR/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;nwslR&lt;/code&gt; is an R ecosystem that contains datasets and analysis functionality for the National Women’s Soccer League (NWSL). Founded in 2013, the NWSL is the United States’ top professional women’s soccer league, featuring players from all over the world. In an effort to create a reproducible and friendly ecosystem, the setup is heavily inspired by the &lt;a href=&#34;https://github.com/nflverse&#34;&gt;nflverse&lt;/a&gt;. Many thanks to &lt;a href=&#34;https://github.com/tanho63&#34;&gt;Tan Ho&lt;/a&gt; for all his help and advice. An earlier version of the package, created in collaboration with &lt;a href=&#34;https://github.com/sophiatannir&#34;&gt;Sophia Tannir&lt;/a&gt;, exists &lt;a href=&#34;https://github.com/adror1/nwslR&#34;&gt;here&lt;/a&gt;. It is no longer maintained.&lt;/p&gt; &#xA;&lt;p&gt;Accessibility of data in women’s sports (and particularly soccer) lags behind its male counterparts. This package is a contribution to a growing ecosystem of open data sources that aims to make data available to fans and analysts of the league. The main package, &lt;code&gt;nwslR&lt;/code&gt;, provides functions to easily access data that is loaded in the &lt;a href=&#34;https://github.com/nwslR/nwsldata&#34;&gt;nwsldata repo&lt;/a&gt;. Data is updated several times a week during the season and more sporadically in the offseason.&lt;/p&gt; &#xA;&lt;p&gt;If you see anything you’d like added, changed, or updated, please open up a new issue of your own. If you are interested in contributing, please contact us directly. If you use this data in any work, please cite us.&lt;/p&gt; &#xA;&lt;p&gt;This package is currently in the process of changing and updating significantly, so it is suggested that you frequently update it so that you have access to the most recent version. CRAN submission will come when it reaches a stable state.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of nwslR from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;knitr::opts_chunk$set(&#xA;  fig.path = &#34;man/figures/README-&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;nwslR/nwslR&#34;, &#xA;                         ref = &#34;v0.0.0.9000&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available Table Types&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;load_player_match_stats()&lt;/code&gt;: Loads player level stats for a given match&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_player_season_stats()&lt;/code&gt;: Loads player level stats for a team/season&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_team_match_stats()&lt;/code&gt;: Loads team level stats for a given match&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_team_season_stats()&lt;/code&gt;: Loads team level stats for a team/season&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ID Tables&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;load_matches()&lt;/code&gt;: All matches from 2016-present with information and match IDs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_players()&lt;/code&gt;: All players rostered from 2016-present with information and player IDs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_teams()&lt;/code&gt;: All teams active from 2016-present with information and team IDs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;load_metrics()&lt;/code&gt; All metrics available from scrapers with definitions. Not all metrics are available for all players/matches/teams/etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples:&lt;/h1&gt; &#xA;&lt;h2&gt;Example 1: Which player had the highest percentage of shots outside the box?&lt;/h2&gt; &#xA;&lt;p&gt;First, we want to load the data. While the match stat load functions currently only take single inputs, we can use &lt;code&gt;purrr&lt;/code&gt; to pull several matches at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(nwslR)&#xA;library(magrittr)&#xA;library(ggplot2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;matches_2022 &amp;lt;- load_matches() %&amp;gt;%&#xA;  dplyr::filter(season == 2022)&#xA;&#xA;players &amp;lt;- load_players()&#xA;&#xA;# * A small number of matches do not have data, so we wrap this in a safe call to ensure this runs without error &#xA;safe_load_pms &amp;lt;- purrr::possibly(load_player_match_stats, otherwise = data.frame())&#xA;&#xA;player_stats &amp;lt;- purrr::map_df(matches_2022$match_id, safe_load_pms, .progress = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We then calculate percentage of shots outside of the box for each player and format labels for plotting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;player_shots &amp;lt;- player_stats %&amp;gt;%&#xA;  dplyr::select(player_id, team_id, shots_total, shots_outside_box) %&amp;gt;%&#xA;  dplyr::group_by(player_id) %&amp;gt;%&#xA;  dplyr::summarise(shots_total = sum(shots_total), &#xA;                   shots_outside_box = sum(shots_outside_box), &#xA;                   percent_outside_box = shots_outside_box/shots_total) %&amp;gt;%&#xA;  dplyr::filter(shots_total &amp;gt;= 15) %&amp;gt;%&#xA;  dplyr::left_join(players, by = &#34;player_id&#34;) %&amp;gt;%&#xA;  dplyr::mutate(name_label = dplyr::coalesce(player_known_name, paste(player_short_first_name, player_short_last_name, sep = &#34; &#34;))) %&amp;gt;%&#xA;  dplyr::arrange(percent_outside_box) %&amp;gt;%&#xA;  dplyr::slice_max(percent_outside_box, n = 10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, plot!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(player_shots) + &#xA;  geom_bar(aes(x = reorder(name_label, percent_outside_box), y = percent_outside_box), &#xA;           stat = &#34;identity&#34;, &#xA;           fill = &#34;#3765b0&#34;) +&#xA;  scale_y_continuous(labels = scales::percent, limits = c(0, 1)) + &#xA;  labs(x = &#34;&#34;, &#xA;       y = &#34;% of Shots Outside Box&#34;, &#xA;       title = &#34;NWSL 2022 Regular Seasons: Players with Highest % of\nShots Outside of Box&#34;, &#xA;       subtitle = &#34;Minimum 15 Shots&#34;, &#xA;       caption = &#34;Source: nwslR&#34;) + &#xA;  coord_flip() + &#xA;  theme_minimal()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nwslR/nwslR/main/man/figures/README-plot-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example 2: Points Earned and Lost by Teams&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;teams_2022 &amp;lt;- c(&#34;CHI&#34;, &#34;HOU&#34;, &#34;NJY&#34;, &#34;RGN&#34;, &#34;ORL&#34;, &#34;POR&#34;, &#34;WAS&#34;, &#34;NC&#34;, &#34;KCC&#34;, &#34;LOU&#34;, &#34;LA&#34;, &#34;SD&#34;)&#xA;&#xA;teams &amp;lt;- load_teams()&#xA;&#xA;team_stats &amp;lt;- purrr::map_df(teams_2022, ~load_team_season_stats(team_id = .x, season = &#34;2022&#34;), .progress = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;wrangle_team_pts &amp;lt;- team_stats %&amp;gt;%&#xA;  dplyr::select(team_id, pts_gained_from_losing_positions, pts_dropped_from_win_position) %&amp;gt;%&#xA;  dplyr::mutate(pts_dropped_from_win_position = 0 - pts_dropped_from_win_position) %&amp;gt;%&#xA;  tidyr::pivot_longer(!team_id, names_to = &#34;pts_type&#34;, values_to = &#34;points&#34;) %&amp;gt;%&#xA;  dplyr::left_join(teams, by = &#34;team_id&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(wrangle_team_pts) + &#xA;  geom_bar(aes(x = points, y = team_abbreviation, group = team_id, fill = pts_type), &#xA;           stat = &#34;identity&#34;) + &#xA;  scale_y_discrete(limits = rev) + &#xA;  scale_x_continuous(limits = c(-16, 16), &#xA;                     breaks = seq(-16, 16, 4), &#xA;                     labels = c(16, 12, 8, 4, 0, 4, 8, 12, 16)) +&#xA;  scale_fill_manual(labels=c(&#39;Points Lost by Conceding After Leading&#39;, &#39;Points Earned by Winning from Behind&#39;), &#xA;                      values = c(&#34;#1f3b5e&#34;, &#34;#a53924&#34;)) +&#xA;  labs(x = &#34;Points&#34;, &#xA;       y = &#34;&#34;, &#xA;       fill = &#34;&#34;, &#xA;       title = &#34;How Did Teams Deal with In-Game Adversity?: Points Earned/Lost By Teams &#34;, &#xA;       subtitle = &#34;2022 NWSL Regular Season&#34;, &#xA;       caption = &#34;Source: nwslR&#34;) +&#xA;  theme_minimal() +&#xA;  theme(legend.position = &#34;bottom&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nwslR/nwslR/main/man/figures/README-unnamed-chunk-4-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lanagarmire/Asgard</title>
    <updated>2023-03-03T02:29:26Z</updated>
    <id>tag:github.com,2023-03-03:/lanagarmire/Asgard</id>
    <link href="https://github.com/lanagarmire/Asgard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Asgard: A Single-cell Guided pipeline to Aid Repurposing of Drugs&lt;/h2&gt; &#xA;&lt;p&gt;Using scRNA-seq data, Asgard repurposes drugs and predicts personalized drug combinations to address the cellular heterogeneity of patients.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.springernature.com/full/springer-static/image/art%3A10.1038%2Fs41467-023-36637-3/MediaObjects/41467_2023_36637_Fig1_HTML.png?as=webp&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Citation&lt;/h3&gt; &#xA;&lt;p&gt;He, B., Xiao, Y., Liang, H. et al. ASGARD is A Single-cell Guided Pipeline to Aid Repurposing of Drugs. &lt;em&gt;Nat Commun&lt;/em&gt; 14, 993 (2023). &lt;a href=&#34;https://doi.org/10.1038/s41467-023-36637-3&#34;&gt;https://doi.org/10.1038/s41467-023-36637-3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware requirements&lt;/h3&gt; &#xA;&lt;p&gt;Asgard package requires only a standard computer with enough RAM (&amp;gt;64GB) to support the in-memory operations.&lt;/p&gt; &#xA;&lt;h3&gt;Software requirements&lt;/h3&gt; &#xA;&lt;h4&gt;OS requirements&lt;/h4&gt; &#xA;&lt;p&gt;The package has been tested on the following systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Windows 10&#xA;CentOS Linux 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;R packages recommended&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Seurat&#xA;limma&#xA;cmapR&#xA;SingleR&#xA;celldex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Install devtools if you don&#39;t have it&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#39;devtools&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install recommended packages&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;if (!requireNamespace(&#34;BiocManager&#34;, quietly = TRUE))&#xA;    install.packages(&#34;BiocManager&#34;)&#xA;    &#xA;BiocManager::install(c(&#34;SingleR&#34;,&#34;limma&#34;,&#34;cmapR&#34;,&#34;celldex&#34;))&#xA;&#xA;install.packages(&#39;Seurat&#39;)&#xA;&#xA;#If you can&#39;t install a package with above commands, try to download the gz file and install it locally.&#xA;&#xA;#Take celldex package as an example:&#xA;&#xA;#Downlaod the source package of celldex in linux&#xA;wget https://bioconductor.org/packages/release/data/experiment/src/contrib/celldex_1.0.0.tar.gz&#xA;&#xA;#Start R&#xA;R&#xA;&#xA;#Install celldex from the local source package&#xA;install.packages(&#39;celldex_1.0.0.tar.gz&#39;)&#xA;&#xA;#Note: some dependency packages require R version newer than 4.0&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install Asgard&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;devtools::install_github(&#34;lanagarmire/Asgard&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Load Asgard&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Asgard&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prepare Drug Referecne Library&lt;/h2&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;h4&gt;Download L1000 Connectivity Map perturbational profiles GSE70138 and GSE92742 from GEO&lt;/h4&gt; &#xA;&lt;p&gt;Method 1: click file names below &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_cell_info_2017-04-28.txt.gz&#34;&gt;GSE70138_Broad_LINCS_cell_info_2017-04-28.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_Level5_COMPZ_n118050x12328_2017-03-06.gctx.gz&#34;&gt;GSE70138_Broad_LINCS_Level5_COMPZ_n118050x12328_2017-03-06.gctx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_sig_info_2017-03-06.txt.gz&#34;&gt;GSE70138_Broad_LINCS_sig_info_2017-03-06.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_gene_info_2017-03-06.txt.gz&#34;&gt;GSE70138_Broad_LINCS_gene_info_2017-03-06.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/geo/series/GSE92nnn/GSE92742/suppl/GSE92742_Broad_LINCS_cell_info.txt.gz&#34;&gt;GSE92742_Broad_LINCS_cell_info.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/geo/series/GSE92nnn/GSE92742/suppl/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx.gz&#34;&gt;GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftp.ncbi.nlm.nih.gov/geo/series/GSE92nnn/GSE92742/suppl/GSE92742_Broad_LINCS_sig_info.txt.gz&#34;&gt;GSE92742_Broad_LINCS_sig_info.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;or Method 2: run following commands in linux&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_cell_info_2017-04-28.txt.gz&#xA;wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_Level5_COMPZ_n118050x12328_2017-03-06.gctx.gz&#xA;wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_sig_info_2017-03-06.txt.gz&#xA;wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE70nnn/GSE70138/suppl/GSE70138_Broad_LINCS_gene_info_2017-03-06.txt.gz&#xA;wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE92nnn/GSE92742/suppl/GSE92742_Broad_LINCS_cell_info.txt.gz&#xA;wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE92nnn/GSE92742/suppl/GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx.gz&#xA;wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE92nnn/GSE92742/suppl/GSE92742_Broad_LINCS_sig_info.txt.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2&lt;/h4&gt; &#xA;&lt;h4&gt;Generate tissue specific drug references from GSE70138 and GSE92742&lt;/h4&gt; &#xA;&lt;p&gt;Unzip downloaded files, revise the Your_local_path and run the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Asgard&#39;)&#xA;&#xA;#Please replace Your_local_path with your real local folder&#xA;&#xA;PrepareReference(cell.info=&#34;GSE70138_Broad_LINCS_cell_info_2017-04-28.txt&#34;,&#xA;                 gene.info=&#34;GSE70138_Broad_LINCS_gene_info_2017-03-06.txt&#34;,&#xA;                 GSE70138.sig.info = &#34;GSE70138_Broad_LINCS_sig_info_2017-03-06.txt&#34;,&#xA;                 GSE92742.sig.info = &#34;GSE92742_Broad_LINCS_sig_info.txt&#34;,&#xA;                 GSE70138.gctx = &#34;GSE70138_Broad_LINCS_Level5_COMPZ_n118050x12328_2017-03-06.gctx&#34;,&#xA;                 GSE92742.gctx = &#34;GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx&#34;,&#xA;                 Output.Dir = &#34;DrugReference/&#34;&#xA;)&#xA;&#xA;#Note: the file names here maybe different after unzipping.&#xA;#Please note that it takes more than one hour to produce drug references in a standard computer with RAM&amp;gt;64GB.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please use &#39;?PrepareReference&#39; for more help.&lt;/p&gt; &#xA;&lt;h2&gt;Drug Repurposing&lt;/h2&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;h4&gt;Load single-cell RNA-seq data&lt;/h4&gt; &#xA;&lt;p&gt;Download datasets GSE113197 and GSE123926 from GEO before running this script.&lt;/p&gt; &#xA;&lt;p&gt;Human Breast Cancer Epithelial Cells (GSE123926): &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE123926&amp;amp;format=file&#34;&gt;GSE123926_RAW.tar&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Normal Human Breast Epithelial Cells (GSE113197): &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE113197&amp;amp;format=file&#34;&gt;GSE113197_RAW.tar&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Seurat&#39;)&#xA;&#xA;#Load normal sample Ind5 from GSE113197 dataset&#xA;celltype&amp;lt;-read.table(file=&#34;https://raw.githubusercontent.com/lanagarmire/Single-cell-drug-repositioning/master/Normal_celltype.txt&#34;,header = T,check.names=FALSE)&#xA;data&amp;lt;-read.table(file=&#34;GSM3099847_Ind5_Expression_Matrix.txt&#34;,header = T,check.names=FALSE)&#xA;row.names(data)&amp;lt;-data[,1]&#xA;data&amp;lt;-data[,-1]&#xA;celltype2&amp;lt;-subset(celltype,sample==&#34;Ind5&#34; &amp;amp; celltype %in% c(&#34;Luminal_L2_epithelial_cells&#34;,&#34;Luminal_L1.1_epithelial_cells&#34;, &#34;Luminal_L1.2_epithelial_cells&#34;, &#34;Basal_epithelial_cells&#34;))&#xA;common &amp;lt;- intersect(colnames(data), rownames(celltype2))&#xA;data&amp;lt;-data[,common]&#xA;Epithelial2 &amp;lt;- CreateSeuratObject(counts = data, project = &#34;Epithelial&#34;, min.cells = 3, min.features = 200,meta.data=data.frame(celltype2,cell=colnames(data),type=&#34;Normal&#34;))&#xA;&#xA;#Load normal sample Ind6 from GSE113197 dataset&#xA;data&amp;lt;-read.table(file=&#34;GSM3099848_Ind6_Expression_Matrix.txt&#34;,header = T,check.names=FALSE)&#xA;row.names(data)&amp;lt;-data[,1]&#xA;data&amp;lt;-data[,-1]&#xA;celltype3&amp;lt;-subset(celltype,sample==&#34;Ind6&#34; &amp;amp; celltype %in% c(&#34;Luminal_L2_epithelial_cells&#34;,&#34;Luminal_L1.1_epithelial_cells&#34;, &#34;Luminal_L1.2_epithelial_cells&#34;, &#34;Basal_epithelial_cells&#34;))&#xA;common &amp;lt;- intersect(colnames(data), rownames(celltype3))&#xA;data&amp;lt;-data[,common]&#xA;Epithelial3 &amp;lt;- CreateSeuratObject(counts = data, project = &#34;Epithelial&#34;, min.cells = 3, min.features = 200,meta.data=data.frame(celltype3,cell=colnames(data),type=&#34;Normal&#34;))&#xA;&#xA;#Load normal sample Ind7 from GSE113197 dataset&#xA;data&amp;lt;-read.table(file=&#34;GSM3099849_Ind7_Expression_Matrix.txt&#34;,header = T,check.names=FALSE)&#xA;row.names(data)&amp;lt;-data[,1]&#xA;data&amp;lt;-data[,-1]&#xA;celltype4&amp;lt;-subset(celltype,sample==&#34;Ind7&#34; &amp;amp; celltype %in% c(&#34;Luminal_L2_epithelial_cells&#34;,&#34;Luminal_L1.1_epithelial_cells&#34;, &#34;Luminal_L1.2_epithelial_cells&#34;, &#34;Basal_epithelial_cells&#34;))&#xA;common &amp;lt;- intersect(colnames(data), rownames(celltype4))&#xA;data&amp;lt;-data[,common]&#xA;Epithelial4 &amp;lt;- CreateSeuratObject(counts = data, project = &#34;Epithelial&#34;, min.cells = 3, min.features = 200,meta.data=data.frame(celltype4,cell=colnames(data),type=&#34;Normal&#34;))&#xA;&#xA;#Load cancer sample PDX110 from GSE123926 dataset&#xA;TNBC_PDX.data&amp;lt;- Read10X(data.dir = &#34;GSM3516947_PDX110&#34;)&#xA;TNBC.PDX2 &amp;lt;- CreateSeuratObject(counts = TNBC_PDX.data, project = &#34;TNBC&#34;, min.cells = 3, min.features = 200, meta.data=data.frame(row.names=colnames(TNBC_PDX.data), cell=colnames(TNBC_PDX.data), sample=&#34;PDX-110&#34;,type=&#34;TNBC.PDX&#34;))&#xA;&#xA;#Load cancer sample PDX322 from GSE123926 dataset&#xA;TNBC_PDX.data&amp;lt;- Read10X(data.dir = &#34;GSM3516948_PDX322&#34;)&#xA;TNBC.PDX3 &amp;lt;- CreateSeuratObject(counts = TNBC_PDX.data, project = &#34;TNBC&#34;, min.cells = 3, min.features = 200, meta.data=data.frame(row.names=colnames(TNBC_PDX.data), cell=colnames(TNBC_PDX.data), sample=&#34;PDX-332&#34;,type=&#34;TNBC.PDX&#34;))&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2&lt;/h4&gt; &#xA;&lt;h4&gt;Single-cell alignment&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;SC.list&amp;lt;-list(TNBC.PDX2=TNBC.PDX2,TNBC.PDX3=TNBC.PDX3,Epithelial2=Epithelial2,Epithelial3=Epithelial3,Epithelial4=Epithelial4)&#xA;CellCycle=TRUE #Set it TRUE if you want to do Cell Cycle Regression&#xA;anchor.features=2000&#xA;&#xA;for (i in 1:length(SC.list)) {&#xA;     SC.list[[i]] &amp;lt;- NormalizeData(SC.list[[i]], verbose = FALSE)&#xA;     SC.list[[i]] &amp;lt;- FindVariableFeatures(SC.list[[i]], selection.method = &#34;vst&#34;,&#xA;                           nfeatures = anchor.features, verbose = FALSE)&#xA;    }&#xA;    SC.anchors &amp;lt;- FindIntegrationAnchors(object.list = SC.list,anchor.features = anchor.features, dims = 1:15)&#xA;    SC.integrated &amp;lt;- IntegrateData(anchorset = SC.anchors, dims = 1:15)&#xA;    DefaultAssay(SC.integrated) &amp;lt;- &#34;integrated&#34;&#xA;    if(CellCycle){&#xA;    ##Cell Cycle Regression&#xA;    s.genes &amp;lt;- cc.genes$s.genes&#xA;    g2m.genes &amp;lt;- cc.genes$g2m.genes&#xA;    SC.integrated &amp;lt;- CellCycleScoring(SC.integrated, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)&#xA;    SC.integrated &amp;lt;- ScaleData(SC.integrated, vars.to.regress = c(&#34;S.Score&#34;, &#34;G2M.Score&#34;), features = rownames(SC.integrated))&#xA;    SC.integrated &amp;lt;- RunPCA(SC.integrated, npcs = 15, verbose = FALSE)&#xA;    }else{&#xA;     ##Run the standard workflow for visualization and clustering&#xA;     SC.integrated &amp;lt;- ScaleData(SC.integrated, verbose = FALSE)&#xA;     SC.integrated &amp;lt;- RunPCA(SC.integrated, npcs = 15, verbose = FALSE)&#xA;    }&#xA;    ##t-SNE and Clustering&#xA;    SC.integrated &amp;lt;- RunUMAP(SC.integrated, reduction = &#34;pca&#34;, dims = 1:15)&#xA;    SC.integrated &amp;lt;- FindNeighbors(SC.integrated, reduction = &#34;pca&#34;, dims = 1:15)&#xA;    SC.integrated &amp;lt;- FindClusters(SC.integrated, algorithm = 1, resolution = 0.4)&#xA;&#xA;    ##Cell Type Annotation, set by.CellType=TRUE if you want to annotate cell  type.&#xA;    by.CellType=FALSE&#xA;    if(by.CellType == TRUE){&#xA;     data &amp;lt;- as.matrix(SC.integrated@assays$RNA@data)&#xA;     hpca.se &amp;lt;- HumanPrimaryCellAtlasData()&#xA;     pred.hpca &amp;lt;- SingleR(test = data, ref = hpca.se, assay.type.test=1, labels = hpca.se$label.main)&#xA;     cell.label &amp;lt;- data.frame(row.names = row.names(pred.hpca),celltype=pred.hpca$labels)&#xA;     if(length(SC.integrated@meta.data$celltype)&amp;gt;0){&#xA;      SC.integrated@meta.data$celltype &amp;lt;- cell.label$celltype&#xA;     }else{&#xA;       SC.integrated@meta.data &amp;lt;- cbind(SC.integrated@meta.data,cell.label)&#xA;     }&#xA;     new.cells &amp;lt;- data.frame()&#xA;     for(i in unique(SC.integrated$seurat_clusters)){&#xA;      sub.data &amp;lt;- subset(SC.integrated,seurat_clusters==i)&#xA;      temp &amp;lt;- table(sub.data@meta.data$celltype)&#xA;      best.cell &amp;lt;- names(which(temp==temp[which.max(temp)]))&#xA;      cells.temp &amp;lt;- data.frame(cell.id=row.names(sub.data@meta.data),celltype=best.cell)&#xA;      new.cells &amp;lt;- rbind(new.cells,cells.temp)&#xA;     }&#xA;     cell.meta &amp;lt;- SC.integrated@meta.data&#xA;     cell.id &amp;lt;- rownames(cell.meta)&#xA;     row.names(new.cells) &amp;lt;- new.cells[,1]&#xA;     new.cells &amp;lt;- new.cells[cell.id,]&#xA;     SC.integrated@meta.data$celltype &amp;lt;- new.cells$celltype&#xA;    }else{&#xA;     SC.integrated@meta.data$celltype &amp;lt;- paste0(&#34;C&#34;,as.numeric(SC.integrated@meta.data$seurat_clusters))&#xA;    }&#xA;&#xA;#Change sample names&#xA;sample&amp;lt;-SC.integrated@meta.data$sample&#xA;sample[which(sample==&#34;Ind5&#34;)]&amp;lt;-&#34;Normal1&#34;&#xA;sample[which(sample==&#34;Ind6&#34;)]&amp;lt;-&#34;Normal2&#34;&#xA;sample[which(sample==&#34;Ind7&#34;)]&amp;lt;-&#34;Normal3&#34;&#xA;SC.integrated@meta.data$sample&amp;lt;-sample&#xA;&#xA;#Visualize alignment result&#xA;DimPlot(SC.integrated, reduction = &#34;umap&#34;, split.by = &#34;sample&#34;,group.by = &#34;celltype&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3&lt;/h4&gt; &#xA;&lt;h4&gt;Single-cell comparison&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;#Case sample names&#xA;Case=c(&#34;PDX-110&#34;,&#34;PDX-332&#34;)&#xA;&#xA;#Control sample names&#xA;Control=c(&#34;Normal1&#34;,&#34;Normal2&#34;,&#34;Normal3&#34;)&#xA;&#xA;&#xA;#Get differential gene expression profiles for every cell type (or cluster if without annotation) from Limma&#xA;library(&#39;limma&#39;)&#xA;DefaultAssay(SC.integrated) &amp;lt;- &#34;RNA&#34;&#xA;set.seed(123456)&#xA;Gene.list &amp;lt;- list()&#xA;C_names &amp;lt;- NULL&#xA;for(i in unique(SC.integrated@meta.data$celltype)){&#xA;     Idents(SC.integrated) &amp;lt;- &#34;celltype&#34;&#xA;     c_cells &amp;lt;- subset(SC.integrated, celltype == i)&#xA;     Idents(c_cells) &amp;lt;- &#34;type&#34;&#xA;     Samples=c_cells@meta.data&#xA;     Controlsample &amp;lt;- row.names(subset(Samples,sample %in% Control))&#xA;     Casesample &amp;lt;- row.names(subset(Samples,sample %in% Case))&#xA;     if(length(Controlsample)&amp;gt;min.cells &amp;amp; length(Casesample)&amp;gt;min.cells){&#xA;      expr &amp;lt;- as.matrix(c_cells@assays$RNA@data)&#xA;      new_expr &amp;lt;- as.matrix(expr[,c(Casesample,Controlsample)])&#xA;      new_sample &amp;lt;- data.frame(Samples=c(Casesample,Controlsample),type=c(rep(&#34;Case&#34;,length(Casesample)),rep(&#34;Control&#34;,length(Controlsample))))&#xA;      row.names(new_sample) &amp;lt;- paste(new_sample$Samples,row.names(new_sample),sep=&#34;_&#34;)&#xA;      expr &amp;lt;- new_expr&#xA;      bad &amp;lt;- which(rowSums(expr&amp;gt;0)&amp;lt;3)&#xA;      expr &amp;lt;- expr[-bad,]&#xA;      mm &amp;lt;- model.matrix(~0 + type, data = new_sample)&#xA;      fit &amp;lt;- lmFit(expr, mm)&#xA;      contr &amp;lt;- makeContrasts(typeCase - typeControl, levels = colnames(coef(fit)))&#xA;      tmp &amp;lt;- contrasts.fit(fit, contrasts = contr)&#xA;      tmp &amp;lt;- eBayes(tmp)&#xA;      C_data &amp;lt;- topTable(tmp, sort.by = &#34;P&#34;,n = nrow(tmp))&#xA;      C_data_for_drug &amp;lt;- data.frame(row.names=row.names(C_data),score=C_data$t,adj.P.Val=C_data$adj.P.Val,P.Value=C_data$P.Value)&#xA;      Gene.list[[i]] &amp;lt;- C_data_for_drug&#xA;      C_names &amp;lt;- c(C_names,i)&#xA;     }&#xA;}&#xA;names(Gene.list) &amp;lt;- C_names&#xA;&#xA;#Get differential genes from Seurat (Wilcoxon Rank Sum test)&#xA;library(&#39;Seurat&#39;)&#xA;DefaultAssay(SC.integrated) &amp;lt;- &#34;RNA&#34;&#xA;set.seed(123456)&#xA;Gene.list &amp;lt;- list()&#xA;C_names &amp;lt;- NULL&#xA;for(i in unique(SC.integrated@meta.data$celltype)){&#xA;  Idents(SC.integrated) &amp;lt;- &#34;celltype&#34;&#xA;  c_cells &amp;lt;- subset(SC.integrated, celltype == i)&#xA;  Idents(c_cells) &amp;lt;- &#34;type&#34;&#xA;  C_data &amp;lt;- FindMarkers(c_cells, ident.1 = &#34;TNBC.PDX&#34;, ident.2 = &#34;Normal&#34;)&#xA;  C_data_for_drug &amp;lt;- data.frame(row.names=row.names(C_data),score=C_data$avg_logFC,adj.P.Val=C_data$p_val_adj,P.Value=C_data$p_val) ##for Seurat version &amp;gt; 4.0, please use avg_log2FC instead of avg_logFC&#xA;  Gene.list[[i]] &amp;lt;- C_data_for_drug&#xA;  C_names &amp;lt;- c(C_names,i)&#xA;}&#xA;names(Gene.list) &amp;lt;- C_names&#xA;&#xA;#Get differential genes from DESeq2 method&#xA;library(&#39;Seurat&#39;)&#xA;DefaultAssay(SC.integrated) &amp;lt;- &#34;RNA&#34;&#xA;set.seed(123456)&#xA;Gene.list &amp;lt;- list()&#xA;C_names &amp;lt;- NULL&#xA;for(i in unique(SC.integrated@meta.data$celltype)){&#xA;  Idents(SC.integrated) &amp;lt;- &#34;celltype&#34;&#xA;  c_cells &amp;lt;- subset(SC.integrated, celltype == i)&#xA;  Idents(c_cells) &amp;lt;- &#34;type&#34;&#xA;  C_data &amp;lt;- FindMarkers(c_cells, ident.1 = &#34;TNBC.PDX&#34;, ident.2 = &#34;Normal&#34;, test.use = &#34;DESeq2&#34;)&#xA;  C_data_for_drug &amp;lt;- data.frame(row.names=row.names(C_data),score=C_data$avg_logFC,adj.P.Val=C_data$p_val_adj,P.Value=C_data$p_val) ##for Seurat version &amp;gt; 4.0, please use avg_log2FC instead of avg_logFC&#xA;  Gene.list[[i]] &amp;lt;- C_data_for_drug&#xA;  C_names &amp;lt;- c(C_names,i)&#xA;}&#xA;names(Gene.list) &amp;lt;- C_names&#xA;&#xA;#Get differential genes from EdgeR&#xA;library(&#39;edgeR&#39;)&#xA;Case=c(&#34;PDX-110&#34;,&#34;PDX-332&#34;)&#xA;Control=c(&#34;Normal1&#34;,&#34;Normal2&#34;,&#34;Normal3&#34;)&#xA;DefaultAssay(SC.integrated) &amp;lt;- &#34;RNA&#34;&#xA;set.seed(123456)&#xA;min.cells=3 # The minimum number of cells for a cell type. A cell type is omitted if it has less cells than the minimum number.&#xA;Gene.list &amp;lt;- list()&#xA;C_names &amp;lt;- NULL&#xA;for(i in unique(SC.integrated@meta.data$celltype)){&#xA;  Idents(SC.integrated) &amp;lt;- &#34;celltype&#34;&#xA;  c_cells &amp;lt;- subset(SC.integrated, celltype == i)&#xA;  Idents(c_cells) &amp;lt;- &#34;type&#34;&#xA;  Samples=c_cells@meta.data&#xA;  Controlsample &amp;lt;- row.names(subset(Samples,sample %in% Control))&#xA;  Casesample &amp;lt;- row.names(subset(Samples,sample %in% Case))&#xA;  if(length(Controlsample)&amp;gt;min.cells &amp;amp; length(Casesample)&amp;gt;min.cells){&#xA;    expr &amp;lt;- as.matrix(c_cells@assays$RNA@data)&#xA;    new_expr &amp;lt;- as.matrix(expr[,c(Casesample,Controlsample)])&#xA;    new_sample &amp;lt;- data.frame(Samples=c(Casesample,Controlsample),type=c(rep(&#34;Case&#34;,length(Casesample)),rep(&#34;Control&#34;,length(Controlsample))))&#xA;    row.names(new_sample) &amp;lt;- paste(new_sample$Samples,row.names(new_sample),sep=&#34;_&#34;)&#xA;    expr &amp;lt;- new_expr&#xA;    bad &amp;lt;- which(rowSums(expr&amp;gt;0)&amp;lt;3)&#xA;    expr &amp;lt;- expr[-bad,]&#xA;    group &amp;lt;- new_sample$type&#xA;    dge &amp;lt;- DGEList(counts=expr, group=group)&#xA;    group_edgeR &amp;lt;- factor(group,levels = c(&#34;Control&#34;,&#34;Case&#34;))&#xA;    design &amp;lt;- model.matrix(~ group_edgeR)&#xA;    dge &amp;lt;- estimateDisp(dge, design = design)&#xA;    fit &amp;lt;- glmFit(dge, design)&#xA;    res &amp;lt;- glmLRT(fit)&#xA;    C_data &amp;lt;- res$table&#xA;    C_data_for_drug &amp;lt;- data.frame(row.names=row.names(C_data),score=C_data$logFC,adj.P.Val=p.adjust(C_data$PValue,method = &#34;BH&#34;),P.Value=C_data$PValue)&#xA;    Gene.list[[i]] &amp;lt;- C_data_for_drug&#xA;    C_names &amp;lt;- c(C_names,i)&#xA;  }&#xA;}&#xA;names(Gene.list) &amp;lt;- C_names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 4&lt;/h4&gt; &#xA;&lt;h4&gt;Mono-drug repurposing for every cell type&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Asgard&#39;)&#xA;&#xA;#Load tissue specific drug reference produced by PrepareReference function as mentioned above. Please select proper tissue accroding to the disease.&#xA;my_gene_info&amp;lt;-read.table(file=&#34;DrugReference/breast_gene_info.txt&#34;,sep=&#34;\t&#34;,header = T,quote = &#34;&#34;)&#xA;my_drug_info&amp;lt;-read.table(file=&#34;DrugReference/breast_drug_info.txt&#34;,sep=&#34;\t&#34;,header = T,quote = &#34;&#34;)&#xA;drug.ref.profiles = GetDrugRef(drug.response.path = &#39;DrugReference/breast_rankMatrix.txt&#39;,&#xA;                               probe.to.genes = my_gene_info, &#xA;                               drug.info = my_drug_info)&#xA;&#xA;#Repurpose mono-drugs for every cell type                               &#xA;Drug.ident.res = GetDrug(gene.data = Gene.list, &#xA;                        drug.ref.profiles = drug.ref.profiles, &#xA;                        repurposing.unit = &#34;drug&#34;, &#xA;                        connectivity = &#34;negative&#34;, &#xA;                        drug.type = &#34;FDA&#34;)&#xA;                       &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &#39;?GetDrug&#39; for more help&lt;/p&gt; &#xA;&lt;h4&gt;Step 5&lt;/h4&gt; &#xA;&lt;h4&gt;Estimation of drug score&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Asgard&#39;)&#xA;library(&#39;Seurat&#39;)&#xA;&#xA;GSE92742.gctx.path=&#34;GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx&#34;&#xA;GSE70138.gctx.path=&#34;GSE70138_Broad_LINCS_Level5_COMPZ_n118050x12328_2017-03-06.gctx&#xA;Tissue=&#34;breast&#34;&#xA;Drug.score&amp;lt;-DrugScore(SC.integrated=SC.integrated,&#xA;                     Gene.data=Gene.list,&#xA;                     Cell.type=NULL, &#xA;                     Drug.data=Drug.ident.res,&#xA;                     FDA.drug.only=TRUE,&#xA;                     Case=Case, &#xA;                     Tissue=&#34;breast&#34;,&#xA;                     GSE92742.gctx=GSE92742.gctx.path,&#xA;                     GSE70138.gctx=GSE70138.gctx.path)&#xA;#Cell.type: select cell types/clusters to be used for drug score estimation&#xA;#Case: select samples to be used for drug score estimation&#xA;#Please use &#34; &#34; instead of &#34;-&#34; in tissue name, for example, while haematopoietic-and-lymphoid-tissue is the prefix of the drug reference files, the corresponding tissue name is &#34;haematopoietic and lymphoid tissue&#34;. &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &#39;?DrugScore&#39; for more help&lt;/p&gt; &#xA;&lt;h4&gt;Step 6&lt;/h4&gt; &#xA;&lt;h4&gt;Select mono-drug therapies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Asgard&#39;)&#xA;library(&#39;Seurat&#39;)&#xA;&#xA;#Select drug using drug socre&#xA;library(Hmisc)&#xA;Final.drugs&amp;lt;-subset(Drug.score,Drug.therapeutic.score&amp;gt;quantile(Drug.score$Drug.therapeutic.score, 0.99,na.rm=T) &amp;amp; FDR &amp;lt;0.05)&#xA;&#xA;&#xA;#Select drug for individual clusters&#xA;Final.drugs&amp;lt;-TopDrug(SC.integrated=SC.integrated,&#xA;                   Drug.data=Drug.ident.res,&#xA;                   Drug.FDR=0.1,&#xA;                   FDA.drug.only=TRUE,&#xA;                   Case=Case.samples,&#xA;                   DrugScore=FALSE&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 7 (optional)&lt;/h4&gt; &#xA;&lt;h4&gt;Drug combination analysis&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Asgard&#39;)&#xA;library(&#39;Seurat&#39;)&#xA;&#xA;GSE92742.gctx.path=&#34;GSE92742_Broad_LINCS_Level5_COMPZ.MODZ_n473647x12328.gctx&#34;&#xA;GSE70138.gctx.path=&#34;GSE70138_Broad_LINCS_Level5_COMPZ_n118050x12328_2017-03-06.gctx&#34;&#xA;Drug.combinations&amp;lt;-DrugCombination(SC.integrated=SC.integrated,&#xA;                      Gene.data=Gene.list,&#xA;                      Drug.data=Drug.ident.res,&#xA;                      Drug.FDR=0.1,&#xA;                      FDA.drug.only=TRUE,&#xA;                      Combined.drugs=2,&#xA;                      Case=Case,&#xA;                      Tissue=&#34;breast&#34;,&#xA;                      GSE92742.gctx=GSE92742.gctx.path,&#xA;                      GSE70138.gctx=GSE70138.gctx.path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please use &#39;?DrugCombination&#39; for more help.&lt;/p&gt; &#xA;&lt;h4&gt;Select drug combination therapies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(&#39;Asgard&#39;)&#xA;Final.combinations&amp;lt;-TopCombination(Drug.combination=Drug.combinations,&#xA;                   Combination.FDR=0.1,&#xA;                   Min.combination.score=1&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo codes using real datasets are available at: &lt;a href=&#34;https://github.com/lanagarmire/Single-cell-drug-repositioning&#34;&gt;https://github.com/lanagarmire/Single-cell-drug-repositioning&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have further questions or comments, please contact Dr.Bing He: &lt;a href=&#34;mailto:hbing@umich.edu&#34;&gt;hbing@umich.edu&lt;/a&gt; or &lt;a href=&#34;mailto:hebinghb@gmail.com&#34;&gt;hebinghb@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>