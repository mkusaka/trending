<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-13T01:47:45Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Azure/Microsoft365R</title>
    <updated>2023-06-13T01:47:45Z</updated>
    <id>tag:github.com,2023-06-13:/Azure/Microsoft365R</id>
    <link href="https://github.com/Azure/Microsoft365R" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R SDK for interacting with Microsoft 365 APIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microsoft365R &lt;img src=&#34;https://raw.githubusercontent.com/Azure/Microsoft365R/master/man/figures/logo.png&#34; align=&#34;right&#34; width=&#34;150&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=Microsoft365R&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/Microsoft365R&#34; alt=&#34;CRAN&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/Microsoft365R&#34; alt=&#34;Downloads&#34;&gt; &lt;img src=&#34;https://github.com/Azure/Microsoft365R/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft365R is intended to be a simple yet powerful R interface to &lt;a href=&#34;https://www.microsoft.com/en-us/microsoft-365&#34;&gt;Microsoft 365&lt;/a&gt; (formerly known as Office 365), leveraging the facilities provided by the &lt;a href=&#34;https://cran.r-project.org/package=AzureGraph&#34;&gt;AzureGraph&lt;/a&gt; package. Currently it supports Microsoft Teams, Outlook, SharePoint Online, and OneDrive.&lt;/p&gt; &#xA;&lt;p&gt;The primary repo for this package is at &lt;a href=&#34;https://github.com/Azure/Microsoft365R&#34;&gt;https://github.com/Azure/Microsoft365R&lt;/a&gt;; please submit issues and PRs there. It is also mirrored at the Cloudyr org at &lt;a href=&#34;https://github.com/cloudyr/Microsoft365R&#34;&gt;https://github.com/cloudyr/Microsoft365R&lt;/a&gt;. You can install the development version of the package with &lt;code&gt;devtools::install_github(&#34;Azure/Microsoft365R&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;The first time you call one of the Microsoft365R functions (see below), it will use your Internet browser to authenticate with Azure Active Directory, in a similar manner to other web apps. See &lt;a href=&#34;https://github.com/Azure/Microsoft365R/raw/master/inst/app_registration.md&#34;&gt;app_registration.md&lt;/a&gt; for more details on the app registration and permissions requested. The &#34;Authentication&#34; vignette describes the authentication process in greater depth, including optional arguments and troubleshooting common problems.&lt;/p&gt; &#xA;&lt;h2&gt;Client functions&lt;/h2&gt; &#xA;&lt;p&gt;Microsoft365R defines a number of top-level client functions to access the individual Microsoft 365 services. Below are some simple code examples that show how to use the package. For more information, see the vignettes for the individual services.&lt;/p&gt; &#xA;&lt;h3&gt;OneDrive&lt;/h3&gt; &#xA;&lt;p&gt;To access your personal OneDrive call &lt;code&gt;get_personal_onedrive()&lt;/code&gt;, and to access OneDrive for Business, call &lt;code&gt;get_business_onedrive()&lt;/code&gt;. These return an R6 client object of class &lt;code&gt;ms_drive&lt;/code&gt;, which has methods for working with files and folders. `&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;od &amp;lt;- get_personal_onedrive()&#xA;odb &amp;lt;- get_business_onedrive()&#xA;&#xA;# list files and folders&#xA;od$list_items()&#xA;od$list_items(&#34;Documents&#34;)&#xA;&#xA;# upload and download files&#xA;od$upload_file(&#34;somedata.xlsx&#34;)&#xA;od$download_file(&#34;Documents/myfile.docx&#34;)&#xA;&#xA;# create a folder&#xA;od$create_folder(&#34;Documents/newfolder&#34;)&#xA;&#xA;# open a document for editing in Word Online&#xA;od$open_item(&#34;Documents/myfile.docx&#34;)&#xA;&#xA;# working with data frames and R objects&#xA;od$save_dataframe(iris, &#34;Documents/iris.csv&#34;)&#xA;iris2 &amp;lt;- od$load_dataframe(&#34;Documents/iris.csv&#34;)&#xA;&#xA;wtmod &amp;lt;- lm(wt ~ ., data=mtcars)&#xA;od$save_rds(wtmod, &#34;Documents/wtmod.rds&#34;)&#xA;wtmod2 &amp;lt;- od$load_rds(&#34;Documents/wtmod.rds&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SharePoint Online&lt;/h3&gt; &#xA;&lt;p&gt;To access a SharePoint site, use the &lt;code&gt;get_sharepoint_site()&lt;/code&gt; function and provide the site name, URL or ID. You can also list the sites you&#39;re following with &lt;code&gt;list_sharepoint_sites()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;list_sharepoint_sites()&#xA;site &amp;lt;- get_sharepoint_site(&#34;My site&#34;)&#xA;&#xA;# document libraries&#xA;site$list_drives()&#xA;&#xA;# default document library&#xA;drv &amp;lt;- site$get_drive()&#xA;&#xA;# a drive has the same methods as for OneDrive above&#xA;drv$list_items()&#xA;drv$open_item(&#34;teamproject/plan.xlsx&#34;)&#xA;&#xA;# lists&#xA;site$get_lists()&#xA;&#xA;lst &amp;lt;- site$get_list(&#34;my-list&#34;)&#xA;&#xA;# return the items in the list as a data frame&#xA;lst$list_items()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Teams&lt;/h3&gt; &#xA;&lt;p&gt;To access a team in Microsoft Teams, use the &lt;code&gt;get_team()&lt;/code&gt; function and provide the team name or ID. You can also list the teams you&#39;re in with &lt;code&gt;list_teams()&lt;/code&gt;. These return objects of R6 class &lt;code&gt;ms_team&lt;/code&gt; which has methods for working with channels; in turn, a channel has methods for working with messages and transferring files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;list_teams()&#xA;team &amp;lt;- get_team(&#34;My team&#34;)&#xA;&#xA;# associated SharePoint site and drive&#xA;team$get_drive()&#xA;team$get_sharepoint_site()&#xA;&#xA;# channels&#xA;team$list_channels()&#xA;&#xA;chan &amp;lt;- team$get_channel(&#34;General&#34;)&#xA;&#xA;# messages&#xA;chan$list_messages()&#xA;chan$send_message(&#34;Hello from R&#34;, attachments=&#34;hello.md&#34;)&#xA;&#xA;msg &amp;lt;- chan$get_message(&#34;msg-id&#34;)&#xA;msg$send_reply(&#34;Reply from R&#34;)&#xA;&#xA;# files: similar methods to OneDrive&#xA;chan$list_files()&#xA;chan$download_file(&#34;myfile.docx&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Outlook&lt;/h3&gt; &#xA;&lt;p&gt;Microsoft365R supports sending, receiving and managing emails in Outlook. Use the &lt;code&gt;get_personal_outlook()&lt;/code&gt; method to access your emails for your personal account, and &lt;code&gt;get_business_outlook()&lt;/code&gt; for your work or school account. Emails can optionally be composed using either the blastula or emayili packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;outl &amp;lt;- get_personal_outlook()&#xA;outlb &amp;lt;- get_business_outlook()&#xA;&#xA;# compose an email with blastula&#xA;library(blastula)&#xA;bl_body &amp;lt;- &#34;## Hello!&#xA;&#xA;This is an email message that was generated by the blastula package.&#xA;&#xA;We can use **Markdown** formatting with the `md()` function.&#xA;&#xA;Cheers,&#xA;&#xA;The blastula team&#34;&#xA;&#xA;bl_em &amp;lt;- compose_email(&#xA;    body=md(bl_body),&#xA;    footer=md(&#34;sent via Microsoft365R&#34;)&#xA;)&#xA;em &amp;lt;- outl$create_email(bl_em, subject=&#34;Hello from R&#34;, to=&#34;bob@example.com&#34;)&#xA;&#xA;# add an attachment and send it&#xA;em$add_attachment(&#34;mydocument.docx&#34;)&#xA;em$send()&#xA;&#xA;# list the most recent emails in your inbox&#xA;emlst &amp;lt;- outl$list_emails()&#xA;&#xA;# reply to the most recent email&#xA;emlst[[1]]$&#xA;    create_reply(&#34;Replying from R&#34;)$&#xA;    send()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Azure/AzureR&#34;&gt;&lt;img src=&#34;https://github.com/Azure/AzureR/raw/master/images/logo2.png&#34; width=&#34;800&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>briandconnelly/ami</title>
    <updated>2023-06-13T01:47:45Z</updated>
    <id>tag:github.com,2023-06-13:/briandconnelly/ami</id>
    <link href="https://github.com/briandconnelly/ami" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Checks for Various Computing Environments&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ami&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=ami&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/ami&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/briandconnelly/ami/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/briandconnelly/ami/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/briandconnelly/ami?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/briandconnelly/ami/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;ami (“am I?”) provides a unified collection of lightweight checks that can be used to better understand the environments in which your code is running. This includes different operating systems, Continuous Integration (CI) environments, containers, and more. Similar or identical functions already exist. However, most of these functions exist within highly specialized packages, so using several of them can quickly create a lot of dependencies for your own projects.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the latest released version of ami by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;ami&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you’d like to try out the development version of ami, you can install directly from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;briandconnelly/ami&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Some Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Am I online?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ami::online()&#xA;#&amp;gt; [1] TRUE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Am I using RStudio? Am I using a dark theme?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ami::using_rstudio()&#xA;#&amp;gt; [1] FALSE&#xA;&#xA;ami::using_rstudio_dark_theme()&#xA;#&amp;gt; [1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Am I using macOS and an Intel Mac?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ami::using_macos() &amp;amp;&amp;amp; ami::using_x86_cpu()&#xA;#&amp;gt; [1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Are we running in a Docker container?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ami::using_docker_container()&#xA;#&amp;gt; [1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Are we using a continuous integration service? GitHub Actions?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ami::using_ci()&#xA;#&amp;gt; [1] FALSE&#xA;&#xA;ami::using_github_actions()&#xA;#&amp;gt; [1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other environments&lt;/h3&gt; &#xA;&lt;p&gt;ami can be used to check any environment variable. For example, we can see if we’re running in a &lt;a href=&#34;https://python-poetry.org&#34;&gt;Poetry&lt;/a&gt; environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ami::using_envvar(&#34;POETRY_ACTIVE&#34;)&#xA;#&amp;gt; [1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also check for package options. Here, we’ll see whether &lt;a href=&#34;https://cran.r-project.org/package=boot&#34;&gt;boot&lt;/a&gt; is configured to do parallel bootstrapping using multiple cores:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ami::using_option(&#34;boot.parallel&#34;, &#34;multicore&#34;)&#xA;#&amp;gt; [1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you’re using options as part of package development, check out the &lt;a href=&#34;https://cran.r-project.org/package=options&#34;&gt;options&lt;/a&gt; package.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yankay/Time-Series-Analysis-with-Applications</title>
    <updated>2023-06-13T01:47:45Z</updated>
    <id>tag:github.com,2023-06-13:/yankay/Time-Series-Analysis-with-Applications</id>
    <link href="https://github.com/yankay/Time-Series-Analysis-with-Applications" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Time Series Analysis with Applications R code&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>