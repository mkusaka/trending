<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-08T01:43:59Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>medavoodi/BIS-244-Spring-2023</title>
    <updated>2023-02-08T01:43:59Z</updated>
    <id>tag:github.com,2023-02-08:/medavoodi/BIS-244-Spring-2023</id>
    <link href="https://github.com/medavoodi/BIS-244-Spring-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Course Materials BIS 244 Spring 2023&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BIS-244-Spring-2023&lt;/h1&gt; &#xA;&lt;p&gt;Course Materials BIS 244 Spring 2023&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>insightsengineering/formatters</title>
    <updated>2023-02-08T01:43:59Z</updated>
    <id>tag:github.com,2023-02-08:/insightsengineering/formatters</id>
    <link href="https://github.com/insightsengineering/formatters" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for creating listings of raw data that include specialized formatting, headers, footers, referential footnotes, and pagination.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;formatters&lt;/h1&gt; &#xA;&lt;!-- start badges --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/insightsengineering/formatters/actions/workflows/check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/insightsengineering/formatters/actions/workflows/check.yaml/badge.svg?sanitize=true&#34; alt=&#34;Check ðŸ› &#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://insightsengineering.github.io/formatters/&#34;&gt;&lt;img src=&#34;https://github.com/insightsengineering/formatters/actions/workflows/docs.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docs ðŸ“š&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/insightsengineering/formatters/_xml_coverage_reports/data/main/coverage.xml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insightsengineering/formatters/_xml_coverage_reports/data/main/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage ðŸ“”&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/forks/insightsengineering/formatters?style=social&#34; alt=&#34;GitHub forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/insightsengineering/formatters?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/insightsengineering/formatters&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/insightsengineering/formatters&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/insightsengineering/formatters&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/insightsengineering/formatters&#34; alt=&#34;GitHub pull requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/insightsengineering/formatters&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/count/insightsengineering/formatters&#34; alt=&#34;GitHub language count&#34;&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/insightsengineering/formatters/tree/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/r-package/v/insightsengineering/formatters/main?color=purple&amp;amp;label=package%20version&#34; alt=&#34;Current Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/insightsengineering/formatters/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/insightsengineering/formatters?color=red&amp;amp;label=open%20issues&#34; alt=&#34;Open Issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- end badges --&gt; &#xA;&lt;p&gt;The &lt;code&gt;formatters&lt;/code&gt; package provides two core pieces of functionality, both related to ASCII rendering:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;format_value&lt;/code&gt; provides the ability to format single- and multi-valued elements into ASCII display-ready strings&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;matrix_form&lt;/code&gt; framework provides generics for implementing ASCII rendering support for display tables&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Both of these feature sets are used in the &lt;code&gt;rtables&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The core motivation for &lt;code&gt;formatters&lt;/code&gt; is the rendering of reporting tables into ASCII. In this context a &#34;value&#34; is the raw content that to appear in a single table cell. Most commonly this is a numeric vector of length 1, 2 or â€“ occasionally â€“ 3.&lt;/p&gt; &#xA;&lt;h2&gt;Format labels&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;formatters&lt;/code&gt; ships with a large number of pre-defined formats appropriate for rendering values into ASCII strings. These existing formats are specified by their labels. We can see the list of these by calling the &lt;code&gt;list_valid_format_labels&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;list_valid_format_labels()&#xA;&#xA;$`1d`&#xA; [1] &#34;xx&#34;                 &#34;xx.&#34;                &#34;xx.x&#34;&#xA; [4] &#34;xx.xx&#34;              &#34;xx.xxx&#34;             &#34;xx.xxxx&#34;&#xA; [7] &#34;xx%&#34;                &#34;xx.%&#34;               &#34;xx.x%&#34;&#xA;[10] &#34;xx.xx%&#34;             &#34;xx.xxx%&#34;            &#34;(N=xx)&#34;&#xA;[13] &#34;&amp;gt;999.9&#34;             &#34;&amp;gt;999.99&#34;            &#34;x.xxxx | (&amp;lt;0.0001)&#34;&#xA;&#xA;$`2d`&#xA; [1] &#34;xx / xx&#34;            &#34;xx. / xx.&#34;          &#34;xx.x / xx.x&#34;&#xA; [4] &#34;xx.xx / xx.xx&#34;      &#34;xx.xxx / xx.xxx&#34;    &#34;xx (xx%)&#34;&#xA; [7] &#34;xx (xx.%)&#34;          &#34;xx (xx.x%)&#34;         &#34;xx (xx.xx%)&#34;&#xA;[10] &#34;xx. (xx.%)&#34;         &#34;xx.x (xx.x%)&#34;       &#34;xx.xx (xx.xx%)&#34;&#xA;[13] &#34;(xx, xx)&#34;           &#34;(xx., xx.)&#34;         &#34;(xx.x, xx.x)&#34;&#xA;[16] &#34;(xx.xx, xx.xx)&#34;     &#34;(xx.xxx, xx.xxx)&#34;   &#34;(xx.xxxx, xx.xxxx)&#34;&#xA;[19] &#34;xx - xx&#34;            &#34;xx.x - xx.x&#34;        &#34;xx.xx - xx.xx&#34;&#xA;[22] &#34;xx (xx)&#34;            &#34;xx. (xx.)&#34;          &#34;xx.x (xx.x)&#34;&#xA;[25] &#34;xx.xx (xx.xx)&#34;      &#34;xx (xx.)&#34;           &#34;xx (xx.x)&#34;&#xA;[28] &#34;xx (xx.xx)&#34;         &#34;xx.x, xx.x&#34;         &#34;xx.x to xx.x&#34;&#xA;&#xA;$`3d`&#xA;[1] &#34;xx.xx (xx.xx - xx.xx)&#34;&#xA;&#xA;attr(,&#34;info&#34;)&#xA;[1] &#34;xx does not modify the element, and xx. rounds a number to 0 digits&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of these labels describes how the incoming (possibly multi-element) raw value will be formatted. &lt;code&gt;xx&lt;/code&gt; indicates that an element of the value will be printed as is, with no modification. &lt;code&gt;xx.&lt;/code&gt; indicates that a numeric value element will be rounded to 0 decimal places, &lt;code&gt;xx.x&lt;/code&gt; indicates rounding to 1 decimal place, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Formatting values&lt;/h2&gt; &#xA;&lt;p&gt;Values are formatted via calls to &lt;code&gt;format_value&lt;/code&gt;, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;format_value(5.1235, format = &#34;xx.xx&#34;)&#xA;&#xA;[1] &#34;5.12&#34;&#xA;&#xA;format_value(c(1.2355, 2.6789), &#34;(xx.xx, xx.xx)&#34;)&#xA;&#xA;[1] &#34;(1.24, 2.68)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table Rendering Framework&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advanced Usage Only&lt;/strong&gt; These features are supported, and in fact are used in &lt;code&gt;rtables&lt;/code&gt; and the experimental &lt;code&gt;rlistings&lt;/code&gt;. That said, the API is currently very low-level and tailored to what &lt;code&gt;rtables&lt;/code&gt; and &lt;code&gt;rlistings&lt;/code&gt; need. How useful this is to other table frameworks may vary.&lt;/p&gt; &#xA;&lt;p&gt;The second major piece of functionality in &lt;code&gt;formatters&lt;/code&gt; is the ability to render tables into ASCII (and thus directly to the terminal) based on a so-called &lt;code&gt;MatrixPrintForm&lt;/code&gt; representation of the table.&lt;/p&gt; &#xA;&lt;p&gt;To hook up &lt;code&gt;rtables&lt;/code&gt;-style ASCII display for your tables, it suffices to export a method for the exported &lt;code&gt;matrix_form&lt;/code&gt; generic &lt;code&gt;formatters&lt;/code&gt; provides. This method must return a &lt;code&gt;MatrixPrintForm&lt;/code&gt; object representing your table.&lt;/p&gt; &#xA;&lt;p&gt;We can build a baby example method for &lt;code&gt;data.frames&lt;/code&gt; to illustrate this process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;## pagdfrow supports a large number of pieces of information regarding&#xA;## siblings and what information should be repeated after a pagination.&#xA;## we ignore all that here and just give the absolutely crucial info:&#xA;## nm (name), lab (label), rnum (absolute row position), pth (&#34;path&#34;),&#xA;## extent (how many lines it takes up), rclass (&#34;class of row&#34;)&#xA;fake_pagdf_row &amp;lt;- function(i, rnms) {&#xA;    nm &amp;lt;- rnms[i]&#xA;    pagdfrow(nm = nm, lab = nm, rnum = i, pth = nm, extent = 1L,&#xA;             rclass = &#34;NA&#34;)&#xA;}&#xA;&#xA;matrix_form.data.frame &amp;lt;- function(df) {&#xA;    fmts &amp;lt;- lapply(df, function(x) if(is.null(obj_format(x))) &#34;xx&#34; else obj_format(x))&#xA;&#xA;    bodystrs &amp;lt;- mapply(function(x, fmt) {&#xA;        sapply(x, format_value, format = fmt)&#xA;    }, x = df, fmt = fmts)&#xA;&#xA;    rnms &amp;lt;- row.names(df)&#xA;    if(is.null(rnms))&#xA;        rnms &amp;lt;- as.character(seq_len(NROW(df)))&#xA;&#xA;    cnms &amp;lt;- names(df)&#xA;&#xA;    strings &amp;lt;- rbind(c(&#34;&#34;, cnms),&#xA;                     cbind(rnms, bodystrs))&#xA;&#xA;    fnr &amp;lt;- nrow(strings)&#xA;    fnc &amp;lt;- ncol(strings)&#xA;&#xA;    ## center alignment for column labels, left alignment for everything else&#xA;    aligns &amp;lt;- rbind(&#34;center&#34;,&#xA;                    matrix(&#34;left&#34;, nrow = NROW(df), ncol = fnc))&#xA;    ## build up fake pagination df,&#xA;    rowdf &amp;lt;- basic_pagdf(row.names(df))&#xA;    matrix_print_form(strings = strings,&#xA;                      aligns = aligns,&#xA;                      spans = matrix(1, nrow = fnr, ncol = fnc),&#xA;                      formats = NULL,&#xA;                      row_info = rowdf,&#xA;                      has_topleft = FALSE,&#xA;                      nlines_header = 1,&#xA;                      nrow_header = 1)&#xA;}&#xA;cat(toString(matrix_form.data.frame(mtcars)))&#xA;&#xA;                      mpg    cyl   disp    hp    drat    wt     qsec    vs   am   gear   carb&#xA;â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”&#xA;Mazda RX4             21     6     160     110   3.9    2.62    16.46   0    1    4      4&#xA;Mazda RX4 Wag         21     6     160     110   3.9    2.875   17.02   0    1    4      4&#xA;Datsun 710            22.8   4     108     93    3.85   2.32    18.61   1    1    4      1&#xA;Hornet 4 Drive        21.4   6     258     110   3.08   3.215   19.44   1    0    3      1&#xA;Hornet Sportabout     18.7   8     360     175   3.15   3.44    17.02   0    0    3      2&#xA;Valiant               18.1   6     225     105   2.76   3.46    20.22   1    0    3      1&#xA;Duster 360            14.3   8     360     245   3.21   3.57    15.84   0    0    3      4&#xA;Merc 240D             24.4   4     146.7   62    3.69   3.19    20      1    0    4      2&#xA;Merc 230              22.8   4     140.8   95    3.92   3.15    22.9    1    0    4      2&#xA;Merc 280              19.2   6     167.6   123   3.92   3.44    18.3    1    0    4      4&#xA;Merc 280C             17.8   6     167.6   123   3.92   3.44    18.9    1    0    4      4&#xA;Merc 450SE            16.4   8     275.8   180   3.07   4.07    17.4    0    0    3      3&#xA;Merc 450SL            17.3   8     275.8   180   3.07   3.73    17.6    0    0    3      3&#xA;Merc 450SLC           15.2   8     275.8   180   3.07   3.78    18      0    0    3      3&#xA;Cadillac Fleetwood    10.4   8     472     205   2.93   5.25    17.98   0    0    3      4&#xA;Lincoln Continental   10.4   8     460     215   3      5.424   17.82   0    0    3      4&#xA;Chrysler Imperial     14.7   8     440     230   3.23   5.345   17.42   0    0    3      4&#xA;Fiat 128              32.4   4     78.7    66    4.08   2.2     19.47   1    1    4      1&#xA;Honda Civic           30.4   4     75.7    52    4.93   1.615   18.52   1    1    4      2&#xA;Toyota Corolla        33.9   4     71.1    65    4.22   1.835   19.9    1    1    4      1&#xA;Toyota Corona         21.5   4     120.1   97    3.7    2.465   20.01   1    0    3      1&#xA;Dodge Challenger      15.5   8     318     150   2.76   3.52    16.87   0    0    3      2&#xA;AMC Javelin           15.2   8     304     150   3.15   3.435   17.3    0    0    3      2&#xA;Camaro Z28            13.3   8     350     245   3.73   3.84    15.41   0    0    3      4&#xA;Pontiac Firebird      19.2   8     400     175   3.08   3.845   17.05   0    0    3      2&#xA;Fiat X1-9             27.3   4     79      66    4.08   1.935   18.9    1    1    4      1&#xA;Porsche 914-2         26     4     120.3   91    4.43   2.14    16.7    0    1    5      2&#xA;Lotus Europa          30.4   4     95.1    113   3.77   1.513   16.9    1    1    5      2&#xA;Ford Pantera L        15.8   8     351     264   4.22   3.17    14.5    0    1    5      4&#xA;Ferrari Dino          19.7   6     145     175   3.62   2.77    15.5    0    1    5      6&#xA;Maserati Bora         15     8     301     335   3.54   3.57    14.6    0    1    5      8&#xA;Volvo 142E            21.4   4     121     109   4.11   2.78    18.6    1    1    4      2&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>