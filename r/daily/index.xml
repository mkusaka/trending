<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-13T01:36:30Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>posit-dev/mcptools</title>
    <updated>2025-08-13T01:36:30Z</updated>
    <id>tag:github.com,2025-08-13:/posit-dev/mcptools</id>
    <link href="https://github.com/posit-dev/mcptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Model Context Protocol For R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mcptools &lt;a href=&#34;https://posit-dev.github.io/mcptools/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/posit-dev/mcptools/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;240&#34; alt=&#34;A hexagonal logo showing a bridge connecting two portions of a forested meadow.&#34; /&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/posit-dev/mcptools/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/posit-dev/mcptools/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;mcptools implements the &lt;a href=&#34;https://modelcontextprotocol.io/&#34;&gt;Model Context Protocol&lt;/a&gt; in R. There are two sides to mcptools:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;R as an MCP server&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/posit-dev/mcptools/main/man/figures/r_as_a_server.png&#34; alt=&#34;A system architecture diagram showing three main components: Client (left), Server (center), and Session (right). The Client box lists AI coding assistants including Claude Desktop, Claude Code, Copilot Chat in VS Code, and Positron Assistant. The Server is initiated with `mcp_server()` and contains tools for R functions like reading package documentation, running R code, and inspecting global environment objects. Sessions can be configured with `mcp_session()` and can optionally connect to interactive R sessions, with two example projects shown: &#39;Some R Project&#39; and &#39;Other R Project&#39;.&#34; width=&#34;100%&#34; /&gt; &#xA;&lt;p&gt;When configured with mcptools, MCP-enabled tools like Claude Desktop, Claude Code, and VS Code GitHub Copilot can run R code &lt;em&gt;in the sessions you have running&lt;/em&gt; to answer your questions. While the package supports configuring arbitrary R functions, you may be interested in the &lt;a href=&#34;https://posit-dev.github.io/btw/&#34;&gt;btw&lt;/a&gt; package’s integrated support for mcptools, which provides a default set of tools to to peruse the documentation of packages you have installed, check out the objects in your global environment, and retrieve metadata about your session and platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;R as an MCP client&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/posit-dev/mcptools/main/man/figures/r_as_a_client.png&#34; alt=&#34;An architecture diagram showing the Client (left) with R code using the ellmer library to create a chat object and then setting tools from mcp with `mcp_tools()`, and the Server (right) containing third-party tools including GitHub (for reading PRs/Issues), Confluence (for searching), and Google Drive (for searching). Bidirectional arrows indicate communication between the client and server components.&#34; width=&#34;100%&#34; /&gt; &#xA;&lt;p&gt;Register third-party MCP servers with &lt;a href=&#34;https://ellmer.tidyverse.org/&#34;&gt;ellmer&lt;/a&gt; chats to integrate additional context into e.g.&amp;nbsp;&lt;a href=&#34;https://github.com/posit-dev/shinychat&#34;&gt;shinychat&lt;/a&gt; and &lt;a href=&#34;https://posit-dev.github.io/querychat/&#34;&gt;querychat&lt;/a&gt; apps.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE:&lt;/p&gt; &#xA; &lt;p&gt;This package used to be called acquaint and supplied a default set of tools from &lt;a href=&#34;https://github.com/posit-dev/btw&#34;&gt;btw&lt;/a&gt; when R was used as an MCP server. The direction of the dependency has been reversed; to use the same functionality from before, transition &lt;code&gt;acquaint::mcp_server()&lt;/code&gt; to &lt;code&gt;btw::btw_mcp_server()&lt;/code&gt; and &lt;code&gt;acquaint::mcp_session()&lt;/code&gt; to &lt;code&gt;btw::btw_mcp_session()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install mcptools from CRAN with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;mcptools&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version of mcptools like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pak::pak(&#34;posit-dev/mcptools&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;R as an MCP server&lt;/h3&gt; &#xA;&lt;p&gt;mcptools can be hooked up to any application that supports MCP. For example, to use with Claude Desktop, you might paste the following in your Claude Desktop configuration (on macOS, at &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;r-mcptools&#34;: {&#xA;      &#34;command&#34;: &#34;Rscript&#34;,&#xA;      &#34;args&#34;: [&#34;-e&#34;, &#34;mcptools::mcp_server()&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to use with Claude Code, you might type in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add -s &#34;user&#34; r-mcptools -- Rscript -e &#34;mcptools::mcp_server()&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if you’d like models to access variables in specific R sessions, call &lt;code&gt;mcptools::mcp_session()&lt;/code&gt; in those sessions. (You might include a call to this function in your .Rprofile, perhaps using &lt;code&gt;usethis::edit_r_profile()&lt;/code&gt;, to automatically register every session you start up.)&lt;/p&gt; &#xA;&lt;h3&gt;R as an MCP client&lt;/h3&gt; &#xA;&lt;p&gt;mcptools uses the Claude Desktop configuration file format to register third-party MCP servers, as most MCP servers provide setup instructions for Claude Desktop in their documentation. For example, here’s what the &lt;a href=&#34;https://github.com/github/github-mcp-server&#34;&gt;official GitHub MCP server&lt;/a&gt; configuration would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;command&#34;: &#34;docker&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;-i&#34;,&#xA;        &#34;--rm&#34;,&#xA;        &#34;-e&#34;,&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;,&#xA;        &#34;ghcr.io/github/github-mcp-server&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;: &#34;&amp;lt;YOUR_TOKEN&amp;gt;&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the configuration file has been created (by default, mcptools will look to &lt;code&gt;file.path(&#34;~&#34;, &#34;.config&#34;, &#34;mcptools&#34;, &#34;config.json&#34;)&lt;/code&gt;), &lt;code&gt;mcp_tools()&lt;/code&gt; will return a list of ellmer tools which you can pass directly to the &lt;code&gt;$set_tools()&lt;/code&gt; method from ellmer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ch &amp;lt;- ellmer::chat_anthropic()&#xA;ch$set_tools(mcp_tools())&#xA;&#xA;ch$chat(&#34;What issues are open on posit-dev/mcptools?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;In Claude Desktop, I’ll write the following:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“From what year is the earliest recorded sample in the &lt;code&gt;forested&lt;/code&gt; data in my Positron session?”&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Without mcptools, Claude couldn’t get far here; by default, it can’t run R code and doesn’t have any way to “speak to” my interactive R sessions.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/user-attachments/assets/064df664-2669-498e-a644-fb191a30235f&#34; alt=&#34;A screencast of a chat with Claude. After the question is asked, a tool called &#39;describe data frame&#39; is called with the `data_frame` argument set to `forested`. The results are returned from mcptools as json, which the model then integrates into its response: &#39;Based on the data structure, I can see there&#39;s a `year` column with values ranfing from 1995 to 2024. The earliest recorded sample in the `forested` data is from 1995.&#39;&#34; width=&#34;100%&#34; /&gt; &#xA;&lt;p&gt;Using the package, the model asks to describe the data frame using a structure that will show summary statistics from the data. mcptools will appropriately route the request to the open Positron session, forwarding the results back to the model for it to situate in a response.&lt;/p&gt;</summary>
  </entry>
</feed>