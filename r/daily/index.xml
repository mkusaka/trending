<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:53:30Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DyfanJones/s3fs</title>
    <updated>2022-07-13T01:53:30Z</updated>
    <id>tag:github.com,2022-07-13:/DyfanJones/s3fs</id>
    <link href="https://github.com/DyfanJones/s3fs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Access Amazon Web Service &#39;S3&#39; as if it were a file system. File system &#39;API&#39; design around R package &#39;fs&#39;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;s3fs&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dyfanjones.r-universe.dev&#34;&gt;&lt;img src=&#34;https://dyfanjones.r-universe.dev/badges/s3fs&#34; alt=&#34;s3fs status badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;&lt;code&gt;s3fs&lt;/code&gt; provides a file-system like interface into Amazon Web Services for &lt;code&gt;R&lt;/code&gt;. It utilizes &lt;a href=&#34;https://github.com/paws-r/paws&#34;&gt;&lt;code&gt;paws&lt;/code&gt;&lt;/a&gt; &lt;code&gt;SDK&lt;/code&gt;and &lt;a href=&#34;https://github.com/r-lib/R6&#34;&gt;&lt;code&gt;R6&lt;/code&gt;&lt;/a&gt; for it’s core design. This repo has been inspired by Python’s &lt;a href=&#34;https://github.com/fsspec/s3fs&#34;&gt;&lt;code&gt;s3fs&lt;/code&gt;&lt;/a&gt;, however it’s API and implementation has been developed to follow &lt;code&gt;R&lt;/code&gt;’s &lt;a href=&#34;https://github.com/r-lib/fs&#34;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;r-universe installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Enable repository from dyfanjones&#xA;options(repos = c(&#xA;  dyfanjones = &#39;https://dyfanjones.r-universe.dev&#39;,&#xA;  CRAN = &#39;https://cloud.r-project.org&#39;)&#xA;)&#xA;&#xA;# Download and install s3fs in R&#xA;install.packages(&#39;s3fs&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Github installation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;dyfanjones/s3fs&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paws-r/paws&#34;&gt;&lt;code&gt;paws&lt;/code&gt;&lt;/a&gt;: connection with AWS S3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/R6&#34;&gt;&lt;code&gt;R6&lt;/code&gt;&lt;/a&gt;: Setup core class&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rdatatable/data.table&#34;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt;: wrangle lists into data.frames&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/fs&#34;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt;: file system on local files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s-fleck/lgr&#34;&gt;&lt;code&gt;lgr&lt;/code&gt;&lt;/a&gt;: set up logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HenrikBengtsson/future&#34;&gt;&lt;code&gt;future&lt;/code&gt;&lt;/a&gt;: set up async functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HenrikBengtsson/future.apply&#34;&gt;&lt;code&gt;future.apply&lt;/code&gt;&lt;/a&gt;: set up parallel looping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Comparison with &lt;code&gt;fs&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;s3fs&lt;/code&gt; attempts to give the same interface as &lt;code&gt;fs&lt;/code&gt; when handling files on AWS S3 from &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vectorization&lt;/strong&gt;. All &lt;code&gt;s3fs&lt;/code&gt; functions are vectorized, accepting multiple path inputs similar to &lt;code&gt;fs&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Predictable&lt;/strong&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Non-async functions return values that convey a path.&lt;/li&gt; &#xA;   &lt;li&gt;Async functions return a &lt;code&gt;future&lt;/code&gt; object of it’s no-async counterpart.&lt;/li&gt; &#xA;   &lt;li&gt;The only exception will be &lt;code&gt;s3_stream_in&lt;/code&gt; which returns a list of raw objects.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naming conventions&lt;/strong&gt;. s3fs functions follows &lt;code&gt;fs&lt;/code&gt; naming conventions with &lt;code&gt;dir_*&lt;/code&gt;, &lt;code&gt;file_*&lt;/code&gt; and &lt;code&gt;path_*&lt;/code&gt; however with the syntax &lt;code&gt;s3_&lt;/code&gt; infront i.e &lt;code&gt;s3_dir_*&lt;/code&gt;, &lt;code&gt;s3_file_*&lt;/code&gt; and &lt;code&gt;s3_path_*&lt;/code&gt; etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explicit failure&lt;/strong&gt;. Similar to &lt;code&gt;fs&lt;/code&gt; if a failure happens, then it will be raised and not masked with a warning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Extra features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;. All &lt;code&gt;s3fs&lt;/code&gt; functions are designed to have the option to run in parallel through the use of &lt;code&gt;future&lt;/code&gt; and &lt;code&gt;future.apply&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example: copy a large file from one location to the next.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(s3fs)&#xA;library(future)&#xA;&#xA;plan(&#34;multisession&#34;)&#xA;&#xA;s3_file_copy(&#34;s3://mybucket/multipart/large_file.csv&#34;, &#34;s3://mybucket/new_location/large_file.csv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;s3fs&lt;/code&gt; to copy a large file (&amp;gt; 5GB) using multiparts, &lt;code&gt;future&lt;/code&gt; allows each multipart to run in parallel to speed up the process.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Async&lt;/strong&gt;. &lt;code&gt;s3fs&lt;/code&gt; uses &lt;code&gt;future&lt;/code&gt; to create a few key async functions. This is more focused on functions that might be moving large files to and from &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;AWS S3&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example: Copying a large file from &lt;code&gt;AWS S3&lt;/code&gt; to &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(s3fs)&#xA;library(future)&#xA;&#xA;plan(&#34;multisession&#34;)&#xA;&#xA;s3_file_copy_async(&#34;s3://mybucket/multipart/large_file.csv&#34;, &#34;large_file.csv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fs&lt;/code&gt; has a straight forward API with 4 core themes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;path_&lt;/code&gt; for manipulating and constructing paths&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file_&lt;/code&gt; for files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dir_&lt;/code&gt; for directories&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;link_&lt;/code&gt; for links&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;s3fs&lt;/code&gt; follows theses themes with the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;s3_path_&lt;/code&gt; for manipulating and constructing s3 uri paths&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s3_file_&lt;/code&gt; for s3 files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s3_dir_&lt;/code&gt; for s3 directories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;link_&lt;/code&gt; is currently not supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(s3fs)&#xA;&#xA;# Construct a path to a file with `path()`&#xA;s3_path(&#34;foo&#34;, &#34;bar&#34;, letters[1:3], ext = &#34;txt&#34;)&#xA;#&amp;gt; [1] &#34;s3://foo/bar/a.txt&#34; &#34;s3://foo/bar/b.txt&#34; &#34;s3://foo/bar/c.txt&#34;&#xA;&#xA;# list buckets&#xA;s3_dir_ls()&#xA;#&amp;gt; [1] &#34;s3://MyBucket1&#34;&#xA;#&amp;gt; [2] &#34;s3://MyBucket2&#34;                                        &#xA;#&amp;gt; [3] &#34;s3://MyBucket3&#34;               &#xA;#&amp;gt; [4] &#34;s3://MyBucket4&#34;                            &#xA;#&amp;gt; [5] &#34;s3://MyBucket5&#34;&#xA;&#xA;# list files in bucket&#xA;s3_dir_ls(&#34;s3://MyBucket5&#34;)&#xA;#&amp;gt; [1] &#34;s3://MyBucket5/iris.json&#34;     &#34;s3://MyBucket5/athena-query/&#34;&#xA;#&amp;gt; [3] &#34;s3://MyBucket5/data/&#34;         &#34;s3://MyBucket5/default/&#34;     &#xA;#&amp;gt; [5] &#34;s3://MyBucket5/iris/&#34;         &#34;s3://MyBucket5/made-up/&#34;     &#xA;#&amp;gt; [7] &#34;s3://MyBucket5/test_df/&#34;&#xA;&#xA;# create a new directory&#xA;tmp &amp;lt;- s3_dir_create(s3_file_temp(tmp_dir = &#34;MyBucket5&#34;))&#xA;tmp&#xA;#&amp;gt; [1] &#34;s3://MyBucket5/filezwkcxx9q5562&#34;&#xA;&#xA;# create new files in that directory&#xA;s3_file_create(s3_path(tmp, &#34;my-file.txt&#34;))&#xA;#&amp;gt; [1] &#34;s3://MyBucket5/filezwkcxx9q5562/my-file.txt&#34;&#xA;s3_dir_ls(tmp)&#xA;#&amp;gt; [1] &#34;s3://MyBucket5/filezwkcxx9q5562/my-file.txt&#34;&#xA;&#xA;# remove files from the directory&#xA;s3_file_delete(s3_path(tmp, &#34;my-file.txt&#34;))&#xA;s3_dir_ls(tmp)&#xA;#&amp;gt; character(0)&#xA;&#xA;# remove the directory&#xA;s3_dir_delete(tmp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;Created on 2022-06-21 by the &lt;a href=&#34;https://reprex.tidyverse.org&#34;&gt;reprex package&lt;/a&gt; (v2.0.1)&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;s3fs&lt;/code&gt; is designed to work well with the pipe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(s3fs)&#xA;paths &amp;lt;- s3_file_temp(tmp_dir = &#34;MyBucket&#34;) |&amp;gt;&#xA; s3_dir_create() |&amp;gt;&#xA; s3_path(letters[1:5]) |&amp;gt;&#xA; s3_file_create()&#xA;paths&#xA;#&amp;gt; [1] &#34;s3://MyBucket/fileazqpwujaydqg/a&#34;&#xA;#&amp;gt; [2] &#34;s3://MyBucket/fileazqpwujaydqg/b&#34;&#xA;#&amp;gt; [3] &#34;s3://MyBucket/fileazqpwujaydqg/c&#34;&#xA;#&amp;gt; [4] &#34;s3://MyBucket/fileazqpwujaydqg/d&#34;&#xA;#&amp;gt; [5] &#34;s3://MyBucket/fileazqpwujaydqg/e&#34;&#xA;&#xA;paths |&amp;gt; s3_file_delete()&#xA;#&amp;gt; [1] &#34;s3://MyBucket/fileazqpwujaydqg/a&#34;&#xA;#&amp;gt; [2] &#34;s3://MyBucket/fileazqpwujaydqg/b&#34;&#xA;#&amp;gt; [3] &#34;s3://MyBucket/fileazqpwujaydqg/c&#34;&#xA;#&amp;gt; [4] &#34;s3://MyBucket/fileazqpwujaydqg/d&#34;&#xA;#&amp;gt; [5] &#34;s3://MyBucket/fileazqpwujaydqg/e&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sup&gt;Created on 2022-06-22 by the &lt;a href=&#34;https://reprex.tidyverse.org&#34;&gt;reprex package&lt;/a&gt; (v2.0.1)&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; all examples have be developed from &lt;code&gt;fs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Feedback wanted&lt;/h1&gt; &#xA;&lt;p&gt;Please open a Github ticket raising any issues or feature requests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MRCIEU/genetic-epidemiology-practicals</title>
    <updated>2022-07-13T01:53:30Z</updated>
    <id>tag:github.com,2022-07-13:/MRCIEU/genetic-epidemiology-practicals</id>
    <link href="https://github.com/MRCIEU/genetic-epidemiology-practicals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Practicals for Genetic epidemiology short course&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Welcome to the genetic epidemiology practicals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A wiki guiding you through the practicals can be found &lt;a href=&#34;https://github.com/MRCIEU/genetic-epidemiology-practicals/wiki&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can find the data here (on bluecrystalp4): &lt;code&gt;/mnt/storage/private/mrcieu/training/genetic_epidemiology&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SurajGupta/r-source</title>
    <updated>2022-07-13T01:53:30Z</updated>
    <id>tag:github.com,2022-07-13:/SurajGupta/r-source</id>
    <link href="https://github.com/SurajGupta/r-source" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R Source Code&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;THE BASIC R README&#xA;&#xA;&#xA;   (See &#34;doc/FAQ&#34; and &#34;doc/RESOURCES&#34; for more detailed information&#xA;&#x9;&#x9;&#x9;      - these files are only in the tarballs)&#xA;   (See &#34;INSTALL&#34;             for help on installation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;INTRODUCTION&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This directory contains the source code tree for R, which is a language which is not entirely unlike (versions 3 and 4 of) the S language developed at AT&amp;amp;T Bell Laboratories by Rick Becker, John Chambers and Allan Wilks.&lt;/p&gt; &#xA;&lt;p&gt;R is free software distributed under a GNU-style copyleft.&lt;/p&gt; &#xA;&lt;p&gt;The core of R is an interpreted computer language with a syntax superficially similar to C, but which is actually a &#34;functional programming language&#34; with capabilities similar to Scheme. The language allows branching and looping as well as modular programming using functions. Most of the user-visible functions in R are written in R, calling upon a smaller set of internal primitives. It is possible for the user to interface to procedures written in C or Fortran languages for efficiency, and also to write additional primitives.&lt;/p&gt; &#xA;&lt;p&gt;The R distribution contains functionality for a large number of statistical procedures. Among these are: linear and generalized linear models, nonlinear regression models, time series analysis, classical parametric and nonparametric tests, clustering and smoothing. There is also a large set of functions which provide a flexible graphical environment for creating various kinds of data presentations.&lt;/p&gt; &#xA;&lt;p&gt;A package specification allows the production of loadable modules for specific purposes, and several thousand contributed packages are made available through the CRAN sites (see &lt;a href=&#34;http://CRAN.R-project.org/mirrors.html&#34;&gt;http://CRAN.R-project.org/mirrors.html&lt;/a&gt; for the current members).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;HISTORY&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;R was initially written by Robert Gentleman and Ross Ihaka of the Statistics Department of the University of Auckland. In addition, a large group of individuals has contributed to R by sending code and bug reports.&lt;/p&gt; &#xA;&lt;p&gt;Since mid-1997 there has been a core group who can modify the R source code archive, listed in file doc/AUTHORS.&lt;/p&gt; &#xA;&lt;p&gt;R 1.0.0 was released on 29 February 2000 and 2.0.0 on 4 October 2004. R 3.0.0 came out on 3 April 2013.&lt;/p&gt; &#xA;&lt;p&gt;This file has been minimally revised since the release of R 1.0.0.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;PRESENT STATUS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The present version implements most of the functionality in the 1988 book &#34;The New S Language&#34; (the &#34;Blue Book&#34;) and many of the applications. In addition, we have implemented a large part of the functionality from the 1992 book &#34;Statistical Models in S&#34; (the &#34;White Book&#34;) and the 1998 book &#34;Programming with Data&#34; (the &#34;Green Book&#34;).&lt;/p&gt; &#xA;&lt;p&gt;All the R functions have been documented in the form of help pages in an &#34;output independent&#34; form which can be used to create versions for HTML, PDF, text etc. A 1900+ page Reference Index (a collection of most of the help pages: there is also a 3300+ page version with all the help pages, including recommended packages) can be obtained in PDF. The manual &lt;code&gt;An Introduction to R&#39; provides a more user-friendly starting point, and there is an FAQ, a draft &lt;/code&gt;R Language Definition&#39; manual and more specialized manuals on admininstration, data import/export and extending R. See INSTALL for instructions on how to generate these documents.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;GOALS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Our aim at the start of this project was to demonstrate that it was possible to produce an S-like environment which did not suffer from the memory-demands and performance problems which S has. Somewhat later, we started to turn R into a &#34;real&#34; system, but unfortunately we lost a large part of the efficiency advantage in the process, so have revised the memory management mechanism and implemented delayed loading of R objects. A lot of performance tuning has been done, including the ability to use tuned linear-algebra libraries.&lt;/p&gt; &#xA;&lt;p&gt;Longer-term goals include to explore new ideas: e.g. virtual objects and component-based programming, and expanding the scope of existing ones like formula-based interfaces. Further, we wish to get a handle on a general approach to graphical user interfaces (preferably with cross-platform portability), and to develop better 3-D and dynamic graphics.&lt;/p&gt; &#xA;&lt;p&gt;Sincerely, The R Core Team.&lt;/p&gt;</summary>
  </entry>
</feed>