<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-03T01:47:02Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>doehm/ggbrick</title>
    <updated>2023-07-03T01:47:02Z</updated>
    <id>tag:github.com,2023-07-03:/doehm/ggbrick</id>
    <link href="https://github.com/doehm/ggbrick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A brick like geom for ggplot2&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ggbrick &lt;img src=&#34;https://raw.githubusercontent.com/doehm/ggbrick/main/dev/images/ggbrick1.png&#34; align=&#34;right&#34; height=&#34;240&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Create a ‘waffle’ style chart with the aesthetic of a brick wall.&lt;/p&gt; &#xA;&lt;p&gt;Usage is similar to &lt;code&gt;geom_col&lt;/code&gt; where you supply counts as the height of the bar. Each whole brick represents 1 unit. Two half bricks equal one whole brick. Where the count exceeds the number of brick layers, the number of bricks is scaled to retain the brick wall aesthetic.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install from Git&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;doehm/ggbrick&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)&#xA;library(ggbrick)&#xA;&#xA;d10 &amp;lt;- c(&#34;#788FCE&#34;, &#34;#BD8184&#34;, &#34;#E6956F&#34;, &#34;#F2CC8F&#34;, &#34;#A6BA96&#34;, &#34;#C5E8E3&#34;, &#xA;         &#34;#F4F1DE&#34;, &#34;#CDC3D4&#34;, &#34;#A88AD2&#34;, &#34;#60627C&#34;)&#xA;&#xA;mpg |&amp;gt;&#xA;  count(class, drv) |&amp;gt;&#xA;  ggplot() +&#xA;  geom_brick(aes(class, n, fill = drv)) +&#xA;  scale_fill_manual(values = d10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/doehm/ggbrick/main/dev/images/pic0.png&#34;&gt; &#xA;&lt;p&gt;The fill can be randomised to create a different look with &lt;code&gt;type = &#39;random&#39;&lt;/code&gt; or &lt;code&gt;type = &#39;soft_random&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/doehm/ggbrick/main/dev/images/pic2.png&#34;&gt; &#xA;&lt;p&gt;In this case each brick represents a car (a row) in &lt;code&gt;mpg&lt;/code&gt;. When the number of bricks gets too large, the number of brick layers will be capped and the number of bricks will be scaled down. The proportions of the fill aesthetic will be held consistent. This can be adjusted with the &lt;code&gt;brick_layers&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mpg |&amp;gt;&#xA;  count(class, trans) |&amp;gt;&#xA;  mutate(n = 5*n) |&amp;gt;&#xA;  ggplot() +&#xA;  geom_brick(aes(class, n, fill = trans)) +&#xA;  scale_fill_manual(values = d10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/doehm/ggbrick/main/dev/images/pic1.png&#34;&gt; &#xA;&lt;p&gt;You can also adjust the number of bricks per layer with the &lt;code&gt;bricks_per_layer&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot() +&#xA;  geom_brick(aes(x = 1, y = 96), fill = &#34;firebrick&#34;, bricks_per_layer = 8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/doehm/ggbrick/main/dev/images/pic3.png&#34;&gt;</summary>
  </entry>
  <entry>
    <title>cboettig/minioclient</title>
    <updated>2023-07-03T01:47:02Z</updated>
    <id>tag:github.com,2023-07-03:/cboettig/minioclient</id>
    <link href="https://github.com/cboettig/minioclient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R Interface to the MINIO client&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;minio&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cboettig/minioclient/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/cboettig/minioclient/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;There are numerous packages that already interface with the AWS S3 protocol for object storage. Most rely directly on calls to the low-level &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html&#34;&gt;S3 REST API&lt;/a&gt; through R packages such as &lt;code&gt;curl&lt;/code&gt; or &lt;code&gt;httr&lt;/code&gt;, which requires significant amounts of code to provide high-level functionality (e.g.&amp;nbsp;handling authentication, paging over results, parsing returned XML), and is thus prone to inefficiency and bugs. Many also implicitly assume that Amazon is the underlying provider, making it difficult or impossible to work with a substantial and growing number of object stores now conform to the AWS S3 standard. These include NSF’s &lt;a href=&#34;https://www.openstoragenetwork.org&#34;&gt;OpenStorageNetwork&lt;/a&gt;, &lt;a href=&#34;https://docs.jetstream-cloud.org/overview/overview-doc/&#34;&gt;Jetstream2&lt;/a&gt; (both based on open source &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_ceph_storage/1.3/html/object_gateway_guide_for_red_hat_enterprise_linux/object_gateway_s3_api&#34;&gt;Redhat CEPH&lt;/a&gt;), &lt;a href=&#34;https://arc.ucar.edu/knowledge_base/70549594&#34;&gt;NCAR’s Stratus&lt;/a&gt; (based on Western Digital S3), and &lt;a href=&#34;https://min.io&#34;&gt;MinIO Servers&lt;/a&gt; (another open source implementation popular with companies and developers), as well as Google Cloud Storage’s S3 compatibility mode.&lt;/p&gt; &#xA;&lt;p&gt;In contrast, the MinIO Client, an &lt;a href=&#34;https://github.com/minio/mc/&#34;&gt;open-source, AGPL-v3&lt;/a&gt; software developed in the Go language by the MinIO team, provides a high-performance utility with intuitive design for working across multiple cloud-based object stores as well as local filesystems. This package provides a thin R wrapper around that client – maximizing performance and minimizing potential for maintenance and bugs. A helper utility provides a convenient way to install and update the golang binary across operating systems and architectures. The client supports parallel threads by default, intuitive handling of bucket permissions such as granting or revoking anonymous access, and persistent configurations across multiple clouds. After struggling against the limitations of many different R wrappers for S3 object stores, this is now my go-to.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of &lt;code&gt;minioclient&lt;/code&gt; from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;cboettig/minioclient&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;MinIO Client&lt;/h2&gt; &#xA;&lt;p&gt;At first use, all operations will attempt to install the client if not already installed. Users can also install latest version of the minio client can be installed using &lt;code&gt;install_minio()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(minioclient)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MinIO client is designed to support multiple endpoints for cloud storage, including AWS, Google Cloud Storage (via S3-compatibility), and other S3 compatible clients such as open source MinIO or Redhat CEPH storage systems. MinIO uses a syntax based around &lt;em&gt;aliases&lt;/em&gt; to allow access across multiple platforms. Aliases can be configured using access key pairs to allow authenticated access.&lt;/p&gt; &#xA;&lt;h3&gt;Aliases&lt;/h3&gt; &#xA;&lt;p&gt;By default, the client comes pre-configured with credentials for the MinIO &lt;code&gt;play&lt;/code&gt; platform, designed for public experimental storage and examples. We can use &lt;code&gt;mc_alias_ls()&lt;/code&gt; to see all clients, specify the client we want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_alias_ls(&#34;play&#34;)&#xA;#&amp;gt; play&#xA;#&amp;gt;   URL       : https://play.min.io&#xA;#&amp;gt;   AccessKey : Q3AM3UQ867SPQQA43P2F&#xA;#&amp;gt;   SecretKey : zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG&#xA;#&amp;gt;   API       : S3v4&#xA;#&amp;gt;   Path      : auto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some S3 object storage systems allow access without credentials. Confusingly, attempting to access public data with invalid credentials will still fail, so we need to specify an anonymous endpoint with no credentials. By default, &lt;code&gt;mc_alias_set&lt;/code&gt; will seek to use &lt;code&gt;AWS_S3_ENDPOINT&lt;/code&gt;, &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; in your environment, if set. This allows &lt;code&gt;minioclient&lt;/code&gt; to be used in scripts with authentication keys passed in securely as environmental variables. To set an anonymous access, simply indicate empty credentials, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_alias_set(&#34;anon&#34;, &#34;s3.amazonaws.com&#34;, access_key = &#34;&#34;, secret_key = &#34;&#34;)&#xA;#&amp;gt; Added `anon` successfully.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuration of aliases is stored in a persistent configuration file, so aliases need be created only once on a given machine. All &lt;code&gt;mc&lt;/code&gt; functions specify which cloud provider using a filepath notation, &lt;code&gt;&amp;lt;ALIAS&amp;gt;/&amp;lt;BUCKET&amp;gt;/&amp;lt;PATH&amp;gt;&lt;/code&gt;. For instance, we can list all objects found in the bucket &lt;code&gt;gbif-open-data-us-east-1&lt;/code&gt;, which is a &lt;a href=&#34;https://registry.opendata.aws/gbif/&#34;&gt;public bucket&lt;/a&gt; included in the AWS Open Data Registry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_ls(&#34;anon/gbif-open-data-us-east-1&#34;)&#xA;#&amp;gt; [2021-05-19 12:25:22 UTC]  32KiB STANDARD index.html&#xA;#&amp;gt; [2023-06-26 18:39:22 UTC]     0B occurrence/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All &lt;code&gt;mc&lt;/code&gt; functions can also understand local filesystem paths. Any absolute path (path starting with &lt;code&gt;/&lt;/code&gt;), or any relative path not recognized as a registered alias (Note: be careful not to have local folders using the same name as remote aliases!) will be interpreted as a local path. For instance, we can list the contents of the local &lt;code&gt;R/&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_ls(&#34;R&#34;)&#xA;#&amp;gt; [2023-06-26 04:08:40 UTC] 2.1KiB install_mc.R&#xA;#&amp;gt; [2023-06-26 04:10:18 UTC] 1.2KiB mc.R&#xA;#&amp;gt; [2023-06-26 04:10:41 UTC] 1.3KiB mc_alias.R&#xA;#&amp;gt; [2023-06-26 03:55:58 UTC] 1.2KiB mc_anonymous.R&#xA;#&amp;gt; [2023-06-26 03:56:18 UTC] 1.1KiB mc_cp.R&#xA;#&amp;gt; [2023-06-25 21:40:07 UTC]    82B mc_diff.R&#xA;#&amp;gt; [2023-06-25 23:09:03 UTC]   371B mc_du.R&#xA;#&amp;gt; [2023-06-26 03:56:33 UTC]  1004B mc_ls.R&#xA;#&amp;gt; [2023-06-25 21:33:07 UTC]   299B mc_mb.R&#xA;#&amp;gt; [2023-06-26 03:57:09 UTC] 1.6KiB mc_mirror.R&#xA;#&amp;gt; [2023-06-26 03:57:25 UTC] 1.0KiB mc_mv.R&#xA;#&amp;gt; [2023-06-25 21:32:46 UTC]   351B mc_rb.R&#xA;#&amp;gt; [2023-06-26 03:57:43 UTC] 1.0KiB mc_rm.R&#xA;#&amp;gt; [2023-06-25 21:41:30 UTC]   125B mc_stat.R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Uploads &amp;amp; Downloads&lt;/h2&gt; &#xA;&lt;p&gt;This notation makes it easy to move data between local and remote systems, or even between two remote systems. Let’s copy the &lt;code&gt;index.html&lt;/code&gt; file from GBIF to our local file system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_cp(&#34;anon/gbif-open-data-us-east-1/index.html&#34;, &#34;gbif.html&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just to prove this is indeed a local copy, we can list local directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fs::file_info(&#34;gbif.html&#34;)&#xA;#&amp;gt; # A tibble: 1 × 18&#xA;#&amp;gt;   path       type     size permissions modification_time   user  group device_id&#xA;#&amp;gt;   &amp;lt;fs::path&amp;gt; &amp;lt;fct&amp;gt; &amp;lt;fs::b&amp;gt; &amp;lt;fs::perms&amp;gt; &amp;lt;dttm&amp;gt;              &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 gbif.html  file    31.6K rw-r--r--   2023-06-26 18:39:23 cboe… cboe…     66307&#xA;#&amp;gt; # ℹ 10 more variables: hard_links &amp;lt;dbl&amp;gt;, special_device_id &amp;lt;dbl&amp;gt;, inode &amp;lt;dbl&amp;gt;,&#xA;#&amp;gt; #   block_size &amp;lt;dbl&amp;gt;, blocks &amp;lt;dbl&amp;gt;, flags &amp;lt;int&amp;gt;, generation &amp;lt;dbl&amp;gt;,&#xA;#&amp;gt; #   access_time &amp;lt;dttm&amp;gt;, change_time &amp;lt;dttm&amp;gt;, birth_time &amp;lt;dttm&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For any object store where we have adequate permissions, we can create new buckets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;random_name &amp;lt;- paste0(sample(letters, 12, replace = TRUE), collapse = &#34;&#34;)&#xA;play_bucket &amp;lt;- paste0(&#34;play/play-&#34;, random_name)&#xA;&#xA;mc_mb(play_bucket)&#xA;#&amp;gt; Bucket created successfully `play/play-natziyhyiyhb`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can copy files or directories to the remote bucket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_cp(&#34;anon/gbif-open-data-us-east-1/index.html&#34;, play_bucket)&#xA;mc_cp(&#34;R/&#34;, play_bucket, recursive = TRUE, verbose = TRUE)&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/install_mc.R` -&amp;gt; `play/play-natziyhyiyhb/install_mc.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc.R` -&amp;gt; `play/play-natziyhyiyhb/mc.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_alias.R` -&amp;gt; `play/play-natziyhyiyhb/mc_alias.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_anonymous.R` -&amp;gt; `play/play-natziyhyiyhb/mc_anonymous.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_cp.R` -&amp;gt; `play/play-natziyhyiyhb/mc_cp.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_diff.R` -&amp;gt; `play/play-natziyhyiyhb/mc_diff.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_du.R` -&amp;gt; `play/play-natziyhyiyhb/mc_du.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_ls.R` -&amp;gt; `play/play-natziyhyiyhb/mc_ls.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_mb.R` -&amp;gt; `play/play-natziyhyiyhb/mc_mb.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_mirror.R` -&amp;gt; `play/play-natziyhyiyhb/mc_mirror.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_mv.R` -&amp;gt; `play/play-natziyhyiyhb/mc_mv.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_rb.R` -&amp;gt; `play/play-natziyhyiyhb/mc_rb.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_rm.R` -&amp;gt; `play/play-natziyhyiyhb/mc_rm.R`&#xA;#&amp;gt; `/home/cboettig/cboettig/minioclient/R/mc_stat.R` -&amp;gt; `play/play-natziyhyiyhb/mc_stat.R`&#xA;#&amp;gt; Total: 0 B, Transferred: 12.72 KiB, Speed: 247.50 KiB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the use of &lt;code&gt;recursive = TRUE&lt;/code&gt; to transfer all objects matching the pattern. In S3 object stores, file paths are really just prefixes, thus this query includes not only everything in the &lt;code&gt;R&lt;/code&gt; folder, but also &lt;code&gt;README.md&lt;/code&gt;, since it also matches the prefix. (Had we used the prefix &lt;code&gt;R/&lt;/code&gt;, &lt;code&gt;README.md&lt;/code&gt; would not be matched and the R scripts would go directly into &lt;code&gt;play_bucket&lt;/code&gt; root instead of an &lt;code&gt;R/&lt;/code&gt; sub-path.)&lt;/p&gt; &#xA;&lt;p&gt;We can examine disk usage of remote objects or directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_du(play_bucket)&#xA;#&amp;gt; 44KiB    15 objects  play-natziyhyiyhb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also adjust permissions for anonymous access:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_anonymous_set(play_bucket, &#34;download&#34;)&#xA;#&amp;gt; Access permission for `play/play-natziyhyiyhb` is set to `download`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Public objects can be accessed directly over HTTPS connection using the endpoint URL, bucket name and path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;bucket &amp;lt;-  basename(play_bucket) # strip alias from path&#xA;# use full domain name as prefix instead:&#xA;public_url &amp;lt;- paste0(&#34;https://play.min.io/&#34;, bucket, &#34;/index.html&#34;)&#xA;download.file(public_url, &#34;index.html&#34;, quiet = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional functionality&lt;/h2&gt; &#xA;&lt;p&gt;Any command supported by the minio client can be accessed using the function &lt;code&gt;mc()&lt;/code&gt;. This function can be used in place of any of the above methods, or to access additional methods where no wrapper exists, see &lt;code&gt;mc(&#34;-h&#34;)&lt;/code&gt; for complete list. R functions such as &lt;code&gt;mc_ls()&lt;/code&gt; are merely helpful wrappers around the more generic &lt;code&gt;mc()&lt;/code&gt; utility, e.g.&amp;nbsp;&lt;code&gt;mc(&#34;ls play&#34;)&lt;/code&gt; is equivalent to &lt;code&gt;mc_ls(&#34;play&#34;)&lt;/code&gt;. Providing helper methods allows tab-completion discovery of functions, R-based documentation, and improved handling of display behavior (e.g.&amp;nbsp;&lt;code&gt;verbose=FALSE&lt;/code&gt; by default on certain commands.) See &lt;a href=&#34;https://min.io/docs/minio/linux/reference/minio-mc.html?ref=docs-redirect&#34;&gt;official mc client docs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;In addition to usual R documentation, users can display full help information for any method using the argument &lt;code&gt;&#34;-h&#34;&lt;/code&gt;. This includes details on optional flags and further examples.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc_du(&#34;-h&#34;)&#xA;#&amp;gt; NAME:&#xA;#&amp;gt;   mc du - summarize disk usage recursively&#xA;#&amp;gt; &#xA;#&amp;gt; USAGE:&#xA;#&amp;gt;   mc du [FLAGS] TARGET&#xA;#&amp;gt; &#xA;#&amp;gt; FLAGS:&#xA;#&amp;gt;   --depth value, -d value       print the total for a folder prefix only if it is N or fewer levels below the command line argument (default: 0)&#xA;#&amp;gt;   --recursive, -r               recursively print the total for a folder prefix&#xA;#&amp;gt;   --rewind value                include all object versions no later than specified date&#xA;#&amp;gt;   --versions                    include all object versions&#xA;#&amp;gt;   --encrypt-key value           encrypt/decrypt objects (using server-side encryption with customer provided keys)&#xA;#&amp;gt;   --config-dir value, -C value  path to configuration folder (default: &#34;/home/cboettig/.mc&#34;)&#xA;#&amp;gt;   --quiet, -q                   disable progress bar display&#xA;#&amp;gt;   --no-color                    disable color theme&#xA;#&amp;gt;   --json                        enable JSON lines formatted output&#xA;#&amp;gt;   --debug                       enable debug output&#xA;#&amp;gt;   --insecure                    disable SSL certificate verification&#xA;#&amp;gt;   --limit-upload value          limits uploads to a maximum rate in KiB/s, MiB/s, GiB/s. (default: unlimited)&#xA;#&amp;gt;   --limit-download value        limits downloads to a maximum rate in KiB/s, MiB/s, GiB/s. (default: unlimited)&#xA;#&amp;gt;   --help, -h                    show help&#xA;#&amp;gt;   &#xA;#&amp;gt; ENVIRONMENT VARIABLES:&#xA;#&amp;gt;   MC_ENCRYPT_KEY: list of comma delimited prefix=secret values&#xA;#&amp;gt; &#xA;#&amp;gt; EXAMPLES:&#xA;#&amp;gt;   1. Summarize disk usage of &#39;jazz-songs&#39; bucket recursively.&#xA;#&amp;gt;      $ mc du s3/jazz-songs&#xA;#&amp;gt; &#xA;#&amp;gt;   2. Summarize disk usage of &#39;louis&#39; prefix in &#39;jazz-songs&#39; bucket upto two levels.&#xA;#&amp;gt;      $ mc du --depth=2 s3/jazz-songs/louis/&#xA;#&amp;gt; &#xA;#&amp;gt;   3. Summarize disk usage of &#39;jazz-songs&#39; bucket at a fixed date/time&#xA;#&amp;gt;      $ mc du --rewind &#34;2020.01.01&#34; s3/jazz-songs/&#xA;#&amp;gt; &#xA;#&amp;gt;   4. Summarize disk usage of &#39;jazz-songs&#39; bucket with all objects versions&#xA;#&amp;gt;      $ mc du --versions s3/jazz-songs/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now use arbitrary &lt;code&gt;mc&lt;/code&gt; commands (see &lt;a href=&#34;https://min.io/docs/minio/linux/reference/minio-mc.html?ref=docs-redirect&#34;&gt;quickstart&lt;/a&gt;). For example, examine file information to confirm that eTags (md5sums here) match for these objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc(paste(&#34;stat&#34;, &#34;anon/gbif-open-data-us-east-1/index.html&#34;, paste0(play_bucket, &#34;/index.html&#34;)))&#xA;#&amp;gt; Name      : index.html&#xA;#&amp;gt; Date      : 2021-05-19 12:25:22 UTC &#xA;#&amp;gt; Size      : 32 KiB &#xA;#&amp;gt; ETag      : b3c8ed2b99c181bd763d742025a7340d &#xA;#&amp;gt; VersionID : QgZ8OTH0gdcSbpj2yTl9tINxi_4thnj1 &#xA;#&amp;gt; Type      : file &#xA;#&amp;gt; Metadata  :&#xA;#&amp;gt;   Content-Type: text/html &#xA;#&amp;gt; Replication Status: REPLICA &#xA;#&amp;gt; Name      : index.html&#xA;#&amp;gt; Date      : 2023-06-26 18:39:25 UTC &#xA;#&amp;gt; Size      : 32 KiB &#xA;#&amp;gt; ETag      : b3c8ed2b99c181bd763d742025a7340d &#xA;#&amp;gt; Type      : file &#xA;#&amp;gt; Metadata  :&#xA;#&amp;gt;   Content-Type: text/html&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>