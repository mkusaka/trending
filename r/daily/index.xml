<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-19T01:43:13Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alan-turing-institute/datadiff</title>
    <updated>2023-01-19T01:43:13Z</updated>
    <id>tag:github.com,2023-01-19:/alan-turing-institute/datadiff</id>
    <link href="https://github.com/alan-turing-institute/datadiff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Datadiff is diff for data&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Tabular data sets are common, and many data processing tasks must be repeated on multiple similar data samples. In practice, however, there may be unexpected changes in structure across different batches of data, which are likely to break the analytical pipeline.&lt;/p&gt; &#xA;&lt;p&gt;Datadiff identifies structural differences between pairs of (related) tabular data sets and returns an executable summary (or &#34;patch&#34;) which is both a description of the differences and a corrective transformation.&lt;/p&gt; &#xA;&lt;p&gt;In making comparisons, datadiff considers the following (composable) patch types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;column permutation&lt;/li&gt; &#xA; &lt;li&gt;column insertion&lt;/li&gt; &#xA; &lt;li&gt;column deletion&lt;/li&gt; &#xA; &lt;li&gt;column replacement&lt;/li&gt; &#xA; &lt;li&gt;recoding of categorical data&lt;/li&gt; &#xA; &lt;li&gt;linear transformation of numerical data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Datadiff is implemented in R and can be built from source or installed using the &lt;code&gt;devtools&lt;/code&gt; package as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install the most recent release from GitHub:&#xA;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;alan-turing-institute/datadiff&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Diff two data frames with &lt;code&gt;ddiff(df1, df2)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information and examples, see the package vignette:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Build the vignette on package installation:&#xA;devtools::install_github(&#34;alan-turing-institute/datadiff&#34;, build_vignettes = TRUE)&#xA;vignette(&#34;datadiff&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>alan-turing-institute/DetectorChecker</title>
    <updated>2023-01-19T01:43:13Z</updated>
    <id>tag:github.com,2023-01-19:/alan-turing-institute/DetectorChecker</id>
    <link href="https://github.com/alan-turing-institute/DetectorChecker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Project to develop software to assess developing detector screen damage (Web App based on the original DetectorChecker package)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DetectorChecker &lt;a&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alan-turing-institute/DetectorChecker/master/logo_hex.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Master: &lt;a href=&#34;https://travis-ci.com/alan-turing-institute/DetectorChecker&#34;&gt;&lt;img src=&#34;https://travis-ci.com/alan-turing-institute/DetectorChecker.svg?token=zxQwzfsqCyEouTqXAVUn&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; Develop: &lt;a href=&#34;https://travis-ci.com/alan-turing-institute/DetectorChecker&#34;&gt;&lt;img src=&#34;https://travis-ci.com/alan-turing-institute/DetectorChecker.svg?token=zxQwzfsqCyEouTqXAVUn&amp;amp;branch=develop&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://joss.theoj.org/papers/b6b67cd22d488e7bfa42b4074bc4eda8&#34;&gt;&lt;img src=&#34;https://joss.theoj.org/papers/b6b67cd22d488e7bfa42b4074bc4eda8/status.svg?sanitize=true&#34; alt=&#34;status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.5281/zenodo.4312870&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.4312870.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Created by: &lt;a href=&#34;https://github.com/ejulia17&#34;&gt;Julia Brettschneider&lt;/a&gt; (original R code), &lt;a href=&#34;https://github.com/tomaslaz&#34;&gt;Tomas Lazauskas&lt;/a&gt; (R package engineering), &lt;a href=&#34;https://github.com/OscartGiles&#34;&gt;Oscar Giles&lt;/a&gt; (package development) and &lt;a href=&#34;https://github.com/WilfridSKendall&#34;&gt;Wilfrid Kendall&lt;/a&gt; (testing and editing).&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;DetectorChecker is an R package to aid in the assessment of damage to CT scanners arising from exposure to high energy radiation. While the target application concerns CT scanners, this package can also be used to analyze screen damage arising from other sources.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install from github you will need to have the &lt;a href=&#34;https://github.com/r-lib/devtools&#34;&gt;devtools&lt;/a&gt; package installed.&lt;/p&gt; &#xA;&lt;p&gt;In R run one of the following, depending on whether you want to build the package Vignettes, removing the # if you do not have devtools installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;alan-turing-institute/DetectorChecker&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to be able to view the &lt;code&gt;DetectorChecker_user-guide&lt;/code&gt; Vignette you need to install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devtools::install_github(&#34;alan-turing-institute/DetectorChecker&#34;, &#xA;     build_vignettes = TRUE, build_opts = c(&#34;--no-resave-data&#34;, &#34;--no-manual&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installing with the vignettes may be slow (~10 min)&lt;/p&gt; &#xA;&lt;h3&gt;Development version&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;alan-turing-institute/DetectorChecker&#34;, ref = &#34;develop&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WebApp&lt;/h2&gt; &#xA;&lt;p&gt;The official release of the DetectorChecker WebApp is hosted at &lt;a href=&#34;https://detectorchecker.azurewebsites.net&#34;&gt;https://detectorchecker.azurewebsites.net&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/alan-turing-institute/DetectorChecker/master/inst/img/DetectorChecker.png&#34; width=&#34;500&#34; align=&#34;center&#34;&gt; &#xA;&lt;p&gt;The source code for the WebApp implementation can be found on GitHub: &lt;a href=&#34;https://github.com/alan-turing-institute/DetectorCheckerWebApp&#34;&gt;https://github.com/alan-turing-institute/DetectorCheckerWebApp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Vignette&lt;/h2&gt; &#xA;&lt;p&gt;The user guide vignette provides detailed instructions for using the package and loading specific examples. Make sure you installed the package including vignette following the instructions above (see use of &lt;code&gt;build_vignettes = TRUE&lt;/code&gt; in Section Installation) and then load the package followed by the vignette command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(detectorchecker)&#xA;vignette(&#34;DetectorChecker_user-guide&#34;, package = &#34;detectorchecker&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;Detailed documentation is provided as a &lt;a href=&#34;https://raw.githubusercontent.com/alan-turing-institute/DetectorChecker/master/docs/detectorchecker_1.0.8.pdf&#34;&gt;pdf&lt;/a&gt;. See also the &lt;a href=&#34;https://raw.githubusercontent.com/alan-turing-institute/DetectorChecker/master/vignettes/DetectorChecker_user-guide.html&#34;&gt;DetectorChecker_user-guide&lt;/a&gt; (large html file, needs download).&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;DetectorChecker includes a number of example datasets for five detector types:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pilatus&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PerkinElmer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PerkinElmer Refurbished&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;PerkinElmer Cropped&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Excalibur&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To load an example dataset, either call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(detectorchecker)&#xA;&#xA;# Initiate a PerkinElmerFull detector object&#xA;detector &amp;lt;-  create_detector(&#34;PerkinElmerFull&#34;)&#xA;&#xA;# Path of dataset&#xA;file_path &amp;lt;- system.file(&#34;extdata&#34;, &#34;PerkinElmerFull&#34;,&#xA;                        &#34;BadPixelMap_t1.bpm.xml&#34;, &#xA;                        package = &#34;detectorchecker&#34;)&#xA;&#xA;# Load a pixel matrix into the detector object&#xA;detector &amp;lt;- load_pix_matrix(detector = detector, file_path = file_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or load one of the examples by calling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(detectorchecker)&#xA;data(PerkinElmerFull_exp_1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which creates an appropriate detector module and loads an example pixel dataset.&lt;/p&gt; &#xA;&lt;p&gt;For see the full list of example datasets call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data(package = &#34;detectorchecker&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use DetectorChecker in your work please cite our package.&lt;/p&gt; &#xA;&lt;p&gt;BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  @Misc{,&#xA;    title = {{DetectorChecker}: Assessment of damage to CT scanners},&#xA;    author = {Tomas Lazauskas and Julia Brettschneider and Oscar Giles and Wilfrid Kendall},&#xA;    url = {https://github.com/alan-turing-institute/DetectorChecker},&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you found a bug or need support, please submit an issue &lt;a href=&#34;https://github.com/alan-turing-institute/DetectorChecker/issues/new&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! If you are willing to propose new features or have bug fixes to contribute, please submit a pull request &lt;a href=&#34;https://github.com/alan-turing-institute/DetectorChecker/pulls&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>epinowcast/epinowcast</title>
    <updated>2023-01-19T01:43:13Z</updated>
    <id>tag:github.com,2023-01-19:/epinowcast/epinowcast</id>
    <link href="https://github.com/epinowcast/epinowcast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools to enable flexible and efficient hierarchical nowcasting of epidemiological time-series using a semi-mechanistic Bayesian model with support for a range of reporting and generative processes. Nowcasting, in this context, is gaining situational awareness using currently available, and historic, observations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Flexible hierarchical nowcasting &lt;a href=&#34;https://package.epinowcast.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epinowcast/epinowcast/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tidyverse.org/lifecycle/#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/epinowcast/epinowcast/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/epinowcast/epinowcast/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/epinowcast/epinowcast&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/epinowcast/epinowcast/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://epinowcast.r-universe.dev/&#34;&gt;&lt;img src=&#34;https://epinowcast.r-universe.dev/badges/epinowcast&#34; alt=&#34;Universe&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/epinowcast/epinowcast/raw/master/LICENSE.md/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/epinowcast/epinowcast/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/epinowcast/epinowcast&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zenodo.org/badge/latestdoi/422611952&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/422611952.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tools to enable flexible and efficient hierarchical nowcasting of right-truncated epidemiological time-series using a semi-mechanistic Bayesian model with support for a range of reporting and generative processes. Nowcasting, in this context, is gaining situational awareness using currently available observations and the reporting patterns of historical observations. This can be useful when tracking the spread of infectious disease in real-time: without nowcasting, changes in trends can be obfuscated by partial reporting or their detection may be delayed due to the use of simpler methods like truncation. While the package has been designed with epidemiological applications in mind, it could be applied to any set of right-truncated time-series count data.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started and learning more&lt;/h2&gt; &#xA;&lt;p&gt;This README is a good place to get started with &lt;code&gt;epinowcast&lt;/code&gt;, in particular the following installation and quick start sections. As you make use of the package, or if your problem requires a richer feature set than presented here, we also provide a range of other documentation, case studies, and spaces for the community to interact with each other. Below is a short list of current resources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://package.epinowcast.org/&#34;&gt;Package website&lt;/a&gt;: This includes a function reference, model outline, and case studies making use of the package. The development version of our documentation (corresponding to our &lt;code&gt;develop&lt;/code&gt; branch) is available &lt;a href=&#34;https://package.epinowcast.org/dev/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.epinowcast.org/&#34;&gt;Organisation website&lt;/a&gt;: This includes links to our other resources as well as guest posts from community members and schedules for any related seminars being run by community members.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/epinowcast/epinowcast/tree/main/inst/examples&#34;&gt;Directory of example scripts&lt;/a&gt;: Not as fleshed out as our complete case studies these scripts are used during package developemnt and each showcase a subset of package functionality. Often newly introduced features will be explored here before surfacing in other areas of our documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.epinowcast.org/&#34;&gt;Community forum&lt;/a&gt;: Our community forum is where development of tools is discussed, along with related research from our members and discussions between users. If you are interested in real-time analysis of infectious disease this is likely a good place to start regardless of if you end up making use of &lt;code&gt;epinowcast&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Installing the package&lt;/h3&gt; &#xA;&lt;p&gt;Install the latest released version of the package with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;epinowcast&#34;, repos = &#34;https://epinowcast.r-universe.dev&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, install the stable development version from GitHub using the following,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;epinowcast/epinowcast&#34;, dependencies = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The unstable development version can also be installed from GitHub using the following,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;epinowcast/epinowcast@develop&#34;, dependencies = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing CmdStan&lt;/h3&gt; &#xA;&lt;p&gt;If you don’t already have CmdStan installed then, in addition to installing &lt;code&gt;epinowcast&lt;/code&gt;, it is also necessary to install CmdStan using CmdStanR’s &lt;code&gt;install_cmdstan()&lt;/code&gt; function to enable model fitting in &lt;code&gt;epinowcast&lt;/code&gt;. A suitable C++ toolchain is also required. Instructions are provided in the &lt;a href=&#34;https://mc-stan.org/cmdstanr/articles/cmdstanr.html&#34;&gt;&lt;em&gt;Getting started with CmdStanR&lt;/em&gt;&lt;/a&gt; vignette. See the &lt;a href=&#34;https://mc-stan.org/cmdstanr/&#34;&gt;CmdStanR documentation&lt;/a&gt; for further details and support.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cmdstanr::install_cmdstan()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;In this quick start we use COVID-19 hospitalisations by date of positive test in Germany available up to the 1st of October 2021 to demonstrate the specification and fitting of a simple nowcasting model using &lt;code&gt;epinowcast&lt;/code&gt;. Examples using more complex models are available in the package vignettes and in the papers linked to in the literature vignette.&lt;/p&gt; &#xA;&lt;h3&gt;Package&lt;/h3&gt; &#xA;&lt;p&gt;As well as &lt;code&gt;epinowcast&lt;/code&gt; this quick start makes use of &lt;code&gt;data.table&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt; which are both installed when &lt;code&gt;epinowcast&lt;/code&gt; is installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(epinowcast)&#xA;library(data.table)&#xA;library(ggplot2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data&lt;/h3&gt; &#xA;&lt;p&gt;Nowcasting is effectively the estimation of reporting patterns for recently reported data. This requires data on these patterns for previous observations and typically this means the time series of data as reported on multiple consecutive days (in theory non-consecutive days could be used but this is not yet supported in &lt;code&gt;epinowcast&lt;/code&gt;). For this quick start these data are sourced from the &lt;a href=&#34;https://github.com/KITmetricslab/hospitalization-nowcast-hub/wiki/Truth-data#role-an-definition-of-the-seven-day-hospitalization-incidence&#34;&gt;Robert Koch Institute via the Germany Nowcasting hub&lt;/a&gt; where they are deconvolved from weekly data and days with negative reported hospitalisations are adjusted.&lt;/p&gt; &#xA;&lt;p&gt;Below we first filter for a snapshot of retrospective data available 40 days before the 1st of October that contains 40 days of data and then produce the nowcast target based on the latest available hospitalisations by date of positive test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nat_germany_hosp &amp;lt;-&#xA;  germany_covid19_hosp[location == &#34;DE&#34;][age_group %in% &#34;00+&#34;] |&amp;gt;&#xA;  enw_filter_report_dates(latest_date = &#34;2021-10-01&#34;)&#xA;&#xA;retro_nat_germany &amp;lt;- nat_germany_hosp |&amp;gt;&#xA;  enw_filter_report_dates(remove_days = 40) |&amp;gt;&#xA;  enw_filter_reference_dates(include_days = 40)&#xA;retro_nat_germany&#xA;#&amp;gt;      reference_date location age_group confirm report_date&#xA;#&amp;gt;              &amp;lt;IDat&amp;gt;   &amp;lt;fctr&amp;gt;    &amp;lt;fctr&amp;gt;   &amp;lt;int&amp;gt;      &amp;lt;IDat&amp;gt;&#xA;#&amp;gt;   1:     2021-07-13       DE       00+      21  2021-07-13&#xA;#&amp;gt;   2:     2021-07-14       DE       00+      22  2021-07-14&#xA;#&amp;gt;   3:     2021-07-15       DE       00+      28  2021-07-15&#xA;#&amp;gt;   4:     2021-07-16       DE       00+      19  2021-07-16&#xA;#&amp;gt;   5:     2021-07-17       DE       00+      20  2021-07-17&#xA;#&amp;gt;  ---                                                      &#xA;#&amp;gt; 857:     2021-07-14       DE       00+      72  2021-08-21&#xA;#&amp;gt; 858:     2021-07-15       DE       00+      69  2021-08-22&#xA;#&amp;gt; 859:     2021-07-13       DE       00+      59  2021-08-21&#xA;#&amp;gt; 860:     2021-07-14       DE       00+      72  2021-08-22&#xA;#&amp;gt; 861:     2021-07-13       DE       00+      59  2021-08-22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;latest_germany_hosp &amp;lt;- nat_germany_hosp |&amp;gt;&#xA;  enw_latest_data() |&amp;gt;&#xA;  enw_filter_reference_dates(remove_days = 40, include_days = 40)&#xA;head(latest_germany_hosp, n = 10)&#xA;#&amp;gt;     reference_date location age_group confirm report_date&#xA;#&amp;gt;             &amp;lt;IDat&amp;gt;   &amp;lt;fctr&amp;gt;    &amp;lt;fctr&amp;gt;   &amp;lt;int&amp;gt;      &amp;lt;IDat&amp;gt;&#xA;#&amp;gt;  1:     2021-07-13       DE       00+      60  2021-10-01&#xA;#&amp;gt;  2:     2021-07-14       DE       00+      74  2021-10-01&#xA;#&amp;gt;  3:     2021-07-15       DE       00+      69  2021-10-01&#xA;#&amp;gt;  4:     2021-07-16       DE       00+      49  2021-10-01&#xA;#&amp;gt;  5:     2021-07-17       DE       00+      67  2021-10-01&#xA;#&amp;gt;  6:     2021-07-18       DE       00+      51  2021-10-01&#xA;#&amp;gt;  7:     2021-07-19       DE       00+      36  2021-10-01&#xA;#&amp;gt;  8:     2021-07-20       DE       00+      96  2021-10-01&#xA;#&amp;gt;  9:     2021-07-21       DE       00+      94  2021-10-01&#xA;#&amp;gt; 10:     2021-07-22       DE       00+      99  2021-10-01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data preprocessing and model specification&lt;/h3&gt; &#xA;&lt;p&gt;Process reported data into format required for &lt;code&gt;epinowcast&lt;/code&gt; and return in a &lt;code&gt;data.table&lt;/code&gt;. At this stage specify grouping (i.e age, location) if any. It can be useful to check this output before beginning to model to make sure everything is as expected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;pobs &amp;lt;- enw_preprocess_data(retro_nat_germany, max_delay = 40)&#xA;pobs&#xA;#&amp;gt;                    obs          new_confirm              latest&#xA;#&amp;gt;                 &amp;lt;list&amp;gt;               &amp;lt;list&amp;gt;              &amp;lt;list&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;data.table[860x9]&amp;gt; &amp;lt;data.table[860x11]&amp;gt; &amp;lt;data.table[41x10]&amp;gt;&#xA;#&amp;gt;    missing_reference  reporting_triangle      metareference          metareport&#xA;#&amp;gt;               &amp;lt;list&amp;gt;              &amp;lt;list&amp;gt;             &amp;lt;list&amp;gt;              &amp;lt;list&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;data.table[0x6]&amp;gt; &amp;lt;data.table[41x42]&amp;gt; &amp;lt;data.table[41x9]&amp;gt; &amp;lt;data.table[80x12]&amp;gt;&#xA;#&amp;gt;             metadelay  time snapshots     by groups max_delay   max_date&#xA;#&amp;gt;                &amp;lt;list&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;list&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;num&amp;gt;     &amp;lt;IDat&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;data.table[40x4]&amp;gt;    41        41             1        40 2021-08-22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Construct a parametric lognormal intercept only model for the date of reference using the metadata produced by &lt;code&gt;enw_preprocess_data()&lt;/code&gt;. Note that &lt;code&gt;epinowcast&lt;/code&gt; uses a sparse design matrix for parametric delay distributions to reduce runtimes so the design matrix shows only unique rows with &lt;code&gt;index&lt;/code&gt; containing the mapping to the full design matrix.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;reference_module &amp;lt;- enw_reference(~1, distribution = &#34;lognormal&#34;, data = pobs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Construct a model with a random effect for the day of report using the metadata produced by &lt;code&gt;enw_preprocess_data()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;report_module &amp;lt;- enw_report(~ (1 | day_of_week), data = pobs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Construct a model with a lognormal random walk on expected cases. See &lt;code&gt;enw_expectation()&lt;/code&gt; for other suggested choices.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;expectation_module &amp;lt;- enw_expectation(&#xA;  ~ 0 + (1 | day), data = pobs&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model fitting&lt;/h3&gt; &#xA;&lt;p&gt;First compile the model. This step can be left to &lt;code&gt;epinowcast&lt;/code&gt; but here we want to use multiple cores per chain to speed up model fitting and so need to compile the model with this feature turned on.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- enw_model(threads = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We now fit the model and produce a nowcast using this fit. Note that here we use two chains each using two threads as a demonstration but in general using 4 chains is recommended. Also note that warm-up and sampling iterations have been set below default values to reduce compute requirements but this may not be sufficient for many real world use cases. Finally, note that here we have silenced fitting progress and potential warning messages for the purposes of keeping this quick start short but in general this should not be done.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;options(mc.cores = 2)&#xA;nowcast &amp;lt;- epinowcast(pobs,&#xA;  expectation = expectation_module,&#xA;  reference = reference_module,&#xA;  report = report_module,&#xA;  fit = enw_fit_opts(,&#xA;    save_warmup = FALSE, pp = TRUE,&#xA;    chains = 2, threads_per_chain = 2,&#xA;    iter_sampling = 500, iter_warmup = 500,&#xA;    show_messages = FALSE, refresh = 0&#xA;  ),&#xA;  model = model&#xA;)&#xA;#&amp;gt; Running MCMC with 2 parallel chains, with 2 thread(s) per chain...&#xA;#&amp;gt; &#xA;#&amp;gt; Chain 2 finished in 41.3 seconds.&#xA;#&amp;gt; Chain 1 finished in 43.0 seconds.&#xA;#&amp;gt; &#xA;#&amp;gt; Both chains finished successfully.&#xA;#&amp;gt; Mean chain execution time: 42.1 seconds.&#xA;#&amp;gt; Total execution time: 43.1 seconds.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Results&lt;/h3&gt; &#xA;&lt;p&gt;Print the output from &lt;code&gt;epinowcast&lt;/code&gt; which includes diagnostic information, the data used for fitting, and the &lt;code&gt;cmdstanr&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nowcast&#xA;#&amp;gt;                    obs          new_confirm              latest&#xA;#&amp;gt;                 &amp;lt;list&amp;gt;               &amp;lt;list&amp;gt;              &amp;lt;list&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;data.table[860x9]&amp;gt; &amp;lt;data.table[860x11]&amp;gt; &amp;lt;data.table[41x10]&amp;gt;&#xA;#&amp;gt;    missing_reference  reporting_triangle      metareference          metareport&#xA;#&amp;gt;               &amp;lt;list&amp;gt;              &amp;lt;list&amp;gt;             &amp;lt;list&amp;gt;              &amp;lt;list&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;data.table[0x6]&amp;gt; &amp;lt;data.table[41x42]&amp;gt; &amp;lt;data.table[41x9]&amp;gt; &amp;lt;data.table[80x12]&amp;gt;&#xA;#&amp;gt;             metadelay  time snapshots     by groups max_delay   max_date&#xA;#&amp;gt;                &amp;lt;list&amp;gt; &amp;lt;int&amp;gt;     &amp;lt;int&amp;gt; &amp;lt;list&amp;gt;  &amp;lt;int&amp;gt;     &amp;lt;num&amp;gt;     &amp;lt;IDat&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;data.table[40x4]&amp;gt;    41        41             1        40 2021-08-22&#xA;#&amp;gtfit&#xA;#&amp;gtamp;lt;list&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;CmdStanMCMC&amp;gt;\n  Inherits from: &amp;lt;CmdStanFit&amp;gt;\n  Public:\n    clone: function (deep = FALSE) \n    cmdstan_diagnose: function () \n    cmdstan_summary: function (flags = NULL) \n    code: function () \n    constrain_variables: function (unconstrained_variables, transformed_parameters = TRUE, \n    data_file: function () \n    diagnostic_summary: function (diagnostics = c(&#34;divergences&#34;, &#34;treedepth&#34;, &#34;ebfmi&#34;), \n    draws: function (variables = NULL, inc_warmup = FALSE, format = getOption(&#34;cmdstanr_draws_format&#34;, \n    expose_functions: function (global = FALSE, verbose = FALSE) \n    functions: environment\n    grad_log_prob: function (unconstrained_variables, jacobian_adjustment = TRUE) \n    hessian: function (unconstrained_variables, jacobian_adjustment = TRUE) \n    init: function () \n    init_model_methods: function (seed = 0, verbose = FALSE, hessian = FALSE) \n    initialize: function (runset) \n    inv_metric: function (matrix = TRUE) \n    latent_dynamics_files: function (include_failed = FALSE) \n    log_prob: function (unconstrained_variables, jacobian_adjustment = TRUE) \n    loo: function (variables = &#34;log_lik&#34;, r_eff = TRUE, ...) \n    lp: function () \n    metadata: function () \n    num_chains: function () \n    num_procs: function () \n    output: function (id = NULL) \n    output_files: function (include_failed = FALSE) \n    print: function (variables = NULL, ..., digits = 2, max_rows = getOption(&#34;cmdstanr_max_rows&#34;, \n    profile_files: function (include_failed = FALSE) \n    profiles: function () \n    return_codes: function () \n    runset: CmdStanRun, R6\n    sampler_diagnostics: function (inc_warmup = FALSE, format = getOption(&#34;cmdstanr_draws_format&#34;, \n    save_data_file: function (dir = &#34;.&#34;, basename = NULL, timestamp = TRUE, random = TRUE) \n    save_latent_dynamics_files: function (dir = &#34;.&#34;, basename = NULL, timestamp = TRUE, random = TRUE) \n    save_object: function (file, ...) \n    save_output_files: function (dir = &#34;.&#34;, basename = NULL, timestamp = TRUE, random = TRUE) \n    save_profile_files: function (dir = &#34;.&#34;, basename = NULL, timestamp = TRUE, random = TRUE) \n    summary: function (variables = NULL, ...) \n    time: function () \n    unconstrain_draws: function (files = NULL, draws = NULL) \n    unconstrain_variables: function (variables) \n    variable_skeleton: function (transformed_parameters = TRUE, generated_quantities = TRUE) \n  Private:\n    draws_: -1481.3 -1481.72 -1471.02 -1471.1 -1475.78 -1473.61 -147 ...\n    init_: NULL\n    inv_metric_: list\n    metadata_: list\n    model_methods_env_: environment\n    profiles_: NULL\n    read_csv_: function (variables = NULL, sampler_diagnostics = NULL, format = getOption(&#34;cmdstanr_draws_format&#34;, \n    sampler_diagnostics_: 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6 7 7 7 7 7 7 7 7 7  ...\n    warmup_draws_: NULL\n    warmup_sampler_diagnostics_: NULL&#xA;#&amp;gt;          data  fit_args samples max_rhat divergent_transitions&#xA;#&amp;gt;        &amp;lt;list&amp;gt;    &amp;lt;list&amp;gt;   &amp;lt;int&amp;gt;    &amp;lt;num&amp;gt;                 &amp;lt;num&amp;gt;&#xA;#&amp;gt; 1: &amp;lt;list[99]&amp;gt; &amp;lt;list[8]&amp;gt;    1000     1.01                     0&#xA;#&amp;gt;    per_divergent_transitions max_treedepth no_at_max_treedepth&#xA;#&amp;gt;                        &amp;lt;num&amp;gt;         &amp;lt;num&amp;gt;               &amp;lt;int&amp;gt;&#xA;#&amp;gt; 1:                         0             8                  15&#xA;#&amp;gt;    per_at_max_treedepth run_time&#xA;#&amp;gt;                   &amp;lt;num&amp;gt;    &amp;lt;num&amp;gt;&#xA;#&amp;gt; 1:                0.015     43.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Summarise the nowcast for the latest snapshot of data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nowcast |&amp;gt;&#xA;  summary(probs = c(0.05, 0.95)) |&amp;gt;&#xA;  head(n = 10)&#xA;#&amp;gt;     reference_date report_date .group max_confirm location age_group confirm&#xA;#&amp;gt;             &amp;lt;IDat&amp;gt;      &amp;lt;IDat&amp;gt;  &amp;lt;num&amp;gt;       &amp;lt;int&amp;gt;   &amp;lt;fctr&amp;gt;    &amp;lt;fctr&amp;gt;   &amp;lt;int&amp;gt;&#xA;#&amp;gt;  1:     2021-07-14  2021-08-22      1          72       DE       00+      72&#xA;#&amp;gt;  2:     2021-07-15  2021-08-22      1          69       DE       00+      69&#xA;#&amp;gt;  3:     2021-07-16  2021-08-22      1          47       DE       00+      47&#xA;#&amp;gt;  4:     2021-07-17  2021-08-22      1          65       DE       00+      65&#xA;#&amp;gt;  5:     2021-07-18  2021-08-22      1          50       DE       00+      50&#xA;#&amp;gt;  6:     2021-07-19  2021-08-22      1          36       DE       00+      36&#xA;#&amp;gt;  7:     2021-07-20  2021-08-22      1          94       DE       00+      94&#xA;#&amp;gt;  8:     2021-07-21  2021-08-22      1          91       DE       00+      91&#xA;#&amp;gt;  9:     2021-07-22  2021-08-22      1          99       DE       00+      99&#xA;#&amp;gt; 10:     2021-07-23  2021-08-22      1          86       DE       00+      86&#xA;#&amp;gt;     cum_prop_reported delay prop_reported    mean median        sd    mad    q5&#xA;#&amp;gt;                 &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;         &amp;lt;num&amp;gt;   &amp;lt;num&amp;gt;  &amp;lt;num&amp;gt;     &amp;lt;num&amp;gt;  &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;&#xA;#&amp;gt;  1:                 1    39             0  72.000     72 0.0000000 0.0000    72&#xA;#&amp;gt;  2:                 1    38             0  69.057     69 0.2486218 0.0000    69&#xA;#&amp;gt;  3:                 1    37             0  47.073     47 0.2715598 0.0000    47&#xA;#&amp;gt;  4:                 1    36             0  65.185     65 0.4438152 0.0000    65&#xA;#&amp;gt;  5:                 1    35             0  50.238     50 0.4935581 0.0000    50&#xA;#&amp;gt;  6:                 1    34             0  36.254     36 0.5193782 0.0000    36&#xA;#&amp;gt;  7:                 1    33             0  94.513     94 0.7525938 0.0000    94&#xA;#&amp;gt;  8:                 1    32             0  91.728     92 0.8560074 1.4826    91&#xA;#&amp;gt;  9:                 1    31             0 100.016    100 1.0727977 1.4826    99&#xA;#&amp;gt; 10:                 1    30             0  87.197     87 1.1249251 1.4826    86&#xA;#&amp;gt;       q95      rhat  ess_bulk  ess_tail&#xA;#&amp;gt;     &amp;lt;num&amp;gt;     &amp;lt;num&amp;gt;     &amp;lt;num&amp;gt;     &amp;lt;num&amp;gt;&#xA;#&amp;gt;  1:    72        NA        NA        NA&#xA;#&amp;gt;  2:    70 1.0016127  930.1962  907.6383&#xA;#&amp;gt;  3:    48 0.9982702 1055.7404 1013.5831&#xA;#&amp;gt;  4:    66 1.0008253  902.0810  893.6840&#xA;#&amp;gt;  5:    51 0.9996211  761.5321  839.5581&#xA;#&amp;gt;  6:    37 1.0014637  946.0659  938.5932&#xA;#&amp;gt;  7:    96 0.9989225  894.9256  904.0204&#xA;#&amp;gt;  8:    93 1.0019180  887.0910  726.9359&#xA;#&amp;gt;  9:   102 1.0022603  973.0836  790.9693&#xA;#&amp;gt; 10:    89 0.9984863  925.5100  797.7415&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Plot the summarised nowcast against currently observed data (or optionally more recent data for comparison purposes).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(nowcast, latest_obs = latest_germany_hosp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/epinowcast/epinowcast/main/man/figures/README-nowcast-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Plot posterior predictions for observed notifications by date of report as a check of how well the model reproduces the observed data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(nowcast, type = &#34;posterior&#34;) +&#xA;  facet_wrap(vars(reference_date), scale = &#34;free&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/epinowcast/epinowcast/main/man/figures/README-pp-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Rather than using the methods supplied for &lt;code&gt;epinowcast&lt;/code&gt; directly, package functions can also be used to extract nowcast posterior samples, summarise them, and then plot them. This is demonstrated here by plotting the 7 day incidence for hospitalisations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# extract samples&#xA;samples &amp;lt;- summary(nowcast, type = &#34;nowcast_samples&#34;)&#xA;&#xA;# Take a 7 day rolling sum of both samples and observations&#xA;cols &amp;lt;- c(&#34;confirm&#34;, &#34;sample&#34;)&#xA;samples[, (cols) := lapply(.SD, frollsum, n = 7),&#xA;  .SDcols = cols, by = &#34;.draw&#34;&#xA;][!is.na(sample)]&#xA;#&amp;gt;        reference_date report_date .group max_confirm location age_group confirm&#xA;#&amp;gt;                &amp;lt;IDat&amp;gt;      &amp;lt;IDat&amp;gt;  &amp;lt;num&amp;gt;       &amp;lt;int&amp;gt;   &amp;lt;fctr&amp;gt;    &amp;lt;fctr&amp;gt;   &amp;lt;int&amp;gt;&#xA;#&amp;gt;     1:     2021-07-20  2021-08-22      1          94       DE       00+     433&#xA;#&amp;gt;     2:     2021-07-20  2021-08-22      1          94       DE       00+     433&#xA;#&amp;gt;     3:     2021-07-20  2021-08-22      1          94       DE       00+     433&#xA;#&amp;gt;     4:     2021-07-20  2021-08-22      1          94       DE       00+     433&#xA;#&amp;gt;     5:     2021-07-20  2021-08-22      1          94       DE       00+     433&#xA;#&amp;gt;    ---                                                                         &#xA;#&amp;gt; 33996:     2021-08-22  2021-08-22      1          45       DE       00+    1093&#xA;#&amp;gt; 33997:     2021-08-22  2021-08-22      1          45       DE       00+    1093&#xA;#&amp;gt; 33998:     2021-08-22  2021-08-22      1          45       DE       00+    1093&#xA;#&amp;gt; 33999:     2021-08-22  2021-08-22      1          45       DE       00+    1093&#xA;#&amp;gt; 34000:     2021-08-22  2021-08-22      1          45       DE       00+    1093&#xA;#&amp;gt;        cum_prop_reported delay prop_reported .chain .iteration .draw sample&#xA;#&amp;gt;                    &amp;lt;num&amp;gt; &amp;lt;num&amp;gt;         &amp;lt;num&amp;gt;  &amp;lt;int&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;num&amp;gt;&#xA;#&amp;gt;     1:                 1    33             0      1          1     1    434&#xA;#&amp;gt;     2:                 1    33             0      1          2     2    438&#xA;#&amp;gt;     3:                 1    33             0      1          3     3    436&#xA;#&amp;gt;     4:                 1    33             0      1          4     4    435&#xA;#&amp;gt;     5:                 1    33             0      1          5     5    433&#xA;#&amp;gt;    ---                                                                     &#xA;#&amp;gt; 33996:                 1     0             1      2        496   996   2189&#xA;#&amp;gt; 33997:                 1     0             1      2        497   997   2063&#xA;#&amp;gt; 33998:                 1     0             1      2        498   998   2083&#xA;#&amp;gt; 33999:                 1     0             1      2        499   999   2087&#xA;#&amp;gt; 34000:                 1     0             1      2        500  1000   2308&#xA;latest_germany_hosp_7day &amp;lt;- copy(latest_germany_hosp)[&#xA;  ,&#xA;  confirm := frollsum(confirm, n = 7)&#xA;][!is.na(confirm)]&#xA;&#xA;# Summarise samples&#xA;sum_across_last_7_days &amp;lt;- enw_summarise_samples(samples)&#xA;&#xA;# Plot samples&#xA;enw_plot_nowcast_quantiles(sum_across_last_7_days, latest_germany_hosp_7day)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/epinowcast/epinowcast/main/man/figures/README-week_nowcast-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If using &lt;code&gt;epinowcast&lt;/code&gt; in your work please consider citing it using the following,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#&amp;gt; &#xA;#&amp;gt; To cite epinowcast in publications use:&#xA;#&amp;gt; &#xA;#&amp;gt;   Sam Abbott, Adrian Lison, and Sebastian Funk (2021). epinowcast:&#xA;#&amp;gt;   Flexible hierarchical nowcasting, DOI: 10.5281/zenodo.5637165&#xA;#&amp;gt; &#xA;#&amp;gt; A BibTeX entry for LaTeX users is&#xA;#&amp;gt; &#xA;#&amp;gt;   @Article{,&#xA;#&amp;gt;     title = {epinowcast: Flexible hierarchical nowcasting},&#xA;#&amp;gt;     author = {Sam Abbott and Adrian Lison and Sebastian Funk},&#xA;#&amp;gt;     journal = {Zenodo},&#xA;#&amp;gt;     year = {2021},&#xA;#&amp;gt;     doi = {10.5281/zenodo.5637165},&#xA;#&amp;gt;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If making use of our methodology or the methodology on which ours is based please cite the relevant papers from our &lt;a href=&#34;https://package.epinowcast.org/articles/model.html&#34;&gt;model outline&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to make a bug report or feature request&lt;/h2&gt; &#xA;&lt;p&gt;Please briefly describe your problem and what output you expect in an &lt;a href=&#34;https://github.com/epinowcast/epinowcast/issues&#34;&gt;issue&lt;/a&gt;. If you have a question, please don’t open an issue. Instead, ask on our &lt;a href=&#34;https://github.com/epinowcast/epinowcast/discussions/categories/q-a&#34;&gt;Q and A page&lt;/a&gt;. See our &lt;a href=&#34;https://github.com/epinowcast/epinowcast/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions and new contributors! We particularly appreciate help on priority problems in the &lt;a href=&#34;https://github.com/epinowcast/epinowcast/issues&#34;&gt;issues&lt;/a&gt;. Please check and add to the issues, and/or add a &lt;a href=&#34;https://github.com/epinowcast/epinowcast/pulls&#34;&gt;pull request&lt;/a&gt;. See our &lt;a href=&#34;https://github.com/epinowcast/epinowcast/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;If interested in expanding the functionality of the underlying model note that &lt;code&gt;epinowcast&lt;/code&gt; allows users to pass in their own models meaning that alternative parameterisations, for example altering the forecast model used for inferring expected observations, may be easily tested within the package infrastructure. Once this testing has been done alterations that increase the flexibility of the package model and improves its defaults are very welcome via pull request or other communication with the package authors. Even if not wanting to add your updated model to the package please do reach out as we would love to hear about your use case.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the &lt;code&gt;epinowcast&lt;/code&gt; project is released with a &lt;a href=&#34;https://package.epinowcast.org/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
</feed>