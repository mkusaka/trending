<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-19T01:42:18Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chainsawriot/rang</title>
    <updated>2023-02-19T01:42:18Z</updated>
    <id>tag:github.com,2023-02-19:/chainsawriot/rang</id>
    <link href="https://github.com/chainsawriot/rang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reconstructing R computational environments&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rang &lt;img src=&#34;https://raw.githubusercontent.com/chainsawriot/rang/v0.2/man/figures/rang_logo.svg?sanitize=true&#34; align=&#34;right&#34; height=&#34;200&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chainsawriot/rang/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/chainsawriot/rang/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of rang (Reconstructing Ancient Number-crunching Gears) [1] is to obtain the dependency graph of R packages at a specific time point.&lt;/p&gt; &#xA;&lt;p&gt;Although this package can also be used to ensure the current R computational environment can be reconstructed by future researchers, this package gears towards reconstructing historical R computational environments which have not been completely declared. For the former purpose, packages such as &lt;a href=&#34;https://github.com/rstudio/renv/&#34;&gt;renv&lt;/a&gt;, &lt;a href=&#34;https://github.com/CredibilityLab/groundhog&#34;&gt;groundhog&lt;/a&gt;, &lt;a href=&#34;https://github.com/andrie/miniCRAN&#34;&gt;miniCRAN&lt;/a&gt;, and &lt;a href=&#34;https://github.com/PredictiveEcology/Require&#34;&gt;Require&lt;/a&gt; should be used. One can think of rang as an archaeological tool.&lt;/p&gt; &#xA;&lt;p&gt;To reconstruct a historical R computational environment, this package assumes only the availability of source packages on CRAN. The reconstruction procedures have been tested in several vintage versions of R.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of rang like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;chainsawriot/rang&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the stable CRAN version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;rang&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;To obtain the dependency graph of R packages, use &lt;code&gt;resolve&lt;/code&gt;. Currently, this package supports both CRAN and Github packages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rang)&#xA;x &amp;lt;- resolve(pkgs = c(&#34;sna&#34;, &#34;schochastics/rtoot&#34;), snapshot_date = &#34;2022-11-30&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;graph &amp;lt;- resolve(pkgs = c(&#34;openNLP&#34;, &#34;LDAvis&#34;, &#34;topicmodels&#34;, &#34;quanteda&#34;),&#xA;                 snapshot_date = &#34;2020-01-16&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;graph&#xA;#&amp;gt; resolved: 4 package(s). Unresolved package(s): 0 &#xA;#&amp;gt; $`cran::openNLP`&#xA;#&amp;gt; The latest version of `openNLP` [cran] at 2020-01-16 was 0.2-7, which has 3 unique dependencies (2 with no dependencies.)&#xA;#&amp;gt; &#xA;#&amp;gt; $`cran::LDAvis`&#xA;#&amp;gt; The latest version of `LDAvis` [cran] at 2020-01-16 was 0.3.2, which has 2 unique dependencies (2 with no dependencies.)&#xA;#&amp;gt; &#xA;#&amp;gt; $`cran::topicmodels`&#xA;#&amp;gt; The latest version of `topicmodels` [cran] at 2020-01-16 was 0.2-9, which has 7 unique dependencies (5 with no dependencies.)&#xA;#&amp;gt; &#xA;#&amp;gt; $`cran::quanteda`&#xA;#&amp;gt; The latest version of `quanteda` [cran] at 2020-01-16 was 1.5.2, which has 63 unique dependencies (33 with no dependencies.)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;graph$sysreqs&#xA;#&amp;gt; [1] &#34;apt-get install -y default-jdk&#34; &#34;apt-get install -y libxml2-dev&#34;&#xA;#&amp;gt; [3] &#34;apt-get install -y make&#34;        &#34;apt-get install -y zlib1g-dev&#34; &#xA;#&amp;gt; [5] &#34;apt-get install -y libpng-dev&#34;  &#34;apt-get install -y libgsl0-dev&#34;&#xA;#&amp;gt; [7] &#34;apt-get install -y libicu-dev&#34;  &#34;apt-get install -y python3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;graph$r_version&#xA;#&amp;gt; [1] &#34;3.6.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resolved result is an S3 object called &lt;code&gt;rang&lt;/code&gt; and can be exported as an installation script. The installation script can be execute on a vanilla R installation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;export_rang(graph, &#34;rang.R&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the execution of the installation script often fails (now) due to missing system dependencies and incompatible R versions. Therefore, the approach outlined below should be used.&lt;/p&gt; &#xA;&lt;h2&gt;Recreate the computational environment via Rocker&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;rang&lt;/code&gt; object can be used to recreate the computational environment via &lt;a href=&#34;https://github.com/rocker-org/rocker&#34;&gt;Rocker&lt;/a&gt;. Please note that the oldest R version one can get from Rocker is R 3.1.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dockerize(graph, &#34;~/rocker_test&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can build and run the Docker container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/rocker_test&#xA;docker build -t rang .&#xA;docker run --rm --name &#34;rangtest&#34; -ti rang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the above example, &lt;code&gt;sessionInfo()&lt;/code&gt; outputs the following. You have successfully gone back to the pre-pandemic time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;R version 3.6.2 (2019-12-12)&#xA;Platform: x86_64-pc-linux-gnu (64-bit)&#xA;Running under: Debian GNU/Linux 10 (buster)&#xA;&#xA;Matrix products: default&#xA;BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.3.5.so&#xA;&#xA;locale:&#xA; [1] LC_CTYPE=en_US.UTF-8          LC_NUMERIC=C                 &#xA; [3] LC_TIME=en_US.UTF-8           LC_COLLATE=en_US.UTF-8       &#xA; [5] LC_MONETARY=en_US.UTF-8       LC_MESSAGES=C                &#xA; [7] LC_PAPER=en_US.UTF-8          LC_NAME=en_US.UTF-8          &#xA; [9] LC_ADDRESS=en_US.UTF-8        LC_TELEPHONE=en_US.UTF-8     &#xA;[11] LC_MEASUREMENT=en_US.UTF-8    LC_IDENTIFICATION=en_US.UTF-8&#xA;&#xA;attached base packages:&#xA;[1] stats     graphics  grDevices utils     datasets  methods   base     &#xA;&#xA;other attached packages:&#xA;[1] topicmodels_0.2-9 LDAvis_0.3.2      openNLP_0.2-7     quanteda_1.5.2   &#xA;&#xA;loaded via a namespace (and not attached):&#xA; [1] NLP_0.2-0           Rcpp_1.0.3          pillar_1.4.3       &#xA; [4] compiler_3.6.2      tools_3.6.2         stopwords_1.0      &#xA; [7] lubridate_1.7.4     lifecycle_0.1.0     tibble_2.1.3       &#xA;[10] gtable_0.3.0        lattice_0.20-38     pkgconfig_2.0.3    &#xA;[13] rlang_0.4.2         Matrix_1.2-18       fastmatch_1.1-0    &#xA;[16] parallel_3.6.2      openNLPdata_1.5.3-4 rJava_0.9-11       &#xA;[19] xml2_1.2.2          stringr_1.4.0       stats4_3.6.2       &#xA;[22] grid_3.6.2          data.table_1.12.8   R6_2.4.1           &#xA;[25] ggplot2_3.2.1       spacyr_1.2          magrittr_1.5       &#xA;[28] scales_1.1.0        modeltools_0.2-22   colorspace_1.4-1   &#xA;[31] stringi_1.4.5       RcppParallel_4.4.4  lazyeval_0.2.2     &#xA;[34] munsell_0.5.0       tm_0.7-7            slam_0.1-47        &#xA;[37] crayon_1.3.4    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Caching R packages&lt;/h3&gt; &#xA;&lt;p&gt;One can also cache (or archive) the R packages from CRAN and Github at the time &lt;code&gt;dockerize&lt;/code&gt; is executed. The cached R packages will then transfer to the container. Please note that system requirements (i.e.&amp;nbsp;&lt;code&gt;deb&lt;/code&gt; packages) are not cached.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dockerize(graph, &#34;~/rocker_test&#34;, cache = TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using alternative Rocker images&lt;/h3&gt; &#xA;&lt;p&gt;One can also select other Rocker versioned images: &lt;code&gt;rstudio&lt;/code&gt;, &lt;code&gt;tidyverse&lt;/code&gt;, &lt;code&gt;verse&lt;/code&gt;, &lt;code&gt;geospatial&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dockerize(graph, &#34;~/rocker_test&#34;, image = &#34;rstudio&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;tidyverse&lt;/code&gt;, &lt;code&gt;verse&lt;/code&gt;, and &lt;code&gt;geospatial&lt;/code&gt; are similar to the default (&lt;code&gt;r-ver&lt;/code&gt;). For &lt;code&gt;rstudio&lt;/code&gt;, one needs to build and launch it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/rocker_test&#xA;docker build -t rang .&#xA;docker run -p 8787:8787 -e PASSWORD=abc123 --rm --name &#34;rangtest&#34; -ti rang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With any browser, go to: &lt;code&gt;local:8787&lt;/code&gt;. The default username is &lt;code&gt;rstudio&lt;/code&gt;, password is as specified.&lt;/p&gt; &#xA;&lt;h2&gt;Recreate the computational environment for R &amp;lt; 3.1.0&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rang&lt;/code&gt; can still be used to recreate computational environments for R &amp;lt; 3.1.0. The Dockerfile generated is based on Debian Woody (3.0) and the requested version of R is compiled from source. As of writing, this method works for R &amp;lt; 3.1.0 but not R &amp;lt; 2.1.0. The &lt;code&gt;image&lt;/code&gt; parameter is ignored in this case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rang_rio &amp;lt;- resolve(&#34;rio&#34;, snapshot_date = &#34;2013-08-28&#34;) ## R 3.0.1&#xA;dockerize(rang_rio, output_dir = &#34;~/old_renviron&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;The logo of rang is a remix of &lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Flag_of_the_Canary_Islands.svg&#34;&gt;this&lt;/a&gt; public domain image. The two dogs should be &lt;em&gt;Presa Canario&lt;/em&gt;, the native dog breed on the islands of Gran Canaria and Tenerife.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It stands for “R Archiving Nerds at GESIS”. The package was previously named &lt;code&gt;gran&lt;/code&gt;, but we decided to rename it to &lt;code&gt;rang&lt;/code&gt; because there is another package named &lt;a href=&#34;https://CRAN.R-project.org/package=GRANBase&#34;&gt;gRAN&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>