<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-11T01:42:13Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>finddx/FINDCov19Tracker</title>
    <updated>2023-04-11T01:42:13Z</updated>
    <id>tag:github.com,2023-04-11:/finddx/FINDCov19Tracker</id>
    <link href="https://github.com/finddx/FINDCov19Tracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FINDCov19Tracker&lt;/h1&gt; &#xA;&lt;p&gt;R-package to power the workflow behind the &lt;a href=&#34;https://github.com/finddx/FINDCov19TrackerData&#34;&gt;FIND COVID-19 Test Data Collection&lt;/a&gt;. A description can be found there.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>insightsengineering/nestcolor</title>
    <updated>2023-04-11T01:42:13Z</updated>
    <id>tag:github.com,2023-04-11:/insightsengineering/nestcolor</id>
    <link href="https://github.com/insightsengineering/nestcolor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Package managing visual conventions of NEST graphs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nestcolor&lt;/h1&gt; &#xA;&lt;!-- start badges --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/insightsengineering/nestcolor/actions/workflows/check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/insightsengineering/nestcolor/actions/workflows/check.yaml/badge.svg?sanitize=true&#34; alt=&#34;Check 🛠&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://insightsengineering.github.io/nestcolor/&#34;&gt;&lt;img src=&#34;https://github.com/insightsengineering/nestcolor/actions/workflows/docs.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docs 📚&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/insightsengineering/nestcolor/_xml_coverage_reports/data/main/coverage.xml&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/insightsengineering/nestcolor/_xml_coverage_reports/data/main/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage 📔&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/forks/insightsengineering/nestcolor?style=social&#34; alt=&#34;GitHub forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/insightsengineering/nestcolor?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/insightsengineering/nestcolor&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/insightsengineering/nestcolor&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/insightsengineering/nestcolor&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/insightsengineering/nestcolor&#34; alt=&#34;GitHub pull requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/insightsengineering/nestcolor&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/count/insightsengineering/nestcolor&#34; alt=&#34;GitHub language count&#34;&gt; &lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34; alt=&#34;Project Status: Active – The project has reached a stable, usable state and is being actively developed.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/insightsengineering/nestcolor/tree/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/r-package/v/insightsengineering/nestcolor/main?color=purple&amp;amp;label=package%20version&#34; alt=&#34;Current Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/insightsengineering/nestcolor/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/insightsengineering/nestcolor?color=red&amp;amp;label=open%20issues&#34; alt=&#34;Open Issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- end badges --&gt; &#xA;&lt;p&gt;The &lt;code&gt;nestcolor&lt;/code&gt; package contains functions for managing visual conventions of NEST graphs. &lt;code&gt;nestcolor&lt;/code&gt; is used to apply a standardized color palette to NEST &lt;code&gt;ggplot2&lt;/code&gt; plots and graphical &lt;code&gt;teal&lt;/code&gt; modules for greater continuity and cohesiveness among NEST package visualizations.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For releases from August 2022 it is recommended that you &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;create and use a Github PAT&lt;/a&gt; to install the latest version of this package. Once you have the PAT, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.setenv(GITHUB_PAT = &#34;your_access_token_here&#34;)&#xA;if (!require(&#34;remotes&#34;)) install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;insightsengineering/nestcolor@*release&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although &lt;code&gt;nestcolor&lt;/code&gt; was not released in June 2022, a stable release of all &lt;code&gt;NEST&lt;/code&gt; packages which were released in June 2022 is also available &lt;a href=&#34;https://github.com/insightsengineering/depository#readme&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers and Forkers&lt;/h2&gt; &#xA;&lt;h3&gt;Stargazers over time&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/insightsengineering/nestcolor&#34;&gt;&lt;img src=&#34;https://starchart.cc/insightsengineering/nestcolor.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Stargazers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/insightsengineering/nestcolor/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/insightsengineering/nestcolor&#34; alt=&#34;Stargazers repo roster for @insightsengineering/nestcolor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Forkers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/insightsengineering/nestcolor/network/members&#34;&gt;&lt;img src=&#34;https://reporoster.com/forks/insightsengineering/nestcolor&#34; alt=&#34;Forkers repo roster for @insightsengineering/nestcolor&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grantmcdermott/plot2</title>
    <updated>2023-04-11T01:42:13Z</updated>
    <id>tag:github.com,2023-04-11:/grantmcdermott/plot2</id>
    <link href="https://github.com/grantmcdermott/plot2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight extension of base R&#39;s plot function&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plot2&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://grantmcdermott.r-universe.dev&#34;&gt;&lt;img src=&#34;https://grantmcdermott.r-universe.dev/badges/plot2&#34; alt=&#34;R-universe status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grantmcdermott/plot2/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/grantmcdermott/plot2/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;A lightweight extension of the base R &lt;code&gt;plot&lt;/code&gt; function, with support for automatic grouping and legend handling, and several other enhancements.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;plot2&lt;/strong&gt; is not yet on CRAN, but can be installed from R-universe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;plot2&#34;, repos = &#34;https://grantmcdermott.r-universe.dev&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;R users are spoiled for choice when it comes to visualization frameworks. The options of course include &lt;strong&gt;ggplot2&lt;/strong&gt; (arguably the most important graphics system of the last decade) and &lt;strong&gt;lattice&lt;/strong&gt;, not to mention a bewildering array of extensions built around, on top of, and in between these amazing packages.&lt;/p&gt; &#xA;&lt;p&gt;It is perhaps not surprising, then, that the base R graphics system sometimes gets short shrift. This is unfortunate, because base R offers very powerful and flexible plotting facilities. Just type &lt;code&gt;demo(graphics)&lt;/code&gt; or &lt;code&gt;demo(persp)&lt;/code&gt; into your R console to get an idea. Or, take a look at &lt;a href=&#34;https://github.com/karoliskoncevicius/tutorial_r_introduction/raw/main/baseplotting.md&#34;&gt;these&lt;/a&gt; &lt;a href=&#34;https://quizzical-engelbart-d15a44.netlify.app/2021-2022_m2-data-2_visu-2_practice#1&#34;&gt;two&lt;/a&gt; excellent tutorials. The downside of this power and flexibility is that base R plotting can require a fair bit of manual tinkering. A case in point is plotting grouped data with an appropriate legend. Doing so with the generic &lt;code&gt;plot()&lt;/code&gt; function can require several function calls or a loop, fiddling with your plot regions, and then generating the legend manually.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;plot2&lt;/strong&gt; package aims to remove this overhead. It provides a lightweight extension of the base R plot system with various convenience features, particularly for creating (2D) scatter and line plots using grouped data. For example, the core &lt;code&gt;plot2()&lt;/code&gt; function makes it easy to plot different categories of a dataset in a single function call and highlight these categories (groups) using modern colour palettes. Coincident with this grouping support, &lt;code&gt;plot2()&lt;/code&gt; also produces automatic legends with scope for further customization. While the package offers several other enhancements, it tries as far as possible to be a drop-in replacement for the equivalent base plot function. Users should (generally) be able to swap a valid &lt;code&gt;plot()&lt;/code&gt; call with &lt;code&gt;plot2()&lt;/code&gt; without any changes to the expected output.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Let’s load the package then walk through some examples.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(plot2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As far as possible, &lt;code&gt;plot2&lt;/code&gt; tries to be a drop-in replacement for regular &lt;code&gt;plot&lt;/code&gt; calls.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(mfrow = c(1, 2))&#xA;&#xA;plot(0:10, main = &#34;plot&#34;)&#xA;plot2(0:10, main = &#34;plot2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-3-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Similarly, we can plot elements from a data frame using either the atomic or formula methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(mfrow = c(2, 2))&#xA;&#xA;plot(airquality$Day, airquality$Temp, main = &#34;plot&#34;)&#xA;plot(Temp ~ Day, data = airquality, main = &#34;plot (formula)&#34;)&#xA;plot2(airquality$Day, airquality$Temp, main = &#34;plot2&#34;)&#xA;plot2(Temp ~ Day, data = airquality, main = &#34;plot2 (formula)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-4-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;dev.off() # reset to default (single) plot window&#xA;#&amp;gt; null device &#xA;#&amp;gt;           1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So far, so good. But where &lt;code&gt;plot2&lt;/code&gt; starts to diverge from its base counterpart is with respect to grouped data. In particular, &lt;code&gt;plot2&lt;/code&gt; allows you to characterize groups using the &lt;code&gt;by&lt;/code&gt; argument.[^1]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2(airquality$Day, airquality$Temp, by = airquality$Month)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-5-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;An even more convenient approach is to use the equivalent formula syntax. Just place the grouping variable after a vertical bar (i.e., &lt;code&gt;|&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2(Temp ~ Day | Month, data = airquality)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-6-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;You can use standard base plotting arguments to adjust features of your plot. For example, change &lt;code&gt;pch&lt;/code&gt; (plot character) to get filled points.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2(&#xA;  Temp ~ Day | Month,&#xA;  data = airquality,&#xA;  pch = 16&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-7-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Similarly, converting to a grouped line plot is a simple matter of adjusting the &lt;code&gt;type&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2(&#xA;  Temp ~ Day | Month,&#xA;  data = airquality,&#xA;  type = &#34;l&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-8-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;In all of the above cases, you will have noticed that we get an automatic legend. The legend position and look can be customized using appropriate arguments. You can change (or turn off) the legend title and bounding box, switch the direction of the legend text, etc. Below, we particularly draw your attention to the trailing “!” in the &lt;code&gt;legend.position&lt;/code&gt; argument. This tells &lt;code&gt;plot2&lt;/code&gt; to place the legend &lt;em&gt;outside&lt;/em&gt; the plot area.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2(&#xA;  Temp ~ Day | Month,&#xA;  data = airquality,&#xA;  type = &#34;l&#34;,&#xA;  legend.position = &#34;bottom!&#34;, # &#34;right!&#34; (default), &#34;none&#34;, or &#34;topleft&#34;, etc.&#xA;  legend.args = list(title = &#34;Month of the year&#34;, bty = &#34;o&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-9-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Colour palettes can be customized easily via the &lt;code&gt;palette&lt;/code&gt; argument. The default group colours are inherited from either the “Okabe-Ito” or “Viridis” palettes, depending on the number of groups. However, all palettes listed by &lt;code&gt;palette.pals()&lt;/code&gt; and &lt;code&gt;hcl.pals()&lt;/code&gt; are supported.[^2] Simply pass on an appropriate palette name as a string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot2(&#xA;  Temp ~ Day | Month,&#xA;  data = airquality,&#xA;  type = &#34;l&#34;,&#xA;  palette = &#34;Tableau 10&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-10-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;Customizing your plots further is straightforward. Here’s a quick penultimate example, where we change our font family, add some transparency to our colour palette, and use Tufte-style floating axes with a background panel grid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(family = &#34;HersheySans&#34;) # Use one of R&#39;s built-in Hershey fonts instead of Arial default&#xA;&#xA;plot2(&#xA;  Temp ~ Day | Month,&#xA;  data = airquality,&#xA;  type = &#34;b&#34;, pch = 16,&#xA;  palette = &#34;Tableau 10&#34;, palette.args = list(alpha = 0.5),&#xA;  main = &#34;Daily temperatures by month&#34;,&#xA;  frame.plot = FALSE, grid = grid()&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-11-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;p&gt;The use of &lt;code&gt;par&lt;/code&gt; (to set the font family) in the above example again underscores the correspondence with the base graphics system. Because &lt;code&gt;plot2&lt;/code&gt; is effectively a convenience wrapper around base &lt;code&gt;plot&lt;/code&gt;, any global elements that you have set for the latter should carry over to the former. For nice out-of-the-box themes, we recommend the &lt;strong&gt;basetheme&lt;/strong&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;par(family = &#34;&#34;) # revert global font change from above&#xA;&#xA;library(basetheme)&#xA;basetheme(&#34;royal&#34;) # or &#34;clean&#34;, &#34;dark&#34;, &#34;ink&#34;, &#34;brutal&#34;, etc.&#xA;&#xA;plot2(&#xA;  Temp ~ Day | Month,&#xA;  data = airquality,&#xA;  type = &#34;b&#34;, pch = 15:19,&#xA;  palette = &#34;Tropic&#34;,&#xA;  main = &#34;Daily temperatures by month&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grantmcdermott/plot2/main/man/figures/README-unnamed-chunk-12-1.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA;basetheme(NULL)  # back to default theme&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In summary, consider the &lt;strong&gt;plot2&lt;/strong&gt; package if you are looking for base R &lt;code&gt;plot&lt;/code&gt; functionality with some added convenience features. You can use pretty much the same syntax and all of your theming elements should carry over too. It has no dependencies other than base R itself and this makes it an attractive option for situations where dependency management is expensive (e.g., an R application running in a browser via &lt;a href=&#34;https://docs.r-wasm.org/webr/latest/&#34;&gt;WebAssembly&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;[^1]: At this point, experienced base plot users might protest that you &lt;em&gt;can&lt;/em&gt; colour by groups using the &lt;code&gt;col&lt;/code&gt; argument, e.g. &lt;code&gt;plot(airquality$Day, airquality$Temp, col = airquality$Month)&lt;/code&gt;. This is true, but there are several limitations. First, you don’t get an automatic legend. Second, the base &lt;code&gt;plot&lt;/code&gt; formula method doesn’t specify the grouping within the formula itself (not a deal-breaker, but not particularly consistent in my view). Third, and perhaps most importantly, this grouping doesn’t carry over to line plots (i.e., type=“l”). Instead, you have to transpose your data and use &lt;code&gt;matplot&lt;/code&gt;. See &lt;a href=&#34;https://stackoverflow.com/questions/10519873/how-to-create-a-line-plot-with-groups-in-base-r-without-loops&#34;&gt;this&lt;/a&gt; old StackOverflow thread for a longer discussion.&lt;/p&gt; &#xA;&lt;p&gt;[^2]: See the accompanying help pages of those two functions for more details, or read the &lt;a href=&#34;https://arxiv.org/pdf/2303.04918.pdf&#34;&gt;article&lt;/a&gt; by Achim Zeileis and Paul Murrell.&lt;/p&gt;</summary>
  </entry>
</feed>