<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T01:50:28Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rmcelreath/stat_rethinking_2022</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/rmcelreath/stat_rethinking_2022</id>
    <link href="https://github.com/rmcelreath/stat_rethinking_2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Statistical Rethinking course winter 2022&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rmcelreath/stat_rethinking_2022/main/title.gif&#34; width=&#34;500&#34;&gt; &#xA;&lt;h1&gt;Statistical Rethinking (2022 Edition)&lt;/h1&gt; &#xA;&lt;p&gt;Instructor: Richard McElreath&lt;/p&gt; &#xA;&lt;p&gt;Lectures: Uploaded &amp;lt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&#34;&gt;Playlist&lt;/a&gt;&amp;gt; and pre-recorded, two per week&lt;/p&gt; &#xA;&lt;p&gt;Discussion: Online, Fridays 3pm-4pm Central European Time&lt;/p&gt; &#xA;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;This course teaches data analysis, but it focuses on scientific models first. The unfortunate truth about data is that nothing much can be done with it, until we say what caused it. We will prioritize conceptual, causal models and precise questions about those models. We will use Bayesian data analysis to connect scientific models to evidence. And we will learn powerful computational tools for coping with high-dimension, imperfect data of the kind that biologists and social scientists face.&lt;/p&gt; &#xA;&lt;h1&gt;Format&lt;/h1&gt; &#xA;&lt;p&gt;Online, flipped instruction. The lectures are pre-recorded. We&#39;ll meet online once a week for an hour to work through the solutions to the assigned problems.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll use the 2nd edition of my book, &amp;lt;&lt;a href=&#34;https://xcelab.net/rm/statistical-rethinking/&#34;&gt;Statistical Rethinking&lt;/a&gt;&amp;gt;. I&#39;ll provide a PDF of the book to enrolled students.&lt;/p&gt; &#xA;&lt;p&gt;Registration: Please sign up via &amp;lt;[COURSE IS FULL SORRY]&amp;gt;. I&#39;ve also set aside 100 audit tickets at the same link, for people who want to participate, but who don&#39;t need graded work and course credit.&lt;/p&gt; &#xA;&lt;h1&gt;Calendar &amp;amp; Topical Outline&lt;/h1&gt; &#xA;&lt;p&gt;There are 10 weeks of instruction. Links to lecture recordings will appear in this table. Weekly problem sets are assigned on Fridays and due the next Friday, when we discuss the solutions in the weekly online meeting.&lt;/p&gt; &#xA;&lt;p&gt;Lecture playlist on Youtube: &amp;lt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&#34;&gt;Statistical Rethinking 2022&lt;/a&gt;&amp;gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Week ##&lt;/th&gt; &#xA;   &lt;th&gt;Meeting date&lt;/th&gt; &#xA;   &lt;th&gt;Reading&lt;/th&gt; &#xA;   &lt;th&gt;Lectures&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 01&lt;/td&gt; &#xA;   &lt;td&gt;07 January&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 1, 2 and 3&lt;/td&gt; &#xA;   &lt;td&gt;[1] &amp;lt;&lt;a href=&#34;https://youtu.be/cclUd_HoRlo&#34;&gt;The Golem of Prague&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-01&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [2] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=guTdrfycW2Q&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=2&#34;&gt;Bayesian Inference&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-02&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 02&lt;/td&gt; &#xA;   &lt;td&gt;14 January&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 4 and 5&lt;/td&gt; &#xA;   &lt;td&gt;[3] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=zYYBtxHWE0A&#34;&gt;Basic Regression&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-03&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [4] &amp;lt;&lt;a href=&#34;https://youtu.be/QiHKdvAbYII&#34;&gt;Categories &amp;amp; Curves&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-04&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 03&lt;/td&gt; &#xA;   &lt;td&gt;21 January&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 5 and 6&lt;/td&gt; &#xA;   &lt;td&gt;[5] &amp;lt;&lt;a href=&#34;https://youtu.be/UpP-_mBvECI&#34;&gt;Elemental Confounds&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-05&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [6] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=NSuTaeW6Orc&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=6&#34;&gt;Good &amp;amp; Bad Controls&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-06&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 04&lt;/td&gt; &#xA;   &lt;td&gt;28 January&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 7, 8 and 9&lt;/td&gt; &#xA;   &lt;td&gt;[7] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=odGAAJDlgp8&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=7&#34;&gt;Overfitting&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-07&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [8] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=Qqz5AJjyugM&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=8&amp;amp;pp=sAQB&#34;&gt;Markov chain Monte Carlo&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-08&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 05&lt;/td&gt; &#xA;   &lt;td&gt;04 February&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 10 and 11&lt;/td&gt; &#xA;   &lt;td&gt;[9] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=nPi5yGbfxuo&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=9&#34;&gt;Logistic and Binomial GLMs&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-09&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [10] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=YrwL6t0kW2I&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=10&#34;&gt;Sensitivity and Poisson GLMs&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-10&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 06&lt;/td&gt; &#xA;   &lt;td&gt;11 February&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 12 and 13&lt;/td&gt; &#xA;   &lt;td&gt;[11] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=-397DMPooR8&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=11&#34;&gt;Ordered Categories&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-11&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [12] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=SocRgsf202M&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=12&#34;&gt;Multilevel Models&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-12&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 07&lt;/td&gt; &#xA;   &lt;td&gt;18 February&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 13 and 14&lt;/td&gt; &#xA;   &lt;td&gt;[13] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=n2aJYtuGu54&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=13&#34;&gt;Multi-Multilevel Models&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-13&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [14] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=XDoAglqd7ss&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=14&#34;&gt;Correlated varying effects&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-14&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 08&lt;/td&gt; &#xA;   &lt;td&gt;25 February&lt;/td&gt; &#xA;   &lt;td&gt;Chapter 14&lt;/td&gt; &#xA;   &lt;td&gt;[15] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=L_QumFUv7C8&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=15&#34;&gt;Social Networks&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-15&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [16] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=PIuqxOBJqLU&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=16&#34;&gt;Gaussian Processes&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-16&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 09&lt;/td&gt; &#xA;   &lt;td&gt;04 March&lt;/td&gt; &#xA;   &lt;td&gt;Chapter 15&lt;/td&gt; &#xA;   &lt;td&gt;[17] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=lTFAB6QmwHM&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=17&#34;&gt;Measurement Error&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-17&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [18] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=oMiSb8GKR0o&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=18&#34;&gt;Missing Data&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-18&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Week 10&lt;/td&gt; &#xA;   &lt;td&gt;11 March&lt;/td&gt; &#xA;   &lt;td&gt;Chapters 16 and 17&lt;/td&gt; &#xA;   &lt;td&gt;[19] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=Doaod09YitA&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=19&#34;&gt;Beyond GLMs&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-19&#34;&gt;(Slides)&lt;/a&gt;&amp;gt; &lt;br&gt; [20] &amp;lt;&lt;a href=&#34;https://www.youtube.com/watch?v=qV3eos7maGs&amp;amp;list=PLDcUM9US4XdMROZ57-OIRtIK0aOynbgZN&amp;amp;index=20&#34;&gt;Horoscopes&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://speakerdeck.com/rmcelreath/statistical-rethinking-2022-lecture-20&#34;&gt;(Slides)&lt;/a&gt;&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Coding&lt;/h1&gt; &#xA;&lt;p&gt;This course involves a lot of scripting. Students can engage with the material using either the original R code examples or one of several conversions to other computing environments. The conversions are not always exact, but they are rather complete. Each option is listed below. I also list conversions &amp;lt;&lt;a href=&#34;https://xcelab.net/rm/statistical-rethinking/&#34;&gt;here&lt;/a&gt;&amp;gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Original R Flavor&lt;/h2&gt; &#xA;&lt;p&gt;For those who want to use the original R code examples in the print book, you need to install the &lt;code&gt;rethinking&lt;/code&gt; R package. The code is all on github &lt;a href=&#34;https://github.com/rmcelreath/rethinking/&#34;&gt;https://github.com/rmcelreath/rethinking/&lt;/a&gt; and there are additional details about the package there, including information about using the more-up-to-date &lt;code&gt;cmdstanr&lt;/code&gt; instead of &lt;code&gt;rstan&lt;/code&gt; as the underlying MCMC engine.&lt;/p&gt; &#xA;&lt;h2&gt;R + Tidyverse + ggplot2 + brms&lt;/h2&gt; &#xA;&lt;p&gt;The &amp;lt;&lt;a href=&#34;https://bookdown.org/content/4857/&#34;&gt;Tidyverse/brms&lt;/a&gt;&amp;gt; conversion is very high quality and complete through Chapter 14.&lt;/p&gt; &#xA;&lt;h2&gt;Python: PyMC3 and NumPyro and more&lt;/h2&gt; &#xA;&lt;p&gt;The &amp;lt;&lt;a href=&#34;https://github.com/pymc-devs/resources/tree/master/Rethinking_2&#34;&gt;Python/PyMC3&lt;/a&gt;&amp;gt; conversion is quite complete. There are also at least two NumPyro conversions: &amp;lt;&lt;a href=&#34;https://github.com/asuagar/statrethink-course-numpyro-2019&#34;&gt;NumPyro1&lt;/a&gt;&amp;gt; &amp;lt;&lt;a href=&#34;https://fehiepsi.github.io/rethinking-numpyro/&#34;&gt;NumPyro2&lt;/a&gt;&amp;gt;. And there is this &amp;lt;&lt;a href=&#34;https://github.com/ksachdeva/rethinking-tensorflow-probability&#34;&gt;TensorFlow Probability&lt;/a&gt;&amp;gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Julia and Turing&lt;/h2&gt; &#xA;&lt;p&gt;The &amp;lt;&lt;a href=&#34;https://github.com/StatisticalRethinkingJulia&#34;&gt;Julia/Turing&lt;/a&gt;&amp;gt; conversion is not as complete, but is growing fast and presents the Rethinking examples in multiple Julia engines, including the great &amp;lt;&lt;a href=&#34;https://github.com/StatisticalRethinkingJulia/TuringModels.jl&#34;&gt;TuringLang&lt;/a&gt;&amp;gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;p&gt;The are several other conversions. See the full list at &lt;a href=&#34;https://xcelab.net/rm/statistical-rethinking/&#34;&gt;https://xcelab.net/rm/statistical-rethinking/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Homework and solutions&lt;/h1&gt; &#xA;&lt;p&gt;I will also post problem sets and solutions. Check the folders at the top of the repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hadley/r4ds</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/hadley/r4ds</id>
    <link href="https://github.com/hadley/r4ds" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R for data science: a book&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R for Data Science&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hadley/r4ds/actions/workflows/build_book.yaml&#34;&gt;&lt;img src=&#34;https://github.com/hadley/r4ds/actions/workflows/build_book.yaml/badge.svg?sanitize=true&#34; alt=&#34;build_book&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;This repository contains the source of &lt;a href=&#34;http://r4ds.had.co.nz&#34;&gt;R for Data Science&lt;/a&gt; book. The book is built using &lt;a href=&#34;https://github.com/rstudio/bookdown&#34;&gt;bookdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The R packages used in this book can be installed via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{r}&#34;&gt;devtools::install_github(&#34;hadley/r4ds&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;h3&gt;Omnigraffle drawings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Font: 12pt Ubuntu mono&lt;/li&gt; &#xA; &lt;li&gt;Export as 300 dpi png.&lt;/li&gt; &#xA; &lt;li&gt;Website font is 18 px = 13.5 pt, so scale dpi to match font sizes: 270 = 300 * 12 / 13.5&lt;/li&gt; &#xA; &lt;li&gt;Verified sizes are visually equivalent by screenshotting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- --&gt; &#xA;&lt;pre&gt;&lt;code&gt;#| echo: FALSE&#xA;#| out.width: NULL&#xA;knitr::include_graphics(&#34;diagrams/transform.png&#34;, dpi = 270)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that r4ds uses a &lt;a href=&#34;https://contributor-covenant.org/version/2/0/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this book, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>selva86/datasets</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/selva86/datasets</id>
    <link href="https://github.com/selva86/datasets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of datasets of ML problem solving&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Datasets&lt;/h1&gt; &#xA;&lt;h3&gt;Datasets collected from R packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mlbench&lt;/li&gt; &#xA; &lt;li&gt;kernlab&lt;/li&gt; &#xA; &lt;li&gt;klaR&lt;/li&gt; &#xA; &lt;li&gt;car&lt;/li&gt; &#xA; &lt;li&gt;reshape2&lt;/li&gt; &#xA; &lt;li&gt;hflights&lt;/li&gt; &#xA; &lt;li&gt;ISLR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The original source repositories are:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;ftp://ftp.ics.uci.edu/pub/machine-learning-databases&#34;&gt;ftp://ftp.ics.uci.edu/pub/machine-learning-databases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ics.uci.edu/~mlearn/MLRepository.html&#34;&gt;http://www.ics.uci.edu/~mlearn/MLRepository.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://kdd.ics.uci.edu&#34;&gt;http://kdd.ics.uci.edu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.liacs.nl/~putten/library/cc2000/&#34;&gt;http://www.liacs.nl/~putten/library/cc2000/&lt;/a&gt; (ticdata)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dracula/ggplot2</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/dracula/ggplot2</id>
    <link href="https://github.com/dracula/ggplot2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧛🏻‍♂️ Dark theme for ggplot2 and R palette&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dracula for &lt;a href=&#34;https://github.com/tidyverse/ggplot2&#34;&gt;ggplot2&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A dark theme for &lt;a href=&#34;https://github.com/tidyverse/ggplot2&#34;&gt;ggplot2&lt;/a&gt; and &lt;code&gt;R&lt;/code&gt; palette.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dracula/ggplot2/main/screenshot.png&#34; alt=&#34;MPG Plots&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;theme_dracula&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;theme_dracula()&lt;/code&gt; provides a minimal &lt;code&gt;ggplot2&lt;/code&gt; theme with a Dracula-ish, dark backdrop.&lt;/p&gt; &#xA;&lt;h2&gt;dracula_palette&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dracula_palette()&lt;/code&gt; provides the more vibrant colors of Dracula to stand out in front of &lt;code&gt;theme_dracula()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Params&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;palette &amp;lt;- dracula_palette(num_cols, var_type = c(&#34;discrete&#34;, &#34;continuous&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Param &lt;code&gt;num_cols&lt;/code&gt; - Number of colors to return. If missing, defaults to the length of the entire palette.&lt;/p&gt; &#xA;&lt;p&gt;Param &lt;code&gt;var_type&lt;/code&gt; - Using &lt;code&gt;var_type = &#34;discrete&#34;&lt;/code&gt; will return the number of colors provided by &lt;code&gt;num_cols&lt;/code&gt;. &lt;code&gt;dracula_palette()&lt;/code&gt; will recycle through the palette if &lt;code&gt;num_cols&lt;/code&gt; &amp;gt; 7. Using &lt;code&gt;var_type = &#34;continuous&#34;&lt;/code&gt; will create a color ramp with the number of colors provided by &lt;code&gt;num_cols&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/dracula/ggplot2/main/#dracula-for-ggplot2&#34;&gt;beginning of the README&lt;/a&gt; for the examples produced.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;library(ggplot2)&#xA;library(dplyr)&#xA;theme_set(theme_dracula())&#xA;&#xA;# Left bar chart&#xA;mpg %&amp;gt;%&#xA;  group_by(manufacturer) %&amp;gt;%&#xA;  summarize(mean_hwy = mean(hwy)) %&amp;gt;%&#xA;  ggplot(aes(x = manufacturer, y = mean_hwy, fill = manufacturer)) +&#xA;  theme(legend.position = &#34;none&#34;) +&#xA;  coord_flip() +&#xA;  geom_col() +&#xA;  scale_fill_manual(&#xA;    values = dracula_palette(&#xA;      num_col  = nlevels(factor(mpg$manufacturer)),&#xA;      var_type = &#34;discrete&#34;&#xA;    )&#xA;  )&#xA;&#xA;# Right scatterplot&#xA;mpg %&amp;gt;%&#xA;  ggplot(aes(x = displ, y = cty, color = hwy)) +&#xA;  geom_point() +&#xA;  scale_colour_gradientn(colors = dracula_palette(var_type = &#34;continuous&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;All instructions can be found at &lt;a href=&#34;https://draculatheme.com/ggplot2&#34;&gt;draculatheme.com/ggplot2&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;p&gt;This theme is maintained by the following person(s) and a bunch of &lt;a href=&#34;https://github.com/dracula/ggplot2/graphs/contributors&#34;&gt;awesome contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/jrdnbradford&#34;&gt;&lt;img src=&#34;https://github.com/jrdnbradford.png?size=100&#34; alt=&#34;Jordan Bradford&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jrdnbradford&#34;&gt;Jordan Bradford&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/draculatheme&#34;&gt;Twitter&lt;/a&gt; - Best for getting updates about themes and new stuff.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dracula/dracula-theme/discussions&#34;&gt;GitHub&lt;/a&gt; - Best for asking questions and discussing issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://draculatheme.com/discord-invite&#34;&gt;Discord&lt;/a&gt; - Best for hanging out with the community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dracula/ggplot2/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmcelreath/rethinking</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/rmcelreath/rethinking</id>
    <link href="https://github.com/rmcelreath/rethinking" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Statistical Rethinking course and book package&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;rethinking&lt;/h1&gt; &#xA;&lt;p&gt;This R package accompanies a course and book on Bayesian data analysis: McElreath 2020. Statistical Rethinking, 2nd edition, CRC Press. If you are using it with the first edition of the book, please see the notes at the bottom of this file.&lt;/p&gt; &#xA;&lt;p&gt;It contains tools for conducting both quick quadratic approximation of the posterior distribution as well as Hamiltonian Monte Carlo (through RStan or cmdstanr - mc-stan.org). Many packages do this. The signature difference of this package is that it forces the user to specify the model as a list of explicit distributional assumptions. This is more tedious than typical formula-based tools, but it is also much more flexible and powerful and---most important---useful for teaching and learning. When students have to write out every detail of the model, they actually learn the model.&lt;/p&gt; &#xA;&lt;p&gt;For example, a simple Gaussian model could be specified with this list of formulas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;f &amp;lt;- alist(&#xA;    y ~ dnorm( mu , sigma ),&#xA;    mu ~ dnorm( 0 , 10 ),&#xA;    sigma ~ dexp( 1 )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first formula in the list is the probability of the outcome (likelihood); the second is the prior for &lt;code&gt;mu&lt;/code&gt;; the third is the prior for &lt;code&gt;sigma&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;There are three steps. (1) Install &lt;code&gt;rstan&lt;/code&gt;, (2) install &lt;code&gt;cmdstanr&lt;/code&gt;, (3) install &lt;code&gt;rethinking&lt;/code&gt;. Details follow.&lt;/p&gt; &#xA;&lt;p&gt;First, install the C++ toolchain and install the &lt;code&gt;rstan&lt;/code&gt; package. Go to &lt;code&gt;https://mc-stan.org/users/interfaces/rstan.html&lt;/code&gt; and follow the instructions for your platform. The biggest challenge is getting a C++ compiler configured to work with your installation of R. The instructions are quite thorough. Obey them, and you&#39;ll succeed.&lt;/p&gt; &#xA;&lt;p&gt;Second, install the &lt;code&gt;cmdstanr&lt;/code&gt; package. Visit &lt;code&gt;https://mc-stan.org/cmdstanr/&lt;/code&gt;. The first time you install cmdstanr, you will also need compile the libraries with &lt;code&gt;cmdstanr::install_cmdstan()&lt;/code&gt;. All this of this bother is worth it. You just have to do it once.&lt;/p&gt; &#xA;&lt;p&gt;Third, once rstan and cmdstanr are installed (almost there), then you can install &lt;code&gt;rethinking&lt;/code&gt; from within R using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(c(&#34;coda&#34;,&#34;mvtnorm&#34;,&#34;devtools&#34;,&#34;loo&#34;,&#34;dagitty&#34;,&#34;shape&#34;))&#xA;devtools::install_github(&#34;rmcelreath/rethinking&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there are any problems, they likely arise when trying to install &lt;code&gt;rstan&lt;/code&gt;, so the &lt;code&gt;rethinking&lt;/code&gt; package has little to do with it. See the manual linked above for some hints about getting &lt;code&gt;rstan&lt;/code&gt; installed. But always consult the RStan section of the website at &lt;code&gt;mc-stan.org&lt;/code&gt; for the latest information on RStan.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;rethinking&lt;/code&gt; package is not on CRAN, just on github. The &lt;code&gt;rethinking&lt;/code&gt; package is never going to be on CRAN.&lt;/p&gt; &#xA;&lt;h1&gt;rethinking slim - no MCMC&lt;/h1&gt; &#xA;&lt;p&gt;If you just want to work through the first half of the course, without bothering with MCMC and Stan installs, you can install the &#39;slim&#39; version of the rethinking package. Do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(c(&#34;coda&#34;,&#34;mvtnorm&#34;,&#34;devtools&#34;,&#34;loo&#34;,&#34;dagitty&#34;))&#xA;devtools::install_github(&#34;rmcelreath/rethinking@slim&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;quap&lt;/code&gt; function and related helper functions should still work, and you&#39;ll be able to work through Chapter 8 before you need to install the full version with Stan.&lt;/p&gt; &#xA;&lt;h1&gt;Quadratic Approximation with &lt;code&gt;quap&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Almost any ordinary generalized linear model can be specified with &lt;code&gt;quap&lt;/code&gt;. To use quadratic approximation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(rethinking)&#xA;&#xA;f &amp;lt;- alist(&#xA;    y ~ dnorm( mu , sigma ),&#xA;    mu ~ dnorm( 0 , 10 ),&#xA;    sigma ~ dexp( 1 )&#xA;)&#xA;&#xA;fit &amp;lt;- quap( &#xA;    f , &#xA;    data=list(y=c(-1,1)) , &#xA;    start=list(mu=0,sigma=1)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The object &lt;code&gt;fit&lt;/code&gt; holds the result. For a summary of marginal posterior distributions, use &lt;code&gt;summary(fit)&lt;/code&gt; or &lt;code&gt;precis(fit)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      mean   sd  5.5% 94.5%&#xA;mu    0.00 0.59 -0.95  0.95&#xA;sigma 0.84 0.33  0.31  1.36&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also supports vectorized parameters, which is convenient for categories. See examples &lt;code&gt;?quap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the first edition of the textbook, this function was called &lt;code&gt;map&lt;/code&gt;. It can still be used with that alias. It was renamed, because the name &lt;code&gt;map&lt;/code&gt; was misleading. This function produces quadratic approximations of the posterior distribution, not just maximum a posteriori (MAP) estimates.&lt;/p&gt; &#xA;&lt;h1&gt;Hamiltonian Monte Carlo with &lt;code&gt;ulam&lt;/code&gt; (and &lt;code&gt;map2stan&lt;/code&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;The same formula list can be compiled into a Stan (mc-stan.org) model using one of two tools: &lt;code&gt;ulam&lt;/code&gt; or &lt;code&gt;map2stan&lt;/code&gt;. For simple models, they are identical. &lt;code&gt;ulam&lt;/code&gt; is the newer tool that allows for much more flexibility, including explicit variable types and custom distributions. &lt;code&gt;map2stan&lt;/code&gt; is the original tool from the first edition of the package and textbook. Going forward, new features will be added to &lt;code&gt;ulam&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ulam&lt;/code&gt; is named after Stanisław Ulam, who was one of the parents of the Monte Carlo method and is the namesake of the Stan project as well. It is pronounced something like [OO-lahm], not like [YOU-lamm].&lt;/p&gt; &#xA;&lt;p&gt;Both tools take the same kind of input as &lt;code&gt;quap&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fit_stan &amp;lt;- ulam( f , data=list(y=c(-1,1)) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The chain runs automatically, provided &lt;code&gt;rstan&lt;/code&gt; is installed. Chain diagnostics are displayed in the &lt;code&gt;precis(fit_stan)&lt;/code&gt; output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      mean   sd  5.5% 94.5% n_eff Rhat&#xA;sigma 1.45 0.72  0.67  2.84   145    1&#xA;mu    0.12 1.04 -1.46  1.59   163    1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;ulam&lt;/code&gt; models, &lt;code&gt;plot&lt;/code&gt; displays the same information as &lt;code&gt;precis&lt;/code&gt; and &lt;code&gt;traceplot&lt;/code&gt; displays the chains.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;extract.samples&lt;/code&gt; returns samples in a list. &lt;code&gt;extract.prior&lt;/code&gt; samples from the prior and returns the samples in a list as well.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;stanfit&lt;/code&gt; object itself is in the &lt;code&gt;@stanfit&lt;/code&gt; slot. Anything you&#39;d do with a Stan model can be done with that slot directly.&lt;/p&gt; &#xA;&lt;p&gt;The Stan code can be accessed by using &lt;code&gt;stancode(fit_stan)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data{&#xA;    real y[2];&#xA;}&#xA;parameters{&#xA;    real&amp;lt;lower=0&amp;gt; sigma;&#xA;    real mu;&#xA;}&#xA;model{&#xA;    sigma ~ exponential( 1 );&#xA;    mu ~ normal( 0 , 10 );&#xA;    y ~ normal( mu , sigma );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;ulam&lt;/code&gt; doesn&#39;t care about R distribution names. You can instead use Stan-style names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fit_stan &amp;lt;- ulam(&#xA;    alist(&#xA;        y ~ normal( mu , sigma ),&#xA;        mu ~ normal( 0 , 10 ),&#xA;        sigma ~ exponential( 1 )&#xA;    ), data=list(y=c(-1,1)) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Posterior prediction&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;code&gt;quap&lt;/code&gt;, &lt;code&gt;ulam&lt;/code&gt;, and &lt;code&gt;map2stan&lt;/code&gt; objects can be post-processed to produce posterior predictive distributions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;link&lt;/code&gt; is used to compute values of any linear models over samples from the posterior distribution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sim&lt;/code&gt; is used to simulate posterior predictive distributions, simulating outcomes over samples from the posterior distribution of parameters. &lt;code&gt;sim&lt;/code&gt; can also be used to simulate prior predictives.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;?link&lt;/code&gt; and &lt;code&gt;?sim&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;postcheck&lt;/code&gt; automatically computes posterior predictive (retrodictive?) checks. It merely uses &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;sim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Multilevel model formulas&lt;/h2&gt; &#xA;&lt;p&gt;While &lt;code&gt;quap&lt;/code&gt; is limited to fixed effects models for the most part, &lt;code&gt;ulam&lt;/code&gt; can specify multilevel models, even quite complex ones. For example, a simple varying intercepts model looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# prep data&#xA;data( UCBadmit )&#xA;UCBadmit$male &amp;lt;- as.integer(UCBadmit$applicant.gender==&#34;male&#34;)&#xA;UCBadmit$dept &amp;lt;- rep( 1:6 , each=2 )&#xA;UCBadmit$applicant.gender &amp;lt;- NULL&#xA;&#xA;# varying intercepts model&#xA;m_glmm1 &amp;lt;- ulam(&#xA;    alist(&#xA;        admit ~ binomial(applications,p),&#xA;        logit(p) &amp;lt;- a[dept] + b*male,&#xA;        a[dept] ~ normal( abar , sigma ),&#xA;        abar ~ normal( 0 , 4 ),&#xA;        sigma ~ half_normal(0,1),&#xA;        b ~ normal(0,1)&#xA;    ), data=UCBadmit )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The analogous varying slopes model is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m_glmm2 &amp;lt;- ulam(&#xA;    alist(&#xA;        admit ~ binomial(applications,p),&#xA;        logit(p) &amp;lt;- a[dept] + b[dept]*male,&#xA;        c( a , b )[dept] ~ multi_normal( c(abar,bbar) , Rho , sigma ),&#xA;        abar ~ normal( 0 , 4 ),&#xA;        bbar ~ normal(0,1),&#xA;        sigma ~ half_normal(0,1),&#xA;        Rho ~ lkjcorr(2)&#xA;    ),&#xA;    data=UCBadmit )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to express the varying slopes model is with a vector of varying effects. This is made possible by using an explicit vector declaration inside the formula:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m_glmm3 &amp;lt;- ulam(&#xA;    alist(&#xA;        admit ~ binomial(applications,p),&#xA;        logit(p) &amp;lt;- v[dept,1] + v[dept,2]*male,&#xA;        vector[2]:v[dept] ~ multi_normal( c(abar,bbar) , Rho , sigma ),&#xA;        abar ~ normal( 0 , 4 ),&#xA;        bbar ~ normal(0,1),&#xA;        sigma ~ half_normal(0,1),&#xA;        Rho ~ lkjcorr(2)&#xA;    ),&#xA;    data=UCBadmit )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That &lt;code&gt;vector[2]:v[dept]&lt;/code&gt; means &#34;declare a vector of length two for each unique dept&#34;. To access the elements of these vectors, the linear model uses multiple indexes inside the brackets: &lt;code&gt;[dept,1]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This strategy can be taken one step further and the means can be declared as a vector as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m_glmm4 &amp;lt;- ulam(&#xA;    alist(&#xA;        admit ~ binomial(applications,p),&#xA;        logit(p) &amp;lt;- v[dept,1] + v[dept,2]*male,&#xA;        vector[2]:v[dept] ~ multi_normal( v_mu , Rho , sigma ),&#xA;        vector[2]:v_mu ~ normal(0,1),&#xA;        sigma[1] ~ half_normal(0,1),&#xA;        sigma[2] ~ half_normal(0,2),&#xA;        Rho ~ lkjcorr(2)&#xA;    ),&#xA;    data=UCBadmit )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a completely non-centered parameterization can be coded directly as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m_glmm5 &amp;lt;- ulam(&#xA;    alist(&#xA;        admit ~ binomial(applications,p),&#xA;        logit(p) &amp;lt;- v_mu[1] + v[dept,1] + (v_mu[2] + v[dept,2])*male,&#xA;        matrix[dept,2]: v &amp;lt;- t(diag_pre_multiply( sigma , L_Rho ) * z),&#xA;        matrix[2,dept]: z ~ normal( 0 , 1 ),&#xA;        vector[2]: v_mu[[1]] ~ normal(0,4),&#xA;        vector[2]: v_mu[[2]] ~ normal(0,1),&#xA;        vector[2]: sigma ~ half_normal(0,1),&#xA;        cholesky_factor_corr[2]: L_Rho ~ lkj_corr_cholesky( 2 )&#xA;    ),&#xA;    data=UCBadmit )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above, the varying effects matrix &lt;code&gt;v&lt;/code&gt; is constructed from a matrix of z-scores &lt;code&gt;z&lt;/code&gt; and a covariance structure contained in &lt;code&gt;sigma&lt;/code&gt; and a Cholesky factor &lt;code&gt;L_Rho&lt;/code&gt;. Note the double-bracket notation &lt;code&gt;v_mu[[1]]&lt;/code&gt; allowing distinct priors for each index of a vector.&lt;/p&gt; &#xA;&lt;h2&gt;log-likelihood calculations for WAIC and LOOCV&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ulam&lt;/code&gt; can optionally return pointwise log-likelihood values. These are needed for computing WAIC and PSIS-LOO. The &lt;code&gt;log_lik&lt;/code&gt; argument toggles this on:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m_glmm1 &amp;lt;- ulam(&#xA;    alist(&#xA;        admit ~ binomial(applications,p),&#xA;        logit(p) &amp;lt;- a[dept] + b*male,&#xA;        a[dept] ~ normal( abar , sigma ),&#xA;        abar ~ normal( 0 , 4 ),&#xA;        sigma ~ half_normal(0,1),&#xA;        b ~ normal(0,1)&#xA;    ), data=UCBadmit , log_lik=TRUE )&#xA;WAIC(m_glmm1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The additional code has been added to the generated quantities block of the Stan model (see this with &lt;code&gt;stancode(m_glmm1)&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;generated quantities{&#xA;    vector[12] log_lik;&#xA;    vector[12] p;&#xA;    for ( i in 1:12 ) {&#xA;        p[i] = a[dept[i]] + b * male[i];&#xA;        p[i] = inv_logit(p[i]);&#xA;    }&#xA;    for ( i in 1:12 ) log_lik[i] = binomial_lpmf( admit[i] | applications[i] , p[i] );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Conditional statements, custom distributions, and mixture models&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ulam&lt;/code&gt; also supports if-then statements and custom distribution assignments. These are useful for coding mixture models, such as zero-inflated Poisson and discrete missing value models.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example zero-inflated Poisson model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# zero-inflated poisson&#xA;# gen data first - example from text&#xA;prob_drink &amp;lt;- 0.2 # 20% of days&#xA;rate_work &amp;lt;- 1    # average 1 manuscript per day&#xA;N &amp;lt;- 365&#xA;drink &amp;lt;- rbinom( N , 1 , prob_drink )&#xA;y &amp;lt;- as.integer( (1-drink)*rpois( N , rate_work ) )&#xA;x &amp;lt;- rnorm( N ) # dummy covariate&#xA;&#xA;# now ulam code&#xA;m_zip &amp;lt;- ulam(&#xA;    alist(&#xA;        y|y==0 ~ custom( log_mix( p , 0 , poisson_lpmf(0|lambda) ) ),&#xA;        y|y&amp;gt;0 ~ custom( log1m(p) + poisson_lpmf(y|lambda) ),&#xA;        logit(p) &amp;lt;- ap,&#xA;        log(lambda) &amp;lt;- al + bl*x,&#xA;        ap ~ dnorm(0,1),&#xA;        al ~ dnorm(0,10),&#xA;        bl ~ normal(0,1)&#xA;    ) ,&#xA;    data=list(y=y,x=x) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Stan code corresponding to the first two lines in the formula above is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for ( i in 1:365 ) &#xA;    if ( y[i] &amp;gt; 0 ) target += log1m(p) + poisson_lpmf(y[i] | lambda[i]);&#xA;for ( i in 1:365 ) &#xA;    if ( y[i] == 0 ) target += log_mix(p, 0, poisson_lpmf(0 | lambda[i]));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What &lt;code&gt;custom&lt;/code&gt; does is define custom &lt;code&gt;target&lt;/code&gt; updates. And the &lt;code&gt;|&lt;/code&gt; operator makes the line conditional. Note that &lt;code&gt;log1m&lt;/code&gt;, &lt;code&gt;log_mix&lt;/code&gt;, and &lt;code&gt;poisson_lpmf&lt;/code&gt; are Stan functions.&lt;/p&gt; &#xA;&lt;p&gt;The same &lt;code&gt;custom&lt;/code&gt; distribution approach allows for marginalization over discrete missing values. Let&#39;s introduce some missing values in the &lt;code&gt;UCBadmit&lt;/code&gt; data from earlier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UCBadmit$male2 &amp;lt;- UCBadmit$male&#xA;UCBadmit$male2[1:2] &amp;lt;- (-1) # missingness code&#xA;UCBadmit$male2 &amp;lt;- as.integer(UCBadmit$male2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the model needs to detect when &lt;code&gt;male2&lt;/code&gt; is missing (-1) and then compute a mixture over the unknown state.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m_mix &amp;lt;- ulam(&#xA;    alist(&#xA;        admit|male2==-1 ~ custom( log_mix( &#xA;            phi_male , &#xA;            binomial_lpmf(admit|applications,p_m1) , &#xA;            binomial_lpmf(admit|applications,p_m0) ) ),&#xA;        admit|male2&amp;gt;-1 ~ binomial( applications , p ),&#xA;        logit(p) &amp;lt;- a[dept] + b*male2,&#xA;        logit(p_m1) &amp;lt;- a[dept] + b*1,&#xA;        logit(p_m0) &amp;lt;- a[dept] + b*0,&#xA;        male2|male2&amp;gt;-1 ~ bernoulli( phi_male ),&#xA;        phi_male ~ beta(2,2),&#xA;        a[dept] ~ normal(0,4),&#xA;        b ~ normal(0,1)&#xA;    ),&#xA;    data=UCBadmit )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the addition of &lt;code&gt;phi_male&lt;/code&gt; to average over the unknown state.&lt;/p&gt; &#xA;&lt;h2&gt;Continuous missing data imputation&lt;/h2&gt; &#xA;&lt;p&gt;In principle, imputation of missing real-valued data is easy: Just replace each missing value with a parameter. In practice, this involves a bunch of annoying bookkeeping. &lt;code&gt;ulam&lt;/code&gt; has a macro named &lt;code&gt;merge_missing&lt;/code&gt; to simplify this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;UCBadmit$x &amp;lt;- rnorm(12)&#xA;UCBadmit$x[1:2] &amp;lt;- NA&#xA;m_miss &amp;lt;- ulam(&#xA;    alist(&#xA;        admit ~ binomial(applications,p),&#xA;        logit(p) &amp;lt;- a + b*male + bx*x_merge,&#xA;        x_merge ~ normal( 0 , 1 ),&#xA;        x_merge &amp;lt;- merge_missing( x , x_impute ),&#xA;        a ~ normal(0,4),&#xA;        b ~ normal(0,1),&#xA;        bx ~ normal(0,1)&#xA;    ),&#xA;    data=UCBadmit )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What &lt;code&gt;merge_missing&lt;/code&gt; does is find the &lt;code&gt;NA&lt;/code&gt; values in &lt;code&gt;x&lt;/code&gt; (whichever symbol is the first argument), build a vector of parameters called &lt;code&gt;x_impute&lt;/code&gt; (whatever you name the second argument) of the right length, and piece together a vector &lt;code&gt;x_merge&lt;/code&gt; that contains both, in the right places. You can then assign a prior to this vector and use it in linear models as usual.&lt;/p&gt; &#xA;&lt;p&gt;The merging is done as the Stan model runs, using a custom function block. See the Stan code &lt;code&gt;stancode(m_miss)&lt;/code&gt; for all the lovely details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;merge missing&lt;/code&gt; is an example of a macro, which is a way for &lt;code&gt;ulam&lt;/code&gt; to use function names to trigger special compilation. In this case, &lt;code&gt;merge_missing&lt;/code&gt; both inserts a function in the Stan model and builds the necessary index to locate the missing values during run time. Macros will get full documentation later, once the system is finalized.&lt;/p&gt; &#xA;&lt;h2&gt;Gaussian processes&lt;/h2&gt; &#xA;&lt;p&gt;A simple Gaussian process, like the Oceanic islands example in Chapter 13 of the book, is done as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data(Kline2)&#xA;d &amp;lt;- Kline2&#xA;data(islandsDistMatrix)&#xA;d$society &amp;lt;- 1:10&#xA;dat &amp;lt;- list(&#xA;    y=d$total_tools,&#xA;    society=d$society,&#xA;    log_pop = log(d$population),&#xA;    Dmat=islandsDistMatrix&#xA;)&#xA;&#xA;m_GP1 &amp;lt;- ulam(&#xA;    alist(&#xA;        y ~ poisson( mu ),&#xA;        log(mu) &amp;lt;- a + aj[society] + b*log_pop,&#xA;        a ~ normal(0,10),&#xA;        b ~ normal(0,1),&#xA;        vector[10]: aj ~ multi_normal( 0 , SIGMA ),&#xA;        matrix[10,10]: SIGMA &amp;lt;- cov_GPL2( Dmat , etasq , rhosq , 0.01 ),&#xA;        etasq ~ exponential(1),&#xA;        rhosq ~ exponential(1)&#xA;    ),&#xA;    data=dat )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is just an ordinary varying intercepts model, but all 10 intercepts are drawn from a single Gaussian distribution. The covariance matrix &lt;code&gt;SIGMA&lt;/code&gt; is defined in the usual L2-norm. Again, &lt;code&gt;cov_GPL2&lt;/code&gt; is a macro that inserts a function in the Stan code to compute the covariance matrix as the model runs.&lt;/p&gt; &#xA;&lt;p&gt;Fancier Gaussian processes require a different parameterization. And these can be built as well. Here&#39;s an example using 151 primate species and a phylogenetic distance matrix. First, prepare the data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data(Primates301)&#xA;data(Primates301_distance_matrix)&#xA;d &amp;lt;- Primates301&#xA;d$name &amp;lt;- as.character(d$name)&#xA;dstan &amp;lt;- d[ complete.cases( d$social_learning, d$research_effort , d$body , d$brain ) , ]&#xA;# prune distance matrix to spp in dstan&#xA;spp_obs &amp;lt;- dstan$name&#xA;y &amp;lt;- Primates301_distance_matrix&#xA;y2 &amp;lt;- y[ spp_obs , spp_obs ]&#xA;# scale distances&#xA;y3 &amp;lt;- y2/max(y2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the model, which is a non-centered L2-norm Gaussian process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m_GP2 &amp;lt;- ulam(&#xA;    alist(&#xA;        social_learning ~ poisson( lambda ),&#xA;        log(lambda) &amp;lt;- a + g[spp_id] + b_ef*log_research_effort + b_body*log_body + b_eq*log_brain,&#xA;        a ~ normal(0,1),&#xA;        vector[N_spp]: g &amp;lt;&amp;lt;- L_SIGMA * eta,&#xA;        vector[N_spp]: eta ~ normal( 0 , 1 ),&#xA;        matrix[N_spp,N_spp]: L_SIGMA &amp;lt;&amp;lt;- cholesky_decompose( SIGMA ),&#xA;        matrix[N_spp,N_spp]: SIGMA &amp;lt;- cov_GPL2( Dmat , etasq , rhosq , 0.01 ),&#xA;        b_body ~ normal(0,1),&#xA;        b_eq ~ normal(0,1),&#xA;        b_ef ~ normal(1,1),&#xA;        etasq ~ exponential(1),&#xA;        rhosq ~ exponential(1)&#xA;    ),&#xA;    data=list(&#xA;        N_spp = nrow(dstan),&#xA;        social_learning = dstan$social_learning,&#xA;        spp_id = 1:nrow(dstan),&#xA;        log_research_effort = log(dstan$research_effort),&#xA;        log_body = log(dstan$body),&#xA;        log_brain = log(dstan$brain),&#xA;        Dmat = y3&#xA;    ) , &#xA;    control=list(max_treedepth=15,adapt_delta=0.95) ,&#xA;    sample=FALSE )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This model does not sample quickly, so I&#39;ve set &lt;code&gt;sample=FALSE&lt;/code&gt;. You can still inspect the Stan code with &lt;code&gt;stancode(m_GP2)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the covariance &lt;code&gt;SIGMA&lt;/code&gt; is built the same way as before, but then we immediately decompose it to a Cholesky factor and build the varying intercepts &lt;code&gt;g&lt;/code&gt; by matrix multiplication. The &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; operator tells &lt;code&gt;ulam&lt;/code&gt; not to loop, but to do a direct assignment. So &lt;code&gt;g &amp;lt;&amp;lt;- L_SIGMA * eta&lt;/code&gt; does the right linear algebra.&lt;/p&gt; &#xA;&lt;h2&gt;Within-chain multithreading&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;cmdstanr&lt;/code&gt; instead of &lt;code&gt;rstan&lt;/code&gt; is currently the only way to use within-chain multithreading with &lt;code&gt;rethinking&lt;/code&gt;. It also tends to compile models faster and is more intelligent about when models need to be re-compiled, so using &lt;code&gt;cmdstanr&lt;/code&gt; is recommended, even if you don&#39;t want multithreading.&lt;/p&gt; &#xA;&lt;p&gt;If you want &lt;code&gt;ulam&lt;/code&gt; to access Stan using the &lt;code&gt;cmdstanr&lt;/code&gt; package, then you may install that as well with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;devtools::install_github(&#34;stan-dev/cmdstanr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you haven&#39;t installed cmdstan previously, you will also need to do that with &lt;code&gt;install_cmdstan()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then you need to add &lt;code&gt;cmdstan=TRUE&lt;/code&gt; to the &lt;code&gt;ulam&lt;/code&gt; code. The &lt;code&gt;threads&lt;/code&gt; argument controls the number of threads per chain. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N &amp;lt;- 1e4&#xA;x &amp;lt;- rnorm(N)&#xA;m &amp;lt;- 1 + rpois(N,2)&#xA;y &amp;lt;- rbinom( N , size=m , prob=inv_logit(-3+x) )&#xA;dat &amp;lt;- list( y=y , x=x , m=m )&#xA;# two threads&#xA;m1 &amp;lt;- ulam(&#xA;    alist(&#xA;        y ~ binomial_logit( m , logit_p ),&#xA;        logit_p &amp;lt;- a + b*x,&#xA;        a ~ normal(0,1.5),&#xA;        b ~ normal(0,0.5)&#xA;    ) , data=dat , &#xA;    cmdstan=TRUE , threads=2 , refresh=1000 )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are models that cannot be automaticaly multithreaded this way, because of the complexity of the code. In those cases, you can write the code directly in Stan. See &lt;a href=&#34;https://mc-stan.org/users/documentation/case-studies/reduce_sum_tutorial.html&#34;&gt;this guide&lt;/a&gt;. Writing multithreaded models direct in Stan can also be more efficient, since you can make detailed choices about which variables to pass and which pieces of the model to multithread.&lt;/p&gt; &#xA;&lt;h2&gt;Work in progress&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ulam&lt;/code&gt; is still in development, but mostly feature complete. It will remain primarily a teaching tool, exposing the statistical details of the model while hiding some of the programming details necessary in Stan.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;map2stan&lt;/code&gt; syntax and features&lt;/h1&gt; &#xA;&lt;p&gt;The older &lt;code&gt;map2stan&lt;/code&gt; function makes stronger assumtions about the formulas it will see. This allows is to provide some additional automation and it has some special syntax as a result. &lt;code&gt;ulam&lt;/code&gt; in contrast supports such features through its macros library.&lt;/p&gt; &#xA;&lt;h2&gt;Non-centered parameterization&lt;/h2&gt; &#xA;&lt;p&gt;Here is a non-centered parameterization that moves the scale parameters in the varying effects prior to the linear model, which is often more efficient for sampling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;f4u &amp;lt;- alist(&#xA;    y ~ dnorm( mu , sigma ),&#xA;    mu &amp;lt;- a + zaj[group]*sigma_group[1] + &#xA;         (b + zbj[group]*sigma_group[2])*x,&#xA;    c(zaj,zbj)[group] ~ dmvnorm( 0 , Rho_group ),&#xA;    a ~ dnorm( 0 , 10 ),&#xA;    b ~ dnorm( 0 , 1 ),&#xA;    sigma ~ dcauchy( 0 , 1 ),&#xA;    sigma_group ~ dcauchy( 0 , 1 ),&#xA;    Rho_group ~ dlkjcorr(2)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chapter 13 of the book provides a lot more detail on this issue.&lt;/p&gt; &#xA;&lt;p&gt;We can take this strategy one step further and remove the correlation matrix, &lt;code&gt;Rho_group&lt;/code&gt;, from the prior as well. &lt;code&gt;map2stan&lt;/code&gt; facilitates this form via the &lt;code&gt;dmvnormNC&lt;/code&gt; density, which uses an internal Cholesky decomposition of the correlation matrix to build the varying effects. Here is the previous varying slopes model, now with the non-centered notation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;f4nc &amp;lt;- alist(&#xA;    y ~ dnorm( mu , sigma ),&#xA;    mu &amp;lt;- a + aj[group] + (b + bj[group])*x,&#xA;    c(aj,bj)[group] ~ dmvnormNC( sigma_group , Rho_group ),&#xA;    a ~ dnorm( 0 , 10 ),&#xA;    b ~ dnorm( 0 , 1 ),&#xA;    sigma ~ dcauchy( 0 , 1 ),&#xA;    sigma_group ~ dcauchy( 0 , 1 ),&#xA;    Rho_group ~ dlkjcorr(2)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Internally, a Cholesky factor &lt;code&gt;L_Rho_group&lt;/code&gt; is used to perform sampling. It will appear in the returned samples, in addition to &lt;code&gt;Rho_group&lt;/code&gt;, which is constructed from it.&lt;/p&gt; &#xA;&lt;h2&gt;Semi-automated Bayesian imputation&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to code simple Bayesian imputations. For example, let&#39;s simulate a simple regression with missing predictor values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N &amp;lt;- 100&#xA;N_miss &amp;lt;- 10&#xA;x &amp;lt;- rnorm( N )&#xA;y &amp;lt;- rnorm( N , 2*x , 1 )&#xA;x[ sample(1:N,size=N_miss) ] &amp;lt;- NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That removes 10 &lt;code&gt;x&lt;/code&gt; values. Then the &lt;code&gt;map2stan&lt;/code&gt; formula list just defines a distribution for &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;f5 &amp;lt;- alist(&#xA;    y ~ dnorm( mu , sigma ),&#xA;    mu &amp;lt;- a + b*x,&#xA;    x ~ dnorm( mu_x, sigma_x ),&#xA;    a ~ dnorm( 0 , 100 ),&#xA;    b ~ dnorm( 0  , 10 ),&#xA;    mu_x ~ dnorm( 0 , 100 ),&#xA;    sigma_x ~ dcauchy(0,2),&#xA;    sigma ~ dcauchy(0,2)&#xA;)&#xA;m5 &amp;lt;- map2stan( f5 , data=list(y=y,x=x) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What &lt;code&gt;map2stan&lt;/code&gt; does is notice the missing values, see the distribution assigned to the variable with the missing values, build the Stan code that uses a mix of observed and estimated &lt;code&gt;x&lt;/code&gt; values in the regression. See the &lt;code&gt;stancode(m5)&lt;/code&gt; for details of the implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Semi-automated marginalization for binary discrete missing values&lt;/h2&gt; &#xA;&lt;p&gt;Binary (0/1) variables with missing values present a special obstacle, because Stan cannot sample discrete parameters. So instead of imputing binary missing values, &lt;code&gt;map2stan&lt;/code&gt; can average (marginalize) over them. As in the above case, when &lt;code&gt;map2stan&lt;/code&gt; detects missing values in a predictor variable, it will try to find a distribution for the variable containing them. If this variable is binary (0/1), then it will construct a mixture model in which each term is the log-likelihood conditional on the variables taking a particular combination of 0/1 values.&lt;/p&gt; &#xA;&lt;p&gt;Following the example in the previous section, we can simulate missingness in a binary predictor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N &amp;lt;- 100&#xA;N_miss &amp;lt;- 10&#xA;x &amp;lt;- rbinom( N , size=1 , prob=0.5 )&#xA;y &amp;lt;- rnorm( N , 2*x , 1 )&#xA;x[ sample(1:N,size=N_miss) ] &amp;lt;- NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The model definition is analogous to the previous, but also requires some care in specifying constraints for the hyperparameters that define the distribution for &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;f6 &amp;lt;- alist(&#xA;    y ~ dnorm( mu , sigma ),&#xA;    mu &amp;lt;- a + b*x,&#xA;    x ~ bernoulli( phi ),&#xA;    a ~ dnorm( 0 , 100 ),&#xA;    b ~ dnorm( 0  , 10 ),&#xA;    phi ~ beta( 1 , 1 ),&#xA;    sigma ~ dcauchy(0,2)&#xA;)&#xA;m6 &amp;lt;- map2stan( f6 , data=list(y=y,x=x) , constraints=list(phi=&#34;lower=0,upper=1&#34;) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The algorithm works, in theory, for any number of binary predictors with missing values. For example, with two predictors, each with missingness:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;N &amp;lt;- 100&#xA;N_miss &amp;lt;- 10&#xA;x1 &amp;lt;- rbinom( N , size=1 , prob=0.5 )&#xA;x2 &amp;lt;- rbinom( N , size=1 , prob=0.1 )&#xA;y &amp;lt;- rnorm( N , 2*x1 - x2  , 1 )&#xA;x1[ sample(1:N,size=N_miss) ] &amp;lt;- NA&#xA;x2[ sample(1:N,size=N_miss) ] &amp;lt;- NA&#xA;f7 &amp;lt;- alist(&#xA;    y ~ dnorm( mu , sigma ),&#xA;    mu &amp;lt;- a + b1*x1 + b2*x2,&#xA;    x1 ~ bernoulli( phi1 ),&#xA;    x2 ~ bernoulli( phi2 ),&#xA;    a ~ dnorm( 0 , 100 ),&#xA;    c(b1,b2) ~ dnorm( 0  , 10 ),&#xA;    phi1 ~ beta( 1 , 1 ),&#xA;    phi2 ~ beta( 1 , 1 ),&#xA;    sigma ~ dcauchy(0,2)&#xA;)&#xA;m7 &amp;lt;- map2stan( f7 , data=list(y=y,x1=x1,x2=x2) , &#xA;      constraints=list(phi1=&#34;lower=0,upper=1&#34;,phi2=&#34;lower=0,upper=1&#34;) )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While the unobserved values for the binary predictors are usually not of interest, they can be computed from the posterior distribution. Adding the argument &lt;code&gt;do_discrete_imputation=TRUE&lt;/code&gt; instructs &lt;code&gt;map2stan&lt;/code&gt; to perform these calculations automatically. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;m6 &amp;lt;- map2stan( f6 , data=list(y=y,x=x) , constraints=list(phi=&#34;lower=0,upper=1&#34;) ,&#xA;      do_discrete_imputation=TRUE )&#xA;precis( m6 , depth=2 )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output contains samples for each case with imputed probilities that &lt;code&gt;x&lt;/code&gt; takes the value 1.&lt;/p&gt; &#xA;&lt;p&gt;The algorithm works by constructing a list of mixture terms that are needed to to compute the probability of each observed &lt;code&gt;y&lt;/code&gt; value. In the simplest case, with only one predictor with missing values, the implied mixture likelihood contains two terms:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Pr(y[i]) = Pr(x[i]=1)Pr(y[i]|x[i]=1) + Pr(x[i]=0)Pr(y[i]|x[i]=0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the parameters of our example model &lt;code&gt;m6&lt;/code&gt; above, this is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Pr(y[i]) = phi*N(y[i]|a+b,sigma) + (1-phi)*N(y[i]|a,sigma)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is now a simple matter to loop over cases &lt;code&gt;i&lt;/code&gt; and compute the above for each. Similarly the posterior probability of that &lt;code&gt;x[i]==1&lt;/code&gt; is given as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Pr(x[i]==1|y[i]) = phi*N(y[i]|a+b,sigma) / Pr(y[i])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When only one predictor has missingness, then this is simple. What about when there are two or more? In that case, all the possible combinations of missingness have to be accounted for. For example, suppose there are two predictors, &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;, both with missingness on case &lt;code&gt;i&lt;/code&gt;. Now the implied mixture likelihood is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Pr(y[i]) = Pr(x1=1)Pr(x2=1)*Pr(y[i]|x1=1,x2=1) + Pr(x1=1)Pr(x2=0)Pr(y[i]|x1=1,x2=0) + Pr(x1=0)Pr(x2=1)Pr(y[i]|x1=0,x2=1) + Pr(x1=0)Pr(x2=0)Pr(y[i]|x1=0,x2=0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are four combinations of unobserved values, and so four terms in the mixture likelihood. When &lt;code&gt;x2&lt;/code&gt; is instead observed, we can substitute the observed value into the above, and then the mixture simplifies readily to our previous two-term likelihood:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Pr(y[i]|x2[i]==1) = Pr(x1=1)Pr(x2=1)Pr(y[i]|x1=1,x2=1) + Pr(x1=1)Pr(x2=0)Pr(y[i]|x1=1,x2=1) + Pr(x1=0)Pr(x2=1)Pr(y[i]|x1=0,x2=1) + Pr(x1=0)Pr(x2=0)Pr(y[i]|x1=0,x2=1)&#xA;                  = [Pr(x1=1)Pr(x2=1)+Pr(x1=1)Pr(x2=0)]Pr(y[i]|x1=1,x2=1) &#xA;                    + [Pr(x1=0)Pr(x2=1)+Pr(x1=0)Pr(x2=0)]Pr(y[i]|x1=0,x2=1)&#xA;                  = Pr(x1=1)Pr(y[i]|x1=1,x2=1) + Pr(x1=0)Pr(y[i]|x1=0,x2=1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This implies that if we loop over cases &lt;code&gt;i&lt;/code&gt; and insert any observed values into the general mixture likelihood, we can compute the relevant mixture for the specific combination of missingness on each case &lt;code&gt;i&lt;/code&gt;. That is what &lt;code&gt;map2stan&lt;/code&gt; does. The general mixture terms can be generated algorithmically. The code below generates a matrix of terms for &lt;code&gt;n&lt;/code&gt; binary variables with missingness.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ncombinations &amp;lt;- 2^n&#xA;d &amp;lt;- matrix(NA,nrow=ncombinations,ncol=n)&#xA;for ( col_var in 1:n ) &#xA;    d[,col_var] &amp;lt;- rep( 0:1 , each=2^(col_var-1) , length.out=ncombinations )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rows of &lt;code&gt;d&lt;/code&gt; contain terms, columns contain variables, and the values in each column are the corresponding values of each variable. The algorithm builds a linear model for each row in this matrix, composes the mixture likelihood as the sum of these rows, and performs proper substitutions of observed values. All calculations are done on the log scale, for precision.&lt;/p&gt; &#xA;&lt;h2&gt;Gaussian process&lt;/h2&gt; &#xA;&lt;p&gt;A basic Gaussian process can be specified with the &lt;code&gt;GPL2&lt;/code&gt; distribution label. This implies a multivariate Gaussian with a covariance matrix defined by the ordinary L2 norm distance function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;k(i,j) = eta^2 * exp( -rho^2 * D(i,j)^2 ) + ifelse(i==j,sigma^2,0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;D&lt;/code&gt; is a matrix of pairwise distances. To use this convention in, for example, a spatial autocorrelation model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(rethinking)&#xA;data(Kline2)&#xA;d &amp;lt;- Kline2&#xA;data(islandsDistMatrix)&#xA;d$society &amp;lt;- 1:10&#xA;mGP &amp;lt;- map2stan(&#xA;    alist(&#xA;        total_tools ~ dpois( mu ),&#xA;        log(mu) &amp;lt;- a + aj[society],&#xA;        a ~ dnorm(0,10),&#xA;        aj[society] ~ GPL2( Dmat , etasq , rhosq , 0.01 ),&#xA;        etasq ~ dcauchy(0,1),&#xA;        rhosq ~ dcauchy(0,1)&#xA;    ),&#xA;    data=list(&#xA;        total_tools=d$total_tools,&#xA;        society=d$society,&#xA;        Dmat=islandsDistMatrix),&#xA;    constraints=list(&#xA;        etasq=&#34;lower=0&#34;,&#xA;        rhosq=&#34;lower=0&#34;&#xA;    ),&#xA;    warmup=1000 , iter=5000 , chains=4 )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the use of the &lt;code&gt;constraints&lt;/code&gt; list to pass custom parameter constraints to Stan. This example is explored in more detail in the book.&lt;/p&gt; &#xA;&lt;h2&gt;Information criteria&lt;/h2&gt; &#xA;&lt;p&gt;Both &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;map2stan&lt;/code&gt; provide DIC and WAIC. Well, in most cases they do. In truth, both tools are flexible enough that you can specify models for which neither DIC nor WAIC can be correctly calculated. But for ordinary GLMs and GLMMs, it works. See the R help &lt;code&gt;?WAIC&lt;/code&gt;. A convenience function &lt;code&gt;compare&lt;/code&gt; summarizes information criteria comparisons, including standard errors for WAIC.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ulam&lt;/code&gt; supports WAIC calculation with the optional &lt;code&gt;log_lik=TRUE&lt;/code&gt; argument, which returns the kind of log-likelihood vector needed by the &lt;code&gt;loo&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ensemble&lt;/code&gt; computes &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;sim&lt;/code&gt; output for an ensemble of models, each weighted by its Akaike weight, as computed from WAIC.&lt;/p&gt; &#xA;&lt;h1&gt;Code issues with 1st edition of Statistical Rethinking&lt;/h1&gt; &#xA;&lt;p&gt;A small change to &lt;code&gt;link&lt;/code&gt; has broken two examples in the first edition of the book, in Chapter 7.&lt;/p&gt; &#xA;&lt;h2&gt;R code 7.10&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;mu.Africa.mean &amp;lt;- apply( mu.Africa , 2 , mean ) Error in apply(mu.Africa, 2, mean) : dim(X) must have a positive length&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This occurs because link() now returns all linear models. So mu.Africa is a list containing mu and gamma. To fix, use:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;mu.Africa.mean &amp;lt;- apply( mu.Africa$mu , 2 , mean )&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Use a similar fix in the other apply() calls in the same section.&lt;/p&gt; &#xA;&lt;h2&gt;R code 7.17&lt;/h2&gt; &#xA;&lt;p&gt;Similar problem as for R code 7.10. Use mu.ruggedlo$mu in place of mu.ruggedlo.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>m-clark/mixed-models-with-R</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/m-clark/mixed-models-with-R</id>
    <link href="https://github.com/m-clark/mixed-models-with-R" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Covers the basics of mixed models, mostly using @lme4&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mixed-models-with-R&lt;/h1&gt; &#xA;&lt;p&gt;This document provides an introduction to mixed models. It uses &lt;span class=&#34;pack&#34;&gt;lme4&lt;/span&gt; as the primary tool, but demonstrates others. Topics include random intercept and slope models, discussion of crossed vs. nested random effects, some common extensions (e.g. generalized linear mixed models), Bayesian tools, and other models that deal with dependency in the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://m-clark.github.io/mixed-models-with-R/&#34;&gt;Link to doc&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Raymo111/Raymo111</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/Raymo111/Raymo111</id>
    <link href="https://github.com/Raymo111/Raymo111" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My awesome profile README&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raymond.li/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/intro.gif&#34; alt=&#34;👋 Hi there! I&#39;m (Raymo(111|nd Li)|https://raymond.li)&#34; title=&#34;👋 Hi there! I&#39;m (Raymo(111|nd Li)|https://raymond.li)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://visitor-badge-reloaded.herokuapp.com/badge?page_id=Raymo111.Raymo111&amp;amp;color=00cf00&#34; alt=&#34;visitors&#34;&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;**Raymo111/Raymo111** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile.&#xA;&#xA;Here are some ideas to get you started:&#xA;&#xA;- 🔭 I’m currently working on ...&#xA;- 🌱 I’m currently learning ...&#xA;- 👯 I’m looking to collaborate on ...&#xA;- 🤔 I’m looking for help with ...&#xA;- 💬 Ask me about ...&#xA;- 📫 How to reach me: ...&#xA;- 😄 Pronouns: ...&#xA;- ⚡ Fun fact: ...&#xA;--&gt; &#xA;&lt;!--&#xA;&lt;table&gt;&#xA;&#x9;&lt;tr&gt;&#xA;&#x9;&lt;/tr&gt;&#xA;&#x9;&lt;tr&gt;&#xA;&#x9;&#x9;&lt;th&gt;&#xA;&#x9;&#x9;&#x9;&lt;h2&gt;&lt;code&gt;𝚂𝚙𝚎𝚌𝚒𝚊𝚕&lt;/code&gt;: 𝙸&#39;𝚖 𝚙𝚊𝚛𝚝𝚒𝚌𝚒𝚙𝚊𝚝𝚒𝚗𝚐 𝚒𝚗 𝙷𝚊𝚌𝚔𝚝𝚘𝚋𝚎𝚛𝚏𝚎𝚜𝚝!&lt;/h2&gt;&#xA;&#x9;&#x9;&#x9;𝙰𝚗𝚢𝚘𝚗𝚎 𝚠𝚑𝚘 𝚠𝚊𝚗𝚝𝚜 𝚝𝚘 𝚒𝚜 𝚠𝚎𝚕𝚌𝚘𝚖𝚎 𝚝𝚘 𝚙𝚊𝚛𝚝𝚒𝚌𝚒𝚙𝚊𝚝𝚎! 𝙹𝚞𝚜𝚝 𝚜𝚒𝚐𝚗 𝚞𝚙 𝚊𝚝 &lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚑𝚊𝚌𝚔𝚝𝚘𝚋𝚎𝚛𝚏𝚎𝚜𝚝.𝚍𝚒𝚐𝚒𝚝𝚊𝚕𝚘𝚌𝚎𝚊𝚗.𝚌𝚘𝚖/&lt;/a&gt;.&#xA;&#x9;&#x9;&#x9;&#x9;&lt;br&gt;𝙱𝚊𝚜𝚒𝚌𝚊𝚕𝚕𝚢, 𝚖𝚊𝚔𝚎 𝟺 𝙿𝚁𝚜 𝚝𝚘 𝙶𝚒𝚝𝙷𝚞𝚋 𝚛𝚎𝚙𝚘𝚜 𝚊𝚗𝚍 𝚐𝚎𝚝 𝚝𝚑𝚎𝚖 𝚖𝚎𝚛𝚐𝚎𝚍 𝚘𝚛 𝚝𝚊𝚐𝚐𝚎𝚍 &lt;code&gt;hacktoberfest-accepted&lt;/code&gt; 𝚠𝚒𝚕𝚕 𝚐𝚎𝚝 𝚌𝚘𝚘𝚕&amp;nbsp𝚜𝚠𝚊𝚐!&#xA;&#x9;&#x9;&lt;/th&gt;&#xA;&#x9;&lt;/tr&gt;&#xA;&#x9;&lt;tr&gt;&#xA;&#x9;&#x9;&lt;td&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;b&gt;𝙻𝚒𝚜𝚝 𝚘𝚏 𝚖𝚢 𝚛𝚎𝚙𝚘𝚜 𝚙𝚊𝚛𝚝𝚒𝚌𝚒𝚙𝚊𝚝𝚒𝚗𝚐 𝚒𝚗 𝚝𝚑𝚒𝚜 𝚊𝚠𝚎𝚜𝚘𝚖𝚎 𝚎𝚟𝚎𝚗𝚝:&lt;b&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;ul&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/emoji&#34;&gt;𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚎𝚖𝚘𝚓𝚒&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/drracket-customization&#34;&gt;𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚍𝚛𝚛𝚊𝚌𝚔𝚎𝚝-𝚌𝚞𝚜𝚝𝚘𝚖𝚒𝚣𝚊𝚝𝚒𝚘𝚗&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/i3lock-color&#34;&gt;𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/ul&gt;&#xA;&#x9;&#x9;&lt;/td&gt;&#xA;&#x9;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;--&gt; &#xA;&lt;h2&gt;&lt;span&gt;📖&lt;/span&gt; 𝙰𝚋𝚘𝚞𝚝 𝙼𝚎&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🖥 𝙵𝚞𝚕𝚕-𝚜𝚝𝚊𝚌𝚔 𝚜𝚘𝚏𝚝𝚠𝚊𝚛𝚎 𝚍𝚎𝚟𝚎𝚕𝚘𝚙𝚎𝚛&lt;/li&gt; &#xA; &lt;li&gt;💼 𝙵𝚘𝚞𝚗𝚍𝚎𝚛 𝚘𝚏 &lt;a href=&#34;https://edgeprim.com&#34;&gt;&lt;img src=&#34;https://edgeprim.com/assets/images/EdgePrim.svg?sanitize=true&#34; height=&#34;30em&#34; align=&#34;center&#34; alt=&#34;EdgePrim&#34; title=&#34;EdgePrim&#34;&gt;&lt;/a&gt; 𝚊𝚗𝚍 &lt;a href=&#34;https://youthhax.com&#34;&gt;&lt;img src=&#34;https://youthhax.com/images/yh.png&#34; height=&#34;30em&#34; align=&#34;center&#34; alt=&#34;YouthHax&#34; title=&#34;YouthHax&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎓 𝚂𝚝𝚞𝚍𝚢𝚒𝚗𝚐 𝙷𝚘𝚗𝚘𝚞𝚛𝚜 𝙲𝚘𝚖𝚙𝚞𝚝𝚎𝚛 𝚂𝚌𝚒𝚎𝚗𝚌𝚎 𝚠𝚒𝚝𝚑 𝙲𝚘-𝚘𝚙 𝚊𝚝 𝚝𝚑𝚎 𝚄𝚗𝚒𝚟𝚎𝚛𝚜𝚒𝚝𝚢 𝚘𝚏 𝚆𝚊𝚝𝚎𝚛𝚕𝚘𝚘, 𝚌𝚕𝚊𝚜𝚜 𝚘𝚏 𝟸0𝟸𝟻&lt;/li&gt; &#xA; &lt;li&gt;🌐 𝚈𝚘𝚞 𝚌𝚊𝚗 𝚊𝚌𝚌𝚎𝚜𝚜 𝚊𝚕𝚕 𝚖𝚢 𝚘𝚙𝚎𝚗-𝚜𝚘𝚞𝚛𝚌𝚎 𝚙𝚛𝚘𝚓𝚎𝚌𝚝𝚜 𝚑𝚎𝚛𝚎 𝚘𝚗 𝙶𝚒𝚝𝙷𝚞𝚋 𝚘𝚛 𝚘𝚗 𝚝𝚑𝚎 &lt;a href=&#34;https://aur.archlinux.org/packages/?SeB=M&amp;amp;K=Raymo111&#34;&gt;𝙰𝚄𝚁&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝚋𝚝𝚠 𝙸 𝚞𝚜𝚎 𝙰𝚛𝚌𝚑 &lt;a href=&#34;https://archlinux.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/arch.svg?sanitize=true&#34; height=&#34;30em&#34; align=&#34;center&#34; alt=&#34;Arch Linux Logo&#34; title=&#34;Arch Linux Logo&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⬆ 𝚆𝚑𝚊𝚝 𝙸&#39;𝚖 𝚞𝚙 𝚝𝚘&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔨 𝙸&#39;𝚖 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝚕𝚢...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Developing the CS 136L course (and the PS5 Control Center!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- - 🔨 𝙸&#39;𝚖 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝚕𝚢 𝚍𝚘𝚒𝚗𝚐 𝚊𝚗 𝚒𝚗𝚝𝚎𝚛𝚗𝚜𝚑𝚒𝚙 𝚊𝚝 𝚂𝚘𝚗𝚢 𝙿𝚕𝚊𝚢𝚜𝚝𝚊𝚝𝚒𝚘𝚗! --&gt; &#xA;&lt;!-- - 🔨 𝙸’𝚖 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝚕𝚢 𝚠𝚘𝚛𝚔𝚒𝚗𝚐 𝚘𝚗 𝚊 𝚗𝚎𝚠 [**𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛**](https://github.com/Raymo111/i3lock-color) 𝚛𝚎𝚕𝚎𝚊𝚜𝚎 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎯 𝙸𝚗 𝚝𝚑𝚎 𝚗𝚎𝚊𝚛 𝚏𝚞𝚝𝚞𝚛𝚎, 𝙸 𝚙𝚕𝚊𝚗 𝚝𝚘... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;𝙰𝚍𝚍 𝚓𝚊𝚟𝚊𝚜𝚌𝚛𝚒𝚙𝚝 𝚌𝚘𝚙𝚢 𝚝𝚘 &lt;a href=&#34;https://github.com/Raymo111/emoji&#34;&gt;&lt;strong&gt;𝚎𝚖𝚘𝚓𝚒&lt;/strong&gt;&lt;/a&gt; 𝚊𝚗𝚍 𝚖𝚊𝚔𝚎 𝚒𝚝 𝚒𝚗𝚝𝚘 𝚊 𝙱𝚎𝚝𝚝𝚎𝚛𝙳𝚒𝚜𝚌𝚘𝚛𝚍 𝚙𝚕𝚞𝚐𝚒𝚗&lt;/li&gt; &#xA;   &lt;li&gt;𝙰𝚍𝚍 𝚖𝚢 𝚕𝚊𝚝𝚎𝚜𝚝 𝙸𝚗𝚜𝚝𝚊𝚐𝚛𝚊𝚖 𝚙𝚘𝚜𝚝𝚜 𝚊𝚗𝚍 𝚕𝚘𝚌𝚊𝚕 𝚠𝚎𝚊𝚝𝚑𝚎𝚛 𝚝𝚘 𝚝𝚑𝚒𝚜 𝚁𝙴𝙰𝙳𝙼𝙴&lt;/li&gt; &#xA;   &lt;li&gt;𝙼𝚊𝚔𝚎 &lt;a href=&#34;https://github.com/Raymo111/kahoot-answer-bot&#34;&gt;&lt;strong&gt;𝙺𝚊𝚑𝚘𝚘𝚝 𝙱𝚘𝚝&lt;/strong&gt;&lt;/a&gt; 𝚠𝚘𝚛𝚔 𝚠𝚒𝚝𝚑 𝚝𝚑𝚎 𝚗𝚎𝚠 𝙺𝚊𝚑𝚘𝚘𝚝 𝚁𝙴𝚂𝚃 𝚏𝚘𝚛𝚖𝚊𝚝 𝚏𝚘𝚛 𝙰𝚜𝚜𝚒𝚐𝚗𝚎𝚍 𝙺𝚊𝚑𝚘𝚘𝚝𝚜&lt;/li&gt; &#xA;   &lt;li&gt;𝙸𝚗𝚝𝚎𝚐𝚛𝚊𝚝𝚎 &lt;code&gt;youtube-dl.py&lt;/code&gt; 𝚒𝚗𝚝𝚘 &lt;a href=&#34;https://github.com/Raymo111/movie-dl&#34;&gt;&lt;strong&gt;𝚖𝚘𝚟𝚒𝚎-𝚍𝚕&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🤞 𝙾𝚗𝚎 𝚍𝚊𝚢 𝙸 𝚑𝚘𝚙𝚎 𝚝𝚘... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;𝙶𝚘 𝚜𝚔𝚢𝚍𝚒𝚟𝚒𝚗𝚐!&lt;/li&gt; &#xA;   &lt;li&gt;𝙲𝚘𝚗𝚝𝚛𝚒𝚋𝚞𝚝𝚎 𝚌𝚘𝚍𝚎 𝚝𝚘 𝚝𝚑𝚎 &lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;𝙻𝚒𝚗𝚞𝚡 𝚔𝚎𝚛𝚗𝚎𝚕&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;𝙰𝚍𝚍 𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛 𝚝𝚘 𝙳𝚎𝚋𝚒𝚊𝚗, 𝚄𝚋𝚞𝚗𝚝𝚞, 𝚊𝚗𝚍 𝚁𝚎𝚍 𝙷𝚊𝚝/𝙵𝚎𝚍𝚘𝚛𝚊&lt;/li&gt; &#xA;   &lt;li&gt;𝙸𝚗𝚜𝚝𝚊𝚕𝚕 𝙶𝚎𝚗𝚝𝚘𝚘 (𝚒𝚝 𝚒𝚜 𝚋𝚎𝚢𝚘𝚗𝚍 𝚖𝚢 𝚙𝚘𝚠𝚎𝚛 𝚗𝚘𝚠... 𝙸 𝚖𝚞𝚜𝚝 𝚝𝚛𝚊𝚒𝚗 𝚑𝚊𝚛𝚍...)&lt;/li&gt; &#xA;   &lt;li&gt;𝙶𝚎𝚝 𝚊 𝙵𝙰𝙰𝙽𝙶𝙼+ 𝚒𝚗𝚝𝚎𝚛𝚗𝚜𝚑𝚒𝚙 (𝚒𝚏 𝚢𝚘𝚞 𝚑𝚊𝚟𝚎 𝚝𝚑𝚒𝚜 𝚙𝚘𝚠𝚎𝚛 𝚝𝚘 𝚙𝚕𝚎𝚊𝚜𝚎 𝚑𝚒𝚛𝚎 𝚖𝚎)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🤔 𝙻𝚒𝚜𝚝 𝚘𝚏 𝚒𝚜𝚜𝚞𝚎𝚜 𝙸 𝚗𝚎𝚎𝚍 𝚑𝚎𝚕𝚙 𝚠𝚒𝚝𝚑: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/136&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛/𝚒𝚜𝚜𝚞𝚎𝚜/𝟷𝟹𝟼&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/159&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛/𝚒𝚜𝚜𝚞𝚎𝚜/𝟷𝟻𝟿&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔔 𝙼𝚢 𝙻𝚊𝚝𝚎𝚜𝚝 𝙶𝚒𝚝𝙷𝚞𝚋 𝙰𝚌𝚝𝚒𝚟𝚒𝚝𝚢&lt;/h2&gt; &#xA;&lt;!--START_SECTION:activity--&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🗣 Commented on &lt;a href=&#34;https://github.com/vdukhovni/postfix/issues/13&#34;&gt;#13&lt;/a&gt; in &lt;a href=&#34;https://github.com/vdukhovni/postfix&#34;&gt;vdukhovni/postfix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎉 Merged PR &lt;a href=&#34;https://github.com/Raymo111/cs135-drtools/pull/15&#34;&gt;#15&lt;/a&gt; in &lt;a href=&#34;https://github.com/Raymo111/cs135-drtools&#34;&gt;Raymo111/cs135-drtools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💪 Opened PR &lt;a href=&#34;https://github.com/microsoft/vscode/pull/149509&#34;&gt;#149509&lt;/a&gt; in &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;microsoft/vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;❗️ Opened issue &lt;a href=&#34;https://github.com/microsoft/vscode/issues/149508&#34;&gt;#149508&lt;/a&gt; in &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;microsoft/vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎉 Merged PR &lt;a href=&#34;https://github.com/Raymo111/match-3/pull/1&#34;&gt;#1&lt;/a&gt; in &lt;a href=&#34;https://github.com/Raymo111/match-3&#34;&gt;Raymo111/match-3&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!--END_SECTION:activity--&gt; &#xA;&lt;!--&#xA;## 🔔 𝙼𝚢 𝙻𝚊𝚝𝚎𝚜𝚝 𝚃𝚠𝚎𝚎𝚝&#xA;&lt;a href=&#34;https://twitter.com/Raym0111&#34; target=&#34;_blank&#34;&gt;&#xA;&#x9;&lt;img src=&#34;https://github.com/Raymo111/Raymo111/raw/master/tweet.png&#34; width=&#34;70%&#34; align=&#34;center&#34; alt=&#34;Click to view on Twitter&#34; title=&#34;My latest tweet, as an image&#34;/&gt;&#xA;&lt;/a&gt;&#xA;--&gt; &#xA;&lt;h2&gt;🔔 𝙼𝚢 𝙻𝚊𝚝𝚎𝚜𝚝 𝙶𝚒𝚝𝙷𝚞𝚋 𝙼𝚎𝚝𝚛𝚒𝚌𝚜&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://metrics.lecoq.io/Raymo111?template=classic&amp;amp;base.header=0&amp;amp;gists=1&amp;amp;lines=1&amp;amp;config.timezone=America%2FToronto&#34; alt=&#34;Metrics&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📫 𝙷𝚘𝚠 𝚝𝚘 𝚛𝚎𝚊𝚌𝚑 𝚖𝚎:&lt;/h2&gt; &#xA;&lt;p&gt;𝚈𝚘𝚞 𝚌𝚊𝚗 𝚛𝚎𝚊𝚌𝚑 𝚖𝚎 𝚊𝚝 𝚝𝚑𝚎 𝚎𝚖𝚊𝚒𝚕 𝚒𝚗 𝚖𝚢 𝚐𝚒𝚝𝚑𝚞𝚋 𝚙𝚛𝚘𝚏𝚒𝚕𝚎. 𝙵𝚘𝚕𝚕𝚘𝚠 𝚖𝚢 𝚜𝚘𝚌𝚒𝚊𝚕𝚜!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linkedin.com/in/Raymo111&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/linkedin.png&#34; height=&#34;40em&#34; align=&#34;center&#34; alt=&#34;Follow Raymo111 on LinkedIn&#34; title=&#34;Follow Raymo111 on LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Raym0111&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/twitter.svg?sanitize=true&#34; height=&#34;40em&#34; align=&#34;center&#34; alt=&#34;Follow Raym0111 on Twitter&#34; title=&#34;Follow Raymo111 on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://instagram.com/Raymo111&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/instagram.svg?sanitize=true&#34; height=&#34;40em&#34; align=&#34;center&#34; alt=&#34;Follow Raymo111 on Instagram&#34; title=&#34;Follow Raymo111 on Instagram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⚡ 𝙻𝚒𝚜𝚝 𝚘𝚏 𝚌𝚘𝚘𝚕 𝚝𝚑𝚒𝚗𝚐𝚜 𝚝𝚑𝚊𝚝 𝚠𝚎𝚗𝚝 𝚒𝚗𝚝𝚘 𝚝𝚑𝚒𝚜 𝚙𝚛𝚘𝚏𝚒𝚕𝚎 𝚁𝙴𝙰𝙳𝙼𝙴&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;𝚃𝚢𝚙𝚎𝙸𝚝, 𝚅𝚞𝚎 𝙿𝚊𝚛𝚝𝚒𝚌𝚕𝚎𝙹𝚜 𝚊𝚗𝚍 𝚅𝚞𝚎.𝚓𝚜 𝚏𝚘𝚛 𝚝𝚑𝚎 𝚝𝚢𝚙𝚒𝚗𝚐 𝚒𝚗𝚝𝚛𝚘: &lt;a href=&#34;https://codesandbox.io/s/readme-introgif-9fjo5&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚌𝚘𝚍𝚎𝚜𝚊𝚗𝚍𝚋𝚘𝚡.𝚒𝚘/𝚜/𝚛𝚎𝚊𝚍𝚖𝚎-𝚒𝚗𝚝𝚛𝚘𝚐𝚒𝚏-𝟿𝚏𝚓𝚘𝟻&lt;/a&gt; &#xA;  &lt;!-- Thanks to @matyo91&#39;s helpful comments in their profile README! --&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙿𝚛𝚘𝚏𝚒𝚕𝚎 𝚟𝚒𝚜𝚒𝚝 𝚌𝚘𝚞𝚗𝚝 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://github.com/Nathan13888/VisitorBadgeReloaded&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝙽𝚊𝚝𝚑𝚊𝚗𝟷𝟹𝟾𝟾𝟾/𝚅𝚒𝚜𝚒𝚝𝚘𝚛𝙱𝚊𝚍𝚐𝚎𝚁𝚎𝚕𝚘𝚊𝚍𝚎𝚍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙼𝚘𝚗𝚘𝚜𝚙𝚊𝚌𝚎𝚍 𝚝𝚎𝚡𝚝 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://yaytext.com/monospace/&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚢𝚊𝚢𝚝𝚎𝚡𝚝.𝚌𝚘𝚖/𝚖𝚘𝚗𝚘𝚜𝚙𝚊𝚌𝚎/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙶𝚒𝚝𝙷𝚞𝚋 𝚊𝚌𝚝𝚒𝚟𝚒𝚝𝚢 𝚊𝚌𝚝𝚒𝚘𝚗 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://github.com/jamesgeorge007/github-activity-readme&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚓𝚊𝚖𝚎𝚜𝚐𝚎𝚘𝚛𝚐𝚎00𝟽/𝚐𝚒𝚝𝚑𝚞𝚋-𝚊𝚌𝚝𝚒𝚟𝚒𝚝𝚢-𝚛𝚎𝚊𝚍𝚖𝚎&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙶𝚒𝚝𝙷𝚞𝚋 𝙼𝚎𝚝𝚛𝚒𝚌𝚜 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://github.com/lowlighter/metrics&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚕𝚘𝚠𝚕𝚒𝚐𝚑𝚝𝚎𝚛/𝚖𝚎𝚝𝚛𝚒𝚌𝚜&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;- 𝙻𝚊𝚝𝚎𝚜𝚝 𝚝𝚠𝚎𝚎𝚝 𝚊𝚌𝚝𝚒𝚘𝚗 𝚏𝚛𝚘𝚖 [𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚣𝚑𝚒𝚒𝚒𝚢𝚊𝚗𝚐/𝚣𝚑𝚒𝚒𝚒𝚢𝚊𝚗𝚐](https://github.com/zhiiiyang/zhiiiyang)&#xA;- 𝙻𝚊𝚝𝚎𝚜𝚝 𝙸𝚗𝚜𝚝𝚊𝚐𝚛𝚊𝚖 𝚙𝚘𝚜𝚝𝚜 𝚊𝚗𝚍 𝚠𝚎𝚊𝚝𝚑𝚎𝚛 𝚏𝚛𝚘𝚖 [𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚝𝚑𝚖𝚜𝚐𝚋𝚛𝚝/𝚝𝚑𝚖𝚜𝚐𝚋𝚛𝚝](https://github.com/thmsgbrt/thmsgbrt)&#xA;- 𝙰𝚕𝚕-𝚝𝚒𝚖𝚎 𝙶𝚒𝚝𝙷𝚞𝚋 𝚜𝚝𝚊𝚝𝚜 𝚏𝚛𝚘𝚖 [𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚖𝚊𝚛𝚔𝚎𝚝𝚙𝚕𝚊𝚌𝚎/𝚊𝚌𝚝𝚒𝚘𝚗𝚜/𝚙𝚛𝚘𝚏𝚒𝚕𝚎-𝚛𝚎𝚊𝚍𝚖𝚎-𝚜𝚝𝚊𝚝𝚜](https://github.com/marketplace/actions/profile-readme-stats)&#xA;--&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/keras</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/rstudio/keras</id>
    <link href="https://github.com/rstudio/keras" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R Interface to Keras&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R interface to Keras&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/keras.io/img/keras-logo-2018-large-1200.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/keras/actions?workflow=R-CMD-check&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/keras/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=keras&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/keras&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/keras-team/keras/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://keras.io/&#34;&gt;Keras&lt;/a&gt; is a high-level neural networks API developed with a focus on enabling fast experimentation. &lt;em&gt;Being able to go from idea to result with the least possible delay is key to doing good research.&lt;/em&gt; Keras has the following key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Allows the same code to run on CPU or on GPU, seamlessly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User-friendly API which makes it easy to quickly prototype deep learning models.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-in support for convolutional networks (for computer vision), recurrent networks (for sequence processing), and any combination of both.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports arbitrary network architectures: multi-input or multi-output models, layer sharing, model sharing, etc. This means that Keras is appropriate for building essentially any deep learning model, from a memory network to a neural Turing machine.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the package website at &lt;a href=&#34;https://tensorflow.rstudio.com&#34;&gt;https://tensorflow.rstudio.com&lt;/a&gt; for complete documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/blogdown</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/rstudio/blogdown</id>
    <link href="https://github.com/rstudio/blogdown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create Blogs and Websites with R Markdown&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;blogdown&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/blogdown/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=blogdown&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/blogdown&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/rstudio/blogdown?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rstudio/blogdown/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of the blogdown package is to provide a powerful and customizable website output format for &lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown&lt;/a&gt;. Use dynamic R Markdown documents to build webpages featuring:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;R code (or other programming languages that &lt;a href=&#34;https://yihui.org/knitr/&#34;&gt;knitr&lt;/a&gt; supports),&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;automatically rendered output such as graphics, tables, analysis results, and HTML widgets, and&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;technical writing elements such as citations, footnotes, and LaTeX math, enabled by the &lt;a href=&#34;https://pkgs.rstudio.com/bookdown/&#34;&gt;bookdown package&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, blogdown uses &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a popular open-source static website generator, which provides a fast and flexible way to build your site content to be shared online. Other website generators like Jekyll and Hexo are also supported.&lt;/p&gt; &#xA;&lt;p&gt;A useful feature of blogdown sites, compared to other R Markdown-based &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html&#34;&gt;websites&lt;/a&gt;, is that you may organize your website content (including R Markdown files) within subdirectories. This makes blogdown a good solution not just for blogging or sites about R — it can also be used to create general-purpose websites to communicate about data science, statistics, data visualization, programming, or education.&lt;/p&gt; &#xA;&lt;h2&gt;Book&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;&lt;img class=&#34;book&#34; src=&#34;https://bookdown.org/yihui/blogdown/images/cover.png&#34; alt=&#34;blogdown: Creating Websites with R Markdown&#34; height=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package via CRAN as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#39;blogdown&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the development version of the &lt;strong&gt;blogdown&lt;/strong&gt; package, you can install the package from GitHub via the &lt;a href=&#34;https://remotes.r-lib.org&#34;&gt;&lt;strong&gt;remotes&lt;/strong&gt; package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#39;rstudio/blogdown&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You may create a new site via the function &lt;code&gt;blogdown::new_site()&lt;/code&gt; under an &lt;em&gt;empty&lt;/em&gt; directory. It will create a skeleton site, download a Hugo theme from Github, add some sample content, launch a web browser and you will see the new site. The sample blog post &lt;code&gt;hello-world.Rmd&lt;/code&gt; should be opened automatically, and you can edit it. The website will be automatically rebuilt and the page will be refreshed after you save the file.&lt;/p&gt; &#xA;&lt;p&gt;If you use RStudio, you can create a new RStudio project for your website from the menu &lt;code&gt;File -&amp;gt; New Project -&amp;gt; New Directory -&amp;gt; Website using blogdown&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The function &lt;code&gt;blogdown::serve_site()&lt;/code&gt; may be the most frequently used function in this package. It builds the website, loads it into your web browser, and automatically refreshes the browser when you update the Markdown or R Markdown files. Do not use the command line &lt;code&gt;hugo server&lt;/code&gt; to build or serve the site. It only understands plain Markdown files, and cannot build R Markdown.&lt;/p&gt; &#xA;&lt;p&gt;You may not be satisfied with the default site created from &lt;code&gt;new_site()&lt;/code&gt;. There are two things you may want to do after your first successful experiment with &lt;strong&gt;blogdown&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pick a Hugo theme that you like from &lt;a href=&#34;https://themes.gohugo.io&#34;&gt;https://themes.gohugo.io&lt;/a&gt;. All you need is its Github user and repository name, to be passed to the &lt;code&gt;theme&lt;/code&gt; argument of &lt;code&gt;new_site()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add more content (pages or posts), or migrate your existing website.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;There are two main places to get help:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://community.rstudio.com/tags/c/R-Markdown/10/blogdown&#34;&gt;RStudio community&lt;/a&gt; is a friendly place to ask any questions about &lt;strong&gt;blogdown&lt;/strong&gt;. Be sure to use the &lt;code&gt;blogdown&lt;/code&gt; tag.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/blogdown&#34;&gt;Stack Overflow&lt;/a&gt; is a great source of answers to common &lt;strong&gt;blogdown&lt;/strong&gt; questions. Use the tags &lt;a href=&#34;https://stackoverflow.com/questions/tagged/blogdown+r&#34;&gt;&lt;code&gt;[r][blogdown]&lt;/code&gt;&lt;/a&gt; if you ask a question.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the blogdown project is released with a &lt;a href=&#34;https://pkgs.rstudio.com/blogdown/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qinwf/awesome-R</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/qinwf/awesome-R</id>
    <link href="https://github.com/qinwf/awesome-R" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of awesome R packages, frameworks and software.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome R&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/awesome&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A curated list of awesome R packages and tools. Inspired by &lt;a href=&#34;https://github.com/josephmisiti/awesome-machine-learning&#34;&gt;awesome-machine-learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt; for &lt;a target=&#34;_blank&#34; href=&#34;https://github.com/rstudio/RStartHere/raw/master/top_downloads_2016/top_packages&#34;&gt;Top 50&lt;/a&gt; CRAN downloaded packages or repos with 400+ &lt;img class=&#34;emoji&#34; alt=&#34;star&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/star.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#awesome-&#34;&gt;Awesome R&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#2020&#34;&gt;2020&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#2019&#34;&gt;2019&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#2018&#34;&gt;2018&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#integrated-development-environments&#34;&gt;Integrated Development Environments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#data-manipulation&#34;&gt;Data Manipulation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#graphic-displays&#34;&gt;Graphic Displays&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#html-widgets&#34;&gt;Html Widgets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#reproducible-research&#34;&gt;Reproducible Research&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#web-technologies-and-services&#34;&gt;Web Technologies and Services&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#parallel-computing&#34;&gt;Parallel Computing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#high-performance&#34;&gt;High Performance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#language-api&#34;&gt;Language API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#database-management&#34;&gt;Database Management&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#machine-learning&#34;&gt;Machine Learning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#natural-language-processing&#34;&gt;Natural Language Processing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#bayesian&#34;&gt;Bayesian&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#optimization&#34;&gt;Optimization&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#finance&#34;&gt;Finance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#bioinformatics-and-biostatistics&#34;&gt;Bioinformatics and Biostatistics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#network-analysis&#34;&gt;Network Analysis&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#spatial&#34;&gt;Spatial&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#r-development&#34;&gt;R Development&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#data-packages&#34;&gt;Data Packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#other-tools&#34;&gt;Other Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#other-interpreters&#34;&gt;Other Interpreters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#learning-r&#34;&gt;Learning R&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#resources&#34;&gt;Resources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#websites&#34;&gt;Websites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#books&#34;&gt;Books&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#podcasts&#34;&gt;Podcasts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#reference-cards&#34;&gt;Reference Cards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#moocs&#34;&gt;MOOCs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#lists&#34;&gt;Lists&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#other-awesome-lists&#34;&gt;Other Awesome Lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2020&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt; - &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Ikuyadeu.r&#34;&gt;vscode-R&lt;/a&gt; + &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=REditorSupport.r-lsp&#34;&gt;vscode-r-lsp&lt;/a&gt; VSCode R Langauage Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/gt&#34;&gt;gt&lt;/a&gt; - Easily generate information-rich, publication-quality tables from R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/lightgbm/index.html&#34;&gt;lightgbm &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Light Gradient Boosting Machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/torch/index.html&#34;&gt;torch&lt;/a&gt; - Tensors and Neural Networks with &#39;GPU&#39; Acceleration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2019&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasp85/ggforce&#34;&gt;ggforce&lt;/a&gt; - ggplot2 extension framework &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/ggforce&#34; alt=&#34;ggforce&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tylermorganwall/rayshader&#34;&gt;rayshader&lt;/a&gt; - 2D and 3D data visualizations via rgl &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/rayshader&#34; alt=&#34;rayshader&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/vroom&#34;&gt;vroom&lt;/a&gt; - Fast reading of delimited files &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/vroom&#34; alt=&#34;vroom&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrated Development Environments&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Integrated Development Environment&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Ikuyadeu.r&#34;&gt;vscode-R&lt;/a&gt; + &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=REditorSupport.r-lsp&#34;&gt;vscode-r-lsp&lt;/a&gt; VSCode R Langauage Support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rstudio.org/&#34;&gt;RStudio &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - A powerful and productive user interface for R. Works great on Windows, Mac, and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ess.r-project.org/&#34;&gt;Emacs + ESS&lt;/a&gt; - Emacs Speaks Statistics is an add-on package for emacs text editors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/randy3k/R-Box/&#34;&gt;Sublime Text + R-Box&lt;/a&gt; - Add-on package for Sublime Text 2/3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/textmate/r.tmbundle&#34;&gt;TextMate + r.tmblundle&lt;/a&gt; - Add-on package for TextMate 1/2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.walware.de/goto/statet&#34;&gt;StatET&lt;/a&gt; - An Eclipse based IDE for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mran.microsoft.com/&#34;&gt;Microsoft R&lt;/a&gt; - Revolution R would be offered free to academic users and commercial software would focus on big data, large scale multiprocessor functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://socserv.mcmaster.ca/jfox/Misc/Rcmdr/&#34;&gt;R Commander&lt;/a&gt; - A package that provides a basic graphical user interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IRkernel/IRkernel&#34;&gt;IRkernel &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - R kernel for Jupyter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.deducer.org/pmwiki/pmwiki.php?n=Main.DeducerManual?from=Main.HomePage&#34;&gt;Deducer&lt;/a&gt; - A Menu driven data analysis GUI with a spreadsheet like data editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://radiant-rstats.github.io/docs&#34;&gt;Radiant&lt;/a&gt; - A platform-independent browser-based interface for business analytics in R, based on the Shiny.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vim-scripts/Vim-R-plugin&#34;&gt;Vim-R&lt;/a&gt; - Vim plugin for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jalvesaq/Nvim-R&#34;&gt;Nvim-R&lt;/a&gt; - Neovim plugin for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jamovi.org/&#34;&gt;Jamovi&lt;/a&gt; and &lt;a href=&#34;https://jasp-stats.org/&#34;&gt;JASP&lt;/a&gt; - Desktop software for both Bayesian and Frequentist methods, using a UI familiar to SPSS users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.bio7.org/&#34;&gt;Bio7&lt;/a&gt; - An IDE contains tools for model creation, scientific image analysis and statistical analysis for ecological modelling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://microsoft.github.io/RTVS-docs/&#34;&gt;RTVS&lt;/a&gt; - R Tools for Visual Studio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/randy3k/radian&#34;&gt;radian &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; (formerly rtichoke) - A modern R console with syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rkward.kde.org/&#34;&gt;RKWard&lt;/a&gt; - An extensible IDE/GUI for R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Syntax&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages change the way you use R.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smbache/magrittr&#34;&gt;magrittr &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Let&#39;s pipe it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/renkun-ken/pipeR&#34;&gt;pipeR&lt;/a&gt; - Multi-paradigm Pipeline Implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zatonovo/lambda.r&#34;&gt;lambda.r&lt;/a&gt; - Functional programming and simple pattern matching in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/purrr&#34;&gt;purrr&lt;/a&gt; - A FP package for R in the spirit of underscore.js.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Manipulation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for cooking data.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/dplyr&#34;&gt;dplyr &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Fast data frames manipulation and database query.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rdatatable/data.table&#34;&gt;data.table &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Fast data manipulation in a short and flexible syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/reshape&#34;&gt;reshape2 &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Flexible rearrange, reshape and aggregate data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/tidyr&#34;&gt;tidyr&lt;/a&gt; - Easily tidy data with spread and gather functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgrtwo/broom&#34;&gt;broom &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Convert statistical analysis objects into tidy data frames.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/renkun-ken/rlist&#34;&gt;rlist&lt;/a&gt; - A toolbox for non-tabular data manipulation with lists.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ff.r-forge.r-project.org/&#34;&gt;ff&lt;/a&gt; - Data structures designed to store large datasets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/lubridate&#34;&gt;lubridate&lt;/a&gt; - A set of functions to work with dates and times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gagolews/stringi&#34;&gt;stringi &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - ICU based string processing package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/stringr&#34;&gt;stringr &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Consistent API for string processing, built on top of stringi.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kaneplusplus/bigmemory&#34;&gt;bigmemory&lt;/a&gt; - Shared memory and memory-mapped matrices. The big* packages provide additional tools including linear models (&lt;a href=&#34;http://cran.r-project.org/web/packages/biglm/index.html&#34;&gt;biglm&lt;/a&gt;) and Random Forests (&lt;a href=&#34;https://github.com/aloysius-lim/bigrf&#34;&gt;bigrf&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgrtwo/fuzzyjoin&#34;&gt;fuzzyjoin&lt;/a&gt; - Join tables together on inexact matching.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/tidyverse&#34;&gt;tidyverse&lt;/a&gt; - Easily install and load packages from the tidyverse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tazinho/snakecase&#34;&gt;snakecase&lt;/a&gt; - Automatically parse and convert strings into cases like snake or camel among others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boxuancui/DataExplorer&#34;&gt;DataExplorer&lt;/a&gt; - Fast exploratory data analysis with minimum code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Formats&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for reading and writing data of different formats.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arrow.apache.org/docs/r/&#34;&gt;arrow &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - An interface to the Arrow C++ library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Fast, interoperable binary data frame storage for Python, R, and more powered by Apache Arrow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qinwf/awesome-R/master/www.fstpackage.org/fst/&#34;&gt;fst &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Lightning Fast Serialization of Data Frames for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/haven&#34;&gt;haven&lt;/a&gt; - Improved methods to import SPSS, Stata and SAS files in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeroenooms/jsonlite&#34;&gt;jsonlite&lt;/a&gt; - A robust and quick way to parse JSON files in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traversc/qs&#34;&gt;qs&lt;/a&gt; - Quick serialization of R objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://readxl.tidyverse.org/&#34;&gt;readxl &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Read excel files (.xls and .xlsx) into R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/readr&#34;&gt;readr &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - A fast and friendly way to read tabular data into R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leeper/rio&#34;&gt;rio&lt;/a&gt; - A Swiss-Army Knife for Data I/O.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chainsawriot/readODS/&#34;&gt;readODS&lt;/a&gt; - Read OpenDocument Spreadsheets into R as data.frames.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eddelbuettel/rcpptoml&#34;&gt;RcppTOML&lt;/a&gt; - Rcpp Bindings to C++ parser for TOML files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/vroom&#34;&gt;vroom&lt;/a&gt; - Fast reading of delimited files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/writexl/&#34;&gt;writexl&lt;/a&gt; - Portable, light-weight data frame to xlsx exporter for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/viking/r-yaml&#34;&gt;yaml&lt;/a&gt; - R package for converting objects to and from YAML.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Graphic Displays&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for showing data.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/ggplot2&#34;&gt;ggplot2 &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - An implementation of the Grammar of Graphics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sinhrks/ggfortify&#34;&gt;ggfortify&lt;/a&gt; - A unified interface to ggplot2 popular statistical packages using one line of code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/slowkow/ggrepel&#34;&gt;ggrepel&lt;/a&gt; - Repel overlapping text labels away from each other.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/ggalt&#34;&gt;ggalt&lt;/a&gt; - Extra Coordinate Systems, Geoms and Statistical Transformations for ggplot2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IndrajeetPatil/ggstatsplot&#34;&gt;ggstatsplot&lt;/a&gt; - ggplot2 Based Plots with Statistical Details&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuangchuangYu/ggtree&#34;&gt;ggtree&lt;/a&gt; - Visualization and annotation of phylogenetic tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ricardo-bion/ggtech&#34;&gt;ggtech&lt;/a&gt; - ggplot2 tech themes and scales&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ggplot2-exts.github.io/ggiraph.html&#34;&gt;ggplot2 Extensions&lt;/a&gt; - Showcases of ggplot2 extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepayan/lattice&#34;&gt;lattice&lt;/a&gt; - A powerful and elegant high-level data visualization system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/taiyun/corrplot&#34;&gt;corrplot&lt;/a&gt; - A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rgl/index.html&#34;&gt;rgl&lt;/a&gt; - 3D visualization device system for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/Cairo/index.html&#34;&gt;Cairo&lt;/a&gt; - R graphics device using cairo graphics library for creating high-quality display output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wch/extrafont&#34;&gt;extrafont&lt;/a&gt; - Tools for using fonts in R graphics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yixuan/showtext&#34;&gt;showtext&lt;/a&gt; - Enable R graphics device to show text using system fonts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihui/animation&#34;&gt;animation&lt;/a&gt; - A simple way to produce animated graphics in R, using &lt;a href=&#34;http://imagemagick.org/&#34;&gt;ImageMagick&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34;&gt;gganimate&lt;/a&gt; - Create easy animations with ggplot2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/misc3d/index.html&#34;&gt;misc3d&lt;/a&gt; - Powerful functions to deal with 3d plots, isosurfaces, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/xkcd/index.html&#34;&gt;xkcd&lt;/a&gt; - Use xkcd style in graphs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dahtah.github.io/imager/&#34;&gt;imager&lt;/a&gt; - An image processing package based on CImg library to work with images and display them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;hrbrthemes&lt;/a&gt; - 🔏 Opinionated, typographic-centric ggplot2 themes and theme components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/waffle&#34;&gt;waffle&lt;/a&gt; - 🍁 Make waffle (square pie) charts in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/talgalili/dendextend&#34;&gt;dendextend&lt;/a&gt; - visualizing, adjusting and comparing trees of hierarchical clustering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tsieger/idendro&#34;&gt;idendro&lt;/a&gt; - interactive exploration of dendrograms (trees of hierarchical clustering).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/r2d3/&#34;&gt;r2d3&lt;/a&gt; - R Interface to D3 Visualizations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasp85/patchwork&#34;&gt;Patchwork&lt;/a&gt; - Combine separate ggplots into the same graphic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rforscience.com/rpackages/visualisation/plot3d/&#34;&gt;plot3D&lt;/a&gt; - Plotting Multi-Dimensional Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/plot3Drgl/index.html&#34;&gt;plot3Drgl&lt;/a&gt; - Plotting Multi-Dimensional Data - Using &#39;rgl&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nx10/httpgd&#34;&gt;httpgd&lt;/a&gt; - Asynchronous http server graphics device for R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HTML Widgets&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for interactive visualizations.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/talgalili/heatmaply&#34;&gt;heatmaply&lt;/a&gt; - Interactive heatmaps with D3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/d3heatmap&#34;&gt;d3heatmap&lt;/a&gt; - Interactive heatmaps with D3 (no longer maintained).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rstudio.github.io/DT/&#34;&gt;DataTables&lt;/a&gt; - Displays R matrices or data frames as interactive HTML tables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rich-iannone/DiagrammeR&#34;&gt;DiagrammeR &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Create JS graph diagrams and flowcharts in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/dygraphs&#34;&gt;dygraphs&lt;/a&gt; - Charting time-series data in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/renkun-ken/formattable&#34;&gt;formattable &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Formattable Data Structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/ggvis&#34;&gt;ggvis &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Interactive grammar of graphics for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rstudio.github.io/leaflet/&#34;&gt;Leaflet&lt;/a&gt; - One of the most popular JavaScript libraries interactive maps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hrbrmstr.github.io/metricsgraphics/&#34;&gt;MetricsGraphics&lt;/a&gt; - Enables easy creation of D3 scatterplots, line charts, and histograms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://christophergandrud.github.io/networkD3/&#34;&gt;networkD3&lt;/a&gt; - D3 JavaScript Network Graphs from R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/juba/scatterD3&#34;&gt;scatterD3&lt;/a&gt; - Interactive scatterplots with D3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/plotly&#34;&gt;plotly &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Interactive ggplot2 and Shiny plotting with &lt;a href=&#34;https://plot.ly&#34;&gt;plot.ly&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ramnathv/rCharts&#34;&gt;rCharts &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Interactive JS Charts from R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hafen.github.io/rbokeh/&#34;&gt;rbokeh&lt;/a&gt; - R Interface to &lt;a href=&#34;http://bokeh.pydata.org/en/latest/&#34;&gt;Bokeh&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bwlewis/rthreejs&#34;&gt;threejs&lt;/a&gt; - Interactive 3D scatter plots and globes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daattali/timevis&#34;&gt;timevis&lt;/a&gt; - Create fully interactive timeline visualizations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datastorm-open/visNetwork&#34;&gt;visNetwork&lt;/a&gt; - Using vis.js library for network visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lchiffon/wordcloud2&#34;&gt;wordcloud2&lt;/a&gt; - R interface to wordcloud2.js.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbkunst/highcharter&#34;&gt;highcharter&lt;/a&gt; - R wrapper for highcharts based on htmlwidgets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohnCoene/echarts4r&#34;&gt;echarts4r&lt;/a&gt; - R wrapper to Echarts version 4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reproducible Research&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for literate programming and reproducible workflows.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihui/knitr&#34;&gt;knitr &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Easy dynamic report generation in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/noamross/redoc&#34;&gt;redoc&lt;/a&gt; - Reversible Reproducible Documents&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihui/tinytex&#34;&gt;tinytex&lt;/a&gt; - A lightweight and easy-to-maintain LaTeX distribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/xtable/index.html&#34;&gt;xtable&lt;/a&gt; - Export tables to LaTeX or HTML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rapport-package.info/#intro&#34;&gt;rapport&lt;/a&gt; - An R templating system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rmarkdown.rstudio.com/&#34;&gt;rmarkdown &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Dynamic documents for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ramnathv/slidify&#34;&gt;slidify &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Generate reproducible html5 slides from R markdown.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.statistik.lmu.de/~leisch/Sweave/&#34;&gt;Sweave&lt;/a&gt; - A package designed to write LaTeX reports using R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leifeld/texreg&#34;&gt;texreg&lt;/a&gt; - Formatting statistical models in LaTex and HTML.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RevolutionAnalytics/checkpoint&#34;&gt;checkpoint&lt;/a&gt; - Install packages from snapshots on the checkpoint server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/brew/index.html&#34;&gt;brew&lt;/a&gt; - Pre-compute data to enhance your report templates. Can be combined with knitr.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://davidgohel.github.io/officer/index.html&#34;&gt;officer&lt;/a&gt; - An R package to generate Microsoft Word, Microsoft PowerPoint and HTML reports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://davidgohel.github.io/flextable/index.html&#34;&gt;flextable&lt;/a&gt; - An R package to embed complex tables (merged cells, multi-level headers and footers, conditional formatting) in Microsoft Word, Microsoft PowerPoint and HTML reports. It cooperates with the [officer] package and integrates with [rmarkdown] reports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bookdown.org/&#34;&gt;bookdown&lt;/a&gt; - Authoring Books with R Markdown.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daattali/ezknitr&#34;&gt;ezknitr&lt;/a&gt; - Avoid the typical working directory pain when using &#39;knitr&#39;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/drake&#34;&gt;drake&lt;/a&gt; - An &lt;a href=&#34;https://ropensci.org/&#34;&gt;rOpenSci&lt;/a&gt; package for reproducible data science workflows too big for &lt;a href=&#34;http://yihui.name/knitr/&#34;&gt;knitr&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rsuite.io&#34;&gt;R Suite&lt;/a&gt; - A package to design flexible and reproducible deployment workflows for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html&#34;&gt;kable&lt;/a&gt; - Build fancy HTML or &#39;LaTeX&#39; tables using &#39;kable()&#39; from &#39;knitr&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web Technologies and Services&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages to surf the web.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/webservices&#34;&gt;Web Technologies List&lt;/a&gt; - Information about how to use R and the world wide web together.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/shiny&#34;&gt;shiny &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Easy interactive web applications with R. See also &lt;a href=&#34;https://github.com/grabear/awesome-rshiny&#34;&gt;awesome-rshiny&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daattali/shinyjs&#34;&gt;shinyjs&lt;/a&gt; - Easily improve the user interaction and user experience in your Shiny apps in seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RCurl/index.html&#34;&gt;RCurl&lt;/a&gt; - General network (HTTP/FTP/...) client interface for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeroen/curl&#34;&gt;curl&lt;/a&gt; - A Modern and Flexible Web Client for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/httr&#34;&gt;httr &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - User-friendly RCurl wrapper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/httpuv&#34;&gt;httpuv&lt;/a&gt; - HTTP and WebSocket server library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/XML/index.html&#34;&gt;XML &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Tools for parsing and generating XML within R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/xml2/index.html&#34;&gt;xml2 &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Optimized tools for parsing and generating XML within R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/rvest&#34;&gt;rvest &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Simple web scraping for R, using CSSSelect or XPath syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opencpu.org/&#34;&gt;OpenCPU &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - HTTP API for R handling concurrent calls, based on the Apache2 web server, to expose R code as REST web services and create full-sized, multi-page web applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pablobarbera/Rfacebook&#34;&gt;Rfacebook&lt;/a&gt; - Access to Facebook API via R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/randyzwitch/RSiteCatalyst&#34;&gt;RSiteCatalyst&lt;/a&gt; - R client library for the Adobe Analytics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trestletech/plumber&#34;&gt;plumber&lt;/a&gt; - A library to expose existing R code as web API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thinkr-open.github.io/golem/&#34;&gt;golem&lt;/a&gt; - A framework for building production-grade Shiny apps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Parallel Computing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for parallel computing.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/views/HighPerformanceComputing.html&#34;&gt;parallel&lt;/a&gt; - R started with release 2.14.0 which includes a new package parallel incorporating (slightly revised) copies of packages &lt;a href=&#34;http://cran.r-project.org/web/packages/multicore/index.html&#34;&gt;multicore&lt;/a&gt; and &lt;a href=&#34;http://cran.r-project.org/web/packages/snow/index.html&#34;&gt;snow&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/Rmpi/index.html&#34;&gt;Rmpi&lt;/a&gt; - Rmpi provides an interface (wrapper) to MPI APIs. It also provides interactive R slave environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/foreach/index.html&#34;&gt;foreach &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Executing the loop in parallel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=future&#34;&gt;future &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - A minimal, efficient, cross-platform unified Future API for parallel and distributed processing in R; designed for beginners as well as advanced developers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amplab-extras/SparkR-pkg&#34;&gt;SparkR &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - R frontend for Spark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vertica/DistributedR&#34;&gt;DistributedR&lt;/a&gt; - A scalable high-performance platform from HP Vertica Analytics Team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vertica/ddR&#34;&gt;ddR&lt;/a&gt; - Provides distributed data structures and simplifies distributed computing in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://spark.rstudio.com/&#34;&gt;sparklyr&lt;/a&gt; - R interface for Apache Spark from RStudio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/package=batchtools&#34;&gt;batchtools&lt;/a&gt; - High performance computing with LSF, TORQUE, Slurm, OpenLava, SGE and Docker Swarm.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;High Performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for making R faster.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rcpp.org/&#34;&gt;Rcpp &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Rcpp provides a powerful API on top of R, make function in R extremely faster.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rcpp11/Rcpp11&#34;&gt;Rcpp11&lt;/a&gt; - Rcpp11 is a complete redesign of Rcpp, targetting C++11.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stat.ethz.ch/R-manual/R-devel/library/compiler/html/compile.html&#34;&gt;compiler&lt;/a&gt; - speeding up your R code using the JIT&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/cpp11&#34;&gt;cpp11&lt;/a&gt; - cpp11 is a header-only R package that helps R package developers handle R objects with C++ code. It&#39;s similar to Rcpp but with different design trade-offs and features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for other languages.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rJava/&#34;&gt;rJava&lt;/a&gt; - Low-level R to Java interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cran/jvmr&#34;&gt;jvmr&lt;/a&gt; - Integration of R, Java, and Scala.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/reticulate/index.html&#34;&gt;reticulate &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Interface to &#39;Python&#39;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rJython/index.html&#34;&gt;rJython&lt;/a&gt; - R interface to Python via Jython.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rPython/index.html&#34;&gt;rPython&lt;/a&gt; - Package allowing R to call Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihui/runr&#34;&gt;runr&lt;/a&gt; - Run Julia and Bash from R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/armgong/RJulia&#34;&gt;RJulia&lt;/a&gt; - R package Call Julia.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Non-Contradiction/JuliaCall&#34;&gt;JuliaCall&lt;/a&gt; - Seamless Integration Between R and Julia.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sites.google.com/a/ddahl.org/rinruby-users/&#34;&gt;RinRuby&lt;/a&gt; - a Ruby library that integrates the R interpreter in Ruby.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/R.matlab/index.html&#34;&gt;R.matlab&lt;/a&gt; - Read and write of MAT files together with R-to-MATLAB connectivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/renozao/RcppOctave&#34;&gt;RcppOctave&lt;/a&gt; - Seamless Interface to Octave and Matlab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.omegahat.org/RSPerl/&#34;&gt;RSPerl&lt;/a&gt; - A bidirectional interface for calling R from Perl and Perl from R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeroenooms/V8&#34;&gt;V8&lt;/a&gt; - Embedded JavaScript Engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.htmlwidgets.org/&#34;&gt;htmlwidgets&lt;/a&gt; - Bring the best of JavaScript data visualization to R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rpy.sourceforge.net/&#34;&gt;rpy2&lt;/a&gt; - Python interface for R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Database Management&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for managing data.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RODBC/&#34;&gt;RODBC&lt;/a&gt; - ODBC database access for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstats-db/DBI&#34;&gt;DBI&lt;/a&gt; - Defines a common interface between the R and database management systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/elastic&#34;&gt;elastic&lt;/a&gt; - Wrapper for the Elasticsearch HTTP API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeroenooms/mongolite&#34;&gt;mongolite&lt;/a&gt; - Streaming Mongo Client for R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-dbi/odbc&#34;&gt;odbc&lt;/a&gt; - Connect to ODBC databases (using the DBI interface)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstats-db/RMariaDB&#34;&gt;RMariaDB&lt;/a&gt; - An R interface to MariaDB (a replacement for the old RMySQL package)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RMySQL/&#34;&gt;RMySQL&lt;/a&gt; - R interface to the MySQL database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ROracle/index.html&#34;&gt;ROracle&lt;/a&gt; - OCI based Oracle database interface for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-dbi/RPostgres&#34;&gt;RPostgres&lt;/a&gt; - an DBI-compliant interface to the postgres database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/rpostgresql/&#34;&gt;RPostgreSQL&lt;/a&gt; - R interface to the PostgreSQL database system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RSQLite/&#34;&gt;RSQLite&lt;/a&gt; - SQLite interface for R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RJDBC/&#34;&gt;RJDBC&lt;/a&gt; - Provides access to databases through the JDBC interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mongosoup/rmongodb&#34;&gt;rmongodb&lt;/a&gt; - R driver for MongoDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/richfitz/redux&#34;&gt;redux&lt;/a&gt; - Redis client for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RCassandra/index.html&#34;&gt;RCassandra&lt;/a&gt; - Direct interface (not Java) to the most basic functionality of Apache Cassandra.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nexr/RHive&#34;&gt;RHive&lt;/a&gt; - R extension facilitating distributed computing via Apache Hive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicolewhite/Rneo4j&#34;&gt;RNeo4j&lt;/a&gt; - Neo4j graph database driver.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mablab/rpostgis&#34;&gt;rpostgis&lt;/a&gt; - R interface to PostGIS database and get spatial objects in R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Machine Learning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for making R cleverer.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/business-science/anomalize&#34;&gt;anomalize&lt;/a&gt; - Tidy Anomaly Detection using Twitter&#39;s AnomalyDetection method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twitter/AnomalyDetection&#34;&gt;AnomalyDetection &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - AnomalyDetection R package from Twitter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ahaz/index.html&#34;&gt;ahaz&lt;/a&gt; - Regularization for semiparametric additive hazards regression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/arules/index.html&#34;&gt;arules&lt;/a&gt; - Mining Association Rules and Frequent Itemsets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/bigrf/index.html&#34;&gt;bigrf&lt;/a&gt; - Big Random Forests: Classification and Regression Forests for Large Data Sets&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/bigRR/index.html&#34;&gt;bigRR&lt;/a&gt; - Generalized Ridge Regression (with special advantage for p &amp;gt;&amp;gt; n cases)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/bmrm/index.html&#34;&gt;bmrm&lt;/a&gt; - Bundle Methods for Regularized Risk Minimization Package&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/Boruta/index.html&#34;&gt;Boruta&lt;/a&gt; - A wrapper algorithm for all-relevant feature selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twitter/BreakoutDetection&#34;&gt;BreakoutDetection &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Breakout Detection via Robust E-Statistics from Twitter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/bst/index.html&#34;&gt;bst&lt;/a&gt; - Gradient Boosting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/CausalImpact&#34;&gt;CausalImpact &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Causal inference using Bayesian structural time-series models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/C50/index.html&#34;&gt;C50&lt;/a&gt; - C5.0 Decision Trees and Rule-Based Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/caret/index.html&#34;&gt;caret &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Classification and Regression Training&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbrownlee/CleverAlgorithmsMachineLearning&#34;&gt;Clever Algorithms For Machine Learning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/CORElearn/index.html&#34;&gt;CORElearn&lt;/a&gt; - Classification, regression, feature evaluation and ordinal evaluation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/CoxBoost/index.html&#34;&gt;CoxBoost&lt;/a&gt; - Cox models by likelihood based boosting for a single survival endpoint or competing risks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/Cubist/index.html&#34;&gt;Cubist&lt;/a&gt; - Rule- and Instance-Based Regression Modeling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/e1071/index.html&#34;&gt;e1071&lt;/a&gt; - Misc Functions of the Department of Statistics (e1071), TU Wien&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/earth/index.html&#34;&gt;earth&lt;/a&gt; - Multivariate Adaptive Regression Spline Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/elasticnet/index.html&#34;&gt;elasticnet&lt;/a&gt; - Elastic-Net for Sparse Estimation and Sparse PCA&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ElemStatLearn/index.html&#34;&gt;ElemStatLearn&lt;/a&gt; - Data sets, functions and examples from the book: &#34;The Elements of Statistical Learning, Data Mining, Inference, and Prediction&#34; by Trevor Hastie, Robert Tibshirani and Jerome Friedman&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/evtree/index.html&#34;&gt;evtree&lt;/a&gt; - Evolutionary Learning of Globally Optimal Trees&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverts/fable/&#34;&gt;fable&lt;/a&gt; - a collection of commonly used univariate and multivariate time series forecasting models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookincubator/prophet&#34;&gt;prophet &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Tool for producing high quality forecasts for time series data that has multiple seasonality with linear or non-linear growth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/FSelector/index.html&#34;&gt;FSelector&lt;/a&gt; - A feature selection framework, based on subset-search or feature ranking approches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/frbs/index.html&#34;&gt;frbs&lt;/a&gt; - Fuzzy Rule-based Systems for Classification and Regression Tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/GAMBoost/index.html&#34;&gt;GAMBoost&lt;/a&gt; - Generalized linear and additive models by likelihood based boosting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/gamboostLSS/index.html&#34;&gt;gamboostLSS&lt;/a&gt; - Boosting Methods for GAMLSS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/gbm/index.html&#34;&gt;gbm&lt;/a&gt; - Generalized Boosted Regression Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/glmnet/index.html&#34;&gt;glmnet &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Lasso and elastic-net regularized generalized linear models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/glmpath/index.html&#34;&gt;glmpath&lt;/a&gt; - L1 Regularization Path for Generalized Linear Models and Cox Proportional Hazards Model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/GMMBoost/index.html&#34;&gt;GMMBoost&lt;/a&gt; - Likelihood-based Boosting for Generalized mixed models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/grplasso/index.html&#34;&gt;grplasso&lt;/a&gt; - Fitting user specified models with Group Lasso penalty&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/grpreg/index.html&#34;&gt;grpreg&lt;/a&gt; - Regularization paths for regression models with grouped covariates&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/h2o/index.html&#34;&gt;h2o &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Deeplearning, Random forests, GBM, KMeans, PCA, GLM&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/hda/index.html&#34;&gt;hda&lt;/a&gt; - Heteroscedastic Discriminant Analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ipred/index.html&#34;&gt;ipred&lt;/a&gt; - Improved Predictors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/kernlab/index.html&#34;&gt;kernlab&lt;/a&gt; - kernlab: Kernel-based Machine Learning Lab&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/klaR/index.html&#34;&gt;klaR&lt;/a&gt; - Classification and visualization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/kohonen/&#34;&gt;kohonen&lt;/a&gt; - Supervised and Unsupervised Self-Organising Maps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/L0Learn/index.html&#34;&gt;L0Learn&lt;/a&gt; - Fast algorithms for best subset selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/lars/index.html&#34;&gt;lars&lt;/a&gt; - Least Angle Regression, Lasso and Forward Stagewise&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/lasso2/index.html&#34;&gt;lasso2&lt;/a&gt; - L1 constrained estimation aka ‘lasso’&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/LiblineaR/index.html&#34;&gt;LiblineaR&lt;/a&gt; - Linear Predictive Models Based On The Liblinear C/C++ Library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/lightgbm/index.html&#34;&gt;lightgbm &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Light Gradient Boosting Machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lme4/lme4&#34;&gt;lme4 &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Mixed-effects models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/nlme/index.html&#34;&gt;nlme &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Mixed-effects models, handling user-specified matrix of residual covariance, relevant for the analysis of repeated observations in longitudinal trials&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/glmmTMB/index.html&#34;&gt;glmmTMB&lt;/a&gt; - Generalized mixed-effects models, handling user-specified matrix of residual covariance, relevant for the analysis of repeated observations in longitudinal trials&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/LogicReg/index.html&#34;&gt;LogicReg&lt;/a&gt; - Logic Regression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/maptree/index.html&#34;&gt;maptree&lt;/a&gt; - Mapping, pruning, and graphing tree models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/mboost/index.html&#34;&gt;mboost&lt;/a&gt; - Model-Based Boosting&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnmyleswhite/ML_for_Hackers&#34;&gt;Machine Learning For Hackers &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr&#34;&gt;mlr&lt;/a&gt; - Extensible framework for classification, regression, survival analysis and clustering [DEPRECIATED]&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mlr-org/mlr3&#34;&gt;mlr3 &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Next generation extensible framework for classification, regression, survival analysis and clustering&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/mvpart/index.html&#34;&gt;mvpart&lt;/a&gt; - Multivariate partitioning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dmlc/mxnet/tree/master/R-package&#34;&gt;MXNet &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - MXNet brings flexible and efficient GPU computing and state-of-art deep learning to R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ncvreg/index.html&#34;&gt;ncvreg&lt;/a&gt; - Regularization paths for SCAD- and MCP-penalized regression models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/nnet/index.html&#34;&gt;nnet&lt;/a&gt; - eed-forward Neural Networks and Multinomial Log-Linear Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/oblique.tree/index.html&#34;&gt;oblique.tree&lt;/a&gt; - Oblique Trees for Classification Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/pamr/index.html&#34;&gt;pamr&lt;/a&gt; - Pam: prediction analysis for microarrays&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/party/index.html&#34;&gt;party&lt;/a&gt; - A Laboratory for Recursive Partytioning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/partykit/index.html&#34;&gt;partykit&lt;/a&gt; - A Toolkit for Recursive Partytioning&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/penalized/index.html&#34;&gt;penalized&lt;/a&gt; - L1 (lasso and fused lasso) and L2 (ridge) penalized estimation in GLMs and in the Cox model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/penalizedLDA/index.html&#34;&gt;penalizedLDA&lt;/a&gt; - Penalized classification using Fisher&#39;s linear discriminant&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/penalizedSVM/index.html&#34;&gt;penalizedSVM&lt;/a&gt; - Feature Selection SVM using penalty functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/quantregForest/index.html&#34;&gt;quantregForest&lt;/a&gt; - quantregForest: Quantile Regression Forests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/randomForest/index.html&#34;&gt;randomForest&lt;/a&gt; - randomForest: Breiman and Cutler&#39;s random forests for classification and regression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/randomForestSRC/index.html&#34;&gt;randomForestSRC&lt;/a&gt; - randomForestSRC: Random Forests for Survival, Regression and Classification (RF-SRC).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imbs-hl/ranger&#34;&gt;ranger&lt;/a&gt; - A Fast Implementation of Random Forests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rattle/index.html&#34;&gt;rattle&lt;/a&gt; - Graphical user interface for data mining in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rda/index.html&#34;&gt;rda&lt;/a&gt; - Shrunken Centroids Regularized Discriminant Analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rdetools/index.html&#34;&gt;rdetools&lt;/a&gt; - Relevant Dimension Estimation (RDE) in Feature Spaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/REEMtree/index.html&#34;&gt;REEMtree&lt;/a&gt; - Regression Trees with Random Effects for Longitudinal (Panel) Data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/relaxo/index.html&#34;&gt;relaxo&lt;/a&gt; - Relaxed Lasso&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rgenoud/index.html&#34;&gt;rgenoud&lt;/a&gt; - R version of GENetic Optimization Using Derivatives&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rgp/index.html&#34;&gt;rgp&lt;/a&gt; - R genetic programming framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/Rmalschains/index.html&#34;&gt;Rmalschains&lt;/a&gt; - Continuous Optimization using Memetic Algorithms with Local Search Chains (MA-LS-Chains) in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rminer/index.html&#34;&gt;rminer&lt;/a&gt; - Simpler use of data mining methods (e.g. NN and SVM) in classification and regression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ROCR/index.html&#34;&gt;ROCR&lt;/a&gt; - Visualizing the performance of scoring classifiers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RoughSets/index.html&#34;&gt;RoughSets&lt;/a&gt; - Data Analysis Using Rough Set and Fuzzy Rough Set Theories&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rpart/index.html&#34;&gt;rpart&lt;/a&gt; - Recursive Partitioning and Regression Trees&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RPMM/index.html&#34;&gt;RPMM&lt;/a&gt; - Recursively Partitioned Mixture Model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RSNNS/index.html&#34;&gt;RSNNS&lt;/a&gt; - Neural Networks in R using the Stuttgart Neural Network Simulator (SNNS)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/Rsomoclu/index.html&#34;&gt;Rsomoclu&lt;/a&gt; - Parallel implementation of self-organizing maps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RWeka/index.html&#34;&gt;RWeka&lt;/a&gt; - R/Weka interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/RXshrink/index.html&#34;&gt;RXshrink&lt;/a&gt; - RXshrink: Maximum Likelihood Shrinkage via Generalized Ridge or Least Angle Regression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/sda/index.html&#34;&gt;sda&lt;/a&gt; - Shrinkage Discriminant Analysis and CAT Score Variable Selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/SDDA/index.html&#34;&gt;SDDA&lt;/a&gt; - Stepwise Diagonal Discriminant Analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ecpolley/SuperLearner&#34;&gt;SuperLearner&lt;/a&gt; and &lt;a href=&#34;http://cran.r-project.org/web/packages/subsemble/index.html&#34;&gt;subsemble&lt;/a&gt; - Multi-algorithm ensemble learning packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kassambara/survminer&#34;&gt;survminer&lt;/a&gt; - Survival Analysis &amp;amp; Visualization&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/survival/index.html&#34;&gt;survival&lt;/a&gt; - Survival Analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/svmpath/index.html&#34;&gt;svmpath&lt;/a&gt; - svmpath: the SVM Path algorithm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/tgp/index.html&#34;&gt;tgp&lt;/a&gt; - Bayesian treed Gaussian process models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tidymodels/index.html&#34;&gt;tidymodels&lt;/a&gt; - A collection of packages for modeling and statistical analysis that share the underlying design philosophy, grammar, and data structures of the tidyverse.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/torch/index.html&#34;&gt;torch&lt;/a&gt; - Tensors and Neural Networks with &#39;GPU&#39; Acceleration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/tree/index.html&#34;&gt;tree&lt;/a&gt; - Classification and regression trees&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/varSelRF/index.html&#34;&gt;varSelRF&lt;/a&gt; - Variable selection using random forests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tqchen/xgboost/tree/master/R-package&#34;&gt;xgboost &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - eXtreme Gradient Boosting Tree model, well known for its speed and performance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Natural Language Processing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for Natural Language Processing.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dselivanov/text2vec&#34;&gt;text2vec&lt;/a&gt; - Fast Text Mining Framework for Vectorization and Word Embeddings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/tm/index.html&#34;&gt;tm&lt;/a&gt; - A comprehensive text mining framework for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/openNLP/index.html&#34;&gt;openNLP&lt;/a&gt; - Apache OpenNLP Tools Interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/koRpus/index.html&#34;&gt;koRpus&lt;/a&gt; - An R Package for Text Analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/zipfR/index.html&#34;&gt;zipfR&lt;/a&gt; - Statistical models for word frequency distributions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/NLP/index.html&#34;&gt;NLP&lt;/a&gt; - Basic functions for Natural Language Processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpsievert/LDAvis&#34;&gt;LDAvis&lt;/a&gt; - Interactive visualization of topic models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/topicmodels/index.html&#34;&gt;topicmodels&lt;/a&gt; - Topic modeling interface to the C code developed by by David M. Blei for Topic Modeling (Latent Dirichlet Allocation (LDA), and Correlated Topics Models (CTM)).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/syuzhet/index.html&#34;&gt;syuzhet&lt;/a&gt; - Extracts sentiment from text using three different sentiment dictionaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/SnowballC/index.html&#34;&gt;SnowballC&lt;/a&gt; - Snowball stemmers based on the C libstemmer UTF-8 library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kbenoit/quanteda&#34;&gt;quanteda&lt;/a&gt; - R functions for Quantitative Analysis of Textual Data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trinker/topicmodels_learning&#34;&gt;Topic Models Resources&lt;/a&gt; - Topic Models learning and R related resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BZRLC/R-notes/raw/master/NLP/readme.md&#34;&gt;NLP for &lt;img src=&#34;https://assets-cdn.github.com/images/icons/emoji/unicode/1f1e8-1f1f3.png&#34; width=&#34;20&#34; heigth=&#34;20&#34; align=&#34;absmiddle&#34; class=&#34;emoji&#34; alt=&#34;&lt;span&gt;🇨🇳&lt;/span&gt;&#34;&gt;&lt;/a&gt; - NLP related resources in R. @Chinese&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/masalmon/monkeylearn&#34;&gt;MonkeyLearn&lt;/a&gt; - 🐒 R package for text analysis with Monkeylearn 🐒.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tidytextmining.com/index.html&#34;&gt;tidytext&lt;/a&gt; - Implementing tidy principles of Hadley Wickham to text mining.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patperry/r-utf8&#34;&gt;utf8&lt;/a&gt; - Manipulating and printing UTF-8 text that fixes multiple bugs in R&#39;s UTF-8 handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kgjerde.github.io/corporaexplorer/&#34;&gt;corporaexplorer&lt;/a&gt; - Dynamic exploration of text collections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bayesian&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for Bayesian Inference.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/coda/index.html&#34;&gt;coda&lt;/a&gt; - Output analysis and diagnostics for MCMC.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/mcmc/index.html&#34;&gt;mcmc&lt;/a&gt; - Markov Chain Monte Carlo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mcmcpack.berkeley.edu/&#34;&gt;MCMCpack&lt;/a&gt; - Markov chain Monte Carlo (MCMC) Package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/R2WinBUGS/index.html&#34;&gt;R2WinBUGS&lt;/a&gt; - Running WinBUGS and OpenBUGS from R / S-PLUS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/BRugs/index.html&#34;&gt;BRugs&lt;/a&gt; - R interface to the OpenBUGS MCMC software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/rjags/index.html&#34;&gt;rjags&lt;/a&gt; - R interface to the JAGS MCMC library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mc-stan.org/interfaces/rstan.html&#34;&gt;rstan &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - R interface to the Stan MCMC software.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optimization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for Optimization.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/lpSolve/index.html&#34;&gt;lpSolve&lt;/a&gt; - Interface to &lt;code&gt;Lp_solve&lt;/code&gt; to Solve Linear/Integer Programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/minqa/index.html&#34;&gt;minqa&lt;/a&gt; - Derivative-free optimization algorithms by quadratic approximation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/nloptr/index.html&#34;&gt;nloptr&lt;/a&gt; - NLopt is a free/open-source library for nonlinear optimization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/ompr/index.html&#34;&gt;ompr&lt;/a&gt; - Model mixed integer linear programs in an algebraic way directly in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/Rglpk/index.html&#34;&gt;Rglpk&lt;/a&gt; - R/GNU Linear Programming Kit Interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.rstudio.com/web/packages/ROI/index.html&#34;&gt;ROI&lt;/a&gt; - The R Optimization Infrastructure (&#39;ROI&#39;) is a sophisticated framework for handling optimization problems in R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Finance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for dealing with money.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Quantitative Financial Modelling &amp;amp; Trading Framework for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pedquant.com/&#34;&gt;pedquant&lt;/a&gt; - Public Economic Data and Quantitative Analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/TTR/index.html&#34;&gt;TTR&lt;/a&gt; - Functions and data to construct technical trading rules with R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/PerformanceAnalytics/index.html&#34;&gt;PerformanceAnalytics&lt;/a&gt; - Econometric tools for performance and risk analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/zoo/index.html&#34;&gt;zoo &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - S3 Infrastructure for Regular and Irregular Time Series.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/xts/index.html&#34;&gt;xts&lt;/a&gt; - eXtensible Time Series.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/tseries/index.html&#34;&gt;tseries&lt;/a&gt; - Time series analysis and computational finance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/fAssets/index.html&#34;&gt;fAssets&lt;/a&gt; - Analysing and Modelling Financial Assets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShichenXie/scorecard&#34;&gt;scorecard&lt;/a&gt; - Credit Risk Scorecard&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bioinformatics and Biostatistics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for processing biological datasets.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.bioconductor.org/&#34;&gt;Bioconductor &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Tools for the analysis and comprehension of high-throughput genomic data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/genetics/index.html&#34;&gt;genetics&lt;/a&gt; - Classes and methods for handling genetic data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/gap/index.html&#34;&gt;gap&lt;/a&gt; - An integrated package for genetic data analysis of both population and family data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ape/index.html&#34;&gt;ape&lt;/a&gt; - Analyses of Phylogenetics and Evolution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/pheatmap/index.html&#34;&gt;pheatmap&lt;/a&gt; - Pretty heatmaps made easy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lme4/lme4&#34;&gt;lme4&lt;/a&gt; - Generalized mixed-effects models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/nlme/index.html&#34;&gt;nlme&lt;/a&gt; - Mixed-effects models, handling user-specified matrix of residual covariance, relevant for the anaysis of repeated observations in longitudinal trials.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/glmmTMB/index.html&#34;&gt;glmmTMB&lt;/a&gt; - Generalized mixed-effects models, handling user-specified matrix of residual covariance, relevant for the anaysis of repeated observations in longitudinal trials.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Network Analysis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages to construct, analyze and visualize network data.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/briatte/awesome-network-analysis&#34;&gt;Network Analysis List&lt;/a&gt; - Network Analysis related resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://igraph.org/r/&#34;&gt;igraph &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - A collection of network analysis tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/network/index.html&#34;&gt;network&lt;/a&gt; - Basic tools to manipulate relational data in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/sna/index.html&#34;&gt;sna&lt;/a&gt; - Basic network measures and visualization tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/USCCANA/netdiffuseR&#34;&gt;netdiffuseR&lt;/a&gt; - Tools for Analysis of Network Diffusion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/networkDynamic/&#34;&gt;networkDynamic&lt;/a&gt; - Support for dynamic, (inter)temporal networks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/ndtv/&#34;&gt;ndtv&lt;/a&gt; - Tools to construct animated visualizations of dynamic network data in various formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://statnet.org/&#34;&gt;statnet&lt;/a&gt; - The project behind many R network analysis packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/ergm/index.html&#34;&gt;ergm&lt;/a&gt; - Exponential random graph models in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/latentnet/index.html&#34;&gt;latentnet&lt;/a&gt; - Latent position and cluster models for network objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/tnet/index.html&#34;&gt;tnet&lt;/a&gt; - Network measures for weighted, two-mode and longitudinal networks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/gvegayon/rgexf/wiki/Home&#34;&gt;rgexf&lt;/a&gt; - Export network objects from R to &lt;a href=&#34;http://gexf.net/format/&#34;&gt;GEXF&lt;/a&gt;, for manipulation with network software like &lt;a href=&#34;https://gephi.org/&#34;&gt;Gephi&lt;/a&gt; or &lt;a href=&#34;http://sigmajs.org/&#34;&gt;Sigma&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/datastorm-open/visNetwork&#34;&gt;visNetwork&lt;/a&gt; - Using vis.js library for network visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasp85/tidygraph&#34;&gt;tidygraph&lt;/a&gt; - A tidy API for graph manipulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Spatial&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages to explore the earth.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/views/Spatial.html&#34;&gt;CRAN Task View: Analysis of Spatial Data&lt;/a&gt;- Spatial Analysis related resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rstudio.github.io/leaflet/&#34;&gt;Leaflet&lt;/a&gt; - One of the most popular JavaScript libraries interactive maps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dkahle/ggmap&#34;&gt;ggmap&lt;/a&gt; - Plotting maps in R with ggplot2.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Lchiffon/REmap&#34;&gt;REmap&lt;/a&gt; - R interface to the JavaScript library ECharts for interactive map data visualization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/sf/index.html&#34;&gt;sf&lt;/a&gt; - Improved Classes and Methods for Spatial Data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://edzer.github.io/sp/&#34;&gt;sp&lt;/a&gt; - Classes and Methods for Spatial Data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/rgeos/index.html&#34;&gt;rgeos&lt;/a&gt; - Interface to Geometry Engine - Open Source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/rgdal/index.html&#34;&gt;rgdal&lt;/a&gt; - Bindings for the Geospatial Data Abstraction Library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/maptools/index.html&#34;&gt;maptools&lt;/a&gt; - Tools for Reading and Handling Spatial Objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edzer/gstat&#34;&gt;gstat&lt;/a&gt; - Spatial and spatio-temporal geostatistical modelling, prediction and simulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edzer/spacetime&#34;&gt;spacetime&lt;/a&gt; - R classes and methods for spatio-temporal data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/RColorBrewer/index.html&#34;&gt;RColorBrewer&lt;/a&gt; - Provides color schemes for maps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spatstat/spatstat&#34;&gt;spatstat&lt;/a&gt; - Spatial Point Pattern Analysis, Model-Fitting, Simulation, Tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/spdep/index.html&#34;&gt;spdep&lt;/a&gt; - Spatial Dependence: Weighting Schemes, Statistics and Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/walkerke/tigris&#34;&gt;tigris&lt;/a&gt; - Download and use Census TIGER/Line shapefiles in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/GWmodel/&#34;&gt;GWmodel&lt;/a&gt; - Geographically-Weighted Models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mtennekes/tmap&#34;&gt;tmap&lt;/a&gt; - R package for thematic maps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;R Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for packages.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/PackageDevelopment&#34;&gt;Package Development List&lt;/a&gt; - R packages to improve package development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/promises/index.html&#34;&gt;promises&lt;/a&gt; - Abstractions for Promise-Based Asynchronous Programming&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/devtools&#34;&gt;devtools &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Tools to make an R developer&#39;s life easier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/testthat&#34;&gt;testthat &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - An R package to make testing fun.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wch/R6&#34;&gt;R6 &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - simpler, faster, lighter-weight alternative to R&#39;s built-in classes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/pryr&#34;&gt;pryr &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Make it easier to understand what&#39;s going on in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klutometis/roxygen&#34;&gt;roxygen &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - Describe your functions in comments next to their definitions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/lineprof&#34;&gt;lineprof&lt;/a&gt; - Visualise line profiling results in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/packrat&#34;&gt;packrat&lt;/a&gt; - Make your R projects more isolated, portable, and reproducible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/talgalili/installr/&#34;&gt;installr&lt;/a&gt; - Functions for installing softwares from within R (for Windows).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smbache/import/&#34;&gt;import&lt;/a&gt; - An import mechanism for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klmr/modules&#34;&gt;modules&lt;/a&gt; - An alternative (Python style) module system for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rocker-org&#34;&gt;Rocker &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - R configurations for &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daattali/rstudio-addins&#34;&gt;RStudio Addins&lt;/a&gt; - List of RStudio addins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eddelbuettel/drat&#34;&gt;drat&lt;/a&gt; - Creation and use of R repositories on GitHub or other repos.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimhester/covr&#34;&gt;covr&lt;/a&gt; - Test coverage for your R package and (optionally) upload the results to &lt;a href=&#34;https://coveralls.io/&#34;&gt;coveralls&lt;/a&gt; or &lt;a href=&#34;https://codecov.io/&#34;&gt;codecov&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimhester/lintr&#34;&gt;lintr&lt;/a&gt; - Static code analysis for R to enforce code style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/staticdocs&#34;&gt;staticdocs&lt;/a&gt; - Generate static html documentation for an R package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/metrumresearchgroup/sinew&#34;&gt;sinew&lt;/a&gt; - Generate roxygen2 skeletons populated with information scraped from the function script.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for Logging&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zatonovo/futile.logger&#34;&gt;futile.logger&lt;/a&gt; - A logging package in R similar to log4j&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johnmyleswhite/log4r&#34;&gt;log4r&lt;/a&gt; - A log4j derivative for R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/logging/index.html&#34;&gt;logging&lt;/a&gt; - A logging package emulating the python logging package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Packages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Handy Data Packages&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jalapic/engsoccerdata&#34;&gt;engsoccerdata&lt;/a&gt; - English and European soccer results 1871-2016.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/jennybc/gapminder&#34;&gt;gapminder&lt;/a&gt; - Excerpt from the Gapminder dataset (data about countries through the past 50 years).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/wbstats/index.html&#34;&gt;wbstats&lt;/a&gt; - Tools for searching and downloading data and statistics from the World Bank Data API and the World Bank Data Catalog API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rrrlw/ICON&#34;&gt;ICON&lt;/a&gt; - complex systems &amp;amp; networks datasets from the Index of COmplex Networks (ICON) database &lt;a href=&#34;http://icon.colorado.edu&#34;&gt;webpage&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thospfuller/rcoboldi&#34;&gt;RCOBOLDI&lt;/a&gt; - Import COBOL CopyBook data files directly into R as properly structured data frames. Package builds are available via &lt;a href=&#34;https://github.com/thospfuller/drat&#34;&gt;Drat&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/thospfuller/rcoboldi-rocker-rstudio&#34;&gt;DockerHub&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Handy Tools for R&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/git2r&#34;&gt;git2r&lt;/a&gt; - Gives you programmatic access to Git repositories from R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://anaconda.org/r/repo&#34;&gt;Conda&lt;/a&gt; - Most R packages are available through the Conda polyglot cross-platform dependency manager.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Interpreters&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Alternative R engines.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cs.kent.ac.uk/projects/cxxr/&#34;&gt;CXXR&lt;/a&gt; - Refactorising R into C++.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/allr/fastr/wiki/Home&#34;&gt;fastR&lt;/a&gt; - FastR is an implementation of the R Language in Java atop Truffle and Graal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pqr-project.org/&#34;&gt;pqR&lt;/a&gt; - a &#34;pretty quick&#34; implementation of R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.renjin.org/&#34;&gt;renjin&lt;/a&gt; - a JVM-based interpreter for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rho-devel/rho&#34;&gt;rho&lt;/a&gt; - Refactor the interpreter of the R language into a fully-compatible, efficient, VM for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtalbot/riposte&#34;&gt;riposte&lt;/a&gt; - a fast interpreter and JIT for R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://spotfire.tibco.com/discover-spotfire/what-does-spotfire-do/predictive-analytics/tibco-enterprise-runtime-for-r-terr&#34;&gt;TERR&lt;/a&gt; - TIBCO Enterprise Runtime for R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learning R&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Packages for Learning R.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://swirlstats.com/&#34;&gt;swirl &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - An interactive R tutorial directly in your R console.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ujjwalkarn/DataScienceR&#34;&gt;DataScienceR &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - a list of R tutorials for Data Science, NLP and Machine Learning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;Where to discover new R-esources.&lt;/p&gt; &#xA;&lt;h2&gt;Websites&lt;/h2&gt; &#xA;&lt;h3&gt;Manuals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.r-project.org/&#34;&gt;R-project&lt;/a&gt; - The R Project for Statistical Computing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/doc/manuals/R-intro.pdf&#34;&gt;An Introduction to R&lt;/a&gt; - A very good introductory text on R, also covers some advanced topic. See also the &lt;code&gt;Manuals&lt;/code&gt; section on &lt;a href=&#34;https://cran.r-project.org/manuals.html&#34;&gt;CRAN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/other-docs.html&#34;&gt;CRAN Contributed Docs&lt;/a&gt; - CRAN Contributed Documentation in many languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.statmethods.net/&#34;&gt;Quick-R&lt;/a&gt; - An excellent quick reference&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tryr.codeschool.com/&#34;&gt;tryR&lt;/a&gt; - A quick course for getting started with R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tools and References&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rdocumentation.org/&#34;&gt;RDocumentation&lt;/a&gt; - Search through all CRAN, Bioconductor, Github packages and their archives with RDocumentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rdrr.io/&#34;&gt;rdrr.io&lt;/a&gt; - Find R package documentation. Try R packages in your browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/views/&#34;&gt;CRAN Task Views&lt;/a&gt; - Task Views for CRAN packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rnotebook.io/&#34;&gt;rnotebook.io&lt;/a&gt; - Create online R Jupyter Notebooks for free.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;News and Info&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rweekly.org&#34;&gt;R Weekly&lt;/a&gt; - Weekly updates about R and Data Science. R Weekly is openly developed on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.r-bloggers.com/&#34;&gt;R Bloggers&lt;/a&gt; - There are people scattered across the Web who blog about R. This is simply an aggregator of many of those feeds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.r-users.com/&#34;&gt;R-users&lt;/a&gt; - A job board for R users (and the people who are looking to hire them)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Books&lt;/h2&gt; &#xA;&lt;h3&gt;Free and Online&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://r4ds.had.co.nz/&#34;&gt;&lt;em&gt;R for Data Science&lt;/em&gt; by Garrett Grolemund &amp;amp; Hadley Wickham&lt;/a&gt; - Free book from RStudio developers with emphasis on data science workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.cookbook-r.com/&#34;&gt;&lt;em&gt;R Cookbook&lt;/em&gt; by Winston Chang&lt;/a&gt; - A problem-oriented online book that supports his &lt;a href=&#34;http://shop.oreilly.com/product/0636920063704.do&#34;&gt;R Graphics Cookbook, 2nd ed. (2018)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://adv-r.hadley.nz/&#34;&gt;&lt;em&gt;Advanced R&lt;/em&gt;, 2nd ed. by Hadley Wickham (2019) &lt;img class=&#34;emoji&#34; alt=&#34;heart&#34; src=&#34;https://cdn.jsdelivr.net/gh/qinwf/awesome-R@3c66da6e291bcc0520b1649125b0bed750896a9a/heart.png&#34; height=&#34;20&#34; align=&#34;absmiddle&#34; width=&#34;20&#34;&gt;&lt;/a&gt; - An online version of the Advanced R book.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r-pkgs.org/&#34;&gt;&lt;em&gt;R Packages&lt;/em&gt;, 2nd ed. by Hadley Wickham &amp;amp; Jennifer Bryan&lt;/a&gt; - A book (in paper and website formats) on writing R packages.&lt;/li&gt; &#xA; &lt;li&gt;Books written as part of the Johns Hopkins Data Science Specialization: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://leanpub.com/exdata&#34;&gt;&lt;em&gt;Exploratory Data Analysis with R&lt;/em&gt; by Roger D. Peng (2016)&lt;/a&gt; - Basic analytical skills for all sorts of data in R.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://leanpub.com/rprogramming&#34;&gt;&lt;em&gt;R Programming for Data Science&lt;/em&gt; by Roger D. Peng (2019)&lt;/a&gt; - More advanced data analysis that relies on R programming.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://leanpub.com/reportwriting&#34;&gt;&lt;em&gt;Report Writing for Data Science in R&lt;/em&gt; by Roger D. Peng (2019)&lt;/a&gt; - R-based methods for reproducible research and report generation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://r4stats.com/books/free-version/&#34;&gt;&lt;em&gt;R for SAS and SPSS users&lt;/em&gt; by Bob Muenchen (2012)&lt;/a&gt; - An excellent resource for users already familiar with SAS or SPSS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://faculty.marshall.usc.edu/gareth-james/ISL/&#34;&gt;&lt;em&gt;Introduction to Statistical Learning with Application in R&lt;/em&gt; by Gareth James et al. (2017)&lt;/a&gt; - A simplified and &#34;operational&#34; version of &lt;em&gt;The Elements of Statistical Learning&lt;/em&gt;. Free softcopy provided by its authors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.burns-stat.com/pages/Tutor/R_inferno.pdf&#34;&gt;&lt;em&gt;The R Inferno&lt;/em&gt; by Patrick Burns (2011)&lt;/a&gt; - Patrick Burns gives insight into R&#39;s ins and outs along with its quirks!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://csgillespie.github.io/efficientR/&#34;&gt;&lt;em&gt;Efficient R Programming&lt;/em&gt; by Colin Gillespie &amp;amp; Robin Lovelace (2017)&lt;/a&gt; - An online version of the O’Reilly book: Efficient R Programming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikibooks.org/wiki/R_Programming&#34;&gt;The R Programming Wikibook&lt;/a&gt; - A collaborative handbook for R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Paid&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/9781593273842.do&#34;&gt;The Art of R Programming&lt;/a&gt; - It&#39;s a good resource for systematically learning fundamentals such as types of objects, control statements, variable scope, classes and debugging in R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/0636920174851.do&#34;&gt;&lt;em&gt;R Cookbook&lt;/em&gt;, 2nd ed. by JD Long &amp;amp; Paul Teetor (2019)&lt;/a&gt; - A quick and simple introduction to conducting many common statistical tasks with R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.manning.com/kabacoff2/&#34;&gt;R in Action&lt;/a&gt; - This book aims at all levels of users, with sections for beginning, intermediate and advanced R ranging from &#34;Exploring R data structures&#34; to running regressions and conducting factor analyses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.springer.com/series/6991?detailsPage=titles&#34;&gt;&lt;em&gt;Use R!&lt;/em&gt; Series by Springer&lt;/a&gt; - This series of inexpensive and focused books from Springer publish shorter books aimed at practitioners. Books can discuss the use of R in a particular subject area, such as Bayesian networks, ggplot2 and Rcpp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/big-data-and-business-intelligence/learning-r-programming&#34;&gt;Learning R Programming&lt;/a&gt; - Learning R as a programming language from basics to advanced topics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Book/monograph Lists and Reviews&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RomanTsegelskyi/rbooks&#34;&gt;R Books List&lt;/a&gt; - List of R Books.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/stats337&#34;&gt;Readings in Applied Data Science&lt;/a&gt; - These readings reflect Hadley&#39;s personal thoughts about applied data science.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Podcasts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://soundcloud.com/nssd-podcast&#34;&gt;Not So Standard Deviations&lt;/a&gt; - The Data Science Podcast. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://twitter.com/rdpeng&#34;&gt;@Roger Peng&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/hspter&#34;&gt;@Hilary Parker&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rworld.news/blog/&#34;&gt;R World News&lt;/a&gt; - R World News helps you keep up with happenings within the R community. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://twitter.com/hrbrmstr&#34;&gt;@Bob Rudis&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/jayjacobs&#34;&gt;@Jay Jacobs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r-podcast.org/&#34;&gt;The R-Podcast&lt;/a&gt; - Giving practical advice on how to use R. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r-podcast.org/stories/contact.html&#34;&gt;@Eric Nantz&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rtalk.org&#34;&gt;R Talk&lt;/a&gt; - News and discussions of statistical software and language R. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://twitter.com/quominus&#34;&gt;@Oliver Keyes&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jasdumas&#34;&gt;@Jasmine Dumas&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/emhrt_&#34;&gt;@Ted Hart&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/bearloga&#34;&gt;@Mikhail Popov&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rweekly.org&#34;&gt;R Weekly&lt;/a&gt; - Weekly news updates about the R community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference Cards&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;RStudio Cheat Sheets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/doc/contrib/Baggott-refcard-v2.pdf&#34;&gt;R&amp;nbsp;Reference&amp;nbsp;Card&amp;nbsp;2.0&lt;/a&gt; - Material from R for Beginners by permission of Emmanuel Paradis (Version 2 by Matt Baggott).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/doc/contrib/Ricci-refcard-regression.pdf&#34;&gt;Regression Analysis Refcard&lt;/a&gt; - R Reference Card for Regression Analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ess.r-project.org/refcard.pdf&#34;&gt;Reference Card for ESS&lt;/a&gt; - Reference Card for ESS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MOOCs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Massive open online courses.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.coursera.org/specialization/jhudatascience/1&#34;&gt;Johns Hopkins University Data Science Specialization&lt;/a&gt; - 9 courses including: Introduction to R, literate analysis tools, Shiny and some more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://simplystatistics.org/2014/11/25/harvardx-biomedical-data-science-open-online-training-curriculum-launches-on-january-19/&#34;&gt;HarvardX Biomedical Data Science&lt;/a&gt; - Introduction to R for the Life Sciences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.edx.org/course/explore-statistics-r-kix-kiexplorx-0&#34;&gt;Explore Statistics with R&lt;/a&gt; - Covers introduction, data handling and statistical analysis in R.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lists&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Great resources for learning domain knowledge.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RomanTsegelskyi/rbooks&#34;&gt;Books&lt;/a&gt; - List of R Books.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ggplot2-exts.github.io/ggiraph.html&#34;&gt;ggplot2 Extensions&lt;/a&gt; - Showcases of ggplot2 extensions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BZRLC/R-notes/raw/master/NLP/readme.md&#34;&gt;Natural Language Processing &lt;img src=&#34;https://assets-cdn.github.com/images/icons/emoji/unicode/1f1e8-1f1f3.png&#34; width=&#34;20&#34; heigth=&#34;20&#34; align=&#34;absmiddle&#34; class=&#34;emoji&#34; alt=&#34;&lt;span&gt;🇨🇳&lt;/span&gt;&#34;&gt;&lt;/a&gt; - NLP related resources in R. @Chinese&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/briatte/awesome-network-analysis&#34;&gt;Network Analysis&lt;/a&gt; - Network Analysis related resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/opendata&#34;&gt;Open Data&lt;/a&gt; - Using R to obtain, parse, manipulate, create, and share open data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qinwf/awesome-R/raw/master/misc/posts.md&#34;&gt;Posts&lt;/a&gt; - Great R blog posts or Rticles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/PackageDevelopment&#34;&gt;Package Development&lt;/a&gt; - R packages to improve package development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.r-project.org/conferences.html&#34;&gt;R Project Conferences&lt;/a&gt; - Information about useR! Conferences and DSC Conferences.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/RStartHere&#34;&gt;RStartHere&lt;/a&gt; - A guide to some of the most useful R packages, organized by workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daattali/addinslist&#34;&gt;RStudio Addins&lt;/a&gt; - List of RStudio addins.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trinker/topicmodels_learning&#34;&gt;Topic Models&lt;/a&gt; - Topic Models learning and R related resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ropensci/webservices&#34;&gt;Web Technologies&lt;/a&gt; - Information about how to use R and the world wide web together.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;R Ecosystems&lt;/h2&gt; &#xA;&lt;p&gt;R communities and package collections (in alphabetical order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ropengov.github.io/&#34;&gt;rOpenGov&lt;/a&gt; Open government data, computational social science, digital humanities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rOpenHealth&#34;&gt;rOpenHealth&lt;/a&gt; Public health data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ropensci.org&#34;&gt;rOpenSci&lt;/a&gt; Open science&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2018&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverts/fable&#34;&gt;fable&lt;/a&gt; - univariate and multivariate time series forecasting models &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/fable&#34; alt=&#34;fable&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/r2d3/&#34;&gt;r2d3&lt;/a&gt; - R Interface to D3 Visualizations &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/r2d3&#34; alt=&#34;r2d3&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio-education/rstats-ed&#34;&gt;rstats-ed&lt;/a&gt; - List of courses teaching R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/promises/index.html&#34;&gt;promises&lt;/a&gt; - Abstractions for Promise-Based Asynchronous Programming &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/promises&#34; alt=&#34;promises&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yihui.name/tinytex/&#34;&gt;tinytex&lt;/a&gt; - A lightweight and easy-to-maintain LaTeX distribution &lt;img src=&#34;https://cranlogs.r-pkg.org/badges/tinytex&#34; alt=&#34;tinytex&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hadley/stats337&#34;&gt;Readings in Applied Data Science&lt;/a&gt; - These readings reflect Hadley&#39;s personal thoughts about applied data science.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2017&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookincubator/prophet&#34;&gt;prophet&lt;/a&gt; - Tool for producing high quality forecasts for time series data that has multiple seasonality with linear or non-linear growth.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/tidyverse&#34;&gt;tidyverse&lt;/a&gt; - Easily install and load packages from the tidyverse&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/purrr&#34;&gt;purrr&lt;/a&gt; - A functional programming toolkit for R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/hrbrthemes&#34;&gt;hrbrthemes&lt;/a&gt; - 🔏 Opinionated, typographic-centric ggplot2 themes and theme components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihui/xaringan&#34;&gt;xaringan&lt;/a&gt; - Create HTML5 slides with R Markdown and the JavaScript library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdown&lt;/a&gt; - Create Blogs and Websites with R Markdown&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/glue&#34;&gt;glue&lt;/a&gt; - Glue strings to data in R. Small, fast, dependency free interpreted string literals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimhester/covr&#34;&gt;covr&lt;/a&gt; - Test coverage reports for R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jimhester/lintr&#34;&gt;lintr&lt;/a&gt; - Static Code Analysis for R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jennybc/reprex&#34;&gt;reprex&lt;/a&gt; - Render bits of R code for sharing, e.g., on GitHub or StackOverflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/reticulate&#34;&gt;reticulate&lt;/a&gt; - R Interface to Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rstudio/tensorflow&#34;&gt;tensorflow&lt;/a&gt; - TensorFlow for R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patperry/r-utf8&#34;&gt;utf8&lt;/a&gt; - Manipulating and printing UTF-8 text that fixes multiple bugs in R&#39;s UTF-8 handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomasp85/patchwork&#34;&gt;Patchwork&lt;/a&gt; - Combine separate ggplots into the same graphic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Other Awesome Lists&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bayandin/awesome-awesomeness&#34;&gt;awesome-awesomeness&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jnv/lists&#34;&gt;lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grabear/awesome-rshiny&#34;&gt;awesome-rshiny&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Your contributions are always welcome!&lt;/p&gt; &#xA;&lt;p&gt;This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License - &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/legalcode&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>swirldev/swirl_courses</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/swirldev/swirl_courses</id>
    <link href="https://github.com/swirldev/swirl_courses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎓 A collection of interactive courses for the swirl R package.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swirl courses&lt;/h1&gt; &#xA;&lt;p&gt;This is a collection of interactive courses for use with the &lt;a href=&#34;http://swirlstats.com&#34;&gt;swirl R package&lt;/a&gt;. You&#39;ll find instructions for installing courses further down on this page. Some courses are still in development and we&#39;d love to hear any &lt;a href=&#34;https://github.com/swirldev/swirl_courses/issues/new&#34;&gt;suggestions&lt;/a&gt; you have as you work through them.&lt;/p&gt; &#xA;&lt;p&gt;For more information regarding swirl, visit &lt;a href=&#34;http://swirlstats.com&#34;&gt;swirlstats.com&lt;/a&gt; or the &lt;a href=&#34;https://github.com/swirldev/swirl&#34;&gt;swirl GitHub repository&lt;/a&gt;. If you&#39;d like to write your own interactive content, please visit the &lt;a href=&#34;http://swirlstats.com/instructors.html&#34;&gt;Instructors page&lt;/a&gt; of our website.&lt;/p&gt; &#xA;&lt;p&gt;Here are our current offerings, organized by level of difficulty:&lt;/p&gt; &#xA;&lt;h4&gt;Beginner&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;R Programming&lt;/strong&gt;: The basics of programming in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swirldev/R_Programming_E&#34;&gt;&lt;strong&gt;R Programming E&lt;/strong&gt;&lt;/a&gt;: Same as the original, but modified slightly for in-class use (see below ***)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swirlstats.com/scn/rpe.html&#34;&gt;&lt;strong&gt;The R Programming Environment&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - **Data Analysis**: Basic ideas in statistics and data visualization --&gt; &#xA;&lt;!-- - **Mathematical Biostatistics Boot Camp**: One- and two-sample t-tests, power, and sample size --&gt; &#xA;&lt;!-- - **Open Intro**: A very basic introduction to statistics, data analysis, and data visualization --&gt; &#xA;&lt;p&gt;*** &lt;em&gt;R Programming E is identical to R Programming, except we&#39;ve eliminated the prompts for Coursera credentials at the end of each lesson and instead give students the option to send an email to their instructor notifying them of completion. Admittedly, it&#39;s sort of a hack until we come up with a more robust solution for in-class use (i.e. an instructor &#34;dashboard&#34;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Intermediate&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Regression Models&lt;/strong&gt;: The basics of regression modeling in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Getting and Cleaning Data&lt;/strong&gt;: dplyr, tidyr, lubridate, oh my!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Advanced&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Statistical Inference&lt;/strong&gt;: This intermediate to advanced level course closely follows the &lt;a href=&#34;https://www.coursera.org/course/statinference&#34;&gt;Statistical Inference course&lt;/a&gt; of the Johns Hopkins &lt;a href=&#34;https://www.coursera.org/specialization/jhudatascience/1&#34;&gt;Data Science Specialization&lt;/a&gt; on Coursera. It introduces the student to basic concepts of statistical inference including probability, hypothesis testing, confidence intervals and p-values. It concludes with an initiation to topics of particular relevance to big data, issues of multiple testing and resampling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://swirlstats.com/scn/arp.html&#34;&gt;&lt;strong&gt;Advanced R Programming&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Since our users come from a variety backgrounds, it&#39;s very hard to label material as &lt;strong&gt;Beginner&lt;/strong&gt;, &lt;strong&gt;Intermediate&lt;/strong&gt;, or &lt;strong&gt;Advanced&lt;/strong&gt;. If you find something that is labelled &lt;strong&gt;Beginner&lt;/strong&gt; to be challenging, please don&#39;t be discouraged. The first step of learning anything is to acknowledge that you are capable of understanding it. True understanding will come with time and practice.&lt;/p&gt; &#xA;&lt;h4&gt;Course Authors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Writing swirl Courses&lt;/strong&gt;: An interactive guides and example for swirl course authors. The first group of lessons cover basics. The rest cover special topics useful primarily as samples--points of departure for one&#39;s own material. For more comprehensive documentation about writing your own swirl courses see &lt;a href=&#34;http://swirlstats.com/swirlify/&#34;&gt;http://swirlstats.com/swirlify/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install and run a course automatically from swirl&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is the preferred method of installing courses.&lt;/strong&gt; It automates the process by allowing you to do everything right from the R console.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure you have a recent version version of swirl:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.packages(&#34;swirl&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Enter the following from the R console, &lt;strong&gt;substituting the name of the course&lt;/strong&gt; that you wish to install:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;library(swirl)&#xA;install_course(&#34;Course Name Here&#34;)&#xA;swirl()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, &lt;code&gt;install_course(&#34;R Programming&#34;)&lt;/code&gt; will install the R Programming course. &lt;strong&gt;Please note that course names are case sensitive!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If that doesn&#39;t work for you...&lt;/p&gt; &#xA;&lt;h2&gt;Install and run a course manually&lt;/h2&gt; &#xA;&lt;p&gt;If the automatic course installation method outlined above does not work for you, then there&#39;s a simple alternative.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find the course you want to install on the &lt;a href=&#34;https://swirlstats.com/scn/title.html&#34;&gt;Swirl Course network website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow the manual installation instructions on the course page.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If that does not work for you, consider taking a look at the &lt;a href=&#34;https://github.com/swirldev/swirl_courses/wiki/Legacy-Manual-Install-Instructions-for-Swirl-Courses&#34;&gt;legacy manual install instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Uninstall a course&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to remove a course at any time, you can use &lt;code&gt;uninstall_course(&#34;Course Name Here&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using swirl in the classroom&lt;/h2&gt; &#xA;&lt;p&gt;Instructors around the world are using swirl in their classrooms. We think this is awesome. If you&#39;re an instructor, please feel free to do the same -- free of charge. While your students may be paying to take your course or attend your institution, we simply ask that you don&#39;t charge people &lt;em&gt;directly&lt;/em&gt; for the use of our software or instructional content.&lt;/p&gt; &#xA;&lt;p&gt;If you are not sure about a particular use case, don&#39;t hesitate to post a question to our &lt;a href=&#34;https://groups.google.com/forum/#!forum/swirl-discuss&#34;&gt;Google Group&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>easystats/easystats</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/easystats/easystats</id>
    <link href="https://github.com/easystats/easystats" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌌 The R easystats-project&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;em&gt;easystats&lt;/em&gt;: Jump in the Easyverse&lt;/h1&gt; &#xA;&lt;h1&gt;What is &lt;em&gt;easystats&lt;/em&gt;?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;easystats&lt;/strong&gt; is a collection of R packages, which aims to provide a unifying and consistent framework to tame, discipline, and harness the scary R statistics and their pesky models.&lt;/p&gt; &#xA;&lt;p&gt;However, there is not (yet) an &lt;em&gt;unique&lt;/em&gt; “easystats” way of doing data analysis. Instead, start with one package and, when you’ll face a new challenge, do check if there is an &lt;em&gt;easystats&lt;/em&gt; answer for it in other packages. You will slowly uncover how using them together facilitates your life. And, who knows, you might even end up using them all. &lt;em&gt;&lt;strong&gt;Gotta catch ’em all!&lt;/strong&gt;&lt;/em&gt; &#xA; &lt;!--&#xA;&#39;tis a pokémon reference for y&#39;all grandpas --&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/easystats/master/man/figures/logo_wall.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://easystats.r-universe.dev&#34;&gt;&lt;img src=&#34;https://easystats.r-universe.dev/badges/:registry&#34; alt=&#34;:registry status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://easystats.r-universe.dev&#34;&gt;&lt;img src=&#34;https://easystats.r-universe.dev/badges/:total&#34; alt=&#34;:total status badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The whole &lt;code&gt;easystats&lt;/code&gt; suite can be installed &lt;em&gt;at once&lt;/em&gt; with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;easystats&#34;, repos = &#34;https://easystats.r-universe.dev&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then load the entire ecosystem by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(&#34;easystats&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The package is currently not available on CRAN, but we are working on submitting it there soon.&lt;/p&gt; &#xA;&lt;p&gt;Finally, as &lt;em&gt;easystats&lt;/em&gt; sometimes depends on some additional packages for specific functions that are not downloaded by default. If you want to benefit from the &lt;strong&gt;full &lt;em&gt;easystats&lt;/em&gt; experience&lt;/strong&gt; without any hiccups, simply run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;easystats::install_suggested()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;Do you wish to cite &lt;em&gt;easystats&lt;/em&gt;? ❤️&lt;/p&gt; &#xA;&lt;p&gt;Have a look at this article on how you can do so! &lt;a href=&#34;https://easystats.github.io/easystats/articles/citation.html&#34;&gt;https://easystats.github.io/easystats/articles/citation.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;Each &lt;strong&gt;easystats&lt;/strong&gt; package has a different scope and purpose. This means your &lt;strong&gt;best way to start&lt;/strong&gt; is to explore and pick the one(s) that you feel might be useful to you. However, as they are built with a “bigger picture” in mind, you will realize that using more of them creates a smooth workflow, as these packages are meant to work together. Ideally, these packages work in unison to cover all aspects of statistical analysis and data visualization.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/report&#34;&gt;&lt;strong&gt;report&lt;/strong&gt;&lt;/a&gt;: 📜 🎉 Automated statistical reporting of objects in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/correlation&#34;&gt;&lt;strong&gt;correlation&lt;/strong&gt;&lt;/a&gt;: 🔗 Your all-in-one package to run correlations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/modelbased&#34;&gt;&lt;strong&gt;modelbased&lt;/strong&gt;&lt;/a&gt;: 📈 Estimate effects, group averages and contrasts between groups based on statistical models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/bayestestR&#34;&gt;&lt;strong&gt;bayestestR&lt;/strong&gt;&lt;/a&gt;: 👻 Great for beginners or experts of Bayesian statistics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/parameters&#34;&gt;&lt;strong&gt;parameters&lt;/strong&gt;&lt;/a&gt;: 📊 Obtain a table containing all information about the parameters of your models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/performance&#34;&gt;&lt;strong&gt;performance&lt;/strong&gt;&lt;/a&gt;: 💪 Models’ quality and performance metrics (R2, ICC, LOO, AIC, BF, …)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/effectsize&#34;&gt;&lt;strong&gt;effectsize&lt;/strong&gt;&lt;/a&gt;: 🐉 Compute, convert, interpret and work with indices of effect size and standardized parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/insight&#34;&gt;&lt;strong&gt;insight&lt;/strong&gt;&lt;/a&gt;: 🔮 For developers, a package to help you work with different models and packages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/see&#34;&gt;&lt;strong&gt;see&lt;/strong&gt;&lt;/a&gt;: 🎨 The plotting companion to create beautiful results visualizations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easystats/datawizard&#34;&gt;&lt;strong&gt;datawizard&lt;/strong&gt;&lt;/a&gt;: 🧙 Magic potions to clean and transform your data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Frequently Asked Questions&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;How is &lt;em&gt;easystats&lt;/em&gt; different from the &lt;em&gt;tidyverse&lt;/em&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You’ve probably already heard about the &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;&lt;/a&gt;, another very popular collection of packages (&lt;em&gt;ggplot&lt;/em&gt;, &lt;em&gt;dplyr&lt;/em&gt;, &lt;em&gt;tidyr&lt;/em&gt;, …) that also makes using R easier. So, should you pick the &lt;em&gt;tidyverse&lt;/em&gt; or &lt;em&gt;easystats&lt;/em&gt;? &lt;strong&gt;Pick both!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Indeed, these two ecosystems have been designed with very different goals in mind. The &lt;em&gt;tidyverse&lt;/em&gt; packages are primarily made to create a new R experience, where data manipulation and exploration is intuitive and consistent. On the other hand, &lt;strong&gt;easystats&lt;/strong&gt; focuses more on the final stretch of the analysis: understanding and interpreting your results and reporting them in a manuscript or a report, while following best practices. You can definitely use the &lt;em&gt;easystats&lt;/em&gt; functions in a &lt;em&gt;tidyverse&lt;/em&gt; workflow!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;easystats + tidyverse =&lt;/strong&gt; ❤️&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can &lt;em&gt;easystats&lt;/em&gt; be useful to advanced users and/or developers?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yes, definitely! &lt;strong&gt;easystats&lt;/strong&gt; is built in terms of modules that are general enough to be used inside other packages. For instance, the &lt;em&gt;insight&lt;/em&gt; package is made to easily implement support for post-processing of pretty much all regression model packages under the sun. We use it in all the &lt;em&gt;easystats&lt;/em&gt; packages, but it is also used in other non-easystats packages, such as &lt;a href=&#34;https://github.com/IndrajeetPatil/ggstatsplot&#34;&gt;&lt;strong&gt;ggstatsplot&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/vincentarelbundock/modelsummary/&#34;&gt;&lt;strong&gt;modelsummary&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/strengejacke/ggeffects&#34;&gt;&lt;strong&gt;ggeffects&lt;/strong&gt;&lt;/a&gt;, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;So why not in yours&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Moreover, the &lt;em&gt;easystats&lt;/em&gt; packages are very lightweight, with a minimal set of dependencies, which again makes it great if you want to rely on them.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;h2&gt;Websites&lt;/h2&gt; &#xA;&lt;p&gt;Each &lt;code&gt;easystats&lt;/code&gt; package has a dedicated website.&lt;/p&gt; &#xA;&lt;p&gt;For example, website for &lt;code&gt;parameters&lt;/code&gt; is &lt;a href=&#34;https://easystats.github.io/parameters/&#34;&gt;https://easystats.github.io/parameters/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blog&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the websites containing documentation for these packages, you can also read posts from &lt;code&gt;easystats&lt;/code&gt; blog: &lt;a href=&#34;https://easystats.github.io/blog/posts/&#34;&gt;https://easystats.github.io/blog/posts/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Other learning resources&lt;/h2&gt; &#xA;&lt;p&gt;In addition to these websites and blog posts, you can also check out the following presentations and talks to learn more about this ecosystem:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://easystats.github.io/easystats/articles/resources.html&#34;&gt;https://easystats.github.io/easystats/articles/resources.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;Most &lt;em&gt;easystats&lt;/em&gt; packages are very lightweight, &lt;em&gt;i.e.&lt;/em&gt;, they don’t rely nor import any other packages! This means that you can safely use them as dependencies in your own packages, without the risk of a butterfly effect, where a small change in a distant downstream dependency with unexpected upstream consequences.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/easystats/master/man/figures/depnetwork-1.png&#34; alt=&#34;&#34;&gt;&#xA; &lt;!-- --&gt;&lt;/p&gt; &#xA;&lt;p&gt;As we can see, the only exception is the &lt;a href=&#34;http://easystats.github.io/see&#34;&gt;&lt;strong&gt;see&lt;/strong&gt;&lt;/a&gt; package, one of our high-level packages that is responsible for plotting and creating figures, relying thus on other packages such as &lt;em&gt;ggplot2&lt;/em&gt;, which has a substantial number of dependencies.&lt;/p&gt; &#xA;&lt;h1&gt;Downloads&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Total&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;insight&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;bayestestR&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;parameters&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;performance&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;effectsize&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;datawizard&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;correlation&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;see&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;modelbased&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;report&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;easystats&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;8,236,322&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2,550,985&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1,216,014&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1,180,723&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1,108,696&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;923,178&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;698,868&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;233,464&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;209,252&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;80,942&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;34,200&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Trend&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/easystats/master/man/figures/unnamed-chunk-8-1.png&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;Cumulative downloads&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/easystats/master/man/figures/unnamed-chunk-9-1.png&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h3&gt;Average monthly downloads&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/easystats/easystats/master/man/figures/unnamed-chunk-10-1.png&#34; style=&#34;display: block; margin: auto;&#34;&gt; &#xA;&lt;h1&gt;Versioning&lt;/h1&gt; &#xA;&lt;p&gt;Package version numbers indicate following: &lt;code&gt;MAJOR.MINOR.PATCH.DEVELOPMENT&lt;/code&gt;. Here are key steps to keep in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;As long as packages are in a more or less rapidly developing and changing state, the &lt;strong&gt;major&lt;/strong&gt; version number is typically &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once we think we will have a stable base that will likely not change dramatically or soon, the major version number will be set to &lt;code&gt;1&lt;/code&gt;, and will be increased for following major changes that probably break the current API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When new features are added or (re)moved, we typically increase the &lt;strong&gt;minor&lt;/strong&gt; version number.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Minimal changes or bug fixes only are indicated by increasing the &lt;strong&gt;patch&lt;/strong&gt; version number.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Current development versions of our packages (i.e.&amp;nbsp;master/main branch from GitHub) additionally have a &lt;strong&gt;development&lt;/strong&gt; version number.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We are happy to receive bug reports, suggestions, questions, and (most of all) contributions to fix problems and add features. Pull Requests for contributions are encouraged.&lt;/p&gt; &#xA;&lt;p&gt;Here are some simple ways in which you can contribute (in the increasing order of commitment):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read and correct any inconsistencies in the documentation&lt;/li&gt; &#xA; &lt;li&gt;Raise issues about bugs or wanted features&lt;/li&gt; &#xA; &lt;li&gt;Review code&lt;/li&gt; &#xA; &lt;li&gt;Add new functionality&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;Please note that the ‘easystats’ project is released with a &lt;a href=&#34;https://easystats.github.io/easystats/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dataRufus/GaminatorRclass</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/dataRufus/GaminatorRclass</id>
    <link href="https://github.com/dataRufus/GaminatorRclass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A thorough R programming course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GaminatorRclass&lt;/h1&gt; &#xA;&lt;p&gt;A thorough R programming course&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tidyverse/dplyr</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/tidyverse/dplyr</id>
    <link href="https://github.com/tidyverse/dplyr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dplyr: A grammar of data manipulation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dplyr &lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tidyverse/dplyr/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;139&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=dplyr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/dplyr&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tidyverse/dplyr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/tidyverse/dplyr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/tidyverse/dplyr?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tidyverse/dplyr/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;mutate()&lt;/code&gt; adds new variables that are functions of existing variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;select()&lt;/code&gt; picks variables based on their names.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filter()&lt;/code&gt; picks cases based on their values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;summarise()&lt;/code&gt; reduces multiple values down to a single summary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arrange()&lt;/code&gt; changes the ordering of the rows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These all combine naturally with &lt;code&gt;group_by()&lt;/code&gt; which allows you to perform any operation “by group”. You can learn more about them in &lt;code&gt;vignette(&#34;dplyr&#34;)&lt;/code&gt;. As well as these single-table verbs, dplyr also provides a variety of two-table verbs, which you can learn about in &lt;code&gt;vignette(&#34;two-table&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to dplyr, the best place to start is the &lt;a href=&#34;https://r4ds.had.co.nz/transform.html&#34;&gt;data transformation chapter&lt;/a&gt; in R for data science.&lt;/p&gt; &#xA;&lt;h2&gt;Backends&lt;/h2&gt; &#xA;&lt;p&gt;In addition to data frames/tibbles, dplyr makes working with other computational backends accessible and efficient. Below is a list of alternative backends:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dtplyr.tidyverse.org/&#34;&gt;dtplyr&lt;/a&gt;: for large, in-memory datasets. Translates your dplyr code to high performance &lt;a href=&#34;https://rdatatable.gitlab.io/data.table/&#34;&gt;data.table&lt;/a&gt; code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dbplyr.tidyverse.org/&#34;&gt;dbplyr&lt;/a&gt;: for data stored in a relational database. Translates your dplyr code to SQL.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://spark.rstudio.com&#34;&gt;sparklyr&lt;/a&gt;: for very large datasets stored in &lt;a href=&#34;https://spark.apache.org&#34;&gt;Apache Spark&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The easiest way to get dplyr is to install the whole tidyverse:&#xA;install.packages(&#34;tidyverse&#34;)&#xA;&#xA;# Alternatively, install just dplyr:&#xA;install.packages(&#34;dplyr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development version&lt;/h3&gt; &#xA;&lt;p&gt;To get a bug fix or to use a feature from the development version, you can install the development version of dplyr from GitHub.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;tidyverse/dplyr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cheat Sheet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/main/data-transformation.pdf&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/cheatsheets/main/pngs/thumbnails/data-transformation-cheatsheet-thumbs.png&#34; width=&#34;630&#34; height=&#34;252&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dplyr)&#xA;&#xA;starwars %&amp;gt;% &#xA;  filter(species == &#34;Droid&#34;)&#xA;#&amp;gt; # A tibble: 6 × 14&#xA;#&amp;gt;   name   height  mass hair_color skin_color  eye_color birth_year sex   gender  &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &#xA;#&amp;gt; 1 C-3PO     167    75 &amp;lt;NA&amp;gt;       gold        yellow           112 none  masculi…&#xA;#&amp;gt; 2 R2-D2      96    32 &amp;lt;NA&amp;gt;       white, blue red               33 none  masculi…&#xA;#&amp;gt; 3 R5-D4      97    32 &amp;lt;NA&amp;gt;       white, red  red               NA none  masculi…&#xA;#&amp;gt; 4 IG-88     200   140 none       metal       red               15 none  masculi…&#xA;#&amp;gt; 5 R4-P17     96    NA none       silver, red red, blue         NA none  feminine&#xA;#&amp;gt; # … with 1 more row, and 5 more variables: homeworld &amp;lt;chr&amp;gt;, species &amp;lt;chr&amp;gt;,&#xA;#&amp;gt; #   films &amp;lt;list&amp;gt;, vehicles &amp;lt;list&amp;gt;, starships &amp;lt;list&amp;gt;&#xA;&#xA;starwars %&amp;gt;% &#xA;  select(name, ends_with(&#34;color&#34;))&#xA;#&amp;gt; # A tibble: 87 × 4&#xA;#&amp;gt;   name           hair_color skin_color  eye_color&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;    &#xA;#&amp;gt; 1 Luke Skywalker blond      fair        blue     &#xA;#&amp;gt; 2 C-3PO          &amp;lt;NA&amp;gt;       gold        yellow   &#xA;#&amp;gt; 3 R2-D2          &amp;lt;NA&amp;gt;       white, blue red      &#xA;#&amp;gt; 4 Darth Vader    none       white       yellow   &#xA;#&amp;gt; 5 Leia Organa    brown      light       brown    &#xA;#&amp;gt; # … with 82 more rows&#xA;&#xA;starwars %&amp;gt;% &#xA;  mutate(name, bmi = mass / ((height / 100)  ^ 2)) %&amp;gt;%&#xA;  select(name:mass, bmi)&#xA;#&amp;gt; # A tibble: 87 × 4&#xA;#&amp;gt;   name           height  mass   bmi&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;           &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 Luke Skywalker    172    77  26.0&#xA;#&amp;gt; 2 C-3PO             167    75  26.9&#xA;#&amp;gt; 3 R2-D2              96    32  34.7&#xA;#&amp;gt; 4 Darth Vader       202   136  33.3&#xA;#&amp;gt; 5 Leia Organa       150    49  21.8&#xA;#&amp;gt; # … with 82 more rows&#xA;&#xA;starwars %&amp;gt;% &#xA;  arrange(desc(mass))&#xA;#&amp;gt; # A tibble: 87 × 14&#xA;#&amp;gt;   name      height  mass hair_color skin_color eye_color birth_year sex   gender&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;          &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &#xA;#&amp;gt; 1 Jabba De…    175  1358 &amp;lt;NA&amp;gt;       green-tan… orange         600   herm… mascu…&#xA;#&amp;gt; 2 Grievous     216   159 none       brown, wh… green, y…       NA   male  mascu…&#xA;#&amp;gt; 3 IG-88        200   140 none       metal      red             15   none  mascu…&#xA;#&amp;gt; 4 Darth Va…    202   136 none       white      yellow          41.9 male  mascu…&#xA;#&amp;gt; 5 Tarfful      234   136 brown      brown      blue            NA   male  mascu…&#xA;#&amp;gt; # … with 82 more rows, and 5 more variables: homeworld &amp;lt;chr&amp;gt;, species &amp;lt;chr&amp;gt;,&#xA;#&amp;gt; #   films &amp;lt;list&amp;gt;, vehicles &amp;lt;list&amp;gt;, starships &amp;lt;list&amp;gt;&#xA;&#xA;starwars %&amp;gt;%&#xA;  group_by(species) %&amp;gt;%&#xA;  summarise(&#xA;    n = n(),&#xA;    mass = mean(mass, na.rm = TRUE)&#xA;  ) %&amp;gt;%&#xA;  filter(&#xA;    n &amp;gt; 1,&#xA;    mass &amp;gt; 50&#xA;  )&#xA;#&amp;gt; # A tibble: 8 × 3&#xA;#&amp;gt;   species      n  mass&#xA;#&amp;gt;   &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;&#xA;#&amp;gt; 1 Droid        6  69.8&#xA;#&amp;gt; 2 Gungan       3  74  &#xA;#&amp;gt; 3 Human       35  82.8&#xA;#&amp;gt; 4 Kaminoan     2  88  &#xA;#&amp;gt; 5 Mirialan     2  53.1&#xA;#&amp;gt; # … with 3 more rows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter a clear bug, please file an issue with a minimal reproducible example on &lt;a href=&#34;https://github.com/tidyverse/dplyr/issues&#34;&gt;GitHub&lt;/a&gt;. For questions and other discussion, please use &lt;a href=&#34;https://community.rstudio.com/&#34;&gt;community.rstudio.com&lt;/a&gt; or the &lt;a href=&#34;https://groups.google.com/d/forum/manipulatr&#34;&gt;manipulatr mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Please note that this project is released with a &lt;a href=&#34;https://dplyr.tidyverse.org/CODE_OF_CONDUCT&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>matloff/fasteR</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/matloff/fasteR</id>
    <link href="https://github.com/matloff/fasteR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast Lane to Learning R!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fasteR: Fast Lane to Learning R!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/prVis/master/data/SwissRoll/SWwithY.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;em&gt;&#34;Becoming productive in R, as fast as possible&#34;&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Norm Matloff, Prof. of Computer Science, UC Davis; &lt;a href=&#34;http://heather.cs.ucdavis.edu/matloff.html&#34;&gt;my bio&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;(See notice at the end of this document regarding copyright.)&lt;/p&gt; &#xA;&lt;p&gt;This site is for those who know nothing of R, and maybe even nothing of programming, and seek &lt;em&gt;QUICK, PAINLESS!&lt;/em&gt; entree to the world of R.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;FAST&lt;/strong&gt;: You&#39;ll already be doing good stuff in R -- useful data analysis -- in your very first lesson.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;For nonprogrammers:&lt;/strong&gt; If you&#39;re comfortable with navigating the Web and viewing charts, you&#39;re fine. This tutorial is aimed at you, not experienced C or Python coders.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Motivating:&lt;/strong&gt; Every lesson centers around a &lt;em&gt;real problem&lt;/em&gt; to be solved, on &lt;em&gt;real data&lt;/em&gt;. The lessons do &lt;em&gt;not&lt;/em&gt; consist of a few toy examples, unrelated to the real world. The material is presented in a conversational, story-telling manner.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Just the basics, no frills or polemics:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Notably, in the first few lessons, we do NOT use Integrated Development Environments (IDEs). RStudio, ESS etc. are great, but you shouldn&#39;t be burdened with learning R &lt;em&gt;and&lt;/em&gt; learning an IDE at the same time, a distraction from the goal of becoming productive in R as fast as possible.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Note that even the excellent course by &lt;a href=&#34;https://threadreaderapp.com/thread/1119025557830684673.html&#34;&gt;R-Ladies Sydney&lt;/a&gt;, which does start with RStudio, laments that RStudio can be &lt;strong&gt;&#34;way too overwhelming.&#34;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;So, in the initial lessons, we stick to the R command line, and focus on data analysis, not tools such as IDEs, which we will cover as an intermediate-level topic. (Some readers of this tutorial may already be using RStudio or an external editor, and the treatment here will include special instructions for them when needed.)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Coverage is mainly limited to base R. So for instance the popular but self-described &#34;opinionated&#34; Tidyverse is not treated at first, partly due to its controversial nature (I am a &lt;a href=&#34;http://github.com/matloff/TidyverseSkeptic&#34;&gt;skeptic&lt;/a&gt;), but again mainly because it would be an obstacle to your becoming productive in R quickly. A later lesson to be added will introduce Tidy (defined as &lt;strong&gt;dplyr&lt;/strong&gt; and pipes) and compare it to base-R.&lt;/p&gt; &lt;p&gt;While you can learn a few simple things in Tidy quickly, thinking you are learning a lot, those things are quite limited in scope, and Tidy learners often find difficulty in applying R to real world data. &lt;span style=&#34;color:red&#34;&gt; Our tutorial here is aimed at learners whose goal is to USE the R system productively in their own data analysis. &lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nonpassive approach:&lt;/strong&gt; Passive learning, just watching the screen, is NO learning. There will be occasional &lt;strong&gt;Your Turn&lt;/strong&gt; sections, in which you the learner must devise and try your own variants on what has been presented. Sometimes the tutorial will be give you some suggestions, but even then, you should cook up your own variants to try. &lt;span style=&#34;color:red&#34;&gt; Remember: You get out what you put in!&lt;/span&gt; The more actively you work the &lt;strong&gt;Your Turn&lt;/strong&gt; sections, the more powerful you will be as an R coder.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;PART I&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#overview&#34;&gt;Lesson 1: Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#firstr&#34;&gt;Lesson 2: First R Steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#vecidxs&#34;&gt;Lesson 3: Vectors and Indices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less2&#34;&gt;Lesson 4: More on Vectors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less3&#34;&gt;Lesson 5: On to Data Frames!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less4&#34;&gt;Lesson 6: The R Factor Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#extractdf&#34;&gt;Lesson 7: Extracting Rows/Columns from Data Frames&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#moreextract&#34;&gt;Lesson 8: More Examples of Extracting Rows, Columns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#tapply&#34;&gt;Lesson 9: The tapply Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less5&#34;&gt;Lesson 10: Data Cleaning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less6&#34;&gt;Lesson 11: The R List Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less7&#34;&gt;Lesson 12: Another Look at the Nile Data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#pause1&#34;&gt;Lesson 13: Pause to Reflect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less8&#34;&gt;Lesson 14: Introduction to Base R Graphics &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less9&#34;&gt;Lesson 15: More on Base Graphics &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less10&#34;&gt;Lesson 16: Writing Your Own Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less11&#34;&gt;Lesson 17: &#39;For&#39; Loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#ftnbl&#34;&gt;Lesson 18: Functions with Blocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#edt&#34;&gt;Lesson 19: Text Editing and IDes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#ifelse&#34;&gt;Lesson 20: If, Else, Ifelse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#keepfit&#34;&gt;Lesson 21: Do Pro Athletes Keep Fit?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#linreg1&#34;&gt;Lesson 22: Linear Regression Analysis, I&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#s3&#34;&gt;Lesson 23: S3 Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#less15&#34;&gt;Lesson 24: Baseball Player Analysis (cont&#39;d.)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#cran&#34;&gt;Lesson 25: R Packages, CRAN, Etc.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;PART II&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#advanced&#34;&gt;Lesson 26: A Pause, Before Going on to Advanced Topics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#gg2first&#34;&gt;Lesson 27: A First Look at ggplot2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#appfam&#34;&gt;Lesson 28: Should You Use Functional Programming?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#txt&#34;&gt;Lesson 29 Simple Text Processing, I&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#txt1&#34;&gt;Lesson 30: Simple Text Processing, II&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#linreg2&#34;&gt;Lesson 31: Linear Regression Analysis, II&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#dates&#34;&gt;Lesson 32: Working with the R Date Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#style&#34;&gt;Lesson 33: Tips on R Coding Style and Strategy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#logit&#34;&gt;Lesson 34: The Logistic Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#fd&#34;&gt;Lesson 35: Files and Directories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#whl&#34;&gt;Lesson 36: R &#39;while&#39; Loops&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#forMore&#34;&gt;To Learn More&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#thanks&#34;&gt;Thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#rstudio&#34;&gt;Appendix: Installing and Using RStudio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;overview&#34;&gt; &lt;/a&gt; Lesson 1: Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;For the time being, the main part of this online course will be this &lt;strong&gt;README.md&lt;/strong&gt; file. It is set up as a potential R package, though, and I may implement that later.&lt;/p&gt; &#xA;&lt;p&gt;The color figure at the top of this file was generated by our &lt;a href=&#34;https://github.com/matloff/prVis/&#34;&gt;&lt;strong&gt;prVis&lt;/strong&gt; package&lt;/a&gt;, run on a famous dataset called &lt;em&gt;Swiss Roll&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Please note again:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Nonpassive learning is absolutely key! So even if the output of an R command is shown here, run the command yourself in your R console, by copy-and-pasting from this document into the R console. &lt;span style=&#34;color:red&#34;&gt;You will get out of this tutorial what you put in.&lt;/span&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Similarly, the &lt;strong&gt;Your Turn&lt;/strong&gt; sections are absolutely crucial. Devise your own little examples, and try them! &#34;When in doubt, Try it out!&#34; is a motto I devised for teaching. If you are unclear or curious about something, try it out! Just devise a little experiment, and type in the code. Don&#39;t worry -- you won&#39;t &#34;break&#34; things.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; I cannot &lt;em&gt;teach&lt;/em&gt; you how to program. I can merely give you the tools, e.g. R vectors, and some examples. For a given desired programming task, then, you must creatively put these tools together to attain the goal. Treat it like a puzzle! I think you&#39;ll find that if you stick with it, you&#39;ll find you&#39;re pretty good at it. After all, we can all work puzzles.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Starting out:&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;ll need to &lt;a href=&#34;https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu&#34;&gt;install R&lt;/a&gt;, from &lt;a href=&#34;https://www.r-project.org&#34;&gt;the R Project site&lt;/a&gt;. Start up R, either by clicking an icon or typing &#39;R&#39; in a terminal window. We are not requiring RStudio here, but if you already have it, start it; you&#39;ll be typing into the R console, the Console pane.&lt;/p&gt; &#xA;&lt;p&gt;As noted, this tutorial will be &#34;bare bones.&#34; In particular, there is no script to type your command for you. Instead, you will either copy-and-paste from the text here into the R console, or type them there by hand. (Note that the code lines here will all begin with the R interactive prompt, &#39;&amp;gt;&#39;; that should not be typed.)&lt;/p&gt; &#xA;&lt;p&gt;This is a Markdown file. You can read it right there on GitHub, which has its own Markdown renderer. Or you can download it to your own machine in Chrome and use the Markdown Reader extension to view it (be sure to enable Allow Access to File URLs).&lt;/p&gt; &#xA;&lt;p&gt;When you end your R session, exit by typing &#39;quit()&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Good luck! And if you have any questions, feel free to e-mail me, at &lt;a href=&#34;mailto:matloff@cs.ucdavis.edu&#34;&gt;matloff@cs.ucdavis.edu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;firstr&#34;&gt; &lt;/a&gt; Lesson 2: First R Steps&lt;/h2&gt; &#xA;&lt;p&gt;The R command prompt is &#39;&amp;gt;&#39;. Again, it will be shown here, but you don&#39;t type it. It is just there in your R window to let you know R is inviting you to submit a command. (If you are using RStudio, you&#39;ll see it in the Console pane.)&lt;/p&gt; &#xA;&lt;p&gt;So, just type &#39;1+1&#39; then hit Enter. Sure enough, it prints out 2 (you were expecting maybe 12108?):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; 1 + 1&#xA;[1] 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But what is that &#39;[1]&#39; here? It&#39;s just a row label. We&#39;ll go into that later, not needed quite yet.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Nile River data&lt;/h3&gt; &#xA;&lt;p&gt;R includes a number of built-in datasets, mainly for illustration purposes. One of them is &lt;strong&gt;Nile&lt;/strong&gt;, 100 years of annual flow data on the Nile River.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s find the mean flow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(Nile)&#xA;[1] 919.35&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;strong&gt;mean&lt;/strong&gt; is an example of an R &lt;em&gt;function&lt;/em&gt;, and in this case Nile is an &lt;em&gt;argument&lt;/em&gt; -- fancy way of saying &#34;input&#34; -- to that function. That output, 919.35, is called the &lt;em&gt;return value&lt;/em&gt; or simply &lt;em&gt;value&lt;/em&gt;. The act of running the function is termed &lt;em&gt;calling&lt;/em&gt; the function.&lt;/p&gt; &#xA;&lt;p&gt;Another point to note is that we didn&#39;t need to call R&#39;s &lt;strong&gt;print&lt;/strong&gt; function. We could have typed,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; print(mean(Nile))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Function calls in R (and other languages) work &#34;from the inside out.&#34; Here we are asking R to find the mean of the Nile data, then print the result.&lt;/p&gt; &#xA;&lt;p&gt;But whenever we are at the R &#39;&amp;gt;&#39; prompt, any expression we type will be printed out anyway, so there is no need to call &lt;strong&gt;print&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since there are only 100 data points here, it&#39;s not unwieldy to print them out. Again, all we have to do is type ``Nile,&#39;&#39; no need to call &lt;strong&gt;print&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; Nile&#xA;Time Series:&#xA;Start = 1871 &#xA;End = 1970 &#xA;Frequency = 1 &#xA;  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020&#xA; [16]  960 1180  799  958 1140 1100 1210 1150 1250 1260 1220 1030 1100  774  840&#xA; [31]  874  694  940  833  701  916  692 1020 1050  969  831  726  456  824  702&#xA; [46] 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759&#xA; [61]  781  865  845  944  984  897  822 1010  771  676  649  846  812  742  801&#xA; [76] 1040  860  874  848  890  744  749  838 1050  918  986  797  923  975  815&#xA; [91] 1020  906  901 1170  912  746  919  718  714  740&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can see how the row labels work. There are 15 numbers per row here, so the second row starts with the 16th, indicated by &#39;[16]&#39;. The third row starts with the 31st output number, hence the &#39;[31]&#39; and so on.&lt;/p&gt; &#xA;&lt;p&gt;Note that a set of numbers such as &lt;strong&gt;Nile&lt;/strong&gt; is called a &lt;em&gt;vector&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;A first graph&lt;/h3&gt; &#xA;&lt;p&gt;R has great graphics, not only in base R but also in wonderful user-contributed packages, such as &lt;strong&gt;ggplot2&lt;/strong&gt; and &lt;strong&gt;lattice&lt;/strong&gt;. But we&#39;ll stick with base-R graphics for now, and save the more powerful yet more complex &lt;strong&gt;ggplot2&lt;/strong&gt; for a later lesson.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll start with a very simple, non-dazzling one, a no-frills histogram:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; hist(Nile)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No return value for the &lt;strong&gt;hist&lt;/strong&gt; function (there is one, but it is seldom used, and we won&#39;t go into it here), but it does create the graph.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/Nile.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; The &lt;strong&gt;hist&lt;/strong&gt; function draws 10 bins for this dataset in the histogram by default, but you can choose other values, by specifying an optional second argument to the function, named &lt;strong&gt;breaks&lt;/strong&gt;. E.g.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; hist(Nile,breaks=20)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;would draw the histogram with 20 bins. Try plotting using several different large and small values of the number of bins.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;strong&gt;hist&lt;/strong&gt; function, as with many R functions, has many different options, specifiable via various arguments. For now, we&#39;ll just keep things simple, and resist the temptation to explore them all. R has lots of online help, which you can access via &#39;?&#39;. E.g. typing&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; ?hist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will tell you to full story on all the options available for the &lt;strong&gt;hist&lt;/strong&gt; function. Again, there are far too many for you to digest for now (most users don&#39;t ever find a need for the more esoteric ones), but it&#39;s a vital resource to know.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Look at the online help for &lt;strong&gt;mean&lt;/strong&gt; and &lt;strong&gt;Nile&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;vecidxs&#34;&gt; &lt;/a&gt; Lesson 3: Vectors and Indices&lt;/h2&gt; &#xA;&lt;p&gt;Say we want to find the mean river flow after year 1950.&lt;/p&gt; &#xA;&lt;p&gt;The above output said that the &lt;strong&gt;Nile&lt;/strong&gt; series starts in 1871. That means 1951 will be the 81st year, and the 100th will be 1970. How do we designate the 81st through 100th elements in this data?&lt;/p&gt; &#xA;&lt;p&gt;Individual elements can be accessed using &lt;em&gt;subscripts&lt;/em&gt; or &lt;em&gt;indices&lt;/em&gt; (singular is &lt;em&gt;index&lt;/em&gt;), which are specified using brackets, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; Nile[2]&#xA;[1] 1160&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for the second element (the output we saw earlier shows that the second element is indeed 1160). The value 2 here is the index.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;c&lt;/strong&gt; (&#34;concatenate&#34;) function builds a vector, stringing several numbers together. E.g. we can get the 2nd, 5th and 6th elements of &lt;strong&gt;Nile&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; Nile[c(2,5,6)]&#xA;[1] 1160 1160 1160&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we wish to build a vector of &lt;em&gt;consecutive&lt;/em&gt; numbers, we can use the &#34;colon&#34; notation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; Nile[c(2,3,4)]&#xA;[1] 1160  963 1210&#xA;&amp;gt; Nile[2:4]&#xA;[1] 1160  963 1210&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, 2:4 is shorter way to specify the vector c(2,3,4).&lt;/p&gt; &#xA;&lt;p&gt;So, 81:100 means all the numbers from 81 to 100. Thus &lt;strong&gt;Nile[81:100]&lt;/strong&gt; specifies the 81st through 100th elements in the &lt;strong&gt;Nile&lt;/strong&gt; vector.&lt;/p&gt; &#xA;&lt;p&gt;Then to answer the above question on the mean flow during 1951-1971, we can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(Nile[81:100])&#xA;[1] 877.05&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Observe how the above reasoning process worked. We had a goal, to find the mean river flow after 1950. We knew we had some tools available to us, namely the &lt;strong&gt;mean&lt;/strong&gt; function and R vector indices. We then had to figure out a way to combine these tools in a manner that achieves our goal, which we did.&lt;/p&gt; &#xA; &lt;p&gt;This is how use of R works in general. As you go through this tutorial, you&#39;ll add more and more to your R &#34;toolbox.&#34; Then for any given goal, you&#39;ll rummage around in that toolbox, and eventually figure out the right set of tools for the goal at hand. Sometimes this will require some patience, but you&#39;ll find that the more you do, the more adept you become.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If we plan to do more with that time period, we should make a copy of it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; n81100 &amp;lt;- Nile[81:100]&#xA;&amp;gt; mean(n81100)&#xA;[1] 877.05&#xA;&amp;gt; sd(n81100)&#xA;[1] 125.5583&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function &lt;strong&gt;sd&lt;/strong&gt; finds the standard deviation.&lt;/p&gt; &#xA;&lt;p&gt;Note that we used R&#39;s &lt;em&gt;assignment operator&lt;/em&gt; here to copy (&#34;assign&#34;) those particular &lt;strong&gt;Nile&lt;/strong&gt; elements to &lt;strong&gt;n81100&lt;/strong&gt;. (In most situations, you can use &#34;=&#34; instead of &#34;&amp;lt;-&#34;, but why worry about what the exceptions might be? They are arcane, so it&#39;s easier just to always use &#34;&amp;lt;-&#34;. And though &#34;keyboard shortcuts&#34; for this are possible, again let&#39;s just stick to the basics for now.)&lt;/p&gt; &#xA;&lt;p&gt;Note too that though we will speak of the above operation as having &#34;extracted&#34; the 81st through 100th elements of &lt;strong&gt;Nile&lt;/strong&gt;, we have merely made a copy of those elements. The original vector &lt;strong&gt;Nile&lt;/strong&gt; remains intact.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; We can pretty much choose any name we want; &#34;n81100&#34; just was chosen to easily remember this new vector&#39;s provenance. (But names can&#39;t include spaces, and must start with a letter.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note that &lt;strong&gt;n81100&lt;/strong&gt; now is a 21-element vector. Its first element is now element 81 of &lt;strong&gt;Nile&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; n81100[1]&#xA;[1] 744&#xA;&amp;gt; Nile[81]&#xA;[1] 744&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that although &lt;strong&gt;Nile&lt;/strong&gt; and &lt;strong&gt;n81100&lt;/strong&gt; now have identical contents, they are &lt;em&gt;separate&lt;/em&gt; vectors; if one changes, the other will not.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Devise and try variants of the above, say finding the mean over the years 1945-1960.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Another oft-used function is &lt;strong&gt;length&lt;/strong&gt;, which gives the number of elements in the vector, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; length(Nile)&#xA;[1] 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can you guess the value of &lt;strong&gt;length(n81100)&lt;/strong&gt;? Type this expression in at the &#39;&amp;gt;&#39; prompt to check your answer.&lt;/p&gt; &#xA;&lt;p&gt;Leave R by typing &#39;q()&#39; or ctrl-d. (Answer no to saving the workspace.)&lt;/p&gt; &#xA;&lt;h3&gt;Recap: What have we learned in these first two lessons?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Starting and existing R.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some R functions: &lt;strong&gt;mean&lt;/strong&gt;, &lt;strong&gt;hist&lt;/strong&gt;, &lt;strong&gt;length&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;R vectors, and vector indices.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extracting vector subsets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Forming vectors, using &lt;strong&gt;c()&lt;/strong&gt; and &#34;:&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not bad for Lesson 1! And needless to say, you&#39;ll be using all of these frequently in the subsequent lessons and in your own usage of R.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less2&#34;&gt; &lt;/a&gt; Lesson 4: More on Vectors&lt;/h2&gt; &#xA;&lt;p&gt;Continuing along the Nile, say we would like to know in how many years the level exceeded 1200. Let&#39;s first introduce R&#39;s &lt;strong&gt;sum&lt;/strong&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; sum(c(5,12,13))&#xA;[1] 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the &lt;em&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;/em&gt; function built a vector consisting of 5, 12 and 13. That vector was then fed into the &lt;strong&gt;sum&lt;/strong&gt; function, returning 5+12+13 = 30.&lt;/p&gt; &#xA;&lt;p&gt;By the way, the above is our first example of &lt;em&gt;function composition&lt;/em&gt;, where the output of one function, &lt;em&gt;&lt;strong&gt;c&lt;/strong&gt;&lt;/em&gt; here, is fed as input into another, &lt;strong&gt;sum&lt;/strong&gt; in this case.&lt;/p&gt; &#xA;&lt;p&gt;We can now use this to answer our question on the &lt;strong&gt;Nile&lt;/strong&gt; data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; sum(Nile &amp;gt; 1200)&#xA;[1] 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The river level exceeded 1200 in 7 years.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;But how in the world did that work?&lt;/strong&gt; Bear with me a bit here. Let&#39;s look at a small example first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; x &amp;lt;- c(5,12,13)&#xA;&amp;gt; x&#xA;[1]  5 12 13&#xA;&amp;gt; x &amp;gt; 8&#xA;[1] FALSE  TRUE  TRUE&#xA;&amp;gt; sum(x &amp;gt; 8)&#xA;[1] 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, notice something odd here, in the expression &lt;strong&gt;x &amp;gt; 8&lt;/strong&gt;. Here &lt;strong&gt;x&lt;/strong&gt; is a vector, 3 elements in length, but 8 is just a number. It would seem that it&#39;s nnonsense to ask whether a vector is greater than a number; they&#39;re different animals.&lt;/p&gt; &#xA;&lt;p&gt;But R makes them &#34;the same kind&#34; of animal, by extending that number 8 to a 3-element vector 8,8,8. This is called &lt;em&gt;recycling&lt;/em&gt;. This sets up an element-by-element comparison: Then, the 5 in &lt;strong&gt;x&lt;/strong&gt; is compared to the first 8, yielding FALSE i.e. 5 is NOT greater than 8. Then 12 is compared to the second 8, yielding TRUE, and then the comparison of 13 to the third 8 yields another TRUE. So, we get the vector FALSE,TRUE,TRUE.&lt;/p&gt; &#xA;&lt;p&gt;Fine, but how will &lt;strong&gt;sum&lt;/strong&gt; add up some TRUEs and FALSEs? The answer is that R, like most computer languages, treats TRUE and FALSE as 1 and 0, respectively. So we summed the vector (0,1,1), yielding 2.&lt;/p&gt; &#xA;&lt;p&gt;Getting back to the question of the number of years in which the Nile flow exceeded 1200, let&#39;s look at that expression again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; sum(Nile &amp;gt; 1200)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the vector &lt;strong&gt;Nile&lt;/strong&gt; has length 100, that number 1200 will be recycled into a vector of one hundred copies of 1200. The &#39;&amp;gt;&#39; comparison will then yield 100 TRUEs and FALSEs, so summing gives us the number of TRUEs, exactly what we want.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Try a few other experiments of your choice using &lt;strong&gt;sum&lt;/strong&gt;. I&#39;d suggest starting with finding the sum of the first 25 elements in &lt;strong&gt;Nile&lt;/strong&gt;. You may wish to start with experiments on a small vector, say (2,1,1,6,8,5), so you will know that your answers are correct. Remember, you&#39;ll learn best nonpassively. Code away!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A question related to &lt;em&gt;how many&lt;/em&gt; years had a flow above 1200 is &lt;em&gt;which&lt;/em&gt; years had that property. Well, R actually has a &lt;strong&gt;which&lt;/strong&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; which(Nile &amp;gt; 1200)&#xA;[1]  4  8  9 22 24 25 26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So the 4th, 8th, 9th etc. elements in &lt;strong&gt;Nile&lt;/strong&gt; had the queried property. (Note that those were years 1875, 1879 and so on.)&lt;/p&gt; &#xA;&lt;p&gt;In fact, that gives us another way to get the count of the years with that trait:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; which1200 &amp;lt;- which(Nile &amp;gt; 1200)&#xA;&amp;gt; which1200&#xA;[1]  4  8  9 22 24 25 26&#xA;&amp;gt; length(which1200)&#xA;[1] 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, as usual, my choice of the variable name &#34;which1200&#34; was arbirary, just something to help me remember what is stored in that variable.&lt;/p&gt; &#xA;&lt;p&gt;R&#39;s &lt;strong&gt;length&lt;/strong&gt; function does what it says, i.e. finding the length of a vector. In our context, that gives us the count of years with flow above 1200.&lt;/p&gt; &#xA;&lt;p&gt;And, what were the river flows in those 7 years?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; which1200 &amp;lt;- which(Nile &amp;gt; 1200)&#xA;&amp;gt; Nile[which1200]&#xA;[1] 1210 1230 1370 1210 1250 1260 1220&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, something a little fancier. We can combine steps above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; Nile[Nile &amp;gt; 1200]&#xA;[1] 1210 1230 1370 1210 1250 1260 1220&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We just &#34;eliminated the middle man,&#34; &lt;strong&gt;which1200&lt;/strong&gt;. The R interpreter saw our &#34;Nile &amp;gt; 1200&#34;, and thus generated the corresponding TRUEs and FALSEs. The R interpreter then treated those TRUEs and FALSEs as subscripts in &lt;strong&gt;Nile&lt;/strong&gt;, thus extracting the desired data.&lt;/p&gt; &#xA;&lt;p&gt;Now, we might add here, &#34;Don&#39;t try this at home, kids.&#34; For beginners, it&#39;s really easier and more comfortable to break things into steps. Once, you become experienced at R, you may wish to start skipping steps.&lt;/p&gt; &#xA;&lt;p&gt;Less bold is the notion of negative indices, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; x &amp;lt;- c(5,12,13,8)&#xA;&amp;gt; x[-1]  &#xA;[1] 12 13  8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we are asking for all of &lt;strong&gt;x&lt;/strong&gt; &lt;em&gt;except&lt;/em&gt; for &lt;strong&gt;x[1]&lt;/strong&gt;. Can you guess what &lt;strong&gt;x[c(-1,-4)]&lt;/strong&gt; evaluates to? Guess first, then try it out.&lt;/p&gt; &#xA;&lt;h3&gt;Recap: What have we learned in this lesson?&lt;/h3&gt; &#xA;&lt;p&gt;Here you&#39;ve refined your skillset for R vectors, learning R&#39;s recycling feature, and two tricks that R users employ for finding counts of things.&lt;/p&gt; &#xA;&lt;p&gt;Once again, as you progress through this tutorial, you&#39;ll see that these things are used a lot in R.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less3&#34;&gt; &lt;/a&gt; Lesson 5: On to Data Frames!&lt;/h2&gt; &#xA;&lt;p&gt;Right after vectors, the next major workhorse of R is the &lt;em&gt;data frame&lt;/em&gt;. It&#39;s a rectangular table consisting of one row for each data point.&lt;/p&gt; &#xA;&lt;p&gt;Say we have height, weight and age on each of 100 people. Our data frame would have 100 rows and 3 columns. The entry in, e.g., the second row and third column would be the age of the second person in our data. The second row as a whole would be all the data for that second person, i.e. the height, weight and age of that person.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that that row would also be cnsidered a vector. The third column as a whole would be the vector of all ages in our dataset.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;As our first example, consider the &lt;strong&gt;ToothGrowth&lt;/strong&gt; dataset built-in to R. Again, you can read about it in the online help by typing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; ?ToothGrowth&#xA;``` (The data turn out to be on guinea pigs, with orange juice or&#xA;Vitamin C as growth supplements.)  Let&#39;s take a quick look from the&#xA;command line.&#xA;&#xA;``` r&#xA;&amp;gt; head(ToothGrowth)&#xA;   len supp dose&#xA;1  4.2   VC  0.5&#xA;2 11.5   VC  0.5&#xA;3  7.3   VC  0.5&#xA;4  5.8   VC  0.5&#xA;5  6.4   VC  0.5&#xA;6 10.0   VC  0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;R&#39;s &lt;strong&gt;head&lt;/strong&gt; function displays (by default) the first 6 rows of the given dataframe. We see there are length, supplement and dosage columns, which the curator of the data decided to name &#39;len&#39;, &#39;supp&#39; and &#39;dose&#39;. Each of column is an R vector, or in the case of the second column, a vector-like object called a &lt;em&gt;factor&lt;/em&gt;, to be discussed shortly).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; To avoid writing out the long words repeatedly, it&#39;s handy to make a copy with a shorter name.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tg &amp;lt;- ToothGrowth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dollar signs are used to denote the individual columns, e.g. &lt;strong&gt;ToothGrowth$dose&lt;/strong&gt; for the dose column. So for instance, we can print out the mean tooth length:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(tg$len)&#xA;[1] 18.81333&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subscripts/indices in data frames are pairs, specifying row and column numbers. To get the element in row 3, column 1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tg[3,1]&#xA;[1] 7.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which matches what we saw above in our &lt;strong&gt;head&lt;/strong&gt; example. Or, use the fact that &lt;strong&gt;tg$len&lt;/strong&gt; is a vector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tg$len[3]&#xA;[1] 7.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The element in row 3, column 1 in the &lt;em&gt;data frame&lt;/em&gt; &lt;strong&gt;tg&lt;/strong&gt; is element 3 in the &lt;em&gt;vector&lt;/em&gt; &lt;strong&gt;tg$letn&lt;/strong&gt;. This duality between data frames and vectors is often exploited in R.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; The above examples are fundamental to R, so you should conduct a few small experiments on your own this time, little variants of the above. The more you do, the better!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For any subset of a data frame &lt;strong&gt;d&lt;/strong&gt;, we can extract whatever rows and columns we want using the format&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[the rows we want, the columns we want]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some data frames don&#39;t have column names, but that is no obstacle. We can use column numbers, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(tg[,1])&#xA;[1] 18.81333&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the expression &#39;[,1]&#39;. Since there is a 1 in the second position, we are talking about column 1. And since the first position, before the comma, is empty, no rows are specified -- so &lt;em&gt;all&lt;/em&gt; rows are included. That boils down to: all of column 1.&lt;/p&gt; &#xA;&lt;p&gt;A key feature of R is that one can extract subsets of data frames, just as we extracted subsets of vectors earlier. For instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; z &amp;lt;- tg[2:5,c(1,3)]&#xA;&amp;gt; z&#xA;   len dose&#xA;2 11.5  0.5&#xA;3  7.3  0.5&#xA;4  5.8  0.5&#xA;5  6.4  0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we extracted rows 2 through 5, and columns 1 and 3, assigning the result to &lt;strong&gt;z&lt;/strong&gt;. To extract those columns but keep all rows, do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; y &amp;lt;- tg[ ,c(1,3)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;i.e. leave the row specification field empty.&lt;/p&gt; &#xA;&lt;p&gt;By the way, note that the three columns are all of the same length, a requirement for data frames. And what is that common length in this case? R&#39;s &lt;strong&gt;nrow&lt;/strong&gt; function tells us the number of rows in any data frame:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; nrow(ToothGrowth)&#xA;[1] 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ah, 60 rows (60 guinea pigs, 3 measurements each).&lt;/p&gt; &#xA;&lt;p&gt;Or, alternatively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tg &amp;lt;- ToothGrowth&#xA;&amp;gt; length(tg$len)&#xA;[1] 60&#xA;&amp;gt; length(tg$supp)&#xA;[1] 60&#xA;&amp;gt; length(tg$dose)&#xA;[1] 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So now you know four ways to do the same thing. But isn&#39;t one enough? Of course. But in this get-acquainted period, reading all four will help reinforce the knowledge you are now accumulating about R. So, &lt;em&gt;make sure you understand how each of those four approaches produced the number 60.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;head&lt;/strong&gt; function works on vectors too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt;  head(ToothGrowth$len)&#xA;[1]  4.2 11.5  7.3  5.8  6.4 10.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Like many R functions, &lt;strong&gt;head&lt;/strong&gt; has an optional second argument, specifying how many elements to print:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(ToothGrowth$len,10)&#xA; [1]  4.2 11.5  7.3  5.8  6.4 10.0 11.2 11.2  5.2  7.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create your own data frames -- good for devising little tests of your understanding -- as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; x &amp;lt;- c(5,12,13)&#xA;&amp;gt; y &amp;lt;- c(&#39;abc&#39;,&#39;de&#39;,&#39;z&#39;)&#xA;&amp;gt; d &amp;lt;- data.frame(x,y)&#xA;&amp;gt; d&#xA;   x   y&#xA;1  5 abc&#xA;2 12  de&#xA;3 13   z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look at that second line! Instead of vectors consisting of numbers, one can form vectors of character strings, complete with indexing capability, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; y &amp;lt;- c(&#39;abc&#39;,&#39;de&#39;,&#39;z&#39;)&#xA;&amp;gt; y[2]&#xA;[1] &#34;de&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As noted, all the columns in a data frame must be of the same length. Here &lt;strong&gt;x&lt;/strong&gt; consists of 3 numbers, and &lt;strong&gt;y&lt;/strong&gt; consists of 3 character strings. (The string is the unit in the latter. The number of characters in each string is irrelevant.)&lt;/p&gt; &#xA;&lt;p&gt;One can use negative indices for rows and columns as well, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; z &amp;lt;- tg[,-2]&#xA;&amp;gt; head(z)&#xA;   len dose&#xA;1  4.2  0.5&#xA;2 11.5  0.5&#xA;3  7.3  0.5&#xA;4  5.8  0.5&#xA;5  6.4  0.5&#xA;6 10.0  0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Devise your own little examples with the &lt;strong&gt;ToothGrowth&lt;/strong&gt; data. For instance, write code that finds the number of cases in which the tooth length was less than 16. Also, try some examples with another built-in R dataset, &lt;strong&gt;faithful&lt;/strong&gt;. This one involves the Old Faithful geyser in Yellowstone National Park in the US. The first column gives duration of the eruption, and the second has the waiting time since the last eruption. As mentioned, these operations are key features of R, so devise and run as many examples as possible; err on the side of doing too many!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Recap: What have we learned in this lesson?&lt;/h3&gt; &#xA;&lt;p&gt;As mentioned, the data frame is the fundamental workhorse of R. It is made up of columns of vectors (of equal lengths), a fact that often comes in handy.&lt;/p&gt; &#xA;&lt;p&gt;Unlike the single-number indices of vectors, each element in a data frame has 2 indices, a row number and a column number. One can specify sets of rows and columns to extra subframes.&lt;/p&gt; &#xA;&lt;p&gt;One can use the R &lt;strong&gt;nrow&lt;/strong&gt; function to query the number of rows in a data frame; &lt;strong&gt;ncol&lt;/strong&gt; does the same for the number of columns.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less4&#34;&gt; &lt;/a&gt; Lesson 6: R Factor Class&lt;/h2&gt; &#xA;&lt;p&gt;Each object in R has a &lt;em&gt;class&lt;/em&gt;. The number 3 is of the &lt;strong&gt;&#39;numeric&#39;&lt;/strong&gt; class, the character string &#39;abc&#39; is of the &lt;strong&gt;&#39;character&#39;&lt;/strong&gt; class, and so on. (In R, class names are quoted; one can use single or double quotation marks.) Note that vectors of numbers are of &lt;strong&gt;&#39;numeric&#39;&lt;/strong&gt; class too; actually, a single number is considered to be a vector of length 1. So, &lt;strong&gt;c(&#39;abc&#39;,&#39;xw&#39;)&lt;/strong&gt;, for instance, is &lt;strong&gt;&#39;character&#39;&lt;/strong&gt; as well.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Computers require one to be very, very careful and very, very precise. In that expression &lt;strong&gt;c(&#39;abc&#39;,&#39;xw&#39;)&lt;/strong&gt; above, one might wonder why it does not evaluate to &#39;abcxw&#39;. After all, didn&#39;t I say that the &#39;c&#39; stands for &#34;concatenate&#34;? Yes, but the &lt;strong&gt;c&lt;/strong&gt; function concatenates &lt;em&gt;vectors&lt;/em&gt;. Here &#39;abc&#39; is a vector of length 1 -- we have &lt;em&gt;one&lt;/em&gt; character string, and the fact that it consists of 3 characters is irrelevant -- and likewise &#39;xw&#39; is one character string. So, we are concatenating a 1-element vector with another 1-element vector, resulting in a 2-element vector.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;What about &lt;strong&gt;tg&lt;/strong&gt; and &lt;strong&gt;tg$supp&lt;/strong&gt; in the Vitamin C example above? What are their classes?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; class(tg)&#xA;[1] &#34;data.frame&#34;&#xA;&amp;gt; class(tg$supp)&#xA;[1] &#34;factor&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;R factors are used when we have &lt;em&gt;categorical&lt;/em&gt; variables. If in a genetics study, say, we have a variable for hair color, that might comprise four categories: black, brown, red, blond. We can find the list of categories for &lt;strong&gt;tg$supp&lt;/strong&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; levels(tg$supp)&#xA;[1] &#34;OJ&#34; &#34;VC&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The categorical variable here is &lt;strong&gt;supp&lt;/strong&gt;, the name the creator of this dataset chose for the supplement column. We see that there are two categories (&lt;em&gt;levels&lt;/em&gt;), either orange juice or Vitamin C.&lt;/p&gt; &#xA;&lt;p&gt;Note carefully that the values of an R factor must be quoted. Either single or double quote marks is fine (though the marks don&#39;t show up when we use &lt;strong&gt;head&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Factors can sometimes be a bit tricky to work with, but the above is enough for now. Let&#39;s see how to apply the notion in the current dataset.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;extractdf&#34;&gt; &lt;/a&gt; Lesson 7: Extracting Rows/Columns from Data Frames&lt;/h2&gt; &#xA;&lt;p&gt;(The reader should cover this lesson especially slowly and carefully. The concepts are simple, but putting them together requires careful inspection.)&lt;/p&gt; &#xA;&lt;p&gt;First, let&#39;s review what we saw in a previous lesson:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; which1200 &amp;lt;- which(Nile &amp;gt; 1200)&#xA;&amp;gt; Nile[which1200]&#xA;[1] 1210 1230 1370 1210 1250 1260 1220&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There, we saw how to extract &lt;em&gt;vector elements&lt;/em&gt;. We can do something similar to extract &lt;em&gt;data frame rows or columns&lt;/em&gt;. Here is how:&lt;/p&gt; &#xA;&lt;p&gt;Continuing the Vitamin C example, let&#39;s compare mean tooth length for the two types of supplements. Here is the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; whichOJ &amp;lt;- which(tg$supp == &#39;OJ&#39;)&#xA;&amp;gt; whichVC &amp;lt;- which(tg$supp == &#39;VC&#39;)&#xA;&amp;gt; mean(tg[whichOJ,1])&#xA;[1] 20.66333&#xA;&amp;gt; mean(tg[whichVC,1])&#xA;[1] 16.96333&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the first two lines above, we found which rows in &lt;strong&gt;tg&lt;/strong&gt; (or equivalently, which elements in &lt;strong&gt;tg$supp&lt;/strong&gt;) had the OJ supplement, and recorded those row numbers in &lt;strong&gt;whichOJ&lt;/strong&gt;. Then we did the same for VC.&lt;/p&gt; &#xA;&lt;p&gt;Now, look at the expression &lt;strong&gt;tg[whichOJ,1]&lt;/strong&gt;. Remember, data frames are accessed with two subscript expressions, one for rows, one for colums, in the format&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d[the rows we want, the columns we want]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, &lt;strong&gt;tg[whichOJ,1]&lt;/strong&gt; says to restrict attention to the OJ rows, and only column 1, tooth length. We then find the mean of those restricted numberss. This turned out to be 20.66333. Then do the same for VC.&lt;/p&gt; &#xA;&lt;p&gt;Again, if we are pretty experienced, we can skip steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tgoj &amp;lt;- tg[tg$supp == &#39;OJ&#39;,]&#xA;&amp;gt; tgvc &amp;lt;- tg[tg$supp == &#39;VC&#39;,]&#xA;&amp;gt; mean(tgoj$len)&#xA;[1] 20.66333&#xA;&amp;gt; mean(tgvc$len)&#xA;[1] 16.96333&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Either way, we have the answer to our original question: Orange juice appeared to produce more growth than Vitamin C. (Of course, one might form a confidence interval for the difference etc.)&lt;/p&gt; &#xA;&lt;h3&gt;Recap: What have we learned in this lesson?&lt;/h3&gt; &#xA;&lt;p&gt;Just as we learned earlier how to use a sequence of TRUE and FALSE values to extract a parts of a vector, we now see how to do the analogous thing for data frames: &lt;strong&gt;We can use a sequence of TRUE and FALSE values to extract a certain rows or columns from a data frame.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is imperative that the reader fully understand this lesson before continuing, trying some variations of the above example on his/her own. We&#39;ll be using this technique often in this tutorial, and it is central to R usage in the real world.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your turn:&lt;/strong&gt; Try some of these operations on R&#39;s built-in &lt;strong&gt;faithful&lt;/strong&gt; dataset. For instance, find the number of eruptions for which the waiting time was more than 80 minutes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;moreextract&#34;&gt; &lt;/a&gt; Lesson 8: More Examples of Extracting Rows, Columns&lt;/h2&gt; &#xA;&lt;p&gt;Often we need to extract rows or columns from a data frame, subject to more than one condition. For instance, say we wish to extract from &lt;strong&gt;tg&lt;/strong&gt; the sub-data frame consisting of OJ and length less than 8.8.&lt;/p&gt; &#xA;&lt;p&gt;We could do this, using the ampersand symbol &#39;&amp;amp;&#39;, which means a logical AND operation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tg[tg$supp==&#39;OJ&#39; &amp;amp; tg$len &amp;lt; 8.8,]&#xA;   len supp dose&#xA;37 8.2   OJ  0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ah, it turns out that only one case satisfied both conditions.&lt;/p&gt; &#xA;&lt;p&gt;If we want all rows that satisfy at least one of the conditions, not necessarily both, then we use the OR operator, &#39;|&#39;. Say we want to obtain all rows in which either &lt;strong&gt;len&lt;/strong&gt; is greater than 28 or the treatment dose was 1.0 or both:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tg[tg$len &amp;gt; 28 | tg$dose == 1.0,]&#xA;    len supp dose&#xA;11 16.5   VC    1&#xA;12 16.5   VC    1&#xA;13 15.2   VC    1&#xA;14 17.3   VC    1&#xA;15 22.5   VC    1&#xA;16 17.3   VC    1&#xA;17 13.6   VC    1&#xA;18 14.5   VC    1&#xA;19 18.8   VC    1&#xA;20 15.5   VC    1&#xA;23 33.9   VC    2&#xA;26 32.5   VC    2&#xA;30 29.5   VC    2&#xA;41 19.7   OJ    1&#xA;42 23.3   OJ    1&#xA;43 23.6   OJ    1&#xA;44 26.4   OJ    1&#xA;45 20.0   OJ    1&#xA;46 25.2   OJ    1&#xA;47 25.8   OJ    1&#xA;48 21.2   OJ    1&#xA;49 14.5   OJ    1&#xA;50 27.3   OJ    1&#xA;56 30.9   OJ    2&#xA;59 29.4   OJ    2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, note that the original row numbers are displayed too. For example, the first case satisfying the conditions was row number 11 in the original data frame &lt;strong&gt;tg&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; w &amp;lt;- tg[tg$len &amp;gt; 28 | tg$dose == 1.0,]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Again, I chose the name &#39;w&#39; arbitrarily. Names must begin with a letter, and consist only of letters, digits and a few special characters such as &#39;-&#39; or &#39;.&#39;&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;strong&gt;w&lt;/strong&gt; is a new data frame, on which we can perform the usual operations, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(w)&#xA;    len supp dose&#xA;11 16.5   VC    1&#xA;12 16.5   VC    1&#xA;13 15.2   VC    1&#xA;14 17.3   VC    1&#xA;15 22.5   VC    1&#xA;16 17.3   VC    1&#xA;&amp;gt; nrow(w)&#xA;[1] 25&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We may only be interested in say, &lt;em&gt;how many&lt;/em&gt; cases satisfied the given conditions. As before, we can use &lt;strong&gt;nrow&lt;/strong&gt; for that, as seen here.&lt;/p&gt; &#xA;&lt;p&gt;As seen early, we can also extract columns. Say our analysis will use only tooth length and dose. We write &#39;c(1,3)&#39; in the &#34;what columns we want&#34; place, indicating columns 1 and 3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; lendose &amp;lt;- tg[,c(1,3)]&#xA;&amp;gt; head(lendose)&#xA;   len dose&#xA;1  4.2  0.5&#xA;2 11.5  0.5&#xA;3  7.3  0.5&#xA;4  5.8  0.5&#xA;5  6.4  0.5&#xA;6 10.0  0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From now on, we would work with &lt;strong&gt;lendose&lt;/strong&gt; instead of &lt;strong&gt;tg&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a little nicer, though, the specify the columns by name instead of number:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; lendose &amp;lt;- tg[,c(&#39;len&#39;,&#39;dose&#39;)]&#xA;&amp;gt; head(lendose)&#xA;   len dose&#xA;1  4.2  0.5&#xA;2 11.5  0.5&#xA;3  7.3  0.5&#xA;4  5.8  0.5&#xA;5  6.4  0.5&#xA;6 10.0  0.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The logical operations work on vectors too. For example, say in the &lt;strong&gt;Nile&lt;/strong&gt; data we wish to know how many years had flows in the extremes, say below 500 or above 1200:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; exts &amp;lt;- Nile[Nile &amp;lt; 800 | Nile &amp;gt; 1300]&#xA;&amp;gt; head(exts)&#xA;[1] 1370  799  774  694  701  692&#xA;&amp;gt; length(exts)&#xA;[1] 27&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, if this count were our only interest, i.e. we have no further use for &lt;strong&gt;exts&lt;/strong&gt;, we can skip assigning to &lt;strong&gt;exts&lt;/strong&gt;, and do things directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; length(Nile[Nile &amp;lt; 800 | Nile &amp;gt; 1300])&#xA;[1] 27&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is fine for advanced, experienced R users, but really, &#34;one step at a time&#34; is better for beginners.&lt;/p&gt; &#xA;&lt;h3&gt;Recap: What we&#39;ve learned in this lesson&lt;/h3&gt; &#xA;&lt;p&gt;Here we got more practice in manipulating data frames, and were introduced to the logical operators &#39;&amp;amp;&#39; and &#39;|&#39;. We also saw another example of using &lt;strong&gt;nrow&lt;/strong&gt; as a means of counting how many rows satisfy given conditions.&lt;/p&gt; &#xA;&lt;p&gt;Again, these are all &#34;bread and butter&#34; operations that arise quite freqently in real world R usage.&lt;/p&gt; &#xA;&lt;p&gt;By the way, note how the essence of R is &#34;combining little things in order to do big things,&#34; e.g. combining the subsetting operation, the &#39;&amp;amp;&#39; operator, and &lt;strong&gt;nrow&lt;/strong&gt; to get a count of rows satisfying given conditions. This too is the &#34;bread and butter&#34; of R. It&#39;s up to you, the R user, to creatively combine R&#39;s little operations (and later, some big ones) to achieve whatever goals you have for your data. &lt;em&gt;Programming is a creative process&lt;/em&gt;. It&#39;s like a grocery store and cooking: The store has lots of different potential ingredients, and you decide which ones to buy and combine into a meal.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your turn:&lt;/strong&gt; Try some of these operations on R&#39;s built-in &lt;strong&gt;faithful&lt;/strong&gt; dataset. For instance, find the number of eruptions for which &#39;eruptions&#39; was greater than 3 and waiting time was more than 80 minutes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;tapply&#34;&gt; &lt;/a&gt; Lesson 9: The tapply Function&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Often in R there is a shorter, more compact way of doing things. That&#39;s the case here; we can use the magical &lt;strong&gt;tapply&lt;/strong&gt; function in the above example. In fact, we can do it in just one line.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tapply(tg$len,tg$supp,mean)&#xA;      OJ       VC &#xA;20.66333 16.96333 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In English: &#34;Split the vector &lt;strong&gt;tg$len&lt;/strong&gt; into two groups, according to the value of &lt;strong&gt;tg$supp&lt;/strong&gt;, then apply &lt;strong&gt;mean&lt;/strong&gt; to each group.&#34; Note that the result was returned as a vector, which we could save by assigning it to, say &lt;strong&gt;z&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; z &amp;lt;- tapply(tg$len,tg$supp,mean)&#xA;&amp;gt; z[1]&#xA;      OJ &#xA;20.66333 &#xA;&amp;gt; z[2]&#xA;      VC &#xA;16.96333 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, &lt;strong&gt;z&lt;/strong&gt; is not only a vector, but also a &lt;em&gt;named&lt;/em&gt; vector, meaning that its elements have names, in this case &#39;OJ&#39; and &#39;VC&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Saving can be quite handy, because we can use that result in subsequent code.&lt;/p&gt; &#xA;&lt;p&gt;To make sure it is clear how this works, let&#39;s look at a small artificial example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; x &amp;lt;- c(8,5,12,13)&#xA;&amp;gt; g &amp;lt;- c(&#39;M&#39;,&#34;F&#34;,&#39;M&#39;,&#39;M&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suppose &lt;strong&gt;x&lt;/strong&gt; is the ages of some kids, who are a boy, a girl, then two more boys, as indicated in &lt;strong&gt;g&lt;/strong&gt;. For instance, the 5-year-old is a girl.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s call &lt;strong&gt;tapply&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tapply(x,g,mean)&#xA; F  M &#xA; 5 11 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That call said, &#34;Split &lt;strong&gt;x&lt;/strong&gt; into two piles, according to the corresponding elements of &lt;strong&gt;g&lt;/strong&gt;, and then find the mean in each pile.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is no accident that &lt;strong&gt;x&lt;/strong&gt; and &lt;strong&gt;g&lt;/strong&gt; had the same number of elements above, 4 each. If on the contrary, &lt;strong&gt;g&lt;/strong&gt; had 5 elements, that fifth element would be useless -- the gender of a nonexistent fifth child&#39;s age in &lt;strong&gt;x&lt;/strong&gt;. Similarly, it wouldn&#39;t be right if &lt;strong&gt;g&lt;/strong&gt; had had only 3 elements, apparently leaving the fourth child without a specified gender.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; If &lt;strong&gt;g&lt;/strong&gt; had been of the wrong length, we would have gotten an error, &#34;Arguments must be of the same length.&#34; This is a common error in R code, so watch out for it, keeping in mind WHY the lengths must be the same.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Instead of &lt;strong&gt;mean&lt;/strong&gt;, we can use any function as that third argument in &lt;strong&gt;tapply&lt;/strong&gt;. Here is another example, using the built-in dataset &lt;strong&gt;PlantGrowth&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; tapply(PlantGrowth$weight,PlantGrowth$group,length)&#xA;ctrl trt1 trt2 &#xA;  10   10   10 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;strong&gt;tapply&lt;/strong&gt; split the &lt;strong&gt;weight&lt;/strong&gt; vector into subsets according to the &lt;strong&gt;group&lt;/strong&gt; variable, then called the &lt;strong&gt;length&lt;/strong&gt; function on each subset. We see that each subset had length 10, i.e. the experiment had assigned 10 plants to the control, 10 to treatment 1 and 10 to treatment 2.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; One of the most famous built-in R datasets is &lt;strong&gt;mtcars&lt;/strong&gt;, which has various measurements on cars from the 60s and 70s. Lots of opportunties for you to cook up little experiments here! You may wish to start by comparing the mean miles-per-gallon values for 4-, 6- and 8-cylinder cars. Another suggestion would be to find how many cars there are in each cylinder category, using &lt;strong&gt;tapply&lt;/strong&gt;. As usual, the more examples you cook up here, the better!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By the way, the &lt;strong&gt;mtcars&lt;/strong&gt; data frame has a &#34;phantom&#34; column.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(mtcars)&#xA;                   mpg cyl disp  hp drat    wt  qsec vs am gear carb&#xA;Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4&#xA;Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4&#xA;Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1&#xA;Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1&#xA;Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2&#xA;Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That first column seems to give the make (brand) and model of the car. Yes, it does -- but it&#39;s not a column. Behold:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(mtcars[,1])&#xA;[1] 21.0 21.0 22.8 21.4 18.7 18.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sure enough, column 1 is the mpg data, not the car names. But we see the names there on the far left! The resolution of this seeming contradiction is that those car names are the &lt;em&gt;row names&lt;/em&gt; of this data frame:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; row.names(mtcars)&#xA; [1] &#34;Mazda RX4&#34;           &#34;Mazda RX4 Wag&#34;       &#34;Datsun 710&#34;         &#xA; [4] &#34;Hornet 4 Drive&#34;      &#34;Hornet Sportabout&#34;   &#34;Valiant&#34;            &#xA; [7] &#34;Duster 360&#34;          &#34;Merc 240D&#34;           &#34;Merc 230&#34;           &#xA;[10] &#34;Merc 280&#34;            &#34;Merc 280C&#34;           &#34;Merc 450SE&#34;         &#xA;[13] &#34;Merc 450SL&#34;          &#34;Merc 450SLC&#34;         &#34;Cadillac Fleetwood&#34; &#xA;[16] &#34;Lincoln Continental&#34; &#34;Chrysler Imperial&#34;   &#34;Fiat 128&#34;           &#xA;[19] &#34;Honda Civic&#34;         &#34;Toyota Corolla&#34;      &#34;Toyota Corona&#34;      &#xA;[22] &#34;Dodge Challenger&#34;    &#34;AMC Javelin&#34;         &#34;Camaro Z28&#34;         &#xA;[25] &#34;Pontiac Firebird&#34;    &#34;Fiat X1-9&#34;           &#34;Porsche 914-2&#34;      &#xA;[28] &#34;Lotus Europa&#34;        &#34;Ford Pantera L&#34;      &#34;Ferrari Dino&#34;       &#xA;[31] &#34;Maserati Bora&#34;       &#34;Volvo 142E&#34;         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So &#39;Mazda RX4&#39; was the &lt;em&gt;name&lt;/em&gt; of row 1, but not part of the row.&lt;/p&gt; &#xA;&lt;p&gt;As with everything else, &lt;strong&gt;row.names&lt;/strong&gt; is a function, and as you can see above, its return value here is a 32-element vector (the data frame had 32 rows, thus 32 row names). The elements of that vector are of class &lt;strong&gt;&#39;character&#39;&lt;/strong&gt;, as is the vector itself.&lt;/p&gt; &#xA;&lt;p&gt;You can even assign to that vector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; row.names(mtcars)[7]&#xA;[1] &#34;Duster 360&#34;&#xA;&amp;gt; row.names(mtcars)[7] &amp;lt;- &#39;Dustpan&#39;&#xA;&amp;gt; row.names(mtcars)[7]&#xA;[1] &#34;Dustpan&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside joke, by the way. Yes, the example is real and significant, but the &#34;Dustpan&#34; thing came from a funny TV commercial at the time.&lt;/p&gt; &#xA;&lt;p&gt;(If you have some background in programming, it may appear odd to you to have a function call on the &lt;em&gt;left&lt;/em&gt; side of an assignment. This is actually common in R. It stems from the fact that &#39;&amp;lt;-&#39; is actually a function! But this is not the place to go into that.)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Try some experiments with the &lt;strong&gt;mtcars&lt;/strong&gt; data, e.g. finding the mean horsepower for 6-cylinder cars.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; As a beginner (and for that matter later on), you should NOT be obsessed with always writing code in the &#34;optimal&#34; way, including in terms of compactness of the code. It&#39;s much more important to write something that works and is clear; one can always tweak it later. In this case, though, &lt;strong&gt;tapply&lt;/strong&gt; actually aids clarity, and it is so ubiquitously useful that we have introduced it early in this tutorial. We&#39;ll be using it more in later lessons.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less5&#34;&gt; &lt;/a&gt; Lesson 10: Data Cleaning&lt;/h2&gt; &#xA;&lt;p&gt;Most real-world data is &#34;dirty,&#34; i.e. filled with errors. The famous &lt;a href=&#34;https://data.cityofnewyork.us/Transportation/2017-Yellow-Taxi-Trip-Data/biws-g3hs&#34;&gt;New York taxi trip dataset&lt;/a&gt;, for instance, has one trip destination whose lattitude and longitude place it in Antartica! The impact of such erroneous data on one&#39;s statistical analysis can be anywhere from mild to disabling. Let&#39;s see below how one might ferret out bad data. And along the way, we&#39;ll cover several new R concepts.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll use the famous Pima Diabetes dataset. Various versions exist, but we&#39;ll use the one included in &lt;strong&gt;faraway&lt;/strong&gt;, an R package compiled by Julian Faraway, author of several popular books on statistical regression analysis in R.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve placed the data file, &lt;strong&gt;Pima.csv&lt;/strong&gt;, on &lt;a href=&#34;http://heather.cs.ucdavis.edu/FasteR/data/Pima.csv&#34;&gt;my Web site&lt;/a&gt;. Here is how you can read it into R:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pima &amp;lt;- read.csv(&#39;http://heather.cs.ucdavis.edu/FasteR/data/Pima.csv&#39;,header=TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The dataset is in a CSV (&#34;comma-separated values&#34;) file. Here we read it, and assigned the resulting data frame to a variable we chose to name &lt;strong&gt;pima&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that second argument, &#39;header=TRUE&#39;. A header in a file, if one exists, is in the first line in the file. It states what names the columns in the data frame are to have. If the file doesn&#39;t have one, set &lt;strong&gt;header&lt;/strong&gt; to FALSE. You can always add names to your data frame later (future lesson).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; It&#39;s always good to take a quick look at a new data frame:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(pima)&#xA;  pregnant glucose diastolic triceps insulin  bmi diabetes age test&#xA;1        6     148        72      35       0 33.6    0.627  50    1&#xA;2        1      85        66      29       0 26.6    0.351  31    0&#xA;3        8     183        64       0       0 23.3    0.672  32    1&#xA;4        1      89        66      23      94 28.1    0.167  21    0&#xA;5        0     137        40      35     168 43.1    2.288  33    1&#xA;6        5     116        74       0       0 25.6    0.201  30    0&#xA;&amp;gt; dim(pima)&#xA;[1] 768   9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;strong&gt;dim&lt;/strong&gt; function tells us that there are 768 people in the study, 9 variables measured on each.&lt;/p&gt; &#xA;&lt;p&gt;Since this is a study of diabetes, let&#39;s take a look at the glucose variable. R&#39;s &lt;strong&gt;table&lt;/strong&gt; function is quite handy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; table(pima$glucose)&#xA;&#xA;  0  44  56  57  61  62  65  67  68  71  72  73  74  75  76  77  78  79  80  81 &#xA;  5   1   1   2   1   1   1   1   3   4   1   3   4   2   2   2   4   3   6   6 &#xA; 82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 &#xA;  3   6  10   7   3   7   9   6  11   9   9   7   7  13   8   9   3  17  17   9 &#xA;102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 &#xA; 13   9   6  13  14  11  13  12   6  14  13   5  11  10   7  11   6  11  11   6 &#xA;122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 &#xA; 12   9  11  14   9   5  11  14   7   5   5   5   6   4   8   8   5   8   5   5 &#xA;142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 &#xA;  5   6   7   5   9   7   4   1   3   6   4   2   6   5   3   2   8   2   1   3 &#xA;162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 &#xA;  6   3   3   4   3   3   4   1   2   3   1   6   2   2   2   1   1   5   5   5 &#xA;182 183 184 186 187 188 189 190 191 193 194 195 196 197 198 199 &#xA;  1   3   3   1   4   2   4   1   1   2   3   2   3   4   1   1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be careful here; the first, third, fifth and so on lines are the glucose values, while the second, fourth, sixth and so on lines are the counts of women having those values. For instance, 3 women had the glucose = 68.&lt;/p&gt; &#xA;&lt;p&gt;Uh, oh! 5 women in the study had glucose level 0. And 1 had level 44, etc. Presumably 0 is not physiologically possible, and maybe not 44 either.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s consider a version of the glucose data that at least excludes these 0s.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pg &amp;lt;- pima$glucose&#xA;&amp;gt; pg1 &amp;lt;- pg[pg &amp;gt; 0]&#xA;&amp;gt; length(pg1)&#xA;[1] 763&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, the expression &#34;pg &amp;gt; 0&#34; creates a vector of TRUEs and FALSEs. The filtering &#34;pg[pg &amp;gt; 0]&#34; will only pick up the TRUE cases, and sure enough, we see that &lt;strong&gt;pg1&lt;/strong&gt; has only 763 cases, as opposed to the original 768.&lt;/p&gt; &#xA;&lt;p&gt;Did removing the 0s make much difference? Turns out it doesn&#39;t:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(pg)&#xA;[1] 120.8945&#xA;&amp;gt; mean(pg1)&#xA;[1] 121.6868&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But still, these things can in fact have major impact in many statistical analyses.&lt;/p&gt; &#xA;&lt;p&gt;R has a special code for missing values, NA, for situations like this. Rather than removing the 0s, it&#39;s better to recode them as NAs. Let&#39;s do this, back in the original dataset so we keep all the data in one object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pima$glucose[pima$glucose == 0] &amp;lt;- NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; That&#39;s pretty complicated. It&#39;s clearer to &lt;strong&gt;break things up into smaller steps&lt;/strong&gt; (I recommend this especially for beginners), as follows:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; glc &amp;lt;- pima$glucose&#xA;&amp;gt; z &amp;lt;- glc == 0&#xA;&amp;gt; glc[z] &amp;lt;- NA&#xA;&amp;gt; pima$glucose &amp;lt;- glc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is what the code does:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;That first line just makes a copy of the original vector, to avoid clutter in the code.&lt;/li&gt; &#xA; &lt;li&gt;The second line determines which elements of &lt;strong&gt;glc&lt;/strong&gt; are 0s, resulting in &lt;strong&gt;z&lt;/strong&gt; being a vector of TRUEs and FALSEs.&lt;/li&gt; &#xA; &lt;li&gt;The third line then assigns NA to those elements in &lt;strong&gt;glc&lt;/strong&gt; corresponding to the TRUEs. (Note the recycling of NA.)&lt;/li&gt; &#xA; &lt;li&gt;Finally, we need to have the changes in the original data, so we copy &lt;strong&gt;glc&lt;/strong&gt; to it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Note again the double-equal sign! If we wish to test whether, say, &lt;em&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/em&gt; are equal, the expression must be &#34;a == b&#34;, not &#34;a = b&#34;; the latter would do &#34;a &amp;lt;- b&#34;. This is a famous beginning programmer&#39;s error.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;As a check, let&#39;s verify that we now have 5 NAs in the glucose variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; sum(is.na(pima$glucose))&#xA;[1] 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the built-in R function &lt;strong&gt;is.na&lt;/strong&gt; will return a vector of TRUEs and FALSEs. Recall that those values can always be treated as 1s and 0s, thus summable. Thus we got our count, 5.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s also check that the mean comes out right:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(pima$glucose)&#xA;[1] NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What went wrong? By default, the &lt;strong&gt;mean&lt;/strong&gt; function will &lt;em&gt;not&lt;/em&gt; skip over NA values; thus the mean was reported as NA too. But we can instruct the function to skip the NAs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(pima$glucose,na.rm=TRUE)&#xA;[1] 121.6868&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Determine which other columns in &lt;strong&gt;pima&lt;/strong&gt; have suspicious 0s, and replace them with NA values.&lt;/p&gt; &#xA; &lt;p&gt;Now, look again at the plot we made earlier of the Nile flow histogram. There seems to be a gap between the numbers at the low end and the rest. What years did these correspond to? Find the mean of the data, excluding these cases.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less6&#34;&gt; &lt;/a&gt; Lesson 11: The R List Class&lt;/h2&gt; &#xA;&lt;p&gt;We saw earlier how handy the &lt;strong&gt;tapply&lt;/strong&gt; function can be. Let&#39;s look at a related one, &lt;strong&gt;split&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Earlier we mentioned the built-in dataset &lt;strong&gt;mtcars&lt;/strong&gt;, a data frame. Consider &lt;strong&gt;mtcars$mpg&lt;/strong&gt;, the column containing the miles-per-gallon data. Again, to save typing and avoid clutter in our code, let&#39;s make a copy first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mtmpg &amp;lt;- mtcars$mpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suppose we wish to split the original vector into three vectors, one for 4-cylinder cars, one for 6 and one for 8. We &lt;em&gt;could&lt;/em&gt; do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mt4 &amp;lt;- mtmpg[mtcars$cyl == 4]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and so on for &lt;strong&gt;mt6&lt;/strong&gt; and &lt;strong&gt;mt8&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; In order to keep up, make sure you understand how that line of code works, with the TRUEs and FALSEs etc. First print out the value of &lt;strong&gt;mtcars$cyl == 4&lt;/strong&gt;, and go from there.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;But there is a cleaner way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mtl &amp;lt;- split(mtmpg,mtcars$cyl)&#xA;&amp;gt; mtl&#xA;$`4`&#xA; [1] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26.0 30.4 21.4&#xA;&#xA;$`6`&#xA;[1] 21.0 21.0 21.4 18.1 19.2 17.8 19.7&#xA;&#xA;$`8`&#xA; [1] 18.7 14.3 16.4 17.3 15.2 10.4 10.4 14.7 15.5 15.2 13.3 19.2 15.8 15.0&#xA;&amp;gt; class(mtl)&#xA;[1] &#34;list&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In English, the call to &lt;strong&gt;split&lt;/strong&gt; said, &#34;Split &lt;strong&gt;mtmpg&lt;/strong&gt; into multiple vectors, with the splitting criterion being the correspond values in &lt;strong&gt;mtcars$cyl&lt;/strong&gt;.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Now &lt;strong&gt;mtl&lt;/strong&gt;, an object of R class &lt;strong&gt;&#34;list&#34;&lt;/strong&gt;, contains the 3 vectors. We can access them individually with the dollar sign notation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mtl$`4`&#xA; [1] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26.0 30.4 21.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, we can use indices, though now with double brackets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mtl[[1]]&#xA; [1] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26.0 30.4 21.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looking a little closer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(mtcars$cyl)&#xA;[1] 6 6 4 6 8 6 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We see that the first car had 6 cylinders, so the first element of &lt;strong&gt;mtmpg&lt;/strong&gt;, 21.0, was thrown into the &lt;code&gt;6&lt;/code&gt; pile, i.e. &lt;strong&gt;mtl[[2]]&lt;/strong&gt; (see above printout of &lt;strong&gt;mtl&lt;/strong&gt;), and so on.&lt;/p&gt; &#xA;&lt;p&gt;And of course we can make copies for later convenience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; m4 &amp;lt;- mtl[[1]]&#xA;&amp;gt; m6 &amp;lt;- mtl[[2]]&#xA;&amp;gt; m8 &amp;lt;- mtl[[3]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lists are especially good for mixing types together in one package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; l &amp;lt;- list(a = c(2,5), b = &#39;sky&#39;)&#xA;&amp;gt; l&#xA;$a&#xA;[1] 2 5&#xA;&#xA;$b&#xA;[1] &#34;sky&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that here we can give names to the list elements, &#39;a&#39; and &#39;b&#39;. In forming &lt;strong&gt;mtl&lt;/strong&gt; using &lt;strong&gt;split&lt;/strong&gt; above, the names were assigned according to the values of the vector beiing split. (In that earlier case, we also needed backquotes &lt;code&gt; &lt;/code&gt;, since the names were numbers.)&lt;/p&gt; &#xA;&lt;p&gt;If we don&#39;t like those default names, we can change them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; names(mtl) &amp;lt;- c(&#39;four&#39;,&#39;six&#39;,&#39;eight&#39;)&#xA;&amp;gt; mtl&#xA;$four&#xA; [1] 22.8 24.4 22.8 32.4 30.4 33.9 21.5 27.3 26.0 30.4 21.4&#xA;&#xA;$six&#xA;[1] 21.0 21.0 21.4 18.1 19.2 17.8 19.7&#xA;&#xA;$eight&#xA; [1] 18.7 14.3 16.4 17.3 15.2 10.4 10.4 14.7 15.5 15.2 13.3 19.2 15.8&#xA;15.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What if we want, say, the MPG for the third car in the 6-cylinder category?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mtl[[2]][3]&#xA;[1] 21.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The point is that &lt;strong&gt;mtl[[2]]&lt;/strong&gt; is a vector, so if we want element 3 of that vector, we tack on [3].&lt;/p&gt; &#xA;&lt;p&gt;Or,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mtl$six[3]&#xA;[1] 21.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, it&#39;s no coincidence that a dollar sign is used for delineation in both data frames and lists; data frames &lt;em&gt;are&lt;/em&gt; lists. Each column is one element of the list. So for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mtcars[[1]]&#xA; [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4&#xA;[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7&#xA;[31] 15.0 21.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we used the double-brackets list notation to get the first element of the list, which is the first column of the data frame.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn&lt;/strong&gt; Try using &lt;strong&gt;split&lt;/strong&gt; on the ToothGrowth data, say splitting into groups according to the supplement, and finding various quantities.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less7&#34;&gt; &lt;/a&gt; Lesson 12: Another Look at the Nile Data&lt;/h2&gt; &#xA;&lt;p&gt;Here we&#39;ll learn several new concepts, using the &lt;strong&gt;Nile&lt;/strong&gt; data as our starting point.&lt;/p&gt; &#xA;&lt;p&gt;If you look again at the histogram of the Nile we generated, you&#39;ll see a gap between the lowest numbers and the rest. In what year(s) did those really low values occur? Let&#39;s plot the data against time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(Nile)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/NileOverTime.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Looks like maybe 1912 or so was much lower than the rest. Is this an error? Or was there some big historical event then? This would require more than R to track down, but at least R can tell us which exact year or years correspond to the unusually low flow. Here is how:&lt;/p&gt; &#xA;&lt;p&gt;We see from the graph that the unusually low value was below 600. We can use R&#39;s &lt;strong&gt;which&lt;/strong&gt; function to see when that occurred:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; which(Nile &amp;lt; 600)       &#xA;[1] 43&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, make sure to understand what happened in this code. The expression &#34;Nile &amp;lt; 600&#34; yields 100 TRUEs and FALSEs. The &lt;strong&gt;which&lt;/strong&gt; then tells us which of those were TRUEs.&lt;/p&gt; &#xA;&lt;p&gt;So, element 43 is the culprit here, corresponding to year 1871+42=1913. Again, we would have to find supplementary information in order to decide whether this is a genuine value or an error, but at least now we know the exact year.&lt;/p&gt; &#xA;&lt;p&gt;Of course, since this is a small dataset, we could have just printed out the entire data and visually scanned it for a low number. But what if the length of the data vector had been 100,000 instead of 100? Then the visual approach wouldn&#39;t work.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Remember, a goal of programming is to automate tasks, rather than doing them by hand.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; There appear to be some unusually high values as well, e.g. one around 1875. Determine which year this was, using the techniques presented here.&lt;/p&gt; &#xA; &lt;p&gt;Also, try some similar analysis on the built-in &lt;strong&gt;AirPassengers&lt;/strong&gt; data. Can you guess why those peaks are occurring?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is another point: That function &lt;strong&gt;plot&lt;/strong&gt; is not quite so innocuous as it may seem. Let&#39;s run the same function, &lt;strong&gt;plot&lt;/strong&gt;, but with two arguments instead of one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(mtcars$wt,mtcars$mpg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/MTCarsWtMPG.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In contrast to the previous plot, in which our data were on the vertical axis and time was on the horizontal, now we are plotting &lt;em&gt;two&lt;/em&gt; vectors, against each other. This enables us to explore the relation between car weight and gas mileage.&lt;/p&gt; &#xA;&lt;p&gt;There are a couple of important points here. First, as we might guess, we see that the heavier cars tended to get poorer gas mileage. But here&#39;s more: That &lt;strong&gt;plot&lt;/strong&gt; function is pretty smart!&lt;/p&gt; &#xA;&lt;p&gt;Why? Well, &lt;strong&gt;plot&lt;/strong&gt; knew to take different actions for different input types. When we fed it a single vector, it plotted those numbers against time (or, against index). When we fed it two vectors, it knew to do a scatter plot.&lt;/p&gt; &#xA;&lt;p&gt;In fact, &lt;strong&gt;plot&lt;/strong&gt; was even smarter than that. It noticed that &lt;strong&gt;Nile&lt;/strong&gt; is not just of &lt;strong&gt;&#39;numeric&#39;&lt;/strong&gt; type, but also of another class, &lt;strong&gt;&#39;ts&#39;&lt;/strong&gt; (&#34;time series&#34;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; is.numeric(Nile)&#xA;[1] TRUE&#xA;&amp;gt; class(Nile)&#xA;[1] &#34;ts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, &lt;strong&gt;plot&lt;/strong&gt; put years on the horizontal axis, instead of indices 1,2,3,...&lt;/p&gt; &#xA;&lt;p&gt;And one more thing: Say we wanted to know the flow in the year 1925. The data start at 1871, so 1925 is 1925 - 1871 = 54 years later. Since the 1871 number is in element 1 of the vector, that means the flow for the year 1925 is in element 1+54 = 55.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; Nile[55]&#xA;[1] 698&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OK, but why did we do this arithmetic ourselves? We should have R do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; Nile[1 + 1925 - 1871]&#xA;[1] 698&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;R did the computation 1925 - 1871 + 1 itself, yielding 55, then looked up the value of &lt;strong&gt;Nile[55]&lt;/strong&gt;. This is the start of your path to programming -- we try to automate things as much as possible, doing things by hand as little as possible.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;pause1&#34;&gt; &lt;/a&gt; Lesson 13: Pause to Reflect&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Repeating an earlier point: How does one build a house? There of course is no set formula. One has various tools and materials, and the goal is to put these together in a creative way to produce the end result, the house.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s the same with R. The tools here are the various functions, e.g. &lt;strong&gt;mean&lt;/strong&gt; and &lt;strong&gt;which&lt;/strong&gt;, and the materials are one&#39;s data. One then must creatively put them together to achieve one&#39;s goal, say ferreting out patterns in ridership in a public transportation system. Again, it is a creative process; there is no formula for anything. But that is what makes it fun, like solving a puzzle.&lt;/p&gt; &#xA;&lt;p&gt;And...we can combine various functions in order to build &lt;em&gt;our own&lt;/em&gt; functions. This will come in future lessons.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less8&#34;&gt; &lt;/a&gt; Lesson 14: Introduction to Base R Graphics&lt;/h2&gt; &#xA;&lt;p&gt;One of the greatest things about R is its graphics capabilities. There are excellent graphics features in base R, and then many contributed packages, with the best known being &lt;strong&gt;ggplot2&lt;/strong&gt; and &lt;strong&gt;lattice&lt;/strong&gt;. These latter two are quite powerful, and will be the subjects of future lessons, but for now we&#39;ll concentrate on the base.&lt;/p&gt; &#xA;&lt;p&gt;As our example here, we&#39;ll use a dataset I compiled on Silicon Valley programmers and engineers, from the US 2000 census. Let&#39;s read in the data and take a look at the first records:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pe &amp;lt;- &#xA;   read.table(&#39;https://raw.githubusercontent.com/matloff/fasteR/master/data/prgeng.txt&#39;,header=TRUE)&#xA;&amp;gt; head(pe)&#xA;       age educ occ sex wageinc wkswrkd&#xA;1 50.30082   13 102   2   75000      52&#xA;2 41.10139    9 101   1   12300      20&#xA;3 24.67374    9 102   2   15400      52&#xA;4 50.19951   11 100   1       0      52&#xA;5 51.18112   11 100   2     160       1&#xA;6 57.70413   11 100   1       0       0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We used &lt;strong&gt;read.table&lt;/strong&gt; here because the file is not of the CSV type. It uses blank spaces rather than commas as its delineator between fields.&lt;/p&gt; &#xA;&lt;p&gt;Here &lt;strong&gt;educ&lt;/strong&gt; and &lt;strong&gt;occ&lt;/strong&gt; are codes, for levels of education and different occupations. For now, let&#39;s not worry about the specific codes. (You can find them in the &lt;a href=&#34;https://www.census.gov/prod/cen2000/doc/pums.pdf&#34;&gt;Census Bureau document&lt;/a&gt;. For instance, search for &#34;Educational Attainment&#34; for the &lt;strong&gt;educ&lt;/strong&gt; variable.)&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s start with a scatter plot of wage vs. age:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(pe$age,pe$wageinc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/WageVsAge1.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Oh no, the dreaded Black Screen Problem! There are about 20,000 data points, thus filling certain parts of the screen. So, let&#39;s just plot a random sample, say 2500. (There are other ways of handling the problem, say with smaller dots or &lt;em&gt;alpha blending&lt;/em&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; indxs &amp;lt;- sample(1:nrow(pe),2500)&#xA;&amp;gt; pe2500 &amp;lt;- pe[indxs,]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recall that the &lt;strong&gt;nrow()&lt;/strong&gt; function returns the number of rows in the argument, which in this case is 20090, the number of rows in &lt;strong&gt;pe&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;R&#39;s &lt;strong&gt;sample&lt;/strong&gt; function does what its name implies. Here it randomly samples 2500 of the numbers from 1 to 20090. We then extracted those rows of &lt;strong&gt;pe&lt;/strong&gt;, in a new data frame &lt;strong&gt;pe2500&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Note again that it&#39;s clearer to break complex operations into simpler, smaller ones. I could have written the more compact&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pe2500 &amp;lt;- pe[sample(1:nrow(pe),2500),]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but it would be hard to read that way. I also use direct function composition sparingly, preferring to break&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;h(g(f(x),3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;y &amp;lt;- f(x) &#xA;z &amp;lt;- g(y,3) &#xA;h(z) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, here is the new plot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(pe2500$age,pe2500$wageinc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/WageVsAge2.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OK, now we are in business. A few things worth noting:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The relation between wage and age is not linear, indeed not even monotonic. After the early 40s, one&#39;s wage tends to decrease. As with any observational dataset, the underlying factors are complex, but it does seem there is an age discrimination problem in Silicon Valley. (And it is well documented in various studies and litigation.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note the horizontal streaks at the very top and very bottom of the picture. Some people in the census had 0 income (or close to it), as they were not working. And the census imposed a top wage limit of $350,000 (probably out of privacy concerns).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We can break things down by gender, via color coding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(pe2500$age,pe2500$wageinc,col=as.factor(pe2500$sex))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;strong&gt;col&lt;/strong&gt; argument indicates we wish to color code, in this case by gender. Note that &lt;strong&gt;pe2500$sex&lt;/strong&gt; is a numeric vector, but &lt;strong&gt;col&lt;/strong&gt; requires an R factor; the function &lt;strong&gt;as.factor&lt;/strong&gt; does the conversion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/WageVsAge3.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The red dots are the women. (Details below.) Are they generally paid less than men? There seems to be a hint of that, but detailed statistical analysis is needed (a future lesson).&lt;/p&gt; &#xA;&lt;p&gt;It would be good to have better labels on the axes, and maybe smaller dots:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(pe2500$age,pe2500$wageinc,col=as.factor(pe2500$sex),xlab=&#39;age&#39;,ylab=&#39;wage&#39;,cex=0.6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/WageVsAge4.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here &#39;xlab&#39; meant &#34;X label&#34; and similarly for &#39;ylab&#39;. The argument &#39;cex = 0.6&#39; means &#34;Draw the dots at 60% of default size.&#34;&lt;/p&gt; &#xA;&lt;p&gt;Now, how did the men&#39;s dots come out black and the women&#39;s red? The men were coded 1, the women 2. So men got color 1 in the default palette, black, and the women color 2, red.&lt;/p&gt; &#xA;&lt;p&gt;There are many, many other features. More in a future lesson.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Try some scatter plots on various datasets. I suggest first using the above data with wage against age again, but this time color-coding by education level. (By the way, 1-9 codes no college; 10-12 means some college; 13 is a bachelor&#39;s degree, 14 a master&#39;s, 15 a professional degree and 16 is a doctorate.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less9&#34;&gt; &lt;/a&gt; Lesson 15: More on Base Graphics&lt;/h2&gt; &#xA;&lt;p&gt;We can also plot multiple histograms on the same graph. But the pictures are more effective using a smoothed version of histograms, available in R&#39;s &lt;strong&gt;density&lt;/strong&gt; function. Let&#39;s compare men&#39;s and women&#39;s wages in the census data.&lt;/p&gt; &#xA;&lt;p&gt;First we use &lt;strong&gt;split&lt;/strong&gt; to separate the data by gender:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; wageByGender &amp;lt;- split(pe$wageinc,pe$sex)&#xA;&amp;gt; dm &amp;lt;- density(wageByGender[[1]])&#xA;&amp;gt; dw &amp;lt;- density(wageByGender[[2]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, &lt;strong&gt;wageByGender[[1]]&lt;/strong&gt; will now be the vector of men&#39;s wages, and similarly &lt;strong&gt;wageByGender[[2]]&lt;/strong&gt; will have the women&#39;s wages.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;density&lt;/strong&gt; function does not automatically draw a plot; it has the plot information in a return value, which we&#39;ve assigned to &lt;strong&gt;dm&lt;/strong&gt; and &lt;strong&gt;dw&lt;/strong&gt; here. We can now plot the graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(dw,col=&#39;red&#39;)&#xA;&amp;gt; points(dm,cex=0.2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/MWWages.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Why did we call the &lt;strong&gt;points&lt;/strong&gt; function instead of &lt;strong&gt;plot&lt;/strong&gt; in that second line? The issue is that calling &lt;strong&gt;plot&lt;/strong&gt; again would destroy the first plot; we merely want to &lt;em&gt;add points&lt;/em&gt; to the existing graph.&lt;/p&gt; &#xA;&lt;p&gt;And why did we plot the women&#39;s data first? As you can see, the women&#39;s curve is taller, so if we plotted the men first, part of the women&#39;s curve would be cut off. Of course, we didn&#39;t know that ahead of time, but graphics often is a matter of trial-and-error to get to the picture we really want. (In the case of &lt;strong&gt;ggplot2&lt;/strong&gt;, this is handled automatically by the software.)&lt;/p&gt; &#xA;&lt;p&gt;Well, then, what does the graph tell us? The peak for women, occurring at a little less than $50,000, seems to be at a lower wage than that for men, at something like $60,000. At salaries around, say, $125,000, there seem to be more men than women. (Black curve higher than red curve. Remember, the curves are just smoothed histograms, so, if a curve is really high at, say 168.0, that means that 168.0 is a very frequently-occurring value.)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Try plotting multiple such curves on the same graph, for other data.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less10&#34;&gt; &lt;/a&gt; Lesson 16: Writing Your Own Functions&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve seen a number of R&#39;s built-in functions so far, but here comes the best part -- you can write your &lt;em&gt;own&lt;/em&gt; functions.&lt;/p&gt; &#xA;&lt;p&gt;Recall a line we had earlier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; sum(Nile &amp;gt; 1200)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This gave us the count of the elements in the &lt;strong&gt;Nile&lt;/strong&gt; data larger than 1200.&lt;br&gt; Now, say we want the mean of those elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; gt1200 &amp;lt;- which(Nile &amp;gt; 1200)&#xA;&amp;gt; nileSubsetGT1200 &amp;lt;- Nile[gt1200]&#xA;&amp;gt; mean(nileSubsetGT1200)&#xA;[1] 1250&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, we could instead write a more compact version,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mean(Nile[Nile &amp;gt; 1200])&#xA;[1] 1250&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But it&#39;s best to do it step by step at first. Let&#39;s see how those steps work. Writing the code with line numbers for reference, the code is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;1  gt1200Indices &amp;lt;- which(Nile &amp;gt; 1200)&#xA;2  nileSubsetGT1200 &amp;lt;- Nile[gt1200Indices]&#xA;3  mean(nileSubsetGT1200)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s review how this works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In line 1, we find the indices in &lt;strong&gt;Nile&lt;/strong&gt; for the elements larger than 1200.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In line 2, we extract the subset of &lt;strong&gt;Nile&lt;/strong&gt; consisting of those elements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In line 3, we compute the desired mean.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But we may wish to do this kind thing often, on many datasets etc. Then we have:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; If we have an operation we will use a lot, we should consider writing a function for it.&lt;/p&gt; &#xA; &lt;p&gt;Say we want to do the above again, but with 1350 instead of 1200. Or, with the &lt;strong&gt;tg$len&lt;/strong&gt; vector from our ToothGrowth example, with 10.2 as our lower bound. We &lt;em&gt;could&lt;/em&gt; keep typing the same pattern as above, but if we&#39;re going to do this a lot, it&#39;s better to write a function for it:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is our function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd &amp;lt;- function(x,d) mean(x[x &amp;gt; d])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here I&#39;ve used a compact form for convenience. (Otherwise I&#39;d need to use &lt;em&gt;blocks&lt;/em&gt; to be covered in a later lesson.) I named it &#39;mgd&#39; for &#34;mean of elements greater than d,&#34; but any name is fine.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s try it out, then explain:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd(Nile,1200)&#xA;[1] 1250&#xA;&amp;gt; mgd(tg$len,10.2)&#xA;[1] 21.58125&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saved me typing. In the second call, I would have had to type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mean(tg$len[tg$len &amp;gt; 10.2])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;considerably longer. But even more importantly, I&#39;d have to think about the operation each time I used it; by making a function out of it, I&#39;ve got it ready to go, all debugged, whenever I need it.&lt;/p&gt; &#xA;&lt;p&gt;So, how does all this work? Again, look at the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd &amp;lt;- function(x,d) mean(x[x &amp;gt; d])&#xA;&amp;gt; class(mgd)&#xA;[1] &#34;function&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a lot going on here. Bear with me for a moment, as I bring in a little of the &#34;theory&#34; of R:&lt;/p&gt; &#xA;&lt;p&gt;Odd to say, but there is a built-in function in R itself named &#39;function&#39;! We&#39;ve already seen several built-in R functions, e.g. &lt;strong&gt;mean()&lt;/strong&gt;, &lt;strong&gt;sum()&lt;/strong&gt; and &lt;strong&gt;plot()&lt;/strong&gt;. Well, here is another, &lt;strong&gt;function()&lt;/strong&gt;. We&#39;re calling it here. And its job is to build a function. Yes, as I like to say, to my students&#39; amusement,&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;The function of the function named &lt;strong&gt;function&lt;/strong&gt; is to build functions! And the class of object returned by &lt;strong&gt;function&lt;/strong&gt; is &#39;function&#39;!&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;So, in the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd &amp;lt;- function(x,d) mean(x[x &amp;gt; d])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we are telling R, &#34;R, I want to write my own function. I&#39;d like to name it &#39;mgd&#39;; it will have arguments &#39;x&#39; and &#39;d&#39;, and it will do &#39;mean(x[x &amp;gt; d])&#39;. Please build the function for me. Thanks in advance, R!&#34;&lt;/p&gt; &#xA;&lt;p&gt;Here we called &lt;strong&gt;function&lt;/strong&gt; to build a &#39;function&#39; object, and then assigned to &lt;strong&gt;mgd&lt;/strong&gt;. We can then call the latter, as we saw above, repeated here for convenience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd(Nile,1200)&#xA;[1] 1250&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In executing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd &amp;lt;- function(x,d) mean(x[x &amp;gt; d])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/em&gt; are known as &lt;em&gt;formal&lt;/em&gt; arguments, as they are just placeholders. For example, in&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd(Nile,1200)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we said, &#34;R, please execute &lt;strong&gt;mgd&lt;/strong&gt; with &lt;strong&gt;Nile&lt;/strong&gt; playing the role of &lt;em&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/em&gt;, and 1200 playing the role of &lt;em&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/em&gt;. Here &lt;strong&gt;Nile&lt;/strong&gt; and 1200 are known as the &lt;em&gt;actual&lt;/em&gt; arguments.&lt;/p&gt; &#xA;&lt;p&gt;As with variables, we can pretty much name functions and their arguments as we please.&lt;/p&gt; &#xA;&lt;p&gt;As you have seen with R&#39;s built-in functions, a function will typically have a return value. In our case here, we could arrange that by writing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd &amp;lt;- function(x,d) return(mean(x[x &amp;gt; d]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;a bit more complicated than the above version. But the call to &lt;strong&gt;return&lt;/strong&gt; is not needed here, because in any function, R will return the last value computed, in this case the requested mean.&lt;/p&gt; &#xA;&lt;p&gt;And we can save the function for later use. One way to do this is to call R&#39;s &lt;strong&gt;save&lt;/strong&gt; function, which can be used to save any R object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; save(mgd,file=&#39;mean_greater_than_d&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function has now been saved in the indicated file, which will be in whatever folder R is running in right now. We can leave R, and say, come back tomorrow. If we then start R from that same folder, we then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; load(&#39;mean_greater_than_d&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then &lt;strong&gt;mgd&lt;/strong&gt; will be restored, ready for us to use again. (Typically this is not the way people save code, but this is the subject of a later lesson.)&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s write another function, this one to find the range of a vector, i.e. the difference between the minimal and maximal values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; rng &amp;lt;- function(y) max(y) - min(y)&#xA;&amp;gt; rng(Nile)&#xA;[1] 914&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we made use of the built-in R functions &lt;strong&gt;max&lt;/strong&gt; and &lt;strong&gt;min&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Build new functions from old ones (which may in turn depend on other old ones, etc.).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Again, the last item computed is the subtraction, so it will be automatically returned, just what we want. As before, I chose to name the argument &lt;strong&gt;y&lt;/strong&gt;, but it could be anything. However, I did not name the function &#39;range&#39;, as there is already a built-in R function of that name.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Try your hand at writing some simple functions along the lines seen here. You might start by writing a function &lt;strong&gt;cgd()&lt;/strong&gt;, like &lt;strong&gt;mgd()&lt;/strong&gt; above, but returning the count of the number of elements in &lt;strong&gt;x&lt;/strong&gt; that are greater than &lt;strong&gt;d&lt;/strong&gt;. Then may try writing a function &lt;strong&gt;n0(x)&lt;/strong&gt;, that returns the number of 0s in the vector &lt;em&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/em&gt;. (Hint: Make use of R&#39;s &lt;strong&gt;==&lt;/strong&gt; and &lt;strong&gt;sum&lt;/strong&gt;.) Another suggestion would be a function &lt;strong&gt;hld(x,d)&lt;/strong&gt;, which draws a histogram for those elements in the vector &lt;em&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/em&gt; that are less than &lt;em&gt;&lt;strong&gt;d&lt;/strong&gt;&lt;/em&gt;. Write at least 4 or 5 functions; the more you write, the easier it will be in later lessons.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Functions are R objects, just as are vectors, lists and so on. Thus, we can print them by just typing their names!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mgd &amp;lt;- function(x,d) mean(x[x &amp;gt; d])&#xA;&amp;gt; mgd&#xA;function(x,d) mean(x[x &amp;gt; d])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less11&#34;&gt; &lt;/a&gt; Lesson 17: &#39;For&#39; Loops&lt;/h2&gt; &#xA;&lt;p&gt;Recall that earlier we found that there were several columns in the Pima dataset that contained values of 0, which were physiologically impossible. These should be coded NA. We saw how to do that recoding for the glucose variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pima$glucose[pima$glucose == 0] &amp;lt;- NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But there are several columns like this, and we&#39;d like to avoid doing this all repeatedly by hand. (What if there were several &lt;em&gt;hundred&lt;/em&gt; such columns?) Instead, we&#39;d like to do this &lt;em&gt;programmatically&lt;/em&gt;. This can be done with R&#39;s &lt;strong&gt;for&lt;/strong&gt; loop construct (which by the way most programming languages have as well).&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s first check which columns seem appropriate for recoding. Recall that there are 9 columns in this data frame.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; for (i in 1:9) print(sum(pima[,i] == 0))&#xA;[1] 111&#xA;[1] 5&#xA;[1] 35&#xA;[1] 227&#xA;[1] 374&#xA;[1] 11&#xA;[1] 0&#xA;[1] 0&#xA;[1] 500&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is known in the programming world as a &lt;em&gt;&#39;for&#39; loop&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;print(etc.)&#39; is called the &lt;em&gt;body&lt;/em&gt; of the loop. The &#39;for (i in 1:9)&#39; part says, &#34;Execute the body of the loop with i = 1, then execute it with i = 2, then i = 3, etc. up through i = 9.&#34;&lt;/p&gt; &#xA;&lt;p&gt;In other words, the above code instructs R to do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;i &amp;lt;- 1&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 2&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 3&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 4&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 5&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 6&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 7&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 8&#xA;print(sum(pima[,i] == 0))&#xA;i &amp;lt;- 9&#xA;print(sum(pima[,i] == 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this amounts to doing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(sum(pima[,1] == 0))&#xA;print(sum(pima[,2] == 0))&#xA;print(sum(pima[,3] == 0))&#xA;print(sum(pima[,4] == 0))&#xA;print(sum(pima[,5] == 0))&#xA;print(sum(pima[,6] == 0))&#xA;print(sum(pima[,7] == 0))&#xA;print(sum(pima[,8] == 0))&#xA;print(sum(pima[,9] == 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, it&#39;s worth reviewing what those statements do, say the first. Once again, &lt;strong&gt;pima[,1] == 0&lt;/strong&gt; yields a vector of TRUEs and FALSEs, each indicating whether the corresponding element of column 1 is 0. When we call &lt;strong&gt;sum&lt;/strong&gt;, TRUEs and FALSEs are treated as 1s and 0s, so we get the total number of TRUEs -- which is a count of the number of elements in that column that are 0, exactly what we wanted.&lt;/p&gt; &#xA;&lt;p&gt;The variable &lt;strong&gt;i&lt;/strong&gt; in &#34;for (i in 1:9)...&#34; is known as the &lt;em&gt;index&lt;/em&gt; of the loop. It&#39;s just an ordinary R variable, so name it what you wish. Instead of &lt;strong&gt;i&lt;/strong&gt;, we might name it, say, &lt;strong&gt;colNumber&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for (colNumber in 1:9) print(sum(pima[,colNumber] == 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A technical point: Why did we need the explicit call to &lt;strong&gt;print&lt;/strong&gt;? Didn&#39;t we say earlier that just typing an expression at the R &#39;&amp;gt;&#39; prompt will automatically print out the value of the expression? Ah yes -- but we are not at the R prompt here! Yes, in the expanded form we see above,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;print(sum(pima[,1] == 0))&#xA;print(sum(pima[,2] == 0))&#xA;print(sum(pima[,3] == 0))&#xA;print(sum(pima[,4] == 0))&#xA;print(sum(pima[,5] == 0))&#xA;print(sum(pima[,6] == 0))&#xA;print(sum(pima[,7] == 0))&#xA;print(sum(pima[,8] == 0))&#xA;print(sum(pima[,9] == 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;each command would be issued at the prompt. But in the &lt;strong&gt;for&lt;/strong&gt; loop version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for (i in 1:9) print(sum(pima[,i] == 0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;we are calling &lt;strong&gt;print()&lt;/strong&gt; from &lt;em&gt;within the loop&lt;/em&gt;, not at the prompt. So, the explicit call to &lt;strong&gt;print()&lt;/strong&gt; is needed.&lt;/p&gt; &#xA;&lt;p&gt;We now see there are a lot of erroneous 0s in this dataset, e.g. 35 of them in column 3. We probably have forgotten which column is which, so let&#39;s see, using yet another built-R function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; colnames(pima)&#xA;[1] &#34;pregnant&#34;  &#34;glucose&#34;   &#34;diastolic&#34; &#34;triceps&#34;   &#34;insulin&#34;   &#34;bmi&#34;      &#xA;[7] &#34;diabetes&#34;  &#34;age&#34;       &#34;test&#34;     &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ah, so column 3 was &#39;diastolic&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Since some women will indeed have had 0 pregnancies, that column should not be recoded. And the last column states whether the test for diabetes came out positive, 1 for yes, 0 for no, so those 0s are legitimate too.&lt;/p&gt; &#xA;&lt;p&gt;But 0s in columns 2 through 6 ought to be recoded as NAs. And the fact that it&#39;s a repetitive action suggests that a &lt;strong&gt;for&lt;/strong&gt; loop can be used there too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; for (i in 2:6) pima[pima[,i] == 0,i] &amp;lt;- NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll probably find this line quite challenging, but be patient and, as with everything in R, you&#39;ll find you can master it.&lt;/p&gt; &#xA;&lt;p&gt;First, let&#39;s write it in more easily digestible (though a bit more involved) form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; for (i in 2:6) {&#xA;+    zeroIndices &amp;lt;- which(pima[,i] == 0)&#xA;+    pima[zeroIndices,i] &amp;lt;- NA&#xA;+ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can enter the code for a loop or function etc. line by line at the prompt, as we&#39;ve done here. R helpfully uses its &#39;+&#39; prompt (which I did &lt;em&gt;not&lt;/em&gt; type) to remind me that I am still in the midst of typing the code. (After the &#39;}&#39; I simply hit Enter.)&lt;/p&gt; &#xA;&lt;p&gt;Here I intended the body of the loop to consist of a &lt;em&gt;block&lt;/em&gt; of two statements, not one, so I needed to tell R that, by typing &#39;{&#39; before writing my two statements, then letting R know I was finished with the block, by typing &#39;}&#39;.&lt;/p&gt; &#xA;&lt;p&gt;For your convenience, below is the code itself, no &#39;+&#39; symbols. You can copy-and-paste into R, with the result as above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for (i in 2:6) {&#xA;   zeroIndices &amp;lt;- which(pima[,i] == 0)&#xA;   pima[zeroIndices,i] &amp;lt;- NA&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(If you are using RStudio, set up some work space, by selecting File | New File | RScript. Copy-and-paste the above into the empty pane (named SOURCE) that is created, and run it, via Code | Run Region | Run All. If you are using an external text editor, type the code into the editor, save to a file, say &lt;strong&gt;x.R&lt;/strong&gt;, then at the R &#39;&amp;gt;&#39; prompt, type &lt;strong&gt;source(x.R)&lt;/strong&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;So, the block (two lines here) will be executed with &lt;strong&gt;i&lt;/strong&gt; = 2, then 3, 4, 5 and 6. The line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;zeroIndices &amp;lt;- which(pima[,i] == 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;determines where the 0s are in column &lt;strong&gt;i&lt;/strong&gt;, and then the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; pima[zeroIndices,i] &amp;lt;- NA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;replaces those 0s by NAs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Note that I have indented the two lines in the block. This is not required but is considered good for clear code, in order to easily spot the block when you or others read the code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Sometimes our code needs to leave a loop early, which we can do using the R &lt;strong&gt;break&lt;/strong&gt; construct. Say we are adding cubes of numbers 1,2,3,..., and for some reason want to determine which sum is the first to exceed &lt;strong&gt;s&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; f&#xA;function(n,s) &#xA;{&#xA;   tot &amp;lt;- 0&#xA;   for (i in 1:n) {&#xA;      tot &amp;lt;- tot + i^3&#xA;      if (tot &amp;gt; s) {&#xA;         print(i)&#xA;         break&#xA;      }&#xA;      if (i == n) print(&#39;failed&#39;)&#xA;   }&#xA;}&#xA;&amp;gt; f(100,345)&#xA;[1] 6&#xA;&amp;gt; f(5,345)&#xA;[1] &#34;failed&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If our accumulated total meets our goal, we leave the loop.&lt;/p&gt; &#xA;&lt;p&gt;A better approach is to use &#39;while&#39; loops, covered later in this tutorial.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; There is a school of thought among some R enthusiasts that one should avoid writing loops, using something called &lt;em&gt;functional programming&lt;/em&gt;. We will cover this in Lesson 28, but I do not recommend it for R beginners. As the name implies, functional programming uses functions, and it takes a while for most R beginners to master writing functions. It makes no sense to force beginners to use functional programming before they really can write function code well. I myself, with my several decades as a coder, write some code with loops and some with functional programming. Write in whatever style you feel comfortable with, rather than being a &#34;slave to fashion.&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;ftnbl&#34;&gt; &lt;/a&gt; Lesson 18: Functions with Blocks&lt;/h2&gt; &#xA;&lt;p&gt;Blocks are usually key in defining functions. Let&#39;s generalize the above code in the Loops lesson, writing a function that replaces 0s by NAs in specified columns in general data frames, not just &lt;strong&gt;pima&lt;/strong&gt; as before.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;     1&#x9;zerosToNAs &amp;lt;- function(d,cols)&#xA;     2&#x9;{&#xA;     3&#x9;   for (j in cols) {&#xA;     4&#x9;      NArows &amp;lt;- which(d[,j] == 0)&#xA;     5&#x9;      d[NArows,j] &amp;lt;- NA&#xA;     6&#x9;   }&#xA;     7&#x9;   d&#xA;     8&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(We&#39;ve added line numbers to this display for convenence.)&lt;/p&gt; &#xA;&lt;p&gt;Here the formal argument &lt;strong&gt;d&lt;/strong&gt; is the data frame to be worked on, and &lt;strong&gt;cols&lt;/strong&gt; specifies the columns in which 0s are to be replaced.&lt;/p&gt; &#xA;&lt;p&gt;The loop goes through &lt;strong&gt;d&lt;/strong&gt;, one column at a time. Since &lt;strong&gt;d[,j] == 0&lt;/strong&gt; means all of column &lt;strong&gt;j&lt;/strong&gt; of &lt;strong&gt;d&lt;/strong&gt;, then &lt;strong&gt;which(d[,j] == 0)&lt;/strong&gt; will give us the indices in that column of elements that are 0s. Those indices in turn mean row numbers in &lt;strong&gt;d&lt;/strong&gt;, which we&#39;ve named &lt;strong&gt;NArows&lt;/strong&gt;. In line 5, then, we replace the 0s we&#39;ve found in column &lt;strong&gt;j&lt;/strong&gt; by NAs. Before continuing, work through this little example in your mind:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; d &amp;lt;- data.frame(x=c(1,0,3),y=c(0,0,13)) &#xA;&amp;gt; d&#xA;  x  y&#xA;1 1  0&#xA;2 0  0&#xA;&amp;gt; which(d[,2] == 0)&#xA;[1] 1 2  # ah yes; the 0 elements in column 2 are at indices 1 and 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returning the the above loop code, note that when we reach line 7, we&#39;ve already finished the loop, and exited from it. So, we are ready to return the new value of &lt;strong&gt;d&lt;/strong&gt;. Recall that we could do this via the expression &lt;strong&gt;return(d)&lt;/strong&gt;, but we can save ourselves some typing by simply writing &#39;d&#39;. That value becomes the last value computed, and R automatically returns that last value.&lt;/p&gt; &#xA;&lt;p&gt;We could use this in the Pima data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pima &amp;lt;- zerosToNAs(pima,2:6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is an important subtlety here. All of this will produce a new data frame, rather than changing &lt;strong&gt;pima&lt;/strong&gt; itself. That does look odd; isn&#39;t &lt;strong&gt;d&lt;/strong&gt; changing, and isn&#39;t &lt;strong&gt;d&lt;/strong&gt; the same as &lt;strong&gt;pima&lt;/strong&gt;? Well, no; &lt;strong&gt;d&lt;/strong&gt; is only a &lt;em&gt;separate copy&lt;/em&gt; of &lt;strong&gt;pima&lt;/strong&gt;. So, when &lt;strong&gt;d&lt;/strong&gt; changes, &lt;strong&gt;pima&lt;/strong&gt; does not. So, if we want &lt;strong&gt;pima&lt;/strong&gt; to change, we must reassign the output of the function back to &lt;strong&gt;pima&lt;/strong&gt;, as we did above.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn&lt;/strong&gt;: Write a function with call form &lt;strong&gt;countNAs(dfr)&lt;/strong&gt;, which prints the numbers of NAs in each column of the data frame &lt;strong&gt;dfr&lt;/strong&gt;. You&#39;ll need to use the built-in &lt;strong&gt;is.na()&lt;/strong&gt; functon; execute &lt;strong&gt;is.na(c(5,NA,13,28,NA))&lt;/strong&gt; at the R command prompt to see what it does. Test it on a small artificial dataset that you create.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;edt&#34;&gt; &lt;/a&gt; Lesson 19: Text Editing and IDEs&lt;/h2&gt; &#xA;&lt;p&gt;In trying out our function &lt;strong&gt;zeroToNAs&lt;/strong&gt; above, you probably used your computer&#39;s mouse to copy-and-paste from this tutorial into your machine. Your screen would then look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; zerosToNAs &amp;lt;- function(d,cols) &#xA;+ {&#xA;+    zeroIndices &amp;lt;- which(d[,cols] == 0)&#xA;+    d[zeroIndices,cols] &amp;lt;- NA&#xA;+    d&#xA;+ }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But this is unwieldy. Typing it in line by line is laborious and error-prone. And what if we were to change the code? Must we type in the whole thing again? We really need a &lt;em&gt;text editor&lt;/em&gt; for this. Just as we edit, say, reports, we do the same for code.&lt;/p&gt; &#xA;&lt;p&gt;Here are your choices:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are already using an IDE, say RStudio, you simply edit in the designated pane.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are using an external editor, say vim or emacs, just open a new file and use that workspace.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For those not using these, we&#39;ll just use R&#39;s built-in &lt;strong&gt;edit&lt;/strong&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Option 3 is fine for now, but eventually you&#39;ll want to use either Option 1 or 2. You may wish to start with one of those options now, before going further.&lt;/p&gt; &#xA;&lt;p&gt;We have details on getting start with RStudio in the &lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/#ide&#34;&gt;Appendix&lt;/a&gt; at the end of this document. &lt;strong&gt;Warning:&lt;/strong&gt; As noted earlier, one major R Users Group described RStudio as &#34;overwhelming.&#34; But it is quite easy if you resist the temptation (or the exhortations of others) to learn it all at once. As long as you stick to the basics in the Appendix, you&#39;ll find it quite easy; you can learn the advanced tricks later.&lt;/p&gt; &#xA;&lt;p&gt;Consider the following toy example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;f &amp;lt;- function(x,y)&#xA;{&#xA;   s &amp;lt;- x + y&#xA;   d &amp;lt;- x - y&#xA;   c(s,d)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It finds the sum and difference of the inputs, and returns them as a two-element vector.&lt;/p&gt; &#xA;&lt;p&gt;If you are using RStudio or an external editor, copy-and-paste the above code into the workspace of an empty file.&lt;/p&gt; &#xA;&lt;p&gt;Or, to create &lt;strong&gt;f&lt;/strong&gt; using &lt;strong&gt;edit&lt;/strong&gt;, we would do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; f &amp;lt;- edit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would invoke the text editor, which will depend on your machine. It will open your text editor right there in your R window. Type the function code, then save it, using the editor&#39;s Save command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Even if you are not using &lt;strong&gt;edit&lt;/strong&gt;, it&#39;s important to know what is happening in that command above.&lt;/p&gt; &#xA;&lt;p&gt;a. &lt;strong&gt;edit&lt;/strong&gt; itself is a function. Its return value is the code you typed in!&lt;/p&gt; &#xA;&lt;p&gt;b. That code is then assigned to &lt;strong&gt;f&lt;/strong&gt;, which you can now call&lt;/p&gt; &#xA;&lt;p&gt;If you want to change the function, in the RStudio/external editor case, just edit it there. In the &lt;strong&gt;edit&lt;/strong&gt; case, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; f &amp;lt;- edit(f)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This again opens the text editor, but this time with the current &lt;strong&gt;f&lt;/strong&gt; code showing. You edit the code as desired, then as before, the result is reassigned to &lt;strong&gt;f&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;How do you then run the code, say for computing &lt;strong&gt;f(5,2)&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you had created &lt;strong&gt;f()&lt;/strong&gt; using &lt;strong&gt;edit()&lt;/strong&gt;, then execute as usual:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; f(5,2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you had used an external text editor, say saving the code into the file &lt;strong&gt;a.R&lt;/strong&gt;, then&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; source(&#39;a.R&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;loads file, and then you run as above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In RStudio, click on Source, then run as above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;ifelse&#34;&gt; &lt;/a&gt; Lesson 20: If, Else, Ifelse&lt;/h2&gt; &#xA;&lt;p&gt;If our Census data example above, it was stated that education codes 0-9 all corresponded to having no college education at all. For instance, 9 means high school graduate, while 6 means schooling through the 10th grade. (Of course, few if any programmers and engineers have educational attainment level below college, but this dataset was extracted from the general data.) 13 means a bachelor&#39;s degree.&lt;/p&gt; &#xA;&lt;p&gt;Suppose we wish to color-code the wage-age graph in an earlier lesson by educational attainment. Let&#39;s amalgamate all codes under 13, giving them the code 12.&lt;/p&gt; &#xA;&lt;p&gt;The straightforward but overly complicated, potentially slower way would be this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(pe$educ,15)&#xA; [1] 13  9  9 11 11 11 12 11 14  9 12 13 12 13  6&#xA;&amp;gt; for (i in 1:nrow(pe)) {&#xA;+    if (pe$educ[i] &amp;lt; 13) pe$educ[i] &amp;lt;- 12 &#xA;+ }&#xA;&amp;gt; head(pe$educ,15)&#xA; [1] 13 12 12 12 12 12 12 12 14 12 12 13 12 13 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For pedagogical clarity, I&#39;ve inserted &#34;before and after&#34; code, using &lt;strong&gt;head&lt;/strong&gt;, to show the &lt;strong&gt;educ&lt;/strong&gt; did indeed change where it should.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;if&lt;/strong&gt; statement works pretty much like the word &#34;if&#34; in English. First &lt;strong&gt;i&lt;/strong&gt; will be set to 1 in the loop, so R will test whether &lt;strong&gt;pe$educ[1]&lt;/strong&gt; is less than 13. If so, it will reset that element to 12; otherwise, do nothing. Then it will do the same for &lt;strong&gt;i&lt;/strong&gt; equal to 2, and so on. You can see above that, for instance, &lt;strong&gt;pe$educ[2]&lt;/strong&gt; did indeed change from 9 to 12.&lt;/p&gt; &#xA;&lt;p&gt;But there is a slicker (and actually more standard) way to do this (re-read the data file before running this, so as to be sure the code worked):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; edu &amp;lt;- pe$educ&#xA;&amp;gt; pe$educ &amp;lt;- ifelse(edu &amp;lt; 13,12,edu)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Once again, we&#39;ve broken what could have been one line into two, for clarity.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Now how did that work? As you see above, R&#39;s &lt;strong&gt;ifelse&lt;/strong&gt; function has three arguments, and its return value is a new vector, that in this case we&#39;ve reassigned to &lt;strong&gt;pe$educ&lt;/strong&gt;. Here, &lt;strong&gt;edu &amp;lt; 12&lt;/strong&gt; produces a vector of TRUEs and FALSEs. For each TRUE, we set the corresponding element of the output to 12; for each FALSE, we set the corresponding element of the output to the corresponding element of &lt;strong&gt;edu&lt;/strong&gt;. That&#39;s exactly what we want to happen.&lt;/p&gt; &#xA;&lt;p&gt;So, we can now produce the desired graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(pe$age,pe$wageinc,col=edu)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/WageAgeEdu.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;By the way, an ordinary &lt;strong&gt;if&lt;/strong&gt; can be paired with &lt;strong&gt;else&lt;/strong&gt; too. For example, say we need to set &lt;strong&gt;y&lt;/strong&gt; to either -1 or 1, depending on whether &lt;strong&gt;x&lt;/strong&gt; is less than 3. We could write&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (x &amp;lt; 3) y &amp;lt;- -1 else y &amp;lt;- 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One more important point: Using &lt;strong&gt;ifelse&lt;/strong&gt; instead of a loop in the above example is termed &lt;em&gt;vectorization&lt;/em&gt;. The name comes from the fact that &lt;strong&gt;ifelse&lt;/strong&gt; operates on vectors, while in the loop we operate on one individual element at a time.&lt;/p&gt; &#xA;&lt;p&gt;Vectorized code is typically much more compact than loop-based code, as was the case here. In some cases, though certainly not all, the vectorized version will be much faster.&lt;/p&gt; &#xA;&lt;p&gt;By the way, note the remark above, &#34;&lt;strong&gt;ifelse&lt;/strong&gt; operates on vectors.&#34; Let&#39;s revisit the above statement with this point in mind.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; pe$educ &amp;lt;- ifelse(edu &amp;lt; 13,12,edu)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It would be helpful to keep in mind that both the 13 and the 12 will be recycled, as expained before. The &lt;strong&gt;edu&lt;/strong&gt; vector is 20090 elements long, so in order to be compared on an element-to-element basis, the 13 has to be recycled to a vector consisting of 20090 elements that are each 13. The same holds for the 12.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s another example. Say we wish to recode the &lt;strong&gt;Nile&lt;/strong&gt; data to a new vector &lt;strong&gt;nile&lt;/strong&gt;, with values 1, 2 and 3, for the cases in which the value is less than 800, between 800 and 1150 inclusive, or greater than 1150. We could do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; nile &amp;lt;- ifelse(Nile &amp;gt; 1150,3,2)&#xA;&amp;gt; nile &amp;lt;- ifelse(Nile &amp;lt; 800,1,nile)&#xA;# check it &#xA;&amp;gt; table(nile)&#xA;nile&#xA; 1  2  3 &#xA;26 62 12 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the first call to &lt;strong&gt;ifelse&lt;/strong&gt;, the vector &lt;strong&gt;nile&lt;/strong&gt; (not &lt;strong&gt;Nile&lt;/strong&gt;; variable names etc. are case-sensitive) consists of 2s and 3s. The 3s are right, but the 2s need further work, hence the second call.&lt;/p&gt; &#xA;&lt;p&gt;But let&#39;s look closely at the second call, to review some things we&#39;ve seen before:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;strong&gt;Nile &amp;gt; 1150&lt;/strong&gt; evaluates to a vector of 100 TRUEs and FALSEs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The singleton value 800 is then recycled to one hundred 800s, to set up the &#39;&amp;lt;&#39;. Let&#39;s call the result of that &#39;&amp;lt;&#39; operation w.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then &lt;strong&gt;ifelse(Nile &amp;lt; 800,1,nile)&lt;/strong&gt; says, &#34;For each element in the vector w that is TRUE, write down a 1; for each element that is FALSE, write down whatever the corresponding value is in &lt;strong&gt;nile&lt;/strong&gt;.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Well, congratulations! With &lt;strong&gt;for&lt;/strong&gt; and now &lt;strong&gt;ifelse&lt;/strong&gt;, you&#39;ve really gotten into the programming business. We&#39;ll be using them a lot in the coming lessons.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Write a &lt;strong&gt;for&lt;/strong&gt; loop version of the &lt;strong&gt;Nile&lt;/strong&gt; example above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;keepfit&#34;&gt; &lt;/a&gt; Lesson 21: Do Professional Athletes Keep Fit?&lt;/h2&gt; &#xA;&lt;p&gt;Many people gain weight as they age. But what about professional athletes? They are supposed to keep fit, after all. Let&#39;s explore this using data on professional baseball players. (Dataset courtesy of the UCLA Statistics Dept.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; mlb &amp;lt;- read.table(&#39;https://raw.githubusercontent.com/matloff/fasteR/master/data/mlb.txt&#39;,header=TRUE)&#xA;&amp;gt; head(mlb)&#xA;             Name Team       Position Height Weight   Age PosCategory&#xA;1   Adam_Donachie  BAL        Catcher     74    180 22.99     Catcher&#xA;2       Paul_Bako  BAL        Catcher     74    215 34.69     Catcher&#xA;3 Ramon_Hernandez  BAL        Catcher     72    210 30.78     Catcher&#xA;4    Kevin_Millar  BAL  First_Baseman     72    210 35.43   Infielder&#xA;5     Chris_Gomez  BAL  First_Baseman     73    188 35.71   Infielder&#xA;6   Brian_Roberts  BAL Second_Baseman     69    176 29.39   Infielder&#xA;&amp;gt; class(mlb$Height)&#xA;[1] &#34;integer&#34;&#xA;&amp;gt; class(mlb$Name)&#xA;[1] &#34;factor&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; As usual, after reading in the data, we took a look around, glancing at the first few records, and looking at a couple of data types.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Now, as a first try in assessing the question of weight gain over time, let&#39;s look at the mean weight for each age group. In order to have groups, we&#39;ll round the ages to the nearest integer first, using the R function, &lt;strong&gt;round&lt;/strong&gt;, so that e.g. 21.8 becomes 22 and 35.1 becomes 35.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s explore the data using R&#39;s &lt;strong&gt;table&lt;/strong&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; age &amp;lt;- round(mlb$Age)&#xA;&amp;gt; table(age)&#xA;age&#xA; 21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40 &#xA;  2  20  58  80 103 104 106  84  80  74  70  44  44  32  32  22  20  12   6   7 &#xA; 41  42  43  44  49 &#xA;  9   2   2   1   1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Not surprisingly, there are few players of extreme age -- e.g. only two of age 21 and one of age 49. So we don&#39;t have a good sampling at those age levels, and may wish to exclude them (which we will do shortly).&lt;/p&gt; &#xA;&lt;p&gt;Now, how do we find group means? It&#39;s a perfect job for the &lt;strong&gt;tapply&lt;/strong&gt; function, in the same way we used it before:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; taout &amp;lt;- tapply(mlb$Weight,age,mean)&#xA;&amp;gt; taout&#xA;      21       22       23       24       25       26       27       28 &#xA;215.0000 192.8500 196.2241 194.4500 200.2427 200.4327 199.2925 203.9643 &#xA;      29       30       31       32       33       34       35       36 &#xA;199.4875 204.1757 202.8429 206.7500 203.5909 204.8750 209.6250 205.6364 &#xA;      37       38       39       40       41       42       43       44 &#xA;203.2000 200.6667 208.3333 207.8571 205.2222 230.5000 229.5000 175.0000 &#xA;      49 &#xA;188.0000 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To review: The call to &lt;strong&gt;tapply&lt;/strong&gt; instructed R to split the &lt;strong&gt;mlb$Weight&lt;/strong&gt; vector according to the corresponding elements in the &lt;strong&gt;age&lt;/strong&gt; vector, and then find the mean in each resulting group. This gives us exactly what we want, the mean weight in each age group.&lt;/p&gt; &#xA;&lt;p&gt;So, do we see a time trend above? Again, we should dismiss the extreme low and high ages, and we cannot expect a fully consistent upward trend over time, because each mean value is subject to sampling variation. (We view the data as a sample from the population of all professional baseball players, past, present and future.) That said, it does seem there is a slight upward trend; older players tend to be heavier!&lt;/p&gt; &#xA;&lt;p&gt;By the way, note that &lt;strong&gt;taout&lt;/strong&gt; is vector, but with additional information, in that the elements have names, in this case the ages. In fact, we can extract the names into its own vector if needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; names(taout)&#xA; [1] &#34;21&#34; &#34;22&#34; &#34;23&#34; &#34;24&#34; &#34;25&#34; &#34;26&#34; &#34;27&#34; &#34;28&#34; &#34;29&#34; &#34;30&#34; &#34;31&#34; &#34;32&#34; &#34;33&#34;&#xA;&#34;34&#34; &#34;35&#34;&#xA;[16] &#34;36&#34; &#34;37&#34; &#34;38&#34; &#34;39&#34; &#34;40&#34; &#34;41&#34; &#34;42&#34; &#34;43&#34; &#34;44&#34; &#34;49&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s plot the means against age. We&#39;ll just plot the means that are based on larger amounts of data. So we&#39;ll restrict it to, say, ages 23 through 35, all of whose means were based on at least 30 players. That age range corresponded to elements 3 through 15 of &lt;strong&gt;taout&lt;/strong&gt;, so here is the code for plotting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(23:35,taout[3:15])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/MLB.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There does indeed seem to be an upward trend in time. Ballplayers should be more careful!&lt;/p&gt; &#xA;&lt;p&gt;(Though it is far beyond the scope of this tutorial, which is on R rather than statistics, it should be pointed out that interpretation of the regression coefficients must be done with care. It may be, for instance, that heavier players tend to have longer careers. If so, fitting our linear form to data that has many older, heavier players may misleadingly imply that most individual players gain weight as they age. And of course, they would insist the gained weight is all muscle. :-) )&lt;/p&gt; &#xA;&lt;p&gt;Note again that the &lt;strong&gt;plot&lt;/strong&gt; function noticed that we supplied it with two arguments instead of one, and thus drew a two-dimensional scatter plot. For instance, in &lt;strong&gt;taout&lt;/strong&gt; we see that for age group 25, the mean weight was 200.2427, so there is a dot in the graph for the point (25,200.2427).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; There are lots of little experiments you can do on this dataset. For instance, use &lt;strong&gt;tapply&lt;/strong&gt; to find the mean weight for each position; is the stereotype of the &#34;beefy&#34; catcher accurate, i.e. is the mean weight for that position higher than for the others? Another suggestion: Plot the number of players at each age group, to visualize the ages at which the bulk of the players fall.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;linreg1&#34;&gt; &lt;/a&gt; Lesson 22: Linear Regression Analysis, I&lt;/h2&gt; &#xA;&lt;p&gt;Looking at the picture in the last lesson, it seems we could draw a straight line through that cloud of points that fits the points pretty well. Here is where linear regression analysis comes in.&lt;/p&gt; &#xA;&lt;p&gt;We of course cannot go into the details of statistical methodology here, but it will be helpful to at least get a good definition set:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;As mentioned, we treat the data as a sample from the (conceptual) population of all players, past, present and future. Accordingly, there is a population mean weight for each age group. It is assumed that those population means, when plotted against age, lie on some straight line.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In other words, our model is&lt;/p&gt; &#xA;&lt;p&gt;mean weight = β&lt;sub&gt;0&lt;/sub&gt; + β&lt;sub&gt;1&lt;/sub&gt; height&lt;/p&gt; &#xA;&lt;p&gt;where β&lt;sub&gt;0&lt;/sub&gt; and β&lt;sub&gt;1&lt;/sub&gt; are the intercept and slope of the population regression line.&lt;/p&gt; &#xA;&lt;p&gt;So, we need to use the data to estimate the slope and intercept of that straight line, which R&#39;s &lt;strong&gt;lm&lt;/strong&gt; (&#34;linear model&#34;) function does for us. We&#39;ll use the original dataset, since the one with rounded ages was just to guide our intuition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; lm(Weight ~ Age,data=mlb)&#xA;&#xA;Call:&#xA;lm(formula = Weight ~ Age, data = mlb)&#xA;&#xA;Coefficients:&#xA;(Intercept)          Age  &#xA;   181.4366       0.6936  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here the call instructed R to estimate the regression line of weight against age, based on the &lt;strong&gt;mlb&lt;/strong&gt; data.&lt;/p&gt; &#xA;&lt;p&gt;So the estimated slope and intercept are 0.6936 and 181.4366, respectively. (Remember, these are just sample estimates. We don&#39;t know the population values.) R has a provision by which we can draw the line, superimposed on our scatter plot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; abline(181.4366,0.6936)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/Add_abline.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; In the &lt;strong&gt;mtcars&lt;/strong&gt; data, fit a linear model of the regression of MPG against weight; what is the estimated effect of 100 pounds of extra weight?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;s3&#34;&gt; &lt;/a&gt; Lesson 23: S3 classes&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Remember, the point of computers is to alleviate us of work. We should avoid doing what the computer could do. For instance, concerning the graph in the last lesson: We had typed&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; abline(181.4366,0.6936)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but we really shouldn&#39;t have to type those numbers in by hand -- and we don&#39;t have to. Here&#39;s why:&lt;/p&gt; &#xA;&lt;p&gt;As mentioned earlier, R is an &lt;em&gt;object-oriented language&lt;/em&gt;. Everthing is an &lt;em&gt;object&lt;/em&gt;, and every object has a &lt;em&gt;class&lt;/em&gt;. One of the most common class structures is called &#39;S3&#39;.&lt;/p&gt; &#xA;&lt;p&gt;When we call &lt;strong&gt;lm&lt;/strong&gt;, the latter returns an S3 object of &#39;lm&#39; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; lmout &amp;lt;- lm(Weight ~ Age,data=mlb)&#xA;&amp;gt; class(lmout)&#xA;[1] &#34;lm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A handy way to take a quick glance at the contents of an object is &lt;strong&gt;str&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; str(lmout)&#xA;List of 12&#xA; $ coefficients : Named num [1:2] 181.437 0.694&#xA;  ..- attr(*, &#34;names&#34;)= chr [1:2] &#34;(Intercept)&#34; &#34;Age&#34;&#xA;...&#xA;...&#xA; - attr(*, &#34;class&#34;)= chr &#34;lm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Our use of ... here is to indicate that we&#39;ve omitted a lot of the output. But a couple of things stand out even in this excerpt:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Our &lt;strong&gt;lmout&lt;/strong&gt; object here is an R list (which is typical of S3 objects). That R list here has 12 elements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;But it has an extra &lt;em&gt;attribute&lt;/em&gt;, which is the class name, in this case &lt;strong&gt;&#39;lm&#39;&lt;/strong&gt;. (So the designers of R simply chose to name the class after the function, which is not always the case.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first of the elements of this R list is named &#39;coefficients&#39;, and it is a vector containing the slope and intercept.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;So, we don&#39;t have to type the slope and intercept in by hand after all.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cfs &amp;lt;- lmout$coefficients&#xA;&amp;gt; abline(a = cfs[1], b = cfs[2])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, &lt;strong&gt;abline()&lt;/strong&gt; is actually a &lt;em&gt;generic&lt;/em&gt; function, like &lt;strong&gt;print()&lt;/strong&gt; and &lt;strong&gt;plot()&lt;/strong&gt;. So if we want to be clever, we can add our line to the graph using this approach:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; abline(lmout)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, what about our original question -- do baseball players gain weight as they age? The answer appears to be yes; for each additional year of age, the estimated mean age increases by about 0.7 pound. That&#39;s about 7 pounds in 10 years, rather remarkable.&lt;/p&gt; &#xA;&lt;p&gt;Again, this is only an estimate -- 181.437 and 0.694 are estimates of the unknown population values β&lt;sub&gt;0&lt;/sub&gt; and β&lt;sub&gt;1&lt;/sub&gt;. -- generated from sample data. We can get an idea of the accuracy of this estimate by calculating a &lt;em&gt;confidence interval&lt;/em&gt;, but we&#39;ll leave that for statistics courses.&lt;/p&gt; &#xA;&lt;p&gt;But we can do more right now. One might ask, Shouldn&#39;t we also account for a player&#39;s height, not just his age? After all, taller people tend to be heavier. Yes, we should do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; lmo &amp;lt;- lm(Weight ~ Height + Age, data=mlb)&#xA;&amp;gt; lmo&#xA;&#xA;Call:&#xA;lm(formula = Weight ~ Height + Age, data = mlb)&#xA;&#xA;Coefficients:&#xA;(Intercept)       Height          Age  &#xA;  -187.6382       4.9236       0.9115  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we instruct R to find the estimated regression function of weight, using both height and age as predictors. The &#39;+&#39; doesn&#39;t mean addition; it is simply a delimiter between the predictors height and age in our regression specification.&lt;/p&gt; &#xA;&lt;p&gt;So the new model is&lt;/p&gt; &#xA;&lt;p&gt;mean weight = β&lt;sub&gt;0&lt;/sub&gt; + β&lt;sub&gt;1&lt;/sub&gt; height + β&lt;sub&gt;2&lt;/sub&gt; age&lt;/p&gt; &#xA;&lt;p&gt;This says:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;estimated mean weight = -187.6382 + 4.9236 height + 0.9115 age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, under this more refined analysis, things are even more pessimistic; players on average gain about 0.9 pounds per year. And by the way, an extra inch of height corresponds on average to about 4.9 pounds of extra weight; taller players are indeed heavier, as we surmized.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Warning:&lt;/span&gt; Though this is not a statistics tutorial &lt;em&gt;per se&lt;/em&gt;, an important point should be noted. Regression analysis has two goals, Description and Prediction. Our above analysis was aimed at the former -- we want to &lt;em&gt;describe&lt;/em&gt; the nature of fitness issues in pro baseball players. As we saw, a coefficient can change quite a lot when another predictor is added to the model, and in fact can even change sign (&#34;Simpson&#39;s Paradox&#34;). Suppose for instance the shorter players tend to have longer careers. If we do &lt;em&gt;not&lt;/em&gt; include height in our model, that omission might bias the age coefficient downward. Thus great care must be taken in interpreting coefficients in the Description setting. For Prediction, it is not as much of an issue.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; In the &lt;strong&gt;mtcars&lt;/strong&gt; data, fit a linear model of the regression of MPG against weight and horsepower; what is the estimated effect of 100 pounds of extra weight, for fixed horsepower?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;less15&#34;&gt; &lt;/a&gt; Lesson 24: Baseball Player Analysis (cont&#39;d.)&lt;/h2&gt; &#xA;&lt;p&gt;This lesson will be a little longer and more detail-oriented. But it will give you more practice on a number of earlier topics, and will also bring in some new R functions for you. Spending extra time on this lesson will pay substantial dividends.&lt;/p&gt; &#xA;&lt;p&gt;We might wonder whether the regression lines differ much among player positions. (A more statistical approach would be to include &lt;em&gt;interaction terms&lt;/em&gt; in the model.) Let&#39;s first see what positions are tabulated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; table(mlb$PosCategory)&#xA;   Catcher  Infielder Outfielder    Pitcher &#xA;        76        210        194        535 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s fit the regression lines separately for each position type.&lt;/p&gt; &#xA;&lt;p&gt;There are various ways to do this, involving avoidance of loops to various degrees. But we&#39;ll keep it simple, which will be clearer.&lt;/p&gt; &#xA;&lt;p&gt;First, let&#39;s split the data by position. You might at first think this is easily done using the &lt;strong&gt;split&lt;/strong&gt; function, but that doesn&#39;t work, since that function is for splitting vectors. Here we wish to split a data frame.&lt;/p&gt; &#xA;&lt;p&gt;So what can be done instead? We need to think creatively here. One solution is this:&lt;/p&gt; &#xA;&lt;p&gt;We need to determine the row numbers of the catchers, the row numbers of the infielders and so on. So we can take all the row numbers, &lt;strong&gt;1:nrow(mlb)&lt;/strong&gt;, and apply &lt;strong&gt;split&lt;/strong&gt; to that vector!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; rownums &amp;lt;- split(1:nrow(mlb),mlb$PosCategory)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; As usual, following an intricate operation like this, we should glance at the result:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; str(rownums)&#xA;List of 4&#xA; $ Catcher   : int [1:76] 1 2 3 35 36 66 67 68 101 102 ...&#xA; $ Infielder : int [1:210] 4 5 6 7 8 9 37 38 39 40 ...&#xA; $ Outfielder: int [1:194] 10 11 12 13 14 15 16 43 44 45 ...&#xA; $ Pitcher   : int [1:535] 17 18 19 20 21 22 23 24 25 26 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So the output is an R list; no surprise there, as we knew before before that &lt;strong&gt;split&lt;/strong&gt; produces an R list. Also not surprisingly, the elements of the list are named &#34;Catcher&#34; etc. So for example, the third outfielder is in row 12 of the data frame.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; The idea here, using &lt;strong&gt;split&lt;/strong&gt; on &lt;strong&gt;1:nrow(mlb)&lt;/strong&gt;, was a bit of a trick. Actually, it is a common ploy for experienced R coders, but you might ask, &#34;How could a novice come up with this idea?&#34; The answer, as noted several times already here, is that programming is a creative process. Creativity may not come quickly! In some case, one might need to mull over a problem for a long time before coming up with a solution. Don&#39;t give up! The more you think about a problem, the more skilled you will get, even if you sometimes come up empty-handed. And of course, there are many forums on the Web at which you can ask questions, e.g. Stack Overflow.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Now, remember, a nice thing about R lists is that we can reference their elements in various ways. The first element above, for instance, is any of &lt;strong&gt;rownums$Catcher&lt;/strong&gt;, &lt;strong&gt;rownums[[&#39;Catcher&#39;]]&lt;/strong&gt; and &lt;strong&gt;rownums[[1]]&lt;/strong&gt;, This versatility is great, as for example we can use the latter two forms to write loops.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;And a loop is exactly what we need here. We want to call &lt;strong&gt;lm&lt;/strong&gt; four times, once for each position. We could do this, say, with a loop beginning with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for (i in 1:4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to iterate through the four position types, but it will be clearer if we use the names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for (pos in c(&#39;Catcher&#39;,&#39;Infielder&#39;,&#39;Outfielder&#39;,&#39;Pitcher&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just an ordinary &#39;for&#39; loop. Recall such loops are of the form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for (variable in vector)...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of having a numeric vector, e.g. the 1:4 above, we now have a character vector, which each element of the vector being a character string, but the principles are the same.&lt;/p&gt; &#xA;&lt;p&gt;We could have &lt;strong&gt;lm&lt;/strong&gt; and &lt;strong&gt;print&lt;/strong&gt; calls in the body of the loop. But let&#39;s be a little fancier, building up a data frame with the output. We&#39;ll start with an empty frame, and keep adding rows to it.&lt;/p&gt; &#xA;&lt;p&gt;Our code is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;posNames &amp;lt;- c(&#39;Catcher&#39;,&#39;Infielder&#39;,&#39;Outfielder&#39;,&#39;Pitcher&#39;)&#xA;m &amp;lt;- data.frame()&#xA;for (pos in posNames) {&#xA;   posRows &amp;lt;- rownums[[pos]]&#xA;   lmo &amp;lt;- lm(Weight ~ Age, data = mlb[posRows,])&#xA;   newrow &amp;lt;- lmo$coefficients&#xA;   m &amp;lt;- rbind(m,newrow)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; m&#xA;  X180.828029016113 X0.794925225995348&#xA;1          180.8280          0.7949252&#xA;2          170.2466          0.8589593&#xA;3          176.2884          0.7883343&#xA;4          185.5994          0.6543904&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some key things to note here.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The overall strategy is to start with an empty data frame, then keep adding rows to it, one row of regression coefficients per playing position.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In order to add rows to &lt;strong&gt;m&lt;/strong&gt;, we used R&#39;s &lt;strong&gt;rbind&lt;/strong&gt; (&#34;row bind&#34;) function. The expression &lt;strong&gt;rbind(m,newrow)&lt;/strong&gt; forms a new data frame, by tacking &lt;strong&gt;newrow&lt;/strong&gt; onto &lt;strong&gt;m&lt;/strong&gt;. Here we reassign the result back to &lt;strong&gt;m&lt;/strong&gt;, also a common operation. (Note carefully: The &lt;strong&gt;rbind&lt;/strong&gt; operation did not change &lt;strong&gt;m&lt;/strong&gt;; it merely created a new data frame. To update &lt;strong&gt;m&lt;/strong&gt;, we needed to assign that new data frame to &lt;strong&gt;m&lt;/strong&gt;.) By the way, there is also a &lt;strong&gt;cbind&lt;/strong&gt; function for columns.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the call to &lt;strong&gt;lm&lt;/strong&gt;, we used &lt;strong&gt;mlb[rownums[[pos]],]&lt;/strong&gt; instead of &lt;strong&gt;mlb&lt;/strong&gt; as previously, since here we wanted to fit a regression line on each position subgroup. So, we restricted attention to only those rows of &lt;strong&gt;mlb&lt;/strong&gt; for which the position was equal to the current value of &lt;strong&gt;pos&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So, what happens is: &lt;strong&gt;m&lt;/strong&gt; is initially an empty data frame. Then the loop, for its first iteration, sets &lt;strong&gt;pos&lt;/strong&gt; to &#39;Catcher&#39;. Then a regression line will be fit to the rows of &lt;strong&gt;mlb&lt;/strong&gt; that are for catchers. That line is returned to us from &lt;strong&gt;lm&lt;/strong&gt;, and we assign it to &lt;strong&gt;lmo&lt;/strong&gt;. (Once again, the name is arbitrary; I chose this one to symbolize &#34;lm output.&#34;) We extract the coefficients and tack them on at the end of &lt;strong&gt;m&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; This is a very common &lt;em&gt;design pattern&lt;/em&gt; in R (and most other languages)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Nice output, with the two columns aligned. But those column names are awful, and the row labels should be nicer than 1,2,3,4. We can fix these things:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; row.names(m) &amp;lt;- posNames&#xA;&amp;gt; names(m) &amp;lt;- c(&#39;intercept&#39;,&#39;slope&#39;)&#xA;&amp;gt; m&#xA;           intercept     slope&#xA;Catcher     180.8280 0.7949252&#xA;Infielder   170.2466 0.8589593&#xA;Outfielder  176.2884 0.7883343&#xA;Pitcher     185.5994 0.6543904&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What happened here? We earlier saw the built-in &lt;strong&gt;row.names&lt;/strong&gt; function, so that setting row names was easy. But what about the column names? Recall that a data frame is actually an R list, consisting of several vectors of the same length, which form the columns. So, &lt;strong&gt;names(m)&lt;/strong&gt; is the names of the columns.&lt;/p&gt; &#xA;&lt;p&gt;So with a little finessing here, we got some nicely-formatted output. Moreover, we now have our results in a data frame for further use. For instance, we may wish to plot the four lines on the same graph, and we would use rows of the data frame as input.&lt;/p&gt; &#xA;&lt;p&gt;A little more finessing is possible. Look at the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;posNames &amp;lt;- c(&#39;Catcher&#39;,&#39;Infielder&#39;,&#39;Outfielder&#39;,&#39;Pitcher&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;re using a computer! We shouldn&#39;t have to type out these names by hand, as I did in this line. In fact, we already have them in one of our R objects, &lt;strong&gt;rownums&lt;/strong&gt;; recall our earlier check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; str(rownums)&#xA;List of 4&#xA; $ Catcher   : int [1:76] 1 2 3 35 36 66 67 68 101 102 ...&#xA; $ Infielder : int [1:210] 4 5 6 7 8 9 37 38 39 40 ...&#xA; $ Outfielder: int [1:194] 10 11 12 13 14 15 16 43 44 45 ...&#xA; $ Pitcher   : int [1:535] 17 18 19 20 21 22 23 24 25 26 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The elements of the R list &lt;strong&gt;rownums&lt;/strong&gt; are the names of the positions! So, the better way to set &lt;strong&gt;posNames&lt;/strong&gt; is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;posNames &amp;lt;- names(rownums)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; Again, the reader may be thinking, &#34;How in the world would I have been able to realize this?&#34; Again, the answer is that as you acquire more experience in coding, you will be more and more ability to come up with insights like this. Patience!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Finally, what about those numerical results? There is substantial variation in those estimated slopes, but again, they are only estimates. The question of whether there is substantial variation at the population level is one of statistical inference, beyond the scope of this R course.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;cran&#34;&gt; &lt;/a&gt; Lesson 25: R Packages, CRAN, Etc.&lt;/h2&gt; &#xA;&lt;p&gt;One of the great things about R is that are tens of thousands of packages that were developed by users and then contributed to the &lt;a href=&#34;https://cran.r-project.org&#34;&gt;CRAN repository&lt;/a&gt;. As of December 2020, there were nearly 17,000 packages there. If you need to do some special operation in R, say spatial data analysis, it may well be in there. You might take the &lt;a href=&#34;https://cran.r-project.org/web/views/&#34;&gt;CRAN Task Views&lt;/a&gt; as your starting point, or simply use Google, e.g. plugging in the search term &#34;CRAN spatial data.&#34; Other good sources of public R packages are &lt;a href=&#34;https://www.bioconductor.org/&#34;&gt;Bioconductor&lt;/a&gt; and useRs&#39; personal GitHub pages.&lt;/p&gt; &#xA;&lt;p&gt;Below, we&#39;ll introduce one of the most popular user-contributed packages, &lt;strong&gt;ggplot2&lt;/strong&gt;. But first, how does one install and load packages?&lt;/p&gt; &#xA;&lt;p&gt;First, one needs a place to put the packages. UseRs often designate a special folder/directory for their packages (both those they download and ones they write themselves). I use &#39;R&#39; in my home directory for that purpose, but if you don&#39;t specify a folder, your package installer will choose one for you. It won&#39;t matter as long as you are consistent. I&#39;ll assume you don&#39;t specify a package folder.&lt;/p&gt; &#xA;&lt;p&gt;To install, say, &lt;strong&gt;ggplot2&lt;/strong&gt;, you can type at the R prompt,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; install.packages(&#39;ggplot2&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in RStudio, choose Tools | Install Packages...&lt;/p&gt; &#xA;&lt;p&gt;When you want to use one of your installed packages, you need to tell R to load it, e.g. by typing at the R prompt,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; library(ggplot2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In RStudio, click the Packages button and select the one you want; there may be a delay while R makes a list of all your packages.&lt;/p&gt; &#xA;&lt;p&gt;Later, you&#39;ll write your own R packages. We won&#39;t cover that here, but there are many good tutorials for this on the Web.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;advanced&#34;&gt; &lt;/a&gt; Lesson 26: A Pause, Before Going on to Advanced Topics&lt;/h2&gt; &#xA;&lt;p&gt;At this point, you have a pretty good grounding in R. You are capable of doing lots of things in R. It may be all you need, but even if not, you know enough to ask a question online if you get stuck on something.&lt;/p&gt; &#xA;&lt;p&gt;The remaining topics are more advanced, and lessons will be somewhat longer and more detailed that the previous ones. But you are still strongly encouraged to go through them, as they will not only cover new topics but also give you deeper insight into the earlier material.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;gg2first&#34;&gt; &lt;/a&gt; Lesson 27: The ggplot2 Graphics Package&lt;/h2&gt; &#xA;&lt;p&gt;Now, on to &lt;strong&gt;ggplot2&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;ggplot2&lt;/strong&gt; package was written by Hadley Wickham, who later became Chief Scientist at RStudio. It&#39;s highly complex, with well over 400 functions, and rather abstract, but quite powerful. We will touch on it at various points in this tutorial, while staying with base-R graphics when it is easier to go that route.&lt;/p&gt; &#xA;&lt;p&gt;Now to build up to using &lt;strong&gt;ggplot2&lt;/strong&gt;, let&#39;s do a bit more with base-R graphics first, continuing with our weight/age investigation of the ballplayers. To begin, let&#39;s do a scatter plot of weight against age, color-coded by position. We could type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; plot(mlb$Age,mlb$Weight,col=mlb$PosCategory)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;but to save some typing, let&#39;s use R&#39;s &lt;strong&gt;with&lt;/strong&gt; function (we&#39;ll change the point size while we are at it):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; with(mlb,plot(Age,Weight,col=PosCategory,cex=0.6))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By writing &lt;strong&gt;with&lt;/strong&gt;, we tell R to take Age, Weight and PosCategory in the context of &lt;strong&gt;mlb&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/WtAgePosBase.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is how we can do it in &lt;strong&gt;ggplot2&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;First, I make an empty plot, based on the data frame &lt;strong&gt;mlb&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; p &amp;lt;- ggplot(mlb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nothing will appear on the screen. The package displays only when you &#34;print&#34; the plot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will just display an empty plot. (Try it.) By the way, recall that any expression you type, even 1 + 1, will be evaluated and printed to the screen. Here the plot (albeit) empty is printed to the screen.&lt;/p&gt; &#xA;&lt;p&gt;Now let&#39;s do something useful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; p + geom_point(aes(x = Age, y = Weight, col = PosCategory),cex=0.6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/inst/images/WtAgePosGG.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;What happened here? Quite a bit, actually, so let&#39;s take this slowly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We took our existing (blank) plot, &lt;strong&gt;p&lt;/strong&gt;, and by writing the&#39;+&#39; sign, directed &lt;strong&gt;ggplot2&lt;/strong&gt; to add to the plot &lt;strong&gt;p&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now, WHAT do we want added? We are saying, &#34;&lt;strong&gt;ggplot2&lt;/strong&gt;, please add to the plot &lt;strong&gt;p&lt;/strong&gt; whatever &lt;strong&gt;geom_point()&lt;/strong&gt; returns.&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note that &lt;strong&gt;geom_point()&lt;/strong&gt; is a &lt;strong&gt;ggplot2&lt;/strong&gt; function. Its task is to produce scatter plots.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Here are the details on the arguments to &lt;strong&gt;geom_point&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;We want to plot weight against height. We do not need to specify what data frame these two variables are from, as we already stated that the plot &lt;strong&gt;p&lt;/strong&gt; is for the data frame &lt;strong&gt;mlb&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;We are also specifying that the color coding will be according to the player position, again from &lt;strong&gt;mlb&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When R evaluates that entire expression, &lt;strong&gt;p + geom_point(aes(x = Age, y = Weight, col = PosCategory),cex=0.6)&lt;/strong&gt;, the result will be another &lt;strong&gt;ggplot2&lt;/strong&gt; graph object. Since we typed that expression at the &#39;&amp;gt;&#39; prompt, it was then printed to the screen as seen above.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is one mystery left, though: What does the function &lt;strong&gt;aes&lt;/strong&gt; (&#39;aesthetic&#34;) do? And why is the expression &lt;strong&gt;cex=0.6&lt;/strong&gt; NOT an argument to &lt;strong&gt;aes&lt;/strong&gt;? Unfortunately, there are no easy answers to these questions, and in a rare exception to our rule of explaining all, we will just have to leave this as something that must be done.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One nice thing is that we automatically got a legend printed to the right of the graph, so we know which color corresponds to which position. We can do this in base-R graphics too, but need to set an argument for it in &lt;strong&gt;plot&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;appfam&#34;&gt; &lt;/a&gt; Lesson 28: Should You Use Functional Programming?&lt;/h2&gt; &#xA;&lt;p&gt;Earlier in this tutorial, we&#39;ve found R&#39;s &lt;strong&gt;tapply&lt;/strong&gt; function to be quite handy. There are several others in this family, notably &lt;strong&gt;apply&lt;/strong&gt;, &lt;strong&gt;lapply&lt;/strong&gt; and &lt;strong&gt;sapply&lt;/strong&gt;. In addition, there are other related functions, such as &lt;strong&gt;do.call&lt;/strong&gt; and &lt;strong&gt;Reduce()&lt;/strong&gt;. And there are a number of counterparts in the Tidyverse &lt;strong&gt;purrr&lt;/strong&gt; package. All of these go under the aegis of &lt;em&gt;functional programming&lt;/em&gt; (FP).&lt;/p&gt; &#xA;&lt;p&gt;To many, FP is intended as a higher-level replacement for loops, and some members of the R community view that as desirable, even a must. I personally take a more moderate point of view, but before discussing the controversy, let&#39;s see how FP works as a loop-replacement.&lt;/p&gt; &#xA;&lt;p&gt;As a simple example, say we have a nonnegative integer vector &lt;strong&gt;x&lt;/strong&gt;, and want code that counts doubles each element that is greater than 9. Of course, this is something we should not use a loop with in the first place. We should take advantage of R&#39;s vectorization capabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- ifelse(x &amp;gt; 9,2*x,x)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But let&#39;s ignore vectorization, for the sake of illustrating the issues, and write up a loop version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;for (i in 1:5) if (x[i] &amp;gt; 9) x[i] &amp;lt;- 2 * x[i]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, how would we replace this loop by a call to R&#39;s &lt;strong&gt;sapply&lt;/strong&gt; function? The latter has the call form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sapply(X,FUN)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;strong&gt;X&lt;/strong&gt; is an R factor and &lt;strong&gt;FUN&lt;/strong&gt; is a function. We will assume here that &lt;strong&gt;FUN&lt;/strong&gt; returns a number, not a vector or other R object. The action of the function is to apply &lt;strong&gt;FUN&lt;/strong&gt; on each element of &lt;strong&gt;X&lt;/strong&gt;, producing a new vector. (It of course can be reassigned to the old one.)&lt;/p&gt; &#xA;&lt;p&gt;The key is defining &lt;strong&gt;FUN&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;doubleIt &amp;lt;- function(z) if(z &amp;gt; 9) return(2*z) else return(z)&#xA;sapply(x,doubleIt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s check:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; x &amp;lt;- c(5,12,13,8,88)&#xA;&amp;gt; x &amp;lt;- sapply(x,doubleIt)&#xA;&amp;gt; x&#xA;[1]   5  24  26   8 176&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, we can use what is called an &lt;em&gt;anonymous&lt;/em&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; x &amp;lt;- c(5,12,13,8,88)&#xA;&amp;gt; x &amp;lt;- sapply(x,function(z) if(z &amp;gt; 9) return(2*z) else return(z))&#xA;&amp;gt; x&#xA;[1]   5  24  26   8 176&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of defining the function separately, we define it right there in the second argument of &lt;strong&gt;sapply&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now let&#39;s consider something more elaborate. Recall our earlier baseball player example, in which we wanted to fit separate regression lines to each of the four player position categories. We used a loop, which for convenience I&#39;ll duplicate here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rownums &amp;lt;- split(1:nrow(mlb),mlb$PosCategory)&#xA;posNames &amp;lt;- c(&#39;Catcher&#39;,&#39;Infielder&#39;,&#39;Outfielder&#39;,&#39;Pitcher&#39;)&#xA;m &amp;lt;- data.frame()&#xA;for (pos in posNames) {&#xA;  lmo &amp;lt;- lm(Weight ~ Age, data = mlb[rownums[[pos]],])&#xA;  newrow &amp;lt;- lmo$coefficients&#xA;  m &amp;lt;- rbind(m,newrow)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How might we do this in FP? We&#39;ve seen the &lt;strong&gt;tapply&lt;/strong&gt; function a couple of times already. Now let&#39;s turn to &lt;strong&gt;lapply&lt;/strong&gt; (&#34;list apply&#34;). The call form is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lapply(VectorOrList,FUN)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This first argument must be a vector or list, and the second argument must be the name of a one-argument function. This calls &lt;strong&gt;FUN&lt;/strong&gt; on each element of &lt;strong&gt;VetorcOrList&lt;/strong&gt;, placing the return values in a new list.&lt;/p&gt; &#xA;&lt;p&gt;How might we use that here? Well, &lt;strong&gt;lapply&lt;/strong&gt;, as the name implies, is aimed at working on lists. Do we have any? Why yes, &lt;strong&gt;rownums&lt;/strong&gt; is a list!&lt;/p&gt; &#xA;&lt;p&gt;And indeed, we do want to take some action on each element of that list: We want to fit a linear regression model to the rows in that element. It is natural, then, to take for &lt;strong&gt;FUN&lt;/strong&gt; the following function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;zlm &amp;lt;- function(rws) lm(Weight ~ Age, data=mlb[rws,])$coefficients&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here &lt;strong&gt;rws&lt;/strong&gt; is a set of row numbers, e.g. those for the pitchers. This function calls &lt;strong&gt;lm&lt;/strong&gt; on those rows, i.e. on the data &lt;strong&gt;mlb[rws,]&lt;/strong&gt;, then extracts the regression coefficients.&lt;/p&gt; &#xA;&lt;p&gt;The code then is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; zlm &amp;lt;- function(rws) lm(Weight ~ Age, data=mlb[rws,])$coefficients&#xA;&amp;gt; w &amp;lt;- lapply(rownums,zlm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The call to &lt;strong&gt;lapply&lt;/strong&gt; then says, run &lt;strong&gt;zlm&lt;/strong&gt; on each set of rows we see in &lt;strong&gt;rownums&lt;/strong&gt;, placing the coefficient vectors in an output list. Specifically: Recall that the first element of &lt;strong&gt;rownums&lt;/strong&gt; was &lt;strong&gt;rownums[[&#39;catcher&#39;]]&lt;/strong&gt;. So, first &lt;strong&gt;lapply&lt;/strong&gt; will make the call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;zlm(rownums[[&#39;Catcher&#39;]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will fit the desired regression model on the catcher data. Then &lt;strong&gt;lapply&lt;/strong&gt; will do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;zlm(rownums[[&#39;Infielder&#39;]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and so on. The outputs of the four &lt;strong&gt;lm&lt;/strong&gt; calls will be returned in an R list, which we have assigned to &lt;strong&gt;w&lt;/strong&gt; above. Let&#39;s check the first one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; w[[1]]&#xA;(Intercept)         Age &#xA;180.8280290   0.7949252 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;jibing with &lt;strong&gt;m[1,]&lt;/strong&gt; in our data-frame/loop appraoch above.&lt;/p&gt; &#xA;&lt;p&gt;Well, then, what did we accomplish -- if anything -- by using &lt;strong&gt;lapply&lt;/strong&gt; here rather than our earlier approach using a loop? Certainly the &lt;strong&gt;lapply&lt;/strong&gt; version did make for more compact code, just 2 lines. But we had to think a harder to come up with the idea. Also, printing it out is less compact:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; w&#xA;$Catcher&#xA;(Intercept)         Age &#xA;180.8280290   0.7949252 &#xA;&#xA;$Infielder&#xA;(Intercept)         Age &#xA;170.2465739   0.8589593 &#xA;&#xA;$Outfielder&#xA;(Intercept)         Age &#xA;176.2884016   0.7883343 &#xA;&#xA;$Pitcher&#xA;(Intercept)         Age &#xA;185.5993689   0.6543904 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Actually, we can use &lt;strong&gt;sapply&lt;/strong&gt; here instead of &lt;strong&gt;lapply&lt;/strong&gt;, with a nicer printing.)&lt;/p&gt; &#xA;&lt;p&gt;So, should beginning R coders use FP? Actually, even I, with decades of coding experience, take a moderate approach. The criterion for loop-based (LB) code vs. FP should be to ask these questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Would FP code be easier to write than LB in this case?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Would FP code be easier to debug than LB in this case?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Would FP code be easier to read -- either by others, or by myself 6 months from now -- than LB in this case?&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the code in this tutorial in which we&#39;ve used &lt;strong&gt;tapply&lt;/strong&gt;, I believe the answers to the above questions are definitely Yes. But for the &lt;strong&gt;lapply&lt;/strong&gt; example above, I would say the answer is No -- &lt;em&gt;especially for beginning coders&lt;/em&gt;, but even for myself.&lt;/p&gt; &#xA;&lt;p&gt;Beginners are in the process of learning functions. FP by definition is based on writing functions, thus making FP a more abstract and difficult process. And I certainly disagree with the doctrinnaire view of some that one should never write loops.&lt;/p&gt; &#xA;&lt;p&gt;My recommendation is to take things on a case-by-case basis.&lt;/p&gt; &#xA;&lt;p&gt;Now, let&#39;s turn to another central function in the &lt;strong&gt;apply&lt;/strong&gt; family. Not surprisingly, it&#39;s named &lt;strong&gt;apply&lt;/strong&gt;! It is usually used on &lt;strong&gt;matrix&lt;/strong&gt; objects (like data frames, but with the contents being all of the same type, e.g. all numerical), on either rows or columnṡ, but can be used on data frames too.&lt;/p&gt; &#xA;&lt;p&gt;The call form is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;apply(d,rc,g)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here R will apply the function &lt;strong&gt;g&lt;/strong&gt; to each row (&lt;strong&gt;rc&lt;/strong&gt; = 1) or column (&lt;strong&gt;rc&lt;/strong&gt; = 2) of the data &lt;strong&gt;d&lt;/strong&gt;. If the function &lt;strong&gt;g&lt;/strong&gt; returns a number, then &lt;strong&gt;apply&lt;/strong&gt; will return a vector.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s find the max values for the variables in the &lt;strong&gt;pima&lt;/strong&gt; data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; apply(pima,2,max)&#xA; pregnant   glucose diastolic   triceps   insulin       bmi  diabetes&#xA;age &#xA;    17.00    199.00    122.00     99.00    846.00     67.10      2.42&#xA;81.00 &#xA;     test &#xA;     1.00 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that to use the &lt;strong&gt;apply&lt;/strong&gt; family, you can either use a built-in R function, e.g. &lt;strong&gt;max&lt;/strong&gt; here, or one you write yourself, such as &lt;strong&gt;zlm&lt;/strong&gt; above.&lt;/p&gt; &#xA;&lt;p&gt;The R &lt;strong&gt;apply&lt;/strong&gt; family includes other functions as well, They are quite useful, but don&#39;t use them solely for the sake of avoiding writing a loop. More compact code may not be easier.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;txt&#34;&gt; &lt;/a&gt; Lesson 29: Simple Text Processing, I&lt;/h2&gt; &#xA;&lt;p&gt;These days, text processing is big in the Data Science field, e.g. in Natural Language Processing applications. In this lesson, we&#39;ll do a simple yet practical example, in order to illustrate some key functions in base-R. (R has many packages for advanced text work, such as &lt;strong&gt;tm&lt;/strong&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Our example will cover reading in a file of text, and compiling a word count, i.e. calculating the number of times each word appears. This kind of task is at the core of many text classification algorithms.&lt;/p&gt; &#xA;&lt;p&gt;The file is &lt;a href=&#34;https://raw.githubusercontent.com/matloff/fasteR/master/data/aboutR.txt&#34;&gt;here&lt;/a&gt;. It&#39;s basically the About section of the &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R Project home page&lt;/a&gt;. Here are the first few lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;What is R?&#xA;&#xA;Introduction to R&#xA;&#xA;   R is a language and environment for statistical computing and graphics.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, how can we read the file? For instance, &lt;strong&gt;read.table&lt;/strong&gt; won&#39;t work, as it expects the same number of nonblank fields on each line. As you can see above, our file has a variable number of such fields per line.&lt;/p&gt; &#xA;&lt;p&gt;Instead, we read the lines of the file via a function named, not surprisingly, &lt;strong&gt;readLines&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; abt &amp;lt;- readLines(&#39;https://raw.githubusercontent.com/matloff/fasteR/master/data/aboutR.txt&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, what exactly is in &lt;strong&gt;abt&lt;/strong&gt; now? Let&#39;s turn to our usual inspection tools, &lt;strong&gt;str&lt;/strong&gt; and &lt;strong&gt;head&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; str(abt)&#xA; chr [1:70] &#34;&#34; &#34;What is R?&#34; &#34;&#34; &#34;Introduction to R&#34; &#34;&#34; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, &lt;strong&gt;abt&lt;/strong&gt; is a vector of 70 elements, of type character. Each element of this vector is one line from the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; head(abt)&#xA;[1] &#34;&#34;                                                                          &#xA;[2] &#34;What is R?&#34;                                                                &#xA;[3] &#34;&#34;                                                                          &#xA;[4] &#34;Introduction to R&#34;                                                         &#xA;[5] &#34;&#34;                                                                          &#xA;[6] &#34;   R is a language and environment for statistical computing and graphics.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first line in the file was empty, so &lt;strong&gt;abt[1]&lt;/strong&gt; is &#34;&#34;, and so on.&lt;/p&gt; &#xA;&lt;p&gt;Now, to count the number of words in the file, we&#39;ll need a way to count the number in each line, which we will then sum. R&#39;s &lt;strong&gt;strsplit&lt;/strong&gt; function will serve us well here, e.g. for line 4:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; y &amp;lt;- strsplit(abt[4],&#39; &#39;)&#xA;&amp;gt; y&#xA;[[1]]&#xA;[1] &#34;Introduction&#34; &#34;to&#34;           &#34;R&#34;   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(That second argument, &#39; &#39;, means we want the blank character to be our splitting delimiter.&lt;/p&gt; &#xA;&lt;p&gt;Good, it split the line into the three words on that line, &#34;Introduction&#34;, &#34;to&#34;, and &#34;R&#34;.&lt;/p&gt; &#xA;&lt;p&gt;But be careful! What is that [[1]] doing there? Remember, the double bracket notation is for R lists. So, &lt;strong&gt;strsplit&lt;/strong&gt; has split &lt;strong&gt;abt[4]&lt;/strong&gt; a list with one element, and that element is in turn the three-element character vector &lt;strong&gt;c(&#34;Introduction&#34;,&#34;to&#34;,&#34;R&#34;)&lt;/strong&gt;. So for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; y[[1]][2]&#xA;[1] &#34;to&#34;&#xA;&amp;gt; y[[1]][3]&#xA;[1] &#34;R&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why the R list form? Well, &lt;strong&gt;strsplit&lt;/strong&gt; can be applied to the entire character vector &lt;strong&gt;abt&lt;/strong&gt;, yielding a list of 70 elements; the i-th such element will contain the split form of the i-th line in the file, e.g. line 6:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; w &amp;lt;- strsplit(abt,&#39; &#39;)&#xA;&amp;gt; w[[6]]  # example&#xA; [1] &#34;&#34;            &#34;&#34;            &#34;&#34;            &#34;R&#34;           &#34;is&#34;         &#xA; [6] &#34;a&#34;           &#34;language&#34;    &#34;and&#34;         &#34;environment&#34; &#34;for&#34;        &#xA;[11] &#34;statistical&#34; &#34;computing&#34;   &#34;and&#34;         &#34;graphics.&#34;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yep, that&#39;s the split form of line 6.&lt;/p&gt; &#xA;&lt;p&gt;The material beginning with the # sign is what is called a &lt;em&gt;comment&lt;/em&gt; in the programming world. It does not get executed by R, but it is a memo to us, the programmer, a note to help us remember what we did.&lt;/p&gt; &#xA;&lt;p&gt;Comments are extremely important. When we read our code six months from now, we will have forgotten most of it, so comments help us reorient. The same holds if someone else reads our code. Comments -- &lt;em&gt;meaningful&lt;/em&gt; comments -- are key to good coding. More on this in a future lesson.&lt;/p&gt; &#xA;&lt;p&gt;But we also see another snag. The above output tells us that R took line 6, which has 11 words, and split into 14 words -- the first 3 of which are empty words &#34;&#34;. This is because the first three characters in line 6 are blanks. When there is more than one consecutive blank, the &lt;strong&gt;strsplit&lt;/strong&gt; function treats the excess blanks as &#34;words.&#34; (This comes as quite a surprise to Python programmers.)&lt;/p&gt; &#xA;&lt;p&gt;So, how to fix it? Answering that question will give us a chance to learn more about R in general.&lt;/p&gt; &#xA;&lt;p&gt;For that particular line, we could do, say, is remove those empty &#34;words&#34; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; z &amp;lt;- w[[6]]&#xA;&amp;gt; z &amp;lt;- z[z != &#34;&#34;]&#xA;&amp;gt; z&#xA; [1] &#34;R&#34;           &#34;is&#34;          &#34;a&#34;           &#34;language&#34;    &#34;and&#34;        &#xA; [6] &#34;environment&#34; &#34;for&#34;         &#34;statistical&#34; &#34;computing&#34;   &#34;and&#34;        &#xA;[11] &#34;graphics.&#34;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;R&#39;s &#39;!=&#39; means &#34;not equal to.&#34; By the way, &#39;!&#39; means &#34;not&#34; in R, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; 3 &amp;lt; 8&#xA;[1] TRUE&#xA;&amp;gt; !(3 &amp;lt; 8)&#xA;[1] FALSE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So what we did to &lt;strong&gt;z&lt;/strong&gt; above followed our usual pattern:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The expression &lt;strong&gt;z != &#34;&#34;&lt;/strong&gt; yields a bunch of TRUEs and FALSEs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The operation &lt;strong&gt;z[bunch of TRUEs and FALSEs]&lt;/strong&gt; extracts those elements of &lt;strong&gt;z&lt;/strong&gt; at which there are TRUEs, which are exactly the ones we want to keep here.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; When you write some code that looks like it will be generally useful, make a function out of it, and save it for future use. The above code to delete the empty &#34;words&#34; sounds like something worth keeping. So, let&#39;s write it in function form:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;extractNonemptyWords &amp;lt;- function(s) &#xA;{&#xA;   z &amp;lt;- strsplit(s,&#39; &#39;)[[1]]&#xA;   z[z != &#34;&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recall that in R functions, the last computed value is automatically returned. The expression &lt;strong&gt;z[z != &#34;&#34;]&lt;/strong&gt; evaluates to the set of nonempty words, and it is returned.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; As mentioned, we should probably save that function for future use. We could save it using the &lt;strong&gt;save&lt;/strong&gt; function as discussed earlier, but it would be better to save our &#34;home grown&#34; functions in one or more packages, maybe even submitting them to CRAN. More on this in a later lesson.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll continue with this example in the next lesson, but first, time for a &lt;strong&gt;Your Turn&lt;/strong&gt; session.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; That [[1]] expression in the body of &lt;strong&gt;extractNonemptyWords&lt;/strong&gt; was crucial! Try the code without it, and see if you can explain the result, which is not what we desire. &lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; This illustrates a common error for beginners and veterans alike. The error message probably won&#39;t be helpful! So keep this frequent error in mind, both when you&#39;re writing code and viewing cryptic error messages.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We can then call our &lt;strong&gt;extractNonemptyWords&lt;/strong&gt; function on each line of the file, say in a loop. We&#39;ll do this in the next section.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Your Turn:&lt;/strong&gt; Write a function with call form &lt;strong&gt;delNAs(x)&lt;/strong&gt;, that returns &lt;strong&gt;x&lt;/strong&gt; with NAs deleted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;txt1&#34;&gt; &lt;/a&gt; Lesson 30: Simple Text Processing, II&lt;/h2&gt; &#xA;&lt;p&gt;So, let&#39;s use our &lt;strong&gt;extractNonemptyWords&lt;/strong&gt; function on our &lt;strong&gt;abt&lt;/strong&gt; vector. Here&#39;s a loop way to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;allWords &amp;lt;- NULL  # start with empty vector&#xA;for (i in 1:70) {&#xA;   thisLine &amp;lt;- extractNonemptyWords(abt[i])&#xA;   allWords &amp;lt;- c(allWords,thisLine)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the result, i.e. the final value of &lt;strong&gt;allWords&lt;/strong&gt;, will be one long vector, consisting of all the words in the file.&lt;/p&gt; &#xA;&lt;p&gt;As usual, it is a must to inspect the result, say the first 25 elements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; head(allWords,25)&#xA; [1] &#34;What&#34;         &#34;is&#34;           &#34;R?&#34;          &#xA; [4] &#34;Introduction&#34; &#34;to&#34;           &#34;R&#34;           &#xA; [7] &#34;R&#34;            &#34;is&#34;           &#34;a&#34;           &#xA;[10] &#34;language&#34;     &#34;and&#34;          &#34;environment&#34; &#xA;[13] &#34;for&#34;          &#34;statistical&#34;  &#34;computing&#34;   &#xA;[16] &#34;and&#34;          &#34;graphics.&#34;    &#34;It&#34;          &#xA;[19] &#34;is&#34;           &#34;a&#34;            &#34;GNU&#34;         &#xA;[22] &#34;project&#34;      &#34;which&#34;        &#34;is&#34;          &#xA;[25] &#34;similar&#34;     &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Good, all the words seem to be there, and the &#34;&#34; are NOT there, just as desired. But how to get the word counts? Why, it&#39;s our old friend, &lt;strong&gt;tapply&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; q &amp;lt;- tapply(allWords,allWords,length)&#xA;&amp;gt; head(q,25)&#xA;            ;            …) “environment”      (easily)     (formerly &#xA;            1             1             1             1             1 &#xA;   (including       (linear             *             ©             a &#xA;            1             1             5             1            13 &#xA;        about     accretion     activity.           add    additional &#xA;            3             1             1             1             1 &#xA;     Advanced   algorithmic        allows            an      analysis &#xA;            1             1             1             5             2 &#xA;    analysis,           and           are        around       arrays, &#xA;            2            27             4             1             1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Actually, this really the same pattern we saw before, with the &lt;strong&gt;length&lt;/strong&gt; function as our third argument. It may look a little odd that the first two arguments are identical, but it makes sense:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;We split up the &lt;strong&gt;allWords&lt;/strong&gt; vector into piles, according to the second argument, which happens to be the same vector.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We apply the &lt;strong&gt;length&lt;/strong&gt; function to each pile, giving us the count in each pile, exactly what we needed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span style=&#34;color:red&#34;&gt;Tip:&lt;/span&gt; In coding, certain patterns do arise often, one did here. In fact, there are coding books with &#34;design patterns&#34; in their titles. Take note when you see the same pattern a lot.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re not fully done yet. For instance, we have a punctuation problem, where periods, commas and so on are considered parts of words, such as the period in &lt;strong&gt;allWords[17]&lt;/strong&gt; seen above, &#39;graphics.&#39; We also probably should change capital letters to lower&lt;/p&gt; &#xA;&lt;p&gt;For major usage, we should consider using one of the advanced R packages in text processing. For instance, the &lt;strong&gt;tm&lt;/strong&gt; package has a &lt;strong&gt;removePunctuation&lt;/strong&gt; function. But let&#39;s see how we can do this with the basics.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll use R&#39;s &lt;strong&gt;gsub&lt;/strong&gt; function. It&#39;s call form, as we&#39;ll use it, is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gsub(string_to_change,replacement,input_vector,fixed=TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; a &amp;lt;- c(&#39;abc&#39;,&#39;de.&#39;)&#xA;&amp;gt; gsub(&#39;.&#39;,&#39;&#39;,a,fixed=TRUE)  # replace &#39;.&#39; by empty stringW&#xA;[1] &#34;abc&#34; &#34;de&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The &lt;strong&gt;fixed&lt;/strong&gt; argument is complex, and pops up in all the R string manipulation packages. This again is something you should use for now, and look into when you become more skilled at R.)&lt;/p&gt; &#xA;&lt;p&gt;So, to remove all periods in &lt;strong&gt;allWords&lt;/strong&gt;, we can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; awNoPers &amp;lt;- gsub(&#39;.&#39;,&#39;&#39;,allWords,fixed=TRUE) &#xA;&amp;gt; awNoPers[17]  # check that it worked&#xA;[1] &#34;graphics&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;empty strings; empty lines; &#39;for&#39; loop to get tot number of words;&#xA;fancier, Reduce()&#xA;--&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;linreg2&#34;&gt; &lt;/a&gt; Lesson 31: Linear Regression Analysis, II&lt;/h2&gt; &#xA;&lt;p&gt;Continuing our look at linear regression analysis using R, let&#39;s look at the famous &lt;a href=&#34;ttps://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset&#34;&gt;bike sharing data&lt;/a&gt;. (See the latter site for the documentation; e.g. temperature has been scaled, rather than measured in degrees.) It&#39;s in a &lt;strong&gt;.zip&lt;/strong&gt; file, so it will need a little extra preprocessing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# fetch from Web, and store the downloaded data to the file &#39;bike.sip&#39;&#xA;&amp;gt; download.file(&#39;https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip&#39;,&#39;bike.zip&#39;)&#xA;&amp;gt; unzip(&#39;bike.zip&#39;)  # out come the files &#39;day.csv&#39; and &#39;hour.csv&#39;&#xA;&amp;gt; day &amp;lt;- read.csv(&#39;day.csv&#39;,header=TRUE)&#xA;&amp;gt; head(day)  # always take a look around!&#xA;  instant     dteday season yr mnth holiday weekday workingday weathersit&#xA;1       1 2011-01-01      1  0    1       0       6          0          2&#xA;2       2 2011-01-02      1  0    1       0       0          0          2&#xA;3       3 2011-01-03      1  0    1       0       1          1          1&#xA;4       4 2011-01-04      1  0    1       0       2          1          1&#xA;5       5 2011-01-05      1  0    1       0       3          1          1&#xA;6       6 2011-01-06      1  0    1       0       4          1          1&#xA;      temp    atemp      hum windspeed casual registered  cnt&#xA;1 0.344167 0.363625 0.805833 0.1604460    331        654  985&#xA;2 0.363478 0.353739 0.696087 0.2485390    131        670  801&#xA;3 0.196364 0.189405 0.437273 0.2483090    120       1229 1349&#xA;4 0.200000 0.212122 0.590435 0.1602960    108       1454 1562&#xA;5 0.226957 0.229270 0.436957 0.1869000     82       1518 1600&#xA;6 0.204348 0.233209 0.518261 0.0895652     88       1518 1606&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By the way, the weather variables have been rescaled to the interval [0,1]. A value of 0.28, for instance, means 28% of the way from the minimum to the maximum value of this variable.&lt;/p&gt; &#xA;&lt;p&gt;One new concept here is the presence of &lt;em&gt;indicator&lt;/em&gt; variables, more informally known as &lt;em&gt;dummy variables&lt;/em&gt;. These are variables taking only the values 0 and 1, with a 1 &#34;indicating&#34; that some trait is present. For instance, the &lt;strong&gt;holiday&lt;/strong&gt; variable is either 1 or 0, depending on whether that day was a holiday (which might affect the demand for bikes that day).&lt;/p&gt; &#xA;&lt;p&gt;Those who manage this bike sharing service may wish to predict future demand for bikes, say the next day, to aid in their planning. As an example, let&#39;s try to predict the number of casual riders from some weather variables and the dummy variable &lt;strong&gt;workingday&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; day1 &amp;lt;- day[,c(8,10,12:14)]&#xA;&amp;gt; head(day1)&#xA;  workingday     temp      hum windspeed casual&#xA;1          0 0.344167 0.805833 0.1604460    331&#xA;2          0 0.363478 0.696087 0.2485390    131&#xA;3          1 0.196364 0.437273 0.2483090    120&#xA;4          1 0.200000 0.590435 0.1602960    108&#xA;5          1 0.226957 0.436957 0.1869000     82&#xA;6          1 0.204348 0.518261 0.0895652     88&#xA;&amp;gt; lmout &amp;lt;- lm(casual ~ .,data=day1)&#xA;&amp;gt; lmout&#xA;...&#xA;Coefficients:&#xA;(Intercept)   workingday         temp          hum    windspeed  &#xA;     1063.6       -806.6       2149.5       -812.7      -1145.3  &#xA; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The expression &#34;casual ~ .&#34; means, &#34;regress &lt;strong&gt;casual&lt;/strong&gt; against all the other variables in this dataset.&lt;/p&gt; &#xA;&lt;p&gt;These numbers make sense. The negative coefficient for &lt;strong&gt;workingday&lt;/strong&gt; says that, all else equal, there tend to be fewer casual riders on a work day.&lt;/p&gt; &#xA;&lt;p&gt;By the way, we probably should expect fewer riders on very cold or very hot days, so we may wish to add a quadratic term to the model, say by doing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;day1$temp2 &amp;lt;- temp^2  # the caret symbol means exponentiation, &#xA;                      # i.e. 2nd power here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would add the indicated column to &lt;strong&gt;day1&lt;/strong&gt;. But we will not pursue this for now.&lt;/p&gt; &#xA;&lt;p&gt;One of the very important features of R is &lt;em&gt;generic functions&lt;/em&gt;. These are functions that take on different roles for objects of different classes. One such example is the &lt;strong&gt;plot&lt;/strong&gt; function we saw earlier.&lt;/p&gt; &#xA;&lt;p&gt;Try typing &#34;plot(lmout)&#34; at the R prompt. You will be shown several plots desribing the fitted regression model. What happened was that the function &lt;strong&gt;plot&lt;/strong&gt; is just a placeholder. When we type &#34;plot(lmout)&#34; R says, &#34;Hmm, what kind of object is &lt;strong&gt;lmout&lt;/strong&gt;? Oh, it&#39;s of class &lt;strong&gt;&#39;lm&#39;&lt;/strong&gt;. So I&#39;m going to transfer (&lt;em&gt;dispatch&lt;/em&gt;) this call to one involving a special plot function for that class, &lt;strong&gt;plot.lm&lt;/strong&gt;.&#34; This is in contrast to our previous calls to &lt;strong&gt;plot&lt;/strong&gt;, which were invoked on vectors; those calls were dispatched to &lt;strong&gt;plot.default&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another generic function is &lt;strong&gt;summary&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; summary(Nile)&#xA;   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. &#xA;  456.0   798.5   893.5   919.4  1032.5  1370.0 &#xA;&amp;gt; summary(lmout)&#xA;...&#xA;Coefficients:&#xA;            Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;(Intercept)  1063.55     101.37  10.492  &amp;lt; 2e-16 ***&#xA;workingday   -806.63      33.41 -24.143  &amp;lt; 2e-16 ***&#xA;temp         2149.52      86.32  24.901  &amp;lt; 2e-16 ***&#xA;hum          -812.74     112.98  -7.194 1.57e-12 ***&#xA;windspeed   -1145.31     208.55  -5.492 5.51e-08 ***&#xA;---&#xA;Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the first case, the call to &lt;strong&gt;summary&lt;/strong&gt;, invoked on a vector, was dispatched to &lt;strong&gt;summary.default&lt;/strong&gt;, while in the second the transfer was to &lt;strong&gt;summary.lm&lt;/strong&gt;. In both cases, whoever it was in the R development team who wrote these functions decided what summary information should be printed out automatically.&lt;/p&gt; &#xA;&lt;p&gt;Again, the purpose of this tutorial is to present R, not statistics. The interested reader should consult a statistics book regarding &lt;em&gt;p-values&lt;/em&gt; and &lt;em&gt;confidence intervals.&lt;/em&gt; The former are show in the last column of the above summary. An approximate 95% confidence interval for, say, the population coefficient of humidity is -812.74 plus or minus 1.96 times the &lt;em&gt;standard error&lt;/em&gt;, 112.98. Note carefully that p-values have long been considered to be poor methodology; see the &lt;a href=&#34;https://amstat.tandfonline.com/doi/full/10.1080/00031305.2016.1154108&#34;&gt;ASA statement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another important generic function is &lt;strong&gt;predict&lt;/strong&gt;. Say we want to predict &lt;strong&gt;casual&lt;/strong&gt; for a work day in which &lt;strong&gt;temp&lt;/strong&gt;, &lt;strong&gt;hum&lt;/strong&gt; and &lt;strong&gt;windspeed&lt;/strong&gt; are 0.26, 0.55, 0.18, respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; newCase &amp;lt;- data.frame(workingday=1, temp=0.26, hum=0.55, windspeed=0.18)&#xA;&amp;gt; predict(lmout,newCase)&#xA;       1 &#xA;162.6296 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;strong&gt;predict&lt;/strong&gt; function, which here is &lt;strong&gt;predict.lm&lt;/strong&gt;, assumes that the new cases to be predicted are supplied as a data frame, with the same column names as with the original data.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;dates&#34;&gt; &lt;/a&gt; Lesson 32: Work with the R Date Class&lt;/h2&gt; &#xA;&lt;p&gt;In the bike sharing data, dates were included, in &lt;strong&gt;day$dteday&lt;/strong&gt;. As noted, some of those were holidays, indicated in the &lt;strong&gt;holiday&lt;/strong&gt; column. Let&#39;s see how many holidays there were:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; hds &amp;lt;- day$dteday[day$holiday == 1]&#xA;&amp;gt; hds&#xA; [1] 2011-01-17 2011-02-21 2011-04-15 2011-05-30 2011-07-04 2011-09-05&#xA; [7] 2011-10-10 2011-11-11 2011-11-24 2011-12-26 2012-01-02 2012-01-16&#xA;[13] 2012-02-20 2012-04-16 2012-05-28 2012-07-04 2012-09-03 2012-10-08&#xA;[19] 2012-11-12 2012-11-22 2012-12-25&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once again, let&#39;s review how the above code works. The expression &#34;[day$holiday == 1]&#34; yields a bunch of TRUEs and FALSEs. Using them as indices in the vecotr &lt;strong&gt;day$dteday&lt;/strong&gt; gives us exactly the dates that are holidays.&lt;/p&gt; &#xA;&lt;p&gt;We see above that there were 21 holidays during the time period of the data. But we can do more. First, what kind of object is &lt;strong&gt;hds&lt;/strong&gt; above?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; class(hds)&#xA;[1] &#34;factor&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fine, but R has a special class for date data, not surprisingly called &lt;strong&gt;&#39;Date&#39;&lt;/strong&gt;. Let&#39;s convert to that class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; hd &amp;lt;- as.Date(hds)&#xA;&amp;gt; class(hd)&#xA;[1] &#34;Date&#34;&#xA;&amp;gt; hd&#xA; [1] &#34;2011-01-17&#34; &#34;2011-02-21&#34; &#34;2011-04-15&#34; &#34;2011-05-30&#34; &#34;2011-07-04&#34;&#xA; [6] &#34;2011-09-05&#34; &#34;2011-10-10&#34; &#34;2011-11-11&#34; &#34;2011-11-24&#34; &#34;2011-12-26&#34;&#xA;[11] &#34;2012-01-02&#34; &#34;2012-01-16&#34; &#34;2012-02-20&#34; &#34;2012-04-16&#34; &#34;2012-05-28&#34;&#xA;[16] &#34;2012-07-04&#34; &#34;2012-09-03&#34; &#34;2012-10-08&#34; &#34;2012-11-12&#34; &#34;2012-11-22&#34;&#xA;[21] &#34;2012-12-25&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Though it prints out just as before, there are extra properties now, and even bettery, in POSIX form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; hp &amp;lt;- as.POSIXlt(hd)&#xA;&amp;gt; hp&#xA; [1] &#34;2011-01-17 UTC&#34; &#34;2011-02-21 UTC&#34; &#34;2011-04-15 UTC&#34; &#34;2011-05-30 UTC&#34;&#xA; [5] &#34;2011-07-04 UTC&#34; &#34;2011-09-05 UTC&#34; &#34;2011-10-10 UTC&#34; &#34;2011-11-11 UTC&#34;&#xA; [9] &#34;2011-11-24 UTC&#34; &#34;2011-12-26 UTC&#34; &#34;2012-01-02 UTC&#34; &#34;2012-01-16 UTC&#34;&#xA;[13] &#34;2012-02-20 UTC&#34; &#34;2012-04-16 UTC&#34; &#34;2012-05-28 UTC&#34; &#34;2012-07-04 UTC&#34;&#xA;[17] &#34;2012-09-03 UTC&#34; &#34;2012-10-08 UTC&#34; &#34;2012-11-12 UTC&#34; &#34;2012-11-22 UTC&#34;&#xA;[21] &#34;2012-12-25 UTC&#34;&#xA;&amp;gt; hp[16]$wday  # what day of the week was July 4, 2012?&#xA;[1] 3&#xA;# ah, Wednesday (code 3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(The UTC parts are the times of day, which we had not supplied.)&lt;/p&gt; &#xA;&lt;p&gt;There are many operations that can be done on R dates. The above is just a little sample.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;style&#34;&gt; &lt;/a&gt; Lesson 33: Tips on R Coding Style and Strategy&lt;/h2&gt; &#xA;&lt;p&gt;Programming is a creative activity, and thus different programmers will have different coding styles. Some people feel so strongly that they will publish there own particular style guides, such as &lt;a href=&#34;https://google.github.io/styleguide/Rguide.xml&#34;&gt;this one&lt;/a&gt; by the R community at Google. Mine is &lt;a href=&#34;https://github.com/matloff/R-Style-Guide&#34;&gt;here`&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Needless to say, style is a matter of personal taste. But:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Style IS important for any code you intend to use again, for two reasons:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You will quickly forget how your code works.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you share your code with others, you need to make its workings clear to them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Equally important is strategy, the way you approach a coding project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is no magic formula on how to write code. As noted earlier, I cannot &lt;em&gt;teach&lt;/em&gt; yow how to code. I can only show you how the ingredients work -- loops, variables, functions, if/else etc. -- and you must creatively put them together into code that achieves goals. It&#39;s like solving a big puzzle, and like many big puzzles, you may need to ponder the problem for quite a while, gaining insights here and there until it&#39;s finally done. Yet, as with coding style, there are strategies that we all agree on.&lt;/p&gt; &#xA;&lt;p&gt;So in spite of great individual variation, there are common aspects that everyone agrees with, which we&#39;ll discuss in this lesson.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Comment your code:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In any programming course for Computer Science students, this is absolutely central. If a student turns in a programming assignment with few or no comments, it will get a failing grade. If comments are needed for clarity and readability for CS students, who are presumably strong programmers, then R users who are not expert programmers need comments even more.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://www.cs.utah.edu/~germain/PPS/Topics/commenting.html&#34;&gt;style guide&lt;/a&gt; at a top university computer science department puts it well:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Commenting involves placing Human Readable Descriptions inside of computer programs detailing what the Code is doing. Proper use of commenting can make code maintenance much easier, as well as helping make finding bugs faster. Further, commenting is very important when writing functions that other people will use. Remember, well documented code is as important as correctly working code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;(Also see specific tips on commenting, later in that document.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Don&#39;t be under the illusion that your code is self-documenting; it isn&#39;t! A typical comment might look like this:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;w &amp;lt;- f(w)&#xA;# at this point, the data frame w will consist of the original rows for&#xA;# people over age 65 and who are homeowners&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;At the top of each source file, insert comments giving the reader an overview of the contents.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will typically an overview of the roles of each major function, how the functions interact with each other, what the main data structures are, and so on.&lt;/p&gt; &#xA;&lt;p&gt;I strongly recommend that you write these comments at the top of a file BEFORE you start coding (and of course modifying it as you do write code). This will really help you focus during the coding process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Indent your code:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (x &amp;lt; y) {&#xA;   x &amp;lt;- y^2&#xA;   z &amp;lt;- x + y&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is much easier to read than&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (x &amp;lt; y) {&#xA;x &amp;lt;- y^2&#xA;z &amp;lt;- x + y&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Write your code in top-down fashion:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a function &lt;strong&gt;f&lt;/strong&gt; that is more than, say, a dozen lines long, break its code into calls to smaller functions, say &lt;strong&gt;g&lt;/strong&gt; and &lt;strong&gt;h&lt;/strong&gt;. Then &lt;strong&gt;f&lt;/strong&gt; will consist of those calls, plus some &#34;glue&#34; lines to deal with the return values and so on. Of course, it&#39;s a matter of taste as to break things up that way, but the point is that it makes your code both easier to &lt;em&gt;read&lt;/em&gt; (by others, or by yourself later), and even more important, easier to &lt;em&gt;write&lt;/em&gt;. Breaking up the code like this makes it read like an outline.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t skimp on attending to the &#34;corner cases&#34;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Computer Science people talk about &#34;corner cases,&#34; meaning special situations in which code may fail in spite of being generally sound.&lt;/p&gt; &#xA;&lt;p&gt;For instance, consider this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; i &amp;lt;- 5&#xA;&amp;gt; 1:i&#xA;[1] 1 2 3 4 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But what about the special case in which &lt;strong&gt;i = 0&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; i &amp;lt;- 0&#xA;&amp;gt; 1:i&#xA;[1] 1 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This may not be what you wanted. You probably should insert a check, say&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (i &amp;gt;= 1) i:5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and maybe also code to handle the erroneous case. This will depend on the situation, but the main point is to be aware of possible corner cases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use a debugging tool:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;More on this in a later lesson!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;logit&#34;&gt; &lt;/a&gt; Lesson 34: The Logistic Model&lt;/h2&gt; &#xA;&lt;p&gt;In our earlier examples of regression analysis, we were predicting a continuous variable such as human weight. But what if we wish to predict a &lt;em&gt;dichotomous&lt;/em&gt; varible, i.e. one recording which of two outcomes occurs?&lt;/p&gt; &#xA;&lt;p&gt;Consider the Pima dataset from earlier examples. Say we are predicting whether someone has -- or will later develop -- diabetes. This is coded in the &lt;strong&gt;test&lt;/strong&gt; column of the dataset, 1 for having the disease, 0 for not.&lt;/p&gt; &#xA;&lt;p&gt;As a simple example, say we try to predict &lt;strong&gt;test&lt;/strong&gt; from the variables &lt;strong&gt;bim&lt;/strong&gt; and &lt;strong&gt;age&lt;/strong&gt;. A linear model would be&lt;/p&gt; &#xA;&lt;p&gt;mean test = β&lt;sub&gt;0&lt;/sub&gt; + β&lt;sub&gt;1&lt;/sub&gt; bmi + β&lt;sub&gt;2&lt;/sub&gt; age&lt;/p&gt; &#xA;&lt;p&gt;Remember, &lt;strong&gt;test&lt;/strong&gt; takes on the values 1 and 0. What happens when we take the average of a bunch of 1s and 0s? The answer is that we get the proportion of 1s. For instance, the mean of the numbers 1,0,1,1 is 3/4, which is exactly the proportion of 1s in that data.&lt;/p&gt; &#xA;&lt;p&gt;In statististical terms, what the above equation is doing is expressing the probability of a 1 -- i.e. the probability of having diabetes -- in terms of Body Mass Index and age.&lt;/p&gt; &#xA;&lt;p&gt;Not a bad model, but one troubling point is that the right-hand side could evaluate to a number less than 0 or greater than 1, which would be impossible for a probability. In order to deal with that problem, we might use a &lt;em&gt;logistic&lt;/em&gt; model, as follows.&lt;/p&gt; &#xA;&lt;p&gt;Define the logistic function to be&lt;/p&gt; &#xA;&lt;p&gt;l(t) = 1 / (1 + e&lt;sup&gt;-t&lt;/sup&gt;)&lt;/p&gt; &#xA;&lt;p&gt;We then modify the above equation to&lt;/p&gt; &#xA;&lt;p&gt;probability of diabetes = l(β&lt;sub&gt;0&lt;/sub&gt; + β&lt;sub&gt;1&lt;/sub&gt; bmi + β&lt;sub&gt;2&lt;/sub&gt; age)&lt;/p&gt; &#xA;&lt;p&gt;As before, the statistical details are beyond the scope of this R tutorial, but here is how you estimate the coefficients β&lt;sub&gt;i&lt;/sub&gt; using R:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; glout &amp;lt;- glm(test ~ bmi + age, data=pima, family=binomial)&#xA;&amp;gt; summary(glout)&#xA;...&#xA;Coefficients:&#xA;            Estimate Std. Error z value Pr(&amp;gt;|z|)    &#xA;(Intercept) -5.40378    0.51530 -10.487  &amp;lt; 2e-16 ***&#xA;bmi          0.09825    0.01248   7.874 3.45e-15 ***&#xA;age          0.04561    0.00694   6.571 4.98e-11 ***&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s explore those estimated β&lt;sub&gt;i&lt;/sub&gt; a bit. Consider women with about average BMI, say 32, and compare 30-year-olds to those of age 40.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; l &amp;lt;- function(t) 1 / (1 + exp(-t))&#xA;&amp;gt; l(-5.40378 + 32*0.09825 + 30*0.04561)&#xA;[1] 0.2908045&#xA;&amp;gt; l(-5.40378 + 32*0.09825 + 40*0.04561)&#xA;[1] 0.3928424&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, the risk of diabetes increases substantial over that 10-year period, but this population and BMI level.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;fd&#34;&gt; &lt;/a&gt; Lesson 35: Files and Folders/Directories&lt;/h2&gt; &#xA;&lt;p&gt;Note: On Unix-family systems such as Linux, the Windows term &lt;em&gt;folder&lt;/em&gt; is said to be a &lt;em&gt;directory&lt;/em&gt;. You will frequently see this in Mac discussions as well. (The Mac OS is a Unix-family system.) We will typically use the term &lt;em&gt;directory&lt;/em&gt; here, as that is what R uses.&lt;/p&gt; &#xA;&lt;p&gt;In assmebling a dataset for my &lt;strong&gt;regtools&lt;/strong&gt; package, I needed to collect the records of several of my course offerings. I started in a directory that had one subdirectory for each offering. In turn, there was a file named &lt;strong&gt;Results&lt;/strong&gt;. As an intermediate step, wanted to find all such files, placing the text for each one in an R list &lt;strong&gt;gFiles&lt;/strong&gt;. Only some specific columns of each file will be retained. (The discussion here is a slightly adapted version.)&lt;/p&gt; &#xA;&lt;p&gt;The chief R functions I used were:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list.dirs():&lt;/strong&gt; Returns a character vector with the names of all the directories (i.e. subdirectories) within the current directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;dir():&lt;/strong&gt; Returns a character vector with the names of all files within the current directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;%in%:&lt;/strong&gt; Determines whether a specified object is an element in a specified vector.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;setwd():&lt;/strong&gt; Changes to the specified directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is the code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;getData &amp;lt;- function() {&#xA;&#xA;   currDir &amp;lt;- getwd()  # leave a trail of bread crumbs&#xA;&#xA;   dirs &amp;lt;- list.dirs(recursive=FALSE)&#xA;   numCourseOfferings &amp;lt;- 0&#xA;   # create empty R list, into which we&#39;ll store our course records&#xA;   resultsFiles &amp;lt;- list()&#xA;   for (d in dirs) {&#xA;      setwd(d)  # descend into d directory&#xA;      # check if there is a Results file there&#xA;      fls &amp;lt;- dir()&#xA;      if (!(&#39;Results&#39; %in% fls)) {  # not there, skip this dir&#xA;         setwd(currDir)&#xA;         next&#xA;      }&#xA;      # ah, there is such a file; increment our count&#xA;      numCourseOfferings &amp;lt;- numCourseOfferings + 1&#xA;      # open it&#xA;      resultsLines &amp;lt;- readLines(&#39;Results&#39;)&#xA;      # delete the comment lines; look at 1st character in each line&#xA;      resultsLines &amp;lt;- delComments(resultsLines)&#xA;      resultsFiles[[numCourseOfferings]] &amp;lt;- extractCols(resultsLines)&#xA;      setwd(currDir)&#xA;   }&#xA;   resultsFiles  # return all the grades records&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before we go into the details, note the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The code is written in a top-down manner. Much of the work of &lt;strong&gt;getData()&lt;/strong&gt; is offloaded to other functions (code not shown), &lt;strong&gt;delComments()&lt;/strong&gt; and &lt;strong&gt;extractCols()&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are lots of comments!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, consider the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;   dirs &amp;lt;- list.dirs(recursive=FALSE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As mentioned, &lt;strong&gt;list.dirs()&lt;/strong&gt; will determine all the subdirectories within the current directory. But what about subdirectories of subdirectories, and subdirectories of subdirectories of subdirectories, and so on? Setting &lt;strong&gt;recursive&lt;/strong&gt; to FALSE means we want only first-level subdirectories.&lt;/p&gt; &#xA;&lt;p&gt;So, the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;   for (d in dirs) {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will then have us process each (first-level) directory, one by one.&lt;/p&gt; &#xA;&lt;p&gt;When we enter one of those subdirectories, the line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;      fls &amp;lt;- dir()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will determine all the files there, storing the result as a character vector &lt;strong&gt;fls&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, as the comment notes, the lines&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;      if (!(&#39;Results&#39; %in% fls)) {  # not there, skip this dir&#xA;         setwd(currDir)&#xA;         next&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will, in the event that there is no &lt;strong&gt;Results&lt;/strong&gt; file in this subdirectory, skip this subdirectory. The R keyword &lt;strong&gt;next&lt;/strong&gt; says, &#34;Go to the next iteration of this loop,&#34; which here means to process the next subdirectory. Note that to prepare for that, we need to move back to the original directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;         setwd(currDir)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the other hand, if this subdirectory &lt;em&gt;does&lt;/em&gt; contain a file named &lt;strong&gt;Results&lt;/strong&gt;, the remaining code increments our count of such files, reads in the found file, and assigns its contents as a new element of our &lt;strong&gt;resultsFiles&lt;/strong&gt; list.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;whl&#34;&gt; &lt;/a&gt; Lesson 36: R &#39;while&#39; Loops&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve seen R &lt;strong&gt;for&lt;/strong&gt; loops in previous lessons, but there&#39;s another kind of loop, &lt;strong&gt;while&lt;/strong&gt;. It keeps iterating until some specified condition is met. We don&#39;t know how many iterations will be needed, unlike the &lt;strong&gt;for&lt;/strong&gt; case, with a fixed number of iterations.&lt;/p&gt; &#xA;&lt;p&gt;As our example, consider &lt;strong&gt;AirPassengers&lt;/strong&gt;, which consists of number of air travelers in thousands, in monthly data from January 1949. As usual, let&#39;s glance at it first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; str(airpass)&#xA; Time-Series [1:144] from 1949 to 1961: 112 118 132 129 121 135 148 148 136 119 ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suppose we wish to know when the cumulative number of passengers first exceeded 10 million. A crude way would be to use R&#39;s &lt;strong&gt;cumsum&lt;/strong&gt; (&#34;cumulative sums&#34;) function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cumsum(airpass)&#xA;  [1]   112   230   362   491   612   747   895  1043  1179  1298  1402  1520&#xA; [13]  1635  1761  1902  2037  2162  2311  2481  2651  2809  2942  3056  3196&#xA; [25]  3341  3491  3669  3832  4004  4182  4381  4580  4764  4926  5072  5238&#xA; [37]  5409  5589  5782  5963  6146  6364  6594  6836  7045  7236  7408  7602&#xA; [49]  7798  7994  8230  8465  8694  8937  9201  9473  9710  9921 10101 10302&#xA; [61] 10506 10694 10929 11156 11390 11654 11956 12249 12508 12737 12940 13169&#xA; [73] 13411 13644 13911 14180 14450 14765 15129 15476 15788 16062 16299 16577&#xA; [85] 16861 17138 17455 17768 18086 18460 18873 19278 19633 19939 20210 20516&#xA; [97] 20831 21132 21488 21836 22191 22613 23078 23545 23949 24296 24601 24937&#xA;[109] 25277 25595 25957 26305 26668 27103 27594 28099 28503 28862 29172 29509&#xA;[121] 29869 30211 30617 31013 31433 31905 32453 33012 33475 33882 34244 34649&#xA;[133] 35066 35457 35876 36337 36809 37344 37966 38572 39080 39541 39931 40363&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We see that that occurred in the 59th month. But though this approach would be convenient, it also would be wasteful: We are calculating &lt;em&gt;all&lt;/em&gt; the cumulative sums, even though we don&#39;t need them all. In a really long vector, this could be slow. Here is a less wasteful way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; tot &amp;lt;- 0&#xA;&amp;gt; i &amp;lt;- 0&#xA;&amp;gt; while (i &amp;lt;= length(airpass) &amp;amp;&amp;amp; tot &amp;lt; 10000) {&#xA;+    i &amp;lt;- i + 1&#xA;+    tot &amp;lt;- tot + airpass[i]&#xA;+ }&#xA;&amp;gt; i&#xA;[1] 59&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, the &lt;strong&gt;while&lt;/strong&gt; loop keeps iterating until we get the desired cumulative total.&lt;/p&gt; &#xA;&lt;p&gt;Key points here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#39;&amp;amp;&amp;amp;&#39; operator stands for &#34;and&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The condition within the &#39;while&#39; says that (a) we are not yet at the end of the &lt;strong&gt;airpass&lt;/strong&gt; vector, AND (b) our total is still less than&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;10000&#34;&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note the need for the condition &lt;strong&gt;i &amp;lt;= length(airpass)&lt;/strong&gt;. It&#39;s possible that &lt;strong&gt;tot&lt;/strong&gt; will never exceed 10000 (not true here, but we wouldn&#39;t know that &lt;em&gt;a priori&lt;/em&gt;), so we need that condition so that the loop doesn&#39;t iterate forever!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s more, though. The &lt;strong&gt;cumsum&lt;/strong&gt; function is vectorized, so using it, though seemingly wasteful, may actually be faster than the loop&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;forMore&#34;&gt; &lt;/a&gt; Lesson 37: To Learn More&lt;/h2&gt; &#xA;&lt;p&gt;These are books and other resources that I myself consult a lot (yes, I do consult my own books; can&#39;t keep it all in my head :-) ), plus others I recommend.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nonprogramming Coverage of R&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Andrie de Vries and Joris Meys, &lt;em&gt;R For Dummies&lt;/em&gt; (second edition), For Dummies&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Jaren Lander, &lt;em&gt;R for Everyone: Advanced Analytics and Graphics&lt;/em&gt; (second ed.), Addison-Wesley&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;R Programming and Language&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;John Chambers, &lt;em&gt;Software for Data Analysis: Programming with R&lt;/em&gt;, Springer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dirk Eddelbuettel, &lt;em&gt;Seamless R and C++ Integration with Rcpp&lt;/em&gt;, Springer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Colin Gillespie and Robin Lovelace, &lt;em&gt;Efficient R Programming: A Practical Guide to Smarter Programming&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Norm Matloff, &lt;em&gt;The Art of R Programming&lt;/em&gt;, NSP&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Norm Matloff, &lt;em&gt;Parallel Computation for Data Science&lt;/em&gt;, CRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hadley Wickham, &lt;em&gt;Advanced R&lt;/em&gt; (second edition), CRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data Science with R&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Nina Zumel and John Mount, &lt;em&gt;Practical Data Science with R&lt;/em&gt;, Manning (2nd ed.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hadley Wickham and Garrett Grolemund, &lt;em&gt;R for Data Science: Import, Tidy, Transform, Visualize, and Model Data&lt;/em&gt;, O&#39;Reilly&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Graphics in R&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Winston Chang, &lt;em&gt;R Graphics Cookbook: Practical Recipes for Visualizing Data&lt;/em&gt;, O&#39;Reilly&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Paul Murrell, &lt;em&gt;R Graphics&lt;/em&gt; (third edition), CRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deepayan Sarkar, &lt;em&gt;Lattice: Multivariate Data Visualization with R&lt;/em&gt;, Springer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hadley Wickham, &lt;em&gt;ggplot2: Elegant Graphics for Data Analysis&lt;/em&gt;, Springer&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Regression Analysis and Machine Learning, Using R&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Francis Chollet and JJ Allaire, &lt;em&gt;Deep Learning in R&lt;/em&gt;, Manning&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Julian Faraway, &lt;em&gt;Linear Models with R&lt;/em&gt;, CRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Julian Faraway, &lt;em&gt;Extending the Linear Model with R&lt;/em&gt;, CRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;John Fox and Sanford Weisberg, &lt;em&gt;An R Companion to Applied Regression&lt;/em&gt;, SAGE&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Frank Harrell, &lt;em&gt;Regression Modeling Strategies: With Applications to Linear Models, Logistic and Ordinal Regression, and Survival Analysis&lt;/em&gt;, Springer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gareth James, Daniela Witten, Trevor Hastie, Robert Tibshirani, &lt;em&gt;Introduction to Statistical Learning: with Applications in R&lt;/em&gt;, Springer, 2nd ed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Max Kuhn, &lt;em&gt;Applied Predictive Modeling&lt;/em&gt;, Springer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Max Kuhn and Kjell Johnson, Feature Engineering and Selection: &lt;em&gt;A Practical Approach for Predictive Models&lt;/em&gt;, CRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Norm Matloff, &lt;em&gt;Statistical Regression and Classification: from Linear Models to Machine Learning&lt;/em&gt;, CRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Norm Matloff, &lt;em&gt;The Art of Machine Learning: Algorithms+Data+R&lt;/em&gt;, NSP, coming soon&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Rob Hyndman and George Athanasopoulos, &lt;em&gt;Forecasting: Principles and Practice&lt;/em&gt;, OTexts&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ted Kwartler, &lt;em&gt;Text Mining in Practice with R&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Norm Matloff, &lt;em&gt;Probability and Statistics for Data Science: Math + R + Data&lt;/em&gt;, CRC&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Julia Silge and David Robinson, &lt;em&gt;Text Mining with R: A Tidy Approach&lt;/em&gt;, O&#39;Reilly&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Yihui Xie &lt;em&gt;et al&lt;/em&gt;, &lt;em&gt;R Markdown: The Definitive Guide&lt;/em&gt;, CRC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Web&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I also would recommend various Web tutorials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Szilard Palka, &lt;a href=&#34;https://t.co/kbhw44Tbbn&#34;&gt;CEU Business Analytics program: Use Case Seminar 2 with Szilard Pafka (2019- 05-08)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hadley Wickham, &lt;a href=&#34;https://www.tidyverse.org&#34;&gt;the Tidyverse&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;thanks&#34;&gt; Thanks &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This tutorial has benefited from feedback from (in alphabetical order) Reese Goding, Ira Sharenow, and Aaron Wichman, as well as various anonymous suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;ide&#34;&gt; Installing and Using IDEs &lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;An &lt;em&gt;interactive development environment&lt;/em&gt; (IDE) is a software tool that enables editing, saving and running your code, as well as related actions such as installing packages.&lt;/p&gt; &#xA;&lt;p&gt;The real &#34;power users&#34; tend to use either Emacs Speaks Statistics (ESS), a plugin for the Emacs editor, or Nvim-r,, a plugin for the vim editor. However, since this tutorial is aimed at those with little or no prior coding background, we will not cover them. Instead, we introduce RStudio. Here are some pros and cons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;RStudio is very highly popular, especially in the US and Australia/New Zealand. Indeed, for many users, RStudio &lt;em&gt;is&lt;/em&gt; R.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lots of help available on the Web, and in R User Groups that have been established in many major cities. Has numerous features, keyboard shortcuts etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That however also has a downside, since as noted earlier, the compexity of RStudio can be &#34;overwhelming.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In light of that last point, we recommend that you NOT try to learn RStudio to any degree of complexity at the outset. Just learn how to create, load, run, and save files of R code, the simple stuff, which should be easy. Leave the advanced features for later.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;There are many tutorials on the Web for installing RStudio.&lt;br&gt; &lt;a href=&#34;https://techvidvan.com/tutorials/install-r/&#34;&gt;This one&lt;/a&gt; is pretty good, for all major platforms.&lt;/p&gt; &#xA;&lt;h3&gt;Startup&lt;/h3&gt; &#xA;&lt;p&gt;If your screen has an RStudio icon, click it. Otherwise type &#39;rstudio&#39; into a terminal window.&lt;/p&gt; &#xA;&lt;h3&gt;Basic actions:&lt;/h3&gt; &#xA;&lt;p&gt;Again, there is a lot more one can do than the following, but we&#39;ll stick to the absolute basics.&lt;/p&gt; &#xA;&lt;p&gt;Note the pane in the lower-left portion of the RStudio screen. By default, that is the Console pane, containing the usual R &#39;&amp;gt;&#39; prompt. You can use it just as we have throughout this tutorial. Note too that this is where your R output will appear.&lt;/p&gt; &#xA;&lt;p&gt;Everything here involves files, where we store our R code (&lt;em&gt;scripts&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;creating a new code file:&lt;/strong&gt; File | New File | R Script will create an empty window pane, ready to be filled with code. Start typing!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;saving a code file:&lt;/strong&gt; File | Save will save the contents of the pane. If it&#39;s a new file, you&#39;ll be asked to give the file a name. Make sure to note what folder the file will be in, so you know where to read it from later.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;running code:&lt;/strong&gt; To run the code in your current window, choose Code | Run Region | Run All.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;exiting RStudio:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;File | Quit Session...&lt;/p&gt; &#xA;&lt;h2&gt;LICENSING&lt;/h2&gt; &#xA;&lt;p&gt;The document is covered by a &lt;a href=&#34;http://creativecommons.org/licenses/by-nd/3.0/us/&#34;&gt;Creative Commons&lt;/a&gt; license, Creative Commons Attribution-No Derivative Works 3.0 United States &lt;img src=&#34;http://i.creativecommons.org/l/by-nd/3.0/us/88x31.png&#34; alt=&#34;alt text&#34;&gt;. I have written the document to be &lt;em&gt;used&lt;/em&gt;, so readers, teachers and so on are very welcome and encouraged to copy it verbatim. Copyright is retained by N. Matloff in all non-U.S. jurisdictions, but permission to use these materials in teaching is still granted, provided the authorship and licensing information here is displayed. I would appreciate being notified if you use this book for teaching, just so that I know the materials are being put to use, but this is not required. information displayed. No warranties are given or implied for this material.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>reichlab/covidData</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/reichlab/covidData</id>
    <link href="https://github.com/reichlab/covidData" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Versioned covid data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;covidData&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://doi.org/10.5281/zenodo.5208224&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.5208224.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an R package that provides versioned time series data for COVID-19 from the JHU data repository at &lt;a href=&#34;https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series&#34;&gt;https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation and Updating Data&lt;/h1&gt; &#xA;&lt;p&gt;For this package to be useful, you will need to clone it and install it from your local copy after you have updated the data.&lt;/p&gt; &#xA;&lt;p&gt;To clone the repository, in a terminal you can run &lt;code&gt;git clone https://github.com/reichlab/covidData.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;installation prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;You will need R 3.x or 4.x&lt;/p&gt; &#xA;&lt;h2&gt;installation using &lt;code&gt;make&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using &lt;code&gt;make&lt;/code&gt; to simplify the updating of data. However, some Windows operating systems do not allow for easy use of the command &lt;code&gt;make&lt;/code&gt;, so manual installation should be used if &lt;code&gt;make&lt;/code&gt; does not work.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;make&lt;/code&gt;, you must complete the following steps once you have cloned the repository:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In a terminal/shell window, navigate to &lt;code&gt;code/data-processing&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make all&lt;/code&gt;. (This runs the steps below.)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: If you want to only download the most recent JHU data files, for step 2. instead run &lt;code&gt;make recent_data&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;manual installation&lt;/h2&gt; &#xA;&lt;p&gt;If make does not work for you, you may run the following steps by hand. To update the data, please:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository. If you have previously installed covidData from an existing local clone, pull any updates to the package by running &lt;code&gt;git pull origin master&lt;/code&gt; from the terminal, with the repository folder as your working directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;R CMD INSTALL covidData&lt;/code&gt; from the terminal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;data disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;*The names of locations included on the Website correspond with the official designations used by the U.S. Department of State. The presentation of material therein does not imply the expression of any opinion whatsoever on the part of JHU concerning the legal status of any country, area or territory or of its authorities. The depiction and use of boundaries, geographic names and related data shown on maps and included in lists, tables, documents, and databases on this website are not warranted to be error free nor do they necessarily imply official endorsement or acceptance by JHU.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hadley/mastering-shiny</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/hadley/mastering-shiny</id>
    <link href="https://github.com/hadley/mastering-shiny" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mastering Shiny: a book&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/hadley/mastering-shiny/actions?workflow=.github/workflows/build-book.yaml&#34;&gt;&lt;img src=&#34;https://github.com/hadley/mastering-shiny/workflows/.github/workflows/build-book.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;This is the work-in-progress repo for the book &lt;em&gt;Mastering Shiny&lt;/em&gt; by Hadley Wickham. It is licensed under the Creative Commons &lt;a href=&#34;http://creativecommons.org/licenses/by-nc-nd/4.0/&#34;&gt;Attribution-NonCommercial-NoDerivatives 4.0 International License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Built with &lt;a href=&#34;https://bookdown.org/yihui/bookdown/&#34;&gt;bookdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;p&gt;There are three directories for images:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;diagrams/&lt;/code&gt; contains omnigraffle diagrams. Source of truth is &lt;code&gt;.graffle&lt;/code&gt; files. Can delete all subdirectories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;screenshots/&lt;/code&gt; contains programmatic screenshots. Source of truth is book code. Can delete all subdirectories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;images/&lt;/code&gt; contains images created some other way. Images are source of truth and should not be deleted.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>chrisjcameron/r_for_edu</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/chrisjcameron/r_for_edu</id>
    <link href="https://github.com/chrisjcameron/r_for_edu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>abhiamishra/ggshakeR</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/abhiamishra/ggshakeR</id>
    <link href="https://github.com/abhiamishra/ggshakeR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An analysis and visualization R package that works with publicly available soccer data&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ggshakeR &lt;img src=&#34;https://raw.githubusercontent.com/abhiamishra/ggshakeR/main/man/figures/ggshakeRhex-small.png&#34; align=&#34;right&#34;&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/abhiamishra/ggshakeR/actions&#34;&gt;&lt;img src=&#34;https://github.com/abhiamishra/ggshakeR/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;check-standard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/abhiamishra/ggshakeR&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/abhiamishra/ggshakeR/branch/main/graph/badge.svg?token=GO5918U56P&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Welcome to ggshakeR!&lt;/p&gt; &#xA;&lt;p&gt;This is R’s all-inclusive package for visualization and analysis of publicly available soccer data.&lt;/p&gt; &#xA;&lt;p&gt;This package aims to provide people interested in football analysis and visualization a platform to learn about it while also learning a new language at the same time. This package is designed to work with free soccer data and, for now, include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fbref.com/en/&#34;&gt;FBref&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/statsbomb/StatsBombR&#34;&gt;StatsBomb Open Dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://understat.com/&#34;&gt;Understat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let’s get you started with the package!&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started With ggshakeR&lt;/h1&gt; &#xA;&lt;p&gt;First things first, install R and RStudio. R is the actual language while RStudio is the IDE that will help you work with the R programming language in a nice way.&lt;/p&gt; &#xA;&lt;p&gt;Here are links to download both:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34;&gt;RStudio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OK, now how do you get ggshakeR into RStudio?&lt;/p&gt; &#xA;&lt;p&gt;First install the devtools package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;devtools&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, write the actual code to install ggshakeR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&#34;abhiamishra/ggshakeR&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the library is installed but it’s not in your session just yet! When a package is in a session means you can actually use the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggshakeR)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that’s it you’re done!&lt;/p&gt; &#xA;&lt;p&gt;We hope you have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Helpful Links&lt;/h2&gt; &#xA;&lt;p&gt;Here are some helpful links to get you started with the package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://abhiamishra.github.io/ggshakeR/articles/Guide_to_Pitch_Plots.html&#34;&gt;Guide To Pitch Plots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://abhiamishra.github.io/ggshakeR/articles/Guide_to_Exp_Threat.html&#34;&gt;Guide To Expected Threat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://abhiamishra.github.io/ggshakeR/articles/Guide_to_PizzaPlots.html&#34;&gt;Guide To Pizza Plots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Credit&lt;/h1&gt; &#xA;&lt;p&gt;Thank you to StatsBomb and &lt;a href=&#34;https://github.com/ewenme&#34;&gt;Ewan Henderson&lt;/a&gt; for their respective packages. A big thank you to &lt;a href=&#34;https://twitter.com/NinadB_06&#34;&gt;Ninad Barbadikar&lt;/a&gt; for creating the beautiful logo and helping with the package in general. Big thanks to &lt;a href=&#34;https://twitter.com/maramperninety&#34;&gt;Maram AlBaharna&lt;/a&gt; for giving the package it&#39;s iconic name! Thank you &lt;a href=&#34;https://github.com/JaseZiv&#34;&gt;Jase Ziv&lt;/a&gt; for your help and your package &lt;a href=&#34;https://github.com/JaseZiv/worldfootballR&#34;&gt;WorldFootballR&lt;/a&gt; from which this took inspiration from.&lt;/p&gt; &#xA;&lt;h1&gt;Contact and Support&lt;/h1&gt; &#xA;&lt;p&gt;Tell your friends about ggshakeR and shake theiR lives away! You can contact me at &lt;a href=&#34;https://raw.githubusercontent.com/abhiamishra/ggshakeR/main/abhiamishra0@gmail.com&#34;&gt;email&lt;/a&gt; or at my &lt;a href=&#34;https://twitter.com/MishraAbhiA&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Powered by Chatalytics&lt;span&gt;™&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Owner and Creator: &lt;a href=&#34;https://github.com/abhiamishra&#34;&gt;&lt;strong&gt;Abhishek Amol Mishra&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Authors: &lt;a href=&#34;https://github.com/harshkrishna17&#34;&gt;&lt;strong&gt;Harsh Krishna&lt;/strong&gt;&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/Ryo-N7&#34;&gt;&lt;strong&gt;Ryo Nakagawara&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Licenses Used&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Torvaney/ggsoccer&#34;&gt;Torvaney&lt;/a&gt; and the ggsoccer package has been used in the package for creation of pitches. The use of this adheres to the &lt;a href=&#34;https://github.com/Torvaney/ggsoccer/raw/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt; provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Licensing Copyright Statement: Copyright (c) 2019 Benjamin Torvaney&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rmaia/pavo</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/rmaia/pavo</id>
    <link href="https://github.com/rmaia/pavo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tools for the analysis of color data in R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;pavo&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=pavo/&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version-ago/pavo&#34; alt=&#34;cran version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=pavo/&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/pavo&#34; alt=&#34;cran downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rmaia/pavo/actions&#34;&gt;&lt;img src=&#34;https://github.com/rmaia/pavo/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cranchecks.info/pkgs/pavo&#34;&gt;&lt;img src=&#34;https://cranchecks.info/badges/worst/pavo&#34; alt=&#34;cran checks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;An &lt;code&gt;R&lt;/code&gt; package for the spectral and spatial analysis of color patterns&lt;/h2&gt; &#xA;&lt;h3&gt;Currently maintained by &lt;a href=&#34;https://github.com/thomased&#34;&gt;Thomas White&lt;/a&gt; and &lt;a href=&#34;https://github.com/bisaloo&#34;&gt;Hugo Gruson&lt;/a&gt;.&lt;/h3&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pavo&lt;/code&gt; is an R package developed with the goal of establishing a flexible and integrated workflow for working with spectral and spatial colour data. It includes functions that take advantage of new data classes to work seamlessly from importing raw spectra and images, to visualisation and analysis. It provides flexible ways to input spectral data from a variety of equipment manufacturers, process these data, extract variables, and produce publication-quality figures.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pavo&lt;/code&gt; was written with the following workflow in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Organise&lt;/strong&gt; data by importing and processing spectra and images (e.g., to remove noise, negative values, smooth curves, etc.).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Analyse&lt;/strong&gt; the resulting files, using spectral analyses of shape (hue, saturation, brightness), visual models based on perceptual data, and/or spatial adjacency and boundary strength analyses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visualise&lt;/strong&gt; the output, with multiple options provided for exploration, presentation, and analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Need more information, or help with the package?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Take a look at the &lt;a href=&#34;https://book.colrverse.com&#34;&gt;package documentation&lt;/a&gt; for detailed examples and discussion.&lt;/li&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;http://pavo.colrverse.com/news/index.html&#34;&gt;latest news&lt;/a&gt; for changes and updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Need help or advice and can&#39;t find what you&#39;re looking for?&lt;/strong&gt; Head over to the &lt;a href=&#34;https://github.com/colrverse/colRverse/discussions&#34;&gt;colRverse discussion board&lt;/a&gt; and feel free to post a message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;If all else fails&lt;/strong&gt; (or you don&#39;t have a GitHub account), &lt;a href=&#34;mailto:thomas.white@sydney.edu.au&#34;&gt;email Tom&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citing pavo&lt;/h2&gt; &#xA;&lt;p&gt;The manuscript describing the current iteration of the package has been published and is free to access:&lt;/p&gt; &#xA;&lt;p&gt;Maia R., Gruson H., Endler J.A., and White T.E. 2019 &lt;a href=&#34;https://doi.org/10.1111/2041-210X.13174&#34;&gt;pavo 2: New tools for the spectral and spatial analysis of colour in R&lt;/a&gt;. &lt;em&gt;Methods in Ecology and Evolution&lt;/em&gt;, 10(7):1097‑1107.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;This is the development page for &lt;code&gt;pavo&lt;/code&gt;. The stable release is available from CRAN. Simply use &lt;code&gt;install.packages(&#34;pavo&#34;)&lt;/code&gt; to install.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install the bleeding edge version of &lt;code&gt;pavo&lt;/code&gt;, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the &lt;a href=&#34;https://github.com/r-lib/remotes&#34;&gt;&lt;code&gt;remotes&lt;/code&gt;&lt;/a&gt; package:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;rmaia/pavo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download files from GitHub and install using &lt;code&gt;$R CMD INSTALL&lt;/code&gt; or, from within R:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(path, type = &#34;source&#34;, repos = NULL)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>terrytangyuan/terrytangyuan</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/terrytangyuan/terrytangyuan</id>
    <link href="https://github.com/terrytangyuan/terrytangyuan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My GitHub profile README.md with self-updating badges&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/TerryTangYuan&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/twitter.svg?sanitize=true&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/terrytangyuan&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/github.svg?sanitize=true&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/in/terrytangyuan&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/linkedin.svg?sanitize=true&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/terrytangyuan&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/sponsors.svg?sanitize=true&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://terrytangyuan.github.io/cv.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/cv.svg?sanitize=true&#34; alt=&#34;Curriculum Vitae&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scholar.google.com/citations?user=2GYttqUAAAAJ&amp;amp;hl=en&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/citations.svg?sanitize=true&#34; alt=&#34;Citations&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/wechat-qr-code.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terrytangyuan/terrytangyuan/master/imgs/wechat.svg?sanitize=true&#34; alt=&#34;微信&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Yuan is a founding engineer at &lt;a href=&#34;https://akuity.io/&#34;&gt;Akuity&lt;/a&gt;. Previously, he was a senior software engineer at &lt;a href=&#34;https://www.alibabagroup.com/&#34;&gt;Alibaba Group&lt;/a&gt;, building AI infrastructure and AutoML platform. He&#39;s a co-chair of &lt;a href=&#34;https://github.com/kubeflow&#34;&gt;Kubeflow&lt;/a&gt;, maintainer of &lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;TensorFlow&lt;/a&gt; and &lt;a href=&#34;https://github.com/argoproj/argo-workflows&#34;&gt;Argo&lt;/a&gt;, &lt;a href=&#34;https://www.apache.org/foundation/glossary.html#PMC&#34;&gt;PMC&lt;/a&gt; member of &lt;a href=&#34;https://github.com/dmlc/xgboost&#34;&gt;XGBoost&lt;/a&gt; and &lt;a href=&#34;https://github.com/apache/incubator-mxnet&#34;&gt;Apache MXNet&lt;/a&gt;, as well as author of numerous &lt;a href=&#34;https://github.com/sponsors/terrytangyuan&#34;&gt;open source projects&lt;/a&gt;. He &lt;a href=&#34;https://terrytangyuan.github.io/cv#publications&#34;&gt;authored&lt;/a&gt; three machine learning books and several impactful publications. He&#39;s a &lt;a href=&#34;https://terrytangyuan.github.io/cv#talks&#34;&gt;regular speaker&lt;/a&gt; at various conferences and technical advisor, leader, and mentor at &lt;a href=&#34;https://terrytangyuan.github.io/cv#services&#34;&gt;several organizations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;👉 Check out &lt;a href=&#34;https://github.com/sponsors/terrytangyuan&#34;&gt;what he&#39;s working on&lt;/a&gt; and follow him on &lt;a href=&#34;https://twitter.com/TerryTangYuan&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://www.linkedin.com/in/terrytangyuan&#34;&gt;LinkedIn&lt;/a&gt; for updates! &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;🔔 &lt;a href=&#34;https://calendly.com/chat-with-terry/&#34;&gt;Schedule a time&lt;/a&gt; to discuss open source and collaboration opportunities.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PROGR-2022/01_git</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/PROGR-2022/01_git</id>
    <link href="https://github.com/PROGR-2022/01_git" rel="alternate"></link>
    <summary type="html">&lt;p&gt;01_git&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Programming in R&lt;/h1&gt; &#xA;&lt;h2&gt;Homework Task I -- git and GitHub&lt;/h2&gt; &#xA;&lt;p&gt;This is your first homework task. Since it will not be graded there is no deadline. Nevertheless, we strongly encourage you to try out this task, both to get to know the homework task format and to get to know git. All the following tasks will assume that you know how to use &lt;code&gt;git&lt;/code&gt; and &lt;em&gt;GitHub&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Information Material&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PROGR-2022/01_git/master/ProgR_01_Intro.pdf&#34;&gt;Slides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recommended resources &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://swcarpentry.github.io/git-novice/&#34;&gt;Software Carpentry Git Course&lt;/a&gt;&lt;/strong&gt;: A very good and thorough first &lt;code&gt;git&lt;/code&gt; course that teaches how to use &lt;code&gt;git&lt;/code&gt; from the command line. It is strongly recommended that you know the command line &lt;code&gt;git&lt;/code&gt;, since you will understand what is going on under the hood even when using other tools. Expected reading time: 3 hours.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://happygitwithr.com/index.html&#34;&gt;Happy Git with R&lt;/a&gt;&lt;/strong&gt;: A course of &lt;code&gt;git&lt;/code&gt;, &lt;em&gt;GitHub&lt;/em&gt;, and &lt;em&gt;RStudio&lt;/em&gt;. This will teach you how to use all your tools together efficiently.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Additional resources &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://gitimmersion.com/index.html&#34;&gt;Git Immersion&lt;/a&gt;&lt;/strong&gt;: Similar to the &#34;&lt;em&gt;Software Carpentry Git Course&lt;/em&gt;&#34; but with less explanation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://r-pkgs.had.co.nz/git.html&#34;&gt;Git and GitHub&lt;/a&gt;&lt;/strong&gt; by Hadley Wickham: A quick intro on how to use &lt;code&gt;git&lt;/code&gt;, &lt;em&gt;GitHub&lt;/em&gt;, and &lt;em&gt;RStudio&lt;/em&gt; that is shorter than &#34;&lt;em&gt;Happy Git with R&lt;/em&gt;&#34; above and may be for you if you are a quick learner.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://guides.github.com/activities/hello-world/&#34;&gt;GitHub Introduction&lt;/a&gt;&lt;/strong&gt;: Get to know the &lt;em&gt;GitHub&lt;/em&gt; web interface&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cheat Sheets&lt;/strong&gt; are an excellent way to keep a reference around and to look up commands you may have forgot. The big &lt;code&gt;git&lt;/code&gt; companies all offer one (and GitHub isn&#39;t necessarily the best): &lt;a href=&#34;https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://about.gitlab.com/images/press/git-cheat-sheet.pdf&#34;&gt;GitLab&lt;/a&gt;, &lt;a href=&#34;https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet&#34;&gt;Atlassian&lt;/a&gt;. Look at all of them and see if you find them useful.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Task&lt;/h2&gt; &#xA;&lt;p&gt;This is a project that was set up by different characters, who submitted their work to different branches. However, in the current state their individual contributions are in different branches and have not yet been brought together. Your task is to find out who created what part of the work, and to combine their efforts to get a working project.&lt;/p&gt; &#xA;&lt;p&gt;You will very likely not be able to do this unless you read a good part of at least one of the sources. Your reward will be that you find out how &lt;code&gt;git&lt;/code&gt; works &lt;em&gt;now&lt;/em&gt;, while you don&#39;t have to stress about deadlines.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;&lt;code&gt;fork&lt;/code&gt;&#34; this repository to your own GitHub Account&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;code&gt;clone&lt;/code&gt;&#34; your own fork to your laptop&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Inspection&lt;/h3&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Look at the different branches present in the repository. How do they relate? (Hint: &lt;code&gt;git branch --all&lt;/code&gt; is useful here. The &#34;History&#34; button in RStudio&#39;s &#34;Git&#34; pane may also be useful: try to show &#34;(all branches)&#34;.)&lt;/li&gt; &#xA; &lt;li&gt;What branch / what character was working on which function?&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Merging&lt;/h3&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Combine all the different branches into the master branch. You will get at least one &#34;merge conflict&#34;, which you have to resolve intelligently: consider which of the conflicting edits is more &#34;valuable&#34;. Note that you should not blindly merge all branches you find, because some branches are &#34;parents&#34; of other branches.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;After You Merge&lt;/h3&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Can you find out what part of the resulting code was created by what character? You could browse commits in &lt;em&gt;GitHub&lt;/em&gt;, you could use &lt;em&gt;GitHub&lt;/em&gt;&#39;s &#34;blame&#34; function, and you can use &lt;code&gt;git blame&lt;/code&gt;. Get familiar with all of them.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Rendering&lt;/h3&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;You should now be able to load &lt;code&gt;sierpinski.Rmd&lt;/code&gt; in your RStudio session and render it, getting a nice animation. Your result should look like this:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PROGR-2022/01_git/master/sier.png&#34; alt=&#34;Sierpinski Triangle&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/chromote</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/rstudio/chromote</id>
    <link href="https://github.com/rstudio/chromote" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chrome Remote Interface for R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chromote: Headless Chrome Remote Interface&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/chromote/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/chromote/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=chromote&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/chromote&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;Chromote is an R implementation of the &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/&#34;&gt;Chrome DevTools Protocol&lt;/a&gt;. It works with Chrome, Chromium, Opera, Vivaldi, and other browsers based on &lt;a href=&#34;https://www.chromium.org/&#34;&gt;Chromium&lt;/a&gt;. By default it uses Google Chrome (which must already be installed on the system). To use a different browser, see &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/chromote/main/#specifying-which-browser-to-use&#34;&gt;Specifying which browser to use&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Chromote is not the only R package that implements the Chrome DevTools Protocol. Here are some others:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RLesur/crrri&#34;&gt;crrri&lt;/a&gt; by Romain Lesur and Christophe Dervieux&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/decapitated/&#34;&gt;decapitated&lt;/a&gt; by Bob Rudis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milesmcbain/chradle&#34;&gt;chradle&lt;/a&gt; by Miles McBain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The interface to Chromote is similar to &lt;a href=&#34;https://github.com/cyrus-and/chrome-remote-interface&#34;&gt;chrome-remote-interface&lt;/a&gt; for node.js.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# CRAN&#xA;install.packages(&#34;chromote&#34;)&#xA;&#xA;# Development&#xA;remotes::install_github(&#34;rstudio/chromote&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;This will start a headless browser and open an interactive viewer for it in a normal browser, so that you can see what the headless browser is doing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(chromote)&#xA;&#xA;b &amp;lt;- ChromoteSession$new()&#xA;&#xA;# In a web browser, open a viewer for the headless browser. Works best with&#xA;# Chromium-based browsers.&#xA;b$view()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The browser can be given &lt;em&gt;commands&lt;/em&gt;, as specified by the &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/&#34;&gt;Chrome DevTools Protocol&lt;/a&gt;. For example, &lt;code&gt;$Browser$getVersion()&lt;/code&gt; (which corresponds to the &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Browser/#method-getVersion&#34;&gt;Browser.getVersion&lt;/a&gt; in the API docs) will query the browser for version information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$Browser$getVersion()&#xA;#&amp;gt; $protocolVersion&#xA;#&amp;gt; [1] &#34;1.3&#34;&#xA;#&amp;gt;&#xA;#&amp;gt; $product&#xA;#&amp;gt; [1] &#34;HeadlessChrome/98.0.4758.102&#34;&#xA;#&amp;gt;&#xA;#&amp;gt; $revision&#xA;#&amp;gt; [1] &#34;@273bf7ac8c909cde36982d27f66f3c70846a3718&#34;&#xA;#&amp;gt;&#xA;#&amp;gt; $userAgent&#xA;#&amp;gt; [1] &#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36&#34;&#xA;#&amp;gt;&#xA;#&amp;gt; $jsVersion&#xA;#&amp;gt; [1] &#34;9.8.177.11&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have the viewer open and run the following, you’ll see the web page load in the viewer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$Page$navigate(&#34;https://www.r-project.org/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the official Chrome DevTools Protocol (CDP) documentation, this is the &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-navigate&#34;&gt;&lt;code&gt;Page.navigate&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;In addition to full support of the CDP, &lt;code&gt;ChromoteSession&lt;/code&gt; objects also some convenience methods, like &lt;code&gt;$screenshot()&lt;/code&gt;. (See the Examples section below for more information about screenshots.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Saves to screenshot.png&#xA;b$screenshot()&#xA;&#xA;# Takes a screenshot of elements picked out by CSS selector&#xA;b$screenshot(&#34;sidebar.png&#34;, selector = &#34;.sidebar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/chromote/main/man/figures/sidebar.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All members of &lt;code&gt;Chromote&lt;/code&gt; and &lt;code&gt;ChromoteSession&lt;/code&gt; objects which start with a capital letter (like &lt;code&gt;b$Page&lt;/code&gt;, &lt;code&gt;b$DOM&lt;/code&gt;, and &lt;code&gt;b$Browser&lt;/code&gt;) correspond to domains from the Chrome DevTools Protocol, and are documented in the &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/&#34;&gt;official CDP site&lt;/a&gt;. All members which start with a lower-case letter (like &lt;code&gt;b$screenshot&lt;/code&gt; and &lt;code&gt;b$close&lt;/code&gt;) are not part of the Chrome DevTools Protocol, and are specific to &lt;code&gt;Chromote&lt;/code&gt; and &lt;code&gt;ChromoteSession&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to use Chromote to find the position of a DOM element using &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/DOM/#method-getBoxModel&#34;&gt;DOM.getBoxModel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x &amp;lt;- b$DOM$getDocument()&#xA;x &amp;lt;- b$DOM$querySelector(x$root$nodeId, &#34;.sidebar&#34;)&#xA;x &amp;lt;- b$DOM$getBoxModel(x$nodeId)&#xA;str(x)&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ model:List of 6&#xA;#&amp;gt;   ..$ content:List of 8&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ padding:List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ border :List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ margin :List of 8&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   ..$ width  : int 195&#xA;#&amp;gt;   ..$ height : int 960&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can do the same thing by chaining commands together with a magrittr pipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$DOM$getDocument() %&amp;gt;%&#xA;  { b$DOM$querySelector(.$root$nodeId, &#34;.sidebar&#34;) } %&amp;gt;%&#xA;  { b$DOM$getBoxModel(.$nodeId) } %&amp;gt;%&#xA;  str()&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ model:List of 6&#xA;#&amp;gt;   ..$ content:List of 8&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ padding:List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ border :List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ margin :List of 8&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   ..$ width  : int 195&#xA;#&amp;gt;   ..$ height : int 960&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating new tabs and managing the process&lt;/h3&gt; &#xA;&lt;p&gt;To create a new tab/window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b1 &amp;lt;- b$new_session()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once it’s created, you can perform operations with the new tab without affecting the first one.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b1$view()&#xA;b1$Page$navigate(&#34;https://github.com/rstudio/chromote&#34;)&#xA;#&amp;gt; $frameId&#xA;#&amp;gt; [1] &#34;714439EBDD663E597658503C86F77B0B&#34;&#xA;#&amp;gt;&#xA;#&amp;gt; $loaderId&#xA;#&amp;gt; [1] &#34;F39339CBA7D1ACB83618FEF40C3C7467&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To close a browser tab/window, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b1$close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is different from shutting down the browser process. If you call &lt;code&gt;b$close()&lt;/code&gt;, the browser process will still be running, even if all tabs have been closed. If all tabs have been closed, you can still create a new tab by calling &lt;code&gt;b1$new_session()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To shut down the process, call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b1$parent$close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;b1$parent&lt;/code&gt; is a &lt;code&gt;Chromote&lt;/code&gt; object (as opposed to &lt;code&gt;ChromoteSession&lt;/code&gt;), which represents the browser as a whole. This is explained in &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/chromote/main/#the-chromote-object-model&#34;&gt;The Chromote object model&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Commands and Events&lt;/h3&gt; &#xA;&lt;p&gt;The Chrome DevTools Protocol has two types of methods: &lt;em&gt;commands&lt;/em&gt; and &lt;em&gt;events&lt;/em&gt;. The methods used in the previous examples are commands. That is, they tell the browser to do something; the browser does it, and then sends back some data.&lt;/p&gt; &#xA;&lt;p&gt;Events are quite different from commands. When, for example, you run &lt;code&gt;b$Page$loadEventFired()&lt;/code&gt;, it does not send a message to the browser. Rather, this method tells the R process to wait until it receives a &lt;code&gt;Page.loadEventFired&lt;/code&gt; message from the browser.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how that event can be used. Note that these two lines of code must be run together, without any delay at all (this can be enforced by wrapping both lines of code in &lt;code&gt;{ .... }&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Send a command to navigate to a page&#xA;b$Page$navigate(&#34;https://www.r-project.org&#34;)&#xA;#&amp;gt; $frameId&#xA;#&amp;gt; [1] &#34;0ADE3CFBAF764B0308ADE1ACCC33358B&#34;&#xA;#&amp;gt;&#xA;#&amp;gt; $loaderId&#xA;#&amp;gt; [1] &#34;112AF4AC0C13FF4A95BED8173C3F4C7F&#34;&#xA;&#xA;# Wait for the Page.loadEventFired event&#xA;b$Page$loadEventFired()&#xA;#&amp;gt; $timestamp&#xA;#&amp;gt; [1] 680.7603&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running these two lines, the R process will be blocked. While it’s blocked, the browser will load the page, and then send a message to the R process saying that the &lt;code&gt;Page.loadEventFired&lt;/code&gt; event has occurred. The message looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;method&#34;:&#34;Page.loadEventFired&#34;,&#34;params&#34;:{&#34;timestamp&#34;:699232.345338}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the R process receives this message, the function returns the value, which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$timestamp&#xA;[1] 699232.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Technical note:&lt;/strong&gt; Chromote insulates the user from some of the details of how the CDP implements event notifications. Event notifications are not sent from the browser to the R process by default; you must first send a command to enable event notifications for a domain. For example &lt;code&gt;Page.enable&lt;/code&gt; enables event notifications for the &lt;code&gt;Page&lt;/code&gt; domain – the browser will send messages for &lt;em&gt;all&lt;/em&gt; &lt;code&gt;Page&lt;/code&gt; events. (See the Events section in &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Page/&#34;&gt;this page&lt;/a&gt;). These notifications will continue to be sent until the browser receives a &lt;code&gt;Page.disable&lt;/code&gt; command.&lt;/p&gt; &#xA; &lt;p&gt;By default, Chromote hides this implementation detail. When you call &lt;code&gt;b$Page$loadEventFired()&lt;/code&gt;, Chromote sends a &lt;code&gt;Page.enable&lt;/code&gt; command automatically, and then waits until it receives the &lt;code&gt;Page.loadEventFired&lt;/code&gt; event notification. Then it sends a &lt;code&gt;Page.disable&lt;/code&gt; command.&lt;/p&gt; &#xA; &lt;p&gt;Note that in asynchronous mode, the behavior is slightly more sophisticated: it maintains a counter of how many outstanding events it is waiting for in a given domain. When that count goes from 0 to 1, it sends the &lt;code&gt;X.enable&lt;/code&gt; command; when the count goes from 1 to 0, it sends the &lt;code&gt;X.disable&lt;/code&gt; command. For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/chromote/main/#async-events&#34;&gt;Async events&lt;/a&gt; section.&lt;/p&gt; &#xA; &lt;p&gt;If you do not want automatic event enabling and disabling, then when creating the ChromoteSession object, use &lt;code&gt;ChromoteSession$new(auto_events = FALSE)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;The Chromote object model&lt;/h3&gt; &#xA;&lt;p&gt;There are two R6 classes that are used to represent the Chrome browser. One is &lt;code&gt;Chromote&lt;/code&gt;, and the other is &lt;code&gt;ChromoteSession&lt;/code&gt;. A &lt;code&gt;Chromote&lt;/code&gt; object represents the browser as a whole, and it can have multiple &lt;em&gt;targets&lt;/em&gt;, which each represent a browser tab. In the Chrome DevTools Protocol, each target can have one or more debugging &lt;em&gt;sessions&lt;/em&gt; to control it. A &lt;code&gt;ChromoteSession&lt;/code&gt; object represents a single &lt;em&gt;session&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When a &lt;code&gt;ChromoteSession&lt;/code&gt; object is instantiated, a target is created, then a session is attached to that target, and the &lt;code&gt;ChromoteSession&lt;/code&gt; object represents the session. (It is possible, though not very useful, to have multiple &lt;code&gt;ChromoteSession&lt;/code&gt; objects connected to the same target, each with a different session.)&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Chromote&lt;/code&gt; object can have any number of &lt;code&gt;ChromoteSession&lt;/code&gt; objects as children. It is not necessary to create a &lt;code&gt;Chromote&lt;/code&gt; object manually. You can simply call:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- ChromoteSession$new()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and it will automatically create a &lt;code&gt;Chromote&lt;/code&gt; object if one has not already been created. The Chromote package will then designate that &lt;code&gt;Chromote&lt;/code&gt; object as the &lt;em&gt;default&lt;/em&gt; Chromote object for the package, so that any future calls to &lt;code&gt;ChromoteSession$new()&lt;/code&gt; will automatically use the same &lt;code&gt;Chromote&lt;/code&gt;. This is so that it doesn’t start a new browser for every &lt;code&gt;ChromoteSession&lt;/code&gt; object that is created.&lt;/p&gt; &#xA;&lt;p&gt;In the Chrome DevTools Protocol, most commands can be sent to individual sessions using the &lt;code&gt;ChromoteSession&lt;/code&gt; object, but there are some commands which can only be sent to the overall browser, using the &lt;code&gt;Chromote&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;To access the parent &lt;code&gt;Chromote&lt;/code&gt; object from a &lt;code&gt;ChromoteSession&lt;/code&gt;, you can simply use &lt;code&gt;$parent&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- ChromoteSession$new()&#xA;m &amp;lt;- b$parent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a &lt;code&gt;Chromote&lt;/code&gt; object, you can get a list containing all the &lt;code&gt;ChromoteSession&lt;/code&gt;s, with &lt;code&gt;$get_sessions()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m$get_sessions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Normally, subsequent calls to &lt;code&gt;ChromoteSession$new()&lt;/code&gt; will use the existing &lt;code&gt;Chromote&lt;/code&gt; object. However, if you want to start a new browser process, you can manually create a &lt;code&gt;Chromote&lt;/code&gt; object, then spawn a session from it; or you can pass the new &lt;code&gt;Chromote&lt;/code&gt; object to &lt;code&gt;ChromoteSession$new()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cm &amp;lt;- Chromote$new()&#xA;b1 &amp;lt;- cm$new_session()&#xA;&#xA;# Or:&#xA;b1 &amp;lt;- ChromoteSession$new(parent = cm)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you use either of these methods, the new &lt;code&gt;Chromote&lt;/code&gt; object will &lt;em&gt;not&lt;/em&gt; be set as the default that is used by future calls to &lt;code&gt;ChromoteSesssion$new()&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/chromote/main/#specifying-which-browser-to-use&#34;&gt;Specifying which browser to use&lt;/a&gt; for information on setting the default &lt;code&gt;Chromote&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;There are also the following classes which represent the browser at a lower level:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Browser&lt;/code&gt;: This represents an instance of a browser that supports the Chrome DevTools Protocol. It contains information about how to communicate with the Chrome browser. A &lt;code&gt;Chromote&lt;/code&gt; object contains one of these.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Chrome&lt;/code&gt;: This is a subclass of &lt;code&gt;Browser&lt;/code&gt; that represents a local browser. It extends the &lt;code&gt;Browser&lt;/code&gt; class with a &lt;code&gt;processx::process&lt;/code&gt; object, which represents the browser’s system process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ChromeRemote&lt;/code&gt;: This is a subclass of &lt;code&gt;Browser&lt;/code&gt; that represents a browser running on a remote system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;b$debug_messages(TRUE)&lt;/code&gt; will enable the printing of all the JSON messages sent between R and Chrome. This can be very helpful for understanding how the Chrome DevTools Protocol works.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- ChromoteSession$new()&#xA;b$parent$debug_messages(TRUE)&#xA;b$Page$navigate(&#34;https://www.r-project.org/&#34;)&#xA;#&amp;gt; SEND {&#34;method&#34;:&#34;Page.navigate&#34;,&#34;params&#34;:{&#34;url&#34;:&#34;https://www.r-project.org/&#34;},&#34;id&#34;:53,&#34;sessionId&#34;:&#34;12CB6B044A379DA0BDCFBBA55318247C&#34;}&#xA;#&amp;gt; $frameId&#xA;#&amp;gt; [1] &#34;BAAC175C67E55886207BADE1776E7B1F&#34;&#xA;#&amp;gt;&#xA;#&amp;gt; $loaderId&#xA;#&amp;gt; [1] &#34;66DED3DF9403DA4A307444765FDE828E&#34;&#xA;&#xA;# Disable debug messages&#xA;b$parent$debug_messages(FALSE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Synchronous vs.&amp;nbsp;asynchronous usage&lt;/h3&gt; &#xA;&lt;p&gt;By default, when you call methods from a &lt;code&gt;Chromote&lt;/code&gt; or &lt;code&gt;ChromoteSession&lt;/code&gt; object, it operates in &lt;em&gt;synchronous&lt;/em&gt; mode. For example, when you call a command function (like &lt;code&gt;b$Page$navigate()&lt;/code&gt;), a command message is sent to the headless browser, the headless browser executes that command, and it sends a response message back. When the R process receives the response, it converts it from JSON to an R object and the function returns that value. During this time, the R process is blocked; no other R code can execute.&lt;/p&gt; &#xA;&lt;p&gt;The methods in Chromote/ChromoteSession objects can also be called in &lt;em&gt;asynchronous&lt;/em&gt; mode. In async mode, a command function fires off a message to the browser, and then the R process continues running other code; when the response comes back at some time in the future, the R process calls another function and passes the response value to it.&lt;/p&gt; &#xA;&lt;p&gt;There are two different ways of using async with Chromote. The first is with &lt;a href=&#34;https://rstudio.github.io/promises/&#34;&gt;promises&lt;/a&gt; (note that these are not the regular R-language promises; these are similar to JavaScript promises for async programming.) The second way is with callbacks: you call methods with a &lt;code&gt;callback_&lt;/code&gt; argument. Although callbacks are initially easier to use than promises, once you start writing more complex code, managing callbacks becomes very difficult, especially when error handling is involved. For this reason, this document will focus mostly on promises instead of callback-style programming.&lt;/p&gt; &#xA;&lt;p&gt;When Chromote methods are called in synchronous mode, under the hood, they are implemented with asynchronous functions, and then waiting for the asynchronous functions to resolve.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Technical note about the event loop&lt;/strong&gt;: When methods are called asynchronously, the R process will run callbacks and promises using an event loop provided by the &lt;a href=&#34;https://github.com/r-lib/later&#34;&gt;later&lt;/a&gt; package. This event loop is very similar to the one used in JavaScript, which is explained in depth by &lt;a href=&#34;https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5&#34;&gt;this article&lt;/a&gt;. One important difference between JavaScript’s event loop and the one provided by &lt;strong&gt;later&lt;/strong&gt;’s is that in JavaScript, the event loop only runs when the call stack is empty (essentially, when the JS runtime is idle); with &lt;strong&gt;later&lt;/strong&gt; the event loop similarly runs when the call stack is empty (when the R console is idle), but it can also be run at any point by calling &lt;code&gt;later::run_now()&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;There is another important difference between the JS event loop and the one used by Chromote: Chromote uses &lt;em&gt;private event loops&lt;/em&gt; provided by &lt;a href=&#34;https://github.com/r-lib/later&#34;&gt;later&lt;/a&gt;. Running the private event loop with &lt;code&gt;run_now()&lt;/code&gt; will not interfere with the global event loop. This is crucial for being able to run asynchronous code in a way that appears synchronous.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Why async?&lt;/h4&gt; &#xA;&lt;p&gt;The synchronous API is easier to use than the asynchronous one. So why would you want to use the async API? Here are some reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The async API allows you to send commands to the browser that may take some time for the browser to complete, and they will not block the R process from doing other work while the browser executes the command.&lt;/li&gt; &#xA; &lt;li&gt;The async API lets you send commands to multiple browser “tabs” and let them work in parallel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On the other hand, async programming can make it difficult to write code that proceeds in a straightforward, linear manner. Async programming may be difficult to use in, say, an analysis script.&lt;/p&gt; &#xA;&lt;p&gt;When using Chromote interactively at the R console, it’s usually best to just call methods synchronously. This fits well with a iterative, interactive data analysis workflow.&lt;/p&gt; &#xA;&lt;p&gt;When you are &lt;em&gt;programming&lt;/em&gt; with Chromote instead of using it interactively, it is in many cases better to call the methods asynchronously, because it allows for better performance. In a later section, we’ll see how to write asynchronous code with Chromote that can be run either synchronously or asynchronously. This provides the best of both worlds.&lt;/p&gt; &#xA;&lt;h4&gt;Async commands&lt;/h4&gt; &#xA;&lt;p&gt;When a method is called in synchronous mode, it blocks until the browser sends back a response, and then it returns the value, converted from JSON to an R object. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Synchronous&#xA;str(b$Browser$getVersion())&#xA;#&amp;gt; List of 5&#xA;#&amp;gt;  $ protocolVersion: chr &#34;1.3&#34;&#xA;#&amp;gt;  $ product        : chr &#34;HeadlessChrome/98.0.4758.102&#34;&#xA;#&amp;gt;  $ revision       : chr &#34;@273bf7ac8c909cde36982d27f66f3c70846a3718&#34;&#xA;#&amp;gt;  $ userAgent      : chr &#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36&#34;&#xA;#&amp;gt;  $ jsVersion      : chr &#34;9.8.177.11&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In async mode, there are two ways to use the value that the browser sends to the R process. One is to use the &lt;code&gt;callback_&lt;/code&gt; argument with &lt;code&gt;wait_=FALSE&lt;/code&gt;. The &lt;code&gt;wait_=FALSE&lt;/code&gt; tells it to run the command in async mode; instead of returning the value from the browser, it returns a promise. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Async with callback&#xA;b$Browser$getVersion(wait_ = FALSE, callback_ = str)&#xA;#&amp;gt; &amp;lt;Promise [pending]&amp;gt;&#xA;#&amp;gt; List of 5&#xA;#&amp;gt;  $ protocolVersion: chr &#34;1.3&#34;&#xA;#&amp;gt;  $ product        : chr &#34;HeadlessChrome/98.0.4758.102&#34;&#xA;#&amp;gt;  $ revision       : chr &#34;@273bf7ac8c909cde36982d27f66f3c70846a3718&#34;&#xA;#&amp;gt;  $ userAgent      : chr &#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36&#34;&#xA;#&amp;gt;  $ jsVersion      : chr &#34;9.8.177.11&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that the function returned &lt;code&gt;&amp;lt;Promise [pending]&amp;gt;&lt;/code&gt;, and then it printed out the data. We’ll come back to the promise part.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Technical note:&lt;/strong&gt; When you pass a function as &lt;code&gt;callback_&lt;/code&gt;, that function is used as the first step in the promise chain that is returned.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you run the command in a code block (or a function), the entire code block will finish executing before the callback can be executed. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;{&#xA;  b$Browser$getVersion(wait_ = FALSE, callback_ = str)&#xA;  1+1&#xA;}&#xA;#&amp;gt; [1] 2&#xA;#&amp;gt; List of 5&#xA;#&amp;gt;  $ protocolVersion: chr &#34;1.3&#34;&#xA;#&amp;gt;  $ product        : chr &#34;HeadlessChrome/98.0.4758.102&#34;&#xA;#&amp;gt;  $ revision       : chr &#34;@273bf7ac8c909cde36982d27f66f3c70846a3718&#34;&#xA;#&amp;gt;  $ userAgent      : chr &#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/98.0.4758.102 Safari/537.36&#34;&#xA;#&amp;gt;  $ jsVersion      : chr &#34;9.8.177.11&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the code above, it executes the &lt;code&gt;1+1&lt;/code&gt; and returns the value before the &lt;code&gt;str&lt;/code&gt; callback can be executed on the message from the browser.&lt;/p&gt; &#xA;&lt;p&gt;If you want to store the value from the browser, you can write a callback that stores the value like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# This will extract the product field&#xA;product &amp;lt;- NULL&#xA;b$Browser$getVersion(wait_ = FALSE, callback_ = function(msg) {&#xA;  product &amp;lt;&amp;lt;- msg$product&#xA;})&#xA;#&amp;gt; &amp;lt;Promise [pending]&amp;gt;&#xA;# Wait for a moment, then run:&#xA;product&#xA;#&amp;gt; [1] &#34;HeadlessChrome/98.0.4758.102&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But to get the value, you need to wait for the callback to execute before you can use the value. Waiting for a value is simple when running R interactively – you can just add a &lt;code&gt;message(&#34;message arrived&#34;)&lt;/code&gt; call in the callback and wait for it before running the next line of code – but waiting for the value is not easy to do using ordinary straight-line coding. Fortunately, Chromote has a way to wait for async operations, which we’ll see later.&lt;/p&gt; &#xA;&lt;p&gt;The other way of using the value is to use &lt;em&gt;promises&lt;/em&gt;. If &lt;code&gt;wait_=FALSE&lt;/code&gt; and no &lt;code&gt;callback_&lt;/code&gt; is passed to the command, then it will simply return a promise. Promises have many advantages over plain old callbacks: they are easier to chain, and they provide better error-handling capabilities. You can &lt;em&gt;chain&lt;/em&gt; more steps to the promise: when the promise resolves – that is, when the message is received from the browser – it will run the next step in the promise chain.&lt;/p&gt; &#xA;&lt;p&gt;Here’s an example that uses promises to print out the version information. Note that the surrounding curly braces are there to indicate that this whole thing must be run as a block without any idle time in between the function calls – if you were to run the code in the R console line-by-line, the browser would send back the message and the promise would resolve before you called &lt;code&gt;p$then()&lt;/code&gt;, which is where you tell the promise what to do with the return value. (The curly braces aren’t strictly necessary – you could run the code inside the braces in a single paste operation and have the same effect.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;{&#xA;  p &amp;lt;- b$Browser$getVersion(wait_ = FALSE)&#xA;  p$then(function(value) {&#xA;    print(value$product)&#xA;  })&#xA;}&#xA;# Wait for a moment, then prints:&#xA;#&amp;gt; [1] &#34;HeadlessChrome/98.0.4758.102&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are some progressively more concise ways of achieving the same thing. As you work with promises, you will see these various forms of promise chaining. For more information, see the &lt;a href=&#34;https://rstudio.github.io/promises/&#34;&gt;promises documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(promises)&#xA;&#xA;# Regular function pipe to then()&#xA;b$Browser$getVersion(wait_ = FALSE) %&amp;gt;% then(function(value) {&#xA;  print(value$product)&#xA;})&#xA;&#xA;# Promise-pipe to anonymous function, which must be wrapped in parens&#xA;b$Browser$getVersion(wait_ = FALSE) %...&amp;gt;% (function(value) {&#xA;  print(value$product)&#xA;})&#xA;&#xA;# Promise-pipe to an expression (which gets converted to a function with the first argument `.`)&#xA;b$Browser$getVersion(wait_ = FALSE) %...&amp;gt;% { print(.$product) }&#xA;&#xA;# Promise-pipe to a named function, with parentheses&#xA;print_product &amp;lt;- function(msg) print(msg$product)&#xA;b$Browser$getVersion(wait_ = FALSE) %...&amp;gt;% print_product()&#xA;&#xA;# Promise-pipe to a named function, without parentheses&#xA;b$Browser$getVersion(wait_ = FALSE) %...&amp;gt;% print_product&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The earlier example where we found the dimensions of a DOM element using CSS selectors was done with the synchronous API and &lt;code&gt;%&amp;gt;%&lt;/code&gt; pipes. The same can be done in async mode by switching from the regular pipe to the promise-pipe, and calling all the methods with &lt;code&gt;wait_=FALSE&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$DOM$getDocument(wait_ = FALSE) %...&amp;gt;%&#xA;  { b$DOM$querySelector(.$root$nodeId, &#34;.sidebar&#34;, wait_ = FALSE) } %...&amp;gt;%&#xA;  { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) } %...&amp;gt;%&#xA;  str()&#xA;&#xA;&#xA;# Or, more verbosely:&#xA;b$DOM$getDocument(wait_ = FALSE)$&#xA;  then(function(value) {&#xA;    b$DOM$querySelector(value$root$nodeId, &#34;.sidebar&#34;, wait_ = FALSE)&#xA;  })$&#xA;  then(function(value) {&#xA;    b$DOM$getBoxModel(value$nodeId, wait_ = FALSE)&#xA;  })$&#xA;  then(function(value) {&#xA;    str(value)&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each step in the promise chain uses the value from the previous step, via &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt;. Note that not all asynchronous code works in such a linear, straightforward way. Sometimes it is necessary to save data from intermediate steps in a broader-scoped variable, if it is to be used in a later step in the promise chain.&lt;/p&gt; &#xA;&lt;h4&gt;Turning asynchronous code into synchronous code&lt;/h4&gt; &#xA;&lt;p&gt;There may be times, especially when programming with Chromote, where you want to wait for a promise to resolve before continuing. To do this, you can use the Chromote or ChromoteSession’s &lt;code&gt;wait_for()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# A promise chain&#xA;p &amp;lt;- b$DOM$getDocument(wait_ = FALSE) %...&amp;gt;%&#xA;  { b$DOM$querySelector(.$root$nodeId, &#34;.sidebar&#34;, wait_ = FALSE) } %...&amp;gt;%&#xA;  { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) } %...&amp;gt;%&#xA;  str()&#xA;&#xA;b$wait_for(p)&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ model:List of 6&#xA;#&amp;gt;   ..$ content:List of 8&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ padding:List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ border :List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ margin :List of 8&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   ..$ width  : int 195&#xA;#&amp;gt;   ..$ height : int 960&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This documentation will refer to this technique as &lt;em&gt;synchronizing&lt;/em&gt; asynchronous code. The way that &lt;code&gt;wait_for()&lt;/code&gt; works is that it runs the Chromote object’s private event loop until the promise has resolved. Because the event loop is &lt;em&gt;private&lt;/em&gt;, running it will not interfere with the global event loop, which, for example, may used by Shiny to serve a web application.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;$wait_for()&lt;/code&gt; method will return the value from the promise, so instead of putting the &lt;code&gt;str()&lt;/code&gt; in the chain, you call &lt;code&gt;str()&lt;/code&gt; on the value returned by &lt;code&gt;$wait_for()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- b$DOM$getDocument(wait_ = FALSE) %...&amp;gt;%&#xA;  { b$DOM$querySelector(.$root$nodeId, &#34;.sidebar&#34;, wait_ = FALSE) } %...&amp;gt;%&#xA;  { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) }&#xA;&#xA;x &amp;lt;- b$wait_for(p)&#xA;str(x)&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ model:List of 6&#xA;#&amp;gt;   ..$ content:List of 8&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 292&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 128&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ padding:List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ border :List of 8&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   .. ..$ : num 112&#xA;#&amp;gt;   .. ..$ : num 988&#xA;#&amp;gt;   ..$ margin :List of 8&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : int 28&#xA;#&amp;gt;   .. ..$ : num 308&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   .. ..$ : int 15&#xA;#&amp;gt;   .. ..$ : num 1030&#xA;#&amp;gt;   ..$ width  : int 195&#xA;#&amp;gt;   ..$ height : int 960&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are some methods in Chromote and ChromoteSession objects which are written using asynchronous method calls, but conditionally use &lt;code&gt;wait_for()&lt;/code&gt; so that they can be called either synchronously or asynchronously. The &lt;code&gt;$screenshot()&lt;/code&gt; method works this way, for example. You can call &lt;code&gt;b$screenshot(wait_=TRUE)&lt;/code&gt; (which is the default) for synchronous behavior, or &lt;code&gt;b$screenshot(wait_=FALSE)&lt;/code&gt; for async behavior.&lt;/p&gt; &#xA;&lt;p&gt;If you want to write a function that can be called in either sync or async mode, you can use this basic structure: First, construct a promise chain by calling the CDP methods with &lt;code&gt;wait_=FALSE&lt;/code&gt;. Then, at the end, if the user used &lt;code&gt;wait_=TRUE&lt;/code&gt;, wait for the promise to resolve; otherwise, simply return the promise.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;getBoxModel &amp;lt;- function(b, selector = &#34;html&#34;, wait_ = TRUE) {&#xA;  p &amp;lt;- b$DOM$getDocument(wait_ = FALSE) %...&amp;gt;%&#xA;    { b$DOM$querySelector(.$root$nodeId, selector, wait_ = FALSE) } %...&amp;gt;%&#xA;    { b$DOM$getBoxModel(.$nodeId, wait_ = FALSE) }&#xA;&#xA;  if (wait_) {&#xA;    b$wait_for(p)&#xA;  } else {&#xA;    p&#xA;  }&#xA;}&#xA;&#xA;# Synchronous call&#xA;str(getBoxModel(b, &#34;.sidebar&#34;))&#xA;&#xA;# Asynchronous call&#xA;getBoxModel(b, &#34;.sidebar&#34;, wait_ = FALSE) %...&amp;gt;%&#xA;  str()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But, you might be wondering, if we want a synchronous API, why not simply write the synchronous code by calling the individual methods synchronously, and using a normal pipe to connect them, as in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$DOM$getDocument() %&amp;gt;%&#xA;  { b$DOM$querySelector(.$root$nodeId, &#34;.sidebar&#34;) } %&amp;gt;%&#xA;  { b$DOM$getBoxModel(.$nodeId) } %&amp;gt;%&#xA;  str()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are two reasons for this. The first is that this would require a duplication of all the code for the sync and async code paths. Another reason is that the internal async code can be written to send multiple independent command chains to the ChromoteSession (or multiple ChromoteSessions), and they will be executed concurrently. If there are multiple promise chains, you can do something like the following to wait for all of them to resolve:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Starting with promises p1, p2, and p3, create a promise that resolves only&#xA;# after they have all been resolved.&#xA;p &amp;lt;- promise_all(p1, p2, p3)&#xA;b$wait_for(p)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Async events&lt;/h2&gt; &#xA;&lt;p&gt;In addition to &lt;em&gt;commands&lt;/em&gt; The Chrome DevTools Protocol also has &lt;em&gt;events&lt;/em&gt;. These are messages that are sent from the browser to the R process when various browser events happen.&lt;/p&gt; &#xA;&lt;p&gt;As an example, it can be a bit tricky to find out when to take a screenshot. When you send the browser a command to navigate to a page, it sends a response immediately, but it may take several more seconds for it to actually finish loading that page. When it does, the &lt;code&gt;Page.loadEventFired&lt;/code&gt; event will be fired.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- ChromoteSession$new()&#xA;&#xA;# Navigate and wait for Page.loadEventFired.&#xA;# Note: these lines are put in a single code block to ensure that there is no&#xA;# idle time in between.&#xA;{&#xA;  b$Page$navigate(&#34;https://www.r-project.org/&#34;)&#xA;  str(b$Page$loadEventFired())&#xA;}&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ timestamp: num 683&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the synchronous API, the call to &lt;code&gt;b$Page$loadEventFired()&lt;/code&gt; will block until Chromote receives a &lt;code&gt;Page.loadEventFired&lt;/code&gt; message from the browser. However, with the async promise API, you would write it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$Page$navigate(&#34;https://www.r-project.org/&#34;, wait_ = FALSE) %...&amp;gt;%&#xA;  { b$Page$loadEventFired(wait_ = FALSE) } %...&amp;gt;%&#xA;  { str(.) }&#xA;&#xA;# Or, more verbosely:&#xA;b$Page$navigate(&#34;https://www.r-project.org/&#34;, wait_ = FALSE)$&#xA;  then(function(value) {&#xA;    b$Page$loadEventFired(wait_ = FALSE)&#xA;  })$&#xA;  then(function(value) {&#xA;    str(value)&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There will be a short delay after running the code before the value is printed.&lt;/p&gt; &#xA;&lt;p&gt;If you want to schedule a chain of promises and then wait for them to resolve, you can once again use the &lt;code&gt;wait_for()&lt;/code&gt; method. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- b$Page$navigate(&#34;https://www.r-project.org/&#34;, wait_ = FALSE)$&#xA;  then(function(value) {&#xA;    b$Page$loadEventFired(wait_ = FALSE)&#xA;  })&#xA;&#xA;# wait_for returns the last value in the chain, so we can call str() on it&#xA;str(b$wait_for(p))&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ timestamp: num 683&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This particular example has a twist to it: After sending the &lt;code&gt;Page.navigate&lt;/code&gt; command, the R process doesn’t really need to wait for browser’s response before it starts waiting for the &lt;code&gt;Page.loadEventFired&lt;/code&gt; event. So instead of chaining, you could just do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p &amp;lt;- promise(function(resolve, reject) {&#xA;  b$Page$navigate(&#34;https://www.r-project.org/&#34;, wait_ = FALSE)&#xA;  resolve(b$Page$loadEventFired(wait_ = FALSE))&#xA;})&#xA;&#xA;str(b$wait_for(p))&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ timestamp: num 683&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Essentially, the &lt;code&gt;Page.navigate&lt;/code&gt; command gets sent off and we don’t need to wait for the browser’s reply. We can tell R to immediately start waiting for the &lt;code&gt;Page.loadEventFired&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;p&gt;We can simplify it by not wrapping both method calls in a promise. We can just fire off the navigation command, and then directly use the promise that’s returned by the event method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$Page$navigate(&#34;https://www.r-project.org/&#34;, wait_ = FALSE)&#xA;p &amp;lt;- b$Page$loadEventFired(wait_ = FALSE)&#xA;str(b$wait_for(p))&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ timestamp: num 683&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And we can make it yet simpler by firing off the navigation command and then calling &lt;code&gt;b$Page$loadEventFired()&lt;/code&gt; in synchronous mode (with the default &lt;code&gt;wait_=TRUE&lt;/code&gt;), which already calls &lt;code&gt;wait_for()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$Page$navigate(&#34;https://www.r-project.org/&#34;, wait_ = FALSE)&#xA;x &amp;lt;- b$Page$loadEventFired()&#xA;str(x)&#xA;#&amp;gt; List of 1&#xA;#&amp;gt;  $ timestamp: num 683&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Technical note:&lt;/strong&gt; The Chrome DevTools Protocol itself does not automatically enable event notifications. Normally, you would have to call the &lt;code&gt;Page.enable&lt;/code&gt; method to turn on event notifications for the Page domain. However, Chromote saves you from needing to do this step by keeping track of how many callbacks there are for each domain. When the number of event callbacks for a domain goes from 0 to 1, Chromote automatically calls &lt;code&gt;$enable()&lt;/code&gt; for that domain, and when it goes from 1 to 0, it it calls &lt;code&gt;$disable()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In addition to async events with promises, they can also be used with regular callbacks. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$Page$loadEventFired(callback_ = str)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells Chromote to call &lt;code&gt;str()&lt;/code&gt; (which prints to the console) on the message value every single time that a &lt;code&gt;Page.loadEventFired&lt;/code&gt; event message is received. It will continue doing this indefinitely. (Calling an event method this way also increments the event callback counter.)&lt;/p&gt; &#xA;&lt;p&gt;When an event method is called with a callback, the return value is a function which will cancel the callback, so that it will no longer fire. (The canceller function also decrements the event callback counter. If you lose the canceller function, there is no way to decrement the callback counter back to 0.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cancel_load_event_callback &amp;lt;- b$Page$loadEventFired(callback_ = str)&#xA;&#xA;# Each of these will cause the callback to fire.&#xA;n1 &amp;lt;- b$Page$navigate(&#34;https://www.r-project.org/&#34;)&#xA;n2 &amp;lt;- b$Page$navigate(&#34;https://cran.r-project.org/&#34;)&#xA;&#xA;cancel_load_event_callback()&#xA;&#xA;# No longer causes the callback to fire.&#xA;n3 &amp;lt;- b$Page$navigate(&#34;https://www.rstudio.com/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resource cleanup and garbage collection&lt;/h2&gt; &#xA;&lt;p&gt;When Chromote starts a Chrome process, it calls &lt;code&gt;Chrome$new()&lt;/code&gt;. This launches the Chrome process it using &lt;code&gt;processx::process()&lt;/code&gt;, and enables a supervisor for the process. This means that if the R process stops, the supervisor will detect this and shut down any Chrome processes that were registered with the supervisor. This prevents the proliferation of Chrome processes that are no longer needed.&lt;/p&gt; &#xA;&lt;p&gt;The Chromote package will, by default, use a single Chrome process and a single &lt;code&gt;Chromote&lt;/code&gt; object, and each time &lt;code&gt;ChromoteSession$new()&lt;/code&gt; is called, it will spawn them from the &lt;code&gt;Chromote&lt;/code&gt; object. See &lt;a href=&#34;https://raw.githubusercontent.com/rstudio/chromote/main/#the-chromote-object-model&#34;&gt;The Chromote object model&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Specifying which browser to use&lt;/h2&gt; &#xA;&lt;p&gt;Chromote will look in specific places for the Chrome web browser, depending on platform. This is done by the &lt;code&gt;chromote:::find_chrome()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to use a different browser from the default, you can set the &lt;code&gt;CHROMOTE_CHROME&lt;/code&gt; environment variable, either with &lt;code&gt;Sys.setenv(CHROMOTE_CHROME=&#34;/path/to/browser&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.setenv(CHROMOTE_CHROME = &#34;/Applications/Chromium.app/Contents/MacOS/Chromium&#34;)&#xA;&#xA;b &amp;lt;- ChromoteSession$new()&#xA;b$view()&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way is create a &lt;code&gt;Chromote&lt;/code&gt; object and explicitly specify the browser, then spawn &lt;code&gt;ChromoteSession&lt;/code&gt;s from it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- Chromote$new(&#xA;  browser = Chrome$new(path = &#34;/Applications/Chromium.app/Contents/MacOS/Chromium&#34;)&#xA;)&#xA;&#xA;# Spawn a ChromoteSession from the Chromote object&#xA;b &amp;lt;- m$new_session()&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Yet another way is to create a &lt;code&gt;Chromote&lt;/code&gt; object with a specified browser, then set it as the default Chromote object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;m &amp;lt;- Chromote$new(&#xA;  browser = Chrome$new(path = &#34;/Applications/Chromium.app/Contents/MacOS/Chromium&#34;)&#xA;)&#xA;&#xA;# Set this Chromote object as the default. Then any&#xA;# ChromoteSession$new() will be spawned from it.&#xA;set_default_chromote_object(m)&#xA;b &amp;lt;- ChromoteSession$new()&#xA;b$view()&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Chrome on remote hosts&lt;/h2&gt; &#xA;&lt;p&gt;Chromote can control a browser running on a remote host. To start the browser, open a terminal on the remote host and run one of the following, depending on your platform:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning: Depending on how the remote machine is configured, the Chrome debug server might be accessible to anyone on the Internet. Proceed with caution.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Mac&#xA;&#34;/Applications/Google Chrome.app/Contents/MacOS/Google Chrome&#34; --headless \&#xA;  --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222&#xA;&#xA;# Linux&#xA;google-chrome --headless --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222&#xA;&#xA;# Windows&#xA;&#34;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&#34;  --headless \&#xA;  --remote-debugging-address=0.0.0.0 --remote-debugging-port=9222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, in your local R session, create a Chromote object with the &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; (you will need to use the correct IP address). Once it’s created, you can spawn a session off of it which you can control as normal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;r &amp;lt;- Chromote$new(&#xA;  browser = ChromeRemote$new(host = &#34;10.0.0.5&#34;, port = 9222)&#xA;)&#xA;&#xA;b &amp;lt;- r$new_session()&#xA;&#xA;b$Browser$getVersion()&#xA;b$view()&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;)&#xA;b$Page$loadEventFired()&#xA;b$screenshot(&#34;browser.png&#34;)&#xA;b$screenshot(&#34;browser_string.png&#34;, selector = &#34;.string-major&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use &lt;code&gt;$view()&lt;/code&gt; on the remote browser, your local browser may block scripts for security reasons, which means that you won’t be able to view the remote browser. If your local browser is Chrome, there will be a shield-shaped icon in the location bar that you can click in order to enable loading the scripts. (Note: Some browsers don’t seem to work at all with the viewer.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Technical note:&lt;/strong&gt; There seem to be some timing issues with remote browsers. In the example above, the browser may finish navigating to the web site before the R process receives the response message for &lt;code&gt;$navigate()&lt;/code&gt;, and therefore before R starts waiting for &lt;code&gt;Page.loadEventFired&lt;/code&gt;. In order to avoid these timing problems, it may be better to write code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;{&#xA;  b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;, wait_ = FALSE)&#xA;  b$Page$loadEventFired()&#xA;}&#xA;b$screenshot(&#34;browser.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells it to fire off the &lt;code&gt;Page.navigate&lt;/code&gt; command and &lt;em&gt;not&lt;/em&gt; wait for it, and then immediately start waiting for &lt;code&gt;Page.loadEventFired&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;h3&gt;Attaching to existing tabs&lt;/h3&gt; &#xA;&lt;p&gt;In the examples above, we connected to an existing browser, but created a new tab to attach to. It’s also possible to attach to an existing browser &lt;em&gt;and&lt;/em&gt; and existing tab. In Chrome debugging terminology a tab is called a “Target”, and there is a command to retrieve the list of current Targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;r$Target$getTargets()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Every target has a unique identifier string associated with it called the &lt;code&gt;targetId&lt;/code&gt;; &lt;code&gt;&#34;9DAE349A3A533718ED9E17441BA5159B&#34;&lt;/code&gt; is an example of one.&lt;/p&gt; &#xA;&lt;p&gt;Here we define a function that retrieves the ID of the first Target (tab) from a Chromote object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;first_id &amp;lt;- function(r) {&#xA;  ts &amp;lt;- r$Target$getTargets()$targetInfos&#xA;  stopifnot(length(ts) &amp;gt; 0)&#xA;  r$Target$getTargets()$targetInfos[[1]]$targetId&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following code shows an alert box in the first tab, whatever it is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rc &amp;lt;- ChromeRemote$new(host = &#34;localhost&#34;, port = 9222)&#xA;r &amp;lt;- Chromote$new(browser = rc)&#xA;tid &amp;lt;- first_id(r)&#xA;b &amp;lt;- r$new_session(targetId = tid)&#xA;b$Runtime$evaluate(&#39;alert(&#34;this is the first tab&#34;)&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Taking a screenshot of a web page&lt;/h3&gt; &#xA;&lt;p&gt;Take a screenshot of the viewport and display it using the &lt;a href=&#34;https://github.com/r-lib/showimage#readme&#34;&gt;showimage&lt;/a&gt; package. This uses Chromote’s &lt;code&gt;$screenshot()&lt;/code&gt; method, which wraps up many calls to the Chrome DevTools Protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- ChromoteSession$new()&#xA;&#xA;# ==== Synchronous version ====&#xA;# Run the next two lines together, without any delay in between.&#xA;b$Page$navigate(&#34;https://www.r-project.org/&#34;)&#xA;b$Page$loadEventFired()&#xA;&#xA;b$screenshot(show = TRUE)  # Saves to screenshot.png and displays in viewer&#xA;&#xA;# ==== Async version ====&#xA;b$Page$navigate(&#34;https://www.r-project.org/&#34;, wait_ = FALSE)&#xA;b$Page$loadEventFired(wait_ = FALSE)$&#xA;  then(function(value) {&#xA;    b$screenshot(show = TRUE)&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to use selectors to specify what to screenshot, as well as the region (“content”, “border”, “padding”, or “margin”).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Using CSS selectors, choosing the region, and using scaling&#xA;b$screenshot(&#34;s1.png&#34;, selector = &#34;.sidebar&#34;)&#xA;b$screenshot(&#34;s2.png&#34;, selector = &#34;.sidebar&#34;, region = &#34;margin&#34;)&#xA;b$screenshot(&#34;s3.png&#34;, selector = &#34;.page&#34;, region = &#34;margin&#34;, scale = 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a vector is passed to &lt;code&gt;selector&lt;/code&gt;, it will take a screenshot with a rectangle that encompasses all the DOM elements picked out by the selectors. Similarly, if a selector picks out multiple DOM elements, all of them will be in the screenshot region.&lt;/p&gt; &#xA;&lt;h3&gt;Taking a screenshot of a web page after interacting with it&lt;/h3&gt; &#xA;&lt;p&gt;Headless Chrome provides a remote debugging UI which you can use to interact with the web page. The ChromoteSession’s &lt;code&gt;$view()&lt;/code&gt; method opens a regular browser and navigates to the remote debugging UI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- ChromoteSession$new()&#xA;&#xA;b$view()&#xA;b$Page$navigate(&#34;https://www.google.com&#34;) # Or just type the URL in the navigation bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, you can interact with the web page by typing in text and clicking on things.&lt;/p&gt; &#xA;&lt;p&gt;Then take a screenshot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b$screenshot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Taking screenshots of web pages in parallel&lt;/h3&gt; &#xA;&lt;p&gt;With async code, it’s possible to navigate to and take screenshots of multiple websites in parallel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(promises)&#xA;library(chromote)&#xA;urls &amp;lt;- c(&#xA;  &#34;https://www.r-project.org/&#34;,&#xA;  &#34;https://github.com/&#34;,&#xA;  &#34;https://news.ycombinator.com/&#34;&#xA;)&#xA;&#xA;screenshot_p &amp;lt;- function(url, filename = NULL) {&#xA;  if (is.null(filename)) {&#xA;    filename &amp;lt;- gsub(&#34;^.*://&#34;, &#34;&#34;, url)&#xA;    filename &amp;lt;- gsub(&#34;/&#34;, &#34;_&#34;, filename)&#xA;    filename &amp;lt;- gsub(&#34;\\.&#34;, &#34;_&#34;, filename)&#xA;    filename &amp;lt;- sub(&#34;_$&#34;, &#34;&#34;, filename)&#xA;    filename &amp;lt;- paste0(filename, &#34;.png&#34;)&#xA;  }&#xA;&#xA;  b &amp;lt;- ChromoteSession$new()&#xA;  b$Page$navigate(url, wait_ = FALSE)&#xA;  b$Page$loadEventFired(wait_ = FALSE)$&#xA;    then(function(value) {&#xA;      b$screenshot(filename, wait_ = FALSE)&#xA;    })$&#xA;    then(function(value) {&#xA;      message(filename)&#xA;    })$&#xA;    finally(function() {&#xA;      b$close()&#xA;    })&#xA;}&#xA;&#xA;# Screenshot multiple simultaneously&#xA;ps &amp;lt;- lapply(urls, screenshot_p)&#xA;pa &amp;lt;- promise_all(.list = ps)$then(function(value) {&#xA;  message(&#34;Done!&#34;)&#xA;})&#xA;&#xA;# Block the console until the screenshots finish (optional)&#xA;cm &amp;lt;- default_chromote_object()&#xA;cm$wait_for(pa)&#xA;#&amp;gt; www_r-project_org.png&#xA;#&amp;gt; github_com.png&#xA;#&amp;gt; news_ycombinator_com.png&#xA;#&amp;gt; Done!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting custom headers&lt;/h3&gt; &#xA;&lt;p&gt;Currently setting custom headers requires a little extra work because it requires &lt;code&gt;Network.enable&lt;/code&gt; be called before using it. In the future we’ll streamline things so that it will happen automatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;b &amp;lt;- ChromoteSession$new()&#xA;# Currently need to manually enable Network domain notifications. Calling&#xA;# b$Network$enable() would do it, but calling it directly will bypass the&#xA;# callback counting and the notifications could get automatically disabled by a&#xA;# different Network event. We&#39;ll enable notifications for the Network domain by&#xA;# listening for a particular event. We&#39;ll also store a callback that will&#xA;# decrement the callback counter, so that we can disable notifications ater.&#xA;disable_network_notifications &amp;lt;- b$Network$responseReceived(function (msg) NULL)&#xA;b$Network$setExtraHTTPHeaders(headers = list(&#xA;  foo = &#34;bar&#34;,&#xA;  header1 = &#34;value1&#34;&#xA;))&#xA;&#xA;# Visit a web page that prints out the request headers&#xA;b$Page$navigate(&#34;http://scooterlabs.com/echo&#34;)&#xA;b$screenshot(show = TRUE)&#xA;&#xA;&#xA;# Unset extra headers. Note that `list(a=1)[0]` creates an empty _named_ list;&#xA;# an empty unnamed list will cause an error because they&#39;re converted to JSON&#xA;# differently. A named list becomes &#34;{}&#34;, but an unnamed list becomes &#34;[]&#34;.&#xA;b$Network$setExtraHTTPHeaders(headers = list(a=1)[0])&#xA;&#xA;# Request again&#xA;b$Page$navigate(&#34;http://scooterlabs.com/echo&#34;)&#xA;b$screenshot(show = TRUE)&#xA;&#xA;&#xA;# Disable extra headers entirely, by decrementing Network callback counter,&#xA;# which will disable Network notifications.&#xA;disable_network_notifications()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom User-Agent&lt;/h3&gt; &#xA;&lt;p&gt;Synchronous version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ==== Synchronous version ====&#xA;b$Network$setUserAgentOverride(userAgent = &#34;My fake browser&#34;)&#xA;&#xA;b$Page$navigate(&#34;http://scooterlabs.com/echo&#34;)&#xA;b$screenshot(show = TRUE)&#xA;&#xA;&#xA;# ==== Async version ====&#xA;b$Network$setUserAgentOverride(userAgent = &#34;My fake browser&#34;, wait_ = FALSE)&#xA;b$Page$navigate(&#34;http://scooterlabs.com/echo&#34;, wait_ = FALSE)&#xA;b$Page$loadEventFired(wait_ = FALSE)$&#xA;  then(function(value) {&#xA;    b$screenshot(show = TRUE)&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extracting text from a web page&lt;/h3&gt; &#xA;&lt;p&gt;One way to extract text from a page is to tell the browser to run JavaScript code that does it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ==== Synchronous version ====&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;)&#xA;&#xA;# Run JavaScript to extract text from the page&#xA;x &amp;lt;- b$Runtime$evaluate(&#39;document.querySelector(&#34;.corset .string-major a&#34;).innerText&#39;)&#xA;x$result$value&#xA;#&amp;gt; [1] &#34;Chrome 75 on macOS (Mojave)&#34;&#xA;&#xA;&#xA;# ==== Async version ====&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;, wait_ = FALSE)&#xA;b$Page$loadEventFired(wait_ = FALSE)$&#xA;  then(function(value) {&#xA;    b$Runtime$evaluate(&#xA;      &#39;document.querySelector(&#34;.corset .string-major a&#34;).innerText&#39;&#xA;    )&#xA;  })$&#xA;  then(function(value) {&#xA;    print(value$result$value)&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way is to use CDP commands to extract content from the DOM. This does not require executing JavaScript in the browser’s context, but it is also not as flexible as JavaScript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# ==== Synchronous version ====&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;)&#xA;x &amp;lt;- b$DOM$getDocument()&#xA;x &amp;lt;- b$DOM$querySelector(x$root$nodeId, &#34;.corset .string-major a&#34;)&#xA;b$DOM$getOuterHTML(x$nodeId)&#xA;#&amp;gt; $outerHTML&#xA;#&amp;gt; [1] &#34;&amp;lt;a href=\&#34;/detect/what-version-of-chrome-do-i-have\&#34;&amp;gt;Chrome 75 on macOS (Mojave)&amp;lt;/a&amp;gt;&#34;&#xA;&#xA;&#xA;# ==== Async version ====&#xA;b$Page$navigate(&#34;https://www.whatismybrowser.com/&#34;, wait_ = FALSE)&#xA;b$Page$loadEventFired(wait_ = FALSE)$&#xA;  then(function(value) {&#xA;    b$DOM$getDocument()&#xA;  })$&#xA;  then(function(value) {&#xA;    b$DOM$querySelector(value$root$nodeId, &#34;.corset .string-major a&#34;)&#xA;  })$&#xA;  then(function(value) {&#xA;    b$DOM$getOuterHTML(value$nodeId)&#xA;  })$&#xA;  then(function(value) {&#xA;    print(value)&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Websites that require authentication&lt;/h3&gt; &#xA;&lt;p&gt;For websites that require authentication, you can use Chromote to get screenshots by doing the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in interactively and navigate to the page.&lt;/li&gt; &#xA; &lt;li&gt;Capture cookies from the page and save them.&lt;/li&gt; &#xA; &lt;li&gt;In a later R session, load the cookies.&lt;/li&gt; &#xA; &lt;li&gt;Use the cookies in Chromote and navigate to the page.&lt;/li&gt; &#xA; &lt;li&gt;Take a screenshot.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There are two ways to capture the cookies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt; The first method uses the headless browser’s viewer. This can be a bit inconvenient because it requires going through the entire login process, even if you have already logged in with a normal browser.&lt;/p&gt; &#xA;&lt;p&gt;First navigate to the page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(chromote)&#xA;b &amp;lt;- ChromoteSession$new()&#xA;b$view()&#xA;b$Page$navigate(&#34;https://beta.rstudioconnect.com/content/123456/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, log in interactively via the viewer. Once that’s done, use Chromote to capture the cookies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cookies &amp;lt;- b$Network$getCookies()&#xA;str(cookies)&#xA;saveRDS(cookies, &#34;cookies.rds&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After saving the cookies, you can restart R and navigate to the page, using the cookies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(chromote)&#xA;b &amp;lt;- ChromoteSession$new()&#xA;b$view()&#xA;cookies &amp;lt;- readRDS(&#34;cookies.rds&#34;)&#xA;b$Network$setCookies(cookies = cookies$cookies)&#xA;# Navigate to the app that requires a login&#xA;b$Page$navigate(&#34;https://beta.rstudioconnect.com/content/123456/&#34;)&#xA;b$screenshot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 2:&lt;/strong&gt; The second method captures the cookies using a normal browser. This is can be more convenient because, if you are already logged in, you don’t need to do it again. This requires a Chromium-based browser, and it requires running DevTools-in-DevTools on that browser.&lt;/p&gt; &#xA;&lt;p&gt;First, navigate to the page in your browser. Then press CMD-Option-I (Mac) or Ctrl-Shift-I (Windows/Linux). The developer tools panel will open. Make sure to undock the developer tools so that they are in their own window. Then press CMD-Option-I or Ctrl-Shift-I again. A second developer tools window will open. (See &lt;a href=&#34;https://stackoverflow.com/questions/12291138/how-do-you-inspect-the-web-inspector-in-chrome/12291163#12291163&#34;&gt;this SO answer&lt;/a&gt; for detailed instructions.)&lt;/p&gt; &#xA;&lt;p&gt;In the second developer tools window, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var cookies = await Main.sendOverProtocol(&#39;Network.getCookies&#39;, {})&#xA;JSON.stringify(cookies)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return a JSON string representing the cookies for that page. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[{&#34;cookies&#34;:[{&#34;name&#34;:&#34;AWSALB&#34;,&#34;value&#34;:&#34;T3dNdcdnMasdf/cNn0j+JHMVkZ3RI8mitnAggd9AlPsaWJdsfoaje/OowIh0qe3dDPiHc0mSafe5jNH+1Aeinfalsd30AejBZDYwE&#34;,&#34;domain&#34;:&#34;beta.rstudioconnect.com&#34;,&#34;path&#34;:&#34;/&#34;,&#34;expires&#34;:1594632233.96943,&#34;size&#34;:130,&#34;httpOnly&#34;:false,&#34;secure&#34;:false,&#34;session&#34;:false}]}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy that string to the clipboard. In your R session, you can paste it to this code, surrounded by single-quotes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cookie_json &amp;lt;- &#39;[{&#34;cookies&#34;:[{&#34;name&#34;:&#34;AWSALB&#34;,&#34;value&#34;:&#34;T3dNdcdnMasdf/cNn0j+JHMVkZ3RI8mitnAggd9AlPsaWJdsfoaje/OowIh0qe3dDPiHc0mSafe5jNH+1Aeinfalsd30AejBZDYwE&#34;,&#34;domain&#34;:&#34;beta.rstudioconnect.com&#34;,&#34;path&#34;:&#34;/&#34;,&#34;expires&#34;:1594632233.96943,&#34;size&#34;:130,&#34;httpOnly&#34;:false,&#34;secure&#34;:false,&#34;session&#34;:false}]}]&#39;&#xA;&#xA;cookies &amp;lt;- jsonlite::fromJSON(cookie_json, simplifyVector = FALSE)[[1]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use Chromote to navigate to the page and take a screenshot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(chromote)&#xA;b &amp;lt;- ChromoteSession$new()&#xA;b$view()&#xA;b$Network$setCookies(cookies = cookies$cookies)&#xA;b$Page$navigate(&#34;https://beta.rstudioconnect.com/content/123456/&#34;)&#xA;b$screenshot()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>KWB-R/geosalz.phreeqc</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/KWB-R/geosalz.phreeqc</id>
    <link href="https://github.com/KWB-R/geosalz.phreeqc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R Package for Preparing Lab Samples as PHREEQC input for project GeoSalz&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/KWB-R/geosalz.phreeqc/actions?query=workflow%3AR-CMD-check&#34;&gt;&lt;img src=&#34;https://github.com/KWB-R/geosalz.phreeqc/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KWB-R/geosalz.phreeqc/actions?query=workflow%3Apkgdown&#34;&gt;&lt;img src=&#34;https://github.com/KWB-R/geosalz.phreeqc/workflows/pkgdown/badge.svg?sanitize=true&#34; alt=&#34;pkgdown&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/KWB-R/geosalz.phreeqc&#34;&gt;&lt;img src=&#34;https://codecov.io/github/KWB-R/geosalz.phreeqc/branch/main/graphs/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tidyverse.org/lifecycle/#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Project Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/geosalz.phreeqc&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kwb-r.r-universe.dev/&#34;&gt;&lt;img src=&#34;https://kwb-r.r-universe.dev/badges/geosalz.phreeqc&#34; alt=&#34;R-Universe_Status_Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;geosalz.phreeqc&lt;/h1&gt; &#xA;&lt;p&gt;R Package for Preparing Lab Samples as PHREEQC input for project GeoSalz.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For details on how to install KWB-R packages checkout our &lt;a href=&#34;https://kwb-r.github.io/kwb.pkgbuild/articles/install.html&#34;&gt;installation tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### Optionally: specify GitHub Personal Access Token (GITHUB_PAT)&#xA;### See here why this might be important for you:&#xA;### https://kwb-r.github.io/kwb.pkgbuild/articles/install.html#set-your-github_pat&#xA;&#xA;# Sys.setenv(GITHUB_PAT = &#34;mysecret_access_token&#34;)&#xA;&#xA;# Install package &#34;remotes&#34; from CRAN&#xA;if (! require(&#34;remotes&#34;)) {&#xA;  install.packages(&#34;remotes&#34;, repos = &#34;https://cloud.r-project.org&#34;)&#xA;}&#xA;&#xA;# Install KWB package &#39;geosalz.phreeqc&#39; from GitHub&#xA;remotes::install_github(&#34;KWB-R/geosalz.phreeqc&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Release: &lt;a href=&#34;https://kwb-r.github.io/geosalz.phreeqc&#34;&gt;https://kwb-r.github.io/geosalz.phreeqc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Development: &lt;a href=&#34;https://kwb-r.github.io/geosalz.phreeqc/dev&#34;&gt;https://kwb-r.github.io/geosalz.phreeqc/dev&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wch/r-source</title>
    <updated>2022-05-30T01:50:28Z</updated>
    <id>tag:github.com,2022-05-30:/wch/r-source</id>
    <link href="https://github.com/wch/r-source" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Read-only mirror of R source code from https://svn.r-project.org/R/, updated hourly. See the build instructions on the wiki page.&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&lt;code&gt;&#x9;&#x9;THE BASIC R README&#xA;&#xA;&#xA;   (See &#34;doc/FAQ&#34; and &#34;doc/RESOURCES&#34; for more detailed information&#xA;&#x9;&#x9;&#x9;      - these files are only in the tarballs)&#xA;   (See &#34;INSTALL&#34;             for help on installation)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;INTRODUCTION&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This directory contains the source code tree for R, which is a language which is not entirely unlike (versions 3 and 4 of) the S language developed at AT&amp;amp;T Bell Laboratories by Rick Becker, John Chambers and Allan Wilks.&lt;/p&gt; &#xA;&lt;p&gt;R is free software distributed under a GNU-style copyleft.&lt;/p&gt; &#xA;&lt;p&gt;The core of R is an interpreted computer language with a syntax superficially similar to C, but which is actually a &#34;functional programming language&#34; with capabilities similar to Scheme. The language allows branching and looping as well as modular programming using functions. Most of the user-visible functions in R are written in R, calling upon a smaller set of internal primitives. It is possible for the user to interface to procedures written in C or Fortran languages for efficiency, and also to write additional primitives.&lt;/p&gt; &#xA;&lt;p&gt;The R distribution contains functionality for a large number of statistical procedures. Among these are: linear and generalized linear models, nonlinear regression models, time series analysis, classical parametric and nonparametric tests, clustering and smoothing. There is also a large set of functions which provide a flexible graphical environment for creating various kinds of data presentations.&lt;/p&gt; &#xA;&lt;p&gt;A package specification allows the production of loadable modules for specific purposes, and several thousand contributed packages are made available through the CRAN sites (see &lt;a href=&#34;https://CRAN.R-project.org/mirrors.html&#34;&gt;https://CRAN.R-project.org/mirrors.html&lt;/a&gt; for the current members).&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;HISTORY&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;R was initially written by Robert Gentleman and Ross Ihaka of the Statistics Department of the University of Auckland. In addition, a large group of individuals has contributed to R by sending code and bug reports.&lt;/p&gt; &#xA;&lt;p&gt;Since mid-1997 there has been a core group who can modify the R source code archive, listed in file doc/AUTHORS.&lt;/p&gt; &#xA;&lt;p&gt;R 1.0.0 was released on 29 February 2000 and 2.0.0 on 4 October 2004. R 3.0.0 came out on 3 April 2013.&lt;/p&gt; &#xA;&lt;p&gt;This file has been minimally revised since the release of R 1.0.0.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;PRESENT STATUS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The present version implements most of the functionality in the 1988 book &#34;The New S Language&#34; (the &#34;Blue Book&#34;) and many of the applications. In addition, we have implemented a large part of the functionality from the 1992 book &#34;Statistical Models in S&#34; (the &#34;White Book&#34;) and the 1998 book &#34;Programming with Data&#34; (the &#34;Green Book&#34;).&lt;/p&gt; &#xA;&lt;p&gt;All the R functions have been documented in the form of help pages in an &#34;output independent&#34; form which can be used to create versions for HTML, PDF, text etc. A 1900+ page Reference Index (a collection of most of the help pages: there is also a 3300+ page version with all the help pages, including recommended packages) can be obtained in PDF. The manual &lt;code&gt;An Introduction to R&#39; provides a more user-friendly starting point, and there is an FAQ, a draft &lt;/code&gt;R Language Definition&#39; manual and more specialized manuals on admininstration, data import/export and extending R. See INSTALL for instructions on how to generate these documents.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;GOALS&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Our aim at the start of this project was to demonstrate that it was possible to produce an S-like environment which did not suffer from the memory-demands and performance problems which S has. Somewhat later, we started to turn R into a &#34;real&#34; system, but unfortunately we lost a large part of the efficiency advantage in the process, so have revised the memory management mechanism and implemented delayed loading of R objects. A lot of performance tuning has been done, including the ability to use tuned linear-algebra libraries.&lt;/p&gt; &#xA;&lt;p&gt;Longer-term goals include to explore new ideas: e.g. virtual objects and component-based programming, and expanding the scope of existing ones like formula-based interfaces. Further, we wish to get a handle on a general approach to graphical user interfaces (preferably with cross-platform portability), and to develop better 3-D and dynamic graphics.&lt;/p&gt; &#xA;&lt;p&gt;Sincerely, The R Core Team.&lt;/p&gt;</summary>
  </entry>
</feed>