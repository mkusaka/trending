<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-16T01:44:30Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rstudio/pool</title>
    <updated>2023-02-16T01:44:30Z</updated>
    <id>tag:github.com,2023-02-16:/rstudio/pool</id>
    <link href="https://github.com/rstudio/pool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Object Pooling in R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pool&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/pool/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/pool/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rstudio/pool/actions&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/pool/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/rstudio/pool?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/rstudio/pool/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of the &lt;strong&gt;pool&lt;/strong&gt; package is to abstract away the challenges of database connection management, which is particularly relevant in interactive contexts like Shiny apps that connect to a database.&lt;/p&gt; &#xA;&lt;p&gt;Instead of creating and close connections yourself, you create a &#34;pool&#34; of connections, and the pool package manages them for you. You never have to create or close connections directly: the pool knows when it should grow, shrink or keep steady. You only need to close the pool when you’re done. The pool works seamlessly with DBI and dplyr, so in most cases using the pool package is as simple replacing &lt;code&gt;DBI::dbConnect()&lt;/code&gt; with &lt;code&gt;dbPool()&lt;/code&gt; and adding a call to &lt;code&gt;poolClose()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about why pool is needed in &lt;code&gt;vignette(&#34;why-pool&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(The pool package is actually general enough to allow you to construct a pool of any kind of object, not just database connections, but database connections are currently it&#39;s primary claim to fame.)&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here’s a simple example of using a pool within a Shiny app (feel free to try it yourself):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shiny)&#xA;library(dplyr)&#xA;library(pool)&#xA;loadNamespace(&#34;dbplyr&#34;)&#xA;&#xA;pool &amp;lt;- dbPool(&#xA;  drv = RMySQL::MySQL(),&#xA;  dbname = &#34;shinydemo&#34;,&#xA;  host = &#34;shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com&#34;,&#xA;  username = &#34;guest&#34;,&#xA;  password = &#34;guest&#34;&#xA;)&#xA;onStop(function() {&#xA;  poolClose(pool)&#xA;})&#xA;&#xA;ui &amp;lt;- fluidPage(&#xA;  textInput(&#34;ID&#34;, &#34;Enter your ID:&#34;, &#34;5&#34;),&#xA;  tableOutput(&#34;tbl&#34;),&#xA;  numericInput(&#34;nrows&#34;, &#34;How many cities to show?&#34;, 10),&#xA;  plotOutput(&#34;popPlot&#34;)&#xA;)&#xA;&#xA;server &amp;lt;- function(input, output, session) {&#xA;  city &amp;lt;- tbl(pool, &#34;City&#34;)&#xA;&#xA;  output$tbl &amp;lt;- renderTable({&#xA;    city |&amp;gt; filter(ID == !!input$ID) |&amp;gt; collect()&#xA;  })&#xA;  output$popPlot &amp;lt;- renderPlot({&#xA;    df &amp;lt;- city |&amp;gt; head(input$nrows) |&amp;gt; collect() &#xA;    pop &amp;lt;- df |&amp;gt; pull(&#34;Population&#34;, name = &#34;Name&#34;)&#xA;    barplot(pop)&#xA;  })&#xA;}&#xA;&#xA;shinyApp(ui, server)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: the &lt;code&gt;loadNamespace(&#34;dbplyr&#34;)&lt;/code&gt; line is there to help the &lt;a href=&#34;https://github.com/rstudio/rsconnect&#34;&gt;rsconnect&lt;/a&gt; package when deploying the application to &lt;a href=&#34;https://www.shinyapps.io/&#34;&gt;shinyapps.io&lt;/a&gt; or &lt;a href=&#34;https://posit.co/products/enterprise/connect/&#34;&gt;Posit Connect&lt;/a&gt;. Without that line, rsconnect will not detect that the dbplyr package is needed, and the application will not work properly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ropensci/RSelenium</title>
    <updated>2023-02-16T01:44:30Z</updated>
    <id>tag:github.com,2023-02-16:/ropensci/RSelenium</id>
    <link href="https://github.com/ropensci/RSelenium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An R client for Selenium Remote WebDriver&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RSelenium&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ropensci/RSelenium/actions&#34;&gt;&lt;img src=&#34;https://github.com/ropensci/RSelenium/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/ropensci/RSelenium&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ropensci/RSelenium/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=RSelenium&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/RSelenium&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/RSelenium?color=yellow&#34; alt=&#34;CRAN monthly&#34;&gt; &lt;img src=&#34;http://cranlogs.r-pkg.org/badges/grand-total/RSelenium?color=yellowgreen&#34; alt=&#34;CRAN total&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a set of R Bindings for Selenium &lt;strong&gt;2.0&lt;/strong&gt; Remote WebDriver, which you can download from &lt;a href=&#34;http://selenium-release.storage.googleapis.com/index.html&#34;&gt;http://selenium-release.storage.googleapis.com/index.html&lt;/a&gt;. This binding will not work with the 1.0 version of Selenium.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;RSelenium&lt;/code&gt; from CRAN, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;install.packages(&#34;RSelenium&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the development version from GitHub, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;ropensci/RSelenium&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started using &lt;code&gt;RSelenium&lt;/code&gt; you can look at the introduction vignette located in &lt;code&gt;/doc/basics.html&lt;/code&gt; once &lt;code&gt;RSelenium&lt;/code&gt; is installed or run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;vignette(&#34;basics&#34;, package = &#34;RSelenium&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the basic vignette can be viewed &lt;a href=&#34;https://docs.ropensci.org/RSelenium/articles/basics.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is a second vignette dealing with running RSelenium on different browsers/OS locally and remotely which can be viewed at &lt;a href=&#34;https://docs.ropensci.org/RSelenium/articles/saucelabs.html&#34;&gt;Driving OS/Browsers Local and Remote&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Summary of Vignettes&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/RSelenium/articles/basics.html&#34;&gt;Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/RSelenium/articles/saucelabs.html&#34;&gt;Driving OS/Browsers Local and Remote&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Testing Shiny Apps&lt;/del&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Consider using RStudio&#39;s &lt;a href=&#34;https://rstudio.github.io/shinytest/&#34;&gt;shinytest&lt;/a&gt; package for testing Shiny apps.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Headless Browsing&lt;/del&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PhantomJS development is &lt;a href=&#34;https://github.com/ariya/phantomjs/issues/15344&#34;&gt;suspended&lt;/a&gt; until further notice.&lt;/li&gt; &#xA;   &lt;li&gt;Consider using RStudio&#39;s &lt;a href=&#34;https://rstudio.github.io/webdriver/&#34;&gt;webdriver&lt;/a&gt; package.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/RSelenium/articles/docker.html&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ropensci.org/RSelenium/articles/internetexplorer.html&#34;&gt;Internet Explorer&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Internet Explorer 11 has retired as of June 15, 2022.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Use &lt;a href=&#34;https://saucelabs.com/&#34;&gt;Sauce Labs&lt;/a&gt; and &lt;a href=&#34;https://www.browserstack.com/&#34;&gt;BrowserStack&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Sauce Labs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;user &amp;lt;- &#34;rselenium0&#34;&#xA;pass &amp;lt;- &#34;*******************************&#34;&#xA;port &amp;lt;- 80&#xA;ip &amp;lt;- paste0(user, &#39;:&#39;, pass, &#34;@ondemand.saucelabs.com&#34;)&#xA;browser &amp;lt;- &#34;firefox&#34;&#xA;version &amp;lt;- &#34;25&#34;&#xA;platform &amp;lt;- &#34;OS X 10.9&#34;&#xA;extraCapabilities &amp;lt;- list(&#xA;  name = &#34;Test RSelenium&#34;,&#xA;  username = user,&#xA;  accessKey = pass&#xA;)&#xA;&#xA;remDr &amp;lt;- remoteDriver$new(&#xA;  remoteServerAddr = ip,&#xA;  port = port,&#xA;  browserName = browser,&#xA;  version = version,&#xA;  platform = platform,&#xA;  extraCapabilities = extraCapabilities&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BrowserStack&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;user &amp;lt;- &#34;johnharrison&#34; &#xA;pass &amp;lt;- &#34;*******************&#34;&#xA;port &amp;lt;- 80&#xA;ip &amp;lt;- paste0(user, &#39;:&#39;, pass, &#34;@hub.browserstack.com&#34;)&#xA;extraCapabilities &amp;lt;- list(&#xA;  &#34;browser&#34; = &#34;IE&#34;,&#xA;  &#34;browser_version&#34; = &#34;7.0&#34;,&#xA;  &#34;os&#34; = &#34;Windows&#34;,&#xA;  &#34;os_version&#34; = &#34;XP&#34;,&#xA;  &#34;browserstack.debug&#34; = &#34;true&#34;&#xA;)&#xA;&#xA;remDr &amp;lt;- remoteDriver$new(&#xA;  remoteServerAddr = ip,&#xA;  port = port,&#xA;  extraCapabilities = extraCapabilities&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/chromote/&#34;&gt;chromote&lt;/a&gt;: An R implementation of the Chrome DevTools Protocol. It works with Chrome, Chromium, Opera, Vivaldi, and other browsers based on Chromium.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/shinytest/&#34;&gt;shinytest&lt;/a&gt;: For automated testing of Shiny applications, using a headless browser, driven through &lt;code&gt;webdriver&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rstudio.github.io/webdriver/&#34;&gt;webdriver&lt;/a&gt;: A client for the &#39;WebDriver API&#39;. It allows driving a (probably headless) web browser, and can be used to test web applications, including &lt;code&gt;Shiny&lt;/code&gt; apps. In theory it works with any &#39;WebDriver&#39; implementation, but it was only tested with &#39;PhantomJS&#39;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/johndharrison/seleniumPipes&#34;&gt;seleniumPipes&lt;/a&gt;: A lightweight implementation of the w3c webdriver specification. It has been built utilising &lt;code&gt;xml2&lt;/code&gt;, &lt;code&gt;httr&lt;/code&gt; and &lt;code&gt;magrittr&lt;/code&gt; so provides an alternative for users who are familiar with piping.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crubba/Rwebdriver&#34;&gt;rwebdriver&lt;/a&gt;: R bindings to the Webdriver API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpsievert/rdom&#34;&gt;rdom&lt;/a&gt;: Render and parse the DOM from R via phantomjs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The RSelenium package is licensed under the &lt;a href=&#34;https://www.r-project.org/Licenses/AGPL-3&#34;&gt;AGPLv3&lt;/a&gt;. The help files are licensed under the creative commons attribution, non-commercial, share-alike license &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;CC-NC-SA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As a summary, the AGPLv3 license requires, attribution, include copyright and license in copies of the software, state changes if you modify the code, and disclose all source code. Details are in the COPYING file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ropensci.org&#34;&gt;&lt;img src=&#34;https://ropensci.org/public_images/github_footer.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cec1m1na/myvdd2022_tf_Mina</title>
    <updated>2023-02-16T01:44:30Z</updated>
    <id>tag:github.com,2023-02-16:/cec1m1na/myvdd2022_tf_Mina</id>
    <link href="https://github.com/cec1m1na/myvdd2022_tf_Mina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trabajo Final. Asignatura: Manejo de Datos. Maestría en Estadística Aplicada.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;myvdd2022_tf_Mina&lt;/h1&gt; &#xA;&lt;p&gt;Trabajo Final. Asignatura: Manejo de Datos. Maestría en Estadística Aplicada. Información General&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Objetivos:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Desarrollar una Herramienta que permita la limpieza automática de información pública, generando una rápida visualización y comparación de ciertas características de Fondos Comunes de Inversión, en este caso por Patrimonio Neto pero ampliable a otros atributos. Considerando que las composiciones de los Fondos varían a diario pero sólo se informan cada 15 días a la Cámara en cuestión.&lt;/li&gt; &#xA; &lt;li&gt;Automatizar todo el proceso, desde la captura de la información hasta la generación de la Shiny&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Desarrollo y elección del tema. La idea inicial era aplicar “web scraping” para la captura de la info pero dado que el proceso me topé con apis para cada ficha terminé por investigar importación de archivos tipo json. La elección del tema se debe a que me desempeñé durante 10 años como analista de Fondos y manejé algunos de ellos.&lt;/li&gt; &#xA; &lt;li&gt;Breve Descripción: El Trabajo consta de 2 archivos de R: “limpiezatpfinal.R”: se listaron las url de las fichas de fondos relevantes y se realizó la manipulación y limpieza a través de una función propia, para la posterior generación de una tabla unificada exportada en forma automática a un archivo csv llamado “TablaFinal.csv”. “apptpfinal.R”: aloja la Shiny que comienza con la Importación de la tabla, generada en archivo previo, como Datos de base para finalmente ser presentada la información contenida en forma comparativa permitiendo la interacción con usuario.&lt;/li&gt; &#xA; &lt;li&gt;Fuente: Cámara Argentina de Fondos Comunes de Inversión.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>