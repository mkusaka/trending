<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:53:32Z</updated>
  <subtitle>Daily Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Raymo111/Raymo111</title>
    <updated>2022-06-04T01:53:32Z</updated>
    <id>tag:github.com,2022-06-04:/Raymo111/Raymo111</id>
    <link href="https://github.com/Raymo111/Raymo111" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My awesome profile README&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raymond.li/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/intro.gif&#34; alt=&#34;👋 Hi there! I&#39;m (Raymo(111|nd Li)|https://raymond.li)&#34; title=&#34;👋 Hi there! I&#39;m (Raymo(111|nd Li)|https://raymond.li)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://visitor-badge-reloaded.herokuapp.com/badge?page_id=Raymo111.Raymo111&amp;amp;color=00cf00&#34; alt=&#34;visitors&#34;&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;**Raymo111/Raymo111** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile.&#xA;&#xA;Here are some ideas to get you started:&#xA;&#xA;- 🔭 I’m currently working on ...&#xA;- 🌱 I’m currently learning ...&#xA;- 👯 I’m looking to collaborate on ...&#xA;- 🤔 I’m looking for help with ...&#xA;- 💬 Ask me about ...&#xA;- 📫 How to reach me: ...&#xA;- 😄 Pronouns: ...&#xA;- ⚡ Fun fact: ...&#xA;--&gt; &#xA;&lt;!--&#xA;&lt;table&gt;&#xA;&#x9;&lt;tr&gt;&#xA;&#x9;&lt;/tr&gt;&#xA;&#x9;&lt;tr&gt;&#xA;&#x9;&#x9;&lt;th&gt;&#xA;&#x9;&#x9;&#x9;&lt;h2&gt;&lt;code&gt;𝚂𝚙𝚎𝚌𝚒𝚊𝚕&lt;/code&gt;: 𝙸&#39;𝚖 𝚙𝚊𝚛𝚝𝚒𝚌𝚒𝚙𝚊𝚝𝚒𝚗𝚐 𝚒𝚗 𝙷𝚊𝚌𝚔𝚝𝚘𝚋𝚎𝚛𝚏𝚎𝚜𝚝!&lt;/h2&gt;&#xA;&#x9;&#x9;&#x9;𝙰𝚗𝚢𝚘𝚗𝚎 𝚠𝚑𝚘 𝚠𝚊𝚗𝚝𝚜 𝚝𝚘 𝚒𝚜 𝚠𝚎𝚕𝚌𝚘𝚖𝚎 𝚝𝚘 𝚙𝚊𝚛𝚝𝚒𝚌𝚒𝚙𝚊𝚝𝚎! 𝙹𝚞𝚜𝚝 𝚜𝚒𝚐𝚗 𝚞𝚙 𝚊𝚝 &lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚑𝚊𝚌𝚔𝚝𝚘𝚋𝚎𝚛𝚏𝚎𝚜𝚝.𝚍𝚒𝚐𝚒𝚝𝚊𝚕𝚘𝚌𝚎𝚊𝚗.𝚌𝚘𝚖/&lt;/a&gt;.&#xA;&#x9;&#x9;&#x9;&#x9;&lt;br&gt;𝙱𝚊𝚜𝚒𝚌𝚊𝚕𝚕𝚢, 𝚖𝚊𝚔𝚎 𝟺 𝙿𝚁𝚜 𝚝𝚘 𝙶𝚒𝚝𝙷𝚞𝚋 𝚛𝚎𝚙𝚘𝚜 𝚊𝚗𝚍 𝚐𝚎𝚝 𝚝𝚑𝚎𝚖 𝚖𝚎𝚛𝚐𝚎𝚍 𝚘𝚛 𝚝𝚊𝚐𝚐𝚎𝚍 &lt;code&gt;hacktoberfest-accepted&lt;/code&gt; 𝚠𝚒𝚕𝚕 𝚐𝚎𝚝 𝚌𝚘𝚘𝚕&amp;nbsp𝚜𝚠𝚊𝚐!&#xA;&#x9;&#x9;&lt;/th&gt;&#xA;&#x9;&lt;/tr&gt;&#xA;&#x9;&lt;tr&gt;&#xA;&#x9;&#x9;&lt;td&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;b&gt;𝙻𝚒𝚜𝚝 𝚘𝚏 𝚖𝚢 𝚛𝚎𝚙𝚘𝚜 𝚙𝚊𝚛𝚝𝚒𝚌𝚒𝚙𝚊𝚝𝚒𝚗𝚐 𝚒𝚗 𝚝𝚑𝚒𝚜 𝚊𝚠𝚎𝚜𝚘𝚖𝚎 𝚎𝚟𝚎𝚗𝚝:&lt;b&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;ul&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/emoji&#34;&gt;𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚎𝚖𝚘𝚓𝚒&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/drracket-customization&#34;&gt;𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚍𝚛𝚛𝚊𝚌𝚔𝚎𝚝-𝚌𝚞𝚜𝚝𝚘𝚖𝚒𝚣𝚊𝚝𝚒𝚘𝚗&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/i3lock-color&#34;&gt;𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛&lt;/a&gt;&lt;/li&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;/ul&gt;&#xA;&#x9;&#x9;&lt;/td&gt;&#xA;&#x9;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;--&gt; &#xA;&lt;h2&gt;&lt;span&gt;📖&lt;/span&gt; 𝙰𝚋𝚘𝚞𝚝 𝙼𝚎&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🖥 𝙵𝚞𝚕𝚕-𝚜𝚝𝚊𝚌𝚔 𝚜𝚘𝚏𝚝𝚠𝚊𝚛𝚎 𝚍𝚎𝚟𝚎𝚕𝚘𝚙𝚎𝚛&lt;/li&gt; &#xA; &lt;li&gt;💼 𝙵𝚘𝚞𝚗𝚍𝚎𝚛 𝚘𝚏 &lt;a href=&#34;https://edgeprim.com&#34;&gt;&lt;img src=&#34;https://edgeprim.com/assets/images/EdgePrim.svg?sanitize=true&#34; height=&#34;30em&#34; align=&#34;center&#34; alt=&#34;EdgePrim&#34; title=&#34;EdgePrim&#34;&gt;&lt;/a&gt; 𝚊𝚗𝚍 &lt;a href=&#34;https://youthhax.com&#34;&gt;&lt;img src=&#34;https://youthhax.com/images/yh.png&#34; height=&#34;30em&#34; align=&#34;center&#34; alt=&#34;YouthHax&#34; title=&#34;YouthHax&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎓 𝚂𝚝𝚞𝚍𝚢𝚒𝚗𝚐 𝙷𝚘𝚗𝚘𝚞𝚛𝚜 𝙲𝚘𝚖𝚙𝚞𝚝𝚎𝚛 𝚂𝚌𝚒𝚎𝚗𝚌𝚎 𝚠𝚒𝚝𝚑 𝙲𝚘-𝚘𝚙 𝚊𝚝 𝚝𝚑𝚎 𝚄𝚗𝚒𝚟𝚎𝚛𝚜𝚒𝚝𝚢 𝚘𝚏 𝚆𝚊𝚝𝚎𝚛𝚕𝚘𝚘, 𝚌𝚕𝚊𝚜𝚜 𝚘𝚏 𝟸0𝟸𝟻&lt;/li&gt; &#xA; &lt;li&gt;🌐 𝚈𝚘𝚞 𝚌𝚊𝚗 𝚊𝚌𝚌𝚎𝚜𝚜 𝚊𝚕𝚕 𝚖𝚢 𝚘𝚙𝚎𝚗-𝚜𝚘𝚞𝚛𝚌𝚎 𝚙𝚛𝚘𝚓𝚎𝚌𝚝𝚜 𝚑𝚎𝚛𝚎 𝚘𝚗 𝙶𝚒𝚝𝙷𝚞𝚋 𝚘𝚛 𝚘𝚗 𝚝𝚑𝚎 &lt;a href=&#34;https://aur.archlinux.org/packages/?SeB=M&amp;amp;K=Raymo111&#34;&gt;𝙰𝚄𝚁&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝚋𝚝𝚠 𝙸 𝚞𝚜𝚎 𝙰𝚛𝚌𝚑 &lt;a href=&#34;https://archlinux.org/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/arch.svg?sanitize=true&#34; height=&#34;30em&#34; align=&#34;center&#34; alt=&#34;Arch Linux Logo&#34; title=&#34;Arch Linux Logo&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⬆ 𝚆𝚑𝚊𝚝 𝙸&#39;𝚖 𝚞𝚙 𝚝𝚘&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔨 𝙸&#39;𝚖 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝚕𝚢...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Developing the CS 136L course (and the PS5 Control Center!)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- - 🔨 𝙸&#39;𝚖 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝚕𝚢 𝚍𝚘𝚒𝚗𝚐 𝚊𝚗 𝚒𝚗𝚝𝚎𝚛𝚗𝚜𝚑𝚒𝚙 𝚊𝚝 𝚂𝚘𝚗𝚢 𝙿𝚕𝚊𝚢𝚜𝚝𝚊𝚝𝚒𝚘𝚗! --&gt; &#xA;&lt;!-- - 🔨 𝙸’𝚖 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝚕𝚢 𝚠𝚘𝚛𝚔𝚒𝚗𝚐 𝚘𝚗 𝚊 𝚗𝚎𝚠 [**𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛**](https://github.com/Raymo111/i3lock-color) 𝚛𝚎𝚕𝚎𝚊𝚜𝚎 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎯 𝙸𝚗 𝚝𝚑𝚎 𝚗𝚎𝚊𝚛 𝚏𝚞𝚝𝚞𝚛𝚎, 𝙸 𝚙𝚕𝚊𝚗 𝚝𝚘... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;𝙰𝚍𝚍 𝚓𝚊𝚟𝚊𝚜𝚌𝚛𝚒𝚙𝚝 𝚌𝚘𝚙𝚢 𝚝𝚘 &lt;a href=&#34;https://github.com/Raymo111/emoji&#34;&gt;&lt;strong&gt;𝚎𝚖𝚘𝚓𝚒&lt;/strong&gt;&lt;/a&gt; 𝚊𝚗𝚍 𝚖𝚊𝚔𝚎 𝚒𝚝 𝚒𝚗𝚝𝚘 𝚊 𝙱𝚎𝚝𝚝𝚎𝚛𝙳𝚒𝚜𝚌𝚘𝚛𝚍 𝚙𝚕𝚞𝚐𝚒𝚗&lt;/li&gt; &#xA;   &lt;li&gt;𝙰𝚍𝚍 𝚖𝚢 𝚕𝚊𝚝𝚎𝚜𝚝 𝙸𝚗𝚜𝚝𝚊𝚐𝚛𝚊𝚖 𝚙𝚘𝚜𝚝𝚜 𝚊𝚗𝚍 𝚕𝚘𝚌𝚊𝚕 𝚠𝚎𝚊𝚝𝚑𝚎𝚛 𝚝𝚘 𝚝𝚑𝚒𝚜 𝚁𝙴𝙰𝙳𝙼𝙴&lt;/li&gt; &#xA;   &lt;li&gt;𝙼𝚊𝚔𝚎 &lt;a href=&#34;https://github.com/Raymo111/kahoot-answer-bot&#34;&gt;&lt;strong&gt;𝙺𝚊𝚑𝚘𝚘𝚝 𝙱𝚘𝚝&lt;/strong&gt;&lt;/a&gt; 𝚠𝚘𝚛𝚔 𝚠𝚒𝚝𝚑 𝚝𝚑𝚎 𝚗𝚎𝚠 𝙺𝚊𝚑𝚘𝚘𝚝 𝚁𝙴𝚂𝚃 𝚏𝚘𝚛𝚖𝚊𝚝 𝚏𝚘𝚛 𝙰𝚜𝚜𝚒𝚐𝚗𝚎𝚍 𝙺𝚊𝚑𝚘𝚘𝚝𝚜&lt;/li&gt; &#xA;   &lt;li&gt;𝙸𝚗𝚝𝚎𝚐𝚛𝚊𝚝𝚎 &lt;code&gt;youtube-dl.py&lt;/code&gt; 𝚒𝚗𝚝𝚘 &lt;a href=&#34;https://github.com/Raymo111/movie-dl&#34;&gt;&lt;strong&gt;𝚖𝚘𝚟𝚒𝚎-𝚍𝚕&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🤞 𝙾𝚗𝚎 𝚍𝚊𝚢 𝙸 𝚑𝚘𝚙𝚎 𝚝𝚘... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;𝙶𝚘 𝚜𝚔𝚢𝚍𝚒𝚟𝚒𝚗𝚐!&lt;/li&gt; &#xA;   &lt;li&gt;𝙲𝚘𝚗𝚝𝚛𝚒𝚋𝚞𝚝𝚎 𝚌𝚘𝚍𝚎 𝚝𝚘 𝚝𝚑𝚎 &lt;a href=&#34;https://github.com/torvalds/linux&#34;&gt;𝙻𝚒𝚗𝚞𝚡 𝚔𝚎𝚛𝚗𝚎𝚕&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;𝙰𝚍𝚍 𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛 𝚝𝚘 𝙳𝚎𝚋𝚒𝚊𝚗, 𝚄𝚋𝚞𝚗𝚝𝚞, 𝚊𝚗𝚍 𝚁𝚎𝚍 𝙷𝚊𝚝/𝙵𝚎𝚍𝚘𝚛𝚊&lt;/li&gt; &#xA;   &lt;li&gt;𝙸𝚗𝚜𝚝𝚊𝚕𝚕 𝙶𝚎𝚗𝚝𝚘𝚘 (𝚒𝚝 𝚒𝚜 𝚋𝚎𝚢𝚘𝚗𝚍 𝚖𝚢 𝚙𝚘𝚠𝚎𝚛 𝚗𝚘𝚠... 𝙸 𝚖𝚞𝚜𝚝 𝚝𝚛𝚊𝚒𝚗 𝚑𝚊𝚛𝚍...)&lt;/li&gt; &#xA;   &lt;li&gt;𝙶𝚎𝚝 𝚊 𝙵𝙰𝙰𝙽𝙶𝙼+ 𝚒𝚗𝚝𝚎𝚛𝚗𝚜𝚑𝚒𝚙 (𝚒𝚏 𝚢𝚘𝚞 𝚑𝚊𝚟𝚎 𝚝𝚑𝚒𝚜 𝚙𝚘𝚠𝚎𝚛 𝚝𝚘 𝚙𝚕𝚎𝚊𝚜𝚎 𝚑𝚒𝚛𝚎 𝚖𝚎)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🤔 𝙻𝚒𝚜𝚝 𝚘𝚏 𝚒𝚜𝚜𝚞𝚎𝚜 𝙸 𝚗𝚎𝚎𝚍 𝚑𝚎𝚕𝚙 𝚠𝚒𝚝𝚑: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/136&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛/𝚒𝚜𝚜𝚞𝚎𝚜/𝟷𝟹𝟼&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/159&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚁𝚊𝚢𝚖𝚘𝟷𝟷𝟷/𝚒𝟹𝚕𝚘𝚌𝚔-𝚌𝚘𝚕𝚘𝚛/𝚒𝚜𝚜𝚞𝚎𝚜/𝟷𝟻𝟿&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔔 𝙼𝚢 𝙻𝚊𝚝𝚎𝚜𝚝 𝙶𝚒𝚝𝙷𝚞𝚋 𝙰𝚌𝚝𝚒𝚟𝚒𝚝𝚢&lt;/h2&gt; &#xA;&lt;!--START_SECTION:activity--&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;🗣 Commented on &lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/257&#34;&gt;#257&lt;/a&gt; in &lt;a href=&#34;https://github.com/Raymo111/i3lock-color&#34;&gt;Raymo111/i3lock-color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;❗️ Closed issue &lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/257&#34;&gt;#257&lt;/a&gt; in &lt;a href=&#34;https://github.com/Raymo111/i3lock-color&#34;&gt;Raymo111/i3lock-color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🗣 Commented on &lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/259&#34;&gt;#259&lt;/a&gt; in &lt;a href=&#34;https://github.com/Raymo111/i3lock-color&#34;&gt;Raymo111/i3lock-color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🗣 Commented on &lt;a href=&#34;https://github.com/Raymo111/i3lock-color/issues/260&#34;&gt;#260&lt;/a&gt; in &lt;a href=&#34;https://github.com/Raymo111/i3lock-color&#34;&gt;Raymo111/i3lock-color&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;❗️ Closed issue &lt;a href=&#34;https://github.com/Raymo111/kahoot-answer-bot/issues/14&#34;&gt;#14&lt;/a&gt; in &lt;a href=&#34;https://github.com/Raymo111/kahoot-answer-bot&#34;&gt;Raymo111/kahoot-answer-bot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!--END_SECTION:activity--&gt; &#xA;&lt;!--&#xA;## 🔔 𝙼𝚢 𝙻𝚊𝚝𝚎𝚜𝚝 𝚃𝚠𝚎𝚎𝚝&#xA;&lt;a href=&#34;https://twitter.com/Raym0111&#34; target=&#34;_blank&#34;&gt;&#xA;&#x9;&lt;img src=&#34;https://github.com/Raymo111/Raymo111/raw/master/tweet.png&#34; width=&#34;70%&#34; align=&#34;center&#34; alt=&#34;Click to view on Twitter&#34; title=&#34;My latest tweet, as an image&#34;/&gt;&#xA;&lt;/a&gt;&#xA;--&gt; &#xA;&lt;h2&gt;🔔 𝙼𝚢 𝙻𝚊𝚝𝚎𝚜𝚝 𝙶𝚒𝚝𝙷𝚞𝚋 𝙼𝚎𝚝𝚛𝚒𝚌𝚜&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://metrics.lecoq.io/Raymo111?template=classic&amp;amp;base.header=0&amp;amp;gists=1&amp;amp;lines=1&amp;amp;config.timezone=America%2FToronto&#34; alt=&#34;Metrics&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📫 𝙷𝚘𝚠 𝚝𝚘 𝚛𝚎𝚊𝚌𝚑 𝚖𝚎:&lt;/h2&gt; &#xA;&lt;p&gt;𝚈𝚘𝚞 𝚌𝚊𝚗 𝚛𝚎𝚊𝚌𝚑 𝚖𝚎 𝚊𝚝 𝚝𝚑𝚎 𝚎𝚖𝚊𝚒𝚕 𝚒𝚗 𝚖𝚢 𝚐𝚒𝚝𝚑𝚞𝚋 𝚙𝚛𝚘𝚏𝚒𝚕𝚎. 𝙵𝚘𝚕𝚕𝚘𝚠 𝚖𝚢 𝚜𝚘𝚌𝚒𝚊𝚕𝚜!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://linkedin.com/in/Raymo111&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/linkedin.png&#34; height=&#34;40em&#34; align=&#34;center&#34; alt=&#34;Follow Raymo111 on LinkedIn&#34; title=&#34;Follow Raymo111 on LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Raym0111&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/twitter.svg?sanitize=true&#34; height=&#34;40em&#34; align=&#34;center&#34; alt=&#34;Follow Raym0111 on Twitter&#34; title=&#34;Follow Raymo111 on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://instagram.com/Raymo111&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Raymo111/Raymo111/master/socials/instagram.svg?sanitize=true&#34; height=&#34;40em&#34; align=&#34;center&#34; alt=&#34;Follow Raymo111 on Instagram&#34; title=&#34;Follow Raymo111 on Instagram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⚡ 𝙻𝚒𝚜𝚝 𝚘𝚏 𝚌𝚘𝚘𝚕 𝚝𝚑𝚒𝚗𝚐𝚜 𝚝𝚑𝚊𝚝 𝚠𝚎𝚗𝚝 𝚒𝚗𝚝𝚘 𝚝𝚑𝚒𝚜 𝚙𝚛𝚘𝚏𝚒𝚕𝚎 𝚁𝙴𝙰𝙳𝙼𝙴&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;𝚃𝚢𝚙𝚎𝙸𝚝, 𝚅𝚞𝚎 𝙿𝚊𝚛𝚝𝚒𝚌𝚕𝚎𝙹𝚜 𝚊𝚗𝚍 𝚅𝚞𝚎.𝚓𝚜 𝚏𝚘𝚛 𝚝𝚑𝚎 𝚝𝚢𝚙𝚒𝚗𝚐 𝚒𝚗𝚝𝚛𝚘: &lt;a href=&#34;https://codesandbox.io/s/readme-introgif-9fjo5&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚌𝚘𝚍𝚎𝚜𝚊𝚗𝚍𝚋𝚘𝚡.𝚒𝚘/𝚜/𝚛𝚎𝚊𝚍𝚖𝚎-𝚒𝚗𝚝𝚛𝚘𝚐𝚒𝚏-𝟿𝚏𝚓𝚘𝟻&lt;/a&gt; &#xA;  &lt;!-- Thanks to @matyo91&#39;s helpful comments in their profile README! --&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙿𝚛𝚘𝚏𝚒𝚕𝚎 𝚟𝚒𝚜𝚒𝚝 𝚌𝚘𝚞𝚗𝚝 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://github.com/Nathan13888/VisitorBadgeReloaded&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝙽𝚊𝚝𝚑𝚊𝚗𝟷𝟹𝟾𝟾𝟾/𝚅𝚒𝚜𝚒𝚝𝚘𝚛𝙱𝚊𝚍𝚐𝚎𝚁𝚎𝚕𝚘𝚊𝚍𝚎𝚍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙼𝚘𝚗𝚘𝚜𝚙𝚊𝚌𝚎𝚍 𝚝𝚎𝚡𝚝 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://yaytext.com/monospace/&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚢𝚊𝚢𝚝𝚎𝚡𝚝.𝚌𝚘𝚖/𝚖𝚘𝚗𝚘𝚜𝚙𝚊𝚌𝚎/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙶𝚒𝚝𝙷𝚞𝚋 𝚊𝚌𝚝𝚒𝚟𝚒𝚝𝚢 𝚊𝚌𝚝𝚒𝚘𝚗 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://github.com/jamesgeorge007/github-activity-readme&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚓𝚊𝚖𝚎𝚜𝚐𝚎𝚘𝚛𝚐𝚎00𝟽/𝚐𝚒𝚝𝚑𝚞𝚋-𝚊𝚌𝚝𝚒𝚟𝚒𝚝𝚢-𝚛𝚎𝚊𝚍𝚖𝚎&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;𝙶𝚒𝚝𝙷𝚞𝚋 𝙼𝚎𝚝𝚛𝚒𝚌𝚜 𝚏𝚛𝚘𝚖 &lt;a href=&#34;https://github.com/lowlighter/metrics&#34;&gt;𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚕𝚘𝚠𝚕𝚒𝚐𝚑𝚝𝚎𝚛/𝚖𝚎𝚝𝚛𝚒𝚌𝚜&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;- 𝙻𝚊𝚝𝚎𝚜𝚝 𝚝𝚠𝚎𝚎𝚝 𝚊𝚌𝚝𝚒𝚘𝚗 𝚏𝚛𝚘𝚖 [𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚣𝚑𝚒𝚒𝚒𝚢𝚊𝚗𝚐/𝚣𝚑𝚒𝚒𝚒𝚢𝚊𝚗𝚐](https://github.com/zhiiiyang/zhiiiyang)&#xA;- 𝙻𝚊𝚝𝚎𝚜𝚝 𝙸𝚗𝚜𝚝𝚊𝚐𝚛𝚊𝚖 𝚙𝚘𝚜𝚝𝚜 𝚊𝚗𝚍 𝚠𝚎𝚊𝚝𝚑𝚎𝚛 𝚏𝚛𝚘𝚖 [𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚝𝚑𝚖𝚜𝚐𝚋𝚛𝚝/𝚝𝚑𝚖𝚜𝚐𝚋𝚛𝚝](https://github.com/thmsgbrt/thmsgbrt)&#xA;- 𝙰𝚕𝚕-𝚝𝚒𝚖𝚎 𝙶𝚒𝚝𝙷𝚞𝚋 𝚜𝚝𝚊𝚝𝚜 𝚏𝚛𝚘𝚖 [𝚑𝚝𝚝𝚙𝚜://𝚐𝚒𝚝𝚑𝚞𝚋.𝚌𝚘𝚖/𝚖𝚊𝚛𝚔𝚎𝚝𝚙𝚕𝚊𝚌𝚎/𝚊𝚌𝚝𝚒𝚘𝚗𝚜/𝚙𝚛𝚘𝚏𝚒𝚕𝚎-𝚛𝚎𝚊𝚍𝚖𝚎-𝚜𝚝𝚊𝚝𝚜](https://github.com/marketplace/actions/profile-readme-stats)&#xA;--&gt;</summary>
  </entry>
  <entry>
    <title>hms-dbmi-cellenics/worker</title>
    <updated>2022-06-04T01:53:32Z</updated>
    <id>tag:github.com,2022-06-04:/hms-dbmi-cellenics/worker</id>
    <link href="https://github.com/hms-dbmi-cellenics/worker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;k8s workers that execute Python code for experiments.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://codecov.io/gh/hms-dbmi-cellenics/worker&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/hms-dbmi-cellenics/worker/branch/master/graph/badge.svg?token=3PHqr61GpH&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; worker&lt;/h1&gt; &#xA;&lt;p&gt;The Cellenics data analysis tasks executor. It consists of two containers: a Python container and an R container. For more details on the individual containers, check out the README files in their respective directories.&lt;/p&gt; &#xA;&lt;p&gt;The Python part of the worker is a wrapper around the R part: it receives tasks from the API, parses them, sends them to the R part for computation, then formats the results, uploads them to S3 and sends a notification to the API via Redis-backed socket connection that they are ready.&lt;/p&gt; &#xA;&lt;p&gt;The R part of the worker computes single cell analysis tasks on a pre-processed Seurat rds object, loaded into memory from S3. The R part of the worker can communicate only with the Python part of the worker.&lt;/p&gt; &#xA;&lt;p&gt;More specific details about the Python or the R part of the worker can be found in the README file in the respective folder (python/ or r/).&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;The worker is deployed as a Helm chart to an AWS-managed Kubernetes cluster and runs on a Fargate-managed node. The Helm chart template for the worker is located in &lt;code&gt;chart-infra/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;The deployment of the worker is handled by the cluster Helm operator and the &lt;a href=&#34;https://github.com/hms-dbmi-cellenics/worker/raw/master/.github/workflows/ci.yaml&#34;&gt;worker Github Actions workflow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;During a deployment, the worker Github Actions workflow does the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It pushes new worker images to ECR.&lt;/li&gt; &#xA; &lt;li&gt;Adds deployment-specific configurations to the worker Helm chart. Pushes those deployment-specific configuration changes in &lt;a href=&#34;https://github.com/hms-dbmi-cellenics/iac/tree/master/releases&#34;&gt;releases/&lt;/a&gt; folder in iac, under the relevant environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;h4&gt;Docker resource allocation&lt;/h4&gt; &#xA;&lt;p&gt;Make sure that sufficient resources are allocated in Docker to be able to compile everything. 10gb RAM and 20gb disk image size should be more than enough. Be mindful when allocating RAM, too much and you could end up freezing your computer.&lt;/p&gt; &#xA;&lt;h4&gt;Github Access Token&lt;/h4&gt; &#xA;&lt;p&gt;Create a &lt;a href=&#34;https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token&#34;&gt;Github Access Token&lt;/a&gt; and export it as an environment variable before building. You should consider adding it to your &lt;code&gt;.bashrc&lt;/code&gt; (or &lt;code&gt;.zshrc&lt;/code&gt;) for convenience.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export GITHUB_API_TOKEN=&amp;lt;your-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Assuming the containers are running, you can execute the (pytest) unit tests using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/hms-dbmi-cellenics/worker/master/python/README.md#tests&#34;&gt;here&lt;/a&gt; for more information about the tests.&lt;/p&gt; &#xA;&lt;p&gt;To shut down the development containers, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make kill&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote - Containers&lt;/h3&gt; &#xA;&lt;p&gt;Development is done inside a development container that is automatically built, run, and managed by Visual Studio Code. You do not need R, R Studio, or a Python virtual environment to be installed locally.&lt;/p&gt; &#xA;&lt;p&gt;As such, you must have the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Remote - Containers&lt;/a&gt; extension installed. Make sure you restart VS Code after installing to make sure it loads successfully. You should see a green icon in the leftmost part of the status bar, which indicates that the remote container plugin has been installed.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;To open the R workspace, you can type &lt;code&gt;code r/r.workspace&lt;/code&gt; while in the terminal inside VS Code.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, to open the Python workspace, you can type &lt;code&gt;code python/python.code-workspace&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You should be prompted to run the workspace inside a container. Accept this. Once you see the folder structure, the worker is running and you have access to the R worker&#39;s container. If you get an error after trying to run the workspace inside a container, try running &lt;code&gt;make build&lt;/code&gt; to see where exactly the build breaks. Please check &lt;code&gt;Troubleshooting&lt;/code&gt; section that lists commonly occuring problems.&lt;/p&gt; &#xA;&lt;p&gt;The root directories of each of the workspaces are dynamically linked to &lt;code&gt;/r&lt;/code&gt; and &lt;code&gt;/python&lt;/code&gt; respectively. The terminals spawn terminals within the containers, as expected.&lt;/p&gt; &#xA;&lt;p&gt;These development environments should be pre-configured with the same requirements as the produciton instances, as well as the necessary VS Code extensions required to debug and lint code.&lt;/p&gt; &#xA;&lt;h2&gt;Running locally&lt;/h2&gt; &#xA;&lt;p&gt;To run the worker locally, you will need to build it and then run it, passing the id of the processed experiment that you want to use the worker with.&lt;/p&gt; &#xA;&lt;h3&gt;Step 1. Building the worker&lt;/h3&gt; &#xA;&lt;p&gt;While in the &lt;code&gt;worker/&lt;/code&gt; root folder on the host, you can use &lt;code&gt;make build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build and run the R and python containers, you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that during the first time, the build can take up to 40-50 minutes to complete. If you get an error, see the &lt;code&gt;Troubleshoooting&lt;/code&gt; section for help.&lt;/p&gt; &#xA;&lt;p&gt;To get a development log stream of both containers running, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2. Running the worker&lt;/h3&gt; &#xA;&lt;p&gt;Before running the worker, you need to have a folder named with the experiment id that you want to load. The folder should be saved under &lt;code&gt;worker/data&lt;/code&gt; and it has to contain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Processed rds object file, called &lt;code&gt;r.rds&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A json file of the cell_sets for that experiment, called &lt;code&gt;cell_sets.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example folder structure for experiment id &lt;code&gt;1234&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;data&#xA;├── 1234&#xA;│&amp;nbsp;&amp;nbsp; ├── cell_sets.json&#xA;│&amp;nbsp;&amp;nbsp; └── r.rds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can obtain this folder structure if you do either of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start the rest of the Cellenics components locally, then upload samples from Data Management and launch analysis. A prerequisite for this step is configuring the pipeline to run locally.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the r.rds object and the cell_sets.json file for an already processed experiment from S3 and then manually add them in &lt;code&gt;worker/data&lt;/code&gt; under a new folder named with the experiment id.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can have one or more experiments under &lt;code&gt;worker/data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run the worker with the experiment id of your choice, do the following: In a terminal, while in the &lt;code&gt;worker/&lt;/code&gt; root folder, type the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;EXPERIMENT_ID=1234 make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;1234&lt;/code&gt; is the experiment id of your choice.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Errors saying &lt;code&gt;... unsupported option: &#39;target&#39;&lt;/code&gt; after running &lt;code&gt;make build&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This is most likely a problem with the docker-compose version (which is used by &lt;code&gt;make&lt;/code&gt; to build the images). Simply re-install it:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; pip3 uninstall docker-compose&#xA; pip3 install -U docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;make build&lt;/code&gt; fails due to rate limit errors.&lt;/p&gt; &lt;p&gt;To fix this one, make sure you create a personal access token in your Github account and add it as an environment variable, called &lt;code&gt;GITHUB_PAT&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;1. Go to https://github.com/settings/tokens, create a new token. The token should be read only.&#xA;2. Set `GITHUB_PAT` to equal to the value of the token in a terminal.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Error: Failed to install &#39;unknown package&#39; from Github: Timeout was reached: [api.github.com] Resolving timed out after 10000 milliseconds&lt;/code&gt;&lt;/p&gt; &lt;p&gt;This error is due to a bug in DNS resolution of Alpine-based containers running on early releases of Docker Desktop for Mac version 3.&lt;/p&gt; &lt;p&gt;To fix this, you can download and use a previous version of Docker (e.g. 2.5.0.1) from &lt;a href=&#34;https://docs.docker.com/docker-for-mac/release-notes/&#34;&gt;https://docs.docker.com/docker-for-mac/release-notes/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Error when attempting to start the worker saying something like: &lt;code&gt;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &#34;http://host.docker.internal:4566/biomage-source-development?...&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;First, check inframock is running. If it isn&#39;t, start it and try again. Otherwise, see below.&lt;/p&gt; &#xA;&lt;h5&gt;For Linux users&lt;/h5&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; this error should already been handled by the Makefile builds. If you encounter it while using &lt;code&gt;make run&lt;/code&gt;, report it in the Slack channel #engineering.&lt;/p&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;docker-compose.yaml&lt;/code&gt; In the &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt; entries add at the end:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;extra_hosts:&#xA;      - &#34;host.docker.internal:host-gateway&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IMPORTANT: Don&#39;t include this in a PR, because it will break stuff on macOS.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging locally&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; Save anything in /debug in the container and it will be available at &lt;code&gt;$(pwd)/data/debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To save the &lt;code&gt;req&lt;/code&gt; argument to a worker function, specify DEBUG_STEP. DEBUG_STEP can be either &lt;code&gt;all&lt;/code&gt; (will save &lt;code&gt;req&lt;/code&gt; from any task) or the basename of a &lt;a href=&#34;https://raw.githubusercontent.com/hms-dbmi-cellenics/worker/master/r/work.R#L42&#34;&gt;path in work.R&lt;/a&gt; and will hot-reload if changed in work.R. It can also be set on initial run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# e.g. DEBUG_STEP=getClusters&#xA;DEBUG_STEP=task_name make build &amp;amp;&amp;amp; make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a worker function is run, it will save the &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; objects used by the specified &lt;code&gt;task_name&lt;/code&gt; in ./data/debug. You will see a prompt to read these into your R environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# clicking these files in RStudio does this for you&#xA;req &amp;lt;- readRDS(&#39;./data/debug/{experiment_id}_{task_name}_req.rds&#39;)&#xA;data &amp;lt;- readRDS(&#39;./data/debug/{experiment_id}_data.rds&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hms-dbmi-cellenics/pipeline</title>
    <updated>2022-06-04T01:53:32Z</updated>
    <id>tag:github.com,2022-06-04:/hms-dbmi-cellenics/pipeline</id>
    <link href="https://github.com/hms-dbmi-cellenics/pipeline" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Cellenics pipeline project for dependency-managed work processing.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/hms-dbmi-cellenics/pipeline&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/hms-dbmi-cellenics/pipeline/branch/master/graph/badge.svg?token=kQ19q1EenW&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cellenics Pipeline&lt;/h1&gt; &#xA;&lt;p&gt;The Cellenics pipeline project for dependency-managed work processing.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;The steps of the pipeline that are run through this project are started spontaneously on your machine as Docker containers, simulating Kubernetes in local development.&lt;/p&gt; &#xA;&lt;p&gt;We have included a utility so you can automatically monitor containers spawned and read their logs as they are executing.&lt;/p&gt; &#xA;&lt;p&gt;For local development, you should already have Docker and Node.js installed, as well as Inframock running.&lt;/p&gt; &#xA;&lt;p&gt;Afterwards, you can install the pipeline dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build and run the pipeline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make build &amp;amp;&amp;amp; make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A similar message should appear:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; node src/app.js&#xA;&#xA;Loading CloudFormation for local container launcher...&#xA;Creating mock Lambda function on InfraMock...&#xA;No previous stack found on InfraMock.&#xA;Stack with ARN arn:aws:cloudformation:eu-west-1:000000000000:stack/local-container-launcher/106d1df9 successfully created.&#xA;Waiting for Docker events...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Logs from pipelines run through the API will apear here.&lt;/p&gt; &#xA;&lt;h2&gt;Rebuiling the docker images&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Local development and adding dependencies&lt;/h2&gt; &#xA;&lt;p&gt;First make sure the project library is synchronized with the lockfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# inside pipeline-runner folder&#xA;renv::restore()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To restore Bioconductor packages your R version needs to be the same as in the &lt;a href=&#34;https://raw.githubusercontent.com/hms-dbmi-cellenics/pipeline/master/pipeline-runner/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; (4.0.5).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;install.packages(...)&lt;/code&gt; and use them (e.g. &lt;code&gt;dplyr::left_join(...)&lt;/code&gt;) as you normally would. Then, update the lockfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;renv::snapshot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;commit the changes to the lockfile (used to install dependencies in the Dockerfile). See &lt;a href=&#34;https://rstudio.github.io/renv/&#34;&gt;renv docs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging locally&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: save something inside &lt;code&gt;/debug&lt;/code&gt; in a data processing or gem2s step to access it later from &lt;code&gt;./local-runner/debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TLDR2&lt;/strong&gt;: if the pipeline throws an error, &lt;code&gt;tryCatchLog&lt;/code&gt; will save a &lt;a href=&#34;https://github.com/aryoda/tryCatchLog#how-do-i-perform-a-post-mortem-analysis-of-my-crashed-r-script&#34;&gt;dump file&lt;/a&gt; in &lt;code&gt;./local-runner/debug&lt;/code&gt; that can be used for inspecting the workspace and object values along the call stack.&lt;/p&gt; &#xA;&lt;p&gt;To save the parameters (&lt;code&gt;config&lt;/code&gt;, &lt;code&gt;seurat_obj&lt;/code&gt;, etc) to a &lt;strong&gt;data processing&lt;/strong&gt; task function, specify &lt;code&gt;DEBUG_STEP&lt;/code&gt;. Available tasks include all task names listed in &lt;code&gt;run_processing_step&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/hms-dbmi-cellenics/pipeline/master/pipeline-runner/init.R#L69&#34;&gt;init.R&lt;/a&gt; as well as &lt;code&gt;DEBUG_STEP=all&lt;/code&gt; to save the parameters to all data processing task functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# e.g. DEBUG_STEP=dataIntegration&#xA;DEBUG_STEP=task_name make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the pipeline is run, it will save the parameters to the specified &lt;code&gt;task_name&lt;/code&gt; in &lt;code&gt;$(pwd)/debug&lt;/code&gt;. You can load these into your R environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;# clicking the file in RStudio does this for you&#xA;load(&#39;{task_name}_{sample_id}.RData&#39;)&#xA;&#xA;# if you need to load multiple tasks, you can load each into a seperate environment&#xA;# you would when access objects using e.g. task_env$scdata&#xA;task_env &amp;lt;- new.env()&#xA;load(&#39;{task_name}_{sample_id}.RData&#39;, envir = task_env)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>