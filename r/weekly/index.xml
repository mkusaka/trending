<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-08T02:00:15Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RamiKrispin/shinylive-r</title>
    <updated>2023-10-08T02:00:15Z</updated>
    <id>tag:github.com,2023-10-08:/RamiKrispin/shinylive-r</id>
    <link href="https://github.com/RamiKrispin/shinylive-r" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A guide for deploying Shinylive R application into Github Pages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Deploy Shinylive R App on Github Pages&lt;/h1&gt; &#xA;&lt;p&gt;This repo provides a step-by-step guide for deploying an R Shinylive app to Github Pages. For deploying a Python Shinylive app to Github Actions check this &lt;a href=&#34;https://github.com/RamiKrispin/shinylive&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/shinylive-r/main/images/shinylive-app.gif&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/shinylive-r#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/shinylive-r#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/shinylive-r#render-the-shiny-app&#34;&gt;Render the Shiny App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/shinylive-r#deploy-app-on-github-pages&#34;&gt;Deploy App on Github Pages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/shinylive-r#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/shinylive-r#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Shinylive is a serverless version of Shiny, which enables running Shiny applications in a web browser without needing a backend server. It was first introduced for Python during Posit Conf 2022 using WebAssembly and Pyodide, and its R version during the Posit Conf 2023 using WebR.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/shinylive-r/main/images/shinylive-webr.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 1 - Shinylive archticture, source: Joe Cheng &#34;Running Shiny without a server&#34; &#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Currently, there are three methods (or formats) to use Shinylive applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Render a Shiny app into HTML static file using the shinylive package&lt;/li&gt; &#xA; &lt;li&gt;Host a Shiny app in Fiddle - a built-in web application to run Shiny R and Python applications&lt;/li&gt; &#xA; &lt;li&gt;Embed Shiny app in Quarto documentation using the quarto-shinylive extension for Quarto&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In this tutorial, we will focus on the first option above, using the &lt;a href=&#34;https://github.com/posit-dev/r-shinylive&#34;&gt;shinylive&lt;/a&gt; package to render the app into an HTML file and deploy it as a static website to Github Pages. We will use the Forecasting Sandbox with a Shiny app to demonstrate the deployment process. The app provides a sandbox for three simple forecasting models - Linear regression, ARIMA, and Holt-Winters, enabling the user to modify the model&#39;s parameters and explore the change in the output interactively.&lt;/p&gt; &#xA;&lt;p&gt;Before getting started, just a few words of caution - as of Sep 2023, Shinylive R is in an early and experimental stage. Therefore, some parts of this tutorial may not be applicable or executable in the near future. Please submit an issue if you find anything that does not work or changed.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Generally, the main requirements to render the Shiny app into an HTML file and deploy it to a Github Pages are: A Shiny app (follow the app.R file format) The shinylive R package (dev version The httpuv R package (dev version) A Github repository to host the app as a website We will install both the shinylive and httpuv packages with the pak package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;posit-dev/r-shinylive&#34;)&#xA;pak::pak(&#34;rstudio/httpuv&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those are the package versions used in this tutorial:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; packageVersion(&#34;shinylive&#34;)&#xA;[1] ‘0.1.0’&#xA;&#xA;packageVersion(&#34;httpuv&#34;)&#xA;[1] ‘1.6.11.9000’&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use VScode, the repository contains the Dev Containers settings for running this tutorial inside a dockerized environment.&lt;/p&gt; &#xA;&lt;h2&gt;Render the Shiny App&lt;/h2&gt; &#xA;&lt;p&gt;Once the above prerequisites are set, it is straightforward to deploy the app on Github Pages. First, let&#39;s render the app into an HTML file using the export function (per the shinylive package documentation):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;shinylive::export(app_dir = &#34;myapp&#34;, output_dir = &#34;docs&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;app_dir&lt;/code&gt; argument defines the app folder (in this case, under the myapp folder). The &lt;code&gt;output_dir&lt;/code&gt; argument defines the output of the rendered site (in this case, defined as &lt;strong&gt;docs&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The function will render the app into a website structure, setting the &lt;strong&gt;index.html&lt;/strong&gt; file and its assets into the &lt;code&gt;docs&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Why &lt;code&gt;docs&lt;/code&gt;? We set the &lt;code&gt;output_dir&lt;/code&gt; argument to &lt;code&gt;docs&lt;/code&gt; as the Github Pages&#39; setting required the website files to either be in the repository root folder or the docs folder. The latter, having the site under a folder, is a cleaner option than having it under the root folder.&lt;/p&gt; &#xA;&lt;p&gt;You should expect to have under the &lt;code&gt;docs&lt;/code&gt; folder the &lt;code&gt;edit&lt;/code&gt; and &lt;code&gt;shinylive&lt;/code&gt; folders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.&#xA;└── docs&#xA;    ├── edit&#xA;    └── shinylive&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check if the rendering process was successful using the &lt;code&gt;runStaticServer&lt;/code&gt; function from the httpuv package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;httpuv::runStaticServer(&#34;docs/&#34;, port=8008)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, the runStaticServer function is not available on the latest CRAN version of the package but on the dev version.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can test that your code works as expected on the browser using the Shinylive &lt;a href=&#34;https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAYgAIAxIgJzgKgGdSBLCAc1oDKUCABMARkQAetALRyZAHQh0AKgAsu7WptrDacSbFQAbOLQBmzXYI0QAnsa4A3M1l3olqtWbSpaqJiInLhE4LSgLZlYObj5admFxKUimWlJvWgBBLiYABQ52Cl44Ji0RKFIOOFJPWgBJUniAV3RmUi0AZnjK9pTozh5+GCJQ4y0ZWgAZHjgoVKw4XhZ2di4SXCysOoBZTI3E2gAJImNSGQB1HnJSpSVHMSY5uwAKdls7AEolcsrn7LyCkUSuwvhBagBVOqyeRKJpcWgAHgm5mMcJE+WKz1uEFotDomXQaS4pFM0LkSlx3BJcHyEDgxixYEYLDYAziQlEEkkCjAH1wFPiITgYjmkygdiITVIWLBONxgtCIoBdIZAHcQulaABeWgdfly+XywqmAikOoQVBS548S1mkTa2g84ajHn6w3uj3u4xQMT0h08gT01iNbYjemugWeqPyghqIhcAhhB0ERnTOlzWgLJZhVYkV2OsCZLa7fM846nC5XYE8vmR6NR43BuD2nU8tOzeaLZa5sG8t2eujtjNZ7trHHOv1zXhNeBkdh1w3EUTEsdQYy0+nPJciFckf1gG1SjAT4zanUAciHnezKzH54jBvrT9osdYAGsuQBxQItc2260WlKdQtgWxgwAA+lO854I6j7PtG3q+qerZgIGJqNCOOZjgwsykE0yyIKWcHwZ6sbxomWg6o4nCMioLCiDyDoAIwbAuJHsR6AazOwJBrsSdiMTqABMtbERxRpBqazbMR8olRvixaZLQJ66Ew06zu0bG4tuu7QOuwibjp3B7ihh6kMeYbIReRY7Jk954Fp4numoACsjIAPJMKEqT5I88DXNBclOU+7CON5f5WmZwH7qgD7BfF8qIX6KGoIRDliQlJEwDwDoAAz9plTkwFA0g6i5BWFRxThrk0Zg6rlQWVbioVCkwEXSlFIE8iIcVNRxSXIQWIhpRVfXPtlOL1aNY31sVpW0OVjkzR61WonVtANdNmUteFgEdXt0UoQAjr1y1PgN+5HSNS1nfKE15Vtt2GnNDqLRlT24qttV5Y1TWuYygYcLxp6+bA1TAmlv2VTtJTtQBtqHQWuSnR9HoXShuTXe9H33VNN1PS9ZWPajX3rZt+PiTDbV7fDQFdWAAAiKOo4a6MFgzWMs56uMbcTOMla9fNPaTP1C5TYWwzTnX7gAiszXO0GzPIy5zCvPTlePYwTAtExTZ0i-VoJRlD8p0OWjSXGQwLKZZqnqRQmkZUZq76SqW4kDuxmTQWZkWaMZ60Oe5uVlbpT2WL8GvgQH5SN+kqoHD0soWoqqQWp0GsVrJFK6hkmNMHlsBbQoP+RDRFNWRCZJlRmjSjyABC1RQIJtBCZnau4jyn6wMVLcdCbwWNlJIEpixrcbP3A+D3nicHfTKfgYUQN6fLT052hwaCNxwO0CodioHAqtc5XFHJoymQiJ7zhwKWYDbE0pxcCYCYVNfNYR01Q-kPTF9Xy4NZT0clHGOkhZ4I3psYIgvBy7BRzpMKBu9HgQHYJYJgxUvar3ggbBgmRJgCAAKImypmAum+41CYPrDnZk-RYj8GOEwLgAAvEgR92I8xYnrd0hNaAADZ8qcMNNgoSAAWI27E6C4igKaMc9cpSkBILTO0+4Wg-BvulDiEj2I53BKgVRABCGs2JDSiTrHQbYUAcqoAMqeVBtAdzsBMOKQYtBJSkFtOMGEj5io8A3GqDUagHQAE5pp0GoayRouRIGNHkIoOCJgiCkHclKf8rjwH7nMAQcC8SajqPYt4LgvA1CNBQsI3KuVUDcl5EY+UYjQSglqAzOA5gZjxBKC4VIkDeAJloCwI6cIWD2nkXYx4qprAaE4FAvyZJYmFCYO0xEyImgQGkQosyGxUlSg+LQEAtR4FQEGRkH4VRGgRBYFI7gLgXFiAAFbBjrPaJEPTZjSJcAANRqmEZ4IhzAOiORgcwfk4CKIdBwDAEAZwlATH8HI+QVhAlKHyWC4keChHmoUI6GAGYVCBQCogMAQXsExdixkTFAnCMCTIXKTFKVMXfgI4KYg7D7mGGQchuS15FHSBgVxDpTB8HSNCgEcK+DAlklPDiFjUg6n+LCwoIqEXYkHAg0gSCUHMHQdhOsRAxCzJcPglwZBFEABJOm4B2RlLg5hjWdI+Oa58IgjXfIWXYioUB-mAuBVRKBzxQXgvgAwlMMrATypBIi+l2hRAGAdOiol5Bni4vxTqUFWK408lJeSmlNK6VZ0yoy5lJB0gUKany3gXKeVUU5WoQVsr4WhrEfWCmDrJXOs6dW4NxQFUZQAL76DGGYO1T4HVOseX8gFYNPW6EJX6yFgaYXttFe3DiKKo06hjSmnFgRE2TtjUCtNZKKVUqzX2cN4k80oRZYW9lt0S1lqlLyytbbhUdrrRTRtRrm2PKDU+6s3a6xdvqcoXeGRUE0OcSeLQBhWBSjMEs7yaQMjZKeZGpgAoNmkCNRkrJUTnX0W8pEhJzxzWmO0D8-ZO44gRACM2BMXsI3XFWloUwLhTxTghWQVpjQgglFoN4FgdZUDwkeblDAgSXLVNxGbE4ZxC7WxPHWS1xqVJahQgXKsNxeQDvdBER5YhnUEGdQAOXBJMSY4nDQKYMWAISjEACkPAbMRttEaheUFbWOV048+guCCFaS7WZ+UFmeQdFs-ZxzUpnOp1c5p90+nPPefwb5-zd0HkTHNjJ0oXz305EXdDbeekHSWvpIUY1C8l48Xy8pgsv8Vz-xgjyMjNW1GsTADAB+3Bn5sAuWo8Vp6m4OjEB-Z8vAe4RB1AQE9xtHIZOdVRncppngwBEBsCAGAoDeH2QVvazmNizZo2ODAanVoOhUFgcEhDaAAB8AB89LQWjo9fW90GSjXLukI8tdxKE0Ep3SSwJPDqWHqpdm1GZ6CwXrZYN2BlbuV3p1GZZzj2FK2Rti6R8PaitmAU-DpTKEbIlg045Ryi3nVzC4MVTLkrIeGmYHBsbxrUAbHh0tsL6Gjo9frGVneNcaI0+43T+HuRGdbYZkLpzMtZITc9I9w003Hm7fm4t5bq31sgXh2oHbAy9skAO6HI7OoTtna2dd27hL7vjq2Y5aA8B2DxoIFsx5KYeTNJyc1wohjZRRme6951H241faTYS9dv3-uZqB8enNCVQdOgLRDyX2doflpZwjpLuJnstFSI857zvaAAGpaBMREzw2gAAqCwBAjVu4ys94wqoM-InL9niYBe-sl7LxXm+j5BwzGHF2LCe45No97YUEjinbaVbbN368o48wE4956EQ4EwLOqHeYFPdjwKy4mGb+AAFUXRrgBioP-vt1B73SHwHtLw8g6ZeemPRbKo3rUDD4pSe1AS7nx6BTaaQsQAc-DsCacvAII0WUYC+YERqKqFAKW+eiAEAgQqoXyi+MA0u8+G+5ekBogzqC2JUiB4BGBIgWyeeTEHwiA2BkguBMAEBuGhBr+KBuIfmH+7oX+VmP+f+W2ABUWjaSB7ey8JOhK5g5yzAC2MeNuFBL2kakgYqXBz2nOOImeghTAwhrKohC+XuEhskGwTGRW96zGNuYBlBsh7+UYDBRO0BYEwKAAfrQBgBsEcr8kgcABsBMKqBoLGM8Fbp8voVsuPgeBITWAALp0HBRTaxYTDy7SiK60ArZrazCq5bbq50ZtJrgxSa4rK9iPRaGDQCbLZwCqh2E6iqF26XY3YR6SKm6ururm5Iqehr5qF77vYH4-bH7JrEpn4A7tHA4fRR4tZ35XpnSP7P6bZOZv5mYmGAaBikC0LwZmDZJ1gVDgRvZhEsCTEvC+4bp4oOgTSZbfLiGors71hDI6hzS267EGD7HRjdHg4AJmbzFMoO7PBUYrFbjbHmDiG2gbBp4BAaH55CRlIAYBBXDPAq627v4AmGophbEr5vGbIbDHGfFMBSGMHZLPDzRQmvYbA352KOqvFrJAInD7jUBMTmAADsxJYgwimCpA+860PIxgmCY68AGAiGOoXmeC+Cj0JU1cOCbJj0ViKo-yOQnAIKYgjgdIQJIKpA4EdgGwxAg0PI2YdgAAHLlJ0R6N4t7DyF+nKs+gwFEOEpgpII4FuhCTwC8acZIbCTgXUWcVPA4GTmfFsSaRAGaWZIilsdXrXmKpaeQRCVaeXunm6TgWiXtGKlPIaT6A6FYpwLunfJZCNEnieBsIUH4ChAWLaYhPuAZjOBgC4j8jWiGrQABEBpKAkKICCO7s9OQJINKKsKENqGPFWS-qgugj6pKZIB8eqhUPuDZgAJoyA2bbDvy6Av7zHtlsSyn7gKm-H5iinrRjyJjzTCaKkAYwCNmvBCjahtxpAGBNmdnSi3FJkEBcAOyWrdIsnxaIpdlJqSnSnjn4koRTkqkwSznMQykrobQYDLl1izk27zTWntm0CYlZ7Egyn3mByEkklknCLniaFUkOhbk14gQiQCg-kokOj-kYnoX+kBCgWDTngim1QwWKxwXCSaF5HwViKoV-nl7omAVYUmq164UOj4VrREWnCYkIXkXCQAaGj-rYhjF0AADCZy5ANgPATKvg0ySgbw4lBIqAzwcIDocISZbSfOrScyJQoIYAXa-hQAA&#34;&gt;code editor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deploy App on Github Pages&lt;/h2&gt; &#xA;&lt;p&gt;Before deploying the app to Github Pages, commit and push the changes (e.g., the rendered website). You can verify on the Github repository that you have the docs folder.&lt;/p&gt; &#xA;&lt;p&gt;Last but not least, we will set up the Github Pages website. On the repository main menu, go to settings (pink rectangle on the screenshot below), select the Pages option (blue rectangle), and select the branch you want to use and the folder website files are located. In this case, we will select the &lt;code&gt;docs&lt;/code&gt; folder (yellow rectangle). Once you complete those steps, you should get the link for the Github Pages website (brown rectangle). It might take a few minutes until the website is ready and accessible.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/shinylive-r/main/images/shinylive-github-pages.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 2 - Deploying the Shiny app on the Github Pages website &#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; That&#39;s it! The website is now ready! &#xA;&lt;p&gt;&lt;a href=&#34;https://ramikrispin.github.io/shinylive-r/&#34;&gt;https://ramikrispin.github.io/shinylive-r/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Joe Cheng&#39;s &lt;strong&gt;Running Shiny without a server&lt;/strong&gt; &lt;a href=&#34;https://jcheng5.github.io/posit-conf-2023-shinylive/#/title-slide&#34;&gt;presentation&lt;/a&gt; at the Posit Conf 2023&lt;/li&gt; &#xA; &lt;li&gt;Shinylive &lt;a href=&#34;https://github.com/posit-dev/r-shinylive&#34;&gt;R&lt;/a&gt; and &lt;a href=&#34;https://github.com/posit-dev/py-shinylive&#34;&gt;Python&lt;/a&gt; dev version packages&lt;/li&gt; &#xA; &lt;li&gt;Shinylive web &lt;a href=&#34;https://shinylive.io/r/editor/&#34;&gt;R&lt;/a&gt; and &lt;a href=&#34;https://shinylive.io/py/editor/&#34;&gt;Python&lt;/a&gt; code editor&lt;/li&gt; &#xA; &lt;li&gt;Shinylive examples &lt;a href=&#34;https://raw.githubusercontent.com/RamiKrispin/shinylive-r/main/shinylive.io/r/examples/&#34;&gt;R&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/RamiKrispin/shinylive-r/main/shinylive.io/py/examples/&#34;&gt;Python&lt;/a&gt; examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This tutorial is licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International&lt;/a&gt; License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RamiKrispin/vscode-r</title>
    <updated>2023-10-08T02:00:15Z</updated>
    <id>tag:github.com,2023-10-08:/RamiKrispin/vscode-r</id>
    <link href="https://github.com/RamiKrispin/vscode-r" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Setting R Development Environment with VScode, Dev Containers, and Docker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Setting R Development Environment with VScode and Docker&lt;/h1&gt; &#xA;&lt;p&gt;🚧WIP 🏗️, pre spell checking🛠️&lt;/p&gt; &#xA;&lt;p&gt;This repo provides a step-by-step guide and a template for setting up an R development environment with VScode and Docker 🐳. Docker is an amazing tool, but it has some learning curve. This tutorial aims to reduce the entry barrier for learning tools such as Docker.&lt;/p&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-python&#34;&gt;Setting Python Development with VScode and Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/deploy-flex-actions&#34;&gt;Deploy Flexdashboard on Github Pages with Github Actions and Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/Introduction-to-Docker&#34;&gt;Docker for Data Scientists 🐳&lt;/a&gt; (WIP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/vscode-shiny1024.gif&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA;&lt;/figure&gt; &#xA;&lt;h2&gt;Table of Content:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#scope&#34;&gt;Scope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#general-architecture-and-workflow&#34;&gt;General Architecture and Workflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#the-rocker-project&#34;&gt;The Rocker Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#getting-started-with-docker&#34;&gt;Getting Started with Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#running-r-on-docker---the-hard-way&#34;&gt;Running R on Docker - the Hard Way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RamiKrispin/vscode-r#setting-the-dev-containers-extension&#34;&gt;Setting the Dev Containers Extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Setting the R Environment&lt;/li&gt; &#xA; &lt;li&gt;Setting Plots window&lt;/li&gt; &#xA; &lt;li&gt;Setting Shiny&lt;/li&gt; &#xA; &lt;li&gt;Summary&lt;/li&gt; &#xA; &lt;li&gt;Resources&lt;/li&gt; &#xA; &lt;li&gt;License&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;This section focuses on the advantages of using Docker with VScode and explains the motivation for using R with VScode.&lt;/p&gt; &#xA;&lt;h3&gt;Why develop with Docker 🐳?&lt;/h3&gt; &#xA;&lt;p&gt;Docker is a CI/CD tool that enables seamless code deployment from development to production environments. By creating OS-level virtualization, it can package an application and its dependencies in a virtual container and ship it between different environments. The main advantages of using Docker within your development environment are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reproducibility -&lt;/strong&gt; Docker enables you to seamlessly package your code and its dependencies into a single container and execute, test, share, and deploy it with a high level of consistency&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Collaboration -&lt;/strong&gt; Docker solves the dependencies madness when a team of developers works together on a specific project. Having a unified environment saves a ton of time during the development step. For example, if one developer gets some error, it is easy for other developers to reproduce the error and help debug it&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deployment -&lt;/strong&gt; Docker simplifies the code shipment from the development environment to the production&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While Docker usually rhymes with DevOps and CI/CD, it is a great tool for data science and engineering applications, in particular, MLOps.&lt;/p&gt; &#xA;&lt;p&gt;One of the core foundations of data science is the ability to reproduce your work, regardless of the user or machine the job is running. This is where Docker is shining by solving the lack of consistency between environments that cause many of us pain and grief.&lt;/p&gt; &#xA;&lt;p&gt;In addition, Docker as a CI/CD tool plays a pivotal role in MLOps as it enables seamless deployment of data science and engineering applications such as data pipelines and automation, model deployment, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Why VScode 💻?&lt;/h3&gt; &#xA;&lt;p&gt;VScode (aka Visual Studio Code) is a general-purpose free code editor developed by Microsoft. It can be run locally on Windows, macOS, and Linux OSs or on a cloud environment. The main advantages of using VScode as your IDE are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-languages -&lt;/strong&gt; VScode supports out-of-the-box JavaScript, TypeScript, and Node.js, and has a variety of extensions that enable running other programming languages such as Python, C++, C#, Go, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensions -&lt;/strong&gt; VScode has a large community support that builds and maintains a variety of extensions that extend the editor&#39;s capabilities and functionality. That includes extensions that support programming languages (such as Python, R, and Julia), plugs-in that enables connection with external applications (Docker, Postgres, etc.), and other applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git integration -&lt;/strong&gt; VScode has built-in integration with Git&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker integration -&lt;/strong&gt; VScode supports natively Docker integration, which we will dive deep into in the coming sections&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main advantage of VScode is the native Docker integration, which enables the opening of a project in a containerized environment. In addition, in many senses, VScode is a DIY IDE that enables a high level of freedom of customization. On the other hand, the downside of VScode is that for most programming languages, VScode will not be an &#34;out-of-box&#34; IDE. It requires both knowledge and some level of effort to customize it to work with languages such as Python, R, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Why R with VScode?!?&lt;/h3&gt; &#xA;&lt;p&gt;After we discussed Docker and VScode, it is time to address the elephant in the room - why use R with VScode when you have such a great IDE for R - RStudio? The short answer is Docker.&lt;/p&gt; &#xA;&lt;p&gt;If Docker is not part of your workflow, you are more than welcome to continue reading this tutorial and learn how to run R with VScode, but RStudio would be the best IDE for you.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, if Docker is part of your workflow (or you wish to adopt it), it is worth, in my opinion, the effort of customizing VScode to run R. Besides running your code inside a dockerized environment, VScode has additional advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A variety of extensions and add-ons, such as tools for documentation (Draw.io, Markdown, Quarto, etc.), databases (Postgres, Snowflake, etc.), and other utility tools (JSON, YAML viewers, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple languages such as JS, HTML, Python, Bash, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Last but not least, to set expectations before starting, even with all the awesome extensions and customization we can use to set R, it won&#39;t feel as native as RStudio. It&#39;s just different.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While RStudio does not support Docker, you can run an RStudio Server inside a dockerized environment. This approach required some level of customization, but the use of this is under the AGPL-3 license.&lt;/p&gt; &#xA;&lt;h2&gt;Scope&lt;/h2&gt; &#xA;&lt;p&gt;This tutorial focuses on setting up a dockerized R development environment with VScode. We will explore how to integrate VScode with Docker using Microsoft&#39;s Dev Container extensions and show various methods for configuring an R environment with Docker. That includes the following settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set a template for a dockerized R environment&lt;/li&gt; &#xA; &lt;li&gt;Define environment variables&lt;/li&gt; &#xA; &lt;li&gt;Set a code editor and debugger&lt;/li&gt; &#xA; &lt;li&gt;Set support for Shiny, Quarto, htmlwidgets, plots, table viewer, etc.&lt;/li&gt; &#xA; &lt;li&gt;Enable to launch multiple R sessions in parallel&lt;/li&gt; &#xA; &lt;li&gt;Set code snippet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, it&#39;s important to note that while this tutorial covers some of the core Docker features, it is not a complete Docker guide. If you don&#39;t have previous experience with Docker, I highly recommend taking one of the Docker crash courses.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Generally, this tutorial does not require previous experience with Docker and VScode. In line with the tutorial scope above, the goal is to teach you how to set up an R development environment using Docker and VScode. That being said, as mentioned above, you will benefit more from and highly utilize this tutorial if you take some Docker intro courses before starting this tutorial. The main requirements for this tutorial are setting VScode and Docker Desktop. In addition, you will need to set up an account with Docker Hub.&lt;/p&gt; &#xA;&lt;h3&gt;Installing VScode&lt;/h3&gt; &#xA;&lt;p&gt;Installing VScode is straightforward - go to the VScode website &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;https://code.visualstudio.com/&lt;/a&gt; and click on the Download button (purple rectangle on the screenshot):&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/vscode-download.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 1 - Visual Studio Code download page&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;Download the installation file and follow the instructions.&lt;/p&gt; &#xA;&lt;p&gt;To set a dockerized environment in VScode we will need to install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Dev Containers&lt;/a&gt; extension, which enables to open a folder and execute a code inside a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;Here is how to install an extension on VScode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click the Extensions button on the left menu (mark with a purple arrow on the screenshot below)&lt;/li&gt; &#xA; &lt;li&gt;Type the extension name on the search menu (see the yellow rectangular). You can see the search results below, and clicking on each extension will open a window with the extension details.&lt;/li&gt; &#xA; &lt;li&gt;Last but not least, Click the install button (see the green rectangular) to install the extension&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/vscode-extensions.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 2 - Steps to install extension on VScode&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Dev Containers extension is required to launch the dockerized environment. We will see later in this tutorial how to set and install the necessary extensions for your dockerized environment automatically with the &lt;code&gt;devcontainer.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Setting Docker&lt;/h3&gt; &#xA;&lt;p&gt;Various ways exist to build and run Docker images on different operations systems. For the purpose of this guide, we will be utilizing Docker Desktop. It is a user-friendly container management interface that is compatible with MacOS, Windows, and Linux operating systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Docker Desktop is free for personal use but requires a license for commercial use. For further information, please refer to &lt;a href=&#34;https://www.docker.com/pricing/&#34;&gt;https://www.docker.com/pricing/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install Docker Desktop, go to Docker website and follow the installation instructions according to your OS:&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/docker-install.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 3 - Docker Desktop download page&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Docker Hub&lt;/h3&gt; &#xA;&lt;p&gt;Container Registry has a similar functionality as Github for code, and it uses to store and share images. There are many container registries, and the most common is Docker Hub. We will use throughout the tutorial Docker Hub to pull different images, such as R and Python images or OS base images such as Ubuntu. To register and create an account go to &lt;a href=&#34;https://hub.docker.com&#34;&gt;https://hub.docker.com&lt;/a&gt; and follow the registration instructions.&lt;/p&gt; &#xA;&lt;p&gt;After installing Docker Desktop and setting account on Docker Hub, open Docker Desktop, and from the command line, login to Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; docker login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will have to enter your username and password, and you should expect the following output if the login is successful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Login with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https://hub.docker.com to create one.&#xA;Username: rkrispin&#xA;Password:&#xA;Login Succeeded&#xA;&#xA;Logging in with your password grants your terminal complete access to your account.&#xA;For better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Docker Hub is completely public (for the free tier). Any image you push and store there will be available for all other users. Regardless if your container registry is public or not, &lt;strong&gt;NEVER&lt;/strong&gt; store credentials, passwords, or any other sensitive information on your Docker images.&lt;/p&gt; &#xA;&lt;h3&gt;Hello World!&lt;/h3&gt; &#xA;&lt;p&gt;There is no better way to test if Docker was installed properly than by running whalesay (or 🐳 say) Docker&#39;s most &lt;code&gt;Hello World!&lt;/code&gt; common example. The whalesay is an adaption of the Linux cowsay (🐮 say) game using a whale instead of a cow to print some text. Let&#39;s run the below code from the terminal to print &lt;code&gt;Hello R Users! 👋 😎&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run docker/whalesay cowsay Hello R Users! 👋 😎&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this is the first time you are using Docker or your first time using the &lt;code&gt;whalesay&lt;/code&gt; image you should expect the following message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Unable to find image &#39;docker/whalesay:latest&#39; locally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is a generic message that notifies that the requested image cannot be found locally, and Docker will try to pull the image from the hub (if specified) and follow by downloading the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;latest: Pulling from docker/whalesay&#xA;Image docker.io/docker/whalesay:latest uses outdated schema1 manifest format. Please upgrade to a schema2 image for better future compatibility. More information at https://docs.docker.com/registry/spec/deprecated-schema-v1/&#xA;e190868d63f8: Pull complete&#xA;909cd34c6fd7: Pull complete&#xA;0b9bfabab7c1: Pull complete&#xA;a3ed95caeb02: Pull complete&#xA;00bf65475aba: Pull complete&#xA;c57b6bcc83e3: Pull complete&#xA;8978f6879e2f: Pull complete&#xA;8eed3712d2cf: Pull complete&#xA;Digest: sha256:178598e51a26abbc958b8a2e48825c90bc22e641de3d31e18aaf55f3258ba93b&#xA;Status: Downloaded newer image for docker/whalesay:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And this is the expected output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;__________________________&#xA;&amp;lt; Hello R Users! 👋 😎 &amp;gt;&#xA; --------------------------&#xA;    \&#xA;     \&#xA;      \&#xA;                    ##        .&#xA;              ## ## ##       ==&#xA;           ## ## ## ##      ===&#xA;       /&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;&#34;___/ ===&#xA;  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~&#xA;       \______ o          __/&#xA;        \    \        __/&#xA;          \____\______/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are able to run the &lt;code&gt;whalesay&lt;/code&gt; app you are ready to get started with Docker.&lt;/p&gt; &#xA;&lt;h2&gt;General Architecture and Workflow&lt;/h2&gt; &#xA;&lt;p&gt;Before diving into the core functionality of Docker, let&#39;s review the generic development workflow architecture with Docker. Docker has similar functionality as Git and Github (or Gitlab, Bitbucket, etc.), enabling shifting your environment and settings (as opposed to code with Git) from one environment to another one (e.g., dev -&amp;gt; staging or dev -&amp;gt; prod) ensuring a high level of reproducibility. As a matter of fact those two (Docker and Git) go together side by side.&lt;/p&gt; &#xA;&lt;h3&gt;General architecture&lt;/h3&gt; &#xA;&lt;p&gt;The diagram below describes a high-level architecture of a Dockerized development environment with VScode. It might be overwhelming if you have never used Docker before, and it will make more sense (I hope) by the end of this section.&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/docker-architecture.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 4 - Development workflow with VScode and Docker&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;This process includes the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dev Container&lt;/strong&gt; - is the VScode extension that enables you to execute your local code inside a dockerized environment seamlessly. By default, it mounts your local folder to the docker environment ensuring your code runs inside the container and lives locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;devcontainer.json&lt;/strong&gt; - is the Dev Container configuration file that enables you to highly customize your VScode development environment when using the Dev Container extension. From settings the VScode options (e.g., fonts, list of extensions to install, etc.) to the Docker settings (similar to the docker-compose.yml file functionality)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; - is the image manifest or recipe. It provides instructions for the docker engine about which base image to use and what components to install. Typically, you start the build process by importing some base image using the &lt;code&gt;FROM&lt;/code&gt; command, which we will explain later in this tutorial. The Dev Container extension enables you to build the image on the fly when launching the environment using the Dockerfile or import a built-in image from some image registry such as Docker Hub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image registry&lt;/strong&gt; - has similar functionality as Github / Gitlab / Bitbucket, and it is used to store public images (or private on some enterprise versions). The image registry lets you shift and distribute your images from one environment to another. In this tutorial, we will use the main image registry - Docker Hub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code registry&lt;/strong&gt; - beyond version control, it enables you to shift your code from one environment to another. In this tutorial, we will use Github as our code registry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Regardless if you are using a private or public image registry, as a good practice, you should &lt;strong&gt;NEVER&lt;/strong&gt; store passwords, credentials, or any sensitive information on your images. Rather, add environment variables or load information from a mounted volume during the image run time.&lt;/p&gt; &#xA;&lt;h3&gt;Development workflow&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s now organize and order this process to a general workflow. The below diagram defines a general order of operation for the development process applying the following steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt; - setting the prerequisites, including installing VScode and the required extensions (e.g., Dev Container, etc.), installing Docker, and setting a Docker Hub account (or equivalent)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Set the Dockerfile&lt;/strong&gt; - this step is optional, if you wish to build your image on the fly. Alternatively, you can import a built-in image from an image registry and skip this step. In the next section, we will dive into more details about the core functionality of the Dockerfile and how to set it&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Set the devcontainer.json file&lt;/strong&gt; - this file defines the environment and enables you to customize both the VScode functionality and VScode settings. Later in this tutorial, we will see how to set this file&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Development&lt;/strong&gt; - once the &lt;code&gt;devcontainer.json&lt;/code&gt; file is set, you can launch your dockerized development environment using the Dev Container extension on your local folder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt; - this is a recommended intermediate step before shipping your code and environment to deployment. There are multiple approaches to code and environment testing, and the main goal is to ensure that your code sync with the dockerized environment and identify potential problems before deploying it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deployment&lt;/strong&gt; - last but not least, using code and container registry (e.g., Github and Docker Hub), we can deploy our code using the same dockerized environment to some remote server (e.g., Github Actions, AWS, GCP, Azure, etc.) or have your peers run your code in their computer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/docker-workflow.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 5 - Development with VScode and Docker workflow&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;The Rocker Project&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://rocker-project.org/&#34;&gt;Rocker project&lt;/a&gt; is the main hub for built-in R images. The project was created by Carl Boettiger and Dirk Eddelbuettel, and is now maintained by Carl, Dirk, Noam Ross, and SHIMA Tatsuya. The project provides a variety of R images, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/_/r-base&#34;&gt;Base R&lt;/a&gt; - a basic image with R installed. There is a corresponding image to most of the recent R versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/rocker/rstudio/tags&#34;&gt;RStudio Server&lt;/a&gt; - a built-in image with RStudio server installed&lt;/li&gt; &#xA; &lt;li&gt;Different R package settings - built-in images with different ecosystems installed, such as the &lt;a href=&#34;https://hub.docker.com/r/rocker/tidyverse&#34;&gt;tidyverse&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/rocker/verse&#34;&gt;verse&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/rocker/geospatial&#34;&gt;geospatial&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/rocker/shiny&#34;&gt;Shiny&lt;/a&gt;, &lt;a href=&#34;https://hub.docker.com/r/rocker/shiny-verse/tags&#34;&gt;Shiny with tidyverse&lt;/a&gt;, etc. &lt;a href=&#34;https://hub.docker.com/r/rocker/shiny-verse/tags&#34;&gt;https://hub.docker.com/r/rocker/shiny-verse/tags&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main advantages of using images from the Rocker project as base images are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Robust and tested&lt;/li&gt; &#xA; &lt;li&gt;Community support&lt;/li&gt; &#xA; &lt;li&gt;Comes with R&#39;s core dependencies (Debian packages, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As mentioned above, you can run RStudio inside a container using a containerized RStudio Server. The Rocker project provides a built-in and ready to use images with RStduio Server. While it is not in the scope of this tutorial, it is a good alternative for VScode with the following limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is under an AGPL-3 license and therefore, cannot be used for enterprise&lt;/li&gt; &#xA; &lt;li&gt;Required some additional modifications and settings (e.g., mount local folders, git, etc.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In this tutorial we will leverage some images from the Rocker project (base R, etc.) as our baseline images.&lt;/p&gt; &#xA;&lt;p&gt;In the next section, we review Docker basic commands and learn how to set a Dockerfile.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with Docker&lt;/h2&gt; &#xA;&lt;p&gt;Generally, the VScode &lt;strong&gt;Dev Container&lt;/strong&gt; extension lets you containerize your environment by importing a built-in image. However, often, you may want to add more layers (e.g., install additional dependencies) or build it yourself. This section focuses on the essential Docker requirements that will enable you to build your image and run it inside a container:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; - the image recipe, allows you to add components and customize the dependencies according to the development environment requirements&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker CLI&lt;/strong&gt; - core commands to build the image and run it as a containerized environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;images/dockerfile to container.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 6 - Docker general workflow&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is important to emphasize that this section covers the basic Docker requirements for this tutorial and is not an alternative to a full Docker tutorial or course.&lt;/p&gt; &#xA;&lt;h3&gt;The Dockerfile&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; provides a set of instructions for the Docker engine about how to build the image. You can think about it as the image&#39;s recipe. It has its own unique and intuitive syntax using the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;COMMAND some instructions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, the following &lt;code&gt;Dockerfile&lt;/code&gt; imports a built-in image with base R (version 4.3.1) from the &lt;a href=&#34;https://hub.docker.com/r/rocker/r-base&#34;&gt;Rocker project&lt;/a&gt; and then using the &lt;code&gt;apt-get update&lt;/code&gt; and &lt;code&gt;apt-get install&lt;/code&gt; to install the &lt;code&gt;curl&lt;/code&gt; library :&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./examples/ex-1/Dockerfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM r-base:4.3.1&#xA;&#xA;LABEL example=1&#xA;&#xA;ENV R_VER=4.3.1&#xA;&#xA;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends curl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a nutshell, we used the &lt;code&gt;FROM&lt;/code&gt; command to specify the image we want to import from the Docker registry (don&#39;t forget to login to the Docker registry service you are using before building the image!). The &lt;code&gt;LABEL&lt;/code&gt; command is used to set labels or comments, and the &lt;code&gt;ENV&lt;/code&gt; command is to set environment variables. Last but not least, the &lt;code&gt;RUN&lt;/code&gt; command is used to run a command on the command line, in this case, to install the &lt;code&gt;curl&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s now review the Dockerfile core commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FROM&lt;/code&gt; - Defines the base image to use for the image&#39;s build. In most cases, unless you are building the image from scratch, you will use some base image with some pre-installed OS and some dependencies. For example, in this tutorial, we will import as our base image the official &lt;a href=&#34;&#34;&gt;Ubuntu image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LABEL&lt;/code&gt; - Enables to add information about the image to the image&#39;s metadata, such as authors, maintainers, license, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ENV&lt;/code&gt; - Uses to set environment variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ARG&lt;/code&gt; - Enables to set parameters during the build time&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RUN&lt;/code&gt; - Allows executing CLI commands (e.g., &lt;code&gt;pip install ...&lt;/code&gt;, &lt;code&gt;apt-get ...&lt;/code&gt;, &lt;code&gt;apt-install...&lt;/code&gt;, &lt;code&gt;wget...&lt;/code&gt;, etc.) during the build time to add additional components to the base image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;COPY&lt;/code&gt; - Enables to copy objects (e.g., files and folders) from your local system to the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WORKDIR&lt;/code&gt; - Sets the working directory inside the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXPOSE&lt;/code&gt; - Defines the port number to expose the image during the run time&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CMD&lt;/code&gt; - Sets a default command to execute during the run time of the image&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ENDPOINT&lt;/code&gt; - Allows configuring a container that will run as an executable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Build&lt;/h3&gt; &#xA;&lt;p&gt;Once the &lt;code&gt;Dockerfile&lt;/code&gt; is ready, the next step is to build the image using the &lt;code&gt;docker build&lt;/code&gt; command from the command line. For example, let&#39;s build the above &lt;code&gt;Dockerfile&lt;/code&gt; using the &lt;code&gt;build&lt;/code&gt; command from this repo root folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build . -f ./examples/ex-1/Dockerfile -t rkrispin/vscode-r:ex1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are the arguments we used with the &lt;code&gt;build&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;-f&lt;/code&gt; tag defines the &lt;code&gt;Dockerfile&lt;/code&gt; path. This argument is optional and should be used if you are calling the &lt;code&gt;build&lt;/code&gt; function from a different folder than one of the &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;.&lt;/code&gt; symbol defines the context folder of the files system as the one of the &lt;code&gt;Dockerfile&lt;/code&gt;. Although we did not use the file system in this case, this enables us in other cases to call and copy files from our local folder to the image during the build time&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;-t&lt;/code&gt; is used to set the image&#39;s name and tag (e.g., version). In this case, the image name is &lt;code&gt;rkrispin/vscode-r&lt;/code&gt; and the tag is &lt;code&gt;ex1&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You should expect the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[+] Building 91.2s (6/6) FINISHED                                                                                                                                                          &#xA; =&amp;gt; [internal] load build definition from Dockerfile                                                                                                                                  0.1s&#xA; =&amp;gt; =&amp;gt; transferring dockerfile: 197B                                                                                                                                                  0.0s&#xA; =&amp;gt; [internal] load .dockerignore                                                                                                                                                     0.2s&#xA; =&amp;gt; =&amp;gt; transferring context: 2B                                                                                                                                                       0.0s&#xA; =&amp;gt; [internal] load metadata for docker.io/library/r-base:4.3.1                                                                                                                       1.5s&#xA; =&amp;gt; [1/2] FROM docker.io/library/r-base:4.3.1@sha256:fc60b05cb7cdd028290531cfedc86ca4abc2e6549c6b94a72ac375f0ed80f57d                                                                81.4s&#xA; =&amp;gt; =&amp;gt; resolve docker.io/library/r-base:4.3.1@sha256:fc60b05cb7cdd028290531cfedc86ca4abc2e6549c6b94a72ac375f0ed80f57d                                                                 0.1s&#xA; =&amp;gt; =&amp;gt; sha256:fc60b05cb7cdd028290531cfedc86ca4abc2e6549c6b94a72ac375f0ed80f57d 979B / 979B                                                                                            0.0s&#xA; =&amp;gt; =&amp;gt; sha256:595a7cb5564e9f57ad854e5cf01226e09c5a24e9f6ba5161959c830a4890c5ad 1.58kB / 1.58kB                                                                                        0.0s&#xA; =&amp;gt; =&amp;gt; sha256:ad8ea1d6d7b698747b90d75600aabd31d4c4a4738cfd5e5787ac6fa4823f1fd7 5.59kB / 5.59kB                                                                                        0.0s&#xA; =&amp;gt; =&amp;gt; sha256:c80309e0a5bbe8e3c8000103b383c6a60c58a6a84681e6aa5963d565eebe59a6 49.40MB / 49.40MB                                                                                     18.2s&#xA; =&amp;gt; =&amp;gt; sha256:e6cbeb6beab250969d7a012bc457340f9616f734a70d5b3528c9ea0836cff737 3.36kB / 3.36kB                                                                                        0.4s&#xA; =&amp;gt; =&amp;gt; sha256:9f7d63b8619e463d865c0fe84818c1100294ce19cc17e3a9c6c1afc141a949ba 25.33MB / 25.33MB                                                                                     16.2s&#xA; =&amp;gt; =&amp;gt; sha256:06d49c39ba288dc715fe7c732b83772de2a8362469d2de2984182ff219a2bbdd 866.32kB / 866.32kB                                                                                    2.3s&#xA; =&amp;gt; =&amp;gt; sha256:7cba2360fd37c6a0a4e49af374129c5d2c04fa6dc57617dd4ff8d379a001e37d 348B / 348B                                                                                            2.6s&#xA; =&amp;gt; =&amp;gt; sha256:5b9c9354c3386447ea1123b43a83ec67cfc7dde48b7ba1300f678a4172e800f2 249.74MB / 249.74MB                                                                                   78.1s&#xA; =&amp;gt; =&amp;gt; extracting sha256:c80309e0a5bbe8e3c8000103b383c6a60c58a6a84681e6aa5963d565eebe59a6                                                                                             0.6s&#xA; =&amp;gt; =&amp;gt; extracting sha256:e6cbeb6beab250969d7a012bc457340f9616f734a70d5b3528c9ea0836cff737                                                                                             0.0s&#xA; =&amp;gt; =&amp;gt; extracting sha256:9f7d63b8619e463d865c0fe84818c1100294ce19cc17e3a9c6c1afc141a949ba                                                                                             0.2s&#xA; =&amp;gt; =&amp;gt; extracting sha256:06d49c39ba288dc715fe7c732b83772de2a8362469d2de2984182ff219a2bbdd                                                                                             0.0s&#xA; =&amp;gt; =&amp;gt; extracting sha256:7cba2360fd37c6a0a4e49af374129c5d2c04fa6dc57617dd4ff8d379a001e37d                                                                                             0.0s&#xA; =&amp;gt; =&amp;gt; extracting sha256:5b9c9354c3386447ea1123b43a83ec67cfc7dde48b7ba1300f678a4172e800f2                                                                                             2.2s&#xA; =&amp;gt; [2/2] RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends curl                                                                                                       7.7s&#xA; =&amp;gt; exporting to image                                                                                                                                                                0.2s&#xA; =&amp;gt; =&amp;gt; exporting layers                                                                                                                                                               0.2s&#xA; =&amp;gt; =&amp;gt; writing image sha256:76b24862f6caf9e0d6009b1abf7baa1485105637b01ed5e7de9c98766431ddc3                                                                                          0.0s &#xA; =&amp;gt; =&amp;gt; naming to docker.io/rkrispin/vscode-r:ex1                               &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above output of the build describes the different layers of the image. Don&#39;t worry if, at this point, it looks and sounds like gibberish. Reading this output type will be easier after reading the next section, which focuses on the image layers.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;docker images&lt;/code&gt; command to validate that the image was created successfully:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;docker images&#xA;REPOSITORY                                                                      TAG            IMAGE ID       CREATED              SIZE&#xA;rkrispin/vscode-r                                                               ex1            76b24862f6ca   About a minute ago   834MB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next section will focus on the image layers and caching process.&lt;/p&gt; &#xA;&lt;h3&gt;The image layers&lt;/h3&gt; &#xA;&lt;p&gt;Docker builds images using a layers approach. Depending on the context, the docker engine takes each of the &lt;code&gt;Dockerfile&lt;/code&gt; commands during the build time and translates it into layer or metadata. &lt;code&gt;Dockerfile&lt;/code&gt; commands, such as &lt;code&gt;FROM&lt;/code&gt; and &lt;code&gt;RUN&lt;/code&gt;, create layers, and commands, such as &lt;code&gt;LABEL&lt;/code&gt;, &lt;code&gt;ARG&lt;/code&gt;, &lt;code&gt;ENV&lt;/code&gt;, and &lt;code&gt;CMD&lt;/code&gt;, create metadata. For example, we can observe in the output of the build of &lt;code&gt;rkrispin/vscode-r:ex1&lt;/code&gt; image above that there are two layers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first layer started with &lt;code&gt;[1/2] FROM...&lt;/code&gt;, corresponding to the &lt;code&gt;FROM r-base:4.3.1&lt;/code&gt; line on the &lt;code&gt;Dockerfile&lt;/code&gt;, which import the base-R image from the Rocker project&lt;/li&gt; &#xA; &lt;li&gt;The second layer started with &lt;code&gt;[2/2] RUN apt-get...&lt;/code&gt;, corresponding to the &lt;code&gt;RUN&lt;/code&gt; command on the &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/docker-layers.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 7 - Example of a build output with respect to the Dockerfile&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;The &lt;code&gt;docker inspect&lt;/code&gt; command returns the image metadata details in a JSON format. That includes the envrioment variables, labels, layers and general metadata. In the following example, we will us &lt;a href=&#34;https://jqlang.github.io/jq/&#34;&gt;jq&lt;/a&gt; to extract the layers information from the metadata JSON file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker inspect rkrispin/vscode-r:ex1 | jq &#39;.[] | .&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will return the below &lt;code&gt;JSON&lt;/code&gt; output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Id&#34;: &#34;sha256:76b24862f6caf9e0d6009b1abf7baa1485105637b01ed5e7de9c98766431ddc3&#34;,&#xA;  &#34;RepoTags&#34;: [&#xA;    &#34;rkrispin/vscode-r:ex1&#34;&#xA;  ],&#xA;  &#34;RepoDigests&#34;: [],&#xA;  &#34;Parent&#34;: &#34;&#34;,&#xA;  &#34;Comment&#34;: &#34;buildkit.dockerfile.v0&#34;,&#xA;  &#34;Created&#34;: &#34;2023-09-30T05:21:38.987459558Z&#34;,&#xA;  &#34;Container&#34;: &#34;&#34;,&#xA;  &#34;ContainerConfig&#34;: {&#xA;    &#34;Hostname&#34;: &#34;&#34;,&#xA;    &#34;Domainname&#34;: &#34;&#34;,&#xA;    &#34;User&#34;: &#34;&#34;,&#xA;    &#34;AttachStdin&#34;: false,&#xA;    &#34;AttachStdout&#34;: false,&#xA;    &#34;AttachStderr&#34;: false,&#xA;    &#34;Tty&#34;: false,&#xA;    &#34;OpenStdin&#34;: false,&#xA;    &#34;StdinOnce&#34;: false,&#xA;    &#34;Env&#34;: null,&#xA;    &#34;Cmd&#34;: null,&#xA;    &#34;Image&#34;: &#34;&#34;,&#xA;    &#34;Volumes&#34;: null,&#xA;    &#34;WorkingDir&#34;: &#34;&#34;,&#xA;    &#34;Entrypoint&#34;: null,&#xA;    &#34;OnBuild&#34;: null,&#xA;    &#34;Labels&#34;: null&#xA;  },&#xA;  &#34;DockerVersion&#34;: &#34;&#34;,&#xA;  &#34;Author&#34;: &#34;&#34;,&#xA;  &#34;Config&#34;: {&#xA;    &#34;Hostname&#34;: &#34;&#34;,&#xA;    &#34;Domainname&#34;: &#34;&#34;,&#xA;    &#34;User&#34;: &#34;&#34;,&#xA;    &#34;AttachStdin&#34;: false,&#xA;    &#34;AttachStdout&#34;: false,&#xA;    &#34;AttachStderr&#34;: false,&#xA;    &#34;Tty&#34;: false,&#xA;    &#34;OpenStdin&#34;: false,&#xA;    &#34;StdinOnce&#34;: false,&#xA;    &#34;Env&#34;: [&#xA;      &#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#34;,&#xA;      &#34;LC_ALL=en_US.UTF-8&#34;,&#xA;      &#34;LANG=en_US.UTF-8&#34;,&#xA;      &#34;R_BASE_VERSION=4.3.1&#34;,&#xA;      &#34;R_VER=4.3.1&#34;&#xA;    ],&#xA;    &#34;Cmd&#34;: [&#xA;      &#34;R&#34;&#xA;    ],&#xA;    &#34;Image&#34;: &#34;&#34;,&#xA;    &#34;Volumes&#34;: null,&#xA;    &#34;WorkingDir&#34;: &#34;&#34;,&#xA;    &#34;Entrypoint&#34;: null,&#xA;    &#34;OnBuild&#34;: null,&#xA;    &#34;Labels&#34;: {&#xA;      &#34;example&#34;: &#34;1&#34;,&#xA;      &#34;org.opencontainers.image.authors&#34;: &#34;Dirk Eddelbuettel &amp;lt;edd@debian.org&amp;gt;&#34;,&#xA;      &#34;org.opencontainers.image.licenses&#34;: &#34;GPL-2.0-or-later&#34;,&#xA;      &#34;org.opencontainers.image.source&#34;: &#34;https://github.com/rocker-org/rocker&#34;,&#xA;      &#34;org.opencontainers.image.vendor&#34;: &#34;Rocker Project&#34;&#xA;    }&#xA;  },&#xA;  &#34;Architecture&#34;: &#34;arm64&#34;,&#xA;  &#34;Variant&#34;: &#34;v8&#34;,&#xA;  &#34;Os&#34;: &#34;linux&#34;,&#xA;  &#34;Size&#34;: 833810317,&#xA;  &#34;VirtualSize&#34;: 833810317,&#xA;  &#34;GraphDriver&#34;: {&#xA;    &#34;Data&#34;: {&#xA;      &#34;LowerDir&#34;: &#34;/var/lib/docker/overlay2/98d0f9c020f2e472a5c77e7f9daeae68192e110647baa2a3b9fbd8fa66b163df/diff:/var/lib/docker/overlay2/109b7e7f1c7d1fa5d29c80823851e1c1cddcf53e5e837f346b17a7e20062eeac/diff:/var/lib/docker/overlay2/0756065361b7c670e0da7a50827e40c57b1eba208bd5f774a0379ee1a37f3656/diff:/var/lib/docker/overlay2/3b4c0139eae5c07dd126ec43d30d5d3a0d9dfe11861f7aa110d0cd7e1845a6cc/diff:/var/lib/docker/overlay2/af229f0c2d269960e7b8c0febc9c48cd467ef7107b2030103e81e17f9ab29192/diff:/var/lib/docker/overlay2/9e478497eba72b5835fb40c40aa51f70d11e955087f14d10b20ab8edd4646724/diff&#34;,&#xA;      &#34;MergedDir&#34;: &#34;/var/lib/docker/overlay2/hxvdo7qfj9alf4i9f0s8bbssk/merged&#34;,&#xA;      &#34;UpperDir&#34;: &#34;/var/lib/docker/overlay2/hxvdo7qfj9alf4i9f0s8bbssk/diff&#34;,&#xA;      &#34;WorkDir&#34;: &#34;/var/lib/docker/overlay2/hxvdo7qfj9alf4i9f0s8bbssk/work&#34;&#xA;    },&#xA;    &#34;Name&#34;: &#34;overlay2&#34;&#xA;  },&#xA;  &#34;RootFS&#34;: {&#xA;    &#34;Type&#34;: &#34;layers&#34;,&#xA;    &#34;Layers&#34;: [&#xA;      &#34;sha256:9f305994d6fe3db46de3369d20848de757d10d93e8cdd5b4fa6d0755535f8d1e&#34;,&#xA;      &#34;sha256:f5fc7a4bd73d0f411e38d84e80728d8ef635bf3ee280740a2fce73b7b145e810&#34;,&#xA;      &#34;sha256:22ffbf9407bad90dd11e8df42e062f174f176bede0100fadceaf983ecf6085d9&#34;,&#xA;      &#34;sha256:5d461cbee76e31c6f9db3d3e56591b4a620a3e36b5ea3d5389808ce99b491b18&#34;,&#xA;      &#34;sha256:500a8606fbf961ba3942c49bd7075fef4ae6e15831ddccf3272f02dc134b7d65&#34;,&#xA;      &#34;sha256:360c54c41c8019ab1dbf51a4759f0b5ce65a8bfbc24daf180711ca2ef3219c35&#34;,&#xA;      &#34;sha256:352b2e503f1d22ffa1c0e7885dec9d66cc21a7701fdbb95d2c6d9b3bdc411886&#34;&#xA;    ]&#xA;  },&#xA;  &#34;Metadata&#34;: {&#xA;    &#34;LastTagTime&#34;: &#34;0001-01-01T00:00:00Z&#34;&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see from the image&#39;s layers output above, the &lt;code&gt;rkrispin/vscode-r:ex1&lt;/code&gt; image has seven layers. Each layer is represented by its hash key (e.g., &lt;code&gt;sha256:...&lt;/code&gt;), and it is cached on the backend. While we saw on the build output that the docker engine triggered two processes from the &lt;code&gt;FROM&lt;/code&gt; and &lt;code&gt;RUN&lt;/code&gt; commands, we ended up with nine layers. The main reason for that is related to the fact that when importing the baseline image, we inherited the imported image characteristics, including the layers. In this case, we used the &lt;code&gt;FROM&lt;/code&gt; to import the official &lt;code&gt;r-base&lt;/code&gt; image, which included six layers, and then added the 9th layer by executing the &lt;code&gt;RUN&lt;/code&gt; commands. You can test it by pulling the baseline image and using the inspect command to review its layers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; docker pull r-base:4.3.1&#xA;&#xA;&amp;gt; docker inspect r-base:4.3.1 | jq &#39;.[] | .RootFS&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will returns a &lt;code&gt;JSON&lt;/code&gt; list with the base image layers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;Type&#34;: &#34;layers&#34;,&#xA;  &#34;Layers&#34;: [&#xA;    &#34;sha256:9f305994d6fe3db46de3369d20848de757d10d93e8cdd5b4fa6d0755535f8d1e&#34;,&#xA;    &#34;sha256:f5fc7a4bd73d0f411e38d84e80728d8ef635bf3ee280740a2fce73b7b145e810&#34;,&#xA;    &#34;sha256:22ffbf9407bad90dd11e8df42e062f174f176bede0100fadceaf983ecf6085d9&#34;,&#xA;    &#34;sha256:5d461cbee76e31c6f9db3d3e56591b4a620a3e36b5ea3d5389808ce99b491b18&#34;,&#xA;    &#34;sha256:500a8606fbf961ba3942c49bd7075fef4ae6e15831ddccf3272f02dc134b7d65&#34;,&#xA;    &#34;sha256:360c54c41c8019ab1dbf51a4759f0b5ce65a8bfbc24daf180711ca2ef3219c35&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Layers caching&lt;/h3&gt; &#xA;&lt;p&gt;One of the disadvantages of Docker is the image build time. As the level of complexity of the Dockerfile is higher (e.g., a large number of dependencies), the longer the build time. Sometimes, your build fails or won&#39;t work as expected during the first run. Either some requirements are missing, or something breaks during the build time. This is where the use of caching helps in reducing the image rebuild time. Docker has smart mechanization that identifies if each layer should be built from scratch or can leverage a cached layer and save time. For example, let&#39;s add to the previous example another command to install the &lt;code&gt;vim&lt;/code&gt; editor:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./examples/ex-2/Dockerfile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM r-base:4.3.1&#xA;&#xA;LABEL example=1&#xA;&#xA;ENV R_VER=4.3.1&#xA;&#xA;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends curl&#xA;&#xA;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We will use the below command to build this image and tag it as &lt;code&gt;rkrispin/vscode-r:ex2&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; docker build . -f ./examples/ex-2/Dockerfile -t rkrispin/vscode-r:ex2&#xA;[+] Building 7.6s (7/7) FINISHED                                                                                                                                                           &#xA; =&amp;gt; [internal] load build definition from Dockerfile                                                                                                                                  0.1s&#xA; =&amp;gt; =&amp;gt; transferring dockerfile: 268B                                                                                                                                                  0.0s&#xA; =&amp;gt; [internal] load .dockerignore                                                                                                                                                     0.1s&#xA; =&amp;gt; =&amp;gt; transferring context: 2B                                                                                                                                                       0.0s&#xA; =&amp;gt; [internal] load metadata for docker.io/library/r-base:4.3.1                                                                                                                       0.0s&#xA; =&amp;gt; [1/3] FROM docker.io/library/r-base:4.3.1                                                                                                                                         0.0s&#xA; =&amp;gt; CACHED [2/3] RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends curl                                                                                                0.0s&#xA; =&amp;gt; [3/3] RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends vim                                                                                                        7.1s&#xA; =&amp;gt; exporting to image                                                                                                                                                                0.3s&#xA; =&amp;gt; =&amp;gt; exporting layers                                                                                                                                                               0.2s&#xA; =&amp;gt; =&amp;gt; writing image sha256:1a3de47798375e8ca177746d7689ac8516e62a0ffb8dd1dcd3ebe6e239c75e20                                                                                          0.0s &#xA; =&amp;gt; =&amp;gt; naming to docker.io/rkrispin/vscode-r:ex2 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As can be noticed from the above build output, the first and second layers already exist from the previous build. Therefore, the docker engine adds their cached layers to the image (as opposed to building them from scratch), and just builds the 3rd layer and installs the vim editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By default, the build output is concise and short. You can get more detailed output during the build time by adding the &lt;code&gt;progress&lt;/code&gt; argument and setting it to &lt;code&gt;plain&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; docker build . -f ./examples/ex-2/Dockerfile -t rkrispin/vscode-r:ex2 --progress=plain&#xA;#1 [internal] load build definition from Dockerfile&#xA;#1 transferring dockerfile: 69B done&#xA;#1 DONE 0.1s&#xA;&#xA;#2 [internal] load .dockerignore&#xA;#2 transferring context: 2B done&#xA;#2 DONE 0.1s&#xA;&#xA;#3 [internal] load metadata for docker.io/library/r-base:4.3.1&#xA;#3 DONE 0.0s&#xA;&#xA;#4 [1/3] FROM docker.io/library/r-base:4.3.1&#xA;#4 DONE 0.0s&#xA;&#xA;#5 [2/3] RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends curl&#xA;#5 CACHED&#xA;&#xA;#6 [3/3] RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends vim&#xA;#6 CACHED&#xA;&#xA;#7 exporting to image&#xA;#7 exporting layers done&#xA;#7 writing image sha256:1a3de47798375e8ca177746d7689ac8516e62a0ffb8dd1dcd3ebe6e239c75e20&#xA;#7 writing image sha256:1a3de47798375e8ca177746d7689ac8516e62a0ffb8dd1dcd3ebe6e239c75e20 0.0s done&#xA;#7 naming to docker.io/rkrispin/vscode-r:ex2 done&#xA;#7 DONE 0.1s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since we already cached the 3rd layer on the previous build, all the layers in the above output are cached, and the run time is less than 1 second.&lt;/p&gt; &#xA;&lt;p&gt;When setting your Dockerfile, you should be minded and strategic to the layers caching process. The order of the layers does matter! The following images demonstrate when the docker engine will use cached layers and when to rebuild them. The first image illustrates the initial build:&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;images/docker layers 1.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 8 - Illustration of initial build of image. The left side represents the Dockerfile&#39;s commands and the right one the coorisponding layers&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;In this case, we have a Dockerfile with four commands that are translated during the build time into four layers. What will happen if we add a fifth command and place it right after the third one? The docker engine will identify that the first and second commands in the Dockerfile did not change and, therefore, will use the corresponding cached layers (one and two), and rebuild the rest of the layers from scratch:&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;images/docker layers 2.png&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 9 - Illustration of the caching process during the rebuild of an image&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;When planning your Dockerfile, if applicable, a good practice is to place the commands that will most likely stay the same and keep new updates to the end of the file if possible.&lt;/p&gt; &#xA;&lt;p&gt;That was just the tip of the iceberg, and there is much more to learn about Docker. The next section will explore different methods to run R inside a container.&lt;/p&gt; &#xA;&lt;h2&gt;Running R on Docker - the hard way&lt;/h2&gt; &#xA;&lt;p&gt;In the previous sections, we saw how to define the image requirements with the &lt;code&gt;Dockerfile&lt;/code&gt; and build it with the &lt;code&gt;build&lt;/code&gt; command. This section focuses on running Python inside a container using the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Docker run&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;docker run&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; command enables us to create and run a new container from an image. Typically, the &lt;code&gt;run&lt;/code&gt; command is used to launch a dockerized application or server or to execute a code following the below syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run [OPTIONS] IMAGE [COMMAND] [ARG...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, we can use the &lt;code&gt;run&lt;/code&gt; command with the base R image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt;docker run r-base:4.3.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return the following error message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Fatal error: you must specify &#39;--save&#39;, &#39;--no-save&#39; or &#39;--vanilla&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What just happened over here? To understand better, we should go back to the image metadata, and review the &lt;code&gt;CMD&lt;/code&gt; command of the image. As you remamber, the &lt;code&gt;CMD&lt;/code&gt; command sets a default command to execute during the run time of the image. We will run again the &lt;code&gt;inspect&lt;/code&gt; command and use &lt;code&gt;jq&lt;/code&gt; to extract the &lt;code&gt;CMD&lt;/code&gt; settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; docker inspect r-base:4.3.1  | jq &#39;.[] | .Config.Cmd&#39;   &#xA;[&#xA;  &#34;R&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means that during runtime, the R command is executed on the command line, launching R. However, the session will exit unless exposed in a server and the port is opened. If you are familiar with R, when quitting a session, it popups the following questions regarding the session:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; q()&#xA;Save workspace image? [y/n/c]: &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since the image &lt;code&gt;CMD&lt;/code&gt; argument does not define how to handle the end of session (e.g., &lt;code&gt;R --vanilla&lt;/code&gt;), when &lt;code&gt;docker run&lt;/code&gt; exiting the session it trigger the above error.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, we can use the interactive and tty arguments to keep the session persist during the run time.Let&#39;s now add the &lt;code&gt;--interactive&lt;/code&gt; and &lt;code&gt;--tty&lt;/code&gt; options to run the container in an interactive mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; docker run --interactive --tty r-base:4.3.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This launches R on the image. We can then test it by using the &lt;code&gt;print&lt;/code&gt; command to print &lt;code&gt;Hello World!&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;R version 4.3.1 (2023-06-16) -- &#34;Beagle Scouts&#34;&#xA;Copyright (C) 2023 The R Foundation for Statistical Computing&#xA;Platform: aarch64-unknown-linux-gnu (64-bit)&#xA;&#xA;R is free software and comes with ABSOLUTELY NO WARRANTY.&#xA;You are welcome to redistribute it under certain conditions.&#xA;Type &#39;license()&#39; or &#39;licence()&#39; for distribution details.&#xA;&#xA;  Natural language support but running in an English locale&#xA;&#xA;R is a collaborative project with many contributors.&#xA;Type &#39;contributors()&#39; for more information and&#xA;&#39;citation()&#39; on how to cite R or R packages in publications.&#xA;&#xA;Type &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or&#xA;&#39;help.start()&#39; for an HTML browser interface to help.&#xA;Type &#39;q()&#39; to quit R.&#xA;&#xA;&amp;gt; print(&#34;Hello World&#34;)&#xA;[1] &#34;Hello World&#34;&#xA;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In summary, the docker run command creates and runs a new container from an image. It enables running code and applications, or launching a server inside a container. The output is depenend on the Dockerfile settings. As we saw in the above example, you open and run R inside a containerized environment using an interactive mode.&lt;/p&gt; &#xA;&lt;p&gt;OK, we have R running inside a dockerized environment, so why should we not use it? Mainly due to the following reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is not a development environment, and it is harder (in my mind) to maintain and develop code from the terminal with respect to R IDEs such as RStudio or VScode.&lt;/li&gt; &#xA; &lt;li&gt;By default, the &lt;code&gt;docker run&lt;/code&gt; is an ephemeral process, and therefore, your code is lost when you shut down the container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While there are ways to overcome the above issues, it is still convoluted and not as efficient as using VScode. In the next section, we will see how to set and run R code with VScode and the Dev Containers extension.&lt;/p&gt; &#xA;&lt;h2&gt;Setting the Dev Containers Extension&lt;/h2&gt; &#xA;&lt;p&gt;So far, we covered the foundation of Docker. We saw how to set and build an image with the &lt;code&gt;Dockerfile&lt;/code&gt; and the &lt;code&gt;build&lt;/code&gt; command, respectively, and then run it in a container with the &lt;code&gt;run&lt;/code&gt; command. This section will focus on setting up a Python development environment with VScode and the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers&#34;&gt;Dev Containers&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;If you still need to install the Dev Containers extension or Docker Desktop, follow the installation instruction above. Once the extension is installed, you should expect to see on the far left side the extension status bar symbol (&lt;code&gt;&amp;gt;&amp;lt;&lt;/code&gt; alike):&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/RamiKrispin/vscode-r/main/images/dev_container_symbol.png&#34; width=&#34;20%&#34; align=&#34;center&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   Figure 10 - The Dev Containers extension status bar symbol&#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Setting the devcontainer.json file&lt;/h3&gt; &#xA;&lt;p&gt;The Dev Containers extension enables to open a local folder inside a containerized environment. This solves the container ephemeral issue and enables you to maintain your code locally while developing and testing it inside a container.&lt;/p&gt; &#xA;&lt;p&gt;To set the Dev Containers extension on your local folder, create a folder named &lt;code&gt;.devcontainer&lt;/code&gt; and add the &lt;code&gt;devcontainer.json&lt;/code&gt; file. In addition, we will use the &lt;code&gt;settings.json&lt;/code&gt; file under the &lt;code&gt;.vscode&lt;/code&gt; folder to customize the VScode settings. Generally, your project folder should follow the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;.&#xA;├── .devcontainer&#xA;│   └── devcontainer.json&#xA;├── .vscode&#xA;│   └── settings.json&#xA;└── Your Projects Files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;devcontainer.json&lt;/code&gt; defines and customizes the container and VScode setting, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Image settings - defines the image build method or if to pull an existing one&lt;/li&gt; &#xA; &lt;li&gt;Project settings such as extensions to install and command to execute during the launch time of the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This tutorial is licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International&lt;/a&gt; License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheAlgorithms/R</title>
    <updated>2023-10-08T02:00:15Z</updated>
    <id>tag:github.com,2023-10-08:/TheAlgorithms/R</id>
    <link href="https://github.com/TheAlgorithms/R" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of various algorithms implemented in R.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Algorithms - R&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/build-passing-brightgreen.svg?sanitize=true&#34; alt=&#34;build&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;prs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. Polls, data mining surveys and studies of scholarly literature databases show substantial increases in popularity in recent years. As of November 2019, R ranks 16th in the TIOBE index, a measure of popularity of programming languages. (&lt;a href=&#34;https://en.wikipedia.org/wiki/R_(programming_language)&#34;&gt;Wikipedia&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;All algorithms can be found in the &lt;a href=&#34;https://github.com/TheAlgorithms/R/raw/master/DIRECTORY.md&#34;&gt;&lt;code&gt;DIRECTORY.md&lt;/code&gt;&lt;/a&gt; file ordered by folder.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;Please ensure to follow the points stated below if you would like to contribute:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your proposing a new algorithm or making changes to an existing one, make sure your code works. Reviewers or the general user must be able to directly emplace it in an R environment and get the desired output.&lt;/li&gt; &#xA; &lt;li&gt;Add an example to showcase the use of an algorithm proposed. It can be commented.&lt;/li&gt; &#xA; &lt;li&gt;Follow proper naming convention for variables (use &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;_&lt;/code&gt; to seperate terms, such as &lt;code&gt;results.df&lt;/code&gt; for a data frame containing some results) and filenames (follow the convention that has been followed for files under the directory your committing to).&lt;/li&gt; &#xA; &lt;li&gt;Feel free to add links here to the newly added file(s), but ensure that they do not result in a merge conflict with different versions of this readme under previous pull requests.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>