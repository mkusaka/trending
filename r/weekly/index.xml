<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-01T01:48:57Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tidyverse/elmer</title>
    <updated>2024-12-01T01:48:57Z</updated>
    <id>tag:github.com,2024-12-01:/tidyverse/elmer</id>
    <link href="https://github.com/tidyverse/elmer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Call LLM APIs from R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;elmer &lt;a href=&#34;https://elmer.tidyverse.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tidyverse/elmer/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138&#34; alt=&#34;elmer website&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html#experimental&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-experimental-orange.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tidyverse/elmer/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/tidyverse/elmer/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;elmer makes it easy to use large language models (LLM) from R. It supports a wider variety of LLM providers and implements a rich set of features including streaming outputs, tool/function calling, structured data extration, and more.&lt;/p&gt; &#xA;&lt;p&gt;(Looking for something similar to elmer for python? Check out &lt;a href=&#34;https://github.com/cpsievert/chatlas&#34;&gt;chatlas&lt;/a&gt;!)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of elmer from &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;tidyverse/elmer&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Providers&lt;/h2&gt; &#xA;&lt;p&gt;elmer supports a wide variety of model providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anthropic’s Claude: &lt;code&gt;chat_claude()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;AWS Bedrock: &lt;code&gt;chat_bedrock()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Azure OpenAI: &lt;code&gt;chat_azure()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Databricks: &lt;code&gt;chat_databricks()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;GitHub model marketplace: &lt;code&gt;chat_github()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Google Gemini: &lt;code&gt;chat_gemini()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Groq: &lt;code&gt;chat_groq()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ollama: &lt;code&gt;chat_ollama()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;OpenAI: &lt;code&gt;chat_openai()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;perplexity.ai: &lt;code&gt;chat_perplexity()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Snowflake Cortex: &lt;code&gt;chat_cortex()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Model choice&lt;/h2&gt; &#xA;&lt;p&gt;If you’re using elmer inside your organisation, you’ll be limited to what your org allows, which is likely to be one provided by a big cloud provider, e.g.&amp;nbsp;&lt;code&gt;chat_azure()&lt;/code&gt;, &lt;code&gt;chat_bedrock()&lt;/code&gt;, &lt;code&gt;chat_databricks()&lt;/code&gt;, or &lt;code&gt;chat_snowflake()&lt;/code&gt;. If you’re using elmer for your own personal exploration, you have a lot more freedom so we have a few recommendations to help you get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;chat_openai()&lt;/code&gt; or &lt;code&gt;chat_claude()&lt;/code&gt; are both good places to start. &lt;code&gt;chat_openai()&lt;/code&gt; defaults to &lt;strong&gt;GPT-4o&lt;/strong&gt;, but you can use &lt;code&gt;model = &#34;gpt-4o-mini&#34;&lt;/code&gt; for a cheaper lower-quality model, or &lt;code&gt;model = &#34;o1-mini&#34;&lt;/code&gt; for more complex reasoning. &lt;code&gt;chat_claude()&lt;/code&gt; is similarly good; it defaults to &lt;strong&gt;Claude 3.5 Sonnet&lt;/strong&gt; which we have found to be particularly good at writing code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;chat_gemini()&lt;/code&gt; is great for large prompt, because it has a much larger context window than other models. It allows up to 1 million tokens, compared to Claude 3.5 Sonnet’s 200k and GPT-4o’s 128k.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;chat_ollama()&lt;/code&gt;, which uses &lt;a href=&#34;https://ollama.com&#34;&gt;Ollama&lt;/a&gt;, allows you to run models on your own computer. The biggest models you can run locally aren’t as good as the state of the art hosted models, but they also don’t share your data and are effectively free.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using elmer&lt;/h2&gt; &#xA;&lt;p&gt;You can work with elmer in several different ways, depending on whether you are working interactively or programmatically. They all start with creating a new chat object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(elmer)&#xA;&#xA;chat &amp;lt;- chat_openai(&#xA;  model = &#34;gpt-4o-mini&#34;,&#xA;  system_prompt = &#34;You are a friendly but terse assistant.&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Chat objects are stateful &lt;a href=&#34;https://r6.r-lib.org&#34;&gt;R6 objects&lt;/a&gt;: they retain the context of the conversation, so each new query can build on the previous ones, and you call their methods with &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Interactive chat console&lt;/h3&gt; &#xA;&lt;p&gt;The most interactive and least programmatic way of using elmer is to chat directly in your R console or browser with &lt;code&gt;live_console(chat)&lt;/code&gt; or &lt;code&gt;live_browser()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;live_console(chat)&#xA;#&amp;gt; ╔════════════════════════════════════════════════════════╗&#xA;#&amp;gt; ║  Entering chat console. Use &#34;&#34;&#34; for multi-line input.  ║&#xA;#&amp;gt; ║  Press Ctrl+C to quit.                                 ║&#xA;#&amp;gt; ╚════════════════════════════════════════════════════════╝&#xA;#&amp;gt; &amp;gt;&amp;gt;&amp;gt; Who were the original creators of R?&#xA;#&amp;gt; R was originally created by Ross Ihaka and Robert Gentleman at the University of&#xA;#&amp;gt; Auckland, New Zealand.&#xA;#&amp;gt;&#xA;#&amp;gt; &amp;gt;&amp;gt;&amp;gt; When was that?&#xA;#&amp;gt; R was initially released in 1995. Development began a few years prior to that,&#xA;#&amp;gt; in the early 1990s.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that the chat object retains state, so when you enter the chat console, any previous interactions with that chat object are still part of the conversation, and any interactions you have in the chat console will persist after you exit back to the R prompt. This is true regardless of which of the various chat functions you use.&lt;/p&gt; &#xA;&lt;h3&gt;Interactive method call&lt;/h3&gt; &#xA;&lt;p&gt;The second most interactive way to chat is to call the &lt;code&gt;chat()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chat$chat(&#34;What preceding languages most influenced R?&#34;)&#xA;#&amp;gt; R was primarily influenced by the S programming language, particularly S-PLUS.&#xA;#&amp;gt; Other languages that had an impact include Scheme and various data analysis&#xA;#&amp;gt; languages.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you initialize the chat object in the global environment, the &lt;code&gt;chat&lt;/code&gt; method will stream the response to the console as it arrives. When the entire response is received, it is also returned as a character vector (but invisibly, so it’s not printed twice). This mode is useful when you want to see the response as it arrives, but you don’t want to enter the chat console.&lt;/p&gt; &#xA;&lt;p&gt;If you want to ask a question about an image, you can pass one or more additional input arguments using &lt;code&gt;content_image_file()&lt;/code&gt; and/or &lt;code&gt;content_image_url()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chat$chat(&#xA;  content_image_url(&#34;https://www.r-project.org/Rlogo.png&#34;),&#xA;  &#34;Can you explain this logo?&#34;&#xA;)&#xA;#&amp;gt; The logo of R features a stylized letter &#34;R&#34; in blue, enclosed in an oval&#xA;#&amp;gt; shape that resembles the letter &#34;O,&#34; signifying the programming language&#39;s&#xA;#&amp;gt; name. The design conveys a modern and professional look, reflecting its use&#xA;#&amp;gt; in statistical computing and data analysis. The blue color often represents&#xA;#&amp;gt; trust and reliability, which aligns with R&#39;s role in data science.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Programmatic chat&lt;/h3&gt; &#xA;&lt;p&gt;The most programmataic way to chat is to create the chat object inside a function, where live streaming is automatically suppressed and &lt;code&gt;$chat()&lt;/code&gt; returns the result as a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_function &amp;lt;- function() {&#xA;  chat &amp;lt;- chat_openai(&#xA;    model = &#34;gpt-4o-mini&#34;,&#xA;    system_prompt = &#34;You are a friendly but terse assistant.&#34;,&#xA;  )&#xA;  chat$chat(&#34;Is R a functional programming language?&#34;)&#xA;}&#xA;my_function()&#xA;#&amp;gt; [1] &#34;Yes, R supports functional programming concepts. It allows functions to&#xA;#&amp;gt; be first-class objects, supports higher-order functions, and encourages the&#xA;#&amp;gt; use of functions as core components of code. However, it also supports&#xA;#&amp;gt; procedural and object-oriented programming styles.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If needed, you can manually control this behaviour with the &lt;code&gt;echo&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;This mode is useful for programming with elmer, when the result is either not intended for human consumption or when you want to process the response before displaying it.&lt;/p&gt; &#xA;&lt;h2&gt;Learning more&lt;/h2&gt; &#xA;&lt;p&gt;elmer comes with a bunch of vignettes to help you learn more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learn key vocabulary and see example use cases in &lt;code&gt;vignette(&#34;elmer&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to design your prompt in &lt;code&gt;vignette(&#34;prompt-design&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn about tool/function calling in &lt;code&gt;vignette(&#34;tool-calling&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to extract structured data in &lt;code&gt;vignette(&#34;structured-data&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn about streaming and async APIs in &lt;code&gt;vignette(&#34;streaming-async&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>