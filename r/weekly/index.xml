<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-01T02:02:47Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jcheng5/posit-conf-2023-shinylive</title>
    <updated>2023-10-01T02:02:47Z</updated>
    <id>tag:github.com,2023-10-01:/jcheng5/posit-conf-2023-shinylive</id>
    <link href="https://github.com/jcheng5/posit-conf-2023-shinylive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Running Shiny without a server&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the slides for the talk &#34;Running Shiny without a server&#34; given by Joe Cheng at &lt;code&gt;posit::conf(2023)&lt;/code&gt; in Chicago, IL.&lt;/p&gt; &#xA;&lt;h2&gt;Slides&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jcheng5.github.io/posit-conf-2023-shinylive/&#34;&gt;https://jcheng5.github.io/posit-conf-2023-shinylive/&lt;/a&gt; (warning: many, many megabytes)&lt;/p&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;h3&gt;For R&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convert&lt;/strong&gt; Shiny apps to static websites: &lt;a href=&#34;http://github.com/posit-dev/r-shinylive&#34;&gt;{shinylive for R}&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Write, run, and share&lt;/strong&gt; Shiny apps right in the browser: &lt;a href=&#34;https://shinylive.io/r/&#34;&gt;https://shinylive.io/r/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Include&lt;/strong&gt; Shiny apps in Quarto docs: &lt;a href=&#34;https://github.com/quarto-ext/shinylive&#34;&gt;Shinylive Quarto extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For Python&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Convert&lt;/strong&gt; Shiny apps to static websites: &lt;a href=&#34;http://github.com/posit-dev/py-shinylive&#34;&gt;{shinylive for Python}&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Write, run, and share&lt;/strong&gt; Shiny apps right in the browser: &lt;a href=&#34;https://shinylive.io/py/&#34;&gt;https://shinylive.io/py/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Include&lt;/strong&gt; Shiny apps in Quarto docs: &lt;a href=&#34;https://github.com/quarto-ext/shinylive&#34;&gt;Shinylive Quarto extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;File an issue in the appropriate GitHub repo, or &lt;a href=&#34;https://discord.gg/yMGCamUMnS&#34;&gt;join the Shiny community on Discord&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/keras</title>
    <updated>2023-10-01T02:02:47Z</updated>
    <id>tag:github.com,2023-10-01:/rstudio/keras</id>
    <link href="https://github.com/rstudio/keras" rel="alternate"></link>
    <summary type="html">&lt;p&gt;R Interface to Keras&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;R interface to Keras&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://s3.amazonaws.com/keras.io/img/keras-logo-2018-large-1200.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/keras/actions?workflow=R-CMD-check&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/keras/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=keras&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/keras&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/keras-team/keras/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://keras.io/&#34;&gt;Keras&lt;/a&gt; is a high-level neural networks API developed with a focus on enabling fast experimentation. &lt;em&gt;Being able to go from idea to result with the least possible delay is key to doing good research.&lt;/em&gt; Keras has the following key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Allows the same code to run on CPU or on GPU, seamlessly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User-friendly API which makes it easy to quickly prototype deep learning models.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-in support for convolutional networks (for computer vision), recurrent networks (for sequence processing), and any combination of both.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports arbitrary network architectures: multi-input or multi-output models, layer sharing, model sharing, etc. This means that Keras is appropriate for building essentially any deep learning model, from a memory network to a neural Turing machine.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the package website at &lt;a href=&#34;https://tensorflow.rstudio.com&#34;&gt;https://tensorflow.rstudio.com&lt;/a&gt; for complete documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rstudio/htmltools</title>
    <updated>2023-10-01T02:02:47Z</updated>
    <id>tag:github.com,2023-10-01:/rstudio/htmltools</id>
    <link href="https://github.com/rstudio/htmltools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools for HTML generation and output&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/rstudio/htmltools&#34;&gt;&lt;img src=&#34;https://github.com/rstudio/htmltools/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://CRAN.R-project.org/package=htmltools&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/htmltools&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lifecycle.r-lib.org/articles/stages.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lifecycle-stable-brightgreen.svg?sanitize=true&#34; alt=&#34;Lifecycle: experimental&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h1&gt;htmltools &lt;a href=&#34;https://rstudio.github.io/htmltools/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rstudio/htmltools/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Tools for creating, manipulating, and writing HTML from R.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the stable release of &lt;code&gt;htmltools&lt;/code&gt; on CRAN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;htmltools&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the development version with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;remotes::install_github(&#34;rstudio/htmltools&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;{htmltools}&lt;/code&gt; makes it easy to customize the user interface (UI) of any &lt;a href=&#34;https://shiny.posit.co/&#34;&gt;Shiny&lt;/a&gt; or &lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;R Markdown&lt;/a&gt; project by using R code to generate custom HTML (including JavaScript and CSS).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://shiny.posit.co/articles/html-tags.html&#34;&gt;This Shiny article&lt;/a&gt; provides a great introduction to &lt;code&gt;{htmltools}&lt;/code&gt; (even if you&#39;re not interested in Shiny). As you&#39;ll learn in that article, the general foundation that &lt;code&gt;{htmltools}&lt;/code&gt; provides allows other R packages (e.g., &lt;a href=&#34;http://www.htmlwidgets.org/&#34;&gt;&lt;code&gt;{htmlwidgets}&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://rstudio.github.io/crosstalk/&#34;&gt;&lt;code&gt;{crosstalk}&lt;/code&gt;&lt;/a&gt;, etc.) to provide &#34;HTML components&#34; in R that users can manipulate and combine in ways the component authors didn&#39;t foresee.&lt;/p&gt; &#xA;&lt;p&gt;For example, as described in depth &lt;a href=&#34;https://plotly-r.com/arranging-views.html#arranging-htmlwidgets&#34;&gt;here&lt;/a&gt;, &lt;code&gt;{htmltools}&lt;/code&gt; makes it fairly easy to arrange numerous &lt;code&gt;{htmlwidgets}&lt;/code&gt; (e.g., &lt;code&gt;{plotly}&lt;/code&gt; graphs) into a single static HTML webpage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(htmltools)&#xA;browsable(tagList(&#xA;  plot_ly(diamonds, x = ~carat, height = 200),&#xA;  plot_ly(diamonds, x = ~price, height = 200)&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/rstudio/htmltools/main/man/figures/plotly-taglist.png&#34; width=&#34;60%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Also, thanks to &lt;code&gt;tagQuery()&lt;/code&gt;, it is fairly easy to query and manipulate the underlying HTML structure of components. See the &lt;a href=&#34;https://rstudio.github.io/htmltools//articles/tagQuery.html&#34;&gt;&lt;code&gt;tagQuery()&lt;/code&gt; article&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re looking to learn how to build more custom user interfaces by writing custom HTML/JavaScript/CSS, we recommend the following resource:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shiny&#39;s &lt;a href=&#34;https://shiny.posit.co/articles/#user-interface&#34;&gt;UI&lt;/a&gt; and &lt;a href=&#34;https://shiny.posit.co/articles/#extensions&#34;&gt;extensions&lt;/a&gt; articles&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unleash-shiny.rinterface.com/&#34;&gt;Outstanding UI with Shiny&lt;/a&gt; by David Granjon&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.javascript-for-r.com/&#34;&gt;JavaScript for R&lt;/a&gt; by John Coene&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>