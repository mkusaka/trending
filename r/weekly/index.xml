<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-21T02:04:08Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tidyverse/readr</title>
    <updated>2024-01-21T02:04:08Z</updated>
    <id>tag:github.com,2024-01-21:/tidyverse/readr</id>
    <link href="https://github.com/tidyverse/readr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Read flat files (csv, tsv, fwf) into R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;readr &lt;a href=&#34;https://readr.tidyverse.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tidyverse/readr/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://CRAN.R-project.org/package=readr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/readr&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tidyverse/readr/actions/workflows/R-CMD-check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/tidyverse/readr/actions/workflows/R-CMD-check.yaml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/tidyverse/readr?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tidyverse/readr/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The goal of readr is to provide a fast and friendly way to read rectangular data from delimited files, such as comma-separated values (CSV) and tab-separated values (TSV). It is designed to parse many types of data found in the wild, while providing an informative problem report when parsing leads to unexpected results. If you are new to readr, the best place to start is the &lt;a href=&#34;https://r4ds.hadley.nz/data-import&#34;&gt;data import chapter&lt;/a&gt; in R for Data Science.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# The easiest way to get readr is to install the whole tidyverse:&#xA;install.packages(&#34;tidyverse&#34;)&#xA;&#xA;# Alternatively, install just readr:&#xA;install.packages(&#34;readr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div class=&#34;.pkgdown-devel&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Or you can install the development version from GitHub:&#xA;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;tidyverse/readr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Cheatsheet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-import.pdf&#34;&gt;&amp;lt;img src=&#34;&lt;/a&gt;&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/main/pngs/thumbnails/data-import-cheatsheet-thumbs.png&#34;&gt;https://github.com/rstudio/cheatsheets/raw/main/pngs/thumbnails/data-import-cheatsheet-thumbs.png&lt;/a&gt;&#34; height=&#34;252&#34; alt=&#34;thumbnail of tidyverse data import cheatsheet&#34;//&amp;gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;readr is part of the core tidyverse, so you can load it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;#&amp;gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;#&amp;gt; ✔ dplyr     1.1.4          ✔ readr     2.1.4.9000&#xA;#&amp;gt; ✔ forcats   1.0.0          ✔ stringr   1.5.1     &#xA;#&amp;gt; ✔ ggplot2   3.4.3          ✔ tibble    3.2.1     &#xA;#&amp;gt; ✔ lubridate 1.9.3          ✔ tidyr     1.3.0     &#xA;#&amp;gt; ✔ purrr     1.0.2          &#xA;#&amp;gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;#&amp;gt; ✖ dplyr::filter() masks stats::filter()&#xA;#&amp;gt; ✖ dplyr::lag()    masks stats::lag()&#xA;#&amp;gt; ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can also load readr as an individual package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(readr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To read a rectangular dataset with readr, you combine two pieces: a function that parses the lines of the file into individual fields and a column specification.&lt;/p&gt; &#xA;&lt;p&gt;readr supports the following file formats with these &lt;code&gt;read_*()&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;read_csv()&lt;/code&gt;: comma-separated values (CSV)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_tsv()&lt;/code&gt;: tab-separated values (TSV)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_csv2()&lt;/code&gt;: semicolon-separated values with &lt;code&gt;,&lt;/code&gt; as the decimal mark&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_delim()&lt;/code&gt;: delimited files (CSV and TSV are important special cases)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_fwf()&lt;/code&gt;: fixed-width files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_table()&lt;/code&gt;: whitespace-separated files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_log()&lt;/code&gt;: web log files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A column specification describes how each column should be converted from a character vector to a specific data type (e.g.&amp;nbsp;character, numeric, datetime, etc.). In the absence of a column specification, readr will guess column types from the data. &lt;code&gt;vignette(&#34;column-types&#34;)&lt;/code&gt; gives more detail on how readr guesses the column types. Column type guessing is very handy, especially during data exploration, but it’s important to remember these are &lt;em&gt;just guesses&lt;/em&gt;. As any data analysis project matures past the exploratory phase, the best strategy is to provide explicit column types.&lt;/p&gt; &#xA;&lt;p&gt;The following example loads a sample file bundled with readr and guesses the column types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;(chickens &amp;lt;- read_csv(readr_example(&#34;chickens.csv&#34;)))&#xA;#&amp;gt; Rows: 5 Columns: 4&#xA;#&amp;gt; ── Column specification ────────────────────────────────────────────────────────&#xA;#&amp;gt; Delimiter: &#34;,&#34;&#xA;#&amp;gt; chr (3): chicken, sex, motto&#xA;#&amp;gt; dbl (1): eggs_laid&#xA;#&amp;gt; &#xA;#&amp;gt; ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;#&amp;gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;#&amp;gt; # A tibble: 5 × 4&#xA;#&amp;gt;   chicken                 sex     eggs_laid motto                               &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                               &#xA;#&amp;gt; 1 Foghorn Leghorn         rooster         0 That&#39;s a joke, ah say, that&#39;s a jok…&#xA;#&amp;gt; 2 Chicken Little          hen             3 The sky is falling!                 &#xA;#&amp;gt; 3 Ginger                  hen            12 Listen. We&#39;ll either die free chick…&#xA;#&amp;gt; 4 Camilla the Chicken     hen             7 Bawk, buck, ba-gawk.                &#xA;#&amp;gt; 5 Ernie The Giant Chicken rooster         0 Put Captain Solo in the cargo hold.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that readr prints the column types – the &lt;em&gt;guessed&lt;/em&gt; column types, in this case. This is useful because it allows you to check that the columns have been read in as you expect. If they haven’t, that means you need to provide the column specification. This sounds like a lot of trouble, but luckily readr affords a nice workflow for this. Use &lt;code&gt;spec()&lt;/code&gt; to retrieve the (guessed) column specification from your initial effort.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;spec(chickens)&#xA;#&amp;gt; cols(&#xA;#&amp;gt;   chicken = col_character(),&#xA;#&amp;gt;   sex = col_character(),&#xA;#&amp;gt;   eggs_laid = col_double(),&#xA;#&amp;gt;   motto = col_character()&#xA;#&amp;gt; )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can copy, paste, and tweak this, to create a more explicit readr call that expresses the desired column types. Here we express that &lt;code&gt;sex&lt;/code&gt; should be a factor with levels &lt;code&gt;rooster&lt;/code&gt; and &lt;code&gt;hen&lt;/code&gt;, in that order, and that &lt;code&gt;eggs_laid&lt;/code&gt; should be integer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;chickens &amp;lt;- read_csv(&#xA;  readr_example(&#34;chickens.csv&#34;),&#xA;  col_types = cols(&#xA;    chicken   = col_character(),&#xA;    sex       = col_factor(levels = c(&#34;rooster&#34;, &#34;hen&#34;)),&#xA;    eggs_laid = col_integer(),&#xA;    motto     = col_character()&#xA;  )&#xA;)&#xA;chickens&#xA;#&amp;gt; # A tibble: 5 × 4&#xA;#&amp;gt;   chicken                 sex     eggs_laid motto                               &#xA;#&amp;gt;   &amp;lt;chr&amp;gt;                   &amp;lt;fct&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;                               &#xA;#&amp;gt; 1 Foghorn Leghorn         rooster         0 That&#39;s a joke, ah say, that&#39;s a jok…&#xA;#&amp;gt; 2 Chicken Little          hen             3 The sky is falling!                 &#xA;#&amp;gt; 3 Ginger                  hen            12 Listen. We&#39;ll either die free chick…&#xA;#&amp;gt; 4 Camilla the Chicken     hen             7 Bawk, buck, ba-gawk.                &#xA;#&amp;gt; 5 Ernie The Giant Chicken rooster         0 Put Captain Solo in the cargo hold.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;vignette(&#34;readr&#34;)&lt;/code&gt; gives an expanded introduction to readr.&lt;/p&gt; &#xA;&lt;h2&gt;Editions&lt;/h2&gt; &#xA;&lt;p&gt;readr got a new parsing engine in version 2.0.0 (released July 2021). In this so-called second edition, readr calls &lt;code&gt;vroom::vroom()&lt;/code&gt;, by default.&lt;/p&gt; &#xA;&lt;p&gt;The parsing engine in readr versions prior to 2.0.0 is now called the first edition. If you’re using readr &amp;gt;= 2.0.0, you can still access first edition parsing via the functions &lt;code&gt;with_edition(1, ...)&lt;/code&gt; and &lt;code&gt;local_edition(1)&lt;/code&gt;. And, obviously, if you’re using readr &amp;lt; 2.0.0, you will get first edition parsing, by definition, because that’s all there is.&lt;/p&gt; &#xA;&lt;p&gt;We will continue to support the first edition for a number of releases, but the overall goal is to make the second edition uniformly better than the first. Therefore the plan is to eventually deprecate and then remove the first edition code. New code and actively-maintained code should use the second edition. The workarounds &lt;code&gt;with_edition(1, ...)&lt;/code&gt; and &lt;code&gt;local_edition(1)&lt;/code&gt; are offered as a pragmatic way to patch up legacy code or as a temporary solution for infelicities identified as the second edition matures.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;There are two main alternatives to readr: base R and data.table’s &lt;code&gt;fread()&lt;/code&gt;. The most important differences are discussed below.&lt;/p&gt; &#xA;&lt;h3&gt;Base R&lt;/h3&gt; &#xA;&lt;p&gt;Compared to the corresponding base functions, readr functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a consistent naming scheme for the parameters (e.g.&amp;nbsp;&lt;code&gt;col_names&lt;/code&gt; and &lt;code&gt;col_types&lt;/code&gt; not &lt;code&gt;header&lt;/code&gt; and &lt;code&gt;colClasses&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Are generally much faster (up to 10x-100x) depending on the dataset.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Leave strings as is by default, and automatically parse common date/time formats.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Have a helpful progress bar if loading is going to take a while.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All functions work exactly the same way regardless of the current locale. To override the US-centric defaults, use &lt;code&gt;locale()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;data.table and &lt;code&gt;fread()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Rdatatable/data.table&#34;&gt;data.table&lt;/a&gt; has a function similar to &lt;code&gt;read_csv()&lt;/code&gt; called &lt;code&gt;fread()&lt;/code&gt;. Compared to &lt;code&gt;fread()&lt;/code&gt;, readr functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Are sometimes slower, particularly on numeric heavy data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can automatically guess some parameters, but basically encourage explicit specification of, e.g., the delimiter, skipped rows, and the header row.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow tidyverse-wide conventions, such as returning a tibble, a standard approach for column name repair, and a common mini-language for column selection.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/jcheng5&#34;&gt;Joe Cheng&lt;/a&gt; for showing me the beauty of deterministic finite automata for parsing, and for teaching me why I should write a tokenizer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/jjallaire&#34;&gt;JJ Allaire&lt;/a&gt; for helping me come up with a design that makes very few copies, and is easy to extend.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://dirk.eddelbuettel.com&#34;&gt;Dirk Eddelbuettel&lt;/a&gt; for coming up with the name!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>