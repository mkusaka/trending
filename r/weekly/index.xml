<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T02:21:37Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kassambara/ggpubr</title>
    <updated>2022-08-14T02:21:37Z</updated>
    <id>tag:github.com,2022-08-14:/kassambara/ggpubr</id>
    <link href="https://github.com/kassambara/ggpubr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#39;ggplot2&#39; Based Publication Ready Plots&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kassambara/ggpubr&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/kassambara/ggpubr.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/ggpubr&#34; alt=&#34;CRAN_Status_Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/ggpubr&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;&lt;img src=&#34;https://cranlogs.r-pkg.org/badges/grand-total/ggpubr?color=orange&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ggpubr: &#39;ggplot2&#39; Based Publication Ready Plots&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;ggplot2, by Hadley Wickham,&lt;/a&gt; is an excellent and flexible package for elegant data visualization in R. However the default generated plots requires some formatting before we can send them for publication. Furthermore, to customize a ggplot, the syntax is opaque and this raises the level of difficulty for researchers with no advanced R programming skills.&lt;/p&gt; &#xA;&lt;p&gt;The &#39;ggpubr&#39; package provides some easy-to-use functions for creating and customizing &#39;ggplot2&#39;- based publication ready plots.&lt;/p&gt; &#xA;&lt;p&gt;Find out more at &lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr&#34;&gt;https://rpkgs.datanovia.com/ggpubr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and loading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install from &lt;a href=&#34;https://cran.r-project.org/package=ggpubr&#34;&gt;CRAN&lt;/a&gt; as follow:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;ggpubr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or, install the latest version from &lt;a href=&#34;https://github.com/kassambara/ggpubr&#34;&gt;GitHub&lt;/a&gt; as follow:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install&#xA;if(!require(devtools)) install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;kassambara/ggpubr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Distribution&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggpubr)&#xA;#&amp;gt; Loading required package: ggplot2&#xA;#&amp;gt; Loading required package: magrittr&#xA;# Create some data format&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;set.seed(1234)&#xA;wdata = data.frame(&#xA;   sex = factor(rep(c(&#34;F&#34;, &#34;M&#34;), each=200)),&#xA;   weight = c(rnorm(200, 55), rnorm(200, 58)))&#xA;head(wdata, 4)&#xA;#&amp;gt;   sex   weight&#xA;#&amp;gt; 1   F 53.79293&#xA;#&amp;gt; 2   F 55.27743&#xA;#&amp;gt; 3   F 56.08444&#xA;#&amp;gt; 4   F 52.65430&#xA;&#xA;# Density plot with mean lines and marginal rug&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change outline and fill colors by groups (&#34;sex&#34;)&#xA;# Use custom palette&#xA;ggdensity(wdata, x = &#34;weight&#34;,&#xA;   add = &#34;mean&#34;, rug = TRUE,&#xA;   color = &#34;sex&#34;, fill = &#34;sex&#34;,&#xA;   palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Histogram plot with mean lines and marginal rug&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change outline and fill colors by groups (&#34;sex&#34;)&#xA;# Use custom color palette&#xA;gghistogram(wdata, x = &#34;weight&#34;,&#xA;   add = &#34;mean&#34;, rug = TRUE,&#xA;   color = &#34;sex&#34;, fill = &#34;sex&#34;,&#xA;   palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Box plots and violin plots&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load data&#xA;data(&#34;ToothGrowth&#34;)&#xA;df &amp;lt;- ToothGrowth&#xA;head(df, 4)&#xA;#&amp;gt;    len supp dose&#xA;#&amp;gt; 1  4.2   VC  0.5&#xA;#&amp;gt; 2 11.5   VC  0.5&#xA;#&amp;gt; 3  7.3   VC  0.5&#xA;#&amp;gt; 4  5.8   VC  0.5&#xA;&#xA;# Box plots with jittered points&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change outline colors by groups: dose&#xA;# Use custom color palette&#xA;# Add jitter points and change the shape by groups&#xA; p &amp;lt;- ggboxplot(df, x = &#34;dose&#34;, y = &#34;len&#34;,&#xA;                color = &#34;dose&#34;, palette =c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;),&#xA;                add = &#34;jitter&#34;, shape = &#34;dose&#34;)&#xA; p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-box-plot-dot-plots-strip-charts-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt; &#xA; # Add p-values comparing groups&#xA; # Specify the comparisons you want&#xA;my_comparisons &amp;lt;- list( c(&#34;0.5&#34;, &#34;1&#34;), c(&#34;1&#34;, &#34;2&#34;), c(&#34;0.5&#34;, &#34;2&#34;) )&#xA;p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value&#xA;  stat_compare_means(label.y = 50)                   # Add global p-value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-box-plot-dot-plots-strip-charts-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&#xA; &#xA;# Violin plots with box plots inside&#xA;# :::::::::::::::::::::::::::::::::::::::::::::::::::&#xA;# Change fill color by groups: dose&#xA;# add boxplot with white fill color&#xA;ggviolin(df, x = &#34;dose&#34;, y = &#34;len&#34;, fill = &#34;dose&#34;,&#xA;         palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;),&#xA;         add = &#34;boxplot&#34;, add.params = list(fill = &#34;white&#34;))+&#xA;  stat_compare_means(comparisons = my_comparisons, label = &#34;p.signif&#34;)+ # Add significance levels&#xA;  stat_compare_means(label.y = 50)                                      # Add global the p-value &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ggpubr-box-plot-dot-plots-strip-charts-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Bar plots&lt;/h2&gt; &#xA;&lt;h3&gt;Demo data set&lt;/h3&gt; &#xA;&lt;p&gt;Load and prepare data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load data&#xA;data(&#34;mtcars&#34;)&#xA;dfm &amp;lt;- mtcars&#xA;# Convert the cyl variable to a factor&#xA;dfm$cyl &amp;lt;- as.factor(dfm$cyl)&#xA;# Add the name colums&#xA;dfm$name &amp;lt;- rownames(dfm)&#xA;# Inspect the data&#xA;head(dfm[, c(&#34;name&#34;, &#34;wt&#34;, &#34;mpg&#34;, &#34;cyl&#34;)])&#xA;#&amp;gt;                                name    wt  mpg cyl&#xA;#&amp;gt; Mazda RX4                 Mazda RX4 2.620 21.0   6&#xA;#&amp;gt; Mazda RX4 Wag         Mazda RX4 Wag 2.875 21.0   6&#xA;#&amp;gt; Datsun 710               Datsun 710 2.320 22.8   4&#xA;#&amp;gt; Hornet 4 Drive       Hornet 4 Drive 3.215 21.4   6&#xA;#&amp;gt; Hornet Sportabout Hornet Sportabout 3.440 18.7   8&#xA;#&amp;gt; Valiant                     Valiant 3.460 18.1   6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ordered bar plots&lt;/h3&gt; &#xA;&lt;p&gt;Change the fill color by the grouping variable &#34;cyl&#34;. Sorting will be done globally, but not by groups.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;          fill = &#34;cyl&#34;,               # change fill color by cyl&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;desc&#34;,          # Sort the value in dscending order&#xA;          sort.by.groups = FALSE,     # Don&#39;t sort inside each group&#xA;          x.text.angle = 90           # Rotate vertically x axis texts&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ordered-bar-plots-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sort bars inside each group. Use the argument &lt;strong&gt;sort.by.groups = TRUE&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;          fill = &#34;cyl&#34;,               # change fill color by cyl&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;asc&#34;,           # Sort the value in dscending order&#xA;          sort.by.groups = TRUE,      # Sort inside each group&#xA;          x.text.angle = 90           # Rotate vertically x axis texts&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-ordered-bar-plots-by-groups-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Deviation graphs&lt;/h3&gt; &#xA;&lt;p&gt;The deviation graph shows the deviation of quantitatives values to a reference value. In the R code below, we&#39;ll plot the mpg z-score from the mtcars dataset.&lt;/p&gt; &#xA;&lt;p&gt;Calculate the z-score of the mpg data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Calculate the z-score of the mpg data&#xA;dfm$mpg_z &amp;lt;- (dfm$mpg -mean(dfm$mpg))/sd(dfm$mpg)&#xA;dfm$mpg_grp &amp;lt;- factor(ifelse(dfm$mpg_z &amp;lt; 0, &#34;low&#34;, &#34;high&#34;), &#xA;                     levels = c(&#34;low&#34;, &#34;high&#34;))&#xA;# Inspect the data&#xA;head(dfm[, c(&#34;name&#34;, &#34;wt&#34;, &#34;mpg&#34;, &#34;mpg_z&#34;, &#34;mpg_grp&#34;, &#34;cyl&#34;)])&#xA;#&amp;gt;                                name    wt  mpg      mpg_z mpg_grp cyl&#xA;#&amp;gt; Mazda RX4                 Mazda RX4 2.620 21.0  0.1508848    high   6&#xA;#&amp;gt; Mazda RX4 Wag         Mazda RX4 Wag 2.875 21.0  0.1508848    high   6&#xA;#&amp;gt; Datsun 710               Datsun 710 2.320 22.8  0.4495434    high   4&#xA;#&amp;gt; Hornet 4 Drive       Hornet 4 Drive 3.215 21.4  0.2172534    high   6&#xA;#&amp;gt; Hornet Sportabout Hornet Sportabout 3.440 18.7 -0.2307345     low   8&#xA;#&amp;gt; Valiant                     Valiant 3.460 18.1 -0.3302874     low   6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an ordered barplot, colored according to the level of mpg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg_z&#34;,&#xA;          fill = &#34;mpg_grp&#34;,           # change fill color by mpg_level&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;asc&#34;,           # Sort the value in ascending order&#xA;          sort.by.groups = FALSE,     # Don&#39;t sort inside each group&#xA;          x.text.angle = 90,          # Rotate vertically x axis texts&#xA;          ylab = &#34;MPG z-score&#34;,&#xA;          xlab = FALSE,&#xA;          legend.title = &#34;MPG Group&#34;&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-deviation-graphs-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rotate the plot: use rotate = TRUE and sort.val = &#34;desc&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggbarplot(dfm, x = &#34;name&#34;, y = &#34;mpg_z&#34;,&#xA;          fill = &#34;mpg_grp&#34;,           # change fill color by mpg_level&#xA;          color = &#34;white&#34;,            # Set bar border colors to white&#xA;          palette = &#34;jco&#34;,            # jco journal color palett. see ?ggpar&#xA;          sort.val = &#34;desc&#34;,          # Sort the value in descending order&#xA;          sort.by.groups = FALSE,     # Don&#39;t sort inside each group&#xA;          x.text.angle = 90,          # Rotate vertically x axis texts&#xA;          ylab = &#34;MPG z-score&#34;,&#xA;          legend.title = &#34;MPG Group&#34;,&#xA;          rotate = TRUE,&#xA;          ggtheme = theme_minimal()&#xA;          )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-deviation-graphs-horizontal-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dot charts&lt;/h2&gt; &#xA;&lt;h3&gt;Lollipop chart&lt;/h3&gt; &#xA;&lt;p&gt;Lollipop chart is an alternative to bar plots, when you have a large set of values to visualize.&lt;/p&gt; &#xA;&lt;p&gt;Lollipop chart colored by the grouping variable &#34;cyl&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;ascending&#34;,                        # Sort value in descending order&#xA;           add = &#34;segments&#34;,                             # Add segments from y = 0 to dots&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-lollipop-chart-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sort in decending order. &lt;strong&gt;sorting = &#34;descending&#34;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Rotate the plot vertically, using &lt;strong&gt;rotate = TRUE&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Sort the mpg value inside each group by using &lt;strong&gt;group = &#34;cyl&#34;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;strong&gt;dot.size&lt;/strong&gt; to 6.&lt;/li&gt; &#xA; &lt;li&gt;Add mpg values as label. &lt;strong&gt;label = &#34;mpg&#34;&lt;/strong&gt; or &lt;strong&gt;label = round(dfm$mpg)&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;descending&#34;,                       # Sort value in descending order&#xA;           add = &#34;segments&#34;,                             # Add segments from y = 0 to dots&#xA;           rotate = TRUE,                                # Rotate vertically&#xA;           group = &#34;cyl&#34;,                                # Order by groups&#xA;           dot.size = 6,                                 # Large dot size&#xA;           label = round(dfm$mpg),                        # Add mpg values as dot labels&#xA;           font.label = list(color = &#34;white&#34;, size = 9, &#xA;                             vjust = 0.5),               # Adjust label parameters&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-lollipop-chart-rotate-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deviation graph:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use y = &#34;mpg_z&#34;&lt;/li&gt; &#xA; &lt;li&gt;Change segment color and size: add.params = list(color = &#34;lightgray&#34;, size = 2)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg_z&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;descending&#34;,                       # Sort value in descending order&#xA;           add = &#34;segments&#34;,                             # Add segments from y = 0 to dots&#xA;           add.params = list(color = &#34;lightgray&#34;, size = 2), # Change segment color and size&#xA;           group = &#34;cyl&#34;,                                # Order by groups&#xA;           dot.size = 6,                                 # Large dot size&#xA;           label = round(dfm$mpg_z,1),                        # Add mpg values as dot labels&#xA;           font.label = list(color = &#34;white&#34;, size = 9, &#xA;                             vjust = 0.5),               # Adjust label parameters&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )+&#xA;  geom_hline(yintercept = 0, linetype = 2, color = &#34;lightgray&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-lollipop-chart-deviation-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cleveland&#39;s dot plot&lt;/h3&gt; &#xA;&lt;p&gt;Color y text by groups. Use y.text.col = TRUE.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggdotchart(dfm, x = &#34;name&#34;, y = &#34;mpg&#34;,&#xA;           color = &#34;cyl&#34;,                                # Color by groups&#xA;           palette = c(&#34;#00AFBB&#34;, &#34;#E7B800&#34;, &#34;#FC4E07&#34;), # Custom color palette&#xA;           sorting = &#34;descending&#34;,                       # Sort value in descending order&#xA;           rotate = TRUE,                                # Rotate vertically&#xA;           dot.size = 2,                                 # Large dot size&#xA;           y.text.col = TRUE,                            # Color y text by groups&#xA;           ggtheme = theme_pubr()                        # ggplot2 theme&#xA;           )+&#xA;  theme_cleveland()                                      # Add dashed grids&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kassambara/ggpubr/master/tools/README-cleveland-dot-plots-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;Find out more at &lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr&#34;&gt;https://rpkgs.datanovia.com/ggpubr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blog posts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A. Kassambara. &lt;a href=&#34;http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/&#34;&gt;ggpubr R Package: ggplot2-Based Publication Ready Plots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jokergoo/ComplexHeatmap</title>
    <updated>2022-08-14T02:21:37Z</updated>
    <id>tag:github.com,2022-08-14:/jokergoo/ComplexHeatmap</id>
    <link href="https://github.com/jokergoo/ComplexHeatmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make Complex Heatmaps&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Make Complex Heatmaps &lt;a href=&#34;https://jokergoo.github.io/ComplexHeatmap-reference/book/&#34;&gt;&lt;img src=&#34;https://jokergoo.github.io/ComplexHeatmap-reference/book/complexheatmap-cover.jpg&#34; width=&#34;240&#34; align=&#34;right&#34; style=&#34;border:2px solid black;&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jokergoo/ComplexHeatmap/actions&#34;&gt;&lt;img src=&#34;https://github.com/jokergoo/ComplexHeatmap/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/jokergoo/ComplexHeatmap&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/jokergoo/ComplexHeatmap.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bioconductor.org/packages/stats/bioc/ComplexHeatmap/&#34;&gt;&lt;img src=&#34;http://www.bioconductor.org/shields/downloads/devel/ComplexHeatmap.svg?sanitize=true&#34; alt=&#34;bioc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://bioconductor.org/packages/devel/bioc/html/ComplexHeatmap.html&#34;&gt;&lt;img src=&#34;http://www.bioconductor.org/shields/years-in-bioc/ComplexHeatmap.svg?sanitize=true&#34; alt=&#34;bioc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;http://jokergoo.github.io/complexheatmap_logo.svg?sanitize=true&#34; width=&#34;550&#34;&gt; &#xA;&lt;p&gt;Complex heatmaps are efficient to visualize associations between different sources of data sets and reveal potential patterns. Here the &lt;strong&gt;ComplexHeatmap&lt;/strong&gt; package provides a highly flexible way to arrange multiple heatmaps and supports various annotation graphics.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/jokergoo/InteractiveComplexHeatmap&#34;&gt;&lt;strong&gt;InteractiveComplexHeatmap&lt;/strong&gt;&lt;/a&gt; package can directly export static complex heatmaps into an interactive Shiny app. Have a try!&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Zuguang Gu, et al., &lt;a href=&#34;http://bioinformatics.oxfordjournals.org/content/early/2016/05/20/bioinformatics.btw313.abstract&#34;&gt;Complex heatmaps reveal patterns and correlations in multidimensional genomic data&lt;/a&gt;, Bioinformatics, 2016.&lt;/p&gt; &#xA;&lt;p&gt;Zuguang Gu. &lt;a href=&#34;https://doi.org/10.1002/imt2.43&#34;&gt;Complex Heatmap Visualization&lt;/a&gt;, iMeta, 2022.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ComplexHeatmap&lt;/code&gt; is available on &lt;a href=&#34;http://www.bioconductor.org/packages/devel/bioc/html/ComplexHeatmap.html&#34;&gt;Bioconductor&lt;/a&gt;, you can install it by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!requireNamespace(&#34;BiocManager&#34;, quietly=TRUE))&#xA;    install.packages(&#34;BiocManager&#34;)&#xA;BiocManager::install(&#34;ComplexHeatmap&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the latest version, install it directly from GitHub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(devtools)&#xA;install_github(&#34;jokergoo/ComplexHeatmap&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Make a single heatmap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Heatmap(mat, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A single Heatmap with column annotations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ha = HeatmapAnnotation(df = anno1, anno_fun = anno2, ...)&#xA;Heatmap(mat, ..., top_annotation = ha)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make a list of heatmaps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Heatmap(mat1, ...) + Heatmap(mat2, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make a list of heatmaps and row annotations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ha = HeatmapAnnotation(df = anno1, anno_fun = anno2, ..., which = &#34;row&#34;)&#xA;Heatmap(mat1, ...) + Heatmap(mat2, ...) + ha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The full documentations are available at &lt;a href=&#34;https://jokergoo.github.io/ComplexHeatmap-reference/book/&#34;&gt;https://jokergoo.github.io/ComplexHeatmap-reference/book/&lt;/a&gt; and the website is at &lt;a href=&#34;https://jokergoo.github.io/ComplexHeatmap&#34;&gt;https://jokergoo.github.io/ComplexHeatmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Blog posts&lt;/h2&gt; &#xA;&lt;p&gt;There are following blog posts focusing on specific topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2021/03/24/3d-heatmap/&#34;&gt;Make 3D heatmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/05/06/translate-from-pheatmap-to-complexheatmap/&#34;&gt;Translate from pheatmap to ComplexHeatmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/05/11/set-cell-width/height-in-the-heatmap/&#34;&gt;Set cell width/height in the heatmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/05/15/interactive-complexheatmap/&#34;&gt;Interactive ComplexHeatmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/05/31/word-cloud-as-heatmap-annotation/&#34;&gt;Word cloud as heatmap annotation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/06/19/which-heatmap-function-is-faster/&#34;&gt;Which heatmap function is faster?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/06/30/rasterization-in-complexheatmap/&#34;&gt;Rasterization in ComplexHeatmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/07/06/block-annotation-over-several-slices/&#34;&gt;Block annotation over several slices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jokergoo.github.io/2020/07/14/integrate-complexheatmap-with-cowplot-package/&#34;&gt;Integrate ComplexHeatmap with cowplot package&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Visualize Methylation Profile with Complex Annotations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/449218/47718635-2ec22980-dc49-11e8-9f01-37becb19e0d5.png&#34; alt=&#34;complexheatmap_example4&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Correlations between methylation, expression and other genomic features&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/449218/47718636-2ec22980-dc49-11e8-8db0-1659c27dcf40.png&#34; alt=&#34;complexheatmap_example3&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Visualize Cell Heterogeneity from Single Cell RNASeq&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/449218/47718637-2ec22980-dc49-11e8-925e-955c16cfa982.png&#34; alt=&#34;complexheatmap_example2&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Making Enhanced OncoPrint&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/449218/47718638-2ec22980-dc49-11e8-845e-21e51d3b8e73.png&#34; alt=&#34;complexheatmap_example1&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;UpSet plot&lt;/h3&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/449218/102615477-48c76a80-4136-11eb-98d9-3c528844fbe8.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;h3&gt;3D heatmap&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/449218/112284448-8c77c600-8c89-11eb-8d38-c5538900df20.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT @ Zuguang Gu&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>junjunlab/jjAnno</title>
    <updated>2022-08-14T02:21:37Z</updated>
    <id>tag:github.com,2022-08-14:/junjunlab/jjAnno</id>
    <link href="https://github.com/junjunlab/jjAnno" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An annotation package for ggplot plot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jjAnno&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;In fact, adding multiple different annotations (&lt;strong&gt;text, segment, rect, points, images&lt;/strong&gt; and so on) beside the plot is needed. But we do not want to spend much time ,energy and code to render our raw figures. The &lt;strong&gt;Ai&lt;/strong&gt;&lt;code&gt;(Artificial Intelligence)&lt;/code&gt; is a good choice for you to produce a complex plot but &lt;strong&gt;without much accuracy&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here I provide a package &lt;strong&gt;jjAnno&lt;/strong&gt; that you can add different annotaions including &lt;strong&gt;point&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt;, &lt;strong&gt;rect&lt;/strong&gt;, &lt;strong&gt;segemnt&lt;/strong&gt;, &lt;strong&gt;image&lt;/strong&gt; beside or inside the plot. This will be &lt;strong&gt;save your much time and cost&lt;/strong&gt; to make a complex figure.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of jjAnno like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;devtools&#34;)&#xA;devtools::install_github(&#34;junjunlab/jjAnno&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;An eaxmple shows here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/64965509/179390758-cb5d89cc-efdf-4bf1-9eae-e6a537f6f044.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;More examples and details see:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://junjunlab.github.io/jjAnno-manual/&#34;&gt;https://junjunlab.github.io/jjAnno-manual/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>