<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T02:03:34Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Huber-group-EMBL/Huber-group-EMBL.github.io</title>
    <updated>2023-08-27T02:03:34Z</updated>
    <id>tag:github.com,2023-08-27:/Huber-group-EMBL/Huber-group-EMBL.github.io</id>
    <link href="https://github.com/Huber-group-EMBL/Huber-group-EMBL.github.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Huber group public webpage&lt;/p&gt;&lt;hr&gt;&lt;p&gt;To build the website, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;quarto render&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the top-level directory of this repository. Quarto is here: &lt;a href=&#34;https://quarto.org/&#34;&gt;https://quarto.org/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/rappor</title>
    <updated>2023-08-27T02:03:34Z</updated>
    <id>tag:github.com,2023-08-27:/google/rappor</id>
    <link href="https://github.com/google/rappor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RAPPOR: Privacy-Preserving Reporting Algorithms&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RAPPOR&lt;/h1&gt; &#xA;&lt;p&gt;RAPPOR is a novel privacy technology that allows inferring statistics about populations while preserving the privacy of individual users.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains simulation and analysis code in Python and R.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed description of the algorithms, see the &lt;a href=&#34;http://arxiv.org/abs/1407.6981&#34;&gt;paper&lt;/a&gt; and links below.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to send feedback to &lt;a href=&#34;https://groups.google.com/forum/#!forum/rappor-discuss&#34;&gt;rappor-discuss@googlegroups.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Demo&lt;/h2&gt; &#xA;&lt;p&gt;Although the Python and R libraries should be portable to any platform, our end-to-end demo has only been tested on Linux.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have a Linux box handy, you can &lt;a href=&#34;http://google.github.io/rappor/examples/report.html&#34;&gt;view the generated output&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To setup your enviroment there are some packages and R dependencies. There is a setup script to install them: $ ./setup.sh Then to build the native components run: $ ./build.sh This compiles and tests the &lt;code&gt;fastrand&lt;/code&gt; C extension module for Python, which speeds up the simulation.&lt;/p&gt; &#xA;&lt;p&gt;Finally to run the demo run: $ ./demo.sh&lt;/p&gt; &#xA;&lt;p&gt;The demo strings together the Python and R code. It:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generates simulated input data with different distributions&lt;/li&gt; &#xA; &lt;li&gt;Runs it through the RAPPOR privacy-preserving reporting mechanisms&lt;/li&gt; &#xA; &lt;li&gt;Analyzes and plots the aggregated reports against the true input&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The output is written to &lt;code&gt;_tmp/regtest/results.html&lt;/code&gt;, and can be opened with a browser.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://r-project.org&#34;&gt;R&lt;/a&gt; analysis (&lt;code&gt;analysis/R&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/glmnet/index.html&#34;&gt;glmnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/limSolve/index.html&#34;&gt;limSolve&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Demo dependencies (&lt;code&gt;demo.sh&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;These are necessary if you want to test changes to the code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;R libraries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/ggplot2/index.html&#34;&gt;ggplot2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://cran.r-project.org/web/packages/optparse/index.html&#34;&gt;optparse&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;bash shell / coreutils: to run tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Python client (&lt;code&gt;client/python&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;None. You should be able to just import the &lt;code&gt;rappor.py&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;R: tested on R 3.0.&lt;/li&gt; &#xA; &lt;li&gt;Python: tested on Python 2.7.&lt;/li&gt; &#xA; &lt;li&gt;OS: the shell script tests have been tested on Linux, but may work on Mac/Cygwin. The R and Python code should work on any OS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To run tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This currently runs Python unit tests, lints Python source files, and runs R unit tests.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;rappor.py&lt;/code&gt; is a tiny standalone Python file, and you can easily copy it into a Python program.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Its interface is subject to change. We are in the demo stage now, but if there&#39;s demand, we will document and publish the interface.&lt;/p&gt; &#xA;&lt;p&gt;The R interface is also subject to change.&lt;/p&gt; &#xA;&lt;!-- TODO: Add links to interface docs when available. --&gt; &#xA;&lt;p&gt;The &lt;code&gt;fastrand&lt;/code&gt; C module is optional. It&#39;s likely only useful for simulation of thousands of clients. It doesn&#39;t use cryptographically strong randomness, and thus should &lt;strong&gt;not&lt;/strong&gt; be used in production.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;analysis/&#xA;  R/                 # R code for analysis&#xA;  cpp/               # Fast reimplementations of certain analysis&#xA;                     #   algorithms&#xA;apps/                # Web apps to help you use RAPPOR (using Shiny)&#xA;bin/                 # Command line tools for analysis.&#xA;client/              # Client libraries&#xA;  python/            # Python client library&#xA;    rappor.py&#xA;    ...&#xA;  cpp/               # C++ client library&#xA;    encoder.cc&#xA;    ...&#xA;doc/                 # Documentation&#xA;tests/               # Tools for regression tests&#xA;  compare_dist.R     # Test helper for single variable analysis&#xA;  gen_true_values.R  # Generate test input&#xA;  make_summary.py    # Generate an HTML report for the regtest&#xA;  rappor_sim.py      # RAPPOR client simulation&#xA;  regtest_spec.py    # Specification of test cases&#xA;  ...&#xA;build.sh             # Build scripts (docs, C extension, etc.)&#xA;demo.sh              # Quick demonstration&#xA;docs.sh              # Generate docs form the markdown in doc/&#xA;gh-pages/            # Where generated docs go. (A subtree of the branch gh-pages)&#xA;pipeline/            # Analysis pipeline code.&#xA;regtest.sh           # End-to-end regression tests, including client&#xA;                     #  libraries and analysis&#xA;setup.sh             # Install dependencies (for Linux)&#xA;test.sh              # Test runner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://google.github.io/rappor/doc/data-flow.html&#34;&gt;RAPPOR Data Flow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Publications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://arxiv.org/abs/1407.6981&#34;&gt;RAPPOR: Randomized Aggregatable Privacy-Preserving Ordinal Response&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://arxiv.org/abs/1503.01214&#34;&gt;Building a RAPPOR with the Unknown: Privacy-Preserving Learning of Associations and Data Dictionaries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://googleresearch.blogspot.com/2014/10/learning-statistics-with-privacy-aided.html&#34;&gt;Google Blog Post about RAPPOR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.chromium.org/developers/design-documents/rappor&#34;&gt;RAPPOR implementation in Chrome&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a production quality C++ implementation, but it&#39;s somewhat tied to Chrome, and doesn&#39;t support all privacy parameters (e.g. only a few values of p and q). On the other hand, the code in this repo is not yet production quality, but supports experimentation with different parameters and data sets. Of course, anyone is free to implement RAPPOR independently as well.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/rappor-discuss&#34;&gt;rappor-discuss@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dmecoyfin/dmeyf2023</title>
    <updated>2023-08-27T02:03:34Z</updated>
    <id>tag:github.com,2023-08-27:/dmecoyfin/dmeyf2023</id>
    <link href="https://github.com/dmecoyfin/dmeyf2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>