<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:58:46Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jcrodriguez1989/chatgpt</title>
    <updated>2023-03-05T01:58:46Z</updated>
    <id>tag:github.com,2023-03-05:/jcrodriguez1989/chatgpt</id>
    <link href="https://github.com/jcrodriguez1989/chatgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interface to ChatGPT from R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT coding assistant for RStudio&lt;/h1&gt; &#xA;&lt;center&gt; &#xA; &lt;img width=&#34;300&#34; height=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/jcrodriguez1989/chatgpt/main/man/figures/chatgpt_meme.jpeg&#34;&gt; &#xA; &lt;p&gt; Meme by Programming Jokes I IT Humor &amp;amp; Memes &lt;/p&gt; &#xA;&lt;/center&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the development version of {chatgpt} from &lt;a href=&#34;https://github.com/jcrodriguez1989/chatgpt&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;jcrodriguez1989/chatgpt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;You need to setup your ChatGPT API key in R.&lt;/p&gt; &#xA;&lt;p&gt;First you will need to obtain your ChatGPT API key. You can create an API key by accessing &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;OpenAI API page&lt;/a&gt; -don’t miss their article about &lt;a href=&#34;https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety&#34;&gt;Best Practices for API Key Safety&lt;/a&gt;-.&lt;/p&gt; &#xA;&lt;p&gt;Then you have to assign your API key for usage in R, this can be done just for the actual session, by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Sys.setenv(OPENAI_API_KEY = &#34;XX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can do it persistent (session-wide), by assigning it in your &lt;code&gt;.Renviron&lt;/code&gt; file. For it, execute &lt;code&gt;usethis::edit_r_environ()&lt;/code&gt;, and in that file write a line at the end your API key as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;OPENAI_API_KEY=XX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The {chatgpt} R package provides a set of features to assist in R coding. Current existing addins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ask ChatGPT:&lt;/strong&gt; Opens an interactive chat session with ChatGPT&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comment selected code:&lt;/strong&gt; Comment the selected code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create unit tests:&lt;/strong&gt; Create testthat unit tests for the selected code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create variable name:&lt;/strong&gt; Create a name for a variable that would be assigned the result of this code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Document code (in roxygen2 format):&lt;/strong&gt; Document a function definition, in roxygen2 format&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explain selected code:&lt;/strong&gt; Explain the selected code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Find issues in the selected code:&lt;/strong&gt; Find issues in the selected code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optimize selected code:&lt;/strong&gt; Optimize the selected code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Refactor selected code:&lt;/strong&gt; Refactor the selected code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When no code is selected, it will use the whole file’s code.&lt;/p&gt; &#xA;&lt;h2&gt;Code Examples&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;ask_chatgpt&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(ask_chatgpt(&#34;What do you think about R language?&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;What do you think about R language?&#xA;R language is a powerful, open-source programming language for statistical computing and graphical visualization. It’s an excellent choice for data analysis and statistical modeling. R has a wide range of features available and is highly extensible, allowing users to create custom packages and add-ons. With many different tutorials and guides available to help get started, R is an accessible language and can be used for both simple and complex statistical analysis and data analysis projects.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;comment_code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(comment_code(&#34;for (i in 1:10) {\n  print(i ** 2)\n}&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Add inline comments to the following R code: &#34;for (i in 1:10) {&#xA;  print(i ** 2)&#xA;}&#34;&#xA;#Loop through nums 1-10&#xA;for (i in 1:10) {&#xA;  #Print the square of each num&#xA;  print(i ** 2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;create_unit_tests&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(create_unit_tests(&#34;squared_numbers &amp;lt;- function(numbers) {\n  numbers ^ 2\n}&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Create a full testthat file, with test cases for the following R code: &#34;squared_numbers &amp;lt;- function(numbers) {&#xA;  numbers ^ 2&#xA;}&#34;&#xA;# testthat file&#xA;&#xA;library(testthat)&#xA;&#xA;context(&#34;squared_numbers()&#34;)&#xA;&#xA;test_that(&#34;basic squared_numbers() is able to squared number&#34;, {&#xA;  expect_equal(squared_numbers(4), 16)&#xA;})&#xA;&#xA;test_that(&#34;squared_numbers() result is number&#34;, {&#xA;  expect_type(squared_numbers(4), &#34;numeric&#34;)&#xA;})&#xA;&#xA;test_that(&#34;squared_numbers() is able to handle vector input&#34;, {&#xA;  expect_equal(squared_numbers(c(1,3)), c(1,9))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;create_variable_name&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(create_variable_name(&#34;sapply(1:10, function(i) i ** 2)&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Give a good variable name to the result of the following R code: &#34;sapply(1:10, function(i) i ** 2)&#34;&#xA;squares&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;document_code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(document_code(&#34;square_numbers &amp;lt;- function(numbers) numbers ** 2&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Document, in roxygen2 format, this R function: &#34;square_numbers &amp;lt;- function(numbers) numbers ** 2&#34;&#xA;#&#39; Square a Numeric Vector&#xA;#&#39; &#xA;#&#39; Take a numeric vector as an argument and square each element&#xA;#&#39; &#xA;#&#39; @param numbers A numeric vector&#xA;#&#39; &#xA;#&#39; @return A numeric vector with each element squared&#xA;#&#39; &#xA;#&#39; @examples&#xA;#&#39; square_numbers(2:10)&#xA;#&#39; &#xA;#&#39; @export&#xA;#&#39; &#xA;square_numbers &amp;lt;- function(numbers) numbers ** 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;explain_code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(explain_code(&#34;for (i in 1:10) {\n  print(i ** 2)\n}&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Explain the following R code: &#34;for (i in 1:10) {&#xA;  print(i ** 2)&#xA;}&#34;&#xA;The code is a for loop that prints the square of numbers 1 through 10 (i.e., 1, 4, 9, 16, 25, 36, 49, 64, 81, and 100). The loop starts with i=1 and iterates through 10 with the command &#34;i in 1:10,&#34; and the square of each number is printed using the expression &#34;i**2.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;find_issues_in_code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(find_issues_in_code(&#34;i &amp;lt;- 0\nwhile (i &amp;lt; 0) {\n  i &amp;lt;- i - 1\n}&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Find issues or bugs in the following R code: &#34;i &amp;lt;- 0&#xA;while (i &amp;lt; 0) {&#xA;  i &amp;lt;- i - 1&#xA;}&#34;&#xA;1. The loop condition is incorrect. It should be &#34;i &amp;gt; 0&#34; instead of &#34;i &amp;lt; 0&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;optimize_code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(optimize_code(&#34;i &amp;lt;- 10\nwhile (i &amp;gt; 0) {\n  i &amp;lt;- i - 1\n  print(i)\n}&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Optimize the following R code: &#34;i &amp;lt;- 10&#xA;while (i &amp;gt; 0) {&#xA;  i &amp;lt;- i - 1&#xA;  print(i)&#xA;}&#34;&#xA;i &amp;lt;- 10&#xA;for (i in 10:1) {&#xA;  print(i-1)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;refactor_code&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;&amp;gt; cat(refactor_code(&#34;i &amp;lt;- 10\nwhile (i &amp;gt; 0) {\n  i &amp;lt;- i - 1\n  print(i)\n}&#34;))&#xA;&#xA;*** ChatGPT input:&#xA;&#xA;Refactor the following R code, returning valid R code: &#34;i &amp;lt;- 10&#xA;while (i &amp;gt; 0) {&#xA;  i &amp;lt;- i - 1&#xA;  print(i)&#xA;}&#34;&#xA;for (i in 10:1) {&#xA;  print(i)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Parameters&lt;/h2&gt; &#xA;&lt;h3&gt;Disable Console Messages&lt;/h3&gt; &#xA;&lt;p&gt;If you want {chatgpt} not to show messages in console, please set the environment variable &lt;code&gt;OPENAI_VERBOSE=FALSE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Addin Changes in Place&lt;/h3&gt; &#xA;&lt;p&gt;If you want {chatgpt} addins to take place in the editor -i.e., replace the selected code with the result of the addin execution- then you sould set the environment variable &lt;code&gt;OPENAI_ADDIN_REPLACE=TRUE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;ChatGPT Model Tweaks&lt;/h3&gt; &#xA;&lt;p&gt;ChatGPT model parameters can be tweaked by using environment variables.&lt;/p&gt; &#xA;&lt;p&gt;The following environment variables variables can be set to tweak the behavior, as documented in &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions/create&#34;&gt;https://beta.openai.com/docs/api-reference/completions/create&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_MODEL&lt;/code&gt;; defaults to &lt;code&gt;&#34;gpt-3.5-turbo&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_MAX_TOKENS&lt;/code&gt;; defaults to &lt;code&gt;256&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_TEMPERATURE&lt;/code&gt;; defaults to &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_TOP_P&lt;/code&gt;; defaults to &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_FREQUENCY_PENALTY&lt;/code&gt;; defaults to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_PRESENCE_PENALTY&lt;/code&gt;; defaults to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tidyverse/tidyverse</title>
    <updated>2023-03-05T01:58:46Z</updated>
    <id>tag:github.com,2023-03-05:/tidyverse/tidyverse</id>
    <link href="https://github.com/tidyverse/tidyverse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily install and load packages from the tidyverse&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tidyverse &lt;a href=&#34;https://tidyverse.tidyverse.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tidyverse/tidyverse/main/man/figures/logo.png&#34; align=&#34;right&#34; height=&#34;138.5&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=tidyverse&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/tidyverse&#34; alt=&#34;CRAN status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tidyverse/tidyverse/actions&#34;&gt;&lt;img src=&#34;https://github.com/tidyverse/tidyverse/workflows/R-CMD-check/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/tidyverse/tidyverse?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tidyverse/tidyverse/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov test coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The tidyverse is a set of packages that work in harmony because they share common data representations and API design. The &lt;strong&gt;tidyverse&lt;/strong&gt; package is designed to make it easy to install and load core packages from the tidyverse in a single command.&lt;/p&gt; &#xA;&lt;p&gt;If you’d like to learn how to use the tidyverse effectively, the best place to start is &lt;a href=&#34;https://r4ds.had.co.nz&#34;&gt;R for data science&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;div class=&#34;.pkgdown-release&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install from CRAN&#xA;install.packages(&#34;tidyverse&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;.pkgdown-devel&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Install the development version from GitHub&#xA;# install.packages(&#34;pak&#34;)&#xA;pak::pak(&#34;tidyverse/tidyverse&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;If you’re compiling from source, you can run &lt;code&gt;pak::pkg_system_requirements(&#34;tidyverse&#34;)&lt;/code&gt;, to see the complete set of system packages needed on your machine.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt; will load the core tidyverse packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ggplot2.tidyverse.org&#34;&gt;ggplot2&lt;/a&gt;, for data visualisation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dplyr.tidyverse.org&#34;&gt;dplyr&lt;/a&gt;, for data manipulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tidyr.tidyverse.org&#34;&gt;tidyr&lt;/a&gt;, for data tidying.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://readr.tidyverse.org&#34;&gt;readr&lt;/a&gt;, for data import.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://purrr.tidyverse.org&#34;&gt;purrr&lt;/a&gt;, for functional programming.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tibble.tidyverse.org&#34;&gt;tibble&lt;/a&gt;, for tibbles, a modern re-imagining of data frames.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/stringr&#34;&gt;stringr&lt;/a&gt;, for strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/forcats&#34;&gt;forcats&lt;/a&gt;, for factors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/lubridate&#34;&gt;lubridate&lt;/a&gt;, for date/times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You also get a condensed summary of conflicts with other packages you have loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;#&amp;gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;#&amp;gt; ✔ dplyr     1.1.0     ✔ readr     2.1.4&#xA;#&amp;gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0&#xA;#&amp;gt; ✔ ggplot2   3.4.1     ✔ tibble    3.1.8&#xA;#&amp;gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0&#xA;#&amp;gt; ✔ purrr     1.0.1     &#xA;#&amp;gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;#&amp;gt; ✖ dplyr::filter() masks stats::filter()&#xA;#&amp;gt; ✖ dplyr::lag()    masks stats::lag()&#xA;#&amp;gt; ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see conflicts created later with &lt;code&gt;tidyverse_conflicts()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(MASS)&#xA;#&amp;gt; &#xA;#&amp;gt; Attaching package: &#39;MASS&#39;&#xA;#&amp;gt; The following object is masked from &#39;package:dplyr&#39;:&#xA;#&amp;gt; &#xA;#&amp;gt;     select&#xA;tidyverse_conflicts()&#xA;#&amp;gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;#&amp;gt; ✖ dplyr::filter() masks stats::filter()&#xA;#&amp;gt; ✖ dplyr::lag()    masks stats::lag()&#xA;#&amp;gt; ✖ MASS::select()  masks dplyr::select()&#xA;#&amp;gt; ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can check that all tidyverse packages are up-to-date with &lt;code&gt;tidyverse_update()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;tidyverse_update()&#xA;#&amp;gt; The following packages are out of date:&#xA;#&amp;gt;  * broom (0.4.0 -&amp;gt; 0.4.1)&#xA;#&amp;gt;  * DBI   (0.4.1 -&amp;gt; 0.5)&#xA;#&amp;gt;  * Rcpp  (0.12.6 -&amp;gt; 0.12.7)&#xA;#&amp;gt;  &#xA;#&amp;gt; Start a clean R session then run:&#xA;#&amp;gt; install.packages(c(&#34;broom&#34;, &#34;DBI&#34;, &#34;Rcpp&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;As well as the core tidyverse, installing this package also installs a selection of other packages that you’re likely to use frequently, but probably not in every analysis. This includes packages for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Working with specific types of vectors:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/hms&#34;&gt;hms&lt;/a&gt;, for times.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Importing other types of data:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wesm/feather&#34;&gt;feather&lt;/a&gt;, for sharing with Python and other languages.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/haven&#34;&gt;haven&lt;/a&gt;, for SPSS, SAS and Stata files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/httr&#34;&gt;httr&lt;/a&gt;, for web apis.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jeroen/jsonlite&#34;&gt;jsonlite&lt;/a&gt; for JSON.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/readxl&#34;&gt;readxl&lt;/a&gt;, for &lt;code&gt;.xls&lt;/code&gt; and &lt;code&gt;.xlsx&lt;/code&gt; files.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/rvest&#34;&gt;rvest&lt;/a&gt;, for web scraping.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/r-lib/xml2&#34;&gt;xml2&lt;/a&gt;, for XML.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Modelling&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tidyverse/modelr&#34;&gt;modelr&lt;/a&gt;, for modelling within a pipeline&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tidymodels/broom&#34;&gt;broom&lt;/a&gt;, for turning models into tidy data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the tidyverse project is released with a &lt;a href=&#34;https://tidyverse.tidyverse.org/CODE_OF_CONDUCT.html&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By contributing to this project, you agree to abide by its terms.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cole-trapnell-lab/monocle-release</title>
    <updated>2023-03-05T01:58:46Z</updated>
    <id>tag:github.com,2023-03-05:/cole-trapnell-lab/monocle-release</id>
    <link href="https://github.com/cole-trapnell-lab/monocle-release" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/cole-trapnell-lab/monocle-release&#34;&gt;&lt;img src=&#34;https://travis-ci.com/cole-trapnell-lab/monocle-release.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;MONOCLE&lt;/h1&gt; &#xA;&lt;p&gt;Monocle is an analysis toolkit for single-cell RNA-Seq experiments. To use this package, you will need the R statistical computing environment (version 3.0 or later) and several packages available through Bioconductor and CRAN.&lt;/p&gt; &#xA;&lt;p&gt;We highly recommend installation of Monocle through the bioconductor project. See here for details:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/monocle.html&#34;&gt;https://bioconductor.org/packages/release/bioc/html/monocle.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;News and announcements for the Monocle project will appear here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://cole-trapnell-lab.github.io/monocle-release/&#34;&gt;http://cole-trapnell-lab.github.io/monocle-release/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This release supports Mac OS X and Linux. Windows may support this build, but Monocle has not been tested on Windows yet.&lt;/p&gt;</summary>
  </entry>
</feed>