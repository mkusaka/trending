<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub R Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-16T02:03:18Z</updated>
  <subtitle>Weekly Trending of R in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pola-rs/r-polars</title>
    <updated>2023-04-16T02:03:18Z</updated>
    <id>tag:github.com,2023-04-16:/pola-rs/r-polars</id>
    <link href="https://github.com/pola-rs/r-polars" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bring polars to R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;polars&lt;/h1&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpolars.r-universe.dev&#34;&gt;&lt;img src=&#34;https://rpolars.r-universe.dev/badges/polars&#34; alt=&#34;R-universe status badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pola-rs/r-polars/actions/workflows/check.yaml&#34;&gt;&lt;img src=&#34;https://github.com/pola-rs/r-polars/actions/workflows/check.yaml/badge.svg?sanitize=true&#34; alt=&#34;Dev R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rpolars.github.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-homepage-blue.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;p&gt;The goal of this project is to bring the blazingly fast &lt;a href=&#34;https://www.pola.rs/&#34;&gt;Polars&lt;/a&gt; data manipulation library to R. The underlying computation engine is written in Rust and this R implementation has no other dependencies than R itself (≥ 4.1.0).&lt;/p&gt; &#xA;&lt;p&gt;Documentation can be found on the &lt;strong&gt;r-polars&lt;/strong&gt; &lt;a href=&#34;https://rpolars.github.io/reference/index.html&#34;&gt;homepage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The primary developer of the upstream Polars project is Ritchie Vink (&lt;a href=&#34;https://github.com/ritchie46&#34;&gt;@ritchie46&lt;/a&gt;). This R port is maintained by Søren Welling (&lt;a href=&#34;https://github.com/sorhawell&#34;&gt;@sorhawell&lt;/a&gt;), together with other &lt;a href=&#34;https://github.com/pola-rs/r-polars/graphs/contributors&#34;&gt;contributors&lt;/a&gt;. Consider joining our &lt;a href=&#34;https://discord.gg/4UfP5cfBE7&#34;&gt;Discord&lt;/a&gt; (subchannel) for additional help and discussion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; As of March 2023, &lt;strong&gt;polars&lt;/strong&gt; has now reached nearly 100% coverage of the underlying “lazy” Expr syntax. While translation of the “eager” syntax is still a little further behind, you should be able to do just about everything using &lt;code&gt;$select()&lt;/code&gt; + &lt;code&gt;$with_columns()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The package is not yet available on CRAN. But we provide convenient installation options for a variety of operating systems:&lt;/p&gt; &#xA;&lt;h3&gt;R-universe&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rpolars.r-universe.dev/rpolars#install&#34;&gt;R-universe&lt;/a&gt; provides pre-compiled &lt;strong&gt;polars&lt;/strong&gt; binaries for Windows and MacOS (x86_64), with source builds for other platforms. Please see the GitHub release option below for binary install options on Linux.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;polars&#34;, repos = &#34;https://rpolars.r-universe.dev&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Special thanks to Jeroen Ooms (&lt;a href=&#34;https://github.com/jeroen&#34;&gt;@jeroen&lt;/a&gt;) for the excellent R-universe support.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub releases&lt;/h3&gt; &#xA;&lt;p&gt;We also provide pre-compiled binaries for various operating systems, as well as source installs, on our &lt;a href=&#34;https://github.com/pola-rs/r-polars/releases&#34;&gt;GitHub releases&lt;/a&gt; page. You can download and install these files manually, or install directly from R. Simply match the URL for your operating system and the desired release. For example, to install the latest release of &lt;strong&gt;polars&lt;/strong&gt; on Linux (x86_64) one would use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#xA;  &#34;https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-pc-linux-gnu.gz&#34;,&#xA;  repos = NULL &#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly for Windows (&lt;a href=&#34;https://github.com/pola-rs/r-polars/releases/latest/download/polars.zip&#34;&gt;URL&lt;/a&gt; and MacOS (x86_64, &lt;a href=&#34;https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-apple-darwin17.0.tgz&#34;&gt;URL&lt;/a&gt;). Just remember to invoke the &lt;code&gt;repos = NULL&lt;/code&gt; argument if you are installing these binary builds directly from within R.&lt;/p&gt; &#xA;&lt;p&gt;One exception worth noting is MacOS (arm64), i.e.&amp;nbsp;systems based on the new M1/M2 “Silicon” chips. To install &lt;strong&gt;polars&lt;/strong&gt; on one of these machines, we need to build the package from source and this requires &lt;a href=&#34;https://developer.apple.com/xcode/&#34;&gt;Xcode&lt;/a&gt; (&lt;code&gt;xcode-select --install&lt;/code&gt;). Once Xcode is installed, you can run the below code chunk to build &lt;strong&gt;polars&lt;/strong&gt;. The corresponding &lt;code&gt;Makevars&lt;/code&gt; script will download a ~200MB cross-compiled object file, while your machine links and builds the final R package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#34;remotes&#34;)&#xA;&#xA;remotes::install_github(&#xA;  &#34;https://github.com/pola-rs/r-polars&#34;,&#xA;  ref = &#34;long_arms64&#34;, force =TRUE&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/pola-rs/r-polars/issues&#34;&gt;file an issue&lt;/a&gt; if you require a different target or operating system build. Finally, see the bottom of this README for details on how to install rust to build from source (only relevant for developers, or users of unsupported operating systems).&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart example&lt;/h2&gt; &#xA;&lt;p&gt;The introductory vignette (&lt;code&gt;vignette(&#34;polars&#34;)&lt;/code&gt;) contains a series of detailed examples. But here is a quick illustration of &lt;strong&gt;polars&lt;/strong&gt; in action.&lt;/p&gt; &#xA;&lt;p&gt;Start by loading the package and creating a Polars &lt;code&gt;DataFrame&lt;/code&gt; object. Similar to the Python implementation, note that we use the &lt;code&gt;pl$&lt;/code&gt; prefix to specify a Polars constructor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(polars)&#xA;&#xA;dat = pl$DataFrame(mtcars)&#xA;dat&#xA;#&amp;gt; polars DataFrame: shape: (32, 11)&#xA;#&amp;gt; ┌──────┬─────┬───────┬───────┬─────┬─────┬─────┬──────┬──────┐&#xA;#&amp;gt; │ mpg  ┆ cyl ┆ disp  ┆ hp    ┆ ... ┆ vs  ┆ am  ┆ gear ┆ carb │&#xA;#&amp;gt; │ ---  ┆ --- ┆ ---   ┆ ---   ┆     ┆ --- ┆ --- ┆ ---  ┆ ---  │&#xA;#&amp;gt; │ f64  ┆ f64 ┆ f64   ┆ f64   ┆     ┆ f64 ┆ f64 ┆ f64  ┆ f64  │&#xA;#&amp;gt; ╞══════╪═════╪═══════╪═══════╪═════╪═════╪═════╪══════╪══════╡&#xA;#&amp;gt; │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ ... ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │&#xA;#&amp;gt; │ 21.0 ┆ 6.0 ┆ 160.0 ┆ 110.0 ┆ ... ┆ 0.0 ┆ 1.0 ┆ 4.0  ┆ 4.0  │&#xA;#&amp;gt; │ 22.8 ┆ 4.0 ┆ 108.0 ┆ 93.0  ┆ ... ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 1.0  │&#xA;#&amp;gt; │ 21.4 ┆ 6.0 ┆ 258.0 ┆ 110.0 ┆ ... ┆ 1.0 ┆ 0.0 ┆ 3.0  ┆ 1.0  │&#xA;#&amp;gt; │ ...  ┆ ... ┆ ...   ┆ ...   ┆ ... ┆ ... ┆ ... ┆ ...  ┆ ...  │&#xA;#&amp;gt; │ 15.8 ┆ 8.0 ┆ 351.0 ┆ 264.0 ┆ ... ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 4.0  │&#xA;#&amp;gt; │ 19.7 ┆ 6.0 ┆ 145.0 ┆ 175.0 ┆ ... ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 6.0  │&#xA;#&amp;gt; │ 15.0 ┆ 8.0 ┆ 301.0 ┆ 335.0 ┆ ... ┆ 0.0 ┆ 1.0 ┆ 5.0  ┆ 8.0  │&#xA;#&amp;gt; │ 21.4 ┆ 4.0 ┆ 121.0 ┆ 109.0 ┆ ... ┆ 1.0 ┆ 1.0 ┆ 4.0  ┆ 2.0  │&#xA;#&amp;gt; └──────┴─────┴───────┴───────┴─────┴─────┴─────┴──────┴──────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once our Polars DataFrame has been created, we can chain together a series of data manipulations as part of the same query. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dat$filter(&#xA;  pl$col(&#34;cyl&#34;)&amp;gt;=6&#xA;)$groupby(&#xA;  &#34;cyl&#34;, &#34;am&#34;&#xA;)$agg(&#xA;  pl$col(&#34;mpg&#34;)$mean()$alias(&#34;mean_mpg&#34;),&#xA;  pl$col(&#34;hp&#34;)$median()$alias(&#34;med_hp&#34;)&#xA;)&#xA;#&amp;gt; polars DataFrame: shape: (4, 4)&#xA;#&amp;gt; ┌─────┬─────┬───────────┬────────┐&#xA;#&amp;gt; │ cyl ┆ am  ┆ mean_mpg  ┆ med_hp │&#xA;#&amp;gt; │ --- ┆ --- ┆ ---       ┆ ---    │&#xA;#&amp;gt; │ f64 ┆ f64 ┆ f64       ┆ f64    │&#xA;#&amp;gt; ╞═════╪═════╪═══════════╪════════╡&#xA;#&amp;gt; │ 6.0 ┆ 1.0 ┆ 20.566667 ┆ 110.0  │&#xA;#&amp;gt; │ 6.0 ┆ 0.0 ┆ 19.125    ┆ 116.5  │&#xA;#&amp;gt; │ 8.0 ┆ 0.0 ┆ 15.05     ┆ 180.0  │&#xA;#&amp;gt; │ 8.0 ┆ 1.0 ┆ 15.4      ┆ 299.5  │&#xA;#&amp;gt; └─────┴─────┴───────────┴────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above is an example of Polars’ eager execution engine. But for maximum performance, it is preferable to use Polars’ lazy execution mode, which allows the package to apply additional query optimizations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ldat = dat$lazy()&#xA;&#xA;ldat$filter(&#xA;  pl$col(&#34;cyl&#34;)&amp;gt;=6&#xA;)$groupby(&#xA;  &#34;cyl&#34;, &#34;am&#34;&#xA;)$agg(&#xA;  pl$col(&#34;mpg&#34;)$mean()$alias(&#34;mean_mpg&#34;),&#xA;  pl$col(&#34;hp&#34;)$median()$alias(&#34;med_hp&#34;)&#xA;)$collect()&#xA;#&amp;gt; polars DataFrame: shape: (4, 4)&#xA;#&amp;gt; ┌─────┬─────┬───────────┬────────┐&#xA;#&amp;gt; │ cyl ┆ am  ┆ mean_mpg  ┆ med_hp │&#xA;#&amp;gt; │ --- ┆ --- ┆ ---       ┆ ---    │&#xA;#&amp;gt; │ f64 ┆ f64 ┆ f64       ┆ f64    │&#xA;#&amp;gt; ╞═════╪═════╪═══════════╪════════╡&#xA;#&amp;gt; │ 6.0 ┆ 1.0 ┆ 20.566667 ┆ 110.0  │&#xA;#&amp;gt; │ 6.0 ┆ 0.0 ┆ 19.125    ┆ 116.5  │&#xA;#&amp;gt; │ 8.0 ┆ 0.0 ┆ 15.05     ┆ 180.0  │&#xA;#&amp;gt; │ 8.0 ┆ 1.0 ┆ 15.4      ┆ 299.5  │&#xA;#&amp;gt; └─────┴─────┴───────────┴────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome!&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps required for an example contribution, where we are implementing the &lt;a href=&#34;https://rpolars.github.io/reference/Expr_cos.html&#34;&gt;cosine expression&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up the &lt;a href=&#34;https://pola-rs.github.io/polars/py-polars/html/reference/expressions/api/polars.Expr.cos.html&#34;&gt;polars.Expr.cos method in py-polars documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press the &lt;code&gt;[source]&lt;/code&gt; button to see the &lt;a href=&#34;https://github.com/pola-rs/polars/raw/master/py-polars/polars/internals/expr/expr.py#L5057-L5079&#34;&gt;Python impl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Find the cos &lt;a href=&#34;https://github.com/pola-rs/polars/raw/a1afbc4b78f5850314351f7e85ded95fd68b6453/py-polars/src/lazy/dsl.rs#L418&#34;&gt;py-polars rust implementation&lt;/a&gt; (likely just a simple call to the Rust-Polars API)&lt;/li&gt; &#xA; &lt;li&gt;Adapt the Rust part and place it &lt;a href=&#34;https://github.com/pola-rs/r-polars/raw/c56c49a6fc172685f50c15fffe3d14231297ad97/src/rust/src/rdataframe/rexpr.rs#L754&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Adapt the Python frontend syntax to R and place it &lt;a href=&#34;https://github.com/pola-rs/r-polars/raw/c56c49a6fc172685f50c15fffe3d14231297ad97/R/expr__expr.R#L3138&#34;&gt;here&lt;/a&gt;. Add the roxygen docs + examples above.&lt;/li&gt; &#xA; &lt;li&gt;Notice we use &lt;code&gt;Expr_cos = &#34;use_extendr_wrapper&#34;&lt;/code&gt;, it means we’re just using unmodified the &lt;a href=&#34;https://github.com/pola-rs/r-polars/raw/c56c49a6fc172685f50c15fffe3d14231297ad97/R/extendr-wrappers.R#L253&#34;&gt;extendr auto-generated wrapper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write a test &lt;a href=&#34;https://github.com/pola-rs/r-polars/raw/c56c49a6fc172685f50c15fffe3d14231297ad97/tests/testthat/test-expr.R#L1921&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;renv::restore()&lt;/code&gt; and resolve all R packages&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;rextendr::document()&lt;/code&gt; to recompile and confirm the added method functions as intended, e.g.&amp;nbsp;&lt;code&gt;pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(&#34;a&#34;)$cos())&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;devtools::test()&lt;/code&gt;. See below for how to set up your development environment correctly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that PRs to &lt;strong&gt;polars&lt;/strong&gt; will be automatically be built and tested on all platforms as part of our GitHub Actions workflow. A more detailed description of the development environment and workflow for local builds is provided below.&lt;/p&gt; &#xA;&lt;h3&gt;Development environment and workflow&lt;/h3&gt; &#xA;&lt;h4&gt;System dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Rust toolchain&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://rustup.rs/&#34;&gt;&lt;code&gt;rustup&lt;/code&gt;&lt;/a&gt;, the cross-platform Rust installer. Then:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rustup toolchain install nightly&#xA;rustup default nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows: Make sure the latest version of &lt;a href=&#34;https://cran.r-project.org/bin/windows/Rtools/&#34;&gt;Rtools&lt;/a&gt; is installed and on your PATH.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MacOS: Make sure &lt;a href=&#34;https://developer.apple.com/support/xcode/&#34;&gt;&lt;code&gt;Xcode&lt;/code&gt;&lt;/a&gt; is installed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://cmake.org/&#34;&gt;CMake&lt;/a&gt; and added it to your PATH.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Development workflow&lt;/h4&gt; &#xA;&lt;p&gt;Assuming the system dependencies have been met (above), the typical &lt;strong&gt;polars&lt;/strong&gt; development workflow is as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Fork the &lt;strong&gt;polars&lt;/strong&gt; repo on GitHub and then clone it locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:&amp;lt;YOUR-GITHUB-ACCOUNT&amp;gt;/r-polars.git&#xA;cd r-polars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Build the package and install the suggested package dependencies.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Option A: Using &lt;strong&gt;devtools&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;Rscript -e &#39;devtools::install(pkg = &#34;.&#34;, dependencies = TRUE)&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Option B: Using &lt;strong&gt;renv&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Rscript -e &#39;install.packages(&#34;renv&#34;)&#39;&#xA;Rscript -e &#39;renv::activate(); renv::restore()&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Make your proposed changes to the R and/or Rust code. Don’t forget to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rextendr::document() # compile Rust code + update wrappers &amp;amp; docs&#xA;devtools::test()     # run all unit tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4 (optional):&lt;/strong&gt; Build the package locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;R CMD INSTALL --no-multiarch --with-keep.source polars&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Commit your changes and submit a PR to the main &lt;strong&gt;polars&lt;/strong&gt; repo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As aside, notice that &lt;code&gt;./renv.lock&lt;/code&gt; sets all R packages during the server build.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt; To speed up the local R CMD check, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::check(&#xA;  env_vars = list(RPOLARS_RUST_SOURCE=&#34;/YOUR/OWN/ABSOLUTE/PATH/r-polars/src/rust&#34;),&#xA;  check_dir = &#34;./check/&#34;&#xA;  )&#xA;source(&#34;./inst/misc/filter_rcmdcheck.R&#34;)&#xA;Sys.sleep(5)&#xA;unlink(&#34;check&#34;,recursive = TRUE, force =TRUE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;RPOLARS_RUST_SOURCE&lt;/code&gt; environment variable allows &lt;strong&gt;polars&lt;/strong&gt; to recover the Cargo cache even if source files have been moved. Replace with your own absolute path to your local clone!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filter_rcmdcheck.R&lt;/code&gt; removes known warnings from final check report.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unlink(&#34;check&#34;)&lt;/code&gt; cleans up.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>satijalab/seurat-data</title>
    <updated>2023-04-16T02:03:18Z</updated>
    <id>tag:github.com,2023-04-16:/satijalab/seurat-data</id>
    <link href="https://github.com/satijalab/seurat-data" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dataset distribution for Seurat&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SeuratData&lt;/h1&gt; &#xA;&lt;p&gt;SeuratData is a mechanism for distributing datasets in the form of &lt;a href=&#34;https://satijalab.org/seurat&#34;&gt;Seurat&lt;/a&gt; objects using R&#39;s internal package and data management systems. It represents an easy way for users to get access to datasets that are used in the Seurat vignettes.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Installation of SeuratData can be accomplished through &lt;a href=&#34;https://cran.r-project.org/package=devtools&#34;&gt;devtools&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;devtools::install_github(&#39;satijalab/seurat-data&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;When loading SeuratData, a list of all available datasets will be displayed (this is similar to other metapackages like &lt;a href=&#34;https://cran.r-project.org/package=tidyverse&#34;&gt;tidyverse&lt;/a&gt; along with the version of &lt;a href=&#34;https://satijalab.org/seurat/&#34;&gt;Seurat&lt;/a&gt; used to create each dataset). This message can be suppressed with &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/base/html/message.html&#34;&gt;&lt;code&gt;suppressPackageStartupMessages&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; library(SeuratData)&#xA;── Installed datasets ───────────────────────────────────────────────────────────── SeuratData v0.1.0 ──&#xA;✔ cbmc   3.0.0                                           ✔ panc8  3.0.0&#xA;✔ ifnb   3.0.0                                           ✔ pbmc3k 3.0.0&#xA;&#xA;───────────────────────────────────────────────── Key ──────────────────────────────────────────────────&#xA;✔ Dataset loaded successfully&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see a manifest of all available datasets, use &lt;code&gt;AvailableData&lt;/code&gt;; this manifest will update as new datasets are uploaded to our data repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; AvailableData()&#xA;                     Dataset Version                                                        Summary species            system ncells                                                            tech         notes Installed InstalledVersion&#xA;cbmc.SeuratData         cbmc   3.0.0                   scRNAseq and 13-antibody sequencing of CBMCs   human CBMC (cord blood)   8617                                                        CITE-seq          &amp;lt;NA&amp;gt;      TRUE            3.0.0&#xA;hcabm40k.SeuratData hcabm40k   3.0.0 40,000 Cells From the Human Cell Atlas ICA Bone Marrow Dataset   human       bone marrow  40000                                                          10x v2          &amp;lt;NA&amp;gt;     FALSE            3.0.0&#xA;ifnb.SeuratData         ifnb   3.0.0                              IFNB-Stimulated and Control PBMCs   human              PBMC  13999                                                          10x v1          &amp;lt;NA&amp;gt;      TRUE            3.0.0&#xA;panc8.SeuratData       panc8   3.0.0               Eight Pancreas Datasets Across Five Technologies   human Pancreatic Islets  14892                SMARTSeq2, Fluidigm C1, CelSeq, CelSeq2, inDrops          &amp;lt;NA&amp;gt;      TRUE            3.0.0&#xA;pbmc3k.SeuratData     pbmc3k   3.0.0                                     3k PBMCs from 10X Genomics   human              PBMC   2700                                                          10x v1          &amp;lt;NA&amp;gt;      TRUE            3.0.0&#xA;pbmcsca.SeuratData   pbmcsca   3.0.0           Broad Institute PBMC Systematic Comparative Analysis   human              PBMC  31021 10x v2, 10x v3, SMARTSeq2, Seq-Well, inDrops, Drop-seq, CelSeq2 HCA benchmark     FALSE            3.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installation of datasets can be done with &lt;code&gt;InstallData&lt;/code&gt;; this function will accept either a dataset name (eg. &lt;code&gt;pbmc3k&lt;/code&gt;) or the corresponding package name (eg. &lt;code&gt;pbmc3k.SeuratData&lt;/code&gt;). &lt;code&gt;InstallData&lt;/code&gt; will automatically attach the installed dataset package so one can immediately load and use the dataset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; InstallData(&#34;pbmc3k&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Loading a dataset is done using the &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/utils/html/data.html&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; data(&#34;pbmc3k&#34;)&#xA;&amp;gt; pbmc3k&#xA;An object of class Seurat&#xA;13714 features across 2700 samples within 1 assay&#xA;Active assay: RNA (13714 features)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dataset documentation and information&lt;/h3&gt; &#xA;&lt;p&gt;All datasets provided have help pages built for them. These pages are accessed using the standard &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/utils/html/help.html&#34;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/a&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; ?pbmc3k&#xA;&amp;gt; ?ifnb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A full command list for the steps taken to generate each dataset is present in the examples section of these help pages.&lt;/p&gt; &#xA;&lt;p&gt;Packages will also often have citation information bundled with the package. Citation information can be accessed by passing the &lt;strong&gt;package name&lt;/strong&gt;, not the dataset name, to the &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/utils/html/citation.html&#34;&gt;&lt;code&gt;citation&lt;/code&gt;&lt;/a&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;&amp;gt; citation(&#39;cbmc.SeuratData&#39;)&#xA;&#xA;To cite the CBMC dataset, please use:&#xA;&#xA;  Stoeckius et al. Simultaneous epitope and transcriptome measurement in&#xA;  single cells. Nature Methods (2017)&#xA;&#xA;A BibTeX entry for LaTeX users is&#xA;&#xA;  @Article{,&#xA;    author = {Marlon Stoeckius and Christoph Hafemeister and William Stephenson and Brian Houck-Loomis and Pratip K Chattopadhyay and Harold Swerdlow and Rahul Satija and Peter Smibert},&#xA;    title = {Simultaneous epitope and transcriptome measurement in single cells},&#xA;    journal = {Nature Methods},&#xA;    year = {2017},&#xA;    doi = {10.1038/nmeth.4380},&#xA;    url = {https://www.nature.com/articles/nmeth.4380},&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rationale and Implementation&lt;/h3&gt; &#xA;&lt;p&gt;We created SeuratData in order to distribute datasets for &lt;a href=&#34;https://satijalab.org/seurat/get_started.html&#34;&gt;Seurat&lt;/a&gt; &lt;a href=&#34;https://satijalab.org/seurat/frv.html&#34;&gt;vignettes&lt;/a&gt; in as painless and reproducible a way as possible. We also wanted to give users the flexibility to selectively install and load datasets of interest, to minimize disk storage and memory use.&lt;/p&gt; &#xA;&lt;p&gt;To accomplish this, we opted to distribute datasets through individual R packages. Under the hood, SeuratData uses and extends standard R functions, such as &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/utils/html/install.packages.html&#34;&gt;&lt;code&gt;install.packages&lt;/code&gt;&lt;/a&gt; for dataset installation, &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/utils/html/available.packages.html&#34;&gt;&lt;code&gt;available.packages&lt;/code&gt;&lt;/a&gt; for dataset listing, and &lt;a href=&#34;https://stat.ethz.ch/R-manual/R-devel/library/utils/html/data.html&#34;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; for dataset loading.&lt;/p&gt; &#xA;&lt;p&gt;SeuratData therefore serves as a more specific package manager (similar to a metapackage) for R. We provide wrappers around R&#39;s package management functions, &lt;a href=&#34;https://github.com/satijalab/seurat-data/#getting-started&#34;&gt;extend them to provide relevant metadata&lt;/a&gt; about each dataset, and set default settings (for example, the repository where data is stored) to facilitate easy installation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haven-jeon/knitr_example</title>
    <updated>2023-04-16T02:03:18Z</updated>
    <id>tag:github.com,2023-04-16:/haven-jeon/knitr_example</id>
    <link href="https://github.com/haven-jeon/knitr_example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;knitr example&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;knitr 소개 문서&lt;/h1&gt; &#xA;&lt;p&gt;knitr 소개를 위한 문서 작성 및 연습&lt;/p&gt;</summary>
  </entry>
</feed>