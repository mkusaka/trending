<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-03T02:25:04Z</updated>
  <subtitle>Weekly Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tuhdo/os01</title>
    <updated>2022-07-03T02:25:04Z</updated>
    <id>tag:github.com,2022-07-03:/tuhdo/os01</id>
    <link href="https://github.com/tuhdo/os01" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bootstrap yourself to write an OS from scratch. A book for self-learner.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=tuhdo1710%40gmail%2ecom&amp;amp;lc=VN&amp;amp;item_number=tuhdo&amp;amp;currency_code=USD&amp;amp;bn=PP%2dDonationsBF%3aDonate%2dPayPal%2dgreen%2esvg%3aNonHosted&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://tuhdo.github.io/os01/&#34;&gt;Operating Systems: From 0 to 1&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This book helps you gain the foundational knowledge required to write an operating system from scratch. Hence the title, 0 to 1.&lt;/p&gt; &#xA;&lt;p&gt;After completing this book, at the very least you will learn:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How to write an operating system from scratch by reading hardware datasheets. In the real world, it works like that. You won&#39;t be able to consult Google for a quick answer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A big picture of how each layer of a computer is related to the other, from hardware to software.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write code independently. It&#39;s pointless to copy and paste code. Real learning happens when you solve problems on your own. Some examples are given to kick start, but most problems are yours to conquer. However, the solutions are available online for you to examine after giving it a good try.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux as a development environment and how to use common tools for low-level programming.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;x86 assembly in-depth.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How a program is structured so that an operating system can run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How to debug a program running directly on hardware with gdb and QEMU.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linking and loading on bare metal x86_64, with pure C. No standard library. No runtime overhead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tuhdo/os01/raw/master/Operating_Systems_From_0_to_1.pdf&#34;&gt;Download the book&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;The pedagogy of the book&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You give a poor man a fish and you feed him for a day. You teach him to fish and you give him an occupation that will feed him for a lifetime.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This has been the guiding principle of the book when I was writing it. The book does not try to teach you everything, but enough to enable you to learn by yourself. The book itself, at this point, is quite &#34;complete&#34;: once you master part 1 and part 2 (which consist of 8 chapters), you can drop the book and learn by yourself. At this point, smart readers should be able to continue on their own. For example, they can continue their journeys on &lt;a href=&#34;http://wiki.osdev.org/Main_Page&#34;&gt;OSDev wiki&lt;/a&gt;; in fact, after you study everything in part 1 and part 2, you only meet the &lt;a href=&#34;http://wiki.osdev.org/Required_Knowledge&#34;&gt;minimum requirement&lt;/a&gt; by OSDev Wiki (well, not quite, the book actually goes deeper for the suggested topics). Or, if you consider developing an OS for fun is impractical, you can continue with a Linux-specific book, such as this free book &lt;a href=&#34;https://0xax.gitbooks.io/linux-insides/content/&#34;&gt;Linux Insides&lt;/a&gt;, or other popular Linux kernel books. The book tries hard to provide you a strong foundation, and that&#39;s why part 1 and part 2 were released first.&lt;/p&gt; &#xA;&lt;p&gt;The book teaches you core concepts, such as x86 Assembly, ELF, linking and debugging on bare metal, etc., but more importantly, where such information come from. For example, instead of just teaching x86 Assembly, it also teaches how to use reference manuals from Intel. Learning to read the official manuals is important because only the hardware manufacturers themselves understand how their hardware work. If you only learn from the secondary resources because it is easier, you will never gain a complete understanding of the hardware you are programming for. Have you ever read a book on Assembly, and wondered where all the information came from? How does the author know everything he says is correct? And how one seems to magically know so much about hardware programming? This book gives pointers to such questions.&lt;/p&gt; &#xA;&lt;p&gt;As an example, you should skim through chapter 4, &#34;x86 Assembly and C&#34;, to see how it makes use of the Intel manual, Volume 2. And in the process, it guides you how to use the official manuals.&lt;/p&gt; &#xA;&lt;p&gt;Part 3 is planned as a series of specifications that a reader will implement to complete each operating system component. It does not contain code aside from a few examples. Part 3 is just there to shorten the reader&#39;s time when reading the official manuals by giving hints where to read, explaining difficult concepts and how to use the manuals to debug. In short, the implementation is up to the reader to work on his or her own; the chapters are just like university assignments.&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Know some circuit concepts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic Concepts of Electricity: atoms, electrons, protons, neutrons, current flow.&lt;/li&gt; &#xA; &lt;li&gt;Ohm&#39;s law&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, if you know absolutely nothing about electricity, you can quickly learn it here: &lt;a href=&#34;http://www.allaboutcircuits.com/textbook/&#34;&gt;http://www.allaboutcircuits.com/textbook/&lt;/a&gt;, by reading chapter 1 and chapter 2.&lt;/p&gt; &#xA;&lt;p&gt;C programming. In particular:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Variable and function declarations/definitions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;While and for loops&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pointers and function pointers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fundamental algorithms and data structures in C&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Linux basics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Know how to navigate directory with the command line&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Know how to invoke a command with options&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Know how to pipe output to another program&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Touch typing. Since we are going to use Linux, touch typing helps. I know typing speed does not relate to problem-solving, but at least your typing speed should be fast enough not to let it get it the way and degrade the learning experience.&lt;/p&gt; &#xA;&lt;p&gt;In general, I assume that the reader has basic C programming knowledge, and can use an IDE to build and run a program.&lt;/p&gt; &#xA;&lt;h1&gt;Status:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Part 1&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chapter 1: Complete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 2: Complete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 3: Almost. Currently, the book relies on the Intel Manual for fully explaining x86 execution environment.&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 4: Complete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 5: Complete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 6: Complete&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Part 2&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chapter 7: Complete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 8: Complete&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Part 3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chapter 9: Incomplete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 10: Incomplete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 11: Incomplete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 12: Incomplete&lt;/li&gt; &#xA;   &lt;li&gt;Chapter 13: Incomplete&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;... and future chapters not included yet ...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the future, I hope to expand part 3 to cover more than the first 2 parts. But for the time being, I will try to finish the above chapters first.&lt;/p&gt; &#xA;&lt;h1&gt;Sample OS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tuhdo/sample-os&#34;&gt;This repository&lt;/a&gt; is the sample OS of the book that is intended as a reference material for part 3. It covers 10 chapters of the &#34;System Programming Guide&#34; (Intel Manual Volume 3), along with a simple keyboard and video driver for input and output. However, at the moment, only the following features are implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Protected mode.&lt;/li&gt; &#xA; &lt;li&gt;Creating and managing processes with TSS (Task State Structure).&lt;/li&gt; &#xA; &lt;li&gt;Interrupts&lt;/li&gt; &#xA; &lt;li&gt;LAPIC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Paging and I/O are not yet implemented. I will try to implement it as the book progresses.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you find any grammatical issues, please report it using Github Issues. Or, if some sentence or paragraph is difficult to understand, feel free to open an issue with the following title format: &lt;code&gt;[page number][type] Descriptive Title&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;[pg.9][grammar] Incorrect verb usage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;type&lt;/code&gt; can be one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Typo&lt;/code&gt;: indicates typing mistake.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Grammar&lt;/code&gt;: indicates incorrect grammar usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Style&lt;/code&gt;: indicates a style improvement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Content&lt;/code&gt;: indicates problems with the content.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Even better, you can make a pull request with the provided book source. The main content of the book is in the file &#34;Operating Systems: From 0 to 1.lyx&#34;. You can edit the .txt file, then I will integrate the changes manually. It is a workaround for now since Lyx can cause a huge diff which makes it impossible to review changes.&lt;/p&gt; &#xA;&lt;p&gt;The book is in development, so please bear with me if the English irritates you. I really appreciate it.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you like the project and if it is possible, please donate to help this project and keep it going.&lt;/p&gt; &#xA;&lt;h1&gt;Got questions?&lt;/h1&gt; &#xA;&lt;p&gt;If you have any question related to the material or the development of the book, feel free to &lt;a href=&#34;https://github.com/tuhdo/os01/issues/new&#34;&gt;open a Github issue&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aaronwangy/Data-Science-Cheatsheet</title>
    <updated>2022-07-03T02:25:04Z</updated>
    <id>tag:github.com,2022-07-03:/aaronwangy/Data-Science-Cheatsheet</id>
    <link href="https://github.com/aaronwangy/Data-Science-Cheatsheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A helpful 5-page machine learning cheatsheet to assist with exam reviews, interview prep, and anything in-between.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Data Science Cheatsheet 2.0&lt;/h1&gt; &#xA;&lt;p&gt;A helpful 5-page data science cheatsheet to assist with exam reviews, interview prep, and anything in-between. It covers over a semester of introductory machine learning, and is based on MIT&#39;s Machine Learning courses 6.867 and 15.072. The reader should have at least a basic understanding of statistics and linear algebra, though beginners may find this resource helpful as well.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by Maverick&#39;s &lt;em&gt;Data Science Cheatsheet&lt;/em&gt; (hence the 2.0 in the name), located &lt;a href=&#34;https://github.com/ml874/Data-Science-Cheatsheet&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Topics covered:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linear and Logistic Regression&lt;/li&gt; &#xA; &lt;li&gt;Decision Trees and Random Forest&lt;/li&gt; &#xA; &lt;li&gt;SVM&lt;/li&gt; &#xA; &lt;li&gt;K-Nearest Neighbors&lt;/li&gt; &#xA; &lt;li&gt;Clustering&lt;/li&gt; &#xA; &lt;li&gt;Boosting&lt;/li&gt; &#xA; &lt;li&gt;Dimension Reduction (PCA, LDA, Factor Analysis)&lt;/li&gt; &#xA; &lt;li&gt;Natural Language Processing&lt;/li&gt; &#xA; &lt;li&gt;Neural Networks&lt;/li&gt; &#xA; &lt;li&gt;Recommender Systems&lt;/li&gt; &#xA; &lt;li&gt;Reinforcement Learning&lt;/li&gt; &#xA; &lt;li&gt;Anomaly Detection&lt;/li&gt; &#xA; &lt;li&gt;Time Series&lt;/li&gt; &#xA; &lt;li&gt;A/B Testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This cheatsheet will be occasionally updated with new/improved info, so consider a follow or star to stay up to date.&lt;/p&gt; &#xA;&lt;p&gt;Future additions (ideas welcome):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;Time Series&lt;/del&gt; Added!&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Statistics and Probability&lt;/del&gt; Added!&lt;/li&gt; &#xA; &lt;li&gt;Data Imputation&lt;/li&gt; &#xA; &lt;li&gt;Generative Adversarial Networks&lt;/li&gt; &#xA; &lt;li&gt;Graph Neural Networks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aaronwangy/Data-Science-Cheatsheet/raw/main/Data_Science_Cheatsheet.pdf&#34;&gt;Data Science Cheatsheet 2.0 PDF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Here are screenshots of a couple pages - the link to the full cheatsheet is above!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aaronwangy/Data-Science-Cheatsheet/main/images/page1-1.png?raw=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aaronwangy/Data-Science-Cheatsheet/main/images/page2-1.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Why is Python/SQL not covered in this cheatsheet?&lt;/h3&gt; &#xA;&lt;p&gt;I planned for this resource to cover mainly algorithms, models, and concepts, as these rarely change and are common throughout industries. Technical languages and data structures often vary by job function, and refreshing these skills may make more sense on keyboard than on paper.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to share this resource in classes, review sessions, or to anyone who might find it helpful :)&lt;/p&gt; &#xA;&lt;p&gt;This work is licensed under the &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Images are used for educational purposes, created by me, or borrowed from my colleagues &lt;a href=&#34;https://stanford.edu/~shervine/teaching/cs-229/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to suggest comments, updates, and potential improvements!&lt;/p&gt; &#xA;&lt;p&gt;Author - &lt;a href=&#34;https://www.linkedin.com/in/axw/&#34;&gt;Aaron Wang&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to support this cheatsheet, you can buy me a coffee &lt;a href=&#34;https://www.paypal.me/aaxw&#34;&gt;here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AllenDowney/ThinkPython2</title>
    <updated>2022-07-03T02:25:04Z</updated>
    <id>tag:github.com,2022-07-03:/AllenDowney/ThinkPython2</id>
    <link href="https://github.com/AllenDowney/ThinkPython2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LaTeX source and supporting code for Think Python, 2nd edition, by Allen Downey.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ThinkPython&lt;/h1&gt; &#xA;&lt;p&gt;LaTeX source, code examples, and exercise solutions for Think Python, 2nd edition, by Allen Downey.&lt;/p&gt; &#xA;&lt;p&gt;You can download this book in PDF from &lt;a href=&#34;http://greenteapress.com/wp/think-python-2e/&#34;&gt;Green Tea Press&lt;/a&gt; or buy it in paper and other formats from &lt;a href=&#34;http://shop.oreilly.com/product/0636920045267.do&#34;&gt;O&#39;Reilly Media&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the book from source you will need a LaTeX installion. I recommend the TeX Live distribution with the following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;texlive-latex-base&lt;/li&gt; &#xA; &lt;li&gt;texlive-latex-extra&lt;/li&gt; &#xA; &lt;li&gt;texlive-fonts-recommended&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>