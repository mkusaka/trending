<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:42:45Z</updated>
  <subtitle>Weekly Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gavofyork/graypaper</title>
    <updated>2024-04-28T01:42:45Z</updated>
    <id>tag:github.com,2024-04-28:/gavofyork/graypaper</id>
    <link href="https://github.com/gavofyork/graypaper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The JAM Specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Graypaper: The JAM Specification&lt;/h1&gt; &#xA;&lt;p&gt;The description and formal specification of the Jam protocol, a potential successor to the Polkadot Relay chain.&lt;/p&gt; &#xA;&lt;p&gt;Build with xelatex.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://graypaper.com/&#34;&gt;https://graypaper.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Remaining for v0.1&lt;/h2&gt; &#xA;&lt;h3&gt;Content&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Rewards. WAITING ON AL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Finesse&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make all subscript names capitalized.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ensure all definitions are referenced.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Link and integrate to Bandersnatch RingVRF references (Davide/Syed) IN-PROGRESS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; All &#34;where&#34; and &#34;let&#34; lines are unnumbered/integrated&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remove any &#34;TODOs&#34; in text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Remaining for v0.2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Define Erasure Coding proof means &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Define binary Merkle proof-generation function which compiles neighbours down to leaf.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Define binary Merkle proof-verification function exists sequence of values which contains our value and Merklised to some root.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve audit spec &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Announcement signatures&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; How to build perspective on other validators with announcements&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Discussion and Conclusions/Further Work &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Security assumptions: redirect to ELVES paper&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Creating a parachains service: further work (RFC for upgrade perhaps) &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Key differences &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; limited size of Work Output vs unlimited candidate receipt&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Laissez-faire on Work Items vs requirement for valid transition&lt;/li&gt; &#xA;       &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hermit relay (staking &amp;amp;c is on system chains)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Supporting liveness&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Supporting *MP&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No need for UMP/DMP&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Compare with danksharding v1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Deeper talk Cost &amp;amp; latency comparison with RISC0-VM and latest ZK stuff.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stuff to replicate to PolkaJam&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beefy root and accumulate-result hash.&lt;/li&gt; &#xA; &lt;li&gt;Judgements&lt;/li&gt; &#xA; &lt;li&gt;Using posterior assignments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ideas to consider&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;optional &lt;code&gt;on_report&lt;/code&gt; entry point&lt;/li&gt; &#xA; &lt;li&gt;Remove assignments from state - no need for it to be there as it&#39;s derivable from $\eta_2$ alone.&lt;/li&gt; &#xA; &lt;li&gt;Work Package should be Merklized on pre-stated boundary points. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add BoundedVec&amp;lt;(ServiceId, u32, u32), MAX_POINTS&amp;gt; to WorkPackage&lt;/li&gt; &#xA;   &lt;li&gt;Construct Merkle trie for Work Package and put root in IsAuthorized&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Think harder about if the recent blocks, availability timeouts &amp;amp; anchor stuff is affected by using timeslot rather than height.&lt;/li&gt; &#xA; &lt;li&gt;Make memo bounded, rather than fixed.&lt;/li&gt; &#xA; &lt;li&gt;Lookup anchor: maybe it should be 48 hours since lookup anchor can already be up to 24 hours after reporting and we want something available up to 24 hours after that?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extra DA&lt;/h3&gt; &#xA;&lt;p&gt;DA lasts 28 days instead of 24h.&lt;/p&gt; &#xA;&lt;p&gt;WP has additional field &lt;code&gt;manifest: Vec&amp;lt;ManifestEntry&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;struct Commitment {&#xA;  hash: Hash,&#xA;  len: u32,&#xA;  erasure_root: Hash,&#xA;}&#xA;type CommitmentTreeRoot = Hash; //binary Merkle tree of `Commitment` leaves&#xA;struct HashCommitment {&#xA;  len: u32,&#xA;  hash: Hash,&#xA;}&#xA;enum PackageManifestEntry {&#xA;  Export(Vec&amp;lt;u8&amp;gt;),&#xA;  Import(Commitment),&#xA;  Renew(Commitment),&#xA;  ExportCache(Vec&amp;lt;u8&amp;gt;),&#xA;  ImportCache(Hash),&#xA;  RenewCache { len: u32, hash: Hash },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WR specification has extra field of type &lt;code&gt;manifest_root: CommitmentTreeRoot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Affinity for validator indexes minimizes renewal xfer costs.&lt;/p&gt; &#xA;&lt;p&gt;Guarantor ECs WP, each proc-export/export/renewal; checks each import chunk is available for &amp;gt; 8h and fetches. Guarantor distributes chunks of proc-exports/exports/renewals. Auditor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;downloads/reconstitutes WP and all nodes of &lt;code&gt;manifest_root&lt;/code&gt; and downloads/reconstitutes all exports/renewals.&lt;/li&gt; &#xA; &lt;li&gt;ECs WP/exports/renewals&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Guaranteeing involves:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetching/Reconstucting all Imports &amp;amp; Renews&lt;/li&gt; &#xA; &lt;li&gt;Fetching all ImportCaches &amp;amp; RenewCaches&lt;/li&gt; &#xA; &lt;li&gt;Executing&lt;/li&gt; &#xA; &lt;li&gt;ErasureCoding all Exports &amp;amp; GenExports &amp;amp; Renews&lt;/li&gt; &#xA; &lt;li&gt;Distributing chunks of all Exports &amp;amp; GenExports &amp;amp; Renews&lt;/li&gt; &#xA; &lt;li&gt;Hashing all ExportCaches &amp;amp; GenExportCaches&lt;/li&gt; &#xA; &lt;li&gt;Distributing data of all ExportCaches &amp;amp; GenExportCaches &amp;amp; RenewCaches&lt;/li&gt; &#xA; &lt;li&gt;Merklizing ErasureRoots/Hashes to create WR&#39;s &lt;code&gt;manifest_root&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Auditing involves (10 of):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetching/Reconstucting all Exports, Imports &amp;amp; Renews&lt;/li&gt; &#xA; &lt;li&gt;Fetching all ExportCaches &amp;amp; RenewCaches&lt;/li&gt; &#xA; &lt;li&gt;ErasureCoding all Exports (Renews &amp;amp; Imports should already be audited)&lt;/li&gt; &#xA; &lt;li&gt;Executing&lt;/li&gt; &#xA; &lt;li&gt;ErasureCoding all GenExports&lt;/li&gt; &#xA; &lt;li&gt;Hashing all GenExportCaches&lt;/li&gt; &#xA; &lt;li&gt;Merklizing ErasureRoots/Hashes to verify WR&#39;s &lt;code&gt;manifest_root&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;refine&lt;/code&gt; has new host-call:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;export(payload: &amp;amp;[u8], cache: bool)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Calling this introduces an additional node in the manifest tree (&lt;code&gt;manifest_root&lt;/code&gt;), iff the overall manifest size is constraints would break then the call fails. The WP does not become invalid.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;refine&lt;/code&gt; has new argument:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;, manifest_payloads: Vec&amp;lt;(Hash, Vec&amp;lt;u8&amp;gt;)&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;const BASE: u32 = 2048; // Example - might be less.&lt;/p&gt; &#xA;&lt;p&gt;let dist = |WP| + SUM_{Export(payload) in M}(payload.len() + BASE) + SUM_{Renew(c) in M}(c.len + BASE) + SUM_{ExportCache(c) in M}(c.len() * 341 + BASE) + SUM_{RenewCache{len, ..} in M}(len * 341 + BASE)&lt;/p&gt; &#xA;&lt;p&gt;let ecode = |WP| + SUM_{Export(payload) in M}(payload.len() + BASE) + SUM_{Renew(c) in M}(c.len + BASE) + SUM_{ExportCache(c) in M}(c.len() * 341 + BASE) + SUM_{RenewCache{len, ..} in M}(len * 341 + BASE) let reco = |WP| + SUM_{Import(c) in M, Renew(c) in M}(c.len + BASE)&lt;/p&gt; &#xA;&lt;p&gt;WP is valid iff: max(dist, reco) &amp;lt;= 8MB WP is available iff: all imports are in DA now and will still be in DA 8 hours from now&lt;/p&gt; &#xA;&lt;h2&gt;Additional work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proper gas schedule.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Networking protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Off-chain sub-protocols: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better integration to Grandpa&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better description of Beefy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Full definition of Bandersnatch RingVRF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Independent definition of PVM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; PVM: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Aux registers?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Move to 64-bit?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; No pages mappable in first 64 KB&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;% No persistent distance between parts as in eth, cos, dot etc&lt;/p&gt; &#xA;&lt;p&gt;% A set of independent, sequential, asynchronously interacting 32-octet state machines each of whose transitions lasts around 2 seconds of webassembly computation if a predetermined and fixed program and whose transition arguments are 5 MB. While well-suited to the verification of substrate blockchains, it is otherwise quite limiting.&lt;/p&gt; &#xA;&lt;h2&gt;Done&lt;/h2&gt; &#xA;&lt;h3&gt;Texty&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit Previous Work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Edit Discussion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Document guide at beginning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Move constants to appendix and define at first use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Context strings for all signatures. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List of all context strings in definitions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remove header items from ST dependency graph where possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update serialization &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; For $\beta$ component $b$ - implement MMR encode.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Additional field: $\rho_g$&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Link and integrate to RISCV references (Jan) HAVE SPEC&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Link and integrate to Beefy signing spec (Syed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Link and integrate to Erasure-Coding references (work with Al)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Grandpa/best-block: Disregard blocks which we believe are equivocated unless finalized.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Other PVM work &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define &lt;code&gt;sbrk&lt;/code&gt; properly:&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update host functions to agreed API.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Figure out what to do with the jump table.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define inner PVM host-calls &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Spec below&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Figure out what the $c_i$/$c_b$ are&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Avoid entry point&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ensure code and jump-table is amalgamated down to VM-spec&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Move host calls to use register index&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update serialization for Judgement extrinsic and judgements state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define Beefy process &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Accumulate: should return Beefy service hash&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define Keccak hash $\mathbb{H}_K$&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Remove Beefy root from header&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Put the Beefy root into recent blocks after computation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Recent blocks should store MMR of roots of tree of accumulated service hashes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define an MMR&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add \textsc{bls} public key to keyset (48 octet).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Specify requirement of validators to sign.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define audit process. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Erasure coding root must be correct&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; This means we cannot assume that the WP hash can be inverted.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Instead, we assume that we can collect 1/3 chunks and combine to produce &lt;em&gt;some&lt;/em&gt; data&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Then we check: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; if that hashes to the WP hash.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; if the erasure-coded chunks merklise into a tree of the given root.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; If so we continue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; NOTE: The above should be done in guarantor stage also.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auditing: Always finish once announced.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Judgements: Should cancel work-report from Rho prior to accumulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Signed judgements should not include guarantor keys; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Judgement extrinsic should use from rho.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Check &#34;Which History&#34; section and ensure it mentions possibility for reversion via judgement. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No reversion beyond finalized&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Of unfinalized extension, not block containing work-reports which appear in the banned-set of any other (valid) block.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prior work and refine/remove the zk argumentation (work with Al)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Disputes state transitioning and extrinsic (work with Al)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Finish Merklization description&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bibliography&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>criwits/missing-pdf</title>
    <updated>2024-04-28T01:42:45Z</updated>
    <id>tag:github.com,2024-04-28:/criwits/missing-pdf</id>
    <link href="https://github.com/criwits/missing-pdf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your Missing Semester of Using Computer | 你缺失的那门计算机课（PDF 版，LaTeX）&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;《你缺失的那门计算机课》PDF 版本&lt;/h1&gt; &#xA;&lt;p&gt;这是《你缺失的那门计算机课》的 PDF 版本 LaTeX 源代码。按照以下步骤来生成 PDF：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;克隆本仓库到你喜欢的地方；&lt;/li&gt; &#xA; &lt;li&gt;将 &lt;code&gt;resource/quote.zip&lt;/code&gt; 中的两个标点映射文件放到&lt;strong&gt;用户 TEXMF 树&lt;/strong&gt;下的 &lt;code&gt;fonts/misc/xetex/fontmapping/xecjk&lt;/code&gt; 目录中；&lt;/li&gt; &#xA; &lt;li&gt;刷新 TeX 发行版的文件名数据库，TeX Live 用户执行 &lt;pre&gt;&lt;code&gt;mktexlsr&#xA;&lt;/code&gt;&lt;/pre&gt; MiKTeX 用户执行 &lt;pre&gt;&lt;code&gt;initexmf --update-fndb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;重复执行两遍 &lt;pre&gt;&lt;code&gt;xelatex -output-driver=&#34;xdvipdfmx -i dvipdfmx-unsafe.cfg -q -E&#34; missing.tex&#xA;&lt;/code&gt;&lt;/pre&gt; 或者直接双击 &lt;code&gt;make.bat&lt;/code&gt; 来生成 PDF 文件。&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>