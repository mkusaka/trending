<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-12T01:39:30Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>UH-AIM/bistable-auxetic-surface-structures</title>
    <updated>2023-10-12T01:39:30Z</updated>
    <id>tag:github.com,2023-10-12:/UH-AIM/bistable-auxetic-surface-structures</id>
    <link href="https://github.com/UH-AIM/bistable-auxetic-surface-structures" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bistable-auxetic-surface-structures&lt;/h1&gt; &#xA;&lt;p&gt;Bistable auxetic surface structures (BASS) is a free and open source application for the generation of the fabrication patterns of morphing structures. BASS allows users to directly specify the shape of a deployed 3D surface, and generates a flat Kirigami pattern that when deployed, transforms to that specified surface. These patterns are 2D in nature and can be fabricated in a number of ways including laser cutting. We used rubber sheets from Trodat (Aero+) and a laser cutter from Trotec (Speedy 360) to physically fabricate the demos.&lt;/p&gt; &#xA;&lt;p&gt;The BASS application is based on the paper, “Bistable auxetic surface structures” by Tian Chen, Julian Panetta, Max Schaubelt and Mark Pauly: &lt;a href=&#34;https://doi.org/10.1145/3450626.3459940&#34;&gt;https://doi.org/10.1145/3450626.3459940&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the design algorithm (using Rhinoceros 3D + grasshopper interface, &lt;a href=&#34;https://www.rhino3d.com/&#34;&gt;https://www.rhino3d.com/&lt;/a&gt;) to generate the cut pattern for user supplied input geometries. It has a number of pre-programmed surfaces for demonstration and fabrication.&lt;/p&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;Boundary first flattening is necessary to pre-process custom input geometries by computing their conformal map: &lt;a href=&#34;https://geometrycollective.github.io/boundary-first-flattening/&#34;&gt;https://geometrycollective.github.io/boundary-first-flattening/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aim.me.uh.edu/&#34;&gt;Tian Chen&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://julianpanetta.com/&#34;&gt;Julian Panetta&lt;/a&gt;&lt;br&gt; [Max Schaubelt]&lt;br&gt; &lt;a href=&#34;https://gcm.epfl.ch/&#34;&gt;Mark Pauly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;The algorithm is described in the paper (see .bib file in the repo):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/UH-AIM/bistable-auxetic-surface-structures/main/%5Bhttps://arxiv.org/abs/1704.06873%5D(https://doi.org/10.1145/3450626.3459940)&#34;&gt;Bistable auxetic surface structures&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; Chen, Panetta, Schaubelt, Pauly&lt;br&gt; ACM Transactions on Graphics&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>jeksterslab/semmcci</title>
    <updated>2023-10-12T01:39:30Z</updated>
    <id>tag:github.com,2023-10-12:/jeksterslab/semmcci</id>
    <link href="https://github.com/jeksterslab/semmcci" rel="alternate"></link>
    <summary type="html">&lt;p&gt;semmcci: Monte Carlo Confidence Intervals in Structural Equation Modeling&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;semmcci&lt;/h1&gt; &#xA;&lt;p&gt;Ivan Jacob Agaloos Pesigan 2023-10-11&lt;/p&gt; &#xA;&lt;!-- README.md is generated from .setup/readme/README.Rmd. Please edit that file --&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/package=semmcci&#34;&gt;&lt;img src=&#34;https://www.r-pkg.org/badges/version/semmcci&#34; alt=&#34;CRAN Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jeksterslab.r-universe.dev&#34;&gt;&lt;img src=&#34;https://jeksterslab.r-universe.dev/badges/semmcci&#34; alt=&#34;R-Universe Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://doi.org/10.3758/s13428-023-02114-4&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.3758/s13428-023-02114-4.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/make.yml&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/make.yml/badge.svg?sanitize=true&#34; alt=&#34;Make Project&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/check-full.yml&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/check-full.yml/badge.svg?sanitize=true&#34; alt=&#34;R-CMD-check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/test-coverage.yml&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/test-coverage.yml/badge.svg?sanitize=true&#34; alt=&#34;R Package Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint R Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/pkgdown-gh-pages.yml&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/pkgdown-gh-pages.yml/badge.svg?sanitize=true&#34; alt=&#34;Package Website (GitHub Pages)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/latex.yml&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/latex.yml/badge.svg?sanitize=true&#34; alt=&#34;Compile LaTeX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/shellcheck.yml&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/shellcheck.yml/badge.svg?sanitize=true&#34; alt=&#34;Shell Check&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/pages/pages-build-deployment&#34;&gt;&lt;img src=&#34;https://github.com/jeksterslab/semmcci/actions/workflows/pages/pages-build-deployment/badge.svg?sanitize=true&#34; alt=&#34;pages-build-deployment&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/jeksterslab/semmcci&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/jeksterslab/semmcci/branch/main/graph/badge.svg?token=KVLUET3DJ6&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the CRAN release of &lt;code&gt;semmcci&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;install.packages(&#34;semmcci&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install the development version of &lt;code&gt;semmcci&lt;/code&gt; from &lt;a href=&#34;https://github.com/jeksterslab/semmcci&#34;&gt;GitHub&lt;/a&gt; with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!require(&#34;remotes&#34;)) install.packages(&#34;remotes&#34;)&#xA;remotes::install_github(&#34;jeksterslab/semmcci&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;In the Monte Carlo method, a sampling distribution of parameter estimates is generated from the multivariate normal distribution using the parameter estimates and the sampling variance-covariance matrix. Confidence intervals for defined parameters are generated by obtaining percentiles corresponding to 100(1 - α)% from the generated sampling distribution, where α is the significance level.&lt;/p&gt; &#xA;&lt;p&gt;Monte Carlo confidence intervals for free and defined parameters in models fitted in the structural equation modeling package &lt;code&gt;lavaan&lt;/code&gt; can be generated using the &lt;code&gt;semmcci&lt;/code&gt; package. The package has three main functions, namely, &lt;code&gt;MC()&lt;/code&gt;, &lt;code&gt;MCMI()&lt;/code&gt;, and &lt;code&gt;MCStd()&lt;/code&gt;. The output of &lt;code&gt;lavaan&lt;/code&gt; is passed as the first argument to the &lt;code&gt;MC()&lt;/code&gt; function or the &lt;code&gt;MCMI()&lt;/code&gt; function to generate Monte Carlo confidence intervals. Monte Carlo confidence intervals for the standardized estimates can also be generated by passing the output of the &lt;code&gt;MC()&lt;/code&gt; function or the &lt;code&gt;MCMI()&lt;/code&gt; function to the &lt;code&gt;MCStd()&lt;/code&gt; function. A description of the package and code examples are presented in Pesigan and Cheung (2023: &lt;a href=&#34;https://doi.org/10.3758/s13428-023-02114-4&#34;&gt;https://doi.org/10.3758/s13428-023-02114-4&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;A common application of the Monte Carlo method is to generate confidence intervals for the indirect effect. In the simple mediation model, variable &lt;code&gt;X&lt;/code&gt; has an effect on variable &lt;code&gt;Y&lt;/code&gt;, through a mediating variable &lt;code&gt;M&lt;/code&gt;. This mediating or indirect effect is a product of path coefficients from the fitted model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(semmcci)&#xA;library(lavaan)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(df)&#xA;#&amp;gt;        X                  M                  Y           &#xA;#&amp;gt;  Min.   :-3.91529   Min.   :-2.67411   Min.   :-3.10892  &#xA;#&amp;gt;  1st Qu.:-0.68910   1st Qu.:-0.69660   1st Qu.:-0.68538  &#xA;#&amp;gt;  Median : 0.00486   Median :-0.02460   Median :-0.00266  &#xA;#&amp;gt;  Mean   : 0.02143   Mean   :-0.04754   Mean   :-0.02095  &#xA;#&amp;gt;  3rd Qu.: 0.68926   3rd Qu.: 0.56327   3rd Qu.: 0.61822  &#xA;#&amp;gt;  Max.   : 3.10492   Max.   : 3.58466   Max.   : 3.49416  &#xA;#&amp;gt;  NA&#39;s   :100        NA&#39;s   :100        NA&#39;s   :100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model Specification&lt;/h3&gt; &#xA;&lt;p&gt;The indirect effect is defined by the product of the slopes of paths &lt;code&gt;X&lt;/code&gt; to &lt;code&gt;M&lt;/code&gt; labeled as &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt; to &lt;code&gt;Y&lt;/code&gt; labeled as &lt;code&gt;b&lt;/code&gt;. In this example, we are interested in the confidence intervals of &lt;code&gt;indirect&lt;/code&gt; defined as the product of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; using the &lt;code&gt;:=&lt;/code&gt; operator in the &lt;code&gt;lavaan&lt;/code&gt; model syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;model &amp;lt;- &#34;&#xA;  Y ~ cp * X + b * M&#xA;  M ~ a * X&#xA;  X ~~ X&#xA;  indirect := a * b&#xA;  direct := cp&#xA;  total := cp + (a * b)&#xA;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Monte Carlo Confidence Intervals&lt;/h3&gt; &#xA;&lt;p&gt;We can now fit the model using the &lt;code&gt;sem()&lt;/code&gt; function from &lt;code&gt;lavaan&lt;/code&gt;. We use full-information maximum likelihood to deal with missing values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fit &amp;lt;- sem(data = df, model = model, missing = &#34;fiml&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;fit&lt;/code&gt; &lt;code&gt;lavaan&lt;/code&gt; object can then be passed to the &lt;code&gt;MC()&lt;/code&gt; function to generate Monte Carlo confidence intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mc &amp;lt;- MC(fit, R = 20000L, alpha = 0.05)&#xA;mc&#xA;#&amp;gt; Monte Carlo Confidence Intervals&#xA;#&amp;gt;              est     se     R    2.5%  97.5%&#xA;#&amp;gt; cp        0.3028 0.0304 20000  0.2432 0.3626&#xA;#&amp;gt; b         0.4936 0.0317 20000  0.4315 0.5554&#xA;#&amp;gt; a         0.4508 0.0289 20000  0.3942 0.5079&#xA;#&amp;gt; X~~X      1.0376 0.0488 20000  0.9426 1.1325&#xA;#&amp;gt; Y~~Y      0.5740 0.0283 20000  0.5185 0.6294&#xA;#&amp;gt; M~~M      0.7127 0.0346 20000  0.6452 0.7807&#xA;#&amp;gt; Y~1      -0.0073 0.0258 20000 -0.0574 0.0436&#xA;#&amp;gt; M~1      -0.0504 0.0281 20000 -0.1053 0.0048&#xA;#&amp;gt; X~1       0.0247 0.0334 20000 -0.0397 0.0901&#xA;#&amp;gt; indirect  0.2225 0.0202 20000  0.1845 0.2637&#xA;#&amp;gt; direct    0.3028 0.0304 20000  0.2432 0.3626&#xA;#&amp;gt; total     0.5253 0.0288 20000  0.4687 0.5822&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Monte Carlo Confidence Intervals - Multiple Imputation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;MCMI()&lt;/code&gt; function can be used to handle missing values using multiple imputation. The &lt;code&gt;MCMI()&lt;/code&gt; accepts the output of &lt;code&gt;mice::mice()&lt;/code&gt;, &lt;code&gt;Amelia::amelia()&lt;/code&gt;, or a list of multiply imputed data sets. In this example, we impute multivariate missing data under the normal model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mi &amp;lt;- mice::mice(&#xA;  df,&#xA;  method = &#34;norm&#34;,&#xA;  m = 100,&#xA;  print = FALSE,&#xA;  seed = 42&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We fit the model using lavaan using the default listwise deletion.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;fit &amp;lt;- sem(data = df, model = model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;fit&lt;/code&gt; &lt;code&gt;lavaan&lt;/code&gt; object and &lt;code&gt;mi&lt;/code&gt; object can then be passed to the &lt;code&gt;MCMI()&lt;/code&gt; function to generate Monte Carlo confidence intervals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mcmi &amp;lt;- MCMI(fit, mi = mi, R = 20000L, alpha = 0.05, seed = 42)&#xA;mcmi&#xA;#&amp;gt; Monte Carlo Confidence Intervals (Multiple Imputation Estimates)&#xA;#&amp;gt;             est     se     R   2.5%  97.5%&#xA;#&amp;gt; cp       0.3003 0.0308 20000 0.2400 0.3608&#xA;#&amp;gt; b        0.4934 0.0314 20000 0.4323 0.5545&#xA;#&amp;gt; a        0.4518 0.0282 20000 0.3967 0.5070&#xA;#&amp;gt; X~~X     1.0392 0.0486 20000 0.9444 1.1348&#xA;#&amp;gt; Y~~Y     0.5739 0.0282 20000 0.5182 0.6292&#xA;#&amp;gt; M~~M     0.7125 0.0338 20000 0.6460 0.7785&#xA;#&amp;gt; indirect 0.2229 0.0199 20000 0.1848 0.2636&#xA;#&amp;gt; direct   0.3003 0.0308 20000 0.2400 0.3608&#xA;#&amp;gt; total    0.5233 0.0293 20000 0.4664 0.5805&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Standardized Monte Carlo Confidence Intervals&lt;/h3&gt; &#xA;&lt;p&gt;Standardized Monte Carlo Confidence intervals can be generated by passing the result of the &lt;code&gt;MC()&lt;/code&gt; function or the &lt;code&gt;MCMI()&lt;/code&gt; function to &lt;code&gt;MCStd()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;MCStd(mc, alpha = 0.05)&#xA;#&amp;gt; Standardized Monte Carlo Confidence Intervals&#xA;#&amp;gt;              est     se     R   2.5%  97.5%&#xA;#&amp;gt; cp        0.3033 0.0299 20000 0.2441 0.3613&#xA;#&amp;gt; b         0.4665 0.0281 20000 0.4112 0.5208&#xA;#&amp;gt; a         0.4778 0.0267 20000 0.4249 0.5290&#xA;#&amp;gt; X~~X      1.0000 0.0000 20000 1.0000 1.0000&#xA;#&amp;gt; Y~~Y      0.5552 0.0255 20000 0.5048 0.6048&#xA;#&amp;gt; M~~M      0.7717 0.0255 20000 0.7201 0.8194&#xA;#&amp;gt; indirect -0.0072 0.0184 20000 0.1873 0.2599&#xA;#&amp;gt; direct   -0.0524 0.0299 20000 0.2441 0.3613&#xA;#&amp;gt; total     0.0242 0.0250 20000 0.4758 0.5736&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;MCStd(mcmi, alpha = 0.05)&#xA;#&amp;gt; Standardized Monte Carlo Confidence Intervals&#xA;#&amp;gt;             est     se     R   2.5%  97.5%&#xA;#&amp;gt; cp       0.2871 0.0302 20000 0.2412 0.3601&#xA;#&amp;gt; b        0.4787 0.0274 20000 0.4126 0.5191&#xA;#&amp;gt; a        0.4701 0.0261 20000 0.4269 0.5287&#xA;#&amp;gt; X~~X     1.0000 0.0000 20000 1.0000 1.0000&#xA;#&amp;gt; Y~~Y     0.5592 0.0255 20000 0.5053 0.6058&#xA;#&amp;gt; M~~M     0.7790 0.0249 20000 0.7204 0.8178&#xA;#&amp;gt; indirect 0.2250 0.0181 20000 0.1885 0.2595&#xA;#&amp;gt; direct   0.2871 0.0302 20000 0.2412 0.3601&#xA;#&amp;gt; total    0.5122 0.0253 20000 0.4738 0.5736&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://jeksterslab.github.io/semmcci/index.html&#34;&gt;GitHub Pages&lt;/a&gt; for package documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;To cite &lt;code&gt;semmcci&lt;/code&gt; in publications, please cite Pesigan &amp;amp; Cheung (2023).&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34; line-spacing=&#34;2&#34;&gt; &#xA; &lt;div id=&#34;ref-MacKinnon-Lockwood-Williams-2004&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;MacKinnon, D. P., Lockwood, C. M., &amp;amp; Williams, J. (2004). Confidence limits for the indirect effect: Distribution of the product and resampling methods. &lt;em&gt;Multivariate Behavioral Research&lt;/em&gt;, &lt;em&gt;39&lt;/em&gt;(1), 99–128. &lt;a href=&#34;https://doi.org/10.1207/s15327906mbr3901_4&#34;&gt;https://doi.org/10.1207/s15327906mbr3901_4&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Pesigan-Cheung-2023&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Pesigan, I. J. A., &amp;amp; Cheung, S. F. (2023). Monte Carlo confidence intervals for the indirect effect with missing data. &lt;em&gt;Behavior Research Methods&lt;/em&gt;. &lt;a href=&#34;https://doi.org/10.3758/s13428-023-02114-4&#34;&gt;https://doi.org/10.3758/s13428-023-02114-4&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Preacher-Selig-2012&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Preacher, K. J., &amp;amp; Selig, J. P. (2012). Advantages of monte carlo confidence intervals for indirect effects. &lt;em&gt;Communication Methods and Measures&lt;/em&gt;, &lt;em&gt;6&lt;/em&gt;(2), 77–98. &lt;a href=&#34;https://doi.org/10.1080/19312458.2012.679848&#34;&gt;https://doi.org/10.1080/19312458.2012.679848&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Tofighi-Kelley-2019&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Tofighi, D., &amp;amp; Kelley, K. (2019). Indirect effects in sequential mediation models: Evaluating methods for hypothesis testing and confidence interval formation. &lt;em&gt;Multivariate Behavioral Research&lt;/em&gt;, &lt;em&gt;55&lt;/em&gt;(2), 188–210. &lt;a href=&#34;https://doi.org/10.1080/00273171.2019.1618545&#34;&gt;https://doi.org/10.1080/00273171.2019.1618545&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;div id=&#34;ref-Tofighi-MacKinnon-2015&#34; class=&#34;csl-entry&#34;&gt; &#xA;  &lt;p&gt;Tofighi, D., &amp;amp; MacKinnon, D. P. (2015). Monte Carlo confidence intervals for complex functions of indirect effects. &lt;em&gt;Structural Equation Modeling: A Multidisciplinary Journal&lt;/em&gt;, &lt;em&gt;23&lt;/em&gt;(2), 194–205. &lt;a href=&#34;https://doi.org/10.1080/10705511.2015.1057284&#34;&gt;https://doi.org/10.1080/10705511.2015.1057284&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/ifc-spec</title>
    <updated>2023-10-12T01:39:30Z</updated>
    <id>tag:github.com,2023-10-12:/microsoft/ifc-spec</id>
    <link href="https://github.com/microsoft/ifc-spec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IFC format specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IFC Format Specification&lt;/h1&gt; &#xA;&lt;p&gt;The IFC specification aims to formally define a binary format for describing the &lt;em&gt;semantics&lt;/em&gt; of C++ programs (or program fragments) at a high level of abstraction, before lowering to machine code or similar.&lt;/p&gt; &#xA;&lt;p&gt;This format is designed to offer a persistent form of the in-memory &lt;a href=&#34;https://github.com/GabrielDosReis/ipr&#34;&gt;Internal Program Representation (IPR) of C++ programs&lt;/a&gt; originally developed by Gabriel Dos Reis and Bjarne Stroustrup. As such, it follows the same principles as the IPR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completeness&lt;/strong&gt;: Represents the semantics of all Standard C++ constructs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generality&lt;/strong&gt;: Suitable for every kind of application, rather than targeted to a particular application area&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Regularity&lt;/strong&gt;: Does not mimic C++ language irregularities; general rules are used, rather than long lists of special cases&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Typefulness&lt;/strong&gt;: Every expression has a type&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimality&lt;/strong&gt;: No redundant values, and traversal involves no redundant indirections&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compiler neutrality&lt;/strong&gt;: Not tied to a particular compiler&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: Able to represent hundreds of thousands of lines of codes on common machines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Downloading&lt;/h2&gt; &#xA;&lt;p&gt;The latest IFC draft specification can be &lt;a href=&#34;https://github.com/Microsoft/ifc-spec/releases/download/prerelease/ifc.pdf&#34;&gt;downloaded here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Official releases can be found on the &lt;a href=&#34;https://github.com/Microsoft/ifc-spec/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;In order to build the PDF rendering of the specification, ensure that you have a modern LaTeX processor installed.&lt;/p&gt; &#xA;&lt;p&gt;Clone a copy of the repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/microsoft/ifc-spec.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change to the LaTeX directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ltx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Issue the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pdflatex ifc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;followed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bibtex ifc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and possibly two more times&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pdflatex ifc&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>