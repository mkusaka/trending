<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-28T01:35:23Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anton-pershin/spbu-fundamentals-of-algorithms</title>
    <updated>2024-04-28T01:35:23Z</updated>
    <id>tag:github.com,2024-04-28:/anton-pershin/spbu-fundamentals-of-algorithms</id>
    <link href="https://github.com/anton-pershin/spbu-fundamentals-of-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Materials for the practica for &#34;Fundamentals of Algorithms&#34; course at SpbU&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;spbu-fundamentals-of-algorithms&lt;/h1&gt; &#xA;&lt;p&gt;Materials for the practicum for &#34;Fundamentals of Algorithms&#34; course at SpbU&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Set up your environment&lt;/p&gt; &#xA;&lt;h3&gt;VSCode&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;Run and Debug&lt;/code&gt; in the left panel, create a new launch file, select &lt;code&gt;Python File&lt;/code&gt; and add the following field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#34;env&#34;: {&#xA;    &#34;PYTHONPATH&#34;: &#34;${workspaceFolder}${pathSeparator}${env:PYTHONPATH}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Practicum 1&lt;/h2&gt; &#xA;&lt;p&gt;Изучение &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;numpy&lt;/code&gt; и &lt;code&gt;matplotlib&lt;/code&gt;, необходимых для дальнейшей работы. Предполагается, что студент имеет базовые знания python.&lt;/p&gt; &#xA;&lt;p&gt;План:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Выполнить &lt;code&gt;intro_to_numpy_and_matplotlib.ipynb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Practicum 2&lt;/h2&gt; &#xA;&lt;p&gt;Начало работы с графовыми и графовыми алгоритмами с помощью &lt;code&gt;networkx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;План:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Выполнить &lt;code&gt;intro_to_networkx.ipynb&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Домашнее задание (базовый вариант):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Проверка на наличие циклов в ненаправленном графе: &lt;code&gt;practicum_2/homework/basic/cycles_in_undirected_graph.py&lt;/code&gt;. Необходимо реализовать функцию &lt;code&gt;has_cycles&lt;/code&gt;, которая принимает на вход объект графа и возвращает булевское значение, принимающее true при наличии цикла в графе. Предполагается, что, придя в узел n через ребро e в ненаправленном графе, мы можем пойти далее по любому ребру узла n, кроме e.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Домашнее задание (продвинутый вариант):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Проверка на наличие циклов в направленном графе: &lt;code&gt;practicum_2/homework/advanced/cycles_in_directed_graph.py&lt;/code&gt;. Необходимо реализовать функцию &lt;code&gt;has_cycles&lt;/code&gt;, которая принимает на вход объект графа и возвращает булевское значение, принимающее true при наличии цикла в графе. Предполагается, что, придя в узел n через ребро e в направленном графе, мы можем пойти далее по любому исходящему ребру узла n.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Дедлайн: 2024.04.06&lt;/p&gt; &#xA;&lt;h2&gt;Practicum 3&lt;/h2&gt; &#xA;&lt;p&gt;Изучение классических графовых алгоритмов: BFS, DFS, алгоритма Прима для нахождения MST и алгоритма Дейкстры для нахождения кратчайших путей в графе.&lt;/p&gt; &#xA;&lt;p&gt;План:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Реализовать рекурсивный DFS в функции &lt;code&gt;dfs_recursive&lt;/code&gt;, итерационный DFS в функции &lt;code&gt;dfs_iterative&lt;/code&gt; и топологическую сортировку в функции &lt;code&gt;dfs_recursive_postorder&lt;/code&gt; в файле &lt;code&gt;dfs.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Реализовать алгоритм Прима в функции &lt;code&gt;prim_mst&lt;/code&gt; в файле &lt;code&gt;mst.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Реализовать базовый алгоритм Дейкстры в функции &lt;code&gt;dijkstra_sp&lt;/code&gt; и ускорить его с помощью очереди с приоритетом в функции &lt;code&gt;dijkstra_sp_with_priority_queue&lt;/code&gt; в файле &lt;code&gt;sp.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Домашнее задание (базовый вариант):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Поиск пути в лабиринте: &lt;code&gt;practicum_3/homework/basic/bfs_maze.py&lt;/code&gt;. Необходимо реализовать метод &lt;code&gt;Maze.solve&lt;/code&gt;, который ищет путь в лабиринте. Лабиринт хранится в файле &lt;code&gt;practicum_3/homework/basic/maze_2.txt&lt;/code&gt;, где символ &lt;code&gt;#&lt;/code&gt; обозначает стену, а &lt;code&gt;O&lt;/code&gt; и &lt;code&gt;X&lt;/code&gt; вход и выход соответственно. Цель - построить путь от &lt;code&gt;O&lt;/code&gt; к &lt;code&gt;X&lt;/code&gt;. Под путем подразумевается последовательность символов &lt;code&gt;L&lt;/code&gt; (шаг влево), &lt;code&gt;R&lt;/code&gt; (шаг вправо), &lt;code&gt;U&lt;/code&gt; (шаг вверх), &lt;code&gt;D&lt;/code&gt; (шаг вниз). Например &lt;code&gt;LLDLLDDR&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Проверка на корректность раскрытия скобок: &lt;code&gt;practicum_3/homework/basic/valid_parentheses.py&lt;/code&gt;. Необходимо реализовать класс LIFO очереди &lt;code&gt;Stack&lt;/code&gt; и затем реализовать функцию &lt;code&gt;are_parentheses_valid&lt;/code&gt;, которая проверяет, содержит ли строка, переданная на вход и состоящая только из скобок &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, корректно закрывающиеся/открывающиеся скобки. В файле &lt;code&gt;practicum_3/homework/basic/valid_parentheses_cases.yaml&lt;/code&gt; содержатся корректные и некорректные примеры таких строк.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Домашнее задание (продвинутый вариант):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Нахождение максимального потока в транспортной сети: &lt;code&gt;practicum_3/homework/advanced/max_flow.py&lt;/code&gt;. Необходимо реализовать функцию &lt;code&gt;max_flow&lt;/code&gt;, которая принимает на вход объект направленного взвешенного графа (транспортной сети) и возвращает значение максимального потока. Существует множество методов решения этой задачи, так что требуется найти наиболее быстрый метод из доступных.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Дедлайн: 2024.04.20&lt;/p&gt; &#xA;&lt;h2&gt;Practicum 4&lt;/h2&gt; &#xA;&lt;p&gt;Решение задач на графах с помощью линейного программирования.&lt;/p&gt; &#xA;&lt;p&gt;План:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Изучить представление графовых задач в виде задач линейного программирования.&lt;/li&gt; &#xA; &lt;li&gt;Поставить задачу линейного программирования в файле &lt;code&gt;practicum_4/sp_via_lp.py&lt;/code&gt; для нахождения кратчайшего пути в графе и решить ее с помощью &lt;code&gt;scipy.optimize.linprog&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Practicum 5&lt;/h2&gt; &#xA;&lt;p&gt;Решение задач на графах с помощью метаэвристических алгоритмов.&lt;/p&gt; &#xA;&lt;p&gt;План:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Изучить постановку задачи раскраски графов.&lt;/li&gt; &#xA; &lt;li&gt;Изучить алгоритм Hill Climbing&lt;/li&gt; &#xA; &lt;li&gt;Реализовать случайный поиск и Hill Climbing в файле &lt;code&gt;practicum_5/graph_coloring.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Домашнее задание (базовый вариант):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Обход бинарного дерева зигзагом: &lt;code&gt;practicum_5/homework/basic/binary_tree_zigzag_level_order_traversal.py&lt;/code&gt;. Необходимо реализовать функцию &lt;code&gt;build_tree&lt;/code&gt;, строящую дерево &lt;code&gt;BinaryTree&lt;/code&gt; из списка, где узлы перечислены по слоям слева направо (см. &lt;a href=&#34;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal&#34;&gt;пример&lt;/a&gt;). Далее необходимо реализовать метод &lt;code&gt;BinaryTree.zigzag_level_order_traversal&lt;/code&gt;, выполняющий обход зигзагом и возвращающий двумерный список, где первая размерность соответствует глубине дерева, а вторая - узлам на этой глубине. Под зигзагом подразумевается обход слева направо на нулевом уровне (корень), затем справа налево на первом уровне и так далее.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Домашнее задание (продвинутый вариант):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Раскраска графа с помощью имитации отжига: &lt;code&gt;practicum_5/homework/advanced/simulated_annealing.py&lt;/code&gt;. Имитация отжига требует реализации двух объектов: оператора генерации новой точки (tweak) и расписания понижения температуры. Оба объекта реализуются по вашему усмотрению. Цель состоит в нахождении наилучшего решения (с точки зрения ожидаемой скорости сходимости к наименьшему количеству конфликтов) для произвольных графов Эрдеша-Реньи со 100 узлами и $p \ll 1$.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Дедлайн: 2024.04.27&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EmptyBlueBox/Introduction_to_Computer_Vision-wh-2024Spring-PKU</title>
    <updated>2024-04-28T01:35:23Z</updated>
    <id>tag:github.com,2024-04-28:/EmptyBlueBox/Introduction_to_Computer_Vision-wh-2024Spring-PKU</id>
    <link href="https://github.com/EmptyBlueBox/Introduction_to_Computer_Vision-wh-2024Spring-PKU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;I love CV.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction_to_Computer_Vision-wh-2024Spring-PKU&lt;/h1&gt; &#xA;&lt;p&gt;Introduction to Computer Vision Course Materials&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Slides (not yet available, Copyright belongs to Professor Wang He of Peking University.)&lt;/li&gt; &#xA; &lt;li&gt;Course notes (marked on course materials, not yet available, Copyright belongs to Professor Wang He of Peking University.)&lt;/li&gt; &#xA; &lt;li&gt;Course notes (Latex) &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;This note was originally completed by 林晓疏 (pen name) during class in the spring semester of 2022&lt;/li&gt; &#xA;   &lt;li&gt;I have adapted this to the latest course content for the Spring 2024 semester and added the latest content&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Labs&lt;/li&gt; &#xA; &lt;li&gt;cheatsheet &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;referenced from &lt;a href=&#34;https://github.com/PkuCuipy/icv-assignments&#34;&gt;https://github.com/PkuCuipy/icv-assignments&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>msaqib/Dissertation</title>
    <updated>2024-04-28T01:35:23Z</updated>
    <id>tag:github.com,2024-04-28:/msaqib/Dissertation</id>
    <link href="https://github.com/msaqib/Dissertation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PhD Thesis Document&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>