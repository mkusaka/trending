<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-27T01:45:38Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>guanyingc/cv_rebuttal_template</title>
    <updated>2024-01-27T01:45:38Z</updated>
    <id>tag:github.com,2024-01-27:/guanyingc/cv_rebuttal_template</id>
    <link href="https://github.com/guanyingc/cv_rebuttal_template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Rebuttal Template for CV Conference&lt;/h1&gt; &#xA;&lt;p&gt;This repo provides two LaTex templates for preparing the rebuttal for CV conferences (e.g., CVPR/ICCV).&lt;/p&gt; &#xA;&lt;p&gt;Overleaf Link: &lt;a href=&#34;https://www.overleaf.com/read/wqhjmsbhdrxp&#34;&gt;https://www.overleaf.com/read/wqhjmsbhdrxp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example 1&lt;/h2&gt; &#xA;&lt;p&gt;This template groups the responses for each reviewer. It is useful when different reviewers have different questions, and there are many small questions to answer for each reviewer.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/guanyingc/cv_rebuttal_template/main/samples/egrebuttal.jpg&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Example 2&lt;/h2&gt; &#xA;&lt;p&gt;This template answers each question one by one, and refers to the corresponding reviewers at the end of each question.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/guanyingc/cv_rebuttal_template/main/samples/egrebuttal2.jpg&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;More LaTeX Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/guanyingc/latex_paper_writing_tips&#34;&gt;latex_paper_writing_tips&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>L-TChen/BiSig</title>
    <updated>2024-01-27T01:45:38Z</updated>
    <id>tag:github.com,2024-01-27:/L-TChen/BiSig</id>
    <link href="https://github.com/L-TChen/BiSig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bidirectional Binding Signature and Bidirectional Type Synthesis, Generically&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Formal Treatment of Bidirectional Typing&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is the repository for the development, including formal proofs and tex code, presented in the paper &lt;em&gt;A formal treatment of bidirectional typing&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Abstract from the paper&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There has been much progress in designing bidirectional type systems and associated type synthesis algorithms, but mainly on a case- by-case basis. To remedy the situation, this paper develops a general and formal theory of bidirectional typing and as a by-product of our formalism provides a verified generator of proof-relevant type synthesisers for simply typed languages: for every signature that specifies a mode- correct bidirectionally typed language, there exists a proof-relevant type synthesiser that for an input abstract syntax tree constructs a typing derivation if any, gives its refutation if not, or reports that the input does not have enough type annotations. Soundness, completeness, and mode- correctness are studied universally for all signatures, which are sufficient conditions for deriving a type synthesiser. We propose a preprocessing step called mode decoration, which helps the user to deal with missing type annotations in a given abstract syntax tree. The entire development is formalised in Agda and can be further integrated with other language- formalisation frameworks.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Repository organisation&lt;/h2&gt; &#xA;&lt;p&gt;This repository consists of the following directories and files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/master/README.agda&#34;&gt;&lt;code&gt;README.agda&lt;/code&gt;&lt;/a&gt; is a walkthrough of the formal implementation with mappings to the paper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/master/src/&#34;&gt;&lt;code&gt;src/&lt;/code&gt;&lt;/a&gt; is the formal implementation in Agda. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/master/src/Example/STLC.agda&#34;&gt;&lt;code&gt;src/Example/STLC.agda&lt;/code&gt;&lt;/a&gt; contains the example of simply typed lambda calculus presented in the Appendix &lt;em&gt;Demonstration&lt;/em&gt; of the paper.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/master/tex/&#34;&gt;&lt;code&gt;tex/&lt;/code&gt;&lt;/a&gt; is the tex code for the paper including all submissions, reviews, and our reponses. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In particular, &lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/master/tex/ESOP24&#34;&gt;&lt;code&gt;tex/ESOP24/&lt;/code&gt;&lt;/a&gt; contains the accepted ESOP&#39;24 submission.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/master/doc/&#34;&gt;&lt;code&gt;docs/&lt;/code&gt;&lt;/a&gt; is the listing of source code published &lt;a href=&#34;https://l-tchen.github.io/BiSig/README.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;agda-stdlib/&lt;/code&gt; is the Agda standard library &lt;code&gt;v2.0&lt;/code&gt; as a Git submodule.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To type-check the formal implementation, you need&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Agda&lt;/code&gt; version &lt;code&gt;2.6.4.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Agda&lt;/h3&gt; &#xA;&lt;p&gt;An earlier version such as &lt;code&gt;2.6.4&lt;/code&gt; compatible with the standard library &lt;code&gt;v2.0&lt;/code&gt; may work. Should you have no &lt;code&gt;Agda&lt;/code&gt; installed or fail to check &lt;code&gt;README.agda&lt;/code&gt; with an earlier version of Agda, you may&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://agda.readthedocs.io/en/v2.6.4.1/getting-started/installation.html&#34;&gt;&lt;code&gt;Agda 2.6.4.1&lt;/code&gt;&lt;/a&gt; or&lt;/li&gt; &#xA; &lt;li&gt;Use the Docker &lt;a href=&#34;https://hub.docker.com/r/ltchentw/agda/&#34;&gt;image&lt;/a&gt; for &lt;code&gt;Agda 2.6.4.1&lt;/code&gt;, i.e. containerised Agda.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;To browse and check this repository locally, please follow the instructions below.&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Open a terminal emulator.&lt;/p&gt; &lt;p&gt;For example, you may use the application &lt;code&gt;Terminal&lt;/code&gt; on macOS or &lt;code&gt;Windows Terminal&lt;/code&gt; on Windows 10 (or later).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository (in the terminal)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 --recurse-submodules --shallow-submodules https://github.com/L-TChen/BiSig.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This repository contains the Agda standard library as a Git submodule, so it is necessary to clone this repository with the submodule.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change the working directory to the local repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd [the location of your copy of this repo]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) If you have no &lt;code&gt;Agda&lt;/code&gt;, you may install &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker&lt;/a&gt; and use &lt;a href=&#34;https://hub.docker.com/r/ltchentw/agda&#34;&gt;containerised &lt;code&gt;Agda&lt;/code&gt;&lt;/a&gt; as follow:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --mount type=bind,source&#34;=${PWD}&#34;,destination=/BiSig -w /BiSig ltchentw/agda:2.6.4.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command pulls the pre-built image, which contains &lt;code&gt;Agda 2.6.4.1&lt;/code&gt;, from Docker Hub and runs the image as a container with the current working directory mounted at &lt;code&gt;/BiSig/&lt;/code&gt; internally.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type-check the walkthrough file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;agda README.agda&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The option &lt;code&gt;--safe&lt;/code&gt; has been specified additionally in the &lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/65b02a2d29148aeb88c701714c3d1d231a9d6a8f/BiSig.agda-lib#L8&#34;&gt;&lt;code&gt;BiSig.agda-lib&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/65b02a2d29148aeb88c701714c3d1d231a9d6a8f/README.agda#L9&#34;&gt;&lt;code&gt;README.agda&lt;/code&gt;&lt;/a&gt; to ensure that &lt;em&gt;no&lt;/em&gt; definitions are postulated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, use an editor that supports the Agda development, such as Emacs with the &lt;a href=&#34;https://agda.readthedocs.io/en/latest/tools/emacs-mode.html&#34;&gt;Agda mode&lt;/a&gt; or VS Code with the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=banacorn.agda-mode&#34;&gt;extension for Agda&lt;/a&gt;, to play with this repo.&lt;/p&gt; &lt;p&gt;If you use the docker image for Agda, then Emacs with Agda mode is already available to use inside the container.&lt;/p&gt; &lt;p&gt;Hint. Start with &lt;code&gt;README.agda&lt;/code&gt; or try to normalise the term &lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/93767edf3e788cf7cf6d749f777f99e0a2ffafdc/src/Example/STLC.agda#L118-L119&#34;&gt;&lt;code&gt;⊢S?&lt;/code&gt;&lt;/a&gt; in &lt;a href=&#34;https://github.com/L-TChen/BiSig/raw/master/src/Example/STLC.agda&#34;&gt;&lt;code&gt;src/Example/STLC.agda&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>