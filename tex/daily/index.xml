<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-22T01:42:22Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gogotheauditor/audits</title>
    <updated>2023-11-22T01:42:22Z</updated>
    <id>tag:github.com,2023-11-22:/gogotheauditor/audits</id>
    <link href="https://github.com/gogotheauditor/audits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gogo&#39;s smart contract security reviews - audit reports and findings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gogo&#39;s smart contract security portfolio&lt;/h1&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/#book-an-audit&#34;&gt;Book an audit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/#engagements&#34;&gt;Engagements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/#bug-bounty&#34;&gt;Bug bounty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/Security-Review-Process.md&#34;&gt;Review Process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/generator&#34;&gt;Reports Generator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Georgi Georgiev, mostly known as Gogo (&lt;em&gt;@gogotheauditor&lt;/em&gt;), is an independent security researcher experienced in Solidity smart contract auditing and bug hunting. Having conducted over 40 solo and team smart contract security reviews, he consistently strives to provide top-quality security auditing services. He also serves as a smart contract auditor at Paladin Blockchain Security, where he has been involved in security audits for notable clients such as &lt;strong&gt;LayerZero&lt;/strong&gt;, &lt;strong&gt;TraderJoe&lt;/strong&gt;, &lt;strong&gt;SmarDex&lt;/strong&gt;, and other leading protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Book an audit&lt;/h2&gt; &#xA;&lt;p&gt;If you are a founder or engineer looking to get your smart contract protocol audited by a top-notch solo security researcher or a team of experienced researchers, you can contact me on &lt;a href=&#34;https://twitter.com/gogotheauditor&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://t.me/gogotheauditor&#34;&gt;Telegram&lt;/a&gt;, or &lt;a href=&#34;https://discordapp.com/users/451149166782185483&#34;&gt;Discord&lt;/a&gt; to discuss your needs and help you secure your project.&lt;/p&gt; &#xA;&lt;h2&gt;Engagements&lt;/h2&gt; &#xA;&lt;h3&gt;February 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Metalabel-Solo-Security-Review.md&#34;&gt;Metalabel - NFT Collections Releasing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Metalabel-Solo-Security-Review-2.md&#34;&gt;Metalabel - NFT Collections Releasing, V1.1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;March 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Diva-GuardianAudits-Security-Review.md&#34;&gt;Diva - Decentralized Financial Derivatives&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Aelin-Sub7-Security-Review.pdf&#34;&gt;Aelin - Fundraising&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;April 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/SmarDex-Paladin-Security-Review.pdf&#34;&gt;SmarDex - AMM &amp;amp; Yield Farm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/WINR-Paladin-Security-Review.pdf&#34;&gt;WINR - Staking &amp;amp; Token Migration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Aori-Solo-Security-Review.pdf&#34;&gt;Aori - Options Margin Trading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;May 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Key-Finance-Solo-Security-Review.pdf&#34;&gt;Key Finance - Rewards Distribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Avalaunch-Paladin-Security-Review.pdf&#34;&gt;Avalaunch - NFT Marketplace &amp;amp; Auction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Ghast-Paladin-Security-Review.pdf&#34;&gt;Ghast Protocol - Lending, Borrowing &amp;amp; Staking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/DCG-Paladin-Security-Review.pdf&#34;&gt;DCG - Triple Rewards Dividend Vault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Vinci-Solo-Security-Review.pdf&#34;&gt;Vinci - Staking &amp;amp; ERC20 Token&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;June 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Ghast-Paladin-Security-Review.pdf&#34;&gt;Ghast Protocol - Lending, Borrowing &amp;amp; Staking, second review&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Schwap-Duo-Security-Review.pdf&#34;&gt;Schwap - Orderbook &amp;amp; Staking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/TraderJoe-Paladin-Security-Review.pdf&#34;&gt;TraderJoe - Auto Pools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Aelin-Sub7-Security-Review-2.pdf&#34;&gt;Aelin - Fundraising, second review&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;July 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Key-Finance-Solo-Security-Review-2.pdf&#34;&gt;Key Finance - Orderbook &amp;amp; Staking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/DCG-Paladin-Security-Review.pdf&#34;&gt;DCG - Triple Rewards Dividend Vault, second review&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Radiate-Paladin-Security-Review.pdf&#34;&gt;Radiate Protocol - Vault&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/PartyDAO-Solo-Security-Review.pdf&#34;&gt;PartyDAO - Governance Proposals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/PariFi-GuardianAudits-Security-Review.md&#34;&gt;PariFi - Perpetuals &amp;amp; Relayer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;August 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Project-TXA-Duo-Security-Review.pdf&#34;&gt;Project TXA - Cross-Chain Orders Settlement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Lo-FI-Pepe-Solo-Security-Review.pdf&#34;&gt;Lofi Pepe - NFT Staking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/NTLC-Solo-Security-Review.pdf&#34;&gt;Bera Market - NFT Lending &amp;amp; Borrowing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Radiate-Paladin-Security-Review.pdf&#34;&gt;Radiate Protocol - Vault, second review&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;September 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Rogue-Finance-Solo-Security-Review.pdf&#34;&gt;Rogue Finance - veMAV Wrapper&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;October 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/LayerZero-USDV-Paladin-Security-Review.pdf&#34;&gt;LayerZero, USDV - Stablecoin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Kreatorhood-Solo-Security-Review.pdf&#34;&gt;Kreatorhood - NFT Marketplace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/TitanX-Solo-Security-Review.pdf&#34;&gt;TitanX - Staking&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;November 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/TitanX-Solo-Security-Review-2.pdf&#34;&gt;TitanX - Staking, second review&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bug bounty&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gogotheauditor/audits/main/reports/Spartan-Immunefi-Bug-Report.md&#34;&gt;Spartan Protocol - Governance Voting Result Manipulation (Critical Severity)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PartyDAO - Denial Of Service (High Severity)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;p&gt;What previous clients and fellow auditors say about my work:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/7c3372a5-dd97-44c9-bc3b-cdc223482b0c&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/d700d0c5-fe40-4d45-8de7-002950d0266a&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/6bcc735c-a428-41d7-8139-1c45fa646c95&#34; width=&#34;250&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/6a9d0980-39b7-460e-b2db-85e9cf46d4d2&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/ef140e31-1074-4fd4-8eb6-acb0187fedbf&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/177a1222-561d-461f-9afb-961623094013&#34; width=&#34;250&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/6f2b3fd5-a83b-4414-ae06-63bb342a18b9&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/ddf43f85-9331-4d45-bd3d-087a7822ccaf&#34; width=&#34;250&#34;&gt; &lt;img src=&#34;https://github.com/gogotheauditor/audits/assets/94860638/f4a1f178-bd32-4a46-9715-70c957c663b6&#34; width=&#34;250&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ibmruntimes/zoslib</title>
    <updated>2023-11-22T01:42:22Z</updated>
    <id>tag:github.com,2023-11-22:/ibmruntimes/zoslib</id>
    <link href="https://github.com/ibmruntimes/zoslib" rel="alternate"></link>
    <summary type="html">&lt;p&gt;z/OS C/C++ runtime library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ZOSLIB - A z/OS C/C++ Library&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/#system-requirements&#34;&gt;System Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/#build-and-install&#34;&gt;Build and Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/#api-documentation&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/#legalities&#34;&gt;Legalities&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ZOSLIB is a z/OS C/C++ library. It is an extended implementation of the z/OS LE C Runtime Library.&lt;/p&gt; &#xA;&lt;p&gt;ZOSLIB implements the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A subset of POSIX APIs that are not available in the LE C Runtime Library&lt;/li&gt; &#xA; &lt;li&gt;EBCDIC &amp;lt;-&amp;gt; ASCII conversion C APIs&lt;/li&gt; &#xA; &lt;li&gt;APIs for improved diagnostic reporting&lt;/li&gt; &#xA; &lt;li&gt;and more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;ZOSLIB is supported on the following z/OS operating systems with z/OS UNIX System Services enabled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;z/OS V2R3 with the following PTFs installed:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UI61308&lt;/li&gt; &#xA;   &lt;li&gt;UI61375&lt;/li&gt; &#xA;   &lt;li&gt;UI61747&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;z/OS V2R4 with the following PTFs installed:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;UI64830&lt;/li&gt; &#xA;   &lt;li&gt;UI64837&lt;/li&gt; &#xA;   &lt;li&gt;UI64839&lt;/li&gt; &#xA;   &lt;li&gt;UI64940&lt;/li&gt; &#xA;   &lt;li&gt;UI65567&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ZOSLIB is supported on the following hardware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IBM z15&lt;/li&gt; &#xA; &lt;li&gt;IBM z14/z14 Model ZR1&lt;/li&gt; &#xA; &lt;li&gt;IBM z13/z13s&lt;/li&gt; &#xA; &lt;li&gt;IBM zEnterprise EC12/BC12&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build and Install&lt;/h2&gt; &#xA;&lt;h3&gt;Build tool prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CMake 3.24.2-zos+&lt;/li&gt; &#xA; &lt;li&gt;GNU Make 4.3+&lt;/li&gt; &#xA; &lt;li&gt;IBM XL C/C++ V2.3.1 for z/OS V2.3 web deliverable (xlclang/xlcang++) or IBM Open XL C/C++ 2.0 (clang/clang++)&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;Ninja (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Clone the ZOSLIB source code using Git into a newly created zoslib directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:ibmruntimes/zoslib.git zoslib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After obtaining the source, &lt;code&gt;cd&lt;/code&gt; to the &lt;code&gt;zoslib&lt;/code&gt; directory and follow one of the following options to build zoslib and run its tests.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use the included &lt;code&gt;build.sh&lt;/code&gt; to build and optionally run the zoslib tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./build.sh -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which displays flags that you can pass to &lt;code&gt;build.sh&lt;/code&gt; to specify a Release build (default is Debug) and whether to build and run the zoslib tests.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./build.sh -c -r -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;performs a Clean (-c) Release (-r) build that creates both static library &lt;code&gt;libzoslib.a&lt;/code&gt; and shared library &lt;code&gt;libzoslib.so&lt;/code&gt; and its sidedeck &lt;code&gt;libzoslib.x&lt;/code&gt;, then builds and runs the zoslib tests (-t).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;build.sh&lt;/code&gt; creates directory &lt;code&gt;./build&lt;/code&gt; to hold the build files, and then places the target files under &lt;code&gt;./install&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Use the steps below to build and optionally run the zoslib tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Create a build directory to hold your build files and &lt;code&gt;cd&lt;/code&gt; to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir build &amp;amp;&amp;amp; cd build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, we will configure our build with CMake.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to export the &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;CXX&lt;/code&gt; environment variables to point to the supported C/C++ build compiler, or pass in the CMake options -DCMAKE_C_COMPILER and -DCMAKE_CXX_COMPILER.&lt;/p&gt; &#xA;&lt;p&gt;From the directory &lt;code&gt;build&lt;/code&gt;, enter the following CMake command (here, &lt;code&gt;..&lt;/code&gt; refers to the ZOSLIB source directory)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default CMake will configure your build as a Debug build. You can configure your build as a Release build with the &lt;code&gt;-DCMAKE_BUILD_TYPE=Release&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;CMake will detect your development environment, perform a series of tests, and generate the files required for building ZOSLIB.&lt;/p&gt; &#xA;&lt;p&gt;To build the zoslib tests, pass -DBUILD_TESTING=ON to cmake, which creates &lt;code&gt;build/test/cctest&lt;/code&gt; that links with &lt;code&gt;libzoslib.a&lt;/code&gt;, and also &lt;code&gt;build/test/cctest&lt;/code&gt; that links with &lt;code&gt;libzoslib.x&lt;/code&gt;. Before running the latter, set your LIBPATH to include the directory containing &lt;code&gt;libzoslib.so&lt;/code&gt;, which should be under &lt;code&gt;install/lib&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, CMake will generate Makefiles. If you prefer to use Ninja, you can specify -GNinja as an option to CMake.&lt;/p&gt; &#xA;&lt;p&gt;After CMake has finished with the configuration, start the build from &lt;code&gt;build&lt;/code&gt; using CMake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake --build .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After ZOSLIB has finished building, install it from &lt;code&gt;build&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cmake --build . --target install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Once we have ZOSLIB built and installed, let&#39;s attempt to build our first ZOSLIB C++ application. The application will generate a series of random numbers, leveraging the &lt;code&gt;getentropy&lt;/code&gt; C API in ZOSLIB.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a file named &lt;code&gt;random.cc&lt;/code&gt; containing the following contents:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// random.cc&#xA;&#xA;// Include zos.h ZOSLIB header&#xA;#include &amp;lt;zos.h&amp;gt;&#xA;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;// Initialize ZOSLIB class&#xA;__init_zoslib __nodezoslib;&#xA;&#xA;int main(int argc, char** argv) {&#xA;  printf(&#34;ZOSLIB version: %s\n&#34;, __zoslib_version);&#xA;  if (argc &amp;lt; 1) {&#xA;    printf(&#34;An argument specifying the number of random &#34;&#xA;           &#34; numbers is required\n&#34;);&#xA;    return 1;&#xA;  }&#xA;&#xA;  int num = atoi(argv[1]);&#xA;  if (num &amp;lt; 0) {&#xA;    printf(&#34;The argument should be positive (&amp;gt;0)\n&#34;);&#xA;    return 2;&#xA;  }&#xA;  printf(&#34;Generating %d random values\n&#34;, num);&#xA;&#xA;  char buffer[10];&#xA;  for (int i = 0; i &amp;lt; num; i++) {&#xA;    printf(&#34;Random index: %d\n&#34;, i);&#xA;    // Call ZOSLIB getentropy C API&#xA;    if (!getentropy(buffer, 10)) {&#xA;      for (int j = 0; j &amp;lt; 10; j++)&#xA;        printf(&#34;%2X &#34;, buffer[j]);&#xA;      printf(&#34;\n&#34;);&#xA;    }&#xA;  }&#xA;  return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example will first include the main ZOSLIB header file, &lt;code&gt;zos.h&lt;/code&gt;, which subsequently includes all of the ZOSLIB header files. Alternatively, we could have just included &lt;code&gt;zos-base.h&lt;/code&gt;, since the prototype for &lt;code&gt;getentropy&lt;/code&gt; is defined in &lt;code&gt;zos-base.h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In order to initialize ZOSLIB, we need to create a static instance of the &lt;code&gt;__init_zoslib&lt;/code&gt; class: &lt;code&gt;__init_zoslib zoslib_init;&lt;/code&gt;. This initializes the Enhanced ASCII runtime environment, among other things. If your application is C only, you can make use of the &lt;code&gt;init_zoslib&lt;/code&gt; function instead.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In the &lt;code&gt;main&lt;/code&gt; function, we make use of two ZOSLIB definitions, &lt;code&gt;__zoslib_version&lt;/code&gt; to obtain the ZOSLIB version, and &lt;code&gt;getentropy&lt;/code&gt; to generate a list of random values.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To compile and link the application, enter the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xlclang++ -qascii -I path/to/zoslib/include -L path/to/build/lib -lzoslib random.cc -o random&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clang++ -fzos-le-char-mode=ascii -I path/to/zoslib/include -L path/to/build/lib -lzoslib random.cc -o random&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;To run the application, enter the following command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./random 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should get an output similar to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ZOSLIB version: v4.0.0&#xA;Generating 2 random values&#xA;Random index: 0&#xA;BC DE CF DE  7 E3 58 3A 4F 22&#xA;Random index: 1&#xA;5B 30 5A 9C C4 70 94 A6 B6 E5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The ZOSLIB API documentation is available &lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Legalities&lt;/h2&gt; &#xA;&lt;p&gt;ZOSLIB is available under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/ibmruntimes/zoslib/main/LICENSE&#34;&gt;LICENSE file&lt;/a&gt; for details&lt;/p&gt; &#xA;&lt;h3&gt;Copyright&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Licensed Materials - Property of IBM&#xA;ZOSLIB&#xA;(C) Copyright IBM Corp. 2020. All Rights Reserved.&#xA;US Government Users Restricted Rights - Use, duplication&#xA;or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>