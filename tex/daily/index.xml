<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-21T01:40:56Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fabbing/obts_exn</title>
    <updated>2022-11-21T01:40:56Z</updated>
    <id>tag:github.com,2022-11-21:/fabbing/obts_exn</id>
    <link href="https://github.com/fabbing/obts_exn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OCaml behind the scenes: exceptions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OCaml behind the scenes: exceptions&lt;/h1&gt; &#xA;&lt;p&gt;Sources of the slides and examples of the tech talk given at Tarides, Paris, on 2022/11/18.&lt;/p&gt; &#xA;&lt;p&gt;Rendered slides are available in the &lt;a href=&#34;https://github.com/fabbing/obts_exn/releases/&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This talk is about understanding how OCaml exceptions are implemented in native code. What happens at the lowest level when an exception is raised and when it’s caught? OCaml exceptions are said to be particularly fast; how is it achieved?&lt;/p&gt; &#xA;&lt;h1&gt;Outline&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assembly &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;x86-64 asssembly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Catching exceptions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Exceptions are values&lt;/li&gt; &#xA;   &lt;li&gt;Exception handlers&lt;/li&gt; &#xA;   &lt;li&gt;Installing a trap&lt;/li&gt; &#xA;   &lt;li&gt;Removing a trap&lt;/li&gt; &#xA;   &lt;li&gt;Raise&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Nested handlers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multiple handlers, multiple traps&lt;/li&gt; &#xA;   &lt;li&gt;Raise and reraise&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bonus: Default handler &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Runtime&#39;s default exception handler&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make ocaml&#xA;make sources&#xA;make presentation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pdflatex (packages: Beamer, Minted, TikZ, xstring, xint)&lt;/li&gt; &#xA; &lt;li&gt;python pygments&lt;/li&gt; &#xA; &lt;li&gt;rr, gdb&lt;/li&gt; &#xA; &lt;li&gt;objdump&lt;/li&gt; &#xA; &lt;li&gt;awk, sed&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build graph&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fabbing/obts_exn/master/buildgraph.svg?sanitize=true&#34; alt=&#34;build graph diagram&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cdelledonne/llresume</title>
    <updated>2022-11-21T01:40:56Z</updated>
    <id>tag:github.com,2022-11-21:/cdelledonne/llresume</id>
    <link href="https://github.com/cdelledonne/llresume" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lean LaTeX résumé class&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lean LaTeX Résumé&lt;/h1&gt; &#xA;&lt;p&gt;This project provides a LaTeX class &lt;code&gt;llresume.cls&lt;/code&gt; to easily write lean résumés using your favorite typesetting language.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can edit and compile the résumé on &lt;a href=&#34;https://www.overleaf.com/latex/templates/lean-latex-resume/sjbtgfrzjkdw&#34;&gt;Overleaf&lt;/a&gt; or clone this repository and compile it yourself. Look into &lt;a href=&#34;https://raw.githubusercontent.com/cdelledonne/llresume/main/main.tex&#34;&gt;main.tex&lt;/a&gt; for a comprehensive example and for how to use this class.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;The two images below showcase the look of &lt;code&gt;llresume&lt;/code&gt;. The left-hand side image is the default look, while the right-hand side image is the look with the &lt;code&gt;compact&lt;/code&gt; class option and some alternative colors. The corresponding PDF files are inside the &lt;a href=&#34;https://raw.githubusercontent.com/cdelledonne/llresume/main/showcase&#34;&gt;showcase&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cdelledonne/llresume/main/showcase/sidebyside.png&#34; alt=&#34;showcase&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ongardie/dissertation</title>
    <updated>2022-11-21T01:40:56Z</updated>
    <id>tag:github.com,2022-11-21:/ongardie/dissertation</id>
    <link href="https://github.com/ongardie/dissertation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sources for my PhD dissertation on the Raft consensus algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Consensus: Bridging Theory and Practice&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains Diego Ongaro&#39;s PhD dissertation, &lt;em&gt;Consensus: Bridging Theory and Practice&lt;/em&gt;, published by Stanford University in 2014. The dissertation PDFs and the dissertation sources are licensed under the Creative Commons Attribution license, as described in the &lt;a href=&#34;https://raw.githubusercontent.com/ongardie/dissertation/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Several pre-built PDFs are included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ongardie/dissertation/master/book.pdf?raw=true&#34;&gt;book.pdf&lt;/a&gt;: formatted for a printed book (8.5x11&#34; pages, bigger inside margins for binding, black hyperlinks)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ongardie/dissertation/master/online.pdf?raw=true&#34;&gt;online.pdf&lt;/a&gt;: formatted for normal digital or print use (8.5x11&#34; pages, consistent margins on all pages, blue hyperlinks)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ongardie/dissertation/master/online-trim.pdf?raw=true&#34;&gt;online-trim.pdf&lt;/a&gt;: formatted for digital viewing (6.6x9.35&#34; pages, minimal margins, blue hyperlinks)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ongardie/dissertation/master/stanford.pdf?raw=true&#34;&gt;stanford.pdf&lt;/a&gt;: exact file distributed by Stanford University (similar to &lt;code&gt;online.pdf&lt;/code&gt;; copyright, signature, and preface pages differ)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of these use the same page numbers starting at page 1, though &lt;code&gt;book.pdf&lt;/code&gt; has an additional blank page before the introduction (page xviii).&lt;/p&gt; &#xA;&lt;p&gt;The source materials for the dissertation are made available here in the hopes that they might be useful, for example, to reformat the dissertation for a different medium or to copy sections for use in other documents (per the &lt;a href=&#34;https://raw.githubusercontent.com/ongardie/dissertation/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;). It requires the following to build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU make&lt;/li&gt; &#xA; &lt;li&gt;pdflatex&lt;/li&gt; &#xA; &lt;li&gt;bibtex&lt;/li&gt; &#xA; &lt;li&gt;Inkscape (to convert SVG images and layers from SVG images to PDF format)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updates and Errata&lt;/h2&gt; &#xA;&lt;h3&gt;Chapter 3: Basic Raft algorithm&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Figure 3.1 (cheatsheet): Although lastApplied is listed as volatile state, it should be as volatile as the state machine. If the state machine is volatile, lastApplied should be volatile. If the state machine is persistent, lastApplied should be just as persistent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 4: Cluster membership changes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There&#39;s an &lt;strong&gt;important bug&lt;/strong&gt; in single-server changes, fortunately with an easy fix. See the &lt;a href=&#34;https://groups.google.com/d/msg/raft-dev/t4xj6dJTP6E/d2D9LrWRza8J&#34;&gt;raft-dev post&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 6: Client interaction&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;it would extends its lease&#34; should read &#34;it would extend its lease&#34; (Figure 6.3 caption).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 7: Raft user study / Appendix A: User study materials&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Log Completeness&#34; should read &#34;Leader Completeness&#34; (3x).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 8: Correctness / Appendix B: Safety proof and formal specification&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Verdi team at the University of Washington has completed a machine-checked proof of safety for the basic Raft algorithm in Coq. See the &lt;a href=&#34;https://news.cs.washington.edu/2015/08/07/uw-cses-verdi-team-completes-first-full-formal-verification-of-raft-consensus-protocol/&#34;&gt;press release&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There have been a few minor updates to the TLA+ specification: &lt;a href=&#34;https://github.com/ongardie/raft.tla&#34;&gt;https://github.com/ongardie/raft.tla&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 10: Implementation and performance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first implementation of pipelining wasn&#39;t quite right and never made it into LogCabin&#39;s master branch. &lt;a href=&#34;https://github.com/logcabin/logcabin/issues/97&#34;&gt;Issue 97&lt;/a&gt; tracks this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bibliography&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Raft website has moved to &lt;a href=&#34;https://raft.github.io&#34;&gt;https://raft.github.io&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>