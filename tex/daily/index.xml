<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-31T01:43:56Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zemirco/nodejs-pdf-docs</title>
    <updated>2023-08-31T01:43:56Z</updated>
    <id>tag:github.com,2023-08-31:/zemirco/nodejs-pdf-docs</id>
    <link href="https://github.com/zemirco/nodejs-pdf-docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js Manual &amp; Documentation (.pdf, .mobi, .epub)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Manual &amp;amp; Documentation (.pdf, .mobi, .epub)&lt;/h1&gt; &#xA;&lt;p&gt;It all started with my desire to have a nicely formatted version of the node.js manual &amp;amp; documentation as a printable pdf with a cover, table of content, indented code blocks and so on. Then came requests for a .mobi (Kindle) file and an .epub (iOS, Android and more) file.&lt;/p&gt; &#xA;&lt;p&gt;Of course the whole creation and conversion process is written in node.js.&lt;/p&gt; &#xA;&lt;p&gt;Current version of node.js in the docs: &lt;strong&gt;0.12.5&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;Just check out the different folders or download directly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeMirco/nodejs-pdf-docs/raw/master/pdf/all.pdf?raw=true&#34;&gt;pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeMirco/nodejs-pdf-docs/raw/master/epub/nodejs-manual.epub?raw=true&#34;&gt;epub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeMirco/nodejs-pdf-docs/raw/master/mobi/nodejs-manual.mobi?raw=true&#34;&gt;mobi&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Create your own files&lt;/h2&gt; &#xA;&lt;p&gt;You need to have &lt;a href=&#34;http://johnmacfarlane.net/pandoc/&#34;&gt;pandoc&lt;/a&gt; installed on your system. All the markdown files from the &lt;a href=&#34;https://github.com/joyent/node&#34;&gt;node repository&lt;/a&gt; should be placed inside the markdown folder.&lt;/p&gt; &#xA;&lt;h3&gt;Create .pdf&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;node app.js&lt;/code&gt; to create the .tex files&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;Manually edit the few files as shown in all.tex (or run &lt;code&gt;node cleanTex.js&lt;/code&gt;)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create the pdf with pdfLaTeX&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Customizing&lt;/h4&gt; &#xA;&lt;p&gt;Use options.tex and run latex to customize your own manual.&lt;/p&gt; &#xA;&lt;h3&gt;Create .epub&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;node epub.js&lt;/code&gt; to create the file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Create .mobi&lt;/h3&gt; &#xA;&lt;p&gt;The .mobi version is created from the .epub file which gives better results compared to converting the .pdf file.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;code&gt;kindlegen&lt;/code&gt; from this repository or directly from &lt;a href=&#34;http://www.amazon.com/gp/feature.html?ie=UTF8&amp;amp;docId=1000234621&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;node mobi.js&lt;/code&gt; to create the file. The file is located inside the epub folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2014 [Mirco Zeiss](mailto: &lt;a href=&#34;mailto:mirco.zeiss@gmail.com&#34;&gt;mirco.zeiss@gmail.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vanderlee/phpSyllable</title>
    <updated>2023-08-31T01:43:56Z</updated>
    <id>tag:github.com,2023-08-31:/vanderlee/phpSyllable</id>
    <link href="https://github.com/vanderlee/phpSyllable" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PHP Syllable splitter/counter and Hyphenator for text and HTML. Multi-language, customisable, cached and fast!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Syllable&lt;/h1&gt; &#xA;&lt;p&gt;Version 1.7&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vanderlee/phpSyllable/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/vanderlee/phpSyllable/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright Â© 2011-2023 Martijn van der Lee. MIT Open Source license applies.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;PHP Syllable splitting and hyphenation. or rather... PHP Syl-la-ble split-ting and hy-phen-ation.&lt;/p&gt; &#xA;&lt;p&gt;Based on the work by Frank M. Liang (&lt;a href=&#34;http://www.tug.org/docs/liang/&#34;&gt;http://www.tug.org/docs/liang/&lt;/a&gt;) and the many volunteers in the TeX community.&lt;/p&gt; &#xA;&lt;p&gt;Many languages supported. i.e. english (us/uk), spanish, german, french, dutch, italian, romanian, russian, etc. 76 languages in total.&lt;/p&gt; &#xA;&lt;p&gt;Language sources: &lt;a href=&#34;http://tug.org/tex-hyphen/#languages&#34;&gt;http://tug.org/tex-hyphen/#languages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supports PHP 5.6 and up, so you can use it on older servers.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install phpSyllable via Composer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer require vanderlee/syllable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply add phpSyllable to your project and set up the project&#39;s autoloader for phpSyllable&#39;s src/ directory.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Instantiate a Syllable object and start hyphenation.&lt;/p&gt; &#xA;&lt;p&gt;Minimal example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;$syllable = new \Vanderlee\Syllable\Syllable(&#39;en-us&#39;);&#xA;echo $syllable-&amp;gt;hyphenateText(&#39;Provide a plethora of paragraphs&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extended example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;use Vanderlee\Syllable\Syllable;&#xA;use Vanderlee\Syllable\Hyphen;&#xA;&#xA;// Globally set the directory where Syllable can store cache files.&#xA;// By default, this is the cache/ folder in this package, but usually&#xA;// you want to have the folder outside the package. Note that the cache&#xA;// folder must be created beforehand.&#xA;Syllable::setCacheDir(__DIR__ . &#39;/cache&#39;);&#xA;&#xA;// Globally set the directory where the .tex files are stored.&#xA;// By default, this is the languages/ folder of this package and&#xA;// usually does not need to be adapted.&#xA;Syllable::setLanguageDir(__DIR__ . &#39;/languages&#39;);&#xA;&#xA;// Create a new instance for the language.&#xA;$syllable = new Syllable(&#39;en-us&#39;);&#xA;&#xA;// Set the style of the hyphen. In this case it is the &#34;-&#34; character.&#xA;// By default, it is the soft hyphen &#34;&amp;amp;shy;&#34;.&#xA;$syllable-&amp;gt;setHyphen(new Hyphen\Dash());&#xA;&#xA;// Set the minimum word length required for hyphenation.&#xA;// By default, all words are hyphenated.&#xA;$syllable-&amp;gt;setMinWordLength(5);&#xA;&#xA;// Output hyphenated text ..&#xA;echo $syllable-&amp;gt;hyphenateText(&#39;Provide your own paragraphs...&#39;);&#xA;// .. or hyphenated HTML.&#xA;echo $syllable-&amp;gt;hyphenateHtmlText(&#39;&amp;lt;b&amp;gt;... with highlighted text.&amp;lt;/b&amp;gt;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/vanderlee/phpSyllable/master/demo.php&#34;&gt;demo.php&lt;/a&gt; file for a working example.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Syllable&lt;/code&gt; API reference&lt;/h2&gt; &#xA;&lt;p&gt;The following describes the API of the main Syllable class. In most cases, you will not use any other functions. Browse the code under src/ for all available functions.&lt;/p&gt; &#xA;&lt;h4&gt;public __construct($language = &#39;en-us&#39;, string|Hyphen $hyphen = null)&lt;/h4&gt; &#xA;&lt;p&gt;Create a new Syllable class, with defaults.&lt;/p&gt; &#xA;&lt;h4&gt;public static setCacheDir(string $dir)&lt;/h4&gt; &#xA;&lt;p&gt;Set the directory where compiled language files may be stored. Default to the &lt;code&gt;cache&lt;/code&gt; subdirectory of the current directory.&lt;/p&gt; &#xA;&lt;h4&gt;public static setEncoding(string|null $encoding = null)&lt;/h4&gt; &#xA;&lt;p&gt;Set the character encoding to use. Specify &lt;code&gt;null&lt;/code&gt; encoding to not apply any encoding at all.&lt;/p&gt; &#xA;&lt;h4&gt;public static setLanguageDir(string $dir)&lt;/h4&gt; &#xA;&lt;p&gt;Set the directory where language source files can be found. Default to the &lt;code&gt;languages&lt;/code&gt; subdirectory of the current directory.&lt;/p&gt; &#xA;&lt;h4&gt;public setLanguage(string $language)&lt;/h4&gt; &#xA;&lt;p&gt;Set the language whose rules will be used for hyphenation.&lt;/p&gt; &#xA;&lt;h4&gt;public setHyphen(mixed $hyphen)&lt;/h4&gt; &#xA;&lt;p&gt;Set the hyphen text or object to use as a hyphen marker.&lt;/p&gt; &#xA;&lt;h4&gt;public getHyphen(): Hyphen&lt;/h4&gt; &#xA;&lt;p&gt;Get the current hyphen object.&lt;/p&gt; &#xA;&lt;h4&gt;public setCache(Cache $cache = null)&lt;/h4&gt; &#xA;&lt;h4&gt;public getCache(): Cache&lt;/h4&gt; &#xA;&lt;h4&gt;public setSource($source)&lt;/h4&gt; &#xA;&lt;h4&gt;public getSource(): Source&lt;/h4&gt; &#xA;&lt;h4&gt;public setMinWordLength(int $length = 0)&lt;/h4&gt; &#xA;&lt;p&gt;Words need to contain at least this many character to be hyphenated.&lt;/p&gt; &#xA;&lt;h4&gt;public getMinWordLength(): int&lt;/h4&gt; &#xA;&lt;h4&gt;public setLibxmlOptions(int $libxmlOptions)&lt;/h4&gt; &#xA;&lt;p&gt;Options to use for HTML parsing by libxml. &lt;strong&gt;See:&lt;/strong&gt; &lt;a href=&#34;https://www.php.net/manual/de/libxml.constants.php&#34;&gt;https://www.php.net/manual/de/libxml.constants.php&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;public excludeAll()&lt;/h4&gt; &#xA;&lt;p&gt;Exclude all elements.&lt;/p&gt; &#xA;&lt;h4&gt;public excludeElement(string|string[] $elements)&lt;/h4&gt; &#xA;&lt;p&gt;Add one or more elements to exclude from HTML.&lt;/p&gt; &#xA;&lt;h4&gt;public excludeAttribute(string|string[] $attributes, $value = null)&lt;/h4&gt; &#xA;&lt;p&gt;Add one or more elements with attributes to exclude from HTML.&lt;/p&gt; &#xA;&lt;h4&gt;public excludeXpath(string|string[] $queries)&lt;/h4&gt; &#xA;&lt;p&gt;Add one or more xpath queries to exclude from HTML.&lt;/p&gt; &#xA;&lt;h4&gt;public includeElement(string|string[] $elements)&lt;/h4&gt; &#xA;&lt;p&gt;Add one or more elements to include from HTML.&lt;/p&gt; &#xA;&lt;h4&gt;public includeAttribute(string|string[] $attributes, $value = null)&lt;/h4&gt; &#xA;&lt;p&gt;Add one or more elements with attributes to include from HTML.&lt;/p&gt; &#xA;&lt;h4&gt;public includeXpath(string|string[] $queries)&lt;/h4&gt; &#xA;&lt;p&gt;Add one or more xpath queries to include from HTML.&lt;/p&gt; &#xA;&lt;h4&gt;public splitWord(string $word): array&lt;/h4&gt; &#xA;&lt;p&gt;Split a single word on where the hyphenation would go. Punctuation is not supported, only simple words. For parsing whole sentences please use Syllable::splitWords() or Syllable::splitText().&lt;/p&gt; &#xA;&lt;h4&gt;public splitWords(string $text): array&lt;/h4&gt; &#xA;&lt;p&gt;Split a text into an array of punctuation marks and words, splitting each word on where the hyphenation would go.&lt;/p&gt; &#xA;&lt;h4&gt;public splitText(string $text): array&lt;/h4&gt; &#xA;&lt;p&gt;Split a text on where the hyphenation would go.&lt;/p&gt; &#xA;&lt;h4&gt;public hyphenateWord(string $word): string&lt;/h4&gt; &#xA;&lt;p&gt;Hyphenate a single word.&lt;/p&gt; &#xA;&lt;h4&gt;public hyphenateText(string $text): string&lt;/h4&gt; &#xA;&lt;p&gt;Hyphenate all words in the plain text.&lt;/p&gt; &#xA;&lt;h4&gt;public hyphenateHtml(string $html): string&lt;/h4&gt; &#xA;&lt;p&gt;Hyphenate all readable text in the HTML, excluding HTML tags and attributes. &lt;strong&gt;Deprecated:&lt;/strong&gt; Use the UTF-8 capable hyphenateHtmlText() instead. This method is kept only for backward compatibility and will be removed in the next major version 2.0.&lt;/p&gt; &#xA;&lt;h4&gt;public hyphenateHtmlText(string $html): string&lt;/h4&gt; &#xA;&lt;p&gt;Hyphenate all readable text in the HTML, excluding HTML tags and attributes. This method is UTF-8 capable and should be preferred over hyphenateHtml().&lt;/p&gt; &#xA;&lt;h4&gt;public histogramText(string $text): array&lt;/h4&gt; &#xA;&lt;p&gt;Count the number of syllables in the text and return a map with syllable count as key and number of words for that syllable count as the value.&lt;/p&gt; &#xA;&lt;h4&gt;public countWordsText(string $text): int&lt;/h4&gt; &#xA;&lt;p&gt;Count the number of words in the text.&lt;/p&gt; &#xA;&lt;h4&gt;public countSyllablesText(string $text): int&lt;/h4&gt; &#xA;&lt;p&gt;Count the number of syllables in the text.&lt;/p&gt; &#xA;&lt;h4&gt;public countPolysyllablesText(string $text): int&lt;/h4&gt; &#xA;&lt;p&gt;Count the number of polysyllables in the text.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Update language files&lt;/h3&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer dump-autoload --dev&#xA;./build/update-language-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to fetch the latest language files remotely and optionally use environment variables to customize the update process:&lt;/p&gt; &#xA;&lt;h4&gt;CONFIGURATION_FILE&lt;/h4&gt; &#xA;&lt;p&gt;Specify the absolute path of the configuration file where the language files to be downloaded are defined. The configuration file has the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;&#x9;&#34;files&#34;: [&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;_comment&#34;: &#34;&amp;lt;comment&amp;gt;&#34;,&#xA;&#x9;&#x9;&#x9;&#34;fromUrl&#34;: &#34;&amp;lt;absolute-remote-file-url&amp;gt;&#34;,&#xA;&#x9;&#x9;&#x9;&#34;toPath&#34;: &#34;&amp;lt;relative-local-file-path&amp;gt;&#34;,&#xA;&#x9;&#x9;&#x9;&#34;disabled&#34;: &amp;lt;true|false&amp;gt;&#xA;&#x9;&#x9;}&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where the attributes are self-explanatory and &lt;code&gt;_comment&lt;/code&gt; and &lt;code&gt;disabled&lt;/code&gt; are optional. See for example &lt;a href=&#34;https://raw.githubusercontent.com/vanderlee/phpSyllable/master/build/update-language-files.json&#34;&gt;build/update-language-files.json&lt;/a&gt;. Default: The &lt;code&gt;build/update-language-files.json&lt;/code&gt; file of this package.&lt;/p&gt; &#xA;&lt;h4&gt;MAX_REDIRECTS&lt;/h4&gt; &#xA;&lt;p&gt;Specify the maximum number of URL redirects allowed when retrieving a language file. Default: &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;WITH_COMMIT&lt;/h4&gt; &#xA;&lt;p&gt;Create (1) or skip (0) a Git commit from the updated language files. Default: &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;LOG_LEVEL&lt;/h4&gt; &#xA;&lt;p&gt;Set the verbosity of the script to verbose (6), warnings and errors (4), errors only (3) or silent (0). Default: &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer dump-autoload --dev&#xA;LOG_LEVEL=0 ./build/update-language-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to silently run the script without outputting any logging.&lt;/p&gt; &#xA;&lt;h3&gt;Update API documentation&lt;/h3&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer dump-autoload --dev&#xA;./build/generate-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to update the API documentation in this README.md. This should be done when the Syllable class has been modified. Optionally, you can use environment variables to modify the documentation update process:&lt;/p&gt; &#xA;&lt;h4&gt;WITH_COMMIT&lt;/h4&gt; &#xA;&lt;p&gt;Create (1) or skip (0) a Git commit from the adapted files. Default: &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;LOG_LEVEL&lt;/h4&gt; &#xA;&lt;p&gt;Set the verbosity of the script to verbose (6), warnings and errors (4), errors only (3) or silent (0). Default: &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create release&lt;/h3&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer dump-autoload --dev&#xA;./build/create-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to create a local release of the project by adding a changelog to this README.md. Optionally, you can use environment variables to modify the release process:&lt;/p&gt; &#xA;&lt;h4&gt;RELEASE_TYPE&lt;/h4&gt; &#xA;&lt;p&gt;Set the release type to major (0), minor (1) or patch (2) release. Default: &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;WITH_COMMIT&lt;/h4&gt; &#xA;&lt;p&gt;Create (1) or skip (0) a Git commit from the adapted files and apply the release tag. Default: &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;LOG_LEVEL&lt;/h4&gt; &#xA;&lt;p&gt;Set the verbosity of the script to verbose (6), warnings and errors (4), errors only (3) or silent (0). Default: &lt;code&gt;6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;composer install&#xA;./vendor/bin/phpunit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to execute the tests.&lt;/p&gt; &#xA;&lt;h2&gt;Changes&lt;/h2&gt; &#xA;&lt;p&gt;1.7&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use \hyphenations case-insensitive (like \patterns)&lt;/li&gt; &#xA; &lt;li&gt;Correct handling of UTF-8 character sets when hyphenating HTML using the new Syllable::hyphenateHtmlText()&lt;/li&gt; &#xA; &lt;li&gt;Replace invalid &#34;en&#34; with &#34;en-us&#34; as default language of Syllable&lt;/li&gt; &#xA; &lt;li&gt;Update of hyph-de.tex&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.6&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Revert renaming of API method names&lt;/li&gt; &#xA; &lt;li&gt;Use cache version as string instead of number&lt;/li&gt; &#xA; &lt;li&gt;Cover caching with tests&lt;/li&gt; &#xA; &lt;li&gt;Reduce the PHP test matrix to the latest versions of PHP 5, 7 and 8&lt;/li&gt; &#xA; &lt;li&gt;Check via GitHub Action if the API documentation is up-to-date&lt;/li&gt; &#xA; &lt;li&gt;Update API reference&lt;/li&gt; &#xA; &lt;li&gt;Fix API documentation of an array as parameter default value&lt;/li&gt; &#xA; &lt;li&gt;Satisfy StyleCI&lt;/li&gt; &#xA; &lt;li&gt;Commit changed files of entire working tree in build context&lt;/li&gt; &#xA; &lt;li&gt;Support for generation of API documentation in README.md&lt;/li&gt; &#xA; &lt;li&gt;Add words with reduced hyphenation to collection from PR #26&lt;/li&gt; &#xA; &lt;li&gt;Satisfy StyleCI&lt;/li&gt; &#xA; &lt;li&gt;Add test for collection of words with reduced hyphenation&lt;/li&gt; &#xA; &lt;li&gt;Refactor splitWord(), splitWords() and splitText() of Syllable class&lt;/li&gt; &#xA; &lt;li&gt;Remove @covers annotation in tests&lt;/li&gt; &#xA; &lt;li&gt;Added splitWords and various code quality improvements&lt;/li&gt; &#xA; &lt;li&gt;Update the README.md copyright claim on release&lt;/li&gt; &#xA; &lt;li&gt;Skip GitHub Action scheduler in forks and run tests only in PR context&lt;/li&gt; &#xA; &lt;li&gt;Allow GitHub Action &#34;Update languages&#34; workflow to bypass reviews&lt;/li&gt; &#xA; &lt;li&gt;Use German orthography from 2006 as standard orthography&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.5.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic update of 74 languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.5.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically run tests for every push and pull request&lt;/li&gt; &#xA; &lt;li&gt;Automatic monthly update and release of language files&lt;/li&gt; &#xA; &lt;li&gt;Fix small typo in README and add &#39;use&#39; in example.&lt;/li&gt; &#xA; &lt;li&gt;Use same code format as in src/Source/File.php&lt;/li&gt; &#xA; &lt;li&gt;Fix opening brace&lt;/li&gt; &#xA; &lt;li&gt;Remove whitespace&lt;/li&gt; &#xA; &lt;li&gt;Fix closing brace&lt;/li&gt; &#xA; &lt;li&gt;Use PHP syntax highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.5.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed PHP 7.4 compatibility (#37) by @Dargmuesli.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.5.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug reverted in refactoring (continue 3) by @Dargmuesli.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.5.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixed bug reverted in refactoring (continue 2).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refactored for modern PHP and support for current PHP version.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.4.6&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;code&gt;setMinWordLength($length)&lt;/code&gt; and &lt;code&gt;getMinWordLength()&lt;/code&gt; to limit hyphenation to words with at least the specified number of characters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.4.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fixes for composer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.4.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Composer autoloader added&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.4.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.4.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Updated spanish language files.&lt;/li&gt; &#xA; &lt;li&gt;Initial PHPDoc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.4.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More fixes for apostrophes in splitting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix for French language handling&lt;/li&gt; &#xA; &lt;li&gt;Refactor .text loading into source class.&lt;/li&gt; &#xA; &lt;li&gt;Massive cache performance increase (excessive writes).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.3.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix slow initial cache writing; too many writes (only one was needed).&lt;/li&gt; &#xA; &lt;li&gt;Removed min_hyphenation; mb_strlen takes more time than hashmap lookup.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;code&gt;array histogramText($text)&lt;/code&gt;, &lt;code&gt;integer countWordsText($text)&lt;/code&gt; and &lt;code&gt;integer countPolysyllableText($text)&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;Refactored cache interface.&lt;/li&gt; &#xA; &lt;li&gt;Improved unittests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;1.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Deprecated treshold feature. Was based on misinterpretation of the algorithm. Methods, constants and constructor signature unchanged, although you can now omit the treshold if you want (or leave it in, it&#39;s detected as a &#34;fake&#34; treshold).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>