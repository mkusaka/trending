<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-05T01:41:17Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>BachiLi/balboa_public</title>
    <updated>2023-10-05T01:41:17Z</updated>
    <id>tag:github.com,2023-10-05:/BachiLi/balboa_public</id>
    <link href="https://github.com/BachiLi/balboa_public" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;balboa&lt;/h1&gt; &#xA;&lt;p&gt;UCSD CSE 167 codebase &lt;a href=&#34;https://cseweb.ucsd.edu/~tzli/cse167/&#34;&gt;https://cseweb.ucsd.edu/~tzli/cse167/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Build&lt;/h1&gt; &#xA;&lt;p&gt;All the dependencies are included. Use CMake to build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/BachiLi/balboa_public mkdir build&#xA;cd build&#xA;cmake ..&#xA;make -j&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It requires compilers that support C++17 (gcc version &amp;gt;= 8, clang version &amp;gt;= 7, Apple Clang version &amp;gt;= 11.0, MSVC version &amp;gt;= 19.14).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;For Windows users:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2022&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;. Choose &#34;Desktop development with C++&#34; and check &#34;C++ CMake tools for Windows&#34; on the recipe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/BachiLi/balboa_public&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd balboa_public; mkdir build; cd build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake ..&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;At this point, you can either open up the &lt;code&gt;balboa.sln&lt;/code&gt; in &lt;code&gt;build&lt;/code&gt; folder and use Visual Studio as your IDE, or work with Visual Studio Code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;(optional) To build, run, and debug in VS Code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the bottom bar, configure CMake as follows (from left to right): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Build variant: &lt;code&gt;RelWithDebInfo&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Active kit: &lt;code&gt;Visual Studio ... x64&lt;/code&gt;, choose the appropriate one depending on your architecture.&lt;/li&gt; &#xA;   &lt;li&gt;Default build target: &lt;code&gt;balboa&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;launch.json&lt;/code&gt; in &lt;code&gt;.vscode&lt;/code&gt; folder: &lt;pre&gt;&lt;code&gt;{&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;hw1_1&#34;, &#xA;            &#34;type&#34;: &#34;cppvsdbg&#34;, &#xA;            &#34;request&#34;: &#34;launch&#34;, &#xA;            &#34;program&#34;: &#34;${workspaceFolder}/build/${command:cmake.buildType}/balboa.exe&#34;,&#xA;            &#34;cwd&#34;: &#34;${workspaceFolder}/build/${command:cmake.buildType}&#34;, &#xA;            &#34;args&#34;: [&#34;-hw&#34;, &#34;1_1&#34;]&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; You can pass arguments using &lt;code&gt;args&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;Ctrl+Shift+D&lt;/code&gt; to start the debugger. You can set breakpoints, inspect variables, and trace callstack, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Run&lt;/h1&gt; &#xA;&lt;p&gt;Try&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd build&#xA;./balboa -hw 1_1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate an image &#34;hw1_1.png&#34;.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgement&lt;/h1&gt; &#xA;&lt;p&gt;stb_image, stb_image_write, json, tinyply, GLFW, and glad&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb_image&lt;/a&gt; and &lt;a href=&#34;https://github.com/nothings/stb&#34;&gt;stb_image_write&lt;/a&gt; for reading &amp;amp; writing images.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/nlohmann/json&#34;&gt;json&lt;/a&gt; to parse JSON files.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/ddiakopoulos/tinyply&#34;&gt;tinyply&lt;/a&gt; for parsing PLY files.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://www.glfw.org/&#34;&gt;glfw&lt;/a&gt; and &lt;a href=&#34;https://glad.dav1d.de/&#34;&gt;glad&lt;/a&gt; for the OpenGL homeworks.&lt;/p&gt; &#xA;&lt;p&gt;3D models and textures: &lt;a href=&#34;https://graphics.stanford.edu/data/3Dscanrep/&#34;&gt;Stanford 3D Scanning Repository&lt;/a&gt;, &lt;a href=&#34;https://blenderartists.org/t/uv-unwrapped-stanford-bunny-happy-spring-equinox/1101297&#34;&gt;KickAir_8p&lt;/a&gt;, and &lt;a href=&#34;http://kunzhou.net/tex-models.htm&#34;&gt;Texturemontage&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>robjhyndman/weird</title>
    <updated>2023-10-05T01:41:17Z</updated>
    <id>tag:github.com,2023-10-05:/robjhyndman/weird</id>
    <link href="https://github.com/robjhyndman/weird" rel="alternate"></link>
    <summary type="html">&lt;p&gt;That&#39;s weird: Anomaly detection using R&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;That&#39;s weird&lt;/h1&gt; &#xA;&lt;h3&gt;Anomaly and outlier detection using R&lt;/h3&gt;</summary>
  </entry>
</feed>