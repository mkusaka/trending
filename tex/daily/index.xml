<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-23T01:40:35Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jump-dev/MutableArithmetics.jl</title>
    <updated>2022-11-23T01:40:35Z</updated>
    <id>tag:github.com,2022-11-23:/jump-dev/MutableArithmetics.jl</id>
    <link href="https://github.com/jump-dev/MutableArithmetics.jl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interface for arithmetics on mutable types in Julia&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MutableArithmetics.jl&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jump.dev/MutableArithmetics.jl/stable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-stable-blue.svg?sanitize=true&#34; alt=&#34;Stable&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jump.dev/MutableArithmetics.jl/dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-dev-blue.svg?sanitize=true&#34; alt=&#34;Dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jump-dev/MutableArithmetics.jl/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/jump-dev/MutableArithmetics.jl/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/jump-dev/MutableArithmetics.jl&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/jump-dev/MutableArithmetics.jl/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://juliahub.com/ui/Packages/MutableArithmetics/EoEec?t=2&#34;&gt;&lt;img src=&#34;https://juliahub.com/docs/MutableArithmetics/deps.svg?sanitize=true&#34; alt=&#34;deps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://juliahub.com/ui/Packages/MutableArithmetics/EoEec&#34;&gt;&lt;img src=&#34;https://juliahub.com/docs/MutableArithmetics/version.svg?sanitize=true&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://juliahub.com/ui/Packages/MutableArithmetics/EoEec&#34;&gt;&lt;img src=&#34;https://juliahub.com/docs/MutableArithmetics/pkgeval.svg?sanitize=true&#34; alt=&#34;pkgeval&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MutableArithmetics&lt;/strong&gt; (MA for short) is a &lt;a href=&#34;http://julialang.org&#34;&gt;Julia&lt;/a&gt; package which allows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for mutable types to implement mutable arithmetics&lt;/li&gt; &#xA; &lt;li&gt;for algorithms that could exploit mutable arithmetics to exploit them while still being completely generic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While in some cases, similar features have been included in packages idiosyncratically, the goal of MutableArithmetics is to provide a generic interface to allow anyone to make use of mutability when desired.&lt;/p&gt; &#xA;&lt;p&gt;The package allows a type to declare itself mutable through the &lt;code&gt;MA.mutability&lt;/code&gt; trait. Then the user can use the &lt;code&gt;MA.operate!!&lt;/code&gt; function to write generic code that works for arbitrary type while exploiting mutability of the type if possible. More precisely:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;MA.operate!!(op::Function, x, args...)&lt;/code&gt; redirects to &lt;code&gt;op(x, args...)&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is not mutable or if the result of the operation cannot be stored in &lt;code&gt;x&lt;/code&gt;. Otherwise, it redirects to &lt;code&gt;MA.operate!(op, x, args...)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MA.operate!(op::Function, x, args...)&lt;/code&gt; stores the result of the operation in &lt;code&gt;x&lt;/code&gt;. It is a &lt;code&gt;MethodError&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is not mutable or if the result of the operation cannot be stored in &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;So from a generic code perspective, &lt;code&gt;MA.operate!!&lt;/code&gt; can be used when the value of &lt;code&gt;x&lt;/code&gt; is not used anywhere else. This allows the code to both work for mutable and for non-mutable type.&lt;/p&gt; &#xA;&lt;p&gt;When the type is known to be mutable, &lt;code&gt;MA.operate!&lt;/code&gt; can be used to make sure the operation is done in-place. If it is not possible, the &lt;code&gt;MethodError&lt;/code&gt; allows one to easily fix the issue while &lt;code&gt;MA.operate!!&lt;/code&gt; would have silently fallen back to the non-mutating function.&lt;/p&gt; &#xA;&lt;p&gt;In conclusion, the distinction between &lt;code&gt;MA.operate!!&lt;/code&gt; and &lt;code&gt;MA.operate!&lt;/code&gt; covers all use case while having an universal convention accross all operations.&lt;/p&gt; &#xA;&lt;h2&gt;Implementations&lt;/h2&gt; &#xA;&lt;p&gt;The following types and packages implement the MutableArithmetics API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Base.BigInt&lt;/code&gt; in &lt;code&gt;src/interfaces/BigInt.jl&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Base.BigFloat&lt;/code&gt; in &lt;code&gt;src/interfaces/BigFloat.jl&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Base.Array&lt;/code&gt; in &lt;code&gt;src/interfaces/LinearAlgebra.jl&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JuliaMath/Polynomials.jl&#34;&gt;Polynomials.jl&lt;/a&gt; uses MA for its &lt;code&gt;Polynomial&lt;/code&gt; type&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JuliaAlgebra/MultivariatePolynomials.jl&#34;&gt;MultivariatePolynomials&lt;/a&gt; uses MA for its multivariate polynomials, as well as its two implementations in &lt;a href=&#34;https://github.com/JuliaAlgebra/DynamicPolynomials.jl&#34;&gt;DynamicPolynomials&lt;/a&gt; and &lt;a href=&#34;https://github.com/JuliaAlgebra/TypedPolynomials.jl&#34;&gt;TypedPolynomials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jump-dev/JuMP.jl&#34;&gt;JuMP&lt;/a&gt; and &lt;a href=&#34;https://github.com/jump-dev/MathOptInterface.jl&#34;&gt;MathOptInterface&lt;/a&gt; use MA for the scalar and quadratic functions used to define an optimization program&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, the implementation of the following &lt;code&gt;Base&lt;/code&gt; functionalities are reimplemented using the MA API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Matrix-matrix, matrix-vector and array-scalar multiplication including &lt;code&gt;SparseArrays.AbstractSparseArray&lt;/code&gt;, &lt;code&gt;LinearAlgebra.Adjoint&lt;/code&gt;, &lt;code&gt;LinearAlgebra.Transpose&lt;/code&gt;, &lt;code&gt;LinearAlgebra.Symmetric&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Base.sum&lt;/code&gt;, &lt;code&gt;LinearAlgebra.dot&lt;/code&gt; and &lt;code&gt;LinearAlgebra.diagm&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These methods are reimplemented in this package for several reasons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The implementation in &lt;code&gt;Base&lt;/code&gt; does not exploit the mutability of the type (except for &lt;code&gt;sum(::Vector{BigInt})&lt;/code&gt; which has a specialized method) and are hence much slower.&lt;/li&gt; &#xA; &lt;li&gt;Some implementations in &lt;code&gt;Base&lt;/code&gt; assume the following for the types &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt; used satisfy: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;typeof(zero(T)) == T&lt;/code&gt;, &lt;code&gt;typeof(one(T)) == T&lt;/code&gt;, &lt;code&gt;typeof(S + T) == promote_type(S, T)&lt;/code&gt; or &lt;code&gt;typeof(S * T) == promote_type(S, T)&lt;/code&gt; which is not true for instance if &lt;code&gt;T&lt;/code&gt; is a polynomial variable or the decision variable of an optimization model.&lt;/li&gt; &#xA;   &lt;li&gt;The multiplication between elements of type &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; is commutative which is not true for matrices or non-commutative polynomial variables.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The trait defined in this package cannot make the methods for the functions defined in Base to be dispatched to the implementations of this package. For these to be used for a given type, it needs to inherit from &lt;code&gt;MA.AbstractMutable&lt;/code&gt;. Not that subtypes of &lt;code&gt;MA.AbstractMutable&lt;/code&gt; are not necessarily mutable, for instance, polynomial variables and the decision variable of an optimization model are subtypes of &lt;code&gt;MA.AbstractMutable&lt;/code&gt; but are not mutable. The only purpose of this abstract type is to have &lt;code&gt;Base&lt;/code&gt; methods to be dispatched to the implementations of this package. See &lt;code&gt;src/dispatch.jl&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Example &amp;amp; Benchmark&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using BenchmarkTools&#xA;using MutableArithmetics&#xA;const MA = MutableArithmetics&#xA;&#xA;n = 200&#xA;A = rand(-10:10, n, n)&#xA;b = rand(-10:10, n)&#xA;c = rand(-10:10, n)&#xA;&#xA;# MA.mul works for arbitrary types&#xA;MA.mul(A, b)&#xA;&#xA;A2 = big.(A)&#xA;b2 = big.(b)&#xA;c2 = big.(c)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default implementation &lt;code&gt;LinearAlgebra.generic_matvecmul!&lt;/code&gt; does not exploit the mutability of &lt;code&gt;BigInt&lt;/code&gt; is quite slow and allocates a lot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;using LinearAlgebra&#xA;trial = @benchmark LinearAlgebra.mul!($c2, $A2, $b2)&#xA;display(trial)&#xA;&#xA;# output&#xA;&#xA;BenchmarkTools.Trial: 407 samples with 1 evaluation.&#xA; Range (min … max):   5.268 ms … 161.929 ms  ┊ GC (min … max):  0.00% … 73.90%&#xA; Time  (median):      5.900 ms               ┊ GC (median):     0.00%&#xA; Time  (mean ± σ):   12.286 ms ±  21.539 ms  ┊ GC (mean ± σ):  29.47% ± 14.50%&#xA;&#xA;  █▃&#xA;  ██▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▅█▆▇▅▅ ▆&#xA;  5.27 ms       Histogram: log(frequency) by time      80.6 ms &amp;lt;&#xA;&#xA; Memory estimate: 3.66 MiB, allocs estimate: 197732.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In &lt;code&gt;MA.operate!(::typeof(MA.add_mul), ::Vector, ::Matrix, ::Vector)&lt;/code&gt;, we exploit the mutability of &lt;code&gt;BigInt&lt;/code&gt; through the MutableArithmetics API. This provides a significant speedup and a drastic reduction of memory usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;trial2 = @benchmark MA.add_mul!!($c2, $A2, $b2)&#xA;display(trial2)&#xA;&#xA;# output&#xA;&#xA;BenchmarkTools.Trial: 4878 samples with 1 evaluation.&#xA; Range (min … max):  908.860 μs …   1.758 ms  ┊ GC (min … max): 0.00% … 0.00%&#xA; Time  (median):       1.001 ms               ┊ GC (median):    0.00%&#xA; Time  (mean ± σ):     1.021 ms ± 102.381 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%&#xA;&#xA;  █▅&#xA;  ██▂▂▂▇▅▇▇▅▅▅▇▅▆▄▄▅▄▄▃▄▄▃▃▂▃▃▂▃▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂&#xA;  909 μs           Histogram: frequency by time         1.36 ms &amp;lt;&#xA;&#xA; Memory estimate: 48 bytes, allocs estimate: 3.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is still 48 bytes that are allocated, where does this come from ? &lt;code&gt;MA.operate!(::typeof(MA.add_mul), ::BigInt, ::BigInt, ::BigInt)&lt;/code&gt; allocates a temporary &lt;code&gt;BigInt&lt;/code&gt; to hold the result of the multiplication. This buffer is allocated only once for the whole matrix-vector multiplication through the system of buffers of MutableArithmetics. If may Matrix-Vector products need to be computed, the buffer can even be allocated outside of the matrix-vector product as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;buffer = MA.buffer_for(MA.add_mul, typeof(c2), typeof(A2), typeof(b2))&#xA;trial3 = @benchmark MA.buffered_operate!!($buffer, MA.add_mul, $c2, $A2, $b2)&#xA;display(trial3)&#xA;&#xA;# output&#xA;&#xA;BenchmarkTools.Trial: 4910 samples with 1 evaluation.&#xA; Range (min … max):  908.414 μs …   1.774 ms  ┊ GC (min … max): 0.00% … 0.00%&#xA; Time  (median):     990.964 μs               ┊ GC (median):    0.00%&#xA; Time  (mean ± σ):     1.014 ms ± 103.364 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%&#xA;&#xA;  █▂&#xA;  ██▃▂▂▄▄▅▆▃▄▄▅▄▄▃▃▄▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂&#xA;  908 μs           Histogram: frequency by time         1.35 ms &amp;lt;&#xA;&#xA; Memory estimate: 0 bytes, allocs estimate: 0.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that there are now 0 allocations.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>riscv-non-isa/riscv-rvm-csi</title>
    <updated>2022-11-23T01:40:35Z</updated>
    <id>tag:github.com,2022-11-23:/riscv-non-isa/riscv-rvm-csi</id>
    <link href="https://github.com/riscv-non-isa/riscv-rvm-csi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RVM-CSI (RISC-V eMbedded - Common Software Interface) aims to provide a source-level portability layer providing a simplified transition path between different microcontrollers based on RISC-V. This repo contains the specification documentation, and language-specific source files for implementing the API (initially, C header files).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RISC-V docs-spec-template&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository is used to prime GitHub repos for the RISC-V organization which will be used to create specifications.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;strong&gt;If you are reading this in a specification repo, please update the title for this section and provide your introduction to your repository.&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 id=&#34;_license&#34; class=&#34;sect0&#34;&gt;License&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;This work is licensed under a Creative Commons Attribution 4.0 International License (CC-BY-4.0). See the &lt;a href=&#34;https://raw.githubusercontent.com/riscv-non-isa/riscv-rvm-csi/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 id=&#34;_contributors&#34; class=&#34;sect0&#34;&gt;Contributors&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;Contributors to this specification are contained in the &lt;a href=&#34;https://raw.githubusercontent.com/riscv-non-isa/riscv-rvm-csi/main/contributors.adoc&#34;&gt;contributors&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;For instructions on how to contribute please see the &lt;a href=&#34;https://raw.githubusercontent.com/riscv-non-isa/riscv-rvm-csi/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 id=&#34;_dependencies&#34; class=&#34;sect0&#34;&gt;Dependencies&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;This project is built using AsciiDoctor (Ruby). The repository has been setup to build the PDF on checkin using GitHub actions. Workflow dependencies are located in the &lt;code&gt;dependencies&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;For more information on AsciiDoctor, specification guidelines, or building locally, see the &lt;a href=&#34;https://github.com/riscv/docs-dev-guide&#34;&gt;RISC-V Documentation Developer Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 id=&#34;_cloning_the_project&#34; class=&#34;sect0&#34;&gt;Cloning the project&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;This project uses &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;GitHub Submodules&lt;/a&gt; to include the &lt;a href=&#34;https://github.com/riscv/docs-resources&#34;&gt;RISC-V docs-resources project&lt;/a&gt; to achieve a common look and feel.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;When cloning this repository for the first time, you must either use &lt;code&gt;git clone --recurse-submodules&lt;/code&gt; or execute &lt;code&gt;git submodule init&lt;/code&gt; and &lt;code&gt;git submodule update&lt;/code&gt; after the clone to populate the docs-resources directory. Failure to clone the submodule, will result in the PDF build fail with an error message like the following:&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;literalblock&#34;&gt; &#xA; &lt;div class=&#34;content&#34;&gt; &#xA;  &lt;pre&gt;$ make&#xA;asciidoctor-pdf     -a toc     -a compress     -a pdf-style=docs-resources/themes/riscv-pdf.yml     -a pdf-fontsdir=docs-resources/fonts     --failure-level=ERROR     -o profiles.pdf profiles.adoc&#xA;asciidoctor: ERROR: could not locate or load the built-in pdf theme `docs-resources/themes/riscv-pdf.yml&#39;; reverting to default theme&#xA;No such file or directory - notoserif-regular-subset.ttf not found in docs-resources/fonts&#xA;  Use --trace for backtrace&#xA;make: *** [Makefile:7: profiles.pdf] Error 1&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 id=&#34;_building_the_document&#34; class=&#34;sect0&#34;&gt;Building the document&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;The final specification form of PDF can be generated using the &lt;code&gt;make&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>LeastAuthority/moonmath-manual</title>
    <updated>2022-11-23T01:40:35Z</updated>
    <id>tag:github.com,2022-11-23:/LeastAuthority/moonmath-manual</id>
    <link href="https://github.com/LeastAuthority/moonmath-manual" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A resource for anyone interested in understanding and unlocking the potential of zk-SNARKs, from beginners to experts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The MoonMath Manual&lt;/h1&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;The MoonMath Manual is a resource for anyone interested in understanding and unlocking the potential of zk-SNARKs, from beginners to experts.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;The acronym zk-SNARK stands for “Zero-Knowledge Succinct Non-Interactive Argument of Knowledge,” and refers to a cryptographic technique where one can prove correct execution of computation and possession of certain information without revealing the information itself. Zk-SNARKs, a type of zero-knowledge proof, offer a new paradigm for privacy, and have been used to enable private blockchain transactions. They also have the potential to securely scale blockchain-based solutions.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;Most explanations struggle to clarify how and why they work, so zk-SNARKs remain somewhat “magical” and elusive, deterring developers from exploring or utilizing them in projects. Resources are scattered across blog posts and GitHub libraries. This results in a high barrier to entry, thereby slowing the widespread adoption of zk-SNARKs and associated privacy-enhancing technologies. Even worse, implementing zk-SNARKs without understanding the fundamentals of how they work increases the potential for security issues.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;We want to change that with our MoonMath Manual to zk-SNARKs, designed for an audience with only minimal experience in cryptography and programming.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;What is particularly unique about the MoonMath Manual is that it is designed to enable users to construct zk-SNARKs using simple pen-and-paper computations. Throughout the manual, users are encouraged to complete exercises that ensure they engage with the foundational building blocks of zk-SNARKs. While doing that, readers build the smallest possible — but fully functional — cryptographic stack to compute zk-SNARK internals without the need of a computer.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;paragraph&#34;&gt; &#xA; &lt;p&gt;As users go through the manual, they will grasp mathematical concepts that are not only used in SNARKs, but also in other zero-knowledge proofs and cryptography more generally.&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>