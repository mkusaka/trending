<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-21T01:45:28Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GeometryCollective/wost-simple</title>
    <updated>2023-06-21T01:45:28Z</updated>
    <id>tag:github.com,2023-06-21:/GeometryCollective/wost-simple</id>
    <link href="https://github.com/GeometryCollective/wost-simple" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple didactic code + tutorial for the Walk on Stars (WoSt) algorithm&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wost-simple&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GeometryCollective/wost-simple/main/WoSt-simple.jpg&#34; alt=&#34;Walk on Stars&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository provides &lt;a href=&#34;https://raw.githubusercontent.com/GeometryCollective/wost-simple/main/code/WoStLaplace2D.cpp&#34;&gt;basic example code&lt;/a&gt; and a &lt;a href=&#34;https://raw.githubusercontent.com/GeometryCollective/wost-simple/main/WoSt-tutorial.pdf&#34;&gt;step-by-step tutorial&lt;/a&gt; on how to implement the &lt;em&gt;walk on stars (WoSt)&lt;/em&gt; algorithm, introduced in the paper&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sawhney, Miller, Gkioulekas, Crane&lt;br&gt; &lt;a href=&#34;https://www.cs.cmu.edu/~kmcrane/Projects/WalkOnStars/index.html&#34;&gt;&lt;em&gt;Walk on Stars: A Grid-Free Monte Carlo Method for PDEs with Neumann Boundary Conditions&lt;/em&gt;&lt;/a&gt;&lt;br&gt; &lt;strong&gt;ACM Transactions on Graphics (2023)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;WoSt is a grid-free Monte Carlo method for solving basic partial differential equations (PDEs) like the Laplace or Poisson equation, with both Dirichlet and Neumann boundary conditions. Unlike finite element, boundary element, or finite difference methods it does not require a volumetric grid or mesh, nor a high-quality boundary mesh. Instead, it uses random walks to solve the problem directly from the original boundary representation; moreover, it can provide accurate solution values at a single query point, rather than needing to solve the problem over the entire domain.&lt;/p&gt; &#xA;&lt;p&gt;Though the derivation of algorithm takes some work, the final algorithm remains about as simple as the original &lt;em&gt;walk on spheres (WoS)&lt;/em&gt; method of &lt;a href=&#34;https://doi.org/10.1214%2Faoms%2F1177728169&#34;&gt;Muller (1956)&lt;/a&gt;. For a Laplace equation with Dirichlet boundary conditions, WoS essentially says:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;(Walk on Spheres)&lt;/strong&gt; &lt;em&gt;Repeatedly jump to a random point on a &lt;strong&gt;sphere&lt;/strong&gt; around the current point until you reach the boundary. The average boundary value over many such walks yields the solution.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For a Laplace equation with Dirichlet and zero-Neumann boundary conditions, WoSt is nearly identical:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;(Walk on Stars)&lt;/strong&gt; &lt;em&gt;Repeatedly jump to a random point on a &lt;strong&gt;star-shaped region&lt;/strong&gt; around the current point until you reach the &lt;strong&gt;Dirichlet&lt;/strong&gt; boundary. The average boundary value over many such walks yields the solution.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The main implementation effort is in enriching the closest point queries used by WoS with &lt;em&gt;closest silhouette point queries&lt;/em&gt;, as well as standard &#34;first hit&#34; ray intersection queries. A complete 2D implementation with no external dependencies is provided here in about 150 lines of C++ code (ignoring I/O), in the file &lt;a href=&#34;https://raw.githubusercontent.com/GeometryCollective/wost-simple/main/code/WoStLaplace2D.cpp&#34;&gt;WoStLaplace2D.cpp&lt;/a&gt;. For simplicity, we omit nonzero Neumann conditions and acceleration of geometric queriesâ€”a full 3D implementation is discussed in &lt;a href=&#34;https://www.cs.cmu.edu/~kmcrane/Projects/WalkOnStars/index.html&#34;&gt;Sawhney et al (2023)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To emphasize the core ideas of the WoSt algorithm, this tutorial focuses on a bare-bones 2D version of WoSt that solves the Laplace equation&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{array}{rcll} \Delta u &amp;amp;=&amp;amp; 0 &amp;amp; \text{on}\ \Omega, \ u &amp;amp;=&amp;amp; g &amp;amp; \text{on}\ \partial\Omega_D, \ \tfrac{\partial u}{\partial n} &amp;amp;=&amp;amp; 0 &amp;amp; \text{on}\ \partial\Omega_N, \ \end{array} $$&lt;/p&gt; &#xA;&lt;p&gt;where $\Omega \subset \mathbb{R}^2$ is a closed polygon in the plane, $g$ is a real-valued function on the Dirichlet part of the boundary $\partial\Omega_D$, and $\partial\Omega_N$ is the complementary Neumann part of the boundary.&lt;/p&gt; &#xA;&lt;h4&gt;Acknowledgements&lt;/h4&gt; &#xA;&lt;p&gt;All diagrams in this document were made using &lt;a href=&#34;https://github.com/penrose/penrose&#34;&gt;Penrose&lt;/a&gt;. Special thanks to &lt;a href=&#34;https://github.com/wodeni&#34;&gt;Wode Ni&lt;/a&gt;, &lt;a href=&#34;https://github.com/samestep&#34;&gt;Sam Estep&lt;/a&gt;, &lt;a href=&#34;https://github.com/liangyiliang&#34;&gt;Yiliang Liang&lt;/a&gt;, and the rest of the Penrose team for development support during production of this document.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{WalkOnStarsIG,&#xA;author = {Sawhney, Rohan and Miller, Bailey and Gkioulekas, Ioannis and Crane, Keenan},&#xA;month = jun,&#xA;title = {{Walk on Stars (Implementation Guide)}},&#xA;version = {1.0},&#xA;year = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p xmlns:cc=&#34;http://creativecommons.org/ns#&#34; xmlns:dct=&#34;http://purl.org/dc/terms/&#34;&gt;&lt;a property=&#34;dct:title&#34; rel=&#34;cc:attributionURL&#34; href=&#34;https://github.com/GeometryCollective/wost-simple&#34;&gt;Walk on Stars (Implementation Guide)&lt;/a&gt; by &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://rohansawhney.io/&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Rohan Sawhney&lt;/a&gt;, &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;https://www.bailey-miller.com/&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Bailey Miller&lt;/a&gt;, &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;https://www.cs.cmu.edu/~igkioule/&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Ioannis Gkioulekas&lt;/a&gt;, and &lt;a xmlns:cc=&#34;http://creativecommons.org/ns#&#34; href=&#34;http://www.cs.cmu.edu/~kmcrane/&#34; property=&#34;cc:attributionName&#34; rel=&#34;cc:attributionURL&#34;&gt;Keenan Crane&lt;/a&gt; is licensed under &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1&#34; target=&#34;_blank&#34; rel=&#34;license noopener noreferrer&#34; style=&#34;display:inline-block;&#34;&gt;CC BY 4.0.&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1&#34; target=&#34;_blank&#34; rel=&#34;license noopener noreferrer&#34; style=&#34;display:inline-block;&#34;&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/?ref=chooser-v1&#34; target=&#34;_blank&#34; rel=&#34;license noopener noreferrer&#34; style=&#34;display:inline-block;&#34;&gt;Code is released under an &lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GeometryCollective/wost-simple/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>