<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-22T01:38:43Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bootlin/training-materials</title>
    <updated>2025-05-22T01:38:43Z</updated>
    <id>tag:github.com,2025-05-22:/bootlin/training-materials</id>
    <link href="https://github.com/bootlin/training-materials" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bootlin embedded Linux and kernel training materials&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;How to compile these materials&lt;/h1&gt; &#xA;&lt;p&gt;First, you may install the packages needed to compile the materials (example on Ubuntu 22.04):&lt;/p&gt; &#xA;&lt;p&gt;sudo apt install --no-install-recommends git-core inkscape &lt;br&gt; texlive-latex-base texlive-latex-extra texlive-font-utils dia &lt;br&gt; python3-pygments texlive-fonts-recommended &lt;br&gt; texlive-fonts-extra make texlive-xetex texlive-extra-utils &lt;br&gt; fonts-inconsolata fonts-liberation &lt;br&gt; xfonts-scalable lmodern texlive-science texlive-plain-generic &lt;br&gt; texlive-lang-french ghostscript&lt;/p&gt; &#xA;&lt;p&gt;Then, run &#39;make help&#39; to see what available targets are.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;make full-linux-kernel-slides.pdf make full-linux-kernel-labs.pdf&lt;/p&gt; &#xA;&lt;h1&gt;Compiling issues&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If the materials stop compiling after upgrading your distro, you may have to run &#34;make clean&#34; to get the materials to compile again.&lt;/p&gt; &lt;p&gt;Example case: &lt;a href=&#34;https://tex.stackexchange.com/questions/352017/miktex-and-beamer-error-beamerendinputifotherversion&#34;&gt;https://tex.stackexchange.com/questions/352017/miktex-and-beamer-error-beamerendinputifotherversion&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Labs formatting guidelines&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To create a new lab, the chapter must start with a &#39;subchapter&#39; command, as in:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;\subchapter{Bootloader â€“ U-Boot}{Objectives: Set up serial communication, compile and install the X-Loader and U-Boot bootloaders, use basic U-Boot commands, set up TFTP communication with the development workstation.}&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can use \section{} and \subsection{} to create sections in your lab document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To add some fixed-sized font text (function names, file or directory paths, commands) inside a paragraph of normal text, use the \code macro as follows:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Blabla. Look in the \code{/usr/bin} directory. Blabla.&lt;/p&gt; &#xA;&lt;p&gt;Note that the \code{} macro doesn&#39;t require escaping of $ or _ signs:&lt;/p&gt; &#xA;&lt;p&gt;You can look for the \code{platform_device_register()} function in the \code{$HOME/linux/blabla.c} file.&lt;/p&gt; &#xA;&lt;p&gt;This macro &lt;em&gt;MUST&lt;/em&gt; be used instead of {\tt }, because \code{} provides proper line wrapping on dashes, slashes and so on, which helps in keeping the line of text within the width of the page.&lt;/p&gt; &#xA;&lt;p&gt;Note that this macro cannot be used in section titles or chapter titles. In this case {\tt } needs to be used (and inside {\tt }, the _ or $ signs have to be escaped).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To add some fixed-size font text as a complete paragraph, use the &#39;verbatim&#39; environment:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to build the kernel run:&lt;/p&gt; &#xA;&lt;p&gt;\begin{verbatim} make blabla_defconfig make \end{verbatim}&lt;/p&gt; &#xA;&lt;p&gt;Here as well, it does not require escaping of $ or _ signs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To add URLs, use the \url{&lt;a href=&#34;https://foobar.com%7D&#34;&gt;https://foobar.com}&lt;/a&gt; macro. This will create a clickable link in the resulting PDF file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If needed, you can locally reduce the size of a \begin{verbatim}...\end{verbatim} environment by doing:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;\small \begin{verbatim} ... \end{verbatim} \normalsize&lt;/p&gt; &#xA;&lt;p&gt;This must be used parsimoniously because changing the font size all the time is not very pretty. But since the verbatim environment does not do line wrapping, it may sometimes be necessary.&lt;/p&gt; &#xA;&lt;p&gt;Note that in addition to \small, you can also use other sizes, see &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Fonts#Built-in_sizes&#34;&gt;https://en.wikibooks.org/wiki/LaTeX/Fonts#Built-in_sizes&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h1&gt;Slides formatting guidelines&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A new training should start with a file containing the setup of the various variables needed such as authors and a slide created using the titleframe macro. This new file should be created in the common/ directory with the name &#xA;   &lt;training-name&gt;&#xA;    -title.tex&#xA;   &lt;/training-name&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Every new chapter should be split in order to allow its possible use in other trainings as well. Each new file should contain only one subsection and should be named &#xA;   &lt;training-name&gt;&#xA;    -&#xA;    &lt;section-name&gt;&#xA;     -&#xA;     &lt;subsection-name&gt;&#xA;      .tex. New sections should be in a separate file named &#xA;      &lt;training-name&gt;&#xA;       -&#xA;       &lt;section-name&gt;&#xA;        -title.tex. All the aggregation would be done by the Makefile&#xA;       &lt;/section-name&gt;&#xA;      &lt;/training-name&gt;&#xA;     &lt;/subsection-name&gt;&#xA;    &lt;/section-name&gt;&#xA;   &lt;/training-name&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Syntax Highlighting&lt;/h1&gt; &#xA;&lt;p&gt;The LaTeX package minted is included to have a nice syntax highlighting and advanced code formatting features. It uses pygments as backend, so in order to use it, one needs to install the debian/Ubuntu package python-pygments.&lt;/p&gt; &#xA;&lt;p&gt;A basic example for C code is:&lt;/p&gt; &#xA;&lt;p&gt;\begin{minted}{c} .... \end{minted}&lt;/p&gt; &#xA;&lt;p&gt;Of course, it can take a lot of options that you can find in the minted&#39;s documentation present at: &lt;a href=&#34;http://mirrors.ctan.org/macros/latex/contrib/minted/minted.pdf&#34;&gt;http://mirrors.ctan.org/macros/latex/contrib/minted/minted.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Emacs usage in LaTeX&lt;/h1&gt; &#xA;&lt;p&gt;Install the AUCTex package which contains an improved Emacs environment for editing LaTeX documents:&lt;/p&gt; &#xA;&lt;p&gt;sudo apt install auctex&lt;/p&gt; &#xA;&lt;p&gt;In your ~/.emacs.el file, add the following lines:&lt;/p&gt; &#xA;&lt;p&gt;(load &#34;auctex.el&#34; nil t t) (require &#39;latex) (add-to-list &#39;LaTeX-verbatim-macros-with-braces &#34;code&#34;) (add-to-list &#39;LaTeX-verbatim-macros-with-braces &#34;url&#34;)&lt;/p&gt; &#xA;&lt;p&gt;The important point here is that this tells Emacs to consider the \code{} and \url{} macros as a verbatim macro, so that even if special characters such as $, _ or % are not escaped inside these macros, Emacs text colorization will not go crazy.&lt;/p&gt; &#xA;&lt;p&gt;Nice keyboard shortcuts with AUCTex:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;C-c RET to insert a macro, or embed the selected text into a macro. Very useful to quickly place a few words inside a \code{} macro&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;C-c C-e to insert an environment, such as verbatim, or embed the selected text into such an environment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Diagrams&lt;/h1&gt; &#xA;&lt;p&gt;The recommended program to do diagrams is Dia:&lt;/p&gt; &#xA;&lt;p&gt;apt install dia&lt;/p&gt; &#xA;&lt;p&gt;When saving a file, please make sure to unselect the &#34;Compressed saved files&#34; option, so that the .dia files are raw XML files, and not gzipped compressed files. Having raw XML files is much better for version control, and will allow, to some extent, merging .dia diagrams after conflicts.&lt;/p&gt; &#xA;&lt;p&gt;The fonts to be used are &#34;Latin Modern Sans&#34; for normal text and &#34;Inconsolata&#34; for the code/paths.&lt;/p&gt; &#xA;&lt;p&gt;Here are some suggested color couples you can use for the border and background of boxes and other elements. Using similar colors for all diagrams will make our training documents much more coherent and nice to look at.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Blue boxes borders: #5CACFF background: #ADD8E6&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Yellowish boxes borders: #D9CB2F background: #FFF8A8&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grey boxes borders: #868686 background: #E5E5E5&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Brownish boxes borders: #A34804 background: #FFD192&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Purple boxes borders: #2F004A background: #EFB9FF&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Green boxes borders: #6A8954 background: #C5E387&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Red/pink boxes borders: #CC1F1A background: #FFACAC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to easily add all these colors to Dia, add the following fragment to ~/.dia/persistence (or replace the existing role=&#34;color-menu&#34; XML tag):&lt;/p&gt; &#xA;&lt;p&gt;------------------8&amp;lt;-----------------8&amp;lt;----------------------------- &amp;lt;dia:list role=&#34;color-menu&#34;&amp;gt; &amp;lt;dia:attribute name=&#34;listvalue&#34;&amp;gt; &lt;a href=&#34;dia:string&#34;&gt;dia:string&lt;/a&gt;##5CACFF #ADD8E6 #D9CB2F #FFF8A8 #868686 #E5E5E5 #A34804 #FFD192 #2F004A #EFB9FF #6A8954 #C5E387 #CC1F1A #FFACAC#&amp;lt;/dia:string&amp;gt; &amp;lt;/dia:attribute&amp;gt; &amp;lt;/dia:list&amp;gt; ------------------8&amp;lt;-----------------8&amp;lt;-----------------------------&lt;/p&gt;</summary>
  </entry>
</feed>