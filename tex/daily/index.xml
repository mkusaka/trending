<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-10T01:43:13Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xiaoweiChen/Learn-LLVM-17</title>
    <updated>2024-03-10T01:43:13Z</updated>
    <id>tag:github.com,2024-03-10:/xiaoweiChen/Learn-LLVM-17</id>
    <link href="https://github.com/xiaoweiChen/Learn-LLVM-17" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《Learn LLVM 17》的非专业个人翻译&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn LLVM 17&lt;/h1&gt; &#xA;&lt;p&gt;A beginner&#39;s guide to learning LLVM compiler tools and core libraries with C++&lt;/p&gt; &#xA;&lt;p&gt;(&lt;em&gt;使用C++学习LLVM编译器和核心库的初学者教程&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xiaoweiChen/Learn-LLVM-17/main/cover.png&#34; height=&#34;256px&#34; align=&#34;right&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;作者：Kai Nacke 和 Amy Kwan&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;译者：陈晓伟&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;原文发布时间：2024年1月&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;翻译是译者用自己的思想，换一种语言，对原作者想法的重新阐释。鉴于我的学识所限，误解和错译在所难免。如果你能买到本书的原版，且有能力阅读英文，请直接去读原文。因为与之相较，我的译文可能根本不值得一读。&lt;/p&gt; &#xA; &lt;p align=&#34;right&#34;&gt; — 云风，程序员修炼之道第2版译者&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;本书概述&lt;/h2&gt; &#xA;&lt;p&gt;构造编译器是一项复杂而迷人的任务。LLVM项目为编译器提供了可重用的组件，LLVM核心库实现了世界级的优化代码生成器，可以为所有主流CPU架构翻译与源语言无关的机器码中间表示，许多编程语言的编译器已经在使用LLVM。&lt;/p&gt; &#xA;&lt;p&gt;本书将介绍如何实现自己的编译器，以及如何使用LLVM来实现。您将了解编译器的前端如何将源代码转换为抽象语法树，以及如何从中生成中间表示(IR)。此外，还将探索在编译器中添加一个优化管道，可将IR编译为高性能的机器码。&lt;/p&gt; &#xA;&lt;p&gt;LLVM框架可以通过多种方式进行扩展，读者将了解如何向LLVM添加通道，甚至是一个全新的后端。高级主题，如编译不同的CPU架构和扩展clang和clang静态分析器与自己的插件和检查器也包括在内。本书遵循一种实用的方法，并附有示例源代码，读者可以在自己的项目中应用相应的代码。&lt;/p&gt; &#xA;&lt;h2&gt;作者简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kai Nacke&lt;/strong&gt;是一名专业IT架构师，目前居住在加拿大多伦多。毕业于德国多特蒙德技术大学的计算机科学专业。他关于通用哈希函数的毕业论文，被评为最佳论文。&lt;/p&gt; &#xA;&lt;p&gt;他在IT行业工作超过20年，在业务和企业应用程序的开发和架构方面有丰富的经验。他在研发一个基于LLVM/Clang的编译器。&lt;/p&gt; &#xA;&lt;p&gt;几年来，他一直是LDC(基于LLVM的D语言编译器)的维护者。在Packt出版过《D Web Development》一书，他也曾在自由和开源软件开发者欧洲会议(FOSDEM)的LLVM开发者室做过演讲。&lt;/p&gt; &#xA;&lt;h2&gt;本书相关&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;github翻译地址：&lt;a href=&#34;https://github.com/xiaoweiChen/Learn-LLVM-17&#34;&gt;https://github.com/xiaoweiChen/Learn-LLVM-17&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;译文的LaTeX 环境配置：&lt;a href=&#34;https://www.cnblogs.com/1625--H/p/11524968.html&#34;&gt;https://www.cnblogs.com/1625--H/p/11524968.html&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;禁用拼写检查：&lt;a href=&#34;https://blog.csdn.net/weixin_39278265/article/details/87931348&#34;&gt;https://blog.csdn.net/weixin_39278265/article/details/87931348&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;使用xelatex编译时需要添加&lt;code&gt;-shell-escape&lt;/code&gt;和&lt;code&gt;-8bit&lt;/code&gt;选项，例如：&lt;/p&gt; &lt;p&gt;&lt;code&gt;xelatex -synctex=1 -interaction=nonstopmode -shell-escape -8bit &#34;C++-Standard-Library&#34;.tex&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;为了内容中表格和目录索引能正常生成，需要至少两次连续编译&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;vscode中配置LaTeX：&lt;a href=&#34;https://blog.csdn.net/Ruins_LEE/article/details/123555016&#34;&gt;https://blog.csdn.net/Ruins_LEE/article/details/123555016&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wmwolf/234-Notes</title>
    <updated>2024-03-10T01:43:13Z</updated>
    <id>tag:github.com,2024-03-10:/wmwolf/234-Notes</id>
    <link href="https://github.com/wmwolf/234-Notes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notes for Andy Howell&#39;s Spring 2013 PHYS 234: High Energy Astrophysics class at UCSB.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;These are Bill Wolf&#39;s notes for Andy Howell&#39;s PHYS 234: High Energy Astrophysics class, taught in the Spring of 2013 at UCSB.&lt;/p&gt; &#xA;&lt;p&gt;I try to update these after every class but will likely fall behind. If you could, please fork off this repo and add your own edits to make these notes even better!&lt;/p&gt; &#xA;&lt;p&gt;If you just want to download the pdf of the notes, go to 234-Notes.pdf and click &#34;View Raw&#34;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rgiordan/AMIPPaper</title>
    <updated>2024-03-10T01:43:13Z</updated>
    <id>tag:github.com,2024-03-10:/rgiordan/AMIPPaper</id>
    <link href="https://github.com/rgiordan/AMIPPaper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AdversarialInfluenceWorkbench&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains code to reproduce our paper, &lt;a href=&#34;https://arxiv.org/abs/2011.14999&#34;&gt;An Automatic Finite-Sample Robustness Metric: When Can Dropping a Little Data Make a Big Difference?&lt;/a&gt; by Tamara Broderick, Ryan Giordano, and Rachael Meager.&lt;/p&gt; &#xA;&lt;p&gt;The writing directory is &lt;code&gt;writing/output/&lt;/code&gt;. There is data processing code in both &lt;code&gt;examples&lt;/code&gt; and in &lt;code&gt;writing/applications&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The best guide to reproducing the paper and its analyses is found in &lt;code&gt;writing/output/makefile&lt;/code&gt;. To run it, first&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;GIT_REPO_LOC&lt;/code&gt; variable at the top of &lt;code&gt;makefile&lt;/code&gt; to point to the full path of the location of the cloned &lt;code&gt;AMIPPaper&lt;/code&gt; repository&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make all&lt;/code&gt; in the &lt;code&gt;output&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions to download the needed data.&lt;/li&gt; &#xA; &lt;li&gt;Continue to run &lt;code&gt;make all&lt;/code&gt; and follow the instructions until the paper succesfully compiles.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To clear paper output, run &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To pre-process data for individual analyses, you can run any of the subsidiary targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make sim_data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make cash_data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make mc_data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make mc_data&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the most complicated analysis, the mixture model, requires more effort to run than the &lt;code&gt;R&lt;/code&gt; analysis.&lt;/p&gt; &#xA;&lt;p&gt;If you have problems reproducing any aspect of the pipeline, please send Ryan an email.&lt;/p&gt;</summary>
  </entry>
</feed>