<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub TeX Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-27T01:40:38Z</updated>
  <subtitle>Daily Trending of TeX in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/csuite</title>
    <updated>2022-10-27T01:40:38Z</updated>
    <id>tag:github.com,2022-10-27:/microsoft/csuite</id>
    <link href="https://github.com/microsoft/csuite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CSuite: A Suite of Benchmark Datasets for Causality&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CSuite: A Suite of Benchmark Datasets for Causality&lt;/h1&gt; &#xA;&lt;p&gt;CSuite is a collection of synthetic datasets for benchmarking causal machine learning algorithms. Each dataset consists of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the true causal graph, for benchmarking causal discovery;&lt;/li&gt; &#xA; &lt;li&gt;4000 rows of observational training data;&lt;/li&gt; &#xA; &lt;li&gt;2000 rows of observational test data;&lt;/li&gt; &#xA; &lt;li&gt;interventional test data, for benchmarking estimation of average treatment effect (ATE) and conditional average treatment effect (CATE), 2000 rows per interventional environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The data was generated from known hand-crafted structural equation models (SEMs). Different datasets are intended to test different features of causal discovery and inference algorithms. CSuite was originally introduced in &lt;a href=&#34;https://arxiv.org/pdf/2202.02195.pdf&#34;&gt;this paper&lt;/a&gt;. The &lt;a href=&#34;https://github.com/microsoft/causica/raw/main/causica/data_generation/csuite/simulate.py&#34;&gt;data generation code for CSuite&lt;/a&gt; is publicly available.&lt;/p&gt; &#xA;&lt;h2&gt;Summary of datasets&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Dataset&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;No. nodes&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;No. edges&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Additive noise model?&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Discrete/continuous&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;ATE benchmarking&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;CATE benchmarking&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Download link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lingauss&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continuous&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_lingauss/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_lingauss/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;linexp&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continuous&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_linexp/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_linexp/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nonlingauss&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continuous&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_nonlingauss/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_nonlingauss/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nonlin_simpson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continuous&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_nonlin_simpson/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_nonlin_simpson/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;symprod_simpson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continuous&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_symprod_simpson/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_symprod_simpson/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large_backdoor&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continuous&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_backdoor/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_backdoor/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;weak_arrows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Continuous&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_weak_arrows/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_weak_arrows/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cat_to_cts&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cat_to_cts/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cat_to_cts/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cts_to_cat&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cts_to_cat/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cts_to_cat/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mixed_simpson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_mixed_simpson/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_mixed_simpson/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large_backdoor_binary_t&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_large_backdoor_binary_t/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_large_backdoor_binary_t/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;weak_arrows_binart_t&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_weak_arrows_binary_t/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_weak_arrows_binary_t/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mixed_confounding&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Mixed&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_mixed_confounding/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_mixed_confounding/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cat_chain&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Discrete&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cat_chain/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cat_chain/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cat_collider&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Discrete&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cat_collider/data.zip&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_cat_collider/data.zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Data format&lt;/h2&gt; &#xA;&lt;p&gt;Each dataset consists of the following files&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;adj_matrix.csv&lt;/code&gt;, which describes the causal graph used to generate the data; a value &lt;code&gt;1&lt;/code&gt; in row &lt;code&gt;i&lt;/code&gt;, column &lt;code&gt;j&lt;/code&gt; indicates an edge from node &lt;code&gt;i&lt;/code&gt; to node &lt;code&gt;j&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;train.csv&lt;/code&gt;, the observational training data;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test.csv&lt;/code&gt;, the observational test data;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;interventions.json&lt;/code&gt;, a JSON containing interventional test data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The interventional data JSON consists of &lt;em&gt;pairs&lt;/em&gt; of interventional environments, which can be used to estimate (C)ATE. The two environments are the &#39;primary&#39; and &#39;reference&#39; environments. Conditional data was generating using HMC. The format of the interventional data is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;environments&#34;: [&#xA;        {&#xA;            &#34;conditioning_idxs&#34;: &amp;lt;optional list containing indices of nodes to that were conditioned on&amp;gt;,&#xA;            &#34;conditioning_values&#34;: &amp;lt;list of values set on the conditioning nodes&amp;gt;,&#xA;            &#34;effect_idxs&#34;: &amp;lt;list containing indices of nodes to be considered effect variables&amp;gt;,&#xA;            &#34;intervention_idxs&#34;: &amp;lt;list of indices of nodes that were acted on with do-intervention&amp;gt;,&#xA;            &#34;intervention_values&#34;: &amp;lt;list of values set on the intervention nodes in the primary do-intervention: for example, receiving a medicine&amp;gt;,&#xA;            &#34;intervention_reference&#34;: &amp;lt;list of values set on the intervention nodes in the reference do-intervention: for example, not receiving the medicine&amp;gt;,&#xA;            &#34;test_data&#34;: &amp;lt;array of data from the primary do-intervention, same number of columns as train.csv&amp;gt;,&#xA;            &#34;reference_data&#34;: &amp;lt;array of data from the reference do-intervention&amp;gt;&#xA;        },&#xA;        ...&#xA;    ],&#xA;    &#34;metadata&#34;: {&#xA;        &#34;columns_to_nodes&#34;: &amp;lt;matches to columns to their corresponding nodes, only important for vector-values nodes&amp;gt;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;h3&gt;From the terminal&lt;/h3&gt; &#xA;&lt;p&gt;You can download CSuite datasets using the following URL pattern&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -O https://azuastoragepublic.blob.core.windows.net/datasets/csuite_&amp;lt;name&amp;gt;/data.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Python&lt;/h3&gt; &#xA;&lt;p&gt;The uncompressed files listed under &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/#data-format&#34;&gt;Data format&lt;/a&gt; are also directly available from the same location as the zip files. These may either be accessed through their HTTP links, replacing &lt;code&gt;data.zip&lt;/code&gt; with the target file, e.g. &lt;a href=&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_linexp/train.csv&#34;&gt;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_linexp/train.csv&lt;/a&gt; or their equivalent azure blob storage paths. To load these directly in python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;&#xA;# Load over HTTP&#xA;df = pd.read_csv(&#34;https://azuastoragepublic.blob.core.windows.net/datasets/csuite_linexp/train.csv&#34;)&#xA;&#xA;# Load using `adlfs` (`pip install adlfs`)&#xA;df = pd.read_csv(&#34;az://datasets@azuastoragepublic.blob.core.windows.net/csuite_linexp/train.csv&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use CSuite datasets in your work, please cite the following &lt;a href=&#34;https://arxiv.org/pdf/2202.02195.pdf&#34;&gt;paper&lt;/a&gt; which originally introduced these datasets&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{geffner2022deep,&#xA;    title={Deep End-to-end Causal Inference},&#xA;    author={Geffner, Tomas and Antoran, Javier and Foster, Adam and Gong, Wenbo and Ma, Chao and Kiciman, Emre and Sharma, Amit and Lamb, Angus and Kukla, Martin and Pawlowski, Nick and  Allamanis, Miltiadis and Zhang, Cheng},&#xA;    journal={arXiv preprint arXiv:2202.02195},&#xA;    year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Detailed descriptions of datasets&lt;/h2&gt; &#xA;&lt;h3&gt;lingauss&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/two_node.PNG&#34; alt=&#34;Two Node Graph X0 -&gt; X1&#34; width=&#34;250px&#34;&gt; &#xA;&lt;p&gt;A two node linear Gaussian system. The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim N(0, 1) \ X_1 &amp;amp;= \frac{1}{2}X_0 + \frac{\sqrt{3}}{2}Z_1 \end{align} $$&lt;/p&gt; &#xA;&lt;p&gt;where $Z_1 \sim N(0,1)$ is independent of $X_0$. The dataset is constructed so that the observational distribution is the same if $X_0$ and $X_1$ are swapped and both nodes have the same marginal variance of 1. This model is not structural identifiable from observational data.&lt;/p&gt; &#xA;&lt;h3&gt;linexp&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/two_node.PNG&#34; alt=&#34;Two Node Graph X0 -&gt; X1&#34; width=&#34;250px&#34;&gt; &#xA;&lt;p&gt;A two node linear system with exponentially distributed noise. The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;= Z_0 - 1 \ X_1 &amp;amp;= \frac{1}{2}X_0 + \frac{\sqrt{3}}{2}(Z_1-1) \end{align} $$&lt;/p&gt; &#xA;&lt;p&gt;where $Z_0, Z_1 \sim \textup{Exp}(1)$ are independent variables. The dataset is constructed so that both nodes have the same marginal variance of 1. This model is structural identifiable given a non-Gaussian additive noise assumption.&lt;/p&gt; &#xA;&lt;h3&gt;nonlingauss&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/two_node.PNG&#34; alt=&#34;Two Node Graph X0 -&gt; X1&#34; width=&#34;250px&#34;&gt; &#xA;&lt;p&gt;A two node non-linear system with Gaussian distributed noise. The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim N(0,1) \ X_1 &amp;amp;= \sqrt{6} \exp(-X_0^2) + \alpha Z_1 \end{align} $$&lt;/p&gt; &#xA;&lt;p&gt;where $Z_1 \sim N(0,1)$ is independent of $X_0$ and&lt;/p&gt; &#xA;&lt;p&gt;$$ \alpha^2 = 1 - 6 \left(\frac{1}{\sqrt{5}} - \frac{1}{3} \right). $$&lt;/p&gt; &#xA;&lt;p&gt;The dataset is constructed so that $\textup{Var}(X_0) = \textup{Var}(X_1) = 1$ and $\textup{Cov}(X_0,X_1)=0$. This model is structural identifiable given a nonlinear additive noise assumption.&lt;/p&gt; &#xA;&lt;h3&gt;nonlin_simpson&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/nonlin_simpson.PNG&#34; alt=&#34;Four Node Graph X0 -&gt; X1, X0 -&gt; X2, X1 -&gt; X2, X2 -&gt; X3&#34; width=&#34;300px&#34;&gt; &#xA;&lt;p&gt;An example of &lt;a href=&#34;https://en.wikipedia.org/wiki/Simpson&#39;s_paradox&#34;&gt;Simpson&#39;s Paradox&lt;/a&gt; using a continuous SEM. The dataset is constructed so that $\textup{Cov}(X_1,X_2)$ has the opposite sign to $\textup{Cov}(X_1,X_2\mid X_0)$. Estimating the treatment effects correctly in this SEM is highly sensitive to accurate causal discovery.&lt;/p&gt; &#xA;&lt;p&gt;The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim N(0,1) \ X_1 &amp;amp;= s(1 - X_0) + \sqrt{\frac{3}{20}} Z_1\ X_2 &amp;amp;= \tanh(2X_1) + \frac{3}{2}X_0 -1 + \tanh(Z_2)\ X_3 &amp;amp;= 5 \tanh\left(\frac{X_2 - 4}{5}\right) + 3 + \frac{1}{\sqrt{10}} Z_3 \end{align} $$&lt;/p&gt; &#xA;&lt;p&gt;where $Z_1,Z_2 \sim N(0,1)$ and $Z_3 \sim \textup{Laplace}(1)$ are mutually independent and independent of $X_0$, $s(x) = \log(1+\exp(x))$ is the softplus function. Constants were chosen so that each variable has a marginal variance of (approximately) 1.&lt;/p&gt; &#xA;&lt;h3&gt;symprod_simpson&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/symprod_simpson.PNG&#34; alt=&#34;Four Node Graph X0 -&gt; X1, X0 -&gt; X2, X1 -&gt; X2, X2 -&gt; X3&#34; width=&#34;300px&#34;&gt; &#xA;&lt;p&gt;A dataset exhibiting multi-modality that is suitable for benchmarking CATE estimation. Nonlinear function estimation is important since $\textup{Cov}(X_0,X_2)=\textup{Cov}(X_1,X_2)=0$.&lt;/p&gt; &#xA;&lt;p&gt;The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim N(0,1) \ X_1 &amp;amp;= 2\tanh(2X_0) + \frac{1}{\sqrt{10}} Z_1\ X_2 &amp;amp;= \frac{1}{2}X_0 X_1 + \frac{1}{\sqrt{2}} Z_2\ X_3 &amp;amp;= \tanh\left(\frac{3}{2} X_0\right) + \sqrt{\frac{3}{10}} Z_3 \end{align} $$&lt;/p&gt; &#xA;&lt;p&gt;where $Z_1 \sim t_3,Z_2 \sim \textup{Laplace}(1)$ and $Z_3 \sim N(0,1)$ are mutually independent and independent of $X_0$. Constants were chosen so that each variable has a marginal variance of (approximately) 1.&lt;/p&gt; &#xA;&lt;h3&gt;large_backdoor&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/large_backdoor.PNG&#34; alt=&#34;Large backdoor graph&#34; width=&#34;400px&#34;&gt; &#xA;&lt;p&gt;A larger dataset with a pyramidal graph structure. This dataset is constructed so that there are many possible choices of backdoor adjustment set for estimating the treatment effect of $X_7$ on $X_8$. While both minimal and maximal adjustment sets can result in a correct solution, the a minimal adjustment set results in a much lower-dimensional adjustment problem and thus will result in lower variance solutions.&lt;/p&gt; &#xA;&lt;p&gt;A complete description of the structural equations can be found in the &lt;a href=&#34;https://github.com/microsoft/causica/raw/main/causica/data_generation/csuite/simulate.py&#34;&gt;data generation code for CSuite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;weak_arrows&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/weak_arrows.PNG&#34; alt=&#34;Weak arrows graph&#34; width=&#34;400px&#34;&gt; &#xA;&lt;p&gt;A larger dataset that is similar to &lt;code&gt;large_backdoor&lt;/code&gt;, but with many additional edges. The causal discovery challenge revolves around finding all arrows, which are scaled to be relatively weak, but which have significant predictive power for $X_8$ in aggregate.&lt;/p&gt; &#xA;&lt;p&gt;A complete description of the structural equations can be found in the &lt;a href=&#34;https://github.com/microsoft/causica/raw/main/causica/data_generation/csuite/simulate.py&#34;&gt;data generation code for CSuite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;cat_to_cts&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/two_node.PNG&#34; alt=&#34;Two Node Graph X0 -&gt; X1&#34; width=&#34;250px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A two node system with one categorical and one continuous variable. The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim \text{Cat}\left(\frac{1}{4}, \frac{1}{4}, \frac{1}{2}\right)\ X_1 &amp;amp;= \frac{1}{2}(X_0-1) + \frac{9}{25}\mathbf{1}_{\{X_1=2\}} + \frac{8}{5}(s(Z_1) - 1) \end{align} $$&lt;/p&gt; &#xA;&lt;p&gt;where $s(x) = \log(1+\exp(x))$ is the softplus function, and $Z_1 \sim N(0,1)$ is independent of $X_0$.&lt;/p&gt; &#xA;&lt;h3&gt;cts_to_cat&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/two_node.PNG&#34; alt=&#34;Two Node Graph X0 -&gt; X1&#34; width=&#34;250px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A two node system with one categorical and one continuous variable. The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim U(-\sqrt{3},\sqrt{3})\ p(X_1|X_0=x) &amp;amp;= \begin{cases} \left(\tfrac{6}{13},\tfrac{6}{13},\tfrac{1}{13} \right) &amp;amp; \text{ if } x &amp;lt; -\tfrac{\sqrt{3}}{3} \ \left(\tfrac{1}{8},\tfrac{3}{4},\tfrac{1}{8} \right) &amp;amp; \text{ if } -\tfrac{\sqrt{3}}{3} \le x &amp;lt; \tfrac{\sqrt{3}}{3} \ \left(\tfrac{1}{3},\tfrac{1}{3},\tfrac{1}{3} \right) &amp;amp; \text{ if } x &amp;gt; \tfrac{\sqrt{3}}{3} \ \end{cases} \end{align} $$&lt;/p&gt; &#xA;&lt;h3&gt;mixed_simpson&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/nonlin_simpson2.PNG&#34; alt=&#34;Four Node Graph X2 -&gt; X0, X2 -&gt; X1, X0 -&gt; X1, X1 -&gt; X3&#34; width=&#34;300px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_2$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2,3,4,5\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_3$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Another example of &lt;a href=&#34;https://en.wikipedia.org/wiki/Simpson&#39;s_paradox&#34;&gt;Simpson&#39;s Paradox&lt;/a&gt; using a mixed-type SEM. The dataset is constructed so that $\textup{Cov}(X_0,X_1)$ has the opposite sign to $\textup{Cov}(X_0,X_1\mid X_2)$. Estimating the treatment effects correctly in this SEM is highly sensitive to accurate causal discovery.&lt;/p&gt; &#xA;&lt;p&gt;The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_2 &amp;amp;\sim \text{Cat}\left(\frac{1}{6},\frac{1}{6},\frac{1}{6},\frac{1}{6},\frac{1}{6},\frac{1}{6}\right) \ p(X_0|X_2=x) &amp;amp;= \begin{cases} \left(\tfrac{1}{12},\tfrac{11}{12} \right) &amp;amp; \text{ if } x &amp;lt; 3 \ \left(\tfrac{11}{12},\tfrac{1}{12} \right) &amp;amp; \text{ if } x \ge 3 \ \end{cases} \ X_1 &amp;amp;= \frac{7}{10}\left(X_0 + X_2 - 4\right) + s\left(\frac{1}{2} Z_1 \right) \ X_3 &amp;amp;= \frac{10}{3} \tanh\left(\frac{X_1}{3}\right) + \frac{1}{10}(Z_3 -1) \end{align} $$&lt;/p&gt; &#xA;&lt;p&gt;where $Z_1 \sim N(0,1),Z_3\sim \textup{Exp}(1)$ are independent noise random variables and $s(x)=\log(1+\exp(x))$.&lt;/p&gt; &#xA;&lt;h3&gt;large_backdoor_binary_t&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/large_backdoor.PNG&#34; alt=&#34;Large backdoor graph&#34; width=&#34;400px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_2$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_3$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_4$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_5$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_6$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_7$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_8$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;An adaptation of &lt;code&gt;large_backdoor&lt;/code&gt; with a binary variable $X_7$ which is considered the treatment variable.&lt;/p&gt; &#xA;&lt;p&gt;A complete description of the structural equations can be found in the &lt;a href=&#34;https://github.com/microsoft/causica/raw/main/causica/data_generation/csuite/simulate.py&#34;&gt;data generation code for CSuite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;weak_arrow_binary_t&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/weak_arrows.PNG&#34; alt=&#34;Weak arrows graph&#34; width=&#34;400px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_2$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_3$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_4$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_5$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_6$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_7$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_8$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;An adaptation of &lt;code&gt;weak_arrows&lt;/code&gt; with a binary variable $X_7$ which is considered the treatment variable.&lt;/p&gt; &#xA;&lt;p&gt;A complete description of the structural equations can be found in the &lt;a href=&#34;https://github.com/microsoft/causica/raw/main/causica/data_generation/csuite/simulate.py&#34;&gt;data generation code for CSuite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;mixed_confounding&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/mixed_confounding.PNG&#34; alt=&#34;Mixed confounding graph&#34; width=&#34;400px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_2$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_3$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_4$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_5$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_6$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_7$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_8$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_9$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_{10}$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_{11}$&lt;/td&gt; &#xA;   &lt;td&gt;Continuous&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A larger dataset with treatment node $X_0$ and outcome node $X_1$. There are different variables that are: confounders, causes of $X_0$ only, causes of $X_1$ only, downstream of $X_0$, downstream of $X_1$, collider caused by $X_0$ and $X_1$.&lt;/p&gt; &#xA;&lt;p&gt;A complete description of the structural equations can be found in the &lt;a href=&#34;https://github.com/microsoft/causica/raw/main/causica/data_generation/csuite/simulate.py&#34;&gt;data generation code for CSuite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;cat_chain&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/chain.PNG&#34; alt=&#34;Chain graph X0-&gt;X1-&gt;X2&#34; width=&#34;400px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_2$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A chain graph with discrete variables. The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim \text{Cat}\left(\frac{1}{4}, \frac{1}{4}, \frac{1}{2}\right)\ p(X_1|X_0=x) &amp;amp;= \begin{cases} \left(\tfrac{3}{4},\tfrac{1}{8},\tfrac{1}{8} \right) &amp;amp; \text{ if } x=0 \ \left(\tfrac{1}{8},\tfrac{3}{4},\tfrac{1}{8} \right) &amp;amp; \text{ if } x=1 \ \left(\tfrac{1}{8},\tfrac{1}{8},\tfrac{3}{4} \right) &amp;amp; \text{ if } x=2 \ \end{cases} \ p(X_2|X_1=y) &amp;amp;= \begin{cases} \left(\tfrac{6}{7},\tfrac{1}{7} \right) &amp;amp; \text{ if } y=0 \ \left(\tfrac{6}{7},\tfrac{1}{7} \right) &amp;amp; \text{ if } y=1 \ \left(\tfrac{1}{7},\tfrac{6}{7} \right) &amp;amp; \text{ if } y=2. \ \end{cases} \ \end{align} $$&lt;/p&gt; &#xA;&lt;h3&gt;cat_collider&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/csuite/main/figures/collider.PNG&#34; alt=&#34;Collider graph X0-&gt;X1&lt;-X2&#34; width=&#34;400px&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Discrete/continuous&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_0$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_1$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1,2\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$X_2$&lt;/td&gt; &#xA;   &lt;td&gt;Discrete on $\{0,1\}$&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A collider graph with discrete variables. The structural equations are&lt;/p&gt; &#xA;&lt;p&gt;$$ \begin{align} X_0 &amp;amp;\sim \text{Cat}\left(\frac{1}{4}, \frac{1}{4}, \frac{1}{2}\right)\ X_2 &amp;amp;\sim \text{Cat}\left(\frac{1}{2}, \frac{1}{2}\right) \ p(X_1|X_0=x,X_1=y) &amp;amp;= \begin{cases} \left(\tfrac{11}{13},\tfrac{1}{13},\tfrac{1}{13} \right) &amp;amp; \text{ if } x=0,y=0 \ \left(\tfrac{1}{13},\tfrac{11}{13},\tfrac{1}{13} \right) &amp;amp; \text{ if } x=1,y=0 \ \left(\tfrac{1}{13},\tfrac{1}{13},\tfrac{11}{13} \right) &amp;amp; \text{ if } x=2,y=0 \ \left(\tfrac{31}{43},\tfrac{11}{43},\tfrac{1}{43} \right) &amp;amp; \text{ if } x=0,y=1 \ \left(\tfrac{21}{43},\tfrac{21}{43},\tfrac{1}{43} \right) &amp;amp; \text{ if } x=1,y=1 \ \left(\tfrac{21}{43},\tfrac{11}{43},\tfrac{11}{43} \right) &amp;amp; \text{ if } x=2,y=1. \ \end{cases} \end{align} $$&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Contributions or suggestions for the code that generates CSuite should be made in the &lt;a href=&#34;https://github.com/microsoft/causica&#34;&gt;Causica&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>artificial-scientist-lab/PyTheus</title>
    <updated>2022-10-27T01:40:38Z</updated>
    <id>tag:github.com,2022-10-27:/artificial-scientist-lab/PyTheus</id>
    <link href="https://github.com/artificial-scientist-lab/PyTheus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PyTheus, a highly-efficient inverse-design algorithm for quantum optical experiments&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyTheus&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;PyTheus, a highly-efficient discovery framework for quantum optics experiments&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2210.09980&#34;&gt;&lt;strong&gt;Digital Discovery of 100 diverse Quantum Experiments with PyTheus&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;em&gt;Carlos Ruiz-Gonzalez, Sören Arlt, Jan Petermann, Sharareh Sayyad, Tareq Jaouni, Ebrahim Karimi, Nora Tischler, Xuemei Gu, Mario Krenn&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2210.09981&#34;&gt;&lt;strong&gt;Digital Discovery of a Scientific Concept at the Core of Experimental Quantum Optics&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;em&gt;Sören Arlt, Carlos Ruiz-Gonzalez, Mario Krenn&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The package can be installed with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install pytheusQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: do not use &lt;code&gt;pip install pytheus&lt;/code&gt; (it will install a different package)&lt;/p&gt; &#xA;&lt;h2&gt;Running PyTheus&lt;/h2&gt; &#xA;&lt;p&gt;To run one of the included examples, type e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytheus run --example ghz_346&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output of optimization is saved to a directory called &lt;code&gt;output&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To list all examples, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytheus list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run config json files by referring to them by their path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytheus run PATH_TO_YOUR_INPUT_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Names of the subdirectories in output are specified by the name and content of the config file.&lt;/p&gt; &#xA;&lt;h2&gt;Analysing PyTheus results&lt;/h2&gt; &#xA;&lt;p&gt;To plot the graph corresponding to one result saved as a json file, execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytheus plot PATH_TO_RESULT_FILE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get help, add the &lt;code&gt;--help&lt;/code&gt; option to any command. For instance&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; pytheus run --help&#xA;&#xA;Usage: pytheus run [OPTIONS] FILENAME&#xA;&#xA;  Run an input file.&#xA;&#xA;Options:&#xA;  --example  Load input file from examples directory.&#xA;  --help     Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Discovery for Diverse Experimental Resources&lt;/h1&gt; &#xA;&lt;p&gt;Our package allows for the discovery of quantum experiments for a range of experimental goals, constraints and resources. Experiments that can be produced include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;state creation (heralded or post-selected)&lt;/li&gt; &#xA; &lt;li&gt;quantum gates (heralded or post-selected)&lt;/li&gt; &#xA; &lt;li&gt;measurements of quantum states&lt;/li&gt; &#xA; &lt;li&gt;entanglement swapping&lt;/li&gt; &#xA; &lt;li&gt;(covered elsewhere: mixed state creation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sources for photons in these experiments can be SPDC sources, deterministic single-photon sources or a mix of the two.&lt;/p&gt; &#xA;&lt;p&gt;Detectors can be photon-number-resolving or not.&lt;/p&gt; &#xA;&lt;p&gt;Each of these experiments can be described with a graph. The interpretation of nodes and edges varies with the kind of experiment.&lt;/p&gt; &#xA;&lt;h3&gt;Rules for Loss Functions&lt;/h3&gt; &#xA;&lt;p&gt;With these varying interpretations (e.g. for single photon sources, input photons, entanglement swapping), different constraints apply on what kind of graph can correspond to an experiment (Topological Rules).&lt;/p&gt; &#xA;&lt;p&gt;With the different ways of performing the experiments (heralded/post-selected &amp;amp; number-resolving/non-number-resolving), different events are selected out of all possibilities (post-selection rules).&lt;/p&gt; &#xA;&lt;h4&gt;Topological Rules&lt;/h4&gt; &#xA;&lt;p&gt;All experiments that our package is applied to can be described by a graph. When describing state creation using SPDC each edge can be interpreted as a pair-creation. In this case all edges of the complete graph can be considered physically legitimate. When describing other experiments edges can be interpreted differently. Not every edge will be physically meaningful. Consequentially there are constraints on which connections of the complete graph are used in the optimization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(A) Single Photon Sources and Input Photons&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Deterministic single photon sources and input photons (such as in gates) are described as (input) vertices in a graph. An edge connecting an input vertex to a detector describes a path in which a photon can travel from the input into the detector. This interpretation stems from the &lt;a href=&#34;https://arxiv.org/pdf/1805.06484.pdf&#34;&gt;Klyshko picture&lt;/a&gt;. From this a constraint on the graph follows. Two input vertices can not be connected by an edge. It could not be interpreted physically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(B) Entanglement Swapping and Teleportation&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;In entanglement swapping, photons are entangled that have not interacted before. If we want to design an entanglement swapping experiment of two photons, the target is to discover a graph that produces an entangled state between the two photons. However any edge between the corresponding vertices would translate into a common source crystal. A constraint that ensures legitimate entanglement swapping is to remove any edge between the two parties&lt;/p&gt; &#xA;&lt;h4&gt;Post-Selection Rules&lt;/h4&gt; &#xA;&lt;p&gt;The rules for post-selecting coincidence events have been described in the &lt;a href=&#34;https://journals.aps.org/prx/abstract/10.1103/PhysRevX.11.031044&#34;&gt;Theseus paper&lt;/a&gt;. Here, post-selection projects the space of possibilities containing arbitrary combinations of crystals firing into the space of possibilities where only crystals fire for which all detectors at the end of the experiment click. In the graph picture these combinations correspond to the perfect matchings. A state is produced with fidelity one in post-selection if all possibilities of coincidence events contribute to that state.&lt;/p&gt; &#xA;&lt;p&gt;Other experimental settings (such as heralding) and additional experimental resources (such as number-resolving detectors) perform a different kind of projection on the space of possibilities by selecting for different events. This different selection is reflected in the fidelity of the state. The products of the edge weights belonging to each possibility contribute to the norm of the fidelity.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(A) Heralding&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Heralding is a less strict form of selecting events. Instead of putting a detector in every path and selecting for coincidence, only a subset of the paths are detected &lt;em&gt;heralding&lt;/em&gt; an output state in the unmeasured paths. This selection rule not only allows for possibilities where one photon is in every path (perfect matchings) but also for other possibilities (edge covers) as long as they cover the heralding detectors. This can lead to cross-terms that are not present when post-selecting for coincidence in all paths. Consequentially it is more difficult to find a graph with fidelity one, also requiring more experimental resources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(B) Single Photon Sources and Input Photons&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;When describing heralded experiments (above) one has to consider edge covers instead of perfect matchings in the graph for possible events. These possibilities include one edge being included twice in an edge cover, corresponding to a crystal firing twice in an experiment. For single photon sources and other deterministic input photons such possibilities do not exist. Only edge covers that cover the input vertices exactly once are considered for the norm of the fidelity.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(C) Photon Number-Resolving Detectors&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Photon number-resolving detectors are a valuable resource that can restrict the space of possibilities more than a regular detector. When one can be certain that exactly one photon, and not two, has entered a detector it reduces the number of events that could have led to this outcome, eliminating cross terms.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(D) States in Fock Basis&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;...&lt;/p&gt; &#xA;&lt;h2&gt;Loss Functions For Target State Optimization&lt;/h2&gt; &#xA;&lt;p&gt;As explained above, the loss function depend largely on the different experimental conditions. Independent of these conditions they fall into two categories.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fidelity&lt;/li&gt; &#xA; &lt;li&gt;Count Rate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A Fidelity of one ensures that an experiment has no unwanted cross terms. Every possibility that is selected for contributes directly to the target outcome.&lt;/p&gt; &#xA;&lt;p&gt;However, we have come to find that optimizing exclusively for fidelity in some cases can lead the optimization to scale down the weights of the entire graph to minimize the contributions of crossterms. While the fidelity will be very close to one in those cases the generally low edge weights would lead to very low count rates of successful events in actual experiments.&lt;/p&gt; &#xA;&lt;p&gt;To find solutions with higher weights we have introduced the &lt;em&gt;simplified count rate&lt;/em&gt; as a loss function.&lt;/p&gt; &#xA;&lt;h1&gt;Config Examples&lt;/h1&gt; &#xA;&lt;p&gt;This section gives examples for config files showcasing the features for different kinds of experiments that can searched for.&lt;/p&gt; &#xA;&lt;h2&gt;Target State Optimization&lt;/h2&gt; &#xA;&lt;p&gt;This is used when the in- and out-going states can be clearly defined by a state functions. For those, the loss functions &lt;code&gt;cr&lt;/code&gt; and &lt;code&gt;fid&lt;/code&gt; are used.&lt;/p&gt; &#xA;&lt;p&gt;Below are some examples to give an idea of the scope.&lt;/p&gt; &#xA;&lt;p&gt;For further details, refer to the definition of the function &lt;code&gt;setup_for_target&lt;/code&gt; in &lt;code&gt;main.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Post-selected State creation&lt;/h3&gt; &#xA;&lt;p&gt;Here is an example for a config file optimizing for a graph that creates a three particle four-dimensional GHZ state.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;description&#34;: &#34;Finding a setup for the creation of the three-particle four-dimensional GHZ state. It can be realized with three ancillary particles&#34;,&#xA;  &#34;foldername&#34;: &#34;ghz_346&#34;,&#xA;  &#34;target_state&#34;: [&#xA;    &#34;000&#34;,&#xA;    &#34;111&#34;,&#xA;    &#34;222&#34;,&#xA;    &#34;333&#34;&#xA;  ],&#xA;  &#34;num_anc&#34;: 3,&#xA;  &#34;loss_func&#34;: &#34;cr&#34;,&#xA;  &#34;thresholds&#34;: [&#xA;    0.25,&#xA;    0.1&#xA;  ],&#xA;  &#34;samples&#34;: 10,&#xA;  &#34;optimizer&#34;: &#34;L-BFGS-B&#34;,&#xA;  &#34;ftol&#34;: 1e-06,&#xA;  &#34;edges_tried&#34;: 20,&#xA;  &#34;tries_per_edge&#34;: 5&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;General info is given by &lt;code&gt;description&lt;/code&gt;. With &lt;code&gt;foldername&lt;/code&gt; one can give a custom name for the subfolder where solutions are saved.&lt;/p&gt; &#xA;&lt;p&gt;In the simple case of post-selected state creation with SPDC crystals, &lt;code&gt;target_state&lt;/code&gt;, &lt;code&gt;num_anc&lt;/code&gt; and &lt;code&gt;loss_func&lt;/code&gt; are all that are needed to define the objective of the optimization.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;thresholds&lt;/code&gt; is necessary to decide whether a topological optimization step has been successful. In this case, when &lt;code&gt;1-countrate &amp;lt; 0.25&lt;/code&gt; and &lt;code&gt;1-fidelity &amp;lt; 0.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Post-Selected Quantum Gates&lt;/h3&gt; &#xA;&lt;p&gt;For an example how topological constraints on the starting graph of the optimization are dealt with, consider the example of a post-selected CNOT(2,3) quantum gate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;description&#34;: &#34;Postselected CNOT between a qubit (control) and a qutrit (target). Two ancillary photons from SPDC.&#34;,&#xA;  &#34;foldername&#34;: &#34;cnot_23&#34;,&#xA;  &#34;target_state&#34;: [&#xA;    &#34;0000&#34;,&#xA;    &#34;0101&#34;,&#xA;    &#34;0202&#34;,&#xA;    &#34;1011&#34;,&#xA;    &#34;1112&#34;,&#xA;    &#34;1210&#34;&#xA;  ],&#xA;  &#34;in_nodes&#34;: [&#xA;    0,&#xA;    1&#xA;  ],&#xA;  &#34;out_nodes&#34;: [&#xA;    2,&#xA;    3&#xA;  ],&#xA;  &#34;num_anc&#34;: 2,&#xA;  &#34;loss_func&#34;: &#34;cr&#34;,&#xA;  &#34;thresholds&#34;: [&#xA;    0.3,&#xA;    0.1&#xA;  ],&#xA;  &#34;samples&#34;: 10,&#xA;  &#34;optimizer&#34;: &#34;L-BFGS-B&#34;,&#xA;  &#34;ftol&#34;: 1e-06,&#xA;  &#34;edges_tried&#34;: 30,&#xA;  &#34;tries_per_edge&#34;: 5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;target_state&lt;/code&gt; defines a logic table. It is defined through &lt;code&gt;in_nodes&lt;/code&gt; and &lt;code&gt;out_nodes&lt;/code&gt;, which entries belong to incoming photons and which belong to outgoing photons. These definitions suffice to automatically put constraints on the starting graph.&lt;/p&gt; &#xA;&lt;h3&gt;Heralded Quantum Gates with Single Photon Sources&lt;/h3&gt; &#xA;&lt;p&gt;Two additional features are heralding and single photon sources. A simple example is a CNOT gate between two qubits heralding on two ancillary detectors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;description&#34;: &#34;Heralded CNOT gate between two qubits with two single photon sources. Similar has been done: https://journals.aps.org/prl/pdf/10.1103/PhysRevLett.126.140501 could this have a better success probability?&#34;,&#xA;  &#34;foldername&#34;: &#34;cnot22sp&#34;,&#xA;  &#34;target_state&#34;: [&#xA;    &#34;0000&#34;,&#xA;    &#34;0101&#34;,&#xA;    &#34;1011&#34;,&#xA;    &#34;1110&#34;&#xA;  ],&#xA;  &#34;num_anc&#34;: 2,&#xA;  &#34;in_nodes&#34;: [&#xA;    0,&#xA;    1&#xA;  ],&#xA;  &#34;out_nodes&#34;: [&#xA;    2,&#xA;    3&#xA;  ],&#xA;  &#34;single_emitters&#34;: [&#xA;    4,&#xA;    5&#xA;  ],&#xA;  &#34;heralding_out&#34;: true,&#xA;  &#34;loss_func&#34;: &#34;cr&#34;,&#xA;  &#34;thresholds&#34;: [&#xA;    1,&#xA;    0.1&#xA;  ],&#xA;  &#34;samples&#34;: 10,&#xA;  &#34;optimizer&#34;: &#34;L-BFGS-B&#34;,&#xA;  &#34;ftol&#34;: 1e-06,&#xA;  &#34;edges_tried&#34;: 30,&#xA;  &#34;tries_per_edge&#34;: 5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the two single photon sources given by &lt;code&gt;single_emitters&lt;/code&gt; introduce further topological constraints on the starting graph. As they have the role of ancillary photons in this case, we need to set &lt;code&gt;num_anc&lt;/code&gt; accordingly. The graph corresponding to this optimization will have a total of eight nodes. Two for incoming, two for outgoing, two for single photon sources and two for ancillary detectors.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;num_anc&lt;/code&gt; is larger than the sum of lengths of &lt;code&gt;in_nodes&lt;/code&gt; and &lt;code&gt;single_emitters&lt;/code&gt;, the necessary amount of particles is created through SPDC.&lt;/p&gt; &#xA;&lt;p&gt;Additionaly &lt;code&gt;heralding_out&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; here. The photons corresponding to &lt;code&gt;out_nodes&lt;/code&gt; will not be detected.&lt;/p&gt; &#xA;&lt;h3&gt;Measurement&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;description&#34;: &#34;Measurement for three particle W state&#34;,&#xA;  &#34;foldername&#34;: &#34;W_measurement&#34;,&#xA;  &#34;target_state&#34;: [&#xA;    &#34;001&#34;,&#xA;    &#34;010&#34;,&#xA;    &#34;100&#34;&#xA;  ],&#xA;  &#34;in_nodes&#34;: [&#xA;    0,&#xA;    1,&#xA;    2&#xA;  ],&#xA;  &#34;num_anc&#34;: 0,&#xA;  &#34;loss_func&#34;: &#34;cr&#34;,&#xA;  &#34;samples&#34;: 10,&#xA;  &#34;optimizer&#34;: &#34;L-BFGS-B&#34;,&#xA;  &#34;ftol&#34;: 1e-06,&#xA;  &#34;thresholds&#34;: [&#xA;    0.3,&#xA;    0.1&#xA;  ],&#xA;  &#34;tries_per_edge&#34;: 5,&#xA;  &#34;edges_tried&#34;: 30&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Entanglement Optimization&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;loss_func&lt;/code&gt; is set to &lt;code&gt;&#34;ent&#34;&lt;/code&gt;, no target state is set. Instead the optimizer maximizes the entanglement that can be achieved by a graph with the local dimensions given by &lt;code&gt;dim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;description&#34;: &#34;Maximizing entanglement in k=2 bi-partitions for four qubits.&#34;,&#xA;  &#34;K&#34;: 2,&#xA;  &#34;dim&#34;: 2222,&#xA;  &#34;ftol&#34;: 1e-07,&#xA;  &#34;loss_func&#34;: &#34;ent&#34;,&#xA;  &#34;min_edge&#34;: 4,&#xA;  &#34;num_pre&#34;: 5,&#xA;  &#34;optimizer&#34;: &#34;SLSQP&#34;,&#xA;  &#34;imaginary&#34;: false,&#xA;  &#34;samples&#34;: 10,&#xA;  &#34;thresholds&#34;: [&#xA;    0.000001&#xA;  ],&#xA;  &#34;tries_per_edge&#34;: 3,&#xA;  &#34;var_factor&#34;: 0&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Optimizing for Arbitrary Functions of the Graph&lt;/h2&gt; &#xA;&lt;p&gt;There is also the option to define an arbitrary loss function, which should be defined or imported in &lt;code&gt;lossfunctions.py&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;p&gt;Here is an example for optimizing the assembly index of the graph.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;foldername&#34;: &#34;assembly&#34;,&#xA;  &#34;loss_func&#34;: &#34;lff&#34;,&#xA;  &#34;lff_name&#34;: &#34;top_n_assembly&#34;,&#xA;  &#34;dimensions&#34;: [&#xA;    2,&#xA;    2,&#xA;    2,&#xA;    2&#xA;  ],&#xA;  &#34;num_vertices&#34;: 4,&#xA;  &#34;num_cols&#34;: 2,&#xA;  &#34;size_of_graph&#34;: 8,&#xA;  &#34;optimizer&#34;: &#34;L-BFGS-B&#34;,&#xA;  &#34;ftol&#34;: 1e-06,&#xA;  &#34;samples&#34;: 1,&#xA;  &#34;thresholds&#34;: [&#xA;    99999&#xA;  ],&#xA;  &#34;topopt&#34;: false,&#xA;  &#34;edges_tried&#34;: 30,&#xA;  &#34;tries_per_edge&#34;: 5,&#xA;  &#34;unicolor&#34;: false,&#xA;  &#34;imaginary&#34;: false,&#xA;  &#34;num_pre&#34;: 1,&#xA;  &#34;save_history&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a custom defined loss function &lt;code&gt;loss_func&lt;/code&gt; should be set to &lt;code&gt;&#34;lff&#34;&lt;/code&gt; (loss from function).&lt;/p&gt; &#xA;&lt;p&gt;The name of the loss function is given as a string to &lt;code&gt;lff_name&lt;/code&gt;. This function should be defined or imported in &lt;code&gt;lossfunctions.py&lt;/code&gt;. It should take a &lt;code&gt;Graph&lt;/code&gt; object and a &lt;code&gt;cnfg&lt;/code&gt; dictionary as arguments and return a real number.&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h3&gt;Clone repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/artificial-scientist-lab/PyTheus.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create virtual environment&lt;/h3&gt; &#xA;&lt;p&gt;From the project root directory, submit&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m venv venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a subfolder with your virtual environment.&lt;/p&gt; &#xA;&lt;p&gt;To activate, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;. venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the leading point!&lt;/p&gt; &#xA;&lt;h3&gt;Local development installation&lt;/h3&gt; &#xA;&lt;p&gt;Submit&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python setup.py develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the project root directory (where &lt;code&gt;setup.py&lt;/code&gt; is located). Any changes in the code will now automatically be reflected in your local package installation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>allenai/Lila</title>
    <updated>2022-10-27T01:40:38Z</updated>
    <id>tag:github.com,2022-10-27:/allenai/Lila</id>
    <link href="https://github.com/allenai/Lila" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A unified benchmark for math reasoning&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lila&lt;/h1&gt; &#xA;&lt;p&gt;A unified benchmark for math reasoning.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;original.zip&lt;/code&gt; contains the data used in the Lila paper. We include it for reproducibility. &lt;code&gt;lila.zip&lt;/code&gt; contains the data for the official Lila benchmark, which has undergone quality improvements since the paper.&lt;/p&gt; &#xA;&lt;p&gt;You will need &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;git-lfs&lt;/a&gt; to clone these, or you can download them manually (e.g., &lt;code&gt;lila.zip &amp;gt; download&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Contact &lt;a href=&#34;mailto:matthewf@allenai.org&#34;&gt;matthewf@allenai.org&lt;/a&gt; with questions.&lt;/p&gt; &#xA;&lt;p&gt;Cite this dataset and the source datasets (see &lt;code&gt;sources.bib&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bib&#34;&gt;@INPROCEEDINGS{Mishra2022Lila,&#xA;  author = {&#xA;    Swaroop Mishra &#xA;      and Matthew Finlayson &#xA;      and Pan Lu &#xA;      and Leonard Tang &#xA;      and Sean Welleck &#xA;      and Chitta Baral &#xA;      and Tanmay Rajpurohit &#xA;      and Oyvind Tafjord &#xA;      and Ashish Sabharwal &#xA;      and Peter Clark &#xA;      and Ashwin Kalyan},&#xA;  title = {Lila: A Unified Benchmark for Mathematical Reasoning},&#xA;  booktitle = {Proceedings of the 2022 Conference on Empirical Methods in Natural Language Processing (EMNLP)},&#xA;  year = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>