<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-16T01:32:11Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>plotly/dash</title>
    <updated>2022-07-16T01:32:11Z</updated>
    <id>tag:github.com,2022-07-16:/plotly/dash</id>
    <link href="https://github.com/plotly/dash" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Analytical Web Apps for Python, R, Julia, and Jupyter. No JavaScript Required.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dash&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/plotly/dash&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/plotly/dash/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/plotly/dash/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/plotly/dash.svg?color=dark-green&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/dash/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/dash.svg?color=dark-green&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/dash/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/dash.svg?color=dark-green&#34; alt=&#34;PyPI - Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/plotly/dash/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/y/plotly/dash.svg?color=dark-green&#34; alt=&#34;GitHub commit activity&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/plotly/dash/alerts&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/alerts/g/plotly/dash.svg?sanitize=true&#34; alt=&#34;LGTM Alerts&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/plotly/dash/context:python&#34;&gt;&lt;img src=&#34;https://img.shields.io/lgtm/grade/python/g/plotly/dash.svg?sanitize=true&#34; alt=&#34;LGTM Grade&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;em&gt;Dash is the most downloaded, trusted Python framework for building ML &amp;amp; data science web apps&lt;/em&gt;.&lt;/h4&gt; &#xA;&lt;p&gt;Built on top of &lt;a href=&#34;https://github.com/plotly/plotly.js&#34;&gt;Plotly.js&lt;/a&gt;, &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; and &lt;a href=&#34;https://palletsprojects.com/p/flask/&#34;&gt;Flask&lt;/a&gt;, Dash ties modern UI elements like dropdowns, sliders, and graphs directly to your analytical Python code. Read &lt;a href=&#34;https://dash.plotly.com/getting-started&#34;&gt;our tutorial&lt;/a&gt; (proudly crafted ❤️ with Dash itself).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dash.plotly.com/getting-started&#34;&gt;Docs&lt;/a&gt;: Create your first Dash app in under 5 minutes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dash.gallery&#34;&gt;dash.gallery&lt;/a&gt;: Dash app gallery with Python &amp;amp; R code&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Dash App Examples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dash App&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1280389/30086128-9bb4a28e-9267-11e7-8fe4-bbac7d53f2b0.gif&#34; alt=&#34;Sample Dash App&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Here’s a simple example of a Dash App that ties a Dropdown to a Plotly Graph. As the user selects a value in the Dropdown, the application code dynamically exports data from Google Finance into a Pandas DataFrame. This app was written in just &lt;strong&gt;43&lt;/strong&gt; lines of code (&lt;a href=&#34;https://gist.github.com/chriddyp/3d2454905d8f01886d651f207e2419f0&#34;&gt;view the source&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1280389/30086123-97c58bde-9267-11e7-98a0-7f626de5199a.gif&#34; alt=&#34;Crossfiltering Dash App&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dash app code is declarative and reactive, which makes it easy to build complex apps that contain many interactive elements. Here’s an example with 5 inputs, 3 outputs, and cross filtering. This app was composed in just 160 lines of code, all of which were Python.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1280389/30086299-768509d0-9268-11e7-8e6b-626ac9ca512c.gif&#34; alt=&#34;Dash App with Mapbox map showing walmart store openings&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dash uses &lt;a href=&#34;https://github.com/plotly/plotly.js&#34;&gt;Plotly.js&lt;/a&gt; for charting. About 50 chart types are supported, including maps.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2678795/161153710-57952401-6e07-42d5-ba3e-bab6419998c7.gif&#34; alt=&#34;Financial report&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Dash isn&#39;t just for dashboards. You have full control over the look and feel of your applications. Here&#39;s a Dash App that&#39;s styled to look like a PDF report.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To learn more about Dash, read the &lt;a href=&#34;https://medium.com/@plotlygraphs/introducing-dash-5ecf7191b503&#34;&gt;extensive announcement letter&lt;/a&gt; or &lt;a href=&#34;https://plotly.com/dash&#34;&gt;jump in with the user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dash OSS &amp;amp; Dash Enterprise&lt;/h3&gt; &#xA;&lt;p&gt;With Dash Open Source, Dash apps run on your local laptop or workstation, but cannot be easily accessed by others in your organization.&lt;/p&gt; &#xA;&lt;p&gt;Scale up with Dash Enterprise when your Dash app is ready for department or company-wide consumption. Or, launch your initiative with Dash Enterprise from the start to unlock developer productivity gains and hands-on acceleration from Plotly&#39;s team.&lt;/p&gt; &#xA;&lt;p&gt;ML Ops Features: A one-stop shop for ML Ops: Horizontally scalable hosting, deployment, and authentication for your Dash apps. No IT or DevOps required.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/app-manager/&#34;&gt;&lt;strong&gt;App manager&lt;/strong&gt;&lt;/a&gt; Deploy &amp;amp; manage Dash apps without needing IT or a DevOps team. App Manager gives you point &amp;amp; click control over all aspects of your Dash deployments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/kubernetes/&#34;&gt;&lt;strong&gt;Kubernetes scaling&lt;/strong&gt;&lt;/a&gt; Ensure high availability of Dash apps and scale horizontally with Dash Enterprise’s Kubernetes architecture. No IT or Helm required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/authentication/&#34;&gt;&lt;strong&gt;No code auth&lt;/strong&gt;&lt;/a&gt; Control Dash app access in a few clicks. Dash Enterprise supports LDAP, AD, PKI, Okta, SAML, OpenID Connect, OAuth, SSO, and simple email authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/job-queue/&#34;&gt;&lt;strong&gt;Job Queue&lt;/strong&gt;&lt;/a&gt; The Job Queue is the key to building scalable Dash apps. Move heavy computation from synchronous Dash callbacks to the Job Queue for asynchronous background processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Low-Code Features: Low-code Dash app capabilities that supercharge developer productivity.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/design-kit/&#34;&gt;&lt;strong&gt;Design Kit&lt;/strong&gt;&lt;/a&gt; Design like a pro without writing a line of CSS. Easily arrange, style, brand, and customize your Dash apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/snapshot-engine/&#34;&gt;&lt;strong&gt;Snapshot Engine&lt;/strong&gt;&lt;/a&gt; Save &amp;amp; share Dash app views as links or PDFs. Or, run a Python job through Dash and have Snapshot Engine email a report when the job is done.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/toolkit/&#34;&gt;&lt;strong&gt;Dashboard Toolkit&lt;/strong&gt;&lt;/a&gt; Drag &amp;amp; drop layouts, chart editing, and crossfilter for your Dash apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/embedding/&#34;&gt;&lt;strong&gt;Embedding&lt;/strong&gt;&lt;/a&gt; Natively embed Dash apps in an existing web application or website without the use of IFrames.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enterprise AI Features: Everything that your data science team needs to rapidly deliver AI/ML research and business initiatives.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/ai-and-ml-templates/&#34;&gt;&lt;strong&gt;AI App Marketplace&lt;/strong&gt;&lt;/a&gt; Dash Enterprise ships with dozens of Dash app templates for business problems where AI/ML is having the greatest impact.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/big-data-for-python/&#34;&gt;&lt;strong&gt;Big Data for Pything&lt;/strong&gt;&lt;/a&gt; Connect to Python&#39;s most popular big data back ends: Dask, Databricks, NVIDIA RAPIDS, Snowflake, Postgres, Vaex, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/gpu-dask-acceleration/&#34;&gt;&lt;strong&gt;GPU &amp;amp; Dask Acceleration&lt;/strong&gt;&lt;/a&gt; Dash Enterprise puts Python’s most popular HPC stack for GPU and parallel CPU computing in the hands of business users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plotly.com/dash/workspaces/&#34;&gt;&lt;strong&gt;Data Science Workspaces&lt;/strong&gt;&lt;/a&gt; Be productive from Day 1. Write and execute Python, R, &amp;amp; Julia code from Dash Enterprise&#39;s onboard code editor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://plotly.com/contact-us/&#34;&gt;https://plotly.com/contact-us/&lt;/a&gt; to get in touch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2678795/161155614-21c54a22-f821-4dda-b910-ee27e27fb5f2.png&#34; alt=&#34;Dash Enterprise&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cj1128/learn-english-with-friends</title>
    <updated>2022-07-16T01:32:11Z</updated>
    <id>tag:github.com,2022-07-16:/cj1128/learn-english-with-friends</id>
    <link href="https://github.com/cj1128/learn-english-with-friends" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎉 排版好看并且内容准确的老友记剧本 PDF，用于学习英语~&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn English with `Friends`&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;排版好看并且内容准确&lt;/strong&gt;的老友记剧本 PDF 文件，用于打印下来学习英语。晚上看剧，早上读英语，幸福生活~&lt;/p&gt; &#xA;&lt;p&gt;最近开始重温老友记，感觉里面的对话很适合用来练习口语，很地道，早晨读一读更是再好不过。网上搜了一圈，找到的资料排版都很难看，So, Why not 自己弄一个呢。&lt;/p&gt; &#xA;&lt;p&gt;生成好的 PDF 文件都在 &lt;code&gt;result&lt;/code&gt; 目录中，注意，因为 &lt;a href=&#34;https://www.princexml.com/&#34;&gt;Prince&lt;/a&gt; 的缘故，PDF 文件第一页有 Prince 的水印，虽然可以通过技术手段去除，但是我觉得保留下来更好。&lt;/p&gt; &#xA;&lt;h2&gt;剧本参考&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fangj.github.io/friends/&#34;&gt;https://fangj.github.io/friends/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.tvsubtitles.net/tvshow-65-1.html&#34;&gt;http://www.tvsubtitles.net/tvshow-65-1.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我在网上并没有找到完全正确的剧本，都有或多或少的瑕疵和错误。因此，最终我使用的剧本是在上面资源的基础上，通过反复听录音一遍遍校对得来的。&lt;/p&gt; &#xA;&lt;p&gt;一个人的精力实在有限，&lt;strong&gt;欢迎大家 Contribute!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;音频&lt;/h2&gt; &#xA;&lt;p&gt;推荐网易云音乐 &lt;a href=&#34;https://music.163.com/#/playlist?id=102769145&amp;amp;userid=127057191&#34;&gt;老友记全 10 季&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;PDF 生成&lt;/h2&gt; &#xA;&lt;p&gt;剧本文件名规范：&lt;code&gt;SxxExx.txt&lt;/code&gt;，例如 &lt;code&gt;S01E01.txt&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;调用 &lt;code&gt;generate.py&lt;/code&gt;，输入为文件或目录，结果写入到 &lt;code&gt;result&lt;/code&gt; 目录中。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 输入为某个具体文件&#xA;$ ./generate.py src/S01/S01E01.txt&#xA;# 输入也可以为一个目录，递归处理目录中的每一个文件&#xA;$ ./generate.py src/S01&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>matterport/Mask_RCNN</title>
    <updated>2022-07-16T01:32:11Z</updated>
    <id>tag:github.com,2022-07-16:/matterport/Mask_RCNN</id>
    <link href="https://github.com/matterport/Mask_RCNN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mask R-CNN for object detection and instance segmentation on Keras and TensorFlow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mask R-CNN for Object Detection and Segmentation&lt;/h1&gt; &#xA;&lt;p&gt;This is an implementation of &lt;a href=&#34;https://arxiv.org/abs/1703.06870&#34;&gt;Mask R-CNN&lt;/a&gt; on Python 3, Keras, and TensorFlow. The model generates bounding boxes and segmentation masks for each instance of an object in the image. It&#39;s based on Feature Pyramid Network (FPN) and a ResNet101 backbone.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/street.png&#34; alt=&#34;Instance Segmentation Sample&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The repository includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Source code of Mask R-CNN built on FPN and ResNet101.&lt;/li&gt; &#xA; &lt;li&gt;Training code for MS COCO&lt;/li&gt; &#xA; &lt;li&gt;Pre-trained weights for MS COCO&lt;/li&gt; &#xA; &lt;li&gt;Jupyter notebooks to visualize the detection pipeline at every step&lt;/li&gt; &#xA; &lt;li&gt;ParallelModel class for multi-GPU training&lt;/li&gt; &#xA; &lt;li&gt;Evaluation on MS COCO metrics (AP)&lt;/li&gt; &#xA; &lt;li&gt;Example of training on your own dataset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The code is documented and designed to be easy to extend. If you use it in your research, please consider citing this repository (bibtex below). If you work on 3D vision, you might find our recently released &lt;a href=&#34;https://matterport.com/blog/2017/09/20/announcing-matterport3d-research-dataset/&#34;&gt;Matterport3D&lt;/a&gt; dataset useful as well. This dataset was created from 3D-reconstructed spaces captured by our customers who agreed to make them publicly available for academic use. You can see more examples &lt;a href=&#34;https://matterport.com/gallery/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/demo.ipynb&#34;&gt;demo.ipynb&lt;/a&gt; Is the easiest way to start. It shows an example of using a model pre-trained on MS COCO to segment objects in your own images. It includes code to run object detection and instance segmentation on arbitrary images.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/shapes/train_shapes.ipynb&#34;&gt;train_shapes.ipynb&lt;/a&gt; shows how to train Mask R-CNN on your own dataset. This notebook introduces a toy dataset (Shapes) to demonstrate training on a new dataset.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/mrcnn/model.py&#34;&gt;model.py&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/mrcnn/utils.py&#34;&gt;utils.py&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/mrcnn/config.py&#34;&gt;config.py&lt;/a&gt;): These files contain the main Mask RCNN implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_data.ipynb&#34;&gt;inspect_data.ipynb&lt;/a&gt;. This notebook visualizes the different pre-processing steps to prepare the training data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_model.ipynb&#34;&gt;inspect_model.ipynb&lt;/a&gt; This notebook goes in depth into the steps performed to detect and segment objects. It provides visualizations of every step of the pipeline.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_weights.ipynb&#34;&gt;inspect_weights.ipynb&lt;/a&gt; This notebooks inspects the weights of a trained model and looks for anomalies and odd patterns.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Step by Step Detection&lt;/h1&gt; &#xA;&lt;p&gt;To help with debugging and understanding the model, there are 3 notebooks (&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_data.ipynb&#34;&gt;inspect_data.ipynb&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_model.ipynb&#34;&gt;inspect_model.ipynb&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/coco/inspect_weights.ipynb&#34;&gt;inspect_weights.ipynb&lt;/a&gt;) that provide a lot of visualizations and allow running the model step by step to inspect the output at each point. Here are a few examples:&lt;/p&gt; &#xA;&lt;h2&gt;1. Anchor sorting and filtering&lt;/h2&gt; &#xA;&lt;p&gt;Visualizes every step of the first stage Region Proposal Network and displays positive and negative anchors along with anchor box refinement. &lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/detection_anchors.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2. Bounding Box Refinement&lt;/h2&gt; &#xA;&lt;p&gt;This is an example of final detection boxes (dotted lines) and the refinement applied to them (solid lines) in the second stage. &lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/detection_refinement.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Mask Generation&lt;/h2&gt; &#xA;&lt;p&gt;Examples of generated masks. These then get scaled and placed on the image in the right location.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/detection_masks.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4.Layer activations&lt;/h2&gt; &#xA;&lt;p&gt;Often it&#39;s useful to inspect the activations at different layers to look for signs of trouble (all zeros or random noise).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/detection_activations.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5. Weight Histograms&lt;/h2&gt; &#xA;&lt;p&gt;Another useful debugging tool is to inspect the weight histograms. These are included in the inspect_weights.ipynb notebook.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/detection_histograms.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Logging to TensorBoard&lt;/h2&gt; &#xA;&lt;p&gt;TensorBoard is another great debugging and visualization tool. The model is configured to log losses and save weights at the end of every epoch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/detection_tensorboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Composing the different pieces into a final result&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/detection_final.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Training on MS COCO&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;re providing pre-trained weights for MS COCO to make it easier to start. You can use those weights as a starting point to train your own variation on the network. Training and evaluation code is in &lt;code&gt;samples/coco/coco.py&lt;/code&gt;. You can import this module in Jupyter notebook (see the provided notebooks for examples) or you can run it directly from the command line as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Train a new model starting from pre-trained COCO weights&#xA;python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=coco&#xA;&#xA;# Train a new model starting from ImageNet weights&#xA;python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=imagenet&#xA;&#xA;# Continue training a model that you had trained earlier&#xA;python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=/path/to/weights.h5&#xA;&#xA;# Continue training the last model you trained. This will find&#xA;# the last trained weights in the model directory.&#xA;python3 samples/coco/coco.py train --dataset=/path/to/coco/ --model=last&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run the COCO evaluation code with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Run COCO evaluation on the last trained model&#xA;python3 samples/coco/coco.py evaluate --dataset=/path/to/coco/ --model=last&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The training schedule, learning rate, and other parameters should be set in &lt;code&gt;samples/coco/coco.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Training on Your Own Dataset&lt;/h1&gt; &#xA;&lt;p&gt;Start by reading this &lt;a href=&#34;https://engineering.matterport.com/splash-of-color-instance-segmentation-with-mask-r-cnn-and-tensorflow-7c761e238b46&#34;&gt;blog post about the balloon color splash sample&lt;/a&gt;. It covers the process starting from annotating images to training to using the results in a sample application.&lt;/p&gt; &#xA;&lt;p&gt;In summary, to train the model on your own dataset you&#39;ll need to extend two classes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Config&lt;/code&gt; This class contains the default configuration. Subclass it and modify the attributes you need to change.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Dataset&lt;/code&gt; This class provides a consistent way to work with any dataset. It allows you to use new datasets for training without having to change the code of the model. It also supports loading multiple datasets at the same time, which is useful if the objects you want to detect are not all available in one dataset.&lt;/p&gt; &#xA;&lt;p&gt;See examples in &lt;code&gt;samples/shapes/train_shapes.ipynb&lt;/code&gt;, &lt;code&gt;samples/coco/coco.py&lt;/code&gt;, &lt;code&gt;samples/balloon/balloon.py&lt;/code&gt;, and &lt;code&gt;samples/nucleus/nucleus.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Differences from the Official Paper&lt;/h2&gt; &#xA;&lt;p&gt;This implementation follows the Mask RCNN paper for the most part, but there are a few cases where we deviated in favor of code simplicity and generalization. These are some of the differences we&#39;re aware of. If you encounter other differences, please do let us know.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Image Resizing:&lt;/strong&gt; To support training multiple images per batch we resize all images to the same size. For example, 1024x1024px on MS COCO. We preserve the aspect ratio, so if an image is not square we pad it with zeros. In the paper the resizing is done such that the smallest side is 800px and the largest is trimmed at 1000px.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bounding Boxes&lt;/strong&gt;: Some datasets provide bounding boxes and some provide masks only. To support training on multiple datasets we opted to ignore the bounding boxes that come with the dataset and generate them on the fly instead. We pick the smallest box that encapsulates all the pixels of the mask as the bounding box. This simplifies the implementation and also makes it easy to apply image augmentations that would otherwise be harder to apply to bounding boxes, such as image rotation.&lt;/p&gt; &lt;p&gt;To validate this approach, we compared our computed bounding boxes to those provided by the COCO dataset. We found that ~2% of bounding boxes differed by 1px or more, ~0.05% differed by 5px or more, and only 0.01% differed by 10px or more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Learning Rate:&lt;/strong&gt; The paper uses a learning rate of 0.02, but we found that to be too high, and often causes the weights to explode, especially when using a small batch size. It might be related to differences between how Caffe and TensorFlow compute gradients (sum vs mean across batches and GPUs). Or, maybe the official model uses gradient clipping to avoid this issue. We do use gradient clipping, but don&#39;t set it too aggressively. We found that smaller learning rates converge faster anyway so we go with that.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Use this bibtex to cite this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{matterport_maskrcnn_2017,&#xA;  title={Mask R-CNN for object detection and instance segmentation on Keras and TensorFlow},&#xA;  author={Waleed Abdulla},&#xA;  year={2017},&#xA;  publisher={Github},&#xA;  journal={GitHub repository},&#xA;  howpublished={\url{https://github.com/matterport/Mask_RCNN}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to this repository are welcome. Examples of things you can contribute:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Speed Improvements. Like re-writing some Python code in TensorFlow or Cython.&lt;/li&gt; &#xA; &lt;li&gt;Training on other datasets.&lt;/li&gt; &#xA; &lt;li&gt;Accuracy Improvements.&lt;/li&gt; &#xA; &lt;li&gt;Visualizations and examples.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also &lt;a href=&#34;https://matterport.com/careers/&#34;&gt;join our team&lt;/a&gt; and help us build even more projects like this one.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Python 3.4, TensorFlow 1.3, Keras 2.0.8 and other common packages listed in &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;MS COCO Requirements:&lt;/h3&gt; &#xA;&lt;p&gt;To train or test on MS COCO, you&#39;ll also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pycocotools (installation instructions below)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cocodataset.org/#home&#34;&gt;MS COCO Dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the 5K &lt;a href=&#34;https://dl.dropboxusercontent.com/s/o43o90bna78omob/instances_minival2014.json.zip?dl=0&#34;&gt;minival&lt;/a&gt; and the 35K &lt;a href=&#34;https://dl.dropboxusercontent.com/s/s3tw5zcg7395368/instances_valminusminival2014.json.zip?dl=0&#34;&gt;validation-minus-minival&lt;/a&gt; subsets. More details in the original &lt;a href=&#34;https://github.com/rbgirshick/py-faster-rcnn/raw/master/data/README.md&#34;&gt;Faster R-CNN implementation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use Docker, the code has been verified to work on &lt;a href=&#34;https://hub.docker.com/r/waleedka/modern-deep-learning/&#34;&gt;this Docker container&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run setup from the repository root directory&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download pre-trained COCO weights (mask_rcnn_coco.h5) from the &lt;a href=&#34;https://github.com/matterport/Mask_RCNN/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) To train or test on MS COCO install &lt;code&gt;pycocotools&lt;/code&gt; from one of these repos. They are forks of the original pycocotools with fixes for Python3 and Windows (the official repo doesn&#39;t seem to be active anymore).&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Linux: &lt;a href=&#34;https://github.com/waleedka/coco&#34;&gt;https://github.com/waleedka/coco&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;a href=&#34;https://github.com/philferriere/cocoapi&#34;&gt;https://github.com/philferriere/cocoapi&lt;/a&gt;. You must have the Visual C++ 2015 build tools on your path (see the repo for additional details)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Projects Using this Model&lt;/h1&gt; &#xA;&lt;p&gt;If you extend this model to other datasets or build projects that use it, we&#39;d love to hear from you.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OOT3UIXZztE&#34;&gt;4K Video Demo&lt;/a&gt; by Karol Majek.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OOT3UIXZztE&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/4k_video.gif&#34; alt=&#34;Mask RCNN on 4K Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jremillard/images-to-osm&#34;&gt;Images to OSM&lt;/a&gt;: Improve OpenStreetMap by adding baseball, soccer, tennis, football, and basketball fields.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/images_to_osm.png&#34; alt=&#34;Identify sport fields in satellite images&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://engineering.matterport.com/splash-of-color-instance-segmentation-with-mask-r-cnn-and-tensorflow-7c761e238b46&#34;&gt;Splash of Color&lt;/a&gt;. A blog post explaining how to train this model from scratch and use it to implement a color splash effect.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/balloon_color_splash.gif&#34; alt=&#34;Balloon Color Splash&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/samples/nucleus&#34;&gt;Segmenting Nuclei in Microscopy Images&lt;/a&gt;. Built for the &lt;a href=&#34;https://www.kaggle.com/c/data-science-bowl-2018&#34;&gt;2018 Data Science Bowl&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Code is in the &lt;code&gt;samples/nucleus&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/nucleus_segmentation.png&#34; alt=&#34;Nucleus Segmentation&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/SUYEgit/Surgery-Robot-Detection-Segmentation&#34;&gt;Detection and Segmentation for Surgery Robots&lt;/a&gt; by the NUS Control &amp;amp; Mechatronics Lab.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/SUYEgit/Surgery-Robot-Detection-Segmentation/raw/master/assets/video.gif&#34; alt=&#34;Surgery Robot Detection and Segmentation&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://medium.com/geoai/reconstructing-3d-buildings-from-aerial-lidar-with-ai-details-6a81cb3079c0&#34;&gt;Reconstructing 3D buildings from aerial LiDAR&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A proof of concept project by &lt;a href=&#34;https://www.esri.com/&#34;&gt;Esri&lt;/a&gt;, in collaboration with Nvidia and Miami-Dade County. Along with a great write up and code by Dmitry Kudinov, Daniel Hedges, and Omar Maher. &lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/project_3dbuildings.png&#34; alt=&#34;3D Building Reconstruction&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/oist/usiigaci&#34;&gt;Usiigaci: Label-free Cell Tracking in Phase Contrast Microscopy&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A project from Japan to automatically track cells in a microfluidics platform. Paper is pending, but the source code is released.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/project_usiigaci1.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/project_usiigaci2.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://www.mdpi.com/2072-4292/10/9/1487&#34;&gt;Characterization of Arctic Ice-Wedge Polygons in Very High Spatial Resolution Aerial Imagery&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Research project to understand the complex processes between degradations in the Arctic and climate change. By Weixing Zhang, Chandi Witharana, Anna Liljedahl, and Mikhail Kanevskiy. &lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/project_ice_wedge_polygons.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/huuuuusy/Mask-RCNN-Shiny&#34;&gt;Mask-RCNN Shiny&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A computer vision class project by HU Shiyu to apply the color pop effect on people with beautiful results. &lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/project_shiny1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/crowdAI/crowdai-mapping-challenge-mask-rcnn&#34;&gt;Mapping Challenge&lt;/a&gt;: Convert satellite imagery to maps for use by humanitarian organisations.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/mapping_challenge.png&#34; alt=&#34;Mapping Challenge&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/ctu-geoforall-lab/i.ann.maskrcnn&#34;&gt;GRASS GIS Addon&lt;/a&gt; to generate vector masks from geospatial imagery. Based on a &lt;a href=&#34;https://github.com/ctu-geoforall-lab-projects/dp-pesek-2018&#34;&gt;Master&#39;s thesis&lt;/a&gt; by Ondřej Pešek.&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/matterport/Mask_RCNN/master/assets/project_grass_gis.png&#34; alt=&#34;GRASS GIS Image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>