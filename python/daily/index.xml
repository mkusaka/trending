<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-29T01:44:02Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KasRoudra/PyPhisher</title>
    <updated>2022-08-29T01:44:02Z</updated>
    <id>tag:github.com,2022-08-29:/KasRoudra/PyPhisher</id>
    <link href="https://github.com/KasRoudra/PyPhisher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy to use phishing tool with 77 website templates. Author is not responsible for any misuse.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;PyPhisher&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Version-1.9-green?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/KasRoudra/pyphisher?style=for-the-badge&amp;amp;color=orange&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/KasRoudra/pyphisher?color=cyan&amp;amp;style=for-the-badge&amp;amp;color=purple&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/watchers/KasRoudra/pyphisher?color=cyan&amp;amp;style=for-the-badge&amp;amp;color=purple&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/KasRoudra/pyphisher?color=red&amp;amp;style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/KasRoudra/pyphisher?style=for-the-badge&amp;amp;color=blue&#34;&gt; &lt;img src=&#34;https://hits.dwyl.com/KasRoudra/PyPhisher.svg?sanitize=true&#34; width=&#34;140&#34; height=&#34;28&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/badge/Author-KasRoudra-purple?style=flat-square&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Open%20Source-80%25-cyan?style=flat-square&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Made%20in-Bangladesh-green?colorA=%23ff0000&amp;amp;colorB=%23017e40&amp;amp;style=flat-square&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Written%20In-Python-blue?style=flat-square&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;[âˆš] Description :&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Ultimate phishing tool in python. Includes popular websites like facebook, twitter, instagram, github, reddit, gmail and many others.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;[+] Installation&lt;/h3&gt; &#xA;&lt;h5&gt;Install primary dependencies (git, python, php)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Debian (Ubuntu, Kali-Linux, Parrot) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo apt install git python php -y&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Arch (Manjaro) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo pacman -S git python php&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Redhat(Fedora) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo dnf install git python php -y&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For Termux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkg install git python php -y&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Clone this repository&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/KasRoudra/PyPhisher&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Enter the directory&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd PyPhisher&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Install all modoules&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pip3 install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Run the tool&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python3 pyphisher.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Or, directly run&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/KasRoudra/PyPhisher/main/pyphisher.py &amp;amp;&amp;amp; python3 pyphisher.py&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pip&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pip3 install pyphisher&lt;/code&gt; [For Termux]&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo pip3 install pyphisher&lt;/code&gt; [For Linux]&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pyphisher&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo docker pull kasroudra/pyphisher&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo docker run --rm -it kasroudra/pyphisher&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: pyphisher.py [-h] [-p PORT] [-o OPTION] [-t TUNNELER] [--noupdate]&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -p PORT, --port PORT  PyPhisher&#39;s server port [ Default : 8080 ]&#xA;  -o OPTION, --option OPTION&#xA;                        PyPhisher&#39;s template index [ Default : null ]&#xA;  -t TUNNELER, --tunneler TUNNELER&#xA;                        Tunneler to be chosen while url shortening&#xA;  --noupdate            Skip update checking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi platform (Supports most linux)&lt;/li&gt; &#xA; &lt;li&gt;77 Website templates&lt;/li&gt; &#xA; &lt;li&gt;Concurrent triple tunneling (Ngrok, Cloudflared and Loclx)&lt;/li&gt; &#xA; &lt;li&gt;OTP Support&lt;/li&gt; &#xA; &lt;li&gt;Credentials mailing&lt;/li&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Possible error diagnoser&lt;/li&gt; &#xA; &lt;li&gt;Built-in masking of URL&lt;/li&gt; &#xA; &lt;li&gt;Custom masking of URL&lt;/li&gt; &#xA; &lt;li&gt;URL Shadowing&lt;/li&gt; &#xA; &lt;li&gt;Portable file (Can be run from any directory)&lt;/li&gt; &#xA; &lt;li&gt;Get IP Address and many other details along with login credentials&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Relevant Tools by Me&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KasRoudra/CamHacker&#34;&gt;CamHacker&lt;/a&gt; for image phishing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KasRoudra/VidPhisher&#34;&gt;VidPhisher&lt;/a&gt; for video phishing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Python(3)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bs4&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PHP&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;200MB storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If not found, php and python modoules will be installed on first run&lt;/p&gt; &#xA;&lt;h4&gt;Tested on&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Termux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ubuntu&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Kali-Linux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Arch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Fedora&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Manjaro&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the script&lt;/li&gt; &#xA; &lt;li&gt;Choose a Website&lt;/li&gt; &#xA; &lt;li&gt;Wait sometimes for setting up all&lt;/li&gt; &#xA; &lt;li&gt;Send the generated link to victim&lt;/li&gt; &#xA; &lt;li&gt;Wait for victim login. As soon as he/she logs in, credentials will be captured&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Example&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KasRoudra/PyPhisher/main/files/pyphisher.gif&#34; alt=&#34;PyPhisher&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rebrand.ly/pyphishervideo&#34;&gt;PyPhisher Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Whats new in 1.8?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Mailing&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Now you can send credentials to any email. You just need a gmail and app password to use this feature. Edit the data in &lt;code&gt;files/email.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Custom Preview&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Now you can set a custom social media preview of your link. Enter a website url when asked in &lt;code&gt;shadow url&lt;/code&gt;. Your link will have same appearence as that website in whatsapp/messenger/telegram etc. Note this only works with Cloudflared urls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OTP Support&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;20 templates will show an option to enable otp pages&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Saved&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An option to view all saved credentials just from PyPhisher. This credentials won&#39;t get deleted in PyPhisher update&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Whats new in 1.9?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Loclx&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introducing a new port forwarding/tunneling service named localxpose or loclx. It is quite slower but still usable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Docker image&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A docker image is published which can be pulled and run&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;PIP&lt;/em&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This project is now also available in PIP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Solution of common issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some secured browsers like Firefox can warn for &#39;@&#39; prefixed links. You should use pure links or custom link to avoid it&lt;/li&gt; &#xA; &lt;li&gt;Ngrok links require Ngrok token to work. Follow the instructions &lt;a href=&#34;https://github.com/KasRoudra/PyPhisher/issues/1&#34;&gt;here&lt;/a&gt; to set up ngrok token&lt;/li&gt; &#xA; &lt;li&gt;Some android requires hotspot to start Ngrok or Cloudflared. If you face &#39;tunneling failed&#39; in android, most probably your hotspot is turned off. Turn it on and keep it on untill you close PyPhisher&lt;/li&gt; &#xA; &lt;li&gt;If you want mailing credentials then you need to use app password. Visit &lt;a href=&#34;https://myaccount.google.com/u/0/apppasswords&#34;&gt;here&lt;/a&gt; and generate an app password, put that in &lt;code&gt;files/email.json&lt;/code&gt;. You may need to enable 2FA before it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;[!] Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;This tool is developed for educational purposes. Here it demonstrates how phishing works. If anybody wants to gain unauthorized access to someones social media, he/she may try out this at his/her own risk. You have your own responsibilities and you are liable to any damage or violation of laws by this tool. The author is not responsible for any misuse of PyPhisher!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;This repository is open source to help others. So if you wish to copy, consider giving credit!&lt;/h3&gt; &#xA;&lt;h2&gt;Credits:&lt;/h2&gt; &#xA;&lt;p&gt;Some base codes and templates are from &lt;a href=&#34;https://github.com/htr-tech/zphisher&#34;&gt;htr-tech&lt;/a&gt;, otp templates are from &lt;a href=&#34;https://guthub.com/ignitech/AdvPhishing&#34;&gt;ignitech&lt;/a&gt; and url masking is inspired from &lt;a href=&#34;https://github.com/jaykali/maskphish&#34;&gt;jaykali&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;If this tool helped you, consider staring repository. Your stars encourage me a lot!&lt;/h4&gt; &#xA;&lt;h2&gt;[~] Find Me on :&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/KasRoudra&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Github-KasRoudra-green?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;Github&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;mailto:kasroudrakrd@gmail.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gmail-KasRoudra-green?style=for-the-badge&amp;amp;logo=gmail&#34; alt=&#34;Gmail&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://facebook.com/KasRoudra&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Facebook-KasRoudra-green?style=for-the-badge&amp;amp;logo=facebook&#34; alt=&#34;Facebook&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://m.me/KasRoudra&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Messenger-KasRoudra-green?style=for-the-badge&amp;amp;logo=messenger&#34; alt=&#34;Messenger&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ranaroussi/yfinance</title>
    <updated>2022-08-29T01:44:02Z</updated>
    <id>tag:github.com,2022-08-29:/ranaroussi/yfinance</id>
    <link href="https://github.com/ranaroussi/yfinance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Download market data from Yahoo! Finance&#39;s API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Download market data from Yahoo! Finance&#39;s API&lt;/h1&gt; &#xA;&lt;table border=&#34;1&#34; cellpadding=&#34;10&#34;&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;h4&gt;*** IMPORTANT LEGAL DISCLAIMER ***&lt;/h4&gt; &#xA;    &lt;hr&gt; &lt;p&gt;&lt;strong&gt;Yahoo!, Y!Finance, and Yahoo! finance are registered trademarks of Yahoo, Inc.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;yfinance is &lt;strong&gt;not&lt;/strong&gt; affiliated, endorsed, or vetted by Yahoo, Inc. It&#39;s an open-source tool that uses Yahoo&#39;s publicly available APIs, and is intended for research and educational purposes.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;You should refer to Yahoo!&#39;s terms of use&lt;/strong&gt; (&lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/index.htm&#34;&gt;here&lt;/a&gt;) &lt;strong&gt;for details on your rights to use the actual data downloaded. Remember - the Yahoo! finance API is intended for personal use only.&lt;/strong&gt;&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/badge/python-2.7,%203.6+-blue.svg?style=flat&#34; alt=&#34;Python version&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/pypi/v/yfinance.svg?maxAge=60%&#34; alt=&#34;PyPi version&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/pypi/status/yfinance.svg?maxAge=60&#34; alt=&#34;PyPi status&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://pypi.python.org/pypi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/pypi/dm/yfinance.svg?maxAge=2592000&amp;amp;label=installs&amp;amp;color=%2327B1FF&#34; alt=&#34;PyPi downloads&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://travis-ci.com/github/ranaroussi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/travis/ranaroussi/yfinance/main.svg?maxAge=1&#34; alt=&#34;Travis-CI build status&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://www.codefactor.io/repository/github/ranaroussi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://www.codefactor.io/repository/github/ranaroussi/yfinance/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://github.com/ranaroussi/yfinance&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/github/stars/ranaroussi/yfinance.svg?style=social&amp;amp;label=Star&amp;amp;maxAge=60&#34; alt=&#34;Star this repo&#34;&gt;&lt;/a&gt; &lt;a target=&#34;new&#34; href=&#34;https://twitter.com/aroussi&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://img.shields.io/twitter/follow/aroussi.svg?style=social&amp;amp;label=Follow&amp;amp;maxAge=60&#34; alt=&#34;Follow me on twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;yfinance&lt;/strong&gt; offers a threaded and Pythonic way to download market data from &lt;a href=&#34;https://finance.yahoo.com&#34;&gt;Yahoo!â“‡ finance&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;â†’ Check out this &lt;a href=&#34;https://aroussi.com/#post/python-yahoo-finance&#34;&gt;Blog post&lt;/a&gt; for a detailed tutorial with code examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ranaroussi/yfinance/raw/main/CHANGELOG.rst&#34;&gt;Changelog Â»&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;The Ticker module&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Ticker&lt;/code&gt; module, which allows you to access ticker data in a more Pythonic way:&lt;/p&gt; &#xA;&lt;p&gt;Note: yahoo finance datetimes are received as UTC.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;&#xA;msft = yf.Ticker(&#34;MSFT&#34;)&#xA;&#xA;# get stock info&#xA;msft.info&#xA;&#xA;# get historical market data&#xA;hist = msft.history(period=&#34;max&#34;)&#xA;&#xA;# show actions (dividends, splits)&#xA;msft.actions&#xA;&#xA;# show dividends&#xA;msft.dividends&#xA;&#xA;# show splits&#xA;msft.splits&#xA;&#xA;# show financials&#xA;msft.financials&#xA;msft.quarterly_financials&#xA;&#xA;# show major holders&#xA;msft.major_holders&#xA;&#xA;# show institutional holders&#xA;msft.institutional_holders&#xA;&#xA;# show balance sheet&#xA;msft.balance_sheet&#xA;msft.quarterly_balance_sheet&#xA;&#xA;# show cashflow&#xA;msft.cashflow&#xA;msft.quarterly_cashflow&#xA;&#xA;# show earnings&#xA;msft.earnings&#xA;msft.quarterly_earnings&#xA;&#xA;# show sustainability&#xA;msft.sustainability&#xA;&#xA;# show analysts recommendations&#xA;msft.recommendations&#xA;&#xA;# show next event (earnings, etc)&#xA;msft.calendar&#xA;&#xA;# show all earnings dates&#xA;msft.earnings_dates&#xA;&#xA;# show ISIN code - *experimental*&#xA;# ISIN = International Securities Identification Number&#xA;msft.isin&#xA;&#xA;# show options expirations&#xA;msft.options&#xA;&#xA;# show news&#xA;msft.news&#xA;&#xA;# get option chain for specific expiration&#xA;opt = msft.option_chain(&#39;YYYY-MM-DD&#39;)&#xA;# data available via: opt.calls, opt.puts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use a proxy server for downloading data, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;&#xA;msft = yf.Ticker(&#34;MSFT&#34;)&#xA;&#xA;msft.history(..., proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_actions(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_dividends(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_splits(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_balance_sheet(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.get_cashflow(proxy=&#34;PROXY_SERVER&#34;)&#xA;msft.option_chain(..., proxy=&#34;PROXY_SERVER&#34;)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a custom &lt;code&gt;requests&lt;/code&gt; session (for example to cache calls to the API or customize the &lt;code&gt;User-agent&lt;/code&gt; header), pass a &lt;code&gt;session=&lt;/code&gt; argument to the Ticker constructor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests_cache&#xA;session = requests_cache.CachedSession(&#39;yfinance.cache&#39;)&#xA;session.headers[&#39;User-agent&#39;] = &#39;my-program/1.0&#39;&#xA;ticker = yf.Ticker(&#39;msft aapl goog&#39;, session=session)&#xA;# The scraped response will be stored in the cache&#xA;ticker.actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To initialize multiple &lt;code&gt;Ticker&lt;/code&gt; objects, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;&#xA;tickers = yf.Tickers(&#39;msft aapl goog&#39;)&#xA;# ^ returns a named tuple of Ticker objects&#xA;&#xA;# access each ticker using (example)&#xA;tickers.tickers.MSFT.info&#xA;tickers.tickers.AAPL.history(period=&#34;1mo&#34;)&#xA;tickers.tickers.GOOG.actions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fetching data for multiple tickers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yfinance as yf&#xA;data = yf.download(&#34;SPY AAPL&#34;, start=&#34;2017-01-01&#34;, end=&#34;2017-04-30&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I&#39;ve also added some options to make life easier :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = yf.download(  # or pdr.get_data_yahoo(...&#xA;        # tickers list or string as well&#xA;        tickers = &#34;SPY AAPL MSFT&#34;,&#xA;&#xA;        # use &#34;period&#34; instead of start/end&#xA;        # valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max&#xA;        # (optional, default is &#39;1mo&#39;)&#xA;        period = &#34;ytd&#34;,&#xA;&#xA;        # fetch data by interval (including intraday if period &amp;lt; 60 days)&#xA;        # valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo&#xA;        # (optional, default is &#39;1d&#39;)&#xA;        interval = &#34;1m&#34;,&#xA;&#xA;        # group by ticker (to access via data[&#39;SPY&#39;])&#xA;        # (optional, default is &#39;column&#39;)&#xA;        group_by = &#39;ticker&#39;,&#xA;&#xA;        # adjust all OHLC automatically&#xA;        # (optional, default is False)&#xA;        auto_adjust = True,&#xA;&#xA;        # download pre/post regular market hours data&#xA;        # (optional, default is False)&#xA;        prepost = True,&#xA;&#xA;        # use threads for mass downloading? (True/False/Integer)&#xA;        # (optional, default is True)&#xA;        threads = True,&#xA;&#xA;        # proxy URL scheme use use when downloading?&#xA;        # (optional, default is None)&#xA;        proxy = None&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Managing Multi-Level Columns&lt;/h3&gt; &#xA;&lt;p&gt;The following answer on Stack Overflow is for &lt;a href=&#34;https://stackoverflow.com/questions/63107801&#34;&gt;How to deal with multi-level column names downloaded with yfinance?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yfinance&lt;/code&gt; returns a &lt;code&gt;pandas.DataFrame&lt;/code&gt; with multi-level column names, with a level for the ticker and a level for the stock price data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The answer discusses: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;How to correctly read the the multi-level columns after saving the dataframe to a csv with &lt;code&gt;pandas.DataFrame.to_csv&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;How to download single or multiple tickers into a single dataframe with single level column names and a ticker column&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;code&gt;pandas_datareader&lt;/code&gt; override&lt;/h2&gt; &#xA;&lt;p&gt;If your code uses &lt;code&gt;pandas_datareader&lt;/code&gt; and you want to download data faster, you can &#34;hijack&#34; &lt;code&gt;pandas_datareader.data.get_data_yahoo()&lt;/code&gt; method to use &lt;strong&gt;yfinance&lt;/strong&gt; while making sure the returned data is in the same format as &lt;strong&gt;pandas_datareader&lt;/strong&gt;&#39;s &lt;code&gt;get_data_yahoo()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pandas_datareader import data as pdr&#xA;&#xA;import yfinance as yf&#xA;yf.pdr_override() # &amp;lt;== that&#39;s all it takes :-)&#xA;&#xA;# download dataframe&#xA;data = pdr.get_data_yahoo(&#34;SPY&#34;, start=&#34;2017-01-01&#34;, end=&#34;2017-04-30&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;yfinance&lt;/code&gt; using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{.sourceCode&#34;&gt;$ pip install yfinance --upgrade --no-cache-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install &lt;code&gt;yfinance&lt;/code&gt; using &lt;code&gt;conda&lt;/code&gt;, see &lt;a href=&#34;https://anaconda.org/ranaroussi/yfinance&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt; &amp;gt;= 2.7, 3.4+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydata/pandas&#34;&gt;Pandas&lt;/a&gt; (tested to work with &amp;gt;=0.23.1)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.numpy.org&#34;&gt;Numpy&lt;/a&gt; &amp;gt;= 1.11.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.python-requests.org/en/master/&#34;&gt;requests&lt;/a&gt; &amp;gt;= 2.14.2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/lxml/&#34;&gt;lxml&lt;/a&gt; &amp;gt;= 4.5.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional (if you want to use &lt;code&gt;pandas_datareader&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydata/pandas-datareader&#34;&gt;pandas_datareader&lt;/a&gt; &amp;gt;= 0.4.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Legal Stuff&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;yfinance&lt;/strong&gt; is distributed under the &lt;strong&gt;Apache Software License&lt;/strong&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/ranaroussi/yfinance/main/LICENSE.txt&#34;&gt;LICENSE.txt&lt;/a&gt; file in the release for details.&lt;/p&gt; &#xA;&lt;p&gt;AGAIN - yfinance is &lt;strong&gt;not&lt;/strong&gt; affiliated, endorsed, or vetted by Yahoo, Inc. It&#39;s an open-source tool that uses Yahoo&#39;s publicly available APIs, and is intended for research and educational purposes. You should refer to Yahoo!&#39;s terms of use (&lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/product-atos/apiforydn/index.htm&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://legal.yahoo.com/us/en/yahoo/terms/otos/index.html&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://policies.yahoo.com/us/en/yahoo/terms/index.htm&#34;&gt;here&lt;/a&gt;) for detailes on your rights to use the actual data downloaded.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;P.S.&lt;/h3&gt; &#xA;&lt;p&gt;Please drop me an note with any feedback you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ran Aroussi&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pytorch/torchdynamo</title>
    <updated>2022-08-29T01:44:02Z</updated>
    <id>tag:github.com,2022-08-29:/pytorch/torchdynamo</id>
    <link href="https://github.com/pytorch/torchdynamo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Python-level JIT compiler designed to make unmodified PyTorch programs faster.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TorchDynamo&lt;/h1&gt; &#xA;&lt;p&gt;TorchDynamo is a Python-level JIT compiler designed to make unmodified PyTorch programs faster. TorchDynamo hooks into the frame evaluation API in CPython (&lt;a href=&#34;https://www.python.org/dev/peps/pep-0523/&#34;&gt;PEP 523&lt;/a&gt;) to dynamically modify Python bytecode right before it is executed. It rewrites Python bytecode in order to extract sequences of PyTorch operations into an &lt;a href=&#34;https://pytorch.org/docs/stable/fx.html&#34;&gt;FX Graph&lt;/a&gt; which is then just-in-time compiled with an ensemble of different backends and autotuning. It creates this FX Graph through bytecode analysis and is designed to mix Python execution with compiled backends to get the best of both worlds: usability and performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pytorch/torchdynamo/main/TorchDynamo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Links for more information and development progress updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-discuss.pytorch.org/t/torchdynamo-an-experiment-in-dynamic-python-bytecode-transformation/361&#34;&gt;Update 1: An Experiment in Dynamic Python Bytecode Transformation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-discuss.pytorch.org/t/torchdynamo-update-1-48x-geomean-speedup-on-torchbench-cpu-inference/397&#34;&gt;Update 2: 1.48x Geomean Speedup on TorchBench CPU Inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-discuss.pytorch.org/t/torchdynamo-update-3-gpu-inference-edition/460&#34;&gt;Update 3: GPU Inference Edition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-discuss.pytorch.org/t/torchdynamo-update-4-lazytensor-nvfuser-experiments/496&#34;&gt;Update 4: LazyTensor &amp;amp; nvFuser Experiments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-discuss.pytorch.org/t/torchdynamo-update-5-improved-capture-bigger-graphs/556&#34;&gt;Update 5: Improved Capture &amp;amp; Bigger Graphs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-discuss.pytorch.org/t/torchdynamo-update-6-training-support-with-aotautograd/570&#34;&gt;Update 6: Training support with AOTAutograd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dev-discuss.pytorch.org/t/torchdynamo-update-7-inference-with-fx2trt/576&#34;&gt;Update 7: Inference with FX2TRT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Video) &lt;a href=&#34;https://www.youtube.com/watch?v=egZB5Uxki0I&#34;&gt;Live deep-dive into TorchDynamo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;TorchDynamo is experimental&lt;/em&gt; and under active development. You are welcome to try it out and contribute, but should expect to find bugs and rough edges.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements and Setup&lt;/h2&gt; &#xA;&lt;p&gt;Python 3.8 is recommended. Python 3.7 through 3.10 are supported and tested.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;PyTorch&lt;/em&gt;&#39;s main branch contains some fixes that improve TorchDynamo support, so we recommend building &lt;a href=&#34;https://github.com/pytorch/pytorch#from-source&#34;&gt;PyTorch from source&lt;/a&gt; or using PyTorch nightly builds.&lt;/p&gt; &#xA;&lt;p&gt;Other development requirements can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install TorchDynamo with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python setup.py develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is a basic example of how to use TorchDynamo. One can decorate a function or a method using &lt;code&gt;torchdynamo.optimize&lt;/code&gt; to enable TorchDynamo optimization.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import torch&#xA;import torchdynamo&#xA;&#xA;def my_compiler(gm: torch.fx.GraphModule, example_inputs: List[torch.Tensor]):&#xA;    print(&#34;my_compiler() called with FX graph:&#34;)&#xA;    gm.graph.print_tabular()&#xA;    return gm.forward  # return a python callable&#xA;&#xA;@torchdynamo.optimize(my_compiler)&#xA;def fn(x, y):&#xA;    a = torch.cos(x)&#xA;    b = torch.sin(y)&#xA;    return a + b&#xA;&#xA;fn(torch.randn(10), torch.randn(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the above example produces this output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_compiler() called with FX graph:&#xA;opcode         name    target                                                  args        kwargs&#xA;-------------  ------  ------------------------------------------------------  ----------  --------&#xA;placeholder    x       x                                                       ()          {}&#xA;placeholder    y       y                                                       ()          {}&#xA;call_function  cos     &amp;lt;built-in method cos of type object at 0x7f1a894649a8&amp;gt;  (x,)        {}&#xA;call_function  sin     &amp;lt;built-in method sin of type object at 0x7f1a894649a8&amp;gt;  (y,)        {}&#xA;call_function  add     &amp;lt;built-in function add&amp;gt;                                 (cos, sin)  {}&#xA;output         output  output                                                  ((add,),)   {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This works for &lt;code&gt;torch.nn.Module&lt;/code&gt; as well as shown below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;import torch&#xA;import torchdynamo&#xA;&#xA;class MockModule(torch.nn.Module):&#xA;    def __init__(self):&#xA;        super().__init__()&#xA;        self.relu = torch.nn.ReLU()&#xA;&#xA;    def forward(self, x):&#xA;        return self.relu(torch.cos(x))&#xA;&#xA;mod = MockModule()&#xA;optimized_mod = torchdynamo.optimize(my_compiler)(mod)&#xA;optimized_mod(torch.randn(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above examples, TorchDynamo uses a custom compiler (also referred to as backend in the rest of the doc) &lt;code&gt;my_compiler&lt;/code&gt; that just prints the Fx GraphModule extracted by TorchDynamo&#39;s bytecode analysis, and returns the &lt;code&gt;forward&lt;/code&gt; callable. One could write new compilers in a similar fashion.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take a look at one more example with control flow.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from typing import List&#xA;import torch&#xA;import torchdynamo&#xA;&#xA;def my_compiler(gm: torch.fx.GraphModule, example_inputs: List[torch.Tensor]):&#xA;    print(&#34;my_compiler() called with FX graph:&#34;)&#xA;    gm.graph.print_tabular()&#xA;    return gm.forward  # return a python callable&#xA;&#xA;@torchdynamo.optimize(my_compiler)&#xA;def toy_example(a, b):&#xA;    x = a / (torch.abs(a) + 1)&#xA;    if b.sum() &amp;lt; 0:&#xA;        b = b * -1&#xA;    return x * b&#xA;&#xA;for _ in range(100):&#xA;    toy_example(torch.randn(10), torch.randn(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running this example produces the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my_compiler() called with FX graph:&#xA;opcode         name     target                                                  args              kwargs&#xA;-------------  -------  ------------------------------------------------------  ----------------  --------&#xA;placeholder    a        a                                                       ()                {}&#xA;placeholder    b        b                                                       ()                {}&#xA;call_function  abs_1    &amp;lt;built-in method abs of type object at 0x7f8d259298a0&amp;gt;  (a,)              {}&#xA;call_function  add      &amp;lt;built-in function add&amp;gt;                                 (abs_1, 1)        {}&#xA;call_function  truediv  &amp;lt;built-in function truediv&amp;gt;                             (a, add)          {}&#xA;call_method    sum_1    sum                                                     (b,)              {}&#xA;call_function  lt       &amp;lt;built-in function lt&amp;gt;                                  (sum_1, 0)        {}&#xA;output         output   output                                                  ((truediv, lt),)  {}&#xA;&#xA;my_compiler() called with FX graph:&#xA;opcode         name    target                   args         kwargs&#xA;-------------  ------  -----------------------  -----------  --------&#xA;placeholder    b       b                        ()           {}&#xA;placeholder    x       x                        ()           {}&#xA;call_function  mul     &amp;lt;built-in function mul&amp;gt;  (b, -1)      {}&#xA;call_function  mul_1   &amp;lt;built-in function mul&amp;gt;  (x, mul)     {}&#xA;output         output  output                   ((mul_1,),)  {}&#xA;&#xA;my_compiler() called with FX graph:&#xA;opcode         name    target                   args       kwargs&#xA;-------------  ------  -----------------------  ---------  --------&#xA;placeholder    b       b                        ()         {}&#xA;placeholder    x       x                        ()         {}&#xA;call_function  mul     &amp;lt;built-in function mul&amp;gt;  (x, b)     {}&#xA;output         output  output                   ((mul,),)  {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the order of the last two graphs is nondeterministic depending on which one is encountered first by the just-in-time compiler.&lt;/p&gt; &#xA;&lt;h3&gt;Existing Backends&lt;/h3&gt; &#xA;&lt;p&gt;TorchDynamo has a growing list of backends, which can be found in &lt;a href=&#34;https://github.com/pytorch/torchdynamo/raw/main/torchdynamo/optimizations/backends.py&#34;&gt;backends.py&lt;/a&gt; or &lt;code&gt;torchdynamo.list_backends()&lt;/code&gt;. Note many backends require installing additional packages. Some of the commonly used backends are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;torchdynamo.optimize(&#34;eager&#34;)&lt;/code&gt; - Uses PyTorch to run the extracted GraphModule. This is quite useful in debugging TorchDynamo issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;torchdynamo.optimize(&#34;nvfuser&#34;)&lt;/code&gt; - Uses Torchscript and nvfuser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;torchdynamo.optimize(&#34;ofi&#34;)&lt;/code&gt; - Uses Torchscript optimize_for_inference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;torchdynamo.optimize(&#34;fx2trt&#34;)&lt;/code&gt; - Uses Nvidia TensorRT for inference optimizations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The above backends optimize inference. Let&#39;s see how TorchDynamo supports training.&lt;/p&gt; &#xA;&lt;h3&gt;Training and AotAutograd&lt;/h3&gt; &#xA;&lt;p&gt;Torchdynamo supports training, using AotAutograd to capture backwards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;only the .forward() graph is captured by torchdynamo&#39;s python evalframe frontend&lt;/li&gt; &#xA; &lt;li&gt;for each segment of .forward() that torchdynamo captures, it uses AotAutograd to generate a backward graph segment&lt;/li&gt; &#xA; &lt;li&gt;each pair of forward, backward graph are (optionally) min-cut partitioned to save the minimal state between forward/backwrad&lt;/li&gt; &#xA; &lt;li&gt;the forward, backward pairs are wrapped in autograd.function modules&lt;/li&gt; &#xA; &lt;li&gt;usercode calling .backward() still triggers eager&#39;s autograd engine, which runs each &#39;compiled backward&#39; graph as if it were one op, also running any non-compiled eager ops&#39; .backward() functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Current limitations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;optimizer ops are currently not captured at all, and thus not compiled (under investigation to add support)&lt;/li&gt; &#xA; &lt;li&gt;DDP and FSDP, which rely on autograd &#39;hooks&#39; firing between backward ops to schedule communications ops, may be pessimized by having all communication ops scheduled &lt;em&gt;after&lt;/em&gt; whole compiled regions of backwards ops (WIP to fix this)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Specifically, these are the exisiting backends&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;torchdynamo.optimize(&#34;aot_nop&#34;)&lt;/code&gt; - Uses AotAutograd with no compiler, i.e, just using PyTorch eager for the AotAutograd&#39;s extracted forward and backward graphs. This is useful for debugging, and unlikely to give speedups.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;torchdynamo.optimize(&#34;aot_nvfuser&#34;)&lt;/code&gt; - Use AotAutograd with Torchscipt and nvfuser compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# nothing special about this part&#xA;model = ...&#xA;optimizer = ...&#xA;&#xA;&#xA;@torchdynamo.optimize(&#34;aot_nvfuser&#34;)&#xA;def training_iteration(...):&#xA;    # forward graphs are captured, and AotAutograd generates corresponding backward graphs&#xA;    # both forward and backward graphs are compiled at this time&#xA;    loss = model(torch.randn(10), torch.randn(10))&#xA;&#xA;    # no further compilation happens here, but eager autograd executes compiled backwards graphs from above&#xA;    loss.backward()&#xA;&#xA;    # dynamo won&#39;t compile this, currently&#xA;    optimizer.step()&#xA;&#xA;for _ in range(100):&#xA;    training_iteration(...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/pytorch/torchdynamo/main/TROUBLESHOOTING.md&#34;&gt;Troubleshooting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adding Backends&lt;/h2&gt; &#xA;&lt;p&gt;One could replace &lt;code&gt;my_compiler()&lt;/code&gt; with something that generates faster code, for example one using &lt;a href=&#34;https://pytorch.org/docs/stable/generated/torch.jit.optimize_for_inference.html&#34;&gt;optimize_for_inference&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;def my_compiler(gm: torch.fx.GraphModule, example_inputs: List[torch.Tensor]):&#xA;    scripted = torch.jit.trace(gm, example_inputs)&#xA;    return torch.jit.optimize_for_inference(scripted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TorchDynamo also includes many backends, which can be found in &lt;a href=&#34;https://github.com/pytorch/torchdynamo/raw/main/torchdynamo/optimizations/backends.py&#34;&gt;backends.py&lt;/a&gt; or &lt;code&gt;torchdynamo.list_backends()&lt;/code&gt;. Note many backends require installing additional packages. You can combine these backends together with code like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from torchdynamo.optimizations import BACKENDS&#xA;&#xA;def my_compiler(gm: torch.fx.GraphModule, example_inputs: List[torch.Tensor]):&#xA;    trt_compiled = BACKENDS[&#34;tensorrt&#34;](gm, example_inputs)&#xA;    if trt_compiled is not None:&#xA;        return trt_compiled&#xA;    # first backend failed, try something else...&#xA;&#xA;    cudagraphs_compiled = BACKENDS[&#34;cudagraphs&#34;](gm, example_inputs)&#xA;    if cudagraphs_compiled is not None:&#xA;        return cudagraphs_compiled&#xA;&#xA;    return gm.forward&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you just want to use an existing backend, you can pass a string containing the backend name to &lt;code&gt;torchdynamo.optimize()&lt;/code&gt;. &lt;code&gt;torchdynamo.optimize()&lt;/code&gt; can also be used as a decorator on functions, methods, or nn.Modules(). So a shorter version of using &lt;a href=&#34;https://pytorch.org/docs/stable/generated/torch.jit.optimize_for_inference.html&#34;&gt;optimize_for_inference&lt;/a&gt; on &lt;code&gt;toy_example&lt;/code&gt; would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;@torchdynamo.optimize(&#34;ofi&#34;)&#xA;def toy_example(a, b):&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Guards&lt;/h2&gt; &#xA;&lt;p&gt;TorchDynamo operates just-in-time and specializes graphs based on dynamic properties. For example, the first graph above has the following guards:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GUARDS:&#xA; - local &#39;a&#39; TENSOR_MATCH&#xA; - local &#39;b&#39; TENSOR_MATCH&#xA; - global &#39;torch&#39; FUNCTION_MATCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If any of those guards fail, the graph will be recaptured and recompiled. The interesting guard type there is &lt;code&gt;TENSOR_MATCH&lt;/code&gt;, which checks the following torch.Tensor properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python class of the tensor (tensor subclassing, etc)&lt;/li&gt; &#xA; &lt;li&gt;dtype&lt;/li&gt; &#xA; &lt;li&gt;device&lt;/li&gt; &#xA; &lt;li&gt;requires_grad&lt;/li&gt; &#xA; &lt;li&gt;dispatch_key (with thread-local includes/excludes applied)&lt;/li&gt; &#xA; &lt;li&gt;ndim&lt;/li&gt; &#xA; &lt;li&gt;sizes* (optional)&lt;/li&gt; &#xA; &lt;li&gt;strides* (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;*For sizes/strides you can disable this specialization by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;torchdynamo.config.dynamic_shapes = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full specialization mode allows the backend compiler to assume an entirely static graph. Unfortunately, most backends require this. Operators which return dynamic shapes will trigger a graph break when not in dynamic shape mode.&lt;/p&gt; &#xA;&lt;h2&gt;Run Mode / Quiescence Guarantee&lt;/h2&gt; &#xA;&lt;p&gt;In some cases, you may not want unexpected compiles after a program has warmed up. For example, if you are serving production traffic in a latency critical application. For this, TorchDynamo provides an alternate mode where prior compiled graphs are used, but no new ones are generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;frozen_toy_example = torchdynamo.run(toy_example)&#xA;frozen_toy_example(torch.randn(10), torch.randn(10))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Single Whole-Program Graph Mode&lt;/h2&gt; &#xA;&lt;p&gt;In some cases, you may want to ensure there are no graph breaks in your program to debug performance issues. You can turn graph breaks into errors by setting &lt;code&gt;nopython=True&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;@torchdynamo.optimize(my_compiler, nopython=True)&#xA;def toy_example(a, b):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which will trigger the following error in the example program above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;Traceback (most recent call last):&#xA;  ...&#xA;torchdynamo.exc.Unsupported: generic_jump TensorVariable()&#xA;Processing original code:&#xA;  File &#34;example.py&#34;, line 7, in toy_example&#xA;    if b.sum() &amp;lt; 0:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deeper Dive&lt;/h2&gt; &#xA;&lt;p&gt;If you want to understand better what TorchDynamo is doing, you can set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;torchdynamo.config.debug = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which triggers useful (but spammy) printouts.&lt;/p&gt; &#xA;&lt;p&gt;For example, the printouts for the first graph in the &lt;code&gt;toy_example&lt;/code&gt; above are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;__compiled_fn_0 &amp;lt;eval_with_key&amp;gt;.1&#xA;opcode         name     target                                                  args              kwargs&#xA;-------------  -------  ------------------------------------------------------  ----------------  --------&#xA;placeholder    a        a                                                       ()                {}&#xA;placeholder    b        b                                                       ()                {}&#xA;call_function  abs_1    &amp;lt;built-in method abs of type object at 0x7f9ca082f8a0&amp;gt;  (a,)              {}&#xA;call_function  add      &amp;lt;built-in function add&amp;gt;                                 (abs_1, 1)        {}&#xA;call_function  truediv  &amp;lt;built-in function truediv&amp;gt;                             (a, add)          {}&#xA;call_method    sum_1    sum                                                     (b,)              {}&#xA;call_function  lt       &amp;lt;built-in function lt&amp;gt;                                  (sum_1, 0)        {}&#xA;output         output   output                                                  ((truediv, lt),)  {}&#xA;&#xA;ORIGINAL BYTECODE toy_example example.py 9&#xA; 10           0 LOAD_FAST                0 (a)&#xA;              2 LOAD_GLOBAL              0 (torch)&#xA;              4 LOAD_METHOD              1 (abs)&#xA;              6 LOAD_FAST                0 (a)&#xA;              8 CALL_METHOD              1&#xA;             10 LOAD_CONST               1 (1)&#xA;             12 BINARY_ADD&#xA;             14 BINARY_TRUE_DIVIDE&#xA;             16 STORE_FAST               2 (x)&#xA;&#xA; 11          18 LOAD_FAST                1 (b)&#xA;             20 LOAD_METHOD              2 (sum)&#xA;             22 CALL_METHOD              0&#xA;             24 LOAD_CONST               2 (0)&#xA;             26 COMPARE_OP               0 (&amp;lt;)&#xA;             28 POP_JUMP_IF_FALSE       38&#xA;&#xA; 12          30 LOAD_FAST                1 (b)&#xA;             32 LOAD_CONST               3 (-1)&#xA;             34 BINARY_MULTIPLY&#xA;             36 STORE_FAST               1 (b)&#xA;&#xA; 13     &amp;gt;&amp;gt;   38 LOAD_FAST                2 (x)&#xA;             40 LOAD_FAST                1 (b)&#xA;             42 BINARY_MULTIPLY&#xA;             44 RETURN_VALUE&#xA;&#xA;MODIFIED BYTECODE&#xA;  9           0 LOAD_GLOBAL              3 (__compiled_fn_0)&#xA;              2 LOAD_FAST                0 (a)&#xA;              4 LOAD_FAST                1 (b)&#xA;              6 CALL_FUNCTION            2&#xA;              8 UNPACK_SEQUENCE          2&#xA;             10 STORE_FAST               2 (x)&#xA;             12 POP_JUMP_IF_FALSE       24&#xA;             14 LOAD_GLOBAL              4 (__resume_at_30_1)&#xA;             16 LOAD_FAST                1 (b)&#xA;             18 LOAD_FAST                2 (x)&#xA;             20 CALL_FUNCTION            2&#xA;             22 RETURN_VALUE&#xA;        &amp;gt;&amp;gt;   24 LOAD_GLOBAL              5 (__resume_at_38_2)&#xA;             26 LOAD_FAST                1 (b)&#xA;             28 LOAD_FAST                2 (x)&#xA;             30 CALL_FUNCTION            2&#xA;             32 RETURN_VALUE&#xA;&#xA;GUARDS:&#xA; - local &#39;a&#39; TENSOR_MATCH&#xA; - local &#39;b&#39; TENSOR_MATCH&#xA; - global &#39;torch&#39; FUNCTION_MATCH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the top you can see the FX graph (which we already shared above). Next you see the original bytecode of the function, followed by the modified bytecode generated by TorchDynamo. Finally, you see the guards which we covered above.&lt;/p&gt; &#xA;&lt;p&gt;In the modified bytecode &lt;code&gt;__compiled_fn_0&lt;/code&gt; is the return value of &lt;code&gt;my_compiler()&lt;/code&gt; (the compiled graph). &lt;code&gt;__resume_at_30_1&lt;/code&gt; and &lt;code&gt;__resume_at_38_2&lt;/code&gt; are both generated continuation functions that pick up execution after a graph break (at bytecode offsets 30 and 38). Each of these functions take the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;__resume_at_&amp;lt;offset&amp;gt;:&#xA;    ... restore stack state if needed ...&#xA;    JUMP_ABSOLUTE &amp;lt;offset&amp;gt; into toy_example&#xA;    ... original bytecode of toy_example ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By generating these resume_at function we force the remainder of the function to be executed in a new Python frame which recursively will trigger TorchDynamo to re-start its capture once execution reaches that point for the first time.&lt;/p&gt; &#xA;&lt;h2&gt;Minimal Developer Setup&lt;/h2&gt; &#xA;&lt;p&gt;As background reading, I&#39;d suggest looking at the &lt;a href=&#34;https://github.com/pytorch/pytorch/raw/master/CONTRIBUTING.md&#34;&gt;PyTorch&lt;/a&gt;, &lt;a href=&#34;https://github.com/pytorch/functorch&#34;&gt;functorch&lt;/a&gt;, and &lt;a href=&#34;https://github.com/pytorch/benchmark#installation&#34;&gt;TorchBench&lt;/a&gt; setup docs. Since these projects work together in different ways.&lt;/p&gt; &#xA;&lt;p&gt;The following instructions use &lt;a href=&#34;https://docs.conda.io/en/latest/miniconda.html&#34;&gt;Miniconda&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create --name=torchdynamo python=3.8&#xA;conda activate torchdynamo&#xA;&#xA;# install pytorch nightlies&#xA;# for CUDA version, replace `cpuonly` with `cudatoolkit=11.3`&#xA;conda install pytorch torchvision torchaudio torchtext cpuonly -c pytorch-nightly&#xA;&#xA;git clone git@github.com:pytorch/torchdynamo.git&#xA;cd torchdynamo&#xA;pip install -r requirements.txt&#xA;&#xA;# check if everything works&#xA;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If see errors about missing symbols from &lt;code&gt;guards.so&lt;/code&gt;, that may mean your C++ compiler is incompatible CUDA and/or with the one used to compile PyTorch. You may need to change your compiler version or build PyTorch from source.&lt;/p&gt; &#xA;&lt;p&gt;To add TorchBench, which is useful for benchmarking and more extensive testing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# you should still be in the conda env from before&#xA;&#xA;cd ..  # if still in torchdynamo/&#xA;&#xA;# download everything&#xA;git clone git@github.com:pytorch/benchmark.git torchbenchmark&#xA;cd torchbenchmark&#xA;python install.py&#xA;&#xA;cd ../torchdynamo&#xA;&#xA;# fix the version of black so `make format` / `make lint` work&#xA;make lint-deps&#xA;&#xA;# make sure it works&#xA;./torchbench.py --fast&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py37.yml&#34;&gt;&lt;img src=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py37.yml/badge.svg?sanitize=true&#34; alt=&#34;Test Python 3.7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py38.yml&#34;&gt;&lt;img src=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py38.yml/badge.svg?sanitize=true&#34; alt=&#34;Test Python 3.8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py39.yml&#34;&gt;&lt;img src=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py39.yml/badge.svg?sanitize=true&#34; alt=&#34;Test Python 3.9&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py39.yml&#34;&gt;&lt;img src=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/test-py310.yml/badge.svg?sanitize=true&#34; alt=&#34;Test Python 3.10&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run tests with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pytest test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To debug a specific test (with more debug prints) do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pytest -vsk &amp;lt;test name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test on torchbenchmark models with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python torchbench.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linting and Automatic Code Formatting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/pytorch/torchdynamo/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pycqa.github.io/isort/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;amp;labelColor=ef8336&#34; alt=&#34;Imports: isort&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install format/linter deps with &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make format  # reformat all files (in-place)&#xA;make lint    # run the linters&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;TorchDynamo has a BSD-style license, as found in the LICENSE file.&lt;/p&gt;</summary>
  </entry>
</feed>