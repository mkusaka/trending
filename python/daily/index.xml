<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-19T01:35:17Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>philz1337x/clarity-upscaler</title>
    <updated>2024-03-19T01:35:17Z</updated>
    <id>tag:github.com,2024-03-19:/philz1337x/clarity-upscaler</id>
    <link href="https://github.com/philz1337x/clarity-upscaler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clarity-Upscaler: Reimagined image upscaling for everyone&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; Clarity-Upscaler: Reimagined image upscaling for everyone &lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://ClarityAI.cc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Website-ClarityAI.cc-blueviolet&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/philz1337x&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/philz1337x?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://replicate.com/philz1337x/clarity-upscaler&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Demo-Replicate-purple&#34; alt=&#34;Replicate&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/stars/philz1337x/clarity-upscaler?style=social&amp;amp;label=Star&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/philz1337x/clarity-upscaler/main/example.gif&#34; alt=&#34;Example video&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Full Video: &lt;a href=&#34;https://x.com/philz1337x/status/1768679154726359128?s=20&#34;&gt;https://x.com/philz1337x/status/1768679154726359128?s=20&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;ðŸ‘‹ Hello&lt;/h1&gt; &#xA;&lt;p&gt;I build open source AI apps. To finance my work i also build paid versions of my code. But feel free to use the free code. I post features and new projects on &lt;a href=&#34;https://twitter.com/philz1337x&#34;&gt;https://twitter.com/philz1337x&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ðŸš€ Options to use Clarity-Upscaler&lt;/h1&gt; &#xA;&lt;h2&gt;User friendly Website&lt;/h2&gt; &#xA;&lt;p&gt;If you are not fimilar with cog, a1111 and dont&#39;t want to use Replicate (which is quite simple), you can use my paid version at &lt;a href=&#34;https://ClarityAI.cc&#34;&gt;ClarityAI.cc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploy and run with cog (locally or cloud)&lt;/h2&gt; &#xA;&lt;p&gt;If you are not familiar with cog read: &lt;a href=&#34;https://github.com/replicate/cog/raw/main/docs/getting-started-own-model.md&#34;&gt;cog docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Checkpoints and LoRa&#39;s from Cvitai and put in /models folder&lt;/li&gt; &#xA; &lt;li&gt;predict with cog:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-su&#34;&gt;cog predict -i image=&#34;link-to-image&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run with A1111 webUI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;https://github.com/AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use these params:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Prompt:&#34;&gt;masterpiece, best quality, highres, &amp;lt;lora:more_details:0.5&amp;gt; &amp;lt;lora:SDXLrender_v2.0:1&amp;gt; Negative prompt: (worst quality, low quality, normal quality:2) JuggernautNegative-neg Steps: 18, Sampler: DPM++ 3M SDE Karras, CFG scale: 6.0, Seed: 1337, Size: 1024x1024, Model hash: 338b85bc4f, Model: juggernaut_reborn, Denoising strength: 0.35, Tiled Diffusion upscaler: 4x-UltraSharp, Tiled Diffusion scale factor: 2, Tiled Diffusion: {&#34;Method&#34;: &#34;MultiDiffusion&#34;, &#34;Tile tile width&#34;: 112, &#34;Tile tile height&#34;: 144, &#34;Tile Overlap&#34;: 4, &#34;Tile batch size&#34;: 8, &#34;Upscaler&#34;: &#34;4x-UltraSharp&#34;, &#34;Upscale factor&#34;: 2, &#34;Keep input size&#34;: true}, ControlNet 0: &#34;Module: tile_resample, Model: control_v11f1e_sd15_tile, Weight: 0.6, Resize Mode: 1, Low Vram: False, Processor Res: 512, Threshold A: 1, Threshold B: 1, Guidance Start: 0.0, Guidance End: 1.0, Pixel Perfect: True, Control Mode: 1, Hr Option: HiResFixOption.BOTH, Save Detected Map: False&#34;, Lora hashes: &#34;more_details: 3b8aa1d351ef, SDXLrender_v2.0: 3925cf4759af&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Replicate API for app integration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go to &lt;a href=&#34;https://replicate.com/philz1337x/clarity-upscaler/api&#34;&gt;https://replicate.com/philz1337x/clarity-upscaler/api&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>openai/grok</title>
    <updated>2024-03-19T01:35:17Z</updated>
    <id>tag:github.com,2024-03-19:/openai/grok</id>
    <link href="https://github.com/openai/grok" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenAI Grok Curve Experiments&lt;/h1&gt; &#xA;&lt;h2&gt;Paper&lt;/h2&gt; &#xA;&lt;p&gt;This is the code for the paper &lt;a href=&#34;https://arxiv.org/abs/2201.02177&#34;&gt;Grokking: Generalization Beyond Overfitting on Small Algorithmic Datasets&lt;/a&gt; by Alethea Power, Yuri Burda, Harri Edwards, Igor Babuschkin, and Vedant Misra&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Training&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e .&#xA;./scripts/train.py&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>yoheinakajima/mindgraph</title>
    <updated>2024-03-19T01:35:17Z</updated>
    <id>tag:github.com,2024-03-19:/yoheinakajima/mindgraph</id>
    <link href="https://github.com/yoheinakajima/mindgraph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;proof of concept prototype for generating and querying against an ever-expanding knowledge graph with ai&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MindGraph&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to MindGraph, a proof of concept, open-source, API-first graph-based project designed for natural language interactions (input and output). This prototype serves as a template for building and customizing your own CRM solutions with a focus on ease of integration and extendibility. Here is the &lt;a href=&#34;https://twitter.com/yoheinakajima/status/1769019899245158648&#34;&gt;announcement on X&lt;/a&gt;, for some more context.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/GIzWMHPa4AAakOc?format=jpg&amp;amp;name=large&#34; alt=&#34;flowchart&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before you begin, ensure you have the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.6 or higher&lt;/li&gt; &#xA; &lt;li&gt;Poetry (dependency management and packaging tool)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/yourusername/MindGraph.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the project directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd MindGraph&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the project dependencies using Poetry:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command will create a virtual environment for the project and install all the required packages specified in the &lt;code&gt;pyproject.toml&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Note: If you get any dependencies error you can run: &lt;code&gt;poetry add &amp;lt;name_of_dependency&amp;gt;&lt;/code&gt; to add dependency to the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the project root directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;.env&lt;/code&gt; file and add the following line, replacing &lt;code&gt;YOUR_API_KEY&lt;/code&gt;&amp;nbsp;with your actual OpenAI API key:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;OPENAI_API_KEY=YOUR_API_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the Application&lt;/h2&gt; &#xA;&lt;p&gt;After installing the dependencies, you can start the Flask server with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;poetry run python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will launch on &lt;code&gt;http://0.0.0.0:81&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;p&gt;MindGraph is organized into several key components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main.py&lt;/code&gt;: The entry point to the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;app/__init__.py&lt;/code&gt;: Sets up the Flask app and integrates the blueprints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;models.py&lt;/code&gt;: Manages the in-memory graph data structure for entities and relationships.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;views.py&lt;/code&gt;: Hosts the API route definitions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;integration_manager.py&lt;/code&gt;: Handles the dynamic registration and management of integration functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;signals.py&lt;/code&gt;: Sets up signals for creating, updating, and deleting entities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integration System&lt;/h2&gt; &#xA;&lt;p&gt;MindGraph employs a sophisticated integration system designed to extend the application&#39;s base functionality dynamically. At the core of this system is &lt;code&gt;integration_manager.py&lt;/code&gt;, which acts as a registry and executor for various integration functions. This modular architecture allows MindGraph to incorporate AI-powered features seamlessly, such as processing natural language inputs into structured knowledge graphs through integrations like &lt;code&gt;natural_input.py&lt;/code&gt;. Further integrations, including &lt;code&gt;add_multiple_conditional&lt;/code&gt;, &lt;code&gt;conditional_entity_addition&lt;/code&gt;, and &lt;code&gt;conditional_relationship_addition&lt;/code&gt;, work in tandem to ensure the integrity and enhancement of the application&#39;s data model.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Entity Management&lt;/strong&gt;: Entities are stored in an in-memory graph for quick access and manipulation, allowing CRUD operations on people, organizations, and their interrelations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Integration Triggers&lt;/strong&gt;: Custom integration functions can be triggered via HTTP requests, enabling the CRM to interact with external systems or run additional processing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search Capabilities&lt;/strong&gt;: Entities and their relationships can be easily searched with custom query parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AI Readiness&lt;/strong&gt;: Designed with AI integrations in mind, facilitating the incorporation of intelligent data processing and decision-making.&lt;/p&gt; &#xA;&lt;h2&gt;API Endpoints&lt;/h2&gt; &#xA;&lt;p&gt;MindGraph provides a series of RESTful endpoints:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /&amp;lt;entity_type&amp;gt;&lt;/code&gt;: Create an entity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /&amp;lt;entity_type&amp;gt;/&amp;lt;int:entity_id&amp;gt;&lt;/code&gt;: Retrieve an entity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /&amp;lt;entity_type&amp;gt;&lt;/code&gt;: List all entities of a type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUT /&amp;lt;entity_type&amp;gt;/&amp;lt;int:entity_id&amp;gt;&lt;/code&gt;: Update an entity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DELETE /&amp;lt;entity_type&amp;gt;/&amp;lt;int:entity_id&amp;gt;&lt;/code&gt;: Remove an entity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /relationship&lt;/code&gt;: Establish a new relationship.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /search/entities/&amp;lt;entity_type&amp;gt;&lt;/code&gt;: Search for entities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET /search/relationships&lt;/code&gt;: Find relationships.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Integration Endpoint&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;POST /trigger-integration/&amp;lt;integration_name&amp;gt;&lt;/code&gt;: Activates a predefined integration function.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frontend Overview&lt;/h2&gt; &#xA;&lt;p&gt;MindGraph&#39;s frontend features a lightweight interactive, web-based interface that facilitates dynamic visualization and management of the graph-based data model. While MindGraph is meant to be used as an API, the front-end was helpful for demo purposes. It leverages HTML, CSS, JavaScript, Cytoscape.js for graph visualization, and jQuery for handling AJAX requests.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Graph Visualization&lt;/strong&gt;: Uses Cytoscape.js for interactive graph rendering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Data Interaction&lt;/strong&gt;: Supports real-time data fetching, addition, and graph updating without page reloads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Search and Highlight&lt;/strong&gt;: Allows users to search for nodes, highlighting and listing matches. Search form is being double used for natural language queries right now, which doesn&#39;t really make sense, but was a quick way to showcase functionality. (This is meant to be used as an API, front-end is for demo purpose)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data Submission Forms&lt;/strong&gt;: Includes forms for natural language, URL inputs, and CSV file uploads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Responsive Design&lt;/strong&gt;: Adapts to various devices and screen sizes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Workflow&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: On page load, initializes the graph with styles and layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Interaction&lt;/strong&gt;: Through the interface, users can: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Search for nodes, with results highlighted in the graph and listed in a sidebar.&lt;/li&gt; &#xA;   &lt;li&gt;Add data using a form that supports various input methods.&lt;/li&gt; &#xA;   &lt;li&gt;Refresh the graph to reflect the latest backend data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data Processing&lt;/strong&gt;: User inputs are sent to the backend, processed, and integrated, with the frontend graph visualization updated accordingly.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Schema-driven Knowledge Graph Creation&lt;/h2&gt; &#xA;&lt;p&gt;MindGraph utilizes a &lt;code&gt;schema.json&lt;/code&gt; file to define the structure and relationships of entities within its knowledge graph. This schema acts as a blueprint for interpreting and structuring natural language inputs into a coherent graph format. It details the types of nodes (e.g., Person, Organization, Concept) and the possible relationships between them, ensuring that the generated knowledge graph adheres to a consistent format. This approach allows for automated, AI-driven processing of natural language inputs to generate structured data that reflects the complex interrelations inherent in the input text.&lt;/p&gt; &#xA;&lt;h3&gt;Utilizing &lt;code&gt;schema.json&lt;/code&gt; in AI Integration&lt;/h3&gt; &#xA;&lt;p&gt;When the &lt;code&gt;create_knowledge_graph&lt;/code&gt; function processes an input, it consults &lt;code&gt;schema.json&lt;/code&gt; to understand how to map the identified entities and their relationships into the graph. This includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Identifying node types and attributes based on the schema definitions.&lt;/li&gt; &#xA; &lt;li&gt;Determining valid relationship types and their characteristics.&lt;/li&gt; &#xA; &lt;li&gt;Structuring the output to match the expected graph format, facilitating seamless integration with the application&#39;s data model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The schema ensures that the AI-generated knowledge graph is not only consistent with the application&#39;s data model but also rich in detail, capturing the nuanced relationships between entities as described in the input.&lt;/p&gt; &#xA;&lt;h3&gt;Benefits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Ensures that all knowledge graphs generated from natural language inputs adhere to the same structural rules, making data integration and interpretation more straightforward.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: Allows for easy updates and expansions of the knowledge graph structure by modifying &lt;code&gt;schema.json&lt;/code&gt;, without requiring changes to the codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI Integration&lt;/strong&gt;: Facilitates the use of advanced AI models for natural language processing by providing a clear structure for the expected output, enhancing the application&#39;s ability to derive meaningful insights from unstructured data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development &amp;amp; Extension&lt;/h2&gt; &#xA;&lt;h3&gt;Adding New Integrations&lt;/h3&gt; &#xA;&lt;p&gt;To incorporate a new integration into MindGraph, create a Python module within the &lt;code&gt;integrations&lt;/code&gt; directory. This module should define the integration&#39;s logic and include a &lt;code&gt;register&lt;/code&gt; function that connects the integration to the &lt;code&gt;IntegrationManager&lt;/code&gt;. Ensure that your integration interacts properly with the application&#39;s components, such as &lt;code&gt;models.py&lt;/code&gt; for data operations and &lt;code&gt;views.py&lt;/code&gt; for activation via API endpoints. This approach allows MindGraph to dynamically expand its capabilities through modular and reusable code.&lt;/p&gt; &#xA;&lt;h3&gt;Utilizing Signals&lt;/h3&gt; &#xA;&lt;p&gt;Signals are emitted for entity lifecycle events, providing hooks for extending functionality or syncing with other systems.&lt;/p&gt; &#xA;&lt;h2&gt;Database Integration and Usage&lt;/h2&gt; &#xA;&lt;p&gt;MindGraph supports flexible database integration to enhance its data storage and retrieval capabilities. Out of the box, MindGraph includes support for an in-memory database and a more robust, cloud-based option, NexusDB. This flexibility allows for easy adaptation to different deployment environments and use cases.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Databases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;InMemoryDatabase: A simple, in-memory graph data structure for quick prototyping and testing. Not recommended for production use due to its non-persistent nature.&lt;/li&gt; &#xA; &lt;li&gt;NexusDB: An all-in-one cloud database designed for storing graphs, tables, documents, files, vectors, and more. Offers a shared knowledge graph for comprehensive data management and analysis. Configuring the Database&lt;/li&gt; &#xA; &lt;li&gt;NebulaGraph: A distributed, scalable, and lightning-fast graph database that supports real-time queries and analytics. Ideal for large-scale graph data storage and processing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Database integration is controlled through the DATABASE_TYPE environment variable. To select a database, set this variable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;memory&lt;/code&gt; for the in-memory database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nexusdb&lt;/code&gt; for NexusDB integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export DATABASE_TYPE=nexusdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nebulagraph&lt;/code&gt; for NebulaGraph integration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: For a running &lt;a href=&#34;https://github.com/vesoft-inc/nebula&#34;&gt;NebulaGraph&lt;/a&gt;, consider using the &lt;a href=&#34;https://hub.docker.com/extensions/weygu/nebulagraph-dd-ext&#34;&gt;Docker Desktop Extension&lt;/a&gt;, &lt;a href=&#34;https://github.com/nebula-contrib/nebulagraph-lite&#34;&gt;NebulaGraph-Lite&lt;/a&gt; for Colab/Linux with pip install, or explore more options in the &lt;a href=&#34;https://docs.nebula-graph.io/&#34;&gt;Docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export DATABASE_TYPE=nebulagraph&#xA;export NEBULA_ADDRESS=127.0.0.1:9669&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding New Database Integrations&lt;/h3&gt; &#xA;&lt;p&gt;To integrate a new database system into MindGraph:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement the Database Integration: Create a new Python module under app/integrations/database following the abstract base class DatabaseIntegration defined in base.py. Your implementation should provide concrete methods for all abstract methods in the base class.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Register Your Integration: Modify the database type detection logic in app/integrations/database/&lt;strong&gt;init&lt;/strong&gt;.py to include your new database type. This involves adding an additional elif statement to check for your database&#39;s type and set the CurrentDBIntegration accordingly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure Environment Variables: If your integration requires custom environment variables (e.g., for connection strings, authentication), ensure they are documented and set properly in the environment where MindGraph is deployed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Schema Management&lt;/h3&gt; &#xA;&lt;p&gt;For databases requiring schema definitions (like NexusDB), include a schema management strategy within your integration module. This may involve checking and updating the database schema on startup to ensure compatibility with the current version of MindGraph.&lt;/p&gt; &#xA;&lt;h2&gt;Example Command&lt;/h2&gt; &#xA;&lt;p&gt;To create a person via &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST http://0.0.0.0:81/people \&#xA;-H &#34;Content-Type: application/json&#34; \&#xA;-d &#39;{&#34;name&#34;:&#34;Jane Doe&#34;,&#34;age&#34;:28}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example Use Cases&lt;/h3&gt; &#xA;&lt;p&gt;To demonstrate the power of MindGraph&#39;s integration system, here are some example commands:&lt;/p&gt; &#xA;&lt;h4&gt;Triggering Natural Input Integration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X POST http://0.0.0.0:81/trigger-integration/natural_input \&#xA;-H &#34;Content-Type: application/json&#34; \&#xA;-d &#39;{&#34;input&#34;:&#34;Company XYZ organized an event attended by John Doe and Jane Smith.&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s be honest... I don&#39;t maintain projects. If you want to take over/manage this, let me know (X/Twitter is a good channel). Otherwise, enjoy this proof of concept starter kit as it is :)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MindGraph is distributed under the MIT License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Just tag me on Twitter/X &lt;a href=&#34;https://twitter.com/yoheinakajima&#34;&gt;https://twitter.com/yoheinakajima&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/yoheinakajima/MindGraph&#34;&gt;https://github.com/yoheinakajima/MindGraph&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>