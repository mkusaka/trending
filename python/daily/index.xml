<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-30T01:39:16Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>VRSEN/agency-swarm</title>
    <updated>2023-12-30T01:39:16Z</updated>
    <id>tag:github.com,2023-12-30:/VRSEN/agency-swarm</id>
    <link href="https://github.com/VRSEN/agency-swarm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agency Swarm&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/M5Pa0pLgyYU?si=f-cQV8FoiGd98uuk&#34;&gt;&lt;img src=&#34;https://firebasestorage.googleapis.com/v0/b/vrsen-ai/o/public%2Fyoutube%2FFramework.png?alt=media&amp;amp;token=ae76687f-0347-4e0c-8342-4c5d31e3f050&#34; alt=&#34;Framework&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Agency Swarm is an open-source agent orchestration framework designed to automate and streamline AI development processes. Leveraging the power of the OpenAI Assistants API, it enables the creation of a collaborative swarm of agents (Agencies), each with distinct roles and capabilities. This framework aims to replace traditional AI development methodologies with a more dynamic, flexible, and efficient agent-based system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1qGVyK-vIoxZD0dMrMVqCxCsgL1euMLKj&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://youtube.com/@vrsen/&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UCSv4qL8vmoSH7GaPjuqRiCQ&#34; alt=&#34;Subscribe on YouTube&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/__vrsen__&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/__vrsen__.svg?style=social&amp;amp;label=Follow%20%40__vrsen__&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable Agent Roles&lt;/strong&gt;: Define roles like CEO, virtual assistant, developer, etc., and customize their functionalities with &lt;a href=&#34;https://platform.openai.com/docs/assistants/overview&#34;&gt;Assistants API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Control Over Prompts&lt;/strong&gt;: Avoid conflicts and restrictions of pre-defined prompts, allowing full customization.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tool Creation&lt;/strong&gt;: Tools within Agency Swarm are created using &lt;a href=&#34;https://github.com/jxnl/instructor&#34;&gt;Instructor&lt;/a&gt;, which provides a convenient interface and automatic type validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Efficient Communication&lt;/strong&gt;: Agents communicate through a specially designed &#34;send message&#34; tool based on their own descriptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;State Management&lt;/strong&gt;: Agency Swarm efficiently manages the state of your assistants on OpenAI, maintaining it in a special &lt;code&gt;settings.json&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/VRSEN/agency-swarm.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Set Your OpenAI Key&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm import set_openai_key&#xA;set_openai_key(&#34;YOUR_API_KEY&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create Tools&lt;/strong&gt;: Define your custom tools with &lt;a href=&#34;https://github.com/jxnl/instructor&#34;&gt;Instructor&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm.tools import BaseTool&#xA;from pydantic import Field&#xA;&#xA;class MyCustomTool(BaseTool):&#xA;    &#34;&#34;&#34;&#xA;    A brief description of what the custom tool does. &#xA;    The docstring should clearly explain the tool&#39;s purpose and functionality.&#xA;    &#34;&#34;&#34;&#xA;&#xA;    # Define the fields with descriptions using Pydantic Field&#xA;    example_field: str = Field(&#xA;        ..., description=&#34;Description of the example field, explaining its purpose and usage.&#34;&#xA;    )&#xA;&#xA;    # Additional fields as required&#xA;    # ...&#xA;&#xA;    def run(self):&#xA;        &#34;&#34;&#34;&#xA;        The implementation of the run method, where the tool&#39;s main functionality is executed.&#xA;        This method should utilize the fields defined above to perform its task.&#xA;        Doc string description is not required for this method.&#xA;        &#34;&#34;&#34;&#xA;&#xA;        # Your custom tool logic goes here&#xA;        do_something(self.example_field)&#xA;&#xA;        # Return the result of the tool&#39;s operation&#xA;        return &#34;Result of MyCustomTool operation&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEW&lt;/strong&gt;: Import in 1 line of code from &lt;a href=&#34;https://python.langchain.com/docs/integrations/tools&#34;&gt;Langchain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langchain.tools import YouTubeSearchTool&#xA;from agency_swarm.tools import ToolFactory&#xA;&#xA;LangchainTool = ToolFactory.from_langchain_tool(YouTubeSearchTool)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from langchain.agents import load_tools&#xA;&#xA;tools = load_tools(&#xA;    [&#34;arxiv&#34;, &#34;human&#34;],&#xA;)&#xA;&#xA;tools = ToolFactory.from_langchain_tools(tools)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Define Agent Roles&lt;/strong&gt;: Start by defining the roles of your agents. For example, a CEO agent for managing tasks and a developer agent for executing tasks.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm import Agent&#xA;&#xA;ceo = Agent(name=&#34;CEO&#34;,&#xA;            description=&#34;Responsible for client communication, task planning and management.&#34;,&#xA;            instructions=&#34;You must converse with other agents to ensure complete task execution.&#34;, # can be a file like ./instructions.md&#xA;            files_folder=None,&#xA;            tools=[MyCustomTool, LangchainTool])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Define Agency Communication Flows&lt;/strong&gt;: Establish how your agents will communicate with each other.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from agency_swarm import Agency&#xA;&#xA;agency = Agency([&#xA;    ceo,  # CEO will be the entry point for communication with the user&#xA;    [ceo, dev],  # CEO can initiate communication with Developer&#xA;    [ceo, va],   # CEO can initiate communication with Virtual Assistant&#xA;    [dev, va]    # Developer can initiate communication with Virtual Assistant&#xA;], shared_instructions=&#39;agency_manifesto.md&#39;) # shared instructions for all agents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Agency Swarm, communication flows are directional, meaning they are established from left to right in the agency_chart definition. For instance, in the example above, the CEO can initiate a chat with the developer (dev), and the developer can respond in this chat. However, the developer cannot initiate a chat with the CEO. The developer can initiate a chat with the virtual assistant (va) and assign new tasks.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Run Demo&lt;/strong&gt;: Run the demo to see your agents in action!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agency.demo_gradio(height=900)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Terminal version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agency.run_demo()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Get Completion&lt;/strong&gt;: Get completion from the agency:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;completion_output = agency.get_completion(&#34;Please create a new website for our client.&#34;, yield_messages=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating Agent Templates Locally (CLI)&lt;/h2&gt; &#xA;&lt;p&gt;This CLI command simplifies the process of creating a structured environment for each agent.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Command Syntax:&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;agency-swarm create-agent-template --name &#34;AgentName&#34; --description &#34;Agent Description&#34; [--path &#34;/path/to/directory&#34;] [--use_txt]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Folder Structure&lt;/h3&gt; &#xA;&lt;p&gt;When you run the &lt;code&gt;create-agent-template&lt;/code&gt; command, it creates the following folder structure for your agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/your-specified-path/&#xA;│&#xA;├── agency_manifesto.md or .txt # Agency&#39;s guiding principles (created if not exists)&#xA;└── agent_name/                 # Directory for the specific agent&#xA;    ├── agent_name.py           # The main agent class file&#xA;    ├── __init__.py             # Initializes the agent folder as a Python package&#xA;    ├── instructions.md or .txt # Instruction document for the agent&#xA;    ├── tools.py                # Tools specific to the agent&#xA;    ├── files/                  # Directory for additional resources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This structure ensures that each agent has its dedicated space with all necessary files to start working on its specific tasks. The &lt;code&gt;tools.py&lt;/code&gt; can be customized to include tools and functionalities specific to the agent&#39;s role.&lt;/p&gt; &#xA;&lt;h2&gt;Future Enhancements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asynchronous communication and task handling.&lt;/li&gt; &#xA; &lt;li&gt;Creation of agencies that can autonomously create other agencies.&lt;/li&gt; &#xA; &lt;li&gt;Inter-agency communication for a self-expanding system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to Agency Swarm! Please feel free to submit issues, pull requests, and suggestions to our GitHub repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Agency Swarm is open-source and licensed under &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Need Help?&lt;/h2&gt; &#xA;&lt;p&gt;If you require assistance in creating custom agent swarms or have any specific queries related to Agency Swarm, feel free to reach out through my website: &lt;a href=&#34;https://vrsen.ai&#34;&gt;vrsen.ai&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TencentARC/MotionCtrl</title>
    <updated>2023-12-30T01:39:16Z</updated>
    <id>tag:github.com,2023-12-30:/TencentARC/MotionCtrl</id>
    <link href="https://github.com/TencentARC/MotionCtrl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MotionCtrl: A Unified and Flexible Motion Controller for Video Generation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wzhouxiff.github.io/projects/MotionCtrl/assets/paper/MotionCtrl.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paper-gray&#34; alt=&#34; Paper&#34;&gt;&lt;/a&gt;   &lt;a href=&#34;https://arxiv.org/pdf/2312.03641.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-red&#34; alt=&#34; arXiv&#34;&gt;&lt;/a&gt;   &lt;a href=&#34;https://wzhouxiff.github.io/projects/MotionCtrl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project%20Page-green&#34; alt=&#34;Porject Page&#34;&gt; &lt;/a&gt;   &lt;a href=&#34;https://huggingface.co/spaces/TencentARC/MotionCtrl&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gradio%20Demo-orange&#34; alt=&#34; Demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;🔥🔥 This is an official implementation of &lt;a href=&#34;https://arxiv.org/pdf/2312.03641.pdf&#34;&gt;MotionCtrl: A Unified and Flexible Motion Controller for Video Generation&lt;/a&gt;, which is capable of independently controlling the &lt;strong&gt;complex camera motion&lt;/strong&gt; and &lt;strong&gt;object motion&lt;/strong&gt; of the generated videos, with &lt;strong&gt;only a unified&lt;/strong&gt; model. There are some results attained with &lt;b&gt;MotionCtrl&lt;/b&gt; and more results are showcased in our &lt;a href=&#34;https://wzhouxiff.github.io/projects/MotionCtrl/&#34;&gt;Project Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/TencentARC/MotionCtrl/main/assets/hpxvu-3d8ym.gif&#34; , width=&#34;600&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/TencentARC/MotionCtrl/main/assets/w3nb7-9vz5t.gif&#34; , width=&#34;600&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/TencentARC/MotionCtrl/main/assets/62n2a-wuvsw.gif&#34; , width=&#34;600&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/TencentARC/MotionCtrl/main/assets/ilw96-ak827.gif&#34; , width=&#34;600&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📝 Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 20231225: Release MotionCtrl deployed on &lt;em&gt;&lt;strong&gt;LVDM/VideoCrafter&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 20231225: Gradio Demo Available. &lt;a href=&#34;https://huggingface.co/spaces/TencentARC/MotionCtrl&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gradio%20Demo-orange&#34; alt=&#34; Demo&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 20231228: Provide local gradio demo for convenience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release MotionCtrl deployed on &lt;em&gt;&lt;strong&gt;AnimateDiff&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Release MotionCtrl deployed on &lt;em&gt;&lt;strong&gt;SVD&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;⚙️ Environment&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n motionctrl python=3.10.6&#xA;conda activate motionctrl&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💫 Inference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Run local inference script&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the weights of MotionCtrl &lt;a href=&#34;https://huggingface.co/TencentARC/MotionCtrl/blob/main/motionctrl.pth&#34;&gt;motionctrl.pth&lt;/a&gt; and put it to &lt;code&gt;./checkpoints&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Go into &lt;code&gt;configs/inference/run.sh&lt;/code&gt; and set &lt;code&gt;condtype&lt;/code&gt; as &#39;camera_motion&#39;, &#39;object_motion&#39;, or &#39;both&#39;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;condtype=camera_motion&lt;/code&gt; means only control the &lt;strong&gt;camera motion&lt;/strong&gt; in the generated video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;condtype=object_motion&lt;/code&gt; means only control the &lt;strong&gt;object motion&lt;/strong&gt; in the generated video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;condtype=both&lt;/code&gt; means control the camera motion and object motion in the generated video &lt;strong&gt;simultaneously&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Running scripts: sh configs/inference/run.sh&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Run local gradio demo&lt;/h4&gt; &lt;pre&gt;&lt;code&gt;python -m app --share&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📚&lt;/span&gt; Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you make use of our work, please cite our paper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{wang2023motionctrl,&#xA;  title={MotionCtrl: A Unified and Flexible Motion Controller for Video Generation},&#xA;  author={Wang, Zhouxia and Yuan, Ziyang and Wang, Xintao and Chen, Tianshui and Xia, Menghan and Luo, Ping and Shan, Yin},&#xA;  booktitle={arXiv preprint arXiv:2312.03641},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤗 Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;The current version of &lt;strong&gt;MotionCtrl&lt;/strong&gt; is built on &lt;a href=&#34;https://github.com/AILab-CVC/VideoCrafter&#34;&gt;VideoCrafter&lt;/a&gt;. We appreciate the authors for sharing their awesome codebase.&lt;/p&gt; &#xA;&lt;h2&gt;❓ Contact&lt;/h2&gt; &#xA;&lt;p&gt;For any question, feel free to email &lt;code&gt;wzhoux@connect.hku.hk&lt;/code&gt; or &lt;code&gt;zhouzi1212@gmail.com&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>myhhub/stock</title>
    <updated>2023-12-30T01:39:16Z</updated>
    <id>tag:github.com,2023-12-30:/myhhub/stock</id>
    <link href="https://github.com/myhhub/stock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;stock股票.获取股票数据,计算股票指标,识别股票形态,内置选股策略,股票验证回测,股票自动交易,支持PC及移动设备。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;项目计划：1.爬取任何想要的数据；2.开发选股模块，支持各种条件组合选股；3.升级查询功能，支持任意检索。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/a3.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/a2.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/a1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;InStock股票系统&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;InStock股票系统，抓取每日股票、ETF关键数据，计算股票各种指标，识别K线各种形态，内置多种选股策略，支持选股验证回测，支持自动交易，支持批量时间，运行高效，支持PC、平板、手机移动设备显示，同时提供Docker镜像方便安装，是量化投资的好帮手。&lt;/p&gt; &#xA;&lt;p&gt;本项目地址：&lt;a href=&#34;https://github.com/myhhub/stock&#34;&gt;https://github.com/myhhub/stock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker镜像：&lt;a href=&#34;https://hub.docker.com/r/mayanghua/instock&#34;&gt;https://hub.docker.com/r/mayanghua/instock&lt;/a&gt; &lt;strong&gt;镜像优化构建仅170M&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;功能介绍&lt;/h1&gt; &#xA;&lt;h2&gt;一：股票每日数据&lt;/h2&gt; &#xA;&lt;p&gt;包括每日股票数据、股票资金流向、股票分红配送、股票龙虎榜、股票大宗交易、股票基本面数据、行业资金流向、概念资金流向、每日ETF数据。&lt;/p&gt; &#xA;&lt;p&gt;抓取A股票每日数据，主要为一些关键数据，同时封装抓取方法，方便扩展系统获取个人关注的数据。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/00.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/12.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;二：股票指标计算&lt;/h2&gt; &#xA;&lt;p&gt;基于talib、pandas 计算指标，计算高效准确。调整个别指标公式，确保结果和同花顺、通信达结果一致。 指标：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、MACD 2、KDJ 3、BOLL 4、TRIX，TRMA 5、CR 6、SMA 7、RSI &#xA;8、VR，MAVR 9、ROC 10、DMI，+DI，-DI，DX，ADX，ADXR 11、W&amp;amp;R &#xA;12、CCI 13、TR、ATR 14、DMA、AMA 15、OBV 16、SAR 17、PSY &#xA;18、BRAR 19、EMV 20、BIAS 21、TEMA  22、MFI 23、VWMA&#xA;24、PPO 25、WT 26、Supertrend  27、DPO  28、VHF  29、RVI&#xA;30、FI 31、ENE 32、STOCHRSI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/01.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/06.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/13.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/10.jpg&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;三：判断买入卖出的股票&lt;/h2&gt; &#xA;&lt;p&gt;根据指标判定可能买入卖出的股票，具体筛选条件如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;KDJ:&#xA;1、超买区：K值在80以上，D值在70以上，J值大于90时为超买。一般情况下，股价有可能下跌。投资者应谨慎行事，局外人不应再追涨，局内人应适时卖出。&#xA;2、超卖区：K值在20以下，D值在30以下为超卖区。一般情况下，股价有可能上涨，反弹的可能性增大。局内人不应轻易抛出股票，局外人可寻机入场。&#xA;RSI:&#xA;1、当六日指标上升到达80时，表示股市已有超买现象，如果一旦继续上升，超过90以上时，则表示已到严重超买的警戒区，股价已形成头部，极可能在短期内反转回转。&#xA;2、当六日强弱指标下降至20时，表示股市有超卖现象，如果一旦继续下降至10以下时则表示已到严重超卖区域，股价极可能有止跌回升的机会。&#xA;CCI:&#xA;1、当CCI＞﹢100时，表明股价已经进入非常态区间——超买区间，股价的异动现象应多加关注。&#xA;2、当CCI＜﹣100时，表明股价已经进入另一个非常态区间——超卖区间，投资者可以逢低吸纳股票。&#xA;CR:&#xA;1、跌穿a、b、c、d四条线，再由低点向上爬升160时，为短线获利的一个良机，应适当卖出股票。&#xA;2、CR跌至40以下时，是建仓良机。&#xA;WR:&#xA;1、当％R线达到20时，市场处于超买状况，走势可能即将见顶。&#xA;2、当％R线达到80时，市场处于超卖状况，股价走势随时可能见底。&#xA;VR:&#xA;1、获利区域160－450根据情况获利了结。&#xA;2、低价区域40－70可以买进。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/05.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;四：K线形态识别&lt;/h2&gt; &#xA;&lt;p&gt;精准识别61种K线形态，支持用户自选形态识别。&lt;/p&gt; &#xA;&lt;p&gt;识别形态:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、两只乌鸦2、三只乌鸦3、三内部上涨和下跌4、三线打击5、三外部上涨和下跌6、南方三星7、三个白兵8、弃婴&#xA;9、大敌当前10、捉腰带线11、脱离12、收盘缺影线13、藏婴吞没14、反击线15、乌云压顶16、十字17、十字星&#xA;18、蜻蜓十字/T形十字19、吞噬模式20、十字暮星  21、暮星22、向上/下跳空并列阳线23、墓碑十字/倒T十字&#xA;24、锤头25、上吊线26、母子线27、十字孕线28、风高浪大线29、陷阱30、修正陷阱31、家鸽32、三胞胎乌鸦&#xA;33、颈内线34、倒锤头35、反冲形态36、由较长缺影线决定的反冲形态37、梯底38、长脚十字39、长蜡烛&#xA;40、光头光脚/缺影线 41、相同低价42、铺垫43、十字晨星44、晨星45、颈上线46、刺透形态47、黄包车夫&#xA;48、上升/下降三法49、分离线50、射击之星51、短蜡烛52、纺锤53、停顿形态54、条形三明治55、探水竿&#xA;56、跳空并列阴阳线57、插入58、三星59、奇特三河床60、向上跳空的两只乌鸦61、上升/下降跳空三法 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;形态识别结果：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;负：出现卖出信号&#xA;0：没有出现该形态&#xA;正：出现买入信号&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/09.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/06.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;五：策略选股&lt;/h2&gt; &#xA;&lt;p&gt;内置放量上涨、停机坪、回踩年线、突破平台、放量跌停等多种选股策略，同时封装了策略模板，方便扩展实现自己的策略。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1、放量上涨&#xA;    1）当日比前一天上涨小于2%或收盘价小于开盘价。&#xA;    2）当日成交额不低于2亿。&#xA;    3）当日成交量/5日平均成交量&amp;gt;=2。&#xA;2、均线多头&#xA;    MA30向上&#xA;    1）30日前的30日均线&amp;lt;20日前的30日均线&amp;lt;10日前的30日均线&amp;lt;当日的30日均线。&#xA;    2）(当日的30日均线/30日前的30日均线)&amp;gt;1.2。&#xA;3、停机坪&#xA;    1）最近15日有涨幅大于9.5%，且必须是放量上涨。&#xA;    2）紧接的下个交易日必须高开，收盘价必须上涨，且与开盘价不能大于等于相差3%。&#xA;    3）接下2、3个交易日必须高开，收盘价必须上涨，且与开盘价不能大于等于相差3%，且每天涨跌幅在5%间。&#xA;4、回踩年线&#xA;    1）分2个时间段：前段=最近60交易日最高收盘价之前交易日(长度&amp;gt;0)，后段=最高价当日及后面的交易日。&#xA;    2）前段由年线(250日)以下向上突破。&#xA;    3）后段必须在年线以上运行，且后段最低价日与最高价日相差必须在10-50日间。&#xA;    4）回踩伴随缩量：最高价日交易量/后段最低价日交易量&amp;gt;2,后段最低价/最高价&amp;lt;0.8。&#xA;5、突破平台&#xA;    1）60日内某日收盘价&amp;gt;=60日均线&amp;gt;开盘价。&#xA;    2）且【1】放量上涨。&#xA;    3）且【1】间之前时间，任意一天收盘价与60日均线偏离在-5%~20%之间。&#xA;6、无大幅回撤&#xA;    1）当日收盘价比60日前的收盘价的涨幅小于0.6。&#xA;    2）最近60日，不能有单日跌幅超7%、高开低走7%、两日累计跌幅10%、两日高开低走累计10%。&#xA;7、海龟交易法则&#xA;    最后一个交易日收市价为指定区间内最高价。&#xA;    1）当日收盘价&amp;gt;=最近60日最高收盘价。&#xA;8、高而窄的旗形&#xA;    1）必须至少上市交易60日。&#xA;    2）当日收盘价/之前24~10日的最低价&amp;gt;=1.9。&#xA;    3）之前24~10日必须连续两天涨幅大于等于9.5%。&#xA;9、放量跌停。&#xA;    1）跌&amp;gt;9.5%。&#xA;    2）成交额不低于2亿。&#xA;    3）成交量至少是5日平均成交量的4倍。&#xA;10、低ATR成长&#xA;    1）必须至少上市交易250日。&#xA;    2）最近10个交易日的最高收盘价必须比最近10个交易日的最低收盘价高1.1倍。&#xA;11、股票基本面选股&#xA;    1）市盈率小于等于20，且大于0。&#xA;    2）市净率小于等于10。&#xA;    3）净资产收益率大于等于15。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/04.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;六：选股验证&lt;/h2&gt; &#xA;&lt;p&gt;对指标、策略等选出的股票进行回测，验证策略的成功率，是否可用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/05.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;七：自动交易&lt;/h2&gt; &#xA;&lt;p&gt;支持自动交易，内置自动打新股的策略及示例策略，由于&lt;strong&gt;涉及金钱&lt;/strong&gt;，规避可能存在风险，没有提供其他交易策略。&lt;/p&gt; &#xA;&lt;p&gt;具有交易日志，以及支持为每个交易策略配置交易日志。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;特别提醒&lt;/strong&gt;：交易日10:00点会触发打新，不想打新的删除stagging.py或不要启动“交易服务”。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/11.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;八：关注功能&lt;/h2&gt; &#xA;&lt;p&gt;支持股票关注，关注股票在各个模块(含有的)置顶、标红显示。&lt;/p&gt; &#xA;&lt;h2&gt;九：支持批量&lt;/h2&gt; &#xA;&lt;p&gt;可以通过时间段、枚举时间、当前时间进行指标计算、策略选股及回测等。同时支持智能识别交易日，可以输入任意日期。&lt;/p&gt; &#xA;&lt;p&gt;具体执行设置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;------整体作业，支持批量作业------&#xA;当前时间作业 python execute_daily_job.py&#xA;单个时间作业 python execute_daily_job.py 2022-03-01&#xA;枚举时间作业 python execute_daily_job.py 2022-01-01,2021-02-08,2022-03-12&#xA;区间时间作业 python execute_daily_job.py 2022-01-01 2022-03-01&#xA;&#xA;------单功能作业，支持批量作业，回测数据自动填补到当前&#xA;基础数据实时作业 python basic_data_daily_job.py&#xA;基础数据非实时作业 python basic_data_other_daily_job.py&#xA;指标数据作业 python indicators_data_daily_job.py&#xA;K线形态作业 klinepattern_data_daily_job.py&#xA;策略数据作业 python strategy_data_daily_job.py&#xA;回测数据 python backtest_data_daily_job.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;十：存储采用数据库设计&lt;/h2&gt; &#xA;&lt;p&gt;数据存储采用数据库设计，能保存历史数据，以及对数据进行扩展分析、统计、挖掘。系统实现自动创建数据库、数据表，封装了批量更新、插入数据，方便业务扩展。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/07.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;十一：展示采用web设计&lt;/h2&gt; &#xA;&lt;p&gt;采用web设计，可视化展示结果。对展示进行封装，添加新的业务表单，只需要配置视图字典就可自动出现业务可视化界面，方便业务功能扩展。&lt;/p&gt; &#xA;&lt;h2&gt;十二：运行高效&lt;/h2&gt; &#xA;&lt;p&gt;采用多线程、单例共享资源有效提高运算效率。1天数据的抓取、计算指标、形态识别、策略选股、回测等全部任务运行时间大概4分钟（普通笔记本），计算天数越多效率越高。&lt;/p&gt; &#xA;&lt;h2&gt;十三：方便调试&lt;/h2&gt; &#xA;&lt;p&gt;系统运行的重要日志记录在stock_execute_job.log(数据抓取、处理、分析)、stock_web.log(web服务)、stock_trade.log(交易服务)，方便调试发现问题。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/myhhub/stock/master/img/08.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;安装说明&lt;/h1&gt; &#xA;&lt;p&gt;本系统支持Windows、Linux、MacOS，同时本系统创建了Docker镜像，按自己需要选择安装方式。&lt;/p&gt; &#xA;&lt;p&gt;下面按分常规安装方式、docker镜像安装方式进行一一说明。&lt;/p&gt; &#xA;&lt;h2&gt;一：常规安装方式&lt;/h2&gt; &#xA;&lt;p&gt;建议windows下安装，方便操作及使用系统，同时安装也非常简单。&lt;/p&gt; &#xA;&lt;p&gt;以下安装及运行以windows为例进行介绍。&lt;/p&gt; &#xA;&lt;h3&gt;1.安装python&lt;/h3&gt; &#xA;&lt;p&gt;项目开发使用python 3.11，建议最新版。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;（1）在官网 https://www.python.org/downloads/ 下载安装包，一键安装即可，安装切记勾选自动设置环境变量。&#xA;（2）配置永久全局国内镜像库（因为有墙，无法正常安装库文件），执行如下dos命令：&#xA;python pip config --global set  global.index-url https://mirrors.aliyun.com/pypi/simple/&#xA;# 如果你只想为当前用户设置，你也可以去掉下面的&#34;--global&#34;选项&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.安装mysql&lt;/h3&gt; &#xA;&lt;p&gt;建议最新版。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;在官网 https://dev.mysql.com/downloads/mysql/ 下载安装包，一键安装即可。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.安装依赖库&lt;/h3&gt; &#xA;&lt;p&gt;依赖库都是目前最新版本。&lt;/p&gt; &#xA;&lt;p&gt;a.安装依赖库：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#dos切换到本系统的根目录，执行下面命令：&#xA;python pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b.若想升级项目依赖库至最新版，可以通过下面方法：&lt;/p&gt; &#xA;&lt;p&gt;先打开requirements.txt，然后修改文件中的“==”为“&amp;gt;=”，接着执行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python pip install -r requirements.txt --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;c.若扩展了本项目，可以通过下面方法生成项目依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#使用pipreqs生成项目相关依赖的requirements.txt&#xA;&#xA;python pip install pipreqs&#xA;# 安装pipreqs，若有安装可跳过&#xA;&#xA;python  pipreqs --encoding utf-8 --force ./ &#xA;# 本项目是utf-8编码&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.安装 talib&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;第一种方法. pip 下安装&#xA;（1）https://www.ta-lib.org/下载并解压ta-lib-0.4.0-msvc.zip&#xA;（2）解压并将ta_lib放在C盘根目录&#xA;（3）https://visualstudio.microsoft.com/zh-hans/downloads/下载并安装Visual Studio Community，安装切记勾选Visual C++功能&#xA;（4）Build TA-Lib Library # 构建 TA-Lib 库&#xA;    ①在开始菜单中搜索并打开[Native Tools Command Prompt](根据操作系统选择32位或64位)&#xA;    ②输入 cd C:\ta-lib\c\make\cdr\win32\msvc&#xA;    ③构建库，输入 nmake&#xA;（5）安装完成。&#xA;第二种方法. Anaconda 下安装&#xA;（1）打开Anaconda Prompt终端。&#xA;（2）在终端输入命令行conda install -c conda-forge ta-lib 。&#xA;（3）此处确认是否继续安装？输入y 继续安装，直到完成&#xA;（4）安装完成。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.安装 Navicat（可选）&lt;/h3&gt; &#xA;&lt;p&gt;Navicat可以方便管理数据库，以及可以手工对数据进行查看、处理、分析、挖掘。&lt;/p&gt; &#xA;&lt;p&gt;Navicat是一套可创建多个连接的数据库管理工具，用以方便管理 MySQL、Oracle、PostgreSQL、SQLite、SQL Server、MariaDB 和 MongoDB 等不同类型的数据库&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;（1）在官网 https://www.navicat.com.cn/download/navicat-premium 下载安装包，一键安装即可。&#xA;&#xA;（2）然后下载破解补丁: https://pan.baidu.com/s/18XpTHrm9OiLEl3u6z_uxnw 提取码: 8888 ，破解即可。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6.配置数据库&lt;/h3&gt; &#xA;&lt;p&gt;一般可能会修改的信息是”数据库访问密码“。&lt;/p&gt; &#xA;&lt;p&gt;修改database.py相关信息:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;db_host = &#34;localhost&#34;  # 数据库服务主机&#xA;db_user = &#34;root&#34;  # 数据库访问用户&#xA;db_password = &#34;root&#34;  # 数据库访问密码&#xA;db_port = 3306  # 数据库服务端口&#xA;db_charset = &#34;utf8mb4&#34;  # 数据库字符集&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;7.安装自动交易（可选）&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.安装交易软件&#xA;    1.1 通用同花顺客户端券商的客户&#xA;        通用同花顺客户端:&#xA;        https://activity.ths123.com/acmake/cache/1361.html&#xA;    1.2 专用同花顺客户端券商的客户&#xA;        自行去券商官网找同花顺专用版&#xA;        例如：广发的下载核新独立委托端(同花顺版):&#xA;        http://www.gf.com.cn/softdownload/index?tab=1&#xA;2.安装tesseract(自动识别验证码)&#xA;    第一种方法.下载编译好的&#xA;        在下面链接页，根据操作系统选择相应版本&#xA;        https://digi.bib.uni-mannheim.de/tesseract/&#xA;    第二种方法.用源码编译&#xA;        下载源码：https://github.com/tesseract-ocr/tesseract&#xA;    注意：&#xA;        安装完要将安装路径设置到PATH环境变量里。&#xA;        下面提供dos命令设置，以管理员身份运行cmd，输入:&#xA;        setx /m PATH &#34;%PATH%;C:\Program Files\Tesseract-OCR&#34;&#xA;3.设置交易配置   &#xA;    3.1.修改trade_client.json&#xA;        &#34;user&#34;: &#34;888888888888&#34;,               #交易账号&#xA;        &#34;password&#34;: &#34;888888&#34;,                 #交易密码&#xA;        &#34;exe_path&#34;: &#34;C:/gfzqrzrq/xiadan.exe&#34;  #交易软件路径&#xA;    3.2.修改trade_service.py&#xA;        broker = &#39;gf_client&#39; #这是广发&#xA;        详情参阅usage.md，配置对应券商&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;8.运行说明&lt;/h3&gt; &#xA;&lt;h4&gt;8.1.执行数据抓取、处理、分析、识别&lt;/h4&gt; &#xA;&lt;p&gt;支持批量作业，具体参见run_job.bat中的注释说明。&lt;/p&gt; &#xA;&lt;p&gt;建议将其加入到任务计划中，工作日的每天17：00执行。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;数据抓取、处理原则：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;1).开盘即有且无历史数据的：每日股票数据、股票资金流向、股票分红配送、龙虎榜、每日ETF数据；&lt;/p&gt; &#xA;&lt;p&gt;2).收盘即有且有历史数据的：股票指标数据、股票K线形态、股票策略数据；&lt;/p&gt; &#xA;&lt;p&gt;3).收盘后1~2小时才有且有历史数据的：大宗交易。&lt;/p&gt; &#xA;&lt;p&gt;运行run_job.bat，会依据上面原则获取各模块当前或前个交易日的数据。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;运行 run_job.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若想看开盘后的当前实时数据，可以运行下面，很快大概1秒：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#基础数据作业 &#xA;python basic_data_daily_job.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;8.2.启动web服务&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;运行 run_web.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启动服务后，打开浏览器，输入：&lt;a href=&#34;http://localhost:9988/&#34;&gt;http://localhost:9988/&lt;/a&gt; ，即可使用本系统的可视化功能。&lt;/p&gt; &#xA;&lt;h4&gt;8.3.启动交易服务&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;运行 run_trade.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;二：docker镜像安装方式&lt;/h2&gt; &#xA;&lt;p&gt;没有docker环境，可以参考：&lt;a href=&#34;https://www.ljjyy.com/archives/2019/10/100590.html&#34;&gt;VirtualBox虚拟机安装Ubuntu&lt;/a&gt;，里面也介绍了python、docker等常用软件的安装，若想在Windows下安装docker自行百度。&lt;/p&gt; &#xA;&lt;h3&gt;1.安装数据库镜像&lt;/h3&gt; &#xA;&lt;p&gt;如果已经有Mysql、mariadb数据库可以跳过本步。&lt;/p&gt; &#xA;&lt;p&gt;运行下面命令：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;特别提醒：执行命令的用户要有root权限，其他命令也如此。例如：ubuntu系统在命令前加上sudo&lt;/strong&gt; ，sudo docker......&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d --name InStockDbService \&#xA;    -v /data/mariadb/data:/var/lib/instockdb \&#xA;    -e MYSQL_ROOT_PASSWORD=root \&#xA;    library/mariadb:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.安装本系统镜像&lt;/h3&gt; &#xA;&lt;p&gt;a.若按上面【1.安装数据库镜像】装的数据库，运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -dit --name InStock --link=InStockDbService \&#xA;    -p 9988:9988 \&#xA;    -e db_host=InStockDbService \&#xA;    mayanghua/instock:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;b.已经有Mysql、mariadb数据库，运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -dit --name InStock \&#xA;    -p 9988:9988 \&#xA;    -e db_host=localhost \&#xA;    -e db_user=root \&#xA;    -e db_password=root \&#xA;    -e db_database=instockdb \&#xA;    -e db_port=3306 \&#xA;    mayanghua/instock:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;docker -e 参数说明：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;db_host       # 数据库服务主机&#xA;db_user       # 数据库访问用户&#xA;db_password   # 数据库访问密码&#xA;db_database   # 数据库名称&#xA;db_port       # 数据库服务端口&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;按自己数据库实际情况配置参数。&lt;/p&gt; &#xA;&lt;h3&gt;3. 系统运行&lt;/h3&gt; &#xA;&lt;p&gt;启动容器后，会自动运行，首先会初始化数据、启动web服务。然后每小时执行“基础数据抓取”，每天17:30执行所有的数据抓取、处理、分析、识别、回测。&lt;/p&gt; &#xA;&lt;p&gt;打开浏览器，输入：&lt;a href=&#34;http://localhost:9988/&#34;&gt;http://localhost:9988/&lt;/a&gt; ，即可使用本系统的可视化功能。&lt;/p&gt; &#xA;&lt;h3&gt;4.历史数据&lt;/h3&gt; &#xA;&lt;p&gt;历史数据抓取、处理、分析、识别、回测，运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it InStock bash &#xA;cat InStock/instock/bin/run_job.sh&#xA;#查看run_job.sh注释,自己选择作业&#xA;------整体作业，支持批量作业------&#xA;当前时间作业 python execute_daily_job.py&#xA;单个时间作业 python execute_daily_job.py 2022-03-01&#xA;枚举时间作业 python execute_daily_job.py 2022-01-01,2021-02-08,2022-03-12&#xA;区间时间作业 python execute_daily_job.py 2022-01-01 2022-03-01&#xA;------单功能作业，支持批量作业，回测数据自动填补到当前&#xA;基础数据实时作业 python basic_data_daily_job.py&#xA;基础数据非实时作业 python basic_data_other_daily_job.py&#xA;股票基本面数据非实时作业 python fundamentals_data_daily_job.py&#xA;指标数据作业 python indicators_data_daily_job.py&#xA;K线形态作业 klinepattern_data_daily_job.py&#xA;策略数据作业 python strategy_data_daily_job.py&#xA;回测数据 python backtest_data_daily_job.py&#xA;第一种方法：&#xA;python execute_daily_job.py 2023-03-01,2023-03-02&#xA;第二种方法：&#xA;修改run_job.sh，然后运行 bash InStock/instock/bin/run_job.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5.查看日志&lt;/h3&gt; &#xA;&lt;p&gt;运行下面命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker exec -it InStock bash &#xA;cat InStock/instock/log/stock_execute_job.log&#xA;cat InStock/instock/log/stock_web.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6.docker常用命令&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker container stop InStock InStockDbService&#xA;#停止容器&#xA;docker container prune&#xA;#回收容器&#xA;docker rmi mayanghua/instock:latest library/mariadb:latest&#xA;#删除镜像&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;具体参见：&lt;a href=&#34;https://www.ljjyy.com/archives/2018/06/100208.html&#34;&gt;Docker基础之 二.镜像及容器的基本操作&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;7.自动交易&lt;/h3&gt; &#xA;&lt;p&gt;目前只支持windows。参考常规安装方式,只需安装python、依赖库，&lt;strong&gt;不需安装mysql、talib等&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h1&gt;特别声明&lt;/h1&gt; &#xA;&lt;p&gt;本系统参考了shidenggui、pythonstock、sngyai。&lt;/p&gt; &#xA;&lt;p&gt;股市有风险投资需谨慎，本系统只能用于学习、股票分析，投资盈亏概不负责。&lt;/p&gt;</summary>
  </entry>
</feed>