<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-20T01:33:32Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>albertan017/LLM4Decompile</title>
    <updated>2024-03-20T01:33:32Z</updated>
    <id>tag:github.com,2024-03-20:/albertan017/LLM4Decompile</id>
    <link href="https://github.com/albertan017/LLM4Decompile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reverse Engineering: Decompiling Binary Code with Large Language Models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LLM4Decompile&lt;/h1&gt; &#xA;&lt;p&gt;Reverse Engineering: Decompiling Binary Code with Large Language Models&lt;/p&gt; &#xA;&lt;p&gt;For more details check out the &lt;a href=&#34;https://arxiv.org/abs/2403.05286&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;0. Updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023.03.16&lt;/strong&gt; Add &lt;a href=&#34;https://huggingface.co/arise-sustech/llm4decompile-6.7b-uo&#34;&gt;llm4decompile-6.7b-uo&lt;/a&gt; model which is trained without prior knowledge of the optimization levels (O0~O3), the average re-executability is arond 0.21.&lt;/p&gt; &#xA;&lt;h2&gt;1. Introduction of LLM4Decompile and Decompile-Eval&lt;/h2&gt; &#xA;&lt;p&gt;Our objective is to create and release the first open-source LLM dedicated to decompilation, and to assess its capabilities by constructing the first decompilation benchmark focused on re-compilability and re-executable.&lt;/p&gt; &#xA;&lt;p&gt;We start by compiling a million C code samples from &lt;a href=&#34;https://github.com/brenocfg/AnghaBench&#34;&gt;AnghaBench&lt;/a&gt; into assembly code using GCC with different configurations, forming a dataset of assembly-source pairs in 4 billion tokens. We then finetune the DeepSeek-Coder model, a leading-edge code LLM, using this dataset. Followed by constructing the evaluation benchmark, Decompile-Eval, based on HumanEval questions and test samples. Specifically, we formulate the evaluation from two perspectives: whether the decompiled code can recompile successfully, and whether it passes all assertions in the test cases.&lt;/p&gt; &#xA;&lt;p&gt;Figure 1 presents the steps involved in our decompilation evaluation. First, the source code (denoted as src) is compiled by the GCC compiler with specific parameters, such as optimization levels, to produce the executable binary. This binary is then disassembled into assembly language (asm) using the objdump tool. The assembly instructions are subsequently decompiled to reconstruct the source code in a format that&#39;s readable to humans (noted as src&#39;). To assess the quality of the decompiled code (src&#39;), it is tested for its ability to be recompiled with the original GCC compiler (re-compilability) and for its functionality through test assertions (re-executability).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/albertan017/LLM4Decompile/raw/main/samples/pipeline.png&#34; alt=&#34;image&#34; width=&#34;300&#34; height=&#34;auto&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;2. Evaluation Results&lt;/h2&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Re-compilability&lt;/strong&gt; and &lt;strong&gt;re-executability&lt;/strong&gt; serve as critical indicators in validating the effectiveness of a decompilation process. When decompiled code can be recompiled, it provides strong evidence of syntactic integrity. It ensures that the decompiled code is not just readable, but also adheres to the structural and syntactical standards expected by the compiler. However, syntax alone does not guarantee semantic equivalence to the original pre-compiled program. Re-executability provides this critical measure of semantic correctness. By re-compiling the decompiled output and running the test cases, we assess if the decompilation preserved the program logic and behavior. Together, re-compilability and re-executability indicate syntax recovery and semantic preservation - both essential for usable and robust decompilation.&lt;/p&gt; &#xA;&lt;h3&gt;Results&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/albertan017/LLM4Decompile/raw/main/samples/results_decompile.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. How to Use The Model&lt;/h2&gt; &#xA;&lt;p&gt;Our LLM4Decompile includes models with sizes between 1.3 billion and 33 billion parameters, and we have made these models available on Hugging Face.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/arise-sustech/llm4decompile-1.3b&#34;&gt;llm4decompile-1.3b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/arise-sustech/llm4decompile-6.7b&#34;&gt;llm4decompile-6.7b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/arise-sustech/llm4decompile-33b&#34;&gt;llm4decompile-33b&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/arise-sustech/llm4decompile-6.7b-nsp&#34;&gt;llm4decompile-6.7b-nsp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/arise-sustech/llm4decompile-6.7b-uo&#34;&gt;llm4decompile-6.7b-uo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: The NSP model is trained with assembly code, the average re-executability is arond 0.17.&lt;/p&gt; &#xA;&lt;p&gt;Note: The unified optimization (UO) model is trained without prior knowledge of the optimization levels (O0~O3), the average re-executability is arond 0.21. The pre-processing of UO model is slightly different (no prior knowledge of the On), please check the &lt;a href=&#34;https://huggingface.co/arise-sustech/llm4decompile-6.7b-uo#3-how-to-use&#34;&gt;model page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here give an example of how to use our model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preprocessing:&lt;/strong&gt; compile the C code into binary, disassemble the binary into assembly instructions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import subprocess&#xA;import os&#xA;import re&#xA;&#xA;digit_pattern = r&#39;\b0x[a-fA-F0-9]+\b&#39;# binary codes in Hexadecimal&#xA;zeros_pattern = r&#39;^0+\s&#39;#0s&#xA;OPT = [&#34;O0&#34;, &#34;O1&#34;, &#34;O2&#34;, &#34;O3&#34;]&#xA;fileName = &#39;path/to/file&#39;&#xA;with open(fileName+&#39;.c&#39;,&#39;r&#39;) as f:#original file&#xA;    c_func = f.read()&#xA;for opt_state in OPT:&#xA;    output_file = fileName +&#39;_&#39; + opt_state&#xA;    input_file = fileName+&#39;.c&#39;&#xA;    compile_command = f&#39;gcc -c -o {output_file}.o {input_file} -{opt_state} -lm&#39;#compile the code with GCC on Linux&#xA;    subprocess.run(compile_command, shell=True, check=True)&#xA;    compile_command = f&#39;objdump -d {output_file}.o &amp;gt; {output_file}.s&#39;#disassemble the binary file into assembly instructions&#xA;    subprocess.run(compile_command, shell=True, check=True)&#xA;    &#xA;    input_asm = &#39;&#39;&#xA;    with open(output_file+&#39;.s&#39;) as f:#asm file&#xA;        asm= f.read()&#xA;    asm = asm.split(&#39;Disassembly of section .text:&#39;)[-1].strip()&#xA;    for tmp in asm.split(&#39;\n&#39;):&#xA;        tmp_asm = tmp.split(&#39;\t&#39;)[-1]#remove the binary code&#xA;        tmp_asm = tmp_asm.split(&#39;#&#39;)[0].strip()#remove the comments&#xA;        input_asm+=tmp_asm+&#39;\n&#39;&#xA;    input_asm = re.sub(zeros_pattern, &#39;&#39;, input_asm)&#xA;    before = f&#34;# This is the assembly code with {opt_state} optimization:\n&#34;#prompt&#xA;    after = &#34;\n# What is the source code?\n&#34;#prompt&#xA;    input_asm_prompt = before+input_asm.strip()+after&#xA;    with open(fileName +&#39;_&#39; + opt_state +&#39;.asm&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;) as f:&#xA;        f.write(input_asm_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Decompilation:&lt;/strong&gt; use LLM4Decompile to translate the assembly instructions into C:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoTokenizer, AutoModelForCausalLM&#xA;import torch&#xA;&#xA;model_path = &#39;arise-sustech/llm4decompile-1.3b&#39;&#xA;tokenizer = AutoTokenizer.from_pretrained(model_path)&#xA;model = AutoModelForCausalLM.from_pretrained(model_path,torch_dtype=torch.bfloat16).cuda()&#xA;&#xA;with open(fileName +&#39;_&#39; + opt_state +&#39;.asm&#39;,&#39;r&#39;) as f:#original file&#xA;    asm_func = f.read()&#xA;inputs = tokenizer(asm_func, return_tensors=&#34;pt&#34;).to(model.device)&#xA;with torch.no_grad():&#xA;    outputs = model.generate(**inputs, max_new_tokens=500)&#xA;c_func_decompile = tokenizer.decode(outputs[0][len(inputs[0]):-1])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. How to use Decompile-Eval&lt;/h2&gt; &#xA;&lt;p&gt;Data are stored in &lt;code&gt;llm4decompile/decompile-eval/decompile-eval.json&lt;/code&gt;, using JSON list format. There are 164*4 (O0, O1, O2, O3) samples, each with five keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;task_id&lt;/code&gt;: indicates the ID of the problem.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: the optimization stage, is one of [O0, O1, O2, O3].&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c_func&lt;/code&gt;: C solution for HumanEval problem.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c_test&lt;/code&gt;: C test assertions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;input_asm_prompt&lt;/code&gt;: assembly instructions with prompts, can be derived as in our &lt;a href=&#34;https://github.com/albertan017/LLM4Decompile/raw/main/README.md#3-how-to-use-the-model&#34;&gt;preprocessing example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the evaluation on single GPU and single process:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd LLM4Decompile&#xA;python ./evaluation/run_evaluation_llm4decompile_singleGPU.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the evaluation using TGI (10x faster, support multiple GPUs and multi-process): First, please install the text-generation-inference following the official &lt;a href=&#34;https://github.com/huggingface/text-generation-inference&#34;&gt;link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/albertan017/LLM4Decompile.git&#xA;cd LLM4Decompile&#xA;pip install -r requirements.txt&#xA;&#xA;# Before run the evaluation script, plase update the model_path to your local mdoel path.&#xA;bash ./scripts/run_evaluation_llm4decompile.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5. On Going&lt;/h2&gt; &#xA;&lt;p&gt;LLM4Binary: We plan to include larger dataset to pre-train the model with assembly code and C code.&lt;/p&gt; &#xA;&lt;p&gt;Decompiler-ALL: Support popular languages/platforms and settings (e.g., decompile multiple functions).&lt;/p&gt; &#xA;&lt;h2&gt;6. License&lt;/h2&gt; &#xA;&lt;p&gt;This code repository is licensed under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;7. Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, please raise an issue.&lt;/p&gt; &#xA;&lt;h2&gt;8. Thoughts&lt;/h2&gt; &#xA;&lt;p&gt;The conversation about the language model decompiler that took place on &lt;a href=&#34;https://www.reddit.com/r/MachineLearning/comments/123asbg/d_can_we_train_a_decompiler/&#34;&gt;Reddit&lt;/a&gt; roughly a year ago was quite fascinating to us.&lt;/p&gt; &#xA;&lt;h2&gt;9. Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{tan2024llm4decompile,&#xA;      title={LLM4Decompile: Decompiling Binary Code with Large Language Models}, &#xA;      author={Hanzhuo Tan and Qi Luo and Jing Li and Yuqun Zhang},&#xA;      year={2024},&#xA;      eprint={2403.05286},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.PL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>xai-org/grok-1</title>
    <updated>2024-03-20T01:33:32Z</updated>
    <id>tag:github.com,2024-03-20:/xai-org/grok-1</id>
    <link href="https://github.com/xai-org/grok-1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Grok open release&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grok-1&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains JAX example code for loading and running the Grok-1 open-weights model.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to download the checkpoint and place the &lt;code&gt;ckpt-0&lt;/code&gt; directory in &lt;code&gt;checkpoints&lt;/code&gt; - see &lt;a href=&#34;https://raw.githubusercontent.com/xai-org/grok-1/main/#downloading-the-weights&#34;&gt;Downloading the weights&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;python run.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to test the code.&lt;/p&gt; &#xA;&lt;p&gt;The script loads the checkpoint and samples from the model on a test input.&lt;/p&gt; &#xA;&lt;p&gt;Due to the large size of the model (314B parameters), a machine with enough GPU memory is required to test the model with the example code. The implementation of the MoE layer in this repository is not efficient. The implementation was chosen to avoid the need for custom kernels to validate the correctness of the model.&lt;/p&gt; &#xA;&lt;h1&gt;Model Specifications&lt;/h1&gt; &#xA;&lt;p&gt;Grok-1 is currently designed with the following specifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parameters:&lt;/strong&gt; 314B&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Architecture:&lt;/strong&gt; Mixture of 8 Experts (MoE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experts Utilization:&lt;/strong&gt; 2 experts used per token&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Layers:&lt;/strong&gt; 64&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Attention Heads:&lt;/strong&gt; 48 for queries, 8 for keys/values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embedding Size:&lt;/strong&gt; 6,144&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tokenization:&lt;/strong&gt; SentencePiece tokenizer with 131,072 tokens&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Features:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rotary embeddings (RoPE)&lt;/li&gt; &#xA;   &lt;li&gt;Supports activation sharding and 8-bit quantization&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maximum Sequence Length (context):&lt;/strong&gt; 8,192 tokens&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Downloading the weights&lt;/h1&gt; &#xA;&lt;p&gt;You can download the weights using a torrent client and this magnet link:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;magnet:?xt=urn:btih:5f96d43576e3d386c9ba65b883210a393b68210e&amp;amp;tr=https%3A%2F%2Facademictorrents.com%2Fannounce.php&amp;amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or directly using &lt;a href=&#34;https://huggingface.co/xai-org/grok-1&#34;&gt;HuggingFace 🤗 Hub&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/xai-org/grok-1.git &amp;amp;&amp;amp; cd grok-1&#xA;pip install huggingface_hub[hf_transfer]&#xA;huggingface-cli download xai-org/grok-1 --repo-type model --include ckpt-0/* --local-dir checkpoints --local-dir-use-symlinks False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The code and associated Grok-1 weights in this release are licensed under the Apache 2.0 license. The license only applies to the source files in this repository and the model weights of Grok-1.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>replicate/cog</title>
    <updated>2024-03-20T01:33:32Z</updated>
    <id>tag:github.com,2024-03-20:/replicate/cog</id>
    <link href="https://github.com/replicate/cog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Containers for machine learning&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cog: Containers for machine learning&lt;/h1&gt; &#xA;&lt;p&gt;Cog is an open-source tool that lets you package machine learning models in a standard, production-ready container.&lt;/p&gt; &#xA;&lt;p&gt;You can deploy your packaged model to your own infrastructure, or to &lt;a href=&#34;https://replicate.com/&#34;&gt;Replicate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;📦 &lt;strong&gt;Docker containers without the pain.&lt;/strong&gt; Writing your own &lt;code&gt;Dockerfile&lt;/code&gt; can be a bewildering process. With Cog, you define your environment with a &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#how-it-works&#34;&gt;simple configuration file&lt;/a&gt; and it generates a Docker image with all the best practices: Nvidia base images, efficient caching of dependencies, installing specific Python versions, sensible environment variable defaults, and so on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🤬️ &lt;strong&gt;No more CUDA hell.&lt;/strong&gt; Cog knows which CUDA/cuDNN/PyTorch/Tensorflow/Python combos are compatible and will set it all up correctly for you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;✅ &lt;strong&gt;Define the inputs and outputs for your model with standard Python.&lt;/strong&gt; Then, Cog generates an OpenAPI schema and validates the inputs and outputs with Pydantic.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🎁 &lt;strong&gt;Automatic HTTP prediction server&lt;/strong&gt;: Your model&#39;s types are used to dynamically generate a RESTful HTTP API using &lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🥞 &lt;strong&gt;Automatic queue worker.&lt;/strong&gt; Long-running deep learning models or batch processing is best architected with a queue. Cog models do this out of the box. Redis is currently supported, with more in the pipeline.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;☁️ &lt;strong&gt;Cloud storage.&lt;/strong&gt; Files can be read and written directly to Amazon S3 and Google Cloud Storage. (Coming soon.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🚀 &lt;strong&gt;Ready for production.&lt;/strong&gt; Deploy your model anywhere that Docker images run. Your own infrastructure, or &lt;a href=&#34;https://replicate.com&#34;&gt;Replicate&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Define the Docker environment your model runs in with &lt;code&gt;cog.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;build:&#xA;  gpu: true&#xA;  system_packages:&#xA;    - &#34;libgl1-mesa-glx&#34;&#xA;    - &#34;libglib2.0-0&#34;&#xA;  python_version: &#34;3.11&#34;&#xA;  python_packages:&#xA;    - &#34;torch==1.8.1&#34;&#xA;predict: &#34;predict.py:Predictor&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Define how predictions are run on your model with &lt;code&gt;predict.py&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cog import BasePredictor, Input, Path&#xA;import torch&#xA;&#xA;class Predictor(BasePredictor):&#xA;    def setup(self):&#xA;        &#34;&#34;&#34;Load the model into memory to make running multiple predictions efficient&#34;&#34;&#34;&#xA;        self.model = torch.load(&#34;./weights.pth&#34;)&#xA;&#xA;    # The arguments and types the model takes as input&#xA;    def predict(self,&#xA;          image: Path = Input(description=&#34;Grayscale input image&#34;)&#xA;    ) -&amp;gt; Path:&#xA;        &#34;&#34;&#34;Run a single prediction on the model&#34;&#34;&#34;&#xA;        processed_image = preprocess(image)&#xA;        output = self.model(processed_image)&#xA;        return postprocess(output)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can run predictions on this model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cog predict -i image=@input.jpg&#xA;--&amp;gt; Building Docker image...&#xA;--&amp;gt; Running Prediction...&#xA;--&amp;gt; Output written to output.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, build a Docker image for deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cog build -t my-colorization-model&#xA;--&amp;gt; Building Docker image...&#xA;--&amp;gt; Built my-colorization-model:latest&#xA;&#xA;$ docker run -d -p 5000:5000 --gpus all my-colorization-model&#xA;&#xA;$ curl http://localhost:5000/predictions -X POST \&#xA;    -H &#39;Content-Type: application/json&#39; \&#xA;    -d &#39;{&#34;input&#34;: {&#34;image&#34;: &#34;https://.../input.jpg&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- NOTE (bfirsh): Development environment instructions intentionally left out of readme for now, so as not to confuse the &#34;ship a model to production&#34; message.&#xA;&#xA;In development, you can also run arbitrary commands inside the Docker environment:&#xA;&#xA;```console&#xA;$ cog run python train.py&#xA;...&#xA;```&#xA;&#xA;Or, [spin up a Jupyter notebook](docs/notebooks.md):&#xA;&#xA;```console&#xA;$ cog run -p 8888 jupyter notebook --allow-root --ip=0.0.0.0&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Why are we building this?&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s really hard for researchers to ship machine learning models to production.&lt;/p&gt; &#xA;&lt;p&gt;Part of the solution is Docker, but it is so complex to get it to work: Dockerfiles, pre-/post-processing, Flask servers, CUDA versions. More often than not the researcher has to sit down with an engineer to get the damn thing deployed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/andreasjansson&#34;&gt;Andreas&lt;/a&gt; and &lt;a href=&#34;https://github.com/bfirsh&#34;&gt;Ben&lt;/a&gt; created Cog. Andreas used to work at Spotify, where he built tools for building and deploying ML models with Docker. Ben worked at Docker, where he created &lt;a href=&#34;https://github.com/docker/compose&#34;&gt;Docker Compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We realized that, in addition to Spotify, other companies were also using Docker to build and deploy machine learning models. &lt;a href=&#34;https://eng.uber.com/michelangelo-pyml/&#34;&gt;Uber&lt;/a&gt; and others have built similar systems. So, we&#39;re making an open source version so other people can do this too.&lt;/p&gt; &#xA;&lt;p&gt;Hit us up if you&#39;re interested in using it or want to collaborate with us. &lt;a href=&#34;https://discord.gg/replicate&#34;&gt;We&#39;re on Discord&lt;/a&gt; or email us at &lt;a href=&#34;mailto:team@replicate.com&#34;&gt;team@replicate.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS, Linux or Windows 11&lt;/strong&gt;. Cog works on macOS, Linux and Windows 11 with &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/wsl2/wsl2.md&#34;&gt;WSL 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;. Cog uses Docker to create a container for your model. You&#39;ll need to &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;install Docker&lt;/a&gt; before you can run Cog. If you install Docker Engine instead of Docker Desktop, you will need to &lt;a href=&#34;https://docs.docker.com/build/architecture/#buildx&#34;&gt;install Buildx&lt;/a&gt; as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using macOS, you can install Cog using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew install cog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also download and install the latest release of Cog directly from GitHub by running the following commands in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo curl -o /usr/local/bin/cog -L &#34;https://github.com/replicate/cog/releases/latest/download/cog_$(uname -s)_$(uname -m)&#34;&#xA;sudo chmod +x /usr/local/bin/cog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can build Cog from source and install it with these commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrade&lt;/h2&gt; &#xA;&lt;p&gt;If you previously installed Cog from a GitHub Releases URL, you can upgrade to the latest version by running the same commands you used to install it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo curl -o /usr/local/bin/cog -L &#34;https://github.com/replicate/cog/releases/latest/download/cog_$(uname -s)_$(uname -m)&#34;&#xA;sudo chmod +x /usr/local/bin/cog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using macOS and you previously installed Cog with Homebrew, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;brew upgrade cog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/getting-started.md&#34;&gt;Get started with an example model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/getting-started-own-model.md&#34;&gt;Get started with your own model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/notebooks.md&#34;&gt;Using Cog with notebooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/wsl2/wsl2.md&#34;&gt;Using Cog with Windows 11&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/replicate/cog-examples&#34;&gt;Take a look at some examples of using Cog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/deploy.md&#34;&gt;Deploy models with Cog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/yaml.md&#34;&gt;&lt;code&gt;cog.yaml&lt;/code&gt; reference&lt;/a&gt; to learn how to define your model&#39;s environment&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/python.md&#34;&gt;Prediction interface reference&lt;/a&gt; to learn how the &lt;code&gt;Predictor&lt;/code&gt; interface works&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/training.md&#34;&gt;Training interface reference&lt;/a&gt; to learn how to add a fine-tuning API to your model&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/docs/http.md&#34;&gt;HTTP API reference&lt;/a&gt; to learn how to use the HTTP API that models serve&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/replicate&#34;&gt;Join us in #cog on Discord.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors ✨&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://allcontributors.org/docs/en/emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://fir.sh/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/40906?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Ben Firshman&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ben Firshman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=bfirsh&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=bfirsh&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://replicate.ai/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/713993?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Andreas Jansson&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Andreas Jansson&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=andreasjansson&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=andreasjansson&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#maintenance-andreasjansson&#34; title=&#34;Maintenance&#34;&gt;🚧&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://zeke.sikelianos.com/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2289?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Zeke Sikelianos&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Zeke Sikelianos&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=zeke&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=zeke&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#tool-zeke&#34; title=&#34;Tools&#34;&gt;🔧&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://rory.bio/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9436784?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Rory Byrne&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rory Byrne&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=synek&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=synek&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=synek&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/hangtwenty&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2420688?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Michael Floering&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Michael Floering&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=hangtwenty&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=hangtwenty&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#ideas-hangtwenty&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://bencevans.io/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/638535?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Ben Evans&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ben Evans&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=bencevans&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://shashank.pw/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/778870?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;shashank agarwal&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;shashank agarwal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=imshashank&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=imshashank&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://victorxlr.me/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/22397950?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;VictorXLR&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;VictorXLR&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=VictorXLR&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=VictorXLR&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=VictorXLR&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://annahung31.github.io/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/39179888?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;hung anna&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;hung anna&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Aannahung31&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://notes.variogr.am/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/76612?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Brian Whitman&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Brian Whitman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Abwhitman&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/JimothyJohn&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/24216724?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;JimothyJohn&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;JimothyJohn&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3AJimothyJohn&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/ericguizzo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/26746670?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;ericguizzo&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;ericguizzo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Aericguizzo&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://www.dominicbaggott.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/74812?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Dominic Baggott&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dominic Baggott&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=evilstreak&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=evilstreak&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/dashstander&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7449128?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Dashiell Stander&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dashiell Stander&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Adashstander&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=dashstander&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=dashstander&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/Hurricane-eye&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/31437546?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Shuwei Liang&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Shuwei Liang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3AHurricane-eye&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#question-Hurricane-eye&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/ericallam&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/534?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Eric Allam&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Eric Allam&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#ideas-ericallam&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://perdomo.me&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/178474?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Iván Perdomo&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Iván Perdomo&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Aiperdomo&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://charlesfrye.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10442975?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Charles Frye&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Charles Frye&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=charlesfrye&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/phamquiluan&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/24642166?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Luan Pham&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Luan Pham&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Aphamquiluan&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=phamquiluan&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/TommyDew42&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/46992350?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;TommyDew&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;TommyDew&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=TommyDew42&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://m4ke.org&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/27?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Jesse Andrews&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jesse Andrews&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=anotherjesse&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=anotherjesse&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=anotherjesse&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://whiteink.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3602?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Nick Stenning&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Nick Stenning&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=nickstenning&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=nickstenning&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#design-nickstenning&#34; title=&#34;Design&#34;&gt;🎨&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#infra-nickstenning&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;🚇&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=nickstenning&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://merrell.io/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/14996837?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Justin Merrell&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Justin Merrell&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=justinmerrell&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/ruriky&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/19946546?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Rurik Ylä-Onnenvuori&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Rurik Ylä-Onnenvuori&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Aruriky&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://www.youka.club/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/59315275?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Youka&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Youka&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Ayoukaclub&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/afiaka87&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/3994972?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Clay Mullis&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Clay Mullis&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=afiaka87&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/mattt&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7659?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Mattt&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Mattt&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=mattt&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=mattt&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#infra-mattt&#34; title=&#34;Infrastructure (Hosting, Build-Tools, etc)&#34;&gt;🚇&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/Juneezee&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/20135478?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Eng Zer Jun&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Eng Zer Jun&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=Juneezee&#34; title=&#34;Tests&#34;&gt;⚠️&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/bbedward&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/550752?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;BB&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;BB&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=bbedward&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/williamluer&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/85975676?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;williamluer&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;williamluer&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=williamluer&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://sirupsen.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/97400?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Simon Eskildsen&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Simon Eskildsen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=sirupsen&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://erbridge.co.uk&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1027364?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;F&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;F&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Aerbridge&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=erbridge&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/philandstuff&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/581269?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Philip Potter&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Philip Potter&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/issues?q=author%3Aphilandstuff&#34; title=&#34;Bug reports&#34;&gt;🐛&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=philandstuff&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;https://github.com/joannejchen&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/33409024?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Joanne Chen&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Joanne Chen&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=joannejchen&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://technillogue.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/945691?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;technillogue&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;technillogue&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=technillogue&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt;&lt;a href=&#34;http://aroncarroll.com&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/47144?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;Aron Carroll&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Aron Carroll&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/replicate/cog/commits?author=aron&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://github.com/replicate/cog/commits?author=aron&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/replicate/cog/main/#ideas-aron&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/all-contributors/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;</summary>
  </entry>
</feed>