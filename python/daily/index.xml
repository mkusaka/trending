<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:34:14Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pypa/pip</title>
    <updated>2022-06-05T01:34:14Z</updated>
    <id>tag:github.com,2022-06-05:/pypa/pip</id>
    <link href="https://github.com/pypa/pip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Python package installer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pip - The Python Package Installer&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/pypi/v/pip.svg&#34;&gt;https://img.shields.io/pypi/v/pip.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/pip/&#34;&gt;https://pypi.org/project/pip/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://readthedocs.org/projects/pip/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/pip/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://pip.pypa.io/en/latest&#34;&gt;https://pip.pypa.io/en/latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;pip is the &lt;code&gt;package installer&lt;/code&gt;_ for Python. You can use pip to install packages from the &lt;code&gt;Python Package Index&lt;/code&gt;_ and other indexes.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at our documentation for how to install and use pip:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Installation&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Usage&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We release updates regularly, with a new version every 3 months. Find more details in our documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Release notes&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Release process&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In pip 20.3, we&#39;ve &lt;code&gt;made a big improvement to the heart of pip&lt;/code&gt;&lt;em&gt;; &lt;code&gt;learn more&lt;/code&gt;&lt;/em&gt;. We want your input, so &lt;code&gt;sign up for our user experience research studies&lt;/code&gt;_ to help us do it right.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: pip 21.0, in January 2021, removed Python 2 support, per pip&#39;s &lt;code&gt;Python 2 support policy&lt;/code&gt;_. Please migrate to Python 3.&lt;/p&gt; &#xA;&lt;p&gt;If you find bugs, need help, or want to talk to the developers, please use our mailing lists or chat rooms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Issue tracking&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Discourse channel&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;User IRC&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to get involved head over to GitHub to get the source code, look at our development documentation and feel free to jump on the developer mailing lists and chat rooms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GitHub page&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Development documentation&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Development mailing list&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Development IRC&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the pip project&#39;s codebases, issue trackers, chat rooms, and mailing lists is expected to follow the &lt;code&gt;PSF Code of Conduct&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _package installer: &lt;a href=&#34;https://packaging.python.org/guides/tool-recommendations/&#34;&gt;https://packaging.python.org/guides/tool-recommendations/&lt;/a&gt; .. _Python Package Index: &lt;a href=&#34;https://pypi.org&#34;&gt;https://pypi.org&lt;/a&gt; .. _Installation: &lt;a href=&#34;https://pip.pypa.io/en/stable/installation/&#34;&gt;https://pip.pypa.io/en/stable/installation/&lt;/a&gt; .. _Usage: &lt;a href=&#34;https://pip.pypa.io/en/stable/&#34;&gt;https://pip.pypa.io/en/stable/&lt;/a&gt; .. _Release notes: &lt;a href=&#34;https://pip.pypa.io/en/stable/news.html&#34;&gt;https://pip.pypa.io/en/stable/news.html&lt;/a&gt; .. _Release process: &lt;a href=&#34;https://pip.pypa.io/en/latest/development/release-process/&#34;&gt;https://pip.pypa.io/en/latest/development/release-process/&lt;/a&gt; .. _GitHub page: &lt;a href=&#34;https://github.com/pypa/pip&#34;&gt;https://github.com/pypa/pip&lt;/a&gt; .. _Development documentation: &lt;a href=&#34;https://pip.pypa.io/en/latest/development&#34;&gt;https://pip.pypa.io/en/latest/development&lt;/a&gt; .. _made a big improvement to the heart of pip: &lt;a href=&#34;https://pyfound.blogspot.com/2020/11/pip-20-3-new-resolver.html&#34;&gt;https://pyfound.blogspot.com/2020/11/pip-20-3-new-resolver.html&lt;/a&gt; .. _learn more: &lt;a href=&#34;https://pip.pypa.io/en/latest/user_guide/#changes-to-the-pip-dependency-resolver-in-20-3-2020&#34;&gt;https://pip.pypa.io/en/latest/user_guide/#changes-to-the-pip-dependency-resolver-in-20-3-2020&lt;/a&gt; .. _sign up for our user experience research studies: &lt;a href=&#34;https://pyfound.blogspot.com/2020/03/new-pip-resolver-to-roll-out-this-year.html&#34;&gt;https://pyfound.blogspot.com/2020/03/new-pip-resolver-to-roll-out-this-year.html&lt;/a&gt; .. _Python 2 support policy: &lt;a href=&#34;https://pip.pypa.io/en/latest/development/release-process/#python-2-support&#34;&gt;https://pip.pypa.io/en/latest/development/release-process/#python-2-support&lt;/a&gt; .. _Issue tracking: &lt;a href=&#34;https://github.com/pypa/pip/issues&#34;&gt;https://github.com/pypa/pip/issues&lt;/a&gt; .. _Discourse channel: &lt;a href=&#34;https://discuss.python.org/c/packaging&#34;&gt;https://discuss.python.org/c/packaging&lt;/a&gt; .. _Development mailing list: &lt;a href=&#34;https://mail.python.org/mailman3/lists/distutils-sig.python.org/&#34;&gt;https://mail.python.org/mailman3/lists/distutils-sig.python.org/&lt;/a&gt; .. _User IRC: &lt;a href=&#34;https://kiwiirc.com/nextclient/#ircs://irc.libera.chat:+6697/pypa&#34;&gt;https://kiwiirc.com/nextclient/#ircs://irc.libera.chat:+6697/pypa&lt;/a&gt; .. _Development IRC: &lt;a href=&#34;https://kiwiirc.com/nextclient/#ircs://irc.libera.chat:+6697/pypa-dev&#34;&gt;https://kiwiirc.com/nextclient/#ircs://irc.libera.chat:+6697/pypa-dev&lt;/a&gt; .. _PSF Code of Conduct: &lt;a href=&#34;https://github.com/pypa/.github/raw/main/CODE_OF_CONDUCT.md&#34;&gt;https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pre-commit/pre-commit-hooks</title>
    <updated>2022-06-05T01:34:14Z</updated>
    <id>tag:github.com,2022-06-05:/pre-commit/pre-commit-hooks</id>
    <link href="https://github.com/pre-commit/pre-commit-hooks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Some out-of-the-box hooks for pre-commit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://asottile.visualstudio.com/asottile/_build/latest?definitionId=17&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://asottile.visualstudio.com/asottile/_apis/build/status/pre-commit.pre-commit-hooks?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/asottile/asottile/_build/latest?definitionId=17&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/coverage/asottile/asottile/17/main.svg?sanitize=true&#34; alt=&#34;Azure DevOps coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://results.pre-commit.ci/latest/github/pre-commit/pre-commit-hooks/main&#34;&gt;&lt;img src=&#34;https://results.pre-commit.ci/badge/github/pre-commit/pre-commit-hooks/main.svg?sanitize=true&#34; alt=&#34;pre-commit.ci status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;pre-commit-hooks&lt;/h1&gt; &#xA;&lt;p&gt;Some out-of-the-box hooks for pre-commit.&lt;/p&gt; &#xA;&lt;p&gt;See also: &lt;a href=&#34;https://github.com/pre-commit/pre-commit&#34;&gt;https://github.com/pre-commit/pre-commit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using pre-commit-hooks with pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;-   repo: https://github.com/pre-commit/pre-commit-hooks&#xA;    rev: v4.2.0  # Use the ref you want to point at&#xA;    hooks:&#xA;    -   id: trailing-whitespace&#xA;    # -   id: ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hooks available&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-added-large-files&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Prevent giant files from being committed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify what is &#34;too large&#34; with &lt;code&gt;args: [&#39;--maxkb=123&#39;]&lt;/code&gt; (default=500kB).&lt;/li&gt; &#xA; &lt;li&gt;Limits checked files to those indicated as staged for addition by git.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;git-lfs&lt;/code&gt; is installed, lfs files will be skipped (requires &lt;code&gt;git-lfs&amp;gt;=2.2.1&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enforce-all&lt;/code&gt; - Check all listed files not just those staged for addition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-ast&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Simply check whether files parse as valid python.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-builtin-literals&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Require literal syntax when initializing empty or zero Python builtin types.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows calling constructors with positional arguments (e.g., &lt;code&gt;list(&#39;abc&#39;)&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Allows calling constructors from the &lt;code&gt;builtins&lt;/code&gt; (&lt;code&gt;__builtin__&lt;/code&gt;) namespace (&lt;code&gt;builtins.list()&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Ignore this requirement for specific builtin types with &lt;code&gt;--ignore=type1,type2,…&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Forbid &lt;code&gt;dict&lt;/code&gt; keyword syntax with &lt;code&gt;--no-allow-dict-kwargs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-case-conflict&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Check for files with names that would conflict on a case-insensitive filesystem like MacOS HFS+ or Windows FAT.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-docstring-first&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks for a common error of placing code before the docstring.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-executables-have-shebangs&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks that non-binary executables have a proper shebang.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-json&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Attempts to load all json files to verify syntax.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-merge-conflict&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Check for files that contain merge conflict strings.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--assume-in-merge&lt;/code&gt; - Allows running the hook when there is no ongoing merge operation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-shebang-scripts-are-executable&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks that scripts with shebangs are executable.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-symlinks&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks for symlinks which do not point to anything.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-toml&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Attempts to load all TOML files to verify syntax.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-vcs-permalinks&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Ensures that links to vcs websites are permalinks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--additional-github-domain DOMAIN&lt;/code&gt; - Add check for specified domain. Can be repeated multiple times. for example, if your company uses GitHub Enterprise you may use something like &lt;code&gt;--additional-github-domain github.example.com&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-xml&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Attempts to load all xml files to verify syntax.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;check-yaml&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Attempts to load all yaml files to verify syntax.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--allow-multiple-documents&lt;/code&gt; - allow yaml files which use the &lt;a href=&#34;http://www.yaml.org/spec/1.2/spec.html#YAML&#34;&gt;multi-document syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--unsafe&lt;/code&gt; - Instead of loading the files, simply parse them for syntax. A syntax-only check enables extensions and unsafe constructs which would otherwise be forbidden. Using this option removes all guarantees of portability to other yaml implementations. Implies &lt;code&gt;--allow-multiple-documents&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;debug-statements&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Check for debugger imports and py37+ &lt;code&gt;breakpoint()&lt;/code&gt; calls in python source.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;destroyed-symlinks&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Detects symlinks which are changed to regular files with a content of a path which that symlink was pointing to. This usually happens on Windows when a user clones a repository that has symlinks but they do not have the permission to create symlinks.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;detect-aws-credentials&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks for the existence of AWS secrets that you have set up with the AWS CLI. The following arguments are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--credentials-file CREDENTIALS_FILE&lt;/code&gt; - additional AWS CLI style configuration file in a non-standard location to fetch configured credentials from. Can be repeated multiple times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--allow-missing-credentials&lt;/code&gt; - Allow hook to pass when no credentials are detected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;detect-private-key&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks for the existence of private keys.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;double-quote-string-fixer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This hook replaces double quoted strings with single quoted strings.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;end-of-file-fixer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Makes sure files end in a newline and only a newline.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;fix-byte-order-marker&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;removes UTF-8 byte order marker&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;fix-encoding-pragma&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add &lt;code&gt;# -*- coding: utf-8 -*-&lt;/code&gt; to the top of python files.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To remove the coding pragma pass &lt;code&gt;--remove&lt;/code&gt; (useful in a python3-only codebase)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;file-contents-sorter&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input to it. Note that this hook WILL remove blank lines and does NOT respect any comments.&lt;/p&gt; &#xA;&lt;p&gt;The following arguments are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--ignore-case&lt;/code&gt; - fold lower case to upper case characters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--unique&lt;/code&gt; - ensure each line is unique.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;forbid-new-submodules&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Prevent addition of new git submodules.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;mixed-line-ending&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Replaces or checks mixed line ending.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--fix={auto,crlf,lf,no}&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;auto&lt;/code&gt; - Replaces automatically the most frequent line ending. This is the default argument.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;crlf&lt;/code&gt;, &lt;code&gt;lf&lt;/code&gt; - Forces to replace line ending by respectively CRLF and LF. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;This option isn&#39;t compatible with git setup check-in LF check-out CRLF as git smudge this later than the hook is invoked.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;no&lt;/code&gt; - Checks if there is any mixed line ending without modifying any file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;name-tests-test&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Assert that files in tests/ end in &lt;code&gt;_test.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;args: [&#39;--django&#39;]&lt;/code&gt; to match &lt;code&gt;test*.py&lt;/code&gt; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;no-commit-to-branch&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Protect specific branches from direct checkins.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;args: [--branch, staging, --branch, main]&lt;/code&gt; to set the branch. Both &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt; are protected by default if no branch argument is set.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-b&lt;/code&gt; / &lt;code&gt;--branch&lt;/code&gt; may be specified multiple times to protect multiple branches.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-p&lt;/code&gt; / &lt;code&gt;--pattern&lt;/code&gt; can be used to protect branches that match a supplied regex (e.g. &lt;code&gt;--pattern, release/.*&lt;/code&gt;). May be specified multiple times.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;no-commit-to-branch&lt;/code&gt; is configured by default to &lt;a href=&#34;https://pre-commit.com/#config-always_run&#34;&gt;&lt;code&gt;always_run&lt;/code&gt;&lt;/a&gt;. As a result, it will ignore any setting of &lt;a href=&#34;https://pre-commit.com/#config-files&#34;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://pre-commit.com/#config-exclude&#34;&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://pre-commit.com/#config-types&#34;&gt;&lt;code&gt;types&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://pre-commit.com/#config-exclude_types&#34;&gt;&lt;code&gt;exclude_types&lt;/code&gt;&lt;/a&gt;. Set &lt;a href=&#34;https://pre-commit.com/#config-always_run&#34;&gt;&lt;code&gt;always_run: false&lt;/code&gt;&lt;/a&gt; to allow this hook to be skipped according to these file filters. Caveat: In this configuration, empty commits (&lt;code&gt;git commit --allow-empty&lt;/code&gt;) would always be allowed by this hook.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;pretty-format-json&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Checks that all your JSON files are pretty. &#34;Pretty&#34; here means that keys are sorted and indented. You can configure this with the following commandline options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--autofix&lt;/code&gt; - automatically format json files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--indent ...&lt;/code&gt; - Control the indentation (either a number for a number of spaces or a string of whitespace). Defaults to 2 spaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-ensure-ascii&lt;/code&gt; preserve unicode characters instead of converting to escape sequences&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-sort-keys&lt;/code&gt; - when autofixing, retain the original key ordering (instead of sorting the keys)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--top-keys comma,separated,keys&lt;/code&gt; - Keys to keep at the top of mappings.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;requirements-txt-fixer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sorts entries in requirements.txt and removes incorrect entry for &lt;code&gt;pkg-resources==0.0.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;sort-simple-yaml&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks.&lt;/p&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;sort-simple-yaml&lt;/code&gt; by default matches no &lt;code&gt;files&lt;/code&gt; as it enforces a very specific format. You must opt in to this by setting &lt;a href=&#34;https://pre-commit.com/#config-files&#34;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    -   id: sort-simple-yaml&#xA;        files: ^config/simple/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;trailing-whitespace&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Trims trailing whitespace.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To preserve Markdown &lt;a href=&#34;https://github.github.com/gfm/#hard-line-break&#34;&gt;hard linebreaks&lt;/a&gt; use &lt;code&gt;args: [--markdown-linebreak-ext=md]&lt;/code&gt; (or other extensions used by your markdownfiles). If for some reason you want to treat all files as markdown, use &lt;code&gt;--markdown-linebreak-ext=*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By default, this hook trims all whitespace from the ends of lines. To specify a custom set of characters to trim instead, use &lt;code&gt;args: [--chars,&#34;&amp;lt;chars to trim&amp;gt;&#34;]&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deprecated / replaced hooks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;check-byte-order-marker&lt;/code&gt;: instead use fix-byte-order-marker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;As a standalone package&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to use these hooks, they&#39;re also available as a standalone package.&lt;/p&gt; &#xA;&lt;p&gt;Simply &lt;code&gt;pip install pre-commit-hooks&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Rapptz/discord.py</title>
    <updated>2022-06-05T01:34:14Z</updated>
    <id>tag:github.com,2022-06-05:/Rapptz/discord.py</id>
    <link href="https://github.com/Rapptz/discord.py" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An API wrapper for Discord written in Python.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;discord.py&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://discord.com/api/guilds/336642139381301249/embed.png&#34;&gt;https://discord.com/api/guilds/336642139381301249/embed.png&lt;/a&gt; :target: &lt;a href=&#34;https://discord.gg/r3sSKJJ&#34;&gt;https://discord.gg/r3sSKJJ&lt;/a&gt; :alt: Discord server invite .. image:: &lt;a href=&#34;https://img.shields.io/pypi/v/discord.py.svg&#34;&gt;https://img.shields.io/pypi/v/discord.py.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/discord.py&#34;&gt;https://pypi.python.org/pypi/discord.py&lt;/a&gt; :alt: PyPI version info .. image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/discord.py.svg&#34;&gt;https://img.shields.io/pypi/pyversions/discord.py.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/discord.py&#34;&gt;https://pypi.python.org/pypi/discord.py&lt;/a&gt; :alt: PyPI supported Python versions&lt;/p&gt; &#xA;&lt;p&gt;A modern, easy to use, feature-rich, and async ready API wrapper for Discord written in Python.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Modern Pythonic API using &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Proper rate limit handling.&lt;/li&gt; &#xA; &lt;li&gt;Optimised in both speed and memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python 3.8 or higher is required&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To install the library without full voice support, you can just run the following command:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: sh&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Linux/macOS&#xA;python3 -m pip install -U discord.py&#xA;&#xA;# Windows&#xA;py -3 -m pip install -U discord.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise to get voice support you should run the following command:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: sh&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Linux/macOS&#xA;python3 -m pip install -U &#34;discord.py[voice]&#34;&#xA;&#xA;# Windows&#xA;py -3 -m pip install -U discord.py[voice]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install the development version, do the following:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: sh&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/Rapptz/discord.py&#xA;$ cd discord.py&#xA;$ python3 -m pip install -U .[voice]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional Packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;* `PyNaCl &amp;lt;https://pypi.org/project/PyNaCl/&amp;gt;`__ (for voice support)&#xA;&#xA;Please note that when installing voice support on Linux, you must install the following packages via your favourite package manager (e.g. ``apt``, ``dnf``, etc) before running the above commands:&#xA;&#xA;* libffi-dev (or ``libffi-devel`` on some systems)&#xA;* python-dev (e.g. ``python3.6-dev`` for Python 3.6)&#xA;&#xA;Quick Example&#xA;--------------&#xA;&#xA;.. code:: py&#xA;&#xA;    import discord&#xA;&#xA;    class MyClient(discord.Client):&#xA;        async def on_ready(self):&#xA;            print(&#39;Logged on as&#39;, self.user)&#xA;&#xA;        async def on_message(self, message):&#xA;            # don&#39;t respond to ourselves&#xA;            if message.author == self.user:&#xA;                return&#xA;&#xA;            if message.content == &#39;ping&#39;:&#xA;                await message.channel.send(&#39;pong&#39;)&#xA;&#xA;    intents = discord.Intents.default()&#xA;    intents.message_content = True&#xA;    client = MyClient(intents=intents)&#xA;    client.run(&#39;token&#39;)&#xA;&#xA;Bot Example&#xA;~~~~~~~~~~~~~&#xA;&#xA;.. code:: py&#xA;&#xA;    import discord&#xA;    from discord.ext import commands&#xA;&#xA;    intents = discord.Intents.default()&#xA;    intents.message_content = True&#xA;    bot = commands.Bot(command_prefix=&#39;&amp;gt;&#39;, intents=intents)&#xA;&#xA;    @bot.command()&#xA;    async def ping(ctx):&#xA;        await ctx.send(&#39;pong&#39;)&#xA;&#xA;    bot.run(&#39;token&#39;)&#xA;&#xA;You can find more examples in the examples directory.&#xA;&#xA;Links&#xA;------&#xA;&#xA;- `Documentation &amp;lt;https://discordpy.readthedocs.io/en/latest/index.html&amp;gt;`_&#xA;- `Official Discord Server &amp;lt;https://discord.gg/r3sSKJJ&amp;gt;`_&#xA;- `Discord API &amp;lt;https://discord.gg/discord-api&amp;gt;`_&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>