<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-08T01:38:11Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tiangolo/typer</title>
    <updated>2022-11-08T01:38:11Z</updated>
    <id>tag:github.com,2022-11-08:/tiangolo/typer</id>
    <link href="https://github.com/tiangolo/typer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Typer, build great CLIs. Easy to code. Based on Python type hints.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://typer.tiangolo.com&#34;&gt;&lt;img src=&#34;https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg?sanitize=true&#34; alt=&#34;Typer&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;Typer, build great CLIs. Easy to code. Based on Python type hints.&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tiangolo/typer/actions?query=workflow%3ATest&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/tiangolo/typer/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/tiangolo/typer/actions?query=workflow%3APublish&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/tiangolo/typer/workflows/Publish/badge.svg?sanitize=true&#34; alt=&#34;Publish&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coverage-badge.samuelcolvin.workers.dev/redirect/tiangolo/typer&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://coverage-badge.samuelcolvin.workers.dev/tiangolo/typer.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://pypi.org/project/typer&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/typer?color=%2334D058&amp;amp;label=pypi%20package&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://typer.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://typer.tiangolo.com&#34;&gt;https://typer.tiangolo.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tiangolo/typer&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tiangolo/typer&#34;&gt;https://github.com/tiangolo/typer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Typer is a library for building &lt;abbr title=&#34;command line interface, programs executed from a terminal&#34;&gt;CLI&lt;/abbr&gt; applications that users will &lt;strong&gt;love using&lt;/strong&gt; and developers will &lt;strong&gt;love creating&lt;/strong&gt;. Based on Python 3.6+ type hints.&lt;/p&gt; &#xA;&lt;p&gt;The key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive to write&lt;/strong&gt;: Great editor support. &lt;abbr title=&#34;also known as auto-complete, autocompletion, IntelliSense&#34;&gt;Completion&lt;/abbr&gt; everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to use&lt;/strong&gt;: It&#39;s easy to use for the final users. Automatic help, and automatic completion for all shells.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Short&lt;/strong&gt;: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start simple&lt;/strong&gt;: The simplest example adds only 2 lines of code to your app: &lt;strong&gt;1 import, 1 function call&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Grow large&lt;/strong&gt;: Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FastAPI of CLIs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fastapi.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png&#34; style=&#34;width: 20%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Typer&lt;/strong&gt; is &lt;a href=&#34;https://fastapi.tiangolo.com&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;FastAPI&lt;/a&gt;&#39;s little sibling.&lt;/p&gt; &#xA;&lt;p&gt;And it&#39;s intended to be the FastAPI of CLIs.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Python 3.6+&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Typer&lt;/strong&gt; stands on the shoulders of a giant. Its only internal dependency is &lt;a href=&#34;https://click.palletsprojects.com/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Click&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip install &#34;typer[all]&#34;&#xA;---&amp;gt; 100%&#xA;Successfully installed typer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: that will include &lt;a href=&#34;https://rich.readthedocs.io/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Rich&lt;/a&gt;. Rich is the recommended library to &lt;em&gt;display&lt;/em&gt; information on the terminal, it is optional, but when installed, it&#39;s deeply integrated into &lt;strong&gt;Typer&lt;/strong&gt; to display beautiful output.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h3&gt;The absolute minimum&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;main.py&lt;/code&gt; with:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import typer&#xA;&#xA;&#xA;def main(name: str):&#xA;    print(f&#34;Hello {name}&#34;)&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    typer.run(main)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run it&lt;/h3&gt; &#xA;&lt;p&gt;Run your application:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;// Run your application&#xA;$ python main.py&#xA;&#xA;// You get a nice error, you are missing NAME&#xA;&amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;Usage: &amp;lt;/font&amp;gt;main.py [OPTIONS] NAME&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;Try &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#44919F&#34;&amp;gt;&amp;amp;apos;main.py &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#44919F&#34;&amp;gt;&amp;lt;b&amp;gt;--help&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#44919F&#34;&amp;gt;&amp;amp;apos;&amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt; for help.&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#F92672&#34;&amp;gt;╭─ Error ───────────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#F92672&#34;&amp;gt;│&amp;lt;/font&amp;gt; Missing argument &amp;amp;apos;NAME&amp;amp;apos;.                          &amp;lt;font color=&#34;#F92672&#34;&amp;gt;│&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#F92672&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&#xA;&#xA;// You get a --help for free&#xA;$ python main.py --help&#xA;&#xA;&amp;lt;b&amp;gt; &amp;lt;/b&amp;gt;&amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;&amp;lt;b&amp;gt;Usage: &amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;b&amp;gt;main.py [OPTIONS] NAME                       &amp;lt;/b&amp;gt;&#xA;&amp;lt;b&amp;gt;                                                     &amp;lt;/b&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Arguments ───────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#F92672&#34;&amp;gt;*&amp;lt;/font&amp;gt;    name      &amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;&amp;lt;b&amp;gt;TEXT&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;  [default: None] &amp;lt;font color=&#34;#A6194C&#34;&amp;gt;[required]&amp;lt;/font&amp;gt;   │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Options ─────────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--install-completion&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;          Install completion  │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               for the current     │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               shell.              │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--show-completion&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;             Show completion for │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               the current shell,  │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               to copy it or       │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               customize the       │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               installation.       │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--help&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;                        Show this message   │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               and exit.           │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&#xA;// When you create a package you get ✨ auto-completion ✨ for free, installed with --install-completion&#xA;&#xA;// Now pass the NAME argument&#xA;$ python main.py Camila&#xA;&#xA;Hello Camila&#xA;&#xA;// It works! 🎉&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: auto-completion works when you create a Python package and run it with &lt;code&gt;--install-completion&lt;/code&gt; or when you use &lt;a href=&#34;https://typer.tiangolo.com/typer-cli/&#34; class=&#34;internal-link&#34; target=&#34;_blank&#34;&gt;Typer CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example upgrade&lt;/h2&gt; &#xA;&lt;p&gt;This was the simplest example possible.&lt;/p&gt; &#xA;&lt;p&gt;Now let&#39;s see one a bit more complex.&lt;/p&gt; &#xA;&lt;h3&gt;An example with two subcommands&lt;/h3&gt; &#xA;&lt;p&gt;Modify the file &lt;code&gt;main.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;typer.Typer()&lt;/code&gt; app, and create two subcommands with their parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import typer&#xA;&#xA;app = typer.Typer()&#xA;&#xA;&#xA;@app.command()&#xA;def hello(name: str):&#xA;    print(f&#34;Hello {name}&#34;)&#xA;&#xA;&#xA;@app.command()&#xA;def goodbye(name: str, formal: bool = False):&#xA;    if formal:&#xA;        print(f&#34;Goodbye Ms. {name}. Have a good day.&#34;)&#xA;    else:&#xA;        print(f&#34;Bye {name}!&#34;)&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    app()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explicitly create a &lt;code&gt;typer.Typer&lt;/code&gt; app. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The previous &lt;code&gt;typer.run&lt;/code&gt; actually creates one implicitly for you.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add two subcommands with &lt;code&gt;@app.command()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Execute the &lt;code&gt;app()&lt;/code&gt; itself, as if it was a function (instead of &lt;code&gt;typer.run&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run the upgraded example&lt;/h3&gt; &#xA;&lt;p&gt;Check the new help:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python main.py --help&#xA;&#xA;&amp;lt;b&amp;gt; &amp;lt;/b&amp;gt;&amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;&amp;lt;b&amp;gt;Usage: &amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;b&amp;gt;main.py [OPTIONS] COMMAND [ARGS]...          &amp;lt;/b&amp;gt;&#xA;&amp;lt;b&amp;gt;                                                     &amp;lt;/b&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Options ─────────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--install-completion&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;          Install completion  │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               for the current     │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               shell.              │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--show-completion&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;             Show completion for │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               the current shell,  │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               to copy it or       │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               customize the       │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               installation.       │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--help&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;                        Show this message   │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                               and exit.           │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Commands ────────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;goodbye                                     &amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;      │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;hello                                       &amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;      │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&#xA;// You have 2 subcommands (the 2 functions): goodbye and hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Now check the help for the &lt;code&gt;hello&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python main.py hello --help&#xA;&#xA;&amp;lt;b&amp;gt; &amp;lt;/b&amp;gt;&amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;&amp;lt;b&amp;gt;Usage: &amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;b&amp;gt;main.py hello [OPTIONS] NAME                 &amp;lt;/b&amp;gt;&#xA;&amp;lt;b&amp;gt;                                                     &amp;lt;/b&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Arguments ───────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#F92672&#34;&amp;gt;*&amp;lt;/font&amp;gt;    name      &amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;&amp;lt;b&amp;gt;TEXT&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;  [default: None] &amp;lt;font color=&#34;#A6194C&#34;&amp;gt;[required]&amp;lt;/font&amp;gt;   │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Options ─────────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--help&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;          Show this message and exit.       │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;And now check the help for the &lt;code&gt;goodbye&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ python main.py goodbye --help&#xA;&#xA;&amp;lt;b&amp;gt; &amp;lt;/b&amp;gt;&amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;&amp;lt;b&amp;gt;Usage: &amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;&amp;lt;b&amp;gt;main.py goodbye [OPTIONS] NAME               &amp;lt;/b&amp;gt;&#xA;&amp;lt;b&amp;gt;                                                     &amp;lt;/b&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Arguments ───────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#F92672&#34;&amp;gt;*&amp;lt;/font&amp;gt;    name      &amp;lt;font color=&#34;#F4BF75&#34;&amp;gt;&amp;lt;b&amp;gt;TEXT&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;  [default: None] &amp;lt;font color=&#34;#A6194C&#34;&amp;gt;[required]&amp;lt;/font&amp;gt;   │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╭─ Options ─────────────────────────────────────────╮&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--formal&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;    &amp;lt;font color=&#34;#AE81FF&#34;&amp;gt;&amp;lt;b&amp;gt;--no-formal&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;      [default: no-formal] │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│ &amp;lt;/font&amp;gt;&amp;lt;font color=&#34;#A1EFE4&#34;&amp;gt;&amp;lt;b&amp;gt;--help&amp;lt;/b&amp;gt;&amp;lt;/font&amp;gt;                       Show this message    │&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;│                              and exit.            │&amp;lt;/font&amp;gt;&#xA;&amp;lt;font color=&#34;#A5A5A1&#34;&amp;gt;╰───────────────────────────────────────────────────╯&amp;lt;/font&amp;gt;&#xA;&#xA;// Automatic --formal and --no-formal for the bool option 🎉&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Now you can try out the new command line application:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;// Use it with the hello command&#xA;&#xA;$ python main.py hello Camila&#xA;&#xA;Hello Camila&#xA;&#xA;// And with the goodbye command&#xA;&#xA;$ python main.py goodbye Camila&#xA;&#xA;Bye Camila!&#xA;&#xA;// And with --formal&#xA;&#xA;$ python main.py goodbye --formal Camila&#xA;&#xA;Goodbye Ms. Camila. Have a good day.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Recap&lt;/h3&gt; &#xA;&lt;p&gt;In summary, you declare &lt;strong&gt;once&lt;/strong&gt; the types of parameters (&lt;em&gt;CLI arguments&lt;/em&gt; and &lt;em&gt;CLI options&lt;/em&gt;) as function parameters.&lt;/p&gt; &#xA;&lt;p&gt;You do that with standard modern Python types.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to learn a new syntax, the methods or classes of a specific library, etc.&lt;/p&gt; &#xA;&lt;p&gt;Just standard &lt;strong&gt;Python 3.6+&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, for an &lt;code&gt;int&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;total: int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for a &lt;code&gt;bool&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;force: bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And similarly for &lt;strong&gt;files&lt;/strong&gt;, &lt;strong&gt;paths&lt;/strong&gt;, &lt;strong&gt;enums&lt;/strong&gt; (choices), etc. And there are tools to create &lt;strong&gt;groups of subcommands&lt;/strong&gt;, add metadata, extra &lt;strong&gt;validation&lt;/strong&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You get&lt;/strong&gt;: great editor support, including &lt;strong&gt;completion&lt;/strong&gt; and &lt;strong&gt;type checks&lt;/strong&gt; everywhere.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Your users get&lt;/strong&gt;: automatic &lt;strong&gt;&lt;code&gt;--help&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;auto-completion&lt;/strong&gt; in their terminal (Bash, Zsh, Fish, PowerShell) when they install your package or when using &lt;a href=&#34;https://typer.tiangolo.com/typer-cli/&#34; class=&#34;internal-link&#34; target=&#34;_blank&#34;&gt;Typer CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a more complete example including more features, see the &lt;a href=&#34;https://typer.tiangolo.com/tutorial/&#34;&gt;Tutorial - User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Optional Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Typer uses &lt;a href=&#34;https://click.palletsprojects.com/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Click&lt;/a&gt; internally. That&#39;s the only dependency.&lt;/p&gt; &#xA;&lt;p&gt;But you can also install extras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rich.readthedocs.io/en/stable/index.html&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;rich&lt;/code&gt;&lt;/a&gt;: and Typer will show nicely formatted errors automatically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sarugaku/shellingham&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;shellingham&lt;/code&gt;&lt;/a&gt;: and Typer will automatically detect the current shell when installing completion. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;code&gt;shellingham&lt;/code&gt; you can just use &lt;code&gt;--install-completion&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Without &lt;code&gt;shellingham&lt;/code&gt;, you have to pass the name of the shell to install completion for, e.g. &lt;code&gt;--install-completion bash&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;typer&lt;/code&gt; with &lt;code&gt;rich&lt;/code&gt; and &lt;code&gt;shellingham&lt;/code&gt; with &lt;code&gt;pip install typer[all]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qu3vipon/python-ddd</title>
    <updated>2022-11-08T01:38:11Z</updated>
    <id>tag:github.com,2022-11-08:/qu3vipon/python-ddd</id>
    <link href="https://github.com/qu3vipon/python-ddd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python DDD pattern example using FastAPI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Python Domain-Driven-Design(DDD) Example&lt;/h1&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve adopted the DDD pattern for my recent FastAPI project. DDD makes it easier to implement complex domain problems. Improved readability and easy code correction have significantly improved productivity. As a result, stable project management has become possible. I&#39;m very satisfied with it, so I&#39;d like to share this experience and knowledge.&lt;/p&gt; &#xA;&lt;h3&gt;Why DDD?&lt;/h3&gt; &#xA;&lt;p&gt;Using DDD makes it easy to maintain collaboration with domain experts, not only engineers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is possible to prevent the mental model and the actual software from being dualized.&lt;/li&gt; &#xA; &lt;li&gt;Business logic is easy to manage.&lt;/li&gt; &#xA; &lt;li&gt;Infrastructure change is flexible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Objective&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Let&#39;s create a simple hotel reservation system and see how each component of DDD is implemented.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t go too deep into topics like event sourcing.&lt;/li&gt; &#xA; &lt;li&gt;Considering the running curve, this project consists only of essential DDD components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.10+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;h3&gt;ERD&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTES: The diagram below represents only the database tables.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/docs/image/erd.png&#34; alt=&#34;erd&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bounded Context&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/docs/image/bounded-context.png&#34; alt=&#34;bounded-context&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display(Handling tasks related to the hotel room display) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List Rooms&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Reception(Handling tasks related to the hotel room reservation) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make a reservation&lt;/li&gt; &#xA;   &lt;li&gt;Change the reservation details&lt;/li&gt; &#xA;   &lt;li&gt;Cancel a reservation&lt;/li&gt; &#xA;   &lt;li&gt;Check-in &amp;amp; Check-out&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reservation and reception can also be isolated, but let&#39;s say that reception handles it altogether for now.&lt;/p&gt; &#xA;&lt;h3&gt;Project Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tree&#34;&gt;src&#xA;├── display&#xA;│   ├── application&#xA;│   │   ├── dto&#xA;│   │   │   ├── request&#xA;│   │   │   └── response&#xA;│   │   ├── exception&#xA;│   │   └── use_case&#xA;│   │       ├── query&#xA;│   │       └── command&#xA;│   ├── domain&#xA;│   │   ├── entity&#xA;│   │   ├── service&#xA;│   │   └── value_object&#xA;│   ├── infra&#xA;│   │   ├── repository&#xA;│   │   └── external_apis&#xA;│   └── presentation&#xA;│       ├── grpc&#xA;│       └── rest&#xA;├── reception&#xA;│   ├── application&#xA;│   ├── domain&#xA;│   ├── infra&#xA;│   └── presentation&#xA;└── shared_kernel&#xA;    ├── application&#xA;    ├── domain&#xA;    └── infra&#xA;        ├── database&#xA;        ├── fastapi&#xA;        └── log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DDD Components&lt;/h3&gt; &#xA;&lt;h4&gt;1. Entity: Definition&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dataclasses import dataclass, field&#xA;&#xA;&#xA;class Entity:&#xA;    id: int = field(init=False)&#xA;  &#xA;    def __eq__(self, other: Any) -&amp;gt; bool:&#xA;        if isinstance(other, type(self)):&#xA;            return self.id == other.id&#xA;        return False&#xA;  &#xA;    def __hash__(self):&#xA;        return hash(self.id)&#xA;&#xA;&#xA;class AggregateRoot(Entity):&#xA;    pass&#xA;&#xA;&#xA;@dataclass(eq=False, slots=True)&#xA;class Reservation(AggregateRoot):&#xA;    room: Room&#xA;    reservation_number: ReservationNumber&#xA;    status: ReservationStatus&#xA;    date_in: datetime&#xA;    date_out: datetime&#xA;    guest: Guest&#xA;    &#xA;    _number: str = field(init=False)&#xA;    _status: str = field(init=False)&#xA;    _guest_name: str = field(init=False)&#xA;    _guest_mobile: Optional[str] = field(init=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity mix-in &lt;br&gt; The entity is an object that have a distinct identity. I will implement &lt;code&gt;__eq__()&lt;/code&gt; and &lt;code&gt;__hash__()&lt;/code&gt;, to use it as a mix-in for dataclass.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AggregateRoot mix-in &lt;br&gt; A DDD aggregate is a cluster of domain objects that can be treated as a single unit. An aggregate root is an entry point of an aggregate. Any references from outside the aggregate should only go to the aggregate root. The root can thus ensure the integrity of the aggregate as a whole. I will define an empty class called &lt;code&gt;AggregateRoot&lt;/code&gt; and explicitly mark it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Entity Implementation &lt;br&gt; To use &lt;code&gt;__eq__()&lt;/code&gt; from &lt;code&gt;Entity&lt;/code&gt; mix-in, add &lt;code&gt;eq=False&lt;/code&gt;. From Python 3.10, &lt;code&gt;slots=True&lt;/code&gt; makes dataclass more memory-efficient.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Value Object &lt;br&gt; With sqlalchemy, you can use value objects within entity when reading &amp;amp; saving data from a repository. I will introduce the details later.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Entity: Life Cycle&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass(eq=False, slots=True)&#xA;class Reservation(AggregateRoot):&#xA;    # ...&#xA;&#xA;    @classmethod&#xA;    def make(cls, room: Room, date_in: datetime, date_out: datetime, guest: Guest) -&amp;gt; Reservation:&#xA;        room.reserve()&#xA;        return cls(&#xA;            room=room,&#xA;            date_in=date_in,&#xA;            date_out=date_out,&#xA;            guest=guest,&#xA;            reservation_number=ReservationNumber.generate(),&#xA;            status=ReservationStatus.IN_PROGRESS,&#xA;        )&#xA;&#xA;    def cancel(self):&#xA;        if not self.status.in_progress():&#xA;            raise ReservationStatusError&#xA;  &#xA;        self.status = ReservationStatus.CANCELLED&#xA;  &#xA;    def check_in(self):&#xA;        # ...&#xA;  &#xA;    def check_out(self):&#xA;        # ...&#xA;  &#xA;    def change_guest(self, guest: Guest):&#xA;        # ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By implementing the method according to the entity&#39;s life cycle, you can expect how it evolves when reading it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Creation &lt;br&gt; Declare a &lt;code&gt;class method&lt;/code&gt; and use it when creating an entity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Changes &lt;br&gt; Declare an &lt;code&gt;instance method&lt;/code&gt; and use it when changing an entity.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3. Entity: Table Mapping&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: This is the most beautiful part of implementing DDD with sqlalchemy.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/src/shared_kernel/infra/database/orm.py&#34;&gt;ddd_hotel/database/orm.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sqlalchemy import MetaData, Table, Column, Integer, String, Text, ForeignKey, DateTime&#xA;from sqlalchemy.orm import registry&#xA;&#xA;metadata = MetaData()&#xA;mapper_registry = registry()&#xA;&#xA;room_table = Table(&#xA;  &#34;hotel_room&#34;,&#xA;  metadata,&#xA;  Column(&#34;id&#34;, Integer, primary_key=True, autoincrement=True),&#xA;  Column(&#34;number&#34;, String(20), nullable=False),&#xA;  Column(&#34;status&#34;, String(20), nullable=False),&#xA;  Column(&#34;image_url&#34;, String(200), nullable=False),&#xA;  Column(&#34;description&#34;, Text, nullable=True),&#xA;  UniqueConstraint(&#34;number&#34;, name=&#34;uix_hotel_room_number&#34;),&#xA;)&#xA;&#xA;reservation_table = Table(&#xA;  &#34;room_reservation&#34;,&#xA;  metadata,&#xA;  Column(&#34;id&#34;, Integer, primary_key=True, autoincrement=True),&#xA;  Column(&#34;room_id&#34;, Integer, ForeignKey(&#34;hotel_room.id&#34;), nullable=False),&#xA;  Column(&#34;number&#34;, String(20), nullable=False),&#xA;  Column(&#34;status&#34;, String(20), nullable=False),&#xA;  Column(&#34;date_in&#34;, DateTime(timezone=True)),&#xA;  Column(&#34;date_out&#34;, DateTime(timezone=True)),&#xA;  Column(&#34;guest_mobile&#34;, String(20), nullable=False),&#xA;  Column(&#34;guest_name&#34;, String(50), nullable=True),&#xA;)&#xA;&#xA;&#xA;def init_orm_mappers():&#xA;  from reception.domain.entity.room import Room as ReceptionRoomEntity&#xA;  from reception.domain.entity.reservation import Reservation as ReceptionReservationEntity&#xA;&#xA;  mapper_registry.map_imperatively(&#xA;    ReceptionRoomEntity,&#xA;    room_table,&#xA;    properties={&#xA;      &#34;_status&#34;: room_table.c.status,&#xA;      &#34;status&#34;: composite(RoomStatus.from_value, room_table.c.status),&#xA;    }&#xA;  )&#xA;  mapper_registry.map_imperatively(&#xA;    ReceptionReservationEntity,&#xA;    reservation_table,&#xA;    properties={&#xA;      &#34;_number&#34;: reservation_table.c.number,&#xA;      &#34;_status&#34;: reservation_table.c.status,&#xA;      &#34;_guest_mobile&#34;: reservation_table.c.guest_mobile,&#xA;      &#34;_guest_name&#34;: reservation_table.c.guest_name,&#xA;      &#34;room&#34;: relationship(Room, backref=&#34;reservations&#34;, order_by=reservation_table.c.id.desc),&#xA;      &#34;reservation_number&#34;: composite(ReservationNumber.from_value, reservation_table.c.number),&#xA;      &#34;status&#34;: composite(ReservationStatus.from_value, reservation_table.c.status),&#xA;      &#34;guest&#34;: composite(Guest, reservation_table.c.guest_mobile, reservation_table.c.guest_name),&#xA;    }&#xA;  )&#xA;&#xA;  from display.domain.entity.room import Room as DisplayRoomEntity&#xA;&#xA;  mapper_registry.map_imperatively(&#xA;    DisplayRoomEntity,&#xA;    room_table,&#xA;    properties={&#xA;      &#34;_status&#34;: room_table.c.status,&#xA;      &#34;status&#34;: composite(RoomStatus.from_value, room_table.c.status),&#xA;    }&#xA;  )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# call this after app running&#xA;init_orm_mappers()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because entities do not need to know the implementation of the database table, let&#39;s use sqlalchemy&#39;s &lt;a href=&#34;https://docs.sqlalchemy.org/en/14/orm/mapping_styles.html#imperative-mapping&#34;&gt;imperative mapping&lt;/a&gt; to separate entity definitions and table definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass(eq=False, slots=True)&#xA;class Room(Entity):&#xA;    number: str&#xA;    status: Optional[RoomStatus]&#xA;  &#xA;    _status: str = field(init=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Entities only need to use logically required data among the columns defined in the table. For example, in the &lt;code&gt;reservation&lt;/code&gt; domain, you don&#39;t need to know the &lt;code&gt;image&lt;/code&gt; of the &lt;code&gt;room&lt;/code&gt;, so only &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; is defined in the &lt;code&gt;room&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;4. Value Object&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydantic import constr&#xA;&#xA;&#xA;mobile_type = constr(regex=r&#34;\+[0-9]{2,3}-[0-9]{2}-[0-9]{4}-[0-9]{4}&#34;)&#xA;&#xA;@dataclass(slots=True)&#xA;class Guest(ValueObject):&#xA;    mobile: mobile_type&#xA;    name: Optional[str] = None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A value object is an object that matter only as the combination of its attributes. Guest A&#39;s name and mobile should be treated as a single unit, so make it a value object.&lt;/p&gt; &#xA;&lt;p&gt;Using sqlalchemy&#39;s &lt;a href=&#34;https://docs.sqlalchemy.org/en/14/orm/composites.html#composite-column-types&#34;&gt;composite column type&lt;/a&gt;, it allows you to implement value objects by changing columns to an object that fits your needs when you load data.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s define the mix-in as follows and inherit it when implementing a value object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ValueObject:&#xA;    def __composite_values__(self):&#xA;        return self.value,&#xA;  &#xA;    @classmethod&#xA;    def from_value(cls, value: Any) -&amp;gt; Optional[ValueObjectType]:&#xA;        if isinstance(cls, EnumMeta):&#xA;            for item in cls:&#xA;                if item.value == value:&#xA;                    return item&#xA;            return None&#xA;        else:&#xA;            return cls(value=value)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you define the &lt;code&gt;__composite_values_()&lt;/code&gt; method, sqlalchemy separates the object and puts them in the columns when you save the data.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: The , in the return of &lt;code&gt;__composite_value__()&lt;/code&gt; is not a typo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class RoomStatus(ValueObject, str, Enum):&#xA;    AVAILABLE = &#34;AVAILABLE&#34;&#xA;    RESERVED = &#34;RESERVED&#34;&#xA;    OCCUPIED = &#34;OCCUPIED&#34;&#xA;&#xA;&#xA;@dataclass(slots=True)&#xA;class ReservationNumber(ValueObject):&#xA;    DATETIME_FORMAT: ClassVar[str] = &#34;%y%m%d%H%M%S&#34;&#xA;    RANDOM_STR_LENGTH: ClassVar[int] = 7&#xA;  &#xA;    value: str&#xA;&#xA;    @classmethod&#xA;    def generate(cls) -&amp;gt; ReservationNumber:&#xA;        time_part: str = datetime.utcnow().strftime(cls.DATETIME_FORMAT)&#xA;        random_strings: str = &#39;&#39;.join(&#xA;          random.choice(string.ascii_uppercase + string.digits) for _ in range(cls.RANDOM_STR_LENGTH)&#xA;        )&#xA;        return cls(value=time_part + &#34;:&#34; + random_strings)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ReservationNumber&lt;/code&gt; intentionally used the name &lt;code&gt;value&lt;/code&gt; for a single attribute to leverage &lt;code&gt;__composite_values__()&lt;/code&gt; in &lt;code&gt;ValueObject&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@dataclass(slots=True)&#xA;class Guest(ValueObject):&#xA;    mobile: mobile_type&#xA;    name: Optional[str] = None&#xA;&#xA;    def __composite_values__(self):&#xA;        return self.mobile, self.name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a value object consists of more than one column, you must override the &lt;code&gt;__composite_values__()&lt;/code&gt; as shown above.&lt;/p&gt; &#xA;&lt;h4&gt;Dependency Injection&lt;/h4&gt; &#xA;&lt;p&gt;FastAPI&#39;s &lt;code&gt;Depends&lt;/code&gt; makes it easy to implement &lt;strong&gt;Dependency Injection&lt;/strong&gt; between different layers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/src/reception/presentation/rest/reception.py&#34;&gt;presentation/rest/reception.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@router.get(&#34;/reservations/{reservation_number}&#34;)&#xA;def get_reservation(&#xA;    reservation_number: str,&#xA;    reservation_query: ReservationQueryUseCase = Depends(ReservationQueryUseCase),&#xA;):&#xA;    try:&#xA;        reservation: Reservation = reservation_query.get_reservation(reservation_number=reservation_number)&#xA;    except ReservationNotFoundError as e:&#xA;        raise HTTPException(&#xA;            status_code=status.HTTP_404_NOT_FOUND,&#xA;            detail=e.message,&#xA;        )&#xA;    return ReservationResponse(&#xA;        detail=&#34;ok&#34;,&#xA;        result=ReservationDTO.build_result(reservation=reservation),&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/src/reception/application/use_case/query.py&#34;&gt;application/use_case/query.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ReservationQueryUseCase:&#xA;    def __init__(&#xA;        self,&#xA;        reservation_repo: ReservationRDBRepository = Depends(ReservationRDBRepository),&#xA;    ):&#xA;        self.reservation_repo = reservation_repo&#xA;&#xA;    def get_reservation(self, reservation_number: str) -&amp;gt; Reservation:&#xA;        reservation_number = ReservationNumber.from_value(reservation_number)&#xA;&#xA;        reservation: Optional[Reservation] = (&#xA;            self.reservation_repo.get_reservation_by_reservation_number(reservation_number=reservation_number)&#xA;        )&#xA;        if not reservation:&#xA;            raise ReservationNotFoundError&#xA;&#xA;        return reservation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/src/reception/infra/repository.py&#34;&gt;infra/repository/repository.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ReservationRDBRepository(RDBRepository):&#xA;    def get_reservation_by_reservation_number(self, reservation_number: ReservationNumber) -&amp;gt; Optional[Reservation]:&#xA;        return self.session.query(Reservation).filter_by(reservation_number=reservation_number).first()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;DTO(Data Transfer Object)&lt;/h4&gt; &#xA;&lt;p&gt;Pydantic makes it easy to implement the DTO used for request and response.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/src/reception/application/dto/request.py&#34;&gt;application/dto/request.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class CreateReservationRequest(BaseModel):&#xA;    room_number: str&#xA;    date_in: datetime&#xA;    date_out: datetime&#xA;    guest_mobile: mobile_type&#xA;    guest_name: str | None = None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qu3vipon/python-ddd/main/src/reception/application/dto/response.py&#34;&gt;application/dto/response.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class ReservationDTO(BaseModel):&#xA;    room: RoomDTO&#xA;    reservation_number: str&#xA;    status: ReservationStatus&#xA;    date_in: datetime&#xA;    date_out: datetime&#xA;    guest: GuestDTO&#xA;&#xA;    @classmethod&#xA;    def build_result(cls, reservation: Reservation) -&amp;gt; ReservationDTO:&#xA;        return cls(&#xA;            room=RoomDTO.from_entity(reservation.room),&#xA;            reservation_number=reservation.reservation_number.value,&#xA;            status=reservation.status,&#xA;            date_in=reservation.date_in,&#xA;            date_out=reservation.date_out,&#xA;            guest=GuestDTO.from_entity(reservation.guest),&#xA;        )&#xA;&#xA;class ReservationResponse(BaseResponse):&#xA;    result: ReservationDTO&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run server&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ uvicorn shared_kernel.infra.fastapi.main:app --reload&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>otto-de/recsys-dataset</title>
    <updated>2022-11-08T01:38:11Z</updated>
    <id>tag:github.com,2022-11-08:/otto-de/recsys-dataset</id>
    <link href="https://github.com/otto-de/recsys-dataset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛍 A real-world e-commerce dataset for multi-objective recommender systems research.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;OTTO Recommender Systems Dataset&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/otto-de/recsys-dataset&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/otto-de/recsys-dataset.svg?style=for-the-badge&amp;amp;color=yellow&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/otto-de/recsys-dataset?style=for-the-badge&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.kaggle.com/competitions/otto-recommender-system&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kaggle-competition-20BEFF?style=for-the-badge&amp;amp;logo=kaggle&#34; alt=&#34;Kaggle Competition&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.otto.de/jobs/technology/ueberblick/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/otto-jobs-F00020?style=for-the-badge&amp;amp;logo=otto&#34; alt=&#34;OTTO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;A real-world e-commerce dataset for multi-objective recommender systems research.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/.readme/header.png&#34; width=&#34;100%&#34;&gt; &#xA; &lt;hr&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/#get-the-data&#34;&gt;Get the Data&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/#data-format&#34;&gt;Data Format&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/#evaluation&#34;&gt;Evaluation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/#faq&#34;&gt;FAQ&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The &lt;code&gt;OTTO&lt;/code&gt; session dataset is a large-scale dataset intended for multi-objective recommendation research. We collected the data from anonymized behavior logs of the &lt;a href=&#34;https://otto.de&#34;&gt;OTTO&lt;/a&gt; webshop and the app. The mission of this dataset is to serve as a benchmark for session-based recommendations and foster research in the multi-objective and session-based recommender systems area. We also launched a &lt;a href=&#34;https://www.kaggle.com/competitions/otto-recommender-system&#34;&gt;Kaggle competition&lt;/a&gt; with the goal to predict clicks, cart additions, and orders based on previous events in a user session.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;12M real-world anonymized user sessions&lt;/li&gt; &#xA; &lt;li&gt;220M events, consiting of &lt;code&gt;clicks&lt;/code&gt;, &lt;code&gt;carts&lt;/code&gt; and &lt;code&gt;orders&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;1.8M unique articles in the catalogue&lt;/li&gt; &#xA; &lt;li&gt;Ready to use data in &lt;code&gt;.jsonl&lt;/code&gt; format&lt;/li&gt; &#xA; &lt;li&gt;Evaluation metrics for multi-objective optimization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dataset Statistics&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Dataset&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;#sessions&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;#items&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;#events&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;#clicks&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;#carts&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;#orders&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Density [%]&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Train&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;12.899.779&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.855.603&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;216.716.096&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;194.720.954&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16.896.191&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.098.951&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.0005&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.671.803&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;std&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;min&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;50%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;75%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;90%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;95%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;max&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Train #events per session&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;16.80&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;33.58&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;39&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;68&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;500&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test #events per session&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;#events per session histogram (90th percentile)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/.readme/events_per_session_p90.svg?sanitize=true&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;std&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;min&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;50%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;75%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;90%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;95%&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;max&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Train #events per item&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;116.79&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;728.85&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;183&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;398&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;129004&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Test #events per item&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;TBA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;#events per item histogram (90th percentile)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/.readme/events_per_item_p90.svg?sanitize=true&#34; width=&#34;800px&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The full test set is not yet available. We will update the tables once the Kaggle competition is over and the test set is released.&lt;/p&gt; &#xA;&lt;h2&gt;Get the Data&lt;/h2&gt; &#xA;&lt;p&gt;The data is stored on the &lt;a href=&#34;https://www.kaggle.com/competitions/otto-recommender-system/data&#34;&gt;Kaggle&lt;/a&gt; platform and can be downloaded using their API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;kaggle competitions download -c otto-recommender-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Format&lt;/h2&gt; &#xA;&lt;p&gt;The sessions are stored as &lt;code&gt;JSON&lt;/code&gt; objects containing a unique &lt;code&gt;session&lt;/code&gt; ID and a list of &lt;code&gt;events&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;    &#34;session&#34;: 42,&#xA;    &#34;events&#34;: [&#xA;        { &#34;aid&#34;: 0, &#34;ts&#34;: 1661200010000, &#34;type&#34;: &#34;clicks&#34; },&#xA;        { &#34;aid&#34;: 1, &#34;ts&#34;: 1661200020000, &#34;type&#34;: &#34;clicks&#34; },&#xA;        { &#34;aid&#34;: 2, &#34;ts&#34;: 1661200030000, &#34;type&#34;: &#34;clicks&#34; },&#xA;        { &#34;aid&#34;: 2, &#34;ts&#34;: 1661200040000, &#34;type&#34;: &#34;carts&#34;  },&#xA;        { &#34;aid&#34;: 3, &#34;ts&#34;: 1661200050000, &#34;type&#34;: &#34;clicks&#34; },&#xA;        { &#34;aid&#34;: 3, &#34;ts&#34;: 1661200060000, &#34;type&#34;: &#34;carts&#34;  },&#xA;        { &#34;aid&#34;: 4, &#34;ts&#34;: 1661200070000, &#34;type&#34;: &#34;clicks&#34; },&#xA;        { &#34;aid&#34;: 2, &#34;ts&#34;: 1661200080000, &#34;type&#34;: &#34;orders&#34; },&#xA;        { &#34;aid&#34;: 3, &#34;ts&#34;: 1661200080000, &#34;type&#34;: &#34;orders&#34; }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;session&lt;/code&gt; - the unique session id&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;events&lt;/code&gt; - the time ordered sequence of events in the session &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;aid&lt;/code&gt; - the article id (product code) of the associated event&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ts&lt;/code&gt; - the Unix timestamp of the event&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;type&lt;/code&gt; - the event type, i.e., whether a product was clicked, added to the user&#39;s cart, or ordered during the session&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Submission Format&lt;/h2&gt; &#xA;&lt;p&gt;For each &lt;code&gt;session&lt;/code&gt; id and &lt;code&gt;type&lt;/code&gt; combination in the test set, you must predict the &lt;code&gt;aid&lt;/code&gt; values in the &lt;code&gt;label&lt;/code&gt; column, which is space delimited. You can predict up to 20 &lt;code&gt;aid&lt;/code&gt; values per row. The file should contain a header and have the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-CSV&#34;&gt;session_type,labels&#xA;42_clicks,0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19&#xA;42_carts,0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19&#xA;42_orders,0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Submissions are evaluated on &lt;a href=&#34;https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Recall&#34;&gt;Recall&lt;/a&gt;@20 for each action &lt;code&gt;type&lt;/code&gt;, and the three recall values are weight-averaged:&lt;/p&gt; &#xA;&lt;p&gt;$$ score = 0.10 \cdot R_{clicks} + 0.30 \cdot R_{carts} + 0.60 \cdot R_{orders} $$&lt;/p&gt; &#xA;&lt;p&gt;where $R$ is defined as&lt;/p&gt; &#xA;&lt;p&gt;$$ R_{type} = \frac{ \sum\limits_{i=1}^N | \{ \text{predicted aids} \}_{i, type} \cap \{ \text{ground truth aids} \}_{i, type} | }{ \sum\limits_{i=1}^N \min{( 20, | \{ \text{ground truth aids} \}_{i, type} | )}} $$&lt;/p&gt; &#xA;&lt;p&gt;and $N$ is the total number of sessions in the test set, and $\text{predicted aids}$ are the predictions for each session-type (e.g., each row in the submission file) &lt;em&gt;truncated after the first 20 predictions&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For each &lt;code&gt;session&lt;/code&gt; in the test data, your task it to predict the &lt;code&gt;aid&lt;/code&gt; values for each &lt;code&gt;type&lt;/code&gt; that occur after the last timestamp &lt;code&gt;ts&lt;/code&gt; the test session. In other words, the test data contains sessions truncated by timestamp, and you are to predict what occurs after the point of truncation.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;code&gt;clicks&lt;/code&gt; there is only a single ground truth value for each session, which is the next &lt;code&gt;aid&lt;/code&gt; clicked during the session (although you can still predict up to 20 &lt;code&gt;aid&lt;/code&gt; values). The ground truth for &lt;code&gt;carts&lt;/code&gt; and &lt;code&gt;orders&lt;/code&gt; contains all &lt;code&gt;aid&lt;/code&gt; values that were added to a cart and ordered respectively during the session.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/.readme/ground_truth.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Click here to see the labeled session as &lt;code&gt;JSON&lt;/code&gt; from above&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;[&#xA;    {&#xA;        &#34;aid&#34;: 0,&#xA;        &#34;ts&#34;: 1661200010000,&#xA;        &#34;type&#34;: &#34;clicks&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;clicks&#34;: 1,&#xA;            &#34;carts&#34;: [2, 3],&#xA;            &#34;orders&#34;: [2, 3]&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;aid&#34;: 1,&#xA;        &#34;ts&#34;: 1661200020000,&#xA;        &#34;type&#34;: &#34;clicks&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;clicks&#34;: 2,&#xA;            &#34;carts&#34;: [2, 3],&#xA;            &#34;orders&#34;: [2, 3]&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;aid&#34;: 2,&#xA;        &#34;ts&#34;: 1661200030000,&#xA;        &#34;type&#34;: &#34;clicks&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;clicks&#34;: 3,&#xA;            &#34;carts&#34;: [2, 3],&#xA;            &#34;orders&#34;: [2, 3]&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;aid&#34;: 2,&#xA;        &#34;ts&#34;: 1661200040000,&#xA;        &#34;type&#34;: &#34;carts&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;clicks&#34;: 3,&#xA;            &#34;carts&#34;: [3],&#xA;            &#34;orders&#34;: [2, 3]&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;aid&#34;: 3,&#xA;        &#34;ts&#34;: 1661200050000,&#xA;        &#34;type&#34;: &#34;clicks&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;clicks&#34;: 4,&#xA;            &#34;carts&#34;: [3],&#xA;            &#34;orders&#34;: [2, 3]&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;aid&#34;: 3,&#xA;        &#34;ts&#34;: 1661200060000,&#xA;        &#34;type&#34;: &#34;carts&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;clicks&#34;: 4,&#xA;            &#34;orders&#34;: [2, 3]&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;aid&#34;: 4,&#xA;        &#34;ts&#34;: 1661200070000,&#xA;        &#34;type&#34;: &#34;clicks&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;orders&#34;: [2, 3]&#xA;        }&#xA;    },&#xA;    {&#xA;        &#34;aid&#34;: 2,&#xA;        &#34;ts&#34;: 1661200080000,&#xA;        &#34;type&#34;: &#34;orders&#34;,&#xA;        &#34;labels&#34;: {&#xA;            &#34;orders&#34;: [3]&#xA;        }&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;To create these labels from unlabeled sessions, you can use the function, &lt;code&gt;ground_truth&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/src/labels.py&#34;&gt;labels.py&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Train/Test Split&lt;/h3&gt; &#xA;&lt;p&gt;Since we want to evaluate a model&#39;s performance in the future, as would be the case when we deploy such a system in an actual webshop, we choose a time-based validation split. Our train set consists of observations from 4 weeks, while the test set contains user sessions from the following week. Furthermore, we trimmed train sessions overlapping with the test period, as depicted in the following diagram, to prevent information leakage from the future:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/.readme/train_test_split.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;We will publish the final test set after the Kaggle &lt;a href=&#34;https://www.kaggle.com/competitions/otto-recommender-system&#34;&gt;competition&lt;/a&gt; is finalized. However, until then, participants of the competition can create their truncated test sets from the training sessions and use this to evaluate their models offline. For this purpose, we include a Python script called &lt;code&gt;testset.py&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;pipenv run python -m src.testset --train-set train.jsonl --days 2 --output-path &#39;out/&#39; --seed 42 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Metrics Calculation&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;evalute.py&lt;/code&gt; script to calculate the Recall@20 for each action type and the weighted average Recall@20 for your submission:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;pipenv run python -m src.evaluate --test-labels test_labels.jsonl --predictions predictions.csv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How is a user &lt;code&gt;session&lt;/code&gt; defined?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A session is all activity by a single user either in the train or the test set.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Are you allowed to train on the truncated test sessions?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Yes, for the scope of the competition, you may use all the data we provided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How is Recall@20 calculated if the ground truth contains more than 20 labels?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you predict 20 items correctly out of the ground truth labels, you will still score 1.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The OTTO dataset is released under the &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC-BY 4.0 License&lt;/a&gt;, while the code is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/otto-de/recsys-dataset/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;BibTeX entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;@online{normann2022ottodataset,&#xA;  author       = {Philipp Normann, Sophie Baumeister, Timo Wilm},&#xA;  title        = {OTTO Recommender Systems Dataset: A real-world dataset of anonymized e-commerce sessions for multi-objective recommendation research},&#xA;  date         = {2022-11-01},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>