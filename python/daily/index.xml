<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-28T01:33:50Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>modelcontextprotocol/python-sdk</title>
    <updated>2024-12-28T01:33:50Z</updated>
    <id>tag:github.com,2024-12-28:/modelcontextprotocol/python-sdk</id>
    <link href="https://github.com/modelcontextprotocol/python-sdk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Python SDK for Model Context Protocol servers and clients&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Python SDK&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;Python implementation of the Model Context Protocol (MCP)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/mcp/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/mcp.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/mcp.svg?sanitize=true&#34; alt=&#34;MIT licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/mcp.svg?sanitize=true&#34; alt=&#34;Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-modelcontextprotocol.io-blue.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://spec.modelcontextprotocol.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/spec-spec.modelcontextprotocol.io-blue.svg?sanitize=true&#34; alt=&#34;Specification&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/modelcontextprotocol/python-sdk&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#what-is-mcp&#34;&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#running-your-server&#34;&gt;Running Your Server&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#development-mode&#34;&gt;Development Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#claude-desktop-integration&#34;&gt;Claude Desktop Integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#direct-execution&#34;&gt;Direct Execution&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#echo-server&#34;&gt;Echo Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#sqlite-explorer&#34;&gt;SQLite Explorer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#low-level-server&#34;&gt;Low-Level Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#writing-mcp-clients&#34;&gt;Writing MCP Clients&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#mcp-primitives&#34;&gt;MCP Primitives&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#server-capabilities&#34;&gt;Server Capabilities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Model Context Protocol allows applications to provide context for LLMs in a standardized way, separating the concerns of providing context from the actual LLM interaction. This Python SDK implements the full MCP specification, making it easy to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build MCP clients that can connect to any MCP server&lt;/li&gt; &#xA; &lt;li&gt;Create MCP servers that expose resources, prompts and tools&lt;/li&gt; &#xA; &lt;li&gt;Use standard transports like stdio and SSE&lt;/li&gt; &#xA; &lt;li&gt;Handle all MCP protocol messages and lifecycle events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt; to manage your Python projects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv add &#34;mcp[cli]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install mcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s create a simple MCP server that exposes a calculator tool and some data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# server.py&#xA;from mcp.server.fastmcp import FastMCP&#xA;&#xA;# Create an MCP server&#xA;mcp = FastMCP(&#34;Demo&#34;)&#xA;&#xA;# Add an addition tool&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&#xA;# Add a dynamic greeting resource&#xA;@mcp.resource(&#34;greeting://{name}&#34;)&#xA;def get_greeting(name: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Get a personalized greeting&#34;&#34;&#34;&#xA;    return f&#34;Hello, {name}!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install this server in &lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude Desktop&lt;/a&gt; and interact with it right away by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can test it with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is MCP?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM&#39;s context)&lt;/li&gt; &#xA; &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; &#xA; &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; &#xA; &lt;li&gt;And more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;The FastMCP server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp.server.fastmcp import FastMCP&#xA;&#xA;# Create a named server&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;# Specify dependencies for deployment and development&#xA;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;Resources are how you expose data to LLMs. They&#39;re similar to GET endpoints in a REST API - they provide data but shouldn&#39;t perform significant computation or have side effects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;config://app&#34;)&#xA;def get_config() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Static configuration data&#34;&#34;&#34;&#xA;    return &#34;App configuration here&#34;&#xA;&#xA;@mcp.resource(&#34;users://{user_id}/profile&#34;)&#xA;def get_user_profile(user_id: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Dynamic user data&#34;&#34;&#34;&#xA;    return f&#34;Profile data for user {user_id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.tool()&#xA;def calculate_bmi(weight_kg: float, height_m: float) -&amp;gt; float:&#xA;    &#34;&#34;&#34;Calculate BMI given weight in kg and height in meters&#34;&#34;&#34;&#xA;    return weight_kg / (height_m ** 2)&#xA;&#xA;@mcp.tool()&#xA;async def fetch_weather(city: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Fetch current weather for a city&#34;&#34;&#34;&#xA;    async with httpx.AsyncClient() as client:&#xA;        response = await client.get(f&#34;https://api.weather.com/{city}&#34;)&#xA;        return response.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are reusable templates that help LLMs interact with your server effectively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.prompt()&#xA;def review_code(code: str) -&amp;gt; str:&#xA;    return f&#34;Please review this code:\n\n{code}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def debug_error(error: str) -&amp;gt; list[Message]:&#xA;    return [&#xA;        UserMessage(&#34;I&#39;m seeing this error:&#34;),&#xA;        UserMessage(error),&#xA;        AssistantMessage(&#34;I&#39;ll help debug that. What have you tried so far?&#34;)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;FastMCP provides an &lt;code&gt;Image&lt;/code&gt; class that automatically handles image data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp.server.fastmcp import FastMCP, Image&#xA;from PIL import Image as PILImage&#xA;&#xA;@mcp.tool()&#xA;def create_thumbnail(image_path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Create a thumbnail from an image&#34;&#34;&#34;&#xA;    img = PILImage.open(image_path)&#xA;    img.thumbnail((100, 100))&#xA;    return Image(data=img.tobytes(), format=&#34;png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Context&lt;/h3&gt; &#xA;&lt;p&gt;The Context object gives your tools and resources access to MCP capabilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp.server.fastmcp import FastMCP, Context&#xA;&#xA;@mcp.tool()&#xA;async def long_task(files: list[str], ctx: Context) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Process multiple files with progress tracking&#34;&#34;&#34;&#xA;    for i, file in enumerate(files):&#xA;        ctx.info(f&#34;Processing {file}&#34;)&#xA;        await ctx.report_progress(i, len(files))&#xA;        data = await ctx.read_resource(f&#34;file://{file}&#34;)&#xA;    return &#34;Processing complete&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Your Server&lt;/h2&gt; &#xA;&lt;h3&gt;Development Mode&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to test and debug your server is with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcp dev server.py&#xA;&#xA;# Add dependencies&#xA;mcp dev server.py --with pandas --with numpy&#xA;&#xA;# Mount local code&#xA;mcp dev server.py --with-editable .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Claude Desktop Integration&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is ready, install it in Claude Desktop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcp install server.py&#xA;&#xA;# Custom name&#xA;mcp install server.py --name &#34;My Analytics Server&#34;&#xA;&#xA;# Environment variables&#xA;mcp install server.py -e API_KEY=abc123 -e DB_URL=postgres://...&#xA;mcp install server.py -f .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Direct Execution&lt;/h3&gt; &#xA;&lt;p&gt;For advanced scenarios like custom deployments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp.server.fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    mcp.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python server.py&#xA;# or&#xA;mcp run server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Echo Server&lt;/h3&gt; &#xA;&lt;p&gt;A simple server demonstrating resources, tools, and prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp.server.fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;Echo&#34;)&#xA;&#xA;@mcp.resource(&#34;echo://{message}&#34;)&#xA;def echo_resource(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a resource&#34;&#34;&#34;&#xA;    return f&#34;Resource echo: {message}&#34;&#xA;&#xA;@mcp.tool()&#xA;def echo_tool(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a tool&#34;&#34;&#34;&#xA;    return f&#34;Tool echo: {message}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def echo_prompt(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create an echo prompt&#34;&#34;&#34;&#xA;    return f&#34;Please process this message: {message}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite Explorer&lt;/h3&gt; &#xA;&lt;p&gt;A more complex example showing database integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp.server.fastmcp import FastMCP&#xA;import sqlite3&#xA;&#xA;mcp = FastMCP(&#34;SQLite Explorer&#34;)&#xA;&#xA;@mcp.resource(&#34;schema://main&#34;)&#xA;def get_schema() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Provide the database schema as a resource&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    schema = conn.execute(&#xA;        &#34;SELECT sql FROM sqlite_master WHERE type=&#39;table&#39;&#34;&#xA;    ).fetchall()&#xA;    return &#34;\n&#34;.join(sql[0] for sql in schema if sql[0])&#xA;&#xA;@mcp.tool()&#xA;def query_data(sql: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Execute SQL queries safely&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    try:&#xA;        result = conn.execute(sql).fetchall()&#xA;        return &#34;\n&#34;.join(str(row) for row in result)&#xA;    except Exception as e:&#xA;        return f&#34;Error: {str(e)}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Low-Level Server&lt;/h3&gt; &#xA;&lt;p&gt;For more control, you can use the low-level server implementation directly. This gives you full access to the protocol and allows you to customize every aspect of your server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp.server.lowlevel import Server, NotificationOptions&#xA;from mcp.server.models import InitializationOptions&#xA;import mcp.server.stdio&#xA;import mcp.types as types&#xA;&#xA;# Create a server instance&#xA;server = Server(&#34;example-server&#34;)&#xA;&#xA;@server.list_prompts()&#xA;async def handle_list_prompts() -&amp;gt; list[types.Prompt]:&#xA;    return [&#xA;        types.Prompt(&#xA;            name=&#34;example-prompt&#34;,&#xA;            description=&#34;An example prompt template&#34;,&#xA;            arguments=[&#xA;                types.PromptArgument(&#xA;                    name=&#34;arg1&#34;,&#xA;                    description=&#34;Example argument&#34;,&#xA;                    required=True&#xA;                )&#xA;            ]&#xA;        )&#xA;    ]&#xA;&#xA;@server.get_prompt()&#xA;async def handle_get_prompt(&#xA;    name: str,&#xA;    arguments: dict[str, str] | None&#xA;) -&amp;gt; types.GetPromptResult:&#xA;    if name != &#34;example-prompt&#34;:&#xA;        raise ValueError(f&#34;Unknown prompt: {name}&#34;)&#xA;&#xA;    return types.GetPromptResult(&#xA;        description=&#34;Example prompt&#34;,&#xA;        messages=[&#xA;            types.PromptMessage(&#xA;                role=&#34;user&#34;,&#xA;                content=types.TextContent(&#xA;                    type=&#34;text&#34;,&#xA;                    text=&#34;Example prompt text&#34;&#xA;                )&#xA;            )&#xA;        ]&#xA;    )&#xA;&#xA;async def run():&#xA;    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):&#xA;        await server.run(&#xA;            read_stream,&#xA;            write_stream,&#xA;            InitializationOptions(&#xA;                server_name=&#34;example&#34;,&#xA;                server_version=&#34;0.1.0&#34;,&#xA;                capabilities=server.get_capabilities(&#xA;                    notification_options=NotificationOptions(),&#xA;                    experimental_capabilities={},&#xA;                )&#xA;            )&#xA;        )&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    import asyncio&#xA;    asyncio.run(run())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Writing MCP Clients&lt;/h3&gt; &#xA;&lt;p&gt;The SDK provides a high-level client interface for connecting to MCP servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mcp import ClientSession, StdioServerParameters&#xA;from mcp.client.stdio import stdio_client&#xA;&#xA;# Create server parameters for stdio connection&#xA;server_params = StdioServerParameters(&#xA;    command=&#34;python&#34;, # Executable&#xA;    args=[&#34;example_server.py&#34;], # Optional command line arguments&#xA;    env=None # Optional environment variables&#xA;)&#xA;&#xA;async def run():&#xA;    async with stdio_client(server_params) as (read, write):&#xA;        async with ClientSession(read, write) as session:&#xA;            # Initialize the connection&#xA;            await session.initialize()&#xA;&#xA;            # List available prompts&#xA;            prompts = await session.list_prompts()&#xA;&#xA;            # Get a prompt&#xA;            prompt = await session.get_prompt(&#34;example-prompt&#34;, arguments={&#34;arg1&#34;: &#34;value&#34;})&#xA;&#xA;            # List available resources&#xA;            resources = await session.list_resources()&#xA;&#xA;            # List available tools&#xA;            tools = await session.list_tools()&#xA;&#xA;            # Read a resource&#xA;            resource = await session.read_resource(&#34;file://some/path&#34;)&#xA;&#xA;            # Call a tool&#xA;            result = await session.call_tool(&#34;tool-name&#34;, arguments={&#34;arg1&#34;: &#34;value&#34;})&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    import asyncio&#xA;    asyncio.run(run())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MCP Primitives&lt;/h3&gt; &#xA;&lt;p&gt;The MCP protocol defines three core primitives that servers can implement:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Primitive&lt;/th&gt; &#xA;   &lt;th&gt;Control&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example Use&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prompts&lt;/td&gt; &#xA;   &lt;td&gt;User-controlled&lt;/td&gt; &#xA;   &lt;td&gt;Interactive templates invoked by user choice&lt;/td&gt; &#xA;   &lt;td&gt;Slash commands, menu options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resources&lt;/td&gt; &#xA;   &lt;td&gt;Application-controlled&lt;/td&gt; &#xA;   &lt;td&gt;Contextual data managed by the client application&lt;/td&gt; &#xA;   &lt;td&gt;File contents, API responses&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tools&lt;/td&gt; &#xA;   &lt;td&gt;Model-controlled&lt;/td&gt; &#xA;   &lt;td&gt;Functions exposed to the LLM to take actions&lt;/td&gt; &#xA;   &lt;td&gt;API calls, data updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Server Capabilities&lt;/h3&gt; &#xA;&lt;p&gt;MCP servers declare capabilities during initialization:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Capability&lt;/th&gt; &#xA;   &lt;th&gt;Feature Flag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prompts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;listChanged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt template management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resources&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;subscribe&lt;/code&gt;&lt;br&gt;&lt;code&gt;listChanged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resource exposure and updates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;listChanged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tool discovery and execution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Server logging configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;completion&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Argument completion suggestions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spec.modelcontextprotocol.io&#34;&gt;Model Context Protocol specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/modelcontextprotocol/servers&#34;&gt;Officially supported servers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/python-sdk/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
</feed>