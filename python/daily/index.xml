<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-15T01:43:17Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vpei/Free-TVUrl-Merge</title>
    <updated>2023-01-15T01:43:17Z</updated>
    <id>tag:github.com,2023-01-15:/vpei/Free-TVUrl-Merge</id>
    <link href="https://github.com/vpei/Free-TVUrl-Merge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;免费TvBox影视站聚合，测试不能用链接。TVBox、Pluto Player、猫影视TV等影视播放软件通用接口都可使用。Pluto兼容性最强。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;⏰ 自动获取合并Pluto/TvBox等数据源接口配置文件&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;用 Python 实现自动合并 tvbox pluto 等配置文件数据源接口。TVBox、Pluto Player、猫影视TV等影视播放软件通用接口都可使用。Pluto兼容性最强。下载TvBox或者Pluto手机或电视盒子播放软件后，使用下面的网址作为配置文件。就能聚合几大视频平台和很多小的电影网站视频等。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚠️ 注意&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;欢迎免费使用本订阅接口来自网络，仅作学习使用。&lt;/li&gt; &#xA; &lt;li&gt;使用页面所提供的任意资源时，请务必遵守当地法律。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🧲 Tvbox/Pluto Player&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://122.225.207.101:8080/ipfs/QmZGgfkFaAkCF6HM2uVJggRRThxYj9jsF7xWCeZjXNeHYo?filename=pluto_v1.6.4.apk&#34;&gt;http://122.225.207.101:8080/ipfs/QmZGgfkFaAkCF6HM2uVJggRRThxYj9jsF7xWCeZjXNeHYo?filename=pluto_v1.6.4.apk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vpei/Free-TVUrl-Merge/main/res/tvbox.PNG&#34; alt=&#34;images&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📧 播放器接口（安装好软件后，在配置中设置接口，再返回软件主界面）&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.iqiq.io/vpei/Free-TVUrl-Merge/main/out/tvbox.txt&#34;&gt;https://raw.iqiq.io/vpei/Free-TVUrl-Merge/main/out/tvbox.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ghproxy.com/https://raw.githubusercontent.com/vpei/Free-TVUrl-Merge/main/out/tvbox.txt&#34;&gt;https://ghproxy.com/https://raw.githubusercontent.com/vpei/Free-TVUrl-Merge/main/out/tvbox.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdn.jsdelivr.net/gh/vpei/Free-TVUrl-Merge@main/out/tvbox.txt&#34;&gt;https://cdn.jsdelivr.net/gh/vpei/Free-TVUrl-Merge@main/out/tvbox.txt&lt;/a&gt; （缓存时间较长，建议使用上面链接）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👩‍👩‍👧‍👦 Telegram电报群&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/jktvbox&#34;&gt;https://t.me/jktvbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;沟通请加Telegram群&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⭐ 特别感谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CatVodTVOfficial/CatVodTVJarLoader&#34;&gt;https://github.com/CatVodTVOfficial/CatVodTVJarLoader&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tangsan99999/TvJar&#34;&gt;https://github.com/Tangsan99999/TvJar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>open-mmlab/mmsegmentation</title>
    <updated>2023-01-15T01:43:17Z</updated>
    <id>tag:github.com,2023-01-15:/open-mmlab/mmsegmentation</id>
    <link href="https://github.com/open-mmlab/mmsegmentation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenMMLab Semantic Segmentation Toolbox and Benchmark.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/resources/mmseg-logo.png&#34; width=&#34;600&#34;&gt; &#xA; &lt;div&gt;&#xA;  &amp;nbsp;&#xA; &lt;/div&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;b&gt;&lt;font size=&#34;5&#34;&gt;OpenMMLab website&lt;/font&gt;&lt;/b&gt; &#xA;  &lt;sup&gt; &lt;a href=&#34;https://openmmlab.com&#34;&gt; &lt;i&gt;&lt;font size=&#34;4&#34;&gt;HOT&lt;/font&gt;&lt;/i&gt; &lt;/a&gt; &lt;/sup&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA;  &lt;b&gt;&lt;font size=&#34;5&#34;&gt;OpenMMLab platform&lt;/font&gt;&lt;/b&gt; &#xA;  &lt;sup&gt; &lt;a href=&#34;https://platform.openmmlab.com&#34;&gt; &lt;i&gt;&lt;font size=&#34;4&#34;&gt;TRY IT OUT&lt;/font&gt;&lt;/i&gt; &lt;/a&gt; &lt;/sup&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt;&#xA;  &amp;nbsp;&#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/mmsegmentation/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/mmsegmentation&#34; alt=&#34;PyPI - Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/mmsegmentation&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/mmsegmentation&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mmsegmentation.readthedocs.io/en/latest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-blue&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/actions&#34;&gt;&lt;img src=&#34;https://github.com/open-mmlab/mmsegmentation/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/open-mmlab/mmsegmentation&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/open-mmlab/mmsegmentation/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/open-mmlab/mmsegmentation.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/issues&#34;&gt;&lt;img src=&#34;https://isitmaintained.com/badge/resolution/open-mmlab/mmsegmentation.svg?sanitize=true&#34; alt=&#34;issue resolution&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/issues&#34;&gt;&lt;img src=&#34;https://isitmaintained.com/badge/open/open-mmlab/mmsegmentation.svg?sanitize=true&#34; alt=&#34;open issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://mmsegmentation.readthedocs.io/en/latest/&#34;&gt;📘Documentation&lt;/a&gt; | &lt;a href=&#34;https://mmsegmentation.readthedocs.io/en/latest/get_started.html&#34;&gt;🛠️Installation&lt;/a&gt; | &lt;a href=&#34;https://mmsegmentation.readthedocs.io/en/latest/model_zoo.html&#34;&gt;👀Model Zoo&lt;/a&gt; | &lt;a href=&#34;https://mmsegmentation.readthedocs.io/en/latest/changelog.html&#34;&gt;🆕Update News&lt;/a&gt; | &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/issues/new/choose&#34;&gt;🤔Reporting Issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/README_zh-CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;MMSegmentation is an open source semantic segmentation toolbox based on PyTorch. It is a part of the &lt;a href=&#34;https://openmmlab.com/&#34;&gt;OpenMMLab&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;The master branch works with &lt;strong&gt;PyTorch 1.5+&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/resources/seg_demo.gif&#34; alt=&#34;demo image&#34;&gt;&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Major features&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified Benchmark&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We provide a unified benchmark toolbox for various semantic segmentation methods.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modular Design&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;We decompose the semantic segmentation framework into different components and one can easily construct a customized semantic segmentation framework by combining different modules.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Support of multiple methods out of box&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The toolbox directly supports popular and contemporary semantic segmentation frameworks, &lt;em&gt;e.g.&lt;/em&gt; PSPNet, DeepLabV3, PSANet, DeepLabV3+, etc.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;High efficiency&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The training speed is faster than or comparable to other codebases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;What&#39;s New&lt;/h2&gt; &#xA;&lt;h3&gt;💎 Stable version&lt;/h3&gt; &#xA;&lt;p&gt;v0.30.0 was released on 01/11/2023:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &#39;Projects/&#39; folder, and the first example project&lt;/li&gt; &#xA; &lt;li&gt;Support Delving into High-Quality Synthetic Face Occlusion Segmentation Datasets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/changelog.md&#34;&gt;changelog.md&lt;/a&gt; for details and release history.&lt;/p&gt; &#xA;&lt;h3&gt;🌟 Preview of 1.x version&lt;/h3&gt; &#xA;&lt;p&gt;A brand new version of &lt;strong&gt;MMSegmentation v1.0.0rc3&lt;/strong&gt; was released in 12/31/2022:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unifies interfaces of all components based on &lt;a href=&#34;https://github.com/open-mmlab/mmengine&#34;&gt;MMEngine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Faster training and testing speed with complete support of mixed precision training.&lt;/li&gt; &#xA; &lt;li&gt;Refactored and more flexible &lt;a href=&#34;https://mmsegmentation.readthedocs.io/en/1.x/overview.html&#34;&gt;architecture&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Find more new features in &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/tree/1.x&#34;&gt;1.x branch&lt;/a&gt;. Issues and PRs are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/get_started.md#installation&#34;&gt;get_started.md&lt;/a&gt; for installation and &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/dataset_prepare.md#prepare-datasets&#34;&gt;dataset_prepare.md&lt;/a&gt; for dataset preparation.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/train.md&#34;&gt;train.md&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/inference.md&#34;&gt;inference.md&lt;/a&gt; for the basic usage of MMSegmentation. There are also tutorials for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/tutorials/customize_datasets.md&#34;&gt;customizing dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/tutorials/data_pipeline.md&#34;&gt;designing data pipeline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/tutorials/customize_models.md&#34;&gt;customizing modules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/tutorials/customize_runtime.md&#34;&gt;customizing runtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/tutorials/training_tricks.md&#34;&gt;training tricks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/useful_tools.md&#34;&gt;useful tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A Colab tutorial is also provided. You may preview the notebook &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/demo/MMSegmentation_Tutorial.ipynb&#34;&gt;here&lt;/a&gt; or directly &lt;a href=&#34;https://colab.research.google.com/github/open-mmlab/mmsegmentation/blob/master/demo/MMSegmentation_Tutorial.ipynb&#34;&gt;run&lt;/a&gt; on Colab.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark and model zoo&lt;/h2&gt; &#xA;&lt;p&gt;Results and models are available in the &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/model_zoo.md&#34;&gt;model zoo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported backbones:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ResNet (CVPR&#39;2016)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ResNeXt (CVPR&#39;2017)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/hrnet&#34;&gt;HRNet (CVPR&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/resnest&#34;&gt;ResNeSt (ArXiv&#39;2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/mobilenet_v2&#34;&gt;MobileNetV2 (CVPR&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/mobilenet_v3&#34;&gt;MobileNetV3 (ICCV&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/vit&#34;&gt;Vision Transformer (ICLR&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/swin&#34;&gt;Swin Transformer (ICCV&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/twins&#34;&gt;Twins (NeurIPS&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/beit&#34;&gt;BEiT (ICLR&#39;2022)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/convnext&#34;&gt;ConvNeXt (CVPR&#39;2022)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/mae&#34;&gt;MAE (CVPR&#39;2022)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/poolformer&#34;&gt;PoolFormer (CVPR&#39;2022)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/fcn&#34;&gt;FCN (CVPR&#39;2015/TPAMI&#39;2017)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/erfnet&#34;&gt;ERFNet (T-ITS&#39;2017)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/unet&#34;&gt;UNet (MICCAI&#39;2016/Nat. Methods&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/pspnet&#34;&gt;PSPNet (CVPR&#39;2017)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/deeplabv3&#34;&gt;DeepLabV3 (ArXiv&#39;2017)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/bisenetv1&#34;&gt;BiSeNetV1 (ECCV&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/psanet&#34;&gt;PSANet (ECCV&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/deeplabv3plus&#34;&gt;DeepLabV3+ (CVPR&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/upernet&#34;&gt;UPerNet (ECCV&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/icnet&#34;&gt;ICNet (ECCV&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/nonlocal_net&#34;&gt;NonLocal Net (CVPR&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/encnet&#34;&gt;EncNet (CVPR&#39;2018)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/sem_fpn&#34;&gt;Semantic FPN (CVPR&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/danet&#34;&gt;DANet (CVPR&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/apcnet&#34;&gt;APCNet (CVPR&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/emanet&#34;&gt;EMANet (ICCV&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/ccnet&#34;&gt;CCNet (ICCV&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/dmnet&#34;&gt;DMNet (ICCV&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/ann&#34;&gt;ANN (ICCV&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/gcnet&#34;&gt;GCNet (ICCVW&#39;2019/TPAMI&#39;2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/fastfcn&#34;&gt;FastFCN (ArXiv&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/fastscnn&#34;&gt;Fast-SCNN (ArXiv&#39;2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/isanet&#34;&gt;ISANet (ArXiv&#39;2019/IJCV&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/ocrnet&#34;&gt;OCRNet (ECCV&#39;2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/dnlnet&#34;&gt;DNLNet (ECCV&#39;2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/point_rend&#34;&gt;PointRend (CVPR&#39;2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/cgnet&#34;&gt;CGNet (TIP&#39;2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/bisenetv2&#34;&gt;BiSeNetV2 (IJCV&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/stdc&#34;&gt;STDC (CVPR&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/setr&#34;&gt;SETR (CVPR&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/dpt&#34;&gt;DPT (ArXiv&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/segmenter&#34;&gt;Segmenter (ICCV&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/segformer&#34;&gt;SegFormer (NeurIPS&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/configs/knet&#34;&gt;K-Net (NeurIPS&#39;2021)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported datasets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#cityscapes&#34;&gt;Cityscapes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#pascal-voc&#34;&gt;PASCAL VOC&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#ade20k&#34;&gt;ADE20K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#pascal-context&#34;&gt;Pascal Context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#coco-stuff-10k&#34;&gt;COCO-Stuff 10k&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#coco-stuff-164k&#34;&gt;COCO-Stuff 164k&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#chase-db1&#34;&gt;CHASE_DB1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#drive&#34;&gt;DRIVE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#hrf&#34;&gt;HRF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#stare&#34;&gt;STARE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#dark-zurich&#34;&gt;Dark Zurich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#nighttime-driving&#34;&gt;Nighttime Driving&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#loveda&#34;&gt;LoveDA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#isprs-potsdam&#34;&gt;Potsdam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#isprs-vaihingen&#34;&gt;Vaihingen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#isaid&#34;&gt;iSAID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation/raw/master/docs/en/dataset_prepare.md#delving-into-high-quality-synthetic-face-occlusion-segmentation-datasets&#34;&gt;High quality synthetic face occlusion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/docs/en/faq.md&#34;&gt;FAQ&lt;/a&gt; for frequently asked questions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate all contributions to improve MMSegmentation. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for the contributing guideline.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;MMSegmentation is an open source project that welcome any contribution and feedback. We wish that the toolbox and benchmark could serve the growing research community by providing a flexible as well as standardized toolkit to reimplement existing methods and develop their own new semantic segmentation methods.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this project useful in your research, please consider cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{mmseg2020,&#xA;    title={{MMSegmentation}: OpenMMLab Semantic Segmentation Toolbox and Benchmark},&#xA;    author={MMSegmentation Contributors},&#xA;    howpublished = {\url{https://github.com/open-mmlab/mmsegmentation}},&#xA;    year={2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MMSegmentation is released under the Apache 2.0 license, while some specific features in this library are with other licenses. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/open-mmlab/mmsegmentation/master/LICENSES.md&#34;&gt;LICENSES.md&lt;/a&gt; for the careful check, if you are using our code for commercial matters.&lt;/p&gt; &#xA;&lt;h2&gt;Projects in OpenMMLab&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmcv&#34;&gt;MMCV&lt;/a&gt;: OpenMMLab foundational library for computer vision.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mim&#34;&gt;MIM&lt;/a&gt;: MIM installs OpenMMLab packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmclassification&#34;&gt;MMClassification&lt;/a&gt;: OpenMMLab image classification toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmdetection&#34;&gt;MMDetection&lt;/a&gt;: OpenMMLab detection toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmdetection3d&#34;&gt;MMDetection3D&lt;/a&gt;: OpenMMLab&#39;s next-generation platform for general 3D object detection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmyolo&#34;&gt;MMYOLO&lt;/a&gt;: OpenMMLab YOLO series toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmrotate&#34;&gt;MMRotate&lt;/a&gt;: OpenMMLab rotated object detection toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmsegmentation&#34;&gt;MMSegmentation&lt;/a&gt;: OpenMMLab semantic segmentation toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmocr&#34;&gt;MMOCR&lt;/a&gt;: OpenMMLab text detection, recognition, and understanding toolbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmpose&#34;&gt;MMPose&lt;/a&gt;: OpenMMLab pose estimation toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmhuman3d&#34;&gt;MMHuman3D&lt;/a&gt;: OpenMMLab 3D human parametric model toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmselfsup&#34;&gt;MMSelfSup&lt;/a&gt;: OpenMMLab self-supervised learning toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmrazor&#34;&gt;MMRazor&lt;/a&gt;: OpenMMLab model compression toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmfewshot&#34;&gt;MMFewShot&lt;/a&gt;: OpenMMLab fewshot learning toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmaction2&#34;&gt;MMAction2&lt;/a&gt;: OpenMMLab&#39;s next-generation action understanding toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmtracking&#34;&gt;MMTracking&lt;/a&gt;: OpenMMLab video perception toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmflow&#34;&gt;MMFlow&lt;/a&gt;: OpenMMLab optical flow toolbox and benchmark.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmediting&#34;&gt;MMEditing&lt;/a&gt;: OpenMMLab image and video editing toolbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmgeneration&#34;&gt;MMGeneration&lt;/a&gt;: OpenMMLab image and video generative models toolbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmdeploy&#34;&gt;MMDeploy&lt;/a&gt;: OpenMMLab Model Deployment Framework.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>oegedijk/explainerdashboard</title>
    <updated>2023-01-15T01:43:17Z</updated>
    <id>tag:github.com,2023-01-15:/oegedijk/explainerdashboard</id>
    <link href="https://github.com/oegedijk/explainerdashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickly build Explainable AI dashboards that show the inner workings of so-called &#34;blackbox&#34; machine learning models.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/oegedijk/explainerdashboard/explainerdashboard/master?style=plastic&#34; alt=&#34;GitHub Workflow Status (branch)&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/explainerdashboard.svg?sanitize=true&#34; alt=&#34;https://pypi.python.org/pypi/explainerdashboard/&#34;&gt; &lt;img src=&#34;https://anaconda.org/conda-forge/explainerdashboard/badges/version.svg?sanitize=true&#34; alt=&#34;https://anaconda.org/conda-forge/explainerdashboard/&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/undefined&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/oegedijk/explainerdashboard/branch/master/graph/badge.svg?token=0XU6HNEGBK&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;explainerdashboard&lt;/h1&gt; &#xA;&lt;p&gt;by: Oege Dijk&lt;/p&gt; &#xA;&lt;p&gt;This package makes it convenient to quickly deploy a dashboard web app that explains the workings of a (scikit-learn compatible) machine learning model. The dashboard provides interactive plots on model performance, feature importances, feature contributions to individual predictions, &#34;what if&#34; analysis, partial dependence plots, SHAP (interaction) values, visualisation of individual decision trees, etc.&lt;/p&gt; &#xA;&lt;p&gt;You can also interactively explore components of the dashboard in a notebook/colab environment (or just launch a dashboard straight from there). Or design a dashboard with your own &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/buildcustom.html&#34;&gt;custom layout&lt;/a&gt; and explanations (thanks to the modular design of the library). And you can combine multiple dashboards into a single &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/hub.html&#34;&gt;ExplainerHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Dashboards can be exported to static html directly from a running dashboard, or programmatically as an artifact as part of an automated CI/CD deployment process.&lt;/p&gt; &#xA;&lt;p&gt;Examples deployed at: &lt;a href=&#34;http://titanicexplainer.herokuapp.com&#34;&gt;titanicexplainer.herokuapp.com&lt;/a&gt;, detailed documentation at &lt;a href=&#34;http://explainerdashboard.readthedocs.io&#34;&gt;explainerdashboard.readthedocs.io&lt;/a&gt;, example notebook on how to launch dashboard for different models &lt;a href=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/notebooks/dashboard_examples.ipynb&#34;&gt;here&lt;/a&gt;, and an example notebook on how to interact with the explainer object &lt;a href=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/notebooks/explainer_examples.ipynb&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Works with &lt;code&gt;scikit-learn&lt;/code&gt;, &lt;code&gt;xgboost&lt;/code&gt;, &lt;code&gt;catboost&lt;/code&gt;, &lt;code&gt;lightgbm&lt;/code&gt;, and &lt;code&gt;skorch&lt;/code&gt; (sklearn wrapper for tabular PyTorch models) and others.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the package through pip:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install explainerdashboard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or conda-forge:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;conda install -c conda-forge explainerdashboard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demonstration:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/explainerdashboard.gif&#34; alt=&#34;explainerdashboard.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- [![Dashboard Screenshot](https://i.postimg.cc/Gm8RnKVb/Screenshot-2020-07-01-at-13-25-19.png)](https://postimg.cc/PCj9mWd7) --&gt; &#xA;&lt;p&gt;(for live demonstration see &lt;a href=&#34;http://titanicexplainer.herokuapp.com&#34;&gt;titanicexplainer.herokuapp.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;In a lot of organizations, especially governmental, but with the GDPR also increasingly in private sector, it is becoming more and more important to be able to explain the inner workings of your machine learning algorithms. Customers have to some extent a right to an explanation why they received a certain prediction, and more and more internal and external regulators require it. With recent innovations in explainable AI (e.g. SHAP values) the old black box trope is no longer valid, but it can still take quite a bit of data wrangling and plot manipulation to get the explanations out of a model. This library aims to make this easy.&lt;/p&gt; &#xA;&lt;p&gt;The goal is manyfold:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make it easy for data scientists to quickly inspect the workings and performance of their model in a few lines of code&lt;/li&gt; &#xA; &lt;li&gt;Make it possible for non data scientist stakeholders such as managers, directors, internal and external watchdogs to interactively inspect the inner workings of the model without having to depend on a data scientist to generate every plot and table&lt;/li&gt; &#xA; &lt;li&gt;Make it easy to build an application that explains individual predictions of your model for customers that ask for an explanation&lt;/li&gt; &#xA; &lt;li&gt;Explain the inner workings of the model to the people working (human-in-the-loop) with it so that they gain understanding what the model does and doesn&#39;t do. This is important so that they can gain an intuition for when the model is likely missing information and may have to be overruled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Shap values&lt;/em&gt; (i.e. what is the contributions of each feature to each individual prediction?)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Permutation importances&lt;/em&gt; (how much does the model metric deteriorate when you shuffle a feature?)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Partial dependence plots&lt;/em&gt; (how does the model prediction change when you vary a single feature?&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Shap interaction values&lt;/em&gt; (decompose the shap value into a direct effect an interaction effects)&lt;/li&gt; &#xA; &lt;li&gt;For Random Forests and xgboost models: visualisation of individual decision trees&lt;/li&gt; &#xA; &lt;li&gt;Plus for classifiers: precision plots, confusion matrix, ROC AUC plot, PR AUC plot, etc&lt;/li&gt; &#xA; &lt;li&gt;For regression models: goodness-of-fit plots, residual plots, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The library is designed to be modular so that it should be easy to design your own interactive dashboards with plotly dash, with most of the work of calculating and formatting data, and rendering plots and tables handled by &lt;code&gt;explainerdashboard&lt;/code&gt;, so that you can focus on the layout and project specific textual explanations. (i.e. design it so that it will be interpretable for business users in your organization, not just data scientists)&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, there is a built-in standard dashboard with pre-built tabs (that you can switch off individually)&lt;/p&gt; &#xA;&lt;h2&gt;Examples of use&lt;/h2&gt; &#xA;&lt;p&gt;Fitting a model, building the explainer object, building the dashboard, and then running it can be as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ExplainerDashboard(ClassifierExplainer(RandomForestClassifier().fit(X_train, y_train), X_test, y_test)).run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below a multi-line example, adding a few extra parameters. You can group onehot encoded categorical variables together using the &lt;code&gt;cats&lt;/code&gt; parameter. You can either pass a dict specifying a list of onehot cols per categorical feature, or if you encode using e.g. &lt;code&gt;pd.get_dummies(df.Name, prefix=[&#39;Name&#39;])&lt;/code&gt; (resulting in column names &lt;code&gt;&#39;Name_Adam&#39;, &#39;Name_Bob&#39;&lt;/code&gt;) you can simply pass the prefix &lt;code&gt;&#39;Name&#39;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.ensemble import RandomForestClassifier&#xA;from explainerdashboard import ClassifierExplainer, ExplainerDashboard&#xA;from explainerdashboard.datasets import titanic_survive, titanic_names&#xA;&#xA;feature_descriptions = {&#xA;    &#34;Sex&#34;: &#34;Gender of passenger&#34;,&#xA;    &#34;Gender&#34;: &#34;Gender of passenger&#34;,&#xA;    &#34;Deck&#34;: &#34;The deck the passenger had their cabin on&#34;,&#xA;    &#34;PassengerClass&#34;: &#34;The class of the ticket: 1st, 2nd or 3rd class&#34;,&#xA;    &#34;Fare&#34;: &#34;The amount of money people paid&#34;, &#xA;    &#34;Embarked&#34;: &#34;the port where the passenger boarded the Titanic. Either Southampton, Cherbourg or Queenstown&#34;,&#xA;    &#34;Age&#34;: &#34;Age of the passenger&#34;,&#xA;    &#34;No_of_siblings_plus_spouses_on_board&#34;: &#34;The sum of the number of siblings plus the number of spouses on board&#34;,&#xA;    &#34;No_of_parents_plus_children_on_board&#34; : &#34;The sum of the number of parents plus the number of children on board&#34;,&#xA;}&#xA;&#xA;X_train, y_train, X_test, y_test = titanic_survive()&#xA;train_names, test_names = titanic_names()&#xA;model = RandomForestClassifier(n_estimators=50, max_depth=5)&#xA;model.fit(X_train, y_train)&#xA;&#xA;explainer = ClassifierExplainer(model, X_test, y_test, &#xA;                                cats=[&#39;Deck&#39;, &#39;Embarked&#39;,&#xA;                                    {&#39;Gender&#39;: [&#39;Sex_male&#39;, &#39;Sex_female&#39;, &#39;Sex_nan&#39;]}],&#xA;                                cats_notencoded={&#39;Embarked&#39;: &#39;Stowaway&#39;}, # defaults to &#39;NOT_ENCODED&#39;&#xA;                                descriptions=feature_descriptions, # adds a table and hover labels to dashboard&#xA;                                labels=[&#39;Not survived&#39;, &#39;Survived&#39;], # defaults to [&#39;0&#39;, &#39;1&#39;, etc]&#xA;                                idxs = test_names, # defaults to X.index&#xA;                                index_name = &#34;Passenger&#34;, # defaults to X.index.name&#xA;                                target = &#34;Survival&#34;, # defaults to y.name&#xA;                                )&#xA;&#xA;db = ExplainerDashboard(explainer, &#xA;                        title=&#34;Titanic Explainer&#34;, # defaults to &#34;Model Explainer&#34;&#xA;                        shap_interaction=False, # you can switch off tabs with bools&#xA;                        )&#xA;db.run(port=8050)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a regression model you can also pass the units of the target variable (e.g. dollars):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X_train, y_train, X_test, y_test = titanic_fare()&#xA;model = RandomForestRegressor().fit(X_train, y_train)&#xA;&#xA;explainer = RegressionExplainer(model, X_test, y_test, &#xA;                                cats=[&#39;Deck&#39;, &#39;Embarked&#39;, &#39;Sex&#39;],&#xA;                                descriptions=feature_descriptions, &#xA;                                units = &#34;$&#34;, # defaults to &#34;&#34;&#xA;                                )&#xA;&#xA;ExplainerDashboard(explainer).run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;y_test&lt;/code&gt; is actually optional, although some parts of the dashboard like performance metrics will obviously not be available: &lt;code&gt;ExplainerDashboard(ClassifierExplainer(model, X_test)).run()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can export a dashboard to static html with &lt;code&gt;db.save_html(&#39;dashboard.html&#39;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a simplified single page dashboard try &lt;code&gt;ExplainerDashboard(explainer, simple=True)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Show simplified dashboard screenshot&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/docs/source/screenshots/simple_classifier_dashboard.png&#34; alt=&#34;docs/source/screenshots/simple_classifier_dashboard.png&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ExplainerHub&lt;/h3&gt; &#xA;&lt;p&gt;You can combine multiple dashboards and host them in a single place using &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/hub.html&#34;&gt;ExplainerHub&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;db1 = ExplainerDashboard(explainer1, title=&#34;Classifier Explainer&#34;, &#xA;         description=&#34;Model predicting survival on H.M.S. Titanic&#34;)&#xA;db2 = ExplainerDashboard(explainer2, title=&#34;Regression Explainer&#34;,&#xA;         description=&#34;Model predicting ticket price on H.M.S. Titanic&#34;)&#xA;hub = ExplainerHub([db1, db2])&#xA;hub.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can adjust titles and descriptions, manage users and logins, store and load from config, manage the hub through a CLI and more. See the &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/hub.html&#34;&gt;ExplainerHub documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Show ExplainerHub screenshot&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/docs/source/screenshots/explainerhub.png&#34; alt=&#34;docs/source/screenshots/explainerhub.png&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dealing with slow calculations&lt;/h3&gt; &#xA;&lt;p&gt;Some of the calculations for the dashboard such as calculating SHAP (interaction) values and permutation importances can be slow for large datasets and complicated models. There are a few tricks to make this less painful:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Switching off the interactions tab (&lt;code&gt;shap_interaction=False&lt;/code&gt;) and disabling permutation importances (&lt;code&gt;no_permutations=True&lt;/code&gt;). Especially SHAP interaction values can be very slow to calculate, and often are not needed for analysis. For permutation importances you can set the &lt;code&gt;n_jobs&lt;/code&gt; parameter to speed up the calculation in parallel.&lt;/li&gt; &#xA; &lt;li&gt;Storing the explainer. The calculated properties are only calculated once for each instance, however each time when you instantiate a new explainer instance they will have to be recalculated. You can store them with &lt;code&gt;explainer.dump(&#34;explainer.joblib&#34;)&lt;/code&gt; and load with e.g. &lt;code&gt;ClassifierExplainer.from_file(&#34;explainer.joblib&#34;)&lt;/code&gt;. All calculated properties are stored along with the explainer.&lt;/li&gt; &#xA; &lt;li&gt;Using a smaller (test) dataset, or using smaller decision trees. TreeShap computational complexity is &lt;code&gt;O(TLD^2)&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the number of trees, &lt;code&gt;L&lt;/code&gt; is the maximum number of leaves in any tree and &lt;code&gt;D&lt;/code&gt; the maximal depth of any tree. So reducing the number of leaves or average depth in the decision tree can really speed up SHAP calculations.&lt;/li&gt; &#xA; &lt;li&gt;Pre-computing shap values. Perhaps you already have calculated the shap values somewhere, or you can calculate them off on a giant cluster somewhere, or your model supports &lt;a href=&#34;https://github.com/rapidsai/gputreeshap&#34;&gt;GPU generated shap values&lt;/a&gt;. You can simply add these pre-calculated shap values to the explainer with &lt;code&gt;explainer.set_shap_values()&lt;/code&gt; and &lt;code&gt;explainer.set_shap_interaction_values()&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;Plotting only a random sample of points. When you have a lots of observations, simply rendering the plots may get slow as well. You can pass the &lt;code&gt;plot_sample&lt;/code&gt; parameter to render a (different each time) random sample of observations for the various scatter plots in the dashboard. E.g.: &lt;code&gt;ExplainerDashboard(explainer, plot_sample=1000).run()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Launching from within a notebook&lt;/h2&gt; &#xA;&lt;p&gt;When working inside Jupyter or Google Colab you can use &lt;code&gt;ExplainerDashboard(mode=&#39;inline&#39;)&lt;/code&gt;, &lt;code&gt;ExplainerDashboard(mode=&#39;external&#39;)&lt;/code&gt; or &lt;code&gt;ExplainerDashboard(mode=&#39;jupyterlab&#39;)&lt;/code&gt;, to run the dashboard inline in the notebook, or in a seperate tab but keep the notebook interactive. (&lt;code&gt;db.run(mode=&#39;inline&#39;)&lt;/code&gt; now also works)&lt;/p&gt; &#xA;&lt;p&gt;There is also a specific interface for quickly displaying interactive components inline in your notebook: &lt;code&gt;InlineExplainer()&lt;/code&gt;. For example you can use &lt;code&gt;InlineExplainer(explainer).shap.dependence()&lt;/code&gt; to display the shap dependence component interactively in your notebook output cell.&lt;/p&gt; &#xA;&lt;h2&gt;Command line tool&lt;/h2&gt; &#xA;&lt;p&gt;You can store explainers to disk with &lt;code&gt;explainer.dump(&#34;explainer.joblib&#34;)&lt;/code&gt; and then run them from the command-line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ explainerdashboard run explainer.joblib&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or store the full configuration of a dashboard to &lt;code&gt;.yaml&lt;/code&gt; with e.g. &lt;code&gt;dashboard.to_yaml(&#34;dashboard.yaml&#34;, explainerfile=&#34;explainer.joblib&#34;, dump_explainer=True)&lt;/code&gt; and run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ explainerdashboard run dashboard.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build explainers from the commandline with &lt;code&gt;explainerdashboard build&lt;/code&gt;. See &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/cli.html&#34;&gt;explainerdashboard CLI documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing your dashboard&lt;/h2&gt; &#xA;&lt;p&gt;The dashboard is highly modular and customizable so that you can adjust it your own needs and project.&lt;/p&gt; &#xA;&lt;h3&gt;Changing bootstrap theme&lt;/h3&gt; &#xA;&lt;p&gt;You can change the bootstrap theme by passing a link to the appropriate css file. You can use the convenient &lt;a href=&#34;https://dash-bootstrap-components.opensource.faculty.ai/docs/themes/&#34;&gt;themes&lt;/a&gt; module of &lt;a href=&#34;https://dash-bootstrap-components.opensource.faculty.ai/docs/&#34;&gt;dash_bootstrap_components&lt;/a&gt; to generate the css url for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import dash_bootstrap_components as dbc&#xA;&#xA;ExplainerDashboard(explainer, bootstrap=dbc.themes.FLATLY).run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://dash-bootstrap-components.opensource.faculty.ai/docs/themes/&#34;&gt;dbc themes documentation&lt;/a&gt; and &lt;a href=&#34;https://bootswatch.com/&#34;&gt;bootwatch website&lt;/a&gt; for the different themes that are supported.&lt;/p&gt; &#xA;&lt;h3&gt;Switching off tabs&lt;/h3&gt; &#xA;&lt;p&gt;You can switch off individual tabs using boolean flags. This also makes sure that expensive calculations for that tab don&#39;t get executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ExplainerDashboard(explainer,&#xA;                    importances=False,&#xA;                    model_summary=True,&#xA;                    contributions=True,&#xA;                    whatif=True,&#xA;                    shap_dependence=True,&#xA;                    shap_interaction=False,&#xA;                    decision_trees=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hiding components&lt;/h3&gt; &#xA;&lt;p&gt;You can also hide individual components on the various tabs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    ExplainerDashboard(explainer, &#xA;        # importances tab:&#xA;        hide_importances=True,&#xA;        # classification stats tab:&#xA;        hide_globalcutoff=True, hide_modelsummary=True, &#xA;        hide_confusionmatrix=True, hide_precision=True, &#xA;        hide_classification=True, hide_rocauc=True, &#xA;        hide_prauc=True, hide_liftcurve=True, hide_cumprecision=True,&#xA;        # regression stats tab:&#xA;        # hide_modelsummary=True, &#xA;        hide_predsvsactual=True, hide_residuals=True, &#xA;        hide_regvscol=True,&#xA;        # individual predictions tab:&#xA;        hide_predindexselector=True, hide_predictionsummary=True,&#xA;        hide_contributiongraph=True, hide_pdp=True, &#xA;        hide_contributiontable=True,&#xA;        # whatif tab:&#xA;        hide_whatifindexselector=True, hide_whatifprediction=True,&#xA;        hide_inputeditor=True, hide_whatifcontributiongraph=True, &#xA;        hide_whatifcontributiontable=True, hide_whatifpdp=True,&#xA;        # shap dependence tab:&#xA;        hide_shapsummary=True, hide_shapdependence=True,&#xA;        # shap interactions tab:&#xA;        hide_interactionsummary=True, hide_interactiondependence=True,&#xA;        # decisiontrees tab:&#xA;        hide_treeindexselector=True, hide_treesgraph=True, &#xA;        hide_treepathtable=True, hide_treepathgraph=True,&#xA;        ).run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hiding toggles and dropdowns inside components&lt;/h3&gt; &#xA;&lt;p&gt;You can also hide individual toggles and dropdowns using &lt;code&gt;**kwargs&lt;/code&gt;. However they are not individually targeted, so if you pass &lt;code&gt;hide_cats=True&lt;/code&gt; then the group cats toggle will be hidden on every component that has one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ExplainerDashboard(explainer, &#xA;                    no_permutations=True, # do not show or calculate permutation importances&#xA;                    hide_poweredby=True, # hide the poweredby:explainerdashboard footer&#xA;                    hide_popout=True, # hide the &#39;popout&#39; button from each graph&#xA;                    hide_depth=True, # hide the depth (no of features) dropdown&#xA;                    hide_sort=True, # hide sort type dropdown in contributions graph/table&#xA;                    hide_orientation=True, # hide orientation dropdown in contributions graph/table&#xA;                    hide_type=True, # hide shap/permutation toggle on ImportancesComponent &#xA;                    hide_dropna=True, # hide dropna toggle on pdp component&#xA;                    hide_sample=True, # hide sample size input on pdp component&#xA;                    hide_gridlines=True, # hide gridlines on pdp component&#xA;                    hide_gridpoints=True, # hide gridpoints input on pdp component&#xA;                    hide_cats_sort=True, # hide the sorting option for categorical features&#xA;                    hide_cutoff=True, # hide cutoff selector on classification components&#xA;                    hide_percentage=True, # hide percentage toggle on classificaiton components&#xA;                    hide_log_x=True, # hide x-axis logs toggle on regression plots&#xA;                    hide_log_y=True, # hide y-axis logs toggle on regression plots&#xA;                    hide_ratio=True, # hide the residuals type dropdown&#xA;                    hide_points=True, # hide the show violin scatter markers toggle&#xA;                    hide_winsor=True, # hide the winsorize input&#xA;                    hide_wizard=True, # hide the wizard toggle in lift curve component&#xA;                    hide_range=True, # hide the range subscript on feature input&#xA;                    hide_star_explanation=True, # hide the &#39;* indicates observed label` text&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting default values&lt;/h3&gt; &#xA;&lt;p&gt;You can also set default values for the various dropdowns and toggles. All the components with their parameters can be found &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/components.html&#34;&gt;in the documentation&lt;/a&gt;. Some examples of useful parameters to pass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ExplainerDashboard(explainer, &#xA;                    higher_is_better=False, # flip green and red in contributions graph&#xA;                    n_input_cols=3, # divide feature inputs into 3 columns on what if tab&#xA;                    col=&#39;Fare&#39;, # initial feature in shap graphs&#xA;                    color_col=&#39;Age&#39;, # color feature in shap dependence graph&#xA;                    interact_col=&#39;Age&#39;, # interaction feature in shap interaction&#xA;                    depth=5, # only show top 5 features&#xA;                    sort = &#39;low-to-high&#39;, # sort features from lowest shap to highest in contributions graph/table&#xA;                    cats_topx=3, # show only the top 3 categories for categorical features&#xA;                    cats_sort=&#39;alphabet&#39;, # short categorical features alphabetically&#xA;                    orientation=&#39;horizontal&#39;, # horizontal bars in contributions graph&#xA;                    index=&#39;Rugg, Miss. Emily&#39;, # initial index to display&#xA;                    pdp_col=&#39;Fare&#39;, # initial pdp feature&#xA;                    cutoff=0.8, # cutoff for classification plots&#xA;                    round=2 # rounding to apply to floats&#xA;                    show_metrics=[&#39;accuracy&#39;, &#39;f1&#39;, custom_metric] # only show certain metrics &#xA;                    plot_sample=1000, # only display a 1000 random markers in scatter plots&#xA;                    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Designing your own layout&lt;/h3&gt; &#xA;&lt;p&gt;All the components in the dashboard are modular and re-usable, which means that you can build your own custom &lt;a href=&#34;https://dash.plotly.com/&#34;&gt;dash&lt;/a&gt; dashboards around them.&lt;/p&gt; &#xA;&lt;p&gt;By using the built-in &lt;code&gt;ExplainerComponent&lt;/code&gt; class it is easy to build your own layouts, with just a bare minimum of knowledge of HTML and &lt;a href=&#34;https://dash-bootstrap-components.opensource.faculty.ai/docs/quickstart/&#34;&gt;bootstrap&lt;/a&gt;. For example if you only wanted to display the &lt;code&gt;ConfusionMatrixComponent&lt;/code&gt; and &lt;code&gt;ShapContributionsGraphComponent&lt;/code&gt;, but hide a few toggles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from explainerdashboard.custom import *&#xA;&#xA;class CustomDashboard(ExplainerComponent):&#xA;    def __init__(self, explainer, name=None):&#xA;        super().__init__(explainer, title=&#34;Custom Dashboard&#34;)&#xA;        self.confusion = ConfusionMatrixComponent(explainer, name=self.name+&#34;cm&#34;,&#xA;                            hide_selector=True, hide_percentage=True,&#xA;                            cutoff=0.75)&#xA;        self.contrib = ShapContributionsGraphComponent(explainer, name=self.name+&#34;contrib&#34;,&#xA;                            hide_selector=True, hide_cats=True, &#xA;                            hide_depth=True, hide_sort=True,&#xA;                            index=&#39;Rugg, Miss. Emily&#39;)&#xA;        &#xA;    def layout(self):&#xA;        return dbc.Container([&#xA;            dbc.Row([&#xA;                dbc.Col([&#xA;                    html.H1(&#34;Custom Demonstration:&#34;),&#xA;                    html.H3(&#34;How to build your own layout using ExplainerComponents.&#34;)&#xA;                ])&#xA;            ]),&#xA;            dbc.Row([&#xA;                dbc.Col([&#xA;                    self.confusion.layout(),&#xA;                ]),&#xA;                dbc.Col([&#xA;                    self.contrib.layout(),&#xA;                ])&#xA;            ])&#xA;        ])&#xA;&#xA;db = ExplainerDashboard(explainer, CustomDashboard, hide_header=True).run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Show example custom dashboard screenshot&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/docs/source/screenshots/custom_dashboard.png&#34; alt=&#34;docs/source/screenshots/custom_dashboard.png&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use this to define your own layouts, specifically tailored to your own model, project and needs. You can use the &lt;a href=&#34;https://github.com/oegedijk/explainerdashboard/raw/master/explainerdashboard/dashboard_components/composites.py&#34;&gt;ExplainerComposites&lt;/a&gt; that are used for the tabs of the default dashboard as a starting point, and edit them to reorganize components, add text, etc. See &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/custom.html&#34;&gt;custom dashboard documentation&lt;/a&gt; for more details. A deployed custom dashboard can be found &lt;a href=&#34;http://titanicexplainer.herokuapp.com/custom/&#34;&gt;here&lt;/a&gt;(&lt;a href=&#34;https://github.com/oegedijk/explainingtitanic/raw/master/buildcustom.py&#34;&gt;source code&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to use e.g. &lt;code&gt;gunicorn&lt;/code&gt; or &lt;code&gt;waitress&lt;/code&gt; to deploy the dashboard you should add &lt;code&gt;app = db.flask_server()&lt;/code&gt; to your code to expose the Flask server. You can then start the server with e.g. &lt;code&gt;gunicorn dashboard:app&lt;/code&gt; (assuming the file you defined the dashboard in was called &lt;code&gt;dashboard.py&lt;/code&gt;). See also the &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/dashboards.html&#34;&gt;ExplainerDashboard section&lt;/a&gt; and the &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/deployment.html&#34;&gt;deployment section of the documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be helpful to store your &lt;code&gt;explainer&lt;/code&gt; and dashboard layout to disk, and then reload, e.g.:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;generate_dashboard.py&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from explainerdashboard import ClassifierExplainer, ExplainerDashboard&#xA;from explainerdashboard.custom import *&#xA;&#xA;explainer = ClassifierExplainer(model, X_test, y_test)&#xA;&#xA;# building an ExplainerDashboard ensures that all necessary properties &#xA;# get calculated:&#xA;db = ExplainerDashboard(explainer, [ShapDependenceComposite, WhatIfComposite],&#xA;                        title=&#39;Awesome Dashboard&#39;, hide_whatifpdp=True)&#xA;&#xA;# store both the explainer and the dashboard configuration:&#xA;db.to_yaml(&#34;dashboard.yaml&#34;, explainerfile=&#34;explainer.joblib&#34;, dump_explainer=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then reload it in &lt;strong&gt;dashboard.py&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from explainerdashboard import ClassifierExplainer, ExplainerDashboard&#xA;&#xA;# you can override params during load from_config:&#xA;db = ExplainerDashboard.from_config(&#34;dashboard.yaml&#34;, title=&#34;Awesomer Title&#34;)&#xA;&#xA;app = db.flask_server()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ gunicorn dashboard:app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with waitress (also works on Windows):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    $ waitress-serve dashboard:app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minimizing memory usage&lt;/h3&gt; &#xA;&lt;p&gt;When you deploy a dashboard with a dataset with a large number of rows (&lt;code&gt;n&lt;/code&gt;) and columns (&lt;code&gt;m&lt;/code&gt;), the memory usage of the dashboard can be substantial. You can check the (approximate) memory usage with &lt;code&gt;explainer.memory_usage()&lt;/code&gt;. (as a side note: if you have lots of rows, you probably want to set the &lt;code&gt;plot_sample&lt;/code&gt; parameter as well)&lt;/p&gt; &#xA;&lt;p&gt;In order to reduce the memory footprint there are a number of things you can do:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Not including shap interaction tab: shap interaction values are shape (&lt;code&gt;n*m*m&lt;/code&gt;), so can take a subtantial amount of memory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setting a lower precision. By default shap values are stored as &lt;code&gt;&#39;float64&#39;&lt;/code&gt;, but you can store them as &lt;code&gt;&#39;float32&#39;&lt;/code&gt; instead and save half the space: &lt;code&gt;ClassifierExplainer(model, X_test, y_test, precision=&#39;float32&#39;)&lt;/code&gt;. You can also set a lower precision on your &lt;code&gt;X_test&lt;/code&gt; dataset yourself ofcourse.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For multi class classifier, by default &lt;code&gt;ClassifierExplainer&lt;/code&gt; calculates shap values for all classes. If you&#39;re only interested in a single class you can drop the other shap values: &lt;code&gt;explainer.keep_shap_pos_label_only(pos_label)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Storing data externally. You can for example only store a subset of 10.000 rows in the explainer itself (enough to generate importance and dependence plots), and store the rest of your millions of rows of input data in an external file or database:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;with &lt;code&gt;explainer.set_X_row_func()&lt;/code&gt; you can set a function that takes an &lt;code&gt;index&lt;/code&gt; as argument and returns a single row dataframe with model compatible input data for that index. This function can include a query to a database or fileread.&lt;/li&gt; &#xA;   &lt;li&gt;with &lt;code&gt;explainer.set_y_func()&lt;/code&gt; you can set a function that takes and &lt;code&gt;index&lt;/code&gt; as argument and returns the observed outcome &lt;code&gt;y&lt;/code&gt; for that index.&lt;/li&gt; &#xA;   &lt;li&gt;with &lt;code&gt;explainer.set_index_list_func()&lt;/code&gt; you can set a function that returns a list of available indexes that can be queried. Only gets called upon start of the dashboard.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;If you have a very large number of indexes and the user is able to look them up elsewhere, you can also replace the index dropdowns with a simple free text field with &lt;code&gt;index_dropdown=False&lt;/code&gt;. Only valid indexes (i.e. in the &lt;code&gt;get_index_list()&lt;/code&gt; list) get propagated to other components by default, but this can be overriden with &lt;code&gt;index_check=False&lt;/code&gt;. Instead of an &lt;code&gt;index_list_func&lt;/code&gt; you can also set an &lt;code&gt;explainer.set_index_check_func(func)&lt;/code&gt; which should return a bool whether the &lt;code&gt;index&lt;/code&gt; exists or not.&lt;/p&gt; &lt;p&gt;Important: these function can be called multiple times by multiple independent components, so probably best to implement some kind of caching functionality. The functions you pass can be also methods, so you have access to all of the internals of the explainer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found at &lt;a href=&#34;https://explainerdashboard.readthedocs.io/en/latest/&#34;&gt;explainerdashboard.readthedocs.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example notebook on how to launch dashboards for different model types here: &lt;a href=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/notebooks/dashboard_examples.ipynb&#34;&gt;dashboard_examples.ipynb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example notebook on how to interact with the explainer object here: &lt;a href=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/notebooks/explainer_examples.ipynb&#34;&gt;explainer_examples.ipynb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example notebook on how to design a custom dashboard: &lt;a href=&#34;https://raw.githubusercontent.com/oegedijk/explainerdashboard/master/notebooks/custom_examples.ipynb&#34;&gt;custom_examples.ipynb&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployed example:&lt;/h2&gt; &#xA;&lt;p&gt;You can find an example dashboard at &lt;a href=&#34;http://titanicexplainer.herokuapp.com&#34;&gt;titanicexplainer.herokuapp.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(source code at &lt;a href=&#34;https://github.com/oegedijk/explainingtitanic&#34;&gt;https://github.com/oegedijk/explainingtitanic&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
</feed>