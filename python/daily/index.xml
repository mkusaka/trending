<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-30T01:36:52Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>snakers4/silero-vad</title>
    <updated>2024-06-30T01:36:52Z</updated>
    <id>tag:github.com,2024-06-30:/snakers4/silero-vad</id>
    <link href="https://github.com/snakers4/silero-vad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Silero VAD: pre-trained enterprise-grade Voice Activity Detector&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;mailto:hello@silero.ai&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/Email-gray.svg?style=for-the-badge&amp;amp;logo=gmail&#34; alt=&#34;Mailing list : test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/silero_speech&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/Telegram-blue.svg?style=for-the-badge&amp;amp;logo=telegram&#34; alt=&#34;Mailing list : test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/snakers4/silero-vad/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-lightgrey.svg?style=for-the-badge&#34; alt=&#34;License: CC BY-NC 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/snakers4/silero-vad/blob/master/silero-vad.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12515440/89997349-b3523080-dc94-11ea-9906-ca2e8bc50535.png&#34; alt=&#34;header&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Silero VAD&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Silero VAD&lt;/strong&gt; - pre-trained enterprise-grade &lt;a href=&#34;https://en.wikipedia.org/wiki/Voice_activity_detection&#34;&gt;Voice Activity Detector&lt;/a&gt; (also see our &lt;a href=&#34;https://github.com/snakers4/silero-models&#34;&gt;STT models&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/snakers4/silero-vad/assets/36505480/300bd062-4da5-4f19-9736-9c144a45d7a7&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Real Time Example&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/36505480/144874384-95f80f6d-a4f1-42cc-9be7-004c891dd481.mp4&#34;&gt;https://user-images.githubusercontent.com/36505480/144874384-95f80f6d-a4f1-42cc-9be7-004c891dd481.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Key Features&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stellar accuracy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Silero VAD has &lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/Quality-Metrics#vs-other-available-solutions&#34;&gt;excellent results&lt;/a&gt; on speech detection tasks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;One audio chunk (30+ ms) &lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/Performance-Metrics#silero-vad-performance-metrics&#34;&gt;takes&lt;/a&gt; less than &lt;strong&gt;1ms&lt;/strong&gt; to be processed on a single CPU thread. Using batching or GPU can also improve performance considerably. Under certain conditions ONNX may even run up to 4-5x faster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;JIT model is around two megabytes in size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Silero VAD was trained on huge corpora that include over &lt;strong&gt;6000&lt;/strong&gt; languages and it performs well on audios from different domains with various background noise and quality levels.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Flexible sampling rate&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Silero VAD &lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/Quality-Metrics#sample-rate-comparison&#34;&gt;supports&lt;/a&gt; &lt;strong&gt;8000 Hz&lt;/strong&gt; and &lt;strong&gt;16000 Hz&lt;/strong&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Sampling_(signal_processing)#Sampling_rate&#34;&gt;sampling rates&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Highly Portable&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Silero VAD reaps benefits from the rich ecosystems built around &lt;strong&gt;PyTorch&lt;/strong&gt; and &lt;strong&gt;ONNX&lt;/strong&gt; running everywhere where these runtimes are available.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Strings Attached&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Published under permissive license (MIT) Silero VAD has zero strings attached - no telemetry, no keys, no registration, no built-in expiration, no keys or vendor lock.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Fast start&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python3&#34;&gt;import torch&#xA;torch.set_num_threads(1)&#xA;&#xA;model, utils = torch.hub.load(repo_or_dir=&#39;snakers4/silero-vad&#39;, model=&#39;silero_vad&#39;)&#xA;(get_speech_timestamps, _, read_audio, _, _) = utils&#xA;&#xA;wav = read_audio(&#39;path_to_audio_file&#39;)&#xA;speech_timestamps = get_speech_timestamps(wav, model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Typical Use Cases&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Voice activity detection for IOT / edge / mobile use cases&lt;/li&gt; &#xA; &lt;li&gt;Data cleaning and preparation, voice detection in general&lt;/li&gt; &#xA; &lt;li&gt;Telephony and call-center automation, voice bots&lt;/li&gt; &#xA; &lt;li&gt;Voice interfaces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Links&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/Examples-and-Dependencies#dependencies&#34;&gt;Examples and Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/Quality-Metrics&#34;&gt;Quality Metrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/Performance-Metrics&#34;&gt;Performance Metrics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/Version-history-and-Available-Models&#34;&gt;Versions and Available Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snakers4/silero-models#further-reading&#34;&gt;Further reading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snakers4/silero-vad/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Get In Touch&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Try our models, create an &lt;a href=&#34;https://github.com/snakers4/silero-vad/issues/new&#34;&gt;issue&lt;/a&gt;, start a &lt;a href=&#34;https://github.com/snakers4/silero-vad/discussions/new&#34;&gt;discussion&lt;/a&gt;, join our telegram &lt;a href=&#34;https://t.me/silero_speech&#34;&gt;chat&lt;/a&gt;, &lt;a href=&#34;mailto:hello@silero.ai&#34;&gt;email&lt;/a&gt; us, read our &lt;a href=&#34;https://t.me/silero_news&#34;&gt;news&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/snakers4/silero-models/wiki&#34;&gt;wiki&lt;/a&gt; for relevant information and &lt;a href=&#34;mailto:hello@silero.ai&#34;&gt;email&lt;/a&gt; us directly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Citations&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{Silero VAD,&#xA;  author = {Silero Team},&#xA;  title = {Silero VAD: pre-trained enterprise-grade Voice Activity Detector (VAD), Number Detector and Language Classifier},&#xA;  year = {2021},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  howpublished = {\url{https://github.com/snakers4/silero-vad}},&#xA;  commit = {insert_some_commit_here},&#xA;  email = {hello@silero.ai}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Examples and VAD-based Community Apps&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Example of VAD ONNX Runtime model usage in &lt;a href=&#34;https://github.com/snakers4/silero-vad/tree/master/examples/cpp&#34;&gt;C++&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Voice activity detection for the &lt;a href=&#34;https://github.com/ricky0123/vad&#34;&gt;browser&lt;/a&gt; using ONNX Runtime Web&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>modelscope/FunASR</title>
    <updated>2024-06-30T01:36:52Z</updated>
    <id>tag:github.com,2024-06-30:/modelscope/FunASR</id>
    <link href="https://github.com/modelscope/FunASR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Fundamental End-to-End Speech Recognition Toolkit and Open Source SOTA Pretrained Models, Supporting Speech Recognition, Voice Activity Detection, Text Post-processing etc.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/README_zh.md&#34;&gt;简体中文&lt;/a&gt;|English)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Akshay090/svg-banners&#34;&gt;&lt;img src=&#34;https://svg-banners.vercel.app/api?type=origin&amp;amp;text1=FunASR%F0%9F%A4%A0&amp;amp;text2=%F0%9F%92%96%20A%20Fundamental%20End-to-End%20Speech%20Recognition%20Toolkit&amp;amp;width=800&amp;amp;height=210&#34; alt=&#34;SVG Banners&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/funasr/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/funasr&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FunASR&lt;/strong&gt; hopes to build a bridge between academic research and industrial applications on speech recognition. By supporting the training &amp;amp; finetuning of the industrial-grade speech recognition model, researchers and developers can conduct research and production of speech recognition models more conveniently, and promote the development of speech recognition ecology. ASR for Fun！&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#highlights&#34;&gt;&lt;strong&gt;Highlights&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR#whats-new&#34;&gt;&lt;strong&gt;News&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#installation&#34;&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#quick-start&#34;&gt;&lt;strong&gt;Quick Start&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/raw/main/docs/tutorial/README.md&#34;&gt;&lt;strong&gt;Tutorial&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;&lt;strong&gt;Runtime&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#model-zoo&#34;&gt;&lt;strong&gt;Model Zoo&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/#contact&#34;&gt;&lt;strong&gt;Contact&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;highlights&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FunASR is a fundamental speech recognition toolkit that offers a variety of features, including speech recognition (ASR), Voice Activity Detection (VAD), Punctuation Restoration, Language Models, Speaker Verification, Speaker Diarization and multi-talker ASR. FunASR provides convenient scripts and tutorials, supporting inference and fine-tuning of pre-trained models.&lt;/li&gt; &#xA; &lt;li&gt;We have released a vast collection of academic and industrial pretrained models on the &lt;a href=&#34;https://www.modelscope.cn/models?page=1&amp;amp;tasks=auto-speech-recognition&#34;&gt;ModelScope&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/FunASR&#34;&gt;huggingface&lt;/a&gt;, which can be accessed through our &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/raw/main/docs/model_zoo/modelscope_models.md&#34;&gt;Model Zoo&lt;/a&gt;. The representative &lt;a href=&#34;https://www.modelscope.cn/models/damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary&#34;&gt;Paraformer-large&lt;/a&gt;, a non-autoregressive end-to-end speech recognition model, has the advantages of high accuracy, high efficiency, and convenient deployment, supporting the rapid construction of speech recognition services. For more details on service deployment, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme_cn.md&#34;&gt;service deployment document&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;whats-new&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s new:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2024/06/27: Offline File Transcription Service GPU 1.0 released, supporting dynamic batch processing and multi-threading concurrency. In the long audio test set, the single-thread RTF is 0.0076, and multi-threads&#39; speedup is 1200+ (compared to 330+ on CPU); ref to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;2024/05/15：emotion recognition models are new supported. &lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_large/summary&#34;&gt;emotion2vec+large&lt;/a&gt;，&lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_base/summary&#34;&gt;emotion2vec+base&lt;/a&gt;，&lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_seed/summary&#34;&gt;emotion2vec+seed&lt;/a&gt;. currently supports the following categories: 0: angry 1: happy 2: neutral 3: sad 4: unknown.&lt;/li&gt; &#xA; &lt;li&gt;2024/05/15: Offline File Transcription Service 4.5, Offline File Transcription Service of English 1.6，Real-time Transcription Service 1.10 released，adapting to FunASR 1.0 model structure；(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;2024/03/05：Added the Qwen-Audio and Qwen-Audio-Chat large-scale audio-text multimodal models, which have topped multiple audio domain leaderboards. These models support speech dialogue, &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/qwen_audio&#34;&gt;usage&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2024/03/05：Added support for the Whisper-large-v3 model, a multitasking model that can perform multilingual speech recognition, speech translation, and language identification. It can be downloaded from the&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/whisper/demo.py&#34;&gt;modelscope&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/whisper/demo_from_openai.py&#34;&gt;openai&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2024/03/05: Offline File Transcription Service 4.4, Offline File Transcription Service of English 1.5，Real-time Transcription Service 1.9 released，docker image supports ARM64 platform, update modelscope；(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;2024/01/30：funasr-1.0 has been released (&lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/discussions/1319&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Full Changelog&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;2024/01/30：emotion recognition models are new supported. &lt;a href=&#34;https://www.modelscope.cn/models/iic/emotion2vec_base_finetuned/summary&#34;&gt;model link&lt;/a&gt;, modified from &lt;a href=&#34;https://github.com/ddlBoJack/emotion2vec&#34;&gt;repo&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/25: Offline File Transcription Service 4.2, Offline File Transcription Service of English 1.3 released，optimized the VAD (Voice Activity Detection) data processing method, significantly reducing peak memory usage, memory leak optimization; Real-time Transcription Service 1.7 released，optimizatized the client-side；(&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/09: The Funasr SDK for Windows version 2.0 has been released, featuring support for The offline file transcription service (CPU) of Mandarin 4.1, The offline file transcription service (CPU) of English 1.2, The real-time transcription service (CPU) of Mandarin 1.6. For more details, please refer to the official documentation or release notes(&lt;a href=&#34;https://www.modelscope.cn/models/damo/funasr-runtime-win-cpu-x64/summary&#34;&gt;FunASR-Runtime-Windows&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/03: File Transcription Service 4.0 released, Added support for 8k models, optimized timestamp mismatch issues and added sentence-level timestamps, improved the effectiveness of English word FST hotwords, supported automated configuration of thread parameters, and fixed known crash issues as well as memory leak problems, refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md#file-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/03: Real-time Transcription Service 1.6 released，The 2pass-offline mode supports Ngram language model decoding and WFST hotwords, while also addressing known crash issues and memory leak problems, (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md#the-real-time-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2024/01/03: Fixed known crash issues as well as memory leak problems, (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md#file-transcription-service-english-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/12/04: The Funasr SDK for Windows version 1.0 has been released, featuring support for The offline file transcription service (CPU) of Mandarin, The offline file transcription service (CPU) of English, The real-time transcription service (CPU) of Mandarin. For more details, please refer to the official documentation or release notes(&lt;a href=&#34;https://www.modelscope.cn/models/damo/funasr-runtime-win-cpu-x64/summary&#34;&gt;FunASR-Runtime-Windows&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;2023/11/08: The offline file transcription service 3.0 (CPU) of Mandarin has been released, adding punctuation large model, Ngram language model, and wfst hot words. For detailed information, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#file-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/17: The offline file transcription service (CPU) of English has been released. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#file-transcription-service-english-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/13: &lt;a href=&#34;https://slidespeech.github.io/&#34;&gt;SlideSpeech&lt;/a&gt;: A large scale multi-modal audio-visual corpus with a significant amount of real-time synchronized slides.&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/10: The ASR-SpeakersDiarization combined pipeline &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/raw/main/egs_modelscope/asr_vad_spk/speech_paraformer-large-vad-punc-spk_asr_nat-zh-cn/demo.py&#34;&gt;Paraformer-VAD-SPK&lt;/a&gt; is now released. Experience the model to get recognition results with speaker information.&lt;/li&gt; &#xA;  &lt;li&gt;2023/10/07: &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunCodec&#34;&gt;FunCodec&lt;/a&gt;: A Fundamental, Reproducible and Integrable Open-source Toolkit for Neural Speech Codec.&lt;/li&gt; &#xA;  &lt;li&gt;2023/09/01: The offline file transcription service 2.0 (CPU) of Mandarin has been released, with added support for ffmpeg, timestamp, and hotword models. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#file-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/08/07: The real-time transcription service (CPU) of Mandarin has been released. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime#the-real-time-transcription-service-mandarin-cpu&#34;&gt;docs&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/07/17: BAT is released, which is a low-latency and low-memory-consumption RNN-T model. For more details, please refer to (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/egs/aishell/bat&#34;&gt;BAT&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;li&gt;2023/06/26: ASRU2023 Multi-Channel Multi-Party Meeting Transcription Challenge 2.0 completed the competition and announced the results. For more details, please refer to (&lt;a href=&#34;https://alibaba-damo-academy.github.io/FunASR/m2met2/index.html&#34;&gt;M2MeT2.0&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a name=&#34;Installation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;python&amp;gt;=3.8&#xA;torch&amp;gt;=1.13&#xA;torchaudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install for pypi&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install -U funasr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or install from source code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/alibaba/FunASR.git &amp;amp;&amp;amp; cd FunASR&#xA;pip3 install -e ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install modelscope or huggingface_hub for the pretrained models (Optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install -U modelscope huggingface_hub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model Zoo&lt;/h2&gt; &#xA;&lt;p&gt;FunASR has open-sourced a large number of pre-trained models on industrial data. You are free to use, copy, modify, and share FunASR models under the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/MODEL_LICENSE&#34;&gt;Model License Agreement&lt;/a&gt;. Below are some representative models, for more models please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/model_zoo&#34;&gt;Model Zoo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Note: ⭐ represents the ModelScope model zoo, 🤗 represents the Huggingface model zoo, 🍀 represents the OpenAI model zoo)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Task Details&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Training Data&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parameters&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;paraformer-zh &lt;br&gt; (&lt;a href=&#34;https://www.modelscope.cn/models/damo/speech_paraformer-large-vad-punc_asr_nat-zh-cn-16k-common-vocab8404-pytorch/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/paraformer-zh&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, with timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60000 hours, Mandarin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;nobr&gt;&#xA;     paraformer-zh-streaming &#xA;     &lt;br&gt; ( &#xA;     &lt;a href=&#34;https://modelscope.cn/models/damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-online/summary&#34;&gt;⭐&lt;/a&gt; &#xA;     &lt;a href=&#34;https://huggingface.co/funasr/paraformer-zh-streaming&#34;&gt;🤗&lt;/a&gt; )&#xA;    &lt;/nobr&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60000 hours, Mandarin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;paraformer-en &lt;br&gt; ( &lt;a href=&#34;https://www.modelscope.cn/models/damo/speech_paraformer-large-vad-punc_asr_nat-en-16k-common-vocab10020/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/paraformer-en&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, without timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50000 hours, English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;conformer-en &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/speech_conformer_asr-en-16k-vocab4199-pytorch/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/conformer-en&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50000 hours, English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;220M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ct-punc &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/punc_ct-transformer_cn-en-common-vocab471067-large/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/ct-punc&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;punctuation restoration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;100M, Mandarin and English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;290M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fsmn-vad &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/speech_fsmn_vad_zh-cn-16k-common-pytorch/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/fsmn-vad&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;voice activity detection&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5000 hours, Mandarin and English&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.4M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fa-zh &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/damo/speech_timestamp_prediction-v1-16k-offline/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/fa-zh&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;timestamp prediction&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5000 hours, Mandarin&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cam++ &lt;br&gt; ( &lt;a href=&#34;https://modelscope.cn/models/iic/speech_campplus_sv_zh-cn_16k-common/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/funasr/campplus&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speaker verification/diarization&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5000 hours&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7.2M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Whisper-large-v2 &lt;br&gt; (&lt;a href=&#34;https://www.modelscope.cn/models/iic/speech_whisper-large_asr_multilingual/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;🍀&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, with timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1550 M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Whisper-large-v3 &lt;br&gt; (&lt;a href=&#34;https://www.modelscope.cn/models/iic/Whisper-large-v3/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://github.com/openai/whisper&#34;&gt;🍀&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech recognition, with timestamps, non-streaming&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1550 M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Qwen-Audio &lt;br&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/qwen_audio/demo.py&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/Qwen/Qwen-Audio&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;audio-text multimodal models (pretraining)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Qwen-Audio-Chat &lt;br&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/examples/industrial_data_pretraining/qwen_audio/demo_chat.py&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/Qwen/Qwen-Audio-Chat&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;audio-text multimodal models (chat)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;multilingual&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8B&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;emotion2vec+large &lt;br&gt; (&lt;a href=&#34;https://modelscope.cn/models/iic/emotion2vec_plus_large/summary&#34;&gt;⭐&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/emotion2vec/emotion2vec_plus_large&#34;&gt;🤗&lt;/a&gt; )&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;speech emotion recongintion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;40000 hours&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;300M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a name=&#34;quick-start&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Below is a quick start tutorial. Test audio files (&lt;a href=&#34;https://isv-data.oss-cn-hangzhou.aliyuncs.com/ics/MaaS/ASR/test_audio/vad_example.wav&#34;&gt;Mandarin&lt;/a&gt;, &lt;a href=&#34;https://isv-data.oss-cn-hangzhou.aliyuncs.com/ics/MaaS/ASR/test_audio/asr_example_en.wav&#34;&gt;English&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Command-line usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;funasr ++model=paraformer-zh ++vad_model=&#34;fsmn-vad&#34; ++punc_model=&#34;ct-punc&#34; ++input=asr_example_zh.wav&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notes: Support recognition of single audio file, as well as file list in Kaldi-style wav.scp format: &lt;code&gt;wav_id wav_pat&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Speech Recognition (Non-streaming)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;# paraformer-zh is a multi-functional asr model&#xA;# use vad, punc, spk or not as you need&#xA;model = AutoModel(model=&#34;paraformer-zh&#34;,  vad_model=&#34;fsmn-vad&#34;,  punc_model=&#34;ct-punc&#34;, &#xA;                  # spk_model=&#34;cam++&#34;, &#xA;                  )&#xA;res = model.generate(input=f&#34;{model.model_path}/example/asr_example.wav&#34;, &#xA;                     batch_size_s=300, &#xA;                     hotword=&#39;魔搭&#39;)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;hub&lt;/code&gt;: represents the model repository, &lt;code&gt;ms&lt;/code&gt; stands for selecting ModelScope download, &lt;code&gt;hf&lt;/code&gt; stands for selecting Huggingface download.&lt;/p&gt; &#xA;&lt;h3&gt;Speech Recognition (Streaming)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;chunk_size = [0, 10, 5] #[0, 10, 5] 600ms, [0, 8, 4] 480ms&#xA;encoder_chunk_look_back = 4 #number of chunks to lookback for encoder self-attention&#xA;decoder_chunk_look_back = 1 #number of encoder chunks to lookback for decoder cross-attention&#xA;&#xA;model = AutoModel(model=&#34;paraformer-zh-streaming&#34;)&#xA;&#xA;import soundfile&#xA;import os&#xA;&#xA;wav_file = os.path.join(model.model_path, &#34;example/asr_example.wav&#34;)&#xA;speech, sample_rate = soundfile.read(wav_file)&#xA;chunk_stride = chunk_size[1] * 960 # 600ms&#xA;&#xA;cache = {}&#xA;total_chunk_num = int(len((speech)-1)/chunk_stride+1)&#xA;for i in range(total_chunk_num):&#xA;    speech_chunk = speech[i*chunk_stride:(i+1)*chunk_stride]&#xA;    is_final = i == total_chunk_num - 1&#xA;    res = model.generate(input=speech_chunk, cache=cache, is_final=is_final, chunk_size=chunk_size, encoder_chunk_look_back=encoder_chunk_look_back, decoder_chunk_look_back=decoder_chunk_look_back)&#xA;    print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;chunk_size&lt;/code&gt; is the configuration for streaming latency.&lt;code&gt; [0,10,5]&lt;/code&gt; indicates that the real-time display granularity is &lt;code&gt;10*60=600ms&lt;/code&gt;, and the lookahead information is &lt;code&gt;5*60=300ms&lt;/code&gt;. Each inference input is &lt;code&gt;600ms&lt;/code&gt; (sample points are &lt;code&gt;16000*0.6=960&lt;/code&gt;), and the output is the corresponding text. For the last speech segment input, &lt;code&gt;is_final=True&lt;/code&gt; needs to be set to force the output of the last word.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;More Examples&lt;/summary&gt; &#xA; &lt;h3&gt;Voice Activity Detection (Non-Streaming)&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;fsmn-vad&#34;)&#xA;wav_file = f&#34;{model.model_path}/example/vad_example.wav&#34;&#xA;res = model.generate(input=wav_file)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: The output format of the VAD model is: &lt;code&gt;[[beg1, end1], [beg2, end2], ..., [begN, endN]]&lt;/code&gt;, where &lt;code&gt;begN/endN&lt;/code&gt; indicates the starting/ending point of the &lt;code&gt;N-th&lt;/code&gt; valid audio segment, measured in milliseconds.&lt;/p&gt; &#xA; &lt;h3&gt;Voice Activity Detection (Streaming)&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;chunk_size = 200 # ms&#xA;model = AutoModel(model=&#34;fsmn-vad&#34;)&#xA;&#xA;import soundfile&#xA;&#xA;wav_file = f&#34;{model.model_path}/example/vad_example.wav&#34;&#xA;speech, sample_rate = soundfile.read(wav_file)&#xA;chunk_stride = int(chunk_size * sample_rate / 1000)&#xA;&#xA;cache = {}&#xA;total_chunk_num = int(len((speech)-1)/chunk_stride+1)&#xA;for i in range(total_chunk_num):&#xA;    speech_chunk = speech[i*chunk_stride:(i+1)*chunk_stride]&#xA;    is_final = i == total_chunk_num - 1&#xA;    res = model.generate(input=speech_chunk, cache=cache, is_final=is_final, chunk_size=chunk_size)&#xA;    if len(res[0][&#34;value&#34;]):&#xA;        print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: The output format for the streaming VAD model can be one of four scenarios:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;[[beg1, end1], [beg2, end2], .., [begN, endN]]&lt;/code&gt;：The same as the offline VAD output result mentioned above.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;[[beg, -1]]&lt;/code&gt;：Indicates that only a starting point has been detected.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;[[-1, end]]&lt;/code&gt;：Indicates that only an ending point has been detected.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;[]&lt;/code&gt;：Indicates that neither a starting point nor an ending point has been detected.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;The output is measured in milliseconds and represents the absolute time from the starting point.&lt;/p&gt; &#xA; &lt;h3&gt;Punctuation Restoration&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;ct-punc&#34;)&#xA;res = model.generate(input=&#34;那今天的会就到这里吧 happy new year 明年见&#34;)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Timestamp Prediction&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;fa-zh&#34;)&#xA;wav_file = f&#34;{model.model_path}/example/asr_example.wav&#34;&#xA;text_file = f&#34;{model.model_path}/example/text.txt&#34;&#xA;res = model.generate(input=(wav_file, text_file), data_type=(&#34;sound&#34;, &#34;text&#34;))&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Speech Emotion Recognition&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;emotion2vec_plus_large&#34;)&#xA;&#xA;wav_file = f&#34;{model.model_path}/example/test.wav&#34;&#xA;&#xA;res = model.generate(wav_file, output_dir=&#34;./outputs&#34;, granularity=&#34;utterance&#34;, extract_embedding=False)&#xA;print(res)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;More usages ref to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/tutorial/README_zh.md&#34;&gt;docs&lt;/a&gt;, more examples ref to &lt;a href=&#34;https://github.com/alibaba-damo-academy/FunASR/tree/main/examples/industrial_data_pretraining&#34;&gt;demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Export ONNX&lt;/h2&gt; &#xA;&lt;h3&gt;Command-line usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;funasr-export ++model=paraformer ++quantize=false ++device=cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from funasr import AutoModel&#xA;&#xA;model = AutoModel(model=&#34;paraformer&#34;, device=&#34;cpu&#34;)&#xA;&#xA;res = model.export(quantize=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test ONNX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pip3 install -U funasr-onnx&#xA;from funasr_onnx import Paraformer&#xA;model_dir = &#34;damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch&#34;&#xA;model = Paraformer(model_dir, batch_size=1, quantize=True)&#xA;&#xA;wav_path = [&#39;~/.cache/modelscope/hub/damo/speech_paraformer-large_asr_nat-zh-cn-16k-common-vocab8404-pytorch/example/asr_example.wav&#39;]&#xA;&#xA;result = model(wav_path)&#xA;print(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples ref to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/python/onnxruntime&#34;&gt;demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deployment Service&lt;/h2&gt; &#xA;&lt;p&gt;FunASR supports deploying pre-trained or further fine-tuned models for service. Currently, it supports the following types of service deployment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File transcription service, Mandarin, CPU version, done&lt;/li&gt; &#xA; &lt;li&gt;The real-time transcription service, Mandarin (CPU), done&lt;/li&gt; &#xA; &lt;li&gt;File transcription service, English, CPU version, done&lt;/li&gt; &#xA; &lt;li&gt;File transcription service, Mandarin, GPU version, in progress&lt;/li&gt; &#xA; &lt;li&gt;and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more detailed information, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/runtime/readme.md&#34;&gt;service deployment documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contact&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community Communication&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter problems in use, you can directly raise Issues on the github page.&lt;/p&gt; &#xA;&lt;p&gt;You can also scan the following DingTalk group or WeChat group QR code to join the community group for communication and discussion.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;DingTalk group&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;WeChat group&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&#xA;    &lt;div align=&#34;left&#34;&gt;&#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/dingding.png&#34; width=&#34;250&#34;&gt;&#xA;    &lt;/div&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/wechat.png&#34; width=&#34;215&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;div align=&#34;left&#34;&gt;&#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/alibaba.png&#34; width=&#34;260&#34;&gt;&#xA;    &lt;/div&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&#xA;    &lt;div align=&#34;left&#34;&gt;&#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/nwpu.png&#34; width=&#34;260&#34;&gt;&#xA;    &lt;/div&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/China_Telecom.png&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/RapidAI.png&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/aihealthx.png&#34; width=&#34;200&#34;&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/docs/images/XVERSE.png&#34; width=&#34;250&#34;&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The contributors can be found in &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/Acknowledge.md&#34;&gt;contributors list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;The MIT License&lt;/a&gt;. FunASR also contains various third-party components and some code modified from other repos under other open source licenses. The use of pretraining model is subject to &lt;a href=&#34;https://raw.githubusercontent.com/modelscope/FunASR/main/MODEL_LICENSE&#34;&gt;model license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{gao2023funasr,&#xA;  author={Zhifu Gao and Zerui Li and Jiaming Wang and Haoneng Luo and Xian Shi and Mengzhe Chen and Yabin Li and Lingyun Zuo and Zhihao Du and Zhangyu Xiao and Shiliang Zhang},&#xA;  title={FunASR: A Fundamental End-to-End Speech Recognition Toolkit},&#xA;  year={2023},&#xA;  booktitle={INTERSPEECH},&#xA;}&#xA;@inproceedings{An2023bat,&#xA;  author={Keyu An and Xian Shi and Shiliang Zhang},&#xA;  title={BAT: Boundary aware transducer for memory-efficient and low-latency ASR},&#xA;  year={2023},&#xA;  booktitle={INTERSPEECH},&#xA;}&#xA;@inproceedings{gao22b_interspeech,&#xA;  author={Zhifu Gao and ShiLiang Zhang and Ian McLoughlin and Zhijie Yan},&#xA;  title={Paraformer: Fast and Accurate Parallel Transformer for Non-autoregressive End-to-End Speech Recognition},&#xA;  year=2022,&#xA;  booktitle={Proc. Interspeech 2022},&#xA;  pages={2063--2067},&#xA;  doi={10.21437/Interspeech.2022-9996}&#xA;}&#xA;@inproceedings{shi2023seaco,&#xA;  author={Xian Shi and Yexin Yang and Zerui Li and Yanni Chen and Zhifu Gao and Shiliang Zhang},&#xA;  title={SeACo-Paraformer: A Non-Autoregressive ASR System with Flexible and Effective Hotword Customization Ability},&#xA;  year={2023},&#xA;  booktitle={ICASSP2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>