<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-01T01:34:27Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>timescale/pgai</title>
    <updated>2024-11-01T01:34:27Z</updated>
    <id>tag:github.com,2024-11-01:/timescale/pgai</id>
    <link href="https://github.com/timescale/pgai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A suite of tools to develop RAG, semantic search, and other AI applications more easily with PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/images/pgai_logo.png&#34; alt=&#34;pgai&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;pgai allows you to develop RAG, semantic search, and other AI applications directly in PostgreSQL&lt;/h3&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/KRdHVXAmkp&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join_us_on_Discord-black?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tsdb.co/gh-pgai-signup&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Try_Timescale_for_free-black?style=for-the-badge&amp;amp;logo=timescale&amp;amp;logoColor=white&#34; alt=&#34;Try Timescale for free&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;pgai simplifies the process of building &lt;a href=&#34;https://en.wikipedia.org/wiki/Similarity_search&#34;&gt;search&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Prompt_engineering#Retrieval-augmented_generation&#34;&gt;Retrieval Augmented Generation&lt;/a&gt; (RAG), and other AI applications with PostgreSQL. It complements popular extensions for vector serch in PostgreSQL like pgvector and pgvectorscale, building on top of their capabilities.&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;The goal of pgai is to make working with AI easier and more accessible to developers. Because data is the foundation of most AI applications, pgai makes it easier to leverage your data in AI workflows. In particular, pgai supports:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Working with embeddings generated from your data:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically create and sync vector embeddings for your data (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#automatically-create-and-sync-llm-embeddings-for-your-data&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Search your data using vector and semantic search (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#search-your-data-using-vector-and-semantic-search&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Implement Retrieval Augmented Generation inside a single SQL statement (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#implement-retrieval-augmented-generation-inside-a-single-sql-statement&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Perform high-performance, cost-efficient ANN search on large vector workloads with &lt;a href=&#34;https://github.com/timescale/pgvectorscale&#34;&gt;pgvectorscale&lt;/a&gt;, which complements pgvector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Leverage LLMs for data processing tasks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Retrieve LLM chat completions from models like Claude Sonnet 3.5, OpenAI GPT4o, Cohere Command, and Llama 3 (via Ollama). (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#usage-of-pgai&#34;&gt;learn more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Reason over your data and facilitate use cases like classification, summarization, and data enrichment on your existing relational data in PostgreSQL (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;see an example&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learn more about pgai:&lt;/strong&gt; To learn more about the pgai extension and why we built it, read &lt;a href=&#34;http://www.timescale.com/blog/pgai-giving-postgresql-developers-ai-engineering-superpowers&#34;&gt;pgai: Giving PostgreSQL Developers AI Engineering Superpowers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: We welcome contributions to pgai! See the &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; page for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Demo: pgai Vectorizer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/ZoC2XYol6Zk?si=atI4XPurEifG0pd5&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/8a71c774-505a-4335-8b34-cdea9dedb558&#34; alt=&#34;Auto Create and Sync Vector Embeddings in 1 Line of SQL (pgai Vectorizer)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Here&#39;s how to get started with pgai:&lt;/p&gt; &#xA;&lt;p&gt;For a quick start, try out automatic data embedding using pgai Vectorizer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Try our cloud offering by creating a &lt;a href=&#34;https://tsdb.co/gh-pgai-signup&#34;&gt;free trial account&lt;/a&gt; and heading over to our pgai Vectorizer &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;or check out our &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer-quick-start.md&#34;&gt;quick start guide&lt;/a&gt; to get up and running in less than 10 minutes with a self-hosted Postgres instance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For other use cases, first &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#installation&#34;&gt;Install pgai&lt;/a&gt; in Timescale Cloud, a pre-built Docker image, or from source. Then, choose your own adventure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automate AI embedding with &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;pgai Vectorizer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use pgai to integrate AI from your provider. Some examples: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/ollama.md&#34;&gt;Ollama&lt;/a&gt; - configure pgai for Ollama, then use the model to embed, chat complete and generate.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;OpenAI&lt;/a&gt; - configure pgai for OpenAI, then use the model to tokenize, embed, chat complete and moderate. This page also includes advanced examples.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/anthropic.md&#34;&gt;Anthropic&lt;/a&gt; - configure pgai for Anthropic, then use the model to generate content.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/cohere.md&#34;&gt;Cohere&lt;/a&gt; - configure pgai for Cohere, then use the model to tokenize, embed, chat complete, classify, and rerank.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Leverage LLMs for data processing tasks such as classification, summarization, and data enrichment (&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;see the OpenAI example&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The fastest ways to run PostgreSQL with the pgai extension are to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your database environment. Either:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#use-a-pre-built-docker-container&#34;&gt;Use a pre-built Docker container&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#use-a-timescale-cloud-service&#34;&gt;Use a Timescale Cloud service&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#install-from-source&#34;&gt;Install from source&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;Enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#use-pgai&#34;&gt;Use pgai&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use a pre-built Docker container&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.timescale.com/self-hosted/latest/install/installation-docker/&#34;&gt;Run the TimescaleDB Docker image&lt;/a&gt;, then &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Use a Timescale Cloud service&lt;/h3&gt; &#xA;&lt;p&gt;pgai is available for &lt;a href=&#34;https://console.cloud.timescale.com/dashboard/create_services&#34;&gt;new&lt;/a&gt; or existing Timescale Cloud services. For any service, &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;p&gt;To install pgai from source on a PostgreSQL server:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install the prerequisite software system-wide&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Python3&lt;/strong&gt;: if running &lt;code&gt;python3 --version&lt;/code&gt; in Terminal returns &lt;code&gt;command not found&lt;/code&gt;, download and install the latest version of &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python3&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pip&lt;/strong&gt;: if running &lt;code&gt;pip --version&lt;/code&gt; in Terminal returns &lt;code&gt;command not found&lt;/code&gt;:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Standard installation&lt;/strong&gt;: use one of the pip &lt;a href=&#34;https://pip.pypa.io/en/stable/installation/#supported-methods&#34;&gt;supported methods&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Virtual environment&lt;/strong&gt;: usually, pip is automatically installed if you are working in a &lt;a href=&#34;https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-and-using-virtual-environments&#34;&gt;Python virtual environment&lt;/a&gt;. If you are running PostgreSQL in a virtual environment, pgai requires several python packages. Set the &lt;code&gt;PYTHONPATH&lt;/code&gt; and &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; environment variables before you start your PostgreSQL server.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PYTHONPATH=/path/to/venv/lib/python3.12/site-packages \&#xA;VIRTUAL_ENV=/path/to/venv \&#xA;pg_ctl -D /path/to/data -l logfile start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;PL/Python&lt;/strong&gt;: follow &lt;a href=&#34;https://github.com/postgres-ai/postgres-howtos/raw/main/0047_how_to_install_postgres_16_with_plpython3u.md&#34;&gt;How to install Postgres 16 with plpython3u: Recipes for macOS, Ubuntu, Debian, CentOS, Docker&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;macOS&lt;/em&gt;: the standard PostgreSQL brew in Homebrew does not include the &lt;code&gt;plpython3&lt;/code&gt; extension. These instructions show how to install from an alternate tap.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/smashedtoatoms/asdf-postgres&#34;&gt;Postgresql plugin&lt;/a&gt; for the &lt;a href=&#34;https://github.com/asdf-vm/asdf&#34;&gt;asdf&lt;/a&gt; version manager&lt;/strong&gt;: set the &lt;code&gt;--with-python&lt;/code&gt; option when installing PostgreSQL:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;POSTGRES_EXTRA_CONFIGURE_OPTIONS=--with-python asdf install postgres 16.3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;pgvector&lt;/strong&gt;: follow the &lt;a href=&#34;https://github.com/pgvector/pgvector?tab=readme-ov-file#installation&#34;&gt;install instructions&lt;/a&gt; from the official repository.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;These extensions are automatically added to your PostgreSQL database when you &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;Enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make this &lt;code&gt;pgai&lt;/code&gt; extension:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#enable-the-pgai-extension-in-your-database&#34;&gt;Enable the pgai extension&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Enable the pgai extension in your database&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Connect to your database with a postgres client like &lt;a href=&#34;https://docs.timescale.com/use-timescale/latest/integrations/query-admin/psql/&#34;&gt;psql v16&lt;/a&gt; or &lt;a href=&#34;https://docs.timescale.com/use-timescale/latest/popsql/&#34;&gt;PopSQL&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;psql -d &#34;postgres://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;database-name&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the pgai extension:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION IF NOT EXISTS ai CASCADE;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;CASCADE&lt;/code&gt; automatically installs &lt;code&gt;pgvector&lt;/code&gt; and &lt;code&gt;plpython3u&lt;/code&gt; extensions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Usage of pgai&lt;/h3&gt; &#xA;&lt;p&gt;The main features in pgai are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Working with embeddings generated from your data:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#automatically-create-and-sync-llm-embeddings-for-your-data&#34;&gt;Automatically create and sync vector embeddings for your data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#search-your-data-using-vector-and-semantic-search&#34;&gt;Search your data using vector and semantic search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#implement-retrieval-augmented-generation-inside-a-single-sql-statement&#34;&gt;Implement Retrieval Augmented Generation inside a single SQL statement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Leverage LLMs for data processing tasks:&lt;/strong&gt; You can use pgai to integrate AI from the following providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/ollama.md&#34;&gt;Ollama&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/openai.md&#34;&gt;OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/anthropic.md&#34;&gt;Anthropic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/cohere.md&#34;&gt;Cohere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/ollama.md&#34;&gt;Llama 3 (via Ollama)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Learn how to &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/moderate.md&#34;&gt;moderate&lt;/a&gt; content directly in the database using triggers and background jobs.&lt;/p&gt; &#xA;&lt;h3&gt;Automatically create and sync LLM embeddings for your data&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/pgvector/pgvector&#34;&gt;pgvector&lt;/a&gt; and &lt;a href=&#34;https://github.com/timescale/pgvectorscale&#34;&gt;pgvectorscale&lt;/a&gt; extensions allow you to store vector embeddings in your database and perform fast and efficient vector search. The &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;pgai Vectorizer&lt;/a&gt; builds on top of these extensions to automatically create and synchronize embeddings for any text data in your database.&lt;/p&gt; &#xA;&lt;p&gt;With one line of code, you can define a vectorizer that creates embeddings for data in a table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT ai.create_vectorizer( &#xA;    &amp;lt;table_name&amp;gt;::regclass,&#xA;    destination =&amp;gt; &amp;lt;embedding_table_name&amp;gt;,&#xA;    embedding =&amp;gt; ai.embedding_openai(&amp;lt;model_name&amp;gt;, &amp;lt;dimensions&amp;gt;),&#xA;    chunking =&amp;gt; ai.chunking_recursive_character_text_splitter(&amp;lt;column_name&amp;gt;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This newly created vectorizer will automatically track any changes to the data in the source table and update the destination embedding table with the new embeddings asynchronously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer.md&#34;&gt;Automate AI embedding with pgai Vectorizer&lt;/a&gt; shows you how to implement embeddings in your own data. When you create Vectorizers in a Timescale Cloud database, embeddings are automatically created and synchronized in the background. On a self-hosted Postgres installation, you use a &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/docs/vectorizer-worker.md&#34;&gt;Vectorizer Worker&lt;/a&gt; to asynchronously processes your vectorizers.&lt;/p&gt; &#xA;&lt;h3&gt;Search your data using vector and semantic search&lt;/h3&gt; &#xA;&lt;p&gt;pgai exposes a set of functions to directly interact with the LLM models through SQL, enabling you to do semantic search directly in your database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT &#xA;   chunk,&#xA;   embedding &amp;lt;=&amp;gt; ai.openai_embed(&amp;lt;embedding_model&amp;gt;, &#39;some-query&#39;) as distance&#xA;FROM &amp;lt;embedding_table&amp;gt;&#xA;ORDER BY distance&#xA;LIMIT 5;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a perfectly normal SQL query. You can combine it with &lt;code&gt;where&lt;/code&gt; clauses and other SQL features to further refine your search. pgai solves the &lt;em&gt;missing where clause in vector search&lt;/em&gt; problem for real.&lt;/p&gt; &#xA;&lt;h3&gt;Implement Retrieval Augmented Generation inside a single SQL statement&lt;/h3&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/#search-your-data-using-vector-and-semantic-search&#34;&gt;semantic search&lt;/a&gt;, pgai LLM functions enable you to implement RAG directly in your database. For example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a RAG function:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE OR REPLACE FUNCTION generate_rag_response(query_text TEXT)&#xA;RETURNS TEXT AS $$&#xA;DECLARE&#xA;   context_chunks TEXT;&#xA;   response TEXT;&#xA;BEGIN&#xA;   -- Perform similarity search to find relevant blog posts&#xA;   SELECT string_agg(title || &#39;: &#39; || chunk, &#39; &#39;) INTO context_chunks&#xA;   FROM (&#xA;       SELECT title, chunk&#xA;       FROM blogs_embedding&#xA;       ORDER BY embedding &amp;lt;=&amp;gt; ai.openai_embed(&#39;text-embedding-3-small&#39;, query_text)&#xA;       LIMIT 3&#xA;   ) AS relevant_posts;&#xA;&#xA;   -- Generate a summary using gpt-4o-mini&#xA;   SELECT ai.openai_chat_complete(&#xA;       &#39;gpt-4o-mini&#39;,&#xA;       jsonb_build_array(&#xA;           jsonb_build_object(&#39;role&#39;, &#39;system&#39;, &#39;content&#39;, &#39;You are a helpful assistant. Use only the context provided to answer the question. Also mention the titles of the blog posts you use to answer the question.&#39;),&#xA;           jsonb_build_object(&#39;role&#39;, &#39;user&#39;, &#39;content&#39;, format(&#39;Context: %s\n\nUser Question: %s\n\nAssistant:&#39;, context_chunks, query_text))&#xA;       )&#xA;   )-&amp;gt;&#39;choices&#39;-&amp;gt;0-&amp;gt;&#39;message&#39;-&amp;gt;&amp;gt;&#39;content&#39; INTO response;&#xA;&#xA;   RETURN response;&#xA;END;&#xA;$$ LANGUAGE plpgsql;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute your function in a SQL query:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT generate_rag_response(&#39;Give me some startup advice&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;pgai is still at an early stage. Now is a great time to help shape the direction of this project; we are currently deciding priorities. Have a look at the &lt;a href=&#34;https://github.com/timescale/pgai/issues&#34;&gt;list of features&lt;/a&gt; we&#39;re thinking of working on. Feel free to comment, expand the list, or hop on the Discussions forum.&lt;/p&gt; &#xA;&lt;p&gt;To get started, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/CONTRIBUTING.md&#34;&gt;how to contribute&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/timescale/pgai/main/DEVELOPMENT.md&#34;&gt;how to set up a dev/test environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About Timescale&lt;/h2&gt; &#xA;&lt;p&gt;Timescale is a PostgreSQL database company. To learn more visit the &lt;a href=&#34;https://www.timescale.com&#34;&gt;timescale.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Timescale Cloud is a high-performance, developer focused, cloud platform that provides PostgreSQL services for the most demanding AI, time-series, analytics, and event workloads. Timescale Cloud is ideal for production applications and provides high availability, streaming backups, upgrades over time, roles and permissions, and great security.&lt;/p&gt;</summary>
  </entry>
</feed>