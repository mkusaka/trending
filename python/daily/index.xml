<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:36:22Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>asottile/pyupgrade</title>
    <updated>2022-10-06T01:36:22Z</updated>
    <id>tag:github.com,2022-10-06:/asottile/pyupgrade</id>
    <link href="https://github.com/asottile/pyupgrade" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool (and pre-commit hook) to automatically upgrade syntax for newer versions of the language.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/asottile/asottile/_build/latest?definitionId=2&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/asottile/asottile/_apis/build/status/asottile.pyupgrade?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/asottile/asottile/_build/latest?definitionId=2&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/coverage/asottile/asottile/2/main.svg?sanitize=true&#34; alt=&#34;Azure DevOps coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://results.pre-commit.ci/latest/github/asottile/pyupgrade/main&#34;&gt;&lt;img src=&#34;https://results.pre-commit.ci/badge/github/asottile/pyupgrade/main.svg?sanitize=true&#34; alt=&#34;pre-commit.ci status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;pyupgrade&lt;/h1&gt; &#xA;&lt;p&gt;A tool (and pre-commit hook) to automatically upgrade syntax for newer versions of the language.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pyupgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;As a pre-commit hook&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/pre-commit/pre-commit&#34;&gt;pre-commit&lt;/a&gt; for instructions&lt;/p&gt; &#xA;&lt;p&gt;Sample &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;-   repo: https://github.com/asottile/pyupgrade&#xA;    rev: v3.0.0&#xA;    hooks:&#xA;    -   id: pyupgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implemented features&lt;/h2&gt; &#xA;&lt;h3&gt;Set literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-set(())&#xA;+set()&#xA;-set([])&#xA;+set()&#xA;-set((1,))&#xA;+{1}&#xA;-set((1, 2))&#xA;+{1, 2}&#xA;-set([1, 2])&#xA;+{1, 2}&#xA;-set(x for x in y)&#xA;+{x for x in y}&#xA;-set([x for x in y])&#xA;+{x for x in y}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dictionary comprehensions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-dict((a, b) for a, b in y)&#xA;+{a: b for a, b in y}&#xA;-dict([(a, b) for a, b in y])&#xA;+{a: b for a, b in y}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format Specifiers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-&#39;{0} {1}&#39;.format(1, 2)&#xA;+&#39;{} {}&#39;.format(1, 2)&#xA;-&#39;{0}&#39; &#39;{1}&#39;.format(1, 2)&#xA;+&#39;{}&#39; &#39;{}&#39;.format(1, 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;printf-style string formatting&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unless &lt;code&gt;--keep-percent-format&lt;/code&gt; is passed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-&#39;%s %s&#39; % (a, b)&#xA;+&#39;{} {}&#39;.format(a, b)&#xA;-&#39;%r %2f&#39; % (a, b)&#xA;+&#39;{!r} {:2f}&#39;.format(a, b)&#xA;-&#39;%(a)s %(b)s&#39; % {&#39;a&#39;: 1, &#39;b&#39;: 2}&#xA;+&#39;{a} {b}&#39;.format(a=1, b=2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unicode literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-u&#39;foo&#39;&#xA;+&#39;foo&#39;&#xA;-u&#34;foo&#34;&#xA;+&#39;foo&#39;&#xA;-u&#39;&#39;&#39;foo&#39;&#39;&#39;&#xA;+&#39;&#39;&#39;foo&#39;&#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Invalid escape sequences&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; # strings with only invalid sequences become raw strings&#xA;-&#39;\d&#39;&#xA;+r&#39;\d&#39;&#xA; # strings with mixed valid / invalid sequences get escaped&#xA;-&#39;\n\d&#39;&#xA;+&#39;\n\\d&#39;&#xA;-u&#39;\d&#39;&#xA;+r&#39;\d&#39;&#xA; # this fixes a syntax error in python3.3+&#xA;-&#39;\N&#39;&#xA;+r&#39;\N&#39;&#xA;&#xA;# note: pyupgrade is timid in one case (that&#39;s usually a mistake)&#xA;# in python2.x `&#39;\u2603&#39;` is the same as `&#39;\\u2603&#39;` without `unicode_literals`&#xA;# but in python3.x, that&#39;s our friend ☃&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;is&lt;/code&gt; / &lt;code&gt;is not&lt;/code&gt; comparison to constant literals&lt;/h3&gt; &#xA;&lt;p&gt;In python3.8+, comparison to literals becomes a &lt;code&gt;SyntaxWarning&lt;/code&gt; as the success of those comparisons is implementation specific (due to common object caching).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-x is 5&#xA;+x == 5&#xA;-x is not 5&#xA;+x != 5&#xA;-x is &#39;foo&#39;&#xA;+x == &#39;foo&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.encode()&lt;/code&gt; to bytes literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-&#39;foo&#39;.encode()&#xA;+b&#39;foo&#39;&#xA;-&#39;foo&#39;.encode(&#39;ascii&#39;)&#xA;+b&#39;foo&#39;&#xA;-&#39;foo&#39;.encode(&#39;utf-8&#39;)&#xA;+b&#39;foo&#39;&#xA;-u&#39;foo&#39;.encode()&#xA;+b&#39;foo&#39;&#xA;-&#39;\xa0&#39;.encode(&#39;latin1&#39;)&#xA;+b&#39;\xa0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;extraneous parens in &lt;code&gt;print(...)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A fix for &lt;a href=&#34;https://github.com/python-modernize/python-modernize/issues/178&#34;&gt;python-modernize/python-modernize#178&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; # ok: printing an empty tuple&#xA; print(())&#xA; # ok: printing a tuple&#xA; print((1,))&#xA; # ok: parenthesized generator argument&#xA; sum((i for i in range(3)), [])&#xA; # fixed:&#xA;-print((&#34;foo&#34;))&#xA;+print(&#34;foo&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;unittest deprecated aliases&lt;/h3&gt; &#xA;&lt;p&gt;Rewrites &lt;a href=&#34;https://docs.python.org/3/library/unittest.html#deprecated-aliases&#34;&gt;deprecated unittest method aliases&lt;/a&gt; to their non-deprecated forms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; from unittest import TestCase&#xA;&#xA;&#xA; class MyTests(TestCase):&#xA;     def test_something(self):&#xA;-        self.failUnlessEqual(1, 1)&#xA;+        self.assertEqual(1, 1)&#xA;-        self.assertEquals(1, 1)&#xA;+        self.assertEqual(1, 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;super()&lt;/code&gt; calls&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class C(Base):&#xA;     def f(self):&#xA;-        super(C, self).f()&#xA;+        super().f()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&#34;new style&#34; classes&lt;/h3&gt; &#xA;&lt;h4&gt;rewrites class declaration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-class C(object): pass&#xA;+class C: pass&#xA;-class C(B, object): pass&#xA;+class C(B): pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;removes &lt;code&gt;__metaclass__ = type&lt;/code&gt; declaration&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; class C:&#xA;-    __metaclass__ = type&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;forced &lt;code&gt;str(&#34;native&#34;)&lt;/code&gt; literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-str()&#xA;+&#39;&#39;&#xA;-str(&#34;foo&#34;)&#xA;+&#34;foo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;.encode(&#34;utf-8&#34;)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-&#34;foo&#34;.encode(&#34;utf-8&#34;)&#xA;+&#34;foo&#34;.encode()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;# coding: ...&lt;/code&gt; comment&lt;/h3&gt; &#xA;&lt;p&gt;as of &lt;a href=&#34;https://www.python.org/dev/peps/pep-3120/&#34;&gt;PEP 3120&lt;/a&gt;, the default encoding for python source is UTF-8&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-# coding: utf-8&#xA; x = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;__future__&lt;/code&gt; import removal&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by default removes &lt;code&gt;nested_scopes&lt;/code&gt;, &lt;code&gt;generators&lt;/code&gt;, &lt;code&gt;with_statement&lt;/code&gt;, &lt;code&gt;absolute_import&lt;/code&gt;, &lt;code&gt;division&lt;/code&gt;, &lt;code&gt;print_function&lt;/code&gt;, &lt;code&gt;unicode_literals&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--py37-plus&lt;/code&gt; will also remove &lt;code&gt;generator_stop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-from __future__ import with_statement&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remove unnecessary py3-compat imports&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-from io import open&#xA;-from six.moves import map&#xA;-from builtins import object  # python-future&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;import replacements&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py36-plus&lt;/code&gt; (and others) will replace imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;see also &lt;a href=&#34;https://github.com/asottile/reorder_python_imports#removing--rewriting-obsolete-six-imports&#34;&gt;reorder-python-imports&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-from collections import deque, Mapping&#xA;+from collections import deque&#xA;+from collections.abc import Mapping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-from typing import Sequence&#xA;+from collections.abc import Sequence&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-from typing_extensions import Concatenate&#xA;+from typing import Concatenate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rewrite &lt;code&gt;mock&lt;/code&gt; imports&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asottile/pyupgrade/issues/314&#34;&gt;Unless &lt;code&gt;--keep-mock&lt;/code&gt; is passed on the commandline&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-from mock import patch&#xA;+from unittest.mock import patch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;yield&lt;/code&gt; =&amp;gt; &lt;code&gt;yield from&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; def f():&#xA;-    for x in y:&#xA;-        yield x&#xA;+    yield from y&#xA;-    for a, b in c:&#xA;-        yield (a, b)&#xA;+    yield from c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python2 and old Python3.x blocks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import sys&#xA;-if sys.version_info &amp;lt; (3,):  # also understands `six.PY2` (and `not`), `six.PY3` (and `not`)&#xA;-    print(&#39;py2&#39;)&#xA;-else:&#xA;-    print(&#39;py3&#39;)&#xA;+print(&#39;py3&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py36-plus&lt;/code&gt; will remove Python &amp;lt;= 3.5 only blocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--py37-plus&lt;/code&gt; will remove Python &amp;lt;= 3.6 only blocks&lt;/li&gt; &#xA; &lt;li&gt;so on and so forth&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; # using --py36-plus for this example&#xA;&#xA; import sys&#xA;-if sys.version_info &amp;lt; (3, 6):&#xA;-    print(&#39;py3.5&#39;)&#xA;-else:&#xA;-    print(&#39;py3.6+&#39;)&#xA;+print(&#39;py3.6+&#39;)&#xA;&#xA;-if sys.version_info &amp;lt;= (3, 5):&#xA;-    print(&#39;py3.5&#39;)&#xA;-else:&#xA;-    print(&#39;py3.6+&#39;)&#xA;+print(&#39;py3.6+&#39;)&#xA;&#xA;-if sys.version_info &amp;gt;= (3, 6):&#xA;-    print(&#39;py3.6+&#39;)&#xA;-else:&#xA;-    print(&#39;py3.5&#39;)&#xA;+print(&#39;py3.6+&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;if&lt;/code&gt; blocks without an &lt;code&gt;else&lt;/code&gt; will not be rewritten as it could introduce a syntax error.&lt;/p&gt; &#xA;&lt;h3&gt;remove &lt;code&gt;six&lt;/code&gt; compatibility code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-six.text_type&#xA;+str&#xA;-six.binary_type&#xA;+bytes&#xA;-six.class_types&#xA;+(type,)&#xA;-six.string_types&#xA;+(str,)&#xA;-six.integer_types&#xA;+(int,)&#xA;-six.unichr&#xA;+chr&#xA;-six.iterbytes&#xA;+iter&#xA;-six.print_(...)&#xA;+print(...)&#xA;-six.exec_(c, g, l)&#xA;+exec(c, g, l)&#xA;-six.advance_iterator(it)&#xA;+next(it)&#xA;-six.next(it)&#xA;+next(it)&#xA;-six.callable(x)&#xA;+callable(x)&#xA;-six.moves.range(x)&#xA;+range(x)&#xA;-six.moves.xrange(x)&#xA;+range(x)&#xA;&#xA;&#xA;-from six import text_type&#xA;-text_type&#xA;+str&#xA;&#xA;-@six.python_2_unicode_compatible&#xA; class C:&#xA;     def __str__(self):&#xA;         return u&#39;C()&#39;&#xA;&#xA;-class C(six.Iterator): pass&#xA;+class C: pass&#xA;&#xA;-class C(six.with_metaclass(M, B)): pass&#xA;+class C(B, metaclass=M): pass&#xA;&#xA;-@six.add_metaclass(M)&#xA;-class C(B): pass&#xA;+class C(B, metaclass=M): pass&#xA;&#xA;-isinstance(..., six.class_types)&#xA;+isinstance(..., type)&#xA;-issubclass(..., six.integer_types)&#xA;+issubclass(..., int)&#xA;-isinstance(..., six.string_types)&#xA;+isinstance(..., str)&#xA;&#xA;-six.b(&#39;...&#39;)&#xA;+b&#39;...&#39;&#xA;-six.u(&#39;...&#39;)&#xA;+&#39;...&#39;&#xA;-six.byte2int(bs)&#xA;+bs[0]&#xA;-six.indexbytes(bs, i)&#xA;+bs[i]&#xA;-six.int2byte(i)&#xA;+bytes((i,))&#xA;-six.iteritems(dct)&#xA;+dct.items()&#xA;-six.iterkeys(dct)&#xA;+dct.keys()&#xA;-six.itervalues(dct)&#xA;+dct.values()&#xA;-next(six.iteritems(dct))&#xA;+next(iter(dct.items()))&#xA;-next(six.iterkeys(dct))&#xA;+next(iter(dct.keys()))&#xA;-next(six.itervalues(dct))&#xA;+next(iter(dct.values()))&#xA;-six.viewitems(dct)&#xA;+dct.items()&#xA;-six.viewkeys(dct)&#xA;+dct.keys()&#xA;-six.viewvalues(dct)&#xA;+dct.values()&#xA;-six.create_unbound_method(fn, cls)&#xA;+fn&#xA;-six.get_unbound_function(meth)&#xA;+meth&#xA;-six.get_method_function(meth)&#xA;+meth.__func__&#xA;-six.get_method_self(meth)&#xA;+meth.__self__&#xA;-six.get_function_closure(fn)&#xA;+fn.__closure__&#xA;-six.get_function_code(fn)&#xA;+fn.__code__&#xA;-six.get_function_defaults(fn)&#xA;+fn.__defaults__&#xA;-six.get_function_globals(fn)&#xA;+fn.__globals__&#xA;-six.raise_from(exc, exc_from)&#xA;+raise exc from exc_from&#xA;-six.reraise(tp, exc, tb)&#xA;+raise exc.with_traceback(tb)&#xA;-six.reraise(*sys.exc_info())&#xA;+raise&#xA;-six.assertCountEqual(self, a1, a2)&#xA;+self.assertCountEqual(a1, a2)&#xA;-six.assertRaisesRegex(self, e, r, fn)&#xA;+self.assertRaisesRegex(e, r, fn)&#xA;-six.assertRegex(self, s, r)&#xA;+self.assertRegex(s, r)&#xA;&#xA; # note: only for *literals*&#xA;-six.ensure_binary(&#39;...&#39;)&#xA;+b&#39;...&#39;&#xA;-six.ensure_str(&#39;...&#39;)&#xA;+&#39;...&#39;&#xA;-six.ensure_text(&#39;...&#39;)&#xA;+&#39;...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;open&lt;/code&gt; alias&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-with io.open(&#39;f.txt&#39;) as f:&#xA;+with open(&#39;f.txt&#39;) as f:&#xA;     ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;redundant &lt;code&gt;open&lt;/code&gt; modes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-open(&#34;foo&#34;, &#34;U&#34;)&#xA;+open(&#34;foo&#34;)&#xA;-open(&#34;foo&#34;, &#34;Ur&#34;)&#xA;+open(&#34;foo&#34;)&#xA;-open(&#34;foo&#34;, &#34;Ub&#34;)&#xA;+open(&#34;foo&#34;, &#34;rb&#34;)&#xA;-open(&#34;foo&#34;, &#34;rUb&#34;)&#xA;+open(&#34;foo&#34;, &#34;rb&#34;)&#xA;-open(&#34;foo&#34;, &#34;r&#34;)&#xA;+open(&#34;foo&#34;)&#xA;-open(&#34;foo&#34;, &#34;rt&#34;)&#xA;+open(&#34;foo&#34;)&#xA;-open(&#34;f&#34;, &#34;r&#34;, encoding=&#34;UTF-8&#34;)&#xA;+open(&#34;f&#34;, encoding=&#34;UTF-8&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;OSError&lt;/code&gt; aliases&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; # also understands:&#xA; # - IOError&#xA; # - WindowsError&#xA; # - mmap.error and uses of `from mmap import error`&#xA; # - select.error and uses of `from select import error`&#xA; # - socket.error and uses of `from socket import error`&#xA;&#xA; def throw():&#xA;-    raise EnvironmentError(&#39;boom&#39;)&#xA;+    raise OSError(&#39;boom&#39;)&#xA;&#xA; def catch():&#xA;     try:&#xA;         throw()&#xA;-    except EnvironmentError:&#xA;+    except OSError:&#xA;         handle_error()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;typing.Text&lt;/code&gt; str alias&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-def f(x: Text) -&amp;gt; None:&#xA;+def f(x: str) -&amp;gt; None:&#xA;     ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unpacking list comprehensions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-foo, bar, baz = [fn(x) for x in items]&#xA;+foo, bar, baz = (fn(x) for x in items)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rewrite &lt;code&gt;xml.etree.cElementTree&lt;/code&gt; to &lt;code&gt;xml.etree.ElementTree&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-import xml.etree.cElementTree as ET&#xA;+import xml.etree.ElementTree as ET&#xA;-from xml.etree.cElementTree import XML&#xA;+from xml.etree.ElementTree import XML&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rewrite &lt;code&gt;type&lt;/code&gt; of primitive&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-type(&#39;&#39;)&#xA;+str&#xA;-type(b&#39;&#39;)&#xA;+bytes&#xA;-type(0)&#xA;+int&#xA;-type(0.)&#xA;+float&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;typing.NamedTuple&lt;/code&gt; / &lt;code&gt;typing.TypedDict&lt;/code&gt; py36+ syntax&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py36-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-NT = typing.NamedTuple(&#39;NT&#39;, [(&#39;a&#39;, int), (&#39;b&#39;, Tuple[str, ...])])&#xA;+class NT(typing.NamedTuple):&#xA;+    a: int&#xA;+    b: Tuple[str, ...]&#xA;&#xA;-D1 = typing.TypedDict(&#39;D1&#39;, a=int, b=str)&#xA;+class D1(typing.TypedDict):&#xA;+    a: int&#xA;+    b: str&#xA;&#xA;-D2 = typing.TypedDict(&#39;D2&#39;, {&#39;a&#39;: int, &#39;b&#39;: str})&#xA;+class D2(typing.TypedDict):&#xA;+    a: int&#xA;+    b: str&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;f-strings&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py36-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-&#39;{foo} {bar}&#39;.format(foo=foo, bar=bar)&#xA;+f&#39;{foo} {bar}&#39;&#xA;-&#39;{} {}&#39;.format(foo, bar)&#xA;+f&#39;{foo} {bar}&#39;&#xA;-&#39;{} {}&#39;.format(foo.bar, baz.womp)&#xA;+f&#39;{foo.bar} {baz.womp}&#39;&#xA;-&#39;{} {}&#39;.format(f(), g())&#xA;+f&#39;{f()} {g()}&#39;&#xA;-&#39;{x}&#39;.format(**locals())&#xA;+f&#39;{x}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;note&lt;/em&gt;: &lt;code&gt;pyupgrade&lt;/code&gt; is intentionally timid and will not create an f-string if it would make the expression longer or if the substitution parameters are sufficiently complicated (as this can decrease readability).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;subprocess.run&lt;/code&gt;: replace &lt;code&gt;universal_newlines&lt;/code&gt; with &lt;code&gt;text&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py37-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-output = subprocess.run([&#39;foo&#39;], universal_newlines=True)&#xA;+output = subprocess.run([&#39;foo&#39;], text=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;subprocess.run&lt;/code&gt;: replace &lt;code&gt;stdout=subprocess.PIPE, stderr=subprocess.PIPE&lt;/code&gt; with &lt;code&gt;capture_output=True&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py37-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-output = subprocess.run([&#39;foo&#39;], stdout=subprocess.PIPE, stderr=subprocess.PIPE)&#xA;+output = subprocess.run([&#39;foo&#39;], capture_output=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;remove parentheses from &lt;code&gt;@functools.lru_cache()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py38-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import functools&#xA;&#xA;-@functools.lru_cache()&#xA;+@functools.lru_cache&#xA; def expensive():&#xA;     ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;replace &lt;code&gt;@functools.lru_cache(maxsize=None)&lt;/code&gt; with shorthand&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py39-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; import functools&#xA;&#xA;-@functools.lru_cache(maxsize=None)&#xA;+@functools.cache&#xA; def expensive():&#xA;     ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pep 585 typing rewrites&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File imports &lt;code&gt;from __future__ import annotations&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unless &lt;code&gt;--keep-runtime-typing&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--py39-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-def f(x: List[str]) -&amp;gt; None:&#xA;+def f(x: list[str]) -&amp;gt; None:&#xA;     ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;remove unnecessary abspath&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--py39-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; from os.path import abspath&#xA;&#xA;-abspath(__file__)&#xA;+__file__&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pep 604 typing rewrites&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File imports &lt;code&gt;from __future__ import annotations&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Unless &lt;code&gt;--keep-runtime-typing&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--py310-plus&lt;/code&gt; is passed on the commandline.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-def f() -&amp;gt; Optional[str]:&#xA;+def f() -&amp;gt; str | None:&#xA;     ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-def f() -&amp;gt; Union[int, str]:&#xA;+def f() -&amp;gt; int | str:&#xA;     ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;remove quoted annotations&lt;/h3&gt; &#xA;&lt;p&gt;Availability:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File imports &lt;code&gt;from __future__ import annotations&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;-def f(x: &#39;queue.Queue[int]&#39;) -&amp;gt; C:&#xA;+def f(x: queue.Queue[int]) -&amp;gt; C:&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>fineanmol/Hacktoberfest2022</title>
    <updated>2022-10-06T01:36:22Z</updated>
    <id>tag:github.com,2022-10-06:/fineanmol/Hacktoberfest2022</id>
    <link href="https://github.com/fineanmol/Hacktoberfest2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make your first Pull Request on Hacktoberfest 2022. Don&#39;t forget to spread love and if you like give us a ⭐️&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Hacktoberfest-2022&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Checkout this Project as well &lt;a href=&#34;https://annoyingsubmitbutton.netlify.app/&#34;&gt;Annoying Button😡&lt;/a&gt; , It&#39;s hacktoberfest github : &lt;a href=&#34;https://github.com/fineanmol/Annoying-submit-button&#34;&gt;https://github.com/fineanmol/Annoying-submit-button&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Submit your PR on this new repo &lt;a href=&#34;https://github.com/fineanmol/hacktoberfest&#34;&gt;Hacktoberfest&lt;/a&gt; , There we are merging all PR.&lt;/h1&gt; &#xA;&lt;p&gt;In this current repo, there are alot of conflicts, we are not merging until all conflicts get resolved. Hacktoberfest { &lt;a href=&#34;https://fineanmol.github.io/Hacktoberfest2022/&#34;&gt;Live Website&lt;/a&gt;}&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a beginner-friendly project to help you get started with your &lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;hacktoberfest&lt;/a&gt;. If you don&#39;t know where to start, feel free to watch the videos linked below, and read the contribution rules. Happy hacking &amp;lt;3 💙 !!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;P.S. Star ⭐ and Share this repository, if you had fun!! 😍&lt;/p&gt; &#xA;&lt;p&gt;Hacktoberfest 2022 &lt;img src=&#34;https://raw.githubusercontent.com/fineanmol/Hacktoberfest2022/master/scripts/Event_Completed.png&#34; alt=&#34;Event Completed&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📌 Videos 📽️:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mq_FIHdxmIk&#34;&gt;Hacktoberfest Intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/DIj2q02gvKs&#34;&gt;How to pull request [Overview]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/zOx5PJTY8CI&#34;&gt;Merge Conflict / comment&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribution Rules📚:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You are allowed to make pull requests that break the rules. We just merge it ;)&lt;/li&gt; &#xA; &lt;li&gt;Do NOT add any build steps e.g npm install (we want to keep this a simple static site)&lt;/li&gt; &#xA; &lt;li&gt;Do NOT remove other content.&lt;/li&gt; &#xA; &lt;li&gt;Styling/code can be pretty, ugly or stupid, big or small as long as it works&lt;/li&gt; &#xA; &lt;li&gt;Add your name to the contributorsList file&lt;/li&gt; &#xA; &lt;li&gt;Try to keep pull requests small to minimize merge conflicts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started 🤩🤗:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork this repo (button on top)&lt;/li&gt; &#xA; &lt;li&gt;Clone on your local machine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;git clone https://github.com/fineanmol/Hacktoberfest2022.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to project directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cd Hacktoberfest2022&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new Branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;git checkout -b my-new-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add your Name to &lt;code&gt;contributors/contributorsList.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;git add .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Commit your changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;git commit -m &#34;Relevant message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then push&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;git push origin my-new-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new pull request from your forked repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Avoid Conflicts {Syncing your fork}&lt;/h2&gt; &#xA;&lt;p&gt;An easy way to avoid conflicts is to add an &#39;upstream&#39; for your git repo, as other PR&#39;s may be merged while you&#39;re working on your branch/fork.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;git remote add upstream https://github.com/fineanmol/Hacktoberfest2022&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can verify that the new remote has been added by typing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;git remote -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pull any new changes from your parent repo simply run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;git merge upstream/master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will give you any eventual conflicts and allow you to easily solve them in your repo. It&#39;s a good idea to use it frequently in between your own commits to make sure that your repo is up to date with its parent.&lt;/p&gt; &#xA;&lt;p&gt;For more information on syncing forks &lt;a href=&#34;https://help.github.com/articles/syncing-a-fork/&#34;&gt;read this article from Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Swags of Hacktoberfest:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Many of the candidates get attracted towards hacktoberfest to get swags . So, after 4 successfully merged pull request as for 2021 you will be eligible to get a Hacktoberfest T-shirt and Some stickers on your doorstep.&lt;/p&gt; &lt;/li&gt;&#xA; &lt;li&gt;&lt;b&gt;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1050/1*4JctIO7irt8hFxBmTvUpiQ.jpeg&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34; alt=&#34;tshirt image&#34;&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1050/1*jkffr74bq5RsQ_xqDhgqYQ.jpeg&#34; width=&#34;400&#34; height=&#34;225&#34; style=&#34;width: 400px; height: 225px;&#34; alt=&#34;stickers image&#34;&gt;&lt;/p&gt; &lt;/b&gt;&lt;/li&gt;&#xA; &lt;b&gt; &lt;/b&gt;&#xA;&lt;/ul&gt;&#xA;&lt;b&gt; &lt;/b&gt;&#xA;&lt;p&gt;&lt;b&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FAQs (Frequently Asked Questions)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Who all can contribute?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Anyone with a github account and who is signed up for &lt;a href=&#34;https://hacktoberfest.digitalocean.com/&#34;&gt;hacktoberfest&lt;/a&gt; :)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Are you getting paid for this?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sadly no. But we think we should. This is 100% unofficial and we do it for fun, fame and glory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Who are you and why are you doing this?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We are two programmers from India &lt;a href=&#34;https://www.linkedin.com/in/fineanmol/&#34;&gt;Anmol&lt;/a&gt; and &lt;a href=&#34;https://github.com/ritesh2905&#34;&gt;Ritesh&lt;/a&gt;. We are doing this because we love Open Source and Hacktoberfest. We want to make it easier for people to get started with Hacktoberfest and Open Source.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Why are you not using digitalocean?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Because we only know JavaScript and suck at servers. We use &lt;a href=&#34;https://zeit.co/now&#34;&gt;now&lt;/a&gt; instead.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Should I come closer to the text saying &#39;Don&#39;t come closer&#39; on the left side of the home tab ?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Nope.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How many pull request (PR) must be made, if I want to get an awesome tshirt from Hacktoberfest 2022?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;How do I track my progress to get an awesome shirt from Hacktoberfest 2022?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://hacktoberfest.digitalocean.com/profile/&#34;&gt;go to :&lt;/a&gt;. (Check Out Your Own Stats at Right Top)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;What is the duration of Hacktoberfest 2022?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It is from 1st october to 31st october 2022...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;What is the event for?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For the open source community engagement&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;&lt;em&gt;We will do our best to merge as much as possible from everyone. However, time is limited and the merge conflicts are horrible &lt;span&gt;😲&lt;/span&gt; &amp;lt;3&lt;/em&gt;&lt;/h6&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Our Top Contributors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/fineanmol/Hacktoberfest2022/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=fineanmol/Hacktoberfest2022&#34;&gt; &lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aws-cloudformation/cfn-lint</title>
    <updated>2022-10-06T01:36:22Z</updated>
    <id>tag:github.com,2022-10-06:/aws-cloudformation/cfn-lint</id>
    <link href="https://github.com/aws-cloudformation/cfn-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CloudFormation Linter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS CloudFormation Linter&lt;/h1&gt; &#xA;&lt;img alt=&#34;[cfn-lint logo]&#34; src=&#34;https://github.com/aws-cloudformation/cfn-python-lint/raw/main/logo.png?raw=true&#34; width=&#34;150&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws-cloudformation/cfn-python-lint/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/aws-cloudformation/cfn-python-lint/actions/workflows/test.yaml/badge.svg?branch=main&#34; alt=&#34;Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/cfn-lint&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/cfn-lint.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/cfn-lint&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/cfn-lint/week&#34; alt=&#34;PyPI downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/cfn-lint&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/cfn-lint/month&#34; alt=&#34;PyPI downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/aws-cloudformation/cfn-python-lint&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/aws-cloudformation/cfn-lint/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/KENDm6DHCv&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/981586120448020580?logo=discord&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Validate AWS CloudFormation yaml/json templates against the &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html&#34;&gt;AWS CloudFormation Resource Specification&lt;/a&gt; and additional checks. Includes checking valid values for resource properties and best practices.&lt;/p&gt; &#xA;&lt;h3&gt;Warning&lt;/h3&gt; &#xA;&lt;p&gt;This is an attempt to provide validation for AWS CloudFormation templates properties and their values. For values things can get pretty complicated (mappings, joins, splits, conditions, and nesting those functions inside each other) so it&#39;s a best effort to validate those values but the promise is to not fail if we can&#39;t understand or translate all the things that could be going on.&lt;/p&gt; &#xA;&lt;h4&gt;Serverless Application Model&lt;/h4&gt; &#xA;&lt;p&gt;The Serverless Application Model (SAM) is supported by the linter. The template is transformed using &lt;a href=&#34;https://github.com/awslabs/serverless-application-model&#34;&gt;AWS SAM&lt;/a&gt; before the linter processes the template.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;To get information about the &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-aws-serverless.html&#34;&gt;SAM Transformation&lt;/a&gt;, run the linter with &lt;code&gt;--info&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Python 3.7+ is supported.&lt;/p&gt; &#xA;&lt;h3&gt;Pip&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install cfn-lint&lt;/code&gt;. If pip is not available, run &lt;code&gt;python setup.py clean --all&lt;/code&gt; then &lt;code&gt;python setup.py install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;brew install cfn-lint&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;cfn-python-lint&lt;/code&gt; source tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build --tag cfn-python-lint:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In repository to be linted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -v `pwd`:/data cfn-python-lint:latest /data/template.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Editor Plugins&lt;/h3&gt; &#xA;&lt;p&gt;There are IDE plugins available to get direct linter feedback from you favorite editor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atom.io/packages/atom-cfn-lint&#34;&gt;Atom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/CfnLint&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeoVim 0.2.0+/Vim 8 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/w0rp/ale#supported-languages&#34;&gt;ALE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/joenye/coc-cfn-lint&#34;&gt;Coc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/speshak/vim-cfn&#34;&gt;Syntastic&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packagecontrol.io/packages/SublimeLinter-contrib-cloudformation&#34;&gt;Sublime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=kddejong.vscode-cfn-lint&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/10973-cfn-lint&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/marketplace/actions/cfn-lint-action&#34;&gt;GitHub Action&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/PatMyron/cfn-lint-online&#34;&gt;Online demo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint template.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint -t template.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Multiple files can be linted by either specifying multiple specific files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint template1.yaml template2.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint -t template1.yaml template2.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or by using wildcards (globbing):&lt;/p&gt; &#xA;&lt;p&gt;Lint all &lt;code&gt;yaml&lt;/code&gt; files in &lt;code&gt;path&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint path/*.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lint all &lt;code&gt;yaml&lt;/code&gt; files in &lt;code&gt;path&lt;/code&gt; and all subdirectories (recursive):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint path/**/*.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: If using sh/bash/zsh, you must enable globbing. (&lt;code&gt;setopt -s globstar&lt;/code&gt; for sh/bash, &lt;code&gt;setopt extended_glob&lt;/code&gt; for zsh).&lt;/p&gt; &#xA;&lt;h5&gt;Exit Codes&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;cfn-lint&lt;/code&gt; will return a non zero exit if there are any issues with your template. The value is dependent on the severity of the issues found. For each level of discovered error &lt;code&gt;cfn-lint&lt;/code&gt; will use bitwise OR to determine the final exit code. This will result in these possibilities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0 is no issue was found&lt;/li&gt; &#xA; &lt;li&gt;2 is an error&lt;/li&gt; &#xA; &lt;li&gt;4 is a warning&lt;/li&gt; &#xA; &lt;li&gt;6 is an error and a warning&lt;/li&gt; &#xA; &lt;li&gt;8 is an informational&lt;/li&gt; &#xA; &lt;li&gt;10 is an error and informational&lt;/li&gt; &#xA; &lt;li&gt;12 is an warning and informational&lt;/li&gt; &#xA; &lt;li&gt;14 is an error and a warning and an informational&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Specifying the template as an input stream&lt;/h5&gt; &#xA;&lt;p&gt;The template to be linted can also be passed using standard input:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cat path/template.yaml | cfn-lint -&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Specifying the template with other parameters&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint -r us-east-1 ap-south-1 -- template.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cfn-lint -r us-east-1 ap-south-1 -t template.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Command Line&lt;/h3&gt; &#xA;&lt;p&gt;From a command prompt run &lt;code&gt;cfn-lint &amp;lt;path to template&amp;gt;&lt;/code&gt; to run standard linting of the template.&lt;/p&gt; &#xA;&lt;h3&gt;Config File&lt;/h3&gt; &#xA;&lt;p&gt;It will look for a configuration file in the following locations (by order of preference):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.cfnlintrc&lt;/code&gt;, &lt;code&gt;.cfnlintrc.yaml&lt;/code&gt; or &lt;code&gt;.cfnlintrc.yml&lt;/code&gt; in the current working directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.cfnlintrc&lt;/code&gt; for the home directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In that file you can specify settings from the parameter section below.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;templates:&#xA;  - test/fixtures/templates/good/**/*.yaml&#xA;ignore_templates:&#xA;  - codebuild.yaml&#xA;include_checks:&#xA;  - I&#xA;custom_rules: custom_rules.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;p&gt;Optional parameters:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command Line&lt;/th&gt; &#xA;   &lt;th&gt;Metadata&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-h, --help&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get description of cfn-lint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-z, --custom-rules&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filename&lt;/td&gt; &#xA;   &lt;td&gt;Text file containing user-defined custom rules. See &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/#Custom-Rules&#34;&gt;here&lt;/a&gt; for more information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-t, --template&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filename&lt;/td&gt; &#xA;   &lt;td&gt;Alternative way to specify Template file path to the file that needs to be tested by cfn-lint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-f, --format&lt;/td&gt; &#xA;   &lt;td&gt;format&lt;/td&gt; &#xA;   &lt;td&gt;quiet, parseable, json, junit, pretty, sarif&lt;/td&gt; &#xA;   &lt;td&gt;Output format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-l, --list-rules&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List all the rules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-r, --regions&lt;/td&gt; &#xA;   &lt;td&gt;regions&lt;/td&gt; &#xA;   &lt;td&gt;[REGIONS [REGIONS ...]], ALL_REGIONS&lt;/td&gt; &#xA;   &lt;td&gt;Test the template against many regions. &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html&#34;&gt;Supported regions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-b, --ignore-bad-template&lt;/td&gt; &#xA;   &lt;td&gt;ignore_bad_template&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ignores bad template errors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--ignore-templates&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;IGNORE_TEMPLATES [IGNORE_TEMPLATES ...]&lt;/td&gt; &#xA;   &lt;td&gt;Ignore templates from being scanned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-a, --append-rules&lt;/td&gt; &#xA;   &lt;td&gt;append_rules&lt;/td&gt; &#xA;   &lt;td&gt;[RULESPATH [RULESPATH ...]]&lt;/td&gt; &#xA;   &lt;td&gt;Specify one or more rules paths using one or more --append-rules arguments. Each path can be either a directory containing python files, or an import path to a module.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-i, --ignore-checks&lt;/td&gt; &#xA;   &lt;td&gt;ignore_checks&lt;/td&gt; &#xA;   &lt;td&gt;[IGNORE_CHECKS [IGNORE_CHECKS ...]]&lt;/td&gt; &#xA;   &lt;td&gt;Only check rules whose ID do not match or prefix these values. Examples: &lt;br&gt;- A value of &lt;code&gt;W&lt;/code&gt; will disable all warnings&lt;br&gt;- &lt;code&gt;W2&lt;/code&gt; disables all Warnings for Parameter rules.&lt;br&gt;- &lt;code&gt;W2001&lt;/code&gt; will disable rule &lt;code&gt;W2001&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-e, --include-experimental&lt;/td&gt; &#xA;   &lt;td&gt;include_experimental&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Whether rules that still in an experimental state should be included in the checks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-c, --include-checks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;INCLUDE_CHECKS [INCLUDE_CHECKS ...]&lt;/td&gt; &#xA;   &lt;td&gt;Include rules whose id match these values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-m, --mandatory-checks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Rules to check regardless of ignore configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-x, --configure-rule&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CONFIGURE_RULES [CONFIGURE_RULES ...]&lt;/td&gt; &#xA;   &lt;td&gt;Provide configuration for a rule. Format RuleId:key=value. Example: E3012:strict=false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-D, --debug&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify to enable debug logging. Debug logging outputs detailed information about rules processing, useful for debugging rules.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-I, --info&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify to enable logging. Outputs additional information about the template processing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-u, --update-specs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Update the &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html&#34;&gt;CloudFormation Resource Specifications&lt;/a&gt;. You may need sudo to run this. You will need internet access when running this command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-o, --override-spec&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filename&lt;/td&gt; &#xA;   &lt;td&gt;Spec-style file containing custom definitions. Can be used to override CloudFormation specifications. More info &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/#customize-specifications&#34;&gt;here&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-g, --build-graph&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a file in the same directory as the template that models the template&#39;s resources in &lt;a href=&#34;https://en.wikipedia.org/wiki/DOT_(graph_description_language)&#34;&gt;DOT format&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-s, --registry-schemas&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;one or more directories of &lt;a href=&#34;https://aws.amazon.com/blogs/aws/cloudformation-update-cli-third-party-resource-support-registry/&#34;&gt;CloudFormation Registry&lt;/a&gt; &lt;a href=&#34;https://github.com/aws-cloudformation/aws-cloudformation-resource-schema/&#34;&gt;Resource Schemas&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;-v, --version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Version of cfn-lint&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Info Rules&lt;/h3&gt; &#xA;&lt;p&gt;To maintain backwards compatibility &lt;code&gt;info&lt;/code&gt; rules are not included by default. To include these rules you will need to include &lt;code&gt;-c I&lt;/code&gt; or &lt;code&gt;--include-checks I&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Metadata&lt;/h3&gt; &#xA;&lt;h4&gt;Template Based Metadata&lt;/h4&gt; &#xA;&lt;p&gt;Inside the root level Metadata key you can configure cfn-lint using the supported parameters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Metadata:&#xA;  cfn-lint:&#xA;    config:&#xA;      regions:&#xA;        - us-east-1&#xA;        - us-east-2&#xA;      ignore_checks:&#xA;        - E2530&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Resource Based Metadata&lt;/h4&gt; &#xA;&lt;p&gt;Inside a resources Metadata key you can configure cfn-lint to ignore checks. This will filter out failures for the resource in which the Metadata belongs. Keep in mind that &lt;a href=&#34;https://github.com/awslabs/serverless-application-model/issues/450#issuecomment-643420308&#34;&gt;&lt;code&gt;AWS::Serverless&lt;/code&gt; resources may lose metadata during the Serverless transform&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Resources:&#xA;  myInstance:&#xA;    Type: AWS::EC2::Instance&#xA;    Metadata:&#xA;      cfn-lint:&#xA;        config:&#xA;          ignore_checks:&#xA;            - E3030&#xA;    Properties:&#xA;      InstanceType: nt.x4superlarge&#xA;      ImageId: ami-abc1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Precedence&lt;/h3&gt; &#xA;&lt;p&gt;cfn-lint applies configurations from several sources. The rules at lower levels are overridden by those at higher levels.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;cfnlintrc configurations&lt;/li&gt; &#xA; &lt;li&gt;Template Metadata configurations&lt;/li&gt; &#xA; &lt;li&gt;CLI parameters&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Configure Rules&lt;/h3&gt; &#xA;&lt;p&gt;Certain rules support configuration properties. You can configure these rules by using &lt;code&gt;configure_rules&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;From the command line the format is &lt;code&gt;RuleId:key=value&lt;/code&gt;, for example: &lt;code&gt;E3012:strict=false&lt;/code&gt;. From the cfnlintrc or Metadata section the format is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Metadata:&#xA;  cfn-lint:&#xA;    config:&#xA;      configure_rules:&#xA;        RuleId:&#xA;          key: value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The configurable rules have a non-empty Config entry in the table &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/docs/rules.md#rules-1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started Guides&lt;/h3&gt; &#xA;&lt;p&gt;There are &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/docs/getting_started&#34;&gt;getting started guides&lt;/a&gt; available in the documentation section to help with integrating &lt;code&gt;cfn-lint&lt;/code&gt; or creating rules.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;This linter checks the AWS CloudFormation template by processing a collection of Rules, where every rule handles a specific function check or validation of the template.&lt;/p&gt; &#xA;&lt;p&gt;This collection of rules can be extended with custom rules using the &lt;code&gt;--append-rules&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;More information describing how rules are set up and an overview of all the Rules that are applied by this linter are documented &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/docs/rules.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Rules&lt;/h2&gt; &#xA;&lt;p&gt;The linter supports the creation of custom one-line rules which compare any resource with a property using pre-defined operators. These custom rules take the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;Resource Type&amp;gt; &amp;lt;Property[*]&amp;gt; &amp;lt;Operator&amp;gt; &amp;lt;Value&amp;gt; [Error Level] [Custom Error Message]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;A separate custom rule text file must be created.&lt;/p&gt; &#xA;&lt;p&gt;The example below validates &lt;code&gt;example_template.yml&lt;/code&gt; does not use any EC2 instances of size &lt;code&gt;m4.16xlarge&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;custom_rule.txt&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AWS::EC2::Instance InstanceSize NOT_EQUALS &#34;m4.16xlarge&#34; WARN &#34;This is an expensive instance type, don&#39;t use it&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;example_template.yml&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: &#34;2010-09-09&#34;&#xA;Resources:&#xA;        myInstance:&#xA;                Type: AWS::EC2::Instance&#xA;                Properties:&#xA;                        InstanceType: m4.16xlarge&#xA;                        ImageId: ami-asdfef&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The custom rule can be added to the &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/#Config-File&#34;&gt;configuration file&lt;/a&gt; or ran as a &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/#Parameters&#34;&gt;command line argument&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The linter will produce the following output, running &lt;code&gt;cfn-lint example_template.yml -z custom_rules.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;W9001  This is an expensive instance type, don&#39;t use it&#xA;mqtemplate.yml:6:17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information describing how custom rules are setup and an overview of all operators available is documented &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/docs/custom_rules.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customize specifications&lt;/h2&gt; &#xA;&lt;p&gt;The linter follows the &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html&#34;&gt;AWS CloudFormation Resource Specifications&lt;/a&gt; by default. However, for your use case specific requirements might exist. For example, within your organisation it might be mandatory to use &lt;a href=&#34;https://aws.amazon.com/answers/account-management/aws-tagging-strategies/&#34;&gt;Tagging&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The linter provides the possibility to implement these customized specifications using the &lt;code&gt;--override-spec&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;p&gt;More information about how this feature works is documented &lt;a href=&#34;https://raw.githubusercontent.com/aws-cloudformation/cfn-lint/main/docs/customize_specifications.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;pre-commit&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like cfn-lint to be run automatically when making changes to files in your Git repository, you can install &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; and add the following text to your repositories&#39; &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;- repo: https://github.com/aws-cloudformation/cfn-python-lint&#xA;  rev: v0.66.1  # The version of cfn-lint to use&#xA;  hooks:&#xA;    - id: cfn-python-lint&#xA;      files: path/to/cfn/dir/.*\.(json|yml|yaml)$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you exclude the &lt;code&gt;files:&lt;/code&gt; line above, every json/yml/yaml file will be checked.&lt;/li&gt; &#xA; &lt;li&gt;You can see available cfn-lint versions on the &lt;a href=&#34;https://github.com/aws-cloudformation/cfn-python-lint/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>