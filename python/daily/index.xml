<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-18T01:34:07Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cupy/cupy</title>
    <updated>2024-09-18T01:34:07Z</updated>
    <id>tag:github.com,2024-09-18:/cupy/cupy</id>
    <link href="https://github.com/cupy/cupy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NumPy &amp; SciPy for GPU&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/cupy/cupy/main/docs/image/cupy_logo_1000px.png&#34; width=&#34;400&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h1&gt;CuPy : NumPy &amp;amp; SciPy for GPU&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/cupy&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/cupy&#34; alt=&#34;pypi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/cupy&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/vn/conda-forge/cupy&#34; alt=&#34;Conda&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cupy/cupy&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/cupy/cupy&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/cupy/community&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/cupy/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/CuPy_Team&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/CuPy_Team?label=%40CuPy_Team&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cupy.dev/&#34;&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://docs.cupy.dev/en/stable/install.html&#34;&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://docs.cupy.dev/en/stable/user_guide/basic.html&#34;&gt;&lt;strong&gt;Tutorial&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/cupy/cupy/tree/main/examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://docs.cupy.dev/en/stable/&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://docs.cupy.dev/en/stable/reference/&#34;&gt;&lt;strong&gt;API Reference&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://groups.google.com/forum/#!forum/cupy&#34;&gt;&lt;strong&gt;Forum&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CuPy is a NumPy/SciPy-compatible array library for GPU-accelerated computing with Python. CuPy acts as a &lt;a href=&#34;https://docs.cupy.dev/en/stable/reference/comparison.html&#34;&gt;drop-in replacement&lt;/a&gt; to run existing NumPy/SciPy code on NVIDIA CUDA or AMD ROCm platforms.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import cupy as cp&#xA;&amp;gt;&amp;gt;&amp;gt; x = cp.arange(6).reshape(2, 3).astype(&#39;f&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; x&#xA;array([[ 0.,  1.,  2.],&#xA;       [ 3.,  4.,  5.]], dtype=float32)&#xA;&amp;gt;&amp;gt;&amp;gt; x.sum(axis=1)&#xA;array([  3.,  12.], dtype=float32)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CuPy also provides access to low-level CUDA features. You can pass &lt;code&gt;ndarray&lt;/code&gt; to existing CUDA C/C++ programs via &lt;a href=&#34;https://docs.cupy.dev/en/stable/user_guide/kernel.html#raw-kernels&#34;&gt;RawKernels&lt;/a&gt;, use &lt;a href=&#34;https://docs.cupy.dev/en/stable/reference/cuda.html&#34;&gt;Streams&lt;/a&gt; for performance, or even call &lt;a href=&#34;https://docs.cupy.dev/en/stable/reference/cuda.html#runtime-api&#34;&gt;CUDA Runtime APIs&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Pip&lt;/h3&gt; &#xA;&lt;p&gt;Binary packages (wheels) are available for Linux and Windows on &lt;a href=&#34;https://pypi.org/org/cupy/&#34;&gt;PyPI&lt;/a&gt;. Choose the right package for your platform.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CUDA 11.x (11.2+)&lt;/td&gt; &#xA;   &lt;td&gt;x86_64 / aarch64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cupy-cuda11x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CUDA 12.x&lt;/td&gt; &#xA;   &lt;td&gt;x86_64 / aarch64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cupy-cuda12x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROCm 4.3 (&lt;em&gt;&lt;a href=&#34;https://docs.cupy.dev/en/latest/install.html#using-cupy-on-amd-gpu-experimental&#34;&gt;experimental&lt;/a&gt;&lt;/em&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cupy-rocm-4-3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROCm 5.0 (&lt;em&gt;&lt;a href=&#34;https://docs.cupy.dev/en/latest/install.html#using-cupy-on-amd-gpu-experimental&#34;&gt;experimental&lt;/a&gt;&lt;/em&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;x86_64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install cupy-rocm-5-0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; To install pre-releases, append &lt;code&gt;--pre -U -f https://pip.cupy.dev/pre&lt;/code&gt; (e.g., &lt;code&gt;pip install cupy-cuda11x --pre -U -f https://pip.cupy.dev/pre&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Conda&lt;/h3&gt; &#xA;&lt;p&gt;Binary packages are also available for Linux and Windows on &lt;a href=&#34;https://anaconda.org/conda-forge/cupy&#34;&gt;Conda-Forge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CUDA&lt;/td&gt; &#xA;   &lt;td&gt;x86_64 / aarch64 / ppc64le&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;conda install -c conda-forge cupy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you need a slim installation (without also getting CUDA dependencies installed), you can do &lt;code&gt;conda install -c conda-forge cupy-core&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to use a particular CUDA version (say 12.0), you can use the &lt;code&gt;cuda-version&lt;/code&gt; metapackage to select the version, e.g. &lt;code&gt;conda install -c conda-forge cupy cuda-version=12.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; If you encounter any problem with CuPy installed from &lt;code&gt;conda-forge&lt;/code&gt;, please feel free to report to &lt;a href=&#34;https://github.com/conda-forge/cupy-feedstock/issues&#34;&gt;cupy-feedstock&lt;/a&gt;, and we will help investigate if it is just a packaging issue in &lt;code&gt;conda-forge&lt;/code&gt;&#39;s recipe or a real issue in CuPy.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/overview.html&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt; to run &lt;a href=&#34;https://hub.docker.com/r/cupy/cupy&#34;&gt;CuPy container images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --gpus all -it cupy/cupy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cupy.dev/en/stable/install.html&#34;&gt;Installation Guide&lt;/a&gt; - instructions on building from source&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cupy/cupy/releases&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cupy/cupy/wiki/Projects-using-CuPy&#34;&gt;Projects using CuPy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cupy.dev/en/stable/contribution.html&#34;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcfall21-a31149/&#34;&gt;GPU Acceleration in Python using CuPy and Numba (GTC November 2021 Technical Session)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/awthomp/cusignal-icassp-tutorial&#34;&gt;GPU-Acceleration of Signal Processing Workflows using CuPy and cuSignal[^1] (ICASSP&#39;21 Tutorial)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^1]: cuSignal is now part of CuPy starting v13.0.0.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License (see &lt;code&gt;LICENSE&lt;/code&gt; file).&lt;/p&gt; &#xA;&lt;p&gt;CuPy is designed based on NumPy&#39;s API and SciPy&#39;s API (see &lt;code&gt;docs/source/license.rst&lt;/code&gt; file).&lt;/p&gt; &#xA;&lt;p&gt;CuPy is being developed and maintained by &lt;a href=&#34;https://www.preferred.jp/en/&#34;&gt;Preferred Networks&lt;/a&gt; and &lt;a href=&#34;https://github.com/cupy/cupy/graphs/contributors&#34;&gt;community contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;p&gt;Ryosuke Okuta, Yuya Unno, Daisuke Nishino, Shohei Hido and Crissman Loomis. &lt;strong&gt;CuPy: A NumPy-Compatible Library for NVIDIA GPU Calculations.&lt;/strong&gt; &lt;em&gt;Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Thirty-first Annual Conference on Neural Information Processing Systems (NIPS)&lt;/em&gt;, (2017). [&lt;a href=&#34;http://learningsys.org/nips17/assets/papers/paper_16.pdf&#34;&gt;PDF&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{cupy_learningsys2017,&#xA;  author       = &#34;Okuta, Ryosuke and Unno, Yuya and Nishino, Daisuke and Hido, Shohei and Loomis, Crissman&#34;,&#xA;  title        = &#34;CuPy: A NumPy-Compatible Library for NVIDIA GPU Calculations&#34;,&#xA;  booktitle    = &#34;Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Thirty-first Annual Conference on Neural Information Processing Systems (NIPS)&#34;,&#xA;  year         = &#34;2017&#34;,&#xA;  url          = &#34;http://learningsys.org/nips17/assets/papers/paper_16.pdf&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pypa/pipenv</title>
    <updated>2024-09-18T01:34:07Z</updated>
    <id>tag:github.com,2024-09-18:/pypa/pipenv</id>
    <link href="https://github.com/pypa/pipenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python Development Workflow for Humans.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pipenv: Python Development Workflow for Humans&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://python.org/pypi/pipenv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pipenv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://python.org/pypi/pipenv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/pipenv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pypa/pipenv/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/pypa/pipenv/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://python.org/pypi/pipenv&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/pipenv.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pipenv&lt;/strong&gt; is a Python virtualenv management tool that supports a multitude of systems and nicely bridges the gaps between pip, python (using system python, pyenv or asdf) and virtualenv. &lt;em&gt;Linux, macOS, and Windows are all first-class citizens in pipenv.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pipenv automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your &lt;code&gt;Pipfile&lt;/code&gt; as you install/uninstall packages. It also generates a project &lt;code&gt;Pipfile.lock&lt;/code&gt;, which is used to produce deterministic builds.&lt;/p&gt; &#xA;&lt;p&gt;Pipenv is primarily meant to provide users and developers of applications with an easy method to arrive at a consistent working project environment.&lt;/p&gt; &#xA;&lt;p&gt;The problems that Pipenv seeks to solve are multi-faceted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You no longer need to use &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt; separately: they work together.&lt;/li&gt; &#xA; &lt;li&gt;Managing a &lt;code&gt;requirements.txt&lt;/code&gt; file with package hashes can be problematic. Pipenv uses &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt; to separate abstract dependency declarations from the last tested combination.&lt;/li&gt; &#xA; &lt;li&gt;Hashes are documented in the lock file which are verified during install. Security considerations are put first.&lt;/li&gt; &#xA; &lt;li&gt;Strongly encourage the use of the latest versions of dependencies to minimize security risks &lt;a href=&#34;https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities&#34;&gt;arising from outdated components&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Gives you insight into your dependency graph (e.g. &lt;code&gt;$ pipenv graph&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Streamline development workflow by supporting local customizations with &lt;code&gt;.env&lt;/code&gt; files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table Of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#pipenv-python-development-workflow-for-humans&#34;&gt;Pipenv&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#basic-concepts&#34;&gt;Basic Concepts&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#other-commands&#34;&gt;Other Commands&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#shell-completion&#34;&gt;Shell Completion&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#usage-examples&#34;&gt;Usage Examples&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#locate-the-project&#34;&gt;Locate the Project&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#locate-the-virtualenv&#34;&gt;Locate the virtualenv&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#locate-the-python-interpreter&#34;&gt;Locate the Python Interpreter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#install-packages&#34;&gt;Install Packages&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#installing-from-git&#34;&gt;Installing from git&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#install-a-dev-dependency&#34;&gt;Install a dev dependency&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#show-a-dependency-graph&#34;&gt;Show a dependency graph&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#generate-a-lockfile&#34;&gt;Generate a lockfile&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#install-all-dev-dependencies&#34;&gt;Install all dev dependencies&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#uninstall-everything&#34;&gt;Uninstall everything&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#use-the-shell&#34;&gt;Use the shell&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pypa/pipenv/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pipenv can be installed with Python 3.7 and above.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For most users, we recommend installing Pipenv using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install --user pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re using Fedora:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf install pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re using FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install py39-pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re using Gentoo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo emerge pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you&#39;re using Void Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xbps-install -S python3-pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, some users prefer to use &lt;a href=&#34;https://pypi.org/p/pipx&#34;&gt;Pipx&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pipx install pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, some users prefer to use Python pip module&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pip install pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://pipenv.pypa.io/en/latest/#install-pipenv-today&#34;&gt;documentation&lt;/a&gt; for latest instructions.&lt;/p&gt; &#xA;&lt;p&gt;✨🍰✨&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enables truly &lt;em&gt;deterministic builds&lt;/em&gt;, while easily specifying &lt;em&gt;only what you want&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generates and checks file hashes for locked dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Automatically install required Pythons, if &lt;code&gt;pyenv&lt;/code&gt; or &lt;code&gt;asdf&lt;/code&gt; is available.&lt;/li&gt; &#xA; &lt;li&gt;Automatically finds your project home, recursively, by looking for a &lt;code&gt;Pipfile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automatically generates a &lt;code&gt;Pipfile&lt;/code&gt;, if one doesn&#39;t exist.&lt;/li&gt; &#xA; &lt;li&gt;Automatically creates a virtualenv in a standard location.&lt;/li&gt; &#xA; &lt;li&gt;Automatically adds/removes packages to a &lt;code&gt;Pipfile&lt;/code&gt; when they are installed/uninstalled.&lt;/li&gt; &#xA; &lt;li&gt;Automatically loads &lt;code&gt;.env&lt;/code&gt; files, if they exist.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For command reference, see &lt;a href=&#34;https://pipenv.pypa.io/en/latest/commands/&#34;&gt;Commands&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Concepts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A virtualenv will automatically be created, when one doesn&#39;t exist.&lt;/li&gt; &#xA; &lt;li&gt;When no parameters are passed to &lt;code&gt;install&lt;/code&gt;, all packages &lt;code&gt;[packages]&lt;/code&gt; specified will be installed.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, whatever virtualenv defaults to will be the default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Shell Completion&lt;/h3&gt; &#xA;&lt;p&gt;To enable completion in fish, add this to your configuration &lt;code&gt;~/.config/fish/completions/pipenv.fish&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eval (env _PIPENV_COMPLETE=fish_source pipenv)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://github.com/fisherman/pipenv&#34;&gt;fish plugin&lt;/a&gt;, which will automatically activate your subshells for you!&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, with zsh, add this to your configuration &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eval &#34;$(_PIPENV_COMPLETE=zsh_source pipenv)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, with bash, add this to your configuration &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.bash_profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eval &#34;$(_PIPENV_COMPLETE=bash_source pipenv)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Magic shell completions are now enabled!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv --help&#xA;Usage: pipenv [OPTIONS] COMMAND [ARGS]...&#xA;&#xA;Options:&#xA;  --where                         Output project home information.&#xA;  --venv                          Output virtualenv information.&#xA;  --py                            Output Python interpreter information.&#xA;  --envs                          Output Environment Variable options.&#xA;  --rm                            Remove the virtualenv.&#xA;  --bare                          Minimal output.&#xA;  --man                           Display manpage.&#xA;  --support                       Output diagnostic information for use in&#xA;                                  GitHub issues.&#xA;  --site-packages / --no-site-packages&#xA;                                  Enable site-packages for the virtualenv.&#xA;                                  [env var: PIPENV_SITE_PACKAGES]&#xA;  --python TEXT                   Specify which version of Python virtualenv&#xA;                                  should use.&#xA;  --clear                         Clears caches (pipenv, pip).  [env var:&#xA;                                  PIPENV_CLEAR]&#xA;  -q, --quiet                     Quiet mode.&#xA;  -v, --verbose                   Verbose mode.&#xA;  --pypi-mirror TEXT              Specify a PyPI mirror.&#xA;  --version                       Show the version and exit.&#xA;  -h, --help                      Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage Examples:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  Create a new project using Python 3.7, specifically:&#xA;  $ pipenv --python 3.7&#xA;&#xA;  Remove project virtualenv (inferred from current directory):&#xA;  $ pipenv --rm&#xA;&#xA;  Install all dependencies for a project (including dev):&#xA;  $ pipenv install --dev&#xA;&#xA;  Create a lockfile containing pre-releases:&#xA;  $ pipenv lock --pre&#xA;&#xA;  Show a graph of your installed dependencies:&#xA;  $ pipenv graph&#xA;&#xA;  Check your installed dependencies for security vulnerabilities:&#xA;  $ pipenv check&#xA;&#xA;  Install a local setup.py into your virtual environment/Pipfile:&#xA;  $ pipenv install -e .&#xA;&#xA;  Use a lower-level pip command:&#xA;  $ pipenv run pip freeze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;  check         Checks for PyUp Safety security vulnerabilities and against&#xA;                PEP 508 markers provided in Pipfile.&#xA;  clean         Uninstalls all packages not specified in Pipfile.lock.&#xA;  graph         Displays currently-installed dependency graph information.&#xA;  install       Installs provided packages and adds them to Pipfile, or (if no&#xA;                packages are given), installs all packages from Pipfile.&#xA;  lock          Generates Pipfile.lock.&#xA;  open          View a given module in your editor.&#xA;  requirements  Generate a requirements.txt from Pipfile.lock.&#xA;  run           Spawns a command installed into the virtualenv.&#xA;  scripts       Lists scripts in current environment config.&#xA;  shell         Spawns a shell within the virtualenv.&#xA;  sync          Installs all packages specified in Pipfile.lock.&#xA;  uninstall     Uninstalls a provided package and removes it from Pipfile.&#xA;  update        Runs lock, then sync.&#xA;  upgrade       Update the lock of the specified dependency / sub-dependency,&#xA;                but does not actually install the packages.&#xA;  verify        Verify the hash in Pipfile.lock is up-to-date.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Locate the project:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv --where&#xA;/Users/kennethreitz/Library/Mobile Documents/com~apple~CloudDocs/repos/kr/pipenv/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Locate the virtualenv:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv --venv&#xA;/Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Locate the Python interpreter:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv --py&#xA;/Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre/bin/python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install packages:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv install&#xA;Creating a virtualenv for this project...&#xA;...&#xA;No package provided, installing all dependencies.&#xA;Virtualenv location: /Users/kennethreitz/.local/share/virtualenvs/test-EJkjoYts&#xA;Installing dependencies from Pipfile.lock...&#xA;...&#xA;&#xA;To activate this project&#39;s virtualenv, run the following:&#xA;$ pipenv shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing from git:&lt;/h3&gt; &#xA;&lt;p&gt;You can install packages with pipenv from git and other version control systems using URLs formatted according to the following rule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;vcs_type&amp;gt;+&amp;lt;scheme&amp;gt;://&amp;lt;location&amp;gt;/&amp;lt;user_or_organization&amp;gt;/&amp;lt;repository&amp;gt;@&amp;lt;branch_or_tag&amp;gt;#&amp;lt;package_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The only optional section is the &lt;code&gt;@&amp;lt;branch_or_tag&amp;gt;&lt;/code&gt; section. When using git over SSH, you may use the shorthand vcs and scheme alias &lt;code&gt;git+git@&amp;lt;location&amp;gt;:&amp;lt;user_or_organization&amp;gt;/&amp;lt;repository&amp;gt;@&amp;lt;branch_or_tag&amp;gt;#&amp;lt;package_name&amp;gt;&lt;/code&gt;. Note that this is translated to &lt;code&gt;git+ssh://git@&amp;lt;location&amp;gt;&lt;/code&gt; when parsed.&lt;/p&gt; &#xA;&lt;p&gt;Valid values for &lt;code&gt;&amp;lt;vcs_type&amp;gt;&lt;/code&gt; include &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;bzr&lt;/code&gt;, &lt;code&gt;svn&lt;/code&gt;, and &lt;code&gt;hg&lt;/code&gt;. Valid values for &lt;code&gt;&amp;lt;scheme&amp;gt;&lt;/code&gt; include &lt;code&gt;http,&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt;, and &lt;code&gt;file&lt;/code&gt;. In specific cases you also have access to other schemes: &lt;code&gt;svn&lt;/code&gt; may be combined with &lt;code&gt;svn&lt;/code&gt; as a scheme, and &lt;code&gt;bzr&lt;/code&gt; can be combined with &lt;code&gt;sftp&lt;/code&gt; and &lt;code&gt;lp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that it is &lt;strong&gt;strongly recommended&lt;/strong&gt; that you install any version-controlled dependencies in editable mode, using &lt;code&gt;pipenv install -e&lt;/code&gt;, in order to ensure that dependency resolution can be performed with an up to date copy of the repository each time it is performed, and that it includes all known dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Below is an example usage which installs the git repository located at &lt;code&gt;https://github.com/requests/requests.git&lt;/code&gt; from tag &lt;code&gt;v2.19.1&lt;/code&gt; as package name &lt;code&gt;requests&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv install -e git+https://github.com/requests/requests.git@v2.19#egg=requests&#xA;Creating a Pipfile for this project...&#xA;Installing -e git+https://github.com/requests/requests.git@v2.19.1#egg=requests...&#xA;[...snipped...]&#xA;Adding -e git+https://github.com/requests/requests.git@v2.19.1#egg=requests to Pipfile&#39;s [packages]...&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about &lt;a href=&#34;https://pip.pypa.io/en/stable/topics/vcs-support/&#34;&gt;pip&#39;s implementation of vcs support here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install a dev dependency:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv install pytest --dev&#xA;Installing pytest...&#xA;...&#xA;Adding pytest to Pipfile&#39;s [dev-packages]...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show a dependency graph:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv graph&#xA;requests==2.18.4&#xA;  - certifi [required: &amp;gt;=2017.4.17, installed: 2017.7.27.1]&#xA;  - chardet [required: &amp;gt;=3.0.2,&amp;lt;3.1.0, installed: 3.0.4]&#xA;  - idna [required: &amp;gt;=2.5,&amp;lt;2.7, installed: 2.6]&#xA;  - urllib3 [required: &amp;lt;1.23,&amp;gt;=1.21.1, installed: 1.22]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a lockfile:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv lock&#xA;Assuring all dependencies from Pipfile are installed...&#xA;Locking [dev-packages] dependencies...&#xA;Locking [packages] dependencies...&#xA;Note: your project now has only default [packages] installed.&#xA;To install [dev-packages], run: $ pipenv install --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install all dev dependencies:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv install --dev&#xA;Pipfile found at /Users/kennethreitz/repos/kr/pip2/test/Pipfile. Considering this to be the project home.&#xA;Pipfile.lock out of date, updating...&#xA;Assuring all dependencies from Pipfile are installed...&#xA;Locking [dev-packages] dependencies...&#xA;Locking [packages] dependencies...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uninstall everything:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv uninstall --all&#xA;No package provided, un-installing all dependencies.&#xA;Found 25 installed package(s), purging...&#xA;...&#xA;Environment now purged and fresh!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use the shell:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pipenv shell&#xA;Loading .env environment variables...&#xA;Launching subshell in virtual environment. Type &#39;exit&#39; or &#39;Ctrl+D&#39; to return.&#xA;$ ▯&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PURPOSE AND ADVANTAGES OF PIPENV&lt;/h3&gt; &#xA;&lt;p&gt;To understand the problems that Pipenv solves, it&#39;s useful to show how Python package management has evolved.&lt;/p&gt; &#xA;&lt;p&gt;Take yourself back to the first Python iteration. We had Python, but there was no clean way to install packages.&lt;/p&gt; &#xA;&lt;p&gt;Then came Easy Install, a package that installs other Python packages with relative ease. But it came with a catch: it wasn&#39;t easy to uninstall packages that were no longer needed.&lt;/p&gt; &#xA;&lt;p&gt;Enter pip, which most Python users are familiar with. pip lets us install and uninstall packages. We could specify versions, run pip freeze &amp;gt; requirements.txt to output a list of installed packages to a text file, and use that same text file to install everything an app needed with pip install -r requirements.txt.&lt;/p&gt; &#xA;&lt;p&gt;But pip didn&#39;t include a way to isolate packages from each other. We might work on apps that use different versions of the same libraries, so we needed a way to enable that.&lt;/p&gt; &#xA;&lt;p&gt;Pipenv aims to solve several problems. First, the problem of needing the pip library for package installation, plus a library for creating a virtual environment, plus a library for managing virtual environments, plus all the commands associated with those libraries. That&#39;s a lot to manage. Pipenv ships with package management and virtual environment support, so you can use one tool to install, uninstall, track, and document your dependencies and to create, use, and organize your virtual environments. When you start a project with it, Pipenv will automatically create a virtual environment for that project if you aren&#39;t already using one.&lt;/p&gt; &#xA;&lt;p&gt;Pipenv accomplishes this dependency management by abandoning the requirements.txt norm and trading it for a new document called a Pipfile. When you install a library with Pipenv, a Pipfile for your project is automatically updated with the details of that installation, including version information and possibly the Git repository location, file path, and other information.&lt;/p&gt; &#xA;&lt;p&gt;Second, Pipenv wants to make it easier to manage complex interdependencies.&lt;/p&gt; &#xA;&lt;p&gt;Using Pipenv, which gives you Pipfile, lets you avoid these problems by managing dependencies for different environments for you. This command will install the main project dependencies:&lt;/p&gt; &#xA;&lt;p&gt;pipenv install&lt;/p&gt; &#xA;&lt;p&gt;Adding the --dev tag will install the dev/testing requirements:&lt;/p&gt; &#xA;&lt;p&gt;pipenv install --dev To generate a Pipfile.lock file, run:&lt;/p&gt; &#xA;&lt;p&gt;pipenv lock&lt;/p&gt; &#xA;&lt;p&gt;You can also run Python scripts with Pipenv. To run a top-level Python script called hello.py, run:&lt;/p&gt; &#xA;&lt;p&gt;pipenv run python hello.py&lt;/p&gt; &#xA;&lt;p&gt;And you will see your expected result in the console.&lt;/p&gt; &#xA;&lt;p&gt;To start a shell, run:&lt;/p&gt; &#xA;&lt;p&gt;pipenv shell&lt;/p&gt; &#xA;&lt;p&gt;If you would like to convert a project that currently uses a requirements.txt file to use Pipenv, install Pipenv and run:&lt;/p&gt; &#xA;&lt;p&gt;pipenv install requirements.txt&lt;/p&gt; &#xA;&lt;p&gt;This will create a Pipfile and install the specified requirements.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation resides over at &lt;a href=&#34;https://pipenv.pypa.io/en/latest/&#34;&gt;pipenv.pypa.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#pypa/pipenv&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=pypa/pipenv&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=pypa/pipenv&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=pypa/pipenv&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
</feed>