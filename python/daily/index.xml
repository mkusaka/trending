<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-17T01:32:01Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>livekit/agents</title>
    <updated>2024-05-17T01:32:01Z</updated>
    <id>tag:github.com,2024-05-17:/livekit/agents</id>
    <link href="https://github.com/livekit/agents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build real-time multimodal AI applications ü§ñüéôÔ∏èüìπ&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;/.github/banner_dark.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;/.github/banner_light.png&#34;&gt; &#xA; &lt;img style=&#34;width:100%;&#34; alt=&#34;The LiveKit icon, the name of the repository and some sample code in the background.&#34; src=&#34;https://raw.githubusercontent.com/livekit/agents/main/.github/banner_light.png&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;!--END_BANNER_IMAGE--&gt; &#xA;&lt;h1&gt;LiveKit Agents&lt;/h1&gt; &#xA;&lt;!--BEGIN_DESCRIPTION--&gt; &#xA;&lt;p&gt;The Agent Framework is designed for building real-time, programmable participants that run on servers. Easily tap into LiveKit WebRTC sessions and process or generate audio, video, and data streams.&lt;/p&gt; &#xA;&lt;!--END_DESCRIPTION--&gt; &#xA;&lt;p&gt;The framework includes plugins for common workflows, such as voice activity detection and speech-to-text.&lt;/p&gt; &#xA;&lt;p&gt;Agents integrates seamlessly with &lt;a href=&#34;https://github.com/livekit/livekit&#34;&gt;LiveKit server&lt;/a&gt;, offloading job queuing and scheduling responsibilities to it. This eliminates the need for additional queuing infrastructure. Agent code developed on your local machine can scale to support thousands of concurrent sessions when deployed to a server in production.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This SDK is currently in Developer Preview mode and not ready for production use. There will be bugs and APIs may change during this period.&lt;/p&gt; &#xA; &lt;p&gt;We welcome and appreciate any feedback or contributions. You can create issues here or chat live with us in the #dev channel within the &lt;a href=&#34;https://livekit.io/join-slack&#34;&gt;LiveKit Community Slack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Docs &amp;amp; Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/agents/&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/agents/quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/agents/plugins&#34;&gt;Working with plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/agents/deployment&#34;&gt;Deploying agents&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/agents/tree/main/examples/voice-assistant&#34;&gt;KITT&lt;/a&gt;: An voice assistant with STT, LLM, and TTS. &lt;a href=&#34;https://kitt.livekit.io&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/agents/tree/main/examples/simple-color&#34;&gt;Video publishing&lt;/a&gt;: A demonstration of publishing RGB frames to a LiveKit Room&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/agents/tree/main/examples/speech-to-text&#34;&gt;STT&lt;/a&gt;: An agent that transcribes a participant&#39;s audio into text&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/agents/tree/main/examples/text-to-speech&#34;&gt;TTS&lt;/a&gt;: An agent that publishes synthesized speech to a LiveKit Room&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the core Agents library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install livekit-agents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Agents includes a set of prebuilt plugins that make it easier to compose together agents. These plugins cover common tasks like converting speech to text or vice versa and running inference on a generative AI model. You can install a plugin as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install livekit-plugins-deepgram&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following plugins are available today:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Plugin&lt;/th&gt; &#xA;   &lt;th&gt;Features&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/livekit-plugins-deepgram/&#34;&gt;livekit-plugins-deepgram&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;STT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/livekit-plugins-elevenlabs/&#34;&gt;livekit-plugins-elevenlabs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;TTS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/livekit-plugins-google/&#34;&gt;livekit-plugins-google&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;STT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/livekit-plugins-nltk/&#34;&gt;livekit-plugins-nltk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Utilities for working with text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/livekit-plugins-openai/&#34;&gt;livekit-plugins-openai&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dalle 3, STT, TTS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/livekit-plugins-silero/&#34;&gt;livekit-plugins-silero&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VAD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agent&lt;/strong&gt;: A function that defines the workflow of a programmable, server-side participant. This is your application code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Worker&lt;/strong&gt;: A container process responsible for managing job queuing with LiveKit server. Each worker is capable of running multiple agents simultaneously.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plugin&lt;/strong&gt;: A library class that performs a specific task, like speech-to-text, from a specific provider. An agent can compose multiple plugins together to perform more complex tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running an agent&lt;/h2&gt; &#xA;&lt;p&gt;The framework exposes a CLI interface to run your agent. To get started, you&#39;ll need the following environment variables set:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LIVEKIT_URL&lt;/li&gt; &#xA; &lt;li&gt;LIVEKIT_API_KEY&lt;/li&gt; &#xA; &lt;li&gt;LIVEKIT_API_SECRET&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the worker&lt;/h3&gt; &#xA;&lt;p&gt;This will start the worker and wait for users to connect to your LiveKit server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python my_agent.py start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using playground for your agent UI&lt;/h3&gt; &#xA;&lt;p&gt;To ease the process of building and testing an agent, we&#39;ve developed a versatile web frontend called &#34;playground&#34;. You can use or modify this app to suit your specific requirements. It can also serve as a starting point for a completely custom agent application.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agents-playground.livekit.io&#34;&gt;Hosted playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/agents-playground&#34;&gt;Source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.livekit.io/agents/playground&#34;&gt;Playground docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Joining a specific room&lt;/h3&gt; &#xA;&lt;p&gt;To join a LiveKit room that&#39;s already active, you can use the &lt;code&gt;simulate-job&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python my_agent.py simulate-job --room-name &amp;lt;my-room&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What happens when I run my agent?&lt;/h3&gt; &#xA;&lt;p&gt;When you follow the steps above to run your agent, a worker is started that opens an authenticated WebSocket connection to a LiveKit server instance(defined by your &lt;code&gt;LIVEKIT_URL&lt;/code&gt; and authenticated with an access token).&lt;/p&gt; &#xA;&lt;p&gt;No agents are actually running at this point. Instead, the worker is waiting for LiveKit server to give it a job.&lt;/p&gt; &#xA;&lt;p&gt;When a room is created, the server notifies one of the registered workers about a new job. The notified worker can decide whether or not to accept it. If the worker accepts the job, the worker will instantiate your agent as a participant and have it join the room where it can start subscribing to tracks. A worker can manage multiple agent instances simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;If a notified worker rejects the job or does not accept within a predetermined timeout period, the server will route the job request to another available worker.&lt;/p&gt; &#xA;&lt;h3&gt;What happens when I SIGTERM a worker?&lt;/h3&gt; &#xA;&lt;p&gt;The orchestration system was designed for production use cases. Unlike the typical web server, an agent is a stateful program, so it&#39;s important that a worker can&#39;t be terminated while it&#39;s managing any active agents.&lt;/p&gt; &#xA;&lt;p&gt;When calling SIGTERM on a worker, the worker will signal to LiveKit server that it no longer wants additional jobs. It will also auto-reject any new job requests that get through before the server signal is received. The worker will remain alive while it manages any agents connected to rooms.&lt;/p&gt; &#xA;&lt;h3&gt;Downloading model files&lt;/h3&gt; &#xA;&lt;p&gt;Some plugins require model files to be downloaded before they can be used. To download all the necessary models for your agent, execute the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python my_agent.py download-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re developing a custom plugin, you can integrate this functionality by implementing a &lt;code&gt;download_files&lt;/code&gt; method in your Plugin class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyPlugin(Plugin):&#xA;    def __init__(self):&#xA;        super().__init__(__name__, __version__)&#xA;&#xA;    def download_files(self):&#xA;        _ = torch.hub.load(&#xA;            repo_or_dir=&#34;my-repo&#34;,&#xA;            model=&#34;my-model&#34;,&#xA;        )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--BEGIN_REPO_NAV--&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;table&gt; &#xA; &lt;thead&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th colspan=&#34;2&#34;&gt;LiveKit Ecosystem&lt;/th&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Real-time SDKs&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/components-js&#34;&gt;React Components&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-js&#34;&gt;JavaScript&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-swift&#34;&gt;iOS/macOS&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-android&#34;&gt;Android&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-flutter&#34;&gt;Flutter&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-react-native&#34;&gt;React Native&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-rust&#34;&gt;Rust&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-python&#34;&gt;Python&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-unity-web&#34;&gt;Unity (web)&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-unity&#34;&gt;Unity (beta)&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Server APIs&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-js&#34;&gt;Node.js&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/server-sdk-go&#34;&gt;Golang&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/server-sdk-ruby&#34;&gt;Ruby&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/server-sdk-kotlin&#34;&gt;Java/Kotlin&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-python&#34;&gt;Python&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/client-sdk-rust&#34;&gt;Rust&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/agence104/livekit-server-sdk-php&#34;&gt;PHP (community)&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Agents Frameworks&lt;/td&gt;&#xA;   &lt;td&gt;&lt;b&gt;Python&lt;/b&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/agent-playground&#34;&gt;Playground&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Services&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/livekit/livekit&#34;&gt;Livekit server&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/egress&#34;&gt;Egress&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/ingress&#34;&gt;Ingress&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/sip&#34;&gt;SIP&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;Resources&lt;/td&gt;&#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.livekit.io&#34;&gt;Docs&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit-examples&#34;&gt;Example apps&lt;/a&gt; ¬∑ &lt;a href=&#34;https://livekit.io/cloud&#34;&gt;Cloud&lt;/a&gt; ¬∑ &lt;a href=&#34;https://docs.livekit.io/oss/deployment&#34;&gt;Self-hosting&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/livekit/livekit-cli&#34;&gt;CLI&lt;/a&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--END_REPO_NAV--&gt;</summary>
  </entry>
  <entry>
    <title>AgentOps-AI/agentops</title>
    <updated>2024-05-17T01:32:01Z</updated>
    <id>tag:github.com,2024-05-17:/AgentOps-AI/agentops</id>
    <link href="https://github.com/AgentOps-AI/agentops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source Python SDK for agent monitoring, LLM cost tracking, benchmarking, and more. Integrates with most LLMs and agent frameworks like CrewAI, Langchain, and Autogen&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://agentops.ai?ref=gh&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AgentOps-AI/agentops/e6002beaf277762fa2b9fa5240a1216b335d7e2c/logo.png&#34; style=&#34;margin: 15px; max-width: 300px&#34; width=&#34;50%&#34; alt=&#34;Logo&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;AI agents suck. We‚Äôre fixing that.&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://pypi.org/project/agentops/&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Python&#34; src=&#34;https://img.shields.io/badge/python-3670A0?style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=ffdd54&#34;&gt; &lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/pypi/v/agentops?style=for-the-badge&amp;amp;color=3670A0&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/agentopsai/&#34;&gt;üê¶ Twitter&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://discord.gg/JHPt4C7r&#34;&gt;üì¢ Discord&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://app.agentops.ai/?ref=gh&#34;&gt;üñáÔ∏è AgentOps&lt;/a&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;‚Ä¢&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://docs.agentops.ai/introduction&#34;&gt;üìô Documentation&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;AgentOps üñáÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/agentops&#34; alt=&#34;PyPI - Version&#34;&gt; &lt;a href=&#34;https://pepy.tech/project/agentops&#34;&gt; &lt;img src=&#34;https://static.pepy.tech/badge/agentops/month&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/agentopsai&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/follow-%40agentops-1DA1F2?logo=twitter&amp;amp;style=social&#34; alt=&#34;AgentOps Twitter&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/mKW3ZhN9p2&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/chat-on%20Discord-blueviolet&#34; alt=&#34;Discord community channel&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/agentops-ai/agentops/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/agentops-ai/agentops&#34; alt=&#34;git commit activity&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AgentOps helps developers build, evaluate, and monitor AI agents. Tools to build agents from prototype to production.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìä &lt;strong&gt;Replay Analytics and Debugging&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Step-by-step agent execution graphs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üí∏ &lt;strong&gt;LLM Cost Management&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Track spend with LLM foundation model providers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üß™ &lt;strong&gt;Agent Benchmarking&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test your agents against 1,000+ evals&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üîê &lt;strong&gt;Compliance and Security&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Detect common prompt injection and data exfiltration exploits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ü§ù &lt;strong&gt;Framework Integrations&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Easily plugs in with frameworks like CrewAI and LangChain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick Start ‚å®Ô∏è&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install agentops&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Session replays in 3 lines of code&lt;/h3&gt; &#xA;&lt;p&gt;Initialize the AgentOps client and automatically get analytics on every LLM call.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import agentops&#xA;&#xA;# Beginning of program&#39;s code (i.e. main.py, __init__.py)&#xA;agentops.init(&amp;lt;INSERT YOUR API KEY HERE&amp;gt;)&#xA;&#xA;...&#xA;# (optional: record specific functions)&#xA;@agentops.record_function(&#39;sample function being record&#39;)&#xA;def sample_function(...):&#xA;    ...&#xA;&#xA;# End of program&#xA;agentops.end_session(&#39;Success&#39;)&#xA;# Woohoo You&#39;re done üéâ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All your sessions are available on the &lt;a href=&#34;https://app.agentops.ai?ref=gh&#34;&gt;AgentOps dashboard&lt;/a&gt;. Refer to our &lt;a href=&#34;http://docs.agentops.ai&#34;&gt;API documentation&lt;/a&gt; for detailed instructions.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Agent Dashboard&lt;/summary&gt; &#xA; &lt;a href=&#34;https://app.agentops.ai?ref=gh&#34;&gt; &lt;img src=&#34;https://github.com/AgentOps-AI/agentops/assets/14807319/158e082a-9a7d-49b7-9b41-51a49a1f7d3d&#34; style=&#34;width: 90%;&#34; alt=&#34;Agent Dashboard&#34;&gt; &lt;/a&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Session Analytics&lt;/summary&gt; &#xA; &lt;a href=&#34;https://app.agentops.ai?ref=gh&#34;&gt; &lt;img src=&#34;https://github.com/AgentOps-AI/agentops/assets/14807319/d7228019-1488-40d3-852f-a61e998658ad&#34; style=&#34;width: 90%;&#34; alt=&#34;Session Analytics&#34;&gt; &lt;/a&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Session Replays&lt;/summary&gt; &#xA; &lt;a href=&#34;https://app.agentops.ai?ref=gh&#34;&gt; &lt;img src=&#34;https://github.com/AgentOps-AI/agentops/assets/14807319/561d59f3-c441-4066-914b-f6cfe32a598c&#34; style=&#34;width: 90%;&#34; alt=&#34;Session Replays&#34;&gt; &lt;/a&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Integrations ü¶æ&lt;/h2&gt; &#xA;&lt;h3&gt;CrewAI üõ∂&lt;/h3&gt; &#xA;&lt;p&gt;Build Crew agents with observability with only 2 lines of code. Simply set an &lt;code&gt;AGENTOPS_API_KEY&lt;/code&gt; in your environment, and your crews will get automatic monitoring on the AgentOps dashboard.&lt;/p&gt; &#xA;&lt;p&gt;AgentOps is integrated with CrewAI on a pre-release fork. Install crew with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/AgentOps-AI/crewAI.git@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.agentops.ai/v1/integrations/crewai&#34;&gt;AgentOps integration example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.crewai.com/how-to/AgentOps-Observability&#34;&gt;Official CrewAI documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Langchain ü¶úüîó&lt;/h3&gt; &#xA;&lt;p&gt;AgentOps works seamlessly with applications built using Langchain. To use the handler, install Langchain as an optional dependency:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Installation&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install agentops[langchain]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To use the handler, import and set&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;from langchain.chat_models import ChatOpenAI&#xA;from langchain.agents import initialize_agent, AgentType&#xA;from agentops.langchain_callback_handler import LangchainCallbackHandler&#xA;&#xA;AGENTOPS_API_KEY = os.environ[&#39;AGENTOPS_API_KEY&#39;]&#xA;handler = LangchainCallbackHandler(api_key=AGENTOPS_API_KEY, tags=[&#39;Langchain Example&#39;])&#xA;&#xA;llm = ChatOpenAI(openai_api_key=OPENAI_API_KEY,&#xA;                 callbacks=[handler],&#xA;                 model=&#39;gpt-3.5-turbo&#39;)&#xA;&#xA;agent = initialize_agent(tools,&#xA;                         llm,&#xA;                         agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,&#xA;                         verbose=True,&#xA;                         callbacks=[handler], # You must pass in a callback handler to record your agent&#xA;                         handle_parsing_errors=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/AgentOps-AI/agentops/main/examples/langchain_examples.ipynb&#34;&gt;Langchain Examples Notebook&lt;/a&gt; for more details including Async handlers.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Cohere ‚å®Ô∏è&lt;/h3&gt; &#xA;&lt;p&gt;First class support for Cohere(&amp;gt;=5.4.0). This is a living integration, should you need any added functionality please message us on Discord!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.agentops.ai/v1/integrations/cohere&#34;&gt;AgentOps integration example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cohere.com/reference/about&#34;&gt;Official Cohere documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Installation&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install cohere&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cohere&#xA;import agentops&#xA;&#xA;# Beginning of program&#39;s code (i.e. main.py, __init__.py)&#xA;agentops.init(&amp;lt;INSERT YOUR API KEY HERE&amp;gt;)&#xA;co = cohere.Client()&#xA;&#xA;chat = co.chat(&#xA;    message=&#34;Is it pronounced ceaux-hear or co-hehray?&#34;&#xA;)&#xA;&#xA;print(chat)&#xA;&#xA;agentops.end_session(&#39;Success&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cohere&#xA;import agentops&#xA;&#xA;# Beginning of program&#39;s code (i.e. main.py, __init__.py)&#xA;agentops.init(&amp;lt;INSERT YOUR API KEY HERE&amp;gt;)&#xA;&#xA;co = cohere.Client()&#xA;&#xA;stream = co.chat_stream(&#xA;    message=&#34;Write me a haiku about the synergies between Cohere and AgentOps&#34;&#xA;)&#xA;&#xA;for event in stream:&#xA;    if event.event_type == &#34;text-generation&#34;:&#xA;        print(event.text, end=&#39;&#39;)&#xA;&#xA;agentops.end_session(&#39;Success&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;LlamaIndex ü¶ô&lt;/h3&gt; &#xA;&lt;p&gt;(Coming Soon)&lt;/p&gt; &#xA;&lt;h2&gt;Time travel debugging üîÆ&lt;/h2&gt; &#xA;&lt;p&gt;(coming soon!)&lt;/p&gt; &#xA;&lt;h2&gt;Agent Arena ü•ä&lt;/h2&gt; &#xA;&lt;p&gt;(coming soon!)&lt;/p&gt; &#xA;&lt;h2&gt;Evaluations Roadmap üß≠&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Dashboard&lt;/th&gt; &#xA;   &lt;th&gt;Evals&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ Python SDK&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Multi-session and Cross-session metrics&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Custom eval metrics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üöß Evaluation builder API&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Custom event tag tracking&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;üîú Agent scorecards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ &lt;a href=&#34;https://github.com/AgentOps-AI/agentops-node&#34;&gt;Javascript/Typescript SDK&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Session replays&lt;/td&gt; &#xA;   &lt;td&gt;üîú Evaluation playground + leaderboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Debugging Roadmap üß≠&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Performance testing&lt;/th&gt; &#xA;   &lt;th&gt;Environments&lt;/th&gt; &#xA;   &lt;th&gt;LLM Testing&lt;/th&gt; &#xA;   &lt;th&gt;Reasoning and execution testing&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ Event latency analysis&lt;/td&gt; &#xA;   &lt;td&gt;üîú Non-stationary environment testing&lt;/td&gt; &#xA;   &lt;td&gt;üîú LLM non-deterministic function detection&lt;/td&gt; &#xA;   &lt;td&gt;üöß Infinite loops and recursive thought detection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚úÖ Agent workflow execution pricing&lt;/td&gt; &#xA;   &lt;td&gt;üîú Multi-modal environments&lt;/td&gt; &#xA;   &lt;td&gt;üöß Token limit overflow flags&lt;/td&gt; &#xA;   &lt;td&gt;üîú Faulty reasoning detection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üöß Success validators (external)&lt;/td&gt; &#xA;   &lt;td&gt;üîú Execution containers&lt;/td&gt; &#xA;   &lt;td&gt;üîú Context limit overflow flags&lt;/td&gt; &#xA;   &lt;td&gt;üîú Generative code validators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üîú Agent controllers/skill tests&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ Honeypot and prompt injection detection (&lt;a href=&#34;https://promptarmor.com&#34;&gt;PromptArmor&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;üîú API bill tracking&lt;/td&gt; &#xA;   &lt;td&gt;üîú Error breakpoint analysis&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üîú Information context constraint testing&lt;/td&gt; &#xA;   &lt;td&gt;üîú Anti-agent roadblocks (i.e. Captchas)&lt;/td&gt; &#xA;   &lt;td&gt;üîú CI/CD integration checks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üîú Regression testing&lt;/td&gt; &#xA;   &lt;td&gt;üîú Multi-agent framework visualization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Why AgentOps? ü§î&lt;/h3&gt; &#xA;&lt;p&gt;Our mission is to bring your agent from prototype to production.&lt;/p&gt; &#xA;&lt;p&gt;Agent developers often work with little to no visibility into agent testing performance. This means their agents never leave the lab. We&#39;re changing that.&lt;/p&gt; &#xA;&lt;p&gt;AgentOps is the easiest way to evaluate, grade, and test agents. Is there a feature you&#39;d like to see AgentOps cover? Just raise it in the issues tab, and we&#39;ll work on adding it to the roadmap.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/EveryoneCanCode-US</title>
    <updated>2024-05-17T01:32:01Z</updated>
    <id>tag:github.com,2024-05-17:/microsoft/EveryoneCanCode-US</id>
    <link href="https://github.com/microsoft/EveryoneCanCode-US" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Everyone Can Code Event (U.S. Edition)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Everyone Can Code! ‚Äì Light Your Fire for Coding (U.S. Edition)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EveryoneCanCode-US/main/content-images/MSFT_EveryoneCanCode_Banner.png&#34; alt=&#34;FemaleTechGenLogo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt; &lt;sub&gt;Built with ‚ù§ by everybody who wants to make the Microsoft App Dev Innovation world a little bit more diverse! &lt;/sub&gt; &lt;/p&gt;  &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Welcome to our coding journey!&lt;/h1&gt; &#xA;&lt;p&gt;It&#39;s great to have you here! üéâ&lt;/p&gt; &#xA;&lt;p&gt;‚ÄúWith barely 25% of employees in the technology industry being women and only 11% in leadership positions, these figures continue to highlight the challenges of gender equality in the tech world. Over the past nine years, the underrepresentation of women, especially those with diverse cultural backgrounds, persists across the corporate landscape‚Äù (McKinsey &amp;amp; Company, &lt;a href=&#34;https://www.mckinsey.com/featured-insights/diversity-and-inclusion/women-in-the-workplace&#34;&gt;&lt;em&gt;Women in the Workplace 2023&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;This is why we want to encourage everyone to bring their skills and passions to the world of technology, to explore new horizons together, and to shape the future of the industry together. &lt;strong&gt;Anyone who is creative and curious, regardless of age, gender, or profession, can participate in ‚ÄúEveryone Can Code.‚Äù&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Join us for a groundbreaking online coding event&lt;/strong&gt; specifically designed to empower individuals and help you learn how to start writing your own coding stories with us. You may have heard that coding can seem complex, but it is really nothing more than a language and technology that provides a magic pen in which we can paint the world around us. There&#39;s no such thing as ‚ÄúI can‚Äôt do it‚Äù.&lt;/p&gt; &#xA;&lt;p&gt;This event is perfect for anyone who has ever been curious about coding but wasn&#39;t sure where to start. With expert instructors, hands-on activities, and a supportive community, you will be amazed at how much you can accomplish in just a few hours. &lt;strong&gt;No previous code or other technical experience is required.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìö &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/EveryoneCanCode-US/main/Track_1_ToDo_App/README.md&#34;&gt;&lt;strong&gt;To get started click here&lt;/strong&gt;&lt;/a&gt; üìö&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Reporting issues and feedback&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;a href=&#34;https://github.com/microsoft/EveryoneCanCode-US/issues&#34;&gt;Issues&lt;/a&gt; tab to report any bugs, documentation issues and/or overall feedback.&lt;/p&gt; &#xA;&lt;h2&gt;Contributor Wall of Fame&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to the team that has worked on this to make it possible&lt;/p&gt; &#xA;&lt;h3&gt;Core + Extended Team&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EveryoneCanCode-US/main/content-images/everyone-can-code-core-team.png&#34; alt=&#34;core_team&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Content Reviewers&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the core and extended teams, thanks to all of the additional content reviewers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/EveryoneCanCode-US/main/content-images/everyone-can-code-content-reviewers.png&#34; alt=&#34;content-reviewers&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
</feed>