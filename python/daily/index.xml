<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-06T01:36:25Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lwthiker/curl-impersonate</title>
    <updated>2025-04-06T01:36:25Z</updated>
    <id>tag:github.com,2025-04-06:/lwthiker/curl-impersonate</id>
    <link href="https://github.com/lwthiker/curl-impersonate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;curl-impersonate: A special build of curl that can impersonate Chrome &amp; Firefox&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;curl-impersonate &lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_24x24.png&#34; alt=&#34;Edge&#34; title=&#34;Edge&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt; &lt;img src=&#34;https://github.com/alrra/browser-logos/raw/main/src/safari/safari_24x24.png&#34; alt=&#34;Safari&#34; title=&#34;Safari&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lwthiker/curl-impersonate/actions/workflows/build-and-test-make.yml&#34;&gt;&lt;img src=&#34;https://github.com/lwthiker/curl-impersonate/actions/workflows/build-and-test-make.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lwthiker/curl-impersonate/actions/workflows/build-and-test-docker.yml&#34;&gt;&lt;img src=&#34;https://github.com/lwthiker/curl-impersonate/actions/workflows/build-and-test-docker.yml/badge.svg?sanitize=true&#34; alt=&#34;Docker images&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A special build of &lt;a href=&#34;https://github.com/curl/curl&#34;&gt;curl&lt;/a&gt; that can impersonate the four major browsers: Chrome, Edge, Safari &amp;amp; Firefox. curl-impersonate is able to perform TLS and HTTP handshakes that are identical to that of a real browser.&lt;/p&gt; &#xA;&lt;p&gt;curl-impersonate can be used either as a command line tool, similar to the regular curl, or as a library that can be integrated instead of the regular libcurl. See &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/#Basic-usage&#34;&gt;Usage&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;When you use an HTTP client with a TLS website, it first performs a TLS handshake. The first message of that handshake is called Client Hello. The Client Hello message that most HTTP clients and libraries produce differs drastically from that of a real browser.&lt;/p&gt; &#xA;&lt;p&gt;If the server uses HTTP/2, then in addition to the TLS handshake there is also an HTTP/2 handshake where various settings are exchanged. The settings that most HTTP clients and libraries use differ as well from those of any real browsers.&lt;/p&gt; &#xA;&lt;p&gt;For these reasons, some web services use the TLS and HTTP handshakes to fingerprint which client is accessing them, and then present different content for different clients. These methods are known as &lt;a href=&#34;https://lwthiker.com/networks/2022/06/17/tls-fingerprinting.html&#34;&gt;TLS fingerprinting&lt;/a&gt; and &lt;a href=&#34;https://lwthiker.com/networks/2022/06/17/http2-fingerprinting.html&#34;&gt;HTTP/2 fingerprinting&lt;/a&gt; respectively. Their widespread use has led to the web becoming less open, less private and much more restrictive towards specific web clients&lt;/p&gt; &#xA;&lt;p&gt;With the modified curl in this repository, the TLS and HTTP handshakes look &lt;em&gt;exactly&lt;/em&gt; like those of a real browser.&lt;/p&gt; &#xA;&lt;h2&gt;How?&lt;/h2&gt; &#xA;&lt;p&gt;To make this work, &lt;code&gt;curl&lt;/code&gt; was patched significantly to resemble a browser. Specifically, The modifications that were needed to make this work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compiling curl with nss, the TLS library that Firefox uses, instead of OpenSSL. For the Chrome version, compiling with BoringSSL, Google&#39;s TLS library.&lt;/li&gt; &#xA; &lt;li&gt;Modifying the way curl configures various TLS extensions and SSL options.&lt;/li&gt; &#xA; &lt;li&gt;Adding support for new TLS extensions.&lt;/li&gt; &#xA; &lt;li&gt;Changing the settings that curl uses for its HTTP/2 connections.&lt;/li&gt; &#xA; &lt;li&gt;Running curl with some non-default flags, for example &lt;code&gt;--ciphers&lt;/code&gt;, &lt;code&gt;--curves&lt;/code&gt; and some &lt;code&gt;-H&lt;/code&gt; headers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The resulting curl looks, from a network perspective, identical to a real browser.&lt;/p&gt; &#xA;&lt;p&gt;Read the full technical description in the blog posts: &lt;a href=&#34;https://lwthiker.com/reversing/2022/02/17/curl-impersonate-firefox.html&#34;&gt;part a&lt;/a&gt;, &lt;a href=&#34;https://lwthiker.com/reversing/2022/02/20/impersonating-chrome-too.html&#34;&gt;part b&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported browsers&lt;/h2&gt; &#xA;&lt;p&gt;The following browsers can be impersonated.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Browser&lt;/th&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Build&lt;/th&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Target name&lt;/th&gt; &#xA;   &lt;th&gt;Wrapper script&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;99&lt;/td&gt; &#xA;   &lt;td&gt;99.0.4844.51&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome99&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome99&#34;&gt;curl_chrome99&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;100.0.4896.75&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome100&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome100&#34;&gt;curl_chrome100&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;101&lt;/td&gt; &#xA;   &lt;td&gt;101.0.4951.67&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome101&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome101&#34;&gt;curl_chrome101&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;104&lt;/td&gt; &#xA;   &lt;td&gt;104.0.5112.81&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome104&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome104&#34;&gt;curl_chrome104&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;107&lt;/td&gt; &#xA;   &lt;td&gt;107.0.5304.107&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome107&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome107&#34;&gt;curl_chrome107&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;110&lt;/td&gt; &#xA;   &lt;td&gt;110.0.5481.177&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome110&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome110&#34;&gt;curl_chrome110&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;116&lt;/td&gt; &#xA;   &lt;td&gt;116.0.5845.180&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome116&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome116&#34;&gt;curl_chrome116&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_24x24.png&#34; alt=&#34;Chrome&#34; title=&#34;Chrome&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;99&lt;/td&gt; &#xA;   &lt;td&gt;99.0.4844.73&lt;/td&gt; &#xA;   &lt;td&gt;Android 12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chrome99_android&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_chrome99_android&#34;&gt;curl_chrome99_android&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_24x24.png&#34; alt=&#34;Edge&#34; title=&#34;Edge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;99&lt;/td&gt; &#xA;   &lt;td&gt;99.0.1150.30&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;edge99&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_edge99&#34;&gt;curl_edge99&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_24x24.png&#34; alt=&#34;Edge&#34; title=&#34;Edge&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;101&lt;/td&gt; &#xA;   &lt;td&gt;101.0.1210.47&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;edge101&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_edge101&#34;&gt;curl_edge101&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;91 ESR&lt;/td&gt; &#xA;   &lt;td&gt;91.6.0esr&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ff91esr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff91esr&#34;&gt;curl_ff91esr&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;95&lt;/td&gt; &#xA;   &lt;td&gt;95.0.2&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ff95&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff95&#34;&gt;curl_ff95&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;98&lt;/td&gt; &#xA;   &lt;td&gt;98.0&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ff98&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff98&#34;&gt;curl_ff98&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;100.0&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ff100&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff100&#34;&gt;curl_ff100&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;102&lt;/td&gt; &#xA;   &lt;td&gt;102.0&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ff102&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff102&#34;&gt;curl_ff102&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;109&lt;/td&gt; &#xA;   &lt;td&gt;109.0&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ff109&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff109&#34;&gt;curl_ff109&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_24x24.png&#34; alt=&#34;Firefox&#34; title=&#34;Firefox&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;117&lt;/td&gt; &#xA;   &lt;td&gt;117.0.1&lt;/td&gt; &#xA;   &lt;td&gt;Windows 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ff117&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff117&#34;&gt;curl_ff117&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/alrra/browser-logos/raw/main/src/safari/safari_24x24.png&#34; alt=&#34;Safari&#34; title=&#34;Safari&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;15.3&lt;/td&gt; &#xA;   &lt;td&gt;16612.4.9.1.8&lt;/td&gt; &#xA;   &lt;td&gt;MacOS Big Sur&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;safari15_3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_safari15_3&#34;&gt;curl_safari15_3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/alrra/browser-logos/raw/main/src/safari/safari_24x24.png&#34; alt=&#34;Safari&#34; title=&#34;Safari&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;15.5&lt;/td&gt; &#xA;   &lt;td&gt;17613.2.7.1.8&lt;/td&gt; &#xA;   &lt;td&gt;MacOS Monterey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;safari15_5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome/curl_safari15_5&#34;&gt;curl_safari15_5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This list is also available in the &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/browsers.json&#34;&gt;browsers.json&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;For each supported browser there is a wrapper script that launches &lt;code&gt;curl-impersonate&lt;/code&gt; with all the needed headers and flags. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl_chrome116 https://www.wikipedia.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add command line flags and they will be passed on to curl. However, some flags change curl&#39;s TLS signature which may cause it to be detected.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the wrapper scripts use a default set of HTTP headers. If you want to change these headers, you may want to modify the wrapper scripts to fit your own purpose.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/#Advanced-usage&#34;&gt;Advanced usage&lt;/a&gt; for more options, including using &lt;code&gt;libcurl-impersonate&lt;/code&gt; as a library.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;More documentation is available in the &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/docs/README.md&#34;&gt;docs/&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are two versions of &lt;code&gt;curl-impersonate&lt;/code&gt; for technical reasons. The &lt;strong&gt;chrome&lt;/strong&gt; version is used to impersonate Chrome, Edge and Safari. The &lt;strong&gt;firefox&lt;/strong&gt; version is used to impersonate Firefox.&lt;/p&gt; &#xA;&lt;h3&gt;Pre-compiled binaries&lt;/h3&gt; &#xA;&lt;p&gt;Pre-compiled binaries for Linux and macOS (Intel) are available at the &lt;a href=&#34;https://github.com/lwthiker/curl-impersonate/releases&#34;&gt;GitHub releases&lt;/a&gt; page. Before you use them you need to install nss (Firefox&#39;s TLS library) and CA certificates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu - &lt;code&gt;sudo apt install libnss3 nss-plugin-pem ca-certificates&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Red Hat/Fedora/CentOS - &lt;code&gt;yum install nss nss-pem ca-certificates&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Archlinux - &lt;code&gt;pacman -S nss ca-certificates&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macOS - &lt;code&gt;brew install nss ca-certificates&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also ensure you have zlib installed on your system. zlib is almost always present, but on some minimal systems it might be missing.&lt;/p&gt; &#xA;&lt;p&gt;The pre-compiled binaries contain libcurl-impersonate and a statically compiled curl-impersonate for ease of use.&lt;/p&gt; &#xA;&lt;p&gt;The pre-compiled Linux binaries are built for Ubuntu systems. On other distributions if you have errors with certificate verification you may have to tell curl where to find the CA certificates. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl_chrome116 https://www.wikipedia.org --cacert /etc/ssl/certs/ca-bundle.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also make sure to read &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/#notes-on-dependencies&#34;&gt;Notes on Dependencies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker images&lt;/h3&gt; &#xA;&lt;p&gt;Docker images based on Alpine Linux and Debian with &lt;code&gt;curl-impersonate&lt;/code&gt; compiled and ready to use are available on &lt;a href=&#34;https://hub.docker.com/r/lwthiker/curl-impersonate&#34;&gt;Docker Hub&lt;/a&gt;. The images contain the binary and all the wrapper scripts. Use like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Firefox version, Alpine Linux&#xA;docker pull lwthiker/curl-impersonate:0.6-ff&#xA;docker run --rm lwthiker/curl-impersonate:0.6-ff curl_ff109 https://www.wikipedia.org&#xA;&#xA;# Chrome version, Alpine Linux&#xA;docker pull lwthiker/curl-impersonate:0.6-chrome&#xA;docker run --rm lwthiker/curl-impersonate:0.6-chrome curl_chrome110 https://www.wikipedia.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Distro packages&lt;/h3&gt; &#xA;&lt;p&gt;AUR packages are available to Archlinux users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pre-compiled package: &lt;a href=&#34;https://aur.archlinux.org/packages/curl-impersonate-bin&#34;&gt;curl-impersonate-bin&lt;/a&gt;, &lt;a href=&#34;https://aur.archlinux.org/packages/libcurl-impersonate-bin&#34;&gt;libcurl-impersonate-bin&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build from source code: &lt;a href=&#34;https://aur.archlinux.org/packages/curl-impersonate-chrome&#34;&gt;curl-impersonate-chrome&lt;/a&gt;, &lt;a href=&#34;https://aur.archlinux.org/packages/curl-impersonate-firefox&#34;&gt;curl-impersonate-firefox&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Unofficial Homebrew receipts for Mac (Chrome only) are available &lt;a href=&#34;https://github.com/shakacode/homebrew-brew/raw/main/Formula/curl-impersonate.rb&#34;&gt;here&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap shakacode/brew&#xA;brew install curl-impersonate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced usage&lt;/h2&gt; &#xA;&lt;h3&gt;libcurl-impersonate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;libcurl-impersonate.so&lt;/code&gt; is libcurl compiled with the same changes as the command line &lt;code&gt;curl-impersonate&lt;/code&gt;. It has an additional API function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;CURLcode curl_easy_impersonate(struct Curl_easy *data, const char *target,&#xA;                               int default_headers);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can call it with the target names, e.g. &lt;code&gt;chrome116&lt;/code&gt;, and it will internally set all the options and headers that are otherwise set by the wrapper scripts. If &lt;code&gt;default_headers&lt;/code&gt; is set to 0, the built-in list of HTTP headers will not be set, and the user is expected to provide them instead using the regular &lt;a href=&#34;https://curl.se/libcurl/c/CURLOPT_HTTPHEADER.html&#34;&gt;&lt;code&gt;CURLOPT_HTTPHEADER&lt;/code&gt;&lt;/a&gt; libcurl option.&lt;/p&gt; &#xA;&lt;p&gt;Calling the above function sets the following libcurl options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CURLOPT_HTTP_VERSION&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CURLOPT_SSLVERSION&lt;/code&gt;, &lt;code&gt;CURLOPT_SSL_CIPHER_LIST&lt;/code&gt;, &lt;code&gt;CURLOPT_SSL_EC_CURVES&lt;/code&gt;, &lt;code&gt;CURLOPT_SSL_ENABLE_NPN&lt;/code&gt;, &lt;code&gt;CURLOPT_SSL_ENABLE_ALPN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CURLOPT_HTTPBASEHEADER&lt;/code&gt;, if &lt;code&gt;default_headers&lt;/code&gt; is non-zero (this is a non-standard HTTP option created for this project).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CURLOPT_HTTP2_PSEUDO_HEADERS_ORDER&lt;/code&gt;, &lt;code&gt;CURLOPT_HTTP2_NO_SERVER_PUSH&lt;/code&gt; (non-standard HTTP/2 options created for this project).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CURLOPT_SSL_ENABLE_ALPS&lt;/code&gt;, &lt;code&gt;CURLOPT_SSL_SIG_HASH_ALGS&lt;/code&gt;, &lt;code&gt;CURLOPT_SSL_CERT_COMPRESSION&lt;/code&gt;, &lt;code&gt;CURLOPT_SSL_ENABLE_TICKET&lt;/code&gt; (non-standard TLS options created for this project).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CURLOPT_SSL_PERMUTE_EXTENSIONS&lt;/code&gt; (non-standard TLS options created for this project). Note that if you call &lt;code&gt;curl_easy_setopt()&lt;/code&gt; later with one of the above it will override the options set by &lt;code&gt;curl_easy_impersonate()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using CURL_IMPERSONATE env var&lt;/h3&gt; &#xA;&lt;p&gt;If your application uses &lt;code&gt;libcurl&lt;/code&gt; already, you can replace the existing library at runtime with &lt;code&gt;LD_PRELOAD&lt;/code&gt; (Linux only). You can then set the &lt;code&gt;CURL_IMPERSONATE&lt;/code&gt; env var. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=/path/to/libcurl-impersonate.so CURL_IMPERSONATE=chrome116 my_app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;CURL_IMPERSONATE&lt;/code&gt; env var has two effects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;curl_easy_impersonate()&lt;/code&gt; is called automatically for any new curl handle created by &lt;code&gt;curl_easy_init()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl_easy_impersonate()&lt;/code&gt; is called automatically after any &lt;code&gt;curl_easy_reset()&lt;/code&gt; call.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that all the options needed for impersonation will be automatically set for any curl handle.&lt;/p&gt; &#xA;&lt;p&gt;If you need precise control over the HTTP headers, set &lt;code&gt;CURL_IMPERSONATE_HEADERS=no&lt;/code&gt; to disable the built-in list of HTTP headers, then set them yourself with &lt;code&gt;curl_easy_setopt()&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LD_PRELOAD=/path/to/libcurl-impersonate.so CURL_IMPERSONATE=chrome116 CURL_IMPERSONATE_HEADERS=no my_app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;LD_PRELOAD&lt;/code&gt; method will NOT WORK for &lt;code&gt;curl&lt;/code&gt; itself because the curl tool overrides the TLS settings. Use the wrapper scripts instead.&lt;/p&gt; &#xA;&lt;h3&gt;Notes on dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If you intend to copy the self-compiled artifacts to another system, or use the &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/#pre-compiled-binaries&#34;&gt;Pre-compiled binaries&lt;/a&gt; provided by the project, make sure that all the additional dependencies are met on the target system as well. In particular, see the &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/INSTALL.md#a-note-about-the-firefox-version&#34;&gt;note about the Firefox version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains two main folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/chrome&#34;&gt;chrome&lt;/a&gt; - Scripts and patches for building the Chrome version of &lt;code&gt;curl-impersonate&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox&#34;&gt;firefox&lt;/a&gt; - Scripts and patches for building the Firefox version of &lt;code&gt;curl-impersonate&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The layout is similar for both. For example, the Firefox directory contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; - Used to build &lt;code&gt;curl-impersonate&lt;/code&gt; with all dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff91esr&#34;&gt;curl_ff91esr&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff95&#34;&gt;curl_ff95&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/curl_ff98&#34;&gt;curl_ff98&lt;/a&gt; - Wrapper scripts that launch &lt;code&gt;curl-impersonate&lt;/code&gt; with the correct flags.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/firefox/patches/curl-impersonate.patch&#34;&gt;curl-impersonate.patch&lt;/a&gt; - The main patch that makes curl use the same TLS extensions as Firefox. Also makes curl compile statically with libnghttp2 and libnss.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other files of interest:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lwthiker/curl-impersonate/main/tests/signatures&#34;&gt;tests/signatures&lt;/a&gt; - YAML database of known browser signatures that can be impersonated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to help, please check out the &lt;a href=&#34;https://github.com/lwthiker/curl-impersonate/issues&#34;&gt;open issues&lt;/a&gt;. You can open a pull request with your changes.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the build process for &lt;code&gt;curl-impersonate&lt;/code&gt;. The actual patches to &lt;code&gt;curl&lt;/code&gt; are maintained in a &lt;a href=&#34;https://github.com/lwthiker/curl&#34;&gt;separate repository&lt;/a&gt; forked from the upstream curl. The changes are maintained in the &lt;a href=&#34;https://github.com/lwthiker/curl/tree/impersonate-firefox&#34;&gt;impersonate-firefox&lt;/a&gt; and &lt;a href=&#34;https://github.com/lwthiker/curl/tree/impersonate-chrome&#34;&gt;impersonate-chrome&lt;/a&gt; branches.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Sponsors help keep this project open and maintained. If you wish to become a sponsor, please contact me directly at: lwt at lwthiker dot com.&lt;/p&gt; &#xA;&lt;a href=&#34;https://serpapi.com/&#34;&gt; &lt;img src=&#34;https://i.imgur.com/CBOSxrm.png&#34; alt=&#34;Logo&#34; width=&#34;165px&#34; height=&#34;65px&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>funstory-ai/BabelDOC</title>
    <updated>2025-04-06T01:36:25Z</updated>
    <id>tag:github.com,2025-04-06:/funstory-ai/BabelDOC</id>
    <link href="https://github.com/funstory-ai/BabelDOC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet Another Document Translator&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- &lt;img src=&#34;https://s.immersivetranslate.com/assets/r2-uploads/images/babeldoc-banner.png&#34; width=&#34;320px&#34;  alt=&#34;YADT&#34;/&gt; --&gt; &#xA; &lt;br&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://s.immersivetranslate.com/assets/uploads/babeldoc-big-logo-darkmode-with-transparent-background-IKuNO1.svg&#34; width=&#34;320px&#34; alt=&#34;BabelDOC&#34;&gt; &#xA;  &lt;img src=&#34;https://s.immersivetranslate.com/assets/uploads/babeldoc-big-logo-with-transparent-background-2xweBr.svg?sanitize=true&#34; width=&#34;320px&#34; alt=&#34;BabelDOC&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;!-- &lt;h2 id=&#34;title&#34;&gt;BabelDOC&lt;/h2&gt; --&gt; &#xA; &lt;p&gt; &#xA;  &lt;!-- PyPI --&gt; &lt;a href=&#34;https://pypi.org/project/BabelDOC/&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/BabelDOC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/projects/BabelDOC&#34;&gt; &lt;img src=&#34;https://static.pepy.tech/badge/BabelDOC&#34;&gt;&lt;/a&gt; &#xA;  &lt;!-- &lt;a href=&#34;https://github.com/funstory-ai/BabelDOC/pulls&#34;&gt;&#xA;    &lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-green&#34;&gt;&lt;/a&gt; --&gt; &#xA;  &lt;!-- License --&gt; &lt;a href=&#34;https://raw.githubusercontent.com/funstory-ai/BabelDOC/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/funstory-ai/BabelDOC&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/+Z9_SgnxmsmA5NzBl&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=flat-squeare&amp;amp;logo=telegram&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;PDF scientific paper translation and bilingual comparison library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Online Service&lt;/strong&gt;: Beta version launched &lt;a href=&#34;https://app.immersivetranslate.com/babel-doc/&#34;&gt;Immersive Translate - BabelDOC&lt;/a&gt; 1000 free pages per month.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Self-deployment&lt;/strong&gt;: &lt;a href=&#34;https://github.com/Byaidu/PDFMathTranslate&#34;&gt;PDFMathTranslate&lt;/a&gt; 1.9.3+ Experimental support for BabelDOC, available for self-deployment + WebUI with more translation services.&lt;/li&gt; &#xA; &lt;li&gt;Provides a simple &lt;a href=&#34;https://raw.githubusercontent.com/funstory-ai/BabelDOC/main/#getting-started&#34;&gt;command line interface&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Provides a &lt;a href=&#34;https://raw.githubusercontent.com/funstory-ai/BabelDOC/main/#python-api&#34;&gt;Python API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Mainly designed to be embedded into other programs, but can also be used directly for simple translation tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://s.immersivetranslate.com/assets/r2-uploads/images/babeldoc-preview.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;We are hiring&lt;/h2&gt; &#xA;&lt;p&gt;See details: &lt;a href=&#34;https://github.com/funstory-ai/jobs&#34;&gt;EN&lt;/a&gt; | &lt;a href=&#34;https://github.com/funstory-ai/jobs/raw/main/README_ZH.md&#34;&gt;ZH&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Install from PyPI&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using the Tool feature of &lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;uv&lt;/a&gt; to install yadt.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, you need to refer to &lt;a href=&#34;https://github.com/astral-sh/uv#installation&#34;&gt;uv installation&lt;/a&gt; to install uv and set up the &lt;code&gt;PATH&lt;/code&gt; environment variable as prompted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the following command to install yadt:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv tool install --python 3.12 BabelDOC&#xA;&#xA;babeldoc --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;babeldoc&lt;/code&gt; command. For example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;babeldoc --bing  --files example.pdf&#xA;&#xA;# multiple files&#xA;babeldoc --bing  --files example1.pdf --files example2.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install from Source&lt;/h3&gt; &#xA;&lt;p&gt;We still recommend using &lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;uv&lt;/a&gt; to manage virtual environments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, you need to refer to &lt;a href=&#34;https://github.com/astral-sh/uv#installation&#34;&gt;uv installation&lt;/a&gt; to install uv and set up the &lt;code&gt;PATH&lt;/code&gt; environment variable as prompted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the following command to install yadt:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# clone the project&#xA;git clone https://github.com/funstory-ai/BabelDOC&#xA;&#xA;# enter the project directory&#xA;cd BabelDOC&#xA;&#xA;# install dependencies and run babeldoc&#xA;uv run babeldoc --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;uv run babeldoc&lt;/code&gt; command. For example:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv run babeldoc --files example.pdf --openai --openai-model &#34;gpt-4o-mini&#34; --openai-base-url &#34;https://api.openai.com/v1&#34; --openai-api-key &#34;your-api-key-here&#34;&#xA;&#xA;# multiple files&#xA;uv run babeldoc --files example.pdf --files example2.pdf --openai --openai-model &#34;gpt-4o-mini&#34; --openai-base-url &#34;https://api.openai.com/v1&#34; --openai-api-key &#34;your-api-key-here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] The absolute path is recommended.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Advanced Options&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This CLI is mainly for debugging purposes. Although end users can use this CLI to translate files, we do not provide any technical support for this purpose.&lt;/p&gt; &#xA; &lt;p&gt;End users should directly use &lt;strong&gt;Online Service&lt;/strong&gt;: Beta version launched &lt;a href=&#34;https://app.immersivetranslate.com/babel-doc/&#34;&gt;Immersive Translate - BabelDOC&lt;/a&gt; 1000 free pages per month.&lt;/p&gt; &#xA; &lt;p&gt;End users who need self-deployment should use &lt;a href=&#34;https://github.com/Byaidu/PDFMathTranslate&#34;&gt;PDFMathTranslate&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you find that an option is not listed below, it means that this option is a debugging option for maintainers. Please do not use these options.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Language Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--lang-in&lt;/code&gt;, &lt;code&gt;-li&lt;/code&gt;: Source language code (default: en)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--lang-out&lt;/code&gt;, &lt;code&gt;-lo&lt;/code&gt;: Target language code (default: zh)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Currently, this project mainly focuses on English-to-Chinese translation, and other scenarios have not been tested yet.&lt;/p&gt; &#xA; &lt;p&gt;(2025.3.1 update): Basic English target language support has been added, primarily to minimize line breaks within words([0-9A-Za-z]+).&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/funstory-ai/BabelDOC/issues/129&#34;&gt;HELP WANTED: Collecting word regular expressions for more languages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;PDF Processing Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--files&lt;/code&gt;: One or more file paths to input PDF documents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--pages&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;: Specify pages to translate (e.g., &#34;1,2,1-,-3,3-5&#34;). If not set, translate all pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--split-short-lines&lt;/code&gt;: Force split short lines into different paragraphs (may cause poor typesetting &amp;amp; bugs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--short-line-split-factor&lt;/code&gt;: Split threshold factor (default: 0.8). The actual threshold is the median length of all lines on the current page * this factor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--skip-clean&lt;/code&gt;: Skip PDF cleaning step&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--dual-translate-first&lt;/code&gt;: Put translated pages first in dual PDF mode (default: original pages first)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--disable-rich-text-translate&lt;/code&gt;: Disable rich text translation (may help improve compatibility with some PDFs)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--enhance-compatibility&lt;/code&gt;: Enable all compatibility enhancement options (equivalent to --skip-clean --dual-translate-first --disable-rich-text-translate)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--use-alternating-pages-dual&lt;/code&gt;: Use alternating pages mode for dual PDF. When enabled, original and translated pages are arranged in alternate order. When disabled (default), original and translated pages are shown side by side on the same page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--watermark-output-mode&lt;/code&gt;: Control watermark output mode: &#39;watermarked&#39; (default) adds watermark to translated PDF, &#39;no_watermark&#39; doesn&#39;t add watermark, &#39;both&#39; outputs both versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max-pages-per-part&lt;/code&gt;: Maximum number of pages per part for split translation. If not set, no splitting will be performed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-watermark&lt;/code&gt;: [DEPRECATED] Use --watermark-output-mode=no_watermark instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--translate-table-text&lt;/code&gt;: Translate table text (experimental, default: False)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--skip-scanned-detection&lt;/code&gt;: Skip scanned document detection (default: False). When using split translation, only the first part performs detection if not skipped.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Both &lt;code&gt;--skip-clean&lt;/code&gt; and &lt;code&gt;--dual-translate-first&lt;/code&gt; may help improve compatibility with some PDF readers&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--disable-rich-text-translate&lt;/code&gt; can also help with compatibility by simplifying translation input&lt;/li&gt; &#xA;  &lt;li&gt;However, using &lt;code&gt;--skip-clean&lt;/code&gt; will result in larger file sizes&lt;/li&gt; &#xA;  &lt;li&gt;If you encounter any compatibility issues, try using &lt;code&gt;--enhance-compatibility&lt;/code&gt; first&lt;/li&gt; &#xA;  &lt;li&gt;Use &lt;code&gt;--max-pages-per-part&lt;/code&gt; for large documents to split them into smaller parts for translation and automatically merge them back.&lt;/li&gt; &#xA;  &lt;li&gt;Use &lt;code&gt;--skip-scanned-detection&lt;/code&gt; to speed up processing when you know your document is not a scanned PDF.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Translation Service Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--qps&lt;/code&gt;: QPS (Queries Per Second) limit for translation service (default: 4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--ignore-cache&lt;/code&gt;: Ignore translation cache and force retranslation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-dual&lt;/code&gt;: Do not output bilingual PDF files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--no-mono&lt;/code&gt;: Do not output monolingual PDF files&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--min-text-length&lt;/code&gt;: Minimum text length to translate (default: 5)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--openai&lt;/code&gt;: Use OpenAI for translation (default: False)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Currently, only OpenAI-compatible LLM is supported. For more translator support, please use &lt;a href=&#34;https://github.com/Byaidu/PDFMathTranslate&#34;&gt;PDFMathTranslate&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;It is recommended to use models with strong compatibility with OpenAI, such as: &lt;code&gt;glm-4-flash&lt;/code&gt;, &lt;code&gt;deepseek-chat&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;li&gt;Currently, it has not been optimized for traditional translation engines like Bing/Google, it is recommended to use LLMs.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;OpenAI Specific Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--openai-model&lt;/code&gt;: OpenAI model to use (default: gpt-4o-mini)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--openai-base-url&lt;/code&gt;: Base URL for OpenAI API&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--openai-api-key&lt;/code&gt;: API key for OpenAI service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;This tool supports any OpenAI-compatible API endpoints. Just set the correct base URL and API key. (e.g. &lt;code&gt;https://xxx.custom.xxx/v1&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;For local models like Ollama, you can use any value as the API key (e.g. &lt;code&gt;--openai-api-key a&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Output Control&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--output&lt;/code&gt;, &lt;code&gt;-o&lt;/code&gt;: Output directory for translated files. If not set, use current working directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--debug&lt;/code&gt;, &lt;code&gt;-d&lt;/code&gt;: Enable debug logging level and export detailed intermediate results in &lt;code&gt;~/.cache/yadt/working&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--report-interval&lt;/code&gt;: Progress report interval in seconds (default: 0.1).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Offline Assets Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--generate-offline-assets&lt;/code&gt;: Generate an offline assets package in the specified directory. This creates a zip file containing all required models and fonts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--restore-offline-assets&lt;/code&gt;: Restore an offline assets package from the specified file. This extracts models and fonts from a previously generated package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Offline assets packages are useful for environments without internet access or to speed up installation on multiple machines.&lt;/li&gt; &#xA;  &lt;li&gt;Generate a package once with &lt;code&gt;babeldoc --generate-offline-assets /path/to/output/dir&lt;/code&gt; and then distribute it.&lt;/li&gt; &#xA;  &lt;li&gt;Restore the package on target machines with &lt;code&gt;babeldoc --restore-offline-assets /path/to/offline_assets_*.zip&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;The offline assets package name cannot be modified because the file list hash is encoded in the name.&lt;/li&gt; &#xA;  &lt;li&gt;If you provide a directory path to &lt;code&gt;--restore-offline-assets&lt;/code&gt;, the tool will automatically look for the correct offline assets package file in that directory.&lt;/li&gt; &#xA;  &lt;li&gt;The package contains all necessary fonts and models required for document processing, ensuring consistent results across different environments.&lt;/li&gt; &#xA;  &lt;li&gt;The integrity of all assets is verified using SHA3-256 hashes during both packaging and restoration.&lt;/li&gt; &#xA;  &lt;li&gt;If you&#39;re deploying in an air-gapped environment, make sure to generate the package on a machine with internet access first.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuration File&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--config&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt;: Configuration file path. Use the TOML format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example Configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[babeldoc]&#xA;# Basic settings&#xA;debug = true&#xA;lang-in = &#34;en-US&#34;&#xA;lang-out = &#34;zh-CN&#34;&#xA;qps = 10&#xA;output = &#34;/path/to/output/dir&#34;&#xA;&#xA;# PDF processing options&#xA;split-short-lines = false&#xA;short-line-split-factor = 0.8&#xA;skip-clean = false&#xA;dual-translate-first = false&#xA;disable-rich-text-translate = false&#xA;use-alternating-pages-dual = false&#xA;watermark-output-mode = &#34;watermarked&#34;  # Choices: &#34;watermarked&#34;, &#34;no_watermark&#34;, &#34;both&#34;&#xA;max-pages-per-part = 50  # Automatically split the document for translation and merge it back.&#xA;# no-watermark = false  # DEPRECATED: Use watermark-output-mode instead&#xA;skip-scanned-detection = false  # Skip scanned document detection for faster processing&#xA;&#xA;# Translation service&#xA;openai = true&#xA;openai-model = &#34;gpt-4o-mini&#34;&#xA;openai-base-url = &#34;https://api.openai.com/v1&#34;&#xA;openai-api-key = &#34;your-api-key-here&#34;&#xA;&#xA;# Output control&#xA;no-dual = false&#xA;no-mono = false&#xA;min-text-length = 5&#xA;report-interval = 0.5&#xA;&#xA;# Offline assets management&#xA;# Uncomment one of these options as needed:&#xA;# generate-offline-assets = &#34;/path/to/output/dir&#34;&#xA;# restore-offline-assets = &#34;/path/to/offline_assets_package.zip&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Python API&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Before pdf2zh 2.0 is released, you can temporarily use BabelDOC&#39;s Python API. However, after pdf2zh 2.0 is released, please directly use pdf2zh&#39;s Python API.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;This project&#39;s Python API does not guarantee any compatibility. However, the Python API from pdf2zh will guarantee a certain level of compatibility.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can refer to the example in &lt;a href=&#34;https://github.com/funstory-ai/yadt/raw/main/babeldoc/main.py&#34;&gt;main.py&lt;/a&gt; to use BabelDOC&#39;s Python API.&lt;/p&gt; &#xA;&lt;p&gt;Please note:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure call &lt;code&gt;babeldoc.high_level.init()&lt;/code&gt; before using the API&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The current &lt;code&gt;TranslationConfig&lt;/code&gt; does not fully validate input parameters, so you need to ensure the validity of input parameters&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For offline assets management, you can use the following functions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Generate an offline assets package&#xA;from pathlib import Path&#xA;import babeldoc.assets.assets&#xA;&#xA;# Generate package to a specific directory&#xA;# path is optional, default is ~/.cache/babeldoc/assets/offline_assets_{hash}.zip&#xA;babeldoc.assets.assets.generate_offline_assets_package(Path(&#34;/path/to/output/dir&#34;))&#xA;&#xA;# Restore from a package file&#xA;# path is optional, default is ~/.cache/babeldoc/assets/offline_assets_{hash}.zip&#xA;babeldoc.assets.assets.restore_offline_assets_package(Path(&#34;/path/to/offline_assets_package.zip&#34;))&#xA;&#xA;# You can also restore from a directory containing the offline assets package&#xA;# The tool will automatically find the correct package file based on the hash&#xA;babeldoc.assets.assets.restore_offline_assets_package(Path(&#34;/path/to/directory&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;The offline assets package name cannot be modified because the file list hash is encoded in the name.&lt;/li&gt; &#xA;  &lt;li&gt;When using in production environments, it&#39;s recommended to pre-generate the assets package and include it with your application distribution.&lt;/li&gt; &#xA;  &lt;li&gt;The package verification ensures that all required assets are intact and match their expected checksums.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;There are a lot projects and teams working on to make document editing and translating easier like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mathpix.com/&#34;&gt;mathpix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://doc2x.noedgeai.com/&#34;&gt;Doc2X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opendatalab/MinerU&#34;&gt;minerU&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/funstory-ai/yadt&#34;&gt;PDFMathTranslate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also some solutions to solve specific parts of the problem like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/unilm/tree/master/layoutreader&#34;&gt;layoutreader&lt;/a&gt;: the read order of the text block in a pdf&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/surya-is/surya&#34;&gt;Surya&lt;/a&gt;: the structure of the pdf&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project hopes to promote a standard pipeline and interface to solve the problem.&lt;/p&gt; &#xA;&lt;p&gt;In fact, there are two main stages of a PDF parser or translator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parsing&lt;/strong&gt;: A stage of parsing means to get the structure of the pdf such as text blocks, images, tables, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rendering&lt;/strong&gt;: A stage of rendering means to render the structure into a new pdf or other format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a service like mathpix, it will parse the pdf into a structure may be in a XML format, and then render them using a single column reader order as &lt;a href=&#34;https://github.com/microsoft/unilm/tree/master/layoutreader&#34;&gt;layoutreader&lt;/a&gt; does. The bad news is that the original structure lost.&lt;/p&gt; &#xA;&lt;p&gt;Some people will use Adobe PDF Parser because it will generate a Word document and it keeps the original structure. But it is somewhat expensive. And you know, a pdf or word document is not a good format for reading in mobile devices.&lt;/p&gt; &#xA;&lt;p&gt;We offer an intermediate representation of the results from parser and can be rendered into a new pdf or other format. The pipeline is also a plugin-based system which everybody can add their new model, ocr, renderer, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add line support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add table support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add cross-page/cross-column paragraph support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More advanced typesetting features&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Outline support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Our first 1.0 version goal is to finish a translation from &lt;a href=&#34;https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/pdfreference1.7old.pdf&#34;&gt;PDF Reference, Version 1.7&lt;/a&gt; to the following language version:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simplified Chinese&lt;/li&gt; &#xA; &lt;li&gt;Traditional Chinese&lt;/li&gt; &#xA; &lt;li&gt;Japanese&lt;/li&gt; &#xA; &lt;li&gt;Spanish&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And meet the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;layout error less than 1%&lt;/li&gt; &#xA; &lt;li&gt;content loss less than 1%&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Parsing errors in the author and reference sections; they get merged into one paragraph after translation.&lt;/li&gt; &#xA; &lt;li&gt;Lines are not supported.&lt;/li&gt; &#xA; &lt;li&gt;Does not support drop caps.&lt;/li&gt; &#xA; &lt;li&gt;Large pages will be skipped.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We encourage you to contribute to YADT! Please check out the &lt;a href=&#34;https://github.com/funstory-ai/yadt/raw/main/docs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;Everyone interacting in YADT and its sub-projects&#39; codebases, issue trackers, chat rooms, and mailing lists is expected to follow the YADT &lt;a href=&#34;https://github.com/funstory-ai/yadt/raw/main/docs/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://immersivetranslate.com&#34;&gt;Immersive Translation&lt;/a&gt; sponsors monthly Pro membership redemption codes for active contributors to this project, see details at: &lt;a href=&#34;https://github.com/funstory-ai/BabelDOC/raw/main/docs/CONTRIBUTOR_REWARD.md&#34;&gt;CONTRIBUTOR_REWARD.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Byaidu/PDFMathTranslate&#34;&gt;PDFMathTranslate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opendatalab/DocLayout-YOLO&#34;&gt;DocLayout-YOLO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pdfminer/pdfminer.six&#34;&gt;pdfminer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pymupdf/PyMuPDF&#34;&gt;PyMuPDF&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/multimeric/Asynchronize/tree/master?tab=readme-ov-file&#34;&gt;Asynchronize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oleglpts/PriorityThreadPoolExecutor&#34;&gt;PriorityThreadPoolExecutor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 id=&#34;star_hist&#34;&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#funstory-ai/babeldoc&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=funstory-ai/babeldoc&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=funstory-ai/babeldoc&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=funstory-ai/babeldoc&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/cuda-python</title>
    <updated>2025-04-06T01:36:25Z</updated>
    <id>tag:github.com,2025-04-06:/NVIDIA/cuda-python</id>
    <link href="https://github.com/NVIDIA/cuda-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CUDA Python: Performance meets Productivity&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cuda-python&lt;/h1&gt; &#xA;&lt;p&gt;CUDA Python is the home for accessing NVIDIA’s CUDA platform from Python. It consists of multiple components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvidia.github.io/cuda-python/cuda-core/latest&#34;&gt;cuda.core&lt;/a&gt;: Pythonic access to CUDA Runtime and other core functionalities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvidia.github.io/cuda-python/cuda-bindings/latest&#34;&gt;cuda.bindings&lt;/a&gt;: Low-level Python bindings to CUDA C APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvidia.github.io/cccl/cuda_cooperative/&#34;&gt;cuda.cooperative&lt;/a&gt;: A Python package for easy access to highly efficient and customizable parallel algorithms, like &lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;scan&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;transform&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvidia.github.io/cccl/cuda_parallel/&#34;&gt;cuda.parallel&lt;/a&gt;: A Python package providing CUB&#39;s reusable block-wide and warp-wide primitives for use within Numba CUDA kernels&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For access to NVIDIA CPU &amp;amp; GPU Math Libraries, please refer to &lt;a href=&#34;https://docs.nvidia.com/cuda/nvmath-python/latest&#34;&gt;nvmath-python&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;CUDA Python is currently undergoing an overhaul to improve existing and bring up new components. All of the previously available functionalities from the cuda-python package will continue to be available, please refer to the &lt;a href=&#34;https://nvidia.github.io/cuda-python/cuda-bindings/latest&#34;&gt;cuda.bindings&lt;/a&gt; documentation for installation guide and further detail.&lt;/p&gt; &#xA;&lt;h2&gt;cuda-python as a metapackage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cuda-python&lt;/code&gt; is being re-structured to become a metapackage that contains a collection of subpackages. Each subpackage is versioned independently, allowing installation of each component as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Subpackage: &lt;code&gt;cuda.core&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;cuda.core&lt;/code&gt; package offers idiomatic, pythonic access to CUDA Runtime and other functionalities.&lt;/p&gt; &#xA;&lt;p&gt;The goals are to&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Provide &lt;strong&gt;idiomatic (&#34;pythonic&#34;)&lt;/strong&gt; access to CUDA Driver, Runtime, and JIT compiler toolchain&lt;/li&gt; &#xA; &lt;li&gt;Focus on &lt;strong&gt;developer productivity&lt;/strong&gt; by ensuring end-to-end CUDA development can be performed quickly and entirely in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Avoid homegrown&lt;/strong&gt; Python abstractions for CUDA for new Python GPU libraries starting from scratch&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ease&lt;/strong&gt; developer &lt;strong&gt;burden of maintaining&lt;/strong&gt; and catching up with latest CUDA features&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flatten the learning curve&lt;/strong&gt; for current and future generations of CUDA developers&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Subpackage: &lt;code&gt;cuda.bindings&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;cuda.bindings&lt;/code&gt; package is a standard set of low-level interfaces, providing full coverage of and access to the CUDA host APIs from Python.&lt;/p&gt; &#xA;&lt;p&gt;The list of available interfaces are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CUDA Driver&lt;/li&gt; &#xA; &lt;li&gt;CUDA Runtime&lt;/li&gt; &#xA; &lt;li&gt;NVRTC&lt;/li&gt; &#xA; &lt;li&gt;nvJitLink&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Python Versions&lt;/h2&gt; &#xA;&lt;p&gt;All &lt;code&gt;cuda-python&lt;/code&gt; subpackages follows CPython &lt;a href=&#34;https://devguide.python.org/versions/&#34;&gt;End-Of-Life&lt;/a&gt; schedule for supported Python version guarantee.&lt;/p&gt; &#xA;&lt;p&gt;Before dropping support there will be an issue raised as a notice.&lt;/p&gt;</summary>
  </entry>
</feed>