<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:40:57Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uber/causalml</title>
    <updated>2022-09-08T01:40:57Z</updated>
    <id>tag:github.com,2022-09-08:/uber/causalml</id>
    <link href="https://github.com/uber/causalml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Uplift modeling and causal inference with machine learning algorithms&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/uber/causalml&#34;&gt;&lt;img width=&#34;380px&#34; height=&#34;140px&#34; src=&#34;https://raw.githubusercontent.com/uber/causalml/master/docs/_static/img/logo/causalml_logo.png&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/causalml/&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/causalml.svg?sanitize=true&#34; alt=&#34;PyPI Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/uber/causalml/actions/workflows/python-test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/uber/causalml/actions/workflows/python-test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://causalml.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/causalml/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/causalml&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/causalml&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3015&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3015/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This project is stable and being incubated for long-term support. It may contain new experimental code, for which APIs are subject to change.&lt;/p&gt; &#xA;&lt;h1&gt;Causal ML: A Python Package for Uplift Modeling and Causal Inference with ML&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Causal ML&lt;/strong&gt; is a Python package that provides a suite of uplift modeling and causal inference methods using machine learning algorithms based on recent research &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[1]&lt;/a&gt;. It provides a standard interface that allows user to estimate the Conditional Average Treatment Effect (CATE) or Individual Treatment Effect (ITE) from experimental or observational data. Essentially, it estimates the causal impact of intervention &lt;code&gt;T&lt;/code&gt; on outcome &lt;code&gt;Y&lt;/code&gt; for users with observed features &lt;code&gt;X&lt;/code&gt;, without strong assumptions on the model form. Typical use cases include&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Campaign targeting optimization&lt;/strong&gt;: An important lever to increase ROI in an advertising campaign is to target the ad to the set of customers who will have a favorable response in a given KPI such as engagement or sales. CATE identifies these customers by estimating the effect of the KPI from ad exposure at the individual level from A/B experiment or historical observational data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Personalized engagement&lt;/strong&gt;: A company has multiple options to interact with its customers such as different product choices in up-sell or messaging channels for communications. One can use CATE to estimate the heterogeneous treatment effect for each customer and treatment option combination for an optimal personalized recommendation system.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The package currently supports the following methods&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tree-based algorithms&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uplift tree/random forests on KL divergence, Euclidean Distance, and Chi-Square &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[2]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Uplift tree/random forests on Contextual Treatment Selection &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[3]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Causal Tree &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[4]&lt;/a&gt; - Work-in-progress&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Meta-learner algorithms&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;S-learner &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[5]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;T-learner &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[5]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;X-learner &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[5]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;R-learner &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[6]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Doubly Robust (DR) learner &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[7]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;TMLE learner &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[8]&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instrumental variables algorithms&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;2-Stage Least Squares (2SLS)&lt;/li&gt; &#xA;   &lt;li&gt;Doubly Robust (DR) IV &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[9]&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neural-network-based algorithms&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CEVAE &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[10]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;DragonNet &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#Literature&#34;&gt;[11]&lt;/a&gt; - with &lt;code&gt;causalml[tf]&lt;/code&gt; installation (see &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/#installation&#34;&gt;Installation&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Installation with &lt;code&gt;conda&lt;/code&gt; is recommended. &lt;code&gt;conda&lt;/code&gt; environment files for Python 3.6, 3.7, 3.8 and 3.9 are available in the repository. To use models under the &lt;code&gt;inference.tf&lt;/code&gt; module (e.g. &lt;code&gt;DragonNet&lt;/code&gt;), additional dependency of &lt;code&gt;tensorflow&lt;/code&gt; is required. For detailed instructions, see below.&lt;/p&gt; &#xA;&lt;h2&gt;Install using &lt;code&gt;conda&lt;/code&gt;:&lt;/h2&gt; &#xA;&lt;h3&gt;Install from &lt;code&gt;conda-forge&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Directly install from the conda-forge channel using conda.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ conda install -c conda-forge causalml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install with the &lt;code&gt;conda&lt;/code&gt; virtual environment&lt;/h3&gt; &#xA;&lt;p&gt;This will create a new &lt;code&gt;conda&lt;/code&gt; virtual environment named &lt;code&gt;causalml-[tf-]py3x&lt;/code&gt;, where &lt;code&gt;x&lt;/code&gt; is in &lt;code&gt;[6, 7, 8, 9]&lt;/code&gt;. e.g. &lt;code&gt;causalml-py37&lt;/code&gt; or &lt;code&gt;causalml-tf-py38&lt;/code&gt;. If you want to change the name of the environment, update the relevant YAML file in &lt;code&gt;envs/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/uber/causalml.git&#xA;$ cd causalml/envs/&#xA;$ conda env create -f environment-py38.yml&#x9;# for the virtual environment with Python 3.8 and CausalML&#xA;$ conda activate causalml-py38&#xA;(causalml-py38)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install &lt;code&gt;causalml&lt;/code&gt; with &lt;code&gt;tensorflow&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/uber/causalml.git&#xA;$ cd causalml/envs/&#xA;$ conda env create -f environment-tf-py38.yml&#x9;# for the virtual environment with Python 3.8 and CausalML&#xA;$ conda activate causalml-tf-py38&#xA;(causalml-tf-py38) pip install -U numpy&#x9;&#x9;&#x9;# this step is necessary to fix [#338](https://github.com/uber/causalml/issues/338)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install using &lt;code&gt;pip&lt;/code&gt;:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/uber/causalml.git&#xA;$ cd causalml&#xA;$ pip install -r requirements.txt&#xA;$ pip install causalml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install &lt;code&gt;causalml&lt;/code&gt; with &lt;code&gt;tensorflow&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/uber/causalml.git&#xA;$ cd causalml&#xA;$ pip install -r requirements-tf.txt&#xA;$ pip install causalml[tf]&#xA;$ pip install -U numpy&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;# this step is necessary to fix [#338](https://github.com/uber/causalml/issues/338)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install from source:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/uber/causalml.git&#xA;$ cd causalml&#xA;$ pip install -r requirements.txt&#xA;$ python setup.py build_ext --inplace&#xA;$ python setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick Start&lt;/h1&gt; &#xA;&lt;h2&gt;Average Treatment Effect Estimation with S, T, X, and R Learners&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from causalml.inference.meta import LRSRegressor&#xA;from causalml.inference.meta import XGBTRegressor, MLPTRegressor&#xA;from causalml.inference.meta import BaseXRegressor&#xA;from causalml.inference.meta import BaseRRegressor&#xA;from xgboost import XGBRegressor&#xA;from causalml.dataset import synthetic_data&#xA;&#xA;y, X, treatment, _, _, e = synthetic_data(mode=1, n=1000, p=5, sigma=1.0)&#xA;&#xA;lr = LRSRegressor()&#xA;te, lb, ub = lr.estimate_ate(X, treatment, y)&#xA;print(&#39;Average Treatment Effect (Linear Regression): {:.2f} ({:.2f}, {:.2f})&#39;.format(te[0], lb[0], ub[0]))&#xA;&#xA;xg = XGBTRegressor(random_state=42)&#xA;te, lb, ub = xg.estimate_ate(X, treatment, y)&#xA;print(&#39;Average Treatment Effect (XGBoost): {:.2f} ({:.2f}, {:.2f})&#39;.format(te[0], lb[0], ub[0]))&#xA;&#xA;nn = MLPTRegressor(hidden_layer_sizes=(10, 10),&#xA;                 learning_rate_init=.1,&#xA;                 early_stopping=True,&#xA;                 random_state=42)&#xA;te, lb, ub = nn.estimate_ate(X, treatment, y)&#xA;print(&#39;Average Treatment Effect (Neural Network (MLP)): {:.2f} ({:.2f}, {:.2f})&#39;.format(te[0], lb[0], ub[0]))&#xA;&#xA;xl = BaseXRegressor(learner=XGBRegressor(random_state=42))&#xA;te, lb, ub = xl.estimate_ate(X, treatment, y, e)&#xA;print(&#39;Average Treatment Effect (BaseXRegressor using XGBoost): {:.2f} ({:.2f}, {:.2f})&#39;.format(te[0], lb[0], ub[0]))&#xA;&#xA;rl = BaseRRegressor(learner=XGBRegressor(random_state=42))&#xA;te, lb, ub =  rl.estimate_ate(X=X, p=e, treatment=treatment, y=y)&#xA;print(&#39;Average Treatment Effect (BaseRRegressor using XGBoost): {:.2f} ({:.2f}, {:.2f})&#39;.format(te[0], lb[0], ub[0]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/uber/causalml/raw/master/examples/meta_learners_with_synthetic_data.ipynb&#34;&gt;Meta-learner example notebook&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Interpretable Causal ML&lt;/h2&gt; &#xA;&lt;p&gt;Causal ML provides methods to interpret the treatment effect models trained as follows:&lt;/p&gt; &#xA;&lt;h3&gt;Meta Learner Feature Importances&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from causalml.inference.meta import BaseSRegressor, BaseTRegressor, BaseXRegressor, BaseRRegressor&#xA;from causalml.dataset.regression import synthetic_data&#xA;&#xA;# Load synthetic data&#xA;y, X, treatment, tau, b, e = synthetic_data(mode=1, n=10000, p=25, sigma=0.5)&#xA;w_multi = np.array([&#39;treatment_A&#39; if x==1 else &#39;control&#39; for x in treatment]) # customize treatment/control names&#xA;&#xA;slearner = BaseSRegressor(LGBMRegressor(), control_name=&#39;control&#39;)&#xA;slearner.estimate_ate(X, w_multi, y)&#xA;slearner_tau = slearner.fit_predict(X, w_multi, y)&#xA;&#xA;model_tau_feature = RandomForestRegressor()  # specify model for model_tau_feature&#xA;&#xA;slearner.get_importance(X=X, tau=slearner_tau, model_tau_feature=model_tau_feature,&#xA;                        normalize=True, method=&#39;auto&#39;, features=feature_names)&#xA;&#xA;# Using the feature_importances_ method in the base learner (LGBMRegressor() in this example)&#xA;slearner.plot_importance(X=X, tau=slearner_tau, normalize=True, method=&#39;auto&#39;)&#xA;&#xA;# Using eli5&#39;s PermutationImportance&#xA;slearner.plot_importance(X=X, tau=slearner_tau, normalize=True, method=&#39;permutation&#39;)&#xA;&#xA;# Using SHAP&#xA;shap_slearner = slearner.get_shap_values(X=X, tau=slearner_tau)&#xA;&#xA;# Plot shap values without specifying shap_dict&#xA;slearner.plot_shap_values(X=X, tau=slearner_tau)&#xA;&#xA;# Plot shap values WITH specifying shap_dict&#xA;slearner.plot_shap_values(X=X, shap_dict=shap_slearner)&#xA;&#xA;# interaction_idx set to &#39;auto&#39; (searches for feature with greatest approximate interaction)&#xA;slearner.plot_shap_dependence(treatment_group=&#39;treatment_A&#39;,&#xA;                              feature_idx=1,&#xA;                              X=X,&#xA;                              tau=slearner_tau,&#xA;                              interaction_idx=&#39;auto&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;629px&#34; height=&#34;618px&#34; src=&#34;https://raw.githubusercontent.com/uber/causalml/master/docs/_static/img/shap_vis.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/uber/causalml/raw/master/examples/feature_interpretations_example.ipynb&#34;&gt;feature interpretations example notebook&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Uplift Tree Visualization&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.display import Image&#xA;from causalml.inference.tree import UpliftTreeClassifier, UpliftRandomForestClassifier&#xA;from causalml.inference.tree import uplift_tree_string, uplift_tree_plot&#xA;&#xA;uplift_model = UpliftTreeClassifier(max_depth=5, min_samples_leaf=200, min_samples_treatment=50,&#xA;                                    n_reg=100, evaluationFunction=&#39;KL&#39;, control_name=&#39;control&#39;)&#xA;&#xA;uplift_model.fit(df[features].values,&#xA;                 treatment=df[&#39;treatment_group_key&#39;].values,&#xA;                 y=df[&#39;conversion&#39;].values)&#xA;&#xA;graph = uplift_tree_plot(uplift_model.fitted_uplift_tree, features)&#xA;Image(graph.create_png())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;800px&#34; height=&#34;479px&#34; src=&#34;https://raw.githubusercontent.com/uber/causalml/master/docs/_static/img/uplift_tree_vis.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/uber/causalml/raw/master/examples/uplift_tree_visualization.ipynb&#34;&gt;Uplift Tree visualization example notebook&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We welcome community contributors to the project. Before you start, please read our &lt;a href=&#34;https://github.com/uber/causalml/raw/master/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; and check out &lt;a href=&#34;https://raw.githubusercontent.com/uber/causalml/master/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h1&gt;Versioning&lt;/h1&gt; &#xA;&lt;p&gt;We document versions and changes in our &lt;a href=&#34;https://github.com/uber/causalml/raw/master/docs/changelog.rst&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the Apache 2.0 License - see the &lt;a href=&#34;https://github.com/uber/causalml/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://causalml.readthedocs.io/en/latest/about.html&#34;&gt;Causal ML API documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Conference Talks and Publications by CausalML Team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Talk) Introduction to CausalML at &lt;a href=&#34;https://www.causalscience.org/meeting/program/day-2/&#34;&gt;Causal Data Science Meeting 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Talk) Introduction to CausalML at &lt;a href=&#34;https://ide.mit.edu/events/2021-conference-on-digital-experimentation-mit-codemit/&#34;&gt;2021 Conference on Digital Experimentation @ MIT (CODE@MIT)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Talk) Causal Inference and Machine Learning in Practice with EconML and CausalML: Industrial Use Cases at Microsoft, TripAdvisor, Uber at &lt;a href=&#34;https://kdd.org/kdd2021/tutorials&#34;&gt;KDD 2021 Tutorials&lt;/a&gt; (&lt;a href=&#34;https://causal-machine-learning.github.io/kdd2021-tutorial/&#34;&gt;website and slide links&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;(Publication) CausalML White Paper &lt;a href=&#34;https://arxiv.org/abs/2002.11631&#34;&gt;Causalml: Python package for causal machine learning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Publication) &lt;a href=&#34;https://ieeexplore.ieee.org/document/8964199&#34;&gt;Uplift Modeling for Multiple Treatments with Cost Optimization&lt;/a&gt; at &lt;a href=&#34;http://203.170.84.89/~idawis33/dsaa2019/preliminary-program/&#34;&gt;2019 IEEE International Conference on Data Science and Advanced Analytics (DSAA)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Publication) &lt;a href=&#34;https://arxiv.org/abs/2005.03447&#34;&gt;Feature Selection Methods for Uplift Modeling&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;To cite CausalML in publications, you can refer to the following sources:&lt;/p&gt; &#xA;&lt;p&gt;Whitepaper: &lt;a href=&#34;https://arxiv.org/abs/2002.11631&#34;&gt;CausalML: Python Package for Causal Machine Learning&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bibtex:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;@misc{chen2020causalml, title={CausalML: Python Package for Causal Machine Learning}, author={Huigang Chen and Totte Harinen and Jeong-Yoon Lee and Mike Yung and Zhenyu Zhao}, year={2020}, eprint={2002.11631}, archivePrefix={arXiv}, primaryClass={cs.CY} }&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Literature&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Chen, Huigang, Totte Harinen, Jeong-Yoon Lee, Mike Yung, and Zhenyu Zhao. &#34;Causalml: Python package for causal machine learning.&#34; arXiv preprint arXiv:2002.11631 (2020).&lt;/li&gt; &#xA; &lt;li&gt;Radcliffe, Nicholas J., and Patrick D. Surry. &#34;Real-world uplift modelling with significance-based uplift trees.&#34; White Paper TR-2011-1, Stochastic Solutions (2011): 1-33.&lt;/li&gt; &#xA; &lt;li&gt;Zhao, Yan, Xiao Fang, and David Simchi-Levi. &#34;Uplift modeling with multiple treatments and general response types.&#34; Proceedings of the 2017 SIAM International Conference on Data Mining. Society for Industrial and Applied Mathematics, 2017.&lt;/li&gt; &#xA; &lt;li&gt;Athey, Susan, and Guido Imbens. &#34;Recursive partitioning for heterogeneous causal effects.&#34; Proceedings of the National Academy of Sciences 113.27 (2016): 7353-7360.&lt;/li&gt; &#xA; &lt;li&gt;Künzel, Sören R., et al. &#34;Metalearners for estimating heterogeneous treatment effects using machine learning.&#34; Proceedings of the national academy of sciences 116.10 (2019): 4156-4165.&lt;/li&gt; &#xA; &lt;li&gt;Nie, Xinkun, and Stefan Wager. &#34;Quasi-oracle estimation of heterogeneous treatment effects.&#34; arXiv preprint arXiv:1712.04912 (2017).&lt;/li&gt; &#xA; &lt;li&gt;Bang, Heejung, and James M. Robins. &#34;Doubly robust estimation in missing data and causal inference models.&#34; Biometrics 61.4 (2005): 962-973.&lt;/li&gt; &#xA; &lt;li&gt;Van Der Laan, Mark J., and Daniel Rubin. &#34;Targeted maximum likelihood learning.&#34; The international journal of biostatistics 2.1 (2006).&lt;/li&gt; &#xA; &lt;li&gt;Kennedy, Edward H. &#34;Optimal doubly robust estimation of heterogeneous causal effects.&#34; arXiv preprint arXiv:2004.14497 (2020).&lt;/li&gt; &#xA; &lt;li&gt;Louizos, Christos, et al. &#34;Causal effect inference with deep latent-variable models.&#34; arXiv preprint arXiv:1705.08821 (2017).&lt;/li&gt; &#xA; &lt;li&gt;Shi, Claudia, David M. Blei, and Victor Veitch. &#34;Adapting neural networks for the estimation of treatment effects.&#34; 33rd Conference on Neural Information Processing Systems (NeurIPS 2019), 2019.&lt;/li&gt; &#xA; &lt;li&gt;Zhao, Zhenyu, Yumin Zhang, Totte Harinen, and Mike Yung. &#34;Feature Selection Methods for Uplift Modeling.&#34; arXiv preprint arXiv:2005.03447 (2020).&lt;/li&gt; &#xA; &lt;li&gt;Zhao, Zhenyu, and Totte Harinen. &#34;Uplift modeling for multiple treatments with cost optimization.&#34; In 2019 IEEE International Conference on Data Science and Advanced Analytics (DSAA), pp. 422-431. IEEE, 2019.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/uplift/index.html&#34;&gt;uplift&lt;/a&gt;: uplift models in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/grf/index.html&#34;&gt;grf&lt;/a&gt;: generalized random forests that include heterogeneous treatment effect estimation in R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xnie/rlearner&#34;&gt;rlearner&lt;/a&gt;: A R package that implements R-Learner&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Microsoft/dowhy&#34;&gt;DoWhy&lt;/a&gt;: Causal inference in Python based on Judea Pearl&#39;s do-calculus&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/EconML&#34;&gt;EconML&lt;/a&gt;: A Python package that implements heterogeneous treatment effect estimators from econometrics and machine learning methods&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dbt-labs/dbt-core</title>
    <updated>2022-09-08T01:40:57Z</updated>
    <id>tag:github.com,2022-09-08:/dbt-labs/dbt-core</id>
    <link href="https://github.com/dbt-labs/dbt-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dbt enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-core/fa1ea14ddfb1d5ae319d5141844910dd53ab2834/etc/dbt-core.svg?sanitize=true&#34; alt=&#34;dbt logo&#34; width=&#34;750&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/dbt-labs/dbt-core/actions/workflows/main.yml&#34;&gt; &lt;img src=&#34;https://github.com/dbt-labs/dbt-core/actions/workflows/main.yml/badge.svg?event=push&#34; alt=&#34;CI Badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.getdbt.com/&#34;&gt;dbt&lt;/a&gt;&lt;/strong&gt; enables data analysts and engineers to transform their data using the same practices that software engineers use to build applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dbt-labs/dbt-core/raw/202cb7e51e218c7b29eb3b11ad058bd56b7739de/etc/dbt-transform.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Understanding dbt&lt;/h2&gt; &#xA;&lt;p&gt;Analysts using dbt can transform their data by simply writing select statements, while dbt handles turning these statements into tables and views in a data warehouse.&lt;/p&gt; &#xA;&lt;p&gt;These select statements, or &#34;models&#34;, form a dbt project. Models frequently build on top of one another – dbt makes it easy to &lt;a href=&#34;https://docs.getdbt.com/docs/ref&#34;&gt;manage relationships&lt;/a&gt; between models, and &lt;a href=&#34;https://docs.getdbt.com/docs/documentation&#34;&gt;visualize these relationships&lt;/a&gt;, as well as assure the quality of your transformations through &lt;a href=&#34;https://docs.getdbt.com/docs/testing&#34;&gt;testing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-core/6c6649f9129d5d108aa3b0526f634cd8f3a9d1ed/etc/dbt-dag.png&#34; alt=&#34;dbt dag&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.getdbt.com/docs/installation&#34;&gt;Install dbt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://docs.getdbt.com/docs/introduction/&#34;&gt;introduction&lt;/a&gt; and &lt;a href=&#34;https://docs.getdbt.com/docs/about/viewpoint/&#34;&gt;viewpoint&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join the dbt Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be part of the conversation in the &lt;a href=&#34;http://community.getdbt.com/&#34;&gt;dbt Community Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Read more on the &lt;a href=&#34;https://discourse.getdbt.com&#34;&gt;dbt Community Discourse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting bugs and contributing code&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Want to report a bug or request a feature? Let us know on &lt;a href=&#34;http://community.getdbt.com/&#34;&gt;Slack&lt;/a&gt;, or open &lt;a href=&#34;https://github.com/dbt-labs/dbt-core/issues/new&#34;&gt;an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Want to help us build dbt? Check out the &lt;a href=&#34;https://github.com/dbt-labs/dbt-core/raw/HEAD/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the dbt project&#39;s codebases, issue trackers, chat rooms, and mailing lists is expected to follow the &lt;a href=&#34;https://community.getdbt.com/code-of-conduct&#34;&gt;dbt Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/airflow</title>
    <updated>2022-09-08T01:40:57Z</updated>
    <id>tag:github.com,2022-09-08:/apache/airflow</id>
    <link href="https://github.com/apache/airflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Airflow - A platform to programmatically author, schedule, and monitor workflows&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Airflow&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/apache-airflow&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/apache-airflow.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/airflow/actions&#34;&gt;&lt;img src=&#34;https://github.com/apache/airflow/workflows/CI%20Build/badge.svg?sanitize=true&#34; alt=&#34;GitHub Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/apache/airflow?branch=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/apache/airflow/main.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/:license-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/apache-airflow/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/apache-airflow.svg?sanitize=true&#34; alt=&#34;PyPI - Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/apache/airflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/apache/airflow.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/apache/airflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/apache/airflow.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/apache-airflow/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/apache-airflow&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/search?repo=apache-airflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/apache-airflow&#34; alt=&#34;Artifact HUB&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ApacheAirflow&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ApacheAirflow.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://s.apache.org/airflow-slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join_chat-white.svg?logo=slack&amp;amp;style=social&#34; alt=&#34;Slack Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/&#34;&gt;Apache Airflow&lt;/a&gt; (or simply Airflow) is a platform to programmatically author, schedule, and monitor workflows.&lt;/p&gt; &#xA;&lt;p&gt;When workflows are defined as code, they become more maintainable, versionable, testable, and collaborative.&lt;/p&gt; &#xA;&lt;p&gt;Use Airflow to author workflows as directed acyclic graphs (DAGs) of tasks. The Airflow scheduler executes your tasks on an array of workers while following the specified dependencies. Rich command line utilities make performing complex surgeries on DAGs a snap. The rich user interface makes it easy to visualize pipelines running in production, monitor progress, and troubleshoot issues when needed.&lt;/p&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#project-focus&#34;&gt;Project Focus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#principles&#34;&gt;Principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#installing-from-pypi&#34;&gt;Installing from PyPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#official-source-code&#34;&gt;Official source code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#convenience-packages&#34;&gt;Convenience packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#user-interface&#34;&gt;User Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#semantic-versioning&#34;&gt;Semantic versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#version-life-cycle&#34;&gt;Version Life Cycle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#support-for-python-and-kubernetes-versions&#34;&gt;Support for Python and Kubernetes versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#base-os-support-for-reference-airflow-images&#34;&gt;Base OS support for reference Airflow images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#approach-to-dependencies-of-airflow&#34;&gt;Approach to dependencies of Airflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#release-process-for-providers&#34;&gt;Release process for Providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#who-uses-apache-airflow&#34;&gt;Who uses Apache Airflow?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#who-maintains-apache-airflow&#34;&gt;Who Maintains Apache Airflow?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#can-i-use-the-apache-airflow-logo-in-my-presentation&#34;&gt;Can I use the Apache Airflow logo in my presentation?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#airflow-merchandise&#34;&gt;Airflow merchandise&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#links&#34;&gt;Links&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Project Focus&lt;/h2&gt; &#xA;&lt;p&gt;Airflow works best with workflows that are mostly static and slowly changing. When the DAG structure is similar from one run to the next, it clarifies the unit of work and continuity. Other similar projects include &lt;a href=&#34;https://github.com/spotify/luigi&#34;&gt;Luigi&lt;/a&gt;, &lt;a href=&#34;https://oozie.apache.org/&#34;&gt;Oozie&lt;/a&gt; and &lt;a href=&#34;https://azkaban.github.io/&#34;&gt;Azkaban&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Airflow is commonly used to process data, but has the opinion that tasks should ideally be idempotent (i.e., results of the task will be the same, and will not create duplicated data in a destination system), and should not pass large quantities of data from one task to the next (though tasks can pass metadata using Airflow&#39;s &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/concepts.html#xcoms&#34;&gt;Xcom feature&lt;/a&gt;). For high-volume, data-intensive tasks, a best practice is to delegate to external services specializing in that type of work.&lt;/p&gt; &#xA;&lt;p&gt;Airflow is not a streaming solution, but it is often used to process real-time data, pulling data off streams in batches.&lt;/p&gt; &#xA;&lt;h2&gt;Principles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic&lt;/strong&gt;: Airflow pipelines are configuration as code (Python), allowing for dynamic pipeline generation. This allows for writing code that instantiates pipelines dynamically.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Easily define your own operators, executors and extend the library so that it fits the level of abstraction that suits your environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Elegant&lt;/strong&gt;: Airflow pipelines are lean and explicit. Parameterizing your scripts is built into the core of Airflow using the powerful &lt;strong&gt;Jinja&lt;/strong&gt; templating engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: Airflow has a modular architecture and uses a message queue to orchestrate an arbitrary number of workers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Apache Airflow is tested with:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Main version (dev)&lt;/th&gt; &#xA;   &lt;th&gt;Stable version (2.3.4)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;3.7, 3.8, 3.9, 3.10&lt;/td&gt; &#xA;   &lt;td&gt;3.7, 3.8, 3.9, 3.10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Platform&lt;/td&gt; &#xA;   &lt;td&gt;AMD64/ARM64(*)&lt;/td&gt; &#xA;   &lt;td&gt;AMD64/ARM64(*)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kubernetes&lt;/td&gt; &#xA;   &lt;td&gt;1.21, 1.22, 1.23, 1.24, 1.25&lt;/td&gt; &#xA;   &lt;td&gt;1.20, 1.21, 1.22, 1.23, 1.24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;10, 11, 12, 13, 14&lt;/td&gt; &#xA;   &lt;td&gt;10, 11, 12, 13, 14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;5.7, 8&lt;/td&gt; &#xA;   &lt;td&gt;5.7, 8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite&lt;/td&gt; &#xA;   &lt;td&gt;3.15.0+&lt;/td&gt; &#xA;   &lt;td&gt;3.15.0+&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MSSQL&lt;/td&gt; &#xA;   &lt;td&gt;2017(*), 2019 (*)&lt;/td&gt; &#xA;   &lt;td&gt;2017(*), 2019 (*)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* Experimental&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: MySQL 5.x versions are unable to or have limitations with running multiple schedulers -- please see the &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/scheduler.html&#34;&gt;Scheduler docs&lt;/a&gt;. MariaDB is not tested/recommended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: SQLite is used in Airflow tests. Do not use it in production. We recommend using the latest stable version of SQLite for local development.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Airflow currently can be run on POSIX-compliant Operating Systems. For development it is regularly tested on fairly modern Linux Distros and recent versions of MacOS. On Windows you can run it via WSL2 (Windows Subsystem for Linux 2) or via Linux Containers. The work to add Windows support is tracked via &lt;a href=&#34;https://github.com/apache/airflow/issues/10388&#34;&gt;#10388&lt;/a&gt; but it is not a high priority. You should only use Linux-based distros as &#34;Production&#34; execution environment as this is the only environment that is supported. The only distro that is used in our CI tests and that is used in the &lt;a href=&#34;https://hub.docker.com/p/apache/airflow&#34;&gt;Community managed DockerHub image&lt;/a&gt; is &lt;code&gt;Debian Bullseye&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Visit the official Airflow website documentation (latest &lt;strong&gt;stable&lt;/strong&gt; release) for help with &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/installation.html&#34;&gt;installing Airflow&lt;/a&gt;, &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/start.html&#34;&gt;getting started&lt;/a&gt;, or walking through a more complete &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/tutorial.html&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: If you&#39;re looking for documentation for the main branch (latest development branch): you can find it on &lt;a href=&#34;https://s.apache.org/airflow-docs/&#34;&gt;s.apache.org/airflow-docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For more information on Airflow Improvement Proposals (AIPs), visit the &lt;a href=&#34;https://cwiki.apache.org/confluence/display/AIRFLOW/Airflow+Improvement+Proposals&#34;&gt;Airflow Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Documentation for dependent projects like provider packages, Docker image, Helm Chart, you&#39;ll find it in &lt;a href=&#34;https://airflow.apache.org/docs/&#34;&gt;the documentation index&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing from PyPI&lt;/h2&gt; &#xA;&lt;p&gt;We publish Apache Airflow as &lt;code&gt;apache-airflow&lt;/code&gt; package in PyPI. Installing it however might be sometimes tricky because Airflow is a bit of both a library and application. Libraries usually keep their dependencies open, and applications usually pin them, but we should do neither and both simultaneously. We decided to keep our dependencies as open as possible (in &lt;code&gt;setup.py&lt;/code&gt;) so users can install different versions of libraries if needed. This means that &lt;code&gt;pip install apache-airflow&lt;/code&gt; will not work from time to time or will produce unusable Airflow installation.&lt;/p&gt; &#xA;&lt;p&gt;To have repeatable installation, however, we keep a set of &#34;known-to-be-working&#34; constraint files in the orphan &lt;code&gt;constraints-main&lt;/code&gt; and &lt;code&gt;constraints-2-0&lt;/code&gt; branches. We keep those &#34;known-to-be-working&#34; constraints files separately per major/minor Python version. You can use them as constraint files when installing Airflow from PyPI. Note that you have to specify correct Airflow tag/version/branch and Python versions in the URL.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Installing just Airflow:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Only &lt;code&gt;pip&lt;/code&gt; installation is currently officially supported.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;While it is possible to install Airflow with tools like &lt;a href=&#34;https://python-poetry.org&#34;&gt;Poetry&lt;/a&gt; or &lt;a href=&#34;https://pypi.org/project/pip-tools&#34;&gt;pip-tools&lt;/a&gt;, they do not share the same workflow as &lt;code&gt;pip&lt;/code&gt; - especially when it comes to constraint vs. requirements management. Installing via &lt;code&gt;Poetry&lt;/code&gt; or &lt;code&gt;pip-tools&lt;/code&gt; is not currently supported.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to install Airflow using those tools, you should use the constraint files and convert them to the appropriate format and workflow that your tool requires.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#39;apache-airflow==2.3.4&#39; \&#xA; --constraint &#34;https://raw.githubusercontent.com/apache/airflow/constraints-2.3.4/constraints-3.7.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Installing with extras (i.e., postgres, google)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#39;apache-airflow[postgres,google]==2.3.4&#39; \&#xA; --constraint &#34;https://raw.githubusercontent.com/apache/airflow/constraints-2.3.4/constraints-3.7.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For information on installing provider packages, check &lt;a href=&#34;http://airflow.apache.org/docs/apache-airflow-providers/index.html&#34;&gt;providers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Official source code&lt;/h2&gt; &#xA;&lt;p&gt;Apache Airflow is an &lt;a href=&#34;https://www.apache.org&#34;&gt;Apache Software Foundation&lt;/a&gt; (ASF) project, and our official source code releases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://www.apache.org/legal/release-policy.html&#34;&gt;ASF Release Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Can be downloaded from &lt;a href=&#34;https://downloads.apache.org/airflow&#34;&gt;the ASF Distribution Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Are cryptographically signed by the release manager&lt;/li&gt; &#xA; &lt;li&gt;Are officially voted on by the PMC members during the &lt;a href=&#34;https://www.apache.org/legal/release-policy.html#release-approval&#34;&gt;Release Approval Process&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following the ASF rules, the source packages released must be sufficient for a user to build and test the release provided they have access to the appropriate platform and tools.&lt;/p&gt; &#xA;&lt;h2&gt;Convenience packages&lt;/h2&gt; &#xA;&lt;p&gt;There are other ways of installing and using Airflow. Those are &#34;convenience&#34; methods - they are not &#34;official releases&#34; as stated by the &lt;code&gt;ASF Release Policy&lt;/code&gt;, but they can be used by the users who do not want to build the software themselves.&lt;/p&gt; &#xA;&lt;p&gt;Those are - in the order of most common ways people install Airflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/apache-airflow/&#34;&gt;PyPI releases&lt;/a&gt; to install Airflow using standard &lt;code&gt;pip&lt;/code&gt; tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/apache/airflow&#34;&gt;Docker Images&lt;/a&gt; to install airflow via &lt;code&gt;docker&lt;/code&gt; tool, use them in Kubernetes, Helm Charts, &lt;code&gt;docker-compose&lt;/code&gt;, &lt;code&gt;docker swarm&lt;/code&gt;, etc. You can read more about using, customising, and extending the images in the &lt;a href=&#34;https://airflow.apache.org/docs/docker-stack/index.html&#34;&gt;Latest docs&lt;/a&gt;, and learn details on the internals in the &lt;a href=&#34;https://github.com/apache/airflow/raw/main/IMAGES.rst&#34;&gt;IMAGES.rst&lt;/a&gt; document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/airflow/tags&#34;&gt;Tags in GitHub&lt;/a&gt; to retrieve the git project sources that were used to generate official source packages via git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All those artifacts are not official releases, but they are prepared using officially released sources. Some of those artifacts are &#34;development&#34; or &#34;pre-release&#34; ones, and they are clearly marked as such following the ASF Policy.&lt;/p&gt; &#xA;&lt;h2&gt;User Interface&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;DAGs&lt;/strong&gt;: Overview of all DAGs in your environment.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/dags.png&#34; alt=&#34;DAGs&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grid&lt;/strong&gt;: Grid representation of a DAG that spans across time.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/grid.png&#34; alt=&#34;Grid&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Graph&lt;/strong&gt;: Visualization of a DAG&#39;s dependencies and their current status for a specific run.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/graph.png&#34; alt=&#34;Graph&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Task Duration&lt;/strong&gt;: Total time spent on different tasks over time.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/duration.png&#34; alt=&#34;Task Duration&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Gantt&lt;/strong&gt;: Duration and overlap of a DAG.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/gantt.png&#34; alt=&#34;Gantt&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;: Quick way to view source code of a DAG.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/code.png&#34; alt=&#34;Code&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Semantic versioning&lt;/h2&gt; &#xA;&lt;p&gt;As of Airflow 2.0.0, we support a strict &lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt; approach for all packages released.&lt;/p&gt; &#xA;&lt;p&gt;There are few specific rules that we agreed to that define details of versioning of the different packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Airflow&lt;/strong&gt;: SemVer rules apply to core airflow only (excludes any changes to providers). Changing limits for versions of Airflow dependencies is not a breaking change on its own.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Airflow Providers&lt;/strong&gt;: SemVer rules apply to changes in the particular provider&#39;s code only. SemVer MAJOR and MINOR versions for the packages are independent of the Airflow version. For example, &lt;code&gt;google 4.1.0&lt;/code&gt; and &lt;code&gt;amazon 3.0.3&lt;/code&gt; providers can happily be installed with &lt;code&gt;Airflow 2.1.2&lt;/code&gt;. If there are limits of cross-dependencies between providers and Airflow packages, they are present in providers as &lt;code&gt;install_requires&lt;/code&gt; limitations. We aim to keep backwards compatibility of providers with all previously released Airflow 2 versions but there will sometimes be breaking changes that might make some, or all providers, have minimum Airflow version specified. Change of that minimum supported Airflow version is a breaking change for provider because installing the new provider might automatically upgrade Airflow (which might be an undesired side effect of upgrading provider).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Airflow Helm Chart&lt;/strong&gt;: SemVer rules apply to changes in the chart only. SemVer MAJOR and MINOR versions for the chart are independent from the Airflow version. We aim to keep backwards compatibility of the Helm Chart with all released Airflow 2 versions, but some new features might only work starting from specific Airflow releases. We might however limit the Helm Chart to depend on minimal Airflow version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Airflow API clients&lt;/strong&gt;: SemVer MAJOR and MINOR versions follow MAJOR and MINOR versions of Airflow. The first MAJOR or MINOR X.Y.0 release of Airflow should always be followed by X.Y.0 release of all clients. The clients then can release their own PATCH releases with bugfixes, independently of Airflow PATCH releases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Version Life Cycle&lt;/h2&gt; &#xA;&lt;p&gt;Apache Airflow version life cycle:&lt;/p&gt; &#xA;&lt;!-- This table is automatically updated by pre-commit scripts/ci/pre_commit/pre_commit_supported_versions.py --&gt; &#xA;&lt;!-- Beginning of auto-generated table --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Current Patch/Minor&lt;/th&gt; &#xA;   &lt;th&gt;State&lt;/th&gt; &#xA;   &lt;th&gt;First Release&lt;/th&gt; &#xA;   &lt;th&gt;Limited Support&lt;/th&gt; &#xA;   &lt;th&gt;EOL/Terminated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;2.3.4&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;   &lt;td&gt;Dec 17, 2020&lt;/td&gt; &#xA;   &lt;td&gt;TBD&lt;/td&gt; &#xA;   &lt;td&gt;TBD&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.10&lt;/td&gt; &#xA;   &lt;td&gt;1.10.15&lt;/td&gt; &#xA;   &lt;td&gt;EOL&lt;/td&gt; &#xA;   &lt;td&gt;Aug 27, 2018&lt;/td&gt; &#xA;   &lt;td&gt;Dec 17, 2020&lt;/td&gt; &#xA;   &lt;td&gt;June 17, 2021&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.9&lt;/td&gt; &#xA;   &lt;td&gt;1.9.0&lt;/td&gt; &#xA;   &lt;td&gt;EOL&lt;/td&gt; &#xA;   &lt;td&gt;Jan 03, 2018&lt;/td&gt; &#xA;   &lt;td&gt;Aug 27, 2018&lt;/td&gt; &#xA;   &lt;td&gt;Aug 27, 2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.8&lt;/td&gt; &#xA;   &lt;td&gt;1.8.2&lt;/td&gt; &#xA;   &lt;td&gt;EOL&lt;/td&gt; &#xA;   &lt;td&gt;Mar 19, 2017&lt;/td&gt; &#xA;   &lt;td&gt;Jan 03, 2018&lt;/td&gt; &#xA;   &lt;td&gt;Jan 03, 2018&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.7&lt;/td&gt; &#xA;   &lt;td&gt;1.7.1.2&lt;/td&gt; &#xA;   &lt;td&gt;EOL&lt;/td&gt; &#xA;   &lt;td&gt;Mar 28, 2016&lt;/td&gt; &#xA;   &lt;td&gt;Mar 19, 2017&lt;/td&gt; &#xA;   &lt;td&gt;Mar 19, 2017&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- End of auto-generated table --&gt; &#xA;&lt;p&gt;Limited support versions will be supported with security and critical bug fix only. EOL versions will not get any fixes nor support. We always recommend that all users run the latest available minor release for whatever major version is in use. We &lt;strong&gt;highly&lt;/strong&gt; recommend upgrading to the latest Airflow major release at the earliest convenient time and before the EOL date.&lt;/p&gt; &#xA;&lt;h2&gt;Support for Python and Kubernetes versions&lt;/h2&gt; &#xA;&lt;p&gt;As of Airflow 2.0, we agreed to certain rules we follow for Python and Kubernetes support. They are based on the official release schedule of Python and Kubernetes, nicely summarized in the &lt;a href=&#34;https://devguide.python.org/#status-of-python-branches&#34;&gt;Python Developer&#39;s Guide&lt;/a&gt; and &lt;a href=&#34;https://kubernetes.io/docs/setup/release/version-skew-policy/&#34;&gt;Kubernetes version skew policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;We drop support for Python and Kubernetes versions when they reach EOL. Except for Kubernetes, a version stays supported by Airflow if two major cloud providers still provide support for it. We drop support for those EOL versions in main right after EOL date, and it is effectively removed when we release the first new MINOR (Or MAJOR if there is no new MINOR version) of Airflow. For example, for Python 3.7 it means that we will drop support in main right after 27.06.2023, and the first MAJOR or MINOR version of Airflow released after will not have it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#34;oldest&#34; supported version of Python/Kubernetes is the default one until we decide to switch to later version. &#34;Default&#34; is only meaningful in terms of &#34;smoke tests&#34; in CI PRs, which are run using this default version and the default reference image available. Currently &lt;code&gt;apache/airflow:latest&lt;/code&gt; and &lt;code&gt;apache/airflow:2.3.4&lt;/code&gt; images are Python 3.7 images. This means that default reference image will become the default at the time when we start preparing for dropping 3.7 support which is few months before the end of life for Python 3.7.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We support a new version of Python/Kubernetes in main after they are officially released, as soon as we make them work in our CI pipeline (which might not be immediate due to dependencies catching up with new versions of Python mostly) we release new images/support in Airflow based on the working CI setup.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Base OS support for reference Airflow images&lt;/h2&gt; &#xA;&lt;p&gt;The Airflow Community provides conveniently packaged container images that are published whenever we publish an Apache Airflow release. Those images contain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Base OS with necessary packages to install Airflow (stable Debian OS)&lt;/li&gt; &#xA; &lt;li&gt;Base Python installation in versions supported at the time of release for the MINOR version of Airflow released (so there could be different versions for 2.3 and 2.2 line for example)&lt;/li&gt; &#xA; &lt;li&gt;Libraries required to connect to suppoerted Databases (again the set of databases supported depends on the MINOR version of Airflow.&lt;/li&gt; &#xA; &lt;li&gt;Predefined set of popular providers (for details see the &lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Possibility of building your own, custom image where the user can choose their own set of providers and libraries (see &lt;a href=&#34;https://airflow.apache.org/docs/docker-stack/build.html&#34;&gt;Building the image&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In the future Airflow might also support a &#34;slim&#34; version without providers nor database clients installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The version of the base OS image is the stable version of Debian. Airflow supports using all currently active stable versions - as soon as all Airflow dependencies support building, and we set up the CI pipeline for building and testing the OS version. Approximately 6 months before the end-of-life of a previous stable version of the OS, Airflow switches the images released to use the latest supported version of the OS. For example since &lt;code&gt;Debian Buster&lt;/code&gt; end-of-life was August 2022, Airflow switched the images in &lt;code&gt;main&lt;/code&gt; branch to use &lt;code&gt;Debian Bullseye&lt;/code&gt; in February/March 2022. The version was used in the next MINOR release after the switch happened. In case of the Bullseye switch - 2.3.0 version used &lt;code&gt;Debian Bullseye&lt;/code&gt;. The images released in the previous MINOR version continue to use the version that all other releases for the MINOR version used.&lt;/p&gt; &#xA;&lt;p&gt;Support for &lt;code&gt;Debian Buster&lt;/code&gt; image was dropped in August 2022 completely and everyone is expected to stop building their images using &lt;code&gt;Debian Buster&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Users will continue to be able to build their images using stable Debian releases until the end of life and building and verifying of the images happens in our CI but no unit tests were executed using this image in the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Approach to dependencies of Airflow&lt;/h2&gt; &#xA;&lt;p&gt;Airflow has a lot of dependencies - direct and transitive, also Airflow is both - library and application, therefore our policies to dependencies has to include both - stability of installation of application, but also ability to install newer version of dependencies for those users who develop DAGs. We developed the approach where &lt;code&gt;constraints&lt;/code&gt; are used to make sure airflow can be installed in a repeatable way, while we do not limit our users to upgrade most of the dependencies. As a result we decided not to upper-bound version of Airflow dependencies by default, unless we have good reasons to believe upper-bounding them is needed because of importance of the dependency as well as risk it involves to upgrade specific dependency. We also upper-bound the dependencies that we know cause problems.&lt;/p&gt; &#xA;&lt;p&gt;The constraint mechanism of ours takes care about finding and upgrading all the non-upper bound dependencies automatically (providing that all the tests pass). Our &lt;code&gt;main&lt;/code&gt; build failures will indicate in case there are versions of dependencies that break our tests - indicating that we should either upper-bind them or that we should fix our code/tests to account for the upstream changes from those dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Whenever we upper-bound such a dependency, we should always comment why we are doing it - i.e. we should have a good reason why dependency is upper-bound. And we should also mention what is the condition to remove the binding.&lt;/p&gt; &#xA;&lt;h3&gt;Approach for dependencies for Airflow Core&lt;/h3&gt; &#xA;&lt;p&gt;Those &lt;code&gt;extras&lt;/code&gt; and &lt;code&gt;providers&lt;/code&gt; dependencies are maintained in &lt;code&gt;setup.cfg&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are few dependencies that we decided are important enough to upper-bound them by default, as they are known to follow predictable versioning scheme, and we know that new versions of those are very likely to bring breaking changes. We commit to regularly review and attempt to upgrade to the newer versions of the dependencies as they are released, but this is manual process.&lt;/p&gt; &#xA;&lt;p&gt;The important dependencies are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SQLAlchemy&lt;/code&gt;: upper-bound to specific MINOR version (SQLAlchemy is known to remove deprecations and introduce breaking changes especially that support for different Databases varies and changes at various speed (example: SQLAlchemy 1.4 broke MSSQL integration for Airflow)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Alembic&lt;/code&gt;: it is important to handle our migrations in predictable and performant way. It is developed together with SQLAlchemy. Our experience with Alembic is that it very stable in MINOR version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Flask&lt;/code&gt;: We are using Flask as the back-bone of our web UI and API. We know major version of Flask are very likely to introduce breaking changes across those so limiting it to MAJOR version makes sense&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;werkzeug&lt;/code&gt;: the library is known to cause problems in new versions. It is tightly coupled with Flask libraries, and we should update them together&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;celery&lt;/code&gt;: Celery is crucial component of Airflow as it used for CeleryExecutor (and similar). Celery &lt;a href=&#34;https://docs.celeryq.dev/en/stable/contributing.html?highlight=semver#versions&#34;&gt;follows SemVer&lt;/a&gt;, so we should upper-bound it to the next MAJOR version. Also when we bump the upper version of the library, we should make sure Celery Provider minimum Airflow version is updated).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubernetes&lt;/code&gt;: Kubernetes is a crucial component of Airflow as it is used for the KubernetesExecutor (and similar). Kubernetes Python library &lt;a href=&#34;https://github.com/kubernetes-client/python#compatibility&#34;&gt;follows SemVer&lt;/a&gt;, so we should upper-bound it to the next MAJOR version. Also when we bump the upper version of the library, we should make sure Kubernetes Provider minimum Airflow version is updated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Approach for dependencies in Airflow Providers and extras&lt;/h3&gt; &#xA;&lt;p&gt;Those &lt;code&gt;extras&lt;/code&gt; and &lt;code&gt;providers&lt;/code&gt; dependencies are maintained in &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, we should not upper-bound dependencies for providers, however each provider&#39;s maintainer might decide to add additional limits (and justify them with comment)&lt;/p&gt; &#xA;&lt;h2&gt;Release process for Providers&lt;/h2&gt; &#xA;&lt;p&gt;Providers released by the community (with roughly monthly cadence) have limitation of a minimum supported version of Airflow. The minimum version of Airflow is the &lt;code&gt;MINOR&lt;/code&gt; version (2.2, 2.3 etc.) indicating that the providers might use features that appeared in this release. The default support timespan for the minimum version of Airflow (there could be justified exceptions) is that we increase the minimum Airflow version, when 12 months passed since the first release for the MINOR version of Airflow.&lt;/p&gt; &#xA;&lt;p&gt;For example this means that by default we upgrade the minimum version of Airflow supported by providers to 2.3.0 in the first Provider&#39;s release after 11th of October 2022 (11th of October 2021 is the date when the first &lt;code&gt;PATCHLEVEL&lt;/code&gt; of 2.2 (2.2.0) has been released.&lt;/p&gt; &#xA;&lt;p&gt;Providers are often connected with some stakeholders that are vitally interested in maintaining backwards compatibilities in their integrations (for example cloud providers, or specific service providers). But, we are also bound with the &lt;a href=&#34;https://www.apache.org/legal/release-policy.html&#34;&gt;Apache Software Foundation release policy&lt;/a&gt; which describes who releases, and how to release the ASF software. The provider&#39;s governance model is something we name &#34;mixed governance&#34; - where we follow the release policies, while the burden of maintaining and testing the cherry-picked versions is on those who commit to perform the cherry-picks and make PRs to older branches.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;mixed governance&#34; (optional, per-provider) means that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Airflow Community and release manager decide when to release those providers. This is fully managed by the community and the usual release-management process following the &lt;a href=&#34;https://www.apache.org/legal/release-policy.html&#34;&gt;Apache Software Foundation release policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The contributors (who might or might not be direct stakeholders in the provider) will carry the burden of cherry-picking and testing the older versions of providers.&lt;/li&gt; &#xA; &lt;li&gt;There is no &#34;selection&#34; and acceptance process to determine which version of the provider is released. It is determined by the actions of contributors raising the PR with cherry-picked changes and it follows the usual PR review process where maintainer approves (or not) and merges (or not) such PR. Simply speaking - the completed action of cherry-picking and testing the older version of the provider make it eligible to be released. Unless there is someone who volunteers and perform the cherry-picking and testing, the provider is not released.&lt;/li&gt; &#xA; &lt;li&gt;Branches to raise PR against are created when a contributor commits to perform the cherry-picking (as a comment in PR to cherry-pick for example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Usually, community effort is focused on the most recent version of each provider. The community approach is that we should rather aggressively remove deprecations in &#34;major&#34; versions of the providers - whenever there is an opportunity to increase major version of a provider, we attempt to remove all deprecations. However, sometimes there is a contributor (who might or might not represent stakeholder), willing to make their effort on cherry-picking and testing the non-breaking changes to a selected, previous major branch of the provider. This results in releasing at most two versions of a provider at a time:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;potentially breaking &#34;latest&#34; major version&lt;/li&gt; &#xA; &lt;li&gt;selected past major version with non-breaking changes applied by the contributor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cherry-picking such changes follows the same process for releasing Airflow patch-level releases for a previous minor Airflow version. Usually such cherry-picking is done when there is an important bugfix and the latest version contains breaking changes that are not coupled with the bugfix. Releasing them together in the latest version of the provider effectively couples them, and therefore they&#39;re released separately. The cherry-picked changes have to be merged by the committer following the usual rules of the community.&lt;/p&gt; &#xA;&lt;p&gt;There is no obligation to cherry-pick and release older versions of the providers. The community continues to release such older versions of the providers for as long as there is an effort of the contributors to perform the cherry-picks and carry-on testing of the older provider version.&lt;/p&gt; &#xA;&lt;p&gt;The availability of stakeholder that can manage &#34;service-oriented&#34; maintenance and agrees to such a responsibility, will also drive our willingness to accept future, new providers to become community managed.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to help build Apache Airflow? Check out our &lt;a href=&#34;https://github.com/apache/airflow/raw/main/CONTRIBUTING.rst&#34;&gt;contributing documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Official Docker (container) images for Apache Airflow are described in &lt;a href=&#34;https://github.com/apache/airflow/raw/main/IMAGES.rst&#34;&gt;IMAGES.rst&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who uses Apache Airflow?&lt;/h2&gt; &#xA;&lt;p&gt;More than 400 organizations are using Apache Airflow &lt;a href=&#34;https://github.com/apache/airflow/raw/main/INTHEWILD.md&#34;&gt;in the wild&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who Maintains Apache Airflow?&lt;/h2&gt; &#xA;&lt;p&gt;Airflow is the work of the &lt;a href=&#34;https://github.com/apache/airflow/graphs/contributors&#34;&gt;community&lt;/a&gt;, but the &lt;a href=&#34;https://people.apache.org/committers-by-project.html#airflow&#34;&gt;core committers/maintainers&lt;/a&gt; are responsible for reviewing and merging PRs as well as steering conversations around new feature requests. If you would like to become a maintainer, please review the Apache Airflow &lt;a href=&#34;https://github.com/apache/airflow/raw/main/COMMITTERS.rst#guidelines-to-become-an-airflow-committer&#34;&gt;committer requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Can I use the Apache Airflow logo in my presentation?&lt;/h2&gt; &#xA;&lt;p&gt;Yes! Be sure to abide by the Apache Foundation &lt;a href=&#34;https://www.apache.org/foundation/marks/#books&#34;&gt;trademark policies&lt;/a&gt; and the Apache Airflow &lt;a href=&#34;https://cwiki.apache.org/confluence/display/AIRFLOW/Brandbook&#34;&gt;Brandbook&lt;/a&gt;. The most up to date logos are found in &lt;a href=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/apache-airflow/img/logos&#34;&gt;this repo&lt;/a&gt; and on the Apache Software Foundation &lt;a href=&#34;https://www.apache.org/logos/about.html&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Airflow merchandise&lt;/h2&gt; &#xA;&lt;p&gt;If you would love to have Apache Airflow stickers, t-shirt, etc. then check out &lt;a href=&#34;https://www.redbubble.com/i/sticker/Apache-Airflow-by-comdev/40497530.EJUG5&#34;&gt;Redbubble Shop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s.apache.org/airflow-slack&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;The CI infrastructure for Apache Airflow has been sponsored by:&lt;/p&gt; &#xA;&lt;!-- Ordered by most recently &#34;funded&#34; --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://astronomer.io&#34;&gt;&lt;img src=&#34;https://assets2.astronomer.io/logos/logoForLIGHTbackground.png&#34; alt=&#34;astronomer.io&#34; width=&#34;250px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aws.amazon.com/opensource/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/airflow/main/docs/integration-logos/aws/AWS-Cloud-alt_light-bg@4x.png&#34; alt=&#34;AWS OpenSource&#34; width=&#34;130px&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>