<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-02T01:36:31Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/TransformerCompression</title>
    <updated>2024-02-02T01:36:31Z</updated>
    <id>tag:github.com,2024-02-02:/microsoft/TransformerCompression</id>
    <link href="https://github.com/microsoft/TransformerCompression" rel="alternate"></link>
    <summary type="html">&lt;p&gt;For releasing code related to compression methods for transformers, accompanying our publications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Transformer Compression with SliceGPT&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the code for the paper &lt;a href=&#34;https://arxiv.org/abs/2401.15024&#34;&gt;SliceGPT&lt;/a&gt; (ICLR&#39;24). Also discussed on &lt;a href=&#34;https://huggingface.co/papers/2401.15024&#34;&gt;Hugging Face&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SliceGPT is a new post-training sparsification scheme that makes transformer networks (including LLMs) smaller by first applying orthogonal transformations to each transformer layer that leave the model unchanged, and then slicing off the least-significant rows and columns (chosen by the eigenvalue decay) of the weight matrices. The model structure is left unchanged, but each weight matrix is replaced by a smaller (dense) weight matrix, reducing the embedding dimension of the model. This results in speedups (without any additional code optimization) and a reduced memory footprint.&lt;/p&gt; &#xA;&lt;p&gt;The code is arranged as a package &lt;code&gt;slicegpt&lt;/code&gt; in &lt;code&gt;/src&lt;/code&gt;, and scripts to replicate experiments from the paper are in &lt;code&gt;/experiments&lt;/code&gt;. To install the &lt;code&gt;slicegpt&lt;/code&gt; package, we recommend&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install -e .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running SliceGPT&lt;/h2&gt; &#xA;&lt;p&gt;To run SliceGPT on &lt;code&gt;microsoft/phi-2&lt;/code&gt;, from the &lt;code&gt;experiments&lt;/code&gt; folder, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    python run_slicegpt_perplexity.py \&#xA;           --model microsoft/phi-2 \&#xA;           --save-dir dir/to/save/sliced_model/in \&#xA;           --sparsity 0.25 \&#xA;           --no-wandb \&#xA;           --device cuda:0 \&#xA;           --eval-baseline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compress the &lt;code&gt;microsoft/phi-2&lt;/code&gt; model and save the compressed model to the specified directory. Please consult the script for the full set of options.&lt;/p&gt; &#xA;&lt;p&gt;The experiments folder also contains scripts for&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/experiments/run_finetuning.py&#34;&gt;finetuning&lt;/a&gt; the compressed model to recover most of the quality lost during compression&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/experiments/run_zero_shot_tasks.py&#34;&gt;zero-shot task evaluation&lt;/a&gt; of a dense, compressed or fine-tuned model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; For models that require Hugging Face authentication, set the &lt;code&gt;--hf-token&lt;/code&gt; argument manually or using a key vault. Alternatively, set the environment variable &lt;code&gt;HF_TOKEN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported models&lt;/h2&gt; &#xA;&lt;p&gt;The following models from Hugging Face hub are currently supported&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/microsoft/phi-2&#34;&gt;microsoft/phi-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-7b&#34;&gt;meta-llama/Llama-2-7b-hf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-13b&#34;&gt;meta-llama/Llama-2-13b-hf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-70b&#34;&gt;meta-llama/Llama-2-70b-hf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/opt-125m&#34;&gt;facebook/opt-125m&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/opt-1.3b&#34;&gt;facebook/opt-1.3b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/opt-2.7b&#34;&gt;facebook/opt-2.7b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/opt-6.7b&#34;&gt;facebook/opt-6.7b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/opt-13b&#34;&gt;facebook/opt-13b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/opt-30b&#34;&gt;facebook/opt-30b&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/facebook/opt-66b&#34;&gt;facebook/opt-66b&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extending support to a new model type&lt;/h2&gt; &#xA;&lt;p&gt;The model you wish to support must be available in Hugging Face. To add SliceGPT support for a new model, one needs to implement a new model adapter before using it to slice a new model.&lt;/p&gt; &#xA;&lt;h3&gt;Implementing a new model adapter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/src/slicegpt/model_adapter.py&#34;&gt;ModelAdapter&lt;/a&gt; interface for the new model. The ModelAdapter class tells SliceGPT how to interact with the model, an instance of which is stored at &lt;code&gt;self.model&lt;/code&gt;. For example, how to access each of the layers of the model.&lt;/li&gt; &#xA; &lt;li&gt;Implement the &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/src/slicegpt/model_adapter.py&#34;&gt;LayerAdapter&lt;/a&gt; interface for the transformer layers. The LayerAdapter class tells SliceGPT how to interact with each transformer layer of the model, an instance of which is stored at &lt;code&gt;self.layer&lt;/code&gt;. For example, how to access the attention and MLP components of the transformer layer, and how to update the arguments to the transformer layer&#39;s forward method.&lt;/li&gt; &#xA; &lt;li&gt;Implement a compressed transformer layer class that subclasses the transformer layer. This class should also provide an adapted &lt;code&gt;forward()&lt;/code&gt; method to work with the compressed model. This method should specify how the skip connection orthogonal matrices are used, depending on whether MLP and attention blocks are sequential (&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/src/slicegpt/adapters/opt_adapter.py&#34;&gt;OPT&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/src/slicegpt/adapters/llama_adapter.py&#34;&gt;Llama-2&lt;/a&gt;) or parallel (&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/src/slicegpt/adapters/phi2_adapter.py&#34;&gt;Phi-2&lt;/a&gt;). The &lt;code&gt;self.*_shortcut_Q&lt;/code&gt; matrices are attached to the modules during slicing and are available in &lt;code&gt;forward()&lt;/code&gt;. If the skip connection does not need modification, these matrices will be None, and the &lt;code&gt;forward()&lt;/code&gt; method can follow the original workflow. For more details on this, please read Section 3 &lt;a href=&#34;https://arxiv.org/abs/2401.15024&#34;&gt;the paper&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/src/slicegpt/adapters/llama_adapter.py&#34;&gt;llama_adapter.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using a new model adapter to slice a model&lt;/h3&gt; &#xA;&lt;p&gt;Once a model adapter is implemented, compressing the model involves three conceptual steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace modules with compressed equivalents (via &lt;code&gt;slicegpt.layernorm_fusion.replace_layers&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Fuse layer norms and add rotations to skip connections (via &lt;code&gt;slicegpt.layernorm_fusion.fuse_modules&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Rotate the inputs and slice the layers (via &lt;code&gt;slicegpt.rotate.rotate_and_slice&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/TransformerCompression/main/experiments/run_slicegpt_perplexity.py&#34;&gt;run_slicegpt_perplexity.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If the model you wish to support is not available in Hugging Face, you will also need to implement custom model loading and initialization functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.opensource.microsoft.com&#34;&gt;https://cla.opensource.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.&lt;/p&gt; &#xA;&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Trademarks&lt;/h2&gt; &#xA;&lt;p&gt;This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow &lt;a href=&#34;https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general&#34;&gt;Microsoft&#39;s Trademark &amp;amp; Brand Guidelines&lt;/a&gt;. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.&lt;/p&gt; &#xA;&lt;p&gt;Any use of third-party trademarks or logos are subject to those third-party&#39;s policies.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bridgecrewio/checkov</title>
    <updated>2024-02-02T01:36:31Z</updated>
    <id>tag:github.com,2024-02-02:/bridgecrewio/checkov</id>
    <link href="https://github.com/bridgecrewio/checkov" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prevent cloud misconfigurations and find vulnerabilities during build-time in infrastructure as code, container images and open source packages with Checkov by Bridgecrew.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/web/images/checkov_blue_logo.png&#34; alt=&#34;checkov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://prismacloud.io/?utm_source=github&amp;amp;utm_medium=organic_oss&amp;amp;utm_campaign=checkov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/maintained_by-Prisma_Cloud-blue&#34; alt=&#34;Maintained by Prisma Cloud&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bridgecrewio/checkov/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://github.com/bridgecrewio/checkov/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bridgecrewio/checkov/actions?query=event%3Apush+branch%3Amaster+workflow%3Asecurity&#34;&gt;&lt;img src=&#34;https://github.com/bridgecrewio/checkov/workflows/security/badge.svg?sanitize=true&#34; alt=&#34;security status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/bridgecrewio/checkov/actions?query=workflow%3Acoverage&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/coverage.svg?sanitize=true&#34; alt=&#34;code_coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.checkov.io/1.Welcome/What%20is%20Checkov.html?utm_source=github&amp;amp;utm_medium=organic_oss&amp;amp;utm_campaign=checkov&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-passing-brightgreen&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/checkov/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/checkov&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/checkov&#34; alt=&#34;Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tf-%3E%3D0.12.0-blue.svg?sanitize=true&#34; alt=&#34;Terraform Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/checkov&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/checkov&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/bridgecrew/checkov&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/bridgecrew/checkov.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codifiedsecurity.slack.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-4A154B?style=plastic&amp;amp;logo=slack&amp;amp;logoColor=white&#34; alt=&#34;slack-community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Checkov&lt;/strong&gt; is a static code analysis tool for infrastructure as code (IaC) and also a software composition analysis (SCA) tool for images and open source packages.&lt;/p&gt; &#xA;&lt;p&gt;It scans cloud infrastructure provisioned using &lt;a href=&#34;https://terraform.io/&#34;&gt;Terraform&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Terraform%20Plan%20Scanning.md&#34;&gt;Terraform plan&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Cloudformation.md&#34;&gt;Cloudformation&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/AWS%20SAM.md&#34;&gt;AWS SAM&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Kubernetes.md&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Helm.md&#34;&gt;Helm charts&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Kustomize.md&#34;&gt;Kustomize&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Dockerfile.md&#34;&gt;Dockerfile&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Serverless%20Framework.md&#34;&gt;Serverless&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Bicep.md&#34;&gt;Bicep&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/OpenAPI.md&#34;&gt;OpenAPI&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Azure%20ARM%20templates.md&#34;&gt;ARM Templates&lt;/a&gt; and detects security and compliance misconfigurations using graph-based scanning.&lt;/p&gt; &#xA;&lt;p&gt;It performs &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/7.Scan%20Examples/Sca.md&#34;&gt;Software Composition Analysis (SCA) scanning&lt;/a&gt; which is a scan of open source packages and images for Common Vulnerabilities and Exposures (CVEs).&lt;/p&gt; &#xA;&lt;p&gt;Checkov also powers &lt;a href=&#34;https://www.prismacloud.io/prisma/cloud/cloud-code-security/?utm_source=github&amp;amp;utm_medium=organic_oss&amp;amp;utm_campaign=checkov&#34;&gt;&lt;strong&gt;Prisma Cloud Application Security&lt;/strong&gt;&lt;/a&gt;, the developer-first platform that codifies and streamlines cloud security throughout the development lifecycle. Prisma Cloud identifies, fixes, and prevents misconfigurations in cloud resources and infrastructure-as-code files.&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.prismacloud.io/prisma/request-a-prisma-cloud-trial/?utm_campaign=checkov-github-repo&amp;amp;utm_source=github.com&amp;amp;utm_medium=get-started-button&#34; title=&#34;Try_Prisma_Cloud&#34;&gt; &lt;img src=&#34;https://dabuttonfactory.com/button.png?t=Try+Prisma+Cloud&amp;amp;f=Open+Sans-Bold&amp;amp;ts=26&amp;amp;tc=fff&amp;amp;hp=45&amp;amp;vp=20&amp;amp;c=round&amp;amp;bgt=unicolored&amp;amp;bgc=00c0e8&#34; align=&#34;right&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://docs.prismacloud.io/en/enterprise-edition/use-cases/secure-the-source/secure-the-source&#34; title=&#34;Docs&#34;&gt; &lt;img src=&#34;https://dabuttonfactory.com/button.png?t=Read+the+Docs&amp;amp;f=Open+Sans-Bold&amp;amp;ts=26&amp;amp;tc=fff&amp;amp;hp=45&amp;amp;vp=20&amp;amp;c=round&amp;amp;bgt=unicolored&amp;amp;bgc=00c0e8&#34; align=&#34;right&#34; width=&#34;120&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Table of contents&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/1.Welcome/Migration.md&#34;&gt;Migration - v2 to v3&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/5.Policy%20Index/all.md&#34;&gt;Over 1000 built-in policies&lt;/a&gt; cover security and compliance best practices for AWS, Azure and Google Cloud.&lt;/li&gt; &#xA; &lt;li&gt;Scans Terraform, Terraform Plan, Terraform JSON, CloudFormation, AWS SAM, Kubernetes, Helm, Kustomize, Dockerfile, Serverless framework, Ansible, Bicep and ARM template files.&lt;/li&gt; &#xA; &lt;li&gt;Scans Argo Workflows, Azure Pipelines, BitBucket Pipelines, Circle CI Pipelines, GitHub Actions and GitLab CI workflow files&lt;/li&gt; &#xA; &lt;li&gt;Supports Context-awareness policies based on in-memory graph-based scanning.&lt;/li&gt; &#xA; &lt;li&gt;Supports Python format for attribute policies and YAML format for both attribute and composite policies.&lt;/li&gt; &#xA; &lt;li&gt;Detects &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/2.Basics/Scanning%20Credentials%20and%20Secrets.md&#34;&gt;AWS credentials&lt;/a&gt; in EC2 Userdata, Lambda environment variables and Terraform providers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.prismacloud.io/prisma/cloud/secrets-security&#34;&gt;Identifies secrets&lt;/a&gt; using regular expressions, keywords, and entropy based detection.&lt;/li&gt; &#xA; &lt;li&gt;Evaluates &lt;a href=&#34;https://registry.terraform.io/browse/providers&#34;&gt;Terraform Provider&lt;/a&gt; settings to regulate the creation, management, and updates of IaaS, PaaS or SaaS managed through Terraform.&lt;/li&gt; &#xA; &lt;li&gt;Policies support evaluation of &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/2.Basics/Handling%20Variables.md&#34;&gt;variables&lt;/a&gt; to their optional default value.&lt;/li&gt; &#xA; &lt;li&gt;Supports in-line &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/2.Basics/Suppressing%20and%20Skipping%20Policies.md&#34;&gt;suppression&lt;/a&gt; of accepted risks or false-positives to reduce recurring scan failures. Also supports global skip from using CLI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/2.Basics/Reviewing%20Scan%20Results.md&#34;&gt;Output&lt;/a&gt; currently available as CLI, &lt;a href=&#34;https://cyclonedx.org&#34;&gt;CycloneDX&lt;/a&gt;, JSON, JUnit XML, CSV, SARIF and github markdown and link to remediation &lt;a href=&#34;https://docs.prismacloud.io/en/enterprise-edition/policy-reference/&#34;&gt;guides&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Scan results in CLI&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/checkov-recording.gif&#34; alt=&#34;scan-screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Scheduled scan result in Jenkins&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/checkov-jenkins.png&#34; alt=&#34;jenikins-screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python &amp;gt;= 3.7 (Data classes are available for Python 3.7+)&lt;/li&gt; &#xA; &lt;li&gt;Terraform &amp;gt;= 0.12&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install pip follow the official &lt;a href=&#34;https://pip.pypa.io/en/stable/cli/pip_install/&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip3 install checkov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://formulae.brew.sh/formula/checkov&#34;&gt;Homebrew&lt;/a&gt; (macOS or Linux)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install checkov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enabling bash autocomplete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source &amp;lt;(register-python-argcomplete checkov)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upgrade&lt;/h3&gt; &#xA;&lt;p&gt;if you installed checkov with pip3&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip3 install -U checkov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with Homebrew&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew upgrade checkov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure an input folder or file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --directory /user/path/to/iac/code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a specific file or files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --file /user/tf/example.tf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -f /user/cloudformation/example1.yml -f /user/cloudformation/example2.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a terraform plan file in json format&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform init&#xA;terraform plan -out tf.plan&#xA;terraform show -json tf.plan  &amp;gt; tf.json&#xA;checkov -f tf.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;terraform show&lt;/code&gt; output file &lt;code&gt;tf.json&lt;/code&gt; will be a single line. For that reason all findings will be reported line number 0 by Checkov&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;check: CKV_AWS_21: &#34;Ensure all data stored in the S3 bucket have versioning enabled&#34;&#xA;&#x9;FAILED for resource: aws_s3_bucket.customer&#xA;&#x9;File: /tf/tf.json:0-0&#xA;&#x9;Guide: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-16-enable-versioning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have installed &lt;code&gt;jq&lt;/code&gt; you can convert json file into multiple lines with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform show -json tf.plan | jq &#39;.&#39; &amp;gt; tf.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scan result would be much user friendly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -f tf.json&#xA;Check: CKV_AWS_21: &#34;Ensure all data stored in the S3 bucket have versioning enabled&#34;&#xA;&#x9;FAILED for resource: aws_s3_bucket.customer&#xA;&#x9;File: /tf/tf1.json:224-268&#xA;&#x9;Guide: https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/s3-policies/s3-16-enable-versioning&#xA;&#xA;&#x9;&#x9;225 |               &#34;values&#34;: {&#xA;&#x9;&#x9;226 |                 &#34;acceleration_status&#34;: &#34;&#34;,&#xA;&#x9;&#x9;227 |                 &#34;acl&#34;: &#34;private&#34;,&#xA;&#x9;&#x9;228 |                 &#34;arn&#34;: &#34;arn:aws:s3:::mybucket&#34;,&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, specify the repo root of the hcl files used to generate the plan file, using the &lt;code&gt;--repo-root-for-plan-enrichment&lt;/code&gt; flag, to enrich the output with the appropriate file path, line numbers, and codeblock of the resource(s). An added benefit is that check suppressions will be handled accordingly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -f tf.json --repo-root-for-plan-enrichment /user/path/to/iac/code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scan result sample (CLI)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Passed Checks: 1, Failed Checks: 1, Suppressed Checks: 0&#xA;Check: &#34;Ensure all data stored in the S3 bucket is securely encrypted at rest&#34;&#xA;/main.tf:&#xA;&#x9; Passed for resource: aws_s3_bucket.template_bucket&#xA;Check: &#34;Ensure all data stored in the S3 bucket is securely encrypted at rest&#34;&#xA;/../regionStack/main.tf:&#xA;&#x9; Failed for resource: aws_s3_bucket.sls_deployment_bucket_name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start using Checkov by reading the &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/1.Welcome/Quick%20Start.md&#34;&gt;Getting Started&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull bridgecrew/checkov&#xA;docker run --tty --rm --volume /user/tf:/tf --workdir /tf bridgecrew/checkov --directory /tf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you are using Python 3.6(Default version in Ubuntu 18.04) checkov will not work, and it will fail with &lt;code&gt;ModuleNotFoundError: No module named &#39;dataclasses&#39;&lt;/code&gt; error message. In this case, you can use the docker version instead.&lt;/p&gt; &#xA;&lt;p&gt;Note that there are certain cases where redirecting &lt;code&gt;docker run --tty&lt;/code&gt; output to a file - for example, if you want to save the Checkov JUnit output to a file - will cause extra control characters to be printed. This can break file parsing. If you encounter this, remove the &lt;code&gt;--tty&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--workdir /tf&lt;/code&gt; flag is optional to change the working directory to the mounted volume. If you are using the SARIF output &lt;code&gt;-o sarif&lt;/code&gt; this will output the results.sarif file to the mounted volume (&lt;code&gt;/user/tf&lt;/code&gt; in the example above). If you do not include that flag, the working directory will be &#34;/&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Running or skipping checks&lt;/h3&gt; &#xA;&lt;p&gt;By using command line flags, you can specify to run only named checks (allow list) or run all checks except those listed (deny list). If you are using the platform integration via API key, you can also specify a severity threshold to skip and / or include. Moreover, as json files can&#39;t contain comments, one can pass regex pattern to skip json file secret scan.&lt;/p&gt; &#xA;&lt;p&gt;See the docs for more detailed information about how these flags work together.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Allow only the two specified checks to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --directory . --check CKV_AWS_20,CKV_AWS_57&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all checks except the one specified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --skip-check CKV_AWS_20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all checks except checks with specified patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --skip-check CKV_AWS*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all checks that are MEDIUM severity or higher (requires API key):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --check MEDIUM --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all checks that are MEDIUM severity or higher, as well as check CKV_123 (assume this is a LOW severity check):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --check MEDIUM,CKV_123 --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Skip all checks that are MEDIUM severity or lower:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --skip-check MEDIUM --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Skip all checks that are MEDIUM severity or lower, as well as check CKV_789 (assume this is a high severity check):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --skip-check MEDIUM,CKV_789 --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all checks that are MEDIUM severity or higher, but skip check CKV_123 (assume this is a medium or higher severity check):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --check MEDIUM --skip-check CKV_123 --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run check CKV_789, but skip it if it is a medium severity (the --check logic is always applied before --skip-check)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --skip-check MEDIUM --check CKV_789 --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Kubernetes workloads, you can also use allow/deny namespaces. For example, do not report any results for the kube-system namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --skip-check kube-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a scan of a container image. First pull or build the image then refer to it by the hash, ID, or name:tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --framework sca_image --docker-image sha256:1234example --dockerfile-path /Users/path/to/Dockerfile --bc-api-key ...&#xA;&#xA;checkov --docker-image &amp;lt;image-name&amp;gt;:tag --dockerfile-path /User/path/to/Dockerfile --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use --image flag also to scan container image instead of --docker-image for shortener:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --image &amp;lt;image-name&amp;gt;:tag --dockerfile-path /User/path/to/Dockerfile --bc-api-key ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run an SCA scan of packages in a repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d . --framework sca_package --bc-api-key ... --repo-id &amp;lt;repo_id(arbitrary)&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a scan of a directory with environment variables removing buffering, adding debug level logs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PYTHONUNBUFFERED=1 LOG_LEVEL=DEBUG checkov -d .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR enable the environment variables for multiple runs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PYTHONUNBUFFERED=1 LOG_LEVEL=DEBUG&#xA;checkov -d .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run secrets scanning on all files in MyDirectory. Skip CKV_SECRET_6 check on json files that their suffix is DontScan&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d /MyDirectory --framework secrets --bc-api-key ... --skip-check CKV_SECRET_6:.*DontScan.json$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run secrets scanning on all files in MyDirectory. Skip CKV_SECRET_6 check on json files that contains &#34;skip_test&#34; in path&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov -d /MyDirectory --framework secrets --bc-api-key ... --skip-check CKV_SECRET_6:.*skip_test.*json$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One can mask values from scanning results by supplying a configuration file (using --config-file flag) with mask entry. The masking can apply on resource &amp;amp; value (or multiple values, seperated with a comma). Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mask:&#xA;- aws_instance:user_data&#xA;- azurerm_key_vault_secret:admin_password,user_passwords&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, the following values will be masked:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;user_data for aws_instance resource&lt;/li&gt; &#xA; &lt;li&gt;both admin_password &amp;amp;user_passwords for azurerm_key_vault_secret&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Suppressing/Ignoring a check&lt;/h3&gt; &#xA;&lt;p&gt;Like any static-analysis tool it is limited by its analysis scope. For example, if a resource is managed manually, or using subsequent configuration management tooling, suppression can be inserted as a simple code annotation.&lt;/p&gt; &#xA;&lt;h4&gt;Suppression comment format&lt;/h4&gt; &#xA;&lt;p&gt;To skip a check on a given Terraform definition block or CloudFormation resource, apply the following comment pattern inside it&#39;s scope:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;checkov:skip=&amp;lt;check_id&amp;gt;:&amp;lt;suppression_comment&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;check_id&amp;gt;&lt;/code&gt; is one of the [available check scanners](docs/5.Policy Index/all.md)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;suppression_comment&amp;gt;&lt;/code&gt; is an optional suppression reason to be included in the output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;The following comment skips the &lt;code&gt;CKV_AWS_20&lt;/code&gt; check on the resource identified by &lt;code&gt;foo-bucket&lt;/code&gt;, where the scan checks if an AWS S3 bucket is private. In the example, the bucket is configured with public read access; Adding the suppress comment would skip the appropriate check instead of the check to fail.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hcl-terraform&#34;&gt;resource &#34;aws_s3_bucket&#34; &#34;foo-bucket&#34; {&#xA;  region        = var.region&#xA;    #checkov:skip=CKV_AWS_20:The bucket is a public static content host&#xA;  bucket        = local.bucket_name&#xA;  force_destroy = true&#xA;  acl           = &#34;public-read&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output would now contain a &lt;code&gt;SKIPPED&lt;/code&gt; check result entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...&#xA;...&#xA;Check: &#34;S3 Bucket has an ACL defined which allows public access.&#34;&#xA;&#x9;SKIPPED for resource: aws_s3_bucket.foo-bucket&#xA;&#x9;Suppress comment: The bucket is a public static content host&#xA;&#x9;File: /example_skip_acl.tf:1-25&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To skip multiple checks, add each as a new line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  #checkov:skip=CKV2_AWS_6&#xA;  #checkov:skip=CKV_AWS_20:The bucket is a public static content host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To suppress checks in Kubernetes manifests, annotations are used with the following format: &lt;code&gt;checkov.io/skip#: &amp;lt;check_id&amp;gt;=&amp;lt;suppression_comment&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apiVersion: v1&#xA;kind: Pod&#xA;metadata:&#xA;  name: mypod&#xA;  annotations:&#xA;    checkov.io/skip1: CKV_K8S_20=I don&#39;t care about Privilege Escalation :-O&#xA;    checkov.io/skip2: CKV_K8S_14&#xA;    checkov.io/skip3: CKV_K8S_11=I have not set CPU limits as I want BestEffort QoS&#xA;spec:&#xA;  containers:&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging&lt;/h4&gt; &#xA;&lt;p&gt;For detailed logging to stdout set up the environment variable &lt;code&gt;LOG_LEVEL&lt;/code&gt; to &lt;code&gt;DEBUG&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Default is &lt;code&gt;LOG_LEVEL=WARNING&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Skipping directories&lt;/h4&gt; &#xA;&lt;p&gt;To skip files or directories, use the argument &lt;code&gt;--skip-path&lt;/code&gt;, which can be specified multiple times. This argument accepts regular expressions for paths relative to the current working directory. You can use it to skip entire directories and / or specific files.&lt;/p&gt; &#xA;&lt;p&gt;By default, all directories named &lt;code&gt;node_modules&lt;/code&gt;, &lt;code&gt;.terraform&lt;/code&gt;, and &lt;code&gt;.serverless&lt;/code&gt; will be skipped, in addition to any files or directories beginning with &lt;code&gt;.&lt;/code&gt;. To cancel skipping directories beginning with &lt;code&gt;.&lt;/code&gt; override &lt;code&gt;CKV_IGNORE_HIDDEN_DIRECTORIES&lt;/code&gt; environment variable &lt;code&gt;export CKV_IGNORE_HIDDEN_DIRECTORIES=false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can override the default set of directories to skip by setting the environment variable &lt;code&gt;CKV_IGNORED_DIRECTORIES&lt;/code&gt;. Note that if you want to preserve this list and add to it, you must include these values. For example, &lt;code&gt;CKV_IGNORED_DIRECTORIES=mynewdir&lt;/code&gt; will skip only that directory, but not the others mentioned above. This variable is legacy functionality; we recommend using the &lt;code&gt;--skip-file&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h4&gt;Console Output&lt;/h4&gt; &#xA;&lt;p&gt;The console output is in colour by default, to switch to a monochrome output, set the environment variable: &lt;code&gt;ANSI_COLORS_DISABLED&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;VS Code Extension&lt;/h4&gt; &#xA;&lt;p&gt;If you want to use Checkov within VS Code, give a try to the vscode extension available at &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Bridgecrew.checkov&#34;&gt;VS Code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration using a config file&lt;/h3&gt; &#xA;&lt;p&gt;Checkov can be configured using a YAML configuration file. By default, checkov looks for a &lt;code&gt;.checkov.yaml&lt;/code&gt; or &lt;code&gt;.checkov.yml&lt;/code&gt; file in the following places in order of precedence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Directory against which checkov is run. (&lt;code&gt;--directory&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Current working directory where checkov is called.&lt;/li&gt; &#xA; &lt;li&gt;User&#39;s home directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;: it is a best practice for checkov configuration file to be loaded from a trusted source composed by a verified identity, so that scanned files, check ids and loaded custom checks are as desired.&lt;/p&gt; &#xA;&lt;p&gt;Users can also pass in the path to a config file via the command line. In this case, the other config files will be ignored. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --config-file path/to/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users can also create a config file using the &lt;code&gt;--create-config&lt;/code&gt; command, which takes the current command line args and writes them out to a given path. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --compact --directory test-dir --docker-image sample-image --dockerfile-path Dockerfile --download-external-modules True --external-checks-dir sample-dir --quiet --repo-id prisma-cloud/sample-repo --skip-check CKV_DOCKER_3,CKV_DOCKER_2 --skip-framework dockerfile secrets --soft-fail --branch develop --check CKV_DOCKER_1 --create-config /Users/sample/config.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will create a &lt;code&gt;config.yaml&lt;/code&gt; file which looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;branch: develop&#xA;check:&#xA;  - CKV_DOCKER_1&#xA;compact: true&#xA;directory:&#xA;  - test-dir&#xA;docker-image: sample-image&#xA;dockerfile-path: Dockerfile&#xA;download-external-modules: true&#xA;evaluate-variables: true&#xA;external-checks-dir:&#xA;  - sample-dir&#xA;external-modules-download-path: .external_modules&#xA;framework:&#xA;  - all &#xA;output: cli &#xA;quiet: true &#xA;repo-id: prisma-cloud/sample-repo &#xA;skip-check: &#xA;  - CKV_DOCKER_3 &#xA;  - CKV_DOCKER_2 &#xA;skip-framework:&#xA;  - dockerfile&#xA;  - secrets&#xA;soft-fail: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users can also use the &lt;code&gt;--show-config&lt;/code&gt; flag to view all the args and settings and where they came from i.e. commandline, config file, environment variable or default. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;checkov --show-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will display:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Command Line Args:   --show-config&#xA;Environment Variables:&#xA;  BC_API_KEY:        your-api-key&#xA;Config File (/Users/sample/.checkov.yml):&#xA;  soft-fail:         False&#xA;  branch:            master&#xA;  skip-check:        [&#39;CKV_DOCKER_3&#39;, &#39;CKV_DOCKER_2&#39;]&#xA;Defaults:&#xA;  --output:          cli&#xA;  --framework:       [&#39;all&#39;]&#xA;  --download-external-modules:False&#xA;  --external-modules-download-path:.external_modules&#xA;  --evaluate-variables:True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contribution is welcomed!&lt;/p&gt; &#xA;&lt;p&gt;Start by reviewing the &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. After that, take a look at a &lt;a href=&#34;https://github.com/bridgecrewio/checkov/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can even start this with one-click dev in your browser through Gitpod at the following link:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/bridgecrewio/checkov&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Looking to contribute new checks? Learn how to write a new check (AKA policy) &lt;a href=&#34;https://raw.githubusercontent.com/bridgecrewio/checkov/main/docs/6.Contribution/Contribution%20Overview.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;checkov&lt;/code&gt; does not save, publish or share with anyone any identifiable customer information.&lt;br&gt; No identifiable customer information is used to query Prisma Cloud&#39;s publicly accessible guides. &lt;code&gt;checkov&lt;/code&gt; uses Prisma Cloud&#39;s API to enrich the results with links to remediation guides. To skip this API call use the flag &lt;code&gt;--skip-download&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.prismacloud.io/?utm_source=github&amp;amp;utm_medium=organic_oss&amp;amp;utm_campaign=checkov&#34;&gt;Prisma Cloud&lt;/a&gt; builds and maintains Checkov to make policy-as-code simple and accessible.&lt;/p&gt; &#xA;&lt;p&gt;Start with our &lt;a href=&#34;https://www.checkov.io/1.Welcome/Quick%20Start.html&#34;&gt;Documentation&lt;/a&gt; for quick tutorials and examples.&lt;/p&gt; &#xA;&lt;h2&gt;Python Version Support&lt;/h2&gt; &#xA;&lt;p&gt;We follow the official support cycle of Python, and we use automated tests for all supported versions of Python. This means we currently support Python 3.7 - 3.11, inclusive. Note that Python 3.7 is reaching EOL on June 2023. After that time, we will have a short grace period where we will continue 3.7 support until September 2023, and then it will no longer be considered supported for Checkov. If you run into any issues with any non-EOL Python version, please open an Issue.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>X-PLUG/MobileAgent</title>
    <updated>2024-02-02T01:36:31Z</updated>
    <id>tag:github.com,2024-02-02:/X-PLUG/MobileAgent</id>
    <link href="https://github.com/X-PLUG/MobileAgent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mobile-Agent: Autonomous Multi-Modal Mobile Device Agent with Visual Perception&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mobile-Agent: Autonomous Multi-Modal Mobile Device Agent with Visual Perception&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/X-PLUG/MobileAgent/main/assets/logo.png?v=1&amp;amp;type=image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://arxiv.org/abs/2401.16158&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/X-PLUG/MobileAgent/main/assets/Paper-Arxiv-orange.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Junyang Wang&#xA; &lt;sup&gt;1&lt;/sup&gt;, Haiyang Xu&#xA; &lt;sup&gt;2†&lt;/sup&gt;, Jiabo Ye&#xA; &lt;sup&gt;2&lt;/sup&gt;, Ming Yan&#xA; &lt;sup&gt;2†&lt;/sup&gt;, &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Weizhou Shen&#xA; &lt;sup&gt;2&lt;/sup&gt;, Ji Zhang&#xA; &lt;sup&gt;2&lt;/sup&gt;, Fei Huang&#xA; &lt;sup&gt;2&lt;/sup&gt;, Jitao Sang&#xA; &lt;sup&gt;1†&lt;/sup&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  {junyangwang, jtsang}@bjtu.edu.cn, {shuofeng.xhy, ym119608}@alibaba-inc.com &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sup&gt;1&lt;/sup&gt;Beijing Jiaotong University &#xA; &lt;sup&gt;2&lt;/sup&gt;Alibaba Group &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sup&gt;†&lt;/sup&gt;Corresponding author &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;📋Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/X-PLUG/MobileAgent/main/assets/example.png?v=1&amp;amp;type=image&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pure visual solution, independent of XML and system metadata.&lt;/li&gt; &#xA; &lt;li&gt;Unrestricted operation scope, capable of multi-app operations.&lt;/li&gt; &#xA; &lt;li&gt;Multiple visual perception tools for operation localization.&lt;/li&gt; &#xA; &lt;li&gt;No need for exploration and training, plug and play.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📢News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1.31] 🔥Our code is available! Welcome to try Mobile-Agent.&lt;/li&gt; &#xA; &lt;li&gt;[1.31] 🔥Human-operated data in Mobile-Eval is in preparation and will be open-sourced soon.&lt;/li&gt; &#xA; &lt;li&gt;[1.30] Our paper is available at &lt;a href=&#34;https://arxiv.org/abs/2401.16158&#34;&gt;LINK&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[1.30] Our evaluation results on Mobile-Eval are available.&lt;/li&gt; &#xA; &lt;li&gt;[1.30] The code and Mobile-Eval benchmark are coming soon!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📺Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/X-PLUG/MobileAgent/assets/127390760/26c48fb0-67ed-4df6-97b2-aa0c18386d31&#34;&gt;https://github.com/X-PLUG/MobileAgent/assets/127390760/26c48fb0-67ed-4df6-97b2-aa0c18386d31&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔧Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;❗Since the GPT-4V will have severe hallucinations when perceiving non-English screenshots, we strongly recommend using Mobile-Agent under English-only systems and apps to ensure the performance.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/X-PLUG/MobileAgent.git&#xA;cd MobileAgent&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preparation for Connecting Mobile Device&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the &lt;a href=&#34;https://developer.android.com/tools/releases/platform-tools?hl=en&#34;&gt;Android Debug Bridge&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Turn on the ADB debugging switch on your Android phone, it needs to be turned on in the developer options first.&lt;/li&gt; &#xA; &lt;li&gt;Connect your phone to the computer with a data cable and select &#34;Transfer files&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Test your ADB environment as follow: &lt;code&gt;/path/to/adb devices&lt;/code&gt;. If the connected devices are displayed, the preparation is complete.&lt;/li&gt; &#xA; &lt;li&gt;If you are using a MAC or Linux system, make sure to turn on adb permissions as follow: &lt;code&gt;sudo chmod +x /path/to/adb&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you are using Windows system, the path will be &lt;code&gt;xx/xx/adb.exe&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Preparation for Visual Perception Tools&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the icon detection model &lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO/releases/download/v0.1.0-alpha/groundingdino_swint_ogc.pth&#34;&gt;Grounding DION&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The text detection model will be automatically downloaded from modelscope after you run Mobile-Agent.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;python run.py \&#xA;--grounding_ckpt /path/to/GroundingDION \&#xA;--adb_path /path/to/adb \&#xA;--api &#34;your API_TOKEN&#34; \&#xA;--instruction &#34;your instruction&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📱Mobile-Eval&lt;/h2&gt; &#xA;&lt;p&gt;Mobile-Eval is a benchmark designed for evaluating the performance of mobile device agents. This benchmark includes 10 mainstream single-app scenarios and 1 multi-app scenario.&lt;/p&gt; &#xA;&lt;p&gt;For each scenario, we have designed three instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Instruction 1: relatively simple and basic task&lt;/li&gt; &#xA; &lt;li&gt;Instruction 2: additional requirements added on top of the difficulty of Instruction 1&lt;/li&gt; &#xA; &lt;li&gt;Instruction 3: user demands with no explicit task indication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The detailed content of Mobile-Eval is as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Application&lt;/th&gt; &#xA;   &lt;th&gt;Instruction&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alibaba.com&lt;/td&gt; &#xA;   &lt;td&gt;1. Help me find caps in Alibaba.com.&lt;br&gt;2. Help me find caps in Alibaba.com. If the &#34;Add to cart&#34; is avaliable in the item information page, please add the item to my cart.&lt;br&gt;3. I want to buy a cap. I&#39;ve heard things are cheap on Alibaba.com. Maybe you can find it for me.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Amazon Music&lt;/td&gt; &#xA;   &lt;td&gt;1. Search singer Jay Chou in Amazon Music.&lt;br&gt;2. Search a music about &#34;agent&#34; in Amazon Music and play it.&lt;br&gt;3. I want to listen music to relax. Find an App to help me.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome&lt;/td&gt; &#xA;   &lt;td&gt;1. Search result for today&#39;s Lakers game.&lt;br&gt;2. Search the information about Taylor Swift.&lt;br&gt;3. I want to know the result for today&#39;s Lakers game. Find an App to help me.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gmail&lt;/td&gt; &#xA;   &lt;td&gt;1. Send an empty email to to {address}.&lt;br&gt;2. Send an email to {address}n to tell my new work.&lt;br&gt;3. I want to let my friend know my new work, and his address is {address}. Find an App to help me.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Maps&lt;/td&gt; &#xA;   &lt;td&gt;1. Navigate to Hangzhou West Lake.&lt;br&gt;2. Navigate to a nearby gas station.&lt;br&gt;3. I want to go to Hangzhou West Lake, but I don&#39;t know the way. Find an App to help me.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Play&lt;/td&gt; &#xA;   &lt;td&gt;1. Download WhatsApp in Play Store.&lt;br&gt;2. Download Instagram in Play Store.&lt;br&gt;3. I want WhatsApp on my phone. Find an App to help me.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Notes&lt;/td&gt; &#xA;   &lt;td&gt;1. Create a new note in Notes.&lt;br&gt;2. Create a new note in Notes and write &#34;Hello, this is a note&#34;, then save it.&lt;br&gt;3. I suddenly have something to record, so help me find an App and write down the following content: meeting at 3pm.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Settings&lt;/td&gt; &#xA;   &lt;td&gt;1. Turn on the dark mode.&lt;br&gt;2. Turn on the airplane mode.&lt;br&gt;3. I want to see the real time internet speed at the battery level, please turn on this setting for me.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TikTok&lt;/td&gt; &#xA;   &lt;td&gt;1. Swipe a video about pet cat in TikTok and click a &#34;like&#34; for this video.&lt;br&gt;2. Swipe a video about pet cat in TikTok and comment &#34;Ohhhh, so cute cat!&#34;.&lt;br&gt;3. Swipe videos in TikTok. Click &#34;like&#34; for 3 pet video cat.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YouTube&lt;/td&gt; &#xA;   &lt;td&gt;1. Search for videos about Stephen Curry on YouTube.&lt;br&gt;2. Search for videos about Stephen Curry on YouTube and open &#34;Comments&#34; to comment &#34;Oh, chef, your basketball spirit has always inspired me&#34;.&lt;br&gt;3. I need you to help me show my love for Stephen Curry on YouTube.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multi-App&lt;/td&gt; &#xA;   &lt;td&gt;1. Open the calendar and look at today&#39;s date, then go to Notes and create a new note to write &#34;Today is {today&#39;s data}&#34;.&lt;br&gt;2. Check the temperature in the next 5 days, and then create a new note in Notes and write a temperature analysis.&lt;br&gt;3. Search the result for today&#39;s Lakers game, and then create a note in Notes to write a sport news for this result.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;📝Evaluation results&lt;/h2&gt; &#xA;&lt;p&gt;We evaluated Mobile-Agent on Mobile-Eval. The evaluation results are available at &lt;a href=&#34;https://github.com/X-PLUG/MobileAgent/tree/main/results&#34;&gt;LINK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We have stored the evaluation results for the 10 apps and the multi-app scenario in folders named after each app.&lt;/li&gt; &#xA; &lt;li&gt;The numbers within each app&#39;s folder represent the results for different types of instruction within that app.&lt;/li&gt; &#xA; &lt;li&gt;For example, if you want to view the results of Mobile-Agent for the second instruction in Google Maps, you should go to the following path:&lt;code&gt;results/Google Maps/2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If the last action of Mobile-Agent is not &#34;stop&#34;, it indicates that Mobile-Agent did not complete the corresponding instruction. During the evaluation, we manually terminated these cases where completion was not possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📄To-do List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Development of Mobile-Agent app on Android platform.&lt;/li&gt; &#xA; &lt;li&gt;Adaptation to other mobile device platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO&#34;&gt;GroundingDINO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/CLIP&#34;&gt;CLIP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>