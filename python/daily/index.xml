<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-17T01:36:16Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA/warp</title>
    <updated>2024-06-17T01:36:16Z</updated>
    <id>tag:github.com,2024-06-17:/NVIDIA/warp</id>
    <link href="https://github.com/NVIDIA/warp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Python framework for high performance GPU simulation and graphics&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/warp-lang&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/warp-lang.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/commit-activity/m/NVIDIA/warp?link=https%3A%2F%2Fgithub.com%2FNVIDIA%2Fwarp%2Fcommits%2Fmain&#34; alt=&#34;GitHub commit activity&#34;&gt; &lt;a href=&#34;https://pepy.tech/project/warp-lang&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/warp-lang/month&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/NVIDIA/warp&#34;&gt;&lt;img src=&#34;https://codecov.io/github/NVIDIA/warp/graph/badge.svg?token=7O1KSM79FG&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/NVIDIA/warp/actions/workflows/build-and-test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub - Build and Test&#34;&gt; &lt;a href=&#34;https://discord.com/invite/nvidiaomniverse&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;NVIDIA Warp&lt;/h1&gt; &#xA;&lt;p&gt;Warp is a Python framework for writing high-performance simulation and graphics code. Warp takes regular Python functions and JIT compiles them to efficient kernel code that can run on the CPU or GPU.&lt;/p&gt; &#xA;&lt;p&gt;Warp is designed for spatial computing and comes with a rich set of primitives that make it easy to write programs for physics simulation, perception, robotics, and geometry processing. In addition, Warp kernels are differentiable and can be used as part of machine-learning pipelines with frameworks such as PyTorch and JAX.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the project &lt;a href=&#34;https://nvidia.github.io/warp/&#34;&gt;Documentation&lt;/a&gt; for API and language reference and &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/warp/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for release history.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/header.jpg&#34;&gt; &#xA; &lt;p&gt;&lt;i&gt;A selection of physical simulations computed with Warp&lt;/i&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Python version 3.9 or newer is recommended. Warp can run on x86-64 and ARMv8 CPUs on Windows, Linux, and macOS. GPU support requires a CUDA-capable NVIDIA GPU and driver (minimum GeForce GTX 9xx).&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to install Warp is from &lt;a href=&#34;https://pypi.org/project/warp-lang/&#34;&gt;PyPI&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install warp-lang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;pip install warp-lang[extras]&lt;/code&gt; to install additional dependencies for running examples and USD-related features.&lt;/p&gt; &#xA;&lt;p&gt;The binaries hosted on PyPI are currently built with the CUDA 11.8 runtime. We provide binaries built with the CUDA 12.5 runtime on the &lt;a href=&#34;https://github.com/NVIDIA/warp/releases&#34;&gt;GitHub Releases&lt;/a&gt; page. Copy the URL of the appropriate wheel file (&lt;code&gt;warp-lang-{ver}+cu12-py3-none-{platform}.whl&lt;/code&gt;) and pass it to the &lt;code&gt;pip install&lt;/code&gt; command, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install https://github.com/NVIDIA/warp/releases/download/v1.2.0/warp_lang-1.2.0+cu12-py3-none-manylinux2014_x86_64.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--force-reinstall&lt;/code&gt; option may need to be used to overwrite a previous installation.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;An example first program that computes the lengths of random 3D vectors is given below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import warp as wp&#xA;import numpy as np&#xA;&#xA;num_points = 1024&#xA;&#xA;@wp.kernel&#xA;def length(points: wp.array(dtype=wp.vec3),&#xA;           lengths: wp.array(dtype=float)):&#xA;&#xA;    # thread index&#xA;    tid = wp.tid()&#xA;    &#xA;    # compute distance of each point from origin&#xA;    lengths[tid] = wp.length(points[tid])&#xA;&#xA;&#xA;# allocate an array of 3d points&#xA;points = wp.array(np.random.rand(num_points, 3), dtype=wp.vec3)&#xA;lengths = wp.zeros(num_points, dtype=float)&#xA;&#xA;# launch kernel&#xA;wp.launch(kernel=length,&#xA;          dim=len(points),&#xA;          inputs=[points, lengths])&#xA;&#xA;print(lengths)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/warp/main/warp/examples/&#34;&gt;warp/examples&lt;/a&gt; directory contains a number of scripts categorized under different subdirectories that show how to implement different simulation methods using the Warp API. Most examples will generate USD files containing time-sampled animations (stored in the current working directory). Before running examples, users should ensure that the &lt;code&gt;usd-core&lt;/code&gt;, &lt;code&gt;matplotlib&lt;/code&gt;, and &lt;code&gt;pyglet&lt;/code&gt; packages are installed using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install usd-core matplotlib pyglet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples can be run from the command-line as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m warp.examples.&amp;lt;example_subdir&amp;gt;.&amp;lt;example&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To browse the example source code, you can open the directory where the files are located like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m warp.examples.browse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most examples can be run on either the CPU or a CUDA-capable device, but a handful require a CUDA-capable device. These are marked at the top of the example script.&lt;/p&gt; &#xA;&lt;p&gt;USD files can be viewed or rendered inside &lt;a href=&#34;https://developer.nvidia.com/omniverse&#34;&gt;NVIDIA Omniverse&lt;/a&gt;, Pixar&#39;s UsdView, and Blender. Note that Preview in macOS is not recommended as it has limited support for time-sampled animations.&lt;/p&gt; &#xA;&lt;p&gt;Built-in unit tests can be run from the command-line as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m warp.tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;examples/core&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_dem.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_dem.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_fluid.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_fluid.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_graph_capture.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_graph_capture.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_marching_cubes.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_marching_cubes.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;dem&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;fluid&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;graph capture&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;marching cubes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_mesh.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_mesh.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_nvdb.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_nvdb.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_raycast.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_raycast.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_raymarch.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_raymarch.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;mesh&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nvdb&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;raycast&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;raymarch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_sph.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_sph.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_torch.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_torch.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/core/example_wave.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/core_wave.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;sph&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;torch&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;wave&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;examples/fem&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_apic_fluid.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_apic_fluid.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_convection_diffusion.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_convection_diffusion.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_diffusion_3d.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_diffusion_3d.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_diffusion.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_diffusion.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;apic fluid&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;convection diffusion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;diffusion 3d&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;diffusion&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_mixed_elasticity.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_mixed_elasticity.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_navier_stokes.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_navier_stokes.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_stokes_transfer.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_stokes_transfer.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/fem/example_stokes.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/fem_stokes.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;mixed elasticity&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;navier stokes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;stokes transfer&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;stokes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;examples/optim&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_bounce.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_bounce.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_cloth_throw.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_cloth_throw.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_diffray.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_diffray.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_drone.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_drone.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bounce&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cloth throw&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;diffray&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;drone&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_inverse_kinematics.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_inverse_kinematics.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_spring_cage.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_spring_cage.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_trajectory.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_trajectory.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/optim/example_walker.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/optim_walker.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;inverse kinematics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;spring cage&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;trajectory&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;walker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;examples/sim&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_cartpole.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_cartpole.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_cloth.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_cloth.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_granular.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_granular.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_granular_collision_sdf.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_granular_collision_sdf.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cartpole&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cloth&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;granular&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;granular collision sdf&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_jacobian_ik.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_jacobian_ik.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_quadruped.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_quadruped.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_rigid_chain.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_rigid_chain.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_rigid_contact.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_rigid_contact.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;jacobian ik&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;quadruped&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;rigid chain&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;rigid contact&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_rigid_force.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_rigid_force.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_rigid_gyroscopic.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_rigid_gyroscopic.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_rigid_soft_contact.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_rigid_soft_contact.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NVIDIA/warp/tree/main/warp/examples/sim/example_soft_body.py&#34;&gt;&lt;img src=&#34;https://github.com/NVIDIA/warp/raw/main/docs/img/examples/sim_soft_body.png&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;rigid force&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;rigid gyroscopic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;rigid soft contact&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;soft body&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;For developers who want to build the library themselves, the following tools are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft Visual Studio 2019 upwards (Windows)&lt;/li&gt; &#xA; &lt;li&gt;GCC 9.4 upwards (Linux)&lt;/li&gt; &#xA; &lt;li&gt;CUDA Toolkit 11.5 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;Git LFS&lt;/a&gt; installed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After cloning the repository, users should run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python build_lib.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate the &lt;code&gt;warp.dll&lt;/code&gt; / &lt;code&gt;warp.so&lt;/code&gt; core library respectively. It will search for the CUDA Toolkit in the default install directory. This path can be overridden by setting the &lt;code&gt;CUDA_PATH&lt;/code&gt; environment variable. Alternatively, the path to the CUDA Toolkit can be passed to the build command as &lt;code&gt;--cuda_path=&#34;...&#34;&lt;/code&gt;. After building, the Warp package should be installed using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This ensures that subsequent modifications to the library will be reflected in the Python package.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;Please see the following resources for additional background on Warp:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/warp-python&#34;&gt;Product Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcspring22-s41599&#34;&gt;GTC 2022 Presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtcspring21-s31838&#34;&gt;GTC 2021 Presentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3476117.3483433&#34;&gt;SIGGRAPH Asia 2021 Differentiable Simulation Course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nvidia.com/en-us/on-demand/session/gtc24-s63345/&#34;&gt;GTC 2024 Presentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The underlying technology in Warp has been used in a number of research projects at NVIDIA including the following publications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Accelerated Policy Learning with Parallel Differentiable Simulation - Xu, J., Makoviychuk, V., Narang, Y., Ramos, F., Matusik, W., Garg, A., &amp;amp; Macklin, M. &lt;a href=&#34;https://short-horizon-actor-critic.github.io&#34;&gt;(2022)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DiSECt: Differentiable Simulator for Robotic Cutting - Heiden, E., Macklin, M., Narang, Y., Fox, D., Garg, A., &amp;amp; Ramos, F &lt;a href=&#34;https://github.com/NVlabs/DiSECt&#34;&gt;(2021)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;gradSim: Differentiable Simulation for System Identification and Visuomotor Control - Murthy, J. Krishna, Miles Macklin, Florian Golemo, Vikram Voleti, Linda Petrini, Martin Weiss, Breandan Considine et al. &lt;a href=&#34;https://gradsim.github.io&#34;&gt;(2021)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://nvidia.github.io/warp/faq.html&#34;&gt;FAQ&lt;/a&gt; in the Warp documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Problems, questions, and feature requests can be opened on &lt;a href=&#34;https://github.com/NVIDIA/warp/issues&#34;&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Warp team also monitors the &lt;strong&gt;#warp&lt;/strong&gt; channel on the public &lt;a href=&#34;https://discord.com/invite/nvidiaomniverse&#34;&gt;Omniverse Discord&lt;/a&gt; server, come chat to us!&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Versions take the format X.Y.Z, similar to &lt;a href=&#34;https://devguide.python.org/developer-workflow/development-cycle/#devcycle&#34;&gt;Python itself&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Increments in X are reserved for major reworks of the project causing disruptive incompatibility (or reaching the 1.0 milestone).&lt;/li&gt; &#xA; &lt;li&gt;Increments in Y are for regular releases with a new set of features.&lt;/li&gt; &#xA; &lt;li&gt;Increments in Z are for bug fixes. In principle there are no new features. Can be omitted if 0 or not relevant.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is similar to &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt; but less strict around backward compatibility. Like with Python, some breaking changes can be present between minor versions if well documented and gradually introduced.&lt;/p&gt; &#xA;&lt;p&gt;Note that prior to 0.11.0 this schema was not strictly adhered to.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Warp is provided under the NVIDIA Software License, please see &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/warp/main/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt; for full license text.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions and pull requests from the community are welcome and are taken under the terms described in the &lt;strong&gt;9. Feedback&lt;/strong&gt; section of the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/warp/main/LICENSE.md&#34;&gt;license&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/warp/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; provides additional information on how to open a pull request for Warp.&lt;/p&gt; &#xA;&lt;h2&gt;Citing&lt;/h2&gt; &#xA;&lt;p&gt;If you use Warp in your research please use the following citation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{warp2022,&#xA;title= {Warp: A High-performance Python Framework for GPU Simulation and Graphics},&#xA;author = {Miles Macklin},&#xA;month = {March},&#xA;year = {2022},&#xA;note= {NVIDIA GPU Technology Conference (GTC)},&#xA;howpublished = {\url{https://github.com/nvidia/warp}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>