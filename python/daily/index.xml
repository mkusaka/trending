<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-03T01:41:06Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>microsoft/JARVIS</title>
    <updated>2023-04-03T01:41:06Z</updated>
    <id>tag:github.com,2023-04-03:/microsoft/JARVIS</id>
    <link href="https://github.com/microsoft/JARVIS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JARVIS, a system to connect LLMs with ML community&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JARVIS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project is under construction and we will have all the code ready soon.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2023.4.1] We update a version of code for building.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Language serves as an interface for LLMs to connect numerous AI models for solving complicated AI tasks!&lt;/p&gt; &#xA;&lt;p&gt;See our paper: &lt;a href=&#34;http://arxiv.org/abs/2303.17580&#34;&gt;HuggingGPT: Solving AI Tasks with ChatGPT and its Friends in HuggingFace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/JARVIS/main/assets/overview.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We introduce a collaborative system that consists of &lt;strong&gt;an LLM as the controller&lt;/strong&gt; and &lt;strong&gt;numerous expert models as collaborative executors&lt;/strong&gt; (from HuggingFace Hub). The workflow of our system consists of four stages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Task Planning&lt;/strong&gt;: Using ChatGPT to analyze the requests of users to understand their intention, and disassemble them into possible solvable sub-tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Model Selection&lt;/strong&gt;: Based on the sub-tasks, ChatGPT invoke the corresponding models hosted on HuggingFace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Task Execution&lt;/strong&gt;: Executing each invoked model and returning the results to ChatGPT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Response Generation&lt;/strong&gt;: Finally, using ChatGPT to integrate the prediction of all models, and generate response.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu 20.04 LTS&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA GeForce RTX 3090 * 1&lt;/li&gt; &#xA; &lt;li&gt;RAM &amp;gt;= 80GB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;First replace &lt;code&gt;openai.key&lt;/code&gt; and &lt;code&gt;huggingface.cookie&lt;/code&gt; in &lt;code&gt;server/config.yaml&lt;/code&gt; with &lt;strong&gt;your personal key&lt;/strong&gt; and &lt;strong&gt;your cookies at huggingface.co&lt;/strong&gt;. Then run the following commands:&lt;/p&gt; &#xA;&lt;p&gt;For server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# setup env&#xA;cd server&#xA;conda create -n jarvis python=3.8&#xA;conda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia&#xA;pip install -r requirements.txt&#xA;&#xA;# download models&#xA;cd models&#xA;sh download.sh&#xA;&#xA;# run server&#xA;cd ..&#xA;python models_server.py&#xA;python bot_server.py --config config.yaml # for text-davinci-003&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For web:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in order to display the video properly in HTML, you need to compile &lt;code&gt;ffmpeg&lt;/code&gt; manually with H.264&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# This command need be executed without errors.&#xA;LD_LIBRARY_PATH=/usr/local/lib /usr/local/bin/ffmpeg -i input.mp4 -vcodec libx264 output.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/JARVIS/main/assets/screenshot_q.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/JARVIS/main/assets/screenshot_a.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find this work useful in your method, you can cite the paper as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{shen2023hugginggpt,&#xA;    title={HuggingGPT: Solving AI Tasks with ChatGPT and its Friends in HuggingFace},&#xA;    author={Shen, Yongliang and Song, Kaitao and Tan, Xu and Li, Dongsheng and Lu, Weiming and Zhuang, Yueting},&#xA;    journal={arXiv preprint arXiv:2303.17580},&#xA;    year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/&#34;&gt;ChatGPT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/&#34;&gt;HuggingFace&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lllyasviel/ControlNet&#34;&gt;ControlNet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lianginx/chatgpt-vue&#34;&gt;ChatGPT-vue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lm-sys/FastChat</title>
    <updated>2023-04-03T01:41:06Z</updated>
    <id>tag:github.com,2023-04-03:/lm-sys/FastChat</id>
    <link href="https://github.com/lm-sys/FastChat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The release repo for &#34;Vicuna: An Open Chatbot Impressing GPT-4&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FastChat&lt;/h1&gt; &#xA;&lt;p&gt;An open platform for training, serving, and evaluating large language model based chatbots.&lt;/p&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ðŸ”¥ We released &lt;strong&gt;Vicuna: An Open-Source Chatbot Impressing GPT-4 with 90% ChatGPT Quality&lt;/strong&gt;. Checkout the blog &lt;a href=&#34;https://vicuna.lmsys.org&#34;&gt;post&lt;/a&gt; and &lt;a href=&#34;https://chat.lmsys.org/&#34;&gt;demo&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ![demo](assets/demo-narrow.gif) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chat.lmsys.org&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/assets/demo-narrow.gif&#34; width=&#34;70%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://discord.gg/h6kCZb72G7&#34;&gt;Discord&lt;/a&gt; server and follow our &lt;a href=&#34;https://twitter.com/lmsysorg&#34;&gt;Twitter&lt;/a&gt; to get the latest updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Announcement:&lt;/strong&gt; Thank you for checking out our project and your interest! We plan to release the model weights once we have addressed all legal concerns and have a low-resource version of the inference code ready. Based on our current timeline, it will be available by early next week. Please stay tuned! &lt;span&gt;ðŸ¦™&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/#serving&#34;&gt;Serving&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/#evaluation&#34;&gt;Evaluation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/#fine-tuning&#34;&gt;Fine-tuning&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository and navigate to FastChat folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lm-sys/FastChat.git&#xA;cd FastChat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Package&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install --upgrade pip  # enable PEP 660 support&#xA;pip3 install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install the latest main branch of huggingface/transformers&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install git+https://github.com/huggingface/transformers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Serving&lt;/h2&gt; &#xA;&lt;p&gt;We plan to release the model weights by providing a version of delta weights that build on the original LLaMA weights, but we are still figuring out a proper way to do so. In this example, we demonstrate the usage of our distributed serving system using OPT models. Later, you can apply similar commands to serve Vicuna, just as shown in our demo.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Interface&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m fastchat.serve.cli --model-name facebook/opt-1.3b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web UI&lt;/h3&gt; &#xA;&lt;h4&gt;Launch a controller&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m fastchat.serve.controller&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a model worker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m fastchat.serve.model_worker --model-path facebook/opt-1.3b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Send a test message&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m fastchat.serve.test_message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Launch a gradio web server.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m fastchat.serve.gradio_web_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;You can open your brower and chat with a model now.&lt;/h4&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Our AI-enhanced &lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/fastchat/eval&#34;&gt;evaluation&lt;/a&gt; pipeline is based on GPT-4. Here are some high-level instructions for using the pipeline:&lt;/p&gt; &#xA;&lt;p&gt;First, generate answers from different models. Use &lt;code&gt;qa_baseline_gpt35.py&lt;/code&gt; for ChatGPT, or specify the model checkpoint and run &lt;code&gt;model_qa.py&lt;/code&gt; for Vicuna and other models.&lt;/p&gt; &#xA;&lt;p&gt;Then, use GPT-4 to generate reviews automatically, which can be done manually if the GPT-4 API is not available to you. Once you have your evaluation data, visualize the results by running &lt;code&gt;generate_webpage_data_from_table.py&lt;/code&gt;, which generates data for a static website.&lt;/p&gt; &#xA;&lt;p&gt;Finally, serve a static website under the &lt;code&gt;webpage&lt;/code&gt; directory. You can simply use &lt;code&gt;python3 -m http.server&lt;/code&gt; to serve the website locally.&lt;/p&gt; &#xA;&lt;p&gt;Besides the evaluation workflow, we also document the data format used for evaluation, which is encoded with JSON Lines and includes information on models, prompts, reviewers, questions, answers, and reviews. You can customize the evaluation process or contribute to our project by accessing relevant &lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/fastchat/eval/table/&#34;&gt;data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/fastchat/eval&#34;&gt;evaluation&lt;/a&gt; for detailed instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Fine-tuning&lt;/h2&gt; &#xA;&lt;h3&gt;Data&lt;/h3&gt; &#xA;&lt;p&gt;Vicuna is created by fine-tuning a LLaMA base model using approximately 70K user-shared conversations gathered from ShareGPT.com with public APIs. To ensure data quality, we convert the HTML back to markdown and filter out some inappropriate or low-quality samples. Additionally, we divide lengthy conversations into smaller segments that fit the model&#39;s maximum context length. For detailed instructions to clean the ShareGPT data, check out &lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/docs/commands/data_cleaning.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Due to some concerns, we may not release the data at the moment. If you would like to try the fine-tuning code, you can try to run it with our &lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/playground/data/alpaca-data-conversation.json&#34;&gt;preprocessed alpaca dataset&lt;/a&gt; (originally from &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Code and Hyperparameters&lt;/h3&gt; &#xA;&lt;p&gt;We fine-tune the model using the code from &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;Stanford Alpaca&lt;/a&gt;, with some modifications to support gradient checkpointing and &lt;a href=&#34;https://github.com/HazyResearch/flash-attention&#34;&gt;Flash Attention&lt;/a&gt;. We use the similar hyperparameters as the Stanford Alpaca.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hyperparameter&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Global Batch Size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Learning rate&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Epochs&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Max length&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Weight decay&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vicuna-13B&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2e-5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2048&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Fine-tuning on Any Cloud with SkyPilot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/skypilot-org/skypilot&#34;&gt;SkyPilot&lt;/a&gt; is a framework built by UC Berkeley for easily and cost effectively running ML workloads on any cloud (AWS, GCP, Azure, Lambda, etc.). To use SkyPilot, install it with the following command and setup the cloud credentials locally following the instructions &lt;a href=&#34;https://skypilot.readthedocs.io/en/latest/getting-started/installation.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install skypilot from the master branch&#xA;pip install git+https://github.com/skypilot-org/skypilot.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Vicuna&lt;/h4&gt; &#xA;&lt;p&gt;Vicuna can be trained on 8 A100 GPUs with 80GB memory. The following command will automatically launch a node satisfying the requirement, setup and run the training job on it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sky launch -c vicuna -s scripts/train-vicuna.yaml --env WANDB_API_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other options are also valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Launch it on managed spot to save 3x cost (train Vicuna-13B with around $300)&#xA;sky spot launch -n vicuna scripts/train-vicuna.yaml --env WANDB_API_KEY&#xA;&#xA;# Train a 7B model&#xA;sky launch -c vicuna -s scripts/train-vicuna.yaml --env WANDB_API_KEY --env MODEL_SIZE=7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Please make sure the &lt;code&gt;WANDB_API_KEY&lt;/code&gt; has been setup on your local machine. You can find the API key on your &lt;a href=&#34;https://wandb.ai/authorize&#34;&gt;wandb profile page&lt;/a&gt;. If you would like to train the model without using wandb, you can replace the &lt;code&gt;--env WANDB_API_KEY&lt;/code&gt; flag with &lt;code&gt;--env WANDB_MODE=offline&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Alpaca&lt;/h4&gt; &#xA;&lt;p&gt;Launch the training job with the following line (will be launched on a single node with 4 A100-80GB GPUs)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sky launch -c alpaca -s scripts/train-alpaca.yaml --env WANDB_API_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fine-tuning with Local GPUs&lt;/h3&gt; &#xA;&lt;p&gt;Vicuna can also be trained on 8 A100 GPUs with 80GB memory with the following code. To train on less GPUs, you can reduce the &lt;code&gt;per_device_train_batch_size&lt;/code&gt; and increase the &lt;code&gt;gradient_accumulation_steps&lt;/code&gt; accordingly to keep the global batch size the same. To setup the environment, please see the setup section in &lt;a href=&#34;https://raw.githubusercontent.com/lm-sys/FastChat/main/scripts/train-vicuna.yaml&#34;&gt;scripts/train-vicuna.yaml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nnodes=1 --nproc_per_node=8 --master_port=&amp;lt;your_random_port&amp;gt; \&#xA;    fastchat/train/train_mem.py \&#xA;    --model_name_or_path &amp;lt;path-to-llama-model-weight&amp;gt; \&#xA;    --data_path &amp;lt;path-to-data&amp;gt; \&#xA;    --bf16 True \&#xA;    --output_dir ./checkpoints \&#xA;    --num_train_epochs 3 \&#xA;    --per_device_train_batch_size 4 \&#xA;    --per_device_eval_batch_size 4 \&#xA;    --gradient_accumulation_steps 1 \&#xA;    --evaluation_strategy &#34;no&#34; \&#xA;    --save_strategy &#34;steps&#34; \&#xA;    --save_steps 1200 \&#xA;    --save_total_limit 100 \&#xA;    --learning_rate 2e-5 \&#xA;    --weight_decay 0. \&#xA;    --warmup_ratio 0.03 \&#xA;    --lr_scheduler_type &#34;cosine&#34; \&#xA;    --logging_steps 1 \&#xA;    --fsdp &#34;full_shard auto_wrap&#34; \&#xA;    --fsdp_transformer_layer_cls_to_wrap &#39;LlamaDecoderLayer&#39; \&#xA;    --tf32 True \&#xA;    --model_max_length 2048 \&#xA;    --gradient_checkpointing True \&#xA;    --lazy_preprocess True&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>twitter/the-algorithm-ml</title>
    <updated>2023-04-03T01:41:06Z</updated>
    <id>tag:github.com,2023-04-03:/twitter/the-algorithm-ml</id>
    <link href="https://github.com/twitter/the-algorithm-ml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for Twitter&#39;s Recommendation Algorithm&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This project open sources some of the ML models used at Twitter.&lt;/p&gt; &#xA;&lt;p&gt;Currently these are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#34;For You&#34; Heavy Ranker (projects/home/recap).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TwHIN embeddings (projects/twhin) &lt;a href=&#34;https://arxiv.org/abs/2202.05387&#34;&gt;https://arxiv.org/abs/2202.05387&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This project can be run inside a python virtualenv. We have only tried this on Linux machines and because we use torchrec it works best with an Nvidia GPU. To setup run&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./images/init_venv.sh&lt;/code&gt; (Linux only).&lt;/p&gt; &#xA;&lt;p&gt;The READMEs of each project contain instructions about how to run each project.&lt;/p&gt;</summary>
  </entry>
</feed>