<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-22T01:35:55Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SamirPaul1/DSAlgo</title>
    <updated>2022-10-22T01:35:55Z</updated>
    <id>tag:github.com,2022-10-22:/SamirPaul1/DSAlgo</id>
    <link href="https://github.com/SamirPaul1/DSAlgo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üìöA repository that contains all the Data Structures and Algorithms concepts and solutions to various problems in Python3 stored in a structured manner.üë®‚ÄçüíªüéØ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Data Structures &amp;amp; Algorithms for Coding Interview&lt;/h1&gt; &#xA; &lt;b&gt;&lt;i&gt;If you appreciate my work, please&lt;/i&gt;&lt;/b&gt; üåü &#xA; &lt;b&gt;&lt;i&gt;this repository. It motivates me. üöÄüöÄ&lt;/i&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SamirPaul1/DSAlgo/main/#&#34;&gt;&lt;img width=&#34;1188&#34; alt=&#34;DSA banner&#34; src=&#34;https://raw.githubusercontent.com/SamirPaulb/assets/main/dsa-in-python.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;b&gt;View this repository with improved user experience‚ñ∂Ô∏èhttps://samirpaul1.github.io/DSAlgo&lt;/b&gt;üöÄ &#xA;&lt;/div&gt; &#xA;&lt;p&gt;In this repository, I have stored solutions to various problems and concepts of &lt;strong&gt;Data Structures and Algorithms&lt;/strong&gt; in Python3 in a structured manner.‚ú®&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;‚úî&lt;/span&gt; &lt;ins&gt;&lt;em&gt;&lt;strong&gt;Topics Covered&lt;/strong&gt;&lt;/em&gt;&lt;/ins&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming&#34;&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/03_Sorting-Algorithms&#34;&gt;&lt;strong&gt;Sorting Algorithms&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/04_LinkedList&#34;&gt;&lt;strong&gt;LinkedList&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/05_Object-Oriented-Programming&#34;&gt;&lt;strong&gt;Object-Oriented Programming&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/06_Binary-Trees&#34;&gt;&lt;strong&gt;Binary Trees&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/07_Graph&#34;&gt;&lt;strong&gt;Graph Algorithms&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/08_Heap&#34;&gt;&lt;strong&gt;Heap&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/09_Matrix&#34;&gt;&lt;strong&gt;Matrix&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/10_Trie&#34;&gt;&lt;strong&gt;Trie&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/11_Binary-Search&#34;&gt;&lt;strong&gt;Binary Search&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/12_Backtracking&#34;&gt;&lt;strong&gt;Backtracking&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/13_Stack&#34;&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/14_Queue&#34;&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/15_Greedy&#34;&gt;&lt;strong&gt;Greedy&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/16_String&#34;&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/17_Bit-Manipulation&#34;&gt;&lt;strong&gt;Bit Manipulation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/18_Array&#34;&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/19_HashMap&#34;&gt;&lt;strong&gt;HashMap&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/20_DFS-BFS&#34;&gt;&lt;strong&gt;DFS BFS&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/21_Two-Pointers&#34;&gt;&lt;strong&gt;Two Pointers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/22_Math&#34;&gt;&lt;strong&gt;Math&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/23_Recursion&#34;&gt;&lt;strong&gt;Recursion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In various folders of the above topics, you can find questions and concepts related to that topic.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming&#34;&gt;Dynamic Programming&lt;/a&gt; section, you can find all the questions covered and not covered in &lt;a href=&#34;https://www.youtube.com/c/AdityaVermaTheProgrammingLord&#34;&gt;Aditya Verma&#39;s&lt;/a&gt; &lt;a href=&#34;https://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&#34;&gt;dynamic programming playlist&lt;/a&gt; folder-wise with my &lt;a href=&#34;https://raw.githubusercontent.com/SamirPaul1/DSAlgo/main/02_Dynamic-Programming/Dynamic-Programming-NOTE.pdf&#34;&gt;handwritten notes&lt;/a&gt;.‚úçÔ∏è&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are preparing for an interview from &lt;a href=&#34;https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/&#34;&gt;Striver‚Äôs SDE Sheet&lt;/a&gt; then the &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice&#34;&gt;&lt;strong&gt;30-Days-SDE-Sheet-Practice&lt;/strong&gt;&lt;/a&gt; will be helpful to you. Here I have stored solutions to questions of each day with short notes to each solution, as short notes about the approach are very helpful during revision.üéØ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet&#34;&gt;&lt;strong&gt;Questions-Sheet&lt;/strong&gt;&lt;/a&gt; directory, you can find questions asked by top product-based companies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is a collection of books and pdfs on various important computer science fundamentals in the &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs&#34;&gt;&lt;strong&gt;BOOKS-and-PDFs&lt;/strong&gt;&lt;/a&gt; directory.üìö&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I am continuously trying to improve this repository by adding new questions and concepts related to the respective topic. Please feel free to contribute to this repository.üíª&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Things you can contribute to:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the existing solution with a better one (better complexity).&lt;/li&gt; &#xA; &lt;li&gt;Add new questions and solutions in &lt;code&gt;Python3&lt;/code&gt; to the respective directory.&lt;/li&gt; &#xA; &lt;li&gt;Add new resources to &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs&#34;&gt;BOOKS-and-PDFs&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet&#34;&gt;Questions-Sheet&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Solve issues raised by other people or yourself.&lt;/li&gt; &#xA; &lt;li&gt;Provide well-documented source code with detailed explanations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;List of Important Questions:‚ú®&lt;/h3&gt; &#xA;&lt;p&gt;The following list of questions was recommended by &lt;a href=&#34;https://www.youtube.com/c/LoveBabbar1&#34;&gt;Love Babbar&lt;/a&gt; on this &lt;a href=&#34;https://youtu.be/4iFALQ1ACdA&#34;&gt;video&lt;/a&gt;. I have documented all those questions here.‚úåÔ∏è&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Topic&lt;/th&gt; &#xA;   &lt;th&gt;Important DSA Questions&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Topic:&lt;/td&gt; &#xA;   &lt;td&gt;Problem:&lt;/td&gt; &#xA;   &lt;td&gt;Related Link&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Reverse the array (char)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-string/&#34;&gt;https://leetcode.com/problems/reverse-string/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Remove the maximum and minimum element in an array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/removing-minimum-and-maximum-from-array/&#34;&gt;https://leetcode.com/problems/removing-minimum-and-maximum-from-array/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Find the &#34;Kth&#34; largest element of an array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-largest-element-in-an-array/&#34;&gt;https://leetcode.com/problems/kth-largest-element-in-an-array/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-colors/&#34;&gt;https://leetcode.com/problems/sort-colors/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Move all the negative elements to one side of the array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Find the Union and Intersection of the two sorted arrays.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Write a program to cyclically rotate an array by one.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/rotate-array/&#34;&gt;https://leetcode.com/problems/rotate-array/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;find Largest sum contiguous Subarray [V. IMP]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-subarray/&#34;&gt;https://leetcode.com/problems/maximum-subarray/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Minimise the maximum difference between heights [V.IMP]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/smallest-range-ii/&#34;&gt;https://leetcode.com/problems/smallest-range-ii/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Minimum no. of Jumps to reach end of an array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game&#34;&gt;https://leetcode.com/problems/jump-game&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;find duplicate in an array of N+1 Integers&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Merge 2 sorted arrays without using Extra space.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Kadane&#39;s Algorithm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-subarray/&#34;&gt;https://leetcode.com/problems/maximum-subarray/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Merge Intervals&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Next Permutation&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Count Inversion&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Best time to buy and Sell stock&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;find all pairs on integer array whose sum is equal to given number&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;find common elements In 3 sorted arrays&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Rearrange the array in alternating positive and negative items with O(1) extra space&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Find if there is any subarray with sum equal to 0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/subarray-sum-equals-k/&#34;&gt;https://leetcode.com/problems/subarray-sum-equals-k/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Find factorial of a large number&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;find maximum product subarray&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Find longest coinsecutive subsequence&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Given an array of size n and a number k, fin all elements that appear more than &#34; n/k &#34; times.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Maximum profit by buying and selling a share atmost twice&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Find whether an array is a subset of another array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Find the triplet that sum to a given value&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Trapping Rain water problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Chocolate Distribution problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Smallest Subarray with sum greater than a given value&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Three way partitioning of an array around a given value&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Minimum swaps required bring elements less equal K together&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Minimum no. of operations required to make an array palindrome&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Median of 2 sorted arrays of equal size&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Median of 2 sorted arrays of different size&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Subarray Sums Divisible by K&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Array&lt;/td&gt; &#xA;   &lt;td&gt;Continuous Subarray Sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Spiral traversal on a Matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Search an element in a matriix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Find median in a row wise sorted matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Find row with maximum no. of 1&#39;s&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Print elements in sorted order using row-column wise sorted matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Largest Rectangle in Histogram&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Maximum size rectangle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://practice.geeksforgeeks.org/problems/max-rectangle/1&#34;&gt;https://practice.geeksforgeeks.org/problems/max-rectangle/1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Find a specific pair in matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Rotate matrix by 90 degrees&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Kth smallest element in a row-cpumn wise sorted matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matrix&lt;/td&gt; &#xA;   &lt;td&gt;Common elements in all rows of a given matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Reverse a String&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Check whether a String is Palindrome or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Find Duplicate characters in a string&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Why strings are immutable in Java?&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Write a Code to check whether one string is a rotation of another&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Write a Program to check whether a string is a valid shuffle of two strings or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Count and Say problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Find Longest Recurring Subsequence in String&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Print all Subsequences of a string.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Print all the permutations of the given string&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Split the Binary string into two substring with equal 0‚Äôs and 1‚Äôs&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Word Wrap Problem [VERY IMP].&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;EDIT Distance [Very Imp]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Find next greater number with same set of digits. [Very Very IMP]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Balanced Parenthesis problem.[Imp]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Word break Problem[ Very Imp]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Rabin Karp Algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;KMP Algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Convert a Sentence into its equivalent mobile numeric keypad sequence.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Minimum number of bracket reversals needed to make an expression balanced.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Count All Palindromic Subsequence in a given String.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Count of number of given string in 2D character array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Search a Word in a 2D Grid of characters.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Boyer Moore Algorithm for Pattern Searching.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Converting Roman Numerals to Decimal&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Longest Common Prefix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Number of flips to make binary string alternate&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Find the first repeated word in string.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Minimum number of swaps for bracket balancing.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Find the longest common subsequence between two strings.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Program to generate all possible valid IP addresses from given string.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Write a program tofind the smallest window that contains all characters of string itself.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Rearrange characters in a string such that no two adjacent are same&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Minimum characters to be added at front to make string palindrome&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Given a sequence of words, print all anagrams together&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Find the smallest window in a string containing all characters of another string&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Recursively remove all adjacent duplicates&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;String matching where one string contains wildcard characters&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Function to find Number of customers who could not get a computer&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Transform One String to Another using Minimum Number of Given Operation&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Check if two given strings are isomorphic to each other&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;String&lt;/td&gt; &#xA;   &lt;td&gt;Recursively print all sentences that can be formed from list of word lists&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Find first and last positions of an element in a sorted array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Find a Fixed Point (Value equal to index) in a given array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/find-pivot-index/&#34;&gt;https://leetcode.com/problems/find-pivot-index/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Search in a rotated sorted array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/search-in-rotated-sorted-array/&#34;&gt;https://leetcode.com/problems/search-in-rotated-sorted-array/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;square root of an integer&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Maximum and minimum of an array using minimum number of comparisons&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Optimum location of point to minimize total distance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/best-meeting-point/&#34;&gt;https://leetcode.com/problems/best-meeting-point/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Find the repeating and the missing&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;find majority element&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Searching in an array where adjacent differ by at most k&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;find a pair with a given difference&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;find four elements that sum to a given value&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;maximum sum such that no 2 elements are adjacent&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Count triplet with sum smaller than a given value&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;merge 2 sorted arrays&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;print all subarrays with 0 sum&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Product array Puzzle&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Sort array according to count of set bits&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;minimum no. of swaps required to sort the array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Bishu and Soldiers&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Rasta and Kheshtak&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Kth smallest number again&lt;/td&gt; &#xA;   &lt;td&gt;Using Min Heap&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Find pivot element in a sorted array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;K-th Element of Two Sorted Arrays&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Aggressive cows&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Book Allocation Problem&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/&#34;&gt;https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;EKOSPOJ:&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Job Scheduling Algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Missing Number in AP&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Smallest number with atleastn trailing zeroes infactorial&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Painters Partition Problem:&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;ROTI-Prata SPOJ&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;DoubleHelix SPOJ&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Subset Sums&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Findthe inversion count&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Implement Merge-sort in-place&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Searching &amp;amp; Sorting&lt;/td&gt; &#xA;   &lt;td&gt;Partitioning and Sorting Arrays with Many Repeated Entries&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Write a Program to reverse the Linked List. (Both Iterative and recursive)&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Reverse a Linked List in group of Given Size. [Very Imp]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/reverse-nodes-in-k-group/&#34;&gt;https://leetcode.com/problems/reverse-nodes-in-k-group/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Write a program to Detect loop in a linked list.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Write a program to Delete loop in a linked list.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Find the starting point of the loop.&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Remove Duplicates in a sorted Linked List.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Remove Duplicates from Sorted List II&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Remove Duplicates in a Un-sorted Linked List.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Write a Program to Move the last element to Front in a Linked List.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Add ‚Äú1‚Äù to a number represented as a Linked List.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Add two numbers represented by linked lists.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Intersection of two Sorted Linked List.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Intersection Point of two Linked Lists.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Merge Sort For Linked lists.[Very Important]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Quicksort for Linked Lists.[Very Important]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Find the middle Element of a linked list.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Check if a linked list is a circular linked list.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Split a Circular linked list into two halves.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Write a Program to check whether the Singly Linked list is a palindrome or not.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Deletion from a Circular Linked List.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Reverse a Doubly Linked list.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Find pairs with a given sum in a DLL.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Count triplets in a sorted DLL whose sum is equal to given value ‚ÄúX‚Äù.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Sort a ‚Äúk‚Äùsorted Doubly Linked list.[Very IMP]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Rotate DoublyLinked list by N nodes.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Rotate a Doubly Linked list in group of Given Size.[Very IMP]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Can we reverse a linked list in less than O(n) ?&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Flatten a Linked List&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Sort a LL of 0&#39;s, 1&#39;s and 2&#39;s&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Clone a linked list with next and random pointer&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Merge K sorted Linked list&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Multiply 2 no. represented by LL&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Delete nodes which have a greater value on right side&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Segregate even and odd nodes in a Linked List&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Program for n‚Äôth node from the end of a Linked List&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LinkedList&lt;/td&gt; &#xA;   &lt;td&gt;Find the first non-repeating character from a stream of characters&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;level order traversal&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Reverse Level Order traversal&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Height of a tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Diameter of a tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Mirror of a tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Inorder Traversal of a tree both using recursion and Iteration&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Preorder Traversal of a tree both using recursion and Iteration&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Postorder Traversal of a tree both using recursion and Iteration&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Left View of a tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Right View of Tree&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-right-side-view/&#34;&gt;https://leetcode.com/problems/binary-tree-right-side-view/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Top View of a tree&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/&#34;&gt;https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Bottom View of a tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Zig-Zag traversal of a binary tree&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/&#34;&gt;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check if a tree is balanced or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Diagnol Traversal of a Binary tree&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=e9ZGxH1y_PE&#34;&gt;https://www.youtube.com/watch?v=e9ZGxH1y_PE&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Boundary traversal of a Binary tree&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0ca1nvR0be4&#34;&gt;https://www.youtube.com/watch?v=0ca1nvR0be4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Construct Binary Tree from String with Bracket Representation&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Convert Binary tree into Doubly Linked List&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Convert Binary tree into Sum tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Construct Binary tree from Inorder and preorder traversal&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find minimum swaps required to convert a Binary tree into BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check if Binary tree is Sum tree or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check if all leaf nodes are at same level or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check if 2 trees are mirror or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Sum of Nodes on the Longest path from root to leaf node&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check if given graph is tree or not. [ IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find Largest subtree sum in a tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Maximum Sum of nodes in Binary tree such that no two are adjacent&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Print all &#34;K&#34; Sum paths in a Binary tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find LCA in a Binary tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find distance between 2 nodes in a Binary tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Kth Ancestor of node in a Binary tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find all Duplicate subtrees in a Binary tree [ IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Tree Isomorphism Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Trees&lt;/td&gt; &#xA;   &lt;td&gt;Copy List with Random Pointer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Fina a value in a BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Deletion of a node in a BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find min and max value in a BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find inorder successor and inorder predecessor in a BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check if a tree is a BST or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Populate Inorder successor of all nodes&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find LCA of 2 nodes in a BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Construct BST from preorder traversal&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Convert Binary tree into BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Convert a normal BST into a Balanced BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Merge two BST [ V.V.V&amp;gt;IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find Kth largest element in a BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find Kth smallest element in a BST&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Count pairs from 2 BST whose sum is equal to given value &#34;X&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Find the median of BST in O(n) time and O(1) space&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Count BST ndoes that lie in a given range&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Replace every element with the least greater element on its right&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Given &#34;n&#34; appointments, find the conflicting appointments&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check preorder is valid or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check whether BST contains Dead end&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Largest BST in a Binary Tree [ V.V.V.V.V IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Flatten BST to sorted list&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Check Completeness of a Binary Tree&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Non-overlapping Intervals&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Binary Search Trees&lt;/td&gt; &#xA;   &lt;td&gt;Largest BST in Binary Tree&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/&#34;&gt;https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Activity Selection Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Job SequencingProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Huffman Coding&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Water Connection Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Fractional Knapsack Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Greedy Algorithm to find Minimum number of Coins&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Maximum trains for which stoppage can be provided&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Minimum Platforms Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Buy Maximum Stocks if i stocks can be bought on i-th day&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Find the minimum and maximum amount to buy all N candies&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Minimize Cash Flow among a given set of friends who have borrowed money from each other&lt;/td&gt; &#xA;   &lt;td&gt;Optimal Account Balancing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Minimum Cost to cut a board into squares&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Number of Islands&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Find maximum meetings in one room&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.lintcode.com/problem/919&#34;&gt;https://www.lintcode.com/problem/919&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Maximum product subset of an array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Maximize array sum after K negations&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Maximize the sum of arr[i]*i&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Maximum sum of absolute difference of an array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Maximize sum of consecutive differences in a circular array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Minimum sum of absolute difference of pairs of two arrays&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Program for Shortest Job First (or SJF) CPU Scheduling&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Program for Least Recently Used (LRU) Page Replacement algorithm&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Smallest subset with sum greater than all other elements&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Chocolate Distribution Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;DEFKIN -Defense of a Kingdom&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;DIEHARD -DIE HARD&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;GERGOVIA -Wine trading in Gergovia&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Picking Up Chicks&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;CHOCOLA ‚ÄìChocolate&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;ARRANGE -Arranging Amplifiers&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;K Centers Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Minimum Cost of ropes&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Find smallest number with given number of digits and sum of digits&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Rearrange characters in a string such that no two adjacent are same&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Find maximum sum possible equal sum of three stacks&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greedy&lt;/td&gt; &#xA;   &lt;td&gt;Maximum Sub-String after at most K changes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/maximize-the-confusion-of-an-exam/&#34;&gt;https://leetcode.com/problems/maximize-the-confusion-of-an-exam/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Rat in a maze Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Printing all solutions in N-Queen Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Word Break Problem using Backtracking&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Remove Invalid Parentheses&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Sudoku Solver&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;m Coloring Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Print all palindromic partitions of a string&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Subset Sum Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;The Knight‚Äôs tour problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Tug of War&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Find shortest safe route in a path with landmines&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Combinational Sum&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Find Maximum number possible by doing at-most K swaps&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Print all permutations of a string&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Find if there is a path of more than k length from a source&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Longest Possible Route in a Matrix with Hurdles&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Print all possible paths from top left to bottom right of a mXn matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Partition of a set intoK subsets with equal sum&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BackTracking&lt;/td&gt; &#xA;   &lt;td&gt;Find the K-th Permutation Sequence of first N natural numbers&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement Stack from Scratch&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement Queue from Scratch&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement 2 stack in an array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;find the middle element of a stack&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement &#34;N&#34; stacks in an Array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Check the expression has valid or Balanced parenthesis or not.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Reverse a String using Stack&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Design a Stack that supports getMin() in O(1) time and O(1) extra space.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Find the next Greater element&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;The celebrity Problem&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CiiXBvrX-5A&#34;&gt;https://www.youtube.com/watch?v=CiiXBvrX-5A&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Arithmetic Expression evaluation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/problems/evaluate-reverse-polish-notation/&#34;&gt;https://leetcode.com/problems/evaluate-reverse-polish-notation/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Evaluation of Postfix expression&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=422Q_yx2yA8&#34;&gt;https://www.youtube.com/watch?v=422Q_yx2yA8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement a method to insert an element at its bottom without using any other data structure.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Reverse a stack using recursion&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Sort a Stack using recursion&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Merge Overlapping Intervals&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Largest rectangular Area in Histogram&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Length of the Longest Valid Substring&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Expression contains redundant bracket or not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement Stack using Queue&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement Stack using Deque&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Stack Permutations (Check if an array is stack permutation of other)&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement Queue using Stack&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement &#34;n&#34; queue in an array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Implement a Circular queue&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;LRU Cache Implementationa&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Reverse a Queue using recursion&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Reverse the first ‚ÄúK‚Äù elements of a queue&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Interleave the first half of the queue with second half&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Find the first circular tour that visits all Petrol Pumps&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Minimum time required to rot all oranges&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Distance of nearest cell having 1 in a binary matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;First negative integer in every window of size ‚Äúk‚Äù&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Check if all levels of two trees are anagrams or not.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Sum of minimum and maximum elements of all subarrays of size ‚Äúk‚Äù.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Minimum sum of squares of character counts in a given string after removing ‚Äúk‚Äù characters.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Queue based approach or first non-repeating character in a stream.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stacks &amp;amp; Queues&lt;/td&gt; &#xA;   &lt;td&gt;Next Smaller Element&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Implement a Maxheap/MinHeap using arrays and recursion.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Sort an Array using heap. (HeapSort)&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Maximum of all subarrays of size k.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;‚Äúk‚Äù largest element in an array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Kth smallest and largest element in an unsorted array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Merge ‚ÄúK‚Äù sorted arrays. [ IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Merge 2 Binary Max Heaps&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Kth largest sum continuous subarrays&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Leetcode- reorganize strings&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Merge ‚ÄúK‚Äù Sorted Linked Lists [V.IMP]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Smallest range in ‚ÄúK‚Äù Lists&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Median in a stream of Integers&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Check if a Binary Tree is Heap&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Connect ‚Äún‚Äù ropes with minimum cost&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Convert BST to Min Heap&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Convert min heap to max heap&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Rearrange characters in a string such that no two adjacent are same.&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Heap&lt;/td&gt; &#xA;   &lt;td&gt;Minimum sum of two numbers formed from digits of an array&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Create a Graph, print it&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Implement BFS algorithm&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Implement DFS Algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Detect Cycle in Directed Graph using BFS/DFS Algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Detect Cycle in UnDirected Graph using BFS/DFS Algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Search in a Maze&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Minimum Step by Knight&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;flood fill algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Clone a graph&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Making wired Connections&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;word Ladder&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Dijkstra algo&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Implement Topological Sort&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Minimum time taken by each job to be completed given by a Directed Acyclic Graph&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Find whether it is possible to finish all tasks or not from given dependencies&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Find the no. of Isalnds&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Given a sorted Dictionary of an Alien Language, find order of characters&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Implement Kruksal‚ÄôsAlgorithm&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Implement Prim‚Äôs Algorithm&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Total no. of Spanning tree in a graph&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Implement Bellman Ford Algorithm&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Implement Floyd warshallAlgorithm&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Travelling Salesman Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Graph ColouringProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Snake and Ladders Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Find bridge in a graph&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Count Strongly connected Components(Kosaraju Algo)&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Check whether a graph is Bipartite or Not&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Detect Negative cycle in a graph&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Longest path in a Directed Acyclic Graph&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Journey to the Moon&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Cheapest Flights Within K Stops&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Oliver and the Game&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Water Jug problem using BFS&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Water Jug problem using BFS&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Find if there is a path of more thank length from a source&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;M-ColouringProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Minimum edges to reverse o make path from source to destination&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Paths to travel each nodes using each edge(Seven Bridges)&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Vertex Cover Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Chinese Postman or Route Inspection&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Number of Triangles in a Directed and Undirected Graph&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Minimise the cashflow among a given set of friends who have borrowed money from each other&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Graph&lt;/td&gt; &#xA;   &lt;td&gt;Two Clique Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trie&lt;/td&gt; &#xA;   &lt;td&gt;Construct a trie from scratch&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trie&lt;/td&gt; &#xA;   &lt;td&gt;Find shortest unique prefix for every word in a given list&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trie&lt;/td&gt; &#xA;   &lt;td&gt;Word Break Problem&lt;/td&gt; &#xA;   &lt;td&gt;(Trie solution)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trie&lt;/td&gt; &#xA;   &lt;td&gt;Given a sequence of words, print all anagrams together&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trie&lt;/td&gt; &#xA;   &lt;td&gt;Implement a Phone Directory&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Trie&lt;/td&gt; &#xA;   &lt;td&gt;Print unique rows in a given boolean matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Coin ChangeProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Knapsack Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Binomial CoefficientProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Permutation CoefficientProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Program for nth Catalan Number&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Matrix Chain Multiplication&amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Edit Distance&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Subset Sum Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Friends Pairing Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Gold Mine Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Assembly Line SchedulingProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Painting the Fenceproblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximize The Cut Segments&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest Common Subsequence&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest Repeated Subsequence&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest Increasing Subsequence&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Space Optimized Solution of LCS&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;LCS (Longest Common Subsequence) of three strings&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum Sum Increasing Subsequence&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Count all subsequences having product less than K&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest subsequence such that difference between adjacent is one&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum subsequence sum such that no three are consecutive&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Egg Dropping Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum Length Chain of Pairs&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum size square sub-matrix with all 1s&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum sum of pairs with specific difference&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Min Cost PathProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum difference of zeros and ones in binary string&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Minimum number of jumps to reach end&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Minimum cost to fill given weight in a bag&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Minimum removals from array to make max ‚Äìmin &amp;lt;= K&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest Common Substring&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Count number of ways to reacha given score in a game&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Count Balanced Binary Trees of Height h&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;LargestSum Contiguous Subarray [V&amp;gt;V&amp;gt;V&amp;gt;V IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Smallest sum contiguous subarray&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Unbounded Knapsack (Repetition of items allowed)&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Word Break Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Largest Independent Set Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Partition problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest Palindromic Subsequence&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Count All Palindromic Subsequence in a given String&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest Palindromic Substring&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Longest alternating subsequence&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Weighted Job Scheduling&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Coin game winner where every player has three choices&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Count Derangements (Permutation such that no element appears in its original position) [ IMPORTANT ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum profit by buying and selling a share at most twice [ IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Optimal Strategy for a Game&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Optimal Binary Search Tree&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Palindrome PartitioningProblem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Word Wrap Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Mobile Numeric Keypad Problem [ IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Boolean Parenthesization Problem&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Largest rectangular sub-matrix whose sum is 0&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Largest area rectangular sub-matrix with equal number of 1‚Äôs and 0‚Äôs [ IMP ]&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum sum rectangle in a 2D matrix&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum profit by buying and selling a share at most k times&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Find if a string is interleaved of two other strings&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Maximum Length of Pair Chain&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Partition Equal Subset Sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://leetcode.com/submissions/detail/561942165/&#34;&gt;https://leetcode.com/submissions/detail/561942165/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic Programming&lt;/td&gt; &#xA;   &lt;td&gt;Target Sum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Count set bits in an integer&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Find the two non-repeating elements in an array of repeating elements&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Count number of bits to be flipped to convert A to B&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Count total set bits in all numbers from 1 to n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Program to find whether a no is power of two&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Find position of the only set bit&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Copy set bits in a range&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Divide two integers without using multiplication, division and mod operator&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Calculate square of a number without using *, / and pow()&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bit Manipulation&lt;/td&gt; &#xA;   &lt;td&gt;Power Set&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;-&amp;gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Moore voting algorithm&lt;/td&gt; &#xA;   &lt;td&gt;Majority Element&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=n5QY3x_GNDg&#34;&gt;https://www.youtube.com/watch?v=n5QY3x_GNDg&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Moore voting algorithm&lt;/td&gt; &#xA;   &lt;td&gt;Majority Element II&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yDbkQd9t2ig&#34;&gt;https://www.youtube.com/watch?v=yDbkQd9t2ig&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice&#34;&gt;30 Days Interview Preparation Plan&lt;/a&gt;üéØ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;b&gt;&lt;/b&gt; Originally the below sheet was prepared by &lt;a href=&#34;https://www.youtube.com/c/takeUforward&#34;&gt;Raj Vikramaditya&lt;/a&gt; A.K.A &lt;a href=&#34;https://www.youtube.com/channel/UCvEKHATlVq84hm1jduTYm8g&#34;&gt;Striver&lt;/a&gt;. I have documented this sheet here in markdown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt; &lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;Day1: (Arrays)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Sort an array of 0‚Äôs 1‚Äôs 2‚Äôs without using extra space or sorting algo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Repeat and Missing Number&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Merge two sorted Arrays without extra space&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Kadane‚Äôs Algorithm&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Merge Overlapping Subintervals&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find the duplicate in an array of N+1 integers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day2: (Arrays)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set Matrix Zeros&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pascal Triangle&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next Permutation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inversion of Array (Using Merge Sort)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stock Buy and Sell&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ro tate Matrix&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day3: (Arrays/maths)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Search in a 2D matrix&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pow(X,n)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Majority Element (&amp;gt;N/2 times)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Majority Element (&amp;gt;N/3 times)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grid Unique Paths&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reverse Pairs (Leetcode)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go through Puzzles from GFG** (Search on own)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day4: (Hashing)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;2 Sum problem&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;4 Sum problem&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Longest Consecutive Sequence&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Largest Subarray with 0 sum&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Count number of subarrays with given XOR (this clearsa lot of problems)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Longest substring without repeat&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day5: (LinkedList)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Reverse a LinkedList&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find middle of LinkedList&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Merge two sorted Linked List&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove N-th node from back of LinkedList&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete a given Node when a node is given. (0(1) solution)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add two numbers as LinkedList&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day6:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Find intersection point of Y LinkedList&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detect a cycle in Linked List&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reverse a LinkedList in groups of size k&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check if a LinkedList is palindrome or not.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find the starting point of the Loop of LinkedList&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flattening of a LinkedList**&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rotate a LinkedList&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day7: (2-pointer)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone a Linked List with random and next pointer&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;3 sum&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Trapping rainwater&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove Duplicate from Sorted array&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Max consecutive ones&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day8: (Greedy)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;N meeting in one room&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Minimum number of platforms required for a railway&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Job sequencing Problem&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fractional Knapsack Problem&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Greedy algorithm to find minimum number of coins&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Activity Selection (it i&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;s same as N meeting in one room)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day9 (Recursion):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Subset Sums&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Subset-II&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Combination sum-&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Combination sum&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Palindrome Partitioning&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;K-th permutation Sequence&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day10: (Recursion and Backtracking)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Print all Permutations of a string/array&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;N queens Problem&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;SudokuSolver&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;M coloring Problem&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rat in a Maze&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;6.Word Break -&amp;gt; print all ways&lt;/p&gt; &#xA;&lt;p&gt;Day11 : (Binary Search)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;N-th root of an integer (use binary search) (square root, cube root, ..)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Matrix Median&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Find the element that appears once in sorted array, and rest element appears twice (Binary search)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Search element in a sorted and rotated array/ find pivot where it is rotated**&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Median of 2 sorted arrays&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;K-th element of two sorted arrays&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Allocate Minimum Number of Pages&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Aggressive Cows&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might ask)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check if a number if a power of 2 or not in O(1)&lt;/li&gt; &#xA; &lt;li&gt;Count total set bits&lt;/li&gt; &#xA; &lt;li&gt;Divide Integers without / operator&lt;/li&gt; &#xA; &lt;li&gt;Power Set (this is very important)&lt;/li&gt; &#xA; &lt;li&gt;Find MSB in o(1)&lt;/li&gt; &#xA; &lt;li&gt;Find square of a number without using multiplication or division operators.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day13: (Stack and Queue)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement Stack Using Arrays&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement Queue Using Arrays&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement Stack using Queue (using single queue)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement Queue using Stack (0(1) amortised method)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check for balanced parentheses&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Next Greater Element&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sort a Stack&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day14:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Next Smaller Element Similar to previous question next greater element, just do pop the greater elements out ..&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LRU cache (vvvv. imp)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LFU Cache (Hard, can be ignored)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;4.Largest rectangle in histogram (Do the one pass solution)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=X0X6G-eWgQ8&amp;amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;amp;index=&#34;&gt;Two pass&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jC_cWLy7jSI&amp;amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;amp;index=&#34;&gt;One pass&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Sliding Window maximum &lt;a href=&#34;https://www.youtube.com/watch?v=CZQGRp93K4k&amp;amp;list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&amp;amp;index=&#34;&gt;video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Implement Min Stack&lt;/li&gt; &#xA; &lt;li&gt;Rotten Orange (Using BFS)&lt;/li&gt; &#xA; &lt;li&gt;Stock Span Problem&lt;/li&gt; &#xA; &lt;li&gt;Find maximum of minimums of every window size 10.The Celebrity Problem&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day15: (String)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Reverse Words in a String&lt;/li&gt; &#xA; &lt;li&gt;Longest Palindrome in a string&lt;/li&gt; &#xA; &lt;li&gt;Roman Number to Integer and vice versa&lt;/li&gt; &#xA; &lt;li&gt;Implement ATOI/STRSTR&lt;/li&gt; &#xA; &lt;li&gt;Longest Common Prefix&lt;/li&gt; &#xA; &lt;li&gt;Rabin Karp&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day16: (String)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prefix Function/Z-Function&lt;/li&gt; &#xA; &lt;li&gt;KMP algo / LPS(pi) array&lt;/li&gt; &#xA; &lt;li&gt;Minimum characters needed to be inserted in the beginning to make it palindromic.&lt;/li&gt; &#xA; &lt;li&gt;Check for Anagrams&lt;/li&gt; &#xA; &lt;li&gt;Count and Say&lt;/li&gt; &#xA; &lt;li&gt;Compare version numbers&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day17: (Binary Tree)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Inorder Traversal (with recursion and without recursion)&lt;/li&gt; &#xA; &lt;li&gt;Preorder Traversal (with recursion and without recursion)&lt;/li&gt; &#xA; &lt;li&gt;Postorder Traversal (with recursion and without recursion)&lt;/li&gt; &#xA; &lt;li&gt;LeftView Of Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Bottom View of Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Top View of Binary Tree**&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day18: (Binary Tree)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Level order Traversal / Level order traversal in spiral form&lt;/li&gt; &#xA; &lt;li&gt;Height of a Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Diameter of Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Check if Binary tree is height balanced or not&lt;/li&gt; &#xA; &lt;li&gt;LCA in Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Check if two trees are identical or not**&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day 19: (Binary Tree)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Maximum path sum&lt;/li&gt; &#xA; &lt;li&gt;Construct Binary Tree from inorder and preorder&lt;/li&gt; &#xA; &lt;li&gt;Construct Binary Tree from Inorder and Postorder&lt;/li&gt; &#xA; &lt;li&gt;Symmetric Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Flatten Binary Tree to LinkedList&lt;/li&gt; &#xA; &lt;li&gt;Check if Binary Tree is mirror of itself or not&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day 20: (Binary Search Tree)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Populate Next Right pointers of Tree&lt;/li&gt; &#xA; &lt;li&gt;Search given Key in BST&lt;/li&gt; &#xA; &lt;li&gt;Construct BST from given keys.&lt;/li&gt; &#xA; &lt;li&gt;Check is a BT is BST or not&lt;/li&gt; &#xA; &lt;li&gt;Find LCA of two nodes in BST&lt;/li&gt; &#xA; &lt;li&gt;Find the inorder predecessor/successor of a given Key in BST.**&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day21: (BinarySearchTree)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Floor and Ceil in a BST&lt;/li&gt; &#xA; &lt;li&gt;Find K-th smallest and K-th largest element in BST (2 different Questions)&lt;/li&gt; &#xA; &lt;li&gt;Find a pair with a given sum in BST&lt;/li&gt; &#xA; &lt;li&gt;BST iterator&lt;/li&gt; &#xA; &lt;li&gt;Size of the largest BST in a Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Serialize and deserialize Binary Tree&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day22: (Mixed Questions)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Binary Tree to Double Linked List&lt;/li&gt; &#xA; &lt;li&gt;Find median in a stream of running integers.&lt;/li&gt; &#xA; &lt;li&gt;K-th largest element in a stream.&lt;/li&gt; &#xA; &lt;li&gt;Distinct numbers in Window.&lt;/li&gt; &#xA; &lt;li&gt;K-th largest element in an unsorted array.&lt;/li&gt; &#xA; &lt;li&gt;Flood-fill Algorithm&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day23: (Graph) &lt;a href=&#34;https://www.youtube.com/watch?v=LCrovIMurxY&amp;amp;list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&amp;amp;index=&#34;&gt;Theory&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone a graph (Not that easy as it looks)&lt;/li&gt; &#xA; &lt;li&gt;DFS&lt;/li&gt; &#xA; &lt;li&gt;BFS&lt;/li&gt; &#xA; &lt;li&gt;Detect A cycle in Undirected Graph/Directed Graph&lt;/li&gt; &#xA; &lt;li&gt;Topo Sort&lt;/li&gt; &#xA; &lt;li&gt;Number of islands (Do in Grid and Graph both)&lt;/li&gt; &#xA; &lt;li&gt;Bipartite Check&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day24: (Graph) &lt;a href=&#34;https://www.youtube.com/watch?v=LCrovIMurxY&amp;amp;list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&amp;amp;index=&#34;&gt;Theory&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;SCC(using KosaRaju‚Äôs algo)&lt;/li&gt; &#xA; &lt;li&gt;Djisktra‚Äôs Algorithm&lt;/li&gt; &#xA; &lt;li&gt;Bellman Ford Algo&lt;/li&gt; &#xA; &lt;li&gt;Floyd Warshall Algorithm&lt;/li&gt; &#xA; &lt;li&gt;MST using Prim‚Äôs Algo&lt;/li&gt; &#xA; &lt;li&gt;MST using Kruskal‚Äôs Algo&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day25: (Dynamic Programming)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Max Product Subarray&lt;/li&gt; &#xA; &lt;li&gt;Longest Increasing Subsequence&lt;/li&gt; &#xA; &lt;li&gt;Longest Common Subsequence&lt;/li&gt; &#xA; &lt;li&gt;0-1 Knapsack&lt;/li&gt; &#xA; &lt;li&gt;Edit Distance&lt;/li&gt; &#xA; &lt;li&gt;Maximum sum increasing subsequence&lt;/li&gt; &#xA; &lt;li&gt;Matrix Chain Multiplication&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day26: (DP)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find the maximum path)&lt;/li&gt; &#xA; &lt;li&gt;Coin change&lt;/li&gt; &#xA; &lt;li&gt;Subset Sum&lt;/li&gt; &#xA; &lt;li&gt;Rod Cutting&lt;/li&gt; &#xA; &lt;li&gt;Egg Dropping&lt;/li&gt; &#xA; &lt;li&gt;Word Break&lt;/li&gt; &#xA; &lt;li&gt;Palindrome Partitioning (MCM Variation)&lt;/li&gt; &#xA; &lt;li&gt;Maximum profit in Job scheduling &lt;a href=&#34;https://docs.google.com/document/d/1sQlRDw6--HwyxeFL7b4kBsOG-Tz7rXMbpWNnfvJErA4/edit&#34;&gt;For core revision&amp;lt;/&amp;gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day27:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Revise OS notes that you would have made during your sem&lt;/li&gt; &#xA; &lt;li&gt;If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day28:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Revise DBMS notes that you would have made during your semesters.&lt;/li&gt; &#xA; &lt;li&gt;If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day29:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Revise CN notes, that you would have made during your sem.&lt;/li&gt; &#xA; &lt;li&gt;If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Day30:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make a note of how will your represent your projects, and prepare all questions related to tech which you have used in your projects. Prepare a note which you can say for 3-10 minutes when he asks you that say something about the project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;System Design ‚Äì Conceptsüìö&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SamirPaul1/system-design-primer&#34;&gt;https://github.com/SamirPaul1/system-design-primer&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/systems-design-for-interviews/&#34;&gt;https://www.freecodecamp.org/news/systems-design-for-interviews/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/shashank88/system_design&#34;&gt;https://github.com/shashank88/system_design&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>Crypto-Cat/CTF</title>
    <updated>2022-10-22T01:35:55Z</updated>
    <id>tag:github.com,2022-10-22:/Crypto-Cat/CTF</id>
    <link href="https://github.com/Crypto-Cat/CTF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CTF chall write-ups, files, scripts etc (trying to be more organised LOL)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hacking Resources&lt;/h1&gt; &#xA;&lt;p&gt;CTF chall write-ups, files, scripts etc to go with my video walkthroughs &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/@_CryptoCat&#34;&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A challenge that takes 10 hours to solve, takes 10 minutes to explain :)&lt;/p&gt; &#xA;&lt;h1&gt;CTF&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ctftime.org&#34;&gt;CTFTime&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://overthewire.org/wargames&#34;&gt;OverTheWire&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://play.picoctf.org&#34;&gt;PicoCTF&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://imaginaryctf.org&#34;&gt;ImaginaryCTF&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://247ctf.com&#34;&gt;247CTF&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://ctfchallenge.com&#34;&gt;CTF Challenge&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://ctflearn.com&#34;&gt;CTF Learn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://cryptohack.org&#34;&gt;CryptoHack&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.hackthissite.org&#34;&gt;HackThisSite&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;http://smashthestack.org/wargames.html&#34;&gt;SmashTheStack&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://w3challs.com/challenges&#34;&gt;W3Challs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://ringzer0ctf.com/challenges&#34;&gt;Ringzer0CTF&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.enigmagroup.org&#34;&gt;Enigma Group&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.root-me.org&#34;&gt;Root Me&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pentesting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://app.hackthebox.eu&#34;&gt;HackTheBox&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://tryhackme.com&#34;&gt;TryHackMe&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.offensive-security.com/labs&#34;&gt;OffSec Proving Grounds&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://portswigger.net/web-security&#34;&gt;Web Security Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/digininja/DVWA&#34;&gt;Damn Vulnerable Web Application&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/juice-shop/juice-shop-ctf&#34;&gt;OWASP Juice Shop&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://ctf.hacker101.com&#34;&gt;Hacker 101&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://pentesterlab.com&#34;&gt;PentesterLab&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.vulnhub.com&#34;&gt;VulnHub&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.vulnmachines.com&#34;&gt;VulnMachines&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.hacking-lab.com/index.html&#34;&gt;HackingLab&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.cyberseclabs.co.uk&#34;&gt;CyberSecLabs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://hackxor.net&#34;&gt;HackXOR&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://hacktoria.com&#34;&gt;Hacktoria&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Pwn / RE&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://pwn.college&#34;&gt;Pwn.College&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://ropemporium.com&#34;&gt;ROP Emporium&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://exploit.education&#34;&gt;Exploit Education&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/shellphish/how2heap&#34;&gt;How2Heap&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://pwnable.tw/challenge&#34;&gt;Pwnables&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://deusx64.ai&#34;&gt;Deusx64&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://roppers.org/collections&#34;&gt;Roppers Academy&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://azeria-labs.com/writing-arm-assembly-part-1&#34;&gt;Azeria Labs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://challenges.re&#34;&gt;Reversing Challenges&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.begin.re&#34;&gt;Begin RE&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://crackmes.one&#34;&gt;CrackMes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Blue Team&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://letsdefend.io&#34;&gt;LetsDefend&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://blueteamlabs.online&#34;&gt;Blue Team Labs Online&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://cyberdefenders.org&#34;&gt;Cyber Defenders&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://attackdefense.com&#34;&gt;Attack Defense&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://dca.immersivelabs.online&#34;&gt;Immersive Labs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Videos&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLhixgUqwRTjxglIswKp9mpkfPNfHkzyeN&#34;&gt;LiveOverflow&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/JohnHammond010&#34;&gt;John Hammond&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA&#34;&gt;IppSec&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UClGm2C8Qi0_Wv68zfjCz2YA&#34;&gt;XCT&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/user/GynvaelEN&#34;&gt;Gynvael&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/ZetaTwo&#34;&gt;ZetaTwo&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCW6MNdOsqv2E9AjQkv9we7A&#34;&gt;PwnFunction&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UChO9OAH57Flz35RRX__E25A&#34;&gt;0xdf&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCtGLeKomT06x3xZ2SZp2l9Q&#34;&gt;247CTF&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCJf4-reOhoiAlScWC1WzLgQ&#34;&gt;MalFind&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/dayzerosec&#34;&gt;DayZeroSec&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/RanaKhalil101&#34;&gt;Rana Khalil&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCmXwpkCXmIKjoRLMsq9I3RA&#34;&gt;PinkDraconian&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCm2SwKmx3Ya1HG5RmHR7SCA&#34;&gt;Superhero1&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/AlexChaveriat&#34;&gt;S1lk&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCz-Z-d2VPQXHGkch0-_KovA&#34;&gt;Alh4zr3d&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/PawelLukasik&#34;&gt;Pawe≈Ç ≈Åukasik&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/BasteG0d69&#34;&gt;Ephemeral&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/hak5&#34;&gt;Hak5&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/c0nd4&#34;&gt;Conda&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/HackerSploit&#34;&gt;HackerSploit&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/codingo&#34;&gt;Condingo&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/InsiderPhD&#34;&gt;InsiderPhd&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/Hacksplained&#34;&gt;HackSplained&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/TheCyberMentor&#34;&gt;TheCyberMentor&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/stacksmashing&#34;&gt;StackSmashing&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/CybersecurityMeg&#34;&gt;Cybersecurity Meg&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/Tib3rius&#34;&gt;Tib3rius&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCx89Lz24SEPZpExl6OfQ0Gg&#34;&gt;SecAura&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/DarkSec&#34;&gt;DarkSec&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/HEXORCIST&#34;&gt;Hexorcist&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/pwncollege&#34;&gt;PwnCollege&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/Nahamsec&#34;&gt;NahamSec&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/optionalctf&#34;&gt;Optional&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/thehackerish&#34;&gt;TheHackerish&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/0xRy4n&#34;&gt;Ryan Gordon&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/AlmondForce&#34;&gt;AlmondForce&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/c/vulnmachines&#34;&gt;VulnMachines&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://securitycreators.video&#34;&gt;Others&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tools&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ghidra.re/CheatSheet.html&#34;&gt;Ghidra&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/volatilityfoundation/volatility/wiki/Linux&#34;&gt;Volatility&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/Gallopsled/pwntools-tutorial&#34;&gt;PwnTools&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef&#34;&gt;CyberChef&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.dcode.fr/en&#34;&gt;DCode&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.decompiler.com&#34;&gt;Decompile Code&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://tio.run&#34;&gt;Run Code&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://gtfobins.github.io&#34;&gt;GTFOBins&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.exploit-db.com&#34;&gt;ExploitDB&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://revshells.com&#34;&gt;RevShells&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;More Resources&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/disclose/bug-bounty-platforms&#34;&gt;Bug Bounty Platforms&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://book.hacktricks.xyz/pentesting-methodology&#34;&gt;HackTricks&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/apsdehal/awesome-ctf&#34;&gt;CTF Resources&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/CompassSecurity/security_resources&#34;&gt;Security Resources&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://www.hacker101.com/resources&#34;&gt;Bug Bounty Resources&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/seal9055/resources&#34;&gt;Seal9055 Resources&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://cugu.github.io/awesome-forensics&#34;&gt;Forensics&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://hshrzd.wordpress.com/how-to-start&#34;&gt;Learn RE&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://guyinatuxedo.github.io&#34;&gt;Learn BinExp&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://0xdf.gitlab.io&#34;&gt;HTB Writeups&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>geerlingguy/ansible-for-devops</title>
    <updated>2022-10-22T01:35:55Z</updated>
    <id>tag:github.com,2022-10-22:/geerlingguy/ansible-for-devops</id>
    <link href="https://github.com/geerlingguy/ansible-for-devops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ansible for DevOps examples.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ansible for DevOps Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/geerlingguy/ansible-for-devops/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/geerlingguy/ansible-for-devops/workflows/CI/badge.svg?event=push&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/geerlingguy/ansible-for-devops/actions?query=workflow%3A%22Molecule+CI%22&#34;&gt;&lt;img src=&#34;https://github.com/geerlingguy/ansible-for-devops/workflows/Molecule%20CI/badge.svg?event=push&#34; alt=&#34;Molecule CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains Ansible examples developed to support different sections of &lt;a href=&#34;https://www.ansiblefordevops.com/&#34;&gt;Ansible for DevOps&lt;/a&gt;, a book on &lt;a href=&#34;http://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; by &lt;a href=&#34;https://www.jeffgeerling.com/&#34;&gt;Jeff Geerling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most of the examples are full-fledged VM examples, which use Vagrant, VirtualBox, and Ansible to boot and configure VMs on your local workstation. Not all playbooks follow all of Ansible&#39;s best practices, as they illustrate particular Ansible features in an instructive manner.&lt;/p&gt; &#xA;&lt;p&gt;For more interesting examples of what you can do with Ansible, please see the &lt;a href=&#34;https://github.com/geerlingguy/ansible-vagrant-examples&#34;&gt;Ansible Vagrant Examples&lt;/a&gt; repository, and browse through some of &lt;a href=&#34;https://galaxy.ansible.com/geerlingguy/&#34;&gt;geerlingguy&#39;s roles on Ansible Galaxy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Chapters in which they&#39;re used&lt;/h2&gt; &#xA;&lt;p&gt;Here is an outline of all the examples contained in this repository, by chapter:&lt;/p&gt; &#xA;&lt;h3&gt;Chapter 1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;N/A&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 2&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/first-ansible-playbook/&#34;&gt;&lt;code&gt;first-ansible-playbook&lt;/code&gt;&lt;/a&gt;: A very basic playbook that installs &lt;code&gt;chronyd&lt;/code&gt; on CentOS and ensures it is running.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 3&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/orchestration/&#34;&gt;&lt;code&gt;orchestration&lt;/code&gt;&lt;/a&gt;: A simple multiple-VM Vagrant configuration and Ansible inventory to allow testing of multi-server orchestration with &lt;code&gt;ansible&lt;/code&gt; ad-hoc commands.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 4&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/drupal/&#34;&gt;&lt;code&gt;drupal&lt;/code&gt;&lt;/a&gt;: A single-file playbook which configures the LAMP stack on a Linux host and installs Drupal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/includes/&#34;&gt;&lt;code&gt;includes&lt;/code&gt;&lt;/a&gt;: The same playbook as the &lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/drupal/&#34;&gt;&lt;code&gt;drupal&lt;/code&gt;&lt;/a&gt; example, but using &lt;code&gt;include&lt;/code&gt;s to make the playbook more understandable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/nodejs/&#34;&gt;&lt;code&gt;nodejs&lt;/code&gt;&lt;/a&gt;: A single-file playbook which configures a Node.js app to run on a Linux host.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/solr/&#34;&gt;&lt;code&gt;solr&lt;/code&gt;&lt;/a&gt;: A single-file playbook which installs Apache Solr on a Linux host.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 5&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;N/A&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 6&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/nodejs-role/&#34;&gt;&lt;code&gt;nodejs-role&lt;/code&gt;&lt;/a&gt;: The same playbook as the &lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/nodejs/&#34;&gt;&lt;code&gt;nodejs&lt;/code&gt;&lt;/a&gt; example, but using a role to break out the Node.js aspects into a separate &lt;code&gt;nodejs&lt;/code&gt; role.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/galaxy-role-servers/&#34;&gt;&lt;code&gt;galaxy-role-servers&lt;/code&gt;&lt;/a&gt;: A couple very short playbooks that demonstrate how easy it is to get new servers running leveraging the power of community Ansible Galaxy roles.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 7&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/test-plugin/&#34;&gt;&lt;code&gt;test-plugin&lt;/code&gt;&lt;/a&gt;: A simple test plugin that verifies a given value is representative of the color blue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/collection/&#34;&gt;&lt;code&gt;collection&lt;/code&gt;&lt;/a&gt;: An example local collection to demonstrate the basic structure of content collections.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 8&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/dynamic-inventory/&#34;&gt;&lt;code&gt;dynamic-inventory&lt;/code&gt;&lt;/a&gt;: Two example dynamic inventory scripts (one in PHP, one in Python) for use with Ansible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 9&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/lamp-infrastructure/&#34;&gt;&lt;code&gt;lamp-infrastructure&lt;/code&gt;&lt;/a&gt;: A multi-server LAMP-based web application infrastructure focused on high-availability and performance for a LAMP-stack app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/elk/&#34;&gt;&lt;code&gt;elk&lt;/code&gt;&lt;/a&gt;: A two-server example of the Elasticsearch-Logstash-Kibana stack, which uses one server to store and visualize logs centrally, and another server to send logs via Filebeat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/gluster/&#34;&gt;&lt;code&gt;gluster&lt;/code&gt;&lt;/a&gt;: A two-server example of building a fast networked storage setup using Gluster.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 10&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/deployments/&#34;&gt;&lt;code&gt;deployments&lt;/code&gt;&lt;/a&gt;: A playbook that deploys a Ruby on Rails application into an environment that runs Passenger and Nginx to handle web requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/deployments-balancer/&#34;&gt;&lt;code&gt;deployments-balancer&lt;/code&gt;&lt;/a&gt;: A playbook that handles zero-downtime deployments to webservers running behind an HAProxy load balancer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/deployments-rolling/&#34;&gt;&lt;code&gt;deployments-rolling&lt;/code&gt;&lt;/a&gt;: A playbook that demonstrates rolling deployments to multiple servers for a Node.js app.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 11&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/security/&#34;&gt;&lt;code&gt;security&lt;/code&gt;&lt;/a&gt;: A playbook containing many security automation tasks to demonstrate how Ansible helps automate security hardening.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 12&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/jenkins/&#34;&gt;&lt;code&gt;jenkins&lt;/code&gt;&lt;/a&gt;: A playbook that installs and configures Jenkins for CI/CD.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 13&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/molecule/&#34;&gt;&lt;code&gt;molecule&lt;/code&gt;&lt;/a&gt;: A Molecule example used for testing and developing an Ansible playbook, or for testing in a Continuous Integration (CI) environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/.github/workflows/molecule-ci.yml&#34;&gt;&lt;code&gt;molecule-ci.yml&lt;/code&gt; GitHub Actions workflow&lt;/a&gt;: A GitHub Actions workflow which runs the &lt;code&gt;molecule&lt;/code&gt; example in a CI environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 14&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/https-self-signed/&#34;&gt;&lt;code&gt;https-self-signed&lt;/code&gt;&lt;/a&gt;: A playbook that generates self-signed certificates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/https-letsencrypt/&#34;&gt;&lt;code&gt;https-letsencrypt&lt;/code&gt;&lt;/a&gt;: A playbook that demonstrates automated certificate management with Let&#39;s Encrypt and Ansible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/https-nginx-proxy/&#34;&gt;&lt;code&gt;https-nginx-proxy&lt;/code&gt;&lt;/a&gt;: A playbook that demonstrates proxying HTTPS traffic through Nginx to HTTP backends.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 15&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/docker/&#34;&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt;: Very simple playbook demonstrating Ansible&#39;s ability to manage Docker container images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/docker-hubot/&#34;&gt;&lt;code&gt;docker-hubot&lt;/code&gt;&lt;/a&gt;: Slightly more involved example of Ansible&#39;s ability to manage and run Docker container images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/docker-flask/&#34;&gt;&lt;code&gt;docker-flask&lt;/code&gt;&lt;/a&gt;: A sample Flask app built with Ansible playbooks running inside the container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chapter 16&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/geerlingguy/ansible-for-devops/master/kubernetes/&#34;&gt;&lt;code&gt;kubernetes&lt;/code&gt;&lt;/a&gt;: A playbook that builds a three-node Kubernetes cluster.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinypilotkvm.com&#34;&gt;TinyPilot&lt;/a&gt;: An open-source, low-cost KVM over IP for managing your servers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The above sponsor(s) are supporting Jeff Geerling on &lt;a href=&#34;https://github.com/sponsors/geerlingguy&#34;&gt;GitHub Sponsors&lt;/a&gt;. You can sponsor Jeff&#39;s work too, to help him continue improving this book and Ansible open source work!&lt;/p&gt; &#xA;&lt;h2&gt;Buy the Book&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.ansiblefordevops.com/&#34;&gt;&lt;img src=&#34;https://s3.amazonaws.com/titlepages.leanpub.com/ansible-for-devops/medium&#34; alt=&#34;Ansible for DevOps Cover&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Buy &lt;a href=&#34;https://www.ansiblefordevops.com/&#34;&gt;Ansible for DevOps&lt;/a&gt; for your e-reader or in paperback format.&lt;/p&gt;</summary>
  </entry>
</feed>