<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-11T01:32:01Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openairplay/airplay2-receiver</title>
    <updated>2022-08-11T01:32:01Z</updated>
    <id>tag:github.com,2022-08-11:/openairplay/airplay2-receiver</id>
    <link href="https://github.com/openairplay/airplay2-receiver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AirPlay 2 Receiver - Python implementation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Experimental&lt;/h1&gt; &#xA;&lt;p&gt;Somewhat comprehensive python implementation of AP2 receiver using &lt;strong&gt;some multi-room&lt;/strong&gt; features. For now it implements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HomeKit transient pairing (SRP/Curve25519/ChaCha20-Poly1305) - bit flag 48&lt;/li&gt; &#xA; &lt;li&gt;HomeKit non-transient pairing&lt;/li&gt; &#xA; &lt;li&gt;Some refinements for HomeKit interaction (e.g. managed/active flags)&lt;/li&gt; &#xA; &lt;li&gt;Persist device name and some HomeKit properties across restarts (just use the -m flag again to set the device name anew)&lt;/li&gt; &#xA; &lt;li&gt;FairPlay (v3) authentication and decryption of AES keys - the first and only Python implementation. Credit to @systemcrash for implementation.&lt;/li&gt; &#xA; &lt;li&gt;Receiving of both REALTIME and BUFFERED Airplay2 audio streams&lt;/li&gt; &#xA; &lt;li&gt;Airplay2 Service publication&lt;/li&gt; &#xA; &lt;li&gt;Decoding of all Airplay2 supported CODECs: ALAC, AAC, OPUS, PCM. Ref: &lt;a href=&#34;https://emanuelecozzi.net/docs/airplay2/audio/&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://emanuelecozzi.net/docs/airplay2/rtsp/#setup&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Output latency compensation for sync with other Airplay receivers&lt;/li&gt; &#xA; &lt;li&gt;ANNOUNCE and RSA AES for unbuffered streaming from iTunes/Windows&lt;/li&gt; &#xA; &lt;li&gt;Spotify (via AirPlay2) and other live media streams with AES keys.&lt;/li&gt; &#xA; &lt;li&gt;RTCP&lt;/li&gt; &#xA; &lt;li&gt;RFC2198 RTP Redundancy handling (basic); enable bit flag 61&lt;/li&gt; &#xA; &lt;li&gt;streamConnections; enable bit flag 59&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For now it does not implement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FairPlay v2&lt;/li&gt; &#xA; &lt;li&gt;Accurate audio sync (with help of PTP and/or NTP)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It may never implement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MFi Authentication (requires MFi hardware module)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;This code is experimental, yet fully functional. It can act as a real receiver but does not implement all airplay protocols and related pairing/authentication methods.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PTP (Precision Time Protocol)&lt;/li&gt; &#xA; &lt;li&gt;Remove all os specific code (Soft Volume management)&lt;/li&gt; &#xA; &lt;li&gt;Sender (branch-sender) - Implementation&lt;/li&gt; &#xA; &lt;li&gt;Raspbian package&lt;/li&gt; &#xA; &lt;li&gt;DACP/(+MRP?) Support&lt;/li&gt; &#xA; &lt;li&gt;FairPlay v2 Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Multiple Connections&lt;/h2&gt; &#xA;&lt;p&gt;Since multithreading is now enabled, this allows multiple concurrent connections. There are no safeguards built to prevent you playing multiple streams. Python multiprocessing makes this &#34;DJ&#34; mode a possibility but makes stream management and session management (global state data) nigh impossible. So threading is the right approach in the receiver.&lt;/p&gt; &#xA;&lt;p&gt;HomeKit and other AP senders can now connect concurrently to the receiver and perform operations. This opens the path to Remote Control functionality.&lt;/p&gt; &#xA;&lt;h2&gt;mDNS/ZeroConf&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter strange errors like NonUniqueNameException, or Address already in use, and you run on macOS, you may have noticed that macOS and this app both try to send updates. &lt;a href=&#34;https://github.com/jstasiak/python-zeroconf/issues/967#issuecomment-949110570&#34;&gt;Here is a possible workaround&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Raspberry Pi 4&lt;/h2&gt; &#xA;&lt;p&gt;Install docker and then build the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;docker build -f docker/Dockerfile -t ap2-receiver .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the receiver:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;docker run -it --rm --device /dev/snd --net host --volume `pwd`/pairings/:/airplay2/pairings/ ap2-receiver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default network device is wlan0, you can change this with AP2IFACE env variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;docker run -it --rm --device /dev/snd --env AP2IFACE=eth0 --net host ap2-receiver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Compose&lt;/h2&gt; &#xA;&lt;p&gt;Example Docker Compose&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;docker-compose -f docker/docker-compose.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debian&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;sudo apt install -y libavformat-dev libavcodec-dev libavdevice-dev libavutil-dev libswscale-dev libswresample-dev libavfilter-dev portaudio19-dev python3 python3-pip python3-pyaudio build-essential pkg-config git alsa-utils&#xA;git clone https://github.com/openairplay/airplay2-receiver.git&#xA;cd airplay2-receiver/&#xA;pip3 install virtualenv&#xA;virtualenv airplay2-receiver&#xA;cd airplay2-receiver/&#xA;pip3 install -r requirements.txt&#xA;pip3 install pyaudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;macOS Catalina&lt;/h2&gt; &#xA;&lt;p&gt;To run the receiver please use Python 3 and do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the following commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;brew install python3&#xA;brew install portaudio&#xA;virtualenv -p /usr/local/bin/python3 proto&#xA;source proto/bin/activate&#xA;pip install -r requirements.txt&#xA;pip install --global-option=build_ext --global-option=&#34;-I/usr/local/Cellar/portaudio/19.6.0/include&#34; --global-option=&#34;-L/usr/local/Cellar/portaudio/19.6.0/lib&#34; pyaudio&#xA;&#xA;&#xA;python ap2-receiver.py -m myap2 --netiface=en0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;p&gt;To run the receiver please use Python 3 and do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the following commands&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;cd [WHERE_YOU_CLONED_AIRPLAY2_RECEIVER]&#xA;virtualenv ap2env&#xA;.\ap2env\Scripts\activate&#xA;pip install -r requirements.txt&#xA;pip install pipwin pycaw&#xA;pipwin install pyaudio&#xA;&#xA;python ap2-receiver.py -m myap2 -n [YOUR_INTERFACE_GUID] (looks like this for instance {02681AC0-AD52-4E15-9BD6-8C6A08C4F836} )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the AirPlay 2 receiver is announced as &lt;strong&gt;myap2&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Tested on Python 3.7.5 / macOS 10.15.2 with iPhone X 13.3 and Raspberry Pi 4&lt;/p&gt; &#xA;&lt;h3&gt;Protocol notes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://emanuelecozzi.net/docs/airplay2&#34;&gt;https://emanuelecozzi.net/docs/airplay2&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shmilylty/OneForAll</title>
    <updated>2022-08-11T01:32:01Z</updated>
    <id>tag:github.com,2022-08-11:/shmilylty/OneForAll</id>
    <link href="https://github.com/shmilylty/OneForAll" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OneForAll是一款功能强大的子域收集工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OneForAll&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/shmilylty/OneForAll&#34;&gt;&lt;img src=&#34;https://travis-ci.org/shmilylty/OneForAll.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/shmilylty/OneForAll&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/shmilylty/OneForAll/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/shmilylty/OneForAll/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/1287668a6b4c72af683e/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/shmilylty/OneForAll&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.6+-blue&#34; alt=&#34;python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shmilylty/OneForAll/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/release-v0.4.5-brightgreen&#34; alt=&#34;python&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;👊&lt;strong&gt;OneForAll是一款功能强大的子域收集工具&lt;/strong&gt; 📝&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/en-us/README.md&#34;&gt;English Document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/docs/usage_example.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀上手指南&lt;/h2&gt; &#xA;&lt;p&gt;📢 请务必花一点时间阅读此文档，有助于你快速熟悉OneForAll！&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🐍安装要求&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;OneForAll基于&lt;a href=&#34;https://www.python.org/downloads/release/python-360/&#34;&gt;Python 3.6.0&lt;/a&gt;开发和测试，OneForAll需要高于Python 3.6.0的版本才能运行。 安装Python环境可以参考&lt;a href=&#34;https://pythonguidecn.readthedocs.io/zh/latest/starting/installation.html#python-3&#34;&gt;Python 3 安装指南&lt;/a&gt;。运行以下命令检查Python和pip3版本：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -V&#xA;pip3 -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;如果你看到类似以下的输出便说明Python环境没有问题：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Python 3.6.0&#xA;pip 19.2.2 from C:\Users\shmilylty\AppData\Roaming\Python\Python36\site-packages\pip (python 3.6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;✔安装步骤（git 版）&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;下载&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;由于该项目&lt;strong&gt;处于开发中&lt;/strong&gt;，会不断进行更新迭代，下载时请使用&lt;code&gt;git clone&lt;/code&gt;&lt;strong&gt;克隆&lt;/strong&gt;最新代码仓库，也方便后续的更新，不推荐从Releases下载，因为Releases里版本更新缓慢，也不方便更新， 本项目已经在&lt;a href=&#34;https://gitee.com/shmilylty/OneForAll.git&#34;&gt;码云&lt;/a&gt;(Gitee)镜像了一份，国内推荐使用码云进行克隆比较快：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://gitee.com/shmilylty/OneForAll.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;或者：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/shmilylty/OneForAll.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;你可以通过pip3安装OneForAll的依赖，以下为&lt;strong&gt;Windows系统&lt;/strong&gt;下使用&lt;strong&gt;pip3&lt;/strong&gt;安装依赖的示例：注意：如果你的Python3安装在系统Program Files目录下，如：&lt;code&gt;C:\Program Files\Python36&lt;/code&gt;，那么请以管理员身份运行命令提示符cmd执行以下命令！&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd OneForAll/&#xA;python3 -m pip install -U pip setuptools wheel -i https://mirrors.aliyun.com/pypi/simple/&#xA;pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/&#xA;python3 oneforall.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;其他系统平台的请参考&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/installation_dependency.md&#34;&gt;依赖安装&lt;/a&gt;，如果在安装依赖过程中发现编译某个依赖库失败时可以参考&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/troubleshooting.md&#34;&gt;常见问题与回答.md&lt;/a&gt;文档中解决方法，如果依然不能解决欢迎加群反馈问题。&lt;/p&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;&lt;strong&gt;更新&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;执行以下命令&lt;strong&gt;更新&lt;/strong&gt;项目（可保存对&lt;code&gt;/config/setting.py&lt;/code&gt;和&lt;code&gt;/config/api.py&lt;/code&gt;的修改）：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git stash        # 暂存本地的修改&#xA;git fetch --all  # 拉取项目更新&#xA;git pull         # 下载覆盖&#xA;git stash pop    # 释放本地修改&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;✔安装步骤（docker 版）&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;首先下载并编辑配置文件，添加自己的&lt;code&gt;api&lt;/code&gt;和个性化设置，并保留原始文件结构&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;config&#xA;├── api.py&#xA;├── log.py&#xA;└── setting.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;拉取镜像并执行，其中&lt;code&gt;~/.config&lt;/code&gt;替换为你自己配置文件所在文件夹的路径&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull shmilylty/oneforall&#xA;docker run -it --rm -v ~/results:/OneForAll/results -v ~/.config:/OneForAll/config shmilylty/oneforall --target example.com run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;参数直接加在指令末尾，结果会输出在本地目录&lt;code&gt;~/results&lt;/code&gt;，如需保存到其他位置，可以自行修改&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;✨使用演示&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;如果你是通过pip3安装的依赖则使用以下命令运行示例：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 oneforall.py --target example.com run&#xA;python3 oneforall.py --targets ./example.txt run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/docs/usage_example.svg?sanitize=true&#34; alt=&#34;Example&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🧐结果说明&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;我们以&lt;code&gt;python3 oneforall.py --target example.com run&lt;/code&gt;命令为例，OneForAll在默认参数正常执行完毕会在results目录生成相应结果：&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/images/Result.png&#34; alt=&#34;Result&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;example.com.csv&lt;/code&gt;是每个主域下的子域收集结果。&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;all_subdomain_result_1583034493.csv&lt;/code&gt;是每次运行OneForAll收集到子域的汇总结果，包含&lt;code&gt;example.com.csv&lt;/code&gt;，方便在批量收集场景中获取全部结果。&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;result.sqlite3&lt;/code&gt;是存放每次运行OneForAll收集到子域的SQLite3结果数据库，其数据库结构如下图：&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/images/Database.png&#34; alt=&#34;Database&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_origin_result&lt;/code&gt;表存放每个模块最初子域收集结果。&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_resolve_result&lt;/code&gt;表存放对子域进行解析后的结果。&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_last_result&lt;/code&gt;表存放上一次子域收集结果（需要收集两次以上才会生成）。&lt;/p&gt; &#xA; &lt;p&gt;其中类似&lt;code&gt;example_com_now_result&lt;/code&gt;表存放现在子域收集结果，一般情况关注这张表就可以了。&lt;/p&gt; &#xA; &lt;p&gt;更多信息请参阅&lt;a href=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/docs/field.md&#34;&gt;字段解释说明&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;🤔使用帮助&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;命令行参数只提供了一些常用参数，更多详细的参数配置请见&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/config/setting.py&#34;&gt;setting.py&lt;/a&gt;，如果你认为有些参数是命令界面经常使用到的或缺少了什么参数等问题非常欢迎反馈。由于众所周知的原因，如果要使用一些被墙的收集接口请先到&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/config/setting.py&#34;&gt;setting.py&lt;/a&gt;配置代理，有些收集模块需要提供API（大多都是可以注册账号免费获取），如果需要使用请到&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/config/api.py&#34;&gt;api.py&lt;/a&gt;配置API信息，如果不使用请忽略有关报错提示。（详细模块请阅读&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/collection_modules.md&#34;&gt;收集模块说明&lt;/a&gt;）&lt;/p&gt; &#xA; &lt;p&gt;OneForAll命令行界面基于&lt;a href=&#34;https://github.com/google/python-fire/&#34;&gt;Fire&lt;/a&gt;实现，有关Fire更高级使用方法请参阅&lt;a href=&#34;https://github.com/google/python-fire/raw/master/docs/using-cli.md&#34;&gt;使用Fire CLI&lt;/a&gt;。&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/oneforall.py&#34;&gt;oneforall.py&lt;/a&gt;是主程序入口，oneforall.py可以调用&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/brute.py&#34;&gt;brute.py&lt;/a&gt;，&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/takerover.py&#34;&gt;takerover.py&lt;/a&gt;及&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/dbexport.py&#34;&gt;dbexport.py&lt;/a&gt;等模块，为了方便进行子域爆破独立出了brute.py，为了方便进行子域接管风险检查独立出了takerover.py，为了方便数据库导出独立出了dbexport.py，这些模块都可以单独运行，并且所接受参数要更丰富一点，如果要单独使用这些模块请参考&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/usage_help.md&#34;&gt;使用帮助&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;❗注意：当你在使用过程中遇到一些问题或者疑惑时，请先到&lt;a href=&#34;https://github.com/shmilylty/OneForAll/issues&#34;&gt;Issues&lt;/a&gt;里使用搜索找找答案，还可以参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/troubleshooting.md&#34;&gt;常见问题与回答&lt;/a&gt;。&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;oneforall.py使用帮助&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;以下帮助信息可能不是最新的，你可以使用&lt;code&gt;python oneforall.py --help&lt;/code&gt;获取最新的帮助信息。&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python oneforall.py --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NAME&#xA;    oneforall.py - OneForAll帮助信息&#xA;&#xA;SYNOPSIS&#xA;    oneforall.py COMMAND | --target=TARGET &amp;lt;flags&amp;gt;&#xA;&#xA;DESCRIPTION&#xA;    OneForAll是一款功能强大的子域收集工具&#xA;&#xA;    Example:&#xA;        python3 oneforall.py version&#xA;        python3 oneforall.py --target example.com run&#xA;        python3 oneforall.py --targets ./domains.txt run&#xA;        python3 oneforall.py --target example.com --valid None run&#xA;        python3 oneforall.py --target example.com --brute True run&#xA;        python3 oneforall.py --target example.com --port small run&#xA;        python3 oneforall.py --target example.com --fmt csv run&#xA;        python3 oneforall.py --target example.com --dns False run&#xA;        python3 oneforall.py --target example.com --req False run&#xA;        python3 oneforall.py --target example.com --takeover False run&#xA;        python3 oneforall.py --target example.com --show True run&#xA;&#xA;    Note:&#xA;        参数alive可选值True，False分别表示导出存活，全部子域结果&#xA;        参数port可选值有&#39;default&#39;, &#39;small&#39;, &#39;large&#39;, 详见config.py配置&#xA;        参数fmt可选格式有 &#39;csv&#39;,&#39;json&#39;&#xA;        参数path默认None使用OneForAll结果目录生成路径&#xA;&#xA;ARGUMENTS&#xA;    TARGET&#xA;        单个域名(二选一必需参数)&#xA;    TARGETS&#xA;        每行一个域名的文件路径(二选一必需参数)&#xA;&#xA;FLAGS&#xA;    --brute=BRUTE&#xA;        s&#xA;    --dns=DNS&#xA;        DNS解析子域(默认True)&#xA;    --req=REQ&#xA;        HTTP请求子域(默认True)&#xA;    --port=PORT&#xA;        请求验证子域的端口范围(默认只探测80端口)&#xA;    --valid=VALID&#xA;        只导出存活的子域结果(默认False)&#xA;    --fmt=FMT&#xA;        结果保存格式(默认csv)&#xA;    --path=PATH&#xA;        结果保存路径(默认None)&#xA;    --takeover=TAKEOVER&#xA;        检查子域接管(默认False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🎉项目简介&lt;/h2&gt; &#xA;&lt;p&gt;项目地址：&lt;a href=&#34;https://github.com/shmilylty/OneForAll&#34;&gt;https://github.com/shmilylty/OneForAll&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;在渗透测试中信息收集的重要性不言而喻，子域收集是信息收集中必不可少且非常重要的一环，目前网上也开源了许多子域收集的工具，但是总是存在以下部分问题：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;不够强大&lt;/strong&gt;，子域收集的接口不够多，不能做到对批量子域自动收集，没有自动子域解析，验证，FUZZ以及信息拓展等功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;不够友好&lt;/strong&gt;，固然命令行模块比较方便，但是当可选的参数很多，要实现的操作复杂，用命令行模式就有点不够友好，如果有交互良好，高可操作的前端那么使用体验就会好很多。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;缺少维护&lt;/strong&gt;，很多工具几年没有更新过一次，issues和PR是啥，不存在的。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;效率问题&lt;/strong&gt;，没有利用多进程，多线程以及异步协程技术，速度较慢。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;为了解决以上痛点，此项目应用而生，正如其名，我希望OneForAll是一款集百家之长，功能强大的全面快速子域收集终极神器🔨。&lt;/p&gt; &#xA;&lt;p&gt;目前OneForAll还在开发中，肯定有不少问题和需要改进的地方，欢迎大佬们提交&lt;a href=&#34;https://github.com/shmilylty/OneForAll/issues&#34;&gt;Issues&lt;/a&gt;和&lt;a href=&#34;https://github.com/shmilylty/OneForAll/pulls&#34;&gt;PR&lt;/a&gt;，用着还行给个小星星✨吧，目前有一个专门用于OneForAll交流和反馈QQ群👨‍👨‍👦‍👦：:&lt;a href=&#34;https://raw.githubusercontent.com/shang.qq.com/wpa/qunwpa?idkey=125d3689b60445cdbb11e4ddff38036b7f6f2abbf4f7957df5dddba81aa90771&#34;&gt;&lt;strong&gt;824414244&lt;/strong&gt;&lt;/a&gt;（加群验证：信息收集）。&lt;/p&gt; &#xA;&lt;h2&gt;👍功能特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;收集能力强大&lt;/strong&gt;，详细模块请阅读&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/collection_modules.md&#34;&gt;收集模块说明&lt;/a&gt;。 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;利用证书透明度收集子域（目前有6个模块：&lt;code&gt;censys_api&lt;/code&gt;，&lt;code&gt;certspotter&lt;/code&gt;，&lt;code&gt;crtsh&lt;/code&gt;，&lt;code&gt;entrust&lt;/code&gt;，&lt;code&gt;google&lt;/code&gt;，&lt;code&gt;spyse_api&lt;/code&gt;）&lt;/li&gt; &#xA;   &lt;li&gt;常规检查收集子域（目前有4个模块：域传送漏洞利用&lt;code&gt;axfr&lt;/code&gt;，检查跨域策略文件&lt;code&gt;cdx&lt;/code&gt;，检查HTTPS证书&lt;code&gt;cert&lt;/code&gt;，检查内容安全策略&lt;code&gt;csp&lt;/code&gt;，检查robots文件&lt;code&gt;robots&lt;/code&gt;，检查sitemap文件&lt;code&gt;sitemap&lt;/code&gt;，利用NSEC记录遍历DNS域&lt;code&gt;dnssec&lt;/code&gt;，后续会添加NSEC3记录等模块）&lt;/li&gt; &#xA;   &lt;li&gt;利用网上爬虫档案收集子域（目前有2个模块：&lt;code&gt;archivecrawl&lt;/code&gt;，&lt;code&gt;commoncrawl&lt;/code&gt;，此模块还在调试，该模块还有待添加和完善）&lt;/li&gt; &#xA;   &lt;li&gt;利用DNS数据集收集子域（目前有24个模块：&lt;code&gt;binaryedge_api&lt;/code&gt;, &lt;code&gt;bufferover&lt;/code&gt;, &lt;code&gt;cebaidu&lt;/code&gt;, &lt;code&gt;chinaz&lt;/code&gt;, &lt;code&gt;chinaz_api&lt;/code&gt;, &lt;code&gt;circl_api&lt;/code&gt;, &lt;code&gt;cloudflare&lt;/code&gt;, &lt;code&gt;dnsdb_api&lt;/code&gt;, &lt;code&gt;dnsdumpster&lt;/code&gt;, &lt;code&gt;hackertarget&lt;/code&gt;, &lt;code&gt;ip138&lt;/code&gt;, &lt;code&gt;ipv4info_api&lt;/code&gt;, &lt;code&gt;netcraft&lt;/code&gt;, &lt;code&gt;passivedns_api&lt;/code&gt;, &lt;code&gt;ptrarchive&lt;/code&gt;, &lt;code&gt;qianxun&lt;/code&gt;, &lt;code&gt;rapiddns&lt;/code&gt;, &lt;code&gt;riddler&lt;/code&gt;, &lt;code&gt;robtex&lt;/code&gt;, &lt;code&gt;securitytrails_api&lt;/code&gt;, &lt;code&gt;sitedossier&lt;/code&gt;, &lt;code&gt;threatcrowd&lt;/code&gt;, &lt;code&gt;wzpc&lt;/code&gt;, &lt;code&gt;ximcx&lt;/code&gt;）&lt;/li&gt; &#xA;   &lt;li&gt;利用DNS查询收集子域（目前有5个模块：通过枚举常见的SRV记录并做查询来收集子域&lt;code&gt;srv&lt;/code&gt;，以及通过查询域名的DNS记录中的MX,NS,SOA,TXT记录来收集子域）&lt;/li&gt; &#xA;   &lt;li&gt;利用威胁情报平台数据收集子域（目前有6个模块：&lt;code&gt;alienvault&lt;/code&gt;, &lt;code&gt;riskiq_api&lt;/code&gt;，&lt;code&gt;threatbook_api&lt;/code&gt;，&lt;code&gt;threatminer&lt;/code&gt;，&lt;code&gt;virustotal&lt;/code&gt;，&lt;code&gt;virustotal_api&lt;/code&gt;该模块还有待添加和完善）&lt;/li&gt; &#xA;   &lt;li&gt;利用搜索引擎发现子域（目前有18个模块：&lt;code&gt;ask&lt;/code&gt;, &lt;code&gt;baidu&lt;/code&gt;, &lt;code&gt;bing&lt;/code&gt;, &lt;code&gt;bing_api&lt;/code&gt;, &lt;code&gt;duckduckgo&lt;/code&gt;, &lt;code&gt;exalead&lt;/code&gt;, &lt;code&gt;fofa_api&lt;/code&gt;, &lt;code&gt;gitee&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;github_api&lt;/code&gt;, &lt;code&gt;google&lt;/code&gt;, &lt;code&gt;google_api&lt;/code&gt;, &lt;code&gt;shodan_api&lt;/code&gt;, &lt;code&gt;so&lt;/code&gt;, &lt;code&gt;sogou&lt;/code&gt;, &lt;code&gt;yahoo&lt;/code&gt;, &lt;code&gt;yandex&lt;/code&gt;, &lt;code&gt;zoomeye_api&lt;/code&gt;），在搜索模块中除特殊搜索引擎，通用的搜索引擎都支持自动排除搜索，全量搜索，递归搜索。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域爆破&lt;/strong&gt;，该模块有常规的字典爆破，也有自定义的fuzz模式，支持批量爆破和递归爆破，自动判断泛解析并处理。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域验证&lt;/strong&gt;，默认开启子域验证，自动解析子域DNS，自动请求子域获取title和banner，并综合判断子域存活情况。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域爬取&lt;/strong&gt;，根据已有的子域，请求子域响应体以及响应体里的JS，从中再次发现新的子域。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域置换&lt;/strong&gt;，根据已有的子域，使用子域替换技术再次发现新的子域。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;支持子域接管&lt;/strong&gt;，默认开启子域接管风险检查，支持子域自动接管（目前只有Github，有待完善），支持批量检查。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;处理功能强大&lt;/strong&gt;，发现的子域结果支持自动去除，自动DNS解析，HTTP请求探测，自动筛选出有效子域，拓展子域的Banner信息，最终支持的导出格式有&lt;code&gt;txt&lt;/code&gt;, &lt;code&gt;csv&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;速度极快&lt;/strong&gt;，&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/collect.py&#34;&gt;收集模块&lt;/a&gt;使用多线程调用，&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/brute.py&#34;&gt;爆破模块&lt;/a&gt;使用&lt;a href=&#34;https://github.com/blechschmidt/massdns&#34;&gt;massdns&lt;/a&gt;，DNS解析速度每秒可解析350000以上个域名，子域验证中DNS解析和HTTP请求使用异步多协程，多线程检查&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/takeover.py&#34;&gt;子域接管&lt;/a&gt;风险。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;体验良好&lt;/strong&gt;，各模块都有进度条，异步保存各模块结果。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果你有其他很棒的想法请务必告诉我！😎&lt;/p&gt; &#xA;&lt;h2&gt;🌲目录结构&lt;/h2&gt; &#xA;&lt;p&gt;更多信息请参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/directory_structure.md&#34;&gt;目录结构说明&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;本项目&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/&#34;&gt;docs&lt;/a&gt;目录下还提供了一些帮助与说明，如&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/dictionary_source.md&#34;&gt;子域字典来源说明&lt;/a&gt;、&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/wildcard_judgment.png&#34;&gt;泛解析判断流程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;👏用到框架&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aio-libs/aiohttp&#34;&gt;aiohttp&lt;/a&gt; - 异步http客户端/服务器框架&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/beautifulsoup4/&#34;&gt;beautifulsoup4&lt;/a&gt; - 可以轻松从HTML或XML文件中提取数据的Python库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/python-fire&#34;&gt;fire&lt;/a&gt; - Python Fire是一个纯粹根据任何Python对象自动生成命令行界面（CLI）的库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Delgan/loguru&#34;&gt;loguru&lt;/a&gt; - 旨在带来愉快的日志记录Python库&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blechschmidt/massdns&#34;&gt;massdns&lt;/a&gt; - 高性能的DNS解析器&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kennethreitz/records&#34;&gt;records&lt;/a&gt; - Records是一个非常简单但功能强大的库，用于对大多数关系数据库进行最原始SQL查询。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psf/requests&#34;&gt;requests&lt;/a&gt; - Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tqdm/tqdm&#34;&gt;tqdm&lt;/a&gt; - 适用于Python和CLI的快速，可扩展的进度条库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;感谢这些伟大优秀的Python库！&lt;/p&gt; &#xA;&lt;h2&gt;🔖版本控制&lt;/h2&gt; &#xA;&lt;p&gt;该项目使用&lt;a href=&#34;https://semver.org/&#34;&gt;SemVer&lt;/a&gt;语言化版本格式进行版本管理，你可以参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/changes.md&#34;&gt;变更记录说明&lt;/a&gt;了解历史变更情况。&lt;/p&gt; &#xA;&lt;h2&gt;⌛后续计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 各模块持续优化和完善&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 操作强大交互人性的前端界面实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多信息请参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/todo.md&#34;&gt;后续开发计划&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;🙏贡献&lt;/h2&gt; &#xA;&lt;p&gt;非常热烈欢迎各位大佬一起完善本项目！&lt;/p&gt; &#xA;&lt;h2&gt;👨‍💻贡献者&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/shmilylty&#34;&gt;Jing Ling&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;核心开发&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;你可以在&lt;a href=&#34;https://github.com/shmilylty/OneForAll/tree/master/docs/contributors.md&#34;&gt;贡献者文档&lt;/a&gt;中查看所有贡献者以及他们所做出的贡献，感谢他们让OneForAll变得更强大好用。&lt;/p&gt; &#xA;&lt;h2&gt;☕赞赏&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得这个项目帮助到了你，你可以打赏一杯咖啡以资鼓励:)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shmilylty/OneForAll/master/images/Donate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📄版权&lt;/h2&gt; &#xA;&lt;p&gt;该项目签署了GPL-3.0授权许可，详情请参阅&lt;a href=&#34;https://github.com/shmilylty/OneForAll/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;😘鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢网上开源的各个子域收集项目！&lt;/p&gt; &#xA;&lt;p&gt;感谢&lt;a href=&#34;https://github.com/QAX-A-Team&#34;&gt;A-Team&lt;/a&gt;大哥们热情无私的问题解答！&lt;/p&gt; &#xA;&lt;h2&gt;📜免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本工具仅能在取得足够合法授权的企业安全建设中使用，在使用本工具过程中，您应确保自己所有行为符合当地的法律法规。 如您在使用本工具的过程中存在任何非法行为，您将自行承担所有后果，本工具所有开发者和所有贡献者不承担任何法律及连带责任。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要安装并使用本工具。 您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。&lt;/p&gt; &#xA;&lt;h2&gt;💖Star趋势&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/shmilylty/OneForAll&#34;&gt;&lt;img src=&#34;https://starchart.cc/shmilylty/OneForAll.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LinkedInLearning/learning-python-2896241</title>
    <updated>2022-08-11T01:32:01Z</updated>
    <id>tag:github.com,2022-08-11:/LinkedInLearning/learning-python-2896241</id>
    <link href="https://github.com/LinkedInLearning/learning-python-2896241" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is for the Linkedin Learning course: Learning Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learning Python&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the LinkedIn Learning course Learning Python. The full course is available from &lt;a href=&#34;https://www.linkedin.com/learning/learning-python-14393370&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.lynda.com/course/2896241/2896241-1637338967910-16x9.jpg&#34; alt=&#34;Learning Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python—the popular and highly-readable object-oriented language—is both powerful and relatively easy to learn. Whether you&#39;re new to programming or an experienced developer, this course can help you get started with Python. Joe Marini provides an overview of the installation process, basic Python syntax, and an example of how to construct and run a simple Python program. Learn to work with dates and times, read and write files, and retrieve and parse HTML, JSON, and XML data from the web.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To use these exercise files, you must have the following installed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The latest version of Python, at least version 3.9 but preferably 3.10&lt;/li&gt; &#xA;   &lt;li&gt;A text editor such as Atom, Visual Studio Code, or another editor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Clone this repository into your local machine using the terminal (Mac), CMD or PowerShell (Windows), or a GUI tool like SourceTree. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can also just download a ZIP file from Github and extract the contents to your machine.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Place the examples folder on your computer where they are easy to get to&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Instructor&lt;/h3&gt; &#xA;&lt;p&gt;Joe Marini&lt;/p&gt; &#xA;&lt;p&gt;Senior Director of Product and Engineering&lt;/p&gt; &#xA;&lt;p&gt;Check out my other courses on &lt;a href=&#34;https://www.linkedin.com/learning/instructors/joe-marini&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>