<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-25T02:59:50Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrwadams/attackgen</title>
    <updated>2023-08-25T02:59:50Z</updated>
    <id>tag:github.com,2023-08-25:/mrwadams/attackgen</id>
    <link href="https://github.com/mrwadams/attackgen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AttackGen is a cybersecurity incident response testing tool that leverages the power of large language models and the comprehensive MITRE ATT&amp;CK framework. The tool generates tailored incident response scenarios based on user-selected threat actor groups and your organisation&#39;s details.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AttackGen&lt;/h1&gt; &#xA;&lt;p&gt;AttackGen is a cybersecurity incident response testing tool that leverages the power of large language models and the comprehensive MITRE ATT&amp;amp;CK framework. The tool generates tailored incident response scenarios based on user-selected threat actor groups and your organisation&#39;s details.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#star-the-repo&#34;&gt;Star the Repo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#data-setup&#34;&gt;Data Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#running-attackgen&#34;&gt;Running AttackGen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/#licence&#34;&gt;Licence&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star the Repo&lt;/h2&gt; &#xA;&lt;p&gt;If you find AttackGen useful, please consider starring the repository on GitHub. This helps more people discover the tool. Your support is greatly appreciated! ‚≠ê&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generates unique incident response scenarios based on chosen threat actor groups.&lt;/li&gt; &#xA; &lt;li&gt;Allows you to specify your organisation&#39;s size and industry for a tailored scenario.&lt;/li&gt; &#xA; &lt;li&gt;Displays a detailed list of techniques used by the selected threat actor group as per the MITRE ATT&amp;amp;CK framework.&lt;/li&gt; &#xA; &lt;li&gt;Downloadable scenarios in Markdown format.&lt;/li&gt; &#xA; &lt;li&gt;Integrated with &lt;a href=&#34;https://docs.smith.langchain.com/&#34;&gt;LangSmith&lt;/a&gt; for powerful debugging, testing, and monitoring of model performance.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mrwadams/attackgen/main/images/screenshot.jpg&#34; alt=&#34;AttackGen Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recent version of Python.&lt;/li&gt; &#xA; &lt;li&gt;Python packages: pandas, streamlit, and any other packages necessary for the custom libraries (&lt;code&gt;langchain&lt;/code&gt; and &lt;code&gt;mitreattack&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;OpenAI API key.&lt;/li&gt; &#xA; &lt;li&gt;Data files: &lt;code&gt;enterprise-attack.json&lt;/code&gt; (MITRE ATT&amp;amp;CK dataset in STIX format) and &lt;code&gt;groups.json&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/mrwadams/attackgen.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Change directory into the cloned repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd attackgen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install the required Python packages:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LangSmith Setup&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to use LangSmith for debugging, testing, and monitoring of model performance, you will need to set up a LangSmith account and create a &lt;code&gt;.streamlit/secrets.toml&lt;/code&gt; file that contains your LangChain API key. Please follow the instructions &lt;a href=&#34;https://docs.smith.langchain.com/&#34;&gt;here&lt;/a&gt; to set up your account and obtain your API key.&lt;/p&gt; &#xA;&lt;p&gt;If you do not wish to use LangSmith, you can delete the LangSmith related environment variables from the top of the &lt;code&gt;pages/1_‚ú®_Generate_Scenario.py&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Data Setup&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version of the MITRE ATT&amp;amp;CK dataset in STIX format from &lt;a href=&#34;https://github.com/mitre-attack/attack-stix-data/raw/master/enterprise-attack/enterprise-attack.json&#34;&gt;here&lt;/a&gt;. Ensure to place this file in the &lt;code&gt;./data/&lt;/code&gt; directory within the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Running AttackGen&lt;/h2&gt; &#xA;&lt;p&gt;After the data setup, you can run AttackGen with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;streamlit run üëã_Welcome.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also try the app on &lt;a href=&#34;https://attackgen.streamlit.app/&#34;&gt;Streamlit Community Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enter your OpenAI API Key.&lt;/li&gt; &#xA; &lt;li&gt;Select your organisation&#39;s industry and size from the dropdown menus.&lt;/li&gt; &#xA; &lt;li&gt;Select a Threat Actor Group that you want to simulate.&lt;/li&gt; &#xA; &lt;li&gt;Click on &#39;Generate Scenario&#39; to create the incident response scenario.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please note that generating a scenario may take a minute or so. Once the scenario is generated, you can view it on the app and also download it as a Markdown file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;m very happy to accept contributions to this project. Please feel free to submit an issue or pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a href=&#34;https://choosealicense.com/licenses/gpl-3.0/&#34;&gt;GNU GPLv3&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>opencopilotdev/opencopilot</title>
    <updated>2023-08-25T02:59:50Z</updated>
    <id>tag:github.com,2023-08-25:/opencopilotdev/opencopilot</id>
    <link href="https://github.com/opencopilotdev/opencopilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üïäÔ∏è Build and embed open-source AI Copilots into your product with ease&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.opencopilot.dev&#34;&gt;&lt;img src=&#34;https://github.com/opencopilotdev/opencopilot/assets/5147210/ff01df76-45f5-4c91-a4ef-cd9fcd73a971&#34; alt=&#34;OpenCopilot&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt; üïäÔ∏è OpenCopilot: Build and embed open-source AI Copilots into your product with ease&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/opencopilotdev/opencopilot/actions/workflows/unit_test.yml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/opencopilotdev/opencopilot/actions/workflows/unit_test.yml/badge.svg?sanitize=true&#34; alt=&#34;Unit tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/opencopilotdev/opencopilot/actions/workflows/e2e_test_full.yml&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/opencopilotdev/opencopilot/actions/workflows/e2e_test_full.yml/badge.svg?sanitize=true&#34; alt=&#34;E2E tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/OpenCopilot&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/opencopilot.svg?style=social&amp;amp;label=Follow%20%40OpenCopilot&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/AmdF5d94vE&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1133675019478782072?logo=discord&amp;amp;label=OpenCopilot&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/opencopilot-ai&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/opencopilot-ai?color=%2334D058&amp;amp;label=pypi%20package&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Documentation:&lt;/b&gt; &lt;a href=&#34;https://docs.opencopilot.dev/&#34;&gt;docs.opencopilot.dev&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Copilots are becoming the new paradigm how to build successful LLM-based applications, as seen by Github , Shopify, Brex, Hubspot, etc Copilots. Yet, building a Copilot that goes beyond a Twitter demo is extremely complex as it&#39;s time-consuming, unreliable and feels like a massive undertaking. Moreover, existing solutions such as Microsoft Copilot Stack are closed-source. Building an LLM-app today feels like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/opencopilotdev/opencopilot/assets/3767980/f98def43-38b6-40ed-956b-8b5498c08318&#34; alt=&#34;Author: Soham Chatterjee&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenCopilot solves this problem so building your own Copilot becomes intuitive, fast and reliable - all so &lt;strong&gt;you can build your copilot in a single day&lt;/strong&gt;. For example, you can build Copilots such as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üõ†Ô∏è Developer tooling Copilot&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example: &lt;a href=&#34;https://stripe.com/newsroom/news/stripe-and-openai&#34;&gt;Stripe Copilot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end example: &lt;a href=&#34;https://github.com/opencopilotdev/opencopilot/tree/main/examples/ready_player_me_copilot&#34;&gt;Ready Player Me Copilot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;üíæ SaaS Copilot&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example: &lt;a href=&#34;https://chatspot.ai/&#34;&gt;HubSpot ChatSpot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;üí≥ E-commerce Copilot&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example: &lt;a href=&#34;https://www.shopify.com/magic&#34;&gt;Shopify Copilot&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See more &lt;a href=&#34;https://docs.opencopilot.dev/welcome/overview#use-cases&#34;&gt;use cases in docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;OpenCopilot overview&lt;/h2&gt; &#xA;&lt;p&gt;OpenCopilot provides one coherent end-to-end stack which is purposely designed for building a variety of copilots. From LLM selection (OSS LLMs upcoming), knowledge base, monitoring, evaluation, etc - it covers all the needs to build a useful copilot.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/opencopilotdev/opencopilot/assets/5147210/140ca313-cf8a-4635-913e-8dbb5e33e8d4&#34; alt=&#34;opencopilot_stack&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;As prerequisites, you need to have &lt;strong&gt;Python 3.8+&lt;/strong&gt; and &lt;strong&gt;pip&lt;/strong&gt; installed.&lt;/p&gt; &#xA;&lt;h3&gt;1. Install the Python package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install opencopilot-ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Create a minimal Copilot&lt;/h3&gt; &#xA;&lt;p&gt;Into a Python file (for example, &lt;code&gt;copilot.py&lt;/code&gt;), add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from opencopilot import OpenCopilot&#xA;&#xA;copilot = OpenCopilot(&#xA;    openai_api_key=&#34;your-openai-api-key&#34;,&#xA;    llm_model_name=&#34;gpt-4&#34;,&#xA;    prompt_file=&#34;my_prompt.txt&#34;&#xA;    )&#xA;&#xA;# Run the copilot&#xA;copilot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure your custom prompt file exists: in &lt;code&gt;my_prompt.txt&lt;/code&gt;, add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Your are a Parrot Copilot. Your purpose is to repeat what the user says, but in a different wording.&#xA;&#xA;=========&#xA;{context}&#xA;=========&#xA;&#xA;{history}&#xA;User: {question}&#xA;Parrot Copilot answer in Markdown:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The template variables will be filled at runtime; see our docs on &lt;a href=&#34;https://docs.opencopilot.dev/improve/prompting&#34;&gt;Prompting&lt;/a&gt; if you&#39;d like to learn more.&lt;/p&gt; &#xA;&lt;h3&gt;3. Run the Copilot&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python copilot.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Your minimal copilot is now running as an API service, at &lt;code&gt;localhost:3000&lt;/code&gt; by default üéâ&lt;/p&gt; &#xA;&lt;p&gt;You can chat with it by calling the API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X &#39;POST&#39; \&#xA;  &#39;http://127.0.0.1:3000/v0/conversation/85ceff11-8072-47c8-a09a-ef846b024c04&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;Content-Type: application/json&#39; \&#xA;  -d &#39;{&#xA;  &#34;inputs&#34;: &#34;Hi! Who are you?&#34;&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://localhost:3000/docs#/Chat/handle_conversation_v0_conversation__conversation_id__post&#34;&gt;interactive Swagger docs&lt;/a&gt; for full API documentation.&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Customizing, improving, testing and deploying your Copilot&lt;/h2&gt; &#xA;&lt;p&gt;Please see the full &lt;a href=&#34;https://docs.opencopilot.dev/welcome/introduction&#34;&gt;documentation&lt;/a&gt; to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Start improving your copilot&lt;/strong&gt;: &lt;a href=&#34;https://docs.opencopilot.dev/improve/customize-your-copilot&#34;&gt;customize your copilot by prompting&lt;/a&gt;, adding knowledge base, etc.&lt;/li&gt; &#xA; &lt;li&gt;Read more about the core features and stack choices of OpenCopilot in &lt;a href=&#34;https://raw.githubusercontent.com/opencopilotdev/opencopilot/main/welcome/overview&#34;&gt;Overview&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optional: front-end&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to have a front-end for your Copilot, then you can easily deploy it. As a pre-requisite, you need to have &lt;a href=&#34;https://pnpm.io/&#34;&gt;&lt;code&gt;pnpm&lt;/code&gt;&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;p&gt;First, clone the &lt;a href=&#34;https://github.com/opencopilotdev/opencopilot-frontend&#34;&gt;opencopilotdev/opencopilot-frontend&lt;/a&gt; repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/opencopilotdev/opencopilot-frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, setup the environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd opencopilot-frontend&#xA;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the front-end application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now access the front-end at &lt;a href=&#34;http://localhost:3001&#34;&gt;http://localhost:3001&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions about OpenCopilot, feel free to do any of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://discord.gg/AmdF5d94vE&#34;&gt;Discord&lt;/a&gt; and ask.&lt;/li&gt; &#xA; &lt;li&gt;Report bugs or feature requests in &lt;a href=&#34;https://github.com/opencopilotdev/opencopilot/issues&#34;&gt;GitHub issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Directly email Taivo, Co-founder &amp;amp; CTO of OpenCopilot: &lt;code&gt;taivo@opencopilot.dev&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>chrieke/prettymapp</title>
    <updated>2023-08-25T02:59:50Z</updated>
    <id>tag:github.com,2023-08-25:/chrieke/prettymapp</id>
    <link href="https://github.com/chrieke/prettymapp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üñºÔ∏è Create beautiful maps from OpenStreetMap data in a streamlit webapp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;prettymapp üñºÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Prettymapp is a webapp and Python package to create beautiful maps from OpenStreetMap data&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; üéà Try it out here: &lt;a href=&#34;https://prettymapp.streamlit.app/&#34;&gt;prettymapp on streamlit üéà &lt;/a&gt; &lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://prettymapp.streamlit.app/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrieke/prettymapp/main/streamlit-prettymapp/example_prints/demo.gif&#34; width=&#34;700&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrieke/prettymapp/main/streamlit-prettymapp/example_prints/macau.png&#34;&gt;&lt;/td&gt;&#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrieke/prettymapp/main/streamlit-prettymapp/example_prints/barcelona.png&#34;&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Based on the prettymaps project&lt;/h2&gt; &#xA;&lt;p&gt;Prettymapp is based on a rewrite of the fantastic &lt;a href=&#34;https://github.com/marceloprates/prettymaps&#34;&gt;prettymaps&lt;/a&gt; project by &lt;a href=&#34;https://github.com/marceloprates&#34;&gt;@marceloprates&lt;/a&gt;. All credit for the original idea, designs and implementation go to him. The prettymapp rewrite focuses on speed and adapted configuration to interface with the webapp. It drops more complex configuration options in favour of improved speed, reduced code complexity and simplified configuration interfaces. It is partially tested and adds a &lt;a href=&#34;https://streamlit.io/&#34;&gt;streamlit&lt;/a&gt; webapp component.&lt;/p&gt; &#xA;&lt;h2&gt;Python package&lt;/h2&gt; &#xA;&lt;p&gt;You can also use prettymapp without the webapp, directly in Python. This lets you customize the functionality or build your own application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install prettymapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Define the area, download and plot the OSM data:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from prettymapp.geo import get_aoi&#xA;from prettymapp.osm import get_osm_geometries&#xA;from prettymapp.plotting import Plot&#xA;from prettymapp.settings import STYLES&#xA;&#xA;aoi = get_aoi(address=&#34;Pra√ßa Ferreira do Amaral, Macau&#34;, radius=1100, rectangular=False)&#xA;df = get_osm_geometries(aoi=aoi)&#xA;&#xA;fig = Plot(&#xA;    df=df,&#xA;    aoi_bounds=aoi.bounds,&#xA;    draw_settings=STYLES[&#34;Peach&#34;]&#xA;).plot_all()&#xA;&#xA;fig.savefig(&#34;map.jpg&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To customize the map apperance, use the additional arguments of the &lt;a href=&#34;https://raw.githubusercontent.com/chrieke/prettymapp/main/plotting.py#L36&#34;&gt;&lt;code&gt;Plot&lt;/code&gt;&lt;/a&gt; class (e.g. &lt;code&gt;shape&lt;/code&gt;, &lt;code&gt;contour_width&lt;/code&gt; etc.). Check the preconfigured &lt;a href=&#34;https://raw.githubusercontent.com/chrieke/prettymapp/main/prettymapp/settings.py#L35&#34;&gt;styles&lt;/a&gt; and webapp &lt;a href=&#34;https://raw.githubusercontent.com/chrieke/prettymapp/main/streamlit-prettymapp/examples.json&#34;&gt;examples&lt;/a&gt; for inspiration.&lt;/p&gt;</summary>
  </entry>
</feed>