<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-01T01:36:11Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DAGWorks-Inc/burr</title>
    <updated>2024-08-01T01:36:11Z</updated>
    <id>tag:github.com,2024-08-01:/DAGWorks-Inc/burr</id>
    <link href="https://github.com/DAGWorks-Inc/burr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build applications that make decisions (chatbots, agents, simulations, etc...). Monitor, trace, persist, and execute on your own infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üßä Burr&lt;/h1&gt; &#xA;&lt;div&gt; &#xA; &lt;a href=&#34;https://discord.gg/6Zy2DwP4f3&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Join-Burr_Discord-brightgreen?logo=discord&#34; alt=&#34;Burr Discord&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Burr makes it easy to develop applications that make decisions (chatbots, agents, simulations, etc...) from simple python building blocks.&lt;/p&gt; &#xA;&lt;p&gt;Burr works well for any application that uses LLMs, and can integrate with any of your favorite frameworks. Burr includes a UI that can track/monitor/trace your system in real time.&lt;/p&gt; &#xA;&lt;p&gt;Link to &lt;a href=&#34;https://burr.dagworks.io/&#34;&gt;documentation&lt;/a&gt;. Quick (&amp;lt;3min) video intro &lt;a href=&#34;https://www.loom.com/share/a10f163428b942fea55db1a84b1140d8?sid=1512863b-f533-4a42-a2f3-95b13deb07c9&#34;&gt;here&lt;/a&gt;. Longer &lt;a href=&#34;https://www.youtube.com/watch?v=rEZ4oDN0GdU&#34;&gt;video intro &amp;amp; walkthrough&lt;/a&gt;. Blog post &lt;a href=&#34;https://blog.dagworks.io/p/burr-develop-stateful-ai-applications&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üèÉQuick start&lt;/h2&gt; &#xA;&lt;p&gt;Install from &lt;code&gt;pypi&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#34;burr[start]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the UI server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;burr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will open up Burr&#39;s telemetry UI. It comes loaded with some default data so you can click around. It also has a demo chat application to help demonstrate what the UI captures enabling you too see things changing in real-time. Hit the &#34;Demos&#34; side bar on the left and select &lt;code&gt;chatbot&lt;/code&gt;. To chat it requires the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable to be set, but you can still see how it works if you don&#39;t have an API key set.&lt;/p&gt; &#xA;&lt;p&gt;Next, start coding / running examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/dagworks-inc/burr &amp;amp;&amp;amp; cd burr/examples/hello-world-counter&#xA;python application.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see the counter example running in the terminal, along with the trace being tracked in the UI. See if you can find it.&lt;/p&gt; &#xA;&lt;p&gt;For more details see the &lt;a href=&#34;https://burr.dagworks.io/getting_started/simple-example/&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üî© How does Burr work?&lt;/h2&gt; &#xA;&lt;p&gt;With Burr you express your application as a state machine (i.e. a graph/flowchart). You can (and should!) use it for anything in which you have to manage state, track complex decisions, add human feedback, or dictate an idempotent, self-persisting workflow.&lt;/p&gt; &#xA;&lt;p&gt;The core API is simple -- the Burr hello-world looks like this (plug in your own LLM, or copy from &lt;a href=&#34;https://burr.dagworks.io/getting_started/simple-example/#build-a-simple-chatbot%3E&#34;&gt;the docs&lt;/a&gt; for &lt;em&gt;gpt-X&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from burr.core import action, State, ApplicationBuilder&#xA;&#xA;@action(reads=[], writes=[&#34;prompt&#34;, &#34;chat_history&#34;])&#xA;def human_input(state: State, prompt: str) -&amp;gt; State:&#xA;    # your code -- write what you want here!&#xA;    return state.update(prompt=prompt).append(chat_history=chat_item)&#xA;&#xA;@action(reads=[&#34;chat_history&#34;], writes=[&#34;response&#34;, &#34;chat_history&#34;])&#xA;def ai_response(state: State) -&amp;gt; State:&#xA;    response = _query_llm(state[&#34;chat_history&#34;]) # Burr doesn&#39;t care how you use LLMs!&#xA;    return state.update(response=content).append(chat_history=chat_item)&#xA;&#xA;app = (&#xA;    ApplicationBuilder()&#xA;    .with_actions(human_input, ai_response)&#xA;    .with_transitions(&#xA;        (&#34;human_input&#34;, &#34;ai_response&#34;),&#xA;        (&#34;ai_response&#34;, &#34;human_input&#34;)&#xA;    ).with_state(chat_history=[])&#xA;    .with_entrypoint(&#34;human_input&#34;)&#xA;    .build()&#xA;)&#xA;*_, state = app.run(halt_after=[&#34;ai_response&#34;], inputs={&#34;prompt&#34;: &#34;Who was Aaron Burr, sir?&#34;})&#xA;print(&#34;answer:&#34;, app.state[&#34;response&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Burr includes:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A (dependency-free) low-abstraction python library that enables you to build and manage state machines with simple python functions&lt;/li&gt; &#xA; &lt;li&gt;A UI you can use view execution telemetry for introspection and debugging&lt;/li&gt; &#xA; &lt;li&gt;A set of integrations to make it easier to persist state, connect to telemetry, and integrate with other systems&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/DAGWorks-Inc/burr/raw/main/chatbot.gif&#34; alt=&#34;Burr at work&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üíªÔ∏è What can you do with Burr?&lt;/h2&gt; &#xA;&lt;p&gt;Burr can be used to power a variety of applications, including:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dagworks-inc/burr/tree/main/examples/multi-modal-chatbot&#34;&gt;A simple gpt-like chatbot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dagworks-inc/burr/tree/main/examples/conversational-rag/simple_example&#34;&gt;A stateful RAG-based chatbot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DAGWorks-Inc/burr/tree/main/examples/llm-adventure-game&#34;&gt;An LLM-based adventure game&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DAGWorks-Inc/burr/tree/main/examples/email-assistant&#34;&gt;An interactive assistant for writing emails&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As well as a variety of (non-LLM) use-cases, including a time-series forecasting &lt;a href=&#34;https://github.com/DAGWorks-Inc/burr/tree/main/examples/simulation&#34;&gt;simulation&lt;/a&gt;, and &lt;a href=&#34;https://github.com/DAGWorks-Inc/burr/tree/main/examples/ml-training&#34;&gt;hyperparameter tuning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And a lot more!&lt;/p&gt; &#xA;&lt;p&gt;Using hooks and other integrations you can (a) integrate with any of your favorite vendors (LLM observability, storage, etc...), and (b) build custom actions that delegate to your favorite libraries (like &lt;a href=&#34;https://github.com/DAGWorks-Inc/hamilton&#34;&gt;Hamilton&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Burr will &lt;em&gt;not&lt;/em&gt; tell you how to build your models, how to query APIs, or how to manage your data. It will help you tie all these together in a way that scales with your needs and makes following the logic of your system easy. Burr comes out of the box with a host of integrations including tooling to build a UI in streamlit and watch your state machine execute.&lt;/p&gt; &#xA;&lt;h2&gt;üèó Start building&lt;/h2&gt; &#xA;&lt;p&gt;See the documentation for &lt;a href=&#34;https://burr.dagworks.io/getting_started/simple-example&#34;&gt;getting started&lt;/a&gt;, and follow the example. Then read through some of the concepts and write your own application!&lt;/p&gt; &#xA;&lt;h2&gt;üìÉ Comparison against common frameworks&lt;/h2&gt; &#xA;&lt;p&gt;While Burr is attempting something (somewhat) unique, there are a variety of tools that occupy similar spaces:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Criteria&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Burr&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Langgraph&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;temporal&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Langchain&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Superagent&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Hamilton&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Explicitly models a state machine&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Framework-agnostic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Asynchronous event-based orchestration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Built for core web-service logic&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open-source user-interface for monitoring/tracing&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Works with non-LLM use-cases&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üåØ Why the name Burr?&lt;/h2&gt; &#xA;&lt;p&gt;Burr is named after &lt;a href=&#34;https://en.wikipedia.org/wiki/Aaron_Burr&#34;&gt;Aaron Burr&lt;/a&gt;, founding father, third VP of the United States, and murderer/arch-nemesis of &lt;a href=&#34;https://en.wikipedia.org/wiki/Alexander_Hamilton&#34;&gt;Alexander Hamilton&lt;/a&gt;. What&#39;s the connection with Hamilton? This is &lt;a href=&#34;https://raw.githubusercontent.com/DAGWorks-Inc/burr/main/www.dagworks.io&#34;&gt;DAGWorks&lt;/a&gt;&#39; second open-source library release after the &lt;a href=&#34;https://github.com/dagworks-inc/hamilton&#34;&gt;Hamilton library&lt;/a&gt; We imagine a world in which Burr and Hamilton lived in harmony and saw through their differences to better the union. We originally built Burr as a &lt;em&gt;harness&lt;/em&gt; to handle state between executions of Hamilton DAGs (because DAGs don&#39;t have cycles), but realized that it has a wide array of applications and decided to release it more broadly.&lt;/p&gt; &#xA;&lt;h2&gt;üõ£ Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;While Burr is stable and well-tested, we have quite a few tools/features on our roadmap!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Recursive state machines. Run Burr within Burr to get hierarchical agents/parallelism + track through to the UI.&lt;/li&gt; &#xA; &lt;li&gt;Testing &amp;amp; eval curation. Curating data with annotations and being able to export these annotations to create unit &amp;amp; integration tests.&lt;/li&gt; &#xA; &lt;li&gt;Various efficiency/usability improvements for the core library (see &lt;a href=&#34;https://burr.dagworks.io/concepts/planned-capabilities/&#34;&gt;planned capabilities&lt;/a&gt; for more details). This includes: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Fully typed state with validation&lt;/li&gt; &#xA;   &lt;li&gt;First-class support for retries + exception management&lt;/li&gt; &#xA;   &lt;li&gt;More integration with popular frameworks (LCEL, LLamaIndex, Hamilton, etc...)&lt;/li&gt; &#xA;   &lt;li&gt;Capturing &amp;amp; surfacing extra metadata, e.g. annotations for particular point in time, that you can then pull out for fine-tuning, etc.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tooling for hosted execution of state machines, integrating with your infrastructure (Ray, modal, FastAPI + EC2, etc...)&lt;/li&gt; &#xA; &lt;li&gt;Storage integrations. More integrations with technologies like Redis, MongoDB, MySQL, etc. so you can run Burr on top of what you have available.&lt;/li&gt; &#xA; &lt;li&gt;More out of the box plugins for fine-grained tracing, e.g. decorators for your functions, LLM clients, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you want to avoid self-hosting the above solutions we&#39;re building Burr Cloud. To let us know you&#39;re interested sign up &lt;a href=&#34;https://forms.gle/w9u2QKcPrztApRedA&#34;&gt;here&lt;/a&gt; for the waitlist to get access.&lt;/p&gt; &#xA;&lt;h2&gt;ü§≤ Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributors! To get started on developing, see the &lt;a href=&#34;https://burr.dagworks.io/contributing&#34;&gt;developer-facing docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üë™ Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code contributions&lt;/h3&gt; &#xA;&lt;p&gt;Users who have contributed core functionality, integrations, or examples.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elijahbenizzy&#34;&gt;Elijah ben Izzy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skrawcz&#34;&gt;Stefan Krawczyk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jombooth&#34;&gt;Joseph Booth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NandaniThakur&#34;&gt;Nandani Thakur&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zilto&#34;&gt;Thierry Jean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HamzaFarhan&#34;&gt;Hamza Farhan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bug hunters/special mentions&lt;/h3&gt; &#xA;&lt;p&gt;Users who have contributed small docs fixes, design suggestions, and found bugs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vertis&#34;&gt;Luke Chadwick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sudoevans&#34;&gt;Evans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mmz-001&#34;&gt;Sasmitha Manathunga&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>usnistgov/dioptra</title>
    <updated>2024-08-01T01:36:11Z</updated>
    <id>tag:github.com,2024-08-01:/usnistgov/dioptra</id>
    <link href="https://github.com/usnistgov/dioptra" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Test Software for the Characterization of AI Technologies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dioptra: Test Software for the Characterization of AI Technologies&lt;/h1&gt; &#xA;&lt;p&gt;Dioptra is a software test platform for assessing the trustworthy characteristics of artificial intelligence (AI). Trustworthy AI is: valid and reliable, safe, secure and resilient, accountable and transparent, explainable and interpretable, privacy-enhanced, and fair - with harmful bias managed&lt;a href=&#34;https://doi.org/10.6028/NIST.AI.100-1&#34;&gt;^1&lt;/a&gt;. Dioptra supports the Measure function of the &lt;a href=&#34;https://nist.gov/itl/ai-risk-management-framework/&#34;&gt;NIST AI Risk Management Framework&lt;/a&gt; by providing functionality to assess, analyze, and track identified AI risks.&lt;/p&gt; &#xA;&lt;p&gt;Dioptra provides a REST API, which can be controlled via an intuitive web interface, a Python client, or any REST client library of the user&#39;s choice for designing, managing, executing, and tracking experiments. Details are available in the project documentation available at &lt;a href=&#34;https://pages.nist.gov/dioptra/&#34;&gt;https://pages.nist.gov/dioptra/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable MD007 MD030 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#current-release-status&#34;&gt;Current Release Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#use-cases&#34;&gt;Use Cases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#key-properties&#34;&gt;Key Properties&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#usage-instructions&#34;&gt;Usage Instructions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#build-the-containers&#34;&gt;Build the containers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#run-dioptra&#34;&gt;Run Dioptra&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#user-registration&#34;&gt;User registration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#develop-dioptra&#34;&gt;Develop Dioptra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/#how-to-cite&#34;&gt;How to Cite&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdownlint-enable MD007 MD030 --&gt; &#xA;&lt;h2&gt;Current Release Status&lt;/h2&gt; &#xA;&lt;p&gt;Release 1.0.0 -- with on-going improvements and development&lt;/p&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;We envision the following primary use cases for Dioptra:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Model Testing: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1st party - Assess AI models throughout the development lifecycle&lt;/li&gt; &#xA;   &lt;li&gt;2nd party - Assess AI models during acquisition or in an evaluation lab environment&lt;/li&gt; &#xA;   &lt;li&gt;3rd party - Assess AI models during auditing or compliance activities&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Research: Aid trustworthy AI researchers in tracking experiments&lt;/li&gt; &#xA; &lt;li&gt;Evaluations and Challenges: Provide a common platform and resources for participants&lt;/li&gt; &#xA; &lt;li&gt;Red-Teaming: Expose models and resources to a red team in a controlled environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Properties&lt;/h2&gt; &#xA;&lt;p&gt;Dioptra strives for the following key properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reproducible: Dioptra automatically creates snapshots of resources so experiments can be reproduced and validated&lt;/li&gt; &#xA; &lt;li&gt;Traceable: The full history of experiments and their inputs are tracked&lt;/li&gt; &#xA; &lt;li&gt;Extensible: Support for expanding functionality and importing existing Python packages via a plugin system&lt;/li&gt; &#xA; &lt;li&gt;Interoperable: A type system promotes interoperability between plugins&lt;/li&gt; &#xA; &lt;li&gt;Modular: New experiments can be composed from modular components in a simple yaml file&lt;/li&gt; &#xA; &lt;li&gt;Secure: Dioptra provides user authentication with access controls coming soon&lt;/li&gt; &#xA; &lt;li&gt;Interactive: Users can interact with Dioptra via an intuitive web interface&lt;/li&gt; &#xA; &lt;li&gt;Shareable and Reusable: Dioptra can be deployed in a multi-tenant environment so users can share and reuse components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Build the containers&lt;/h3&gt; &#xA;&lt;p&gt;The first step in setting up Dioptra is to clone the repository and build the docker containers for the various services that are part of a deployment. See the &lt;a href=&#34;https://pages.nist.gov/dioptra/getting-started/building-the-containers.html&#34;&gt;Building the containers&lt;/a&gt; section of the documentation for instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Run Dioptra&lt;/h3&gt; &#xA;&lt;p&gt;Once the containers have been built, the next step is to configure the deployment with cruft and run Dioptra. See the &lt;a href=&#34;https://pages.nist.gov/dioptra/getting-started/running-dioptra.html&#34;&gt;Running Dioptra&lt;/a&gt; section of the documentation for instructions.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you may want to add datasets, see the &lt;a href=&#34;https://pages.nist.gov/dioptra/getting-started/acquiring-datasets.html&#34;&gt;Downloading datasets&lt;/a&gt; section of the documentation for details.&lt;/p&gt; &#xA;&lt;h3&gt;User registration&lt;/h3&gt; &#xA;&lt;p&gt;Register a user account with your Dioptra instance via either the user interface. The user interface can be accessed via your web browser at the URL specified when creating the deployment. The default is &lt;a href=&#34;http://localhost&#34;&gt;http://localhost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Develop Dioptra&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing to Dioptra, please see the &lt;a href=&#34;https://raw.githubusercontent.com/usnistgov/dioptra/main/DEVELOPER.md&#34;&gt;Developer Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img src=&#34;https://i.creativecommons.org/l/by/4.0/88x31.png&#34; alt=&#34;Creative Commons License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This Software (Dioptra) is being made available as a public service by the &lt;a href=&#34;https://www.nist.gov/&#34;&gt;National Institute of Standards and Technology (NIST)&lt;/a&gt;, an Agency of the United States Department of Commerce. This software was developed in part by employees of NIST and in part by NIST contractors. Copyright in portions of this software that were developed by NIST contractors has been licensed or assigned to NIST. Pursuant to Title 17 United States Code Section 105, works of NIST employees are not subject to copyright protection in the United States. However, NIST may hold international copyright in software created by its employees and domestic copyright (or licensing rights) in portions of software that were assigned or licensed to NIST. To the extent that NIST holds copyright in this software, it is being made available under the &lt;a href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International license (CC BY 4.0)&lt;/a&gt;. The disclaimers of the CC BY 4.0 license apply to all parts of the software developed or licensed by NIST.&lt;/p&gt; &#xA;&lt;h2&gt;How to Cite&lt;/h2&gt; &#xA;&lt;p&gt;Glasbrenner, James, Booth, Harold, Manville, Keith, Sexton, Julian, Chisholm, Michael Andy, Choy, Henry, Hand, Andrew, Hodges, Bronwyn, Scemama, Paul, Cousin, Dmitry, Trapnell, Eric, Trapnell, Mark, Huang, Howard, Rowe, Paul, Byrne, Alex (2024), Dioptra Test Platform, National Institute of Standards and Technology, &lt;a href=&#34;https://doi.org/10.18434/mds2-3398&#34;&gt;https://doi.org/10.18434/mds2-3398&lt;/a&gt; (Accessed &#39;Today&#39;s Date&#39;)&lt;/p&gt; &#xA;&lt;p&gt;N.B.: Replace &#39;Today&#39;s Date&#39; with today&#39;s date&lt;/p&gt;</summary>
  </entry>
</feed>