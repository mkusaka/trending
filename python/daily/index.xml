<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-08T01:41:06Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ViperX7/Alpaca-Turbo</title>
    <updated>2023-04-08T01:41:06Z</updated>
    <id>tag:github.com,2023-04-08:/ViperX7/Alpaca-Turbo</id>
    <link href="https://github.com/ViperX7/Alpaca-Turbo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web UI to run alpaca model locally&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alpaca-Turbo&lt;/h1&gt; &#xA;&lt;p&gt;Alpaca-Turbo is a language model that can be run locally without much setup required. It is a user-friendly web UI for the alpaca.cpp language model based on LLaMA, with unique features that make it stand out from other implementations. The goal is to provide a seamless chat experience that is easy to configure and use, without sacrificing speed or functionality.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://discord.gg/pm4JzCBHNn&#34;&gt;Discord&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ViperX7/Alpaca-Turbo/main/screenshots/screenshot2.png&#34; alt=&#34;Alpaca-Turbo Screenshot 2&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ViperX7/Alpaca-Turbo/main/screenshots/screenshot1.png&#34; alt=&#34;Alpaca-Turbo Screenshot 1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation Steps&lt;/h2&gt; &#xA;&lt;h4&gt;Using Docker (only Linux is supported with docker)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: for some reason this docker container works on linux but not on windows&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Docker must be installed on your system&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest alpaca-turbo.zip from the release page. &lt;a href=&#34;https://github.com/ViperX7/Alpaca-Turbo/releases/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract the contents of the zip file into a directory named alpaca-turbo.&lt;/li&gt; &#xA; &lt;li&gt;Copy your alpaca models to alpaca-turbo/models/ directory.&lt;/li&gt; &#xA; &lt;li&gt;Run the following command to set everything up: &lt;pre&gt;&lt;code&gt;  docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt; to use the chat interface of the chatbot.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Windows/Mac M1/M2 (miniconda)&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install miniconda&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe&#34;&gt;windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.pkg&#34;&gt;Mac M1/M2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Install for all users&lt;/li&gt; &#xA;    &lt;li&gt;Make sure to add &lt;code&gt;c:\ProgramData\miniconda3\condabin&lt;/code&gt; to your environment variables&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest alpaca-turbo.zip from the release page. &lt;a href=&#34;https://github.com/ViperX7/Alpaca-Turbo/releases/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract Alpaca-Turbo.zip to Alpaca-Turbo&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Make sure you have enough space for the models in the extracted location&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy your alpaca models to alpaca-turbo/models/ directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open cmd as Admin and type&lt;/p&gt; &lt;pre&gt;&lt;code&gt;conda init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;close that window&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;open a new cmd window in your Alpaca-Turbo dir and type&lt;/p&gt; &lt;pre&gt;&lt;code&gt;conda create -n alpaca_turbo python=3.8 -y&#xA;conda activate alpaca_turbo&#xA;pip install -r requirements.txt&#xA;python api.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visit &lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt; select your model and click change wait for the model to load&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ready to interact&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;CREDITS&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/LLaMA.cpp&#34;&gt;ggerganov/LLaMA.cpp&lt;/a&gt; For their amazing cpp library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antimatter15/alpaca.cpp&#34;&gt;antimatter15/alpaca.cpp&lt;/a&gt; For initial versions of their chat app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cocktailpeanut/dalai&#34;&gt;cocktailpeanut/dalai&lt;/a&gt; For the Inspiration&lt;/li&gt; &#xA; &lt;li&gt;MetaAI for the LLaMA models&lt;/li&gt; &#xA; &lt;li&gt;Stanford for the alpaca &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca&#34;&gt;models&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>chroma-core/chroma</title>
    <updated>2023-04-08T01:41:06Z</updated>
    <id>tag:github.com,2023-04-08:/chroma-core/chroma</id>
    <link href="https://github.com/chroma-core/chroma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the open source embedding database&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://trychroma.com&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/891664/227103090-6624bf7d-9524-4e05-9d2c-c28d5d451481.png&#34; alt=&#34;Chroma logo&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Chroma - the open-source embedding database&lt;/b&gt;. &lt;br&gt; The fastest way to build Python or JavaScript LLM apps with memory! &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/MMeYNTmh3x&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1073293645303795742&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; | &lt;a href=&#34;https://github.com/chroma-core/chroma/raw/master/LICENSE&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=license&amp;amp;message=Apache 2.0&amp;amp;color=white&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; | &lt;a href=&#34;https://docs.trychroma.com/&#34; target=&#34;_blank&#34;&gt; Docs &lt;/a&gt; | &lt;a href=&#34;https://www.trychroma.com/&#34; target=&#34;_blank&#34;&gt; Homepage &lt;/a&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install chromadb # python client&#xA;# for javascript, npm install chromadb!&#xA;# for client-server mode, docker-compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The core API is only 4 functions (run our &lt;a href=&#34;https://colab.research.google.com/drive/1QEzFyqnoFxq7LUGyP1vzR4iLt9PpCDXv?usp=sharing&#34;&gt;üí° Google Colab&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chromadb&#xA;# setup Chroma in-memory, for easy prototyping. Can add persistence easily!&#xA;client = chromadb.Client()&#xA;&#xA;# Create collection. get_collection, get_or_create_collection, delete_collection also available!&#xA;collection = client.create_collection(&#34;all-my-documents&#34;) &#xA;&#xA;# Add docs to the collection. Can also update and delete. Row-based API coming soon!&#xA;collection.add(&#xA;    documents=[&#34;This is document1&#34;, &#34;This is document2&#34;], # we handle tokenization, embedding, and indexing automatically. You can skip that and add your own embeddings as well&#xA;    metadatas=[{&#34;source&#34;: &#34;notion&#34;}, {&#34;source&#34;: &#34;google-docs&#34;}], # filter on these!&#xA;    ids=[&#34;doc1&#34;, &#34;doc2&#34;], # unique for each doc &#xA;)&#xA;&#xA;# Query/search 2 most similar results. You can also .get by id&#xA;results = collection.query(&#xA;    query_texts=[&#34;This is a query document&#34;],&#xA;    n_results=2,&#xA;    # where={&#34;metadata_field&#34;: &#34;is_equal_to_this&#34;}, # optional filter&#xA;    # where_document={&#34;$contains&#34;:&#34;search_string&#34;}  # optional filter&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Fully-typed, fully-tested, fully-documented == happiness&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt;: &lt;a href=&#34;https://blog.langchain.dev/langchain-chroma/&#34;&gt;&lt;code&gt;ü¶úÔ∏èüîó LangChain&lt;/code&gt;&lt;/a&gt; (python and js), &lt;a href=&#34;https://twitter.com/atroyn/status/1628557389762007040&#34;&gt;&lt;code&gt;ü¶ô LlamaIndex&lt;/code&gt;&lt;/a&gt; and more soon&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dev, Test, Prod&lt;/strong&gt;: the same API that runs in your python notebook, scales to your cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature-rich&lt;/strong&gt;: Queries, filtering, density estimation and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Free &amp;amp; Open Source&lt;/strong&gt;: Apache 2.0 Licensed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use case: ChatGPT for ______&lt;/h2&gt; &#xA;&lt;p&gt;For example, the &lt;code&gt;&#34;Chat your data&#34;&lt;/code&gt; use case:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add documents to your database. You can pass in your own embeddings, embedding function, or let Chroma embed them for you.&lt;/li&gt; &#xA; &lt;li&gt;Query relevant documents with natural language.&lt;/li&gt; &#xA; &lt;li&gt;Compose documents into the context window of an LLM like &lt;code&gt;GPT3&lt;/code&gt; for additional summarization or analysis.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Embeddings?&lt;/h2&gt; &#xA;&lt;p&gt;What are embeddings?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/docs/guides/embeddings/what-are-embeddings&#34;&gt;Read the guide from OpenAI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Literal&lt;/strong&gt;: Embedding something turns it from image/text/audio into a list of numbers. üñºÔ∏è or üìÑ =&amp;gt; &lt;code&gt;[1.2, 2.1, ....]&lt;/code&gt;. This process makes documents &#34;understandable&#34; to a machine learning model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;By analogy&lt;/strong&gt;: An embedding represents the essence of a document. This enables documents and queries with the same essence to be &#34;near&#34; each other and therefore easy to find.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Technical&lt;/strong&gt;: An embedding is the latent-space position of a document at a layer of a deep neural network. For models trained specifically to embed data, this is the last layer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A small example&lt;/strong&gt;: If you search your photos for &#34;famous bridge in San Francisco&#34;. By embedding this query and comparing it to the embeddings of your photos and their metadata - it should return photos of the Golden Gate Bridge.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Embeddings databases (also known as &lt;strong&gt;vector databases&lt;/strong&gt;) store embeddings and allow you to search by nearest neighbors rather than by substrings like a traditional database. By default, Chroma uses &lt;a href=&#34;https://docs.trychroma.com/embeddings#default-sentence-transformers&#34;&gt;Sentence Transformers&lt;/a&gt; to embed for you but you can also use OpenAI embeddings, Cohere (multilingual) embeddings, or your own.&lt;/p&gt; &#xA;&lt;h2&gt;Get involved&lt;/h2&gt; &#xA;&lt;p&gt;Chroma is a rapidly developing project. We welcome PR contributors and ideas for how to improve the project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/MMeYNTmh3x&#34;&gt;Join the conversation on Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chroma-core/chroma/wiki/Roadmap&#34;&gt;Review the roadmap and contribute your ideas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chroma-core/chroma/issues&#34;&gt;Grab an issue and open a PR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chroma-core/chroma/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Jittor/JittorLLMs</title>
    <updated>2023-04-08T01:41:06Z</updated>
    <id>tag:github.com,2023-04-08:/Jittor/JittorLLMs</id>
    <link href="https://github.com/Jittor/JittorLLMs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ËÆ°ÂõæÂ§ßÊ®°ÂûãÊé®ÁêÜÂ∫ìÔºåÂÖ∑ÊúâÈ´òÊÄßËÉΩ„ÄÅÈÖçÁΩÆË¶ÅÊ±Ç‰Ωé„ÄÅ‰∏≠ÊñáÊîØÊåÅÂ•Ω„ÄÅÂèØÁßªÊ§çÁ≠âÁâπÁÇπ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ËÆ°ÂõæÂ§ßÊ®°ÂûãÊé®ÁêÜÂ∫ì - Á¨îËÆ∞Êú¨Ê≤°ÊúâÊòæÂç°‰πüËÉΩË∑ëÂ§ßÊ®°Âûã&lt;/h1&gt; &#xA;&lt;p&gt;Êú¨Â§ßÊ®°ÂûãÊé®ÁêÜÂ∫ìJittorLLMsÊúâ‰ª•‰∏ãÂá†‰∏™ÁâπÁÇπÔºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ÊàêÊú¨‰ΩéÔºöÁõ∏ÊØîÂêåÁ±ªÊ°ÜÊû∂ÔºåÊú¨Â∫ìÂèØÂ§ßÂπÖÈôç‰ΩéÁ°¨‰ª∂ÈÖçÁΩÆË¶ÅÊ±ÇÔºàÂáèÂ∞ë80%ÔºâÔºåÊ≤°ÊúâÊòæÂç°Ôºå2GÂÜÖÂ≠òÂ∞±ËÉΩË∑ëÂ§ßÊ®°ÂûãÔºå‰∫∫‰∫∫ÁöÜÂèØÂú®ÊôÆÈÄöÊú∫Âô®‰∏äÔºåÂÆûÁé∞Â§ßÊ®°ÂûãÊú¨Âú∞ÈÉ®ÁΩ≤ÔºõÊòØÁõÆÂâçÂ∑≤Áü•ÁöÑÈÉ®ÁΩ≤ÊàêÊú¨ÊúÄ‰ΩéÁöÑÂ§ßÊ®°ÂûãÂ∫ìÔºõ&lt;/li&gt; &#xA; &lt;li&gt;ÊîØÊåÅÂπøÔºöÁõÆÂâçÊîØÊåÅ‰∫Ü4ÁßçÂ§ßÊ®°ÂûãÔºö&lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B&#34;&gt;ChatGLMÂ§ßÊ®°Âûã&lt;/a&gt;ÔºõÈπèÁ®ã&lt;a href=&#34;https://openi.org.cn/pangu/&#34;&gt;ÁõòÂè§Â§ßÊ®°Âûã&lt;/a&gt;ÔºõBlinkDLÁöÑ&lt;a href=&#34;https://github.com/BlinkDL/ChatRWKV&#34;&gt;ChatRWKV&lt;/a&gt;ÔºõÂõΩÂ§ñMetaÁöÑ&lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;LLaMAÂ§ßÊ®°Âûã&lt;/a&gt;ÔºõÂêéÁª≠ËøòÂ∞ÜÊîØÊåÅMOSSÁ≠âÂõΩÂÜÖ‰ºòÁßÄÁöÑÂ§ßÊ®°ÂûãÔºåÁªü‰∏ÄËøêË°åÁéØÂ¢ÉÈÖçÁΩÆÔºåÈôç‰ΩéÂ§ßÊ®°ÂûãÁî®Êà∑ÁöÑ‰ΩøÁî®Èó®Êßõ„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÂèØÁßªÊ§çÔºöÁî®Êà∑‰∏çÈúÄË¶Å‰øÆÊîπ‰ªª‰Ωï‰ª£Á†ÅÔºåÂè™ÈúÄË¶ÅÂÆâË£ÖJittorÁâàtorch(JTorch)ÔºåÂç≥ÂèØÂÆûÁé∞Ê®°ÂûãÁöÑËøÅÁßªÔºå‰ª•‰æø‰∫éÈÄÇÈÖçÂêÑÁ±ªÂºÇÊûÑËÆ°ÁÆóËÆæÂ§áÂíåÁéØÂ¢É„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ÈÄüÂ∫¶Âø´ÔºöÂ§ßÊ®°ÂûãÂä†ËΩΩÈÄüÂ∫¶ÊÖ¢ÔºåJittorÊ°ÜÊû∂ÈÄöËøáÈõ∂Êã∑Ë¥ùÊäÄÊúØÔºåÂ§ßÊ®°ÂûãÂä†ËΩΩÂºÄÈîÄÈôç‰Ωé40%ÔºåÂêåÊó∂ÔºåÈÄöËøáÂÖÉÁÆóÂ≠êËá™Âä®ÁºñËØë‰ºòÂåñÔºåËÆ°ÁÆóÊÄßËÉΩÁõ∏ÊØîÂêåÁ±ªÊ°ÜÊû∂ÊèêÂçá20%‰ª•‰∏ä„ÄÇ&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;JittorÂ§ßÊ®°ÂûãÂ∫ìÊû∂ÊûÑÂõæÂ¶Ç‰∏ãÊâÄÁ§∫„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/arch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÈÖçÁΩÆË¶ÅÊ±Ç&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂÜÖÂ≠òË¶ÅÊ±ÇÔºöËá≥Â∞ë2GÔºåÊé®Ëçê32G&lt;/li&gt; &#xA; &lt;li&gt;ÊòæÂ≠òÔºöÂèØÈÄâÔºå Êé®Ëçê16G&lt;/li&gt; &#xA; &lt;li&gt;Êìç‰ΩúÁ≥ªÁªüÔºöÊîØÊåÅWindowsÔºåMacÔºåLinuxÂÖ®Âπ≥Âè∞„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Á£ÅÁõòÁ©∫Èó¥ÔºöËá≥Â∞ë40GBÁ©∫Èó≤Á£ÅÁõòÁ©∫Èó¥ÔºåÁî®‰∫é‰∏ãËΩΩÂèÇÊï∞ÂíåÂ≠òÂÇ®‰∫§Êç¢Êñá‰ª∂„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;PythonÁâàÊú¨Ë¶ÅÊ±ÇËá≥Â∞ë&lt;code&gt;3.8&lt;/code&gt;ÔºàLinuxÁöÑPythonÁâàÊú¨Ëá≥Â∞ë&lt;code&gt;3.7&lt;/code&gt;Ôºâ„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Á£ÅÁõòÁ©∫Èó¥‰∏çÂ§üÊó∂ÔºåÂèØ‰ª•ÈÄöËøáÁéØÂ¢ÉÂèòÈáè&lt;code&gt;JITTOR_HOME&lt;/code&gt;ÊåáÂÆöÁºìÂ≠òÂ≠òÊîæË∑ØÂæÑ„ÄÇ ÂÜÖÂ≠òÊàñËÄÖÊòæÂ≠ò‰∏çÂ§üÔºåÂá∫Áé∞ËøõÁ®ãË¢´ÊùÄÊ≠ªÁöÑÊÉÖÂÜµÔºåËØ∑ÂèÇËÄÉ‰∏ãÊñπÔºå&lt;a href=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/#%E9%85%8D%E7%BD%AE%E8%A6%81%E6%B1%82%E4%BD%8E&#34;&gt;ÈôêÂà∂ÂÜÖÂ≠òÊ∂àËÄóÁöÑÊñπÊ≥ï&lt;/a&gt;„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÈÉ®ÁΩ≤ÊñπÊ≥ï&lt;/h2&gt; &#xA;&lt;p&gt;ÂèØ‰ª•ÈÄöËøá‰∏ãËø∞Êåá‰ª§ÂÆâË£Ö‰æùËµñ„ÄÇÔºàÊ≥®ÊÑèÔºöÊ≠§ËÑöÊú¨‰ºöÂÆâË£ÖJittorÁâàtorchÔºåÊé®ËçêÁî®Êà∑Êñ∞Âª∫ÁéØÂ¢ÉËøêË°åÔºâ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ÂõΩÂÜÖ‰ΩøÁî® gitlink clone&#xA;git clone https://gitlink.org.cn/jittor/JittorLLMs.git --depth 1&#xA;# github: git clone https://github.com/Jittor/JittorLLMs.git --depth 1&#xA;cd JittorLLMs&#xA;# -i ÊåáÂÆöÁî®jittorÁöÑÊ∫êÔºå -I Âº∫Âà∂ÈáçË£ÖJittorÁâàtorch&#xA;pip install -r requirements.txt -i https://pypi.jittor.org/simple -I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÂá∫Áé∞Êâæ‰∏çÂà∞jittorÁâàÊú¨ÁöÑÈîôËØØÔºåÂèØËÉΩÊòØÊÇ®‰ΩøÁî®ÁöÑÈïúÂÉèËøòÊ≤°ÊúâÊõ¥Êñ∞Ôºå‰ΩøÁî®Â¶Ç‰∏ãÂëΩ‰ª§Êõ¥Êñ∞ÊúÄÊñ∞ÁâàÔºö&lt;code&gt;pip install jittor -U -i https://pypi.org/simple&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;ÈÉ®ÁΩ≤Âè™ÈúÄ‰∏ÄË°åÂëΩ‰ª§Âç≥ÂèØÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python cli_demo.py [chatglm|pangualpha|llama|chatrwkv]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËøêË°åÂêé‰ºöËá™Âä®‰ªéÊúçÂä°Âô®‰∏ä‰∏ãËΩΩÊ®°ÂûãÊñá‰ª∂Âà∞Êú¨Âú∞Ôºå‰ºöÂç†Áî®Ê†πÁõÆÂΩï‰∏ã‰∏ÄÂÆöÁöÑÁ°¨ÁõòÁ©∫Èó¥„ÄÇ ‰æãÂ¶ÇÂØπ‰∫éÁõòÂè§Œ±Á∫¶‰∏∫ 15G„ÄÇÊúÄÂºÄÂßãËøêË°åÁöÑÊó∂ÂÄô‰ºöÁºñËØë‰∏Ä‰∫õCUDAÁÆóÂ≠êÔºåËøô‰ºöËä±Ë¥π‰∏Ä‰∫õÊó∂Èó¥ËøõË°åÂä†ËΩΩ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;‰∏ãÂõæÊòØ &lt;a href=&#34;https://github.com/THUDM/ChatGLM-6B&#34;&gt;ChatGLM&lt;/a&gt; ÁöÑÂÆûÊó∂ÂØπËØùÊà™ÂõæÔºö&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/ChatGLM2.gif&#34; width=&#34;350&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;p&gt;‰∏ãÂõæÊòØ &lt;a href=&#34;https://openi.org.cn/pangu/&#34;&gt;ÁõòÂè§Alpha&lt;/a&gt; ÁöÑÂÆûÊó∂ÂØπËØùÊà™ÂõæÔºö&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/PanGuAlpha2.gif&#34; width=&#34;350&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;p&gt;‰∏ãÂõæÊòØ &lt;a href=&#34;https://github.com/BlinkDL/ChatRWKV&#34;&gt;ChatRWKV&lt;/a&gt; ÁöÑÂÆûÊó∂ÂØπËØùÊà™ÂõæÔºö&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/ChatRWKV2.gif&#34; width=&#34;350&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;p&gt;‰∏ãÂõæÊòØ &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;LLaMA&lt;/a&gt; ÁöÑÂÆûÊó∂ÂØπËØùÊà™ÂõæÔºö&lt;/p&gt; &#xA;&lt;center&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/LLaMA.gif&#34; width=&#34;350&#34;&gt; &#xA;&lt;/center&gt; &#xA;&lt;p&gt;ÁõÆÂâçÊîØÊåÅ‰∫Ü &lt;code&gt;ChatGLM&lt;/code&gt; Âíå ÁõòÂè§Œ± ÁöÑ‰∏≠ÊñáÂØπËØùÔºå&lt;code&gt;ChatRWKV&lt;/code&gt; Âíå &lt;code&gt;LLaMA&lt;/code&gt; ÊîØÊåÅËã±ÊñáÂØπËØùÔºåÂêéÁª≠‰ºöÊåÅÁª≠Êõ¥Êñ∞ÊúÄÊñ∞ÁöÑÊ®°ÂûãÂèÇÊï∞‰ª•ÂèäÂæÆË∞ÉÁöÑÁªìÊûú„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÂÜÖÂ≠òÊàñËÄÖÊòæÂ≠ò‰∏çÂ§üÔºåÂá∫Áé∞ËøõÁ®ãË¢´ÊùÄÊ≠ªÁöÑÊÉÖÂÜµÔºåËØ∑ÂèÇËÄÉ‰∏ãÊñπÔºå&lt;a href=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/#%E9%85%8D%E7%BD%AE%E8%A6%81%E6%B1%82%E4%BD%8E&#34;&gt;ÈôêÂà∂ÂÜÖÂ≠òÊ∂àËÄóÁöÑÊñπÊ≥ï&lt;/a&gt;„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;WebDemo&lt;/h3&gt; &#xA;&lt;p&gt;JittorLLMÈÄöËøágradioÂ∫ìÔºåÂÖÅËÆ∏Áî®Êà∑Âú®ÊµèËßàÂô®‰πã‰∏≠ÂíåÂ§ßÊ®°ÂûãÁõ¥Êé•ËøõË°åÂØπËØù„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo.py chatglm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂèØ‰ª•ÂæóÂà∞‰∏ãÂõæÊâÄÁ§∫ÁöÑÁªìÊûú„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/web_demo.png&#34; alt=&#34;Web_demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ÂêéÁ´ØÊúçÂä°ÈÉ®ÁΩ≤&lt;/h3&gt; &#xA;&lt;p&gt;JittorLLMÂú®api.pyÊñá‰ª∂‰πã‰∏≠ÔºåÊèê‰æõ‰∫Ü‰∏Ä‰∏™Êû∂ËÆæÂêéÁ´ØÊúçÂä°ÁöÑÁ§∫‰æã„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python api.py chatglm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Êé•ÁùÄÂèØ‰ª•‰ΩøÁî®Â¶Ç‰∏ã‰ª£Á†ÅËøõË°åÁõ¥Êé•ËÆøÈóÆ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;post_data = json.dumps({&#39;prompt&#39;: &#39;Hello, solve 5x=13&#39;})&#xA;print(json.loads(requests.post(&#34;http://0.0.0.0:8000&#34;, post_data).text)[&#39;response&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ÈÖçÁΩÆË¶ÅÊ±Ç‰Ωé&lt;/h2&gt; &#xA;&lt;p&gt;ÈíàÂØπÂ§ßÊ®°ÂûãÊòæÂ≠òÊ∂àËÄóÂ§ßÁ≠âÁóõÁÇπÔºåJittorÂõ¢ÈòüÁ†îÂèë‰∫ÜÂä®ÊÄÅ‰∫§Êç¢ÊäÄÊúØÔºåÊ†πÊçÆÊàë‰ª¨Ë∞ÉÁ†îÔºåJittorÊ°ÜÊû∂ÊòØ‰∏ñÁïå‰∏äÈ¶ñ‰∏™ÊîØÊåÅÂä®ÊÄÅÂõæÂèòÈáèËá™Âä®‰∫§Êç¢ÂäüËÉΩÁöÑÊ°ÜÊû∂ÔºåÂå∫Âà´‰∫é‰ª•ÂæÄÁöÑÂü∫‰∫éÈùôÊÄÅÂõæ‰∫§Êç¢ÊäÄÊúØÔºåÁî®Êà∑‰∏çÈúÄË¶Å‰øÆÊîπ‰ªª‰Ωï‰ª£Á†ÅÔºåÂéüÁîüÁöÑÂä®ÊÄÅÂõæ‰ª£Á†ÅÂç≥ÂèØÁõ¥Êé•ÊîØÊåÅÂº†Èáè‰∫§Êç¢ÔºåÂº†ÈáèÊï∞ÊçÆÂèØ‰ª•Âú®ÊòæÂ≠ò-ÂÜÖÂ≠ò-Á°¨Áõò‰πãÈó¥Ëá™Âä®‰∫§Êç¢ÔºåÈôç‰ΩéÁî®Êà∑ÂºÄÂèëÈöæÂ∫¶„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÂêåÊó∂ÔºåÊ†πÊçÆÊàë‰ª¨Ë∞ÉÁ†îÔºåJittorÂ§ßÊ®°ÂûãÊé®ÁêÜÂ∫ì‰πüÊòØÁõÆÂâçÂØπÈÖçÁΩÆÈó®ÊßõË¶ÅÊ±ÇÊúÄ‰ΩéÁöÑÊ°ÜÊû∂ÔºåÂè™ÈúÄË¶ÅÂèÇÊï∞Á£ÅÁõòÁ©∫Èó¥Âíå2GÂÜÖÂ≠òÔºåÊó†ÈúÄÊòæÂç°Ôºå‰πüÂèØ‰ª•ÈÉ®ÁΩ≤Â§ßÊ®°ÂûãÔºå‰∏ãÈù¢ÊòØÂú®‰∏çÂêåÁ°¨‰ª∂ÈÖçÁΩÆÊù°‰ª∂‰∏ãÁöÑËµÑÊ∫êÊ∂àËÄó‰∏éÈÄüÂ∫¶ÂØπÊØî„ÄÇÂèØ‰ª•ÂèëÁé∞ÔºåJittorLLMsÂú®ÊòæÂ≠òÂÖÖË∂≥ÁöÑÊÉÖÂÜµ‰∏ãÔºåÊÄßËÉΩ‰ºò‰∫éÂêåÁ±ªÊ°ÜÊû∂ÔºåËÄåÊòæÂ≠ò‰∏çË∂≥ÁîöËá≥Ê≤°ÊúâÊòæÂç°ÔºåJittorLLMsÈÉΩËÉΩ‰ª•‰∏ÄÂÆöÈÄüÂ∫¶ËøêË°å„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ËäÇÁúÅÂÜÖÂ≠òÊñπÊ≥ïÔºåËØ∑ÂÆâË£ÖJittorÁâàÊú¨Â§ß‰∫é1.3.7.8ÔºåÂπ∂Ê∑ªÂä†Â¶Ç‰∏ãÁéØÂ¢ÉÂèòÈáèÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export JT_SAVE_MEM=1&#xA;# ÈôêÂà∂cpuÊúÄÂ§ö‰ΩøÁî®16G&#xA;export cpu_mem_limit=16000000000&#xA;# ÈôêÂà∂deviceÂÜÖÂ≠òÔºàÂ¶Çgpu„ÄÅtpuÁ≠âÔºâÊúÄÂ§ö‰ΩøÁî®8G&#xA;export device_mem_limit=8000000000&#xA;# windows Áî®Êà∑ÔºåËØ∑‰ΩøÁî®powershell&#xA;# $env:JT_SAVE_MEM=&#34;1&#34;&#xA;# $env:cpu_mem_limit=&#34;16000000000&#34;&#xA;# $env:device_mem_limit=&#34;8000000000&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Áî®Êà∑ÂèØ‰ª•Ëá™Áî±ËÆæÂÆöcpuÂíåËÆæÂ§áÂÜÖÂ≠òÁöÑ‰ΩøÁî®ÈáèÔºåÂ¶ÇÊûú‰∏çÂ∏åÊúõÂØπÂÜÖÂ≠òËøõË°åÈôêÂà∂ÔºåÂèØ‰ª•ËÆæÁΩÆ‰∏∫&lt;code&gt;-1&lt;/code&gt;„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ÈôêÂà∂cpuÊúÄÂ§ö‰ΩøÁî®16G&#xA;export cpu_mem_limit=-1&#xA;# ÈôêÂà∂deviceÂÜÖÂ≠òÔºàÂ¶Çgpu„ÄÅtpuÁ≠âÔºâÊúÄÂ§ö‰ΩøÁî®8G&#xA;export device_mem_limit=-1&#xA;# windows Áî®Êà∑ÔºåËØ∑‰ΩøÁî®powershell&#xA;# $env:JT_SAVE_MEM=&#34;1&#34;&#xA;# $env:cpu_mem_limit=&#34;-1&#34;&#xA;# $env:device_mem_limit=&#34;-1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÊÉ≥Ë¶ÅÊ∏ÖÁêÜÁ£ÅÁõò‰∫§Êç¢Êñá‰ª∂ÔºåÂèØ‰ª•ËøêË°åÂ¶Ç‰∏ãÂëΩ‰ª§&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m jittor_utils.clean_cache swap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ÈÄüÂ∫¶Êõ¥Âø´&lt;/h2&gt; &#xA;&lt;p&gt;Â§ßÊ®°ÂûãÂú®Êé®ÁêÜËøáÁ®ã‰∏≠ÔºåÂ∏∏Â∏∏Á¢∞Âà∞ÂèÇÊï∞Êñá‰ª∂ËøáÂ§ßÔºåÊ®°ÂûãÂä†ËΩΩÊïàÁéá‰Ωé‰∏ãÁ≠âÈóÆÈ¢ò„ÄÇJittorÊ°ÜÊû∂ÈÄöËøáÂÜÖÂ≠òÁõ¥ÈÄöËØªÂèñÔºåÂáèÂ∞ëÂÜÖÂ≠òÊã∑Ë¥ùÊï∞ÈáèÔºåÂ§ßÂ§ßÊèêÂçáÊ®°ÂûãÂä†ËΩΩÊïàÁéá„ÄÇÁõ∏ÊØîPyTorchÊ°ÜÊû∂ÔºåJittorÊ°ÜÊû∂ÁöÑÊ®°ÂûãÂä†ËΩΩÊïàÁéáÊèêÂçá‰∫Ü40%„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÂèØÁßªÊ§çÊÄßÈ´ò&lt;/h2&gt; &#xA;&lt;p&gt;JittorÂõ¢ÈòüÂèëÂ∏ÉJittorÁâàPyTorchÊé•Âè£JTorchÔºåÁî®Êà∑Êó†ÈúÄ‰øÆÊîπ‰ªª‰Ωï‰ª£Á†ÅÔºåÂè™ÈúÄË¶ÅÊåâÁÖßÂ¶Ç‰∏ãÊñπÊ≥ïÂÆâË£ÖÔºåÂç≥ÂèØÈÄöËøáJittorÊ°ÜÊû∂ÁöÑ‰ºòÂäøËäÇÁúÅÊòæÂ≠ò„ÄÅÊèêÈ´òÊïàÁéá„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install torch -i https://pypi.jittor.org/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÈÄöËøájtorchÔºåÂç≥ÂèØÈÄÇÈÖçÂêÑÁ±ªÂºÇÊûÑÂ§ßÊ®°Âûã‰ª£Á†ÅÔºåÂ¶ÇÂ∏∏ËßÅÁöÑMegatron„ÄÅHugging Face TransformersÔºåÂùáÂèØÁõ¥Êé•ÁßªÊ§ç„ÄÇÂêåÊó∂ÔºåÈÄöËøáËÆ°ÂõæÂ∫ïÂ±ÇÂÖÉÁÆóÂ≠êÁ°¨‰ª∂ÈÄÇÈÖçËÉΩÂäõÔºåÂèØ‰ª•ÂçÅÂàÜÊñπ‰æøÁöÑËøÅÁßªÂà∞ÂêÑÁ±ªÂõΩÂÜÖÂ§ñËÆ°ÁÆóËÆæÂ§á‰∏ä„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Ê¨¢ËøéÂêÑ‰ΩçÂ§ßÊ®°ÂûãÁî®Êà∑Â∞ùËØï„ÄÅ‰ΩøÁî®ÔºåÂπ∂‰∏îÁªôÊàë‰ª¨ÊèêÂá∫ÂÆùË¥µÁöÑÊÑèËßÅÔºåÊú™Êù•ÔºåÈùûÂçÅÁßëÊäÄÂíåÊ∏ÖÂçéÂ§ßÂ≠¶ÂèØËßÜÂ™í‰ΩìÁ†îÁ©∂‰∏≠ÂøÉÂ∞ÜÁªßÁª≠‰∏ìÊ≥®‰∫éÂ§ßÊ®°ÂûãÁöÑÊîØÊíëÔºåÊúçÂä°Â•ΩÂ§ßÊ®°ÂûãÁî®Êà∑ÔºåÊèê‰æõÊàêÊú¨Êõ¥‰ΩéÔºåÊïàÁéáÊõ¥È´òÁöÑËß£ÂÜ≥ÊñπÊ°àÔºåÂêåÊó∂ÔºåÊ¨¢ËøéÂêÑ‰ΩçÂ§ßÊ®°ÂûãÁî®Êà∑Êèê‰∫§‰ª£Á†ÅÂà∞JittorLLMsÔºå‰∏∞ÂØåJittorÂ§ßÊ®°ÂûãÂ∫ìÁöÑÊîØÊåÅ„ÄÇ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JittorÊñáÊ°£Ôºö&lt;a href=&#34;https://cg.cs.tsinghua.edu.cn/jittor/assets/docs/index.html&#34;&gt;https://cg.cs.tsinghua.edu.cn/jittor/assets/docs/index.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JittorËÆ∫ÂùõÔºö&lt;a href=&#34;https://discuss.jittor.org/&#34;&gt;https://discuss.jittor.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JittorÂºÄÂèëËÄÖ‰∫§ÊµÅÁæ§Ôºö761222083&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/qq.png&#34; width=&#34;250&#34; height=&#34;300&#34;&gt; &#xA;&lt;h2&gt;ÂêéÁª≠ËÆ°Âàí&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ê®°ÂûãËÆ≠ÁªÉ‰∏éÂæÆË∞É&lt;/li&gt; &#xA; &lt;li&gt;ÁßªÊ§ç MOSS Â§ßÊ®°Âûã&lt;/li&gt; &#xA; &lt;li&gt;Âä®ÊÄÅ swap ÊÄßËÉΩ‰ºòÂåñ&lt;/li&gt; &#xA; &lt;li&gt;CPU ÊÄßËÉΩ‰ºòÂåñ&lt;/li&gt; &#xA; &lt;li&gt;Ê∑ªÂä†Êõ¥Â§öÂõΩÂÜÖÂ§ñ‰ºòÁßÄÂ§ßÊ®°ÂûãÊîØÊåÅ&lt;/li&gt; &#xA; &lt;li&gt;......&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ê®°ÂûãÊîØÊåÅTODO list&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MOSS&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LianjiaTech/BELLE&#34;&gt;BELLE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ê¨¢ËøéÂêÑ‰ΩçÂêëÊàë‰ª¨Êèê‰∫§ËØ∑Ê±Ç&lt;/p&gt; &#xA;&lt;p&gt;Ê¨¢ËøéÂêÑ‰ΩçÂêëÊàë‰ª¨ÊèêÂá∫ÂÆùË¥µÁöÑÊÑèËßÅÔºåÂèØÂä†ÂÖ•ËÆ°ÂõæÂºÄÂèëËÄÖ‰∫§ÊµÅÁæ§ÂÆûÊó∂‰∫§ÊµÅ„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÂÖ≥‰∫éÊàë‰ª¨&lt;/h2&gt; &#xA;&lt;p&gt;Êú¨ËÆ°ÂõæÂ§ßÊ®°ÂûãÊé®ÁêÜÂ∫ìÔºåÁî±ÈùûÂçÅÁßëÊäÄÈ¢ÜË°îÔºå‰∏éÊ∏ÖÂçéÂ§ßÂ≠¶ÂèØËßÜÂ™í‰ΩìÁ†îÁ©∂‰∏≠ÂøÉÂêà‰ΩúÁ†îÂèëÔºåÂ∏åÊúõ‰∏∫ÂõΩÂÜÖÂ§ßÊ®°ÂûãÁöÑÁ†îÁ©∂Êèê‰æõËΩØÁ°¨‰ª∂ÁöÑÊîØÊíë„ÄÇ&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Jittor/JittorLLMs/main/imgs/fitten.jpg&#34; width=&#34;250&#34;&gt; &#xA;&lt;p&gt;Âåó‰∫¨ÈùûÂçÅÁßëÊäÄÊúâÈôêÂÖ¨Âè∏ÊòØÂõΩÂÜÖ‰∏ì‰∏ö‰ªé‰∫ã‰∫∫Â∑•Êô∫ËÉΩÊúçÂä°ÁöÑÁßëÊäÄÂÖ¨Âè∏ÔºåÂú®3D AIGC„ÄÅÊ∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂‰ª•ÂèäÂ§ßÊ®°ÂûãÈ¢ÜÂüüÔºåÂÖ∑ÊúâÈ¢ÜÂÖàÁöÑÊäÄÊúØ‰ºòÂäø„ÄÇÊäÄÊúØ‰∏äËá¥Âäõ‰∫éÂä†ÈÄü‰∫∫Â∑•Êô∫ËÉΩÁÆóÊ≥ï‰ªéÁ°¨‰ª∂Âà∞ËΩØ‰ª∂ÂÖ®ÊµÅÁ®ãÁöÑËêΩÂú∞Â∫îÁî®„ÄÅÊèê‰æõÂêÑÁ±ªËÆ°ÁÆóÂä†ÈÄüÁ°¨‰ª∂ÁöÑÈÄÇÈÖç„ÄÅÂÆöÂà∂Ê∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂‰ª•Âèä‰ºòÂåñ‰∫∫Â∑•Êô∫ËÉΩÂ∫îÁî®ÊÄßËÉΩÈÄüÂ∫¶Á≠âÊúçÂä°„ÄÇÂÖ¨Âè∏ÊäÄÊúØÈ™®Âπ≤ÊØï‰∏öËá™Ê∏ÖÂçéÂ§ßÂ≠¶ÔºåÂÖ∑Êúâ‰∏∞ÂØåÁöÑÁ≥ªÁªüËΩØ‰ª∂„ÄÅÂõæÂΩ¢Â≠¶„ÄÅÁºñËØëÊäÄÊúØÂíåÊ∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂ÁöÑÁ†îÂèëÁªèÈ™å„ÄÇÂÖ¨Âè∏Á†îÂèë‰∫ÜÂü∫‰∫éËÆ°ÂõæÊ∑±Â∫¶Â≠¶‰π†Ê°ÜÊû∂ÁöÑÂõΩ‰∫ßËá™‰∏ªÂèØÊéß‰∫∫Â∑•Êô∫ËÉΩÁ≥ªÁªüÔºåÂÆåÊàê‰∫ÜÂØπËøëÂçÅ‰∏™ÂõΩ‰∫ßÂä†ÈÄüÁ°¨‰ª∂ÂéÇÂïÜÁöÑÈÄÇÈÖçÔºåÊ≠£ÁßØÊûÅ‰øÉËøõ‰∫éÂõΩ‰∫ß‰∫∫Â∑•Êô∫ËÉΩÁîüÊÄÅÁöÑÂèëÂ±ï„ÄÇÂºÄÊ∫ê‰∫ÜÁöÑÈ´òÊÄßËÉΩÁöÑÁ•ûÁªèËæêÂ∞ÑÂú∫Ê∏≤ÊüìÂ∫ìJNeRFÔºåÂèØÁîüÊàêÈ´òË¥®Èáè3D AIGCÊ®°ÂûãÔºåÂºÄÊ∫êÁöÑJittorLLMsÊòØÁõÆÂâçÁ°¨‰ª∂ÈÖçÁΩÆË¶ÅÊ±ÇÊúÄ‰ΩéÁöÑÂ§ßÊ®°ÂûãÊé®ÁêÜÂ∫ì„ÄÇ&lt;/p&gt;</summary>
  </entry>
</feed>