<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-24T01:36:54Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stitionai/devika</title>
    <updated>2024-03-24T01:36:54Z</updated>
    <id>tag:github.com,2024-03-24:/stitionai/devika</id>
    <link href="https://github.com/stitionai/devika" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Devika is an Agentic AI Software Engineer that can understand high-level human instructions, break them down into steps, research relevant information, and write code to achieve the given objective. Devika aims to be a competitive open-source alternative to Devin by Cognition AI.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/stitionai/devika/main/.assets/devika-avatar.png&#34; alt=&#34;Devika Logo&#34; width=&#34;250&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;üöÄ Devika - Agentic AI Software Engineer üë©‚Äçüíª&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stitionai/devika/main/.assets/devika-screenshot.png&#34; alt=&#34;devika screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; This project is currently in a very early development/experimental stage. There are a lot of unimplemented/broken features at the moment. Contributions are welcome to help out with the progress!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#system-architecture&#34;&gt;System Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#under-the-hood&#34;&gt;Under The Hood&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#ai-planning-and-reasoning&#34;&gt;AI Planning and Reasoning&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#keyword-extraction&#34;&gt;Keyword Extraction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#browser-interaction&#34;&gt;Browser Interaction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#code-writing&#34;&gt;Code Writing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#community-discord-server&#34;&gt;Community Discord Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Devika is an advanced AI software engineer that can understand high-level human instructions, break them down into steps, research relevant information, and write code to achieve the given objective. Devika utilizes large language models, planning and reasoning algorithms, and web browsing abilities to intelligently develop software.&lt;/p&gt; &#xA;&lt;p&gt;Devika aims to revolutionize the way we build software by providing an AI pair programmer who can take on complex coding tasks with minimal human guidance. Whether you need to create a new feature, fix a bug, or develop an entire project from scratch, Devika is here to assist you.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Devika is modeled after &lt;a href=&#34;https://www.cognition-labs.com/introducing-devin&#34;&gt;Devin&lt;/a&gt; by Cognition AI. This project aims to be an open-source alternative to Devin with an &#34;overly ambitious&#34; goal to meet the same score as Devin in the &lt;a href=&#34;https://www.swebench.com/&#34;&gt;SWE-bench&lt;/a&gt; Benchmarks... and eventually beat it?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stitionai/devika/assets/26198477/cfed6945-d53b-4189-9fbe-669690204206&#34;&gt;https://github.com/stitionai/devika/assets/26198477/cfed6945-d53b-4189-9fbe-669690204206&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ü§ñ Supports &lt;strong&gt;Claude 3&lt;/strong&gt;, &lt;strong&gt;GPT-4&lt;/strong&gt;, &lt;strong&gt;GPT-3.5&lt;/strong&gt;, and &lt;strong&gt;Local LLMs&lt;/strong&gt; via &lt;a href=&#34;https://ollama.com&#34;&gt;Ollama&lt;/a&gt;. For optimal performance: Use the &lt;strong&gt;Claude 3&lt;/strong&gt; family of models.&lt;/li&gt; &#xA; &lt;li&gt;üß† Advanced AI planning and reasoning capabilities&lt;/li&gt; &#xA; &lt;li&gt;üîç Contextual keyword extraction for focused research&lt;/li&gt; &#xA; &lt;li&gt;üåê Seamless web browsing and information gathering&lt;/li&gt; &#xA; &lt;li&gt;üíª Code writing in multiple programming languages&lt;/li&gt; &#xA; &lt;li&gt;üìä Dynamic agent state tracking and visualization&lt;/li&gt; &#xA; &lt;li&gt;üí¨ Natural language interaction via chat interface&lt;/li&gt; &#xA; &lt;li&gt;üìÇ Project-based organization and management&lt;/li&gt; &#xA; &lt;li&gt;üîå Extensible architecture for adding new features and integrations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;System Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Devika&#39;s system architecture consists of the following key components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;: A web-based chat interface for interacting with Devika, viewing project files, and monitoring the agent&#39;s state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agent Core&lt;/strong&gt;: The central component that orchestrates the AI planning, reasoning, and execution process. It communicates with various sub-agents and modules to accomplish tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Large Language Models&lt;/strong&gt;: Devika leverages state-of-the-art language models like &lt;strong&gt;Claude&lt;/strong&gt;, &lt;strong&gt;GPT-4&lt;/strong&gt;, and &lt;strong&gt;Local LLMs via Ollama&lt;/strong&gt; for natural language understanding, generation, and reasoning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Planning and Reasoning Engine&lt;/strong&gt;: Responsible for breaking down high-level objectives into actionable steps and making decisions based on the current context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Research Module&lt;/strong&gt;: Utilizes keyword extraction and web browsing capabilities to gather relevant information for the task at hand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Writing Module&lt;/strong&gt;: Generates code based on the plan, research findings, and user requirements. Supports multiple programming languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Browser Interaction Module&lt;/strong&gt;: Enables Devika to navigate websites, extract information, and interact with web elements as needed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Knowledge Base&lt;/strong&gt;: Stores and retrieves project-specific information, code snippets, and learned knowledge for efficient access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: Persists project data, agent states, and configuration settings.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://github.com/stitionai/devika/raw/main/ARCHITECTURE.md&#34;&gt;&lt;strong&gt;ARCHITECTURE.md&lt;/strong&gt;&lt;/a&gt; for the detailed documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to run the project locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;code&gt;uv&lt;/code&gt; - Python Package manager (&lt;a href=&#34;https://github.com/astral-sh/uv&#34;&gt;https://github.com/astral-sh/uv&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;bun&lt;/code&gt; - JavaScript runtime (&lt;a href=&#34;https://bun.sh/&#34;&gt;https://bun.sh/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Install and setup &lt;code&gt;Ollama&lt;/code&gt; (&lt;a href=&#34;https://ollama.com/&#34;&gt;https://ollama.com/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Set the API Keys in the &lt;code&gt;config.toml&lt;/code&gt; file. (This will soon be moving to the UI where you can set these keys from the UI itself without touching the command-line, want to implement it? See this issue: &lt;a href=&#34;https://github.com/stitionai/devika/issues/3&#34;&gt;https://github.com/stitionai/devika/issues/3&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Then execute the following set of command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ollama serve&#xA;git clone https://github.com/stitionai/devika.git&#xA;cd devika/&#xA;uv venv&#xA;uv pip install -r requirements.txt&#xA;cd ui/&#xA;bun install&#xA;bun run dev&#xA;python3 devika.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker images will be released soon. &lt;span&gt;üôå&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Devika requires the following things as dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ollama (follow the instructions here to install it: &lt;a href=&#34;https://ollama.com/&#34;&gt;https://ollama.com/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Bun (follow the instructions here to install it: &lt;a href=&#34;https://bun.sh/&#34;&gt;https://bun.sh/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To install Devika, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the Devika repository: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/stitionai/devika.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Navigate to the project directory: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd devika&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install the required dependencies: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;playwright install --with-deps # installs browsers in playwright (and their deps) if required&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set up the necessary API keys and configuration (see &lt;a href=&#34;https://raw.githubusercontent.com/stitionai/devika/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section).&lt;/li&gt; &#xA; &lt;li&gt;Start the Devika server: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python devika.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compile and run the UI server: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ui/&#xA;bun install&#xA;bun run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Access the Devika web interface by opening a browser and navigating to &lt;code&gt;http://127.0.0.1:3000&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To start using Devika, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the Devika web interface in your browser.&lt;/li&gt; &#xA; &lt;li&gt;Create a new project by clicking on the &#34;New Project&#34; button and providing a name for your project.&lt;/li&gt; &#xA; &lt;li&gt;Select the desired programming language and model configuration for your project.&lt;/li&gt; &#xA; &lt;li&gt;In the chat interface, provide a high-level objective or task description for Devika to work on.&lt;/li&gt; &#xA; &lt;li&gt;Devika will process your request, break it down into steps, and start working on the task.&lt;/li&gt; &#xA; &lt;li&gt;Monitor Devika&#39;s progress, view generated code, and provide additional guidance or feedback as needed.&lt;/li&gt; &#xA; &lt;li&gt;Once Devika completes the task, review the generated code and project files.&lt;/li&gt; &#xA; &lt;li&gt;Iterate and refine the project as desired by providing further instructions or modifications.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Devika requires certain configuration settings and API keys to function properly. Update the &lt;code&gt;config.toml&lt;/code&gt; file with the following information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;: Your OpenAI API key for accessing GPT models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLAUDE_API_KEY&lt;/code&gt;: Your Anthropic API key for accessing Claude models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BING_API_KEY&lt;/code&gt;: Your Bing Search API key for web searching capabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DATABASE_URL&lt;/code&gt;: The URL for your database connection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOG_DIRECTORY&lt;/code&gt;: The directory where Devika&#39;s logs will be stored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PROJECT_DIRECTORY&lt;/code&gt;: The directory where Devika&#39;s projects will be stored.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure to keep your API keys secure and do not share them publicly.&lt;/p&gt; &#xA;&lt;h2&gt;Under The Hood&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s dive deeper into some of the key components and techniques used in Devika:&lt;/p&gt; &#xA;&lt;h3&gt;AI Planning and Reasoning&lt;/h3&gt; &#xA;&lt;p&gt;Devika employs advanced AI planning and reasoning algorithms to break down high-level objectives into actionable steps. The planning process involves the following stages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Objective Understanding&lt;/strong&gt;: Devika analyzes the given objective or task description to understand the user&#39;s intent and requirements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Context Gathering&lt;/strong&gt;: Relevant context is collected from the conversation history, project files, and knowledge base to inform the planning process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Step Generation&lt;/strong&gt;: Based on the objective and context, Devika generates a sequence of high-level steps to accomplish the task.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Refinement and Validation&lt;/strong&gt;: The generated steps are refined and validated to ensure their feasibility and alignment with the objective.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Execution&lt;/strong&gt;: Devika executes each step in the plan, utilizing various sub-agents and modules as needed.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The reasoning engine constantly evaluates the progress and makes adjustments to the plan based on new information or feedback received during execution.&lt;/p&gt; &#xA;&lt;h3&gt;Keyword Extraction&lt;/h3&gt; &#xA;&lt;p&gt;To enable focused research and information gathering, Devika employs keyword extraction techniques. The process involves the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;: The input text (objective, conversation history, or project files) is preprocessed by removing stop words, tokenizing, and normalizing the text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyword Identification&lt;/strong&gt;: Devika uses the BERT (Bidirectional Encoder Representations from Transformers) model to identify important keywords and phrases from the preprocessed text. BERT&#39;s pre-training on a large corpus allows it to capture semantic relationships and understand the significance of words in the given context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyword Ranking&lt;/strong&gt;: The identified keywords are ranked based on their relevance and importance to the task at hand. Techniques like TF-IDF (Term Frequency-Inverse Document Frequency) and TextRank are used to assign scores to each keyword.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keyword Selection&lt;/strong&gt;: The top-ranked keywords are selected as the most relevant and informative for the current context. These keywords are used to guide the research and information gathering process.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By extracting contextually relevant keywords, Devika can focus its research efforts and retrieve pertinent information to assist in the task completion.&lt;/p&gt; &#xA;&lt;h3&gt;Browser Interaction&lt;/h3&gt; &#xA;&lt;p&gt;Devika incorporates browser interaction capabilities to navigate websites, extract information, and interact with web elements. The browser interaction module leverages the Playwright library to automate web interactions. The process involves the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Navigation&lt;/strong&gt;: Devika uses Playwright to navigate to specific URLs or perform searches based on the keywords or requirements provided.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Element Interaction&lt;/strong&gt;: Playwright allows Devika to interact with web elements such as clicking buttons, filling forms, and extracting text from specific elements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Page Parsing&lt;/strong&gt;: Devika parses the HTML structure of the web pages visited to extract relevant information. It uses techniques like CSS selectors and XPath to locate and extract specific data points.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JavaScript Execution&lt;/strong&gt;: Playwright enables Devika to execute JavaScript code within the browser context, allowing for dynamic interactions and data retrieval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Screenshot Capture&lt;/strong&gt;: Devika can capture screenshots of the web pages visited, which can be useful for visual reference or debugging purposes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The browser interaction module empowers Devika to gather information from the web, interact with online resources, and incorporate real-time data into its decision-making and code generation processes.&lt;/p&gt; &#xA;&lt;h3&gt;Code Writing&lt;/h3&gt; &#xA;&lt;p&gt;Devika&#39;s code writing module generates code based on the plan, research findings, and user requirements. The process involves the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Language Selection&lt;/strong&gt;: Devika identifies the programming language specified by the user or infers it based on the project context.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Structure Generation&lt;/strong&gt;: Based on the plan and language-specific patterns, Devika generates the high-level structure of the code, including classes, functions, and modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Population&lt;/strong&gt;: Devika fills in the code structure with specific logic, algorithms, and data manipulation statements. It leverages the research findings, code snippets from the knowledge base, and its own understanding of programming concepts to generate meaningful code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Formatting&lt;/strong&gt;: The generated code is formatted according to the language-specific conventions and best practices to ensure readability and maintainability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Review and Refinement&lt;/strong&gt;: Devika reviews the generated code for syntax errors, logical inconsistencies, and potential improvements. It iteratively refines the code based on its own analysis and any feedback provided by the user.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Devika&#39;s code writing capabilities enable it to generate functional and efficient code in various programming languages, taking into account the specific requirements and context of each project.&lt;/p&gt; &#xA;&lt;h1&gt;Community Discord Server&lt;/h1&gt; &#xA;&lt;p&gt;We have a Discord server for the Devika community, where you can connect with other users, share your experiences, ask questions, and collaborate on the project. To join the server, please follow these guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be respectful: Treat all members of the community with kindness and respect. Harassment, hate speech, and other forms of inappropriate behavior will not be tolerated.&lt;/li&gt; &#xA; &lt;li&gt;Contribute positively: Share your ideas, insights, and feedback to help improve Devika. Offer assistance to other community members when possible.&lt;/li&gt; &#xA; &lt;li&gt;Maintain privacy: Respect the privacy of others and do not share personal information without their consent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To join the Devika community Discord server, &lt;a href=&#34;https://discord.com/invite/8eYNbPuB&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions to enhance Devika&#39;s capabilities and improve its performance. To contribute, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Devika repository on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your feature or bug fix.&lt;/li&gt; &#xA; &lt;li&gt;Make your changes and ensure that the code passes all tests.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request describing your changes and their benefits.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please adhere to the coding conventions, maintain clear documentation, and provide thorough testing for your contributions.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Devika is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;We hope you find Devika to be a valuable tool in your software development journey. If you have any questions, feedback, or suggestions, please don&#39;t hesitate to reach out. Happy coding with Devika!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ezelikman/quiet-star</title>
    <updated>2024-03-24T01:36:54Z</updated>
    <id>tag:github.com,2024-03-24:/ezelikman/quiet-star</id>
    <link href="https://github.com/ezelikman/quiet-star" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for Quiet-STaR&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quiet-STaR&lt;/h1&gt; &#xA;&lt;p&gt;Code for &lt;a href=&#34;https://arxiv.org/abs/2403.09629&#34;&gt;Quiet-STaR: Language Models Can Teach Themselves to Think Before Speaking&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is implemented by simply patching the base Mistral implementation in Huggingface &lt;code&gt;transformers&lt;/code&gt; using a new &lt;code&gt;modeling_mistral.py&lt;/code&gt; and a new &lt;code&gt;configuration_mistral.py&lt;/code&gt; and otherwise applying standard &lt;code&gt;transformers&lt;/code&gt; features (e.g. the default Trainer). Our patches were applied to Huggingface&#39;s &lt;code&gt;transformers&lt;/code&gt; version &lt;code&gt;4.37.0.dev0&lt;/code&gt; under &lt;code&gt;src/transformers/models/mistral/&lt;/code&gt; -- we cannot guarantee that other changes to their implementation will not affect our implementation, so for reproducibility, we encourage using the same version.&lt;/p&gt; &#xA;&lt;p&gt;One pitfall to be wary of: the model is not taught not to generate start and end thought tokens. Thus, when performing actual inference, it is necessary to mask these out.&lt;/p&gt; &#xA;&lt;p&gt;We make an 8-thought-token ahead (including start and end tokens) model &lt;a href=&#34;https://huggingface.co/ezelikman/quietstar-8-ahead&#34;&gt;available via Huggingface&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jiji262/MediaCrawler-new</title>
    <updated>2024-03-24T01:36:54Z</updated>
    <id>tag:github.com,2024-03-24:/jiji262/MediaCrawler-new</id>
    <link href="https://github.com/jiji262/MediaCrawler-new" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Â∞èÁ∫¢‰π¶Á¨îËÆ∞ | ËØÑËÆ∫Áà¨Ëô´„ÄÅÊäñÈü≥ËßÜÈ¢ë | ËØÑËÆ∫Áà¨Ëô´„ÄÅÂø´ÊâãËßÜÈ¢ë | ËØÑËÆ∫Áà¨Ëô´„ÄÅB Á´ôËßÜÈ¢ë ÔΩú ËØÑËÆ∫Áà¨Ëô´„ÄÅÂæÆÂçöÂ∏ñÂ≠ê ÔΩú ËØÑËÆ∫Áà¨Ëô´&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;ÂÖçË¥£Â£∞ÊòéÔºö&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Êú¨‰ªìÂ∫ìÁöÑÊâÄÊúâÂÜÖÂÆπ‰ªÖ‰æõÂ≠¶‰π†ÂíåÂèÇËÄÉ‰πãÁî®ÔºåÁ¶ÅÊ≠¢Áî®‰∫éÂïÜ‰∏öÁî®ÈÄî„ÄÇ‰ªª‰Ωï‰∫∫ÊàñÁªÑÁªá‰∏çÂæóÂ∞ÜÊú¨‰ªìÂ∫ìÁöÑÂÜÖÂÆπÁî®‰∫éÈùûÊ≥ïÁî®ÈÄîÊàñ‰æµÁäØ‰ªñ‰∫∫ÂêàÊ≥ïÊùÉÁõä„ÄÇÊú¨‰ªìÂ∫ìÊâÄÊ∂âÂèäÁöÑÁà¨Ëô´ÊäÄÊúØ‰ªÖÁî®‰∫éÂ≠¶‰π†ÂíåÁ†îÁ©∂Ôºå‰∏çÂæóÁî®‰∫éÂØπÂÖ∂‰ªñÂπ≥Âè∞ËøõË°åÂ§ßËßÑÊ®°Áà¨Ëô´ÊàñÂÖ∂‰ªñÈùûÊ≥ïË°å‰∏∫„ÄÇÂØπ‰∫éÂõ†‰ΩøÁî®Êú¨‰ªìÂ∫ìÂÜÖÂÆπËÄåÂºïËµ∑ÁöÑ‰ªª‰ΩïÊ≥ïÂæãË¥£‰ªªÔºåÊú¨‰ªìÂ∫ì‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ‰ΩøÁî®Êú¨‰ªìÂ∫ìÁöÑÂÜÖÂÆπÂç≥Ë°®Á§∫ÊÇ®ÂêåÊÑèÊú¨ÂÖçË¥£Â£∞ÊòéÁöÑÊâÄÊúâÊù°Ê¨æÂíåÊù°‰ª∂„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;‰ªìÂ∫ìÊèèËø∞&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Â∞èÁ∫¢‰π¶Áà¨Ëô´&lt;/strong&gt;Ôºå&lt;strong&gt;ÊäñÈü≥Áà¨Ëô´&lt;/strong&gt;Ôºå &lt;strong&gt;Âø´ÊâãÁà¨Ëô´&lt;/strong&gt;Ôºå &lt;strong&gt;BÁ´ôÁà¨Ëô´&lt;/strong&gt;Ôºå &lt;strong&gt;ÂæÆÂçöÁà¨Ëô´&lt;/strong&gt;...„ÄÇ&lt;br&gt; ÁõÆÂâçËÉΩÊäìÂèñÂ∞èÁ∫¢‰π¶„ÄÅÊäñÈü≥„ÄÅÂø´Êâã„ÄÅBÁ´ô„ÄÅÂæÆÂçöÁöÑËßÜÈ¢ë„ÄÅÂõæÁâá„ÄÅËØÑËÆ∫„ÄÅÁÇπËµû„ÄÅËΩ¨ÂèëÁ≠â‰ø°ÊÅØ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÂéüÁêÜÔºöÂà©Áî®&lt;a href=&#34;https://playwright.dev/&#34;&gt;playwright&lt;/a&gt;Êê≠Ê°•Ôºå‰øùÁïôÁôªÂΩïÊàêÂäüÂêéÁöÑ‰∏ä‰∏ãÊñáÊµèËßàÂô®ÁéØÂ¢ÉÔºåÈÄöËøáÊâßË°åJSË°®ËææÂºèËé∑Âèñ‰∏Ä‰∫õÂä†ÂØÜÂèÇÊï∞ ÈÄöËøá‰ΩøÁî®Ê≠§ÊñπÂºèÔºåÂÖçÂéª‰∫ÜÂ§çÁé∞Ê†∏ÂøÉÂä†ÂØÜJS‰ª£Á†ÅÔºåÈÄÜÂêëÈöæÂ∫¶Â§ßÂ§ßÈôç‰Ωé&lt;/p&gt; &#xA;&lt;h2&gt;ÂäüËÉΩÂàóË°®&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Âπ≥Âè∞&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Cookie ÁôªÂΩï&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;‰∫åÁª¥Á†ÅÁôªÂΩï&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ÊåáÂÆöÂàõ‰ΩúËÄÖ‰∏ªÈ°µ&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ÂÖ≥ÈîÆËØçÊêúÁ¥¢&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ÊåáÂÆöËßÜÈ¢ë/Â∏ñÂ≠ê ID Áà¨Âèñ&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ÁôªÂΩïÁä∂ÊÄÅÁºìÂ≠ò&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Êï∞ÊçÆ‰øùÂ≠ò&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;IP ‰ª£ÁêÜÊ±†&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;ÊªëÂùóÈ™åËØÅÁ†Å&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Â∞èÁ∫¢‰π¶&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ÊäñÈü≥&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Âø´Êâã&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;B Á´ô&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ÂæÆÂçö&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úï&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;‰ΩøÁî®ÊñπÊ≥ï&lt;/h2&gt; &#xA;&lt;h3&gt;ÂàõÂª∫Âπ∂ÊøÄÊ¥ª python ËôöÊãüÁéØÂ¢É&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# ËøõÂÖ•È°πÁõÆÊ†πÁõÆÂΩï&#xA;cd MediaCrawler&#xA;&#xA;# ÂàõÂª∫ËôöÊãüÁéØÂ¢É&#xA;python -m venv venv&#xA;&#xA;# macos &amp;amp; linux ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É&#xA;source venv/bin/activate&#xA;&#xA;# windows ÊøÄÊ¥ªËôöÊãüÁéØÂ¢É&#xA;venv\Scripts\activate&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ÂÆâË£Ö‰æùËµñÂ∫ì&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ÂÆâË£Ö playwrightÊµèËßàÂô®È©±Âä®&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;playwright install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ËøêË°åÁà¨Ëô´Á®ãÂ∫è&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# ÈªòËÆ§Ê≤°ÊúâÂºÄÂêØËØÑËÆ∫Áà¨ÂèñÊ®°ÂºèÔºåÊúâÈúÄË¶ÅËØ∑Âà∞ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÊåáÂÆö&#xA;# ‰ªéÈÖçÁΩÆÊñá‰ª∂‰∏≠ËØªÂèñÂÖ≥ÈîÆËØçÊêúÁ¥¢Áõ∏ÂÖ≥ÁöÑÂ∏ñÂ≠êÂπ∂Áà¨ÂéªÂ∏ñÂ≠ê‰ø°ÊÅØ‰∏éËØÑËÆ∫&#xA;python main.py --platform xhs --lt qrcode --type search&#xA;&#xA;# ‰ªéÈÖçÁΩÆÊñá‰ª∂‰∏≠ËØªÂèñÊåáÂÆöÁöÑÂ∏ñÂ≠êIDÂàóË°®Ëé∑ÂèñÊåáÂÆöÂ∏ñÂ≠êÁöÑ‰ø°ÊÅØ‰∏éËØÑËÆ∫‰ø°ÊÅØ&#xA;python main.py --platform xhs --lt qrcode --type detail&#xA;&#xA;# ÊâìÂºÄÂØπÂ∫îAPPÊâ´‰∫åÁª¥Á†ÅÁôªÂΩï&#xA;  &#xA;# ÂÖ∂‰ªñÂπ≥Âè∞Áà¨Ëô´‰ΩøÁî®Á§∫‰æã, ÊâßË°å‰∏ãÈù¢ÁöÑÂëΩ‰ª§Êü•Áúã&#xA;python main.py --help    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Êï∞ÊçÆ‰øùÂ≠ò&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÊîØÊåÅ‰øùÂ≠òÂà∞ÂÖ≥Á≥ªÂûãÊï∞ÊçÆÂ∫ìÔºàMysql„ÄÅPgSQLÁ≠âÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ÊîØÊåÅ‰øùÂ≠òÂà∞csv‰∏≠Ôºàdata/ÁõÆÂΩï‰∏ãÔºâ&lt;/li&gt; &#xA; &lt;li&gt;ÊîØÊåÅ‰øùÂ≠òÂà∞json‰∏≠Ôºàdata/ÁõÆÂΩï‰∏ãÔºâ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ËøêË°åÊä•ÈîôÂ∏∏ËßÅÈóÆÈ¢òQ&amp;amp;A&lt;/h2&gt; &#xA;&lt;p&gt;‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è &lt;a href=&#34;https://raw.githubusercontent.com/jiji262/MediaCrawler-new/main/docs/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.md&#34;&gt;Â∏∏ËßÅÈóÆÈ¢ò&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;È°πÁõÆ‰ª£Á†ÅÁªìÊûÑ&lt;/h2&gt; &#xA;&lt;p&gt;‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è &lt;a href=&#34;https://raw.githubusercontent.com/jiji262/MediaCrawler-new/main/docs/%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.md&#34;&gt;È°πÁõÆ‰ª£Á†ÅÁªìÊûÑËØ¥Êòé&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÊâãÊú∫Âè∑ÁôªÂΩïËØ¥Êòé&lt;/h2&gt; &#xA;&lt;p&gt;‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è &lt;a href=&#34;https://raw.githubusercontent.com/jiji262/MediaCrawler-new/main/docs/%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%99%BB%E5%BD%95%E8%AF%B4%E6%98%8E.md&#34;&gt;ÊâãÊú∫Âè∑ÁôªÂΩïËØ¥Êòé&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÂèÇËÄÉ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;xhsÂÆ¢Êà∑Á´Ø &lt;a href=&#34;https://github.com/ReaJason/xhs&#34;&gt;ReaJasonÁöÑxhs‰ªìÂ∫ì&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Áü≠‰ø°ËΩ¨Âèë &lt;a href=&#34;https://github.com/pppscn/SmsForwarder&#34;&gt;ÂèÇËÄÉ‰ªìÂ∫ì&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ÂÜÖÁΩëÁ©øÈÄèÂ∑•ÂÖ∑ &lt;a href=&#34;https://ngrok.com/docs/&#34;&gt;ngrok&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>