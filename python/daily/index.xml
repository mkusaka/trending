<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-01T01:38:17Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>h2oai/wave</title>
    <updated>2022-11-01T01:38:17Z</updated>
    <id>tag:github.com,2022-11-01:/h2oai/wave</id>
    <link href="https://github.com/h2oai/wave" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Realtime Web Apps and Dashboards for Python and R&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;H2O Wave&lt;/h2&gt; &#xA;&lt;img width=&#34;50%&#34; src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/assets/brand/wave-type-yellow.png&#34; alt=&#34;Wave logo&#34;&gt; &#xA;&lt;p&gt; &lt;img alt=&#34;PyPI - Downloads&#34; src=&#34;https://img.shields.io/pypi/dm/h2o-wave?color=FBE52B&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/h2oai/wave?color=yellow&#34;&gt; &lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/h2o-wave?label=current-version&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/h2o_wave&#34;&gt; &lt;img alt=&#34;Contributor covenant&#34; src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.0-4baaaa.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Realtime Web Apps and Dashboards for Python and R&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;New!&lt;/strong&gt; &lt;em&gt;&lt;a href=&#34;https://wave.h2o.ai/blog/r-api-preview&#34;&gt;R Language API&lt;/a&gt; Build and control Wave dashboards using R!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New!&lt;/strong&gt; &lt;em&gt;Easily integrate AI/ML models into your apps using &lt;a href=&#34;https://github.com/h2oai/wave-ml&#34;&gt;Wave ML&lt;/a&gt; for automatic machine learning.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;H2O Wave is a software stack for building beautiful, low-latency, realtime, browser-based applications and dashboards entirely in Python/R without using HTML, Javascript, or CSS.&lt;/p&gt; &#xA;&lt;p&gt;H2O Wave excels at capturing information from multiple sources and broadcasting them live over the web, letting you build and deploy realtime analytics with dramatically less effort.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/wave/releases&#34;&gt;Download&lt;/a&gt; / &lt;a href=&#34;https://wave.h2o.ai/docs/installation/&#34;&gt;How to install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wave.h2o.ai/&#34;&gt;Documentation&lt;/a&gt;: &lt;a href=&#34;https://wave.h2o.ai/docs/getting-started/&#34;&gt;Getting Started&lt;/a&gt; / &lt;a href=&#34;https://wave.h2o.ai/docs/examples/&#34;&gt;Gallery and Examples&lt;/a&gt; / &lt;a href=&#34;https://wave.h2o.ai/docs/api/index/&#34;&gt;Python API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/wave/issues/693&#34;&gt;Roadmap 2021&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/wave/raw/master/.github/CONTRIBUTING.md#development-setup&#34;&gt;Developing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/wave/discussions&#34;&gt;Discuss / Support / Q&amp;amp;A / Ideas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h2oai/wave/issues/new/choose&#34;&gt;Report a problem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wave.h2o.ai/blog/&#34;&gt;Blog&lt;/a&gt; / &lt;a href=&#34;https://twitter.com/h2o_wave&#34;&gt;@h2o_wave&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Responsive Layouts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/website/blog/assets/2021-01-17/dashboards.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/website/blog/assets/2021-01-17/dashboard_red.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/website/blog/assets/2021-01-17/dashboard_blue.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/website/blog/assets/2021-01-17/dashboard_orange.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/website/blog/assets/2021-01-17/dashboard_cyan.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/website/blog/assets/2021-01-17/dashboard_mint.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/website/blog/assets/2021-01-17/dashboard_purple.png&#34; alt=&#34;Dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Code: &lt;a href=&#34;https://github.com/h2oai/wave/tree/master/py/demo&#34;&gt;https://github.com/h2oai/wave/tree/master/py/demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Themes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/assets/visuals/theme-light.png&#34; alt=&#34;Light Theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/assets/visuals/theme-neon.png&#34; alt=&#34;Neon Theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Coming soon!)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/assets/visuals/theme-dark.png&#34; alt=&#34;Dark Theme&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;80+ components, 175+ examples&lt;/h3&gt; &#xA;&lt;p&gt;More at &lt;a href=&#34;https://wave.h2o.ai/docs/examples&#34;&gt;https://wave.h2o.ai/docs/examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/assets/visuals/components-1.png&#34; alt=&#34;Components&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/h2oai/wave/master/assets/visuals/components-2.png&#34; alt=&#34;Visualizations&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;H2O Wave is licensed under the Apache License 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/h2oai/wave/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TinyDataML/Tiny3D</title>
    <updated>2022-11-01T01:38:17Z</updated>
    <id>tag:github.com,2022-11-01:/TinyDataML/Tiny3D</id>
    <link href="https://github.com/TinyDataML/Tiny3D" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiny3D is a next generation of 3D AI service production system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tiny3D&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TinyDataML/Tiny3D&#34;&gt;Tiny3D website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TinyDataML/Tiny3D&#34;&gt;Documentation&lt;/a&gt;, &lt;a href=&#34;https://github.com/TinyDataML/Tiny3D&#34;&gt;Tutorials and examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Tiny3D is a next generation of 3D object detection service production system.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Tiny3D solution embodies four transformative features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Performance Optimization Engine&lt;/strong&gt; for 3d object detection online/offline inference services product performance optimization. Through this engine users can easily get a high accuracy and high speed 3d object detection service/competetion result in a &lt;strong&gt;Data-Centeric AI&lt;/strong&gt; way. Our Performance Optimization Engine can easily be a Plug-in to any machine learning system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One line of code&lt;/strong&gt; to complete dataset editing, model training, model testing, model compression, model deployment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One line of code&lt;/strong&gt; to Fine-grained data editing on different size datasets or single data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A user-friendly web interface&lt;/strong&gt; for a developer team to product a 3d object detection service pictorially, in a low-code fashion. [currently not supported]&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Example1: Fast access to a high-precision 3d object detection service&lt;/h2&gt; &#xA;&lt;h4&gt;step-1: Edit the data using different data operation method to get high quality dataset&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;from tiny3d.data import dataset_edit&#xA;&#xA;dataset_edit(dataset_input_path, dataset_output_path, denoise_method=None, &#xA;             simulation_method=&#39;Snow&#39;, filter_method=None, &#xA;             augmentation_method=None, qualification_method=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;step-2: Train a model on edited dataset&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;from tiny3d.deephub import Pointpillars&#xA;from tiny3d.engine import build_dataset, engine, fit&#xA;&#xA;model = Pointpillars()&#xA;model = engine(model)&#xA;&#xA;dataset_train = build_dataset(train_dataset_path)&#xA;dataset_val = build_datasetvcal_dataset_path)&#xA;&#xA;fit(dataset_train=dataset_train, dataset_val=dataset_val, torch_model=model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;step-3: Compress a trained model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;from tiny3d.model.model_compressor import prune, quant &#xA;&#xA;prune(model)&#xA;quant(model)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;step-4: Deploy a model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;from tiny3d.model.model_deployor import deploy &#xA;&#xA;backend_file = deploy(model, backend=&#39;tensorrt&#39;, output_file=output_model_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;step-5: Provide a model serving&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;from tiny3d.model.model_server import payload&#xA;&#xA;PyTorch_REST_API_URL = &#39;http://127.0.0.1:1234/&#39;&#xA;url = PyTorch_REST_API_URL + &#39;transfer&#39;&#xA;&#xA;# Submit the request&#xA;requests.post(url, files=payload).json()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example2: Through data editing to further improve the accuracy of 3d object detection service.&lt;/h2&gt; &#xA;&lt;h4&gt;step-1: Real world bad case visulization or potential bad case visulization&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;# obtain the potential bad case, you can also specify a real world bad case data path.&#xA;from tiny3d.engine import inference&#xA;from tiny3d.data.data_qualificator import lidar_qualificate&#xA;&#xA;bad_case_data_path = &#39;./&#39;&#xA;prediction = inference(model, dataset)&#xA;bad_case = lidar_qualificate(dataset, prediction, Topk=100, save_path=bad_case_data_path)&#xA;&#xA;# Visualization&#xA;from tiny3d.data.data_visulizator import visualize&#xA;&#xA;visualize(bad_case_data_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;step-2: Edit the dataset to get more bad case data to imporove the 3d object detection service accuracy on bad case data in real world case.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;from tiny3d.data import dataset_edit&#xA;&#xA;dataset_edit(bad_case_data_path, dataset_output_path, denoise_method=None, &#xA;             simulation_method=&#39;Snow, Rain&#39;, filter_method=None, &#xA;             augmentation_method=None, qualification_method=None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;step-3: Re-train the model on a edited data and deploy it.&lt;/h4&gt; &#xA;&lt;h2&gt;Operations Tiny3D currently supported&lt;/h2&gt; &#xA;&lt;h4&gt;Lidar data operations currently supported&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lidar data loading&lt;/li&gt; &#xA; &lt;li&gt;lidar data sampling&lt;/li&gt; &#xA; &lt;li&gt;lidar data preprocessing/cleaning&lt;/li&gt; &#xA; &lt;li&gt;lidar data denoising&lt;/li&gt; &#xA; &lt;li&gt;lidar data outlier detection&lt;/li&gt; &#xA; &lt;li&gt;lidar data augmentation&lt;/li&gt; &#xA; &lt;li&gt;lidar data simulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Lidar based 3d object detection model operations currently supported&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;model compression&lt;/li&gt; &#xA; &lt;li&gt;model deploy and serve&lt;/li&gt; &#xA; &lt;li&gt;model ensemble&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Data-Model co-operations currently supported&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;training&lt;/li&gt; &#xA; &lt;li&gt;testing&lt;/li&gt; &#xA; &lt;li&gt;bad case visulization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;h4&gt;1. Reorganize the code and docs&lt;/h4&gt; &#xA;&lt;h4&gt;2. Add more data ops&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lidar data selection&lt;/li&gt; &#xA; &lt;li&gt;lidar data robustion&lt;/li&gt; &#xA; &lt;li&gt;lidar data privacy&lt;/li&gt; &#xA; &lt;li&gt;lidar data domain adptation&lt;/li&gt; &#xA; &lt;li&gt;lidar data auto-labeling&lt;/li&gt; &#xA; &lt;li&gt;data drift emergency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3. Add visual interaction interface.&lt;/h4&gt; &#xA;&lt;h2&gt;Acknowlegement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MLSysOps&#34;&gt;MLSys and MLOps Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cap-ntu/ML-Model-CI&#34;&gt;MLModelCI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmdetection3d&#34;&gt;mmdetection3d&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sammchardy/python-binance</title>
    <updated>2022-11-01T01:38:17Z</updated>
    <id>tag:github.com,2022-11-01:/sammchardy/python-binance</id>
    <link href="https://github.com/sammchardy/python-binance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Binance Exchange API python implementation for automated trading&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;================================= Welcome to python-binance v1.0.16&lt;/h1&gt; &#xA;&lt;p&gt;Updated 9th Apr 2022&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/pypi/v/python-binance.svg&#34;&gt;https://img.shields.io/pypi/v/python-binance.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/python-binance&#34;&gt;https://pypi.python.org/pypi/python-binance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/pypi/l/python-binance.svg&#34;&gt;https://img.shields.io/pypi/l/python-binance.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/python-binance&#34;&gt;https://pypi.python.org/pypi/python-binance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/travis/sammchardy/python-binance.svg&#34;&gt;https://img.shields.io/travis/sammchardy/python-binance.svg&lt;/a&gt; :target: &lt;a href=&#34;https://travis-ci.org/sammchardy/python-binance&#34;&gt;https://travis-ci.org/sammchardy/python-binance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/coveralls/sammchardy/python-binance.svg&#34;&gt;https://img.shields.io/coveralls/sammchardy/python-binance.svg&lt;/a&gt; :target: &lt;a href=&#34;https://coveralls.io/github/sammchardy/python-binance&#34;&gt;https://coveralls.io/github/sammchardy/python-binance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/pypi/wheel/python-binance.svg&#34;&gt;https://img.shields.io/pypi/wheel/python-binance.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/python-binance&#34;&gt;https://pypi.python.org/pypi/python-binance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/python-binance.svg&#34;&gt;https://img.shields.io/pypi/pyversions/python-binance.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/python-binance&#34;&gt;https://pypi.python.org/pypi/python-binance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an unofficial Python wrapper for the &lt;code&gt;Binance exchange REST API v3 &amp;lt;https://binance-docs.github.io/apidocs/spot/en&amp;gt;&lt;/code&gt;_. I am in no way affiliated with Binance, use at your own risk.&lt;/p&gt; &#xA;&lt;p&gt;If you came here looking for the &lt;code&gt;Binance exchange &amp;lt;https://www.binance.com/?ref=10099792&amp;gt;&lt;/code&gt;_ to purchase cryptocurrencies, then &lt;code&gt;go here &amp;lt;https://www.binance.com/?ref=10099792&amp;gt;&lt;/code&gt;_. If you want to automate interactions with Binance stick around.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in Binance&#39;s new DEX Binance Chain see my &lt;code&gt;python-binance-chain library &amp;lt;https://github.com/sammchardy/python-binance-chain&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;Source code &lt;a href=&#34;https://github.com/sammchardy/python-binance&#34;&gt;https://github.com/sammchardy/python-binance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation &lt;a href=&#34;https://python-binance.readthedocs.io/en/latest/&#34;&gt;https://python-binance.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Binance API Telegram &lt;a href=&#34;https://t.me/binance_api_english&#34;&gt;https://t.me/binance_api_english&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog with examples including async &lt;a href=&#34;https://sammchardy.github.io&#34;&gt;https://sammchardy.github.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Async basics for Binance &amp;lt;https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Understanding Binance Order Filters &amp;lt;https://sammchardy.github.io/binance/2021/05/03/binance-order-filters.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure you update often and check the &lt;code&gt;Changelog &amp;lt;https://python-binance.readthedocs.io/en/latest/changelog.html&amp;gt;&lt;/code&gt;_ for new features and bug fixes.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implementation of all General, Market Data and Account endpoints.&lt;/li&gt; &#xA; &lt;li&gt;Asyncio implementation&lt;/li&gt; &#xA; &lt;li&gt;Testnet support for Spot, Futures and Vanilla Options&lt;/li&gt; &#xA; &lt;li&gt;Simple handling of authentication&lt;/li&gt; &#xA; &lt;li&gt;No need to generate timestamps yourself, the wrapper does it for you&lt;/li&gt; &#xA; &lt;li&gt;Response exception handling&lt;/li&gt; &#xA; &lt;li&gt;Websocket handling with reconnection and multiplexed connections&lt;/li&gt; &#xA; &lt;li&gt;Symbol Depth Cache&lt;/li&gt; &#xA; &lt;li&gt;Historical Kline/Candle fetching function&lt;/li&gt; &#xA; &lt;li&gt;Withdraw functionality&lt;/li&gt; &#xA; &lt;li&gt;Deposit addresses&lt;/li&gt; &#xA; &lt;li&gt;Margin Trading&lt;/li&gt; &#xA; &lt;li&gt;Futures Trading&lt;/li&gt; &#xA; &lt;li&gt;Vanilla Options&lt;/li&gt; &#xA; &lt;li&gt;Support other domains (.us, .jp, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Upgrading to v1.0.0+&lt;/h2&gt; &#xA;&lt;p&gt;The breaking changes include the migration from wapi to sapi endpoints which related to the wallet endpoints detailed in the &lt;code&gt;Binance Docs &amp;lt;https://binance-docs.github.io/apidocs/spot/en/#wallet-endpoints&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The other breaking change is for websocket streams and the Depth Cache Manager which have been converted to use Asynchronous Context Managers. See examples in the Async section below or view the &lt;code&gt;websockets &amp;lt;https://python-binance.readthedocs.io/en/latest/websockets.html&amp;gt;&lt;/code&gt;_ and &lt;code&gt;depth cache &amp;lt;https://python-binance.readthedocs.io/en/latest/depth_cache.html&amp;gt;&lt;/code&gt;_ docs.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Register an account with Binance &amp;lt;https://accounts.binance.com/en/register?ref=10099792&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Generate an API Key &amp;lt;https://www.binance.com/en/my/settings/api-management&amp;gt;&lt;/code&gt;_ and assign relevant permissions.&lt;/p&gt; &#xA;&lt;p&gt;If you are using an exchange from the US, Japan or other TLD then make sure pass &lt;code&gt;tld=&#39;us&#39;&lt;/code&gt; when creating the client.&lt;/p&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;Spot &amp;lt;https://testnet.binance.vision/&amp;gt;&lt;/code&gt;_ or &lt;code&gt;Vanilla Options &amp;lt;https://testnet.binanceops.com/&amp;gt;&lt;/code&gt;_ Testnet, pass &lt;code&gt;testnet=True&lt;/code&gt; when creating the client.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install python-binance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager&#xA;client = Client(api_key, api_secret)&#xA;&#xA;# get market depth&#xA;depth = client.get_order_book(symbol=&#39;BNBBTC&#39;)&#xA;&#xA;# place a test market buy order, to place an actual order use the create_order function&#xA;order = client.create_test_order(&#xA;    symbol=&#39;BNBBTC&#39;,&#xA;    side=Client.SIDE_BUY,&#xA;    type=Client.ORDER_TYPE_MARKET,&#xA;    quantity=100)&#xA;&#xA;# get all symbol prices&#xA;prices = client.get_all_tickers()&#xA;&#xA;# withdraw 100 ETH&#xA;# check docs for assumptions around withdrawals&#xA;from binance.exceptions import BinanceAPIException&#xA;try:&#xA;    result = client.withdraw(&#xA;        asset=&#39;ETH&#39;,&#xA;        address=&#39;&amp;lt;eth_address&amp;gt;&#39;,&#xA;        amount=100)&#xA;except BinanceAPIException as e:&#xA;    print(e)&#xA;else:&#xA;    print(&#34;Success&#34;)&#xA;&#xA;# fetch list of withdrawals&#xA;withdraws = client.get_withdraw_history()&#xA;&#xA;# fetch list of ETH withdrawals&#xA;eth_withdraws = client.get_withdraw_history(coin=&#39;ETH&#39;)&#xA;&#xA;# get a deposit address for BTC&#xA;address = client.get_deposit_address(coin=&#39;BTC&#39;)&#xA;&#xA;# get historical kline data from any date range&#xA;&#xA;# fetch 1 minute klines for the last day up until now&#xA;klines = client.get_historical_klines(&#34;BNBBTC&#34;, Client.KLINE_INTERVAL_1MINUTE, &#34;1 day ago UTC&#34;)&#xA;&#xA;# fetch 30 minute klines for the last month of 2017&#xA;klines = client.get_historical_klines(&#34;ETHBTC&#34;, Client.KLINE_INTERVAL_30MINUTE, &#34;1 Dec, 2017&#34;, &#34;1 Jan, 2018&#34;)&#xA;&#xA;# fetch weekly klines since it listed&#xA;klines = client.get_historical_klines(&#34;NEOBTC&#34;, Client.KLINE_INTERVAL_1WEEK, &#34;1 Jan, 2017&#34;)&#xA;&#xA;# socket manager using threads&#xA;twm = ThreadedWebsocketManager()&#xA;twm.start()&#xA;&#xA;# depth cache manager using threads&#xA;dcm = ThreadedDepthCacheManager()&#xA;dcm.start()&#xA;&#xA;def handle_socket_message(msg):&#xA;    print(f&#34;message type: {msg[&#39;e&#39;]}&#34;)&#xA;    print(msg)&#xA;&#xA;def handle_dcm_message(depth_cache):&#xA;    print(f&#34;symbol {depth_cache.symbol}&#34;)&#xA;    print(&#34;top 5 bids&#34;)&#xA;    print(depth_cache.get_bids()[:5])&#xA;    print(&#34;top 5 asks&#34;)&#xA;    print(depth_cache.get_asks()[:5])&#xA;    print(&#34;last update time {}&#34;.format(depth_cache.update_time))&#xA;&#xA;twm.start_kline_socket(callback=handle_socket_message, symbol=&#39;BNBBTC&#39;)&#xA;&#xA;dcm.start_depth_cache(callback=handle_dcm_message, symbol=&#39;ETHBTC&#39;)&#xA;&#xA;# replace with a current options symbol&#xA;options_symbol = &#39;BTC-210430-36000-C&#39;&#xA;dcm.start_options_depth_cache(callback=handle_dcm_message, symbol=options_symbol)&#xA;&#xA;# join the threaded managers to the main thread&#xA;twm.join()&#xA;dcm.join()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more &lt;code&gt;check out the documentation &amp;lt;https://python-binance.readthedocs.io/en/latest/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Async Example&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;code&gt;Async basics for Binance &amp;lt;https://sammchardy.github.io/binance/2021/05/01/async-binance-basics.html&amp;gt;&lt;/code&gt;_ for more information.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import asyncio&#xA;import json&#xA;&#xA;from binance import AsyncClient, DepthCacheManager, BinanceSocketManager&#xA;&#xA;async def main():&#xA;&#xA;    # initialise the client&#xA;    client = await AsyncClient.create()&#xA;&#xA;    # run some simple requests&#xA;    print(json.dumps(await client.get_exchange_info(), indent=2))&#xA;&#xA;    print(json.dumps(await client.get_symbol_ticker(symbol=&#34;BTCUSDT&#34;), indent=2))&#xA;&#xA;    # initialise websocket factory manager&#xA;    bsm = BinanceSocketManager(client)&#xA;&#xA;    # create listener using async with&#xA;    # this will exit and close the connection after 5 messages&#xA;    async with bsm.trade_socket(&#39;ETHBTC&#39;) as ts:&#xA;        for _ in range(5):&#xA;            res = await ts.recv()&#xA;            print(f&#39;recv {res}&#39;)&#xA;&#xA;    # get historical kline data from any date range&#xA;&#xA;    # fetch 1 minute klines for the last day up until now&#xA;    klines = client.get_historical_klines(&#34;BNBBTC&#34;, AsyncClient.KLINE_INTERVAL_1MINUTE, &#34;1 day ago UTC&#34;)&#xA;&#xA;    # use generator to fetch 1 minute klines for the last day up until now&#xA;    async for kline in await client.get_historical_klines_generator(&#34;BNBBTC&#34;, AsyncClient.KLINE_INTERVAL_1MINUTE, &#34;1 day ago UTC&#34;):&#xA;        print(kline)&#xA;&#xA;    # fetch 30 minute klines for the last month of 2017&#xA;    klines = client.get_historical_klines(&#34;ETHBTC&#34;, Client.KLINE_INTERVAL_30MINUTE, &#34;1 Dec, 2017&#34;, &#34;1 Jan, 2018&#34;)&#xA;&#xA;    # fetch weekly klines since it listed&#xA;    klines = client.get_historical_klines(&#34;NEOBTC&#34;, Client.KLINE_INTERVAL_1WEEK, &#34;1 Jan, 2017&#34;)&#xA;&#xA;    # setup an async context the Depth Cache and exit after 5 messages&#xA;    async with DepthCacheManager(client, symbol=&#39;ETHBTC&#39;) as dcm_socket:&#xA;        for _ in range(5):&#xA;            depth_cache = await dcm_socket.recv()&#xA;            print(f&#34;symbol {depth_cache.symbol} updated:{depth_cache.update_time}&#34;)&#xA;            print(&#34;Top 5 asks:&#34;)&#xA;            print(depth_cache.get_asks()[:5])&#xA;            print(&#34;Top 5 bids:&#34;)&#xA;            print(depth_cache.get_bids()[:5])&#xA;&#xA;    # Vanilla options Depth Cache works the same, update the symbol to a current one&#xA;    options_symbol = &#39;BTC-210430-36000-C&#39;&#xA;    async with OptionsDepthCacheManager(client, symbol=options_symbol) as dcm_socket:&#xA;        for _ in range(5):&#xA;            depth_cache = await dcm_socket.recv()&#xA;            count += 1&#xA;            print(f&#34;symbol {depth_cache.symbol} updated:{depth_cache.update_time}&#34;)&#xA;            print(&#34;Top 5 asks:&#34;)&#xA;            print(depth_cache.get_asks()[:5])&#xA;            print(&#34;Top 5 bids:&#34;)&#xA;            print(depth_cache.get_bids()[:5])&#xA;&#xA;    await client.close_connection()&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;&#xA;    loop = asyncio.get_event_loop()&#xA;    loop.run_until_complete(main())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If this library helped you out feel free to donate.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ETH: 0xD7a7fDdCfA687073d7cC93E9E51829a727f9fE70&lt;/li&gt; &#xA; &lt;li&gt;LTC: LPC5vw9ajR1YndE1hYVeo3kJ9LdHjcRCUZ&lt;/li&gt; &#xA; &lt;li&gt;NEO: AVJB4ZgN7VgSUtArCt94y7ZYT6d5NDfpBo&lt;/li&gt; &#xA; &lt;li&gt;BTC: 1Dknp6L6oRZrHDECRedihPzx2sSfmvEBys&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Exchanges&lt;/h2&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;Binance Chain &amp;lt;https://testnet.binance.org/&amp;gt;&lt;/code&gt;_ check out my &lt;code&gt;python-binance-chain &amp;lt;https://github.com/sammchardy/python-binance-chain&amp;gt;&lt;/code&gt;_ library.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;Kucoin &amp;lt;https://www.kucoin.com/?rcode=E42cWB&amp;gt;&lt;/code&gt;_ check out my &lt;code&gt;python-kucoin &amp;lt;https://github.com/sammchardy/python-kucoin&amp;gt;&lt;/code&gt;_ library.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;IDEX &amp;lt;https://idex.market&amp;gt;&lt;/code&gt;_ check out my &lt;code&gt;python-idex &amp;lt;https://github.com/sammchardy/python-idex&amp;gt;&lt;/code&gt;_ library.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://ga-beacon.appspot.com/UA-111417213-1/github/python-binance?pixel&amp;amp;useReferer&#34;&gt;https://ga-beacon.appspot.com/UA-111417213-1/github/python-binance?pixel&amp;amp;useReferer&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>