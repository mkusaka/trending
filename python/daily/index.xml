<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-24T01:36:34Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joke2k/faker</title>
    <updated>2025-01-24T01:36:34Z</updated>
    <id>tag:github.com,2025-01-24:/joke2k/faker</id>
    <link href="https://github.com/joke2k/faker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Faker is a Python package that generates fake data for you.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;Faker&lt;/em&gt; is a Python package that generates fake data for you. Whether you need to bootstrap your database, create good-looking XML documents, fill-in your persistence to stress test it, or anonymize data taken from a production service, Faker is for you.&lt;/p&gt; &#xA;&lt;p&gt;Faker is heavily inspired by &lt;code&gt;PHP Faker&lt;/code&gt;&lt;em&gt;, &lt;code&gt;Perl Faker&lt;/code&gt;&lt;/em&gt;, and by &lt;code&gt;Ruby Faker&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;_|_|_|_|          _|&#xA;_|        _|_|_|  _|  _|      _|_|    _|  _|_|&#xA;_|_|_|  _|    _|  _|_|      _|_|_|_|  _|_|&#xA;_|      _|    _|  _|  _|    _|        _|&#xA;_|        _|_|_|  _|    _|    _|_|_|  _|&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;|pypi| |build| |coverage| |license|&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Starting from version &lt;code&gt;4.0.0&lt;/code&gt;, &lt;code&gt;Faker&lt;/code&gt; dropped support for Python 2 and from version &lt;code&gt;5.0.0&lt;/code&gt; only supports Python 3.7 and above. If you still need Python 2 compatibility, please install version &lt;code&gt;3.0.1&lt;/code&gt; in the meantime, and please consider updating your codebase to support Python 3 so you can enjoy the latest features &lt;code&gt;Faker&lt;/code&gt; has to offer. Please see the &lt;code&gt;extended docs&lt;/code&gt;_ for more details, especially if you are upgrading from version &lt;code&gt;2.0.4&lt;/code&gt; and below as there might be breaking changes.&lt;/p&gt; &#xA;&lt;p&gt;This package was also previously called &lt;code&gt;fake-factory&lt;/code&gt; which was already deprecated by the end of 2016, and much has changed since then, so please ensure that your project and its dependencies do not depend on the old package.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install with pip:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install Faker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;faker.Faker()&lt;/code&gt; to create and initialize a faker generator, which can generate data by accessing properties named after the type of data you want.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker()&#xA;&#xA;fake.name()&#xA;# &#39;Lucy Cechtelar&#39;&#xA;&#xA;fake.address()&#xA;# &#39;426 Jordy Lodge&#xA;#  Cartwrightshire, SC 88120-6700&#39;&#xA;&#xA;fake.text()&#xA;# &#39;Sint velit eveniet. Rerum atque repellat voluptatem quia rerum. Numquam excepturi&#xA;#  beatae sint laudantium consequatur. Magni occaecati itaque sint et sit tempore. Nesciunt&#xA;#  amet quidem. Iusto deleniti cum autem ad quia aperiam.&#xA;#  A consectetur quos aliquam. In iste aliquid et aut similique suscipit. Consequatur qui&#xA;#  quaerat iste minus hic expedita. Consequuntur error magni et laboriosam. Aut aspernatur&#xA;#  voluptatem sit aliquam. Dolores voluptatum est.&#xA;#  Aut molestias et maxime. Fugit autem facilis quos vero. Eius quibusdam possimus est.&#xA;#  Ea quaerat et quisquam. Deleniti sunt quam. Adipisci consequatur id in occaecati.&#xA;#  Et sint et. Ut ducimus quod nemo ab voluptatum.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each call to method &lt;code&gt;fake.name()&lt;/code&gt; yields a different (random) result. This is because faker forwards &lt;code&gt;faker.Generator.method_name()&lt;/code&gt; calls to &lt;code&gt;faker.Generator.format(method_name)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for _ in range(10):&#xA;  print(fake.name())&#xA;&#xA;# &#39;Adaline Reichel&#39;&#xA;# &#39;Dr. Santa Prosacco DVM&#39;&#xA;# &#39;Noemy Vandervort V&#39;&#xA;# &#39;Lexi O&#39;Conner&#39;&#xA;# &#39;Gracie Weber&#39;&#xA;# &#39;Roscoe Johns&#39;&#xA;# &#39;Emmett Lebsack&#39;&#xA;# &#39;Keegan Thiel&#39;&#xA;# &#39;Wellington Koelpin II&#39;&#xA;# &#39;Ms. Karley Kiehn V&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pytest fixtures&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Faker&lt;/code&gt; also has its own &lt;code&gt;pytest&lt;/code&gt; plugin which provides a &lt;code&gt;faker&lt;/code&gt; fixture you can use in your tests. Please check out the &lt;code&gt;pytest fixture docs&lt;/code&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Providers&lt;/h2&gt; &#xA;&lt;p&gt;Each of the generator properties (like &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;, and &lt;code&gt;lorem&lt;/code&gt;) are called &#34;fake&#34;. A faker generator has many of them, packaged in &#34;providers&#34;.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;from faker.providers import internet&#xA;&#xA;fake = Faker()&#xA;fake.add_provider(internet)&#xA;&#xA;print(fake.ipv4_private())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;extended docs&lt;/code&gt;_ for a list of &lt;code&gt;bundled providers&lt;/code&gt;_ and a list of &lt;code&gt;community providers&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;faker.Faker&lt;/code&gt; can take a locale as an argument, to return localized data. If no localized provider is found, the factory falls back to the default LCID string for US english, ie: &lt;code&gt;en_US&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker(&#39;it_IT&#39;)&#xA;for _ in range(10):&#xA;    print(fake.name())&#xA;&#xA;# &#39;Elda Palumbo&#39;&#xA;# &#39;Pacifico Giordano&#39;&#xA;# &#39;Sig. Avide Guerra&#39;&#xA;# &#39;Yago Amato&#39;&#xA;# &#39;Eustachio Messina&#39;&#xA;# &#39;Dott. Violante Lombardo&#39;&#xA;# &#39;Sig. Alighieri Monti&#39;&#xA;# &#39;Costanzo Costa&#39;&#xA;# &#39;Nazzareno Barbieri&#39;&#xA;# &#39;Max Coppola&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;faker.Faker&lt;/code&gt; also supports multiple locales. New in v3.0.0.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker([&#39;it_IT&#39;, &#39;en_US&#39;, &#39;ja_JP&#39;])&#xA;for _ in range(10):&#xA;    print(fake.name())&#xA;&#xA;# 鈴木 陽一&#xA;# Leslie Moreno&#xA;# Emma Williams&#xA;# 渡辺 裕美子&#xA;# Marcantonio Galuppi&#xA;# Martha Davis&#xA;# Kristen Turner&#xA;# 中津川 春香&#xA;# Ashley Castillo&#xA;# 山田 桃子&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check available Faker locales in the source code, under the providers package. The localization of Faker is an ongoing process, for which we need your help. Please don&#39;t hesitate to create a localized provider for your own locale and submit a Pull Request (PR).&lt;/p&gt; &#xA;&lt;h2&gt;Optimizations&lt;/h2&gt; &#xA;&lt;p&gt;The Faker constructor takes a performance-related argument called &lt;code&gt;use_weighting&lt;/code&gt;. It specifies whether to attempt to have the frequency of values match real-world frequencies (e.g. the English name Gary would be much more frequent than the name Lorimer). If &lt;code&gt;use_weighting&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt;, then all items have an equal chance of being selected, and the selection process is much faster. The default is &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command line usage&lt;/h2&gt; &#xA;&lt;p&gt;When installed, you can invoke faker from the command-line:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;faker [-h] [--version] [-o output]&#xA;      [-l {bg_BG,cs_CZ,...,zh_CN,zh_TW}]&#xA;      [-r REPEAT] [-s SEP]&#xA;      [-i {package.containing.custom_provider otherpkg.containing.custom_provider}]&#xA;      [fake] [fake argument [fake argument ...]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;faker&lt;/code&gt;: is the script when installed in your environment, in development you could use &lt;code&gt;python -m faker&lt;/code&gt; instead&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;: shows a help message&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--version&lt;/code&gt;: shows the program&#39;s version number&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-o FILENAME&lt;/code&gt;: redirects the output to the specified filename&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-l {bg_BG,cs_CZ,...,zh_CN,zh_TW}&lt;/code&gt;: allows use of a localized provider&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-r REPEAT&lt;/code&gt;: will generate a specified number of outputs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-s SEP&lt;/code&gt;: will generate the specified separator after each generated output&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-i {my.custom_provider other.custom_provider}&lt;/code&gt; list of additional custom providers to use. Note that is the import path of the package containing your Provider class, not the custom Provider class itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;fake&lt;/code&gt;: is the name of the fake to generate an output for, such as &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;address&lt;/code&gt;, or &lt;code&gt;text&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;[fake argument ...]&lt;/code&gt;: optional arguments to pass to the fake (e.g. the profile fake takes an optional list of comma separated field names as the first argument)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ faker address&#xA;968 Bahringer Garden Apt. 722&#xA;Kristinaland, NJ 09890&#xA;&#xA;$ faker -l de_DE address&#xA;Samira-Niemeier-Allee 56&#xA;94812 Biedenkopf&#xA;&#xA;$ faker profile ssn,birthdate&#xA;{&#39;ssn&#39;: &#39;628-10-1085&#39;, &#39;birthdate&#39;: &#39;2008-03-29&#39;}&#xA;&#xA;$ faker -r=3 -s=&#34;;&#34; name&#xA;Willam Kertzmann;&#xA;Josiah Maggio;&#xA;Gayla Schmitt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to create a Provider&lt;/h2&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker()&#xA;&#xA;# first, import a similar Provider or use the default one&#xA;from faker.providers import BaseProvider&#xA;&#xA;# create new provider class&#xA;class MyProvider(BaseProvider):&#xA;    def foo(self) -&amp;gt; str:&#xA;        return &#39;bar&#39;&#xA;&#xA;# then add new provider to faker instance&#xA;fake.add_provider(MyProvider)&#xA;&#xA;# now you can use:&#xA;fake.foo()&#xA;# &#39;bar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to create a Dynamic Provider&lt;/h2&gt; &#xA;&lt;p&gt;Dynamic providers can read elements from an external source.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;from faker.providers import DynamicProvider&#xA;&#xA;medical_professions_provider = DynamicProvider(&#xA;     provider_name=&#34;medical_profession&#34;,&#xA;     elements=[&#34;dr.&#34;, &#34;doctor&#34;, &#34;nurse&#34;, &#34;surgeon&#34;, &#34;clerk&#34;],&#xA;)&#xA;&#xA;fake = Faker()&#xA;&#xA;# then add new provider to faker instance&#xA;fake.add_provider(medical_professions_provider)&#xA;&#xA;# now you can use:&#xA;fake.medical_profession()&#xA;# &#39;dr.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to customize the Lorem Provider&lt;/h2&gt; &#xA;&lt;p&gt;You can provide your own sets of words if you don&#39;t want to use the default lorem ipsum one. The following example shows how to do it with a list of words picked from &lt;code&gt;cakeipsum &amp;lt;http://www.cupcakeipsum.com/&amp;gt;&lt;/code&gt;__ :&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker()&#xA;&#xA;my_word_list = [&#xA;&#39;danish&#39;,&#39;cheesecake&#39;,&#39;sugar&#39;,&#xA;&#39;Lollipop&#39;,&#39;wafer&#39;,&#39;Gummies&#39;,&#xA;&#39;sesame&#39;,&#39;Jelly&#39;,&#39;beans&#39;,&#xA;&#39;pie&#39;,&#39;bar&#39;,&#39;Ice&#39;,&#39;oat&#39; ]&#xA;&#xA;fake.sentence()&#xA;# &#39;Expedita at beatae voluptatibus nulla omnis.&#39;&#xA;&#xA;fake.sentence(ext_word_list=my_word_list)&#xA;# &#39;Oat beans oat Lollipop bar cheesecake.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use with Factory Boy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Factory Boy&lt;/code&gt; already ships with integration with &lt;code&gt;Faker&lt;/code&gt;. Simply use the &lt;code&gt;factory.Faker&lt;/code&gt; method of &lt;code&gt;factory_boy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import factory&#xA;from myapp.models import Book&#xA;&#xA;class BookFactory(factory.Factory):&#xA;    class Meta:&#xA;        model = Book&#xA;&#xA;    title = factory.Faker(&#39;sentence&#39;, nb_words=4)&#xA;    author_name = factory.Faker(&#39;name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing the &lt;code&gt;random&lt;/code&gt; instance&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;.random&lt;/code&gt; property on the generator returns the instance of &lt;code&gt;random.Random&lt;/code&gt; used to generate the values:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker()&#xA;fake.random&#xA;fake.random.getstate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default all generators share the same instance of &lt;code&gt;random.Random&lt;/code&gt;, which can be accessed with &lt;code&gt;from faker.generator import random&lt;/code&gt;. Using this may be useful for plugins that want to affect all faker instances.&lt;/p&gt; &#xA;&lt;h2&gt;Unique values&lt;/h2&gt; &#xA;&lt;p&gt;Through use of the &lt;code&gt;.unique&lt;/code&gt; property on the generator, you can guarantee that any generated values are unique for this specific instance.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;p&gt;from faker import Faker fake = Faker() names = [fake.unique.first_name() for i in range(500)] assert len(set(names)) == len(names)&lt;/p&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;fake.unique.clear()&lt;/code&gt; clears the already seen values. Note, to avoid infinite loops, after a number of attempts to find a unique value, Faker will throw a &lt;code&gt;UniquenessException&lt;/code&gt;. Beware of the &lt;code&gt;birthday paradox &amp;lt;https://en.wikipedia.org/wiki/Birthday_problem&amp;gt;&lt;/code&gt;_, collisions are more likely than you&#39;d think.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;p&gt;from faker import Faker&lt;/p&gt; &#xA;&lt;p&gt;fake = Faker() for i in range(3): # Raises a UniquenessException fake.unique.boolean()&lt;/p&gt; &#xA;&lt;p&gt;In addition, only hashable arguments and return values can be used with &lt;code&gt;.unique&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Seeding the Generator&lt;/h2&gt; &#xA;&lt;p&gt;When using Faker for unit testing, you will often want to generate the same data set. For convenience, the generator also provides a &lt;code&gt;seed()&lt;/code&gt; method, which seeds the shared random number generator. A Seed produces the same result when the same methods with the same version of faker are called.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker()&#xA;Faker.seed(4321)&#xA;&#xA;print(fake.name())&#xA;# &#39;Margaret Boehm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each generator can also be switched to use its own instance of &lt;code&gt;random.Random&lt;/code&gt;, separated from the shared one, by using the &lt;code&gt;seed_instance()&lt;/code&gt; method, which acts the same way. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from faker import Faker&#xA;fake = Faker()&#xA;fake.seed_instance(4321)&#xA;&#xA;print(fake.name())&#xA;# &#39;Margaret Boehm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that as we keep updating datasets, results are not guaranteed to be consistent across patch versions. If you hardcode results in your test, make sure you pinned the version of &lt;code&gt;Faker&lt;/code&gt; down to the patch number.&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;pytest&lt;/code&gt;, you can seed the &lt;code&gt;faker&lt;/code&gt; fixture by defining a &lt;code&gt;faker_seed&lt;/code&gt; fixture. Please check out the &lt;code&gt;pytest fixture docs&lt;/code&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Run tests:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write documentation for the providers of the default locale:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m faker &amp;gt; docs.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write documentation for the providers of a specific locale:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m faker --lang=de_DE &amp;gt; docs_de.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;CONTRIBUTING&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Faker is released under the MIT License. See the bundled &lt;code&gt;LICENSE&lt;/code&gt;_ file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FZaninotto&lt;/code&gt;_ / &lt;code&gt;PHP Faker&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Distribute&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Buildout&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modern-package-template&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _FZaninotto: &lt;a href=&#34;https://github.com/fzaninotto&#34;&gt;https://github.com/fzaninotto&lt;/a&gt; .. _PHP Faker: &lt;a href=&#34;https://github.com/fzaninotto/Faker&#34;&gt;https://github.com/fzaninotto/Faker&lt;/a&gt; .. _Perl Faker: &lt;a href=&#34;http://search.cpan.org/~jasonk/Data-Faker-0.07/&#34;&gt;http://search.cpan.org/~jasonk/Data-Faker-0.07/&lt;/a&gt; .. _Ruby Faker: &lt;a href=&#34;https://github.com/stympy/faker&#34;&gt;https://github.com/stympy/faker&lt;/a&gt; .. _Distribute: &lt;a href=&#34;https://pypi.org/project/distribute/&#34;&gt;https://pypi.org/project/distribute/&lt;/a&gt; .. _Buildout: &lt;a href=&#34;http://www.buildout.org/&#34;&gt;http://www.buildout.org/&lt;/a&gt; .. _modern-package-template: &lt;a href=&#34;https://pypi.org/project/modern-package-template/&#34;&gt;https://pypi.org/project/modern-package-template/&lt;/a&gt; .. _extended docs: &lt;a href=&#34;https://faker.readthedocs.io/en/stable/&#34;&gt;https://faker.readthedocs.io/en/stable/&lt;/a&gt; .. _bundled providers: &lt;a href=&#34;https://faker.readthedocs.io/en/stable/providers.html&#34;&gt;https://faker.readthedocs.io/en/stable/providers.html&lt;/a&gt; .. _community providers: &lt;a href=&#34;https://faker.readthedocs.io/en/stable/communityproviders.html&#34;&gt;https://faker.readthedocs.io/en/stable/communityproviders.html&lt;/a&gt; .. _pytest fixture docs: &lt;a href=&#34;https://faker.readthedocs.io/en/master/pytest-fixtures.html&#34;&gt;https://faker.readthedocs.io/en/master/pytest-fixtures.html&lt;/a&gt; .. _LICENSE: &lt;a href=&#34;https://github.com/joke2k/faker/raw/master/LICENSE.txt&#34;&gt;https://github.com/joke2k/faker/blob/master/LICENSE.txt&lt;/a&gt; .. _CONTRIBUTING: &lt;a href=&#34;https://github.com/joke2k/faker/raw/master/CONTRIBUTING.rst&#34;&gt;https://github.com/joke2k/faker/blob/master/CONTRIBUTING.rst&lt;/a&gt; .. _Factory Boy: &lt;a href=&#34;https://github.com/FactoryBoy/factory_boy&#34;&gt;https://github.com/FactoryBoy/factory_boy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |pypi| image:: &lt;a href=&#34;https://img.shields.io/pypi/v/Faker.svg?style=flat-square&amp;amp;label=version&#34;&gt;https://img.shields.io/pypi/v/Faker.svg?style=flat-square&amp;amp;label=version&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/Faker/&#34;&gt;https://pypi.org/project/Faker/&lt;/a&gt; :alt: Latest version released on PyPI&lt;/p&gt; &#xA;&lt;p&gt;.. |coverage| image:: &lt;a href=&#34;https://img.shields.io/coveralls/joke2k/faker/master.svg?style=flat-square&#34;&gt;https://img.shields.io/coveralls/joke2k/faker/master.svg?style=flat-square&lt;/a&gt; :target: &lt;a href=&#34;https://coveralls.io/r/joke2k/faker?branch=master&#34;&gt;https://coveralls.io/r/joke2k/faker?branch=master&lt;/a&gt; :alt: Test coverage&lt;/p&gt; &#xA;&lt;p&gt;.. |build| image:: &lt;a href=&#34;https://github.com/joke2k/faker/actions/workflows/ci.yml/badge.svg&#34;&gt;https://github.com/joke2k/faker/actions/workflows/ci.yml/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/joke2k/faker/actions/workflows/ci.yml&#34;&gt;https://github.com/joke2k/faker/actions/workflows/ci.yml&lt;/a&gt; :alt: Build status of the master branch&lt;/p&gt; &#xA;&lt;p&gt;.. |license| image:: &lt;a href=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&#34;&gt;https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square&lt;/a&gt; :target: &lt;a href=&#34;https://raw.githubusercontent.com/joke2k/faker/master/LICENSE.txt&#34;&gt;https://raw.githubusercontent.com/joke2k/faker/master/LICENSE.txt&lt;/a&gt; :alt: Package license&lt;/p&gt;</summary>
  </entry>
</feed>