<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-17T01:57:24Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IBM/mcp-context-forge</title>
    <updated>2025-08-17T01:57:24Z</updated>
    <id>tag:github.com,2025-08-17:/IBM/mcp-context-forge</id>
    <link href="https://github.com/IBM/mcp-context-forge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Model Context Protocol (MCP) Gateway &amp; Registry. Serves as a central management point for tools, resources, and prompts that can be accessed by MCP-compatible LLM applications. Converts REST API endpoints to MCP, composes virtual MCP servers with added security and observability, and converts between protocols (stdio, SSE, Streamable HTTP).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Gateway&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Model Context Protocol gateway &amp;amp; proxy - unify REST, MCP, and A2A with federation, virtual servers, retries, security, and an optional admin UI.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/docs/docs/images/contextforge-banner.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt; &#xA;&lt;!-- === CI / Security / Build Badges === --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/python-package.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/python-package.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Python Package&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/codeql.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/codeql.yml/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/bandit.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/bandit.yml/badge.svg?sanitize=true&#34; alt=&#34;Bandit Security&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/dependency-review.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/dependency-review.yml/badge.svg?sanitize=true&#34; alt=&#34;Dependency Review&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/pytest.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/pytest.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests &amp;amp; Coverage&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Lint &amp;amp; Static Analysis&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- === Container Build &amp; Deploy === --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/docker-image.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/docker-image.yml/badge.svg?sanitize=true&#34; alt=&#34;Secure Docker Build&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/ibm-cloud-code-engine.yml&#34;&gt;&lt;img src=&#34;https://github.com/IBM/mcp-context-forge/actions/workflows/ibm-cloud-code-engine.yml/badge.svg?sanitize=true&#34; alt=&#34;Deploy to IBM Code Engine&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- === Package / Container === --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/async-await-green.svg?sanitize=true&#34; alt=&#34;Async&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/ibm/mcp-context-forge&#34; alt=&#34;License&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://pypi.org/project/mcp-contextforge-gateway/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/mcp-contextforge-gateway&#34; alt=&#34;PyPI&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/ibm/mcp-context-forge/pkgs/container/mcp-context-forge&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docker-ghcr.io%2Fibm%2Fmcp--context--forge-blue&#34; alt=&#34;Docker Image&#34; /&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;ContextForge MCP Gateway is a feature-rich gateway, proxy and MCP Registry that federates MCP and REST services - unifying discovery, auth, rate-limiting, observability, virtual servers, multi-transport protocols, and an optional Admin UI into one clean endpoint for your AI clients. It runs as a fully compliant MCP server, deployable via PyPI or Docker, and scales to multi-cluster environments on Kubernetes with Redis-backed federation and caching.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://ibm.github.io/mcp-context-forge/images/mcpgateway.gif&#34; alt=&#34;MCP Gateway&#34; /&gt;&lt;/h2&gt; &#xA;&lt;!-- vscode-markdown-toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-overview--goals&#34;&gt;üöÄ Overview &amp;amp; Goals&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;3&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#quick-start---pypi&#34;&gt;Quick Start - PyPI&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;3.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#1---install--run-copy-paste-friendly&#34;&gt;1 - Install &amp;amp; run (copy-paste friendly)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;4&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#quick-start---containers&#34;&gt;Quick Start - Containers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;4.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-docker&#34;&gt;üê≥ Docker&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;4.1.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#1---minimum-viable-run&#34;&gt;1 - Minimum viable run&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;4.1.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#2---persist-the-sqlite-database&#34;&gt;2 - Persist the SQLite database&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;4.1.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#3---local-tool-discovery-host-network&#34;&gt;3 - Local tool discovery (host network)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;4.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-podman-rootless-friendly&#34;&gt;ü¶≠ Podman (rootless-friendly)&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;4.2.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#1---basic-run&#34;&gt;1 - Basic run&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;4.2.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#2---persist-sqlite&#34;&gt;2 - Persist SQLite&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;4.2.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#3---host-networking-rootless&#34;&gt;3 - Host networking (rootless)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;5&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#testing-mcpgatewaywrapper-by-hand&#34;&gt;Testing &lt;code&gt;mcpgateway.wrapper&lt;/code&gt; by hand&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;5.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-running-from-an-mcp-client-mcpgatewaywrapper&#34;&gt;üß© Running from an MCP Client (&lt;code&gt;mcpgateway.wrapper&lt;/code&gt;)&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;5.1.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#1---install-uv-uvx-is-an-alias-it-provides&#34;&gt;1 - Install &lt;code&gt;uv&lt;/code&gt; (&lt;code&gt;uvx&lt;/code&gt; is an alias it provides)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;5.1.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#2---create-an-on-the-spot-venv--run-the-wrapper&#34;&gt;2 - Create an on-the-spot venv &amp;amp; run the wrapper&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;5.1.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#claude-desktop-json-runs-through-uvx&#34;&gt;Claude Desktop JSON (runs through &lt;strong&gt;uvx&lt;/strong&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;5.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-using-with-claude-desktop-or-any-gui-mcp-client&#34;&gt;üöÄ Using with Claude Desktop (or any GUI MCP client)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;6&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-quick-start-vs-code-dev-container&#34;&gt;üöÄ Quick Start: VS Code Dev Container&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;6.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#1---clone--open&#34;&gt;1 - Clone &amp;amp; Open&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;6.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#2---first-time-build-automatic&#34;&gt;2 - First-Time Build (Automatic)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;7&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#quick-start-manual-install&#34;&gt;Quick Start (manual install)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;7.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;7.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#one-liner-dev&#34;&gt;One-liner (dev)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;7.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#containerized-self-signed-tls&#34;&gt;Containerized (self-signed TLS)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;7.4. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#smoke-test-the-api&#34;&gt;Smoke-test the API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;8&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;8.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#via-make&#34;&gt;Via Make&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;8.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#uv-alternative&#34;&gt;UV (alternative)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;8.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#pip-alternative&#34;&gt;pip (alternative)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;8.4. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#optional-postgresql-adapter&#34;&gt;Optional (PostgreSQL adapter)&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;8.4.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#quick-postgres-container&#34;&gt;Quick Postgres container&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;9&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#configuration-env-or-env-vars&#34;&gt;Configuration (&lt;code&gt;.env&lt;/code&gt; or env vars)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;9.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#basic&#34;&gt;Basic&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#ui-features&#34;&gt;UI Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.4. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.5. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.6. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#transport&#34;&gt;Transport&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.7. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#federation&#34;&gt;Federation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.8. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.9. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.10. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.11. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#health-checks&#34;&gt;Health Checks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.12. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.13. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#cache-backend&#34;&gt;Cache Backend&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;9.14. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;10&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#running&#34;&gt;Running&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;10.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#makefile&#34;&gt;Makefile&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;10.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#script-helper&#34;&gt;Script helper&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;10.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#manual-uvicorn&#34;&gt;Manual (Uvicorn)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;11&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#authentication-examples&#34;&gt;Authentication examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;12&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#%EF%B8%8F-aws--azure--openshift&#34;&gt;‚òÅÔ∏è AWS / Azure / OpenShift&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;13&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#%EF%B8%8F-ibm-cloud-code-engine-deployment&#34;&gt;‚òÅÔ∏è IBM Cloud Code Engine Deployment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;13.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-prerequisites-1&#34;&gt;üîß Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;13.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-environment-variables&#34;&gt;üì¶ Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;13.3. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-make-targets&#34;&gt;üöÄ Make Targets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;13.4. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-example-workflow&#34;&gt;üìù Example Workflow&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;14&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#api-endpoints&#34;&gt;API Endpoints&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;15&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;16&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;17&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#api-documentation&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;18&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#makefile-targets&#34;&gt;Makefile targets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;19&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#-troubleshooting&#34;&gt;üîç Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;19.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#diagnose-the-listener&#34;&gt;Diagnose the listener&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;19.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#why-localhost-fails-on-windows&#34;&gt;Why localhost fails on Windows&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;19.2.1. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#fix-podman-rootless&#34;&gt;Fix (Podman rootless)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;19.2.2. &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#fix-docker-desktop--419&#34;&gt;Fix (Docker Desktop &amp;gt; 4.19)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;20&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;21&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;22&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;23&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#core-authors-and-maintainers&#34;&gt;Core Authors and Maintainers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;24&#34;&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/#star-history-and-project-activity&#34;&gt;Star History and Project Activity&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vscode-markdown-toc-config&#xA;    numbering=true&#xA;    autoSave=true&#xA;    /vscode-markdown-toc-config --&gt; &#xA;&lt;!-- /vscode-markdown-toc --&gt; &#xA;&lt;h2&gt;üöÄ Overview &amp;amp; Goals&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;ContextForge MCP Gateway&lt;/strong&gt; is a gateway, registry, and proxy that sits in front of any &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP) server or REST API-exposing a unified endpoint for all your AI clients.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Caution&lt;/strong&gt;: The current release (0.5.0) is considered alpha / early beta. It is not production-ready and should only be used for local development, testing, or experimentation. Features, APIs, and behaviors are subject to change without notice. &lt;strong&gt;Do not&lt;/strong&gt; deploy in production environments without thorough security review, validation and additional security mechanisms. Many of the features required for secure, large-scale, or multi-tenant production deployments are still on the &lt;a href=&#34;https://ibm.github.io/mcp-context-forge/architecture/roadmap/&#34;&gt;project roadmap&lt;/a&gt; - which is itself evolving.&lt;/p&gt; &#xA;&lt;p&gt;It currently supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Federation across multiple MCP and REST services&lt;/li&gt; &#xA; &lt;li&gt;Virtualization of legacy APIs as MCP-compliant tools and servers&lt;/li&gt; &#xA; &lt;li&gt;Transport over HTTP, JSON-RPC, WebSocket, SSE (with configurable keepalive), stdio and streamable-HTTP&lt;/li&gt; &#xA; &lt;li&gt;An Admin UI for real-time management, configuration, and log monitoring&lt;/li&gt; &#xA; &lt;li&gt;Built-in auth, retries, and rate-limiting&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenTelemetry observability&lt;/strong&gt; with Phoenix, Jaeger, Zipkin, and other OTLP backends&lt;/li&gt; &#xA; &lt;li&gt;Scalable deployments via Docker or PyPI, Redis-backed caching, and multi-cluster federation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ibm.github.io/mcp-context-forge/images/mcpgateway.svg?sanitize=true&#34; alt=&#34;MCP Gateway Architecture&#34; /&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a list of upcoming features, check out the &lt;a href=&#34;https://ibm.github.io/mcp-context-forge/architecture/roadmap/&#34;&gt;ContextForge MCP Gateway Roadmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Important&lt;/strong&gt;: MCP Gateway is not a standalone product - it is an open source component with &lt;strong&gt;NO OFFICIAL SUPPORT&lt;/strong&gt; from IBM or its affiliates that can be integrated into your own solution architecture. If you choose to use it, you are responsible for evaluating its fit, securing the deployment, and managing its lifecycle. See &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üîå Gateway Layer with Protocol Flexibility&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Sits in front of any MCP server or REST API&lt;/li&gt; &#xA;  &lt;li&gt;Lets you choose your MCP protocol version (e.g., &lt;code&gt;2025-03-26&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Exposes a single, unified interface for diverse backends&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üåê Federation of Peer Gateways (MCP Registry)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Auto-discovers or configures peer gateways (via mDNS or manual)&lt;/li&gt; &#xA;  &lt;li&gt;Performs health checks and merges remote registries transparently&lt;/li&gt; &#xA;  &lt;li&gt;Supports Redis-backed syncing and fail-over&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üß© Virtualization of REST/gRPC Services&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Wraps non-MCP services as virtual MCP servers&lt;/li&gt; &#xA;  &lt;li&gt;Registers tools, prompts, and resources with minimal configuration&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üîÅ REST-to-MCP Tool Adapter&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Adapts REST APIs into tools with:&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Automatic JSON Schema extraction&lt;/li&gt; &#xA;    &lt;li&gt;Support for headers, tokens, and custom auth&lt;/li&gt; &#xA;    &lt;li&gt;Retry, timeout, and rate-limit policies&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üß† Unified Registries&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Prompts&lt;/strong&gt;: Jinja2 templates, multimodal support, rollback/versioning&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Resources&lt;/strong&gt;: URI-based access, MIME detection, caching, SSE updates&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Native or adapted, with input validation and concurrency controls&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üìà Admin UI, Observability &amp;amp; Dev Experience&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Admin UI built with HTMX + Alpine.js&lt;/li&gt; &#xA;  &lt;li&gt;Real-time log viewer with filtering, search, and export capabilities&lt;/li&gt; &#xA;  &lt;li&gt;Auth: Basic, JWT, or custom schemes&lt;/li&gt; &#xA;  &lt;li&gt;Structured logs, health endpoints, metrics&lt;/li&gt; &#xA;  &lt;li&gt;400+ tests, Makefile targets, live reload, pre-commit hooks&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üîç OpenTelemetry Observability&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Vendor-agnostic tracing&lt;/strong&gt; with OpenTelemetry (OTLP) protocol support&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Multiple backend support&lt;/strong&gt;: Phoenix (LLM-focused), Jaeger, Zipkin, Tempo, DataDog, New Relic&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Distributed tracing&lt;/strong&gt; across federated gateways and services&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Automatic instrumentation&lt;/strong&gt; of tools, prompts, resources, and gateway operations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;LLM-specific metrics&lt;/strong&gt;: Token usage, costs, model performance&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Zero-overhead when disabled&lt;/strong&gt; with graceful degradation&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Easy configuration&lt;/strong&gt; via environment variables&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Quick start with Phoenix (LLM observability):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start Phoenix&#xA;docker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest&#xA;&#xA;# Configure gateway&#xA;export OTEL_ENABLE_OBSERVABILITY=true&#xA;export OTEL_TRACES_EXPORTER=otlp&#xA;export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317&#xA;&#xA;# Run gateway - traces automatically sent to Phoenix&#xA;mcpgateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://ibm.github.io/mcp-context-forge/manage/observability/&#34;&gt;Observability Documentation&lt;/a&gt; for detailed setup with other backends.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Quick Start - PyPI&lt;/h2&gt; &#xA;&lt;p&gt;MCP Gateway is published on &lt;a href=&#34;https://pypi.org/project/mcp-contextforge-gateway/&#34;&gt;PyPI&lt;/a&gt; as &lt;code&gt;mcp-contextforge-gateway&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p&gt;&lt;strong&gt;TLDR;&lt;/strong&gt;: (single command using &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BASIC_AUTH_PASSWORD=pass \&#xA;MCPGATEWAY_UI_ENABLED=true \&#xA;MCPGATEWAY_ADMIN_API_ENABLED=true \&#xA;uvx --from mcp-contextforge-gateway mcpgateway --host 0.0.0.0 --port 4444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üìã Prerequisites&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Python ‚â• 3.10&lt;/strong&gt; (3.11 recommended)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;curl + jq&lt;/strong&gt; - only for the last smoke-test step&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;1 - Install &amp;amp; run (copy-paste friendly)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1Ô∏è‚É£  Isolated env + install from pypi&#xA;mkdir mcpgateway &amp;amp;&amp;amp; cd mcpgateway&#xA;python3 -m venv .venv &amp;amp;&amp;amp; source .venv/bin/activate&#xA;pip install --upgrade pip&#xA;pip install mcp-contextforge-gateway&#xA;&#xA;# 2Ô∏è‚É£  Launch on all interfaces with custom creds &amp;amp; secret key&#xA;# Enable the Admin API endpoints (true/false) - disabled by default&#xA;export MCPGATEWAY_UI_ENABLED=true&#xA;export MCPGATEWAY_ADMIN_API_ENABLED=true&#xA;&#xA;BASIC_AUTH_PASSWORD=pass JWT_SECRET_KEY=my-test-key \&#xA;  mcpgateway --host 0.0.0.0 --port 4444 &amp;amp;   # admin/pass&#xA;&#xA;# 3Ô∏è‚É£  Generate a bearer token &amp;amp; smoke-test the API&#xA;export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token \&#xA;    --username admin --exp 10080 --secret my-test-key)&#xA;&#xA;curl -s -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://127.0.0.1:4444/version | jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Windows (PowerShell) quick-start&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# 1Ô∏è‚É£  Isolated env + install from PyPI&#xA;mkdir mcpgateway ; cd mcpgateway&#xA;python3 -m venv .venv ; .\.venv\Scripts\Activate.ps1&#xA;pip install --upgrade pip&#xA;pip install mcp-contextforge-gateway&#xA;&#xA;# 2Ô∏è‚É£  Environment variables (session-only)&#xA;$Env:MCPGATEWAY_UI_ENABLED        = &#34;true&#34;&#xA;$Env:MCPGATEWAY_ADMIN_API_ENABLED = &#34;true&#34;&#xA;$Env:BASIC_AUTH_PASSWORD          = &#34;changeme&#34;      # admin/changeme&#xA;$Env:JWT_SECRET_KEY               = &#34;my-test-key&#34;&#xA;&#xA;# 3Ô∏è‚É£  Launch the gateway&#xA;mcpgateway.exe --host 0.0.0.0 --port 4444&#xA;&#xA;#   Optional: background it&#xA;# Start-Process -FilePath &#34;mcpgateway.exe&#34; -ArgumentList &#34;--host 0.0.0.0 --port 4444&#34;&#xA;&#xA;# 4Ô∏è‚É£  Bearer token and smoke-test&#xA;$Env:MCPGATEWAY_BEARER_TOKEN = python3 -m mcpgateway.utils.create_jwt_token `&#xA;    --username admin --exp 10080 --secret my-test-key&#xA;&#xA;curl -s -H &#34;Authorization: Bearer $Env:MCPGATEWAY_BEARER_TOKEN&#34; `&#xA;     http://127.0.0.1:4444/version | jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;More configuration&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Copy &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/.env.example&#34;&gt;.env.example&lt;/a&gt; to &lt;code&gt;.env&lt;/code&gt; and tweak any of the settings (or use them as env variables).&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üöÄ End-to-end demo (register a local MCP server)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1Ô∏è‚É£  Spin up the sample GO MCP time server using mcpgateway.translate &amp;amp; docker&#xA;python3 -m mcpgateway.translate \&#xA;     --stdio &#34;docker run --rm -i -p 8888:8080 ghcr.io/ibm/fast-time-server:latest -transport=stdio&#34; \&#xA;     --expose-sse \&#xA;     --port 8003&#xA;&#xA;# Or using the official mcp-server-git using uvx:&#xA;pip install uv # to install uvx, if not already installed&#xA;python3 -m mcpgateway.translate --stdio &#34;uvx mcp-server-git&#34; --expose-sse --port 9000&#xA;&#xA;# Alternative: running the local binary&#xA;# cd mcp-servers/go/fast-time-server; make build&#xA;# python3 -m mcpgateway.translate --stdio &#34;./dist/fast-time-server -transport=stdio&#34; --expose-sse --port 8002&#xA;&#xA;# NEW: Expose via multiple protocols simultaneously!&#xA;python3 -m mcpgateway.translate \&#xA;     --stdio &#34;uvx mcp-server-git&#34; \&#xA;     --expose-sse \&#xA;     --expose-streamable-http \&#xA;     --port 9000&#xA;# Now accessible via both /sse (SSE) and /mcp (streamable HTTP) endpoints&#xA;&#xA;# 2Ô∏è‚É£  Register it with the gateway&#xA;curl -s -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;name&#34;:&#34;fast_time&#34;,&#34;url&#34;:&#34;http://localhost:9000/sse&#34;}&#39; \&#xA;     http://localhost:4444/gateways&#xA;&#xA;# 3Ô∏è‚É£  Verify tool catalog&#xA;curl -s -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/tools | jq&#xA;&#xA;# 4Ô∏è‚É£  Create a *virtual server* bundling those tools. Use the ID of tools from the tool catalog (Step #3) and pass them in the associatedTools list.&#xA;curl -s -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;name&#34;:&#34;time_server&#34;,&#34;description&#34;:&#34;Fast time tools&#34;,&#34;associatedTools&#34;:[&amp;lt;ID_OF_TOOLS&amp;gt;]}&#39; \&#xA;     http://localhost:4444/servers | jq&#xA;&#xA;# Example curl&#xA;curl -s -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34;&#xA;     -H &#34;Content-Type: application/json&#34;&#xA;     -d &#39;{&#34;name&#34;:&#34;time_server&#34;,&#34;description&#34;:&#34;Fast time tools&#34;,&#34;associatedTools&#34;:[&#34;6018ca46d32a4ac6b4c054c13a1726a2&#34;]}&#39; \&#xA;     http://localhost:4444/servers | jq&#xA;&#xA;# 5Ô∏è‚É£  List servers (should now include the UUID of the newly created virtual server)&#xA;curl -s -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/servers | jq&#xA;&#xA;# 6Ô∏è‚É£  Client SSE endpoint. Inspect it interactively with the MCP Inspector CLI (or use any MCP client)&#xA;npx -y @modelcontextprotocol/inspector&#xA;# Transport Type: SSE, URL: http://localhost:4444/servers/UUID_OF_SERVER_1/sse,  Header Name: &#34;Authorization&#34;, Bearer Token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üñß Using the stdio wrapper (mcpgateway-wrapper)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export MCP_AUTH_TOKEN=$MCPGATEWAY_BEARER_TOKEN&#xA;export MCP_SERVER_CATALOG_URLS=http://localhost:4444/servers/UUID_OF_SERVER_1&#xA;python3 -m mcpgateway.wrapper  # Ctrl-C to exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also run it with &lt;code&gt;uv&lt;/code&gt; or inside Docker/Podman - see the &lt;em&gt;Containers&lt;/em&gt; section above.&lt;/p&gt; &#xA; &lt;p&gt;In MCP Inspector, define &lt;code&gt;MCP_AUTH_TOKEN&lt;/code&gt; and &lt;code&gt;MCP_SERVER_CATALOG_URLS&lt;/code&gt; env variables, and select &lt;code&gt;python3&lt;/code&gt; as the Command, and &lt;code&gt;-m mcpgateway.wrapper&lt;/code&gt; as Arguments.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $PWD/.venv/bin/python3 # Using the Python3 full path ensures you have a working venv&#xA;export MCP_SERVER_CATALOG_URLS=&#39;http://localhost:4444/servers/UUID_OF_SERVER_1&#39;&#xA;export MCP_AUTH_TOKEN=${MCPGATEWAY_BEARER_TOKEN}&#xA;npx -y @modelcontextprotocol/inspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;When using a MCP Client such as Claude with stdio:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mcpgateway-wrapper&#34;: {&#xA;      &#34;command&#34;: &#34;python&#34;,&#xA;      &#34;args&#34;: [&#34;-m&#34;, &#34;mcpgateway.wrapper&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;MCP_AUTH_TOKEN&#34;: &#34;your-token-here&#34;,&#xA;        &#34;MCP_SERVER_CATALOG_URLS&#34;: &#34;http://localhost:4444/servers/UUID_OF_SERVER_1&#34;,&#xA;        &#34;MCP_TOOL_CALL_TIMEOUT&#34;: &#34;120&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Quick Start - Containers&lt;/h2&gt; &#xA;&lt;p&gt;Use the official OCI image from GHCR with &lt;strong&gt;Docker&lt;/strong&gt; &lt;em&gt;or&lt;/em&gt; &lt;strong&gt;Podman&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h3&gt;üê≥ Docker&lt;/h3&gt; &#xA;&lt;h4&gt;1 - Minimum viable run&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d --name mcpgateway \&#xA;  -p 4444:4444 \&#xA;  -e MCPGATEWAY_UI_ENABLED=true \&#xA;  -e MCPGATEWAY_ADMIN_API_ENABLED=true \&#xA;  -e HOST=0.0.0.0 \&#xA;  -e JWT_SECRET_KEY=my-test-key \&#xA;  -e BASIC_AUTH_USER=admin \&#xA;  -e BASIC_AUTH_PASSWORD=changeme \&#xA;  -e AUTH_REQUIRED=true \&#xA;  -e DATABASE_URL=sqlite:///./mcp.db \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0&#xA;&#xA;# Tail logs (Ctrl+C to quit)&#xA;docker logs -f mcpgateway&#xA;&#xA;# Generating an API key&#xA;docker run --rm -it ghcr.io/ibm/mcp-context-forge:0.5.0 \&#xA;  python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browse to &lt;strong&gt;&lt;a href=&#34;http://localhost:4444/admin&#34;&gt;http://localhost:4444/admin&lt;/a&gt;&lt;/strong&gt; (user &lt;code&gt;admin&lt;/code&gt; / pass &lt;code&gt;changeme&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;2 - Persist the SQLite database&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $(pwd)/data&#xA;&#xA;touch $(pwd)/data/mcp.db&#xA;&#xA;sudo chown -R :docker $(pwd)/data&#xA;&#xA;chmod 777 $(pwd)/data&#xA;&#xA;docker run -d --name mcpgateway \&#xA;  --restart unless-stopped \&#xA;  -p 4444:4444 \&#xA;  -v $(pwd)/data:/data \&#xA;  -e MCPGATEWAY_UI_ENABLED=true \&#xA;  -e MCPGATEWAY_ADMIN_API_ENABLED=true \&#xA;  -e DATABASE_URL=sqlite:////data/mcp.db \&#xA;  -e HOST=0.0.0.0 \&#xA;  -e JWT_SECRET_KEY=my-test-key \&#xA;  -e BASIC_AUTH_USER=admin \&#xA;  -e BASIC_AUTH_PASSWORD=changeme \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SQLite now lives on the host at &lt;code&gt;./data/mcp.db&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;3 - Local tool discovery (host network)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $(pwd)/data&#xA;&#xA;touch $(pwd)/data/mcp.db&#xA;&#xA;sudo chown -R :docker $(pwd)/data&#xA;&#xA;chmod 777 $(pwd)/data&#xA;&#xA;docker run -d --name mcpgateway \&#xA;  --network=host \&#xA;  -e MCPGATEWAY_UI_ENABLED=true \&#xA;  -e MCPGATEWAY_ADMIN_API_ENABLED=true \&#xA;  -e HOST=0.0.0.0 \&#xA;  -e PORT=4444 \&#xA;  -e DATABASE_URL=sqlite:////data/mcp.db \&#xA;  -v $(pwd)/data:/data \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;--network=host&lt;/code&gt; allows Docker to access the local network, allowing you to add MCP servers running on your host. See &lt;a href=&#34;https://docs.docker.com/engine/network/drivers/host/&#34;&gt;Docker Host network driver documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h3&gt;ü¶≠ Podman (rootless-friendly)&lt;/h3&gt; &#xA;&lt;h4&gt;1 - Basic run&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run -d --name mcpgateway \&#xA;  -p 4444:4444 \&#xA;  -e HOST=0.0.0.0 \&#xA;  -e DATABASE_URL=sqlite:///./mcp.db \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2 - Persist SQLite&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $(pwd)/data&#xA;&#xA;touch $(pwd)/data/mcp.db&#xA;&#xA;sudo chown -R :docker $(pwd)/data&#xA;&#xA;chmod 777 $(pwd)/data&#xA;&#xA;podman run -d --name mcpgateway \&#xA;  --restart=on-failure \&#xA;  -p 4444:4444 \&#xA;  -v $(pwd)/data:/data \&#xA;  -e DATABASE_URL=sqlite:////data/mcp.db \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3 - Host networking (rootless)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p $(pwd)/data&#xA;&#xA;touch $(pwd)/data/mcp.db&#xA;&#xA;sudo chown -R :docker $(pwd)/data&#xA;&#xA;chmod 777 $(pwd)/data&#xA;&#xA;podman run -d --name mcpgateway \&#xA;  --network=host \&#xA;  -v $(pwd)/data:/data \&#xA;  -e DATABASE_URL=sqlite:////data/mcp.db \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;‚úèÔ∏è Docker/Podman tips&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;.env files&lt;/strong&gt; - Put all the &lt;code&gt;-e FOO=&lt;/code&gt; lines into a file and replace them with &lt;code&gt;--env-file .env&lt;/code&gt;. See the provided &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/.env.example&#34;&gt;.env.example&lt;/a&gt; for reference.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pinned tags&lt;/strong&gt; - Use an explicit version (e.g. &lt;code&gt;v0.5.0&lt;/code&gt;) instead of &lt;code&gt;latest&lt;/code&gt; for reproducible builds.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;JWT tokens&lt;/strong&gt; - Generate one in the running container:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec mcpgateway python3 -m mcpgateway.utils.create_jwt_token -u admin -e 10080 --secret my-test-key&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Upgrades&lt;/strong&gt; - Stop, remove, and rerun with the same &lt;code&gt;-v $(pwd)/data:/data&lt;/code&gt; mount; your DB and config stay intact.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üöë Smoke-test the running container&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/health | jq&#xA;curl -s -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/tools | jq&#xA;curl -s -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/version | jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üñß Running the MCP Gateway stdio wrapper&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;mcpgateway.wrapper&lt;/code&gt; lets you connect to the gateway over &lt;strong&gt;stdio&lt;/strong&gt; while keeping JWT authentication. You should run this from the MCP Client. The example below is just for testing.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set environment variables&#xA;export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 10080 --secret my-test-key)&#xA;export MCP_AUTH_TOKEN=${MCPGATEWAY_BEARER_TOKEN}&#xA;export MCP_SERVER_CATALOG_URLS=&#39;http://localhost:4444/servers/UUID_OF_SERVER_1&#39;&#xA;export MCP_TOOL_CALL_TIMEOUT=120&#xA;export MCP_WRAPPER_LOG_LEVEL=DEBUG  # or OFF to disable logging&#xA;&#xA;docker run --rm -i \&#xA;  -e MCP_AUTH_TOKEN=$MCPGATEWAY_BEARER_TOKEN \&#xA;  -e MCP_SERVER_CATALOG_URLS=http://host.docker.internal:4444/servers/UUID_OF_SERVER_1 \&#xA;  -e MCP_TOOL_CALL_TIMEOUT=120 \&#xA;  -e MCP_WRAPPER_LOG_LEVEL=DEBUG \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0 \&#xA;  python3 -m mcpgateway.wrapper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Testing &lt;code&gt;mcpgateway.wrapper&lt;/code&gt; by hand:&lt;/h2&gt; &#xA;&lt;p&gt;Because the wrapper speaks JSON-RPC over stdin/stdout, you can interact with it using nothing more than a terminal or pipes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start the MCP Gateway Wrapper&#xA;export MCP_AUTH_TOKEN=${MCPGATEWAY_BEARER_TOKEN}&#xA;export MCP_SERVER_CATALOG_URLS=http://localhost:4444/servers/YOUR_SERVER_UUID&#xA;python3 -m mcpgateway.wrapper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Initialize the protocol&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;# Initialize the protocol&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:1,&#34;method&#34;:&#34;initialize&#34;,&#34;params&#34;:{&#34;protocolVersion&#34;:&#34;2025-03-26&#34;,&#34;capabilities&#34;:{},&#34;clientInfo&#34;:{&#34;name&#34;:&#34;demo&#34;,&#34;version&#34;:&#34;0.0.1&#34;}}}&#xA;&#xA;# Then after the reply:&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;method&#34;:&#34;notifications/initialized&#34;,&#34;params&#34;:{}}&#xA;&#xA;# Get prompts&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:4,&#34;method&#34;:&#34;prompts/list&#34;}&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:5,&#34;method&#34;:&#34;prompts/get&#34;,&#34;params&#34;:{&#34;name&#34;:&#34;greeting&#34;,&#34;arguments&#34;:{&#34;user&#34;:&#34;Bob&#34;}}}&#xA;&#xA;# Get resources&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:6,&#34;method&#34;:&#34;resources/list&#34;}&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:7,&#34;method&#34;:&#34;resources/read&#34;,&#34;params&#34;:{&#34;uri&#34;:&#34;https://example.com/some.txt&#34;}}&#xA;&#xA;# Get / call tools&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:2,&#34;method&#34;:&#34;tools/list&#34;}&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:3,&#34;method&#34;:&#34;tools/call&#34;,&#34;params&#34;:{&#34;name&#34;:&#34;get_system_time&#34;,&#34;arguments&#34;:{&#34;timezone&#34;:&#34;Europe/Dublin&#34;}}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Expected responses from mcpgateway.wrapper&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:1,&#34;result&#34;:{&#34;protocolVersion&#34;:&#34;2025-03-26&#34;,&#34;capabilities&#34;:{&#34;experimental&#34;:{},&#34;prompts&#34;:{&#34;listChanged&#34;:false},&#34;resources&#34;:{&#34;subscribe&#34;:false,&#34;listChanged&#34;:false},&#34;tools&#34;:{&#34;listChanged&#34;:false}},&#34;serverInfo&#34;:{&#34;name&#34;:&#34;mcpgateway-wrapper&#34;,&#34;version&#34;:&#34;0.5.0&#34;}}}&#xA;&#xA;# When there&#39;s no tools&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:2,&#34;result&#34;:{&#34;tools&#34;:[]}}&#xA;&#xA;# After you add some tools and create a virtual server&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:2,&#34;result&#34;:{&#34;tools&#34;:[{&#34;annotations&#34;:{&#34;readOnlyHint&#34;:false,&#34;destructiveHint&#34;:true,&#34;idempotentHint&#34;:false,&#34;openWorldHint&#34;:true},&#34;description&#34;:&#34;Convert time between different timezones&#34;,&#34;inputSchema&#34;:{&#34;properties&#34;:{&#34;source_timezone&#34;:{&#34;description&#34;:&#34;Source IANA timezone name&#34;,&#34;type&#34;:&#34;string&#34;},&#34;target_timezone&#34;:{&#34;description&#34;:&#34;Target IANA timezone name&#34;,&#34;type&#34;:&#34;string&#34;},&#34;time&#34;:{&#34;description&#34;:&#34;Time to convert in RFC3339 format or common formats like &#39;2006-01-02 15:04:05&#39;&#34;,&#34;type&#34;:&#34;string&#34;}},&#34;required&#34;:[&#34;time&#34;,&#34;source_timezone&#34;,&#34;target_timezone&#34;],&#34;type&#34;:&#34;object&#34;},&#34;name&#34;:&#34;convert_time&#34;},{&#34;annotations&#34;:{&#34;readOnlyHint&#34;:false,&#34;destructiveHint&#34;:true,&#34;idempotentHint&#34;:false,&#34;openWorldHint&#34;:true},&#34;description&#34;:&#34;Get current system time in specified timezone&#34;,&#34;inputSchema&#34;:{&#34;properties&#34;:{&#34;timezone&#34;:{&#34;description&#34;:&#34;IANA timezone name (e.g., &#39;America/New_York&#39;, &#39;Europe/London&#39;). Defaults to UTC&#34;,&#34;type&#34;:&#34;string&#34;}},&#34;type&#34;:&#34;object&#34;},&#34;name&#34;:&#34;get_system_time&#34;}]}}&#xA;&#xA;# Running the time tool:&#xA;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:3,&#34;result&#34;:{&#34;content&#34;:[{&#34;type&#34;:&#34;text&#34;,&#34;text&#34;:&#34;2025-07-09T00:09:45+01:00&#34;}]}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üß© Running from an MCP Client (&lt;code&gt;mcpgateway.wrapper&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;mcpgateway.wrapper&lt;/code&gt; exposes everything your Gateway knows about over &lt;strong&gt;stdio&lt;/strong&gt;, so any MCP client that &lt;em&gt;can&#39;t&lt;/em&gt; (or &lt;em&gt;shouldn&#39;t&lt;/em&gt;) open an authenticated SSE stream still gets full tool-calling power.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt; to substitute your real Gateway URL (and server ID) for &lt;code&gt;http://localhost:4444/servers/UUID_OF_SERVER_1&lt;/code&gt;. When inside Docker/Podman, that often becomes &lt;code&gt;http://host.docker.internal:4444/servers/UUID_OF_SERVER_1&lt;/code&gt; (macOS/Windows) or the gateway container&#39;s hostname (Linux).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üê≥ Docker / Podman&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i --rm \&#xA;  --network=host \&#xA;  -e MCP_SERVER_CATALOG_URLS=http://localhost:4444/servers/UUID_OF_SERVER_1 \&#xA;  -e MCP_AUTH_TOKEN=${MCPGATEWAY_BEARER_TOKEN} \&#xA;  -e MCP_TOOL_CALL_TIMEOUT=120 \&#xA;  ghcr.io/ibm/mcp-context-forge:0.5.0 \&#xA;  python3 -m mcpgateway.wrapper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üì¶ pipx (one-liner install &amp;amp; run)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install gateway package in its own isolated venv&#xA;pipx install --include-deps mcp-contextforge-gateway&#xA;&#xA;# Run the stdio wrapper&#xA;MCP_AUTH_TOKEN=${MCPGATEWAY_BEARER_TOKEN} \&#xA;MCP_SERVER_CATALOG_URLS=http://localhost:4444/servers/UUID_OF_SERVER_1 \&#xA;python3 -m mcpgateway.wrapper&#xA;# Alternatively with uv&#xA;uv run --directory . -m mcpgateway.wrapper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Claude Desktop JSON&lt;/strong&gt; (uses the host Python that pipx injected):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mcpgateway-wrapper&#34;: {&#xA;      &#34;command&#34;: &#34;python3&#34;,&#xA;      &#34;args&#34;: [&#34;-m&#34;, &#34;mcpgateway.wrapper&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;MCP_AUTH_TOKEN&#34;: &#34;&amp;lt;your-token&amp;gt;&#34;,&#xA;        &#34;MCP_SERVER_CATALOG_URLS&#34;: &#34;http://localhost:4444/servers/UUID_OF_SERVER_1&#34;,&#xA;        &#34;MCP_TOOL_CALL_TIMEOUT&#34;: &#34;120&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;‚ö° uv / uvx (light-speed venvs)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;1 - Install &lt;code&gt;uv&lt;/code&gt; (&lt;code&gt;uvx&lt;/code&gt; is an alias it provides)&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# (a) official one-liner&#xA;curl -Ls https://astral.sh/uv/install.sh | sh&#xA;&#xA;# (b) or via pipx&#xA;pipx install uv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;2 - Create an on-the-spot venv &amp;amp; run the wrapper&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create venv in ~/.venv/mcpgateway (or current dir if you prefer)&#xA;uv venv ~/.venv/mcpgateway&#xA;source ~/.venv/mcpgateway/bin/activate&#xA;&#xA;# Install the gateway package using uv&#xA;uv pip install mcp-contextforge-gateway&#xA;&#xA;# Launch wrapper&#xA;MCP_AUTH_TOKEN=${MCPGATEWAY_BEARER_TOKEN} \&#xA;MCP_SERVER_CATALOG_URLS=http://localhost:4444/servers/UUID_OF_SERVER_1 \&#xA;uv run --directory . -m mcpgateway.wrapper # Use this just for testing, as the Client will run the uv command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Claude Desktop JSON (runs through &lt;strong&gt;uvx&lt;/strong&gt;)&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mcpgateway-wrapper&#34;: {&#xA;      &#34;command&#34;: &#34;uvx&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;--&#34;,&#xA;        &#34;python&#34;,&#xA;        &#34;-m&#34;,&#xA;        &#34;mcpgateway.wrapper&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;MCP_AUTH_TOKEN&#34;: &#34;&amp;lt;your-token&amp;gt;&#34;,&#xA;        &#34;MCP_SERVER_CATALOG_URLS&#34;: &#34;http://localhost:4444/servers/UUID_OF_SERVER_1&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h3&gt;üöÄ Using with Claude Desktop (or any GUI MCP client)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Edit Config&lt;/strong&gt; ‚Üí &lt;code&gt;File ‚ñ∏ Settings ‚ñ∏ Developer ‚ñ∏ Edit Config&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Paste one of the JSON blocks above (Docker / pipx / uvx).&lt;/li&gt; &#xA; &lt;li&gt;Restart the app so the new stdio server is spawned.&lt;/li&gt; &#xA; &lt;li&gt;Open logs in the same menu to verify &lt;code&gt;mcpgateway-wrapper&lt;/code&gt; started and listed your tools.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Need help? See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;MCP Debugging Guide&lt;/strong&gt; - &lt;a href=&#34;https://modelcontextprotocol.io/docs/tools/debugging&#34;&gt;https://modelcontextprotocol.io/docs/tools/debugging&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;üöÄ Quick Start: VS Code Dev Container&lt;/h2&gt; &#xA;&lt;p&gt;Spin up a fully-loaded dev environment (Python 3.11, Docker/Podman CLI, all project dependencies) in just two clicks.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üìã Prerequisites&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;VS Code&lt;/strong&gt; with the &lt;a href=&#34;https://code.visualstudio.com/docs/devcontainers/containers&#34;&gt;Dev Containers extension&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; or &lt;strong&gt;Podman&lt;/strong&gt; installed and running locally&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üß∞ Setup Instructions&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;1 - Clone &amp;amp; Open&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ibm/mcp-context-forge.git&#xA;cd mcp-context-forge&#xA;code .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;VS Code will detect the &lt;code&gt;.devcontainer&lt;/code&gt; and prompt: &lt;strong&gt;&#34;Reopen in Container&#34;&lt;/strong&gt; &lt;em&gt;or&lt;/em&gt; manually run: &lt;kbd&gt;Ctrl/Cmd ‚áß P&lt;/kbd&gt; ‚Üí &lt;strong&gt;Dev Containers: Reopen in Container&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr /&gt; &#xA; &lt;h3&gt;2 - First-Time Build (Automatic)&lt;/h3&gt; &#xA; &lt;p&gt;The container build will:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install system packages &amp;amp; Python 3.11&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;make install-dev&lt;/code&gt; to pull all dependencies&lt;/li&gt; &#xA;  &lt;li&gt;Execute tests to verify the toolchain&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;You&#39;ll land in &lt;code&gt;/workspace&lt;/code&gt; ready to develop.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üõ†Ô∏è Daily Developer Workflow&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Common tasks inside the container:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start dev server (hot reload)&#xA;make dev            # http://localhost:4444&#xA;&#xA;# Run tests &amp;amp; linters&#xA;make test&#xA;make lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Optional:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;make bash&lt;/code&gt; - drop into an interactive shell&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;make clean&lt;/code&gt; - clear build artefacts &amp;amp; caches&lt;/li&gt; &#xA;  &lt;li&gt;Port forwarding is automatic (customize via &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;‚òÅÔ∏è GitHub Codespaces: 1-Click Cloud IDE&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;No local Docker? Use Codespaces:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to the repo ‚Üí &lt;strong&gt;Code ‚ñ∏ Codespaces ‚ñ∏ Create codespace on main&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Wait for the container image to build in the cloud&lt;/li&gt; &#xA;  &lt;li&gt;Develop using the same workflow above&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Quick Start (manual install)&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Python ‚â• 3.10&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GNU Make&lt;/strong&gt; (optional, but all common workflows are available as Make targets)&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;strong&gt;Docker / Podman&lt;/strong&gt; for containerized runs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;One-liner (dev)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make venv install serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What it does:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creates / activates a &lt;code&gt;.venv&lt;/code&gt; in your home folder &lt;code&gt;~/.venv/mcpgateway&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Installs the gateway and necessary dependencies&lt;/li&gt; &#xA; &lt;li&gt;Launches &lt;strong&gt;Gunicorn&lt;/strong&gt; (Uvicorn workers) on &lt;a href=&#34;http://localhost:4444&#34;&gt;http://localhost:4444&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For development, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install-dev # Install development dependencies, ex: linters and test harness&#xA;make lint          # optional: run style checks (ruff, mypy, etc.)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Containerized (self-signed TLS)&lt;/h3&gt; &#xA;&lt;h2&gt;Container Runtime Support&lt;/h2&gt; &#xA;&lt;p&gt;This project supports both Docker and Podman. The Makefile automatically detects which runtime is available and handles image naming differences.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-detection&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make container-build  # Uses podman if available, otherwise docker&#xA;&#xA;&amp;gt; You can use docker or podman, ex:&#xA;&#xA;```bash&#xA;make podman            # build production image&#xA;make podman-run-ssl    # run at https://localhost:4444&#xA;# or listen on port 4444 on your host directly, adds --network=host to podman&#xA;make podman-run-ssl-host&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Smoke-test the API&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -k -sX GET \&#xA;     -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     https://localhost:4444/tools | jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should receive &lt;code&gt;[]&lt;/code&gt; until you register a tool.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Via Make&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make venv install          # create .venv + install deps&#xA;make serve                 # gunicorn on :4444&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UV (alternative)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv venv &amp;amp;&amp;amp; source .venv/bin/activate&#xA;uv pip install -e &#39;.[dev]&#39; # IMPORTANT: in zsh, quote to disable glob expansion!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pip (alternative)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m venv .venv &amp;amp;&amp;amp; source .venv/bin/activate&#xA;pip install -e &#34;.[dev]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional (PostgreSQL adapter)&lt;/h3&gt; &#xA;&lt;p&gt;You can configure the gateway with SQLite, PostgreSQL (or any other compatible database) in .env.&lt;/p&gt; &#xA;&lt;p&gt;When using PostgreSQL, you need to install &lt;code&gt;psycopg2&lt;/code&gt; driver.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv pip install psycopg2-binary   # dev convenience&#xA;# or&#xA;uv pip install psycopg2          # production build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Quick Postgres container&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name mcp-postgres \&#xA;  -e POSTGRES_USER=postgres \&#xA;  -e POSTGRES_PASSWORD=mysecretpassword \&#xA;  -e POSTGRES_DB=mcp \&#xA;  -p 5432:5432 -d postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;make compose-up&lt;/code&gt; target is provided along with a &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; file to make this process simpler.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Configuration (&lt;code&gt;.env&lt;/code&gt; or env vars)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è If any required &lt;code&gt;.env&lt;/code&gt; variable is missing or invalid, the gateway will fail fast at startup with a validation error via Pydantic.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can get started by copying the provided &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/.env.example&#34;&gt;.env.example&lt;/a&gt; to &lt;code&gt;.env&lt;/code&gt; and making the necessary edits to fit your environment.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üîß Environment Configuration Variables&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Basic&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;APP_NAME&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Gateway / OpenAPI title&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;MCP Gateway&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;HOST&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Bind address for the app&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;IPv4/IPv6&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Port the server listens on&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;4444&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;1-65535&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DATABASE_URL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;SQLAlchemy connection URL&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;sqlite:///./mcp.db&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;any SQLAlchemy dialect&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;APP_ROOT_PATH&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Subpath prefix for app (e.g. &lt;code&gt;/gateway&lt;/code&gt;)&lt;/td&gt; &#xA;    &lt;td&gt;(empty)&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;TEMPLATES_DIR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Path to Jinja2 templates&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;mcpgateway/templates&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;STATIC_DIR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Path to static files&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;mcpgateway/static&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;üí° Use &lt;code&gt;APP_ROOT_PATH=/foo&lt;/code&gt; if reverse-proxying under a subpath like &lt;code&gt;https://host.com/foo/&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Authentication&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BASIC_AUTH_USER&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Username for Admin UI login and HTTP Basic authentication&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BASIC_AUTH_PASSWORD&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Password for Admin UI login and HTTP Basic authentication&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;changeme&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;AUTH_REQUIRED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Require authentication for all API routes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;JWT_SECRET_KEY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Secret key used to &lt;strong&gt;sign JWT tokens&lt;/strong&gt; for API access&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;my-test-key&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;JWT_ALGORITHM&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Algorithm used to sign the JWTs (&lt;code&gt;HS256&lt;/code&gt; is default, HMAC-based)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;HS256&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PyJWT algs&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;TOKEN_EXPIRY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Expiry of generated JWTs in minutes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;10080&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;AUTH_ENCRYPTION_SECRET&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Passphrase used to derive AES key for encrypting tool auth headers&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;my-test-salt&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;üîê &lt;code&gt;BASIC_AUTH_USER&lt;/code&gt;/&lt;code&gt;PASSWORD&lt;/code&gt; are used for:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Logging into the web-based Admin UI&lt;/li&gt; &#xA;   &lt;li&gt;Accessing APIs via Basic Auth (&lt;code&gt;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;üîë &lt;code&gt;JWT_SECRET_KEY&lt;/code&gt; is used to:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Sign JSON Web Tokens (&lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Generate tokens via:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token --username admin --exp 0 --secret my-test-key)&#xA;echo $MCPGATEWAY_BEARER_TOKEN&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Tokens allow non-interactive API clients to authenticate securely.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;p&gt;üß™ Set &lt;code&gt;AUTH_REQUIRED=false&lt;/code&gt; during development if you want to disable all authentication (e.g. for local testing or open APIs) or clients that don&#39;t support SSE authentication. In production, you should use the SSE to stdio &lt;code&gt;mcpgateway-wrapper&lt;/code&gt; for such tools that don&#39;t support authenticated SSE, while still ensuring the gateway uses authentication.&lt;/p&gt; &#xA;  &lt;p&gt;üîê &lt;code&gt;AUTH_ENCRYPTION_SECRET&lt;/code&gt; is used to encrypt and decrypt tool authentication credentials (&lt;code&gt;auth_value&lt;/code&gt;). You must set the same value across environments to decode previously stored encrypted auth values. Recommended: use a long, random string.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;UI Features&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MCPGATEWAY_UI_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable the interactive Admin dashboard&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MCPGATEWAY_ADMIN_API_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable API endpoints for admin ops&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MCPGATEWAY_BULK_IMPORT_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable bulk import endpoint for tools&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;üñ•Ô∏è Set both UI and Admin API to &lt;code&gt;false&lt;/code&gt; to disable management UI and APIs in production. üì• The bulk import endpoint allows importing up to 200 tools in a single request via &lt;code&gt;/admin/tools/import&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Security&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;SKIP_SSL_VERIFY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Skip upstream TLS verification&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;ALLOWED_ORIGINS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;CORS allow-list&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;[&#34;http://localhost&#34;,&#34;http://localhost:4444&#34;]&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;JSON array&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;CORS_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable CORS&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DOCS_ALLOW_BASIC_AUTH&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Allow Basic Auth for docs (in addition to JWT)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Note: do not quote the ALLOWED_ORIGINS values, this needs to be valid JSON, such as: ALLOWED_ORIGINS=[&#34;http://localhost&#34;, &#34;http://localhost:4444&#34;]&lt;/p&gt; &#xA;  &lt;p&gt;Documentation endpoints (&lt;code&gt;/docs&lt;/code&gt;, &lt;code&gt;/redoc&lt;/code&gt;, &lt;code&gt;/openapi.json&lt;/code&gt;) are always protected by authentication. By default, they require Bearer token authentication. Setting &lt;code&gt;DOCS_ALLOW_BASIC_AUTH=true&lt;/code&gt; enables HTTP Basic Authentication as an additional method using the same credentials as &lt;code&gt;BASIC_AUTH_USER&lt;/code&gt; and &lt;code&gt;BASIC_AUTH_PASSWORD&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Logging&lt;/h3&gt; &#xA; &lt;p&gt;MCP Gateway provides flexible logging with &lt;strong&gt;stdout/stderr output by default&lt;/strong&gt; and &lt;strong&gt;optional file-based logging&lt;/strong&gt;. When file logging is enabled, it provides JSON formatting for structured logs and text formatting for console output.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_LEVEL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Minimum log level&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;INFO&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;DEBUG&lt;/code&gt;...&lt;code&gt;CRITICAL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_FORMAT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Console log format&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;json&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;json&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_TO_FILE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;Enable file logging&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_FILE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Log filename (when enabled)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;mcpgateway.log&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_FOLDER&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Directory for log files&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;logs&lt;/code&gt;, &lt;code&gt;/var/log/gateway&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_FILEMODE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;File write mode&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;a+&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;a+&lt;/code&gt; (append), &lt;code&gt;w&lt;/code&gt; (overwrite)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_ROTATION_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;Enable log file rotation&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_MAX_SIZE_MB&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max file size before rotation (MB)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Any positive integer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOG_BACKUP_COUNT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Number of backup files to keep&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Any non-negative integer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;Logging Behavior:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Default&lt;/strong&gt;: Logs only to &lt;strong&gt;stdout/stderr&lt;/strong&gt; with human-readable text format&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;File Logging&lt;/strong&gt;: When &lt;code&gt;LOG_TO_FILE=true&lt;/code&gt;, logs to &lt;strong&gt;both&lt;/strong&gt; file (JSON format) and console (text format)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Log Rotation&lt;/strong&gt;: When &lt;code&gt;LOG_ROTATION_ENABLED=true&lt;/code&gt;, files rotate at &lt;code&gt;LOG_MAX_SIZE_MB&lt;/code&gt; with &lt;code&gt;LOG_BACKUP_COUNT&lt;/code&gt; backup files (e.g., &lt;code&gt;.log.1&lt;/code&gt;, &lt;code&gt;.log.2&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Directory Creation&lt;/strong&gt;: Log folder is automatically created if it doesn&#39;t exist&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Centralized Service&lt;/strong&gt;: All modules use the unified &lt;code&gt;LoggingService&lt;/code&gt; for consistent formatting&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Example Configurations:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Default: stdout/stderr only (recommended for containers)&#xA;LOG_LEVEL=INFO&#xA;# No additional config needed - logs to stdout/stderr&#xA;&#xA;# Optional: Enable file logging (no rotation)&#xA;LOG_TO_FILE=true&#xA;LOG_FOLDER=/var/log/mcpgateway&#xA;LOG_FILE=gateway.log&#xA;LOG_FILEMODE=a+&#xA;&#xA;# Optional: Enable file logging with rotation&#xA;LOG_TO_FILE=true&#xA;LOG_ROTATION_ENABLED=true&#xA;LOG_MAX_SIZE_MB=10&#xA;LOG_BACKUP_COUNT=3&#xA;LOG_FOLDER=/var/log/mcpgateway&#xA;LOG_FILE=gateway.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Default Behavior:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Logs are written &lt;strong&gt;only to stdout/stderr&lt;/strong&gt; in human-readable text format&lt;/li&gt; &#xA;  &lt;li&gt;File logging is &lt;strong&gt;disabled by default&lt;/strong&gt; (no files created)&lt;/li&gt; &#xA;  &lt;li&gt;Set &lt;code&gt;LOG_TO_FILE=true&lt;/code&gt; to enable optional file logging with JSON format&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Observability (OpenTelemetry)&lt;/h3&gt; &#xA; &lt;p&gt;MCP Gateway includes &lt;strong&gt;vendor-agnostic OpenTelemetry support&lt;/strong&gt; for distributed tracing. Works with Phoenix, Jaeger, Zipkin, Tempo, DataDog, New Relic, and any OTLP-compatible backend.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_ENABLE_OBSERVABILITY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Master switch for observability&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_SERVICE_NAME&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Service identifier in traces&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;mcp-gateway&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_SERVICE_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Service version in traces&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;0.5.0&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_DEPLOYMENT_ENVIRONMENT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Environment tag (dev/staging/prod)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;development&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_TRACES_EXPORTER&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Trace exporter backend&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;otlp&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;otlp&lt;/code&gt;, &lt;code&gt;jaeger&lt;/code&gt;, &lt;code&gt;zipkin&lt;/code&gt;, &lt;code&gt;console&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_RESOURCE_ATTRIBUTES&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Custom resource attributes&lt;/td&gt; &#xA;    &lt;td&gt;(empty)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;key=value,key2=value2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;OTLP Configuration&lt;/strong&gt; (for Phoenix, Tempo, DataDog, etc.):&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_ENDPOINT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;OTLP collector endpoint&lt;/td&gt; &#xA;    &lt;td&gt;(none)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;http://localhost:4317&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_PROTOCOL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;OTLP protocol&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;grpc&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;grpc&lt;/code&gt;, &lt;code&gt;http/protobuf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_HEADERS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Authentication headers&lt;/td&gt; &#xA;    &lt;td&gt;(empty)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;api-key=secret,x-auth=token&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_INSECURE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Skip TLS verification&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;Alternative Backends&lt;/strong&gt; (optional):&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_EXPORTER_JAEGER_ENDPOINT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Jaeger collector endpoint&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;http://localhost:14268/api/traces&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;URL&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_EXPORTER_ZIPKIN_ENDPOINT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Zipkin collector endpoint&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;http://localhost:9411/api/v2/spans&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;URL&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;Performance Tuning&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_TRACES_SAMPLER&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Sampling strategy&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;parentbased_traceidratio&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;always_on&lt;/code&gt;, &lt;code&gt;always_off&lt;/code&gt;, &lt;code&gt;traceidratio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_TRACES_SAMPLER_ARG&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Sample rate (0.0-1.0)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;0.1&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;float (0.1 = 10% sampling)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_BSP_MAX_QUEUE_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max queued spans&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;2048&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_BSP_MAX_EXPORT_BATCH_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max batch size for export&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;512&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;OTEL_BSP_SCHEDULE_DELAY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Export interval (ms)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;5000&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;strong&gt;Quick Start with Phoenix&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start Phoenix for LLM observability&#xA;docker run -p 6006:6006 -p 4317:4317 arizephoenix/phoenix:latest&#xA;&#xA;# Configure gateway&#xA;export OTEL_ENABLE_OBSERVABILITY=true&#xA;export OTEL_TRACES_EXPORTER=otlp&#xA;export OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317&#xA;&#xA;# Run gateway - traces automatically sent to Phoenix&#xA;mcpgateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;üîç &lt;strong&gt;What Gets Traced&lt;/strong&gt;: Tool invocations, prompt rendering, resource fetching, gateway federation, health checks, plugin execution (if enabled)&lt;/p&gt; &#xA;  &lt;p&gt;üöÄ &lt;strong&gt;Zero Overhead&lt;/strong&gt;: When &lt;code&gt;OTEL_ENABLE_OBSERVABILITY=false&lt;/code&gt;, all tracing is disabled with no performance impact&lt;/p&gt; &#xA;  &lt;p&gt;üìä &lt;strong&gt;View Traces&lt;/strong&gt;: Phoenix UI at &lt;code&gt;http://localhost:6006&lt;/code&gt;, Jaeger at &lt;code&gt;http://localhost:16686&lt;/code&gt;, or your configured backend&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Transport&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;TRANSPORT_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enabled transports&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;http&lt;/code&gt;,&lt;code&gt;ws&lt;/code&gt;,&lt;code&gt;sse&lt;/code&gt;,&lt;code&gt;stdio&lt;/code&gt;,&lt;code&gt;all&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;WEBSOCKET_PING_INTERVAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;WebSocket ping (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;30&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;SSE_RETRY_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;SSE retry timeout (ms)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;5000&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;SSE_KEEPALIVE_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable SSE keepalive events&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;SSE_KEEPALIVE_INTERVAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;SSE keepalive interval (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;30&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;USE_STATEFUL_SESSIONS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;streamable http config&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;JSON_RESPONSE_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;json/sse streams (streamable http)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;üí° SSE Keepalive Events&lt;/strong&gt;: The gateway sends periodic keepalive events to prevent connection timeouts with proxies and load balancers. Disable with &lt;code&gt;SSE_KEEPALIVE_ENABLED=false&lt;/code&gt; if your client doesn&#39;t handle unknown event types. Common intervals: 30s (default), 60s (AWS ALB), 240s (Azure).&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Federation&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;FEDERATION_ENABLED&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable federation&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;FEDERATION_DISCOVERY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Auto-discover peers&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;FEDERATION_PEERS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Comma-sep peer URLs&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;JSON array&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;FEDERATION_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Gateway timeout (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;30&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;FEDERATION_SYNC_INTERVAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Sync interval (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;300&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Resources&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;RESOURCE_CACHE_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;LRU cache size&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;RESOURCE_CACHE_TTL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Cache TTL (seconds)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;3600&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MAX_RESOURCE_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max resource bytes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;10485760&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;ALLOWED_MIME_TYPES&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Acceptable MIME types&lt;/td&gt; &#xA;    &lt;td&gt;see code&lt;/td&gt; &#xA;    &lt;td&gt;JSON array&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Tools&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;TOOL_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Tool invocation timeout (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;60&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MAX_TOOL_RETRIES&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max retry attempts&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int ‚â• 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;TOOL_RATE_LIMIT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Tool calls per minute&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;TOOL_CONCURRENT_LIMIT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Concurrent tool invocations&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Prompts&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;PROMPT_CACHE_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Cached prompt templates&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;MAX_PROMPT_SIZE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max prompt template size (bytes)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;102400&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;PROMPT_RENDER_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Jinja render timeout (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Health Checks&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;HEALTH_CHECK_INTERVAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Health poll interval (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;60&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;HEALTH_CHECK_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Health request timeout (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;UNHEALTHY_THRESHOLD&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Fail-count before peer deactivation,&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Set to -1 if deactivation is not needed.&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Database&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DB_POOL_SIZE&lt;/code&gt; .&lt;/td&gt; &#xA;    &lt;td&gt;SQLAlchemy connection pool size&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;200&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DB_MAX_OVERFLOW&lt;/code&gt;.&lt;/td&gt; &#xA;    &lt;td&gt;Extra connections beyond pool&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int ‚â• 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DB_POOL_TIMEOUT&lt;/code&gt;.&lt;/td&gt; &#xA;    &lt;td&gt;Wait for connection (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;30&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DB_POOL_RECYCLE&lt;/code&gt;.&lt;/td&gt; &#xA;    &lt;td&gt;Recycle connections (secs)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;3600&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DB_MAX_RETRIES&lt;/code&gt; .&lt;/td&gt; &#xA;    &lt;td&gt;Max Retry Attempts&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DB_RETRY_INTERVAL_MS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Retry Interval (ms)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;2000&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Cache Backend&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;CACHE_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Backend (&lt;code&gt;memory&lt;/code&gt;/&lt;code&gt;redis&lt;/code&gt;)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;memory&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;none&lt;/code&gt;, &lt;code&gt;memory&lt;/code&gt;,&lt;code&gt;redis&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;REDIS_URL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Redis connection URL&lt;/td&gt; &#xA;    &lt;td&gt;(none)&lt;/td&gt; &#xA;    &lt;td&gt;string or empty&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;CACHE_PREFIX&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Key prefix&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;mcpgw:&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;REDIS_MAX_RETRIES&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max Retry Attempts&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;3&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;REDIS_RETRY_INTERVAL_MS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Retry Interval (ms)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;2000&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;int &amp;gt; 0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;üß† &lt;code&gt;none&lt;/code&gt; disables caching entirely. Use &lt;code&gt;memory&lt;/code&gt; for dev, &lt;code&gt;database&lt;/code&gt; for persistence, or &lt;code&gt;redis&lt;/code&gt; for distributed caching.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;h3&gt;Database Management&lt;/h3&gt; &#xA; &lt;p&gt;MCP Gateway uses Alembic for database migrations. Common commands:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;make db-current&lt;/code&gt; - Show current database version&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;make db-upgrade&lt;/code&gt; - Apply pending migrations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;make db-migrate&lt;/code&gt; - Create new migration&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;make db-history&lt;/code&gt; - Show migration history&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;make db-status&lt;/code&gt; - Detailed migration status&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h4&gt;Troubleshooting&lt;/h4&gt; &#xA; &lt;p&gt;&lt;strong&gt;Common Issues:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;&#34;No &#39;script_location&#39; key found&#34;&lt;/strong&gt;: Ensure you&#39;re running from the project root directory.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;&#34;Unknown SSE event: keepalive&#34; warnings&lt;/strong&gt;: Some MCP clients don&#39;t recognize keepalive events. These warnings are harmless and don&#39;t affect functionality. To disable: &lt;code&gt;SSE_KEEPALIVE_ENABLED=false&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connection timeouts with proxies/load balancers&lt;/strong&gt;: If experiencing timeouts, adjust keepalive interval to match your infrastructure: &lt;code&gt;SSE_KEEPALIVE_INTERVAL=60&lt;/code&gt; (AWS ALB) or &lt;code&gt;240&lt;/code&gt; (Azure).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Development&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Setting&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DEV_MODE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Enable dev mode&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;RELOAD&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Auto-reload on changes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Debug logging&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;h3&gt;Makefile&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; make serve               # Run production Gunicorn server on&#xA; make serve-ssl           # Run Gunicorn behind HTTPS on :4444 (uses ./certs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Script helper&lt;/h3&gt; &#xA;&lt;p&gt;To run the development (uvicorn) server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make dev&#xA;# or&#xA;./run.sh --reload --log debug --workers 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;run.sh&lt;/code&gt; is a wrapper around &lt;code&gt;uvicorn&lt;/code&gt; that loads &lt;code&gt;.env&lt;/code&gt;, supports reload, and passes arguments to the server.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Key flags:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-e, --env FILE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;load env-file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--env prod.env&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-H, --host&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bind address&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--host 127.0.0.1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-p, --port&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;listen port&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--port 8080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-w, --workers&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;gunicorn workers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--workers 4&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-r, --reload&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;auto-reload&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;--reload&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Manual (Uvicorn)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uvicorn mcpgateway.main:app --host 0.0.0.0 --port 4444 --workers 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Authentication examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generate a JWT token using JWT_SECRET_KEY and export it as MCPGATEWAY_BEARER_TOKEN&#xA;# Note that the module needs to be installed. If running locally use:&#xA;export MCPGATEWAY_BEARER_TOKEN=$(JWT_SECRET_KEY=my-test-key python3 -m mcpgateway.utils.create_jwt_token)&#xA;&#xA;# Use the JWT token in an API call&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;‚òÅÔ∏è AWS / Azure / OpenShift&lt;/h2&gt; &#xA;&lt;p&gt;Deployment details can be found in the GitHub Pages.&lt;/p&gt; &#xA;&lt;h2&gt;‚òÅÔ∏è IBM Cloud Code Engine Deployment&lt;/h2&gt; &#xA;&lt;p&gt;This project supports deployment to &lt;a href=&#34;https://cloud.ibm.com/codeengine&#34;&gt;IBM Cloud Code Engine&lt;/a&gt; using the &lt;strong&gt;ibmcloud&lt;/strong&gt; CLI and the IBM Container Registry.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;‚òÅÔ∏è IBM Cloud Code Engine Deployment&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;üîß Prerequisites&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Podman &lt;strong&gt;or&lt;/strong&gt; Docker installed locally&lt;/li&gt; &#xA;  &lt;li&gt;IBM Cloud CLI (use &lt;code&gt;make ibmcloud-cli-install&lt;/code&gt; to install)&lt;/li&gt; &#xA;  &lt;li&gt;An &lt;a href=&#34;https://cloud.ibm.com/iam/apikeys&#34;&gt;IBM Cloud API key&lt;/a&gt; with access to Code Engine &amp;amp; Container Registry&lt;/li&gt; &#xA;  &lt;li&gt;Code Engine and Container Registry services &lt;strong&gt;enabled&lt;/strong&gt; in your IBM Cloud account&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;hr /&gt; &#xA; &lt;h3&gt;üì¶ Environment Variables&lt;/h3&gt; &#xA; &lt;p&gt;Create a &lt;strong&gt;&lt;code&gt;.env&lt;/code&gt;&lt;/strong&gt; file (or export the variables in your shell). The first block is &lt;strong&gt;required&lt;/strong&gt;; the second provides &lt;strong&gt;tunable defaults&lt;/strong&gt; you can override:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ‚îÄ‚îÄ Required ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;IBMCLOUD_REGION=us-south&#xA;IBMCLOUD_RESOURCE_GROUP=default&#xA;IBMCLOUD_PROJECT=my-codeengine-project&#xA;IBMCLOUD_CODE_ENGINE_APP=mcpgateway&#xA;IBMCLOUD_IMAGE_NAME=us.icr.io/myspace/mcpgateway:latest&#xA;IBMCLOUD_IMG_PROD=mcpgateway/mcpgateway&#xA;IBMCLOUD_API_KEY=your_api_key_here   # Optional - omit to use interactive `ibmcloud login --sso`&#xA;&#xA;# ‚îÄ‚îÄ Optional overrides (sensible defaults provided) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;IBMCLOUD_CPU=1                       # vCPUs for the app&#xA;IBMCLOUD_MEMORY=4G                   # Memory allocation&#xA;IBMCLOUD_REGISTRY_SECRET=my-regcred  # Name of the Container Registry secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;‚úÖ &lt;strong&gt;Quick check:&lt;/strong&gt; &lt;code&gt;make ibmcloud-check-env&lt;/code&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;hr /&gt; &#xA; &lt;h3&gt;üöÄ Make Targets&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Target&lt;/th&gt; &#xA;    &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-cli-install&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Install IBM Cloud CLI and required plugins&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-login&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Log in to IBM Cloud (API key or SSO)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-ce-login&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Select the Code Engine project &amp;amp; region&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-tag&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Tag the local container image&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-push&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Push the image to IBM Container Registry&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-deploy&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;strong&gt;Create or update&lt;/strong&gt; the Code Engine application (uses CPU/memory/secret)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-ce-status&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show current deployment status&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-ce-logs&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Stream logs from the running app&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;make ibmcloud-ce-rm&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Delete the Code Engine application&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;hr /&gt; &#xA; &lt;h3&gt;üìù Example Workflow&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make ibmcloud-check-env&#xA;make ibmcloud-cli-install&#xA;make ibmcloud-login&#xA;make ibmcloud-ce-login&#xA;make ibmcloud-tag&#xA;make ibmcloud-push&#xA;make ibmcloud-deploy&#xA;make ibmcloud-ce-status&#xA;make ibmcloud-ce-logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;API Endpoints&lt;/h2&gt; &#xA;&lt;p&gt;You can test the API endpoints through curl, or Swagger UI, and check detailed documentation on ReDoc:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swagger UI&lt;/strong&gt; ‚Üí &lt;a href=&#34;http://localhost:4444/docs&#34;&gt;http://localhost:4444/docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ReDoc&lt;/strong&gt; ‚Üí &lt;a href=&#34;http://localhost:4444/redoc&#34;&gt;http://localhost:4444/redoc&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Generate an API Bearer token, and test the various API endpoints.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üîê Authentication &amp;amp; Health Checks&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generate a bearer token using the configured secret key (use the same as your .env)&#xA;export MCPGATEWAY_BEARER_TOKEN=$(python3 -m mcpgateway.utils.create_jwt_token -u admin --secret my-test-key)&#xA;echo ${MCPGATEWAY_BEARER_TOKEN}&#xA;&#xA;# Quickly confirm that authentication works and the gateway is healthy&#xA;curl -s -k -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; https://localhost:4444/health&#xA;# {&#34;status&#34;:&#34;healthy&#34;}&#xA;&#xA;# Quickly confirm the gateway version &amp;amp; DB connectivity&#xA;curl -s -k -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; https://localhost:4444/version | jq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üß± Protocol APIs (MCP) /protocol&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Initialize MCP session&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#xA;           &#34;protocol_version&#34;:&#34;2025-03-26&#34;,&#xA;           &#34;capabilities&#34;:{},&#xA;           &#34;client_info&#34;:{&#34;name&#34;:&#34;MyClient&#34;,&#34;version&#34;:&#34;1.0.0&#34;}&#xA;         }&#39; \&#xA;     http://localhost:4444/protocol/initialize&#xA;&#xA;# Ping (JSON-RPC style)&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:1,&#34;method&#34;:&#34;ping&#34;}&#39; \&#xA;     http://localhost:4444/protocol/ping&#xA;&#xA;# Completion for prompt/resource arguments (not implemented)&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#xA;           &#34;ref&#34;:{&#34;type&#34;:&#34;ref/prompt&#34;,&#34;name&#34;:&#34;example_prompt&#34;},&#xA;           &#34;argument&#34;:{&#34;name&#34;:&#34;topic&#34;,&#34;value&#34;:&#34;py&#34;}&#xA;         }&#39; \&#xA;     http://localhost:4444/protocol/completion/complete&#xA;&#xA;# Sampling (streaming) (not implemented)&#xA;curl -N -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#xA;           &#34;messages&#34;:[{&#34;role&#34;:&#34;user&#34;,&#34;content&#34;:{&#34;type&#34;:&#34;text&#34;,&#34;text&#34;:&#34;Hello&#34;}}],&#xA;           &#34;maxTokens&#34;:16&#xA;         }&#39; \&#xA;     http://localhost:4444/protocol/sampling/createMessage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üß† JSON-RPC Utility /rpc&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generic JSON-RPC calls (tools, gateways, roots, etc.)&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:1,&#34;method&#34;:&#34;list_tools&#34;}&#39; \&#xA;     http://localhost:4444/rpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Handles any method name: &lt;code&gt;list_tools&lt;/code&gt;, &lt;code&gt;list_gateways&lt;/code&gt;, &lt;code&gt;prompts/get&lt;/code&gt;, or invokes a tool if method matches a registered tool name .&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üîß Tool Management /tools&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Register a new tool&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#xA;           &#34;name&#34;:&#34;clock_tool&#34;,&#xA;           &#34;url&#34;:&#34;http://localhost:9000/rpc&#34;,&#xA;           &#34;description&#34;:&#34;Returns current time&#34;,&#xA;           &#34;input_schema&#34;:{&#xA;             &#34;type&#34;:&#34;object&#34;,&#xA;             &#34;properties&#34;:{&#34;timezone&#34;:{&#34;type&#34;:&#34;string&#34;}},&#xA;             &#34;required&#34;:[]&#xA;           }&#xA;         }&#39; \&#xA;     http://localhost:4444/tools&#xA;&#xA;# List tools&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/tools&#xA;&#xA;# Get tool by ID&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/tools/1&#xA;&#xA;# Update tool&#xA;curl -X PUT -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{ &#34;description&#34;:&#34;Updated desc&#34; }&#39; \&#xA;     http://localhost:4444/tools/1&#xA;&#xA;# Toggle active status&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/tools/1/toggle?activate=false&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/tools/1/toggle?activate=true&#xA;&#xA;# Delete tool&#xA;curl -X DELETE -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/tools/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üåê Gateway Management /gateways&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Register an MCP server as a new gateway provider&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;name&#34;:&#34;peer_gateway&#34;,&#34;url&#34;:&#34;http://peer:4444&#34;}&#39; \&#xA;     http://localhost:4444/gateways&#xA;&#xA;# List gateways&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/gateways&#xA;&#xA;# Get gateway by ID&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/gateways/1&#xA;&#xA;# Update gateway&#xA;curl -X PUT -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;description&#34;:&#34;New description&#34;}&#39; \&#xA;     http://localhost:4444/gateways/1&#xA;&#xA;# Toggle active status&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/gateways/1/toggle?activate=false&#xA;&#xA;# Delete gateway&#xA;curl -X DELETE -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/gateways/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üìÅ Resource Management /resources&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Register resource&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#xA;           &#34;uri&#34;:&#34;config://app/settings&#34;,&#xA;           &#34;name&#34;:&#34;App Settings&#34;,&#xA;           &#34;content&#34;:&#34;key=value&#34;&#xA;         }&#39; \&#xA;     http://localhost:4444/resources&#xA;&#xA;# List resources&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/resources&#xA;&#xA;# Read a resource&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/resources/config://app/settings&#xA;&#xA;# Update resource&#xA;curl -X PUT -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;content&#34;:&#34;new=value&#34;}&#39; \&#xA;     http://localhost:4444/resources/config://app/settings&#xA;&#xA;# Delete resource&#xA;curl -X DELETE -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/resources/config://app/settings&#xA;&#xA;# Subscribe to updates (SSE)&#xA;curl -N -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/resources/subscribe/config://app/settings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üìù Prompt Management /prompts&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create prompt template&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#xA;           &#34;name&#34;:&#34;greet&#34;,&#xA;           &#34;template&#34;:&#34;Hello, {{ user }}!&#34;,&#xA;           &#34;argument_schema&#34;:{&#xA;             &#34;type&#34;:&#34;object&#34;,&#xA;             &#34;properties&#34;:{&#34;user&#34;:{&#34;type&#34;:&#34;string&#34;}},&#xA;             &#34;required&#34;:[&#34;user&#34;]&#xA;           }&#xA;         }&#39; \&#xA;     http://localhost:4444/prompts&#xA;&#xA;# List prompts&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/prompts&#xA;&#xA;# Get prompt (with args)&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;user&#34;:&#34;Alice&#34;}&#39; \&#xA;     http://localhost:4444/prompts/greet&#xA;&#xA;# Get prompt (no args)&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/prompts/greet&#xA;&#xA;# Update prompt&#xA;curl -X PUT -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;template&#34;:&#34;Hi, {{ user }}!&#34;}&#39; \&#xA;     http://localhost:4444/prompts/greet&#xA;&#xA;# Toggle active&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/prompts/5/toggle?activate=false&#xA;&#xA;# Delete prompt&#xA;curl -X DELETE -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/prompts/greet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üå≤ Root Management /roots&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List roots&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/roots&#xA;&#xA;# Add root&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;uri&#34;:&#34;/data&#34;,&#34;name&#34;:&#34;Data Root&#34;}&#39; \&#xA;     http://localhost:4444/roots&#xA;&#xA;# Remove root&#xA;curl -X DELETE -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/roots/%2Fdata&#xA;&#xA;# Subscribe to root changes (SSE)&#xA;curl -N -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/roots/changes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üñ•Ô∏è Server Management /servers&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List servers&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/servers&#xA;&#xA;# Get server&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/servers/UUID_OF_SERVER_1&#xA;&#xA;# Create server&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;name&#34;:&#34;db&#34;,&#34;description&#34;:&#34;Database&#34;,&#34;associatedTools&#34;: [&#34;1&#34;,&#34;2&#34;,&#34;3&#34;]}&#39; \&#xA;     http://localhost:4444/servers&#xA;&#xA;# Update server&#xA;curl -X PUT -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;description&#34;:&#34;Updated&#34;}&#39; \&#xA;     http://localhost:4444/servers/UUID_OF_SERVER_1&#xA;&#xA;# Toggle active&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; \&#xA;     http://localhost:4444/servers/UUID_OF_SERVER_1/toggle?activate=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üìä Metrics /metrics&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get aggregated metrics&#xA;curl -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/metrics&#xA;&#xA;# Reset metrics (all or per-entity)&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/metrics/reset&#xA;curl -X POST -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/metrics/reset?entity=tool&amp;amp;id=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üì° Events &amp;amp; Health&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# SSE: all events&#xA;curl -N -H &#34;Authorization: Bearer $MCPGATEWAY_BEARER_TOKEN&#34; http://localhost:4444/events&#xA;&#xA;# WebSocket&#xA;wscat -c ws://localhost:4444/ws \&#xA;      -H &#34;Authorization: Basic $(echo -n admin:changeme|base64)&#34;&#xA;&#xA;# Health check&#xA;curl http://localhost:4444/health&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Full Swagger UI at &lt;code&gt;/docs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üõ†Ô∏è Sample Tool&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uvicorn sample_tool.clock_tool:app --host 0.0.0.0 --port 9000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; \&#xA;     -d &#39;{&#34;jsonrpc&#34;:&#34;2.0&#34;,&#34;id&#34;:1,&#34;method&#34;:&#34;get_time&#34;,&#34;params&#34;:{&#34;timezone&#34;:&#34;UTC&#34;}}&#39; \&#xA;     http://localhost:9000/rpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test            # Run unit tests&#xA;make lint            # Run lint tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Doctest Coverage&lt;/h2&gt; &#xA;&lt;p&gt;MCP Context Forge implements comprehensive doctest coverage to ensure all code examples in documentation are tested and verified:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make doctest         # Run all doctests&#xA;make doctest-verbose # Run with detailed output&#xA;make doctest-coverage # Generate coverage report&#xA;make doctest-check   # Check coverage percentage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Coverage Status:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ &lt;strong&gt;Transport Modules&lt;/strong&gt;: 100% (base, stdio, SSE, WebSocket, streamable HTTP)&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ &lt;strong&gt;Utility Functions&lt;/strong&gt;: 100% (slug generation, JWT tokens, validation)&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ &lt;strong&gt;Configuration&lt;/strong&gt;: 100% (settings, environment variables)&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Service Classes&lt;/strong&gt;: ~60% (in progress)&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Complex Classes&lt;/strong&gt;: ~40% (in progress)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Benefits:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All documented examples are automatically tested&lt;/li&gt; &#xA; &lt;li&gt;Documentation stays accurate and up-to-date&lt;/li&gt; &#xA; &lt;li&gt;Developers can run examples directly from docstrings&lt;/li&gt; &#xA; &lt;li&gt;Regression prevention through automated verification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For detailed information, see the &lt;a href=&#34;https://ibm.github.io/mcp-context-forge/development/doctest-coverage/&#34;&gt;Doctest Coverage Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üìÅ Directory and file structure for mcpgateway&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CI / Quality &amp;amp; Meta-files ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ .bumpversion.cfg                # Automated semantic-version bumps&#xA;‚îú‚îÄ‚îÄ .coveragerc                     # Coverage.py settings&#xA;‚îú‚îÄ‚îÄ .darglint                       # Doc-string linter rules&#xA;‚îú‚îÄ‚îÄ .dockerignore                   # Context exclusions for image builds&#xA;‚îú‚îÄ‚îÄ .editorconfig                   # Consistent IDE / editor behaviour&#xA;‚îú‚îÄ‚îÄ .env                            # Local runtime variables (git-ignored)&#xA;‚îú‚îÄ‚îÄ .env.ce                         # IBM Code Engine runtime env (ignored)&#xA;‚îú‚îÄ‚îÄ .env.ce.example                 # Sample env for IBM Code Engine&#xA;‚îú‚îÄ‚îÄ .env.example                    # Generic sample env file&#xA;‚îú‚îÄ‚îÄ .env.gcr                        # Google Cloud Run runtime env (ignored)&#xA;‚îú‚îÄ‚îÄ .eslintrc.json                  # ESLint rules for JS / TS assets&#xA;‚îú‚îÄ‚îÄ .flake8                         # Flake-8 configuration&#xA;‚îú‚îÄ‚îÄ .gitattributes                  # Git attributes (e.g. EOL normalisation)&#xA;‚îú‚îÄ‚îÄ .github                         # GitHub settings, CI/CD workflows &amp;amp; templates&#xA;‚îÇ   ‚îú‚îÄ‚îÄ CODEOWNERS                  # Default reviewers&#xA;‚îÇ   ‚îî‚îÄ‚îÄ workflows/                  # Bandit, Docker, CodeQL, Python Package, Container Deployment, etc.&#xA;‚îú‚îÄ‚îÄ .gitignore                      # Git exclusion rules&#xA;‚îú‚îÄ‚îÄ .hadolint.yaml                  # Hadolint rules for Dockerfiles&#xA;‚îú‚îÄ‚îÄ .htmlhintrc                     # HTMLHint rules&#xA;‚îú‚îÄ‚îÄ .markdownlint.json              # Markdown-lint rules&#xA;‚îú‚îÄ‚îÄ .pre-commit-config.yaml         # Pre-commit hooks (ruff, black, mypy, ...)&#xA;‚îú‚îÄ‚îÄ .pycodestyle                    # PEP-8 checker settings&#xA;‚îú‚îÄ‚îÄ .pylintrc                       # Pylint configuration&#xA;‚îú‚îÄ‚îÄ .pyspelling.yml                 # Spell-checker dictionary &amp;amp; filters&#xA;‚îú‚îÄ‚îÄ .ruff.toml                      # Ruff linter / formatter settings&#xA;‚îú‚îÄ‚îÄ .spellcheck-en.txt              # Extra dictionary entries&#xA;‚îú‚îÄ‚îÄ .stylelintrc.json               # Stylelint rules for CSS&#xA;‚îú‚îÄ‚îÄ .travis.yml                     # Legacy Travis CI config (reference)&#xA;‚îú‚îÄ‚îÄ .whitesource                    # WhiteSource security-scanning config&#xA;‚îú‚îÄ‚îÄ .yamllint                       # yamllint ruleset&#xA;&#xA;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Documentation &amp;amp; Guidance ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ CHANGELOG.md                    # Version-by-version change log&#xA;‚îú‚îÄ‚îÄ CODE_OF_CONDUCT.md              # Community behaviour guidelines&#xA;‚îú‚îÄ‚îÄ CONTRIBUTING.md                 # How to file issues &amp;amp; send PRs&#xA;‚îú‚îÄ‚îÄ DEVELOPING.md                   # Contributor workflows &amp;amp; style guide&#xA;‚îú‚îÄ‚îÄ LICENSE                         # Apache License 2.0&#xA;‚îú‚îÄ‚îÄ README.md                       # Project overview &amp;amp; quick-start&#xA;‚îú‚îÄ‚îÄ SECURITY.md                     # Security policy &amp;amp; CVE disclosure process&#xA;‚îú‚îÄ‚îÄ TESTING.md                      # Testing strategy, fixtures &amp;amp; guidelines&#xA;&#xA;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Containerisation &amp;amp; Runtime ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ Containerfile                   # OCI image build (Docker / Podman)&#xA;‚îú‚îÄ‚îÄ Containerfile.lite              # FROM scratch UBI-Micro production build&#xA;‚îú‚îÄ‚îÄ docker-compose.yml              # Local multi-service stack&#xA;‚îú‚îÄ‚îÄ podman-compose-sonarqube.yaml   # One-liner SonarQube stack&#xA;‚îú‚îÄ‚îÄ run-gunicorn.sh                 # Opinionated Gunicorn startup script&#xA;‚îú‚îÄ‚îÄ run.sh                          # Uvicorn shortcut with arg parsing&#xA;&#xA;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Build / Packaging / Tooling ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ MANIFEST.in                     # sdist inclusion rules&#xA;‚îú‚îÄ‚îÄ Makefile                        # Dev &amp;amp; deployment targets&#xA;‚îú‚îÄ‚îÄ package-lock.json               # Deterministic npm lock-file&#xA;‚îú‚îÄ‚îÄ package.json                    # Front-end / docs tooling deps&#xA;‚îú‚îÄ‚îÄ pyproject.toml                  # Poetry / PDM config &amp;amp; lint rules&#xA;‚îú‚îÄ‚îÄ sonar-code.properties           # SonarQube analysis settings&#xA;‚îú‚îÄ‚îÄ uv.lock                         # UV resolver lock-file&#xA;&#xA;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Kubernetes &amp;amp; Helm Assets ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ charts                          # Helm chart(s) for K8s / OpenShift&#xA;‚îÇ   ‚îú‚îÄ‚îÄ mcp-stack                   # Umbrella chart&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Chart.yaml              # Chart metadata&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ templates/...             # Manifest templates&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ values.yaml             # Default values&#xA;‚îÇ   ‚îî‚îÄ‚îÄ README.md                   # Install / upgrade guide&#xA;‚îú‚îÄ‚îÄ k8s                             # Raw (non-Helm) K8s manifests&#xA;‚îÇ   ‚îî‚îÄ‚îÄ *.yaml                      # Deployment, Service, PVC resources&#xA;&#xA;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Documentation Source ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ docs                            # MkDocs site source&#xA;‚îÇ   ‚îú‚îÄ‚îÄ base.yml                    # MkDocs &#34;base&#34; configuration snippet (do not modify)&#xA;‚îÇ   ‚îú‚îÄ‚îÄ mkdocs.yml                  # Site configuration (requires base.yml)&#xA;‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt            # Python dependencies for the MkDocs site&#xA;‚îÇ   ‚îú‚îÄ‚îÄ Makefile                    # Make targets for building/serving the docs&#xA;‚îÇ   ‚îî‚îÄ‚îÄ theme                       # Custom MkDocs theme assets&#xA;‚îÇ       ‚îî‚îÄ‚îÄ logo.png                # Logo for the documentation theme&#xA;‚îÇ   ‚îî‚îÄ‚îÄ docs                        # Markdown documentation&#xA;‚îÇ       ‚îú‚îÄ‚îÄ architecture/           # ADRs for the project&#xA;‚îÇ       ‚îú‚îÄ‚îÄ articles/               # Long-form writeups&#xA;‚îÇ       ‚îú‚îÄ‚îÄ blog/                   # Blog posts&#xA;‚îÇ       ‚îú‚îÄ‚îÄ deployment/             # Deployment guides (AWS, Azure, etc.)&#xA;‚îÇ       ‚îú‚îÄ‚îÄ development/            # Development workflows &amp;amp; CI docs&#xA;‚îÇ       ‚îú‚îÄ‚îÄ images/                 # Diagrams &amp;amp; screenshots&#xA;‚îÇ       ‚îú‚îÄ‚îÄ index.md                # Top-level docs landing page&#xA;‚îÇ       ‚îú‚îÄ‚îÄ manage/                 # Management topics (backup, logging, tuning, upgrade)&#xA;‚îÇ       ‚îú‚îÄ‚îÄ overview/               # Feature overviews &amp;amp; UI documentation&#xA;‚îÇ       ‚îú‚îÄ‚îÄ security/               # Security guidance &amp;amp; policies&#xA;‚îÇ       ‚îú‚îÄ‚îÄ testing/                # Testing strategy &amp;amp; fixtures&#xA;‚îÇ       ‚îî‚îÄ‚îÄ using/                  # User-facing usage guides (agents, clients, etc.)&#xA;‚îÇ       ‚îú‚îÄ‚îÄ media/                  # Social media, press coverage, videos &amp;amp; testimonials&#xA;‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ press/              # Press articles and blog posts&#xA;‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ social/             # Tweets, LinkedIn posts, YouTube embeds&#xA;‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ testimonials/       # Customer quotes &amp;amp; community feedback&#xA;‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ kit/                # Media kit &amp;amp; logos for bloggers &amp;amp; press&#xA;‚îú‚îÄ‚îÄ dictionary.dic                  # Custom dictionary for spell-checker (make spellcheck)&#xA;&#xA;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Application &amp;amp; Libraries ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ agent_runtimes                  # Configurable agentic frameworks converted to MCP Servers&#xA;‚îú‚îÄ‚îÄ mcpgateway                      # ‚Üê main application package&#xA;‚îÇ   ‚îú‚îÄ‚îÄ __init__.py                 # Package metadata &amp;amp; version constant&#xA;‚îÇ   ‚îú‚îÄ‚îÄ admin.py                    # FastAPI routers for Admin UI&#xA;‚îÇ   ‚îú‚îÄ‚îÄ cache&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ resource_cache.py       # LRU+TTL cache implementation&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ session_registry.py     # Session ‚Üî cache mapping&#xA;‚îÇ   ‚îú‚îÄ‚îÄ config.py                   # Pydantic settings loader&#xA;‚îÇ   ‚îú‚îÄ‚îÄ db.py                       # SQLAlchemy models &amp;amp; engine setup&#xA;‚îÇ   ‚îú‚îÄ‚îÄ federation&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ discovery.py            # Peer-gateway discovery&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ forward.py              # RPC forwarding&#xA;‚îÇ   ‚îú‚îÄ‚îÄ handlers&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sampling.py             # Streaming sampling handler&#xA;‚îÇ   ‚îú‚îÄ‚îÄ main.py                     # FastAPI app factory &amp;amp; startup events&#xA;‚îÇ   ‚îú‚îÄ‚îÄ mcp.db                      # SQLite fixture for tests&#xA;‚îÇ   ‚îú‚îÄ‚îÄ py.typed                    # PEP 561 marker (ships type hints)&#xA;‚îÇ   ‚îú‚îÄ‚îÄ schemas.py                  # Shared Pydantic DTOs&#xA;‚îÇ   ‚îú‚îÄ‚îÄ services&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ completion_service.py   # Prompt / argument completion&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ gateway_service.py      # Peer-gateway registry&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logging_service.py      # Central logging helpers&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ prompt_service.py       # Prompt CRUD &amp;amp; rendering&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ resource_service.py     # Resource registration &amp;amp; retrieval&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ root_service.py         # File-system root registry&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ server_service.py       # Server registry &amp;amp; monitoring&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tool_service.py         # Tool registry &amp;amp; invocation&#xA;‚îÇ   ‚îú‚îÄ‚îÄ static&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin.css               # Styles for Admin UI&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ admin.js                # Behaviour for Admin UI&#xA;‚îÇ   ‚îú‚îÄ‚îÄ templates&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ admin.html              # HTMX/Alpine Admin UI template&#xA;‚îÇ   ‚îú‚îÄ‚îÄ transports&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base.py                 # Abstract transport interface&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sse_transport.py        # Server-Sent Events transport&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stdio_transport.py      # stdio transport for embedding&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ websocket_transport.py  # WS transport with ping/pong&#xA;‚îÇ   ‚îú‚îÄ‚îÄ models.py                   # Core enums / type aliases&#xA;‚îÇ   ‚îú‚îÄ‚îÄ utils&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ create_jwt_token.py     # CLI &amp;amp; library for JWT generation&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services_auth.py        # Service-to-service auth dependency&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ verify_credentials.py   # Basic / JWT auth helpers&#xA;‚îÇ   ‚îú‚îÄ‚îÄ validation&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jsonrpc.py              # JSON-RPC 2.0 validation&#xA;‚îÇ   ‚îî‚îÄ‚îÄ version.py                  # Library version helper&#xA;‚îú‚îÄ‚îÄ mcpgateway-wrapper              # Stdio client wrapper (PyPI)&#xA;‚îÇ   ‚îú‚îÄ‚îÄ pyproject.toml&#xA;‚îÇ   ‚îú‚îÄ‚îÄ README.md&#xA;‚îÇ   ‚îî‚îÄ‚îÄ src/mcpgateway_wrapper/&#xA;‚îÇ       ‚îú‚îÄ‚îÄ __init__.py&#xA;‚îÇ       ‚îî‚îÄ‚îÄ server.py               # Wrapper entry-point&#xA;‚îú‚îÄ‚îÄ mcp-servers                     # Sample downstream MCP servers&#xA;‚îú‚îÄ‚îÄ mcp.db                          # Default SQLite DB (auto-created)&#xA;‚îú‚îÄ‚îÄ mcpgrid                         # Experimental grid client / PoC&#xA;‚îú‚îÄ‚îÄ os_deps.sh                      # Installs system-level deps for CI&#xA;&#xA;# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Tests &amp;amp; QA Assets ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ&#xA;‚îú‚îÄ‚îÄ test_readme.py                  # Guard: README stays in sync&#xA;‚îú‚îÄ‚îÄ tests&#xA;‚îÇ   ‚îú‚îÄ‚îÄ conftest.py                 # Shared fixtures&#xA;‚îÇ   ‚îú‚îÄ‚îÄ e2e/...                       # End-to-end scenarios&#xA;‚îÇ   ‚îú‚îÄ‚îÄ hey/...                       # Load-test logs &amp;amp; helper script&#xA;‚îÇ   ‚îú‚îÄ‚îÄ integration/...               # API-level integration tests&#xA;‚îÇ   ‚îî‚îÄ‚îÄ unit/...                      # Pure unit tests for business logic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Swagger UI&lt;/strong&gt; ‚Üí &lt;a href=&#34;http://localhost:4444/docs&#34;&gt;http://localhost:4444/docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ReDoc&lt;/strong&gt; ‚Üí &lt;a href=&#34;http://localhost:4444/redoc&#34;&gt;http://localhost:4444/redoc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin Panel&lt;/strong&gt; ‚Üí &lt;a href=&#34;http://localhost:4444/admin&#34;&gt;http://localhost:4444/admin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr /&gt; &#xA;&lt;h2&gt;Makefile targets&lt;/h2&gt; &#xA;&lt;p&gt;This project offer the following Makefile targets. Type &lt;code&gt;make&lt;/code&gt; in the project root to show all targets.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;üîß Available Makefile targets&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;üêç MCP CONTEXT FORGE  (An enterprise-ready Model Context Protocol Gateway)&#xA;üîß SYSTEM-LEVEL DEPENDENCIES (DEV BUILD ONLY)&#xA;os-deps              - Install Graphviz, Pandoc, Trivy, SCC used for dev docs generation and security scan&#xA;üå± VIRTUAL ENVIRONMENT &amp;amp; INSTALLATION&#xA;venv                 - Create a fresh virtual environment with uv &amp;amp; friends&#xA;activate             - Activate the virtual environment in the current shell&#xA;install              - Install project into the venv&#xA;install-dev          - Install project (incl. dev deps) into the venv&#xA;install-db           - Install project (incl. postgres and redis) into venv&#xA;update               - Update all installed deps inside the venv&#xA;check-env            - Verify all required env vars in .env are present&#xA;‚ñ∂Ô∏è SERVE &amp;amp; TESTING&#xA;serve                - Run production Gunicorn server on :4444&#xA;certs                - Generate self-signed TLS cert &amp;amp; key in ./certs (won&#39;t overwrite)&#xA;serve-ssl            - Run Gunicorn behind HTTPS on :4444 (uses ./certs)&#xA;dev                  - Run fast-reload dev server (uvicorn)&#xA;run                  - Execute helper script ./run.sh&#xA;test                 - Run unit tests with pytest&#xA;test-curl            - Smoke-test API endpoints with curl script&#xA;pytest-examples      - Run README / examples through pytest-examples&#xA;clean                - Remove caches, build artefacts, virtualenv, docs, certs, coverage, SBOM, etc.&#xA;üìä COVERAGE &amp;amp; METRICS&#xA;coverage             - Run tests with coverage, emit md/HTML/XML + badge&#xA;pip-licenses         - Produce dependency license inventory (markdown)&#xA;scc                  - Quick LoC/complexity snapshot with scc&#xA;scc-report           - Generate HTML LoC &amp;amp; per-file metrics with scc&#xA;üìö DOCUMENTATION &amp;amp; SBOM&#xA;docs                 - Build docs (graphviz + handsdown + images + SBOM)&#xA;images               - Generate architecture &amp;amp; dependency diagrams&#xA;üîç LINTING &amp;amp; STATIC ANALYSIS&#xA;lint                 - Run the full linting suite (see targets below)&#xA;black                - Reformat code with black&#xA;autoflake            - Remove unused imports / variables with autoflake&#xA;isort                - Organise &amp;amp; sort imports with isort&#xA;flake8               - PEP-8 style &amp;amp; logical errors&#xA;pylint               - Pylint static analysis&#xA;markdownlint         - Lint Markdown files with markdownlint (requires markdownlint-cli)&#xA;mypy                 - Static type-checking with mypy&#xA;bandit               - Security scan with bandit&#xA;pydocstyle           - Docstring style checker&#xA;pycodestyle          - Simple PEP-8 checker&#xA;pre-commit           - Run all configured pre-commit hooks&#xA;ruff                 - Ruff linter + formatter&#xA;ty                   - Ty type checker from astral&#xA;pyright              - Static type-checking with Pyright&#xA;radon                - Code complexity &amp;amp; maintainability metrics&#xA;pyroma               - Validate packaging metadata&#xA;importchecker        - Detect orphaned imports&#xA;spellcheck           - Spell-check the codebase&#xA;fawltydeps           - Detect undeclared / unused deps&#xA;wily                 - Maintainability report&#xA;pyre                 - Static analysis with Facebook Pyre&#xA;depend               - List dependencies in ‚âàrequirements format&#xA;snakeviz             - Profile &amp;amp; visualise with snakeviz&#xA;pstats               - Generate PNG call-graph from cProfile stats&#xA;spellcheck-sort      - Sort local spellcheck dictionary&#xA;tox                  - Run tox across multi-Python versions&#xA;sbom                 - Produce a CycloneDX SBOM and vulnerability scan&#xA;pytype               - Flow-sensitive type checker&#xA;check-manifest       - Verify sdist/wheel completeness&#xA;yamllint            - Lint YAML files (uses .yamllint)&#xA;jsonlint            - Validate every *.json file with jq (--exit-status)&#xA;tomllint            - Validate *.toml files with tomlcheck&#xA;üï∏Ô∏è  WEBPAGE LINTERS &amp;amp; STATIC ANALYSIS (HTML/CSS/JS lint + security scans + formatting)&#xA;install-web-linters  - Install HTMLHint, Stylelint, ESLint, Retire.js &amp;amp; Prettier via npm&#xA;lint-web             - Run HTMLHint, Stylelint, ESLint, Retire.js and npm audit&#xA;format-web           - Format HTML, CSS &amp;amp; JS files with Prettier&#xA;osv-install          - Install/upgrade osv-scanner (Go)&#xA;osv-scan-source      - Scan source &amp;amp; lockfiles for CVEs&#xA;osv-scan-image       - Scan the built container image for CVEs&#xA;osv-scan             - Run all osv-scanner checks (source, image, licence)&#xA;üì° SONARQUBE ANALYSIS&#xA;sonar-deps-podman    - Install podman-compose + supporting tools&#xA;sonar-deps-docker    - Install docker-compose + supporting tools&#xA;sonar-up-podman      - Launch SonarQube with podman-compose&#xA;sonar-up-docker      - Launch SonarQube with docker-compose&#xA;sonar-submit-docker  - Run containerized Sonar Scanner CLI with Docker&#xA;sonar-submit-podman  - Run containerized Sonar Scanner CLI with Podman&#xA;pysonar-scanner      - Run scan with Python wrapper (pysonar-scanner)&#xA;sonar-info           - How to create a token &amp;amp; which env vars to export&#xA;üõ°Ô∏è SECURITY &amp;amp; PACKAGE SCANNING&#xA;trivy                - Scan container image for CVEs (HIGH/CRIT). Needs podman socket enabled&#xA;grype-scan           - Scan container for security audit and vulnerability scanning&#xA;dockle               - Lint the built container image via tarball (no daemon/socket needed)&#xA;hadolint             - Lint Containerfile/Dockerfile(s) with hadolint&#xA;pip-audit            - Audit Python dependencies for published CVEs&#xA;üì¶ DEPENDENCY MANAGEMENT&#xA;deps-update          - Run update-deps.py to update all dependencies in pyproject.toml and docs/requirements.txt&#xA;containerfile-update - Update base image in Containerfile to latest tag&#xA;üì¶ PACKAGING &amp;amp; PUBLISHING&#xA;dist                 - Clean-build wheel *and* sdist into ./dist&#xA;wheel                - Build wheel only&#xA;sdist                - Build source distribution only&#xA;verify               - Build + twine + check-manifest + pyroma (no upload)&#xA;publish              - Verify, then upload to PyPI (needs TWINE_* creds)&#xA;ü¶≠ PODMAN CONTAINER BUILD &amp;amp; RUN&#xA;podman-dev           - Build development container image&#xA;podman               - Build container image&#xA;podman-prod          - Build production container image (using ubi-micro ‚Üí scratch). Not supported on macOS.&#xA;podman-run           - Run the container on HTTP  (port 4444)&#xA;podman-run-shell     - Run the container on HTTP  (port 4444) and start a shell&#xA;podman-run-ssl       - Run the container on HTTPS (port 4444, self-signed)&#xA;podman-run-ssl-host  - Run the container on HTTPS with --network=host (port 4444, self-signed)&#xA;podman-stop          - Stop &amp;amp; remove the container&#xA;podman-test          - Quick curl smoke-test against the container&#xA;podman-logs          - Follow container logs (‚åÉC to quit)&#xA;podman-stats         - Show container resource stats (if supported)&#xA;podman-top           - Show live top-level process info in container&#xA;podman-shell         - Open an interactive shell inside the Podman container&#xA;üêã DOCKER BUILD &amp;amp; RUN&#xA;docker-dev           - Build development Docker image&#xA;docker               - Build production Docker image&#xA;docker-prod          - Build production container image (using ubi-micro ‚Üí scratch). Not supported on macOS.&#xA;docker-run           - Run the container on HTTP  (port 4444)&#xA;docker-run-ssl       - Run the container on HTTPS (port 4444, self-signed)&#xA;docker-stop          - Stop &amp;amp; remove the container&#xA;docker-test          - Quick curl smoke-test against the container&#xA;docker-logs          - Follow container logs (‚åÉC to quit)&#xA;docker-stats         - Show container resource usage stats (non-streaming)&#xA;docker-top           - Show top-level process info in Docker container&#xA;docker-shell         - Open an interactive shell inside the Docker container&#xA;üõ†Ô∏è COMPOSE STACK     - Build / start / stop the multi-service stack&#xA;compose-up           - Bring the whole stack up (detached)&#xA;compose-restart      - Recreate changed containers, pulling / building as needed&#xA;compose-build        - Build (or rebuild) images defined in the compose file&#xA;compose-pull         - Pull the latest images only&#xA;compose-logs         - Tail logs from all services (Ctrl-C to exit)&#xA;compose-ps           - Show container status table&#xA;compose-shell        - Open an interactive shell in the &#34;gateway&#34; container&#xA;compose-stop         - Gracefully stop the stack (keep containers)&#xA;compose-down         - Stop &amp;amp; remove containers (keep named volumes)&#xA;compose-rm           - Remove *stopped* containers&#xA;compose-clean        - ‚ú® Down **and** delete named volumes (data-loss ‚ö†)&#xA;‚òÅÔ∏è IBM CLOUD CODE ENGINE&#xA;ibmcloud-check-env          - Verify all required IBM Cloud env vars are set&#xA;ibmcloud-cli-install        - Auto-install IBM Cloud CLI + required plugins (OS auto-detected)&#xA;ibmcloud-login              - Login to IBM Cloud CLI using IBMCLOUD_API_KEY (--sso)&#xA;ibmcloud-ce-login           - Set Code Engine target project and region&#xA;ibmcloud-list-containers    - List deployed Code Engine apps&#xA;ibmcloud-tag                - Tag container image for IBM Container Registry&#xA;ibmcloud-push               - Push image to IBM Container Registry&#xA;ibmcloud-deploy             - Deploy (or update) container image in Code Engine&#xA;ibmcloud-ce-logs            - Stream logs for the deployed application&#xA;ibmcloud-ce-status          - Get deployment status&#xA;ibmcloud-ce-rm              - Delete the Code Engine application&#xA;üß™ MINIKUBE LOCAL CLUSTER&#xA;minikube-install      - Install Minikube (macOS, Linux, or Windows via choco)&#xA;helm-install          - Install Helm CLI (macOS, Linux, or Windows)&#xA;minikube-start        - Start local Minikube cluster with Ingress + DNS + metrics-server&#xA;minikube-stop         - Stop the Minikube cluster&#xA;minikube-delete       - Delete the Minikube cluster&#xA;minikube-image-load   - Build and load ghcr.io/ibm/mcp-context-forge:latest into Minikube&#xA;minikube-k8s-apply    - Apply Kubernetes manifests from deployment/k8s/&#xA;minikube-status       - Show status of Minikube and ingress pods&#xA;üõ†Ô∏è HELM CHART TASKS&#xA;helm-lint            - Lint the Helm chart (static analysis)&#xA;helm-package         - Package the chart into dist/ as mcp-stack-&amp;lt;ver&amp;gt;.tgz&#xA;helm-deploy          - Upgrade/Install chart into Minikube (profile mcpgw)&#xA;helm-delete          - Uninstall the chart release from Minikube&#xA;üè† LOCAL PYPI SERVER&#xA;local-pypi-install   - Install pypiserver for local testing&#xA;local-pypi-start     - Start local PyPI server on :8084 (no auth)&#xA;local-pypi-start-auth - Start local PyPI server with basic auth (admin/admin)&#xA;local-pypi-stop      - Stop local PyPI server&#xA;local-pypi-upload    - Upload existing package to local PyPI (no auth)&#xA;local-pypi-upload-auth - Upload existing package to local PyPI (with auth)&#xA;local-pypi-test      - Install package from local PyPI&#xA;local-pypi-clean     - Full cycle: build ‚Üí upload ‚Üí install locally&#xA;üè† LOCAL DEVPI SERVER&#xA;devpi-install        - Install devpi server and client&#xA;devpi-init           - Initialize devpi server (first time only)&#xA;devpi-start          - Start devpi server&#xA;devpi-stop           - Stop devpi server&#xA;devpi-setup-user     - Create user and dev index&#xA;devpi-upload         - Upload existing package to devpi&#xA;devpi-test           - Install package from devpi&#xA;devpi-clean          - Full cycle: build ‚Üí upload ‚Üí install locally&#xA;devpi-status         - Show devpi server status&#xA;devpi-web            - Open devpi web interface&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üîç Troubleshooting&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Port publishing on WSL2 (rootless Podman &amp;amp; Docker Desktop)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Diagnose the listener&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Inside your WSL distro&#xA;ss -tlnp | grep 4444        # Use ss&#xA;netstat -anp | grep 4444    # or netstat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;em&gt;Seeing &lt;code&gt;:::4444 LISTEN rootlessport&lt;/code&gt; is normal&lt;/em&gt; - the IPv6 wildcard socket (&lt;code&gt;::&lt;/code&gt;) also accepts IPv4 traffic &lt;strong&gt;when&lt;/strong&gt; &lt;code&gt;net.ipv6.bindv6only = 0&lt;/code&gt; (default on Linux).&lt;/p&gt; &#xA; &lt;h3&gt;Why localhost fails on Windows&lt;/h3&gt; &#xA; &lt;p&gt;WSL 2&#39;s NAT layer rewrites only the &lt;em&gt;IPv6&lt;/em&gt; side of the dual-stack listener. From Windows, &lt;code&gt;http://127.0.0.1:4444&lt;/code&gt; (or Docker Desktop&#39;s &#34;localhost&#34;) therefore times-out.&lt;/p&gt; &#xA; &lt;h4&gt;Fix (Podman rootless)&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Inside the WSL distro&#xA;echo &#34;wsl&#34; | sudo tee /etc/containers/podman-machine&#xA;systemctl --user restart podman.socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;code&gt;ss&lt;/code&gt; should now show &lt;code&gt;0.0.0.0:4444&lt;/code&gt; instead of &lt;code&gt;:::4444&lt;/code&gt;, and the service becomes reachable from Windows &lt;em&gt;and&lt;/em&gt; the LAN.&lt;/p&gt; &#xA; &lt;h4&gt;Fix (Docker Desktop &amp;gt; 4.19)&lt;/h4&gt; &#xA; &lt;p&gt;Docker Desktop adds a &#34;WSL integration&#34; switch per-distro. Turn it &lt;strong&gt;on&lt;/strong&gt; for your distro, restart Docker Desktop, then restart the container:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker restart mcpgateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Gateway starts but immediately exits (&#34;Failed to read DATABASE_URL&#34;)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; first:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Then edit &lt;code&gt;DATABASE_URL&lt;/code&gt;, &lt;code&gt;JWT_SECRET_KEY&lt;/code&gt;, &lt;code&gt;BASIC_AUTH_PASSWORD&lt;/code&gt;, etc. Missing or empty required vars cause a fast-fail at startup.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo, create a feature branch.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make lint&lt;/code&gt; and fix any issues.&lt;/li&gt; &#xA; &lt;li&gt;Keep &lt;code&gt;make test&lt;/code&gt; green and 100% coverage.&lt;/li&gt; &#xA; &lt;li&gt;Open a PR - describe your changes clearly.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more details.&lt;/h2&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;A complete changelog can be found here: &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the &lt;strong&gt;Apache License 2.0&lt;/strong&gt; - see &lt;a href=&#34;https://raw.githubusercontent.com/IBM/mcp-context-forge/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core Authors and Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/crivetimihai&#34;&gt;Mihai Criveti&lt;/a&gt; - Distinguished Engineer, Agentic AI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Special thanks to our contributors for helping us improve ContextForge MCP Gateway:&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/ibm/mcp-context-forge/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=ibm/mcp-context-forge&amp;amp;max=100&amp;amp;anon=0&amp;amp;columns=10&#34; /&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Star History and Project Activity&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#ibm/mcp-context-forge&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=ibm/mcp-context-forge&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- === Usage Stats === --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pepy.tech/project/mcp-contextforge-gateway&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/mcp-contextforge-gateway/month&#34; alt=&#34;PyPi Downloads&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/ibm/mcp-context-forge/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ibm/mcp-context-forge?style=social&#34; alt=&#34;Stars&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/ibm/mcp-context-forge/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/ibm/mcp-context-forge?style=social&#34; alt=&#34;Forks&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/ibm/mcp-context-forge/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/ibm/mcp-context-forge&#34; alt=&#34;Contributors&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/ibm/mcp-context-forge/commits&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/ibm/mcp-context-forge&#34; alt=&#34;Last Commit&#34; /&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/ibm/mcp-context-forge/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/ibm/mcp-context-forge&#34; alt=&#34;Open Issues&#34; /&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt;</summary>
  </entry>
</feed>