<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-27T01:36:36Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lipku/LiveTalking</title>
    <updated>2024-12-27T01:36:36Z</updated>
    <id>tag:github.com,2024-12-27:/lipku/LiveTalking</id>
    <link href="https://github.com/lipku/LiveTalking" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real time interactive streaming digital human&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Real time interactive streaming digital human， realize audio video synchronous dialogue. It can basically achieve commercial effects.&lt;br&gt; 实时交互流式数字人，实现音视频同步对话。基本可以达到商用效果&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1PM4m1y7Q2/&#34;&gt;ernerf效果&lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1gm421N7vQ/&#34;&gt;musetalk效果&lt;/a&gt; &lt;a href=&#34;https://www.bilibili.com/video/BV1Bw4m1e74P/&#34;&gt;wav2lip效果&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;为避免与3d数字人混淆，原项目metahuman-stream改名为livetalking，原有链接地址继续可用&lt;/h2&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2024.12.8 完善多并发，显存不随并发数增加&lt;/li&gt; &#xA; &lt;li&gt;2024.12.21 添加wav2lip、musetalk模型预热，解决第一次推理卡顿问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;支持多种数字人模型: ernerf、musetalk、wav2lip&lt;/li&gt; &#xA; &lt;li&gt;支持声音克隆&lt;/li&gt; &#xA; &lt;li&gt;支持数字人说话被打断&lt;/li&gt; &#xA; &lt;li&gt;支持全身视频拼接&lt;/li&gt; &#xA; &lt;li&gt;支持rtmp和webrtc&lt;/li&gt; &#xA; &lt;li&gt;支持视频编排：不说话时播放自定义视频&lt;/li&gt; &#xA; &lt;li&gt;支持多并发&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;1. Installation&lt;/h2&gt; &#xA;&lt;p&gt;Tested on Ubuntu 20.04, Python3.10, Pytorch 1.12 and CUDA 11.3&lt;/p&gt; &#xA;&lt;h3&gt;1.1 Install dependency&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n nerfstream python=3.10&#xA;conda activate nerfstream&#xA;#如果cuda版本不为11.3(运行nvidia-smi确认版本)，根据&amp;lt;https://pytorch.org/get-started/previous-versions/&amp;gt;安装对应版本的pytorch &#xA;conda install pytorch==1.12.1 torchvision==0.13.1 cudatoolkit=11.3 -c pytorch&#xA;pip install -r requirements.txt&#xA;#如果不训练ernerf模型，不需要安装下面的库&#xA;pip install &#34;git+https://github.com/facebookresearch/pytorch3d.git&#34;&#xA;pip install tensorflow-gpu==2.8.0&#xA;pip install --upgrade &#34;protobuf&amp;lt;=3.20.1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装常见问题&lt;a href=&#34;https://livetalking-doc.readthedocs.io/en/latest/faq.html&#34;&gt;FAQ&lt;/a&gt;&lt;br&gt; linux cuda环境搭建可以参考这篇文章 &lt;a href=&#34;https://zhuanlan.zhihu.com/p/674972886&#34;&gt;https://zhuanlan.zhihu.com/p/674972886&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2. Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;默认采用ernerf模型，webrtc推流到srs&lt;/p&gt; &#xA;&lt;h3&gt;2.1 运行srs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CANDIDATE=&#39;&amp;lt;服务器外网ip&amp;gt;&#39;  #如果srs与浏览器访问在同一层级内网，不需要执行这步&#xA;docker run --rm --env CANDIDATE=$CANDIDATE \&#xA;  -p 1935:1935 -p 8080:8080 -p 1985:1985 -p 8000:8000/udp \&#xA;  registry.cn-hangzhou.aliyuncs.com/ossrs/srs:5 \&#xA;  objs/srs -c conf/rtc.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.2 启动数字人：&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果访问不了huggingface，在运行前&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export HF_ENDPOINT=https://hf-mirror.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;用浏览器打开&lt;a href=&#34;http://serverip:8010/rtcpushapi.html&#34;&gt;http://serverip:8010/rtcpushapi.html&lt;/a&gt;, 在文本框输入任意文字，提交。数字人播报该段文字&lt;br&gt; 备注：服务端需要开放端口 tcp:8000,8010,1985; udp:8000&lt;/p&gt; &#xA;&lt;h2&gt;3. More Usage&lt;/h2&gt; &#xA;&lt;p&gt;使用说明: &lt;a href=&#34;https://livetalking-doc.readthedocs.io/&#34;&gt;https://livetalking-doc.readthedocs.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Docker Run&lt;/h2&gt; &#xA;&lt;p&gt;不需要前面的安装，直接运行。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --gpus all -it --network=host --rm registry.cn-beijing.aliyuncs.com/codewithgpu2/lipku-metahuman-stream:vjo1Y6NJ3N&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;代码在/root/metahuman-stream，先git pull拉一下最新代码，然后执行命令同第2、3步&lt;/p&gt; &#xA;&lt;p&gt;提供如下镜像&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;autodl镜像: &lt;a href=&#34;https://www.codewithgpu.com/i/lipku/metahuman-stream/base&#34;&gt;https://www.codewithgpu.com/i/lipku/metahuman-stream/base&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/lipku/LiveTalking/main/autodl/README.md&#34;&gt;autodl教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ucloud镜像: &lt;a href=&#34;https://www.compshare.cn/images-detail?ImageID=compshareImage-14pa8x8ucwr9&amp;amp;ImageType=Community&amp;amp;referral_code=3XW3852OBmnD089hMMrtuU&amp;amp;ytag=lipku_github&#34;&gt;https://www.compshare.cn/images-detail?ImageID=compshareImage-14pa8x8ucwr9&amp;amp;ImageType=Community&amp;amp;referral_code=3XW3852OBmnD089hMMrtuU&amp;amp;ytag=lipku_github&lt;/a&gt;&lt;br&gt; 可以开放任意端口，不需要单独运行srs服务.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;5. 性能分析&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;帧率&lt;br&gt; 在Tesla T4显卡上测试整体fps为18左右，如果去掉音视频编码推流，帧率在20左右。用4090显卡可以达到40多帧/秒。&lt;/li&gt; &#xA; &lt;li&gt;延时&lt;br&gt; 整体延时3s左右&lt;br&gt; （1）tts延时1.7s左右，目前用的edgetts，需要将每句话转完后一次性输入，可以优化tts改成流式输入&lt;br&gt; （2）wav2vec延时0.4s，需要缓存18帧音频做计算 （3）srs转发延时，设置srs服务器减少缓冲延时。具体配置可看 &lt;a href=&#34;https://ossrs.net/lts/zh-cn/docs/v5/doc/low-latency&#34;&gt;https://ossrs.net/lts/zh-cn/docs/v5/doc/low-latency&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;6. TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 添加chatgpt实现数字人对话&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 声音克隆&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 数字人静音时用一段视频代替&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MuseTalk&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Wav2Lip&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;如果本项目对你有帮助，帮忙点个star。也欢迎感兴趣的朋友一起来完善该项目.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;知识星球: &lt;a href=&#34;https://t.zsxq.com/7NMyO&#34;&gt;https://t.zsxq.com/7NMyO&lt;/a&gt; 沉淀高质量常见问题、最佳实践经验、问题解答&lt;/li&gt; &#xA; &lt;li&gt;微信公众号：数字人技术&lt;br&gt; &lt;img src=&#34;https://mmbiz.qpic.cn/sz_mmbiz_jpg/l3ZibgueFiaeyfaiaLZGuMGQXnhLWxibpJUS2gfs8Dje6JuMY8zu2tVyU9n8Zx1yaNncvKHBMibX0ocehoITy5qQEZg/640?wxfrom=12&amp;amp;tp=wxpic&amp;amp;usePicPrefetch=1&amp;amp;wx_fmt=jpeg&amp;amp;from=appmsg&#34; alt=&#34;&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>freqtrade/freqtrade-strategies</title>
    <updated>2024-12-27T01:36:36Z</updated>
    <id>tag:github.com,2024-12-27:/freqtrade/freqtrade-strategies</id>
    <link href="https://github.com/freqtrade/freqtrade-strategies" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free trading strategies for Freqtrade bot&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Freqtrade strategies&lt;/h1&gt; &#xA;&lt;p&gt;This Git repo contains free buy/sell strategies for &lt;a href=&#34;https://github.com/freqtrade/freqtrade&#34;&gt;Freqtrade&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All strategies should work with a freqtrade version of 2022.4 or newer.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;These strategies are for educational purposes only. Do not risk money which you are afraid to lose. USE THE SOFTWARE AT YOUR OWN RISK. THE AUTHORS AND ALL AFFILIATES ASSUME NO RESPONSIBILITY FOR YOUR TRADING RESULTS.&lt;/p&gt; &#xA;&lt;p&gt;Always start by testing strategies with a backtesting then run the trading bot in Dry-run. Do not engage money before you understand how it works and what profit/loss you should expect.&lt;/p&gt; &#xA;&lt;p&gt;We strongly recommend you to have coding and Python knowledge. Do not hesitate to read the source code and understand the mechanism of this bot.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Content&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freqtrade/freqtrade-strategies/main/#free-trading-strategies&#34;&gt;Free trading strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freqtrade/freqtrade-strategies/main/#share-your-own-strategies-and-contribute-to-this-repo&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freqtrade/freqtrade-strategies/main/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freqtrade/freqtrade-strategies/main/#what-is-freqtrade&#34;&gt;What is Freqtrade?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freqtrade/freqtrade-strategies/main/#what-includes-these-strategies&#34;&gt;What includes these strategies?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freqtrade/freqtrade-strategies/main/#how-to-install-a-strategy&#34;&gt;How to install a strategy?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/freqtrade/freqtrade-strategies/main/#how-to-test-a-strategy&#34;&gt;How to test a strategy?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.freqtrade.io/en/latest/strategy-customization/&#34;&gt;How to create/optimize a strategy?&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Free trading strategies&lt;/h2&gt; &#xA;&lt;p&gt;Value below are result from backtesting from 2018-01-10 to 2018-01-30 and&lt;br&gt; &lt;code&gt;exit_profit_only&lt;/code&gt; enabled. More detail on each strategy page.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Strategy&lt;/th&gt; &#xA;   &lt;th&gt;Buy count&lt;/th&gt; &#xA;   &lt;th&gt;AVG profit %&lt;/th&gt; &#xA;   &lt;th&gt;Total profit&lt;/th&gt; &#xA;   &lt;th&gt;AVG duration&lt;/th&gt; &#xA;   &lt;th&gt;Backtest period&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/raw/main/user_data/strategies/Strategy001.py&#34;&gt;Strategy 001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;55&lt;/td&gt; &#xA;   &lt;td&gt;0.05&lt;/td&gt; &#xA;   &lt;td&gt;0.00012102&lt;/td&gt; &#xA;   &lt;td&gt;476.1&lt;/td&gt; &#xA;   &lt;td&gt;2018-01-10 to 2018-01-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/raw/main/user_data/strategies/Strategy002.py&#34;&gt;Strategy 002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;3.21&lt;/td&gt; &#xA;   &lt;td&gt;0.00114807&lt;/td&gt; &#xA;   &lt;td&gt;189.4&lt;/td&gt; &#xA;   &lt;td&gt;2018-01-10 to 2018-01-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/raw/main/user_data/strategies/Strategy003.py&#34;&gt;Strategy 003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;1.47&lt;/td&gt; &#xA;   &lt;td&gt;0.00081740&lt;/td&gt; &#xA;   &lt;td&gt;227.5&lt;/td&gt; &#xA;   &lt;td&gt;2018-01-10 to 2018-01-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/raw/main/user_data/strategies/Strategy004.py&#34;&gt;Strategy 004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;37&lt;/td&gt; &#xA;   &lt;td&gt;0.69&lt;/td&gt; &#xA;   &lt;td&gt;0.00102128&lt;/td&gt; &#xA;   &lt;td&gt;367.3&lt;/td&gt; &#xA;   &lt;td&gt;2018-01-10 to 2018-01-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/raw/main/user_data/strategies/Strategy005.py&#34;&gt;Strategy 005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;180&lt;/td&gt; &#xA;   &lt;td&gt;1.16&lt;/td&gt; &#xA;   &lt;td&gt;0.00827589&lt;/td&gt; &#xA;   &lt;td&gt;156.2&lt;/td&gt; &#xA;   &lt;td&gt;2018-01-10 to 2018-01-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Strategies from this repo are free to use. Feel free to update them to your likings. Most of them were designed from Hyperopt calculations.&lt;/p&gt; &#xA;&lt;p&gt;Some only work in specific market conditions, while others are more &#34;general purpose&#34; strategies. It&#39;s noteworthy that depending on the exchange and Pairs used, further optimization can bring better results.&lt;/p&gt; &#xA;&lt;p&gt;Please keep in mind, results will heavily depend on the pairs, timeframe and timerange used to backtest - so please run your own backtests that mirror your usecase, to evaluate each strategy for yourself.&lt;/p&gt; &#xA;&lt;p&gt;The results above should serve as a general outline to demonstrate the number of trades to expect. Actual performance will be different based on various factors.&lt;/p&gt; &#xA;&lt;h2&gt;Share your own strategies and contribute to this repo&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to send your strategies, comments, optimizations and pull requests via an &lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/issues/new&#34;&gt;Issue ticket&lt;/a&gt; or as a &lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/pulls&#34;&gt;Pull request&lt;/a&gt; enhancing this repository.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;What is Freqtrade?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/freqtrade/freqtrade&#34;&gt;Freqtrade&lt;/a&gt; Freqtrade is a free and open source crypto trading bot written in Python. It is designed to support all major exchanges and be controlled via Telegram. It contains backtesting, plotting and money management tools as well as strategy optimization by machine learning.&lt;/p&gt; &#xA;&lt;h3&gt;What includes these strategies?&lt;/h3&gt; &#xA;&lt;p&gt;Each Strategies includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Minimal ROI&lt;/strong&gt;: Minimal ROI optimized for the strategy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Stoploss&lt;/strong&gt;: Optimimal stoploss.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Buy signals&lt;/strong&gt;: Result from Hyperopt or based on exisiting trading strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Sell signals&lt;/strong&gt;: Result from Hyperopt or based on exisiting trading strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;Indicators&lt;/strong&gt;: Includes the indicators required to run the strategy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Best backtest multiple strategies with the exchange and pairs you&#39;re interrested in, and finetune the strategy to the markets you&#39;re trading.&lt;/p&gt; &#xA;&lt;h3&gt;How to install a strategy?&lt;/h3&gt; &#xA;&lt;p&gt;First you need a &lt;a href=&#34;https://freqtrade.io&#34;&gt;working Freqtrade&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have the bot on the right version, follow this steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select the strategy you want. All strategies of the repo are into &lt;a href=&#34;https://github.com/freqtrade/freqtrade-strategies/tree/main/user_data/strategies&#34;&gt;user_data/strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the strategy file&lt;/li&gt; &#xA; &lt;li&gt;Paste it into your &lt;code&gt;user_data/strategies&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Run the bot with the parameter &lt;code&gt;--strategy &amp;lt;STRATEGY CLASS NAME&amp;gt;&lt;/code&gt; (ex: &lt;code&gt;freqtrade trade --strategy Strategy001&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More information &lt;a href=&#34;https://www.freqtrade.io/en/latest/backtesting/&#34;&gt;about backtesting&lt;/a&gt; and &lt;a href=&#34;https://www.freqtrade.io/en/latest/strategy-customization/&#34;&gt;strategy customization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to test a strategy?&lt;/h3&gt; &#xA;&lt;p&gt;Let assume you have selected the strategy &lt;code&gt;strategy001.py&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Simple backtesting&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;freqtrade backtesting --strategy Strategy001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Refresh your test data&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;freqtrade download-data --days 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Generally, it&#39;s recommended to use static backtest data (from a defined period of time) for comparable results.&lt;/p&gt; &#xA;&lt;p&gt;Please check out the &lt;a href=&#34;https://www.freqtrade.io/en/latest/backtesting/&#34;&gt;official backtesting documentation&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>