<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-20T01:40:11Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jimbosimbo/howstheweather</title>
    <updated>2024-04-20T01:40:11Z</updated>
    <id>tag:github.com,2024-04-20:/jimbosimbo/howstheweather</id>
    <link href="https://github.com/jimbosimbo/howstheweather" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;How is the Weather?&lt;/h1&gt; &#xA;&lt;p&gt;A simple Python command-line application to check the weather. The application fetches weather data using the OpenWeatherMap API and categorizes the temperature into &#34;nice and warm&#34;, &#34;mild&#34;, or &#34;cold!&#34; based on the temperature.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetches real-time weather data from OpenWeatherMap.&lt;/li&gt; &#xA; &lt;li&gt;Provides a simple command-line interface to interact with.&lt;/li&gt; &#xA; &lt;li&gt;Categorizes weather conditions based on temperature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Before you begin, ensure you have met the following requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You have installed Python 3.6 or above.&lt;/li&gt; &#xA; &lt;li&gt;You have a virtual environment set up in your project directory.&lt;/li&gt; &#xA; &lt;li&gt;You have obtained an API key from &lt;a href=&#34;https://openweathermap.org/api&#34;&gt;OpenWeatherMap&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing How is the Weather?&lt;/h2&gt; &#xA;&lt;p&gt;To install How is the Weather?, follow these steps:&lt;/p&gt; &#xA;&lt;p&gt;Linux and macOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m venv venv&#xA;source venv/bin/activate&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>binarly-io/binary-risk-intelligence</title>
    <updated>2024-04-20T01:40:11Z</updated>
    <id>tag:github.com,2024-04-20:/binarly-io/binary-risk-intelligence</id>
    <link href="https://github.com/binarly-io/binary-risk-intelligence" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Binary Risk Intelligence&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Binarly Logo&#34; src=&#34;https://raw.githubusercontent.com/binarly-io/logo/master/binarly_white.png&#34; width=&#34;15%&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Binary Risk Intelligence&lt;/h1&gt; &#xA;&lt;p&gt;Take a deep dive into the latest emerging advanced threats analyzed by Binarly REsearch.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/binarly-io/binary-risk-intelligence/master/xz-backdoor/&#34;&gt;xz-backdoor&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Contains the results of our deep dive into the xz backdoor (originally disclosed in &lt;a href=&#34;https://www.openwall.com/lists/oss-security/2024/03/29/4&#34;&gt;1&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mistralai/mistral-common</title>
    <updated>2024-04-20T01:40:11Z</updated>
    <id>tag:github.com,2024-04-20:/mistralai/mistral-common</id>
    <link href="https://github.com/mistralai/mistral-common" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mistral Common&lt;/h1&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;mistral-common is a set of tools to help you work with Mistral models.&lt;/p&gt; &#xA;&lt;p&gt;Our first release contains tokenization. Our tokenizers go beyond the usual text &amp;lt;-&amp;gt; tokens, adding parsing of tools and structured conversation. We also release the validation and normalization code that is used in our API.&lt;/p&gt; &#xA;&lt;p&gt;We are releasing three versions of our tokenizer powering different sets of models.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v1: open-mistral-7b, open-mixtral-8x7b, mistral-embed&lt;/li&gt; &#xA; &lt;li&gt;v2: mistral-small-latest, mistral-large-latest&lt;/li&gt; &#xA; &lt;li&gt;v3: open-mixtral-8x22b&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;pip&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;mistral-common&lt;/code&gt; via pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install mistral-common&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can install from source directly. This repo uses poetry as a dependency and virtual environment manager.&lt;/p&gt; &#xA;&lt;p&gt;You can install poetry with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install poetry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;poetry will set up a virtual environment and install dependencies with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://colab.research.google.com/github/mistralai/mistral-common/blob/main/examples/tokenizer.ipynb&#34;&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt; &lt;/a&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;# Import needed packages:&#xA;from mistral_common.protocol.instruct.messages import UserMessage&#xA;from mistral_common.protocol.instruct.request import ChatCompletionRequest&#xA;from mistral_common.protocol.instruct.tool_calls import Function, Tool&#xA;from mistral_common.tokens.tokenizers.mistral import MistralTokenizer&#xA;&#xA;# Load Mistral tokenizer&#xA;&#xA;model_name = &#34;open-mixtral-8x22b&#34;&#xA;&#xA;tokenizer = MistralTokenizer.from_model(model_name)&#xA;&#xA;# Tokenize a list of messages&#xA;tokenized = tokenizer.encode_chat_completion(&#xA;    ChatCompletionRequest(&#xA;        tools=[&#xA;            Tool(&#xA;                function=Function(&#xA;                    name=&#34;get_current_weather&#34;,&#xA;                    description=&#34;Get the current weather&#34;,&#xA;                    parameters={&#xA;                        &#34;type&#34;: &#34;object&#34;,&#xA;                        &#34;properties&#34;: {&#xA;                            &#34;location&#34;: {&#xA;                                &#34;type&#34;: &#34;string&#34;,&#xA;                                &#34;description&#34;: &#34;The city and state, e.g. San Francisco, CA&#34;,&#xA;                            },&#xA;                            &#34;format&#34;: {&#xA;                                &#34;type&#34;: &#34;string&#34;,&#xA;                                &#34;enum&#34;: [&#34;celsius&#34;, &#34;fahrenheit&#34;],&#xA;                                &#34;description&#34;: &#34;The temperature unit to use. Infer this from the users location.&#34;,&#xA;                            },&#xA;                        },&#xA;                        &#34;required&#34;: [&#34;location&#34;, &#34;format&#34;],&#xA;                    },&#xA;                )&#xA;            )&#xA;        ],&#xA;        messages=[&#xA;            UserMessage(content=&#34;What&#39;s the weather like today in Paris&#34;),&#xA;        ],&#xA;        model=model_name,&#xA;    )&#xA;)&#xA;tokens, text = tokenized.tokens, tokenized.text&#xA;&#xA;# Count the number of tokens&#xA;print(len(tokens))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>