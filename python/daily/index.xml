<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-09T01:33:58Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cvat-ai/cvat</title>
    <updated>2024-10-09T01:33:58Z</updated>
    <id>tag:github.com,2024-10-09:/cvat-ai/cvat</id>
    <link href="https://github.com/cvat-ai/cvat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Annotate better with CVAT, the industry-leading data engine for machine learning. Used and trusted by teams at any scale, for data of any scale.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/site/content/en/images/cvat-readme-gif.gif&#34; alt=&#34;CVAT Platform&#34; width=&#34;100%&#34; max-width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://app.cvat.ai/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/site/content/en/images/cvat-readme-button-tr-bg.png&#34; alt=&#34;Start Annotating Now&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Computer Vision Annotation Tool (CVAT)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cvat-ai/cvat/actions&#34;&gt;&lt;img src=&#34;https://github.com/cvat-ai/cvat/actions/workflows/main.yml/badge.svg?branch=develop&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/opencv-cvat/public&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/opencv-cvat/public?style=flat&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/fNR3eXfk6C&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1000789942802337834?label=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/cvat-ai/cvat&#34;&gt;&lt;img src=&#34;https://codecov.io/github/cvat-ai/cvat/branch/develop/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/cvat/server&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/cvat/server.svg?style=flat-square&amp;amp;label=server%20pulls&#34; alt=&#34;server pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/cvat/ui&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/cvat/ui.svg?style=flat-square&amp;amp;label=UI%20pulls&#34; alt=&#34;ui pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/139156354&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/139156354.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CVAT is an interactive video and image annotation tool for computer vision. It is used by tens of thousands of users and companies around the world. Our mission is to help developers, companies, and organizations around the world to solve real problems using the Data-centric AI approach.&lt;/p&gt; &#xA;&lt;p&gt;Start using CVAT online: &lt;a href=&#34;https://cvat.ai&#34;&gt;cvat.ai&lt;/a&gt;. You can use it for free, or &lt;a href=&#34;https://www.cvat.ai/pricing/cloud&#34;&gt;subscribe&lt;/a&gt; to get unlimited data, organizations, autoannotations, and &lt;a href=&#34;https://www.cvat.ai/post/integrating-hugging-face-and-roboflow-models&#34;&gt;Roboflow and HuggingFace integration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or set CVAT up as a self-hosted solution: &lt;a href=&#34;https://docs.cvat.ai/docs/administration/basics/installation/&#34;&gt;Self-hosted Installation Guide&lt;/a&gt;. We provide &lt;a href=&#34;https://www.cvat.ai/pricing/on-prem&#34;&gt;Enterprise support&lt;/a&gt; for self-hosted installations with premium features: SSO, LDAP, Roboflow and HuggingFace integrations, and advanced analytics (coming soon). We also do trainings and a dedicated support with 24 hour SLA.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start ‚ö°&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/administration/basics/installation/&#34;&gt;Installation guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/manual/&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/contributing/&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cvat-ai/datumaro/raw/develop/README.md&#34;&gt;Datumaro dataset framework&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/#api&#34;&gt;Server API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/#sdk&#34;&gt;Python SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/#cli&#34;&gt;Command line tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/manual/advanced/xml_format/&#34;&gt;XML annotation format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/administration/basics/aws-deployment-guide/&#34;&gt;AWS Deployment Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/faq/&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/#where-to-ask-questions&#34;&gt;Where to ask questions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Partners ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;CVAT is used by teams all over the world. In the list, you can find key companies which help us support the product or an essential part of our ecosystem. If you use us, please drop us a line at &lt;a href=&#34;mailto:contact+github@cvat.ai&#34;&gt;contact@cvat.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hmt.ai&#34;&gt;Human Protocol&lt;/a&gt; uses CVAT as a way of adding annotation service to the Human Protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fiftyone.ai&#34;&gt;FiftyOne&lt;/a&gt; is an open-source dataset curation and model analysis tool for visualizing, exploring, and improving computer vision datasets and models that are &lt;a href=&#34;https://voxel51.com/docs/fiftyone/integrations/cvat.html&#34;&gt;tightly integrated&lt;/a&gt; with CVAT for annotation and label refinement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Public datasets&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smhassanerfani/atlantis&#34;&gt;ATLANTIS&lt;/a&gt;, an open-source dataset for semantic segmentation of waterbody images, developed by &lt;a href=&#34;http://ce.sc.edu/iwers/&#34;&gt;iWERS&lt;/a&gt; group in the Department of Civil and Environmental Engineering at the University of South Carolina is using CVAT.&lt;/p&gt; &#xA;&lt;p&gt;For developing a semantic segmentation dataset using CVAT, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sciencedirect.com/science/article/pii/S1364815222000391&#34;&gt;ATLANTIS published article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smhassanerfani/atlantis/tree/master/adk&#34;&gt;ATLANTIS Development Kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLIfLGY-zZChS5trt7Lc3MfNhab7OWl2BR&#34;&gt;ATLANTIS annotation tutorial videos&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CVAT online: &lt;a href=&#34;https://cvat.ai&#34;&gt;cvat.ai&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This is an online version of CVAT. It&#39;s free, efficient, and easy to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cvat.ai&#34;&gt;cvat.ai&lt;/a&gt; runs the latest version of the tool. You can create up to 10 tasks there and upload up to 500Mb of data to annotate. It will only be visible to you or the people you assign to it.&lt;/p&gt; &#xA;&lt;p&gt;For now, it does not have &lt;a href=&#34;https://docs.cvat.ai/docs/administration/advanced/analytics/&#34;&gt;analytics features&lt;/a&gt; like management and monitoring the data annotation team. It also does not allow exporting images, just the annotations.&lt;/p&gt; &#xA;&lt;p&gt;We plan to enhance &lt;a href=&#34;https://cvat.ai&#34;&gt;cvat.ai&lt;/a&gt; with new powerful features. Stay tuned!&lt;/p&gt; &#xA;&lt;h2&gt;Prebuilt Docker images üê≥&lt;/h2&gt; &#xA;&lt;p&gt;Prebuilt docker images are the easiest way to start using CVAT locally. They are available on Docker Hub:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/cvat/server&#34;&gt;cvat/server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/cvat/ui&#34;&gt;cvat/ui&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The images have been downloaded more than 1M times so far.&lt;/p&gt; &#xA;&lt;h2&gt;Screencasts üé¶&lt;/h2&gt; &#xA;&lt;p&gt;Here are some screencasts showing how to use CVAT.&lt;/p&gt; &#xA;&lt;!--lint disable maximum-line-length--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL0to7Ng4PuuYQT4eXlHb_oIlq_RPeuasN&#34;&gt;Computer Vision Annotation Course&lt;/a&gt;: we introduce our course series designed to help you annotate data faster and better using CVAT. This course is about CVAT deployment and integrations, it includes presentations and covers the following topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Speeding up your data annotation process: introduction to CVAT and Datumaro&lt;/strong&gt;. What problems do CVAT and Datumaro solve, and how they can speed up your model training process. Some resources you can use to learn more about how to use them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deployment and use CVAT&lt;/strong&gt;. Use the app online at &lt;a href=&#34;https://app.cvat.ai&#34;&gt;app.cvat.ai&lt;/a&gt;. A local deployment. A containerized local deployment with Docker Compose (for regular use), and a local cluster deployment with Kubernetes (for enterprise users). A 2-minute tour of the interface, a breakdown of CVAT‚Äôs internals, and a demonstration of how to deploy CVAT using Docker Compose.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL0to7Ng4Puua37NJVMIShl_pzqJTigFzg&#34;&gt;Product tour&lt;/a&gt;: in this course, we show how to use CVAT, and help to get familiar with CVAT functionality and interfaces. This course does not cover integrations and is dedicated solely to CVAT. It covers the following topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pipeline&lt;/strong&gt;. In this video, we show how to use &lt;a href=&#34;https://app.cvat.ai&#34;&gt;app.cvat.ai&lt;/a&gt;: how to sign up, upload your data, annotate it, and download it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--lint enable maximum-line-length--&gt; &#xA;&lt;p&gt;For feedback, please see &lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/#contact-us&#34;&gt;Contact us&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/api_sdk/api/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SDK&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with &lt;code&gt;pip install cvat-sdk&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/cvat-sdk/&#34;&gt;PyPI package homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/api_sdk/sdk/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with &lt;code&gt;pip install cvat-cli&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/cvat-cli/&#34;&gt;PyPI package homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/api_sdk/cli/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported annotation formats&lt;/h2&gt; &#xA;&lt;p&gt;CVAT supports multiple annotation formats. You can select the format after clicking the &lt;strong&gt;Upload annotation&lt;/strong&gt; and &lt;strong&gt;Dump annotation&lt;/strong&gt; buttons. &lt;a href=&#34;https://github.com/cvat-ai/datumaro&#34;&gt;Datumaro&lt;/a&gt; dataset framework allows additional dataset transformations with its command line tool and Python library.&lt;/p&gt; &#xA;&lt;p&gt;For more information about the supported formats, see: &lt;a href=&#34;https://docs.cvat.ai/docs/manual/advanced/formats/&#34;&gt;Annotation Formats&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!--lint disable maximum-line-length--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Annotation format&lt;/th&gt; &#xA;   &lt;th&gt;Import&lt;/th&gt; &#xA;   &lt;th&gt;Export&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/manual/advanced/xml_format/#annotation&#34;&gt;CVAT for images&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.cvat.ai/docs/manual/advanced/xml_format/#interpolation&#34;&gt;CVAT for a video&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cvat-ai/datumaro&#34;&gt;Datumaro&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://host.robots.ox.ac.uk/pascal/VOC/&#34;&gt;PASCAL VOC&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Segmentation masks from &lt;a href=&#34;http://host.robots.ox.ac.uk/pascal/VOC/&#34;&gt;PASCAL VOC&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pjreddie.com/darknet/yolo/&#34;&gt;YOLO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cocodataset.org/#format-data&#34;&gt;MS COCO Object Detection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://cocodataset.org/#format-data&#34;&gt;MS COCO Keypoints Detection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://motchallenge.net/&#34;&gt;MOT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.vision.rwth-aachen.de/page/mots&#34;&gt;MOTS PNG&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://labelme.csail.mit.edu/Release3.0&#34;&gt;LabelMe 3.0&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.image-net.org&#34;&gt;ImageNet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://mi.eng.cam.ac.uk/research/projects/VideoRec/CamVid/&#34;&gt;CamVid&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://shuoyang1213.me/WIDERFACE/&#34;&gt;WIDER Face&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ox-vgg/vgg_face2&#34;&gt;VGGFace2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.aitribune.com/dataset/2018051063&#34;&gt;Market-1501&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rrc.cvc.uab.es/?ch=2&#34;&gt;ICDAR13/15&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://storage.googleapis.com/openimages/web/index.html&#34;&gt;Open Images V6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cityscapes-dataset.com/login/&#34;&gt;Cityscapes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://www.cvlibs.net/datasets/kitti/&#34;&gt;KITTI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cvlibs.net/datasets/kitti/raw_data.php&#34;&gt;Kitti Raw Format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://vis-www.cs.umass.edu/lfw/&#34;&gt;LFW&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.supervise.ly/data-organization/00_ann_format_navi&#34;&gt;Supervisely Point Cloud Format&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ultralytics.com/datasets/detect/&#34;&gt;YOLOv8 Detection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ultralytics.com/datasets/obb/&#34;&gt;YOLOv8 Oriented Bounding Boxes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ultralytics.com/datasets/segment/&#34;&gt;YOLOv8 Segmentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ultralytics.com/datasets/pose/&#34;&gt;YOLOv8 Pose&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ultralytics.com/datasets/classify/&#34;&gt;YOLOv8 Classification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--lint enable maximum-line-length--&gt; &#xA;&lt;h2&gt;Deep learning serverless functions for automatic labeling&lt;/h2&gt; &#xA;&lt;p&gt;CVAT supports automatic labeling. It can speed up the annotation process up to 10x. Here is a list of the algorithms we support, and the platforms they can be run on:&lt;/p&gt; &#xA;&lt;!--lint disable maximum-line-length--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Framework&lt;/th&gt; &#xA;   &lt;th&gt;CPU&lt;/th&gt; &#xA;   &lt;th&gt;GPU&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/pytorch/facebookresearch/sam/nuclio/&#34;&gt;Segment Anything&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interactor&lt;/td&gt; &#xA;   &lt;td&gt;PyTorch&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/dextr/nuclio&#34;&gt;Deep Extreme Cut&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interactor&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/omz/public/faster_rcnn_inception_resnet_v2_atrous_coco/nuclio&#34;&gt;Faster RCNN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/omz/public/mask_rcnn_inception_resnet_v2_atrous_coco/nuclio&#34;&gt;Mask RCNN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/omz/public/yolo-v3-tf/nuclio&#34;&gt;YOLO v3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/onnx/WongKinYiu/yolov7/nuclio&#34;&gt;YOLO v7&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;ONNX&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/omz/intel/person-reidentification-retail-0277/nuclio&#34;&gt;Object reidentification&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;reid&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/omz/intel/semantic-segmentation-adas-0001/nuclio&#34;&gt;Semantic segmentation for ADAS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/omz/intel/text-detection-0004/nuclio&#34;&gt;Text detection v4&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/pytorch/foolwood/siammask/nuclio&#34;&gt;SiamMask&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tracker&lt;/td&gt; &#xA;   &lt;td&gt;PyTorch&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/pytorch/dschoerk/transt/nuclio&#34;&gt;TransT&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;tracker&lt;/td&gt; &#xA;   &lt;td&gt;PyTorch&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/pytorch/saic-vul/fbrs/nuclio&#34;&gt;f-BRS&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interactor&lt;/td&gt; &#xA;   &lt;td&gt;PyTorch&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/pytorch/saic-vul/hrnet/nuclio&#34;&gt;HRNet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interactor&lt;/td&gt; &#xA;   &lt;td&gt;PyTorch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/pytorch/shiyinzhang/iog/nuclio&#34;&gt;Inside-Outside Guidance&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;interactor&lt;/td&gt; &#xA;   &lt;td&gt;PyTorch&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/tensorflow/faster_rcnn_inception_v2_coco/nuclio&#34;&gt;Faster RCNN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;TensorFlow&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/tensorflow/matterport/mask_rcnn/nuclio&#34;&gt;Mask RCNN&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;TensorFlow&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/pytorch/facebookresearch/detectron2/retinanet_r101/nuclio&#34;&gt;RetinaNet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;PyTorch&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/serverless/openvino/omz/intel/face-detection-0205/nuclio&#34;&gt;Face Detection&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;detector&lt;/td&gt; &#xA;   &lt;td&gt;OpenVINO&lt;/td&gt; &#xA;   &lt;td&gt;‚úîÔ∏è&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--lint enable maximum-line-length--&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The code contained within the &lt;code&gt;/serverless&lt;/code&gt; directory is released under the &lt;strong&gt;MIT License&lt;/strong&gt;. However, it may download and utilize various assets, such as source code, architectures, and weights, among others. These assets may be distributed under different licenses, including non-commercial licenses. It is your responsibility to ensure compliance with the terms of these licenses before using the assets.&lt;/p&gt; &#xA;&lt;p&gt;This software uses LGPL-licensed libraries from the &lt;a href=&#34;https://www.ffmpeg.org&#34;&gt;FFmpeg&lt;/a&gt; project. The exact steps on how FFmpeg was configured and compiled can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/cvat-ai/cvat/develop/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;FFmpeg is an open-source framework licensed under LGPL and GPL. See &lt;a href=&#34;https://www.ffmpeg.org/legal.html&#34;&gt;https://www.ffmpeg.org/legal.html&lt;/a&gt;. You are solely responsible for determining if your use of FFmpeg requires any additional licenses. CVAT.ai Corporation is not responsible for obtaining any such licenses, nor liable for any licensing fees due in connection with your use of FFmpeg.&lt;/p&gt; &#xA;&lt;h2&gt;Contact us&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/opencv-cvat/public&#34;&gt;Gitter&lt;/a&gt; to ask CVAT usage-related questions. Typically questions get answered fast by the core team or community. There you can also browse other common questions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/S6sRHhuQ7K&#34;&gt;Discord&lt;/a&gt; is the place to also ask questions or discuss any other stuff related to CVAT.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/company/cvat-ai/&#34;&gt;LinkedIn&lt;/a&gt; for the company and work-related questions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/@cvat-ai&#34;&gt;YouTube&lt;/a&gt; to see screencast and tutorials about the CVAT.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cvat-ai/cvat/issues&#34;&gt;GitHub issues&lt;/a&gt; for feature requests or bug reports. If it&#39;s a bug, please add the steps to reproduce it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/search?q=%23cvat&#34;&gt;#cvat&lt;/a&gt; tag on StackOverflow is one more way to ask questions and get our support.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:contact+github@cvat.ai&#34;&gt;contact@cvat.ai&lt;/a&gt; to reach out to us if you need commercial support.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.intel.ai/introducing-cvat&#34;&gt;Intel AI blog: New Computer Vision Tool Accelerates Annotation of Digital Images and Video&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://software.intel.com/en-us/articles/computer-vision-annotation-tool-a-universal-approach-to-data-annotation&#34;&gt;Intel Software: Computer Vision Annotation Tool: A Universal Approach to Data Annotation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://venturebeat.com/2019/03/05/intel-open-sources-cvat-a-toolkit-for-data-labeling/&#34;&gt;VentureBeat: Intel open-sources CVAT, a toolkit for data labeling&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blog.roboflow.com/cvat/&#34;&gt;How to Use CVAT (Roboflow guide)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://blog.roboflow.com/how-to-use-roboflow-models-in-cvat/&#34;&gt;How to auto-label data in CVAT with one of 50,000+ models on Roboflow Universe&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;!-- Badges --&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>julep-ai/julep</title>
    <updated>2024-10-09T01:33:58Z</updated>
    <id>tag:github.com,2024-10-09:/julep-ai/julep</id>
    <link href="https://github.com/julep-ai/julep" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API for building multi-step agent workflows. (An orchestrator for AI agents and workflows.)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;sup&gt;English | &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/README-CN.md&#34;&gt;‰∏≠ÊñáÁøªËØë&lt;/a&gt; | &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/README-JP.md&#34;&gt;Êó•Êú¨Ë™ûÁøªË®≥&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://socialify.git.ci/julep-ai/julep/image?description=1&amp;amp;descriptionEditable=API%20for%20AI%20agents%20and%20multi-step%20tasks&amp;amp;forks=1&amp;amp;name=1&amp;amp;owner=1&amp;amp;pattern=Solid&amp;amp;stargazers=1&amp;amp;font=Source%20Code%20Pro&amp;amp;logo=https%3A%2F%2Fraw.githubusercontent.com%2Fjulep-ai%2Fjulep%2Fdev%2F.github%2Fjulep-logo.svg&amp;amp;theme=Auto&#34; alt=&#34;julep&#34; width=&#34;640&#34; height=&#34;320&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://docs.julep.ai&#34; rel=&#34;dofollow&#34;&gt;&lt;strong&gt;Explore Docs&lt;/strong&gt;&lt;/a&gt; ¬∑ &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34; rel=&#34;dofollow&#34;&gt;Discord&lt;/a&gt; ¬∑ &lt;a href=&#34;https://x.com/julep_ai&#34; rel=&#34;dofollow&#34;&gt;ùïè&lt;/a&gt; ¬∑ &lt;a href=&#34;https://www.linkedin.com/company/julep-ai&#34; rel=&#34;dofollow&#34;&gt;LinkedIn&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@julep/sdk&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/%40julep%2Fsdk?style=social&amp;amp;logo=npm&amp;amp;link=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40julep%2Fsdk&#34; alt=&#34;NPM Version&#34;&gt;&lt;/a&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://pypi.org/project/julep&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/julep?style=social&amp;amp;logo=python&amp;amp;label=PyPI&amp;amp;link=https%3A%2F%2Fpypi.org%2Fproject%2Fjulep&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://hub.docker.com/u/julepai&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/julepai/agents-api?sort=semver&amp;amp;style=social&amp;amp;logo=docker&amp;amp;link=https%3A%2F%2Fhub.docker.com%2Fu%2Fjulepai&#34; alt=&#34;Docker Image Version&#34;&gt;&lt;/a&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;a href=&#34;https://choosealicense.com/licenses/apache/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/julep-ai/julep&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] üë®‚Äçüíª Here for the devfest.ai event? Join our &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34;&gt;Discord&lt;/a&gt; and check out the details below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;üåü Contributors and DevFest.AI Participants&lt;/b&gt; (Click to expand)&lt;/summary&gt; &#xA; &lt;h2&gt;üåü Call for Contributors!&lt;/h2&gt; &#xA; &lt;p&gt;We&#39;re excited to welcome new contributors to the Julep project! We&#39;ve created several &#34;good first issues&#34; to help you get started. Here&#39;s how you can contribute:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for guidelines on how to contribute.&lt;/li&gt; &#xA;  &lt;li&gt;Browse our &lt;a href=&#34;https://github.com/julep-ai/julep/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issues&lt;/a&gt; to find a task that interests you.&lt;/li&gt; &#xA;  &lt;li&gt;If you have any questions or need help, don&#39;t hesitate to reach out on our &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34;&gt;Discord&lt;/a&gt; channel.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;Your contributions, big or small, are valuable to us. Let&#39;s build something amazing together! üöÄ&lt;/p&gt; &#xA; &lt;h3&gt;üéâ DevFest.AI October 2024&lt;/h3&gt; &#xA; &lt;p&gt;Exciting news! We&#39;re participating in DevFest.AI throughout October 2024! üóìÔ∏è&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Contribute to Julep during this event and get a chance to win awesome Julep merch and swag! üéÅ&lt;/li&gt; &#xA;  &lt;li&gt;Join developers from around the world in contributing to AI repositories and participating in amazing events.&lt;/li&gt; &#xA;  &lt;li&gt;A big thank you to DevFest.AI for organizing this fantastic initiative!&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!TIP] Ready to join the fun? &lt;strong&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=Pumped%20to%20be%20participating%20in%20%40devfestai%20with%20%40julep_ai%20building%20%23ai%20%23agents%20%23workflows%20Let&#39;s%20gooo!%20https%3A%2F%2Fgit.new%2Fjulep&#34;&gt;Tweet that you are participating&lt;/a&gt;&lt;/strong&gt; and let&#39;s get coding! üñ•Ô∏è&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!NOTE] Get your API key &lt;a href=&#34;https://dashboard-dev.julep.ai&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;While we are in beta, you can also reach out on &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34;&gt;Discord&lt;/a&gt; to get rate limits lifted on your API key.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/YjyUeyotft6epaMHtU/giphy.gif&#34; alt=&#34;Julep DevFest.AI&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;üìñ Table of Contents&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#quick-example&#34;&gt;Quick Example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#why-julep-vs-langchain&#34;&gt;Why Julep vs. LangChain?&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#different-use-cases&#34;&gt;Different Use Cases&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#different-form-factor&#34;&gt;Different Form Factor&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#in-summary&#34;&gt;In Summary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#python-quick-start-&#34;&gt;Python Quick Start üêç&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-1-create-an-agent&#34;&gt;Step 1: Create an Agent&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-2-create-a-task-that-generates-a-story-and-comic-strip&#34;&gt;Step 2: Create a Task that generates a story and comic strip&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-3-execute-the-task&#34;&gt;Step 3: Execute the Task&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-4-chat-with-the-agent&#34;&gt;Step 4: Chat with the Agent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#nodejs-quick-start-&#34;&gt;Node.js Quick Start üü©&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-1-create-an-agent-1&#34;&gt;Step 1: Create an Agent&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-2-create-a-task-that-generates-a-story-and-comic-strip-1&#34;&gt;Step 2: Create a Task that generates a story and comic strip&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-3-execute-the-task-1&#34;&gt;Step 3: Execute the Task&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#step-4-chat-with-the-agent-1&#34;&gt;Step 4: Chat with the Agent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#components&#34;&gt;Components&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#mental-model&#34;&gt;Mental Model&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#concepts&#34;&gt;Concepts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#understanding-tasks&#34;&gt;Understanding Tasks&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#types-of-workflow-steps&#34;&gt;Types of Workflow Steps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#advanced-features&#34;&gt;Advanced Features&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#adding-tools-to-agents&#34;&gt;Adding Tools to Agents&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#managing-sessions-and-users&#34;&gt;Managing Sessions and Users&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#document-integration-and-search&#34;&gt;Document Integration and Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#integrations&#34;&gt;Integrations&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#brave-search&#34;&gt;Brave Search&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#browserbase&#34;&gt;BrowserBase&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#email&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#spider&#34;&gt;Spider&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#weather&#34;&gt;Weather&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#wikipedia&#34;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#sdk-reference&#34;&gt;SDK Reference&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/#api-reference&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Julep is a platform for creating AI agents that remember past interactions and can perform complex tasks. It offers long-term memory and manages multi-step processes.&lt;/p&gt; &#xA;&lt;p&gt;Julep enables the creation of multi-step tasks incorporating decision-making, loops, parallel processing, and integration with numerous external tools and APIs.&lt;/p&gt; &#xA;&lt;p&gt;While many AI applications are limited to simple, linear chains of prompts and API calls with minimal branching, Julep is built to handle more complex scenarios.&lt;/p&gt; &#xA;&lt;p&gt;It supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intricate, multi-step processes&lt;/li&gt; &#xA; &lt;li&gt;Dynamic decision-making&lt;/li&gt; &#xA; &lt;li&gt;Parallel execution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Imagine you want to build an AI agent that can do more than just answer simple questions‚Äîit needs to handle complex tasks, remember past interactions, and maybe even use other tools or APIs. That&#39;s where Julep comes in.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick Example&lt;/h2&gt; &#xA;&lt;p&gt;Imagine a Research AI agent that can do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Take a topic,&lt;/li&gt; &#xA; &lt;li&gt;Come up with 100 search queries for that topic,&lt;/li&gt; &#xA; &lt;li&gt;Perform those web searches in parallel,&lt;/li&gt; &#xA; &lt;li&gt;Summarize the results,&lt;/li&gt; &#xA; &lt;li&gt;Send the summary to Discord&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In Julep, this would be a single task under &lt;b&gt;80 lines of code&lt;/b&gt; and run &lt;b&gt;fully managed&lt;/b&gt; all on its own. All of the steps are executed on Julep&#39;s own servers and you don&#39;t need to lift a finger. Here&#39;s a working example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Research Agent&#xA;&#xA;# Optional: Define the input schema for the task&#xA;input_schema:&#xA;  type: object&#xA;  properties:&#xA;    topic:&#xA;      type: string&#xA;      description: The main topic to research&#xA;&#xA;# Define the tools that the agent can use&#xA;tools:&#xA;- name: web_search&#xA;  type: integration&#xA;  integration:&#xA;    provider: brave&#xA;    setup:&#xA;      api_key: &#34;YOUR_BRAVE_API_KEY&#34;&#xA;&#xA;- name: discord_webhook&#xA;  type: api_call&#xA;  api_call:&#xA;    url: &#34;YOUR_DISCORD_WEBHOOK_URL&#34;&#xA;    method: POST&#xA;    headers:&#xA;      Content-Type: application/json&#xA;&#xA;# Special variables:&#xA;# - inputs: for accessing the input to the task&#xA;# - outputs: for accessing the output of previous steps&#xA;# - _: for accessing the output of the previous step&#xA;&#xA;# Define the main workflow&#xA;main:&#xA;- prompt:&#xA;    - role: system&#xA;      content: &amp;gt;-&#xA;        You are a research assistant.&#xA;        Generate 100 diverse search queries related to the topic:&#xA;        {{inputs[0].topic}}&#xA;&#xA;        Write one query per line.&#xA;  unwrap: true&#xA;&#xA;# Evaluate the search queries using a simple python expression&#xA;- evaluate:&#xA;    search_queries: &#34;_.split(&#39;\n&#39;)&#34;&#xA;&#xA;# Run the web search in parallel for each query&#xA;- over: &#34;_.search_queries&#34;&#xA;  map:&#xA;    tool: web_search&#xA;    arguments:&#xA;      query: &#34;_&#34;&#xA;  parallelism: 100&#xA;&#xA;# Collect the results from the web search&#xA;- evaluate:&#xA;    results: &#34;&#39;\n&#39;.join([item.result for item in _])&#34;&#xA;&#xA;# Summarize the results&#xA;- prompt:&#xA;    - role: system&#xA;      content: &amp;gt;&#xA;        You are a research summarizer. Create a comprehensive summary of the following research results on the topic {{inputs[0].topic}}.&#xA;        The summary should be well-structured, informative, and highlight key findings and insights:&#xA;        {{_.results}}&#xA;  unwrap: true&#xA;&#xA;# Send the summary to Discord&#xA;- tool: discord_webhook&#xA;  arguments:&#xA;    content: &amp;gt;&#xA;      **Research Summary for {{inputs[0].topic}}**&#xA;&#xA;      {{_}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Julep is really useful when you want to build AI agents that can maintain context and state over long-term interactions. It&#39;s great for designing complex, multi-step workflows and integrating various tools and APIs directly into your agent&#39;s processes.&lt;/p&gt; &#xA; &lt;p&gt;In this example, Julep will automatically manage parallel executions, retry failed steps, resend API requests, and keep the tasks running reliably until completion.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;üß† &lt;strong&gt;Persistent AI Agents&lt;/strong&gt;: Remember context and information over long-term interactions.&lt;/li&gt; &#xA; &lt;li&gt;üíæ &lt;strong&gt;Stateful Sessions&lt;/strong&gt;: Keep track of past interactions for personalized responses.&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Multi-Step Tasks&lt;/strong&gt;: Build complex, multi-step processes with loops and decision-making.&lt;/li&gt; &#xA; &lt;li&gt;‚è≥ &lt;strong&gt;Task Management&lt;/strong&gt;: Handle long-running tasks that can run indefinitely.&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è &lt;strong&gt;Built-in Tools&lt;/strong&gt;: Use built-in tools and external APIs in your tasks.&lt;/li&gt; &#xA; &lt;li&gt;üîß &lt;strong&gt;Self-Healing&lt;/strong&gt;: Julep will automatically retry failed steps, resend messages, and generally keep your tasks running smoothly.&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;RAG&lt;/strong&gt;: Use Julep&#39;s document store to build a system for retrieving and using your own data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Julep is ideal for applications that require AI use cases beyond simple prompt-response models.&lt;/p&gt; &#xA;&lt;h2&gt;Why Julep vs. LangChain?&lt;/h2&gt; &#xA;&lt;h3&gt;Different Use Cases&lt;/h3&gt; &#xA;&lt;p&gt;Think of LangChain and Julep as tools with different focuses within the AI development stack.&lt;/p&gt; &#xA;&lt;p&gt;LangChain is great for creating sequences of prompts and managing interactions with AI models. It has a large ecosystem with lots of pre-built integrations, which makes it convenient if you want to get something up and running quickly. LangChain fits well with simple use cases that involve a linear chain of prompts and API calls.&lt;/p&gt; &#xA;&lt;p&gt;Julep, on the other hand, is more about building persistent AI agents that can remember things over long-term interactions. It shines when you need complex tasks that involve multiple steps, decision-making, and integration with various tools or APIs directly within the agent&#39;s process. It&#39;s designed from the ground up to manage persistent sessions and complex tasks.&lt;/p&gt; &#xA;&lt;p&gt;Use Julep if you imagine building a complex AI assistant that needs to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep track of user interactions over days or weeks.&lt;/li&gt; &#xA; &lt;li&gt;Perform scheduled tasks, like sending daily summaries or monitoring data sources.&lt;/li&gt; &#xA; &lt;li&gt;Make decisions based on prior interactions or stored data.&lt;/li&gt; &#xA; &lt;li&gt;Interact with multiple external services as part of its task.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then Julep provides the infrastructure to support all that without you having to build it from scratch.&lt;/p&gt; &#xA;&lt;h3&gt;Different Form Factor&lt;/h3&gt; &#xA;&lt;p&gt;Julep is a &lt;strong&gt;platform&lt;/strong&gt; that includes a language for describing tasks, a server for running those tasks, and an SDK for interacting with the platform. To build something with Julep, you write a description of the task in &lt;code&gt;YAML&lt;/code&gt;, and then run the task in the cloud.&lt;/p&gt; &#xA;&lt;p&gt;Julep is built for heavy-lifting, multi-step, and long-running tasks and there&#39;s no limit to how complex the task can be.&lt;/p&gt; &#xA;&lt;p&gt;LangChain is a &lt;strong&gt;library&lt;/strong&gt; that includes a few tools and a framework for building linear chains of prompts and tools. To build something with LangChain, you typically write Python code that configures and runs the model chains you want to use.&lt;/p&gt; &#xA;&lt;p&gt;LangChain might be sufficient and quicker to implement for simple use cases that involve a linear chain of prompts and API calls.&lt;/p&gt; &#xA;&lt;h3&gt;In Summary&lt;/h3&gt; &#xA;&lt;p&gt;Use LangChain when you need to manage AI model interactions and prompt sequences in a stateless or short-term context.&lt;/p&gt; &#xA;&lt;p&gt;Choose Julep when you need a robust framework for stateful agents with advanced task capabilities, persistent sessions, and complex task management.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Julep, install it using &lt;a href=&#34;https://www.npmjs.com/package/@julep/sdk&#34;&gt;npm&lt;/a&gt; or &lt;a href=&#34;https://pypi.org/project/julep/&#34;&gt;pip&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @julep/sdk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install julep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Get your API key &lt;a href=&#34;https://dashboard-dev.julep.ai&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;While we are in beta, you can also reach out on &lt;a href=&#34;https://discord.com/invite/JTSBGRZrzj&#34;&gt;Discord&lt;/a&gt; to get rate limits lifted on your API key.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] üíª Are you a &lt;em&gt;show me the code!‚Ñ¢&lt;/em&gt; kind of person? We have created a ton of cookbooks for you to get started with. &lt;strong&gt;Check out the &lt;a href=&#34;https://github.com/julep-ai/julep/tree/dev/cookbooks&#34;&gt;cookbooks&lt;/a&gt;&lt;/strong&gt; to browse through examples.&lt;/p&gt; &#xA; &lt;p&gt;üí° There&#39;s also lots of ideas that you can build on top of Julep. &lt;strong&gt;Check out the &lt;a href=&#34;https://github.com/julep-ai/julep/tree/dev/cookbooks/IDEAS.md&#34;&gt;list of ideas&lt;/a&gt;&lt;/strong&gt; to get some inspiration.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Python Quick Start üêç&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1: Create an Agent&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yaml&#xA;from julep import Julep # or AsyncJulep&#xA;&#xA;client = Julep(api_key=&#34;your_julep_api_key&#34;)&#xA;&#xA;agent = client.agents.create(&#xA;    name=&#34;Storytelling Agent&#34;,&#xA;    model=&#34;gpt-4o&#34;,&#xA;    about=&#34;You are a creative storytelling agent that can craft engaging stories and generate comic panels based on ideas.&#34;,&#xA;)&#xA;&#xA;# üõ†Ô∏è Add an image generation tool (DALL¬∑E) to the agent&#xA;client.agents.tools.create(&#xA;    agent_id=agent.id,&#xA;    name=&#34;image_generator&#34;,&#xA;    description=&#34;Use this tool to generate images based on descriptions.&#34;,&#xA;    integration={&#xA;        &#34;provider&#34;: &#34;dalle&#34;,&#xA;        &#34;method&#34;: &#34;generate_image&#34;,&#xA;        &#34;setup&#34;: {&#xA;            &#34;api_key&#34;: &#34;your_openai_api_key&#34;,&#xA;        },&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: Create a Task that generates a story and comic strip&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s define a multi-step task to create a story and generate a paneled comic strip based on an input idea:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# üìã Task&#xA;# Create a task that takes an idea and creates a story and a 4-panel comic strip&#xA;task_yaml = &#34;&#34;&#34;&#xA;name: Story and Comic Creator&#xA;description: Create a story based on an idea and generate a 4-panel comic strip illustrating the story.&#xA;&#xA;main:&#xA;  # Step 1: Generate a story and outline into 4 panels&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Based on the idea &#39;{{_.idea}}&#39;, write a short story suitable for a 4-panel comic strip.&#xA;          Provide the story and a numbered list of 4 brief descriptions for each panel illustrating key moments in the story.&#xA;    unwrap: true&#xA;&#xA;  # Step 2: Extract the panel descriptions and story&#xA;  - evaluate:&#xA;      story: _.split(&#39;1. &#39;)[0].strip()&#xA;      panels: re.findall(r&#39;\\d+\\.\\s*(.*?)(?=\\d+\\.\\s*|$)&#39;, _)&#xA;&#xA;  # Step 3: Generate images for each panel using the image generator tool&#xA;  - foreach:&#xA;      in: _.panels&#xA;      do:&#xA;        tool: image_generator&#xA;        arguments:&#xA;          description: _&#xA;&#xA;  # Step 4: Generate a catchy title for the story&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Based on the story below, generate a catchy title.&#xA;&#xA;          Story: {{outputs[1].story}}&#xA;    unwrap: true&#xA;&#xA;  # Step 5: Return the story, the generated images, and the title&#xA;  - return:&#xA;      title: outputs[3]&#xA;      story: outputs[1].story&#xA;      comic_panels: &#34;[output.image.url for output in outputs[2]]&#34;&#xA;&#34;&#34;&#34;&#xA;&#xA;task = client.tasks.create(&#xA;    agent_id=agent.id,&#xA;    **yaml.safe_load(task_yaml)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 3: Execute the Task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# üöÄ Execute the task with an input idea&#xA;execution = client.executions.create(&#xA;    task_id=task.id,&#xA;    input={&#34;idea&#34;: &#34;A cat who learns to fly&#34;}&#xA;)&#xA;&#xA;# üéâ Watch as the story and comic panels are generated&#xA;for transition in client.executions.transitions.stream(execution_id=execution.id):&#xA;    print(transition)&#xA;&#xA;# üì¶ Once the execution is finished, retrieve the results&#xA;result = client.executions.get(execution_id=execution.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4: Chat with the Agent&lt;/h3&gt; &#xA;&lt;p&gt;Start an interactive chat session with the agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;session = client.sessions.create(agent_id=agent.id)&#xA;&#xA;# üí¨ Send messages to the agent&#xA;while (message := input(&#34;Enter a message: &#34;)) != &#34;quit&#34;:&#xA;    response = client.sessions.chat(&#xA;        session_id=session.id,&#xA;        message=message,&#xA;    )&#xA;&#xA;    print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can find the full python example &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/example.py&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Node.js Quick Start üü©&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1: Create an Agent&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Julep } from &#39;@julep/sdk&#39;;&#xA;import yaml from &#39;js-yaml&#39;;&#xA;&#xA;const client = new Julep({ apiKey: &#39;your_julep_api_key&#39; });&#xA;&#xA;async function createAgent() {&#xA;  const agent = await client.agents.create({&#xA;    name: &#34;Storytelling Agent&#34;,&#xA;    model: &#34;gpt-4&#34;,&#xA;    about: &#34;You are a creative storytelling agent that can craft engaging stories and generate comic panels based on ideas.&#34;,&#xA;  });&#xA;&#xA;  // üõ†Ô∏è Add an image generation tool (DALL¬∑E) to the agent&#xA;  await client.agents.tools.create(agent.id, {&#xA;    name: &#34;image_generator&#34;,&#xA;    description: &#34;Use this tool to generate images based on descriptions.&#34;,&#xA;    integration: {&#xA;      provider: &#34;dalle&#34;,&#xA;      method: &#34;generate_image&#34;,&#xA;      setup: {&#xA;        api_key: &#34;your_openai_api_key&#34;,&#xA;      },&#xA;    },&#xA;  });&#xA;&#xA;  return agent;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: Create a Task that generates a story and comic strip&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const taskYaml = `&#xA;name: Story and Comic Creator&#xA;description: Create a story based on an idea and generate a 4-panel comic strip illustrating the story.&#xA;&#xA;main:&#xA;  # Step 1: Generate a story and outline into 4 panels&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Based on the idea &#39;{{_.idea}}&#39;, write a short story suitable for a 4-panel comic strip.&#xA;          Provide the story and a numbered list of 4 brief descriptions for each panel illustrating key moments in the story.&#xA;    unwrap: true&#xA;&#xA;  # Step 2: Extract the panel descriptions and story&#xA;  - evaluate:&#xA;      story: _.split(&#39;1. &#39;)[0].trim()&#xA;      panels: _.match(/\\d+\\.\\s*(.*?)(?=\\d+\\.\\s*|$)/g)&#xA;&#xA;  # Step 3: Generate images for each panel using the image generator tool&#xA;  - foreach:&#xA;      in: _.panels&#xA;      do:&#xA;        tool: image_generator&#xA;        arguments:&#xA;          description: _&#xA;&#xA;  # Step 4: Generate a catchy title for the story&#xA;  - prompt:&#xA;      - role: system&#xA;        content: You are {{agent.name}}. {{agent.about}}&#xA;      - role: user&#xA;        content: &amp;gt;&#xA;          Based on the story below, generate a catchy title.&#xA;&#xA;          Story: {{outputs[1].story}}&#xA;    unwrap: true&#xA;&#xA;  # Step 5: Return the story, the generated images, and the title&#xA;  - return:&#xA;      title: outputs[3]&#xA;      story: outputs[1].story&#xA;      comic_panels: outputs[2].map(output =&amp;gt; output.image.url)&#xA;`;&#xA;&#xA;async function createTask(agent) {&#xA;  const task = await client.tasks.create(agent.id, yaml.load(taskYaml));&#xA;  return task;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 3: Execute the Task&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;async function executeTask(task) {&#xA;  const execution = await client.executions.create(task.id, {&#xA;    input: { idea: &#34;A cat who learns to fly&#34; }&#xA;  });&#xA;&#xA;  // üéâ Watch as the story and comic panels are generated&#xA;  for await (const transition of client.executions.transitions.stream(execution.id)) {&#xA;    console.log(transition);&#xA;  }&#xA;&#xA;  // üì¶ Once the execution is finished, retrieve the results&#xA;  const result = await client.executions.get(execution.id);&#xA;  return result;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4: Chat with the Agent&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;async function chatWithAgent(agent) {&#xA;  const session = await client.sessions.create({ agent_id: agent.id });&#xA;&#xA;  // üí¨ Send messages to the agent&#xA;  const rl = readline.createInterface({&#xA;    input: process.stdin,&#xA;    output: process.stdout&#xA;  });&#xA;&#xA;  const chat = async () =&amp;gt; {&#xA;    rl.question(&#34;Enter a message (or &#39;quit&#39; to exit): &#34;, async (message) =&amp;gt; {&#xA;      if (message.toLowerCase() === &#39;quit&#39;) {&#xA;        rl.close();&#xA;        return;&#xA;      }&#xA;&#xA;      const response = await client.sessions.chat(session.id, { message });&#xA;      console.log(response);&#xA;      chat();&#xA;    });&#xA;  };&#xA;&#xA;  chat();&#xA;}&#xA;&#xA;// Run the example&#xA;async function runExample() {&#xA;  const agent = await createAgent();&#xA;  const task = await createTask(agent);&#xA;  const result = await executeTask(task);&#xA;  console.log(&#34;Task Result:&#34;, result);&#xA;  await chatWithAgent(agent);&#xA;}&#xA;&#xA;runExample().catch(console.error);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can find the full Node.js example &lt;a href=&#34;https://raw.githubusercontent.com/julep-ai/julep/dev/example.js&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;Julep is made up of the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Julep Platform&lt;/strong&gt;: The Julep platform is a cloud service that runs your workflows. It includes a language for describing workflows, a server for running those workflows, and an SDK for interacting with the platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Julep SDKs&lt;/strong&gt;: Julep SDKs are a set of libraries for building workflows. There are SDKs for Python and JavaScript, with more on the way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Julep API&lt;/strong&gt;: The Julep API is a RESTful API that you can use to interact with the Julep platform.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mental Model&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/38420b5d-9342-4c8d-bae9-b47c28ae45af&#34; height=&#34;360&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Think of Julep as a platform that combines both client-side and server-side components to help you build advanced AI agents. Here&#39;s how to visualize it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Your Application Code:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You use the Julep SDK in your application to define agents, tasks, and workflows.&lt;/li&gt; &#xA;   &lt;li&gt;The SDK provides functions and classes that make it easy to set up and manage these components.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Julep Backend Service:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The SDK communicates with the Julep backend over the network.&lt;/li&gt; &#xA;   &lt;li&gt;The backend handles execution of tasks, maintains session state, stores documents, and orchestrates workflows.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Integration with Tools and APIs:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Within your workflows, you can integrate external tools and services.&lt;/li&gt; &#xA;   &lt;li&gt;The backend facilitates these integrations, so your agents can, for example, perform web searches, access databases, or call third-party APIs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In simpler terms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Julep is a platform for building stateful AI agents.&lt;/li&gt; &#xA; &lt;li&gt;You use the SDK (like a toolkit) in your code to define what your agents do.&lt;/li&gt; &#xA; &lt;li&gt;The backend service (which you can think of as the engine) runs these definitions, manages state, and handles complexity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;p&gt;Julep is built on several key technical components that work together to create powerful AI workflows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD&#xA;    User[User] ==&amp;gt; Session[Session]&#xA;    Session --&amp;gt; Agent[Agent]&#xA;    Agent --&amp;gt; Tasks[Tasks]&#xA;    Agent --&amp;gt; LLM[Large Language Model]&#xA;    Tasks --&amp;gt; Tools[Tools]&#xA;    Agent --&amp;gt; Documents[Documents]&#xA;    Documents --&amp;gt; VectorDB[Vector Database]&#xA;    Tasks --&amp;gt; Executions[Executions]&#xA;&#xA;    classDef client fill:#9ff,stroke:#333,stroke-width:1px;&#xA;    class User client;&#xA;&#xA;    classDef core fill:#f9f,stroke:#333,stroke-width:2px;&#xA;    class Agent,Tasks,Session core;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Agents&lt;/strong&gt;: AI-powered entities backed by large language models (LLMs) that execute tasks and interact with users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt;: Entities that interact with agents through sessions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sessions&lt;/strong&gt;: Stateful interactions between agents and users, maintaining context across multiple exchanges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tasks&lt;/strong&gt;: Multi-step, programmatic workflows that agents can execute, including various types of steps like prompts, tool calls, and conditional logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Integrations that extend an agent&#39;s capabilities, including user-defined functions, system tools, or third-party API integrations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documents&lt;/strong&gt;: Text or data objects associated with agents or users, vectorized and stored for semantic search and retrieval.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Executions&lt;/strong&gt;: Instances of tasks that have been initiated with specific inputs, with their own lifecycle and state machine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a more detailed explanation of these concepts and their interactions, please refer to our &lt;a href=&#34;https://github.com/julep-ai/julep/raw/dev/docs/julep-concepts.md&#34;&gt;Concepts Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Understanding Tasks&lt;/h2&gt; &#xA;&lt;p&gt;Tasks are the core of Julep&#39;s workflow system. They allow you to define complex, multi-step AI workflows that your agents can execute. Here&#39;s a brief overview of task components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Name and Description&lt;/strong&gt;: Each task has a unique name and description for easy identification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Main Steps&lt;/strong&gt;: The core of a task, defining the sequence of actions to be performed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Optional integrations that extend the capabilities of your agent during task execution.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Types of Workflow Steps&lt;/h3&gt; &#xA;&lt;p&gt;Tasks in Julep can include various types of steps, allowing you to create complex and powerful workflows. Here&#39;s an overview of the available step types, organized by category:&lt;/p&gt; &#xA;&lt;h4&gt;Common Steps&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Prompt&lt;/strong&gt;: Send a message to the AI model and receive a response.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- prompt: &#34;Analyze the following data: {{data}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tool Call&lt;/strong&gt;: Execute an integrated tool or API.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- tool: web_search&#xA;  arguments:&#xA;    query: &#34;Latest AI developments&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Evaluate&lt;/strong&gt;: Perform calculations or manipulate data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- evaluate:&#xA;    average_score: &#34;sum(scores) / len(scores)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Wait for Input&lt;/strong&gt;: Pause workflow until input is received.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- wait_for_input:&#xA;    info:&#xA;      message: &#34;Please provide additional information.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Log&lt;/strong&gt;: Log a specified value or message.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- log: &#34;Processing completed for item {{item_id}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Key-Value Steps&lt;/h4&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Get&lt;/strong&gt;: Retrieve a value from a key-value store.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- get: &#34;user_preference&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set&lt;/strong&gt;: Assign a value to a key in a key-value store.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- set:&#xA;    user_preference: &#34;dark_mode&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Iteration Steps&lt;/h4&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Foreach&lt;/strong&gt;: Iterate over a collection and perform steps for each item.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- foreach:&#xA;    in: &#34;data_list&#34;&#xA;    do:&#xA;      - log: &#34;Processing item {{_}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Map-Reduce&lt;/strong&gt;: Map over a collection and reduce the results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- map_reduce:&#xA;    over: &#34;numbers&#34;&#xA;    map:&#xA;      - evaluate:&#xA;          squared: &#34;_ ** 2&#34;&#xA;    reduce: &#34;sum(results)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Parallel&lt;/strong&gt;: Run multiple steps in parallel.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- parallel:&#xA;    - tool: web_search&#xA;      arguments:&#xA;        query: &#34;AI news&#34;&#xA;    - tool: weather_check&#xA;      arguments:&#xA;        location: &#34;New York&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Conditional Steps&lt;/h4&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;If-Else&lt;/strong&gt;: Conditional execution of steps.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- if: &#34;score &amp;gt; 0.8&#34;&#xA;  then:&#xA;    - log: &#34;High score achieved&#34;&#xA;  else:&#xA;    - log: &#34;Score needs improvement&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Switch&lt;/strong&gt;: Execute steps based on multiple conditions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- switch:&#xA;    - case: &#34;category == &#39;A&#39;&#34;&#xA;      then:&#xA;        - log: &#34;Category A processing&#34;&#xA;    - case: &#34;category == &#39;B&#39;&#34;&#xA;      then:&#xA;        - log: &#34;Category B processing&#34;&#xA;    - case: &#34;_&#34;  # Default case&#xA;      then:&#xA;        - log: &#34;Unknown category&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Other Control Flow&lt;/h4&gt; &#xA;&lt;ol start=&#34;13&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sleep&lt;/strong&gt;: Pause the workflow for a specified duration.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- sleep:&#xA;    seconds: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Return&lt;/strong&gt;: Return a value from the workflow.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- return:&#xA;    result: &#34;Task completed successfully&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Yield&lt;/strong&gt;: Run a subworkflow and await its completion.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- yield:&#xA;    workflow: &#34;data_processing_subflow&#34;&#xA;    arguments:&#xA;      input_data: &#34;{{raw_data}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Error&lt;/strong&gt;: Handle errors by specifying an error message.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- error: &#34;Invalid input provided&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Each step type serves a specific purpose in building sophisticated AI workflows. This categorization helps in understanding the various control flows and operations available in Julep tasks.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Features&lt;/h2&gt; &#xA;&lt;p&gt;Julep offers a range of advanced features to enhance your AI workflows:&lt;/p&gt; &#xA;&lt;h3&gt;Adding Tools to Agents&lt;/h3&gt; &#xA;&lt;p&gt;Extend your agent&#39;s capabilities by integrating external tools and APIs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;client.agents.tools.create(&#xA;    agent_id=agent.id,&#xA;    name=&#34;web_search&#34;,&#xA;    description=&#34;Search the web for information.&#34;,&#xA;    integration={&#xA;        &#34;provider&#34;: &#34;brave&#34;,&#xA;        &#34;method&#34;: &#34;search&#34;,&#xA;        &#34;setup&#34;: {&#34;api_key&#34;: &#34;your_brave_api_key&#34;},&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Managing Sessions and Users&lt;/h3&gt; &#xA;&lt;p&gt;Julep provides robust session management for persistent interactions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;session = client.sessions.create(&#xA;    agent_id=agent.id,&#xA;    user_id=user.id,&#xA;    context_overflow=&#34;adaptive&#34;&#xA;)&#xA;&#xA;# Continue conversation in the same session&#xA;response = client.sessions.chat(&#xA;    session_id=session.id,&#xA;    messages=[&#xA;      {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;Follow up on the previous conversation.&#34;&#xA;      }&#xA;    ]&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Document Integration and Search&lt;/h3&gt; &#xA;&lt;p&gt;Easily manage and search through documents for your agents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Upload a document&#xA;document = client.agents.docs.create(&#xA;    title=&#34;AI advancements&#34;,&#xA;    content=&#34;AI is changing the world...&#34;,&#xA;    metadata={&#34;category&#34;: &#34;research_paper&#34;}&#xA;)&#xA;&#xA;# Search documents&#xA;results = client.agents.docs.search(&#xA;    text=&#34;AI advancements&#34;,&#xA;    metadata_filter={&#34;category&#34;: &#34;research_paper&#34;}&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced features and detailed usage, please refer to our &lt;a href=&#34;https://docs.julep.ai/advanced-features&#34;&gt;Advanced Features Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;Julep supports various integrations that extend the capabilities of your AI agents. Here&#39;s a list of available integrations and their supported arguments:&lt;/p&gt; &#xA;&lt;h3&gt;Brave Search&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  api_key: string  # The API key for Brave Search&#xA;&#xA;arguments:&#xA;  query: string  # The search query for searching with Brave&#xA;&#xA;output:&#xA;  result: string  # The result of the Brave Search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BrowserBase&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  api_key: string       # The API key for BrowserBase&#xA;  project_id: string    # The project ID for BrowserBase&#xA;  session_id: string    # (Optional) The session ID for BrowserBase&#xA;&#xA;arguments:&#xA;  urls: list[string]    # The URLs for loading with BrowserBase&#xA;&#xA;output:&#xA;  documents: list       # The documents loaded from the URLs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Email&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  host: string      # The host of the email server&#xA;  port: integer     # The port of the email server&#xA;  user: string      # The username of the email server&#xA;  password: string  # The password of the email server&#xA;&#xA;arguments:&#xA;  to: string        # The email address to send the email to&#xA;  from: string      # The email address to send the email from&#xA;  subject: string   # The subject of the email&#xA;  body: string      # The body of the email&#xA;&#xA;output:&#xA;  success: boolean  # Whether the email was sent successfully&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Spider&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  spider_api_key: string  # The API key for Spider&#xA;&#xA;arguments:&#xA;  url: string             # The URL for which to fetch data&#xA;  mode: string            # The type of crawlers (default: &#34;scrape&#34;)&#xA;  params: dict            # (Optional) The parameters for the Spider API&#xA;&#xA;output:&#xA;  documents: list         # The documents returned from the spider&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Weather&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;setup:&#xA;  openweathermap_api_key: string  # The API key for OpenWeatherMap&#xA;&#xA;arguments:&#xA;  location: string                # The location for which to fetch weather data&#xA;&#xA;output:&#xA;  result: string                  # The weather data for the specified location&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wikipedia&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;arguments:&#xA;  query: string           # The search query string&#xA;  load_max_docs: integer  # Maximum number of documents to load (default: 2)&#xA;&#xA;output:&#xA;  documents: list         # The documents returned from the Wikipedia search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These integrations can be used within your tasks to extend the capabilities of your AI agents. For more detailed information on how to use these integrations in your workflows, please refer to our &lt;a href=&#34;https://docs.julep.ai/integrations&#34;&gt;Integrations Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SDK Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julep-ai/node-sdk/raw/main/api.md&#34;&gt;Node.js SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/julep-ai/python-sdk/raw/main/api.md&#34;&gt;Python SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;p&gt;Explore our comprehensive API documentation to learn more about agents, tasks, and executions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.julep.ai/api/docs#tag/agents&#34;&gt;Agents API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.julep.ai/api/docs#tag/tasks&#34;&gt;Tasks API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api.julep.ai/api/docs#tag/executions&#34;&gt;Executions API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>