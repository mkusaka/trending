<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-22T01:41:42Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>suno-ai/bark</title>
    <updated>2023-04-22T01:41:42Z</updated>
    <id>tag:github.com,2023-04-22:/suno-ai/bark</id>
    <link href="https://github.com/suno-ai/bark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üîä Text-Prompted Generative Audio Model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üê∂ Bark&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;http://www.repostatus.org/badges/latest/active.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/OnusFM.svg?style=social&amp;amp;label=@OnusFM&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/J2B2vsjKuE?compact=true&amp;amp;style=flat&amp;amp;&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://suno-ai.notion.site/Bark-Examples-5edae8b02a604b54a42244ba45ebc2e2&#34;&gt;Examples&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/suno-ai/bark/main/model-card.md&#34;&gt;Model Card&lt;/a&gt; | &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;Playground Waitlist&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bark is a transformer-based text-to-audio model created by &lt;a href=&#34;https://suno.ai&#34;&gt;Suno&lt;/a&gt;. Bark can generate highly realistic, multilingual speech as well as other audio - including music, background noise and simple sound effects. The model can also produce nonverbal communications like laughing, sighing and crying. To support the research community, we are providing access to pretrained model checkpoints ready for inference.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5068315/230698495-cbb1ced9-c911-4c9a-941d-a1a4a1286ac6.png&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üîä Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/spaces/suno/bark&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-Open%20In%20Spaces-blue.svg?sanitize=true&#34; alt=&#34;Open in Spaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1eJfA2XUa-mXwdMy7DoYKVYHI1iTd9Vkt?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ñ Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bark import SAMPLE_RATE, generate_audio&#xA;from IPython.display import Audio&#xA;&#xA;text_prompt = &#34;&#34;&#34;&#xA;     Hello, my name is Suno. And, uh ‚Äî and I like pizza. [laughs] &#xA;     But I also have other interests such as playing tic tac toe.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;Audio(audio_array, rate=SAMPLE_RATE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230490503-417e688d-5115-4eee-9550-b46a2b465ee3.webm&#34;&gt;pizza.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To save &lt;code&gt;audio_array&lt;/code&gt; as a WAV file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from scipy.io.wavfile import write as write_wav&#xA;&#xA;write_wav(&#34;/path/to/audio.wav&#34;, SAMPLE_RATE, audio_array)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üåé Foreign Language&lt;/h3&gt; &#xA;&lt;p&gt;Bark supports various languages out-of-the-box and automatically determines language from input text. When prompted with code-switched text, Bark will attempt to employ the native accent for the respective languages. English quality is best for the time being, and we expect other languages to further improve with scaling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    Buenos d√≠as Miguel. Tu colega piensa que tu alem√°n es extremadamente malo. &#xA;    But I suppose your english isn&#39;t terrible.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684752-10baadfe-1e7c-46a2-8323-43282aef2c8c.webm&#34;&gt;miguel.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üé∂ Music&lt;/h3&gt; &#xA;&lt;p&gt;Bark can generate all types of audio, and, in principle, doesn&#39;t see a difference between speech and music. Sometimes Bark chooses to generate text as music, but you can help it out by adding music notes around your lyrics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    ‚ô™ In the jungle, the mighty jungle, the lion barks tonight ‚ô™&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684766-97f5ea23-ad99-473c-924b-66b6fab24289.webm&#34;&gt;lion.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üé§ Voice Presets and Voice/Audio Cloning&lt;/h3&gt; &#xA;&lt;p&gt;Bark has the capability to fully clone voices - including tone, pitch, emotion and prosody. The model also attempts to preserve music, ambient noise, etc. from input audio. However, to mitigate misuse of this technology, we limit the audio history prompts to a limited set of Suno-provided, fully synthetic options to choose from for each language. Specify following the pattern: &lt;code&gt;{lang_code}_speaker_{0-9}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    I have a silky smooth voice, and today I will tell you about &#xA;    the exercise regimen of the common sloth.&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt, history_prompt=&#34;en_speaker_1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684883-a344c619-a560-4ff5-8b99-b4463a34487b.webm&#34;&gt;sloth.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: since Bark recognizes languages automatically from input text, it is possible to use for example a german history prompt with english text. This usually leads to english audio with a german accent.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üë• Speaker Prompts&lt;/h3&gt; &#xA;&lt;p&gt;You can provide certain speaker prompts such as NARRATOR, MAN, WOMAN, etc. Please note that these are not always respected, especially if a conflicting audio history prompt is given.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text_prompt = &#34;&#34;&#34;&#xA;    WOMAN: I would like an oatmilk latte please.&#xA;    MAN: Wow, that&#39;s expensive!&#xA;&#34;&#34;&#34;&#xA;audio_array = generate_audio(text_prompt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/5068315/230684864-12d101a1-a726-471d-9d56-d18b108efcb8.webm&#34;&gt;latte.webm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üíª Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/suno-ai/bark.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/suno-ai/bark&#xA;cd bark &amp;amp;&amp;amp; pip install . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Hardware and Inference Speed&lt;/h2&gt; &#xA;&lt;p&gt;Bark has been tested and works on both CPU and GPU (&lt;code&gt;pytorch 2.0+&lt;/code&gt;, CUDA 11.7 and CUDA 12.0). Running Bark requires running &amp;gt;100M parameter transformer models. On modern GPUs and PyTorch nightly, Bark can generate audio in roughly realtime. On older GPUs, default colab, or CPU, inference time might be 10-100x slower.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have new hardware available or if you want to play with bigger versions of our models, you can also sign up for early access to our model playground &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Details&lt;/h2&gt; &#xA;&lt;p&gt;Similar to &lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt; and some other amazing work in the field, Bark uses GPT-style models to generate audio from scratch. Different from Vall-E, the initial text prompt is embedded into high-level semantic tokens without the use of phonemes. It can therefore generalize to arbitrary instructions beyond speech that occur in the training data, such as music lyrics, sound effects or other non-speech sounds. A subsequent second model is used to convert the generated semantic tokens into audio codec tokens to generate the full waveform. To enable the community to use Bark via public code we used the fantastic &lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec codec&lt;/a&gt; from Facebook to act as an audio representation.&lt;/p&gt; &#xA;&lt;p&gt;Below is a list of some known non-speech sounds, but we are finding more every day. Please let us know if you find patterns that work particularly well on &lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughter]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[laughs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[sighs]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[music]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[gasps]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[clears throat]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;‚Äî&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt; for hesitations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;‚ô™&lt;/code&gt; for song lyrics&lt;/li&gt; &#xA; &lt;li&gt;capitalization for emphasis of a word&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MAN/WOMAN:&lt;/code&gt; for bias towards speaker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported Languages&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;English (en)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;German (de)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Spanish (es)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;French (fr)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hindi (hi)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Italian (it)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Japanese (ja)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Korean (ko)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Polish (pl)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Portuguese (pt)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Russian (ru)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Turkish (tr)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chinese, simplified (zh)&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arabic&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bengali&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Telugu&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üôè Appreciation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/karpathy/nanoGPT&#34;&gt;nanoGPT&lt;/a&gt; for a dead-simple and blazing fast implementation of GPT-style models&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/encodec&#34;&gt;EnCodec&lt;/a&gt; for a state-of-the-art implementation of a fantastic audio codec&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucidrains/audiolm-pytorch&#34;&gt;AudioLM&lt;/a&gt; for very related training and inference code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2301.02111&#34;&gt;Vall-E&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt; and many other ground-breaking papers that enabled the development of Bark&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;¬© License&lt;/h2&gt; &#xA;&lt;p&gt;Bark is licensed under a non-commercial license: CC-BY 4.0 NC. The Suno models themselves may be used commercially. However, this version of Bark uses &lt;code&gt;EnCodec&lt;/code&gt; as a neural codec backend, which is licensed under a &lt;a href=&#34;https://github.com/facebookresearch/encodec/raw/main/LICENSE&#34;&gt;non-commercial license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please contact us at &lt;code&gt;bark@suno.ai&lt;/code&gt; if you need access to a larger version of the model and/or a version of the model you can use commercially.&lt;/p&gt; &#xA;&lt;h2&gt;üì±&amp;nbsp;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/OnusFM&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/J2B2vsjKuE&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéß&amp;nbsp;Suno Studio (Early Access)&lt;/h2&gt; &#xA;&lt;p&gt;We‚Äôre developing a playground for our models, including Bark.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested, you can sign up for early access &lt;a href=&#34;https://3os84zs17th.typeform.com/suno-studio&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;How do I specify where models are downloaded and cached?&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;XDG_CACHE_HOME&lt;/code&gt; env variable to override where models are downloaded and cached (otherwise defaults to a subdirectory of &lt;code&gt;~/.cache&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Bark&#39;s generations sometimes differ from my prompts. What&#39;s happening?&lt;/h4&gt; &#xA;&lt;p&gt;Bark is a GPT-style model. As such, it may take some creative liberties in its generations, resulting in higher-variance model outputs than traditional text-to-speech approaches.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebookresearch/dinov2</title>
    <updated>2023-04-22T01:41:42Z</updated>
    <id>tag:github.com,2023-04-22:/facebookresearch/dinov2</id>
    <link href="https://github.com/facebookresearch/dinov2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PyTorch code and models for the DINOv2 self-supervised learning method.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DINOv2: Learning Robust Visual Features without Supervision&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://ai.facebook.com/research/&#34;&gt;Meta AI Research, FAIR&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Maxime Oquab, Timoth√©e Darcet, Th√©o Moutakanni, Huy V. Vo, Marc Szafraniec, Vasil Khalidov, Patrick Labatut, Armand Joulin, Piotr Bojanowski&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://arxiv.org/abs/2304.07193&#34;&gt;&lt;code&gt;Paper&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://ai.facebook.com/blog/dino-v2-computer-vision-self-supervised-learning/&#34;&gt;&lt;code&gt;Blog&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://dinov2.metademolab.com&#34;&gt;&lt;code&gt;Demo&lt;/code&gt;&lt;/a&gt;] [&lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/dinov2/main/#citing-dinov2&#34;&gt;&lt;code&gt;BibTeX&lt;/code&gt;&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;PyTorch implementation and pretrained models for DINOv2. For details, see the paper: &lt;strong&gt;&lt;a href=&#34;https://arxiv.org/abs/2304.07193&#34;&gt;DINOv2: Learning Robust Visual Features without Supervision&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;DINOv2 models produce high-performance visual features that can be directly employed with classifiers as simple as linear layers on a variety of computer vision tasks; these visual features are robust and perform well across domains without any requirement for fine-tuning. The models were pretrained on a dataset of 142 M images without using any labels or annotations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/60359573/230078733-5faffa19-e6ce-4c55-9200-62dd76f8236a.mp4&#34;&gt;https://user-images.githubusercontent.com/60359573/230078733-5faffa19-e6ce-4c55-9200-62dd76f8236a.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA;  Visualization of the three first principal components of the patch features of all frames, mapped to RGB values. &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Pretrained models&lt;/h2&gt; &#xA;&lt;table style=&#34;margin: auto&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;# of&lt;br&gt;params&lt;/th&gt; &#xA;   &lt;th&gt;ImageNet&lt;br&gt;k-NN&lt;/th&gt; &#xA;   &lt;th&gt;ImageNet&lt;br&gt;linear&lt;/th&gt; &#xA;   &lt;th&gt;download&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-S/14 distilled&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21 M&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;79.0%&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;81.1%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vits14/dinov2_vits14_pretrain.pth&#34;&gt;backbone only&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-B/14 distilled&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86 M&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;82.1%&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;84.5%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vitb14/dinov2_vitb14_pretrain.pth&#34;&gt;backbone only&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-L/14 distilled&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;300 M&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;83.5%&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86.3%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vitl14/dinov2_vitl14_pretrain.pth&#34;&gt;backbone only&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-g/14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1,100 M&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;83.5%&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86.5%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vitg14/dinov2_vitg14_pretrain.pth&#34;&gt;backbone only&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Pretrained models via PyTorch Hub&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the instructions &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;here&lt;/a&gt; to install PyTorch (the only required dependency for loading the model). Installing PyTorch with CUDA support is strongly recommended.&lt;/p&gt; &#xA;&lt;p&gt;A corresponding &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/dinov2/main/MODEL_CARD.md&#34;&gt;model card&lt;/a&gt; is included in the repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;&#xA;dinov2_vits14 = torch.hub.load(&#39;facebookresearch/dinov2&#39;, &#39;dinov2_vits14&#39;)&#xA;dinov2_vitb14 = torch.hub.load(&#39;facebookresearch/dinov2&#39;, &#39;dinov2_vitb14&#39;)&#xA;dinov2_vitl14 = torch.hub.load(&#39;facebookresearch/dinov2&#39;, &#39;dinov2_vitl14&#39;)&#xA;dinov2_vitg14 = torch.hub.load(&#39;facebookresearch/dinov2&#39;, &#39;dinov2_vitg14&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The training and evaluation code requires PyTorch 2.0 and &lt;a href=&#34;https://github.com/facebookresearch/xformers&#34;&gt;xFormers&lt;/a&gt; 0.0.18 as well as a number of other 3rd party packages. Note that the code has only been tested with the specified versions and also expects a Linux environment. To setup all the required dependencies for training and evaluation, please follow the instructions below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html&#34;&gt;conda&lt;/a&gt;&lt;/em&gt; &lt;strong&gt;(Recommended)&lt;/strong&gt; - Clone the repository and then create and activate a &lt;code&gt;dinov2&lt;/code&gt; conda environment using the provided environment definition:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda env create -f conda.yaml&#xA;conda activate dinov2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://pip.pypa.io/en/stable/getting-started/&#34;&gt;pip&lt;/a&gt;&lt;/em&gt; - Clone the repository and then use the provided &lt;code&gt;requirements.txt&lt;/code&gt; to install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data preparation&lt;/h2&gt; &#xA;&lt;h3&gt;ImageNet-1k&lt;/h3&gt; &#xA;&lt;p&gt;The root directory of the dataset should hold the following contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/test/ILSVRC2012_test_00000001.JPEG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/test/[..]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/test/ILSVRC2012_test_00100000.JPEG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/train/n01440764/n01440764_10026.JPEG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/train/[...]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/train/n15075141/n15075141_9993.JPEG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/val/n01440764/ILSVRC2012_val_00000293.JPEG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/val/[...]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/val/n15075141/ILSVRC2012_val_00049174.JPEG&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;/labels.txt&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ImageNet-22k&lt;/h3&gt; &#xA;&lt;p&gt;Please adapt the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/dinov2/main/dinov2/data/datasets/image_net_22k.py&#34;&gt;dataset class&lt;/a&gt; to match your local setup.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; To execute the commands provided in the next sections for training and evaluation, the &lt;code&gt;dinov2&lt;/code&gt; package should be included in the Python module search path, i.e. simply prefix the command to run with &lt;code&gt;PYTHONPATH=.&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;h3&gt;Fast setup: training DINOv2 ViT-L/16 on ImageNet-1k&lt;/h3&gt; &#xA;&lt;p&gt;Run DINOv2 training on 4 A100-80GB nodes (32 GPUs) in a SLURM cluster environment with submitit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python dinov2/run/train/train.py \&#xA;    --nodes 4 \&#xA;    --config-file dinov2/configs/train/vitl16_short.yaml \&#xA;    --output-dir &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt; \&#xA;    train.dataset_path=ImageNet:split=TRAIN:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Training time is approximately 1 day and the resulting checkpoint should reach 81.6% on k-NN eval and 82.9% on linear eval.&lt;/p&gt; &#xA;&lt;p&gt;The training code saves the weights of the teacher in the &lt;code&gt;eval&lt;/code&gt; folder every 12500 iterations for evaluation.&lt;/p&gt; &#xA;&lt;h3&gt;Long setup: training DINOv2 ViT-L/14 on ImageNet-22k&lt;/h3&gt; &#xA;&lt;p&gt;Run DINOv2 training on 12 A100-80GB nodes (96 GPUs) in a SLURM cluster environment with submitit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python dinov2/run/train/train.py \&#xA;    --nodes 12 \&#xA;    --config-file dinov2/configs/train/vitl14.yaml \&#xA;    --output-dir &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt; \&#xA;    train.dataset_path=ImageNet22k:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Training time is approximately 3.3 days and the resulting checkpoint should reach 82.0% on k-NN eval and 84.5% on linear eval.&lt;/p&gt; &#xA;&lt;p&gt;The training code saves the weights of the teacher in the &lt;code&gt;eval&lt;/code&gt; folder every 12500 iterations for evaluation.&lt;/p&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;The training code regularly saves the teacher weights. In order to evaluate the model, run the following evaluation on a single node:&lt;/p&gt; &#xA;&lt;h3&gt;k-NN classification on ImageNet-1k&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python dinov2/run/eval/knn.py \&#xA;    --config-file &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/config.yaml \&#xA;    --pretrained-weights &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/eval/training_24999/teacher_checkpoint.pth \&#xA;    --output-dir &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/eval/training_24999/knn \&#xA;    --train-dataset ImageNet:split=TRAIN:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt; \&#xA;    --val-dataset ImageNet:split=VAL:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logistic regression classification on ImageNet-1k&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python dinov2/run/eval/log_regression.py \&#xA;    --config-file &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/config.yaml \&#xA;    --pretrained-weights &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/eval/training_24999/teacher_checkpoint.pth \&#xA;    --output-dir &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/eval/training_24999/logreg \&#xA;    --train-dataset ImageNet:split=TRAIN:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt; \&#xA;    --val-dataset ImageNet:split=VAL:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linear classification with data augmentation on ImageNet-1k&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python dinov2/run/eval/linear.py \&#xA;    --config-file &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/config.yaml \&#xA;    --pretrained-weights &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/eval/training_24999/teacher_checkpoint.pth \&#xA;    --output-dir &amp;lt;PATH/TO/OUTPUT/DIR&amp;gt;/eval/training_24999/linear \&#xA;    --train-dataset ImageNet:split=TRAIN:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt; \&#xA;    --val-dataset ImageNet:split=VAL:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We release the weights from evaluating the different models:&lt;/p&gt; &#xA;&lt;table style=&#34;margin: auto&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;ImageNet&lt;br&gt;top-1&lt;/th&gt; &#xA;   &lt;th&gt;linear evaluation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-S/14 distilled&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;81.1%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vits14/dinov2_vits14_linear_head.pth&#34;&gt;linear head weights&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-B/14 distilled&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;84.5%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vitb14/dinov2_vitb14_linear_head.pth&#34;&gt;linear head weights&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-L/14 distilled&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86.3%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vitl14/dinov2_vitl14_linear_head.pth&#34;&gt;linear head weights&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ViT-g/14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;86.5%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.fbaipublicfiles.com/dinov2/dinov2_vitg14/dinov2_vitg14_linear_head.pth&#34;&gt;linear head weights&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;The performance of the provided pretrained model weights can be evaluated as follows on ImageNet-1k:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python dinov2/run/eval/linear.py \&#xA;    --config-file dinov2/configs/eval/vitg14_pretrain.yaml \&#xA;    --pretrained-weights https://dl.fbaipublicfiles.com/dinov2/dinov2_vitg14/dinov2_vitg14_pretrain.pth \&#xA;    --train-dataset ImageNet:split=TRAIN:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt; \&#xA;    --val-dataset ImageNet:split=VAL:root=&amp;lt;PATH/TO/DATASET&amp;gt;:extra=&amp;lt;PATH/TO/DATASET&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;DINOv2 code and model weights are released under the CC-BY-NC 4.0 license. See &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/dinov2/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for additional details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/dinov2/main/CONTRIBUTING.md&#34;&gt;contributing&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/facebookresearch/dinov2/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citing DINOv2&lt;/h2&gt; &#xA;&lt;p&gt;If you find this repository useful, please consider giving a star &lt;span&gt;‚≠ê&lt;/span&gt; and citation &lt;span&gt;ü¶ñ&lt;/span&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{oquab2023dinov2,&#xA;  title={DINOv2: Learning Robust Visual Features without Supervision},&#xA;  author={Oquab, Maxime and Darcet, Timoth√©e and Moutakanni, Theo and Vo, Huy V. and Szafraniec, Marc and Khalidov, Vasil and Fernandez, Pierre and Haziza, Daniel and Massa, Francisco and El-Nouby, Alaaeldin and Howes, Russell and Huang, Po-Yao and Xu, Hu and Sharma, Vasu and Li, Shang-Wen and Galuba, Wojciech and Rabbat, Mike and Assran, Mido and Ballas, Nicolas and Synnaeve, Gabriel and Misra, Ishan and Jegou, Herve and Mairal, Julien and Labatut, Patrick and Joulin, Armand and Bojanowski, Piotr},&#xA;  journal={arXiv:2304.07193},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pyscript/pyscript</title>
    <updated>2023-04-22T01:41:42Z</updated>
    <id>tag:github.com,2023-04-22:/pyscript/pyscript</id>
    <link href="https://github.com/pyscript/pyscript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home Page: https://pyscript.net Examples: https://pyscript.net/examples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyScript&lt;/h1&gt; &#xA;&lt;h2&gt;What is PyScript&lt;/h2&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;p&gt;PyScript is a framework that allows users to create rich Python applications in the browser using HTML&#39;s interface and the power of &lt;a href=&#34;https://pyodide.org/en/stable/&#34;&gt;Pyodide&lt;/a&gt;, &lt;a href=&#34;https://webassembly.org/&#34;&gt;WASM&lt;/a&gt;, and modern web technologies.&lt;/p&gt; &#xA;&lt;p&gt;To get started see the &lt;a href=&#34;https://raw.githubusercontent.com/pyscript/pyscript/main/docs/tutorials/getting-started.md&#34;&gt;getting started tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For examples see &lt;a href=&#34;https://raw.githubusercontent.com/pyscript/pyscript/main/examples&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Longer Version&lt;/h3&gt; &#xA;&lt;p&gt;PyScript is a meta project that aims to combine multiple open technologies into a framework that allows users to create sophisticated browser applications with Python. It integrates seamlessly with the way the DOM works in the browser and allows users to add Python logic in a way that feels natural both to web and Python developers.&lt;/p&gt; &#xA;&lt;h2&gt;Try PyScript&lt;/h2&gt; &#xA;&lt;p&gt;To try PyScript, import the appropriate pyscript files into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of your html page with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;head&amp;gt;&#xA;    &amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://pyscript.net/latest/pyscript.css&#34; /&amp;gt;&#xA;    &amp;lt;script defer src=&#34;https://pyscript.net/latest/pyscript.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then use PyScript components in your html page. PyScript currently implements the following elements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;py-script&amp;gt;&lt;/code&gt;: can be used to define python code that is executable within the web page. The element itself is not rendered to the page and is only used to add logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;py-repl&amp;gt;&lt;/code&gt;: creates a REPL component that is rendered to the page as a code editor and allows users to write executable code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/pyscript/pyscript/main/examples&#34;&gt;the examples directory&lt;/a&gt; folder for more examples on how to use it, all you need to do is open them in Chrome.&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/pyscript/pyscript/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn about our development process, reporting bugs and improvements, creating issues and asking questions.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://docs.pyscript.net/latest/development/developing.html&#34;&gt;developing process&lt;/a&gt; documentation for more information on how to setup your development environment.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.pyscript.net&#34;&gt;Official docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://community.anaconda.cloud/c/tech-topics/pyscript&#34;&gt;Discussion board&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pyscript.net/&#34;&gt;Home Page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://engineering.anaconda.com/2022/04/welcome-pyscript.html&#34;&gt;Blog Post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/BYB2kvyFwm&#34;&gt;Discord Channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is an extremely experimental project, so expect things to break!&lt;/li&gt; &#xA; &lt;li&gt;PyScript has been only tested on Chrome at the moment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Governance&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/pyscript/governance&#34;&gt;PyScript organization governance&lt;/a&gt; is documented in a separate repository.&lt;/p&gt;</summary>
  </entry>
</feed>