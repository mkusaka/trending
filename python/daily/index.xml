<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-03T01:43:15Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gventuri/pandas-ai</title>
    <updated>2023-05-03T01:43:15Z</updated>
    <id>tag:github.com,2023-05-03:/gventuri/pandas-ai</id>
    <link href="https://github.com/gventuri/pandas-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pandas AI is a Python library that integrates generative artificial intelligence capabilities into Pandas, making dataframes conversational&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PandasAI üêº&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gventuri/pandas-ai/actions/workflows/ci.yml/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/gventuri/pandas-ai/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;lint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/kF7FqH2FwS&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/kF7FqH2FwS?style=flat&amp;amp;compact=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/pandasai&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/pandasai/month&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1rKz7TudOeCeKGHekw7JFNL4sagN9hon-?usp=sharing&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pandas AI is a Python library that adds generative artificial intelligence capabilities to Pandas, the popular data analysis and manipulation tool. It is designed to be used in conjunction with Pandas, and is not a replacement for it.&lt;/p&gt; &#xA;&lt;!-- Add images/pandas-ai.png --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gventuri/pandas-ai/main/images/pandas-ai.png?raw=true&#34; alt=&#34;PandasAI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Try out PandasAI in your browser:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1rKz7TudOeCeKGHekw7JFNL4sagN9hon-?usp=sharing&#34;&gt;&lt;img src=&#34;https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667&#34; alt=&#34;Open in Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pandasai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;PandasAI is designed to be used in conjunction with Pandas. It makes Pandas conversational, allowing you to ask questions about your data and get answers back, in the form of Pandas DataFrames. For example, you can ask PandasAI to find all the rows in a DataFrame where the value of a column is greater than 5, and it will return a DataFrame containing only those rows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd&#xA;from pandasai import PandasAI&#xA;&#xA;# Sample DataFrame&#xA;df = pd.DataFrame({&#xA;    &#34;country&#34;: [&#34;United States&#34;, &#34;United Kingdom&#34;, &#34;France&#34;, &#34;Germany&#34;, &#34;Italy&#34;, &#34;Spain&#34;, &#34;Canada&#34;, &#34;Australia&#34;, &#34;Japan&#34;, &#34;China&#34;],&#xA;    &#34;gdp&#34;: [21400000, 2940000, 2830000, 3870000, 2160000, 1350000, 1780000, 1320000, 516000, 14000000],&#xA;    &#34;happiness_index&#34;: [7.3, 7.2, 6.5, 7.0, 6.0, 6.3, 7.3, 7.3, 5.9, 5.0]&#xA;})&#xA;&#xA;# Instantiate a LLM&#xA;from pandasai.llm.openai import OpenAI&#xA;llm = OpenAI()&#xA;&#xA;pandas_ai = PandasAI(llm)&#xA;pandas_ai.run(df, prompt=&#39;Which are the 5 happiest countries?&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code will return the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0     United States&#xA;6            Canada&#xA;7         Australia&#xA;1    United Kingdom&#xA;3           Germany&#xA;Name: country, dtype: object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can also ask PandasAI to perform more complex queries. For example, you can ask PandasAI to find the sum of the GDPs of the 2 unhappiest countries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pandas_ai.run(df, prompt=&#39;What is the sum of the GDPs of the 2 unhappiest countries?&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above code will return the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;14516000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also ask PandasAI to draw a graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pandas_ai.run(&#xA;    df,&#xA;    &#34;Plot the histogram of countries showing for each the gpd, using different colors for each bar&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gventuri/pandas-ai/main/images/histogram-chart.png?raw=true&#34; alt=&#34;Chart&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find more examples in the &lt;a href=&#34;https://raw.githubusercontent.com/gventuri/pandas-ai/main/examples&#34;&gt;examples&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;In order to set the API key for the LLM (Hugging Face Hub, OpenAI), you need to set the appropriate environment variables. You can do this by copying the &lt;code&gt;.env.example&lt;/code&gt; file to &lt;code&gt;.env&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, edit the &lt;code&gt;.env&lt;/code&gt; file and set the appropriate values.&lt;/p&gt; &#xA;&lt;p&gt;As an alternative, you can also pass the environment variables directly to the constructor of the LLM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# OpenAI&#xA;llm = OpenAI(api_token=&#34;YOUR_OPENAI_API_KEY&#34;)&#xA;&#xA;# OpenAssistant&#xA;llm = OpenAssistant(api_token=&#34;YOUR_HF_API_KEY&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;PandasAI is licensed under the MIT License. See the LICENSE file for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please check out the todos below, and feel free to open a pull request. For more information, please see the &lt;a href=&#34;https://raw.githubusercontent.com/gventuri/pandas-ai/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Todo&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for more LLMs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make PandasAI available from a CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create a web interface for PandasAI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add unit tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add contributing guidelines&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add CI&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add support for conversational responses&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mlc-ai/web-llm</title>
    <updated>2023-05-03T01:43:15Z</updated>
    <id>tag:github.com,2023-05-03:/mlc-ai/web-llm</id>
    <link href="https://github.com/mlc-ai/web-llm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bringing large-language models and chat to web browsers. Everything runs inside the browser with no server support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Web LLM&lt;/h1&gt; &#xA;&lt;p&gt;This project brings language model chats directly onto web browsers. &lt;strong&gt;Everything runs inside the browser with no server support and accelerated with WebGPU.&lt;/strong&gt; We can bring a lot of fun opportunities to build AI assistants for everyone and enable privacy while enjoying GPU acceleration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://mlc.ai/web-llm/&#34;&gt;Check out our demo webpage to try out!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You might also be interested in &lt;a href=&#34;https://github.com/mlc-ai/mlc-llm&#34;&gt;MLC LLM&lt;/a&gt;, our companion project that runs LLMs natively on iphone and other native local environments.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/fig/demo.gif&#34;&gt; &#xA;&lt;p&gt;We have been seeing amazing progress in generative AI and LLM recently. Thanks to the open-source efforts like LLaMA, Alpaca, Vicuna, and Dolly, we can now see an exciting future of building our own open-source language models and personal AI assistant.&lt;/p&gt; &#xA;&lt;p&gt;These models are usually big and compute-heavy. To build a chat service, we will need a large cluster to run an inference server, while clients send requests to servers and retrieve the inference output. We also usually have to run on a specific type of GPUs where popular deep-learning frameworks are readily available.&lt;/p&gt; &#xA;&lt;p&gt;This project is our step to bring more diversity to the ecosystem. Specifically, can we simply bake LLMs directly into the client side and directly run them inside a browser? If that can be realized, we could offer support for client personal AI models with the benefit of cost reduction, enhancement for personalization, and privacy protection. The client side is getting pretty powerful.&lt;/p&gt; &#xA;&lt;p&gt;Won‚Äôt it be even more amazing if we can simply open up a browser and directly bring AI natively to your browser tab? There is some level of readiness in the ecosystem. WebGPU has just shipped and enables native GPU executions on the browser.&lt;/p&gt; &#xA;&lt;p&gt;Still, there are big hurdles to cross, to name a few:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We need to bring the models somewhere without the relevant GPU-accelerated Python frameworks.&lt;/li&gt; &#xA; &lt;li&gt;Most of the AI frameworks rely heavily on optimized computed libraries that are maintained by hardware vendors. We need to start from scratch.&lt;/li&gt; &#xA; &lt;li&gt;Careful planning of memory usage, and aggressive compression of weights so that we can fit the models into memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also do not want to only do it for just one model. Instead, we would like to present a repeatable and hackable workflow that enables anyone to easily develop and optimize these models in a productive Python-first approach, and deploy them universally, including on the web.&lt;/p&gt; &#xA;&lt;p&gt;Besides supporting WebGPU, this project also provides the harness for other kinds of GPU backends that TVM supports (such as CUDA, OpenCL, and Vulkan) and really enables accessible deployment of LLM models.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for local deployment&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install TVM Unity. Open &lt;a href=&#34;https://mlc.ai/wheels&#34;&gt;mlc.ai wheels&lt;/a&gt; for more version.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install all the prerequisite for web deployment:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://emscripten.org&#34;&gt;emscripten&lt;/a&gt;. It is an LLVM-based compiler which compiles C/C++ source code to WebAssembly. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Follow the &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html#installation-instructions-using-the-emsdk-recommended&#34;&gt;installation instruction&lt;/a&gt; to install the latest emsdk.&lt;/li&gt; &#xA;     &lt;li&gt;Source &lt;code&gt;emsdk_env.sh&lt;/code&gt; by &lt;code&gt;source path/to/emsdk_env.sh&lt;/code&gt;, so that &lt;code&gt;emcc&lt;/code&gt; is reachable from PATH and the command &lt;code&gt;emcc&lt;/code&gt; works.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;Rust&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://rustwasm.github.io/wasm-pack/installer/&#34;&gt;&lt;code&gt;wasm-pack&lt;/code&gt;&lt;/a&gt;. It helps build Rust-generated WebAssembly, which used for tokenizer in our case here.&lt;/li&gt; &#xA;   &lt;li&gt;Install jekyll by following the &lt;a href=&#34;https://jekyllrb.com/docs/installation/&#34;&gt;official guides&lt;/a&gt;. It is the package we use for website.&lt;/li&gt; &#xA;   &lt;li&gt;Install jekyll-remote-theme by command. Try &lt;a href=&#34;https://gems.ruby-china.com/&#34;&gt;gem mirror&lt;/a&gt; if install blocked. &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;gem install jekyll-remote-theme&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Install &lt;a href=&#34;https://www.google.com/chrome/canary/&#34;&gt;Chrome Canary&lt;/a&gt;. It is a developer version of Chrome that enables the use of WebGPU.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;We can verify the success installation by trying out &lt;code&gt;emcc&lt;/code&gt;, &lt;code&gt;jekyll&lt;/code&gt; and &lt;code&gt;wasm-pack&lt;/code&gt; in terminal respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import, optimize and build the LLM model:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Get Model Weight&lt;/p&gt; &lt;p&gt;Currently we support LLaMA and Vicuna.&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Get the original LLaMA weights in the huggingface format by following the instructions &lt;a href=&#34;https://huggingface.co/docs/transformers/main/model_doc/llama&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Use instructions &lt;a href=&#34;https://github.com/lm-sys/FastChat#vicuna-weights&#34;&gt;here&lt;/a&gt; to get vicuna weights.&lt;/li&gt; &#xA;     &lt;li&gt;Create a soft link to the model path under dist/models &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;mkdir -p dist/models&#xA;ln -s your_model_path dist/models/model_name&#xA;&#xA;# For example:&#xA;# ln -s path/to/vicuna-7b-v1 dist/models/vicuna-7b-v1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Optimize and build model to webgpu backend and export the executable to disk in the WebAssembly file format.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 build.py --target webgpu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default &lt;code&gt;build.py&lt;/code&gt; takes &lt;code&gt;vicuna-7b-v1&lt;/code&gt; as model name. You can also specify model name as&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 build.py --target webgpu --model llama-7b&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: build.py can be run on MacOS with 32GB memory and other OS with at least 50GB CPU memory. We are currently optimizing the memory usage to enable more people to try out locally.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy the model on web with WebGPU runtime&lt;/p&gt; &lt;p&gt;Prepare all the necessary dependencies for web build:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./scripts/prep_deps.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The last thing to do is setting up the site with&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./scripts/local_deploy_site.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With the site set up, you can go to &lt;code&gt;localhost:8888/web-llm/&lt;/code&gt; in Chrome Canary to try out the demo on your local machine. Remember: you will need 6.4G GPU memory to run the demo. Don‚Äôt forget to use&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary --enable-dawn-features=disable_robustness&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to launch Chrome Canary to turn off the robustness check from Chrome.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How&lt;/h2&gt; &#xA;&lt;p&gt;The key technology here is machine learning compilation (MLC). Our solution builds on the shoulders of the open source ecosystem, including Hugging Face, model variants from LLaMA and Vicuna, wasm and WebGPU. The main flow builds on Apache TVM Unity, an exciting ongoing development in the &lt;a href=&#34;https://github.com/apache/tvm/&#34;&gt;Apache TVM Community&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We bake a language model&#39;s IRModule in TVM with native dynamic shape support, avoiding the need of padding to max length and reducing both computation amount and memory usage.&lt;/li&gt; &#xA; &lt;li&gt;Each function in TVM‚Äôs IRModule can be further transformed and generate runnable code that can be deployed universally on any environment that is supported by minimum tvm runtime (JavaScript being one of them).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2207.04296&#34;&gt;TensorIR&lt;/a&gt; is the key technique used to generate optimized programs. We provide productive solutions by quickly transforming TensorIR programs based on the combination of expert knowledge and automated scheduler.&lt;/li&gt; &#xA; &lt;li&gt;Heuristics are used when optimizing light-weight operators in order to reduce the engineering pressure.&lt;/li&gt; &#xA; &lt;li&gt;We utilize int4 quantization techniques to compress the model weights so that they can fit into memory.&lt;/li&gt; &#xA; &lt;li&gt;We build static memory planning optimizations to reuse memory across multiple layers.&lt;/li&gt; &#xA; &lt;li&gt;We use &lt;a href=&#34;https://emscripten.org/&#34;&gt;Emscripten&lt;/a&gt; and TypeScript to build a TVM web runtime that can deploy generated modules.&lt;/li&gt; &#xA; &lt;li&gt;We also leveraged a wasm port of SentencePiece tokenizer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/fig/web-llm.svg?sanitize=true&#34; alt=&#34;web-llm&#34;&gt; &#xA;&lt;p&gt;All parts of this workflow are done in Python, with the exception of course, of the last part that builds a 600 loc JavaScript app that connects things together. This is also a fun process of interactive development, bringing new models.&lt;/p&gt; &#xA;&lt;p&gt;All these are made possible by the open-source ecosystem that we leverage. Specifically, we make heavy use of &lt;a href=&#34;https://discuss.tvm.apache.org/t/establish-tvm-unity-connection-a-technical-strategy/13344&#34;&gt;TVM unity&lt;/a&gt;, an exciting latest development in the TVM project that enables such Python-first interactive MLC development experiences that allows us to easily compose new optimizations, all in Python, and incrementally bring our app to the web.&lt;/p&gt; &#xA;&lt;p&gt;TVM unity also provides an easy way to compose new solutions in the ecosystem. We will continue to bring further optimizations such as fused quantization kernels, and bring them to more platforms.&lt;/p&gt; &#xA;&lt;p&gt;One key characteristic of LLM models is the dynamic nature of the model. As the decoding and encoding process depends on computations that grow with the size of tokens, we leverage the first-class dynamic shape support in TVM unity that represents sequence dimensions through symbolic integers. This allows us to plan ahead to statically allocate all the memory needed for the sequence window of interest without padding.&lt;/p&gt; &#xA;&lt;p&gt;We also leveraged the integration of tensor expressions to quickly express partial-tensor computations such as rotary embedding directly without materializing them into full-tensor matrix computations.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison to Native GPU Runtime, Limitations and Opportunities&lt;/h2&gt; &#xA;&lt;p&gt;Besides the WebGPU runtime, we also provide options for native deployment with local GPU runtime. So they can be used both as a tool to deploy on native environment as well as a reference point to compare native GPU driver performance and WebGPU.&lt;/p&gt; &#xA;&lt;p&gt;WebGPU works by translating WGSL shaders to native shaders. We observed that there are opportunities to reach zero gap between the WebGPU runtime and native environment.&lt;/p&gt; &#xA;&lt;p&gt;Some of the current gaps are caused by Chrome&#39;s WebGPU implementation inserts bound clips for all array index access, such that &lt;code&gt;a[i]&lt;/code&gt; becomes &lt;code&gt;a[min(i, a.size)]&lt;/code&gt;. This can be optimized out as the WebGPU support continues to mature.&lt;/p&gt; &#xA;&lt;p&gt;You can get around this by using a special flag to launch Chrome (thanks to Dawn developers for providing the pointers), by exiting Chrome completely, then in command line, type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/path/to/Chrome --enable-dawn-features=disable_robustness&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will find that the execution speed is as fast as native GPU environment. We anticipate this problem will get resolved as WebGPU matures. WebGPU just shipped and we are excited to see opportunities it can unblock. There are also a lot of exciting upcoming features we can leverage to further improve things such as fp16 extensions.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mlc.ai/web-llm/&#34;&gt;Demo page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you want to run LLM on native runtime, check out &lt;a href=&#34;https://github.com/mlc-ai/mlc-llm&#34;&gt;MLC-LLM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You might also be interested in &lt;a href=&#34;https://github.com/mlc-ai/web-stable-diffusion/&#34;&gt;Web Stable Diffusion&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;This project is made possible thanks to collaboration with&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.scs.cmu.edu&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/logo/cmuscs.png&#34; alt=&#34;CMU School of Computer Science&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://catalyst.cs.cmu.edu&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/logo/catalyst.svg?sanitize=true&#34; alt=&#34;Catalyst&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://mlc.ai&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/logo/mlc-logo-with-text-landscape.svg?sanitize=true&#34; alt=&#34;MLC&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://octoml.ai&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/logo/octoml.png&#34; alt=&#34;OctoML&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://www.cs.washington.edu/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/logo/uw.jpg&#34; alt=&#34;UW&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://en.sjtu.edu.cn/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mlc-ai/web-llm/main/site/img/logo/sjtu.png&#34; alt=&#34;SJTU&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This project is only possible thanks to the shoulders open-source ecosystems that we stand on. We want to thank the Apache TVM community and developers of the TVM Unity effort. The open-source ML community members made these models publicly available. PyTorch and Hugging Face communities that make these models accessible. We would like to thank the teams behind vicuna, SentencePiece, LLaMA, Alpaca. We also would like to thank the WebAssembly, Emscripten, and WebGPU communities. Finally, thanks to Dawn and WebGPU developers.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>irgolic/AutoPR</title>
    <updated>2023-05-03T01:43:15Z</updated>
    <id>tag:github.com,2023-05-03:/irgolic/AutoPR</id>
    <link href="https://github.com/irgolic/AutoPR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fix issues with AI-generated pull requests, powered by ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;üöÄ AutoPR üöÄ&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/ykk7Znt3K6&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&amp;amp;color=purple&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;table align=&#34;center&#34;&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td&gt; &#xA;     &lt;video src=&#34;https://user-images.githubusercontent.com/24586651/235325137-b4283565-f759-48f8-9e8b-39df144e0eb7.mov&#34;&gt; &#xA;     &lt;/video&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA; &lt;p&gt;AutoPR autonomously writes pull requests in response to issues with ChatGPT.&lt;br&gt; Built with &lt;a href=&#34;https://github.com/ShreyaR/guardrails&#34;&gt;Guardrails&lt;/a&gt; and &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;Langchain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üí™ How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;Triggered by adding a label containing &lt;code&gt;AutoPR&lt;/code&gt; to an issue, AutoPR will:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Plan a fix&lt;/li&gt; &#xA; &lt;li&gt;Write the code&lt;/li&gt; &#xA; &lt;li&gt;Push a branch&lt;/li&gt; &#xA; &lt;li&gt;Open a pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üìç Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically write pull requests based on labeled issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Autonomously generate code through iterative and adaptive planning&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Vector search through repository contents (&lt;a href=&#34;https://github.com/irgolic/AutoPR/issues/55&#34;&gt;https://github.com/irgolic/AutoPR/issues/55&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improving codegen performance (&lt;a href=&#34;https://github.com/irgolic/AutoPR/issues/56&#34;&gt;https://github.com/irgolic/AutoPR/issues/56&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Iterate with PR comments and code review (&lt;a href=&#34;https://github.com/irgolic/AutoPR/issues/31&#34;&gt;https://github.com/irgolic/AutoPR/issues/31&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ChatGPT plugin that writes an issue during the course of a conversation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; User-configurable tasks like &#34;add tests&#34;, &#34;add docs&#34;, &#34;add type hints&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; User-configurable semantic CI checks like &#34;if file x changes, ensure file y reflects the change&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Autonomous PR reviewer who pushes to your branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üíé Examples&lt;/h2&gt; &#xA;&lt;p&gt;Well-written issues often lead to better results.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irgolic/AutoPR-template/pull/21&#34;&gt;Create a dice rolling bot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irgolic/AutoPR-template/pull/13&#34;&gt;Create a &#39;Tech Jargon Generator&#39;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irgolic/AutoPR-template/pull/15&#34;&gt;Create a user-friendly weather app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irgolic/AutoPR-template/pull/11&#34;&gt;Write three programming interview challenges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irgolic/AutoPR/pull/44&#34;&gt;Replace &lt;code&gt;GPT2FastTokenizer&lt;/code&gt; with &lt;code&gt;tiktoken&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§û Limitations&lt;/h2&gt; &#xA;&lt;p&gt;This GitHub Action is &lt;strong&gt;in development&lt;/strong&gt;, and in &lt;strong&gt;alpha release&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It still:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irgolic/AutoPR-template/pull/19/files#diff-830c8547feabc5e216043b6af2f7784ee819537d88219e607543a899db1853c0R17&#34;&gt;Incorrectly references&lt;/a&gt; code in other files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/irgolic/AutoPR/pull/44/files#diff-8427d3dc331c8d06d0eca82385f08cb9878240db18a867f463ae90afab6ded43R135&#34;&gt;Duplicates lines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Calls &lt;a href=&#34;https://github.com/irgolic/AutoPR-template/pull/9/files#diff-01de17011a56527deac53327fec7f83279509157a1e806a2cec5c2215a953e97R63&#34;&gt;functions that don&#39;t exist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Only works on GitHub (see &lt;a href=&#34;https://github.com/irgolic/AutoPR/issues/46&#34;&gt;#46&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî® Usage&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/irgolic/AutoPR/main/USAGE.md&#34;&gt;USAGE.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;üìù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/irgolic/AutoPR/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>