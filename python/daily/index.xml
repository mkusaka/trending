<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-17T01:33:03Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cardwing/Codes-for-PVKD</title>
    <updated>2022-07-17T01:33:03Z</updated>
    <id>tag:github.com,2022-07-17:/cardwing/Codes-for-PVKD</id>
    <link href="https://github.com/cardwing/Codes-for-PVKD" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Point-to-Voxel Knowledge Distillation for LiDAR Semantic Segmentation (CVPR 2022)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Point-to-Voxel Knowledge Distillation for LiDAR Semantic Segmentation (CVPR 2022)&lt;/p&gt; &#xA;&lt;p&gt;Our model achieves state-of-the-art performance on three benchmarks, i.e., ranks &lt;strong&gt;1st&lt;/strong&gt; in &lt;a href=&#34;https://waymo.com/open/challenges/2022/3d-semantic-segmentation/&#34;&gt;Waymo 3D Semantic Segmentation Challenge&lt;/a&gt; (the &#34;Cylinder3D&#34; and &#34;Offboard_SemSeg&#34; entities), ranks &lt;strong&gt;1st&lt;/strong&gt; in &lt;a href=&#34;https://competitions.codalab.org/competitions/20331#results&#34;&gt;SemanticKITTI LiDAR Semantic Segmentation Challenge&lt;/a&gt; (single-scan, the &#34;Point-Voxel-KD&#34; entity), ranks &lt;strong&gt;2nd&lt;/strong&gt; in &lt;a href=&#34;https://competitions.codalab.org/competitions/20331#results&#34;&gt;SemanticKITTI LiDAR Semantic Segmentation Challenge&lt;/a&gt; (multi-scan, the &#34;PVKD&#34; entity). Our trained model has been used in one NeurIPS 2022 submission! Do not hesitate to use our trained models!&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;2022-7&lt;/strong&gt; We provide a trained model of &lt;a href=&#34;https://github.com/huixiancheng/CENet&#34;&gt;CENet&lt;/a&gt;, a range-image-based LiDAR segmentation method. The reproduced performance is much higher than the reported value!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;2022-6&lt;/strong&gt; Our method ranks &lt;strong&gt;1st&lt;/strong&gt; in &lt;a href=&#34;https://competitions.codalab.org/competitions/20331#results&#34;&gt;SemanticKITTI LiDAR Semantic Segmentation Challenge&lt;/a&gt; (single-scan, the &#34;Point-Voxel-KD&#34; entity)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cardwing/Codes-for-PVKD/main/img/semantickitti_single_scan.PNG&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2022-5&lt;/strong&gt; Our method ranks &lt;strong&gt;1st&lt;/strong&gt; in &lt;a href=&#34;https://waymo.com/open/challenges/2022/3d-semantic-segmentation/&#34;&gt;Waymo 3D Semantic Segmentation Challenge&lt;/a&gt; (the &#34;Cylinder3D&#34; and &#34;Offboard_SemSeg&#34; entities)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/cardwing/Codes-for-PVKD/main/img/waymo.PNG&#34; width=&#34;30%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PyTorch &amp;gt;= 1.2&lt;/li&gt; &#xA; &lt;li&gt;yaml&lt;/li&gt; &#xA; &lt;li&gt;tqdm&lt;/li&gt; &#xA; &lt;li&gt;numba&lt;/li&gt; &#xA; &lt;li&gt;Cython&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rusty1s/pytorch_scatter&#34;&gt;torch-scatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nutonomy/nuscenes-devkit&#34;&gt;nuScenes-devkit&lt;/a&gt; (optional for nuScenes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/traveller59/spconv&#34;&gt;spconv&lt;/a&gt; (tested with spconv==1.2.1 and cuda==10.2)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Preparation&lt;/h2&gt; &#xA;&lt;h3&gt;SemanticKITTI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./&#xA;├── &#xA;├── ...&#xA;└── path_to_data_shown_in_config/&#xA;    ├──sequences&#xA;        ├── 00/           &#xA;        │   ├── velodyne/&#x9;&#xA;        |   |&#x9;├── 000000.bin&#xA;        |   |&#x9;├── 000001.bin&#xA;        |   |&#x9;└── ...&#xA;        │   └── labels/ &#xA;        |       ├── 000000.label&#xA;        |       ├── 000001.label&#xA;        |       └── ...&#xA;        ├── 08/ # for validation&#xA;        ├── 11/ # 11-21 for testing&#xA;        └── 21/&#xA;&#x9;    └── ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nuScenes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./&#xA;├── &#xA;├── ...&#xA;└── path_to_data_shown_in_config/&#xA;&#x9;&#x9;├──v1.0-trainval&#xA;&#x9;&#x9;├──v1.0-test&#xA;&#x9;&#x9;├──samples&#xA;&#x9;&#x9;├──sweeps&#xA;&#x9;&#x9;├──maps&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Waymo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./&#xA;├── &#xA;├── ...&#xA;└── path_to_data_shown_in_config/&#xA;&#x9;&#x9;├──first_return&#xA;&#x9;&#x9;├──second_return&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;We take evaluation on the SemanticKITTI test set (single-scan) as example.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the &lt;a href=&#34;https://drive.google.com/drive/folders/1LyWhVCqMzSVDe44c8ARDp8b94w1ct-tR?usp=sharing&#34;&gt;pre-trained models&lt;/a&gt; and put them in &lt;code&gt;./model_load_dir&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate predictions on the SemanticKITTI test set.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0 python -u test_cyl_sem_tta.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We perform test-time augmentation to boost the performance. The model predictions will be saved in &lt;code&gt;./out_cyl/test&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Convert label number back to the original dataset format before submitting:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python remap_semantic_labels.py -p out_cyl/test -s test --inverse&#xA;cd out_cyl/test&#xA;zip -r out_cyl.zip sequences/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Upload out_cyl.zip to the &lt;a href=&#34;https://competitions.codalab.org/competitions/20331#participate&#34;&gt;SemanticKITTI online server&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Train&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;CUDA_VISIBLE_DEVICES=0 python -u train_cyl_sem.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remember to change the &lt;code&gt;imageset&lt;/code&gt; of &lt;code&gt;val_data_loader&lt;/code&gt; to &lt;code&gt;val&lt;/code&gt;, &lt;code&gt;return_test&lt;/code&gt; of &lt;code&gt;dataset_params&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; in &lt;code&gt;semantickitti.yaml&lt;/code&gt;. Currently, we only support vanilla training.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;SemanticKITTI test set (single-scan):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reported&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reproduced&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gain&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Weight&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SPVNAS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66.4%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.4%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;5.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D_1.5x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;72.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1LyWhVCqMzSVDe44c8ARDp8b94w1ct-tR?usp=sharing&#34;&gt;cyl_sem_1.5x_72_4.pt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;68.9%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.8%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;2.9%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1LyWhVCqMzSVDe44c8ARDp8b94w1ct-tR?usp=sharing&#34;&gt;cyl_sem_1.0x_71_8.pt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D_0.5x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.2%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.4%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.2%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1LyWhVCqMzSVDe44c8ARDp8b94w1ct-tR?usp=sharing&#34;&gt;cyl_sem_0.5x_71_4.pt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CENet_1.0x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;64.7%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;67.6%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.9%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1LyWhVCqMzSVDe44c8ARDp8b94w1ct-tR?usp=sharing&#34;&gt;CENet_64x512_67_6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;SemanticKITTI test set (multi-scan):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reported&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reproduced&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gain&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Weight&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52.5%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D_0.5x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58.2%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58.4%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.2%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1LyWhVCqMzSVDe44c8ARDp8b94w1ct-tR?usp=sharing&#34;&gt;cyl_sem_ms_0.5x_58_4.pt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Waymo test set:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reported&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reproduced&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gain&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Weight&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.18%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.18%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D_0.5x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;nuScenes val set:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reported&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Reproduced&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gain&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Weight&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;76.1%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;--&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Cylinder3D_0.5x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;76.0%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;76.15%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0.15%&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/1LyWhVCqMzSVDe44c8ARDp8b94w1ct-tR?usp=sharing&#34;&gt;cyl_nusc_0.5x_76_15.pt&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use the codes, please cite the following publications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{Hou_2022_CVPR,&#xA;    title     = {Point-to-Voxel Knowledge Distillation for LiDAR Semantic Segmentation},&#xA;    author    = {Hou, Yuenan and Zhu, Xinge and Ma, Yuexin and Loy, Chen Change and Li, Yikang},&#xA;    booktitle = {IEEE Conference on Computer Vision and Pattern Recognition},&#xA;    pages     = {8479-8488}&#xA;    year      = {2022},&#xA;}&#xA;&#xA;@inproceedings{zhu2021cylindrical,&#xA;    title={Cylindrical and Asymmetrical 3D Convolution Networks for LiDAR Segmentation},&#xA;    author={Zhu, Xinge and Zhou, Hui and Wang, Tai and Hong, Fangzhou and Ma, Yuexin and Li, Wei and Li, Hongsheng and Lin, Dahua},&#xA;    booktitle={IEEE Conference on Computer Vision and Pattern Recognition},&#xA;    pages={9939--9948},&#xA;    year={2021}&#xA;}&#xA;&#xA;@article{zhu2021cylindrical-tpami,&#xA;    title={Cylindrical and Asymmetrical 3D {C}onvolution {N}etworks for LiDAR-based Perception},&#xA;    author={Zhu, Xinge and Zhou, Hui and Wang, Tai and Hong, Fangzhou and Li, Wei and Ma, Yuexin and Li, Hongsheng and Yang, Ruigang and Lin, Dahua},&#xA;    journal={IEEE Transactions on Pattern Analysis and Machine Intelligence},&#xA;    year={2021},&#xA;    publisher={IEEE}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This repo is built upon the awesome &lt;a href=&#34;https://github.com/xinge008/Cylinder3D&#34;&gt;Cylinder3D&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ritajie/incomplete-projects</title>
    <updated>2022-07-17T01:33:03Z</updated>
    <id>tag:github.com,2022-07-17:/ritajie/incomplete-projects</id>
    <link href="https://github.com/ritajie/incomplete-projects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;统计中国大陆的烂尾楼&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;烂尾楼统计（开发中……）&lt;/h1&gt; &#xA;&lt;p&gt;📅 预计周日（2022-07-17）上线简单版本。&lt;/p&gt; &#xA;&lt;p&gt;数据持续更新，预期的效果如图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ritajie/incomplete-projects/raw/master/incomplete_projects/static/img/demo.png?raw=true&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shibing624/pycorrector</title>
    <updated>2022-07-17T01:33:03Z</updated>
    <id>tag:github.com,2022-07-17:/shibing624/pycorrector</id>
    <link href="https://github.com/shibing624/pycorrector" rel="alternate"></link>
    <summary type="html">&lt;p&gt;pycorrector is a toolkit for text error correction. 文本纠错，Kenlm，ConvSeq2Seq，BERT，MacBERT，ELECTRA，ERNIE，Transformer，T5等模型实现，开箱即用。&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/docs/pycorrector.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/pycorrector&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/pycorrector.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/pycorrector&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/pycorrector&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shibing624/pycorrector/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/shibing624/pycorrector.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/requirements.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-3.6%2B-green.svg?sanitize=true&#34; alt=&#34;python_vesion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/shibing624/pycorrector/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/shibing624/pycorrector.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#wechat-group&#34;&gt;&lt;img src=&#34;http://vlog.sfyc.ltd/wechat_everyday/wxgroup_logo.png?imageView2/0/w/60/h/20&#34; alt=&#34;Wechat Group&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/README.en.md&#34;&gt;English&lt;/a&gt; | 简体中文&lt;/p&gt; &#xA;&lt;h1&gt;pycorrector&lt;/h1&gt; &#xA;&lt;p&gt;中文文本纠错工具。支持中文音似、形似、语法错误纠正，python3开发。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;pycorrector&lt;/strong&gt;实现了Kenlm、ConvSeq2Seq、BERT、MacBERT、ELECTRA、ERNIE、Transformer等多种模型的文本纠错，并在SigHAN数据集评估各模型的效果。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Guide&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#Question&#34;&gt;Question&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#Solution&#34;&gt;Solution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#Evaluation&#34;&gt;Evaluation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#deep-model-usage&#34;&gt;Deep Model Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#Dataset&#34;&gt;Dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#Contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/#reference&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Question&lt;/h1&gt; &#xA;&lt;p&gt;中文文本纠错任务，常见错误类型：&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/docs/git_image/error_type.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;当然，针对不同业务场景，这些问题并不一定全部存在，比如拼音输入法、语音识别校对关注音似错误；五笔输入法、OCR校对关注形似错误， 搜索引擎query纠错关注所有错误类型。&lt;/p&gt; &#xA;&lt;p&gt;本项目重点解决其中的&#34;音似、形字、语法、专名错误&#34;等类型。&lt;/p&gt; &#xA;&lt;h1&gt;Solution&lt;/h1&gt; &#xA;&lt;h3&gt;规则的解决思路&lt;/h3&gt; &#xA;&lt;p&gt;依据语言模型检测错别字位置，通过拼音音似特征、笔画五笔编辑距离特征及语言模型困惑度特征纠正错别字。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;中文纠错分为两步走，第一步是错误检测，第二步是错误纠正；&lt;/li&gt; &#xA; &lt;li&gt;错误检测部分先通过结巴中文分词器切词，由于句子中含有错别字，所以切词结果往往会有切分错误的情况，这样从字粒度和词粒度两方面检测错误， 整合这两种粒度的疑似错误结果，形成疑似错误位置候选集；&lt;/li&gt; &#xA; &lt;li&gt;错误纠正部分，是遍历所有的疑似错误位置，并使用音似、形似词典替换错误位置的词，然后通过语言模型计算句子困惑度，对所有候选集结果比较并排序，得到最优纠正词。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;深度模型的解决思路&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;端到端的深度模型可以避免人工提取特征，减少人工工作量，RNN序列模型对文本任务拟合能力强，RNN Attn在英文文本纠错比赛中取得第一名成绩，证明应用效果不错；&lt;/li&gt; &#xA; &lt;li&gt;CRF会计算全局最优输出节点的条件概率，对句子中特定错误类型的检测，会根据整句话判定该错误，阿里参赛2016中文语法纠错任务并取得第一名，证明应用效果不错；&lt;/li&gt; &#xA; &lt;li&gt;Seq2Seq模型是使用Encoder-Decoder结构解决序列转换问题，目前在序列转换任务中（如机器翻译、对话生成、文本摘要、图像描述）使用最广泛、效果最好的模型之一；&lt;/li&gt; &#xA; &lt;li&gt;BERT/ELECTRA/ERNIE/MacBERT等预训练模型强大的语言表征能力，对NLP届带来翻天覆地的改变，海量的训练数据拟合的语言模型效果无与伦比，基于其MASK掩码的特征，可以简单改造预训练模型用于纠错，加上fine-tune，效果轻松达到最优。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;PS：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shibing624/pycorrector/wiki/pycorrector%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-%E7%9B%B4%E6%92%AD%E5%88%86%E4%BA%AB&#34;&gt;作者纠错分享&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/138981644&#34;&gt;网友源码解读&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Feature&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/corrector.py&#34;&gt;Kenlm模型&lt;/a&gt;：本项目基于Kenlm统计语言模型工具训练了中文NGram语言模型，结合规则方法、混淆集可以纠正中文拼写错误，方法速度快，扩展性强，效果一般&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/macbert&#34;&gt;MacBERT模型&lt;/a&gt;【推荐】：本项目基于PyTorch实现了用于中文文本纠错的MacBERT4CSC模型，模型加入了错误检测和纠正网络，适配中文拼写纠错任务，效果好&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/seq2seq&#34;&gt;Seq2Seq模型&lt;/a&gt;：本项目基于PyTorch实现了用于中文文本纠错的Seq2Seq模型、ConvSeq2Seq模型，其中ConvSeq2Seq在NLPCC-2018的中文语法纠错比赛中，使用单模型并取得第三名，可以并行训练，模型收敛快，效果一般&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/t5&#34;&gt;T5模型&lt;/a&gt;：本项目基于PyTorch实现了用于中文文本纠错的T5模型，使用Langboat/mengzi-t5-base的预训练模型fine-tune中文纠错数据集，模型改造的潜力较大，效果好&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/bert&#34;&gt;BERT模型&lt;/a&gt;：本项目基于PyTorch实现了基于原生BERT的fill-mask能力进行纠正错字的方法，效果差&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/electra&#34;&gt;ELECTRA模型&lt;/a&gt;：本项目基于PyTorch实现了基于原生ELECTRA的fill-mask能力进行纠正错字的方法，效果差&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/ernie_csc&#34;&gt;ERNIE_CSC模型&lt;/a&gt;：本项目基于PaddlePaddle实现了用于中文文本纠错的ERNIE_CSC模型，模型在ERNIE-1.0上fine-tune，模型结构适配了中文拼写纠错任务，效果好&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/deepcontext&#34;&gt;DeepContext模型&lt;/a&gt;：本项目基于PyTorch实现了用于文本纠错的DeepContext模型，该模型结构参考Stanford University的NLC模型，2014英文纠错比赛得第一名，效果一般&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/transformer&#34;&gt;Transformer模型&lt;/a&gt;：本项目基于PyTorch的fairseq库调研了Transformer模型用于中文文本纠错，效果一般&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;思考&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;规则的方法，在词粒度的错误召回还不错，但错误纠正的准确率还有待提高，更多优质的纠错集及纠错词库会有提升，我更希望算法模型上有更大的突破。&lt;/li&gt; &#xA; &lt;li&gt;现在的文本错误不再局限于字词粒度上的拼写错误，需要提高中文语法错误检测（CGED, Chinese Grammar Error Diagnosis）及纠正能力，列在TODO中，后续调研。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;Official Demo: &lt;a href=&#34;http://42.193.145.218/product/corrector/&#34;&gt;http://42.193.145.218/product/corrector/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HuggingFace Demo: &lt;a href=&#34;https://huggingface.co/spaces/shibing624/pycorrector&#34;&gt;https://huggingface.co/spaces/shibing624/pycorrector&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/docs/hf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;run example: &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/gradio_demo.py&#34;&gt;examples/gradio_demo.py&lt;/a&gt; to see the demo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python examples/gradio_demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Evaluation&lt;/h1&gt; &#xA;&lt;p&gt;提供评估脚本&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/evaluate_models.py&#34;&gt;examples/evaluate_models.py&lt;/a&gt;：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用sighan15评估集：SIGHAN2015的测试集&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/data/cn/sighan_2015/test.tsv&#34;&gt;pycorrector/data/cn/sighan_2015/test.tsv&lt;/a&gt; ，已经转为简体中文。&lt;/li&gt; &#xA; &lt;li&gt;评估标准：纠错准召率，采用严格句子粒度（Sentence Level）计算方式，把模型纠正之后的与正确句子完成相同的视为正确，否则为错。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;评估结果&lt;/h3&gt; &#xA;&lt;p&gt;评估数据集：SIGHAN2015测试集&lt;/p&gt; &#xA;&lt;p&gt;GPU：Tesla V100，显存 32 GB&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;模型&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Backbone&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;GPU&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Precision&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Recall&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;F1&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;QPS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rule(pycorrector.correct)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kenlm&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CPU&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.6860&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.1529&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.2500&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bert-correction&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bert-base-chinese&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GPU&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.8029&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.4052&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.5386&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;T5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;byt5-small&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GPU&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.5220&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.3941&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.4491&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;111&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mengzi-t5-base-chinese-correction&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mengzi-t5-base&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GPU&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.8321&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.6390&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.7229&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;214&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;convseq2seq-chinese-correction&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ConvSeq2Seq&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GPU&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.2415&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.1436&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.1801&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;macbert4csc-base-chinese&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;macbert-base-chinese&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;GPU&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;0.8254&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;0.7311&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;0.7754&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;224&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;结论&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;中文拼写纠错模型效果最好的是&lt;strong&gt;MacBert&lt;/strong&gt;，模型名称是&lt;em&gt;shibing624/macbert4csc-base-chinese&lt;/em&gt;，huggingface model：&lt;a href=&#34;https://huggingface.co/shibing624/macbert4csc-base-chinese&#34;&gt;shibing624/macbert4csc-base-chinese&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;中文语法纠错模型效果最好的是&lt;strong&gt;Seq2Seq&lt;/strong&gt;，模型名称是&lt;em&gt;convseq2seq&lt;/em&gt;，model：&lt;a href=&#34;https://github.com/shibing624/pycorrector/releases/download/0.4.5/convseq2seq_correction.tar.gz&#34;&gt;convseq2seq_correction.tar.gz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;最具潜力的模型是&lt;strong&gt;T5&lt;/strong&gt;，模型名称是&lt;em&gt;shibing624/mengzi-t5-base-chinese-correction&lt;/em&gt;，huggingface model：&lt;a href=&#34;https://huggingface.co/shibing624/mengzi-t5-base-chinese-correction&#34;&gt;shibing624/mengzi-t5-base-chinese-correction&lt;/a&gt;，未改变模型结构，仅fine-tune中文纠错数据集，已经在&lt;code&gt;SIGHAN 2015&lt;/code&gt;取得接近SOTA的效果&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U pycorrector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&#xA;git clone https://github.com/shibing624/pycorrector.git&#xA;cd pycorrector&#xA;pip install --no-deps .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过以上两种方法的任何一种完成安装都可以。如果不想安装依赖包，直接使用docker拉取安装好的部署环境即可。&lt;/p&gt; &#xA;&lt;h4&gt;安装依赖&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docker使用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run -it -v ~/.pycorrector:/root/.pycorrector shibing624/pycorrector:0.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;后续调用python使用即可，该镜像已经安装好kenlm、pycorrector等包，具体参见&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;使用示例：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/docs/git_image/docker.png&#34; alt=&#34;docker&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;kenlm安装&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install https://github.com/kpu/kenlm/archive/master.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shibing624/pycorrector/wiki/Install-kenlm&#34;&gt;安装kenlm-wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;其他库包安装&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;文本纠错&lt;/h3&gt; &#xA;&lt;p&gt;example: &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/base_demo.py&#34;&gt;examples/base_demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pycorrector&#xA;&#xA;corrected_sent, detail = pycorrector.correct(&#39;少先队员因该为老人让坐&#39;)&#xA;print(corrected_sent, detail)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;少先队员应该为老人让座 [(&#39;因该&#39;, &#39;应该&#39;, 4, 6), (&#39;坐&#39;, &#39;座&#39;, 10, 11)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;规则方法默认会从路径&lt;code&gt;~/.pycorrector/datasets/zh_giga.no_cna_cmn.prune01244.klm&lt;/code&gt;加载kenlm语言模型文件，如果检测没有该文件， 则程序会自动联网下载。当然也可以手动下载&lt;a href=&#34;https://deepspeech.bj.bcebos.com/zh_lm/zh_giga.no_cna_cmn.prune01244.klm&#34;&gt;模型文件(2.8G)&lt;/a&gt;并放置于该位置。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;错误检测&lt;/h3&gt; &#xA;&lt;p&gt;example: &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/detect_demo.py&#34;&gt;examples/detect_demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pycorrector&#xA;&#xA;idx_errors = pycorrector.detect(&#39;少先队员因该为老人让坐&#39;)&#xA;print(idx_errors)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[&#39;因该&#39;, 4, 6, &#39;word&#39;], [&#39;坐&#39;, 10, 11, &#39;char&#39;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;返回类型是&lt;code&gt;list&lt;/code&gt;, &lt;code&gt;[error_word, begin_pos, end_pos, error_type]&lt;/code&gt;，&lt;code&gt;pos&lt;/code&gt;索引位置以0开始。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;成语、专名纠错&lt;/h3&gt; &#xA;&lt;p&gt;example: &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/proper_correct_demo.py&#34;&gt;examples/proper_correct_demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys&#xA;&#xA;sys.path.append(&#34;..&#34;)&#xA;from pycorrector.proper_corrector import ProperCorrector&#xA;&#xA;m = ProperCorrector()&#xA;x = [&#xA;    &#39;报应接中迩来&#39;,&#xA;    &#39;今天在拼哆哆上买了点苹果&#39;,&#xA;]&#xA;&#xA;for i in x:&#xA;    print(i, &#39; -&amp;gt; &#39;, m.proper_correct(i))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;报应接中迩来  -&amp;gt;  (&#39;报应接踵而来&#39;, [(&#39;接中迩来&#39;, &#39;接踵而来&#39;, 2, 6)])&#xA;今天在拼哆哆上买了点苹果  -&amp;gt;  (&#39;今天在拼多多上买了点苹果&#39;, [(&#39;拼哆哆&#39;, &#39;拼多多&#39;, 3, 6)])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;自定义混淆集&lt;/h3&gt; &#xA;&lt;p&gt;通过加载自定义混淆集，支持用户纠正已知的错误，包括两方面功能：1）错误补召回；2）误杀加白。&lt;/p&gt; &#xA;&lt;p&gt;example: &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/use_custom_confusion.py&#34;&gt;examples/use_custom_confusion.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pycorrector&#xA;&#xA;pycorrector.set_log_level(&#39;INFO&#39;)&#xA;error_sentences = [&#xA;    &#39;买iphonex，要多少钱&#39;,&#xA;    &#39;共同实际控制人萧华、霍荣铨、张旗康&#39;,&#xA;]&#xA;for line in error_sentences:&#xA;    print(pycorrector.correct(line))&#xA;&#xA;print(&#39;*&#39; * 42)&#xA;pycorrector.set_custom_confusion_dict(path=&#39;./my_custom_confusion.txt&#39;)&#xA;for line in error_sentences:&#xA;    print(pycorrector.correct(line))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(&#39;买iphonex，要多少钱&#39;, [])   # &#34;iphonex&#34;漏召，应该是&#34;iphoneX&#34;&#xA;(&#39;共同实际控制人萧华、霍荣铨、张启康&#39;, [[&#39;张旗康&#39;, &#39;张启康&#39;, 14, 17]]) # &#34;张启康&#34;误杀，应该不用纠&#xA;*****************************************************&#xA;(&#39;买iphonex，要多少钱&#39;, [[&#39;iphonex&#39;, &#39;iphoneX&#39;, 1, 8]])&#xA;(&#39;共同实际控制人萧华、霍荣铨、张旗康&#39;, [])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;其中&lt;code&gt;./my_custom_confusion.txt&lt;/code&gt;的内容格式如下，以空格间隔：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;iPhone差 iPhoneX 100&#xA;张旗康 张旗康&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;set_custom_confusion_dict&lt;/code&gt;方法的&lt;code&gt;path&lt;/code&gt;参数为用户自定义混淆集文件路径。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;自定义语言模型&lt;/h3&gt; &#xA;&lt;p&gt;默认提供下载并使用的kenlm语言模型&lt;code&gt;zh_giga.no_cna_cmn.prune01244.klm&lt;/code&gt;文件是2.8G，内存小的电脑使用&lt;code&gt;pycorrector&lt;/code&gt;程序可能会吃力些。&lt;/p&gt; &#xA;&lt;p&gt;支持用户加载自己训练的kenlm语言模型，或使用2014版人民日报数据训练的模型，模型小（140M），准确率稍低，模型下载地址：&lt;a href=&#34;https://pan.baidu.com/s/1I2GElyHy_MAdek3YaziFYw&#34;&gt;people2014corpus_chars.klm(密码o5e9)&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;example：&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/load_custom_language_model.py&#34;&gt;examples/load_custom_language_model.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pycorrector import Corrector&#xA;import os&#xA;&#xA;pwd_path = os.path.abspath(os.path.dirname(__file__))&#xA;lm_path = os.path.join(pwd_path, &#39;./people2014corpus_chars.klm&#39;)&#xA;model = Corrector(language_model_path=lm_path)&#xA;&#xA;corrected_sent, detail = model.correct(&#39;少先队员因该为老人让坐&#39;)&#xA;print(corrected_sent, detail)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;少先队员应该为老人让座 [(&#39;因该&#39;, &#39;应该&#39;, 4, 6), (&#39;坐&#39;, &#39;座&#39;, 10, 11)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;英文拼写纠错&lt;/h3&gt; &#xA;&lt;p&gt;支持英文单词级别的拼写错误纠正。&lt;/p&gt; &#xA;&lt;p&gt;example：&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/en_correct_demo.py&#34;&gt;examples/en_correct_demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pycorrector&#xA;&#xA;sent = &#34;what happending? how to speling it, can you gorrect it?&#34;&#xA;corrected_text, details = pycorrector.en_correct(sent)&#xA;print(sent, &#39;=&amp;gt;&#39;, corrected_text)&#xA;print(details)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;what happending? how to speling it, can you gorrect it?&#xA;=&amp;gt; what happening? how to spelling it, can you correct it?&#xA;[(&#39;happending&#39;, &#39;happening&#39;, 5, 15), (&#39;speling&#39;, &#39;spelling&#39;, 24, 31), (&#39;gorrect&#39;, &#39;correct&#39;, 44, 51)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;中文简繁互换&lt;/h3&gt; &#xA;&lt;p&gt;支持中文繁体到简体的转换，和简体到繁体的转换。&lt;/p&gt; &#xA;&lt;p&gt;example：&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/traditional_simplified_chinese_demo.py&#34;&gt;examples/traditional_simplified_chinese_demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pycorrector&#xA;&#xA;traditional_sentence = &#39;憂郁的臺灣烏龜&#39;&#xA;simplified_sentence = pycorrector.traditional2simplified(traditional_sentence)&#xA;print(traditional_sentence, &#39;=&amp;gt;&#39;, simplified_sentence)&#xA;&#xA;simplified_sentence = &#39;忧郁的台湾乌龟&#39;&#xA;traditional_sentence = pycorrector.simplified2traditional(simplified_sentence)&#xA;print(simplified_sentence, &#39;=&amp;gt;&#39;, traditional_sentence)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;憂郁的臺灣烏龜 =&amp;gt; 忧郁的台湾乌龟&#xA;忧郁的台湾乌龟 =&amp;gt; 憂郁的臺灣烏龜&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;命令行模式&lt;/h3&gt; &#xA;&lt;p&gt;支持批量文本纠错&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pycorrector -h&#xA;usage: __main__.py [-h] -o OUTPUT [-n] [-d] input&#xA;&#xA;@description:&#xA;&#xA;positional arguments:&#xA;  input                 the input file path, file encode need utf-8.&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  -o OUTPUT, --output OUTPUT&#xA;                        the output file path.&#xA;  -n, --no_char         disable char detect mode.&#xA;  -d, --detail          print detail info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;case：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m pycorrector input.txt -o out.txt -n -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;输入文件：&lt;code&gt;input.txt&lt;/code&gt;；输出文件：&lt;code&gt;out.txt &lt;/code&gt;；关闭字粒度纠错；打印详细纠错信息；纠错结果以&lt;code&gt;\t&lt;/code&gt;间隔&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Deep Model Usage&lt;/h1&gt; &#xA;&lt;p&gt;本项目的初衷之一是比对、共享各种文本纠错方法，抛砖引玉的作用，如果对大家在文本纠错任务上有一点小小的启发就是我莫大的荣幸了。&lt;/p&gt; &#xA;&lt;p&gt;主要使用了多种深度模型应用于文本纠错任务，分别是前面&lt;code&gt;模型&lt;/code&gt;小节介绍的&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/macbert&#34;&gt;macbert&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/seq2seq&#34;&gt;seq2seq&lt;/a&gt;、 &lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/bert&#34;&gt;bert&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/electra&#34;&gt;electra&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/transformer&#34;&gt;transformer&lt;/a&gt; 、&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/ernie_csc&#34;&gt;ernie-csc&lt;/a&gt;、&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/t5&#34;&gt;T5&lt;/a&gt;，各模型方法内置于&lt;code&gt;pycorrector&lt;/code&gt;文件夹下，有&lt;code&gt;README.md&lt;/code&gt;详细指导，各模型可独立运行，相互之间无依赖。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装依赖&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements-dev.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;各模型均可独立的预处理数据、训练、预测。&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;MacBert4csc模型[推荐]&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;基于MacBERT改变网络结构的中文拼写纠错模型，模型已经开源在HuggingFace Models：&lt;a href=&#34;https://huggingface.co/shibing624/macbert4csc-base-chinese&#34;&gt;https://huggingface.co/shibing624/macbert4csc-base-chinese&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;模型网络结构：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本项目是 MacBERT 改变网络结构的中文文本纠错模型，可支持 BERT 类模型为 backbone。&lt;/li&gt; &#xA; &lt;li&gt;在原生 BERT 模型上进行了魔改，追加了一个全连接层作为错误检测即 &lt;a href=&#34;https://github.com/shibing624/pycorrector/raw/c0f31222b7849c452cc1ec207c71e9954bd6ca08/pycorrector/macbert/macbert4csc.py#L18&#34;&gt;detection&lt;/a&gt; ， MacBERT4CSC 训练时用 detection 层和 correction 层的 loss 加权得到最终的 loss。预测时用 BERT MLM 的 correction 权重即可。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/shibing624/pycorrector/raw/master/docs/git_image/macbert_network.jpg&#34; alt=&#34;macbert_network&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;详细教程参考&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/macbert/README.md&#34;&gt;pycorrector/macbert/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;example：&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/macbert_demo.py&#34;&gt;examples/macbert_demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;使用pycorrector调用纠错：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys&#xA;&#xA;sys.path.append(&#34;..&#34;)&#xA;from pycorrector.macbert.macbert_corrector import MacBertCorrector&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    error_sentences = [&#xA;        &#39;真麻烦你了。希望你们好好的跳无&#39;,&#xA;        &#39;少先队员因该为老人让坐&#39;,&#xA;        &#39;机七学习是人工智能领遇最能体现智能的一个分知&#39;,&#xA;        &#39;一只小鱼船浮在平净的河面上&#39;,&#xA;        &#39;我的家乡是有明的渔米之乡&#39;,&#xA;    ]&#xA;&#xA;    m = MacBertCorrector(&#34;shibing624/macbert4csc-base-chinese&#34;)&#xA;    for line in error_sentences:&#xA;        correct_sent, err = m.macbert_correct(line)&#xA;        print(&#34;query:{} =&amp;gt; {}, err:{}&#34;.format(line, correct_sent, err))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;query:真麻烦你了。希望你们好好的跳无 =&amp;gt; 真麻烦你了。希望你们好好的跳舞, err:[(&#39;无&#39;, &#39;舞&#39;, 14, 15)]&#xA;query:少先队员因该为老人让坐 =&amp;gt; 少先队员应该为老人让坐, err:[(&#39;因&#39;, &#39;应&#39;, 4, 5)]&#xA;query:机七学习是人工智能领遇最能体现智能的一个分知 =&amp;gt; 机器学习是人工智能领域最能体现智能的一个分知, err:[(&#39;七&#39;, &#39;器&#39;, 1, 2), (&#39;遇&#39;, &#39;域&#39;, 10, 11)]&#xA;query:一只小鱼船浮在平净的河面上 =&amp;gt; 一只小鱼船浮在平净的河面上, err:[]&#xA;query:我的家乡是有明的渔米之乡 =&amp;gt; 我的家乡是有名的渔米之乡, err:[(&#39;明&#39;, &#39;名&#39;, 6, 7)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;使用原生transformers库调用纠错：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import operator&#xA;import torch&#xA;from transformers import BertTokenizer, BertForMaskedLM&#xA;&#xA;device = torch.device(&#34;cuda&#34; if torch.cuda.is_available() else &#34;cpu&#34;)&#xA;&#xA;tokenizer = BertTokenizer.from_pretrained(&#34;shibing624/macbert4csc-base-chinese&#34;)&#xA;model = BertForMaskedLM.from_pretrained(&#34;shibing624/macbert4csc-base-chinese&#34;)&#xA;model.to(device)&#xA;&#xA;texts = [&#34;今天新情很好&#34;, &#34;你找到你最喜欢的工作，我也很高心。&#34;]&#xA;with torch.no_grad():&#xA;    outputs = model(**tokenizer(texts, padding=True, return_tensors=&#39;pt&#39;).to(device))&#xA;&#xA;&#xA;def get_errors(corrected_text, origin_text):&#xA;    sub_details = []&#xA;    for i, ori_char in enumerate(origin_text):&#xA;        if ori_char in [&#39; &#39;, &#39;“&#39;, &#39;”&#39;, &#39;‘&#39;, &#39;’&#39;, &#39;琊&#39;, &#39;\n&#39;, &#39;…&#39;, &#39;—&#39;, &#39;擤&#39;]:&#xA;            # add unk word&#xA;            corrected_text = corrected_text[:i] + ori_char + corrected_text[i:]&#xA;            continue&#xA;        if i &amp;gt;= len(corrected_text):&#xA;            continue&#xA;        if ori_char != corrected_text[i]:&#xA;            if ori_char.lower() == corrected_text[i]:&#xA;                # pass english upper char&#xA;                corrected_text = corrected_text[:i] + ori_char + corrected_text[i + 1:]&#xA;                continue&#xA;            sub_details.append((ori_char, corrected_text[i], i, i + 1))&#xA;    sub_details = sorted(sub_details, key=operator.itemgetter(2))&#xA;    return corrected_text, sub_details&#xA;&#xA;&#xA;result = []&#xA;for ids, text in zip(outputs.logits, texts):&#xA;    _text = tokenizer.decode(torch.argmax(ids, dim=-1), skip_special_tokens=True).replace(&#39; &#39;, &#39;&#39;)&#xA;    corrected_text = _text[:len(text)]&#xA;    corrected_text, details = get_errors(corrected_text, text)&#xA;    print(text, &#39; =&amp;gt; &#39;, corrected_text, details)&#xA;    result.append((corrected_text, details))&#xA;print(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;今天新情很好  =&amp;gt;  今天心情很好 [(&#39;新&#39;, &#39;心&#39;, 2, 3)]&#xA;你找到你最喜欢的工作，我也很高心。  =&amp;gt;  你找到你最喜欢的工作，我也很高兴。 [(&#39;心&#39;, &#39;兴&#39;, 15, 16)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;模型文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;macbert4csc-base-chinese&#xA;    ├── config.json&#xA;    ├── added_tokens.json&#xA;    ├── pytorch_model.bin&#xA;    ├── special_tokens_map.json&#xA;    ├── tokenizer_config.json&#xA;    └── vocab.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ErnieCSC模型&lt;/h3&gt; &#xA;&lt;p&gt;基于ERNIE的中文拼写纠错模型，模型已经开源在&lt;a href=&#34;https://bj.bcebos.com/paddlenlp/taskflow/text_correction/csc-ernie-1.0/csc-ernie-1.0.pdparams&#34;&gt;PaddleNLP&lt;/a&gt;的 模型库中&lt;a href=&#34;https://bj.bcebos.com/paddlenlp/taskflow/text_correction/csc-ernie-1.0/csc-ernie-1.0.pdparams&#34;&gt;https://bj.bcebos.com/paddlenlp/taskflow/text_correction/csc-ernie-1.0/csc-ernie-1.0.pdparams&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;模型网络结构：&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/10826371/131974040-fc84ec04-566f-4310-9839-862bfb27172e.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;p&gt;详细教程参考&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/ernie_csc/README.md&#34;&gt;pycorrector/ernie_csc/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;example：&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/examples/ernie_csc_demo.py&#34;&gt;examples/ernie_csc_demo.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;使用pycorrector调用纠错：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;from pycorrector.ernie_csc.ernie_csc_corrector import ErnieCSCCorrector&#xA;&#xA;if __name__ == &#39;__main__&#39;:&#xA;    error_sentences = [&#xA;        &#39;真麻烦你了。希望你们好好的跳无&#39;,&#xA;        &#39;少先队员因该为老人让坐&#39;,&#xA;        &#39;机七学习是人工智能领遇最能体现智能的一个分知&#39;,&#xA;        &#39;一只小鱼船浮在平净的河面上&#39;,&#xA;        &#39;我的家乡是有明的渔米之乡&#39;,&#xA;    ]&#xA;    corrector = ErnieCSCCorrector(&#34;csc-ernie-1.0&#34;)&#xA;    for line in error_sentences:&#xA;        result = corrector.ernie_csc_correct(line)[0]&#xA;        print(&#34;query:{} =&amp;gt; {}, err:{}&#34;.format(line, result[&#39;target&#39;], result[&#39;errors&#39;]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;query:真麻烦你了。希望你们好好的跳无 =&amp;gt; 真麻烦你了。希望你们好好的跳舞, err:[{&#39;position&#39;: 14, &#39;correction&#39;: {&#39;无&#39;: &#39;舞&#39;}}]&#xA;query:少先队员因该为老人让坐 =&amp;gt; 少先队员应该为老人让座, err:[{&#39;position&#39;: 4, &#39;correction&#39;: {&#39;因&#39;: &#39;应&#39;}}, {&#39;position&#39;: 10, &#39;correction&#39;: {&#39;坐&#39;: &#39;座&#39;}}]&#xA;query:机七学习是人工智能领遇最能体现智能的一个分知 =&amp;gt; 机器学习是人工智能领域最能体现智能的一个分知, err:[{&#39;position&#39;: 1, &#39;correction&#39;: {&#39;七&#39;: &#39;器&#39;}}, {&#39;position&#39;: 10, &#39;correction&#39;: {&#39;遇&#39;: &#39;域&#39;}}]&#xA;query:一只小鱼船浮在平净的河面上 =&amp;gt; 一只小鱼船浮在平净的河面上, err:[]&#xA;query:我的家乡是有明的渔米之乡 =&amp;gt; 我的家乡是有名的渔米之乡, err:[{&#39;position&#39;: 6, &#39;correction&#39;: {&#39;明&#39;: &#39;名&#39;}}]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;使用PaddleNLP库调用纠错：&lt;/h4&gt; &#xA;&lt;p&gt;可以使用PaddleNLP提供的Taskflow工具来对输入的文本进行一键纠错，具体使用方法如下:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;from paddlenlp import Taskflow&#xA;&#xA;text_correction = Taskflow(&#34;text_correction&#34;)&#xA;text_correction(&#39;遇到逆竟时，我们必须勇于面对，而且要愈挫愈勇，这样我们才能朝著成功之路前进。&#39;)&#xA;text_correction(&#39;人生就是如此，经过磨练才能让自己更加拙壮，才能使自己更加乐观。&#39;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#xA;[{&#39;source&#39;: &#39;遇到逆竟时，我们必须勇于面对，而且要愈挫愈勇，这样我们才能朝著成功之路前进。&#39;,&#xA;    &#39;target&#39;: &#39;遇到逆境时，我们必须勇于面对，而且要愈挫愈勇，这样我们才能朝著成功之路前进。&#39;,&#xA;    &#39;errors&#39;: [{&#39;position&#39;: 3, &#39;correction&#39;: {&#39;竟&#39;: &#39;境&#39;}}]}]&#xA;&#xA;[{&#39;source&#39;: &#39;人生就是如此，经过磨练才能让自己更加拙壮，才能使自己更加乐观。&#39;,&#xA;    &#39;target&#39;: &#39;人生就是如此，经过磨练才能让自己更加茁壮，才能使自己更加乐观。&#39;,&#xA;    &#39;errors&#39;: [{&#39;position&#39;: 18, &#39;correction&#39;: {&#39;拙&#39;: &#39;茁&#39;}}]}]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Seq2Seq模型&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/seq2seq&#34;&gt;pycorrector/seq2seq&lt;/a&gt; 模型使用示例:&lt;/p&gt; &#xA;&lt;h4&gt;训练&lt;/h4&gt; &#xA;&lt;p&gt;data example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# train.txt:&#xA;你说的是对，跟那些失业的人比起来你也算是辛运的。&#x9;你说的是对，跟那些失业的人比起来你也算是幸运的。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd seq2seq&#xA;python train.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;convseq2seq&lt;/code&gt;训练sighan数据集（2104条样本），200个epoch，单卡P40GPU训练耗时：3分钟。&lt;/p&gt; &#xA;&lt;h4&gt;预测&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python infer.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/docs/git_image/convseq2seq_ret.png&#34; alt=&#34;result image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;如果训练数据太少（不足万条），深度模型拟合不足，会出现预测结果全为&lt;code&gt;unk&lt;/code&gt;的情况，解决方法：增大训练样本集，使用下方提供的纠错熟语料(nlpcc2018+hsk，130万对句子)试试。&lt;/li&gt; &#xA; &lt;li&gt;深度模型训练耗时长，有GPU尽量用GPU，加速训练，节省时间。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Release models&lt;/h4&gt; &#xA;&lt;p&gt;基于SIGHAN2015数据集训练的convseq2seq模型，已经release到github:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;convseq2seq model url: &lt;a href=&#34;https://github.com/shibing624/pycorrector/releases/download/0.4.5/convseq2seq_correction.tar.gz&#34;&gt;https://github.com/shibing624/pycorrector/releases/download/0.4.5/convseq2seq_correction.tar.gz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dataset&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;数据集&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;语料&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;下载链接&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;压缩包大小&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;SIGHAN+Wang271K中文纠错数据集&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;SIGHAN+Wang271K(27万条)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1BV5tr9eONZCI0wERFvr0gQ&#34;&gt;百度网盘（密码01b9）&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;106M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;原始SIGHAN数据集&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;SIGHAN13 14 15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://nlp.ee.ncu.edu.tw/resource/csc.html&#34;&gt;官方csc.html&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;339K&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;原始Wang271K数据集&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Wang271K&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/wdimmy/Automatic-Corpus-Generation/raw/master/corpus/train.sgml&#34;&gt;Automatic-Corpus-Generation dimmywang提供&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;93M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;人民日报2014版语料&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;人民日报2014版&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://l6pmn3b1eo.feishu.cn/file/boxcnKpildqIseq1D4IrLwlir7c?from=from_qr_code&#34;&gt;飞书（密码cHcu）&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;383M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;NLPCC 2018 GEC官方数据集&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NLPCC2018-GEC&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://tcci.ccf.org.cn/conference/2018/dldoc/trainingdata02.tar.gz&#34;&gt;官方trainingdata&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;114M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;NLPCC 2018+HSK熟语料&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nlpcc2018+hsk+CGED&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1BkDru60nQXaDVLRSr7ktfA&#34;&gt;百度网盘（密码m6fg）&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://l6pmn3b1eo.feishu.cn/file/boxcnudJgRs5GEMhZwe77YGTQfc?from=from_qr_code&#34;&gt;飞书（密码gl9y）&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;215M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;&lt;code&gt;NLPCC 2018+HSK原始语料&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HSK+Lang8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://pan.baidu.com/s/1DaOX89uL1JRaZclfrV9C0g&#34;&gt;百度网盘（密码n31j）&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://l6pmn3b1eo.feishu.cn/file/boxcntebW3NI6OAaqzDUXlZHoDb?from=from_qr_code&#34;&gt;飞书（密码Q9LH）&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;81M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;说明：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SIGHAN+Wang271K中文纠错数据集(27万条)，是通过原始SIGHAN13、14、15年数据集和Wang271K数据集格式转化后得到，json格式，带错误字符位置信息，SIGHAN为test.json， macbert4csc模型训练可以直接用该数据集复现paper准召结果，详见&lt;a href=&#34;https://raw.githubusercontent.com/shibing624/pycorrector/master/pycorrector/macbert/README.md&#34;&gt;pycorrector/macbert/README.md&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;NLPCC 2018 GEC官方数据集&lt;a href=&#34;http://tcci.ccf.org.cn/conference/2018/taskdata.php&#34;&gt;NLPCC2018-GEC&lt;/a&gt;， 训练集&lt;a href=&#34;http://tcci.ccf.org.cn/conference/2018/dldoc/trainingdata02.tar.gz&#34;&gt;trainingdata&lt;/a&gt;[解压后114.5MB]，该数据格式是原始文本，未做切词处理。&lt;/li&gt; &#xA; &lt;li&gt;汉语水平考试（HSK）和lang8原始平行语料[HSK+Lang8]&lt;a href=&#34;https://pan.baidu.com/s/1DaOX89uL1JRaZclfrV9C0g&#34;&gt;百度网盘（密码n31j）&lt;/a&gt;，该数据集已经切词，可用作数据扩增。&lt;/li&gt; &#xA; &lt;li&gt;NLPCC 2018 + HSK + CGED16、17、18的数据，经过以字切分，繁体转简体，打乱数据顺序的预处理后，生成用于纠错的熟语料(nlpcc2018+hsk) ，&lt;a href=&#34;https://pan.baidu.com/s/1BkDru60nQXaDVLRSr7ktfA&#34;&gt;百度网盘（密码:m6fg）&lt;/a&gt; [130万对句子，215MB]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language Model&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shibing624/pycorrector/wiki/%E7%BB%9F%E8%AE%A1%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86&#34;&gt;什么是语言模型？-wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;语言模型对于纠错步骤至关重要，当前默认使用的是从千兆中文文本训练的中文语言模型&lt;a href=&#34;https://deepspeech.bj.bcebos.com/zh_lm/zh_giga.no_cna_cmn.prune01244.klm&#34;&gt;zh_giga.no_cna_cmn.prune01244.klm(2.8G)&lt;/a&gt;， 提供人民日报2014版语料训练得到的轻量版语言模型&lt;a href=&#34;https://pan.baidu.com/s/1I2GElyHy_MAdek3YaziFYw&#34;&gt;people2014corpus_chars.klm(密码o5e9)&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;大家可以用中文维基（繁体转简体，pycorrector.utils.text_utils下有此功能）等语料数据训练通用的语言模型，或者也可以用专业领域语料训练更专用的语言模型。更适用的语言模型，对于纠错效果会有比较好的提升。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;kenlm语言模型训练工具的使用，请见博客：&lt;a href=&#34;http://blog.csdn.net/mingzai624/article/details/79560063&#34;&gt;http://blog.csdn.net/mingzai624/article/details/79560063&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;附上训练语料&amp;lt;人民日报2014版熟语料&amp;gt;，包括： 1）标准人工切词及词性数据people2014.tar.gz， 2）未切词文本数据people2014_words.txt， 3）kenlm训练字粒度语言模型文件及其二进制文件people2014corpus_chars.arps/klm， 4）kenlm词粒度语言模型文件及其二进制文件people2014corpus_words.arps/klm。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;尊重版权，传播请注明出处。&lt;/p&gt; &#xA;&lt;h1&gt;Todo&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 优化形似字字典，提高形似字纠错准确率&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 整理中文纠错训练数据，使用seq2seq做深度中文纠错模型&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 添加中文语法错误检测及纠正能力&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 规则方法添加用户自定义纠错集，并将其纠错优先度调为最高&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; seq2seq_attention 添加dropout，减少过拟合&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 在seq2seq模型框架上，新增Pointer-generator network、Beam search、Unknown words replacement、Coverage mechanism等特性&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 更新bert的fine-tuned使用wiki，适配transformers 2.10.0库&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 升级代码，兼容TensorFlow 2.0库&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 升级bert纠错逻辑，提升基于mask的纠错效果&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 新增基于electra模型的纠错逻辑，参数更小，预测更快&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 新增专用于纠错任务深度模型，使用bert/ernie预训练模型，加入文本音似、形似特征。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Issue(建议) ：&lt;a href=&#34;https://github.com/shibing624/pycorrector/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/shibing624/pycorrector.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;邮件我：xuming: &lt;a href=&#34;mailto:xuming624@qq.com&#34;&gt;xuming624@qq.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微信我：加我&lt;em&gt;微信号：xuming624&lt;/em&gt;, 进Python-NLP交流群，备注：&lt;em&gt;姓名-公司名-NLP&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://github.com/shibing624/pycorrector/raw/master/docs/git_image/wechat.jpeg&#34; width=&#34;200&#34;&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;如果你在研究中使用了pycorrector，请按如下格式引用：&lt;/p&gt; &#xA;&lt;p&gt;APA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;Xu, M. Pycorrector: Text error correction tool (Version 0.4.2) [Computer software]. https://github.com/shibing624/pycorrector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;@software{Xu_Pycorrector_Text_error,&#xA;author = {Xu, Ming},&#xA;title = {Pycorrector: Text error correction tool},&#xA;url = {https://github.com/shibing624/pycorrector},&#xA;version = {0.4.2}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;pycorrector 的授权协议为 &lt;strong&gt;Apache License 2.0&lt;/strong&gt;，可免费用做商业用途。请在产品说明中附加pycorrector的链接和授权协议。&lt;/p&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;项目代码还很粗糙，如果大家对代码有所改进，欢迎提交回本项目，在提交之前，注意以下两点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在&lt;code&gt;tests&lt;/code&gt;添加相应的单元测试&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;python -m pytest&lt;/code&gt;来运行所有单元测试，确保所有单测都是通过的&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;之后即可提交PR。&lt;/p&gt; &#xA;&lt;h1&gt;Reference&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/mingzai624/article/details/82390382&#34;&gt;基于文法模型的中文纠错系统&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://norvig.com/spell-correct.html&#34;&gt;Norvig’s spelling corrector&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.aclweb.org/anthology/W/W14/W14-6835.pdf&#34;&gt;Chinese Spelling Error Detection and Correction Based on Language Model, Pronunciation, and Shape[Yu, 2013]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.aclweb.org/anthology/O/O13/O13-1005.pdf&#34;&gt;Chinese Spelling Checker Based on Statistical Machine Translation[Chiu, 2013]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aclweb.org/anthology/W14-6822&#34;&gt;Chinese Word Spelling Correction Based on Rule Induction[yeh, 2014]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1603.09727.pdf&#34;&gt;Neural Language Correction with Character-Based Attention[Ziang Xie, 2016]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.anthology.aclweb.org/W/W14/W14-6827.pdf&#34;&gt;Chinese Spelling Check System Based on Tri-gram Model[Qiang Huang, 2014]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1812.02303&#34;&gt;Neural Abstractive Text Summarization with Sequence-to-Sequence Models[Tian Shi, 2018]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shibing624/pycorrector/raw/master/docs/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%B8%AD%E6%96%87%E6%96%87%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%A0%A1%E5%AF%B9%E7%A0%94%E7%A9%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0.pdf&#34;&gt;基于深度学习的中文文本自动校对研究与实现[杨宗霖, 2019]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-3-319-99501-4_36&#34;&gt;A Sequence to Sequence Learning for Chinese Grammatical Error Correction[Hongkai Ren, 2018]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openreview.net/pdf?id=r1xMH1BtvB&#34;&gt;ELECTRA: Pre-training Text Encoders as Discriminators Rather Than Generators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2004.13922&#34;&gt;Revisiting Pre-trained Models for Chinese Natural Language Processing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ruiqing Zhang, Chao Pang et al. &#34;Correcting Chinese Spelling Errors with Phonetic Pre-training&#34;, ACL, 2021&lt;/li&gt; &#xA; &lt;li&gt;DingminWang et al. &#34;A Hybrid Approach to Automatic Corpus Generation for Chinese Spelling Check&#34;, EMNLP, 2018&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>