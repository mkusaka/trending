<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-26T01:46:32Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JDA-DM/mojxml2geojson</title>
    <updated>2023-01-26T01:46:32Z</updated>
    <id>tag:github.com,2023-01-26:/JDA-DM/mojxml2geojson</id>
    <link href="https://github.com/JDA-DM/mojxml2geojson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;法務省登記所備付地図データ（地図XML）をGeoJSONに変換するコンバータ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mojxml2geojson&lt;/h1&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GDAL &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gdal.org/download.html&#34;&gt;https://gdal.org/download.html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;python 3.*&lt;/li&gt; &#xA; &lt;li&gt;pip 22.*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;setup.py&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From GitHub&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/JDA-DM/mojxml2geojson.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mojxml2geojson ./moj.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PyTest&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pytest -vv -p no:cacheprovide&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>initialcommit-com/git-sim</title>
    <updated>2023-01-26T01:46:32Z</updated>
    <id>tag:github.com,2023-01-26:/initialcommit-com/git-sim</id>
    <link href="https://github.com/initialcommit-com/git-sim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visually simulate Git operations in your own repos with a single terminal command.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-sim&lt;/h1&gt; &#xA;&lt;p&gt;Visually simulate Git operations in your own repos with a single terminal command.&lt;/p&gt; &#xA;&lt;p&gt;This generates an image (default) or video visualization depicting the Git command&#39;s behavior.&lt;/p&gt; &#xA;&lt;p&gt;Command syntax is based directly on Git&#39;s command-line syntax, so using git-sim is as familiar as possible.&lt;/p&gt; &#xA;&lt;p&gt;Example: &lt;code&gt;$ git-sim merge &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210939840-1d51493a-6cac-43fd-9d12-3d2948d32c61.jpg&#34; alt=&#34;git-sim-merge_01-05-23_09-44-46&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visualize Git commands to understand their effects on your repo before actually running them&lt;/li&gt; &#xA; &lt;li&gt;Prevent unexpected working directory and repository states by simulating before running&lt;/li&gt; &#xA; &lt;li&gt;Share visualizations (jpg image or mp4 video) of your Git commands with your team, or the world&lt;/li&gt; &#xA; &lt;li&gt;Save visualizations as a part of your team documentation to document workflow and prevent recurring issues&lt;/li&gt; &#xA; &lt;li&gt;Create static Git diagrams (jpg) or dynamic animated videos (mp4) to speed up content creation&lt;/li&gt; &#xA; &lt;li&gt;Help visual learners understand how Git commands work&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run a one-liner git-sim command in the terminal to generate a custom Git command visualization (.jpg) from your repo&lt;/li&gt; &#xA; &lt;li&gt;Supported commands: &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;restore&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;stash&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;revert&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;cherry-pick&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate an animated video (.mp4) instead of a static image using the &lt;code&gt;--animate&lt;/code&gt; flag (note: significant performance slowdown, it is recommended to use &lt;code&gt;--low-quality&lt;/code&gt; to speed up testing and remove when ready to generate presentation-quality video)&lt;/li&gt; &#xA; &lt;li&gt;Choose between dark mode (default) and light mode&lt;/li&gt; &#xA; &lt;li&gt;Animation only: Add custom branded intro/outro sequences if desired&lt;/li&gt; &#xA; &lt;li&gt;Animation only: Speed up or slow down animation speed as desired&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install &lt;a href=&#34;https://www.manim.community/&#34;&gt;manim and manim dependencies for your OS&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;code&gt;git-sim&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip3 install git-sim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For MacOS, it is recommended to &lt;strong&gt;NOT&lt;/strong&gt; use the system Python to install Git-Sim, and instead use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; to install a version of Python to work with Git-Sim. Virtual environments should work too.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Browse to the Git repository you want to simulate Git commands in:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd path/to/git/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the program:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim [global options] &amp;lt;subcommand&amp;gt; [subcommand options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Simulated output will be created as a &lt;code&gt;.jpg&lt;/code&gt; file. Output files are named using the subcommand executed combined with a timestamp, and by default are stored in a subdirectory called &lt;code&gt;git-sim_media/&lt;/code&gt;. The location of this subdirectory is customizable using the command line flag &lt;code&gt;--media-dir=path/to/output&lt;/code&gt;. Note that when the &lt;code&gt;--animate&lt;/code&gt; global flag is used, render times will be much longer and a &lt;code&gt;.mp4&lt;/code&gt; video output file will be produced.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See global help for list of global options/flags and subcommands:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;See subcommand help for list of options/flags for a specific subcommand:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim &amp;lt;subcommand&amp;gt; -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.7 or greater&lt;/li&gt; &#xA; &lt;li&gt;Pip (Package manager for Python)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manim.community/&#34;&gt;Manim (Community version)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Basic usage is similar to Git itself - &lt;code&gt;git-sim&lt;/code&gt; takes a familiar set of subcommands including &#34;log&#34;, &#34;status&#34;, &#34;add&#34;, &#34;restore&#34;, &#34;commit&#34;, &#34;stash&#34;, &#34;branch&#34;, &#34;tag&#34;, &#34;reset&#34;, &#34;revert&#34;, &#34;merge&#34;, &#34;rebase&#34;, &#34;cherry-pick&#34;, along with corresponding options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim [global options] &amp;lt;subcommand&amp;gt; [subcommand options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;[global options]&lt;/code&gt; apply to the overarching &lt;code&gt;git-sim&lt;/code&gt; simulation itself, including:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--light-mode&lt;/code&gt;: Use a light mode color scheme instead of default dark mode.&lt;br&gt; &lt;code&gt;--animate&lt;/code&gt;: Instead of outputting a static image, animate the Git command behavior in a .mp4 video.&lt;br&gt; &lt;code&gt;--reverse&lt;/code&gt;: Display commit history in the reverse direction.&lt;/p&gt; &#xA;&lt;p&gt;Animation-only global options (to be used in conjunction with &lt;code&gt;--animate&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--speed=n&lt;/code&gt;: Set the multiple of animation speed of the output simulation, &lt;code&gt;n&lt;/code&gt; can be an integer or float, default is 1.&lt;br&gt; &lt;code&gt;--low-quality&lt;/code&gt;: Render the animation in low quality to speed up creation time, recommended for non-presentation use.&lt;br&gt; &lt;code&gt;--show-intro&lt;/code&gt;: Add an intro sequence with custom logo and title.&lt;br&gt; &lt;code&gt;--show-outro&lt;/code&gt;: Add an outro sequence with custom logo and text.&lt;br&gt; &lt;code&gt;--title=title&lt;/code&gt;: Custom title to display at the beginning of the animation.&lt;br&gt; &lt;code&gt;--logo=logo.png&lt;/code&gt;: The path to a custom logo to use in the animation intro/outro.&lt;br&gt; &lt;code&gt;--outro-top-text&lt;/code&gt;: Custom text to display above the logo during the outro.&lt;br&gt; &lt;code&gt;--outro-bottom-text&lt;/code&gt;: Custom text to display below the logo during the outro.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;[subcommand options]&lt;/code&gt; are like regular Git options specific to the specified subcommand (see below for a full list).&lt;/p&gt; &#xA;&lt;p&gt;The following is a list of Git commands that can be simulated and their corresponding options/flags.&lt;/p&gt; &#xA;&lt;h3&gt;git log&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulated output will show the most recent 5 commits on the active branch by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210940300-aadd14c6-72ab-4529-a1be-b494ed5dd4c9.jpg&#34; alt=&#34;git-sim-log_01-05-23_22-02-39&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git status&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim status&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulated output will show the state of the working directory, staging area, and untracked files&lt;/li&gt; &#xA; &lt;li&gt;Note that simulated output will also show the most recent 5 commits on the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210940685-735665e2-fa12-4043-979c-54c295b13800.jpg&#34; alt=&#34;git-sim-status_01-05-23_22-06-28&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git add&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim add &amp;lt;file 1&amp;gt; &amp;lt;file 2&amp;gt; ... &amp;lt;file n&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify one or more &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; as a &lt;em&gt;modified&lt;/em&gt; working directory file, or an untracked file&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show files being moved to the staging area&lt;/li&gt; &#xA; &lt;li&gt;Note that simulated output will also show the most recent 5 commits on the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210940814-7e8dc318-6116-4e56-b415-bc547401a56a.jpg&#34; alt=&#34;git-sim-add_01-05-23_22-07-40&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git restore&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim restore &amp;lt;file 1&amp;gt; &amp;lt;file 2&amp;gt; ... &amp;lt;file n&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify one or more &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; as a &lt;em&gt;modified&lt;/em&gt; working directory file, or staged file&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show files being moved back to the working directory or discarded changes&lt;/li&gt; &#xA; &lt;li&gt;Note that simulated output will also show the most recent 5 commits on the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210941009-e6bf7271-ce9b-4e41-9a0b-24cc4b8d3b15.jpg&#34; alt=&#34;git-sim-restore_01-05-23_22-09-14&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git commit&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim commit -m &#34;Commit message&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simulated output will show the new commit added to the tip of the active branch&lt;/li&gt; &#xA; &lt;li&gt;Specify your commit message after the -m option&lt;/li&gt; &#xA; &lt;li&gt;HEAD and the active branch will be moved to the new commit&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show files in the staging area being included in the new commit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210941149-d83677a1-3ab7-4880-bc0f-871b1f150087.jpg&#34; alt=&#34;git-sim-commit_01-05-23_22-10-21&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git stash&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim stash &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify one or more &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; as a &lt;em&gt;modified&lt;/em&gt; working directory file, or staged file&lt;/li&gt; &#xA; &lt;li&gt;If no &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; is specified, all available working directory and staged files will be included&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show files being moved to the Git stash&lt;/li&gt; &#xA; &lt;li&gt;Note that simulated output will also show the most recent 5 commits on the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210941254-69c80b63-5c06-411a-a36a-1454b2906ee8.jpg&#34; alt=&#34;git-sim-stash_01-05-23_22-11-18&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git branch&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim branch &amp;lt;new branch name&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify &lt;code&gt;&amp;lt;new branch name&amp;gt;&lt;/code&gt; as the name of the new branch to simulate creation of&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show the newly create branch ref along with most recent 5 commits on the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210941509-2a42a7a4-2168-4f62-913f-3f6fe74a0684.jpg&#34; alt=&#34;git-sim-branch_01-05-23_22-13-17&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git tag&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim tag &amp;lt;new tag name&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify &lt;code&gt;&amp;lt;new tag name&amp;gt;&lt;/code&gt; as the name of the new tag to simulate creation of&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show the newly create tag ref along with most recent 5 commits on the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210941647-79376ff7-2941-42b3-964a-b1d3a404a4fe.jpg&#34; alt=&#34;git-sim-tag_01-05-23_22-14-18&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git reset&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim reset &amp;lt;reset-to&amp;gt; [--mixed|--soft|--hard]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify &lt;code&gt;&amp;lt;reset-to&amp;gt;&lt;/code&gt; as any commit id, branch name, tag, or other ref to simulate reset to from the current HEAD (default: &lt;code&gt;HEAD&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;As with a normal git reset command, default reset mode is &lt;code&gt;--mixed&lt;/code&gt;, but can be specified using &lt;code&gt;--soft&lt;/code&gt;, &lt;code&gt;--hard&lt;/code&gt;, or &lt;code&gt;--mixed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show branch/HEAD resets and resulting state of the working directory, staging area, and whether any file changes would be deleted by running the actual command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210941835-80f032d2-4f06-4032-8dd0-98c8a2569049.jpg&#34; alt=&#34;git-sim-reset_01-05-23_22-15-49&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git revert&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim revert &amp;lt;to-revert&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify &lt;code&gt;&amp;lt;to-revert&amp;gt;&lt;/code&gt; as any commit id, branch name, tag, or other ref to simulate revert for&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will show the new commit which reverts the changes from &lt;code&gt;&amp;lt;to-revert&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will include the next 4 most recent commits on the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210941979-6db8b55c-2881-41d8-9e2e-6263b1dece13.jpg&#34; alt=&#34;git-sim-revert_01-05-23_22-16-59&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git merge&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim merge &amp;lt;branch&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; as the branch name to merge into the active branch&lt;/li&gt; &#xA; &lt;li&gt;Simulated output will depict a fast-forward merge if possible&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, a three-way merge will be depicted&lt;/li&gt; &#xA; &lt;li&gt;To force a merge commit when a fast-forward is possible, use &lt;code&gt;--no-ff&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210942030-c7229488-571a-4943-a1f4-c6e4a0c8ccf3.jpg&#34; alt=&#34;git-sim-merge_01-05-23_09-44-46&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git rebase&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim rebase &amp;lt;new-base&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify &lt;code&gt;&amp;lt;new-base&amp;gt;&lt;/code&gt; as the branch name to rebase the active branch onto&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210942598-4ff8d1e6-464d-48f3-afb9-f46f7ec4828c.jpg&#34; alt=&#34;git-sim-rebase_01-05-23_09-53-34&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;git cherry-pick&lt;/h3&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;git-sim cherry-pick &amp;lt;commit&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Specify &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; as a ref (branch name/tag) or commit ID to cherry-pick onto the active branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/49353917/210942811-fa5155b1-4c6f-4afc-bea2-d39b4cd594aa.jpg&#34; alt=&#34;git-sim-cherry-pick_01-05-23_22-23-08&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video animation examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim --animate reset HEAD^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49353917/210943230-f38d879b-bb0d-4d42-a196-f24efb9e351a.mp4&#34;&gt;https://user-images.githubusercontent.com/49353917/210943230-f38d879b-bb0d-4d42-a196-f24efb9e351a.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git checkout main&#xA;$ git-sim --animate merge dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49353917/210943418-22c2cd11-be96-41bc-b621-7018eebc6bc0.mp4&#34;&gt;https://user-images.githubusercontent.com/49353917/210943418-22c2cd11-be96-41bc-b621-7018eebc6bc0.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git checkout dev&#xA;$ git-sim --animate rebase main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49353917/210943815-4b8be2da-18da-4c42-927a-61cf9a22834e.mp4&#34;&gt;https://user-images.githubusercontent.com/49353917/210943815-4b8be2da-18da-4c42-927a-61cf9a22834e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git checkout main&#xA;$ git-sim --animate cherry-pick dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/49353917/210944001-77bd0130-306b-40a8-ba0b-22e50172802b.mp4&#34;&gt;https://user-images.githubusercontent.com/49353917/210944001-77bd0130-306b-40a8-ba0b-22e50172802b.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Basic command examples&lt;/h2&gt; &#xA;&lt;p&gt;Simulate the output of the git log command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd path/to/git/repo&#xA;$ git-sim log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate the output of the git status command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate adding a file to the Git staging area:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim add filename.ext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate restoring a file from the Git staging area:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim restore filename.ext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate creating a new commit based on currently staged changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim commit -m &#34;Commit message&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate stashing all working directory and staged changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim stash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate creating a new Git branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim branch new-branch-name &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate creating a new Git tag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim tag new-tag-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate a hard reset of the current branch HEAD to the previous commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim reset HEAD^ --hard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate reverting the changes in an older commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim revert HEAD~7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate merging a branch into the active branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim merge feature1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate rebasing the active branch onto a new base:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim rebase main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simulate cherry-picking a commit from another branch onto the active branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim cherry-pick 0ae641&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command examples with extra options/flags&lt;/h2&gt; &#xA;&lt;p&gt;Use light mode for white background and black text, instead of the default black background with white text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim --light-mode status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Animate the simulated output as a .mp4 video file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim --animate add filename.ext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add an intro and outro with custom text and logo (must include &lt;code&gt;--animate&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim --animate --show-intro --show-outro --outro-top-text=&#34;My Git Repo&#34; --outro-bottom-text=&#34;Thanks for watching!&#34; --logo=path/to/logo.png status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customize the output image/video directory location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim --media-dir=path/to/output status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate output video in low quality to speed up rendering time (useful for repeated testing, must include &lt;code&gt;--animate&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git-sim --animate --low-quality status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Quickstart&lt;/strong&gt; section for details on installing manim and other dependencies. Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip3 install git-sim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;Learn more about this tool on the &lt;a href=&#34;https://initialcommit.com/tools/git-sim&#34;&gt;git-sim project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Jacob Stopak&lt;/strong&gt; - on behalf of &lt;a href=&#34;https://initialcommit.com&#34;&gt;Initial Commit&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>paramiko/paramiko</title>
    <updated>2023-01-26T01:46:32Z</updated>
    <id>tag:github.com,2023-01-26:/paramiko/paramiko</id>
    <link href="https://github.com/paramiko/paramiko" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The leading native Python SSHv2 protocol library.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|version| |python| |license| |ci| |coverage|&lt;/p&gt; &#xA;&lt;p&gt;.. |version| image:: &lt;a href=&#34;https://img.shields.io/pypi/v/paramiko&#34;&gt;https://img.shields.io/pypi/v/paramiko&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/paramiko/&#34;&gt;https://pypi.org/project/paramiko/&lt;/a&gt; :alt: PyPI - Package Version .. |python| image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/paramiko&#34;&gt;https://img.shields.io/pypi/pyversions/paramiko&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/paramiko/&#34;&gt;https://pypi.org/project/paramiko/&lt;/a&gt; :alt: PyPI - Python Version .. |license| image:: &lt;a href=&#34;https://img.shields.io/pypi/l/paramiko&#34;&gt;https://img.shields.io/pypi/l/paramiko&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/paramiko/paramiko/raw/main/LICENSE&#34;&gt;https://github.com/paramiko/paramiko/blob/main/LICENSE&lt;/a&gt; :alt: PyPI - License .. |ci| image:: &lt;a href=&#34;https://img.shields.io/circleci/build/github/paramiko/paramiko/main&#34;&gt;https://img.shields.io/circleci/build/github/paramiko/paramiko/main&lt;/a&gt; :target: &lt;a href=&#34;https://app.circleci.com/pipelines/github/paramiko/paramiko&#34;&gt;https://app.circleci.com/pipelines/github/paramiko/paramiko&lt;/a&gt; :alt: CircleCI .. |coverage| image:: &lt;a href=&#34;https://img.shields.io/codecov/c/gh/paramiko/paramiko&#34;&gt;https://img.shields.io/codecov/c/gh/paramiko/paramiko&lt;/a&gt; :target: &lt;a href=&#34;https://app.codecov.io/gh/paramiko/paramiko&#34;&gt;https://app.codecov.io/gh/paramiko/paramiko&lt;/a&gt; :alt: Codecov&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to Paramiko!&lt;/h1&gt; &#xA;&lt;p&gt;Paramiko is a pure-Python [#]_ (3.6+) implementation of the SSHv2 protocol [#]&lt;em&gt;, providing both client and server functionality. It provides the foundation for the high-level SSH library &lt;code&gt;Fabric &amp;lt;https://fabfile.org&amp;gt;&lt;/code&gt;&lt;/em&gt;, which is what we recommend you use for common client use-cases such as running remote shell commands or transferring files.&lt;/p&gt; &#xA;&lt;p&gt;Direct use of Paramiko itself is only intended for users who need advanced/low-level primitives or want to run an in-Python sshd.&lt;/p&gt; &#xA;&lt;p&gt;For installation information, changelogs, FAQs and similar, please visit &lt;code&gt;our main project website &amp;lt;https://paramiko.org&amp;gt;&lt;/code&gt;&lt;em&gt;; for API details, see &lt;code&gt;the versioned docs &amp;lt;https://docs.paramiko.org&amp;gt;&lt;/code&gt;&lt;/em&gt;. Additionally, the project maintainer keeps a &lt;code&gt;roadmap &amp;lt;http://bitprophet.org/projects#roadmap&amp;gt;&lt;/code&gt;_ on his personal site.&lt;/p&gt; &#xA;&lt;p&gt;.. [#] Paramiko relies on &lt;code&gt;cryptography &amp;lt;https://cryptography.io&amp;gt;&lt;/code&gt;_ for crypto functionality, which makes use of C and Rust extensions but has many precompiled options available. See &lt;code&gt;our installation page &amp;lt;https://www.paramiko.org/installing.html&amp;gt;&lt;/code&gt;_ for details.&lt;/p&gt; &#xA;&lt;p&gt;.. [#] SSH is defined in :rfc-reference:&lt;code&gt;4251&lt;/code&gt;, :rfc-reference:&lt;code&gt;4252&lt;/code&gt;, :rfc-reference:&lt;code&gt;4253&lt;/code&gt; and :rfc-reference:&lt;code&gt;4254&lt;/code&gt;. The primary working implementation of the protocol is the &lt;code&gt;OpenSSH project &amp;lt;http://openssh.org&amp;gt;&lt;/code&gt;_. Paramiko implements a large portion of the SSH feature set, but there are occasional gaps.&lt;/p&gt;</summary>
  </entry>
</feed>