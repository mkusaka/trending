<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-31T01:35:57Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>InkboxSoftware/excelCPU</title>
    <updated>2024-01-31T01:35:57Z</updated>
    <id>tag:github.com,2024-01-31:/InkboxSoftware/excelCPU</id>
    <link href="https://github.com/InkboxSoftware/excelCPU" rel="alternate"></link>
    <summary type="html">&lt;p&gt;16-bit CPU for Excel, and related files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Excel 16-Bit CPU&lt;/h1&gt; &#xA;&lt;p&gt;The Excel 16-Bit CPU repository contains the following main files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CPU.xlsx - The main spreadsheet which contains the CPU&#xA;ROM.xlsx - The ROM spreadsheet used read by the CPU when the read ROM switch is turned on&#xA;InstructionSet.xlsx - Explains the ISA of the CPU&#xA;compileExcelASM16.py - The Excel-ASM16 compiler&#xA;Excel-ASM16.xml - Markdown for the Excel-ASM16 language compatible with Notepad++&#xA;Sample Programs - Folder of sample programs for the Excel CPU&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CPU.xlsx file features a 16-bit CPU, 16 general purpose registers, 128KB of RAM, and a 128x128 display.&lt;/p&gt; &#xA;&lt;p&gt;Iterative Calcuation must be turned on. This can be done by going to File -&amp;gt; Options -&amp;gt; Formulas -&amp;gt; then Enable Iterative Calculation and &lt;strong&gt;set Maximum Iterations to 1&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The CPU runs off a clock signal set in B2. This clock signal will update under the normal conditions of recalculation within an Excel spreadsheet. Pressing the F9 key will recalculate the spreadsheet.&lt;/p&gt; &#xA;&lt;p&gt;The Reset Button in the F2 cell, if set to true, will reset the PC register back to 0.&lt;/p&gt; &#xA;&lt;p&gt;The computer in the CPU.xlsx file can be controlled either in automatic or manual mode. This is controlled by the button in J2. If set to true, when the clock signal from B2 is high, then the CPU will carry out the operation specified in the override slot in the Fetch Unit in cell D8. If false, then the CPU will execute the operation retrieved from the memory table as specified by the PC register.&lt;/p&gt; &#xA;&lt;p&gt;The Reset RAM button, if set to true, will reset every memory unit to 0.&lt;/p&gt; &#xA;&lt;p&gt;The Read ROM button, if set to true, will copy the values of the memory table in the ROM.xlsx spreadsheet onto the RAM table of the CPU.xlsx spreadsheet.&lt;/p&gt; &#xA;&lt;p&gt;Normal operation of the CPU consists of setting the Reset Button to high, either flipping the Reset RAM or Read ROM buttons on and off again (causing the RAM to be reset or the ROM to be read into the RAM table), and then turning off the Reset Button. The CPU is then set up to either run a program in Manual mode, or will carry out the program specified in RAM.&lt;/p&gt; &#xA;&lt;p&gt;The CPU is designed to run according to the instruction set architecture specified in the InstructionSet.xlsx spreadsheet.&lt;/p&gt; &#xA;&lt;p&gt;Warning: It is not possible to simply mash the F9 key as fast as possible, it takes time for Excel to update so many cells, it is recommended to wait until the text &#34;Ready&#34; can be seen in the bottom left corner of Excel can be seen before continuing to press the F9 key.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, programs can be written in the Excel-ASM16 language and compiled to the ROM.xlsx spreadsheet.&lt;/p&gt; &#xA;&lt;p&gt;Excel-ASM16 features 24 different case-insensitive instructions. There are three different operands that are used in each instruction&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;REG&#x9;; refers to any of the 16 general purpose registers&#xA;&#x9;E.G. R0, R1, R15 &amp;amp;c.&#xA;&#x9;&#xA;&#x9;MEM&#x9;; refers to any 16-bit addressable memory unit (formatted in hexadecimal)&#xA;&#x9;E.G. @0000, @F000, @FFFF, &amp;amp;c.&#xA;&#xA;&#x9;IMD&#x9;; refers to an immediate number usually 16-bits long, except in the case of ROL and ROR&#xA;&#x9;&#x9;; can be defined either in decimal or hexadecimal&#xA;&#x9;E.G. #0000, $0CCC, #60340, $FF10, &amp;amp;c.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LOAD&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;LOAD REG MEM&#x9;; loads the specified memory unit into REG&#xA;&#x9;LOAD REG IMD&#x9;; load specified 16-bit immediate value into REG&#xA;&#x9;LOAD REG REG&#x9;; loads memory unit at the address stored in REGB into REGA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;STORE&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;STORE REG MEM&#x9;; stores the value of REG to the address specified&#xA;&#x9;STORE REG REG &#x9;; stores the value of REGA into the memory unit at the address in REGB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JUMP&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;JMP IMD&#x9;&#x9;; sets PC to the immediate 16-bit value&#xA;&#x9;JEQ IMD&#x9;&#x9;; if ZF = 0, sets PC to the immediate 16-bit value&#xA;&#x9;JLT IMD&#x9;&#x9;; if CF = 0, sets PC to the immediate 16-bit value &#xA;&#x9;JGE IMD&#x9;&#x9;; if CF = 1 or ZF = 1, sets PC to the immediate 16-bit value &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TRAN&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;TRAN REG REG&#x9;; transfers value from REGA to REGB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ALGEBRAIC INSTRUCTIONS&lt;/h3&gt; &#xA;&lt;h3&gt;ADD&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;ADD REG REG&#x9;; REGA + REGB + CF, result stored in REGA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SUB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;SUB REG REG&#x9;; (REGA - REGB) - CF, result stored in REGA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MULT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;MULT REG REG&#x9;; REGA * REGB, low 16-bit result stored in REGA, high 16-bit result stored in REGB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DIV&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;DIV REG REG&#x9;; REGA / REGB result stored in REGA, REGA MOD REGB stored in REGB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;INC&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;INC REG&#x9;; REGA++, CF not affected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DEC&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;DEC REG&#x9;; REGA--, CF not affected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BITWISE INSTRUCTIONS&lt;/h3&gt; &#xA;&lt;h3&gt;AND&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;AND REG REG&#x9;; REGA AND REGB, result stored in REGA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;OR&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;OR REG REG&#x9;&#x9;; REGA OR REGB, result stored in REGA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;XOR&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;XOR REG REG&#x9;; REGA XOR REGB, result stored in REGA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NOT&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;NOT REG &#x9;&#x9;; NOT REGA, result stored in REGA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ROLL INSTRUCTIONS&lt;/h3&gt; &#xA;&lt;h3&gt;ROL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;ROL REG IMD&#x9;; leftwise roll of bits of REGA carried out IMD times&#xA;&#x9;&#x9;&#x9;&#x9;; IMD is a 4-bit value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ROR&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;ROR REG IMD&#x9;; rightwise roll of bits of REGA carried out IMD times&#xA;&#x9;&#x9;&#x9;&#x9;; IMD is a 4-bit value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flag instructions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;CLC&#x9;&#x9;&#x9;; sets CF to 0&#xA;&#x9;STC&#x9;&#x9;&#x9;; sets CF to 1 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NOP&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;NOP&#x9;&#x9;&#x9;; does not effect any registers or memory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ORG&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;ORG IMD&#x9;&#x9;; sets the location of the next instruction&#xA;&#x9;&#x9;&#x9;&#x9;; must be further than the current length of program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;INC&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;INC &#34;file.bin&#34;&#x9;; copies the binary file into the program&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;p&gt;After having written a program, it is compiled with the commandline instruction&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;py compileExcelASM16.py program.s ROM.xlsx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;strong&gt;program.s&lt;/strong&gt; is the user&#39;s program file, and ROM.xlsx is the ROM spreadsheet&lt;/p&gt; &#xA;&lt;p&gt;After compiling successfully, the program can be transferred into the CPU.xlsx program by flipping the Read ROM button at the top of the spreadsheet. Note, the ROM.xlsx file must be open for the data to update correctly.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danielmiessler/fabric</title>
    <updated>2024-01-31T01:35:57Z</updated>
    <id>tag:github.com,2024-01-31:/danielmiessler/fabric</id>
    <link href="https://github.com/danielmiessler/fabric" rel="alternate"></link>
    <summary type="html">&lt;p&gt;fabric is an open-source framework for augmenting humans using AI.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- &lt;img src=&#34;https://beehiiv-images-production.s3.amazonaws.com/uploads/asset/file/971f362a-f3fa-427f-b619-7e04cc135d17/fabric-logo-miessler-transparent.png?t=1704525002&#34; alt=&#34;fabriclogo&#34; width=&#34;400&#34; height=&#34;400&#34;/&gt; --&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/images/fabric-logo-gif.gif&#34; alt=&#34;fabriclogo&#34; width=&#34;400&#34; height=&#34;400&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;fabric&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;h4&gt;&lt;code&gt;fabric&lt;/code&gt; is an open-source framework for augmenting humans using AI.&lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#description&#34;&gt;Description&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#naming&#34;&gt;Naming&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#structure&#34;&gt;Structure&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#functionality&#34;&gt;Functionality&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#examples&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#meta&#34;&gt;Meta&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;👋This is a very early release and &lt;em&gt;lots&lt;/em&gt; more documentation and functionality is currently being added.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Since the end of 2023 we&#39;ve seen a massive number of different AI applications for accomplishing tasks. The problem is that it&#39;s not easy to integrate them with our lives.&lt;/p&gt; &#xA;&lt;p&gt;Perhaps the greatest example is the number of AI prompts out there. We all have prompts that are useful, but it&#39;s hard to manage them, discover new ones, and track the different versions of the ones we like.&lt;/p&gt; &#xA;&lt;p&gt;One of &lt;code&gt;fabric&lt;/code&gt;&#39;s main features is helping people collect and integrate modular AI functionality, which we call &lt;em&gt;Patterns&lt;/em&gt;, into various parts of their lives.&lt;/p&gt; &#xA;&lt;p&gt;There are patterns for all sorts of life and work activities, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extracting the most interesting parts of YouTube videos and podcasts&lt;/li&gt; &#xA; &lt;li&gt;Summarizing opaque academic papers&lt;/li&gt; &#xA; &lt;li&gt;Creating perfectly matched AI art prompts for a piece of writing&lt;/li&gt; &#xA; &lt;li&gt;Rating the quality of content to see if you want to read/watch the whole thing&lt;/li&gt; &#xA; &lt;li&gt;Getting summaries of long, boring content&lt;/li&gt; &#xA; &lt;li&gt;Write a full essay in a particular voice, given an idea as input&lt;/li&gt; &#xA; &lt;li&gt;Create social media posts from any content input&lt;/li&gt; &#xA; &lt;li&gt;And a million more…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Naming&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fabric&lt;/code&gt; is themed off of, um…&lt;em&gt;fabric&lt;/em&gt;. So, think blankets, quilts, patterns, etc. Here&#39;s the structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project itself is called &lt;strong&gt;Fabric&lt;/strong&gt;, and it&#39;s the parent concept.&lt;/li&gt; &#xA; &lt;li&gt;Individual AI modules (think prompts) are called &lt;strong&gt;Patterns&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Chaining together &lt;em&gt;Patterns&lt;/em&gt; to create advanced functionality is called a &lt;strong&gt;Stitch&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The optional server-side functionality of &lt;code&gt;fabric&lt;/code&gt; is called the &lt;strong&gt;Mill&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The optional client-side scripts within &lt;code&gt;fabric&lt;/code&gt; are called &lt;strong&gt;Looms&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Functionality&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fabric&lt;/code&gt;&#39;s main function is to make &lt;strong&gt;Patterns&lt;/strong&gt; available to everyone in an open ecosystem, i.e., to allow people to share and fork prompts in a transparent, scalable, and dependable way.&lt;/p&gt; &#xA;&lt;p&gt;But it also includes two other components that make it possible for AI enthusiasts and developers to &lt;em&gt;build your own Personal AI Ecosystem&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;In other words you can have your own server, with your own copy of &lt;code&gt;fabric&lt;/code&gt;, running your own specific combination of &lt;strong&gt;Patterns&lt;/strong&gt; for your specific use cases.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here are the three &lt;code&gt;fabric&lt;/code&gt; ecosystem pieces, and how they work together.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;strong&gt;Mill&lt;/strong&gt; is the (optional) server that makes &lt;strong&gt;Patterns&lt;/strong&gt; available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Patterns&lt;/strong&gt; are the actual AI use cases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Looms&lt;/strong&gt; are the modular, client-side apps that call a specific **Pattern* hosted by a **Mill**.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;One key feature of &lt;code&gt;fabric&lt;/code&gt; and its Markdown-based format is the ability to reference (and edit) individual &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main#naming&#34;&gt;patterns&lt;/a&gt; directly—on their own—without surrounding code.&lt;/p&gt; &#xA;&lt;p&gt;As an example, heres how to call &lt;em&gt;the direct location&lt;/em&gt; of the &lt;strong&gt;system&lt;/strong&gt; prompt for the &lt;code&gt;extractwisdom&lt;/code&gt; pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means you can cleanly, and directly reference any pattern within &lt;code&gt;fabric&lt;/code&gt;, for use in a web-based AI app, your own programming, or wherever!&lt;/p&gt; &#xA;&lt;p&gt;Even better, you can also have your &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main#naming&#34;&gt;Mill&lt;/a&gt; functionality directly call &lt;strong&gt;system&lt;/strong&gt; and &lt;strong&gt;user&lt;/strong&gt; prompts from &lt;code&gt;fabric&lt;/code&gt;, meaning you can have your personal AI ecosystem automatically kept up to date with the latest version of your favorite &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main#naming&#34;&gt;Patterns&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an abridged ouptut example from the &lt;a href=&#34;https://github.com/danielmiessler/fabric/raw/main/patterns/extract_wisdom/system.md&#34;&gt;&lt;code&gt;extractwisdom&lt;/code&gt;&lt;/a&gt; pattern (limited to only 10 items per section).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## SUMMARY:&#xA;&#xA;The content features a conversation between two individuals discussing various topics, including the decline of Western culture, the importance of beauty and subtlety in life, the impact of technology and AI, the resonance of Rilke&#39;s poetry, the value of deep reading and revisiting texts, the captivating nature of Ayn Rand&#39;s writing, the role of philosophy in understanding the world, and the influence of drugs on society. They also touch upon creativity, attention spans, and the importance of introspection.&#xA;&#xA;## IDEAS:&#xA;&#xA;1. Western culture is perceived to be declining due to a loss of values and an embrace of mediocrity.&#xA;2. Mass media and technology have contributed to shorter attention spans and a need for constant stimulation.&#xA;3. Rilke&#39;s poetry resonates due to its focus on beauty and ecstasy in everyday objects.&#xA;4. Subtlety is often overlooked in modern society due to sensory overload.&#xA;5. The role of technology in shaping music and performance art is significant.&#xA;6. Reading habits have shifted from deep, repetitive reading to consuming large quantities of new material.&#xA;7. Revisiting influential books as one ages can lead to new insights based on accumulated wisdom and experiences.&#xA;8. Fiction can vividly illustrate philosophical concepts through characters and narratives.&#xA;9. Many influential thinkers have backgrounds in philosophy, highlighting its importance in shaping reasoning skills.&#xA;10. Philosophy is seen as a bridge between theology and science, asking questions that both fields seek to answer.&#xA;&#xA;## QUOTES:&#xA;&#xA;1. &#34;You can&#39;t necessarily think yourself into the answers. You have to create space for the answers to come to you.&#34;&#xA;2. &#34;The West is dying and we are killing her.&#34;&#xA;3. &#34;The American Dream has been replaced by mass packaged mediocrity porn, encouraging us to revel like happy pigs in our own meekness.&#34;&#xA;4. &#34;There&#39;s just not that many people who have the courage to reach beyond consensus and go explore new ideas.&#34;&#xA;5. &#34;I&#39;ll start watching Netflix when I&#39;ve read the whole of human history.&#34;&#xA;6. &#34;Rilke saw beauty in everything... He sees it&#39;s in one little thing, a representation of all things that are beautiful.&#34;&#xA;7. &#34;Vanilla is a very subtle flavor... it speaks to sort of the sensory overload of the modern age.&#34;&#xA;8. &#34;When you memorize chapters [of the Bible], it takes a few months, but you really understand how things are structured.&#34;&#xA;9. &#34;As you get older, if there&#39;s books that moved you when you were younger, it&#39;s worth going back and rereading them.&#34;&#xA;10. &#34;She [Ayn Rand] took complicated philosophy and embodied it in a way that anybody could resonate with.&#34;&#xA;&#xA;## HABITS:&#xA;&#xA;1. Avoiding mainstream media consumption for deeper engagement with historical texts and personal research.&#xA;2. Regularly revisiting influential books from youth to gain new insights with age.&#xA;3. Engaging in deep reading practices rather than skimming or speed-reading material.&#xA;4. Memorizing entire chapters or passages from significant texts for better understanding.&#xA;5. Disengaging from social media and fast-paced news cycles for more focused thought processes.&#xA;6. Walking long distances as a form of meditation and reflection.&#xA;7. Creating space for thoughts to solidify through introspection and stillness.&#xA;8. Embracing emotions such as grief or anger fully rather than suppressing them.&#xA;9. Seeking out varied experiences across different careers and lifestyles.&#xA;10. Prioritizing curiosity-driven research without specific goals or constraints.&#xA;&#xA;## FACTS:&#xA;&#xA;1. The West is perceived as declining due to cultural shifts away from traditional values.&#xA;2. Attention spans have shortened due to technological advancements and media consumption habits.&#xA;3. Rilke&#39;s poetry emphasizes finding beauty in everyday objects through detailed observation.&#xA;4. Modern society often overlooks subtlety due to sensory overload from various stimuli.&#xA;5. Reading habits have evolved from deep engagement with texts to consuming large quantities quickly.&#xA;6. Revisiting influential books can lead to new insights based on accumulated life experiences.&#xA;7. Fiction can effectively illustrate philosophical concepts through character development and narrative arcs.&#xA;8. Philosophy plays a significant role in shaping reasoning skills and understanding complex ideas.&#xA;9. Creativity may be stifled by cultural nihilism and protectionist attitudes within society.&#xA;10. Short-term thinking undermines efforts to create lasting works of beauty or significance.&#xA;&#xA;## REFERENCES:&#xA;&#xA;1. Rainer Maria Rilke&#39;s poetry&#xA;2. Netflix&#xA;3. Underworld concert&#xA;4. Katy Perry&#39;s theatrical performances&#xA;5. Taylor Swift&#39;s performances&#xA;6. Bible study&#xA;7. Atlas Shrugged by Ayn Rand&#xA;8. Robert Pirsig&#39;s writings&#xA;9. Bertrand Russell&#39;s definition of philosophy&#xA;10. Nietzsche&#39;s walks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fabric&lt;/code&gt; was created by &lt;a href=&#34;https://danielmiessler.com/&#34; target=&#34;_blank&#34;&gt;Daniel Miessler&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to the following people for inspiration and contributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Caleb Sima&lt;/strong&gt; for pushing me over the edge of whether to make this a public project or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Joel Parish&lt;/strong&gt; for super useful input on the project&#39;s Github directory structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Jonathan Dunn&lt;/strong&gt; for spectacular work on the soon-to-be-released standalone client.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kyegomez/MORPHEUS-1</title>
    <updated>2024-01-31T01:35:57Z</updated>
    <id>tag:github.com,2024-01-31:/kyegomez/MORPHEUS-1</id>
    <link href="https://github.com/kyegomez/MORPHEUS-1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of &#34;MORPHEUS-1&#34; from Prophetic AI and &#34;The world’s first multi-modal generative ultrasonic transformer designed to induce and stabilize lucid dreams. &#34;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://discord.gg/qUtxnK2NMf&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kyegomez/MORPHEUS-1/main/agorabanner.png&#34; alt=&#34;Multi-Modality&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Morpheus 1&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kyegomez/MORPHEUS-1/main/morpheus.jpeg&#34; alt=&#34;Morphesus transformer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Implementation of &#34;MORPHEUS-1&#34; from Prophetic AI and &#34;The world’s first multi-modal generative ultrasonic transformer designed to induce and stabilize lucid dreams. &#34;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install morpheus-torch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The input is FRMI and EEG tensors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FRMI shape is (batch_size, in_channels, D, H, W)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;EEG Embedding is [batch_size, channels, time_samples]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Importing the torch library&#xA;import torch&#xA;&#xA;# Importing the Morpheus model from the morpheus_torch package&#xA;from morpheus_torch.model import Morpheus&#xA;&#xA;# Creating an instance of the Morpheus model with specified parameters&#xA;model = Morpheus(&#xA;    dim=128,  # Dimension of the model&#xA;    heads=4,  # Number of attention heads&#xA;    depth=2,  # Number of transformer layers&#xA;    dim_head=32,  # Dimension of each attention head&#xA;    dropout=0.1,  # Dropout rate&#xA;    num_channels=32,  # Number of input channels&#xA;    conv_channels=32,  # Number of channels in convolutional layers&#xA;    kernel_size=3,  # Kernel size for convolutional layers&#xA;    in_channels=1,  # Number of input channels for convolutional layers&#xA;    out_channels=32,  # Number of output channels for convolutional layers&#xA;    stride=1,  # Stride for convolutional layers&#xA;    padding=1,  # Padding for convolutional layers&#xA;    ff_mult=4,  # Multiplier for feed-forward layer dimension&#xA;    scatter = False, # Whether to scatter to 4d representing spatial dimensions&#xA;)&#xA;&#xA;# Creating random tensors for input data&#xA;frmi = torch.randn(1, 1, 32, 32, 32)  # Random tensor for FRMI data&#xA;eeg = torch.randn(1, 32, 128)  # Random tensor for EEG data&#xA;&#xA;# Passing the input data through the model to get the output&#xA;output = model(frmi, eeg)&#xA;&#xA;# Printing the shape of the output tensor&#xA;print(output.shape)&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code Quality 🧹&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make style&lt;/code&gt; to format the code&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make check_code_quality&lt;/code&gt; to check code quality (PEP8 basically)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;black .&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ruff . --fix&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h1&gt;Todo&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Implement the scatter in the end of the decoder to output spatial outputs which are 4d?&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Implement a full model with the depth of the decoder layers&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Change all the MHAs to Multi Query Attentions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Double check popular brain scan EEG and FRMI AI papers to double check tensor shape&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>