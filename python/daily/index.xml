<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-03T01:36:06Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jekalmin/extended_openai_conversation</title>
    <updated>2024-01-03T01:36:06Z</updated>
    <id>tag:github.com,2024-01-03:/jekalmin/extended_openai_conversation</id>
    <link href="https://github.com/jekalmin/extended_openai_conversation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home Assistant custom component of conversation agent. It uses OpenAI to control your devices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Extended OpenAI Conversation&lt;/h1&gt; &#xA;&lt;p&gt;This is custom component of Home Assistant.&lt;/p&gt; &#xA;&lt;p&gt;Derived from &lt;a href=&#34;https://www.home-assistant.io/integrations/openai_conversation/&#34;&gt;OpenAI Conversation&lt;/a&gt; with some new features such as call-service.&lt;/p&gt; &#xA;&lt;h2&gt;Additional Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ability to call service of Home Assistant&lt;/li&gt; &#xA; &lt;li&gt;Ability to create automation&lt;/li&gt; &#xA; &lt;li&gt;Ability to get data from external API or web page&lt;/li&gt; &#xA; &lt;li&gt;Ability to retrieve state history of entities&lt;/li&gt; &#xA; &lt;li&gt;Option to pass the current user&#39;s name to OpenAI via the user message context&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Extended OpenAI Conversation uses OpenAI API&#39;s feature of &lt;a href=&#34;https://platform.openai.com/docs/guides/function-calling&#34;&gt;function calling&lt;/a&gt; to call service of Home Assistant.&lt;/p&gt; &#xA;&lt;p&gt;Since &#34;gpt-3.5-turbo&#34; model already knows how to call service of Home Assistant in general, you just have to let model know what devices you have by &lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation#preparation&#34;&gt;exposing entities&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install via HACS or by copying &lt;code&gt;extended_openai_conversation&lt;/code&gt; folder into &lt;code&gt;&amp;lt;config directory&amp;gt;/custom_components&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Home Assistant&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to Settings &amp;gt; Devices &amp;amp; Services.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the bottom right corner, select the Add Integration button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow the instructions on screen to complete the setup (API Key is required).&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/integrations/openai_conversation/#generate-an-api-key&#34;&gt;Generating an API Key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Specify &#34;Base Url&#34; if using OpenAI compatible servers like LocalAI, otherwise leave as it is.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to Settings &amp;gt; &lt;a href=&#34;https://my.home-assistant.io/redirect/voice_assistants/&#34;&gt;Voice Assistants&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click to edit Assistant (named &#34;Home Assistant&#34; by default).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select &#34;Extended OpenAI Conversation&#34; from &#34;Conversation agent&#34; tab.&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;guide image&lt;/summary&gt; &#xA;   &lt;img width=&#34;500&#34; alt=&#34;스크린샷 2023-10-07 오후 6 15 29&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/0849d241-0b82-47f6-9956-fdb82d678aca&#34;&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;p&gt;After installed, you need to expose entities from &#34;http://{your-home-assistant}/config/voice-assistants/expose&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;1. Turn on single entity&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/938dee95-8907-44fd-9fb8-dc8cd559fea2&#34;&gt;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/938dee95-8907-44fd-9fb8-dc8cd559fea2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Turn on multiple entities&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/528f5965-94a7-4cbe-908a-e24f7bbb0a93&#34;&gt;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/528f5965-94a7-4cbe-908a-e24f7bbb0a93&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Hook with custom notify function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/4a575ee7-0188-41eb-b2db-6eab61499a99&#34;&gt;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/4a575ee7-0188-41eb-b2db-6eab61499a99&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. Add automation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/04b93aa6-085e-450a-a554-34c1ed1fbb36&#34;&gt;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/04b93aa6-085e-450a-a554-34c1ed1fbb36&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5. Play Netflix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/64ba656e-3ae7-4003-9956-da71efaf06dc&#34;&gt;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/64ba656e-3ae7-4003-9956-da71efaf06dc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;By clicking a button from Edit Assist, Options can be customized.&lt;br&gt; Options include &lt;a href=&#34;https://www.home-assistant.io/integrations/openai_conversation/&#34;&gt;OpenAI Conversation&lt;/a&gt; options and two new options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Attach Username&lt;/code&gt;: Pass the active user&#39;s name (if applicable) to OpenAI via the message payload. Currently, this only applies to conversations through the UI or REST API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Maximum Function Calls Per Conversation&lt;/code&gt;: limit the number of function calls in a single conversation. (Sometimes function is called over and over again, possibly running into infinite loop)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Functions&lt;/code&gt;: A list of mappings of function spec to function.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;spec&lt;/code&gt;: Function which would be passed to &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create#chat-create-functions&#34;&gt;functions&lt;/a&gt; of &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create&#34;&gt;chat API&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;function&lt;/code&gt;: function that will be called.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Edit Assist&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;608&#34; alt=&#34;1&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/bb394cd4-5790-4ac9-9311-dbcab0fcca56&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;591&#34; alt=&#34;스크린샷 2023-10-10 오후 10 53 57&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/431e4bc5-87a0-4d7b-8da0-6273f955877f&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;h4&gt;Supported function types&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;native&lt;/code&gt;: built-in function provided by &#34;extended_openai_conversation&#34;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently supported native functions and parameters are: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;execute_service&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;domain&lt;/code&gt;(string): domain to be passed to &lt;code&gt;hass.services.async_call&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;service&lt;/code&gt;(string): service to be passed to &lt;code&gt;hass.services.async_call&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;service_data&lt;/code&gt;(string): service_data to be passed to &lt;code&gt;hass.services.async_call&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;add_automation&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;automation_config&lt;/code&gt;(string): An automation configuration in a yaml format&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;get_history&lt;/code&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;entity_ids&lt;/code&gt;(list): a list of entity ids to filter&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;start_time&lt;/code&gt;(string): defaults to 1 day before the time of the request. It determines the beginning of the period&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;end_time&lt;/code&gt;(string): the end of the period in URL encoded format (defaults to 1 day)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;minimal_response&lt;/code&gt;(boolean): only return last_changed and state for states other than the first and last state (defaults to true)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;no_attributes&lt;/code&gt;(boolean): skip returning attributes from the database (defaults to true)&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;significant_changes_only&lt;/code&gt;(boolean): only return significant state changes (defaults to true)&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;script&lt;/code&gt;: A list of services that will be called&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;template&lt;/code&gt;: The value to be returned from function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rest&lt;/code&gt;: Getting data from REST API endpoint.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scrape&lt;/code&gt;: Scraping information from website&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;composite&lt;/code&gt;: A sequence of functions to execute.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below is a default configuration of functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: execute_services&#xA;    description: Use this function to execute service of devices in Home Assistant.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        list:&#xA;          type: array&#xA;          items:&#xA;            type: object&#xA;            properties:&#xA;              domain:&#xA;                type: string&#xA;                description: The domain of the service&#xA;              service:&#xA;                type: string&#xA;                description: The service to be called&#xA;              service_data:&#xA;                type: object&#xA;                description: The service data object to indicate what to control.&#xA;                properties:&#xA;                  entity_id:&#xA;                    type: string&#xA;                    description: The entity_id retrieved from available devices. It must start with domain, followed by dot character.&#xA;                required:&#xA;                - entity_id&#xA;            required:&#xA;            - domain&#xA;            - service&#xA;            - service_data&#xA;  function:&#xA;    type: native&#xA;    name: execute_service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Function Usage&lt;/h2&gt; &#xA;&lt;p&gt;This is an example of configuration of functions.&lt;/p&gt; &#xA;&lt;p&gt;Copy and paste below yaml configuration into &#34;Functions&#34;.&lt;br&gt; Then you will be able to let OpenAI call your function.&lt;/p&gt; &#xA;&lt;h3&gt;1. template&lt;/h3&gt; &#xA;&lt;h4&gt;1-1. Get current weather&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: get_current_weather&#xA;    description: Get the current weather in a given location&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        location:&#xA;          type: string&#xA;          description: The city and state, e.g. San Francisco, CA&#xA;        unit:&#xA;          type: string&#xA;          enum:&#xA;          - celcius&#xA;          - farenheit&#xA;      required:&#xA;      - location&#xA;  function:&#xA;    type: template&#xA;    value_template: The temperature in {{ location }} is 25 {{unit}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-10-07 오후 7 56 27&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/05e31ea5-daab-4759-b57d-9f5be546bac8&#34;&gt; &#xA;&lt;h3&gt;2. script&lt;/h3&gt; &#xA;&lt;h4&gt;2-1. Add item to shopping cart&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: add_item_to_shopping_cart&#xA;    description: Add item to shopping cart&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        item:&#xA;          type: string&#xA;          description: The item to be added to cart&#xA;      required:&#xA;      - item&#xA;  function:&#xA;    type: script&#xA;    sequence:&#xA;    - service: shopping_list.add_item&#xA;      data:&#xA;        name: &#39;{{item}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-10-07 오후 7 54 56&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/89060728-4703-4e57-8423-354cdc47f0ee&#34;&gt; &#xA;&lt;h4&gt;2-2. Send messages to another messenger&lt;/h4&gt; &#xA;&lt;p&gt;In order to accomplish &#34;send it to Line&#34; like &lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation#3-hook-with-custom-notify-function&#34;&gt;example3&lt;/a&gt;, register a notify function like below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: send_message_to_line&#xA;    description: Use this function to send message to Line.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        message:&#xA;          type: string&#xA;          description: message you want to send&#xA;      required:&#xA;      - message&#xA;  function:&#xA;    type: script&#xA;    sequence:&#xA;    - service: script.notify_all&#xA;      data:&#xA;        message: &#34;{{ message }}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/16dc4ca0-c823-4dfe-a2b7-1ba7623acc70&#34;&gt; &#xA;&lt;h4&gt;2-3. Get events from calendar&lt;/h4&gt; &#xA;&lt;p&gt;In order to pass result of calling service to OpenAI, set response variable to &lt;code&gt;_function_result&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: get_events&#xA;    description: Use this function to get list of calendar events.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        start_date_time:&#xA;          type: string&#xA;          description: The start date time in &#39;%Y-%m-%dT%H:%M:%S%z&#39; format&#xA;        end_date_time:&#xA;          type: string&#xA;          description: The end date time in &#39;%Y-%m-%dT%H:%M:%S%z&#39; format&#xA;      required:&#xA;      - start_date_time&#xA;      - end_date_time&#xA;  function:&#xA;    type: script&#xA;    sequence:&#xA;    - service: calendar.list_events&#xA;      data:&#xA;        start_date_time: &#34;{{start_date_time}}&#34;&#xA;        end_date_time: &#34;{{end_date_time}}&#34;&#xA;      target:&#xA;        entity_id: calendar.test&#xA;      response_variable: _function_result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-10-31 오후 9 04 56&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/7a6c6925-a53e-4363-a93c-45f63951d41b&#34;&gt; &#xA;&lt;h4&gt;2-4. Play Youtube on TV&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: play_youtube&#xA;    description: Use this function to play Youtube.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        video_id:&#xA;          type: string&#xA;          description: The video id.&#xA;      required:&#xA;      - video_id&#xA;  function:&#xA;    type: script&#xA;    sequence:&#xA;    - service: webostv.command&#xA;      data:&#xA;        entity_id: media_player.{YOUR_WEBOSTV}&#xA;        command: system.launcher/launch&#xA;        payload:&#xA;          id: youtube.leanback.v4&#xA;          contentId: &#34;{{video_id}}&#34;&#xA;    - delay:&#xA;        hours: 0&#xA;        minutes: 0&#xA;        seconds: 10&#xA;        milliseconds: 0&#xA;    - service: webostv.button&#xA;      data:&#xA;        entity_id: media_player.{YOUR_WEBOSTV}&#xA;        button: ENTER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/d5c9e0db-8d7c-4a7a-bc46-b043627ffec6&#34;&gt; &#xA;&lt;h4&gt;2-5. Play Netflix on TV&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: play_netflix&#xA;    description: Use this function to play Netflix.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        video_id:&#xA;          type: string&#xA;          description: The video id.&#xA;      required:&#xA;      - video_id&#xA;  function:&#xA;    type: script&#xA;    sequence:&#xA;    - service: webostv.command&#xA;      data:&#xA;        entity_id: media_player.{YOUR_WEBOSTV}&#xA;        command: system.launcher/launch&#xA;        payload:&#xA;          id: netflix&#xA;          contentId: &#34;m=https://www.netflix.com/watch/{{video_id}}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/346065d3-7ab9-49c8-ba30-b79b37a5f084&#34;&gt; &#xA;&lt;h3&gt;3. native&lt;/h3&gt; &#xA;&lt;h4&gt;3-1. Add automation&lt;/h4&gt; &#xA;&lt;p&gt;Before adding automation, I highly recommend set notification on &lt;code&gt;automation_registered_via_extended_openai_conversation&lt;/code&gt; event and create separate &#34;Extended OpenAI Assistant&#34; and &#34;Assistant&#34;&lt;/p&gt; &#xA;&lt;p&gt;(Automation can be added even if conversation fails because of failure to get response message, not automation)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Create Assistant&lt;/th&gt; &#xA;   &lt;th&gt;Notify on created&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;830&#34; alt=&#34;1&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/b7030a46-9a4e-4ea8-a4ed-03d2eb3af0a9&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;1116&#34; alt=&#34;스크린샷 2023-10-13 오후 6 01 40&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/7afa3709-1c1d-41d0-8847-70f2102d824f&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Copy and paste below configuration into &#34;Functions&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For English&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: add_automation&#xA;    description: Use this function to add an automation in Home Assistant.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        automation_config:&#xA;          type: string&#xA;          description: A configuration for automation in a valid yaml format. Next line character should be \n. Use devices from the list.&#xA;      required:&#xA;      - automation_config&#xA;  function:&#xA;    type: native&#xA;    name: add_automation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;For Korean&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: add_automation&#xA;    description: Use this function to add an automation in Home Assistant.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        automation_config:&#xA;          type: string&#xA;          description: A configuration for automation in a valid yaml format. Next line character should be \\n, not \n. Use devices from the list.&#xA;      required:&#xA;      - automation_config&#xA;  function:&#xA;    type: native&#xA;    name: add_automation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-10-31 오후 9 32 27&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/55f5fe7e-b1fd-43c9-bce6-ac92e203598f&#34;&gt; &#xA;&lt;h4&gt;3-2. Get History&lt;/h4&gt; &#xA;&lt;p&gt;Get state history of entities&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: get_history&#xA;    description: Retrieve historical data of specified entities.&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        entity_ids:&#xA;          type: array&#xA;          items:&#xA;            type: string&#xA;            description: The entity id to filter.&#xA;        start_time:&#xA;          type: string&#xA;          description: Start of the history period in &#34;%Y-%m-%dT%H:%M:%S%z&#34;.&#xA;        end_time:&#xA;          type: string&#xA;          description: End of the history period in &#34;%Y-%m-%dT%H:%M:%S%z&#34;.&#xA;      required:&#xA;      - entity_ids&#xA;  function:&#xA;    type: composite&#xA;    sequence:&#xA;      - type: native&#xA;        name: get_history&#xA;        response_variable: history_result&#xA;      - type: template&#xA;        value_template: &amp;gt;-&#xA;          {% set ns = namespace(result = [], list = []) %}&#xA;          {% for item_list in history_result %}&#xA;              {% set ns.list = [] %}&#xA;              {% for item in item_list %}&#xA;                  {% set last_changed = item.last_changed | as_timestamp | timestamp_local if item.last_changed else None %}&#xA;                  {% set new_item = dict(item, last_changed=last_changed) %}&#xA;                  {% set ns.list = ns.list + [new_item] %}&#xA;              {% endfor %}&#xA;              {% set ns.result = ns.result + [ns.list] %}&#xA;          {% endfor %}&#xA;          {{ ns.result }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/32217f3d-10fc-4001-9028-717b1683573b&#34;&gt; &#xA;&lt;h3&gt;4. scrape&lt;/h3&gt; &#xA;&lt;h4&gt;4-1. Get current HA version&lt;/h4&gt; &#xA;&lt;p&gt;Scrape version from webpage, &#34;&lt;a href=&#34;https://www.home-assistant.io&#34;&gt;https://www.home-assistant.io&lt;/a&gt;&#34;&lt;/p&gt; &#xA;&lt;p&gt;Unlike &lt;a href=&#34;https://www.home-assistant.io/integrations/scrape/&#34;&gt;scrape&lt;/a&gt;, &#34;value_template&#34; is added at root level in which scraped data from sensors are passed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: get_ha_version&#xA;    description: Use this function to get Home Assistant version&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        dummy:&#xA;          type: string&#xA;          description: Nothing&#xA;  function:&#xA;    type: scrape&#xA;    resource: https://www.home-assistant.io&#xA;    value_template: &#34;version: {{version}}, release_date: {{release_date}}&#34;&#xA;    sensor:&#xA;      - name: version&#xA;        select: &#34;.current-version h1&#34;&#xA;        value_template: &#39;{{ value.split(&#34;:&#34;)[1] }}&#39;&#xA;      - name: release_date&#xA;        select: &#34;.release-date&#34;&#xA;        value_template: &#39;{{ value.lower() }}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-10-31 오후 9 46 07&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/e640c3f3-8d68-486b-818e-bd81bf71c2f7&#34;&gt; &#xA;&lt;h3&gt;5. rest&lt;/h3&gt; &#xA;&lt;h4&gt;5-1. Get friend names&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sample URL: &lt;a href=&#34;https://jsonplaceholder.typicode.com/users&#34;&gt;https://jsonplaceholder.typicode.com/users&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: get_friend_names&#xA;    description: Use this function to get friend_names&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        dummy:&#xA;          type: string&#xA;          description: Nothing.&#xA;  function:&#xA;    type: rest&#xA;    resource: https://jsonplaceholder.typicode.com/users&#xA;    value_template: &#39;{{value_json | map(attribute=&#34;name&#34;) | list }}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-10-31 오후 9 48 36&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/f968e328-5163-4c41-a479-76a5406522c1&#34;&gt; &#xA;&lt;h3&gt;6. composite&lt;/h3&gt; &#xA;&lt;h4&gt;6-1. Search Youtube Music&lt;/h4&gt; &#xA;&lt;p&gt;When using &lt;a href=&#34;https://github.com/KoljaWindeler/ytube_music_player&#34;&gt;ytube_music_player&lt;/a&gt;, after &lt;code&gt;ytube_music_player.search&lt;/code&gt; service is called, result is stored in attribute of &lt;code&gt;sensor.ytube_music_player_extra&lt;/code&gt; entity.&lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: search_music&#xA;    description: Use this function to search music&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        query:&#xA;          type: string&#xA;          description: The query&#xA;      required:&#xA;      - query&#xA;  function:&#xA;    type: composite&#xA;    sequence:&#xA;    - type: script&#xA;      sequence:&#xA;      - service: ytube_music_player.search&#xA;        data:&#xA;          entity_id: media_player.ytube_music_player&#xA;          query: &#34;{{ query }}&#34;&#xA;    - type: template&#xA;      value_template: &amp;gt;-&#xA;        media_content_type,media_content_id,title&#xA;        {% for media in state_attr(&#39;sensor.ytube_music_player_extra&#39;, &#39;search&#39;) -%}&#xA;          {{media.type}},{{media.id}},{{media.title}}&#xA;        {% endfor%}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-11-02 오후 8 40 36&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/648efef8-40d1-45d2-b3f9-9bac4a36c517&#34;&gt; &#xA;&lt;h3&gt;7. sqlite&lt;/h3&gt; &#xA;&lt;h4&gt;7-1. Let model generate a query&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Without examples, a query tries to fetch data only from &#34;states&#34; table like below &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Question: When did bedroom light turn on? &lt;br&gt; Query(generated by gpt-3.5): SELECT * FROM states WHERE entity_id = &#39;input_boolean.livingroom_light_2&#39; AND state = &#39;on&#39; ORDER BY last_changed DESC LIMIT 1&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Since &#34;entity_id&#34; is stored in &#34;states_meta&#34; table, we need to give examples of question and query.&lt;/li&gt; &#xA; &lt;li&gt;Not secured, but flexible way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: query_histories_from_db&#xA;    description: &amp;gt;-&#xA;      Use this function to query histories from Home Assistant SQLite database.&#xA;      Example:&#xA;        Question: When did bedroom light turn on?&#xA;        Answer: SELECT datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;localtime&#39;) last_updated_ts FROM states s INNER JOIN states_meta sm ON s.metadata_id = sm.metadata_id INNER JOIN states old ON s.old_state_id = old.state_id WHERE sm.entity_id = &#39;light.bedroom&#39; AND s.state = &#39;on&#39; AND s.state != old.state ORDER BY s.last_updated_ts DESC LIMIT 1&#xA;        Question: Was livingroom light on at 9 am?&#xA;        Answer: SELECT datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;localtime&#39;) last_updated, s.state FROM states s INNER JOIN states_meta sm ON s.metadata_id = sm.metadata_id INNER JOIN states old ON s.old_state_id = old.state_id WHERE sm.entity_id = &#39;switch.livingroom&#39; AND s.state != old.state AND datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;localtime&#39;) &amp;lt; &#39;2023-11-17 08:00:00&#39; ORDER BY s.last_updated_ts DESC LIMIT 1&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        query:&#xA;          type: string&#xA;          description: A fully formed SQL query.&#xA;  function:&#xA;    type: sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Get last changed date time of state&lt;/th&gt; &#xA;   &lt;th&gt;Get state at specific time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-11-19 오후 5 32 56&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/5a25db59-f66c-4dfd-9e7b-ae6982ed3cd2&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img width=&#34;300&#34; alt=&#34;스크린샷 2023-11-19 오후 5 32 30&#34; src=&#34;https://github.com/jekalmin/extended_openai_conversation/assets/2917984/51faaa26-3294-4f96-b115-c71b268b708e&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Can gpt modify or delete data? &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;No, since connection is created in a read only mode, data are only used for fetching.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Can gpt query data that are not exposed in database? &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Yes, it is hard to validate whether a query is only using exposed entities.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Query uses UTC time. Is there any way to adjust timezone? &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Yes. Set &#34;TZ&#34; environment variable to your &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_tz_database_time_zones&#34;&gt;region&lt;/a&gt; (eg. &lt;code&gt;Asia/Seoul&lt;/code&gt;). &lt;br&gt; Or use plus/minus hours to adjust instead of &#39;localtime&#39; (eg. &lt;code&gt;datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;+9 hours&#39;)&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;7-2. Let model generate a query (with minimum validation)&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If need to check at least &#34;entity_id&#34; of exposed entities is present in a query, use &#34;is_exposed_entity_in_query&#34; in combination with &#34;raise&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Not secured enough, but flexible way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: query_histories_from_db&#xA;    description: &amp;gt;-&#xA;      Use this function to query histories from Home Assistant SQLite database.&#xA;      Example:&#xA;        Question: When did bedroom light turn on?&#xA;        Answer: SELECT datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;localtime&#39;) last_updated_ts FROM states s INNER JOIN states_meta sm ON s.metadata_id = sm.metadata_id INNER JOIN states old ON s.old_state_id = old.state_id WHERE sm.entity_id = &#39;light.bedroom&#39; AND s.state = &#39;on&#39; AND s.state != old.state ORDER BY s.last_updated_ts DESC LIMIT 1&#xA;        Question: Was livingroom light on at 9 am?&#xA;        Answer: SELECT datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;localtime&#39;) last_updated, s.state FROM states s INNER JOIN states_meta sm ON s.metadata_id = sm.metadata_id INNER JOIN states old ON s.old_state_id = old.state_id WHERE sm.entity_id = &#39;switch.livingroom&#39; AND s.state != old.state AND datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;localtime&#39;) &amp;lt; &#39;2023-11-17 08:00:00&#39; ORDER BY s.last_updated_ts DESC LIMIT 1&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        query:&#xA;          type: string&#xA;          description: A fully formed SQL query.&#xA;  function:&#xA;    type: sqlite&#xA;    query: &amp;gt;-&#xA;      {%- if is_exposed_entity_in_query(query) -%}&#xA;        {{ query }}&#xA;      {%- else -%}&#xA;        {{ raise(&#34;entity_id should be exposed.&#34;) }}&#xA;      {%- endif -%}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;7-3. Defined SQL manually&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use a user defined query, which is verified. And model passes a requested entity to get data from database.&lt;/li&gt; &#xA; &lt;li&gt;Secured, but less flexible way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- spec:&#xA;    name: get_last_updated_time_of_entity&#xA;    description: &amp;gt;&#xA;      Use this function to get last updated time of entity&#xA;    parameters:&#xA;      type: object&#xA;      properties:&#xA;        entity_id:&#xA;          type: string&#xA;          description: The target entity&#xA;  function:&#xA;    type: sqlite&#xA;    query: &amp;gt;-&#xA;      {%- if is_exposed(entity_id) -%}&#xA;        SELECT datetime(s.last_updated_ts, &#39;unixepoch&#39;, &#39;localtime&#39;) as last_updated_ts&#xA;        FROM states s&#xA;          INNER JOIN states_meta sm ON s.metadata_id = sm.metadata_id&#xA;          INNER JOIN states old ON s.old_state_id = old.state_id&#xA;        WHERE sm.entity_id = &#39;{{entity_id}}&#39; AND s.state != old.state ORDER BY s.last_updated_ts DESC LIMIT 1&#xA;      {%- else -%}&#xA;        {{ raise(&#34;entity_id should be exposed.&#34;) }}&#xA;      {%- endif -%}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Practical Usage&lt;/h2&gt; &#xA;&lt;p&gt;See more practical &lt;a href=&#34;https://github.com/jekalmin/extended_openai_conversation/tree/main/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;In order to monitor logs of API requests and responses, add following config to &lt;code&gt;configuration.yaml&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;logger:&#xA;  logs:&#xA;    custom_components.extended_openai_conversation: info&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lucidrains/DALLE2-pytorch</title>
    <updated>2024-01-03T01:36:06Z</updated>
    <id>tag:github.com,2024-01-03:/lucidrains/DALLE2-pytorch</id>
    <link href="https://github.com/lucidrains/DALLE2-pytorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of DALL-E 2, OpenAI&#39;s updated text-to-image synthesis neural network, in Pytorch&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lucidrains/DALLE2-pytorch/main/dalle2.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;DALL-E 2 - Pytorch&lt;/h2&gt; &#xA;&lt;p&gt;Implementation of &lt;a href=&#34;https://openai.com/dall-e-2/&#34;&gt;DALL-E 2&lt;/a&gt;, OpenAI&#39;s updated text-to-image synthesis neural network, in Pytorch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/RJwPN4qNi_Y?t=555&#34;&gt;Yannic Kilcher summary&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=F1X4fHzF4mQ&#34;&gt;AssemblyAI explainer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The main novelty seems to be an extra layer of indirection with the prior network (whether it is an autoregressive transformer or a diffusion network), which predicts an image embedding based on the text embedding from CLIP. Specifically, this repository will only build out the diffusion prior network, as it is the best performing variant (but which incidentally involves a causal transformer as the denoising network 😂)&lt;/p&gt; &#xA;&lt;p&gt;This model is SOTA for text-to-image for now.&lt;/p&gt; &#xA;&lt;p&gt;Please join &lt;a href=&#34;https://discord.gg/xBPBXfcFHd&#34;&gt;&lt;img alt=&#34;Join us on Discord&#34; src=&#34;https://img.shields.io/discord/823813159592001537?color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; if you are interested in helping out with the replication with the &lt;a href=&#34;https://laion.ai/&#34;&gt;LAION&lt;/a&gt; community | &lt;a href=&#34;https://www.youtube.com/watch?v=AIOE1l1W0Tw&#34;&gt;Yannic Interview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As of 5/23/22, it is no longer SOTA. SOTA will be &lt;a href=&#34;https://github.com/lucidrains/imagen-pytorch&#34;&gt;here&lt;/a&gt;. Jax versions as well as text-to-video project will be shifted towards the Imagen architecture, as it is way simpler.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;A research group has used the code in this repository to train a functional diffusion prior for their CLIP generations. Will share their work once they release their preprint. This, and &lt;a href=&#34;https://github.com/crowsonkb&#34;&gt;Katherine&#39;s&lt;/a&gt; own experiments, validate OpenAI&#39;s finding that the extra prior increases variety of generations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Decoder is now verified working for unconditional generation on my experimental setup for Oxford flowers. 2 researchers have also confirmed Decoder is working for them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/lucidrains/DALLE2-pytorch/main/samples/oxford.png&#34; width=&#34;450px&#34;&gt; &#xA;&lt;p&gt;&lt;em&gt;ongoing at 21k steps&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/Buntworthy/status/1529475416775434240?t=0GEge3Kr9I36cjcUVCQUTg&#34;&gt;Justin Pinkney&lt;/a&gt; successfully trained the diffusion prior in the repository for his CLIP to Stylegan2 text-to-image application&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rom1504&#34;&gt;Romain&lt;/a&gt; has scaled up training to 800 GPUs with the available scripts without any issues&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pre-Trained Models&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LAION is training prior models. Checkpoints are available on &lt;a href=&#34;https://huggingface.co/zenglishuci/conditioned-prior&#34;&gt;🤗huggingface&lt;/a&gt; and the training statistics are available on &lt;a href=&#34;https://wandb.ai/nousr_laion/conditioned-prior/reports/LAION-DALLE2-PyTorch-Prior--VmlldzoyMDI2OTIx&#34;&gt;🐝WANDB&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Decoder - &lt;a href=&#34;https://wandb.ai/veldrovive/dalle2_train_decoder/runs/jkrtg0so?workspace=user-veldrovive&#34;&gt;In-progress test run&lt;/a&gt; 🚧&lt;/li&gt; &#xA; &lt;li&gt;Decoder - &lt;a href=&#34;https://wandb.ai/veldrovive/dalle2_train_decoder/runs/3d5rytsa?workspace=&#34;&gt;Another test run with sparse attention&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DALL-E 2 🚧 - &lt;a href=&#34;https://github.com/LAION-AI/dalle2-laion&#34;&gt;DALL-E 2 Laion repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appreciation&lt;/h2&gt; &#xA;&lt;p&gt;This library would not have gotten to this working state without the help of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nousr&#34;&gt;Zion&lt;/a&gt; for the distributed training code for the diffusion prior&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Veldrovive&#34;&gt;Aidan&lt;/a&gt; for the distributed training code for the decoder as well as the dataloaders&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krish240574&#34;&gt;Kumar&lt;/a&gt; for working on the initial diffusion training script&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rom1504&#34;&gt;Romain&lt;/a&gt; for the pull request reviews and project management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ciaohe&#34;&gt;He Cao&lt;/a&gt; and &lt;a href=&#34;https://github.com/xiankgx&#34;&gt;xiankgx&lt;/a&gt; for the Q&amp;amp;A and for identifying of critical bugs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marunine&#34;&gt;Marunine&lt;/a&gt; for identifying issues with resizing of the low resolution conditioner, when training the upsampler, in addition to various other bug fixes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/malumadev&#34;&gt;MalumaDev&lt;/a&gt; for proposing the use of pixel shuffle upsampler for fixing checkboard artifacts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crowsonkb&#34;&gt;Katherine&lt;/a&gt; for her advice&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stability.ai/&#34;&gt;Stability AI&lt;/a&gt; for the generous sponsorship&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co&#34;&gt;🤗 Huggingface&lt;/a&gt; and in particular &lt;a href=&#34;https://github.com/sgugger&#34;&gt;Sylvain&lt;/a&gt; for the &lt;a href=&#34;https://github.com/huggingface/accelerate&#34;&gt;Accelerate&lt;/a&gt; library&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arogozhnikov&#34;&gt;Alex&lt;/a&gt; for &lt;a href=&#34;https://github.com/arogozhnikov/einops&#34;&gt;einops&lt;/a&gt;, indispensable tool for tensor manipulation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and many others. Thank you! 🙏&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install dalle2-pytorch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To train DALLE-2 is a 3 step process, with the training of CLIP being the most important&lt;/p&gt; &#xA;&lt;p&gt;To train CLIP, you can either use &lt;a href=&#34;https://github.com/lucidrains/x-clip&#34;&gt;x-clip&lt;/a&gt; package, or join the LAION discord, where a lot of replication efforts are already &lt;a href=&#34;https://github.com/mlfoundations/open_clip&#34;&gt;underway&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository will demonstrate integration with &lt;code&gt;x-clip&lt;/code&gt; for starters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import CLIP&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 1,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 1,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8,&#xA;    use_all_token_embeds = True,            # whether to use fine-grained contrastive learning (FILIP)&#xA;    decoupled_contrastive_learning = True,  # use decoupled contrastive learning (DCL) objective function, removing positive pairs from the denominator of the InfoNCE loss (CLOOB + DCL)&#xA;    extra_latent_projection = True,         # whether to use separate projections for text-to-image vs image-to-text comparisons (CLOOB)&#xA;    use_visual_ssl = True,                  # whether to do self supervised learning on images&#xA;    visual_ssl_type = &#39;simclr&#39;,             # can be either &#39;simclr&#39; or &#39;simsiam&#39;, depending on using DeCLIP or SLIP&#xA;    use_mlm = False,                        # use masked language learning (MLM) on text (DeCLIP)&#xA;    text_ssl_loss_weight = 0.05,            # weight for text MLM loss&#xA;    image_ssl_loss_weight = 0.05            # weight for image self-supervised learning loss&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (4, 256)).cuda()&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# train&#xA;&#xA;loss = clip(&#xA;    text,&#xA;    images,&#xA;    return_loss = True              # needs to be set to True to return contrastive loss&#xA;)&#xA;&#xA;loss.backward()&#xA;&#xA;# do the above with as many texts and images as possible in a loop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you will need to train the decoder, which learns to generate images based on the image embedding coming from the trained CLIP above&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import Unet, Decoder, CLIP&#xA;&#xA;# trained clip from step 1&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 1,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 1,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8&#xA;).cuda()&#xA;&#xA;# unet for the decoder&#xA;&#xA;unet = Unet(&#xA;    dim = 128,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults=(1, 2, 4, 8)&#xA;).cuda()&#xA;&#xA;# decoder, which contains the unet and clip&#xA;&#xA;decoder = Decoder(&#xA;    unet = unet,&#xA;    clip = clip,&#xA;    timesteps = 100,&#xA;    image_cond_drop_prob = 0.1,&#xA;    text_cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;# mock images (get a lot of this)&#xA;&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# feed images into decoder&#xA;&#xA;loss = decoder(images)&#xA;loss.backward()&#xA;&#xA;# do the above for many many many many steps&#xA;# then it will learn to generate images based on the CLIP image embeddings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, the main contribution of the paper. The repository offers the diffusion prior network. It takes the CLIP text embeddings and tries to generate the CLIP image embeddings. Again, you will need the trained CLIP from the first step&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import DiffusionPriorNetwork, DiffusionPrior, CLIP&#xA;&#xA;# get trained CLIP from step one&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 6,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 6,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8,&#xA;).cuda()&#xA;&#xA;# setup prior network, which contains an autoregressive transformer&#xA;&#xA;prior_network = DiffusionPriorNetwork(&#xA;    dim = 512,&#xA;    depth = 6,&#xA;    dim_head = 64,&#xA;    heads = 8&#xA;).cuda()&#xA;&#xA;# diffusion prior network, which contains the CLIP and network (with transformer) above&#xA;&#xA;diffusion_prior = DiffusionPrior(&#xA;    net = prior_network,&#xA;    clip = clip,&#xA;    timesteps = 100,&#xA;    cond_drop_prob = 0.2&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (4, 256)).cuda()&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# feed text and images into diffusion prior network&#xA;&#xA;loss = diffusion_prior(text, images)&#xA;loss.backward()&#xA;&#xA;# do the above for many many many steps&#xA;# now the diffusion prior can generate image embeddings from the text embeddings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the paper, they actually used a &lt;a href=&#34;https://cascaded-diffusion.github.io/&#34;&gt;recently discovered technique&lt;/a&gt;, from &lt;a href=&#34;http://www.jonathanho.me/&#34;&gt;Jonathan Ho&lt;/a&gt; himself (original author of DDPMs, the core technique used in DALL-E v2) for high resolution image synthesis.&lt;/p&gt; &#xA;&lt;p&gt;This can easily be used within this framework as so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import Unet, Decoder, CLIP&#xA;&#xA;# trained clip from step 1&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 6,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 6,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8&#xA;).cuda()&#xA;&#xA;# 2 unets for the decoder (a la cascading DDPM)&#xA;&#xA;unet1 = Unet(&#xA;    dim = 32,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults = (1, 2, 4, 8)&#xA;).cuda()&#xA;&#xA;unet2 = Unet(&#xA;    dim = 32,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults = (1, 2, 4, 8, 16)&#xA;).cuda()&#xA;&#xA;# decoder, which contains the unet(s) and clip&#xA;&#xA;decoder = Decoder(&#xA;    clip = clip,&#xA;    unet = (unet1, unet2),            # insert both unets in order of low resolution to highest resolution (you can have as many stages as you want here)&#xA;    image_sizes = (256, 512),         # resolutions, 256 for first unet, 512 for second. these must be unique and in ascending order (matches with the unets passed in)&#xA;    timesteps = 1000,&#xA;    image_cond_drop_prob = 0.1,&#xA;    text_cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;# mock images (get a lot of this)&#xA;&#xA;images = torch.randn(4, 3, 512, 512).cuda()&#xA;&#xA;# feed images into decoder, specifying which unet you want to train&#xA;# each unet can be trained separately, which is one of the benefits of the cascading DDPM scheme&#xA;&#xA;loss = decoder(images, unet_number = 1)&#xA;loss.backward()&#xA;&#xA;loss = decoder(images, unet_number = 2)&#xA;loss.backward()&#xA;&#xA;# do the above for many steps for both unets&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, to generate the DALL-E2 images from text. Insert the trained &lt;code&gt;DiffusionPrior&lt;/code&gt; as well as the &lt;code&gt;Decoder&lt;/code&gt; (which wraps &lt;code&gt;CLIP&lt;/code&gt;, the causal transformer, and unet(s))&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dalle2_pytorch import DALLE2&#xA;&#xA;dalle2 = DALLE2(&#xA;    prior = diffusion_prior,&#xA;    decoder = decoder&#xA;)&#xA;&#xA;# send the text as a string if you want to use the simple tokenizer from DALLE v1&#xA;# or you can do it as token ids, if you have your own tokenizer&#xA;&#xA;texts = [&#39;glistening morning dew on a flower petal&#39;]&#xA;images = dalle2(texts) # (1, 3, 256, 256)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see the whole script below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import DALLE2, DiffusionPriorNetwork, DiffusionPrior, Unet, Decoder, CLIP&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 6,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 6,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (4, 256)).cuda()&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# train&#xA;&#xA;loss = clip(&#xA;    text,&#xA;    images,&#xA;    return_loss = True&#xA;)&#xA;&#xA;loss.backward()&#xA;&#xA;# do above for many steps ...&#xA;&#xA;# prior networks (with transformer)&#xA;&#xA;prior_network = DiffusionPriorNetwork(&#xA;    dim = 512,&#xA;    depth = 6,&#xA;    dim_head = 64,&#xA;    heads = 8&#xA;).cuda()&#xA;&#xA;diffusion_prior = DiffusionPrior(&#xA;    net = prior_network,&#xA;    clip = clip,&#xA;    timesteps = 1000,&#xA;    sample_timesteps = 64,&#xA;    cond_drop_prob = 0.2&#xA;).cuda()&#xA;&#xA;loss = diffusion_prior(text, images)&#xA;loss.backward()&#xA;&#xA;# do above for many steps ...&#xA;&#xA;# decoder (with unet)&#xA;&#xA;unet1 = Unet(&#xA;    dim = 128,&#xA;    image_embed_dim = 512,&#xA;    text_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults=(1, 2, 4, 8),&#xA;    cond_on_text_encodings = True    # set to True for any unets that need to be conditioned on text encodings&#xA;).cuda()&#xA;&#xA;unet2 = Unet(&#xA;    dim = 16,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults = (1, 2, 4, 8, 16)&#xA;).cuda()&#xA;&#xA;decoder = Decoder(&#xA;    unet = (unet1, unet2),&#xA;    image_sizes = (128, 256),&#xA;    clip = clip,&#xA;    timesteps = 100,&#xA;    image_cond_drop_prob = 0.1,&#xA;    text_cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;for unet_number in (1, 2):&#xA;    loss = decoder(images, text = text, unet_number = unet_number) # this can optionally be decoder(images, text) if you wish to condition on the text encodings as well, though it was hinted in the paper it didn&#39;t do much&#xA;    loss.backward()&#xA;&#xA;# do above for many steps&#xA;&#xA;dalle2 = DALLE2(&#xA;    prior = diffusion_prior,&#xA;    decoder = decoder&#xA;)&#xA;&#xA;images = dalle2(&#xA;    [&#39;cute puppy chasing after a squirrel&#39;],&#xA;    cond_scale = 2. # classifier free guidance strength (&amp;gt; 1 would strengthen the condition)&#xA;)&#xA;&#xA;# save your image (in this example, of size 256x256)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything in this readme should run without error&lt;/p&gt; &#xA;&lt;p&gt;You can also train the decoder on images of greater than the size (say 512x512) at which CLIP was trained (256x256). The images will be resized to CLIP image resolution for the image embeddings&lt;/p&gt; &#xA;&lt;p&gt;For the layperson, no worries, training will all be automated into a CLI tool, at least for small scale training.&lt;/p&gt; &#xA;&lt;h2&gt;Training on Preprocessed CLIP Embeddings&lt;/h2&gt; &#xA;&lt;p&gt;It is likely, when scaling up, that you would first preprocess your images and text into corresponding embeddings before training the prior network. You can do so easily by simply passing in &lt;code&gt;image_embed&lt;/code&gt;, &lt;code&gt;text_embed&lt;/code&gt;, and optionally &lt;code&gt;text_encodings&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Working example below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import DiffusionPriorNetwork, DiffusionPrior, CLIP&#xA;&#xA;# get trained CLIP from step one&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 6,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 6,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8,&#xA;).cuda()&#xA;&#xA;# setup prior network, which contains an autoregressive transformer&#xA;&#xA;prior_network = DiffusionPriorNetwork(&#xA;    dim = 512,&#xA;    depth = 6,&#xA;    dim_head = 64,&#xA;    heads = 8&#xA;).cuda()&#xA;&#xA;# diffusion prior network, which contains the CLIP and network (with transformer) above&#xA;&#xA;diffusion_prior = DiffusionPrior(&#xA;    net = prior_network,&#xA;    clip = clip,&#xA;    timesteps = 100,&#xA;    cond_drop_prob = 0.2,&#xA;    condition_on_text_encodings = False  # this probably should be true, but just to get Laion started&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (4, 256)).cuda()&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# precompute the text and image embeddings&#xA;# here using the diffusion prior class, but could be done with CLIP alone&#xA;&#xA;clip_image_embeds = diffusion_prior.clip.embed_image(images).image_embed&#xA;clip_text_embeds = diffusion_prior.clip.embed_text(text).text_embed&#xA;&#xA;# feed text and images into diffusion prior network&#xA;&#xA;loss = diffusion_prior(&#xA;    text_embed = clip_text_embeds,&#xA;    image_embed = clip_image_embeds&#xA;)&#xA;&#xA;loss.backward()&#xA;&#xA;# do the above for many many many steps&#xA;# now the diffusion prior can generate image embeddings from the text embeddings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also completely go &lt;code&gt;CLIP&lt;/code&gt;-less, in which case you will need to pass in the &lt;code&gt;image_embed_dim&lt;/code&gt; into the &lt;code&gt;DiffusionPrior&lt;/code&gt; on initialization&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import DiffusionPriorNetwork, DiffusionPrior&#xA;&#xA;# setup prior network, which contains an autoregressive transformer&#xA;&#xA;prior_network = DiffusionPriorNetwork(&#xA;    dim = 512,&#xA;    depth = 6,&#xA;    dim_head = 64,&#xA;    heads = 8&#xA;).cuda()&#xA;&#xA;# diffusion prior network, which contains the CLIP and network (with transformer) above&#xA;&#xA;diffusion_prior = DiffusionPrior(&#xA;    net = prior_network,&#xA;    image_embed_dim = 512,               # this needs to be set&#xA;    timesteps = 100,&#xA;    cond_drop_prob = 0.2,&#xA;    condition_on_text_encodings = False  # this probably should be true, but just to get Laion started&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (4, 256)).cuda()&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# precompute the text and image embeddings&#xA;# here using the diffusion prior class, but could be done with CLIP alone&#xA;&#xA;clip_image_embeds = torch.randn(4, 512).cuda()&#xA;clip_text_embeds = torch.randn(4, 512).cuda()&#xA;&#xA;# feed text and images into diffusion prior network&#xA;&#xA;loss = diffusion_prior(&#xA;    text_embed = clip_text_embeds,&#xA;    image_embed = clip_image_embeds&#xA;)&#xA;&#xA;loss.backward()&#xA;&#xA;# do the above for many many many steps&#xA;# now the diffusion prior can generate image embeddings from the text embeddings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;OpenAI CLIP&lt;/h2&gt; &#xA;&lt;p&gt;Although there is the possibility they are using an unreleased, more powerful CLIP, you can use one of the released ones, if you do not wish to train your own CLIP from scratch. This will also allow the community to more quickly validate the conclusions of the paper.&lt;/p&gt; &#xA;&lt;p&gt;To use a pretrained OpenAI CLIP, simply import &lt;code&gt;OpenAIClipAdapter&lt;/code&gt; and pass it into the &lt;code&gt;DiffusionPrior&lt;/code&gt; or &lt;code&gt;Decoder&lt;/code&gt; like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import DALLE2, DiffusionPriorNetwork, DiffusionPrior, Unet, Decoder, OpenAIClipAdapter&#xA;&#xA;# openai pretrained clip - defaults to ViT-B/32&#xA;&#xA;clip = OpenAIClipAdapter()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (4, 256)).cuda()&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# prior networks (with transformer)&#xA;&#xA;prior_network = DiffusionPriorNetwork(&#xA;    dim = 512,&#xA;    depth = 6,&#xA;    dim_head = 64,&#xA;    heads = 8&#xA;).cuda()&#xA;&#xA;diffusion_prior = DiffusionPrior(&#xA;    net = prior_network,&#xA;    clip = clip,&#xA;    timesteps = 100,&#xA;    cond_drop_prob = 0.2&#xA;).cuda()&#xA;&#xA;loss = diffusion_prior(text, images)&#xA;loss.backward()&#xA;&#xA;# do above for many steps ...&#xA;&#xA;# decoder (with unet)&#xA;&#xA;unet1 = Unet(&#xA;    dim = 128,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults=(1, 2, 4, 8),&#xA;    text_embed_dim = 512,&#xA;    cond_on_text_encodings = True  # set to True for any unets that need to be conditioned on text encodings (ex. first unet in cascade)&#xA;).cuda()&#xA;&#xA;unet2 = Unet(&#xA;    dim = 16,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults = (1, 2, 4, 8, 16)&#xA;).cuda()&#xA;&#xA;decoder = Decoder(&#xA;    unet = (unet1, unet2),&#xA;    image_sizes = (128, 256),&#xA;    clip = clip,&#xA;    timesteps = 1000,&#xA;    sample_timesteps = (250, 27),&#xA;    image_cond_drop_prob = 0.1,&#xA;    text_cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;for unet_number in (1, 2):&#xA;    loss = decoder(images, text = text, unet_number = unet_number) # this can optionally be decoder(images, text) if you wish to condition on the text encodings as well, though it was hinted in the paper it didn&#39;t do much&#xA;    loss.backward()&#xA;&#xA;# do above for many steps&#xA;&#xA;dalle2 = DALLE2(&#xA;    prior = diffusion_prior,&#xA;    decoder = decoder&#xA;)&#xA;&#xA;images = dalle2(&#xA;    [&#39;a butterfly trying to escape a tornado&#39;],&#xA;    cond_scale = 2. # classifier free guidance strength (&amp;gt; 1 would strengthen the condition)&#xA;)&#xA;&#xA;# save your image (in this example, of size 256x256)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can also use &lt;a href=&#34;https://github.com/mlfoundations/open_clip&#34;&gt;Open Clip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install open-clip-torch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ex. using the &lt;a href=&#34;https://laion.ai/blog/large-openclip/&#34;&gt;SOTA Open Clip&lt;/a&gt; model trained by &lt;a href=&#34;https://github.com/rom1504&#34;&gt;Romain&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dalle2_pytorch import OpenClipAdapter&#xA;&#xA;clip = OpenClipAdapter(&#39;ViT-H/14&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you&#39;ll just have to worry about training the Prior and the Decoder!&lt;/p&gt; &#xA;&lt;h2&gt;Inpainting&lt;/h2&gt; &#xA;&lt;p&gt;Inpainting is also built into the &lt;code&gt;Decoder&lt;/code&gt;. You simply have to pass in the &lt;code&gt;inpaint_image&lt;/code&gt; and &lt;code&gt;inpaint_mask&lt;/code&gt; (boolean tensor where &lt;code&gt;True&lt;/code&gt; indicates which regions of the inpaint image to keep)&lt;/p&gt; &#xA;&lt;p&gt;This repository uses the formulation put forth by &lt;a href=&#34;https://arxiv.org/abs/2201.09865&#34;&gt;Lugmayr et al. in Repaint&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import Unet, Decoder, CLIP&#xA;&#xA;# trained clip from step 1&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 6,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 6,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8&#xA;).cuda()&#xA;&#xA;# 2 unets for the decoder (a la cascading DDPM)&#xA;&#xA;unet = Unet(&#xA;    dim = 16,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults = (1, 1, 1, 1)&#xA;).cuda()&#xA;&#xA;&#xA;# decoder, which contains the unet(s) and clip&#xA;&#xA;decoder = Decoder(&#xA;    clip = clip,&#xA;    unet = (unet,),               # insert both unets in order of low resolution to highest resolution (you can have as many stages as you want here)&#xA;    image_sizes = (256,),         # resolutions, 256 for first unet, 512 for second. these must be unique and in ascending order (matches with the unets passed in)&#xA;    timesteps = 1000,&#xA;    image_cond_drop_prob = 0.1,&#xA;    text_cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;# mock images (get a lot of this)&#xA;&#xA;images = torch.randn(4, 3, 256, 256).cuda()&#xA;&#xA;# feed images into decoder, specifying which unet you want to train&#xA;# each unet can be trained separately, which is one of the benefits of the cascading DDPM scheme&#xA;&#xA;loss = decoder(images, unet_number = 1)&#xA;loss.backward()&#xA;&#xA;# do the above for many steps for both unets&#xA;&#xA;mock_image_embed = torch.randn(1, 512).cuda()&#xA;&#xA;# then to do inpainting&#xA;&#xA;inpaint_image = torch.randn(1, 3, 256, 256).cuda()      # (batch, channels, height, width)&#xA;inpaint_mask = torch.ones(1, 256, 256).bool().cuda()    # (batch, height, width)&#xA;&#xA;inpainted_images = decoder.sample(&#xA;    image_embed = mock_image_embed,&#xA;    inpaint_image = inpaint_image,    # just pass in the inpaint image&#xA;    inpaint_mask = inpaint_mask       # and the mask&#xA;)&#xA;&#xA;inpainted_images.shape # (1, 3, 256, 256)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Experimental&lt;/h2&gt; &#xA;&lt;h3&gt;DALL-E2 with Latent Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;This repository decides to take the next step and offer DALL-E v2 combined with &lt;a href=&#34;https://huggingface.co/spaces/multimodalart/latentdiffusion&#34;&gt;latent diffusion&lt;/a&gt;, from Rombach et al.&lt;/p&gt; &#xA;&lt;p&gt;You can use it as follows. Latent diffusion can be limited to just the first U-Net in the cascade, or to any number you wish.&lt;/p&gt; &#xA;&lt;p&gt;The repository also comes equipped with all the necessary settings to recreate &lt;code&gt;ViT-VQGan&lt;/code&gt; from the &lt;a href=&#34;https://arxiv.org/abs/2110.04627&#34;&gt;Improved VQGans&lt;/a&gt; paper. Furthermore, the &lt;a href=&#34;https://github.com/lucidrains/vector-quantize-pytorch&#34;&gt;vector quantization&lt;/a&gt; library also comes equipped to do &lt;a href=&#34;https://arxiv.org/abs/2203.01941&#34;&gt;residual or multi-headed quantization&lt;/a&gt;, which I believe will give an even further boost in performance to the autoencoder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import Unet, Decoder, CLIP, VQGanVAE&#xA;&#xA;# trained clip from step 1&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 1,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 1,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8&#xA;)&#xA;&#xA;# 3 unets for the decoder (a la cascading DDPM)&#xA;&#xA;# first two unets are doing latent diffusion&#xA;# vqgan-vae must be trained beforehand&#xA;&#xA;vae1 = VQGanVAE(&#xA;    dim = 32,&#xA;    image_size = 256,&#xA;    layers = 3,&#xA;    layer_mults = (1, 2, 4)&#xA;)&#xA;&#xA;vae2 = VQGanVAE(&#xA;    dim = 32,&#xA;    image_size = 512,&#xA;    layers = 3,&#xA;    layer_mults = (1, 2, 4)&#xA;)&#xA;&#xA;unet1 = Unet(&#xA;    dim = 32,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    sparse_attn = True,&#xA;    sparse_attn_window = 2,&#xA;    dim_mults = (1, 2, 4, 8)&#xA;)&#xA;&#xA;unet2 = Unet(&#xA;    dim = 32,&#xA;    image_embed_dim = 512,&#xA;    channels = 3,&#xA;    dim_mults = (1, 2, 4, 8, 16),&#xA;    cond_on_image_embeds = True,&#xA;    cond_on_text_encodings = False&#xA;)&#xA;&#xA;unet3 = Unet(&#xA;    dim = 32,&#xA;    image_embed_dim = 512,&#xA;    channels = 3,&#xA;    dim_mults = (1, 2, 4, 8, 16),&#xA;    cond_on_image_embeds = True,&#xA;    cond_on_text_encodings = False,&#xA;    attend_at_middle = False&#xA;)&#xA;&#xA;# decoder, which contains the unet(s) and clip&#xA;&#xA;decoder = Decoder(&#xA;    clip = clip,&#xA;    vae = (vae1, vae2),                # latent diffusion for unet1 (vae1) and unet2 (vae2), but not for the last unet3&#xA;    unet = (unet1, unet2, unet3),      # insert unets in order of low resolution to highest resolution (you can have as many stages as you want here)&#xA;    image_sizes = (256, 512, 1024),    # resolutions, 256 for first unet, 512 for second, 1024 for third&#xA;    timesteps = 100,&#xA;    image_cond_drop_prob = 0.1,&#xA;    text_cond_drop_prob = 0.5&#xA;).cuda()&#xA;&#xA;# mock images (get a lot of this)&#xA;&#xA;images = torch.randn(1, 3, 1024, 1024).cuda()&#xA;&#xA;# feed images into decoder, specifying which unet you want to train&#xA;# each unet can be trained separately, which is one of the benefits of the cascading DDPM scheme&#xA;&#xA;with decoder.one_unet_in_gpu(1):&#xA;    loss = decoder(images, unet_number = 1)&#xA;    loss.backward()&#xA;&#xA;with decoder.one_unet_in_gpu(2):&#xA;    loss = decoder(images, unet_number = 2)&#xA;    loss.backward()&#xA;&#xA;with decoder.one_unet_in_gpu(3):&#xA;    loss = decoder(images, unet_number = 3)&#xA;    loss.backward()&#xA;&#xA;# do the above for many steps for both unets&#xA;&#xA;# then it will learn to generate images based on the CLIP image embeddings&#xA;&#xA;# chaining the unets from lowest resolution to highest resolution (thus cascading)&#xA;&#xA;mock_image_embed = torch.randn(1, 512).cuda()&#xA;images = decoder.sample(mock_image_embed) # (1, 3, 1024, 1024)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training wrapper&lt;/h2&gt; &#xA;&lt;h3&gt;Decoder Training&lt;/h3&gt; &#xA;&lt;p&gt;Training the &lt;code&gt;Decoder&lt;/code&gt; may be confusing, as one needs to keep track of an optimizer for each of the &lt;code&gt;Unet&lt;/code&gt;(s) separately. Each &lt;code&gt;Unet&lt;/code&gt; will also need its own corresponding exponential moving average. The &lt;code&gt;DecoderTrainer&lt;/code&gt; hopes to make this simple, as shown below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import DALLE2, Unet, Decoder, CLIP, DecoderTrainer&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 6,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 6,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (32, 256)).cuda()&#xA;images = torch.randn(32, 3, 256, 256).cuda()&#xA;&#xA;# decoder (with unet)&#xA;&#xA;unet1 = Unet(&#xA;    dim = 128,&#xA;    image_embed_dim = 512,&#xA;    text_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults=(1, 2, 4, 8),&#xA;    cond_on_text_encodings = True,&#xA;).cuda()&#xA;&#xA;unet2 = Unet(&#xA;    dim = 16,&#xA;    image_embed_dim = 512,&#xA;    cond_dim = 128,&#xA;    channels = 3,&#xA;    dim_mults = (1, 2, 4, 8, 16),&#xA;).cuda()&#xA;&#xA;decoder = Decoder(&#xA;    unet = (unet1, unet2),&#xA;    image_sizes = (128, 256),&#xA;    clip = clip,&#xA;    timesteps = 1000&#xA;).cuda()&#xA;&#xA;decoder_trainer = DecoderTrainer(&#xA;    decoder,&#xA;    lr = 3e-4,&#xA;    wd = 1e-2,&#xA;    ema_beta = 0.99,&#xA;    ema_update_after_step = 1000,&#xA;    ema_update_every = 10,&#xA;)&#xA;&#xA;for unet_number in (1, 2):&#xA;    loss = decoder_trainer(&#xA;        images,&#xA;        text = text,&#xA;        unet_number = unet_number, # which unet to train on&#xA;        max_batch_size = 4         # gradient accumulation - this sets the maximum batch size in which to do forward and backwards pass - for this example 32 / 4 == 8 times&#xA;    )&#xA;&#xA;    decoder_trainer.update(unet_number) # update the specific unet as well as its exponential moving average&#xA;&#xA;# after much training&#xA;# you can sample from the exponentially moving averaged unets as so&#xA;&#xA;mock_image_embed = torch.randn(32, 512).cuda()&#xA;images = decoder_trainer.sample(image_embed = mock_image_embed, text = text) # (4, 3, 256, 256)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Diffusion Prior Training&lt;/h3&gt; &#xA;&lt;p&gt;Similarly, one can use the &lt;code&gt;DiffusionPriorTrainer&lt;/code&gt; to automatically instantiate and keep track of an exponential moving averaged prior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import DALLE2, DiffusionPriorNetwork, DiffusionPrior, DiffusionPriorTrainer, Unet, Decoder, CLIP&#xA;&#xA;clip = CLIP(&#xA;    dim_text = 512,&#xA;    dim_image = 512,&#xA;    dim_latent = 512,&#xA;    num_text_tokens = 49408,&#xA;    text_enc_depth = 6,&#xA;    text_seq_len = 256,&#xA;    text_heads = 8,&#xA;    visual_enc_depth = 6,&#xA;    visual_image_size = 256,&#xA;    visual_patch_size = 32,&#xA;    visual_heads = 8&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;text = torch.randint(0, 49408, (512, 256)).cuda()&#xA;images = torch.randn(512, 3, 256, 256).cuda()&#xA;&#xA;# prior networks (with transformer)&#xA;&#xA;prior_network = DiffusionPriorNetwork(&#xA;    dim = 512,&#xA;    depth = 6,&#xA;    dim_head = 64,&#xA;    heads = 8&#xA;).cuda()&#xA;&#xA;diffusion_prior = DiffusionPrior(&#xA;    net = prior_network,&#xA;    clip = clip,&#xA;    timesteps = 100,&#xA;    cond_drop_prob = 0.2&#xA;).cuda()&#xA;&#xA;diffusion_prior_trainer = DiffusionPriorTrainer(&#xA;    diffusion_prior,&#xA;    lr = 3e-4,&#xA;    wd = 1e-2,&#xA;    ema_beta = 0.99,&#xA;    ema_update_after_step = 1000,&#xA;    ema_update_every = 10,&#xA;)&#xA;&#xA;loss = diffusion_prior_trainer(text, images, max_batch_size = 4)&#xA;diffusion_prior_trainer.update()  # this will update the optimizer as well as the exponential moving averaged diffusion prior&#xA;&#xA;# after much of the above three lines in a loop&#xA;# you can sample from the exponential moving average of the diffusion prior identically to how you do so for DiffusionPrior&#xA;&#xA;image_embeds = diffusion_prior_trainer.sample(text, max_batch_size = 4) # (512, 512) - exponential moving averaged image embeddings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bonus&lt;/h2&gt; &#xA;&lt;h3&gt;Unconditional Training&lt;/h3&gt; &#xA;&lt;p&gt;The repository also contains the means to train unconditional DDPM model, or even cascading DDPMs. You simply have to set &lt;code&gt;unconditional = True&lt;/code&gt; in the &lt;code&gt;Decoder&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;ex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from dalle2_pytorch import Unet, Decoder, DecoderTrainer&#xA;&#xA;# unet for the cascading ddpm&#xA;&#xA;unet1 = Unet(&#xA;    dim = 128,&#xA;    dim_mults=(1, 2, 4, 8)&#xA;).cuda()&#xA;&#xA;unet2 = Unet(&#xA;    dim = 32,&#xA;    dim_mults = (1, 2, 4, 8, 16)&#xA;).cuda()&#xA;&#xA;# decoder, which contains the unets&#xA;&#xA;decoder = Decoder(&#xA;    unet = (unet1, unet2),&#xA;    image_sizes = (256, 512),  # first unet up to 256px, then second to 512px&#xA;    timesteps = 1000,&#xA;    unconditional = True&#xA;).cuda()&#xA;&#xA;# decoder trainer&#xA;&#xA;decoder_trainer = DecoderTrainer(decoder)&#xA;&#xA;# images (get a lot of this)&#xA;&#xA;images = torch.randn(1, 3, 512, 512).cuda()&#xA;&#xA;# feed images into decoder&#xA;&#xA;for i in (1, 2):&#xA;    loss = decoder_trainer(images, unet_number = i)&#xA;    decoder_trainer.update(unet_number = i)&#xA;&#xA;# do the above for many many many many images&#xA;# then it will learn to generate images&#xA;&#xA;images = decoder_trainer.sample(batch_size = 36, max_batch_size = 4) # (36, 3, 512, 512)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dataloaders&lt;/h2&gt; &#xA;&lt;h3&gt;Decoder Dataloaders&lt;/h3&gt; &#xA;&lt;p&gt;In order to make loading data simple and efficient, we include some general dataloaders that can be used to train portions of the network.&lt;/p&gt; &#xA;&lt;h4&gt;Decoder: Image Embedding Dataset&lt;/h4&gt; &#xA;&lt;p&gt;When training the decoder (and up samplers if training together) in isolation, you will need to load images and corresponding image embeddings. This dataset can read two similar types of datasets. First, it can read a &lt;a href=&#34;https://github.com/webdataset/webdataset&#34;&gt;webdataset&lt;/a&gt; that contains &lt;code&gt;.jpg&lt;/code&gt; and &lt;code&gt;.npy&lt;/code&gt; files in the &lt;code&gt;.tar&lt;/code&gt;s that contain the images and associated image embeddings respectively. Alternatively, you can also specify a source for the embeddings outside of the webdataset. In this case, the path to the embeddings should contain &lt;code&gt;.npy&lt;/code&gt; files with the same shard numbers as the webdataset and there should be a correspondence between the filename of the &lt;code&gt;.jpg&lt;/code&gt; and the index of the embedding in the &lt;code&gt;.npy&lt;/code&gt;. So, for example, &lt;code&gt;0001.tar&lt;/code&gt; from the webdataset with image &lt;code&gt;00010509.jpg&lt;/code&gt; (the first 4 digits are the shard number and the last 4 are the index) in it should be paralleled by a &lt;code&gt;img_emb_0001.npy&lt;/code&gt; which contains a NumPy array with the embedding at index 509.&lt;/p&gt; &#xA;&lt;p&gt;Generating a dataset of this type:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/rom1504/img2dataset&#34;&gt;img2dataset&lt;/a&gt; to generate a webdataset.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/rom1504/clip-retrieval&#34;&gt;clip-retrieval&lt;/a&gt; to convert the images to embeddings.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/Veldrovive/embedding-dataset-reordering&#34;&gt;embedding-dataset-reordering&lt;/a&gt; to reorder the embeddings into the expected format.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dalle2_pytorch.dataloaders import ImageEmbeddingDataset, create_image_embedding_dataloader&#xA;&#xA;# Create a dataloader directly.&#xA;dataloader = create_image_embedding_dataloader(&#xA;    tar_url=&#34;/path/or/url/to/webdataset/{0000..9999}.tar&#34;, # Uses bracket expanding notation. This specifies to read all tars from 0000.tar to 9999.tar&#xA;    embeddings_url=&#34;path/or/url/to/embeddings/folder&#34;,     # Included if .npy files are not in webdataset. Left out or set to None otherwise&#xA;    num_workers=4,&#xA;    batch_size=32,&#xA;    shard_width=4,                                         # If a file in the webdataset shard 3 is named 0003039.jpg, we know the shard width is 4 and the last three digits are the index&#xA;    shuffle_num=200,                                       # Does a shuffle of the data with a buffer size of 200&#xA;    shuffle_shards=True,                                   # Shuffle the order the shards are read in&#xA;    resample_shards=False,                                 # Sample shards with replacement. If true, an epoch will be infinite unless stopped manually&#xA;)&#xA;for img, emb in dataloader:&#xA;    print(img.shape)  # torch.Size([32, 3, 256, 256])&#xA;    print(emb[&#34;img&#34;].shape)  # torch.Size([32, 512])&#xA;    # Train decoder only as shown above&#xA;&#xA;# Or create a dataset without a loader so you can configure it manually&#xA;dataset = ImageEmbeddingDataset(&#xA;    urls=&#34;/path/or/url/to/webdataset/{0000..9999}.tar&#34;,&#xA;    embedding_folder_url=&#34;path/or/url/to/embeddings/folder&#34;,&#xA;    shard_width=4,&#xA;    shuffle_shards=True,&#xA;    resample=False&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scripts&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;train_diffusion_prior.py&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;For detailed information on training the diffusion prior, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/lucidrains/DALLE2-pytorch/main/prior.md&#34;&gt;dedicated readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; finish off gaussian diffusion class for latent embedding - allow for prediction of epsilon&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add what was proposed in the paper, where DDPM objective for image latent embedding predicts x0 directly (reread vq-diffusion paper and get caught up on that line of work)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make sure it works end to end to produce an output tensor, taking a single gradient step&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; augment unet so that it can also be conditioned on text encodings (although in paper they hinted this didn&#39;t make much a difference)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; figure out all the current bag of tricks needed to make DDPMs great (starting with the blur trick mentioned in paper)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; build the cascading ddpm by having Decoder class manage multiple unets at different resolutions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add efficient attention in unet&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; be able to finely customize what to condition on (text, image embed) for specific unet in the cascade (super resolution ddpms near the end may not need too much conditioning)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; offload unets not being trained on to CPU for memory efficiency (for training each resolution unets separately)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; build out latent diffusion architecture, with the vq-reg variant (vqgan-vae), make it completely optional and compatible with cascading ddpms&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; for decoder, allow ability to customize objective (predict epsilon vs x0), in case latent diffusion does better with prediction of x0&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; use attention-based upsampling &lt;a href=&#34;https://arxiv.org/abs/2112.11435&#34;&gt;https://arxiv.org/abs/2112.11435&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; use inheritance just this once for sharing logic between decoder and prior network ddpms&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; bring in vit-vqgan &lt;a href=&#34;https://arxiv.org/abs/2110.04627&#34;&gt;https://arxiv.org/abs/2110.04627&lt;/a&gt; for the latent diffusion&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; abstract interface for CLIP adapter class, so other CLIPs can be brought in&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; take care of mixed precision as well as gradient accumulation within decoder trainer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; just take care of the training for the decoder in a wrapper class, as each unet in the cascade will need its own optimizer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; bring in tools to train vqgan-vae&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add convnext backbone for vqgan-vae (in addition to vit [vit-vqgan] + resnet)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make sure DDPMs can be run with traditional resnet blocks (but leave convnext as an option for experimentation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make sure for the latter unets in the cascade, one can train on crops for learning super resolution (constrain the unet to be only convolutions in that case, or allow conv-like attention with rel pos bias)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; offer setting in diffusion prior to split time and image embeddings into multiple tokens, configurable, for more surface area during attention&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make sure resnet hyperparameters can be configurable across unet depth (groups and expansion factor)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pull logic for training diffusion prior into a class DiffusionPriorTrainer, for eventual script based + CLI based training&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make sure the cascading ddpm in the repository can be trained unconditionally, offer a one-line CLI tool for training on a folder of images&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; bring in cross-scale embedding from iclr paper &lt;a href=&#34;https://github.com/lucidrains/vit-pytorch/raw/main/vit_pytorch/crossformer.py#L14&#34;&gt;https://github.com/lucidrains/vit-pytorch/blob/main/vit_pytorch/crossformer.py#L14&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cross embed layers for downsampling, as an option&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; use an experimental tracker agnostic setup, as done &lt;a href=&#34;https://github.com/lucidrains/tf-bind-transformer#simple-trainer-class-for-fine-tuning&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; use pydantic for config drive training&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; for both diffusion prior and decoder, all exponential moving averaged models needs to be saved and restored as well (as well as the step number)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; offer save / load methods on the trainer classes to automatically take care of state dicts for scalers / optimizers / saving versions and checking for breaking changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; allow for creation of diffusion prior model off pydantic config classes - consider the same for tracker configs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; bring in skip-layer excitations (from lightweight gan paper) to see if it helps for either decoder of unet or vqgan-vae training (doesnt work well)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; test out grid attention in cascading ddpm locally, decide whether to keep or remove &lt;a href=&#34;https://arxiv.org/abs/2204.01697&#34;&gt;https://arxiv.org/abs/2204.01697&lt;/a&gt; (keeping, seems to be fine)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; allow for unet to be able to condition non-cross attention style as well&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; speed up inference, read up on papers (ddim)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add inpainting ability using resampler from repaint paper &lt;a href=&#34;https://arxiv.org/abs/2201.09865&#34;&gt;https://arxiv.org/abs/2201.09865&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add the final combination of upsample feature maps, used in unet squared, seems to have an effect in local experiments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; consider elucidated dalle2 &lt;a href=&#34;https://arxiv.org/abs/2206.00364&#34;&gt;https://arxiv.org/abs/2206.00364&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add simple outpainting, text-guided 2x size the image for starters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; interface out the vqgan-vae so a pretrained one can be pulled off the shelf to validate latent diffusion + DALL-E2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{ramesh2022,&#xA;    title   = {Hierarchical Text-Conditional Image Generation with CLIP Latents}, &#xA;    author  = {Aditya Ramesh et al},&#xA;    year    = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{crowson2022,&#xA;    author  = {Katherine Crowson},&#xA;    url     = {https://twitter.com/rivershavewings}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{rombach2021highresolution,&#xA;    title   = {High-Resolution Image Synthesis with Latent Diffusion Models}, &#xA;    author  = {Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Björn Ommer},&#xA;    year    = {2021},&#xA;    eprint  = {2112.10752},&#xA;    archivePrefix = {arXiv},&#xA;    primaryClass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{shen2019efficient,&#xA;    author  = {Zhuoran Shen and Mingyuan Zhang and Haiyu Zhao and Shuai Yi and Hongsheng Li},&#xA;    title   = {Efficient Attention: Attention with Linear Complexities},&#xA;    journal = {CoRR},&#xA;    year    = {2018},&#xA;    url     = {http://arxiv.org/abs/1812.01243},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Yu2021VectorquantizedIM,&#xA;    title   = {Vector-quantized Image Modeling with Improved VQGAN},&#xA;    author  = {Jiahui Yu and Xin Li and Jing Yu Koh and Han Zhang and Ruoming Pang and James Qin and Alexander Ku and Yuanzhong Xu and Jason Baldridge and Yonghui Wu},&#xA;    journal = {ArXiv},&#xA;    year    = {2021},&#xA;    volume  = {abs/2110.04627}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Shleifer2021NormFormerIT,&#xA;    title   = {NormFormer: Improved Transformer Pretraining with Extra Normalization},&#xA;    author  = {Sam Shleifer and Jason Weston and Myle Ott},&#xA;    journal = {ArXiv},&#xA;    year    = {2021},&#xA;    volume  = {abs/2110.09456}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Yu2022CoCaCC,&#xA;    title   = {CoCa: Contrastive Captioners are Image-Text Foundation Models},&#xA;    author  = {Jiahui Yu and Zirui Wang and Vijay Vasudevan and Legg Yeung and Mojtaba Seyedhosseini and Yonghui Wu},&#xA;    journal = {ArXiv},&#xA;    year    = {2022},&#xA;    volume  = {abs/2205.01917}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{wang2021crossformer,&#xA;    title   = {CrossFormer: A Versatile Vision Transformer Hinging on Cross-scale Attention},&#xA;    author  = {Wenxiao Wang and Lu Yao and Long Chen and Binbin Lin and Deng Cai and Xiaofei He and Wei Liu},&#xA;    year    = {2021},&#xA;    eprint  = {2108.00154},&#xA;    archivePrefix = {arXiv},&#xA;    primaryClass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{ho2021cascaded,&#xA;    title   = {Cascaded Diffusion Models for High Fidelity Image Generation},&#xA;    author  = {Ho, Jonathan and Saharia, Chitwan and Chan, William and Fleet, David J and Norouzi, Mohammad and Salimans, Tim},&#xA;    journal = {arXiv preprint arXiv:2106.15282},&#xA;    year    = {2021}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{Saharia2022,&#xA;    title   = {Imagen: unprecedented photorealism × deep level of language understanding},&#xA;    author  = {Chitwan Saharia*, William Chan*, Saurabh Saxena†, Lala Li†, Jay Whang†, Emily Denton, Seyed Kamyar Seyed Ghasemipour, Burcu Karagol Ayan, S. Sara Mahdavi, Rapha Gontijo Lopes, Tim Salimans, Jonathan Ho†, David Fleet†, Mohammad Norouzi*},&#xA;    year    = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Choi2022PerceptionPT,&#xA;    title   = {Perception Prioritized Training of Diffusion Models},&#xA;    author  = {Jooyoung Choi and Jungbeom Lee and Chaehun Shin and Sungwon Kim and Hyunwoo J. Kim and Sung-Hoon Yoon},&#xA;    journal = {ArXiv},&#xA;    year    = {2022},&#xA;    volume  = {abs/2204.00227}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Saharia2021PaletteID,&#xA;    title   = {Palette: Image-to-Image Diffusion Models},&#xA;    author  = {Chitwan Saharia and William Chan and Huiwen Chang and Chris A. Lee and Jonathan Ho and Tim Salimans and David J. Fleet and Mohammad Norouzi},&#xA;    journal = {ArXiv},&#xA;    year    = {2021},&#xA;    volume  = {abs/2111.05826}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Lugmayr2022RePaintIU,&#xA;    title   = {RePaint: Inpainting using Denoising Diffusion Probabilistic Models},&#xA;    author  = {Andreas Lugmayr and Martin Danelljan and Andr{\&#39;e}s Romero and Fisher Yu and Radu Timofte and Luc Van Gool},&#xA;    journal = {ArXiv},&#xA;    year    = {2022},&#xA;    volume  = {abs/2201.09865}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{chen2022analog,&#xA;    title   = {Analog Bits: Generating Discrete Data using Diffusion Models with Self-Conditioning},&#xA;    author  = {Ting Chen and Ruixiang Zhang and Geoffrey Hinton},&#xA;    year    = {2022},&#xA;    eprint  = {2208.04202},&#xA;    archivePrefix = {arXiv},&#xA;    primaryClass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Qiao2019WeightS,&#xA;    title   = {Weight Standardization},&#xA;    author  = {Siyuan Qiao and Huiyu Wang and Chenxi Liu and Wei Shen and Alan Loddon Yuille},&#xA;    journal = {ArXiv},&#xA;    year    = {2019},&#xA;    volume  = {abs/1903.10520}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{rogozhnikov2022einops,&#xA;    title   = {Einops: Clear and Reliable Tensor Manipulations with Einstein-like Notation},&#xA;    author  = {Alex Rogozhnikov},&#xA;    booktitle = {International Conference on Learning Representations},&#xA;    year    = {2022},&#xA;    url     = {https://openreview.net/forum?id=oapKSVM2bcj}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Sunkara2022NoMS,&#xA;    title   = {No More Strided Convolutions or Pooling: A New CNN Building Block for Low-Resolution Images and Small Objects},&#xA;    author  = {Raja Sunkara and Tie Luo},&#xA;    journal = {ArXiv},&#xA;    year    = {2022},&#xA;    volume  = {abs/2208.03641}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Salimans2022ProgressiveDF,&#xA;    title   = {Progressive Distillation for Fast Sampling of Diffusion Models},&#xA;    author  = {Tim Salimans and Jonathan Ho},&#xA;    journal = {ArXiv},&#xA;    year    = {2022},&#xA;    volume  = {abs/2202.00512}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Creating noise from data is easy; creating data from noise is generative modeling.&lt;/em&gt; - &lt;a href=&#34;https://arxiv.org/abs/2011.13456&#34;&gt;Yang Song&#39;s paper&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yihong0618/gitblog</title>
    <updated>2024-01-03T01:36:06Z</updated>
    <id>tag:github.com,2024-01-03:/yihong0618/gitblog</id>
    <link href="https://github.com/yihong0618/gitblog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;People Die, but Long Live GitHub&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Gitblog&lt;/h2&gt; &#xA;&lt;p&gt;My personal blog using issues and GitHub Actions (随意转载，无需署名) &lt;a href=&#34;https://raw.githubusercontent.com/yihong0618/gitblog/master/feed.xml&#34;&gt;RSS Feed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/217&#34;&gt;友情链接&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;兔子鮮笙&lt;/td&gt; &#xA;   &lt;td&gt;https://tuzi.moe&lt;/td&gt; &#xA;   &lt;td&gt;22 岁的天才少年&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FriendsA&lt;/td&gt; &#xA;   &lt;td&gt;https://blog.duanfei.org/&lt;/td&gt; &#xA;   &lt;td&gt;友人A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;daya0576&lt;/td&gt; &#xA;   &lt;td&gt;https://changchen.me/&lt;/td&gt; &#xA;   &lt;td&gt;喜欢 python 的大牙&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kenlai&lt;/td&gt; &#xA;   &lt;td&gt;https://kenlai.me/&lt;/td&gt; &#xA;   &lt;td&gt;网络前辈&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Frost Ming&lt;/td&gt; &#xA;   &lt;td&gt;https://frostming.com/&lt;/td&gt; &#xA;   &lt;td&gt;醉后不知天在水，满船清梦压星河&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChrAlpha&lt;/td&gt; &#xA;   &lt;td&gt;https://ichr.me/&lt;/td&gt; &#xA;   &lt;td&gt;你唯有拼尽全力，才能显得毫不费力&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;古思为&lt;/td&gt; &#xA;   &lt;td&gt;https://siwei.io/&lt;/td&gt; &#xA;   &lt;td&gt;I build things with magic and scale the magic to help people.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;二愣的闲谈杂鱼&lt;/td&gt; &#xA;   &lt;td&gt;https://godruoyi.com&lt;/td&gt; &#xA;   &lt;td&gt;生活总是这样，不能让人处处都满意，但我们还要热情地生活下去。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;彭宏豪的个人博客&lt;/td&gt; &#xA;   &lt;td&gt;https://penghh.fun&lt;/td&gt; &#xA;   &lt;td&gt;我的 Hexo 博客，分享一些软件或电脑的使用技巧&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yu Jinyan&lt;/td&gt; &#xA;   &lt;td&gt;https://blog.yujinyan.me/&lt;/td&gt; &#xA;   &lt;td&gt;Web, JVM, Android. Kotlin enthusiast.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Leeyom&#39;s Blog&lt;/td&gt; &#xA;   &lt;td&gt;https://blog.leeyom.top&lt;/td&gt; &#xA;   &lt;td&gt;用于记录一些幼稚的想法和脑残的瞬间&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;chaomai&#39;s blog&lt;/td&gt; &#xA;   &lt;td&gt;https://chaomai.github.io/&lt;/td&gt; &#xA;   &lt;td&gt;A repository for the things I’ve learnt, built, and wasted time on.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;linw1995&#39;s blog&lt;/td&gt; &#xA;   &lt;td&gt;https://linw1995.com/&lt;/td&gt; &#xA;   &lt;td&gt;三分热度三分收获&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;蒋继发 (Thaddeus Jiang)&lt;/td&gt; &#xA;   &lt;td&gt;https://thaddeusjiang.com/welcome.html&lt;/td&gt; &#xA;   &lt;td&gt;在日本开发 SaaS 产品，Love OSS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yisheng&#39;s blog&lt;/td&gt; &#xA;   &lt;td&gt;https://yishenggong.com/&lt;/td&gt; &#xA;   &lt;td&gt;把一些从未有过的故事带到这个世界上&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;卡瓦邦噶&lt;/td&gt; &#xA;   &lt;td&gt;https://www.kawabangga.com/&lt;/td&gt; &#xA;   &lt;td&gt;一个叫赖信涛的男人&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;猫四叔&lt;/td&gt; &#xA;   &lt;td&gt;https://yuanj.top/&lt;/td&gt; &#xA;   &lt;td&gt;记录生信小白的学习之路&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nomango&#39;s Blog&lt;/td&gt; &#xA;   &lt;td&gt;https://nomango.dev/&lt;/td&gt; &#xA;   &lt;td&gt;值得去的地方都没有捷径&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scond的博客&lt;/td&gt; &#xA;   &lt;td&gt;https://helloo2020.github.io&lt;/td&gt; &#xA;   &lt;td&gt;一个读书，跑步，旅行的人&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;置顶文章&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/259&#34;&gt;开源四年的一些记录&lt;/a&gt;--2023-03-21&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/258&#34;&gt;不用 root 使用小爱同学和 ChatGPT 交互折腾记&lt;/a&gt;--2023-02-16&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/257&#34;&gt;用 eBPF trace PostgreSQL 的几种姿势&lt;/a&gt;--2023-01-28&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/239&#34;&gt;今天的跑步电台&lt;/a&gt;--2022-07-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/228&#34;&gt;经历了人生体验最棒的一次面试&lt;/a&gt;--2021-12-06&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/223&#34;&gt;参加了《开源面对面》《ByteTalk》《枫言枫语》播客的一些记录&lt;/a&gt;--2021-11-26&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/220&#34;&gt;running_page 开源一周年的总结&lt;/a&gt;--2021-09-27&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/209&#34;&gt;如何用一个仓库记录自己的一年&lt;/a&gt;--2021-05-28&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/205&#34;&gt;力扣的程序是如何运行的&lt;/a&gt;--2021-02-01&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/198&#34;&gt;巧妙利用 iOS 的快捷指令配合 GitHub Actions 实现自动化&lt;/a&gt;--2020-12-23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/197&#34;&gt;如何获取悦跑圈数据&lt;/a&gt;--2020-12-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/195&#34;&gt;推荐一些我一直关注的觉得不错的和 Python 相关的独立博客&lt;/a&gt;--2020-11-20&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/191&#34;&gt;如何获取 keep 跑步数据&lt;/a&gt;--2020-10-22&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/186&#34;&gt;我转行程序员的经历&lt;/a&gt;--2020-09-13&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/178&#34;&gt;程序员跑步指南&lt;/a&gt;--2020-08-23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/177&#34;&gt;这个博客开源了&lt;/a&gt;--2020-08-20&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/102&#34;&gt;vscode-gcores开发笔记1&lt;/a&gt;--2020-01-19&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;最近更新&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/280&#34;&gt;记忆碎片&lt;/a&gt;--2023-12-24&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/279&#34;&gt;开源值得么？&lt;/a&gt;--2023-11-23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/275&#34;&gt;聊聊读书&lt;/a&gt;--2023-10-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/274&#34;&gt;旧文，移动端最好的游戏，《Dream Quest》以及其它&lt;/a&gt;--2023-09-28&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/272&#34;&gt;微信好友&lt;/a&gt;--2023-08-23&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2019&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/97&#34;&gt;2019最后一天，不是总结的总结&lt;/a&gt;--2019-12-31&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/85&#34;&gt;2019年11月总结及12月计划&lt;/a&gt;--2019-12-02&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/82&#34;&gt;最近的工作，生活，学习，以及其它&lt;/a&gt;--2019-11-22&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/72&#34;&gt;2019年10月总结11月计划&lt;/a&gt;--2019-11-01&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/49&#34;&gt;2019年剩下的不多了&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/44&#34;&gt;2019九月总结及十月计划&lt;/a&gt;--2019-10-02&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/29&#34;&gt;九月计划及八月总结&lt;/a&gt;--2019-09-01&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/14&#34;&gt;七月总结和八月计划&lt;/a&gt;--2019-08-01&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;2022&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/255&#34;&gt;2022 失落的一年&lt;/a&gt;--2022-12-19&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/242&#34;&gt;Random Thoughts&lt;/a&gt;--2022-08-31&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/241&#34;&gt;反思&lt;/a&gt;--2022-08-10&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/229&#34;&gt;二零二二的三个小目标&lt;/a&gt;--2022-01-07&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;一些计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/187&#34;&gt;把running page 变得通用必须提上日程了&lt;/a&gt;--2020-09-17&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/184&#34;&gt;月跑 250 km计划&lt;/a&gt;--2020-09-01&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/174&#34;&gt;自律，悔恨，逝去的日子，成长&lt;/a&gt;--2020-08-12&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/168&#34;&gt;近期程序上的安排&lt;/a&gt;--2020-07-06&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/167&#34;&gt;把事情做完，做一件事，爬也要爬完&lt;/a&gt;--2020-06-23&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/164&#34;&gt;跑步数据找到同步方法了&lt;/a&gt;--2020-06-06&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/126&#34;&gt;从今天起&lt;/a&gt;--2020-03-01&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/116&#34;&gt;是时候开一个新坑了，跑步数据展示？&lt;/a&gt;--2020-02-19&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/59&#34;&gt;10月程序上的计划&lt;/a&gt;--2019-10-07&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/51&#34;&gt;点子合集&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/5&#34;&gt;搞定收藏夹&lt;/a&gt;--2019-07-22&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;一些记录&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/274&#34;&gt;旧文，移动端最好的游戏，《Dream Quest》以及其它&lt;/a&gt;--2023-09-28&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/262&#34;&gt;杂感&lt;/a&gt;--2023-05-01&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/259&#34;&gt;开源四年的一些记录&lt;/a&gt;--2023-03-21&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/258&#34;&gt;不用 root 使用小爱同学和 ChatGPT 交互折腾记&lt;/a&gt;--2023-02-16&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/254&#34;&gt;写诗吧&lt;/a&gt;--2022-11-25&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/248&#34;&gt;如果判断一个数字帐号来自中国大陆&lt;/a&gt;--2022-10-25&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/231&#34;&gt;运交华盖欲何求&lt;/a&gt;--2022-03-03&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/223&#34;&gt;参加了《开源面对面》《ByteTalk》《枫言枫语》播客的一些记录&lt;/a&gt;--2021-11-26&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/215&#34;&gt;张小龙的饭否&lt;/a&gt;--2021-07-08&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/195&#34;&gt;推荐一些我一直关注的觉得不错的和 Python 相关的独立博客&lt;/a&gt;--2020-11-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/186&#34;&gt;我转行程序员的经历&lt;/a&gt;--2020-09-13&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/148&#34;&gt;做减法&lt;/a&gt;--2020-04-16&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/112&#34;&gt;少说，多做，&lt;/a&gt;--2020-02-13&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/107&#34;&gt;刷完了《东京男子图鉴》&lt;/a&gt;--2020-01-28&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/55&#34;&gt;蛋疼&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/53&#34;&gt;编程的一些心得&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/37&#34;&gt;一些心得&lt;/a&gt;--2019-09-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/3&#34;&gt;王兴的饭否&lt;/a&gt;--2019-07-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/2&#34;&gt;今天看到的一些话&lt;/a&gt;--2019-07-19&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;工作&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/261&#34;&gt;vm.overcommit_memory 学习笔记&lt;/a&gt;--2023-04-12&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/228&#34;&gt;经历了人生体验最棒的一次面试&lt;/a&gt;--2021-12-06&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/203&#34;&gt;沮丧&lt;/a&gt;--2021-01-25&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/176&#34;&gt;心情不是很好的。&lt;/a&gt;--2020-08-19&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/165&#34;&gt;最近在家，状态很不好。&lt;/a&gt;--2020-06-09&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/161&#34;&gt;认真工作&lt;/a&gt;--2020-05-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/153&#34;&gt;终于上班了，开心&lt;/a&gt;--2020-05-06&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/150&#34;&gt;第一次团建&lt;/a&gt;--2020-04-25&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/128&#34;&gt;复工第一天&lt;/a&gt;--2020-03-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/118&#34;&gt;凡事有交代 件件有着落 事事有回音&lt;/a&gt;--2020-02-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/113&#34;&gt;在家办公&lt;/a&gt;--2020-02-14&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/101&#34;&gt;遇到棘手问题前，别慌！先google, 再仔细看&lt;/a&gt;--2020-01-14&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/91&#34;&gt;最近开始忙起来了&lt;/a&gt;--2019-12-19&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/84&#34;&gt;还有10分钟下班&lt;/a&gt;--2019-11-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/77&#34;&gt;轻松了几天，新需求要来了&lt;/a&gt;--2019-11-13&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/71&#34;&gt;需要新的开始&lt;/a&gt;--2019-10-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/69&#34;&gt;工作总结专用贴&lt;/a&gt;--2019-10-21&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/65&#34;&gt;Anyway 加油干吧&lt;/a&gt;--2019-10-15&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/62&#34;&gt;新工作遇到的坑&lt;/a&gt;--2019-10-10&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/61&#34;&gt;工作第二天。&lt;/a&gt;--2019-10-09&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/60&#34;&gt;今天新公司上班第一天，加油&lt;/a&gt;--2019-10-08&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/58&#34;&gt;明天进入新的公司了&lt;/a&gt;--2019-10-07&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/48&#34;&gt;端正工作态度好好写代码&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/42&#34;&gt;终于从这家公司离职了，开心&lt;/a&gt;--2019-09-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/41&#34;&gt;明天最后一天了，一些心得&lt;/a&gt;--2019-09-28&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/40&#34;&gt;尝试不玩手机&lt;/a&gt;--2019-09-27&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/35&#34;&gt;剩下的日子和要交接的工作&lt;/a&gt;--2019-09-19&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/33&#34;&gt;定日子了&lt;/a&gt;--2019-09-16&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/30&#34;&gt;拿到offer了&lt;/a&gt;--2019-09-06&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/24&#34;&gt;快点离开这个地方&lt;/a&gt;--2019-08-19&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/17&#34;&gt;Do my best and fuck off&lt;/a&gt;--2019-08-06&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/12&#34;&gt;跳槽&lt;/a&gt;--2019-07-31&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/7&#34;&gt;说说工作&lt;/a&gt;--2019-07-25&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;技术文章&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/270&#34;&gt;如何写一个 PostgreSQL Extension&lt;/a&gt;--2023-07-08&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/257&#34;&gt;用 eBPF trace PostgreSQL 的几种姿势&lt;/a&gt;--2023-01-28&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/252&#34;&gt;利用 GitHubPoster 和 GitHub Actions 备份任意用户推特&lt;/a&gt;--2022-11-19&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/237&#34;&gt;LeetCode 是如何运行的--测试篇&lt;/a&gt;--2022-07-01&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/233&#34;&gt;Postgres 中 GUC 的一些记录&lt;/a&gt;--2022-04-21&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/212&#34;&gt;从 Rich 作者的一个问题说起&lt;/a&gt;--2021-06-21&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/209&#34;&gt;如何用一个仓库记录自己的一年&lt;/a&gt;--2021-05-28&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/205&#34;&gt;力扣的程序是如何运行的&lt;/a&gt;--2021-02-01&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/191&#34;&gt;如何获取 keep 跑步数据&lt;/a&gt;--2020-10-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/189&#34;&gt;决定把gitblog和kb结合起来&lt;/a&gt;--2020-09-23&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/178&#34;&gt;程序员跑步指南&lt;/a&gt;--2020-08-23&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/177&#34;&gt;这个博客开源了&lt;/a&gt;--2020-08-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/158&#34;&gt;机器学习存档&lt;/a&gt;--2020-05-21&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/104&#34;&gt;异步存档&lt;/a&gt;--2020-01-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/90&#34;&gt;这几天的一些心得&lt;/a&gt;--2019-12-15&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/88&#34;&gt;算法存档&lt;/a&gt;--2019-12-11&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/86&#34;&gt;Git 存档&lt;/a&gt;--2019-12-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/81&#34;&gt;docker存档&lt;/a&gt;--2019-11-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/80&#34;&gt;前端存档&lt;/a&gt;--2019-11-19&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/63&#34;&gt;psql 存档&lt;/a&gt;--2019-10-11&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/45&#34;&gt;利用github issues加上github webhook写博客自动化&lt;/a&gt;--2019-10-02&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/43&#34;&gt;Python存档&lt;/a&gt;--2019-09-30&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/36&#34;&gt;工具小技巧&lt;/a&gt;--2019-09-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/21&#34;&gt;CSS存档&lt;/a&gt;--2019-08-09&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/20&#34;&gt;MongoDB存档&lt;/a&gt;--2019-08-09&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/18&#34;&gt;JS存档&lt;/a&gt;--2019-08-07&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/15&#34;&gt;ES存档&lt;/a&gt;--2019-08-02&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/11&#34;&gt;正则表达式&lt;/a&gt;--2019-07-31&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/10&#34;&gt;踩坑小记&lt;/a&gt;--2019-07-28&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/9&#34;&gt;MySQL存档&lt;/a&gt;--2019-07-27&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/8&#34;&gt;Linux存档&lt;/a&gt;--2019-07-26&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;日记&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/280&#34;&gt;记忆碎片&lt;/a&gt;--2023-12-24&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/268&#34;&gt;五月病&lt;/a&gt;--2023-06-02&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/251&#34;&gt;一杯敬月光&lt;/a&gt;--2022-11-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/221&#34;&gt;有趣与无趣&lt;/a&gt;--2021-10-13&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/218&#34;&gt;一点思考&lt;/a&gt;--2021-08-19&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/216&#34;&gt;朋友圈&lt;/a&gt;--2021-08-03&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/201&#34;&gt;新年碎碎念&lt;/a&gt;--2021-01-08&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/196&#34;&gt;生的对立面&lt;/a&gt;--2020-12-10&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/188&#34;&gt;感冒了，真是难受&lt;/a&gt;--2020-09-21&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/166&#34;&gt;要怎样才能过好一生？&lt;/a&gt;--2020-06-14&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/133&#34;&gt;还有一个小时31岁了&lt;/a&gt;--2020-03-14&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/103&#34;&gt;又是新的一天，一动没动写了4个小时代码&lt;/a&gt;--2020-01-19&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/96&#34;&gt;累了，想休息一天&lt;/a&gt;--2019-12-28&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/95&#34;&gt;圣诞节&lt;/a&gt;--2019-12-25&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/94&#34;&gt;12月差不多结束了。&lt;/a&gt;--2019-12-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/93&#34;&gt;一天天&lt;/a&gt;--2019-12-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/89&#34;&gt;我他妈服了。。。&lt;/a&gt;--2019-12-14&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/83&#34;&gt;新的一周，不是新的开始。&lt;/a&gt;--2019-11-25&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/73&#34;&gt;完成了北京马拉松&lt;/a&gt;--2019-11-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/70&#34;&gt;懈怠了，可不是好事&lt;/a&gt;--2019-10-24&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/68&#34;&gt;总是在不知不觉间的&lt;/a&gt;--2019-10-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/67&#34;&gt;这个Issue用来测试&lt;/a&gt;--2019-10-17&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/66&#34;&gt;最近少了一些目标&lt;/a&gt;--2019-10-17&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/64&#34;&gt;去盘锦跑了个半马。&lt;/a&gt;--2019-10-13&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/57&#34;&gt;流水账&lt;/a&gt;--2019-10-06&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/56&#34;&gt;十一生病了&lt;/a&gt;--2019-10-05&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/54&#34;&gt;桌子好乱啊，床也好乱啊&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/50&#34;&gt;第五十篇，算是测试&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/47&#34;&gt;忘带电源了&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/46&#34;&gt;休息日&lt;/a&gt;--2019-10-03&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/39&#34;&gt;坐在星巴克里&lt;/a&gt;--2019-09-25&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/38&#34;&gt;从这一刻开始，从下一刻放弃&lt;/a&gt;--2019-09-24&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/34&#34;&gt;冒泡的声音&lt;/a&gt;--2019-09-17&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/32&#34;&gt;自律&lt;/a&gt;--2019-09-11&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/31&#34;&gt;关于成长&lt;/a&gt;--2019-09-06&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/28&#34;&gt;总结很重要啊&lt;/a&gt;--2019-08-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/27&#34;&gt;懈怠&lt;/a&gt;--2019-08-24&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/26&#34;&gt;一篇文章，一首诗，以及自己&lt;/a&gt;--2019-08-21&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/25&#34;&gt;重来&lt;/a&gt;--2019-08-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/22&#34;&gt;雨中奔跑&lt;/a&gt;--2019-08-11&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/19&#34;&gt;手机坏了&lt;/a&gt;--2019-08-08&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/16&#34;&gt;普通的一天，不普通的一天&lt;/a&gt;--2019-08-03&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/6&#34;&gt;终不似，少年游&lt;/a&gt;--2019-07-24&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/4&#34;&gt;每天留下点什么&lt;/a&gt;--2019-07-21&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/1&#34;&gt;Github更持久些&lt;/a&gt;--2019-07-18&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;精进计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/163&#34;&gt;修炼内功，最近在刷《SICP》&lt;/a&gt;--2020-06-04&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/147&#34;&gt;人和人之家的差距太大了&lt;/a&gt;--2020-04-13&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/79&#34;&gt;我不服输&lt;/a&gt;--2019-11-16&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/78&#34;&gt;一定要摆脱撞大运编程&lt;/a&gt;--2019-11-15&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/76&#34;&gt;又要开始了&lt;/a&gt;--2019-11-11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;读书笔记&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/275&#34;&gt;聊聊读书&lt;/a&gt;--2023-10-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/74&#34;&gt;《Vim实用技巧》读书笔记&lt;/a&gt;--2019-11-05&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/52&#34;&gt;计算机组成要素读书笔记&lt;/a&gt;--2019-10-04&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/23&#34;&gt;《快乐的Linux命令行》读书笔记&lt;/a&gt;--2019-08-12&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/13&#34;&gt;MySQL是怎样跑起来的读书笔记&lt;/a&gt;--2019-08-01&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2020&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/194&#34;&gt;2020 年 10 月总结 11 月计划 &lt;/a&gt;--2020-11-04&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/193&#34;&gt;写在 0x20 岁之前&lt;/a&gt;--2020-10-26&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/190&#34;&gt;2020 年 9 月总结 10 月计划&lt;/a&gt;--2020-10-05&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/182&#34;&gt;2020年八月总结九月月展望&lt;/a&gt;--2020-08-31&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/175&#34;&gt;跑步网站做完了，昨天跑了20km, 下一个做什么呢？&lt;/a&gt;--2020-08-17&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/173&#34;&gt;番茄工作法，焦虑，咖啡，喘不上气，生活&lt;/a&gt;--2020-08-10&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/171&#34;&gt;2020年七月总结八月展望&lt;/a&gt;--2020-08-01&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/160&#34;&gt;新的计划，新的开始，戒掉社交网络&lt;/a&gt;--2020-05-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/159&#34;&gt;新的计划，新的开始，学日语&lt;/a&gt;--2020-05-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/154&#34;&gt;新的计划，新的开始，再一次减肥。&lt;/a&gt;--2020-05-09&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/152&#34;&gt;2020四月总结五月计划&lt;/a&gt;--2020-05-03&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/151&#34;&gt;四月过去了，五月来了&lt;/a&gt;--2020-05-01&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/149&#34;&gt;下周一开始减肥，轮回&lt;/a&gt;--2020-04-18&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/146&#34;&gt;一口气看完一本书的感觉好爽&lt;/a&gt;--2020-04-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/145&#34;&gt;3月总结及4月展望&lt;/a&gt;--2020-04-01&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/144&#34;&gt;新的一周，新的一个月&lt;/a&gt;--2020-03-30&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/142&#34;&gt;删了微博&lt;/a&gt;--2020-03-21&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/141&#34;&gt;日语学习&lt;/a&gt;--2020-03-20&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/140&#34;&gt;来了。&lt;/a&gt;--2020-03-18&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/139&#34;&gt;迁移测试&lt;/a&gt;--2020-03-17&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/135&#34;&gt;美股熔断了&lt;/a&gt;--2020-03-16&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/131&#34;&gt;挺没劲的&lt;/a&gt;--2020-03-10&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/130&#34;&gt;快31岁了，又胖了&lt;/a&gt;--2020-03-09&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/127&#34;&gt;二月总结及三月展望&lt;/a&gt;--2020-03-02&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/123&#34;&gt;新的开始&lt;/a&gt;--2020-02-24&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/121&#34;&gt;不能再这样下去了&lt;/a&gt;--2020-02-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/114&#34;&gt;不刷，冷静下来。&lt;/a&gt;--2020-02-17&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/110&#34;&gt;看到一张图，说点什么。&lt;/a&gt;--2020-02-08&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/109&#34;&gt;焦虑&lt;/a&gt;--2020-02-03&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/108&#34;&gt;2020 年 1 月总结 2 月展望就一个，这个操蛋的肺炎快点过去&lt;/a&gt;--2020-02-01&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/105&#34;&gt;过年好&lt;/a&gt;--2020-01-24&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/100&#34;&gt;第100篇，又到了0点&lt;/a&gt;--2020-01-12&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/98&#34;&gt;2020就这么来了&lt;/a&gt;--2020-01-01&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;2021&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/204&#34;&gt;生存守则&lt;/a&gt;--2021-01-27&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/202&#34;&gt;今年的三个小目标&lt;/a&gt;--2021-01-14&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/200&#34;&gt;二零二一开始&lt;/a&gt;--2021-01-04&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;开发笔记&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/220&#34;&gt;running_page 开源一周年的总结&lt;/a&gt;--2021-09-27&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/198&#34;&gt;巧妙利用 iOS 的快捷指令配合 GitHub Actions 实现自动化&lt;/a&gt;--2020-12-23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/197&#34;&gt;如何获取悦跑圈数据&lt;/a&gt;--2020-12-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/115&#34;&gt;vscode-gcores开发笔记3&lt;/a&gt;--2020-02-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/111&#34;&gt;vscode-gcores 开发笔记 2&lt;/a&gt;--2020-02-11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/102&#34;&gt;vscode-gcores开发笔记1&lt;/a&gt;--2020-01-19&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;生活&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/279&#34;&gt;开源值得么？&lt;/a&gt;--2023-11-23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/272&#34;&gt;微信好友&lt;/a&gt;--2023-08-23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/239&#34;&gt;今天的跑步电台&lt;/a&gt;--2022-07-18&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/235&#34;&gt;新冠纪元&lt;/a&gt;--2022-04-26&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/230&#34;&gt;年终岁尾&lt;/a&gt;--2022-01-28&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;显示更多&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/214&#34;&gt;一件小事&lt;/a&gt;--2021-07-05&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/208&#34;&gt;逃离&lt;/a&gt;--2021-05-12&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/207&#34;&gt;近况&lt;/a&gt;--2021-03-25&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/206&#34;&gt;年过完了&lt;/a&gt;--2021-02-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/199&#34;&gt;记住这一刻&lt;/a&gt;--2020-12-29&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/185&#34;&gt;普通人和天才之间的巨大鸿沟&lt;/a&gt;--2020-09-08&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/179&#34;&gt;眼见何事，情系何处，身在何方，心思何人&lt;/a&gt;--2020-08-26&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/172&#34;&gt;迷茫，又一次重新学日语&lt;/a&gt;--2020-08-04&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/170&#34;&gt;心态发生了好多转变&lt;/a&gt;--2020-07-22&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/169&#34;&gt;既然注定孤独，就孤独吧&lt;/a&gt;--2020-07-11&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/162&#34;&gt;振作起来，快乐生活&lt;/a&gt;--2020-06-03&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/157&#34;&gt;累&lt;/a&gt;--2020-05-16&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/156&#34;&gt;过日子&lt;/a&gt;--2020-05-14&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/143&#34;&gt;减肥&lt;/a&gt;--2020-03-28&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/134&#34;&gt;31岁，加法与减法&lt;/a&gt;--2020-03-15&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/129&#34;&gt;一下午刷了一遍《恶意》&lt;/a&gt;--2020-03-08&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/124&#34;&gt;闭嘴&lt;/a&gt;--2020-02-27&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/122&#34;&gt;今天看了个电影《入侵脑细胞》&lt;/a&gt;--2020-02-23&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/87&#34;&gt;媳妇生病了，心疼&lt;/a&gt;--2019-12-05&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/75&#34;&gt;明天小十一就2岁了&lt;/a&gt;--2019-11-09&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;TODO list from &lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/234&#34;&gt;Postgres 需要学的东西&lt;/a&gt;--17 jobs to do--2 jobs done&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GUC&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Btree &amp;amp; B+Tree&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; WAL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Locks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Shared memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Page&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; LWLocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; IO&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 协议&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Diskquota&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tuple&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; FSM&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Join&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; MVCC&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; BufferPool&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 分布式&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hash&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; MmeoryContext&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SPI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO list from &lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/219&#34;&gt;接下来要写的东西&lt;/a&gt;--3 jobs to do--5 jobs done&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; running_page 一周年总结&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 机核文章&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 我跑步听的播客&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 该离开了&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 选择&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; django shell 的运行原理&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 推荐两个 YouTube 程序员&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 游戏行业科普&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO list from &lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/181&#34;&gt;学习生活上的计划&lt;/a&gt;--3 jobs to do--1 jobs done&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 背标日初级下的单词&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 月跑量突破250 km&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 瘦到130斤&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 年底考个日语 3 级&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO list from &lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/180&#34;&gt;程序上新的计划&lt;/a&gt;--2 jobs to do--8 jobs done&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 完善 gitblog 的 action 让用户更少更改&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 给 gitblog 这个增加todo list 功能(这个就是测试）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 给 running page 增加排序&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 完善 runtastic 增加一个参数&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 尝试搞定 vscode-leetcode 的cn第三方登陆&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 研究自动截图发邮件功能（工作上）&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 把 running page 变得更通用(自动生成的js可以用gpx生成)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 搞定 gcores 日历&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 继续给大连咖啡做贡献&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 学点底层&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>