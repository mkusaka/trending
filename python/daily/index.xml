<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-27T01:43:45Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Snaacky/dndserver</title>
    <updated>2023-04-27T01:43:45Z</updated>
    <id>tag:github.com,2023-04-27:/Snaacky/dndserver</id>
    <link href="https://github.com/Snaacky/dndserver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dark and Darker private server implementation written in Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dndserver &lt;a href=&#34;https://discord.gg/JdUWpdyvKr&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1098711487125672016/widget.png?style=shield&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Dark and Darker private server implementation written in Python.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/darkanddarker&#34;&gt;Playtest 5 beta files + hotfix 2 (0.5.0.1172)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python-poetry.org/&#34;&gt;Poetry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone git@github.com:Snaacky/dndserver.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd dndserver&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;poetry install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;poetry shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python -m dndserver.server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add &lt;code&gt;-server=dcweb.pages.dev:80&lt;/code&gt; to your game&#39;s launch options.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://github.com/users/Snaacky/projects/4?query=is%3Aopen+sort%3Aupdated-desc&#34;&gt;our project board&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://github.com/Snaacky/dndserver/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BigBrotherTrade/trader</title>
    <updated>2023-04-27T01:43:45Z</updated>
    <id>tag:github.com,2023-04-27:/BigBrotherTrade/trader</id>
    <link href="https://github.com/BigBrotherTrade/trader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;交易模块&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;trader&lt;/h1&gt; &#xA;&lt;p&gt;操盘大哥的交易组件&lt;/p&gt; &#xA;&lt;h1&gt;INSTALL&lt;/h1&gt; &#xA;&lt;p&gt;先装talib的C库，再用pip装依赖。&lt;/p&gt; &#xA;&lt;p&gt;修改 mysql 配置文件 /etc/my.cnf.d/server.cnf ，增加如下配置:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[mysqld]&#xA;&#xA;wait_timeout=31536000&#xA;&#xA;interactive_timeout=31536000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;重启mysql服务&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;trader&lt;/code&gt; is offered under the Apache 2 license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>farizrahman4u/loopgpt</title>
    <updated>2023-04-27T01:43:45Z</updated>
    <id>tag:github.com,2023-04-27:/farizrahman4u/loopgpt</id>
    <link href="https://github.com/farizrahman4u/loopgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modular Auto-GPT Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;p align=&#34;center&#34;&gt; L♾️pGPT &lt;/p&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;A Modular Auto-GPT Framework&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/rqs26cqx7v&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1098162593291587594?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;L♾️pGPT is a re-implementation of the popular &lt;a href=&#34;https://github.com/Significant-Gravitas/Auto-GPT&#34;&gt;Auto-GPT&lt;/a&gt; project as a proper python package, written with modularity and extensibility in mind.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Features 🚀&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&#34;Plug N Play&#34; API&lt;/strong&gt; - Extensible and modular &#34;Pythonic&#34; framework, not just a command line tool. Easy to add new features, integrations and custom agent capabilities, all from python code, no nasty config files!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GPT 3.5 friendly&lt;/strong&gt; - Better results than Auto-GPT for those who don&#39;t have GPT-4 access yet!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimal prompt overhead&lt;/strong&gt; - Every token counts. We are continuously working on getting the best results with the least possible number of tokens.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Human in the Loop&lt;/strong&gt; - Ability to &#34;course correct&#34; agents who go astray via human feedback.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full state serialization&lt;/strong&gt; - Pick up where you left off; L♾️pGPT can save the complete state of an agent, including memory and the states of its tools to a file or python object. No external databases or vector stores required (but they are still supported)!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🧑‍💻 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Install from PyPI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install loopgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://www.github.com/farizrahman4u/loopgpt.git@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install from source (dev)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://www.github.com/farizrahman4u/loopgpt.git@main&#xA;cd loopgpt&#xA;python setup.py develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🏎️ Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You must set your OpenAI API Key 🔑 in your environment variables for anything to work. See the &lt;a href=&#34;https://raw.githubusercontent.com/farizrahman4u/loopgpt/main/#-requirements&#34;&gt;Requirements secion&lt;/a&gt; below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Create a new L♾️pGPT Agent🕵️:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from loopgpt.agent import Agent&#xA;&#xA;agent = Agent()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;L♾️pGPT uses &lt;code&gt;gpt-3.5-turbo&lt;/code&gt; by default and all outputs shown here are made using it. GPT-4 users can set &lt;code&gt;model=&#34;gpt-4&#34;&lt;/code&gt; instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent = Agent(model=&#34;gpt-4&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup the Agent🕵️&#39;s attributes:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent.name = &#34;ResearchGPT&#34;&#xA;agent.description = &#34;an AI assistant that researches and finds the best tech products&#34;&#xA;agent.goals = [&#xA;    &#34;Search for the best headphones on Google&#34;,&#xA;    &#34;Analyze specs, prices and reviews to find the top 5 best headphones&#34;,&#xA;    &#34;Write the list of the top 5 best headphones and their prices to a file&#34;,&#xA;    &#34;Summarize the pros and cons of each headphone and write it to a different file called &#39;summary.txt&#39;&#34;,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And we&#39;re off! Let&#39;s run the Agent🕵️&#39;s CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent.cli()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can exit the CLI by typing &#34;exit&#34;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/farizrahman4u/loopgpt/main/docs/assets/imgs/loopgpt_demo_pic.png?raw=true&#34; height=&#34;350&#34;&gt; &#xA;&lt;h3&gt;🔁 Continuous Mode 🔁&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;continuous&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;, the agent will not ask for the user&#39;s permission to execute commands. It may go into infinite loops, so use it at your own risk!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent.cli(continuous=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💻 Command Line Only Mode&lt;/h3&gt; &#xA;&lt;p&gt;You can run L♾️pGPT directly from the command line without having to write any python code as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;loopgpt run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;loopgpt --help&lt;/code&gt; to see all the available options.&lt;/p&gt; &#xA;&lt;h2&gt;⚒️ Adding custom tools ⚒️&lt;/h2&gt; &#xA;&lt;p&gt;L♾️pGPT agents come with a set of builtin tools which allows them to perform various basic tasks such as searching the web, filesystem operations, etc. You can view these tools with &lt;code&gt;print(agent.tools)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition to these builtin tools, you can also add your own tools to the agent&#39;s toolbox.&lt;/p&gt; &#xA;&lt;h3&gt;Example: WeatherGPT 🌦️&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s create WeatherGPT, an AI assistant for all things weather.&lt;/p&gt; &#xA;&lt;p&gt;A tool inherits from &lt;code&gt;BaseTool&lt;/code&gt; and you only need to override 3 methods to get your tool up and running!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;args&lt;/code&gt;: A dictionary describing the tool&#39;s arguments and their descriptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resp&lt;/code&gt;: A dictionary describing the tool&#39;s response and their descriptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt;: The tool&#39;s main logic. It takes the tool&#39;s arguments as input and returns the tool&#39;s response.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from loopgpt.tools import BaseTool&#xA;&#xA;class GetWeather(BaseTool):&#xA;    @property&#xA;    def args(self):&#xA;        return {&#34;city&#34;: &#34;name of the city&#34;}&#xA;    &#xA;    @property&#xA;    def resp(self):&#xA;        return {&#34;report&#34;: &#34;The weather report for the city&#34;}&#xA;    &#xA;    def run(self, city):&#xA;        ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;L♾️pGPT gives a default ID and description to your tool but you can override them if you&#39;d like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class GetWeather(BaseTool):&#xA;    ...&#xA;&#xA;    @property&#xA;    def id(self):&#xA;        return &#34;get_weather_command&#34;&#xA;    &#xA;    @property&#xA;    def desc(self):&#xA;        &#34;&#34;&#34;A description is recommended so that the agent knows more about what the tool does&#34;&#34;&#34;&#xA;        return &#34;Quickly get the weather for a given city&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now let&#39;s define what our tool will do in its &lt;code&gt;run&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests&#xA;&#xA;# Define your custom tool&#xA;class GetWeather(BaseTool):&#xA;    ...&#xA;    &#xA;    def run(self, city):&#xA;        try:&#xA;            url = &#34;https://wttr.in/{}?format=%l+%C+%h+%t+%w+%p+%P&#34;.format(city)&#xA;            data = requests.get(url).text.split(&#34; &#34;)&#xA;            keys = (&#34;location&#34;, &#34;condition&#34;, &#34;humidity&#34;, &#34;temperature&#34;, &#34;wind&#34;, &#34;precipitation&#34;, &#34;pressure&#34;)&#xA;            data = {&#34;report&#34;: dict(zip(keys, data))}&#xA;            return data&#xA;        except Exception as e:&#xA;            return {&#34;report&#34;: f&#34;An error occurred while getting the weather: {e}.&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! You&#39;ve built your first custom tool. Let&#39;s register it with a new agent and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import loopgpt&#xA;&#xA;# Create Agent&#xA;agent = loopgpt.Agent()&#xA;agent.name = &#34;WeatherGPT&#34;&#xA;agent.description = &#34;an AI assistant that tells you the weather&#34;&#xA;agent.goals = [&#xA;    &#34;Get the weather for NewYork and Beijing&#34;,&#xA;    &#34;Give the user tips on how to dress for the weather in NewYork and Beijing&#34;,&#xA;    &#34;Write the tips to a file called &#39;dressing_tips.txt&#39;&#34;&#xA;]&#xA;&#xA;&#xA;# Register custom tool type&#xA;# This is actually not required here, but is required when you load a saved agent with custom tools.&#xA;loopgpt.tools.register_tool_type(GetWeather)&#xA;&#xA;# Register Tool&#xA;weather_tool = GetWeather()&#xA;agent.tools[weather_tool.id] = weather_tool&#xA;&#xA;# Run the agent&#39;s CLI&#xA;agent.cli()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s take a look at the &lt;code&gt;dressing_tips.txt&lt;/code&gt; file that WeatherGPT wrote for us:&lt;/p&gt; &#xA;&lt;p&gt;dressing_tips.txt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- It&#39;s Clear outside with a temperature of +10°C in Beijing. Wearing a light jacket and pants is recommended.&#xA;- It&#39;s Overcast outside with a temperature of +11°C in New York. Wearing a light jacket, pants, and an umbrella is recommended.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚢 Course Correction&lt;/h2&gt; &#xA;&lt;p&gt;Unlike Auto-GPT, the agent does not terminate when the user denies the execution of a command. Instead it asks the user for feedback to correct its course.&lt;/p&gt; &#xA;&lt;p&gt;To correct the agent&#39;s course, just deny execution and provide feedback:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/farizrahman4u/loopgpt/main/docs/assets/imgs/course_correction_1.png?raw=true&#34;&gt; &#xA;&lt;p&gt;The agent has updated its course of action:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/farizrahman4u/loopgpt/main/docs/assets/imgs/course_correction_2.png?raw=true&#34;&gt; &#xA;&lt;h2&gt;💾 Saving and Loading Agent State 💾&lt;/h2&gt; &#xA;&lt;p&gt;You can save an agent&#39;s state to a json file with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent.save(&#34;ResearchGPT.json&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This saves the agent&#39;s configuration (model, name, description etc) as well as its internal state (conversation state, memory, tool states etc). You can also save just the confifguration by passing &lt;code&gt;include_state=False&lt;/code&gt; to &lt;code&gt;agent.save()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent.save(&#34;ResearchGPT.json&#34;, include_state=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then pick up where you left off with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import loopgpt&#xA;agent = loopgpt.Agent.load(&#34;ResearchGPT.json&#34;)&#xA;agent.cli()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or by running the saved agent from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;loopgpt run ResearchGPT.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can convert the agent state to a json compatible python dictionary instead of writing to a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent_config = agent.config()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get just the configuration without the internal state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;agent_config = agent.config(include_state=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reload the agent from the config, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import loopgpt&#xA;&#xA;agent = loopgpt.Agent.from_config(agent_config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📋 Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.8+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;An OpenAI API Key&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set environment variable &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; to the API key&lt;/li&gt; &#xA;   &lt;li&gt;How to set environment variables: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.architectryan.com/2018/08/31/how-to-change-environment-variables-on-windows-10/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/how-to-set-an-environment-variable-in-linux/&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://phoenixnap.com/kb/set-environment-variable-mac&#34;&gt;Mac&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Google Chrome&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional Requirements&lt;/h3&gt; &#xA;&lt;p&gt;For official google search support you will need to setup two environment variable keys &lt;code&gt;GOOGLE_API_KEY&lt;/code&gt; and &lt;code&gt;CUSTOM_SEARCH_ENGINE_ID&lt;/code&gt;, here is how to get them:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create an application on the &lt;a href=&#34;https://console.developers.google.com&#34;&gt;Google Developers Console&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create your custom search engine using &lt;a href=&#34;https://programmablesearchengine.google.com/controlpanel/create&#34;&gt;Google Custom Search&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Once your custom search engine is created, select it and get into the details page of the search engine. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;On the &#34;Basic&#34; section, you will find the &#34;Search engine ID&#34; field, that value is what you will use for the &lt;code&gt;CUSTOM_SEARCH_ENGINE_ID&lt;/code&gt; environment variable.&lt;/li&gt; &#xA;   &lt;li&gt;Now go to the &#34;Programmatic Access&#34; section at the bottom of the page. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Create a &#34;Custom Search JSON API&#34;&lt;/li&gt; &#xA;     &lt;li&gt;Follow the dialog by selecting the application you created on step #1 and when you get your API key use it to populate the &lt;code&gt;GOOGLE_API_KEY&lt;/code&gt; environment variable.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;ℹ️ In case these are absent, L♾️pGPT will fall back to using &lt;a href=&#34;https://pypi.org/project/duckduckgo-search/&#34;&gt;DuckDuckGo Search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💌 Contribute&lt;/h2&gt; &#xA;&lt;p&gt;We need A LOT of Help! Please open an issue or a PR if you&#39;d like to contribute.&lt;/p&gt; &#xA;&lt;h2&gt;🌳 Community&lt;/h2&gt; &#xA;&lt;p&gt;Need help? Join our &lt;a href=&#34;https://discord.gg/rqs26cqx7v&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;⭐ Star History 📈&lt;/h2&gt; &#xA;&lt;img src=&#34;https://api.star-history.com/svg?repos=farizrahman4u/loopgpt&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34; height=&#34;350&#34;&gt;</summary>
  </entry>
</feed>