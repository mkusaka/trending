<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T01:34:53Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tlkh/asitop</title>
    <updated>2022-07-31T01:34:53Z</updated>
    <id>tag:github.com,2022-07-31:/tlkh/asitop</id>
    <link href="https://github.com/tlkh/asitop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Perf monitoring CLI tool for Apple Silicon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;asitop&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/asitop&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Performance monitoring CLI tool for Apple Silicon&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tlkh/asitop/main/images/asitop.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install asitop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is &lt;code&gt;asitop&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A Python-based &lt;code&gt;nvtop&lt;/code&gt;-inspired command line tool for Apple Silicon (aka M1) Macs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Utilization info: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CPU (E-cluster and P-cluster), GPU&lt;/li&gt; &#xA;   &lt;li&gt;Frequency and utilization&lt;/li&gt; &#xA;   &lt;li&gt;ANE utilization (measured by power)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Memory info: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;RAM and swap, size and usage&lt;/li&gt; &#xA;   &lt;li&gt;Memory bandwidth (CPU/GPU/total)&lt;/li&gt; &#xA;   &lt;li&gt;Media engine bandwidth usage&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Power info: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Package power, CPU power, GPU power&lt;/li&gt; &#xA;   &lt;li&gt;Chart for CPU/GPU power&lt;/li&gt; &#xA;   &lt;li&gt;Peak power, rolling average display&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;asitop&lt;/code&gt; uses the built-in &lt;a href=&#34;https://www.unix.com/man-page/osx/1/powermetrics/&#34;&gt;&lt;code&gt;powermetrics&lt;/code&gt;&lt;/a&gt; utility on macOS, which allows access to a variety of hardware performance counters. Note that it requires &lt;code&gt;sudo&lt;/code&gt; to run due to &lt;code&gt;powermetrics&lt;/code&gt; needing root access to run. &lt;code&gt;asitop&lt;/code&gt; is lightweight and has minimal performance impact.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;asitop&lt;/code&gt; only works on Apple Silicon Macs on macOS Monterey!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;asitop&lt;/code&gt; is a Python-based command line tool. You need &lt;code&gt;pip&lt;/code&gt; to download and install &lt;code&gt;asitop&lt;/code&gt;. macOS already comes with Python, to install &lt;code&gt;pip&lt;/code&gt;, you can follow an &lt;a href=&#34;https://phoenixnap.com/kb/install-pip-mac&#34;&gt;online guide&lt;/a&gt;. After you install &lt;code&gt;asitop&lt;/code&gt; via &lt;code&gt;pip&lt;/code&gt;, you can use it via the Terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# to enter password before start&#xA;# this mode is recommended!&#xA;sudo asitop&#xA;&#xA;# it will prompt password on start&#xA;asitop&#xA;&#xA;# advanced options&#xA;asitop [-h] [--interval INTERVAL] [--color COLOR] [--avg AVG]&#xA;optional arguments:&#xA;  -h, --help           show this help message and exit&#xA;  --interval INTERVAL  Display interval and sampling interval for powermetrics (seconds)&#xA;  --color COLOR        Choose display color (0~8)&#xA;  --avg AVG            Interval for averaged values (seconds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;powermetrics&lt;/code&gt; is used to measure the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU/GPU utilization via active residency&lt;/li&gt; &#xA; &lt;li&gt;CPU/GPU frequency&lt;/li&gt; &#xA; &lt;li&gt;Package/CPU/GPU/ANE energy consumption&lt;/li&gt; &#xA; &lt;li&gt;CPU/GPU/Media Total memory bandwidth via the DCS (DRAM Command Scheduler)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/giampaolo/psutil&#34;&gt;&lt;code&gt;psutil&lt;/code&gt;&lt;/a&gt; is used to measure the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;memory and swap usage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/sysctl.3.html&#34;&gt;&lt;code&gt;sysctl&lt;/code&gt;&lt;/a&gt; is used to measure the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU name&lt;/li&gt; &#xA; &lt;li&gt;CPU core counts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ss64.com/osx/system_profiler.html&#34;&gt;&lt;code&gt;system_profiler&lt;/code&gt;&lt;/a&gt; is used to measure the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPU core count&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some information is guesstimate and hardcoded as there doesn&#39;t seem to be a official source for it on the system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU/GPU TDP&lt;/li&gt; &#xA; &lt;li&gt;CPU/GPU maximum memory bandwidth&lt;/li&gt; &#xA; &lt;li&gt;ANE max power&lt;/li&gt; &#xA; &lt;li&gt;Media engine max bandwidth&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;Because I didn&#39;t find something like this online. Also, just curious about stuff.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimers&lt;/h2&gt; &#xA;&lt;p&gt;I did this randomly don&#39;t blame me if it fried your new MacBook or something.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deepmind/alphafold</title>
    <updated>2022-07-31T01:34:53Z</updated>
    <id>tag:github.com,2022-07-31:/deepmind/alphafold</id>
    <link href="https://github.com/deepmind/alphafold" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source code for AlphaFold.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/imgs/header.jpg&#34; alt=&#34;header&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AlphaFold&lt;/h1&gt; &#xA;&lt;p&gt;This package provides an implementation of the inference pipeline of AlphaFold v2.0. This is a completely new model that was entered in CASP14 and published in Nature. For simplicity, we refer to this model as AlphaFold throughout the rest of this document.&lt;/p&gt; &#xA;&lt;p&gt;We also provide an implementation of AlphaFold-Multimer. This represents a work in progress and AlphaFold-Multimer isn&#39;t expected to be as stable as our monomer AlphaFold system. &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#updating-existing-alphafold-installation-to-include-alphafold-multimers&#34;&gt;Read the guide&lt;/a&gt; for how to upgrade and update code.&lt;/p&gt; &#xA;&lt;p&gt;Any publication that discloses findings arising from using this source code or the model parameters should &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#citing-this-work&#34;&gt;cite&lt;/a&gt; the &lt;a href=&#34;https://doi.org/10.1038/s41586-021-03819-2&#34;&gt;AlphaFold paper&lt;/a&gt; and, if applicable, the &lt;a href=&#34;https://www.biorxiv.org/content/10.1101/2021.10.04.463034v1&#34;&gt;AlphaFold-Multimer paper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please also refer to the &lt;a href=&#34;https://static-content.springer.com/esm/art%3A10.1038%2Fs41586-021-03819-2/MediaObjects/41586_2021_3819_MOESM1_ESM.pdf&#34;&gt;Supplementary Information&lt;/a&gt; for a detailed description of the method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can use a slightly simplified version of AlphaFold with &lt;a href=&#34;https://colab.research.google.com/github/deepmind/alphafold/blob/main/notebooks/AlphaFold.ipynb&#34;&gt;this Colab notebook&lt;/a&gt;&lt;/strong&gt; or community-supported versions (see below).&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, please contact the AlphaFold team at &lt;a href=&#34;mailto:alphafold@deepmind.com&#34;&gt;alphafold@deepmind.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/imgs/casp14_predictions.gif&#34; alt=&#34;CASP14 predictions&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;First time setup&lt;/h2&gt; &#xA;&lt;p&gt;You will need a machine running Linux, AlphaFold does not support other operating systems.&lt;/p&gt; &#xA;&lt;p&gt;The following steps are required in order to run AlphaFold:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt; for GPU support.&lt;/li&gt; &#xA;   &lt;li&gt;Setup running &lt;a href=&#34;https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user&#34;&gt;Docker as a non-root user&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download genetic databases (see below).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download model parameters (see below).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check that AlphaFold will be able to use a GPU by running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The output of this command should show a list of your GPUs. If it doesn&#39;t, check if you followed all steps correctly when setting up the &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&#34;&gt;NVIDIA Container Toolkit&lt;/a&gt; or take a look at the following &lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker/issues/1447#issuecomment-801479573&#34;&gt;NVIDIA Docker issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you wish to run AlphaFold using Singularity (a common containerization platform on HPC systems) we recommend using some of the third party Singularity setups as linked in &lt;a href=&#34;https://github.com/deepmind/alphafold/issues/10&#34;&gt;https://github.com/deepmind/alphafold/issues/10&lt;/a&gt; or &lt;a href=&#34;https://github.com/deepmind/alphafold/issues/24&#34;&gt;https://github.com/deepmind/alphafold/issues/24&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Genetic databases&lt;/h3&gt; &#xA;&lt;p&gt;This step requires &lt;code&gt;aria2c&lt;/code&gt; to be installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;AlphaFold needs multiple genetic (sequence) databases to run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bfd.mmseqs.com/&#34;&gt;BFD&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ebi.ac.uk/metagenomics/&#34;&gt;MGnify&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/&#34;&gt;PDB70&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rcsb.org/&#34;&gt;PDB&lt;/a&gt; (structures in the mmCIF format),&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rcsb.org/&#34;&gt;PDB seqres&lt;/a&gt; – only for AlphaFold-Multimer,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uniclust.mmseqs.com/&#34;&gt;Uniclust30&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uniprot.org/uniprot/&#34;&gt;UniProt&lt;/a&gt; – only for AlphaFold-Multimer,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.uniprot.org/help/uniref&#34;&gt;UniRef90&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We provide a script &lt;code&gt;scripts/download_all_data.sh&lt;/code&gt; that can be used to download and set up all of these databases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Default:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scripts/download_all_data.sh &amp;lt;DOWNLOAD_DIR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;will download the full databases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With &lt;code&gt;reduced_dbs&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scripts/download_all_data.sh &amp;lt;DOWNLOAD_DIR&amp;gt; reduced_dbs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;will download a reduced version of the databases to be used with the &lt;code&gt;reduced_dbs&lt;/code&gt; database preset.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;📒&lt;/span&gt; &lt;strong&gt;Note: The download directory &lt;code&gt;&amp;lt;DOWNLOAD_DIR&amp;gt;&lt;/code&gt; should &lt;em&gt;not&lt;/em&gt; be a subdirectory in the AlphaFold repository directory.&lt;/strong&gt; If it is, the Docker build will be slow as the large databases will be copied during the image creation.&lt;/p&gt; &#xA;&lt;p&gt;We don&#39;t provide exactly the database versions used in CASP14 – see the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#note-on-reproducibility&#34;&gt;note on reproducibility&lt;/a&gt;. Some of the databases are mirrored for speed, see &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#mirrored-databases&#34;&gt;mirrored databases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;📒&lt;/span&gt; &lt;strong&gt;Note: The total download size for the full databases is around 415 GB and the total size when unzipped is 2.2 TB. Please make sure you have a large enough hard drive space, bandwidth and time to download. We recommend using an SSD for better genetic search performance.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;download_all_data.sh&lt;/code&gt; script will also download the model parameter files. Once the script has finished, you should have the following directory structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$DOWNLOAD_DIR/                             # Total: ~ 2.2 TB (download: 438 GB)&#xA;    bfd/                                   # ~ 1.7 TB (download: 271.6 GB)&#xA;        # 6 files.&#xA;    mgnify/                                # ~ 64 GB (download: 32.9 GB)&#xA;        mgy_clusters_2018_12.fa&#xA;    params/                                # ~ 3.5 GB (download: 3.5 GB)&#xA;        # 5 CASP14 models,&#xA;        # 5 pTM models,&#xA;        # 5 AlphaFold-Multimer models,&#xA;        # LICENSE,&#xA;        # = 16 files.&#xA;    pdb70/                                 # ~ 56 GB (download: 19.5 GB)&#xA;        # 9 files.&#xA;    pdb_mmcif/                             # ~ 206 GB (download: 46 GB)&#xA;        mmcif_files/&#xA;            # About 180,000 .cif files.&#xA;        obsolete.dat&#xA;    pdb_seqres/                            # ~ 0.2 GB (download: 0.2 GB)&#xA;        pdb_seqres.txt&#xA;    small_bfd/                             # ~ 17 GB (download: 9.6 GB)&#xA;        bfd-first_non_consensus_sequences.fasta&#xA;    uniclust30/                            # ~ 86 GB (download: 24.9 GB)&#xA;        uniclust30_2018_08/&#xA;            # 13 files.&#xA;    uniprot/                               # ~ 98.3 GB (download: 49 GB)&#xA;        uniprot.fasta&#xA;    uniref90/                              # ~ 58 GB (download: 29.7 GB)&#xA;        uniref90.fasta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;bfd/&lt;/code&gt; is only downloaded if you download the full databases, and &lt;code&gt;small_bfd/&lt;/code&gt; is only downloaded if you download the reduced databases.&lt;/p&gt; &#xA;&lt;h3&gt;Model parameters&lt;/h3&gt; &#xA;&lt;p&gt;While the AlphaFold code is licensed under the Apache 2.0 License, the AlphaFold parameters are made available under the terms of the CC BY 4.0 license. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#license-and-disclaimer&#34;&gt;Disclaimer&lt;/a&gt; below for more detail.&lt;/p&gt; &#xA;&lt;p&gt;The AlphaFold parameters are available from &lt;a href=&#34;https://storage.googleapis.com/alphafold/alphafold_params_2022-03-02.tar&#34;&gt;https://storage.googleapis.com/alphafold/alphafold_params_2022-03-02.tar&lt;/a&gt;, and are downloaded as part of the &lt;code&gt;scripts/download_all_data.sh&lt;/code&gt; script. This script will download parameters for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;5 models which were used during CASP14, and were extensively validated for structure prediction quality (see Jumper et al. 2021, Suppl. Methods 1.12 for details).&lt;/li&gt; &#xA; &lt;li&gt;5 pTM models, which were fine-tuned to produce pTM (predicted TM-score) and (PAE) predicted aligned error values alongside their structure predictions (see Jumper et al. 2021, Suppl. Methods 1.9.7 for details).&lt;/li&gt; &#xA; &lt;li&gt;5 AlphaFold-Multimer models that produce pTM and PAE values alongside their structure predictions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Updating existing AlphaFold installation to include AlphaFold-Multimers&lt;/h3&gt; &#xA;&lt;p&gt;If you have AlphaFold v2.0.0 or v2.0.1 you can either reinstall AlphaFold fully from scratch (remove everything and run the setup from scratch) or you can do an incremental update that will be significantly faster but will require a bit more work. Make sure you follow these steps in the exact order they are listed below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update the code.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Go to the directory with the cloned AlphaFold repository and run &lt;code&gt;git fetch origin main&lt;/code&gt; to get all code updates.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Download the UniProt and PDB seqres databases.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;scripts/download_uniprot.sh &amp;lt;DOWNLOAD_DIR&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Remove &lt;code&gt;&amp;lt;DOWNLOAD_DIR&amp;gt;/pdb_mmcif&lt;/code&gt;. It is needed to have PDB SeqRes and PDB from exactly the same date. Failure to do this step will result in potential errors when searching for templates when running AlphaFold-Multimer.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;scripts/download_pdb_mmcif.sh &amp;lt;DOWNLOAD_DIR&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;scripts/download_pdb_seqres.sh &amp;lt;DOWNLOAD_DIR&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update the model parameters.&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Remove the old model parameters in &lt;code&gt;&amp;lt;DOWNLOAD_DIR&amp;gt;/params&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Download new model parameters using &lt;code&gt;scripts/download_alphafold_params.sh &amp;lt;DOWNLOAD_DIR&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#running-alphafold&#34;&gt;Running AlphaFold&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;API changes between v2.0.0 and v2.1.0&lt;/h4&gt; &#xA;&lt;p&gt;We tried to keep the API as much backwards compatible as possible, but we had to change the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;RunModel.predict()&lt;/code&gt; now needs a &lt;code&gt;random_seed&lt;/code&gt; argument as MSA sampling happens inside the Multimer model.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;preset&lt;/code&gt; flag in &lt;code&gt;run_alphafold.py&lt;/code&gt; and &lt;code&gt;run_docker.py&lt;/code&gt; was split into &lt;code&gt;db_preset&lt;/code&gt; and &lt;code&gt;model_preset&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The models to use are not specified using &lt;code&gt;model_names&lt;/code&gt; but rather using the &lt;code&gt;model_preset&lt;/code&gt; flag. If you want to customize which models are used for each preset, you will have to modify the the &lt;code&gt;MODEL_PRESETS&lt;/code&gt; dictionary in &lt;code&gt;alphafold/model/config.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Setting the &lt;code&gt;data_dir&lt;/code&gt; flag is now needed when using &lt;code&gt;run_docker.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;API changes between v2.1.0 and v2.2.0&lt;/h4&gt; &#xA;&lt;p&gt;The AlphaFold-Multimer model weights have been updated, these new models have greatly reduced numbers of clashes on average and are slightly more accurate.&lt;/p&gt; &#xA;&lt;p&gt;A flag &lt;code&gt;--num_multimer_predictions_per_model&lt;/code&gt; has been added that controls how many predictions will be made per model, by default the offline system will run each model 5 times for a total of 25 predictions.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--is_prokaryote_list&lt;/code&gt; flag has been removed along with the &lt;code&gt;is_prokaryote&lt;/code&gt; argument in &lt;code&gt;run_alphafold.predict_structure()&lt;/code&gt;, eukaryotes and prokaryotes are now paired in the same way.&lt;/p&gt; &#xA;&lt;p&gt;To use the deprecated v2.1.0 AlphaFold-Multimer model weights:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Change &lt;code&gt;SOURCE_URL&lt;/code&gt; in &lt;code&gt;scripts/download_alphafold_params.sh&lt;/code&gt; to &lt;code&gt;https://storage.googleapis.com/alphafold/alphafold_params_2022-01-19.tar&lt;/code&gt;, and download the old parameters.&lt;/li&gt; &#xA; &lt;li&gt;Remove the &lt;code&gt;_v2&lt;/code&gt; in the multimer &lt;code&gt;MODEL_PRESETS&lt;/code&gt; in &lt;code&gt;config.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running AlphaFold&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The simplest way to run AlphaFold is using the provided Docker script.&lt;/strong&gt; This was tested on Google Cloud with a machine using the &lt;code&gt;nvidia-gpu-cloud-image&lt;/code&gt; with 12 vCPUs, 85 GB of RAM, a 100 GB boot disk, the databases on an additional 3 TB disk, and an A100 GPU.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/deepmind/alphafold.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the Docker image:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -f docker/Dockerfile -t alphafold .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you encounter the following error:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;W: GPG error: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease: The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC&#xA;E: The repository &#39;https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 InRelease&#39; is not signed.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;use the workaround described in &lt;a href=&#34;https://github.com/deepmind/alphafold/issues/463#issuecomment-1124881779&#34;&gt;https://github.com/deepmind/alphafold/issues/463#issuecomment-1124881779&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;code&gt;run_docker.py&lt;/code&gt; dependencies. Note: You may optionally wish to create a &lt;a href=&#34;https://docs.python.org/3/tutorial/venv.html&#34;&gt;Python Virtual Environment&lt;/a&gt; to prevent conflicts with your system&#39;s Python environment.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install -r docker/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that the output directory exists (the default is &lt;code&gt;/tmp/alphafold&lt;/code&gt;) and that you have sufficient permissions to write into it. You can make sure that is the case by manually running &lt;code&gt;mkdir /tmp/alphafold&lt;/code&gt; and &lt;code&gt;chmod 770 /tmp/alphafold&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;run_docker.py&lt;/code&gt; pointing to a FASTA file containing the protein sequence(s) for which you wish to predict the structure. If you are predicting the structure of a protein that is already in PDB and you wish to avoid using it as a template, then &lt;code&gt;max_template_date&lt;/code&gt; must be set to be before the release date of the structure. You must also provide the path to the directory containing the downloaded databases. For example, for the T1050 CASP14 target:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=T1050.fasta \&#xA;  --max_template_date=2020-05-14 \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;By default, Alphafold will attempt to use all visible GPU devices. To use a subset, specify a comma-separated list of GPU UUID(s) or index(es) using the &lt;code&gt;--gpu_devices&lt;/code&gt; flag. See &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#gpu-enumeration&#34;&gt;GPU enumeration&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can control which AlphaFold model to run by adding the &lt;code&gt;--model_preset=&lt;/code&gt; flag. We provide the following models:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;monomer&lt;/strong&gt;: This is the original model used at CASP14 with no ensembling.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;monomer_casp14&lt;/strong&gt;: This is the original model used at CASP14 with &lt;code&gt;num_ensemble=8&lt;/code&gt;, matching our CASP14 configuration. This is largely provided for reproducibility as it is 8x more computationally expensive for limited accuracy gain (+0.1 average GDT gain on CASP14 domains).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;monomer_ptm&lt;/strong&gt;: This is the original CASP14 model fine tuned with the pTM head, providing a pairwise confidence measure. It is slightly less accurate than the normal monomer model.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;multimer&lt;/strong&gt;: This is the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#citing-this-work&#34;&gt;AlphaFold-Multimer&lt;/a&gt; model. To use this model, provide a multi-sequence FASTA file. In addition, the UniProt database should have been downloaded.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can control MSA speed/quality tradeoff by adding &lt;code&gt;--db_preset=reduced_dbs&lt;/code&gt; or &lt;code&gt;--db_preset=full_dbs&lt;/code&gt; to the run command. We provide the following presets:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;reduced_dbs&lt;/strong&gt;: This preset is optimized for speed and lower hardware requirements. It runs with a reduced version of the BFD database. It requires 8 CPU cores (vCPUs), 8 GB of RAM, and 600 GB of disk space.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;full_dbs&lt;/strong&gt;: This runs with all genetic databases used at CASP14.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Running the command above with the &lt;code&gt;monomer&lt;/code&gt; model preset and the &lt;code&gt;reduced_dbs&lt;/code&gt; data preset would look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=T1050.fasta \&#xA;  --max_template_date=2020-05-14 \&#xA;  --model_preset=monomer \&#xA;  --db_preset=reduced_dbs \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running AlphaFold-Multimer&lt;/h3&gt; &#xA;&lt;p&gt;All steps are the same as when running the monomer system, but you will have to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provide an input fasta with multiple sequences,&lt;/li&gt; &#xA; &lt;li&gt;set &lt;code&gt;--model_preset=multimer&lt;/code&gt;,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An example that folds a protein complex &lt;code&gt;multimer.fasta&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=multimer.fasta \&#xA;  --max_template_date=2020-05-14 \&#xA;  --model_preset=multimer \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the multimer system will run 5 seeds per model (25 total predictions) for a small drop in accuracy you may wish to run a single seed per model. This can be done via the &lt;code&gt;--num_multimer_predictions_per_model&lt;/code&gt; flag, e.g. set it to &lt;code&gt;--num_multimer_predictions_per_model=1&lt;/code&gt; to run a single seed per model.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Below are examples on how to use AlphaFold in different scenarios.&lt;/p&gt; &#xA;&lt;h4&gt;Folding a monomer&lt;/h4&gt; &#xA;&lt;p&gt;Say we have a monomer with the sequence &lt;code&gt;&amp;lt;SEQUENCE&amp;gt;&lt;/code&gt;. The input fasta should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fasta&#34;&gt;&amp;gt;sequence_name&#xA;&amp;lt;SEQUENCE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=monomer.fasta \&#xA;  --max_template_date=2021-11-01 \&#xA;  --model_preset=monomer \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Folding a homomer&lt;/h4&gt; &#xA;&lt;p&gt;Say we have a homomer with 3 copies of the same sequence &lt;code&gt;&amp;lt;SEQUENCE&amp;gt;&lt;/code&gt;. The input fasta should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fasta&#34;&gt;&amp;gt;sequence_1&#xA;&amp;lt;SEQUENCE&amp;gt;&#xA;&amp;gt;sequence_2&#xA;&amp;lt;SEQUENCE&amp;gt;&#xA;&amp;gt;sequence_3&#xA;&amp;lt;SEQUENCE&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=homomer.fasta \&#xA;  --max_template_date=2021-11-01 \&#xA;  --model_preset=multimer \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Folding a heteromer&lt;/h4&gt; &#xA;&lt;p&gt;Say we have an A2B3 heteromer, i.e. with 2 copies of &lt;code&gt;&amp;lt;SEQUENCE A&amp;gt;&lt;/code&gt; and 3 copies of &lt;code&gt;&amp;lt;SEQUENCE B&amp;gt;&lt;/code&gt;. The input fasta should be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fasta&#34;&gt;&amp;gt;sequence_1&#xA;&amp;lt;SEQUENCE A&amp;gt;&#xA;&amp;gt;sequence_2&#xA;&amp;lt;SEQUENCE A&amp;gt;&#xA;&amp;gt;sequence_3&#xA;&amp;lt;SEQUENCE B&amp;gt;&#xA;&amp;gt;sequence_4&#xA;&amp;lt;SEQUENCE B&amp;gt;&#xA;&amp;gt;sequence_5&#xA;&amp;lt;SEQUENCE B&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=heteromer.fasta \&#xA;  --max_template_date=2021-11-01 \&#xA;  --model_preset=multimer \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Folding multiple monomers one after another&lt;/h4&gt; &#xA;&lt;p&gt;Say we have a two monomers, &lt;code&gt;monomer1.fasta&lt;/code&gt; and &lt;code&gt;monomer2.fasta&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can fold both sequentially by using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=monomer1.fasta,monomer2.fasta \&#xA;  --max_template_date=2021-11-01 \&#xA;  --model_preset=monomer \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Folding multiple multimers one after another&lt;/h4&gt; &#xA;&lt;p&gt;Say we have a two multimers, &lt;code&gt;multimer1.fasta&lt;/code&gt; and &lt;code&gt;multimer2.fasta&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can fold both sequentially by using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 docker/run_docker.py \&#xA;  --fasta_paths=multimer1.fasta,multimer2.fasta \&#xA;  --max_template_date=2021-11-01 \&#xA;  --model_preset=multimer \&#xA;  --data_dir=$DOWNLOAD_DIR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AlphaFold output&lt;/h3&gt; &#xA;&lt;p&gt;The outputs will be saved in a subdirectory of the directory provided via the &lt;code&gt;--output_dir&lt;/code&gt; flag of &lt;code&gt;run_docker.py&lt;/code&gt; (defaults to &lt;code&gt;/tmp/alphafold/&lt;/code&gt;). The outputs include the computed MSAs, unrelaxed structures, relaxed structures, ranked structures, raw model outputs, prediction metadata, and section timings. The &lt;code&gt;--output_dir&lt;/code&gt; directory will have the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;target_name&amp;gt;/&#xA;    features.pkl&#xA;    ranked_{0,1,2,3,4}.pdb&#xA;    ranking_debug.json&#xA;    relaxed_model_{1,2,3,4,5}.pdb&#xA;    result_model_{1,2,3,4,5}.pkl&#xA;    timings.json&#xA;    unrelaxed_model_{1,2,3,4,5}.pdb&#xA;    msas/&#xA;        bfd_uniclust_hits.a3m&#xA;        mgnify_hits.sto&#xA;        uniref90_hits.sto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The contents of each output file are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;features.pkl&lt;/code&gt; – A &lt;code&gt;pickle&lt;/code&gt; file containing the input feature NumPy arrays used by the models to produce the structures.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unrelaxed_model_*.pdb&lt;/code&gt; – A PDB format text file containing the predicted structure, exactly as outputted by the model.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;relaxed_model_*.pdb&lt;/code&gt; – A PDB format text file containing the predicted structure, after performing an Amber relaxation procedure on the unrelaxed structure prediction (see Jumper et al. 2021, Suppl. Methods 1.8.6 for details).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ranked_*.pdb&lt;/code&gt; – A PDB format text file containing the relaxed predicted structures, after reordering by model confidence. Here &lt;code&gt;ranked_0.pdb&lt;/code&gt; should contain the prediction with the highest confidence, and &lt;code&gt;ranked_4.pdb&lt;/code&gt; the prediction with the lowest confidence. To rank model confidence, we use predicted LDDT (pLDDT) scores (see Jumper et al. 2021, Suppl. Methods 1.9.6 for details).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ranking_debug.json&lt;/code&gt; – A JSON format text file containing the pLDDT values used to perform the model ranking, and a mapping back to the original model names.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;timings.json&lt;/code&gt; – A JSON format text file containing the times taken to run each section of the AlphaFold pipeline.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;msas/&lt;/code&gt; - A directory containing the files describing the various genetic tool hits that were used to construct the input MSA.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;result_model_*.pkl&lt;/code&gt; – A &lt;code&gt;pickle&lt;/code&gt; file containing a nested dictionary of the various NumPy arrays directly produced by the model. In addition to the output of the structure module, this includes auxiliary outputs such as:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Distograms (&lt;code&gt;distogram/logits&lt;/code&gt; contains a NumPy array of shape [N_res, N_res, N_bins] and &lt;code&gt;distogram/bin_edges&lt;/code&gt; contains the definition of the bins).&lt;/li&gt; &#xA;   &lt;li&gt;Per-residue pLDDT scores (&lt;code&gt;plddt&lt;/code&gt; contains a NumPy array of shape [N_res] with the range of possible values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt;, where &lt;code&gt;100&lt;/code&gt; means most confident). This can serve to identify sequence regions predicted with high confidence or as an overall per-target confidence score when averaged across residues.&lt;/li&gt; &#xA;   &lt;li&gt;Present only if using pTM models: predicted TM-score (&lt;code&gt;ptm&lt;/code&gt; field contains a scalar). As a predictor of a global superposition metric, this score is designed to also assess whether the model is confident in the overall domain packing.&lt;/li&gt; &#xA;   &lt;li&gt;Present only if using pTM models: predicted pairwise aligned errors (&lt;code&gt;predicted_aligned_error&lt;/code&gt; contains a NumPy array of shape [N_res, N_res] with the range of possible values from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;max_predicted_aligned_error&lt;/code&gt;, where &lt;code&gt;0&lt;/code&gt; means most confident). This can serve for a visualisation of domain packing confidence within the structure.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The pLDDT confidence measure is stored in the B-factor field of the output PDB files (although unlike a B-factor, higher pLDDT is better, so care must be taken when using for tasks such as molecular replacement).&lt;/p&gt; &#xA;&lt;p&gt;This code has been tested to match mean top-1 accuracy on a CASP14 test set with pLDDT ranking over 5 model predictions (some CASP targets were run with earlier versions of AlphaFold and some had manual interventions; see our forthcoming publication for details). Some targets such as T1064 may also have high individual run variance over random seeds.&lt;/p&gt; &#xA;&lt;h2&gt;Inferencing many proteins&lt;/h2&gt; &#xA;&lt;p&gt;The provided inference script is optimized for predicting the structure of a single protein, and it will compile the neural network to be specialized to exactly the size of the sequence, MSA, and templates. For large proteins, the compile time is a negligible fraction of the runtime, but it may become more significant for small proteins or if the multi-sequence alignments are already precomputed. In the bulk inference case, it may make sense to use our &lt;code&gt;make_fixed_size&lt;/code&gt; function to pad the inputs to a uniform size, thereby reducing the number of compilations required.&lt;/p&gt; &#xA;&lt;p&gt;We do not provide a bulk inference script, but it should be straightforward to develop on top of the &lt;code&gt;RunModel.predict&lt;/code&gt; method with a parallel system for precomputing multi-sequence alignments. Alternatively, this script can be run repeatedly with only moderate overhead.&lt;/p&gt; &#xA;&lt;h2&gt;Note on CASP14 reproducibility&lt;/h2&gt; &#xA;&lt;p&gt;AlphaFold&#39;s output for a small number of proteins has high inter-run variance, and may be affected by changes in the input data. The CASP14 target T1064 is a notable example; the large number of SARS-CoV-2-related sequences recently deposited changes its MSA significantly. This variability is somewhat mitigated by the model selection process; running 5 models and taking the most confident.&lt;/p&gt; &#xA;&lt;p&gt;To reproduce the results of our CASP14 system as closely as possible you must use the same database versions we used in CASP. These may not match the default versions downloaded by our scripts.&lt;/p&gt; &#xA;&lt;p&gt;For genetics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UniRef90: &lt;a href=&#34;https://ftp.uniprot.org/pub/databases/uniprot/previous_releases/release-2020_01/uniref/&#34;&gt;v2020_01&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MGnify: &lt;a href=&#34;http://ftp.ebi.ac.uk/pub/databases/metagenomics/peptide_database/2018_12/&#34;&gt;v2018_12&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Uniclust30: &lt;a href=&#34;http://wwwuser.gwdg.de/~compbiol/uniclust/2018_08/&#34;&gt;v2018_08&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BFD: &lt;a href=&#34;https://bfd.mmseqs.com/&#34;&gt;only version available&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For templates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PDB: (downloaded 2020-05-14)&lt;/li&gt; &#xA; &lt;li&gt;PDB70: &lt;a href=&#34;http://wwwuser.gwdg.de/~compbiol/data/hhsuite/databases/hhsuite_dbs/old-releases/pdb70_from_mmcif_200513.tar.gz&#34;&gt;2020-05-13&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An alternative for templates is to use the latest PDB and PDB70, but pass the flag &lt;code&gt;--max_template_date=2020-05-14&lt;/code&gt;, which restricts templates only to structures that were available at the start of CASP14.&lt;/p&gt; &#xA;&lt;h2&gt;Citing this work&lt;/h2&gt; &#xA;&lt;p&gt;If you use the code or data in this package, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@Article{AlphaFold2021,&#xA;  author  = {Jumper, John and Evans, Richard and Pritzel, Alexander and Green, Tim and Figurnov, Michael and Ronneberger, Olaf and Tunyasuvunakool, Kathryn and Bates, Russ and {\v{Z}}{\&#39;\i}dek, Augustin and Potapenko, Anna and Bridgland, Alex and Meyer, Clemens and Kohl, Simon A A and Ballard, Andrew J and Cowie, Andrew and Romera-Paredes, Bernardino and Nikolov, Stanislav and Jain, Rishub and Adler, Jonas and Back, Trevor and Petersen, Stig and Reiman, David and Clancy, Ellen and Zielinski, Michal and Steinegger, Martin and Pacholska, Michalina and Berghammer, Tamas and Bodenstein, Sebastian and Silver, David and Vinyals, Oriol and Senior, Andrew W and Kavukcuoglu, Koray and Kohli, Pushmeet and Hassabis, Demis},&#xA;  journal = {Nature},&#xA;  title   = {Highly accurate protein structure prediction with {AlphaFold}},&#xA;  year    = {2021},&#xA;  volume  = {596},&#xA;  number  = {7873},&#xA;  pages   = {583--589},&#xA;  doi     = {10.1038/s41586-021-03819-2}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, if you use the AlphaFold-Multimer mode, please cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article {AlphaFold-Multimer2021,&#xA;  author       = {Evans, Richard and O{\textquoteright}Neill, Michael and Pritzel, Alexander and Antropova, Natasha and Senior, Andrew and Green, Tim and {\v{Z}}{\&#39;\i}dek, Augustin and Bates, Russ and Blackwell, Sam and Yim, Jason and Ronneberger, Olaf and Bodenstein, Sebastian and Zielinski, Michal and Bridgland, Alex and Potapenko, Anna and Cowie, Andrew and Tunyasuvunakool, Kathryn and Jain, Rishub and Clancy, Ellen and Kohli, Pushmeet and Jumper, John and Hassabis, Demis},&#xA;  journal      = {bioRxiv}&#xA;  title        = {Protein complex prediction with AlphaFold-Multimer},&#xA;  year         = {2021},&#xA;  elocation-id = {2021.10.04.463034},&#xA;  doi          = {10.1101/2021.10.04.463034},&#xA;  URL          = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034},&#xA;  eprint       = {https://www.biorxiv.org/content/early/2021/10/04/2021.10.04.463034.full.pdf},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Community contributions&lt;/h2&gt; &#xA;&lt;p&gt;Colab notebooks provided by the community (please note that these notebooks may vary from our full AlphaFold system and we did not validate their accuracy):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://colab.research.google.com/github/sokrypton/ColabFold/blob/main/AlphaFold2.ipynb&#34;&gt;ColabFold AlphaFold2 notebook&lt;/a&gt; by Martin Steinegger, Sergey Ovchinnikov and Milot Mirdita, which uses an API hosted at the Södinglab based on the MMseqs2 server &lt;a href=&#34;https://academic.oup.com/bioinformatics/article/35/16/2856/5280135&#34;&gt;(Mirdita et al. 2019, Bioinformatics)&lt;/a&gt; for the multiple sequence alignment creation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;AlphaFold communicates with and/or references the following separate libraries and packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abseil/abseil-py&#34;&gt;Abseil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://biopython.org&#34;&gt;Biopython&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepmind/chex&#34;&gt;Chex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://research.google.com/colaboratory/&#34;&gt;Colab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/soedinglab/hh-suite&#34;&gt;HH Suite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://eddylab.org/software/hmmer&#34;&gt;HMMER Suite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepmind/dm-haiku&#34;&gt;Haiku&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/corenting/immutabledict&#34;&gt;Immutabledict&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/jax/&#34;&gt;JAX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://msa.sbc.su.se/cgi-bin/msa.cgi&#34;&gt;Kalign&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/ml_collections&#34;&gt;ML Collections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://numpy.org&#34;&gt;NumPy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openmm/openmm&#34;&gt;OpenMM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openstructure.org&#34;&gt;OpenStructure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avirshup/py3dmol&#34;&gt;pymol3d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scipy.org&#34;&gt;SciPy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepmind/sonnet&#34;&gt;Sonnet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;TensorFlow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepmind/tree&#34;&gt;Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tqdm/tqdm&#34;&gt;tqdm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We thank all their contributors and maintainers!&lt;/p&gt; &#xA;&lt;h2&gt;Get in Touch&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions not covered in this overview, please contact the AlphaFold team at &lt;a href=&#34;mailto:alphafold@deepmind.com&#34;&gt;alphafold@deepmind.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We would love to hear your feedback and understand how AlphaFold has been useful in your research. Share your stories with us at &lt;a href=&#34;mailto:alphafold@deepmind.com&#34;&gt;alphafold@deepmind.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2021 DeepMind Technologies Limited.&lt;/p&gt; &#xA;&lt;h3&gt;AlphaFold Code License&lt;/h3&gt; &#xA;&lt;p&gt;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.&lt;/p&gt; &#xA;&lt;h3&gt;Model Parameters License&lt;/h3&gt; &#xA;&lt;p&gt;The AlphaFold parameters are made available under the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) license. You can find details at: &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Third-party software&lt;/h3&gt; &#xA;&lt;p&gt;Use of the third-party software, libraries or code referred to in the &lt;a href=&#34;https://raw.githubusercontent.com/deepmind/alphafold/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt; section above may be governed by separate terms and conditions or license provisions. Your use of the third-party software, libraries or code is subject to any such terms and you should check that you can comply with any applicable restrictions or terms and conditions before use.&lt;/p&gt; &#xA;&lt;h3&gt;Mirrored Databases&lt;/h3&gt; &#xA;&lt;p&gt;The following databases have been mirrored by DeepMind, and are available with reference to the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bfd.mmseqs.com/&#34;&gt;BFD&lt;/a&gt; (unmodified), by Steinegger M. and Söding J., available under a &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://bfd.mmseqs.com/&#34;&gt;BFD&lt;/a&gt; (modified), by Steinegger M. and Söding J., modified by DeepMind, available under a &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. See the Methods section of the &lt;a href=&#34;https://www.nature.com/articles/s41586-021-03828-1&#34;&gt;AlphaFold proteome paper&lt;/a&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://wwwuser.gwdg.de/~compbiol/uniclust/2018_08/&#34;&gt;Uniclust30: v2018_08&lt;/a&gt; (unmodified), by Mirdita M. et al., available under a &lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://ftp.ebi.ac.uk/pub/databases/metagenomics/peptide_database/current_release/README.txt&#34;&gt;MGnify: v2018_12&lt;/a&gt; (unmodified), by Mitchell AL et al., available free of all copyright restrictions and made fully and freely available for both non-commercial and commercial use under &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;CC0 1.0 Universal (CC0 1.0) Public Domain Dedication&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Relento/lego_release</title>
    <updated>2022-07-31T01:34:53Z</updated>
    <id>tag:github.com,2022-07-31:/Relento/lego_release</id>
    <link href="https://github.com/Relento/lego_release" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Translating a Visual LEGO Manual to a Machine-Executable Plan&lt;/h1&gt; &#xA;&lt;p&gt;This is the PyTorch implementation for the paper:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Translating a Visual LEGO Manual to a Machine-Executable Plan&lt;/strong&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Relento/lego_release/main/teaser.png&#34; alt=&#34;teaser&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://cs.stanford.edu/~rcwang/&#34;&gt;Ruocheng Wang&lt;/a&gt;, &lt;a href=&#34;https://cs.stanford.edu/~yzzhang/&#34;&gt;Yunzhi Zhang&lt;/a&gt;, &lt;a href=&#34;http://jiayuanm.com/&#34;&gt;Jiayuan Mao&lt;/a&gt;, &lt;a href=&#34;&#34;&gt;Chin-Yi Cheng&lt;/a&gt;, &lt;a href=&#34;https://jiajunwu.com/&#34;&gt;Jiajun Wu&lt;/a&gt; &lt;br&gt; In European Conference on Computer Vision (ECCV) 2022 &lt;br&gt; &lt;a href=&#34;https://cs.stanford.edu/~rcwang/projects/lego_manual/&#34;&gt;[project]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Run the following commands to install necessary dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n lego_release python=3.9.12&#xA;conda activate lego_release&#xA;pip -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may need to manually install &lt;code&gt;pytoch3d 0.5.0&lt;/code&gt; according to this &lt;a href=&#34;https://github.com/facebookresearch/pytorch3d/raw/main/INSTALL.md&#34;&gt;doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Evaluation&lt;/h1&gt; &#xA;&lt;p&gt;Download the evaluation datasets and model checkpoints from &lt;a href=&#34;https://office365stanford-my.sharepoint.com/:f:/g/personal/rcwang_stanford_edu/Eh3SFTyJXY5Iib-qnc55ZnIB05tYvHZ03FgfdRYMpSospw&#34;&gt;here&lt;/a&gt;, and unzip them under the root directory of the code. Then simply run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/eval/eval_all.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from the root directory. Results will be saved to &lt;code&gt;results/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Training&lt;/h1&gt; &#xA;&lt;p&gt;To train our model from scratch, first download the training and validation datasets from &lt;a href=&#34;https://office365stanford-my.sharepoint.com/:f:/g/personal/rcwang_stanford_edu/Eh3SFTyJXY5Iib-qnc55ZnIB05tYvHZ03FgfdRYMpSospw&#34;&gt;here&lt;/a&gt;, and unzip them to &lt;code&gt;data/datasets/synthetic_train&lt;/code&gt; and &lt;code&gt;data/datasets/synthetic_val&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;After downloading the datasets, preprocess them by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/process_dataset.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the script to train our model&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/train/train_mepnet.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add &lt;code&gt;--wandb&lt;/code&gt; option in the training script for logging and visualization in &lt;a href=&#34;https://wandb.ai/site&#34;&gt;wandb&lt;/a&gt;. We train our model on 4 Titan RTX GPUs for 5 days.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;Some of our code is built on top of &lt;a href=&#34;https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix&#34;&gt;CycleGAN&lt;/a&gt; and &lt;a href=&#34;https://github.com/xingyizhou/CenterNet&#34;&gt;CenterNet&lt;/a&gt;. If you encounter any problem, please don&#39;t hesitate to email me at &lt;a href=&#34;mailto:rcwang@stanford.edu&#34;&gt;rcwang@stanford.edu&lt;/a&gt; or open an issue.&lt;/p&gt;</summary>
  </entry>
</feed>