<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-11T01:34:39Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>langgenius/dify-official-plugins</title>
    <updated>2025-05-11T01:34:39Z</updated>
    <id>tag:github.com,2025-05-11:/langgenius/dify-official-plugins</id>
    <link href="https://github.com/langgenius/dify-official-plugins" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/langgenius/dify-official-plugins/main/.assets/bar.png&#34; alt=&#34;bar&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cloud.dify.ai&#34;&gt;Dify Cloud&lt;/a&gt; · &lt;a href=&#34;https://docs.dify.ai/getting-started/install-self-hosted&#34;&gt;Self-hosting&lt;/a&gt; · &lt;a href=&#34;https://docs.dify.ai&#34;&gt;Documentation&lt;/a&gt; · &lt;a href=&#34;https://udify.app/chat/22L1zSxg6yW1cWQg&#34;&gt;Enterprise inquiry&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://dify.ai&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Static Badge&#34; src=&#34;https://img.shields.io/badge/Product-F04438&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dify.ai/pricing&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Static Badge&#34; src=&#34;https://img.shields.io/badge/free-pricing?logo=free&amp;amp;color=%20%23155EEF&amp;amp;label=pricing&amp;amp;labelColor=%20%23528bff&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/FngNHpbcY7&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1082486657678311454?logo=discord&amp;amp;labelColor=%20%235462eb&amp;amp;logoColor=%20%23f5f5f5&amp;amp;color=%20%235462eb&#34; alt=&#34;chat on Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reddit.com/r/difyai&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/difyai?style=plastic&amp;amp;logo=reddit&amp;amp;label=r%2Fdifyai&amp;amp;labelColor=white&#34; alt=&#34;join Reddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=dify_ai&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/dify_ai?logo=X&amp;amp;color=%20%23f5f5f5&#34; alt=&#34;follow on X(Twitter)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/langgenius/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.demolab.com/badge/LinkedIn-0A66C2?logo=linkedin-white&amp;amp;logoColor=fff&#34; alt=&#34;follow on LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/u/langgenius&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/langgenius/dify-web?labelColor=%20%23FDB062&amp;amp;color=%20%23f79009&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/langgenius/dify/graphs/commit-activity&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Commits last month&#34; src=&#34;https://img.shields.io/github/commit-activity/m/langgenius/dify?labelColor=%20%2332b583&amp;amp;color=%20%2312b76a&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/langgenius/dify/&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Issues closed&#34; src=&#34;https://img.shields.io/github/issues-search?query=repo%3Alanggenius%2Fdify%20is%3Aclosed&amp;amp;label=issues%20closed&amp;amp;labelColor=%20%237d89b0&amp;amp;color=%20%235d6b98&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/langgenius/dify/discussions/&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Discussion posts&#34; src=&#34;https://img.shields.io/github/discussions/langgenius/dify?labelColor=%20%239b8afb&amp;amp;color=%20%237a5af8&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dify.ai/&#34;&gt;Dify&lt;/a&gt; is an open-source platform for developing LLM-powered AI applications, designed to help developers and businesses efficiently build, deploy, and manage AI-driven solutions. With Dify, users can easily create and test complex AI workflows, integrate a wide range of advanced models and tools, and optimize their performance in real-world applications. The platform offers an intuitive interface, supporting RAG (Retrieval-Augmented Generation) pipelines, intelligent agent capabilities, and robust model management, enabling developers to seamlessly transition from prototype to production.&lt;/p&gt; &#xA;&lt;p&gt;Dify&#39;s models and tools were originally stored in the &lt;a href=&#34;https://github.com/langgenius/dify&#34;&gt;main Dify repository&lt;/a&gt;. However, starting from Dify v1.0.0 (February 2025), all models and tools have been migrated into plugins and are now stored in this repository. All plugins in this repository will be uploaded to the &lt;a href=&#34;https://marketplace.dify.ai/&#34;&gt;Dify Marketplace&lt;/a&gt;, where they will be maintained and updated by the official Dify team. The plugins in the Marketplace are available for all Dify users to explore and use.&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Types&lt;/h3&gt; &#xA;&lt;h4&gt;Models&lt;/h4&gt; &#xA;&lt;p&gt;Models transform AI model management in Dify. Now you can configure, update and use models as plugins across chatbots, agents, chatflows and workflows.&lt;/p&gt; &#xA;&lt;h4&gt;Tools&lt;/h4&gt; &#xA;&lt;p&gt;Tools add specialized capabilities to Dify apps. Enhance your agents and workflows with domain-specific features for data analysis, content translation, custom integrations and more.&lt;/p&gt; &#xA;&lt;h4&gt;Agent Strategies&lt;/h4&gt; &#xA;&lt;p&gt;Agent Strategies provide reasoning strategies for the new &lt;a href=&#34;https://docs.dify.ai/guides/workflow/node/agent&#34;&gt;&lt;strong&gt;Agent Nodes&lt;/strong&gt;&lt;/a&gt; in Dify chatflows / workflows, supporting autonomous tool selection and execution for multi-step reasoning. Create custom reasoning strategies like Chain-of-Thoughts, Tree-of-Thoughts, Function call and ReAct to enhance the problem-solving abilities of your chatflows / workflows.&lt;/p&gt; &#xA;&lt;h4&gt;Extensions&lt;/h4&gt; &#xA;&lt;p&gt;Extensions facilitate external integrations through HTTP webhooks. Build custom APIs to handle complex workflows, process data, or connect with external services, making your applications more versatile and powerful.&lt;/p&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;p&gt;In the future, all new official plugins developed by Dify will be updated and maintained in this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Security disclosure&lt;/h3&gt; &#xA;&lt;p&gt;To protect your privacy, please avoid posting security issues on GitHub. Instead, send your questions to&amp;nbsp;&lt;a href=&#34;mailto:security@dify.ai&#34;&gt;security@dify.ai&lt;/a&gt;&amp;nbsp;and we will provide you with a more detailed answer.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shane-mason/FieldStation42</title>
    <updated>2025-05-11T01:34:39Z</updated>
    <id>tag:github.com,2025-05-11:/shane-mason/FieldStation42</id>
    <link href="https://github.com/shane-mason/FieldStation42" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Broadcast TV simulator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FieldStation42&lt;/h1&gt; &#xA;&lt;p&gt;Cable and broadcast TV simulator intended to provide an authentic experience of watching OTA television with the following goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the TV is turned on, a believable show for the time slot and network should be playing&lt;/li&gt; &#xA; &lt;li&gt;When switching between channels, the shows should continue playing serially as though they had been broadcasting the whole time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shane-mason/FieldStation42/main/docs/retro-tv.png?raw=true&#34; alt=&#34;An older TV with an antenna rotator box in the background&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports multiple simultanous channels&lt;/li&gt; &#xA; &lt;li&gt;Automatically interleaves commercial break and bumps into content&lt;/li&gt; &#xA; &lt;li&gt;Generates weekly schedules based on per-station configurations&lt;/li&gt; &#xA; &lt;li&gt;Feature length content - supports movie length show blocks&lt;/li&gt; &#xA; &lt;li&gt;Randomly selects shows from the programming slot that have not been played recently to keep a fresh lineup&lt;/li&gt; &#xA; &lt;li&gt;Set dates ranges for shows (like seasonal sports or holiday shows)&lt;/li&gt; &#xA; &lt;li&gt;Per-station configuration of station sign-off video and off-air loops&lt;/li&gt; &#xA; &lt;li&gt;UX to manage catalogs and schedules&lt;/li&gt; &#xA; &lt;li&gt;Optional hardware connections to change the channel&lt;/li&gt; &#xA; &lt;li&gt;Loooing channels - useful for community bulliten channels&lt;/li&gt; &#xA; &lt;li&gt;Preview/guide channel with embedded video and configurable messages &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a new feature - documentation in progress in the &lt;a href=&#34;https://github.com/shane-mason/FieldStation42/wiki&#34;&gt;FieldStation42 Guide&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Flexible scheduling to support all kinds of channel types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Traditional networks channels with commercials and bumps&lt;/li&gt; &#xA;   &lt;li&gt;Commercial free channels with optional end bump padding at end (movie channels, public broadcasting networks)&lt;/li&gt; &#xA;   &lt;li&gt;Loop channels, useful for community bulletin style channels or information loops.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shane-mason/FieldStation42/main/docs/cable_cover_3.png?raw=true&#34; alt=&#34;A cable box next to a TV&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alpha software - installation is not simple&lt;/h2&gt; &#xA;&lt;p&gt;This is a fairly new project and in active development - installation requires some background in the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic linux command line usage&lt;/li&gt; &#xA; &lt;li&gt;Reading and editing JSON configuration files&lt;/li&gt; &#xA; &lt;li&gt;Movie file conversion and organizing in folders&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Setup&lt;/h2&gt; &#xA;&lt;p&gt;For a complete, step-by-step guide to setting up and administering FieldStation42 software, check out the &lt;a href=&#34;https://github.com/shane-mason/FieldStation42/wiki&#34;&gt;FieldStation42 Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart Setup&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure Python 3 and MPV are installed on your system&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository - this will become you main working directory.&lt;/li&gt; &#xA; &lt;li&gt;Run the install script&lt;/li&gt; &#xA; &lt;li&gt;Add your own content (videos)&lt;/li&gt; &#xA; &lt;li&gt;Configure your stations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy an example json file from &lt;code&gt;confs/examples&lt;/code&gt; into &lt;code&gt;confs/&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generate a weekly schedule &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;python3 station_42.py&lt;/code&gt; on the command line &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Use &lt;code&gt;--rebuild_catalog&lt;/code&gt; option if content has changed&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Watch TV &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;field_player.py&lt;/code&gt; on the command line&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configure start-on-boot (optional and not recommended unless you are making a dedicated device.) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;fs42/hot_start.sh&lt;/code&gt; on the command line&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The quickstart above is only designed to provide an overview of the required steps - use the &lt;a href=&#34;https://github.com/shane-mason/FieldStation42/wiki&#34;&gt;FieldStation42 Guide&lt;/a&gt; for more detailed description of the steps.&lt;/p&gt; &#xA;&lt;h1&gt;How It Works&lt;/h1&gt; &#xA;&lt;p&gt;FieldStation42 has multiple components that work together to recreate that old-school TV nostalgia.&lt;/p&gt; &#xA;&lt;h3&gt;station_42.py&lt;/h3&gt; &#xA;&lt;p&gt;Use this to create catalogs and generate schedules. Catalogs are used to store metadata about the stations content, so they need to be rebuilt each time the content changes. Since it is inspecting files on disk, this can take some time depending on the number of videos in your content library. The liquid-scheduler uses the catalogs and the stations configuration to build schedules, so catalogs should be built first. Running &lt;code&gt;station_42.py&lt;/code&gt; with no arguments will start a UI that runs in the terminal. You can use this to manage catalogs and schedules, or you can perform all operations using command line arguments with no UI. To see the list of all options, run &lt;code&gt;station_42.py --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;field_player.py&lt;/h3&gt; &#xA;&lt;p&gt;This is the main TV interface. On startup, it will read the schedule and open the correct video file and skip to the correct position based on the current time. It will re-perform this step each time the channel is changed. If you tune back to a previous channel, it will pick up the current time and start playing as though it had been playing the whole time.&lt;/p&gt; &#xA;&lt;p&gt;The player monitors the plain text file &lt;code&gt;runtime/channel.socket&lt;/code&gt; for commands to change the channel and will change to the next station configured in &lt;code&gt;main_config&lt;/code&gt; in &lt;code&gt;confs/fieldStation42_conf.py&lt;/code&gt; if any content is found there - or you can use the following command to cause the player to change to channel 3:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;echo {\&#34;command\&#34;: \&#34;direct\&#34;, \&#34;channel\&#34;: 3} &amp;gt; runtime/channel.socket&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also open &lt;code&gt;runtime/channel.socket&lt;/code&gt; in a text editor and enter the following json snippet (change 3 to whatever number you want to change to)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{&#34;command&#34;: &#34;direct&#34;, &#34;channel&#34;: 3}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following command will cause the player to tune up or down respectively&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;{&#34;command&#34;: &#34;up&#34;, &#34;channel&#34;: -1}&lt;/code&gt; &lt;code&gt;{&#34;command&#34;: &#34;down&#34;, &#34;channel&#34;: -1}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The player writes its status and current channel to &lt;code&gt;runtime/play_status.socket&lt;/code&gt; - this can be monitored by an external program if needed. See &lt;a href=&#34;https://github.com/shane-mason/FieldStation42/wiki/Changing-Channel-From-Script&#34;&gt;this page&lt;/a&gt; for more information on intgrating with &lt;code&gt;channel.socket&lt;/code&gt; and &lt;code&gt;play_status.socket&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;command_input.py&lt;/h3&gt; &#xA;&lt;p&gt;This is provided as an example component to show how to connect an external device or program to invoke a channel changes and pass status information. This script listens for incoming commands on the pi&#39;s UART connection and then writes channel change commands to &lt;code&gt;runtime/channel.socket&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using hotstart.sh&lt;/h2&gt; &#xA;&lt;p&gt;This file is for use on a running system that has been configured and testing, because it swallows output so you&#39;ll never know what&#39;s going wrong. This file is intended to be used to start the player running on system boot up.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting to a TV&lt;/h2&gt; &#xA;&lt;p&gt;The Raspberry Pi has an HDMI output, but if you want to connect it to a vintage TV, you will need to convert that to an input signal your TV can understand. If your TV has composite or RF, you can use an HTMI-&amp;gt;Composit or HDMI-&amp;gt;RF adapter. These units are available online or at an electronics retailer.&lt;/p&gt; &#xA;&lt;h2&gt;Connecting a remote control or other device&lt;/h2&gt; &#xA;&lt;p&gt;Since the player can recieve external commands and publishes its status as described above, its easy to connect external devices of all kinds. See &lt;a href=&#34;https://github.com/shane-mason/FieldStation42/wiki/Changing-Channel-From-Script&#34;&gt;this wiki page&lt;/a&gt; for more information on intgrating with &lt;code&gt;channel.socket&lt;/code&gt; and &lt;code&gt;play_status.socket&lt;/code&gt;. For a detailed guide on setting up a bluetooth remote control, &lt;a href=&#34;https://github.com/shane-mason/FieldStation42/discussions/47&#34;&gt;see this page in the discussion boards&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shane-mason/FieldStation42/main/docs/retro-tv-setup_bb.png?raw=true&#34; alt=&#34;Fritzing diagram for the system&#34; title=&#34;Fritzing Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Raspberry Pico Setup&lt;/h2&gt; &#xA;&lt;p&gt;This is only required if you are building the channel change detector component (not required).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Circuit Python per their instructions and install dependencies for Neopixels.&lt;/li&gt; &#xA; &lt;li&gt;Add the contents of &lt;code&gt;aerial_listener.py&lt;/code&gt; to &lt;code&gt;code.py&lt;/code&gt; on the device so that it starts at boot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The fritzing diagram shows how to connect the components together to enable channel changes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pipecat-ai/pipecat</title>
    <updated>2025-05-11T01:34:39Z</updated>
    <id>tag:github.com,2025-05-11:/pipecat-ai/pipecat</id>
    <link href="https://github.com/pipecat-ai/pipecat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Source framework for voice and multimodal conversational AI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img alt=&#34;pipecat&#34; width=&#34;300px&#34; height=&#34;auto&#34; src=&#34;https://raw.githubusercontent.com/pipecat-ai/pipecat/main/pipecat.png&#34;&gt; &#xA; &lt;/div&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pipecat-ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pipecat-ai&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/pipecat-ai/pipecat/actions/workflows/tests.yaml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/pipecat-ai/pipecat&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/pipecat-ai/pipecat/graph/badge.svg?token=LNVUIVO4Y9&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.pipecat.ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-blue&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/pipecat&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1239284677165056021&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🎙️ Pipecat: Real-Time Voice &amp;amp; Multimodal AI Agents&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Pipecat&lt;/strong&gt; is an open-source Python framework for building real-time voice and multimodal conversational agents. Orchestrate audio and video, AI services, different transports, and conversation pipelines effortlessly—so you can focus on what makes your agent unique.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 What You Can Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Voice Assistants&lt;/strong&gt; – natural, streaming conversations with AI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI Companions&lt;/strong&gt; – coaches, meeting assistants, characters&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multimodal Interfaces&lt;/strong&gt; – voice, video, images, and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactive Storytelling&lt;/strong&gt; – creative tools with generative media&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Business Agents&lt;/strong&gt; – customer intake, support bots, guided flows&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complex Dialog Systems&lt;/strong&gt; – design logic with structured conversations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🧭 Looking to build structured conversations? Check out &lt;a href=&#34;https://github.com/pipecat-ai/pipecat-flows&#34;&gt;Pipecat Flows&lt;/a&gt; for managing complex conversational states and transitions.&lt;/p&gt; &#xA;&lt;h2&gt;🧠 Why Pipecat?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Voice-first&lt;/strong&gt;: Integrates speech recognition, text-to-speech, and conversation handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pluggable&lt;/strong&gt;: Supports many AI services and tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composable Pipelines&lt;/strong&gt;: Build complex behavior from modular components&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Real-Time&lt;/strong&gt;: Ultra-low latency interaction with different transports (e.g. WebSockets or WebRTC)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎬 See it in action&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;a href=&#34;https://github.com/pipecat-ai/pipecat/tree/main/examples/simple-chatbot&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pipecat-ai/pipecat/main/examples/simple-chatbot/image.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/pipecat-ai/pipecat/tree/main/examples/storytelling-chatbot&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pipecat-ai/pipecat/main/examples/storytelling-chatbot/image.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/pipecat-ai/pipecat/tree/main/examples/translation-chatbot&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pipecat-ai/pipecat/main/examples/translation-chatbot/image.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;a href=&#34;https://github.com/pipecat-ai/pipecat/tree/main/examples/moondream-chatbot&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pipecat-ai/pipecat/main/examples/moondream-chatbot/image.png&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;📱 Client SDKs&lt;/h2&gt; &#xA;&lt;p&gt;You can connect to Pipecat from any platform using our official SDKs:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;SDK Repo&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pipecat-ai/pipecat-client-web&#34;&gt;pipecat-client-web&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript and React client SDKs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pipecat-ai/pipecat-client-ios&#34;&gt;pipecat-client-ios&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Swift SDK for iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pipecat-ai/pipecat-client-android&#34;&gt;pipecat-client-android&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Kotlin SDK for Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pipecat-ai/pipecat-client-cxx&#34;&gt;pipecat-client-cxx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;C++ client SDK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🧩 Available services&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Services&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Speech-to-Text&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/assemblyai&#34;&gt;AssemblyAI&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/aws&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/azure&#34;&gt;Azure&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/deepgram&#34;&gt;Deepgram&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/fal&#34;&gt;Fal Wizper&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/gladia&#34;&gt;Gladia&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/google&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/groq&#34;&gt;Groq (Whisper)&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/openai&#34;&gt;OpenAI (Whisper)&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/parakeet&#34;&gt;Parakeet (NVIDIA)&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/ultravox&#34;&gt;Ultravox&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/stt/whisper&#34;&gt;Whisper&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LLMs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/anthropic&#34;&gt;Anthropic&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/aws&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/azure&#34;&gt;Azure&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/cerebras&#34;&gt;Cerebras&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/deepseek&#34;&gt;DeepSeek&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/fireworks&#34;&gt;Fireworks AI&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/gemini&#34;&gt;Gemini&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/grok&#34;&gt;Grok&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/groq&#34;&gt;Groq&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/nim&#34;&gt;NVIDIA NIM&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/ollama&#34;&gt;Ollama&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/openai&#34;&gt;OpenAI&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/openrouter&#34;&gt;OpenRouter&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/perplexity&#34;&gt;Perplexity&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/qwen&#34;&gt;Qwen&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/llm/together&#34;&gt;Together AI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Text-to-Speech&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/aws&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/azure&#34;&gt;Azure&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/cartesia&#34;&gt;Cartesia&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/deepgram&#34;&gt;Deepgram&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/elevenlabs&#34;&gt;ElevenLabs&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/fastpitch&#34;&gt;FastPitch (NVIDIA)&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/fish&#34;&gt;Fish&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/google&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/lmnt&#34;&gt;LMNT&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/neuphonic&#34;&gt;Neuphonic&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/openai&#34;&gt;OpenAI&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/piper&#34;&gt;Piper&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/playht&#34;&gt;PlayHT&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/rime&#34;&gt;Rime&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/tts/xtts&#34;&gt;XTTS&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Speech-to-Speech&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/s2s/gemini&#34;&gt;Gemini Multimodal Live&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/s2s/openai&#34;&gt;OpenAI Realtime&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transport&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/transport/daily&#34;&gt;Daily (WebRTC)&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/transport/fastapi-websocket&#34;&gt;FastAPI Websocket&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/transport/small-webrtc&#34;&gt;SmallWebRTCTransport&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/transport/websocket-server&#34;&gt;WebSocket Server&lt;/a&gt;, Local&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Video&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/video/tavus&#34;&gt;Tavus&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/video/simli&#34;&gt;Simli&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Memory&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/memory/mem0&#34;&gt;mem0&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vision &amp;amp; Image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/image-generation/fal&#34;&gt;fal&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/image-generation/fal&#34;&gt;Google Imagen&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/services/vision/moondream&#34;&gt;Moondream&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Audio Processing&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/utilities/audio/silero-vad-analyzer&#34;&gt;Silero VAD&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/utilities/audio/krisp-filter&#34;&gt;Krisp&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/utilities/audio/koala-filter&#34;&gt;Koala&lt;/a&gt;, &lt;a href=&#34;https://docs.pipecat.ai/server/utilities/audio/noisereduce-filter&#34;&gt;Noisereduce&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Analytics &amp;amp; Metrics&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.pipecat.ai/server/services/analytics/sentry&#34;&gt;Sentry&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;📚 &lt;a href=&#34;https://docs.pipecat.ai/server/services/supported-services&#34;&gt;View full services documentation →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⚡ Getting started&lt;/h2&gt; &#xA;&lt;p&gt;You can get started with Pipecat running on your local machine, then move your agent processes to the cloud when you’re ready.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install the module&#xA;pip install pipecat-ai&#xA;&#xA;# Set up your environment&#xA;cp dot-env.template .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To keep things lightweight, only the core framework is included by default. If you need support for third-party AI services, you can add the necessary dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install &#34;pipecat-ai[option,...]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🧪 Code examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pipecat-ai/pipecat/tree/main/examples/foundational&#34;&gt;Foundational&lt;/a&gt; — small snippets that build on each other, introducing one or two concepts at a time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pipecat-ai/pipecat/tree/main/examples/&#34;&gt;Example apps&lt;/a&gt; — complete applications that you can use as starting points for development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🛠️ Hacking on the framework itself&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up a virtual environment before following these instructions. From the root of the repo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 -m venv venv&#xA;source venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the development dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r dev-requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the git pre-commit hooks (these help ensure your code follows project rules):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;code&gt;pipecat-ai&lt;/code&gt; package locally in editable mode:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--editable&lt;/code&gt; option allows you to modify the code without reinstalling.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include optional dependencies as needed. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -e &#34;.[daily,deepgram,cartesia,openai,silero]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) If you want to use this package from another directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install &#34;path_to_this_repo[option,...]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;Install the test dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r test-requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the root directory, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting up your editor&lt;/h3&gt; &#xA;&lt;p&gt;This project uses strict &lt;a href=&#34;https://peps.python.org/pep-0008/&#34;&gt;PEP 8&lt;/a&gt; formatting via &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;Ruff&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Emacs&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/jwiegley/use-package&#34;&gt;use-package&lt;/a&gt; to install &lt;a href=&#34;https://github.com/christophermadsen/emacs-lazy-ruff&#34;&gt;emacs-lazy-ruff&lt;/a&gt; package and configure &lt;code&gt;ruff&lt;/code&gt; arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package lazy-ruff&#xA;  :ensure t&#xA;  :hook ((python-mode . lazy-ruff-mode))&#xA;  :config&#xA;  (setq lazy-ruff-format-command &#34;ruff format&#34;)&#xA;  (setq lazy-ruff-check-command &#34;ruff check --select I&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ruff&lt;/code&gt; was installed in the &lt;code&gt;venv&lt;/code&gt; environment described before, so you should be able to use &lt;a href=&#34;https://github.com/ryotaro612/pyvenv-auto&#34;&gt;pyvenv-auto&lt;/a&gt; to automatically load that environment inside Emacs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;(use-package pyvenv-auto&#xA;  :ensure t&#xA;  :defer t&#xA;  :hook ((python-mode . pyvenv-auto-run)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff&#34;&gt;Ruff&lt;/a&gt; extension. Then edit the user settings (&lt;em&gt;Ctrl-Shift-P&lt;/em&gt; &lt;code&gt;Open User Settings (JSON)&lt;/code&gt;) and set it as the default Python formatter, and enable formatting on save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;[python]&#34;: {&#xA;    &#34;editor.defaultFormatter&#34;: &#34;charliermarsh.ruff&#34;,&#xA;    &#34;editor.formatOnSave&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;PyCharm&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;ruff&lt;/code&gt; was installed in the &lt;code&gt;venv&lt;/code&gt; environment described before, now to enable autoformatting on save, go to &lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Tools&lt;/code&gt; -&amp;gt; &lt;code&gt;File Watchers&lt;/code&gt; and add a new watcher with the following settings:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: &lt;code&gt;Ruff formatter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File type&lt;/strong&gt;: &lt;code&gt;Python&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Working directory&lt;/strong&gt;: &lt;code&gt;$ContentRoot$&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arguments&lt;/strong&gt;: &lt;code&gt;format $FilePath$&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Program&lt;/strong&gt;: &lt;code&gt;$PyInterpreterDirectory$/ruff&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community! Whether you&#39;re fixing bugs, improving documentation, or adding new features, here&#39;s how you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Found a bug?&lt;/strong&gt; Open an &lt;a href=&#34;https://github.com/pipecat-ai/pipecat/issues&#34;&gt;issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Have a feature idea?&lt;/strong&gt; Start a &lt;a href=&#34;https://discord.gg/pipecat&#34;&gt;discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Want to contribute code?&lt;/strong&gt; Check our &lt;a href=&#34;https://raw.githubusercontent.com/pipecat-ai/pipecat/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; guide&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation improvements?&lt;/strong&gt; &lt;a href=&#34;https://github.com/pipecat-ai/docs&#34;&gt;Docs&lt;/a&gt; PRs are always welcome&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before submitting a pull request, please check existing issues and PRs to avoid duplicates.&lt;/p&gt; &#xA;&lt;p&gt;We aim to review all contributions promptly and provide constructive feedback to help get your changes merged.&lt;/p&gt; &#xA;&lt;h2&gt;🛟 Getting help&lt;/h2&gt; &#xA;&lt;p&gt;➡️ &lt;a href=&#34;https://discord.gg/pipecat&#34;&gt;Join our Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;➡️ &lt;a href=&#34;https://docs.pipecat.ai&#34;&gt;Read the docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;➡️ &lt;a href=&#34;https://x.com/pipecat_ai&#34;&gt;Reach us on X&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>