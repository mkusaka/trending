<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:33:33Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>geekcomputers/Python</title>
    <updated>2022-08-02T01:33:33Z</updated>
    <id>tag:github.com,2022-08-02:/geekcomputers/Python</id>
    <link href="https://github.com/geekcomputers/Python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My Python Examples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Master #This document helps to understand python in detail.And tells you More Information&lt;/h1&gt; &#xA;&lt;p&gt;#This document helps to understand python in details. master&lt;/p&gt; &#xA;&lt;h1&gt;My Python Examples for everyone&lt;/h1&gt; &#xA;&lt;p&gt;=======&lt;/p&gt; &#xA;&lt;p&gt;master&lt;/p&gt; &#xA;&lt;h1&gt;My Python Egs &lt;span&gt;üêç&lt;/span&gt; &lt;span&gt;üòÑ&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;hr&gt; I do not consider myself as a programmer. I create these little programs as experiments to play with Python, or to solve problems for myself. I would gladly accept pointers from others to improve, simplify, or make the code more efficient. If you would like to make any comments then please feel free to email me: master &#xA;&lt;h1&gt;My Best Python Examples for education&lt;/h1&gt; &#xA;&lt;p&gt;master&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;üìß&lt;/span&gt; &lt;a href=&#34;mailto:craig@geekcomputers.co.uk&#34;&gt;craig@geekcomputers.co.uk&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;master This script contain important functions which help reduce human workload. Code documentation is aligned correctly when the files are viewed in &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt;. &lt;span&gt;üóí&lt;/span&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This script contain important functions which help in reducing human workload. And also helps beginners to get started with python. Code documentation is aligned correctly when the files are viewed in &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt;. Jarvis is used as a google assistant. master&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/batch_file_rename.py&#34;&gt;batch_file_rename.py&lt;/a&gt; - This batch renames a group of files in a given directory, once you pass the current and the new extensions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/create_dir_if_not_there.py&#34;&gt;create_dir_if_not_there.py&lt;/a&gt; - Checks to see if a directory exists in the users home directory. If a directory does not exist, then one will be created.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/youtube-downloader%20fast.py&#34;&gt;Fast Youtube Downloader&lt;/a&gt; - Downloads YouTube videos quickly with parallel threads using aria2c.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/tree/master/Google_Image_Downloader&#34;&gt;Google Image Downloader&lt;/a&gt; - Query a given term and retrieve images from the Google Image database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/dir_test.py&#34;&gt;dir_test.py&lt;/a&gt; - Tests to see if the directory &lt;code&gt;testdir&lt;/code&gt; exists, if not it will create the directory for you if you want it created.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/env_check.py&#34;&gt;env_check.py&lt;/a&gt; - This script will check to see if all of the environment variables required are set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Ratna04priya/Python/raw/master/BlackJack_game/blackjack.py&#34;&gt;blackjack.py&lt;/a&gt; - This script contains the Casino BlackJack-21 Game in Python.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/fileinfo.py&#34;&gt;fileinfo.py&lt;/a&gt; - Shows file information for a given file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/folder_size.py&#34;&gt;folder_size.py&lt;/a&gt; - Scans the current directory and all subdirectories and displays the size.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/logs.py&#34;&gt;logs.py&lt;/a&gt; - This script will search for all &lt;code&gt;*.log&lt;/code&gt; files in the given directory, zip them using the program you specify, and then date stamp them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/move_files_over_x_days.py&#34;&gt;move_files_over_x_days.py&lt;/a&gt; - Moves all files over a specified age (in days) from the source directory to the destination directory. perfect&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/nslookup_check.py&#34;&gt;nslookup_check.py&lt;/a&gt; - This simple script opens the file &lt;code&gt;server_list.txt&lt;/code&gt; and then does a nslookup for each one to check the DNS entry.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/osinfo.py&#34;&gt;osinfo.py&lt;/a&gt; - Displays some information about the OS on which you are running this script.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/ping_servers.py&#34;&gt;ping_servers.py&lt;/a&gt; - This script, depending on the arguments supplied, will ping the servers associated with that application group.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/ping_subnet.py&#34;&gt;ping_subnet.py&lt;/a&gt; - After supplying the first 3 octets this file scans the final range for available addresses.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/powerdown_startup.py&#34;&gt;powerdown_startup.py&lt;/a&gt; - This file goes through the server list and pings the machine, if it is up it will load the putty session, if it is not then it will notify you.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/puttylogs.py&#34;&gt;puttylogs.py&lt;/a&gt; - This file zips up all the logs in the given directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/script_count.py&#34;&gt;script_count.py&lt;/a&gt; - This file scans the scripts directory and gives a count of the different types of scripts.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[get_youtube_view.py] - This is a simple python script used to get more views on your YouTube videos. This script may also be used to repeat songs on YouTube.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/script_listing.py&#34;&gt;script_listing.py&lt;/a&gt; - This file will list all the files in the given directory, and go through all the subdirectories as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/testlines.py&#34;&gt;testlines.py&lt;/a&gt; - This simple script opens a file and prints out 100 lines of whatever is the set for the line variable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/tweeter.py&#34;&gt;tweeter.py&lt;/a&gt; - Allows you to tweet text or a picture from the terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/serial_scanner.py&#34;&gt;serial_scanner.py&lt;/a&gt; contains a method called ListAvailablePorts which returns a list with the names of the serial ports that are in use in the computer. This method works only on Linux and Windows (can be extended for mac OS). If no port is found, an empty list is returned.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/get_youtube_view.py&#34;&gt;get_youtube_view.py&lt;/a&gt; - A simple python script to get more views for your YouTube videos. Useful for repeating songs on YouTube.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/CountMillionCharacter.py&#34;&gt;CountMillionCharacter.py&lt;/a&gt; And &lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/CountMillionCharacters-2.0.py&#34;&gt;CountMillionCharacter2.0&lt;/a&gt;.py - Gets character count of a text file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/xkcd_downloader.py&#34;&gt;xkcd_downloader.py&lt;/a&gt; - Downloads the latest XKCD comic and places them in a new folder called &#34;comics&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/timymodule.py&#34;&gt;timymodule.py&lt;/a&gt; - A great alternative to Python &#39;timeit&#39; module and easier to use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/calculator.py&#34;&gt;calculator.py&lt;/a&gt; - Uses Python&#39;s eval() function to implement a calculator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/Google_News.py&#34;&gt;Google_News.py&lt;/a&gt; - Uses BeautifulSoup to provide Latest news headline along with news link.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/Cricket_score.py&#34;&gt;cricket_live_score&lt;/a&gt; - Uses BeautifulSoup to provide live cricket score.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/youtube.py&#34;&gt;youtube.py&lt;/a&gt; - It Takes a song name as input and fetches the YouTube URL of the best matching song and plays it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/site_health.py&#34;&gt;site_health.py&lt;/a&gt; - Checks the health of a remote server&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/SimpleStopWatch.py&#34;&gt;SimpleStopWatch.py&lt;/a&gt; - Simple Stop Watch implementation using Python&#39;s time module.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/changemac.py&#34;&gt;Changemac.py&lt;/a&gt; - This script change your MAC address , generate random MAC address or enter input as new MAC address in your Linux(Successfully Tested in Ubuntu 18.04).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/geekcomputers/Python/raw/master/whatsapp-monitor.py&#34;&gt;whatsapp-monitor.py&lt;/a&gt; - Uses Selenium to give online status about your contacts when your contacts become online in WA you will get an update about it on terminal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/subahanii/whatsapp-Chat-Analyzer&#34;&gt;whatsapp-chat-analyzer.py&lt;/a&gt; - This is Whatsapp group/individual chat analyzer . This script is able to analyze all activity happened in Whatsapp group and visualize all things through matplotlib library(In Graph form).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://git.io/fjH8m&#34;&gt;JARVIS.py&lt;/a&gt; - Control windows programs with your voice.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://git.io/JvnJh&#34;&gt;Images Downloader&lt;/a&gt; - Download Image Form webpage Work on Unix based systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/meezan-mallick/space_invader_game&#34;&gt;space_invader.py.py&lt;/a&gt; - Classical space invader 2D game. &lt;br&gt; Recall your old childhood memories, by playing the classic space invader game.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Tanmay-901/test-case-generator/raw/master/test_case.py&#34;&gt;Test Case Generator&lt;/a&gt; - Generates different types of test cases with a clean and friendly UI, used in competitive programming and potentially for software testing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;master&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can have a data set example for practice : Laliga Data ======= master&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; - [RandomNumberGame.py](---) - A Basic Game of Gussesing Numbers . master master</summary>
  </entry>
  <entry>
    <title>3b1b/manim</title>
    <updated>2022-08-02T01:33:33Z</updated>
    <id>tag:github.com,2022-08-02:/3b1b/manim</id>
    <link href="https://github.com/3b1b/manim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Animation engine for explanatory math videos&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/3b1b/manim&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/3b1b/manim/master/logo/cropped.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/manimgl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/manimgl?logo=pypi&#34; alt=&#34;pypi version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://choosealicense.com/licenses/mit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=flat&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/manim/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/manim.svg?color=ff4301&amp;amp;label=reddit&amp;amp;logo=reddit&#34; alt=&#34;Manim Subreddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/bYCyhM9Kz2&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/581738731934056449.svg?label=discord&amp;amp;logo=discord&#34; alt=&#34;Manim Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://3b1b.github.io/manim/&#34;&gt;&lt;img src=&#34;https://github.com/3b1b/manim/workflows/docs/badge.svg?sanitize=true&#34; alt=&#34;docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Manim is an engine for precise programmatic animations, designed for creating explanatory math videos.&lt;/p&gt; &#xA;&lt;p&gt;Note, there are two versions of manim. This repository began as a personal project by the author of &lt;a href=&#34;https://www.3blue1brown.com/&#34;&gt;3Blue1Brown&lt;/a&gt; for the purpose of animating those videos, with video-specific code available &lt;a href=&#34;https://github.com/3b1b/videos&#34;&gt;here&lt;/a&gt;. In 2020 a group of developers forked it into what is now the &lt;a href=&#34;https://github.com/ManimCommunity/manim/&#34;&gt;community edition&lt;/a&gt;, with a goal of being more stable, better tested, quicker to respond to community contributions, and all around friendlier to get started with. See &lt;a href=&#34;https://docs.manim.community/en/stable/faq/installation.html#different-versions&#34;&gt;this page&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; These instructions are for ManimGL &lt;em&gt;only&lt;/em&gt;. Trying to use these instructions to install &lt;a href=&#34;https://github.com/ManimCommunity/manim&#34;&gt;ManimCommunity/manim&lt;/a&gt; or instructions there to install this version will cause problems. You should first decide which version you wish to install, then only follow the instructions for your desired version.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To install manim directly through pip, please pay attention to the name of the installed package. This repository is ManimGL of 3b1b. The package name is &lt;code&gt;manimgl&lt;/code&gt; instead of &lt;code&gt;manim&lt;/code&gt; or &lt;code&gt;manimlib&lt;/code&gt;. Please use &lt;code&gt;pip install manimgl&lt;/code&gt; to install the version in this repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Manim runs on Python 3.7 or higher.&lt;/p&gt; &#xA;&lt;p&gt;System requirements are &lt;a href=&#34;https://ffmpeg.org/&#34;&gt;FFmpeg&lt;/a&gt;, &lt;a href=&#34;https://www.opengl.org/&#34;&gt;OpenGL&lt;/a&gt; and &lt;a href=&#34;https://www.latex-project.org&#34;&gt;LaTeX&lt;/a&gt; (optional, if you want to use LaTeX). For Linux, &lt;a href=&#34;https://pango.gnome.org&#34;&gt;Pango&lt;/a&gt; along with its development headers are required. See instruction &lt;a href=&#34;https://github.com/ManimCommunity/ManimPango#building&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Directly&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install manimgl&#xA;pip install manimgl&#xA;&#xA;# Try it out&#xA;manimgl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more options, take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/3b1b/manim/master/#using-manim&#34;&gt;Using manim&lt;/a&gt; sections further below.&lt;/p&gt; &#xA;&lt;p&gt;If you want to hack on manimlib itself, clone this repository and in that directory execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Install manimgl&#xA;pip install -e .&#xA;&#xA;# Try it out&#xA;manimgl example_scenes.py OpeningManimExample&#xA;# or&#xA;manim-render example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Directly (Windows)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wikihow.com/Install-FFmpeg-on-Windows&#34;&gt;Install FFmpeg&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install a LaTeX distribution. &lt;a href=&#34;https://miktex.org/download&#34;&gt;MiKTeX&lt;/a&gt; is recommended.&lt;/li&gt; &#xA; &lt;li&gt;Install the remaining Python packages. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/3b1b/manim.git&#xA;cd manim&#xA;pip install -e .&#xA;manimgl example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Mac OSX&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install FFmpeg, LaTeX in terminal using homebrew.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install ffmpeg mactex&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install latest version of manim using these command.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/3b1b/manim.git&#xA;cd manim&#xA;pip install -e .&#xA;manimgl example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Anaconda Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install LaTeX as above.&lt;/li&gt; &#xA; &lt;li&gt;Create a conda environment using &lt;code&gt;conda create -n manim python=3.8&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Activate the environment using &lt;code&gt;conda activate manim&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install manimgl using &lt;code&gt;pip install -e .&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Using manim&lt;/h2&gt; &#xA;&lt;p&gt;Try running the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;manimgl example_scenes.py OpeningManimExample&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should pop up a window playing a simple scene.&lt;/p&gt; &#xA;&lt;p&gt;Some useful flags include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-w&lt;/code&gt; to write the scene to a file&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-o&lt;/code&gt; to write the scene to a file and open the result&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-s&lt;/code&gt; to skip to the end and just show the final frame. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;-so&lt;/code&gt; will save the final frame to an image and show it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-n &amp;lt;number&amp;gt;&lt;/code&gt; to skip ahead to the &lt;code&gt;n&lt;/code&gt;&#39;th animation of a scene.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; to make the playback window fullscreen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Take a look at custom_config.yml for further configuration. To add your customization, you can either edit this file, or add another file by the same name &#34;custom_config.yml&#34; to whatever directory you are running manim from. For example &lt;a href=&#34;https://github.com/3b1b/videos/raw/master/custom_config.yml&#34;&gt;this is the one&lt;/a&gt; for 3blue1brown videos. There you can specify where videos should be output to, where manim should look for image files and sounds you want to read in, and other defaults regarding style and video quality.&lt;/p&gt; &#xA;&lt;p&gt;Look through the &lt;a href=&#34;https://3b1b.github.io/manim/getting_started/example_scenes.html&#34;&gt;example scenes&lt;/a&gt; to get a sense of how it is used, and feel free to look through the code behind &lt;a href=&#34;https://github.com/3b1b/videos&#34;&gt;3blue1brown videos&lt;/a&gt; for a much larger set of example. Note, however, that developments are often made to the library without considering backwards compatibility with those old videos. To run an old project with a guarantee that it will work, you will have to go back to the commit which completed that project.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Documentation is in progress at &lt;a href=&#34;https://3b1b.github.io/manim/&#34;&gt;3b1b.github.io/manim&lt;/a&gt;. And there is also a Chinese version maintained by &lt;a href=&#34;https://manim.org.cn&#34;&gt;&lt;strong&gt;@manim-kindergarten&lt;/strong&gt;&lt;/a&gt;: &lt;a href=&#34;https://docs.manim.org.cn/&#34;&gt;docs.manim.org.cn&lt;/a&gt; (in Chinese).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/manim-kindergarten/&#34;&gt;manim-kindergarten&lt;/a&gt; wrote and collected some useful extra classes and some codes of videos in &lt;a href=&#34;https://github.com/manim-kindergarten/manim_sandbox&#34;&gt;manim_sandbox repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Is always welcome. As mentioned above, the &lt;a href=&#34;https://github.com/ManimCommunity/manim&#34;&gt;community edition&lt;/a&gt; has the most active ecosystem for contributions, with testing and continuous integration, but pull requests are welcome here too. Please explain the motivation for a given change and examples of its effect.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project falls under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Textualize/textual</title>
    <updated>2022-08-02T01:33:33Z</updated>
    <id>tag:github.com,2022-08-02:/Textualize/textual</id>
    <link href="https://github.com/Textualize/textual" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Textual is a TUI (Text User Interface) framework for Python inspired by modern web development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Textual&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Textual is a TUI (Text User Interface) framework for Python inspired by modern web development. Currently a &lt;strong&gt;Work in Progress&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;We (&lt;a href=&#34;https://www.textualize.io&#34;&gt;Textualize.io&lt;/a&gt;) are hard at work on the &lt;strong&gt;css&lt;/strong&gt; branch. We will maintain the 0.1.0 branch for the near future but may not be able to accept API changes. If you would like to contribute code via a PR, please raise a discussion first, to avoid disappointment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/willmcgugan&#34;&gt;@willmcgugan&lt;/a&gt; for progress updates, or post in Discussions if you have any requests / suggestions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/textual-ui/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/textual-ui/community.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/textual-ui/community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Textual currently runs on &lt;strong&gt;MacOS / Linux / Windows&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Textual uses &lt;a href=&#34;https://github.com/willmcgugan/rich&#34;&gt;Rich&lt;/a&gt; to render rich text, so anything that Rich can render may be used in Textual.&lt;/p&gt; &#xA;&lt;p&gt;Event handling in Textual is asynchronous (using &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords). Widgets (UI components) can independently update and communicate with each other via message passing.&lt;/p&gt; &#xA;&lt;p&gt;Textual has more in common with modern web development than it does with &lt;a href=&#34;https://en.wikipedia.org/wiki/Curses_(programming_library)&#34;&gt;curses&lt;/a&gt;; layout is done with CSS grid and (soon) the theme may be customized with CSS. Other techniques are borrowed from JS frameworks such as Vue and React.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install Textual via pip (&lt;code&gt;pip install textual&lt;/code&gt;), or by checking out the repo and installing with &lt;a href=&#34;https://python-poetry.org/docs/&#34;&gt;poetry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once installed you can run the following command for a quick test, or see examples (below):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m textual.app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Textual requires Python 3.7 or above.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Until I&#39;ve written the documentation, the &lt;a href=&#34;https://github.com/willmcgugan/textual/tree/main/examples/&#34;&gt;examples&lt;/a&gt; may be the best way to learn Textual.&lt;/p&gt; &#xA;&lt;p&gt;You can see some of these examples in action in the &lt;a href=&#34;https://raw.githubusercontent.com/Textualize/textual/main/#developer-video-log&#34;&gt;Developer Video Log&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willmcgugan/textual/tree/main/examples/animation.py&#34;&gt;animation.py&lt;/a&gt; Demonstration of 60fps animation easing function&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willmcgugan/textual/tree/main/examples/calculator.py&#34;&gt;calculator.py&lt;/a&gt; A &#34;clone&#34; of the MacOS calculator using Grid layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willmcgugan/textual/tree/main/examples/code_viewer.py&#34;&gt;code_viewer.py&lt;/a&gt; A demonstration of a tree view which loads syntax highlighted code&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willmcgugan/textual/tree/main/examples/grid.py&#34;&gt;grid.py&lt;/a&gt; A simple demonstration of adding widgets in a Grid layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willmcgugan/textual/tree/main/examples/grid_auto.py&#34;&gt;grid_auto.py&lt;/a&gt; A demonstration of automatic Grid layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willmcgugan/textual/tree/main/examples/simple.py&#34;&gt;simple.py&lt;/a&gt; A very simple Textual app with scrolling Markdown view&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building Textual applications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This guide is a work in progress&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s look at the simplest Textual app which does &lt;em&gt;something&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textual.app import App&#xA;&#xA;&#xA;class Beeper(App):&#xA;    def on_key(self):&#xA;        self.console.bell()&#xA;&#xA;&#xA;Beeper.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we can see a textual app with a single &lt;code&gt;on_key&lt;/code&gt; method which will handle key events. Pressing any key will result in playing the terminal bell (generally an irritating beep). Hit Ctrl+C to exit.&lt;/p&gt; &#xA;&lt;p&gt;Event handlers in Textual are defined by convention, not by inheritance (there&#39;s no base class with all the handlers defined). Each event has a &lt;code&gt;name&lt;/code&gt; attribute which for the key event is simply &lt;code&gt;&#34;key&#34;&lt;/code&gt;. Textual will call the method named &lt;code&gt;on_&amp;lt;event.name&amp;gt;&lt;/code&gt; if it exists.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s look at a &lt;em&gt;slightly&lt;/em&gt; more interesting example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textual.app import App&#xA;&#xA;&#xA;class ColorChanger(App):&#xA;    def on_key(self, event):&#xA;        if event.key.isdigit():&#xA;            self.background = f&#34;on color({event.key})&#34;&#xA;&#xA;&#xA;ColorChanger.run(log=&#34;textual.log&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll notice that the &lt;code&gt;on_key&lt;/code&gt; method above contains an additional &lt;code&gt;event&lt;/code&gt; parameter which wasn&#39;t present on the beeper example. If the &lt;code&gt;event&lt;/code&gt; argument is present, Textual will call the handler with an event object. Every event has an associated handler object, in this case it is a KeyEvent which contains additional information regarding which key was pressed.&lt;/p&gt; &#xA;&lt;p&gt;The key event handler above will set the background attribute if you press the keys 0-9, which turns the terminal to the corresponding &lt;a href=&#34;https://rich.readthedocs.io/en/latest/appendix/colors.html&#34;&gt;ansi color&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that we didn&#39;t need to explicitly refresh the screen or draw anything. Setting the &lt;code&gt;background&lt;/code&gt; attribute to a &lt;a href=&#34;https://rich.readthedocs.io/en/latest/style.html&#34;&gt;Rich style&lt;/a&gt; is enough for Textual to update the visuals. This is an example of &lt;em&gt;reactivity&lt;/em&gt; in Textual. To make changes to the terminal interface you modify the &lt;em&gt;state&lt;/em&gt; and let Textual update the UI.&lt;/p&gt; &#xA;&lt;h2&gt;Widgets&lt;/h2&gt; &#xA;&lt;p&gt;To make more interesting apps you will need to make use of &lt;em&gt;widgets&lt;/em&gt;, which are independent user interface elements. Textual comes with a (growing) library of widgets, but you can develop your own.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s look at an app which contains widgets. We will be using the built-in &lt;code&gt;Placeholder&lt;/code&gt; widget which you can use to design application layouts before you implement the real content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textual.app import App&#xA;from textual.widgets import Placeholder&#xA;&#xA;&#xA;class SimpleApp(App):&#xA;&#xA;    async def on_mount(self) -&amp;gt; None:&#xA;        await self.view.dock(Placeholder(), edge=&#34;left&#34;, size=40)&#xA;        await self.view.dock(Placeholder(), Placeholder(), edge=&#34;top&#34;)&#xA;&#xA;&#xA;SimpleApp.run(log=&#34;textual.log&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This app contains a single event handler &lt;code&gt;on_mount&lt;/code&gt;. The mount event is sent when the app or widget is ready to start processing events, and is typically used for initialization. You may have noticed that &lt;code&gt;on_mount&lt;/code&gt; is an &lt;code&gt;async&lt;/code&gt; function. Since Textual is an asynchronous framework we will need this if we need to call most other methods.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;on_mount&lt;/code&gt; method makes two calls to &lt;code&gt;self.view.dock&lt;/code&gt; which adds widgets to the terminal.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the first line in the mount handler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;await self.view.dock(Placeholder(), edge=&#34;left&#34;, size=40)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note this method is asynchronous like almost all API methods in Textual. We are awaiting &lt;code&gt;self.view.dock&lt;/code&gt; which takes a newly constructed Placeholder widget, and docks it on to the &lt;code&gt;&#34;left&#34;&lt;/code&gt; edge of the terminal with a size of 40 characters. In a real app you might use this to display a side-bar.&lt;/p&gt; &#xA;&lt;p&gt;The following line is similar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;await self.view.dock(Placeholder(), Placeholder(), edge=&#34;top&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will notice that this time we are docking &lt;em&gt;two&lt;/em&gt; Placeholder objects onto the &lt;code&gt;&#34;top&#34;&lt;/code&gt; edge. We haven&#39;t set an explicit size this time so Textual will divide the remaining size amongst the two new widgets.&lt;/p&gt; &#xA;&lt;p&gt;The last line calls the &lt;code&gt;run&lt;/code&gt; class method in the usual way, but with an argument we haven&#39;t seen before: &lt;code&gt;log=&#34;textual.log&#34;&lt;/code&gt; tells Textual to write log information to the given file. You can tail textual.log to see events being processed and other debug information.&lt;/p&gt; &#xA;&lt;p&gt;If you run the above example, you will see something like the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/widgets.png&#34; alt=&#34;widgets&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you move the mouse over the terminal you will notice that widgets receive mouse events. You can click any of the placeholders to give it input focus.&lt;/p&gt; &#xA;&lt;p&gt;The dock layout feature is very flexible, but for more sophisticated layouts we can use the grid API. See the &lt;a href=&#34;https://github.com/willmcgugan/textual/raw/main/examples/calculator.py&#34;&gt;calculator.py&lt;/a&gt; example which makes use of Grid.&lt;/p&gt; &#xA;&lt;h3&gt;Creating Widgets&lt;/h3&gt; &#xA;&lt;p&gt;You can create your own widgets by subclassing the &lt;code&gt;textual.widget.Widget&lt;/code&gt; class and implementing a &lt;code&gt;render()&lt;/code&gt; method which should return anything that can be rendered with &lt;a href=&#34;https://rich.readthedocs.io/en/latest/introduction.html&#34;&gt;Rich&lt;/a&gt;, including a plain string which will be interpreted as &lt;a href=&#34;https://rich.readthedocs.io/en/latest/markup.html&#34;&gt;console markup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s look at an example with a custom widget:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich.panel import Panel&#xA;&#xA;from textual.app import App&#xA;from textual.reactive import Reactive&#xA;from textual.widget import Widget&#xA;&#xA;&#xA;class Hover(Widget):&#xA;&#xA;    mouse_over = Reactive(False)&#xA;&#xA;    def render(self) -&amp;gt; Panel:&#xA;        return Panel(&#34;Hello [b]World[/b]&#34;, style=(&#34;on red&#34; if self.mouse_over else &#34;&#34;))&#xA;&#xA;    def on_enter(self) -&amp;gt; None:&#xA;        self.mouse_over = True&#xA;&#xA;    def on_leave(self) -&amp;gt; None:&#xA;        self.mouse_over = False&#xA;&#xA;&#xA;class HoverApp(App):&#xA;    &#34;&#34;&#34;Demonstrates custom widgets&#34;&#34;&#34;&#xA;&#xA;    async def on_mount(self) -&amp;gt; None:&#xA;        hovers = (Hover() for _ in range(10))&#xA;        await self.view.dock(*hovers, edge=&#34;top&#34;)&#xA;&#xA;&#xA;HoverApp.run(log=&#34;textual.log&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Hover&lt;/code&gt; class is a custom widget which displays a panel containing the classic text &#34;Hello World&#34;. The first line in the Hover class may seem a little mysterious at this point:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mouse_over = Reactive(False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds a &lt;code&gt;mouse_over&lt;/code&gt; attribute to your class which is a bool with a default of &lt;code&gt;False&lt;/code&gt;. Adding attributes like this makes them &lt;em&gt;reactive&lt;/em&gt;: any changes will result in the widget updating.&lt;/p&gt; &#xA;&lt;p&gt;The following &lt;code&gt;render()&lt;/code&gt; method is where you define how the widget should be displayed. In the Hover widget we return a &lt;a href=&#34;https://rich.readthedocs.io/en/latest/panel.html&#34;&gt;Panel&lt;/a&gt; containing rich text with a background that changes depending on the value of &lt;code&gt;mouse_over&lt;/code&gt;. The goal here is to add a mouse hover effect to the widget, which we can achieve by handling two events: &lt;code&gt;Enter&lt;/code&gt; and &lt;code&gt;Leave&lt;/code&gt;. These events are sent when the mouse enters or leaves the widget.&lt;/p&gt; &#xA;&lt;p&gt;Here are the two event handlers again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def on_enter(self) -&amp;gt; None:&#xA;        self.mouse_over = True&#xA;&#xA;    def on_leave(self) -&amp;gt; None:&#xA;        self.mouse_over = False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both event handlers set the &lt;code&gt;mouse_over&lt;/code&gt; attribute which will result in the widget&#39;s &lt;code&gt;render()&lt;/code&gt; method being called.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;HoverApp&lt;/code&gt; has a &lt;code&gt;on_mount&lt;/code&gt; handler which creates 10 Hover widgets and docks them on the top edge to create a vertical stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    async def on_mount(self) -&amp;gt; None:&#xA;        hovers = (Hover() for _ in range(10))&#xA;        await self.view.dock(*hovers, edge=&#34;top&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run this script you will see something like the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/custom.gif&#34; alt=&#34;widgets&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you move your mouse over the terminal you should see that the widget under the mouse cursor changes to a red background.&lt;/p&gt; &#xA;&lt;h3&gt;Actions and key bindings&lt;/h3&gt; &#xA;&lt;p&gt;Actions in Textual are white-listed functions that may be bound to keys. Let&#39;s look at a trivial example of binding a key to an action. Here is an app which exits when we hit the Q key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textual.app import App&#xA;&#xA;&#xA;class Quitter(App):&#xA;    async def on_load(self, event):&#xA;        await self.bind(&#34;q&#34;, &#34;quit&#34;)&#xA;&#xA;&#xA;Quitter.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run this you will get a blank terminal which will return to the prompt when you press Q.&lt;/p&gt; &#xA;&lt;p&gt;Binding is done in the Load event handler. The &lt;code&gt;bind&lt;/code&gt; method takes the key (in this case &#34;q&#34;) and binds it to an action (&#34;quit&#34;). The quit action is built in to Textual and simply exits the app.&lt;/p&gt; &#xA;&lt;p&gt;To define your own actions, add a method that begins with &lt;code&gt;action_&lt;/code&gt;, which may take parameters. Let&#39;s create a simple action that changes the color of the terminal and binds keys to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from textual.app import App&#xA;&#xA;&#xA;class Colorizer(App):&#xA;&#xA;    async def on_load(self, event):&#xA;        await self.bind(&#34;r&#34;, &#34;color(&#39;red&#39;)&#34;)&#xA;        await self.bind(&#34;g&#34;, &#34;color(&#39;green&#39;)&#34;)&#xA;        await self.bind(&#34;b&#34;, &#34;color(&#39;blue&#39;)&#34;)&#xA;&#xA;    async def action_color(self, color:str) -&amp;gt; None:&#xA;        self.background = f&#34;on {color}&#34;&#xA;&#xA;&#xA;Colorizer.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run this app you can hit the keys R, G, or B to change the color of the background.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;on_load&lt;/code&gt; method we have bound the keys R, G, and B to the &lt;code&gt;color&lt;/code&gt; action with a single parameter. When you press any of these three keys Textual will call the method &lt;code&gt;action_color&lt;/code&gt; with the appropriate parameter.&lt;/p&gt; &#xA;&lt;p&gt;You could be forgiven for thinking that &lt;code&gt;&#34;color(&#39;red&#39;)&#34;&lt;/code&gt; is Python code which Textual evaluates. This is not the case. The action strings are parsed and may not include expressions or arbitrary code. The reason that strings are used over a callable is that (in a future update) key bindings may be loaded from a configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;More on Events&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Watchers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Animation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Timers and Intervals&lt;/h3&gt; &#xA;&lt;p&gt;Textual has a &lt;code&gt;set_timer&lt;/code&gt; and a &lt;code&gt;set_interval&lt;/code&gt; method which work much like their Javascript counterparts. The &lt;code&gt;set_timer&lt;/code&gt; method will invoke a callable after a given period of time, and &lt;code&gt;set_interval&lt;/code&gt; will invoke a callable repeatedly. Unlike Javascript these methods expect the time to be in seconds (&lt;em&gt;not&lt;/em&gt; milliseconds).&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s create a simple terminal based clock with the &lt;code&gt;set_interval&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import datetime&#xA;&#xA;from rich.align import Align&#xA;&#xA;from textual.app import App&#xA;from textual.widget import Widget&#xA;&#xA;&#xA;class Clock(Widget):&#xA;    def on_mount(self):&#xA;        self.set_interval(1, self.refresh)&#xA;&#xA;    def render(self):&#xA;        time = datetime.now().strftime(&#34;%c&#34;)&#xA;        return Align.center(time, vertical=&#34;middle&#34;)&#xA;&#xA;&#xA;class ClockApp(App):&#xA;    async def on_mount(self):&#xA;        await self.view.dock(Clock())&#xA;&#xA;&#xA;ClockApp.run()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you run this app you will see the current time in the center of the terminal until you hit Ctrl+C.&lt;/p&gt; &#xA;&lt;p&gt;The Clock widget displays the time using &lt;a href=&#34;https://rich.readthedocs.io/en/latest/reference/align.html&#34;&gt;rich.align.Align&lt;/a&gt; to position it in the center. In the clock&#39;s Mount handler there is the following call to &lt;code&gt;set_interval&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.set_interval(1, self.refresh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This tells Textual to call a function (in this case &lt;code&gt;self.refresh&lt;/code&gt; which updates the widget) once a second. When a widget is refreshed it calls &lt;code&gt;Clock.render&lt;/code&gt; again to display the latest time.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Video Log&lt;/h2&gt; &#xA;&lt;p&gt;Since Textual is a visual medium, I&#39;ll be documenting new features and milestones here.&lt;/p&gt; &#xA;&lt;h3&gt;Update 1 - Basic scrolling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=zNW7U36GHlU&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=zNW7U36GHlU&amp;amp;img=0&#34; alt=&#34;Textual update 1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update 2 - Keyboard toggle&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=bTYeFOVNXDI&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=bTYeFOVNXDI&amp;amp;img=0&#34; alt=&#34;Textual update 2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update 3 - New scrollbars and smooth scrolling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=4LVl3ClrXIs&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=4LVl3ClrXIs&amp;amp;img=0&#34; alt=&#34;Textual update 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update 4 - Animation system with easing function&lt;/h3&gt; &#xA;&lt;p&gt;Now with a system to animate changes to values, going from the initial to the final value in small increments over time . Here applied to the scroll position. The animation system supports CSS like &lt;em&gt;easing functions&lt;/em&gt;. You may be able to tell from the video that the page up / down keys cause the window to first speed up and then slow down.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=k2VwOp1YbSk&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=k2VwOp1YbSk&amp;amp;img=0&#34; alt=&#34;Textual update 4&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update 5 - New Layout system&lt;/h3&gt; &#xA;&lt;p&gt;A new update system allows for overlapping layers. Animation is now synchronized with the display which makes it very smooth!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=XxRnfx2WYRw&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=XxRnfx2WYRw&amp;amp;img=0&#34; alt=&#34;Textual update 5&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update 6 - New Layout API&lt;/h3&gt; &#xA;&lt;p&gt;New version (0.1.4) with API updates and the new layout system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=jddccDuVd3E&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=jddccDuVd3E&amp;amp;img=0&#34; alt=&#34;Textual update 6&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update 7 - New Grid Layout&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;11 July 2021&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Added a new layout system modelled on CSS grid. The example demonstrates how once created a grid will adapt to the available space.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=Zh9CEvu73jc&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=Zh9CEvu73jc&amp;amp;img=0&#34; alt=&#34;Textual update 7&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Update 8 - Tree control and scroll views&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;6 Aug 2021&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Added a tree control and refactored the renderer to allow for widgets within a scrollable view&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=J-dzzD6NQJ4&#34;&gt;&lt;img src=&#34;https://yt-embed.herokuapp.com/embed?v=J-dzzD6NQJ4&amp;amp;img=0&#34; alt=&#34;Textual update 8&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>