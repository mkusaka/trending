<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-04T01:36:43Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apple/ml-stable-diffusion</title>
    <updated>2022-12-04T01:36:43Z</updated>
    <id>tag:github.com,2022-12-04:/apple/ml-stable-diffusion</id>
    <link href="https://github.com/apple/ml-stable-diffusion" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stable Diffusion with Core ML on Apple Silicon&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Core ML Stable Diffusion&lt;/h1&gt; &#xA;&lt;p&gt;Run Stable Diffusion on Apple Silicon with Core ML&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/assets/readme_reel.png&#34;&gt; &#xA;&lt;p&gt;This repository comprises:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python_coreml_stable_diffusion&lt;/code&gt;, a Python package for converting PyTorch models to Core ML format and performing image generation with Hugging Face &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt; in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StableDiffusion&lt;/code&gt;, a Swift package that developers can add to their Xcode projects as a dependency to deploy image generation capabilities in their apps. The Swift package relies on the Core ML model files generated by &lt;code&gt;python_coreml_stable_diffusion&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into issues during installation or runtime, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#FAQ&#34;&gt;FAQ&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;example-results&#34;&gt;&lt;/a&gt; Example Results&lt;/h2&gt; &#xA;&lt;p&gt;There are numerous versions of Stable Diffusion available on the &lt;a href=&#34;https://huggingface.co/models?search=stable-diffusion&#34;&gt;Hugging Face Hub&lt;/a&gt;. Here are example results from three of those models:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;--model-version&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-base&#34;&gt;stabilityai/stable-diffusion-2-base&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v1-4&#34;&gt;CompVis/stable-diffusion-v1-4&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-v1-5&#34;&gt;runwayml/stable-diffusion-v1-5&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Output&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/assets/a_high_quality_photo_of_an_astronaut_riding_a_horse_in_space/randomSeed_11_computeUnit_CPU_AND_GPU_modelVersion_stabilityai_stable-diffusion-2-base.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/assets/a_high_quality_photo_of_an_astronaut_riding_a_horse_in_space/randomSeed_13_computeUnit_CPU_AND_NE_modelVersion_CompVis_stable-diffusion-v1-4.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/assets/a_high_quality_photo_of_an_astronaut_riding_a_horse_in_space/randomSeed_93_computeUnit_CPU_AND_NE_modelVersion_runwayml_stable-diffusion-v1-5.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M1 iPad Pro 8GB Latency (s)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M1 MacBook Pro 16GB Latency (s)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M2 MacBook Air 8GB Latency (s)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#important-notes-on-performance-benchmarks&#34;&gt;Important Notes on Performance Benchmarks&lt;/a&gt; section for details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;converting-models-to-coreml&#34;&gt;&lt;/a&gt; Converting Models to Core ML&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click to expand &lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Create a Python environment and install dependencies:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n coreml_stable_diffusion python=3.8 -y&#xA;conda activate coreml_stable_diffusion&#xA;cd /path/to/cloned/ml-stable-diffusion/repository&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Log in to or register for your &lt;a href=&#34;https://huggingface.co&#34;&gt;Hugging Face account&lt;/a&gt;, generate a &lt;a href=&#34;https://huggingface.co/settings/tokens&#34;&gt;User Access Token&lt;/a&gt; and use this token to set up Hugging Face API access by running &lt;code&gt;huggingface-cli login&lt;/code&gt; in a Terminal window.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Navigate to the version of Stable Diffusion that you would like to use on &lt;a href=&#34;https://huggingface.co/models?search=stable-diffusion&#34;&gt;Hugging Face Hub&lt;/a&gt; and accept its Terms of Use. The default model version is &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v1-4&#34;&gt;CompVis/stable-diffusion-v1-4&lt;/a&gt;. The model version may be changed by the user as described in the next step.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Execute the following command from the Terminal to generate Core ML model files (&lt;code&gt;.mlpackage&lt;/code&gt;)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m python_coreml_stable_diffusion.torch2coreml --convert-unet --convert-text-encoder --convert-vae-decoder --convert-safety-checker -o &amp;lt;output-mlpackages-directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; This command will download several GB worth of PyTorch checkpoints from Hugging Face.&lt;/p&gt; &#xA; &lt;p&gt;This generally takes 15-20 minutes on an M1 MacBook Pro. Upon successful execution, the 4 neural network models that comprise Stable Diffusion will have been converted from PyTorch to Core ML (&lt;code&gt;.mlpackage&lt;/code&gt;) and saved into the specified &lt;code&gt;&amp;lt;output-mlpackages-directory&amp;gt;&lt;/code&gt;. Some additional notable arguments:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;--model-version&lt;/code&gt;: The model version defaults to &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v1-4&#34;&gt;CompVis/stable-diffusion-v1-4&lt;/a&gt;. Developers may specify other versions that are available on &lt;a href=&#34;https://huggingface.co/models?search=stable-diffusion&#34;&gt;Hugging Face Hub&lt;/a&gt;, e.g. &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-2-base&#34;&gt;stabilityai/stable-diffusion-2-base&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-v1-5&#34;&gt;runwayml/stable-diffusion-v1-5&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;--bundle-resources-for-swift-cli&lt;/code&gt;: Compiles all 4 models and bundles them along with necessary resources for text tokenization into &lt;code&gt;&amp;lt;output-mlpackages-directory&amp;gt;/Resources&lt;/code&gt; which should provided as input to the Swift package. This flag is not necessary for the diffusers-based Python pipeline.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;--chunk-unet&lt;/code&gt;: Splits the Unet model in two approximately equal chunks (each with less than 1GB of weights) for mobile-friendly deployment. This is &lt;strong&gt;required&lt;/strong&gt; for ANE deployment on iOS and iPadOS. This is not required for macOS. Swift CLI is able to consume both the chunked and regular versions of the Unet model but prioritizes the former. Note that chunked unet is not compatible with the Python pipeline because Python pipeline is intended for macOS only. Chunking is for on-device deployment with Swift only.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;--attention-implementation&lt;/code&gt;: Defaults to &lt;code&gt;SPLIT_EINSUM&lt;/code&gt; which is the implementation described in &lt;a href=&#34;https://machinelearning.apple.com/research/neural-engine-transformers&#34;&gt;Deploying Transformers on the Apple Neural Engine&lt;/a&gt;. &lt;code&gt;--attention-implementation ORIGINAL&lt;/code&gt; will switch to an alternative that should be used for non-ANE deployment. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#performance-benchmark&#34;&gt;Performance Benchmark&lt;/a&gt; section for further guidance.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;--check-output-correctness&lt;/code&gt;: Compares original PyTorch model&#39;s outputs to final Core ML model&#39;s outputs. This flag increases RAM consumption significantly so it is recommended only for debugging purposes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;image-generation-with-python&#34;&gt;&lt;/a&gt; Image Generation with Python&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click to expand &lt;/summary&gt; &#xA; &lt;p&gt;Run text-to-image generation using the example Python pipeline based on &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m python_coreml_stable_diffusion.pipeline --prompt &#34;a photo of an astronaut riding a horse on mars&#34; -i &amp;lt;output-mlpackages-directory&amp;gt; -o &amp;lt;/path/to/output/image&amp;gt; --compute-unit ALL --seed 93&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Please refer to the help menu for all available arguments: &lt;code&gt;python -m python_coreml_stable_diffusion.pipeline -h&lt;/code&gt;. Some notable arguments:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: Should point to the &lt;code&gt;-o&lt;/code&gt; directory from Step 4 of &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#converting-models-to-coreml&#34;&gt;Converting Models to Core ML&lt;/a&gt; section from above.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--model-version&lt;/code&gt;: If you overrode the default model version while converting models to Core ML, you will need to specify the same model version here.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--compute-unit&lt;/code&gt;: Note that the most performant compute unit for this particular implementation may differ across different hardware. &lt;code&gt;CPU_AND_GPU&lt;/code&gt; or &lt;code&gt;CPU_AND_NE&lt;/code&gt; may be faster than &lt;code&gt;ALL&lt;/code&gt;. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#performance-benchmark&#34;&gt;Performance Benchmark&lt;/a&gt; section for further guidance.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--scheduler&lt;/code&gt;: If you would like to experiment with different schedulers, you may specify it here. For available options, please see the help menu. You may also specify a custom number of inference steps by &lt;code&gt;--num-inference-steps&lt;/code&gt; which defaults to 50.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Image Generation with Swift&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click to expand &lt;/summary&gt; &#xA; &lt;h3&gt;&lt;a name=&#34;swift-requirements&#34;&gt;&lt;/a&gt; System Requirements&lt;/h3&gt; &#xA; &lt;p&gt;Building the Swift projects require:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;macOS 13 or newer&lt;/li&gt; &#xA;  &lt;li&gt;Xcode 14.1 or newer with command line tools installed. Please check &lt;a href=&#34;https://developer.apple.com/download/all/?q=xcode&#34;&gt;developer.apple.com&lt;/a&gt; for the latest version.&lt;/li&gt; &#xA;  &lt;li&gt;Core ML models and tokenization resources. Please see &lt;code&gt;--bundle-resources-for-swift-cli&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#converting-models-to-coreml&#34;&gt;Converting Models to Core ML&lt;/a&gt; section above&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;If deploying this model to:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;iPhone &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;iOS 16.2 or newer&lt;/li&gt; &#xA;    &lt;li&gt;iPhone 12 or newer&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;iPad &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;iPadOS 16.2 or newer&lt;/li&gt; &#xA;    &lt;li&gt;M1 or newer&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Mac &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;macOS 13.1 or newer&lt;/li&gt; &#xA;    &lt;li&gt;M1 or newer&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Example CLI Usage&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;swift run StableDiffusionSample &#34;a photo of an astronaut riding a horse on mars&#34; --resource-path &amp;lt;output-mlpackages-directory&amp;gt;/Resources/ --seed 93 --output-path &amp;lt;/path/to/output/image&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The output will be named based on the prompt and random seed: e.g. &lt;code&gt;&amp;lt;/path/to/output/image&amp;gt;/a_photo_of_an_astronaut_riding_a_horse_on_mars.93.final.png&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Please use the &lt;code&gt;--help&lt;/code&gt; flag to learn about batched generation and more.&lt;/p&gt; &#xA; &lt;h3&gt;Example Library Usage&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;import StableDiffusion&#xA;...&#xA;let pipeline = try StableDiffusionPipeline(resourcesAt: resourceURL)&#xA;let image = try pipeline.generateImages(prompt: prompt, seed: seed).first&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Swift Package Details&lt;/h3&gt; &#xA; &lt;p&gt;This Swift package contains two products:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;StableDiffusion&lt;/code&gt; library&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;StableDiffusionSample&lt;/code&gt; command-line tool&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Both of these products require the Core ML models and tokenization resources to be supplied. When specifying resources via a directory path that directory must contain the following:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;TextEncoder.mlmodelc&lt;/code&gt; (text embedding model)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Unet.mlmodelc&lt;/code&gt; or &lt;code&gt;UnetChunk1.mlmodelc&lt;/code&gt; &amp;amp; &lt;code&gt;UnetChunk2.mlmodelc&lt;/code&gt; (denoising autoencoder model)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VAEDecoder.mlmodelc&lt;/code&gt; (image decoder model)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;vocab.json&lt;/code&gt; (tokenizer vocabulary file)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;merges.text&lt;/code&gt; (merges for byte pair encoding file)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Optionally, it may also include the safety checker model that some versions of Stable Diffusion include:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;SafetyChecker.mlmodelc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Note that the chunked version of Unet is checked for first. Only if it is not present will the full &lt;code&gt;Unet.mlmodelc&lt;/code&gt; be loaded. Chunking is required for iOS and iPadOS and not necessary for macOS.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;performance-benchmark&#34;&gt;&lt;/a&gt; Performance Benchmark&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click to expand &lt;/summary&gt; &#xA; &lt;p&gt;Standard &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v1-4&#34;&gt;CompVis/stable-diffusion-v1-4&lt;/a&gt; Benchmark&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Device&lt;/th&gt; &#xA;    &lt;th&gt;&lt;code&gt;--compute-unit&lt;/code&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;code&gt;--attention-implementation&lt;/code&gt;&lt;/th&gt; &#xA;    &lt;th&gt;Latency (seconds)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Mac Studio (M1 Ultra, 64-core GPU)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CPU_AND_GPU&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;ORIGINAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Mac Studio (M1 Ultra, 48-core GPU)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CPU_AND_GPU&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;ORIGINAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;MacBook Pro (M1 Max, 32-core GPU)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CPU_AND_GPU&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;ORIGINAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;MacBook Pro (M1 Max, 24-core GPU)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CPU_AND_GPU&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;ORIGINAL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;MacBook Pro (M1 Pro, 16-core GPU)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;ALL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;SPLIT_EINSUM (default)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;MacBook Pro (M2)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CPU_AND_NE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;SPLIT_EINSUM (default)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;MacBook Pro (M1)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CPU_AND_NE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;SPLIT_EINSUM (default)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;35&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;iPad Pro (5th gen, M1)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;CPU_AND_NE&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;SPLIT_EINSUM (default)&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#important-notes-on-performance-benchmarks&#34;&gt;Important Notes on Performance Benchmarks&lt;/a&gt; section for details.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;important-notes-on-performance-benchmarks&#34;&gt;&lt;/a&gt; Important Notes on Performance Benchmarks&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click to expand &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;This benchmark was conducted by Apple using public beta versions of iOS 16.2, iPadOS 16.2 and macOS 13.1 in November 2022.&lt;/li&gt; &#xA;  &lt;li&gt;The executed program is &lt;code&gt;python_coreml_stable_diffusion.pipeline&lt;/code&gt; for macOS devices and a minimal Swift test app built on the &lt;code&gt;StableDiffusion&lt;/code&gt; Swift package for iOS and iPadOS devices.&lt;/li&gt; &#xA;  &lt;li&gt;The median value across 3 end-to-end executions is reported.&lt;/li&gt; &#xA;  &lt;li&gt;Performance may materially differ across different versions of Stable Diffusion due to architecture changes in the model itself. Each reported number is specific to the model version mentioned in that context.&lt;/li&gt; &#xA;  &lt;li&gt;The image generation procedure follows the standard configuration: 50 inference steps, 512x512 output image resolution, 77 text token sequence length, classifier-free guidance (batch size of 2 for unet).&lt;/li&gt; &#xA;  &lt;li&gt;The actual prompt length does not impact performance because the Core ML model is converted with a static shape that computes the forward pass for all of the 77 elements (&lt;code&gt;tokenizer.model_max_length&lt;/code&gt;) in the text token sequence regardless of the actual length of the input text.&lt;/li&gt; &#xA;  &lt;li&gt;Pipelining across the 4 models is not optimized and these performance numbers are subject to variance under increased system load from other applications. Given these factors, we do not report sub-second variance in latency.&lt;/li&gt; &#xA;  &lt;li&gt;Weights and activations are in float16 precision for both the GPU and the ANE.&lt;/li&gt; &#xA;  &lt;li&gt;The Swift CLI program consumes a peak memory of approximately 2.6GB (without the safety checker), 2.1GB of which is model weights in float16 precision. We applied &lt;a href=&#34;https://coremltools.readme.io/docs/compressing-ml-program-weights#use-affine-quantization&#34;&gt;8-bit weight quantization&lt;/a&gt; to reduce peak memory consumption by approximately 1GB. However, we observed that it had an adverse effect on generated image quality and we rolled it back. We encourage developers to experiment with other advanced weight compression techniques such as &lt;a href=&#34;https://coremltools.readme.io/docs/compressing-ml-program-weights#use-a-lookup-table&#34;&gt;palettization&lt;/a&gt; and/or &lt;a href=&#34;https://coremltools.readme.io/docs/compressing-ml-program-weights#use-sparse-representation&#34;&gt;pruning&lt;/a&gt; which may yield better results.&lt;/li&gt; &#xA;  &lt;li&gt;In the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/performance-benchmark&#34;&gt;benchmark table&lt;/a&gt;, we report the best performing &lt;code&gt;--compute-unit&lt;/code&gt; and &lt;code&gt;--attention-implementation&lt;/code&gt; values per device. The former does not modify the Core ML model and can be applied during runtime. The latter modifies the Core ML model. Note that the best performing compute unit is model version and hardware-specific.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;results-with-different-compute-units&#34;&gt;&lt;/a&gt; Results with Different Compute Units&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click to expand &lt;/summary&gt; &#xA; &lt;p&gt;It is highly probable that there will be slight differences across generated images using different compute units.&lt;/p&gt; &#xA; &lt;p&gt;The following images were generated on an M1 MacBook Pro and macOS 13.1 with the prompt &lt;em&gt;&#34;a photo of an astronaut riding a horse on mars&#34;&lt;/em&gt; using the &lt;a href=&#34;https://huggingface.co/runwayml/stable-diffusion-v1-5&#34;&gt;runwayml/stable-diffusion-v1-5&lt;/a&gt; model version. The random seed was set to 93:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;CPU_AND_NE&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;CPU_AND_GPU&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;ALL&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/assets/a_high_quality_photo_of_an_astronaut_riding_a_horse_in_space/randomSeed_93_computeUnit_CPU_AND_NE_modelVersion_runwayml_stable-diffusion-v1-5.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/assets/a_high_quality_photo_of_an_astronaut_riding_a_horse_in_space/randomSeed_93_computeUnit_CPU_AND_GPU_modelVersion_runwayml_stable-diffusion-v1-5.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/assets/a_high_quality_photo_of_an_astronaut_riding_a_horse_in_space/randomSeed_93_computeUnit_ALL_modelVersion_runwayml_stable-diffusion-v1-5.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;Differences may be less or more pronounced for different inputs. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#faq&#34;&gt;FAQ&lt;/a&gt; Q8 for a detailed explanation.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Click to expand &lt;/summary&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q1: &lt;/b&gt; &lt;code&gt; ERROR: Failed building wheel for tokenizers or error: can&#39;t find Rust compiler &lt;/code&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A1: &lt;/b&gt; Please review this &lt;a href=&#34;https://github.com/huggingface/transformers/issues/2831#issuecomment-592724471&#34;&gt;potential solution&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q2: &lt;/b&gt; &lt;code&gt; RuntimeError: {NSLocalizedDescription = &#34;Error computing NN outputs.&#34; &lt;/code&gt; &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A2: &lt;/b&gt; There are many potential causes for this error. In this context, it is highly likely to be encountered when your system is under increased memory pressure from other applications. Reducing memory utilization of other applications is likely to help alleviate the issue.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q3: &lt;/b&gt; My Mac has 8GB RAM and I am converting models to Core ML using the example command. The process is geting killed because of memory issues. How do I fix this issue? &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A3: &lt;/b&gt; In order to minimize the memory impact of the model conversion process, please execute the following command instead:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m python_coreml_stable_diffusion.torch2coreml --convert-vae-decoder -o &amp;lt;output-mlpackages-directory&amp;gt; &amp;amp;&amp;amp; \&#xA;python -m python_coreml_stable_diffusion.torch2coreml --convert-unet -o &amp;lt;output-mlpackages-directory&amp;gt; &amp;amp;&amp;amp; \&#xA;python -m python_coreml_stable_diffusion.torch2coreml --convert-text-encoder -o &amp;lt;output-mlpackages-directory&amp;gt; &amp;amp;&amp;amp; \&#xA;python -m python_coreml_stable_diffusion.torch2coreml --convert-safety-checker -o &amp;lt;output-mlpackages-directory&amp;gt; &amp;amp;&amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;p&gt;If you need &lt;code&gt;--chunk-unet&lt;/code&gt;, you may do so in yet another independent command which will reuse the previously exported Unet model and simply chunk it in place:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m python_coreml_stable_diffusion.torch2coreml --convert-unet --chunk-unet -o &amp;lt;output-mlpackages-directory&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q4: &lt;/b&gt; My Mac has 8GB RAM, should image generation work on my machine? &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A4: &lt;/b&gt; Yes! Especially the &lt;code&gt;--compute-unit CPU_AND_NE&lt;/code&gt; option should work under reasonable system load from other applications. Note that part of the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#example-results&#34;&gt;Example Results&lt;/a&gt; were generated using an M2 MacBook Air with 8GB RAM.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q5: &lt;/b&gt; Every time I generate an image using the Python pipeline, loading all the Core ML models takes 2-3 minutes. Is this expected? &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A5: &lt;/b&gt; Yes and using the Swift library reduces this to just a few seconds. The reason is that &lt;code&gt;coremltools&lt;/code&gt; loads Core ML models (&lt;code&gt;.mlpackage&lt;/code&gt;) and each model is compiled to be run on the requested compute unit during load time. Because of the size and number of operations of the unet model, it takes around 2-3 minutes to compile it for Neural Engine execution. Other models should take at most a few seconds. Note that &lt;code&gt;coremltools&lt;/code&gt; does not cache the compiled model for later loads so each load takes equally long. In order to benefit from compilation caching, &lt;code&gt;StableDiffusion&lt;/code&gt; Swift package by default relies on compiled Core ML models (&lt;code&gt;.mlmodelc&lt;/code&gt;) which will be compiled down for the requested compute unit upon first load but then the cache will be reused on subsequent loads until it is purged due to lack of use.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q6: &lt;/b&gt; I want to deploy &lt;code&gt;StableDiffusion&lt;/code&gt;, the Swift package, in my mobile app. What should I be aware of?&#34; &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A6: &lt;/b&gt; &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#swift-requirements&#34;&gt;This section&lt;/a&gt; describes the minimum SDK and OS versions as well as the device models supported by this package. In addition to these requirements, for best practice, we recommend testing the package on the device with the least amount of RAM available among your deployment targets. This is due to the fact that &lt;code&gt;StableDiffusion&lt;/code&gt; consumes approximately 2.6GB of peak memory during runtime while using &lt;code&gt;.cpuAndNeuralEngine&lt;/code&gt; (the Swift equivalent of &lt;code&gt;coremltools.ComputeUnit.CPU_AND_NE&lt;/code&gt;). Other compute units may have a higher peak memory consumption so &lt;code&gt;.cpuAndNeuralEngine&lt;/code&gt; is recommended for iOS and iPadOS deployment (Please refer to this &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#swift-requirements&#34;&gt;section&lt;/a&gt; for minimum device model requirements). If your app crashes during image generation, please try adding the &lt;a href=&#34;https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_kernel_increased-memory-limit&#34;&gt;Increased Memory Limit&lt;/a&gt; capability to your Xcode project which should significantly increase your app&#39;s memory limit.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q7: &lt;/b&gt; How do I generate images with different resolutions using the same Core ML models? &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A7: &lt;/b&gt; The current version of &lt;code&gt;python_coreml_stable_diffusion&lt;/code&gt; does not support single-model multi-resolution out of the box. However, developers may fork this project and leverage the &lt;a href=&#34;https://coremltools.readme.io/docs/flexible-inputs&#34;&gt;flexible shapes&lt;/a&gt; support from coremltools to extend the &lt;code&gt;torch2coreml&lt;/code&gt; script by using &lt;code&gt;coremltools.EnumeratedShapes&lt;/code&gt;. Note that, while the &lt;code&gt;text_encoder&lt;/code&gt; is agnostic to the image resolution, the inputs and outputs of &lt;code&gt;vae_decoder&lt;/code&gt; and &lt;code&gt;unet&lt;/code&gt; models are dependent on the desired image resolution.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q8: &lt;/b&gt; Are the Core ML and PyTorch generated images going to be identical? &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A8: &lt;/b&gt; If desired, the generated images across PyTorch and Core ML can be made approximately identical. However, it is not guaranteed by default. There are several factors that might lead to different images across PyTorch and Core ML:&lt;/p&gt; &#xA;  &lt;p&gt;&lt;b&gt; 1. Random Number Generator Behavior &lt;/b&gt;&lt;/p&gt; &#xA;  &lt;p&gt;The main source of potentially different results across PyTorch and Core ML is the Random Number Generator (&lt;a href=&#34;https://en.wikipedia.org/wiki/Random_number_generation&#34;&gt;RNG&lt;/a&gt;) behavior. PyTorch and Numpy have different sources of randomness. &lt;code&gt;python_coreml_stable_diffusion&lt;/code&gt; generally relies on Numpy for RNG (e.g. latents initialization) and &lt;code&gt;StableDiffusion&lt;/code&gt; Swift Library reproduces this RNG behavior. However, PyTorch-based pipelines such as Hugging Face &lt;code&gt;diffusers&lt;/code&gt; relies on PyTorch&#39;s RNG behavior.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;b&gt; 2. PyTorch &lt;/b&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;em&gt;&#34;Completely reproducible results are not guaranteed across PyTorch releases, individual commits, or different platforms. Furthermore, results may not be reproducible between CPU and GPU executions, even when using identical seeds.&#34;&lt;/em&gt; (&lt;a href=&#34;https://pytorch.org/docs/stable/notes/randomness.html#reproducibility&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &#xA;  &lt;p&gt;&lt;b&gt; 3. Model Function Drift During Conversion &lt;/b&gt;&lt;/p&gt; &#xA;  &lt;p&gt;The difference in outputs across corresponding PyTorch and Core ML models is a potential cause. The signal integrity is tested during the conversion process (enabled via &lt;code&gt;--check-output-correctness&lt;/code&gt; argument to &lt;code&gt;python_coreml_stable_diffusion.torch2coreml&lt;/code&gt;) and it is verified to be above a minimum &lt;a href=&#34;https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio&#34;&gt;PSNR&lt;/a&gt; value as tested on random inputs. Note that this is simply a sanity check and does not guarantee this minimum PSNR across all possible inputs. Furthermore, the results are not guaranteed to be identical when executing the same Core ML models across different compute units. This is not expected to be a major source of difference as the sample visual results indicate in &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-stable-diffusion/main/#results-with-different-compute-units&#34;&gt;this section&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;&lt;b&gt; 4. Weights and Activations Data Type &lt;/b&gt;&lt;/p&gt; &#xA;  &lt;p&gt;When quantizing models from float32 to lower-precision data types such as float16, the generated images are &lt;a href=&#34;https://lambdalabs.com/blog/inference-benchmark-stable-diffusion&#34;&gt;known to vary slightly&lt;/a&gt; in semantics even when using the same PyTorch model. Core ML models generated by coremltools have float16 weights and activations by default &lt;a href=&#34;https://github.com/apple/coremltools/raw/main/coremltools/converters/_converters_entry.py#L256&#34;&gt;unless explicitly overriden&lt;/a&gt;. This is not expected to be a major source of difference.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; &lt;b&gt; Q9: &lt;/b&gt; The model files are very large, how do I avoid a large binary for my App? &lt;/summary&gt; &#xA;  &lt;p&gt;&lt;b&gt; A9: &lt;/b&gt; The recommended option is to prompt the user to download these assets upon first launch of the app. This keeps the app binary size independent of the Core ML models being deployed. Disclosing the size of the download to the user is extremely important as there could be data charges or storage impact that the user might not be comfortable with.&lt;/p&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>wimglenn/advent-of-code-data</title>
    <updated>2022-12-04T01:36:43Z</updated>
    <id>tag:github.com,2022-12-04:/wimglenn/advent-of-code-data</id>
    <link href="https://github.com/wimglenn/advent-of-code-data" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get your Advent of Code data with a single import statement&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Advent of Code data&lt;/h1&gt; &#xA;&lt;p&gt;|pyversions|_ |pypi|_ |womm|_ |actions|_ |codecov|_&lt;/p&gt; &#xA;&lt;p&gt;.. |pyversions| image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/advent-of-code-data.svg&#34;&gt;https://img.shields.io/pypi/pyversions/advent-of-code-data.svg&lt;/a&gt; .. _pyversions:&lt;/p&gt; &#xA;&lt;p&gt;.. |pypi| image:: &lt;a href=&#34;https://img.shields.io/pypi/v/advent-of-code-data.svg&#34;&gt;https://img.shields.io/pypi/v/advent-of-code-data.svg&lt;/a&gt; .. _pypi: &lt;a href=&#34;https://pypi.org/project/advent-of-code-data/&#34;&gt;https://pypi.org/project/advent-of-code-data/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |womm| image:: &lt;a href=&#34;https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg&#34;&gt;https://cdn.rawgit.com/nikku/works-on-my-machine/v0.2.0/badge.svg&lt;/a&gt; .. _womm: &lt;a href=&#34;https://github.com/nikku/works-on-my-machine&#34;&gt;https://github.com/nikku/works-on-my-machine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |actions| image:: &lt;a href=&#34;https://github.com/wimglenn/advent-of-code-data/actions/workflows/tests.yml/badge.svg&#34;&gt;https://github.com/wimglenn/advent-of-code-data/actions/workflows/tests.yml/badge.svg&lt;/a&gt; .. _actions: &lt;a href=&#34;https://github.com/wimglenn/advent-of-code-data/actions/workflows/tests.yml&#34;&gt;https://github.com/wimglenn/advent-of-code-data/actions/workflows/tests.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |codecov| image:: &lt;a href=&#34;https://codecov.io/gh/wimglenn/advent-of-code-data/branch/main/graph/badge.svg&#34;&gt;https://codecov.io/gh/wimglenn/advent-of-code-data/branch/main/graph/badge.svg&lt;/a&gt; .. _codecov: &lt;a href=&#34;https://codecov.io/gh/wimglenn/advent-of-code-data&#34;&gt;https://codecov.io/gh/wimglenn/advent-of-code-data&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get your puzzle data with a single import statement:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;p&gt;from aocd import data&lt;/p&gt; &#xA;&lt;p&gt;Might be useful for lazy Pythonistas and speedhackers.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d just like to print or keep your own input files, there&#39;s a shell entry point for that:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;aocd &amp;gt; input.txt # saves today&#39;s data aocd 13 2018 &amp;gt; day13.txt # save some other day&#39;s data&lt;/p&gt; &#xA;&lt;p&gt;There are currently two convenience transforms (maybe more to come later):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;p&gt;from aocd import lines # like data.splitlines() from aocd import numbers # uses regex pattern -?\d+ to extract integers from data&lt;/p&gt; &#xA;&lt;p&gt;If all that sounds too magical, there is a simple getter function to just return your raw data.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;from aocd import get_data get_data(day=24, year=2015) &#39;1\n2\n3\n7\n11\n13\n17\n19\n23\n31...&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;aocd&lt;/code&gt; will cache puzzle inputs and answers (including incorrect guesses) clientside, to save unnecessary requests to the server.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Install with pip&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;pip install advent-of-code-data&lt;/p&gt; &#xA;&lt;p&gt;If you want to use this within a Jupyter notebook, there are some extra deps:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;pip install &#39;advent-of-code-data[nb]&#39;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Puzzle inputs differ by user.&lt;/strong&gt; So export your session ID, for example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;export AOC_SESSION=cafef00db01dfaceba5eba11deadbeef&lt;/p&gt; &#xA;&lt;p&gt;This is a cookie which is set when you login to AoC. You can find it with your browser inspector. If you&#39;re hacking on AoC at all you probably already know these kind of tricks, but if you need help with that part then you can &lt;code&gt;look here &amp;lt;https://github.com/wimglenn/advent-of-code/issues/1&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you don&#39;t like the env var, you could also keep your token(s) in files. By default the location is &lt;code&gt;~/.config/aocd/token&lt;/code&gt;. Set the &lt;code&gt;AOCD_DIR&lt;/code&gt; environment variable to some existing directory if you wish to use another location to store token(s).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;New in version 0.9.0.&lt;/em&gt; There&#39;s a utility script &lt;code&gt;aocd-token&lt;/code&gt; which attempts to find session tokens from your browser&#39;s cookie storage. This feature is experimental and requires you to additionally install the package &lt;code&gt;browser-cookie3&lt;/code&gt;. Only Chrome and Firefox browsers are currently supported. On macOS, you may get an authentication dialog requesting permission, since Python is attempting to read browser storage files. This is expected, the script &lt;em&gt;is&lt;/em&gt; actually scraping those private files to access AoC session token(s).&lt;/p&gt; &#xA;&lt;p&gt;If this utility script was able to locate your token, you can save it to file with:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;$ aocd-token &amp;gt; ~/.config/aocd/token&lt;/p&gt; &#xA;&lt;h2&gt;Automated submission&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;New in version 0.4.0.&lt;/em&gt; Basic use:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;p&gt;from aocd import submit submit(my_answer, part=&#34;a&#34;, day=25, year=2017)&lt;/p&gt; &#xA;&lt;p&gt;Note that the same filename introspection of year/day also works for automated submission. There&#39;s also introspection of the &#34;level&#34;, i.e. part a or part b, aocd can automatically determine if you have already completed part a or not and submit your answer for the correct part accordingly. In this case, just use:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;p&gt;from aocd import submit submit(my_answer)&lt;/p&gt; &#xA;&lt;p&gt;The response message from AoC will be printed in the terminal. If you gave the right answer, then the puzzle will be refreshed in your web browser (so you can read the instructions for the next part, for example). &lt;strong&gt;Proceed with caution!&lt;/strong&gt; If you submit wrong guesses, your user &lt;strong&gt;WILL&lt;/strong&gt; get rate-limited by Eric, so don&#39;t call submit until you&#39;re fairly confident you have a correct answer!&lt;/p&gt; &#xA;&lt;h2&gt;OOP-style interfaces&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;New in version 0.8.0.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Input data is via regular attribute access. Example usage:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from aocd.models import Puzzle&#xA;&amp;gt;&amp;gt;&amp;gt; puzzle = Puzzle(year=2017, day=20)&#xA;&amp;gt;&amp;gt;&amp;gt; puzzle&#xA;&amp;lt;Puzzle(2017, 20) at 0x107322978 - Particle Swarm&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; puzzle.input_data&#xA;&#39;p=&amp;lt;-1027,-979,-188&amp;gt;, v=&amp;lt;7,60,66&amp;gt;, a=&amp;lt;9,1,-7&amp;gt;\np=&amp;lt;-1846,-1539,-1147&amp;gt;, v=&amp;lt;88,145,67&amp;gt;, a=&amp;lt;6,-5,2&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Submitting answers is also by regular attribute access. Any incorrect answers you submitted are remembered, and aocd will prevent you from attempting to submit the same incorrect value twice:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; puzzle.answer_a = 299&#xA;That&#39;s not the right answer; your answer is too high. If you&#39;re stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]&#xA;&amp;gt;&amp;gt;&amp;gt; puzzle.answer_a = 299&#xA;aocd will not submit that answer again. You&#39;ve previously guessed 299 and the server responded:&#xA;That&#39;s not the right answer; your answer is too high. If you&#39;re stuck, there are some general tips on the about page, or you can ask for hints on the subreddit. Please wait one minute before trying again. (You guessed 299.) [Return to Day 20]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your own solutions can be executed by writing and using an &lt;code&gt;entry-point &amp;lt;https://packaging.python.org/specifications/entry-points/&amp;gt;&lt;/code&gt;_ into your code, registered in the group &lt;code&gt;&#34;adventofcode.user&#34;&lt;/code&gt;. Your entry-point should resolve to a callable, and it will be called with three keyword arguments: &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt;. For example, &lt;code&gt;my entry-point is called &#34;wim&#34; &amp;lt;https://github.com/wimglenn/advent-of-code-wim/blob/d033366c16fba50e413f2fa7df32e8a0eac9542f/setup.py#L36&amp;gt;&lt;/code&gt;_ and running against &lt;code&gt;my code &amp;lt;https://github.com/wimglenn/advent-of-code-wim/blob/main/aoc_wim/__init__.py&amp;gt;&lt;/code&gt;_ (after &lt;code&gt;pip install advent-of-code-wim&lt;/code&gt;) would be like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; puzzle = Puzzle(year=2018, day=10)&#xA;&amp;gt;&amp;gt;&amp;gt; puzzle.solve_for(&#34;wim&#34;)&#xA;(&#39;XLZAKBGZ&#39;, &#39;10656&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;ve never written a plugin before, see &lt;a href=&#34;https://entrypoints.readthedocs.io/&#34;&gt;https://entrypoints.readthedocs.io/&lt;/a&gt; for more info about plugin systems based on Python entry-points.&lt;/p&gt; &#xA;&lt;h2&gt;Verify your code against multiple different inputs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;New in version 0.8.0.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ever tried running your code against other people&#39;s inputs? AoC is full of tricky edge cases. You may find that sometimes you&#39;re only getting the right answer by luck, and your code will fail on some other dataset. Using aocd, you can collect a few different auth tokens for each of your accounts (github/google/reddit/twitter) and verify your answers across multiple datasets.&lt;/p&gt; &#xA;&lt;p&gt;To see an example of how to setup the entry-point for your code, look at &lt;code&gt;advent-of-code-sample &amp;lt;https://github.com/wimglenn/advent-of-code-sample&amp;gt;&lt;/code&gt;_ for some inspiration. After dumping a bunch of session tokens into &lt;code&gt;~/.config/aocd/tokens.json&lt;/code&gt; you could do something like this by running the &lt;code&gt;aoc&lt;/code&gt; console script:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/6615374/52138567-26e09f80-2613-11e9-8eaf-c42757bc9b86.png&#34;&gt;https://user-images.githubusercontent.com/6615374/52138567-26e09f80-2613-11e9-8eaf-c42757bc9b86.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As you can see above, I actually had incorrect code for &lt;code&gt;2017 Day 20: Particle Swarm &amp;lt;https://adventofcode.com/2017/day/20&amp;gt;&lt;/code&gt;&lt;em&gt;, but that &lt;code&gt;bug &amp;lt;https://github.com/wimglenn/advent-of-code-wim/commit/31e454270001c6d06b46014fe5dafd03e29507b8&amp;gt;&lt;/code&gt;&lt;/em&gt; only showed up for the google token&#39;s dataset. Whoops. Also, it looks like my algorithm for &lt;code&gt;2017 Day 13: Packet Scanners &amp;lt;https://adventofcode.com/2017/day/13&amp;gt;&lt;/code&gt;_ was kinda garbage. Too slow. According to &lt;code&gt;AoC FAQ &amp;lt;https://adventofcode.com/about&amp;gt;&lt;/code&gt;_:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;every problem has a solution that completes in at most 15 seconds on ten-year-old hardware&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;By the way, the &lt;code&gt;aoc&lt;/code&gt; runner will kill your code if it takes more than 60 seconds, you can increase/decrease this by passing a command-line option, e.g. &lt;code&gt;--timeout=120&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;New in version 1.1.0:&lt;/em&gt; Added option &lt;code&gt;--quiet&lt;/code&gt; to suppress any output from plugins so it doesn&#39;t mess up the &lt;code&gt;aoc&lt;/code&gt; runner&#39;s display.&lt;/p&gt; &#xA;&lt;h2&gt;How does this library work?&lt;/h2&gt; &#xA;&lt;p&gt;It will automatically get today&#39;s data at import time, if used within the interactive interpreter. Otherwise, the date is found by introspection of the path and file name from which &lt;code&gt;aocd&lt;/code&gt; module was imported.&lt;/p&gt; &#xA;&lt;p&gt;This means your filenames should be something sensible. The examples below should all parse correctly, because they have digits in the path that are unambiguously recognisable as AoC years (2015+) or days (1-25).&lt;/p&gt; &#xA;&lt;p&gt;.. code-block::&lt;/p&gt; &#xA;&lt;p&gt;q03.py xmas_problem_2016_25b_dawg.py ~/src/aoc/2015/p8.py&lt;/p&gt; &#xA;&lt;p&gt;A filename like &lt;code&gt;problem_one.py&lt;/code&gt; will not work, so don&#39;t do that. If you don&#39;t like weird frame hacks, just use the &lt;code&gt;aocd.get_data()&lt;/code&gt; function instead and have a nice day!&lt;/p&gt; &#xA;&lt;h2&gt;Cache invalidation?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;aocd&lt;/code&gt; saves puzzle inputs, answers, names, and your bad guesses to avoid hitting the AoC servers any more often than strictly necessary (this also speeds things up). All data is persisted in plain text files under &lt;code&gt;~/.config/aocd&lt;/code&gt;. To remove any caches, you may simply delete whatever files you want under that directory tree. If you&#39;d prefer to use a different path, then export an &lt;code&gt;AOCD_DIR&lt;/code&gt; environment variable with the desired location.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;New in version 1.1.0:&lt;/em&gt; By default, your token files are also stored under &lt;code&gt;~/.config/aocd&lt;/code&gt;. If you want the token(s) and cached inputs/answers to exist in separate locations, you can set the environment variable &lt;code&gt;AOCD_CONFIG_DIR&lt;/code&gt; to specify a different location for the token(s).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openai/gpt-2</title>
    <updated>2022-12-04T01:36:43Z</updated>
    <id>tag:github.com,2022-12-04:/openai/gpt-2</id>
    <link href="https://github.com/openai/gpt-2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code for the paper &#34;Language Models are Unsupervised Multitask Learners&#34;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Status:&lt;/strong&gt; Archive (code is provided as-is, no updates expected)&lt;/p&gt; &#xA;&lt;h1&gt;gpt-2&lt;/h1&gt; &#xA;&lt;p&gt;Code and models from the paper &lt;a href=&#34;https://d4mucfpksywv.cloudfront.net/better-language-models/language-models.pdf&#34;&gt;&#34;Language Models are Unsupervised Multitask Learners&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can read about GPT-2 and its staged release in our &lt;a href=&#34;https://blog.openai.com/better-language-models/&#34;&gt;original blog post&lt;/a&gt;, &lt;a href=&#34;https://openai.com/blog/gpt-2-6-month-follow-up/&#34;&gt;6 month follow-up post&lt;/a&gt;, and &lt;a href=&#34;https://www.openai.com/blog/gpt-2-1-5b-release/&#34;&gt;final post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have also &lt;a href=&#34;https://github.com/openai/gpt-2-output-dataset&#34;&gt;released a dataset&lt;/a&gt; for researchers to study their behaviors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; &lt;em&gt;Note that our original parameter counts were wrong due to an error (in our previous blog posts and paper). Thus you may have seen small referred to as 117M and medium referred to as 345M.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This repository is meant to be a starting point for researchers and engineers to experiment with GPT-2.&lt;/p&gt; &#xA;&lt;p&gt;For basic information, see our &lt;a href=&#34;https://raw.githubusercontent.com/openai/gpt-2/master/model_card.md&#34;&gt;model card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Some caveats&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPT-2 models&#39; robustness and worst case behaviors are not well-understood. As with any machine-learned model, carefully evaluate GPT-2 for your use case, especially if used without fine-tuning or in safety-critical applications where reliability is important.&lt;/li&gt; &#xA; &lt;li&gt;The dataset our GPT-2 models were trained on contains many texts with &lt;a href=&#34;https://twitter.com/TomerUllman/status/1101485289720242177&#34;&gt;biases&lt;/a&gt; and factual inaccuracies, and thus GPT-2 models are likely to be biased and inaccurate as well.&lt;/li&gt; &#xA; &lt;li&gt;To avoid having samples mistaken as human-written, we recommend clearly labeling samples as synthetic before wide dissemination. Our models are often incoherent or inaccurate in subtle ways, which takes more than a quick read for a human to notice.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Work with us&lt;/h3&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;mailto:languagequestions@openai.com&#34;&gt;let us know&lt;/a&gt; if you’re doing interesting research with or working on applications of GPT-2! We’re especially interested in hearing from and potentially working with those who are studying&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Potential malicious use cases and defenses against them (e.g. the detectability of synthetic text)&lt;/li&gt; &#xA; &lt;li&gt;The extent of problematic content (e.g. bias) being baked into the models and effective mitigations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openai/gpt-2/master/DEVELOPERS.md&#34;&gt;DEVELOPERS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/openai/gpt-2/master/CONTRIBUTORS.md&#34;&gt;CONTRIBUTORS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Please use the following bibtex entry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{radford2019language,&#xA;  title={Language Models are Unsupervised Multitask Learners},&#xA;  author={Radford, Alec and Wu, Jeff and Child, Rewon and Luan, David and Amodei, Dario and Sutskever, Ilya},&#xA;  year={2019}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;p&gt;We may release code for evaluating the models on various benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;We are still considering release of the larger models.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openai/gpt-2/master/LICENSE&#34;&gt;Modified MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>