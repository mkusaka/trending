<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-05T01:35:29Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pydantic/pydantic-ai</title>
    <updated>2024-12-05T01:35:29Z</updated>
    <id>tag:github.com,2024-12-05:/pydantic/pydantic-ai</id>
    <link href="https://github.com/pydantic/pydantic-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Agent Framework / shim to use Pydantic with LLMs&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://ai.pydantic.dev/&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://ai.pydantic.dev/img/pydantic-ai-dark.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://ai.pydantic.dev/img/pydantic-ai-light.svg?sanitize=true&#34; alt=&#34;PydanticAI&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;em&gt;Agent Framework / shim to use Pydantic with LLMs&lt;/em&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml/badge.svg?event=push&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://coverage-badge.samuelcolvin.workers.dev/redirect/pydantic/pydantic-ai&#34;&gt;&lt;img src=&#34;https://coverage-badge.samuelcolvin.workers.dev/pydantic/pydantic-ai.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://pypi.python.org/pypi/pydantic-ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pydantic-ai.svg?sanitize=true&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/pydantic/pydantic-ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/pydantic-ai.svg?sanitize=true&#34; alt=&#34;versions&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/pydantic/pydantic-ai/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/pydantic/pydantic-ai.svg?v&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://ai.pydantic.dev/&#34;&gt;ai.pydantic.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;When I first found FastAPI, I got it immediately. I was excited to find something so innovative and ergonomic built on Pydantic.&lt;/p&gt; &#xA;&lt;p&gt;Virtually every Agent Framework and LLM library in Python uses Pydantic, but when we began to use LLMs in &lt;a href=&#34;https://pydantic.dev/logfire&#34;&gt;Pydantic Logfire&lt;/a&gt;, I couldn&#39;t find anything that gave me the same feeling.&lt;/p&gt; &#xA;&lt;p&gt;PydanticAI is a Python Agent Framework designed to make it less painful to build production grade applications with Generative AI.&lt;/p&gt; &#xA;&lt;h2&gt;Why use PydanticAI&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built by the team behind Pydantic (the validation layer of the OpenAI SDK, the Anthropic SDK, LangChain, LlamaIndex, AutoGPT, Transformers, CrewAI, Instructor and many more)&lt;/li&gt; &#xA; &lt;li&gt;Model-agnostic — currently OpenAI, Gemini, and Groq are supported. And there is a simple interface to implement support for other models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/agents/#static-type-checking&#34;&gt;Type-safe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Control flow and agent composition is done with vanilla Python, allowing you to make use of the same Python development best practices you&#39;d use in any other (non-AI) project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/results/#structured-result-validation&#34;&gt;Structured response&lt;/a&gt; validation with Pydantic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/results/#streamed-results&#34;&gt;Streamed responses&lt;/a&gt;, including validation of streamed &lt;em&gt;structured&lt;/em&gt; responses with Pydantic&lt;/li&gt; &#xA; &lt;li&gt;Novel, type-safe &lt;a href=&#34;https://ai.pydantic.dev/dependencies/&#34;&gt;dependency injection system&lt;/a&gt;, useful for testing and eval-driven iterative development&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ai.pydantic.dev/logfire/&#34;&gt;Logfire integration&lt;/a&gt; for debugging and monitoring the performance and general behavior of your LLM-powered application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;In Beta!&lt;/h2&gt; &#xA;&lt;p&gt;PydanticAI is in early beta, the API is still subject to change and there&#39;s a lot more to do. &lt;a href=&#34;https://github.com/pydantic/pydantic-ai/issues&#34;&gt;Feedback&lt;/a&gt; is very welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Hello World Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a minimal example of PydanticAI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from pydantic_ai import Agent&#xA;&#xA;# Define a very simple agent including the model to use, you can also set the model when running the agent.&#xA;agent = Agent(&#xA;    &#39;gemini-1.5-flash&#39;,&#xA;    # Register a static system prompt using a keyword argument to the agent.&#xA;    # For more complex dynamically-generated system prompts, see the example below.&#xA;    system_prompt=&#39;Be concise, reply with one sentence.&#39;,&#xA;)&#xA;&#xA;# Run the agent synchronously, conducting a conversation with the LLM.&#xA;# Here the exchange should be very short: PydanticAI will send the system prompt and the user query to the LLM,&#xA;# the model will return a text response. See below for a more complex run.&#xA;result = agent.run_sync(&#39;Where does &#34;hello world&#34; come from?&#39;)&#xA;print(result.data)&#xA;&#34;&#34;&#34;&#xA;The first known use of &#34;hello, world&#34; was in a 1974 textbook about the C programming language.&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(This example is complete, it can be run &#34;as is&#34;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Not very interesting yet, but we can easily add &#34;tools&#34;, dynamic system prompts, and structured responses to build more powerful agents.&lt;/p&gt; &#xA;&lt;h2&gt;Tools &amp;amp; Dependency Injection Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is a concise example using PydanticAI to build a support agent for a bank:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;(Better documented example &lt;a href=&#34;https://ai.pydantic.dev/#tools-dependency-injection-example&#34;&gt;in the docs&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-py&#34;&gt;from dataclasses import dataclass&#xA;&#xA;from pydantic import BaseModel, Field&#xA;from pydantic_ai import Agent, RunContext&#xA;&#xA;from bank_database import DatabaseConn&#xA;&#xA;&#xA;# SupportDependencies is used to pass data, connections, and logic into the model that will be needed when running&#xA;# system prompt and tool functions. Dependency injection provides a type-safe way to customise the behavior of your agents.&#xA;@dataclass&#xA;class SupportDependencies:&#xA;    customer_id: int&#xA;    db: DatabaseConn&#xA;&#xA;&#xA;# This pydantic model defines the structure of the result returned by the agent.&#xA;class SupportResult(BaseModel):&#xA;    support_advice: str = Field(description=&#39;Advice returned to the customer&#39;)&#xA;    block_card: bool = Field(description=&#34;Whether to block the customer&#39;s card&#34;)&#xA;    risk: int = Field(description=&#39;Risk level of query&#39;, ge=0, le=10)&#xA;&#xA;&#xA;# This agent will act as first-tier support in a bank.&#xA;# Agents are generic in the type of dependencies they accept and the type of result they return.&#xA;# In this case, the support agent has type `Agent[SupportDependencies, SupportResult]`.&#xA;support_agent = Agent(&#xA;    &#39;openai:gpt-4o&#39;,&#xA;    deps_type=SupportDependencies,&#xA;    # The response from the agent will, be guaranteed to be a SupportResult,&#xA;    # if validation fails the agent is prompted to try again.&#xA;    result_type=SupportResult,&#xA;    system_prompt=(&#xA;        &#39;You are a support agent in our bank, give the &#39;&#xA;        &#39;customer support and judge the risk level of their query.&#39;&#xA;    ),&#xA;)&#xA;&#xA;&#xA;# Dynamic system prompts can can make use of dependency injection.&#xA;# Dependencies are carried via the `RunContext` argument, which is parameterized with the `deps_type` from above.&#xA;# If the type annotation here is wrong, static type checkers will catch it.&#xA;@support_agent.system_prompt&#xA;async def add_customer_name(ctx: RunContext[SupportDependencies]) -&amp;gt; str:&#xA;    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)&#xA;    return f&#34;The customer&#39;s name is {customer_name!r}&#34;&#xA;&#xA;&#xA;# `tool` let you register functions which the LLM may call while responding to a user.&#xA;# Again, dependencies are carried via `RunContext`, any other arguments become the tool schema passed to the LLM.&#xA;# Pydantic is used to validate these arguments, and errors are passed back to the LLM so it can retry.&#xA;@support_agent.tool&#xA;async def customer_balance(&#xA;    ctx: RunContext[SupportDependencies], include_pending: bool&#xA;) -&amp;gt; float:&#xA;    &#34;&#34;&#34;Returns the customer&#39;s current account balance.&#34;&#34;&#34;&#xA;    # The docstring of a tool is also passed to the LLM as the description of the tool.&#xA;    # Parameter descriptions are extracted from the docstring and added to the parameter schema sent to the LLM.&#xA;    balance = await ctx.deps.db.customer_balance(&#xA;        id=ctx.deps.customer_id,&#xA;        include_pending=include_pending,&#xA;    )&#xA;    return balance&#xA;&#xA;&#xA;...  # In a real use case, you&#39;d add more tools and a longer system prompt&#xA;&#xA;&#xA;async def main():&#xA;    deps = SupportDependencies(customer_id=123, db=DatabaseConn())&#xA;    # Run the agent asynchronously, conducting a conversation with the LLM until a final response is reached.&#xA;    # Even in this fairly simple case, the agent will exchange multiple messages with the LLM as tools are called to retrieve a result.&#xA;    result = await support_agent.run(&#39;What is my balance?&#39;, deps=deps)&#xA;    # The result will be validated with Pydantic to guarantee it is a `SupportResult`, since the agent is generic,&#xA;    # it&#39;ll also be typed as a `SupportResult` to aid with static type checking.&#xA;    print(result.data)&#xA;    &#34;&#34;&#34;&#xA;    support_advice=&#39;Hello John, your current account balance, including pending transactions, is $123.45.&#39; block_card=False risk=1&#xA;    &#34;&#34;&#34;&#xA;&#xA;    result = await support_agent.run(&#39;I just lost my card!&#39;, deps=deps)&#xA;    print(result.data)&#xA;    &#34;&#34;&#34;&#xA;    support_advice=&#34;I&#39;m sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions.&#34; block_card=True risk=8&#xA;    &#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;To try PydanticAI yourself, follow the instructions &lt;a href=&#34;https://ai.pydantic.dev/examples/&#34;&gt;in the examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://ai.pydantic.dev/agents/&#34;&gt;docs&lt;/a&gt; to learn more about building applications with PydanticAI.&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://ai.pydantic.dev/api/agent/&#34;&gt;API Reference&lt;/a&gt; to understand PydanticAI&#39;s interface.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zenml-io/zenml</title>
    <updated>2024-12-05T01:35:29Z</updated>
    <id>tag:github.com,2024-12-05:/zenml-io/zenml</id>
    <link href="https://github.com/zenml-io/zenml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZenML 🙏: The bridge between ML and Ops. https://zenml.io.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img referrerpolicy=&#34;no-referrer-when-downgrade&#34; src=&#34;https://static.scarf.sh/a.png?x-pxid=0fcbab94-8fbe-4a38-93e8-c2348450a42e&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;Connecting data science teams seamlessly to cloud infrastructure. &lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- PROJECT SHIELDS --&gt; &#xA;&lt;!--&#xA;*** I&#39;m using markdown &#34;reference style&#34; links for readability.&#xA;*** Reference links are enclosed in brackets [ ] instead of parentheses ( ).&#xA;*** See the bottom of this document for the declaration of the reference variables&#xA;*** for contributors-url, forks-url, etc. This is an optional, concise syntax you may use.&#xA;*** https://www.markdownguide.org/basic-syntax/#reference-style-links&#xA;--&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- PROJECT LOGO --&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://zenml.io&#34;&gt; &lt;img alt=&#34;ZenML Logo&#34; src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/header.png&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/zenml/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/zenml?color=281158&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/zenml/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/zenml?color=361776&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/zenml/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/zenml?color=431D93&#34; alt=&#34;PyPi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zenml-io/zenml/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/zenml-io/zenml?color=7A3EF4&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zenml-io/zenml/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/zenml-io/zenml?color=9565F6&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!-- [![Build][build-shield]][build-url] --&gt; &#xA; &lt;!-- [![CodeCov][codecov-shield]][codecov-url] --&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- MARKDOWN LINKS &amp; IMAGES --&gt; &#xA;&lt;!-- https://www.markdownguide.org/basic-syntax/#reference-style-links --&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;⭐️ Show Your Support&lt;/h2&gt; &#xA;&lt;p&gt;If you find ZenML helpful or interesting, please consider giving us a star on GitHub. Your support helps promote the project and lets others know that it&#39;s worth checking out.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your support! 🌟&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zenml-io/zenml?style=social&#34; alt=&#34;Star this project&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤸 Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/zenml-io/zenml/blob/main/examples/quickstart/quickstart.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.zenml.io/getting-started/installation&#34;&gt;Install ZenML&lt;/a&gt; via &lt;a href=&#34;https://pypi.org/project/zenml/&#34;&gt;PyPI&lt;/a&gt;. Python 3.9 - 3.12 is required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#34;zenml[server]&#34; notebook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a tour with the guided quickstart by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zenml go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🪄 Simple, integrated, End-to-end MLOps&lt;/h2&gt; &#xA;&lt;h3&gt;Create machine learning pipelines with minimal code changes&lt;/h3&gt; &#xA;&lt;p&gt;ZenML is a MLOps framework intended for data scientists or ML engineers looking to standardize machine learning practices. Just add &lt;code&gt;@step&lt;/code&gt; and &lt;code&gt;@pipeline&lt;/code&gt; to your existing Python functions to get going. Here is a toy example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from zenml import pipeline, step&#xA;&#xA;@step  # Just add this decorator&#xA;def load_data() -&amp;gt; dict:&#xA;    training_data = [[1, 2], [3, 4], [5, 6]]&#xA;    labels = [0, 1, 0]&#xA;    return {&#39;features&#39;: training_data, &#39;labels&#39;: labels}&#xA;&#xA;@step&#xA;def train_model(data: dict) -&amp;gt; None:&#xA;    total_features = sum(map(sum, data[&#39;features&#39;]))&#xA;    total_labels = sum(data[&#39;labels&#39;])&#xA;    &#xA;    print(f&#34;Trained model using {len(data[&#39;features&#39;])} data points. &#34;&#xA;          f&#34;Feature sum is {total_features}, label sum is {total_labels}&#34;)&#xA;&#xA;@pipeline  # This function combines steps together &#xA;def simple_ml_pipeline():&#xA;    dataset = load_data()&#xA;    train_model(dataset)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    run = simple_ml_pipeline()  # call this to run the pipeline&#xA;   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/readme_basic_pipeline.gif&#34; alt=&#34;Running a ZenML pipeline&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Easily provision an MLOps stack or reuse your existing infrastructure&lt;/h3&gt; &#xA;&lt;p&gt;The framework is a gentle entry point for practitioners to build complex ML pipelines with little knowledge required of the underlying infrastructure complexity. ZenML pipelines can be run on AWS, GCP, Azure, Airflow, Kubeflow and even on Kubernetes without having to change any code or know underlying internals.&lt;/p&gt; &#xA;&lt;p&gt;ZenML provides different features to aid people to get started quickly on a remote setting as well. If you want to deploy a remote stack from scratch on your selected cloud provider, you can use the 1-click deployment feature either through the dashboard:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/one-click-deployment.gif&#34; alt=&#34;Running a ZenML pipeline&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or, through our CLI command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zenml stack deploy --provider aws&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, if the necessary pieces of infrastructure is already deployed, you can register a cloud stack seamlessly through the stack wizard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zenml stack register &amp;lt;STACK_NAME&amp;gt; --provider aws&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://docs.zenml.io/user-guide/production-guide/understand-stacks&#34;&gt;ZenML stacks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Run workloads easily on your production infrastructure&lt;/h3&gt; &#xA;&lt;p&gt;Once you have your MLOps stack configured, you can easily run workloads on it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zenml stack set &amp;lt;STACK_NAME&amp;gt;&#xA;python run.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from zenml.config import ResourceSettings, DockerSettings&#xA;&#xA;@step(&#xA;  settings={&#xA;    &#34;resources&#34;: ResourceSettings(memory=&#34;16GB&#34;, gpu_count=&#34;1&#34;, cpu_count=&#34;8&#34;),&#xA;    &#34;docker&#34;: DockerSettings(parent_image=&#34;pytorch/pytorch:1.12.1-cuda11.3-cudnn8-runtime&#34;)&#xA;  }&#xA;)&#xA;def training(...):&#xA;&#x9;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/readme_compute.gif&#34; alt=&#34;Workloads with ZenML&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Track models, pipeline, and artifacts&lt;/h3&gt; &#xA;&lt;p&gt;Create a complete lineage of who, where, and what data and models are produced.&lt;/p&gt; &#xA;&lt;p&gt;You’ll be able to find out who produced which model, at what time, with which data, and on which version of the code. This guarantees full reproducibility and auditability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from zenml import Model&#xA;&#xA;@step(model=Model(name=&#34;classification&#34;))&#xA;def trainer(training_df: pd.DataFrame) -&amp;gt; Annotated[&#34;model&#34;, torch.nn.Module]:&#xA;&#x9;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/readme_mcp.gif&#34; alt=&#34;Exploring ZenML Models&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Purpose built for machine learning with integration to you favorite tools&lt;/h3&gt; &#xA;&lt;p&gt;While ZenML brings a lot of value of the box, it also integrates into your existing tooling and infrastructure without you having to be locked in.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from bentoml._internal.bento import bento&#xA;&#xA;@step(on_failure=alert_slack, experiment_tracker=&#34;mlflow&#34;)&#xA;def train_and_deploy(training_df: pd.DataFrame) -&amp;gt; bento.Bento&#xA;&#x9;mlflow.autolog()&#xA;&#x9;...&#xA;&#x9;return bento&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/readme_integrations.gif&#34; alt=&#34;Exploring ZenML Integrations&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🖼️ Learning&lt;/h2&gt; &#xA;&lt;p&gt;The best way to learn about ZenML is the &lt;a href=&#34;https://docs.zenml.io/&#34;&gt;docs&lt;/a&gt;. We recommend beginning with the &lt;a href=&#34;https://docs.zenml.io/user-guide/starter-guide&#34;&gt;Starter Guide&lt;/a&gt; to get up and running quickly.&lt;/p&gt; &#xA;&lt;p&gt;If you are a visual learner, this 11-minute video tutorial is also a great start:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wEVwIkDvUPs&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/readme_youtube_thumbnail.png&#34; alt=&#34;Introductory Youtube Video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And finally, here are some other examples and use cases for inspiration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/examples/e2e/&#34;&gt;E2E Batch Inference&lt;/a&gt;: Feature engineering, training, and inference pipelines for tabular machine learning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/examples/e2e_nlp/&#34;&gt;Basic NLP with BERT&lt;/a&gt;: Feature engineering, training, and inference focused on NLP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml-projects/tree/main/llm-agents&#34;&gt;LLM RAG Pipeline with Langchain and OpenAI&lt;/a&gt;: Using Langchain to create a simple RAG pipeline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml-projects/tree/main/huggingface-sagemaker&#34;&gt;Huggingface Model to Sagemaker Endpoint&lt;/a&gt;: Automated MLOps on Amazon Sagemaker and HuggingFace&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml-projects/tree/main/llm-complete-guide&#34;&gt;LLMops&lt;/a&gt;: Complete guide to do LLM with ZenML&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📚 Learn from Books&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.amazon.com/LLM-Engineers-Handbook-engineering-production/dp/1836200072&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/llm_engineering_handbook_cover.jpg&#34; alt=&#34;LLM Engineer&#39;s Handbook Cover&#34; width=&#34;200&#34;&gt; &lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &#xA; &lt;a href=&#34;https://www.amazon.com/-/en/Andrew-McMahon/dp/1837631964&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/ml_engineering_with_python.jpg&#34; alt=&#34;Machine Learning Engineering with Python Cover&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;ZenML is featured in these comprehensive guides to modern MLOps and LLM engineering. Learn how to build production-ready machine learning systems with real-world examples and best practices.&lt;/p&gt; &#xA;&lt;h2&gt;🔋 Deploy ZenML&lt;/h2&gt; &#xA;&lt;p&gt;For full functionality ZenML should be deployed on the cloud to enable collaborative features as the central MLOps interface for teams.&lt;/p&gt; &#xA;&lt;p&gt;Read more about various deployment options &lt;a href=&#34;https://docs.zenml.io/getting-started/deploying-zenml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or, sign up for &lt;a href=&#34;https://cloud.zenml.io/?utm_source=readme&amp;amp;utm_medium=referral_link&amp;amp;utm_campaign=cloud_promotion&amp;amp;utm_content=signup_link&#34;&gt;ZenML Pro to get a fully managed server on a free trial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Use ZenML with VS Code&lt;/h2&gt; &#xA;&lt;p&gt;ZenML has a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ZenML.zenml-vscode&#34;&gt;VS Code extension&lt;/a&gt; that allows you to inspect your stacks and pipeline runs directly from your editor. The extension also allows you to switch your stacks without needing to type any CLI commands.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖥️ VS Code Extension in Action!&lt;/summary&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/docs/book/.gitbook/assets/zenml-extension-shortened.gif&#34; alt=&#34;ZenML Extension&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🗺 Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;ZenML is being built in public. The &lt;a href=&#34;https://zenml.io/roadmap&#34;&gt;roadmap&lt;/a&gt; is a regularly updated source of truth for the ZenML community to understand where the product is going in the short, medium, and long term.&lt;/p&gt; &#xA;&lt;p&gt;ZenML is managed by a &lt;a href=&#34;https://zenml.io/company&#34;&gt;core team&lt;/a&gt; of developers that are responsible for making key decisions and incorporating feedback from the community. The team oversees feedback via various channels, and you can directly influence the roadmap as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vote on your most wanted feature on our &lt;a href=&#34;https://zenml.io/discussion&#34;&gt;Discussion board&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Start a thread in our &lt;a href=&#34;https://zenml.io/slack&#34;&gt;Slack channel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml/issues/new/choose&#34;&gt;Create an issue&lt;/a&gt; on our GitHub repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🙌 Contributing and Community&lt;/h2&gt; &#xA;&lt;p&gt;We would love to develop ZenML together with our community! The best way to get started is to select any issue from the &lt;code&gt;[good-first-issue&lt;/code&gt; label](&lt;a href=&#34;https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Azenml-io+label%3A%22good+first+issue%22&#34;&gt;https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Azenml-io+label%3A%22good+first+issue%22&lt;/a&gt;) and open up a Pull Request!&lt;/p&gt; &#xA;&lt;p&gt;If you would like to contribute, please review our &lt;a href=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for all relevant details.&lt;/p&gt; &#xA;&lt;h2&gt;🆘 Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;The first point of call should be &lt;a href=&#34;https://zenml.io/slack-invite/&#34;&gt;our Slack group&lt;/a&gt;. Ask your questions about bugs or specific use cases, and someone from the &lt;a href=&#34;https://zenml.io/company&#34;&gt;core team&lt;/a&gt; will respond. Or, if you prefer, &lt;a href=&#34;https://github.com/zenml-io/zenml/issues/new/choose&#34;&gt;open an issue&lt;/a&gt; on our GitHub repo.&lt;/p&gt; &#xA;&lt;h2&gt;⭐️ Show Your Support&lt;/h2&gt; &#xA;&lt;p&gt;If you find ZenML helpful or interesting, please consider giving us a star on GitHub. Your support helps promote the project and lets others know that it&#39;s worth checking out.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for your support! 🌟&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zenml-io/zenml/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/zenml-io/zenml?style=social&#34; alt=&#34;Star this project&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;ZenML is distributed under the terms of the Apache License Version 2.0. A complete version of the license is available in the &lt;a href=&#34;https://raw.githubusercontent.com/zenml-io/zenml/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file in this repository. Any contribution made to this project will be licensed under the Apache License Version 2.0.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;left&#34;&gt; &lt;/p&gt;&#xA; &lt;div align=&#34;left&#34;&gt;&#xA;   Join our &#xA;  &lt;a href=&#34;https://zenml.io/slack&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;18&#34; src=&#34;https://cdn3.iconfinder.com/data/icons/logos-and-brands-adobe/512/306_Slack-512.png&#34; alt=&#34;Slack&#34;&gt; &lt;b&gt;Slack Community&lt;/b&gt; &lt;/a&gt; and be part of the ZenML family. &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://zenml.io/features&#34;&gt;Features&lt;/a&gt; · &#xA; &lt;a href=&#34;https://zenml.io/roadmap&#34;&gt;Roadmap&lt;/a&gt; · &#xA; &lt;a href=&#34;https://github.com/zenml-io/zenml/issues&#34;&gt;Report Bug&lt;/a&gt; · &#xA; &lt;a href=&#34;https://zenml.io/pro&#34;&gt;Sign up for ZenML Pro&lt;/a&gt; · &#xA; &lt;a href=&#34;https://www.zenml.io/blog&#34;&gt;Read Blog&lt;/a&gt; · &#xA; &lt;a href=&#34;https://github.com/issues?q=is%3Aopen+is%3Aissue+archived%3Afalse+user%3Azenml-io+label%3A%22good+first+issue%22&#34;&gt;Contribute to Open Source&lt;/a&gt; · &#xA; &lt;a href=&#34;https://github.com/zenml-io/zenml-projects&#34;&gt;Projects Showcase&lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; 🎉 Version 0.70.0 is out. Check out the release notes &#xA; &lt;a href=&#34;https://github.com/zenml-io/zenml/releases&#34;&gt;here&lt;/a&gt;. &#xA; &lt;br&gt; 🖥️ Download our VS Code Extension &#xA; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ZenML.zenml-vscode&#34;&gt;here&lt;/a&gt;. &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>QwenLM/Qwen2-VL</title>
    <updated>2024-12-05T01:35:29Z</updated>
    <id>tag:github.com,2024-12-05:/QwenLM/Qwen2-VL</id>
    <link href="https://github.com/QwenLM/Qwen2-VL" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qwen2-VL is the multimodal large language model series developed by Qwen team, Alibaba Cloud.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Qwen2-VL&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://qianwen-res.oss-accelerate-overseas.aliyuncs.com/Qwen2-VL/qwen2VL_logo.png&#34; width=&#34;400&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; 🤗 &lt;a href=&#34;https://huggingface.co/collections/Qwen/qwen2-vl-66cee7455501d7126940800d&#34;&gt;Hugging Face&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;🤖 &lt;a href=&#34;https://modelscope.cn/organization/qwen&#34;&gt;ModelScope&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp; 📑 &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2-vl/&#34;&gt;Blog&lt;/a&gt; &amp;nbsp;&amp;nbsp;| &amp;nbsp;&amp;nbsp; 📑 &lt;a href=&#34;https://arxiv.org/pdf/2409.12191&#34;&gt;Paper&lt;/a&gt; &amp;nbsp;&amp;nbsp;  &lt;br&gt; 🖥️ &lt;a href=&#34;https://huggingface.co/spaces/Qwen/Qwen2-VL&#34;&gt;Demo&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;💬 &lt;a href=&#34;https://github.com/QwenLM/Qwen/raw/main/assets/wechat.png&#34;&gt;WeChat (微信)&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;🫨 &lt;a href=&#34;https://discord.gg/CV4E9rpNSD&#34;&gt;Discord&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://help.aliyun.com/zh/model-studio/developer-reference/qwen-vl-api&#34;&gt; 📑 API&lt;/a&gt;&amp;nbsp;&amp;nbsp; | &amp;nbsp;&amp;nbsp;🖥️ &lt;a href=&#34;https://gallery.pai-ml.com/#/preview/deepLearning/cv/qwen2-vl&#34;&gt;PAI-DSW&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;After a year&#39;s relentless efforts, today we are thrilled to release &lt;strong&gt;Qwen2-VL&lt;/strong&gt;! Qwen2-VL is the latest version of the vision language models in the Qwen model families.&lt;/p&gt; &#xA;&lt;h4&gt;Key Enhancements:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;SoTA understanding of images of various resolution &amp;amp; ratio&lt;/strong&gt;: Qwen2-VL achieves state-of-the-art performance on visual understanding benchmarks, including MathVista, DocVQA, RealWorldQA, MTVQA, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Understanding videos of 20min+&lt;/strong&gt;: with the online streaming capabilities, Qwen2-VL can understand videos over 20 minutes by high-quality video-based question answering, dialog, content creation, etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Agent that can operate your mobiles, robots, etc.&lt;/strong&gt;: with the abilities of complex reasoning and decision making, Qwen2-VL can be integrated with devices like mobile phones, robots, etc., for automatic operation based on visual environment and text instructions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multilingual Support&lt;/strong&gt;: to serve global users, besides English and Chinese, Qwen2-VL now supports the understanding of texts in different languages inside images, including most European languages, Japanese, Korean, Arabic, Vietnamese, etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Model Architecture Updates:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Naive Dynamic Resolution&lt;/strong&gt;: Unlike before, Qwen2-VL can handle arbitrary image resolutions, mapping them into a dynamic number of visual tokens, offering a more human-like visual processing experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://qianwen-res.oss-accelerate-overseas.aliyuncs.com/Qwen2-VL/qwen2_vl_framework.jpg&#34; width=&#34;80%&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multimodal Rotary Position Embedding (M-ROPE)&lt;/strong&gt;: Decomposes positional embedding into parts to capture 1D textual, 2D visual, and 3D video positional information, enhancing its multimodal processing capabilities.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;http://qianwen-res.oss-accelerate-overseas.aliyuncs.com/Qwen2-VL/mrope.png&#34; width=&#34;80%&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;We have open-sourced Qwen2-VL models, including Qwen2-VL-2B and Qwen2-VL-7B under the Apache 2.0 license, as well as Qwen2-VL-72B under the Qwen license. These models are now integrated with Hugging Face Transformers, vLLM, and other third-party frameworks. We hope you enjoy using them!&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2024.09.19: The instruction-tuned &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct&#34;&gt;Qwen2-VL-72B model&lt;/a&gt; and its quantized version [&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-AWQ&#34;&gt;AWQ&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int4&#34;&gt;GPTQ-Int4&lt;/a&gt;, &lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int8&#34;&gt;GPTQ-Int8&lt;/a&gt;] are now available. We have also released the &lt;a href=&#34;https://arxiv.org/pdf/2409.12191&#34;&gt;Qwen2-VL paper&lt;/a&gt; simultaneously.&lt;/li&gt; &#xA; &lt;li&gt;2024.08.30: We have released the &lt;a href=&#34;%22https://huggingface.co/collections/Qwen/qwen2-vl-66cee7455501d7126940800d&#34;&gt;Qwen2-VL series&lt;/a&gt;. The 2B and 7B models are now available, and the 72B model for opensource is coming soon. For more details, please check our &lt;a href=&#34;https://qwenlm.github.io/blog/qwen2-vl/&#34;&gt;blog&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;h3&gt;Image Benchmarks&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Benchmark&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Previous SoTA&lt;br&gt;&lt;sup&gt;(Open-source LVLM)&lt;sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Claude-3.5 Sonnet&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GPT-4o&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Qwen2-VL-72B&lt;/strong&gt;&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct&#34;&gt;🤗&lt;/a&gt; &lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-72B-Instruct&#34;&gt;🤖&lt;/a&gt;&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Qwen2-VL-7B&lt;/strong&gt;&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct&#34;&gt;🤗&lt;/a&gt; &lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-7B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Qwen2-VL-2B&lt;/strong&gt;&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-2B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMMU&lt;sub&gt;val&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;68.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;69.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;64.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;41.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMMU-Pro&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;46.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;51.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;46.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;43.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;37.6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DocVQA&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;94.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;95.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;92.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;96.5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;94.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;90.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;InfoVQA&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;82.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;84.5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;76.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ChartQA&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;88.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;90.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;85.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;88.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;83.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;73.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TextVQA&lt;sub&gt;val&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;84.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;85.5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;84.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OCRBench&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;852&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;788&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;736&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;877&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;845&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;794&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MTVQA&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;30.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;VCR&lt;sub&gt;en easy&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;84.67&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.85&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;91.55&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;91.93&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;89.70&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;81.45&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;VCR&lt;sub&gt;zh easy&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;22.09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14.87&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;65.37&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;59.94&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;46.16&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;RealWorldQA&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;72.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;75.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;77.8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;70.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MME&lt;sub&gt;sum&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2414.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1920.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2328.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;2482.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2326.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1872.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMBench-EN&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;86.5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;79.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;83.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;86.5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;83.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;74.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMBench-CN&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;86.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;82.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;86.6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;73.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMBench-V1.1&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;85.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;78.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;82.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;85.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;72.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMT-Bench&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;71.7&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMStar&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;67.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;68.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;48.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MMVet&lt;sub&gt;GPT-4-Turbo&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;69.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;74.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;49.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HallBench&lt;sub&gt;avg&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;55.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;49.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;55.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;58.1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;41.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MathVista&lt;sub&gt;testmini&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;67.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;67.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;70.5&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;43.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MathVision&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16.97&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;30.4&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Video Benchmarks&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Benchmark&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Previous SoTA&lt;br&gt;&lt;sup&gt;(Open-source LVLM)&lt;sup&gt;&lt;/sup&gt;&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gemini 1.5-Pro&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GPT-4o&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Qwen2-VL-72B&lt;/strong&gt;&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct&#34;&gt;🤗&lt;/a&gt; &lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-72B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Qwen2-VL-7B&lt;/strong&gt;&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct&#34;&gt;🤗&lt;/a&gt; &lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-7B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Qwen2-VL-2B&lt;/strong&gt;&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-2B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MVBench&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;69.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;73.6&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;67.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PerceptionTest&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66.9&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;68.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;53.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EgoSchema&lt;sub&gt;test&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;62.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;72.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;77.9&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66.7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Video-MME&lt;br&gt;&lt;sub&gt;(wo/w subs)&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66.3/69.6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;75.0&lt;/strong&gt;/&lt;strong&gt;81.3&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.9/77.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;71.2/77.8&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63.3/69.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;55.6/60.4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Agent Benchmarks&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Benchmark&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Metric&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Previous SoTA&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GPT-4o&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Qwen2-VL-72B&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;General&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;FnCall&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;90.2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;93.1&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;53.2&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Game&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Number Line&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;89.4&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;91.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;100.0&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;BlackJack&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;40.2&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;34.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;42.6&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EZPoint&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50.0&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;85.5&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;100.0&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Point24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.6&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;4.5&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AITZ&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;83.0&lt;sup&gt;[3]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;70.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;89.6&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;EM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;47.7&lt;sup&gt;[3]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;35.3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;72.1&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AI2THOR&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ALFRED&lt;sub&gt;valid-unseen&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;67.7&lt;sup&gt;[4]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;67.8&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GC&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;75.3&lt;sup&gt;[4]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;75.8&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;VLN&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;R2R&lt;sub&gt;valid-unseen&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;79.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;43.7&lt;sup&gt;[5]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;REVERIE&lt;sub&gt;valid-unseen&lt;/sub&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;SR&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;61.0&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;31.6&lt;sup&gt;[5]&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;31.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;SR, GC, TM and EM are short for success rate, goal-condition success, type match and exact match. ALFRED is supported by SAM&lt;sup&gt;[6]&lt;/sup&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Self-Curated Function Call Benchmark by Qwen Team&lt;/li&gt; &#xA; &lt;li&gt;Fine-Tuning Large Vision-Language Models as Decision-Making Agents via Reinforcement Learning&lt;/li&gt; &#xA; &lt;li&gt;Android in the Zoo: Chain-of-Action-Thought for GUI Agents&lt;/li&gt; &#xA; &lt;li&gt;ThinkBot: Embodied Instruction Following with Thought Chain Reasoning&lt;/li&gt; &#xA; &lt;li&gt;MapGPT: Map-Guided Prompting with Adaptive Path Planning for Vision-and-Language Navigation&lt;/li&gt; &#xA; &lt;li&gt;Segment Anything.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Multilingual Benchmarks&lt;/h3&gt; &#xA;&lt;table style=&#34;width:75%; text-align:center;&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Models&lt;/th&gt; &#xA;   &lt;td&gt;AR &lt;/td&gt; &#xA;   &lt;td&gt;DE &lt;/td&gt; &#xA;   &lt;td&gt;FR &lt;/td&gt; &#xA;   &lt;td&gt;IT &lt;/td&gt; &#xA;   &lt;td&gt;JA &lt;/td&gt; &#xA;   &lt;td&gt;KO &lt;/td&gt; &#xA;   &lt;td&gt;RU &lt;/td&gt; &#xA;   &lt;td&gt;TH &lt;/td&gt; &#xA;   &lt;td&gt;VI &lt;/td&gt; &#xA;   &lt;td&gt;AVG&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Qwen2-VL-72B&lt;/th&gt; &#xA;   &lt;td&gt;20.7 &lt;/td&gt; &#xA;   &lt;td&gt;36.5 &lt;/td&gt; &#xA;   &lt;td&gt;44.1 &lt;/td&gt; &#xA;   &lt;td&gt;42.8 &lt;/td&gt; &#xA;   &lt;td&gt;21.6 &lt;/td&gt; &#xA;   &lt;td&gt;37.4 &lt;/td&gt; &#xA;   &lt;td&gt;15.6 &lt;/td&gt; &#xA;   &lt;td&gt;17.7 &lt;/td&gt; &#xA;   &lt;td&gt;41.6 &lt;/td&gt; &#xA;   &lt;td&gt;&lt;b&gt;30.9&lt;/b&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;GPT-4o&lt;/th&gt; &#xA;   &lt;td&gt;20.2 &lt;/td&gt; &#xA;   &lt;td&gt;34.2 &lt;/td&gt; &#xA;   &lt;td&gt;41.2 &lt;/td&gt; &#xA;   &lt;td&gt;32.7 &lt;/td&gt; &#xA;   &lt;td&gt;20.0 &lt;/td&gt; &#xA;   &lt;td&gt;33.9 &lt;/td&gt; &#xA;   &lt;td&gt;11.5 &lt;/td&gt; &#xA;   &lt;td&gt;22.5 &lt;/td&gt; &#xA;   &lt;td&gt;34.2 &lt;/td&gt; &#xA;   &lt;td&gt;27.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Claude3 Opus&lt;/th&gt; &#xA;   &lt;td&gt;15.1 &lt;/td&gt; &#xA;   &lt;td&gt;33.4 &lt;/td&gt; &#xA;   &lt;td&gt;40.6 &lt;/td&gt; &#xA;   &lt;td&gt;34.4 &lt;/td&gt; &#xA;   &lt;td&gt;19.4 &lt;/td&gt; &#xA;   &lt;td&gt;27.2 &lt;/td&gt; &#xA;   &lt;td&gt;13.0 &lt;/td&gt; &#xA;   &lt;td&gt;19.5 &lt;/td&gt; &#xA;   &lt;td&gt;29.1 &lt;/td&gt; &#xA;   &lt;td&gt;25.7 &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Gemini Ultra&lt;/th&gt; &#xA;   &lt;td&gt;14.7 &lt;/td&gt; &#xA;   &lt;td&gt;32.3 &lt;/td&gt; &#xA;   &lt;td&gt;40.0 &lt;/td&gt; &#xA;   &lt;td&gt;31.8 &lt;/td&gt; &#xA;   &lt;td&gt;12.3 &lt;/td&gt; &#xA;   &lt;td&gt;17.2 &lt;/td&gt; &#xA;   &lt;td&gt;11.8 &lt;/td&gt; &#xA;   &lt;td&gt;20.3 &lt;/td&gt; &#xA;   &lt;td&gt;28.6 &lt;/td&gt; &#xA;   &lt;td&gt;23.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;These results are evaluated on the benchmark of &lt;a href=&#34;https://github.com/bytedance/MTVQA/tree/main&#34;&gt;MTVQA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Below, we provide simple examples to show how to use Qwen2-VL with 🤖 ModelScope and 🤗 Transformers.&lt;/p&gt; &#xA;&lt;p&gt;The code of Qwen2-VL has been in the latest Hugging face transformers and we advise you to build from source with command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/huggingface/transformers@21fac7abba2a37fae86106f87fcf9974fd1e3830 accelerate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or you might encounter the following error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;KeyError: &#39;qwen2_vl&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚠️&lt;strong&gt;NOTE&lt;/strong&gt;: Current latest version of &lt;code&gt;transformers&lt;/code&gt; have &lt;a href=&#34;https://github.com/huggingface/transformers/issues/33401&#34;&gt;a bug&lt;/a&gt; when loading Qwen2-VL config, so you need to install a specific version of transformers as above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We offer a toolkit to help you handle various types of visual input more conveniently, as if you were using an API. This includes base64, URLs, and interleaved images and videos. You can install it using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# It&#39;s highly recommanded to use `[decord]` feature for faster video loading.&#xA;pip install qwen-vl-utils[decord]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Linux, you might not be able to install &lt;code&gt;decord&lt;/code&gt; from PyPI. In that case, you can use &lt;code&gt;pip install qwen-vl-utils&lt;/code&gt; which will fall back to using torchvision for video processing. However, you can still &lt;a href=&#34;https://github.com/dmlc/decord?tab=readme-ov-file#install-from-source&#34;&gt;install decord from source&lt;/a&gt; to get decord used when loading video.&lt;/p&gt; &#xA;&lt;h3&gt;Using 🤗 Transformers to Chat&lt;/h3&gt; &#xA;&lt;p&gt;Here we show a code snippet to show you how to use the chat model with &lt;code&gt;transformers&lt;/code&gt; and &lt;code&gt;qwen_vl_utils&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2VLForConditionalGeneration, AutoTokenizer, AutoProcessor&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;# default: Load the model on the available device(s)&#xA;model = Qwen2VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2-VL-7B-Instruct&#34;, torch_dtype=&#34;auto&#34;, device_map=&#34;auto&#34;&#xA;)&#xA;&#xA;# We recommend enabling flash_attention_2 for better acceleration and memory saving, especially in multi-image and video scenarios.&#xA;# model = Qwen2VLForConditionalGeneration.from_pretrained(&#xA;#     &#34;Qwen/Qwen2-VL-7B-Instruct&#34;,&#xA;#     torch_dtype=torch.bfloat16,&#xA;#     attn_implementation=&#34;flash_attention_2&#34;,&#xA;#     device_map=&#34;auto&#34;,&#xA;# )&#xA;&#xA;# default processer&#xA;processor = AutoProcessor.from_pretrained(&#34;Qwen/Qwen2-VL-7B-Instruct&#34;)&#xA;&#xA;# The default range for the number of visual tokens per image in the model is 4-16384.&#xA;# You can set min_pixels and max_pixels according to your needs, such as a token range of 256-1280, to balance performance and cost.&#xA;# min_pixels = 256*28*28&#xA;# max_pixels = 1280*28*28&#xA;# processor = AutoProcessor.from_pretrained(&#34;Qwen/Qwen2-VL-7B-Instruct&#34;, min_pixels=min_pixels, max_pixels=max_pixels)&#xA;&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference: Generation of the output&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Multi image inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Messages containing multiple images and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image1.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image2.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Identify the similarities between these images.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Video inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Messages containing a images list as a video and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: [&#xA;                    &#34;file:///path/to/frame1.jpg&#34;,&#xA;                    &#34;file:///path/to/frame2.jpg&#34;,&#xA;                    &#34;file:///path/to/frame3.jpg&#34;,&#xA;                    &#34;file:///path/to/frame4.jpg&#34;,&#xA;                ],&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Messages containing a local video path and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: &#34;file:///path/to/video1.mp4&#34;,&#xA;                &#34;max_pixels&#34;: 360 * 420,&#xA;                &#34;fps&#34;: 1.0,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Messages containing a video url and a text query&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;video&#34;,&#xA;                &#34;video&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2-VL/space_woaudio.mp4&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this video.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Video URL compatibility largely depends on the third-party library version. The details are in the table below. change the backend by &lt;code&gt;FORCE_QWENVL_VIDEO_READER=torchvision&lt;/code&gt; or &lt;code&gt;FORCE_QWENVL_VIDEO_READER=decord&lt;/code&gt; if you prefer not to use the default one.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Backend&lt;/th&gt; &#xA;    &lt;th&gt;HTTP&lt;/th&gt; &#xA;    &lt;th&gt;HTTPS&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;torchvision &amp;gt;= 0.19.0&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;torchvision &amp;lt; 0.19.0&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;decord&lt;/td&gt; &#xA;    &lt;td&gt;✅&lt;/td&gt; &#xA;    &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Batch inference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Sample messages for batch inference&#xA;messages1 = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image1.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/image2.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What are the common elements in these pictures?&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;messages2 = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Who are you?&#34;},&#xA;]&#xA;# Combine messages for batch processing&#xA;messages = [messages1, messages2]&#xA;&#xA;# Preparation for batch inference&#xA;texts = [&#xA;    processor.apply_chat_template(msg, tokenize=False, add_generation_prompt=True)&#xA;    for msg in messages&#xA;]&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=texts,&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;inputs = inputs.to(&#34;cuda&#34;)&#xA;&#xA;# Batch Inference&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_texts = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_texts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;🤖 ModelScope&lt;/h3&gt; &#xA;&lt;p&gt;We strongly advise users especially those in mainland China to use ModelScope. &lt;code&gt;snapshot_download&lt;/code&gt; can help you solve issues concerning downloading checkpoints.&lt;/p&gt; &#xA;&lt;h3&gt;More Usage Tips&lt;/h3&gt; &#xA;&lt;p&gt;For input images, we support local files, base64, and URLs. For videos, we currently only support local files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# You can directly insert a local file path, a URL, or a base64-encoded image into the position where you want in the text.&#xA;## Local file path&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;## Image URL&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;http://path/to/your/image.jpg&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;## Base64 encoded image&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;data:image;base64,/9j/...&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Image Resolution for performance boost&lt;/h4&gt; &#xA;&lt;p&gt;The model supports a wide range of resolution inputs. By default, it uses the native resolution for input, but higher resolutions can enhance performance at the cost of more computation. Users can set the minimum and maximum number of pixels to achieve an optimal configuration for their needs, such as a token count range of 256-1280, to balance speed and memory usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;min_pixels = 256 * 28 * 28&#xA;max_pixels = 1280 * 28 * 28&#xA;processor = AutoProcessor.from_pretrained(&#xA;    &#34;Qwen/Qwen2-VL-7B-Instruct&#34;, min_pixels=min_pixels, max_pixels=max_pixels&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Besides, We provide two methods for fine-grained control over the image size input to the model:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify exact dimensions: Directly set &lt;code&gt;resized_height&lt;/code&gt; and &lt;code&gt;resized_width&lt;/code&gt;. These values will be rounded to the nearest multiple of 28.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Define min_pixels and max_pixels: Images will be resized to maintain their aspect ratio within the range of min_pixels and max_pixels.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# resized_height and resized_width&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;,&#xA;                &#34;resized_height&#34;: 280,&#xA;                &#34;resized_width&#34;: 420,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;# min_pixels and max_pixels&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;,&#xA;                &#34;min_pixels&#34;: 50176,&#xA;                &#34;max_pixels&#34;: 50176,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add ids for Multiple Image Inputs&lt;/h4&gt; &#xA;&lt;p&gt;By default, images and video content are directly included in the conversation. When handling multiple images, it&#39;s helpful to add labels to the images and videos for better reference. Users can control this behavior with the following settings:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Add vision ids&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;conversation = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [{&#34;type&#34;: &#34;image&#34;}, {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Hello, how are you?&#34;}],&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;I&#39;m doing well, thank you for asking. How can I assist you today?&#34;,&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Can you describe these images and video?&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;},&#xA;            {&#34;type&#34;: &#34;image&#34;},&#xA;            {&#34;type&#34;: &#34;video&#34;},&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;These are from my vacation.&#34;},&#xA;        ],&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;assistant&#34;,&#xA;        &#34;content&#34;: &#34;I&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&#34;,&#xA;    },&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;It was a trip to the mountains. Can you see the details in the images and video?&#34;,&#xA;    },&#xA;]&#xA;&#xA;# default:&#xA;prompt_without_id = processor.apply_chat_template(&#xA;    conversation, add_generation_prompt=True&#xA;)&#xA;# Excepted output: &#39;&amp;lt;|im_start|&amp;gt;system\nYou are a helpful assistant.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\n&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Hello, how are you?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;m doing well, thank you for asking. How can I assist you today?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nCan you describe these images and video?&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;&amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;&amp;lt;|vision_start|&amp;gt;&amp;lt;|video_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;These are from my vacation.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nIt was a trip to the mountains. Can you see the details in the images and video?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\n&#39;&#xA;&#xA;&#xA;# add ids&#xA;prompt_with_id = processor.apply_chat_template(&#xA;    conversation, add_generation_prompt=True, add_vision_id=True&#xA;)&#xA;# Excepted output: &#39;&amp;lt;|im_start|&amp;gt;system\nYou are a helpful assistant.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nPicture 1: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Hello, how are you?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;m doing well, thank you for asking. How can I assist you today?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nCan you describe these images and video?Picture 2: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Picture 3: &amp;lt;|vision_start|&amp;gt;&amp;lt;|image_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;Video 1: &amp;lt;|vision_start|&amp;gt;&amp;lt;|video_pad|&amp;gt;&amp;lt;|vision_end|&amp;gt;These are from my vacation.&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\nI&#39;d be happy to describe the images and video for you. Could you please provide more context about your vacation?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;user\nIt was a trip to the mountains. Can you see the details in the images and video?&amp;lt;|im_end|&amp;gt;\n&amp;lt;|im_start|&amp;gt;assistant\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Flash-Attention 2 to speed up generation&lt;/h4&gt; &#xA;&lt;p&gt;First, make sure to install the latest version of Flash Attention 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -U flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you should have a hardware that is compatible with Flash-Attention 2. Read more about it in the official documentation of the &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;flash attention repository&lt;/a&gt;. FlashAttention-2 can only be used when a model is loaded in &lt;code&gt;torch.float16&lt;/code&gt; or &lt;code&gt;torch.bfloat16&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To load and run a model using Flash Attention-2, simply add &lt;code&gt;attn_implementation=&#34;flash_attention_2&#34;&lt;/code&gt; when loading the model as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2VLForConditionalGeneration&#xA;&#xA;model = Qwen2VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2-VL-7B-Instruct&#34;, &#xA;    torch_dtype=torch.bfloat16, &#xA;    attn_implementation=&#34;flash_attention_2&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Try Qwen2-VL-72B with API!&lt;/h3&gt; &#xA;&lt;p&gt;To explore Qwen2-VL-72B, a more fascinating multimodal model, we encourage you to test our cutting-edge API service. Let&#39;s start the exciting journey right now!&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install dashscope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import dashscope&#xA;&#xA;&#xA;dashscope.api_key = &#34;your_api_key&#34;&#xA;&#xA;messages = [{&#xA;    &#39;role&#39;: &#39;user&#39;,&#xA;    &#39;content&#39;: [&#xA;        {&#xA;            &#39;image&#39;: &#34;https://dashscope.oss-cn-beijing.aliyuncs.com/images/dog_and_girl.jpeg&#34;&#xA;        },&#xA;        {&#xA;            &#39;text&#39;: &#39;What are in the image?&#39;&#xA;        },&#xA;    ]&#xA;}]&#xA;# The model name &#39;qwen-vl-max-0809&#39; is the identity of &#39;Qwen2-VL-72B&#39;.&#xA;response = dashscope.MultiModalConversation.call(model=&#39;qwen-vl-max-0809&#39;, messages=messages)&#xA;print(response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more usage, please refer to the tutorial at &lt;a href=&#34;https://help.aliyun.com/zh/model-studio/developer-reference/qwen-vl-api&#34;&gt;aliyun&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quantization&lt;/h2&gt; &#xA;&lt;p&gt;For quantized models, we offer two types of quantization: AWQ and GPQ(&lt;a href=&#34;https://huggingface.co/collections/Qwen/qwen2-vl-66cee7455501d7126940800d&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/organization/qwen&#34;&gt;🤖&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;AWQ&lt;/h3&gt; &#xA;&lt;p&gt;One of our recommendations is the usage of &lt;a href=&#34;https://arxiv.org/abs/2306.00978&#34;&gt;AWQ&lt;/a&gt; with &lt;a href=&#34;https://github.com/casper-hansen/AutoAWQ&#34;&gt;AutoAWQ&lt;/a&gt;. AWQ refers to Activation-aware Weight Quantization, a hardware-friendly approach for LLM low-bit weight-only quantization. AutoAWQ is an easy-to-use package for 4-bit quantized models.&lt;/p&gt; &#xA;&lt;h4&gt;Usage of AWQ Quantized Models with Transformers&lt;/h4&gt; &#xA;&lt;p&gt;Now, Transformers has officially supported AutoAWQ, which means that you can directly use the quantized model with Transformers. The following is a very simple code snippet showing how to run &lt;code&gt;Qwen2-VL-7B-Instruct-AWQ&lt;/code&gt; with the quantized model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2VLForConditionalGeneration, AutoTokenizer, AutoProcessor&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;# We recommend enabling flash_attention_2 for better acceleration and memory saving, especially in multi-image and video scenarios.&#xA;# model = Qwen2VLForConditionalGeneration.from_pretrained(&#xA;#     &#34;Qwen/Qwen2-VL-7B-Instruct-AWQ&#34;,&#xA;#     torch_dtype=&#34;auto&#34;,&#xA;#     attn_implementation=&#34;flash_attention_2&#34;,&#xA;#     device_map=&#34;auto&#34;,&#xA;# )&#xA;&#xA;# default: Load the model on the available device(s)&#xA;model = Qwen2VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2-VL-7B-Instruct-AWQ&#34;, torch_dtype=&#34;auto&#34;, device_map=&#34;auto&#34;&#xA;)&#xA;&#xA;# The default range for the number of visual tokens per image in the model is 4-16384. You can set min_pixels and max_pixels according to your needs, such as a token count range of 256-1280, to balance speed and memory usage.&#xA;min_pixels = 256 * 28 * 28&#xA;max_pixels = 1280 * 28 * 28&#xA;processor = AutoProcessor.from_pretrained(&#xA;    &#34;Qwen/Qwen2-VL-7B-Instruct-AWQ&#34;, min_pixels=min_pixels, max_pixels=max_pixels&#xA;)&#xA;&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;&#xA;# Inference: Generation of the output&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Quantize Your Own Model with AutoAWQ&lt;/h4&gt; &#xA;&lt;p&gt;If you want to quantize your own model to AWQ quantized models, we advise you to use AutoAWQ. It is suggested installing the forked version of the package by installing from source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/kq-chen/AutoAWQ.git&#xA;cd AutoAWQ&#xA;pip install numpy gekko pandas&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suppose you have finetuned a model based on &lt;code&gt;Qwen2-VL-7B&lt;/code&gt;. To build your own AWQ quantized model, you need to use the training data for calibration. Below, we provide a simple demonstration for you to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2VLProcessor&#xA;from awq.models.qwen2vl import Qwen2VLAWQForConditionalGeneration&#xA;&#xA;# Specify paths and hyperparameters for quantization&#xA;model_path = &#34;your_model_path&#34;&#xA;quant_path = &#34;your_quantized_model_path&#34;&#xA;quant_config = {&#34;zero_point&#34;: True, &#34;q_group_size&#34;: 128, &#34;w_bit&#34;: 4, &#34;version&#34;: &#34;GEMM&#34;}&#xA;&#xA;# Load your processor and model with AutoAWQ&#xA;processor = Qwen2VLProcessor.from_pretrained(model_path)&#xA;# We recommend enabling flash_attention_2 for better acceleration and memory saving&#xA;# model = Qwen2VLAWQForConditionalGeneration.from_pretrained(&#xA;#     model_path, model_type=&#34;qwen2_vl&#34;, use_cache=False, attn_implementation=&#34;flash_attention_2&#34;&#xA;# )&#xA;model = Qwen2VLAWQForConditionalGeneration.from_pretrained(&#xA;    model_path, model_type=&#34;qwen2_vl&#34;, use_cache=False&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to prepare your data for calibration. What you need to do is just put samples into a list, each of which is a typical chat message as shown below. you can specify &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; in &lt;code&gt;content&lt;/code&gt; field, For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = [&#xA;    # message 0&#xA;    [&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;        {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Tell me who you are.&#34;},&#xA;        {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: &#34;I am a large language model named Qwen...&#34;},&#xA;    ],&#xA;    # message 1&#xA;    [&#xA;        {&#xA;            &#34;role&#34;: &#34;user&#34;,&#xA;            &#34;content&#34;: [&#xA;                {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;},&#xA;                {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Output all text in the image&#34;},&#xA;            ],&#xA;        },&#xA;        {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: &#34;The text in the image is balabala...&#34;},&#xA;    ],&#xA;    # other messages...&#xA;    ...,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;here, we use a caption dataset &lt;strong&gt;only for demonstration&lt;/strong&gt;. You should replace it with your own sft dataset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def prepare_dataset(n_sample: int = 8) -&amp;gt; list[list[dict]]:&#xA;    from datasets import load_dataset&#xA;&#xA;    dataset = load_dataset(&#xA;        &#34;laion/220k-GPT4Vision-captions-from-LIVIS&#34;, split=f&#34;train[:{n_sample}]&#34;&#xA;    )&#xA;    return [&#xA;        [&#xA;            {&#xA;                &#34;role&#34;: &#34;user&#34;,&#xA;                &#34;content&#34;: [&#xA;                    {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: sample[&#34;url&#34;]},&#xA;                    {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;generate a caption for this image&#34;},&#xA;                ],&#xA;            },&#xA;            {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: sample[&#34;caption&#34;]},&#xA;        ]&#xA;        for sample in dataset&#xA;    ]&#xA;&#xA;&#xA;dataset = prepare_dataset()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then process the dataset into tensors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qwen_vl_utils import process_vision_info&#xA;&#xA;text = processor.apply_chat_template(&#xA;    dataset, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(dataset)&#xA;inputs = processor(&#xA;    text=text,&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just run the calibration process by one line of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.quantize(calib_data=inputs, quant_config=quant_config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, save the quantized model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.model.config.use_cache = model.model.generation_config.use_cache = True&#xA;model.save_quantized(quant_path, safetensors=True, shard_size=&#34;4GB&#34;)&#xA;processor.save_pretrained(quant_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can obtain your own AWQ quantized model for deployment. Enjoy!&lt;/p&gt; &#xA;&lt;h3&gt;GPTQ&lt;/h3&gt; &#xA;&lt;h4&gt;Usage of GPTQ Models with Transformers&lt;/h4&gt; &#xA;&lt;p&gt;Now, Transformers has officially supported AutoGPTQ, which means that you can directly use the quantized model with Transformers. The following is a very simple code snippet showing how to run &lt;code&gt;Qwen2-VL-7B-Instruct-GPTQ-Int4&lt;/code&gt; with the quantized model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2VLForConditionalGeneration, AutoTokenizer, AutoProcessor&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;# We recommend enabling flash_attention_2 for better acceleration and memory saving, especially in multi-image and video scenarios.&#xA;# model = Qwen2VLForConditionalGeneration.from_pretrained(&#xA;#     &#34;Qwen/Qwen2-VL-7B-Instruct-GPTQ-Int4&#34;,&#xA;#     torch_dtype=torch.bfloat16,&#xA;#     attn_implementation=&#34;flash_attention_2&#34;,&#xA;#     device_map=&#34;auto&#34;,&#xA;# )&#xA;&#xA;# default: Load the model on the available device(s)&#xA;model = Qwen2VLForConditionalGeneration.from_pretrained(&#xA;    &#34;Qwen/Qwen2-VL-7B-Instruct-GPTQ-Int4&#34;, torch_dtype=&#34;auto&#34;, device_map=&#34;auto&#34;&#xA;)&#xA;&#xA;# The default range for the number of visual tokens per image in the model is 4-16384. You can set min_pixels and max_pixels according to your needs, such as a token count range of 256-1280, to balance speed and memory usage.&#xA;min_pixels = 256 * 28 * 28&#xA;max_pixels = 1280 * 28 * 28&#xA;processor = AutoProcessor.from_pretrained(&#xA;    &#34;Qwen/Qwen2-VL-7B-Instruct-GPTQ-Int4&#34;, min_pixels=min_pixels, max_pixels=max_pixels&#xA;)&#xA;&#xA;messages = [&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen-VL/assets/demo.jpeg&#34;,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Describe this image.&#34;},&#xA;        ],&#xA;    }&#xA;]&#xA;&#xA;# Preparation for inference&#xA;text = processor.apply_chat_template(&#xA;    messages, tokenize=False, add_generation_prompt=True&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;inputs = processor(&#xA;    text=[text],&#xA;    images=image_inputs,&#xA;    videos=video_inputs,&#xA;    padding=True,&#xA;    return_tensors=&#34;pt&#34;,&#xA;)&#xA;&#xA;# Inference: Generation of the output&#xA;generated_ids = model.generate(**inputs, max_new_tokens=128)&#xA;generated_ids_trimmed = [&#xA;    out_ids[len(in_ids) :] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)&#xA;]&#xA;output_text = processor.batch_decode(&#xA;    generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False&#xA;)&#xA;print(output_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Quantize Your Own Model with AutoGPTQ&lt;/h4&gt; &#xA;&lt;p&gt;If you want to quantize your own model to GPTQ quantized models, we advise you to use AutoGPTQ. It is suggested installing the forked version of the package by installing from source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/kq-chen/AutoGPTQ.git&#xA;cd AutoGPTQ&#xA;pip install numpy gekko pandas&#xA;pip install -vvv --no-build-isolation -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suppose you have finetuned a model based on &lt;code&gt;Qwen2-VL-7B&lt;/code&gt;. To build your own GPTQ quantized model, you need to use the training data for calibration. Below, we provide a simple demonstration for you to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import Qwen2VLProcessor&#xA;from auto_gptq import BaseQuantizeConfig&#xA;from auto_gptq.modeling import Qwen2VLGPTQForConditionalGeneration&#xA;&#xA;# Specify paths and hyperparameters for quantization&#xA;model_path = &#34;your_model_path&#34;&#xA;quant_path = &#34;your_quantized_model_path&#34;&#xA;quantize_config = BaseQuantizeConfig(&#xA;    bits=8,  # 4 or 8&#xA;    group_size=128,&#xA;    damp_percent=0.1,&#xA;    desc_act=False,  # set to False can significantly speed up inference but the perplexity may slightly bad&#xA;    static_groups=False,&#xA;    sym=True,&#xA;    true_sequential=True,&#xA;)&#xA;# Load your processor and model with AutoGPTQ&#xA;processor = Qwen2VLProcessor.from_pretrained(model_path)&#xA;# We recommend enabling flash_attention_2 for better acceleration and memory saving&#xA;# model = Qwen2VLGPTQForConditionalGeneration.from_pretrained(model_path, quantize_config, attn_implementation=&#34;flash_attention_2&#34;)&#xA;model = Qwen2VLGPTQForConditionalGeneration.from_pretrained(model_path, quantize_config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you need to prepare your data for calibration. What you need to do is just put samples into a list, each of which is a typical chat message as shown below. you can specify &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; in &lt;code&gt;content&lt;/code&gt; field, For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = [&#xA;    # message 0&#xA;    [&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;        {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Tell me who you are.&#34;},&#xA;        {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: &#34;I am a large language model named Qwen...&#34;},&#xA;    ],&#xA;    # message 1&#xA;    [&#xA;        {&#xA;            &#34;role&#34;: &#34;user&#34;,&#xA;            &#34;content&#34;: [&#xA;                {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: &#34;file:///path/to/your/image.jpg&#34;},&#xA;                {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;Output all text in the image&#34;},&#xA;            ],&#xA;        },&#xA;        {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: &#34;The text in the image is balabala...&#34;},&#xA;    ],&#xA;    # other messages...&#xA;    ...,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, we use a caption dataset &lt;strong&gt;only for demonstration&lt;/strong&gt;. You should replace it with your own sft dataset.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def prepare_dataset(n_sample: int = 20) -&amp;gt; list[list[dict]]:&#xA;    from datasets import load_dataset&#xA;&#xA;    dataset = load_dataset(&#xA;        &#34;laion/220k-GPT4Vision-captions-from-LIVIS&#34;, split=f&#34;train[:{n_sample}]&#34;&#xA;    )&#xA;    return [&#xA;        [&#xA;            {&#xA;                &#34;role&#34;: &#34;user&#34;,&#xA;                &#34;content&#34;: [&#xA;                    {&#34;type&#34;: &#34;image&#34;, &#34;image&#34;: sample[&#34;url&#34;]},&#xA;                    {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;generate a caption for this image&#34;},&#xA;                ],&#xA;            },&#xA;            {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: sample[&#34;caption&#34;]},&#xA;        ]&#xA;        for sample in dataset&#xA;    ]&#xA;&#xA;&#xA;dataset = prepare_dataset()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then process the dataset into tensors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qwen_vl_utils import process_vision_info&#xA;&#xA;&#xA;def batched(iterable, n: int):&#xA;    # batched(&#39;ABCDEFG&#39;, 3) → ABC DEF G&#xA;    assert n &amp;gt;= 1, &#34;batch size must be at least one&#34;&#xA;    from itertools import islice&#xA;&#xA;    iterator = iter(iterable)&#xA;    while batch := tuple(islice(iterator, n)):&#xA;        yield batch&#xA;&#xA;&#xA;batch_size = 1&#xA;calib_data = []&#xA;for batch in batched(dataset, batch_size):&#xA;    text = processor.apply_chat_template(&#xA;        batch, tokenize=False, add_generation_prompt=True&#xA;    )&#xA;    image_inputs, video_inputs = process_vision_info(batch)&#xA;    inputs = processor(&#xA;        text=text,&#xA;        images=image_inputs,&#xA;        videos=video_inputs,&#xA;        padding=True,&#xA;        return_tensors=&#34;pt&#34;,&#xA;    )&#xA;    calib_data.append(inputs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then just run the calibration process by one line of code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.quantize(dataset, cache_examples_on_gpu=False)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, save the quantized model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model.save_quantized(quant_path, use_safetensors=True)&#xA;processor.save_pretrained(quant_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can obtain your own GPTQ quantized model for deployment. Enjoy!&lt;/p&gt; &#xA;&lt;h3&gt;Benchmark&lt;/h3&gt; &#xA;&lt;h4&gt;Performance of Quantized Models&lt;/h4&gt; &#xA;&lt;p&gt;This section reports the generation performance of quantized models (including GPTQ and AWQ) of the Qwen2-VL series. Specifically, we report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MMMU_VAL (Accuracy)&lt;/li&gt; &#xA; &lt;li&gt;DocVQA_VAL (Accuracy)&lt;/li&gt; &#xA; &lt;li&gt;MMBench_DEV_EN (Accuracy)&lt;/li&gt; &#xA; &lt;li&gt;MathVista_MINI (Accuracy)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/open-compass/VLMEvalKit&#34;&gt;VLMEvalkit&lt;/a&gt; to evaluate all models.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Size&lt;/th&gt; &#xA;   &lt;th&gt;Quantization&lt;/th&gt; &#xA;   &lt;th&gt;MMMU&lt;/th&gt; &#xA;   &lt;th&gt;DocVQA&lt;/th&gt; &#xA;   &lt;th&gt;MMBench&lt;/th&gt; &#xA;   &lt;th&gt;MathVista&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen2-VL-72B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-72B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;65.44&lt;/td&gt; &#xA;   &lt;td&gt;95.79&lt;/td&gt; &#xA;   &lt;td&gt;86.94&lt;/td&gt; &#xA;   &lt;td&gt;70.19&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int8&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-72B-Instruct-GPTQ-Int8&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;64.56&lt;/td&gt; &#xA;   &lt;td&gt;95.84&lt;/td&gt; &#xA;   &lt;td&gt;87.03&lt;/td&gt; &#xA;   &lt;td&gt;68.90&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-GPTQ-Int4&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-72B-Instruct-GPTQ-Int4&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;64.00&lt;/td&gt; &#xA;   &lt;td&gt;95.70&lt;/td&gt; &#xA;   &lt;td&gt;86.68&lt;/td&gt; &#xA;   &lt;td&gt;69.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-72B-Instruct-AWQ&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-72B-Instruct-AWQ&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;64.22&lt;/td&gt; &#xA;   &lt;td&gt;95.72&lt;/td&gt; &#xA;   &lt;td&gt;86.43&lt;/td&gt; &#xA;   &lt;td&gt;68.40&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen2-VL-7B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-7B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;53.77&lt;/td&gt; &#xA;   &lt;td&gt;93.89&lt;/td&gt; &#xA;   &lt;td&gt;81.78&lt;/td&gt; &#xA;   &lt;td&gt;58.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct-GPTQ-Int8&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-7B-Instruct-GPTQ-Int8&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;53.00&lt;/td&gt; &#xA;   &lt;td&gt;93.94&lt;/td&gt; &#xA;   &lt;td&gt;82.38&lt;/td&gt; &#xA;   &lt;td&gt;57.90&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct-GPTQ-Int4&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-7B-Instruct-GPTQ-Int4&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;52.55&lt;/td&gt; &#xA;   &lt;td&gt;93.16&lt;/td&gt; &#xA;   &lt;td&gt;81.27&lt;/td&gt; &#xA;   &lt;td&gt;60.30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-7B-Instruct-AWQ&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-7B-Instruct-AWQ&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;53.66&lt;/td&gt; &#xA;   &lt;td&gt;93.10&lt;/td&gt; &#xA;   &lt;td&gt;81.61&lt;/td&gt; &#xA;   &lt;td&gt;56.80&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen2-VL-2B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-2B-Instruct&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;41.88&lt;/td&gt; &#xA;   &lt;td&gt;88.34&lt;/td&gt; &#xA;   &lt;td&gt;72.07&lt;/td&gt; &#xA;   &lt;td&gt;44.40&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct-GPTQ-Int8&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-2B-Instruct-GPTQ-Int8&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;41.55&lt;/td&gt; &#xA;   &lt;td&gt;88.28&lt;/td&gt; &#xA;   &lt;td&gt;71.99&lt;/td&gt; &#xA;   &lt;td&gt;44.60&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct-GPTQ-Int4&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-2B-Instruct-GPTQ-Int4&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;39.22&lt;/td&gt; &#xA;   &lt;td&gt;87.21&lt;/td&gt; &#xA;   &lt;td&gt;70.87&lt;/td&gt; &#xA;   &lt;td&gt;41.69&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;br&gt;&lt;sup&gt;(&lt;a href=&#34;https://huggingface.co/Qwen/Qwen2-VL-2B-Instruct-AWQ&#34;&gt;🤗&lt;/a&gt;&lt;a href=&#34;https://modelscope.cn/models/qwen/Qwen2-VL-2B-Instruct-AWQ&#34;&gt;🤖&lt;/a&gt;)&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;41.33&lt;/td&gt; &#xA;   &lt;td&gt;86.96&lt;/td&gt; &#xA;   &lt;td&gt;71.64&lt;/td&gt; &#xA;   &lt;td&gt;39.90&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Speed Benchmark&lt;/h4&gt; &#xA;&lt;p&gt;This section reports the speed performance of bf16 models, quantized models (including GPTQ-Int4, GPTQ-Int8 and AWQ) of the Qwen2-VL series. Specifically, we report the inference speed (tokens/s) as well as memory footprint (GB) under the conditions of different context lengths.&lt;/p&gt; &#xA;&lt;p&gt;The environment of the evaluation with huggingface transformers is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NVIDIA A100 80GB&lt;/li&gt; &#xA; &lt;li&gt;CUDA 11.8&lt;/li&gt; &#xA; &lt;li&gt;Pytorch 2.2.1+cu118&lt;/li&gt; &#xA; &lt;li&gt;Flash Attention 2.6.1&lt;/li&gt; &#xA; &lt;li&gt;Transformers 4.38.2&lt;/li&gt; &#xA; &lt;li&gt;AutoGPTQ 0.6.0+cu118&lt;/li&gt; &#xA; &lt;li&gt;AutoAWQ 0.2.5+cu118 (autoawq_kernels 0.0.6+cu118)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We use the batch size of 1 and the least number of GPUs as possible for the evalution.&lt;/li&gt; &#xA; &lt;li&gt;We test the speed and memory of generating 2048 tokens with the input lengths of 1, 6144, 14336, 30720, 63488, and 129024 tokens.&lt;/li&gt; &#xA; &lt;li&gt;72B (transformers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Input Length&lt;/th&gt; &#xA;   &lt;th&gt;Quantization&lt;/th&gt; &#xA;   &lt;th&gt;GPU Num&lt;/th&gt; &#xA;   &lt;th&gt;Speed(tokens/s)&lt;/th&gt; &#xA;   &lt;th&gt;GPU Memory(GB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen2-VL-72B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;8.90&lt;/td&gt; &#xA;   &lt;td&gt;138.74&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;9.53&lt;/td&gt; &#xA;   &lt;td&gt;75.173&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;11.04&lt;/td&gt; &#xA;   &lt;td&gt;42.46&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;12.00&lt;/td&gt; &#xA;   &lt;td&gt;41.98&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;6144&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;6.53&lt;/td&gt; &#xA;   &lt;td&gt;148.66&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;6.97&lt;/td&gt; &#xA;   &lt;td&gt;85.09&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;7.62&lt;/td&gt; &#xA;   &lt;td&gt;49.05&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;8.33&lt;/td&gt; &#xA;   &lt;td&gt;48.58&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14336&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;4.39&lt;/td&gt; &#xA;   &lt;td&gt;165.92&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;5.04&lt;/td&gt; &#xA;   &lt;td&gt;99.31&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;5.39&lt;/td&gt; &#xA;   &lt;td&gt;58.76&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;5.72&lt;/td&gt; &#xA;   &lt;td&gt;58.29&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;30720&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;2.93&lt;/td&gt; &#xA;   &lt;td&gt;204.33&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;3.16&lt;/td&gt; &#xA;   &lt;td&gt;127.77&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;3.27&lt;/td&gt; &#xA;   &lt;td&gt;85.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;3.39&lt;/td&gt; &#xA;   &lt;td&gt;94.65&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;7B (transformers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Input Length&lt;/th&gt; &#xA;   &lt;th&gt;Quantization&lt;/th&gt; &#xA;   &lt;th&gt;GPU Num&lt;/th&gt; &#xA;   &lt;th&gt;Speed(tokens/s)&lt;/th&gt; &#xA;   &lt;th&gt;GPU Memory(GB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen2-VL-7B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;39.02&lt;/td&gt; &#xA;   &lt;td&gt;16.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;31.60&lt;/td&gt; &#xA;   &lt;td&gt;10.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;42.76&lt;/td&gt; &#xA;   &lt;td&gt;7.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;32.08&lt;/td&gt; &#xA;   &lt;td&gt;7.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;6144&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;38.75&lt;/td&gt; &#xA;   &lt;td&gt;21.56&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;31.31&lt;/td&gt; &#xA;   &lt;td&gt;15.61&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;39.75&lt;/td&gt; &#xA;   &lt;td&gt;12.69&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;32.66&lt;/td&gt; &#xA;   &lt;td&gt;12.56&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14336&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;30.65&lt;/td&gt; &#xA;   &lt;td&gt;29.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;27.96&lt;/td&gt; &#xA;   &lt;td&gt;23.11&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;29.72&lt;/td&gt; &#xA;   &lt;td&gt;20.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;31.42&lt;/td&gt; &#xA;   &lt;td&gt;20.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;30720&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;19.53&lt;/td&gt; &#xA;   &lt;td&gt;44.08&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;18.37&lt;/td&gt; &#xA;   &lt;td&gt;38.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;19.15&lt;/td&gt; &#xA;   &lt;td&gt;35.22&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;19.95&lt;/td&gt; &#xA;   &lt;td&gt;35.08&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2B (transformers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Input Length&lt;/th&gt; &#xA;   &lt;th&gt;Quantization&lt;/th&gt; &#xA;   &lt;th&gt;GPU Num&lt;/th&gt; &#xA;   &lt;th&gt;Speed(tokens/s)&lt;/th&gt; &#xA;   &lt;th&gt;GPU Memory(GB)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Qwen2-VL-2B-Instruct&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;35.29&lt;/td&gt; &#xA;   &lt;td&gt;4.68&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;28.59&lt;/td&gt; &#xA;   &lt;td&gt;3.55&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;39.76&lt;/td&gt; &#xA;   &lt;td&gt;2.91&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;29.89&lt;/td&gt; &#xA;   &lt;td&gt;2.88&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;6144&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;36.58&lt;/td&gt; &#xA;   &lt;td&gt;10.01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;29.53&lt;/td&gt; &#xA;   &lt;td&gt;8.87&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;39.27&lt;/td&gt; &#xA;   &lt;td&gt;8.21&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;33.42&lt;/td&gt; &#xA;   &lt;td&gt;8.18&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14336&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;36.31&lt;/td&gt; &#xA;   &lt;td&gt;17.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;31.03&lt;/td&gt; &#xA;   &lt;td&gt;16.07&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;39.89&lt;/td&gt; &#xA;   &lt;td&gt;15.40&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;32.28&lt;/td&gt; &#xA;   &lt;td&gt;15.40&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;30720&lt;/td&gt; &#xA;   &lt;td&gt;BF16&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;32.53&lt;/td&gt; &#xA;   &lt;td&gt;31.64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;27.76&lt;/td&gt; &#xA;   &lt;td&gt;30.51&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ-Int4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;30.73&lt;/td&gt; &#xA;   &lt;td&gt;29.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;AWQ&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;31.55&lt;/td&gt; &#xA;   &lt;td&gt;29.84&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;We recommend using vLLM for fast Qwen2-VL deployment and inference. You need to use &lt;code&gt;vllm&amp;gt;=0.6.1&lt;/code&gt; to enable Qwen2-VL support. You can also use our &lt;a href=&#34;https://raw.githubusercontent.com/QwenLM/Qwen2-VL/main/#-docker&#34;&gt;official docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/huggingface/transformers@21fac7abba2a37fae86106f87fcf9974fd1e3830&#xA;pip install accelerate&#xA;pip install qwen-vl-utils&#xA;# Change to your CUDA version&#xA;CUDA_VERSION=cu121&#xA;pip install &#39;vllm==0.6.1&#39; --extra-index-url https://download.pytorch.org/whl/${CUDA_VERSION}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start an OpenAI API Service&lt;/h3&gt; &#xA;&lt;p&gt;Run the command below to start an OpenAI-compatible API service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m vllm.entrypoints.openai.api_server --served-model-name Qwen2-VL-7B-Instruct --model Qwen/Qwen2-VL-7B-Instruct&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use the chat API as below (via curl or Python API):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://localhost:8000/v1/chat/completions \&#xA;    -H &#34;Content-Type: application/json&#34; \&#xA;    -d &#39;{&#xA;    &#34;model&#34;: &#34;Qwen2-VL-7B-Instruct&#34;,&#xA;    &#34;messages&#34;: [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: [&#xA;        {&#34;type&#34;: &#34;image_url&#34;, &#34;image_url&#34;: {&#34;url&#34;: &#34;https://modelscope.oss-cn-beijing.aliyuncs.com/resource/qwen.png&#34;}},&#xA;        {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;}&#xA;    ]}&#xA;    ]&#xA;    }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from openai import OpenAI&#xA;&#xA;# Set OpenAI&#39;s API key and API base to use vLLM&#39;s API server.&#xA;openai_api_key = &#34;EMPTY&#34;&#xA;openai_api_base = &#34;http://localhost:8000/v1&#34;&#xA;&#xA;client = OpenAI(&#xA;    api_key=openai_api_key,&#xA;    base_url=openai_api_base,&#xA;)&#xA;&#xA;chat_response = client.chat.completions.create(&#xA;    model=&#34;Qwen2-VL-7B-Instruct&#34;,&#xA;    messages=[&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;        {&#xA;            &#34;role&#34;: &#34;user&#34;,&#xA;            &#34;content&#34;: [&#xA;                {&#xA;                    &#34;type&#34;: &#34;image_url&#34;,&#xA;                    &#34;image_url&#34;: {&#xA;                        &#34;url&#34;: &#34;https://modelscope.oss-cn-beijing.aliyuncs.com/resource/qwen.png&#34;&#xA;                    },&#xA;                },&#xA;                {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;},&#xA;            ],&#xA;        },&#xA;    ],&#xA;)&#xA;print(&#34;Chat response:&#34;, chat_response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also upload base64-encoded local images (see &lt;a href=&#34;https://platform.openai.com/docs/guides/vision/uploading-base-64-encoded-images&#34;&gt;OpenAI API protocol document&lt;/a&gt; for more details):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import base64&#xA;from openai import OpenAI&#xA;# Set OpenAI&#39;s API key and API base to use vLLM&#39;s API server.&#xA;openai_api_key = &#34;EMPTY&#34;&#xA;openai_api_base = &#34;http://localhost:8000/v1&#34;&#xA;client = OpenAI(&#xA;    api_key=openai_api_key,&#xA;    base_url=openai_api_base,&#xA;)&#xA;image_path = &#34;/path/to/local/image.png&#34;&#xA;with open(image_path, &#34;rb&#34;) as f:&#xA;    encoded_image = base64.b64encode(f.read())&#xA;encoded_image_text = encoded_image.decode(&#34;utf-8&#34;)&#xA;base64_qwen = f&#34;data:image;base64,{encoded_image_text}&#34;&#xA;chat_response = client.chat.completions.create(&#xA;    model=&#34;Qwen2-7B-Instruct&#34;,&#xA;    messages=[&#xA;        {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;        {&#xA;            &#34;role&#34;: &#34;user&#34;,&#xA;            &#34;content&#34;: [&#xA;                {&#xA;                    &#34;type&#34;: &#34;image_url&#34;,&#xA;                    &#34;image_url&#34;: {&#xA;                        &#34;url&#34;: base64_qwen&#xA;                    },&#xA;                },&#xA;                {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;},&#xA;            ],&#xA;        },&#xA;    ],&#xA;)&#xA;print(&#34;Chat response:&#34;, chat_response)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚠️&lt;strong&gt;NOTE&lt;/strong&gt;: Now &lt;code&gt;vllm.entrypoints.openai.api_server&lt;/code&gt; does not support set &lt;code&gt;min_pixels&lt;/code&gt; and &lt;code&gt;max_pixels&lt;/code&gt; in messages (we are working hard on supporting this feature). If you want to limit the resolution, you can set them in model&#39;s &lt;code&gt;preprocessor_config.json&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;min_pixels&#34;: 50176,&#xA;  &#34;max_pixels&#34;: 1003520,&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⚠️&lt;strong&gt;NOTE&lt;/strong&gt;: Now &lt;code&gt;vllm.entrypoints.openai.api_server&lt;/code&gt; does not support video input yet. We are actively developing on it.&lt;/li&gt; &#xA; &lt;li&gt;⚠️&lt;strong&gt;NOTE&lt;/strong&gt;: If you want to pass multiple images in a single prompt, you need to pass &lt;code&gt;--limit-mm-per-prompt image=&amp;lt;N&amp;gt;&lt;/code&gt; argument (&lt;code&gt;N&lt;/code&gt; is max number of images in each prompt) when launching &lt;code&gt;vllm.entrypoints.openai.api_server&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Inference Locally&lt;/h3&gt; &#xA;&lt;p&gt;You can also use vLLM to inference Qwen2-VL locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoProcessor&#xA;from vllm import LLM, SamplingParams&#xA;from qwen_vl_utils import process_vision_info&#xA;&#xA;MODEL_PATH = &#34;Qwen/Qwen2-VL-7B-Instruct&#34;&#xA;&#xA;llm = LLM(&#xA;    model=MODEL_PATH,&#xA;    limit_mm_per_prompt={&#34;image&#34;: 10, &#34;video&#34;: 10},&#xA;)&#xA;&#xA;sampling_params = SamplingParams(&#xA;    temperature=0.1,&#xA;    top_p=0.001,&#xA;    repetition_penalty=1.05,&#xA;    max_tokens=256,&#xA;    stop_token_ids=[],&#xA;)&#xA;&#xA;messages = [&#xA;    {&#34;role&#34;: &#34;system&#34;, &#34;content&#34;: &#34;You are a helpful assistant.&#34;},&#xA;    {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: [&#xA;            {&#xA;                &#34;type&#34;: &#34;image&#34;,&#xA;                &#34;image&#34;: &#34;https://modelscope.oss-cn-beijing.aliyuncs.com/resource/qwen.png&#34;,&#xA;                &#34;min_pixels&#34;: 224 * 224,&#xA;                &#34;max_pixels&#34;: 1280 * 28 * 28,&#xA;            },&#xA;            {&#34;type&#34;: &#34;text&#34;, &#34;text&#34;: &#34;What is the text in the illustrate?&#34;},&#xA;        ],&#xA;    },&#xA;]&#xA;# For video input, you can pass following values instead:&#xA;# &#34;type&#34;: &#34;video&#34;,&#xA;# &#34;video&#34;: &#34;&amp;lt;video URL&amp;gt;&#34;,&#xA;&#xA;processor = AutoProcessor.from_pretrained(MODEL_PATH)&#xA;prompt = processor.apply_chat_template(&#xA;    messages,&#xA;    tokenize=False,&#xA;    add_generation_prompt=True,&#xA;)&#xA;image_inputs, video_inputs = process_vision_info(messages)&#xA;&#xA;mm_data = {}&#xA;if image_inputs is not None:&#xA;    mm_data[&#34;image&#34;] = image_inputs&#xA;if video_inputs is not None:&#xA;    mm_data[&#34;video&#34;] = video_inputs&#xA;&#xA;llm_inputs = {&#xA;    &#34;prompt&#34;: prompt,&#xA;    &#34;multi_modal_data&#34;: mm_data,&#xA;}&#xA;&#xA;outputs = llm.generate([llm_inputs], sampling_params=sampling_params)&#xA;generated_text = outputs[0].outputs[0].text&#xA;&#xA;print(generated_text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;h4&gt;LLaMA-Factory&lt;/h4&gt; &#xA;&lt;p&gt;Here we provide a script for supervised finetuning Qwen2-VL with &lt;code&gt;LLaMA-Factory &amp;lt;https://github.com/hiyouga/LLaMA-Factory&amp;gt;&lt;/code&gt;. This script for supervised finetuning (SFT) has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Support multi-images input;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support single-GPU and multi-GPU training;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support full-parameter tuning, LoRA.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the following, we introduce more details about the usage of the script.&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;Before you start, make sure you have installed the following packages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow the instructions of &lt;code&gt;LLaMA-Factory &amp;lt;https://github.com/hiyouga/LLaMA-Factory&amp;gt;&lt;/code&gt;, and build the environment.&lt;/li&gt; &#xA; &lt;li&gt;Install these packages (Optional):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install deepspeed&#xA;pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;If you want to use &lt;code&gt;FlashAttention-2 &amp;lt;https://github.com/Dao-AILab/flash-attention&amp;gt;&lt;/code&gt;, make sure your CUDA is 11.6 and above.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Data Preparation&lt;/h4&gt; &#xA;&lt;p&gt;LLaMA-Factory provides several training datasets in &lt;code&gt;data&lt;/code&gt; folder, you can use it directly. If you are using a custom dataset, please prepare your dataset as follows.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Organize your data in a &lt;strong&gt;json&lt;/strong&gt; file and put your data in &lt;code&gt;data&lt;/code&gt; folder. LLaMA-Factory supports multimodal dataset in &lt;code&gt;sharegpt&lt;/code&gt; format.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The dataset in &lt;code&gt;sharegpt&lt;/code&gt; format should follow the below format:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;messages&#34;: [&#xA;      {&#xA;        &#34;content&#34;: &#34;&amp;lt;image&amp;gt;Who are they?&#34;,&#xA;        &#34;role&#34;: &#34;user&#34;&#xA;      },&#xA;      {&#xA;        &#34;content&#34;: &#34;They&#39;re Kane and Gretzka from Bayern Munich.&#34;,&#xA;        &#34;role&#34;: &#34;assistant&#34;&#xA;      },&#xA;      {&#xA;        &#34;content&#34;: &#34;What are they doing?&amp;lt;image&amp;gt;&#34;,&#xA;        &#34;role&#34;: &#34;user&#34;&#xA;      },&#xA;      {&#xA;        &#34;content&#34;: &#34;They are celebrating on the soccer field.&#34;,&#xA;        &#34;role&#34;: &#34;assistant&#34;&#xA;      }&#xA;    ],&#xA;    &#34;images&#34;: [&#xA;      &#34;mllm_demo_data/1.jpg&#34;,&#xA;      &#34;mllm_demo_data/1.jpg&#34;&#xA;    ]&#xA;  },&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Provide your dataset definition in &lt;code&gt;data/dataset_info.json&lt;/code&gt; in the following format .&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;code&gt;sharegpt&lt;/code&gt; format dataset, the columns in &lt;code&gt;dataset_info.json&lt;/code&gt; should be:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;   &#34;dataset_name&#34;: {&#xA;       &#34;file_name&#34;: &#34;dataset_name.json&#34;,&#xA;       &#34;formatting&#34;: &#34;sharegpt&#34;,&#xA;       &#34;columns&#34;: {&#xA;          &#34;messages&#34;: &#34;messages&#34;,&#xA;          &#34;images&#34;: &#34;images&#34;&#xA;        },&#xA;      &#34;tags&#34;: {&#xA;         &#34;role_tag&#34;: &#34;role&#34;,&#xA;         &#34;content_tag&#34;: &#34;content&#34;,&#xA;         &#34;user_tag&#34;: &#34;user&#34;,&#xA;         &#34;assistant_tag&#34;: &#34;assistant&#34;&#xA;        }&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Training&lt;/h4&gt; &#xA;&lt;p&gt;Lora SFT examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;llamafactory-cli train examples/train_lora/qwen2vl_lora_sft.yaml&#xA;llamafactory-cli export examples/merge_lora/qwen2vl_lora_sft.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;LoRA DPO/ORPO/SimPO examples: (using &lt;a href=&#34;https://huggingface.co/datasets/llamafactory/RLHF-V&#34;&gt;RLHF-V Dataset&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;llamafactory-cli train examples/train_lora/qwen2vl_lora_dpo.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Full SFT examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;llamafactory-cli train examples/train_full/qwen2vl_full_sft.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inference examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;llamafactory-cli webchat examples/inference/qwen2_vl.yaml&#xA;llamafactory-cli api examples/inference/qwen2_vl.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Execute the following training command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DISTRIBUTED_ARGS=&#34;&#xA;    --nproc_per_node $NPROC_PER_NODE \&#xA;    --nnodes $NNODES \&#xA;    --node_rank $NODE_RANK \&#xA;    --master_addr $MASTER_ADDR \&#xA;    --master_port $MASTER_PORT&#xA;    &#34;&#xA;&#xA;torchrun $DISTRIBUTED_ARGS src/train.py \&#xA;    --deepspeed $DS_CONFIG_PATH \&#xA;    --stage sft \&#xA;    --do_train \&#xA;    --model_name_or_path Qwen/Qwen2-VL-7B-Instruct \&#xA;    --dataset mllm_demo \&#xA;    --template qwen2_vl \&#xA;    --finetuning_type lora \&#xA;    --output_dir $OUTPUT_PATH \&#xA;    --overwrite_cache \&#xA;    --overwrite_output_dir \&#xA;    --warmup_steps 100 \&#xA;    --weight_decay 0.1 \&#xA;    --per_device_train_batch_size 2 \&#xA;    --gradient_accumulation_steps 4 \&#xA;    --ddp_timeout 9000 \&#xA;    --learning_rate 5e-6 \&#xA;    --lr_scheduler_type cosine \&#xA;    --logging_steps 1 \&#xA;    --cutoff_len 4096 \&#xA;    --save_steps 1000 \&#xA;    --plot_loss \&#xA;    --num_train_epochs 3 \&#xA;    --bf16 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and enjoy the training process. To make changes to your training, you can modify the arguments in the training command to adjust the hyperparameters. One argument to note is &lt;code&gt;cutoff_len&lt;/code&gt;, which is the maximum length of the training data. Control this parameter to avoid OOM error.&lt;/p&gt; &#xA;&lt;h2&gt;Function Calling&lt;/h2&gt; &#xA;&lt;p&gt;Qwen2-VL supports Function Calling (aka. Tool Calling or Tool Use). For details on how to use this capability, please refer to the Qwen-Agent project for &lt;a href=&#34;https://github.com/QwenLM/Qwen-Agent/raw/main/examples/qwen2vl_function_calling.py&#34;&gt;the function calling example&lt;/a&gt; and &lt;a href=&#34;https://github.com/QwenLM/Qwen-Agent/raw/main/examples/qwen2vl_assistant_tooluse.py&#34;&gt;the agent example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Simple Use Case&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# pip install qwen_agent&#xA;from typing import List, Union&#xA;from datetime import datetime&#xA;from qwen_agent.agents import FnCallAgent&#xA;from qwen_agent.gui import WebUI&#xA;from qwen_agent.tools.base import BaseToolWithFileAccess, register_tool&#xA;&#xA;@register_tool(&#34;get_date&#34;)&#xA;class GetDate(BaseToolWithFileAccess):&#xA;    description = &#34;call this tool to get the current date&#34;&#xA;    parameters = [&#xA;        {&#xA;            &#34;name&#34;: &#34;lang&#34;,&#xA;            &#34;type&#34;: &#34;string&#34;,&#xA;            &#34;description&#34;: &#34;one of [&#39;en&#39;, &#39;zh&#39;], default is en&#34;,&#xA;            &#34;required&#34;: False&#xA;        },&#xA;    ]&#xA;&#xA;    def call(self, params: Union[str, dict], files: List[str] = None, **kwargs) -&amp;gt; str:&#xA;        super().call(params=params, files=files)&#xA;        params = self._verify_json_format_args(params)&#xA;        lang = &#34;zh&#34; if &#34;zh&#34; in params[&#34;lang&#34;] else &#34;en&#34;&#xA;        now = datetime.now()&#xA;        result = now.strftime(&#34;%Y-%m-%d %H:%M:%S&#34;) + &#34;\n&#34;&#xA;        weekday = now.weekday()&#xA;        if lang == &#34;zh&#34;:&#xA;            days_chinese = [&#34;一&#34;, &#34;二&#34;, &#34;三&#34;, &#34;四&#34;, &#34;五&#34;, &#34;六&#34;, &#34;日&#34;]&#xA;            result += &#34;今天是星期&#34; + days_chinese[weekday]&#xA;        else:&#xA;            days = [&#34;Monday&#34;, &#34;Tuesday&#34;, &#34;Wednesday&#34;, &#34;Thursday&#34;, &#34;Friday&#34;, &#34;Saturday&#34;, &#34;Sunday&#34;]&#xA;            result += &#34;Today is &#34; + days[weekday]&#xA;        return result&#xA;&#xA;&#xA;def init_agent_service():&#xA;    llm_cfg_vl = {&#xA;        # Using Qwen2-VL deployed at any openai-compatible service such as vLLM:&#xA;        &#34;model_type&#34;: &#34;qwenvl_oai&#34;,&#xA;        &#34;model&#34;: &#34;Qwen/Qwen2-VL-7B-Instruct&#34;,&#xA;        &#34;model_server&#34;: &#34;http://localhost:8000/v1&#34;,  # api_base&#xA;        &#34;api_key&#34;: &#39;EMPTY&#34;,&#xA;    }&#xA;    tools = [&#xA;        &#34;get_date&#34;,&#xA;        &#34;code_interpreter&#34;,&#xA;    ]  # code_interpreter is a built-in tool in Qwen-Agent&#xA;    bot = FnCallAgent(&#xA;        llm=llm_cfg_vl,&#xA;        name=&#34;Qwen2-VL&#34;,&#xA;        description=&#34;function calling&#34;,&#xA;        function_list=tools,&#xA;    )&#xA;    return bot&#xA;&#xA;def app_gui():&#xA;    # Define the agent&#xA;    bot = init_agent_service()&#xA;    WebUI(bot).run()&#xA;&#xA;# Launch gradio app&#xA;app_gui()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Web UI Example&lt;/h3&gt; &#xA;&lt;p&gt;In this section, we provide instructions for users to build a web-based user interface (UI) demo. This UI demo allows users to interact with a predefined model or application through a web browser. Follow the steps below to get started.&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;Before you begin, ensure that you have the required dependencies installed on your system. You can install them by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements_web_demo.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Demo with FlashAttention-2&lt;/h4&gt; &#xA;&lt;p&gt;Once the required packages are installed, you can launch the web demo using the following command. This command will start a web server and provide you with a link to access the UI in your web browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: For enhanced performance and efficiency, especially in multi-image and video processing scenarios, we strongly recommend using &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;FlashAttention-2&lt;/a&gt;. FlashAttention-2 provides significant improvements in memory usage and speed, making it ideal for handling large-scale models and data processing.&lt;/p&gt; &#xA;&lt;p&gt;To enable FlashAttention-2, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo_mm.py --flash-attn2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will load the model with FlashAttention-2 enabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default Usage&lt;/strong&gt;: If you prefer to run the demo without FlashAttention-2 or if you do not specify the &lt;code&gt;--flash-attn2&lt;/code&gt; option, the demo will load the model using the standard attention implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo_mm.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the command, you’ll see a link generated in the terminal similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Running on local: http://127.0.0.1:7860/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy this link and paste it into your browser to access the web UI, where you can interact with the model by inputting text, uploading images, or using any other provided functionalities.&lt;/p&gt; &#xA;&lt;h5&gt;Running the Streaming Video Chat Demo&lt;/h5&gt; &#xA;&lt;p&gt;An experimental streaming video chat demo is also available in the &lt;code&gt;web_demo_streaming&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To run the streaming video chat demo, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web_demo_streaming/&#xA;python app.py --flash-attn2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to run the demo without FlashAttention-2, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd web_demo_streaming/&#xA;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This demo supports webcam/screen capture as its video input source. To support screen capture video input, we use code snippet from the following hugginface space: &lt;a href=&#34;https://huggingface.co/spaces/gstaff/gradio-screen-recorder/tree/main&#34;&gt;gstaff/gradio-screen-recorder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Selecting Different Models (Qwen2-VL Series Only)&lt;/h4&gt; &#xA;&lt;p&gt;The demo is configured by default to use the &lt;code&gt;Qwen/Qwen2-VL-7B-Instruct&lt;/code&gt; model, which is part of the Qwen2-VL series and is well-suited for various vision-language tasks. However, if you want to use a different model within the Qwen2-VL series, you can simply update the &lt;code&gt;DEFAULT_CKPT_PATH&lt;/code&gt; variable in the script:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Locate the &lt;code&gt;DEFAULT_CKPT_PATH&lt;/code&gt; Variable&lt;/strong&gt;: Inside &lt;code&gt;web_demo_mm.py&lt;/code&gt;, find the &lt;code&gt;DEFAULT_CKPT_PATH&lt;/code&gt; variable that defines the model checkpoint path. It should look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DEFAULT_CKPT_PATH = &#39;Qwen/Qwen2-VL-7B-Instruct&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Replace with a Different Qwen2-VL Model Path&lt;/strong&gt;: Modify &lt;code&gt;DEFAULT_CKPT_PATH&lt;/code&gt; to point to another checkpoint path within the Qwen2-VL series. For example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DEFAULT_CKPT_PATH = &#39;Qwen/Qwen2-VL-2B-Instruct&#39;  # Example for a different model in the series&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Save and Re-run&lt;/strong&gt;: After modifying the path, save the script and then re-run the demo using the instructions provided in the &lt;code&gt;Running the Demo&lt;/code&gt; section above.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This &lt;code&gt;DEFAULT_CKPT_PATH&lt;/code&gt; only supports models from the Qwen2-VL series. If you&#39;re using a model outside of the Qwen2-VL series, additional changes to the codebase may be necessary.&lt;/p&gt; &#xA;&lt;h4&gt;Customization&lt;/h4&gt; &#xA;&lt;p&gt;Further customization of the web demo, including UI layout, interactions, and additional functionalities like handling specialized input, can be done by modifying the &lt;code&gt;web_demo_mm.py&lt;/code&gt; script. This flexibility allows you to tailor the web interface to better fit specific tasks or workflows.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;While Qwen2-VL are applicable to a wide range of visual tasks, it is equally important to understand its limitations. Here are some known restrictions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Lack of Audio Support: The current model does &lt;strong&gt;not comprehend audio information&lt;/strong&gt; within videos.&lt;/li&gt; &#xA; &lt;li&gt;Data timeliness: Our image dataset is &lt;strong&gt;updated until June 2023&lt;/strong&gt;, and information subsequent to this date may not be covered.&lt;/li&gt; &#xA; &lt;li&gt;Constraints in Individuals and Intellectual Property (IP): The model&#39;s capacity to recognize specific individuals or IPs is limited, potentially failing to comprehensively cover all well-known personalities or brands.&lt;/li&gt; &#xA; &lt;li&gt;Limited Capacity for Complex Instruction: When faced with intricate multi-step instructions, the model&#39;s understanding and execution capabilities require enhancement.&lt;/li&gt; &#xA; &lt;li&gt;Insufficient Counting Accuracy: Particularly in complex scenes, the accuracy of object counting is not high, necessitating further improvements.&lt;/li&gt; &#xA; &lt;li&gt;Weak Spatial Reasoning Skills: Especially in 3D spaces, the model&#39;s inference of object positional relationships is inadequate, making it difficult to precisely judge the relative positions of objects.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These limitations serve as ongoing directions for model optimization and improvement, and we are committed to continually enhancing the model&#39;s performance and scope of application.&lt;/p&gt; &#xA;&lt;h2&gt;🐳 Docker&lt;/h2&gt; &#xA;&lt;p&gt;To simplify the deploy process, we provide docker images with pre-build environments: &lt;a href=&#34;https://hub.docker.com/r/qwenllm/qwenvl&#34;&gt;qwenllm/qwenvl&lt;/a&gt;. You only need to install the driver and download model files to launch demos.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --gpus all --ipc=host --network=host --rm --name qwen2 -it qwenllm/qwenvl:2-cu121 bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our paper and code useful in your research, please consider giving a star &lt;span&gt;⭐&lt;/span&gt; and citation &lt;span&gt;📝&lt;/span&gt; :)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;@article{Qwen2VL,&#xA;  title={Qwen2-VL: Enhancing Vision-Language Model&#39;s Perception of the World at Any Resolution},&#xA;  author={Wang, Peng and Bai, Shuai and Tan, Sinan and Wang, Shijie and Fan, Zhihao and Bai, Jinze and Chen, Keqin and Liu, Xuejing and Wang, Jialin and Ge, Wenbin and Fan, Yang and Dang, Kai and Du, Mengfei and Ren, Xuancheng and Men, Rui and Liu, Dayiheng and Zhou, Chang and Zhou, Jingren and Lin, Junyang},&#xA;  journal={arXiv preprint arXiv:2409.12191},&#xA;  year={2024}&#xA;}&#xA;&#xA;@article{Qwen-VL,&#xA;  title={Qwen-VL: A Versatile Vision-Language Model for Understanding, Localization, Text Reading, and Beyond},&#xA;  author={Bai, Jinze and Bai, Shuai and Yang, Shusheng and Wang, Shijie and Tan, Sinan and Wang, Peng and Lin, Junyang and Zhou, Chang and Zhou, Jingren},&#xA;  journal={arXiv preprint arXiv:2308.12966},&#xA;  year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt;</summary>
  </entry>
</feed>