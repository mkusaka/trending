<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-27T01:43:17Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>databrickslabs/dolly</title>
    <updated>2023-03-27T01:43:17Z</updated>
    <id>tag:github.com,2023-03-27:/databrickslabs/dolly</id>
    <link href="https://github.com/databrickslabs/dolly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dolly&lt;/h1&gt; &#xA;&lt;p&gt;This fine-tunes the &lt;a href=&#34;https://huggingface.co/EleutherAI/gpt-j-6B&#34;&gt;GPT-J 6B&lt;/a&gt; model on the &lt;a href=&#34;https://huggingface.co/datasets/tatsu-lab/alpaca&#34;&gt;Alpaca&lt;/a&gt; dataset using a Databricks notebook. Please note that while GPT-J 6B is &lt;a href=&#34;https://huggingface.co/EleutherAI/gpt-j-6B&#34;&gt;Apache 2.0 licensed&lt;/a&gt;, the Alpaca dataset is licensed under &lt;a href=&#34;https://huggingface.co/datasets/tatsu-lab/alpaca&#34;&gt;Creative Commons NonCommercial (CC BY-NC 4.0)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started Training&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;dolly&lt;/code&gt; repo to Databricks (under Repos click Add Repo, enter &lt;code&gt;https://github.com/databrickslabs/dolly.git&lt;/code&gt;, then click Create Repo).&lt;/li&gt; &#xA; &lt;li&gt;Start a &lt;code&gt;12.2 LTS ML (includes Apache Spark 3.3.2, GPU, Scala 2.12)&lt;/code&gt; single-node cluster with node type having 8 A100 GPUs (e.g. &lt;code&gt;Standard_ND96asr_v4&lt;/code&gt; or &lt;code&gt;p4d.24xlarge&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;train_dolly&lt;/code&gt; notebook in the &lt;code&gt;dolly&lt;/code&gt; repo, attach to your GPU cluster, and run all cells. When training finishes, the notebook will save the model under &lt;code&gt;/dbfs/dolly_training&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Unit Tests Locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pyenv local 3.8.13&#xA;python -m venv .venv&#xA;. .venv/bin/activate&#xA;pip install -r requirements_dev.txt&#xA;./run_pytest.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>binary-husky/chatgpt_academic</title>
    <updated>2023-03-27T01:43:17Z</updated>
    <id>tag:github.com,2023-03-27:/binary-husky/chatgpt_academic</id>
    <link href="https://github.com/binary-husky/chatgpt_academic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中科院科研工作专用ChatGPT，特别优化学术Paper润色体验，支持自定义快捷按钮，支持markdown表格显示，Tex公式双显示，代码显示功能完善，新增本地Python工程剖析功能/自我剖析功能&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT 学术优化&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果喜欢这个项目，请给它一个Star；如果你发明了更好用的学术快捷键，欢迎发issue或者pull requests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you like this project, please give it a Star. If you&#39;ve come up with more useful academic shortcuts, feel free to open an issue or pull request.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;功能&lt;/th&gt; &#xA;    &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;一键润色&lt;/td&gt; &#xA;    &lt;td&gt;支持一键润色、一键查找论文语法错误&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;一键中英互译&lt;/td&gt; &#xA;    &lt;td&gt;一键中英互译&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;一键代码解释&lt;/td&gt; &#xA;    &lt;td&gt;可以正确显示代码、解释代码&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;自定义快捷键&lt;/td&gt; &#xA;    &lt;td&gt;支持自定义快捷键&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;配置代理服务器&lt;/td&gt; &#xA;    &lt;td&gt;支持配置代理服务器&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;模块化设计&lt;/td&gt; &#xA;    &lt;td&gt;支持自定义高阶的实验性功能&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;自我程序剖析&lt;/td&gt; &#xA;    &lt;td&gt;[实验性功能] 一键读懂本项目的源代码&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;程序剖析&lt;/td&gt; &#xA;    &lt;td&gt;[实验性功能] 一键可以剖析其他Python/C++项目&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;读论文&lt;/td&gt; &#xA;    &lt;td&gt;[实验性功能] 一键解读latex论文全文并生成摘要&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;批量注释生成&lt;/td&gt; &#xA;    &lt;td&gt;[实验性功能] 一键批量生成函数注释&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;chat分析报告生成&lt;/td&gt; &#xA;    &lt;td&gt;[实验性功能] 运行后自动生成总结汇报&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;公式显示&lt;/td&gt; &#xA;    &lt;td&gt;可以同时显示公式的tex形式和渲染形式&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;图片显示&lt;/td&gt; &#xA;    &lt;td&gt;可以在markdown中显示图片&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;支持GPT输出的markdown表格&lt;/td&gt; &#xA;    &lt;td&gt;可以输出支持GPT的markdown表格&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新界面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227528413-36ab42da-d589-4ef1-ba75-28aa02442d05.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;所有按钮都通过读取functional.py动态生成，可随意加自定义功能，解放粘贴板&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;img/公式.gif&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;代码的显示自然也不在话下 &lt;a href=&#34;https://www.bilibili.com/video/BV1F24y147PD/&#34;&gt;https://www.bilibili.com/video/BV1F24y147PD/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;img/润色.gif&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持GPT输出的markdown表格&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/binary-husky/chatgpt_academic/master/img/demo2.jpg&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果输出包含公式，会同时以tex形式和渲染形式显示，方便复制和阅读&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/binary-husky/chatgpt_academic/master/img/demo.jpg&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;懒得看项目代码？整个工程直接给chatgpt炫嘴里&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226935232-6b6a73ce-8900-4aee-93f9-733c7e6fef53.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;直接运行 (Windows or Linux or MacOS)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 下载项目&#xA;git clone https://github.com/binary-husky/chatgpt_academic.git&#xA;cd chatgpt_academic&#xA;# 在config.py中，配置 海外Proxy 和 OpenAI API KEY&#xA;- 1.如果你在国内，需要设置海外代理才能够使用 OpenAI API，你可以通过 config.py 文件来进行设置。&#xA;- 2.配置 OpenAI API KEY。你需要在 OpenAI 官网上注册并获取 API KEY。一旦你拿到了 API KEY，在 config.py 文件里配置好即可。&#xA;# 安装依赖&#xA;python -m pip install -r requirements.txt&#xA;# 运行&#xA;python main.py&#xA;&#xA;# 测试实验性功能&#xA;## 测试C++项目头文件分析&#xA;input区域 输入 ./crazy_functions/test_project/cpp/libJPG ， 然后点击 &#34;[实验] 解析整个C++项目（input输入项目根路径）&#34;&#xA;## 测试给Latex项目写摘要&#xA;input区域 输入 ./crazy_functions/test_project/latex/attention ， 然后点击 &#34;[实验] 读tex论文写摘要（input输入项目根路径）&#34;&#xA;## 测试Python项目分析&#xA;input区域 输入 ./crazy_functions/test_project/python/dqn ， 然后点击 &#34;[实验] 解析整个py项目（input输入项目根路径）&#34;&#xA;## 测试自我代码解读&#xA;点击 &#34;[实验] 请解析并解构此项目本身&#34;&#xA;## 测试实验功能模板函数（要求gpt回答几个数的平方是什么），您可以根据此函数为模板，实现更复杂的功能&#xA;点击 &#34;[实验] 实验功能函数模板&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用docker (Linux)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 下载项目&#xA;git clone https://github.com/binary-husky/chatgpt_academic.git&#xA;cd chatgpt_academic&#xA;# 配置 海外Proxy 和 OpenAI API KEY&#xA;config.py&#xA;# 安装&#xA;docker build -t gpt-academic .&#xA;# 运行&#xA;docker run --rm -it --net=host gpt-academic&#xA;&#xA;# 测试实验性功能&#xA;## 测试自我代码解读&#xA;点击 &#34;[实验] 请解析并解构此项目本身&#34;&#xA;## 测试实验功能模板函数（要求gpt回答几个数的平方是什么），您可以根据此函数为模板，实现更复杂的功能&#xA;点击 &#34;[实验] 实验功能函数模板&#34;&#xA;##（请注意在docker中运行时，需要额外注意程序的文件访问权限问题）&#xA;## 测试C++项目头文件分析&#xA;input区域 输入 ./crazy_functions/test_project/cpp/libJPG ， 然后点击 &#34;[实验] 解析整个C++项目（input输入项目根路径）&#34;&#xA;## 测试给Latex项目写摘要&#xA;input区域 输入 ./crazy_functions/test_project/latex/attention ， 然后点击 &#34;[实验] 读tex论文写摘要（input输入项目根路径）&#34;&#xA;## 测试Python项目分析&#xA;input区域 输入 ./crazy_functions/test_project/python/dqn ， 然后点击 &#34;[实验] 解析整个py项目（input输入项目根路径）&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;自定义新的便捷按钮（学术快捷键自定义）&lt;/h2&gt; &#xA;&lt;p&gt;打开functional.py，添加条目如下，然后重启程序即可。（如果按钮已经添加成功并可见，那么前缀、后缀都支持热修改，无需重启程序即可生效。） 例如&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;超级英译中&#34;: {&#xA;&#xA;    # 前缀，会被加在你的输入之前。例如，用来描述你的要求，例如翻译、解释代码、润色等等&#xA;    &#34;Prefix&#34;: &#34;请翻译把下面一段内容成中文，然后用一个markdown表格逐一解释文中出现的专有名词：\n\n&#34;, &#xA;    &#xA;    # 后缀，会被加在你的输入之后。例如，配合前缀可以把你的输入内容用引号圈起来。&#xA;    &#34;Suffix&#34;: &#34;&#34;,&#xA;    &#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226899272-477c2134-ed71-4326-810c-29891fe4a508.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;如果你发明了更好用的学术快捷键，欢迎发issue或者pull requests！&lt;/p&gt; &#xA;&lt;h2&gt;配置代理&lt;/h2&gt; &#xA;&lt;p&gt;在&lt;code&gt;config.py&lt;/code&gt;中修改端口与代理软件对应&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226571294-37a47cd9-4d40-4c16-97a2-d360845406f7.png&#34; width=&#34;500&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226838985-e5c95956-69c2-4c23-a4dd-cd7944eeb451.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;配置完成后，你可以用以下命令测试代理是否工作，如果一切正常，下面的代码将输出你的代理服务器所在地：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python check_proxy.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;兼容性测试&lt;/h2&gt; &#xA;&lt;h3&gt;图片显示：&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226906087-b5f1c127-2060-4db9-af05-487643b21ed9.png&#34; height=&#34;200&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226906703-7226495d-6a1f-4a53-9728-ce6778cbdd19.png&#34; height=&#34;200&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;如果一个程序能够读懂并剖析自己：&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226936850-c77d7183-0749-4c1c-9875-fd4891842d0c.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226936618-9b487e4b-ab5b-4b6e-84c6-16942102e917.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;其他任意Python/Cpp项目剖析：&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226935232-6b6a73ce-8900-4aee-93f9-733c7e6fef53.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/226969067-968a27c1-1b9c-486b-8b81-ab2de8d3f88a.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Latex论文一键阅读理解与摘要生成&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504406-86ab97cd-f208-41c3-8e4a-7000e51cf980.png&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;自动报告生成&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227503770-fe29ce2c-53fd-47b0-b0ff-93805f0c2ff4.png&#34; height=&#34;300&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504617-7a497bb3-0a2a-4b50-9a8a-95ae60ea7afd.png&#34; height=&#34;300&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504005-efeaefe0-b687-49d0-bf95-2d7b7e66c348.png&#34; height=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;模块化功能设计&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504981-4c6c39c0-ae79-47e6-bffe-0e6442d9da65.png&#34; height=&#34;400&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/96192199/227504931-19955f78-45cd-4d1c-adac-e71e50957915.png&#34; height=&#34;400&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;参考项目&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/Python-Markdown/markdown&#xA;https://github.com/gradio-app/gradio&#xA;https://github.com/polarwinkel/mdtex2html&#xA;https://github.com/GaiZhenbiao/ChuanhuChatGPT&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>techwithtim/Python-Platformer</title>
    <updated>2023-03-27T01:43:17Z</updated>
    <id>tag:github.com,2023-03-27:/techwithtim/Python-Platformer</id>
    <link href="https://github.com/techwithtim/Python-Platformer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Python-Platformer&lt;/h1&gt;</summary>
  </entry>
</feed>