<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-24T02:24:16Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>run-llama/rags</title>
    <updated>2023-11-24T02:24:16Z</updated>
    <id>tag:github.com,2023-11-24:/run-llama/rags</id>
    <link href="https://github.com/run-llama/rags" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RAGs&lt;/h1&gt; &#xA;&lt;p&gt;RAGs is a Streamlit app that lets you create a RAG pipeline from a data source using natural language.&lt;/p&gt; &#xA;&lt;p&gt;You get to do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Describe your task (e.g. &#34;load this web page&#34;) and the parameters you want from your RAG systems (e.g. &#34;i want to retrieve X number of docs&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Go into the config view and view/alter generated parameters (top-k, summarization, etc.) as needed.&lt;/li&gt; &#xA; &lt;li&gt;Query the RAG agent over data with your questions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This project is inspired by &lt;a href=&#34;https://openai.com/blog/introducing-gpts&#34;&gt;GPTs&lt;/a&gt;, launched by OpenAI.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Setup&lt;/h2&gt; &#xA;&lt;p&gt;Clone this project, go into the &lt;code&gt;rags&lt;/code&gt; project folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, we use OpenAI for both the builder agent as well as the generated RAG agent. Please &lt;code&gt;.streamlit/secrets.toml&lt;/code&gt; in the home folder.&lt;/p&gt; &#xA;&lt;p&gt;Then put the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openai_key = &#34;&amp;lt;openai_key&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the app from the &#34;home page&#34; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;streamlit run 1_üè†_Home.py&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Detailed Overview&lt;/h2&gt; &#xA;&lt;p&gt;The app contains the following sections, corresponding to the steps listed above.&lt;/p&gt; &#xA;&lt;h3&gt;1. üè† Home Page&lt;/h3&gt; &#xA;&lt;p&gt;This is the section where you build a RAG pipeline by instructing the &#34;builder agent&#34;. Typically to setup a RAG pipeline you need the following components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Describe the dataset. Currently we support either &lt;strong&gt;a single local file&lt;/strong&gt; or a &lt;strong&gt;web page&lt;/strong&gt;. We&#39;re open to suggestions here!&lt;/li&gt; &#xA; &lt;li&gt;Describe the task. Concretely this description will be used to initialize the &#34;system prompt&#34; of the LLM powering the RAG pipeline.&lt;/li&gt; &#xA; &lt;li&gt;Define the typical parameters for a RAG setup. See the below section for the list of parameters.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2. ‚öôÔ∏è RAG Config&lt;/h3&gt; &#xA;&lt;p&gt;This section contains the RAG parameters, generated by the &#34;builder agent&#34; in the previous section. In this section, you have a UI showcasing the generated parameters and have full freedom to manually edit/change them as necessary.&lt;/p&gt; &#xA;&lt;p&gt;Currently the set of parameters is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System Prompt&lt;/li&gt; &#xA; &lt;li&gt;Include Summarization: whether to also add a summarization tool (instead of only doing top-k retrieval.)&lt;/li&gt; &#xA; &lt;li&gt;Top-K&lt;/li&gt; &#xA; &lt;li&gt;Chunk Size&lt;/li&gt; &#xA; &lt;li&gt;Embed Model&lt;/li&gt; &#xA; &lt;li&gt;LLM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you manually change parameters, you can press the &#34;Update Agent&#34; button in order to update the agent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-{tip}&#34;&gt;If you don&#39;t see the `Update Agent` button, that&#39;s because you haven&#39;t created the agent yet. Please go to the previous &#34;Home&#34; page and complete the setup process.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can always add more parameters to make this more &#34;advanced&#34; üõ†Ô∏è, but thought this would be a good place to start.&lt;/p&gt; &#xA;&lt;h3&gt;3. Generated RAG Agent&lt;/h3&gt; &#xA;&lt;p&gt;Once your RAG agent is created, you have access to this page.&lt;/p&gt; &#xA;&lt;p&gt;This is a standard chatbot interface where you can query the RAG agent and it will answer questions over your data.&lt;/p&gt; &#xA;&lt;p&gt;It will be able to pick the right RAG tools (either top-k vector search or optionally summarization) in order to fulfill the query.&lt;/p&gt; &#xA;&lt;h2&gt;Supported LLMs and Embeddings&lt;/h2&gt; &#xA;&lt;h3&gt;Builder Agent&lt;/h3&gt; &#xA;&lt;p&gt;By default the builder agent uses OpenAI. This is defined in the &lt;code&gt;builder_config.py&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;You can customize this to whatever LLM you want (an example is provided for Anthropic).&lt;/p&gt; &#xA;&lt;p&gt;Note that GPT-4 variants will give the most reliable results in terms of actually constructing an agent (we couldn&#39;t get Claude to work).&lt;/p&gt; &#xA;&lt;h3&gt;Generated RAG Agent&lt;/h3&gt; &#xA;&lt;p&gt;You can set the configuration either through natural language or manually for both the embedding model and LLM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;LLM&lt;/strong&gt;: We support the following LLMs, but you need to explicitly specify the ID to the builder agent. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;OpenAI: ID is &#34;openai:&amp;lt;model_name&amp;gt;&#34; e.g. &#34;openai:gpt-4-1106-preview&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Anthropic: ID is &#34;anthropic:&amp;lt;model_name&amp;gt;&#34; e.g. &#34;anthropic:claude-2&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Replicate: ID is &#34;replicate:&amp;lt;model_name&amp;gt;&#34;&lt;/li&gt; &#xA;   &lt;li&gt;HuggingFace: ID is &#34;local:&amp;lt;model_name&amp;gt;&#34; e.g. &#34;local:BAAI/bge-small-en&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embeddings&lt;/strong&gt;: Supports text-embedding-ada-002 by default, but also supports Hugging Face models. To use a hugging face model simply prepend with local, e.g. local:BAAI/bge-small-en.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues / Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Running into issues? Please file a Github issue or join our &lt;a href=&#34;https://discord.gg/dGcwcsnxhU&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deepseagirl/easylkb</title>
    <updated>2023-11-24T02:24:16Z</updated>
    <id>tag:github.com,2023-11-24:/deepseagirl/easylkb</id>
    <link href="https://github.com/deepseagirl/easylkb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;easylkb - Easy Linux Kernel Builder&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;easylkb - Easy Linux Kernel Builder&lt;/h1&gt; &#xA;&lt;p&gt;easylkb is a simple script designed to make Linux Kernel Debugging easier and more accessible.&lt;/p&gt; &#xA;&lt;h2&gt;How do you install easylkb?&lt;/h2&gt; &#xA;&lt;p&gt;easylkb is best run on a bare metal Linux system. You need the following things installed in order to use it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python3&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;gcc&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;qemu&lt;/li&gt; &#xA; &lt;li&gt;debootstrap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install all prerequisites on Debian/Ubuntu&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install make gcc flex bison libncurses-dev libelf-dev libssl-dev debootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can clone this repo and run from the easylkb directory, or you can install with pip (not yet lol).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install easylkb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How do you use easylkb?&lt;/h2&gt; &#xA;&lt;p&gt;Build a specific mainline kernel version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;easylkb -k 6.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build some other kernel in a directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;easylkb -p path/to/linux/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Command line flags are tied to specific parts of the build process.&lt;/p&gt; &#xA;&lt;p&gt;To (d)ownload, (c)onfigure, and co(m)pile a kernel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;easylkb -k 6.2 -dcm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a Debian (i)mage from this kernel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;easylkb -k 6.2 -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To (r)un the generated image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;easylkb -k 6.2 -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combine all of these steps into one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;easylkb -k 6.2 -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When it&#39;s running, it will run qemu with the Debian image and expose ssh and GDB debugging features accessible via localhost.&lt;/p&gt; &#xA;&lt;h2&gt;How Do I Interact With The Image?&lt;/h2&gt; &#xA;&lt;p&gt;The image, keys, and run script are stored in the img/ directory within the kernel source.&lt;/p&gt; &#xA;&lt;p&gt;You can ssh into your image like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh root@localhost -p 10021 -i ~/kernel/linux-6.2/img/bullseye.id_rsa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default login for the resulting image is the user &#34;root&#34; with no password.&lt;/p&gt; &#xA;&lt;p&gt;This is an example ssh config entry for the resulting image, which you can add to your &lt;code&gt;~/.ssh/config&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Host linux62&#xA;  HostName localhost&#xA;  User root&#xA;  Port 10021&#xA;  IdentityFile ~/kernel/linux-6.2/img/bullseye.id_rsa&#xA;  StrictHostKeyChecking no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can ssh into your kernel by doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh linux62&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can scp files by doing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scp myfile.bin linux62:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Kernel Debugging&lt;/h2&gt; &#xA;&lt;p&gt;To debug the kernel, you need &lt;code&gt;$KERNEL_DIR/scripts/gdb/vmlinux-gdb.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add this to your &lt;code&gt;~/.gdbinit&lt;/code&gt; file if you want to debug this kernel, changing the path to the kernel source you&#39;re working with.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;add-auto-load-safe-path /home/user/kernel/linux-6.2/scripts/gdb/vmlinux-gdb.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now to debug just do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /path/to/your/kernel/&#xA;gdb ./vmlinux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;re in gdb just do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(gdb) lx-symbols&#xA;(gdb) target remote :1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wow! You&#39;re debugging the kernel you just built, pretty neat.&lt;/p&gt; &#xA;&lt;p&gt;For more info on kernel debugging with gdb:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.kernel.org/dev-tools/gdb-kernel-debugging.html&#34;&gt;https://docs.kernel.org/dev-tools/gdb-kernel-debugging.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Orange-Cyberdefense/arsenal</title>
    <updated>2023-11-24T02:24:16Z</updated>
    <id>tag:github.com,2023-11-24:/Orange-Cyberdefense/arsenal</id>
    <link href="https://github.com/Orange-Cyberdefense/arsenal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arsenal is just a quick inventory and launcher for hacking programs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Arsenal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Orange-Cyberdefense/arsenal/master/img/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Arsenal is just a quick inventory, reminder and launcher for pentest commands. &lt;br&gt;This project written by pentesters for pentesters simplify the use of all the hard-to-remember commands&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Orange-Cyberdefense/arsenal/master/img/arsenal.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In arsenal you can search for a command, select one and it&#39;s prefilled directly in your terminal. This functionality is independent of the shell used. Indeed arsenal emulates real user input (with TTY arguments and IOCTL) so arsenal works with all shells and your commands will be in the history.&lt;/p&gt; &#xA;&lt;p&gt;You have to enter arguments if needed, but arsenal supports global variables. &lt;br&gt; For example, during a pentest we can set the variable &lt;code&gt;ip&lt;/code&gt; to prefill all commands using an ip with the right one.&lt;/p&gt; &#xA;&lt;p&gt;To do that you just have to enter the following command in arsenal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;set ip=10.10.10.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Authors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Guillaume Muh&lt;/li&gt; &#xA; &lt;li&gt;mayfly&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This project is inspired by navi (&lt;a href=&#34;https://github.com/denisidoro/navi&#34;&gt;https://github.com/denisidoro/navi&lt;/a&gt;) because the original version was in bash and too hard to understand to add features&lt;/p&gt; &#xA;&lt;h2&gt;Arsenal new features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Orange-Cyberdefense/arsenal/master/img/arsenal_update.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New colors&lt;/li&gt; &#xA; &lt;li&gt;Add tmux new pane support (with -t)&lt;/li&gt; &#xA; &lt;li&gt;Add default values in cheatsheets commands with &lt;code&gt;&amp;lt;argument|default_value&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support description inside cheatsheets&lt;/li&gt; &#xA; &lt;li&gt;New categories and Tags&lt;/li&gt; &#xA; &lt;li&gt;New cheatsheets&lt;/li&gt; &#xA; &lt;li&gt;Add yml support (thx @0xswitch )&lt;/li&gt; &#xA; &lt;li&gt;Add fzf support with ctrl+t (thx @mgp25)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install &amp;amp; Launch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with pip :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install arsenal-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run (we also advice you to add this alias : &lt;code&gt;alias a=&#39;arsenal&#39;&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;arsenal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;manually:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/Orange-Cyberdefense/arsenal.git&#xA;cd arsenal&#xA;python3 -m pip install -r requirements.txt&#xA;./run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside your .bashrc or .zshrc add the path to &lt;code&gt;run&lt;/code&gt; to help you do that you could launch the addalias.sh script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./addalias.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also if you are an Arch user you can install from the AUR:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://aur.archlinux.org/arsenal.git&#xA;cd arsenal &#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Or with an AUR helper like yay:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yay -S arsenal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Launch in tmux mode&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./run -t #&amp;nbsp;if you launch arsenal in a tmux window with one pane, it will split the window and send the command to the otherpane without quitting arsenal&#xA;         #&amp;nbsp;if the window is already splited the command will be send to the other pane without quitting arsenal&#xA;./run -t -e # just like the -t mode but with direct execution in the other pane without quitting arsenal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Add external cheatsheets&lt;/h2&gt; &#xA;&lt;p&gt;You could add your own cheatsheets insode the my_cheats folder or in the ~/.cheats folder.&lt;/p&gt; &#xA;&lt;p&gt;You could also add additional paths to the file &lt;code&gt;&amp;lt;arsenal_home&amp;gt;/arsenal/modules/config.py&lt;/code&gt;, arsenal reads &lt;code&gt;.md&lt;/code&gt; (MarkDown) and &lt;code&gt;.rst&lt;/code&gt; (RestructuredText).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CHEATS_PATHS = [&#xA;    join(BASEPATH, &#34;cheats&#34;), # DEFAULT&#xA;    join(HOMEPATH, &#34;docs/my_cheats&#34;)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cheatsheets examples are in &lt;code&gt;&amp;lt;arsenal_home&amp;gt;/cheats&lt;/code&gt;: &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;README.rst&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you got on error on color init try :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export TERM=&#39;xterm-256color&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;--&lt;/p&gt; &#xA;&lt;p&gt;If you have the following exception when running Arsenal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ImportError: cannot import name &#39;FullLoader&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;First, check that requirements are installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the exception is still there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -U PyYAML&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;--&lt;/p&gt; &#xA;&lt;p&gt;If you encounter an exception similar to the following (contains TIOCSTI in strace) when running Arsenal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[...]&#xA;    fcntl.ioctl(stdin, termios.TIOCSTI, c)&#xA;OSError: [Errno 5] Input/output error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you may need to re-enable TIOCSTI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo sysctl -w dev.tty.legacy_tiocsti=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mindmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Active directory mindmap &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Due to csp on github when you open the svg, we moved the AD mindmap and the source to this repository : &lt;a href=&#34;https://github.com/Orange-Cyberdefense/ocd-mindmaps&#34;&gt;https://github.com/Orange-Cyberdefense/ocd-mindmaps&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg&#34;&gt;https://orange-cyberdefense.github.io/ocd-mindmaps/img/pentest_ad_dark_2022_11.svg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;AD mindmap black version &lt;img src=&#34;https://raw.githubusercontent.com/Orange-Cyberdefense/arsenal/master/mindmap/pentest_ad_black.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Exchange Mindmap (thx to @snovvcrash) &lt;img src=&#34;https://raw.githubusercontent.com/Orange-Cyberdefense/arsenal/master/mindmap/Pentesting_MS_Exchange_Server_on_the_Perimeter.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Active directory ACE mindmap &lt;img src=&#34;https://raw.githubusercontent.com/Orange-Cyberdefense/arsenal/master/mindmap/ACEs_xmind.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO cheatsheets&lt;/h2&gt; &#xA;&lt;h3&gt;reverse shell&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; msfvenom&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; php&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; python&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; perl&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; powershell&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; java&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;whitebox analysis grep regex&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; php&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; nodejs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hash&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;h4&gt;smb&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; enum4linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; smbmap&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; smbget&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rpcclient&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; rpcinfo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; nbtscan&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; impacket&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;kerberos &amp;amp; AD&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; impacket&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; bloodhound&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rubeus&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; powerview&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; shadow credentials attack&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; samaccountname attack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;MITM&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; mitm6&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; responder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Unserialize&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ysoserial&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ysoserial.net&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;bruteforce &amp;amp; pass cracking&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hydra&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hashcat&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; john&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;scan&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; nmap&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; eyewitness&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; gowitness&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;fuzz&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; gobuster&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ffuf&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; wfuzz&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;DNS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; dig&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; dnsrecon&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; dnsenum&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; sublist3r&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;rpc&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; rpcbind&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;netbios-ssn&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; snmpwalk&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; snmp-check&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; onesixtyone&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;sql&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; sqlmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;oracle&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; oscanner&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; sqlplus&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; tnscmd10g&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;mysql&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; mysql&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;nfs&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; showmount&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;rdp&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; xfreerdp&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rdesktop&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ncrack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;mssql&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; sqsh&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;winrm&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; evilwinrm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;redis&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; redis-cli&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;postgres&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; psql&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; pgdump&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;vnc&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; vncviewer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;x11&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; xspy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; xwd&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; xwininfo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;ldap&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ldapsearch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;https&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; sslscan&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;web&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; burp&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; nikto&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; tplmap&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;app web&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; drupwn&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; wpscan&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; nuclei&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>