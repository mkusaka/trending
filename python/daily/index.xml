<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T01:44:24Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lyuchenyang/Macaw-LLM</title>
    <updated>2023-06-01T01:44:24Z</updated>
    <id>tag:github.com,2023-06-01:/lyuchenyang/Macaw-LLM</id>
    <link href="https://github.com/lyuchenyang/Macaw-LLM" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Macaw-LLM: Multi-Modal Language Modeling with Image, Video, Audio, and Text Integration&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/assets/logo-text.png&#34; alt=&#34;Logo&#34; width=&#34;200&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Macaw-LLM: Multi-Modal Language Modeling with Image, Video, Audio, and Text Integration üåêüñºÔ∏èüìπüéµüìù&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Version-1.0.0-blue.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY%204.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/stars/lyuchenyang/Macaw-LLM?color=yellow&#34; alt=&#34;Stars&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/issues/lyuchenyang/Macaw-LLM?color=red&#34; alt=&#34;Issues&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/python-3.8-purple.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt; &#xA; &lt;!-- **Authors:** --&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;¬π &lt;a href=&#34;https://lyuchenyang.github.io&#34;&gt;Chenyang Lyu&lt;/a&gt;, ¬≤ Bingshuai Liu, ¬≥ &lt;a href=&#34;https://minghao-wu.github.io/&#34;&gt;Minghao Wu&lt;/a&gt;, ‚Å¥ &lt;a href=&#34;https://seeledu.github.io/index-en.html&#34;&gt;Zefeng Du&lt;/a&gt;,&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;‚Åµ &lt;a href=&#34;https://timhuang1.github.io/&#34;&gt;Xinting Huang&lt;/a&gt;, ‚Åµ &lt;a href=&#34;http://www.zptu.net//&#34;&gt;Zhaopeng Tu&lt;/a&gt;, ‚Åµ &lt;a href=&#34;https://shumingshi.github.io/&#34;&gt;Shuming Shi&lt;/a&gt;, ‚Åµ &lt;a href=&#34;http://www.longyuewang.com/&#34;&gt;Longyue Wang&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;!-- **Affiliations:** --&gt; &#xA; &lt;p&gt;&lt;em&gt;¬π Dublin City University, ¬≤ Xiamen University, ¬≥ Monash University, ‚Å¥ University of Macau, ‚Åµ Tencent AI Lab&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Macaw-LLM is an exploratory endeavor that pioneers multi-modal language modeling by seamlessly combining image, video, audio, and text data, built upon the foundations of CLIP, Whisper, and LLaMA.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents üìö&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/#alignment-strategy&#34;&gt;Alignment Strategy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/#future-work-and-contributions&#34;&gt;Future Work and Contributions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction üìñ&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/lyuchenyang/Macaw-LLM/main/assets/alignment.png&#34; alt=&#34;Figure Description or Alt Text&#34; width=&#34;70%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- ![Figure Description or Alt Text](alignment.png) --&gt; &#xA;&lt;p&gt;In recent years, the field of language modeling has witnessed remarkable advancements. However, the integration of multiple modalities, such as images, videos, audios, and text, has remained a challenging task. Macaw-LLM is a model of its kind, bringing together state-of-the-art models for processing visual, auditory, and textual information, namely CLIP, Whisper, and LLaMA.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features üîë&lt;/h2&gt; &#xA;&lt;p&gt;Macaw-LLM boasts the following unique features:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple &amp;amp; Fast Alignment&lt;/strong&gt;: Macaw-LLM enables seamless integration of multi-modal data through simple and fast alignment to LLM embeddings. This efficient process ensures quick adaptation of diverse data types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One-Stage Instruction Fine-Tuning&lt;/strong&gt;: Our model streamlines the adaptation process through one-stage instruction fine-tuning, promoting a more efficient learning experience.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Architecture üîß&lt;/h2&gt; &#xA;&lt;p&gt;Macaw-LLM is composed of three main components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLIP&lt;/strong&gt;: Responsible for encoding images and video frames.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Whisper&lt;/strong&gt;: Responsible for encoding audio data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;LLM&lt;/strong&gt;(LLaMA/Vicuna/Bloom): The language model that encodes instructions and generates responses.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The integration of these models allows Macaw-LLM to process and analyze multi-modal data effectively.&lt;/p&gt; &#xA;&lt;h2&gt;Alignment Strategy üìè&lt;/h2&gt; &#xA;&lt;p&gt;Our novel alignment strategy enables faster adaptation by efficiently bridging multi-modal features to textual features. The process involves:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Encoding multi-modal features with CLIP and Whisper.&lt;/li&gt; &#xA; &lt;li&gt;Feeding the encoded features into an attention function, wherein the multi-modal features serve as the query and the embedding matrix of LLaMA as the key and value.&lt;/li&gt; &#xA; &lt;li&gt;Injecting the outputs into the input sequence (before instruction tokens) of LLaMA, allowing for a streamlined alignment process with minimal additional parameters.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation üíª&lt;/h2&gt; &#xA;&lt;p&gt;To install Macaw-LLM, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repository&#xA;git clone https://github.com/lyuchenyang/Macaw-LLM.git&#xA;&#xA;# Change to the Macaw-LLM directory&#xA;cd Macaw-LLM&#xA;&#xA;# Install required packages&#xA;pip install -r requirements.txt&#xA;&#xA;# Install ffmpeg&#xA;yum install ffmpeg -y&#xA;&#xA;# Install apex&#xA;git clone https://github.com/NVIDIA/apex.git&#xA;cd apex&#xA;python setup.py install&#xA;cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage üöÄ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Downloading dataset:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text data: &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca/raw/main/alpaca_data.json&#34;&gt;stanford_alpaca/alpaca_data.json&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Image data: &lt;a href=&#34;https://cocodataset.org/#home&#34;&gt;COCO Dataset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Video data: &lt;a href=&#34;https://allenai.org/plato/charades/&#34;&gt;Charades&lt;/a&gt; and &lt;a href=&#34;https://video-dialog.com/&#34;&gt;Video Dialog&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dataset preprocessing:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Place the data in three modalities to specific folders - &lt;code&gt;data/text/&lt;/code&gt;, &lt;code&gt;data/image/&lt;/code&gt;, &lt;code&gt;data/video/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Extract frames and audio from videos: &lt;pre&gt;&lt;code&gt;python preprocess_data.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Transform supervised data to dataset: &lt;pre&gt;&lt;code&gt;python preprocess_data_supervised.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Transform unsupervised data to dataset: &lt;pre&gt;&lt;code&gt;python preprocess_data_unsupervised.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Training:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Execute the training script (you can specify the training parameters inside): &lt;pre&gt;&lt;code&gt;./train.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Inference:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Execute the inference script (you can give any customized inputs inside): &lt;pre&gt;&lt;code&gt;./inference.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Future Work and Contributions üöÄ&lt;/h2&gt; &#xA;&lt;p&gt;While our model is still in its early stages, we believe that Macaw-LLM paves the way for future research in the realm of multi-modal language modeling. The integration of diverse data modalities holds immense potential for pushing the boundaries of artificial intelligence and enhancing our understanding of complex real-world scenarios. By introducing Macaw-LLM, we hope to inspire further exploration and innovation in this exciting area of study.&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions from the community to improve and expand Macaw-LLM&#39;s capabilities. ü§ù&lt;/p&gt; &#xA;&lt;h2&gt;ToDo üë®‚Äçüíª&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;More Language Models:&lt;/strong&gt; We aim to extend Macaw-LLM by incorporating additional language models like Dolly, BLOOM, T-5, etc. This will enable more robust and versatile processing and understanding of multi-modal data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Multilingual Support:&lt;/strong&gt; Our next step is to support multiple languages, moving towards true multi-modal and multilingual language models. We believe this will significantly broaden Macaw-LLM&#39;s applicability and enhance its understanding of diverse, global contexts.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{Macaw-LLM,&#xA;  author = {Chenyang Lyu and Bingshuai Liu and Minghao Wu and Zefeng Du and Longyue Wang},&#xA;  title = {Macaw-LLM: Multi-Modal Language Modeling with Image, Video, Audio, and Text Integration},&#xA;  year = {2023},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  howpublished = {\url{https://github.com/lyuchenyang/Macaw-LLM}},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>PromtEngineer/localGPT</title>
    <updated>2023-06-01T01:44:24Z</updated>
    <id>tag:github.com,2023-06-01:/PromtEngineer/localGPT</id>
    <link href="https://github.com/PromtEngineer/localGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with your documents on your local device using GPT models. No data leaves your device and 100% private.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;localGPT&lt;/h1&gt; &#xA;&lt;p&gt;This project was inspired by the original privateGPT (&lt;a href=&#34;https://github.com/imartinez/privateGPT&#34;&gt;https://github.com/imartinez/privateGPT&lt;/a&gt;). Most of the description here is inspired by the original privateGPT.&lt;/p&gt; &#xA;&lt;p&gt;In this model, I have replaced the GPT4ALL model with Vicuna-7B model and we are using the InstructorEmbeddings instead of LlamaEmbeddings as used in the original privateGPT. Both Embeddings as well as LLM will run on GPU instead of CPU. It also has CPU support if you do not have a GPU (see below for instruction).&lt;/p&gt; &#xA;&lt;p&gt;Ask questions to your documents without an internet connection, using the power of LLMs. 100% private, no data leaves your execution environment at any point. You can ingest documents and ask questions without an internet connection!&lt;/p&gt; &#xA;&lt;p&gt;Built with &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/TheBloke/vicuna-7B-1.1-HF&#34;&gt;Vicuna-7B&lt;/a&gt; and &lt;a href=&#34;https://instructor-embedding.github.io/&#34;&gt;InstructorEmbeddings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Environment Setup&lt;/h1&gt; &#xA;&lt;p&gt;In order to set your environment up to run the code here, first install all requirements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test dataset&lt;/h2&gt; &#xA;&lt;p&gt;This repo uses a &lt;a href=&#34;https://constitutioncenter.org/media/files/constitution.pdf&#34;&gt;Constitution of USA &lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions for ingesting your own dataset&lt;/h2&gt; &#xA;&lt;p&gt;Put any and all of your .txt, .pdf, or .csv files into the SOURCE_DOCUMENTS directory in the load_documents() function, replace the docs_path with the absolute path of your source_documents directory.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to ingest all the data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create an index containing the local vectorstore. Will take time, depending on the size of your documents. You can ingest as many documents as you want, and all will be accumulated in the local embeddings database. If you want to start from an empty database, delete the &lt;code&gt;index&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: When you run this for the first time, it will download take time as it has to download the embedding model. In the subseqeunt runs, no data will leave your local enviroment and can be run without internet connection.&lt;/p&gt; &#xA;&lt;h2&gt;Ask questions to your documents, locally!&lt;/h2&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_localGPT.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And wait for the script to require your input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&amp;gt; Enter a query:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hit enter. Wait while the LLM model consumes the prompt and prepares the answer. Once done, it will print the answer and the 4 sources it used as context from your documents; you can then ask another question without re-running the script, just wait for the prompt again.&lt;/p&gt; &#xA;&lt;p&gt;Note: When you run this for the first time, it will need internet connection to download the vicuna-7B model. After that you can turn off your internet connection, and the script inference would still work. No data gets out of your local environment.&lt;/p&gt; &#xA;&lt;p&gt;Type &lt;code&gt;exit&lt;/code&gt; to finish the script.&lt;/p&gt; &#xA;&lt;h1&gt;Run it on CPU&lt;/h1&gt; &#xA;&lt;p&gt;By default, localGPT will use your GPU to run both the &lt;code&gt;ingest.py&lt;/code&gt; and &lt;code&gt;run_localGPT.py&lt;/code&gt; scripts. But if you do not have a GPU and want to run this on CPU, now you can do that (Warning: Its going to be slow!). You will need to use &lt;code&gt;--device_type cpu&lt;/code&gt;flag with both scripts.&lt;/p&gt; &#xA;&lt;p&gt;For Ingestion run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ingest.py --device_type cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to ask a question, run a command like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python run_localGPT.py --device_type cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Selecting the right local models and the power of &lt;code&gt;LangChain&lt;/code&gt; you can run the entire pipeline locally, without any data leaving your environment, and with reasonable performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ingest.py&lt;/code&gt; uses &lt;code&gt;LangChain&lt;/code&gt; tools to parse the document and create embeddings locally using &lt;code&gt;InstructorEmbeddings&lt;/code&gt;. It then stores the result in a local vector database using &lt;code&gt;Chroma&lt;/code&gt; vector store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_localGPT.py&lt;/code&gt; uses a local LLM (Vicuna-7B in this case) to understand questions and create answers. The context for the answers is extracted from the local vector store using a similarity search to locate the right piece of context from the docs.&lt;/li&gt; &#xA; &lt;li&gt;You can replace this local LLM with any other LLM from the HuggingFace. Make sure whatever LLM you select is in the HF format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;h2&gt;Python Version&lt;/h2&gt; &#xA;&lt;p&gt;To use this software, you must have Python 3.10 or later installed. Earlier versions of Python will not compile.&lt;/p&gt; &#xA;&lt;h2&gt;C++ Compiler&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter an error while building a wheel during the &lt;code&gt;pip install&lt;/code&gt; process, you may need to install a C++ compiler on your computer.&lt;/p&gt; &#xA;&lt;h3&gt;For Windows 10/11&lt;/h3&gt; &#xA;&lt;p&gt;To install a C++ compiler on Windows 10/11, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Visual Studio 2022.&lt;/li&gt; &#xA; &lt;li&gt;Make sure the following components are selected: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Universal Windows Platform development&lt;/li&gt; &#xA;   &lt;li&gt;C++ CMake tools for Windows&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the MinGW installer from the &lt;a href=&#34;https://sourceforge.net/projects/mingw/&#34;&gt;MinGW website&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the installer and select the &#34;gcc&#34; component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;NVIDIA Driver&#39;s Issues:&lt;/h3&gt; &#xA;&lt;p&gt;Follow this &lt;a href=&#34;https://linuxconfig.org/how-to-install-the-nvidia-drivers-on-ubuntu-22-04&#34;&gt;page&lt;/a&gt; to install NVIDIA Drivers.&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is a test project to validate the feasibility of a fully local solution for question answering using LLMs and Vector embeddings. It is not production ready, and it is not meant to be used in production. Vicuna-7B is based on the Llama model so that has the original Llama license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>s0md3v/roop</title>
    <updated>2023-06-01T01:44:24Z</updated>
    <id>tag:github.com,2023-06-01:/s0md3v/roop</id>
    <link href="https://github.com/s0md3v/roop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;one-click deepfake (face swap)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Take a video and replace the face in it with a face of your choice. You only need one image of the desired face. No dataset, no training.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it, that&#39;s the software. You can watch some demos &lt;a href=&#34;https://drive.google.com/drive/folders/1KHv8n_rd3Lcr2v7jBq1yPSTWM554Gq8e?usp=sharing&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/s0md3v/roop/main/demo.gif&#34; alt=&#34;demo-gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Better deepfake software than this already exist, this is just a hobby project I created to learn about AI. Users must get consent from the concerned people before using their face and must not hide the fact that it is a deepfake when posting content online. I am not responsible for malicious behaviour of end-users.&lt;/p&gt; &#xA;&lt;p&gt;To prevent misuse, it has a built-in check which prevents the program from working on inappropriate media.&lt;/p&gt; &#xA;&lt;h2&gt;How do I install it?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Issues according installation will be closed without ceremony from now on, we cannot handle the amount of requests.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are two types of installations: basic and gpu-powered.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Basic:&lt;/strong&gt; It is more likely to work on your computer but it will also be very slow. You can follow instructions for the basic install &lt;a href=&#34;https://github.com/s0md3v/roop/wiki/1.-Installation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GPU:&lt;/strong&gt; If you have a good GPU and are ready for solving any software issues you may face, you can enable GPU which is wayyy faster. To do this, first follow the basic install instructions given above and then follow GPU-specific instructions &lt;a href=&#34;https://github.com/s0md3v/roop/wiki/2.-GPU-Acceleration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How do I use it?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: When you run this program for the first time, it will download some models ~300MB in size.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Executing &lt;code&gt;python run.py&lt;/code&gt; command will launch this window: &lt;img src=&#34;https://raw.githubusercontent.com/s0md3v/roop/main/gui-demo.png&#34; alt=&#34;gui-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Choose a face (image with desired face) and the target image/video (image/video in which you want to replace the face) and click on &lt;code&gt;Start&lt;/code&gt;. Open file explorer and navigate to the directory you select your output to be in. You will find a directory named &lt;code&gt;&amp;lt;video_title&amp;gt;&lt;/code&gt; where you can see the frames being swapped in realtime. Once the processing is done, it will create the output file. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t touch the FPS checkbox unless you know what you are doing.&lt;/p&gt; &#xA;&lt;p&gt;Additional command line arguments are given below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;options:&#xA;  -h, --help            show this help message and exit&#xA;  -f SOURCE_IMG, --face SOURCE_IMG&#xA;                        use this face&#xA;  -t TARGET_PATH, --target TARGET_PATH&#xA;                        replace this face&#xA;  -o OUTPUT_FILE, --output OUTPUT_FILE&#xA;                        save output to this file&#xA;  --gpu                 use gpu&#xA;  --keep-fps            maintain original fps&#xA;  --keep-frames         keep frames directory&#xA;  --max-memory MAX_MEMORY&#xA;                        maximum amount of RAM in GB to be used&#xA;  --max-cores CORES_COUNT&#xA;                        number of cores to be use for CPU mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Looking for a CLI mode? Using the -f/--face argument will make the program in cli mode.&lt;/p&gt; &#xA;&lt;h2&gt;Future plans&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve the quality of faces in results&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Replace a selective face throughout the video&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for replacing multiple faces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/&#34;&gt;ffmpeg&lt;/a&gt;: for making video related operations easy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepinsight&#34;&gt;deepinsight&lt;/a&gt;: for their &lt;a href=&#34;https://github.com/deepinsight/insightface&#34;&gt;insightface&lt;/a&gt; project which provided a well-made library and models.&lt;/li&gt; &#xA; &lt;li&gt;and all developers behind libraries used in this project.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>