<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:34:29Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>galaxyproject/galaxy</title>
    <updated>2024-07-01T01:34:29Z</updated>
    <id>tag:github.com,2024-07-01:/galaxyproject/galaxy</id>
    <link href="https://github.com/galaxyproject/galaxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data intensive science for everyone.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. figure:: &lt;a href=&#34;https://galaxyproject.org/images/galaxy-logos/galaxy_project_logo.jpg&#34;&gt;https://galaxyproject.org/images/galaxy-logos/galaxy_project_logo.jpg&lt;/a&gt; :alt: Galaxy Logo&lt;/p&gt; &#xA;&lt;p&gt;The latest information about Galaxy can be found on the &lt;code&gt;Galaxy Community Hub &amp;lt;https://galaxyproject.org/&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;Community support is available at &lt;code&gt;Galaxy Help &amp;lt;https://help.galaxyproject.org/&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/chat-gitter-blue.svg&#34;&gt;https://img.shields.io/badge/chat-gitter-blue.svg&lt;/a&gt; :target: &lt;a href=&#34;https://gitter.im/galaxyproject/Lobby&#34;&gt;https://gitter.im/galaxyproject/Lobby&lt;/a&gt; :alt: Chat on gitter&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/chat-irc.freenode.net%23galaxyproject-blue.svg&#34;&gt;https://img.shields.io/badge/chat-irc.freenode.net%23galaxyproject-blue.svg&lt;/a&gt; :target: &lt;a href=&#34;https://webchat.freenode.net/?channels=galaxyproject&#34;&gt;https://webchat.freenode.net/?channels=galaxyproject&lt;/a&gt; :alt: Chat on irc&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/release-documentation-blue.svg&#34;&gt;https://img.shields.io/badge/release-documentation-blue.svg&lt;/a&gt; :target: &lt;a href=&#34;https://docs.galaxyproject.org/en/master/&#34;&gt;https://docs.galaxyproject.org/en/master/&lt;/a&gt; :alt: Release Documentation&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://travis-ci.org/galaxyproject/galaxy.svg?branch=dev&#34;&gt;https://travis-ci.org/galaxyproject/galaxy.svg?branch=dev&lt;/a&gt; :target: &lt;a href=&#34;https://travis-ci.org/galaxyproject/galaxy&#34;&gt;https://travis-ci.org/galaxyproject/galaxy&lt;/a&gt; :alt: Inspect the test results&lt;/p&gt; &#xA;&lt;h1&gt;Galaxy Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;Galaxy requires Python 3.8 . To check your Python version, run:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -V&#xA;Python 3.8.18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start Galaxy:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sh run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Galaxy completes startup, you should be able to view Galaxy in your browser at: &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more installation details please see: &lt;a href=&#34;https://getgalaxy.org/&#34;&gt;https://getgalaxy.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Documentation is available at: &lt;a href=&#34;https://docs.galaxyproject.org/&#34;&gt;https://docs.galaxyproject.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tutorials on how to use Galaxy, perform scientific analyses with it, develop Galaxy and its tools, and admin a Galaxy server are at: &lt;a href=&#34;https://training.galaxyproject.org/&#34;&gt;https://training.galaxyproject.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tools&lt;/h1&gt; &#xA;&lt;p&gt;Tools can be either installed from the Tool Shed or added manually. For details please see the &lt;code&gt;tutorial &amp;lt;https://galaxyproject.org/admin/tools/add-tool-from-toolshed-tutorial/&amp;gt;&lt;/code&gt;__. Note that not all dependencies for the tools provided in the &lt;code&gt;tool_conf.xml.sample&lt;/code&gt; are included. To install them please visit &#34;Manage dependencies&#34; in the admin interface.&lt;/p&gt; &#xA;&lt;h1&gt;Issues and Galaxy Development&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;CONTRIBUTING.md &amp;lt;CONTRIBUTING.md&amp;gt;&lt;/code&gt;_ .&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bkerler/mtkclient</title>
    <updated>2024-07-01T01:34:29Z</updated>
    <id>tag:github.com,2024-07-01:/bkerler/mtkclient</id>
    <link href="https://github.com/bkerler/mtkclient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MTK reverse engineering and flash tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MTKClient&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bkerler/mtkclient/main/mtkclient/gui/images/logo_256.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just some mtk tool for exploitation, reading/writing flash and doing crazy stuff. For windows, you need to install the stock mtk port and the usbdk driver (see instructions below). For linux, a patched kernel is only needed when using old kamakiri (see Setup folder) (except for read/write flash).&lt;/p&gt; &#xA;&lt;p&gt;Once the mtk script is running, boot into brom mode by powering off device, press and hold either vol up + power or vol down + power and connect the phone. Once detected by the tool, release the buttons.&lt;/p&gt; &#xA;&lt;h2&gt;MT678x, MT689x, MT688x, MT698x&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;These chipsets use a new protocol called V6 and the bootrom is patched, thus you need a valid da via --loader option.&lt;/li&gt; &#xA; &lt;li&gt;On some devices, preloader is deactivated, but you still use it by running &#34;adb reboot edl&#34;.&lt;/li&gt; &#xA; &lt;li&gt;This only works with UNFUSED devices currently.&lt;/li&gt; &#xA; &lt;li&gt;For all devices with DAA, SLA and Remote-Auth activated no public solution currently exists (for various reasons).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;kamakiri [xyzz]&lt;/li&gt; &#xA; &lt;li&gt;linecode exploit [chimera]&lt;/li&gt; &#xA; &lt;li&gt;Chaosmaster&lt;/li&gt; &#xA; &lt;li&gt;Geert-Jan Kreileman (GUI, design &amp;amp; fixes)&lt;/li&gt; &#xA; &lt;li&gt;All contributors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Use Re LiveDVD (everything ready to go, based on Ubuntu):&lt;/h3&gt; &#xA;&lt;p&gt;User: user, Password:user (based on Ubuntu 22.04 LTS)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.androidfilehost.com/?fid=15664248565197184488&#34;&gt;Live DVD V4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/10OEw1d-Ul_96MuT3WxQ3iAHoPC4NhM_X/view?usp=sharing&#34;&gt;Live DVD V4 Mirror&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Linux / Mac OS - (Ubuntu recommended, no patched kernel needed except for kamakiri)&lt;/h3&gt; &#xA;&lt;h4&gt;Install python &amp;gt;=3.8, git and other deps&lt;/h4&gt; &#xA;&lt;h4&gt;For Debian/Ubuntu&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install python3 git libusb-1.0-0 python3-pip libfuse2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For ArchLinux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;(sudo) pacman -S  python python-pip git libusb fuse2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yay -S python python-pip git libusb fuse2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Grab files&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/bkerler/mtkclient&#xA;cd mtkclient&#xA;pip3 install -r requirements.txt&#xA;pip3 install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install rules&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo usermod -a -G plugdev $USER&#xA;sudo usermod -a -G dialout $USER&#xA;sudo cp mtkclient/Setup/Linux/*.rules /etc/udev/rules.d&#xA;sudo udevadm control -R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to reboot after adding the user to dialout/plugdev. If the device has a vendor interface 0xFF (like LG), make sure to add &#34;blacklist qcaux&#34; to the &#34;/etc/modprobe.d/blacklist.conf&#34;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Install python + git&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install python &amp;gt;= 3.9 and git&lt;/li&gt; &#xA; &lt;li&gt;If you install python from microsoft store, &#34;python setup.py install&#34; will fail, but that step isn&#39;t required.&lt;/li&gt; &#xA; &lt;li&gt;WIN+R &lt;code&gt;cmd&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Install Winfsp (for fuse)&lt;/h4&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;https://winfsp.dev/rel/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Grab files and install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/bkerler/mtkclient&#xA;cd mtkclient&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get latest UsbDk 64-Bit&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install normal MTK Serial Port driver (or use default Windows COM Port one, make sure no exclamation is seen)&lt;/li&gt; &#xA; &lt;li&gt;Get usbdk installer (.msi) from &lt;a href=&#34;https://github.com/daynix/UsbDk/releases/&#34;&gt;here&lt;/a&gt; and install it&lt;/li&gt; &#xA; &lt;li&gt;Test on device connect using &#34;UsbDkController -n&#34; if you see a device with 0x0E8D 0x0003&lt;/li&gt; &#xA; &lt;li&gt;Works fine under Windows 10 and 11 :D&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Use kamakiri (optional, only needed for mt6260 or older)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For linux (kamakiri attack), you need to recompile your linux kernel using this kernel patch :&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential libncurses-dev bison flex libssl-dev libelf-dev libdw-dev&#xA;git clone https://git.kernel.org/pub/scm/devel/pahole/pahole.git&#xA;cd pahole &amp;amp;&amp;amp; mkdir build &amp;amp;&amp;amp; cd build &amp;amp;&amp;amp; cmake .. &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install&#xA;sudo mv /usr/local/libdwarves* /usr/local/lib/ &amp;amp;&amp;amp; sudo ldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-`uname -r`.tar.xz&#xA;tar xvf linux-`uname -r`.tar.xz&#xA;cd linux-`uname -r`&#xA;patch -p1 &amp;lt; ../Setup/kernelpatches/disable-usb-checks-5.10.patch&#xA;cp -v /boot/config-$(uname -r) .config&#xA;make menuconfig&#xA;make&#xA;sudo make modules_install &#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;These aren&#39;t needed for current ubuntu (as make install will do, just for reference):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo update-initramfs -c -k `uname -r`&#xA;sudo update-grub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See Setup/kernels for ready-to-use kernel setups&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reboot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo reboot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Using MTKTools via the graphical user interface:&lt;/h3&gt; &#xA;&lt;p&gt;For the &#39;basics&#39; you can use the GUI interface. This supports dumping partitions or the full flash for now. Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk_gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run multiple commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python mtk script run.example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the file &#34;&lt;a href=&#34;https://github.com/bkerler/mtkclient/raw/main/run.example&#34;&gt;run.example&lt;/a&gt;&#34; on how to structure the script file&lt;/p&gt; &#xA;&lt;h3&gt;Root the phone (Tested with android 9 - 12)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Dump boot and vbmeta&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk r boot,vbmeta boot.img,vbmeta.img&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Reboot the phone&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Download patched magisk for mtk: Download latest Magisk &lt;a href=&#34;https://github.com/topjohnwu/Magisk/releases/latest&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install on target phone&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;you need to enable usb-debugging via Settings/About phone/Version, Tap 7x on build number&lt;/li&gt; &#xA; &lt;li&gt;Go to Settings/Additional settings/Developer options, enable &#34;OEM unlock&#34; and &#34;USB Debugging&#34;&lt;/li&gt; &#xA; &lt;li&gt;Install magisk apk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb install app-release.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;accept auth rsa request on mobile screen of course to allow adb connection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Upload boot to /sdcard/Download&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb push boot.img /sdcard/Download&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Start magisk, tap on Install, select boot.img from /sdcard/Download, then:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;adb pull /sdcard/Download/[displayed magisk patched boot filename here]&#xA;mv [displayed magisk patched boot filename here] boot.patched&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Do the steps needed in section &#34;Unlock bootloader below&#34;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Flash magisk-patched boot and empty vbmeta&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk w boot,vbmeta boot.patched,vbmeta.img.empty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;Reboot the phone&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;Disconnect usb cable and enjoy your rooted phone :)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Boot to meta mode via payload&lt;/h3&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk payload --metamode FASTBOOT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read efuses&lt;/h3&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da efuse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unlock bootloader&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Erase metadata and userdata (and md_udc if existing):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk e metadata,userdata,md_udc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Unlock bootloader:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da seccfg unlock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for relocking use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da seccfg lock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Reboot the phone:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk reset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and disconnect usb cable to let the phone reboot.&lt;/p&gt; &#xA;&lt;p&gt;If you are getting a dm-verity error on Android 11, just press the power button, then the device should boot and show a yellow warning about unlocked bootloader and then the device should boot within 5 seconds.&lt;/p&gt; &#xA;&lt;h3&gt;Read flash&lt;/h3&gt; &#xA;&lt;p&gt;Dump boot partition to filename boot.bin via preloader&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk r boot boot.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump boot partition to filename boot.bin via bootrom&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk r boot boot.bin [--preloader=Loader/Preloader/your_device_preloader.bin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump preloader partition to filename preloader.bin via bootrom&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk r preloader preloader.bin --parttype=boot1 [--preloader=Loader/Preloader/your_device_preloader.bin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read full flash to filename flash.bin (use --preloader for brom)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk rf flash.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read full flash to filename flash.bin (use --preloader for brom) for IoT devices (MT6261/MT2301):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk rf flash.bin --iot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read flash offset 0x128000 with length 0x200000 to filename flash.bin (use --preloader for brom)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk ro 0x128000 0x200000 flash.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump all partitions to directory &#34;out&#34;. (use --preloader for brom)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk rl out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show gpt (use --preloader for brom)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk printgpt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mount the flash as a filesystem&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk fs /mnt/mtk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write flash&lt;/h3&gt; &#xA;&lt;p&gt;(use --preloader for brom)&lt;/p&gt; &#xA;&lt;p&gt;Write filename boot.bin to boot partition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk w boot boot.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write filename flash.bin as full flash (currently only works in da mode)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk wf flash.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write all files in directory &#34;out&#34; to the flash partitions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk wl out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;write file flash.bin to flash offset 0x128000 with length 0x200000 (use --preloader for brom)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk wo 0x128000 0x200000 flash.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Erase flash&lt;/h3&gt; &#xA;&lt;p&gt;Erase boot partition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk e boot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Erase boot sectors&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk es boot [sector count]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DA commands:&lt;/h3&gt; &#xA;&lt;p&gt;Peek memory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da peek [addr in hex] [length in hex] [optional: -filename filename.bin for reading to file]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Poke memory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da poke [addr in hex] [data as hexstring or -filename for reading from file]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read rpmb (Only xflash for now)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da rpmb r [will read to rpmb.bin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Write rpmb [Currently broken, xflash only]&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da rpmb w filename&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate and display rpmb1-3 key&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da generatekeys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlock / Lock bootloader&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk da seccfg [lock or unlock]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Bypass SLA, DAA and SBC (using generic_patcher_payload)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python mtk payload&lt;/code&gt; If you want to use SP Flash tool afterwards, make sure you select &#34;UART&#34; in the settings, not &#34;USB&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Dump preloader&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Device has to be in bootrom mode and preloader has to be intact on the device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk dumppreloader [--ptype=[&#34;amonet&#34;,&#34;kamakiri&#34;,&#34;kamakiri2&#34;,&#34;hashimoto&#34;]] [--filename=preloader.bin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dump brom&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Device has to be in bootrom mode, or da mode has to be crashed to enter damode&lt;/li&gt; &#xA; &lt;li&gt;if no option is given, either kamakiri or da will be used (da for insecure targets)&lt;/li&gt; &#xA; &lt;li&gt;if &#34;kamakiri&#34; is used as an option, kamakiri is enforced&lt;/li&gt; &#xA; &lt;li&gt;Valid options are : &#34;kamakiri&#34; (via usb_ctrl_handler attack), &#34;amonet&#34; (via gcpu) and &#34;hashimoto&#34; (via cqdma)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk dumpbrom --ptype=[&#34;amonet&#34;,&#34;kamakiri&#34;,&#34;hashimoto&#34;] [--filename=brom.bin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For to dump unknown bootroms, use brute option :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk brute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it&#39;s successful, please add an issue over here and append the bootrom in order to add full support.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Crash da in order to enter brom&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk crash [--vid=vid] [--pid=pid] [--interface=interface]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read memory using patched preloader&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Boot in Brom or crash to Brom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk peek [addr] [length] --preloader=patched_preloader.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run custom payload&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk payload --payload=payload.bin [--var1=var1] [--wdt=wdt] [--uartaddr=addr] [--da_addr=addr] [--brom_addr=addr]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Stage2 usage&lt;/h2&gt; &#xA;&lt;h3&gt;Run python mtk stage (brom) or mtk plstage (preloader)&lt;/h3&gt; &#xA;&lt;h4&gt;Run stage2 in bootrom&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt; python mtk stage&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Run stage2 in preloader&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt; python mtk plstage&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Run stage2 plstage in bootrom&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Boot in Brom or crash to Brom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python mtk plstage --preloader=preloader.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use stage2 tool&lt;/h3&gt; &#xA;&lt;h3&gt;Leave stage2 and reboot&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 reboot&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Read rpmb in stage2 mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 rpmb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Read preloader in stage2 mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 preloader&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Read memory as hex data in stage2 mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 memread [start addr] [length]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Read memory to file in stage2 mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 memread [start addr] [length] --filename filename.bin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Write hex data to memory in stage2 mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 memwrite [start addr] --data [data as hexstring]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Write memory from file in stage2 mode&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 memwrite [start addr] --filename filename.bin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extract keys&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; python stage2 keys --mode [sej, dxcc]&lt;/code&gt; For dxcc, you need to use plstage instead of stage&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;I have issues ....... please send logs and full console details !&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the mtk tool with --debugmode. Log will be written to log.txt (hopefully)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rules / Infos&lt;/h2&gt; &#xA;&lt;h3&gt;Chip details / configs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to config/brom_config.py&lt;/li&gt; &#xA; &lt;li&gt;Unknown usb vid/pids for autodetection go to config/usb_ids.py&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learning Resources&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://o0xmuhe.github.io/2022/03/05/MTK-Preloader-%E8%B8%A9%E5%9D%91/&#34;&gt;MTK Preloader&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://o0xmuhe.github.io/2022/11/23/%E8%AE%AE%E9%A2%98%E8%A7%A3%E8%AF%BB-MOSEC2022-MediAttack-break-the-boot-chain-of-MediaTek-SoC/&#34;&gt;MOSEC-2022&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://tinyhack.com/2021/01/31/dissecting-a-mediatek-bootrom-exploit/&#34;&gt;Dissecting MTK BROM Exploit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fredericb.info/2020/06/exynos8890-bootrom-dump-dump-exynos-8890-bootrom-from-samsung-galaxy-s7.html&#34;&gt;Dumping Exynos BROM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fredericb.info/2020/06/reverse-engineer-usb-stack-of-exynos-bootrom.html#reverse-engineer-usb-stack-of-exynos-bootrom&#34;&gt;Rev Exynos BROM USB STACK &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://labs.taszk.io/blog/post/bootrom_usb/&#34;&gt;Buffer Overflow In Huawei BROM USB STACK&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>