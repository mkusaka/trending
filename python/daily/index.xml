<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-07T01:34:21Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SciPhi-AI/R2R</title>
    <updated>2024-12-07T01:34:21Z</updated>
    <id>tag:github.com,2024-12-07:/SciPhi-AI/R2R</id>
    <link href="https://github.com/SciPhi-AI/R2R" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The most advanced AI retrieval system. Containerized, Retrieval-Augmented Generation (RAG) with a RESTful API.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://r2r-docs.sciphi.ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs.sciphi.ai-3F16E4&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/p6KqD2kjtB&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1120774652915105934?style=social&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SciPhi-AI&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/SciPhi-AI/R2R&#34; alt=&#34;Github Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SciPhi-AI/R2R/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/w/SciPhi-AI/R2R&#34; alt=&#34;Commits-per-week&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-purple.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gurubase.io/g/r2r&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gurubase-Ask%20R2R%20Guru-006BFF&#34; alt=&#34;Gurubase: R2R Guru&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;img width=&#34;1041&#34; alt=&#34;r2r&#34; src=&#34;https://github.com/user-attachments/assets/b6ee6a78-5d37-496d-ae10-ce18eee7a1d6&#34;&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Containerized, state of the art Retrieval-Augmented Generation (RAG) with a RESTful API &lt;/h3&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;R2R (RAG to Riches) is the most advanced AI retrieval system, supporting Retrieval-Augmented Generation (RAG) with production-ready features. Built around a containerized &lt;a href=&#34;%5Bhttps://r2r-docs.sciphi.ai/api-reference/introduction%5D(https://r2r-docs.sciphi.ai/api-and-sdks/introduction)&#34;&gt;RESTful API&lt;/a&gt;, R2R offers multimodal content ingestion, hybrid search functionality, configurable GraphRAG, and comprehensive user and document management.&lt;/p&gt; &#xA;&lt;p&gt;For a more complete view of R2R, check out the &lt;a href=&#34;https://r2r-docs.sciphi.ai/&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/documentation/configuration/ingestion&#34;&gt;&lt;strong&gt;üìÅ Multimodal Ingestion&lt;/strong&gt;&lt;/a&gt;: Parse &lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.pdf&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.png&lt;/code&gt;, &lt;code&gt;.mp3&lt;/code&gt;, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/hybrid-search&#34;&gt;&lt;strong&gt;üîç Hybrid Search&lt;/strong&gt;&lt;/a&gt;: Combine semantic and keyword search with reciprocal rank fusion for enhanced relevancy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/knowledge-graphs&#34;&gt;&lt;strong&gt;üîó Knowledge Graphs&lt;/strong&gt;&lt;/a&gt;: Automatically extract entities and relationships and build knowledge graphs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/graphrag&#34;&gt;&lt;strong&gt;üìä GraphRAG&lt;/strong&gt;&lt;/a&gt;: Cluster and summarize communities with over your created graphs for even richer insights.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/user-auth&#34;&gt;&lt;strong&gt;üóÇÔ∏è User Management&lt;/strong&gt;&lt;/a&gt;: Efficiently manage documents and user roles within R2R.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/observability&#34;&gt;&lt;strong&gt;üî≠ Observability&lt;/strong&gt;&lt;/a&gt;: Observe and analyze your RAG engine performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/documentation/configuration/overview&#34;&gt;&lt;strong&gt;üß© Configuration&lt;/strong&gt;&lt;/a&gt;: Setup your application using intuitive configuration files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/application&#34;&gt;&lt;strong&gt;üñ•Ô∏è Dashboard&lt;/strong&gt;&lt;/a&gt;: An open-source React+Next.js admin dashboard to interact with R2R via GUI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/introduction/whats-new&#34;&gt;What&#39;s New&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Release 3.3.0&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;December 3, 2024&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &lt;p&gt;Warning: These changes are breaking!&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/api-and-sdks/introduction&#34;&gt;V3 API Specification&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install with pip&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to get started with R2R is by using our CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install r2r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may run R2R directly from the python package, but additional dependencies like Postgres+pgvector must be configured and the full R2R core is required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# export OPENAI_API_KEY=sk-...&#xA;# export POSTGRES...&#xA;pip install &#39;r2r[core,ingestion-bundle]&#39;&#xA;r2r --config-name=default serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, R2R can be launched alongside its requirements inside Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# export OPENAI_API_KEY=sk-...&#xA;r2r serve --docker --full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command above will install the &lt;code&gt;full&lt;/code&gt; installation which includes Hatchet for orchestration and Unstructured.io for parsing.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/documentation/installation/overview&#34;&gt;Installation&lt;/a&gt;: Quick installation of R2R using Docker or pip&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/documentation/quickstart&#34;&gt;Quickstart&lt;/a&gt;: A quick introduction to R2R&#39;s core features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/documentation/configuration/overview&#34;&gt;Setup&lt;/a&gt;: Learn how to setup and configure R2R&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/api-and-sdks/introduction&#34;&gt;API &amp;amp; SDKs&lt;/a&gt;: API reference and Python/JS SDKs for interacting with R2R&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cookbooks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Advanced RAG Pipelines&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/agent&#34;&gt;RAG Agent&lt;/a&gt;: R2R&#39;s powerful RAG agent&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/hybrid-search&#34;&gt;Hybrid Search&lt;/a&gt;: Introduction to hybrid search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/advanced-rag&#34;&gt;Advanced RAG&lt;/a&gt;: Advanced RAG features&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Orchestration&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/orchestration&#34;&gt;Orchestration&lt;/a&gt;: R2R event orchestration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User Management&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/web-dev&#34;&gt;Web Development&lt;/a&gt;: Building webapps using R2R&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/user-auth&#34;&gt;User Auth&lt;/a&gt;: Authenticating users&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/collections&#34;&gt;Collections&lt;/a&gt;: Document collections&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/observability&#34;&gt;Analytics &amp;amp; Observability&lt;/a&gt;: End-to-end logging and analytics&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://r2r-docs.sciphi.ai/cookbooks/application&#34;&gt;Web Application&lt;/a&gt;: Connecting with the R2R Application&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/p6KqD2kjtB&#34;&gt;Join our Discord server&lt;/a&gt; to get support and connect with both the R2R team and other developers in the community. Whether you&#39;re encountering issues, looking for advice on best practices, or just want to share your experiences, we&#39;re here to help.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We welcome contributions of all sizes! Here&#39;s how you can help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a PR for new features, improvements, or better documentation.&lt;/li&gt; &#xA; &lt;li&gt;Submit a &lt;a href=&#34;https://github.com/SciPhi-AI/R2R/issues/new?assignees=&amp;amp;labels=&amp;amp;projects=&amp;amp;template=feature_request.md&amp;amp;title=&#34;&gt;feature request&lt;/a&gt; or &lt;a href=&#34;https://github.com/SciPhi-AI/R2R/issues/new?assignees=&amp;amp;labels=&amp;amp;projects=&amp;amp;template=bug_report.md&amp;amp;title=&#34;&gt;bug report&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Our Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/SciPhi-AI/R2R/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=SciPhi-AI/R2R&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>qodo-ai/qodo-cover</title>
    <updated>2024-12-07T01:34:21Z</updated>
    <id>tag:github.com,2024-12-07:/qodo-ai/qodo-cover</id>
    <link href="https://github.com/qodo-ai/qodo-cover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qodo-Cover: An AI-Powered Tool for Automated Test Generation and Code Coverage Enhancement! üíªü§ñüß™üêû&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Qodo Cover&lt;/h1&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;!-- &lt;picture&gt;&#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://www.codium.ai/images/cover-agent/cover-agent-dark.png&#34; width=&#34;330&#34;&gt;&#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://www.codium.ai/images/cover-agent/cover-agent-light.png&#34; width=&#34;330&#34;&gt;&#xA;  &lt;img src=&#34;https://www.codium.ai/images/cover-agent/cover-agent-light.png&#34; alt=&#34;logo&#34; width=&#34;330&#34;&gt; &#xA;&#xA;&lt;/picture&gt; --&gt; &#xA;  &lt;br&gt; Qodo Cover aims to help efficiently increase code coverage, by automatically generating qualified tests to extend code coverage. Qodo Cover can run in your GitHub CI workflow or locally as a CLI tool. &#xA; &lt;/div&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/qodo-ai/qodo-cover/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL_3.0-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cYsvFJJbdM&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/discord?icon=discord&amp;amp;label&amp;amp;color=purple&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/qodoai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/qodoai&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Codium-ai/cover-agent/commits/main&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/last-commit/qodo-ai/qodo-cover/main?style=for-the-badge&#34; height=&#34;20&#34;&gt; &lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://trendshift.io/repositories/10328&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/10328&#34; alt=&#34;Codium-ai/cover-agent | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/#news-and-updates&#34;&gt;News and Updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/#installation-and-usage&#34;&gt;Installation and Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;News and Updates&lt;/h2&gt; &#xA;&lt;h3&gt;2024-12-04:&lt;/h3&gt; &#xA;&lt;p&gt;New mode - &lt;a href=&#34;https://github.com/qodo-ai/qodo-ci&#34;&gt;Run Qodo Cover Pro in your GitHub CI workflow&lt;/a&gt;. Currently in preview and available for free for a limited time for Python projects, leveraging your own LLM API key from your favorite LLM provider. It&#39;s a practical way to improve code quality and reliability. For more details, reach out to the &lt;a href=&#34;https://www.qodo.ai/book-a-demo&#34;&gt;Qodo team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2024-11-05:&lt;/h3&gt; &#xA;&lt;p&gt;New mode - scan an entire repo, auto identify the test files, auto collect context for each test file, and extend the test suite with new tests. See more details &lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/docs/repo_coverage.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Qodo-Cover&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to Qodo-Cover. This focused project utilizes Generative AI to automate and enhance the generation of tests (currently mostly unit tests), aiming to streamline development workflows. Qodo-Cover can run via a terminal, and is planned to be integrated into popular CI platforms. &lt;a href=&#34;https://youtu.be/fIYkSEJ4eqE?feature=shared&#34;&gt;&lt;img src=&#34;https://www.codium.ai/wp-content/uploads/2024/05/CodiumAI-CoverAgent-v240519-small-loop.gif&#34; alt=&#34;Test generation xxx&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We invite the community to collaborate and help extend the capabilities of Qodo Cover, continuing its development as a cutting-edge solution in the automated unit test generation domain. We also wish to inspire researchers to leverage this open-source tool to explore new test-generation techniques.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This tool is part of a broader suite of utilities designed to automate the creation of unit tests for software projects. Utilizing advanced Generative AI models, it aims to simplify and expedite the testing process, ensuring high-quality software development. The system comprises several components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Test Runner:&lt;/strong&gt; Executes the command or scripts to run the test suite and generate code coverage reports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coverage Parser:&lt;/strong&gt; Validates that code coverage increases as tests are added, ensuring that new tests contribute to the overall test effectiveness.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt Builder:&lt;/strong&gt; Gathers necessary data from the codebase and constructs the prompt to be passed to the Large Language Model (LLM).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI Caller:&lt;/strong&gt; Interacts with the LLM to generate tests based on the prompt provided.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation and Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Before you begin, make sure you have the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt; set in your environment variables, which is required for calling the OpenAI API.&lt;/li&gt; &#xA; &lt;li&gt;Code Coverage tool: A Cobertura XML code coverage report is required for the tool to function correctly. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For example, in Python one could use &lt;code&gt;pytest-cov&lt;/code&gt;. Add the &lt;code&gt;--cov-report=xml&lt;/code&gt; option when running Pytest.&lt;/li&gt; &#xA;   &lt;li&gt;Note: We are actively working on adding more coverage types but please feel free to open a PR and contribute to &lt;code&gt;cover_agent/CoverageProcessor.py&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If running directly from the repository you will also need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python installed on your system.&lt;/li&gt; &#xA; &lt;li&gt;Poetry installed for managing Python package dependencies. Installation instructions for Poetry can be found at &lt;a href=&#34;https://python-poetry.org/docs/&#34;&gt;https://python-poetry.org/docs/&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Standalone Runtime&lt;/h3&gt; &#xA;&lt;p&gt;Qodo Cover can be installed as a Python Pip package or run as a standalone executable.&lt;/p&gt; &#xA;&lt;h4&gt;Python Pip&lt;/h4&gt; &#xA;&lt;p&gt;To install the Python Pip package directly via GitHub run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install git+https://github.com/qodo-ai/qodo-cover.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Binary&lt;/h4&gt; &#xA;&lt;p&gt;The binary can be run without any Python environment installed on your system (e.g. within a Docker container that does not contain Python). You can download the release for your system by navigating to the project&#39;s &lt;a href=&#34;https://github.com/qodo-ai/qodo-cover/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Repository Setup&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to install all the dependencies and run the project from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the Code&lt;/h3&gt; &#xA;&lt;p&gt;After downloading the executable or installing the Pip package you can run the Cover Agent to generate and validate unit tests. Execute it from the command line by using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cover-agent \&#xA;  --source-file-path &#34;&amp;lt;path_to_source_file&amp;gt;&#34; \&#xA;  --test-file-path &#34;&amp;lt;path_to_test_file&amp;gt;&#34; \&#xA;  --project-root &#34;&amp;lt;path_to_project_root&amp;gt;&#34; \&#xA;  --code-coverage-report-path &#34;&amp;lt;path_to_coverage_report&amp;gt;&#34; \&#xA;  --test-command &#34;&amp;lt;test_command_to_run&amp;gt;&#34; \&#xA;  --test-command-dir &#34;&amp;lt;directory_to_run_test_command&amp;gt;&#34; \&#xA;  --coverage-type &#34;&amp;lt;type_of_coverage_report&amp;gt;&#34; \&#xA;  --desired-coverage &amp;lt;desired_coverage_between_0_and_100&amp;gt; \&#xA;  --max-iterations &amp;lt;max_number_of_llm_iterations&amp;gt; \&#xA;  --included-files &#34;&amp;lt;optional_list_of_files_to_include&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the example code below to try out the Cover Agent. (Note that the &lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/docs/usage_examples.md&#34;&gt;usage_examples&lt;/a&gt; file provides more elaborate examples of how to use the Cover Agent)&lt;/p&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;p&gt;Follow the steps in the README.md file located in the &lt;code&gt;templated_tests/python_fastapi/&lt;/code&gt; directory to setup an environment, then return to the root of the repository, and run the following command to add tests to the &lt;strong&gt;python fastapi&lt;/strong&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cover-agent \&#xA;  --source-file-path &#34;templated_tests/python_fastapi/app.py&#34; \&#xA;  --test-file-path &#34;templated_tests/python_fastapi/test_app.py&#34; \&#xA;  --project-root &#34;templated_tests/python_fastapi&#34; \&#xA;  --code-coverage-report-path &#34;templated_tests/python_fastapi/coverage.xml&#34; \&#xA;  --test-command &#34;pytest --cov=. --cov-report=xml --cov-report=term&#34; \&#xA;  --test-command-dir &#34;templated_tests/python_fastapi&#34; \&#xA;  --coverage-type &#34;cobertura&#34; \&#xA;  --desired-coverage 70 \&#xA;  --max-iterations 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;For an example using &lt;strong&gt;go&lt;/strong&gt; &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;templated_tests/go_webservice&lt;/code&gt;, set up the project following the &lt;code&gt;README.md&lt;/code&gt;. To work with coverage reporting, you need to install &lt;code&gt;gocov&lt;/code&gt; and &lt;code&gt;gocov-xml&lt;/code&gt;. Run the following commands to install these tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/axw/gocov/gocov@v1.1.0&#xA;go install github.com/AlekSi/gocov-xml@v1.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cover-agent \&#xA;  --source-file-path &#34;app.go&#34; \&#xA;  --test-file-path &#34;app_test.go&#34; \&#xA;  --code-coverage-report-path &#34;coverage.xml&#34; \&#xA;  --test-command &#34;go test -coverprofile=coverage.out &amp;amp;&amp;amp; gocov convert coverage.out | gocov-xml &amp;gt; coverage.xml&#34; \&#xA;  --test-command-dir $(pwd) \&#xA;  --coverage-type &#34;cobertura&#34; \&#xA;  --desired-coverage 70 \&#xA;  --max-iterations 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;p&gt;For an example using &lt;strong&gt;java&lt;/strong&gt; &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;templated_tests/java_gradle&lt;/code&gt;, set up the project following the &lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/templated_tests/java_gradle/README.md&#34;&gt;README.md&lt;/a&gt;. To work with jacoco coverage reporting, follow the &lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/templated_tests/java_gradle/README.md&#34;&gt;README.md&lt;/a&gt; Requirements section: and then run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cover-agent \&#xA;  --source-file-path=&#34;src/main/java/com/davidparry/cover/SimpleMathOperations.java&#34; \&#xA;  --test-file-path=&#34;src/test/groovy/com/davidparry/cover/SimpleMathOperationsSpec.groovy&#34; \&#xA;  --code-coverage-report-path=&#34;build/reports/jacoco/test/jacocoTestReport.csv&#34; \&#xA;  --test-command=&#34;./gradlew clean test jacocoTestReport&#34; \&#xA;  --test-command-dir=$(pwd) \&#xA;  --coverage-type=&#34;jacoco&#34; \&#xA;  --desired-coverage=70 \&#xA;  --max-iterations=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Outputs&lt;/h3&gt; &#xA;&lt;p&gt;A few debug files will be outputted locally within the repository (that are part of the &lt;code&gt;.gitignore&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;run.log&lt;/code&gt;: A copy of the logger that gets dumped to your &lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test_results.html&lt;/code&gt;: A results table that contains the following for each generated test: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Test status&lt;/li&gt; &#xA;   &lt;li&gt;Failure reason (if applicable)&lt;/li&gt; &#xA;   &lt;li&gt;Exit code,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Generated test&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional logging&lt;/h3&gt; &#xA;&lt;p&gt;If you set an environment variable &lt;code&gt;WANDB_API_KEY&lt;/code&gt;, the prompts, responses, and additional information will be logged to &lt;a href=&#34;https://wandb.ai/&#34;&gt;Weights and Biases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using other LLMs&lt;/h3&gt; &#xA;&lt;p&gt;This project uses LiteLLM to communicate with OpenAI and other hosted LLMs (supporting 100+ LLMs to date). To use a different model other than the OpenAI default you&#39;ll need to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Export any environment variables needed by the supported LLM &lt;a href=&#34;https://litellm.vercel.app/docs/proxy/quick_start#supported-llms&#34;&gt;following the LiteLLM instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Call the name of the model using the &lt;code&gt;--model&lt;/code&gt; option when calling Cover Agent.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example (as found in the &lt;a href=&#34;https://litellm.vercel.app/docs/proxy/quick_start#supported-llms&#34;&gt;LiteLLM Quick Start guide&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export VERTEX_PROJECT=&#34;hardy-project&#34;&#xA;export VERTEX_LOCATION=&#34;us-west&#34;&#xA;&#xA;cover-agent \&#xA;  ...&#xA;  --model &#34;vertex_ai/gemini-pro&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OpenAI Compatible Endpoint&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export OPENAI_API_KEY=&#34;&amp;lt;your api key&amp;gt;&#34; # If &amp;lt;your-api-base&amp;gt; requires an API KEY, set this value.&#xA;&#xA;cover-agent \&#xA;  ...&#xA;  --model &#34;openai/&amp;lt;your model name&amp;gt;&#34; \&#xA;  --api-base &#34;&amp;lt;your-api-base&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Azure OpenAI Compatible Endpoint&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export AZURE_API_BASE=&#34;&amp;lt;your api base&amp;gt;&#34; # azure api base&#xA;export AZURE_API_VERSION=&#34;&amp;lt;your api version&amp;gt;&#34; # azure api version (optional)&#xA;export AZURE_API_KEY=&#34;&amp;lt;your api key&amp;gt;&#34; # azure api key&#xA;&#xA;cover-agent \&#xA;  ...&#xA;  --model &#34;azure/&amp;lt;your deployment name&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/qodo-ai/qodo-cover/main/docs/development.md&#34;&gt;Development&lt;/a&gt; for more information on how to contribute to this project.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Below is the roadmap of planned features, with the current implementation status:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically generates unit tests for your software projects, utilizing advanced AI models to ensure comprehensive test coverage and quality assurance. (similar to Meta) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Being able to generate tests for different programming languages&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Being able to deal with a large variety of testing scenarios&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate a behavior analysis for the code under test, and generate tests accordingly&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Check test flakiness, e.g. by running 5 times as suggested by TestGen-LLM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cover more test generation pains &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate new tests that are focused on the PR changeset&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Run over an entire repo/code-base and attempt to enhance all existing test suites&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve usability &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Connectors for GitHub Actions, Jenkins, CircleCI, Travis CI, and more&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Integrate into databases, APIs, OpenTelemetry and other sources of data to extract relevant i/o for the test generation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add a setting file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;QodoAI&lt;/h2&gt; &#xA;&lt;p&gt;QodoAI&#39;s mission is to enable busy dev teams to increase and maintain their code integrity. We offer various tools, including &#34;Pro&#34; versions of our open-source tools, which are meant to handle enterprise-level code complexity and are multi-repo codebase aware.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Try the pro version of &lt;a href=&#34;https://github.com/qodo-ai/qodo-ci&#34;&gt;Qodo Cover in a GitHub Action&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>