<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-23T01:37:20Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fastapi/sqlmodel</title>
    <updated>2025-02-23T01:37:20Z</updated>
    <id>tag:github.com,2025-02-23:/fastapi/sqlmodel</id>
    <link href="https://github.com/fastapi/sqlmodel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQL databases in Python, designed for simplicity, compatibility, and robustness.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://sqlmodel.tiangolo.com&#34;&gt;&lt;img src=&#34;https://sqlmodel.tiangolo.com/img/logo-margin/logo-margin-vector.svg#only-light&#34; alt=&#34;SQLModel&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;em&gt;SQLModel, SQL databases in Python, designed for simplicity, compatibility, and robustness.&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/fastapi/sqlmodel/actions?query=workflow%3ATest&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/fastapi/sqlmodel/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/fastapi/sqlmodel/actions?query=workflow%3APublish&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://github.com/fastapi/sqlmodel/workflows/Publish/badge.svg?sanitize=true&#34; alt=&#34;Publish&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coverage-badge.samuelcolvin.workers.dev/redirect/fastapi/sqlmodel&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://coverage-badge.samuelcolvin.workers.dev/fastapi/sqlmodel.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://pypi.org/project/sqlmodel&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/v/sqlmodel?color=%2334D058&amp;amp;label=pypi%20package&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://sqlmodel.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://sqlmodel.tiangolo.com&#34;&gt;https://sqlmodel.tiangolo.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source Code&lt;/strong&gt;: &lt;a href=&#34;https://github.com/fastapi/sqlmodel&#34; target=&#34;_blank&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/fastapi/sqlmodel&#34;&gt;https://github.com/fastapi/sqlmodel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;SQLModel is a library for interacting with &lt;abbr title=&#34;Also called &amp;quot;Relational databases&amp;quot;&#34;&gt;SQL databases&lt;/abbr&gt; from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLModel&lt;/strong&gt; is based on Python type annotations, and powered by &lt;a href=&#34;https://pydantic-docs.helpmanual.io/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;Pydantic&lt;/a&gt; and &lt;a href=&#34;https://sqlalchemy.org/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;SQLAlchemy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The key features are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intuitive to write&lt;/strong&gt;: Great editor support. &lt;abbr title=&#34;also known as auto-complete, autocompletion, IntelliSense&#34;&gt;Completion&lt;/abbr&gt; everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to use&lt;/strong&gt;: It has sensible defaults and does a lot of work underneath to simplify the code you write.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatible&lt;/strong&gt;: It is designed to be compatible with &lt;strong&gt;FastAPI&lt;/strong&gt;, Pydantic, and SQLAlchemy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: You have all the power of SQLAlchemy and Pydantic underneath.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Short&lt;/strong&gt;: Minimize code duplication. A single type annotation does a lot of work. No need to duplicate models in SQLAlchemy and Pydantic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;!-- sponsors --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.govcert.lu&#34; target=&#34;_blank&#34; title=&#34;This project is being supported by GOVCERT.LU&#34;&gt;&lt;img src=&#34;https://sqlmodel.tiangolo.com/img/sponsors/govcert.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- /sponsors --&gt; &#xA;&lt;h2&gt;SQL Databases in FastAPI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fastapi.tiangolo.com&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png&#34; style=&#34;width: 20%;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLModel&lt;/strong&gt; is designed to simplify interacting with SQL databases in &lt;a href=&#34;https://fastapi.tiangolo.com&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;FastAPI&lt;/a&gt; applications, it was created by the same &lt;a href=&#34;https://tiangolo.com/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;author&lt;/a&gt;. üòÅ&lt;/p&gt; &#xA;&lt;p&gt;It combines SQLAlchemy and Pydantic and tries to simplify the code you write as much as possible, allowing you to reduce the &lt;strong&gt;code duplication to a minimum&lt;/strong&gt;, but while getting the &lt;strong&gt;best developer experience&lt;/strong&gt; possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLModel&lt;/strong&gt; is, in fact, a thin layer on top of &lt;strong&gt;Pydantic&lt;/strong&gt; and &lt;strong&gt;SQLAlchemy&lt;/strong&gt;, carefully designed to be compatible with both.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A recent and currently supported &lt;a href=&#34;https://www.python.org/downloads/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;version of Python&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As &lt;strong&gt;SQLModel&lt;/strong&gt; is based on &lt;strong&gt;Pydantic&lt;/strong&gt; and &lt;strong&gt;SQLAlchemy&lt;/strong&gt;, it requires them. They will be automatically installed when you install SQLModel.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you create a &lt;a href=&#34;https://sqlmodel.tiangolo.com/virtual-environments/&#34; class=&#34;external-link&#34; target=&#34;_blank&#34;&gt;virtual environment&lt;/a&gt;, activate it, and then install SQLModel, for example with:&lt;/p&gt; &#xA;&lt;div class=&#34;termy&#34;&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pip install sqlmodel&#xA;---&amp;gt; 100%&#xA;Successfully installed sqlmodel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;For an introduction to databases, SQL, and everything else, see the &lt;a href=&#34;https://sqlmodel.tiangolo.com/databases/&#34; target=&#34;_blank&#34;&gt;SQLModel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a quick example. ‚ú®&lt;/p&gt; &#xA;&lt;h3&gt;A SQL Table&lt;/h3&gt; &#xA;&lt;p&gt;Imagine you have a SQL table called &lt;code&gt;hero&lt;/code&gt; with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secret_name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;age&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And you want it to have this data:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;id&lt;/th&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;secret_name&lt;/th&gt; &#xA;   &lt;th&gt;age&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Deadpond&lt;/td&gt; &#xA;   &lt;td&gt;Dive Wilson&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Spider-Boy&lt;/td&gt; &#xA;   &lt;td&gt;Pedro Parqueador&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Rusty-Man&lt;/td&gt; &#xA;   &lt;td&gt;Tommy Sharp&lt;/td&gt; &#xA;   &lt;td&gt;48&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Create a SQLModel Model&lt;/h3&gt; &#xA;&lt;p&gt;Then you could create a &lt;strong&gt;SQLModel&lt;/strong&gt; model like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Optional&#xA;&#xA;from sqlmodel import Field, SQLModel&#xA;&#xA;&#xA;class Hero(SQLModel, table=True):&#xA;    id: Optional[int] = Field(default=None, primary_key=True)&#xA;    name: str&#xA;    secret_name: str&#xA;    age: Optional[int] = None&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That class &lt;code&gt;Hero&lt;/code&gt; is a &lt;strong&gt;SQLModel&lt;/strong&gt; model, the equivalent of a SQL table in Python code.&lt;/p&gt; &#xA;&lt;p&gt;And each of those class attributes is equivalent to each &lt;strong&gt;table column&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Create Rows&lt;/h3&gt; &#xA;&lt;p&gt;Then you could &lt;strong&gt;create each row&lt;/strong&gt; of the table as an &lt;strong&gt;instance&lt;/strong&gt; of the model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;hero_1 = Hero(name=&#34;Deadpond&#34;, secret_name=&#34;Dive Wilson&#34;)&#xA;hero_2 = Hero(name=&#34;Spider-Boy&#34;, secret_name=&#34;Pedro Parqueador&#34;)&#xA;hero_3 = Hero(name=&#34;Rusty-Man&#34;, secret_name=&#34;Tommy Sharp&#34;, age=48)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, you can use conventional Python code with &lt;strong&gt;classes&lt;/strong&gt; and &lt;strong&gt;instances&lt;/strong&gt; that represent &lt;strong&gt;tables&lt;/strong&gt; and &lt;strong&gt;rows&lt;/strong&gt;, and that way communicate with the &lt;strong&gt;SQL database&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Editor Support&lt;/h3&gt; &#xA;&lt;p&gt;Everything is designed for you to get the best developer experience possible, with the best editor support.&lt;/p&gt; &#xA;&lt;p&gt;Including &lt;strong&gt;autocompletion&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;img class=&#34;shadow&#34; src=&#34;https://sqlmodel.tiangolo.com/img/index/autocompletion01.png&#34;&gt; &#xA;&lt;p&gt;And &lt;strong&gt;inline errors&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;img class=&#34;shadow&#34; src=&#34;https://sqlmodel.tiangolo.com/img/index/inline-errors01.png&#34;&gt; &#xA;&lt;h3&gt;Write to the Database&lt;/h3&gt; &#xA;&lt;p&gt;You can learn a lot more about &lt;strong&gt;SQLModel&lt;/strong&gt; by quickly following the &lt;strong&gt;tutorial&lt;/strong&gt;, but if you need a taste right now of how to put all that together and save to the database, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Optional&#xA;&#xA;from sqlmodel import Field, Session, SQLModel, create_engine&#xA;&#xA;&#xA;class Hero(SQLModel, table=True):&#xA;    id: Optional[int] = Field(default=None, primary_key=True)&#xA;    name: str&#xA;    secret_name: str&#xA;    age: Optional[int] = None&#xA;&#xA;&#xA;hero_1 = Hero(name=&#34;Deadpond&#34;, secret_name=&#34;Dive Wilson&#34;)&#xA;hero_2 = Hero(name=&#34;Spider-Boy&#34;, secret_name=&#34;Pedro Parqueador&#34;)&#xA;hero_3 = Hero(name=&#34;Rusty-Man&#34;, secret_name=&#34;Tommy Sharp&#34;, age=48)&#xA;&#xA;&#xA;engine = create_engine(&#34;sqlite:///database.db&#34;)&#xA;&#xA;&#xA;SQLModel.metadata.create_all(engine)&#xA;&#xA;with Session(engine) as session:&#xA;    session.add(hero_1)&#xA;    session.add(hero_2)&#xA;    session.add(hero_3)&#xA;    session.commit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That will save a &lt;strong&gt;SQLite&lt;/strong&gt; database with the 3 heroes.&lt;/p&gt; &#xA;&lt;h3&gt;Select from the Database&lt;/h3&gt; &#xA;&lt;p&gt;Then you could write queries to select from that same database, for example with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Optional&#xA;&#xA;from sqlmodel import Field, Session, SQLModel, create_engine, select&#xA;&#xA;&#xA;class Hero(SQLModel, table=True):&#xA;    id: Optional[int] = Field(default=None, primary_key=True)&#xA;    name: str&#xA;    secret_name: str&#xA;    age: Optional[int] = None&#xA;&#xA;&#xA;engine = create_engine(&#34;sqlite:///database.db&#34;)&#xA;&#xA;with Session(engine) as session:&#xA;    statement = select(Hero).where(Hero.name == &#34;Spider-Boy&#34;)&#xA;    hero = session.exec(statement).first()&#xA;    print(hero)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Editor Support Everywhere&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SQLModel&lt;/strong&gt; was carefully designed to give you the best developer experience and editor support, &lt;strong&gt;even after selecting data&lt;/strong&gt; from the database:&lt;/p&gt; &#xA;&lt;img class=&#34;shadow&#34; src=&#34;https://sqlmodel.tiangolo.com/img/index/autocompletion02.png&#34;&gt; &#xA;&lt;h2&gt;SQLAlchemy and Pydantic&lt;/h2&gt; &#xA;&lt;p&gt;That class &lt;code&gt;Hero&lt;/code&gt; is a &lt;strong&gt;SQLModel&lt;/strong&gt; model.&lt;/p&gt; &#xA;&lt;p&gt;But at the same time, ‚ú® it is a &lt;strong&gt;SQLAlchemy&lt;/strong&gt; model ‚ú®. So, you can combine it and use it with other SQLAlchemy models, or you could easily migrate applications with SQLAlchemy to &lt;strong&gt;SQLModel&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And at the same time, ‚ú® it is also a &lt;strong&gt;Pydantic&lt;/strong&gt; model ‚ú®. You can use inheritance with it to define all your &lt;strong&gt;data models&lt;/strong&gt; while avoiding code duplication. That makes it very easy to use with &lt;strong&gt;FastAPI&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the &lt;a href=&#34;https://github.com/fastapi/sqlmodel/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>