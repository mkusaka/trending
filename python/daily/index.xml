<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-26T01:41:39Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>liltom-eth/llama2-webui</title>
    <updated>2023-07-26T01:41:39Z</updated>
    <id>tag:github.com,2023-07-26:/liltom-eth/llama2-webui</id>
    <link href="https://github.com/liltom-eth/llama2-webui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Llama 2 locally with gradio UI on GPU or CPU from anywhere (Linux/Windows/Mac). Supporting Llama-2-7B/13B/70B with 8-bit, 4-bit. Supporting GPU inference (6 GB VRAM) and CPU inference.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;llama2-webui&lt;/h1&gt; &#xA;&lt;p&gt;Running Llama 2 with gradio web UI on GPU or CPU from anywhere (Linux/Windows/Mac). Supporting Llama 2 7B, 13B, 70B with 8-bit, 4-bit mode. Supporting GPU inference with at least 6 GB VRAM, and CPU inference with at least 6 GB RAM.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/static/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Supporting models: &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGML&#34;&gt;Llama-2-7b&lt;/a&gt;/&lt;a href=&#34;https://huggingface.co/llamaste/Llama-2-13b-chat-hf&#34;&gt;13b&lt;/a&gt;/&lt;a href=&#34;https://huggingface.co/llamaste/Llama-2-70b-chat-hf&#34;&gt;70b&lt;/a&gt;, all &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7b-Chat-GPTQ&#34;&gt;Llama-2-GPTQ&lt;/a&gt;, all &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGML&#34;&gt;Llama-2-GGML&lt;/a&gt; ...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supporting model backends&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Nvidia GPU: tranformers, &lt;a href=&#34;https://github.com/TimDettmers/bitsandbytes&#34;&gt;bitsandbytes(8-bit inference)&lt;/a&gt;, &lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ&#34;&gt;AutoGPTQ(4-bit inference)&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;GPU inference with at least 6 GB VRAM&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;CPU, Mac/AMD GPU: &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;CPU inference &lt;a href=&#34;https://twitter.com/liltom_eth/status/1682791729207070720?s=20&#34;&gt;Demo&lt;/a&gt; on Macbook Air.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Web UI interface: gradio&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#download-llama-2-models&#34;&gt;Download Llama-2 Models&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#model-list&#34;&gt;Model List&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#download-script&#34;&gt;Download Script&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#config-examples&#34;&gt;Config Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#start-web-ui&#34;&gt;Start Web UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#run-on-nvidia-gpu&#34;&gt;Run on Nvidia GPU&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#run-on-low-memory-gpu-with-8-bit&#34;&gt;Run on Low Memory GPU with 8 bit&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#run-on-low-memory-gpu-with-4-bit&#34;&gt;Run on Low Memory GPU with 4 bit&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#run-on-cpu&#34;&gt;Run on CPU&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#mac-gpu-and-amdnvidia-gpu-acceleration&#34;&gt;Mac GPU and AMD/Nvidia GPU Acceleration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;bitsandbytes &amp;gt;= 0.39&lt;/code&gt; may not work on older NVIDIA GPUs. In that case, to use &lt;code&gt;LOAD_IN_8BIT&lt;/code&gt;, you may have to downgrade like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pip install bitsandbytes==0.38.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If run on CPU, install llama.cpp additionally by &lt;code&gt;pip install llama-cpp-python&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Download Llama-2 Models&lt;/h2&gt; &#xA;&lt;p&gt;Llama 2 is a collection of pre-trained and fine-tuned generative text models ranging in scale from 7 billion to 70 billion parameters.&lt;/p&gt; &#xA;&lt;p&gt;Llama-2-7b-Chat-GPTQ is the GPTQ model files for &lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-7b-chat-hf&#34;&gt;Meta&#39;s Llama 2 7b Chat&lt;/a&gt;. GPTQ 4-bit Llama-2 model require less GPU VRAM to run it.&lt;/p&gt; &#xA;&lt;h3&gt;Model List&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Name&lt;/th&gt; &#xA;   &lt;th&gt;set MODEL_PATH in .env&lt;/th&gt; &#xA;   &lt;th&gt;Download URL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meta-llama/Llama-2-7b-chat-hf&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/Llama-2-7b-chat-hf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/llamaste/Llama-2-7b-chat-hf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meta-llama/Llama-2-13b-chat-hf&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/Llama-2-13b-chat-hf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/llamaste/Llama-2-13b-chat-hf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meta-llama/Llama-2-70b-chat-hf&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/Llama-2-70b-chat-hf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/llamaste/Llama-2-70b-chat-hf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meta-llama/Llama-2-7b-hf&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/Llama-2-7b-hf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-7b-hf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meta-llama/Llama-2-13b-hf&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/Llama-2-13b-hf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-13b-hf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;meta-llama/Llama-2-70b-hf&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/Llama-2-70b-hf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-70b-hf&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TheBloke/Llama-2-7b-Chat-GPTQ&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/Llama-2-7b-Chat-GPTQ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7b-Chat-GPTQ&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TheBloke/Llama-2-7B-Chat-GGML&lt;/td&gt; &#xA;   &lt;td&gt;/path-to/llama-2-7b-chat.ggmlv3.q4_0.bin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGML&#34;&gt;Link&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Running 4-bit model &lt;code&gt;Llama-2-7b-Chat-GPTQ&lt;/code&gt; needs GPU with 6GB VRAM.&lt;/p&gt; &#xA;&lt;p&gt;Running 4-bit model &lt;code&gt;llama-2-7b-chat.ggmlv3.q4_0.bin&lt;/code&gt; needs CPU with 6GB RAM. There is also a list of other 2, 3, 4, 5, 6, 8-bit GGML models that can be used from &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGML&#34;&gt;TheBloke/Llama-2-7B-Chat-GGML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download Script&lt;/h3&gt; &#xA;&lt;p&gt;These models can be downloaded from the link using CMD like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Make sure you have git-lfs installed (https://git-lfs.com)&#xA;git lfs install&#xA;git clone git@hf.co:meta-llama/Llama-2-7b-chat-hf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download Llama 2 models, you need to request access from &lt;a href=&#34;https://ai.meta.com/llama/&#34;&gt;https://ai.meta.com/llama/&lt;/a&gt; and also enable access on repos like &lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-7b-chat-hf/tree/main&#34;&gt;meta-llama/Llama-2-7b-chat-hf&lt;/a&gt;. Requests will be processed in hours.&lt;/p&gt; &#xA;&lt;p&gt;For GPTQ models like &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7b-Chat-GPTQ&#34;&gt;TheBloke/Llama-2-7b-Chat-GPTQ&lt;/a&gt;, you can directly download without requesting access.&lt;/p&gt; &#xA;&lt;p&gt;For GGML models like &lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7B-Chat-GGML&#34;&gt;TheBloke/Llama-2-7B-Chat-GGML&lt;/a&gt;, you can directly download without requesting access.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Config Examples&lt;/h3&gt; &#xA;&lt;p&gt;Setup your &lt;code&gt;MODEL_PATH&lt;/code&gt; and model configs in &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;There are some examples in &lt;code&gt;./env_examples/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Setup&lt;/th&gt; &#xA;   &lt;th&gt;Example .env&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama-2-7b-chat-hf 8-bit on GPU&lt;/td&gt; &#xA;   &lt;td&gt;.env.7b_8bit_example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama-2-7b-Chat-GPTQ 4-bit on GPU&lt;/td&gt; &#xA;   &lt;td&gt;.env.7b_gptq_example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama-2-7B-Chat-GGML 4bit on CPU&lt;/td&gt; &#xA;   &lt;td&gt;.env.7b_ggmlv3_q4_0_example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama-2-13b-chat-hf on GPU&lt;/td&gt; &#xA;   &lt;td&gt;.env.13b_example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Start Web UI&lt;/h3&gt; &#xA;&lt;p&gt;Run chatbot with web UI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run on Nvidia GPU&lt;/h3&gt; &#xA;&lt;p&gt;The running requires around 14GB of GPU VRAM for Llama-2-7b and 28GB of GPU VRAM for Llama-2-13b.&lt;/p&gt; &#xA;&lt;p&gt;If you are running on multiple GPUs, the model will be loaded automatically on GPUs and split the VRAM usage. That allows you to run Llama-2-7b (requires 14GB of GPU VRAM) on a setup like 2 GPUs (11GB VRAM each).&lt;/p&gt; &#xA;&lt;h4&gt;Run on Low Memory GPU with 8 bit&lt;/h4&gt; &#xA;&lt;p&gt;If you do not have enough memory, you can set up your &lt;code&gt;LOAD_IN_8BIT&lt;/code&gt; as &lt;code&gt;True&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt;. This can reduce memory usage by around half with slightly degraded model quality. It is compatible with the CPU, GPU, and Metal backend.&lt;/p&gt; &#xA;&lt;p&gt;Llama-2-7b with 8-bit compression can run on a single GPU with 8 GB of VRAM, like an Nvidia RTX 2080Ti, RTX 4080, T4, V100 (16GB).&lt;/p&gt; &#xA;&lt;h4&gt;Run on Low Memory GPU with 4 bit&lt;/h4&gt; &#xA;&lt;p&gt;If you want to run 4 bit Llama-2 model like &lt;code&gt;Llama-2-7b-Chat-GPTQ&lt;/code&gt;, you can set up your &lt;code&gt;LOAD_IN_4BIT&lt;/code&gt; as &lt;code&gt;True&lt;/code&gt; in &lt;code&gt;.env&lt;/code&gt; like example &lt;code&gt;.env.7b_gptq_example&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have downloaded the 4-bit model from &lt;code&gt;Llama-2-7b-Chat-GPTQ&lt;/code&gt; and set the &lt;code&gt;MODEL_PATH&lt;/code&gt; and arguments in &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Llama-2-7b-Chat-GPTQ&lt;/code&gt; can run on a single GPU with 6 GB of VRAM.&lt;/p&gt; &#xA;&lt;h3&gt;Run on CPU&lt;/h3&gt; &#xA;&lt;p&gt;Run Llama-2 model on CPU requires &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; dependency and &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python&#34;&gt;llama.cpp Python Bindings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install llama-cpp-python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download GGML models like &lt;code&gt;llama-2-7b-chat.ggmlv3.q4_0.bin&lt;/code&gt; following &lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/#download-llama-2-models&#34;&gt;Download Llama-2 Models&lt;/a&gt; section. &lt;code&gt;llama-2-7b-chat.ggmlv3.q4_0.bin&lt;/code&gt; model requires at least 6 GB RAM to run on CPU.&lt;/p&gt; &#xA;&lt;p&gt;Set up configs like &lt;code&gt;.env.7b_ggmlv3_q4_0_example&lt;/code&gt; from &lt;code&gt;env_examples&lt;/code&gt; as &lt;code&gt;.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run web UI &lt;code&gt;python app.py&lt;/code&gt; .&lt;/p&gt; &#xA;&lt;h4&gt;Mac GPU and AMD/Nvidia GPU Acceleration&lt;/h4&gt; &#xA;&lt;p&gt;If you would like to use Mac GPU and AMD/Nvidia GPU for acceleration, check these:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/abetlen/llama-cpp-python#installation-with-openblas--cublas--clblast--metal&#34;&gt;Installation with OpenBLAS / cuBLAS / CLBlast / Metal&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/abetlen/llama-cpp-python/raw/main/docs/install/macos.md&#34;&gt;MacOS Install with Metal GPU&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Kindly read our &lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; to learn and understand about our development process.&lt;/p&gt; &#xA;&lt;h3&gt;All Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/liltom-eth/llama2-webui/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=liltom-eth/llama2-webui&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT - see &lt;a href=&#34;https://raw.githubusercontent.com/liltom-eth/llama2-webui/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/meta-llama/Llama-2-7b-chat-hf&#34;&gt;https://huggingface.co/meta-llama/Llama-2-7b-chat-hf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/spaces/huggingface-projects/llama-2-7b-chat&#34;&gt;https://huggingface.co/spaces/huggingface-projects/llama-2-7b-chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TheBloke/Llama-2-7b-Chat-GPTQ&#34;&gt;https://huggingface.co/TheBloke/Llama-2-7b-Chat-GPTQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;https://github.com/ggerganov/llama.cpp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimDettmers/bitsandbytes&#34;&gt;https://github.com/TimDettmers/bitsandbytes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ&#34;&gt;https://github.com/PanQiWei/AutoGPTQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>karpathy/llama2.c</title>
    <updated>2023-07-26T01:41:39Z</updated>
    <id>tag:github.com,2023-07-26:/karpathy/llama2.c</id>
    <link href="https://github.com/karpathy/llama2.c" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Inference Llama 2 in one file of pure C&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;llama2.c&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/karpathy/llama2.c/master/assets/llama_cute.jpg&#34; width=&#34;300&#34; height=&#34;300&#34;&gt; &#xA;&lt;p&gt;With the code in this repo you can train the Llama 2 LLM architecture from scratch in PyTorch, then export the weights to a binary file, and load that into one ~simple 500-line C file (&lt;a href=&#34;https://raw.githubusercontent.com/karpathy/llama2.c/master/run.c&#34;&gt;run.c&lt;/a&gt;) that inferences the model. Alternatively, you can load, finetune, and inference Meta&#39;s Llama 2 (but this is still being actively fleshed out). Hence, this repo is a &#34;fullstack&#34; train + inference solution for Llama 2 LLM, with a focus on minimalism and simplicity. You might think that you need many billion parameter LLMs to do anything useful, but in fact very small LLMs can have surprisingly strong performance if you make the domain narrow enough. I recommend looking at the &lt;a href=&#34;https://huggingface.co/datasets/roneneldan/TinyStories&#34;&gt;TinyStories&lt;/a&gt; paper for inspiration.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this started recently as just a fun weekend project: I took my earlier &lt;a href=&#34;https://github.com/karpathy/nanoGPT&#34;&gt;nanoGPT&lt;/a&gt;, tuned it to implement the Llama-2 architecture instead of GPT-2, and the meat of it was writing the C inference engine in &lt;a href=&#34;https://raw.githubusercontent.com/karpathy/llama2.c/master/run.c&#34;&gt;run.c&lt;/a&gt;. So the project is young and moving quickly. Hat tip to the awesome &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; for inspiring this project. I wanted something super minimal so I chose to hard-code the Llama 2 architecture, stick to fp32, and just roll one inference file of pure C with no dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;feel the magic&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s just run a baby Llama 2 model in C. You need a model checkpoint. Download this 15M parameter model I trained on the &lt;a href=&#34;https://huggingface.co/datasets/roneneldan/TinyStories&#34;&gt;TinyStories&lt;/a&gt; dataset (~58MB download) and place it into the default checkpoint directory &lt;code&gt;out&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://karpathy.ai/llama2c/model.bin -P out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(if that doesn&#39;t work try &lt;a href=&#34;https://drive.google.com/file/d/1aTimLdx3JktDXxcHySNrZJOOk8Vb1qBR/view?usp=share_link&#34;&gt;google drive&lt;/a&gt;). Compile and run the C code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc -O3 -o run run.c -lm&#xA;./run out/model.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll see the text stream a sample. On my M1 MacBook Air this runs at ~110 tokens/s. See &lt;a href=&#34;https://raw.githubusercontent.com/karpathy/llama2.c/master/#performance&#34;&gt;performance&lt;/a&gt; or the Makefile for compile flags that can significantly speed this up. Sample output:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Once upon a time, there was a boy named Timmy. Timmy loved to play sports with his friends. He was very good at throwing and catching balls. One day, Timmy&#39;s mom gave him a new shirt to wear to a party. Timmy thought it was impressive and asked his mom to explain what a shirt could be for. &#34;A shirt is like a special suit for a basketball game,&#34; his mom said. Timmy was happy to hear that and put on his new shirt. He felt like a soldier going to the army and shouting. From that day on, Timmy wore his new shirt every time he played sports with his friends at the party. Once upon a time, there was a little girl named Lily. She loved to play outside with her friends. One day, Lily and her friend Emma were playing with a ball. Emma threw the ball too hard and it hit Lily&#39;s face. Lily felt embarrassed and didn&#39;t want to play anymore. Emma asked Lily what was wrong, and Lily told her about her memory. Emma told Lily that she was embarrassed because she had thrown the ball too hard. Lily felt bad achieved tok/s: 129.146172&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I&#39;ve now also uploaded a bigger checkpoint. This one is dim 512, 8 layers, 8 heads and context length 1024, a ~44M param Transformer. It trained for 200K iterations batch size 32 on 4XA100 40GB GPUs in ~8 hours. You can use this bigger and more powerful checkpoint like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://karpathy.ai/llama2c/model44m.bin -P out44m&#xA;./run out44m/model44m.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This still runs at interactive rates and samples more coherent and diverse stories:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Once upon a time, there was a little girl named Lily. She loved playing with her toys on top of her bed. One day, she decided to have a tea party with her stuffed animals. She poured some tea into a tiny teapot and put it on top of the teapot. Suddenly, her little brother Max came into the room and wanted to join the tea party too. Lily didn&#39;t want to share her tea and she told Max to go away. Max started to cry and Lily felt bad. She decided to yield her tea party to Max and they both shared the teapot. But then, something unexpected happened. The teapot started to shake and wiggle. Lily and Max were scared and didn&#39;t know what to do. Suddenly, the teapot started to fly towards the ceiling and landed on the top of the bed. Lily and Max were amazed and they hugged each other. They realized that sharing was much more fun than being selfish. From that day on, they always shared their tea parties and toys.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Update 2&lt;/strong&gt;: The 110M param model is also available now, see &lt;a href=&#34;https://raw.githubusercontent.com/karpathy/llama2.c/master/#models&#34;&gt;models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Meta&#39;s Llama 2 models&lt;/h2&gt; &#xA;&lt;p&gt;As the neural net architecture is identical, we can also inference the Llama 2 models released by Meta. Sadly there is a bit of friction here due to licensing (I can&#39;t directly upload the checkpoints, I think). So Step 1, get the Llama 2 checkpoints by following the &lt;a href=&#34;https://github.com/facebookresearch/llama&#34;&gt;Meta instructions&lt;/a&gt;. Once we have those checkpoints, we have to convert them into the llama2.c format. For this we use the &lt;code&gt;export_meta_llama_bin.py&lt;/code&gt; file, e.g. for 7B model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python export_meta_llama_bin.py path/to/llama/model/7B llama2_7b.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The export will take ~10 minutes or so and generate a 26GB file (the weights of the 7B model in float32) called &lt;code&gt;llama2_7b.bin&lt;/code&gt; in the current directory. It has been &lt;a href=&#34;https://github.com/karpathy/llama2.c/pull/85&#34;&gt;reported&lt;/a&gt; that despite efforts, the 13B export currently doesn&#39;t work for unknown reaons (accepting PRs for fix). We can run the model as normal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./run llama2_7b.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This ran at about 4 tokens/s compiled with OpenMP on 96 threads on my CPU Linux box in the cloud. (On my MacBook Air M1, currently it&#39;s closer to 30 seconds per token if you just build with &lt;code&gt;make runfast&lt;/code&gt;.) Example output:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The purpose of this document is to highlight the state-of-the-art of CoO generation technologies, both recent developments and those in commercial use. The focus is on the technologies with the highest merit to become the dominating processes of the future and therefore to be technologies of interest to S&amp;amp;T ... R&amp;amp;D. As such, CoO generation technologies developed in Russia, Japan and Europe are described in some depth. The document starts with an introduction to cobalt oxides as complex products and a short view on cobalt as an essential material. The document continues with the discussion of the available CoO generation processes with respect to energy and capital consumption as well as to environmental damage.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;base models... ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯. Since we can inference the base model, it should be possible to also inference the chat model quite easily, and have a conversation with it. And if we can find a way to run 7B more efficiently, we can start adding LoRA to our training script, and going wild with finetunes all within the repo!&lt;/p&gt; &#xA;&lt;h2&gt;models&lt;/h2&gt; &#xA;&lt;p&gt;For the sake of examples of smaller, from-scratch models, I trained multiple models on TinyStories and catalogue them here:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;dim&lt;/th&gt; &#xA;   &lt;th&gt;n_layers&lt;/th&gt; &#xA;   &lt;th&gt;n_heads&lt;/th&gt; &#xA;   &lt;th&gt;max context length&lt;/th&gt; &#xA;   &lt;th&gt;parameters&lt;/th&gt; &#xA;   &lt;th&gt;val loss&lt;/th&gt; &#xA;   &lt;th&gt;download&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OG&lt;/td&gt; &#xA;   &lt;td&gt;288&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;256&lt;/td&gt; &#xA;   &lt;td&gt;15M&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://karpathy.ai/llama2c/model.bin&#34;&gt;model.bin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;44M&lt;/td&gt; &#xA;   &lt;td&gt;512&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;1024&lt;/td&gt; &#xA;   &lt;td&gt;44M&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://karpathy.ai/llama2c/model44m.bin&#34;&gt;model44m.bin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;110M&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;1024&lt;/td&gt; &#xA;   &lt;td&gt;110M&lt;/td&gt; &#xA;   &lt;td&gt;0.7601&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://karpathy.ai/llama2c/model110m.bin&#34;&gt;model110m.bin&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You&#39;ll notice that the 110M model is equivalent to GPT-1 in size. Alternatively, this is also the smallest model in the GPT-2 series (&lt;code&gt;GPT-2 small&lt;/code&gt;), except the max context length is only 1024 instead of 2048. The only notable changes from GPT-1/2 architecture is that Llama uses RoPE relatively positional embeddings instead of absolute/learned positional embeddings, a bit more fancy SwiGLU non-linearity in the MLP, RMSNorm instead of LayerNorm, bias=False on all Linear layers, and is optionally multiquery (but this is not yet supported in llama2.c).&lt;/p&gt; &#xA;&lt;h2&gt;training&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s see how we can train a baby Llama 2 from scratch using the code in this repo. First let&#39;s download and pretokenize some source dataset, e.g. I like &lt;a href=&#34;https://huggingface.co/datasets/roneneldan/TinyStories&#34;&gt;TinyStories&lt;/a&gt; so this is the only example currently available in this repo. But it should be very easy to add datasets, see the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python tinystories.py download&#xA;python tinystories.py pretokenize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then train our model:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python train.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the train.py script for more exotic launches and hyperparameter overrides. I didn&#39;t tune the hyperparameters, I expect simple hyperparameter exploration should give better models. Totally understand if you want to skip model training, for simple demo just download my pretrained model and save it into the directory &lt;code&gt;out&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://karpathy.ai/llama2c/model.bin -P out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once we have the model.bin file, we can inference in C. Compile the C code first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc -O3 -o run run.c -lm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run it simply as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./run out/model.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Watch the tokens stream by, fun! We can also run the PyTorch inference script for comparison (to run, add &lt;a href=&#34;https://drive.google.com/file/d/1SM0rMxzy7babB-v4MfTg1GFqOCgWar5w/view?usp=share_link&#34;&gt;model.ckpt&lt;/a&gt; to /out if you haven&#39;t already):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python sample.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which gives the same results. More detailed testing will be done in &lt;code&gt;test_all.py&lt;/code&gt;, run as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently you will need two files to test or sample: the &lt;a href=&#34;https://drive.google.com/file/d/1aTimLdx3JktDXxcHySNrZJOOk8Vb1qBR/view?usp=share_link&#34;&gt;model.bin&lt;/a&gt; file and the &lt;a href=&#34;https://drive.google.com/file/d/1SM0rMxzy7babB-v4MfTg1GFqOCgWar5w/view?usp=share_link&#34;&gt;model.ckpt&lt;/a&gt; file from PyTorch training I ran earlier. I have to think through running the tests without having to download 200MB of data.&lt;/p&gt; &#xA;&lt;h2&gt;performance&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;(NOTE: this guide is not great because I personally spend a lot of my time in Python land and don&#39;t have an amazing understanding of a lot of these features and flags. If someone does and is willing to help document and briefly describe some of these and their tradeoffs, I&#39;d welcome a PR)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are many ways to potentially speed up this code depending on your system. Here we document a few together with a high-level guide on what they do. Here&#39;s again the default way to compile, but using -O3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc -O3 -o run run.c -lm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;-O3 includes optimizations that are expensive in terms of compile time and memory usage. Including vectorization, loop unrolling, and predicting branches. Here&#39;s a few more to try.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-Ofast&lt;/code&gt; Run additional optimizations which may break compliance with the C/IEEE specifications, in addition to &lt;code&gt;-O3&lt;/code&gt;. See &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html&#34;&gt;the GCC docs&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-march=native&lt;/code&gt; Compile the program to use the architecture of the machine you&#39;re compiling on rather than a more generic CPU. This may enable additional optimizations and hardware-specific tuning such as improved vector instructions/width.&lt;/p&gt; &#xA;&lt;p&gt;The fastest throughput I saw so far on my MacBook Air (M1) is with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc -Ofast -o run run.c -lm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also experiment with replacing &lt;code&gt;gcc&lt;/code&gt; with &lt;code&gt;clang&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenMP&lt;/strong&gt; Big improvements can also be achieved by compiling with OpenMP, which &#34;activates&#34; the &lt;code&gt;#pragma omp parallel for&lt;/code&gt; inside the matmul and attention. You can compile e.g. like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;clang -Ofast -fopenmp -march=native run.c  -lm  -o run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can try swapping clang/gcc, and may try to leave out -march=native. However, when you run inference make sure to use OpenMP flags to set the number of threads, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OMP_NUM_THREADS=4 ./run out/model.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on your system resources you may want to tweak these hyperparameters. (TODO: I am not intimately familiar with OpenMP and its configuration, if someone would like to flesh out this section I would welcome a PR).&lt;/p&gt; &#xA;&lt;h2&gt;unsorted todos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;why is there a leading space in C sampling code when we &lt;code&gt;./run&lt;/code&gt;?&lt;/li&gt; &#xA; &lt;li&gt;support Llama 2 Chat models, and tune run.c to Chat UI/UX&lt;/li&gt; &#xA; &lt;li&gt;possibly include emscripten / web backend (as seen in @gg PR)&lt;/li&gt; &#xA; &lt;li&gt;currently the project only runs in fp32, want to explore more reduced precision inference.&lt;/li&gt; &#xA; &lt;li&gt;todo multiquery support? doesn&#39;t seem as useful for smaller models that run on CPU (?)&lt;/li&gt; &#xA; &lt;li&gt;todo support inferencing beyond max_seq_len steps, have to think through the kv cache&lt;/li&gt; &#xA; &lt;li&gt;why is MFU so low (~10%) on my A100 40GB for training?&lt;/li&gt; &#xA; &lt;li&gt;weird errors with torch.compile and wandb when using DDP&lt;/li&gt; &#xA; &lt;li&gt;(LoRA) finetuning of Llama 2 models&lt;/li&gt; &#xA; &lt;li&gt;make more better tests to decrease yolo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ack&lt;/h2&gt; &#xA;&lt;p&gt;I trained the llama2.c storyteller models on a 4X A100 40GB box graciously provided by the excellent &lt;a href=&#34;https://lambdalabs.com/service/gpu-cloud&#34;&gt;Lambda labs&lt;/a&gt;, thank you.&lt;/p&gt; &#xA;&lt;h2&gt;discord&lt;/h2&gt; &#xA;&lt;p&gt;Figured it&#39;s possible to reuse my existing discord channel (that I use for my &lt;a href=&#34;https://karpathy.ai/zero-to-hero.html&#34;&gt;zero to hero youtube series&lt;/a&gt;), see #llama2c channel on &lt;a href=&#34;https://discord.gg/3zy8kqD9Cp&#34;&gt;discord&lt;/a&gt;, for any quick questions, related discussions, etc.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>langchain-ai/langchain</title>
    <updated>2023-07-26T01:41:39Z</updated>
    <id>tag:github.com,2023-07-26:/langchain-ai/langchain</id>
    <link href="https://github.com/langchain-ai/langchain" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ Building applications with LLMs through composability ⚡&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🦜️🔗 LangChain&lt;/h1&gt; &#xA;&lt;p&gt;⚡ Building applications with LLMs through composability ⚡&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hwchase17/langchain/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hwchase17/langchain&#34; alt=&#34;Release Notes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwchase17/langchain/actions/workflows/langchain_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchain/actions/workflows/langchain_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwchase17/langchain/actions/workflows/langchain_experimental_ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/hwchase17/langchain/actions/workflows/langchain_experimental_ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Experimental CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/langchain&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/langchain/month&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/langchainai&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/langchainai.svg?style=social&amp;amp;label=Follow%20%40LangChainAI&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6adMQxSpJS&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/6adMQxSpJS?compact=true&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/hwchase17/langchain&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Dev%20Containers&amp;amp;message=Open&amp;amp;color=blue&amp;amp;logo=visualstudiocode&#34; alt=&#34;Open in Dev Containers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codespaces.new/hwchase17/langchain&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://star-history.com/#hwchase17/langchain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/hwchase17/langchain?style=social&#34; alt=&#34;GitHub star chart&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://libraries.io/github/hwchase17/langchain&#34;&gt;&lt;img src=&#34;https://img.shields.io/librariesio/github/hwchase17/langchain&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hwchase17/langchain/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/hwchase17/langchain&#34; alt=&#34;Open Issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Looking for the JS/TS version? Check out &lt;a href=&#34;https://github.com/hwchase17/langchainjs&#34;&gt;LangChain.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Production Support:&lt;/strong&gt; As you move your LangChains into production, we&#39;d love to offer more comprehensive support. Please fill out &lt;a href=&#34;https://6w1pwbss0py.typeform.com/to/rrbrdTH2&#34;&gt;this form&lt;/a&gt; and we&#39;ll set up a dedicated support Slack channel.&lt;/p&gt; &#xA;&lt;h2&gt;🚨Breaking Changes for select chains (SQLDatabase) on 7/28&lt;/h2&gt; &#xA;&lt;p&gt;In an effort to make &lt;code&gt;langchain&lt;/code&gt; leaner and safer, we are moving select chains to &lt;code&gt;langchain_experimental&lt;/code&gt;. This migration has already started, but we are remaining backwards compatible until 7/28. On that date, we will remove functionality from &lt;code&gt;langchain&lt;/code&gt;. Read more about the motivation and the progress &lt;a href=&#34;https://github.com/hwchase17/langchain/discussions/8043&#34;&gt;here&lt;/a&gt;. Read how to migrate your code &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langchain/master/MIGRATE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install langchain&lt;/code&gt; or &lt;code&gt;pip install langsmith &amp;amp;&amp;amp; conda install langchain -c conda-forge&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤔 What is this?&lt;/h2&gt; &#xA;&lt;p&gt;Large language models (LLMs) are emerging as a transformative technology, enabling developers to build applications that they previously could not. However, using these LLMs in isolation is often insufficient for creating a truly powerful app - the real power comes when you can combine them with other sources of computation or knowledge.&lt;/p&gt; &#xA;&lt;p&gt;This library aims to assist in the development of those types of applications. Common examples of these applications include:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;❓ Question Answering over specific documents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/docs/use_cases/question_answering/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end Example: &lt;a href=&#34;https://github.com/hwchase17/notion-qa&#34;&gt;Question Answering over Notion Database&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;💬 Chatbots&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/docs/use_cases/chatbots/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end Example: &lt;a href=&#34;https://github.com/hwchase17/chat-langchain&#34;&gt;Chat-LangChain&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;🤖 Agents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/docs/modules/agents/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;End-to-end Example: &lt;a href=&#34;https://huggingface.co/spaces/JavaFXpert/Chat-GPT-LangChain&#34;&gt;GPT+WolframAlpha&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://python.langchain.com&#34;&gt;here&lt;/a&gt; for full documentation on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Getting started (installation, setting up the environment, simple examples)&lt;/li&gt; &#xA; &lt;li&gt;How-To examples (demos, integrations, helper functions)&lt;/li&gt; &#xA; &lt;li&gt;Reference (full API docs)&lt;/li&gt; &#xA; &lt;li&gt;Resources (high-level explanation of core concepts)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 What can this help with?&lt;/h2&gt; &#xA;&lt;p&gt;There are six main areas that LangChain is designed to help with. These are, in increasing order of complexity:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;📃 LLMs and Prompts:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This includes prompt management, prompt optimization, a generic interface for all LLMs, and common utilities for working with LLMs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🔗 Chains:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chains go beyond a single LLM call and involve sequences of calls (whether to an LLM or a different utility). LangChain provides a standard interface for chains, lots of integrations with other tools, and end-to-end chains for common applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;📚 Data Augmented Generation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Data Augmented Generation involves specific types of chains that first interact with an external data source to fetch data for use in the generation step. Examples include summarization of long pieces of text and question/answering over specific data sources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🤖 Agents:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Agents involve an LLM making decisions about which Actions to take, taking that Action, seeing an Observation, and repeating that until done. LangChain provides a standard interface for agents, a selection of agents to choose from, and examples of end-to-end agents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🧠 Memory:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Memory refers to persisting state between calls of a chain/agent. LangChain provides a standard interface for memory, a collection of memory implementations, and examples of chains/agents that use memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🧐 Evaluation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;[BETA] Generative models are notoriously hard to evaluate with traditional metrics. One new way of evaluating them is using language models themselves to do the evaluation. LangChain provides some prompts/chains for assisting in this.&lt;/p&gt; &#xA;&lt;p&gt;For more information on these concepts, please see our &lt;a href=&#34;https://python.langchain.com&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;💁 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;As an open-source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infrastructure, or better documentation.&lt;/p&gt; &#xA;&lt;p&gt;For detailed information on how to contribute, see &lt;a href=&#34;https://raw.githubusercontent.com/langchain-ai/langchain/master/.github/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>