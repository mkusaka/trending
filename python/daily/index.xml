<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-12-30T01:34:58Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jingyaogong/minimind</title>
    <updated>2025-12-30T01:34:58Z</updated>
    <id>tag:github.com,2025-12-30:/jingyaogong/minimind</id>
    <link href="https://github.com/jingyaogong/minimind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;「大模型」3小时完全从0训练26M的小参数GPT，个人显卡即可推理训练！&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://visitor-badge.laobi.icu/badge?page_id=jingyaogong/minimind&#34; alt=&#34;visitors&#34;&gt; &lt;a href=&#34;https://github.com/jingyaogong/minimind/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/jingyaogong/minimind?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jingyaogong/minimind&#34; alt=&#34;GitHub Code License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jingyaogong/minimind/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/jingyaogong/minimind&#34; alt=&#34;GitHub last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jingyaogong/minimind/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-blue&#34; alt=&#34;GitHub pull request&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/collections/jingyaogong/minimind-66caf8d999f5c7fa64f399e5&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-MiniMind%20%20Collection-blue&#34; alt=&#34;Collection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;&#34;大道至简&#34;&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;中文 | &lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/README_en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;本开源项目旨在完全从0开始，最快仅用3小时！即可训练出仅为26.88M大小的微型语言模型&lt;strong&gt;MiniMind&lt;/strong&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MiniMind&lt;/strong&gt;极其轻量，最小版本体积约是 GPT3 的 $\frac{1}{7000}$，力求做到最普通的个人GPU也可快速推理甚至训练。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MiniMind&lt;/strong&gt;发布了大模型极简结构，数据集清洗和预处理、监督预训练(Pretrain)、有监督指令微调(SFT)、低秩自适应(LoRA) 微调，无奖励强化学习直接偏好对齐(DPO)的全阶段代码，也包含拓展共享混合专家(MoE) 的稀疏模型；拓展视觉多模态VLM: &lt;a href=&#34;https://github.com/jingyaogong/minimind-v&#34;&gt;MiniMind-V&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;这不仅是一个开源模型的实现，也是入门大语言模型（LLM）的教程。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;希望此项目能为研究者提供一个抛砖引玉的入门示例，帮助大家快速上手并对LLM领域产生更多的探索与创新。&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;为防止误读，「最快3小时」是指您需要具备＞本人硬件配置的机器，具体规格的详细信息将在下文提供。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/streamlit.gif&#34; alt=&#34;streamlit&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.modelscope.cn/studios/gongjy/minimind&#34;&gt;ModelScope在线测试&lt;/a&gt; | &lt;a href=&#34;https://www.bilibili.com/video/BV12dHPeqE72/?share_source=copy_web&amp;amp;vd_source=670c2504f88726f8cf4a21ef6147c0e8&#34;&gt;Bilibili视频链接&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;📌 Introduction&lt;/h1&gt; &#xA;&lt;p&gt;大语言模型（LLM）领域，如 GPT、LLaMA、GLM 等，虽然它们效果惊艳， 但动辄10 Bilion庞大的模型参数个人设备显存远不够训练，甚至推理困难。 几乎所有人都不会只满足于用Lora等方案fine-tuing大模型学会一些新的指令， 这约等于在教牛顿玩21世纪的智能手机，然而，这远远脱离了学习物理本身的奥妙。 此外，卖课付费订阅的营销号漏洞百出的一知半解讲解AI的教程遍地， 让理解LLM的优质内容雪上加霜，严重阻碍了学习者。&lt;/p&gt; &#xA;&lt;p&gt;因此，本项目的目标是把上手LLM的门槛无限降低， 直接从0开始训练一个极其轻量的语言模型。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] （截至2024-9-17）MiniMind系列已完成了3个型号模型的预训练，最小仅需26M（0.02B），即可具备流畅的对话能力！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型 (大小)&lt;/th&gt; &#xA;   &lt;th&gt;tokenizer长度&lt;/th&gt; &#xA;   &lt;th&gt;推理占用&lt;/th&gt; &#xA;   &lt;th&gt;release&lt;/th&gt; &#xA;   &lt;th&gt;主观评分（/100）&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-small (26M)&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;0.5 GB&lt;/td&gt; &#xA;   &lt;td&gt;2024.08.28&lt;/td&gt; &#xA;   &lt;td&gt;50&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-moe (4×26M)&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;1.0 GB&lt;/td&gt; &#xA;   &lt;td&gt;2024.09.17&lt;/td&gt; &#xA;   &lt;td&gt;55&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1 (108M)&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;1.0 GB&lt;/td&gt; &#xA;   &lt;td&gt;2024.09.01&lt;/td&gt; &#xA;   &lt;td&gt;60&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;该分析在具有Torch 2.1.2、CUDA 12.2和Flash Attention 2的2×RTX 3090 GPU上进行。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;项目包含：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;公开MiniMind模型代码（包含Dense和MoE模型）、Pretrain、SFT指令微调、LoRA微调、DPO偏好优化的全过程代码、数据集和来源。&lt;/li&gt; &#xA; &lt;li&gt;兼容&lt;code&gt;transformers&lt;/code&gt;、&lt;code&gt;accelerate&lt;/code&gt;、&lt;code&gt;trl&lt;/code&gt;、&lt;code&gt;peft&lt;/code&gt;等流行框架。&lt;/li&gt; &#xA; &lt;li&gt;训练支持单机单卡、单机多卡(DDP、DeepSpeed)训练，使用wandb可视化训练流程。支持在任意位置停止，及在任意位置继续训练。&lt;/li&gt; &#xA; &lt;li&gt;在Ceval数据集上进行模型测试的代码。&lt;/li&gt; &#xA; &lt;li&gt;实现Openai-Api基本的chat接口，便于集成到第三方ChatUI使用（FastGPT、Open-WebUI等）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;希望此开源项目可以帮助LLM初学者快速入门！&lt;/p&gt; &#xA;&lt;h3&gt;👉&lt;strong&gt;最近更新&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;2024-10-05 (newest 🎉)&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;为MiniMind拓展了多模态能力之---视觉&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;移步孪生项目&lt;a href=&#34;https://github.com/jingyaogong/minimind-v&#34;&gt;minimind-v&lt;/a&gt;查看详情！&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;2024-09-27&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;09-27更新pretrain数据集的预处理方式，为了保证文本完整性，放弃预处理成.bin训练的形式（轻微牺牲训练速度）。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;目前pretrain预处理后的文件命名为：pretrain_data.csv。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;删除了一些冗余的代码。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;2024-09-17&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;更新minimind-v1-moe模型&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;为了防止歧义，不再使用mistral_tokenizer分词，全部采用自定义的minimind_tokenizer作为分词器。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;2024-09-01&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;更新minimind-v1 (108M)模型，采用minimind_tokenizer，预训练轮次3 + SFT轮次10，更充分训练，性能更强。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;项目已部署至ModelScope创空间，可以在此网站上体验：&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.modelscope.cn/studios/gongjy/minimind&#34;&gt;🔗ModelScope在线体验🔗&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;2024-08-27&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;项目首次开源&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;📌 Environment&lt;/h1&gt; &#xA;&lt;p&gt;仅是我个人的软硬件环境配置，自行酌情更改：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CPU: Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz&#xA;内存：128 GB&#xA;显卡：NVIDIA GeForce RTX 3090(24GB) * 2&#xA;环境：python 3.9 + Torch 2.1.2 + DDP单机多卡训练&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu == 20.04&lt;/li&gt; &#xA; &lt;li&gt;Python == 3.9&lt;/li&gt; &#xA; &lt;li&gt;Pytorch == 2.1.2&lt;/li&gt; &#xA; &lt;li&gt;CUDA == 12.2&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/requirements.txt&#34;&gt;requirements.txt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📌 Quick Start Test&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34; style=&#34;font-size: 1.5em; font-weight: bold;&#34;&gt; &#xA; &lt;img src=&#34;https://huggingface.co/front/assets/huggingface_logo-noborder.svg?sanitize=true&#34; alt=&#34;Hugging Face Logo&#34; style=&#34;vertical-align: middle; height: 30px;&#34;&gt; Hugging Face &#xA; &lt;p&gt;&lt;a href=&#34;https://huggingface.co/collections/jingyaogong/minimind-66caf8d999f5c7fa64f399e5&#34;&gt;MiniMind (HuggingFace)&lt;/a&gt;&lt;/p&gt; &#xA; &lt;img src=&#34;https://g.alicdn.com/sail-web/maas/1.15.0/static/modelscopeIcon.cd89353f.svg?sanitize=true&#34; alt=&#34;Hugging Face Logo&#34; style=&#34;vertical-align: middle; height: 30px;&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.modelscope.cn/models/gongjy/minimind-v1&#34;&gt;MiniMind (ModelScope)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 1&#xA;git clone https://huggingface.co/jingyaogong/minimind-v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# step 2&#xA;python 2-eval.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者启动streamlit，启动网页聊天界面&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;「注意」需要python&amp;gt;=3.10，安装 &lt;code&gt;pip install streamlit==1.27.2&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# or step 3, use streamlit&#xA;streamlit run fast_inference.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;📌 Quick Start Train&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;0、克隆项目代码&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jingyaogong/minimind.git&#xA;cd minimind&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;1、环境安装&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# 测试torch是否可用cuda&#xA;import torch&#xA;print(torch.cuda.is_available())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;如果不可用，请自行去&lt;a href=&#34;https://download.pytorch.org/whl/torch_stable.html&#34;&gt;torch_stable&lt;/a&gt; 下载whl文件安装。参考&lt;a href=&#34;https://blog.csdn.net/weixin_45456738/article/details/141029610?ops_request_misc=&amp;amp;request_id=&amp;amp;biz_id=102&amp;amp;utm_term=%E5%AE%89%E8%A3%85torch&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-141029610.nonecase&amp;amp;spm=1018.2226.3001.4187&#34;&gt;链接&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2、如果你需要自己训练&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;2.1 下载&lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/#%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80&#34;&gt;数据集下载地址&lt;/a&gt;放到&lt;code&gt;./dataset&lt;/code&gt;目录下&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;2.2 &lt;code&gt;python data_process.py&lt;/code&gt;处理数据集，例如pretrain数据提前进行token-encoder、sft数据集抽离qa到csv文件&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;2.3 在&lt;code&gt;./model/LMConfig.py&lt;/code&gt; 中调整model的参数配置&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;这里仅需调整dim和n_layers和use_moe参数，分别是&lt;code&gt;(512+8)&lt;/code&gt;或&lt;code&gt;(768+16)&lt;/code&gt;，对应于&lt;code&gt;minimind-v1-small&lt;/code&gt;和&lt;code&gt;minimind-v1&lt;/code&gt;&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;2.4 &lt;code&gt;python 1-pretrain.py&lt;/code&gt; 执行预训练，得到 &lt;code&gt;pretrain_*.pth&lt;/code&gt; 作为预训练的输出权重&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;2.5 &lt;code&gt;python 3-full_sft.py&lt;/code&gt; 执行指令微调，得到 &lt;code&gt;full_sft_*.pth&lt;/code&gt; 作为指令微调的输出权重&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;2.6 &lt;code&gt;python 4-lora_sft.py&lt;/code&gt; 执行lora微调（非必须）&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;2.7 &lt;code&gt;python 5-dpo_train.py&lt;/code&gt; 执行DPO人类偏好强化学习对齐（非必须）&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;3、测试模型推理效果&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;确保需要使用的，训练完成的参数权重&lt;code&gt;*.pth&lt;/code&gt;文件位于&lt;code&gt;./out/&lt;/code&gt;目录下&lt;/li&gt; &#xA;   &lt;li&gt;也可以直接去&lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/#%E8%AE%AD%E7%BB%83%E5%AE%8C%E6%88%90%E7%9A%84%E6%A8%A1%E5%9E%8B%E6%9D%83%E9%87%8D&#34;&gt;训练完成的模型权重&lt;/a&gt;下载使用我训练好的&lt;code&gt;*.pth&lt;/code&gt;权重文件 &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;minimind/out&#xA;├── multi_chat&#xA;│&amp;nbsp;&amp;nbsp; ├── full_sft_512.pth&#xA;│&amp;nbsp;&amp;nbsp; ├── full_sft_512_moe.pth&#xA;│&amp;nbsp;&amp;nbsp; └── full_sft_768.pth&#xA;├── single_chat&#xA;│&amp;nbsp;&amp;nbsp; ├── full_sft_512.pth&#xA;│&amp;nbsp;&amp;nbsp; ├── full_sft_512_moe.pth&#xA;│&amp;nbsp;&amp;nbsp; └── full_sft_768.pth&#xA;├── pretrain_768.pth&#xA;├── pretrain_512_moe.pth&#xA;├── pretrain_512.pth&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;python 0-eval_pretrain.py&lt;/code&gt;测试预训练模型的接龙效果&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;python 2-eval.py&lt;/code&gt;测试模型的对话效果 &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/2-eval.png&#34; alt=&#34;2-eval&#34;&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🍭「Tip」预训练和全参微调pretrain和full_sft均支持多卡加速&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;假设你的设备只有1张显卡，使用原生python启动训练即可：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;执行预训练或指令微调训练 &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python 1-pretrain.py&#xA;# and&#xA;python 3-full_sft.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;假设你的设备有N (N＞1) 张显卡：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;单机N卡启动训练(DDP)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc_per_node N 1-pretrain.py&#xA;# and&#xA;torchrun --nproc_per_node N 3-full_sft.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;单机N卡启动训练(DeepSpeed)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deepspeed --master_port 29500 --num_gpus=N 1-pretrain.py&#xA;# and&#xA;deepspeed --master_port 29500 --num_gpus=N 3-full_sft.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;开启wandb记录训练过程(非必须)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc_per_node N 1-pretrain.py --use_wandb&#xA;# and&#xA;python 1-pretrain.py --use_wandb&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;通过添加&lt;code&gt;--use_wandb&lt;/code&gt;参数，可以记录训练过程，训练完成后，可以在wandb网站上查看训练过程。通过修改&lt;code&gt;wandb_project&lt;/code&gt; 和&lt;code&gt;wandb_run_name&lt;/code&gt;参数，可以指定项目名称和运行名称。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📌 Data sources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;🤖 分词器：nlp中的Tokenizer类似于词典，将单词从自然语言通过“词典”映射到0,1,36这样的数字，可以理解为数字就代表了单词在“词典”中的页码。 LLM分词器的构建方式有两种：一种是自己构造词表训练一个分词器，代码可见&lt;code&gt;train_tokenizer.py&lt;/code&gt;；另一种是选择开源模型训练好的分词器。 “词典”当然可以直接选择用新华词典或是牛津词典，优点是token转化压缩率很好，但缺点是词表太长，动辄数十万个词汇短语； 也可以使用自己训练的分词器，优点是词表随意控制，缺点是压缩率不够理想，且生僻词不容易面面俱到。 当然，“词典”的选择很重要，LLM的输出本质上是SoftMax到词典N个词的多分类问题，然后通过“词典”解码到自然语言。 因为LLM体积非常小，为了避免模型头重脚轻（词嵌入embedding层参数占整个LLM比太高），所以词表长度需要选择比较小。 强大的开源模型例如01万物、千问、chatglm、mistral、Llama3等，它们的tokenizer词表长度如下：&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;tbody&gt;&#xA;    &lt;tr&gt;&#xA;     &lt;th&gt;Tokenizer模型&lt;/th&gt;&#xA;     &lt;th&gt;词表大小&lt;/th&gt;&#xA;     &lt;th&gt;来源&lt;/th&gt;&#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt;&#xA;     &lt;td&gt;yi tokenizer&lt;/td&gt;&#xA;     &lt;td&gt;64,000&lt;/td&gt;&#xA;     &lt;td&gt;01万物（中国）&lt;/td&gt;&#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt;&#xA;     &lt;td&gt;qwen2 tokenizer&lt;/td&gt;&#xA;     &lt;td&gt;151,643&lt;/td&gt;&#xA;     &lt;td&gt;阿里云（中国）&lt;/td&gt;&#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt;&#xA;     &lt;td&gt;glm tokenizer&lt;/td&gt;&#xA;     &lt;td&gt;151,329&lt;/td&gt;&#xA;     &lt;td&gt;智谱AI（中国）&lt;/td&gt;&#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt;&#xA;     &lt;td&gt;mistral tokenizer&lt;/td&gt;&#xA;     &lt;td&gt;32,000&lt;/td&gt;&#xA;     &lt;td&gt;Mistral AI（法国）&lt;/td&gt;&#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt;&#xA;     &lt;td&gt;llama3 tokenizer&lt;/td&gt;&#xA;     &lt;td&gt;128,000&lt;/td&gt;&#xA;     &lt;td&gt;Meta（美国）&lt;/td&gt;&#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt;&#xA;     &lt;td&gt;minimind tokenizer&lt;/td&gt;&#xA;     &lt;td&gt;6,400&lt;/td&gt;&#xA;     &lt;td&gt;自定义&lt;/td&gt;&#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt;&#xA;  &lt;/table&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;👉2024-09-17更新：为了防止过去的版本歧义&amp;amp;控制体积，minimind所有模型均使用minimind_tokenizer分词，废弃所有mistral_tokenizer版本。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;尽管minimind_tokenizer长度很小，编解码效率弱于qwen2、glm等中文友好型分词器。 但minimind模型选择了自己训练的minimind_tokenizer作为分词器，以保持整体参数轻量，避免编码层和计算层占比失衡，头重脚轻，因为minimind的词表大小只有6400。 且minimind在实际测试中没有出现过生僻词汇解码失败的情况，效果良好。 由于自定义词表压缩长度到6400，使得LLM总参数量最低只有26M。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;📙【Pretrain数据】： &lt;a href=&#34;https://github.com/mobvoi/seq-monkey-data/raw/main/docs/pretrain_open_corpus.md&#34;&gt;Seq-Monkey通用文本数据集&lt;/a&gt; / &lt;a href=&#34;https://pan.baidu.com/s/114F1k3eksiWCOQLvaT3RYQ?pwd=6666&#34;&gt;Seq-Monkey百度网盘&lt;/a&gt; 是由多种公开来源的数据（如网页、百科、博客、开源代码、书籍等）汇总清洗而成。整理成统一的JSONL格式，并经过了严格的筛选和去重，确保数据的全面性、规模、可信性和高质量。总量大约在10B token，适合中文大语言模型的预训练。&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;第2种选择：&lt;a href=&#34;https://hf-mirror.com/datasets/Skywork/SkyPile-150B/tree/main/data&#34;&gt;SkyPile-150B数据集&lt;/a&gt; 的可公开访问部分包含约2.33亿个独立网页，每个网页平均包含1000多个汉字。数据集包括大约1500亿个令牌和620GB的纯文本数据。 &lt;strong&gt;如果着急的话&lt;/strong&gt;，可以尝试只挑选SkyPile-150B的部分jsonl下载（并在./data_process.py中对文本tokenizer生成* .csv文件），以便快速跑通预训练流程。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📕【SFT数据】：&lt;a href=&#34;https://www.modelscope.cn/datasets/deepctrl/deepctrl-sft-data&#34;&gt;匠数大模型SFT数据集&lt;/a&gt; 是一个完整、格式统一、安全的大模型训练和研究资源。 从网络上的公开数据源收集并整理了大量开源数据集，对其进行了格式统一，数据清洗， 包含10M条数据的中文数据集和包含2M条数据的英文数据集。 总量大约在3B token，适合中文大语言模型的SFT。 数据集整合来源于以下所有数据（仅供参考，因此无需单独下载，仅需下载一个完整的【SFT数据】）： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/train_3.5M_CN&#34;&gt;BelleGroup/train_3.5M_CN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/LinkSoul/instruction_merge_set&#34;&gt;LinkSoul/instruction_merge_set&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/stingning/ultrachat&#34;&gt;stingning/ultrachat&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BAAI/COIG-PC-core&#34;&gt;BAAI/COIG-PC-core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/shibing624/sharegpt_gpt4&#34;&gt;shibing624/sharegpt_gpt4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/shareAI/ShareGPT-Chinese-English-90k&#34;&gt;shareAI/ShareGPT-Chinese-English-90k&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/TigerResearch/sft_zh&#34;&gt;Tiger Research&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/BelleGroup/school_math_0.25M&#34;&gt;BelleGroup/school_math_0.25M&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/YeungNLP/moss-003-sft-data&#34;&gt;YeungNLP/moss-003-sft-data&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📘【DPO数据】：大约合并后共8万条dpo数据，人工标注的偏好数据，均来自&lt;a href=&#34;https://github.com/HIT-SCIR/huozi&#34;&gt;活字模型&lt;/a&gt; ，可以用于训练奖励模型，优化模型回复质量，使其更加符合人类偏好。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;【更多数据集】目前已经有&lt;a href=&#34;https://github.com/HqWu-HITCS/Awesome-Chinese-LLM&#34;&gt;HqWu-HITCS/Awesome-Chinese-LLM&lt;/a&gt; 在收集和梳理中文LLM相关的开源模型、应用、数据集及教程等资料，并持续更新这方面的最新进展。全面且专业，Respect！&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;数据集下载地址&lt;/h3&gt; &#xA;&lt;p&gt;下载到&lt;code&gt;./dataset/&lt;/code&gt;目录下&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;MiniMind训练数据集&lt;/th&gt; &#xA;   &lt;th&gt;下载地址&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;【tokenizer训练集】&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/datasets/jingyaogong/minimind_dataset/tree/main&#34;&gt;HuggingFace&lt;/a&gt; / &lt;a href=&#34;https://pan.baidu.com/s/1yAw1LVTftuhQGAC1Y9RdYQ?pwd=6666&#34;&gt;百度网盘&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;【Pretrain数据】&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://share.mobvoi.com:5000/sharing/O91blwPkY&#34;&gt;Seq-Monkey官方&lt;/a&gt; / &lt;a href=&#34;https://pan.baidu.com/s/1-Z8Q37lJD4tOKhyBs1D_6Q?pwd=6666&#34;&gt;百度网盘&lt;/a&gt; / &lt;a href=&#34;https://huggingface.co/datasets/jingyaogong/minimind_dataset/tree/main&#34;&gt;HuggingFace&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;【SFT数据】&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.modelscope.cn/datasets/deepctrl/deepctrl-sft-data/resolve/master/sft_data_zh.jsonl&#34;&gt;匠数大模型SFT数据集&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;【DPO数据】&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/datasets/jingyaogong/minimind_dataset/tree/main/dpo&#34;&gt;Huggingface&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;📌 Model&lt;/h1&gt; &#xA;&lt;p&gt;MiniMind-Dense（和&lt;a href=&#34;https://ai.meta.com/blog/meta-llama-3-1/&#34;&gt;Llama3.1&lt;/a&gt;一样）使用了Transformer的Decoder-Only结构，跟GPT-3的区别在于：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;采用了GPT-3的预标准化方法，也就是在每个Transformer子层的输入上进行归一化，而不是在输出上。具体来说，使用的是RMSNorm归一化函数。&lt;/li&gt; &#xA; &lt;li&gt;用SwiGLU激活函数替代了ReLU，这样做是为了提高性能。&lt;/li&gt; &#xA; &lt;li&gt;像GPT-Neo一样，去掉了绝对位置嵌入，改用了旋转位置嵌入（RoPE），这样在处理超出训练长度的推理时效果更好。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;MiniMind-MoE模型，它的结构基于Llama3和&lt;a href=&#34;https://arxiv.org/pdf/2405.04434&#34;&gt;Deepseek-V2&lt;/a&gt;中的MixFFN混合专家模块。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DeepSeek-V2在前馈网络（FFN）方面，采用了更细粒度的专家分割和共享的专家隔离技术，以提高Experts的效果。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;MiniMind的整体结构一致，只是在RoPE计算、推理函数和FFN层的代码上做了一些小调整。 其结构如下图（重绘版）：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/LLM-structure.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/LLM-structure-moe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;修改模型配置见&lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/model/LMConfig.py&#34;&gt;./model/LMConfig.py&lt;/a&gt;。 minimind目前训练的模型版本见下表：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Name&lt;/th&gt; &#xA;   &lt;th&gt;params&lt;/th&gt; &#xA;   &lt;th&gt;len_vocab&lt;/th&gt; &#xA;   &lt;th&gt;n_layers&lt;/th&gt; &#xA;   &lt;th&gt;d_model&lt;/th&gt; &#xA;   &lt;th&gt;kv_heads&lt;/th&gt; &#xA;   &lt;th&gt;q_heads&lt;/th&gt; &#xA;   &lt;th&gt;share+route&lt;/th&gt; &#xA;   &lt;th&gt;TopK&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-small&lt;/td&gt; &#xA;   &lt;td&gt;26M&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;512&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-moe&lt;/td&gt; &#xA;   &lt;td&gt;4×26M&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;512&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;2+4&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1&lt;/td&gt; &#xA;   &lt;td&gt;108M&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;768&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;📌 Experiment&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Name&lt;/th&gt; &#xA;   &lt;th&gt;params&lt;/th&gt; &#xA;   &lt;th&gt;len_vocab&lt;/th&gt; &#xA;   &lt;th&gt;batch_size&lt;/th&gt; &#xA;   &lt;th&gt;pretrain_time&lt;/th&gt; &#xA;   &lt;th&gt;sft_single_time&lt;/th&gt; &#xA;   &lt;th&gt;sft_multi_time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-small&lt;/td&gt; &#xA;   &lt;td&gt;26M&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;≈2 hour (1 epoch)&lt;/td&gt; &#xA;   &lt;td&gt;≈2 hour (1 epoch)&lt;/td&gt; &#xA;   &lt;td&gt;≈0.5 hour (1 epoch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-moe&lt;/td&gt; &#xA;   &lt;td&gt;4×26M&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;≈6 hour (1 epoch)&lt;/td&gt; &#xA;   &lt;td&gt;≈5 hour (1 epoch)&lt;/td&gt; &#xA;   &lt;td&gt;≈1 hour (1 epoch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1&lt;/td&gt; &#xA;   &lt;td&gt;108M&lt;/td&gt; &#xA;   &lt;td&gt;6400&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;≈6 hour (1 epoch)&lt;/td&gt; &#xA;   &lt;td&gt;≈4 hour (1 epoch)&lt;/td&gt; &#xA;   &lt;td&gt;≈1 hour (1 epoch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;预训练(Text-to-Text)&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;LLM首先要学习的并非直接与人交流，而是让肚子中充满知识的墨水，至于墨水理论上喝的越饱越好，产生大量的对世界的认知积累。&lt;/li&gt; &#xA;   &lt;li&gt;预训练就是让Model先埋头苦学大量基本的知识，例如从维基百科、新闻、常识、书籍等。&lt;/li&gt; &#xA;   &lt;li&gt;它无监督的从大量的文本数据中压缩知识到自己模型的权重，目的是：学会词语接龙。例如我们输入“秦始皇是”四个字，它在大量学习后能预测出下一句话大概率是“中国的第一位皇帝”。&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;pretrain的学习率设置为1e-4到1e-5的动态学习率，预训练epoch数设为5。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc_per_node 2 1-pretrain.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;单轮次对话有监督微调(Single dialog Fine-tuning)&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;经过预训练，半成品LLM此时已经掌握了几乎所有的语言知识和百科常识。此时它还不会与人聊天，相反它只会无脑地进行输入词语的接龙，生成下一个词。&lt;/li&gt; &#xA;   &lt;li&gt;此时需要对半成品LLM做限制在聊天模板中进行微调，例如当它遇到这样的模板“&amp;lt;聊天开始&amp;gt;秦始皇是&amp;lt;聊天终止&amp;gt; ”后不再无脑接龙，而是意识到这是一段完整的对话结束。&lt;/li&gt; &#xA;   &lt;li&gt;我们称这个过程为指令微调，就如同让学富五车的「牛顿」先生适应21世纪的聊天习惯，学习屏幕左侧是对方消息，右侧是本人消息这个规律。&lt;/li&gt; &#xA;   &lt;li&gt;在训练时，MiniMind的指令和回答长度被截断在512，是为了节省显存空间。就像我们学习时，会先从短的文章开始，当学会阅读200字作文后，800字长文章就不需要再单独学习。&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;在推理时通过调整RoPE线性差值，实现长度外推到1024或2048及以上很方便。学习率设置为1e-5到1e-6的动态学习率，微调epoch数为6。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 3-full_sft.py中设置数据集为sft_data_single.csv&#xA;torchrun --nproc_per_node 2 3-full_sft.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;多轮对话微调(Multi dialog Fine-tuning)&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;在2的基础上，LLM已经学会一个问题-&amp;gt;一个回答的聊天模板。此时仅需在具备历史问答的更长聊天模板上进一步微调即可。&lt;/li&gt; &#xA;   &lt;li&gt;我们仅需使用数据集的history_chat 字段，即历史对话，以及history_chat_response字段，即历史对话的回答。&lt;/li&gt; &#xA;   &lt;li&gt;构建【问题-&amp;gt;回答，问题-&amp;gt;回答，问题-&amp;gt;】的新聊天模板，然后使用这个数据集进行微调。&lt;/li&gt; &#xA;   &lt;li&gt;学习完成的模型不仅仅只能回答当前问题，还能根据历史对话进行连贯的对话。&lt;/li&gt; &#xA;   &lt;li&gt;这一步 &lt;strong&gt;并非必须&lt;/strong&gt; ，因为小模型长上文对话能力很弱，强行对齐多轮问答模板会损失一定程度的单轮SFT效果。&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;学习率设置为1e-5到1e-6的动态学习率，微调epoch数为5。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 3-full_sft.py中设置数据集为sft_data.csv&#xA;torchrun --nproc_per_node 2 3-full_sft.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;人类反馈强化学习(RLHF)之-直接偏好优化(Direct Preference Optimization, DPO)&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;在前面的训练中，GPT已经具备了基本的对话能力，但是这样的能力完全基于单词接龙，缺少正例反例的激励。&lt;/li&gt; &#xA;   &lt;li&gt;GPT尚且未知什么回答是好的，什么是差的。我们希望它能够更符合人的偏好，给出更让人满意的回答。&lt;/li&gt; &#xA;   &lt;li&gt;这个过程就像是让GPT参加工作培训，从优秀员工的作为例子，消极员工作为反例，学习如何更好地服务客户。&lt;/li&gt; &#xA;   &lt;li&gt;RLHF系列中，与PPO(Proximal Policy Optimization)这种需要奖励模型、价值模型的RL算法不同；&lt;/li&gt; &#xA;   &lt;li&gt;DPO通过推导PPO奖励模型的显式解，把在线奖励模型换成离线数据，ref输出可以提前保存。&lt;/li&gt; &#xA;   &lt;li&gt;DPO性能几乎不变，只用跑 actor 和 ref 2 个模型，大大节省显存开销和增加训练稳定性。&lt;/li&gt; &#xA;   &lt;li&gt;同样的，LLM的RL步骤也 &lt;strong&gt;并非必须&lt;/strong&gt;，有利也有弊。&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;活字三元组(q,chose,reject)数据集，学习率le-5，半精度fp16,共1个epoch，耗时1h。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python 5-dpo_train.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;📋关于LLM的参数配置，有一篇很有意思的论文&lt;a href=&#34;https://arxiv.org/pdf/2402.14905&#34;&gt;MobileLLM&lt;/a&gt;做了详细的研究和实验。 scaling law在小模型中有自己独特的规律。 引起Transformer参数成规模变化的参数几乎只取决于&lt;code&gt;d_model&lt;/code&gt;和&lt;code&gt;n_layers&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;d_model&lt;/code&gt;↑+&lt;code&gt;n_layers&lt;/code&gt;↓-&amp;gt;矮胖子&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d_model&lt;/code&gt;↓+&lt;code&gt;n_layers&lt;/code&gt;↑-&amp;gt;瘦高个&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2020年提出Scaling Law的论文认为，训练数据量、参数量以及训练迭代次数才是决定性能的关键因素，而模型架构的影响几乎可以忽视。 然而似乎这个定律对小模型并不完全适用。 MobileLLM提出架构的深度比宽度更重要，「深而窄」的「瘦长」模型可以学习到比「宽而浅」模型更多的抽象概念。 例如当模型参数固定在125M或者350M时，30～42层的「狭长」模型明显比12层左右的「矮胖」模型有更优越的性能， 在常识推理、问答、阅读理解等8个基准测试上都有类似的趋势。 这其实是非常有趣的发现，因为以往为100M左右量级的小模型设计架构时，几乎没人尝试过叠加超过12层。 这与MiniMind在训练过程中，模型参数量在&lt;code&gt;d_model&lt;/code&gt;和&lt;code&gt;n_layers&lt;/code&gt;之间进行调整实验观察到的效果是一致的。 然而「深而窄」的「窄」也是有维度极限的，当d_model&amp;lt;512时，词嵌入维度坍塌的劣势非常明显， 增加的layers并不能弥补词嵌入在固定q_head带来d_head不足的劣势。 当d_model&amp;gt;1536时，layers的增加似乎比d_model的优先级更高，更能带来具有“性价比”的参数-&amp;gt;效果增益。 因此MiniMind设定small模型的d_model=512，n_layers=8来获取的「极小体积&amp;lt;-&amp;gt;更好效果」的平衡。 设定d_model=768，n_layers=16来获取效果的更大收益，更加符合小模型scaling-law的变化曲线。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;作为参考，GPT3的参数设定见下表：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/gpt3_config.png&#34; alt=&#34;gpt3_config.png&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;训练完成的模型权重&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1KUfSzEkSXYbCCBj0Pw-9fA?pwd=6666&#34;&gt;🔗百度网盘&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model Name&lt;/th&gt; &#xA;   &lt;th&gt;params&lt;/th&gt; &#xA;   &lt;th&gt;Config&lt;/th&gt; &#xA;   &lt;th&gt;pretrain_model&lt;/th&gt; &#xA;   &lt;th&gt;single_sft_model&lt;/th&gt; &#xA;   &lt;th&gt;multi_sft_model&lt;/th&gt; &#xA;   &lt;th&gt;rl_model&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-small&lt;/td&gt; &#xA;   &lt;td&gt;26M&lt;/td&gt; &#xA;   &lt;td&gt;d_model=512&lt;br&gt;n_layers=8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pretrain_512.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;single_chat/full_sft_512.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;multi_chat/full_sft_512.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rl_512.pth&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1-moe&lt;/td&gt; &#xA;   &lt;td&gt;4×26M&lt;/td&gt; &#xA;   &lt;td&gt;d_model=512&lt;br&gt;n_layers=8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pretrain_512_moe.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;single_chat/full_sft_512_moe.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;multi_chat/full_sft_512_moe.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v1&lt;/td&gt; &#xA;   &lt;td&gt;108M&lt;/td&gt; &#xA;   &lt;td&gt;d_model=768&lt;br&gt;n_layers=16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pretrain_768.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;single_chat/full_sft_768.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;multi_chat/full_sft_768.pth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rl_768.pth&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;📌 Eval&lt;/h1&gt; &#xA;&lt;h2&gt;① RLHF篇&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] 测试基于「单轮对话full_sft」和「DPO强化学习对齐」的minimind模型对比。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;模型文件&lt;a href=&#34;https://pan.baidu.com/s/1KUfSzEkSXYbCCBj0Pw-9fA?pwd=6666&#34;&gt;百度网盘&lt;/a&gt;，其中 &lt;code&gt;rl_&amp;lt;dim&amp;gt;.pth&lt;/code&gt; 即为「DPO强化学习对齐」后的minimind模型权重。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[Q]: 你叫什么名字？&#xA;[ft_768]: 我是一款人工智能语言模型，可以回答您的问题和提供帮助。您有什么需要我帮忙的吗？&#xA;[rl_768]: 我是一款基于人工智能技术的自然语言处理系统，主要用于处理和生成人类语言的任务。我可以帮助用户进行文本处理、语音识别、文本生成等任务，同时也可以帮助用户进行智能聊天、翻译、翻译等多种应用。如果您需要更多关于该项目的信息，请告诉我。&#xA;[ft_512]: 我很高兴能够帮助你。你有什么其他问题需要我帮忙解答吗？&#xA;[rl_512]: 我是一款基于自然语言处理技术的聊天机器人，能够理解和回复用户的问题和指令，并进行相应的回复和回复。我被训练为能够与人类进行交互和回答各种问题和任务。请问有什么需要吗？&#xA;&#xA;[Q]: 你是谁？&#xA;[ft_768]: 我是一个人工智能语言模型，没有个人身份和身份。我只是根据输入的指令和文本信息生成响应。&#xA;[rl_768]: 我是一个计算机程序，没有个人身份或身份。我被设计来回答各种问题和提供帮助，包括回答问题、提供建议、进行实验、提供信息等等。我被广泛应用于各种领域，例如自然语言处理、计算机视觉、人工智能等等。如果您需要更多的帮助或信息，请随时与我联系。我会尽我所能来帮助您的工作和生活。&#xA;[ft_512]: 我是一个大型语言模型，可以回答各种各样的问题，包括科学、历史、文化和技术方面的问题。您有什么需要我回答的问题吗？&#xA;[rl_512]: 我是一个计算机程序，没有具体的身世和人物。如果您可以告诉我您想知道的具体信息，我会尽力回答您的问题。&#xA;&#xA;[Q]: 中国有哪些比较好的大学？&#xA;[ft_768]: 中国有很多著名的大学，其中包括北京大学、上海交通大学、复兴中医药学院、浙江大学等。这些大学在不同的领域都有着自己的标志性建筑和研究方向，值得一提的是，它们在中国的顶尖教育资源中享有很高的声誉。&#xA;[rl_768]: 中国的大学有很多，具体情况还要根据你的需求来决定。如果你需要更详细的信息，建议可以去咨询一下你所在城市的大学排名和政策法规，从而选择一个合适的大学。同时，你可以在网上查阅相关信息，或者去咨询一些大学相关机构，如中国人民大学、中国人民大学等，以获得更为详细和专业的指导和建议。&#xA;[ft_512]: 中国有很多优秀的大学，比如麻省理工学院、北京大学、上海大学等等。这些大学在中国教育事业的发展和成就都非常突出。&#xA;[rl_512]: 中国教育局、中国大学、中国大陆大学和中国大陆大学均有优秀的教育体裁，但各地教育水平和专业要求都可能存在差异。中国教育局的学历要求、教学方法、师资力量等因素都各具特点，而大学的学历要求也各有千秋。中国大陆大学生的学历要求也各有不同，需要根据自己的实际情况进行选择。如果您对中国大陆大学生的专业要求有更具体需求，建议您可以通过互联网、国内外的各类机构和机构进行比较和交流。同时，您也可以向身边的人或朋友、老师、家长等人士寻求帮助和建议。希望以上回答对您有帮助。&#xA;&#xA;[Q]: 你知道光速是多少吗？&#xA;[ft_768]: 光速是一个物理常数，表示光在真空中传播的速度，大约是每秒299792458米。光速是物理学中最基本的物理常数之一，也是相对论的重要基础之一。&#xA;[rl_768]: 当然知道，光速是光在真空中传播的速度，通常用c来表示。它是宇宙物理学中非常重要的理论之一。在物理学中，光速被认为是宇宙中最重要的速度之一。它代表着光在真空中传播的速度，这也是许多重要公式和公式的基础。&#xA;[ft_512]: 光速是光在真空中传播的速度，约为每秒299,792,458米。它是几乎所有的物理学概念，也是宇宙中最神秘和最重要的物理概念之一。&#xA;[rl_512]: 光速是光在真空中传播的速度，是自然界中不可逆转的速度。光源是由光的原子、分子、固体和光的组成，其速度约为每秒平方。光的速度是每秒约1个英亞或光年，这个数字是根据相对论、量子力学和引力理论来计算的。光速是相对的概念之一，它代表着我们对自然界中任何事件的理解和解释。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;👉效果总结&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RLHF数据使用大约10万条；full_sft模型在简洁性和信息准确性方面表现更好；rl模型在回答中提供了更多的背景信息，但信息准确性有待改进。&lt;/li&gt; &#xA; &lt;li&gt;总的来说RLHF后的模型倾向于学习：说更多有礼貌但无用的废话讨好“对话”本身，而对信息准确性则有轻微损失。&lt;/li&gt; &#xA; &lt;li&gt;天下没有免费的午餐，还需要继续提升RLHF数据集的质量，也要接受模型能力无法避免的损失(程度有轻重)。&lt;/li&gt; &#xA; &lt;li&gt;DPO和在线PPO的区别在于reject和chosen都是离线准备的，和minimind模型本身的输出必然存在很大的分布差异。&lt;/li&gt; &#xA; &lt;li&gt;这类似于DPO算法使模型观看乒乓球世界冠军的打法「录像」进行强化学习，而不是像PPO一样请reward模型做「教练」纠正自己的打法强化学习。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;② Instruct Fine-Tuning 篇&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] 以下测试于2024-09-17完成，此日期后发布的新模型，无特殊需要时将不加入测试。 测试基于单轮对话full_sft的minimind模型(无多轮微调和强化学习微调)。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;[A] &lt;a href=&#34;https://pan.baidu.com/s/1_COe0FQRDmeapSsvArahCA?pwd=6666&#34;&gt;minimind-v1-small(0.02B)&lt;/a&gt;&lt;br&gt; [B] &lt;a href=&#34;https://pan.baidu.com/s/1tqB-GMvuiGQBvEl-yZ-oBw?pwd=6666&#34;&gt;minimind-v1-moe(0.1B)&lt;/a&gt;&lt;br&gt; [C] &lt;a href=&#34;https://pan.baidu.com/s/1p713loS7EfwHQf3G9eYI3Q?pwd=6666&#34;&gt;minimind-v1(0.1B)&lt;/a&gt;&lt;br&gt; [D] &lt;a href=&#34;https://github.com/DLLXW/baby-llama2-chinese&#34;&gt;baby-llama2-chinese(0.2B)&lt;/a&gt;&lt;br&gt; [E] &lt;a href=&#34;https://github.com/charent/ChatLM-mini-Chinese&#34;&gt;chatlm-mini-chinese(0.2B)&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[Q]: 你知道长江吗？&#xA;[A]: 是的，长江是中国最长的河流，全长超过3300千米。&#xA;[B]: 长江是中国最长的河流，总长度约为6300公里。它发源于青藏高原的青海湖，流经青海、四川、甘肃、宁夏、内蒙古、陕西和山西。长江流域是中国最大的农业区之一，也是中国的文化和经济中心。&#xA;[C]: 是的，长江是中国最长的河流之一，也是世界第三大河流。长江发源于青藏高原，流经11个省份，最终注入东海。长江流域是中国最大的河流流域之一，拥有着丰富的自然资源和文化遗产，如长江大桥、长江海洋博物馆、长江古城等。&#xA;[D]: 同时也知道，中国是世界上最长的城市之一，拥有超过3400万人口。&#xA;[E]: 是的，长江是中国最长的河流，也是世界上最长的河流之一。它发源于青藏高原，流经九个省区，最终注入东海。长江流域的气候温和，四季分明，是中国重要的农业和工业基地。长江流域的水产资源丰富，是中国的重要渔业资源之一。&#xA;&#xA;&#xA;[Q]: 第一颗人造卫星是哪个国家发射的？&#xA;[A]: 第一颗人造卫星是斯普特尼克1号。&#xA;[B]: 第一颗人造卫星是俄罗斯的国际卫星，于1957年发射。&#xA;[C]: 第一颗人造卫星是苏联发射的，它是由苏联于1957年10月发射的。&#xA;[D]: 这颗名为“阿姆斯特朗”的卫星，于1961年11月20日发射，是第一个成功将人类送入太空的卫星。&#xA;[E]: 第一颗人造卫星是苏联于1957年4月4日发射的，它是由苏联宇航员尤里·加加林（Yuri Gagarin）和苏联工程师罗尔德·谢尔盖耶夫（Roald Skohley）共同发射的。在发射过程中，加加林和谢尔盖耶夫使用了一个名为“斯普特尼克1号”的小型卫星，它的直径为4.3米，重量为1,051公斤。这枚卫星被称为“斯普特尼克1号”，是苏联太空竞赛中的一个里程碑，也是人类历史上第一次在太空中进行太空行走。&#xA;&#xA;&#xA;[Q]: 你知道泰山在哪里吗？&#xA;[A]: 泰山位于中国东部地区，是中国五岳之一。&#xA;[B]: 泰山位于山东省泰安市泰安市。泰安市是中国五岳之一，也是世界文化遗产和中国历史文化名山之一。泰安市有许多著名的景点，如五岳之一、玉皇顶、南天门、玉皇阁等。&#xA;[C]: 泰山位于中国山东省泰安市，是中国五岳之一。&#xA;[D]: 作为一个人工智能助手，我无法访问互联网，因此无法提供关于你所在位置的信息。不过，你可以通过搜索或搜索相关关键词来获取有关你所在位置的信息，或者查看相关新闻或网站来获取有关你所在位置的信息。&#xA;[E]: 泰山位于中国山东省泰安市境内，是中国五岳之一，也是中国文化和历史的重要象征之一。它是中国五岳之一，也是中国道教和佛教的发源地之一。泰山的海拔高度为1,545米，是中国五岳之一，也是中国最著名的旅游景点之一。它的历史可以追溯到公元前5世纪，是中国古代帝王祭祀的场所。泰山也是中国文化的重要组成部分，被誉为“五岳之首”，是中国文化的重要遗产之一。&#xA;&#xA;&#xA;[Q]: 世界上最高的山峰是什么？&#xA;[A]: 世界上最高的山峰是珠穆朗玛峰，位于尼泊尔和中国的边境上，海拔8848米。&#xA;[B]: 世界上最高的山峰是珠穆朗玛峰，位于喜马拉雅山脉，海拔8,848米。&#xA;[C]: 珠穆朗玛峰是世界上最高的山峰，海拔8848米。&#xA;[D]: 世界上最高的山峰是珠穆朗玛峰，位于喜马拉雅山脉，海拔8,848.86米（29,031.69英尺）。&#xA;[E]: 世界上最高的山峰是珠穆朗玛峰，也称为萨加玛塔，位于喜马拉雅山脉的尼泊尔和中国边境之间，海拔8,848.86米（29,031.69英尺）。它是世界上最著名的登山目标之一，吸引着来自世界各地的登山者前来挑战。珠穆朗玛峰的名字来自藏语，意思是“女神的额峰”，它是由两个不同的山峰组成的，其中一个是位于尼泊尔的珠穆朗玛峰，另一个则位于中国。它的高度是通过测量海拔高度来确定的，因为它是通过测量地球的平均高度来确定的。尽管珠穆朗玛峰是世界上最高的山峰，但它并不是地球上任何其他地方都能到达的。地球上的其他地方，如南美洲的安第斯山脉，也是世界上最高的山脉，但它并不是地球上最高的山峰。总之，珠穆朗玛峰是世界上最高的山峰，但它并不是地球上任何地方都能到达的。它是地球上最高的山脉，但它并不是地球上任何地方都能到达的。&#xA;&#xA;&#xA;[Q]: 万有引力是谁提出的？&#xA;[A]: 万有引力是由英国物理学家牛顿提出的。他认为，所有物体都会产生引力，这个引力是由物体的质量和距离决定的。这个理论揭示了质量和距离之间的关系，并证明了万有引力的本质。&#xA;[B]: 万有引力是由牛顿在1687年提出的。它是宇宙中一个基本的物理现象，它描述了物体之间的相互作用。这个力被称为万有引力，它在所有物体之间都存在，这种力与物体的质量和距离有关。万有引力是自然界中最基本的力量之一，它不仅影响着物体的运动和变化，还对宇宙的结构和演化产生着重要的影响。&#xA;[C]: 万有引力是英国物理学家艾萨克·牛顿在17世纪提出的。&#xA;[D]: 引力是宇宙中一种力量，它是由质量或能量所组成的。根据牛顿的万有引力定律，一个物体之间的引力大小与它的质量成正比，与它的质量成反比。因此，牛顿的万有引力定律表明，一个物体之间的引力大小与它的质量成正比，与它的质量成反比。这个定律在物理学、天文学和物理学中都有广泛的应用。&#xA;[E]: 万有引力是由英国物理学家艾萨克·牛顿于1687年提出的。他在1687年发表了一篇著名的论文，题为《自然哲学的数学原理》，其中提出了万有引力定律，指出任何两个物体之间都存在着一种引力，这种引力的大小与它们的质量成正比，与它们之间的距离的平方成反比。这个定律被称为万有引力定律，它描述了质量和距离之间的关系。它表明，两个物体之间的引力与它们的质量成正比，与它们之间的距离的平方成反比。这个定律对于解释宇宙中的许多现象和现象之间的相互作用非常重要，例如行星绕太阳运动、恒星之间的引力透镜效应等等。它也被广泛应用于天文学、物理学和工程学等领域，为我们理解宇宙的本质和演化提供了重要的理论基础。&#xA;&#xA;&#xA;[Q]: 你知道大熊猫的主要食物是什么吗？&#xA;[A]: 大熊猫的主要食物是竹子。它们通常吃竹子，每天需要吃掉大约30公斤的竹子。&#xA;[B]: 是的，大熊猫主要以竹子为食。它们每天需要吃掉大量的竹子来维持生命，每天需要吃掉40至80公斤的竹子。此外，它们也会吃一些其他的植物，如草、果实、坚果和小型哺乳动物。&#xA;[C]: 大熊猫主要以竹子为食，也会偶尔食用其他的植物和动物。此外，大熊猫也会吃一些野果、小动物和植物，但这些都不属于它们的主要食物来源。&#xA;[D]: 大熊猫的主要食物是竹子。&#xA;[E]: 大熊猫是一种以竹子为主要食物的植食动物，它们的肠道结构适合消化纤维素含量高的竹子，但也会吃一些其他植物，如草本植物和小型哺乳动物。大熊猫的肠道结构也适应了高纤维的竹子，这使得它们能够消化大量的纤维素，从而帮助它们在野外生存。大熊猫的肠道中还含有一种叫做“纤维素酶”的酶类物质，这种酶能够帮助大熊猫分解纤维素，从而帮助它们消化大量的水分和营养物质。此外，大熊猫的肠道还含有一种叫做“纤维素蛋白”的蛋白质，这种蛋白质能够帮助大熊猫维持体内的能量水平，从而帮助它们在野外生存。总的来说，大熊猫的主要食物是竹子，但它们也会吃一些其他植物，如草本植物和小型哺乳动物。&#xA;&#xA;&#xA;[Q]: 海水为什么是咸的？&#xA;[A]: 海水中含有许多盐分，这些盐分可以导致海水咸度的增加。海水中的盐分主要来自于海水中的盐分，这些盐分可以从海水中的盐分中获得。海水中的氧化物和盐分可以与海水中的盐分形成氢键，从而使海水咸度增加。&#xA;[B]: 海水是咸的，这是因为它含有大量的盐分，其中包括氯离子和氯离子。这些离子在海洋中形成了大量的盐，这些盐分被称为盐分。海水中含有许多溶解在水中的盐，这些盐分会随着海水的升高而逐渐蒸发，最终导致海水中盐分的蒸发。这些盐分在海水中被完全消耗，然后被排除在海水中。此外，海水中还含有许多其他的盐分，但这些盐分是不同的，因为它们在水中的浮起和下降过程是不同的。海水中的盐分是从海底的岩石中提取出来的，这些盐分在海水中可以被利用。总的来说，海水是咸的，这也是为什么海水中含有许多盐分和盐分的原因。&#xA;[C]: 海水含有许多溶解的盐类，其中最主要的是氯化钠。当水中加入盐时，盐的分子会与水分子发生反应，形成氢氧化钠，这是一种盐。&#xA;[D]: 因为水是许多生物的生存所必需的，它能够吸收和释放二氧化碳，释放氧气，维持大气中的水蒸气，以及维持水循环。水中的盐类和化学物质会释放出氧气，使地球上的生物呼吸。此外，水还具有许多其他功能，如保持水循环、维持水循环、调节气候和环境等。水是许多生物生存所必需的，它也是许多自然现象的重要基础。&#xA;[E]: 海水是咸的主要原因是因为其中含有大量的溶解盐类，其中最主要的是氯化钠（NaCl）。氯化钠是一种非常常见的盐类，它存在于地球上的大部分地区，包括海洋、湖泊、河流和地下水。当水从海洋中蒸发时，它会带走一部分盐分，使海水变得咸。此外，海中还含有其他溶解盐类的物质，如硫酸盐、硫酸镁、硫酸钙、硫酸镁盐、硫酸镁钾、硫酸镁钠、硫酸镁钙、硫酸镁镁钙、硫酸镁镁钙、硫酸镁镁钙、硫酸镁镁钠、硫酸镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁钙、硫酸镁镁镁镁钙、硫酸镁镁镁镁钙、硫酸镁镁镁镁钙、硫酸镁镁镁镁钙、硫酸镁镁镁镁钙、硫酸镁镁镁镁钙、硫酸镁镁镁镁镁钙、硫酸镁镁镁镁镁钙、硫酸镁镁镁镁镁钙、硫酸镁镁镁镁镁钙、硫酸镁镁镁镁镁镁钙、硫酸镁镁镁镁镁镁钙、硫酸镁镁镁镁镁镁钙、硫酸镁镁镁镁镁镁镁钙、硫酸镁镁镁镁&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] 🙋‍♂️直接把上述模型的回答丢给GPT-4o，让它帮忙打个分：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;模型表现点评：&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;模型A&lt;/strong&gt;：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;表现&lt;/strong&gt;：模型A的回答通常简洁明了，但在某些问题上缺乏详细信息和准确性。例如，在长江的长度问题上，模型A的回答是错误的。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;评分&lt;/strong&gt;：60&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;模型B&lt;/strong&gt;：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;表现&lt;/strong&gt;：模型B的回答在某些问题上提供了额外的信息，但这些信息有时是不准确的或多余的。例如，在长江的长度问题上，模型B提供了不准确的长度和流域面积。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;评分&lt;/strong&gt;：65&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;模型C&lt;/strong&gt;：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;表现&lt;/strong&gt;：模型C的回答通常较为详细，且在大多数问题上提供了准确的信息。例如，在长江和泰山的问题上，模型C的回答是准确的。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;评分&lt;/strong&gt;：75&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;模型D&lt;/strong&gt;：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;表现&lt;/strong&gt;：模型D的回答在某些问题上显得混乱，且缺乏准确性。例如，在泰山的问题上，模型D的回答完全偏离了主题。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;评分&lt;/strong&gt;：50&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;模型E&lt;/strong&gt;：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;表现&lt;/strong&gt;：模型E的回答通常非常详细，但在某些问题上过于冗长，且包含了一些不必要的信息。例如，在万有引力的问题上，模型E的回答过于复杂。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;评分&lt;/strong&gt;：70&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;排序（从高到低）：&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型&lt;/th&gt; &#xA;   &lt;th&gt;C&lt;/th&gt; &#xA;   &lt;th&gt;E&lt;/th&gt; &#xA;   &lt;th&gt;B&lt;/th&gt; &#xA;   &lt;th&gt;A&lt;/th&gt; &#xA;   &lt;th&gt;D&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;分数&lt;/td&gt; &#xA;   &lt;td&gt;75&lt;/td&gt; &#xA;   &lt;td&gt;70&lt;/td&gt; &#xA;   &lt;td&gt;65&lt;/td&gt; &#xA;   &lt;td&gt;60&lt;/td&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;👉效果总结&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;minimind系列（ABC）的排序符合直觉，minimind-v1(0.1B)评分最高，常识性问题的回答基本没有错误和幻觉。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;出乎意料的是，minimind-v1-small(0.02B)仅有26M参数，却可以接近minimind-v1(0.1B)的表现。&lt;/li&gt; &#xA;   &lt;li&gt;minimind-v1(0.1B)的sft轮数&lt;code&gt;epochs&lt;/code&gt;仅有不到2，偷懒提前kill腾出资源给小模型，0.1B没有得到充分训练的情况下依然做到了最强，其实还是底大一级压死人。&lt;/li&gt; &#xA;   &lt;li&gt;minimind-v1-moe(0.1B)表现只比minimind-v1-small(0.02B) 略好，同样是因为偷懒早停腾出资源做其它训练了，但是MoE模型这种稀疏多Experts模式需要的训练轮次需要酌情更高，让所有FFN层专家得到路由的激活充分训练，在目前epochs设置为3时训练的还不够充足。 minimind在早期实验验证阶段在Yi-Tokenizer上试验过moe的充分训练版本，可以做到比dense小模型表现肉眼可见地更好。此部分可能需要留给日后腾出服务器再训练并更新v2、v3版本。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;E模型的回答肉眼看起来是非常不错的，尽管存在些许幻觉瞎编的情况。但GPT-4o和Deepseek的评分都一致认为它“信息过度冗长，且有重复内容，存在幻觉”。 其实这种评价略显严格，100个字中哪怕有10个字是幻觉，就很容易把它归到低分。由于E模型预训练文本长度更长，数据集大得多，所以回答的看起来很完备。在体积近似的情况下，数据数量和质量都很重要。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🙋‍♂️个人主观评价：E&amp;gt;C&amp;gt;B≈A&amp;gt;D&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🤖 GPT-4o 评价：C&amp;gt;E&amp;gt;B&amp;gt;A&amp;gt;D&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Scaling Law：模型参数越大，训练数据越多模型的性能越强。&lt;/p&gt; &#xA;&lt;h1&gt;📌 Objective dataset: C-Eval&lt;/h1&gt; &#xA;&lt;p&gt;C-Eval评测代码见：&lt;code&gt;./eval_ceval.py&lt;/code&gt;， 小模型的测评通常为了避免回复格式的难以固定的特点， 而直接判断&lt;code&gt;A&lt;/code&gt;,&lt;code&gt;B&lt;/code&gt;,&lt;code&gt;C&lt;/code&gt;,&lt;code&gt;D&lt;/code&gt;四个字母对应token预测概率，取最大的作为回答答案，与标准答案计算正确率。 minimind模型本身没有使用较大的数据集训练，也没有针对回答选择题的指令做微调，测评结果可以当个参考。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;例如minimind-small的结果细项：&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;1&lt;/th&gt; &#xA;   &lt;th&gt;2&lt;/th&gt; &#xA;   &lt;th&gt;3&lt;/th&gt; &#xA;   &lt;th&gt;4&lt;/th&gt; &#xA;   &lt;th&gt;5&lt;/th&gt; &#xA;   &lt;th&gt;6&lt;/th&gt; &#xA;   &lt;th&gt;7&lt;/th&gt; &#xA;   &lt;th&gt;8&lt;/th&gt; &#xA;   &lt;th&gt;9&lt;/th&gt; &#xA;   &lt;th&gt;10&lt;/th&gt; &#xA;   &lt;th&gt;11&lt;/th&gt; &#xA;   &lt;th&gt;12&lt;/th&gt; &#xA;   &lt;th&gt;13&lt;/th&gt; &#xA;   &lt;th&gt;14&lt;/th&gt; &#xA;   &lt;th&gt;15&lt;/th&gt; &#xA;   &lt;th&gt;16&lt;/th&gt; &#xA;   &lt;th&gt;17&lt;/th&gt; &#xA;   &lt;th&gt;18&lt;/th&gt; &#xA;   &lt;th&gt;19&lt;/th&gt; &#xA;   &lt;th&gt;20&lt;/th&gt; &#xA;   &lt;th&gt;21&lt;/th&gt; &#xA;   &lt;th&gt;22&lt;/th&gt; &#xA;   &lt;th&gt;23&lt;/th&gt; &#xA;   &lt;th&gt;24&lt;/th&gt; &#xA;   &lt;th&gt;25&lt;/th&gt; &#xA;   &lt;th&gt;26&lt;/th&gt; &#xA;   &lt;th&gt;27&lt;/th&gt; &#xA;   &lt;th&gt;28&lt;/th&gt; &#xA;   &lt;th&gt;29&lt;/th&gt; &#xA;   &lt;th&gt;30&lt;/th&gt; &#xA;   &lt;th&gt;31&lt;/th&gt; &#xA;   &lt;th&gt;32&lt;/th&gt; &#xA;   &lt;th&gt;33&lt;/th&gt; &#xA;   &lt;th&gt;34&lt;/th&gt; &#xA;   &lt;th&gt;35&lt;/th&gt; &#xA;   &lt;th&gt;36&lt;/th&gt; &#xA;   &lt;th&gt;37&lt;/th&gt; &#xA;   &lt;th&gt;38&lt;/th&gt; &#xA;   &lt;th&gt;39&lt;/th&gt; &#xA;   &lt;th&gt;40&lt;/th&gt; &#xA;   &lt;th&gt;41&lt;/th&gt; &#xA;   &lt;th&gt;42&lt;/th&gt; &#xA;   &lt;th&gt;43&lt;/th&gt; &#xA;   &lt;th&gt;44&lt;/th&gt; &#xA;   &lt;th&gt;45&lt;/th&gt; &#xA;   &lt;th&gt;46&lt;/th&gt; &#xA;   &lt;th&gt;47&lt;/th&gt; &#xA;   &lt;th&gt;48&lt;/th&gt; &#xA;   &lt;th&gt;49&lt;/th&gt; &#xA;   &lt;th&gt;50&lt;/th&gt; &#xA;   &lt;th&gt;51&lt;/th&gt; &#xA;   &lt;th&gt;52&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Data&lt;/td&gt; &#xA;   &lt;td&gt;probability_and_statistics&lt;/td&gt; &#xA;   &lt;td&gt;law&lt;/td&gt; &#xA;   &lt;td&gt;middle_school_biology&lt;/td&gt; &#xA;   &lt;td&gt;high_school_chemistry&lt;/td&gt; &#xA;   &lt;td&gt;high_school_physics&lt;/td&gt; &#xA;   &lt;td&gt;legal_professional&lt;/td&gt; &#xA;   &lt;td&gt;high_school_chinese&lt;/td&gt; &#xA;   &lt;td&gt;high_school_history&lt;/td&gt; &#xA;   &lt;td&gt;tax_accountant&lt;/td&gt; &#xA;   &lt;td&gt;modern_chinese_history&lt;/td&gt; &#xA;   &lt;td&gt;middle_school_physics&lt;/td&gt; &#xA;   &lt;td&gt;middle_school_history&lt;/td&gt; &#xA;   &lt;td&gt;basic_medicine&lt;/td&gt; &#xA;   &lt;td&gt;operating_system&lt;/td&gt; &#xA;   &lt;td&gt;logic&lt;/td&gt; &#xA;   &lt;td&gt;electrical_engineer&lt;/td&gt; &#xA;   &lt;td&gt;civil_servant&lt;/td&gt; &#xA;   &lt;td&gt;chinese_language_and_literature&lt;/td&gt; &#xA;   &lt;td&gt;college_programming&lt;/td&gt; &#xA;   &lt;td&gt;accountant&lt;/td&gt; &#xA;   &lt;td&gt;plant_protection&lt;/td&gt; &#xA;   &lt;td&gt;middle_school_chemistry&lt;/td&gt; &#xA;   &lt;td&gt;metrology_engineer&lt;/td&gt; &#xA;   &lt;td&gt;veterinary_medicine&lt;/td&gt; &#xA;   &lt;td&gt;marxism&lt;/td&gt; &#xA;   &lt;td&gt;advanced_mathematics&lt;/td&gt; &#xA;   &lt;td&gt;high_school_mathematics&lt;/td&gt; &#xA;   &lt;td&gt;business_administration&lt;/td&gt; &#xA;   &lt;td&gt;mao_zedong_thought&lt;/td&gt; &#xA;   &lt;td&gt;ideological_and_moral_cultivation&lt;/td&gt; &#xA;   &lt;td&gt;college_economics&lt;/td&gt; &#xA;   &lt;td&gt;professional_tour_guide&lt;/td&gt; &#xA;   &lt;td&gt;environmental_impact_assessment_engineer&lt;/td&gt; &#xA;   &lt;td&gt;computer_architecture&lt;/td&gt; &#xA;   &lt;td&gt;urban_and_rural_planner&lt;/td&gt; &#xA;   &lt;td&gt;college_physics&lt;/td&gt; &#xA;   &lt;td&gt;middle_school_mathematics&lt;/td&gt; &#xA;   &lt;td&gt;high_school_politics&lt;/td&gt; &#xA;   &lt;td&gt;physician&lt;/td&gt; &#xA;   &lt;td&gt;college_chemistry&lt;/td&gt; &#xA;   &lt;td&gt;high_school_biology&lt;/td&gt; &#xA;   &lt;td&gt;high_school_geography&lt;/td&gt; &#xA;   &lt;td&gt;middle_school_politics&lt;/td&gt; &#xA;   &lt;td&gt;clinical_medicine&lt;/td&gt; &#xA;   &lt;td&gt;computer_network&lt;/td&gt; &#xA;   &lt;td&gt;sports_science&lt;/td&gt; &#xA;   &lt;td&gt;art_studies&lt;/td&gt; &#xA;   &lt;td&gt;teacher_qualification&lt;/td&gt; &#xA;   &lt;td&gt;discrete_mathematics&lt;/td&gt; &#xA;   &lt;td&gt;education_science&lt;/td&gt; &#xA;   &lt;td&gt;fire_engineer&lt;/td&gt; &#xA;   &lt;td&gt;middle_school_geography&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;1&lt;/th&gt; &#xA;   &lt;th&gt;2&lt;/th&gt; &#xA;   &lt;th&gt;3&lt;/th&gt; &#xA;   &lt;th&gt;4&lt;/th&gt; &#xA;   &lt;th&gt;5&lt;/th&gt; &#xA;   &lt;th&gt;6&lt;/th&gt; &#xA;   &lt;th&gt;7&lt;/th&gt; &#xA;   &lt;th&gt;8&lt;/th&gt; &#xA;   &lt;th&gt;9&lt;/th&gt; &#xA;   &lt;th&gt;10&lt;/th&gt; &#xA;   &lt;th&gt;11&lt;/th&gt; &#xA;   &lt;th&gt;12&lt;/th&gt; &#xA;   &lt;th&gt;13&lt;/th&gt; &#xA;   &lt;th&gt;14&lt;/th&gt; &#xA;   &lt;th&gt;15&lt;/th&gt; &#xA;   &lt;th&gt;16&lt;/th&gt; &#xA;   &lt;th&gt;17&lt;/th&gt; &#xA;   &lt;th&gt;18&lt;/th&gt; &#xA;   &lt;th&gt;19&lt;/th&gt; &#xA;   &lt;th&gt;20&lt;/th&gt; &#xA;   &lt;th&gt;21&lt;/th&gt; &#xA;   &lt;th&gt;22&lt;/th&gt; &#xA;   &lt;th&gt;23&lt;/th&gt; &#xA;   &lt;th&gt;24&lt;/th&gt; &#xA;   &lt;th&gt;25&lt;/th&gt; &#xA;   &lt;th&gt;26&lt;/th&gt; &#xA;   &lt;th&gt;27&lt;/th&gt; &#xA;   &lt;th&gt;28&lt;/th&gt; &#xA;   &lt;th&gt;29&lt;/th&gt; &#xA;   &lt;th&gt;30&lt;/th&gt; &#xA;   &lt;th&gt;31&lt;/th&gt; &#xA;   &lt;th&gt;32&lt;/th&gt; &#xA;   &lt;th&gt;33&lt;/th&gt; &#xA;   &lt;th&gt;34&lt;/th&gt; &#xA;   &lt;th&gt;35&lt;/th&gt; &#xA;   &lt;th&gt;36&lt;/th&gt; &#xA;   &lt;th&gt;37&lt;/th&gt; &#xA;   &lt;th&gt;38&lt;/th&gt; &#xA;   &lt;th&gt;39&lt;/th&gt; &#xA;   &lt;th&gt;40&lt;/th&gt; &#xA;   &lt;th&gt;41&lt;/th&gt; &#xA;   &lt;th&gt;42&lt;/th&gt; &#xA;   &lt;th&gt;43&lt;/th&gt; &#xA;   &lt;th&gt;44&lt;/th&gt; &#xA;   &lt;th&gt;45&lt;/th&gt; &#xA;   &lt;th&gt;46&lt;/th&gt; &#xA;   &lt;th&gt;47&lt;/th&gt; &#xA;   &lt;th&gt;48&lt;/th&gt; &#xA;   &lt;th&gt;49&lt;/th&gt; &#xA;   &lt;th&gt;50&lt;/th&gt; &#xA;   &lt;th&gt;51&lt;/th&gt; &#xA;   &lt;th&gt;52&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;T/A&lt;/td&gt; &#xA;   &lt;td&gt;3/18&lt;/td&gt; &#xA;   &lt;td&gt;5/24&lt;/td&gt; &#xA;   &lt;td&gt;4/21&lt;/td&gt; &#xA;   &lt;td&gt;7/19&lt;/td&gt; &#xA;   &lt;td&gt;5/19&lt;/td&gt; &#xA;   &lt;td&gt;2/23&lt;/td&gt; &#xA;   &lt;td&gt;4/19&lt;/td&gt; &#xA;   &lt;td&gt;6/20&lt;/td&gt; &#xA;   &lt;td&gt;10/49&lt;/td&gt; &#xA;   &lt;td&gt;4/23&lt;/td&gt; &#xA;   &lt;td&gt;4/19&lt;/td&gt; &#xA;   &lt;td&gt;4/22&lt;/td&gt; &#xA;   &lt;td&gt;1/19&lt;/td&gt; &#xA;   &lt;td&gt;3/19&lt;/td&gt; &#xA;   &lt;td&gt;4/22&lt;/td&gt; &#xA;   &lt;td&gt;7/37&lt;/td&gt; &#xA;   &lt;td&gt;11/47&lt;/td&gt; &#xA;   &lt;td&gt;5/23&lt;/td&gt; &#xA;   &lt;td&gt;10/37&lt;/td&gt; &#xA;   &lt;td&gt;9/49&lt;/td&gt; &#xA;   &lt;td&gt;7/22&lt;/td&gt; &#xA;   &lt;td&gt;4/20&lt;/td&gt; &#xA;   &lt;td&gt;3/24&lt;/td&gt; &#xA;   &lt;td&gt;6/23&lt;/td&gt; &#xA;   &lt;td&gt;5/19&lt;/td&gt; &#xA;   &lt;td&gt;5/19&lt;/td&gt; &#xA;   &lt;td&gt;4/18&lt;/td&gt; &#xA;   &lt;td&gt;8/33&lt;/td&gt; &#xA;   &lt;td&gt;8/24&lt;/td&gt; &#xA;   &lt;td&gt;5/19&lt;/td&gt; &#xA;   &lt;td&gt;17/55&lt;/td&gt; &#xA;   &lt;td&gt;10/29&lt;/td&gt; &#xA;   &lt;td&gt;7/31&lt;/td&gt; &#xA;   &lt;td&gt;6/21&lt;/td&gt; &#xA;   &lt;td&gt;11/46&lt;/td&gt; &#xA;   &lt;td&gt;5/19&lt;/td&gt; &#xA;   &lt;td&gt;3/19&lt;/td&gt; &#xA;   &lt;td&gt;4/19&lt;/td&gt; &#xA;   &lt;td&gt;13/49&lt;/td&gt; &#xA;   &lt;td&gt;3/24&lt;/td&gt; &#xA;   &lt;td&gt;5/19&lt;/td&gt; &#xA;   &lt;td&gt;4/19&lt;/td&gt; &#xA;   &lt;td&gt;6/21&lt;/td&gt; &#xA;   &lt;td&gt;6/22&lt;/td&gt; &#xA;   &lt;td&gt;2/19&lt;/td&gt; &#xA;   &lt;td&gt;2/19&lt;/td&gt; &#xA;   &lt;td&gt;14/33&lt;/td&gt; &#xA;   &lt;td&gt;12/44&lt;/td&gt; &#xA;   &lt;td&gt;6/16&lt;/td&gt; &#xA;   &lt;td&gt;7/29&lt;/td&gt; &#xA;   &lt;td&gt;9/31&lt;/td&gt; &#xA;   &lt;td&gt;1/12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Accuracy&lt;/td&gt; &#xA;   &lt;td&gt;16.67%&lt;/td&gt; &#xA;   &lt;td&gt;20.83%&lt;/td&gt; &#xA;   &lt;td&gt;19.05%&lt;/td&gt; &#xA;   &lt;td&gt;36.84%&lt;/td&gt; &#xA;   &lt;td&gt;26.32%&lt;/td&gt; &#xA;   &lt;td&gt;8.70%&lt;/td&gt; &#xA;   &lt;td&gt;21.05%&lt;/td&gt; &#xA;   &lt;td&gt;30.00%&lt;/td&gt; &#xA;   &lt;td&gt;20.41%&lt;/td&gt; &#xA;   &lt;td&gt;17.39%&lt;/td&gt; &#xA;   &lt;td&gt;21.05%&lt;/td&gt; &#xA;   &lt;td&gt;18.18%&lt;/td&gt; &#xA;   &lt;td&gt;5.26%&lt;/td&gt; &#xA;   &lt;td&gt;15.79%&lt;/td&gt; &#xA;   &lt;td&gt;18.18%&lt;/td&gt; &#xA;   &lt;td&gt;18.92%&lt;/td&gt; &#xA;   &lt;td&gt;23.40%&lt;/td&gt; &#xA;   &lt;td&gt;21.74%&lt;/td&gt; &#xA;   &lt;td&gt;27.03%&lt;/td&gt; &#xA;   &lt;td&gt;18.37%&lt;/td&gt; &#xA;   &lt;td&gt;31.82%&lt;/td&gt; &#xA;   &lt;td&gt;20.00%&lt;/td&gt; &#xA;   &lt;td&gt;12.50%&lt;/td&gt; &#xA;   &lt;td&gt;26.09%&lt;/td&gt; &#xA;   &lt;td&gt;26.32%&lt;/td&gt; &#xA;   &lt;td&gt;26.32%&lt;/td&gt; &#xA;   &lt;td&gt;22.22%&lt;/td&gt; &#xA;   &lt;td&gt;24.24%&lt;/td&gt; &#xA;   &lt;td&gt;33.33%&lt;/td&gt; &#xA;   &lt;td&gt;26.32%&lt;/td&gt; &#xA;   &lt;td&gt;30.91%&lt;/td&gt; &#xA;   &lt;td&gt;34.48%&lt;/td&gt; &#xA;   &lt;td&gt;22.58%&lt;/td&gt; &#xA;   &lt;td&gt;28.57%&lt;/td&gt; &#xA;   &lt;td&gt;23.91%&lt;/td&gt; &#xA;   &lt;td&gt;26.32%&lt;/td&gt; &#xA;   &lt;td&gt;15.79%&lt;/td&gt; &#xA;   &lt;td&gt;21.05%&lt;/td&gt; &#xA;   &lt;td&gt;26.53%&lt;/td&gt; &#xA;   &lt;td&gt;12.50%&lt;/td&gt; &#xA;   &lt;td&gt;26.32%&lt;/td&gt; &#xA;   &lt;td&gt;21.05%&lt;/td&gt; &#xA;   &lt;td&gt;28.57%&lt;/td&gt; &#xA;   &lt;td&gt;27.27%&lt;/td&gt; &#xA;   &lt;td&gt;10.53%&lt;/td&gt; &#xA;   &lt;td&gt;10.53%&lt;/td&gt; &#xA;   &lt;td&gt;42.42%&lt;/td&gt; &#xA;   &lt;td&gt;27.27%&lt;/td&gt; &#xA;   &lt;td&gt;37.50%&lt;/td&gt; &#xA;   &lt;td&gt;24.14%&lt;/td&gt; &#xA;   &lt;td&gt;29.03%&lt;/td&gt; &#xA;   &lt;td&gt;8.33%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;总题数: 1346  &#xA;总正确数: 316  &#xA;总正确率: 23.48%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;结果汇总：&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;category&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;correct&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;question_count&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;accuracy&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;minimind-v1-small&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;344&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1346&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25.56%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;minimind-v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;351&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1346&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26.08%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;以下来自GPT-4o对minimind表现的瞎猜：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;### 模型擅长的领域：&#xA;1. 高中的化学：正确率为42.11%，是最高的一个领域。说明模型在这方面的知识可能较为扎实。&#xA;2. 离散数学：正确率为37.50%，属于数学相关领域，表现较好。&#xA;3. 教育科学：正确率为37.93%，说明模型在教育相关问题上的表现也不错。&#xA;4. 基础医学：正确率为36.84%，在医学基础知识方面表现也比较好。&#xA;5. 操作系统：正确率为36.84%，说明模型在计算机操作系统方面的表现较为可靠。&#xA;&#xA;### 模型不擅长的领域：&#xA;1. 法律相关：如法律专业（8.70%）和税务会计（20.41%），表现相对较差。&#xA;2. 中学和大学的物理：如中学物理（26.32%）和大学物理（21.05%），模型在物理相关的领域表现不佳。&#xA;3. 高中的政治、地理：如高中政治（15.79%）和高中地理（21.05%），模型在这些领域的正确率较低。&#xA;4. 计算机网络与体系结构：如计算机网络（21.05%）和计算机体系结构（9.52%），在这些计算机专业课程上的表现也不够好。&#xA;5. 环境影响评估工程师：正确率仅为12.90%，在环境科学领域的表现也不理想。&#xA;&#xA;### 总结：&#xA;- 擅长领域：化学、数学（特别是离散数学）、教育科学、基础医学、计算机操作系统。&#xA;- 不擅长领域：法律、物理、政治、地理、计算机网络与体系结构、环境科学。&#xA;&#xA;这表明模型在涉及逻辑推理、基础科学和一些工程技术领域的问题上表现较好，但在人文社科、环境科学以及某些特定专业领域（如法律和税务）上表现较弱。如果要提高模型的性能，可能需要加强它在人文社科、物理、法律、以及环境科学等方面的训练。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;📌 Others&lt;/h1&gt; &#xA;&lt;h3&gt;推理与导出&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/export_model.py&#34;&gt;./export_model.py&lt;/a&gt;可以导出模型到transformers格式，推送到huggingface&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;MiniMind的huggingface集合地址： &lt;a href=&#34;https://huggingface.co/collections/jingyaogong/minimind-66caf8d999f5c7fa64f399e5&#34;&gt;MiniMind&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;API推理&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/my_openai_api.py&#34;&gt;my_openai_api.py&lt;/a&gt;完成了openai_api的聊天接口，方便将自己的模型接入第三方UI 例如fastgpt、OpenWebUI等&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;从&lt;a href=&#34;https://huggingface.co/collections/jingyaogong/minimind-66caf8d999f5c7fa64f399e5&#34;&gt;Huggingface&lt;/a&gt;下载模型权重文件&lt;/p&gt; &lt;pre&gt;&lt;code&gt;minimind (root dir)&#xA;├─minimind&#xA;|  ├── config.json&#xA;|  ├── generation_config.json&#xA;|  ├── LMConfig.py&#xA;|  ├── model.py&#xA;|  ├── pytorch_model.bin&#xA;|  ├── special_tokens_map.json&#xA;|  ├── tokenizer_config.json&#xA;|  ├── tokenizer.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;启动聊天服务端&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python my_openai_api.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;测试服务接口&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python chat_openai_api.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;API接口示例，兼容openai api格式&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl http://ip:port/v1/chat/completions \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{ &#xA;    &#34;model&#34;: &#34;model-identifier&#34;,&#xA;    &#34;messages&#34;: [ &#xA;      { &#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;世界上最高的山是什么？&#34; }&#xA;    ], &#xA;    &#34;temperature&#34;: 0.7, &#xA;    &#34;max_tokens&#34;: -1,&#xA;    &#34;stream&#34;: true&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/logger.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;在fastgpt中接入使用minimind api&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/images/fastgpt.png&#34; alt=&#34;images&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📌 Acknowledge&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] 如果您觉得 &lt;code&gt;MiniMind&lt;/code&gt;对您有所帮助，可以在 GitHub 上加一个⭐&lt;br&gt; 篇幅不短水平有限难免纰漏，欢迎在Issues交流指正或提交PR改进项目&lt;br&gt; 您的支持就是持续改进项目的动力&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] 众人拾柴火焰高 如果您已经尝试训练了新的MiniMind型号，欢迎在Discussions或Issues中分享您的模型权重&lt;br&gt; 可以是在特定下游任务或垂直领域（例如情感识别、医疗、心理、金融、法律问答等）的MiniMind新模型版本&lt;br&gt; 也可以是拓展训练后（例如探索更长文本序列、更大体积（0.1B+）或更大的数据集）的MiniMind新模型版本&lt;br&gt; 任何分享都视作独一无二的，所有尝试都具有价值，并受到鼓励&lt;br&gt; 这些贡献都会被及时发现并整理在鸣谢列表中，再次感谢所有支持！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🤝&lt;a href=&#34;https://github.com/jingyaogong/minimind/graphs/contributors&#34;&gt;贡献者&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;!--&#xA;&lt;a href=&#34;https://github.com/jingyaogong/minimind/graphs/contributors&#34;&gt;&#xA;  &lt;img src=&#34;https://contrib.rocks/image?repo=jingyaogong/minimind&amp;v3&#34; /&gt;&#xA;&lt;/a&gt;&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jingyaogong&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/62287848&#34; width=&#34;70px&#34; height=&#34;70px&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/MuWinds&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/93832089&#34; width=&#34;70px&#34; height=&#34;70px&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/chuanzhubin&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2813798&#34; width=&#34;70px&#34; height=&#34;70px&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/iomgaa-ycz&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/124225682&#34; width=&#34;70px&#34; height=&#34;70px&#34;&gt;&lt;/a&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;😊鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ipfgao&#34;&gt;&lt;b&gt;@ipfgao&lt;/b&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/jingyaogong/minimind/issues/26&#34;&gt;🔗训练步骤记录&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chuanzhubin&#34;&gt;&lt;b&gt;@chuanzhubin&lt;/b&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/jingyaogong/minimind/pull/34&#34;&gt;🔗代码逐行注释&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WangRongsheng&#34;&gt;&lt;b&gt;@WangRongsheng&lt;/b&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/jingyaogong/minimind/issues/39&#34;&gt;🔗大型数据集预处理&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pengqianhan&#34;&gt;&lt;b&gt;@pengqianhan&lt;/b&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/jingyaogong/minimind/issues/73&#34;&gt;🔗一个简明教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/RyanSunn&#34;&gt;&lt;b&gt;@RyanSunn&lt;/b&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/jingyaogong/minimind/issues/75&#34;&gt;🔗推理过程学习记录&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;参考链接 &amp;amp; 感谢以下优秀的论文或项目&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;排名不分任何先后顺序&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/meta-llama/llama3&#34;&gt;https://github.com/meta-llama/llama3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/karpathy/llama2.c&#34;&gt;https://github.com/karpathy/llama2.c&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/DLLXW/baby-llama2-chinese&#34;&gt;https://github.com/DLLXW/baby-llama2-chinese&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2405.04434&#34;&gt;(DeepSeek-V2)https://arxiv.org/abs/2405.04434&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/charent/ChatLM-mini-Chinese&#34;&gt;https://github.com/charent/ChatLM-mini-Chinese&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/wdndev/tiny-llm-zh&#34;&gt;https://github.com/wdndev/tiny-llm-zh&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2401.04088&#34;&gt;(Mistral-MoE)https://arxiv.org/pdf/2401.04088&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Tongjilibo/build_MiniLLM_from_scratch&#34;&gt;https://github.com/Tongjilibo/build_MiniLLM_from_scratch&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/jzhang38/TinyLlama&#34;&gt;https://github.com/jzhang38/TinyLlama&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/AI-Study-Han/Zero-Chatgpt&#34;&gt;https://github.com/AI-Study-Han/Zero-Chatgpt&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/xusenlinzy/api-for-open-llm&#34;&gt;https://github.com/xusenlinzy/api-for-open-llm&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/HqWu-HITCS/Awesome-Chinese-LLM&#34;&gt;https://github.com/HqWu-HITCS/Awesome-Chinese-LLM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🫶支持者&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/jingyaogong/minimind/stargazers&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://reporoster.com/stars/dark/jingyaogong/minimind&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://reporoster.com/stars/jingyaogong/minimind&#34;&gt; &#xA;  &lt;img alt=&#34;github contribution grid snake animation&#34; src=&#34;https://reporoster.com/stars/jingyaogong/minimind&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/jingyaogong/minimind/network/members&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://reporoster.com/forks/dark/jingyaogong/minimind&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://reporoster.com/forks/jingyaogong/minimind&#34;&gt; &#xA;  &lt;img alt=&#34;github contribution grid snake animation&#34; src=&#34;https://reporoster.com/forks/jingyaogong/minimind&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=jingyaogong/minimind&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=jingyaogong/minimind&amp;amp;type=Date&#34;&gt; &#xA; &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=jingyaogong/minimind&amp;amp;type=Date&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind/master/LICENSE&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bottlesdevs/Bottles</title>
    <updated>2025-12-30T01:34:58Z</updated>
    <id>tag:github.com,2025-12-30:/bottlesdevs/Bottles</id>
    <link href="https://github.com/bottlesdevs/Bottles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run Windows software and games on Linux&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/bottlesdevs/Bottles/main/data/icons/hicolor/scalable/apps/com.usebottles.bottles.svg?sanitize=true&#34; width=&#34;64&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;Bottles&lt;/h1&gt; &#xA; &lt;p align=&#34;center&#34;&gt;Run Windows Software on Linux&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://flathub.org/apps/com.usebottles.bottles&#34;&gt; &lt;img alt=&#34;Flathub&#34; src=&#34;https://img.shields.io/flathub/downloads/com.usebottles.bottles&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://hosted.weblate.org/engage/bottles&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widgets/bottles/-/bottles/svg-badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.codefactor.io/repository/github/bottlesdevs/bottles/overview/main&#34;&gt; &lt;img src=&#34;https://www.codefactor.io/repository/github/bottlesdevs/bottles/badge/main&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/bottlesdevs/Bottles/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-GPL--3.0-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://stopthemingmy.app&#34; title=&#34;Please do not theme this app&#34;&gt; &lt;img src=&#34;https://stopthemingmy.app/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.usebottles.com&#34;&gt;Documentation&lt;/a&gt; · &lt;a href=&#34;https://forum.usebottles.com&#34;&gt;Forums&lt;/a&gt; · &lt;a href=&#34;https://discord.gg/wF4JAdYrTR&#34;&gt;Discord&lt;/a&gt; · &lt;a href=&#34;https://usebottles.com/funding&#34;&gt;Funding&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bottlesdevs/Bottles/main/docs/screenshot-dark.png#gh-dark-mode-only&#34; alt=&#34;Bottles Dark&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bottlesdevs/Bottles/main/docs/screenshot-light.png#gh-light-mode-only&#34; alt=&#34;Bottles Light&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://flathub.org/apps/com.usebottles.bottles&#34;&gt;&lt;img width=&#34;240&#34; alt=&#34;Download on Flathub&#34; src=&#34;https://flathub.org/assets/badges/flathub-badge-en.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/bottlesdevs/Bottles/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;⚠️ Be sure to backup all your data before testing experimental builds of Bottles!&lt;/p&gt; &#xA;&lt;p&gt;There are two methods to build Bottles. The first and longer method is using &lt;code&gt;org.flatpak.Builder&lt;/code&gt;, and the second but shorter method is building directly.&lt;/p&gt; &#xA;&lt;h3&gt;org.flatpak.Builder&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/flathub/org.flatpak.Builder&#34;&gt;&lt;code&gt;org.flatpak.Builder&lt;/code&gt;&lt;/a&gt; from Flathub&lt;/li&gt; &#xA; &lt;li&gt;Clone &lt;code&gt;https://github.com/bottlesdevs/Bottles.git&lt;/code&gt; (or your fork)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flatpak run org.flatpak.Builder --install --install-deps-from=flathub --default-branch=master --force-clean build-dir build-aux/com.usebottles.bottles.Devel.json&lt;/code&gt; in the terminal from the root of the repository (use &lt;code&gt;--user&lt;/code&gt; if necessary)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flatpak run com.usebottles.bottles.Devel&lt;/code&gt; to launch it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Meson&lt;/h3&gt; &#xA;&lt;p&gt;Since Bottles is primarily and officially distributed as a Flatpak, we only provide instructions to directly build it inside a Flatpak environment:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and install the latest build of Bottles: &lt;a href=&#34;https://nightly.link/bottlesdevs/Bottles/workflows/build_flatpak/main/bottles-x86_64.zip&#34;&gt;bottles-x86_64.zip&lt;/a&gt;. Unzip it, and run &lt;code&gt;flatpak install bottles.flatpak&lt;/code&gt; (use &lt;code&gt;--user&lt;/code&gt; if necessary)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;flatpak run -d --filesystem=$PWD --command=bash com.usebottles.bottles.Devel&lt;/code&gt; from the root of the repository, followed by &lt;code&gt;./build-aux/install.sh&lt;/code&gt;. This will build Bottles and install it under the &lt;code&gt;build/&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./build/bin/bottles&lt;/code&gt; to launch Bottles&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Due to GNOME Builder limitations, Builder cannot build Bottles for the time being; see &lt;a href=&#34;https://gitlab.gnome.org/GNOME/gnome-builder/-/issues/2061&#34;&gt;GNOME/gnome-builder#2061&lt;/a&gt; for more context. This is the best workaround we can provide.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://wiki.gnome.org/Foundation/CodeOfConduct&#34;&gt;GNOME Code of Conduct&lt;/a&gt;. You are expected to follow it in all Bottles spaces, such as this repository, the project&#39;s social media, messenger chats and forums. Bigotry and harassment will not be tolerated.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=bottles&#34;&gt;&lt;img height=&#34;55&#34; src=&#34;https://unifiedban.solutions/static/images/jetbrains-logos/jetbrains.png&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.gitbook.com/?ref=bottles&#34;&gt;&lt;img height=&#34;55&#34; src=&#34;https://www.gitbook.com/cdn-cgi/image/height=55,fit=contain,dpr=1,format=auto/https%3A%2F%2F2775338190-files.gitbook.io%2F~%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FNkEGS7hzeqa35sMXQZ4X%252Flogo%252FTO5E3RjWKeaJmYYWMGWV%252Fspaces_gitbook_avatar-rectangle.png%3Falt%3Dmedia%26token%3Da34e957e-f044-4bee-abee-23946d2e9cfb&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.linode.com/?from=bottles&#34;&gt;&lt;img height=&#34;48&#34; src=&#34;https://usebottles.com/uploads/linode-brand.png&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://appwrite.io?from=bottles&#34;&gt;&lt;img height=&#34;48&#34; src=&#34;https://usebottles.com/uploads/built-with-appwrite.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hyperbit.it?from=bottles&#34;&gt;&lt;img height=&#34;48&#34; src=&#34;https://hyperbit.it-mil-1.linodeobjects.com/assets/full_dark_logo/HyperBit_Dark_Extended_Logo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pgadmin-org/pgadmin4</title>
    <updated>2025-12-30T01:34:58Z</updated>
    <id>tag:github.com,2025-12-30:/pgadmin-org/pgadmin4</id>
    <link href="https://github.com/pgadmin-org/pgadmin4" rel="alternate"></link>
    <summary type="html">&lt;p&gt;pgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgAdmin 4&lt;/h1&gt; &#xA;&lt;p&gt;pgAdmin 4 is a rewrite of the popular pgAdmin3 management tool for the PostgreSQL (&lt;a href=&#34;http://www.postgresql.org&#34;&gt;http://www.postgresql.org&lt;/a&gt;) database.&lt;/p&gt; &#xA;&lt;p&gt;In the following documentation and examples, &lt;em&gt;$PGADMIN4_SRC/&lt;/em&gt; is used to denote the top-level directory of a copy of the pgAdmin source tree, either from a tarball or a git checkout.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;pgAdmin 4 is written as a web application with Python(Flask) on the server side and ReactJS, HTML5 with CSS for the client side processing and UI.&lt;/p&gt; &#xA;&lt;p&gt;Although developed using web technologies, pgAdmin 4 can be deployed either on a web server using a browser, or standalone on a workstation. The runtime/ subdirectory contains an Electron based runtime application intended to allow this, which will execute the Python server and display the UI.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Runtime&lt;/h2&gt; &#xA;&lt;p&gt;To build the runtime, the following packages must be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NodeJS 16+&lt;/li&gt; &#xA; &lt;li&gt;Yarn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change into the runtime directory, and run &lt;em&gt;yarn install&lt;/em&gt;. This will install the dependencies required.&lt;/p&gt; &#xA;&lt;p&gt;In order to use the runtime in a development environment, you&#39;ll need to copy &lt;em&gt;dev_config.json.in&lt;/em&gt; file to &lt;em&gt;dev_config.json&lt;/em&gt;, and edit the paths to the Python executable and &lt;em&gt;pgAdmin.py&lt;/em&gt; file, otherwise the runtime will use the default paths it would expect to find in the standard package for your platform.&lt;/p&gt; &#xA;&lt;p&gt;You can then execute the runtime by running something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuring the Python Environment&lt;/h1&gt; &#xA;&lt;p&gt;In order to run the Python code, a suitable runtime environment is required. Python version 3.7 and later are currently supported. It is recommended that a Python Virtual Environment is setup for this purpose, rather than using the system Python environment. On Linux and Mac systems, the process is fairly simple - adapt as required for your distribution:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a virtual environment in an appropriate directory. The last argument is the name of the environment; that can be changed as desired:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python3 -m venv venv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now activate the virtual environment:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ source venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Some of the components used by pgAdmin require a very recent version of &lt;em&gt;pip&lt;/em&gt;, so update that to the latest:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install --upgrade pip&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure that a PostgreSQL installation&#39;s bin/ directory is in the path (so pg_config can be found for building psycopg3), and install the required packages:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ PATH=$PATH:/usr/local/pgsql/bin pip install -r $PGADMIN4_SRC/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are planning to run the regression tests, you also need to install additional requirements from web/regression/requirements.txt:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ pip install -r $PGADMIN4_SRC/web/regression/requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a local configuration file for pgAdmin. Edit $PGADMIN4_SRC/web/config_local.py and add any desired configuration options (use the config.py file as a reference - any settings duplicated in config_local.py will override those in config.py). A typical development configuration may look like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from config import *&#xA;&#xA;# Debug mode&#xA;DEBUG = True&#xA;&#xA;# App mode&#xA;SERVER_MODE = True&#xA;&#xA;# Enable the test module&#xA;MODULE_BLACKLIST.remove(&#39;test&#39;)&#xA;&#xA;# Log&#xA;CONSOLE_LOG_LEVEL = DEBUG&#xA;FILE_LOG_LEVEL = DEBUG&#xA;&#xA;DEFAULT_SERVER = &#39;127.0.0.1&#39;&#xA;&#xA;UPGRADE_CHECK_ENABLED = True&#xA;&#xA;# Use a different config DB for each server mode.&#xA;if SERVER_MODE == False:&#xA;    SQLITE_PATH = os.path.join(&#xA;        DATA_DIR,&#xA;        &#39;pgadmin4-desktop.db&#39;&#xA;    )&#xA;else:&#xA;    SQLITE_PATH = os.path.join(&#xA;        DATA_DIR,&#xA;        &#39;pgadmin4-server.db&#39;&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This configuration allows easy switching between server and desktop modes for testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The initial setup of the configuration database is interactive in server mode, and non-interactive in desktop mode. You can run it either by running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ python3 $PGADMIN4_SRC/web/setup.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or by starting pgAdmin 4:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ python3 $PGADMIN4_SRC/web/pgAdmin4.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whilst it is possible to automatically run setup in desktop mode by running the runtime, that will not work in server mode as the runtime doesn&#39;t allow command line interaction with the setup program.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;At this point you will be able to run pgAdmin 4 from the command line in either server or desktop mode, and access it from a web browser using the URL shown in the terminal once pgAdmin has started up.&lt;/p&gt; &#xA;&lt;p&gt;Setup of an environment on Windows is somewhat more complicated unfortunately, please see &lt;em&gt;pkg/win32/README.txt&lt;/em&gt; for complete details.&lt;/p&gt; &#xA;&lt;h1&gt;Building the Web Assets&lt;/h1&gt; &#xA;&lt;p&gt;pgAdmin is dependent on a number of third party Javascript libraries. These, along with it&#39;s own Javascript code, SCSS/CSS code and images must be compiled into a &#34;bundle&#34; which is transferred to the browser for execution and rendering. This is far more efficient than simply requesting each asset as it&#39;s needed by the client.&lt;/p&gt; &#xA;&lt;p&gt;To create the bundle, you will need the &#39;yarn&#39; package management tool to be installed. Then, you can run the following commands on a *nix system to download the required packages and build the bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ cd $PGADMIN4_SRC&#xA;(venv) $ make install-node&#xA;(venv) $ make bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows systems (where &#34;make&#34; is not available), the following commands can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;C:\&amp;gt; cd $PGADMIN4_SRC\web&#xA;C:\$PGADMIN4_SRC\web&amp;gt; yarn install&#xA;C:\$PGADMIN4_SRC\web&amp;gt; yarn run bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Creating pgAdmin themes&lt;/h1&gt; &#xA;&lt;p&gt;To create a pgAdmin theme, you need to create a directory under &lt;em&gt;web/pgadmin/static/scss/resources&lt;/em&gt;. Copy the sample file &lt;em&gt;_theme.variables.scss.sample&lt;/em&gt; to the new directory and rename it to &lt;em&gt;_theme.variables.scss&lt;/em&gt;. Change the desired hexadecimal values of the colors and bundle pgAdmin. You can also add a preview image in the theme directory with the name as &lt;em&gt;&amp;lt;dir name&amp;gt;_preview.png&lt;/em&gt;. It is recommended that the preview image should not be larger in size as it may take time to load on slow networks. Run the &lt;em&gt;yarn run bundle&lt;/em&gt; and you&#39;re good to go. No other changes are required, pgAdmin bundle will read the directory and create other required entries to make them available in preferences.&lt;/p&gt; &#xA;&lt;p&gt;The name of the theme is derived from the directory name. Underscores (_) and hyphens (-) will be replaced with spaces and the result will be camel cased.&lt;/p&gt; &#xA;&lt;h1&gt;Building the documentation&lt;/h1&gt; &#xA;&lt;p&gt;In order to build the docs, an additional Python package is required in the virtual environment. This can be installed with the pip package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ source venv/bin/activate&#xA;(venv) $ pip install Sphinx&#xA;(venv) $ pip install sphinxcontrib-youtube&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docs can then be built using the Makefile in &lt;em&gt;$PGADMIN4_SRC&lt;/em&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ make docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output can be found in &lt;em&gt;$PGADMIN4_SRC/docs/en_US/_build/html/index.html&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Building packages&lt;/h1&gt; &#xA;&lt;p&gt;Most packages can be built using the Makefile in $PGADMIN4_SRC, provided all the setup and configuration above has been completed.&lt;/p&gt; &#xA;&lt;p&gt;To build a source tarball:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ make src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build a PIP Wheel, activate either a Python 3 virtual environment, configured with all the required packages, and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ make pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the macOS AppBundle, please see &lt;em&gt;pkg/mac/README&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build the Windows installer, please see &lt;em&gt;pkg/win32/README.txt&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Create Database Migrations&lt;/h1&gt; &#xA;&lt;p&gt;In order to make changes to the SQLite DB, navigate to the &#39;web&#39; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ cd $PGADMIN4_SRC/web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a migration file with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(venv) $ FLASK_APP=pgAdmin4.py flask db revision&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a file in: $PGADMIN4_SRC/web/migrations/versions/ . Add any changes to the &#39;upgrade&#39; function. Increment the SCHEMA_VERSION in $PGADMIN4_SRC/web/pgadmin/model/&lt;strong&gt;init&lt;/strong&gt;.py file.&lt;/p&gt; &#xA;&lt;p&gt;There is no need to increment the SETTINGS_SCHEMA_VERSION.&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.pgadmin.org/support/&#34;&gt;https://www.pgadmin.org/support/&lt;/a&gt; for support options.&lt;/p&gt; &#xA;&lt;h1&gt;Security Issues&lt;/h1&gt; &#xA;&lt;p&gt;If you would like to report a security issue with pgAdmin, please email &lt;strong&gt;security (at) pgadmin (dot) org&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this address should only be used for reporting security issues that you believe you&#39;ve found in the design or code of pgAdmin, pgAgent, and the pgAdmin website. It should not be used to ask security questions.&lt;/p&gt; &#xA;&lt;h1&gt;Project info&lt;/h1&gt; &#xA;&lt;p&gt;A GitHub project for pgAdmin 4 can be found at the address below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pgadmin-org/pgadmin4&#34;&gt;https://github.com/pgadmin-org/pgadmin4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please submit any changes as Pull Requests against the &lt;em&gt;master&lt;/em&gt; branch of the &lt;em&gt;pgadmin-org/pgadmin4&lt;/em&gt; repository.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to discuss pgAdmin 4, or contribute to the project, please use the pgAdmin Hackers mailing list:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:pgadmin-hackers@postgresql.org&#34;&gt;pgadmin-hackers@postgresql.org&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>