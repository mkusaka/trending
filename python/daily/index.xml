<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-17T01:45:14Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jakeyk11/football-data-analytics</title>
    <updated>2023-01-17T01:45:14Z</updated>
    <id>tag:github.com,2023-01-17:/jakeyk11/football-data-analytics</id>
    <link href="https://github.com/jakeyk11/football-data-analytics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collection of tools and scripts for analysis and visualisation of football data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Football Data Analytics&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a collection of tools, projects and resources that enable effective analysis and visualisation of football data.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#introduction&#34;&gt; ➤ Introduction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#folder-structure&#34;&gt; ➤ Folder Structure&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#workflow&#34;&gt; ➤ Workflow&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#projects&#34;&gt; ➤ Projects&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#01---world-cup-2018-box-to-box-midfielder-analysis&#34;&gt;01 - World Cup 2018 Box to Box Midfielder Analysis&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#02---transfermarkt-web-scrape-and-analyse&#34;&gt;02 - Transfermarkt Web-Scrape and Analyse&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#03---expected-goals-modelling&#34;&gt;03 - Expected Goals Modelling&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#04---automated-match-reporting&#34;&gt;04 - Automated Match Reporting&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#05---automated-competition-reporting&#34;&gt;05 - Automated Competition Reporting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a collection of tools, projects and resources that aim to support the generation of meaningful insight from football data. Python is used for extraction, processing, analysis and visualisation of event data, aggregated team data, market value data and more. The repository is broken down into mutliple projects and sub-projects, each of which aims to either perform a specific analysis, generate some specific insight, or introduce some level of automation to football data analytics. Using the contents of this repository, a number of novel &amp;amp; informative visuals and text threads have been created and shared with the football data analytics community via Twitter &lt;a href=&#34;https://twitter.com/_JKDS_&#34;&gt;(@&lt;em&gt;JKDS&lt;/em&gt;)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To support others who are wishing to develop their data analytics skills within the context of football data, I have produced a Getting Started Guide&lt;/p&gt; &#xA;&lt;h2&gt;Folder Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;football-data-analytics&#xA;│&#xA;├── analysis_tools&#xA;│   ├── __init__.py&#xA;│   ├── get_football_data.py [not included in git repo]&#xA;│   ├── logos_and_badges.py&#xA;│   ├── pitch_zones.py&#xA;│   ├── statsbomb_custom_events.py&#xA;│   ├── statsbomb_data_engineering.py&#xA;│   ├── whoscored_custom_events.py&#xA;│   ├── whoscored_data_engineering.py&#xA;│   ├── wyscout_data_engineering.py   &#xA;│ &#xA;├── data_directory&#xA;│   ├── misc_data&#xA;│   │   ├── images&#xA;│   │   │   ├── ___.png&#xA;│   │   ├── log_regression_xg_data.pbz2&#xA;│   │   ├── neural_net_xg_data.pbz2&#xA;│   │   ├── worldcup_2010_to_2018_distcovered.xlsx&#xA;│   ├── statsbomb_data [not included in git repo]&#xA;│   ├── transfermarkt_data&#xA;│   ├── whoscored_data [not included in git repo]&#xA;│   ├── wyscout_data&#xA;│&#xA;├── projects&#xA;│   ├── 00_misc_work&#xA;│   │   ├── saudi_arabia_argentina_world_cup_def_actions.py &#xA;│   ├── 01_worldcup_b2b_midfielders&#xA;│   │   ├── import_data_statsbomb.py&#xA;│   │   ├── worldcup_b2b_mids.py&#xA;│   ├── 02_transfermarkt_scrape_and_analyse&#xA;│   │   ├── championship_forward_value_analysis.py&#xA;│   │   ├── premierleague_forward_value_analysis.py&#xA;│   │   ├── scrape_data_transfermarkt.py&#xA;│   ├── 03_xg_model&#xA;│   │   ├── shot_xg_plot.py&#xA;│   │   ├── xg_log_regression_model.py&#xA;│   │   ├── xg_neural_network.py  &#xA;│   ├── 04_match_reports&#xA;│   │   ├── import_data_whoscored.py&#xA;│   │   ├── pass_report_ws.py&#xA;│   │   ├── shot_report_understat.py     &#xA;│   ├── 05_competition_reports&#xA;│   │   ├── player_defensive_contribution.py&#xA;│   │   ├── player_effective_carriers.py&#xA;│   │   ├── player_effective_passers.py&#xA;│   │   ├── player_high_defensive_actions.py    &#xA;│   │   ├── player_penalty_takers.py&#xA;│   │   ├── player_threat_creators.py&#xA;│   │   ├── team_ball_winning.py&#xA;│   │   ├── team_fullback_combinations.py&#xA;│   │   ├── team_threat_creation.py&#xA;│   ├── 06_player_reports&#xA;│   │   ├── ws_full_back_report.py&#xA;│ &#xA;├── .gitignore &#xA;│     &#xA;├── LICENSE &#xA;│ &#xA;├── README.md &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;p&gt;As shown in the folder structure above, the repository contains three key folders:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data_directory&lt;/strong&gt;: Storage of raw football data used for projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;analysis_tools&lt;/strong&gt;: Custom python package containing modules that support football data import, processing, manipulation and visualisation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;projects&lt;/strong&gt;: Series of projects that cover various elements of football data analytics. Also contains any template scripts used to import raw data from various football data APIs, websites or data services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In general, each project follows a number of logical steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a folder within the Projects area to store files associated with the project.&lt;/li&gt; &#xA; &lt;li&gt;Use analysis_tools package: get_football_data module [note this module is not available within the git repo] to import raw data from football data API, website or data service: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If imported dataset is large, save to data_directory area in compressed BZ2 format and create a new script for analysis.&lt;/li&gt; &#xA;   &lt;li&gt;If imported dataset is small, data import and analysis can be completed in the same script (without the need to store/save data).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Within the analysis script, import any required modules from the analysis_tools package.&lt;/li&gt; &#xA; &lt;li&gt;Pre-process and format data using data_engineering modules within the analysis_tools package.&lt;/li&gt; &#xA; &lt;li&gt;Synthesise additional information using custom_events and pitch_zones modules within the analysis_tools package.&lt;/li&gt; &#xA; &lt;li&gt;With data formatted appropriately, create visuals and generate insight for end-consumer.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;p&gt;Project table of contents: &lt;br&gt; &amp;nbsp; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#01---world-cup-2018-box-to-box-midfielder-analysis&#34;&gt;01 - World Cup 2018 Box to Box Midfielder Analysis&lt;/a&gt; &lt;br&gt; &amp;nbsp; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#02---transfermarkt-web-scrape-and-analyse&#34;&gt;02 - Transfermarkt Web-Scrape and Analyse&lt;/a&gt; &lt;br&gt; &amp;nbsp; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#03---expected-goals-modelling&#34;&gt;03 - Expected Goals Modelling&lt;/a&gt; &lt;br&gt; &amp;nbsp; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#04---automated-match-reporting&#34;&gt;04 - Automated Match Reporting&lt;/a&gt; &lt;br&gt; &amp;nbsp; &amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/#05---automated-competition-reporting&#34;&gt;05 - Automated Competition Reporting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;01 - World Cup 2018 Box to Box Midfielder Analysis&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;: Use Statsbomb data to define the most effective box to box midfielders at the 2018 World Cup. Throughout the work a number of custom metrics are used to score central midfielders in ball winning, ball retention &amp;amp; creativity, and mobility. A good box to box midfielder is defined as a central midfielder that excels in each of these areas. Of key interest in this work is the use of convex hulls as a proxy for player mobility / distance covered. The work also includes the development of a number of appealing visuals, as shown below.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;29%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/top_12_progressive_passers.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;29%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/top_12_pressers.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;29%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/top_12_action_distribution.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;02 - Transfermarkt Web-Scrape and Analyse&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; Scrape team and player market value information from transfermarkt.co.uk. This work includes the development of a &#34;scouting tool&#34; that highlights players from a given league that have a favourable combination of Age and Goal Contribution per £m market value. The work also explores the use of statistical models to predict market value based on player performance, as well as identifies teams that under and over-performed (league position) based on squad value.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/GB2_player_value_regression.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/GB2_player_scouting.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/GB2_value_league_table.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;03 - Expected Goals Modelling&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; Implementation and testing of basic expected goals probabilistic models. This work includes development and comparison of a logistic regression expected goals model and a neural network expected goals model, each trained off over 40000 shots taken across Europe&#39;s &#39;big five&#39; leagues during the 2017/2018 season. The models are used to calculated expected goals for specific players, clubs and leagues over a specified time period.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;35%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/xg_log_regression_model.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;35%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/xg_neural_network.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-2017-Salah-Shotmap.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-2017-Liverpool-Shotmap.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;25%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/Bundesliga-2017-All-Shotmap.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;/p&gt; &#xA;&lt;h3&gt;04 - Automated Match Reporting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; Development of automated scripts to produce match reports immediately after a match has concluded. This work includes collection and processing of public-domain match event data, and the production of multiple visuals that together constitute informative and appealing match reports. Visuals currently include shot maps, inter-zone passflows, pass plots and offensive action convex hulls.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;35%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-2022-08-06-Tottenham-Southampton.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;35%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-2022-08-07-Manchester%20United-Brighton.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;25%&#34; src=&#34;./data_directory/misc_data/images/EPL-1640700-Manchester United-Liverpool-passhulls.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;29.55%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-1640709-Liverpool-Bournemouth-passreport_Liverpool.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;/p&gt; &#xA;&lt;h3&gt;05 - Automated Competition Reporting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt; Development of automated scripts to produce competition reports and multi-match player evaluations at any point throughout a competition. This work includes collection and processing of public-domain match event data, and the production of multiple visuals that generate novel and meaningful insight at a team and player level. Visuals currently include an assessment of progressive passes, defensive actions and penalty placement.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;32%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-2021-top-defensive-actions-per-100-opposition-passes-in-that-third.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;32%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/europe5-top-pen-takers-2019-2022.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;24%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-2022-defensive-contributions-player-variant.png&#34;&gt; &amp;nbsp; &amp;nbsp; &lt;img width=&#34;24%&#34; src=&#34;https://raw.githubusercontent.com/jakeyk11/football-data-analytics/main/data_directory/misc_data/images/EPL-2022-opposition-half-passers-player-variant.png&#34;&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>howard-hou/BagFormer</title>
    <updated>2023-01-17T01:45:14Z</updated>
    <id>tag:github.com,2023-01-17:/howard-hou/BagFormer</id>
    <link href="https://github.com/howard-hou/BagFormer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PyTorch code for BagFormer: Better Cross-Modal Retrieval via bag-wise interaction&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BagFormer: Better Cross-Modal Retrieval via bag-wise interaction&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/howard-hou/BagFormer/main/BagFormer.png&#34; width=&#34;700&#34;&gt; &#xA;&lt;p&gt;This is the PyTorch code of the &lt;a href=&#34;https://arxiv.org/abs/2212.14322&#34;&gt;BagFormer paper&lt;/a&gt;. The code has been tested on Python 3.8 and PyTorch 1.13. To install the dependencies, please create a virtual environment and run &lt;/p&gt;&#xA;&lt;pre&gt;&lt;/pre&gt;pip install -r requirements.txt&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pre-trained checkpoints:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;num of image-text pairs&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BagFormer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;108M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/file/d/1z4CFDsCza-7FSb60WvXcyepfCaAUuNp3/view?usp=sharing&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Finetuned checkpoints:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Task&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;BagFormer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Image-Text Retrieval (MUGE)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://drive.google.com/file/d/1Fwy67KA0VYyXBvcAut97iH9vxbzfuNLE/view?usp=share_link&#34;&gt;Download&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Image-Text Retrieval:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download MUGE Multimodal Retrieval dataset from the original &lt;a herf=&#34;https://tianchi.aliyun.com/dataset/107332&#34;&gt;website&lt;/a&gt;, and unzip file to data directory, or modify the path in configs/config_muge.yaml.&lt;/li&gt; &#xA; &lt;li&gt;To evaluate the finetuned BagFormer model on MUGE, run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;python3 train_muge.py \&#xA;--checkpoint path-to-finetuned-checkpoint \&#xA;--interaction bagwise \&#xA;--output_dir path-to-output \&#xA;--evaluate&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To finetune the pre-trained checkpoint. Then run:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;python3 train_muge.py \&#xA;--checkpoint path-to-pretrain-checkpoint \&#xA;--interaction bagwise \&#xA;--output_dir path-to-output &lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;To compare bagwise interaction with cls_token or tokenwise interaction, run baseline:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt; # cls_token baseline, which is the BagFormer w/o late interaction model in the paper&#xA;python3 train_muge.py \&#xA;--checkpoint path-to-pretrain-checkpoint \&#xA;--interaction cls_token \&#xA;--output_dir path-to-output&#xA;&#xA;# tokenwise baseline, which is the BagFormer w/o bagging layer model in the paper&#xA;python3 train_muge.py \&#xA;--checkpoint path-to-pretrain-checkpoint \&#xA;--interaction tokenwise \&#xA;--output_dir path-to-output&#xA;&lt;/pre&gt; &#xA;&lt;h3&gt;Calculate bag-wise similarity&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;import torch.nn.functional as F&#xA;from PIL import Image&#xA;from ruamel import yaml&#xA;from transformers import BertTokenizer&#xA;&#xA;from models.loss import tokenwise_similarity_martix&#xA;from models.model_helper import EmbeddingBagHelperAutomaton&#xA;from models.model_retrieval_bagwise import BagFormer&#xA;from MUGE_helper.dataset import get_test_transform&#xA;&#xA;device = &#34;cuda&#34; if torch.cuda.is_available() else &#34;cpu&#34;&#xA;text_encoder = &#34;bert-base-chinese&#34;&#xA;max_seq_len = 25&#xA;config = yaml.load(open(&#34;configs/config_muge.yaml&#34;, &#34;r&#34;), Loader=yaml.Loader)&#xA;test_transform = get_test_transform(config)&#xA;&#xA;tokenizer = BertTokenizer.from_pretrained(text_encoder)&#xA;&#xA;model = BagFormer(&#xA;    config=config, &#xA;    text_encoder=toext_encoder,&#xA;    tokenizer=tokenizer&#xA;    )&#xA;&#xA;checkpoint = torch.load(&#xA;    &#34;path-to-checkpoint&#34;, map_location=&#34;cpu&#34;&#xA;)&#xA;model.load_state_dict(checkpoint[&#34;model&#34;], strict=False)&#xA;model = model.to(device)&#xA;&#xA;embedding_bag_helper = EmbeddingBagHelperAutomaton(&#xA;    tokenizer, config[&#34;entity_dict_path&#34;], masked_token=[&#34;[CLS]&#34;, &#34;[PAD]&#34;]&#xA;)&#xA;&#xA;product_image = test_transform(Image.open(&#34;rumble_roller.jpeg&#34;))&#xA;image = product_image.unsqueeze(0).to(device)&#xA;&#xA;product_title = [&#34;rumble roller&#34;, &#34;nike zoomx vista&#34;]&#xA;text = tokenizer(product_title, padding=&#34;max_length&#34;, max_length=max_seq_len)&#xA;&#xA;embed_bag_offset, attn_mask = embedding_bag_helper.process(text, return_mask=True)&#xA;embed_bag_offset = torch.LongTensor(embed_bag_offset).to(device)&#xA;embed_bag_attn_mask = torch.LongTensor(attn_mask).to(device)&#xA;text = text.convert_to_tensors(&#34;pt&#34;).to(device)&#xA;&#xA;with torch.no_grad():&#xA;    # encode image and text&#xA;    image_features = model.visual_encoder(image)&#xA;    text_features = model.text_encoder(&#xA;        text.input_ids, attention_mask=text.attention_mask, mode=&#34;text&#34;&#xA;    ).last_hidden_state&#xA;    # get text bag feature&#xA;    batch_size, seq_len, text_width = text_features.shape&#xA;    embedding_input = torch.arange(batch_size * seq_len, device=device)&#xA;    embedbag_feats = F.embedding_bag(&#xA;        embedding_input,&#xA;        text_features.view(-1, text_width),&#xA;        embed_bag_offset,&#xA;        mode=&#34;sum&#34;,&#xA;    ).view(batch_size, -1, text_width)&#xA;    embedbag_feats = F.normalize(embedbag_feats, dim=-1)&#xA;    # pad to same length&#xA;    embedbag_seq_len = embedbag_feats.shape[1]&#xA;    embedbag_feats = F.pad(&#xA;        embedbag_feats,&#xA;        pad=(0, 0, 0, max_seq_len - embedbag_seq_len, 0, 0),&#xA;        mode=&#34;constant&#34;,&#xA;        value=0,&#xA;    )&#xA;    # calc bagwise similarity matrix&#xA;    sim_i2t, sim_t2i = tokenwise_similarity_martix(embedbag_feats, image_features)&#xA;&#xA;print(&#34;image feature shape:&#34;, image_features.shape)  &#xA;# prints: torch.Size([1, 257, 768])&#xA;print(&#34;text feature shape:&#34;, embedbag_feats.shape)  &#xA;# prints: torch.Size([2, 25, 768])&#xA;print(&#34;img2text sim:&#34;, sim_i2t)  # prints: [[132.4761, 50.0424]&#xA;print(&#34;text2img sim:&#34;, sim_t2i)  # prints: [[33.4206], [19.6727]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our work useful, please consider citing BagFormer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{hou2022bagformer,&#xA;  title={BagFormer: Better Cross-Modal Retrieval via bag-wise interaction},&#xA;  author={Hou, Haowen and Yan, Xiaopeng and Zhang, Yigeng and Lian, Fengzong and Kang, Zhanhui},&#xA;  journal={arXiv preprint arXiv:2212.14322},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>pynecone-io/pynecone</title>
    <updated>2023-01-17T01:45:14Z</updated>
    <id>tag:github.com,2023-01-17:/pynecone-io/pynecone</id>
    <link href="https://github.com/pynecone-io/pynecone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Web apps in pure Python.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://raw.githubusercontent.com/pynecone-io/pynecone/main/docs/images/logo.svg#gh-light-mode-only&#34; alt=&#34;Pynecone Logo&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://raw.githubusercontent.com/pynecone-io/pynecone/main/docs/images/logo_white.svg#gh-dark-mode-only&#34; alt=&#34;Pynecone Logo&#34;&gt; &lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;Build performant, customizable web apps in pure Python.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/pynecone-io&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/pynecone-io.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/pynecone-io/pynecone/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/pynecone-io.svg?sanitize=true&#34; alt=&#34;versions&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-yellowgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;div align=&#34;left&#34;&gt; &#xA;  &lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;  &lt;p&gt;Pynecone is a full-stack Python framework that makes it easy to build and deploy web apps in minutes. All the information for getting started can be found in this README. However, a more detailed explanation of the following topics can be found on our website:&lt;/p&gt; &#xA;  &lt;div align=&#34;center&#34;&gt; &#xA;   &lt;h3&gt;&lt;a href=&#34;https://pynecone.io/docs/getting-started/introduction&#34;&gt;Docs&lt;/a&gt; | &lt;a href=&#34;https://pynecone.io/docs/library&#34;&gt;Component Library&lt;/a&gt; | &lt;a href=&#34;https://pynecone.io/docs/gallery&#34;&gt;Gallery&lt;/a&gt; | &lt;a href=&#34;https://pynecone.io/docs/hosting/deploy&#34;&gt;Deployment&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div align=&#34;left&#34;&gt; &#xA;    &lt;h2&gt;Installation&lt;/h2&gt; &#xA;    &lt;p&gt;Pynecone requires the following to get started:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Python 3.7+&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js 12.22.0+&lt;/a&gt; (Don&#39;t worry, you&#39;ll never have to write any Javascript)&lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;    &lt;pre&gt;&lt;code&gt;$ pip install pynecone-io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; Make sure you install the correct package: &lt;code&gt;pynecone-io&lt;/code&gt;, not &lt;code&gt;pynecone&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;h2&gt;Create your first Pynecone App&lt;/h2&gt; &#xA;    &lt;p&gt;Installing Pynecone also installs the &lt;code&gt;pc&lt;/code&gt; command line tool. Test that the install was successful by creating a new project.&lt;/p&gt; &#xA;    &lt;p&gt;Replace my_app_name with your project name:&lt;/p&gt; &#xA;    &lt;pre&gt;&lt;code&gt;$ mkdir my_app_name&#xA;$ cd my_app_name&#xA;$ pc init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;p&gt;When you run this command for the first time, we will download and install &lt;code&gt;bun&lt;/code&gt; automatically.&lt;/p&gt; &#xA;    &lt;p&gt;This command initializes a template app in your new directory. You can run this app in development mode:&lt;/p&gt; &#xA;    &lt;pre&gt;&lt;code&gt;$ pc run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;p&gt;You should see your app running at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. (Note that the port may be different if you have another app running on port 3000, please notice the terminal output)&lt;/p&gt; &#xA;    &lt;p&gt;Now you can modify the source code in &lt;code&gt;my_app_name/my_app_name.py&lt;/code&gt;. Pynecone has fast refreshes so you can see your changes instantly when you save your code.&lt;/p&gt; &#xA;    &lt;h2&gt;Example Pynecone App&lt;/h2&gt; &#xA;    &lt;p&gt;Let&#39;s go over an example of creating a UI around Dalle. For simplicity of the example below, we call the OpenAI Dalle API, but you could replace this with any ML model locally.&lt;/p&gt; &#xA;    &lt;div align=&#34;center&#34;&gt; &#xA;     &lt;img src=&#34;https://raw.githubusercontent.com/pynecone-io/pynecone/main/docs/images/dalle.gif&#34; alt=&#34;drawing&#34; width=&#34;550&#34; style=&#34;border-radius:2%&#34;&gt; &#xA;     &lt;div align=&#34;left&#34;&gt; &#xA;      &lt;p&gt;Here is the complete code to create this. This is all done in one Python file!&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pynecone as pc&#xA;import openai&#xA;&#xA;openai.api_key = &#34;YOUR_API_KEY&#34;&#xA;&#xA;class State(pc.State):&#xA;    &#34;&#34;&#34;The app state.&#34;&#34;&#34;&#xA;    prompt = &#34;&#34;&#xA;    image_url = &#34;&#34;&#xA;    image_processing = False&#xA;    image_made = False&#xA;&#xA;    def process_image(self):&#xA;        &#34;&#34;&#34;Set the image processing flag to true and indicate image is not made yet.&#34;&#34;&#34;&#xA;        self.image_processing = True&#xA;        self.image_made = False        &#xA;&#xA;    def get_image(self):&#xA;        &#34;&#34;&#34;Get the image from the prompt.&#34;&#34;&#34;&#xA;        response = openai.Image.create(prompt=self.prompt, n=1, size=&#34;1024x1024&#34;)&#xA;        self.image_url = response[&#34;data&#34;][0][&#34;url&#34;]&#xA;        self.image_processing = False&#xA;        self.image_made = True&#xA;&#xA;def index():&#xA;    return pc.center(&#xA;        pc.vstack(&#xA;            pc.heading(&#34;DALL-E&#34;, font_size=&#34;1.5em&#34;),&#xA;            pc.input(placeholder=&#34;Enter a prompt..&#34;, on_blur=State.set_prompt),&#xA;            pc.button(&#xA;                &#34;Generate Image&#34;,&#xA;                on_click=[State.process_image, State.get_image],&#xA;                width=&#34;100%&#34;,&#xA;            ),&#xA;            pc.divider(),&#xA;            pc.cond(&#xA;                State.image_processing,&#xA;                pc.circular_progress(is_indeterminate=True),&#xA;                pc.cond(&#xA;                     State.image_made,&#xA;                     pc.image(&#xA;                         src=State.image_url,&#xA;                         height=&#34;25em&#34;,&#xA;                         width=&#34;25em&#34;,&#xA;                    )&#xA;                )&#xA;            ),&#xA;            bg=&#34;white&#34;,&#xA;            padding=&#34;2em&#34;,&#xA;            shadow=&#34;lg&#34;,&#xA;            border_radius=&#34;lg&#34;,&#xA;        ),&#xA;        width=&#34;100%&#34;,&#xA;        height=&#34;100vh&#34;,&#xA;        bg=&#34;radial-gradient(circle at 22% 11%,rgba(62, 180, 137,.20),hsla(0,0%,100%,0) 19%)&#34;,&#xA;    )&#xA;&#xA;# Add state and page to the app.&#xA;app = pc.App(state=State)&#xA;app.add_page(index, title=&#34;Pynecone:DALL-E&#34;)&#xA;app.compile()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;Let&#39;s break this down.&lt;/p&gt; &#xA;      &lt;h3&gt;&lt;strong&gt;UI In Pynecone&lt;/strong&gt;&lt;/h3&gt; &#xA;      &lt;p&gt;Lets start by talking about the UI this Pynecone App.&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def index():&#xA;    return pc.center(&#xA;        ...&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;This index function defines the frontend of the app. We use different components such as &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;vstack&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, and &lt;code&gt;button&lt;/code&gt; to build the front end. Components can be nested to create complex layouts and styled using CSS&#39;s full power. Just pass them in as keyword args.&lt;/p&gt; &#xA;      &lt;p&gt;Pynecone comes with &lt;a href=&#34;https://pynecone.io/docs/library&#34;&gt;50+ built-in components&lt;/a&gt; to help you get started. We are actively adding more components, plus it&#39;s easy to create your own components.&lt;/p&gt; &#xA;      &lt;h3&gt;&lt;strong&gt;State&lt;/strong&gt;&lt;/h3&gt; &#xA;      &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class State(pc.State):&#xA;    &#34;&#34;&#34;The app state.&#34;&#34;&#34;&#xA;    prompt = &#34;&#34;&#xA;    image_url = &#34;&#34;&#xA;    image_processing = False&#xA;    image_made = False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;The state defines all the variables (called vars) in an app that can change and the functions that change them. Here the state is comprised of a &lt;code&gt;prompt&lt;/code&gt; and &lt;code&gt;image_url&lt;/code&gt;. There are also the booleans &lt;code&gt;image_processing&lt;/code&gt; and &lt;code&gt;image_made&lt;/code&gt; to indicate when to show the circular progress and image.&lt;/p&gt; &#xA;      &lt;h3&gt;&lt;strong&gt;Event Handlers&lt;/strong&gt;&lt;/h3&gt; &#xA;      &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def process_image(self):&#xA;        &#34;&#34;&#34;Set the image processing flag to true and indicate image is not made yet.&#34;&#34;&#34;&#xA;        self.image_processing = True&#xA;        self.image_made = False        &#xA;&#xA;    def get_image(self):&#xA;        &#34;&#34;&#34;Get the image from the prompt.&#34;&#34;&#34;&#xA;        response = openai.Image.create(prompt=self.prompt, n=1, size=&#34;1024x1024&#34;)&#xA;        self.image_url = response[&#34;data&#34;][0][&#34;url&#34;]&#xA;        self.image_processing = False&#xA;        self.image_made = True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;Within the state, we define functions called event handlers that change the state vars. Event handlers are the way that we can modify the state in Pynecone. They can be called in response to user actions, such as clicking a button or typing in a text box. These actions are called events.&lt;/p&gt; &#xA;      &lt;p&gt;Our dalle app has two event handlers, &lt;code&gt;process_image&lt;/code&gt; to indicate that the image is being generated and &lt;code&gt;get_image&lt;/code&gt;, which calls the OpenAI API.&lt;/p&gt; &#xA;      &lt;h3&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;/h3&gt; &#xA;      &lt;p&gt;Finally we define our app and tell it what state to use.&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;app = pc.App(state=State)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;We add a route from the root of the app to the index component. We also add a title that will show up in the page preview/ browser tab.&lt;/p&gt; &#xA;      &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;app.add_page(index, title=&#34;Pynecone:DALL-E&#34;)&#xA;app.compile()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;      &lt;p&gt;You can create a multi-page app by adding more routes.&lt;/p&gt; &#xA;      &lt;h2&gt;Status&lt;/h2&gt; &#xA;      &lt;p&gt;As of December 2022, Pynecone has just been released publicly and is in the &lt;strong&gt;Alpha Stage&lt;/strong&gt;.&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;span&gt;🔶&lt;/span&gt; &lt;strong&gt;Public Alpha&lt;/strong&gt;: Anyone can install and use Pynecone. There may be issues, but we are working to resolve them activly.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Public Beta&lt;/strong&gt;: Stable enough for non-enterprise use-cases.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Public Hosting Beta&lt;/strong&gt;: &lt;strong&gt;Optionally&lt;/strong&gt; Deploy and Host your own apps on Pynecone!&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Public&lt;/strong&gt;: Pynecone is production ready.&lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;      &lt;p&gt;Pynecone has new releases and features coming every week! Make sure to: &lt;span&gt;⭐&lt;/span&gt; star and &lt;span&gt;👀&lt;/span&gt; watch this repository to stay up to date.&lt;/p&gt; &#xA;      &lt;h2&gt;Contributing&lt;/h2&gt; &#xA;      &lt;p&gt;We welcome contributions of any size! Below are some good ways to get started in the Pynecone community.&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;GitHub Discussions&lt;/strong&gt;: A great way to talk about features you want added or things that are confusing/need clarification.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;GitHub Issues&lt;/strong&gt;: These are an excellent way to report bugs. Additionally, you can try and solve an existing issue and submit a PR.&lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;      &lt;p&gt;Want to join our Pynecone team or learn more about our framework? Send us an email &lt;a href=&#34;mailto:founders@pynecone.io&#34;&gt;here&lt;/a&gt;, and we can schedule a call to discuss Pynecone and how you can start contributing.&lt;/p&gt; &#xA;      &lt;p&gt;We are actively looking for contributors, no matter your skill level or experience.&lt;/p&gt; &#xA;      &lt;h2&gt;More Information&lt;/h2&gt; &#xA;      &lt;p&gt;More information about Pynecone can be found on our website:&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://pynecone.io&#34;&gt;pynecone.io&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;      &lt;p&gt;Join Our Discord:&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://discord.gg/T5WSbC2YtQ&#34;&gt;Discord Link&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;      &lt;h2&gt;License&lt;/h2&gt; &#xA;      &lt;p&gt;Pynecone is open-source and licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/pynecone-io/pynecone/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;      &lt;h2&gt;Contributors&lt;/h2&gt; &#xA;      &lt;p&gt;&lt;a href=&#34;https://github.com/picklelo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6270214?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Alek99&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/38776361?s=400&amp;amp;u=bd6c163fe787c2de1a26c881598e54b67e2482dd&amp;amp;v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kbrgl&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/13417496?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Lendemor&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4015177?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/FHU-yezi&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/50828953?v=4&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;     &lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;   &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA; &lt;/div&gt;&#xA;&lt;/div&gt;</summary>
  </entry>
</feed>