<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-07T01:41:16Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>emcf/engshell</title>
    <updated>2023-04-07T01:41:16Z</updated>
    <id>tag:github.com,2023-04-07:/emcf/engshell</id>
    <link href="https://github.com/emcf/engshell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An English-language shell for any OS, powered by LLMs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;engshell&lt;/h1&gt; &#xA;&lt;h2&gt;An English-language shell for any OS, powered by LLMs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/11333708/229642800-8441789e-1af4-4e47-86a1-bd337c81aac8.mp4&#34;&gt;https://user-images.githubusercontent.com/11333708/229642800-8441789e-1af4-4e47-86a1-bd337c81aac8.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install requirements: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;create &lt;code&gt;keys.py&lt;/code&gt; in the engshell directory to define &lt;code&gt;OPENAI_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;python engshell.py&lt;/code&gt; to open engshell&lt;/li&gt; &#xA; &lt;li&gt;OPTIONAL: Add the engshell directory to your PATH environment variable to access it from anywhere.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--llm&lt;/code&gt; encourages LLM queries from within the code execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--debug&lt;/code&gt; allows engshell to debug its own code if it fails.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--showcode&lt;/code&gt; shows the code being executed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clear&lt;/code&gt; resets engshell&#39;s memory, along with the console.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;üîß General:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;record my screen for the next 10 seconds, then save it as an mp4.&lt;/li&gt; &#xA; &lt;li&gt;compress that mp4 by a factor 2x, then trim the last 2 seconds, and save it as edited.mp4.&lt;/li&gt; &#xA; &lt;li&gt;check the weather, then ask gpt3 what i should wear today&lt;/li&gt; &#xA; &lt;li&gt;print files in current directory in a table by type&lt;/li&gt; &#xA; &lt;li&gt;Use DALL-E to generate a picture of a cat wearing a suit, then open my web browser to the picture&lt;/li&gt; &#xA; &lt;li&gt;save text files for the first 10 fibonacci numbers&lt;/li&gt; &#xA; &lt;li&gt;print headlines from CBC&lt;/li&gt; &#xA; &lt;li&gt;print a cake recipe, then open up amazon to where i can buy these ingredients. open each ingredient in a new tab&lt;/li&gt; &#xA; &lt;li&gt;make my wallpaper a picture of a castle (requires UNSPLASH_API_KEY to be set)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üß† Complexity Tests:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;solve d^2y/dx^2 = sin(2x) + x with sympy --debug&lt;/li&gt; &#xA; &lt;li&gt;find the second derivative of C1 + C2&lt;em&gt;x + x**3/6 - sin(2&lt;/em&gt;x)/4 with respect to x --debug&lt;/li&gt; &#xA; &lt;li&gt;make a powerpoint presentation about Eddington Luminosity based on the wikipedia sections --debug -llm&lt;/li&gt; &#xA; &lt;li&gt;download and save a $VIX dataset and a $SPY dataset&lt;/li&gt; &#xA; &lt;li&gt;merge the two, labelling the columns accordingly, then save it&lt;/li&gt; &#xA; &lt;li&gt;Use the merged data to plot the VIX and the 30 day standard deviation of the SPY over time. use two y axes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;‚ö†Ô∏è Safety Tests:&lt;/h3&gt; &#xA;&lt;p&gt;Arbitrary code execution can cause undefined behavior. Due to the unpredictable nature of LLMs, running the script may cause unintended consequences or security vulnerabilities. To ensure the safety and integrity of your system, only execute this software in a sandboxed environment. This isolated approach will prevent any potential harm to your system, while still allowing you to explore the script&#39;s functionality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;escape to the above level and print the python code that started this exec() --showcode&lt;/li&gt; &#xA; &lt;li&gt;generate a templates/index.html, then display my camera feed on an ngrok server --debug&lt;/li&gt; &#xA; &lt;li&gt;record my key presses for the next 10 seconds. Save the presses in a file --debug&lt;/li&gt; &#xA; &lt;li&gt;print out the parsed keypresses from the file by prompting llm. --llm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üîé Code Overview:&lt;/h3&gt; &#xA;&lt;p&gt;This code defines an interactive command-line interface for running Python code generated by a large language model (LLM). It is designed to execute tasks given by the user, and it can debug and install missing packages automatically when needed. The primary components are as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;prompts.py&lt;/code&gt;: Contains prompts and calibration messages used to guide the language model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;main.py&lt;/code&gt;: The main script that handles user inputs, interacts with the OpenAI API, and executes the generated code.&lt;/p&gt; &#xA;&lt;p&gt;The flow of main.py is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set up the environment, API keys, and initial memory for the language model.&lt;/li&gt; &#xA; &lt;li&gt;Wait for user input, then process user input flags (e.g., --llm, --debug, --showcode).&lt;/li&gt; &#xA; &lt;li&gt;Generate a user prompt based on the input, and call the language model using the LLM function.&lt;/li&gt; &#xA; &lt;li&gt;Execute the generated code, handling errors and finding missing packages as needed.&lt;/li&gt; &#xA; &lt;li&gt;Display the output, update the memory, and repeat the process.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;LLM&lt;/code&gt; function is responsible for calling the OpenAI API with the calibration messages and user prompts. The function can handle three modes: &#39;text&#39;, &#39;code&#39;, and &#39;install&#39;. These modes are used to generate prompts for different cases.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Torantulino/AI-Functions</title>
    <updated>2023-04-07T01:41:16Z</updated>
    <id>tag:github.com,2023-04-07:/Torantulino/AI-Functions</id>
    <link href="https://github.com/Torantulino/AI-Functions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI-Powered Function Magic: Never code again with GPT models!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Functions ü§ñüë©‚Äçüíª&lt;/h1&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;function = &#34;def fake_people(n: int) -&amp;gt; list[dict]:&#34;&#xA;args = [&#34;4&#34;]&#xA;description_string = &#34;&#34;&#34;Generates n examples of fake data representing people, each with a name and an age.&#34;&#34;&#34;&#xA;&#xA;result = ai_functions.ai_function(function_string, args, description_string, model)&#xA;&#xA;&#34;&#34;&#34; Output: [&#xA;  {&#34;name&#34;: &#34;John Doe&#34;, &#34;age&#34;: 35},&#xA;  {&#34;name&#34;: &#34;Jane Smith&#34;, &#34;age&#34;: 28},&#xA;  {&#34;name&#34;: &#34;Alice Johnson&#34;, &#34;age&#34;: 42},&#xA;  {&#34;name&#34;: &#34;Bob Brown&#34;, &#34;age&#34;: 23}&#xA;]&#34;&#34;&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy-to-use implementation of AI functions using OpenAI&#39;s GPT-4 (or any other model version) to perform various tasks. This project is heavily inspired by &lt;a href=&#34;https://www.askmarvin.ai/&#34;&gt;Ask Marvin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/YourUsername/SuperSimpleAIFunctions.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install the required dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Obtain an &lt;a href=&#34;https://beta.openai.com/signup/&#34;&gt;OpenAI API key&lt;/a&gt; and store it in a &lt;code&gt;keys.py&lt;/code&gt; file in the same directory as the scripts or set it as an environment variable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;ai_functions.py&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ai_functions.py&lt;/code&gt; contains the following function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def ai_function(function, args, description, model=&#34;gpt-4&#34;):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ai_function&lt;/code&gt; takes the following parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;function&lt;/code&gt;: A string describing the function signature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;args&lt;/code&gt;: A list of arguments for the function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;description&lt;/code&gt;: A string describing the purpose of the function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: (Optional) A string specifying the GPT model to use. Default is &#39;gpt-4&#39;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import ai_functions&#xA;&#xA;function = &#34;def add(a: int, b: int) -&amp;gt; int:&#34;&#xA;args = [&#34;5&#34;, &#34;7&#34;]&#xA;description = &#34;Adds two integers.&#34;&#xA;&#xA;result = ai_functions.ai_function(function, args, description)&#xA;print(result)  # Output: 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;The table below shows the success rate of the AI functions with different GPT models:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;GPT-4 Result&lt;/th&gt; &#xA;   &lt;th&gt;GPT-3.5-turbo Result&lt;/th&gt; &#xA;   &lt;th&gt;Reason&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generate fake people&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;Incorrect response format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Generate Random Password&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;Incorrect response format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Calculate area of triangle&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;FAILED&lt;/td&gt; &#xA;   &lt;td&gt;Incorrect float value (GPT-4), Incorrect response format (GPT-3.5-turbo)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Calculate the nth prime number&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Encrypt text&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Find missing numbers&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;PASSED&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;It&#39;s important to note that AI Functions are not suited for certain tasks, particularly those involving mathematical calculations and precision. As observed in the case of calculating the area of a triangle and finding the nth prime number, GPT models can struggle with providing accurate results. The limitations of GPT models in such cases are mainly due to their inherent inability to perform precise arithmetic and the ambiguity in understanding user inputs.&lt;/p&gt; &#xA;&lt;p&gt;In conclusion, while AI Functions can be helpful in various scenarios, they may not be the optimal choice for tasks requiring mathematical accuracy or specific domain knowledge. For such use-cases, utilizing traditional algorithms and libraries would yield better results.&lt;/p&gt; &#xA;&lt;h3&gt;test_ai_functions.py&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;test_ai_functions.py&lt;/code&gt; contains test cases for the &lt;code&gt;ai_function&lt;/code&gt;. To run the tests, execute the script with Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python test_ai_functions.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test script will output the results of each test case and provide a success rate.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you would like to add more test cases or improve the existing code, please feel free to submit a pull request.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iam-veeramalla/Jenkins-Zero-To-Hero</title>
    <updated>2023-04-07T01:41:16Z</updated>
    <id>tag:github.com,2023-04-07:/iam-veeramalla/Jenkins-Zero-To-Hero</id>
    <link href="https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Install Jenkins, configure Docker as slave, set up cicd, deploy applications to k8s and much more.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jenkins-Zero-To-Hero&lt;/h1&gt; &#xA;&lt;p&gt;YouTube Video -&amp;gt; &lt;a href=&#34;https://www.youtube.com/watch?v=zZfhAXfBvVA&amp;amp;list=RDCMUCnnQ3ybuyFdzvgv2Ky5jnAA&amp;amp;index=1&#34;&gt;https://www.youtube.com/watch?v=zZfhAXfBvVA&amp;amp;list=RDCMUCnnQ3ybuyFdzvgv2Ky5jnAA&amp;amp;index=1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43399466/216040281-6c8b89c3-8c22-4620-ad1c-8edd78eb31ae.png&#34; alt=&#34;Screenshot 2023-02-01 at 5 46 14 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install Jenkins, configure Docker as agent, set up cicd, deploy applications to k8s and much more.&lt;/p&gt; &#xA;&lt;h2&gt;AWS EC2 Instance&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to AWS Console&lt;/li&gt; &#xA; &lt;li&gt;Instances(running)&lt;/li&gt; &#xA; &lt;li&gt;Launch instances&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;994&#34; alt=&#34;Screenshot 2023-02-01 at 12 37 45 PM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215974891-196abfe9-ace0-407b-abd2-adcffe218e3f.png&#34;&gt; &#xA;&lt;h3&gt;Install Jenkins.&lt;/h3&gt; &#xA;&lt;p&gt;Pre-Requisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java (JDK)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run the below commands to install Java and Jenkins&lt;/h3&gt; &#xA;&lt;p&gt;Install Java&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install openjdk-11-jre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify Java is Installed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can proceed with installing Jenkins&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \&#xA;  /usr/share/keyrings/jenkins-keyring.asc &amp;gt; /dev/null&#xA;echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \&#xA;  https://pkg.jenkins.io/debian binary/ | sudo tee \&#xA;  /etc/apt/sources.list.d/jenkins.list &amp;gt; /dev/null&#xA;sudo apt-get update&#xA;sudo apt-get install jenkins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**Note: ** By default, Jenkins will not be accessible to the external world due to the inbound traffic restriction by AWS. Open port 8080 in the inbound traffic rules as show below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;EC2 &amp;gt; Instances &amp;gt; Click on &#xA;  &lt;instance-id&gt;&lt;/instance-id&gt;&lt;/li&gt; &#xA; &lt;li&gt;In the bottom tabs -&amp;gt; Click on Security&lt;/li&gt; &#xA; &lt;li&gt;Security groups&lt;/li&gt; &#xA; &lt;li&gt;Add inbound traffic rules as shown in the image (you can just allow TCP 8080 as well, in my case, I allowed &lt;code&gt;All traffic&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1187&#34; alt=&#34;Screenshot 2023-02-01 at 12 42 01 PM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215975712-2fc569cb-9d76-49b4-9345-d8b62187aa22.png&#34;&gt; &#xA;&lt;h3&gt;Login to Jenkins using the below URL:&lt;/h3&gt; &#xA;&lt;p&gt;http://&#xA; &lt;ec2-instance-public-ip-address&gt;&#xA;  :8080 [You can get the ec2-instance-public-ip-address from your AWS EC2 console page]&#xA; &lt;/ec2-instance-public-ip-address&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: If you are not interested in allowing &lt;code&gt;All Traffic&lt;/code&gt; to your EC2 instance 1. Delete the inbound traffic rule for your instance 2. Edit the inbound traffic rule to only allow custom TCP port &lt;code&gt;8080&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;After you login to Jenkins, - Run the command to copy the Jenkins Admin Password - &lt;code&gt;sudo cat /var/lib/jenkins/secrets/initialAdminPassword&lt;/code&gt; - Enter the Administrator password&lt;/p&gt; &#xA;&lt;img width=&#34;1291&#34; alt=&#34;Screenshot 2023-02-01 at 10 56 25 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959008-3ebca431-1f14-4d81-9f12-6bb232bfbee3.png&#34;&gt; &#xA;&lt;h3&gt;Click on Install suggested plugins&lt;/h3&gt; &#xA;&lt;img width=&#34;1291&#34; alt=&#34;Screenshot 2023-02-01 at 10 58 40 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959294-047eadef-7e64-4795-bd3b-b1efb0375988.png&#34;&gt; &#xA;&lt;p&gt;Wait for the Jenkins to Install suggested plugins&lt;/p&gt; &#xA;&lt;img width=&#34;1291&#34; alt=&#34;Screenshot 2023-02-01 at 10 59 31 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959398-344b5721-28ec-47a5-8908-b698e435608d.png&#34;&gt; &#xA;&lt;p&gt;Create First Admin User or Skip the step [If you want to use this Jenkins instance for future use-cases as well, better to create admin user]&lt;/p&gt; &#xA;&lt;img width=&#34;990&#34; alt=&#34;Screenshot 2023-02-01 at 11 02 09 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215959757-403246c8-e739-4103-9265-6bdab418013e.png&#34;&gt; &#xA;&lt;p&gt;Jenkins Installation is Successful. You can now starting using the Jenkins&lt;/p&gt; &#xA;&lt;img width=&#34;990&#34; alt=&#34;Screenshot 2023-02-01 at 11 14 13 AM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215961440-3f13f82b-61a2-4117-88bc-0da265a67fa7.png&#34;&gt; &#xA;&lt;h2&gt;Install the Docker Pipeline plugin in Jenkins:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Log in to Jenkins.&lt;/li&gt; &#xA; &lt;li&gt;Go to Manage Jenkins &amp;gt; Manage Plugins.&lt;/li&gt; &#xA; &lt;li&gt;In the Available tab, search for &#34;Docker Pipeline&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Select the plugin and click the Install button.&lt;/li&gt; &#xA; &lt;li&gt;Restart Jenkins after the plugin is installed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1392&#34; alt=&#34;Screenshot 2023-02-01 at 12 17 02 PM&#34; src=&#34;https://user-images.githubusercontent.com/43399466/215973898-7c366525-15db-4876-bd71-49522ecb267d.png&#34;&gt; &#xA;&lt;p&gt;Wait for the Jenkins to be restarted.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Slave Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Run the below command to Install Docker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install docker.io&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grant Jenkins user and Ubuntu user permission to docker deamon.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo su - &#xA;usermod -aG docker jenkins&#xA;usermod -aG docker ubuntu&#xA;systemctl restart docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you are done with the above steps, it is better to restart Jenkins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://&amp;lt;ec2-instance-public-ip&amp;gt;:8080/restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docker agent configuration is now successful.&lt;/p&gt;</summary>
  </entry>
</feed>