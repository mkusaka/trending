<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-15T01:37:59Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>turboderp/exllamav2</title>
    <updated>2023-09-15T01:37:59Z</updated>
    <id>tag:github.com,2023-09-15:/turboderp/exllamav2</id>
    <link href="https://github.com/turboderp/exllamav2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast inference library for running LLMs locally on modern consumer-class GPUs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ExLlamaV2&lt;/h1&gt; &#xA;&lt;p&gt;This is a very initial release of ExLlamaV2, an inference library for running local LLMs on modern consumer GPUs.&lt;/p&gt; &#xA;&lt;p&gt;It still needs a lot of testing and tuning, and a few key features are not yet implemented. Don&#39;t be surprised if things are a bit broken to start with, as almost all of this code is completely new and only tested on a few setups so far.&lt;/p&gt; &#xA;&lt;h2&gt;Overview of differences compared to V1&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Faster, better kernels&lt;/li&gt; &#xA; &lt;li&gt;Cleaner and more versatile codebase&lt;/li&gt; &#xA; &lt;li&gt;Support for a new quant format (see below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Some quick tests to compare performance with V1. There may be more performance optimizations in the future, and speeds will vary across GPUs, with slow CPUs still being a potential bottleneck:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Size&lt;/th&gt; &#xA;   &lt;th&gt;grpsz&lt;/th&gt; &#xA;   &lt;th&gt;act&lt;/th&gt; &#xA;   &lt;th&gt;V1: 3090Ti&lt;/th&gt; &#xA;   &lt;th&gt;V1: 4090&lt;/th&gt; &#xA;   &lt;th&gt;V2: 3090Ti&lt;/th&gt; &#xA;   &lt;th&gt;V2: 4090&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ&lt;/td&gt; &#xA;   &lt;td&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;143 t/s&lt;/td&gt; &#xA;   &lt;td&gt;173 t/s&lt;/td&gt; &#xA;   &lt;td&gt;175 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;195&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ&lt;/td&gt; &#xA;   &lt;td&gt;13B&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;84 t/s&lt;/td&gt; &#xA;   &lt;td&gt;102 t/s&lt;/td&gt; &#xA;   &lt;td&gt;105 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;110&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ&lt;/td&gt; &#xA;   &lt;td&gt;33B&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;37 t/s&lt;/td&gt; &#xA;   &lt;td&gt;45 t/s&lt;/td&gt; &#xA;   &lt;td&gt;45 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;48&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenLlama&lt;/td&gt; &#xA;   &lt;td&gt;GPTQ&lt;/td&gt; &#xA;   &lt;td&gt;3B&lt;/td&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;194 t/s&lt;/td&gt; &#xA;   &lt;td&gt;226 t/s&lt;/td&gt; &#xA;   &lt;td&gt;295 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;321&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeLlama&lt;/td&gt; &#xA;   &lt;td&gt;EXL2 4.0 bpw&lt;/td&gt; &#xA;   &lt;td&gt;34B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;42 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;48&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama2&lt;/td&gt; &#xA;   &lt;td&gt;EXL2 3.0 bpw&lt;/td&gt; &#xA;   &lt;td&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;195 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;224&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama2&lt;/td&gt; &#xA;   &lt;td&gt;EXL2 4.0 bpw&lt;/td&gt; &#xA;   &lt;td&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;164 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;197&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama2&lt;/td&gt; &#xA;   &lt;td&gt;EXL2 5.0 bpw&lt;/td&gt; &#xA;   &lt;td&gt;7B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;144 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;160&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Llama2&lt;/td&gt; &#xA;   &lt;td&gt;EXL2 2.5 bpw&lt;/td&gt; &#xA;   &lt;td&gt;70B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;30 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;35&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TinyLlama&lt;/td&gt; &#xA;   &lt;td&gt;EXL2 3.0 bpw&lt;/td&gt; &#xA;   &lt;td&gt;1.1B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;536 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;635&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TinyLlama&lt;/td&gt; &#xA;   &lt;td&gt;EXL2 4.0 bpw&lt;/td&gt; &#xA;   &lt;td&gt;1.1B&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;509 t/s&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;590&lt;/strong&gt; t/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository and install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/turboderp/exllamav2&#xA;cd exllamav2&#xA;pip install -r requirements.txt&#xA;&#xA;python test_inference.py -m &amp;lt;path_to_model&amp;gt; -p &#34;Once upon a time,&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For now, a simple console chatbot is included. Run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python examples/chat.py -m &amp;lt;path_to_model&amp;gt; -mode llama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-mode&lt;/code&gt; argument chooses the prompt format to use. &lt;code&gt;llama&lt;/code&gt; is for the Llama(2)-chat finetunes, while &lt;code&gt;codellama&lt;/code&gt; probably works better for CodeLlama-instruct. &lt;code&gt;raw&lt;/code&gt; will produce a simple chatlog-style chat that works with base models and various other finetunes. You can also provide a custom system prompt with &lt;code&gt;-sp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install as a library (not required for the included examples), clone the repository and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python setup.py install --user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ExLlamaV2 relies on a Torch C++ extension for its CUDA functions, which is compiled at runtime. This means the first time the library is used it will take 10-20 seconds (depending on your hardware) to start, but the extension gets cached for subsequent use. A PyPI package will evantually be available with an option to install a precompiled extension.&lt;/p&gt; &#xA;&lt;h2&gt;EXL2 quantization&lt;/h2&gt; &#xA;&lt;p&gt;ExLlamaV2 supports the same 4-bit GPTQ models as V1, but also a new &#34;EXL2&#34; format. EXL2 is based on the same optimization method as GPTQ and supports 2, 3, 4, 5, 6 and 8-bit quantization. The format allows for mixing quantization levels within a model to achieve any average bitrate between 2 and 8 bits per weight.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, it&#39;s possible to apply multiple quantization levels to each linear layer, producing something akin to sparse quantization wherein more important weights (columns) are quantized with more bits. The same remapping trick that lets ExLlama work efficiently with act-order models allows this mixing of formats to happen with little to no impact on performance.&lt;/p&gt; &#xA;&lt;p&gt;Parameter selection is done automatically by quantizing each matrix multiple times, measuring the quantization error (with respect to the chosen calibration data) for each of a number of possible settings, per layer. Finally, a combination is chosen that minimizes the maximum quantization error over the entire model while meeting a target average bitrate.&lt;/p&gt; &#xA;&lt;p&gt;In my tests, this scheme allows Llama2 70B to run on a single 24 GB GPU with a 2048-token context, producing coherent and mostly stable output with 2.55 bits per weight. 13B models run at 2.65 bits within 8 GB of VRAM, although currently none of them uses GQA which effectively limits the context size to 2048. In either case it&#39;s unlikely that the model will fit alongside a desktop environment. For now.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/turboderp/exllamav2/master/doc/llama2_70b_chat.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/turboderp/exllamav2/master/doc/llama2_70b_chat_thumb.png&#34; alt=&#34;chat_screenshot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/turboderp/exllamav2/master/doc/codellama_13b_instruct.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/turboderp/exllamav2/master/doc/codellama_13b_instruct_thumb.png&#34; alt=&#34;chat_screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Conversion&lt;/h3&gt; &#xA;&lt;p&gt;A script is provided to quantize models. Converting large models can be somewhat slow, so be warned. To use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python convert.py \&#xA;    -i &amp;lt;input_HF_model&amp;gt; \&#xA;    -o &amp;lt;output_work_directory&amp;gt; \&#xA;    -c &amp;lt;calibration_data_file&amp;gt; \&#xA;    -b &amp;lt;target_bits_per_weight&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output directory should be empty when you start converting. The script will dump a bunch of files there as it works, so it can resume an interrupted job if you point it to the same output directory a second time.&lt;/p&gt; &#xA;&lt;p&gt;After the first pass is completed, a &lt;code&gt;measurement.json&lt;/code&gt; file will be written to the output directory. This can be supplied (with the &lt;code&gt;-m&lt;/code&gt; argument) to subsequent conversion jobs to skip the first pass and save some time when quantizing the same model to different bitrates. Once complete, the quantized tensors will be compiled into &lt;code&gt;output.safetensors&lt;/code&gt;, and this file can replace the safetensors file in the original HF model.&lt;/p&gt; &#xA;&lt;p&gt;Roughly speaking, you&#39;ll need about 24 GB of VRAM to convert a 70B model, while 7B seems to require about 8 GB. There are optimizations planned to accelerate conversion, utilizing more or larger GPUs.&lt;/p&gt; &#xA;&lt;h3&gt;HuggingFace repos&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve uploaded a few EXL2-quantized models to HuggingFace to play around with, &lt;a href=&#34;https://huggingface.co/turboderp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that these were produced over a period of time with different calibration data, so they&#39;re not useful as a way to measure quantization loss. Thorough perplexity and accuracy tests are coming, once I&#39;ve had time to convert models for that purpose.&lt;/p&gt; &#xA;&lt;h2&gt;More to come&lt;/h2&gt; &#xA;&lt;p&gt;There are still things that need to be ported over from V1, and other planned features. Among them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PyPi package with prebuilt extensions&lt;/li&gt; &#xA; &lt;li&gt;LoRA support&lt;/li&gt; &#xA; &lt;li&gt;Example web UI&lt;/li&gt; &#xA; &lt;li&gt;Web server&lt;/li&gt; &#xA; &lt;li&gt;More samplers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;2023-09-13&lt;/strong&gt;: Preliminary ROCm support added, thanks to @ardfork. Bumped to 0.0.1&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dataelement/bisheng</title>
    <updated>2023-09-15T01:37:59Z</updated>
    <id>tag:github.com,2023-09-15:/dataelement/bisheng</id>
    <link href="https://github.com/dataelement/bisheng" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bisheng is an open LLM devops platform for next generation AI applications.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://www.dataelem.com/nstatic/bisheng.png&#34; alt=&#34;Bisheng banner&#34;&gt; &#xA;&lt;div class=&#34;column&#34; align=&#34;middle&#34;&gt; &#xA; &lt;!-- &lt;a href=&#34;https://bisheng.slack.com/join/shared_invite/&#34;&gt; --&gt; &#xA; &lt;!-- &lt;img src=&#34;https://img.shields.io/badge/Join-Slack-orange&#34; alt=&#34;join-slack&#34;/&gt; --&gt;  &#xA; &lt;!-- &lt;img src=&#34;https://img.shields.io/github/license/bisheng-io/bisheng&#34; alt=&#34;license&#34;/&gt; --&gt; &#xA; &lt;!-- &lt;img src=&#34;https://img.shields.io/docker/pulls/bisheng-io/bisheng&#34; alt=&#34;docker-pull-count&#34; /&gt; --&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;欢迎来到 Bisheng&lt;/h1&gt; &#xA;&lt;h2&gt;Bisheng 是什么&lt;/h2&gt; &#xA;&lt;p&gt;Bisheng是一款领先的开源&lt;b&gt;大模型应用开发平台&lt;/b&gt;，赋能和加速大模型应用开发落地，帮助用户以最佳体验进入下一代应用开发模式。&lt;/p&gt; &#xA;&lt;p&gt;“毕昇”是活字印刷术的发明人，活字印刷术为人类知识的传递起到了巨大的推动作用。我们希望“毕昇”同样能够为智能应用的广泛落地提供有力的支撑。欢迎大家一道参与。&lt;/p&gt; &#xA;&lt;p&gt;Bisheng 基于 &lt;a href=&#34;https://github.com/dataelement/bisheng/raw/main/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt; 协议发布，于 2023 年 8 月底正式开源。&lt;/p&gt; &#xA;&lt;h2&gt;产品亮点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;便捷：即使是业务人员，基于我们预置的应用模板，通过简单直观的表单填写方式快速搭建以大模型为核心的智能应用。&lt;/li&gt; &#xA; &lt;li&gt;灵活：对大模型技术有了解的人员，我们紧跟最前沿大模型技术生态提供数百种开发组件，基于可视化且自由的流程编排能力，可开发出任意类型的大模型应用，而不仅是简单的提示词工程。&lt;/li&gt; &#xA; &lt;li&gt;可靠与企业级：当前许多同类的开源项目仅适用于实验测试场景，缺少真正生产使用的企业级特性，包括：高并发下的高可用、应用运营及效果持续迭代优化、贴合真实业务场景的实用功能等，这些都是毕昇平台的差异化能力；另外，更直观的是，企业内的数据质量参差不齐，想要真正把所有数据利用起来，首先需要有完备的非结构化数据治理能力，而这是过去几年我们团队所积累的核心能力，在毕昇的demo环境中您可以通过相关组件直接接入这些能力，并且这些能力免费不限量使用。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;产品应用&lt;/h2&gt; &#xA;&lt;p&gt;使用毕昇平台，我们可以搭建各类丰富的大模型应用：&lt;/p&gt; &#xA;&lt;p&gt;分析报告生成&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📃 合同审核报告生成&lt;/li&gt; &#xA; &lt;li&gt;🏦 信贷调查报告生成&lt;/li&gt; &#xA; &lt;li&gt;📈 招股书分析报告生成&lt;/li&gt; &#xA; &lt;li&gt;💼 智能投顾报告生成&lt;/li&gt; &#xA; &lt;li&gt;👀 文档摘要生成&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;知识库问答&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;👩‍💻 用户手册问答&lt;/li&gt; &#xA; &lt;li&gt;👩🏻‍🔬 研报知识库问答&lt;/li&gt; &#xA; &lt;li&gt;🗄 规章制度问答&lt;/li&gt; &#xA; &lt;li&gt;💊 《中华药典》知识问答&lt;/li&gt; &#xA; &lt;li&gt;📊 股价数据库问答&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;对话&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎭 扮演面试官对话&lt;/li&gt; &#xA; &lt;li&gt;📍 小红书文案助手&lt;/li&gt; &#xA; &lt;li&gt;👩‍🎤 扮演外教对话&lt;/li&gt; &#xA; &lt;li&gt;👨‍🏫 简历优化助手&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;要素提取&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📄 合同关键要素提取&lt;/li&gt; &#xA; &lt;li&gt;🏗️ 工程报告要素提取&lt;/li&gt; &#xA; &lt;li&gt;🗂️ 通用元数据提取&lt;/li&gt; &#xA; &lt;li&gt;🎫 卡证票据要素提取&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;各类应用构建方法详见：&lt;a href=&#34;https://m7a7tqsztt.feishu.cn/wiki/ZfkmwLPfeiAhQSkK2WvcX87unxc&#34;&gt;应用案例&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;我们认为在企业真实场景中，“对话”仅是众多交互形式中的一种，未来我们还将新增流程自动化、搜索等更多应用形态的支持。&lt;/p&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;h3&gt;启动 Bisheng&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://m7a7tqsztt.feishu.cn/wiki/BSCcwKd4Yiot3IkOEC8cxGW7nPc&#34;&gt;安装 Bisheng&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;源码编译 Bisheng&lt;/h3&gt; &#xA;&lt;p&gt;Todo: 待补充&lt;/p&gt; &#xA;&lt;p&gt;获取更多内容，请阅读 &lt;a href=&#34;https://m7a7tqsztt.feishu.cn/wiki/ITmJwMXVliBnzpkW3nkcqPVrnse&#34;&gt;开发者文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;贡献代码&lt;/h2&gt; &#xA;&lt;p&gt;欢迎向 Bisheng 社区贡献你的代码。代码贡献流程或提交补丁等相关信息详见 &lt;a href=&#34;https://github.com/dataelement/bisheng/raw/main/CONTRIBUTING.md&#34;&gt;代码贡献准则&lt;/a&gt;。 参考 &lt;a href=&#34;https://github.com/dataelement/community&#34;&gt;社区仓库&lt;/a&gt; 了解社区管理准则并获取更多社区资源。&lt;/p&gt; &#xA;&lt;!-- ### All contributors --&gt; &#xA;&lt;!-- Do not remove end of hero-bot --&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Bisheng 文档&lt;/h2&gt; &#xA;&lt;p&gt;获取更多有关安装、开发、部署和管理的指南，请查看 &lt;a href=&#34;https://m7a7tqsztt.feishu.cn/wiki/ZxW6wZyAJicX4WkG0NqcWsbynde&#34;&gt;Bisheng 文档&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;社区&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;欢迎加入 &lt;a href=&#34;https://www.dataelem.com/&#34;&gt;Slack&lt;/a&gt; 频道分享你的建议与问题。&lt;/li&gt; &#xA; &lt;li&gt;你也可以通过 &lt;a href=&#34;https://m7a7tqsztt.feishu.cn/wiki/XdGCwkDJviC0Z8klbdbcF790n9b&#34;&gt;FAQ&lt;/a&gt; 页面，查看常见问题及解答。&lt;/li&gt; &#xA; &lt;li&gt;你也可以加入 &lt;a href=&#34;https://github.com/dataelement/bisheng/discussions&#34;&gt;讨论组&lt;/a&gt; 发起问题和讨论。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- 订阅 Bisheng 邮件：&#xA;&#xA;- [Technical Steering Committee](https://www.dataelem.com/)&#xA;- [Technical Discussions](https://www.dataelem.com/)&#xA;- [Announcement](https://www.dataelem.com/) --&gt; &#xA;&lt;p&gt;关注 Bisheng 社交媒体：&lt;/p&gt; &#xA;&lt;!-- - [知乎](https://www.zhihu.com/org/bisheng-io)&#xA;- [CSDN](http://bishengio.blog.csdn.net/)&#xA;- [Bilibili](http://space.bilibili.com/xxxxx) --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bisheng 技术交流微信群&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://www.dataelem.com/nstatic/qrcode.png&#34; alt=&#34;Wechat QR Code&#34;&gt; &#xA;&lt;h2&gt;加入我们&lt;/h2&gt; &#xA;&lt;p&gt;DataElem Inc. 是 Bisheng 项目的幕后公司。我们正在 &lt;a href=&#34;https://www.dataelem.com/contact/team&#34;&gt;招聘&lt;/a&gt; 算法、开发和全栈工程师。欢迎加入我们，让我们携手构建下一代的智能应用开发平台。&lt;/p&gt; &#xA;&lt;h2&gt;特别感谢&lt;/h2&gt; &#xA;&lt;p&gt;Bisheng 采用了以下依赖库:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;感谢开源模型预估框架 &lt;a href=&#34;https://github.com/triton-inference-server&#34;&gt;Triton&lt;/a&gt; 。&lt;/li&gt; &#xA; &lt;li&gt;感谢开源LLM应用开发库 &lt;a href=&#34;https://github.com/langchain-ai/langchain&#34;&gt;langchain&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;感谢开源非结构化数据解析引擎 &lt;a href=&#34;https://github.com/Unstructured-IO/unstructured&#34;&gt;unstructured&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;感谢开源langchain可视化工具 &lt;a href=&#34;https://github.com/logspace-ai/langflow&#34;&gt;langflow&lt;/a&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>n0a/telegram-get-remote-ip</title>
    <updated>2023-09-15T01:37:59Z</updated>
    <id>tag:github.com,2023-09-15:/n0a/telegram-get-remote-ip</id>
    <link href="https://github.com/n0a/telegram-get-remote-ip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get IP address on other side audio call in Telegram.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telegram get remote IP&lt;/h1&gt; &#xA;&lt;h2&gt;New 2023 version written in python, against bash.&lt;/h2&gt; &#xA;&lt;p&gt;This script is intended to be used to determine the IP address of the interlocutor in the telegram messenger.&lt;/p&gt; &#xA;&lt;p&gt;You must have tshark installed to use it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Attention! To determine the IP address, you must be in each other&#39;s contacts.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/thW5I0x.png&#34; alt=&#34;Get caller IP&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://desktop.telegram.org/&#34;&gt;Telegram desktop&lt;/a&gt; client on Linux or Mac.&lt;/li&gt; &#xA; &lt;li&gt;Install tshark (&lt;strong&gt;sudo apt install tshark&lt;/strong&gt; or download for macOS &lt;a href=&#34;https://www.wireshark.org/download.html&#34;&gt;here&lt;/a&gt;, it&#39;s comes with wireshark).&lt;/li&gt; &#xA; &lt;li&gt;Run script, call and wait for an answer.&lt;/li&gt; &#xA; &lt;li&gt;Profit! You have received the IP address of the interlocutor.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Get &amp;amp; Run (Ubuntu 20 example)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt update&#xA;$ sudo apt install -y python3-pip python3-venv tshark&#xA;$ git clone https://github.com/n0a/telegram-get-remote-ip&#xA;$ cd telegram-get-remote-ip&#xA;$ python3 -m venv venv&#xA;$ source ./venv/bin/activate&#xA;$ sudo pip3 install -r requirements.txt&#xA;$ sudo python3 tg_get_ip.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or specify the interface immediately at startup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo python3 -i en0 tg_get_ip.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;PS.&lt;/strong&gt; Possible work with termux on android smartphones. Root authority is required to capture traffic.&lt;/p&gt; &#xA;&lt;h2&gt;Для русскоязыных пользователей&lt;/h2&gt; &#xA;&lt;p&gt;Более подробно об утилите можно почитать у меня в блоге: &lt;a href=&#34;https://n0a.pw/telegram-get-remote-ip/&#34;&gt;https://n0a.pw/telegram-get-remote-ip/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>