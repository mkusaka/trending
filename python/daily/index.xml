<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-29T01:35:39Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>patched-codes/patchwork</title>
    <updated>2024-07-29T01:35:39Z</updated>
    <id>tag:github.com,2024-07-29:/patched-codes/patchwork</id>
    <link href="https://github.com/patched-codes/patchwork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automate development gruntwwork like code reviews, patching and documentation with LLM workflows.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img alt=&#34;Patchwork logo&#34; src=&#34;https://repository-images.githubusercontent.com/782544882/a9743f35-5e1c-43ed-a0e0-536322056d38&#34; width=&#34;36%&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;img alt=&#34;Patchwork GIF&#34; src=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork-banner.gif&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/patched-codes/patchwork/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/patched-codes/patchwork/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/XDxA3mJyhE&#34;&gt;&lt;img src=&#34;https://dcbadge.limes.pink/api/server/XDxA3mJyhE?style=flat&amp;amp;theme=clean-inverted&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/patchwork-cli/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/patchwork-cli&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/patchwork-cli&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/patchwork-cli&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://youtu.be/MLyn6B3bFMU&#34;&gt;Demo&lt;/a&gt; | &lt;a href=&#34;https://docs.patched.codes/&#34;&gt;Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Patchwork allows you to automate development gruntwwork like PR reviews, bug fixing, security patching, and more using a self-hosted CLI agent and your preferred LLMs.&lt;/p&gt; &#xA;&lt;h2&gt;Key Components&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Steps&lt;/strong&gt;: Reusable atomic actions like create PR, commit changes or call an LLM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt Templates&lt;/strong&gt;: Customizable LLM prompts optimized for a chore like library updates, code generation, issue analysis or vulnerability remediation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Patchflows&lt;/strong&gt;: LLM-assisted automations such as PR reviews, code fixing, documentation etc. built by combining steps and prompts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Patchflows can be run locally in your CLI and IDE, or as part of your CI/CD pipeline. There are &lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/#patchflows&#34;&gt;several patchflows available&lt;/a&gt; out of the box, and you can always &lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/#contributing&#34;&gt;create your own&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/MLyn6B3bFMU&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/3gRpqQoIino/0.jpg&#34; alt=&#34;Patchwork CLI Quickstart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using Pip&lt;/h3&gt; &#xA;&lt;p&gt;PatchWork is available on PyPI and can be installed using pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install &#39;patchwork-cli[all]&#39; --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following optional dependency groups are available.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;security: installs semgrep and depscan with &lt;code&gt;pip install &#39;patchwork-cli[security]&#39;&lt;/code&gt; and is required for &lt;strong&gt;AutoFix&lt;/strong&gt; and &lt;strong&gt;DependencyUpgrade&lt;/strong&gt; patchflows.&lt;/li&gt; &#xA; &lt;li&gt;rag: installs chromadb with &lt;code&gt;pip install &#39;patchwork-cli[rag]&#39;&lt;/code&gt; and is required for the &lt;strong&gt;ResolveIssue&lt;/strong&gt; patchflow.&lt;/li&gt; &#xA; &lt;li&gt;notifications: Used by steps sending notifications, e.g. slack messages.&lt;/li&gt; &#xA; &lt;li&gt;all: installs everything.&lt;/li&gt; &#xA; &lt;li&gt;not specifying any dependency group (&lt;code&gt;pip install patchwork-cli&lt;/code&gt;) will install a core set of dependencies that are sufficient to run the &lt;strong&gt;GenerateDocstring&lt;/strong&gt;, &lt;strong&gt;PRReview&lt;/strong&gt; and &lt;strong&gt;GenerateREADME&lt;/strong&gt; patchflows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using Poetry&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to build from source using poetry, please see detailed documentation &lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/INSTALL.md&#34;&gt;here&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h2&gt;PatchWork CLI&lt;/h2&gt; &#xA;&lt;p&gt;The CLI runs Patchflows, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;patchwork &amp;lt;PatchFlow&amp;gt; &amp;lt;?Arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Arguments&lt;/strong&gt;: Allow for overriding default/optional attributes of the Patchflow in the format of &lt;code&gt;key=value&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; does not have any value, it is considered a boolean &lt;code&gt;True&lt;/code&gt; flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;For an AutoFix patchflow which patches vulnerabilities based on a scan using Semgrep:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;patchwork AutoFix openai_api_key=&amp;lt;YOUR_OPENAI_API_KEY&amp;gt; github_api_key=&amp;lt;YOUR_GITHUB_TOKEN&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command will default to patching code in the current directory, by running Semgrep to identify the vulnerabilities. You can take a look at the &lt;code&gt;default.yml&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/AutoFix/defaults.yml&#34;&gt;file&lt;/a&gt; for the list of configurations you can set to manage the AutoFix patchflow.&lt;/p&gt; &#xA;&lt;p&gt;You can replace the OpenAI key with a key from our managed service by signing in at &lt;a href=&#34;https://app.patched.codes/signin&#34;&gt;https://app.patched.codes/signin&lt;/a&gt; and generating an API key from the integrations tab. You can then call the patchflow with the key as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;patchwork AutoFix patched_api_key=&amp;lt;YOUR_PATCHED_API_KEY&amp;gt; github_api_key=&amp;lt;YOUR_GITHUB_TOKEN&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, to use Google&#39;s models you can set the &lt;code&gt;google_api_key&lt;/code&gt; and &lt;code&gt;model&lt;/code&gt;, this is useful if you want to work with large contexts as the &lt;code&gt;gemini-pro-1.5&lt;/code&gt; model supports an input context length of 1 million tokens.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/patched-codes/patchwork-configs&#34;&gt;patchwork-template&lt;/a&gt; repository contains the default configuration and prompts for all the patchflows. You can clone that repo and pass it as a flag to the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;patchwork AutoFix --config /path/to/patchwork-configs/patchflows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Patchflows&lt;/h2&gt; &#xA;&lt;p&gt;Patchwork comes with a set of predefined patchflows, and more will be added over time. Below is a sample list of patchflows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/GenerateDocstring&#34;&gt;&lt;strong&gt;GenerateDocstring&lt;/strong&gt;&lt;/a&gt;: Generate docstrings for methods in your code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/AutoFix&#34;&gt;&lt;strong&gt;AutoFix&lt;/strong&gt;&lt;/a&gt;: Generate and apply fixes to code vulnerabilities in a repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/PRReview&#34;&gt;&lt;strong&gt;PRReview&lt;/strong&gt;&lt;/a&gt;: On PR creation, extract code diff, summarize changes, and comment on PR.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/GenerateREADME&#34;&gt;&lt;strong&gt;GenerateREADME&lt;/strong&gt;&lt;/a&gt;: Create a README markdown file for a given folder, to add documentation to your repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/DependencyUpgrade&#34;&gt;&lt;strong&gt;DependencyUpgrade&lt;/strong&gt;&lt;/a&gt;: Update your dependencies from vulnerable to fixed versions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/ResolveIssue&#34;&gt;&lt;strong&gt;ResolveIssue&lt;/strong&gt;&lt;/a&gt;: Identify the files in your repository that need to be updated to resolve an issue (or bug) and create a PR to fix it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prompt Templates&lt;/h2&gt; &#xA;&lt;p&gt;Prompt templates are used by patchflows and passed as queries to LLMs. Templates contain prompts with placeholder variables enclosed by {{}} which are replaced by the data from the steps or inputs on every run.&lt;/p&gt; &#xA;&lt;p&gt;Below is a sample prompt template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: &#34;diffreview_summary&#34;,&#xA;    &#34;prompts&#34;: [&#xA;      {&#xA;        &#34;role&#34;: &#34;user&#34;,&#xA;        &#34;content&#34;: &#34;Summarize the following code change descriptions in 1 paragraph. {{diffreviews}}&#34;&#xA;      }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each patchflow comes with an optimized default prompt template. But you can specify your own using the &lt;code&gt;prompt_template_file=/path/to/prompt/template/file&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions for new patchflows and steps, or even to the core framework are welcome. Please look at open issues for details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To create a new patchflow, follow &lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/patchflows/README.md&#34;&gt;these instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To create a new step, follow &lt;a href=&#34;https://raw.githubusercontent.com/patched-codes/patchwork/main/patchwork/steps/README.md&#34;&gt;these instructions&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also provide chat assistants to help you create new steps and patchflows easily. Fair warning: they suffer from the same limitations as their underlying model.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chatgpt.com/g/g-0G4sCAd2y-patchwork-assistant&#34;&gt;Patchwork Assistant GPT&lt;/a&gt; (based on GPT-4)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hf.co/chat/assistant/66322701fd4787e0c1f7696b&#34;&gt;Patchwork Assistant on HuggingChat &lt;/a&gt; (based on Llama-3)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;Short Term&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expand patchflow library and integration options&lt;/li&gt; &#xA; &lt;li&gt;Patchflow debugger and validation module&lt;/li&gt; &#xA; &lt;li&gt;Bug fixing and performance improvements&lt;/li&gt; &#xA; &lt;li&gt;Refactor code and documentation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Long Term&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support large-scale code embeddings in patchflows&lt;/li&gt; &#xA; &lt;li&gt;Support parallelization and branching&lt;/li&gt; &#xA; &lt;li&gt;Fine-tuned models that can be self-hosted&lt;/li&gt; &#xA; &lt;li&gt;Open-source GUI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Patchwork is licensed under &lt;a href=&#34;https://github.com/patched-codes/patchwork?tab=AGPL-3.0-1-ov-file#readme&#34;&gt;AGPL-3.0 terms&lt;/a&gt;. However, custom patchflows and steps can be created and shared using the &lt;a href=&#34;https://github.com/patched-codes/patchwork-configs&#34;&gt;patchwork template&lt;/a&gt; repository which is licensed under &lt;a href=&#34;https://github.com/patched-codes/patchwork-configs/raw/main/LICENSE&#34;&gt;Apache-2.0 terms&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>