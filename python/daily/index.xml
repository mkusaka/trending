<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-31T01:35:04Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>netlas-io/netlas-cookbook</title>
    <updated>2023-10-31T01:35:04Z</updated>
    <id>tag:github.com,2023-10-31:/netlas-io/netlas-cookbook</id>
    <link href="https://github.com/netlas-io/netlas-cookbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The goal of this guide is very simple - to teach anyone interested in cyber security, regardless of their knowledge level, how to make the most of Netlas.io.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img align=&#34;center&#34; src=&#34;https://app.netlas.io/static/media/logo-dark.e3792204ae117bd83067f342f15944f6.svg?sanitize=true&#34; width=&#34;180px&#34;&gt; &#xA; &lt;h1&gt;Welcome to Netlas CookBook!&lt;/h1&gt; &#xA; &lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/netlas-io/netlas-cookbook&#34;&gt; &#xA; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/netlas-io/netlas-cookbook&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34;&gt; &#xA; &lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fnetlas-io%2Fnetlas-cookbook&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; The goal of this guide is very simple - to teach anyone interested in cyber security, regardless of their knowledge level, how to make the most of Netlas.io. &#xA; &lt;br&gt; &#xA; &lt;br&gt; ‚≠êÔ∏è Give us a star to show your appreciation &#xA; &lt;br&gt; üëÅÔ∏è Subscribe for updates&#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#what-is-netlasio&#34;&gt;What is Netlas.io?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#simple-usage-examples&#34;&gt;Simple usage examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#getting-information-about-ip-or-domain&#34;&gt;Getting information about IP or domain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-for-non-latin-domains&#34;&gt;Search for non-latin domains&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#looking-for-websites-that-contain-a-certain-word-in-their-title&#34;&gt;Looking for websites that contain a certain word in their title&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-query-syntax&#34;&gt;Search query syntax&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#filters-fields&#34;&gt;Filters (Fields)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#logical-operators&#34;&gt;Logical operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#ranges&#34;&gt;Ranges&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#wildcards&#34;&gt;Wildcards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#fuzziness&#34;&gt;Fuzzines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#regular-expressions&#34;&gt;Regular expressions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#other-netlasio-search-features&#34;&gt;Other Netlas.io search features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#api-requests&#34;&gt;API requests&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#how-to-find-the-api-key&#34;&gt;How to find the API key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#tools-for-debugging-api-requests&#34;&gt;Tools for debugging API requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#structure-of-netlas-api-json-response&#34;&gt;Structure of Netlas API JSON response&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#tools-for-working-with-data-in-json-format&#34;&gt;Tools for working with data in JSON format&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#netlas-python-library&#34;&gt;Netlas Python Library&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#examples-of-response-keys-for-getting-useful-data&#34;&gt;Examples of response keys for getting useful data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#netlas-python-response-datatypes&#34;&gt;Netlas Python response datatypes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#netlas-cli-tools&#34;&gt;Netlas CLI Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-vs-download-vs-host-methods&#34;&gt;Search vs Downloads vs Host methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#make-requests-with-python-without-netlas-python-library&#34;&gt;Make requests with Python (without Netlas Python Library&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#examples-for-other-programming-languages&#34;&gt;Examples for other programming languages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#nodejs&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#bash&#34;&gt;Bash&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#jq-utility&#34;&gt;JQ Utility&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#ai-tools-for-writing-code&#34;&gt;AI tools for writing code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#code-checkers&#34;&gt;Code checkers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#using-netlasio-for-osint-open-source-intelligence&#34;&gt;Using Netlas.io for OSINT&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-persons-nickname-or-email-in-whois-contacts&#34;&gt;Search person&#39;s nickname or email in WHOIS contacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-persons-nickname-or-email-in-title-and-body-of-web-page&#34;&gt;Search person&#39;s nickname or email in title and body of web page&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-links-to-juicy-info-files-on-subdomains-of-the-companys-website&#34;&gt;Search links to &#34;juicy info files&#34; on subdomains of the company&#39;s website&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#phone-number-mentions-search&#34;&gt;Phone number mentions search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-file-mentions-looking-for-content-that-may-be-infringing-on-copyrights&#34;&gt;Search file mentions (looking for content that may be infringing on copyrights)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#domain-whois-information-gathering&#34;&gt;Domain WHOIS information gathering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-subdomains&#34;&gt;Search subdomains&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-location-in-address-tag&#34;&gt;Search location in &amp;lt;address&amp;gt; tag&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-author-name-in-meta-tags&#34;&gt;Search author name in meta tags&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-by-ftp-servers-banners-text&#34;&gt;Search by FTP server&#39;s banners text&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#using-netlas-as-an-alternative-to-the-wayback-machine&#34;&gt;Using Netlas as an alternative to the WayBack Machine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#using-neltas-for-pentest&#34;&gt;Using Netlas.io for Pentest&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-for-sites-with-specific-vulnerabilities&#34;&gt;Search for sites with specific vulnerabilities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-for-sites-with-vulnerabilities-that-contain-a-certain-word-in-their-descriptions&#34;&gt;Search for sites with vulnerabilities that contain a certain word in their descriptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-by-server-http-header&#34;&gt;Search by server http header&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#default-logins-and-passwords&#34;&gt;Default logins and passwords&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-servers-with-cves-by-favicon-hash&#34;&gt;Search servers with CVEs by favicon hash&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-servers-with-cves-by-tag-name&#34;&gt;Search servers with CVEs by tag name&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-vulnerable-servers-and-devices-near-you-or-any-other-location&#34;&gt;Search vulnerable servers and devices near you (or any other location)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#using-netlasio-for-digital-forensics-and-incident-response&#34;&gt;Using Netlas.io for Digital Forensics and Incident Response&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#smtp-servers-information-gathering&#34;&gt;SMTP servers information gathering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-for-domains-that-could-potentially-be-used-for-phishing&#34;&gt;Search for domains that could potentially be used for phishing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-for-domains-associated-with-a-specific-subnet&#34;&gt;Search for domains associated with a specific subnet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#using-netlasio-for-fun-or-netstalking&#34;&gt;Using Netlas.io for fun or netstalking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#using-netlasio-for-crypto-investigations&#34;&gt;Using Netlas.io for Crypto Investigations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-mining-farms&#34;&gt;Search mining farms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-for-websites-infected-with-cryptominers&#34;&gt;Search for websites infected with cryptominers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#search-vulnerable-bitcoin-nodes&#34;&gt;Search vulnerable Bitcoin nodes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#common-problems&#34;&gt;Common problems&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#error-429---too-frequent-requests&#34;&gt;Error 429 - Too frequent requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#keyerror&#34;&gt;KeyError&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#automation-of-work-with-the-list-of-requests&#34;&gt;Automation of work with the list of requests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/#working-with-very-large-amounts-of-data&#34;&gt;Working with very large amounts of data&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What is Netlas.io?&lt;/h1&gt; &#xA;&lt;p&gt;Search engine to find and analyse information about all IP addresses and domains available on the Internet. Netlas has some attack surface management features, but this guide is focused mostly on Netlas search tools and how to use them in automations.&lt;/p&gt; &#xA;&lt;p&gt;Netlas.io includes several search tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IP/Domain info&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/host/&#34;&gt;‚Üí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Response search&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/responses/&#34;&gt;‚Üí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS search&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/domains/&#34;&gt;‚Üí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IP WHOIS search&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/whois/ip/&#34;&gt;‚Üí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Domain WHOIS search&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/whois/domains/&#34;&gt;‚Üí&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Certificates search&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/certs/&#34;&gt;‚Üí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Surface management tools are in development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Attack Surface Discovery Tool&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/asd/&#34;&gt;‚Üí&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some of the databases collected by Netlas.io can be purchased from the &lt;strong&gt;Datastore&lt;/strong&gt; &lt;a href=&#34;https://app.netlas.io/datastore/&#34;&gt;‚Üí&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also integrate Netlas.io services into your applications using &lt;strong&gt;API&lt;/strong&gt; &lt;a href=&#34;https://netlas.io/api&#34;&gt;‚Üí&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Simple usage examples&lt;/h1&gt; &#xA;&lt;p&gt;Before we get into the technical details, let&#39;s see how &lt;a href=&#34;https://app.netlas.io/&#34;&gt;Netlas.io&lt;/a&gt; works with a few simple examples.&lt;/p&gt; &#xA;&lt;h2&gt;Getting information about IP or domain&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/domain_information_gathering.png&#34; alt=&#34;Domain information gathering&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;https://app.netlas.io/host/netlas.io/&#34;&gt;Netlas.io IP/Domain info&lt;/a&gt; and enter the domain name or IP. The following information will be displayed as a result:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;whois data (registrant, location, emails, phones)&lt;/li&gt; &#xA; &lt;li&gt;related domains&lt;/li&gt; &#xA; &lt;li&gt;MX and NS records&lt;/li&gt; &#xA; &lt;li&gt;exposed ports &amp;amp; software (sometimes additionally displays information about vulnerabilities)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Search for non-latin domains&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/punycode_convert.png&#34; alt=&#34;Punycode convert&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need to find Chinese or other internationalised domain names, then convert them to Punycode. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;domain:*.xn--fiqs8s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can do this with the help of special online tools. For example - &lt;a href=&#34;https://www.charset.org/punycode&#34;&gt;Charset.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Looking for websites that contain a certain word in their title&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/http_title_simple_example.png&#34; alt=&#34;Search by http title&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;https://app.netlas.io/responses/&#34;&gt;Netlas.io response search&lt;/a&gt; and enter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.title:g*thub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.title%3Ag*thub&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will find all servers whose HTTP titles contain the word starts with &#34;g&#34; and ends to &#34;thub&#34;. Read more about using asterisks below.&lt;/p&gt; &#xA;&lt;h1&gt;Search query syntax&lt;/h1&gt; &#xA;&lt;p&gt;Now let&#39;s learn more about how search queries work in &lt;a href=&#34;https://app.netlas.io/&#34;&gt;Netlas.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Netlas.io based on &lt;a href=&#34;https://github.com/elastic/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;, free and open, distributed, RESTful search engine. And the search methods in Netlas.io are very similar to those of other Elasticsearch-based databases.&lt;/p&gt; &#xA;&lt;h2&gt;Filters (Fields)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_filters.png&#34; alt=&#34;Search filters&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Response, DNS, IP and Certificates search allow you to use filters (fields) in search queries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.body:netlas&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.body%3Anetlas&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use this query to find pages which contain the word &#34;netlas&#34; inside their  html tag.&lt;/p&gt; &#xA;&lt;p&gt;A list of available filters for each search type is displayed on the right side of the page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/filters.png&#34; alt=&#34;Filters Mapping Images&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Filters allow you to search for servers based on many different parameters. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;domain&lt;/li&gt; &#xA; &lt;li&gt;ip&lt;/li&gt; &#xA; &lt;li&gt;protocol&lt;/li&gt; &#xA; &lt;li&gt;certificate&lt;/li&gt; &#xA; &lt;li&gt;cve&lt;/li&gt; &#xA; &lt;li&gt;geolocation (city, continent, country, lat and long)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and many others.&lt;/p&gt; &#xA;&lt;h2&gt;Logical operators&lt;/h2&gt; &#xA;&lt;p&gt;You can use multiple filters in a single query and combine them using logical operators AND, OR, NOT. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.title:netlas NOT port:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.title%3Anetlas%20NOT%20port%3A443&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to combine multiple conditions in your query, use parentheses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.title:(netlas OR shodan) NOT port:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nt.ls/OrFOY&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ranges&lt;/h2&gt; &#xA;&lt;p&gt;If you use a numeric value as the value of a field, you can designate it asa value from and to (extreme limits of the value range):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ip:[173.194.222.0 TO 173.194.222.255] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=ip%3A%5B173.194.222.0%20TO%20173.194.222.255%5D%20&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or mark only the upper or only the lower limit of the value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;host:&#34;1.1.1.1&#34; port:&amp;lt;=1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=host%3A%221.1.1.1%22%20port%3A%3C%3D1000&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Wildcards&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t know the exact description of a certain character in your query (for example, you don&#39;t know the exact zone for a domain or the spelling of a name), you can replace it with an asterisk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;domain:google.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=domain%3Agoogle.*&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use question mark:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;domain:google.?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=domain%3Agoogle.%3F&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Asterisk - many symbols, question mark - one symbol.&lt;/p&gt; &#xA;&lt;p&gt;You can also use asterisks in filters. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;\*.banner:database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This query do a search on all banner types simultaneously and replaces several filters: amqp.banner:, ftp.banner:, dns.banner:, telnet.banner:, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Fuzziness&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/fuziness.png&#34; alt=&#34;Fuzzines&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need to search not by exact, but by approximate value of a field (for example, pages whose titles contain all names consonant with Joseph), just add ~ to the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.title:Joseph~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.title%3AJoseph~&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Regular expressions&lt;/h2&gt; &#xA;&lt;p&gt;Regular expressions - it is a sequence of characters that allows you to search for, retrieve and replace pieces of text in a source document that match certain patterns. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;([a-zA-Z0‚Äì9+.&lt;em&gt;-]+@[a-zA-Z0‚Äì9.&lt;/em&gt;-]+.[a-zA-Z0‚Äì9_-]+) - any email address&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;.*?&amp;gt; - any html tag&lt;/li&gt; &#xA; &lt;li&gt;^[+]?[(]?[0-9]{3}[)]?[-\s.]?[0-9]{3}[-\s.]?c{4,6}$ - any phone number&lt;/li&gt; &#xA; &lt;li&gt;^[+]?[(]?[0-9]{3}[)]?[-\s.]?[0-9]{3}[-\s.]?[0-9]{4,6}$ - any Bitcoin address&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information on using regular expressions, see the examples in the Netlas Cookbook (what you&#39;re reading now) and the links below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/regexp-syntax.html&#34;&gt;Regex Syntax Manual in Elasticsearch documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/p/31d31efabd5&#34;&gt;How regular expressions can be useful in OSINT. Theory and some practice using Google Sheets&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Other Netlas.io search features&lt;/h2&gt; &#xA;&lt;h3&gt;Download results&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/download_results.png&#34; alt=&#34;Download results&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can save your results (all or selected fields) in JSON and CSV format to view them in a format you like or automatically analyse them with different tools.&lt;/p&gt; &#xA;&lt;h3&gt;Group results&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/group_results.png&#34; alt=&#34;Group results&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can group results by different field values to speed up the search time. For example, by domain name or geolocation.&lt;/p&gt; &#xA;&lt;h3&gt;Share results&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/share_results.png&#34; alt=&#34;Share results&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can freely share links to search results (no registration is required to open them, unless the user has exceeded the free limit of 50 requests).&lt;/p&gt; &#xA;&lt;h3&gt;Search history&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/request_history.png&#34; alt=&#34;Request history&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also remember that all the quiries you have made can be viewed on your profile page (link in the top right corner).&lt;/p&gt; &#xA;&lt;h1&gt;API requests&lt;/h1&gt; &#xA;&lt;p&gt;Netlas.io&#39;s most important function is to help people conduct cybersecurity research faster and more efficiently. The service has an API (application programming interface) that allows you to automate the execution of various requests.&lt;/p&gt; &#xA;&lt;p&gt;It can be implemented both in simple Python or Bash scripts of a few lines in length and in complex multifunctional applications.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about using the Netlas API in the Netlas Cookbook (what you&#39;re reading now) or in the official documentation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://netlas-api.readthedocs.io/en/latest/&#34;&gt;API Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to find the API-key?&lt;/h2&gt; &#xA;&lt;p&gt;This is the very first place to start with the API. You don&#39;t even have to pay for a subscription (50 requests per day are free). Just go to &lt;a href=&#34;https://app.netlas.io/profile/&#34;&gt;profile page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/profile.png&#34; alt=&#34;Profile page&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tools for debugging API requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/netlas_shema.png&#34; alt=&#34;Netlas shema&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to write scripts or create applications to start using the Netlas API. You can simply test it using our online tool &lt;a href=&#34;https://app.netlas.io/schema&#34;&gt;Netlas schema&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Firstly, click &#34;Authorize&#34; and enter API key. Secondly, select API method, click &#34;Try it out/&#34;, enter search query (and other parameters) and click &#34;Execute&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Netlas scheme is still under development and you may find its analogs designed for testing different APIs more convenient:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reqbin.com/&#34;&gt;Reqbin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://extendsclass.com/rest-client-online.html&#34;&gt;ExtendClass Online Rest Client&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Structure of Netlas API JSON response&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/json_api_response.png&#34; alt=&#34;JSON API response&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Similar to other APIs, the Netlas API response consists of headers and a response body in JSON (JavaScript Object Notation) format. JSON files contain data in key-value format and can be analysed using almost any programming language.&lt;/p&gt; &#xA;&lt;p&gt;If you use Netlas Shema, you can copy or download the response body and view it in any text editor or JSON analyser.&lt;/p&gt; &#xA;&lt;h2&gt;Tools for working with data in JSON format&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/json_evaluator.png&#34; alt=&#34;JSON Eveluator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A little tip that will come in handy when writing code using the Netlas API. In order to understand the structure of a JSON file faster and find the path to get a certain value, use special tools such as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonpath.com&#34;&gt;JSON Path Online Evaluator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsonpathfinder.com&#34;&gt;JSON Path Finder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Netlas Python library&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to automate requests to the Netlas API is to use a specially designed Python library (package).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/netlas-io/netlas-python&#34;&gt;Netlas-Python library Github repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://netlas-python.readthedocs.io/en/latest/&#34;&gt;Netlas Python Library Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s see how it works with a simple example. All code samples from Netlas Cookbook are located in the &lt;strong&gt;scripts&lt;/strong&gt; folder. You can clone this repository and run them on your device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/netlas-io/netlas-cookbook&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you haven&#39;t run a Python scripts before today and don&#39;t know how to do it, you can start by open Netlas CookBook repository in Gitpod. Gitpod is a cloud development environment based on Ubuntu (Linux distribution). Just open this link in your browser (log in with your Github account):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io#https://github.com/netlas-io/netlas-cookbook&#34;&gt;Run Netlas Cookbook in Gitpod&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/netlas_python_example_py.png&#34; alt=&#34;Netlas Github&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install Netlas Python library using pip (package installer for Python). Enter in the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install netlas&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the installation. Enter in the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;netlas --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run netlas_python_example.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python scripts/netlas_python_example.py:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And of course, you can just copy the code and save to files. Here is the code of the first example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `port:7001`&#xA;netlas_query = netlas_connection.query(query=&#34;port:7001&#34;)&#xA;&#xA;# iterate over data and print: IP address, port, path and protocol&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print(f&#34;{response[&#39;data&#39;][&#39;ip&#39;]}:{response[&#39;data&#39;][&#39;port&#39;]}{response[&#39;data&#39;][&#39;path&#39;]} [{response[&#39;data&#39;][&#39;protocol&#39;]}]&#34;)&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples of response keys for getting useful data&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s mentioned above that in order to find JSON patches of API response to get the data you need, you can use special online applications (JSON-evaluators). To make your life even better, here is a small list of examples of Python library response keys that are needed most often.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;&#xA;# Main domain/ip info&#xA;&#xA;response[&#39;data&#39;][&#39;uri&#39;]&#xA;response[&#39;data&#39;][&#39;ip&#39;]&#xA;response[&#39;data&#39;][&#39;http&#39;][&#39;title&#39;]&#xA;response[&#39;data&#39;][&#39;http&#39;][&#39;meta&#39;]&#xA;response[&#39;data&#39;][&#39;http&#39;][&#39;body&#39;]&#xA;&#xA;&#xA;&#xA;# Geo info&#xA;&#xA;&#xA;response[&#39;data&#39;][&#39;geo&#39;][&#39;continent&#39;]&#xA;response[&#39;data&#39;][&#39;geo&#39;][&#39;country&#39;]&#xA;response[&#39;data&#39;][&#39;geo&#39;][&#39;city&#39;]&#xA;response[&#39;data&#39;][&#39;geo&#39;][&#39;location&#39;][&#39;lat&#39;]&#xA;response[&#39;data&#39;][&#39;geo&#39;][&#39;location&#39;][&#39;long&#39;]&#xA;&#xA;&#xA;# Whois geo info&#xA;&#xA;response[&#39;data&#39;][&#39;whois&#39;][&#39;net&#39;][&#39;country&#39;]&#xA;response[&#39;data&#39;][&#39;whois&#39;][&#39;net&#39;][&#39;address&#39;]&#xA;response[&#39;data&#39;][&#39;whois&#39;][&#39;net&#39;][&#39;city&#39;]&#xA;response[&#39;data&#39;][&#39;whois&#39;][&#39;net&#39;][&#39;contacts&#39;][&#39;emails&#39;]&#xA;response[&#39;data&#39;][&#39;whois&#39;][&#39;net&#39;][&#39;contacts&#39;][&#39;phones&#39;]&#xA;&#xA;&#xA;&#xA;# Http status and favicon ico info&#xA;&#xA;response[&#39;data&#39;][&#39;port&#39;]&#xA;response[&#39;data&#39;][&#39;http&#39;][&#39;status_code&#39;]&#xA;response[&#39;data&#39;][&#39;http&#39;][&#39;status_line&#39;]&#xA;response[&#39;data&#39;][&#39;http&#39;][&#39;favicon&#39;][&#39;image&#39;]&#xA;response[&#39;data&#39;][&#39;http&#39;][&#39;favicon&#39;][&#39;path&#39;]&#xA;&#xA;&#xA;# Basic CVE info &#xA;&#xA;response[&#39;data&#39;][&#39;cve&#39;][0][&#39;name&#39;]&#xA;response[&#39;data&#39;][&#39;cve&#39;][0][&#39;description&#39;]&#xA;response[&#39;data&#39;][&#39;cve&#39;][0][&#39;base_score&#39;]&#xA;response[&#39;data&#39;][&#39;cve&#39;][0][&#39;has_exploit&#39;]&#xA;response[&#39;data&#39;][&#39;cve&#39;][0][&#39;exploit_links&#39;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Netlas Python response datatypes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/datatypes.png&#34; alt=&#34;Python Netlas datatypes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When working with the Netlas Python Library, it is very important to correctly specify the type of data you want to retrieve. By default, the response type is returned and many Netlas CookBook examples use it.&lt;/p&gt; &#xA;&lt;p&gt;But for some tasks, like getting whoois information about a domain or searching for domains in a subnet you need to use a different data type. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas_query = netlas_connection.query(query=&#39;a:&#34;163.114.132.0/24&#34;&#39;,datatype=&#34;domain&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you think some query is not returning results when it should - just try changing the value of the &lt;strong&gt;datatype&lt;/strong&gt; parameter. It is very likely that this will help.&lt;/p&gt; &#xA;&lt;p&gt;Now let&#39;s look at examples of what types of data can be retrieved using the Netlas Python Library.&lt;/p&gt; &#xA;&lt;h3&gt;datatype=&#34;response&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Corresponds to the results that can be obtained in &lt;a href=&#34;https://app.netlas.io/responses/&#34;&gt;Netlas Response Search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;last_updated&#34;: &#34;2023-09-23T04:39:09.622Z&#34;,&#xA;    &#34;jarm&#34;: &#34;29d29d15d29d29d21c29d29d29d29d935576741dfb52d851054f608b751a40&#34;,&#xA;    &#34;isp&#34;: &#34;Amazon.com&#34;,&#xA;    &#34;ip&#34;: &#34;15.185.166.67&#34;,&#xA;    &#34;certificate&#34;: {&#xA;        &#34;issuer_dn&#34;: &#34;CN=Amazon RSA 2048 M01, O=Amazon, C=US&#34;,&#xA;        &#34;fingerprint_md5&#34;: &#34;8f4fd5fc8311e5edf02db7ef94eca174&#34;,&#xA;        &#34;chain&#34;: [&#xA;            {&#xA;                &#34;issuer_dn&#34;: &#34;CN=Amazon Root CA 1, O=Amazon, C=US&#34;,&#xA;                &#34;fingerprint_md5&#34;: &#34;943b3cc1d311e06f4e4acbf58f289ad2&#34;,&#xA;                &#34;redacted&#34;: False,&#xA;                &#34;signature&#34;: {&#xA;                    &#34;valid&#34;: False,&#xA;                    &#34;signature_algorithm&#34;: {&#xA;                        &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                        &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                    },&#xA;                    &#34;self_signed&#34;: False,&#xA;                    &#34;value&#34;: &#34;rQDeAgUjLgYyYrRrsZQW5BFA3iv6WcE17+CqjytBudHzhzkAHfI9tadHDAYGxpHzB1cC1O29F8GQmr9IdaIHTzDdSmpCtQ09FcAP/oRbxjyZzFdSsdhuEtWWkpNLlOUH6ImCCGp6NNSeZOE9h2qSkJpjoUv4j7bqNNMFviDC3gbijJ9zi59NOYXKzhk2nYXJnsn4UD+2foih78qEBotQtApcphxE8f3IYUBg8mElqgf0x8JzdeQMC0KNBOVfREiZW3uJgZaniJ1LDWLoBMTX/rTosm3K7MAcvDhbHd+Fzlt640lLbLmn3fQFskmt4cUUa8LM681/1lhpusMgfn+wuA==&#34;,&#xA;                },&#xA;                &#34;subject&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;organization&#34;: [&#34;Amazon&#34;],&#xA;                    &#34;common_name&#34;: [&#34;Amazon RSA 2048 M01&#34;],&#xA;                },&#xA;                &#34;serial_number&#34;: &#34;166129328851546858514271303855646110030630415&#34;,&#xA;                &#34;version&#34;: 3,&#xA;                &#34;issuer&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;organization&#34;: [&#34;Amazon&#34;],&#xA;                    &#34;common_name&#34;: [&#34;Amazon Root CA 1&#34;],&#xA;                },&#xA;                &#34;tbs_noct_fingerprint&#34;: &#34;0706b7e834d90e828da6e11374d1253e9254bd252349fd5cada87040945476b1&#34;,&#xA;                &#34;fingerprint_sha256&#34;: &#34;5338ebec8fb2ac60996126d3e76aa34fd0f3318ac78ebb7ac8f6f1361f484b33&#34;,&#xA;                &#34;extensions&#34;: {&#xA;                    &#34;subject_key_id&#34;: &#34;81b80e638a891218e5fa3b3b50959fe6e5901385&#34;,&#xA;                    &#34;crl_distribution_points&#34;: [&#xA;                        &#34;http://crl.rootca1.amazontrust.com/rootca1.crl&#34;&#xA;                    ],&#xA;                    &#34;certificate_policies&#34;: [{&#34;id&#34;: &#34;2.23.140.1.2.1&#34;}],&#xA;                    &#34;authority_key_id&#34;: &#34;8418cc8534ecbc0c94942e08599cc7b2104e0a08&#34;,&#xA;                    &#34;key_usage&#34;: {&#xA;                        &#34;digital_signature&#34;: True,&#xA;                        &#34;certificate_sign&#34;: True,&#xA;                        &#34;crl_sign&#34;: True,&#xA;                        &#34;value&#34;: 97,&#xA;                    },&#xA;                    &#34;authority_info_access&#34;: {&#xA;                        &#34;issuer_urls&#34;: [&#xA;                            &#34;http://crt.rootca1.amazontrust.com/rootca1.cer&#34;&#xA;                        ],&#xA;                        &#34;ocsp_urls&#34;: [&#34;http://ocsp.rootca1.amazontrust.com&#34;],&#xA;                    },&#xA;                    &#34;basic_constraints&#34;: {&#34;max_path_len&#34;: 0, &#34;is_ca&#34;: True},&#xA;                    &#34;extended_key_usage&#34;: {&#34;client_auth&#34;: True, &#34;server_auth&#34;: True},&#xA;                },&#xA;                &#34;tbs_fingerprint&#34;: &#34;0706b7e834d90e828da6e11374d1253e9254bd252349fd5cada87040945476b1&#34;,&#xA;                &#34;subject_dn&#34;: &#34;CN=Amazon RSA 2048 M01, O=Amazon, C=US&#34;,&#xA;                &#34;fingerprint_sha1&#34;: &#34;2ad974a775f73cbdbbd8f5ac3a49255fa8fb1f8c&#34;,&#xA;                &#34;signature_algorithm&#34;: {&#xA;                    &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                    &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                },&#xA;                &#34;spki_subject_fingerprint&#34;: &#34;84d611e87c488631378a9a9aa87c77cc6b4b34243abf9e46c42113580dac3e27&#34;,&#xA;                &#34;validity&#34;: {&#xA;                    &#34;start&#34;: &#34;2022-08-23T22:21:28Z&#34;,&#xA;                    &#34;length&#34;: 252460800,&#xA;                    &#34;end&#34;: &#34;2030-08-23T22:21:28Z&#34;,&#xA;                },&#xA;                &#34;validation_level&#34;: &#34;DV&#34;,&#xA;            },&#xA;            {&#xA;                &#34;issuer_dn&#34;: &#34;CN=Starfield Services Root Certificate Authority - G2, O=Starfield Technologies\\, Inc., L=Scottsdale, ST=Arizona, C=US&#34;,&#xA;                &#34;fingerprint_md5&#34;: &#34;e865a22aae524d26869af0448d6fd896&#34;,&#xA;                &#34;redacted&#34;: False,&#xA;                &#34;signature&#34;: {&#xA;                    &#34;valid&#34;: False,&#xA;                    &#34;signature_algorithm&#34;: {&#xA;                        &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                        &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                    },&#xA;                    &#34;self_signed&#34;: False,&#xA;                    &#34;value&#34;: &#34;YjdCXLwQtT6LLOkMm2xF4gcAevnFWAu5CIw+7bMlPLVvUOTNNWqnkzSWMiGpSESrnO09tKpzbeR/FoCJbM8oAxiDR3mjEH4wW6w7sGDgd9QIpuEdfF7Au/maeyKdpwAJfqxGF4PcnCZXmTA5YpaP7dreqsXMGz7KQ2hsVxa81Q4gLv7/wmpdLqBKbRRYh5TmOTFffHPLkIhqhBGWJ6bt2YFGpn6jcgAKUj6DiAdjd4lpFw85hdKrCEVN0FE6/V1dN2RMfjCyVSRCnTawXZwXgWHxyvkQAiSr6w10kY17RSlQOYiypok1JR4UakcjMS9cmvqtmg5iUaQqqcT5NJ0hGA==&#34;,&#xA;                },&#xA;                &#34;subject&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;organization&#34;: [&#34;Amazon&#34;],&#xA;                    &#34;common_name&#34;: [&#34;Amazon Root CA 1&#34;],&#xA;                },&#xA;                &#34;serial_number&#34;: &#34;144918191876577076464031512351042010504348870&#34;,&#xA;                &#34;version&#34;: 3,&#xA;                &#34;issuer&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;province&#34;: [&#34;Arizona&#34;],&#xA;                    &#34;organization&#34;: [&#34;Starfield Technologies, Inc.&#34;],&#xA;                    &#34;locality&#34;: [&#34;Scottsdale&#34;],&#xA;                    &#34;common_name&#34;: [&#xA;                        &#34;Starfield Services Root Certificate Authority - G2&#34;&#xA;                    ],&#xA;                },&#xA;                &#34;tbs_noct_fingerprint&#34;: &#34;c95f7b20f6fcd39fd3a07a2e44252423b634fdbe35e1e045d964deea626115cb&#34;,&#xA;                &#34;fingerprint_sha256&#34;: &#34;87dcd4dc74640a322cd205552506d1be64f12596258096544986b4850bc72706&#34;,&#xA;                &#34;extensions&#34;: {&#xA;                    &#34;subject_key_id&#34;: &#34;8418cc8534ecbc0c94942e08599cc7b2104e0a08&#34;,&#xA;                    &#34;crl_distribution_points&#34;: [&#xA;                        &#34;http://crl.rootg2.amazontrust.com/rootg2.crl&#34;&#xA;                    ],&#xA;                    &#34;certificate_policies&#34;: [{&#34;id&#34;: &#34;2.5.29.32.0&#34;}],&#xA;                    &#34;authority_key_id&#34;: &#34;9c5f00dfaa01d7302b3888a2b86d4a9cf2119183&#34;,&#xA;                    &#34;key_usage&#34;: {&#xA;                        &#34;digital_signature&#34;: True,&#xA;                        &#34;certificate_sign&#34;: True,&#xA;                        &#34;crl_sign&#34;: True,&#xA;                        &#34;value&#34;: 97,&#xA;                    },&#xA;                    &#34;authority_info_access&#34;: {&#xA;                        &#34;issuer_urls&#34;: [&#34;http://crt.rootg2.amazontrust.com/rootg2.cer&#34;],&#xA;                        &#34;ocsp_urls&#34;: [&#34;http://ocsp.rootg2.amazontrust.com&#34;],&#xA;                    },&#xA;                    &#34;basic_constraints&#34;: {&#34;is_ca&#34;: True},&#xA;                },&#xA;                &#34;tbs_fingerprint&#34;: &#34;c95f7b20f6fcd39fd3a07a2e44252423b634fdbe35e1e045d964deea626115cb&#34;,&#xA;                &#34;subject_dn&#34;: &#34;CN=Amazon Root CA 1, O=Amazon, C=US&#34;,&#xA;                &#34;fingerprint_sha1&#34;: &#34;06b25927c42a721631c1efd9431e648fa62e1e39&#34;,&#xA;                &#34;signature_algorithm&#34;: {&#xA;                    &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                    &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                },&#xA;                &#34;spki_subject_fingerprint&#34;: &#34;064778d61d47af9b3bf3cbd1dabc44c6575ab14d0be5b08461fc6ebeac97db18&#34;,&#xA;                &#34;validity&#34;: {&#xA;                    &#34;start&#34;: &#34;2015-05-25T12:00:00Z&#34;,&#xA;                    &#34;length&#34;: 713278800,&#xA;                    &#34;end&#34;: &#34;2037-12-31T01:00:00Z&#34;,&#xA;                },&#xA;                &#34;validation_level&#34;: &#34;unknown&#34;,&#xA;            },&#xA;            {&#xA;                &#34;issuer_dn&#34;: &#34;OU=Starfield Class 2 Certification Authority, O=Starfield Technologies\\, Inc., C=US&#34;,&#xA;                &#34;fingerprint_md5&#34;: &#34;c6150925cfea5941ddc7ff2a0a506692&#34;,&#xA;                &#34;redacted&#34;: False,&#xA;                &#34;signature&#34;: {&#xA;                    &#34;valid&#34;: False,&#xA;                    &#34;signature_algorithm&#34;: {&#xA;                        &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                        &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                    },&#xA;                    &#34;self_signed&#34;: False,&#xA;                    &#34;value&#34;: &#34;Ix3jilfKfekXeUzxHlX9zFNuPkcP38ZV8rIENu2AH1PEXTQoa77HVfxn6ss/f5CyM80bWBCCAvj4L/UTYNQFzvGBCMHdp3WXTxi5bd73k5EIun5ALO3B6rt2njMGdx0NCH9T3Rtkq4In8WnVTV6u9KHDdadYRC3yPHCYrLpptpV3fw8xXiz8oIc6R2nweV/0FFSklV4ReBJgJ86fwnf/I1N3Xbr/6lnn28+vkpbvJJo1EHqckcYOfZn2Pxnf9XJU4RWpB1l7g79SLkaMsgBkdhxI09h56G5WzK4sA5DXGTiZ5MoJGVv/B5awqH80Sd9WqfewX+0z7YxHtzADXfQDjA==&#34;,&#xA;                },&#xA;                &#34;subject&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;province&#34;: [&#34;Arizona&#34;],&#xA;                    &#34;organization&#34;: [&#34;Starfield Technologies, Inc.&#34;],&#xA;                    &#34;locality&#34;: [&#34;Scottsdale&#34;],&#xA;                    &#34;common_name&#34;: [&#xA;                        &#34;Starfield Services Root Certificate Authority - G2&#34;&#xA;                    ],&#xA;                },&#xA;                &#34;serial_number&#34;: &#34;12037640545166866303&#34;,&#xA;                &#34;version&#34;: 3,&#xA;                &#34;issuer&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;organization&#34;: [&#34;Starfield Technologies, Inc.&#34;],&#xA;                    &#34;organizational_unit&#34;: [&#xA;                        &#34;Starfield Class 2 Certification Authority&#34;&#xA;                    ],&#xA;                },&#xA;                &#34;tbs_noct_fingerprint&#34;: &#34;8408d5e5010ab8da67eb33a7d79ace944dd0ac103ae6ead3ff30dec571066b03&#34;,&#xA;                &#34;fingerprint_sha256&#34;: &#34;28689b30e4c306aab53b027b29e36ad6dd1dcf4b953994482ca84bdc1ecac996&#34;,&#xA;                &#34;extensions&#34;: {&#xA;                    &#34;subject_key_id&#34;: &#34;9c5f00dfaa01d7302b3888a2b86d4a9cf2119183&#34;,&#xA;                    &#34;crl_distribution_points&#34;: [&#34;http://s.ss2.us/r.crl&#34;],&#xA;                    &#34;certificate_policies&#34;: [{&#34;id&#34;: &#34;2.5.29.32.0&#34;}],&#xA;                    &#34;authority_key_id&#34;: &#34;bf5fb7d1cedd1f86f45b55acdcd710c20ea988e7&#34;,&#xA;                    &#34;key_usage&#34;: {&#xA;                        &#34;digital_signature&#34;: True,&#xA;                        &#34;certificate_sign&#34;: True,&#xA;                        &#34;crl_sign&#34;: True,&#xA;                        &#34;value&#34;: 97,&#xA;                    },&#xA;                    &#34;authority_info_access&#34;: {&#xA;                        &#34;issuer_urls&#34;: [&#34;http://x.ss2.us/x.cer&#34;],&#xA;                        &#34;ocsp_urls&#34;: [&#34;http://o.ss2.us/&#34;],&#xA;                    },&#xA;                    &#34;basic_constraints&#34;: {&#34;is_ca&#34;: True},&#xA;                },&#xA;                &#34;tbs_fingerprint&#34;: &#34;8408d5e5010ab8da67eb33a7d79ace944dd0ac103ae6ead3ff30dec571066b03&#34;,&#xA;                &#34;subject_dn&#34;: &#34;CN=Starfield Services Root Certificate Authority - G2, O=Starfield Technologies\\, Inc., L=Scottsdale, ST=Arizona, C=US&#34;,&#xA;                &#34;fingerprint_sha1&#34;: &#34;9e99a48a9960b14926bb7f3b02e22da2b0ab7280&#34;,&#xA;                &#34;signature_algorithm&#34;: {&#xA;                    &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                    &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                },&#xA;                &#34;spki_subject_fingerprint&#34;: &#34;49d851948bc94134d7b0d7db70db8a471a832fb089a6e2c49c1f41b22d2044b5&#34;,&#xA;                &#34;validity&#34;: {&#xA;                    &#34;start&#34;: &#34;2009-09-02T00:00:00Z&#34;,&#xA;                    &#34;length&#34;: 783279556,&#xA;                    &#34;end&#34;: &#34;2034-06-28T17:39:16Z&#34;,&#xA;                },&#xA;                &#34;validation_level&#34;: &#34;unknown&#34;,&#xA;            },&#xA;        ],&#xA;        &#34;src&#34;: &#34;https://15.185.166.67:443/&#34;,&#xA;        &#34;redacted&#34;: False,&#xA;        &#34;signature&#34;: {&#xA;            &#34;valid&#34;: False,&#xA;            &#34;signature_algorithm&#34;: {&#xA;                &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;            },&#xA;            &#34;self_signed&#34;: False,&#xA;            &#34;value&#34;: &#34;qARBGZAxC9/c0jTpNm8WGjK5ezIuby5bduqHoTNk6qdWVikG0IsL1ccW6AYbljH2rluTo7RCHvsbLhhUc5eWrB3r3fALYEo0denhmIHoMC6KlNfFnq7Ocmo+9WQH1slBdHeYwn/GkDh4Y8TeQRAHxK60kFdGlnIvdqVTRl+FLPdSPmDTXSKBEw3UKFsK4qkKHAz9kzOvYTfh9cPi+1xXvZEoxexKZ797+SkFizaGSMlRZ3vw/H+3u5NEZEci7W7ryUJxcWIEzgEAltiYIehGZgG1vID5yottdqjHLjOUuo1ZWuY4QMa+1dcWAPi4HTnNFwSmuUuurj2MhVF5tUjR7A==&#34;,&#xA;        },&#xA;        &#34;subject&#34;: {&#34;common_name&#34;: [&#34;ecs-t.me-south-1.amazonaws.com&#34;]},&#xA;        &#34;serial_number&#34;: &#34;7594487530256147170481808759715185448&#34;,&#xA;        &#34;version&#34;: 3,&#xA;        &#34;issuer&#34;: {&#xA;            &#34;country&#34;: [&#34;US&#34;],&#xA;            &#34;organization&#34;: [&#34;Amazon&#34;],&#xA;            &#34;common_name&#34;: [&#34;Amazon RSA 2048 M01&#34;],&#xA;        },&#xA;        &#34;tbs_noct_fingerprint&#34;: &#34;f200e84b762cb204f35c2e584d862d4151f55e9eb5f84bd90788a0ee6d6e9bbd&#34;,&#xA;        &#34;fingerprint_sha256&#34;: &#34;e508abebeacadee987d3358d2814704c679ebcd288162daec1b00eed5c67ce24&#34;,&#xA;        &#34;extensions&#34;: {&#xA;            &#34;subject_key_id&#34;: &#34;c04875daafea32cea4b445cd519feba2a6c55abd&#34;,&#xA;            &#34;crl_distribution_points&#34;: [&#34;http://crl.r2m01.amazontrust.com/r2m01.crl&#34;],&#xA;            &#34;certificate_policies&#34;: [{&#34;id&#34;: &#34;2.23.140.1.2.1&#34;}],&#xA;            &#34;authority_key_id&#34;: &#34;81b80e638a891218e5fa3b3b50959fe6e5901385&#34;,&#xA;            &#34;key_usage&#34;: {&#xA;                &#34;digital_signature&#34;: True,&#xA;                &#34;key_encipherment&#34;: True,&#xA;                &#34;value&#34;: 5,&#xA;            },&#xA;            &#34;subject_alt_name&#34;: {&#xA;                &#34;dns_names&#34;: [&#xA;                    &#34;ecs-t.me-south-1.amazonaws.com&#34;,&#xA;                    &#34;*.ecs-t.me-south-1.vpce.amazonaws.com&#34;,&#xA;                ]&#xA;            },&#xA;            &#34;signed_certificate_timestamps&#34;: [&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;7s3QZNXbGs7FXLedtM0TojKHRny87N7DUUhZRnEftZs=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMARjBEAiAOVC948tZX1EOqmn5GZAkWX5bDg+XdAfV1IDGaAn0srAIgLlsYlEa3ASMja81lJ9vdTv51s6rtuxuqGUjaRlS2yBc=&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1679003882,&#xA;                },&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;c9meiRtMlnigIH1HneayxhzQUV5xGSqMa4AQesF3crU=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMASDBGAiEAhozpK/Us5nSLmK8R02khEGty0fs4Om2f7zGb6HZdUI4CIQD52vRjACeRv/R7k8pLmcRv3s/59wFMKBA5bC11746CKA==&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1679003882,&#xA;                },&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;SLDja9qmRzQP5WoC+p0w6xxSActW3SyB2bu/qznYhHM=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMARjBEAiAoDiU/x7FVl+YjFangUrJgJ2GDPH6gr0AIVBU6rPfdmwIgUacvoJQu2yuTniJKRDYBHP16m1N6LwRRiLtkjB8/qho=&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1679003882,&#xA;                },&#xA;            ],&#xA;            &#34;authority_info_access&#34;: {&#xA;                &#34;issuer_urls&#34;: [&#34;http://crt.r2m01.amazontrust.com/r2m01.cer&#34;],&#xA;                &#34;ocsp_urls&#34;: [&#34;http://ocsp.r2m01.amazontrust.com&#34;],&#xA;            },&#xA;            &#34;basic_constraints&#34;: {&#34;is_ca&#34;: False},&#xA;            &#34;extended_key_usage&#34;: {&#34;client_auth&#34;: True, &#34;server_auth&#34;: True},&#xA;        },&#xA;        &#34;tbs_fingerprint&#34;: &#34;3e47d1114cea3de3212384410a358d387c7babf9a900138316e43fd8875f7ddf&#34;,&#xA;        &#34;subject_dn&#34;: &#34;CN=ecs-t.me-south-1.amazonaws.com&#34;,&#xA;        &#34;names&#34;: [&#xA;            &#34;*.ecs-t.me-south-1.vpce.amazonaws.com&#34;,&#xA;            &#34;ecs-t.me-south-1.amazonaws.com&#34;,&#xA;        ],&#xA;        &#34;fingerprint_sha1&#34;: &#34;aabe018d8f41b00c195ccb10d8c0a0b34ade599c&#34;,&#xA;        &#34;signature_algorithm&#34;: {&#34;name&#34;: &#34;SHA256-RSA&#34;, &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;},&#xA;        &#34;spki_subject_fingerprint&#34;: &#34;39312a7565efe0e3bfa6be02ce4c7e5d6e3b635f4f4c0375dd7f6a62bb3776ec&#34;,&#xA;        &#34;validity&#34;: {&#xA;            &#34;start&#34;: &#34;2023-03-16T00:00:00Z&#34;,&#xA;            &#34;length&#34;: 29635199,&#xA;            &#34;end&#34;: &#34;2024-02-21T23:59:59Z&#34;,&#xA;        },&#xA;        &#34;validation_level&#34;: &#34;DV&#34;,&#xA;    },&#xA;    &#34;uri&#34;: &#34;https://15.185.166.67:443/&#34;,&#xA;    &#34;host_type&#34;: &#34;ip&#34;,&#xA;    &#34;prot7&#34;: &#34;http&#34;,&#xA;    &#34;target&#34;: {&#34;ip&#34;: &#34;15.185.166.67&#34;, &#34;type&#34;: &#34;ip&#34;},&#xA;    &#34;ptr&#34;: [&#34;ec2-15-185-166-67.me-south-1.compute.amazonaws.com&#34;],&#xA;    &#34;geo&#34;: {&#xA;        &#34;continent&#34;: &#34;Asia&#34;,&#xA;        &#34;country&#34;: &#34;BH&#34;,&#xA;        &#34;tz&#34;: &#34;Asia/Bahrain&#34;,&#xA;        &#34;location&#34;: {&#34;accuracy&#34;: 1000, &#34;lat&#34;: 26.0333, &#34;long&#34;: 50.55},&#xA;    },&#xA;    &#34;path&#34;: &#34;/&#34;,&#xA;    &#34;protocol&#34;: &#34;https&#34;,&#xA;    &#34;prot4&#34;: &#34;tcp&#34;,&#xA;    &#34;@timestamp&#34;: &#34;2023-09-23T04:39:09.622Z&#34;,&#xA;    &#34;whois&#34;: {&#xA;        &#34;abuse&#34;: &#34;abuse@amazonaws.com&#34;,&#xA;        &#34;related_nets&#34;: [&#xA;            {&#xA;                &#34;country&#34;: &#34;BH&#34;,&#xA;                &#34;address&#34;: &#34;Arcapita Building No. 551, Road 4612, Block 346\nBahrain Bay, Manama Sea Front&#34;,&#xA;                &#34;city&#34;: &#34;Manama&#34;,&#xA;                &#34;created&#34;: &#34;2020-04-15&#34;,&#xA;                &#34;description&#34;: &#34;Amazon Data Services Bahrain&#34;,&#xA;                &#34;range&#34;: &#34;15.185.0.0 - 15.185.255.255&#34;,&#xA;                &#34;handle&#34;: &#34;NET-15-185-0-0-2&#34;,&#xA;                &#34;organization&#34;: &#34;Amazon Data Services Bahrain (AT-9051)&#34;,&#xA;                &#34;name&#34;: &#34;AMAZON-BAH&#34;,&#xA;                &#34;start_ip&#34;: &#34;15.185.0.0&#34;,&#xA;                &#34;net_size&#34;: 65535,&#xA;                &#34;cidr&#34;: [&#34;15.185.0.0/16&#34;],&#xA;                &#34;state&#34;: &#34;PostalCode:&#34;,&#xA;                &#34;postal_code&#34;: &#34;Country:        BH&#34;,&#xA;                &#34;end_ip&#34;: &#34;15.185.255.255&#34;,&#xA;                &#34;updated&#34;: &#34;2021-02-10&#34;,&#xA;                &#34;contacts&#34;: {&#xA;                    &#34;emails&#34;: [&#34;amzn-noc-contact@amazon.com&#34;, &#34;abuse@amazonaws.com&#34;],&#xA;                    &#34;phones&#34;: [&#34;+1-206-555-0000&#34;],&#xA;                },&#xA;            }&#xA;        ],&#xA;        &#34;net&#34;: {&#xA;            &#34;country&#34;: &#34;US&#34;,&#xA;            &#34;address&#34;: &#34;410 Terry Ave N.&#34;,&#xA;            &#34;city&#34;: &#34;Seattle&#34;,&#xA;            &#34;created&#34;: &#34;2021-01-28&#34;,&#xA;            &#34;description&#34;: &#34;Amazon Technologies Inc.&#34;,&#xA;            &#34;range&#34;: &#34;15.179.0.0 - 15.188.255.255&#34;,&#xA;            &#34;handle&#34;: &#34;NET-15-179-0-0-1&#34;,&#xA;            &#34;organization&#34;: &#34;Amazon Technologies Inc. (AT-88-Z)&#34;,&#xA;            &#34;name&#34;: &#34;AT-88-Z&#34;,&#xA;            &#34;start_ip&#34;: &#34;15.179.0.0&#34;,&#xA;            &#34;net_size&#34;: 655359,&#xA;            &#34;cidr&#34;: [&#xA;                &#34;15.179.0.0/16&#34;,&#xA;                &#34;15.180.0.0/14&#34;,&#xA;                &#34;15.184.0.0/14&#34;,&#xA;                &#34;15.188.0.0/16&#34;,&#xA;            ],&#xA;            &#34;state&#34;: &#34;WA&#34;,&#xA;            &#34;postal_code&#34;: &#34;98109&#34;,&#xA;            &#34;end_ip&#34;: &#34;15.188.255.255&#34;,&#xA;            &#34;updated&#34;: &#34;2021-02-10&#34;,&#xA;            &#34;contacts&#34;: {&#xA;                &#34;emails&#34;: [&#xA;                    &#34;aws-rpki-routing-poc@amazon.com&#34;,&#xA;                    &#34;abuse@amazonaws.com&#34;,&#xA;                    &#34;aws-routing-poc@amazon.com&#34;,&#xA;                    &#34;amzn-noc-contact@amazon.com&#34;,&#xA;                ],&#xA;                &#34;phones&#34;: [&#34;+1-206-555-0000&#34;],&#xA;            },&#xA;        },&#xA;        &#34;asn&#34;: {&#xA;            &#34;registry&#34;: &#34;arin&#34;,&#xA;            &#34;number&#34;: [&#34;16509&#34;],&#xA;            &#34;country&#34;: &#34;US&#34;,&#xA;            &#34;name&#34;: &#34;AMAZON-02&#34;,&#xA;            &#34;cidr&#34;: &#34;15.185.0.0/16&#34;,&#xA;            &#34;updated&#34;: &#34;2021-01-28&#34;,&#xA;        },&#xA;    },&#xA;    &#34;port&#34;: 443,&#xA;    &#34;host&#34;: &#34;15.185.166.67&#34;,&#xA;    &#34;iteration&#34;: &#34;8&#34;,&#xA;    &#34;http&#34;: {&#xA;        &#34;headers&#34;: {&#xA;            &#34;date&#34;: [&#34;Sat, 23 Sep 2023 04:39:04 GMT&#34;],&#xA;            &#34;server&#34;: [&#34;Server&#34;],&#xA;            &#34;content_type&#34;: [&#34;text/html&#34;],&#xA;            &#34;connection&#34;: [&#34;keep-alive&#34;],&#xA;            &#34;content_length&#34;: [&#34;565&#34;],&#xA;        },&#xA;        &#34;status_code&#34;: 403,&#xA;        &#34;body_sha256&#34;: &#34;dde8e6ebf3d4b584e943c002257d1882b5fdff8d988dba30479c35cbf3cfe0f9&#34;,&#xA;        &#34;http_version&#34;: {&#34;major&#34;: 1, &#34;minor&#34;: 1, &#34;name&#34;: &#34;HTTP/1.1&#34;},&#xA;        &#34;title&#34;: &#34;403 Forbidden&#34;,&#xA;        &#34;status_line&#34;: &#34;403 Forbidden&#34;,&#xA;        &#34;body&#34;: &#39;&amp;lt;html&amp;gt;\r\n&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;403 Forbidden&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;\r\n&amp;lt;body bgcolor=&#34;white&#34;&amp;gt;\r\n&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;403 Forbidden&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;\r\n&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;Server&amp;lt;/center&amp;gt;\r\n&amp;lt;/body&amp;gt;\r\n&amp;lt;/html&amp;gt;\r\n&amp;lt;!-- a padding to disable MSIE and Chrome friendly error page --&amp;gt;\r\n&amp;lt;!-- a padding to disable MSIE and Chrome friendly error page --&amp;gt;\r\n&amp;lt;!-- a padding to disable MSIE and Chrome friendly error page --&amp;gt;\r\n&amp;lt;!-- a padding to disable MSIE and Chrome friendly error page --&amp;gt;\r\n&amp;lt;!-- a padding to disable MSIE and Chrome friendly error page --&amp;gt;\r\n&amp;lt;!-- a padding to disable MSIE and Chrome friendly error page --&amp;gt;\r\n&#39;,&#xA;        &#34;content_length&#34;: 565,&#xA;    },&#xA;    &#34;scan_date&#34;: &#34;2023-09-22&#34;,&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;datatype=&#34;domain&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Corresponds to the results that can be obtained in &lt;a href=&#34;https://app.netlas.io/domains/&#34;&gt;Netlas DNS search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;a&#34;: [&#xA;        &#34;31.13.66.35&#34;,&#xA;        &#34;157.240.26.35&#34;,&#xA;        &#34;31.13.72.59&#34;,&#xA;        &#34;157.240.221.35&#34;,&#xA;        &#34;157.240.212.35&#34;,&#xA;        &#34;185.60.219.35&#34;,&#xA;        &#34;163.70.128.35&#34;,&#xA;        &#34;89.208.50.56&#34;,&#xA;        &#34;89.208.50.46&#34;,&#xA;        &#34;185.89.218.12&#34;,&#xA;        &#34;31.13.72.36&#34;,&#xA;        &#34;157.240.238.53&#34;,&#xA;        &#34;157.240.28.35&#34;,&#xA;        &#34;31.13.84.36&#34;,&#xA;        &#34;31.13.66.13&#34;,&#xA;        &#34;157.240.252.35&#34;,&#xA;        &#34;188.186.146.207&#34;,&#xA;        &#34;157.240.0.35&#34;,&#xA;        &#34;157.240.234.35&#34;,&#xA;        &#34;157.240.210.35&#34;,&#xA;        &#34;157.240.214.35&#34;,&#xA;    ],&#xA;    &#34;txt&#34;: [&#xA;        &#34;google-site-verification=A2WZWCNQHrGV_TWwKh6KHY90tY0SHZo_RnyMJoDaG0s&#34;,&#xA;        &#34;google-site-verification=wdH5DTJTc9AYNwVunSVFeK0hYDGUIEOGb-RReU6pJlY&#34;,&#xA;        &#34;v=spf1 redirect=_spf.facebook.com&#34;,&#xA;        &#34;google-site-verification=sK6uY9x7eaMoEMfn3OILqwTFYgaNp4llmguKI-C3_iA&#34;,&#xA;        &#34;zoom-domain-verification=a6c90d61-66ec-485c-9f3d-cce7036f01bb&#34;,&#xA;    ],&#xA;    &#34;last_updated&#34;: &#34;2023-09-07T16:31:15.683Z&#34;,&#xA;    &#34;@timestamp&#34;: &#34;2023-09-07T16:31:15.683Z&#34;,&#xA;    &#34;level&#34;: 2,&#xA;    &#34;zone&#34;: &#34;com&#34;,&#xA;    &#34;ns&#34;: [&#xA;        &#34;d.ns.facebook.com&#34;,&#xA;        &#34;a.ns.facebook.com&#34;,&#xA;        &#34;c.ns.facebook.com&#34;,&#xA;        &#34;b.ns.facebook.com&#34;,&#xA;    ],&#xA;    &#34;domain&#34;: &#34;facebook.com&#34;,&#xA;    &#34;mx&#34;: [&#34;smtpin.vvv.facebook.com&#34;],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;datatype=&#34;domain-whois&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Corresponds to the results that can be obtained in &lt;a href=&#34;https://app.netlas.io/whois/domains/&#34;&gt;Netlas Domain Whois Search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;referer&#34;: [&#34;http://id.facebook.org:80/&#34;],&#xA;    &#34;last_updated&#34;: &#34;2023-01-06T05:22:51.401Z&#34;,&#xA;    &#34;isp&#34;: &#34;Facebook&#34;,&#xA;    &#34;ip&#34;: &#34;157.240.222.35&#34;,&#xA;    &#34;certificate&#34;: {&#xA;        &#34;issuer_dn&#34;: &#34;CN=DigiCert SHA2 High Assurance Server CA, OU=www.digicert.com, O=DigiCert Inc, C=US&#34;,&#xA;        &#34;fingerprint_md5&#34;: &#34;98ab77aa62edb573f62de255d57eb7a7&#34;,&#xA;        &#34;chain&#34;: [&#xA;            {&#xA;                &#34;issuer_dn&#34;: &#34;CN=DigiCert High Assurance EV Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US&#34;,&#xA;                &#34;fingerprint_md5&#34;: &#34;aaee5cf8b0d8596d2e0cbe67421cf7db&#34;,&#xA;                &#34;redacted&#34;: False,&#xA;                &#34;signature&#34;: {&#xA;                    &#34;valid&#34;: False,&#xA;                    &#34;signature_algorithm&#34;: {&#xA;                        &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                        &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                    },&#xA;                    &#34;value&#34;: &#34;GIqViQPmbd9c/B1o6kqPg9ZRL41rRBaerGP10m5shJmLqoFxhFvtNE6wt3mSKcwtgGrwjiDheaT+A0cT6vWGyllxffQElmvTWVg9/tMxJVwYOISj5p+C/YxbmDFOzXieGv2Fy0mq8ieLmXL8PqrVQQva1TahvxxuR0l/XtlIfAPZ/YtJoJgmQkDr1pIRpGQKV1TE9R3WAl5rrO7EgJoScvpWk9f/vzCFBjC/C39O/1cFnSTthcMr+6Z1qKwtFu99eSey68KdCwfqqoXTAaMgKEFZQyjSgeOq9ux7O3e2QGKABUFFAe8XBj7ewDObZ9NhLnKH5Gn8EgBXQB5w9R7JtA==&#34;,&#xA;                    &#34;self_signed&#34;: False,&#xA;                },&#xA;                &#34;subject&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;organization&#34;: [&#34;DigiCert Inc&#34;],&#xA;                    &#34;common_name&#34;: [&#34;DigiCert SHA2 High Assurance Server CA&#34;],&#xA;                    &#34;organizational_unit&#34;: [&#34;www.digicert.com&#34;],&#xA;                },&#xA;                &#34;serial_number&#34;: &#34;6489877074546166222510380951761917343&#34;,&#xA;                &#34;version&#34;: 3,&#xA;                &#34;issuer&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;organization&#34;: [&#34;DigiCert Inc&#34;],&#xA;                    &#34;common_name&#34;: [&#34;DigiCert High Assurance EV Root CA&#34;],&#xA;                    &#34;organizational_unit&#34;: [&#34;www.digicert.com&#34;],&#xA;                },&#xA;                &#34;tbs_noct_fingerprint&#34;: &#34;ac5d79b4a1e84b9ea1f7f72b022158540f37c8557fc99f0c08b37f670632a177&#34;,&#xA;                &#34;fingerprint_sha256&#34;: &#34;19400be5b7a31fb733917700789d2f0a2471c0c9d506c0e504c06c16d7cb17c0&#34;,&#xA;                &#34;extensions&#34;: {&#xA;                    &#34;subject_key_id&#34;: &#34;5168ff90af0207753cccd9656462a212b859723b&#34;,&#xA;                    &#34;crl_distribution_points&#34;: [&#xA;                        &#34;http://crl4.digicert.com/DigiCertHighAssuranceEVRootCA.crl&#34;&#xA;                    ],&#xA;                    &#34;certificate_policies&#34;: [&#xA;                        {&#34;cps&#34;: [&#34;https://www.digicert.com/CPS&#34;], &#34;id&#34;: &#34;2.5.29.32.0&#34;}&#xA;                    ],&#xA;                    &#34;key_usage&#34;: {&#xA;                        &#34;digital_signature&#34;: True,&#xA;                        &#34;certificate_sign&#34;: True,&#xA;                        &#34;crl_sign&#34;: True,&#xA;                        &#34;value&#34;: 97,&#xA;                    },&#xA;                    &#34;authority_key_id&#34;: &#34;b13ec36903f8bf4701d498261a0802ef63642bc3&#34;,&#xA;                    &#34;authority_info_access&#34;: {&#xA;                        &#34;ocsp_urls&#34;: [&#34;http://ocsp.digicert.com&#34;]&#xA;                    },&#xA;                    &#34;basic_constraints&#34;: {&#34;max_path_len&#34;: 0, &#34;is_ca&#34;: True},&#xA;                    &#34;extended_key_usage&#34;: {&#34;client_auth&#34;: True, &#34;server_auth&#34;: True},&#xA;                },&#xA;                &#34;tbs_fingerprint&#34;: &#34;ac5d79b4a1e84b9ea1f7f72b022158540f37c8557fc99f0c08b37f670632a177&#34;,&#xA;                &#34;subject_dn&#34;: &#34;CN=DigiCert SHA2 High Assurance Server CA, OU=www.digicert.com, O=DigiCert Inc, C=US&#34;,&#xA;                &#34;fingerprint_sha1&#34;: &#34;a031c46782e6e6c662c2c87c76da9aa62ccabd8e&#34;,&#xA;                &#34;signature_algorithm&#34;: {&#xA;                    &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                    &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                },&#xA;                &#34;spki_subject_fingerprint&#34;: &#34;4d8f65901ef8a23b1210242a5dfc786708a0d4008e7cecd03d4145a1c0834095&#34;,&#xA;                &#34;validity&#34;: {&#xA;                    &#34;start&#34;: &#34;2013-10-22T12:00:00Z&#34;,&#xA;                    &#34;length&#34;: 473385600,&#xA;                    &#34;end&#34;: &#34;2028-10-22T12:00:00Z&#34;,&#xA;                },&#xA;                &#34;validation_level&#34;: &#34;unknown&#34;,&#xA;            }&#xA;        ],&#xA;        &#34;redacted&#34;: False,&#xA;        &#34;src&#34;: &#34;https://id.facebook.org:443/&#34;,&#xA;        &#34;signature&#34;: {&#xA;            &#34;valid&#34;: False,&#xA;            &#34;signature_algorithm&#34;: {&#xA;                &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;            },&#xA;            &#34;value&#34;: &#34;J4KWSqUeBXSNTCAN0TB+tkpGu1GoAszD2KpmS0LXoUWz5ei2qdWQgTx2ev0z8yoDO1cCIM7VO89lazjpyF+XuwyMLnuYs9HfJpnAaeLnfPUY5ZDT+bVmqZY6Kldz5WE3DJHLx8PCpC2doO44NOU6A89HUJ8oOXB3rAXkC9rWaAwsbj0fxyHfv7U4mPMQIcbbK8S1Frj/x2+ti7VgywWZ9YvGY+kFdneSUL1TIrq05yktGmKp0D6lJjHgYUDcP9uOmHlwQcdmQceLjOZsne5F5CLUb5uxDBGvYW6vdyU9ludj5G3q8TxHzT7kA0ZEPXRT2E7zOusOqmk1SFDkqoZKjA==&#34;,&#xA;            &#34;self_signed&#34;: False,&#xA;        },&#xA;        &#34;subject&#34;: {&#xA;            &#34;country&#34;: [&#34;US&#34;],&#xA;            &#34;province&#34;: [&#34;California&#34;],&#xA;            &#34;organization&#34;: [&#34;Facebook, Inc.&#34;],&#xA;            &#34;locality&#34;: [&#34;Menlo Park&#34;],&#xA;            &#34;common_name&#34;: [&#34;*.facebook.com&#34;],&#xA;        },&#xA;        &#34;serial_number&#34;: &#34;19893338216669499980325027031545953435&#34;,&#xA;        &#34;version&#34;: 3,&#xA;        &#34;issuer&#34;: {&#xA;            &#34;country&#34;: [&#34;US&#34;],&#xA;            &#34;organization&#34;: [&#34;DigiCert Inc&#34;],&#xA;            &#34;common_name&#34;: [&#34;DigiCert SHA2 High Assurance Server CA&#34;],&#xA;            &#34;organizational_unit&#34;: [&#34;www.digicert.com&#34;],&#xA;        },&#xA;        &#34;tbs_noct_fingerprint&#34;: &#34;df456e6ceaa34418349216961cc6ecef01376a9e32c33721b1587cbf1c72197e&#34;,&#xA;        &#34;fingerprint_sha256&#34;: &#34;6d3310857228502a97dd41ed65e60b0010fadaf89dd3751f58afb4e7df1a6ab8&#34;,&#xA;        &#34;extensions&#34;: {&#xA;            &#34;subject_key_id&#34;: &#34;4c15f24cbbc260120e4d70080d1bbb5dabe7c2c8&#34;,&#xA;            &#34;crl_distribution_points&#34;: [&#xA;                &#34;http://crl3.digicert.com/sha2-ha-server-g6.crl&#34;,&#xA;                &#34;http://crl4.digicert.com/sha2-ha-server-g6.crl&#34;,&#xA;            ],&#xA;            &#34;certificate_policies&#34;: [&#xA;                {&#34;cps&#34;: [&#34;http://www.digicert.com/CPS&#34;], &#34;id&#34;: &#34;2.23.140.1.2.2&#34;}&#xA;            ],&#xA;            &#34;key_usage&#34;: {&#34;digital_signature&#34;: True, &#34;value&#34;: 1},&#xA;            &#34;authority_key_id&#34;: &#34;5168ff90af0207753cccd9656462a212b859723b&#34;,&#xA;            &#34;subject_alt_name&#34;: {&#xA;                &#34;dns_names&#34;: [&#xA;                    &#34;*.facebook.com&#34;,&#xA;                    &#34;*.facebook.net&#34;,&#xA;                    &#34;*.fbcdn.net&#34;,&#xA;                    &#34;*.fbsbx.com&#34;,&#xA;                    &#34;*.m.facebook.com&#34;,&#xA;                    &#34;*.messenger.com&#34;,&#xA;                    &#34;*.xx.fbcdn.net&#34;,&#xA;                    &#34;*.xy.fbcdn.net&#34;,&#xA;                    &#34;*.xz.fbcdn.net&#34;,&#xA;                    &#34;facebook.com&#34;,&#xA;                    &#34;messenger.com&#34;,&#xA;                ]&#xA;            },&#xA;            &#34;signed_certificate_timestamps&#34;: [&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;6D7Q2j71BjUy51covIlryQPTy9ERa+zraeF3fW0GvW4=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMARzBFAiEAppvmXJDR1evBdQF5iyEXzzrAOcMQW2Fm/i9ViUFXl5MCICZdSiqRejoyhl8uNBBx5v5Cm1Pd85pFJKaDwonWPIZi&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1665797310,&#xA;                },&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;s3N3B+GEUPhjhtYFqdwRCUp5LbFnDAuH3PADDnk2pZo=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMASDBGAiEAwQs698alQANUk0RinrEjZH3TMFrzADwVy0cPTOV/i8UCIQCYAmFDOK3MUylxldqK6AsFmXFYQZUf2Vh6OBf0Hh4eTw==&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1665797310,&#xA;                },&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;tz77JN+cTbp18jnFulj0bF38Qs96nzXEnh0JgSXttJk=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMARzBFAiAlp5VSWNIfuPEqUaJM4KPYDTtV1NKLS9cQCZO+KbwubwIhAOtoFMwjvpXfo0lBEdGLv5Euz/cbvc9Vs0+rxGWKYmyX&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1665797310,&#xA;                },&#xA;            ],&#xA;            &#34;authority_info_access&#34;: {&#xA;                &#34;issuer_urls&#34;: [&#xA;                    &#34;http://cacerts.digicert.com/DigiCertSHA2HighAssuranceServerCA.crt&#34;&#xA;                ],&#xA;                &#34;ocsp_urls&#34;: [&#34;http://ocsp.digicert.com&#34;],&#xA;            },&#xA;            &#34;basic_constraints&#34;: {&#34;is_ca&#34;: False},&#xA;            &#34;extended_key_usage&#34;: {&#34;client_auth&#34;: True, &#34;server_auth&#34;: True},&#xA;        },&#xA;        &#34;tbs_fingerprint&#34;: &#34;5fba091ad7823e298babad2664328d4d0ebe959672360389ba19a1407e729073&#34;,&#xA;        &#34;subject_dn&#34;: &#34;CN=*.facebook.com, O=Facebook\\, Inc., L=Menlo Park, ST=California, C=US&#34;,&#xA;        &#34;names&#34;: [&#xA;            &#34;*.facebook.com&#34;,&#xA;            &#34;*.facebook.net&#34;,&#xA;            &#34;*.fbcdn.net&#34;,&#xA;            &#34;*.fbsbx.com&#34;,&#xA;            &#34;*.m.facebook.com&#34;,&#xA;            &#34;*.messenger.com&#34;,&#xA;            &#34;*.xx.fbcdn.net&#34;,&#xA;            &#34;*.xy.fbcdn.net&#34;,&#xA;            &#34;*.xz.fbcdn.net&#34;,&#xA;            &#34;facebook.com&#34;,&#xA;            &#34;messenger.com&#34;,&#xA;        ],&#xA;        &#34;fingerprint_sha1&#34;: &#34;78e0341711b4390bb75069707980fe5cdeb94010&#34;,&#xA;        &#34;signature_algorithm&#34;: {&#34;name&#34;: &#34;SHA256-RSA&#34;, &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;},&#xA;        &#34;spki_subject_fingerprint&#34;: &#34;c77933d7cb602adcad550d3bd79edf559062f0db42aa575bbb7f82065ff1b81b&#34;,&#xA;        &#34;validity&#34;: {&#xA;            &#34;start&#34;: &#34;2022-10-15T00:00:00Z&#34;,&#xA;            &#34;length&#34;: 7862399,&#xA;            &#34;end&#34;: &#34;2023-01-13T23:59:59Z&#34;,&#xA;        },&#xA;        &#34;validation_level&#34;: &#34;OV&#34;,&#xA;    },&#xA;    &#34;uri&#34;: &#34;https://id.facebook.org:443/&#34;,&#xA;    &#34;host_type&#34;: &#34;domain&#34;,&#xA;    &#34;target&#34;: {&#34;domain&#34;: &#34;id.facebook.org&#34;, &#34;type&#34;: &#34;domain&#34;},&#xA;    &#34;prot7&#34;: &#34;http&#34;,&#xA;    &#34;ptr&#34;: [&#34;edge-star-mini-shv-01-gru1.facebook.com&#34;],&#xA;    &#34;geo&#34;: {&#xA;        &#34;continent&#34;: &#34;South America&#34;,&#xA;        &#34;country&#34;: &#34;BR&#34;,&#xA;        &#34;city&#34;: &#34;Barueri&#34;,&#xA;        &#34;tz&#34;: &#34;America/Sao_Paulo&#34;,&#xA;        &#34;location&#34;: {&#34;accuracy&#34;: 20, &#34;lat&#34;: -23.5111, &#34;long&#34;: -46.8727},&#xA;        &#34;subdivisions&#34;: [&#34;SP&#34;],&#xA;    },&#xA;    &#34;path&#34;: &#34;/&#34;,&#xA;    &#34;protocol&#34;: &#34;https&#34;,&#xA;    &#34;prot4&#34;: &#34;tcp&#34;,&#xA;    &#34;@timestamp&#34;: &#34;2023-01-06T05:22:51.401Z&#34;,&#xA;    &#34;whois&#34;: {&#xA;        &#34;abuse&#34;: &#34;noc@fb.com&#34;,&#xA;        &#34;related_nets&#34;: [],&#xA;        &#34;net&#34;: {&#xA;            &#34;country&#34;: &#34;US&#34;,&#xA;            &#34;address&#34;: &#34;1601 Willow Rd.&#34;,&#xA;            &#34;city&#34;: &#34;Menlo Park&#34;,&#xA;            &#34;created&#34;: &#34;2015-05-14&#34;,&#xA;            &#34;range&#34;: &#34;157.240.0.0 - 157.240.255.255&#34;,&#xA;            &#34;description&#34;: &#34;Facebook, Inc.&#34;,&#xA;            &#34;handle&#34;: &#34;NET-157-240-0-0-1&#34;,&#xA;            &#34;organization&#34;: &#34;Facebook, Inc. (THEFA-3)&#34;,&#xA;            &#34;start_ip&#34;: &#34;157.240.0.0&#34;,&#xA;            &#34;name&#34;: &#34;THEFA-3&#34;,&#xA;            &#34;cidr&#34;: [&#34;157.240.0.0/16&#34;],&#xA;            &#34;net_size&#34;: 65535,&#xA;            &#34;state&#34;: &#34;CA&#34;,&#xA;            &#34;postal_code&#34;: &#34;94025&#34;,&#xA;            &#34;end_ip&#34;: &#34;157.240.255.255&#34;,&#xA;            &#34;updated&#34;: &#34;2021-12-14&#34;,&#xA;            &#34;contacts&#34;: {&#34;emails&#34;: [&#34;noc@fb.com&#34;], &#34;phones&#34;: [&#34;+1-650-543-4800&#34;]},&#xA;        },&#xA;        &#34;asn&#34;: {&#xA;            &#34;country&#34;: &#34;US&#34;,&#xA;            &#34;registry&#34;: &#34;arin&#34;,&#xA;            &#34;number&#34;: [&#34;32934&#34;],&#xA;            &#34;name&#34;: &#34;FACEBOOK&#34;,&#xA;            &#34;cidr&#34;: &#34;157.240.0.0/17&#34;,&#xA;            &#34;updated&#34;: &#34;2015-05-14&#34;,&#xA;        },&#xA;    },&#xA;    &#34;port&#34;: 443,&#xA;    &#34;domain&#34;: [&#xA;        &#34;ns1.facebook.co.za&#34;,&#xA;        &#34;viruses.thefacebook.at&#34;,&#xA;        &#34;www.dreamscancometruefarms.com&#34;,&#xA;        &#34;mongo.facebook.com.br&#34;,&#xA;        &#34;exchange.facebook.com.br&#34;,&#xA;        &#34;vpn.on.fb.me&#34;,&#xA;        &#34;antivirus-free.fquestions.com&#34;,&#xA;        &#34;www.freundes-o.de&#34;,&#xA;        &#34;postmaster.facebook.com&#34;,&#xA;        &#34;yuniskanbur.facebook.de&#34;,&#xA;        &#34;server1.on.fb.me&#34;,&#xA;        &#34;edge-star-mini-shv-01-gru1.facebook.com&#34;,&#xA;        &#34;facebook.com&#34;,&#xA;        &#34;m.fb.me&#34;,&#xA;        &#34;connect.facebook.it&#34;,&#xA;        &#34;wap.facebook.com.br&#34;,&#xA;        &#34;go.facebook.com.br&#34;,&#xA;        &#34;kosuncovered.thefacebook.at&#34;,&#xA;        &#34;hubertperron.facebook.fr&#34;,&#xA;        &#34;id.facebook.org&#34;,&#xA;    ],&#xA;    &#34;host&#34;: &#34;id.facebook.org&#34;,&#xA;    &#34;iteration&#34;: &#34;116&#34;,&#xA;    &#34;http&#34;: {&#xA;        &#34;headers&#34;: {&#xA;            &#34;date&#34;: [&#34;Fri, 06 Jan 2023 05:20:18 GMT&#34;],&#xA;            &#34;content_type&#34;: [&#39;text/html; charset=&#34;utf-8&#34;&#39;],&#xA;            &#34;location&#34;: [&#34;https://www.facebook.com/&#34;],&#xA;            &#34;connection&#34;: [&#34;keep-alive&#34;],&#xA;            &#34;alt_svc&#34;: [&#39;h3=&#34;:443&#34;; ma=86400&#39;],&#xA;            &#34;x_fb_debug&#34;: [&#xA;                &#34;RFWHzJvmFz2VmGnEMEGuUrp++5KjvUp54QMRH/LASEF9AsrEWDXjcn5BhwcElETITZI9y8LYi9ogk41tppPD5w==&#34;&#xA;            ],&#xA;            &#34;content_length&#34;: [&#34;0&#34;],&#xA;        },&#xA;        &#34;status_code&#34;: 302,&#xA;        &#34;http_version&#34;: {&#34;major&#34;: 1, &#34;minor&#34;: 1, &#34;name&#34;: &#34;HTTP/1.1&#34;},&#xA;        &#34;status_line&#34;: &#34;302 Found&#34;,&#xA;    },&#xA;    &#34;scan_date&#34;: &#34;2023-01-03&#34;,&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;datatype=&#34;ip-whois&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Corresponds to the results that can be obtained in &lt;a href=&#34;https://app.netlas.io/whois/ip/&#34;&gt;Netlas IP Whois Search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;last_updated&#34;: &#34;2023-09-29T06:58:14.041Z&#34;,&#xA;    &#34;isp&#34;: &#34;Scaleway&#34;,&#xA;    &#34;ip&#34;: &#34;51.159.153.170&#34;,&#xA;    &#34;ntp&#34;: {&#xA;        &#34;time_response&#34;: {&#xA;            &#34;reference_timestamp&#34;: {&#34;seconds&#34;: 3904958862, &#34;fraction&#34;: 2043133245},&#xA;            &#34;root_delay&#34;: {&#34;seconds&#34;: 0, &#34;fraction&#34;: 1426},&#xA;            &#34;reference_id&#34;: &#34;CsUDEA==&#34;,&#xA;            &#34;root_dispersion&#34;: {&#34;seconds&#34;: 0, &#34;fraction&#34;: 6123},&#xA;            &#34;precision&#34;: -24,&#xA;            &#34;leap_indicator&#34;: 0,&#xA;            &#34;receive_timestamp&#34;: {&#34;seconds&#34;: 3904959379, &#34;fraction&#34;: 929677788},&#xA;            &#34;poll&#34;: 3,&#xA;            &#34;version&#34;: 3,&#xA;            &#34;stratum&#34;: 5,&#xA;            &#34;mode&#34;: 4,&#xA;            &#34;origin_timestamp&#34;: {&#34;seconds&#34;: 0, &#34;fraction&#34;: 0},&#xA;            &#34;transmit_timestamp&#34;: {&#34;seconds&#34;: 3904959379, &#34;fraction&#34;: 929912735},&#xA;        },&#xA;        &#34;banner&#34;: &#34;Version: 3\nTime:\nwall: 216457477\next: 63831567379\nTimeResponse:\nVersion: 3\nMode: 4\nStratum: 5\nPoll: 3\nPrecision: -24\nRootDelay:\nFraction: 1426\nRootDispersion:\nFraction: 6123\nReferenceID: [10, 197, 3, 16]\nReferenceTimestamp:\nSeconds: 3904958862\nFraction: 2043133245\nOriginTimestamp:\nReceiveTimestamp:\nSeconds: 3904959379\nFraction: 929677788\nTransmitTimestamp:\nSeconds: 3904959379\nFraction: 929912735\n&#34;,&#xA;        &#34;time&#34;: &#34;2023-09-29T06:56:19.216457477Z&#34;,&#xA;        &#34;version&#34;: 3,&#xA;    },&#xA;    &#34;uri&#34;: &#34;ntp://51.159.153.170:123&#34;,&#xA;    &#34;host_type&#34;: &#34;ip&#34;,&#xA;    &#34;prot7&#34;: &#34;ntp&#34;,&#xA;    &#34;target&#34;: {&#34;ip&#34;: &#34;51.159.153.170&#34;, &#34;type&#34;: &#34;ip&#34;},&#xA;    &#34;ptr&#34;: [&#34;170-153-159-51.instances.scw.cloud&#34;],&#xA;    &#34;geo&#34;: {&#xA;        &#34;continent&#34;: &#34;Europe&#34;,&#xA;        &#34;country&#34;: &#34;FR&#34;,&#xA;        &#34;city&#34;: &#34;Paris&#34;,&#xA;        &#34;tz&#34;: &#34;Europe/Paris&#34;,&#xA;        &#34;location&#34;: {&#34;accuracy&#34;: 1000, &#34;lat&#34;: 48.8323, &#34;long&#34;: 2.4075},&#xA;        &#34;postal&#34;: &#34;75001&#34;,&#xA;        &#34;subdivisions&#34;: [&#34;IDF&#34;, &#34;75&#34;],&#xA;    },&#xA;    &#34;protocol&#34;: &#34;ntp&#34;,&#xA;    &#34;prot4&#34;: &#34;udp&#34;,&#xA;    &#34;@timestamp&#34;: &#34;2023-09-29T06:58:14.041Z&#34;,&#xA;    &#34;whois&#34;: {&#xA;        &#34;abuse&#34;: &#34;abuse@online.net&#34;,&#xA;        &#34;related_nets&#34;: [&#xA;            {&#xA;                &#34;created&#34;: &#34;2018-03-28T15:59:36Z&#34;,&#xA;                &#34;start_ip&#34;: &#34;51.158.0.0&#34;,&#xA;                &#34;description&#34;: &#34;SCALEWAY\nParis, France&#34;,&#xA;                &#34;range&#34;: &#34;51.158.0.0 - 51.159.255.255&#34;,&#xA;                &#34;net_size&#34;: 131071,&#xA;                &#34;cidr&#34;: [&#34;51.158.0.0/15&#34;],&#xA;                &#34;updated&#34;: &#34;2022-05-03T10:05:58Z&#34;,&#xA;                &#34;end_ip&#34;: &#34;51.159.255.255&#34;,&#xA;            }&#xA;        ],&#xA;        &#34;net&#34;: {&#xA;            &#34;country&#34;: &#34;FR&#34;,&#xA;            &#34;address&#34;: &#34;8 rue de la ville l&#39;eveque 75008 PARIS&#34;,&#xA;            &#34;created&#34;: &#34;2018-02-09T11:38:35Z&#34;,&#xA;            &#34;range&#34;: &#34;51.159.0.0 - 51.159.255.255&#34;,&#xA;            &#34;handle&#34;: &#34;MM42047-RIPE&#34;,&#xA;            &#34;organization&#34;: &#34;Scaleway&#34;,&#xA;            &#34;start_ip&#34;: &#34;51.159.0.0&#34;,&#xA;            &#34;name&#34;: &#34;ONLINENET_DEDICATED_SERVERS&#34;,&#xA;            &#34;net_size&#34;: 65535,&#xA;            &#34;cidr&#34;: [&#34;51.159.0.0/16&#34;],&#xA;            &#34;updated&#34;: &#34;2018-02-28T16:21:55Z&#34;,&#xA;            &#34;end_ip&#34;: &#34;51.159.255.255&#34;,&#xA;            &#34;contacts&#34;: {&#34;persons&#34;: [&#34;Mickael Marchand&#34;], &#34;phones&#34;: [&#34;+33173502000&#34;]},&#xA;        },&#xA;        &#34;asn&#34;: {&#xA;            &#34;number&#34;: [&#34;12876&#34;],&#xA;            &#34;country&#34;: &#34;FR&#34;,&#xA;            &#34;registry&#34;: &#34;ripencc&#34;,&#xA;            &#34;name&#34;: &#34;Online SAS&#34;,&#xA;            &#34;cidr&#34;: &#34;51.158.0.0/15&#34;,&#xA;            &#34;updated&#34;: &#34;1993-09-01&#34;,&#xA;        },&#xA;    },&#xA;    &#34;port&#34;: 123,&#xA;    &#34;host&#34;: &#34;51.159.153.170&#34;,&#xA;    &#34;iteration&#34;: &#34;8&#34;,&#xA;    &#34;scan_date&#34;: &#34;2023-09-22&#34;,&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;datatype=&#34;cert&#34;&lt;/h3&gt; &#xA;&lt;p&gt;Corresponds to the results that can be obtained in &lt;a href=&#34;https://app.netlas.io/certs/&#34;&gt;Netlas Certificates Search&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;last_updated&#34;: &#34;2021-07-24T23:07:33.045Z&#34;,&#xA;    &#34;@timestamp&#34;: &#34;2021-07-24T23:07:33.045Z&#34;,&#xA;    &#34;certificate&#34;: {&#xA;        &#34;issuer_dn&#34;: &#34;CN=Let&#39;s Encrypt Authority X3, O=Let&#39;s Encrypt, C=US&#34;,&#xA;        &#34;fingerprint_md5&#34;: &#34;b1a639dfc20b296dbbfa4d038a25d613&#34;,&#xA;        &#34;chain&#34;: [&#xA;            {&#xA;                &#34;issuer_dn&#34;: &#34;CN=DST Root CA X3, O=Digital Signature Trust Co.&#34;,&#xA;                &#34;fingerprint_md5&#34;: &#34;b15409274f54ad8f023d3b85a5ecec5d&#34;,&#xA;                &#34;redacted&#34;: False,&#xA;                &#34;signature&#34;: {&#xA;                    &#34;valid&#34;: False,&#xA;                    &#34;signature_algorithm&#34;: {&#xA;                        &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                        &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                    },&#xA;                    &#34;self_signed&#34;: False,&#xA;                    &#34;value&#34;: &#34;3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJouM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwuX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlGPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==&#34;,&#xA;                },&#xA;                &#34;subject&#34;: {&#xA;                    &#34;country&#34;: [&#34;US&#34;],&#xA;                    &#34;organization&#34;: [&#34;Let&#39;s Encrypt&#34;],&#xA;                    &#34;common_name&#34;: [&#34;Let&#39;s Encrypt Authority X3&#34;],&#xA;                },&#xA;                &#34;serial_number&#34;: &#34;13298795840390663119752826058995181320&#34;,&#xA;                &#34;version&#34;: 3,&#xA;                &#34;issuer&#34;: {&#xA;                    &#34;organization&#34;: [&#34;Digital Signature Trust Co.&#34;],&#xA;                    &#34;common_name&#34;: [&#34;DST Root CA X3&#34;],&#xA;                },&#xA;                &#34;fingerprint_sha256&#34;: &#34;25847d668eb4f04fdd40b12b6b0740c567da7d024308eb6c2c96fe41d9de218d&#34;,&#xA;                &#34;tbs_noct_fingerprint&#34;: &#34;3e1a1a0f6c53f3e97a492d57084b5b9807059ee057ab1505876fd83fda3db838&#34;,&#xA;                &#34;tbs_fingerprint&#34;: &#34;3e1a1a0f6c53f3e97a492d57084b5b9807059ee057ab1505876fd83fda3db838&#34;,&#xA;                &#34;extensions&#34;: {&#xA;                    &#34;crl_distribution_points&#34;: [&#xA;                        &#34;http://crl.identrust.com/DSTROOTCAX3CRL.crl&#34;&#xA;                    ],&#xA;                    &#34;subject_key_id&#34;: &#34;a84a6a63047dddbae6d139b7a64565eff3a8eca1&#34;,&#xA;                    &#34;certificate_policies&#34;: [&#xA;                        {&#34;id&#34;: &#34;2.23.140.1.2.1&#34;},&#xA;                        {&#xA;                            &#34;cps&#34;: [&#34;http://cps.root-x1.letsencrypt.org&#34;],&#xA;                            &#34;id&#34;: &#34;1.3.6.1.4.1.44947.1.1.1&#34;,&#xA;                        },&#xA;                    ],&#xA;                    &#34;key_usage&#34;: {&#xA;                        &#34;digital_signature&#34;: True,&#xA;                        &#34;certificate_sign&#34;: True,&#xA;                        &#34;crl_sign&#34;: True,&#xA;                        &#34;value&#34;: 97,&#xA;                    },&#xA;                    &#34;authority_key_id&#34;: &#34;c4a7b1a47b2c71fadbe14b9075ffc41560858910&#34;,&#xA;                    &#34;authority_info_access&#34;: {&#xA;                        &#34;issuer_urls&#34;: [&#xA;                            &#34;http://apps.identrust.com/roots/dstrootcax3.p7c&#34;&#xA;                        ],&#xA;                        &#34;ocsp_urls&#34;: [&#34;http://isrg.trustid.ocsp.identrust.com&#34;],&#xA;                    },&#xA;                    &#34;basic_constraints&#34;: {&#34;max_path_len&#34;: 0, &#34;is_ca&#34;: True},&#xA;                },&#xA;                &#34;subject_dn&#34;: &#34;CN=Let&#39;s Encrypt Authority X3, O=Let&#39;s Encrypt, C=US&#34;,&#xA;                &#34;fingerprint_sha1&#34;: &#34;e6a3b45b062d509b3382282d196efe97d5956ccb&#34;,&#xA;                &#34;signature_algorithm&#34;: {&#xA;                    &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                    &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;                },&#xA;                &#34;spki_subject_fingerprint&#34;: &#34;78d2913356ad04f8f362019df6cb4f4f8b003be0d2aa0d1cb37d2fd326b09c9e&#34;,&#xA;                &#34;validity&#34;: {&#xA;                    &#34;length&#34;: 157766400,&#xA;                    &#34;start&#34;: &#34;2016-03-17T16:40:46Z&#34;,&#xA;                    &#34;end&#34;: &#34;2021-03-17T16:40:46Z&#34;,&#xA;                },&#xA;                &#34;validation_level&#34;: &#34;DV&#34;,&#xA;            },&#xA;            {&#xA;                &#34;issuer_dn&#34;: &#34;CN=DST Root CA X3, O=Digital Signature Trust Co.&#34;,&#xA;                &#34;fingerprint_md5&#34;: &#34;410352dc0ff7501b16f0028eba6f45c5&#34;,&#xA;                &#34;redacted&#34;: False,&#xA;                &#34;signature&#34;: {&#xA;                    &#34;valid&#34;: True,&#xA;                    &#34;signature_algorithm&#34;: {&#xA;                        &#34;name&#34;: &#34;SHA1-RSA&#34;,&#xA;                        &#34;oid&#34;: &#34;1.2.840.113549.1.1.5&#34;,&#xA;                    },&#xA;                    &#34;self_signed&#34;: True,&#xA;                    &#34;value&#34;: &#34;oxosmxcAXKke7ihmNzq/g8c/S8MJoJUgXePZWUTSPg0+vYpLoHQfzhCCnHQaHX6YGt3LE0uzIETkkenM/H2l22rl/ub94E7dtwA6tXBJr/Ll6wLx0QKLGcuUOl5IxBgeWBlfHgJa8Azxsa2p3FmGi27pkfWGyvq5ZjOqWVvO4qcWc0fLK8yZsDdIz+NWS/XPDwxyMofG8ES7U3JtQ/UmSJpSZ7dYq/5ndnF42w2iVhQTOSQxhaKoAlowR+HdUAe8AgmQAOtkY2CbFryIyRLm0n2Ri/k9Mo1ltOl8sVd26sW2KDm/FWUcyPZ3lmoKjXcL2JELBI4H2ym2Cu6dgjU1EA==&#34;,&#xA;                },&#xA;                &#34;subject&#34;: {&#xA;                    &#34;organization&#34;: [&#34;Digital Signature Trust Co.&#34;],&#xA;                    &#34;common_name&#34;: [&#34;DST Root CA X3&#34;],&#xA;                },&#xA;                &#34;serial_number&#34;: &#34;91299735575339953335919266965803778155&#34;,&#xA;                &#34;version&#34;: 3,&#xA;                &#34;issuer&#34;: {&#xA;                    &#34;organization&#34;: [&#34;Digital Signature Trust Co.&#34;],&#xA;                    &#34;common_name&#34;: [&#34;DST Root CA X3&#34;],&#xA;                },&#xA;                &#34;fingerprint_sha256&#34;: &#34;0687260331a72403d909f105e69bcf0d32e1bd2493ffc6d9206d11bcd6770739&#34;,&#xA;                &#34;tbs_noct_fingerprint&#34;: &#34;d0b243776a6c10e4485b34ea3e3b3a063f3089770e04a78c8087b7c49d4f98d6&#34;,&#xA;                &#34;tbs_fingerprint&#34;: &#34;d0b243776a6c10e4485b34ea3e3b3a063f3089770e04a78c8087b7c49d4f98d6&#34;,&#xA;                &#34;extensions&#34;: {&#xA;                    &#34;subject_key_id&#34;: &#34;c4a7b1a47b2c71fadbe14b9075ffc41560858910&#34;,&#xA;                    &#34;key_usage&#34;: {&#xA;                        &#34;certificate_sign&#34;: True,&#xA;                        &#34;crl_sign&#34;: True,&#xA;                        &#34;value&#34;: 96,&#xA;                    },&#xA;                    &#34;basic_constraints&#34;: {&#34;is_ca&#34;: True},&#xA;                },&#xA;                &#34;subject_dn&#34;: &#34;CN=DST Root CA X3, O=Digital Signature Trust Co.&#34;,&#xA;                &#34;fingerprint_sha1&#34;: &#34;dac9024f54d8f6df94935fb1732638ca6ad77c13&#34;,&#xA;                &#34;signature_algorithm&#34;: {&#xA;                    &#34;name&#34;: &#34;SHA1-RSA&#34;,&#xA;                    &#34;oid&#34;: &#34;1.2.840.113549.1.1.5&#34;,&#xA;                },&#xA;                &#34;spki_subject_fingerprint&#34;: &#34;ba285dc8432f62fb8979d84c65660dc04e6219bf716c6dc2e4e49bb2dba68612&#34;,&#xA;                &#34;validity&#34;: {&#xA;                    &#34;length&#34;: 662662136,&#xA;                    &#34;start&#34;: &#34;2000-09-30T21:12:19Z&#34;,&#xA;                    &#34;end&#34;: &#34;2021-09-30T14:01:15Z&#34;,&#xA;                },&#xA;                &#34;validation_level&#34;: &#34;unknown&#34;,&#xA;            },&#xA;        ],&#xA;        &#34;redacted&#34;: False,&#xA;        &#34;src&#34;: &#34;https://ct.googleapis.com/logs/argon2019/&#34;,&#xA;        &#34;signature&#34;: {&#xA;            &#34;valid&#34;: False,&#xA;            &#34;signature_algorithm&#34;: {&#xA;                &#34;name&#34;: &#34;SHA256-RSA&#34;,&#xA;                &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;,&#xA;            },&#xA;            &#34;self_signed&#34;: False,&#xA;            &#34;value&#34;: &#34;IgTWRYQiNa4CEjz9f+MCfnS/n638utteo5ena1WziFXdWasUePWXVM1R5sYIiXUUmt1z/34OSFHpisetgRI683OCEZxZDBiRBsN5lXPs/hMcO14Hs9WhWTrrfUckLHgLOXTiFJ/iCrlKJgUo5QzMFOvwm2iQ9GIMQSS94qRoHBI7U4Upu99ffammpj0Ou4YmBPGXmMngyOx3WtK8eCG7kGEsH01ny8sCUnwtNvlwuKrarw5L0vnnAMzazRzoFDx/vC3R2KewwD8j5eYnF9eI7E7KZSK7Q3eEzboxTO2EZkld40/pdzH+o7B3XOzpJQhglJ3B4iuEZ9Zj9CytNAURCw==&#34;,&#xA;        },&#xA;        &#34;subject&#34;: {&#34;common_name&#34;: [&#34;l-t.me&#34;]},&#xA;        &#34;index&#34;: 617433965,&#xA;        &#34;serial_number&#34;: &#34;298806317781126933132565598755589171656545&#34;,&#xA;        &#34;version&#34;: 3,&#xA;        &#34;issuer&#34;: {&#xA;            &#34;country&#34;: [&#34;US&#34;],&#xA;            &#34;organization&#34;: [&#34;Let&#39;s Encrypt&#34;],&#xA;            &#34;common_name&#34;: [&#34;Let&#39;s Encrypt Authority X3&#34;],&#xA;        },&#xA;        &#34;fingerprint_sha256&#34;: &#34;ac3e22f1a55d4db5b66ff6df72ee47cf9c550bc97595f26b6f50a38e38628e2b&#34;,&#xA;        &#34;tbs_noct_fingerprint&#34;: &#34;783f8f2c6844ce3fba97b524e5285b2b4e5f623c18b55d153a0f27087cec67ec&#34;,&#xA;        &#34;tbs_fingerprint&#34;: &#34;9eb431ee59fcd1ebcaaf574d034236786613782891006ac20dac22cb87bae3aa&#34;,&#xA;        &#34;extensions&#34;: {&#xA;            &#34;subject_key_id&#34;: &#34;53b6643e7203a5e5ffd40b9e9d0a049c3ccab86d&#34;,&#xA;            &#34;certificate_policies&#34;: [&#xA;                {&#34;id&#34;: &#34;2.23.140.1.2.1&#34;},&#xA;                {&#xA;                    &#34;cps&#34;: [&#34;http://cps.letsencrypt.org&#34;],&#xA;                    &#34;id&#34;: &#34;1.3.6.1.4.1.44947.1.1.1&#34;,&#xA;                },&#xA;            ],&#xA;            &#34;key_usage&#34;: {&#xA;                &#34;digital_signature&#34;: True,&#xA;                &#34;key_encipherment&#34;: True,&#xA;                &#34;value&#34;: 5,&#xA;            },&#xA;            &#34;authority_key_id&#34;: &#34;a84a6a63047dddbae6d139b7a64565eff3a8eca1&#34;,&#xA;            &#34;subject_alt_name&#34;: {&#34;dns_names&#34;: [&#34;l-t.me&#34;]},&#xA;            &#34;signed_certificate_timestamps&#34;: [&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;b1N2rDHwMRnYmQCkURX/dxUcEdkCwQApBo2yCJo32RM=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMARjBEAiBkCDpebkU6+Grogm0B/IG0aEZhaCcfBIiuiofxTyggbgIgJN0bFWWIWyBYDReAlT8x3qKXu1Kh569eCe/YRTUDUbQ=&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1563184252,&#xA;                },&#xA;                {&#xA;                    &#34;log_id&#34;: &#34;Y/Lbzeg7zCzPC3KEJ1drM6SNYXePvXWmOLHHaFRL2I0=&#34;,&#xA;                    &#34;signature&#34;: &#34;BAMASDBGAiEArAXCIYXcs3ZhPtge9wVdP2lbGJkCBmoo3wMQkaLmcp0CIQDZHZEuyfO9wy/knwfGaIxVEu/+2+DZS7Irzdx5z8ehoA==&#34;,&#xA;                    &#34;version&#34;: 0,&#xA;                    &#34;timestamp&#34;: 1563184252,&#xA;                },&#xA;            ],&#xA;            &#34;authority_info_access&#34;: {&#xA;                &#34;issuer_urls&#34;: [&#34;http://cert.int-x3.letsencrypt.org/&#34;],&#xA;                &#34;ocsp_urls&#34;: [&#34;http://ocsp.int-x3.letsencrypt.org&#34;],&#xA;            },&#xA;            &#34;basic_constraints&#34;: {&#34;is_ca&#34;: False},&#xA;            &#34;extended_key_usage&#34;: {&#34;client_auth&#34;: True, &#34;server_auth&#34;: True},&#xA;        },&#xA;        &#34;subject_dn&#34;: &#34;CN=l-t.me&#34;,&#xA;        &#34;names&#34;: [&#34;l-t.me&#34;],&#xA;        &#34;fingerprint_sha1&#34;: &#34;8dd1c6bb83834846c3518a50bd2de5425b679647&#34;,&#xA;        &#34;signature_algorithm&#34;: {&#34;name&#34;: &#34;SHA256-RSA&#34;, &#34;oid&#34;: &#34;1.2.840.113549.1.1.11&#34;},&#xA;        &#34;spki_subject_fingerprint&#34;: &#34;8c98ec718b8ec4a008524edee0ba9e90e32ef6da97f2eab732004ae0f70de202&#34;,&#xA;        &#34;validity&#34;: {&#xA;            &#34;length&#34;: 7776000,&#xA;            &#34;start&#34;: &#34;2019-07-15T08:50:52Z&#34;,&#xA;            &#34;end&#34;: &#34;2019-10-13T08:50:52Z&#34;,&#xA;        },&#xA;        &#34;validation_level&#34;: &#34;DV&#34;,&#xA;    },&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Netlas CLI Tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/netlas_cli_tools.png&#34; alt=&#34;Netlas cli tools&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use the Netlas Python Library directly from the command line. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.title:johnsmith&#34; -f json &amp;gt;results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simple command searches for all servers that have the word johnsmith in their header, returns the results in JSON format, and stores the results in the resutls.json file.&lt;/p&gt; &#xA;&lt;p&gt;All other features of the Netlas API can be used in the same way. You can learn more about this from the help (-h command) and examples in the Netlas Cookbook (what you are reading now).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: netlas [OPTIONS] COMMAND [ARGS]...&#xA;&#xA;Options:&#xA;  -h, --help  Show this message and exit.&#xA;&#xA;Commands:&#xA;  count           Calculate count of query results.&#xA;  download        Download data.&#xA;  host            Host (ip or domain) information.&#xA;  indices         Get available data indices.&#xA;  profile         Get user profile data.&#xA;  savekey         Save API key to the local system.&#xA;  search (query)  Search query.&#xA;  stat            Get statistics for query.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before running different Netlas CLI Tools commands, save the API key in the settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas savekey YOUR_API_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also have a Github repository with a couple of examples of automating various tasks using bash script and Netlas CLI tools:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/netlas-io/netlas-scripts&#34;&gt;Netlas Scripts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Search vs Download vs Host methods&lt;/h2&gt; &#xA;&lt;p&gt;The Netlas API has many methods, but the most commonly used methods are search and download. They are very similar to each other, but still have some differences.&lt;/p&gt; &#xA;&lt;p&gt;The search method loads one page of results (20 items) at a time and allows a maximum of 200 pages to be loaded (20*200=4000 items). The download method downloads all results (but requires much more resources to execute).&lt;/p&gt; &#xA;&lt;p&gt;There is also a host method that simply returns the most basic information about a particular domain or IP (datatype (like other methods) does not need to be specified):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas host &#34;51.159.153.170&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Make requests with Python (without Netlas Python Library)&lt;/h2&gt; &#xA;&lt;p&gt;You may find it easier in some cases not to use the Netlas Python Library, but to use the standard Python request package, which is familiar to many developers:&lt;/p&gt; &#xA;&lt;p&gt;Enter in the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/python_example.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of python_example.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests&#xA;&#xA;response = requests.get(&#34;https://app.netlas.io/api/domains/?q=ivanov.com&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#34;,{&#39;X-API-Key&#39;: &#39;YOUR API KEY&#39;})&#xA;&#xA;print(response.json())&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But Netlas Python Library is still preferable as it is designed to deal with different problems with query processing (errors, long waits, etc.).&lt;/p&gt; &#xA;&lt;h2&gt;Examples for other programming languages&lt;/h2&gt; &#xA;&lt;p&gt;While we recommend using our Python Library to automate Netlas search, it&#39;s worth noting that the Netlas API can be built into most applications with a wide variety of technology stacks. The main thing is that it should be able to make &lt;strong&gt;REST requests&lt;/strong&gt; and &lt;strong&gt;parse JSON&lt;/strong&gt; data.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples in different popular programming languages.&lt;/p&gt; &#xA;&lt;h3&gt;NodeJS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/netlas_nodejs.png&#34; alt=&#34;Node JS Netlas&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter in the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node scripts/node_example.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Gitpod, you should have &lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/%5Bhttps://nodejs.org/en/download&#34;&gt;NodeJS&lt;/a&gt; installed on your device.&lt;/p&gt; &#xA;&lt;p&gt;Source code of nodejs_example.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;fetch(&#39;https://app.netlas.io/api/domains/?q=ivanov.com&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39;, {&#xA;  headers: {&#xA;      &#34;X-API-Key&#34;: &#34;YOUR_API_KEY&#34;,&#xA;  },&#xA;})&#xA;    .then((response) =&amp;gt; response.text())&#xA;    .then((body) =&amp;gt; {&#xA;        var jsonArray = JSON.parse(body);&#xA;        console.log(jsonArray[&#39;items&#39;][0]);&#xA;    });&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ruby&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/netlas_ruby.png&#34; alt=&#34;Ruby Netlas&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter in the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ruby scripts/ruby_example.rb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not using Gitpod, you should have [Ruby](&lt;a href=&#34;https://www.ruby-lang.org/en/documentation/installation/&#34;&gt;https://go.dev/doc/install&lt;/a&gt; installed on your device.&lt;/p&gt; &#xA;&lt;p&gt;Source code of ruby_example.rb:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;&#xA;require &#39;net/http&#39;&#xA;require &#39;uri&#39;&#xA;require &#39;json&#39;&#xA;&#xA;&#xA;uri = URI(&#34;https://app.netlas.io/api/domains/?q=ivanov.com&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#34;)&#xA;req = Net::HTTP::Get.new(uri)&#xA;req[&#39;X-API-Key&#39;] = &#34;YOUR_API_KEY&#34;&#xA;&#xA;res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == &#39;https&#39;) { |http|&#xA;  http.request(req)&#xA;}&#xA;&#xA;jsonArray = JSON.parse(res.body)&#xA;&#xA;puts jsonArray[&#39;items&#39;][0][&#39;data&#39;][&#39;domain&#39;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bash&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/netlas_bash.png&#34; alt=&#34;Bash Netlas&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enter in the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash scripts/bash_example.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of bash_example.sh:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/domains/?q=ivanov.com&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[0].data.last_updated&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget that &lt;a href=&#34;https://app.netlas.io/schema/&#34;&gt;Netlas Schema&lt;/a&gt; automatically generates sample bash scripts (with curl command) for each request.&lt;/p&gt; &#xA;&lt;h2&gt;JQ Utility&lt;/h2&gt; &#xA;&lt;p&gt;Note that in the example above, the JQ utility was used to extract fields from JSON data.&lt;/p&gt; &#xA;&lt;p&gt;It is sometimes referred to as &#34;like sed for JSON data&#34;. It is a surprisingly handy tool for working with any JSON data. Here are some syntax examples.&lt;/p&gt; &#xA;&lt;p&gt;Print firt item of JSON-array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.items[0] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Print all items of JSON-array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.items[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Print all &#39;data&#39; subitems of first item of JSON-array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.[&#39;items&#39;][0][&#39;data&#39;][]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Print all sub-subitems for each item of JSON-array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.items[].data.technical[]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can read more about JQ here (I recommend paying special attention to data filtering):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jqlang.github.io/jq/&#34;&gt;JQ utility documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AI tools for writing code&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/you_com.png&#34; alt=&#34;You.com&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you encounter any problems when customising the Netlas Cookbook examples, we recommend that you seek help from AI tools for improving and writing code. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chat.openai.com/&#34;&gt;ChatGPT&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://huggingface.co/spaces/codellama/codellama-playground&#34;&gt;Code Llama&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://you.com/&#34;&gt;You.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When working with such services, you just need to describe in words the task you want to solve with the help of code.&lt;/p&gt; &#xA;&lt;h2&gt;Code checkers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/python_code_check.png&#34; alt=&#34;Python code check&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you rework the Netlas Cookbook examples to suit your purposes, you may find that the code will not execute from some errors. Special online tools can help you find and fix them:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://extendsclass.com/python-tester.html&#34;&gt;ExtendsClass Python Tester&lt;/a&gt; &lt;a href=&#34;https://www.pythonchecker.com&#34;&gt;PythonChecker&lt;/a&gt; &lt;a href=&#34;https://snyk.io/code-checker/python/&#34;&gt;Snyk&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to copy your code to third-party services, you can check it for errors on your device using the Pylint (static code analyser):&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pylint/&#34;&gt;Pylint Python Package&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Using Netlas.io for OSINT (Open Source Intelligence)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_flowchart.png&#34; alt=&#34;OSINT Flowchart&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas.io can help you gather data about a domain or company, as well as find mentions of a person (or anyone) in internet.&lt;/p&gt; &#xA;&lt;p&gt;It can also be used to find old versions of web pages (as an analogue of the Wayback Machine).&lt;/p&gt; &#xA;&lt;h2&gt;Search person&#39;s nickname or email in WHOIS contacts&lt;/h2&gt; &#xA;&lt;p&gt;Most often WHOIS data contains only the contact information of the company registering the domains. But sometimes there may be personal contacts of persons of interest. This query will help you find them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This method may require a paid subscription.&lt;/em&gt; &lt;a href=&#34;https://app.netlas.io/plans/&#34;&gt;See the pricing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_email_search.png&#34; alt=&#34;Whois email search example&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;whois.related_nets.contacts.emails:sweetwater&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=whois.related_nets.contacts.emails%3Asweetwater&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;whois.related_nets.contacts.emails:sweetwater*&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=whois.related_nets.contacts.emails%3Asweetwater*&amp;amp;fields=&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: aqkd8L4MR93Tkcaz2UXDXrRleV8Vlvbv&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_email_search_python.png&#34; alt=&#34;Whois email search example Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/whois_email_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/whois_email_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `whois.related_nets.contacts.emails:sweetwater`&#xA;netlas_query = netlas_connection.query(query=&#34;whois.related_nets.contacts.emails:sweetwater*&#34;)&#xA;&#xA;&#xA;# iterate over data and print: URL, Country, Related nets data&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;geo&#39;][&#39;country&#39;])&#xA;    print (response[&#39;data&#39;][&#39;whois&#39;][&#39;related_nets&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search person&#39;s nickname or email in title and body of web page&lt;/h2&gt; &#xA;&lt;p&gt;Netlas allows you to search for mentions of certain words in headings and in the html code of web pages. You can search for words by exact match, by approximate match (see the fuzzy queries section) and replace characters you are not sure of with asterisks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_title_body_search.png&#34; alt=&#34;Title/body search example&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.title:sweetwater OR http.body:sweetwater&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.title%3Asweetwater%20OR%20http.body%3Asweetwater&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.title:sweetwater OR http.body:sweetwater&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=whois.related_nets.contacts.emails%3Asweetwater*&amp;amp;fields=&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_title_body_search_python.png&#34; alt=&#34;Whois email search example Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/title_body_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/title_body_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.title:sweetwater OR http.body:sweetwater`&#xA;netlas_query = netlas_connection.query(query=&#34;http.title:sweetwater OR http.body:sweetwater*&#34;)&#xA;&#xA;&#xA;# iterate over data and print: IP,URL,web page title&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;title&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search links to &#34;juicy info files&#34; on subdomains of the company&#39;s website&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/juicyinfo_search.png&#34; alt=&#34;Juicy info files search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Metagoofil has been a popular tool among OSINT practitioners for many years. It searches Google for document files on a company&#39;s website (pdf, xlsx, docx etc) and analyses their metadata.&lt;/p&gt; &#xA;&lt;p&gt;And what is not indexed by Google can be found with Netlas and then downloaded to your computer and analysed with the &lt;a href=&#34;https://github.com/franckferman/MetaDetective&#34;&gt;MetaDetective&lt;/a&gt; tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uri:*lidl.* AND http.body:pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=uri%3A*lidl.*%20AND%20http.body%3A.pdf&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can replace the uri: filter with domain: and host: (I recommend always comparing the results when using these three filters).&lt;/p&gt; &#xA;&lt;p&gt;You can also search for a wide variety of file extensions, depending on what you want to find. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.body:xls&#xA;http.body:xlsx&#xA;http.body:doc&#xA;http.body:docx&#xA;http.body:ppt&#xA;http.body:pptx&#xA;http.body:mdb&#xA;http.body:csv&#xA;http.body:sql&#xA;http.body:sqlite&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;uri:*lidl.* AND http.body:pdf&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=uri%3A*lidl.*%20AND%20http.body%3Apdf&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;   -H &#39;accept: application/json&#39; \&#xA;   -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.domain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/juicyinfo_search_python.png&#34; alt=&#34;Juicy info search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;p&gt;python scripts/osint/juicyinfo_search.py&lt;/p&gt; &#xA;&lt;p&gt;Source code of scripts/osint/juicyinfo_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `uri:*lidl.* AND http.body:pdf`&#xA;netlas_query = netlas_connection.query(query=&#39;uri:*lidl.* AND http.body:pdf&#39;)&#xA;&#xA;&#xA;# iterate over data and print: uri, body&#xA;for response in netlas_query[&#39;items&#39;]: &#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;body&#39;])&#xA;pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order to automate links to PDF documents from the web page body you can use the Python &lt;a href=&#34;https://docs.python.org/3/library/re.html&#34;&gt;Re&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Phone number mentions search&lt;/h2&gt; &#xA;&lt;p&gt;As with nicknames and emails, you can also look for mentions of a phone number in the code of web pages or WHOIS contact information.&lt;/p&gt; &#xA;&lt;p&gt;We single out this task as a separate example, because searching for a phone number is complicated by the fact that it can be written in different formats.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_phone_number_search.png&#34; alt=&#34;Phone number search example&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.body:1?234?567?89?99 OR http.body:12345678999 OR http.body:1234?5678?999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.body%3A1%3F234%3F567%3F89%3F99%20OR%20http.body%3A12345678999%20OR%20http.body%3A1234%3F5678%3F999&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When making a request, you should take into account the format of telephone number recording, which is accepted in the country, which owns the phone number you are interested in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.body:1?234?567?89?99 OR http.body:12345678999 OR http.body:1234?5678?999&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget that you can search for phone numbers not only in the body of the page, but also in the WHOIS contact information. This can be done using the filter &lt;strong&gt;whois.related_nets.contacts.phones:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=http.body%3A1%3F234%3F567%3F89%3F99%20OR%20http.body%3A12345678999%20OR%20http.body%3A1234%3F5678%3F999&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_phonenumber_search_python.png&#34; alt=&#34;Phone number search example Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/phonenumber_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/phonenumber_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.body:1?234?567?89?99 OR http.body:12345678999 OR http.body:1234?5678?999`&#xA;netlas_query = netlas_connection.query(query=&#34;http.body:1?234?567?89?99 OR http.body:12345678999 OR http.body:1234?5678?999&#34;)&#xA;&#xA;&#xA;# iterate over data and print: ip, url&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search file mentions (looking for content that may be infringing on copyrights)&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s imagine that you are a musician and you want to find all the sites where your tracks are posted. You can do this by searching for pages that mention your name and have links to files with the .mp3 extension.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_file_mentions.png&#34; alt=&#34;Title/body search example&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(http.title:alla OR http.body:alla) AND http.body:*.mp3&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nt.ls/HEhJj&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;(http.title:alla OR http.body:alla) AND http.body:*.mp3&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=(http.title%3Aalla%20OR%20http.body%3Aalla)%20AND%20http.body%3A*.mp3&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; |  jq .items[].data.http.title&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_file_mentions_search_python.png&#34; alt=&#34;File mentions search example Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/file_mentions_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/file_mentions_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `(http.title:alla OR http.body:alla) AND http.body:*.mp3`&#xA;netlas_query = netlas_connection.query(query=&#34;(http.title:alla OR http.body:alla) AND http.body:*.mp3&#34;)&#xA;&#xA;&#xA;# iterate over data and print: IP, URL,web page title&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;title&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Domain WHOIS information gathering&lt;/h2&gt; &#xA;&lt;p&gt;WHOIS is a worldwide public database that stores information about all registered domains in the world.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_whois.png&#34; alt=&#34;Title/body search example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://app.netlas.io/whois/domains/&#34;&gt;WHOIS Domain search&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas host github.com -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/whois_domains/?q=github.com&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; |  jq .items[].data.technical.street&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_whois_search_python.png&#34; alt=&#34;WHOIS example Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/whois_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/whois_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from whois for google.com domain&#xA;netlas_query = netlas_connection.query(query=&#34;google.com&#34;,datatype=&#34;whois-domain&#34;)&#xA;&#xA;&#xA;# iterate over data and print: owner name&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;technical&#39;][&#39;name&#39;])  &#xA;pass&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search subdomains&lt;/h2&gt; &#xA;&lt;p&gt;By using asterisks in search queries, you can find all subdomains of different levels (whose name ends with the name of a particular first-level domain (.com) or second-level domain (google.com).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_subdomain_search.png&#34; alt=&#34;Subdomain search example&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;domain:*.github.com OR host:*.github.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=domain%3A*.github.com%20OR%20host%3A*.github.com&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;domain:*.github.com OR host:*.github.com&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=domain%3A*.github.com%20OR%20host%3A*.github.com&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_subdomain_search_python.png&#34; alt=&#34;Subdomain search example Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/subdomain_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/subdomain_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `domain:*.github.com OR host:*.github.com`&#xA;netlas_query = netlas_connection.query(query=&#34;domain:*.github.com OR host:*.github.com&#34;)&#xA;&#xA;&#xA;# iterate over data and print: ip, url&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search location in &amp;lt;address&amp;gt; tag&lt;/h2&gt; &#xA;&lt;p&gt;&amp;lt;address&amp;gt; tag is located inside the &amp;lt;head&amp;gt; tag of a web page and may contain physical addresses. With a search using this tag, you can find sites associated with a particular street, and sometimes even a particular building.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_contacts_search.png&#34; alt=&#34;Author meta search&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.contacts.address:kirby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.contacts.address%3Akirby&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use http.contacts.email: for email search.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.contacts.address:kirby&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=http.contacts.address%3Akirby&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.http.contacts&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_contacts_search_python.png&#34; alt=&#34;Contacts address search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/contacts_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/contacts_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.contacts.address:kirby`&#xA;netlas_query = netlas_connection.query(query=&#34;http.contacts.address:kirby&#34;)&#xA;&#xA;&#xA;# iterate over data and print: URL, Contacts&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;contacts&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search author name in meta tags&lt;/h2&gt; &#xA;&lt;p&gt;&amp;lt;meta&amp;gt; tags are located inside the &amp;lt;head&amp;gt; tag of a web page and contain the most important keywords, description, miscellaneous service information and the author&#39;s name.&lt;/p&gt; &#xA;&lt;p&gt;Searching for nickname and name/surname by meta tags (http.meta) allows you to find sites associated with a particular person faster than searching the entire html code (http.body).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_author_search.png&#34; alt=&#34;Author meta search&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.meta:nazar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.meta%3Anazar&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.meta:nazar&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=http.meta%3Anazar&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[].data.http.meta&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/osint_author_meta_search_python.png&#34; alt=&#34;Author meta search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/author_meta_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/author_meta_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.meta:nazar`&#xA;netlas_query = netlas_connection.query(query=&#34;http.meta:nazar&#34;)&#xA;&#xA;&#xA;# iterate over data and print: ip, url&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;title&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;meta&#39;])&#xA;    &#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search by FTP server&#39;s banners text&lt;/h2&gt; &#xA;&lt;p&gt;Another important step in finding information about a person or company is to look for its mention in the text of FTP server banners. It is possible that the IP address of the found servers will be the key to finding other sites related to the person or company you are interested in. And in case of very strong luck to find something interesting in the files posted there (if the FTP server is open).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/ftp_banner_search.png&#34; alt=&#34;Search CVE by tag name&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ftp.banner:&#34;Collado&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to search for FTP servers by some other parameter (such as city or IP address range), then use the prot7:ftp filter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=ftp.banner%3A%22Collado%22%20&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#39;ftp.banner:&#34;Collado&#34;&#39; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when double quotes are used in queries, the query itself is written inside single quotes.&lt;/p&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;    &#39;https://app.netlas.io/api/responses/?q=ftp.banner%3A%22Collado%22&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/ftp_banner_search_python.png&#34; alt=&#34;Favicon hash search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/osint/ftp_banner_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/osint/ftp_banner_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `ftp.banner:&#34;Collado&#34;`&#xA;netlas_query = netlas_connection.query(query=&#39;ftp.banner:&#34;Collado&#34;&#39;)&#xA;&#xA;&#xA;# iterate over data and print: IP, URL, ftp banner text&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;ftp&#39;][&#39;banner&#39;])&#xA;   &#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Netlas as an alternative to the WayBack Machine&lt;/h2&gt; &#xA;&lt;p&gt;Archive.org has been used by OSINT specialists to search old versions of websites and social media profiles pages to find now deleted contact and other information.&lt;/p&gt; &#xA;&lt;p&gt;But, unfortunately, archive.org does not save copies of all sites and does not do it very often (for some sites only a couple of times a year or less).&lt;/p&gt; &#xA;&lt;p&gt;But Netlas is saving old versions of sites from 2021 too!&lt;/p&gt; &#xA;&lt;p&gt;Following filters are most often used to search for sites:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.title:&#34;github.com&#34;&#xA;domain:github.com&#xA;host:github.com&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/select_scan.png&#34; alt=&#34;Select scan&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you click on the outermost icon on the right next to the field for entering search queries, you will see a menu for selecting a scan date. You can use it to filter the html codes of sites saved on a specific date.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/response_body_copy.png&#34; alt=&#34;Copy response body&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To see how the site looks, copy the contents of the &#34;body&#34; field (response tab) into any text editor and delete the \t\r\n characters from the html code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/html_viewer.png&#34; alt=&#34;HTML viewer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After that, copy the code into one of the online html promoters, such as &lt;a href=&#34;https://codebeautify.org/htmlviewer&#34;&gt;Code beautify&lt;/a&gt;. Or just save the file in html format and then open it in browser.&lt;/p&gt; &#xA;&lt;h1&gt;Using Netlas.io for Digital Forensics and Incident Response&lt;/h1&gt; &#xA;&lt;p&gt;This section is very difficult to separate from the Netlas for OSINT section, as the queries listed therein will also be useful to those involved in digital forensics.&lt;/p&gt; &#xA;&lt;p&gt;In this section, we describe more &#34;technical&#34; queries that can help, for example, gather information about the technical infrastructure of networks or investigate phishing attacks.&lt;/p&gt; &#xA;&lt;h2&gt;SMTP servers information gathering&lt;/h2&gt; &#xA;&lt;p&gt;SMTP (Simple Mail Transfer Protocol) is a communication protocol that enables to send and receive emails. In most email clients, when viewing emails, the &#34;Show Original&#34; function is available, which allows you to view the address of the SMTP server from which the email was sent.&lt;/p&gt; &#xA;&lt;p&gt;Netlas allows you to get information about an SMTP server as well as about any other IP or domain, as well as to search the text of SMPT banners, which allows you to find servers associated with a particular domain, company or hosting provider.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/smtp_banner_search.png&#34; alt=&#34;SMTP banner search&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;smtp.banner:fornex.cloud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;smtp.banner:fornex.cloud&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=smtp.banner%3Afornex.cloud&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.smtp.banner&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/smtp_banner_search_python.png&#34; alt=&#34;SMTP banner search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/dfir/smtp_banner_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/dfir/smtp_banner_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `smtp.banner:fornex.cloud`&#xA;netlas_query = netlas_connection.query(query=&#34;smtp.banner:fornex.cloud&#34;)&#xA;&#xA;&#xA;# iterate over data and print: SMTP banner, URL, ISP&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;smtp&#39;][&#39;banner&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;isp&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search for domains that could potentially be used for phishing&lt;/h2&gt; &#xA;&lt;p&gt;One of the popular methods of scammers is to use domains that are very similar in spelling to the domains of well-known companies.&lt;/p&gt; &#xA;&lt;p&gt;You can find such domains for a certain company using Netlas and fuzzy search.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/domain_fuzzy_search.png&#34; alt=&#34;Domain fuzzy search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open Whois domain search and enter company domain name + ~. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;domain:facebook.com~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/whois/domains/?q=domain%3Afacebook.com~&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/domain_fuzzy_search_import.png&#34; alt=&#34;Domain fuzzy search import&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After that click on the left icon, select the export file type, file names and the fields you want to save to the file. Click &#34;Download&#34; and wait for a while.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/domain_fuzzy_search_csv.png&#34; alt=&#34;Domain fuzzy search csv&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, you can select the CSV file format and the domain, expiration_date, status fields. Such a table can be conveniently viewed in Excel, Numbers or Google Docs.&lt;/p&gt; &#xA;&lt;h2&gt;Search for domains associated with a specific subnet&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/subnet_search.png&#34; alt=&#34;Subnet search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas domain search allows to get a complete list of domains associated with a specific IP address or range of addresses. Fox example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;a:&#34;163.114.132.0/24&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/domains/?q=a%3A%22163.114.132.0%2F24%22&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;API request example&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search -d domain a:\&#34;163.114.132.0/24\&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/domains/?q=a%3A%22163.114.132.0%2F24%22&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;   -H &#39;accept: application/json&#39; \&#xA;   -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.domain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/subnet_search_python.png&#34; alt=&#34;Subnet search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/dfir/subnet_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/dfir/subnet_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `a:&#34;163.114.132.0/24&#34;`&#xA;netlas_query = netlas_connection.query(query=&#39;a:&#34;163.114.132.0/24&#34;&#39;,datatype=&#34;domain&#34;)&#xA;&#xA;&#xA;# iterate over data and print: domain&#xA;for response in netlas_query[&#39;items&#39;]: &#xA;    print (response[&#39;data&#39;][&#39;domain&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using Neltas for Pentest&lt;/h1&gt; &#xA;&lt;p&gt;Netlas.io allows you to search for sites with many different types of vulnerabilities. This can be done by vulnerability number (CVE-...), the name of the software installed on the server, certain words in page headers, and other parameters.&lt;/p&gt; &#xA;&lt;p&gt;You can track the most recently published CVEs (Common Vulnerabilities and Exposures) on these sites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cvedetails.com/&#34;&gt;CVE Details&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vuldb.com/&#34;&gt;VulDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.opencve.io/cve&#34;&gt;OpenCVE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also regularly post most relevant queries to search vulnerable devices and software on our &lt;a href=&#34;https://twitter.com/Netlas_io&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;https://t.me/netlas&#34;&gt;Telegram&lt;/a&gt; feeds, as well as &lt;a href=&#34;https://github.com/netlas-io/netlas-dorks&#34;&gt;Netlas Dorks&lt;/a&gt; Github repository.&lt;/p&gt; &#xA;&lt;p&gt;In this section, we will simply cover the general principles of searching for sites and servers with vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Search for sites with specific vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/pentest_cve_search.png&#34; alt=&#34;CVE search&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cve.name:CVE-2022-22965&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=cve.name%3ACVE-2022-22965&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;cve.name:CVE-2022-22965&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CVE-2022-22965 - Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/cve-2022-22965&#34;&gt;Details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=http.body%3A1%3F234%3F567%3F89%3F99%20OR%20http.body%3A12345678999%20OR%20http.body%3A1234%3F5678%3F999&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/pentest_cve_search_python.png&#34; alt=&#34;CVE search example Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/pentest/cve_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/pentest/cve_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `cve.name:CVE-2022-22965`&#xA;netlas_query = netlas_connection.query(query=&#34;cve.name:CVE-2022-22965&#34;)&#xA;&#xA;&#xA;# iterate over data and print: ip, url&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search for sites with vulnerabilities that contain a certain word in their descriptions&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t need to investigate servers with a specific type of vulnerability, but just want to see vulnerable servers in a specific group (such as Oracle WebLogic Server or WordPress sites), you can search for them using keywords and the cve.description: filter.&lt;/p&gt; &#xA;&lt;p&gt;To filter out sites that have exploits published for vulnerabilities, use cve.has_exploit:true.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/pentest_cve_description_search.png&#34; alt=&#34;CVE description search&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cve.description:weblogic AND cve.has_exploit:true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=cve.description%3Aweblogic%20AND%20cve.has_exploit%3Atrue&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;cve.description:weblogic AND cve.has_exploit:true&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=cve.description%3Aweblogic%20AND%20cve.has_exploit%3Atrue&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY | jq .items[].data.uri&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/pentest_cve_description_search_python.png&#34; alt=&#34;CVE description search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/pentest/cve_description_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/pentest/cve_description_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `cve.description:weblogic AND cve.has_exploit:true`&#xA;netlas_query = netlas_connection.query(query=&#34;cve.description:weblogic AND cve.has_exploit:true&#34;)&#xA;&#xA;&#xA;# iterate over data and print:  url, first CVE name first CVE description&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;cve&#39;][0][&#39;name&#39;])&#xA;    print (response[&#39;data&#39;][&#39;cve&#39;][0][&#39;description&#39;])&#xA;    &#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search by server http header&lt;/h2&gt; &#xA;&lt;p&gt;This method allows you to find devices manufactured by a specific company.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/server_name_search.png&#34; alt=&#34;Search by server software&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.headers.server:&#34;yawcam&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search YawCam web cams.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.headers.server%3A%22yawcam%22&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#39;http.headers.server:&#34;yawcam&#34;&#39; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when double quotes are used in queries, the query itself is written inside single quotes.&lt;/p&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;     &#39;https://app.netlas.io/api/responses/?q=http.headers.server%3A%22yawcam%22&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/server_name_search_python.png&#34; alt=&#34;Http headers server search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/pentest/server_name_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/pentest/server_name_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.headers.server:&#34;yawcam&#34;`&#xA;netlas_query = netlas_connection.query(query=&#39;http.headers.server:&#34;yawcam&#34;&#39;)&#xA;&#xA;&#xA;# iterate over data and print: IP, URL, server name&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;headers&#39;][&#39;server&#39;])&#xA;  &#xA;   &#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default logins and passwords&lt;/h3&gt; &#xA;&lt;p&gt;One practical application of searching by software name in server headers is to search for devices from a particular vendor. This may be necessary both when searching for devices with specific vulnerabilities and for devices with standard logins and passwords.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/default_passwords.png&#34; alt=&#34;Default passwords&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Standard logins and passwords for different device models can be found in special lists. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.softwaretestinghelp.com/default-router-username-and-password-list/&#34;&gt;Default Router Login Password For Top Router Models (2023 List)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.a1securitycameras.com/blog/default-username-passwords-ip-addresses-for-surveillance-cameras/&#34;&gt;Default Username ‚Äì Password ‚Äì IP Address for Security Cameras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackers-arise.com/post/the-default-passwords-of-nearly-every-ip-camera&#34;&gt;The Default Passwords of Nearly Every IP Camera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://datarecovery.com/rd/default-passwords/&#34;&gt;List of default passwords from Datarecovery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Remember that using standard logins and passwords to log into other people&#39;s systems violates ethics rules and may be illegal in your country.&lt;/p&gt; &#xA;&lt;h2&gt;Search servers with CVEs by favicon hash&lt;/h2&gt; &#xA;&lt;p&gt;One way to find web servers exposed to a particular vulnerability is to search for favicon ico of a particular web server software.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_favicon_hash.png&#34; alt=&#34;Search CVE by favicon hash&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.favicon.hash_sha256:ebaaed8ab7c21856f888117edaf342f6bc10335106ed907f95787b69878d9d9e&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This query search SecurePoint favicon (CVE-2023-22620).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.favicon.hash_sha256%3Aebaaed8ab7c21856f888117edaf342f6bc10335106ed907f95787b69878d9d9e&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.favicon.hash_sha256:ebaaed8ab7c21856f888117edaf342f6bc10335106ed907f95787b69878d9d9e&#34; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;   &#39;https://app.netlas.io/api/responses/?q=http.favicon.hash_sha256%3Aebaaed8ab7c21856f888117edaf342f6bc10335106ed907f95787b69878d9d9e&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_favicon_hash_python.png&#34; alt=&#34;Favicon hash search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/pentest/favicon_hash_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/pentest/favicon_hash_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.favicon.hash_sha256:ebaaed8ab7c21856f888117edaf342f6bc10335106ed907f95787b69878d9d9e`&#xA;netlas_query = netlas_connection.query(query=&#34;http.favicon.hash_sha256:ebaaed8ab7c21856f888117edaf342f6bc10335106ed907f95787b69878d9d9e&#34;)&#xA;&#xA;&#xA;# iterate over data and print: IP,URL,web page title&#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;title&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search servers with CVEs by tag name&lt;/h2&gt; &#xA;&lt;p&gt;To simplify searching across servers running different software, Netlas automatically tags search results with specific tags.&lt;/p&gt; &#xA;&lt;p&gt;Examples of tags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blogs - medium, wordpress, tumblr&lt;/li&gt; &#xA; &lt;li&gt;CDN - google_cloud, cloudflare, keycdn&lt;/li&gt; &#xA; &lt;li&gt;CMS - ucoz, joomla, pyrocms&lt;/li&gt; &#xA; &lt;li&gt;Ecommerce - opencart, magento, wix&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can search by tags using the &#34;tag.name:&#34; filter. You can also search by tag category using the &#34;tag.category:&#34; filter. A list of all available tags and categories is displayed when you click on the icon to the right of the search query entry box on the Netlas homepage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Not all tariff plans support the use of tags, be careful.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Search query example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_tag_name.png&#34; alt=&#34;Search CVE by tag name&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tag.name:&#34;adobe_coldfusion&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This query search Adobe ColdFusion (CVE-2023-26359).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=tag.name%3A%22adobe_coldfusion%22&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#39;tag.name:&#34;adobe_coldfusion&#34;&#39; -f json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when double quotes are used in queries, the query itself is written inside single quotes.&lt;/p&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;    &#39;https://app.netlas.io/api/responses/?q=tag.name%3A%22adobe_coldfusion%22&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39;  \&#xA;  -H &#39;accept: application/json&#39; \&#xA;  -H &#39;X-API-Key: YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_tag_name_python.png&#34; alt=&#34;Favicon hash search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/pentest/search_tag_name.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/pentest/search_tag_name.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `tag.name:&#34;adobe_coldfusion&#34;`&#xA;netlas_query = netlas_connection.query(query=&#39;tag.name:&#34;adobe_coldfusion&#34;&#39;)&#xA;&#xA;&#xA;# iterate over data and print: IP,URL &#xA;for response in netlas_query[&#39;items&#39;]:&#xA;    print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;   &#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search vulnerable servers and devices near you (or any other location)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/cve_location_search.png&#34; alt=&#34;CVE location search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do you want to know how many vulnerable sites and devices are around you? Simply search for all IP addresses that have the CVE field populated in a specific geolocation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;geo.city:London AND cve:*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=geo.city%3ALondon%20AND%20cve%3A*&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use other geolocation filters.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;geo.continent:&#xA;geo.country:&#xA;geo.location:&#xA;geo.location.lat:&#xA;geo.location.long:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;geo.city:London AND cve:*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=geo.city%3ALondon%20AND%20cve%3A*&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;   -H &#39;accept: application/json&#39; \&#xA;   -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.domain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/cve_location_search_python.png&#34; alt=&#34;Location CVE search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;p&gt;python scripts/pentest/cve_location_search.py&lt;/p&gt; &#xA;&lt;p&gt;Source code of scripts/pentest/cve_location_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `geo.city:London AND cve:*`&#xA;netlas_query = netlas_connection.query(query=&#39;geo.city:London AND cve:*&#39;)&#xA;&#xA;&#xA;# iterate over data and print: uri, cve name, location&#xA;for response in netlas_query[&#39;items&#39;]: &#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;cve&#39;][0][&#39;name&#39;])&#xA;    print (response[&#39;data&#39;][&#39;geo&#39;][&#39;city&#39;])&#xA;pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using Netlas.io for fun or netstalking&lt;/h1&gt; &#xA;&lt;p&gt;Netlas, like many other search engines, can be used without any specific purpose, and just explore with its help unexplored corners of the Internet, hoping to find something interesting there.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples of search queries that will help you find what Google can&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;Search by text of Telnet servers banners (yes, they&#39;re still alive!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;telnet.banner:library&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/telnet_banner.png&#34; alt=&#34;Telnet banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Search by text of FTP servers banners:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ftp.banner:*library*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search for links to books and documents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.body:*rowling*pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search for links to music and video:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.body:*cats*mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search for links to torrents file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.body:*cats*mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that Netlas does not censor the content it stores in its database in any way. If you find something illegal or immoral, you should complain to the hosting provider whose contacts are listed in the domain information.&lt;/p&gt; &#xA;&lt;h1&gt;Using Netlas.io for Crypto Investigations&lt;/h1&gt; &#xA;&lt;p&gt;Netlas provides a great opportunity for researchers who specialise in cryptocurrency crime.&lt;/p&gt; &#xA;&lt;p&gt;Firstly, it can be used to search for references to wallet addresses and transaction numbers.&lt;/p&gt; &#xA;&lt;p&gt;Second, it can be used to search for vulnerable mining farms, nodes and other servers associated with crypto infrastructure.&lt;/p&gt; &#xA;&lt;h2&gt;Search mining farms&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_mining_farms.png&#34; alt=&#34;Search mining farms&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Antminer mining farms, which were first released by Bitmain back in 2013, are one of the most popular line of mining farm models in the world. You can find them by the presence of the word &#34;antMiner&#34; in the www_authenticate header.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.headers.www_authenticate:antMiner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.netlas.io/responses/?q=http.headers.www_authenticate%3AantMiner&amp;amp;page=1&amp;amp;indices=&#34;&gt;Try in Netlas&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also search for other types of mining farms. For examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.headers.www_authenticate:XMR-Stak-Miner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Experiment by combining different filters, the words &#34;miner/mining&#34; and cryptocurrency names.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.headers.www_authenticate:antMiner&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;  &#39;https://app.netlas.io/api/responses/?q=http.headers.www_authenticate%3AantMiner&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;   -H &#39;accept: application/json&#39; \&#xA;   -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/maining_farms_search_python.png&#34; alt=&#34;Maining farms search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/crypto/maining_farms_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/crypto/maining_farms_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.headers.www_authenticate:antMiner`&#xA;netlas_query = netlas_connection.query(query=&#39;http.headers.www_authenticate:antMiner&#39;)&#xA;&#xA;&#xA;# iterate over data and print: uri, http headers&#xA;for response in netlas_query[&#39;items&#39;]: &#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;http&#39;][&#39;headers&#39;])&#xA;&#xA;pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search for websites infected with cryptominers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_sites_injected_with_miners.png&#34; alt=&#34;Search website injected with miners&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Coinhive, a service that allows websites (mostly hacked) to use their visitor&#39;s computers to mine cryptocurrencies, is shutting down in 2019. But nevertheless, links to it are still embedded in many sites around the world. Let&#39;s try to find them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http.body:coinhive.min.js domain:*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we use the domain:* filter to find sites specifically, not all devices.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, you can search for sites infected with other cryptominers (as well as other malicious code that executes on the user&#39;s side).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;http.body:coinhive.min.js domain:*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;   &#39;https://app.netlas.io/api/responses/?q=http.body%3Acoinhive.min.js%20domain%3A*&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;   -H &#39;accept: application/json&#39; \&#xA;   -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_sites_injected_with_miners_python.png&#34; alt=&#34;Maining farms search Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/crypto/search_sites_injected_with_miners.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/crypto/search_sites_injected_with_miners.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `http.body:coinhive.min.js domain:*`&#xA;netlas_query = netlas_connection.query(query=&#39;http.body:coinhive.min.js domain:*&#39;)&#xA;&#xA;&#xA;# iterate over data and print: uri&#xA;for response in netlas_query[&#39;items&#39;]: &#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;&#xA;pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search vulnerable Bitcoin nodes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_bitcoin_nodes.png&#34; alt=&#34;Search bitcoin nodes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bitcoin nodes use port 8333 for TCP connection. Therefore, it is easy to find them using the &#34;port:&#34; search filter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;port:8333 cve:*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we use the &#34;cve:*&#34; filter to look for servers with vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;API request example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Netlas CLI Tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;netlas search &#34;port:8333 cve:*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -X &#39;GET&#39; \&#xA;    &#39;https://app.netlas.io/api/responses/?q=port%3A8333%20cve%3A*&amp;amp;source_type=include&amp;amp;start=0&amp;amp;fields=*&#39; \&#xA;   -H &#39;accept: application/json&#39; \&#xA;   -H &#39;X-API-Key: &#39;YOUR_API_KEY&#39; | jq .items[].data.uri&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Code example (Netlas Python Library)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/search_bitcoin_nodes_python.png&#34; alt=&#34;Search bitcoin nodes Python&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/crypto/search_bitcoin_nodes.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/crypto/search_bitcoin_nodes.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;# retrieve data from responses by query `port:8333 cve:*`&#xA;netlas_query = netlas_connection.query(query=&#39;port:8333 cve:*&#39;)&#xA;&#xA;&#xA;# iterate over data and print: uri, CVE name and description&#xA;for response in netlas_query[&#39;items&#39;]: &#xA;    print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;    print (response[&#39;data&#39;][&#39;cve&#39;][0][&#39;name&#39;])&#xA;    print (response[&#39;data&#39;][&#39;cve&#39;][0][&#39;description&#39;])&#xA;&#xA;pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Common problems&lt;/h1&gt; &#xA;&lt;h2&gt;Error 429 - Too frequent requests&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/request_limit.png&#34; alt=&#34;Request limit&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your application includes multiple requests to the Netlas API, you may encounter this error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#39;detail&#39;: &#39;Request was throttled. Expected available in 1 second.&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One way to solve this problem is to use special Python libraries to configure time limits on query execution, such as &lt;a href=&#34;https://pypi.org/project/ratelimit/&#34;&gt;Limiter Package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of its use in code (limit of no more than 60 requests per minute). First, install package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install ratelimit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run scripts/common_problems/rate_limit.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import netlas&#xA;from ratelimit import limits&#xA;&#xA;# One call - one second&#xA;@limits(calls=1, period=1)&#xA;def netlas_query():&#xA;     apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;     # create new connection to Netlas&#xA;     netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;     # retrieve data from responses by query `cve.description:weblogic AND cve.has_exploit:true`&#xA;     netlas_query = netlas_connection.query(query=&#34;cve.description:weblogic AND cve.has_exploit:true&#34;)&#xA;&#xA;&#xA;     # iterate over data and print:  url, first CVE name first CVE description&#xA;     for response in netlas_query[&#39;items&#39;]:&#xA;        print (response[&#39;data&#39;][&#39;uri&#39;])&#xA;        print (response[&#39;data&#39;][&#39;cve&#39;][0][&#39;name&#39;])&#xA;        print (response[&#39;data&#39;][&#39;cve&#39;][0][&#39;description&#39;])&#xA;&#xA;pass&#xA;&#xA;netlas_query()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar packages exist for other popular programming languages, as exceeding the request limit is a very common problem when working with almost most APIs.&lt;/p&gt; &#xA;&lt;p&gt;If you really need to make more than one enquiry per second, you can write to the sales team to solve your problem on a case-by-case basis - &lt;strong&gt;&lt;a href=&#34;mailto:sales@netlas.io&#34;&gt;sales@netlas.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;KeyError&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/key_error.png&#34; alt=&#34;Key error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another common problem is the lack of a specific key in response for some servers. For example, [&#39;data&#39;][&#39;http&#39;][&#39;title&#39;] is quite often missing.&lt;/p&gt; &#xA;&lt;p&gt;If the key is missing, the script stops executing. Standard error handling will help to avoid this. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;try:&#xA;       print (response[&#39;data&#39;][&#39;http&#39;][&#39;title&#39;])&#xA;    except:&#xA;        print (&#34;no title&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Automation of work with the list of requests&lt;/h2&gt; &#xA;&lt;p&gt;The main advantage of working with Netlas Python or the Netlas API versus just typing queries in the web version of Netlas.io is that you can save a tremendous amount of time typing one-size-fits-all queries. For example, you can quickly gather information about a long list of domains using very simple Python code.&lt;/p&gt; &#xA;&lt;p&gt;Run in command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/common_problems/domains_list_search.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source code of scripts/common_problems/domains_list_search.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import netlas&#xA;&#xA;apikey = &#34;YOUR_API_KEY&#34;&#xA;&#xA;# create new connection to Netlas&#xA;netlas_connection = netlas.Netlas(api_key=apikey)&#xA;&#xA;&#xA;# read file domains.txt line by line&#xA;with open(&#34;scripts/common_problems/domains.txt&#34;) as f:&#xA;    # save each line to domain variable&#xA;    for domain in f:&#xA;         # retrieve data from responses by query `domain:domainname`&#xA;         netlas_query = netlas_connection.query(query=&#34;domain:&#34;+domain,datatype=&#34;domain-whois&#34;)&#xA;&#xA;&#xA;         # iterate over data and print:  ip, isp&#xA;         for response in netlas_query[&#39;items&#39;]:&#xA;             print (response[&#39;data&#39;][&#39;ip&#39;])&#xA;             print (response[&#39;data&#39;][&#39;isp&#39;])&#xA;        &#xA;         pass&#xA;    pass&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, you can work with a list of certificates, IP addresses, emails and whatever else you want.&lt;/p&gt; &#xA;&lt;h2&gt;Working with very large amounts of data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/images/datastore.png&#34; alt=&#34;Datastore&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a really big challenge ahead of you. For example, you need to collect data on hundreds of thousands of domains, then perhaps a more rational solution in terms of time and financial costs will be to buy a dataset (csv/json) and work with it on your own server.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://app.netlas.io/datastore/&#34;&gt;Netlas Datastore&lt;/a&gt; you can find:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Known domain names dataset (1,949,838,161 items)&lt;/li&gt; &#xA; &lt;li&gt;Forward DNS dataset (1,949,838,161 items)&lt;/li&gt; &#xA; &lt;li&gt;Known PTR records (1,135,524,997 items) - FREE&lt;/li&gt; &#xA; &lt;li&gt;Top 1,000,000 most common subdomains&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and more.&lt;/p&gt; &#xA;&lt;h2&gt;To be contininued... Stay tuned!&lt;/h2&gt; &#xA;&lt;p&gt;Want to know about Netlas Cookbook updates?&lt;/p&gt; &#xA;&lt;p&gt;üëÅÔ∏è Subscribe for updates&lt;/p&gt; &#xA;&lt;p&gt;‚≠êÔ∏è Give us a star to show your appreciation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Netlas_io&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/netlas&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://netlas.medium.com/&#34;&gt;Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/company/netlas-io/&#34;&gt;Linkedin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Many thanks &lt;a href=&#34;https://twitter.com/cyb_detective&#34;&gt;@cyb_detective&lt;/a&gt; for help (&lt;a href=&#34;https://cybdetective.com&#34;&gt;https://cybdetective.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.creativecommons.org/l/zero/1.0/88x31.png&#34; alt=&#34;cc license&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This work is licensed under a &lt;a href=&#34;https://raw.githubusercontent.com/netlas-io/netlas-cookbook/main/LICENSE.md&#34;&gt;CC0 1.0 Universal&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RsaCtfTool/RsaCtfTool</title>
    <updated>2023-10-31T01:35:04Z</updated>
    <id>tag:github.com,2023-10-31:/RsaCtfTool/RsaCtfTool</id>
    <link href="https://github.com/RsaCtfTool/RsaCtfTool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RSA attack tool (mainly for ctf) - retreive private key from weak public key and/or uncipher data&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;RsaCtfTool&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/RsaCtfTool/RsaCtfTool/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/RsaCtfTool/RsaCtfTool/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/RsaCtfTool/RsaCtfTool/workflows/lint_python/badge.svg?sanitize=true&#34; alt=&#34;lint_python&#34;&gt; &lt;img src=&#34;https://github.com/RsaCtfTool/RsaCtfTool/workflows/CodeQL/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt; &lt;a href=&#34;https://github.com/RsaCtfTool/RsaCtfTool/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/RsaCtfTool/RsaCtfTool.svg?sanitize=true&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/RsaCtfTool/RsaCtfTool/network&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/RsaCtfTool/RsaCtfTool.svg?sanitize=true&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RsaCtfTool/RsaCtfTool/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/RsaCtfTool/RsaCtfTool.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RsaCtfTool/RsaCtfTool&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/RsaCtfTool/RsaCtfTool.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/RsaCtfTool/RsaCtfTool/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/RsaCtfTool/RsaCtfTool.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The RSA Multi-Attack Tool is a sophisticated utility designed to uncipher data from weak public keys and attempt to recover the corresponding private key. This tool offers a comprehensive range of attack options, enabling users to apply various strategies to crack the encryption. RSA security, at its core, relies on the complexity of the integer factorization problem. This project serves as a valuable resource by combining multiple integer factorization algorithms, effectively enhancing the overall decryption capabilities. Please note that this tool is primarily intended for educational purposes. It is essential to manage your expectations, as not every key can be broken within a reasonable timeframe. The complexity of the encryption algorithm may present significant challenges. It is essential to highlight that the tool exclusively supports the RSA textbook semiprime composite modulus rather than composite multiprimes. This constraint is embedded upstream in the pycrypto library (see TODO). While this limitation exists, the tool still offers a powerful set of features for attacking RSA keys with semiprime composite modulus.&lt;/p&gt; &#xA;&lt;p&gt;For an advanced integer factorization tool please use &lt;a href=&#34;https://github.com/radii/msieve&#34;&gt;msieve&lt;/a&gt;, &lt;a href=&#34;https://github.com/bbuhrow/yafu.git&#34;&gt;yafu&lt;/a&gt;, or &lt;a href=&#34;https://gitlab.inria.fr/cado-nfs/cado-nfs&#34;&gt;cado-nfs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This tool is meant for educational purposes. For those participating in CTFs, please do the following first:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Learn the basics of RSA math and understand number theory, modular arithmetic, integer factorization, and the fundamental theorem of arithmetic.&lt;/li&gt; &#xA; &lt;li&gt;Read the code in this repository to understand what it does and how it works, and suggest improvements by sending pull requests.&lt;/li&gt; &#xA; &lt;li&gt;Avoid copy-pasting and running the tool without understanding the underlying math, as knowing the math is more valuable than knowing how to run the tool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We hope this tool enhances your understanding of RSA encryption and serves as a valuable resource for exploring the intricacies of integer factorization. Use it responsibly and within the bounds of applicable laws and regulations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attacks provided:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Attacks that don&#39;t depend on the factorization of integers (may depend on knowing n,e,ciphertext,etc...):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Wiener%27s_attack&#34;&gt;Wiener&#39;s attack&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Hastad&#39;s attack (Small public exponent)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://staff.emu.edu.tr/alexanderchefranov/Documents/CMSE491/Fall2019/BonehIEEETIT2000%20Cryptanalysis%20of%20RSA.pdf&#34;&gt;Boneh Durfee Method when the private exponent d is too small compared to the modulus (i.e., d &amp;lt; n^0.292)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Same n, huge e&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Chinese_remainder_theorem&#34;&gt;Small CRT exponent&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Common factor between ciphertext and modulus&lt;/li&gt; &#xA;   &lt;li&gt;Partial q&lt;/li&gt; &#xA;   &lt;li&gt;Partial d&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lattice_reduction&#34;&gt;Simple lattice reduction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Strict Integer factorization methods (only depends on knowing n):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Weak public key factorization&lt;/li&gt; &#xA;   &lt;li&gt;Small q (q &amp;lt; 100,000)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fermat%27s_factorization_method&#34;&gt;Fermat&#39;s factorization for close p and q&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Gimmicky Primes method&lt;/li&gt; &#xA;   &lt;li&gt;Past CTF Primes method&lt;/li&gt; &#xA;   &lt;li&gt;Non-RSA key in the form b^x, where b is the prime&lt;/li&gt; &#xA;   &lt;li&gt;Common factor attacks across multiple keys&lt;/li&gt; &#xA;   &lt;li&gt;Small fractions method when p/q is close to a small fraction&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lenstra_elliptic-curve_factorization&#34;&gt;Elliptic Curve Method&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pollard%27s_p_%E2%88%92_1_algorithm&#34;&gt;Pollards p-1 for relatively smooth numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Mersenne primes factorization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://factordb.com/&#34;&gt;Factordb&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20220525193825/https://grocid.net/2017/09/16/finding-close-prime-factorizations/&#34;&gt;Londahl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Noveltyprimes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.cs.ou.edu/~qcheng/paper/speint.pdf&#34;&gt;Qicheng&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;binary polynomial factoring&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Euler_method&#34;&gt;Euler method&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pollard%27s_rho_algorithm&#34;&gt;Pollard Rho&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.wolframalpha.com/&#34;&gt;Wolfram alpha&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Z3_Theorem_Prover&#34;&gt;Z3 theorem prover&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Primorial&#34;&gt;Primorial pm1 gcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Mersenne_prime&#34;&gt;Mersenne Numbers pm1 gcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Factorial&#34;&gt;Factorial pm1 gcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://oeis.org/wiki/Compositorial&#34;&gt;Compositorial pm1 gcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fermat_number&#34;&gt;Fermat Numbers gcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_sequence&#34;&gt;Fibonacci Numbers gcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;System primes gcd&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Shanks%27s_square_forms_factorization&#34;&gt;Shanks&#39;s square forms factorization (SQUFOF)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ROCA_vulnerability&#34;&gt;Return of Coppersmith&#39;s Attack (ROCA) with NECA variant&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dixon%27s_factorization_method&#34;&gt;Dixon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;brent (Pollard rho variant)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pisano_period&#34;&gt;Pisano Period&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;XYXZ form integer factorization where P prime &amp;gt; X^Y and Q prime &amp;gt; X^Z&lt;/li&gt; &#xA;   &lt;li&gt;High and Low Bits Equal&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Williams%27s_p_%2B_1_algorithm&#34;&gt;Williams p+1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://wrap.warwick.ac.uk/54707/1/WRAP_Hart_S1446788712000146a.pdf&#34;&gt;Hart algorithm (similar to Fermat)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lehmer_sieve&#34;&gt;Lehmer machine (similar to Fermat)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;2PN special form where P is prime &amp;gt; 2 and sqrt(2PN) is close to (Pp + 2q)/2&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fermat%27s_factorization_method&#34;&gt;Kraitchik algorithm (an improvement over Fermat)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Lehman algorithm improvement over Fermat&lt;/li&gt; &#xA;   &lt;li&gt;Carmichael algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Quadratic_sieve&#34;&gt;Quadratic sieve&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Shor%27s_algorithm&#34;&gt;Classical part of Shor algorithm&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lucas_number&#34;&gt;Lucas Numbers gcd&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://opendata.rapid7.com/sonar.ssl/&#34;&gt;Rapid7 gcd prime dataset&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;usage: RsaCtfTool.py [-h] [--publickey PUBLICKEY] [--output OUTPUT] [--timeout TIMEOUT] [--createpub] [--dumpkey] [--ext] [--uncipherfile UNCIPHERFILE] [--uncipher UNCIPHER]&#xA;                     [--verbosity {CRITICAL,ERROR,WARNING,DEBUG,INFO}] [--private] [--tests] [--ecmdigits ECMDIGITS] [-n N] [-p P] [-q Q] [-e E] [--key KEY]&#xA;                     [--password PASSWORD] [--show-factors SHOW_FACTORS]&#xA;                     [--attack {SQUFOF,XYXZ,binary_polinomial_factoring,brent,comfact_cn,cube_root,ecm,ecm2,factordb,fermat_numbers_gcd,fibonacci_gcd,highandlowbitsequal,mersenne_pm1_gcd,mersenne_primes,neca,nonRSA,noveltyprimes,pastctfprimes,pisano_period,pollard_p_1,primorial_pm1_gcd,qicheng,roca,siqs,small_crt_exp,smallfraction,smallq,system_primes_gcd,wolframalpha,wiener,boneh_durfee,euler,pollard_rho,williams_pp1,partial_q,partial_d,londahl,z3_solver,dixon,lehmer,fermat,hart,common_factors,common_modulus,same_n_huge_e,hastads,lattice,lehman,carmichael,qs,classical_shor,all} [{SQUFOF,XYXZ,binary_polinomial_factoring,brent,comfact_cn,cube_root,ecm,ecm2,factordb,fermat_numbers_gcd,fibonacci_gcd,highandlowbitsequal,mersenne_pm1_gcd,mersenne_primes,neca,nonRSA,noveltyprimes,pastctfprimes,pisano_period,pollard_p_1,primorial_pm1_gcd,qicheng,roca,siqs,small_crt_exp,smallfraction,smallq,system_primes_gcd,wolframalpha,wiener,boneh_durfee,euler,pollard_rho,williams_pp1,partial_q,partial_d,londahl,z3_solver,dixon,lehmer,fermat,hart,common_factors,common_modulus,same_n_huge_e,hastads,lattice,lehman,carmichael,qs,classical_shor,factorial_pm1_gcd,lucas_gcd,all} ...]]&#xA;                     [--sendtofdb] [--isconspicuous] [--isroca] [--convert_idrsa_pub] [--check_publickey] [--partial]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mode 1 : Attack RSA (specify --publickey or n and e)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;publickey : public rsa key to crack. You can import multiple public keys with wildcards.&lt;/li&gt; &#xA; &lt;li&gt;uncipher : cipher message to decrypt&lt;/li&gt; &#xA; &lt;li&gt;private : display private rsa key if recovered&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mode 2 : Create a Public Key File Given n and e (specify --createpub)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;n : modulus&lt;/li&gt; &#xA; &lt;li&gt;e : public exponent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Mode 3 : Dump the public and/or private numbers (optionally including CRT parameters in extended mode) from a PEM/DER format public or private key (specify --dumpkey)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;key : the public or private key in PEM or DER format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Uncipher file&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --publickey ./key.pub --uncipherfile ./ciphered\_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Print private key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --publickey ./key.pub --private&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attempt to break multiple public keys with common factor attacks or individually- use quotes around wildcards to stop bash expansion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --publickey &#34;*.pub&#34; --private&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Optionally send the results back to factordb&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --publickey &#34;*.pub&#34; --private --sendtofdb&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Generate a public key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --createpub -n 7828374823761928712873129873981723...12837182 -e 65537&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dump the parameters from a key&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --dumpkey --key ./key.pub&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Check a given private key for conspicuousness&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --key examples/conspicuous.priv --isconspicuous&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Factor with ECM when you know the approximate length in digits of a prime&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --publickey key.pub --ecmdigits 25 --verbose --private&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more examples, look at the test.sh file&lt;/p&gt; &#xA;&lt;h3&gt;Attack private keys with partial bits of Q known&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --attack partial_q --key examples/masked.pem&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Attack private keys with partial bits of D known&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --attack partial_d --key examples/partial_d.pem&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Convert idrsa.pub to pem format&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --convert_idrsa_pub --publickey $HOME/.ssh/id_rsa.pub&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Check if a given key or keys are roca&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./RsaCtfTool.py --isroca --publickey &#34;examples/*.pub&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull rsactftool/rsactftool&#xA;docker run -it --rm -v $PWD:/data rsactftool/rsactftool &amp;lt;arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Virtual environment run&lt;/h3&gt; &#xA;&lt;p&gt;Setup the venv&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;virtualenv venv&#xA;source venv/bin/activate&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source venv/bin/activate&#xA;./RsaCtfTool.py &amp;lt;arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python3.9&lt;/li&gt; &#xA; &lt;li&gt;GMPY2&lt;/li&gt; &#xA; &lt;li&gt;PyCrypto&lt;/li&gt; &#xA; &lt;li&gt;Requests&lt;/li&gt; &#xA; &lt;li&gt;Libnum&lt;/li&gt; &#xA; &lt;li&gt;SageMath : optional but advisable&lt;/li&gt; &#xA; &lt;li&gt;Sage binaries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ubuntu 18.04 and Kali specific Instructions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/RsaCtfTool/RsaCtfTool.git&#xA;sudo apt-get install libgmp3-dev libmpc-dev&#xA;cd RsaCtfTool&#xA;pip3 install -r &#34;requirements.txt&#34;&#xA;./RsaCtfTool.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fedora (33 and above) specific Instructions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/RsaCtfTool/RsaCtfTool.git&#xA;sudo dnf install gcc python3-devel python3-pip python3-wheel gmp-devel mpfr-devel libmpc-devel&#xA;cd RsaCtfTool&#xA;pip3 install -r &#34;requirements.txt&#34;&#xA;./RsaCtfTool.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also want the optional SageMath , you need to do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install sagemath&#xA;pip3 install -r &#34;optional-requirements.txt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS-specific Instructions&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;pip3 install -r &#34;requirements.txt&#34;&lt;/code&gt; fails to install requirements accessible within the environment, the following command may work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;easy_install `cat requirements.txt` &lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed gmpy2 with homebrew(&lt;code&gt;brew install gmp&lt;/code&gt;), you might have to point clang towards the header files with this command: &lt;code&gt;CFLAGS=-I/opt/homebrew/include LDFLAGS=-L/opt/homebrew/lib pip3 install -r requirements.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Optional to factor roca keys upto 512 bits, Install neca:&lt;/h3&gt; &#xA;&lt;p&gt;You can follow the instructions at : &lt;code&gt;https://www.mersenneforum.org/showthread.php?t=23087&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO (aka. Help wanted !)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement a test method for each attack.&lt;/li&gt; &#xA; &lt;li&gt;Assign the correct algorithm complexity in &lt;strong&gt;Big O&lt;/strong&gt; notation for each attack.&lt;/li&gt; &#xA; &lt;li&gt;Support multiprime RSA, the project currently supports textbook RSA.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please read the CONTRIBUTING.md guideline for the bare minimum acceptable PRs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;All Thanks To Our Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/RsaCtfTool/RsaCtfTool/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=RsaCtfTool/RsaCtfTool&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>pchunduri6/rag-demystified</title>
    <updated>2023-10-31T01:35:04Z</updated>
    <id>tag:github.com,2023-10-31:/pchunduri6/rag-demystified</id>
    <link href="https://github.com/pchunduri6/rag-demystified" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An LLM-powered advanced RAG pipeline built from scratch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Demystifying Advanced RAG Pipelines&lt;/h1&gt; &#xA;&lt;p&gt;Retrieval-Augmented Generation (RAG) pipelines powered by large language models (LLMs) are gaining popularity for building end-to-end question answering systems. Frameworks such as &lt;a href=&#34;https://github.com/run-llama/llama_index&#34;&gt;LlamaIndex&lt;/a&gt; and &lt;a href=&#34;https://github.com/deepset-ai/haystack&#34;&gt;Haystack&lt;/a&gt; have made significant progress in making RAG pipelines easy to use. While these frameworks provide excellent abstractions for building advanced RAG pipelines, they do so at the cost of transparency. From a user perspective, it&#39;s not readily apparent what&#39;s going on under the hood, particularly when errors or inconsistencies arise.&lt;/p&gt; &#xA;&lt;p&gt;In this &lt;a href=&#34;https://github.com/georgia-tech-db/evadb&#34;&gt;EvaDB&lt;/a&gt; application, we&#39;ll shed light on the inner workings of advanced RAG pipelines by examining the mechanics, limitations, and costs that often remain opaque.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;70%&#34; src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/intro.png&#34; title=&#34;llama working on a laptop to retrieve data&#34;&gt; &lt;br&gt; &lt;b&gt;&lt;i&gt;Llama working on a laptop&lt;/i&gt; üôÇ&lt;/b&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;If you want to jump right in, use the following commands to run the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&#xA;export OPENAI_API_KEY=&#39;yourkey&#39;&#xA;python complex_qa.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RAG Overview&lt;/h2&gt; &#xA;&lt;p&gt;Retrieval-augmented generation (RAG) is a cutting-edge AI paradigm for LLM-based question answering. A RAG pipeline typically contains:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Warehouse&lt;/strong&gt; - A collection of data sources (e.g., documents, tables etc.) that contain information relevant to the question answering task.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vector Retrieval&lt;/strong&gt; - Given a question, find the top K most similar data chunks to the question. This is done using a vector store (e.g., &lt;a href=&#34;https://faiss.ai/index.html&#34;&gt;Faiss&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Response Generation&lt;/strong&gt; - Given the top K most similar data chunks, generate a response using a large language model (e.g. GPT-4).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;RAG provides two key advantages over traditional LLM-based question answering:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Up-to-date information&lt;/strong&gt; - The data warehouse can be updated in real-time, so the information is always up-to-date.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Source tracking&lt;/strong&gt; - RAG provides clear traceability, enabling users to identify the sources of information, which is crucial for accuracy verification and mitigating LLM hallucinations.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building advanced RAG Pipelines&lt;/h2&gt; &#xA;&lt;p&gt;To enable answering more complex questions, recent AI frameworks like LlamaIndex have introduced more advanced abstractions such as the &lt;a href=&#34;https://gpt-index.readthedocs.io/en/latest/examples/query_engine/sub_question_query_engine.html&#34;&gt;Sub-question Query Engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this application, we&#39;ll demystify sophisticated RAG pipelines by using the Sub-question Query Engine as an example. We&#39;ll examine the inner workings of the Sub-question Query Engine and simplify the abstractions to their core components. We&#39;ll also identify some challenges associated with advanced RAG pipelines.&lt;/p&gt; &#xA;&lt;h3&gt;The setup&lt;/h3&gt; &#xA;&lt;p&gt;A data warehouse is a collection of data sources (e.g., documents, tables etc.) that contain information relevant to the question answering task.&lt;/p&gt; &#xA;&lt;p&gt;In this example, we&#39;ll use a simple data warehouse containing multiple Wikipedia articles for different popular cities, inspired by LlamaIndex&#39;s &lt;a href=&#34;https://docs.llamaindex.ai/en/stable/examples/index_structs/doc_summary/DocSummary.html&#34;&gt;illustrative use-case&lt;/a&gt;. Each city&#39;s wiki is a separate data source. Note that for simplicity, we limit each document&#39;s size to fit within the LLM context limit.&lt;/p&gt; &#xA;&lt;p&gt;Our goal is to build a system that can answer questions like:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;&#34;What is the population of Chicago?&#34;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&#34;Give me a summary of the positive aspects of Atlanta.&#34;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&#34;Which city has the highest population?&#34;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As you can see, the questions can be simple factoid/summarization questions over a single data source (Q1/Q2) or complex factoid/summarization questions over multiple data sources (Q3).&lt;/p&gt; &#xA;&lt;p&gt;We have the following &lt;em&gt;retrieval methods&lt;/em&gt; at our disposal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;vector retrieval&lt;/strong&gt; - Given a question and a data source, generate an LLM response using the top-K most similar data chunks to the question from the data source as the context. We use the off-the-shelf FAISS vector index from &lt;a href=&#34;https://github.com/georgia-tech-db/evadb&#34;&gt;EvaDB&lt;/a&gt; for vector retrieval. However, the concepts are applicable to any vector index.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;summary retrieval&lt;/strong&gt; - Given a summary question and a data source, generate an LLM response using the entire data source as context.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;The secret sauce&lt;/h3&gt; &#xA;&lt;p&gt;Our key insight is that each component in an advanced RAG pipeline is powered by a single LLM call. The entire pipeline is a series of LLM calls with carefully crafted prompt templates. These prompt templates are the secret sauce that enable advanced RAG pipelines to perform complex tasks.&lt;/p&gt; &#xA;&lt;p&gt;In fact, any advanced RAG pipeline can be broken down into a series of individual LLM calls that follow a universal input pattern:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/equation.png&#34; alt=&#34;equation&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- LLM input = **Prompt Template** + **Context** + **Question** --&gt; &#xA;&lt;p&gt;where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prompt Template&lt;/strong&gt; - A curated prompt template for the specific task (e.g., sub-question generation, summarization)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Context&lt;/strong&gt; - The context to use to perform the task (e.g. top-K most similar data chunks)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Question&lt;/strong&gt; - The question to answer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, we illustrate this principle by examining the inner workings of the Sub-question Query Engine.&lt;/p&gt; &#xA;&lt;p&gt;The Sub-question Query Engine has to perform three tasks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sub-question generation&lt;/strong&gt; - Given a complex question, break it down into a set of sub-questions, while identifying the appropriate data source and retrieval function for each sub-question.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vector/Summary Retrieval&lt;/strong&gt; - For each sub-question, use the chosen retrieval function over the corresponding data source to retrieve the relevant information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Response Aggregation&lt;/strong&gt; - Aggregate the responses from the sub-questions into a final response.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Let&#39;s examine each task in detail.&lt;/p&gt; &#xA;&lt;h3&gt;Task 1: Sub-question Generation&lt;/h3&gt; &#xA;&lt;p&gt;Our goal is to break down a complex question into a set of sub-questions, while identifying the appropriate data source and retrieval function for each sub-question. For example, the question &lt;em&gt;&#34;Which city has the highest population?&#34;&lt;/em&gt; is broken down into five sub-questions, one for each city, of the form &lt;em&gt;&#34;What is the population of {city}?&#34;.&lt;/em&gt; The data source for each sub-question has to be the corresponding city&#39;s wiki, and the retrieval function has to be vector retrieval.&lt;/p&gt; &#xA;&lt;p&gt;At first glance, this seems like a daunting task. Specifically, we need to answer the following questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;How do we know which sub-questions to generate?&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How do we know which data source to use for each sub-question?&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How do we know which retrieval function to use for each sub-question?&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Remarkably, the answer to all three questions is the same - a single LLM call! The entire sub-question query engine is powered by a single LLM call with a carefully crafted prompt template. Let&#39;s call this template the &lt;strong&gt;Sub-question Prompt Template&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Sub-question Prompt Template --&#xA;&#xA;&#34;&#34;&#34;&#xA;    You are an AI assistant that specializes in breaking down complex questions into simpler, manageable sub-questions.&#xA;    When presented with a complex user question, your role is to generate a list of sub-questions that, when answered, will comprehensively address the original question.&#xA;    You have at your disposal a pre-defined set of functions and data sources to utilize in answering each sub-question.&#xA;    If a user question is straightforward, your task is to return the original question, identifying the appropriate function and data source to use for its solution.&#xA;    Please remember that you are limited to the provided functions and data sources, and that each sub-question should be a full question that can be answered using a single function and a single data source.&#xA;&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The context for the LLM call is the names of the data sources and the functions available to the system. The question is the user question. The LLM outputs a list of sub-questions, each with a function and a data source.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/task_1_table.png&#34; alt=&#34;task_1_table&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the three example questions, the LLM returns the following output:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; LLM output Table &lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Question&lt;/th&gt; &#xA;    &lt;th&gt;Subquestions&lt;/th&gt; &#xA;    &lt;th&gt;Retrieval method&lt;/th&gt; &#xA;    &lt;th&gt;Data Source&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#34;What is the population of Chicago?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;&#34;What is the population of Chicago?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;vector retrieval&lt;/td&gt; &#xA;    &lt;td&gt;Chicago&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#34;Give me a summary of the positive aspects of Atlanta.&#34;&lt;/td&gt; &#xA;    &lt;td&gt;&#34;Give me a summary of the positive aspects of Atlanta.&#34;&lt;/td&gt; &#xA;    &lt;td&gt;summary retrieval&lt;/td&gt; &#xA;    &lt;td&gt;Atlanta&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;5&#34;&gt;&#34;Which city has the highest population?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;&#34;What is the population of Toronto?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;vector retrieval&lt;/td&gt; &#xA;    &lt;td&gt;Toronto&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#34;What is the population of Chicago?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;vector retrieval&lt;/td&gt; &#xA;    &lt;td&gt;Chicago&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#34;What is the population of Houston?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;vector retrieval&lt;/td&gt; &#xA;    &lt;td&gt;Houston&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#34;What is the population of Boston?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;vector retrieval&lt;/td&gt; &#xA;    &lt;td&gt;Boston&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#34;What is the population of Atlanta?&#34;&lt;/td&gt; &#xA;    &lt;td&gt;vector retrieval&lt;/td&gt; &#xA;    &lt;td&gt;Atlanta&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Task 2: Vector/Summary Retrieval&lt;/h3&gt; &#xA;&lt;p&gt;For each sub-question, we use the chosen retrieval function over the corresponding data source to retrieve the relevant information. For example, for the sub-question &lt;em&gt;&#34;What is the population of Chicago?&#34;&lt;/em&gt;, we use vector retrieval over the Chicago data source. Similarly, for the sub-question &lt;em&gt;&#34;Give me a summary of the positive aspects of Atlanta.&#34;&lt;/em&gt;, we use summary retrieval over the Atlanta data source.&lt;/p&gt; &#xA;&lt;p&gt;For both retrieval methods, we use the same LLM prompt template. In fact, we find that the popular &lt;strong&gt;RAG Prompt&lt;/strong&gt; from &lt;a href=&#34;https://smith.langchain.com/hub&#34;&gt;LangchainHub&lt;/a&gt; works great out-of-the-box for this step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- RAG Prompt Template --&#xA;&#xA;&#34;&#34;&#34;&#xA;You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don&#39;t know the answer, just say that you don&#39;t know. Use three sentences maximum and keep the answer concise.&#xA;Question: {question}&#xA;Context: {context}&#xA;Answer:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both the retrieval methods only differ in the context used for the LLM call. For vector retrieval, we use the top K most similar data chunks to the sub-question as context. For summary retrieval, we use the entire data source as context.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/task_2_table.png&#34; alt=&#34;task_2_table&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Task 3: Response Aggregation&lt;/h3&gt; &#xA;&lt;p&gt;This is the final step that aggregates the responses from the sub-questions into a final response. For example, for the question &lt;em&gt;&#34;Which city has the highest population?&#34;&lt;/em&gt;, the sub-questions retrieve the population of each city and then response aggregation finds and returns the city with the highest population. The &lt;strong&gt;RAG Prompt&lt;/strong&gt; works great for this step as well.&lt;/p&gt; &#xA;&lt;p&gt;The context for the LLM call is the list of responses from the sub-questions. The question is the original user question and the LLM outputs a final response.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/task_3_table.png&#34; alt=&#34;task_3_table&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Putting it all together&lt;/h3&gt; &#xA;&lt;p&gt;After unraveling the layers of abstraction, we uncovered the secret ingredient powering the sub-question query engine - 4 types of LLM calls each with different prompt template, context, and a question. This fits the universal input pattern that we identified earlier perfectly, and is a far cry from the complex abstractions that we started with. To summarize: &lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/equation.png&#34; alt=&#34;equation&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/call_types_table.png&#34; alt=&#34;call_types_table&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To see the full pipeline in action, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&#xA;export OPENAI_API_KEY=&#39;yourkey&#39;&#xA;python complex_qa.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example of the system answering the question &lt;em&gt;&#34;Which city with the highest population?&#34;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/simple_rag.png&#34; alt=&#34;full_pipeline&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Challenges&lt;/h2&gt; &#xA;&lt;p&gt;Now that we&#39;ve demystified the inner workings of advanced RAG pipelines, let&#39;s examine the challenges associated with them.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Question sensitivity&lt;/strong&gt; - The biggest challenge that we observed with these systems is the question sensitivity. The LLMs are extremely sensitive to the user question, and the pipeline fails unexpectedly for several user questions. Here are a few example failure cases that we encountered: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Incorrect sub-questions&lt;/strong&gt; - The LLM sometimes generates incorrect sub-questions. For example, &lt;em&gt;&#34;Which city has the highest number of tech companies?&#34;&lt;/em&gt; is broken down into &lt;em&gt;&#34;What are the tech companies in each city?&#34;&lt;/em&gt; 5 times (once for each city) instead of &lt;em&gt;&#34;What is the number of tech companies in Toronto?&#34;&lt;/em&gt;, &lt;em&gt;&#34;What is the number of tech companies in Chicago?&#34;&lt;/em&gt;, etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Incorrect retrieval function&lt;/strong&gt; - &lt;em&gt;&#34;Summarize the positive aspects of Atlanta and Toronto.&#34;&lt;/em&gt; results in using the vector retrieval function instead of the summary retrieval method.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We had to put in significant effort into prompt engineering to get the pipeline to work for each question. This is a significant challenge for building robust systems.&lt;/p&gt; &#xA;&lt;p&gt;To verify this behavior, we &lt;a href=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/llama_index_baseline.py&#34;&gt;implemented the example&lt;/a&gt; using the LlamaIndex Sub-question query engine. Consistent with our observations, the system often generates the wrong sub-questions and also uses the wrong retrieval function for the sub-questions, as shown below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pchunduri6/rag-demystified/main/images/baseline.png&#34; alt=&#34;llama_index_baseline&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cost&lt;/strong&gt; - The second challenge is the cost dynamics of advanced RAG pipelines. The issue is two-fold: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cost sensitivity&lt;/strong&gt; - The final cost of the question is dependent on the number of sub-questions generated, the retrieval function used, and the number of data sources queried. Since the LLMs are sensitive to the prompt, the cost of the question can vary significantly depending on the question and the LLM output. For example, the incorrect model choice in the LlamaIndex baseline example above (&lt;code&gt;summary_tool&lt;/code&gt;) results in a 3x higher cost compared to the &lt;code&gt;vector_tool&lt;/code&gt; while also generating an incorrect response.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cost estimation&lt;/strong&gt; - Advanced abstractions in RAG frameworks obscure the estimated cost of the question. Setting up a cost monitoring system is challenging since the cost of the question is dependent on the LLM output.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Advanced RAG pipelines powered by LLMs have revolutionized question-answering systems. However, as we have seen, these pipelines are not turnkey solutions. Under the hood, they rely on carefully engineered prompt templates and multiple chained LLM calls. As illustrated in this &lt;a href=&#34;https://github.com/georgia-tech-db/evadb&#34;&gt;EvaDB&lt;/a&gt; application, these pipelines can be question-sensitive, brittle, and opaque in their cost dynamics. Understanding these intricacies is key to leveraging their full potential and paving the way for more robust and efficient systems in the future.&lt;/p&gt; &#xA;&lt;!-- ## Appendix&#xA;&#xA;&#xA;To reliably generate the correct format of functions and data sources, we use the powerful [OpenAI function calling](https://openai.com/blog/function-calling-and-other-api-updates) feature paired with Pydantic models. We also use the [Instructor](https://github.com/jxnl/instructor) library to easily generate LLM-ready function schemas.&#xA;&#xA;More details on the full schema definition can be found [here](subquestion_generator.py).&#xA;&#xA;For example, the function schema to choose vector/summary retrieval is as simple as:&#xA;&#xA;```python&#xA;class FunctionEnum(str, Enum):&#xA;    &#34;&#34;&#34;The function to use to answer the questions.&#xA;    Use vector_retrieval for factoid questions.&#xA;    Use summary_retrieval for summarization questions.&#xA;    &#34;&#34;&#34;&#xA;    VECTOR_RETRIEVAL = &#34;vector_retrieval&#34;&#xA;    SUMMARY_RETRIEVAL = &#34;summary_retrieval&#34;&#xA;```&#xA;&#xA;The data source schema definition is also straightforward:&#xA;```python&#xA;class DataSourceEnum(str, Enum):&#xA;    &#34;&#34;&#34;The data source to use to answer the corresponding subquestion&#34;&#34;&#34;&#xA;    TORONTO = &#34;Toronto&#34;&#xA;    CHICAGO = &#34;Chicago&#34;&#xA;    HOUSTON = &#34;Houston&#34;&#xA;    BOSTON = &#34;Boston&#34;&#xA;    ATLANTA = &#34;Atlanta&#34;&#xA;```&#xA;&#xA;All of this can be packaged into a simple Pydantic model:&#xA;&#xA;```python&#xA;class QuestionBundle(BaseModel):&#xA;    question: str = Field(None, description=&#34;The subquestion extracted from the user&#39;s question&#34;)&#xA;    function: FunctionEnum&#xA;    data_source: DataSourceEnum&#xA;```&#xA;&#xA;Using the Instructor library, we can provide the above schema as the desired output format to OpenAI.&#xA;```python&#xA;from instructor import OpenAISchema&#xA;&#xA;class SubQuestionBundleList(OpenAISchema):&#xA;    subquestion_bundle_list: List[QuestionBundle] = Field(None, description=&#34;A list of subquestions - each item in the list contains a question, a function, and a data source&#34;)&#xA;&#xA;response = openai.ChatCompletion.create(&#xA;        model=&#34;gpt-3.5-turbo&#34;,&#xA;        functions=[QuestionBundle.OpenAISchema],&#xA;        ...&#xA;)&#xA;``` --&gt;</summary>
  </entry>
</feed>