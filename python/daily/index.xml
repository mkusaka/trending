<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-27T01:33:36Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PromtEngineer/Verbi</title>
    <updated>2024-08-27T01:33:36Z</updated>
    <id>tag:github.com,2024-08-27:/PromtEngineer/Verbi</id>
    <link href="https://github.com/PromtEngineer/Verbi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modular voice assistant application for experimenting with state-of-the-art transcription, response generation, and text-to-speech models. Supports OpenAI, Groq, Elevanlabs, CartesiaAI, and Deepgram APIs, plus local models via Ollama. Ideal for research and development in voice technology.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VERBI - Voice Assistant 🎙️&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PromtEngineer/Verbi/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/PromtEngineer/Verbi?style=social&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PromtEngineer/Verbi/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/PromtEngineer/Verbi?style=social&#34; alt=&#34;GitHub Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PromtEngineer/Verbi/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/PromtEngineer/Verbi&#34; alt=&#34;GitHub Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PromtEngineer/Verbi/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/PromtEngineer/Verbi&#34; alt=&#34;GitHub Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PromtEngineer/Verbi/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/PromtEngineer/Verbi&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Motivation ✨✨✨&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to the Voice Assistant project! 🎙️ Our goal is to create a modular voice assistant application that allows you to experiment with state-of-the-art (SOTA) models for various components. The modular structure provides flexibility, enabling you to pick and choose between different SOTA models for transcription, response generation, and text-to-speech (TTS). This approach facilitates easy testing and comparison of different models, making it an ideal platform for research and development in voice assistant technologies. Whether you&#39;re a developer, researcher, or enthusiast, this project is for you!&lt;/p&gt; &#xA;&lt;h2&gt;Features 🧰&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modular Design&lt;/strong&gt;: Easily switch between different models for transcription, response generation, and TTS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for Multiple APIs&lt;/strong&gt;: Integrates with OpenAI, Groq, and Deepgram APIs, along with placeholders for local models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Audio Recording and Playback&lt;/strong&gt;: Record audio from the microphone and play generated speech.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration Management&lt;/strong&gt;: Centralized configuration in &lt;code&gt;config.py&lt;/code&gt; for easy setup and management.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Structure 📂&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;voice_assistant/&#xA;├── voice_assistant/&#xA;│   ├── __init__.py&#xA;│   ├── audio.py&#xA;│   ├── api_key_manager.py&#xA;│   ├── config.py&#xA;│   ├── transcription.py&#xA;│   ├── response_generation.py&#xA;│   ├── text_to_speech.py&#xA;│   ├── utils.py&#xA;│   ├── local_tts_api.py&#xA;│   ├── local_tts_generation.py&#xA;├── .env&#xA;├── run_voice_assistant.py&#xA;├── setup.py&#xA;├── requirements.txt&#xA;└── README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup Instructions 📋&lt;/h2&gt; &#xA;&lt;h4&gt;Prerequisites ✅&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.10 or higher&lt;/li&gt; &#xA; &lt;li&gt;Virtual environment (recommended)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Step-by-Step Instructions 🔢&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;📥 &lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   git clone https://github.com/PromtEngineer/Verbi.git&#xA;   cd Verbi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;🐍 &lt;strong&gt;Set up a virtual environment&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Using &lt;code&gt;venv&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    python -m venv venv&#xA;    source venv/bin/activate  # On Windows use `venv\Scripts\activate`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;conda&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    conda create --name verbi python=3.10&#xA;    conda activate verbi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;📦 &lt;strong&gt;Install the required packages&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;🛠️ &lt;strong&gt;Set up the environment variables&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the root directory and add your API keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    OPENAI_API_KEY=your_openai_api_key&#xA;    GROQ_API_KEY=your_groq_api_key&#xA;    DEEPGRAM_API_KEY=your_deepgram_api_key&#xA;    LOCAL_MODEL_PATH=path/to/local/model&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;🧩 &lt;strong&gt;Configure the models&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Edit config.py to select the models you want to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;    class Config:&#xA;        # Model selection&#xA;        TRANSCRIPTION_MODEL = &#39;groq&#39;  # Options: &#39;openai&#39;, &#39;groq&#39;, &#39;deepgram&#39;, &#39;fastwhisperapi&#39; &#39;local&#39;&#xA;        RESPONSE_MODEL = &#39;groq&#39;       # Options: &#39;openai&#39;, &#39;groq&#39;, &#39;ollama&#39;, &#39;local&#39;&#xA;        TTS_MODEL = &#39;deepgram&#39;        # Options: &#39;openai&#39;, &#39;deepgram&#39;, &#39;elevenlabs&#39;, &#39;local&#39;, &#39;melotts&#39;&#xA;&#xA;        # API keys and paths&#xA;        OPENAI_API_KEY = os.getenv(&#34;OPENAI_API_KEY&#34;)&#xA;        GROQ_API_KEY = os.getenv(&#34;GROQ_API_KEY&#34;)&#xA;        DEEPGRAM_API_KEY = os.getenv(&#34;DEEPGRAM_API_KEY&#34;)&#xA;        LOCAL_MODEL_PATH = os.getenv(&#34;LOCAL_MODEL_PATH&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are running LLM locally via &lt;a href=&#34;https://ollama.com/&#34;&gt;Ollama&lt;/a&gt;, make sure the Ollama server is runnig before starting verbi.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;🔊 &lt;strong&gt;Configure ElevenLabs Jarvis&#39; Voice&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Voice samples &lt;a href=&#34;https://github.com/PromtEngineer/Verbi/tree/main/voice_samples&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow this &lt;a href=&#34;https://elevenlabs.io/app/voice-lab/share/de3746fa51a09e771604d74b5d1ff6797b6b96a5958f9de95cef544dde31dad9/WArWzu0z4mbSyy5BfRKM&#34;&gt;link&lt;/a&gt; to add the Jarvis voice to your ElevenLabs account.&lt;/li&gt; &#xA; &lt;li&gt;Name the voice &#39;Paul J.&#39; or, if you prefer a different name, ensure it matches the ELEVENLABS_VOICE_ID variable in the text_to_speech.py file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;🏃 &lt;strong&gt;Run the voice assistant&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   python run_voice_assistant.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;🎤 &lt;strong&gt;Install FastWhisperAPI&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Optional step if you need a local transcription model&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   cd..&#xA;   git clone https://github.com/3choff/FastWhisperAPI.git&#xA;   cd FastWhisperAPI&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Install the required packages:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Run the API&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   fastapi run main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Alternative Setup and Run Methods&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The API can also run directly on a Docker container or in Google Colab.&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Docker:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Build a Docker container:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   docker build -t fastwhisperapi .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Run the container&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   docker run -p 8000:8000 fastwhisperapi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Refer to the repository documentation for the Google Colab method: &lt;a href=&#34;https://github.com/3choff/FastWhisperAPI/raw/main/README.md&#34;&gt;https://github.com/3choff/FastWhisperAPI/blob/main/README.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;🎤 &lt;strong&gt;Install Local TTS - MeloTTS&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Optional step if you need a local Text to Speech model&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Install MeloTTS from Github&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Use the following &lt;a href=&#34;https://github.com/myshell-ai/MeloTTS/raw/main/docs/install.md#linux-and-macos-install&#34;&gt;link&lt;/a&gt; to install MeloTTS for your operating system.&lt;/p&gt; &lt;p&gt;Once the package is installed on your local virtual environment, you can start the api server using the following command.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   python voice_assistant/local_tts_api.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;local_tts_api.py&lt;/code&gt; file implements as fastapi server that will listen to incoming text and will generate audio using MeloTTS model. In order to use the local TTS model, you will need to update the &lt;code&gt;config.py&lt;/code&gt; file by setting:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   TTS_MODEL = &#39;melotts&#39;        # Options: &#39;openai&#39;, &#39;deepgram&#39;, &#39;elevenlabs&#39;, &#39;local&#39;, &#39;melotts&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can run the main file to start using verbi with local models.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Model Options ⚙️&lt;/h2&gt; &#xA;&lt;h4&gt;Transcription Models 🎤&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;: Uses OpenAI&#39;s Whisper model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Groq&lt;/strong&gt;: Uses Groq&#39;s Whisper-large-v3 model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deepgram&lt;/strong&gt;: Uses Deepgram&#39;s transcription model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FastWhisperAPI&lt;/strong&gt;: Uses FastWhisperAPI, a local transcription API powered by Faster Whisper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local&lt;/strong&gt;: Placeholder for a local speech-to-text (STT) model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Response Generation Models 💬&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;: Uses OpenAI&#39;s GPT-4 model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Groq&lt;/strong&gt;: Uses Groq&#39;s LLaMA model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ollama&lt;/strong&gt;: Uses any model served via Ollama.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local&lt;/strong&gt;: Placeholder for a local language model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Text-to-Speech (TTS) Models 🔊&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;: Uses OpenAI&#39;s TTS model with the &#39;fable&#39; voice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deepgram&lt;/strong&gt;: Uses Deepgram&#39;s TTS model with the &#39;aura-angus-en&#39; voice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ElevenLabs&lt;/strong&gt;: Uses ElevenLabs&#39; TTS model with the &#39;Paul J.&#39; voice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local&lt;/strong&gt;: Placeholder for a local TTS model.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Detailed Module Descriptions 📘&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;run_verbi.py&lt;/code&gt;&lt;/strong&gt;: Main script to run the voice assistant.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/config.py&lt;/code&gt;&lt;/strong&gt;: Manages configuration settings and API keys.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/api_key_manager.py&lt;/code&gt;&lt;/strong&gt;: Handles retrieval of API keys based on configured models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/audio.py&lt;/code&gt;&lt;/strong&gt;: Functions for recording and playing audio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/transcription.py&lt;/code&gt;&lt;/strong&gt;: Manages audio transcription using various APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/response_generation.py&lt;/code&gt;&lt;/strong&gt;: Handles generating responses using various language models.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/text_to_speech.py&lt;/code&gt;&lt;/strong&gt;: Manages converting text responses into speech.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/utils.py&lt;/code&gt;&lt;/strong&gt;: Contains utility functions like deleting files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/local_tts_api.py&lt;/code&gt;&lt;/strong&gt;: Contains the api implementation to run the MeloTTS model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/local_tts_generation.py&lt;/code&gt;&lt;/strong&gt;: Contains the code to use the MeloTTS api to generated audio.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;voice_assistant/__init__.py&lt;/code&gt;&lt;/strong&gt;: Initializes the &lt;code&gt;voice_assistant&lt;/code&gt; package.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap 🛤️🛤️🛤️&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s what&#39;s next for the Voice Assistant project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add Support for Streaming&lt;/strong&gt;: Enable real-time streaming of audio input and output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add Support for ElevenLabs and Enhanced Deepgram for TTS&lt;/strong&gt;: Integrate additional TTS options for higher quality and variety.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add Filler Audios&lt;/strong&gt;: Include background or filler audios while waiting for model responses to enhance user experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add Support for Local Models Across the Board&lt;/strong&gt;: Expand support for local models in transcription, response generation, and TTS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing 🤝&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community! If you&#39;d like to help improve this project, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch (&lt;code&gt;git checkout -b feature-branch&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Make your changes and commit them (&lt;code&gt;git commit -m &#39;Add new feature&#39;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin feature-branch&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Open a pull request detailing your changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Star History ✨✨✨&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#PromtEngineer/Verbi&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=PromtEngineer/Verbi&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>