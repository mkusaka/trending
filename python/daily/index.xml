<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-14T01:35:31Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bitsandbytes-foundation/bitsandbytes</title>
    <updated>2024-08-14T01:35:31Z</updated>
    <id>tag:github.com,2024-08-14:/bitsandbytes-foundation/bitsandbytes</id>
    <link href="https://github.com/bitsandbytes-foundation/bitsandbytes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Accessible large language models via k-bit quantization for PyTorch.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;bitsandbytes&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pepy.tech/project/bitsandbytes&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/bitsandbytes&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/bitsandbytes&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/bitsandbytes/month&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/bitsandbytes&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/bitsandbytes/week&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;bitsandbytes&lt;/code&gt; library is a lightweight Python wrapper around CUDA custom functions, in particular 8-bit optimizers, matrix multiplication (LLM.int8()), and 8 &amp;amp; 4-bit quantization functions.&lt;/p&gt; &#xA;&lt;p&gt;The library includes quantization primitives for 8-bit &amp;amp; 4-bit operations, through &lt;code&gt;bitsandbytes.nn.Linear8bitLt&lt;/code&gt; and &lt;code&gt;bitsandbytes.nn.Linear4bit&lt;/code&gt; and 8-bit optimizers through &lt;code&gt;bitsandbytes.optim&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;There are ongoing efforts to support further hardware backends, i.e. Intel CPU + GPU, AMD GPU, Apple Silicon. Windows support is quite far along and is on its way as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please head to the official documentation page:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://huggingface.co/docs/bitsandbytes/main&#34;&gt;https://huggingface.co/docs/bitsandbytes/main&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ALPHA TESTERS WANTED: &lt;code&gt;multi-backend-refactor&lt;/code&gt; AMD GPU + Intel CPU/GPU specific BNB backend implementations&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re in the process of a complex refactor in order to allow the support of additional hardware backends, other than CUDA, in BNB. The efforts around this are already quite far along and there&#39;s plenty of functionality already in place that is in need for users to take a hands-on approach! Mac support will likely soon also see progress. However, I recommend waiting 2 weeks until the device abstraction has further consolidated (&lt;strong&gt;breaking changes upcoming&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Currently, you still need to compile from source, after checking out the &lt;code&gt;multi-backend-refactor&lt;/code&gt; branch (instructions WIP, but &lt;a href=&#34;https://huggingface.co/docs/bitsandbytes/main/en/installation#compile-from-source&#34;&gt;the current docs on the compilation from source&lt;/a&gt; are a good starting point; &lt;a href=&#34;https://github.com/TimDettmers/bitsandbytes/discussions/1219&#34;&gt;feel free to share tips / input in this Github discussion&lt;/a&gt;. We&#39;ll soon enable nightly releases to make this much easier for you!&lt;/p&gt; &#xA;&lt;p&gt;Please give feedback to us in &lt;a href=&#34;https://github.com/TimDettmers/bitsandbytes/discussions/categories/catch-all-alpha-testing-the-multi-backend-refactor&#34;&gt;this dedicated Github Discussion space&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re super excited about these recent developments and grateful for any constructive input or support that you can give to help us make this a reality. BNB is a community project and we&#39;re excited for your collaboration ðŸ¤—&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;bitsandbytes&lt;/code&gt; is MIT licensed.&lt;/p&gt; &#xA;&lt;p&gt;We thank Fabio Cannizzo for his work on &lt;a href=&#34;https://github.com/fabiocannizzo/FastBinarySearch&#34;&gt;FastBinarySearch&lt;/a&gt; which we use for CPU quantization.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ostris/ai-toolkit</title>
    <updated>2024-08-14T01:35:31Z</updated>
    <id>tag:github.com,2024-08-14:/ostris/ai-toolkit</id>
    <link href="https://github.com/ostris/ai-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Various AI scripts. Mostly Stable Diffusion stuff.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Toolkit by Ostris&lt;/h1&gt; &#xA;&lt;h2&gt;IMPORTANT NOTE - READ THIS&lt;/h2&gt; &#xA;&lt;p&gt;This is my research repo. I do a lot of experiments in it and it is possible that I will break things. If something breaks, checkout an earlier commit. This repo can train a lot of things, and it is hard to keep up with all of them.&lt;/p&gt; &#xA;&lt;h2&gt;Support my work&lt;/h2&gt; &#xA;&lt;a href=&#34;https://glif.app&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;glif.app&#34; src=&#34;https://raw.githubusercontent.com/ostris/ai-toolkit/main/assets/glif.svg?v=1&#34; width=&#34;256&#34; height=&#34;auto&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;My work on this project would not be possible without the amazing support of &lt;a href=&#34;https://glif.app/&#34;&gt;Glif&lt;/a&gt; and everyone on the team. If you want to support me, support Glif. &lt;a href=&#34;https://glif.app/&#34;&gt;Join the site&lt;/a&gt;, &lt;a href=&#34;https://discord.com/invite/nuR9zZ2nsh&#34;&gt;Join us on Discord&lt;/a&gt;, &lt;a href=&#34;https://x.com/heyglif&#34;&gt;follow us on Twitter&lt;/a&gt; and come make some cool stuff with us&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;python &amp;gt;3.10&lt;/li&gt; &#xA; &lt;li&gt;Nvidia GPU with enough ram to do what you need&lt;/li&gt; &#xA; &lt;li&gt;python venv&lt;/li&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ostris/ai-toolkit.git&#xA;cd ai-toolkit&#xA;git submodule update --init --recursive&#xA;python3 -m venv venv&#xA;source venv/bin/activate&#xA;# .\venv\Scripts\activate on windows&#xA;# install torch first&#xA;pip3 install torch&#xA;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ostris/ai-toolkit.git&#xA;cd ai-toolkit&#xA;git submodule update --init --recursive&#xA;python -m venv venv&#xA;.\venv\Scripts\activate&#xA;pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FLUX.1 Training&lt;/h2&gt; &#xA;&lt;h3&gt;WIP. I am updating docs and optimizing as fast as I can. If there are bugs open a ticket. Not knowing how to get it to work is NOT a bug. Be paitient as I continue to develop it.&lt;/h3&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;You currently need a GPU with &lt;strong&gt;at least 24GB of VRAM&lt;/strong&gt; to train FLUX.1. If you are using it as your GPU to control your monitors, you probably need to set the flag &lt;code&gt;low_vram: true&lt;/code&gt; in the config file under &lt;code&gt;model:&lt;/code&gt;. This will quantize the model on CPU and should allow it to train with monitors attached. Users have gotten it to work on Windows with WSL, but there are some reports of a bug when running on windows natively. I have only tested on linux for now. This is still extremely experimental and a lot of quantizing and tricks had to happen to get it to fit on 24GB at all.&lt;/p&gt; &#xA;&lt;h3&gt;Model License&lt;/h3&gt; &#xA;&lt;p&gt;Training currently only works with FLUX.1-dev. Which means anything you train will inherit the non-commercial license. It is also a gated model, so you need to accept the license on HF before using it. Otherwise, this will fail. Here are the required steps to setup a license.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Sign into HF and accept the model access here &lt;a href=&#34;https://huggingface.co/black-forest-labs/FLUX.1-dev&#34;&gt;black-forest-labs/FLUX.1-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make a file named &lt;code&gt;.env&lt;/code&gt; in the root on this folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/settings/tokens/new?&#34;&gt;Get a READ key from huggingface&lt;/a&gt; and add it to the &lt;code&gt;.env&lt;/code&gt; file like so &lt;code&gt;HF_TOKEN=your_key_here&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy the example config file located at &lt;code&gt;config/examples/train_lora_flux_24gb.yaml&lt;/code&gt; to the &lt;code&gt;config&lt;/code&gt; folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit the file following the comments in the file&lt;/li&gt; &#xA; &lt;li&gt;Run the file like so &lt;code&gt;python3 run.py config/whatever_you_want.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A folder with the name and the training folder from the config file will be created when you start. It will have all checkpoints and images in it. You can stop the training at any time using ctrl+c and when you resume, it will pick back up from the last checkpoint.&lt;/p&gt; &#xA;&lt;p&gt;IMPORTANT. If you press crtl+c while it is saving, it will likely corrupt that checkpoint. So wait until it is done saving&lt;/p&gt; &#xA;&lt;h3&gt;Need help?&lt;/h3&gt; &#xA;&lt;p&gt;Please do not open a bug report unless it is a bug in the code. You are welcome to &lt;a href=&#34;https://discord.gg/SzVB3wYvxF&#34;&gt;Join my Discord&lt;/a&gt; and ask for help there. However, please refrain from PMing me directly with general question or support. Ask in the discord and I will answer when I can.&lt;/p&gt; &#xA;&lt;h3&gt;Training in the cloud&lt;/h3&gt; &#xA;&lt;p&gt;Coming very soon. Getting base out then will have a notebook that makes all that work.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Dataset Preparation&lt;/h2&gt; &#xA;&lt;p&gt;Datasets generally need to be a folder containing images and associated text files. Currently, the only supported formats are jpg, jpeg, and png. Webp currently has issues. The text files should be named the same as the images but with a &lt;code&gt;.txt&lt;/code&gt; extension. For example &lt;code&gt;image22.jpg&lt;/code&gt; and &lt;code&gt;image2.txt&lt;/code&gt;. The text file should contain only the caption. You can add the word &lt;code&gt;[trigger]&lt;/code&gt; in the caption file and if you have &lt;code&gt;trigger_word&lt;/code&gt; in your config, it will be automatically replaced.&lt;/p&gt; &#xA;&lt;p&gt;Images are never upscaled but they are downscaled and placed in buckets for batching. &lt;strong&gt;You do not need to crop/resize your images&lt;/strong&gt;. The loader will automatically resize them and can handle varying aspect ratios.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;EVERYTHING BELOW THIS LINE IS OUTDATED&lt;/h2&gt; &#xA;&lt;p&gt;It may still work like that, but I have not tested it in a while.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Batch Image Generation&lt;/h3&gt; &#xA;&lt;p&gt;A image generator that can take frompts from a config file or form a txt file and generate them to a folder. I mainly needed this for an SDXL test I am doing but added some polish to it so it can be used for generat batch image generation. It all runs off a config file, which you can find an example of in &lt;code&gt;config/examples/generate.example.yaml&lt;/code&gt;. Mere info is in the comments in the example&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LoRA (lierla), LoCON (LyCORIS) extractor&lt;/h3&gt; &#xA;&lt;p&gt;It is based on the extractor in the &lt;a href=&#34;https://github.com/KohakuBlueleaf/LyCORIS&#34;&gt;LyCORIS&lt;/a&gt; tool, but adding some QOL features and LoRA (lierla) support. It can do multiple types of extractions in one run. It all runs off a config file, which you can find an example of in &lt;code&gt;config/examples/extract.example.yml&lt;/code&gt;. Just copy that file, into the &lt;code&gt;config&lt;/code&gt; folder, and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. Then you can edit the file to your liking. and call it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/whatever_you_want.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also put a full path to a config file, if you want to keep it somewhere else.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py &#34;/home/user/whatever_you_want.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More notes on how it works are available in the example config file itself. LoRA and LoCON both support extractions of &#39;fixed&#39;, &#39;threshold&#39;, &#39;ratio&#39;, &#39;quantile&#39;. I&#39;ll update what these do and mean later. Most people used fixed, which is traditional fixed dimension extraction.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;process&lt;/code&gt; is an array of different processes to run. You can add a few and mix and match. One LoRA, one LyCON, etc.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LoRA Rescale&lt;/h3&gt; &#xA;&lt;p&gt;Change &lt;code&gt;&amp;lt;lora:my_lora:4.6&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;lora:my_lora:1.0&amp;gt;&lt;/code&gt; or whatever you want with the same effect. A tool for rescaling a LoRA&#39;s weights. Should would with LoCON as well, but I have not tested it. It all runs off a config file, which you can find an example of in &lt;code&gt;config/examples/mod_lora_scale.yml&lt;/code&gt;. Just copy that file, into the &lt;code&gt;config&lt;/code&gt; folder, and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. Then you can edit the file to your liking. and call it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/whatever_you_want.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also put a full path to a config file, if you want to keep it somewhere else.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py &#34;/home/user/whatever_you_want.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More notes on how it works are available in the example config file itself. This is useful when making all LoRAs, as the ideal weight is rarely 1.0, but now you can fix that. For sliders, they can have weird scales form -2 to 2 or even -15 to 15. This will allow you to dile it in so they all have your desired scale&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;LoRA Slider Trainer&lt;/h3&gt; &#xA;&lt;a target=&#34;_blank&#34; href=&#34;https://colab.research.google.com/github/ostris/ai-toolkit/blob/main/notebooks/SliderTraining.ipynb&#34;&gt; &lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;This is how I train most of the recent sliders I have on Civitai, you can check them out in my &lt;a href=&#34;https://civitai.com/user/Ostris/models&#34;&gt;Civitai profile&lt;/a&gt;. It is based off the work by &lt;a href=&#34;https://github.com/p1atdev/LECO&#34;&gt;p1atdev/LECO&lt;/a&gt; and &lt;a href=&#34;https://github.com/rohitgandikota/erasing&#34;&gt;rohitgandikota/erasing&lt;/a&gt; But has been heavily modified to create sliders rather than erasing concepts. I have a lot more plans on this, but it is very functional as is. It is also very easy to use. Just copy the example config file in &lt;code&gt;config/examples/train_slider.example.yml&lt;/code&gt; to the &lt;code&gt;config&lt;/code&gt; folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. Then you can edit the file to your liking. and call it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/whatever_you_want.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a lot more information in that example file. You can even run the example as is without any modifications to see how it works. It will create a slider that turns all animals into dogs(neg) or cats(pos). Just run it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py config/examples/train_slider.example.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you will be able to see how it works without configuring anything. No datasets are required for this method. I will post an better tutorial soon.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Extensions!!&lt;/h2&gt; &#xA;&lt;p&gt;You can now make and share custom extensions. That run within this framework and have all the inbuilt tools available to them. I will probably use this as the primary development method going forward so I dont keep adding and adding more and more features to this base repo. I will likely migrate a lot of the existing functionality as well to make everything modular. There is an example extension in the &lt;code&gt;extensions&lt;/code&gt; folder that shows how to make a model merger extension. All of the code is heavily documented which is hopefully enough to get you started. To make an extension, just copy that example and replace all the things you need to.&lt;/p&gt; &#xA;&lt;h3&gt;Model Merger - Example Extension&lt;/h3&gt; &#xA;&lt;p&gt;It is located in the &lt;code&gt;extensions&lt;/code&gt; folder. It is a fully finctional model merger that can merge as many models together as you want. It is a good example of how to make an extension, but is also a pretty useful feature as well since most mergers can only do one model at a time and this one will take as many as you want to feed it. There is an example config file in there, just copy that to your &lt;code&gt;config&lt;/code&gt; folder and rename it to &lt;code&gt;whatever_you_want.yml&lt;/code&gt;. and use it like any other config file.&lt;/p&gt; &#xA;&lt;h2&gt;WIP Tools&lt;/h2&gt; &#xA;&lt;h3&gt;VAE (Variational Auto Encoder) Trainer&lt;/h3&gt; &#xA;&lt;p&gt;This works, but is not ready for others to use and therefore does not have an example config. I am still working on it. I will update this when it is ready. I am adding a lot of features for criteria that I have used in my image enlargement work. A Critic (discriminator), content loss, style loss, and a few more. If you don&#39;t know, the VAE for stable diffusion (yes even the MSE one, and SDXL), are horrible at smaller faces and it holds SD back. I will fix this. I&#39;ll post more about this later with better examples later, but here is a quick test of a run through with various VAEs. Just went in and out. It is much worse on smaller faces than shown here.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ostris/ai-toolkit/main/assets/VAE_test1.jpg&#34; width=&#34;768&#34; height=&#34;auto&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add proper regs on sliders&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add SDXL support (base model only for now)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add plain erasing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make Textual inversion network trainer (network that spits out TI embeddings)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;h4&gt;2023-08-05&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Huge memory rework and slider rework. Slider training is better thant ever with no more ram spikes. I also made it so all 4 parts of the slider algorythm run in one batch so they share gradient accumulation. This makes it much faster and more stable.&lt;/li&gt; &#xA; &lt;li&gt;Updated the example config to be something more practical and more updated to current methods. It is now a detail slide and shows how to train one without a subject. 512x512 slider training for 1.5 should work on 6GB gpu now. Will test soon to verify.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2021-10-20&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows support bug fixes&lt;/li&gt; &#xA; &lt;li&gt;Extensions! Added functionality to make and share custom extensions for training, merging, whatever. check out the example in the &lt;code&gt;extensions&lt;/code&gt; folder. Read more about that above.&lt;/li&gt; &#xA; &lt;li&gt;Model Merging, provided via the example extension.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2023-08-03&lt;/h4&gt; &#xA;&lt;p&gt;Another big refactor to make SD more modular.&lt;/p&gt; &#xA;&lt;p&gt;Made batch image generation script&lt;/p&gt; &#xA;&lt;h4&gt;2023-08-01&lt;/h4&gt; &#xA;&lt;p&gt;Major changes and update. New LoRA rescale tool, look above for details. Added better metadata so Automatic1111 knows what the base model is. Added some experiments and a ton of updates. This thing is still unstable at the moment, so hopefully there are not breaking changes.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I am too lazy to write a proper changelog with all the changes.&lt;/p&gt; &#xA;&lt;p&gt;I added SDXL training to sliders... but.. it does not work properly. The slider training relies on a model&#39;s ability to understand that an unconditional (negative prompt) means you do not want that concept in the output. SDXL does not understand this for whatever reason, which makes separating out concepts within the model hard. I am sure the community will find a way to fix this over time, but for now, it is not going to work properly. And if any of you are thinking &#34;Could we maybe fix it by adding 1 or 2 more text encoders to the model as well as a few more entirely separate diffusion networks?&#34; No. God no. It just needs a little training without every experimental new paper added to it. The KISS principal.&lt;/p&gt; &#xA;&lt;h4&gt;2023-07-30&lt;/h4&gt; &#xA;&lt;p&gt;Added &#34;anchors&#34; to the slider trainer. This allows you to set a prompt that will be used as a regularizer. You can set the network multiplier to force spread consistency at high weights&lt;/p&gt;</summary>
  </entry>
</feed>