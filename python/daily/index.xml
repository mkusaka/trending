<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T01:38:22Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TMElyralab/MuseV</title>
    <updated>2024-04-01T01:38:22Z</updated>
    <id>tag:github.com,2024-04-01:/TMElyralab/MuseV</id>
    <link href="https://github.com/TMElyralab/MuseV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MuseV: Infinite-length and High Fidelity Virtual Human Video Generation with Visual Conditioned Parallel Denoising&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MuseV &lt;a href=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/README.md&#34;&gt;English&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/README-zh.md&#34;&gt;中文&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;font size=&#34;5&#34;&gt;MuseV: Infinite-length and High Fidelity Virtual Human Video Generation with Visual Conditioned Parallel Denoising &lt;br&gt; Zhiqiang Xia &lt;sup&gt;*&lt;/sup&gt;, Zhaokang Chen&lt;sup&gt;*&lt;/sup&gt;, Bin Wu&lt;sup&gt;†&lt;/sup&gt;, Chao Li, Kwok-Wai Hung, Chao Zhan, Yingjie He, Wenjiang Zhou (&lt;sup&gt;*&lt;/sup&gt;co-first author, &lt;sup&gt;†&lt;/sup&gt;Corresponding Author, &lt;a href=&#34;mailto:benbinwu@tencent.com&#34;&gt;benbinwu@tencent.com&lt;/a&gt;) &lt;/font&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/TMElyralab/MuseV&#34;&gt;github&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://huggingface.co/TMElyralab/MuseV&#34;&gt;huggingface&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;&lt;a href=&#34;https://huggingface.co/spaces/AnchorFake/MuseVDemo&#34;&gt;HuggingfaceSpace&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;[project](comming soon)&lt;/strong&gt; &lt;strong&gt;Technical report (comming soon)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We have setup &lt;strong&gt;the world simulator vision since March 2023, believing diffusion models can simulate the world&lt;/strong&gt;. &lt;code&gt;MuseV&lt;/code&gt; was a milestone achieved around &lt;strong&gt;July 2023&lt;/strong&gt;. Amazed by the progress of Sora, we decided to opensource &lt;code&gt;MuseV&lt;/code&gt;, hopefully it will benefit the community. Next we will move on to the promising diffusion+transformer scheme.&lt;/p&gt; &#xA;&lt;p&gt;We will soon release &lt;code&gt;MuseTalk&lt;/code&gt;, a real-time high quality lip sync model, which can be applied with MuseV as a complete virtual human generation solution. Please stay tuned!&lt;/p&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;MuseV&lt;/code&gt; is a diffusion-based virtual human video generation framework, which&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;supports &lt;strong&gt;infinite length&lt;/strong&gt; generation using a novel &lt;strong&gt;Visual Conditioned Parallel Denoising scheme&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;checkpoint available for virtual human video generation trained on human dataset.&lt;/li&gt; &#xA; &lt;li&gt;supports Image2Video, Text2Image2Video, Video2Video.&lt;/li&gt; &#xA; &lt;li&gt;compatible with the &lt;strong&gt;Stable Diffusion ecosystem&lt;/strong&gt;, including &lt;code&gt;base_model&lt;/code&gt;, &lt;code&gt;lora&lt;/code&gt;, &lt;code&gt;controlnet&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;supports multi reference image technology, including &lt;code&gt;IPAdapter&lt;/code&gt;, &lt;code&gt;ReferenceOnly&lt;/code&gt;, &lt;code&gt;ReferenceNet&lt;/code&gt;, &lt;code&gt;IPAdapterFaceID&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;training codes (comming very soon).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Important bug fixes&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;musev_referencenet_pose&lt;/code&gt;: model_name of &lt;code&gt;unet&lt;/code&gt;, &lt;code&gt;ip_adapter&lt;/code&gt; of Command is not correct, please use &lt;code&gt;musev_referencenet_pose&lt;/code&gt; instead of &lt;code&gt;musev_referencenet&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;News&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[03/27/2024] release &lt;code&gt;MuseV&lt;/code&gt; project and trained model &lt;code&gt;musev&lt;/code&gt;, &lt;code&gt;muse_referencenet&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[03/30/2024] add huggingface space gradio to generate video in gui&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Model&lt;/h2&gt; &#xA;&lt;h3&gt;Overview of model structure&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/models/musev_structure.png&#34; alt=&#34;model_structure&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Parallel denoising&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data//models/parallel_denoise.png&#34; alt=&#34;parallel_denoise&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cases&lt;/h2&gt; &#xA;&lt;p&gt;All frames were generated directly from text2video model, without any post process.&lt;/p&gt; &#xA;&lt;!-- # TODO: // use youtu video link? --&gt; &#xA;&lt;p&gt;Examples bellow can be accessed at &lt;code&gt;configs/tasks/example.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Text/Image2Video&lt;/h3&gt; &#xA;&lt;h4&gt;Human&lt;/h4&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr style=&#34;font-weight: bolder;text-align:center;&#34;&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt;image&lt;/td&gt; &#xA;   &lt;td width=&#34;45%&#34;&gt;video &lt;/td&gt; &#xA;   &lt;td width=&#34;5%&#34;&gt;prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/yongen.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/732cf1fd-25e7-494e-b462-969c9425d277&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt;(masterpiece, best quality, highres:1),(1girl, solo:1),(beautiful face, soft skin, costume:1),(eye blinks:{eye_blinks_factor}),(head wave:1.3) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/jinkesi2.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/62b533d3-95f3-48db-889d-75dde1ad04b7&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1),(1girl, solo:1),(beautiful face, soft skin, costume:1),(eye blinks:{eye_blinks_factor}),(head wave:1.3) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/seaside4.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/9b75a46c-f4e6-45ef-ad02-05729f091c8f&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1), peaceful beautiful sea scene &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/seaside_girl.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/d0f3b401-09bf-4018-81c3-569ec24a4de9&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1), peaceful beautiful sea scene &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- guitar  --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/boy_play_guitar.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/61bf955e-7161-44c8-a498-8811c4f4eb4f&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1), playing guitar &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/girl_play_guitar2.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/40982aa7-9f6a-4e44-8ef6-3f185d284e6a&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1), playing guitar &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/boy_play_guitar2.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/69ea9d0c-5ed0-44b9-bca9-a4829c8d8b68&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1), playing guitar &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/girl_play_guitar4.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/d242e8a4-08ab-474f-b4a8-b718780d2991&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1), playing guitar &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;!-- famous people --&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/dufu.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/28294baa-b996-420f-b1fb-046542adf87d&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1),(1man, solo:1),(beautiful face, soft skin, costume:1),(eye blinks:{eye_blinks_factor}),(head wave:1.3) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/Mona_Lisa.jpg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/1ce11da6-14c6-4dcd-b7f9-7a5f060d71fb&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1),(1girl, solo:1),(beautiful face, soft skin, costume:1),(eye blinks:{eye_blinks_factor}),(head wave:1.3) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/Portrait-of-Dr.-Gachet.jpg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/4072410a-ecea-4ee5-a9b4-735f9f462d51&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1),(1man, solo:1),(beautiful face, soft skin, costume:1),(eye blinks:{eye_blinks_factor}),(head wave:1.3) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/Self-Portrait-with-Cropped-Hair.jpg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/5148beda-a1e1-44f0-ad84-2fb99ad73a11&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1),(1girl, solo:1),(beautiful face, soft skin, costume:1),(eye blinks:{eye_blinks_factor}),(head wave:1.3) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/The-Laughing-Cavalier.jpg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/df1c5943-15a3-41f5-afe7-e7497c81836d&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1),(1girl, solo:1),(beautiful face, soft skin, costume:1),(eye blinks:{eye_blinks_factor}),(head wave:1.3) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Scene&lt;/h4&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr style=&#34;font-weight: bolder;text-align:center;&#34;&gt; &#xA;   &lt;td width=&#34;35%&#34;&gt;image&lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt;video&lt;/td&gt; &#xA;   &lt;td width=&#34;15%&#34;&gt;prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/waterfall4.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/852daeb6-6b58-4931-81f9-0dddfa1b4ea5&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1), peaceful beautiful waterfall, an endless waterfall &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/river.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/d5cb2798-b5ce-497a-a058-ae63d664028e&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt;(masterpiece, best quality, highres:1), peaceful beautiful river &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/seaside2.jpeg&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/4a4d527a-6203-411f-afe9-31c992d26816&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt;(masterpiece, best quality, highres:1), peaceful beautiful sea scene &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;VideoMiddle2Video&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;pose2video&lt;/strong&gt; In &lt;code&gt;duffy&lt;/code&gt; mode, pose of the vision condition frame is not aligned with the first frame of control video. &lt;code&gt;posealign&lt;/code&gt; will solve the problem.&lt;/p&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr style=&#34;font-weight: bolder;text-align:center;&#34;&gt; &#xA;   &lt;td width=&#34;25%&#34;&gt;image&lt;/td&gt; &#xA;   &lt;td width=&#34;65%&#34;&gt;video&lt;/td&gt; &#xA;   &lt;td width=&#34;10%&#34;&gt;prompt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/spark_girl.png&#34; width=&#34;200&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/cyber_girl.png&#34; width=&#34;200&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/484cc69d-c316-4464-a55b-3df929780a8e&#34; width=&#34;400&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/TMElyralab/MuseV/main/data/images/duffy.png&#34; width=&#34;400&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/c44682e6-aafc-4730-8fc1-72825c1bacf2&#34; width=&#34;400&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;   &lt;td&gt; (masterpiece, best quality, highres:1) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;MuseTalk&lt;/h3&gt; &#xA;&lt;p&gt;The character of talk, &lt;code&gt;Sun Xinying&lt;/code&gt; is a supermodel KOL. You can follow her on &lt;a href=&#34;https://www.douyin.com/user/MS4wLjABAAAAWDThbMPN_6Xmm_JgXexbOii1K-httbu2APdG8DvDyM8&#34;&gt;douyin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table class=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr style=&#34;font-weight: bolder;&#34;&gt; &#xA;   &lt;td width=&#34;35%&#34;&gt;name&lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt;video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; talk &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/951188d1-4731-4e7f-bf40-03cacba17f2f&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; talk &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/ba0396ab-8aba-4440-803c-18b078ae1dd9&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; sing &lt;/td&gt; &#xA;   &lt;td&gt; &#xA;    &lt;video src=&#34;https://github.com/TMElyralab/MuseV/assets/163980830/50b8ffab-9307-4836-99e5-947e6ce7d112&#34; width=&#34;100&#34; controls preload&gt;&lt;/video&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h1&gt;TODO:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; technical report (comming soon).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; training codes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; release pretrained unet model, which is trained with controlnet、referencenet、IPAdapter, which is better on pose2video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support diffusion transformer generation framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; release &lt;code&gt;posealign&lt;/code&gt; module&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;Prepare python environment and install extra package like &lt;code&gt;diffusers&lt;/code&gt;, &lt;code&gt;controlnet_aux&lt;/code&gt;, &lt;code&gt;mmcm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prepare environment&lt;/h2&gt; &#xA;&lt;p&gt;You are recommended to use &lt;code&gt;docker&lt;/code&gt; primarily to prepare python environment.&lt;/p&gt; &#xA;&lt;h3&gt;prepare python env&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt;: we only test with docker, there are maybe trouble with conda, or requirement. We will try to fix it. Use &lt;code&gt;docker&lt;/code&gt; Please.&lt;/p&gt; &#xA;&lt;h4&gt;Method 1: docker&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;pull docker image&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull anchorxia/musev:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;run docker&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --gpus all -it --entrypoint /bin/bash anchorxia/musev:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default conda env is &lt;code&gt;musev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Method 2: conda&lt;/h4&gt; &#xA;&lt;p&gt;create conda environment from environment.yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create --name musev --file ./environment.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Method 3: pip requirements&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Prepare mmlab package&lt;/h4&gt; &#xA;&lt;p&gt;if not use docker, should install mmlab package additionally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install--no-cache-dir -U openmim &#xA;mim install mmengine &#xA;mim install &#34;mmcv&amp;gt;=2.0.1&#34; &#xA;mim install &#34;mmdet&amp;gt;=3.1.0&#34; &#xA;mim install &#34;mmpose&amp;gt;=1.1.0&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prepare custom package / modified package&lt;/h3&gt; &#xA;&lt;h4&gt;clone&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive https://github.com/TMElyralab/MuseV.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;prepare PYTHONPATH&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;current_dir=$(pwd)&#xA;export PYTHONPATH=${PYTHONPATH}:${current_dir}/MuseV&#xA;export PYTHONPATH=${PYTHONPATH}:${current_dir}/MuseV/MMCM&#xA;export PYTHONPATH=${PYTHONPATH}:${current_dir}/MuseV/diffusers/src&#xA;export PYTHONPATH=${PYTHONPATH}:${current_dir}/MuseV/controlnet_aux/src&#xA;cd MuseV&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;MMCM&lt;/code&gt;: multi media, cross modal process package。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diffusers&lt;/code&gt;: modified diffusers package based on &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;controlnet_aux&lt;/code&gt;: modified based on &lt;a href=&#34;https://github.com/TMElyralab/controlnet_aux&#34;&gt;controlnet_aux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Download models&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://huggingface.co/TMElyralab/MuseV ./checkpoints&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;motion&lt;/code&gt;: text2video model, trained on tiny &lt;code&gt;ucf101&lt;/code&gt; and tiny &lt;code&gt;webvid&lt;/code&gt; dataset, approximately 60K videos text pairs. GPU memory consumption testing on &lt;code&gt;resolution&lt;/code&gt;$=512*512$, &lt;code&gt;time_size=12&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;musev/unet&lt;/code&gt;: only has and train &lt;code&gt;unet&lt;/code&gt; motion module. &lt;code&gt;GPU memory consumption&lt;/code&gt; $\approx 8G$.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;musev_referencenet&lt;/code&gt;: train &lt;code&gt;unet&lt;/code&gt; module, &lt;code&gt;referencenet&lt;/code&gt;, &lt;code&gt;IPAdapter&lt;/code&gt;. &lt;code&gt;GPU memory consumption&lt;/code&gt; $\approx 12G$. &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;unet&lt;/code&gt;: &lt;code&gt;motion&lt;/code&gt; module, which has &lt;code&gt;to_k&lt;/code&gt;, &lt;code&gt;to_v&lt;/code&gt; in &lt;code&gt;Attention&lt;/code&gt; layer refer to &lt;code&gt;IPAdapter&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;referencenet&lt;/code&gt;: similar to &lt;code&gt;AnimateAnyone&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ip_adapter_image_proj.bin&lt;/code&gt;: images clip emb project layer, refer to &lt;code&gt;IPAdapter&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;musev_referencenet_pose&lt;/code&gt;: based on &lt;code&gt;musev_referencenet&lt;/code&gt;, fix &lt;code&gt;referencenet&lt;/code&gt;and &lt;code&gt;controlnet_pose&lt;/code&gt;, train &lt;code&gt;unet motion&lt;/code&gt; and &lt;code&gt;IPAdapter&lt;/code&gt;. &lt;code&gt;GPU memory consumption&lt;/code&gt; $\approx 12G$&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t2i/sd1.5&lt;/code&gt;: text2image model, parameter are frozen when training motion module. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;majicmixRealv6Fp16: example, could be replaced with other t2i base. download from &lt;a href=&#34;https://civitai.com/models/43331/majicmix-realistic&#34;&gt;majicmixRealv6Fp16&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IP-Adapter/models&lt;/code&gt;: download from &lt;a href=&#34;https://huggingface.co/h94/IP-Adapter/tree/main&#34;&gt;IPAdapter&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;image_encoder&lt;/code&gt;: vision clip model.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ip-adapter_sd15.bin&lt;/code&gt;: original IPAdapter model checkpoint.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ip-adapter-faceid_sd15.bin&lt;/code&gt;: original IPAdapter model checkpoint.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;h3&gt;Prepare model_path&lt;/h3&gt; &#xA;&lt;p&gt;Skip this step when run example task with example inference command. Set model path and abbreviation in config, to use abbreviation in inference script.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;T2I SD：ref to &lt;code&gt;musev/configs/model/T2I_all_model.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Motion Unet: refer to &lt;code&gt;musev/configs/model/motion_model.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Task: refer to &lt;code&gt;musev/configs/tasks/example.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;musev_referencenet&lt;/h3&gt; &#xA;&lt;h4&gt;text2video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/inference/text2video.py   --sd_model_name majicmixRealv6Fp16   --unet_model_name musev_referencenet --referencenet_model_name musev_referencenet --ip_adapter_model_name musev_referencenet   -test_data_path ./configs/tasks/example.yaml  --output_dir ./output  --n_batch 1  --target_datas yongen  --vision_clip_extractor_class_name ImageClipVisionFeatureExtractor --vision_clip_model_path ./checkpoints/IP-Adapter/models/image_encoder  --time_size 12 --fps 12  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;common parameters&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;test_data_path&lt;/code&gt;: task_path in yaml extention&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;target_datas&lt;/code&gt;: sep is &lt;code&gt;,&lt;/code&gt;, sample subtasks if &lt;code&gt;name&lt;/code&gt; in &lt;code&gt;test_data_path&lt;/code&gt; is in &lt;code&gt;target_datas&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sd_model_cfg_path&lt;/code&gt;: T2I sd models path, model config path or model path.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sd_model_name&lt;/code&gt;: sd model name, which use to choose full model path in sd_model_cfg_path. multi model names with sep =&lt;code&gt;,&lt;/code&gt;, or &lt;code&gt;all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unet_model_cfg_path&lt;/code&gt;: motion unet model config path or model path。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unet_model_name&lt;/code&gt;: unet model name, use to get model path in &lt;code&gt;unet_model_cfg_path&lt;/code&gt;, and init unet class instance in &lt;code&gt;musev/models/unet_loader.py&lt;/code&gt;. multi model names with sep=&lt;code&gt;,&lt;/code&gt;, or &lt;code&gt;all&lt;/code&gt;. If &lt;code&gt;unet_model_cfg_path&lt;/code&gt; is model path, &lt;code&gt;unet_name&lt;/code&gt; must be supported in &lt;code&gt;musev/models/unet_loader.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;time_size&lt;/code&gt;: num_frames per diffusion denoise generation。default=&lt;code&gt;12&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n_batch&lt;/code&gt;: generation numbers of shot, $total_frames=n_batch * time_size + n_viscond$, default=&lt;code&gt;1&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;context_frames&lt;/code&gt;: context_frames num. If &lt;code&gt;time_size&lt;/code&gt; &amp;gt; &lt;code&gt;context_frame&lt;/code&gt;，&lt;code&gt;time_size&lt;/code&gt; window is split into many sub-windows for parallel denoising&#34;。 default=&lt;code&gt;12&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To generate long videos, there two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;visual conditioned parallel denoise&lt;/code&gt;: set &lt;code&gt;n_batch=1&lt;/code&gt;, &lt;code&gt;time_size&lt;/code&gt; = all frames you want.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;traditional end-to-end&lt;/code&gt;: set &lt;code&gt;time_size&lt;/code&gt; = &lt;code&gt;context_frames&lt;/code&gt; = frames of a shot (&lt;code&gt;12&lt;/code&gt;), &lt;code&gt;context_overlap&lt;/code&gt; = 0；&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;model parameters&lt;/strong&gt;： supports &lt;code&gt;referencenet&lt;/code&gt;, &lt;code&gt;IPAdapter&lt;/code&gt;, &lt;code&gt;IPAdapterFaceID&lt;/code&gt;, &lt;code&gt;Facein&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;referencenet_model_name: &lt;code&gt;referencenet&lt;/code&gt; model name.&lt;/li&gt; &#xA; &lt;li&gt;ImageClipVisionFeatureExtractor: &lt;code&gt;ImageEmbExtractor&lt;/code&gt; name, extractor vision clip emb used in &lt;code&gt;IPAdapter&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;vision_clip_model_path: &lt;code&gt;ImageClipVisionFeatureExtractor&lt;/code&gt; model path.&lt;/li&gt; &#xA; &lt;li&gt;ip_adapter_model_name: from &lt;code&gt;IPAdapter&lt;/code&gt;, it&#39;s &lt;code&gt;ImagePromptEmbProj&lt;/code&gt;, used with &lt;code&gt;ImageEmbExtractor&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;ip_adapter_face_model_name: &lt;code&gt;IPAdapterFaceID&lt;/code&gt;, from &lt;code&gt;IPAdapter&lt;/code&gt; to keep faceid，should set &lt;code&gt;face_image_path&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Some parameters that affect the motion range and generation results&lt;/strong&gt;：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;video_guidance_scale&lt;/code&gt;: Similar to text2image, control influence between cond and uncond，default=&lt;code&gt;3.5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;guidance_scale&lt;/code&gt;: The parameter ratio in the first frame image between cond and uncond, default=&lt;code&gt;3.5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;use_condition_image&lt;/code&gt;: Whether to use the given first frame for video generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;redraw_condition_image&lt;/code&gt;: Whether to redraw the given first frame image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;video_negative_prompt&lt;/code&gt;: Abbreviation of full &lt;code&gt;negative_prompt&lt;/code&gt; in config path. default=&lt;code&gt;V2&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;video2video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/inference/video2video.py --sd_model_name majicmixRealv6Fp16  --unet_model_name musev_referencenet --referencenet_model_name   musev_referencenet --ip_adapter_model_name musev_referencenet    -test_data_path ./configs/tasks/example.yaml    --vision_clip_extractor_class_name ImageClipVisionFeatureExtractor --vision_clip_model_path ./checkpoints/IP-Adapter/models/image_encoder      --output_dir ./output  --n_batch 1 --controlnet_name dwpose_body_hand  --which2video &#34;video_middle&#34;  --target_datas dacne1 --fps 12 --time_size 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;import parameters&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most of the parameters are same as &lt;code&gt;musev_text2video&lt;/code&gt;. Special parameters of &lt;code&gt;video2video&lt;/code&gt; are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;need to set &lt;code&gt;video_path&lt;/code&gt; in &lt;code&gt;test_data&lt;/code&gt;. Now supports &lt;code&gt;rgb video&lt;/code&gt; and &lt;code&gt;controlnet_middle_video&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;which2video&lt;/code&gt;: whether &lt;code&gt;rgb&lt;/code&gt; video influences initial noise, more strongly than controlnet condition. If &lt;code&gt;True&lt;/code&gt;, then redraw video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;controlnet_name&lt;/code&gt;：whether to use &lt;code&gt;controlnet condition&lt;/code&gt;, such as &lt;code&gt;dwpose,depth&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;video_is_middle&lt;/code&gt;: &lt;code&gt;video_path&lt;/code&gt; is &lt;code&gt;rgb video&lt;/code&gt; or &lt;code&gt;controlnet_middle_video&lt;/code&gt;. Can be set for every &lt;code&gt;test_data&lt;/code&gt; in test_data_path.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;video_has_condition&lt;/code&gt;: whether condtion_images is aligned with the first frame of video_path. If Not, firstly generate &lt;code&gt;condition_images&lt;/code&gt; and then align with concatation. set in &lt;code&gt;test_data&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;all controlnet_names refer to &lt;a href=&#34;https://github.com/TMElyralab/MMCM/raw/main/mmcm/vision/feature_extractor/controlnet.py#L513&#34;&gt;mmcm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[&#39;pose&#39;, &#39;pose_body&#39;, &#39;pose_hand&#39;, &#39;pose_face&#39;, &#39;pose_hand_body&#39;, &#39;pose_hand_face&#39;, &#39;dwpose&#39;, &#39;dwpose_face&#39;, &#39;dwpose_hand&#39;, &#39;dwpose_body&#39;, &#39;dwpose_body_hand&#39;, &#39;canny&#39;, &#39;tile&#39;, &#39;hed&#39;, &#39;hed_scribble&#39;, &#39;depth&#39;, &#39;pidi&#39;, &#39;normal_bae&#39;, &#39;lineart&#39;, &#39;lineart_anime&#39;, &#39;zoe&#39;, &#39;sam&#39;, &#39;mobile_sam&#39;, &#39;leres&#39;, &#39;content&#39;, &#39;face_detector&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;musev_referencenet_pose&lt;/h3&gt; &#xA;&lt;p&gt;Only used for &lt;code&gt;pose2video&lt;/code&gt; train based on &lt;code&gt;musev_referencenet&lt;/code&gt;, fix &lt;code&gt;referencenet&lt;/code&gt;, &lt;code&gt;pose-controlnet&lt;/code&gt;, and &lt;code&gt;T2I&lt;/code&gt;, train &lt;code&gt;motion&lt;/code&gt; module and &lt;code&gt;IPAdapter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/inference/video2video.py --sd_model_name majicmixRealv6Fp16  --unet_model_name musev_referencenet_pose --referencenet_model_name   musev_referencenet --ip_adapter_model_name musev_referencenet_pose    -test_data_path ./configs/tasks/example.yaml    --vision_clip_extractor_class_name ImageClipVisionFeatureExtractor --vision_clip_model_path ./checkpoints/IP-Adapter/models/image_encoder      --output_dir ./output  --n_batch 1 --controlnet_name dwpose_body_hand  --which2video &#34;video_middle&#34;  --target_datas  dacne1   --fps 12 --time_size 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;musev&lt;/h3&gt; &#xA;&lt;p&gt;Only has motion module, no referencenet, requiring less gpu memory.&lt;/p&gt; &#xA;&lt;h4&gt;text2video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/inference/text2video.py   --sd_model_name majicmixRealv6Fp16   --unet_model_name musev   -test_data_path ./configs/tasks/example.yaml  --output_dir ./output  --n_batch 1  --target_datas yongen  --time_size 12 --fps 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;video2video&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/inference/video2video.py --sd_model_name majicmixRealv6Fp16  --unet_model_name musev    -test_data_path ./configs/tasks/example.yaml --output_dir ./output  --n_batch 1 --controlnet_name dwpose_body_hand  --which2video &#34;video_middle&#34;  --target_datas  dacne1   --fps 12 --time_size 12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gradio demo&lt;/h3&gt; &#xA;&lt;p&gt;MuseV provides gradio script to generate a GUI in a local machine to generate video conveniently.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd scripts/gradio&#xA;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;MuseV has referred much to &lt;a href=&#34;https://github.com/showlab/Tune-A-Video&#34;&gt;TuneAVideo&lt;/a&gt;, &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt;, &lt;a href=&#34;https://github.com/MooreThreads/Moore-AnimateAnyone/tree/master/src/pipelines&#34;&gt;Moore-AnimateAnyone&lt;/a&gt;, &lt;a href=&#34;https://github.com/guoyww/AnimateDiff&#34;&gt;animatediff&lt;/a&gt;, &lt;a href=&#34;https://github.com/tencent-ailab/IP-Adapter&#34;&gt;IP-Adapter&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2311.17117&#34;&gt;AnimateAnyone&lt;/a&gt;, &lt;a href=&#34;https://arxiv.org/abs/2303.08320&#34;&gt;VideoFusion&lt;/a&gt;, &lt;a href=&#34;https://github.com/deepinsight/insightface&#34;&gt;insightface&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;MuseV has been built on &lt;code&gt;ucf101&lt;/code&gt; and &lt;code&gt;webvid&lt;/code&gt; datasets.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Thanks for open-sourcing!&lt;/p&gt; &#xA;&lt;h1&gt;Limitation&lt;/h1&gt; &#xA;&lt;p&gt;There are still many limitations, including&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Lack of generalization ability. Some visual condition image perform well, some perform bad. Some t2i pretraied model perform well, some perform bad.&lt;/li&gt; &#xA; &lt;li&gt;Limited types of video generation and limited motion range, partly because of limited types of training data. The released &lt;code&gt;MuseV&lt;/code&gt; has been trained on approximately 60K human text-video pairs with resolution &lt;code&gt;512*320&lt;/code&gt;. &lt;code&gt;MuseV&lt;/code&gt; has greater motion range while lower video quality at lower resolution. &lt;code&gt;MuseV&lt;/code&gt; tends to generate less motion range with high video quality. Trained on larger, higher resolution, higher quality text-video dataset may make &lt;code&gt;MuseV&lt;/code&gt; better.&lt;/li&gt; &#xA; &lt;li&gt;Watermarks may appear because of &lt;code&gt;webvid&lt;/code&gt;. A cleaner dataset withour watermarks may solve this issue.&lt;/li&gt; &#xA; &lt;li&gt;Limited types of long video generation. Visual Conditioned Parallel Denoise can solve accumulated error of video generation, but the current method is only suitable for relatively fixed camera scenes.&lt;/li&gt; &#xA; &lt;li&gt;Undertrained referencenet and IP-Adapter, beacause of limited time and limited resources.&lt;/li&gt; &#xA; &lt;li&gt;Understructured code. &lt;code&gt;MuseV&lt;/code&gt; supports rich and dynamic features, but with complex and unrefacted codes. It takes time to familiarize.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- # Contribution 暂时不需要组织开源共建 --&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bib&#34;&gt;@article{musev,&#xA;  title={MuseV: Infinite-length and High Fidelity Virtual Human Video Generation with Visual Conditioned Parallel Denoising},&#xA;  author={Xia, Zhiqiang and Chen, Zhaokang and Wu, Bin and Li, Chao and Hung, Kwok-Wai and Zhan, Chao and He, Yingjie and Zhou, Wenjiang},&#xA;  journal={arxiv},&#xA;  year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Disclaimer/License&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;code&lt;/code&gt;: The code of MuseV is released under the MIT License. There is no limitation for both academic and commercial usage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: The trained model are available for non-commercial research purposes only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;other opensource model&lt;/code&gt;: Other open-source models used must comply with their license, such as &lt;code&gt;insightface&lt;/code&gt;, &lt;code&gt;IP-Adapter&lt;/code&gt;, &lt;code&gt;ft-mse-vae&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;The testdata are collected from internet, which are available for non-commercial research purposes only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AIGC&lt;/code&gt;: This project strives to impact the domain of AI-driven video generation positively. Users are granted the freedom to create videos using this tool, but they are expected to comply with local laws and utilize it responsibly. The developers do not assume any responsibility for potential misuse by users.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>MsLolita/backpack-volume-auto</title>
    <updated>2024-04-01T01:38:22Z</updated>
    <id>tag:github.com,2024-04-01:/MsLolita/backpack-volume-auto</id>
    <link href="https://github.com/MsLolita/backpack-volume-auto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Backpack Trading 🔹&lt;/h1&gt; &#xA;&lt;p&gt;Discover the latest &lt;code&gt;&amp;lt;crypto/&amp;gt;&lt;/code&gt; moves in my Telegram Channel:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/web3_enjoyer_club&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Web3_Enjoyer_%7C_Subscribe_%F0%9F%A5%B0-0A66C2?style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;My Channel 🥰&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bot used to create trading volume on the &lt;a href=&#34;https://backpack.exchange/refer/binance&#34;&gt;Backpack exchange&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start 📚&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To install libraries on Windows click on &lt;code&gt;INSTALL.bat&lt;/code&gt; (or in console: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;To start bot use &lt;code&gt;START.bat&lt;/code&gt; (or in console: &lt;code&gt;python main.py&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Configuration 📧&lt;/h3&gt; &#xA;&lt;p&gt;You have the flexibility to customize parameters in &lt;code&gt;inputs/config.py&lt;/code&gt; 🧬&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MsLolita/pybackpack/assets/58307006/f0ac849c-5ba1-4941-8d81-b3c1434284f6&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Api keys configuration.🔒&lt;/p&gt; &lt;p&gt;You have to put &lt;a href=&#34;https://backpack.exchange/settings/api-keys&#34;&gt;api key and secret key&lt;/a&gt; with &#39;:&#39; (api_key:secret_key) into &lt;code&gt;accounts.txt&lt;/code&gt; 🧬&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/MsLolita/pybackpack/assets/58307006/910e8383-c7cc-4336-8829-69ad5fe24996&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Proxy Setup 🔒&lt;/p&gt; &lt;p&gt;Configure your proxies with the &lt;em&gt;ANY&lt;/em&gt; (socks, http/s, ...) format in &lt;code&gt;inputs/proxies.txt&lt;/code&gt; 🌐&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/MsLolita/VeloData/assets/58307006/a2c95484-52b6-497a-b89e-73b89d953d8c&#34; alt=&#34;Proxy Configuration&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>google-deepmind/long-form-factuality</title>
    <updated>2024-04-01T01:38:22Z</updated>
    <id>tag:github.com,2024-04-01:/google-deepmind/long-form-factuality</id>
    <link href="https://github.com/google-deepmind/long-form-factuality" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Benchmarking long-form factuality in large language models. Original code for our paper &#34;Long-form factuality in large language models&#34;.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Long-Form Factuality in Large Language Models&lt;/h1&gt; &#xA;&lt;p&gt;This is the official code release accompanying our paper &lt;a href=&#34;https://arxiv.org/abs/2403.18802&#34;&gt;&#34;Long-form factuality in large language models&#34;&lt;/a&gt;. This repository contains:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;LongFact&lt;/strong&gt;: A prompt set of 2,280 fact-seeking prompts requiring long-form responses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Search-Augmented Factuality Evaluator (SAFE)&lt;/strong&gt;: Automatic evaluation of model responses in long-form factuality settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F1@K&lt;/strong&gt;: Extending F1 score to long-form settings using recall from human-preferred length.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Experimentation pipeline&lt;/strong&gt; for benchmarking OpenAI and Anthropic models using LongFact + SAFE.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First, clone our GitHub repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/google-deepmind/long-form-factuality.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then navigate to the newly-created folder.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd long-form-factuality&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, create a new Python 3.10+ environment using &lt;code&gt;conda&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create --name longfact python=3.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Activate the newly-created environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda activate longfact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All external package requirements are listed in &lt;code&gt;requirements.txt&lt;/code&gt;. To install all packages, and run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;LongFact&lt;/h3&gt; &#xA;&lt;p&gt;The full prompt set for LongFact is available in the &lt;code&gt;longfact/&lt;/code&gt; folder. See the README in &lt;code&gt;longfact/&lt;/code&gt; for more details about the dataset.&lt;/p&gt; &#xA;&lt;p&gt;To run the data-generation pipeline that we used to generate LongFact, use the following command. Refer to the README in &lt;code&gt;data_creation/&lt;/code&gt; for additional details about the data-generation pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m data_creation.pipeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SAFE&lt;/h3&gt; &#xA;&lt;p&gt;Our full implementation of SAFE is located in &lt;code&gt;eval/safe/&lt;/code&gt;. See the README in &lt;code&gt;eval/safe/&lt;/code&gt; for more information about how SAFE works.&lt;/p&gt; &#xA;&lt;p&gt;To run the pipeline for evaluating SAFE against FActScore human annotations, use the following command. Refer to the README in &lt;code&gt;eval/&lt;/code&gt; for additional details about this experiment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m eval.correlation_vs_factscore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Benchmarking models&lt;/h3&gt; &#xA;&lt;p&gt;To benchmark OpenAI and Anthropic models, first add your API keys to &lt;code&gt;common/shared_config.py&lt;/code&gt; (see README in &lt;code&gt;common/&lt;/code&gt; for more information; be sure not to publish these keys). To obtain model responses for a given prompt set, use the following command. Refer to the README in &lt;code&gt;main/&lt;/code&gt; for additional details about our main experimentation pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m main.pipeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, to evaluate prompt-response pairs from our main experimentation pipeline using SAFE, use the following command, making sure to add the path to the &lt;code&gt;.json&lt;/code&gt; file containing the prompt-response pairs to be evaluated to the &lt;code&gt;--result_path&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m eval.run_eval \&#xA;    --result_path=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;Each file in this directory has a corresponding unit test with the &lt;code&gt;_test&lt;/code&gt; suffix (e.g., &lt;code&gt;file.py&lt;/code&gt; would have &lt;code&gt;file_test.py&lt;/code&gt; for unit tests). Run commands for individual tests are shown in the unit test files. To run all unit tests, use the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m unittest discover -s ./ -p &#34;*_test.py&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citing this work&lt;/h2&gt; &#xA;&lt;p&gt;If you find our code useful, please cite our &lt;a href=&#34;https://arxiv.org/abs/2403.18802&#34;&gt;paper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{wei2024long,&#xA;  title={Long-form factuality in large language models},&#xA;  author={Wei, Jerry and Yang, Chengrun and Song, Xinying and Lu, Yifeng and Hu, Nathan and Huang, Jie and Tran, Dustin and Peng, Daiyi and Liu, Ruibo and Huang, Da and Du, Cosmo and Le, Quoc V},&#xA;  journal={arXiv preprint arXiv:2403.18802},&#xA;  year={2024}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License and disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2024 DeepMind Technologies Limited&lt;/p&gt; &#xA;&lt;p&gt;All software is licensed under the Apache License, Version 2.0 (Apache 2.0); you may not use this file except in compliance with the Apache 2.0 license. You may obtain a copy of the Apache 2.0 license at: &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All other materials are licensed under the Creative Commons Attribution 4.0 International License (CC-BY). You may obtain a copy of the CC-BY license at: &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/legalcode&#34;&gt;https://creativecommons.org/licenses/by/4.0/legalcode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unless required by applicable law or agreed to in writing, all software and materials distributed here under the Apache 2.0 or CC-BY licenses are distributed on an &#34;AS IS&#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the licenses for the specific language governing permissions and limitations under those licenses.&lt;/p&gt; &#xA;&lt;p&gt;This is not an official Google product.&lt;/p&gt;</summary>
  </entry>
</feed>