<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-06T01:38:39Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xaoyaoo/PyWxDump</title>
    <updated>2023-12-06T01:38:39Z</updated>
    <id>tag:github.com,2023-12-06:/xaoyaoo/PyWxDump</id>
    <link href="https://github.com/xaoyaoo/PyWxDump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;获取微信账号信息(昵称/账号/手机/邮箱/数据库密钥/wxid)；PC微信数据库读取、解密脚本；聊天记录查看工具；聊天记录导出为html(包含语音图片)。支持多账户信息获取，支持所有微信版本。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;center&gt;&#xA;  PyWxDump&#xA; &lt;/center&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-3-blue.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/languages/code-size/xaoyaoo/pywxdump&#34; alt=&#34;GitHub code size in bytes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/xaoyaoo/pywxdump/total&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xaoyaoo/PyWxDump.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/fork&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/xaoyaoo/PyWxDump.svg?sanitize=true&#34; alt=&#34;GitHub forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/xaoyaoo/PyWxDump&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pywxdump/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/pywxdump&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/pywxdump/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/wheel/pywxdump&#34; alt=&#34;Wheel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/pywxdump&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/pywxdump&#34; alt=&#34;PyPI-Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/l/pywxdump&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/actions/workflows/publish.yml/badge.svg?sanitize=true&#34; alt=&#34;Publish&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;更新日志(点击展开)：&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;2023.12.03 增加分析聊天记录的功能，生成词云、绘制折线图等&lt;/li&gt; &#xA;  &lt;li&gt;2023.12.03 修复部分bug,更改获取wx文件夹方式 &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/34&#34;&gt;#34&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.12.01 为exe添加图标&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.30 优化命令行界面&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.29 添加异形wxid获取方式，添加用户路径自动获取，重建说明文档，对新手更友好&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.28 修改wxid获取方式，修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.27 解决相对导入包的问题,完善错误提示&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.25 聊天记录查看工具bootstrap更换国内cdn&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.22 添加all命令中解密错误数据日志写入文件,修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.16 增加聊天记录导出为html&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.15 添加test文件，添加自动构建可执行文件的脚本,添加版本描述&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.15 [v2.2.5变化较大]重构解密脚本的返回值，重构命令行参数&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.15 修复无法获取wxid的bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.14 修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.11 添加聊天记录解析，查看工具,修复部分bug&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.10 修复wxdump wx_db命令行参数错误 &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/19&#34;&gt;#19&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.11.08 增加3.9.8.15版本支持&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.31 修复3.9.2.*版本无法正常运行&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.28 添加自动发布到pypi的github action&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.28 修复3.9.5.91版本的偏移&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.24 add auto get bias addr ,not need input key or wx folder path.&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.17 add LICENSE&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.16 添加&#34;3.9.7.15&#34;版本的偏移&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/12&#34;&gt;#12&lt;/a&gt; ,感谢@&lt;a href=&#34;https://github.com/GentlemanII&#34;&gt;GentlemanII&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.15 将整个项目作为包安装，增加命令行统一操作&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.14 整体重构项目，优化代码，增加命令行统一操作&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.11 添加&#34;3.9.5.81&#34;版本的偏移&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/10&#34;&gt;#10&lt;/a&gt; ,感谢@&lt;a href=&#34;https://github.com/sv3nbeast&#34;&gt;sv3nbeast&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.09 获取key基址偏移可以根据微信文件夹获取，不需要输入key&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.09 优化代码，删减没必要代码，重新修改获取基址代码，加快运行速度（需要安装新的库 pymem）&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.07 修改获取基址内存搜索方式，防止进入死循环&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.07 增加了3.9.7.29版本的偏移地址&lt;/li&gt; &#xA;  &lt;li&gt;2023.10.06 增加命令行解密数据库&lt;/li&gt; &#xA;  &lt;li&gt;2023.09.28 增加了数据库部分解析&lt;/li&gt; &#xA;  &lt;li&gt;2023.09.15 增加了3.9.7.25版本的偏移地址&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;更新计划&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.每个人聊天记录分析，生成词云。&lt;/li&gt; &#xA; &lt;li&gt;2.分析每个人每天的聊天数量，生成折线图（天-聊天数量）&lt;/li&gt; &#xA; &lt;li&gt;3.分析不同的人的月聊天数量，年聊天数量，生成折线图&lt;/li&gt; &#xA; &lt;li&gt;4.生成年度可视化报告&lt;/li&gt; &#xA; &lt;li&gt;5.创建GUI图形界面，方便使用&lt;/li&gt; &#xA; &lt;li&gt;6.查看群聊中具体发言成员的ID &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues/31&#34;&gt;#31&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;7.增加数据库合并功能，方便查看&lt;/li&gt; &#xA; &lt;li&gt;8.增加企业微信的支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;注: 欢迎大家提供更多的想法，或者提供代码，一起完善这个项目。&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;贡献代码方法(点击展开)：&lt;/summary&gt; &#xA; &lt;p&gt;提交拉取请求（Pull Request），请按照以下步骤进行操作：&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Fork 仓库：首先，在项目的 GitHub 页面上点击 &#34;Fork&#34; 按钮，将项目的代码仓库 fork 到你自己的 GitHub 账号下。&lt;/li&gt; &#xA;  &lt;li&gt;克隆仓库：在你自己的 GitHub 账号下找到 fork 后的项目，点击 &lt;code&gt;Clone or download&lt;/code&gt;按钮，获取仓库的 URL。然后在本地使用 Git 命令克隆仓库到你的电脑上：&lt;code&gt;git clone 仓库的URL&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;创建分支：在本地仓库中创建一个新的分支，用于进行你的修改：&lt;code&gt;git checkout -b 你的分支名&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;进行修改：在新创建的分支中进行你需要的修改，包括修复错误、改进现有功能或添加新功能。&lt;/li&gt; &#xA;  &lt;li&gt;提交修改：使用 &lt;code&gt;git add&lt;/code&gt; 和 &lt;code&gt;git commit&lt;/code&gt; 命令将修改提交到本地仓库中： &lt;pre&gt;&lt;code&gt;git add .&#xA;git commit -m &#34;提交信息&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;推送分支：使用 &lt;code&gt;git push&lt;/code&gt; 命令将你的本地分支推送到你的 GitHub 仓库中：&lt;code&gt;git push origin 你的分支名&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;提交拉取请求：在你的 GitHub 仓库页面上切换到你刚刚推送的分支，点击 &#34;New pull request&#34; 按钮，填写一些说明信息，然后点击 &lt;code&gt;Create pull request&lt;/code&gt; 按钮，即可提交拉取请求。&lt;/li&gt; &#xA;  &lt;li&gt;等待审核：等待项目维护者审核你的拉取请求，如果通过审核，你的修改将会被合并到项目的主分支中&lt;/li&gt; &#xA;  &lt;li&gt;接着你就可以在右边的&lt;code&gt;contributors&lt;/code&gt;中看到你的名字了。&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;欢迎加入交流qq群：577704006 or 点击链接加入群聊&lt;a href=&#34;https://s.xaoyo.top/gOLUDl&#34;&gt;pywxdump功能交流&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://s.xaoyo.top/gOLUDl&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/doc/qq.png&#34; alt=&#34;QQ群&#34; title=&#34;加入QQ群&#34; height=&#34;280&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;一、项目介绍&lt;/h1&gt; &#xA;&lt;h2&gt;1. 项目简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;PyWxDump&lt;/a&gt;是一款用于获取账号信息(昵称/账号/手机/邮箱/数据库密钥) 、解密数据库、查看聊天记录、备份导出聊天记录为html的工具。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;big&gt; 超级想要star，走过路过，帮忙点个&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xaoyaoo/PyWxDump.svg?style=social&amp;amp;label=Star&#34; alt=&#34;Star&#34;&gt;&lt;/a&gt; 呗，谢谢啦~&lt;/big&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. 功能介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;（1）获取微信昵称、微信账号、微信手机号、微信邮箱、微信KEY的基址偏移&lt;/li&gt; &#xA; &lt;li&gt;（2）获取微信的微信昵称、微信账号、微信手机号、微信邮箱、微信KEY、微信原始ID（wxid_******）&lt;/li&gt; &#xA; &lt;li&gt;（3）获取微信文件夹路径&lt;/li&gt; &#xA; &lt;li&gt;（4）支持查看聊天记录查看&lt;/li&gt; &#xA; &lt;li&gt;（5）根据key解密微信数据库&lt;/li&gt; &#xA; &lt;li&gt;（6）提供数据库部分字段说明&lt;/li&gt; &#xA; &lt;li&gt;（7）支持微信多开场景，获取多用户信息等&lt;/li&gt; &#xA; &lt;li&gt;（8）微信需要登录状态才能获取数据库密钥&lt;/li&gt; &#xA; &lt;li&gt;（9）支持导出聊天记录为html,备份微信聊天记录,方便查看&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;版本差异&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;版本 &amp;lt; 3.7.0.30 只运行不登录能获取个人信息，登录后可以获取数据库密钥&lt;/li&gt; &#xA; &lt;li&gt;版本 &amp;gt; 3.7.0.30 只运行不登录不能获取个人信息，登录后都能获取&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;利用场景&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;钓鱼攻击(通过钓鱼控到的机器通常都是登录状态)&lt;/li&gt; &#xA; &lt;li&gt;渗透到运维机器(有些运维机器会日常登录自己的微信)&lt;/li&gt; &#xA; &lt;li&gt;某些工作需要取证(数据库需要拷贝到本地)&lt;/li&gt; &#xA; &lt;li&gt;自行备份(日常备份自己留存)&lt;/li&gt; &#xA; &lt;li&gt;等等...............&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;3. 项目结构&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;PyWxDump&#xA;├─ pywxdump                        # 项目代码,存放各个模块&#xA;│  ├─ analyse                     # 解析数据库&#xA;│  │  └─ parse.py                     # 解析数据库脚本，可以解析语音、图片、聊天记录等&#xA;│  ├─ bias_addr                   # 获取偏移地址&#xA;│  │  └─ get_bias_addr.py             # 获取偏移地址脚本&#xA;│  ├─ decrypted                   # 解密数据库&#xA;│  │  ├─ decrypt.py                   # 解密数据库脚本&#xA;│  │  └─ get_wx_decrypted_db.py       # 直接读取当前登录微信的数据库，解密后保存到当前目录下的decrypted文件夹中&#xA;│  ├─ wx_info                     # 获取微信基本信息&#xA;│  │  ├─ get_wx_info.py               # 获取微信基本信息脚本&#xA;│  │  └─ get_wx_db.py                 # 获取本地所有的微信相关数据库&#xA;│  ├─ show_records                # 显示聊天记录&#xA;│  │  ├─ main_window.py               # 显示聊天记录的窗口&#xA;│  │  └─ templates                    # 显示聊天记录的html模板&#xA;│  ├─ command.py                  # 命令行入口&#xA;│  └─ version_list.json           # 微信版本列表 (十进制)按顺序代表：微信昵称、微信账号、微信手机号、微信邮箱（默认0）、微信KEY、微信原始ID（wxid_******）&#xA;├─ doc                        # 项目文档&#xA;│  ├─ python1.0_README.md         # python1.0版本的README&#xA;│  ├─ wx数据库简述.md               # wx数据库简述&#xA;│  └─ CE获取基址.md                 # CE获取基址&#xA;├─ README.md              &#xA;├─ setup.py                   # 安装脚本&#xA;└─ requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;4. 其他&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;PyWxDump&lt;/a&gt;是&lt;a href=&#34;https://github.com/AdminTest0/SharpWxDump&#34;&gt;SharpWxDump&lt;/a&gt; 的经过重构python语言版本，同时添加了一些新的功能。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;项目地址：&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump&#34;&gt;https://github.com/xaoyaoo/PyWxDump&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;目前只在windows下测试过，mac、linux下可能会存在问题。&lt;/li&gt; &#xA; &lt;li&gt;如发现&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/pywxdump/version_list.json&#34;&gt;version_list.json&lt;/a&gt;缺失或错误, 请提交&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;如发现bug或有改进意见, 请提交&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;如有其他想要的功能, 请提交&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;issues&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;提交issues方法(点击展开)&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/assets/37209452/22d15ea6-05d6-4f30-8b24-04a51a59d56d&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/assets/37209452/9bdc2961-694a-4104-a1c7-05403220c0fe&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/issues&#34;&gt;&lt;img src=&#34;https://github.com/xaoyaoo/PyWxDump/assets/37209452/be1d8913-5a6e-4fff-9fcd-00edb33d255b&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Star History(click to expand)&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://star-history.com/#xaoyaoo/pywxdump&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=xaoyaoo/pywxdump&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;二、使用说明&lt;/h1&gt; &#xA;&lt;h2&gt;1. 安装&lt;/h2&gt; &#xA;&lt;h3&gt;1.1 从pypi安装(安装稳定版)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U pywxdump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.2 从源码安装(安装最新版)&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -U git+git://github.com/xaoyaoo/PyWxDump.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;或&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/xaoyaoo/PyWxDump.git&#xA;cd PyWxDump&#xA;python -m pip install -U .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;1.3 使用可执行文件exe&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;1.下载&lt;a href=&#34;https://github.com/xaoyaoo/PyWxDump/releases&#34;&gt;release&lt;/a&gt;中的exe文件&lt;/li&gt; &#xA;  &lt;li&gt;2.或者自行打包，打包脚本见： &lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/tests/build_exe.py&#34;&gt;build_exe.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd tests&#xA;python build_exe.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;2. 使用&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 命令行&lt;/h3&gt; &#xA;&lt;p&gt;激活虚拟环境后（如果有的话），在项目根目录下运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wxdump 模式 [参数]&#xA;#  运行模式(mode):&#xA;#    bias      获取微信基址偏移&#xA;#    info      获取微信信息&#xA;#    db_path   获取微信文件夹路径&#xA;#    decrypt   解密微信数据库&#xA;#    dbshow    聊天记录查看&#xA;#    export    聊天记录导出为html&#xA;#    all       获取微信信息，解密微信数据库，查看聊天记录&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;示例&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开示例&lt;/summary&gt; &#xA; &lt;p&gt;以下是示例命令：&lt;/p&gt; &#xA; &lt;h5&gt;获取微信基址偏移&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump bias --mobile &amp;lt;手机号&amp;gt; --name &amp;lt;微信昵称&amp;gt; --account &amp;lt;微信账号&amp;gt; [--key &amp;lt;密钥&amp;gt;] [--db_path &amp;lt;已登录账号的微信文件夹路径&amp;gt;] [--version_list_path &amp;lt;微信版本偏移文件路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;获取微信信息&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump info [--version_list_path &amp;lt;微信版本偏移文件路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;获取微信文件夹路径&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump db_path [-r &amp;lt;需要的数据库名称&amp;gt;] [-wf &amp;lt;WeChat Files 路径&amp;gt;] [-id &amp;lt;wxid_&amp;gt;] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;解密微信数据库&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump decrypt -k &amp;lt;密钥&amp;gt; -i &amp;lt;数据库路径(目录or文件)&amp;gt; [-o &amp;lt;输出路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;查看聊天记录&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump dbshow -msg &amp;lt;解密后的 MSG.db 的路径&amp;gt; -micro &amp;lt;解密后的 MicroMsg.db 的路径&amp;gt; -media &amp;lt;解密后的 MediaMSG.db 的路径&amp;gt; [-fs &amp;lt;FileStorage 路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;导出聊天记录为 HTML&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump export -u &amp;lt;微信账号&amp;gt; -o &amp;lt;导出路径&amp;gt; -msg &amp;lt;解密后的 MSG.db 的路径&amp;gt; -micro &amp;lt;解密后的 MicroMsg.db 的路径&amp;gt; -media &amp;lt;解密后的 MediaMSG.db 的路径&amp;gt; [-fs &amp;lt;FileStorage 路径&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;获取微信信息、解密数据库、查看聊天记录，一条命令搞定，开放端口5000，浏览器访问查看聊天记录（支持局域网其他机器访问）&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pywxdump all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;2.2 python API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;import调用示例&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;点击展开示例&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 单独使用各模块，返回值一般为字典，参数参考命令行&#xA;from pywxdump import *&#xA;&#xA;# ************************************************************************************************ #&#xA;# 获取微信基址偏移&#xA;args = {&#xA;    &#34;mode&#34;: &#34;bias&#34;,&#xA;    &#34;mobile&#34;: &#34;13800138000&#34;,  # 手机号&#xA;    &#34;name&#34;: &#34;微信昵称&#34;,  # 微信昵称&#xA;    &#34;account&#34;: &#34;微信账号&#34;,  # 微信账号&#xA;    &#34;key&#34;: &#34;密钥&#34;,  # 密钥（可选）&#xA;    &#34;db_path&#34;: &#34;已登录账号的微信文件夹路径&#34;,  # 微信文件夹路径（可选）&#xA;    &#34;version_list_path&#34;: &#34;微信版本偏移文件路径&#34;  # 微信版本偏移文件路径（可选）&#xA;}&#xA;bias_addr = BiasAddr(args[&#34;account&#34;], args[&#34;mobile&#34;], args[&#34;name&#34;], args[&#34;key&#34;], args[&#34;db_path&#34;])&#xA;result = bias_addr.run(True, args[&#34;version_list_path&#34;])&#xA;# ************************************************************************************************ #&#xA;# 获取微信信息&#xA;wx_info = read_info(VERSION_LIST, True)&#xA;&#xA;# 获取微信文件夹路径&#xA;args = {&#xA;    &#34;mode&#34;: &#34;db_path&#34;,&#xA;    &#34;require_list&#34;: &#34;all&#34;,  # 需要的数据库名称（可选）&#xA;    &#34;wx_files&#34;: &#34;WeChat Files&#34;,  # &#39;WeChat Files&#39;路径（可选）&#xA;    &#34;wxid&#34;: &#34;wxid_&#34;,  # wxid_，用于确认用户文件夹（可选）&#xA;}&#xA;user_dirs = get_wechat_db(args[&#34;require_list&#34;], args[&#34;wx_files&#34;], args[&#34;wxid&#34;], True)&#xA;# ************************************************************************************************ #&#xA;# 解密微信数据库&#xA;args = {&#xA;    &#34;mode&#34;: &#34;decrypt&#34;,&#xA;    &#34;key&#34;: &#34;密钥&#34;,  # 密钥&#xA;    &#34;db_path&#34;: &#34;数据库路径(目录or文件)&#34;,  # 数据库路径&#xA;    &#34;out_path&#34;: &#34;/path/to/decrypted&#34;  # 输出路径（必须是目录）[默认为当前路径下decrypted文件夹]&#xA;}&#xA;result = batch_decrypt(args[&#34;key&#34;], args[&#34;db_path&#34;], args[&#34;out_path&#34;], True)&#xA;# ************************************************************************************************ #&#xA;# 查看聊天记录&#xA;args = {&#xA;    &#34;mode&#34;: &#34;dbshow&#34;,&#xA;    &#34;msg_path&#34;: &#34;解密后的 MSG.db 的路径&#34;,  # 解密后的 MSG.db 的路径&#xA;    &#34;micro_path&#34;: &#34;解密后的 MicroMsg.db 的路径&#34;,  # 解密后的 MicroMsg.db 的路径&#xA;    &#34;media_path&#34;: &#34;解密后的 MediaMSG.db 的路径&#34;,  # 解密后的 MediaMSG.db 的路径&#xA;    &#34;filestorage_path&#34;: &#34;文件夹FileStorage的路径&#34;  # 文件夹 FileStorage 的路径（用于显示图片）&#xA;}&#xA;from flask import Flask, request, jsonify, render_template, g&#xA;import logging&#xA;&#xA;app = Flask(__name__, template_folder=&#39;./show_chat/templates&#39;)&#xA;app.logger.setLevel(logging.ERROR)&#xA;&#xA;&#xA;@app.before_request&#xA;def before_request():&#xA;    g.MSG_ALL_db_path = args[&#34;msg_path&#34;]&#xA;    g.MicroMsg_db_path = args[&#34;micro_path&#34;]&#xA;    g.MediaMSG_all_db_path = args[&#34;media_path&#34;]&#xA;    g.FileStorage_path = args[&#34;filestorage_path&#34;]&#xA;    g.USER_LIST = get_user_list(args[&#34;msg_path&#34;], args[&#34;micro_path&#34;])&#xA;&#xA;&#xA;app.register_blueprint(app_show_chat)&#xA;print(&#34;[+] 请使用浏览器访问 http://127.0.0.1:5000/ 查看聊天记录&#34;)&#xA;app.run(debug=False)&#xA;# ************************************************************************************************ #&#xA;# 导出聊天记录为 HTML&#xA;args = {&#xA;    &#34;mode&#34;: &#34;export&#34;,&#xA;    &#34;username&#34;: &#34;微信账号&#34;,  # 微信账号（聊天对象账号）&#xA;    &#34;outpath&#34;: &#34;/path/to/export&#34;,  # 导出路径&#xA;    &#34;msg_path&#34;: &#34;解密后的 MSG.db 的路径&#34;,  # 解密后的 MSG.db 的路径&#xA;    &#34;micro_path&#34;: &#34;解密后的 MicroMsg.db 的路径&#34;,  # 解密后的 MicroMsg.db 的路径&#xA;    &#34;media_path&#34;: &#34;解密后的 MediaMSG.db 的路径&#34;,  # 解密后的 MediaMSG.db 的路径&#xA;    &#34;filestorage_path&#34;: &#34;文件夹FileStorage的路径&#34;  # 文件夹 FileStorage 的路径（用于显示图片）&#xA;}&#xA;export(args[&#34;username&#34;], args[&#34;outpath&#34;], args[&#34;msg_path&#34;], args[&#34;micro_path&#34;], args[&#34;media_path&#34;],&#xA;       args[&#34;filestorage_path&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;更多使用方法参考&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/tests&#34;&gt;tests&lt;/a&gt;文件夹下的&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/tests/&#34;&gt;test_*.py&lt;/a&gt;文件&lt;/p&gt; &#xA;&lt;h3&gt;2.3 可执行文件exe&lt;/h3&gt; &#xA;&lt;p&gt;进入exe文件所在目录，运行： &lt;code&gt;wxdump.exe 模式 [参数]&lt;/code&gt;，方法同&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/#21-%E5%91%BD%E4%BB%A4%E8%A1%8C&#34;&gt;命令行&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.4 其他说明&lt;/h3&gt; &#xA;&lt;p&gt;【注】:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;关于基址使用cheat engine获取，参考&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/doc/CE%E8%8E%B7%E5%8F%96%E5%9F%BA%E5%9D%80.md&#34;&gt;CE获取基址.md&lt;/a&gt;（该方法一般可用&lt;code&gt;wxdump bias&lt;/code&gt;命令代替，仅用作学习原理）&lt;/li&gt; &#xA; &lt;li&gt;关于数据库解析，参考&lt;a href=&#34;https://raw.githubusercontent.com/xaoyaoo/PyWxDump/master/doc/wx%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E8%BF%B0.md&#34;&gt;wx数据库简述.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;三、免责声明（非常重要！！！！！！！）&lt;/h1&gt; &#xA;&lt;p&gt;本项目仅供学习交流使用，请勿用于非法用途，否则后果自负。&lt;/p&gt; &#xA;&lt;p&gt;您应该在下载保存，编译使用本项目的24小时内，删除本项目的源代码和（编译出的）程序。&lt;/p&gt; &#xA;&lt;p&gt;本项目仅允许在授权情况下对数据库进行备份，严禁用于非法目的，否则自行承担所有相关责任。&lt;/p&gt; &#xA;&lt;p&gt;下载、保存、进一步浏览源代码或者下载安装、编译使用本程序，表示你同意本警告，并承诺遵守它;&lt;/p&gt; &#xA;&lt;p&gt;请勿利用本项目的相关技术从事非法测试，如因此产生的一切不良后果与项目作者无关。&lt;/p&gt; &#xA;&lt;h1&gt;四、许可证&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;MIT License&#xA;&#xA;Copyright (c) 2023 xaoyaoo&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy&#xA;of this software and associated documentation files (the &#34;Software&#34;), to deal&#xA;in the Software without restriction, including without limitation the rights&#xA;to use, copy, modify, merge, publish, distribute, sublicense, and/or sell&#xA;copies of the Software, and to permit persons to whom the Software is&#xA;furnished to do so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;PyWxDump is hosted at: https://github.com/xaoyaoo/PyWxDump&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wearecaster/Above</title>
    <updated>2023-12-06T01:38:39Z</updated>
    <id>tag:github.com,2023-12-06:/wearecaster/Above</id>
    <link href="https://github.com/wearecaster/Above" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Invisible network protocol sniffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Above v2.2 (Codename: Vettel)&lt;/h1&gt; &#xA;&lt;p&gt;Invisible protocol sniffer for finding vulnerabilities in the network. Designed for pentesters and security professionals.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wearecaster/Above/main/cover/tool_cover.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Cover for tool&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;All information contained in this repository is provided for educational and research purposes only. The author is not responsible for any illegal use of this tool&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is a specialized network security tool that helps both pentesters and security professionals&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Mechanics&lt;/h1&gt; &#xA;&lt;p&gt;Above is a invisible network sniffer for finding vulnerabilities in network equipment. It is based entirely on network traffic analysis, so it does not make any noise on the air. He&#39;s invisible. Completely based on the Scapy library.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The main task that Above solves is to search for L2/L3 protocols inside the network and to find vulnerabilities in configurations based on sniffed traffic.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Supported protocols&lt;/h2&gt; &#xA;&lt;p&gt;Detects up to 12 protocols:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CDP (Cisco Discovery Protocol)&#xA;DTP (Dynamic Trunking Protocol) &#xA;Dot1Q (VLAN Tagging)&#xA;OSPF (Open Shortest Path First)&#xA;EIGRP (Enhanced Interior Gateway Routing Protocol)&#xA;VRRPv2 (Virtual Router Redundancy Protocol)&#xA;HSRPv1 (Host Standby Redundancy Protocol)&#xA;STP (Spanning Tree Protocol)&#xA;LLMNR (Link Local Multicast Name Resolution)&#xA;NBT-NS (NetBIOS Name Service)&#xA;MDNS (Multicast DNS)&#xA;DHCPv6 (Dynamic Host Configuration Protocol v6)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;All protocols are analyzed simultaneously due to the threads design&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Operating Mechanism&lt;/h2&gt; &#xA;&lt;p&gt;Above works in two modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hot sniffing on your interface specifying a timer&lt;/li&gt; &#xA; &lt;li&gt;Analyzing traffic dumps in cold mode (Offline)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The tool is very simple in its operation and is driven by arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interface. Specifying the network interface on which sniffing will be performed&lt;/li&gt; &#xA; &lt;li&gt;Timer. Time during which traffic analysis will be performed&lt;/li&gt; &#xA; &lt;li&gt;Output pcap: Above will record the listened traffic to pcap file, its name you specify yourself&lt;/li&gt; &#xA; &lt;li&gt;Input pcap: The tool takes an already prepared .pcap as input and looks for protocols in it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: above [-h] [--interface INTERFACE] [--timer TIMER] [--output-pcap OUTPUT_FILE] [--input-pcap INPUT_FILE]&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  --interface INTERFACE&#xA;                        Specify the interface&#xA;  --timer TIMER         Specify the timer value (seconds)&#xA;  --output-pcap OUTPUT_FILE&#xA;                        Specify the output pcap file to record traffic&#xA;  --input-pcap INPUT_FILE&#xA;                        Specify the input pcap file to analyze traffic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Traffic Sniffing Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wearecaster/Above/main/demos/sniffing-demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sorry for not the best quality, Github has file size limits on uploads&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Information about protocols&lt;/h2&gt; &#xA;&lt;p&gt;The information obtained will be useful not only to the attacker, but also to the security engineer, he will know what he needs to pay attention to.&lt;/p&gt; &#xA;&lt;p&gt;When Above detects a protocol, it outputs the necessary information to indicate the attack vector or security issue:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Impact&lt;/strong&gt; - What kind of attack can be performed on this protocol;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt; - What tool can be used to launch an attack;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Technical information&lt;/strong&gt; - Required information for the attacker, sender IP addresses, FHRP group IDs, OSPF/EIGRP domains, etc.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This information can also be used by a security engineer to improve network security&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Above is very easy to install using &lt;strong&gt;setup.py&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caster@kali:~$ git clone https://github.com/wearecaster/Above&#xA;caster@kali:~$ cd Above/&#xA;caster@kali:~/Above$ sudo python3 setup.py install &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The development of this version of Above was based on Python version &lt;strong&gt;3.11.6&lt;/strong&gt;, Scapy version &lt;strong&gt;2.5.0.dev212&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Windows Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;Above can also work on Windows, provided the winpcap driver is installed, without which sniffing with Scapy is impossible.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://pypi.org/project/auto-py-to-exe/&#34;&gt;auto-py-to-exe&lt;/a&gt; to compile the .py script&lt;/p&gt; &#xA;&lt;h1&gt;How to Use&lt;/h1&gt; &#xA;&lt;p&gt;First, it&#39;s worth switching the interface to promiscuous mode&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Above requires root access for sniffing&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caster@kali:~$ sudo ip link set eth0 promisc on &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above requires at least an interface and a timer at startup. Choose the timer from your calculations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caster@kali:~$ sudo above --interface eth0 --timer 120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to record the sniffed traffic, use the &lt;code&gt;--output-pcap&lt;/code&gt; argument&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caster@kali:~$ sudo above --interface eth0 --timer 120 --output-pcap dump.pcap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have some recorded traffic, you can use the &lt;code&gt;--input-pcap&lt;/code&gt; argument to look for potential security issues&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caster@kali:~$ above --input-pcap dump.pcap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PCAP Analyzing Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wearecaster/Above/main/demos/pcap-analyzing.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Sorry for not the best quality, Github has file size limits on uploads&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Suggestions&lt;/h1&gt; &#xA;&lt;p&gt;If you find bugs in this tool or have suggestions on how to improve this tool, feel free to email me personally!&lt;/p&gt; &#xA;&lt;h1&gt;Outro&lt;/h1&gt; &#xA;&lt;p&gt;This tool is dedicated to the track &#34;A View From Above (Remix)&#34; performed by KOAN Sound. This track was all the inspiration for me during the process of working on this tool.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>lucidrains/meshgpt-pytorch</title>
    <updated>2023-12-06T01:38:39Z</updated>
    <id>tag:github.com,2023-12-06:/lucidrains/meshgpt-pytorch</id>
    <link href="https://github.com/lucidrains/meshgpt-pytorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of MeshGPT, SOTA Mesh generation using Attention, in Pytorch&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lucidrains/meshgpt-pytorch/main/meshgpt.png&#34; width=&#34;450px&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;MeshGPT - Pytorch (wip)&lt;/h2&gt; &#xA;&lt;p&gt;Implementation of &lt;a href=&#34;https://arxiv.org/abs/2311.15475&#34;&gt;MeshGPT&lt;/a&gt;, SOTA Mesh generation using Attention, in Pytorch&lt;/p&gt; &#xA;&lt;p&gt;Will also add text conditioning, for eventual text-to-3d asset&lt;/p&gt; &#xA;&lt;h2&gt;Appreciation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://stability.ai/&#34;&gt;StabilityAI&lt;/a&gt;, &lt;a href=&#34;https://a16z.com/supporting-the-open-source-ai-community/&#34;&gt;A16Z Open Source AI Grant Program&lt;/a&gt;, and &lt;a href=&#34;https://huggingface.co/&#34;&gt;🤗 Huggingface&lt;/a&gt; for the generous sponsorships, as well as my other sponsors, for affording me the independence to open source current artificial intelligence research&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/arogozhnikov/einops&#34;&gt;Einops&lt;/a&gt; for making my life easy&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install meshgpt-pytorch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;&#xA;from meshgpt_pytorch import (&#xA;    MeshAutoencoder,&#xA;    MeshTransformer&#xA;)&#xA;&#xA;# autoencoder&#xA;&#xA;autoencoder = MeshAutoencoder(&#xA;    dim = 512,&#xA;    encoder_depth = 6,&#xA;    decoder_depth = 6,&#xA;    num_discrete_coors = 128&#xA;)&#xA;&#xA;# mock inputs&#xA;&#xA;vertices = torch.randn((2, 121, 3))&#xA;faces = torch.randint(0, 121, (2, 64, 3))&#xA;face_edges = torch.randint(0, 64, (2, 2, 96))&#xA;&#xA;face_len = torch.randint(1, 64, (2,))&#xA;face_edges_len = torch.randint(1, 96, (2,))&#xA;&#xA;# forward in the faces&#xA;&#xA;loss = autoencoder(&#xA;    vertices = vertices,&#xA;    faces = faces,&#xA;    face_edges = face_edges,&#xA;    face_len = face_len,&#xA;    face_edges_len = face_edges_len&#xA;)&#xA;&#xA;loss.backward()&#xA;&#xA;# after much training...&#xA;&#xA;face_vertex_codes = autoencoder.tokenize(&#xA;    vertices = vertices,&#xA;    faces = faces,&#xA;    face_edges = face_edges,&#xA;    face_len = face_len,&#xA;    face_edges_len = face_edges_len&#xA;)&#xA;&#xA;# now train your transformer to generate this sequence of codes&#xA;&#xA;transformer = MeshTransformer(&#xA;    autoencoder,&#xA;    dim = 512,&#xA;    max_seq_len = 768&#xA;)&#xA;&#xA;loss = transformer(face_vertex_codes)&#xA;loss.backward()&#xA;&#xA;# after much training of transformer, you can now sample from the attention net&#xA;&#xA;faces_coordinates = transformer.generate()&#xA;&#xA;# (batch, num faces, vertices (3), coordinates (3))&#xA;# now post process for the generated 3d asset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;autoencoder&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; encoder sageconv with torch geometric&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; proper scatter mean accounting for padding for meaning the vertices and RVQ the vertices before gathering back for decoder&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; complete decoder and reconstruction loss + commitment loss&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; handle variable lengthed faces&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; xcit linear attention in both encoder / decoder&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add option to use residual FSQ / LFQ, latest quantization development&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;transformer&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; properly mask out eos logit during generation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make sure it trains &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; take care of sos token automatically&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; take care of eos token automatically if sequence length or mask is passed in&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; handle variable lengthed faces &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; on forwards&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; on generation, do all eos logic + substitute everything after eos with pad id&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; generation + cache kv&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; speculative decoding option&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; hierarchical transformers (using the RQ transformer)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;trainer wrapper with hf accelerate&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; autoencoder - take care of ema&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; transformer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Siddiqui2023MeshGPTGT,&#xA;    title   = {MeshGPT: Generating Triangle Meshes with Decoder-Only Transformers},&#xA;    author  = {Yawar Siddiqui and Antonio Alliegro and Alexey Artemov and Tatiana Tommasi and Daniele Sirigatti and Vladislav Rosov and Angela Dai and Matthias Nie{\ss}ner},&#xA;    year    = {2023},&#xA;    url     = {https://api.semanticscholar.org/CorpusID:265457242}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{dao2022flashattention,&#xA;    title   = {Flash{A}ttention: Fast and Memory-Efficient Exact Attention with {IO}-Awareness},&#xA;    author  = {Dao, Tri and Fu, Daniel Y. and Ermon, Stefano and Rudra, Atri and R{\&#39;e}, Christopher},&#xA;    booktitle = {Advances in Neural Information Processing Systems},&#xA;    year    = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Leviathan2022FastIF,&#xA;    title   = {Fast Inference from Transformers via Speculative Decoding},&#xA;    author  = {Yaniv Leviathan and Matan Kalman and Y. Matias},&#xA;    booktitle = {International Conference on Machine Learning},&#xA;    year    = {2022},&#xA;    url     = {https://api.semanticscholar.org/CorpusID:254096365}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{yu2023language,&#xA;    title   = {Language Model Beats Diffusion -- Tokenizer is Key to Visual Generation}, &#xA;    author  = {Lijun Yu and José Lezama and Nitesh B. Gundavarapu and Luca Versari and Kihyuk Sohn and David Minnen and Yong Cheng and Agrim Gupta and Xiuye Gu and Alexander G. Hauptmann and Boqing Gong and Ming-Hsuan Yang and Irfan Essa and David A. Ross and Lu Jiang},&#xA;    year    = {2023},&#xA;    eprint  = {2310.05737},&#xA;    archivePrefix = {arXiv},&#xA;    primaryClass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{elnouby2021xcit,&#xA;    title   = {XCiT: Cross-Covariance Image Transformers},&#xA;    author  = {Alaaeldin El-Nouby and Hugo Touvron and Mathilde Caron and Piotr Bojanowski and Matthijs Douze and Armand Joulin and Ivan Laptev and Natalia Neverova and Gabriel Synnaeve and Jakob Verbeek and Hervé Jegou},&#xA;    year    = {2021},&#xA;    eprint  = {2106.09681},&#xA;    archivePrefix = {arXiv},&#xA;    primaryClass = {cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Lee2022AutoregressiveIG,&#xA;    title   = {Autoregressive Image Generation using Residual Quantization},&#xA;    author  = {Doyup Lee and Chiheon Kim and Saehoon Kim and Minsu Cho and Wook-Shin Han},&#xA;    journal = {2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},&#xA;    year    = {2022},&#xA;    pages   = {11513-11522},&#xA;    url     = {https://api.semanticscholar.org/CorpusID:247244535}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>