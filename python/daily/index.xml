<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:37:07Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Fantasy-Studio/Paint-by-Example</title>
    <updated>2022-12-11T01:37:07Z</updated>
    <id>tag:github.com,2022-12-11:/Fantasy-Studio/Paint-by-Example</id>
    <link href="https://github.com/Fantasy-Studio/Paint-by-Example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Paint by Example: Exemplar-based Image Editing with Diffusion Models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Paint by Example: Exemplar-based Image Editing with Diffusion Models&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fantasy-Studio/Paint-by-Example/main/figure/teaser.png&#34; alt=&#34;Teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://arxiv.org/abs/2211.13227&#34;&gt;Paper&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/spaces/Fantasy-Studio/Paint-by-Example&#34;&gt;Huggingface Demo&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;!-- &lt;br&gt; --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://orcid.org/0000-0003-4110-1986&#34;&gt;Binxin Yang&lt;/a&gt;, &lt;a href=&#34;http://home.ustc.edu.cn/~gsy777/&#34;&gt;Shuyang Gu&lt;/a&gt;, &lt;a href=&#34;https://bo-zhang.me/&#34;&gt;Bo Zhang&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/research/people/tinzhan/&#34;&gt;Ting Zhang&lt;/a&gt;, &lt;a href=&#34;http://staff.ustc.edu.cn/~xjchen99/&#34;&gt;Xuejin Chen&lt;/a&gt;, &lt;a href=&#34;http://staff.ustc.edu.cn/~xysun720/&#34;&gt;Xiaoyan Sun&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/research/people/doch/&#34;&gt;Dong Chen&lt;/a&gt; and &lt;a href=&#34;https://www.microsoft.com/en-us/research/people/fangwen/&#34;&gt;Fang Wen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- &lt;br&gt; --&gt; &#xA;&lt;h2&gt;Abstract&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Language-guided image editing has achieved great success recently. In this paper, for the first time, we investigate exemplar-guided image editing for more precise control. We achieve this goal by leveraging self-supervised training to disentangle and re-organize the source image and the exemplar. However, the naive approach will cause obvious fusing artifacts. We carefully analyze it and propose an information bottleneck and strong augmentations to avoid the trivial solution of directly copying and pasting the exemplar image. Meanwhile, to ensure the controllability of the editing process, we design an arbitrary shape mask for the exemplar image and leverage the classifier-free guidance to increase the similarity to the exemplar image. The whole framework involves a single forward of the diffusion model without any iterative optimization. We demonstrate that our method achieves an impressive performance and enables controllable editing on in-the-wild images with high fidelity.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-12-07&lt;/em&gt; Release a &lt;a href=&#34;https://gradio.app/&#34;&gt;Gradio&lt;/a&gt; demo on &lt;a href=&#34;https://huggingface.co/spaces/Fantasy-Studio/Paint-by-Example&#34;&gt;Hugging Face&lt;/a&gt; Spaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;2022-11-29&lt;/em&gt; Upload code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A suitable &lt;a href=&#34;https://conda.io/&#34;&gt;conda&lt;/a&gt; environment named &lt;code&gt;Paint-by-Example&lt;/code&gt; can be created and activated with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate Paint-by-Example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pretrained Model&lt;/h2&gt; &#xA;&lt;p&gt;We provide the checkpoint (&lt;a href=&#34;https://drive.google.com/file/d/15QzaTWsvZonJcXsNv-ilMRCYaQLhzR_i/view?usp=share_link&#34;&gt;Google Drive&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/Fantasy-Studio/Paint-by-Example/resolve/main/model.ckpt&#34;&gt;Hugging Face&lt;/a&gt;) that is trained on &lt;a href=&#34;https://storage.googleapis.com/openimages/web/index.html&#34;&gt;Open-Images&lt;/a&gt; for 40 epochs. By default, we assume that the pretrained model is downloaded and saved to the directory &lt;code&gt;checkpoints&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;To sample from our model, you can use &lt;code&gt;scripts/inference.py&lt;/code&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/inference.py \&#xA;--plms --outdir results \&#xA;--config configs/v1.yaml \&#xA;--ckpt checkpoints/model.ckpt \&#xA;--image_path examples/image/example_1.png \&#xA;--mask_path examples/mask/example_1.png \&#xA;--reference_path examples/reference/example_1.jpg \&#xA;--seed 321 \&#xA;--scale 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visualization of inputs and output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Fantasy-Studio/Paint-by-Example/main/figure/result_1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Fantasy-Studio/Paint-by-Example/main/figure/result_2.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Fantasy-Studio/Paint-by-Example/main/figure/result_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;h3&gt;Data preparing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download separate packed files of Open-Images dataset from &lt;a href=&#34;https://github.com/cvdfoundation/open-images-dataset#download-images-with-bounding-boxes-annotations&#34;&gt;CVDF&#39;s site&lt;/a&gt; and unzip them to the directory &lt;code&gt;dataset/open-images/images&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download bbox annotations of Open-Images dataset from &lt;a href=&#34;https://storage.googleapis.com/openimages/web/download_v7.html#download-manually&#34;&gt;Open-Images official site&lt;/a&gt; and save them to the directory &lt;code&gt;dataset/open-images/annotations&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate bbox annotations of each image in txt format. &lt;pre&gt;&lt;code&gt;python scripts/read_bbox.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The data structure is like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dataset&#xA;├── open-images&#xA;│  ├── annotations&#xA;│  │  ├── class-descriptions-boxable.csv&#xA;│  │  ├── oidv6-train-annotations-bbox.csv&#xA;│  │  ├── test-annotations-bbox.csv&#xA;│  │  ├── validation-annotations-bbox.csv&#xA;│  ├── images&#xA;│  │  ├── train_0&#xA;│  │  │  ├── xxx.jpg&#xA;│  │  │  ├── ...&#xA;│  │  ├── train_1&#xA;│  │  ├── ...&#xA;│  │  ├── validation&#xA;│  │  ├── test&#xA;│  ├── bbox&#xA;│  │  ├── train_0&#xA;│  │  │  ├── xxx.txt&#xA;│  │  │  ├── ...&#xA;│  │  ├── train_1&#xA;│  │  ├── ...&#xA;│  │  ├── validation&#xA;│  │  ├── test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download the pretrained model of Stable Diffusion&lt;/h3&gt; &#xA;&lt;p&gt;We utilize the pretrained Stable Diffusion v1-4 as initialization, please download the pretrained models from &lt;a href=&#34;https://huggingface.co/CompVis/stable-diffusion-v-1-4-original&#34;&gt;Hugging Face&lt;/a&gt; and save the model to directory &lt;code&gt;pretrained_models&lt;/code&gt;. Then run the following script to add zero-initialized weights for 5 additional input channels of the UNet (4 for the encoded masked-image and 1 for the mask itself).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python scripts/modify_checkpoints.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Training Paint by Example&lt;/h3&gt; &#xA;&lt;p&gt;To train a new model on Open-Images, you can use &lt;code&gt;main.py&lt;/code&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -u main.py \&#xA;--logdir models/Paint-by-Example \&#xA;--pretrained_model pretrained_models/sd-v1-4-modified-9channel.ckpt \&#xA;--base configs/v1.yaml \&#xA;--scale_lr False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sh train.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citing Paint by Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{yang2022paint,&#xA;  title={Paint by Example: Exemplar-based Image Editing with Diffusion Models},&#xA;  author={Binxin Yang and Shuyang Gu and Bo Zhang and Ting Zhang and Xuejin Chen and Xiaoyan Sun and Dong Chen and Fang Wen},&#xA;  journal={arXiv preprint arXiv:2211.13227},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This code borrows heavily from &lt;a href=&#34;https://github.com/CompVis/stable-diffusion&#34;&gt;Stable Diffusion&lt;/a&gt;. We also thank the contributors of &lt;a href=&#34;https://github.com/openai/guided-diffusion&#34;&gt;OpenAI&#39;s ADM codebase&lt;/a&gt; and &lt;a href=&#34;https://github.com/lucidrains/denoising-diffusion-pytorch&#34;&gt;https://github.com/lucidrains/denoising-diffusion-pytorch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Maintenance&lt;/h2&gt; &#xA;&lt;p&gt;Please open a GitHub issue for any help. If you have any questions regarding the technical details, feel free to contact us.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The codes and the pretrained model in this repository are under the CreativeML OpenRAIL M license as specified by the LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kleiton0x00/RedditC2</title>
    <updated>2022-12-11T01:37:07Z</updated>
    <id>tag:github.com,2022-12-11:/kleiton0x00/RedditC2</id>
    <link href="https://github.com/kleiton0x00/RedditC2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Abusing Reddit API to host the C2 traffic, since most of the blue-team members use Reddit, it might be a great way to make the traffic look legit.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; RedditC2&lt;/h1&gt; Abusing Reddit API to host the C2 traffic, since most of the blue-team members use Reddit, it might be a great way to make the traffic look legit. &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; height=&#34;300&#34; src=&#34;https://user-images.githubusercontent.com/37262788/205896739-7feb0cea-cf04-4011-aa6b-66ba5b82b9ba.png&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;🚫&lt;/span&gt; [Disclaimer]: Use of this project is for &lt;strong&gt;Educational/ Testing purposes only&lt;/strong&gt;. Using it on &lt;strong&gt;unauthorised machines&lt;/strong&gt; is &lt;strong&gt;strictly forbidden&lt;/strong&gt;. If somebody is found to use it for &lt;strong&gt;illegal/ malicious intent&lt;/strong&gt;, author of the repo will &lt;strong&gt;not&lt;/strong&gt; be held responsible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;strong&gt;PRAW&lt;/strong&gt; library in python3:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install praw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/kleiton0x00/RedditC2/wiki/Setup&#34;&gt;Quickstart guide&lt;/a&gt; on how to get going right away!&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/37262788/206015879-589614d5-1a7a-4c21-a342-75bdfc677a61.mp4&#34;&gt;https://user-images.githubusercontent.com/37262788/206015879-589614d5-1a7a-4c21-a342-75bdfc677a61.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;h3&gt;Teamserver&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the specific Reddit Post &amp;amp; post a new comment with the command (&#34;in: &lt;command&gt;&#34;)&lt;/li&gt; &#xA; &lt;li&gt;Read for new comment which includes the word &#34;out:&#34;&lt;/li&gt; &#xA; &lt;li&gt;If no such comment is found, go back to step 2&lt;/li&gt; &#xA; &lt;li&gt;Parse and read the output&lt;/li&gt; &#xA; &lt;li&gt;Edit the existing comment to &#34;executed&#34;, to avoid reexecuting it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to the specific Reddit Post &amp;amp; read the latest comment which includes &#34;in:&#34;&lt;/li&gt; &#xA; &lt;li&gt;If no new comment is detected, go back to step 1&lt;/li&gt; &#xA; &lt;li&gt;Parse the command out of the comment and executes it locally&lt;/li&gt; &#xA; &lt;li&gt;Reply to the comment with the command&#39;s output (&#34;out:&#34; &lt;output&gt;)&lt;/output&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Scanning results&lt;/h2&gt; &#xA;&lt;p&gt;Since it is a custom C2 Implant, it doesn&#39;t get detected by any AV as the bevahiour is completely legit. &lt;img width=&#34;406&#34; height=&#34;553&#34; src=&#34;https://user-images.githubusercontent.com/37262788/205900070-783c65b3-4d83-4d5e-82e3-c20571b403e1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TO-DO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Teamserver and agent compatible in Windows/Linux&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Make the traffic encrypted&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add upload/download feature&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add persistence feature&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate the agents dynamically (from the TeamServer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tab autocompletion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to @T4TCH3R for working with me and contributing to this project.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Evil0ctal/Douyin_TikTok_Download_API</title>
    <updated>2022-12-11T01:37:07Z</updated>
    <id>tag:github.com,2022-12-11:/Evil0ctal/Douyin_TikTok_Download_API</id>
    <link href="https://github.com/Evil0ctal/Douyin_TikTok_Download_API" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀「Douyin_TikTok_Download_API」是一个开箱即用的高性能异步抖音|TikTok数据爬取工具，支持API调用，在线批量解析及下载。&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://douyin.wtf/&#34; alt=&#34;logo&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Evil0ctal/Douyin_TikTok_Download_API/main/logo/logo192.png&#34; width=&#34;120&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Douyin_TikTok_Download_API(抖音/TikTok API)&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Evil0ctal/Douyin_TikTok_Download_API/main/README.en.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Evil0ctal/Douyin_TikTok_Download_API/main/README.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;🚀「Douyin_TikTok_Download_API」是一个开箱即用的高性能异步&lt;a href=&#34;https://www.douyin.com&#34;&gt;抖音&lt;/a&gt;|&lt;a href=&#34;https://www.tiktok.com&#34;&gt;TikTok&lt;/a&gt;数据爬取工具，支持API调用，在线批量解析及下载。&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Evil0ctal/Douyin_TikTok_Download_API/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Evil0ctal/Douyin_TikTok_Download_API?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Evil0ctal/Douyin_TikTok_Download_API?style=flat-square&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Evil0ctal/Douyin_TikTok_Download_API?style=flat-square&#34; alt=&#34;GitHub Star&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/Evil0ctal/Douyin_TikTok_Download_API?style=flat-square&#34; alt=&#34;GitHub Fork&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Evil0ctal/Douyin_TikTok_Download_API?style=flat-square&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/Evil0ctal/Douyin_TikTok_Download_API?style=flat-square&#34; alt=&#34;GitHub closed issues&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/Evil0ctal/Douyin_TikTok_Download_API?style=flat-square&amp;amp;color=3cb371&#34; alt=&#34;GitHub Repo size&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://pypi.org/project/douyin-tiktok-scraper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/douyin-tiktok-scraper?style=flat-square&amp;amp;color=%23a8e6cf&#34; alt=&#34;PyPI v&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/douyin-tiktok-scraper/#files&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/wheel/douyin-tiktok-scraper?style=flat-square&amp;amp;color=%23dcedc1&#34; alt=&#34;PyPI wheel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/douyin-tiktok-scraper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/douyin-tiktok-scraper?style=flat-square&amp;amp;color=%23ffd3b6&#34; alt=&#34;PyPI dm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/douyin-tiktok-scraper/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/douyin-tiktok-scraper?color=%23ffaaa5&amp;amp;style=flat-square&#34; alt=&#34;PyPI pyversions&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://api.douyin.wtf/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?down_color=lightgrey&amp;amp;label=API-V1%20Status&amp;amp;down_message=API-V1%20offline&amp;amp;style=flat-square&amp;amp;up_color=%23dfb9ff&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Fapi.douyin.wtf%2Fdocs&#34; alt=&#34;API-V1 status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api-v2.douyin.wtf/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/website?down_color=lightgrey&amp;amp;label=API-V2%20Status&amp;amp;down_message=API-V1%20offline&amp;amp;style=flat-square&amp;amp;up_color=%23dfb9ff&amp;amp;up_message=online&amp;amp;url=https%3A%2F%2Fapi-v2.douyin.wtf%2Fdocs&#34; alt=&#34;API-V2 status&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://afdian.net/@evil0ctal&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E7%88%B1%E5%8F%91%E7%94%B5-evil0ctal-blue.svg?style=flat-square&amp;amp;color=ea4aaa&amp;amp;logo=github-sponsors&#34; alt=&#34;爱发电&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/evil0ctal&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Kofi-evil0ctal-orange.svg?style=flat-square&amp;amp;logo=kofi&#34; alt=&#34;Kofi&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/evil0ctal&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Patreon-evil0ctal-red.svg?style=flat-square&amp;amp;logo=patreon&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;👻介绍&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🚨如需使用私有服务器运行本项目，请参考部署方式[&lt;a href=&#34;https://raw.githubusercontent.com/Evil0ctal/Douyin_TikTok_Download_API/main/README.md#%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E4%BA%8C-docker&#34;&gt;Docker部署&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/Evil0ctal/Douyin_TikTok_Download_API/main/README.md#%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E4%B8%80-linux&#34;&gt;手动部署&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;本项目是基于 &lt;a href=&#34;https://github.com/pywebio/PyWebIO&#34;&gt;PyWebIO&lt;/a&gt;，&lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt;，&lt;a href=&#34;https://docs.aiohttp.org/&#34;&gt;AIOHTTP&lt;/a&gt;，快速异步的&lt;a href=&#34;https://www.douyin.com/&#34;&gt;抖音&lt;/a&gt;/&lt;a href=&#34;https://www.tiktok.com/&#34;&gt;TikTok&lt;/a&gt;数据爬取工具，并通过Web端实现在线批量解析以及下载无水印视频或图集，数据爬取API，iOS快捷指令无水印下载等功能。你可以自己部署或改造本项目实现更多功能，也可以在你的项目中直接调用&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/Stable/scraper.py&#34;&gt;scraper.py&lt;/a&gt;或安装现有的&lt;a href=&#34;https://pypi.org/project/douyin-tiktok-scraper/&#34;&gt;pip包&lt;/a&gt;作为解析库轻松爬取数据等.....&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;一些简单的运用场景：&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;下载禁止下载的视频，进行数据分析，iOS无水印下载（搭配&lt;a href=&#34;https://apps.apple.com/cn/app/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/id915249334&#34;&gt;iOS自带的快捷指令APP&lt;/a&gt; 配合本项目API实现应用内下载或读取剪贴板下载）等.....&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🖥公共站点: 我很脆弱...请勿压测(·•᷄ࡇ•᷅ ）&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;API-V2:&lt;/strong&gt; 支持输入&lt;code&gt;Douyin|TikTok&lt;/code&gt;用户主页爬取该作者[主页视频数据(去水印链接, 已点赞视频列表(权限需为公开), 视频评论数据, 背景音乐视频列表数据, 等等...), 详细信息请查看API-V2文档，此外API-V2对比API-V1在抓取TikTok数据时，V-2的速度是V-1的&lt;code&gt;5倍&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;🍔Web APP: &lt;a href=&#34;https://douyin.wtf/&#34;&gt;https://douyin.wtf/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🍟API-V1: &lt;a href=&#34;https://api.douyin.wtf/docs&#34;&gt;https://api.douyin.wtf/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🌭API-V2: &lt;a href=&#34;https://api-v2.douyin.wtf/docs&#34;&gt;https://api-v2.douyin.wtf/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;💾iOS Shortcut(快捷指令): &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/discussions/104?sort=top&#34;&gt;Shortcut release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📦️桌面端下载器(仓库推荐)：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Johnserf-Seed/TikTokDownload&#34;&gt;Johnserf-Seed/TikTokDownload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HFrost0/bilix&#34;&gt;HFrost0/bilix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tairraos/TikDown/&#34;&gt;Tairraos/TikDown - [需更新]&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚗️技术栈&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/web_app.py&#34;&gt;web_app.py&lt;/a&gt; - &lt;a href=&#34;https://www.pyweb.io/&#34;&gt;PyWebIO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/web_api.py&#34;&gt;web_api.py&lt;/a&gt; - &lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/scraper.py&#34;&gt;scraper.py&lt;/a&gt; - &lt;a href=&#34;https://docs.aiohttp.org/&#34;&gt;AIOHTTP&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;scraper.py:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;向[Douyin|TikTok]的API提交请求并取回数据，处理后返回字典(dict)，支持异步。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;web_api.py:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;获得请求参数并使用&lt;code&gt;Scraper()&lt;/code&gt;类处理数据后以JSON形式返回，视频下载，配合iOS快捷指令实现快速调用，支持异步。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;web_app.py:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;为&lt;code&gt;web_api.py&lt;/code&gt;以及&lt;code&gt;scraper.py&lt;/code&gt;制作的简易Web程序，将网页输入的值进行处理后使用&lt;code&gt;Scraper()&lt;/code&gt;类处理并配合&lt;code&gt;web_api.py&lt;/code&gt;的接口输出在网页上(类似前后端分离)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;以上文件的参数大多可在&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/config.ini&#34;&gt;config.ini&lt;/a&gt;中进行修改&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💡项目文件结构&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;└── Douyin_TikTok_Download_API/&#xA;    ├── /static -&amp;gt; (PyWebIO static resources)&#xA;    ├── web_app.py -&amp;gt; (Web APP)&#xA;    ├── web_api.py -&amp;gt; (API)&#xA;    ├── scraper.py -&amp;gt; (Parsing library)&#xA;    ├── config.ini -&amp;gt; (configuration file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;✨功能：&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;抖音（抖音海外版: TikTok）视频/图片解析&lt;/li&gt; &#xA; &lt;li&gt;网页端批量解析(支持抖音/TikTok混合提交)&lt;/li&gt; &#xA; &lt;li&gt;网页端解析结果页批量下载无水印视频(V3.0.0暂时移除，请自行部署V2.X版本)&lt;/li&gt; &#xA; &lt;li&gt;API调用获取链接数据&lt;/li&gt; &#xA; &lt;li&gt;制作&lt;a href=&#34;https://pypi.org/project/douyin-tiktok-scraper/&#34;&gt;pip包&lt;/a&gt;方便快速导入你的项目&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/cn/app/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/id915249334&#34;&gt;iOS快捷指令快速调用API&lt;/a&gt;实现应用内下载无水印视频/图集&lt;/li&gt; &#xA; &lt;li&gt;解析作者主页内所有视频(&lt;a href=&#34;https://api-v2.douyin.wtf/docs&#34;&gt;API-V2&lt;/a&gt; 支持抖音/TikTok)&lt;/li&gt; &#xA; &lt;li&gt;解析视频内所有评论信息(&lt;a href=&#34;https://api-v2.douyin.wtf/docs&#34;&gt;API-V2&lt;/a&gt; 支持抖音/TikTok)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🤦‍待办清单：&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡欢迎提出新的建议或将你的思路在issue中与我分享，或直接提交PR至&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/tree/Development&#34;&gt;Development分支&lt;/a&gt; ♪(･ω･)ﾉ)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 编写一个桌面端的下载器实现本地批量下载&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; API-V2添加对hash_tag页面的数据爬取 &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/issues/101&#34;&gt;#101&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 对其他短视频平台添加支持，如：抖音火山版，快手，西瓜视频，哔哩哔哩&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📦调用解析库:&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡PyPi：&lt;a href=&#34;https://pypi.org/project/douyin-tiktok-scraper/&#34;&gt;https://pypi.org/project/douyin-tiktok-scraper/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;安装解析库：&lt;code&gt;pip install douyin-tiktok-scraper&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import asyncio&#xA;from douyin_tiktok_scraper.scraper import Scraper&#xA;&#xA;api = Scraper()&#xA;&#xA;async def hybrid_parsing(url: str) -&amp;gt; dict:&#xA;    # Hybrid parsing(Douyin/TikTok URL)&#xA;    result = await api.hybrid_parsing(url)&#xA;    print(f&#34;The hybrid parsing result:\n {result}&#34;)&#xA;    return result&#xA;&#xA;asyncio.run(hybrid_parsing(url=input(&#34;Paste Douyin/TikTok share URL here: &#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🗺️支持的提交格式：&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡提示：包含但不仅限于以下例子，如果遇到链接解析失败请开启一个新 &lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/issues&#34;&gt;issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;抖音分享口令 (APP内复制)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;7.43 pda:/ 让你在几秒钟之内记住我  https://v.douyin.com/L5pbfdP/ 复制此链接，打开Dou音搜索，直接观看视频！&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;抖音短网址 (APP内复制)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://v.douyin.com/L4FJNR3/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;抖音正常网址 (网页版复制)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://www.douyin.com/video/6914948781100338440&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;抖音发现页网址 (APP复制)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://www.douyin.com/discover?modal_id=7069543727328398622&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TikTok短网址 (APP内复制)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://www.tiktok.com/t/ZTR9nDNWq/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TikTok正常网址 (网页版复制)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://www.tiktok.com/@evil0ctal/video/7156033831819037994&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;抖音/TikTok批量网址(无需使用符合隔开)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://v.douyin.com/L4NpDJ6/&#xA;https://www.douyin.com/video/7126745726494821640&#xA;2.84 nqe:/ 骑白马的也可以是公主%%百万转场变身https://v.douyin.com/L4FJNR3/ 复制此链接，打开Dou音搜索，直接观看视频！&#xA;https://www.tiktok.com/t/ZTR9nkkmL/&#xA;https://www.tiktok.com/t/ZTR9nDNWq/&#xA;https://www.tiktok.com/@evil0ctal/video/7156033831819037994&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🛰️API文档&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡提示：也可以在web_api.py的代码注释中查看接口文档&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;API-V1文档：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;本地：&lt;a href=&#34;http://localhost:8000/docs&#34;&gt;http://localhost:8000/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;在线：&lt;a href=&#34;https://api.douyin.wtf/docs&#34;&gt;https://api.douyin.wtf/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;API-V2文档：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;在线：&lt;a href=&#34;https://api-v2.douyin.wtf/docs&#34;&gt;https://api-v2.douyin.wtf/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;API-V1演示：&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;爬取视频数据(TikTok或Douyin混合解析) &lt;code&gt;https://api.douyin.wtf/api?url=[视频链接/Video URL]&amp;amp;minimal=false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;下载视频/图集(TikTok或Douyin混合解析) &lt;code&gt;https://api.douyin.wtf/download?url=[视频链接/Video URL]&amp;amp;prefix=true&amp;amp;watermark=false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;替换域名下载视频/图集&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[抖音]&#xA;原始链接:&#xA;https://www.douyin.com/video/7159502929156705567&#xA;替换域名:&#xA;https://api.douyin.wtf/video/7159502929156705567&#xA;# 返回无水印视频下载响应&#xA;[TikTok]&#xA;original link:&#xA;https://www.tiktok.com/@evil0ctal/video/7156033831819037994&#xA;Replace Domain:&#xA;https://api.douyin.wtf/@evil0ctal/video/7156033831819037994&#xA;# Return No Watermark Video Download Response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;更多演示请查看文档内容......&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💻部署(方式一 Linux)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡提示：最好将本项目部署至美国地区的服务器，否则可能会出现奇怪的BUG。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;首先要去安全组开放8080(Web)和8000(API)端口。&lt;/li&gt; &#xA; &lt;li&gt;在宝塔面板应用商店内搜索&lt;code&gt;进程守护&lt;/code&gt;或手动安装&lt;code&gt;supervisord&lt;/code&gt;：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;[宝塔面板]&#xA;https://www.bt.cn/new/download.html&#xA;[aapanel]&#xA;https://www.aapanel.com/new/download.html&#xA;[Supervisor]&#xA;http://supervisord.org/installing.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;配置项目&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/config.ini&#34;&gt;config.ini&lt;/a&gt;文件&lt;/li&gt; &#xA; &lt;li&gt;安装依赖文件&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;设置&lt;code&gt;supervisord&lt;/code&gt;守护进程&lt;/li&gt; &#xA; &lt;li&gt;启动命令:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;[Web]&#xA;python3 web_app.py&#xA;[API]&#xA;python3 web_api.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;程序入口:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[Web]&#xA;http://localhost:8080&#xA;[API]&#xA;http://localhost:8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;💽部署(方式二 Docker)&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡Docker Image repo: &lt;a href=&#34;https://hub.docker.com/repository/docker/evil0ctal/douyin_tiktok_download_api&#34;&gt;Docker Hub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装docker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;curl -fsSL get.docker.com -o get-docker.sh&amp;amp;&amp;amp;sh get-docker.sh &amp;amp;&amp;amp;systemctl enable docker&amp;amp;&amp;amp;systemctl start docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;留下config.int和docker-compose.yml文件即可&lt;/li&gt; &#xA; &lt;li&gt;运行命令,让容器在后台运行&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;查看容器日志&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;docker logs -f douyin_tiktok_download_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;删除容器&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;docker rm -f douyin_tiktok_download_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;更新&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;docker compose pull &amp;amp;&amp;amp; docker compose down &amp;amp;&amp;amp; docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;❤️ 贡献者&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Evil0ctal&#34;&gt;&lt;img src=&#34;https://github.com/Evil0ctal.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jw-star&#34;&gt;&lt;img src=&#34;https://github.com/jw-star.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Jeffrey-deng&#34;&gt;&lt;img src=&#34;https://github.com/Jeffrey-deng.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/chris-ss&#34;&gt;&lt;img src=&#34;https://github.com/chris-ss.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/weixuan00&#34;&gt;&lt;img src=&#34;https://github.com/weixuan00.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tairraos&#34;&gt;&lt;img src=&#34;https://github.com/Tairraos.png?size=50&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📸截图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;API速度测试(对比官方API)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;🔎点击展开截图&lt;/summary&gt; &#xA; &lt;p&gt;抖音官方API: &lt;img src=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/Screenshots/benchmarks/Douyin_API.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;本项目API: &lt;img src=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/Screenshots/benchmarks/Douyin_API_Douyin_wtf.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;TikTok官方API: &lt;img src=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/Screenshots/benchmarks/TikTok_API.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;本项目API: &lt;img src=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/Screenshots/benchmarks/TikTok_API_Douyin_wtf.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;项目界面&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;🔎点击展开截图&lt;/summary&gt; &#xA; &lt;p&gt;Web主界面:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/Screenshots/v3_screenshots/Home.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Web main interface:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/main/Screenshots/v3_screenshots/Home_en.png?raw=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📜 Star历史&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Evil0ctal/Douyin_TikTok_Download_API&amp;amp;Timeline&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Evil0ctal/Douyin_TikTok_Download_API&amp;amp;type=Timeline&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Evil0ctal/Douyin_TikTok_Download_API/raw/Stable/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Start: 2021/11/06 GitHub: &lt;a href=&#34;https://github.com/Evil0ctal&#34;&gt;@Evil0ctal&lt;/a&gt; Contact: &lt;a href=&#34;mailto:Evil0ctal1985@gmail.com&#34;&gt;Evil0ctal1985@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>