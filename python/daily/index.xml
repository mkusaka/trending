<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-05T01:36:02Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linsomniac/spotify_to_ytmusic</title>
    <updated>2025-03-05T01:36:02Z</updated>
    <id>tag:github.com,2025-03-05:/linsomniac/spotify_to_ytmusic</id>
    <link href="https://github.com/linsomniac/spotify_to_ytmusic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Copy playlists and liked music from Spotify to YTMusic&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;This is a set of scripts for copying &#34;liked&#34; songs and playlists from Spotify to YTMusic. It provides a GUI (implemented by Yoween, formerly called spotify_to_ytmusic_gui).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Preparation/Pre-Conditions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install Python and Git&lt;/strong&gt; (you may already have them installed).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uninstall the pip package from the original repository&lt;/strong&gt; (if you previously installed &lt;code&gt;linsomniac/spotify_to_ytmusic&lt;/code&gt;):&lt;/p&gt; &lt;p&gt;On Windows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip uninstall spotify2ytmusic&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;On Linux or Mac:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pip uninstall spotify2ytmusic&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Setup Instructions&lt;/h3&gt; &#xA;&lt;h4&gt;1. Clone, Create a Virtual Environment, and Install Required Packages&lt;/h4&gt; &#xA;&lt;p&gt;Start by creating and activating a Python virtual environment to isolate dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/linsomniac/spotify_to_ytmusic.git&#xA;cd spotify_to_ytmusic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv .venv&#xA;.venv\Scripts\activate&#xA;pip install ytmusicapi tk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux or Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m venv .venv&#xA;source .venv/bin/activate&#xA;pip install ytmusicapi tk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;2. Generate YouTube Music Credentials&lt;/h4&gt; &#xA;&lt;p&gt;To use the YouTube Music API, you need to generate valid credentials. Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Log in to YouTube Music&lt;/strong&gt;: Open YouTube Music in Firefox and ensure you are logged in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open the Inspection Tool&lt;/strong&gt;: Press &lt;code&gt;F12&lt;/code&gt; or right-click and select &lt;em&gt;Inspect&lt;/em&gt; to open the browser&#39;s inspection tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access the Network Tab&lt;/strong&gt;: Navigate to the Network tab and filter by &lt;code&gt;/browse&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Select a Request&lt;/strong&gt;: Click one of the requests under the filtered results and locate the &lt;em&gt;Request Headers&lt;/em&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Toggle RAW View&lt;/strong&gt;: Click the RAW toggle button to view the headers in raw format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy Headers&lt;/strong&gt;: Right-click, choose &lt;em&gt;Select All&lt;/em&gt;, and copy the content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Paste into &lt;code&gt;raw_headers.txt&lt;/code&gt;&lt;/strong&gt;: Open the &lt;code&gt;raw_headers.txt&lt;/code&gt; file located in the main directory of this project and paste the copied content into it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run the Script&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Execute the following command to generate the credentials file:&lt;/p&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python spotify2ytmusic/ytmusic_credentials.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux or Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 spotify2ytmusic/ytmusic_credentials.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: After running this script, the authentication file will be created. When you launch the GUI in the next step, it will automatically detect this file and log in to YouTube Music without requiring manual input. Youâ€™ll see a log message confirming this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;File detected, auto login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The GUI will &lt;strong&gt;ignore the &#39;Login to YT Music&#39; tab&lt;/strong&gt; and jump straight to the &#39;Spotify Backup&#39; tab.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;3. Use the GUI for Migration&lt;/h4&gt; &#xA;&lt;p&gt;Now you can use the graphical user interface (GUI) to migrate your playlists and liked songs to YouTube Music. Start the GUI with the following command:&lt;/p&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m spotify2ytmusic gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux or Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m spotify2ytmusic gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;GUI Features&lt;/h3&gt; &#xA;&lt;p&gt;Once the GUI is running, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backup Your Spotify Playlists&lt;/strong&gt;: Save your playlists and liked songs into the file &lt;code&gt;playlists.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Load Liked Songs&lt;/strong&gt;: Migrate your Spotify liked songs to YouTube Music.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;List Playlists&lt;/strong&gt;: View your playlists and their details.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy All Playlists&lt;/strong&gt;: Migrate all Spotify playlists to YouTube Music.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Copy a Specific Playlist&lt;/strong&gt;: Select and migrate a specific Spotify playlist to YouTube Music.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Import Your Liked Songs - Tab 3&lt;/h3&gt; &#xA;&lt;h4&gt;Click the &lt;code&gt;import&lt;/code&gt; button, and wait until it finished and switched to the next tab&lt;/h4&gt; &#xA;&lt;p&gt;It will go through your Spotify liked songs, and like them on YTMusic. It will display the song from Spotify and then the song that it found on YTMusic that it is liking. I&#39;ve spot-checked my songs and it seems to be doing a good job of matching YTMusic songs with Spotify. So far I haven&#39;t seen a single failure across a couple hundred songs, but more esoteric titles it may have issues with.&lt;/p&gt; &#xA;&lt;h3&gt;List Your Playlists - Tab 4&lt;/h3&gt; &#xA;&lt;h4&gt;Click the &lt;code&gt;list&lt;/code&gt; button, and wait until it finished and switched to the next tab&lt;/h4&gt; &#xA;&lt;p&gt;This will list the playlists you have on both Spotify and YTMusic, so you can individually copy them.&lt;/p&gt; &#xA;&lt;h3&gt;Copy Your Playlists - Tab 5&lt;/h3&gt; &#xA;&lt;p&gt;You can either copy &lt;strong&gt;all&lt;/strong&gt; playlists, or do a more surgical copy of individual playlists. Copying all playlists will use the name of the Spotify playlist as the destination playlist name on YTMusic.&lt;/p&gt; &#xA;&lt;h4&gt;To copy all the playlists click the &lt;code&gt;copy&lt;/code&gt; button, and wait until it finished and switched to the next tab&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This does not copy the Liked playlist (see above to do that).&lt;/p&gt; &#xA;&lt;h3&gt;Copy specific Playlist - Tab 6&lt;/h3&gt; &#xA;&lt;p&gt;In the list output, find the &#34;playlist id&#34; (the first column) of the Spotify playlist and of the YTMusic playlist.&lt;/p&gt; &#xA;&lt;h4&gt;Then fill both input fields and click the &lt;code&gt;copy&lt;/code&gt; button&lt;/h4&gt; &#xA;&lt;p&gt;The copy playlist will take the name of the YTMusic playlist and will create the playlist if it does not exist, if you start the YTMusic playlist with a &#34;+&#34;:&lt;/p&gt; &#xA;&lt;p&gt;Re-running &#34;copy_playlist&#34; or &#34;load_liked&#34; in the event that it fails should be safe, it will not duplicate entries on the playlist.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Ways to Run&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There are two possible ways to run these commands, one is via standalone commands if the application was installed, which takes the form of: &lt;code&gt;s2yt_load_liked&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If not fully installed, you can replace the &#34;s2yt_&#34; with &#34;python -m spotify2ytmusic&#34;, for example: &lt;code&gt;s2yt_load_liked&lt;/code&gt; becomes &lt;code&gt;python -j spotify2ytmusic load_liked&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Login to YTMusic&lt;/h3&gt; &#xA;&lt;p&gt;See &#34;Generate YouTube Music Credentials&#34; above.&lt;/p&gt; &#xA;&lt;h3&gt;Backup Your Spotify Playlists&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;spotify2ytmusic/spotify_backup.py&lt;/code&gt; and it will help you authorize access to your spotify account.&lt;/p&gt; &#xA;&lt;p&gt;Run: &lt;code&gt;python3 spotify_backup.py playlists.json --dump=liked,playlists --format=json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will save your playlists and liked songs into the file &#34;playlists.json&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Import Your Liked Songs&lt;/h3&gt; &#xA;&lt;p&gt;Run: &lt;code&gt;s2yt_load_liked&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will go through your Spotify liked songs, and like them on YTMusic. It will display the song from spotify and then the song that it found on YTMusic that it is liking. I&#39;ve spot-checked my songs and it seems to be doing a good job of matching YTMusic songs with Spotify. So far I haven&#39;t seen a single failure across a couple thousand songs, but more esoteric titles it may have issues with.&lt;/p&gt; &#xA;&lt;h3&gt;Import Your Liked Albums&lt;/h3&gt; &#xA;&lt;p&gt;Run: &lt;code&gt;s2yt_load_liked_albums&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spotify stores liked albums outside of the &#34;Liked Songs&#34; playlist. This is the command to load your liked albums into YTMusic liked songs.&lt;/p&gt; &#xA;&lt;h3&gt;List Your Playlists&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;s2yt_list_playlists&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will list the playlists you have on both Spotify and YTMusic. You will need to individually copy them.&lt;/p&gt; &#xA;&lt;h3&gt;Copy Your Playlists&lt;/h3&gt; &#xA;&lt;p&gt;You can either copy &lt;strong&gt;all&lt;/strong&gt; playlists, or do a more surgical copy of individual playlists. Copying all playlists will use the name of the Spotify playlist as the destination playlist name on YTMusic. To copy all playlists, run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;s2yt_copy_all_playlists&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This does not copy the Liked playlist (see above to do that).&lt;/p&gt; &#xA;&lt;p&gt;In the list output above, find the &#34;playlist id&#34; (the first column) of the Spotify playlist, and of the YTMusic playlist, and then run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;s2yt_copy_playlist &amp;lt;SPOTIFY_PLAYLIST_ID&amp;gt; &amp;lt;YTMUSIC_PLAYLIST_ID&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need to create a playlist, you can run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;s2yt_create_playlist &#34;&amp;lt;PLAYLIST_NAME&amp;gt;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Or&lt;/em&gt; the copy playlist can take the name of the YTMusic playlist and will create the playlist if it does not exist, if you start the YTMusic playlist with a &#34;+&#34;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;s2yt_copy_playlist &amp;lt;SPOTIFY_PLAYLIST_ID&amp;gt; +&amp;lt;YTMUSIC_PLAYLIST_NAME&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;s2yt_copy_playlist SPOTIFY_PLAYLIST_ID &#34;+Feeling Like a PUNK&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Re-running &#34;copy_playlist&#34; or &#34;load_liked&#34; in the event that it fails should be safe, it will not duplicate entries on the playlist.&lt;/p&gt; &#xA;&lt;h3&gt;Searching for YTMusic Tracks&lt;/h3&gt; &#xA;&lt;p&gt;This is mostly for debugging, but there is a command to search for tracks in YTMusic:&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;s2yt_search --artist &amp;lt;ARTIST&amp;gt; --album &amp;lt;ALBUM&amp;gt; &amp;lt;TRACK_NAME&amp;gt;&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Details About Search Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;The function first searches for albums by the given artist name on YTMusic.&lt;/p&gt; &#xA;&lt;p&gt;It then iterates over the first three album results and tries to find a track with the exact same name as the given track name. If it finds a match, it returns the track information.&lt;/p&gt; &#xA;&lt;p&gt;If the function can&#39;t find the track in the albums, it then searches for songs by the given track name and artist name.&lt;/p&gt; &#xA;&lt;p&gt;Depending on the yt_search_algo parameter, it performs one of the following actions:&lt;/p&gt; &#xA;&lt;p&gt;If yt_search_algo is 0, it simply returns the first song result.&lt;/p&gt; &#xA;&lt;p&gt;If yt_search_algo is 1, it iterates over the song results and returns the first song that matches the track name, artist name, and album name exactly. If it can&#39;t find a match, it raises a ValueError.&lt;/p&gt; &#xA;&lt;p&gt;If yt_search_algo is 2, it performs a fuzzy match. It removes everything in brackets in the song title and checks for a match with the track name, artist name, and album name. If it can&#39;t find a match, it then searches for videos with the track name and artist name. If it still can&#39;t find a match, it raises a ValueError.&lt;/p&gt; &#xA;&lt;p&gt;If the function can&#39;t find the track using any of the above methods, it raises a ValueError.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does this run on mobile?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;No, this runs on Linux/Windows/MacOS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How does the lookup algorithm work?&lt;/p&gt; &lt;p&gt;Given the Spotify track information, it does a lookup for the album by the same artist on YTMusic, then looks at the first 3 hits looking for a track with exactly the same name. In the event that it can&#39;t find that exact track, it then does a search of songs for the track name by the same artist and simply returns the first hit.&lt;/p&gt; &lt;p&gt;The idea is that finding the album and artist and then looking for the exact track match will be more likely to be accurate than searching for the song and artist and relying on the YTMusic algorithm to figure things out, especially for short tracks that might be have many contradictory hits like &#34;Survival by Yes&#34;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;My copy is failing with repeated &#34;ERROR: (Retrying) Server returned HTTP 400: Bad Request&#34;.&lt;/p&gt; &lt;p&gt;Try running with &#34;--track-sleep=3&#34; argument to do a 3 second sleep between tracks. This will take much longer, but may succeed where faster rates have failed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Creative Commons Zero v1.0 Universal&lt;/p&gt; &#xA;&lt;p&gt;spotify-backup.py licensed under MIT License. See &lt;a href=&#34;https://github.com/caseychu/spotify-backup&#34;&gt;https://github.com/caseychu/spotify-backup&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>virattt/ai-hedge-fund</title>
    <updated>2025-03-05T01:36:02Z</updated>
    <id>tag:github.com,2025-03-05:/virattt/ai-hedge-fund</id>
    <link href="https://github.com/virattt/ai-hedge-fund" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI Hedge Fund Team&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AI Hedge Fund&lt;/h1&gt; &#xA;&lt;p&gt;This is a proof of concept for an AI-powered hedge fund. The goal of this project is to explore the use of AI to make trading decisions. This project is for &lt;strong&gt;educational&lt;/strong&gt; purposes only and is not intended for real trading or investment.&lt;/p&gt; &#xA;&lt;p&gt;This system employs several agents working together:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ben Graham Agent - The godfather of value investing, only buys hidden gems with a margin of safety&lt;/li&gt; &#xA; &lt;li&gt;Bill Ackman Agent - An activist investors, takes bold positions and pushes for change&lt;/li&gt; &#xA; &lt;li&gt;Cathie Wood Agent - The queen of growth investing, believes in the power of innovation and disruption&lt;/li&gt; &#xA; &lt;li&gt;Warren Buffett Agent - The oracle of Omaha, seeks wonderful companies at a fair price&lt;/li&gt; &#xA; &lt;li&gt;Charlie Munger Agent - Warren Buffett&#39;s partner, only buys wonderful businesses at fair prices&lt;/li&gt; &#xA; &lt;li&gt;Valuation Agent - Calculates the intrinsic value of a stock and generates trading signals&lt;/li&gt; &#xA; &lt;li&gt;Sentiment Agent - Analyzes market sentiment and generates trading signals&lt;/li&gt; &#xA; &lt;li&gt;Fundamentals Agent - Analyzes fundamental data and generates trading signals&lt;/li&gt; &#xA; &lt;li&gt;Technicals Agent - Analyzes technical indicators and generates trading signals&lt;/li&gt; &#xA; &lt;li&gt;Risk Manager - Calculates risk metrics and sets position limits&lt;/li&gt; &#xA; &lt;li&gt;Portfolio Manager - Makes final trading decisions and generates orders&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;1117&#34; alt=&#34;Screenshot 2025-02-09 at 11 26 14â€¯AM&#34; src=&#34;https://github.com/user-attachments/assets/16509cc2-4b64-4c67-8de6-00d224893d58&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the system simulates trading decisions, it does not actually trade.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/virattt&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/virattt?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This project is for &lt;strong&gt;educational and research purposes only&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not intended for real trading or investment&lt;/li&gt; &#xA; &lt;li&gt;No warranties or guarantees provided&lt;/li&gt; &#xA; &lt;li&gt;Past performance does not indicate future results&lt;/li&gt; &#xA; &lt;li&gt;Creator assumes no liability for financial losses&lt;/li&gt; &#xA; &lt;li&gt;Consult a financial advisor for investment decisions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By using this software, you agree to use it solely for learning purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#running-the-hedge-fund&#34;&gt;Running the Hedge Fund&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#running-the-backtester&#34;&gt;Running the Backtester&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#feature-requests&#34;&gt;Feature Requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/virattt/ai-hedge-fund/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/virattt/ai-hedge-fund.git&#xA;cd ai-hedge-fund&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Poetry (if not already installed):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSL https://install.python-poetry.org | python3 -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set up your environment variables:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create .env file for your API keys&#xA;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Set your API keys:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# For running LLMs hosted by openai (gpt-4o, gpt-4o-mini, etc.)&#xA;# Get your OpenAI API key from https://platform.openai.com/&#xA;OPENAI_API_KEY=your-openai-api-key&#xA;&#xA;# For running LLMs hosted by groq (deepseek, llama3, etc.)&#xA;# Get your Groq API key from https://groq.com/&#xA;GROQ_API_KEY=your-groq-api-key&#xA;&#xA;# For getting financial data to power the hedge fund&#xA;# Get your Financial Datasets API key from https://financialdatasets.ai/&#xA;FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: You must set &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;, &lt;code&gt;GROQ_API_KEY&lt;/code&gt;, or &lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt; for the hedge fund to work. If you want to use LLMs from all providers, you will need to set all API keys.&lt;/p&gt; &#xA;&lt;p&gt;Financial data for AAPL, GOOGL, MSFT, NVDA, and TSLA is free and does not require an API key.&lt;/p&gt; &#xA;&lt;p&gt;For any other ticker, you will need to set the &lt;code&gt;FINANCIAL_DATASETS_API_KEY&lt;/code&gt; in the .env file.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running the Hedge Fund&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python src/main.py --ticker AAPL,MSFT,NVDA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Output:&lt;/strong&gt; &lt;img width=&#34;992&#34; alt=&#34;Screenshot 2025-01-06 at 5 50 17â€¯PM&#34; src=&#34;https://github.com/user-attachments/assets/e8ca04bf-9989-4a7d-a8b4-34e04666663b&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also specify a &lt;code&gt;--show-reasoning&lt;/code&gt; flag to print the reasoning of each agent to the console.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python src/main.py --ticker AAPL,MSFT,NVDA --show-reasoning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can optionally specify the start and end dates to make decisions for a specific time period.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python src/main.py --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running the Backtester&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Output:&lt;/strong&gt; &lt;img width=&#34;941&#34; alt=&#34;Screenshot 2025-01-06 at 5 47 52â€¯PM&#34; src=&#34;https://github.com/user-attachments/assets/00e794ea-8628-44e6-9a84-8f8a31ad3b47&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can optionally specify the start and end dates to backtest over a specific time period.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA --start-date 2024-01-01 --end-date 2024-03-01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;ai-hedge-fund/&#xA;â”œâ”€â”€ src/&#xA;â”‚   â”œâ”€â”€ agents/                   # Agent definitions and workflow&#xA;â”‚   â”‚   â”œâ”€â”€ bill_ackman.py        # Bill Ackman agent&#xA;â”‚   â”‚   â”œâ”€â”€ fundamentals.py       # Fundamental analysis agent&#xA;â”‚   â”‚   â”œâ”€â”€ portfolio_manager.py  # Portfolio management agent&#xA;â”‚   â”‚   â”œâ”€â”€ risk_manager.py       # Risk management agent&#xA;â”‚   â”‚   â”œâ”€â”€ sentiment.py          # Sentiment analysis agent&#xA;â”‚   â”‚   â”œâ”€â”€ technicals.py         # Technical analysis agent&#xA;â”‚   â”‚   â”œâ”€â”€ valuation.py          # Valuation analysis agent&#xA;â”‚   â”‚   â”œâ”€â”€ warren_buffett.py     # Warren Buffett agent&#xA;â”‚   â”œâ”€â”€ tools/                    # Agent tools&#xA;â”‚   â”‚   â”œâ”€â”€ api.py                # API tools&#xA;â”‚   â”œâ”€â”€ backtester.py             # Backtesting tools&#xA;â”‚   â”œâ”€â”€ main.py # Main entry point&#xA;â”œâ”€â”€ pyproject.toml&#xA;â”œâ”€â”€ ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create a feature branch&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch&lt;/li&gt; &#xA; &lt;li&gt;Create a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Please keep your pull requests small and focused. This will make it easier to review and merge.&lt;/p&gt; &#xA;&lt;h2&gt;Feature Requests&lt;/h2&gt; &#xA;&lt;p&gt;If you have a feature request, please open an &lt;a href=&#34;https://github.com/virattt/ai-hedge-fund/issues&#34;&gt;issue&lt;/a&gt; and make sure it is tagged with &lt;code&gt;enhancement&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
</feed>