<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T01:39:24Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebookresearch/nougat</title>
    <updated>2023-09-01T01:39:24Z</updated>
    <id>tag:github.com,2023-09-01:/facebookresearch/nougat</id>
    <link href="https://github.com/facebookresearch/nougat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of Nougat Neural Optical Understanding for Academic Documents&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Nougat: Neural Optical Understanding for Academic Documents&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2308.13418&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Paper-arxiv.2308.13418-white&#34; alt=&#34;Paper&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebookresearch/nougat&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/facebookresearch/nougat&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/nougat-ocr&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/nougat-ocr?logo=pypi&#34; alt=&#34;PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/release/python-390/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.9+-blue.svg?sanitize=true&#34; alt=&#34;Python 3.9+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;This is the official repository for Nougat, the academic document PDF parser that understands LaTeX math and tables.&lt;/p&gt; &#xA;&lt;p&gt;Project page: &lt;a href=&#34;https://facebookresearch.github.io/nougat/&#34;&gt;https://facebookresearch.github.io/nougat/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;From pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install nougat-ocr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install git+https://github.com/facebookresearch/nougat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are extra dependencies if you want to call the model from an API or generate a dataset. Install via&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install &#34;nougat-ocr[api]&#34;&lt;/code&gt; or &lt;code&gt;pip install &#34;nougat-ocr[dataset]&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Get prediction for a PDF&lt;/h3&gt; &#xA;&lt;h4&gt;CLI&lt;/h4&gt; &#xA;&lt;p&gt;To get predictions for a PDF run&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ nougat path/to/file.pdf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: nougat [-h] [--batchsize BATCHSIZE] [--checkpoint CHECKPOINT] [--out OUT] pdf [pdf ...]&#xA;&#xA;positional arguments:&#xA;  pdf                   PDF(s) to process.&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  --batchsize BATCHSIZE, -b BATCHSIZE&#xA;                        Batch size to use. Defaults to 6 which runs on 24GB VRAM.&#xA;  --checkpoint CHECKPOINT, -c CHECKPOINT&#xA;                        Path to checkpoint directory&#xA;  --out OUT, -o OUT     Output directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the output directory every PDF will be saved as a &lt;code&gt;.mmd&lt;/code&gt; file, the lightweight markup language, mostly compatible with &lt;a href=&#34;https://github.com/Mathpix/mathpix-markdown-it&#34;&gt;Mathpix Markdown&lt;/a&gt; (we make use of the LaTeX tables).&lt;/p&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;With the extra dependencies you use &lt;code&gt;app.py&lt;/code&gt; to start an API. Call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nougat_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a prediction of a PDF file by making a POST request to &lt;a href=&#34;http://127.0.0.1:8503/predict/&#34;&gt;http://127.0.0.1:8503/predict/&lt;/a&gt;. It also accepts parameters &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; to limit the computation to select page numbers (boundaries are included).&lt;/p&gt; &#xA;&lt;h2&gt;Dataset&lt;/h2&gt; &#xA;&lt;h3&gt;Generate dataset&lt;/h3&gt; &#xA;&lt;p&gt;To generate a dataset you need&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A directory containing the PDFs&lt;/li&gt; &#xA; &lt;li&gt;A directory containing the &lt;code&gt;.html&lt;/code&gt; files (processed &lt;code&gt;.tex&lt;/code&gt; files by &lt;a href=&#34;https://math.nist.gov/~BMiller/LaTeXML/&#34;&gt;LaTeXML&lt;/a&gt;) with the same folder structure&lt;/li&gt; &#xA; &lt;li&gt;A binary file of &lt;a href=&#34;https://github.com/allenai/pdffigures2&#34;&gt;pdffigures2&lt;/a&gt; and a corresponding environment variable &lt;code&gt;export PDFFIGURES_PATH=&#34;/path/to/binary.jar&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Next run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.dataset.split_htmls_to_pages --html path/html/root --pdfs path/pdf/root --out path/paired/output --figure path/pdffigures/outputs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional arguments include&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Argument&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--recompute&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;recompute all splits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--markdown MARKDOWN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Markdown output dir&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--workers WORKERS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How many processes to use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--dpi DPI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;What resolution the pages will be saved at&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--timeout TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;max time per paper in seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;--tesseract&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tesseract OCR prediction for each page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Finally create a &lt;code&gt;jsonl&lt;/code&gt; file that contains all the image paths, markdown text and meta information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.dataset.create_index --dir path/paired/output --out index.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For each &lt;code&gt;jsonl&lt;/code&gt; file you also need to generate a seek map for faster data loading:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.dataset.gen_seek file.jsonl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting directory structure can look as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;root/&#xA;├── images&#xA;├── train.jsonl&#xA;├── train.seek.map&#xA;├── test.jsonl&#xA;├── test.seek.map&#xA;├── validation.jsonl&#xA;└── validation.seek.map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;.mmd&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt; files in the &lt;code&gt;path/paired/output&lt;/code&gt; (here &lt;code&gt;images&lt;/code&gt;) are no longer required. This can be useful for pushing to a S3 bucket by halving the amount of files.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;To train or fine tune a Nougat model, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python train.py --config config/train_nougat.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python test.py --checkpoint path/to/checkpoint --dataset path/to/test.jsonl --save_path path/to/results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the results for the different text modalities, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m nougat.metrics path/to/results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{blecher2023nougat,&#xA;      title={Nougat: Neural Optical Understanding for Academic Documents}, &#xA;      author={Lukas Blecher and Guillem Cucurull and Thomas Scialom and Robert Stojnic},&#xA;      year={2023},&#xA;      eprint={2308.13418},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.LG}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;This repository builds on top of the &lt;a href=&#34;https://github.com/clovaai/donut/&#34;&gt;Donut&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Nougat codebase is licensed under MIT.&lt;/p&gt; &#xA;&lt;p&gt;Nougat model weights are licensed under CC-BY-NC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>W01fh4cker/VcenterKit</title>
    <updated>2023-09-01T01:39:24Z</updated>
    <id>tag:github.com,2023-09-01:/W01fh4cker/VcenterKit</id>
    <link href="https://github.com/W01fh4cker/VcenterKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vcenter综合渗透利用工具包 | Vcenter Comprehensive Penetration and Exploitation Toolkit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://socialify.git.ci/W01fh4cker/VcenterKit/image?description=1&amp;amp;descriptionEditable=Vcenter%E7%BB%BC%E5%90%88%E6%B8%97%E9%80%8F%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7%E5%8C%85%20%7C%20Vcenter%20Comprehensive%20Penetration%20and%20Exploitation%20Toolkit&amp;amp;font=Rokkitt&amp;amp;forks=1&amp;amp;issues=1&amp;amp;language=1&amp;amp;logo=https%3A%2F%2Fs2.loli.net%2F2022%2F06%2F25%2FgUAh2V5CiD96y8G.jpg&amp;amp;owner=1&amp;amp;pattern=Circuit%20Board&amp;amp;pulls=1&amp;amp;stargazers=1&#34; alt=&#34;VcenterKit&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1. 使用说明(V 0.0.2)&lt;/h1&gt; &#xA;&lt;h2&gt;1.1 安装与启动&lt;/h2&gt; &#xA;&lt;p&gt;推荐使用&lt;code&gt;Python3.9&lt;/code&gt;，其余版本未测试，&lt;code&gt;Linux&lt;/code&gt;和&lt;code&gt;mac&lt;/code&gt;未测试。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;python VcenterKit.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1.2 信息收集模块&lt;/h2&gt; &#xA;&lt;p&gt;直接输入&lt;code&gt;url&lt;/code&gt;即可进行信息搜集，如果存在本地文件读取的话，程序会自动读取数据库文件；有些网站是没有&lt;code&gt;sdk&lt;/code&gt;接口的，也就无法通过这种方式来查询信息，后续会研究其他的方法：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/20230824001431.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.3 CVE-2021-21972模块&lt;/h2&gt; &#xA;&lt;p&gt;主要利用思维导图如下：&lt;/p&gt; &#xA;&lt;p&gt;可以看到，并非所有情况下都能&lt;code&gt;100%&lt;/code&gt;成功上传文件的，因此这里我把这些利用链（除了写&lt;code&gt;authorized_keys&lt;/code&gt;）全部写在代码里面了，依次尝试。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/9f185d40dfc9057818ed93226aeb279.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;这里放上之前测试利用搭建的环境的截图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/8bd245ffada0baa39a3059c73764bed.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;上传哥斯拉马：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/W01fh4cker/VcenterKit/assets/101872898/3aac0b58-d2b7-49bd-a51e-5dc87e4f8845&#34; alt=&#34;11edd12a79387cb0d58d2a24b86ca10&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.4 CVE-2021-21985模块&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/W01fh4cker/VcenterKit/assets/101872898/e49cb0bb-0bbf-457b-b789-09ce3948a220&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;需要注意的是，这里的&lt;code&gt;RMI&lt;/code&gt;和&lt;code&gt;Command&lt;/code&gt;只能二选一填写，目前&lt;code&gt;rmi&lt;/code&gt;由于测试环境的问题，还没有进行测试，可能会有问题，但是&lt;code&gt;command&lt;/code&gt;目前测试下来没什么问题，这里放上一张之前写的时候测试的截图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/e39abf9b303b95372fa666e919cf705.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;需要注意的是，当前版本（&lt;code&gt;v0.0.2&lt;/code&gt;）的&lt;code&gt;shell&lt;/code&gt;上传和内存马打入模块还没实现。但是核心思想就是替换&lt;code&gt;xml&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;以下参考：&lt;a href=&#34;https://daidaitiehanhan.github.io/2022/04/18/vCenter2021%E5%87%A0%E4%B8%AA%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%90%8E%E6%B8%97%E9%80%8F/#%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8&#34;&gt;https://daidaitiehanhan.github.io/2022/04/18/vCenter2021几个漏洞及后渗透/#不出网利用&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;上传&lt;code&gt;shell&lt;/code&gt;的&lt;code&gt;xml&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;beans xmlns=&#34;http://www.springframework.org/schema/beans&#34;&#xA;       xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;       xsi:schemaLocation=&#34;&#xA;     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;&amp;gt;&#xA;    &amp;lt;bean id=&#34;pb&#34; class=&#34;java.io.PrintWriter&#34;&amp;gt;&#xA;        &amp;lt;constructor-arg&amp;gt;&#xA;            &amp;lt;value&amp;gt;/usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/41/0/h5ngc.war/resources/log2.jsp&amp;lt;/value&amp;gt;&#xA;        &amp;lt;/constructor-arg&amp;gt;&#xA;    &amp;lt;/bean&amp;gt;&#xA;    &amp;lt;bean id=&#34;is&#34; class=&#34;java.lang.String&#34;&amp;gt;&#xA;        &amp;lt;constructor-arg&amp;gt;&#xA;            &amp;lt;value&amp;gt;&amp;lt;![CDATA[&amp;lt;% out.println(&#34;ok&#34;); %&amp;gt; ]]&amp;gt;&amp;lt;/value&amp;gt;&#xA;        &amp;lt;/constructor-arg&amp;gt;&#xA;        &amp;lt;property name=&#34;whatever&#34; value=&#34;#{ pb.println(is).close()}&#34;/&amp;gt;&#xA;    &amp;lt;/bean&amp;gt;&#xA;&amp;lt;/beans&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;打内存马要用到的&lt;code&gt;xml&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;beans xmlns=&#34;http://www.springframework.org/schema/beans&#34;&#xA;       xmlns:xsi=&#34;http://www.w3.org/2001/XMLSchema-instance&#34;&#xA;       xsi:schemaLocation=&#34;&#xA;     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;&amp;gt;&#xA;    &amp;lt;bean id=&#34;pb&#34; class=&#34;com.sun.org.apache.bcel.internal.util.ClassLoader&#34;&amp;gt;&#xA;    &amp;lt;/bean&amp;gt;&#xA;        &amp;lt;bean id=&#34;is&#34; class=&#34;java.lang.String&#34;&amp;gt;&#xA;        &amp;lt;constructor-arg&amp;gt;&#xA;            &amp;lt;value&amp;gt;&amp;lt;![CDATA[$$BCEL$$...]]&amp;gt;&amp;lt;/value&amp;gt;&#xA;        &amp;lt;/constructor-arg&amp;gt;&#xA;        &amp;lt;property name=&#34;whatever&#34; value=&#34;#{ pb.loadClass(is).newInstance()}&#34;/&amp;gt;&#xA;    &amp;lt;/bean&amp;gt;&#xA;&amp;lt;/beans&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;等后面有时间了写上，当然，你可以来写，然后提&lt;code&gt;pr&lt;/code&gt;，我看到会第一时间回复。&lt;/p&gt; &#xA;&lt;h2&gt;1.5 CVE-2021-22005模块&lt;/h2&gt; &#xA;&lt;p&gt;这里的&lt;code&gt;shell name&lt;/code&gt;可写可不写，不写的话就是自动生成&lt;code&gt;6&lt;/code&gt;位的名字。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/20230824003746.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;测试截图： &lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/20230824003704.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.6 CVE-2022-22954&lt;/h2&gt; &#xA;&lt;p&gt;测试截图如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/W01fh4cker/blog_image/main/6ef6d341978aaaa6f36bb894594ac47.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.7 CVE-2022-22972&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/20230824004009.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.8 后渗透利用模块&lt;/h2&gt; &#xA;&lt;p&gt;本来是想把这些脚本集成到工具里面的，但是转念一想，没必要，直接弄成点按钮生成脚本到本地这种形式就可以了，这样直接一个工具走天下。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/W01fh4cker/blog_image/main/20230827015200.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.9 渗透测试记事本&lt;/h2&gt; &#xA;&lt;p&gt;这里我放上去了一些打vcenter的时候常用的命令、常看的文章。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/W01fh4cker/blog_image/main/e2ecc850aeca29a024a85fd08618e87.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;2. Q&amp;amp;A&lt;/h1&gt; &#xA;&lt;h2&gt;2.1 代理问题？&lt;/h2&gt; &#xA;&lt;p&gt;因为&lt;code&gt;vcenter&lt;/code&gt;大多数位于内网，因此都是&lt;code&gt;proxifer&lt;/code&gt;挂代理打，也就不怎么需要程序本身加个代理功能，我也懒得写了。&lt;/p&gt; &#xA;&lt;h2&gt;2.2 长期维护吗？&lt;/h2&gt; &#xA;&lt;p&gt;长期维护！本工具会和未来出的一系列工具，例如后面会开始写的&lt;code&gt;ExchangeKit&lt;/code&gt;一样，都是我长期维护的项目，和之前的&lt;code&gt;Serein&lt;/code&gt;( &lt;a href=&#34;https://github.com/W01fh4cker/Serein&#34;&gt;https://github.com/W01fh4cker/Serein&lt;/a&gt; )不一样（那个时候代码水平不行，加上&lt;code&gt;tkinter&lt;/code&gt;做图形化太难受了，就不想维护了）。&lt;/p&gt; &#xA;&lt;h2&gt;2.3 代码写的有逻辑问题/有bug/有新利用方式，如何沟通？&lt;/h2&gt; &#xA;&lt;p&gt;类似的问题，直接提交&lt;code&gt;issues&lt;/code&gt;( &lt;a href=&#34;https://github.com/W01fh4cker/VcenterKit/issues&#34;&gt;https://github.com/W01fh4cker/VcenterKit/issues&lt;/a&gt; )，描述清楚相关环境，和具体细节，我看到之后会在当天内回复，一般20分钟内就会回复（因为我的电子邮件可以实时收到消息）。&lt;/p&gt; &#xA;&lt;p&gt;如果有代码能力的话，欢迎提交&lt;code&gt;pull request&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;2.4 想参与进来，共同维护？&lt;/h2&gt; &#xA;&lt;p&gt;没问题，提交&lt;code&gt;pull request&lt;/code&gt;，贡献代码。&lt;/p&gt; &#xA;&lt;h2&gt;2.5 和其他工具相比的优缺点？&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Akatsuki&lt;/code&gt;师傅（ &lt;a href=&#34;https://github.com/Schira4396&#34;&gt;https://github.com/Schira4396&lt;/a&gt; ）写的&lt;code&gt;VcenterKiller&lt;/code&gt;是我非常喜欢的一个利用工具，我的&lt;code&gt;VcenterKit&lt;/code&gt;与其定位并不相同，我这个是用于本地挂代理测试内网或者外网的&lt;code&gt;vcenter&lt;/code&gt;漏洞，并且由于方便而弄了个&lt;code&gt;pyqt5&lt;/code&gt;做图形化，这直接导致打包后的&lt;code&gt;exe&lt;/code&gt;体积非常非常大；而&lt;code&gt;VcenterKiller&lt;/code&gt;则是用&lt;code&gt;go&lt;/code&gt;语言写的一款小巧的利用工具，可以直接传至对方服务器运行，也可以本地运行，可以跨平台，非常的方便。&lt;/p&gt; &#xA;&lt;p&gt;对于&lt;code&gt;CVE-2021-21972&lt;/code&gt;这个漏洞而言，本工具可以自定义&lt;code&gt;shell&lt;/code&gt;的名字，并且自动尝试数种利用链，用起来还是很舒服的，哈哈。&lt;/p&gt; &#xA;&lt;p&gt;工具只是辅助，写工具的过程是了解漏洞的很好的方式，从中获得经验，足矣。&lt;/p&gt; &#xA;&lt;h1&gt;3. TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 研究&lt;code&gt;CVE-2021-21985&lt;/code&gt;的上传&lt;code&gt;shell&lt;/code&gt;和打内存马的方式&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 你们提建议&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;4. 微信公众号：追梦信安&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://w01fh4cker-img-bed.oss-cn-hangzhou.aliyuncs.com/20230824010900.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;5. Star History&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#W01fh4cker/VcenterKit&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=W01fh4cker/VcenterKit&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>