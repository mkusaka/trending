<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:31:30Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rwightman/pytorch-image-models</title>
    <updated>2022-08-04T01:31:30Z</updated>
    <id>tag:github.com,2022-08-04:/rwightman/pytorch-image-models</id>
    <link href="https://github.com/rwightman/pytorch-image-models" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PyTorch image models, scripts, pretrained weights -- ResNet, ResNeXT, EfficientNet, EfficientNetV2, NFNet, Vision Transformer, MixNet, MobileNet-V3/V2, RegNet, DPN, CSPNet, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PyTorch Image Models&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#whats-new&#34;&gt;What&#39;s New&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#models&#34;&gt;Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#getting-started-documentation&#34;&gt;Getting Started (Documentation)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#train-validation-inference-scripts&#34;&gt;Train, Validation, Inference Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#awesome-pytorch-resources&#34;&gt;Awesome PyTorch Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#licenses&#34;&gt;Licenses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/#citing&#34;&gt;Citing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to the following for hardware support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TPU Research Cloud (TRC) (&lt;a href=&#34;https://sites.research.google/trc/about/&#34;&gt;https://sites.research.google/trc/about/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Nvidia (&lt;a href=&#34;https://www.nvidia.com/en-us/&#34;&gt;https://www.nvidia.com/en-us/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And a big thanks to all GitHub sponsors who helped with some of my costs before I joined Hugging Face.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s New&lt;/h2&gt; &#xA;&lt;h3&gt;July 28, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add freshly minted DeiT-III Medium (width=512, depth=12, num_heads=8) model weights. Thanks &lt;a href=&#34;https://github.com/TouvronHugo&#34;&gt;Hugo Touvron&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;July 27, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All runtime benchmark and validation result csv files are finally up-to-date!&lt;/li&gt; &#xA; &lt;li&gt;A few more weights &amp;amp; model defs added: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;darknetaa53&lt;/code&gt; - 79.8 @ 256, 80.5 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;convnext_nano&lt;/code&gt; - 80.8 @ 224, 81.5 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3sedarknet_l&lt;/code&gt; - 81.2 @ 256, 81.8 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3darknet_x&lt;/code&gt; - 81.8 @ 256, 82.2 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3sedarknet_x&lt;/code&gt; - 82.2 @ 256, 82.7 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3edgenet_x&lt;/code&gt; - 82.2 @ 256, 82.7 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3se_edgenet_x&lt;/code&gt; - 82.8 @ 256, 83.5 @ 320&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cs3*&lt;/code&gt; weights above all trained on TPU w/ &lt;code&gt;bits_and_tpu&lt;/code&gt; branch. Thanks to TRC program!&lt;/li&gt; &#xA; &lt;li&gt;Add output_stride=8 and 16 support to ConvNeXt (dilation)&lt;/li&gt; &#xA; &lt;li&gt;deit3 models not being able to resize pos_emb fixed&lt;/li&gt; &#xA; &lt;li&gt;Version 0.6.7 PyPi release (/w above bug fixes and new weighs since 0.6.5)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;July 8, 2022&lt;/h3&gt; &#xA;&lt;p&gt;More models, more fixes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official research models (w/ weights) added: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;EdgeNeXt from (&lt;a href=&#34;https://github.com/mmaaz60/EdgeNeXt&#34;&gt;https://github.com/mmaaz60/EdgeNeXt&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;MobileViT-V2 from (&lt;a href=&#34;https://github.com/apple/ml-cvnets&#34;&gt;https://github.com/apple/ml-cvnets&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;DeiT III (Revenge of the ViT) from (&lt;a href=&#34;https://github.com/facebookresearch/deit&#34;&gt;https://github.com/facebookresearch/deit&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;My own models: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Small &lt;code&gt;ResNet&lt;/code&gt; defs added by request with 1 block repeats for both basic and bottleneck (resnet10 and resnet14)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CspNet&lt;/code&gt; refactored with dataclass config, simplified CrossStage3 (&lt;code&gt;cs3&lt;/code&gt;) option. These are closer to YOLO-v5+ backbone defs.&lt;/li&gt; &#xA;   &lt;li&gt;More relative position vit fiddling. Two &lt;code&gt;srelpos&lt;/code&gt; (shared relative position) models trained, and a medium w/ class token.&lt;/li&gt; &#xA;   &lt;li&gt;Add an alternate downsample mode to EdgeNeXt and train a &lt;code&gt;small&lt;/code&gt; model. Better than original small, but not their new USI trained weights.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;My own model weight results (all ImageNet-1k training) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnet10t&lt;/code&gt; - 66.5 @ 176, 68.3 @ 224&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnet14t&lt;/code&gt; - 71.3 @ 176, 72.3 @ 224&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnetaa50&lt;/code&gt; - 80.6 @ 224 , 81.6 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;darknet53&lt;/code&gt; - 80.0 @ 256, 80.5 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3darknet_m&lt;/code&gt; - 77.0 @ 256, 77.6 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3darknet_focus_m&lt;/code&gt; - 76.7 @ 256, 77.3 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3darknet_l&lt;/code&gt; - 80.4 @ 256, 80.9 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cs3darknet_focus_l&lt;/code&gt; - 80.3 @ 256, 80.9 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_srelpos_small_patch16_224&lt;/code&gt; - 81.1 @ 224, 82.1 @ 320&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_srelpos_medium_patch16_224&lt;/code&gt; - 82.3 @ 224, 83.1 @ 320&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_relpos_small_patch16_cls_224&lt;/code&gt; - 82.6 @ 224, 83.6 @ 320&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;edgnext_small_rw&lt;/code&gt; - 79.6 @ 224, 80.4 @ 320&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cs3&lt;/code&gt;, &lt;code&gt;darknet&lt;/code&gt;, and &lt;code&gt;vit_*relpos&lt;/code&gt; weights above all trained on TPU thanks to TRC program! Rest trained on overheating GPUs.&lt;/li&gt; &#xA; &lt;li&gt;Hugging Face Hub support fixes verified, demo notebook TBA&lt;/li&gt; &#xA; &lt;li&gt;Pretrained weights / configs can be loaded externally (ie from local disk) w/ support for head adaptation.&lt;/li&gt; &#xA; &lt;li&gt;Add support to change image extensions scanned by &lt;code&gt;timm&lt;/code&gt; datasets/parsers. See (&lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/pull/1274#issuecomment-1178303103&#34;&gt;https://github.com/rwightman/pytorch-image-models/pull/1274#issuecomment-1178303103&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Default ConvNeXt LayerNorm impl to use &lt;code&gt;F.layer_norm(x.permute(0, 2, 3, 1), ...).permute(0, 3, 1, 2)&lt;/code&gt; via &lt;code&gt;LayerNorm2d&lt;/code&gt; in all cases. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;a bit slower than previous custom impl on some hardware (ie Ampere w/ CL), but overall fewer regressions across wider HW / PyTorch version ranges.&lt;/li&gt; &#xA;   &lt;li&gt;previous impl exists as &lt;code&gt;LayerNormExp2d&lt;/code&gt; in &lt;code&gt;models/layers/norm.py&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Numerous bug fixes&lt;/li&gt; &#xA; &lt;li&gt;Currently testing for imminent PyPi 0.6.x release&lt;/li&gt; &#xA; &lt;li&gt;LeViT pretraining of larger models still a WIP, they don&#39;t train well / easily without distillation. Time to add distill support (finally)?&lt;/li&gt; &#xA; &lt;li&gt;ImageNet-22k weight training + finetune ongoing, work on multi-weight support (slowly) chugging along (there are a LOT of weights, sigh) ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;May 13, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official Swin-V2 models and weights added from (&lt;a href=&#34;https://github.com/microsoft/Swin-Transformer&#34;&gt;https://github.com/microsoft/Swin-Transformer&lt;/a&gt;). Cleaned up to support torchscript.&lt;/li&gt; &#xA; &lt;li&gt;Some refactoring for existing &lt;code&gt;timm&lt;/code&gt; Swin-V2-CR impl, will likely do a bit more to bring parts closer to official and decide whether to merge some aspects.&lt;/li&gt; &#xA; &lt;li&gt;More Vision Transformer relative position / residual post-norm experiments (all trained on TPU thanks to TRC program) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_relpos_small_patch16_224&lt;/code&gt; - 81.5 @ 224, 82.5 @ 320 -- rel pos, layer scale, no class token, avg pool&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_relpos_medium_patch16_rpn_224&lt;/code&gt; - 82.3 @ 224, 83.1 @ 320 -- rel pos + res-post-norm, no class token, avg pool&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_relpos_medium_patch16_224&lt;/code&gt; - 82.5 @ 224, 83.3 @ 320 -- rel pos, layer scale, no class token, avg pool&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_relpos_base_patch16_gapcls_224&lt;/code&gt; - 82.8 @ 224, 83.9 @ 320 -- rel pos, layer scale, class token, avg pool (by mistake)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bring 512 dim, 8-head &#39;medium&#39; ViT model variant back to life (after using in a pre DeiT &#39;small&#39; model for first ViT impl back in 2020)&lt;/li&gt; &#xA; &lt;li&gt;Add ViT relative position support for switching btw existing impl and some additions in official Swin-V2 impl for future trials&lt;/li&gt; &#xA; &lt;li&gt;Sequencer2D impl (&lt;a href=&#34;https://arxiv.org/abs/2205.01972&#34;&gt;https://arxiv.org/abs/2205.01972&lt;/a&gt;), added via PR from author (&lt;a href=&#34;https://github.com/okojoalg&#34;&gt;https://github.com/okojoalg&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;May 2, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vision Transformer experiments adding Relative Position (Swin-V2 log-coord) (&lt;code&gt;vision_transformer_relpos.py&lt;/code&gt;) and Residual Post-Norm branches (from Swin-V2) (&lt;code&gt;vision_transformer*.py&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_relpos_base_patch32_plus_rpn_256&lt;/code&gt; - 79.5 @ 256, 80.6 @ 320 -- rel pos + extended width + res-post-norm, no class token, avg pool&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_relpos_base_patch16_224&lt;/code&gt; - 82.5 @ 224, 83.6 @ 320 -- rel pos, layer scale, no class token, avg pool&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;vit_base_patch16_rpn_224&lt;/code&gt; - 82.3 @ 224 -- rel pos + res-post-norm, no class token, avg pool&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vision Transformer refactor to remove representation layer that was only used in initial vit and rarely used since with newer pretrain (ie &lt;code&gt;How to Train Your ViT&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vit_*&lt;/code&gt; models support removal of class token, use of global average pool, use of fc_norm (ala beit, mae).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;April 22, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timm&lt;/code&gt; models are now officially supported in &lt;a href=&#34;https://www.fast.ai/&#34;&gt;fast.ai&lt;/a&gt;! Just in time for the new Practical Deep Learning course. &lt;code&gt;timmdocs&lt;/code&gt; documentation link updated to &lt;a href=&#34;http://timm.fast.ai/&#34;&gt;timm.fast.ai&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Two more model weights added in the TPU trained &lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-tpu-weights&#34;&gt;series&lt;/a&gt;. Some In22k pretrain still in progress. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;seresnext101d_32x8d&lt;/code&gt; - 83.69 @ 224, 84.35 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;seresnextaa101d_32x8d&lt;/code&gt; (anti-aliased w/ AvgPool2d) - 83.85 @ 224, 84.57 @ 288&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;March 23, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;ParallelBlock&lt;/code&gt; and &lt;code&gt;LayerScale&lt;/code&gt; option to base vit models to support model configs in &lt;a href=&#34;https://arxiv.org/abs/2203.09795&#34;&gt;Three things everyone should know about ViT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;convnext_tiny_hnf&lt;/code&gt; (head norm first) weights trained with (close to) A2 recipe, 82.2% top-1, could do better with more epochs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;March 21, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Merge &lt;code&gt;norm_norm_norm&lt;/code&gt;. &lt;strong&gt;IMPORTANT&lt;/strong&gt; this update for a coming 0.6.x release will likely de-stabilize the master branch for a while. Branch &lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/tree/0.5.x&#34;&gt;&lt;code&gt;0.5.x&lt;/code&gt;&lt;/a&gt; or a previous 0.5.x release can be used if stability is required.&lt;/li&gt; &#xA; &lt;li&gt;Significant weights update (all TPU trained) as described in this &lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-tpu-weights&#34;&gt;release&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnety_040&lt;/code&gt; - 82.3 @ 224, 82.96 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnety_064&lt;/code&gt; - 83.0 @ 224, 83.65 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnety_080&lt;/code&gt; - 83.17 @ 224, 83.86 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetv_040&lt;/code&gt; - 82.44 @ 224, 83.18 @ 288 (timm pre-act)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetv_064&lt;/code&gt; - 83.1 @ 224, 83.71 @ 288 (timm pre-act)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetz_040&lt;/code&gt; - 83.67 @ 256, 84.25 @ 320&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetz_040h&lt;/code&gt; - 83.77 @ 256, 84.5 @ 320 (w/ extra fc in head)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnetv2_50d_gn&lt;/code&gt; - 80.8 @ 224, 81.96 @ 288 (pre-act GroupNorm)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnetv2_50d_evos&lt;/code&gt; 80.77 @ 224, 82.04 @ 288 (pre-act EvoNormS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetz_c16_evos&lt;/code&gt; - 81.9 @ 256, 82.64 @ 320 (EvoNormS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetz_d8_evos&lt;/code&gt; - 83.42 @ 256, 84.04 @ 320 (EvoNormS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xception41p&lt;/code&gt; - 82 @ 299 (timm pre-act)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xception65&lt;/code&gt; - 83.17 @ 299&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xception65p&lt;/code&gt; - 83.14 @ 299 (timm pre-act)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnext101_64x4d&lt;/code&gt; - 82.46 @ 224, 83.16 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;seresnext101_32x8d&lt;/code&gt; - 83.57 @ 224, 84.270 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnetrs200&lt;/code&gt; - 83.85 @ 256, 84.44 @ 320&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HuggingFace hub support fixed w/ initial groundwork for allowing alternative &#39;config sources&#39; for pretrained model definitions and weights (generic local file / remote url support soon)&lt;/li&gt; &#xA; &lt;li&gt;SwinTransformer-V2 implementation added. Submitted by &lt;a href=&#34;https://github.com/ChristophReich1996&#34;&gt;Christoph Reich&lt;/a&gt;. Training experiments and model changes by myself are ongoing so expect compat breaks.&lt;/li&gt; &#xA; &lt;li&gt;Swin-S3 (AutoFormerV2) models / weights added from &lt;a href=&#34;https://github.com/microsoft/Cream/tree/main/AutoFormerV2&#34;&gt;https://github.com/microsoft/Cream/tree/main/AutoFormerV2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MobileViT models w/ weights adapted from &lt;a href=&#34;https://github.com/apple/ml-cvnets&#34;&gt;https://github.com/apple/ml-cvnets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PoolFormer models w/ weights adapted from &lt;a href=&#34;https://github.com/sail-sg/poolformer&#34;&gt;https://github.com/sail-sg/poolformer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VOLO models w/ weights adapted from &lt;a href=&#34;https://github.com/sail-sg/volo&#34;&gt;https://github.com/sail-sg/volo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Significant work experimenting with non-BatchNorm norm layers such as EvoNorm, FilterResponseNorm, GroupNorm, etc&lt;/li&gt; &#xA; &lt;li&gt;Enhance support for alternate norm + act (&#39;NormAct&#39;) layers added to a number of models, esp EfficientNet/MobileNetV3, RegNet, and aligned Xception&lt;/li&gt; &#xA; &lt;li&gt;Grouped conv support added to EfficientNet family&lt;/li&gt; &#xA; &lt;li&gt;Add &#39;group matching&#39; API to all models to allow grouping model parameters for application of &#39;layer-wise&#39; LR decay, lr scale added to LR scheduler&lt;/li&gt; &#xA; &lt;li&gt;Gradient checkpointing support added to many models&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;forward_head(x, pre_logits=False)&lt;/code&gt; fn added to all models to allow separate calls of &lt;code&gt;forward_features&lt;/code&gt; + &lt;code&gt;forward_head&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;All vision transformer and vision MLP models update to return non-pooled / non-token selected features from &lt;code&gt;foward_features&lt;/code&gt;, for consistency with CNN models, token selection or pooling now applied in &lt;code&gt;forward_head&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Feb 2, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Chris-hughes10&#34;&gt;Chris Hughes&lt;/a&gt; posted an exhaustive run through of &lt;code&gt;timm&lt;/code&gt; on his blog yesterday. Well worth a read. &lt;a href=&#34;https://towardsdatascience.com/getting-started-with-pytorch-image-models-timm-a-practitioners-guide-4e77b4bf9055&#34;&gt;Getting Started with PyTorch Image Models (timm): A Practitioner’s Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;I&#39;m currently prepping to merge the &lt;code&gt;norm_norm_norm&lt;/code&gt; branch back to master (ver 0.6.x) in next week or so. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The changes are more extensive than usual and may destabilize and break some model API use (aiming for full backwards compat). So, beware &lt;code&gt;pip install git+https://github.com/rwightman/pytorch-image-models&lt;/code&gt; installs!&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;0.5.x&lt;/code&gt; releases and a &lt;code&gt;0.5.x&lt;/code&gt; branch will remain stable with a cherry pick or two until dust clears. Recommend sticking to pypi install for a bit if you want stable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Jan 14, 2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version 0.5.4 w/ release to be pushed to pypi. It&#39;s been a while since last pypi update and riskier changes will be merged to main branch soon....&lt;/li&gt; &#xA; &lt;li&gt;Add ConvNeXT models /w weights from official impl (&lt;a href=&#34;https://github.com/facebookresearch/ConvNeXt&#34;&gt;https://github.com/facebookresearch/ConvNeXt&lt;/a&gt;), a few perf tweaks, compatible with timm features&lt;/li&gt; &#xA; &lt;li&gt;Tried training a few small (~1.8-3M param) / mobile optimized models, a few are good so far, more on the way... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;mnasnet_small&lt;/code&gt; - 65.6 top-1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mobilenetv2_050&lt;/code&gt; - 65.9&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lcnet_100/075/050&lt;/code&gt; - 72.1 / 68.8 / 63.1&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;semnasnet_075&lt;/code&gt; - 73&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fbnetv3_b/d/g&lt;/code&gt; - 79.1 / 79.7 / 82.0&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;TinyNet models added by &lt;a href=&#34;https://github.com/rsomani95&#34;&gt;rsomani95&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LCNet added via MobileNetV3 architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nov 22, 2021&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A number of updated weights anew new model defs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;eca_halonext26ts&lt;/code&gt; - 79.5 @ 256&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnet50_gn&lt;/code&gt; (new) - 80.1 @ 224, 81.3 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnet50&lt;/code&gt; - 80.7 @ 224, 80.9 @ 288 (trained at 176, not replacing current a1 weights as default since these don&#39;t scale as well to higher res, &lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-rsb-weights/resnet50_a1h2_176-001a1197.pth&#34;&gt;weights&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnext50_32x4d&lt;/code&gt; - 81.1 @ 224, 82.0 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;sebotnet33ts_256&lt;/code&gt; (new) - 81.2 @ 224&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lamhalobotnet50ts_256&lt;/code&gt; - 81.5 @ 256&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;halonet50ts&lt;/code&gt; - 81.7 @ 256&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;halo2botnet50ts_256&lt;/code&gt; - 82.0 @ 256&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnet101&lt;/code&gt; - 82.0 @ 224, 82.8 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnetv2_101&lt;/code&gt; (new) - 82.1 @ 224, 83.0 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;resnet152&lt;/code&gt; - 82.8 @ 224, 83.5 @ 288&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetz_d8&lt;/code&gt; (new) - 83.5 @ 256, 84.0 @ 320&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;regnetz_e8&lt;/code&gt; (new) - 84.5 @ 256, 85.0 @ 320&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vit_base_patch8_224&lt;/code&gt; (85.8 top-1) &amp;amp; &lt;code&gt;in21k&lt;/code&gt; variant weights added thanks &lt;a href=&#34;https://github.com/martinsbruveris&#34;&gt;Martins Bruveris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Groundwork in for FX feature extraction thanks to &lt;a href=&#34;https://github.com/alexander-soare&#34;&gt;Alexander Soare&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;models updated for tracing compatibility (almost full support with some distlled transformer exceptions)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Oct 19, 2021&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ResNet strikes back (&lt;a href=&#34;https://arxiv.org/abs/2110.00476&#34;&gt;https://arxiv.org/abs/2110.00476&lt;/a&gt;) weights added, plus any extra training components used. Model weights and some more details here (&lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-rsb-weights&#34;&gt;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-rsb-weights&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;BCE loss and Repeated Augmentation support for RSB paper&lt;/li&gt; &#xA; &lt;li&gt;4 series of ResNet based attention model experiments being added (implemented across byobnet.py/byoanet.py). These include all sorts of attention, from channel attn like SE, ECA to 2D QKV self-attention layers such as Halo, Bottlneck, Lambda. Details here (&lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-attn-weights&#34;&gt;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-attn-weights&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Working implementations of the following 2D self-attention modules (likely to be differences from paper or eventual official impl): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Halo (&lt;a href=&#34;https://arxiv.org/abs/2103.12731&#34;&gt;https://arxiv.org/abs/2103.12731&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Bottleneck Transformer (&lt;a href=&#34;https://arxiv.org/abs/2101.11605&#34;&gt;https://arxiv.org/abs/2101.11605&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;LambdaNetworks (&lt;a href=&#34;https://arxiv.org/abs/2102.08602&#34;&gt;https://arxiv.org/abs/2102.08602&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A RegNetZ series of models with some attention experiments (being added to). These do not follow the paper (&lt;a href=&#34;https://arxiv.org/abs/2103.06877&#34;&gt;https://arxiv.org/abs/2103.06877&lt;/a&gt;) in any way other than block architecture, details of official models are not available. See more here (&lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-attn-weights&#34;&gt;https://github.com/rwightman/pytorch-image-models/releases/tag/v0.1-attn-weights&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;ConvMixer (&lt;a href=&#34;https://openreview.net/forum?id=TVHS5Y4dNvM&#34;&gt;https://openreview.net/forum?id=TVHS5Y4dNvM&lt;/a&gt;), CrossVit (&lt;a href=&#34;https://arxiv.org/abs/2103.14899&#34;&gt;https://arxiv.org/abs/2103.14899&lt;/a&gt;), and BeiT (&lt;a href=&#34;https://arxiv.org/abs/2106.08254&#34;&gt;https://arxiv.org/abs/2106.08254&lt;/a&gt;) architectures + weights added&lt;/li&gt; &#xA; &lt;li&gt;freeze/unfreeze helpers by &lt;a href=&#34;https://github.com/alexander-soare&#34;&gt;Alexander Soare&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aug 18, 2021&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimizer bonanza! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Add LAMB and LARS optimizers, incl trust ratio clipping options. Tweaked to work properly in PyTorch XLA (tested on TPUs w/ &lt;code&gt;timm bits&lt;/code&gt; &lt;a href=&#34;https://github.com/rwightman/pytorch-image-models/tree/bits_and_tpu/timm/bits&#34;&gt;branch&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Add MADGRAD from FB research w/ a few tweaks (decoupled decay option, step handling that works with PyTorch XLA)&lt;/li&gt; &#xA;   &lt;li&gt;Some cleanup on all optimizers and factory. No more &lt;code&gt;.data&lt;/code&gt;, a bit more consistency, unit tests for all!&lt;/li&gt; &#xA;   &lt;li&gt;SGDP and AdamP still won&#39;t work with PyTorch XLA but others should (have yet to test Adabelief, Adafactor, Adahessian myself).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;EfficientNet-V2 XL TF ported weights added, but they don&#39;t validate well in PyTorch (L is better). The pre-processing for the V2 TF training is a bit diff and the fine-tuned 21k -&amp;gt; 1k weights are very sensitive and less robust than the 1k weights.&lt;/li&gt; &#xA; &lt;li&gt;Added PyTorch trained EfficientNet-V2 &#39;Tiny&#39; w/ GlobalContext attn weights. Only .1-.2 top-1 better than the SE so more of a curiosity for those interested.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Py&lt;strong&gt;T&lt;/strong&gt;orch &lt;strong&gt;Im&lt;/strong&gt;age &lt;strong&gt;M&lt;/strong&gt;odels (&lt;code&gt;timm&lt;/code&gt;) is a collection of image models, layers, utilities, optimizers, schedulers, data-loaders / augmentations, and reference training / validation scripts that aim to pull together a wide variety of SOTA models with ability to reproduce ImageNet training results.&lt;/p&gt; &#xA;&lt;p&gt;The work of many others is present here. I&#39;ve tried to make sure all source material is acknowledged via links to github, arxiv papers, etc in the README, documentation, and code docstrings. Please let me know if I missed anything.&lt;/p&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;All model architecture families include variants with pretrained weights. There are specific model variants without any weights, it is NOT a bug. Help training new or better weights is always appreciated. Here are some example &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/training_hparam_examples&#34;&gt;training hparams&lt;/a&gt; to get you started.&lt;/p&gt; &#xA;&lt;p&gt;A full version of the list below with source links can be found in the &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/models/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Aggregating Nested Transformers - &lt;a href=&#34;https://arxiv.org/abs/2105.12723&#34;&gt;https://arxiv.org/abs/2105.12723&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;BEiT - &lt;a href=&#34;https://arxiv.org/abs/2106.08254&#34;&gt;https://arxiv.org/abs/2106.08254&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Big Transfer ResNetV2 (BiT) - &lt;a href=&#34;https://arxiv.org/abs/1912.11370&#34;&gt;https://arxiv.org/abs/1912.11370&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bottleneck Transformers - &lt;a href=&#34;https://arxiv.org/abs/2101.11605&#34;&gt;https://arxiv.org/abs/2101.11605&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CaiT (Class-Attention in Image Transformers) - &lt;a href=&#34;https://arxiv.org/abs/2103.17239&#34;&gt;https://arxiv.org/abs/2103.17239&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CoaT (Co-Scale Conv-Attentional Image Transformers) - &lt;a href=&#34;https://arxiv.org/abs/2104.06399&#34;&gt;https://arxiv.org/abs/2104.06399&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConvNeXt - &lt;a href=&#34;https://arxiv.org/abs/2201.03545&#34;&gt;https://arxiv.org/abs/2201.03545&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ConViT (Soft Convolutional Inductive Biases Vision Transformers)- &lt;a href=&#34;https://arxiv.org/abs/2103.10697&#34;&gt;https://arxiv.org/abs/2103.10697&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CspNet (Cross-Stage Partial Networks) - &lt;a href=&#34;https://arxiv.org/abs/1911.11929&#34;&gt;https://arxiv.org/abs/1911.11929&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DeiT - &lt;a href=&#34;https://arxiv.org/abs/2012.12877&#34;&gt;https://arxiv.org/abs/2012.12877&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DeiT-III - &lt;a href=&#34;https://arxiv.org/pdf/2204.07118.pdf&#34;&gt;https://arxiv.org/pdf/2204.07118.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DenseNet - &lt;a href=&#34;https://arxiv.org/abs/1608.06993&#34;&gt;https://arxiv.org/abs/1608.06993&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DLA - &lt;a href=&#34;https://arxiv.org/abs/1707.06484&#34;&gt;https://arxiv.org/abs/1707.06484&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DPN (Dual-Path Network) - &lt;a href=&#34;https://arxiv.org/abs/1707.01629&#34;&gt;https://arxiv.org/abs/1707.01629&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EdgeNeXt - &lt;a href=&#34;https://arxiv.org/abs/2206.10589&#34;&gt;https://arxiv.org/abs/2206.10589&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EfficientNet (MBConvNet Family) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;EfficientNet NoisyStudent (B0-B7, L2) - &lt;a href=&#34;https://arxiv.org/abs/1911.04252&#34;&gt;https://arxiv.org/abs/1911.04252&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;EfficientNet AdvProp (B0-B8) - &lt;a href=&#34;https://arxiv.org/abs/1911.09665&#34;&gt;https://arxiv.org/abs/1911.09665&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;EfficientNet (B0-B7) - &lt;a href=&#34;https://arxiv.org/abs/1905.11946&#34;&gt;https://arxiv.org/abs/1905.11946&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;EfficientNet-EdgeTPU (S, M, L) - &lt;a href=&#34;https://ai.googleblog.com/2019/08/efficientnet-edgetpu-creating.html&#34;&gt;https://ai.googleblog.com/2019/08/efficientnet-edgetpu-creating.html&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;EfficientNet V2 - &lt;a href=&#34;https://arxiv.org/abs/2104.00298&#34;&gt;https://arxiv.org/abs/2104.00298&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;FBNet-C - &lt;a href=&#34;https://arxiv.org/abs/1812.03443&#34;&gt;https://arxiv.org/abs/1812.03443&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MixNet - &lt;a href=&#34;https://arxiv.org/abs/1907.09595&#34;&gt;https://arxiv.org/abs/1907.09595&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MNASNet B1, A1 (Squeeze-Excite), and Small - &lt;a href=&#34;https://arxiv.org/abs/1807.11626&#34;&gt;https://arxiv.org/abs/1807.11626&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;MobileNet-V2 - &lt;a href=&#34;https://arxiv.org/abs/1801.04381&#34;&gt;https://arxiv.org/abs/1801.04381&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Single-Path NAS - &lt;a href=&#34;https://arxiv.org/abs/1904.02877&#34;&gt;https://arxiv.org/abs/1904.02877&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;TinyNet - &lt;a href=&#34;https://arxiv.org/abs/2010.14819&#34;&gt;https://arxiv.org/abs/2010.14819&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GhostNet - &lt;a href=&#34;https://arxiv.org/abs/1911.11907&#34;&gt;https://arxiv.org/abs/1911.11907&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;gMLP - &lt;a href=&#34;https://arxiv.org/abs/2105.08050&#34;&gt;https://arxiv.org/abs/2105.08050&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GPU-Efficient Networks - &lt;a href=&#34;https://arxiv.org/abs/2006.14090&#34;&gt;https://arxiv.org/abs/2006.14090&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Halo Nets - &lt;a href=&#34;https://arxiv.org/abs/2103.12731&#34;&gt;https://arxiv.org/abs/2103.12731&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HRNet - &lt;a href=&#34;https://arxiv.org/abs/1908.07919&#34;&gt;https://arxiv.org/abs/1908.07919&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inception-V3 - &lt;a href=&#34;https://arxiv.org/abs/1512.00567&#34;&gt;https://arxiv.org/abs/1512.00567&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Inception-ResNet-V2 and Inception-V4 - &lt;a href=&#34;https://arxiv.org/abs/1602.07261&#34;&gt;https://arxiv.org/abs/1602.07261&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lambda Networks - &lt;a href=&#34;https://arxiv.org/abs/2102.08602&#34;&gt;https://arxiv.org/abs/2102.08602&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LeViT (Vision Transformer in ConvNet&#39;s Clothing) - &lt;a href=&#34;https://arxiv.org/abs/2104.01136&#34;&gt;https://arxiv.org/abs/2104.01136&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MLP-Mixer - &lt;a href=&#34;https://arxiv.org/abs/2105.01601&#34;&gt;https://arxiv.org/abs/2105.01601&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MobileNet-V3 (MBConvNet w/ Efficient Head) - &lt;a href=&#34;https://arxiv.org/abs/1905.02244&#34;&gt;https://arxiv.org/abs/1905.02244&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;FBNet-V3 - &lt;a href=&#34;https://arxiv.org/abs/2006.02049&#34;&gt;https://arxiv.org/abs/2006.02049&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;HardCoRe-NAS - &lt;a href=&#34;https://arxiv.org/abs/2102.11646&#34;&gt;https://arxiv.org/abs/2102.11646&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;LCNet - &lt;a href=&#34;https://arxiv.org/abs/2109.15099&#34;&gt;https://arxiv.org/abs/2109.15099&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MobileViT - &lt;a href=&#34;https://arxiv.org/abs/2110.02178&#34;&gt;https://arxiv.org/abs/2110.02178&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MobileViT-V2 - &lt;a href=&#34;https://arxiv.org/abs/2206.02680&#34;&gt;https://arxiv.org/abs/2206.02680&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NASNet-A - &lt;a href=&#34;https://arxiv.org/abs/1707.07012&#34;&gt;https://arxiv.org/abs/1707.07012&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NesT - &lt;a href=&#34;https://arxiv.org/abs/2105.12723&#34;&gt;https://arxiv.org/abs/2105.12723&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NFNet-F - &lt;a href=&#34;https://arxiv.org/abs/2102.06171&#34;&gt;https://arxiv.org/abs/2102.06171&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NF-RegNet / NF-ResNet - &lt;a href=&#34;https://arxiv.org/abs/2101.08692&#34;&gt;https://arxiv.org/abs/2101.08692&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PNasNet - &lt;a href=&#34;https://arxiv.org/abs/1712.00559&#34;&gt;https://arxiv.org/abs/1712.00559&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;PoolFormer (MetaFormer) - &lt;a href=&#34;https://arxiv.org/abs/2111.11418&#34;&gt;https://arxiv.org/abs/2111.11418&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pooling-based Vision Transformer (PiT) - &lt;a href=&#34;https://arxiv.org/abs/2103.16302&#34;&gt;https://arxiv.org/abs/2103.16302&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RegNet - &lt;a href=&#34;https://arxiv.org/abs/2003.13678&#34;&gt;https://arxiv.org/abs/2003.13678&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RegNetZ - &lt;a href=&#34;https://arxiv.org/abs/2103.06877&#34;&gt;https://arxiv.org/abs/2103.06877&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RepVGG - &lt;a href=&#34;https://arxiv.org/abs/2101.03697&#34;&gt;https://arxiv.org/abs/2101.03697&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ResMLP - &lt;a href=&#34;https://arxiv.org/abs/2105.03404&#34;&gt;https://arxiv.org/abs/2105.03404&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ResNet/ResNeXt &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ResNet (v1b/v1.5) - &lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;https://arxiv.org/abs/1512.03385&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ResNeXt - &lt;a href=&#34;https://arxiv.org/abs/1611.05431&#34;&gt;https://arxiv.org/abs/1611.05431&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;Bag of Tricks&#39; / Gluon C, D, E, S variations - &lt;a href=&#34;https://arxiv.org/abs/1812.01187&#34;&gt;https://arxiv.org/abs/1812.01187&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Weakly-supervised (WSL) Instagram pretrained / ImageNet tuned ResNeXt101 - &lt;a href=&#34;https://arxiv.org/abs/1805.00932&#34;&gt;https://arxiv.org/abs/1805.00932&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Semi-supervised (SSL) / Semi-weakly Supervised (SWSL) ResNet/ResNeXts - &lt;a href=&#34;https://arxiv.org/abs/1905.00546&#34;&gt;https://arxiv.org/abs/1905.00546&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ECA-Net (ECAResNet) - &lt;a href=&#34;https://arxiv.org/abs/1910.03151v4&#34;&gt;https://arxiv.org/abs/1910.03151v4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Squeeze-and-Excitation Networks (SEResNet) - &lt;a href=&#34;https://arxiv.org/abs/1709.01507&#34;&gt;https://arxiv.org/abs/1709.01507&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;ResNet-RS - &lt;a href=&#34;https://arxiv.org/abs/2103.07579&#34;&gt;https://arxiv.org/abs/2103.07579&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Res2Net - &lt;a href=&#34;https://arxiv.org/abs/1904.01169&#34;&gt;https://arxiv.org/abs/1904.01169&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ResNeSt - &lt;a href=&#34;https://arxiv.org/abs/2004.08955&#34;&gt;https://arxiv.org/abs/2004.08955&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ReXNet - &lt;a href=&#34;https://arxiv.org/abs/2007.00992&#34;&gt;https://arxiv.org/abs/2007.00992&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SelecSLS - &lt;a href=&#34;https://arxiv.org/abs/1907.00837&#34;&gt;https://arxiv.org/abs/1907.00837&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Selective Kernel Networks - &lt;a href=&#34;https://arxiv.org/abs/1903.06586&#34;&gt;https://arxiv.org/abs/1903.06586&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sequencer2D - &lt;a href=&#34;https://arxiv.org/abs/2205.01972&#34;&gt;https://arxiv.org/abs/2205.01972&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swin S3 (AutoFormerV2) - &lt;a href=&#34;https://arxiv.org/abs/2111.14725&#34;&gt;https://arxiv.org/abs/2111.14725&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swin Transformer - &lt;a href=&#34;https://arxiv.org/abs/2103.14030&#34;&gt;https://arxiv.org/abs/2103.14030&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swin Transformer V2 - &lt;a href=&#34;https://arxiv.org/abs/2111.09883&#34;&gt;https://arxiv.org/abs/2111.09883&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Transformer-iN-Transformer (TNT) - &lt;a href=&#34;https://arxiv.org/abs/2103.00112&#34;&gt;https://arxiv.org/abs/2103.00112&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;TResNet - &lt;a href=&#34;https://arxiv.org/abs/2003.13630&#34;&gt;https://arxiv.org/abs/2003.13630&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twins (Spatial Attention in Vision Transformers) - &lt;a href=&#34;https://arxiv.org/pdf/2104.13840.pdf&#34;&gt;https://arxiv.org/pdf/2104.13840.pdf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visformer - &lt;a href=&#34;https://arxiv.org/abs/2104.12533&#34;&gt;https://arxiv.org/abs/2104.12533&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vision Transformer - &lt;a href=&#34;https://arxiv.org/abs/2010.11929&#34;&gt;https://arxiv.org/abs/2010.11929&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VOLO (Vision Outlooker) - &lt;a href=&#34;https://arxiv.org/abs/2106.13112&#34;&gt;https://arxiv.org/abs/2106.13112&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VovNet V2 and V1 - &lt;a href=&#34;https://arxiv.org/abs/1911.06667&#34;&gt;https://arxiv.org/abs/1911.06667&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xception - &lt;a href=&#34;https://arxiv.org/abs/1610.02357&#34;&gt;https://arxiv.org/abs/1610.02357&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xception (Modified Aligned, Gluon) - &lt;a href=&#34;https://arxiv.org/abs/1802.02611&#34;&gt;https://arxiv.org/abs/1802.02611&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xception (Modified Aligned, TF) - &lt;a href=&#34;https://arxiv.org/abs/1802.02611&#34;&gt;https://arxiv.org/abs/1802.02611&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;XCiT (Cross-Covariance Image Transformers) - &lt;a href=&#34;https://arxiv.org/abs/2106.09681&#34;&gt;https://arxiv.org/abs/2106.09681&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Several (less common) features that I often utilize in my projects are included. Many of their additions are the reason why I maintain my own set of models, instead of using others&#39; via PIP:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All models have a common default configuration interface and API for &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;accessing/changing the classifier - &lt;code&gt;get_classifier&lt;/code&gt; and &lt;code&gt;reset_classifier&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;doing a forward pass on just the features - &lt;code&gt;forward_features&lt;/code&gt; (see &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/feature_extraction/&#34;&gt;documentation&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;these makes it easy to write consistent network wrappers that work with any of the models&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;All models support multi-scale feature map extraction (feature pyramids) via create_model (see &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/feature_extraction/&#34;&gt;documentation&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;create_model(name, features_only=True, out_indices=..., output_stride=...)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;out_indices&lt;/code&gt; creation arg specifies which feature maps to return, these indices are 0 based and generally correspond to the &lt;code&gt;C(i + 1)&lt;/code&gt; feature level.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;output_stride&lt;/code&gt; creation arg controls output stride of the network by using dilated convolutions. Most networks are stride 32 by default. Not all networks support this.&lt;/li&gt; &#xA;   &lt;li&gt;feature map channel counts, reduction level (stride) can be queried AFTER model creation via the &lt;code&gt;.feature_info&lt;/code&gt; member&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;All models have a consistent pretrained weight loader that adapts last linear if necessary, and from 3 to 1 channel input if desired&lt;/li&gt; &#xA; &lt;li&gt;High performance &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/scripts/&#34;&gt;reference training, validation, and inference scripts&lt;/a&gt; that work in several process/GPU modes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NVIDIA DDP w/ a single GPU per process, multiple processes with APEX present (AMP mixed-precision optional)&lt;/li&gt; &#xA;   &lt;li&gt;PyTorch DistributedDataParallel w/ multi-gpu, single process (AMP disabled as it crashes when enabled)&lt;/li&gt; &#xA;   &lt;li&gt;PyTorch w/ single GPU single process (AMP optional)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A dynamic global pool implementation that allows selecting from average pooling, max pooling, average + max, or concat([average, max]) at model creation. All global pooling is adaptive average by default and compatible with pretrained weights.&lt;/li&gt; &#xA; &lt;li&gt;A &#39;Test Time Pool&#39; wrapper that can wrap any of the included models and usually provides improved performance doing inference with input images larger than the training size. Idea adapted from original DPN implementation when I ported (&lt;a href=&#34;https://github.com/cypw/DPNs&#34;&gt;https://github.com/cypw/DPNs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Learning rate schedulers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ideas adopted from &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/allenai/allennlp/tree/master/allennlp/training/learning_rate_schedulers&#34;&gt;AllenNLP schedulers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/pytorch/fairseq/tree/master/fairseq/optim/lr_scheduler&#34;&gt;FAIRseq lr_scheduler&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;SGDR: Stochastic Gradient Descent with Warm Restarts (&lt;a href=&#34;https://arxiv.org/abs/1608.03983&#34;&gt;https://arxiv.org/abs/1608.03983&lt;/a&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Schedulers include &lt;code&gt;step&lt;/code&gt;, &lt;code&gt;cosine&lt;/code&gt; w/ restarts, &lt;code&gt;tanh&lt;/code&gt; w/ restarts, &lt;code&gt;plateau&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optimizers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;rmsprop_tf&lt;/code&gt; adapted from PyTorch RMSProp by myself. Reproduces much improved Tensorflow RMSProp behaviour.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;radam&lt;/code&gt; by &lt;a href=&#34;https://github.com/LiyuanLucasLiu/RAdam&#34;&gt;Liyuan Liu&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/1908.03265&#34;&gt;https://arxiv.org/abs/1908.03265&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;novograd&lt;/code&gt; by &lt;a href=&#34;https://github.com/convergence-lab/novograd&#34;&gt;Masashi Kimura&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/1905.11286&#34;&gt;https://arxiv.org/abs/1905.11286&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;lookahead&lt;/code&gt; adapted from impl by &lt;a href=&#34;https://github.com/alphadl/lookahead.pytorch&#34;&gt;Liam&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/1907.08610&#34;&gt;https://arxiv.org/abs/1907.08610&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;fused&amp;lt;name&amp;gt;&lt;/code&gt; optimizers by name with &lt;a href=&#34;https://github.com/NVIDIA/apex/tree/master/apex/optimizers&#34;&gt;NVIDIA Apex&lt;/a&gt; installed&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;adamp&lt;/code&gt; and &lt;code&gt;sgdp&lt;/code&gt; by &lt;a href=&#34;https://github.com/clovaai&#34;&gt;Naver ClovAI&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/2006.08217&#34;&gt;https://arxiv.org/abs/2006.08217&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;adafactor&lt;/code&gt; adapted from &lt;a href=&#34;https://github.com/pytorch/fairseq/raw/master/fairseq/optim/adafactor.py&#34;&gt;FAIRSeq impl&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/1804.04235&#34;&gt;https://arxiv.org/abs/1804.04235&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;adahessian&lt;/code&gt; by &lt;a href=&#34;https://github.com/davda54/ada-hessian&#34;&gt;David Samuel&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/2006.00719&#34;&gt;https://arxiv.org/abs/2006.00719&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Random Erasing from &lt;a href=&#34;https://github.com/zhunzhong07/Random-Erasing/raw/master/transforms.py&#34;&gt;Zhun Zhong&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/1708.04896&#34;&gt;https://arxiv.org/abs/1708.04896&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Mixup (&lt;a href=&#34;https://arxiv.org/abs/1710.09412&#34;&gt;https://arxiv.org/abs/1710.09412&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;CutMix (&lt;a href=&#34;https://arxiv.org/abs/1905.04899&#34;&gt;https://arxiv.org/abs/1905.04899&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;AutoAugment (&lt;a href=&#34;https://arxiv.org/abs/1805.09501&#34;&gt;https://arxiv.org/abs/1805.09501&lt;/a&gt;) and RandAugment (&lt;a href=&#34;https://arxiv.org/abs/1909.13719&#34;&gt;https://arxiv.org/abs/1909.13719&lt;/a&gt;) ImageNet configurations modeled after impl for EfficientNet training (&lt;a href=&#34;https://github.com/tensorflow/tpu/raw/master/models/official/efficientnet/autoaugment.py&#34;&gt;https://github.com/tensorflow/tpu/blob/master/models/official/efficientnet/autoaugment.py&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;AugMix w/ JSD loss (&lt;a href=&#34;https://arxiv.org/abs/1912.02781&#34;&gt;https://arxiv.org/abs/1912.02781&lt;/a&gt;), JSD w/ clean + augmented mixing support works with AutoAugment and RandAugment as well&lt;/li&gt; &#xA; &lt;li&gt;SplitBachNorm - allows splitting batch norm layers between clean and augmented (auxiliary batch norm) data&lt;/li&gt; &#xA; &lt;li&gt;DropPath aka &#34;Stochastic Depth&#34; (&lt;a href=&#34;https://arxiv.org/abs/1603.09382&#34;&gt;https://arxiv.org/abs/1603.09382&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;DropBlock (&lt;a href=&#34;https://arxiv.org/abs/1810.12890&#34;&gt;https://arxiv.org/abs/1810.12890&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Blur Pooling (&lt;a href=&#34;https://arxiv.org/abs/1904.11486&#34;&gt;https://arxiv.org/abs/1904.11486&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Space-to-Depth by &lt;a href=&#34;https://github.com/mrT23/TResNet/raw/master/src/models/tresnet/layers/space_to_depth.py&#34;&gt;mrT23&lt;/a&gt; (&lt;a href=&#34;https://arxiv.org/abs/1801.04590&#34;&gt;https://arxiv.org/abs/1801.04590&lt;/a&gt;) -- original paper?&lt;/li&gt; &#xA; &lt;li&gt;Adaptive Gradient Clipping (&lt;a href=&#34;https://arxiv.org/abs/2102.06171&#34;&gt;https://arxiv.org/abs/2102.06171&lt;/a&gt;, &lt;a href=&#34;https://github.com/deepmind/deepmind-research/tree/master/nfnets&#34;&gt;https://github.com/deepmind/deepmind-research/tree/master/nfnets&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;An extensive selection of channel and/or spatial attention modules: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bottleneck Transformer - &lt;a href=&#34;https://arxiv.org/abs/2101.11605&#34;&gt;https://arxiv.org/abs/2101.11605&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;CBAM - &lt;a href=&#34;https://arxiv.org/abs/1807.06521&#34;&gt;https://arxiv.org/abs/1807.06521&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Effective Squeeze-Excitation (ESE) - &lt;a href=&#34;https://arxiv.org/abs/1911.06667&#34;&gt;https://arxiv.org/abs/1911.06667&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Efficient Channel Attention (ECA) - &lt;a href=&#34;https://arxiv.org/abs/1910.03151&#34;&gt;https://arxiv.org/abs/1910.03151&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Gather-Excite (GE) - &lt;a href=&#34;https://arxiv.org/abs/1810.12348&#34;&gt;https://arxiv.org/abs/1810.12348&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Global Context (GC) - &lt;a href=&#34;https://arxiv.org/abs/1904.11492&#34;&gt;https://arxiv.org/abs/1904.11492&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Halo - &lt;a href=&#34;https://arxiv.org/abs/2103.12731&#34;&gt;https://arxiv.org/abs/2103.12731&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Involution - &lt;a href=&#34;https://arxiv.org/abs/2103.06255&#34;&gt;https://arxiv.org/abs/2103.06255&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Lambda Layer - &lt;a href=&#34;https://arxiv.org/abs/2102.08602&#34;&gt;https://arxiv.org/abs/2102.08602&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Non-Local (NL) - &lt;a href=&#34;https://arxiv.org/abs/1711.07971&#34;&gt;https://arxiv.org/abs/1711.07971&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Squeeze-and-Excitation (SE) - &lt;a href=&#34;https://arxiv.org/abs/1709.01507&#34;&gt;https://arxiv.org/abs/1709.01507&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Selective Kernel (SK) - (&lt;a href=&#34;https://arxiv.org/abs/1903.06586&#34;&gt;https://arxiv.org/abs/1903.06586&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Split (SPLAT) - &lt;a href=&#34;https://arxiv.org/abs/2004.08955&#34;&gt;https://arxiv.org/abs/2004.08955&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Shifted Window (SWIN) - &lt;a href=&#34;https://arxiv.org/abs/2103.14030&#34;&gt;https://arxiv.org/abs/2103.14030&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;Model validation results can be found in the &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/results/&#34;&gt;documentation&lt;/a&gt; and in the &lt;a href=&#34;https://raw.githubusercontent.com/rwightman/pytorch-image-models/master/results/README.md&#34;&gt;results tables&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started (Documentation)&lt;/h2&gt; &#xA;&lt;p&gt;My current &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/&#34;&gt;documentation&lt;/a&gt; for &lt;code&gt;timm&lt;/code&gt; covers the basics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/getting-started-with-pytorch-image-models-timm-a-practitioners-guide-4e77b4bf9055&#34;&gt;Getting Started with PyTorch Image Models (timm): A Practitioner’s Guide&lt;/a&gt; by &lt;a href=&#34;https://github.com/Chris-hughes10&#34;&gt;Chris Hughes&lt;/a&gt; is an extensive blog post covering many aspects of &lt;code&gt;timm&lt;/code&gt; in detail.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://timm.fast.ai/&#34;&gt;timmdocs&lt;/a&gt; is quickly becoming a much more comprehensive set of documentation for &lt;code&gt;timm&lt;/code&gt;. A big thanks to &lt;a href=&#34;https://github.com/amaarora&#34;&gt;Aman Arora&lt;/a&gt; for his efforts creating timmdocs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paperswithcode.com/lib/timm&#34;&gt;paperswithcode&lt;/a&gt; is a good resource for browsing the models within &lt;code&gt;timm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Train, Validation, Inference Scripts&lt;/h2&gt; &#xA;&lt;p&gt;The root folder of the repository contains reference train, validation, and inference scripts that work with the included models and other features of this repository. They are adaptable for other datasets and use cases with a little hacking. See &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/scripts/&#34;&gt;documentation&lt;/a&gt; for some basics and &lt;a href=&#34;https://rwightman.github.io/pytorch-image-models/training_hparam_examples&#34;&gt;training hparams&lt;/a&gt; for some train examples that produce SOTA ImageNet results.&lt;/p&gt; &#xA;&lt;h2&gt;Awesome PyTorch Resources&lt;/h2&gt; &#xA;&lt;p&gt;One of the greatest assets of PyTorch is the community and their contributions. A few of my favourite resources that pair well with the models and components here are listed below.&lt;/p&gt; &#xA;&lt;h3&gt;Object Detection, Instance and Semantic Segmentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detectron2 - &lt;a href=&#34;https://github.com/facebookresearch/detectron2&#34;&gt;https://github.com/facebookresearch/detectron2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Segmentation Models (Semantic) - &lt;a href=&#34;https://github.com/qubvel/segmentation_models.pytorch&#34;&gt;https://github.com/qubvel/segmentation_models.pytorch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;EfficientDet (Obj Det, Semantic soon) - &lt;a href=&#34;https://github.com/rwightman/efficientdet-pytorch&#34;&gt;https://github.com/rwightman/efficientdet-pytorch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Computer Vision / Image Augmentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Albumentations - &lt;a href=&#34;https://github.com/albumentations-team/albumentations&#34;&gt;https://github.com/albumentations-team/albumentations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kornia - &lt;a href=&#34;https://github.com/kornia/kornia&#34;&gt;https://github.com/kornia/kornia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Knowledge Distillation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RepDistiller - &lt;a href=&#34;https://github.com/HobbitLong/RepDistiller&#34;&gt;https://github.com/HobbitLong/RepDistiller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;torchdistill - &lt;a href=&#34;https://github.com/yoshitomo-matsubara/torchdistill&#34;&gt;https://github.com/yoshitomo-matsubara/torchdistill&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metric Learning&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PyTorch Metric Learning - &lt;a href=&#34;https://github.com/KevinMusgrave/pytorch-metric-learning&#34;&gt;https://github.com/KevinMusgrave/pytorch-metric-learning&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Training / Frameworks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fastai - &lt;a href=&#34;https://github.com/fastai/fastai&#34;&gt;https://github.com/fastai/fastai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;p&gt;The code here is licensed Apache 2.0. I&#39;ve taken care to make sure any third party code included or adapted has compatible (permissive) licenses such as MIT, BSD, etc. I&#39;ve made an effort to avoid any GPL / LGPL conflicts. That said, it is your responsibility to ensure you comply with licenses here and conditions of any dependent licenses. Where applicable, I&#39;ve linked the sources/references for various components in docstrings. If you think I&#39;ve missed anything please create an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Pretrained Weights&lt;/h3&gt; &#xA;&lt;p&gt;So far all of the pretrained weights available here are pretrained on ImageNet with a select few that have some additional pretraining (see extra note below). ImageNet was released for non-commercial research purposes only (&lt;a href=&#34;https://image-net.org/download&#34;&gt;https://image-net.org/download&lt;/a&gt;). It&#39;s not clear what the implications of that are for the use of pretrained weights from that dataset. Any models I have trained with ImageNet are done for research purposes and one should assume that the original dataset license applies to the weights. It&#39;s best to seek legal advice if you intend to use the pretrained weights in a commercial product.&lt;/p&gt; &#xA;&lt;h4&gt;Pretrained on more than ImageNet&lt;/h4&gt; &#xA;&lt;p&gt;Several weights included or references here were pretrained with proprietary datasets that I do not have access to. These include the Facebook WSL, SSL, SWSL ResNe(Xt) and the Google Noisy Student EfficientNet models. The Facebook models have an explicit non-commercial license (CC-BY-NC 4.0, &lt;a href=&#34;https://github.com/facebookresearch/semi-supervised-ImageNet1K-models&#34;&gt;https://github.com/facebookresearch/semi-supervised-ImageNet1K-models&lt;/a&gt;, &lt;a href=&#34;https://github.com/facebookresearch/WSL-Images&#34;&gt;https://github.com/facebookresearch/WSL-Images&lt;/a&gt;). The Google models do not appear to have any restriction beyond the Apache 2.0 license (and ImageNet concerns). In either case, you should contact Facebook or Google with any questions.&lt;/p&gt; &#xA;&lt;h2&gt;Citing&lt;/h2&gt; &#xA;&lt;h3&gt;BibTeX&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{rw2019timm,&#xA;  author = {Ross Wightman},&#xA;  title = {PyTorch Image Models},&#xA;  year = {2019},&#xA;  publisher = {GitHub},&#xA;  journal = {GitHub repository},&#xA;  doi = {10.5281/zenodo.4414861},&#xA;  howpublished = {\url{https://github.com/rwightman/pytorch-image-models}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Latest DOI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zenodo.org/badge/latestdoi/168799526&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/168799526.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>huggingface/accelerate</title>
    <updated>2022-08-04T01:31:30Z</updated>
    <id>tag:github.com,2022-08-04:/huggingface/accelerate</id>
    <link href="https://github.com/huggingface/accelerate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 A simple way to train and use PyTorch models with multi-GPU, TPU, mixed-precision&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/huggingface/accelerate/main/docs/source/imgs/accelerate_logo.png&#34; width=&#34;400&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- Uncomment when CircleCI is setup&#xA;    &lt;a href=&#34;https://circleci.com/gh/huggingface/accelerate&#34;&gt;&#xA;        &lt;img alt=&#34;Build&#34; src=&#34;https://img.shields.io/circleci/build/github/huggingface/transformers/master&#34;&gt;&#xA;    &lt;/a&gt;&#xA;    --&gt; &lt;a href=&#34;https://github.com/huggingface/accelerate/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/huggingface/accelerate.svg?color=blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://huggingface.co/docs/accelerate/index.html&#34;&gt; &lt;img alt=&#34;Documentation&#34; src=&#34;https://img.shields.io/website/http/huggingface.co/docs/accelerate/index.html.svg?down_color=red&amp;amp;down_message=offline&amp;amp;up_message=online&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/huggingface/accelerate/releases&#34;&gt; &lt;img alt=&#34;GitHub release&#34; src=&#34;https://img.shields.io/github/release/huggingface/accelerate.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/huggingface/accelerate/raw/main/CODE_OF_CONDUCT.md&#34;&gt; &lt;img alt=&#34;Contributor Covenant&#34; src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;p&gt;Run your *raw* PyTorch training script on any kind of device &lt;/p&gt;&lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://hf.co/course&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/huggingface/accelerate/main/docs/source/imgs/course_banner.png&#34;&gt;&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;h2&gt;Easy to integrate&lt;/h2&gt; &#xA;&lt;p&gt;🤗 Accelerate was created for PyTorch users who like to write the training loop of PyTorch models but are reluctant to write and maintain the boilerplate code needed to use multi-GPUs/TPU/fp16.&lt;/p&gt; &#xA;&lt;p&gt;🤗 Accelerate abstracts exactly and only the boilerplate code related to multi-GPUs/TPU/fp16 and leaves the rest of your code unchanged.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  import torch&#xA;  import torch.nn.functional as F&#xA;  from datasets import load_dataset&#xA;+ from accelerate import Accelerator&#xA;&#xA;+ accelerator = Accelerator()&#xA;- device = &#39;cpu&#39;&#xA;+ device = accelerator.device&#xA;&#xA;  model = torch.nn.Transformer().to(device)&#xA;  optimizer = torch.optim.Adam(model.parameters())&#xA;&#xA;  dataset = load_dataset(&#39;my_dataset&#39;)&#xA;  data = torch.utils.data.DataLoader(dataset, shuffle=True)&#xA;&#xA;+ model, optimizer, data = accelerator.prepare(model, optimizer, data)&#xA;&#xA;  model.train()&#xA;  for epoch in range(10):&#xA;      for source, targets in data:&#xA;          source = source.to(device)&#xA;          targets = targets.to(device)&#xA;&#xA;          optimizer.zero_grad()&#xA;&#xA;          output = model(source)&#xA;          loss = F.cross_entropy(output, targets)&#xA;&#xA;-         loss.backward()&#xA;+         accelerator.backward(loss)&#xA;&#xA;          optimizer.step()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see in this example, by adding 5-lines to any standard PyTorch training script you can now run on any kind of single or distributed node setting (single CPU, single GPU, multi-GPUs and TPUs) as well as with or without mixed precision (fp16).&lt;/p&gt; &#xA;&lt;p&gt;In particular, the same code can then be run without modification on your local machine for debugging or your training environment.&lt;/p&gt; &#xA;&lt;p&gt;🤗 Accelerate even handles the device placement for you (which requires a few more changes to your code, but is safer in general), so you can even simplify your training loop further:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;  import torch&#xA;  import torch.nn.functional as F&#xA;  from datasets import load_dataset&#xA;+ from accelerate import Accelerator&#xA;&#xA;- device = &#39;cpu&#39;&#xA;+ accelerator = Accelerator()&#xA;&#xA;- model = torch.nn.Transformer().to(device)&#xA;+ model = torch.nn.Transformer()&#xA;  optimizer = torch.optim.Adam(model.parameters())&#xA;&#xA;  dataset = load_dataset(&#39;my_dataset&#39;)&#xA;  data = torch.utils.data.DataLoader(dataset, shuffle=True)&#xA;&#xA;+ model, optimizer, data = accelerator.prepare(model, optimizer, data)&#xA;&#xA;  model.train()&#xA;  for epoch in range(10):&#xA;      for source, targets in data:&#xA;-         source = source.to(device)&#xA;-         targets = targets.to(device)&#xA;&#xA;          optimizer.zero_grad()&#xA;&#xA;          output = model(source)&#xA;          loss = F.cross_entropy(output, targets)&#xA;&#xA;-         loss.backward()&#xA;+         accelerator.backward(loss)&#xA;&#xA;          optimizer.step()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to learn more? Check out the &lt;a href=&#34;https://huggingface.co/docs/accelerate&#34;&gt;documentation&lt;/a&gt; or have look at our &lt;a href=&#34;https://github.com/huggingface/accelerate/tree/main/examples&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Launching script&lt;/h2&gt; &#xA;&lt;p&gt;🤗 Accelerate also provides an optional CLI tool that allows you to quickly configure and test your training environment before launching the scripts. No need to remember how to use &lt;code&gt;torch.distributed.launch&lt;/code&gt; or to write a specific launcher for TPU training! On your machine(s) just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;accelerate config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and answer the questions asked. This will generate a config file that will be used automatically to properly set the default options when doing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;accelerate launch my_script.py --args_to_my_script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For instance, here is how you would run the GLUE example on the MRPC task (from the root of the repo):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;accelerate launch examples/nlp_example.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This CLI tool is &lt;strong&gt;optional&lt;/strong&gt;, and you can still use &lt;code&gt;python my_script.py&lt;/code&gt; or &lt;code&gt;python -m torch.distributed.launch my_script.py&lt;/code&gt; at your convenance.&lt;/p&gt; &#xA;&lt;h2&gt;Launching multi-CPU run using MPI&lt;/h2&gt; &#xA;&lt;p&gt;🤗 Here is another way to launch multi-CPU run using MPI. You can learn how to install Open MPI on &lt;a href=&#34;https://www.open-mpi.org/faq/?category=building#easy-build&#34;&gt;this page&lt;/a&gt;. You can use Intel MPI or MVAPICH as well. Once you have MPI setup on your cluster, just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mpirun -np 2 python examples/nlp_example.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Launching training using DeepSpeed&lt;/h2&gt; &#xA;&lt;p&gt;🤗 Accelerate supports training on single/multiple GPUs using DeepSpeed. To use it, you don&#39;t need to change anything in your training code; you can set everything using just &lt;code&gt;accelerate config&lt;/code&gt;. However, if you desire to tweak your DeepSpeed related args from your python script, we provide you the &lt;code&gt;DeepSpeedPlugin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from accelerator import Accelerator, DeepSpeedPlugin&#xA;&#xA;# deepspeed needs to know your gradient accumulation steps before hand, so don&#39;t forget to pass it&#xA;# Remember you still need to do gradient accumulation by yourself, just like you would have done without deepspeed&#xA;deepspeed_plugin = DeepSpeedPlugin(zero_stage=2, gradient_accumulation_steps=2)&#xA;accelerator = Accelerator(fp16=True, deepspeed_plugin=deepspeed_plugin)&#xA;&#xA;# How to save your 🤗 Transformer?&#xA;accelerator.wait_for_everyone()&#xA;unwrapped_model = accelerator.unwrap_model(model)&#xA;unwrapped_model.save_pretrained(save_dir, save_function=accelerator.save, state_dict=accelerator.get_state_dict(model))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: DeepSpeed support is experimental for now. In case you get into some problem, please open an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Launching your training from a notebook&lt;/h2&gt; &#xA;&lt;p&gt;🤗 Accelerate also provides a &lt;code&gt;notebook_launcher&lt;/code&gt; function you can use in a notebook to launch a distributed training. This is especially useful for Colab or Kaggle notebooks with a TPU backend. Just define your training loop in a &lt;code&gt;training_function&lt;/code&gt; then in your last cell, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from accelerate import notebook_launcher&#xA;&#xA;notebook_launcher(training_function)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example can be found in &lt;a href=&#34;https://github.com/huggingface/notebooks/raw/master/examples/accelerate/simple_nlp_example.ipynb&#34;&gt;this notebook&lt;/a&gt;. &lt;a href=&#34;https://colab.research.google.com/github/huggingface/notebooks/blob/master/examples/accelerate/simple_nlp_example.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why should I use 🤗 Accelerate?&lt;/h2&gt; &#xA;&lt;p&gt;You should use 🤗 Accelerate when you want to easily run your training scripts in a distributed environment without having to renounce full control over your training loop. This is not a high-level framework above PyTorch, just a thin wrapper so you don&#39;t have to learn a new library, In fact the whole API of 🤗 Accelerate is in one class, the &lt;code&gt;Accelerator&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;h2&gt;Why shouldn&#39;t I use 🤗 Accelerate?&lt;/h2&gt; &#xA;&lt;p&gt;You shouldn&#39;t use 🤗 Accelerate if you don&#39;t want to write a training loop yourself. There are plenty of high-level libraries above PyTorch that will offer you that, 🤗 Accelerate is not one of them.&lt;/p&gt; &#xA;&lt;h2&gt;Frameworks using 🤗 Accelerate&lt;/h2&gt; &#xA;&lt;p&gt;If you like the simplicity of 🤗 Accelerate but would prefer a higher-level abstraction around your training loop, some frameworks that are built on top of 🤗 Accelerate are listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Scitator/animus&#34;&gt;Animus&lt;/a&gt; is a minimalistic framework to run machine learning experiments. Animus highlights common &#34;breakpoints&#34; in ML experiments and provides a unified interface for them within &lt;a href=&#34;https://github.com/Scitator/animus/raw/main/animus/core.py#L76&#34;&gt;IExperiment&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/catalyst-team/catalyst#getting-started&#34;&gt;Catalyst&lt;/a&gt; is a PyTorch framework for Deep Learning Research and Development. It focuses on reproducibility, rapid experimentation, and codebase reuse so you can create something new rather than write yet another train loop. Catalyst provides a &lt;a href=&#34;https://catalyst-team.github.io/catalyst/api/core.html#runner&#34;&gt;Runner&lt;/a&gt; to connect all parts of the experiment: hardware backend, data transformations, model train, and inference logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fastai/fastai#installing&#34;&gt;fastai&lt;/a&gt; is a PyTorch framework for Deep Learning that simplifies training fast and accurate neural nets using modern best practices. fastai provides a &lt;a href=&#34;https://docs.fast.ai/learner.html#Learner&#34;&gt;Learner&lt;/a&gt; to handle the training, fine-tuning, and inference of deep learning algorithms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kornia.readthedocs.io/en/latest/get-started/introduction.html&#34;&gt;Kornia&lt;/a&gt; is a differentiable library that allows classical computer vision to be integrated into deep learning models. Kornia provides a &lt;a href=&#34;https://kornia.readthedocs.io/en/latest/x.html#kornia.x.Trainer&#34;&gt;Trainer&lt;/a&gt; with the specific purpose to train and fine-tune the supported deep learning algorithms within the library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Chris-hughes10/pytorch-accelerated&#34;&gt;pytorch-accelerated&lt;/a&gt; is a lightweight training library, with a streamlined feature set centred around a general-purpose &lt;a href=&#34;https://pytorch-accelerated.readthedocs.io/en/latest/trainer.html&#34;&gt;Trainer&lt;/a&gt;, that places a huge emphasis on simplicity and transparency; enabling users to understand exactly what is going on under the hood, but without having to write and maintain the boilerplate themselves!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This repository is tested on Python 3.6+ and PyTorch 1.4.0+&lt;/p&gt; &#xA;&lt;p&gt;You should install 🤗 Accelerate in a &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;virtual environment&lt;/a&gt;. If you&#39;re unfamiliar with Python virtual environments, check out the &lt;a href=&#34;https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, create a virtual environment with the version of Python you&#39;re going to use and activate it.&lt;/p&gt; &#xA;&lt;p&gt;Then, you will need to install PyTorch: refer to the &lt;a href=&#34;https://pytorch.org/get-started/locally/#start-locally&#34;&gt;official installation page&lt;/a&gt; regarding the specific install command for your platform. Then 🤗 Accelerate can be installed using pip as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install accelerate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported integrations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU only&lt;/li&gt; &#xA; &lt;li&gt;multi-CPU on one node (machine)&lt;/li&gt; &#xA; &lt;li&gt;multi-CPU on several nodes (machines)&lt;/li&gt; &#xA; &lt;li&gt;single GPU&lt;/li&gt; &#xA; &lt;li&gt;multi-GPU on one node (machine)&lt;/li&gt; &#xA; &lt;li&gt;multi-GPU on several nodes (machines)&lt;/li&gt; &#xA; &lt;li&gt;TPU&lt;/li&gt; &#xA; &lt;li&gt;FP16 with native AMP (apex on the roadmap)&lt;/li&gt; &#xA; &lt;li&gt;DeepSpeed support (Experimental)&lt;/li&gt; &#xA; &lt;li&gt;PyTorch Fully Sharded Data Parallel (FSDP) support (Experimental)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kernc/backtesting.py</title>
    <updated>2022-08-04T01:31:30Z</updated>
    <id>tag:github.com,2022-08-04:/kernc/backtesting.py</id>
    <link href="https://github.com/kernc/backtesting.py" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔎 📈 🐍 💰 Backtest trading strategies in Python.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://kernc.github.io/backtesting.py/&#34;&gt;&lt;img src=&#34;https://i.imgur.com/E8Kj69Y.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Backtesting.py&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kernc/backtesting.py/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/kernc/backtesting.py/CI/master?style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/kernc/backtesting.py&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/kernc/backtesting.py.svg?style=for-the-badge&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/backtesting&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/backtesting.svg?color=blue&amp;amp;style=for-the-badge&#34; alt=&#34;Backtesting on PyPI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/backtesting&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dd/backtesting.svg?color=skyblue&amp;amp;style=for-the-badge&#34; alt=&#34;PyPI downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/kernc&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/kernc?color=pink&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Backtest trading strategies with Python.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kernc.github.io/backtesting.py&#34;&gt;&lt;strong&gt;Project website&lt;/strong&gt;&lt;/a&gt; + &lt;a href=&#34;https://kernc.github.io/backtesting.py/doc/backtesting/&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install backtesting&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from backtesting import Backtest, Strategy&#xA;from backtesting.lib import crossover&#xA;&#xA;from backtesting.test import SMA, GOOG&#xA;&#xA;&#xA;class SmaCross(Strategy):&#xA;    def init(self):&#xA;        price = self.data.Close&#xA;        self.ma1 = self.I(SMA, price, 10)&#xA;        self.ma2 = self.I(SMA, price, 20)&#xA;&#xA;    def next(self):&#xA;        if crossover(self.ma1, self.ma2):&#xA;            self.buy()&#xA;        elif crossover(self.ma2, self.ma1):&#xA;            self.sell()&#xA;&#xA;&#xA;bt = Backtest(GOOG, SmaCross, commission=.002,&#xA;              exclusive_orders=True)&#xA;stats = bt.run()&#xA;bt.plot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Results in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Start                     2004-08-19 00:00:00&#xA;End                       2013-03-01 00:00:00&#xA;Duration                   3116 days 00:00:00&#xA;Exposure Time [%]                       94.27&#xA;Equity Final [$]                     68935.12&#xA;Equity Peak [$]                      68991.22&#xA;Return [%]                             589.35&#xA;Buy &amp;amp; Hold Return [%]                  703.46&#xA;Return (Ann.) [%]                       25.42&#xA;Volatility (Ann.) [%]                   38.43&#xA;Sharpe Ratio                             0.66&#xA;Sortino Ratio                            1.30&#xA;Calmar Ratio                             0.77&#xA;Max. Drawdown [%]                      -33.08&#xA;Avg. Drawdown [%]                       -5.58&#xA;Max. Drawdown Duration      688 days 00:00:00&#xA;Avg. Drawdown Duration       41 days 00:00:00&#xA;# Trades                                   93&#xA;Win Rate [%]                            53.76&#xA;Best Trade [%]                          57.12&#xA;Worst Trade [%]                        -16.63&#xA;Avg. Trade [%]                           1.96&#xA;Max. Trade Duration         121 days 00:00:00&#xA;Avg. Trade Duration          32 days 00:00:00&#xA;Profit Factor                            2.13&#xA;Expectancy [%]                           6.91&#xA;SQN                                      1.78&#xA;_strategy              SmaCross(n1=10, n2=20)&#xA;_equity_curve                          Equ...&#xA;_trades                       Size  EntryB...&#xA;dtype: object&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kernc.github.io/backtesting.py/#example&#34;&gt;&lt;img src=&#34;https://i.imgur.com/xRFNHfg.png&#34; alt=&#34;plot of trading simulation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find more usage examples in the &lt;a href=&#34;https://kernc.github.io/backtesting.py/doc/backtesting/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple, well-documented API&lt;/li&gt; &#xA; &lt;li&gt;Blazing fast execution&lt;/li&gt; &#xA; &lt;li&gt;Built-in optimizer&lt;/li&gt; &#xA; &lt;li&gt;Library of composable base strategies and utilities&lt;/li&gt; &#xA; &lt;li&gt;Indicator-library-agnostic&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;em&gt;any&lt;/em&gt; financial instrument with candlestick data&lt;/li&gt; &#xA; &lt;li&gt;Detailed results&lt;/li&gt; &#xA; &lt;li&gt;Interactive visualizations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/engineer_syllogism.png&#34; alt=&#34;xkcd.com/1570&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/kernc/backtesting.py/raw/master/doc/alternatives.md&#34;&gt;alternatives.md&lt;/a&gt; for a list of alternative Python backtesting frameworks and related packages.&lt;/p&gt;</summary>
  </entry>
</feed>