<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-06T01:40:25Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nomic-ai/contrastors</title>
    <updated>2024-02-06T01:40:25Z</updated>
    <id>tag:github.com,2024-02-06:/nomic-ai/contrastors</id>
    <link href="https://github.com/nomic-ai/contrastors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Train Models Contrastively in Pytorch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;contrastors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;contrastors&lt;/code&gt; is contrastive learning toolkit that enables researchers and engineers to train and evaluate contrastive models efficiently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://atlas.nomic.ai/map/nomic-text-embed-v1-5m-sample&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nomic-ai/contrastors/main/docs/atlas-nomic-embed.png&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built on top of &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;Flash Attention&lt;/a&gt; for fast and efficient training&lt;/li&gt; &#xA; &lt;li&gt;Support for training on multiple GPUs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/luyug/GradCache&#34;&gt;GradCache&lt;/a&gt; support for training with large batch sizes in constrained memory environments&lt;/li&gt; &#xA; &lt;li&gt;Huggingface Support for easy loading of common models (Pythia/GPTNeoX, BERT, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Masked Language Modeling (MLM) Pretraining&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Research&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2402.01613&#34;&gt;Nomic Embed: Training a Reproducible Long Context Text Embedder&lt;/a&gt; by Zach Nussbaum, Jack Morris, Andrei Mulyar, and Brandon Duderstadt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started and Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;contrastors&lt;/code&gt; library relies on custom kernels from the &lt;a href=&#34;https://github.com/Dao-AILab/flash-attention&#34;&gt;Flash Attention&lt;/a&gt; repository. To setup your enviornment you will need to follow the steps below.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you have Cuda 11.8+. You can check this by running &lt;code&gt;nvcc --version&lt;/code&gt; or if you already have torch installed you can run &lt;code&gt;python -c &#34;import torch; print(torch.version.cuda)&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create a python venv and activate it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m venv env&#xA;source env/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;torch&lt;/a&gt;. See the torch docs for specific instructions for your system (e.g. the default CUDA torch supports is 12.1 as of 12/12/2023).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install torch torchvision torchaudio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install wheel, packaging, ninja for Flash Attention (so the builds don&#39;t take too long)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install wheel packaging ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Flash Attention and the custom kernels&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --no-cache-dir flash-attn --no-build-isolation git+https://github.com/HazyResearch/flash-attention.git#subdirectory=csrc/rotary git+https://github.com/HazyResearch/flash-attention.git#subdirectory=csrc/layer_norm git+https://github.com/HazyResearch/flash-attention.git#subdirectory=csrc/fused_dense_lib git+https://github.com/HazyResearch/flash-attention.git#subdirectory=csrc/xentropy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the rest of the requirements and the package&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Data Access&lt;/h2&gt; &#xA;&lt;p&gt;We provide access to the &lt;code&gt;nomic-embed-text-v1&lt;/code&gt; dataset via the &lt;code&gt;nomic&lt;/code&gt; package. To access the data, you will need to create an account and login to the &lt;code&gt;nomic&lt;/code&gt; package. First create an account at &lt;a href=&#34;https://atlas.nomic.ai&#34;&gt;atlas.nomic.ai&lt;/a&gt;, download the &lt;code&gt;nomic&lt;/code&gt; Python client, and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install nomic&#xA;nomic login # follow prompts to login&#xA;python -c &#34;from nomic import atlas; print(atlas._get_datastream_credentials(name=&#39;contrastors&#39;))&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will print out your access keys. You can then configure them by using &lt;code&gt;aws configure&lt;/code&gt; or setting the &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;If you do not have the AWS CLI installed, you can install it &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To verify your access, you can run the following command to list the contents of the bucket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;aws s3 ls --endpoint-url=https://9fa58365a1a3d032127970d0bd9a1290.r2.cloudflarestorage.com/ s3://contrastive&#xA;aws s3 ls --endpoint-url=https://9fa58365a1a3d032127970d0bd9a1290.r2.cloudflarestorage.com/ s3://contrastive-index-filtered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be able to see the contents of the bucket and download the data.&lt;/p&gt; &#xA;&lt;p&gt;If you intend to train using our data and the &lt;code&gt;contrastors&lt;/code&gt; repo, you will need to setup &lt;code&gt;fsspec&lt;/code&gt; support for Cloudflare R2. To do so, create a file &lt;code&gt;~/.config/fsspec/s3.json&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;s3&#34;: {&#xA;    &#34;client_kwargs&#34;: {&#xA;      &#34;endpoint_url&#34;: &#34;https://9fa58365a1a3d032127970d0bd9a1290.r2.cloudflarestorage.com/&#34;,&#xA;      &#34;aws_access_key_id&#34;: &amp;lt;ACCESS_KEY_ID&amp;gt;,&#xA;      &#34;aws_secret_access_key&#34;: &amp;lt;SECRET_KEY_ID&amp;gt;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nomic Data Format&lt;/h3&gt; &#xA;&lt;p&gt;Our text data is stored in gziped jsonl files with which we also store a &lt;code&gt;counts.json&lt;/code&gt; file and &lt;code&gt;offsets.json.gzip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;counts.json&lt;/code&gt; file is a dictionary mapping the file name to the number of examples in the file. The &lt;code&gt;offsets.json.gz&lt;/code&gt; file is a dictionary mapping the file name to a dictionary where each key is the index of the example and the value is a tuple of the start and end byte offset of the example in the file. We do this to allow for streaming of data in from R2, especially when the data is larger than the buffer size.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a small example of what a dataset configuration might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;datasets:&#xA;  - name: &#34;paq&#34;&#xA;    bucket: &#34;s3://contrastive-index-filtered/paq_full/shard-{00000..00538}.jsonl.gz&#34;&#xA;    query_prefix: &#34;search_query&#34;&#xA;    document_prefix: &#34;search_document&#34;&#xA;    objective: &#xA;        type: &#34;paired&#34;&#xA;        columns: [&#34;query&#34;, &#34;document&#34;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;objective&lt;/code&gt; defines if it&#39;s a paired or triplet objective. In both cases, the &lt;code&gt;columns&lt;/code&gt; field defines the columns to use for each example.&lt;/p&gt; &#xA;&lt;h2&gt;Training &lt;code&gt;nomic-embed-text-v1&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Masked Language Modeling Pretraining&lt;/h3&gt; &#xA;&lt;p&gt;To train your own BERT from scratch (with all the optimizations) run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd src/contrastors&#xA;deepspeed --num_gpus=8 train.py --config=configs/train/mlm.yaml --deepspeed_config_file=configs/deepspeed/ds_config.json --dtype=bf16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Constrastive Pretraining and Finetuning&lt;/h3&gt; &#xA;&lt;p&gt;To launch an experiment run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd src/contrastors&#xA;torchrun --nproc-per-node=8 train.py --config=configs/train/contrastive_pretrain.yaml --dtype=bf16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will train a bert model on all ~200M examples. To change the dataset, you can modify &lt;code&gt;data_args.input_shards&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To finetune &lt;code&gt;nomic-bert-embed-v1-unsupervised&lt;/code&gt;, update the config to &lt;code&gt;configs/train/contrastive_finetune.yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Generating Your Own Data&lt;/h3&gt; &#xA;&lt;p&gt;To generate your own data for any step of the pipeline, you can use the provided scripts in &lt;code&gt;scripts/text&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/contrastors/main/scripts/text/README.md&#34;&gt;README&lt;/a&gt; in &lt;code&gt;scripts/text&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Pretrained Models&lt;/h2&gt; &#xA;&lt;p&gt;We provide pretrained models for &lt;code&gt;nomic-embed-text-v1&lt;/code&gt; at the following locations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/nomic-ai/nomic-embed-text-v1&#34;&gt;nomic-embed-text-v1&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/nomic-ai/nomic-embed-text-v1-ablated&#34;&gt;nomic-embed-text-v1-ablated&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/nomic-ai/nomic-embed-text-v1-unsupervised&#34;&gt;nomic-embed-text-v1-unsupervised&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/nomic-ai/nomic-bert-2048&#34;&gt;nomic-bert-2048&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join the Nomic Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nomic: &lt;a href=&#34;https://nomic.ai&#34;&gt;https://nomic.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/myY5YDR8z8&#34;&gt;https://discord.gg/myY5YDR8z8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/nomic_ai&#34;&gt;https://twitter.com/nomic_ai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project and models are licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/nomic-ai/contrastors/main/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We thank Tri Dao for his work on Flash Attention and the custom kernels that make this project possible, the &lt;a href=&#34;https://github.com/mlfoundations/open_clip&#34;&gt;OpenCLIP&lt;/a&gt; team for their great repository with which much of this work is based on, and the Huggingface team for their great work on the transformers library.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find the model, dataset, or training code useful, please cite our work&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{nussbaum2024nomic,&#xA;      title={Nomic Embed: Training a Reproducible Long Context Text Embedder}, &#xA;      author={Zach Nussbaum and John X. Morris and Brandon Duderstadt and Andriy Mulyar},&#xA;      year={2024},&#xA;      eprint={2402.01613},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Open-Wine-Components/ULWGL-launcher</title>
    <updated>2024-02-06T01:40:25Z</updated>
    <id>tag:github.com,2024-02-06:/Open-Wine-Components/ULWGL-launcher</id>
    <link href="https://github.com/Open-Wine-Components/ULWGL-launcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ULWGL&lt;/h1&gt; &#xA;&lt;p&gt;Unified Linux Wine Game Launcher&lt;/p&gt; &#xA;&lt;h1&gt;WHAT IS THIS?&lt;/h1&gt; &#xA;&lt;p&gt;This is a work in progress POC (proof of concept) for a unified launcher for windows games on linux. It is essentially a copy of the Steam Linux Runtime/Steam Runtime Tools (&lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools&#34;&gt;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools&lt;/a&gt;) that Valve uses for proton, with some modifications made so that it can be used outside of Steam.&lt;/p&gt; &#xA;&lt;h1&gt;WHAT DOES IT DO?&lt;/h1&gt; &#xA;&lt;p&gt;When steam launches a proton game, it launches it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/home/tcrider/.local/share/Steam/ubuntu12_32/reaper SteamLaunch AppId=348550 -- /home/tcrider/.local/share/Steam/ubuntu12_32/steam-launch-wrapper -- /home/tcrider/.local/share/Steam/steamapps/common/SteamLinuxRuntime_sniper/_v2-entry-point --verb=waitforexitandrun -- /home/tcrider/.local/share/Steam/compatibilitytools.d/GE-Proton8-27/proton waitforexitandrun /home/tcrider/.local/share/Steam/steamapps/common/Guilty Gear XX Accent Core Plus R/GGXXACPR_Win.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can ignore this &lt;code&gt;/home/tcrider/.local/share/Steam/ubuntu12_32/steam-launch-wrapper&lt;/code&gt;, it&#39;s just a process runner with no real value other than forwarding environment variables (more on that later).&lt;/p&gt; &#xA;&lt;p&gt;I managed to pull the envvars it uses by making steam run printenv for the games command line. We needed these envvars because proton expects them in order to function. With them we can essentially make proton run without needing steam at all.&lt;/p&gt; &#xA;&lt;p&gt;Next this part &lt;code&gt;/home/tcrider/.local/share/Steam/steamapps/common/SteamLinuxRuntime_sniper/_v2-entry-point&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first part &lt;code&gt;/home/tcrider/.local/share/Steam/steamapps/common/SteamLinuxRuntime_sniper/&lt;/code&gt; is steam-runtime-tools compiled &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools&#34;&gt;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools&lt;/a&gt; and is used alongside the sniper runtime container used during proton builds.&lt;/p&gt; &#xA;&lt;p&gt;The second part &lt;code&gt;_v2-entry-point&lt;/code&gt; is just a bash script which loads proton into the container and runs the game.&lt;/p&gt; &#xA;&lt;p&gt;So, ULWGL is basically a copy paste of SteamLinuxRuntime_sniper, which is a compiled version of steam-runtime-tools. We&#39;ve renamed _v2-entry-point to ULWGL and added &lt;code&gt;gamelauncher.sh&lt;/code&gt; to replace steam-launch-wrapper.&lt;/p&gt; &#xA;&lt;p&gt;When you use &lt;code&gt;gamelauncher.sh&lt;/code&gt; to run a game, it uses the specified WINEPREFIX, proton version, executable, and arguements passed to it to run the game in proton, inside steam&#39;s runtime container JUST like if you were running the game through Steam, except now you&#39;re no longer limited to Steam&#39;s game library or forced to add the game to Steam&#39;s library, in fact, you don&#39;t even have to have steam installed.&lt;/p&gt; &#xA;&lt;h1&gt;HOW DO I USE IT?&lt;/h1&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WINEPREFIX=&amp;lt;wine-prefix-path&amp;gt; GAMEID=&amp;lt;ulwgl-id&amp;gt; PROTONPATH=&amp;lt;proton-version-path&amp;gt; ./gamelauncher.sh &amp;lt;executable-path&amp;gt; &amp;lt;arguements&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ex:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WINEPREFIX=$HOME/Games/epic-games-store GAMEID=egs PROTONPATH=&#34;$HOME/.steam/steam/compatibilitytools.d/GE-Proton8-28&#34; ./gamelauncher.sh &#34;$HOME/Games/epic-games-store/drive_c/Program Files (x86)/Epic Games/Launcher/Portal/Binaries/Win32/EpicGamesLauncher.exe&#34; &#34;-opengl -SkipBuildPatchPrereq&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WHAT DOES THIS MEAN FOR OTHER LAUNCHERS (lutris/bottles/heroic/legendary,etc):&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;everyone can use + contribute to the same protonfixes, no more managing individual install scripts per launcher&lt;/li&gt; &#xA; &lt;li&gt;everyone can run their games through proton just like a native steam game&lt;/li&gt; &#xA; &lt;li&gt;no steam or steam binaries required&lt;/li&gt; &#xA; &lt;li&gt;a unified online database of game fixes (protonfixes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;right now protonfixes packages a folder of &#39;gamefixes&#39; however it could likely be recoded to pull from online quite easily&lt;/p&gt; &#xA;&lt;p&gt;The idea is to get all of these tools using this same &lt;code&gt;gamelauncher.sh&lt;/code&gt; and just feeding their envvars into it. That way any changes that need to happen can happen in proton-ge and/or protonfixes, or a &#39;unified proton&#39; build based off GE, or whatever they want.&lt;/p&gt; &#xA;&lt;h1&gt;WHAT IS THE BASIC PLAN OF PUTTING THIS INTO ACTION?&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We build a database containing various game titles, their IDs from different stores, and their correlating ULWGL ID.&lt;/li&gt; &#xA; &lt;li&gt;Various launchers then search the database to pull the ULWGL ID, and feed it as the game ID to gamelauncher.sh alongside the store type, proton version, wine prefix, game executable, and launch arguements.&lt;/li&gt; &#xA; &lt;li&gt;When the game gets launched from gamelauncher.sh, protonfixes picks up the store type and ULWGL ID and finds the appropriate fix script for it, then applies it before running the game.&lt;/li&gt; &#xA; &lt;li&gt;protonfixes has folders separated for each store type. The ULWGL ID for a game remains the exact same across multiple stores, the only difference being it can have store specific scripts OR it can just symlink to another existing script that already has the fixes it needs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Borderlands 3 from EGS store.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generally a launcher is going to know which store it is using already, so that is easy enough to determine and feed the STORE variable to the launcher.&lt;/li&gt; &#xA; &lt;li&gt;To determine the game title, EGS has various codenames such as &#39;Catnip&#39;. The launcher would see &#34;ok store is egs and codename is Catnip, let&#39;s search the ULWGL database for those&#34;&lt;/li&gt; &#xA; &lt;li&gt;In our ULWGL unified database, we create a &#39;title&#39; column, &#39;store&#39; column, &#39;codename&#39; column, &#39;ULWGL-ID&#39; column. We add a line for Borderlands 3 and fill in the details for each column.&lt;/li&gt; &#xA; &lt;li&gt;Now the launcher can search &#39;Catnip&#39; and &#39;egs&#39; as the codename and store in the database and correlate it with Borderlands 3 and ULWGL-12345. It can then feed ULWGL-12345 to the gamelauncher.sh script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;README notes from Valve&#39;s steam-runtime-tools:&lt;/p&gt; &#xA;&lt;h1&gt;Steam Linux Runtime 3.0 (sniper)&lt;/h1&gt; &#xA;&lt;p&gt;This container-based release of the Steam Runtime is used for native Linux games, and for Proton 8.0+.&lt;/p&gt; &#xA;&lt;p&gt;For general information please see &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/container-runtime.md&#34;&gt;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/container-runtime.md&lt;/a&gt; and &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steamrt/-/blob/steamrt/sniper/README.md&#34;&gt;https://gitlab.steamos.cloud/steamrt/steamrt/-/blob/steamrt/sniper/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Release notes&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steamrt/-/wikis/Sniper-release-notes&#34;&gt;https://gitlab.steamos.cloud/steamrt/steamrt/-/wikis/Sniper-release-notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/ValveSoftware/steam-runtime/raw/master/doc/steamlinuxruntime-known-issues.md&#34;&gt;https://github.com/ValveSoftware/steam-runtime/blob/master/doc/steamlinuxruntime-known-issues.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/ValveSoftware/steam-runtime/raw/master/doc/reporting-steamlinuxruntime-bugs.md&#34;&gt;https://github.com/ValveSoftware/steam-runtime/blob/master/doc/reporting-steamlinuxruntime-bugs.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development and debugging&lt;/h2&gt; &#xA;&lt;p&gt;The runtime&#39;s behaviour can be changed by running the Steam client with environment variables set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;STEAM_LINUX_RUNTIME_LOG=1&lt;/code&gt; will enable logging. Log files appear in &lt;code&gt;SteamLinuxRuntime_sniper/var/slr-*.log&lt;/code&gt;, with filenames containing the app ID. &lt;code&gt;slr-latest.log&lt;/code&gt; is a symbolic link to whichever one was created most recently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;STEAM_LINUX_RUNTIME_VERBOSE=1&lt;/code&gt; produces more detailed log output, either to a log file (if &lt;code&gt;STEAM_LINUX_RUNTIME_LOG=1&lt;/code&gt; is also used) or to the same place as &lt;code&gt;steam&lt;/code&gt; output (otherwise).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PRESSURE_VESSEL_SHELL=instead&lt;/code&gt; runs an interactive shell in the container instead of running the game.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/distro-assumptions.md&#34;&gt;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/distro-assumptions.md&lt;/a&gt; for details of assumptions made about the host operating system, and some advice on debugging the container runtime on new Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;Game developers who are interested in targeting this environment should check the SDK documentation &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/sniper/sdk&#34;&gt;https://gitlab.steamos.cloud/steamrt/sniper/sdk&lt;/a&gt; and general information for game developers &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/slr-for-game-developers.md&#34;&gt;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/slr-for-game-developers.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing and copyright&lt;/h2&gt; &#xA;&lt;p&gt;The Steam Runtime contains many third-party software packages under various open-source licenses.&lt;/p&gt; &#xA;&lt;p&gt;For full source code, please see the version-numbered subdirectory of &lt;a href=&#34;https://repo.steampowered.com/steamrt-images-sniper/snapshots/&#34;&gt;https://repo.steampowered.com/steamrt-images-sniper/snapshots/&lt;/a&gt; corresponding to the version numbers listed in VERSIONS.txt.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>YPAndrew0907/Animal-Simulation-game</title>
    <updated>2024-02-06T01:40:25Z</updated>
    <id>tag:github.com,2024-02-06:/YPAndrew0907/Animal-Simulation-game</id>
    <link href="https://github.com/YPAndrew0907/Animal-Simulation-game" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dive into Nature Simulation v1, a dynamic ecosystem game. Experience life&#39;s balance with interactive controls and stunning visuals of flora and fauna. Engage, learn, and enjoy nature&#39;s complexity in a vividly animated environment. Perfect for enthusiasts of simulations and nature.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Animal-Simulation-game&lt;/h1&gt; &#xA;&lt;p&gt;Dive into Nature Simulation v1, a dynamic ecosystem game. Experience life&#39;s balance with interactive controls and stunning visuals of flora and fauna. Engage, learn, and enjoy nature&#39;s complexity in a vividly animated environment. Perfect for enthusiasts of simulations and nature.&lt;/p&gt; &#xA;&lt;h1&gt;Nature Simulation v1&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Welcome to Nature Simulation v1, an immersive ecosystem simulation game. Experience the thrill of a dynamic ecosystem, where the balance of life unfolds before your eyes. Watch as rabbits, foxes, and wolves interact in a world filled with trees and survival challenges.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Ecosystem&lt;/strong&gt;: Experience the life cycle of flora and fauna, each with unique characteristics and survival needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactive Simulation Control&lt;/strong&gt;: Take control of the simulation with simple keystrokes, allowing you to step through the simulation or run it continuously.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Beautiful Visualisation&lt;/strong&gt;: Immerse yourself in a beautifully animated world, where every movement and interaction is meticulously rendered for a mesmerizing visual experience.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ensure you have Python and Pygame installed.&lt;/li&gt; &#xA;   &lt;li&gt;Download or clone the repository to your local machine.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Running the Simulation&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Navigate to the downloaded directory.&lt;/li&gt; &#xA;   &lt;li&gt;Run the simulation using the following command: &lt;pre&gt;&lt;code&gt;python main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;SPACE&amp;gt;&lt;/code&gt;: Run one step of the simulation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;ARROW UP&amp;gt;&lt;/code&gt;: Run the simulation continuously.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main.py&lt;/code&gt;: The entry point of the game, handling the game loop and events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;simulation.py&lt;/code&gt;: Contains the logic for the ecosystem, including entity behaviors and interactions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;settings.py&lt;/code&gt;: Defines the settings, constants, and configurations for the game.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to fork the project, submit issues, and send pull requests to help improve the game!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Enjoy exploring and understanding the intricacies of nature with Nature Simulation v1!&lt;/p&gt;</summary>
  </entry>
</feed>