<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-18T01:42:57Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>G4lile0/Heimdall-WiFi-Radar</title>
    <updated>2023-01-18T01:42:57Z</updated>
    <id>tag:github.com,2023-01-18:/G4lile0/Heimdall-WiFi-Radar</id>
    <link href="https://github.com/G4lile0/Heimdall-WiFi-Radar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Heimdall WiFi Radar ESP8266&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Heimdall-WiFi-Radar&lt;/h1&gt; &#xA;&lt;p&gt;Heimdall WiFi Radar ESP8266&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mikel-brostrom/yolov8_tracking</title>
    <updated>2023-01-18T01:42:57Z</updated>
    <id>tag:github.com,2023-01-18:/mikel-brostrom/yolov8_tracking</id>
    <link href="https://github.com/mikel-brostrom/yolov8_tracking" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real-time multi-object tracking and segmentation using YOLOv8&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SOTA real-time multi-object tracking and segmentation&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mikel-brostrom/yolov8_tracking/master/trackers/strongsort/results/track_all_seg_1280_025conf.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_DeepSort_Pytorch/actions&#34;&gt;&lt;img src=&#34;https://github.com/mikel-brostrom/Yolov5_DeepSort_Pytorch/workflows/CI%20CPU%20testing/badge.svg?sanitize=true&#34; alt=&#34;CI CPU testing&#34;&gt;&lt;/a&gt; &#xA;  &lt;br&gt; &#xA;  &lt;a href=&#34;https://colab.research.google.com/drive/18nIqkBr68TkK8dHdarxTco6svHUJGggY?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &#xA;  &lt;a href=&#34;https://doi.org/10.5281/zenodo.7452874&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/DOI/10.5281/zenodo.7452874.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains a highly configurable two-stage-tracker that adjusts to different deployment scenarios. It can jointly perform multiple object tracking and instance segmentation (MOTS). The detections generated by &lt;a href=&#34;https://github.com/ultralytics/ultralytics&#34;&gt;YOLOv8&lt;/a&gt;, a family of object detection architectures and models pretrained on the &lt;a href=&#34;https://arxiv.org/abs/1405.0312&#34;&gt;COCO&lt;/a&gt; dataset, are passed to the tracker of your choice. Supported ones at the moment are: &lt;a href=&#34;https://github.com/dyhBUPT/StrongSORT&#34;&gt;StrongSORT&lt;/a&gt;&lt;a href=&#34;https://arxiv.org/abs/2202.13514&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/KaiyangZhou/deep-person-reid&#34;&gt;OSNet&lt;/a&gt;&lt;a href=&#34;https://arxiv.org/abs/1905.00953&#34;&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/noahcao/OC_SORT&#34;&gt;OCSORT&lt;/a&gt;&lt;a href=&#34;https://arxiv.org/abs/2203.14360&#34;&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/ifzhang/ByteTrack&#34;&gt;ByteTrack&lt;/a&gt;&lt;a href=&#34;https://arxiv.org/abs/2110.06864&#34;&gt;&lt;/a&gt;. They can track any object that your Yolov8 model was trained to detect.&lt;/p&gt; &#xA;&lt;h2&gt;Why using this tracking toolbox?&lt;/h2&gt; &#xA;&lt;p&gt;Everything is designed with simplicity and flexibility in mind. We don&#39;t hyperfocus on results on a single dataset, we prioritize real-world results. If you don&#39;t get good tracking results on your custom dataset with the out-of-the-box tracker configurations, use the &lt;code&gt;evolve.py&lt;/code&gt; script for tracker hyperparameter tuning.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet.git  # clone recursively&#xA;cd Yolov5_StrongSORT_OSNet&#xA;pip install -r requirements.txt  # install dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tutorials&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data&#34;&gt;Yolov5 training (link to external repository)&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://kaiyangzhou.github.io/deep-person-reid/user_guide.html&#34;&gt;Deep appearance descriptor training (link to external repository)&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/ReID-multi-framework-model-export&#34;&gt;ReID model export to ONNX, OpenVINO, TensorRT and TorchScript&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/How-to-evaluate-on-custom-tracking-dataset&#34;&gt;Evaluation on custom tracking dataset&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Inference acceleration with Nebullvm&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1J6dl90-zOjNNtcwhw7Yuuxqg5oWp_YJa?usp=sharing&#34;&gt;Yolov5&lt;/a&gt;&amp;nbsp;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/drive/1APUZ1ijCiQFBR9xD0gUvFUOC8yOJIvHm?usp=sharing&#34;&gt;ReID&lt;/a&gt;&amp;nbsp;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt;&#xA; &lt;/ul&gt;&#xA;&lt;/details&gt;   &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Experiments&lt;/summary&gt; &#xA; &lt;p&gt;In inverse chronological order:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/Evaluation-of-the-params-evolved-for-first-half-of-MOT17-on-the-complete-MOT17&#34;&gt;Evaluation of the params evolved for first half of MOT17 on the complete MOT17&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/Segmentation-model-vs-object-detetion-model-on-MOT-metrics&#34;&gt;Segmentation model vs object detetion model on MOT metrics&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/Masked-detection-crops-vs-regular-detection-crops-for-ReID-feature-extraction&#34;&gt;Effect of masking objects before feature extraction&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/conf-thres-vs-MOT-metrics&#34;&gt;conf-thres vs HOTA, MOTA and IDF1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/Effect-of-KF-updates-ahead-for-tracks-with-no-associations,-on-MOT17&#34;&gt;Effect of KF updates ahead for tracks with no associations on MOT17&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/Effect-of-passing-full-image-input-vs-1280-re-scaled-to-StrongSORT-on-MOT17&#34;&gt;Effect of full images vs 1280 input to StrongSORT on MOT17&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/OSNet-architecture-performances-on-MOT16&#34;&gt;Effect of different OSNet architectures on MOT16&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/StrongSORT-vs-BoTSORT-vs-OCSORT&#34;&gt;Yolov5 StrongSORT vs BoTSORT vs OCSORT&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Yolov5 &lt;a href=&#34;https://arxiv.org/abs/2206.14651&#34;&gt;BoTSORT&lt;/a&gt; branch: &lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/tree/botsort&#34;&gt;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/tree/botsort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/MOT-17-evaluation-(private-detector)&#34;&gt;Yolov5 StrongSORT OSNet vs other trackers MOT17&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/Yolov5DeepSORTwithOSNet-vs-Yolov5StrongSORTwithOSNet-ablation-study-on-MOT16&#34;&gt;StrongSORT MOT16 ablation study&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/wiki/MOT-16-evaluation&#34;&gt;Yolov5 StrongSORT OSNet vs other trackers MOT16 (deprecated)&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &lt;/li&gt;&#xA; &lt;/ul&gt;&#xA;&lt;/details&gt;   &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Custom object detection architecture&lt;/summary&gt; &#xA; &lt;p&gt;The trackers provided in this repo can be used with other object detectors than Yolov5. Make sure that the output of your detector has the following format:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;(x1,y1, x2, y2, obj, cls0, cls1, ..., clsn)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;pass this directly to the tracker here:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/raw/a4bc0c38c33023fab9e5481861d9520eb81e28bc/track.py#L189&#34;&gt;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/blob/a4bc0c38c33023fab9e5481861d9520eb81e28bc/track.py#L189&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Tracking&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python track.py --yolo-weights yolov8n.pt      # bboxes only&#xA;                                 yolov8-seg.pt  # bboxes + segmentation masks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tracking methods&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python track.py --tracking-method strongsort&#xA;                                    ocsort&#xA;                                    bytetrack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tracking sources&lt;/summary&gt; &#xA; &lt;p&gt;Tracking can be run on most video formats&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python track.py --source 0  # webcam&#xA;                           img.jpg  # image&#xA;                           vid.mp4  # video&#xA;                           path/  # directory&#xA;                           path/*.jpg  # glob&#xA;                           &#39;https://youtu.be/Zgi9g1ksQHc&#39;  # YouTube&#xA;                           &#39;rtsp://example.com/media.mp4&#39;  # RTSP, RTMP, HTTP stream&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Select Yolov8 model&lt;/summary&gt; &#xA; &lt;p&gt;There is a clear trade-off between model inference speed and overall performance. In order to make it possible to fulfill your inference speed/accuracy needs you can select a Yolov5 family model for automatic download. These model can be further optimized for you needs by the &lt;a href=&#34;https://github.com/ultralytics/yolov5/raw/master/export.py&#34;&gt;export.py&lt;/a&gt; script&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;&#xA;$ python track.py --source 0 --yolo-weights yolov8n.pt --img 640&#xA;                                            yolov8s.tflite&#xA;                                            yolov8m.pt&#xA;                                            yolov8l.onnx &#xA;                                            yolov8x.pt --img 1280&#xA;                                            ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Select ReID model&lt;/summary&gt; &#xA; &lt;p&gt;Some tracking methods combine appearance description and motion in the process of tracking. For those which use appearance, you can choose a ReID model based on your needs from this &lt;a href=&#34;https://kaiyangzhou.github.io/deep-person-reid/MODEL_ZOO&#34;&gt;ReID model zoo&lt;/a&gt;. These model can be further optimized for you needs by the &lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/raw/master/reid_export.py&#34;&gt;reid_export.py&lt;/a&gt; script&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;&#xA;$ python track.py --source 0 --reid-weights osnet_x0_25_market1501.pt&#xA;                                            mobilenetv2_x1_4_msmt17.engine&#xA;                                            resnet50_msmt17.onnx&#xA;                                            osnet_x1_0_msmt17.pt&#xA;                                            ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Filter tracked classes&lt;/summary&gt; &#xA; &lt;p&gt;By default the tracker tracks all MS COCO classes.&lt;/p&gt; &#xA; &lt;p&gt;If you want to track a subset of the classes that you model predicts, add their corresponding index after the classes flag,&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python track.py --source 0 --yolo-weights yolov8s.pt --classes 16 17  # COCO yolov8 model. Track cats and dogs, only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://tech.amikelive.com/node-718/what-object-categories-labels-are-in-coco-dataset/&#34;&gt;Here&lt;/a&gt; is a list of all the possible objects that a Yolov8 model trained on MS COCO can detect. Notice that the indexing for the classes in this repo starts at zero&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Updates with predicted-ahead bbox in StrongSORT&lt;/summary&gt; &#xA; &lt;p&gt;If your use-case contains many occlussions and the motion trajectiories are not too complex, you will most certainly benefit from updating the Kalman Filter by its own predicted state. Select the number of predictions that suits your needs here:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/raw/b1da64717ef50e1f60df2f1d51e1ff91d3b31ed4/trackers/strong_sort/configs/strong_sort.yaml#L7&#34;&gt;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/blob/b1da64717ef50e1f60df2f1d51e1ff91d3b31ed4/trackers/strong_sort/configs/strong_sort.yaml#L7&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Save the trajectories to you video by:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python track.py --source ... --save-trajectories --save-vid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mikel-brostrom/yolov8_tracking/master/trackers/strong_sort/results/preds_example.gif&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;MOT compliant results&lt;/summary&gt; &#xA; &lt;p&gt;Can be saved to your experiment folder &lt;code&gt;runs/track/&amp;lt;yolo_model&amp;gt;_&amp;lt;deep_sort_model&amp;gt;/&lt;/code&gt; by&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python track.py --source ... --save-txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tracker hyperparameter tuning&lt;/summary&gt; &#xA; &lt;p&gt;We use a fast and elitist multiobjective genetic algorithm for tracker hyperparameter tuning. Run it by&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ python evolve.py --tracking-method strongsort --benchmark MOT17 --n-trials 100  # tune strongsort for MOT17&#xA;                   --tracking-method ocsort     --benchmark &amp;lt;your-custom-dataset&amp;gt; # tune ocsort for your custom tracking dataset&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The set of hyperparameters leading to the best HOTA result are written to the tracker&#39;s config file.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;For Yolov5 StrongSORT OSNet bugs and feature requests please visit &lt;a href=&#34;https://github.com/mikel-brostrom/Yolov5_StrongSORT_OSNet/issues&#34;&gt;GitHub Issues&lt;/a&gt;. For business inquiries or professional support requests please send an email to: &lt;a href=&#34;mailto:yolov5.deepsort.pytorch@gmail.com&#34;&gt;yolov5.deepsort.pytorch@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cython/cython</title>
    <updated>2023-01-18T01:42:57Z</updated>
    <id>tag:github.com,2023-01-18:/cython/cython</id>
    <link href="https://github.com/cython/cython" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The most widely used Python to C compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Cython!&lt;/h1&gt; &#xA;&lt;p&gt;Cython is a language that makes writing C extensions for Python as easy as Python itself. Cython is based on Pyrex, but supports more cutting edge functionality and optimizations.&lt;/p&gt; &#xA;&lt;p&gt;The Cython language is very close to the Python language, but Cython additionally supports calling C functions and declaring C types on variables and class attributes. This allows the compiler to generate very efficient C code from Cython code.&lt;/p&gt; &#xA;&lt;p&gt;This makes Cython the ideal language for wrapping external C libraries, and for fast C modules that speed up the execution of Python code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Official website: &lt;a href=&#34;https://cython.org/&#34;&gt;https://cython.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://docs.cython.org/&#34;&gt;https://docs.cython.org/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github repository: &lt;a href=&#34;https://github.com/cython/cython&#34;&gt;https://github.com/cython/cython&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wiki: &lt;a href=&#34;https://github.com/cython/cython/wiki&#34;&gt;https://github.com/cython/cython/wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;strong&gt;support the Cython project&lt;/strong&gt; via &lt;code&gt;Github Sponsors &amp;lt;https://github.com/users/scoder/sponsorship&amp;gt;&lt;/code&gt;_ or &lt;code&gt;Tidelift &amp;lt;https://tidelift.com/subscription/pkg/pypi-cython&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;If you already have a C compiler, just run following command::&lt;/p&gt; &#xA;&lt;p&gt;pip install Cython&lt;/p&gt; &#xA;&lt;p&gt;otherwise, see &lt;code&gt;the installation page &amp;lt;https://docs.cython.org/en/latest/src/quickstart/install.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;License:&lt;/h2&gt; &#xA;&lt;p&gt;The original Pyrex program was licensed &#34;free of restrictions&#34; (see below). Cython itself is licensed under the permissive &lt;strong&gt;Apache License&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;LICENSE.txt &amp;lt;https://github.com/cython/cython/blob/master/LICENSE.txt&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing:&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute to the Cython project? Here is some &lt;code&gt;help to get you started &amp;lt;https://github.com/cython/cython/blob/master/docs/CONTRIBUTING.rst&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;We are currently building the next great Cython edition: &lt;code&gt;Cython 3.0 &amp;lt;https://github.com/cython/cython/milestone/58&amp;gt;&lt;/code&gt;_. You can help us make the life of Python 3.x users easier.&lt;/p&gt; &#xA;&lt;h2&gt;Differences to other Python compilers&lt;/h2&gt; &#xA;&lt;p&gt;Started as a project in the early 2000s, Cython has outlived &lt;code&gt;most other attempts &amp;lt;https://wiki.python.org/moin/PythonImplementations#Compilers&amp;gt;&lt;/code&gt;_ at producing static compilers for the Python language.&lt;/p&gt; &#xA;&lt;p&gt;Similar projects that have a relevance today include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PyPy &amp;lt;https://www.pypy.org/&amp;gt;&lt;/code&gt;_, a Python implementation with a JIT compiler.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: JIT compilation with runtime optimisations, fully language compliant, good integration with external C/C++ code&lt;/li&gt; &#xA;   &lt;li&gt;Cons: non-CPython runtime, relatively large resource usage of the runtime, limited compatibility with CPython extensions, non-obvious performance results&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Numba &amp;lt;http://numba.pydata.org/&amp;gt;&lt;/code&gt;_, a Python extension that features a JIT compiler for a subset of the language, based on the LLVM compiler infrastructure (probably best known for its &lt;code&gt;clang&lt;/code&gt; C compiler). It mostly targets numerical code that uses NumPy.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: JIT compilation with runtime optimisations&lt;/li&gt; &#xA;   &lt;li&gt;Cons: limited language support, relatively large runtime dependency (LLVM), non-obvious performance results&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Pythran &amp;lt;https://pythran.readthedocs.io/&amp;gt;&lt;/code&gt;&lt;em&gt;, a static Python-to-C++ extension compiler for a subset of the language, mostly targeted at numerical computation. Pythran can be (and is probably best) used as an additional &lt;code&gt;backend for NumPy code &amp;lt;https://cython.readthedocs.io/en/latest/src/userguide/numpy_pythran.html&amp;gt;&lt;/code&gt;&lt;/em&gt; in Cython.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mypyc &amp;lt;https://mypyc.readthedocs.io/&amp;gt;&lt;/code&gt;&lt;em&gt;, a static Python-to-C extension compiler, based on the &lt;code&gt;mypy &amp;lt;http://www.mypy-lang.org/&amp;gt;&lt;/code&gt;&lt;/em&gt; static Python analyser. Like Cython&#39;s &lt;code&gt;pure Python mode &amp;lt;https://cython.readthedocs.io/en/latest/src/tutorial/pure.html&amp;gt;&lt;/code&gt;_, mypyc can make use of PEP-484 type annotations to optimise code for static types.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: good support for language and PEP-484 typing, good type inference, reasonable performance gains&lt;/li&gt; &#xA;   &lt;li&gt;Cons: no support for low-level optimisations and typing, opinionated Python type interpretation, reduced Python compatibility and introspection after compilation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Nuitka &amp;lt;https://nuitka.net/&amp;gt;&lt;/code&gt;_, a static Python-to-C extension compiler.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pros: highly language compliant, reasonable performance gains, support for static application linking (similar to &lt;code&gt;cython_freeze &amp;lt;https://github.com/cython/cython/blob/master/bin/cython_freeze&amp;gt;&lt;/code&gt;_ but with the ability to bundle library dependencies into a self-contained executable)&lt;/li&gt; &#xA;   &lt;li&gt;Cons: no support for low-level optimisations and typing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In comparison to the above, Cython provides&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fast, efficient and highly compliant support for almost all Python language features, including dynamic features and introspection&lt;/li&gt; &#xA; &lt;li&gt;full runtime compatibility with all still-in-use and future versions of CPython&lt;/li&gt; &#xA; &lt;li&gt;&#34;generate once, compile everywhere&#34; C code generation that allows for reproducible performance results and testing&lt;/li&gt; &#xA; &lt;li&gt;C compile time adaptation to the target platform and Python version&lt;/li&gt; &#xA; &lt;li&gt;support for other C-API implementations, including PyPy and Pyston&lt;/li&gt; &#xA; &lt;li&gt;seamless integration with C/C++ code&lt;/li&gt; &#xA; &lt;li&gt;broad support for manual optimisation and tuning down to the C level&lt;/li&gt; &#xA; &lt;li&gt;a large user base with thousands of libraries, packages and tools&lt;/li&gt; &#xA; &lt;li&gt;almost two decades of bug fixing and static code optimisations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get the full source history:&lt;/h2&gt; &#xA;&lt;p&gt;Note that Cython used to ship the full version control repository in its source distribution, but no longer does so due to space constraints. To get the full source history from a downloaded source archive, make sure you have git installed, then step into the base directory of the Cython source distribution and type::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The following is from Pyrex:&lt;/h2&gt; &#xA;&lt;p&gt;This is a development version of Pyrex, a language for writing Python extension modules.&lt;/p&gt; &#xA;&lt;p&gt;For more info, take a look at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Doc/About.html for a description of the language&lt;/li&gt; &#xA; &lt;li&gt;INSTALL.txt for installation instructions&lt;/li&gt; &#xA; &lt;li&gt;USAGE.txt for usage instructions&lt;/li&gt; &#xA; &lt;li&gt;Demos for usage examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Comments, suggestions, bug reports, etc. are most welcome!&lt;/p&gt; &#xA;&lt;p&gt;Copyright stuff: Pyrex is free of restrictions. You may use, redistribute, modify and distribute modified versions.&lt;/p&gt; &#xA;&lt;p&gt;The latest version of Pyrex can be found &lt;code&gt;here &amp;lt;https://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;| Greg Ewing, Computer Science Dept | University of Canterbury | Christchurch, New Zealand&lt;/p&gt; &#xA;&lt;p&gt;A citizen of NewZealandCorp, a wholly-owned subsidiary of USA Inc.&lt;/p&gt;</summary>
  </entry>
</feed>