<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-07T01:34:46Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>freelabz/secator</title>
    <updated>2024-07-07T01:34:46Z</updated>
    <id>tag:github.com,2024-07-07:/freelabz/secator</id>
    <link href="https://github.com/freelabz/secator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;secator - the pentester&#39;s swiss knife&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/freelabz/secator/assets/9629314/ee203af4-e853-439a-af01-edeabfc4bf07/&#34; width=&#34;400&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;The pentester&#39;s swiss knife.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- &lt;a href=&#34;https://goreportcard.com/report/github.com/freelabz/secator&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/freelabz/secator&#34;&gt;&lt;/a&gt; --&gt; &lt;img src=&#34;https://img.shields.io/badge/python-3.6-blue.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://github.com/freelabz/secator/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/freelabz/secator&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/freelabz/secator/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSL%201.1-brightgreen.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/secator/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/secator&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/freelabz&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/freelabz.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://youtube.com/@FreeLabz&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UCu-F6SpU0h2NP18zBBP04cw?style=social&amp;amp;label=Subscribe%20%40FreeLabz&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://discord.gg/freelabz&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; --&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/freelabz/secator/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/freelabz/secator/main/#supported-commands&#34;&gt;Supported commands&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/freelabz/secator/main/#install-secator&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/freelabz/secator/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://docs.freelabz.com&#34;&gt;Documentation&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;secator&lt;/code&gt; is a task and workflow runner used for security assessments. It supports dozens of well-known security tools and it is designed to improve productivity for pentesters and security researchers.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/freelabz/secator/main/images/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Curated list of commands&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified input options&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unified output schema&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CLI and library usage&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Distributed options with Celery&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Complexity from simple tasks to complex workflows&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Customizable&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported tools&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;secator&lt;/code&gt; integrates the following tools:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/httpx&#34;&gt;httpx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast HTTP prober.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/edoardottt/cariddi&#34;&gt;cariddi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast crawler and endpoint secrets / api keys / tokens matcher.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http/crawler&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lc/gau&#34;&gt;gau&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Offline URL crawler (Alien Vault, The Wayback Machine, Common Crawl, URLScan).&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http/crawler&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jaeles-project/gospider&#34;&gt;gospider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast web spider written in Go.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http/crawler&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/katana&#34;&gt;katana&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next-generation crawling and spidering framework.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http/crawler&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/maurosoria/dirsearch&#34;&gt;dirsearch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Web path discovery.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http/fuzzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/epi052/feroxbuster&#34;&gt;feroxbuster&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple, fast, recursive content discovery tool written in Rust.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http/fuzzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;ffuf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast web fuzzer written in Go.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;http/fuzzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/khast3x/h8mail&#34;&gt;h8mail&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Email OSINT and breach hunting tool.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;osint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/dnsx&#34;&gt;dnsx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast and multi-purpose DNS toolkit designed for running DNS queries.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;recon/dns&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/dnsx&#34;&gt;dnsxbrute&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast and multi-purpose DNS toolkit designed for running DNS queries (bruteforce mode).&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;recon/dns&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/subfinder&#34;&gt;subfinder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast subdomain finder.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;recon/dns&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://fping.org/&#34;&gt;fping&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Find alive hosts on local networks.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;recon/ip&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/mapcidr&#34;&gt;mapcidr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand CIDR ranges into IPs.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;recon/ip&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/naabu&#34;&gt;naabu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast port discovery tool.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;recon/port&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/soxoj/maigret&#34;&gt;maigret&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hunt for user accounts across many websites.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;recon/user&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/tomnomnom/gf&#34;&gt;gf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A wrapper around grep to avoid typing common patterns.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tagger&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/anchore/grype&#34;&gt;grype&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A vulnerability scanner for container images and filesystems.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln/code&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hahwul/dalfox&#34;&gt;dalfox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Powerful XSS scanning tool and parameter analyzer.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln/http&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rapid7.com/metasploit/msf-overview&#34;&gt;msfconsole&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CLI to access and work with the Metasploit Framework.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln/http&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wpscanteam/wpscan&#34;&gt;wpscan&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WordPress Security Scanner&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln/multi&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nmap/nmap&#34;&gt;nmap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vulnerability scanner using NSE scripts.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln/multi&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/projectdiscovery/nuclei&#34;&gt;nuclei&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast and customisable vulnerability scanner based on simple YAML based DSL.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuln/multi&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitlab.com/exploit-database/exploitdb&#34;&gt;searchsploit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exploit searcher.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;exploit/search&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Feel free to request new tools to be added by opening an issue, but please check that the tool complies with our selection criterias before doing so. If it doesn&#39;t but you still want to integrate it into &lt;code&gt;secator&lt;/code&gt;, you can plug it in (see the &lt;a href=&#34;https://docs.freelabz.com/for-developers/writing-custom-tasks&#34;&gt;dev guide&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Installing secator&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pipx&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pipx install secator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pip&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install secator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Bash&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -O - https://raw.githubusercontent.com/freelabz/secator/main/scripts/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Docker&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it --rm --net=host -v ~/.secator:/root/.secator freelabz/secator --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The volume mount -v is necessary to save all secator reports to your host machine, and--net=host is recommended to grant full access to the host network.&lt;/p&gt; &#xA; &lt;p&gt;You can alias this command to run it easier:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias secator=&#34;docker run -it --rm --net=host -v ~/.secator:/root/.secator freelabz/secator&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Now you can run secator like if it was installed on baremetal:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;secator --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Docker Compose&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/freelabz/secator&#xA;cd secator&#xA;docker-compose up -d&#xA;docker-compose exec secator secator --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; If you chose the Bash, Docker or Docker Compose installation methods, you can skip the next sections and go straight to &lt;a href=&#34;https://raw.githubusercontent.com/freelabz/secator/main/#usage&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing languages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;secator&lt;/code&gt; uses external tools, so you might need to install languages used by those tools assuming they are not already installed on your system.&lt;/p&gt; &#xA;&lt;p&gt;We provide utilities to install required languages if you don&#39;t manage them externally:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Go&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install langs go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Ruby&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install langs ruby&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Installing tools&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;secator&lt;/code&gt; does not install any of the external tools it supports by default.&lt;/p&gt; &#xA;&lt;p&gt;We provide utilities to install or update each supported tool which should work on all systems supporting &lt;code&gt;apt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;All tools&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install tools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Specific tools&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install tools &amp;lt;TOOL_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For instance, to install &lt;code&gt;httpx&lt;/code&gt;, use:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install tools httpx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Please make sure you are using the latest available versions for each tool before you run secator or you might run into parsing / formatting issues.&lt;/p&gt; &#xA;&lt;h3&gt;Installing addons&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;secator&lt;/code&gt; comes installed with the minimum amount of dependencies.&lt;/p&gt; &#xA;&lt;p&gt;There are several addons available for &lt;code&gt;secator&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;worker&lt;/summary&gt; &#xA; &lt;p&gt;Add support for Celery workers (see &lt;a href=&#34;https://docs.freelabz.com/in-depth/distributed-runs-with-celery&#34;&gt;Distributed runs with Celery&lt;/a&gt;).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install addons worker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;google&lt;/summary&gt; &#xA; &lt;p&gt;Add support for Google Drive exporter (&lt;code&gt;-o gdrive&lt;/code&gt;).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install addons google&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;mongodb&lt;/summary&gt; &#xA; &lt;p&gt;Add support for MongoDB driver (&lt;code&gt;-driver mongodb&lt;/code&gt;).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install addons mongodb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;redis&lt;/summary&gt; &#xA; &lt;p&gt;Add support for Redis backend (Celery).&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install addons redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dev&lt;/summary&gt; &#xA; &lt;p&gt;Add development tools like &lt;code&gt;coverage&lt;/code&gt; and &lt;code&gt;flake8&lt;/code&gt; required for running tests.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install addons dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;trace&lt;/summary&gt; &#xA; &lt;p&gt;Add tracing tools like &lt;code&gt;memray&lt;/code&gt; and &lt;code&gt;pyinstrument&lt;/code&gt; required for tracing functions.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install addons trace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;build&lt;/summary&gt; &#xA; &lt;p&gt;Add &lt;code&gt;hatch&lt;/code&gt; for building and publishing the PyPI package.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install addons build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Install CVEs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;secator&lt;/code&gt; makes remote API calls to &lt;a href=&#34;https://cve.circl.lu/&#34;&gt;https://cve.circl.lu/&lt;/a&gt; to get in-depth information about the CVEs it encounters. We provide a subcommand to download all known CVEs locally so that future lookups are made from disk instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator install cves&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking installation health&lt;/h3&gt; &#xA;&lt;p&gt;To figure out which languages or tools are installed on your system (along with their version):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator health&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/freelabz/secator/main/images/help.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage examples&lt;/h3&gt; &#xA;&lt;p&gt;Run a fuzzing task (&lt;code&gt;ffuf&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator x ffuf http://testphp.vulnweb.com/FUZZ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a url crawl workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator w url_crawl http://testphp.vulnweb.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a host scan:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator s host mydomain.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and more... to list all tasks / workflows / scans that you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;secator x --help&#xA;secator w --help&#xA;secator s --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;To go deeper with &lt;code&gt;secator&lt;/code&gt;, check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Our complete &lt;a href=&#34;https://docs.freelabz.com&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our getting started &lt;a href=&#34;https://youtu.be/-JmUTNWQDTQ?si=qpAClDWMXo2zwUK7&#34;&gt;tutorial video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Our &lt;a href=&#34;https://medium.com/p/09333f3d3682&#34;&gt;Medium post&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow us on social media: &lt;a href=&#34;https://twitter.com/freelabz&#34;&gt;@freelabz&lt;/a&gt; on Twitter and &lt;a href=&#34;https://youtube.com/@FreeLabz&#34;&gt;@FreeLabz&lt;/a&gt; on YouTube&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stats&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#freelabz/secator&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=freelabz/secator&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=freelabz/secator&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=freelabz/secator&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>tanelpoder/0xtools</title>
    <updated>2024-07-07T01:34:46Z</updated>
    <id>tag:github.com,2024-07-07:/tanelpoder/0xtools</id>
    <link href="https://github.com/tanelpoder/0xtools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;0x.Tools: X-Ray vision for Linux systems&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;0x.Tools: X-Ray vision for Linux systems&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;0x.tools&lt;/strong&gt; is a set of open-source utilities for analyzing application performance on Linux. It has a goal of deployment simplicity and minimal dependencies, to reduce friction of systematic troubleshooting. There’s no need to upgrade the OS, install kernel modules, heavy monitoring frameworks, Java agents or databases. Some of these tools also work on over-decade-old Linux kernels, like version 2.6.18 from 18 years ago.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;0x.tools&lt;/strong&gt; allow you to measure individual thread level activity, like thread sleep states, currently executing system calls and kernel wait locations. Additionally, you can drill down into CPU usage of any thread or the system as a whole. You can be systematic in your troubleshooting - no need for guessing or genius wizard tricks with traditional system utilization stats.&lt;/p&gt; &#xA;&lt;h2&gt;xcapture-bpf and xtop v2.0.2 announced! (2024-07-03)&lt;/h2&gt; &#xA;&lt;p&gt;xcapture-bpf (and xtop) are like the Linux top tool, but extended with x-ray vision and ability to view your performance data from any chosen angle (that eBPF allows to instrument). You can use it for system level overview and drill down into indivual threads&#39; activity and soon even into individual kernel events like lock waits or memory stalls. eBPF is not only customizable, it&#39;s completely programmable and I plan to take full advantage of it. I have so far implemented less than 5% of everything this method and the new tool is capable of, stay tuned for more!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0x.tools&#34;&gt;https://0x.tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;xcapture-bpf demo&lt;/h3&gt; &#xA;&lt;p&gt;This is one of the things that you get:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/666715&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/666715.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;xcapture-bpf screenshot&lt;/h3&gt; &#xA;&lt;p&gt;A screenshot that illustrates how xcapture-bpf output and stacktiles work with terminal search/highlighting and scroll-back ability:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://0x.tools/images/xcapture-bpf-stacktiles.png&#34; alt=&#34;xcapture-bpf screenshot with terminal highlighting&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;xcapture-bpf install instructions and info&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://0x.tools&#34;&gt;https://0x.tools&lt;/a&gt; for more info and the installation instructions of the latest eBPF-based tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;An example&lt;/strong&gt; of one of the tools &lt;code&gt;psn&lt;/code&gt; (that doesn&#39;t use eBPF, just reads the usual &lt;code&gt;/proc&lt;/code&gt; files) is here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo psn -p &#34;mysqld|kwork&#34; -G syscall,wchan&#xA;&#xA;Linux Process Snapper v0.14 by Tanel Poder [https://0x.tools]&#xA;Sampling /proc/syscall, stat, wchan for 5 seconds... finished.&#xA;&#xA;&#xA;=== Active Threads ========================================================================================&#xA;&#xA; samples | avg_threads | comm          | state                  | syscall   | wchan                        &#xA;-----------------------------------------------------------------------------------------------------------&#xA;      25 |        3.12 | (mysqld)      | Disk (Uninterruptible) | fsync     | _xfs_log_force_lsn&#xA;      16 |        2.00 | (mysqld)      | Running (ON CPU)       | [running] | 0                            &#xA;      14 |        1.75 | (mysqld)      | Disk (Uninterruptible) | pwrite64  | call_rwsem_down_write_failed&#xA;       8 |        1.00 | (mysqld)      | Disk (Uninterruptible) | fsync     | submit_bio_wait              &#xA;       4 |        0.50 | (mysqld)      | Disk (Uninterruptible) | pread64   | io_schedule                  &#xA;       4 |        0.50 | (mysqld)      | Disk (Uninterruptible) | pwrite64  | io_schedule                  &#xA;       3 |        0.38 | (mysqld)      | Disk (Uninterruptible) | pread64   | 0                            &#xA;       3 |        0.38 | (mysqld)      | Running (ON CPU)       | [running] | io_schedule                  &#xA;       3 |        0.38 | (mysqld)      | Running (ON CPU)       | pread64   | 0                            &#xA;       2 |        0.25 | (mysqld)      | Disk (Uninterruptible) | [running] | 0                            &#xA;       1 |        0.12 | (kworker/*:*) | Running (ON CPU)       | read      | worker_thread                &#xA;       1 |        0.12 | (mysqld)      | Disk (Uninterruptible) | fsync     | io_schedule                  &#xA;       1 |        0.12 | (mysqld)      | Disk (Uninterruptible) | futex     | call_rwsem_down_write_failed &#xA;       1 |        0.12 | (mysqld)      | Disk (Uninterruptible) | poll      | 0                            &#xA;       1 |        0.12 | (mysqld)      | Disk (Uninterruptible) | pwrite64  | _xfs_log_force_lsn           &#xA;       1 |        0.12 | (mysqld)      | Running (ON CPU)       | fsync     | submit_bio_wait              &#xA;       1 |        0.12 | (mysqld)      | Running (ON CPU)       | futex     | futex_wait_queue_me&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage info&lt;/strong&gt; and more details here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://0x.tools&#34;&gt;https://0x.tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Twitter:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/0xtools&#34;&gt;https://twitter.com/0xtools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Author:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tanelpoder.com&#34;&gt;https://tanelpoder.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>disposable-email-domains/disposable-email-domains</title>
    <updated>2024-07-07T01:34:46Z</updated>
    <id>tag:github.com,2024-07-07:/disposable-email-domains/disposable-email-domains</id>
    <link href="https://github.com/disposable-email-domains/disposable-email-domains" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a list of disposable and temporary email address domains&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;List of disposable email domains&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;&lt;img src=&#34;https://licensebuttons.net/p/zero/1.0/88x31.png&#34; alt=&#34;Licensed under CC0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo contains a &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/disposable_email_blocklist.conf&#34;&gt;list of disposable and temporary email address domains&lt;/a&gt; often used to register dummy users in order to spam or abuse some services.&lt;/p&gt; &#xA;&lt;p&gt;We cannot guarantee all of these can still be considered disposable but we do basic checking so chances are they were disposable at one point in time.&lt;/p&gt; &#xA;&lt;h1&gt;Allowlist&lt;/h1&gt; &#xA;&lt;p&gt;The file &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/allowlist.conf&#34;&gt;allowlist.conf&lt;/a&gt; gathers email domains that are often identified as disposable but in fact are not.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Feel free to create PR with additions or request removal of some domain (with reasons).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Specifically, please cite in your PR where one can generate a disposable email address which uses that domain, so the maintainers can verify it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please add new disposable domains directly into &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/disposable_email_blocklist.conf&#34;&gt;disposable_email_blocklist.conf&lt;/a&gt; in the same format (only second level domains on new line without @), then run &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/maintain.sh&#34;&gt;maintain.sh&lt;/a&gt;. The shell script will help you convert uppercase to lowercase, sort, remove duplicates and remove allowlisted domains.&lt;/p&gt; &#xA;&lt;h1&gt;Changelog&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2/11/21 We created a github &lt;a href=&#34;https://github.com/disposable-email-domains&#34;&gt;org account&lt;/a&gt; and transferred the repository to it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;4/18/19 &lt;a href=&#34;https://github.com/di&#34;&gt;@di&lt;/a&gt; &lt;a href=&#34;https://github.com/martenson/disposable-email-domains/issues/205&#34;&gt;joined&lt;/a&gt; as a core maintainer of this project. Thank you!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;7/31/17 &lt;a href=&#34;https://github.com/deguif&#34;&gt;@deguif&lt;/a&gt; &lt;a href=&#34;https://github.com/martenson/disposable-email-domains/issues/106&#34;&gt;joined&lt;/a&gt; as a core maintainer of this project. Thanks!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;12/6/16 - Available as &lt;a href=&#34;https://pypi.org/project/disposable-email-domains&#34;&gt;PyPI module&lt;/a&gt; thanks to &lt;a href=&#34;https://github.com/di&#34;&gt;@di&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;7/27/16 - Converted all domains to the second level. This means that starting from &lt;a href=&#34;https://github.com/martenson/disposable-email-domains/commit/61ae67aacdab0b19098de2e13069d7c35b74017a&#34;&gt;this commit&lt;/a&gt; the implementers should take care of matching the second level domain names properly i.e. &lt;code&gt;@xxx.yyy.zzz&lt;/code&gt; should match &lt;code&gt;yyy.zzz&lt;/code&gt; in blocklist more info in &lt;a href=&#34;https://github.com/martenson/disposable-email-domains/issues/46&#34;&gt;#46&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Example Usage&lt;/h1&gt; &#xA;&lt;p&gt;TOC: &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#python&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#php&#34;&gt;PHP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#go&#34;&gt;Go&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#ruby-on-rails&#34;&gt;Ruby on Rails&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#nodejs&#34;&gt;NodeJS&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#c&#34;&gt;C#&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#bash&#34;&gt;bash&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/disposable-email-domains/disposable-email-domains/master/#java&#34;&gt;Java&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;with open(&#39;disposable_email_blocklist.conf&#39;) as blocklist:&#xA;    blocklist_content = {line.rstrip() for line in blocklist.readlines()}&#xA;if email.partition(&#39;@&#39;)[2] in blocklist_content:&#xA;    message = &#34;Please enter your permanent email address.&#34;&#xA;    return (False, message)&#xA;else:&#xA;    return True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available as &lt;a href=&#34;https://pypi.org/project/disposable-email-domains&#34;&gt;PyPI module&lt;/a&gt; thanks to &lt;a href=&#34;https://github.com/di&#34;&gt;@di&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from disposable_email_domains import blocklist&#xA;&amp;gt;&amp;gt;&amp;gt; &#39;bearsarefuzzy.com&#39; in blocklist&#xA;True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PHP&lt;/h3&gt; &#xA;&lt;p&gt;contributed by &lt;a href=&#34;https://github.com/txt3rob&#34;&gt;@txt3rob&lt;/a&gt;, &lt;a href=&#34;https://github.com/deguif&#34;&gt;@deguif&lt;/a&gt;, &lt;a href=&#34;https://github.com/pjebs&#34;&gt;@pjebs&lt;/a&gt; and &lt;a href=&#34;https://github.com/Wruczek&#34;&gt;@Wruczek&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure the passed email is valid. You can check that with &lt;a href=&#34;https://secure.php.net/manual/en/function.filter-var.php&#34;&gt;filter_var&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have the mbstring extension installed on your server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;function isDisposableEmail($email, $blocklist_path = null) {&#xA;    if (!$blocklist_path) $blocklist_path = __DIR__ . &#39;/disposable_email_blocklist.conf&#39;;&#xA;    $disposable_domains = file($blocklist_path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);&#xA;    $domain = mb_strtolower(explode(&#39;@&#39;, trim($email))[1]);&#xA;    return in_array($domain, $disposable_domains);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively check out Composer package &lt;a href=&#34;https://github.com/elliotjreed/disposable-emails-filter-php&#34;&gt;https://github.com/elliotjreed/disposable-emails-filter-php&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Go&lt;/h3&gt; &#xA;&lt;p&gt;contributed by &lt;a href=&#34;https://github.com/pjebs&#34;&gt;@pjebs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#34;bufio&#34;; &#34;os&#34;; &#34;strings&#34;;)&#xA;var disposableList = make(map[string]struct{}, 3500)&#xA;func init() {&#xA;&#x9;f, _ := os.Open(&#34;disposable_email_blocklist.conf&#34;)&#xA;&#x9;for scanner := bufio.NewScanner(f); scanner.Scan(); {&#xA;&#x9;&#x9;disposableList[scanner.Text()] = struct{}{}&#xA;&#x9;}&#xA;&#x9;f.Close()&#xA;}&#xA;&#xA;func isDisposableEmail(email string) (disposable bool) {&#xA;&#x9;segs := strings.Split(email, &#34;@&#34;)&#xA;&#x9;_, disposable = disposableList[strings.ToLower(segs[len(segs)-1])]&#xA;&#x9;return&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively check out Go package &lt;a href=&#34;https://github.com/rocketlaunchr/anti-disposable-email&#34;&gt;https://github.com/rocketlaunchr/anti-disposable-email&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ruby on Rails&lt;/h3&gt; &#xA;&lt;p&gt;contributed by &lt;a href=&#34;https://github.com/MitsunChieh&#34;&gt;@MitsunChieh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the resource model, usually it is &lt;code&gt;user.rb&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;before_validation :reject_email_blocklist&#xA;&#xA;def reject_email_blocklist&#xA;  blocklist = File.read(&#39;config/disposable_email_blocklist.conf&#39;).split(&#34;\n&#34;)&#xA;&#xA;  if blocklist.include?(email.split(&#39;@&#39;)[1])&#xA; &amp;nbsp; &amp;nbsp;errors[:email] &amp;lt;&amp;lt; &#39;invalid email&#39;&#xA;    return false&#xA;  else&#xA;    return true&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can use the &lt;code&gt;disposable_mail&lt;/code&gt; gem: &lt;a href=&#34;https://github.com/oesgalha/disposable_mail&#34;&gt;https://github.com/oesgalha/disposable_mail&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;p&gt;contributed by &lt;a href=&#34;https://github.com/boywithkeyboard&#34;&gt;@boywithkeyboard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { readFile } from &#39;node:fs/promises&#39;&#xA;&#xA;let blocklist&#xA;&#xA;async function isDisposable(email) {&#xA;  if (!blocklist) {&#xA;    const content = await readFile(&#39;disposable_email_blocklist.conf&#39;, { encoding: &#39;utf-8&#39; })&#xA;&#xA;    blocklist = content.split(&#39;\r\n&#39;).slice(0, -1)&#xA;  }&#xA;&#xA;  return blocklist.includes(email.split(&#39;@&#39;)[1])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;C#&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C#&#34;&gt;private static readonly Lazy&amp;lt;HashSet&amp;lt;string&amp;gt;&amp;gt; _emailBlockList = new Lazy&amp;lt;HashSet&amp;lt;string&amp;gt;&amp;gt;(() =&amp;gt;&#xA;{&#xA;  var lines = File.ReadLines(&#34;disposable_email_blocklist.conf&#34;)&#xA;    .Where(line =&amp;gt; !string.IsNullOrWhiteSpace(line) &amp;amp;&amp;amp; !line.TrimStart().StartsWith(&#34;//&#34;));&#xA;  return new HashSet&amp;lt;string&amp;gt;(lines, StringComparer.OrdinalIgnoreCase);&#xA;});&#xA;&#xA;private static bool IsBlocklisted(string domain) =&amp;gt; _emailBlockList.Value.Contains(domain);&#xA;&#xA;...&#xA;&#xA;var addr = new MailAddress(email);&#xA;if (IsBlocklisted(addr.Host)))&#xA;  throw new ApplicationException(&#34;Email is blocklisted.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bash&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/bin/bash&#xA;&#xA;# This script checks if an email address is temporary.&#xA;&#xA;# Read blocklist file into a bash array&#xA;mapfile -t blocklist &amp;lt; disposable_email_blocklist.conf&#xA;&#xA;# Check if email domain is in blocklist&#xA;if [[ &#34; ${blocklist[@]} &#34; =~ &#34; ${email#*@} &#34; ]]; then&#xA;    message=&#34;Please enter your permanent email address.&#34;&#xA;    return_value=false&#xA;else&#xA;    return_value=true&#xA;fi&#xA;&#xA;# Return result&#xA;echo &#34;$return_value&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Java&lt;/h3&gt; &#xA;&lt;p&gt;Code assumes that you have added &lt;code&gt;disposable_email_blocklist.conf&lt;/code&gt; next to your class as classpath resource.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;private static final Set&amp;lt;String&amp;gt; DISPOSABLE_EMAIL_DOMAINS;&#xA;&#xA;static {&#xA;    Set&amp;lt;String&amp;gt; domains = new HashSet&amp;lt;&amp;gt;();&#xA;    try (BufferedReader in = new BufferedReader(&#xA;            new InputStreamReader(&#xA;                EMailChecker.class.getResourceAsStream(&#34;disposable_email_blocklist.conf&#34;), StandardCharsets.UTF_8))) {&#xA;        String line;&#xA;        while ((line = in.readLine()) != null) {&#xA;            line = line.trim();&#xA;            if (line.isEmpty()) {&#xA;                continue;&#xA;            }&#xA;            &#xA;            domains.add(line);&#xA;        }&#xA;    } catch (IOException ex) {&#xA;        LOG.error(&#34;Failed to load list of disposable email domains.&#34;, ex);&#xA;    }&#xA;    DISPOSABLE_EMAIL_DOMAINS = domains;&#xA;}&#xA;&#xA;public static boolean isDisposable(String email) throws AddressException {&#xA;    InternetAddress contact = new InternetAddress(email);&#xA;    return isDisposable(contact);&#xA;}&#xA;&#xA;public static boolean isDisposable(InternetAddress contact) throws AddressException {&#xA;    String address = contact.getAddress();&#xA;    int domainSep = address.indexOf(&#39;@&#39;);&#xA;    String domain = (domainSep &amp;gt;= 0) ? address.substring(domainSep + 1) : address;&#xA;    return DISPOSABLE_EMAIL_DOMAINS.contains(domain);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>