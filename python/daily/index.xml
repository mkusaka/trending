<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-08T01:36:52Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>snaplet/postgres-wasm</title>
    <updated>2022-10-08T01:36:52Z</updated>
    <id>tag:github.com,2022-10-08:/snaplet/postgres-wasm</id>
    <link href="https://github.com/snaplet/postgres-wasm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PostgresQL server running in your browser&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;Postgres WASM&lt;/h1&gt; &#xA; &lt;p align=&#34;center&#34;&gt;A PostgreSQL server instance running in a virtual machine running in the browser&lt;br&gt; &lt;i&gt;by Supabase &amp;amp; Snaplet&lt;/i&gt;&lt;/p&gt; &#xA; &lt;img align=&#34;center&#34; src=&#34;https://user-images.githubusercontent.com/90199159/192729860-730e89a9-2489-4a95-a814-25eaaebebb7d.png&#34; alt=&#34;Snaplet, Supabase and friends&#34; width=&#34;480&#34;&gt; &#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://postgres-wasm.netlify.com&#34;&gt;Demo&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://app.snaplet.dev/chat&#34;&gt;Discord&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://www.snaplet.dev/&#34;&gt;Snaplet&lt;/a&gt; &#xA; &lt;span&gt;&amp;nbsp;&amp;nbsp;•&amp;nbsp;&amp;nbsp;&lt;/span&gt; &#xA; &lt;a href=&#34;https://www.supabase.com&#34;&gt;Supabase&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terminal&#34;&gt;cd packages/runtime &amp;amp;&amp;amp; npx serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; and have fun!&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;This repo is split into three packages that build up the environment for running PostgreSQL in the browser.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snaplet/postgres-wasm/main/packages/runtime&#34;&gt;runtime&lt;/a&gt;: The v86 emulator that starts the &lt;code&gt;buildroot&lt;/code&gt; image&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snaplet/postgres-wasm/main/packages/buildroot&#34;&gt;Buildroot&lt;/a&gt;: Scripts to build the CPU and memory snapshot run by v86.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snaplet/postgres-wasm/main/packages/websockproxy&#34;&gt;Websockproxy&lt;/a&gt;: Networking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/copy/v86&#34;&gt;v86&lt;/a&gt; which is &lt;strong&gt;the&lt;/strong&gt; emulator for running x86 operating systems in the browser, without it none of the following projects would be possible&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.crunchydata.com/developers/playground&#34;&gt;crunchydata playground&lt;/a&gt; for leading the way and showing the world that it was possible to run PostgreSQL in the browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/humphd/browser-shell&#34;&gt;browser-shell&lt;/a&gt; which was already way ahead of its time, especially on the filesystem part&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Darin755/browser-linux&#34;&gt;browser-linux&lt;/a&gt; for showing us how we can make the pieces fit together&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benjamincburns/websockproxy&#34;&gt;Websockets Proxy&lt;/a&gt; the ingenious workaround that opened up the world for &lt;strong&gt;v86&lt;/strong&gt; emulators everywhere&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SecureAuthCorp/impacket</title>
    <updated>2022-10-08T01:36:52Z</updated>
    <id>tag:github.com,2022-10-08:/SecureAuthCorp/impacket</id>
    <link href="https://github.com/SecureAuthCorp/impacket" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Impacket is a collection of Python classes for working with network protocols.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Impacket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/impacket/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/impacket.svg?sanitize=true&#34; alt=&#34;Latest Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/actions/workflows/build_and_test.yml&#34;&gt;&lt;img src=&#34;https://github.com/SecureAuthCorp/impacket/actions/workflows/build_and_test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build and test Impacket&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SECUREAUTH LABS. Copyright (C) 2022 SecureAuth Corporation. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Impacket is a collection of Python classes for working with network protocols. Impacket is focused on providing low-level programmatic access to the packets and for some protocols (e.g. SMB1-3 and MSRPC) the protocol implementation itself. Packets can be constructed from scratch, as well as parsed from raw data, and the object-oriented API makes it simple to work with deep hierarchies of protocols. The library provides a set of tools as examples of what can be done within the context of this library.&lt;/p&gt; &#xA;&lt;p&gt;A description of some of the tools can be found at &lt;a href=&#34;https://www.secureauth.com/labs/open-source-tools/impacket&#34;&gt;SecureAuth Labs&#39; Open Source Website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What protocols are featured?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ethernet, Linux &#34;Cooked&#34; capture.&lt;/li&gt; &#xA; &lt;li&gt;IP, TCP, UDP, ICMP, IGMP, ARP.&lt;/li&gt; &#xA; &lt;li&gt;IPv4 and IPv6 Support.&lt;/li&gt; &#xA; &lt;li&gt;NMB and SMB1, SMB2 and SMB3 (high-level implementations).&lt;/li&gt; &#xA; &lt;li&gt;MSRPC version 5, over different transports: TCP, SMB/TCP, SMB/NetBIOS and HTTP.&lt;/li&gt; &#xA; &lt;li&gt;Plain, NTLM and Kerberos authentications, using password/hashes/tickets/keys.&lt;/li&gt; &#xA; &lt;li&gt;Portions/full implementation of the following MSRPC interfaces: EPM, DTYPES, LSAD, LSAT, NRPC, RRP, SAMR, SRVS, WKST, SCMR, BKRP, DHCPM, EVEN6, MGMT, SASEC, TSCH, DCOM, WMI, OXABREF, NSPI, OXNSPI.&lt;/li&gt; &#xA; &lt;li&gt;Portions of TDS (MSSQL) and LDAP protocol implementations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Maintainer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.secureauth.com/&#34;&gt;&lt;img src=&#34;https://www.secureauth.com/wp-content/uploads/2020/10/SA_Logo_Blue_Hori-web.png&#34; width=&#34;320&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/#getting-impacket&#34;&gt;Getting Impacket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/#contact-us&#34;&gt;Contact Us&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Impacket&lt;/h1&gt; &#xA;&lt;h3&gt;Latest version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Impacket v0.10.0&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/impacket/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/impacket.svg?sanitize=true&#34; alt=&#34;Python versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/releases&#34;&gt;Current and past releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Development version&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Impacket v0.10.1-dev (&lt;strong&gt;&lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/tree/master&#34;&gt;master branch&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SecureAuthCorp/impacket/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8%20%7C%203.9-blue.svg?sanitize=true&#34; alt=&#34;Python versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;p&gt;In order to grab the latest stable release with &lt;code&gt;pip&lt;/code&gt; run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install impacket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This will make the Impacket library available to your Python code, but will not provide you with the example scripts.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Installing the library + example scripts&lt;/h3&gt; &#xA;&lt;p&gt;In order to install the library and the example scripts, download and extract the package, and execute the following command from the directory where the Impacket&#39;s release has been unpacked:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 -m pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This will install the library into the default Python modules path, where you can make use of the example scripts from the directory.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Make sure the example scripts you&#39;re using are consistent with the library version that&#39;s installed in your python environment. We recommend using &lt;a href=&#34;https://docs.python.org/3/library/venv.html&#34;&gt;virtual environments&lt;/a&gt; to make sure system-wide installations doesn&#39;t interfere with it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Docker Support&lt;/h3&gt; &#xA;&lt;p&gt;Build Impacket&#39;s image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ docker build -t &#34;impacket:latest&#34; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Impacket&#39;s image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ docker run -it --rm &#34;impacket:latest&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;The library leverages the &lt;a href=&#34;https://docs.pytest.org/&#34;&gt;pytest&lt;/a&gt; framework for organizing and marking test cases, &lt;a href=&#34;https://tox.readthedocs.io/&#34;&gt;tox&lt;/a&gt; to automate the process of running them across supported Python versions, and &lt;a href=&#34;https://coverage.readthedocs.io/&#34;&gt;coverage&lt;/a&gt; to obtain coverage statistics.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/TESTING.md&#34;&gt;comprehensive testing guide&lt;/a&gt; is available.&lt;/p&gt; &#xA;&lt;h1&gt;Licensing&lt;/h1&gt; &#xA;&lt;p&gt;This software is provided under a slightly modified version of the Apache Software License. See the accompanying &lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more information.&lt;/p&gt; &#xA;&lt;p&gt;SMBv1 and NetBIOS support based on Pysmb by Michael Teo.&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;The spirit of this Open Source initiative is to help security researchers, and the community, speed up research and educational activities related to the implementation of networking protocols and stacks.&lt;/p&gt; &#xA;&lt;p&gt;The information in this repository is for research and educational purposes and not meant to be used in production environments and/or as part of commercial products.&lt;/p&gt; &#xA;&lt;p&gt;If you desire to use this code or some part of it for your own uses, we recommend applying proper security development life cycle and secure coding practices, as well as generate and track the respective indicators of compromise according to your needs.&lt;/p&gt; &#xA;&lt;h1&gt;Contact Us&lt;/h1&gt; &#xA;&lt;p&gt;Whether you want to report a bug, send a patch, or give some suggestions on this package, drop us a few lines at &lt;a href=&#34;mailto:oss@secureauth.com&#34;&gt;oss@secureauth.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For security-related questions check our &lt;a href=&#34;https://raw.githubusercontent.com/SecureAuthCorp/impacket/master/SECURITY.md&#34;&gt;security policy&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CarperAI/trlx</title>
    <updated>2022-10-08T01:36:52Z</updated>
    <id>tag:github.com,2022-10-08:/CarperAI/trlx</id>
    <link href="https://github.com/CarperAI/trlx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A repo for distributed training of language models with Reinforcement Learning via Human Feedback (RLHF)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Transformer Reinforcement Learning X (&lt;code&gt;trlX&lt;/code&gt;)&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A repo for distributed training of language models with Reinforcement Learning via Human Feedback (RLHF)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Inspired by the popular &lt;code&gt;trl&lt;/code&gt; library, the &lt;code&gt;trlX&lt;/code&gt; repo allows you to fine-tune Huggingface supported language models up to 20B parameters via either reinforcement learning using a provided scoring function or reward-labeled dataset. We aim to support a range of both online and offline RL algorithms including Proximal Policy Optimization (PPO), Natural Language Policy Optimization (NLPO), Actor Critic (A2C), and Implicit Q Learning (ILQL).&lt;/p&gt; &#xA;&lt;p&gt;The library supports &lt;code&gt;gpt2&lt;/code&gt; and &lt;code&gt;gptj&lt;/code&gt; with plans to include &lt;code&gt;GPT-NeoX&lt;/code&gt;, &lt;code&gt;T5&lt;/code&gt; and more. PPO and ILQL algorithms are implemented. Disibtributed training has been implemented via HF Accelerate and tested up to two nodes, each with 8 gpus.&lt;/p&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;The training pipeline is broken into four pieces:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prompt pipeline: Handles loading of prompts/text used to prompt model for exploration in online methods&lt;/li&gt; &#xA; &lt;li&gt;Rollout pipeline: Handles loading and storage of reward labeled data used&lt;/li&gt; &#xA; &lt;li&gt;Orchestrator: Handles exploration/rollout collection of online methods. Pushes collected rollouts to the rollout pipeline.&lt;/li&gt; &#xA; &lt;li&gt;Model: Wraps the supplied base model (ex: &lt;code&gt;gpt2&lt;/code&gt;) and implements the desired training method loss (ex: PPO).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Adding a task for RLHF training depends on the desired training method and pre-existing data. If we are online and have no reward labeled data this is as simple as writing a new prompt pipeline, which supplies prompts for exploration, and a new reward function to be passed into the &lt;code&gt;PPOOrchestrator&lt;/code&gt; class.&lt;/p&gt; &#xA;&lt;h2&gt;Example: How to add a task&lt;/h2&gt; &#xA;&lt;p&gt;In the below we implement a sentiment learning task.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python setup.py develop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure accelerate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;accelerate config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Implement a prompt pipeline&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@register_datapipeline&#xA;class PPOPipeline(BasePipeline):&#xA;    def __init__(self, tokenizer, config, prompt_dataset_path = None):&#xA;        super().__init__()&#xA;&#xA;        ds = load_dataset(&#39;imdb&#39;, split=&#39;test&#39;)&#xA;        ds = ds.rename_columns({&#39;text&#39;: &#39;review&#39;, &#39;label&#39;: &#39;sentiment&#39;})&#xA;        ds = ds.filter(lambda x: len(x[&#34;review&#34;])&amp;lt;500, batched=False)&#xA;&#xA;        self.tokens = [tokenizer(text,&#xA;                                    truncation = True,&#xA;                                    padding = &#39;max_length&#39;,&#xA;                                    max_length = config.train.input_size,&#xA;                                    return_tensors = &#34;pt&#34;&#xA;                                 )[&#39;input_ids&#39;].long().flatten() for text in ds[&#39;review&#39;]]&#xA;        self.text = [tokenizer.decode(tokens.tolist()) for tokens in self.tokens]&#xA;&#xA;    def __getitem__(self, index : int) -&amp;gt; PromptElement:&#xA;        return PromptElement(self.text[index], self.tokens[index])&#xA;&#xA;    def __len__(self) -&amp;gt; int:&#xA;        return len(self.text)&#xA;&#xA;    def create_loader(self, batch_size : int, shuffle : bool, prep_fn : Callable = None, num_workers : int = 0) -&amp;gt; DataLoader:&#xA;        #TODO(dahoas): Decide how to support varying sizes of prompts without having to tokenize on fly&#xA;        def collate_fn(elems : Iterable[PromptElement]) -&amp;gt; PromptElement:&#xA;            return PromptBatch(&#xA;                [elem.text for elem in elems], torch.stack([elem.tokens for elem in elems])  # Assumes token tensors all same size&#xA;            )&#xA;&#xA;        return DataLoader(self, batch_size, shuffle, collate_fn = collate_fn, num_workers = num_workers)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Launch training&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from typing import List&#xA;&#xA;import torch&#xA;from transformers import pipeline&#xA;&#xA;import wandb&#xA;from trlx.data.configs import TRLConfig&#xA;from trlx.model.accelerate_ppo_model import AcceleratePPOModel&#xA;from trlx.orchestrator.ppo_orchestrator import PPOOrchestrator&#xA;from trlx.pipeline.ppo_pipeline import PPOPipeline&#xA;from trlx.utils.loading import get_model, get_orchestrator, get_pipeline&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    cfg = TRLConfig.load_yaml(&#34;configs/ppo_config.yml&#34;)&#xA;&#xA;    sentiment_pipe = pipeline(&#xA;        &#34;sentiment-analysis&#34;, &#34;lvwerra/distilbert-imdb&#34;, device=-1&#xA;    )&#xA;&#xA;    def reward_fn(samples: List[str]):&#xA;        sent_kwargs = {&#xA;            &#34;return_all_scores&#34;: True,&#xA;            &#34;function_to_apply&#34;: None,&#xA;            &#34;batch_size&#34;: cfg.method.chunk_size,&#xA;        }&#xA;        pipe_outputs = sentiment_pipe(samples, **sent_kwargs)&#xA;        scores = torch.tensor([output[1][&#34;score&#34;] for output in pipe_outputs])&#xA;        return scores&#xA;&#xA;    model: AcceleratePPOModel = get_model(cfg.model.model_type)(cfg)&#xA;    if model.accelerator.is_main_process:&#xA;        wandb.watch(model.model)&#xA;&#xA;    pipeline: PPOPipeline = get_pipeline(cfg.train.pipeline)(model.tokenizer, cfg)&#xA;    orch: PPOOrchestrator = get_orchestrator(cfg.train.orchestrator)(&#xA;        model, pipeline, reward_fn=reward_fn, chunk_size=cfg.method.chunk_size&#xA;    )&#xA;    orch.make_experience(cfg.method.num_rollouts)&#xA;    model.learn()&#xA;&#xA;    print(&#34;DONE!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And run &lt;code&gt;accelerate launch my_script.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;h3&gt;Proximal Policy Optimisation&lt;/h3&gt; &#xA;&lt;p&gt;The PPO implementation largely follows the structure introduced in the paper &lt;strong&gt;&#34;Fine-Tuning Language Models from Human Preferences&#34;&lt;/strong&gt; by D. Ziegler et al. [&lt;a href=&#34;https://arxiv.org/pdf/1909.08593.pdf&#34;&gt;paper&lt;/a&gt;, &lt;a href=&#34;https://github.com/openai/lm-human-preferences&#34;&gt;code&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;h3&gt;Language models&lt;/h3&gt; &#xA;&lt;p&gt;The language models utilize the &lt;code&gt;transformers&lt;/code&gt; library by 🤗 Hugging Face.&lt;/p&gt;</summary>
  </entry>
</feed>