<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-10T01:32:39Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WongKinYiu/yolov7</title>
    <updated>2022-07-10T01:32:39Z</updated>
    <id>tag:github.com,2022-07-10:/WongKinYiu/yolov7</id>
    <link href="https://github.com/WongKinYiu/yolov7" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of paper - YOLOv7: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Official YOLOv7&lt;/h1&gt; &#xA;&lt;p&gt;Implementation of paper - &lt;a href=&#34;https://arxiv.org/abs/2207.02696&#34;&gt;YOLOv7: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/WongKinYiu/yolov7/main/figure/performance.png&#34; height=&#34;480&#34;&gt; &#xA;&lt;h2&gt;Web Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrated into &lt;a href=&#34;https://huggingface.co/spaces/akhaliq/yolov7&#34;&gt;Huggingface Spaces 🤗&lt;/a&gt; using &lt;a href=&#34;https://github.com/gradio-app/gradio&#34;&gt;Gradio&lt;/a&gt;. Try out the Web Demo &lt;a href=&#34;https://huggingface.co/spaces/akhaliq/yolov7&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue&#34; alt=&#34;Hugging Face Spaces&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;MS COCO&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Test Size&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AP&lt;sup&gt;test&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AP&lt;sub&gt;50&lt;/sub&gt;&lt;sup&gt;test&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AP&lt;sub&gt;75&lt;/sub&gt;&lt;sup&gt;test&lt;/sup&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;batch 1 fps&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;batch 32 average time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt&#34;&gt;&lt;strong&gt;YOLOv7&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;640&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;51.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;69.7%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;55.9%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;161 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2.8 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7x.pt&#34;&gt;&lt;strong&gt;YOLOv7-X&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;640&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;53.1%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;71.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;57.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;114 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4.3 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-w6.pt&#34;&gt;&lt;strong&gt;YOLOv7-W6&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;54.9%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;72.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;60.1%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;84 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7.6 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6.pt&#34;&gt;&lt;strong&gt;YOLOv7-E6&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;56.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;73.5%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;61.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;12.3 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-d6.pt&#34;&gt;&lt;strong&gt;YOLOv7-D6&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;56.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;74.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;61.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15.0 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6e.pt&#34;&gt;&lt;strong&gt;YOLOv7-E6E&lt;/strong&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;56.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;74.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;62.1%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;36 &lt;em&gt;fps&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18.7 &lt;em&gt;ms&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Docker environment (recommended)&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Expand&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;# create the docker container, you can change the share memory size if you have more.&#xA;nvidia-docker run --name yolov7 -it -v your_coco_path/:/coco/ -v your_code_path/:/yolov7 --shm-size=64g nvcr.io/nvidia/pytorch:21.08-py3&#xA;&#xA;# apt install required packages&#xA;apt update&#xA;apt install -y zip htop screen libgl1-mesa-glx&#xA;&#xA;# pip install required packages&#xA;pip install seaborn thop&#xA;&#xA;# go to code folder&#xA;cd /yolov7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt&#34;&gt;&lt;code&gt;yolov7.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7x.pt&#34;&gt;&lt;code&gt;yolov7x.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-w6.pt&#34;&gt;&lt;code&gt;yolov7-w6.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6.pt&#34;&gt;&lt;code&gt;yolov7-e6.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-d6.pt&#34;&gt;&lt;code&gt;yolov7-d6.pt&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-e6e.pt&#34;&gt;&lt;code&gt;yolov7-e6e.pt&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python test.py --data data/coco.yaml --img 640 --batch 32 --conf 0.001 --iou 0.65 --device 0 --weights yolov7.pt --name yolov7_640_val&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will get the results:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.51206&#xA; Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.69730&#xA; Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.55521&#xA; Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.35247&#xA; Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.55937&#xA; Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.66693&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.38453&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.63765&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.68772&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.53766&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = 0.73549&#xA; Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.83868&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To measure accuracy, download &lt;a href=&#34;http://images.cocodataset.org/annotations/annotations_trainval2017.zip&#34;&gt;COCO-annotations for Pycocotools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;python train.py --workers 8 --device 0 --batch-size 32 --data data/coco.yaml --img 640 640 --cfg cfg/training/yolov7.yaml --weights &#39;&#39; --name yolov7 --hyp data/hyp.scratch.p5.yaml&#xA;&#xA;python train.py --workers 8 --device 0 --batch-size 32 --data data/coco.yaml --img 640 640 --cfg cfg/training/yolov7x.yaml --weights &#39;&#39; --name yolov7x --hyp data/hyp.scratch.p5.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m torch.distributed.launch --nproc_per_node 4 --master_port 9527 train.py --workers 8 --device 0,1,2,3 --sync-bn --batch-size 128 --data data/coco.yaml --img 640 640 --cfg cfg/training/yolov7.yaml --weights &#39;&#39; --name yolov7 --hyp data/hyp.scratch.p5.yaml&#xA;&#xA;python -m torch.distributed.launch --nproc_per_node 4 --master_port 9527 train.py --workers 8 --device 0,1,2,3 --sync-bn --batch-size 128 --data data/coco.yaml --img 640 640 --cfg cfg/training/yolov7x.yaml --weights &#39;&#39; --name yolov7x --hyp data/hyp.scratch.p5.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The training code and instruction of p6 models will release soon.&lt;/p&gt; &#xA;&lt;p&gt;Download MS COCO dataset images (&lt;a href=&#34;http://images.cocodataset.org/zips/train2017.zip&#34;&gt;train&lt;/a&gt;, &lt;a href=&#34;http://images.cocodataset.org/zips/val2017.zip&#34;&gt;val&lt;/a&gt;, &lt;a href=&#34;http://images.cocodataset.org/zips/test2017.zip&#34;&gt;test&lt;/a&gt;) and &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/coco2017labels-segments.zip&#34;&gt;labels&lt;/a&gt;. If you have previously used a different version of YOLO, we strongly recommend that you delete &lt;code&gt;train2017.cache&lt;/code&gt; and &lt;code&gt;val2017.cache&lt;/code&gt; files, and redownload &lt;a href=&#34;https://github.com/WongKinYiu/yolov7/releases/download/v0.1/coco2017labels-segments.zip&#34;&gt;labels&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Re-parameterization&lt;/h2&gt; &#xA;&lt;p&gt;The re-parameterization code and instruction will release soon.&lt;/p&gt; &#xA;&lt;h2&gt;Inference&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;python detect.py --weights yolov7.pt --conf 0.25 --img-size 640 --source inference/images/horses.jpg&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{wang2022yolov7,&#xA;  title={{YOLOv7}: Trainable bag-of-freebies sets new state-of-the-art for real-time object detectors},&#xA;  author={Wang, Chien-Yao and Bochkovskiy, Alexey and Liao, Hong-Yuan Mark},&#xA;  journal={arXiv preprint arXiv:2207.02696},&#xA;  year={2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;Expand&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/AlexeyAB/darknet&#34;&gt;https://github.com/AlexeyAB/darknet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/WongKinYiu/yolor&#34;&gt;https://github.com/WongKinYiu/yolor&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/WongKinYiu/PyTorch_YOLOv4&#34;&gt;https://github.com/WongKinYiu/PyTorch_YOLOv4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/WongKinYiu/ScaledYOLOv4&#34;&gt;https://github.com/WongKinYiu/ScaledYOLOv4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Megvii-BaseDetection/YOLOX&#34;&gt;https://github.com/Megvii-BaseDetection/YOLOX&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ultralytics/yolov3&#34;&gt;https://github.com/ultralytics/yolov3&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ultralytics/yolov5&#34;&gt;https://github.com/ultralytics/yolov5&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/DingXiaoH/RepVGG&#34;&gt;https://github.com/DingXiaoH/RepVGG&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/JUGGHM/OREPA_CVPR2022&#34;&gt;https://github.com/JUGGHM/OREPA_CVPR2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>facundoolano/software-papers</title>
    <updated>2022-07-10T01:32:39Z</updated>
    <id>tag:github.com,2022-07-10:/facundoolano/software-papers</id>
    <link href="https://github.com/facundoolano/software-papers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📚 A curated list of papers for Software Engineers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Papers for Software Engineers &lt;a href=&#34;https://github.com/facundoolano/software-papers/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/facundoolano/software-papers/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;workflow&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A curated list of papers that may be of interest to Software Engineering students or professionals.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Computing Machinery and Intelligence&lt;/strong&gt;. &lt;a href=&#34;https://www.csee.umbc.edu/courses/471/papers/turing.pdf&#34;&gt;Turing (1950)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Some Moral and Technical Consequences of Automation. &lt;a href=&#34;https://nissenbaum.tech.cornell.edu/papers/Wiener.pdf&#34;&gt;Wiener (1960)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;ELIZA—a computer program for the study of natural language communication between man and machine. &lt;a href=&#34;http://web.stanford.edu/class/cs124/p36-weizenabaum.pdf&#34;&gt;Weizenbaum (1966)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Education of a Computer&lt;/strong&gt;. &lt;a href=&#34;https://people.cs.umass.edu/~emery/classes/cmpsci691st/readings/PL/p243-hopper.pdf&#34;&gt;Hopper (1952)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recursive Programming. &lt;a href=&#34;https://www.ics.uci.edu/~jajones/INF102-S18/readings/07_dijkstra.pdf&#34;&gt;Dijkstra (1960)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Goto Statement Considered Harmful. &lt;a href=&#34;https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Program development by stepwise refinement. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/wirth-refinement.html&#34;&gt;Wirth (1971)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Method for the Construction of Minimum-Redundancy Codes&lt;/strong&gt;. &lt;a href=&#34;https://www.ic.tu-berlin.de/fileadmin/fg121/Source-Coding_WS12/selected-readings/10_04051119.pdf&#34;&gt;Huffman (1952)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Universal Algorithm for Sequential Data Compression. &lt;a href=&#34;https://courses.cs.duke.edu/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf&#34;&gt;Ziv, Lempel (1977)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem&lt;/strong&gt;. &lt;a href=&#34;http://5010.mathed.usu.edu/Fall2018/THigham/Krukskal.pdf&#34;&gt;Kruskal (1956)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Note on Two Problems in Connexion with Graphs. &lt;a href=&#34;http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf&#34;&gt;Dijkstra (1959)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Reducibility among Combinatorial Problems. &lt;a href=&#34;https://cgi.di.uoa.gr/~sgk/teaching/grad/handouts/karp.pdf&#34;&gt;Karp (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Big Omicron and big Omega and big Theta. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1008328.1008329&#34;&gt;Knuth (1976)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Amortized Computational Complexity. &lt;a href=&#34;http://www.cs.duke.edu/courses/fall11/cps234/reading/Tarjan85_AmortizedComplexity.pdf&#34;&gt;Tarjan (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recursive Functions of Symbolic Expressions and Their Computation by Machine&lt;/strong&gt;. &lt;a href=&#34;http://jmc.stanford.edu/articles/recursive/recursive.pdf&#34;&gt;McCarthy (1960)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Art of the Interpreter. &lt;a href=&#34;http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/ai/aim/AIM-453.pdf&#34;&gt;Steele, Sussman (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cramming More Components onto Integrated Circuits&lt;/strong&gt;. &lt;a href=&#34;https://newsroom.intel.com/wp-content/uploads/sites/11/2018/05/moores-law-electronics.pdf&#34;&gt;Moore (1965)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Validity of the Single Processor Approach to Achieving Large-Scale Computing Capabilities. &lt;a href=&#34;https://www3.cs.stonybrook.edu/~rezaul/Spring-2012/CSE613/reading/Amdahl-1967.pdf&#34;&gt;Amdahl (1967)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A Simple Capacity Model of Massively Parallel Transaction Systems. &lt;a href=&#34;http://www.perfdynamics.com/Papers/njgCMG93.pdf&#34;&gt;Gunther (1993)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Relational Model of Data for Large Shared Data Banks&lt;/strong&gt;. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf&#34;&gt;Codd (1970)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Granularity of Locks and Degrees of Consistency in a Shared Data Base. &lt;a href=&#34;https://www.alexdelis.eu/M149/gray.pdf&#34;&gt;Gray et al (1975)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;System R: Relational Approach to Database Management. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/cis650/papers/System-R.PDF&#34;&gt;Astrahan et al. (1976)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Access Path Selection in a Relational Database Management System. &lt;a href=&#34;https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf&#34;&gt;Selinger et al (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Transaction Concept: Virtues and Limitations. &lt;a href=&#34;https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf&#34;&gt;Gray (1981)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The design of POSTGRES. &lt;a href=&#34;https://dsf.berkeley.edu/papers/ERL-M85-95.pdf&#34;&gt;Stonebraker, Rowe (1986)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On the Criteria To Be Used in Decomposing Systems into Modules&lt;/strong&gt;. &lt;a href=&#34;https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf&#34;&gt;Parnas (1971)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Information Distribution Aspects of Design Methodology. &lt;a href=&#34;https://cseweb.ucsd.edu/~wgg/CSE218/Parnas-IFIP71-information-distribution.PDF&#34;&gt;Parnas (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Designing Software for Ease of Extension and Contraction. &lt;a href=&#34;https://courses.cs.washington.edu/courses/cse503/08wi/parnas-1979.pdf&#34;&gt;Parnas (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Modular Structure of Complex Systems. &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.40.3812&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Parnas, Clements, Weiss (1984)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Software Aging. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/SoftwareAging.pdf&#34;&gt;Parnas (1994)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The UNIX Time- Sharing System&lt;/strong&gt;. &lt;a href=&#34;https://dsf.berkeley.edu/cs262/unix.pdf&#34;&gt;Ritchie, Thompson (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An Experimental Time-Sharing System. &lt;a href=&#34;http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/&#34;&gt;Corbató, Merwin Daggett, Daley (1962)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Structure of the &#34;THE&#34;-Multiprogramming System. &lt;a href=&#34;https://www.eecs.ucf.edu/~eurip/papers/dijkstra-the68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Reflections on Trusting Trust. &lt;a href=&#34;https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf&#34;&gt;Thompson (1984)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Design and Implementation of a Log-Structured File System. &lt;a href=&#34;https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf&#34;&gt;Rosenblum, Ousterhout (1991)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A Protocol for Packet Network Intercommunication&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf&#34;&gt;Cerf, Kahn (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ethernet: Distributed packet switching for local computer networks. &lt;a href=&#34;https://ethernethistory.typepad.com/papers/EthernetPaper.pdf&#34;&gt;Metcalfe, Boggs (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;An algorithm for distributed computation of a Spanning Tree in an Extended LAN. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/319056.319004&#34;&gt;Perlman (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Programming with Abstract Data Types&lt;/strong&gt;. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/942572.807045&#34;&gt;Liskov, Zilles (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Design Methodology for Reliable Software Systems. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1479992.1480018&#34;&gt;Liskov (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The paradigms of programming. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1283920.1283934&#34;&gt;Floyd (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;On understanding types, data abstraction, and polymorphism. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/6041.6042&#34;&gt;Cardelli, Wegner (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;SELF: The Power of Simplicity. &lt;a href=&#34;https://people.eecs.berkeley.edu/~fateman/264/papers/selfpower.ps&#34;&gt;Ungar, Smith (1991)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Computer Programming as an Art&lt;/strong&gt;. &lt;a href=&#34;http://www.cs.bilkent.edu.tr/~canf/knuth1974.pdf&#34;&gt;Knuth (1974)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An Axiomatic Basis for Computer Programming. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/Hoare-CACM-69.pdf&#34;&gt;Hoare (1969)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Humble Programmer. &lt;a href=&#34;http://rkka21.ru/docs/turing-award/ed1972e.pdf&#34;&gt;Dijkstra (1972)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Emperor’s Old Clothes. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/358549.358561&#34;&gt;Hoare (1981)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Literate Programming. &lt;a href=&#34;http://www.literateprogramming.com/knuthweb.pdf&#34;&gt;Knuth (1984)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Programming as Theory Building. &lt;a href=&#34;https://pages.cs.wisc.edu/~remzi/Naur.pdf&#34;&gt;Naur (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Software Engineering: An Unconsummated Marriage. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/267896.267897&#34;&gt;Parnas (1997)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Mythical Man Month&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/MythicalManMonth.pdf&#34;&gt;Brooks (1975)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;How do committees invent?. &lt;a href=&#34;https://www.melconway.com/Home/pdf/committees.pdf&#34;&gt;Conway (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Managing the Development of Large Software Systems. &lt;a href=&#34;https://www.praxisframework.org/files/royce1970.pdf&#34;&gt;Royce (1970)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Lisp: Good news, bad news, how to win big. &lt;a href=&#34;https://www.dreamsongs.com/Files/LispGoodNewsBadNews.pdf&#34;&gt;Gabriel (1991)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Cathedral and the Bazaar. &lt;a href=&#34;http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/cathedral-bazaar.ps&#34;&gt;Raymond (1998)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;New Directions in Cryptography&lt;/strong&gt;. &lt;a href=&#34;https://ee.stanford.edu/~hellman/publications/24.pdf&#34;&gt;Diffie, Hellman (1976)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. &lt;a href=&#34;https://people.csail.mit.edu/rivest/Rsapaper.pdf&#34;&gt;Rivest, Shamir, Adleman (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;How To Share A Secret. &lt;a href=&#34;https://web.mit.edu/6.857/OldStuff/Fall03/ref/Shamir-HowToShareASecret.pdf&#34;&gt;Shamir (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;A Certified Digital Signature. &lt;a href=&#34;https://link.springer.com/content/pdf/10.1007/0-387-34805-0_21.pdf&#34;&gt;Merkle (1979)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;K-Anonymity: A Model For Protecting Privacy. &lt;a href=&#34;https://epic.org/wp-content/uploads/privacy/reidentification/Sweeney_Article.pdf&#34;&gt;Sweeney (2002)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Communicating sequential processes&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf&#34;&gt;Hoare (1976)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Solution Of a Problem in Concurrent Program Control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/365559.365617&#34;&gt;Dijkstra (1965)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Monitors: An operating system structuring concept. &lt;a href=&#34;https://www.cs.ubc.ca/~norm/508/2009W1/summaries/monitors.pdf&#34;&gt;Hoare (1974)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;On the Duality of Operating System Structures. &lt;a href=&#34;https://courses.cs.vt.edu/~cs5204/fall07-gback/papers/p3-lauer.pdf&#34;&gt;Lauer, Needham (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Software Transactional Memory. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou.pdf&#34;&gt;Shavit, Touitou (1997)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Time, Clocks, and the Ordering of Events in a Distributed System&lt;/strong&gt;. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;Lamport (1978)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Self-stabilizing systems in spite of distributed control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/361179.361202&#34;&gt;Dijkstra (1974)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Byzantine Generals Problem. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/byz.pdf&#34;&gt;Lamport, Shostak, Pease (1982)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Impossibility of Distributed Consensus With One Faulty Process. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf&#34;&gt;Fisher, Lynch, Patterson (1985)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;How to Build a Highly Available System Using Consensus. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/1996/10/Acrobat-58-Copy.pdf&#34;&gt;Lampson (1996)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Part-Time Parliament. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf&#34;&gt;Lamport (1998)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Harvest, Yield, and Scalable Tolerant Systems. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/FOX_Brewer_99-Harvest_Yield_and_Scalable_Tolerant_Systems.pdf&#34;&gt;Fox, Brewer (1999)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Paxos made simple. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/paxos-simple.pdf&#34;&gt;Lamport (2001)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;CAP Twelve Years Later: How the &#34;Rules&#34; Have Changed. &lt;a href=&#34;https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf&#34;&gt;Brewer (2012)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;In Search of an Understandable Consensus Algorithm. &lt;a href=&#34;https://raft.github.io/raft.pdf&#34;&gt;Ongaro, Ousterhout (2014)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Consistency, Availability, and Convergence. &lt;a href=&#34;https://www.cs.cornell.edu/lorenzo/papers/cac-tr.pdf&#34;&gt;Mahajan, Alvisi, Dahlin (2014)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The Ubiquitous B-Tree&lt;/strong&gt;. &lt;a href=&#34;http://carlosproal.com/ir/papers/p121-comer.pdf&#34;&gt;Comer (1979)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scatter storage techniques. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/362851.362882&#34;&gt;Morris (1968)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Space/Time Trade-offs in Hash Coding with Allowable Errors. &lt;a href=&#34;https://cs.pwr.edu.pl/cichon/2021_22_a/BigData/Bloom.pdf&#34;&gt;Bloom (1970)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Ordered hash tables. &lt;a href=&#34;https://academic.oup.com/comjnl/article-pdf/17/2/135/1405739/170135.pdf&#34;&gt;Amble, Knuth (1974)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Making data structures persistent. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/12130.12142&#34;&gt;Driscoll et al (1986)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End-To-End Arguments in System Design&lt;/strong&gt;. &lt;a href=&#34;https://groups.csail.mit.edu/ana/Publications/PubPDFs/End-to-End%20Arguments%20in%20System%20Design.pdf&#34;&gt;Saltzer, Reed, Clark (1984)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A Note on Distributed Computing. &lt;a href=&#34;https://scholar.harvard.edu/files/waldo/files/waldo-94.pdf&#34;&gt;Waldo et al (1994)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Network is Reliable. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2655736&#34;&gt;Bailis, Kingsbury (2014)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No Silver Bullet: Essence and Accidents of Software Engineering&lt;/strong&gt;. &lt;a href=&#34;http://www.cs.unc.edu/techreports/86-020.pdf&#34;&gt;Brooks (1987)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hints for Computer System Design. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/hints-for-computer-system-design/&#34;&gt;Lampson (1983)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Out of the Tar Pit. &lt;a href=&#34;http://curtclifton.net/papers/MoseleyMarks06a.pdf&#34;&gt;Moseley, Marks (2006)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Why Functional Programming Matters&lt;/strong&gt;. &lt;a href=&#34;https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf&#34;&gt;Hughes (1990)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can Programming Be Liberated from the von Neumann Style?. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/359576.359579&#34;&gt;Backus (1978)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The Semantic Elegance of Applicative Languages. &lt;a href=&#34;http://nsl.com/misc/sasl/paraffins-turner.pdf&#34;&gt;Turner (1981)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Church&#39;s Thesis and Functional Programming. &lt;a href=&#34;https://kar.kent.ac.uk/88944/1/ctfp.pdf_nocoversheet&#34;&gt;Turner (2006)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;The anatomy of a large-scale hypertextual Web search engine&lt;/strong&gt;. &lt;a href=&#34;https://snap.stanford.edu/class/cs224w-readings/Brin98Anatomy.pdf&#34;&gt;Brin, Page (1998)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;As We May Think. &lt;a href=&#34;https://web.mit.edu/STS.035/www/PDFs/think.pdf&#34;&gt;Bush (1945)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;The PageRank Citation Ranking: Bringing Order to the Web. &lt;a href=&#34;http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf&#34;&gt;Page, Brin, Motwani (1999)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamo, Amazon’s Highly Available Key-value store&lt;/strong&gt;. &lt;a href=&#34;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&#34;&gt;DeCandia et al (2007)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Google File System. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&#34;&gt;Ghemawat, Gobioff, Leung (2003)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;MapReduce: Simplified Data Processing on Large Clusters. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf&#34;&gt;Dean, Ghemawat (2004)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Bigtable: A Distributed Storage System for Structured Data. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&#34;&gt;Chang et al (2006)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;ZooKeeper: wait-free coordination for internet scale systems. &lt;a href=&#34;https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf&#34;&gt;Hunt et al (2010)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Kafka: a Distributed Messaging System for Log Processing. &lt;a href=&#34;http://notes.stephenholiday.com/Kafka.pdf&#34;&gt;Kreps, Narkhede, Rao (2011)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases. &lt;a href=&#34;https://web.stanford.edu/class/cs245/readings/aurora.pdf&#34;&gt;Verbitski et al (2017)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;On Designing and Deploying Internet Scale Services&lt;/strong&gt;. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf&#34;&gt;Hamilton (2007)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ironies of automation. &lt;a href=&#34;https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf&#34;&gt;Bainbridge (1983)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;How Complex Systems Fail. &lt;a href=&#34;https://www.adaptivecapacitylabs.com/HowComplexSystemsFail.pdf&#34;&gt;Cook (2000)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies. &lt;a href=&#34;http://www2.eecs.berkeley.edu/Pubs/TechRpts/2002/CSD-02-1175.pdf&#34;&gt;Patterson et al (2002)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Crash-Only Software. &lt;a href=&#34;https://research.cs.wisc.edu/areas/os/ReadingGroup/os-old/Papers/HotOSIX/Candea-CrashOnlySoftware.pdf&#34;&gt;Candea, Fox (2003)&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Nines are Not Enough: Meaningful Metrics for Clouds. &lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/f647d24ee7eeb338acebf1eb73a5d11b357620b0.pdf&#34;&gt;Mogul, Wilkes (2019)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bitcoin, A peer-to-peer electronic cash system&lt;/strong&gt;. &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;Nakomoto (2008)&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform. &lt;a href=&#34;https://ethereum.org/669c9e2e2027310b6b3cdce6e1c52962/Ethereum_Whitepaper_-_Buterin_2014.pdf&#34;&gt;Buterin (2014)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thinking Methodically about Performance&lt;/strong&gt;. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2413037&#34;&gt;Gregg (2012)&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show full list in chronological order &lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;As We May Think. &lt;a href=&#34;https://web.mit.edu/STS.035/www/PDFs/think.pdf&#34;&gt;Bush (1945)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Computing Machinery and Intelligence. &lt;a href=&#34;https://www.csee.umbc.edu/courses/471/papers/turing.pdf&#34;&gt;Turing (1950)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Education of a Computer. &lt;a href=&#34;https://people.cs.umass.edu/~emery/classes/cmpsci691st/readings/PL/p243-hopper.pdf&#34;&gt;Hopper (1952)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Method for the Construction of Minimum-Redundancy Codes. &lt;a href=&#34;https://www.ic.tu-berlin.de/fileadmin/fg121/Source-Coding_WS12/selected-readings/10_04051119.pdf&#34;&gt;Huffman (1952)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem. &lt;a href=&#34;http://5010.mathed.usu.edu/Fall2018/THigham/Krukskal.pdf&#34;&gt;Kruskal (1956)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Note on Two Problems in Connexion with Graphs. &lt;a href=&#34;http://www-m3.ma.tum.de/foswiki/pub/MN0506/WebHome/dijkstra.pdf&#34;&gt;Dijkstra (1959)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Recursive Functions of Symbolic Expressions and Their Computation by Machine. &lt;a href=&#34;http://jmc.stanford.edu/articles/recursive/recursive.pdf&#34;&gt;McCarthy (1960)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Some Moral and Technical Consequences of Automation. &lt;a href=&#34;https://nissenbaum.tech.cornell.edu/papers/Wiener.pdf&#34;&gt;Wiener (1960)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Recursive Programming. &lt;a href=&#34;https://www.ics.uci.edu/~jajones/INF102-S18/readings/07_dijkstra.pdf&#34;&gt;Dijkstra (1960)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;An Experimental Time-Sharing System. &lt;a href=&#34;http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/&#34;&gt;Corbató, Merwin Daggett, Daley (1962)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Cramming More Components onto Integrated Circuits. &lt;a href=&#34;https://newsroom.intel.com/wp-content/uploads/sites/11/2018/05/moores-law-electronics.pdf&#34;&gt;Moore (1965)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Solution Of a Problem in Concurrent Program Control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/365559.365617&#34;&gt;Dijkstra (1965)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;ELIZA—a computer program for the study of natural language communication between man and machine. &lt;a href=&#34;http://web.stanford.edu/class/cs124/p36-weizenabaum.pdf&#34;&gt;Weizenbaum (1966)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Validity of the Single Processor Approach to Achieving Large-Scale Computing Capabilities. &lt;a href=&#34;https://www3.cs.stonybrook.edu/~rezaul/Spring-2012/CSE613/reading/Amdahl-1967.pdf&#34;&gt;Amdahl (1967)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Goto Statement Considered Harmful. &lt;a href=&#34;https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Structure of the &#34;THE&#34;-Multiprogramming System. &lt;a href=&#34;https://www.eecs.ucf.edu/~eurip/papers/dijkstra-the68.pdf&#34;&gt;Dijkstra (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How do committees invent?. &lt;a href=&#34;https://www.melconway.com/Home/pdf/committees.pdf&#34;&gt;Conway (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Scatter storage techniques. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/362851.362882&#34;&gt;Morris (1968)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;An Axiomatic Basis for Computer Programming. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/Hoare-CACM-69.pdf&#34;&gt;Hoare (1969)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Relational Model of Data for Large Shared Data Banks. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf&#34;&gt;Codd (1970)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Managing the Development of Large Software Systems. &lt;a href=&#34;https://www.praxisframework.org/files/royce1970.pdf&#34;&gt;Royce (1970)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Space/Time Trade-offs in Hash Coding with Allowable Errors. &lt;a href=&#34;https://cs.pwr.edu.pl/cichon/2021_22_a/BigData/Bloom.pdf&#34;&gt;Bloom (1970)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On the Criteria To Be Used in Decomposing Systems into Modules. &lt;a href=&#34;https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf&#34;&gt;Parnas (1971)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Program development by stepwise refinement. &lt;a href=&#34;http://sunnyday.mit.edu/16.355/wirth-refinement.html&#34;&gt;Wirth (1971)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Reducibility among Combinatorial Problems. &lt;a href=&#34;https://cgi.di.uoa.gr/~sgk/teaching/grad/handouts/karp.pdf&#34;&gt;Karp (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Information Distribution Aspects of Design Methodology. &lt;a href=&#34;https://cseweb.ucsd.edu/~wgg/CSE218/Parnas-IFIP71-information-distribution.PDF&#34;&gt;Parnas (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Design Methodology for Reliable Software Systems. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1479992.1480018&#34;&gt;Liskov (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Humble Programmer. &lt;a href=&#34;http://rkka21.ru/docs/turing-award/ed1972e.pdf&#34;&gt;Dijkstra (1972)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The UNIX Time- Sharing System. &lt;a href=&#34;https://dsf.berkeley.edu/cs262/unix.pdf&#34;&gt;Ritchie, Thompson (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Protocol for Packet Network Intercommunication. &lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf&#34;&gt;Cerf, Kahn (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Programming with Abstract Data Types. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/942572.807045&#34;&gt;Liskov, Zilles (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Computer Programming as an Art. &lt;a href=&#34;http://www.cs.bilkent.edu.tr/~canf/knuth1974.pdf&#34;&gt;Knuth (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Monitors: An operating system structuring concept. &lt;a href=&#34;https://www.cs.ubc.ca/~norm/508/2009W1/summaries/monitors.pdf&#34;&gt;Hoare (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Self-stabilizing systems in spite of distributed control. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/361179.361202&#34;&gt;Dijkstra (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ordered hash tables. &lt;a href=&#34;https://academic.oup.com/comjnl/article-pdf/17/2/135/1405739/170135.pdf&#34;&gt;Amble, Knuth (1974)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Mythical Man Month. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/MythicalManMonth.pdf&#34;&gt;Brooks (1975)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Granularity of Locks and Degrees of Consistency in a Shared Data Base. &lt;a href=&#34;https://www.alexdelis.eu/M149/gray.pdf&#34;&gt;Gray et al (1975)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;New Directions in Cryptography. &lt;a href=&#34;https://ee.stanford.edu/~hellman/publications/24.pdf&#34;&gt;Diffie, Hellman (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Communicating sequential processes. &lt;a href=&#34;https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf&#34;&gt;Hoare (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Big Omicron and big Omega and big Theta. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1008328.1008329&#34;&gt;Knuth (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;System R: Relational Approach to Database Management. &lt;a href=&#34;https://www.seas.upenn.edu/~zives/cis650/papers/System-R.PDF&#34;&gt;Astrahan et al. (1976)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Universal Algorithm for Sequential Data Compression. &lt;a href=&#34;https://courses.cs.duke.edu/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf&#34;&gt;Ziv, Lempel (1977)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Time, Clocks, and the Ordering of Events in a Distributed System. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/time-clocks.pdf&#34;&gt;Lamport (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Art of the Interpreter. &lt;a href=&#34;http://bitsavers.informatik.uni-stuttgart.de/pdf/mit/ai/aim/AIM-453.pdf&#34;&gt;Steele, Sussman (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ethernet: Distributed packet switching for local computer networks. &lt;a href=&#34;https://ethernethistory.typepad.com/papers/EthernetPaper.pdf&#34;&gt;Metcalfe, Boggs (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. &lt;a href=&#34;https://people.csail.mit.edu/rivest/Rsapaper.pdf&#34;&gt;Rivest, Shamir, Adleman (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On the Duality of Operating System Structures. &lt;a href=&#34;https://courses.cs.vt.edu/~cs5204/fall07-gback/papers/p3-lauer.pdf&#34;&gt;Lauer, Needham (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Can Programming Be Liberated from the von Neumann Style?. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/359576.359579&#34;&gt;Backus (1978)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Ubiquitous B-Tree. &lt;a href=&#34;http://carlosproal.com/ir/papers/p121-comer.pdf&#34;&gt;Comer (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Access Path Selection in a Relational Database Management System. &lt;a href=&#34;https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf&#34;&gt;Selinger et al (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Designing Software for Ease of Extension and Contraction. &lt;a href=&#34;https://courses.cs.washington.edu/courses/cse503/08wi/parnas-1979.pdf&#34;&gt;Parnas (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The paradigms of programming. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/1283920.1283934&#34;&gt;Floyd (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How To Share A Secret. &lt;a href=&#34;https://web.mit.edu/6.857/OldStuff/Fall03/ref/Shamir-HowToShareASecret.pdf&#34;&gt;Shamir (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Certified Digital Signature. &lt;a href=&#34;https://link.springer.com/content/pdf/10.1007/0-387-34805-0_21.pdf&#34;&gt;Merkle (1979)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Transaction Concept: Virtues and Limitations. &lt;a href=&#34;https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf&#34;&gt;Gray (1981)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Emperor’s Old Clothes. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/358549.358561&#34;&gt;Hoare (1981)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Semantic Elegance of Applicative Languages. &lt;a href=&#34;http://nsl.com/misc/sasl/paraffins-turner.pdf&#34;&gt;Turner (1981)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Byzantine Generals Problem. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/byz.pdf&#34;&gt;Lamport, Shostak, Pease (1982)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Hints for Computer System Design. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/hints-for-computer-system-design/&#34;&gt;Lampson (1983)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ironies of automation. &lt;a href=&#34;https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf&#34;&gt;Bainbridge (1983)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;End-To-End Arguments in System Design. &lt;a href=&#34;https://groups.csail.mit.edu/ana/Publications/PubPDFs/End-to-End%20Arguments%20in%20System%20Design.pdf&#34;&gt;Saltzer, Reed, Clark (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Modular Structure of Complex Systems. &lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.40.3812&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Parnas, Clements, Weiss (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Reflections on Trusting Trust. &lt;a href=&#34;https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf&#34;&gt;Thompson (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Literate Programming. &lt;a href=&#34;http://www.literateprogramming.com/knuthweb.pdf&#34;&gt;Knuth (1984)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Amortized Computational Complexity. &lt;a href=&#34;http://www.cs.duke.edu/courses/fall11/cps234/reading/Tarjan85_AmortizedComplexity.pdf&#34;&gt;Tarjan (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;An algorithm for distributed computation of a Spanning Tree in an Extended LAN. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/319056.319004&#34;&gt;Perlman (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On understanding types, data abstraction, and polymorphism. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/6041.6042&#34;&gt;Cardelli, Wegner (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Programming as Theory Building. &lt;a href=&#34;https://pages.cs.wisc.edu/~remzi/Naur.pdf&#34;&gt;Naur (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Impossibility of Distributed Consensus With One Faulty Process. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf&#34;&gt;Fisher, Lynch, Patterson (1985)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The design of POSTGRES. &lt;a href=&#34;https://dsf.berkeley.edu/papers/ERL-M85-95.pdf&#34;&gt;Stonebraker, Rowe (1986)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Making data structures persistent. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/12130.12142&#34;&gt;Driscoll et al (1986)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;No Silver Bullet: Essence and Accidents of Software Engineering. &lt;a href=&#34;http://www.cs.unc.edu/techreports/86-020.pdf&#34;&gt;Brooks (1987)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Why Functional Programming Matters. &lt;a href=&#34;https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf&#34;&gt;Hughes (1990)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Design and Implementation of a Log-Structured File System. &lt;a href=&#34;https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf&#34;&gt;Rosenblum, Ousterhout (1991)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;SELF: The Power of Simplicity. &lt;a href=&#34;https://people.eecs.berkeley.edu/~fateman/264/papers/selfpower.ps&#34;&gt;Ungar, Smith (1991)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Lisp: Good news, bad news, how to win big. &lt;a href=&#34;https://www.dreamsongs.com/Files/LispGoodNewsBadNews.pdf&#34;&gt;Gabriel (1991)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Simple Capacity Model of Massively Parallel Transaction Systems. &lt;a href=&#34;http://www.perfdynamics.com/Papers/njgCMG93.pdf&#34;&gt;Gunther (1993)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Software Aging. &lt;a href=&#34;https://www.cs.drexel.edu/~yfcai/CS451/RequiredReadings/SoftwareAging.pdf&#34;&gt;Parnas (1994)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;A Note on Distributed Computing. &lt;a href=&#34;https://scholar.harvard.edu/files/waldo/files/waldo-94.pdf&#34;&gt;Waldo et al (1994)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How to Build a Highly Available System Using Consensus. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/1996/10/Acrobat-58-Copy.pdf&#34;&gt;Lampson (1996)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Software Engineering: An Unconsummated Marriage. &lt;a href=&#34;https://dl.acm.org/doi/pdf/10.1145/267896.267897&#34;&gt;Parnas (1997)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Software Transactional Memory. &lt;a href=&#34;https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou.pdf&#34;&gt;Shavit, Touitou (1997)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The anatomy of a large-scale hypertextual Web search engine. &lt;a href=&#34;https://snap.stanford.edu/class/cs224w-readings/Brin98Anatomy.pdf&#34;&gt;Brin, Page (1998)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Cathedral and the Bazaar. &lt;a href=&#34;http://www.catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/cathedral-bazaar.ps&#34;&gt;Raymond (1998)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Part-Time Parliament. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf&#34;&gt;Lamport (1998)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Harvest, Yield, and Scalable Tolerant Systems. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/FOX_Brewer_99-Harvest_Yield_and_Scalable_Tolerant_Systems.pdf&#34;&gt;Fox, Brewer (1999)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The PageRank Citation Ranking: Bringing Order to the Web. &lt;a href=&#34;http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf&#34;&gt;Page, Brin, Motwani (1999)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How Complex Systems Fail. &lt;a href=&#34;https://www.adaptivecapacitylabs.com/HowComplexSystemsFail.pdf&#34;&gt;Cook (2000)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Paxos made simple. &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/paxos-simple.pdf&#34;&gt;Lamport (2001)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;K-Anonymity: A Model For Protecting Privacy. &lt;a href=&#34;https://epic.org/wp-content/uploads/privacy/reidentification/Sweeney_Article.pdf&#34;&gt;Sweeney (2002)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies. &lt;a href=&#34;http://www2.eecs.berkeley.edu/Pubs/TechRpts/2002/CSD-02-1175.pdf&#34;&gt;Patterson et al (2002)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Google File System. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&#34;&gt;Ghemawat, Gobioff, Leung (2003)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Crash-Only Software. &lt;a href=&#34;https://research.cs.wisc.edu/areas/os/ReadingGroup/os-old/Papers/HotOSIX/Candea-CrashOnlySoftware.pdf&#34;&gt;Candea, Fox (2003)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;MapReduce: Simplified Data Processing on Large Clusters. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf&#34;&gt;Dean, Ghemawat (2004)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Out of the Tar Pit. &lt;a href=&#34;http://curtclifton.net/papers/MoseleyMarks06a.pdf&#34;&gt;Moseley, Marks (2006)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Church&#39;s Thesis and Functional Programming. &lt;a href=&#34;https://kar.kent.ac.uk/88944/1/ctfp.pdf_nocoversheet&#34;&gt;Turner (2006)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Bigtable: A Distributed Storage System for Structured Data. &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&#34;&gt;Chang et al (2006)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dynamo, Amazon’s Highly Available Key-value store. &lt;a href=&#34;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&#34;&gt;DeCandia et al (2007)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;On Designing and Deploying Internet Scale Services. &lt;a href=&#34;https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf&#34;&gt;Hamilton (2007)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Bitcoin, A peer-to-peer electronic cash system. &lt;a href=&#34;https://bitcoin.org/bitcoin.pdf&#34;&gt;Nakomoto (2008)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;ZooKeeper: wait-free coordination for internet scale systems. &lt;a href=&#34;https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf&#34;&gt;Hunt et al (2010)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Kafka: a Distributed Messaging System for Log Processing. &lt;a href=&#34;http://notes.stephenholiday.com/Kafka.pdf&#34;&gt;Kreps, Narkhede, Rao (2011)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Thinking Methodically about Performance. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2413037&#34;&gt;Gregg (2012)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;CAP Twelve Years Later: How the &#34;Rules&#34; Have Changed. &lt;a href=&#34;https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf&#34;&gt;Brewer (2012)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;In Search of an Understandable Consensus Algorithm. &lt;a href=&#34;https://raft.github.io/raft.pdf&#34;&gt;Ongaro, Ousterhout (2014)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Consistency, Availability, and Convergence. &lt;a href=&#34;https://www.cs.cornell.edu/lorenzo/papers/cac-tr.pdf&#34;&gt;Mahajan, Alvisi, Dahlin (2014)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;The Network is Reliable. &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2655736&#34;&gt;Bailis, Kingsbury (2014)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform. &lt;a href=&#34;https://ethereum.org/669c9e2e2027310b6b3cdce6e1c52962/Ethereum_Whitepaper_-_Buterin_2014.pdf&#34;&gt;Buterin (2014)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases. &lt;a href=&#34;https://web.stanford.edu/class/cs245/readings/aurora.pdf&#34;&gt;Verbitski et al (2017)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Nines are Not Enough: Meaningful Metrics for Clouds. &lt;a href=&#34;https://storage.googleapis.com/pub-tools-public-publication-data/pdf/f647d24ee7eeb338acebf1eb73a5d11b357620b0.pdf&#34;&gt;Mogul, Wilkes (2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;This list was inspired by (and draws from) the &lt;a href=&#34;https://paperswelove.org/&#34;&gt;Papers We Love&lt;/a&gt; project and the &lt;a href=&#34;https://mitpress.mit.edu/books/ideas-created-future&#34;&gt;Ideas That Created the Future&lt;/a&gt; book by Harry R. Lewis. I also found &lt;a href=&#34;https://blog.acolyer.org/&#34;&gt;the morning paper&lt;/a&gt; blog to be an extremly useful resource. For distributed systems I used &lt;a href=&#34;http://book.mixu.net/distsys/index.html&#34;&gt;Distributed systems for fun and profit&lt;/a&gt; and for Relational Data Bases I used the &lt;a href=&#34;http://www.redbook.io/&#34;&gt;Red Book&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Meta reads&lt;/h2&gt; &#xA;&lt;p&gt;A few interesting resources about reading papers from Papers We Love and elsewhere:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://michaelrbernste.in/2014/10/21/should-i-read-papers.html&#34;&gt;Should I read papers?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/&#34;&gt;How to Read an Academic Article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;How to Read a Paper. &lt;a href=&#34;http://ccr.sigcomm.org/online/files/p83-keshavA.pdf&#34;&gt;Keshav (2007)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Efficient Reading of Papers in Science and Technology. &lt;a href=&#34;https://www.cs.columbia.edu/~hgs/netbib/efficientReading.pdf&#34;&gt;Hanson (1999)&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On ICSE’s “Most Influential Papers”. &lt;a href=&#34;http://sei.pku.edu.cn/~yaoguo/PhDReading07/parnas-review.pdf&#34;&gt;Parnas (1995)&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Selection criteria&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The list should stay short. Let&#39;s say no more than 30 papers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The idea is not to include every interesting paper that I come across but rather to keep a representative list that&#39;s possible to read from start to finish with a similar level of effort as reading a technical book from cover to cover.&lt;/li&gt; &#xA;   &lt;li&gt;I tried to include one paper per each major topic and author. Since in the process I found a lot of noteworthy alternative, related or follow-up papers and I wanted to keep track of those as well, I included them as sublist items (some of these sublists are currently longer than they should).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The papers shouldn&#39;t be too long. For the same reasons as the previous item, I try to avoid papers longer than 20 or 30 pages.&lt;/li&gt; &#xA; &lt;li&gt;They should be self-contained and readable enough to be approachable by the casual technical reader.&lt;/li&gt; &#xA; &lt;li&gt;They should be freely available online.&lt;/li&gt; &#xA; &lt;li&gt;Although historical relevance was taken into account, I omitted seminal papers in the cases where I found them hard to approach, when the main subject of the paper wasn&#39;t the thing that made them influential, etc. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;That being said, where possible I preferred the original paper on each subject over modern updates or summary papers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;I tended to prefer topics that I can relate to my professional practice, typically papers originated in the industry or about innovations that later saw wide adoption. Likewise I tended to skip more theoretical papers, those focused on mathematical foundations for Computer Science, on electronic aspects of hardware, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Disclaimer: I&#39;m not a frequent paper reader, so I made this list as a sort of roadmap for myself. I haven&#39;t read all of the papers in the list yet; as I do, I may find than some don&#39;t meet the described criteria after all and remove them, or decide to add new ones.&lt;/p&gt; &#xA;&lt;p&gt;And, yes, this repository is a way to procrastinate on the actual reading after I finished making the list.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nategentile/ban_youtube_bots</title>
    <updated>2022-07-10T01:32:39Z</updated>
    <id>tag:github.com,2022-07-10:/nategentile/ban_youtube_bots</id>
    <link href="https://github.com/nategentile/ban_youtube_bots" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dirty and fast script for removing spam comments using Google Youtube API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ban_youtube_bots&lt;/h1&gt; &#xA;&lt;p&gt;Dirty and fast script for removing spam comments using Google Youtube API&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.google.com/cloud/answer/6158849?hl=en&#34;&gt;Set up OAuth 2.0&lt;/a&gt; (Tutorial soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installing packages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running the program&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ python main.py&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>