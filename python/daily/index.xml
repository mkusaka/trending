<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-18T01:39:05Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/generative-ai-python</title>
    <updated>2023-12-18T01:39:05Z</updated>
    <id>tag:github.com,2023-12-18:/google/generative-ai-python</id>
    <link href="https://github.com/google/generative-ai-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Google AI Python SDK enables developers to use Google&#39;s state-of-the-art generative AI models (like Gemini and PaLM) to build AI-powered features and applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google AI Python SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/google-generativeai&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/google-generativeai.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/google-generativeai&#34; alt=&#34;Python support&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dd/google-generativeai&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Google AI Python SDK enables developers to use Google&#39;s state-of-the-art generative AI models (like Gemini and PaLM) to build AI-powered features and applications. This SDK supports use cases like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate text from text-only input&lt;/li&gt; &#xA; &lt;li&gt;Generate text from text-and-images input (multimodal) (for Gemini only)&lt;/li&gt; &#xA; &lt;li&gt;Build multi-turn conversations (chat)&lt;/li&gt; &#xA; &lt;li&gt;Embedding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, with just a few lines of code, you can access Gemini&#39;s multimodal capabilities to generate text from text-and-image input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;model = genai.GenerativeModel(&#39;gemini-pro-vision&#39;)&#xA;&#xA;cookie_picture = {&#xA;    &#39;mime_type&#39;: &#39;image/png&#39;,&#xA;    &#39;data&#39;: Path(&#39;cookie.png&#39;).read_bytes()&#xA;}&#xA;prompt = &#34;Give me a recipe for this:&#34;&#xA;&#xA;response = model.generate_content(&#xA;    content=[prompt, cookie_picture]&#xA;)&#xA;print(response.text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Try out the API&lt;/h2&gt; &#xA;&lt;p&gt;Install from PyPI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install google-generativeai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;Obtain an API key from AI Studio&lt;/a&gt;, then configure it here.&lt;/p&gt; &#xA;&lt;p&gt;Import the SDK and load a model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import google.generativeai as genai&#xA;&#xA;genai.configure(api_key=os.environ[&#34;API_KEY&#34;])&#xA;&#xA;model = genai.GenerativeModel(&#39;gemini-pro&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;GenerativeModel.generate_content&lt;/code&gt; to have the model complete some initial text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;response = model.generate_content(&#34;The opposite of hot is&#34;)&#xA;print(response.text)  # cold.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;GenerativeModel.start_chat&lt;/code&gt; to have a discussion with a model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chat = model.start_chat()&#xA;response = chat.send_message(&#39;Hello, what should I have for dinner?&#39;)&#xA;print(response.text) #  &#39;Here are some suggestions...&#39;&#xA;response = chat.send_message(&#34;How do I cook the first one?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;a href=&#34;https://pypi.org/project/google-generativeai&#34;&gt;&lt;code&gt;pip install google-generativeai&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For detailed instructions, you can find a &lt;a href=&#34;https://ai.google.dev/tutorials/python_quickstart&#34;&gt;quickstart&lt;/a&gt; for the Google AI Python SDK in the Google documentation.&lt;/p&gt; &#xA;&lt;p&gt;This quickstart describes how to add your API key and install the SDK in your app, initialize the model, and then call the API to access the model. It also describes some additional use cases and features, like streaming, embedding, counting tokens, and controlling responses.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Find complete documentation for the Google AI SDKs and the Gemini model in the Google documentation: &lt;a href=&#34;https://ai.google.dev/docs&#34;&gt;https://ai.google.dev/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/generative-ai-python/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Google AI JavaScript SDK.&lt;/p&gt; &#xA;&lt;h2&gt;Developers who use the PaLM API&lt;/h2&gt; &#xA;&lt;h3&gt;Migrate to use the Gemini API&lt;/h3&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://ai.google.dev/docs/migration_guide&#34;&gt;migration guide&lt;/a&gt; in the Google documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Installation and usage for the PaLM API&lt;/h3&gt; &#xA;&lt;p&gt;Install from PyPI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install google-generativeai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://makersuite.google.com/app/apikey&#34;&gt;Obtain an API key from AI Studio&lt;/a&gt;, then configure it here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import google.generativeai as palm&#xA;&#xA;palm.configure(api_key=os.environ[&#34;PALM_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;palm.generate_text&lt;/code&gt; to have the model complete some initial text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;response = palm.generate_text(prompt=&#34;The opposite of hot is&#34;)&#xA;print(response.result)  # cold.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;palm.chat&lt;/code&gt; to have a discussion with a model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;response = palm.chat(messages=[&#34;Hello.&#34;])&#xA;print(response.last) #  &#39;Hello! What can I help you with?&#39;&#xA;response.reply(&#34;Can you tell me a joke?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation for the PaLM API&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ai.google.dev/docs/palm_api_overview&#34;&gt;General PaLM documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/google/generative-ai-docs/tree/main/site/en/tutorials/text_quickstart.ipynb&#34;&gt;Text quickstart&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/google/generative-ai-docs/tree/main/site/en/tutorials/chat_quickstart.ipynb&#34;&gt;Chat quickstart&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/google/generative-ai-docs/raw/main/site/en/tutorials/tuning_quickstart_python.ipynb&#34;&gt;Tuning quickstart&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Colab magics&lt;/h3&gt; &#xA;&lt;p&gt;Once installed, use the Python client via the &lt;code&gt;%%palm&lt;/code&gt; Colab magic. Read the &lt;a href=&#34;https://github.com/google/generative-ai-docs/raw/main/site/en/tools/notebook_magic.ipynb&#34;&gt;full guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;%%palm&#xA;The best thing since sliced bread is&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Fadi002/de4py</title>
    <updated>2023-12-18T01:39:05Z</updated>
    <id>tag:github.com,2023-12-18:/Fadi002/de4py</id>
    <link href="https://github.com/Fadi002/de4py" rel="alternate"></link>
    <summary type="html">&lt;p&gt;toolkit for python reverse engineering&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Fadi002/de4py/main/#home&#34;&gt;&lt;img src=&#34;https://github.com/Fadi002/de4py/raw/main/Pictures/de4py.jpg?raw=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;de4py&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;what is de4py?&lt;/b&gt;&lt;/p&gt; De4py are an Advanced python deobfuscator with a beautiful UI and a set of Advanced features that enables malware analysts and reverse engineers to deobfuscate python files and more. this project is maintained by me (&#xA;&lt;a href=&#34;https://github.com/Fadi002&#34;&gt;Fadi002&lt;/a&gt;) and my friend &#xA;&lt;a href=&#34;https://github.com/AdvDebug&#34;&gt;AdvDebug&lt;/a&gt;. &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;th align=&#34;left&#34;&gt;Feature&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deobfuscation&lt;/td&gt; &#xA;   &lt;td&gt;De4py support some popular obfuscators, like: Jawbreaker, BlankOBF, PlusOBF, Wodx, Hyperion, pyobfuscate.com obfuscator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pycode Execution&lt;/td&gt; &#xA;   &lt;td&gt;Executing your python code inside the process which can be useful in many cases to make the program do something you want to make it do, for example if the program have licensing and it calls the real &#34;main&#34; only if you bought the program you can call it directly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Strings Dump&lt;/td&gt; &#xA;   &lt;td&gt;Dumping Strings in the python process and saving it as a file which can be pretty useful to extract data from memory such as webhooks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Removing Exit Function&lt;/td&gt; &#xA;   &lt;td&gt;Removing the exit function which can be extremely useful if the python program tried to exit itself if it found a debugger or a VM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Getting All Functions&lt;/td&gt; &#xA;   &lt;td&gt;Getting all functions inside the python process which can be really useful when trying to modify a python function in memory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pyshell GUI&lt;/td&gt; &#xA;   &lt;td&gt;Custom GUI to make it easy to execute python code inside the desired process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GUI and Console Support&lt;/td&gt; &#xA;   &lt;td&gt;De4py supports both console and GUI, but why use console when you can have a nice-on-the-eyes GUI, am i right? ;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File Analyzer&lt;/td&gt; &#xA;   &lt;td&gt;an analyzer that have many features like detecting if the python program is packed and tries to unpack it if it was using pyinstaller for example, it also got a feature that shows either all strings or suspicious strings (suspicious strings like: IPs, websites, and &#34;token&#34; &#34;discord&#34; &#34;leveldb&#34; strings and other suspicious strings in the file) and shows them in a nice output window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Behavior Monitoring&lt;/td&gt; &#xA;   &lt;td&gt;De4py can monitor python processes and see if they opened any files handles, opened a process, wrote/readed the memory of other processes and also monitoring if the process terminated other processes, in addition to sockets monitoring (including the size of data that is being sent and the ip that is being sent/recieved from).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Fadi002/de4py/main/#home&#34;&gt;&lt;img src=&#34;https://github.com/Fadi002/de4py/raw/main/Pictures/Home.png?raw=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Fadi002/de4py/main/#home&#34;&gt;&lt;img src=&#34;https://github.com/Fadi002/de4py/raw/main/Pictures/Deobfuscator.png?raw=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Fadi002/de4py/main/#home&#34;&gt;&lt;img src=&#34;https://github.com/Fadi002/de4py/raw/main/Pictures/Shell.png?raw=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Fadi002/de4py/main/#home&#34;&gt;&lt;img src=&#34;https://github.com/Fadi002/de4py/raw/main/Pictures/About.png?raw=true&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;All contributions are welcomed.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool are for educational purposes only, never try deobfuscating someone&#39;s software without permission, ALL developers and contributors are not responsible for any kind of misuse.&lt;/p&gt; &#xA;&lt;h2&gt;License Notice&lt;/h2&gt; &#xA;&lt;p&gt;this tool are licensed under GNU General Public License v3.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/promptbase</title>
    <updated>2023-12-18T01:39:05Z</updated>
    <id>tag:github.com,2023-12-18:/microsoft/promptbase</id>
    <link href="https://github.com/microsoft/promptbase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All things prompt engineering&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;promptbase&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;promptbase&lt;/code&gt; is an evolving collection of resources, best practices, and example scripts for eliciting the best performance from foundation models like &lt;code&gt;GPT-4&lt;/code&gt;. We currently host scripts demonstrating the &lt;a href=&#34;https://arxiv.org/abs/2311.16452&#34;&gt;&lt;code&gt;Medprompt&lt;/code&gt; methodology&lt;/a&gt;, including examples of how we further extended this collection of prompting techniques (&#34;&lt;code&gt;Medprompt+&lt;/code&gt;&#34;) into non-medical domains:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Benchmark&lt;/th&gt; &#xA;   &lt;th&gt;GPT-4 Prompt&lt;/th&gt; &#xA;   &lt;th&gt;GPT-4 Results&lt;/th&gt; &#xA;   &lt;th&gt;Gemini Ultra Results&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MMLU&lt;/td&gt; &#xA;   &lt;td&gt;Medprompt+&lt;/td&gt; &#xA;   &lt;td&gt;90.10%&lt;/td&gt; &#xA;   &lt;td&gt;90.04%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GSM8K&lt;/td&gt; &#xA;   &lt;td&gt;Zero-shot&lt;/td&gt; &#xA;   &lt;td&gt;95.3%&lt;/td&gt; &#xA;   &lt;td&gt;94.4%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MATH&lt;/td&gt; &#xA;   &lt;td&gt;Zero-shot&lt;/td&gt; &#xA;   &lt;td&gt;68.4%&lt;/td&gt; &#xA;   &lt;td&gt;53.2%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HumanEval&lt;/td&gt; &#xA;   &lt;td&gt;Zero-shot&lt;/td&gt; &#xA;   &lt;td&gt;87.8%&lt;/td&gt; &#xA;   &lt;td&gt;74.4%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BIG-Bench-Hard&lt;/td&gt; &#xA;   &lt;td&gt;Few-shot + CoT&lt;/td&gt; &#xA;   &lt;td&gt;89.0%&lt;/td&gt; &#xA;   &lt;td&gt;83.6%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DROP&lt;/td&gt; &#xA;   &lt;td&gt;Zero-shot + CoT&lt;/td&gt; &#xA;   &lt;td&gt;83.7%&lt;/td&gt; &#xA;   &lt;td&gt;82.4%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HellaSwag&lt;/td&gt; &#xA;   &lt;td&gt;10-shot&lt;/td&gt; &#xA;   &lt;td&gt;95.3%&lt;/td&gt; &#xA;   &lt;td&gt;87.8%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In the near future, &lt;code&gt;promptbase&lt;/code&gt; will also offer further case studies and structured interviews around the scientific process we take behind prompt engineering. We&#39;ll also offer specialized deep dives into specialized tooling that accentuates the prompt engineering process. Stay tuned!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Medprompt&lt;/code&gt; and The Power of Prompting&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;em&gt;&#34;Can Generalist Foundation Models Outcompete Special-Purpose Tuning? Case Study in Medicine&#34; (H. Nori, Y. T. Lee, S. Zhang, D. Carignan, R. Edgar, N. Fusi, N. King, J. Larson, Y. Li, W. Liu, R. Luo, S. M. McKinney, R. O. Ness, H. Poon, T. Qin, N. Usuyama, C. White, E. Horvitz 2023)&lt;/em&gt; &lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&#xA;&lt;p&gt;@article{nori2023can,&#xA;title={Can Generalist Foundation Models Outcompete Special-Purpose Tuning? Case Study in Medicine},&#xA;author={Nori, Harsha and Lee, Yin Tat and Zhang, Sheng and Carignan, Dean and Edgar, Richard and Fusi, Nicolo and King, Nicholas and Larson, Jonathan and Li, Yuanzhi and Liu, Weishung and others},&#xA;journal={arXiv preprint arXiv:2311.16452},&#xA;year={2023}&#xA;}&#xA;&lt;/p&gt;&lt;/pre&gt; &#xA; &lt;a href=&#34;https://arxiv.org/pdf/1909.09223.pdf&#34;&gt;Paper link&lt;/a&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/promptbase/main/images/medprompt_radar.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In a recent &lt;a href=&#34;https://arxiv.org/abs/2311.16452&#34;&gt;study&lt;/a&gt;, we showed how the composition of several prompting strategies into a method that we refer to as &lt;code&gt;Medprompt&lt;/code&gt; can efficiently steer generalist models like GPT-4 to achieve top performance, even when compared to models specifically finetuned for medicine. &lt;code&gt;Medprompt&lt;/code&gt; composes three distinct strategies together -- including dynamic few-shot selection, self-generated chain of thought, and choice-shuffle ensembling -- to elicit specialist level performance from GPT-4. We briefly describe these strategies here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/promptbase/main/images/medprompt_sa_graphic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dynamic Few Shots&lt;/strong&gt;: Few-shot learning -- providing several examples of the task and response to a foundation model -- enables models quickly adapt to a specific domain and learn to follow the task format. For simplicity and efficiency, the few-shot examples applied in prompting for a particular task are typically fixed; they are unchanged across test examples. This necessitates that the few-shot examples selected are broadly representative and relevant to a wide distribution of text examples. One approach to meeting these requirements is to have domain experts carefully hand-craft exemplars. Even so, this approach cannot guarantee that the curated, fixed few-shot examples will be appropriately representative of every test example. However, with enough available data, we can select &lt;em&gt;different&lt;/em&gt; few-shot examples for different task inputs. We refer to this approach as employing dynamic few-shot examples. The method makes use of a mechanism to identify examples based on their similarity to the case at hand. For Medprompt, we did the following to identify representative few shot examples: Given a test example, we choose k training examples that are semantically similar using a k-NN clustering in the embedding space. Specifically, we first use OpenAI&#39;s &lt;code&gt;text-embedding-ada-002&lt;/code&gt; model to embed candidate exemplars for few-shot learning. Then, for each test question x, we retrieve its nearest k neighbors x1, x2, ..., xk from the training set (according to distance in the embedding space of text-embedding-ada-002). These examples -- the ones most similar in embedding space to the test question -- are ultimately registered in the prompt.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Self-Generated Chain of Thought (CoT)&lt;/strong&gt;: Chain-of-thought (CoT) uses natural language statements, such as “Let’s think step by step,” to explicitly encourage the model to generate a series of intermediate reasoning steps. The approach has been found to significantly improve the ability of foundation models to perform complex reasoning. Most approaches to chain-of-thought center on the use of experts to manually compose few-shot examples with chains of thought for prompting. Rather than rely on human experts, we pursued a mechanism to automate the creation of chain-of-thought examples. We found that we could simply ask GPT-4 to generate chain-of-thought for the training examples, with appropriate guardrails for reducing risk of hallucination via incorrect reasoning chains.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Majority Vote Ensembling&lt;/strong&gt;: &lt;a href=&#34;https://en.wikipedia.org/wiki/Ensemble_learning&#34;&gt;Ensembling&lt;/a&gt; refers to combining the output of several algorithms together to yield better predictive performance than any individual algorithm. Frontier models like &lt;code&gt;GPT-4&lt;/code&gt; benefit from ensembling of their own outputs. A simple technique is to have a variety of prompts, or a single prompt with varied &lt;code&gt;temperature&lt;/code&gt;, and report the most frequent answer amongst the ensemble constituents. For multiple choice questions, we employ a further trick that increases the diversity of the ensemble called &lt;code&gt;choice-shuffling&lt;/code&gt;, where we shuffle the relative order of the answer choices before generating each reasoning path. We then select the most consistent answer, i.e., the one that is least sensitive to choice shuffling, which increases the robustness of the answer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The combination of these three techniques led to breakthrough performance in Medprompt for medical challenge questions. Implementation details of these techniques can be found here: &lt;a href=&#34;https://github.com/microsoft/promptbase/tree/main/src/promptbase/mmlu&#34;&gt;https://github.com/microsoft/promptbase/tree/main/src/promptbase/mmlu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Medprompt+&lt;/code&gt; | Extending the power of prompting&lt;/h2&gt; &#xA;&lt;p&gt;Here we provide some intuitive details on how we extended the &lt;code&gt;medprompt&lt;/code&gt; prompting framework to elicit even stronger out-of-domain performance on the MMLU (Measuring Massive Multitask Language Understanding) benchmark. MMLU was established as a test of general knowledge and reasoning powers of large language models. The complete MMLU benchmark contains tens of thousands of challenge problems of different forms across 57 areas from basic mathematics to United States history, law, computer science, engineering, medicine, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/promptbase/main/images/mmlu_accuracy_ablation.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We found that applying Medprompt without modification to the whole MMLU achieved a score of 89.1%. Not bad for a single policy working across a great diversity of problems! But could we push Medprompt to do better? Simply scaling-up MedPrompt can yield further benefits. As a first step, we increased the number of ensembled calls from five to 20. This boosted performance to 89.56%.&lt;/p&gt; &#xA;&lt;p&gt;On working to push further with refinement of Medprompt, we noticed that performance was relatively poor for specific topics of the MMLU. MMLU contains a great diversity of types of questions, depending on the discipline and specific benchmark at hand. How might we push GPT-4 to perform even better on MMLU given the diversity of problems?&lt;/p&gt; &#xA;&lt;p&gt;We focused on extension to a portfolio approach based on the observation that some topical areas tend to ask questions that would require multiple steps of reasoning and perhaps a scratch pad to keep track of multiple parts of a solution. Other areas seek factual answers that follow more directly from questions. Medprompt employs “chain-of-thought” (CoT) reasoning, resonating with multi-step solving. We wondered if the sophisticated Medprompt-classic approach might do less well on very simple questions and if the system might do better if a simpler method were used for the factual queries.&lt;/p&gt; &#xA;&lt;p&gt;Following this argument, we found that we could boost the performance on MMLU by extending MedPrompt with a simple two-method prompt portfolio. We add to the classic Medprompt a set of 10 simple, direct few-shot prompts soliciting an answer directly without Chain of Thought. We then ask GPT-4 for help with deciding on the best strategy for each topic area and question. As a screening call, for each question we first ask GPT-4:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Question&#xA;{{ question }}&#xA; &#xA;# Task&#xA;Does answering the question above require a scratch-pad?&#xA;A. Yes&#xA;B. No&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If GPT-4 thinks the question does require a scratch-pad, then the contribution of the Chain-of-Thought component of the ensemble is doubled. If it doesn&#39;t, we halve that contribution (and let the ensemble instead depend more on the direct few-shot prompts). Dynamically leveraging the appropriate prompting technique in the ensemble led to a further +0.5% performance improvement across the MMLU.&lt;/p&gt; &#xA;&lt;p&gt;We note that Medprompt+ relies on accessing confidence scores (logprobs) from GPT-4. These are not publicly available via the current API but will be enabled for all in the near future.&lt;/p&gt; &#xA;&lt;h2&gt;Running Scripts&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Some scripts hosted here are published for reference on methodology, but may not be immediately executable against public APIs. We&#39;re working hard on making the pipelines easier to run &#34;out of the box&#34; over the next few days, and appreciate your patience in the interim!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, clone the repo and install the promptbase package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd src&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, decide which tests you&#39;d like to run. You can choose from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bigbench&lt;/li&gt; &#xA; &lt;li&gt;drop&lt;/li&gt; &#xA; &lt;li&gt;gsm8k&lt;/li&gt; &#xA; &lt;li&gt;humaneval&lt;/li&gt; &#xA; &lt;li&gt;math&lt;/li&gt; &#xA; &lt;li&gt;mmlu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before running the tests, you will need to download the datasets from the original sources (see below) and place them in the &lt;code&gt;src/promptbase/datasets&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;After downloading datasets and installing the promptbase package, you can run a test with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;python -m promptbase dataset_name&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;python -m promptbase gsm8k&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dataset Links&lt;/h2&gt; &#xA;&lt;p&gt;To run evaluations, download these datasets and add them to /src/promptbase/datasets/&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MMLU: &lt;a href=&#34;https://github.com/hendrycks/test&#34;&gt;https://github.com/hendrycks/test&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HumanEval: &lt;a href=&#34;https://huggingface.co/datasets/openai_humaneval&#34;&gt;https://huggingface.co/datasets/openai_humaneval&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DROP: &lt;a href=&#34;https://allenai.org/data/drop&#34;&gt;https://allenai.org/data/drop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GSM8K: &lt;a href=&#34;https://github.com/openai/grade-school-math&#34;&gt;https://github.com/openai/grade-school-math&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;MATH: &lt;a href=&#34;https://huggingface.co/datasets/hendrycks/competition_math&#34;&gt;https://huggingface.co/datasets/hendrycks/competition_math&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Big-Bench-Hard: &lt;a href=&#34;https://github.com/suzgunmirac/BIG-Bench-Hard&#34;&gt;https://github.com/suzgunmirac/BIG-Bench-Hard&lt;/a&gt; The contents of this repo need to be put into a directory called &lt;code&gt;BigBench&lt;/code&gt; in the &lt;code&gt;datasets&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Resources:&lt;/h2&gt; &#xA;&lt;p&gt;Medprompt Blog: &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/the-power-of-prompting/&#34;&gt;https://www.microsoft.com/en-us/research/blog/the-power-of-prompting/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Medprompt Research Paper: &lt;a href=&#34;https://arxiv.org/abs/2311.16452&#34;&gt;https://arxiv.org/abs/2311.16452&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Medprompt+: &lt;a href=&#34;https://www.microsoft.com/en-us/research/blog/steering-at-the-frontier-extending-the-power-of-prompting/&#34;&gt;https://www.microsoft.com/en-us/research/blog/steering-at-the-frontier-extending-the-power-of-prompting/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft Introduction to Prompt Engineering: &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/prompt-engineering&#34;&gt;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/prompt-engineering&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Microsoft Advanced Prompt Engineering Guide: &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/advanced-prompt-engineering?pivots=programming-language-chat-completions&#34;&gt;https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/advanced-prompt-engineering?pivots=programming-language-chat-completions&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>