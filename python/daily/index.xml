<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-14T01:45:46Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheR1D/shell_gpt</title>
    <updated>2023-02-14T01:45:46Z</updated>
    <id>tag:github.com,2023-02-14:/TheR1D/shell_gpt</id>
    <link href="https://github.com/TheR1D/shell_gpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A command-line interface (CLI) productivity tool powered by OpenAI&#39;s text-davinci-003 model, will help you accomplish your tasks faster and more efficiently.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Shell GPT&lt;/h1&gt; &#xA;&lt;p&gt;A command-line interface (CLI) productivity tool powered by OpenAI&#39;s Davinci model, will help you accomplish your tasks faster and more efficiently.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.ibb.co/VHVSSLL/v2-final-3.gif&#34; width=&#34;800&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;text-davinci-003&lt;/code&gt; is a powerful language model developed by OpenAI that can generate human-like text. It can be used by us, coders, to generate code snippets, comments, documentation and more, helping us increase our productivity and efficiency while coding.&lt;/p&gt; &#xA;&lt;p&gt;Forget about cheat sheets and notes, with this tool you can get accurate answers right in your terminal, and you&#39;ll probably find yourself reducing your daily Google searches, saving you valuable time and effort.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install shell-gpt --user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On first start you would need to generate and provide your API key, get one &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;h3&gt;Simple queries&lt;/h3&gt; &#xA;&lt;p&gt;We can use it pretty much as normal search engine, asking about anything, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sgpt &#34;nginx default config file location&#34;&#xA;# -&amp;gt; The default Nginx config location is /etc/nginx/nginx.conf&#xA;sgpt &#34;docker show all local images&#34;&#xA;# -&amp;gt; You can view all locally available Docker images by running: `docker images`&#xA;sgpt &#34;mass of sun&#34;&#xA;# -&amp;gt; = 1.99 Ã— 10^30 kg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell queries&lt;/h3&gt; &#xA;&lt;p&gt;Usually we are forgetting commands like &lt;code&gt;chmod 444&lt;/code&gt; and we want quickly find the answer in google, clicking pages, scrolling, copy&amp;amp;pasting, usually takes some time, but now we &#34;google&#34; and execute it right in the terminal using &lt;code&gt;--shell&lt;/code&gt; flag &lt;code&gt;sgpt&lt;/code&gt; will provide only shell commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Here we are using special flag --shell, which will output only shell commands.&#xA;sgpt --shell &#34;make all files in current directory read only&#34;&#xA;# -&amp;gt; chmod 444 *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since we are receiving valid shell command, we can execute it using &lt;code&gt;eval $(sgpt --shell &#34;make all files in current directory read only&#34;)&lt;/code&gt; but this is not very convenient, instead we can use &lt;code&gt;--execute&lt;/code&gt; (or shortcut &lt;code&gt;-se&lt;/code&gt; for &lt;code&gt;--shell&lt;/code&gt; &lt;code&gt;--execute&lt;/code&gt;) parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sgpt --shell --execute &#34;make all files in current directory read only&#34;&#xA;# -&amp;gt; chmod 444 *&#xA;# -&amp;gt; Execute shell command? [y/N]: y&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point it is already can solve half of most frequent Google searches, but how far we can push the limits of &lt;code&gt;text-davinci-003&lt;/code&gt; model? Let&#39;s try some docker containers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sgpt -se &#34;start nginx using docker, forward 443 and 80 port, mount current folder with index.html&#34;&#xA;# -&amp;gt; docker run -d -p 443:443 -p 80:80 -v $(pwd):/usr/share/nginx/html nginx&#xA;# -&amp;gt; Execute shell command? [y/N]: y&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, we can provide some parameters name in our prompt, for example, I want to pass input and output file names to ffmpeg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sgpt -se &#34;slow down video twice using ffmpeg, input video name \&#34;input.mp4\&#34; output video name \&#34;output.mp4\&#34;&#34;&#xA;# -&amp;gt; ffmpeg -i input.mp4 -filter:v &#34;setpts=2.0*PTS&#34; output.mp4&#xA;# -&amp;gt; Execute shell command? [y/N]: y&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And remember we are in shell, this means we can use outputs of any commands in our prompt, this brings it to another level, here is simple examples with ffmpeg and list of videos in current folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ls&#xA;# -&amp;gt; 1.mp4 2.mp4 3.mp4&#xA;sgpt -se &#34;using ffmpeg combine multiple videos into one without audio. Video file names $(ls)&#34;&#xA;# -&amp;gt; ffmpeg -i 1.mp4 -i 2.mp4 -i 3.mp4 -filter_complex &#34;[0:v] [1:v] [2:v] concat=n=3:v=1 [v]&#34; -map &#34;[v]&#34; out.mp4&#xA;# -&amp;gt; Execute shell command? [y/N]: y&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since GPT-3 models can also do summarization and analyzing of input text, we can ask &lt;code&gt;text-davinci-003&lt;/code&gt; to find error in logs and provide some details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sgpt &#34;check these logs, find errors, and explain what the error is about: ${docker logs -n 20 container_name}&#34;&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code queries&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;--code&lt;/code&gt; parameters we can query only code as output, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sgpt --code &#34;Solve classic fizz buzz problem using Python&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(1, 101):&#xA;    if i % 3 == 0 and i % 5 == 0:&#xA;        print(&#34;FizzBuzz&#34;)&#xA;    elif i % 3 == 0:&#xA;        print(&#34;Fizz&#34;)&#xA;    elif i % 5 == 0:&#xA;        print(&#34;Buzz&#34;)&#xA;    else:&#xA;        print(i)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since it is valid python code without any other text, we can redirect the output to file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sgpt --code &#34;solve classic fizz buzz problem using Python&#34; &amp;gt; fizz_buzz.py&#xA;python fizz_buzz.py&#xA;# 1&#xA;# 2&#xA;# Fizz&#xA;# 4&#xA;# Buzz&#xA;# Fizz&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is, just some examples of what we can do using GPT-3 models, I&#39;m sure you will find it useful for your specific use cases.&lt;/p&gt; &#xA;&lt;h3&gt;Full list of arguments&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;--model                             TEXT     OpenAI model name. [default: text-davinci-003]&#xA;--max-tokens                        INTEGER  Strict length of output (words). [default: 2048]&#xA;--shell       -s                             Provide shell command as output.&#xA;--execute     -e                             Used with --shell, will execute command.&#xA;--code            --no-code                  Provide code as output. [default: no-code]&#xA;--animation       --no-animation             Typewriter animation. [default: animation]&#xA;--spinner         --no-spinner               Show loading spinner during API request. [default: spinner]&#xA;--help                                       Show this message and exit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Use the provided &lt;code&gt;Dockerfile&lt;/code&gt; to build a container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker build -t sgpt .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may use a named volume (therefore sgpt will ask your API key only once) to run the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -ti -v gpt-config:/home/app/.config/shell-gpt sgpt &#34;what are the colors of a rainbow&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>lllyasviel/ControlNet</title>
    <updated>2023-02-14T01:45:46Z</updated>
    <id>tag:github.com,2023-02-14:/lllyasviel/ControlNet</id>
    <link href="https://github.com/lllyasviel/ControlNet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Let us control diffusion models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ControlNet&lt;/h1&gt; &#xA;&lt;p&gt;Official implementation of &lt;a href=&#34;https://arxiv.org/abs/2302.05543&#34;&gt;Adding Conditional Control to Text-to-Image Diffusion Models&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;ControlNet is a neural network structure to control diffusion models by adding extra conditions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/he.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It copys the weights of neural network blocks into a &#34;locked&#34; copy and a &#34;trainable&#34; copy.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;trainable&#34; one learns your condition. The &#34;locked&#34; one preserves your model.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to this, training with small dataset of image pairs will not destroy the production-ready diffusion models.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;zero convolution&#34; is 1Ã—1 convolution with both weight and bias initialized as zeros.&lt;/p&gt; &#xA;&lt;p&gt;Before training, all zero convolutions output zeros, and ControlNet will not cause any distortion.&lt;/p&gt; &#xA;&lt;p&gt;No layer is trained from scratch. You are still fine-tuning. Your original model is safe.&lt;/p&gt; &#xA;&lt;p&gt;This allows training on small-scale or even personal devices.&lt;/p&gt; &#xA;&lt;p&gt;This is also friendly to merge/replacement/offsetting of models/weights/blocks/layers.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; But wait, if the weight of a conv layer is zero, the gradient will also be zero, and the network will not learn anything. Why &#34;zero convolution&#34; works?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; This is not true. &lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/faq.md&#34;&gt;See an explanation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Stable Diffusion + ControlNet&lt;/h1&gt; &#xA;&lt;p&gt;By repeating the above simple structure 14 times, we can control stable diffusion in this way:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/sd.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the way we connect layers is computational efficient. The original SD encoder does not need to store gradients (the locked original SD Encoder Block 1234 and Middle). The required GPU memory is not much larger than original SD, although many layers are added. Great!&lt;/p&gt; &#xA;&lt;h1&gt;Production-Ready Pretrained Models&lt;/h1&gt; &#xA;&lt;p&gt;First create a new conda environment&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda env create -f environment.yaml&#xA;conda activate control&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All models and detectors can be downloaded from &lt;a href=&#34;https://huggingface.co/lllyasviel/ControlNet&#34;&gt;our Hugging Face page&lt;/a&gt;. Make sure that SD models are put in &#34;ControlNet/models&#34; and detectors are put in &#34;ControlNet/annotator/ckpts&#34;. Make sure that you download all necessary pretrained weights and detector models from that Hugging Face page, including HED edge detection model, Midas depth estimation model, Openpose, and so on.&lt;/p&gt; &#xA;&lt;p&gt;We provide 9 Gradio apps with these models.&lt;/p&gt; &#xA;&lt;p&gt;All test images can be found at the folder &#34;test_imgs&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;News&lt;/h3&gt; &#xA;&lt;p&gt;2023/02/12 - Now you can play with any community model by &lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/12&#34;&gt;Transferring the ControlNet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;2023/02/11 - &lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/low_vram.md&#34;&gt;Low VRAM mode&lt;/a&gt; is added. Please use this mode if you are using 8GB GPU(s) or if you want larger batch size.&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Canny Edge&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using simple Canny edge detection)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_canny2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gradio app also allows you to change the Canny edge thresholds. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;bird&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p1.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;cute dog&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p2.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with M-LSD Lines&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using simple M-LSD straight line detection)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_hough2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Gradio app also allows you to change the M-LSD thresholds. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;room&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p3.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;building&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p4.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with HED Boundary&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using soft HED Boundary)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_hed2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The soft HED Boundary will preserve many details in input images, making this app suitable for recoloring and stylizing. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;oil painting of handsome old man, masterpiece&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p5.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Cyberpunk robot&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p6.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with User Scribbles&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using Scribbles)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_scribble2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the UI is based on Gradio, and Gradio is somewhat difficult to customize. Right now you need to draw scribbles outside the UI (using your favorite drawing software, for example, MS Paint) and then import the scribble image to Gradio.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;turtle&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p7.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;hot air balloon&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p8.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interactive Interface&lt;/h3&gt; &#xA;&lt;p&gt;We actually provide an interactive interface&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_scribble2image_interactive.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, because gradio is very &lt;a href=&#34;https://github.com/gradio-app/gradio/issues/3166&#34;&gt;buggy&lt;/a&gt; and difficult to customize, right now, user need to first set canvas width and heights and then click &#34;Open drawing canvas&#34; to get a drawing area. Please do not upload image to that drawing canvas. Also, the drawing area is very small; it should be bigger. But I failed to find out how to make it larger. Again, gradio is really buggy.&lt;/p&gt; &#xA;&lt;p&gt;The below dog sketch is drawn by me. Perhaps we should draw a better dog for showcase.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;dog in a room&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p20.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Fake Scribbles&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using fake scribbles)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_fake_scribble2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes we are lazy, and we do not want to draw scribbles. This script use the exactly same scribble-based model but use a simple algorithm to synthesize scribbles from input images.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;bag&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p9.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;shose&#34; (Note that &#34;shose&#34; is a typo; it should be &#34;shoes&#34;. But it still seems to work.) &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p10.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Human Pose&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using human pose)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_pose2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apparently, this model deserves a better UI to directly manipulate pose skeleton. However, again, Gradio is somewhat difficult to customize. Right now you need to input an image and then the Openpose will detect the pose for you.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Chief in the kitchen&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p11.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;An astronaut on the moon&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p12.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Semantic Segmentation&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using semantic segmentation)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_seg2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This model use ADE20K&#39;s segmentation protocol. Again, this model deserves a better UI to directly draw the segmentations. However, again, Gradio is somewhat difficult to customize. Right now you need to input an image and then a model called Uniformer will detect the segmentations for you. Just try it for more details.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;House&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p13.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;River&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p14.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Depth&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using depth map)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_depth2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Great! Now SD 1.5 also have a depth control. FINALLY. So many possibilities (considering SD1.5 has much more community models than SD2).&lt;/p&gt; &#xA;&lt;p&gt;Note that different from Stability&#39;s model, the ControlNet receive the full 512Ã—512 depth map, rather than 64Ã—64 depth. Note that Stability&#39;s SD2 depth model use 64*64 depth maps. This means that the ControlNet will preserve more details in the depth map.&lt;/p&gt; &#xA;&lt;p&gt;This is always a strength because if users do not want to preserve more details, they can simply use another SD to post-process an i2i. But if they want to preserve more details, ControlNet becomes their only choice. Again, SD2 uses 64Ã—64 depth, we use 512Ã—512.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Stormtrooper&#39;s lecture&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p15.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Normal Map&lt;/h2&gt; &#xA;&lt;p&gt;Stable Diffusion 1.5 + ControlNet (using normal map)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python gradio_normal2image.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This model use normal map. Rightnow in the APP, the normal is computed from the midas depth map and a user threshold (to determine how many area is background with identity normal face to viewer, tune the &#34;Normal background threshold&#34; in the gradio app to get a feeling).&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Cute toy&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p17.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Plaster statue of Abraham Lincoln&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p18.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compared to depth model, this model seems to be a bit better at preserving the geometry. This is intuitive: minor details are not salient in depth maps, but are salient in normal maps. Below is the depth result with same inputs. You can see that the hairstyle of the man in the input image is modified by depth model, but preserved by the normal model.&lt;/p&gt; &#xA;&lt;p&gt;Prompt: &#34;Plaster statue of Abraham Lincoln&#34; &lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p19.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ControlNet with Anime Line Drawing&lt;/h2&gt; &#xA;&lt;p&gt;We also trained a relatively simple ControlNet for anime line drawings. This tool may be useful for artistic creations. (Although the image details in the results is a bit modified, since it still diffuse latent images.)&lt;/p&gt; &#xA;&lt;p&gt;This model is not available right now. We need to evaluate the potential risks before releasing this model. Nevertheless, you may be interested in &lt;a href=&#34;https://github.com/lllyasviel/ControlNet/discussions/12&#34;&gt;transferring the ControlNet to any community model&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/github_page/p21.png&#34; alt=&#34;p&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Annotate Your Own Data&lt;/h1&gt; &#xA;&lt;p&gt;We provide simple python scripts to process images.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/annotator.md&#34;&gt;See a gradio example here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Train with Your Own Data&lt;/h1&gt; &#xA;&lt;p&gt;Training a ControlNet is as easy as (or even easier than) training a simple pix2pix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lllyasviel/ControlNet/main/docs/train.md&#34;&gt;See the steps here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{zhang2023adding,&#xA;  title={Adding Conditional Control to Text-to-Image Diffusion Models}, &#xA;  author={Lvmin Zhang and Maneesh Agrawala},&#xA;  year={2023},&#xA;  eprint={2302.05543},&#xA;  archivePrefix={arXiv},&#xA;  primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2302.05543&#34;&gt;Arxiv Link&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>acheong08/ChatGPT-Proxy</title>
    <updated>2023-02-14T01:45:46Z</updated>
    <id>tag:github.com,2023-02-14:/acheong08/ChatGPT-Proxy</id>
    <link href="https://github.com/acheong08/ChatGPT-Proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Forward requests and inject cloudflare cookies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChatGPT-Proxy&lt;/h1&gt; &#xA;&lt;p&gt;Forward requests and inject CloudFlare cookies&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;One-click scripts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With Docker: &lt;code&gt;curl https://raw.githubusercontent.com/acheong08/ChatGPT-Proxy/main/scripts/run-with-docker.sh | sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simple steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Check if Pipenv is installed. If not, run &lt;code&gt;pip install pipenv -U&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then, run &lt;code&gt;pipenv update -d&lt;/code&gt; in this directory, to automatically install the requirements of the proxy.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;pipenv run proxy&lt;/code&gt; in the base directory, and enjoy it! Uvicorn will provide a high-performance HTTP server for the API service.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;These options can be configured by setting environment variables using &lt;code&gt;-e KEY=&#34;VALUE&#34;&lt;/code&gt; in the &lt;code&gt;docker run&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Env&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GPT_PROXY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;socks5://127.0.0.1:1080&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The proxy of your server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GPT_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.0.0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The hostname of your server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GPT_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5000&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;8080&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The port of your server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>