<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-18T01:37:39Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aiwaves-cn/agents</title>
    <updated>2023-09-18T01:37:39Z</updated>
    <id>tag:github.com,2023-09-18:/aiwaves-cn/agents</id>
    <link href="https://github.com/aiwaves-cn/agents" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Open-source Framework for Autonomous Language Agents&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/assets/agents-logo.png&#34; width=&#34;300&#34;&gt; &lt;/p&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;p align=&#34;center&#34; style=&#34;display:inline-block;&#34;&gt;&lt;font face=&#34;Calisto MT&#34;&gt;&lt;font size=&#34;4&#34;&gt;An Open-source Framework for Autonomous Language Agents&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://arxiv.org/pdf/2309.07870.pdf&#34;&gt;[üìÑ Paper]&lt;/a&gt; &lt;a href=&#34;http://www.aiwaves-agents.com/&#34;&gt;[üåê Website]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/#web-demos&#34;&gt;[ü§ñÔ∏è Demos]&lt;/a&gt; &lt;a href=&#34;https://discord.gg/aNznfrYPeR&#34;&gt;[üî• Discord]&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/assets/wechat.jpg&#34;&gt;[üî• Wechat Group] &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Agents&lt;/strong&gt; is an open-source library/framework for building autonomous language agents. The library is carefully engineered to support important features including &lt;strong&gt;long-short term memory&lt;/strong&gt;, &lt;strong&gt;tool usage&lt;/strong&gt;, &lt;strong&gt;web navigation&lt;/strong&gt;, &lt;strong&gt;multi-agent communication&lt;/strong&gt;, and brand new features including &lt;strong&gt;human-agent interaction&lt;/strong&gt; and &lt;strong&gt;symbolic control&lt;/strong&gt;. With &lt;strong&gt;Agents&lt;/strong&gt;, one can customize a language agent or a multi-agent system by simply filling in a config file in natural language and deploy the language agents in a terminal, a Gradio interface, or a backend service.&lt;/p&gt; &#xA;&lt;p&gt;One major difference between &lt;strong&gt;Agents&lt;/strong&gt; and other existing frameworks for language agents is that our framework allows users to provide fine-grained control and guidance to language agents via an &lt;strong&gt;SOP (Standard Operation Process)&lt;/strong&gt;. An SOP defines subgoals/subtasks for the overall task and allows users to customize a fine-grained workflow for the language agents.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aiwaves-cn/agents/master/assets/agents-cover.png&#34; width=&#34;800&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üì¢ Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support LLM-based SOP generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 2023.9.12 Offical Release&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí° Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Long-short Term Memory&lt;/strong&gt;: Language agents in the library are equipped with both long-term memory implemented via VectorDB + Semantic Search and short-term memory (working memory) maintained and updated by an LLM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tool Usage&lt;/strong&gt;: Language agents in the library can use any external tools via &lt;a href=&#34;https://platform.openai.com/docs/guides/gpt/function-calling&#34;&gt;function-calling&lt;/a&gt; and developers can add customized tools/APIs &lt;a href=&#34;https://github.com/aiwaves-cn/agents/raw/master/src/agents/Component/ToolComponent.py&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Navigation&lt;/strong&gt;: Language agents in the library can use search engines to navigate the web and get useful information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-agent Communication&lt;/strong&gt;: In addition to single language agents, the library supports building multi-agent systems in which language agents can communicate with other language agents and the environment. Different from most existing frameworks for multi-agent systems that use pre-defined rules to control the order for agents&#39; action, &lt;strong&gt;Agents&lt;/strong&gt; includes a &lt;em&gt;controller&lt;/em&gt; function that dynamically decides which agent will perform the next action using an LLM by considering the previous actions, the environment, and the target of the current states. This makes multi-agent communication more flexible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Human-Agent interaction&lt;/strong&gt;: In addition to letting language agents communicate with each other in an environment, our framework seamlessly supports human users to play the role of the agent by himself/herself and input his/her own actions, and interact with other language agents in the environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Symbolic Control&lt;/strong&gt;: Different from existing frameworks for language agents that only use a simple task description to control the entire multi-agent system over the whole task completion process, &lt;strong&gt;Agents&lt;/strong&gt; allows users to use an &lt;strong&gt;SOP (Standard Operation Process)&lt;/strong&gt; that defines subgoals/subtasks for the overall task to customize fine-grained workflows for the language agents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ† Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Option 1. Build from source&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/aiwaves-cn/agents.git&#xA;cd agents&#xA;pip install -e . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Option 2. Install via PyPI&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install ai-agents&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üì¶ Usage&lt;/h2&gt; &#xA;&lt;h3&gt;üõ†Ô∏è Generate the config file&lt;/h3&gt; &#xA;&lt;h4&gt;Option 1. Fill in the config template manually&lt;/h4&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;example/{Muti|Single_Agent}/{target_agent}/config.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Option 2. Try our &lt;a href=&#34;http://www.aiwaves.cn/create-agent/&#34;&gt;WebUI&lt;/a&gt; for customizing the config file.&lt;/h4&gt; &#xA;&lt;p&gt;Haven&#39;t figured out how to write the JSON file yet? Check out our &lt;a href=&#34;https://agents-readthedocsio.readthedocs.io/en/latest/index.html&#34;&gt;documentation&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;ü§ñÔ∏è The Agent Hub&lt;/h3&gt; &#xA;&lt;p&gt;We provide an &lt;strong&gt;AgentHub&lt;/strong&gt;, where you can search for interesting Agents shared by us or other developers, try them out or use them as the starting point to customize your own agent. We encourage you to share your customized agents to help others build their own agents more easily! You can share your customized agents by submitting PRs that adds configs and customized codes &lt;a href=&#34;https://github.com/aiwaves-cn/agents/tree/master/examples/Community_Agent&#34;&gt;here&lt;/a&gt;. You can also send us your own config files and codes for customized agents by &lt;a href=&#34;mailto:contact@aiwaves.cn&#34;&gt;email&lt;/a&gt;, and we will share your examples and acknowledge your contribution in future updates!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;A WebUI for automatically uploading of your customized agents will be available soon!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üì∑ Examples and Demos&lt;/h2&gt; &#xA;&lt;p&gt;We have provided exemplar config files, code, and demos for both single-agent and multi-agent systems &lt;a href=&#34;https://github.com/aiwaves-cn/agents/tree/master/examples&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web demos&lt;/h3&gt; &#xA;&lt;h4&gt;NoteÔºöDue to massive traffic, our online demos may suffer from long queue time and unstable issues. Please follow our &lt;a href=&#34;https://github.com/aiwaves-cn/agents/raw/master/examples/README.md&#34;&gt;quick start guide&lt;/a&gt;) and deploy language agents locally for testing. Or checkout our &lt;a href=&#34;http://www.aiwaves-agents.com/&#34;&gt;website&lt;/a&gt;.&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/customer-service-agent/&#34;&gt;Customer Service Agent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/debate/&#34;&gt;Debate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/software-company/&#34;&gt;Software Company&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.aiwaves.cn/fiction-studio/&#34;&gt;Fiction Studio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Agents&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate your interest in contributing to our open-source initiative. Please feel free to submit a PR or share your thoughts on how to improve the library in Issues!&lt;/p&gt; &#xA;&lt;h2&gt;üìö Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please check our &lt;a href=&#34;https://agents-readthedocsio.readthedocs.io/en/latest/index.html&#34;&gt;documentation&lt;/a&gt; for detailed documentation of the framework.&lt;/p&gt; &#xA;&lt;h2&gt;‚≠ê Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#aiwaves-cn/agents&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=aiwaves-cn/agents&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our repo useful in your research, please kindly consider cite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-angular2&#34;&gt;@misc{zhou2023agents,&#xA;      title={Agents: An Open-source Framework for Autonomous Language Agents}, &#xA;      author={Wangchunshu Zhou and Yuchen Eleanor Jiang and Long Li and Jialong Wu and Tiannan Wang and Shi Qiu and Jintian Zhang and Jing Chen and Ruipu Wu and Shuai Wang and Shiding Zhu and Jiyu Chen and Wentao Zhang and Ningyu Zhang and Huajun Chen and Peng Cui and Mrinmaya Sachan},&#xA;      year={2023},&#xA;      eprint={2309.07870},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CL}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sczhou/ProPainter</title>
    <updated>2023-09-18T01:37:39Z</updated>
    <id>tag:github.com,2023-09-18:/sczhou/ProPainter</id>
    <link href="https://github.com/sczhou/ProPainter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[ICCV 2023] ProPainter: Improving Propagation and Transformer for Video Inpainting&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;div class=&#34;logo&#34;&gt; &#xA;  &lt;a href=&#34;https://shangchenzhou.com/projects/ProPainter/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/propainter_logo1_glow.png&#34; style=&#34;width:180px&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;h1&gt;ProPainter: Improving Propagation and Transformer for Video Inpainting&lt;/h1&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://shangchenzhou.com/&#34; target=&#34;_blank&#34;&gt;Shangchen Zhou&lt;/a&gt;‚ÄÉ &#xA;  &lt;a href=&#34;https://li-chongyi.github.io/&#34; target=&#34;_blank&#34;&gt;Chongyi Li&lt;/a&gt;‚ÄÉ &#xA;  &lt;a href=&#34;https://ckkelvinchan.github.io/&#34; target=&#34;_blank&#34;&gt;Kelvin C.K. Chan&lt;/a&gt;‚ÄÉ &#xA;  &lt;a href=&#34;https://www.mmlab-ntu.com/person/ccloy/&#34; target=&#34;_blank&#34;&gt;Chen Change Loy&lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt;&#xA;   S-Lab, Nanyang Technological University‚ÄÉ &#xA; &lt;/div&gt; &#xA; &lt;div&gt; &#xA;  &lt;strong&gt;ICCV 2023&lt;/strong&gt; &#xA; &lt;/div&gt; &#xA; &lt;div&gt; &#xA;  &lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://shangchenzhou.com/projects/ProPainter&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/üê≥-Project%20Page-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2309.03897&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/arXiv-2309.03897-b31b1b.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://youtu.be/Cc89WF-2zz0&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Demo%20Video-%23FF0000.svg?logo=YouTube&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://api.infinitescript.com/badgen/count?name=sczhou/ProPainter&#34;&gt; &lt;/h4&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;‚≠ê If ProPainter is helpful to your projects, please help star this repo. Thanks! ü§ó&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;üìñ&lt;/span&gt; For more visual results, go checkout our &lt;a href=&#34;https://shangchenzhou.com/projects/ProPainter/&#34; target=&#34;_blank&#34;&gt;project page&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Update&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.07&lt;/strong&gt;: Our code and model are publicly available. &lt;span&gt;üê≥&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023.09.01&lt;/strong&gt;: This repo is created.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;h4&gt;üèÇ Object Removal&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/object_removal1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/object_removal2.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;üåà Watermark Removal&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/watermark_removal1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/watermark_removal2.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h4&gt;üé® Video Completion&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/video_completion1.gif&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/video_completion2.gif&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/assets/ProPainter_pipeline.png&#34; alt=&#34;overall_structure&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies and Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone Repo&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sczhou/ProPainter.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create Conda Environment and Install Dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda env create -f environment.yaml&#xA;conda activate propainter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python &amp;gt;= 3.7&lt;/li&gt; &#xA;   &lt;li&gt;PyTorch &amp;gt;= 1.6.0&lt;/li&gt; &#xA;   &lt;li&gt;CUDA &amp;gt;= 9.2&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmcv/tree/v1.4.8#installation&#34;&gt;mmcv-full&lt;/a&gt; (refer the command table to install v1.4.8)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prepare pretrained models&lt;/h3&gt; &#xA;&lt;p&gt;Download our pretrained models from &lt;a href=&#34;https://github.com/sczhou/ProPainter/releases/tag/v0.1.0&#34;&gt;Releases V0.1.0&lt;/a&gt; to the &lt;code&gt;weights&lt;/code&gt; folder. (All pretrained models can also be automatically downloaded during the first inference.)&lt;/p&gt; &#xA;&lt;p&gt;The directory structure will be arranged as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;weights&#xA;   |- ProPainter.pth&#xA;   |- recurrent_flow_completion.pth&#xA;   |- raft-things.pth&#xA;   |- i3d_rgb_imagenet.pt (for evaluating VFID metric)&#xA;   |- README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Quick test&lt;/h3&gt; &#xA;&lt;p&gt;We provide some examples in the &lt;a href=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/inputs&#34;&gt;&lt;code&gt;inputs&lt;/code&gt;&lt;/a&gt; folder. Run the following commands to try it out:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# The first example (object removal)&#xA;python inference_propainter.py --video inputs/object_removal/bmx-trees --mask inputs/object_removal/bmx-trees_mask &#xA;# The second example (watermark removal)&#xA;python inference_propainter.py --video inputs/watermark_removal/running_car.mp4 --mask inputs/watermark_removal/mask.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The results will be saved in the &lt;code&gt;results&lt;/code&gt; folder. To test your own videos, please prepare the input &lt;code&gt;mp4 video&lt;/code&gt; (or &lt;code&gt;split frames&lt;/code&gt;) and &lt;code&gt;frame-wise mask(s)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Dataset preparation for training and evaluation&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dataset&lt;/th&gt; &#xA;   &lt;th&gt;YouTube-VOS&lt;/th&gt; &#xA;   &lt;th&gt;DAVIS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Description&lt;/td&gt; &#xA;   &lt;td&gt;For training (3,471) and evaluation (508)&lt;/td&gt; &#xA;   &lt;td&gt;For evaluation (50 in 90)&lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Images&lt;/td&gt; &#xA;   &lt;td&gt; [&lt;a href=&#34;https://competitions.codalab.org/competitions/19544#participate-get-data&#34;&gt;Official Link&lt;/a&gt;] (Download train and test all frames) &lt;/td&gt; &#xA;   &lt;td&gt; [&lt;a href=&#34;https://data.vision.ee.ethz.ch/csergi/share/davis/DAVIS-2017-trainval-480p.zip&#34;&gt;Official Link&lt;/a&gt;] (2017, 480p, TrainVal) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Masks&lt;/td&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; [&lt;a href=&#34;https://drive.google.com/file/d/1dFTneS_zaJAHjglxU10gYzr1-xALgHa4/view?usp=sharing&#34;&gt;Google Drive&lt;/a&gt;] [&lt;a href=&#34;https://pan.baidu.com/s/1JC-UKmlQfjhVtD81196cxA?pwd=87e3&#34;&gt;Baidu Disk&lt;/a&gt;] (For reproducing paper results; provided in &lt;a href=&#34;https://github.com/MCG-NKU/E2FGVI&#34;&gt;E&lt;sup&gt;2&lt;/sup&gt;FGVI&lt;/a&gt; paper) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The training and test split files are provided in &lt;code&gt;datasets/&amp;lt;dataset_name&amp;gt;&lt;/code&gt;. For each dataset, you should place &lt;code&gt;JPEGImages&lt;/code&gt; to &lt;code&gt;datasets/&amp;lt;dataset_name&amp;gt;&lt;/code&gt;. Resize all video frames to size &lt;code&gt;432x240&lt;/code&gt; for training. Unzip downloaded mask files to &lt;code&gt;datasets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;datasets&lt;/code&gt; directory structure will be arranged as: (&lt;strong&gt;Note&lt;/strong&gt;: please check it carefully)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;datasets&#xA;   |- davis&#xA;      |- JPEGImages_432_240&#xA;         |- &amp;lt;video_name&amp;gt;&#xA;            |- 00000.jpg&#xA;            |- 00001.jpg&#xA;      |- test_masks&#xA;         |- &amp;lt;video_name&amp;gt;&#xA;            |- 00000.png&#xA;            |- 00001.png   &#xA;      |- train.json&#xA;      |- test.json&#xA;   |- youtube-vos&#xA;      |- JPEGImages_432_240&#xA;         |- &amp;lt;video_name&amp;gt;&#xA;            |- 00000.jpg&#xA;            |- 00001.jpg&#xA;      |- test_masks&#xA;         |- &amp;lt;video_name&amp;gt;&#xA;            |- 00000.png&#xA;            |- 00001.png&#xA;      |- train.json&#xA;      |- test.json   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluation&lt;/h3&gt; &#xA;&lt;p&gt;Run one of the following commands for evaluation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; # For evaluating flow completion model&#xA; python scripts/evaluate_flow_completion.py --dataset &amp;lt;dataset_name&amp;gt; --video_root &amp;lt;video_root&amp;gt; --mask_root &amp;lt;mask_root&amp;gt; --save_results&#xA; # For evaluating ProPainter model&#xA; python scripts/evaluate_propainter.py --dataset &amp;lt;dataset_name&amp;gt; --video_root &amp;lt;video_root&amp;gt; --mask_root &amp;lt;mask_root&amp;gt; --save_results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The scores and results will also be saved in the &lt;code&gt;results_eval&lt;/code&gt; folder. Please &lt;code&gt;--save_results&lt;/code&gt; for further &lt;a href=&#34;https://github.com/phoenix104104/fast_blind_video_consistency#evaluation&#34;&gt;evaluating temporal warping error&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;p&gt;Our training configures are provided in &lt;a href=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/configs/train_flowcomp.json&#34;&gt;&lt;code&gt;train_flowcomp.json&lt;/code&gt;&lt;/a&gt; (for Recurrent Flow Completion Network) and &lt;a href=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/configs/train_propainter.json&#34;&gt;&lt;code&gt;train_propainter.json&lt;/code&gt;&lt;/a&gt; (for ProPainter).&lt;/p&gt; &#xA;&lt;p&gt;Run one of the following commands for training:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt; # For training Recurrent Flow Completion Network&#xA; python train.py -c configs/train_flowcomp.json&#xA; # For training ProPainter&#xA; python train.py -c configs/train_propainter.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the &lt;strong&gt;same command&lt;/strong&gt; to &lt;strong&gt;resume&lt;/strong&gt; your training.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our repo useful for your research, please consider citing our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{zhou2023propainter,&#xA;   title={{ProPainter}: Improving Propagation and Transformer for Video Inpainting},&#xA;   author={Zhou, Shangchen and Li, Chongyi and Chan, Kelvin C.K and Loy, Chen Change},&#xA;   booktitle={Proceedings of IEEE International Conference on Computer Vision (ICCV)},&#xA;   year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under &lt;a rel=&#34;license&#34; href=&#34;https://raw.githubusercontent.com/sczhou/ProPainter/main/LICENSE&#34;&gt;NTU S-Lab License 1.0&lt;/a&gt;. Redistribution and use should follow this license.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, please feel free to reach me out at &lt;code&gt;shangchenzhou@gmail.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;This code is based on &lt;a href=&#34;https://github.com/MCG-NKU/E2FGVI&#34;&gt;E&lt;sup&gt;2&lt;/sup&gt;FGVI&lt;/a&gt; and &lt;a href=&#34;https://github.com/researchmm/STTN&#34;&gt;STTN&lt;/a&gt;. Some code are brought from &lt;a href=&#34;https://github.com/ckkelvinchan/BasicVSR_PlusPlus&#34;&gt;BasicVSR++&lt;/a&gt;. Thanks for their awesome works.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sagemath/sage</title>
    <updated>2023-09-18T01:37:39Z</updated>
    <id>tag:github.com,2023-09-18:/sagemath/sage</id>
    <link href="https://github.com/sagemath/sage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main repository of SageMath. Now open for Issues and Pull Requests.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://sagemath.org&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;src/doc/common/static/logo_sagemath_white.svg&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/src/doc/common/static/logo_sagemath_black.svg?sanitize=true&#34; height=&#34;60&#34; align=&#34;left&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Sage: Open Source Mathematical Software&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Creating a Viable Open Source Alternative to Magma, Maple, Mathematica, and MATLAB&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Copyright (C) 2005-2023 The Sage Development Team&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sagemath.org&#34;&gt;https://www.sagemath.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Sage Library is free software released under the GNU General Public Licence GPLv2+, and included packages have &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/COPYING.txt&#34;&gt;compatible software licenses&lt;/a&gt;. &lt;a href=&#34;https://www.sagemath.org/development-map.html&#34;&gt;Over 800 people&lt;/a&gt; have contributed code to Sage. In many cases, documentation for modules and functions list the authors.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/index.html&#34;&gt;Sage Installation Guide&lt;/a&gt; provides a decision tree that guides you to the type of installation that will work best for you. This includes building from source, obtaining Sage from a package manager, using a container image, or using Sage in the cloud.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This README contains self-contained instructions for building Sage from source.&lt;/strong&gt; It assumes that you have already cloned the git repository or downloaded the &lt;a href=&#34;https://www.sagemath.org/download-source.html&#34;&gt;sources&lt;/a&gt; in the form of a tarball.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions or encounter problems, please do not hesitate to email the &lt;a href=&#34;https://groups.google.com/group/sage-support&#34;&gt;sage-support mailing list&lt;/a&gt; or ask on the &lt;a href=&#34;https://ask.sagemath.org&#34;&gt;Ask Sage questions and answers site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;p&gt;Sage attempts to support all major Linux distributions, recent versions of macOS, and Windows (using Windows Subsystem for Linux or virtualization).&lt;/p&gt; &#xA;&lt;p&gt;Detailed information on supported platforms for a specific version of Sage can be found in the section &#34;Availability and installation help&#34; of the &lt;a href=&#34;https://wiki.sagemath.org/ReleaseTours&#34;&gt;release tour&lt;/a&gt; for this version.&lt;/p&gt; &#xA;&lt;p&gt;We highly appreciate contributions to Sage that fix portability bugs and help port Sage to new platforms; let us know at the &lt;a href=&#34;https://groups.google.com/group/sage-devel&#34;&gt;sage-devel mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;[Windows] Preparing the Platform&lt;/h2&gt; &#xA;&lt;p&gt;The preferred way to run Sage on Windows is using the &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/faq&#34;&gt;Windows Subsystem for Linux&lt;/a&gt;, a.k.a. WSL, which allows you to install a standard Linux distribution such as Ubuntu within your Windows. Make sure you allocate WSL sufficient RAM; 5GB is known to work, while 2GB might be not enough for building Sage from source. Then all instructions for installation in Linux apply.&lt;/p&gt; &#xA;&lt;p&gt;As an alternative, you can also run Linux on Windows using Docker (see below) or other virtualization solutions.&lt;/p&gt; &#xA;&lt;h2&gt;[macOS] Preparing the Platform&lt;/h2&gt; &#xA;&lt;p&gt;If your Mac uses the Apple Silicon (M1, arm64) architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you set up your Mac by transfering files from an older Mac, make sure that the directory &lt;code&gt;/usr/local&lt;/code&gt; does not contain an old copy of Homebrew (or other software) for the x86_64 architecture that you may have copied over. Note that Homebrew for the M1 is installed in &lt;code&gt;/opt/homebrew&lt;/code&gt;, not &lt;code&gt;/usr/local&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you wish to use conda, please see the &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/conda.html&#34;&gt;section on conda&lt;/a&gt; in the Sage Installation Manual for guidance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, using Homebrew (&#34;the missing package manager for macOS&#34;) from &lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt; required because it provides a version of &lt;code&gt;gfortran&lt;/code&gt; with necessary changes for this platform that are not in a released upstream version of GCC. (The &lt;code&gt;gfortran&lt;/code&gt; package that comes with the Sage distribution is not suitable for the M1/M2.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your Mac uses the Intel (x86_64) architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you wish to use conda, please see the &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/conda.html&#34;&gt;section on conda&lt;/a&gt; in the Sage Installation Manual for guidance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, we strongly recommend to use Homebrew (&#34;the missing package manager for macOS&#34;) from &lt;a href=&#34;https://brew.sh/&#34;&gt;https://brew.sh/&lt;/a&gt;, which provides the &lt;code&gt;gfortran&lt;/code&gt; compiler and many libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Otherwise, if you do not wish to install Homebrew, you will need to install the latest version of Xcode Command Line Tools. Open a terminal window and run &lt;code&gt;xcode-select --install&lt;/code&gt;; then click &#34;Install&#34; in the pop-up window. If the Xcode Command Line Tools are already installed, you may want to check if they need to be updated by typing &lt;code&gt;softwareupdate -l&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Instructions to Build from Source&lt;/h2&gt; &#xA;&lt;p&gt;Like many other software packages, Sage is built from source using &lt;code&gt;./configure&lt;/code&gt;, followed by &lt;code&gt;make&lt;/code&gt;. However, we strongly recommend to read the following step-by-step instructions for building Sage.&lt;/p&gt; &#xA;&lt;p&gt;The instructions cover all of Linux, macOS, and WSL.&lt;/p&gt; &#xA;&lt;p&gt;More details, providing a background for these instructions, can be found in the &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/source.html&#34;&gt;section &#34;Install from Source Code&#34;&lt;/a&gt;. in the Installation Guide.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Decide on the source/build directory (&lt;code&gt;SAGE_ROOT&lt;/code&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;On personal computers, any subdirectory of your :envvar:&lt;code&gt;HOME&lt;/code&gt; directory should do.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;For example, you could use &lt;code&gt;SAGE_ROOT=~/sage/sage-x.y&lt;/code&gt;, which we will use as the running example below, where &lt;code&gt;x.y&lt;/code&gt; is the current Sage version.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You need at least 10 GB of free disk space.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The full path to the source directory must contain &lt;strong&gt;no spaces&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;After starting the build, you cannot move the source/build directory without breaking things.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You may want to avoid slow filesystems such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Network_File_System&#34;&gt;network file systems (NFS)&lt;/a&gt; and the like.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[macOS] macOS allows changing directories without using exact capitalization. Beware of this convenience when compiling for macOS. Ignoring exact capitalization when changing into :envvar:&lt;code&gt;SAGE_ROOT&lt;/code&gt; can lead to build errors for dependencies requiring exact capitalization in path names.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download/unpack or clone the sources.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;https://www.sagemath.org/download-source.html&#34;&gt;https://www.sagemath.org/download-source.html&lt;/a&gt;, select a mirror, and download the file :file:&lt;code&gt;sage-x.y.tar.gz&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This compressed archive file contains the source code for Sage and the source for all programs on which Sage depends.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;After downloading the source tarball &lt;code&gt;sage-x.y.tar.gz&lt;/code&gt; into &lt;code&gt;~/sage/&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ cd ~/sage/&#xA;  $ tar xf sage-x.y.tar.gz  # adapt x.y; takes a while&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This creates the subdirectory &lt;code&gt;sage-x.y&lt;/code&gt;. Now change into it:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ cd sage-x.y/  # adapt x.y&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[Git] Alternatively, and required for Sage development, clone the Sage git repository:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ ORIG=https://github.com/sagemath/sage.git&#xA;  $ git clone -c core.symlinks=true --branch develop --tags $ORIG&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create the directory &lt;code&gt;sage&lt;/code&gt;. (See the section &lt;a href=&#34;https://doc.sagemath.org/html/en/developer/git_setup.html&#34;&gt;Setting up git&lt;/a&gt; and the following sections in the Sage Developer&#39;s Guide for more information.)&lt;/p&gt; &lt;p&gt;Change into it and pick the branch you need, typically the latest development branch:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ cd sage&#xA;  $ git checkout develop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[Windows] The Sage source tree contains symbolic links, and the build will not work if Windows line endings rather than UNIX line endings are used.&lt;/p&gt; &lt;p&gt;Therefore it is crucial that you unpack the source tree from the WSL &lt;code&gt;bash&lt;/code&gt; using the WSL &lt;code&gt;tar&lt;/code&gt; utility and not using other Windows tools (including mingw). Likewise, when using &lt;code&gt;git&lt;/code&gt;, it is recommended (but not necessary) to use the WSL version of &lt;code&gt;git&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Linux, WSL] Install the required minimal build prerequisites.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Compilers: &lt;code&gt;gcc&lt;/code&gt;, &lt;code&gt;gfortran&lt;/code&gt;, &lt;code&gt;g++&lt;/code&gt; (GCC versions from 8.4.0 to 13.x and recent versions of Clang (LLVM) are supported). See &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/gcc/SPKG.rst&#34;&gt;build/pkgs/gcc/SPKG.rst&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/gfortran/SPKG.rst&#34;&gt;build/pkgs/gfortran/SPKG.rst&lt;/a&gt; for a discussion of suitable compilers.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Build tools: GNU &lt;code&gt;make&lt;/code&gt;, GNU &lt;code&gt;m4&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt; (including &lt;code&gt;ExtUtils::MakeMaker&lt;/code&gt;), &lt;code&gt;ranlib&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;bc&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/SPKG.rst&#34;&gt;build/pkgs/_prereq/SPKG.rst&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Python 3.4 or later, or Python 2.7, a full installation including &lt;code&gt;urllib&lt;/code&gt;; but ideally version 3.9.x, 3.10.x, or 3.11.x, which will avoid having to build Sage&#39;s own copy of Python 3. See &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/python3/SPKG.rst&#34;&gt;build/pkgs/python3/SPKG.rst&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;We have collected lists of system packages that provide these build prerequisites. See, in the folder &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/distros&#34;&gt;build/pkgs/_prereq/distros&lt;/a&gt;, the files &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/distros/arch.txt&#34;&gt;arch.txt&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/distros/debian.txt&#34;&gt;debian.txt&lt;/a&gt; (also for Ubuntu, Linux Mint, etc.), &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/distros/fedora.txt&#34;&gt;fedora.txt&lt;/a&gt; (also for Red Hat, CentOS), &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/distros/opensuse.txt&#34;&gt;opensuse.txt&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/distros/slackware.txt&#34;&gt;slackware.txt&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_prereq/distros/void.txt&#34;&gt;void.txt&lt;/a&gt;, or visit &lt;a href=&#34;https://doc.sagemath.org/html/en/reference/spkg/_prereq.html#spkg-prereq&#34;&gt;https://doc.sagemath.org/html/en/reference/spkg/_prereq.html#spkg-prereq&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Git] If you plan to do Sage development or otherwise work with ticket branches and not only releases, install the bootstrapping prerequisites. See the files in the folder &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/build/pkgs/_bootstrap/distros&#34;&gt;build/pkgs/_bootstrap/distros&lt;/a&gt;, or visit &lt;a href=&#34;https://doc.sagemath.org/html/en/reference/spkg/_bootstrap.html#spkg-bootstrap&#34;&gt;https://doc.sagemath.org/html/en/reference/spkg/_bootstrap.html#spkg-bootstrap&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Git] If you cloned the Sage repository using &lt;code&gt;git&lt;/code&gt;, bootstrap the source tree using the following command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make configure&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(If the bootstrapping prerequisites are not installed, this command will download a package providing pre-built bootstrap output instead.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sanitize the build environment. Use the command&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to inspect the current environment variables, in particular &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt;, &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;, &lt;code&gt;CFLAGS&lt;/code&gt;, &lt;code&gt;CPPFLAGS&lt;/code&gt;, &lt;code&gt;CXXFLAGS&lt;/code&gt;, and &lt;code&gt;LDFLAGS&lt;/code&gt; (if set).&lt;/p&gt; &lt;p&gt;Remove items from these (colon-separated) environment variables that Sage should not use for its own build. In particular, remove items if they refer to a previous Sage installation.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;[WSL] In particular, WSL imports many items from the Windows &lt;code&gt;PATH&lt;/code&gt; variable into the Linux environment, which can lead to confusing build errors. These items typically start with &lt;code&gt;/mnt/c&lt;/code&gt;. It is best to remove all of them from the environment variables. For example, you can set &lt;code&gt;PATH&lt;/code&gt; using the command:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ export PATH=/usr/sbin/:/sbin/:/bin/:/usr/lib/wsl/lib/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;[macOS with homebrew] Set required environment variables for the build:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  $ source ./.homebrew-build-env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is to make some of Homebrew&#39;s packages (so-called keg-only packages) available for the build. Run it once to apply the suggestions for the current terminal session. You may need to repeat this command before you rebuild Sage from a new terminal session, or after installing additional homebrew packages. (You can also add it to your shell profile so that it gets run automatically in all future sessions.)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally, decide on the installation prefix (&lt;code&gt;SAGE_LOCAL&lt;/code&gt;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Traditionally, and by default, Sage is installed into the subdirectory hierarchy rooted at &lt;code&gt;SAGE_ROOT/local/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This can be changed using &lt;code&gt;./configure --prefix=SAGE_LOCAL&lt;/code&gt;, where &lt;code&gt;SAGE_LOCAL&lt;/code&gt; is the desired installation prefix, which must be writable by the user.&lt;/p&gt; &lt;p&gt;If you use this option in combination with &lt;code&gt;--disable-editable&lt;/code&gt;, you can delete the entire Sage source tree after completing the build process. What is installed in &lt;code&gt;SAGE_LOCAL&lt;/code&gt; will be a self-contained installation of Sage.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Note that in Sage&#39;s build process, &lt;code&gt;make&lt;/code&gt; builds &lt;strong&gt;and&lt;/strong&gt; installs (&lt;code&gt;make install&lt;/code&gt; is a no-op). Therefore the installation hierarchy must be writable by the user.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;See the installation manual for options if you want to install into shared locations such as &lt;code&gt;/usr/local/&lt;/code&gt;. Do not attempt to build Sage as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: It is recommended that you have both LaTeX and the ImageMagick tools (e.g. the &#34;convert&#34; command) installed since some plotting functionality benefits from them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optionally, review the configuration options, which includes many optional packages:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ ./configure --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A notable option for Sage developers is the following:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;./configure --enable-download-from-upstream-url&lt;/code&gt; to allow downloading packages from their upstream URL if they cannot (yet) be found on the Sage mirrors. This is useful for trying out ticket branches that make package upgrades.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional, but highly recommended: Set some environment variables to customize the build.&lt;/p&gt; &lt;p&gt;For example, the &lt;code&gt;MAKE&lt;/code&gt; environment variable controls whether to run several jobs in parallel. On a machine with 4 processors, say, typing &lt;code&gt;export MAKE=&#34;make -j4&#34;&lt;/code&gt; will configure the build script to perform a parallel compilation of Sage using 4 jobs. On some powerful machines, you might even consider &lt;code&gt;-j16&lt;/code&gt;, as building with more jobs than CPU cores can speed things up further.&lt;/p&gt; &lt;p&gt;To reduce the terminal output during the build, type &lt;code&gt;export V=0&lt;/code&gt;. (&lt;code&gt;V&lt;/code&gt; stands for &#34;verbosity&#34;.)&lt;/p&gt; &lt;p&gt;Some environment variables deserve a special mention: &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;CXX&lt;/code&gt; and &lt;code&gt;FC&lt;/code&gt;. These variables defining your compilers can be set at configuration time and their values will be recorded for further use at build time and runtime.&lt;/p&gt; &lt;p&gt;For an in-depth discussion of more environment variables for building Sage, see &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/source.html#environment-variables&#34;&gt;the installation guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;./configure&lt;/code&gt;, followed by any options that you wish to use. For example, to build Sage with &lt;code&gt;gf2x&lt;/code&gt; package supplied by Sage, use &lt;code&gt;./configure --with-system-gf2x=no&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;At the end of a successful &lt;code&gt;./configure&lt;/code&gt; run, you may see messages recommending to install extra system packages using your package manager.&lt;/p&gt; &lt;p&gt;For a large &lt;a href=&#34;https://github.com/sagemath/sage/issues/27330&#34;&gt;list of Sage packages&lt;/a&gt;, Sage is able to detect whether an installed system package is suitable for use with Sage; in that case, Sage will not build another copy from source.&lt;/p&gt; &lt;p&gt;Sometimes, the messages will recommend to install packages that are already installed on your system. See the earlier configure messages or the file &lt;code&gt;config.log&lt;/code&gt; for explanation. Also, the messages may recommend to install packages that are actually not available; only the most recent releases of your distribution will have all of these recommended packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: If you choose to install the additional system packages, a re-run of &lt;code&gt;./configure&lt;/code&gt; will test whether the versions installed are usable for Sage; if they are, this will reduce the compilation time and disk space needed by Sage. The usage of packages may be adjusted by &lt;code&gt;./configure&lt;/code&gt; parameters (check again the output of &lt;code&gt;./configure --help&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;make&lt;/code&gt;. That&#39;s it! Everything is automatic and non-interactive.&lt;/p&gt; &lt;p&gt;If you followed the above instructions, in particular regarding the installation of system packages recommended by the output of &lt;code&gt;./configure&lt;/code&gt; (step 10), and regarding the parallel build (step 9), building Sage takes less than one hour on a modern computer. (Otherwise, it can take much longer.)&lt;/p&gt; &lt;p&gt;The build should work fine on all fully supported platforms. If it does not, we want to know!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type &lt;code&gt;./sage&lt;/code&gt; to try it out. In Sage, try for example &lt;code&gt;2 + 2&lt;/code&gt;, &lt;code&gt;plot(x^2)&lt;/code&gt;, &lt;code&gt;plot3d(lambda x, y: x*y, (-1, 1), (-1, 1))&lt;/code&gt; to test a simple computation and plotting in 2D and 3D. Type &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;D&lt;/kbd&gt; or &lt;code&gt;quit&lt;/code&gt; to quit Sage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: Type &lt;code&gt;make ptestlong&lt;/code&gt; to test all examples in the documentation (over 200,000 lines of input!) -- this takes from 10 minutes to several hours. Don&#39;t get too disturbed if there are 2 to 3 failures, but always feel free to email the section of &lt;code&gt;logs/ptestlong.log&lt;/code&gt; that contains errors to the &lt;a href=&#34;https://groups.google.com/group/sage-support&#34;&gt;sage-support mailing list&lt;/a&gt;. If there are numerous failures, there was a serious problem with your build.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The HTML version of the &lt;a href=&#34;https://doc.sagemath.org/html/en/index.html&#34;&gt;documentation&lt;/a&gt; is built during the compilation process of Sage and resides in the directory &lt;code&gt;local/share/doc/sage/html/&lt;/code&gt;. You may want to bookmark it in your browser.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: If you want to build the PDF version of the documentation, run &lt;code&gt;make doc-pdf&lt;/code&gt; (this requires LaTeX to be installed).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: Install optional packages of interest to you: get a list by typing &lt;code&gt;./sage --optional&lt;/code&gt; or by visiting the &lt;a href=&#34;https://doc.sagemath.org/html/en/reference/spkg/&#34;&gt;packages documentation page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: Create a symlink to the installed &lt;code&gt;sage&lt;/code&gt; script in a directory in your &lt;code&gt;PATH&lt;/code&gt;, for example &lt;code&gt;/usr/local&lt;/code&gt;. This will allow you to start Sage by typing &lt;code&gt;sage&lt;/code&gt; from anywhere rather than having to either type the full path or navigate to the Sage directory and type &lt;code&gt;./sage&lt;/code&gt;. This can be done by running:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ sudo ln -s $(./sage -sh -c &#39;ls $SAGE_ROOT/venv/bin/sage&#39;) /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: Set up SageMath as a Jupyter kernel in an existing Jupyter notebook or JupyterLab installation, as described in &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/launching.html&#34;&gt;section &#34;Launching SageMath&#34;&lt;/a&gt; in the installation manual.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Alternative Installation using PyPI&lt;/h2&gt; &#xA;&lt;p&gt;For installation of &lt;code&gt;sage&lt;/code&gt; in python using &lt;code&gt;pip&lt;/code&gt; you need to install &lt;code&gt;sagemath-standard&lt;/code&gt;. First, activate your python virtual environment and follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;        $ python3 -m pip install sage_conf&#xA;        $ ls $(sage-config SAGE_SPKG_WHEELS)&#xA;        $ python3 -m pip install $(sage-config SAGE_SPKG_WHEELS)/*.whl &#xA;        $ python3 -m pip install sagemath-standard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to install &lt;code&gt;sage_conf&lt;/code&gt;, a wheelhouse of various python packages. You can list the wheels using &lt;code&gt;ls $(sage-config SAGE_SPKG_WHEELS)&lt;/code&gt;. After manual installation of these wheels, you can install the sage library, &lt;code&gt;sagemath-standard&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can find &lt;code&gt;sage&lt;/code&gt; and &lt;code&gt;sagemath&lt;/code&gt; pip packages but with these packages, you will encounter &lt;code&gt;ModuleNotFoundError&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SageMath Docker images&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/sagemath/sagemath&#34;&gt;&lt;img src=&#34;http://dockeri.co/image/sagemath/sagemath&#34; alt=&#34;Docker Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SageMath is available on Docker Hub and can be downloaded by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull sagemath/sagemath&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, only stable versions are kept up to date.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have problems building Sage, check the Sage Installation Guide, as well as the version-specific Sage Installation FAQ in the &lt;a href=&#34;https://wiki.sagemath.org/ReleaseTours&#34;&gt;Sage Release Tour&lt;/a&gt; corresponding to the version that you are installing.&lt;/p&gt; &#xA;&lt;p&gt;Please do not hesitate to ask for help in the &lt;a href=&#34;https://ask.sagemath.org/questions/&#34;&gt;SageMath forum &lt;/a&gt; or the &lt;a href=&#34;https://groups.google.com/forum/#!forum/sage-support&#34;&gt;sage-support mailing list&lt;/a&gt;. The &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/troubles.html&#34;&gt;Troubleshooting section in the Sage Installation Guide &lt;/a&gt; provides instructions on what information to provide so that we can provide help more effectively.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Sage&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to Sage, we strongly recommend that you read the &lt;a href=&#34;https://doc.sagemath.org/html/en/developer/index.html&#34;&gt;Developer&#39;s Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sage has significant components written in the following languages: C/C++, Python, Cython, Common Lisp, Fortran, and a bit of Perl.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Layout&lt;/h2&gt; &#xA;&lt;p&gt;Simplified directory layout (only essential files/directories):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SAGE_ROOT                 Root directory (sage-x.y in Sage tarball)&#xA;‚îú‚îÄ‚îÄ build&#xA;‚îÇ   ‚îî‚îÄ‚îÄ pkgs              Every package is a subdirectory here&#xA;‚îÇ       ‚îú‚îÄ‚îÄ 4ti2/&#xA;‚îÇ       ‚Ä¶&#xA;‚îÇ       ‚îî‚îÄ‚îÄ zlib/&#xA;‚îú‚îÄ‚îÄ configure             Top-level configure script&#xA;‚îú‚îÄ‚îÄ COPYING.txt           Copyright information&#xA;‚îú‚îÄ‚îÄ pkgs                  Source trees of Python distribution packages&#xA;‚îÇ   ‚îú‚îÄ‚îÄ sage-conf&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sage_conf.py&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ setup.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ sage-docbuild&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sage_docbuild/&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ setup.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ sage-setup&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sage_setup/&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ setup.py&#xA;‚îÇ   ‚îú‚îÄ‚îÄ sage-sws2rst&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sage_sws2rst/&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ setup.py&#xA;‚îÇ   ‚îî‚îÄ‚îÄ sagemath-standard&#xA;‚îÇ       ‚îú‚îÄ‚îÄ bin/&#xA;‚îÇ       ‚îú‚îÄ‚îÄ sage -&amp;gt; ../../src/sage&#xA;‚îÇ       ‚îî‚îÄ‚îÄ setup.py&#xA;‚îú‚îÄ‚îÄ local  (SAGE_LOCAL)   Installation hierarchy for non-Python packages&#xA;‚îÇ   ‚îú‚îÄ‚îÄ bin               Executables&#xA;‚îÇ   ‚îú‚îÄ‚îÄ include           C/C++ headers&#xA;‚îÇ   ‚îú‚îÄ‚îÄ lib               Shared libraries, architecture-dependent data&#xA;‚îÇ   ‚îú‚îÄ‚îÄ share             Databases, architecture-independent data, docs&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ doc           Viewable docs of Sage and of some components&#xA;‚îÇ   ‚îî‚îÄ‚îÄ var&#xA;‚îÇ       ‚îú‚îÄ‚îÄ lib/sage&#xA;‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ installed/&#xA;‚îÇ       ‚îÇ   ‚îÇ             Records of installed non-Python packages&#xA;‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ scripts/  Scripts for uninstalling installed packages&#xA;‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ venv-python3.9  (SAGE_VENV)&#xA;‚îÇ       ‚îÇ       ‚îÇ         Installation hierarchy (virtual environment)&#xA;‚îÇ       ‚îÇ       ‚îÇ         for Python packages&#xA;‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ bin/  Executables and installed scripts&#xA;‚îÇ       ‚îÇ       ‚îú‚îÄ‚îÄ lib/python3.9/site-packages/&#xA;‚îÇ       ‚îÇ       ‚îÇ         Python modules/packages are installed here&#xA;‚îÇ       ‚îÇ       ‚îî‚îÄ‚îÄ var/lib/sage/&#xA;‚îÇ       ‚îÇ           ‚îî‚îÄ‚îÄ wheels/&#xA;‚îÇ       ‚îÇ                 Python wheels for all installed Python packages&#xA;‚îÇ       ‚îÇ&#xA;‚îÇ       ‚îî‚îÄ‚îÄ tmp/sage/     Temporary files when building Sage&#xA;‚îú‚îÄ‚îÄ logs&#xA;‚îÇ   ‚îú‚îÄ‚îÄ install.log       Full install log&#xA;‚îÇ   ‚îî‚îÄ‚îÄ pkgs              Build logs of individual packages&#xA;‚îÇ       ‚îú‚îÄ‚îÄ alabaster-0.7.12.log&#xA;‚îÇ       ‚Ä¶&#xA;‚îÇ       ‚îî‚îÄ‚îÄ zlib-1.2.11.log&#xA;‚îú‚îÄ‚îÄ m4                    M4 macros for generating the configure script&#xA;‚îÇ   ‚îî‚îÄ‚îÄ *.m4&#xA;‚îú‚îÄ‚îÄ Makefile              Running &#34;make&#34; uses this file&#xA;‚îú‚îÄ‚îÄ prefix -&amp;gt; SAGE_LOCAL  Convenience symlink to the installation tree&#xA;‚îú‚îÄ‚îÄ README.md             This file&#xA;‚îú‚îÄ‚îÄ sage                  Script to start Sage&#xA;‚îú‚îÄ‚îÄ src                   Monolithic Sage library source tree&#xA;‚îÇ   ‚îú‚îÄ‚îÄ bin/              Scripts that Sage uses internally&#xA;‚îÇ   ‚îú‚îÄ‚îÄ doc/              Sage documentation sources&#xA;‚îÇ   ‚îî‚îÄ‚îÄ sage/             The Sage library source code&#xA;‚îú‚îÄ‚îÄ upstream              Source tarballs of packages&#xA;‚îÇ   ‚îú‚îÄ‚îÄ Babel-2.9.1.tar.gz&#xA;‚îÇ   ‚Ä¶&#xA;‚îÇ   ‚îî‚îÄ‚îÄ zlib-1.2.11.tar.gz&#xA;‚îú‚îÄ‚îÄ venv -&amp;gt; SAGE_VENV     Convenience symlink to the virtual environment&#xA;‚îî‚îÄ‚îÄ VERSION.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details see &lt;a href=&#34;https://doc.sagemath.org/html/en/developer/coding_basics.html#files-and-directory-structure&#34;&gt;our Developer&#39;s Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build System&lt;/h2&gt; &#xA;&lt;p&gt;This is a brief summary of the Sage software distribution&#39;s build system. There are two components to the full Sage system--the Sage Python library and its associated user interfaces, and the larger software distribution of Sage&#39;s main dependencies (for those dependencies not supplied by the user&#39;s system).&lt;/p&gt; &#xA;&lt;p&gt;Sage&#39;s Python library is built and installed using a &lt;code&gt;setup.py&lt;/code&gt; script as is standard for Python packages (Sage&#39;s &lt;code&gt;setup.py&lt;/code&gt; is non-trivial, but not unusual).&lt;/p&gt; &#xA;&lt;p&gt;Most of the rest of the build system is concerned with building all of Sage&#39;s dependencies in the correct order in relation to each other. The dependencies included by Sage are referred to as SPKGs (i.e. &#34;Sage Packages&#34;) and are listed under &lt;code&gt;build/pkgs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main entrypoint to Sage&#39;s build system is the top-level &lt;code&gt;Makefile&lt;/code&gt; at the root of the source tree. Unlike most normal projects that use autoconf (Sage does as well, as described below), this &lt;code&gt;Makefile&lt;/code&gt; is not generated. Instead, it contains a few high-level targets and targets related to bootstrapping the system. Nonetheless, we still run &lt;code&gt;make &amp;lt;target&amp;gt;&lt;/code&gt; from the root of the source tree--targets not explicitly defined in the top-level &lt;code&gt;Makefile&lt;/code&gt; are passed through to another Makefile under &lt;code&gt;build/make/Makefile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latter &lt;code&gt;build/make/Makefile&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; generated by an autoconf-generated &lt;code&gt;configure&lt;/code&gt; script, using the template in &lt;code&gt;build/make/Makefile.in&lt;/code&gt;. This includes rules for building the Sage library itself (&lt;code&gt;make sagelib&lt;/code&gt;), and for building and installing each of Sage&#39;s dependencies (e.g. &lt;code&gt;make gf2x&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;configure&lt;/code&gt; script itself, if it is not already built, can be generated by running the &lt;code&gt;bootstrap&lt;/code&gt; script (the latter requires &lt;em&gt;GNU autotools&lt;/em&gt; being installed). The top-level &lt;code&gt;Makefile&lt;/code&gt; also takes care of this automatically.&lt;/p&gt; &#xA;&lt;p&gt;To summarize, running a command like &lt;code&gt;make python3&lt;/code&gt; at the top-level of the source tree goes something like this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;make python3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;./bootstrap&lt;/code&gt; if &lt;code&gt;configure&lt;/code&gt; needs updating&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;./configure&lt;/code&gt; with any previously configured options if &lt;code&gt;build/make/Makefile&lt;/code&gt; needs updating&lt;/li&gt; &#xA; &lt;li&gt;change directory into &lt;code&gt;build/make&lt;/code&gt; and run the &lt;code&gt;install&lt;/code&gt; script--this is little more than a front-end to running &lt;code&gt;make -f build/make/Makefile python3&lt;/code&gt;, which sets some necessary environment variables and logs some information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build/make/Makefile&lt;/code&gt; contains the actual rule for building &lt;code&gt;python3&lt;/code&gt;; this includes building all of &lt;code&gt;python3&lt;/code&gt;&#39;s dependencies first (and their dependencies, recursively); the actual package installation is performed with the &lt;code&gt;sage-spkg&lt;/code&gt; program&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Relocation&lt;/h2&gt; &#xA;&lt;p&gt;It is not supported to move the &lt;code&gt;SAGE_ROOT&lt;/code&gt; or &lt;code&gt;SAGE_LOCAL&lt;/code&gt; directory after building Sage. If you do move the directories, you will have to run &lt;code&gt;make distclean&lt;/code&gt; and build Sage again from scratch.&lt;/p&gt; &#xA;&lt;p&gt;For a system-wide installation, you have to build Sage as a &#34;normal&#34; user and then as root you can change permissions. See the &lt;a href=&#34;https://doc.sagemath.org/html/en/installation/source.html#installation-in-a-multiuser-environment&#34;&gt;Installation Guide&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Redistribution&lt;/h2&gt; &#xA;&lt;p&gt;Your local Sage install is almost exactly the same as any &#34;developer&#34; install. You can make changes to documentation, source, etc., and very easily package the complete results up for redistribution just like we do.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To make a binary distribution with your currently installed packages, visit &lt;a href=&#34;https://github.com/sagemath/binary-pkg&#34;&gt;sagemath/binary-pkg&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To make your own source tarball of Sage, type:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ make dist&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The result is placed in the directory &lt;code&gt;dist/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Changes to Included Software&lt;/h2&gt; &#xA;&lt;p&gt;All software included with Sage is copyrighted by the respective authors and released under an open source license that is &lt;strong&gt;GPL version 3 or later&lt;/strong&gt; compatible. See &lt;a href=&#34;https://raw.githubusercontent.com/sagemath/sage/develop/COPYING.txt&#34;&gt;COPYING.txt&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Sources are in unmodified (as far as possible) tarballs in the &lt;code&gt;upstream/&lt;/code&gt; directory. The remaining description, version information, patches, and build scripts are in the accompanying &lt;code&gt;build/pkgs/&amp;lt;packagename&amp;gt;&lt;/code&gt; directory. This directory is part of the Sage git repository.&lt;/p&gt;</summary>
  </entry>
</feed>