<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-23T01:36:54Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>triton-inference-server/server</title>
    <updated>2022-09-23T01:36:54Z</updated>
    <id>tag:github.com,2022-09-23:/triton-inference-server/server</id>
    <link href="https://github.com/triton-inference-server/server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Triton Inference Server provides an optimized cloud and edge inferencing solution.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Triton Inference Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-BSD3-lightgrey.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LATEST RELEASE: You are currently on the main branch which tracks under-development progress towards the next release. The current release is version &lt;a href=&#34;https://github.com/triton-inference-server/server/tree/r22.07&#34;&gt;2.24.0&lt;/a&gt; and corresponds to the 22.07 container release on &lt;a href=&#34;https://catalog.ngc.nvidia.com/orgs/nvidia/containers/tritonserver&#34;&gt;NVIDIA GPU Cloud (NGC)&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Triton Inference Server is an open source inference serving software that streamlines AI inferencing. Triton enables teams to deploy any AI model from multiple deep learning and machine learning frameworks, including TensorRT, TensorFlow, PyTorch, ONNX, OpenVINO, Python, RAPIDS FIL, and more. Triton supports inference across cloud, data center,edge and embedded devices on NVIDIA GPUs, x86 and ARM CPU, or AWS Inferentia. Triton delivers optimized performance for many query types, including real time, batched, ensembles and audio/video streaming.&lt;/p&gt; &#xA;&lt;p&gt;Major features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/triton-inference-server/backend#where-can-i-find-all-the-backends-that-are-available-for-triton&#34;&gt;Supports multiple deep learning frameworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/triton-inference-server/fil_backend&#34;&gt;Supports multiple machine learning frameworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/architecture.md#concurrent-model-execution&#34;&gt;Concurrent model execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/model_configuration.md#dynamic-batcher&#34;&gt;Dynamic batching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/model_configuration.md#sequence-batcher&#34;&gt;Sequence batching&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/architecture.md#implicit-state-management&#34;&gt;implicit state management&lt;/a&gt; for stateful models&lt;/li&gt; &#xA; &lt;li&gt;Provides &lt;a href=&#34;https://github.com/triton-inference-server/backend&#34;&gt;Backend API&lt;/a&gt; that allows adding custom backends and pre/post processing operations&lt;/li&gt; &#xA; &lt;li&gt;Model pipelines using &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/architecture.md#ensemble-models&#34;&gt;Ensembling&lt;/a&gt; or &lt;a href=&#34;https://github.com/triton-inference-server/python_backend#business-logic-scripting&#34;&gt;Business Logic Scripting (BLS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/inference_protocols.md&#34;&gt;HTTP/REST and GRPC inference protocols&lt;/a&gt; based on the community developed &lt;a href=&#34;https://github.com/kserve/kserve/tree/master/docs/predict-api/v2&#34;&gt;KServe protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/inference_protocols.md#in-process-triton-server-api&#34;&gt;C API&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/inference_protocols.md#java-bindings-for-in-process-triton-server-api&#34;&gt;Java API&lt;/a&gt; allow Triton to link directly into your application for edge and other in-process use cases&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/metrics.md&#34;&gt;Metrics&lt;/a&gt; indicating GPU utilization, server throughput, server latency, and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://www.nvidia.com/en-us/deep-learning-ai/triton-tensorrt-newsletter/&#34;&gt;Triton and TensorRT community&lt;/a&gt; and stay current on the latest product updates, bug fixes, content, best practices, and more. Need enterprise support? NVIDIA global support is available for Triton Inference Server with the &lt;a href=&#34;https://www.nvidia.com/en-us/data-center/products/ai-enterprise/&#34;&gt;NVIDIA AI Enterprise software suite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Serve a Model in 3 Easy Steps&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Step 1: Create the example model repository &#xA;git clone -b r22.07 https://github.com/triton-inference-server/server.git&#xA;cd server/docs/examples&#xA;./fetch_models.sh&#xA;&#xA;# Step 2: Launch triton from the NGC Triton container&#xA;docker run --gpus=1 --rm --net=host -v ${PWD}/model_repository:/models nvcr.io/nvidia/tritonserver:22.07-py3 tritonserver --model-repository=/models&#xA;&#xA;# Step 3: Sending an Inference Request &#xA;# In a separate console, launch the image_client example from the NGC Triton SDK container&#xA;docker run -it --rm --net=host nvcr.io/nvidia/tritonserver:22.07-py3-sdk&#xA;/workspace/install/bin/image_client -m densenet_onnx -c 3 -s INCEPTION /workspace/images/mug.jpg&#xA;&#xA;# Inference should return the following&#xA;Image &#39;/workspace/images/mug.jpg&#39;:&#xA;    15.346230 (504) = COFFEE MUG&#xA;    13.224326 (968) = CUP&#xA;    10.422965 (505) = COFFEEPOT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/getting_started/quickstart.md&#34;&gt;QuickStart&lt;/a&gt; guide for additional information regarding this example. The quickstart guide also contains an example of how to launch Triton on &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/getting_started/quickstart.md#run-on-cpu-only-system&#34;&gt;CPU-only systems&lt;/a&gt;. New to Triton and wondering where to get started? Watch the &lt;a href=&#34;https://youtu.be/NQDtfSi5QF4&#34;&gt;Getting Started video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://www.nvidia.com/en-us/data-center/products/ai-enterprise-suite/trial/&#34;&gt;NVIDIA LaunchPad&lt;/a&gt; for free access to a set of hands-on labs with Triton Inference Server hosted on NVIDIA infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;Specific end-to-end examples for popular models, such as ResNet, BERT, and DLRM are located in the &lt;a href=&#34;https://github.com/NVIDIA/DeepLearningExamples&#34;&gt;NVIDIA Deep Learning Examples&lt;/a&gt; page on GitHub. The &lt;a href=&#34;https://developer.nvidia.com/nvidia-triton-inference-server&#34;&gt;NVIDIA Developer Zone&lt;/a&gt; contains additional documentation, presentations, and examples.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Build and Deploy&lt;/h3&gt; &#xA;&lt;p&gt;The recommended way to build and use Triton Inference Server is with Docker images.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/build.md#building-triton-with-docker&#34;&gt;Install Triton Inference Server with Docker containers&lt;/a&gt; (&lt;em&gt;Recommended&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/build.md#building-triton-without-docker&#34;&gt;Install Triton Inference Server without Docker containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/compose.md&#34;&gt;Build a custom Triton Inference Server Docker container&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/build.md#building-on-unsupported-platforms&#34;&gt;Build Triton Inference Server from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/build.md#building-for-windows-10&#34;&gt;Build Triton Inference Server for Windows 10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Examples for deploying Triton Inference Server with Kubernetes and Helm on &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/deploy/gcp/README.md&#34;&gt;GCP&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/deploy/aws/README.md&#34;&gt;AWS&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/deploy/fleetcommand/README.md&#34;&gt;NVIDIA FleetCommand&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using Triton&lt;/h3&gt; &#xA;&lt;h4&gt;Preparing Models for Triton Inference Server&lt;/h4&gt; &#xA;&lt;p&gt;The first step in using Triton to serve your models is to place one or more models into a &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/model_repository.md&#34;&gt;model repository&lt;/a&gt;. Depending on the type of the model and on what Triton capabilities you want to enable for the model, you may need to create a &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/model_configuration.md&#34;&gt;model configuration&lt;/a&gt; for the model.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/custom_operations.md&#34;&gt;Add custom operations to Triton if needed by your model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enable model pipelining with &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/architecture.md#ensemble-models&#34;&gt;Model Ensemble&lt;/a&gt; and &lt;a href=&#34;https://github.com/triton-inference-server/python_backend#business-logic-scripting&#34;&gt;Business Logic Scripting (BLS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optimize your models setting &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/architecture.md#models-and-schedulers&#34;&gt;scheduling and batching&lt;/a&gt; parameters and &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/model_configuration.md#instance-groups&#34;&gt;model instances&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;https://github.com/triton-inference-server/model_analyzer&#34;&gt;Model Analyzer tool&lt;/a&gt; to help optimize your model configuration with profiling&lt;/li&gt; &#xA; &lt;li&gt;Learn how to &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/model_management.md&#34;&gt;explicitly manage what models are available by loading and unloading models&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Configure and Use Triton Inference Server&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/getting_started/quickstart.md&#34;&gt;Quick Start Guide&lt;/a&gt; to run Triton Inference Server on both GPU and CPU&lt;/li&gt; &#xA; &lt;li&gt;Triton supports multiple execution engines, called &lt;a href=&#34;https://github.com/triton-inference-server/backend#where-can-i-find-all-the-backends-that-are-available-for-triton&#34;&gt;backends&lt;/a&gt;, including &lt;a href=&#34;https://github.com/triton-inference-server/tensorrt_backend&#34;&gt;TensorRT&lt;/a&gt;, &lt;a href=&#34;https://github.com/triton-inference-server/tensorflow_backend&#34;&gt;TensorFlow&lt;/a&gt;, &lt;a href=&#34;https://github.com/triton-inference-server/pytorch_backend&#34;&gt;PyTorch&lt;/a&gt;, &lt;a href=&#34;https://github.com/triton-inference-server/onnxruntime_backend&#34;&gt;ONNX&lt;/a&gt;, &lt;a href=&#34;https://github.com/triton-inference-server/openvino_backend&#34;&gt;OpenVINO&lt;/a&gt;, &lt;a href=&#34;https://github.com/triton-inference-server/python_backend&#34;&gt;Python&lt;/a&gt;, and more&lt;/li&gt; &#xA; &lt;li&gt;Not all the above backends are supported on every platform supported by Triton. Look at the &lt;a href=&#34;https://github.com/triton-inference-server/backend/raw/main/docs/backend_platform_support_matrix.md&#34;&gt;Backend-Platform Support Matrix&lt;/a&gt; to learn which backends are supported on your target platform.&lt;/li&gt; &#xA; &lt;li&gt;Learn how to &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/optimization.md&#34;&gt;optimize performance&lt;/a&gt; using the &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/perf_analyzer.md&#34;&gt;Performance Analyzer&lt;/a&gt; and &lt;a href=&#34;https://github.com/triton-inference-server/model_analyzer&#34;&gt;Model Analyzer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Learn how to &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/model_management.md&#34;&gt;manage loading and unloading models&lt;/a&gt; in Triton&lt;/li&gt; &#xA; &lt;li&gt;Send requests directly to Triton with the &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/inference_protocols.md#httprest-and-grpc-protocols&#34;&gt;HTTP/REST JSON-based or gRPC protocols&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Client Support and Examples&lt;/h4&gt; &#xA;&lt;p&gt;A Triton &lt;em&gt;client&lt;/em&gt; application sends inference and other requests to Triton. The &lt;a href=&#34;https://github.com/triton-inference-server/client&#34;&gt;Python and C++ client libraries&lt;/a&gt; provide APIs to simplify this communication.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Review client examples for &lt;a href=&#34;https://github.com/triton-inference-server/client/raw/main/src/c%2B%2B/examples&#34;&gt;C++&lt;/a&gt;, &lt;a href=&#34;https://github.com/triton-inference-server/client/raw/main/src/python/examples&#34;&gt;Python&lt;/a&gt;, and &lt;a href=&#34;https://github.com/triton-inference-server/client/raw/main/src/java/src/main/java/triton/client/examples&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Configure &lt;a href=&#34;https://github.com/triton-inference-server/client#http-options&#34;&gt;HTTP&lt;/a&gt; and &lt;a href=&#34;https://github.com/triton-inference-server/client#grpc-options&#34;&gt;gRPC&lt;/a&gt; client options&lt;/li&gt; &#xA; &lt;li&gt;Send input data (e.g. a jpeg image) directly to Triton in the &lt;a href=&#34;https://github.com/triton-inference-server/server/raw/main/docs/protocol/extension_binary_data.md#raw-binary-request&#34;&gt;body of an HTTP request without any additional metadata&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extend Triton&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/architecture.md&#34;&gt;Triton Inference Server&#39;s architecture&lt;/a&gt; is specifically designed for modularity and flexibility&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/compose.md&#34;&gt;Customize Triton Inference Server container&lt;/a&gt; for your use case&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/triton-inference-server/backend&#34;&gt;Create custom backends&lt;/a&gt; in either &lt;a href=&#34;https://github.com/triton-inference-server/backend/raw/main/README.md#triton-backend-api&#34;&gt;C/C++&lt;/a&gt; or &lt;a href=&#34;https://github.com/triton-inference-server/python_backend&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/decoupled_models.md&#34;&gt;decouple backends and models&lt;/a&gt; that can send multiple responses for a request or not send any responses for a request&lt;/li&gt; &#xA; &lt;li&gt;Use a &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/customization_guide/repository_agents.md&#34;&gt;Triton repository agent&lt;/a&gt; to add functionality that operates when a model is loaded and unloaded, such as authentication, decryption, or conversion&lt;/li&gt; &#xA; &lt;li&gt;Deploy Triton on &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/jetson.md&#34;&gt;Jetson and JetPack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/triton-inference-server/python_backend/tree/main/inferentia&#34;&gt;Use Triton on AWS Inferentia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs/user_guide/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs#user-guide&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/docs#developer-guide&#34;&gt;Developer Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/deeplearning/triton-inference-server/release-notes/index.html&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.nvidia.com/deeplearning/dgx/support-matrix/index.html&#34;&gt;GPU, Driver, and CUDA Support Matrix&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Triton Inference Server are more than welcome. To contribute please review the &lt;a href=&#34;https://raw.githubusercontent.com/triton-inference-server/server/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. If you have a backend, client, example or similar contribution that is not modifying the core of Triton, then you should file a PR in the &lt;a href=&#34;https://github.com/triton-inference-server/contrib&#34;&gt;contrib repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting problems, asking questions&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate any feedback, questions or bug reporting regarding this project. When posting &lt;a href=&#34;https://github.com/triton-inference-server/server/issues&#34;&gt;issues in GitHub&lt;/a&gt;, follow the process outlined in the &lt;a href=&#34;https://stackoverflow.com/help/mcve&#34;&gt;Stack Overflow document&lt;/a&gt;. Ensure posted examples are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;minimal – use as little code as possible that still produces the same problem&lt;/li&gt; &#xA; &lt;li&gt;complete – provide all parts needed to reproduce the problem. Check if you can strip external dependencies and still show the problem. The less time we spend on reproducing problems the more time we have to fix it&lt;/li&gt; &#xA; &lt;li&gt;verifiable – test the code you&#39;re about to provide to make sure it reproduces the problem. Remove all other problems that are not related to your request/question.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;For more information&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://developer.nvidia.com/nvidia-triton-inference-server&#34;&gt;NVIDIA Developer Triton page&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kakaobrain/NeRF-Factory</title>
    <updated>2022-09-23T01:36:54Z</updated>
    <id>tag:github.com,2022-09-23:/kakaobrain/NeRF-Factory</id>
    <link href="https://github.com/kakaobrain/NeRF-Factory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An awesome PyTorch NeRF library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NeRF-Factory: An awesome PyTorch NeRF collection&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/33657821/191188990-d15744b5-c030-48ac-9669-2a0600bacdec.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kakaobrain.github.io/NeRF-Factory/&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/nrtf/nerf_factory&#34;&gt;Checkpoints&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Attention all NeRF researchers! We are here with a PyTorch-reimplemented large-scale NeRF library. Our library is easily extensible and usable.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/33657821/191189332-5684634a-f21f-42ef-ade9-140010ffba4c.gif&#34; alt=&#34;animated&#34; width=&#34;300&#34; height=&#34;300/&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/33657821/191189091-cb6bce5f-814f-4c09-8da4-af36af8455c2.gif&#34; alt=&#34;animated&#34; height=&#34;300/&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This contains PyTorch-implementation of 7 popular NeRF models.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NeRF: &lt;a href=&#34;https://www.matthewtancik.com/nerf&#34;&gt;[Project Page]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2003.08934&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://github.com/bmild/nerf&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeRF++: &lt;a href=&#34;http://arxiv.org/abs/2010.07492&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://github.com/Kai-46/nerfplusplus&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DVGO: &lt;a href=&#34;https://sunset1995.github.io/dvgo/&#34;&gt;[Project Page]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2111.11215&#34;&gt;[Paper-v1]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2206.05085&#34;&gt;[Paper-v2]&lt;/a&gt; &lt;a href=&#34;https://github.com/sunset1995/DirectVoxGO&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plenoxels: &lt;a href=&#34;https://alexyu.net/plenoxels/&#34;&gt;[Project Page]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2112.05131&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://github.com/sxyu/svox2&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mip-NeRF: &lt;a href=&#34;https://jonbarron.info/mipnerf/&#34;&gt;[Project Page]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2103.13415&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://github.com/google/mipnerf&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mip-NeRF360: &lt;a href=&#34;https://jonbarron.info/mipnerf360/&#34;&gt;[Project Page]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2111.12077&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://github.com/google-research/multinerf&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ref-NeRF: &lt;a href=&#34;https://dorverbin.github.io/refnerf/&#34;&gt;[Project Page]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2112.03907&#34;&gt;[Paper]&lt;/a&gt; &lt;a href=&#34;https://github.com/google-research/multinerf&#34;&gt;[Code]&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and also 7 popular NeRF datasets.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NeRF Blender: &lt;a href=&#34;https://drive.google.com/drive/folders/128yBriW1IG_3NJ5Rp7APSTZsJqdJdfc1&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeRF LLFF: &lt;a href=&#34;https://drive.google.com/drive/folders/128yBriW1IG_3NJ5Rp7APSTZsJqdJdfc1&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tanks and Temples: &lt;a href=&#34;https://drive.google.com/file/d/11KRfN91W1AxAW6lOFs4EeYDbeoQZCi87/view?usp=sharing&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LF: &lt;a href=&#34;https://drive.google.com/file/d/1gsjDjkbTh4GAR9fFqlIDZ__qR9NYTURQ/view?usp=sharing&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeRF-360: &lt;a href=&#34;https://drive.google.com/drive/folders/128yBriW1IG_3NJ5Rp7APSTZsJqdJdfc1&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NeRF-360-v2: &lt;a href=&#34;https://jonbarron.info/mipnerf360/&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Shiny Blender: &lt;a href=&#34;https://dorverbin.github.io/refnerf/&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You only need to do for running the code is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m run --ginc configs/[model]/[data].gin&#xA;# ex) python3 -m run --ginc configs/nerf/blender.gin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also provide convenient visualizers for NeRF researchers.&lt;/p&gt; &#xA;&lt;h2&gt;Contributor&lt;/h2&gt; &#xA;&lt;p&gt;This project is created and maintained by &lt;a href=&#34;https://github.com/jeongyw12382&#34;&gt;Yoonwoo Jeong&lt;/a&gt;, &lt;a href=&#34;https://github.com/seungjooshin&#34;&gt;Seungjoo Shin&lt;/a&gt;, and &lt;a href=&#34;https://github.com/parkkibaek&#34;&gt;Kibaek Park&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda create -n nerf_factory -c anaconda python=3.8&#xA;conda install pytorch==1.11.0 torchvision==0.12.0 torchaudio==0.11.0 cudatoolkit=11.3 -c pytorch&#xA;pip3 install -r requirements.txt&#xA;&#xA;## Optional(Plenoxel)&#xA;pip3 install .&#xA;&#xA;## Or you could directly build from nerf_factory.yml&#xA;conda env create --file nerf_factory.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m run --ginc configs/[model]/[data].gin&#xA;# ex) python3 -m run --ginc configs/nerf/blender.gin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preparing Dataset&lt;/h2&gt; &#xA;&lt;p&gt;We provide an automatic download script for all datasets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# NeRF-blender dataset&#xA;bash scripts/download_data.sh nerf_synthetic&#xA;# NeRF-LLFF(NeRF-Real) dataset&#xA;bash scripts/download_data.sh nerf_llff&#xA;# NeRF-360 dataset&#xA;bash scripts/download_data.sh nerf_real_360&#xA;# Tanks and Temples dataset&#xA;bash scripts/download_data.sh tanks_and_temples&#xA;# LF dataset&#xA;bash scripts/download_data.sh lf&#xA;# NeRF-360-v2 dataset&#xA;bash scripts/download_data.sh nerf_360_v2&#xA;# Shiny-blender dataset&#xA;bash scripts/download_data.sh shiny_blender&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the Code!&lt;/h2&gt; &#xA;&lt;p&gt;A very simple script to run the code.&lt;/p&gt; &#xA;&lt;h3&gt;Training Code&lt;/h3&gt; &#xA;&lt;p&gt;A script for running the training code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py --ginc configs/[model]/[data].gin --scene [scene]&#xA;&#xA;## ex) run training nerf on chair scene of blender dataset&#xA;python3 run.py --ginc configs/nerf/blender.gin --scene chair&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluation Code&lt;/h3&gt; &#xA;&lt;p&gt;A script for running the evaluation code only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 run.py --ginc configs/[model]/[data].gin --scene [scene] \&#xA;--ginb run.run_train=False&#xA;&#xA;## ex) run evaluating nerf on chair scene of blender dataset&#xA;python3 run.py --ginc configs/nerf/blender.gin --scene chair \&#xA;--ginb run.run_train=False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom&lt;/h2&gt; &#xA;&lt;p&gt;How to add the custom dataset and the custom model in NeRF-Factory?&lt;/p&gt; &#xA;&lt;h3&gt;Custom Dataset&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add files of the custom dataset on &lt;code&gt;./data/[custom_dataset]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Implement a dataset loader code on &lt;code&gt;./src/data/data_util/[custom_dataset].py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Implement a custom dataset class &lt;code&gt;LitData[custom_dataset]&lt;/code&gt; on &lt;code&gt;./src/data/litdata.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add option of selecting the custom dataset on the function &lt;code&gt;def select_dataset()&lt;/code&gt; of &lt;code&gt;./utils/select_option.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add gin config file for each model as &lt;code&gt;./configs/[model]/[custom_dataset].gin&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Model&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement a custom model code on &lt;code&gt;./src/model/[custom_model]/model.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Implement a custom model&#39;s helper code on &lt;code&gt;./src/model/[custom_model]/helper.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[Optional] If you need more code files for the custom model, you can add them in &lt;code&gt;./src/model/[custom_model]/&lt;/code&gt;.- Add option of selecting the custom model on the function &lt;code&gt;def select_model()&lt;/code&gt; of &lt;code&gt;./utils/select_option.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add gin config file for each model as &lt;code&gt;./configs/[custom_model]/[dataset].gin&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Copyright (c) 2022 POSTECH, KAIST, Kakao Brain Corp. All Rights Reserved. Licensed under the Apache License, Version 2.0 (see &lt;a href=&#34;https://github.com/kakaobrain/NeRF-Factory/tree/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for details)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cado-security/varc</title>
    <updated>2022-09-23T01:36:54Z</updated>
    <id>tag:github.com,2022-09-23:/cado-security/varc</id>
    <link href="https://github.com/cado-security/varc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Volatile Artifact Collector&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;varc (Volatile Artifact Collector)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cado-security/varc/actions/workflows/app-ci.yml/badge.svg?branch=main&#34; alt=&#34;ci&#34;&gt; &lt;a href=&#34;https://badge.fury.io/py/varc&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/varc.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;varc collects a snapshot of volatile data from a system. It tells you what is happening on a system, and is of particular use when investigating a security incident.&lt;/p&gt; &#xA;&lt;p&gt;It creates a zip, which contains a number of different pieces of data to understand what is happening on a system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSON files e.g. running processes and what network connections they are making&lt;/li&gt; &#xA; &lt;li&gt;Memory of running proccesses, on a per-process basis. This is also carved to extract log and text data from memory&lt;/li&gt; &#xA; &lt;li&gt;Netstat data of active connections&lt;/li&gt; &#xA; &lt;li&gt;The contents of open files, for example running binaries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have successfully executed it across:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;OSX&lt;/li&gt; &#xA; &lt;li&gt;Cloud environments such as AWS EC2&lt;/li&gt; &#xA; &lt;li&gt;Containerised Docker/Kubernetes environments such as AWS ECS/EKS/Fargate and Azure AKS&lt;/li&gt; &#xA; &lt;li&gt;Even serverless environments such as AWS Lambda&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out the example captures under the &#34;Releases&#34; tab to see some crazy data! The screen recording below shows a collection from a Docker container (left) and the output from running inside and AWS Lambda function which deployed Xmrig (right):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cado-security/varc/main/docs/varc_demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In line with the order of volatility, we collect process memory before anything else. Note that varc, and any other tool that runs inside a system, will impact the memory of a system.&lt;/p&gt; &#xA;&lt;h3&gt;Using as a compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;You can find compiled binaries for Windows, Linux and OSX under the Releases tab. Simply execute and a zip is created with the output. To access some data, you will need to run with elevated privileges (i.e. sudo or root on Linux).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: varc [-h] [--skip-memory] [--skip-open] [--dump-extract] ...&#xA;&#xA;optional arguments:&#xA;  -h, --help      show this help message and exit&#xA;  --skip-memory   Skip collecting process memory, which can be slow&#xA;  --skip-open     Skip collecting open files, which can be slow&#xA;  --dump-extract  Extract process memory dumps, which can be slow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using as a Python library&lt;/h3&gt; &#xA;&lt;p&gt;Install from pip with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install varc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or alternatively, clone this repository then install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 setup.py install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then call with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from varc import acquire_system&#xA;output_file_path = acquire_system().zip_path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automated Investigations and Response&lt;/h3&gt; &#xA;&lt;p&gt;varc significantly simplifies the acquisition and analysis of volatile data. Whilst it can be used manually on an ad-hoc basis, it is a great match for automatic deployment in response to security detections. The output of varc is designed to be easily consumed by other tools, in standard JSON format as much as possible.&lt;/p&gt; &#xA;&lt;p&gt;A typical pipeline might be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A detection is fired from a detection tool&lt;/li&gt; &#xA; &lt;li&gt;varc is deployed to collect and identify further activity&lt;/li&gt; &#xA; &lt;li&gt;Further remediation actions are taken based on the analysis of varc output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why are the collected memory files empty?&lt;/h3&gt; &#xA;&lt;p&gt;Process memory collection is not currently supported on OSX.&lt;/p&gt; &#xA;&lt;p&gt;If you run varc on a Linux system without the Ptrace Kernel capability enabled, you will get empty memory files. You will still get detailed system output.&lt;/p&gt; &#xA;&lt;p&gt;For example, in our testing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AWS Lambda successfully dumped process memory by default.&lt;/li&gt; &#xA; &lt;li&gt;EKS on EC2 successfully dumped process memory by default.&lt;/li&gt; &#xA; &lt;li&gt;ECS on Fargate required us to enable &lt;a href=&#34;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-kernelcapabilities.html&#34;&gt;CAP_SYS_PTRACE&lt;/a&gt; in our task definition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using the collected data&lt;/h3&gt; &#xA;&lt;p&gt;All data is saved in an open, non-propietary format in the hope it can easily be processed by other community tools.&lt;/p&gt; &#xA;&lt;p&gt;Our free tool &lt;a href=&#34;https://www.cadosecurity.com/cado-community-edition/&#34;&gt;Cado Community Edition&lt;/a&gt; will happily parse this zip, and display the JSON data tables as intended.&lt;/p&gt; &#xA;&lt;p&gt;Our commercial tool &lt;a href=&#34;https://www.cadosecurity.com/platform/&#34;&gt;Cado Response&lt;/a&gt; additionally enables you to automatically capture both static and volatile data from systems through Cado Host. By using the API, you can automatically investigate and respond to to detections from third party tools such as an EDR like SentinelOne or a cloud detection tool like GuardDuty.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of varc output for a Lambda function running xmrig, viewed in &lt;a href=&#34;https://www.cadosecurity.com/cado-community-edition/&#34;&gt;Cado Community Edition&lt;/a&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/cado-security/varc/main/docs/varc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This is licensed under the GPL. Please contact us if this does not work for your use case - we may be able to alternatively license under a non-copyleft license such as the Apache License. We&#39;re friendly! As this software is licensed under the GPL and used in our commercial product, we ask any contributors to sign a simple Contributor License Agreement (CLA).&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;We would love any Pull Requests or Bug Reports!&lt;/p&gt;</summary>
  </entry>
</feed>