<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-19T01:37:09Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Fluepke/konnektor-patch</title>
    <updated>2022-10-19T01:37:09Z</updated>
    <id>tag:github.com,2022-10-19:/Fluepke/konnektor-patch</id>
    <link href="https://github.com/Fluepke/konnektor-patch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Saving 400 million euro of public health care money from reckless vendors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TI Konnektor Patch&lt;/h1&gt; &#xA;&lt;p&gt;Jeder &lt;a href=&#34;https://fachportal.gematik.de/hersteller-anbieter/komponenten-dienste/konnektor&#34;&gt;Konnektor&lt;/a&gt;, der zum Zugriff auf die &lt;strong&gt;Telematik Infrastruktur&lt;/strong&gt; (TI) der &lt;em&gt;gematik&lt;/em&gt; benötigt wird, enthält mehrere Smartcards, auf denen Zertifikate gespeichert werden. Aus Sicherheitsgründen haben diese Zertifikate ein Verfallsdatum. Daher müssen sie regelmäßig erneut werden. Nicht alle Hersteller*innen haben einen Mechanismus zur Verlängerung der Zertifikate implementert. Nach Auslaufen der Zertifikate muss also der gesamte Konnektor getauscht werden. Derzeit laufen die ersten Zertifikate aus.&lt;/p&gt; &#xA;&lt;p&gt;Verantwortlich für die TI ist die gematik. Deren Gesellschafter &lt;a href=&#34;https://www.gematik.de/newsroom/news-detail/aktuelles-erste-konnektoren-laufen-im-september-aus&#34;&gt;haben entschieden&lt;/a&gt;, diese Konnektoren auszutauschen. Das erzeugt Kosten im Bereich vom &lt;strong&gt;300 bis 400 Millionen Euro&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Wir zeigen hier eine &lt;strong&gt;kostenlose&lt;/strong&gt; Softwarelösung für das Problem, von der die Hersteller*innen behaupten, dass sie unmöglich sei.&lt;/p&gt; &#xA;&lt;h2&gt;Funktionsweise&lt;/h2&gt; &#xA;&lt;p&gt;Unser Patch klinkt sich in die Kommunkation zwischen der Software auf dem Konnektor und der Smartcard ein. Das geht, weil die Kommunikation zur Smartcard nicht abgesichert ist. Unter anderem deshalb war auch der &lt;a href=&#34;https://twitter.com/fluepke/status/1576584063896256513&#34;&gt;Angriff auf den &#34;sicheren&#34; Speicher&lt;/a&gt; im &lt;em&gt;Secunet&lt;/em&gt; Adapter möglich.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Wichtig&lt;/strong&gt;: Unser Patch stellt keinen Angriff auf die Integrität des Konnektors dar. Zwar klinkt sich der Patch in die Kommunikation zur Smartcard ein, es werden aber nur öffentliche, also nicht geheime Daten verändert. Die privaten Schlüssel verbleiben unverändert auf der besonders abgesicherten Smartcard.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Sowohl bei dem Produkt der &lt;em&gt;Secunet&lt;/em&gt; als auch bei der &lt;em&gt;CompuGroup Medical&lt;/em&gt; kommt die Software &lt;em&gt;PC/SC Smart Card Daemon&lt;/em&gt; (&lt;a href=&#34;https://github.com/LudovicRousseau/PCSC&#34;&gt;&lt;code&gt;pcscd&lt;/code&gt;&lt;/a&gt;) zur Kommunikation mit den SmartCards zum Einsatz. Diese Software öffnet einen &lt;a href=&#34;https://de.wikipedia.org/wiki/Unix_Domain_Socket&#34;&gt;Unix Domain Socket&lt;/a&gt; (z.&amp;nbsp;B. in &lt;code&gt;/var/run/pcscd.comm&lt;/code&gt;), über den Anwendungen mit dem &lt;code&gt;pcscd&lt;/code&gt; interagieren, um der Smartcard Befehle zu senden und Antworten von dieser zu empfangen.&lt;/p&gt; &#xA;&lt;p&gt;Unsere Referenzimplementierung für die Verlängerung der Zertifikatslaufzeiten besteht darin, an der Stelle des ursprünglichen &lt;code&gt;pcscd&lt;/code&gt; eine modifizierte Version zu starten, die alle Befehle an die SmartCard wie gewohnt weiterleitet. Wird jedoch der Befehl zum Auslesen eines der drei vom Auslaufen betroffenen Zertifikate gesendet, antwortet unser &lt;code&gt;pcscd&lt;/code&gt; mit einem verlängerten Zertifikat aus dem Dateisystem.&lt;/p&gt; &#xA;&lt;p&gt;Dadurch sind keine Veränderungen an der bestehenden Software der Hersteller notwendig. Es muss lediglich eine Teilkomponente des Linux-Systems, auf dem die Hersteller ihre TI Konnektoren basiert haben, umkonfiguriert bzw. ausgetauscht werden.&lt;/p&gt; &#xA;&lt;h3&gt;Detaillierte Beschreibung&lt;/h3&gt; &#xA;&lt;p&gt;Wir verwenden einen handelsüblichen &lt;em&gt;PC/SC Smart Card Daemon&lt;/em&gt; (&lt;a href=&#34;https://github.com/LudovicRousseau/PCSC&#34;&gt;&lt;code&gt;pcscd&lt;/code&gt;&lt;/a&gt;) und simulieren diesem SmartCards mithilfe des Projekts &lt;a href=&#34;https://frankmorgner.github.io/vsmartcard/virtualsmartcard/README.html&#34;&gt;Virtual Smart Card&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Auf dem Konnektor bleibt der bestehende &lt;code&gt;pcscd&lt;/code&gt; des Herstellers im Hintergrund aktiv, sein Socket wird aber an einen neuen Ort im Dateisystem verschoben: &lt;code&gt;mv /var/run/pcscd.comm /var/run/old_pcscd.comm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dann wird ein handelsüblicher &lt;code&gt;pcscd&lt;/code&gt; sowie &lt;code&gt;virtualsmartcard&lt;/code&gt; installiert und gestartet. Wichtig ist, dass der &lt;code&gt;pcscd&lt;/code&gt; so konfiguriert wird, lediglich die Treiber für &lt;code&gt;virtualsmartcard&lt;/code&gt; zu laden.&lt;/li&gt; &#xA; &lt;li&gt;In dem Verzeichnis &lt;code&gt;./certs&lt;/code&gt; sind die verlängerten Zertifikate mit folgenden Dateinamen zu hinterlegen: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;AK_AUT.der&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NK_VPN.der&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;SAK_AUT.der&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Zuletzt muss das Python-Skript &lt;code&gt;./save_400m_euro.py&lt;/code&gt; aus diesem Projekt gestartet werden. Dieses verfolgt in der &lt;code&gt;execute()&lt;/code&gt; Methode alle APDUs und prüft, ob ein Zugriff auf die Zertifikatsdateien erfolgt.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Die Hersteller müssen dieses Skript in eine Update-Datei verpacken, diese signieren und bereitstellen, denn schließlich darf nur Software vom Hersteller auf dem Konnektor ausgeführt werden.&lt;/p&gt; &#xA;&lt;p&gt;Für die Verlängerung der Zertifikatslaufzeiten braucht es die &lt;em&gt;gematik&lt;/em&gt;, denn sie verantwortet und betreibt die dazu notwendige Certificate Authority (CA).&lt;/p&gt; &#xA;&lt;h2&gt;Forderungen&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Wir fordern die &lt;strong&gt;gematik&lt;/strong&gt; auf, ihre CA für die Verlängerung der Laufzeiten einzusetzen.&lt;/li&gt; &#xA; &lt;li&gt;Wir fordern &lt;strong&gt;alle Hersteller&lt;/strong&gt; (&lt;a href=&#34;https://www.cgm.com/deu_de&#34;&gt;CompuGroup Medical&lt;/a&gt;, &lt;a href=&#34;https://www.secunet.com/&#34;&gt;secunet&lt;/a&gt;, &lt;a href=&#34;https://www.rise-konnektor.de/&#34;&gt;RISE&lt;/a&gt;) auf, die Laufzeitverlängerung umzusetzen, statt das Gesundheitssystem durch die aufgerufenen astronomischen Preise auszubeuten.&lt;/li&gt; &#xA; &lt;li&gt;Wir fordern das &lt;strong&gt;Bundesgesundheitsministerium&lt;/strong&gt; auf, die Hersteller endlich an die Leine zu nehmen und der Geldverbrennung in der TI ein Ende zu setzen.&lt;/li&gt; &#xA; &lt;li&gt;Wir fordern das &lt;strong&gt;Umweltministerium&lt;/strong&gt; auf, die allein schon aus Nachhaltigkeitsgesichtspunkten völlig sinnlose tausendfache Vernichtung einsatzfähiger Hardware zu verhindern.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>JustAnotherArchivist/snscrape</title>
    <updated>2022-10-19T01:37:09Z</updated>
    <id>tag:github.com,2022-10-19:/JustAnotherArchivist/snscrape</id>
    <link href="https://github.com/JustAnotherArchivist/snscrape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A social networking service scraper in Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;snscrape&lt;/h1&gt; &#xA;&lt;p&gt;snscrape is a scraper for social networking services (SNS). It scrapes things like user profiles, hashtags, or searches and returns the discovered items, e.g. the relevant posts.&lt;/p&gt; &#xA;&lt;p&gt;The following services are currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Facebook: user profiles, groups, and communities (aka visitor posts)&lt;/li&gt; &#xA; &lt;li&gt;Instagram: user profiles, hashtags, and locations&lt;/li&gt; &#xA; &lt;li&gt;Mastodon: user profiles and toots (single or thread)&lt;/li&gt; &#xA; &lt;li&gt;Reddit: users, subreddits, and searches (via Pushshift)&lt;/li&gt; &#xA; &lt;li&gt;Telegram: channels&lt;/li&gt; &#xA; &lt;li&gt;Twitter: users, user profiles, hashtags, searches, tweets (single or surrounding thread), list posts, and trends&lt;/li&gt; &#xA; &lt;li&gt;VKontakte: user profiles&lt;/li&gt; &#xA; &lt;li&gt;Weibo (Sina Weibo): user profiles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;snscrape requires Python 3.8 or higher. The Python package dependencies are installed automatically when you install snscrape.&lt;/p&gt; &#xA;&lt;p&gt;Note that one of the dependencies, lxml, also requires libxml2 and libxslt to be installed.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install snscrape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the development version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install git+https://github.com/JustAnotherArchivist/snscrape.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;The generic syntax of snscrape&#39;s CLI is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snscrape [GLOBAL-OPTIONS] SCRAPER-NAME [SCRAPER-OPTIONS] [SCRAPER-ARGUMENTS...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;snscrape --help&lt;/code&gt; and &lt;code&gt;snscrape SCRAPER-NAME --help&lt;/code&gt; provide details on the options and arguments. &lt;code&gt;snscrape --help&lt;/code&gt; also lists all available scrapers.&lt;/p&gt; &#xA;&lt;p&gt;The default output of the CLI is the URL of each result.&lt;/p&gt; &#xA;&lt;p&gt;Some noteworthy global options are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--jsonl&lt;/code&gt; to get output as JSONL. This includes all information extracted by snscrape (e.g. message content, datetime, images; details vary by scraper).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max-results NUMBER&lt;/code&gt; to only return the first &lt;code&gt;NUMBER&lt;/code&gt; results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--with-entity&lt;/code&gt; to get an item on the entity being scraped, e.g. the user or channel. This is not supported on all scrapers. (You can use this together with &lt;code&gt;--max-results 0&lt;/code&gt; to only fetch the entity info.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;Collect all tweets by Jason Scott (@textfiles):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snscrape twitter-user textfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s usually useful to redirect the output to a file for further processing, e.g. in bash using the filename &lt;code&gt;twitter-@textfiles&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snscrape twitter-user textfiles &amp;gt;twitter-@textfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the latest 100 tweets with the hashtag #archiveteam:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snscrape --max-results 100 twitter-hashtag archiveteam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Library&lt;/h3&gt; &#xA;&lt;p&gt;It is also possible to use snscrape as a library in Python, but this is currently undocumented.&lt;/p&gt; &#xA;&lt;h2&gt;Issue reporting&lt;/h2&gt; &#xA;&lt;p&gt;If you discover an issue with snscrape, please report it at &lt;a href=&#34;https://github.com/JustAnotherArchivist/snscrape/issues&#34;&gt;https://github.com/JustAnotherArchivist/snscrape/issues&lt;/a&gt;. If possible please run snscrape with &lt;code&gt;-vv&lt;/code&gt; and &lt;code&gt;--dump-locals&lt;/code&gt; and include the log output as well as the dump files referenced in the log in the issue. Note that the files may contain sensitive information in some cases and could potentially be used to identify you (e.g. if the service includes your IP address in its response). If you prefer to arrange a file transfer privately, just mention that in the issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;https://www.gnu.org/licenses/&#34;&gt;https://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SaumyajeetDas/GodGenesis</title>
    <updated>2022-10-19T01:37:09Z</updated>
    <id>tag:github.com,2022-10-19:/SaumyajeetDas/GodGenesis</id>
    <link href="https://github.com/SaumyajeetDas/GodGenesis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Python3 based C2 server to make life of red teamer a bit easier. The payload is capable to bypass all the known antiviruses and endpoints.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome To God Genesis&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/66937297/175554898-58c56076-7cf9-4b1d-9d5d-2f2b27a9c0e3.png&#34; alt=&#34;FinalGod&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;God Genesis is a C2 server purely coded in Python3 created to help Red Teamers and Penetration Testers. Currently It only supports TCP reverse shell but wait a min, its a FUD and can give u admin shell from any targeted WINDOWS Machine.&lt;/p&gt; &#xA;&lt;p&gt;The List Of Commands It Supports :-&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                ===================================================================================================&#xA;                  BASIC COMMANDS:&#xA;                ===================================================================================================&#xA;                            help                  --&amp;gt; Show This Options&#xA;                            terminate             --&amp;gt; Exit The Shell Completely&#xA;                            exit                  --&amp;gt; Shell Works In Background And Prompted To C2 Server&#xA;                            clear                 --&amp;gt; Clear The Previous Outputs&#xA;&#xA;                ===================================================================================================&#xA;                  SYSTEM COMMANDS:&#xA;                ===================================================================================================&#xA;                            cd                    --&amp;gt; Change Directory&#xA;                            pwd                   --&amp;gt; Prints Current Working Directory&#xA;                            mkdir *dir_name*      --&amp;gt; Creates A Directory Mentioned&#xA;                            rm *dir_name*         --&amp;gt; Deletes A Directoty Mentioned&#xA;                            powershell [command]  --&amp;gt; Run Powershell Command&#xA;                            start *exe_name*      --&amp;gt; Start Any Executable By Giving The Executable Name&#xA;&#xA;                ===================================================================================================&#xA;                  INFORMATION GATHERING COMMANDS:&#xA;                ===================================================================================================&#xA;                            env                   --&amp;gt; Checks Enviornment Variables&#xA;                            sc                    --&amp;gt; Lists All Services Running&#xA;                            user                  --&amp;gt; Current User&#xA;                            info                  --&amp;gt; Gives Us All Information About Compromised System&#xA;                            av                    --&amp;gt; Lists All antivirus In Compromised System&#xA;&#xA;                ===================================================================================================&#xA;                  DATA EXFILTRATION COMMANDS:&#xA;                ===================================================================================================&#xA;                            download *file_name*  --&amp;gt; Download Files From Compromised System&#xA;                            upload *file_name*    --&amp;gt; Uploads Files To Victim Pc&#xA;&#xA;&#xA;                ===================================================================================================&#xA;                  EXPLOITATION COMMANDS:&#xA;                ===================================================================================================&#xA;                            persistence1          --&amp;gt; Persistance Via Method 1&#xA;                            persistence2          --&amp;gt; Persistance Via Method 2&#xA;                            get                   --&amp;gt; Download Files From Any URL&#xA;                            chrome_pass_dump      --&amp;gt; Dump All Stored Passwords From Chrome Bowser&#xA;                            wifi_password         --&amp;gt; Dump Passwords Of All Saved Wifi Networks&#xA;                            keylogger             --&amp;gt; Starts Key Logging Via Keylogger&#xA;                            dump_keylogger        --&amp;gt; Dump All Logs Done By Keylogger &#xA;                            python_install        --&amp;gt; Installs Python In Victim Pc Without UI&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features Of Our Framework :-&lt;/h1&gt; &#xA;&lt;p&gt;Check The Video To Get A Detail Knowledge&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1. The Payload.py is a FULLY UNDETECTABLE(FUD) use your own techniques for making an exe file. (Best Result When Backdoored With Some Other Legitimate Applictions)&#xA;2. Able to perform privilege escalation on any windows systems.&#xA;3. Fud keylogger&#xA;4. 2 ways of achieving persistance &#xA;5. Recon automation to save your time.&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How To Use Our Tool :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/SaumyajeetDas/GodGenesis.git&#xA;&#xA;pip3 install -r requirements.txt&#xA;&#xA;python3 c2c.py&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is worth mentioning that &lt;a href=&#34;https://github.com/ANON4MOUS&#34;&gt;Suman Chakraborty&lt;/a&gt; have contributed in the framework by coding the the the Fud Keyloger, Wifi Password Extraction and Chrome Password Dumper modules.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/66937297/175561859-a0e9f9dd-1e59-46da-a8e9-197d800bee37.mp4&#34;&gt;https://user-images.githubusercontent.com/66937297/175561859-a0e9f9dd-1e59-46da-a8e9-197d800bee37.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dont Forget To Change The IP ADDRESS Manually in both c2c.py and payload.py&lt;/h2&gt;</summary>
  </entry>
</feed>