<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-28T01:46:55Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TransformerOptimus/SuperAGI</title>
    <updated>2023-05-28T01:46:55Z</updated>
    <id>tag:github.com,2023-05-28:/TransformerOptimus/SuperAGI</id>
    <link href="https://github.com/TransformerOptimus/SuperAGI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build and run useful autonomous agents&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://superagi.co&#34;&gt;&lt;img src=&#34;https://superagi.co/wp-content/uploads/2023/05/SuperAGI_icon.png&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p&gt;° &lt;a href=&#34;https://discord.gg/dXbRe5BHJC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-SuperAGI-blueviolet?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Join our Discord Server&#34;&gt;&lt;/a&gt; ° &lt;a href=&#34;https://twitter.com/_superAGI&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/_superAGI?label=_superAGI&amp;amp;style=social&#34; alt=&#34;Follow us on Twitter&#34;&gt;&lt;/a&gt; ° &lt;a href=&#34;https://www.reddit.com/r/Super_AGI&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/Super_AGI?label=%2Fr/Super_AGI&amp;amp;style=social&#34; alt=&#34;Join the discussion on Reddit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;em&gt;Infrastructure for building useful Autonomous Agents&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;h1&gt;💡 Features&lt;/h1&gt; &#xA;&lt;h3&gt;🚀 &lt;strong&gt;Provision, Spawn &amp;amp; Deploy Autonomous AI Agents&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Seamless provision and run agents&lt;/p&gt; &#xA;&lt;h3&gt;🛠️ &lt;strong&gt;Extend Agent Capabilities with Tools&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Give capabilities to your agents by selecting tools from growing library or build your own custom tool&lt;/p&gt; &#xA;&lt;h3&gt;🔄 &lt;strong&gt;Run Concurrent Agents Seamlessly&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Run agents concurrently&lt;/p&gt; &#xA;&lt;h3&gt;🔓 &lt;strong&gt;Open Source:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;SuperAGI is an open-source platform, enabling developers to join a community of contributors constantly working to make it better.&lt;/p&gt; &#xA;&lt;h3&gt;🖥️ &lt;strong&gt;GUI:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Access your agents through a user-friendly graphical interface, simplifying agent management and interaction.&lt;/p&gt; &#xA;&lt;h3&gt;⌨️ &lt;strong&gt;Action Console:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Interact with agents by providing input, permissions, and more.&lt;/p&gt; &#xA;&lt;h3&gt;📊 &lt;strong&gt;Multiple Vector DBs:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Connect to multiple Vector DBs to enhance your agent&#39;s performance and access additional data sources.&lt;/p&gt; &#xA;&lt;h3&gt;🤖 &lt;strong&gt;Multi-Model Agents:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Customize your agents by using different models of your choice, tailoring their behavior to specific tasks.&lt;/p&gt; &#xA;&lt;h3&gt;🎯 &lt;strong&gt;Agent Trajectory Fine-Tuning:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Agents learn and improve their performance over time through feedback loops, allowing for fine-tuning and optimization.&lt;/p&gt; &#xA;&lt;h3&gt;📈 &lt;strong&gt;Performance Telemetry:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Gain insights into your agent&#39;s performance through telemetry data, enabling optimization and improvement.&lt;/p&gt; &#xA;&lt;h3&gt;💰 &lt;strong&gt;Optimized Token Usage:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Control token usage to effectively manage costs associated with the platform.&lt;/p&gt; &#xA;&lt;h3&gt;🧠 &lt;strong&gt;Agent Memory Storage:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Enable agents to learn and adapt by storing their memory, facilitating continuous improvement.&lt;/p&gt; &#xA;&lt;h3&gt;🔁 &lt;strong&gt;Looping Detection Heuristics:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Receive notifications when agents get stuck in a loop and take proactive measures to resolve the issue.&lt;/p&gt; &#xA;&lt;h3&gt;🚀 &lt;strong&gt;Concurrent Agents:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Run multiple agents simultaneously, maximizing efficiency and achieving parallel processing.&lt;/p&gt; &#xA;&lt;h3&gt;💾 &lt;strong&gt;Resource Manager:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Read and store files generated by agents, facilitating data management and analysis.&lt;/p&gt; &#xA;&lt;h1&gt;You need Pinecone setup for this&lt;/h1&gt; &#xA;&lt;h1&gt;💻 Screenshots&lt;/h1&gt; &#xA;&lt;h3&gt;CLI View&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://superagi.co/wp-content/uploads/2023/05/CLI.png&#34; alt=&#34;CLI&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GUI (Work in progress)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://superagi.co/wp-content/uploads/2023/05/automation-in-chat-1.png&#34; alt=&#34;GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;🛣 Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/TransformerOptimus/projects/1&#34;&gt;Click here to checkout the latest roadmap 🔗&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;⚙️ Setting up&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the repo using &lt;code&gt;git clone https://github.com/TransformerOptimus/SuperAGI.git&lt;/code&gt; in your terminal or directly from github page in zip format and unzip in your desired folder&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the directory using &lt;code&gt;cd SuperAGI&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Setting up Virtual Environment:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Creating a Virtual Environment:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before starting with the project, it is highly recommended to create a virtual environment in Python. This isolates the packages required for the project from other packages installed on your system, avoiding potential compatibility issues.&lt;/p&gt; &#xA;&lt;p&gt;To create a virtual environment, follow the steps below for your respective operating system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For Linux and Mac:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Open a terminal window.&lt;/li&gt; &#xA;   &lt;li&gt;Install the &lt;code&gt;virtualenv&lt;/code&gt; package, if not already installed, by running: &lt;code&gt;pip install virtualenv&lt;/code&gt; or &lt;code&gt;pip3 install virtualenv&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Navigate to your project directory using &lt;code&gt;cd&lt;/code&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Create a virtual environment by running: &lt;code&gt;virtualenv venv&lt;/code&gt; (you can replace &#34;venv&#34; with your desired virtual environment name).&lt;/li&gt; &#xA;   &lt;li&gt;Activate the virtual environment by running: &lt;code&gt;source venv/bin/activate&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Windows:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Open a command prompt window.&lt;/li&gt; &#xA;   &lt;li&gt;Install the &lt;code&gt;virtualenv&lt;/code&gt; package, if not already installed, by running: &lt;code&gt;pip install virtualenv&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Navigate to your project directory using &lt;code&gt;cd&lt;/code&gt; command.&lt;/li&gt; &#xA;   &lt;li&gt;Create a virtual environment by running: &lt;code&gt;virtualenv venv&lt;/code&gt; (you can replace &#34;venv&#34; with your desired virtual environment name).&lt;/li&gt; &#xA;   &lt;li&gt;Activate the virtual environment by running: &lt;code&gt;venv\Scripts\activate&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🛠 Configuration&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a virtualenv in the project directory as mentioned above.&lt;/li&gt; &#xA; &lt;li&gt;Find the file named config_template.yaml in the main SuperAGI folder.&lt;/li&gt; &#xA; &lt;li&gt;Create a copy of config_template.yaml and name it config.yaml; if you&#39;re already in a command terminal window: cp config_template.yaml config.yaml.&lt;/li&gt; &#xA; &lt;li&gt;Open the config.yaml file in a text editor.&lt;/li&gt; &#xA; &lt;li&gt;Find the line that says OPENAI_API_KEY:&lt;/li&gt; &#xA; &lt;li&gt;After the &lt;code&gt;:&lt;/code&gt; in the respective variable assignment, enter your unique OpenAI API Key, Google key, Custom search engine ID, and Pinecone API key without any quotes or spaces. You can obtain these keys by signing up for developer accounts at the respective service providers. Follow the links below to get your keys:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenAI API Key: Sign up and create an API key at &lt;a href=&#34;https://beta.openai.com/signup/&#34;&gt;OpenAI Developer&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Google key: Create a project in the &lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;Google Cloud Console&lt;/a&gt; and enable the API you need (for example: Google Custom Search JSON API). Then, create an API key in the &#34;Credentials&#34; section.&lt;/li&gt; &#xA; &lt;li&gt;Custom search engine ID: Visit &lt;a href=&#34;https://programmablesearchengine.google.com/about/&#34;&gt;Google Programmable Search Engine&lt;/a&gt; to create a custom search engine for your application and obtain the search engine ID.&lt;/li&gt; &#xA; &lt;li&gt;Pinecone API key: Sign up at &lt;a href=&#34;https://www.pinecone.io/&#34;&gt;Pinecone&lt;/a&gt; and create an API key in your account dashboard. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you&#39;re on the Pinecone free plan, you only have 1 pod and 1 index available. As a workaround, change the index name used in test.py where &lt;code&gt;memory&lt;/code&gt; is defined: &lt;code&gt;memory = VectorFactory.get_vector_storage(&#34;PineCone&#34;, &#34;my-current-indexname&#34;, OpenAiEmbedding())&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Save and close the config.yaml file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;🏃‍♂️ Running SuperAGI&lt;/h1&gt; &#xA;&lt;p&gt;Simply run the start script in your terminal. This will install any necessary Python packages and launch SuperAGI&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On Linux/MacOS: &lt;code&gt;source run.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Windows: &lt;code&gt;.\run.bat&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If this gives errors, make sure you have a compatible Python version installed (preferrably python 3.10).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;⚠️ Under Development!&lt;/h1&gt; &#xA;&lt;p&gt;This project is under active development and may still have issues. We appreciate your understanding and patience. If you encounter any problems, please first check the open issues. If your issue is not listed, kindly create a new issue detailing the error or problem you experienced. Thank you for your support!&lt;/p&gt; &#xA;&lt;h1&gt;👩‍💻Contributors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/TransformerOptimus&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/133493246?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;TransformerOptimus&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cptsnowcrasher&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/133322218?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;Cptsnowcrasher&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/vectorcrow&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/133646556?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;vectorcrow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Akki-jain&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/92881074?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;Akki-jain&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Autocop-Agent&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/129729746?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;Autocop-Agent&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/COLONAYUSH&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/60507126?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;COLONAYUSH&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/luciferlinx101&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/129729795?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;luciferlinx101&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/mukundans89&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/101278493?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;mukundans89&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Fluder-Paradyne&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/121793617?v=4&amp;amp;w=50&amp;amp;h=50&amp;amp;mask=circle&#34; alt=&#34;Fluder-Paradyne&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;⭐Star History&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#TransformerOptimus/SuperAGI&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=TransformerOptimus/SuperAGI&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>beurtschipper/Depix</title>
    <updated>2023-05-28T01:46:55Z</updated>
    <id>tag:github.com,2023-05-28:/beurtschipper/Depix</id>
    <link href="https://github.com/beurtschipper/Depix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recovers passwords from pixelized screenshots&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Depix&lt;/h1&gt; &#xA;&lt;p&gt;Depix is a tool for recovering passwords from pixelized screenshots.&lt;/p&gt; &#xA;&lt;p&gt;This implementation works on pixelized images that were created with a linear box filter. In &lt;a href=&#34;https://www.linkedin.com/pulse/recovering-passwords-from-pixelized-screenshots-sipke-mellema&#34;&gt;this article&lt;/a&gt; I cover background information on pixelization and similar research.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/beurtschipper/Depix/main/docs/img/Recovering_prototype_latest.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the dependencies:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install git+https://github.com/beurtschipper/Depix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run Depix:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;depix \&#xA;    -p /path/to/your/input/image.png \&#xA;    -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png \&#xA;    -o /path/to/your/output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Depixelize example image created with Notepad and pixelized with Greenshot. Greenshot averages by averaging the gamma-encoded 0-255 values, which is Depix&#39;s default mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;depix \&#xA;    -p images/testimages/testimage3_pixels.png \&#xA;    -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result: &lt;img src=&#34;https://raw.githubusercontent.com/beurtschipper/Depix/main/docs/img/example_output_multiword.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Depixelize example image created with Sublime and pixelized with Gimp, where averaging is done in linear sRGB. The backgroundcolor option filters out the background color of the editor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;depix \&#xA;    -p images/testimages/sublime_screenshot_pixels_gimp.png \&#xA;    -s images/searchimages/debruin_sublime_Linux_small.png \&#xA;    --backgroundcolor 40,41,35 \&#xA;    --averagetype linear&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result: &lt;img src=&#34;https://raw.githubusercontent.com/beurtschipper/Depix/main/docs/img/output_depixelizedExample_linear.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Optional) You can create pixelized image by using &lt;code&gt;genpixed&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;genpixed -i /path/to/image.png -o pixed_output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a detailed explanation, please try to run &lt;code&gt;$ depix -h&lt;/code&gt; and &lt;code&gt;genpixed&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;h3&gt;Making a Search Image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cut out the pixelated blocks from the screenshot as a single rectangle.&lt;/li&gt; &#xA; &lt;li&gt;Paste a &lt;a href=&#34;https://en.wikipedia.org/wiki/De_Bruijn_sequence&#34;&gt;De Bruijn sequence&lt;/a&gt; with expected characters in an editor with the same font settings as your input image (Same text size, similar font, same colors).&lt;/li&gt; &#xA; &lt;li&gt;Make a screenshot of the sequence.&lt;/li&gt; &#xA; &lt;li&gt;Move that screenshot into a folder like &lt;code&gt;images/searchimages/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run Depix with the &lt;code&gt;-s&lt;/code&gt; flag set to the location of this screenshot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Algorithm&lt;/h3&gt; &#xA;&lt;p&gt;The algorithm uses the fact that the linear box filter processes every block separately. For every block it pixelizes all blocks in the search image to check for direct matches.&lt;/p&gt; &#xA;&lt;p&gt;For most pixelized images Depix manages to find single-match results. It assumes these are correct. The matches of surrounding multi-match blocks are then compared to be geometrically at the same distance as in the pixelized image. Matches are also treated as correct. This process is repeated a couple of times.&lt;/p&gt; &#xA;&lt;p&gt;After correct blocks have no more geometrical matches, it will output all correct blocks directly. For multi-match blocks, it outputs the average of all matches. The algorithm uses the fact that the linear box filter processes every block separately. For every block it pixelizes all blocks in the search image to check for direct matches.&lt;/p&gt; &#xA;&lt;h3&gt;Known limitations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The algorithm matches by integer block-boundaries. As a result, it has the underlying assumption that for all characters rendered (both in the de Brujin sequence and the pixelated image), the text positioning is done at pixel level. However, some modern text rasterizers position text &lt;a href=&#34;http://agg.sourceforge.net/antigrain.com/research/font_rasterization/&#34;&gt;at sub-pixel accuracies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;The algorithm currently performs pixel averaging in the image&#39;s gamma-corrected RGB space. As a result, it cannot reconstruct images pixelated using linear RGB.&lt;/del&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Future development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement more filter functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Create more averaging filters that work like some popular editors do.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new tool that utilizes HMMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After creating this program, someone pointed me to a &lt;a href=&#34;https://www.researchgate.net/publication/305423573_On_the_Ineffectiveness_of_Mosaicing_and_Blurring_as_Tools_for_Document_Redaction&#34;&gt;research document&lt;/a&gt; from 2016 where a group of researchers managed to create a similar tool. Their tool has better precision and works across many different fonts. While their original source code is not public, an open-source implementation exists at &lt;a href=&#34;https://github.com/JonasSchatz/DepixHMM&#34;&gt;DepixHMM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Edit 16 Feb &#39;22: &lt;a href=&#34;https://bishopfox.com/authors/dan-petro&#34;&gt;Dan Petro&lt;/a&gt; created the tool UnRedacter (&lt;a href=&#34;https://bishopfox.com/blog/unredacter-tool-never-pixelation&#34;&gt;write-up&lt;/a&gt;, &lt;a href=&#34;https://github.com/BishopFox/unredacter&#34;&gt;source&lt;/a&gt;) to crack a &lt;a href=&#34;https://labs.jumpsec.com/can-depix-deobfuscate-your-data/&#34;&gt;challenge&lt;/a&gt; that was created as a response to Depix!&lt;/p&gt; &#xA;&lt;p&gt;Still, anyone who is passionate about this type of depixelization is encouraged to implement their own HMM-based version and share it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kreneskyp/ix</title>
    <updated>2023-05-28T01:46:55Z</updated>
    <id>tag:github.com,2023-05-28:/kreneskyp/ix</id>
    <link href="https://github.com/kreneskyp/ix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Autonomous GPT-4 agent platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iX - Autonomous GPT-4 Agent Platform&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kreneskyp/ix/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/kreneskyp/ix/test.yml&#34; alt=&#34;Unit Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/jtrMKxzZZQ&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/jtrMKxzZZQ&#34; alt=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/kreneskyp&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/kreneskyp?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img align=&#34;left&#34; src=&#34;https://raw.githubusercontent.com/kreneskyp/ix/master/ix_350.png&#34; alt=&#34;The ninth planet around the sun&#34;&gt; &#xA; &lt;p&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; Amidst the swirling sands of the cosmos, Ix stands as an enigmatic jewel, where the brilliance of human ingenuity dances on the edge of forbidden knowledge, casting a shadow of intrigue over the galaxy. &lt;/p&gt;&#xA; &lt;p&gt;- Atreides Scribe, The Chronicles of Ixian Innovation&lt;/p&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;div&gt;&#xA;  Ix is an experimental platform for designing and deploying semi-autonomous LLM agents. It provides a scalable and responsive solution for delegating tasks to AI powered agents. The platform is designed to be extensible, allowing developers to create custom agents and chains to perform a wide variety of tasks. &#xA; &lt;br&gt; &#xA; &lt;p&gt;The backend is designed to support multiple agents running in parallel and communicating with each other. Each agent may be customized and may utilize parallel processes to complete tasks. &lt;br&gt;&lt;/p&gt; &#xA; &lt;p&gt;Ix uses GPT-4 by default, but agents may be configured to use any model supported by LangChain.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;How does it work&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/kreneskyp/ix/master/docs/FizzBuzzExample.gif&#34; width=&#34;600&#34; height=&#34;407&#34;&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;p&gt;You chat with an agent that uses that direction to investigate, plan, and complete tasks. The agents are capable of searching the web, writing code, creating images, interacting with other APIs and services. If it can be coded, it&#39;s within the realm of possibility that an agent can be built to assist you.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Setup the server and visit &lt;code&gt;http://localhost:8000&lt;/code&gt;, a new chat will be created automatically&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter a request and the Ix moderator will delegate the task to the agent best suited for the response. Or @mention an agent to request a specific agent to complete the task.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Customized agents may be added or removed from the chat as needed to process your tasks&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Creating Custom Agents and Chains&lt;/h3&gt; &#xA;&lt;p&gt;Ix provides the moderator agent Ix, a coder agent, a planning agent, and a few example agents. Additional agents may be built using the chain framework.&lt;/p&gt; &#xA;&lt;p&gt;View the &lt;a href=&#34;https://raw.githubusercontent.com/kreneskyp/ix/master/docs/chains/chains.rst&#34;&gt;documentation&lt;/a&gt; to create custom agents and chains.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scalable model for running a fleet of GPT agents.&lt;/li&gt; &#xA; &lt;li&gt;Responsive user interface for interacting with agents.&lt;/li&gt; &#xA; &lt;li&gt;Persistent storage of interactions, processes, and metrics.&lt;/li&gt; &#xA; &lt;li&gt;Message queue for agent jobs and inter-agent communication.&lt;/li&gt; &#xA; &lt;li&gt;Extensible model for customizing agents.&lt;/li&gt; &#xA; &lt;li&gt;Deployment using Docker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Stack:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.11&lt;/li&gt; &#xA; &lt;li&gt;Django 4.2&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL 14.4&lt;/li&gt; &#xA; &lt;li&gt;GraphQL / Graphene / Relay&lt;/li&gt; &#xA; &lt;li&gt;React 18&lt;/li&gt; &#xA; &lt;li&gt;LangChain&lt;/li&gt; &#xA; &lt;li&gt;Integrated with OpenAI GPT models&lt;/li&gt; &#xA; &lt;li&gt;Plugin architecture to support extending agent functionality (e.g. web browsing, writing code, etc)&lt;/li&gt; &#xA; &lt;li&gt;Generic framework for vector database based agent memory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pinecone&lt;/li&gt; &#xA;   &lt;li&gt;Redis&lt;/li&gt; &#xA;   &lt;li&gt;Milvus (soon)&lt;/li&gt; &#xA;   &lt;li&gt;FAISS (soon)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;1. Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before getting started, ensure you have the following software installed on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;Docker: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/desktop/install/mac-install/&#34;&gt;Mac&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/desktop/install/windows-install/&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2. Clone the repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/kreneskyp/ix.git&#xA;cd ix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Setup env&lt;/h3&gt; &#xA;&lt;p&gt;Setup config in &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.template .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=YOUR_KEY_HERE&#xA;&#xA;# search (optional)&#xA;GOOGLE_API_KEY=&#xA;GOOGLE_CX_ID=&#xA;WOLFRAM_APP_ID=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build and run the dev image.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make dev_setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the dev server &amp;amp; worker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start a worker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make worker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;code&gt;http://localhost:8000&lt;/code&gt; to access the user interface and start creating tasks for the autonomous GPT-4 agents. The platform will automatically spawn agent processes to research and complete tasks as needed.&lt;/p&gt; &#xA;&lt;h3&gt;Scaling workers&lt;/h3&gt; &#xA;&lt;p&gt;Run as many worker processes as you want with &lt;code&gt;make worker&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developer Tools&lt;/h2&gt; &#xA;&lt;p&gt;Here are some helpful commands for developers to set up and manage the development environment:&lt;/p&gt; &#xA;&lt;h3&gt;Running:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make server&lt;/code&gt;: Start the application in development mode on &lt;code&gt;0.0.0.0:8000&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make worker&lt;/code&gt;: Start an Agent worker.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make image&lt;/code&gt;: Build the Docker image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make frontend&lt;/code&gt;: Rebuild the front end (GraphQL, relay, webpack).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make webpack&lt;/code&gt;: Rebuild JavaScript only&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make webpack-watch&lt;/code&gt;: Rebuild JavaScript on file changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make migrate&lt;/code&gt;: Run Django database migrations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make migrations&lt;/code&gt;: Generate new Django database migration files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Utility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make bash&lt;/code&gt;: Open a bash shell in the Docker container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make shell&lt;/code&gt;: Open a Django shell_plus session.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>