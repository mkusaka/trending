<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-04T01:39:16Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>infiniflow/ragflow</title>
    <updated>2024-04-04T01:39:16Z</updated>
    <id>tag:github.com,2024-04-04:/infiniflow/ragflow</id>
    <link href="https://github.com/infiniflow/ragflow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RAGFlow is an open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://demo.ragflow.io/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/web/src/assets/logo-with-text.png&#34; width=&#34;350&#34; alt=&#34;ragflow logo&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/README_zh.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/README_ja.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://demo.ragflow.io&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Static Badge&#34; src=&#34;https://img.shields.io/badge/RAGFLOW-LLM-white?&amp;amp;labelColor=dd0af7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/infiniflow/ragflow&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/docker_pull-ragflow:v1.0-brightgreen&#34; alt=&#34;docker pull ragflow:v1.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/infiniflow/ragflow/raw/main/LICENSE&#34;&gt; &lt;img height=&#34;21&#34; src=&#34;https://img.shields.io/badge/License-Apache--2.0-ffffff?style=flat-square&amp;amp;labelColor=d4eaf7&amp;amp;color=7d09f1&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üí° What is RAGFlow?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://demo.ragflow.io&#34;&gt;RAGFlow&lt;/a&gt; is an open-source RAG (Retrieval-Augmented Generation) engine based on deep document understanding. It offers a streamlined RAG workflow for businesses of any scale, combining LLM (Large Language Models) to provide truthful question-answering capabilities, backed by well-founded citations from various complex formatted data.&lt;/p&gt; &#xA;&lt;h2&gt;üåü Key Features&lt;/h2&gt; &#xA;&lt;h3&gt;üç≠ &lt;strong&gt;&#34;Quality in, quality out&#34;&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/deepdoc/README.md&#34;&gt;Deep document understanding&lt;/a&gt;-based knowledge extraction from unstructured data with complicated formats.&lt;/li&gt; &#xA; &lt;li&gt;Finds &#34;needle in a data haystack&#34; of literally unlimited tokens.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üç± &lt;strong&gt;Template-based chunking&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intelligent and explainable.&lt;/li&gt; &#xA; &lt;li&gt;Plenty of template options to choose from.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üå± &lt;strong&gt;Grounded citations with reduced hallucinations&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visualization of text chunking to allow human intervention.&lt;/li&gt; &#xA; &lt;li&gt;Quick view of the key references and traceable citations to support grounded answers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üçî &lt;strong&gt;Compatibility with heterogeneous data sources&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Word, slides, excel, txt, images, scanned copies, structured data, web pages, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üõÄ &lt;strong&gt;Automated and effortless RAG workflow&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Streamlined RAG orchestration catered to both personal and large businesses.&lt;/li&gt; &#xA; &lt;li&gt;Configurable LLMs as well as embedding models.&lt;/li&gt; &#xA; &lt;li&gt;Multiple recall paired with fused re-ranking.&lt;/li&gt; &#xA; &lt;li&gt;Intuitive APIs for seamless integration with business.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîé System Architecture&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34; style=&#34;margin-top:20px;margin-bottom:20px;&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/infiniflow/ragflow/assets/12318111/d6ac5664-c237-4200-a7c2-a4a00691b485&#34; width=&#34;1000&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üé¨ Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;üìù Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU &amp;gt;= 2 cores&lt;/li&gt; &#xA; &lt;li&gt;RAM &amp;gt;= 8 GB&lt;/li&gt; &#xA; &lt;li&gt;Docker &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If you have not installed Docker on your local machine (Windows, Mac, or Linux), see &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;Install Docker Engine&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üöÄ Start up the server&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure &lt;code&gt;vm.max_map_count&lt;/code&gt; &amp;gt; 65535:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;To check the value of &lt;code&gt;vm.max_map_count&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sysctl vm.max_map_count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Reset &lt;code&gt;vm.max_map_count&lt;/code&gt; to a value greater than 65535 if it is not.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# In this case, we set it to 262144:&#xA;$ sudo sysctl -w vm.max_map_count=262144&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;This change will be reset after a system reboot. To ensure your change remains permanent, add or update the &lt;code&gt;vm.max_map_count&lt;/code&gt; value in &lt;strong&gt;/etc/sysctl.conf&lt;/strong&gt; accordingly:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vm.max_map_count=262144&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/infiniflow/ragflow.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the pre-built Docker images and start up the server:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd ragflow/docker&#xA;$ docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The core image is about 15 GB in size and may take a while to load.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check the server status after having the server up and running:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker logs -f ragflow-server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;The following output confirms a successful launch of the system:&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    ____                 ______ __&#xA;   / __ \ ____ _ ____ _ / ____// /____  _      __&#xA;  / /_/ // __ `// __ `// /_   / // __ \| | /| / /&#xA; / _, _// /_/ // /_/ // __/  / // /_/ /| |/ |/ /&#xA;/_/ |_| \__,_/ \__, //_/    /_/ \____/ |__/|__/&#xA;              /____/&#xA;&#xA; * Running on all addresses (0.0.0.0)&#xA; * Running on http://127.0.0.1:9380&#xA; * Running on http://172.22.0.5:9380&#xA; INFO:werkzeug:Press CTRL+C to quit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In your web browser, enter the IP address of your server as prompted and log in to RAGFlow.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;In the given scenario, you only need to enter &lt;code&gt;http://172.22.0.5&lt;/code&gt; (sans port number) as the default HTTP serving port &lt;code&gt;80&lt;/code&gt; can be omitted when using the default configurations.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/service_conf.yaml&#34;&gt;service_conf.yaml&lt;/a&gt;, select the desired LLM factory in &lt;code&gt;user_default_llm&lt;/code&gt; and update the &lt;code&gt;API_KEY&lt;/code&gt; field with the corresponding API key.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docs/llm_api_key_setup.md&#34;&gt;./docs/llm_api_key_setup.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;The show is now on!&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üîß Configurations&lt;/h2&gt; &#xA;&lt;p&gt;When it comes to system configurations, you will need to manage the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/.env&#34;&gt;.env&lt;/a&gt;: Keeps the fundamental setups for the system, such as &lt;code&gt;SVR_HTTP_PORT&lt;/code&gt;, &lt;code&gt;MYSQL_PASSWORD&lt;/code&gt;, and &lt;code&gt;MINIO_PASSWORD&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/service_conf.yaml&#34;&gt;service_conf.yaml&lt;/a&gt;: Configures the back-end services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;: The system relies on &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; to start up.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You must ensure that changes to the &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/.env&#34;&gt;.env&lt;/a&gt; file are in line with what are in the &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/service_conf.yaml&#34;&gt;service_conf.yaml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/README.md&#34;&gt;./docker/README&lt;/a&gt; file provides a detailed description of the environment settings and service configurations, and you are REQUIRED to ensure that all environment settings listed in the &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/README.md&#34;&gt;./docker/README&lt;/a&gt; file are aligned with the corresponding configurations in the &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/service_conf.yaml&#34;&gt;service_conf.yaml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To update the default HTTP serving port (80), go to &lt;a href=&#34;https://raw.githubusercontent.com/infiniflow/ragflow/main/docker/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; and change &lt;code&gt;80:80&lt;/code&gt; to &lt;code&gt;&amp;lt;YOUR_SERVING_PORT&amp;gt;:80&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Updates to all system configurations require a system reboot to take effect:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Build from source&lt;/h2&gt; &#xA;&lt;p&gt;To build the Docker images from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/infiniflow/ragflow.git&#xA;$ cd ragflow/&#xA;$ docker build -t infiniflow/ragflow:v1.0 .&#xA;$ cd ragflow/docker&#xA;$ docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìú Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/infiniflow/ragflow/issues/162&#34;&gt;RAGFlow Roadmap 2024&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üèÑ Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/uqQ4YMDf&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/infiniflowai&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üôå Contributing&lt;/h2&gt; &#xA;&lt;p&gt;RAGFlow flourishes via open-source collaboration. In this spirit, we embrace diverse contributions from the community. If you would like to be a part, review our &lt;a href=&#34;https://github.com/infiniflow/ragflow/raw/main/docs/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; first.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tamilselvanarjun/pydatascraper</title>
    <updated>2024-04-04T01:39:16Z</updated>
    <id>tag:github.com,2024-04-04:/tamilselvanarjun/pydatascraper</id>
    <link href="https://github.com/tamilselvanarjun/pydatascraper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;pydatascraper is a Python application that provides web scraping capabilities, including fetching Google and Yelp reviews.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;pydatascraper&lt;/h3&gt; &#xA;&lt;p&gt;pydatascraper is a Python application that provides web scraping capabilities, including fetching Google and Yelp reviews. The application has a user-friendly graphical user interface (GUI) for easy interaction.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Scraping:&lt;/strong&gt; Extract information from web pages based on user-provided URLs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Google Reviews:&lt;/strong&gt; Fetch reviews for a given business or location using Google Maps API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Yelp Reviews:&lt;/strong&gt; Retrieve reviews for a business using the Yelp API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenStreetMap Data:&lt;/strong&gt; Extract latitude, longitude, and additional information from OpenStreetMap.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3.x&lt;/li&gt; &#xA; &lt;li&gt;Required Python packages (install using &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;requests&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;beautifulsoup4&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pandas&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;openpyxl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;nltk&lt;/code&gt; (for text processing)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;tkinter&lt;/code&gt; (GUI toolkit)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/arjunlimat/pydatascraper.git&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the package directly:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;pip install pydatascraper&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;import the webscraper model:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;from pydatascraper.pyscraper import main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the application:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The GUI will appear, allowing you to choose different services and perform web scraping tasks.&lt;/p&gt; &#xA;&lt;h4&gt;Services&lt;/h4&gt; &#xA;&lt;p&gt;Web Scraping&lt;/p&gt; &#xA;&lt;p&gt;Enter a URL and click &#34;Search&#34; to explore available data types.&lt;/p&gt; &#xA;&lt;p&gt;Choose the desired data type, enter a file name, and click &#34;Download&#34; to save the data.&lt;/p&gt; &#xA;&lt;h4&gt;Google Reviews&lt;/h4&gt; &#xA;&lt;p&gt;Select &#34;Google reviews&#34; from the services dropdown.&lt;/p&gt; &#xA;&lt;p&gt;Enter the business or location name and address. Provide a file name and click &#34;Download&#34; to fetch and save Google reviews.&lt;/p&gt; &#xA;&lt;h4&gt;Yelp Reviews&lt;/h4&gt; &#xA;&lt;p&gt;Select &#34;Yelp reviews&#34; from the services dropdown. Enter the business name and address. Provide a file name and click &#34;Download&#34; to fetch and save Yelp reviews.&lt;/p&gt; &#xA;&lt;h4&gt;OpenStreetMap&lt;/h4&gt; &#xA;&lt;p&gt;Select &#34;Open Street Map&#34; from the services dropdown. Enter the map URL, provide a file name, and click &#34;Download&#34; to extract map data.&lt;/p&gt; &#xA;&lt;h4&gt;Contributing&lt;/h4&gt; &#xA;&lt;p&gt;Contributions are welcome! If you encounter issues or have ideas for improvement, please open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;h4&gt;License:&lt;/h4&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tamilselvanarjun/finmodels</title>
    <updated>2024-04-04T01:39:16Z</updated>
    <id>tag:github.com,2024-04-04:/tamilselvanarjun/finmodels</id>
    <link href="https://github.com/tamilselvanarjun/finmodels" rel="alternate"></link>
    <summary type="html">&lt;p&gt;finmodels is a Python package that provides various financial models for analysis and optimization.&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;quantmodels&lt;/h4&gt; &#xA;&lt;h4&gt;finmodels&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;finmodels&lt;/code&gt; is a Python package designed for financial analysis and optimization. It includes a collection of financial models, such as Discounted Cash Flow (DCF) valuation and Mean-Variance Portfolio Optimization. With finmodels, you can perform essential financial calculations to support investment decisions and portfolio management.&lt;/p&gt; &#xA;&lt;h4&gt;Key Features&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Discounted Cash Flow (DCF) Valuation&lt;/code&gt;: Calculate the present value of future cash flows to assess the intrinsic value of an investment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Portfolio Optimization&lt;/code&gt;: Optimize portfolio allocations using Mean-Variance Optimization to balance returns and risk.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;The Leveraged Buyout (LBO) Model&lt;/code&gt;: LBO Model is a financial analysis tool used in corporate finance for&lt;/p&gt; &#xA;&lt;p&gt;evaluating the acquisition of a company using a significant amount of borrowed funds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;IPO Model&lt;/code&gt;: IPO Model is a simple Python script for calculating the Initial Public Offering (IPO) valuation using a discounted cash flow (DCF) model.&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;You can install the package using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install finmodels&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage Discounted Cash Flow (DCF) Valuation&lt;/p&gt; &#xA;&lt;h4&gt;Example usage of DCF valuation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;import finmodels as fm&#xA;cash_flows = [100, 150, 200, 250]&#xA;discount_rate = 0.1&#xA;dcf_value = fm.calculate_dcf(cash_flows, discount_rate)&#xA;print(&#34;DCF Value:&#34;, dcf_value)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example usage of Portfolio Optimization&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;import finmodels as fm&#xA;import numpy as np&#xA;&#xA;# Example usage of portfolio optimization&#xA;expected_returns = np.array([0.05, 0.08, 0.12])&#xA;covariance_matrix = np.array([[0.001, 0.0005, 0.0002],&#xA;                              [0.0005, 0.002, 0.001],&#xA;                              [0.0002, 0.001, 0.003]])&#xA;optimal_weights = fm.optimize_portfolio(expected_returns, covariance_matrix)&#xA;print(&#34;Optimal Portfolio Weights:&#34;, optimal_weights)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example usage of Leveraged Buyout (LBO) Model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;import finmodels as fm&#xA;# Example usage&#xA;acquisition_price_example = 1000&#xA;equity_percentage_example = 0.3&#xA;debt_interest_rate_example = 0.05&#xA;projection_years_example = 5&#xA;&#xA;# Create an instance of LBOModel&#xA;lbo_model = fm.LBOModel(acquisition_price_example, equity_percentage_example,&#xA;                     debt_interest_rate_example, projection_years_example)&#xA;&#xA;# Calculate and print equity returns&#xA;equity_returns_result = lbo_model.calculate_equity_returns()&#xA;print(f&#34;Equity Returns for each year: {equity_returns_result}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example usage of IPO Model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;import finmodels as fm&#xA;# Example usage&#xA;initial_valuation = 500000000  # Initial company valuation before IPO&#xA;funds_raised = 100000000  # Funds raised during the IPO&#xA;operating_income = 75000000  # Annual operating income before IPO&#xA;growth_rate = 0.05  # Annual growth rate of operating income&#xA;years = 5  # Number of years for the IPO model&#xA;&#xA;ipo_model = fm.IPOModel(initial_valuation, funds_raised, operating_income, growth_rate, years)&#xA;ipo_model.print_summary()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Contributors&lt;/h4&gt; &#xA;&lt;p&gt;Tamilselvan Arjunan&lt;/p&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
</feed>