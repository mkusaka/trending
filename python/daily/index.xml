<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-01T01:37:04Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HKUDS/LightRAG</title>
    <updated>2025-03-01T01:37:04Z</updated>
    <id>tag:github.com,2025-03-01:/HKUDS/LightRAG</id>
    <link href="https://github.com/HKUDS/LightRAG" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;LightRAG: Simple and Fast Retrieval-Augmented Generation&#34;&lt;/p&gt;&lt;hr&gt;&lt;center&gt;&#xA; &lt;h2&gt;🚀 LightRAG: Simple and Fast Retrieval-Augmented Generation&lt;/h2&gt;&#xA;&lt;/center&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table border=&#34;0&#34; width=&#34;100%&#34;&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td width=&#34;100&#34; align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/assets/logo.png&#34; width=&#34;80&#34; height=&#34;80&#34; alt=&#34;lightrag&#34;&gt; &lt;/td&gt; &#xA;    &lt;td&gt; &#xA;     &lt;div&gt; &#xA;      &lt;p&gt; &lt;a href=&#34;https://lightrag.github.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project-Page-Green&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://youtu.be/oageL-1I0GE&#34;&gt;&lt;img src=&#34;https://badges.aleen42.com/src/youtube.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2410.05779&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-2410.05779-b31b1b&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://learnopencv.com/lightrag&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/LearnOpenCV-blue&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;      &lt;p&gt; &lt;img src=&#34;https://img.shields.io/github/stars/hkuds/lightrag?color=green&amp;amp;style=social&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-3.10-blue&#34;&gt; &lt;a href=&#34;https://pypi.org/project/lightrag-hku/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/lightrag-hku.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/lightrag-hku&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/lightrag-hku/month&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;      &lt;p&gt; &lt;a href=&#34;https://discord.gg/yF2MmDJyGJ&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/1296348098003734629/widget.png?style=shield&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HKUDS/LightRAG/issues/285&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E7%BE%A4%E8%81%8A-wechat-green&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;     &lt;/div&gt; &lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;   This repository hosts the code of LightRAG. The structure of this code is based on &#xA;  &lt;a href=&#34;https://github.com/gusye1234/nano-graphrag&#34;&gt;nano-graphrag&lt;/a&gt;. &#xA;  &lt;img src=&#34;https://i-blog.csdnimg.cn/direct/b2aaf634151b4706892693ffb43d9093.png&#34; width=&#34;800&#34; alt=&#34;LightRAG Diagram&#34;&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;details&gt; &#xA; &lt;summary style=&#34;font-size: 1.4em; font-weight: bold; cursor: pointer; display: list-item;&#34;&gt; 🎉 News &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2025.02.05]🎯📢Our team has released &lt;a href=&#34;https://github.com/HKUDS/VideoRAG&#34;&gt;VideoRAG&lt;/a&gt; understanding extremely long-context videos.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2025.01.13]🎯📢Our team has released &lt;a href=&#34;https://github.com/HKUDS/MiniRAG&#34;&gt;MiniRAG&lt;/a&gt; making RAG simpler with small models.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2025.01.06]🎯📢You can now &lt;a href=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/#using-postgresql-for-storage&#34;&gt;use PostgreSQL for Storage&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.12.31]🎯📢LightRAG now supports &lt;a href=&#34;https://github.com/HKUDS/LightRAG?tab=readme-ov-file#delete&#34;&gt;deletion by document ID&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.11.25]🎯📢LightRAG now supports seamless integration of &lt;a href=&#34;https://github.com/HKUDS/LightRAG?tab=readme-ov-file#insert-custom-kg&#34;&gt;custom knowledge graphs&lt;/a&gt;, empowering users to enhance the system with their own domain expertise.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.11.19]🎯📢A comprehensive guide to LightRAG is now available on &lt;a href=&#34;https://learnopencv.com/lightrag&#34;&gt;LearnOpenCV&lt;/a&gt;. Many thanks to the blog author.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.11.12]🎯📢LightRAG now supports &lt;a href=&#34;https://github.com/HKUDS/LightRAG/raw/main/examples/lightrag_oracle_demo.py&#34;&gt;Oracle Database 23ai for all storage types (KV, vector, and graph)&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.11.11]🎯📢LightRAG now supports &lt;a href=&#34;https://github.com/HKUDS/LightRAG?tab=readme-ov-file#delete&#34;&gt;deleting entities by their names&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.11.09]🎯📢Introducing the &lt;a href=&#34;https://lightrag-gui.streamlit.app&#34;&gt;LightRAG Gui&lt;/a&gt;, which allows you to insert, query, visualize, and download LightRAG knowledge.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.11.04]🎯📢You can now &lt;a href=&#34;https://github.com/HKUDS/LightRAG?tab=readme-ov-file#using-neo4j-for-storage&#34;&gt;use Neo4J for Storage&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.10.29]🎯📢LightRAG now supports multiple file types, including PDF, DOC, PPT, and CSV via &lt;code&gt;textract&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.10.20]🎯📢We&#39;ve added a new feature to LightRAG: Graph Visualization.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.10.18]🎯📢We&#39;ve added a link to a &lt;a href=&#34;https://youtu.be/oageL-1I0GE&#34;&gt;LightRAG Introduction Video&lt;/a&gt;. Thanks to the author!&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.10.17]🎯📢We have created a &lt;a href=&#34;https://discord.gg/yF2MmDJyGJ&#34;&gt;Discord channel&lt;/a&gt;! Welcome to join for sharing and discussions! 🎉🎉&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.10.16]🎯📢LightRAG now supports &lt;a href=&#34;https://github.com/HKUDS/LightRAG?tab=readme-ov-file#quick-start&#34;&gt;Ollama models&lt;/a&gt;!&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; [2024.10.15]🎯📢LightRAG now supports &lt;a href=&#34;https://github.com/HKUDS/LightRAG?tab=readme-ov-file#quick-start&#34;&gt;Hugging Face models&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary style=&#34;font-size: 1.4em; font-weight: bold; cursor: pointer; display: list-item;&#34;&gt; Algorithm Flowchart &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://learnopencv.com/wp-content/uploads/2024/11/LightRAG-VectorDB-Json-KV-Store-Indexing-Flowchart-scaled.jpg&#34; alt=&#34;LightRAG Indexing Flowchart&#34;&gt; &lt;em&gt;Figure 1: LightRAG Indexing Flowchart - Img Caption : &lt;a href=&#34;https://learnopencv.com/lightrag/&#34;&gt;Source&lt;/a&gt;&lt;/em&gt; &lt;img src=&#34;https://learnopencv.com/wp-content/uploads/2024/11/LightRAG-Querying-Flowchart-Dual-Level-Retrieval-Generation-Knowledge-Graphs-scaled.jpg&#34; alt=&#34;LightRAG Retrieval and Querying Flowchart&#34;&gt; &lt;em&gt;Figure 2: LightRAG Retrieval and Querying Flowchart - Img Caption : &lt;a href=&#34;https://learnopencv.com/lightrag/&#34;&gt;Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install from source (Recommend)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd LightRAG&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install from PyPI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install lightrag-hku&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=g21royNJ4fw&#34;&gt;Video demo&lt;/a&gt; of running LightRAG locally.&lt;/li&gt; &#xA; &lt;li&gt;All the code can be found in the &lt;code&gt;examples&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set OpenAI API key in environment if using OpenAI models: &lt;code&gt;export OPENAI_API_KEY=&#34;sk-...&#34;.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the demo text &#34;A Christmas Carol by Charles Dickens&#34;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://raw.githubusercontent.com/gusye1234/nano-graphrag/main/tests/mock_data.txt &amp;gt; ./book.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Query&lt;/h2&gt; &#xA;&lt;p&gt;Use the below Python snippet (in a script) to initialize LightRAG and perform queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;from lightrag import LightRAG, QueryParam&#xA;from lightrag.llm.openai import gpt_4o_mini_complete, gpt_4o_complete, openai_embed&#xA;&#xA;rag = LightRAG(&#xA;    working_dir=&#34;your/path&#34;,&#xA;    embedding_func=openai_embed,&#xA;    llm_model_func=gpt_4o_mini_complete&#xA;)&#xA;&#xA;# Insert text&#xA;rag.insert(&#34;Your text&#34;)&#xA;&#xA;# Perform naive search&#xA;mode=&#34;naive&#34;&#xA;# Perform local search&#xA;mode=&#34;local&#34;&#xA;# Perform global search&#xA;mode=&#34;global&#34;&#xA;# Perform hybrid search&#xA;mode=&#34;hybrid&#34;&#xA;# Mix mode Integrates knowledge graph and vector retrieval.&#xA;mode=&#34;mix&#34;&#xA;&#xA;rag.query(&#xA;    &#34;What are the top themes in this story?&#34;,&#xA;    param=QueryParam(mode=mode)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query Param&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class QueryParam:&#xA;    mode: Literal[&#34;local&#34;, &#34;global&#34;, &#34;hybrid&#34;, &#34;naive&#34;, &#34;mix&#34;] = &#34;global&#34;&#xA;    &#34;&#34;&#34;Specifies the retrieval mode:&#xA;    - &#34;local&#34;: Focuses on context-dependent information.&#xA;    - &#34;global&#34;: Utilizes global knowledge.&#xA;    - &#34;hybrid&#34;: Combines local and global retrieval methods.&#xA;    - &#34;naive&#34;: Performs a basic search without advanced techniques.&#xA;    - &#34;mix&#34;: Integrates knowledge graph and vector retrieval. Mix mode combines knowledge graph and vector search:&#xA;        - Uses both structured (KG) and unstructured (vector) information&#xA;        - Provides comprehensive answers by analyzing relationships and context&#xA;        - Supports image content through HTML img tags&#xA;        - Allows control over retrieval depth via top_k parameter&#xA;    &#34;&#34;&#34;&#xA;    only_need_context: bool = False&#xA;    &#34;&#34;&#34;If True, only returns the retrieved context without generating a response.&#34;&#34;&#34;&#xA;    response_type: str = &#34;Multiple Paragraphs&#34;&#xA;    &#34;&#34;&#34;Defines the response format. Examples: &#39;Multiple Paragraphs&#39;, &#39;Single Paragraph&#39;, &#39;Bullet Points&#39;.&#34;&#34;&#34;&#xA;    top_k: int = 60&#xA;    &#34;&#34;&#34;Number of top items to retrieve. Represents entities in &#39;local&#39; mode and relationships in &#39;global&#39; mode.&#34;&#34;&#34;&#xA;    max_token_for_text_unit: int = 4000&#xA;    &#34;&#34;&#34;Maximum number of tokens allowed for each retrieved text chunk.&#34;&#34;&#34;&#xA;    max_token_for_global_context: int = 4000&#xA;    &#34;&#34;&#34;Maximum number of tokens allocated for relationship descriptions in global retrieval.&#34;&#34;&#34;&#xA;    max_token_for_local_context: int = 4000&#xA;    &#34;&#34;&#34;Maximum number of tokens allocated for entity descriptions in local retrieval.&#34;&#34;&#34;&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;default value of Top_k can be change by environment variables TOP_K.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Using Open AI-like APIs&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;LightRAG also supports Open AI-like chat/embeddings APIs:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;async def llm_model_func(&#xA;    prompt, system_prompt=None, history_messages=[], keyword_extraction=False, **kwargs&#xA;) -&amp;gt; str:&#xA;    return await openai_complete_if_cache(&#xA;        &#34;solar-mini&#34;,&#xA;        prompt,&#xA;        system_prompt=system_prompt,&#xA;        history_messages=history_messages,&#xA;        api_key=os.getenv(&#34;UPSTAGE_API_KEY&#34;),&#xA;        base_url=&#34;https://api.upstage.ai/v1/solar&#34;,&#xA;        **kwargs&#xA;    )&#xA;&#xA;async def embedding_func(texts: list[str]) -&amp;gt; np.ndarray:&#xA;    return await openai_embed(&#xA;        texts,&#xA;        model=&#34;solar-embedding-1-large-query&#34;,&#xA;        api_key=os.getenv(&#34;UPSTAGE_API_KEY&#34;),&#xA;        base_url=&#34;https://api.upstage.ai/v1/solar&#34;&#xA;    )&#xA;&#xA;rag = LightRAG(&#xA;    working_dir=WORKING_DIR,&#xA;    llm_model_func=llm_model_func,&#xA;    embedding_func=EmbeddingFunc(&#xA;        embedding_dim=4096,&#xA;        max_token_size=8192,&#xA;        func=embedding_func&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Using Hugging Face Models&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you want to use Hugging Face models, you only need to set LightRAG as follows:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;See &lt;code&gt;lightrag_hf_demo.py&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from lightrag.llm import hf_model_complete, hf_embed&#xA;from transformers import AutoModel, AutoTokenizer&#xA;from lightrag.utils import EmbeddingFunc&#xA;&#xA;# Initialize LightRAG with Hugging Face model&#xA;rag = LightRAG(&#xA;    working_dir=WORKING_DIR,&#xA;    llm_model_func=hf_model_complete,  # Use Hugging Face model for text generation&#xA;    llm_model_name=&#39;meta-llama/Llama-3.1-8B-Instruct&#39;,  # Model name from Hugging Face&#xA;    # Use Hugging Face embedding function&#xA;    embedding_func=EmbeddingFunc(&#xA;        embedding_dim=384,&#xA;        max_token_size=5000,&#xA;        func=lambda texts: hf_embed(&#xA;            texts,&#xA;            tokenizer=AutoTokenizer.from_pretrained(&#34;sentence-transformers/all-MiniLM-L6-v2&#34;),&#xA;            embed_model=AutoModel.from_pretrained(&#34;sentence-transformers/all-MiniLM-L6-v2&#34;)&#xA;        )&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Using Ollama Models&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;h3&gt;Overview&lt;/h3&gt; &#xA; &lt;p&gt;If you want to use Ollama models, you need to pull model you plan to use and embedding model, for example &lt;code&gt;nomic-embed-text&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Then you only need to set LightRAG as follows:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from lightrag.llm.ollama import ollama_model_complete, ollama_embed&#xA;from lightrag.utils import EmbeddingFunc&#xA;&#xA;# Initialize LightRAG with Ollama model&#xA;rag = LightRAG(&#xA;    working_dir=WORKING_DIR,&#xA;    llm_model_func=ollama_model_complete,  # Use Ollama model for text generation&#xA;    llm_model_name=&#39;your_model_name&#39;, # Your model name&#xA;    # Use Ollama embedding function&#xA;    embedding_func=EmbeddingFunc(&#xA;        embedding_dim=768,&#xA;        max_token_size=8192,&#xA;        func=lambda texts: ollama_embed(&#xA;            texts,&#xA;            embed_model=&#34;nomic-embed-text&#34;&#xA;        )&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Increasing context size&lt;/h3&gt; &#xA; &lt;p&gt;In order for LightRAG to work context should be at least 32k tokens. By default Ollama models have context size of 8k. You can achieve this using one of two ways:&lt;/p&gt; &#xA; &lt;h4&gt;Increasing the &lt;code&gt;num_ctx&lt;/code&gt; parameter in Modelfile.&lt;/h4&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Pull the model:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ollama pull qwen2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;Display the model file:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ollama show --modelfile qwen2 &amp;gt; Modelfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Edit the Modelfile by adding the following line:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PARAMETER num_ctx 32768&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;Create the modified model:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ollama create -f Modelfile qwen2m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Setup &lt;code&gt;num_ctx&lt;/code&gt; via Ollama API.&lt;/h4&gt; &#xA; &lt;p&gt;Tiy can use &lt;code&gt;llm_model_kwargs&lt;/code&gt; param to configure ollama:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rag = LightRAG(&#xA;    working_dir=WORKING_DIR,&#xA;    llm_model_func=ollama_model_complete,  # Use Ollama model for text generation&#xA;    llm_model_name=&#39;your_model_name&#39;, # Your model name&#xA;    llm_model_kwargs={&#34;options&#34;: {&#34;num_ctx&#34;: 32768}},&#xA;    # Use Ollama embedding function&#xA;    embedding_func=EmbeddingFunc(&#xA;        embedding_dim=768,&#xA;        max_token_size=8192,&#xA;        func=lambda texts: ollama_embedding(&#xA;            texts,&#xA;            embed_model=&#34;nomic-embed-text&#34;&#xA;        )&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Low RAM GPUs&lt;/h4&gt; &#xA; &lt;p&gt;In order to run this experiment on low RAM GPU you should select small model and tune context window (increasing context increase memory consumption). For example, running this ollama example on repurposed mining GPU with 6Gb of RAM required to set context size to 26k while using &lt;code&gt;gemma2:2b&lt;/code&gt;. It was able to find 197 entities and 19 relations on &lt;code&gt;book.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;LlamaIndex&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;LightRAG supports integration with LlamaIndex.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;strong&gt;LlamaIndex&lt;/strong&gt; (&lt;code&gt;llm/llama_index_impl.py&lt;/code&gt;): &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Integrates with OpenAI and other providers through LlamaIndex&lt;/li&gt; &#xA;    &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/lightrag/llm/Readme.md&#34;&gt;LlamaIndex Documentation&lt;/a&gt; for detailed setup and examples&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;h3&gt;Example Usage&lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Using LlamaIndex with direct OpenAI access&#xA;from lightrag import LightRAG&#xA;from lightrag.llm.llama_index_impl import llama_index_complete_if_cache, llama_index_embed&#xA;from llama_index.embeddings.openai import OpenAIEmbedding&#xA;from llama_index.llms.openai import OpenAI&#xA;&#xA;rag = LightRAG(&#xA;    working_dir=&#34;your/path&#34;,&#xA;    llm_model_func=llama_index_complete_if_cache,  # LlamaIndex-compatible completion function&#xA;    embedding_func=EmbeddingFunc(    # LlamaIndex-compatible embedding function&#xA;        embedding_dim=1536,&#xA;        max_token_size=8192,&#xA;        func=lambda texts: llama_index_embed(texts, embed_model=embed_model)&#xA;    ),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;For detailed documentation and examples, see:&lt;/h4&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/lightrag/llm/Readme.md&#34;&gt;LlamaIndex Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/examples/lightrag_llamaindex_direct_demo.py&#34;&gt;Direct OpenAI Example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/examples/lightrag_llamaindex_litellm_demo.py&#34;&gt;LiteLLM Proxy Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Conversation History Support&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;LightRAG now supports multi-turn dialogue through the conversation history feature. Here&#39;s how to use it:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from lightrag import LightRAG, QueryParam&#xA;&#xA;# Initialize LightRAG&#xA;rag = LightRAG(working_dir=WORKING_DIR)&#xA;&#xA;# Create conversation history&#xA;conversation_history = [&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;What is the main character&#39;s attitude towards Christmas?&#34;},&#xA;    {&#34;role&#34;: &#34;assistant&#34;, &#34;content&#34;: &#34;At the beginning of the story, Ebenezer Scrooge has a very negative attitude towards Christmas...&#34;},&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;How does his attitude change?&#34;}&#xA;]&#xA;&#xA;# Create query parameters with conversation history&#xA;query_param = QueryParam(&#xA;    mode=&#34;mix&#34;,  # or any other mode: &#34;local&#34;, &#34;global&#34;, &#34;hybrid&#34;&#xA;    conversation_history=conversation_history,  # Add the conversation history&#xA;    history_turns=3  # Number of recent conversation turns to consider&#xA;)&#xA;&#xA;# Make a query that takes into account the conversation history&#xA;response = rag.query(&#xA;    &#34;What causes this change in his character?&#34;,&#xA;    param=query_param&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Custom Prompt Support&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;LightRAG now supports custom prompts for fine-tuned control over the system&#39;s behavior. Here&#39;s how to use it:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from lightrag import LightRAG, QueryParam&#xA;&#xA;# Initialize LightRAG&#xA;rag = LightRAG(working_dir=WORKING_DIR)&#xA;&#xA;# Create query parameters&#xA;query_param = QueryParam(&#xA;    mode=&#34;hybrid&#34;,  # or other mode: &#34;local&#34;, &#34;global&#34;, &#34;hybrid&#34;, &#34;mix&#34; and &#34;naive&#34;&#xA;)&#xA;&#xA;# Example 1: Using the default system prompt&#xA;response_default = rag.query(&#xA;    &#34;What are the primary benefits of renewable energy?&#34;,&#xA;    param=query_param&#xA;)&#xA;print(response_default)&#xA;&#xA;# Example 2: Using a custom prompt&#xA;custom_prompt = &#34;&#34;&#34;&#xA;You are an expert assistant in environmental science. Provide detailed and structured answers with examples.&#xA;---Conversation History---&#xA;{history}&#xA;&#xA;---Knowledge Base---&#xA;{context_data}&#xA;&#xA;---Response Rules---&#xA;&#xA;- Target format and length: {response_type}&#xA;&#34;&#34;&#34;&#xA;response_custom = rag.query(&#xA;    &#34;What are the primary benefits of renewable energy?&#34;,&#xA;    param=query_param,&#xA;    system_prompt=custom_prompt  # Pass the custom prompt&#xA;)&#xA;print(response_custom)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Separate Keyword Extraction&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;We&#39;ve introduced a new function &lt;code&gt;query_with_separate_keyword_extraction&lt;/code&gt; to enhance the keyword extraction capabilities. This function separates the keyword extraction process from the user&#39;s prompt, focusing solely on the query to improve the relevance of extracted keywords.&lt;/p&gt; &#xA; &lt;h5&gt;How It Works?&lt;/h5&gt; &#xA; &lt;p&gt;The function operates by dividing the input into two parts:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;User Query&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Prompt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;It then performs keyword extraction exclusively on the &lt;code&gt;user query&lt;/code&gt;. This separation ensures that the extraction process is focused and relevant, unaffected by any additional language in the &lt;code&gt;prompt&lt;/code&gt;. It also allows the &lt;code&gt;prompt&lt;/code&gt; to serve purely for response formatting, maintaining the intent and clarity of the user&#39;s original question.&lt;/p&gt; &#xA; &lt;h5&gt;Usage Example&lt;/h5&gt; &#xA; &lt;p&gt;This &lt;code&gt;example&lt;/code&gt; shows how to tailor the function for educational content, focusing on detailed explanations for older students.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rag.query_with_separate_keyword_extraction(&#xA;    query=&#34;Explain the law of gravity&#34;,&#xA;    prompt=&#34;Provide a detailed explanation suitable for high school students studying physics.&#34;,&#xA;    param=QueryParam(mode=&#34;hybrid&#34;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Insert Custom KG&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rag = LightRAG(&#xA;     working_dir=WORKING_DIR,&#xA;     llm_model_func=llm_model_func,&#xA;     embedding_func=EmbeddingFunc(&#xA;          embedding_dim=embedding_dimension,&#xA;          max_token_size=8192,&#xA;          func=embedding_func,&#xA;     ),&#xA;)&#xA;&#xA;custom_kg = {&#xA;    &#34;entities&#34;: [&#xA;        {&#xA;            &#34;entity_name&#34;: &#34;CompanyA&#34;,&#xA;            &#34;entity_type&#34;: &#34;Organization&#34;,&#xA;            &#34;description&#34;: &#34;A major technology company&#34;,&#xA;            &#34;source_id&#34;: &#34;Source1&#34;&#xA;        },&#xA;        {&#xA;            &#34;entity_name&#34;: &#34;ProductX&#34;,&#xA;            &#34;entity_type&#34;: &#34;Product&#34;,&#xA;            &#34;description&#34;: &#34;A popular product developed by CompanyA&#34;,&#xA;            &#34;source_id&#34;: &#34;Source1&#34;&#xA;        }&#xA;    ],&#xA;    &#34;relationships&#34;: [&#xA;        {&#xA;            &#34;src_id&#34;: &#34;CompanyA&#34;,&#xA;            &#34;tgt_id&#34;: &#34;ProductX&#34;,&#xA;            &#34;description&#34;: &#34;CompanyA develops ProductX&#34;,&#xA;            &#34;keywords&#34;: &#34;develop, produce&#34;,&#xA;            &#34;weight&#34;: 1.0,&#xA;            &#34;source_id&#34;: &#34;Source1&#34;&#xA;        }&#xA;    ],&#xA;    &#34;chunks&#34;: [&#xA;        {&#xA;            &#34;content&#34;: &#34;ProductX, developed by CompanyA, has revolutionized the market with its cutting-edge features.&#34;,&#xA;            &#34;source_id&#34;: &#34;Source1&#34;,&#xA;        },&#xA;        {&#xA;            &#34;content&#34;: &#34;PersonA is a prominent researcher at UniversityB, focusing on artificial intelligence and machine learning.&#34;,&#xA;            &#34;source_id&#34;: &#34;Source2&#34;,&#xA;        },&#xA;        {&#xA;            &#34;content&#34;: &#34;None&#34;,&#xA;            &#34;source_id&#34;: &#34;UNKNOWN&#34;,&#xA;        },&#xA;    ],&#xA;}&#xA;&#xA;rag.insert_custom_kg(custom_kg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Insert&lt;/h2&gt; &#xA;&lt;h4&gt;Basic Insert&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Basic Insert&#xA;rag.insert(&#34;Text&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt; Batch Insert &lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Basic Batch Insert: Insert multiple texts at once&#xA;rag.insert([&#34;TEXT1&#34;, &#34;TEXT2&#34;,...])&#xA;&#xA;# Batch Insert with custom batch size configuration&#xA;rag = LightRAG(&#xA;    working_dir=WORKING_DIR,&#xA;    addon_params={&#xA;        &#34;insert_batch_size&#34;: 20  # Process 20 documents per batch&#xA;    }&#xA;)&#xA;rag.insert([&#34;TEXT1&#34;, &#34;TEXT2&#34;, &#34;TEXT3&#34;, ...])  # Documents will be processed in batches of 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The &lt;code&gt;insert_batch_size&lt;/code&gt; parameter in &lt;code&gt;addon_params&lt;/code&gt; controls how many documents are processed in each batch during insertion. This is useful for:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Managing memory usage with large document collections&lt;/li&gt; &#xA;  &lt;li&gt;Optimizing processing speed&lt;/li&gt; &#xA;  &lt;li&gt;Providing better progress tracking&lt;/li&gt; &#xA;  &lt;li&gt;Default value is 10 if not specified&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt; Insert with ID &lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If you want to provide your own IDs for your documents, number of documents and number of IDs must be the same.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Insert single text, and provide ID for it&#xA;rag.insert(&#34;TEXT1&#34;, ids=[&#34;ID_FOR_TEXT1&#34;])&#xA;&#xA;# Insert multiple texts, and provide IDs for them&#xA;rag.insert([&#34;TEXT1&#34;, &#34;TEXT2&#34;,...], ids=[&#34;ID_FOR_TEXT1&#34;, &#34;ID_FOR_TEXT2&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Incremental Insert&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Incremental Insert: Insert new documents into an existing LightRAG instance&#xA;rag = LightRAG(&#xA;     working_dir=WORKING_DIR,&#xA;     llm_model_func=llm_model_func,&#xA;     embedding_func=EmbeddingFunc(&#xA;          embedding_dim=embedding_dimension,&#xA;          max_token_size=8192,&#xA;          func=embedding_func,&#xA;     ),&#xA;)&#xA;&#xA;with open(&#34;./newText.txt&#34;) as f:&#xA;    rag.insert(f.read())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Insert using Pipeline&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;apipeline_enqueue_documents&lt;/code&gt; and &lt;code&gt;apipeline_process_enqueue_documents&lt;/code&gt; functions allow you to perform incremental insertion of documents into the graph.&lt;/p&gt; &#xA; &lt;p&gt;This is useful for scenarios where you want to process documents in the background while still allowing the main thread to continue executing.&lt;/p&gt; &#xA; &lt;p&gt;And using a routine to process news documents.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;rag = LightRAG(..)&#xA;await rag.apipeline_enqueue_documents(input)&#xA;# Your routine in loop&#xA;await rag.apipeline_process_enqueue_documents(input)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Insert Multi-file Type Support&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The &lt;code&gt;textract&lt;/code&gt; supports reading file types such as TXT, DOCX, PPTX, CSV, and PDF.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import textract&#xA;&#xA;file_path = &#39;TEXT.pdf&#39;&#xA;text_content = textract.process(file_path)&#xA;&#xA;rag.insert(text_content.decode(&#39;utf-8&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Storage&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Using Neo4J for Storage&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For production level scenarios you will most likely want to leverage an enterprise solution&lt;/li&gt; &#xA;  &lt;li&gt;for KG storage. Running Neo4J in Docker is recommended for seamless local testing.&lt;/li&gt; &#xA;  &lt;li&gt;See: &lt;a href=&#34;https://hub.docker.com/_/neo4j&#34;&gt;https://hub.docker.com/_/neo4j&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;export NEO4J_URI=&#34;neo4j://localhost:7687&#34;&#xA;export NEO4J_USERNAME=&#34;neo4j&#34;&#xA;export NEO4J_PASSWORD=&#34;password&#34;&#xA;&#xA;# When you launch the project be sure to override the default KG: NetworkX&#xA;# by specifying kg=&#34;Neo4JStorage&#34;.&#xA;&#xA;# Note: Default settings use NetworkX&#xA;# Initialize LightRAG with Neo4J implementation.&#xA;WORKING_DIR = &#34;./local_neo4jWorkDir&#34;&#xA;&#xA;rag = LightRAG(&#xA;    working_dir=WORKING_DIR,&#xA;    llm_model_func=gpt_4o_mini_complete,  # Use gpt_4o_mini_complete LLM model&#xA;    graph_storage=&#34;Neo4JStorage&#34;, #&amp;lt;-----------override KG default&#xA;    log_level=&#34;DEBUG&#34;  #&amp;lt;-----------override log_level default&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;see test_neo4j.py for a working example.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Using PostgreSQL for Storage&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;For production level scenarios you will most likely want to leverage an enterprise solution. PostgreSQL can provide a one-stop solution for you as KV store, VectorDB (pgvector) and GraphDB (apache AGE).&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;PostgreSQL is lightweight,the whole binary distribution including all necessary plugins can be zipped to 40MB: Ref to &lt;a href=&#34;https://github.com/ShanGor/apache-age-windows/releases/tag/PG17%2Fv1.5.0-rc0&#34;&gt;Windows Release&lt;/a&gt; as it is easy to install for Linux/Mac.&lt;/li&gt; &#xA;  &lt;li&gt;If you prefer docker, please start with this image if you are a beginner to avoid hiccups (DO read the overview): &lt;a href=&#34;https://hub.docker.com/r/shangor/postgres-for-rag&#34;&gt;https://hub.docker.com/r/shangor/postgres-for-rag&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;How to start? Ref to: &lt;a href=&#34;https://github.com/HKUDS/LightRAG/raw/main/examples/lightrag_zhipu_postgres_demo.py&#34;&gt;examples/lightrag_zhipu_postgres_demo.py&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Create index for AGE example: (Change below &lt;code&gt;dickens&lt;/code&gt; to your graph name if necessary) &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;load &#39;age&#39;;&#xA;SET search_path = ag_catalog, &#34;$user&#34;, public;&#xA;CREATE INDEX CONCURRENTLY entity_p_idx ON dickens.&#34;Entity&#34; (id);&#xA;CREATE INDEX CONCURRENTLY vertex_p_idx ON dickens.&#34;_ag_label_vertex&#34; (id);&#xA;CREATE INDEX CONCURRENTLY directed_p_idx ON dickens.&#34;DIRECTED&#34; (id);&#xA;CREATE INDEX CONCURRENTLY directed_eid_idx ON dickens.&#34;DIRECTED&#34; (end_id);&#xA;CREATE INDEX CONCURRENTLY directed_sid_idx ON dickens.&#34;DIRECTED&#34; (start_id);&#xA;CREATE INDEX CONCURRENTLY directed_seid_idx ON dickens.&#34;DIRECTED&#34; (start_id,end_id);&#xA;CREATE INDEX CONCURRENTLY edge_p_idx ON dickens.&#34;_ag_label_edge&#34; (id);&#xA;CREATE INDEX CONCURRENTLY edge_sid_idx ON dickens.&#34;_ag_label_edge&#34; (start_id);&#xA;CREATE INDEX CONCURRENTLY edge_eid_idx ON dickens.&#34;_ag_label_edge&#34; (end_id);&#xA;CREATE INDEX CONCURRENTLY edge_seid_idx ON dickens.&#34;_ag_label_edge&#34; (start_id,end_id);&#xA;create INDEX CONCURRENTLY vertex_idx_node_id ON dickens.&#34;_ag_label_vertex&#34; (ag_catalog.agtype_access_operator(properties, &#39;&#34;node_id&#34;&#39;::agtype));&#xA;create INDEX CONCURRENTLY entity_idx_node_id ON dickens.&#34;Entity&#34; (ag_catalog.agtype_access_operator(properties, &#39;&#34;node_id&#34;&#39;::agtype));&#xA;CREATE INDEX CONCURRENTLY entity_node_id_gin_idx ON dickens.&#34;Entity&#34; using gin(properties);&#xA;ALTER TABLE dickens.&#34;DIRECTED&#34; CLUSTER ON directed_sid_idx;&#xA;&#xA;-- drop if necessary&#xA;drop INDEX entity_p_idx;&#xA;drop INDEX vertex_p_idx;&#xA;drop INDEX directed_p_idx;&#xA;drop INDEX directed_eid_idx;&#xA;drop INDEX directed_sid_idx;&#xA;drop INDEX directed_seid_idx;&#xA;drop INDEX edge_p_idx;&#xA;drop INDEX edge_sid_idx;&#xA;drop INDEX edge_eid_idx;&#xA;drop INDEX edge_seid_idx;&#xA;drop INDEX vertex_idx_node_id;&#xA;drop INDEX entity_idx_node_id;&#xA;drop INDEX entity_node_id_gin_idx;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Known issue of the Apache AGE: The released versions got below issue: &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;You might find that the properties of the nodes/edges are empty. It is a known issue of the release version: &lt;a href=&#34;https://github.com/apache/age/pull/1721&#34;&gt;https://github.com/apache/age/pull/1721&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;p&gt;You can Compile the AGE from source code and fix it.&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Using Faiss for Storage&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Install the required dependencies:&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;pip install faiss-cpu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also install &lt;code&gt;faiss-gpu&lt;/code&gt; if you have GPU support.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Here we are using &lt;code&gt;sentence-transformers&lt;/code&gt; but you can also use &lt;code&gt;OpenAIEmbedding&lt;/code&gt; model with &lt;code&gt;3072&lt;/code&gt; dimensions.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code&gt;async def embedding_func(texts: list[str]) -&amp;gt; np.ndarray:&#xA;    model = SentenceTransformer(&#39;all-MiniLM-L6-v2&#39;)&#xA;    embeddings = model.encode(texts, convert_to_numpy=True)&#xA;    return embeddings&#xA;&#xA;# Initialize LightRAG with the LLM model function and embedding function&#xA;    rag = LightRAG(&#xA;        working_dir=WORKING_DIR,&#xA;        llm_model_func=llm_model_func,&#xA;        embedding_func=EmbeddingFunc(&#xA;            embedding_dim=384,&#xA;            max_token_size=8192,&#xA;            func=embedding_func,&#xA;        ),&#xA;        vector_storage=&#34;FaissVectorDBStorage&#34;,&#xA;        vector_db_storage_cls_kwargs={&#xA;            &#34;cosine_better_than_threshold&#34;: 0.3  # Your desired threshold&#xA;        }&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Delete&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#xA;rag = LightRAG(&#xA;     working_dir=WORKING_DIR,&#xA;     llm_model_func=llm_model_func,&#xA;     embedding_func=EmbeddingFunc(&#xA;          embedding_dim=embedding_dimension,&#xA;          max_token_size=8192,&#xA;          func=embedding_func,&#xA;     ),&#xA;)&#xA;&#xA;#  Delete Entity: Deleting entities by their names&#xA;rag.delete_by_entity(&#34;Project Gutenberg&#34;)&#xA;&#xA;#  Delete Document: Deleting entities and relationships associated with the document by doc id&#xA;rag.delete_by_doc_id(&#34;doc_id&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LightRAG init parameters&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Parameters &lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;&lt;strong&gt;Parameter&lt;/strong&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;strong&gt;Explanation&lt;/strong&gt;&lt;/th&gt; &#xA;    &lt;th&gt;&lt;strong&gt;Default&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;working_dir&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Directory where the cache will be stored&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;lightrag_cache+timestamp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;kv_storage&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Storage type for documents and text chunks. Supported types: &lt;code&gt;JsonKVStorage&lt;/code&gt;, &lt;code&gt;OracleKVStorage&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;JsonKVStorage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;vector_storage&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Storage type for embedding vectors. Supported types: &lt;code&gt;NanoVectorDBStorage&lt;/code&gt;, &lt;code&gt;OracleVectorDBStorage&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;NanoVectorDBStorage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;graph_storage&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Storage type for graph edges and nodes. Supported types: &lt;code&gt;NetworkXStorage&lt;/code&gt;, &lt;code&gt;Neo4JStorage&lt;/code&gt;, &lt;code&gt;OracleGraphStorage&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;NetworkXStorage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;log_level&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Log level for application runtime&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;logging.DEBUG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;chunk_token_size&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum token size per chunk when splitting documents&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1200&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;chunk_overlap_token_size&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Overlap token size between two chunks when splitting documents&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;tiktoken_model_name&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Model name for the Tiktoken encoder used to calculate token numbers&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;gpt-4o-mini&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;entity_extract_max_gleaning&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Number of loops in the entity extraction process, appending history messages&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;entity_summary_to_max_tokens&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum token size for each entity summary&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;500&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;node_embedding_algorithm&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Algorithm for node embedding (currently not used)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;node2vec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;node2vec_params&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Parameters for node embedding&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{&#34;dimensions&#34;: 1536,&#34;num_walks&#34;: 10,&#34;walk_length&#34;: 40,&#34;window_size&#34;: 2,&#34;iterations&#34;: 3,&#34;random_seed&#34;: 3,}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;embedding_func&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;EmbeddingFunc&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Function to generate embedding vectors from text&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;openai_embed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;embedding_batch_num&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum batch size for embedding processes (multiple texts sent per batch)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;embedding_func_max_async&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum number of concurrent asynchronous embedding processes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;16&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;llm_model_func&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;callable&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Function for LLM generation&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;gpt_4o_mini_complete&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;llm_model_name&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;LLM model name for generation&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;meta-llama/Llama-3.2-1B-Instruct&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;llm_model_max_token_size&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum token size for LLM generation (affects entity relation summaries)&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;32768&lt;/code&gt;（default value changed by env var MAX_TOKENS)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;llm_model_max_async&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Maximum number of concurrent asynchronous LLM processes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;16&lt;/code&gt;（default value changed by env var MAX_ASYNC)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;llm_model_kwargs&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Additional parameters for LLM generation&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;vector_db_storage_cls_kwargs&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Additional parameters for vector database, like setting the threshold for nodes and relations retrieval.&lt;/td&gt; &#xA;    &lt;td&gt;cosine_better_than_threshold: 0.2（default value changed by env var COSINE_THRESHOLD)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;enable_llm_cache&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If &lt;code&gt;TRUE&lt;/code&gt;, stores LLM results in cache; repeated prompts return cached responses&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;enable_llm_cache_for_entity_extract&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If &lt;code&gt;TRUE&lt;/code&gt;, stores LLM results in cache for entity extraction; Good for beginners to debug your application&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;addon_params&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Additional parameters, e.g., &lt;code&gt;{&#34;example_number&#34;: 1, &#34;language&#34;: &#34;Simplified Chinese&#34;, &#34;entity_types&#34;: [&#34;organization&#34;, &#34;person&#34;, &#34;geo&#34;, &#34;event&#34;], &#34;insert_batch_size&#34;: 10}&lt;/code&gt;: sets example limit, output language, and batch size for document processing&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;example_number: all examples, language: English, insert_batch_size: 10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;convert_response_to_json_func&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;callable&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not used&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;convert_response_to_json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;embedding_cache_config&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Configuration for question-answer caching. Contains three parameters:&lt;br&gt;- &lt;code&gt;enabled&lt;/code&gt;: Boolean value to enable/disable cache lookup functionality. When enabled, the system will check cached responses before generating new answers.&lt;br&gt;- &lt;code&gt;similarity_threshold&lt;/code&gt;: Float value (0-1), similarity threshold. When a new question&#39;s similarity with a cached question exceeds this threshold, the cached answer will be returned directly without calling the LLM.&lt;br&gt;- &lt;code&gt;use_llm_check&lt;/code&gt;: Boolean value to enable/disable LLM similarity verification. When enabled, LLM will be used as a secondary check to verify the similarity between questions before returning cached answers.&lt;/td&gt; &#xA;    &lt;td&gt;Default: &lt;code&gt;{&#34;enabled&#34;: False, &#34;similarity_threshold&#34;: 0.95, &#34;use_llm_check&#34;: False}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;log_dir&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Directory to store logs.&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;./&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to view error handling details&lt;/summary&gt; &#xA; &lt;p&gt;The API includes comprehensive error handling:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;File not found errors (404)&lt;/li&gt; &#xA;  &lt;li&gt;Processing errors (500)&lt;/li&gt; &#xA;  &lt;li&gt;Supports multiple file encodings (UTF-8 and GBK)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;LightRag can be installed with API support to serve a Fast api interface to perform data upload and indexing/Rag operations/Rescan of the input folder etc..&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/lightrag/api/README.md&#34;&gt;LightRag API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Graph Visualization&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Graph visualization with html&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The following code can be found in &lt;code&gt;examples/graph_visual_with_html.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import networkx as nx&#xA;from pyvis.network import Network&#xA;&#xA;# Load the GraphML file&#xA;G = nx.read_graphml(&#39;./dickens/graph_chunk_entity_relation.graphml&#39;)&#xA;&#xA;# Create a Pyvis network&#xA;net = Network(notebook=True)&#xA;&#xA;# Convert NetworkX graph to Pyvis network&#xA;net.from_nx(G)&#xA;&#xA;# Save and display the network&#xA;net.show(&#39;knowledge_graph.html&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Graph visualization with Neo4&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;The following code can be found in &lt;code&gt;examples/graph_visual_with_neo4j.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;import json&#xA;from lightrag.utils import xml_to_json&#xA;from neo4j import GraphDatabase&#xA;&#xA;# Constants&#xA;WORKING_DIR = &#34;./dickens&#34;&#xA;BATCH_SIZE_NODES = 500&#xA;BATCH_SIZE_EDGES = 100&#xA;&#xA;# Neo4j connection credentials&#xA;NEO4J_URI = &#34;bolt://localhost:7687&#34;&#xA;NEO4J_USERNAME = &#34;neo4j&#34;&#xA;NEO4J_PASSWORD = &#34;your_password&#34;&#xA;&#xA;def convert_xml_to_json(xml_path, output_path):&#xA;    &#34;&#34;&#34;Converts XML file to JSON and saves the output.&#34;&#34;&#34;&#xA;    if not os.path.exists(xml_path):&#xA;        print(f&#34;Error: File not found - {xml_path}&#34;)&#xA;        return None&#xA;&#xA;    json_data = xml_to_json(xml_path)&#xA;    if json_data:&#xA;        with open(output_path, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:&#xA;            json.dump(json_data, f, ensure_ascii=False, indent=2)&#xA;        print(f&#34;JSON file created: {output_path}&#34;)&#xA;        return json_data&#xA;    else:&#xA;        print(&#34;Failed to create JSON data&#34;)&#xA;        return None&#xA;&#xA;def process_in_batches(tx, query, data, batch_size):&#xA;    &#34;&#34;&#34;Process data in batches and execute the given query.&#34;&#34;&#34;&#xA;    for i in range(0, len(data), batch_size):&#xA;        batch = data[i:i + batch_size]&#xA;        tx.run(query, {&#34;nodes&#34;: batch} if &#34;nodes&#34; in query else {&#34;edges&#34;: batch})&#xA;&#xA;def main():&#xA;    # Paths&#xA;    xml_file = os.path.join(WORKING_DIR, &#39;graph_chunk_entity_relation.graphml&#39;)&#xA;    json_file = os.path.join(WORKING_DIR, &#39;graph_data.json&#39;)&#xA;&#xA;    # Convert XML to JSON&#xA;    json_data = convert_xml_to_json(xml_file, json_file)&#xA;    if json_data is None:&#xA;        return&#xA;&#xA;    # Load nodes and edges&#xA;    nodes = json_data.get(&#39;nodes&#39;, [])&#xA;    edges = json_data.get(&#39;edges&#39;, [])&#xA;&#xA;    # Neo4j queries&#xA;    create_nodes_query = &#34;&#34;&#34;&#xA;    UNWIND $nodes AS node&#xA;    MERGE (e:Entity {id: node.id})&#xA;    SET e.entity_type = node.entity_type,&#xA;        e.description = node.description,&#xA;        e.source_id = node.source_id,&#xA;        e.displayName = node.id&#xA;    REMOVE e:Entity&#xA;    WITH e, node&#xA;    CALL apoc.create.addLabels(e, [node.entity_type]) YIELD node AS labeledNode&#xA;    RETURN count(*)&#xA;    &#34;&#34;&#34;&#xA;&#xA;    create_edges_query = &#34;&#34;&#34;&#xA;    UNWIND $edges AS edge&#xA;    MATCH (source {id: edge.source})&#xA;    MATCH (target {id: edge.target})&#xA;    WITH source, target, edge,&#xA;         CASE&#xA;            WHEN edge.keywords CONTAINS &#39;lead&#39; THEN &#39;lead&#39;&#xA;            WHEN edge.keywords CONTAINS &#39;participate&#39; THEN &#39;participate&#39;&#xA;            WHEN edge.keywords CONTAINS &#39;uses&#39; THEN &#39;uses&#39;&#xA;            WHEN edge.keywords CONTAINS &#39;located&#39; THEN &#39;located&#39;&#xA;            WHEN edge.keywords CONTAINS &#39;occurs&#39; THEN &#39;occurs&#39;&#xA;           ELSE REPLACE(SPLIT(edge.keywords, &#39;,&#39;)[0], &#39;\&#34;&#39;, &#39;&#39;)&#xA;         END AS relType&#xA;    CALL apoc.create.relationship(source, relType, {&#xA;      weight: edge.weight,&#xA;      description: edge.description,&#xA;      keywords: edge.keywords,&#xA;      source_id: edge.source_id&#xA;    }, target) YIELD rel&#xA;    RETURN count(*)&#xA;    &#34;&#34;&#34;&#xA;&#xA;    set_displayname_and_labels_query = &#34;&#34;&#34;&#xA;    MATCH (n)&#xA;    SET n.displayName = n.id&#xA;    WITH n&#xA;    CALL apoc.create.setLabels(n, [n.entity_type]) YIELD node&#xA;    RETURN count(*)&#xA;    &#34;&#34;&#34;&#xA;&#xA;    # Create a Neo4j driver&#xA;    driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USERNAME, NEO4J_PASSWORD))&#xA;&#xA;    try:&#xA;        # Execute queries in batches&#xA;        with driver.session() as session:&#xA;            # Insert nodes in batches&#xA;            session.execute_write(process_in_batches, create_nodes_query, nodes, BATCH_SIZE_NODES)&#xA;&#xA;            # Insert edges in batches&#xA;            session.execute_write(process_in_batches, create_edges_query, edges, BATCH_SIZE_EDGES)&#xA;&#xA;            # Set displayName and labels&#xA;            session.run(set_displayname_and_labels_query)&#xA;&#xA;    except Exception as e:&#xA;        print(f&#34;Error occurred: {e}&#34;)&#xA;&#xA;    finally:&#xA;        driver.close()&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;b&gt;Graphml 3d visualizer&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;p&gt;LightRag can be installed with Tools support to add extra tools like the graphml 3d visualizer.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HKUDS/LightRAG/main/lightrag/tools/lightrag_visualizer/README.md&#34;&gt;LightRag Visualizer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;h3&gt;Dataset&lt;/h3&gt; &#xA;&lt;p&gt;The dataset used in LightRAG can be downloaded from &lt;a href=&#34;https://huggingface.co/datasets/TommyChien/UltraDomain&#34;&gt;TommyChien/UltraDomain&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Generate Query&lt;/h3&gt; &#xA;&lt;p&gt;LightRAG uses the following prompt to generate high-level queries, with the corresponding code in &lt;code&gt;example/generate_query.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Prompt &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Given the following description of a dataset:&#xA;&#xA;{description}&#xA;&#xA;Please identify 5 potential users who would engage with this dataset. For each user, list 5 tasks they would perform with this dataset. Then, for each (user, task) combination, generate 5 questions that require a high-level understanding of the entire dataset.&#xA;&#xA;Output the results in the following structure:&#xA;- User 1: [user description]&#xA;    - Task 1: [task description]&#xA;        - Question 1:&#xA;        - Question 2:&#xA;        - Question 3:&#xA;        - Question 4:&#xA;        - Question 5:&#xA;    - Task 2: [task description]&#xA;        ...&#xA;    - Task 5: [task description]&#xA;- User 2: [user description]&#xA;    ...&#xA;- User 5: [user description]&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Batch Eval&lt;/h3&gt; &#xA;&lt;p&gt;To evaluate the performance of two RAG systems on high-level queries, LightRAG uses the following prompt, with the specific code available in &lt;code&gt;example/batch_eval.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Prompt &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;---Role---&#xA;You are an expert tasked with evaluating two answers to the same question based on three criteria: **Comprehensiveness**, **Diversity**, and **Empowerment**.&#xA;---Goal---&#xA;You will evaluate two answers to the same question based on three criteria: **Comprehensiveness**, **Diversity**, and **Empowerment**.&#xA;&#xA;- **Comprehensiveness**: How much detail does the answer provide to cover all aspects and details of the question?&#xA;- **Diversity**: How varied and rich is the answer in providing different perspectives and insights on the question?&#xA;- **Empowerment**: How well does the answer help the reader understand and make informed judgments about the topic?&#xA;&#xA;For each criterion, choose the better answer (either Answer 1 or Answer 2) and explain why. Then, select an overall winner based on these three categories.&#xA;&#xA;Here is the question:&#xA;{query}&#xA;&#xA;Here are the two answers:&#xA;&#xA;**Answer 1:**&#xA;{answer1}&#xA;&#xA;**Answer 2:**&#xA;{answer2}&#xA;&#xA;Evaluate both answers using the three criteria listed above and provide detailed explanations for each criterion.&#xA;&#xA;Output your evaluation in the following JSON format:&#xA;&#xA;{{&#xA;    &#34;Comprehensiveness&#34;: {{&#xA;        &#34;Winner&#34;: &#34;[Answer 1 or Answer 2]&#34;,&#xA;        &#34;Explanation&#34;: &#34;[Provide explanation here]&#34;&#xA;    }},&#xA;    &#34;Empowerment&#34;: {{&#xA;        &#34;Winner&#34;: &#34;[Answer 1 or Answer 2]&#34;,&#xA;        &#34;Explanation&#34;: &#34;[Provide explanation here]&#34;&#xA;    }},&#xA;    &#34;Overall Winner&#34;: {{&#xA;        &#34;Winner&#34;: &#34;[Answer 1 or Answer 2]&#34;,&#xA;        &#34;Explanation&#34;: &#34;[Summarize why this answer is the overall winner based on the three criteria]&#34;&#xA;    }}&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Overall Performance Table&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Agriculture&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;CS&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Legal&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Mix&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NaiveRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NaiveRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NaiveRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NaiveRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Comprehensiveness&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;83.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.2%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Diversity&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;23.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;76.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;62.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;13.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;86.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.6%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empowerment&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;16.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;83.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;42.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;57.2%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Overall&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;15.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;84.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;40.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;60.0%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RQ-RAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RQ-RAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RQ-RAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;RQ-RAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Comprehensiveness&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;31.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;68.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;15.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;84.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;39.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;60.8%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Diversity&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;29.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;70.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;39.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;60.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;11.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;88.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;30.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;69.2%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empowerment&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;31.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;68.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;36.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;63.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;15.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;84.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;42.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;57.6%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Overall&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;62.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;85.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;40.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;60.0%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HyDE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HyDE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HyDE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;HyDE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Comprehensiveness&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;26.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;74.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;41.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;58.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;26.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;73.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;40.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;59.6%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Diversity&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;24.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;76.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;38.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;61.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;20.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;80.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;32.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;67.6%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empowerment&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;25.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;74.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;40.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;59.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;26.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;74.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;46.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;54.0%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Overall&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;24.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;75.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;41.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;58.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;26.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;73.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;42.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;57.6%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GraphRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GraphRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GraphRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GraphRAG&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LightRAG&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Comprehensiveness&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;45.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;54.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;48.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;48.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;51.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;50.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;49.6%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Diversity&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;22.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;77.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;40.8%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;59.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;26.4%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;73.6%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;36.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;64.0%&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empowerment&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;41.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;58.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;45.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;54.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;43.6%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;56.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;50.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;49.2%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Overall&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;45.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;54.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;48.0%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;52.0%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;47.2%&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;52.8%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;50.4%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;49.6%&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Reproduce&lt;/h2&gt; &#xA;&lt;p&gt;All the code can be found in the &lt;code&gt;./reproduce&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Step-0 Extract Unique Contexts&lt;/h3&gt; &#xA;&lt;p&gt;First, we need to extract unique contexts in the datasets.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Code &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def extract_unique_contexts(input_directory, output_directory):&#xA;&#xA;    os.makedirs(output_directory, exist_ok=True)&#xA;&#xA;    jsonl_files = glob.glob(os.path.join(input_directory, &#39;*.jsonl&#39;))&#xA;    print(f&#34;Found {len(jsonl_files)} JSONL files.&#34;)&#xA;&#xA;    for file_path in jsonl_files:&#xA;        filename = os.path.basename(file_path)&#xA;        name, ext = os.path.splitext(filename)&#xA;        output_filename = f&#34;{name}_unique_contexts.json&#34;&#xA;        output_path = os.path.join(output_directory, output_filename)&#xA;&#xA;        unique_contexts_dict = {}&#xA;&#xA;        print(f&#34;Processing file: {filename}&#34;)&#xA;&#xA;        try:&#xA;            with open(file_path, &#39;r&#39;, encoding=&#39;utf-8&#39;) as infile:&#xA;                for line_number, line in enumerate(infile, start=1):&#xA;                    line = line.strip()&#xA;                    if not line:&#xA;                        continue&#xA;                    try:&#xA;                        json_obj = json.loads(line)&#xA;                        context = json_obj.get(&#39;context&#39;)&#xA;                        if context and context not in unique_contexts_dict:&#xA;                            unique_contexts_dict[context] = None&#xA;                    except json.JSONDecodeError as e:&#xA;                        print(f&#34;JSON decoding error in file {filename} at line {line_number}: {e}&#34;)&#xA;        except FileNotFoundError:&#xA;            print(f&#34;File not found: {filename}&#34;)&#xA;            continue&#xA;        except Exception as e:&#xA;            print(f&#34;An error occurred while processing file {filename}: {e}&#34;)&#xA;            continue&#xA;&#xA;        unique_contexts_list = list(unique_contexts_dict.keys())&#xA;        print(f&#34;There are {len(unique_contexts_list)} unique `context` entries in the file {filename}.&#34;)&#xA;&#xA;        try:&#xA;            with open(output_path, &#39;w&#39;, encoding=&#39;utf-8&#39;) as outfile:&#xA;                json.dump(unique_contexts_list, outfile, ensure_ascii=False, indent=4)&#xA;            print(f&#34;Unique `context` entries have been saved to: {output_filename}&#34;)&#xA;        except Exception as e:&#xA;            print(f&#34;An error occurred while saving to the file {output_filename}: {e}&#34;)&#xA;&#xA;    print(&#34;All files have been processed.&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Step-1 Insert Contexts&lt;/h3&gt; &#xA;&lt;p&gt;For the extracted contexts, we insert them into the LightRAG system.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Code &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def insert_text(rag, file_path):&#xA;    with open(file_path, mode=&#39;r&#39;) as f:&#xA;        unique_contexts = json.load(f)&#xA;&#xA;    retries = 0&#xA;    max_retries = 3&#xA;    while retries &amp;lt; max_retries:&#xA;        try:&#xA;            rag.insert(unique_contexts)&#xA;            break&#xA;        except Exception as e:&#xA;            retries += 1&#xA;            print(f&#34;Insertion failed, retrying ({retries}/{max_retries}), error: {e}&#34;)&#xA;            time.sleep(10)&#xA;    if retries == max_retries:&#xA;        print(&#34;Insertion failed after exceeding the maximum number of retries&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Step-2 Generate Queries&lt;/h3&gt; &#xA;&lt;p&gt;We extract tokens from the first and the second half of each context in the dataset, then combine them as dataset descriptions to generate queries.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Code &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tokenizer = GPT2Tokenizer.from_pretrained(&#39;gpt2&#39;)&#xA;&#xA;def get_summary(context, tot_tokens=2000):&#xA;    tokens = tokenizer.tokenize(context)&#xA;    half_tokens = tot_tokens // 2&#xA;&#xA;    start_tokens = tokens[1000:1000 + half_tokens]&#xA;    end_tokens = tokens[-(1000 + half_tokens):1000]&#xA;&#xA;    summary_tokens = start_tokens + end_tokens&#xA;    summary = tokenizer.convert_tokens_to_string(summary_tokens)&#xA;&#xA;    return summary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Step-3 Query&lt;/h3&gt; &#xA;&lt;p&gt;For the queries generated in Step-2, we will extract them and query LightRAG.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Code &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def extract_queries(file_path):&#xA;    with open(file_path, &#39;r&#39;) as f:&#xA;        data = f.read()&#xA;&#xA;    data = data.replace(&#39;**&#39;, &#39;&#39;)&#xA;&#xA;    queries = re.findall(r&#39;- Question \d+: (.+)&#39;, data)&#xA;&#xA;    return queries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#HKUDS/LightRAG&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=HKUDS/LightRAG&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=HKUDS/LightRAG&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=HKUDS/LightRAG&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our contributors!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/HKUDS/LightRAG/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=HKUDS/LightRAG&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;🌟Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@article{guo2024lightrag,&#xA;title={LightRAG: Simple and Fast Retrieval-Augmented Generation},&#xA;author={Zirui Guo and Lianghao Xia and Yanhua Yu and Tu Ao and Chao Huang},&#xA;year={2024},&#xA;eprint={2410.05779},&#xA;archivePrefix={arXiv},&#xA;primaryClass={cs.IR}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thank you for your interest in our work!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>