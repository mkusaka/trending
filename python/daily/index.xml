<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-10T01:36:47Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>infinition/Bjorn</title>
    <updated>2024-11-10T01:36:47Z</updated>
    <id>tag:github.com,2024-11-10:/infinition/Bjorn</id>
    <link href="https://github.com/infinition/Bjorn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bjorn is a powerful network scanning and offensive security tool for the Raspberry Pi with a 2.13-inch e-Paper HAT. It discovers network targets, identifies open ports, exposed services, and potential vulnerabilities. Bjorn can perform brute force attacks, file stealing, host zombification, and supports custom attack scripts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bjorn&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/c5eb4cc1-0c3d-497d-9422-1614651a84ab&#34; alt=&#34;thumbnail_IMG_0546&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#design&#34;&gt;Design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#educational-aspects&#34;&gt;Educational Aspects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#extensibility&#34;&gt;Extensibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#development-status&#34;&gt;Development Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#detailed-project-description&#34;&gt;Detailed Project Description&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#core-files&#34;&gt;Core Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#actions&#34;&gt;Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#data-structure&#34;&gt;Data Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#behavior-of-bjorn&#34;&gt;Behavior of Bjorn&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#installation-and-configuration&#34;&gt;Installation and Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#quick-installation&#34;&gt;Quick Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#manual-installation&#34;&gt;Manual Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-1-activate-spi--i2c&#34;&gt;Step 1: Activate SPI &amp;amp; I2C&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-2-system-dependencies&#34;&gt;Step 2: System Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-3-bjorn-installation&#34;&gt;Step 3: Bjorn Installation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-4-configure-file-descriptor-limits&#34;&gt;Step 4: Configure File Descriptor Limits&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-5-reload-systemd-and-apply-changes&#34;&gt;Step 5: Reload Systemd and Apply Changes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-6-modify-pam-configuration-files&#34;&gt;Step 6: Modify PAM Configuration Files&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#step-7-configure-services&#34;&gt;Step 7: Configure Services&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#running-bjorn&#34;&gt;Running Bjorn&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#manual-start&#34;&gt;Manual Start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#service-control&#34;&gt;Service Control&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#fresh-start&#34;&gt;Fresh Start&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#important-configuration-files&#34;&gt;Important Configuration Files&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#shared-configuration-shared_configjson&#34;&gt;Shared Configuration (&lt;code&gt;shared_config.json&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#actions-configuration-actionsjson&#34;&gt;Actions Configuration (&lt;code&gt;actions.json&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#known-issues-and-troubleshooting&#34;&gt;Known Issues and Troubleshooting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#current-development-issues&#34;&gt;Current Development Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#troubleshooting-steps&#34;&gt;Troubleshooting Steps&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#e-paper-display-support&#34;&gt;E-Paper Display Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#development-guidelines&#34;&gt;Development Guidelines&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#adding-new-actions&#34;&gt;Adding New Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#web-interface&#34;&gt;Web Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#project-roadmap&#34;&gt;Project Roadmap&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#current-focus&#34;&gt;Current Focus&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#future-plans&#34;&gt;Future Plans&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#support-and-contact&#34;&gt;Support and Contact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Bjorn is a&amp;nbsp;«&amp;nbsp;Tamagotchi like&amp;nbsp;» sophisticated, autonomous network scanning, vulnerability assessment, and offensive security tool designed to run on a Raspberry Pi equipped with a 2.13-inch e-Paper HAT. This document provides a detailed explanation of the project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network Scanning&lt;/strong&gt;: Identifies live hosts and open ports on the network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vulnerability Assessment&lt;/strong&gt;: Performs vulnerability scans using Nmap and other tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;System Attacks&lt;/strong&gt;: Conducts brute-force attacks on various services (FTP, SSH, SMB, RDP, Telnet, SQL).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;File Stealing&lt;/strong&gt;: Extracts data from vulnerable services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User Interface&lt;/strong&gt;: Real-time display on the e-Paper HAT and web interface for monitoring and interaction.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portability&lt;/strong&gt;: Self-contained and portable device, ideal for penetration testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Extensible architecture allowing addition of new actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Visual Interface&lt;/strong&gt;: The e-Paper HAT provides a visual interface for monitoring the ongoing actions, displaying results or stats, and interacting with Bjorn .&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Educational Aspects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Learning Tool&lt;/strong&gt;: Designed as an educational tool to understand cybersecurity concepts and penetration testing techniques.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Practical Experience&lt;/strong&gt;: Provides a practical means for students and professionals to familiarize themselves with network security practices and vulnerability assessment tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ethical Use&lt;/strong&gt;: This project is strictly for educational purposes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Responsibility&lt;/strong&gt;: The author and contributors disclaim any responsibility for misuse of Bjorn.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Legal Compliance&lt;/strong&gt;: Unauthorized use of this tool for malicious activities is prohibited and may be prosecuted by law.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extensibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evolution&lt;/strong&gt;: The main purpose of Bjorn is to gain new actions and extend his arsenal over time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Actions are designed to be modular and can be easily extended or modified to add new functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Possibilities&lt;/strong&gt;: From capturing pcap files to cracking hashes, man-in-the-middle attacks, and more—the possibilities are endless.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contribution&lt;/strong&gt;: It&#39;s up to the user to develop new actions and add them to the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project Status&lt;/strong&gt;: Ongoing development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Current Version&lt;/strong&gt;: Scripted auto-installer, or manual installation. Not yet packaged with Raspberry Pi OS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reason&lt;/strong&gt;: The project is still in an early stage, requiring further development and debugging.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/bcad830d-77d6-4f3e-833d-473eadd33921&#34; alt=&#34;Bjorn Display&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Detailed Project Description&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Project Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bjorn/&#xA;├── Bjorn.py&#xA;├── comment.py&#xA;├── display.py&#xA;├── epd_helper.py&#xA;├── init_shared.py&#xA;├── kill_port_8000.sh&#xA;├── logger.py&#xA;├── orchestrator.py&#xA;├── requirements.txt&#xA;├── shared.py&#xA;├── utils.py&#xA;├── webapp.py&#xA;├── __init__.py&#xA;├── actions/&#xA;│   ├── ftp_connector.py&#xA;│   ├── ssh_connector.py&#xA;│   ├── smb_connector.py&#xA;│   ├── rdp_connector.py&#xA;│   ├── telnet_connector.py&#xA;│   ├── sql_connector.py&#xA;│   ├── steal_files_ftp.py&#xA;│   ├── steal_files_ssh.py&#xA;│   ├── steal_files_smb.py&#xA;│   ├── steal_files_rdp.py&#xA;│   ├── steal_files_telnet.py&#xA;│   ├── steal_data_sql.py&#xA;│   ├── nmap_vuln_scanner.py&#xA;│   ├── scanning.py&#xA;│   └── __init__.py&#xA;├── backup/&#xA;│   ├── backups/&#xA;│   └── uploads/&#xA;├── config/&#xA;├── data/&#xA;│   ├── input/&#xA;│   │   └── dictionary/&#xA;│   ├── logs/&#xA;│   └── output/&#xA;│       ├── crackedpwd/&#xA;│       ├── data_stolen/&#xA;│       ├── scan_results/&#xA;│       ├── vulnerabilities/&#xA;│       └── zombies/&#xA;└── resources/&#xA;    └── waveshare_epd/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Core Files&lt;/h3&gt; &#xA;&lt;h4&gt;Bjorn.py&lt;/h4&gt; &#xA;&lt;p&gt;The main entry point for the application. It initializes and runs the main components, including the network scanner, orchestrator, display, and web server.&lt;/p&gt; &#xA;&lt;h4&gt;comment.py&lt;/h4&gt; &#xA;&lt;p&gt;Handles generating all the Bjorn comments displayed on the e-Paper HAT based on different themes/actions and statuses.&lt;/p&gt; &#xA;&lt;h4&gt;display.py&lt;/h4&gt; &#xA;&lt;p&gt;Manages the e-Paper HAT display, updating the screen with Bjorn character, the dialog/comments, and the current information such as network status, vulnerabilities, and various statistics.&lt;/p&gt; &#xA;&lt;h4&gt;epd_helper.py&lt;/h4&gt; &#xA;&lt;p&gt;Handles the low-level interactions with the e-Paper display hardware.&lt;/p&gt; &#xA;&lt;h4&gt;logger.py&lt;/h4&gt; &#xA;&lt;p&gt;Defines a custom logger with specific formatting and handlers for console and file logging. It also includes a custom log level for success messages.&lt;/p&gt; &#xA;&lt;h4&gt;orchestrator.py&lt;/h4&gt; &#xA;&lt;p&gt;Bjorn’s AI, an heuristic engine that orchestrates the different actions such as network scanning, vulnerability scanning, attacks, and file stealing. It loads and executes actions based on the configuration and sets the status of the actions and Bjorn.&lt;/p&gt; &#xA;&lt;h4&gt;shared.py&lt;/h4&gt; &#xA;&lt;p&gt;Defines the &lt;code&gt;SharedData&lt;/code&gt; class that holds configuration settings, paths, and methods for updating and managing shared data across different modules.&lt;/p&gt; &#xA;&lt;h4&gt;init_shared.py&lt;/h4&gt; &#xA;&lt;p&gt;Initializes shared data that is used across different modules. It loads the configuration and sets up necessary paths and variables.&lt;/p&gt; &#xA;&lt;h4&gt;utils.py&lt;/h4&gt; &#xA;&lt;p&gt;Contains utility functions used throughout the project.&lt;/p&gt; &#xA;&lt;h4&gt;webapp.py&lt;/h4&gt; &#xA;&lt;p&gt;Sets up and runs a web server to provide a web interface for changing settings, monitoring and interacting with Bjorn.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;h4&gt;actions/scanning.py&lt;/h4&gt; &#xA;&lt;p&gt;Conducts network scanning to identify live hosts and open ports. It updates the network knowledge base (&lt;code&gt;netkb&lt;/code&gt;) and generates scan results.&lt;/p&gt; &#xA;&lt;h4&gt;actions/nmap_vuln_scanner.py&lt;/h4&gt; &#xA;&lt;p&gt;Performs vulnerability scanning using Nmap. It parses the results and updates the vulnerability summary for each host.&lt;/p&gt; &#xA;&lt;h4&gt;Protocol Connectors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ftp_connector.py&lt;/strong&gt;: Brute-force attacks on FTP services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ssh_connector.py&lt;/strong&gt;: Brute-force attacks on SSH services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;smb_connector.py&lt;/strong&gt;: Brute-force attacks on SMB services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rdp_connector.py&lt;/strong&gt;: Brute-force attacks on RDP services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;telnet_connector.py&lt;/strong&gt;: Brute-force attacks on Telnet services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;sql_connector.py&lt;/strong&gt;: Brute-force attacks on SQL services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;File Stealing Modules&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_ftp.py&lt;/strong&gt;: Steals files from FTP servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_smb.py&lt;/strong&gt;: Steals files from SMB shares.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_ssh.py&lt;/strong&gt;: Steals files from SSH servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_files_telnet.py&lt;/strong&gt;: Steals files from Telnet servers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;steal_data_sql.py&lt;/strong&gt;: Extracts data from SQL databases.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Data Structure&lt;/h3&gt; &#xA;&lt;h4&gt;Network Knowledge Base (netkb.csv)&lt;/h4&gt; &#xA;&lt;p&gt;Located at &lt;code&gt;data/netkb.csv&lt;/code&gt;. Stores information about:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Known hosts and their status. (Alive or offline)&lt;/li&gt; &#xA; &lt;li&gt;Open ports and vulnerabilities.&lt;/li&gt; &#xA; &lt;li&gt;Action execution history. (Success or failed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/f641a565-2765-4280-a7d7-5b25c30dcea5&#34; alt=&#34;netkb1&#34;&gt; &lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/f08114a2-d7d1-4f50-b1c4-a9939ba66056&#34; alt=&#34;netkb2&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Scan Results&lt;/h4&gt; &#xA;&lt;p&gt;Located in &lt;code&gt;data/output/scan_results/&lt;/code&gt;. This file is generated everytime the network is scanned. It is used to consolidate the data and update netkb.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/infinition/Bjorn/assets/37984399/eb4a313a-f90c-4c43-b699-3678271886dc&#34; alt=&#34;Scan result&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Live Status (livestatus.csv)&lt;/h4&gt; &#xA;&lt;p&gt;Contains real-time information displayed on the e-Paper HAT:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Total number of known hosts.&lt;/li&gt; &#xA; &lt;li&gt;Currently alive hosts.&lt;/li&gt; &#xA; &lt;li&gt;Open ports count.&lt;/li&gt; &#xA; &lt;li&gt;Other runtime statistics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Behavior of Bjorn&lt;/h3&gt; &#xA;&lt;p&gt;Once launched, Bjorn performs the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Initialization&lt;/strong&gt;: Loads configuration, initializes shared data, and sets up necessary components such as the e-Paper HAT display.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network Scanning&lt;/strong&gt;: Scans the network to identify live hosts and open ports. Updates the network knowledge base (&lt;code&gt;netkb&lt;/code&gt;) with the results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Orchestration&lt;/strong&gt;: Orchestrates different actions based on the configuration and network knowledge base. This includes performing vulnerability scanning, attacks, and file stealing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vulnerability Scanning&lt;/strong&gt;: Performs vulnerability scans on identified hosts and updates the vulnerability summary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brute-Force Attacks and File Stealing&lt;/strong&gt;: Starts brute-force attacks and steals files based on the configuration criteria.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Display Updates&lt;/strong&gt;: Continuously updates the e-Paper HAT display with current information such as network status, vulnerabilities, and various statistics. Bjorn also displays random comments based on different themes and statuses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Server&lt;/strong&gt;: Provides a web interface for monitoring and interacting with Bjorn.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Raspberry Pi OS installed. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stable: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;System: 32-bit&lt;/li&gt; &#xA;     &lt;li&gt;Kernel version: 6.6&lt;/li&gt; &#xA;     &lt;li&gt;Debian version: 12 (bookworm) &#39;2024-10-22-raspios-bookworm-armhf-lite&#39;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Username and hostname set to &lt;code&gt;bjorn&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;2.13-inch e-Paper HAT connected to GPIO pins.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At the moment the paper screen v2 &amp;amp; v4 have been tested and implemented. I juste hope the V1 &amp;amp; V3 will work the same.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick Installation&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to install Bjorn is using the automatic installation script :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download and run the installer&#xA;wget https://raw.githubusercontent.com/infinition/Bjorn/refs/heads/main/install_bjorn.sh&#xA;sudo chmod +x install_bjorn.sh&#xA;sudo ./install_bjorn.sh&#xA;# Choose the choice 1 for automatic installation. It may take a while as a lot of packages and modules will be installed. You must reboot at the end.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Step 1: Activate SPI &amp;amp; I2C&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo raspi-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to &lt;strong&gt;&#34;Interface Options&#34;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;strong&gt;SPI&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;strong&gt;I2C&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Step 2: System Dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Update system&#xA;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y&#xA;&#xA;# Install required packages&#xA;&#xA; sudo apt install -y \&#xA;  libjpeg-dev \&#xA;  zlib1g-dev \&#xA;  libpng-dev \&#xA;  python3-dev \&#xA;  libffi-dev \&#xA;  libssl-dev \&#xA;  libgpiod-dev \&#xA;  libi2c-dev \&#xA;  libatlas-base-dev \&#xA;  build-essential \&#xA;  python3-pip \&#xA;  wget \&#xA;  lsof \&#xA;  git \&#xA;  libopenjp2-7 \&#xA;  nmap \&#xA;  libopenblas-dev \&#xA;  bluez-tools \&#xA;  bluez \&#xA;  dhcpcd5 \&#xA;  bridge-utils \&#xA;  python3-pil&#xA;&#xA;&#xA;# Update Nmap scripts database&#xA;&#xA;sudo nmap --script-updatedb&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3: Bjorn Installation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the Bjorn repository&#xA;cd /home/bjorn&#xA;git clone https://github.com/infinition/Bjorn.git&#xA;cd Bjorn&#xA;&#xA;# Install Python dependencies within the virtual environment&#xA;sudo pip install -r requirements.txt --break-system-packages&#xA;# As i did not succeed &#34;for now&#34; to get a stable installation with a virtual environment, i installed the dependencies system wide (with --break-system-packages), it did not cause any issue so far. You can try to install them in a virtual environment if you want.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;3.1: Configure E-Paper Display Type&lt;/h5&gt; &#xA;&lt;p&gt;Choose your e-Paper HAT version by modifying the configuration file:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the configuration file:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /home/bjorn/Bjorn/config/shared_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press i to enter insert mode Locate the line containing &#34;epd_type&#34;: Change the value according to your screen model:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For 2.13 V1: &#34;epd_type&#34;: &#34;epd2in13&#34;,&lt;/li&gt; &#xA; &lt;li&gt;For 2.13 V2: &#34;epd_type&#34;: &#34;epd2in13_V2&#34;,&lt;/li&gt; &#xA; &lt;li&gt;For 2.13 V3: &#34;epd_type&#34;: &#34;epd2in13_V3&#34;,&lt;/li&gt; &#xA; &lt;li&gt;For 2.13 V4: &#34;epd_type&#34;: &#34;epd2in13_V4&#34;,&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Press Esc to exit insert mode Type :wq and press Enter to save and quit&lt;/p&gt; &#xA;&lt;h4&gt;Step 4: Configure File Descriptor Limits&lt;/h4&gt; &#xA;&lt;p&gt;To prevent &lt;code&gt;OSError: [Errno 24] Too many open files&lt;/code&gt;, it&#39;s essential to increase the file descriptor limits.&lt;/p&gt; &#xA;&lt;h5&gt;4.1: Modify File Descriptor Limits for All Users&lt;/h5&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/security/limits.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/security/limits.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* soft nofile 65535&#xA;* hard nofile 65535&#xA;root soft nofile 65535&#xA;root hard nofile 65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4.2: Configure Systemd Limits&lt;/h5&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/systemd/system.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/system.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uncomment and modify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DefaultLimitNOFILE=65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/systemd/user.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/user.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uncomment and modify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DefaultLimitNOFILE=65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4.3: Create or Modify &lt;code&gt;/etc/security/limits.d/90-nofile.conf&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/security/limits.d/90-nofile.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;root soft nofile 65535&#xA;root hard nofile 65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;4.4: Adjust the System-wide File Descriptor Limit&lt;/h5&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/sysctl.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fs.file-max = 2097152&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apply the changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo sysctl -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 5: Reload Systemd and Apply Changes&lt;/h4&gt; &#xA;&lt;p&gt;Reload systemd to apply the new file descriptor limits:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl daemon-reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 6: Modify PAM Configuration Files&lt;/h4&gt; &#xA;&lt;p&gt;PAM (Pluggable Authentication Modules) manages how limits are enforced for user sessions. To ensure that the new file descriptor limits are respected, update the following configuration files.&lt;/p&gt; &#xA;&lt;h5&gt;Step 6.1: Edit &lt;code&gt;/etc/pam.d/common-session&lt;/code&gt; and &lt;code&gt;/etc/pam.d/common-session-noninteractive&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/pam.d/common-session&#xA;sudo vi /etc/pam.d/common-session-noninteractive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this line at the end of both files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;session required pam_limits.so&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This ensures that the limits set in &lt;code&gt;/etc/security/limits.conf&lt;/code&gt; are enforced for all user sessions.&lt;/p&gt; &#xA;&lt;h4&gt;Step 7: Configure Services&lt;/h4&gt; &#xA;&lt;h5&gt;7.1: Bjorn Service&lt;/h5&gt; &#xA;&lt;p&gt;Create the service file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/system/bjorn.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=Bjorn Service&#xA;DefaultDependencies=no&#xA;Before=basic.target&#xA;After=local-fs.target&#xA;&#xA;[Service]&#xA;ExecStartPre=/home/bjorn/Bjorn/kill_port_8000.sh&#xA;ExecStart=/usr/bin/python3 /home/bjorn/Bjorn/Bjorn.py&#xA;WorkingDirectory=/home/bjorn/Bjorn&#xA;StandardOutput=inherit&#xA;StandardError=inherit&#xA;Restart=always&#xA;User=root&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;7.2: Port 8000 Killer Script&lt;/h5&gt; &#xA;&lt;p&gt;Create the script to free up port 8000:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi /home/bjorn/Bjorn/kill_port_8000.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;PORT=8000&#xA;PIDS=$(lsof -t -i:$PORT)&#xA;&#xA;if [ -n &#34;$PIDS&#34; ]; then&#xA;    echo &#34;Killing PIDs using port $PORT: $PIDS&#34;&#xA;    kill -9 $PIDS&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make the script executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x /home/bjorn/Bjorn/kill_port_8000.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;7.3: USB Gadget Configuration&lt;/h5&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;/boot/firmware/cmdline.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /boot/firmware/cmdline.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following right after &lt;code&gt;rootwait&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;modules-load=dwc2,g_ether&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify &lt;code&gt;/boot/firmware/config.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /boot/firmware/config.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add at the end of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dtoverlay=dwc2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the USB gadget script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /usr/local/bin/usb-gadget.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;set -e&#xA;&#xA;modprobe libcomposite&#xA;cd /sys/kernel/config/usb_gadget/&#xA;mkdir -p g1&#xA;cd g1&#xA;&#xA;echo 0x1d6b &amp;gt; idVendor&#xA;echo 0x0104 &amp;gt; idProduct&#xA;echo 0x0100 &amp;gt; bcdDevice&#xA;echo 0x0200 &amp;gt; bcdUSB&#xA;&#xA;mkdir -p strings/0x409&#xA;echo &#34;fedcba9876543210&#34; &amp;gt; strings/0x409/serialnumber&#xA;echo &#34;Raspberry Pi&#34; &amp;gt; strings/0x409/manufacturer&#xA;echo &#34;Pi Zero USB&#34; &amp;gt; strings/0x409/product&#xA;&#xA;mkdir -p configs/c.1/strings/0x409&#xA;echo &#34;Config 1: ECM network&#34; &amp;gt; configs/c.1/strings/0x409/configuration&#xA;echo 250 &amp;gt; configs/c.1/MaxPower&#xA;&#xA;mkdir -p functions/ecm.usb0&#xA;&#xA;# Check for existing symlink and remove if necessary&#xA;if [ -L configs/c.1/ecm.usb0 ]; then&#xA;    rm configs/c.1/ecm.usb0&#xA;fi&#xA;ln -s functions/ecm.usb0 configs/c.1/&#xA;&#xA;# Ensure the device is not busy before listing available USB device controllers&#xA;max_retries=10&#xA;retry_count=0&#xA;&#xA;while ! ls /sys/class/udc &amp;gt; UDC 2&amp;gt;/dev/null; do&#xA;    if [ $retry_count -ge $max_retries ]; then&#xA;        echo &#34;Error: Device or resource busy after $max_retries attempts.&#34;&#xA;        exit 1&#xA;    fi&#xA;    retry_count=$((retry_count + 1))&#xA;    sleep 1&#xA;done&#xA;&#xA;# Check if the usb0 interface is already configured&#xA;if ! ip addr show usb0 | grep -q &#34;172.20.2.1&#34;; then&#xA;    ifconfig usb0 172.20.2.1 netmask 255.255.255.0&#xA;else&#xA;    echo &#34;Interface usb0 already configured.&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make the script executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chmod +x /usr/local/bin/usb-gadget.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the systemd service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/systemd/system/usb-gadget.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=USB Gadget Service&#xA;After=network.target&#xA;&#xA;[Service]&#xA;ExecStartPre=/sbin/modprobe libcomposite&#xA;ExecStart=/usr/local/bin/usb-gadget.sh&#xA;Type=simple&#xA;RemainAfterExit=yes&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;usb0&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/network/interfaces&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;allow-hotplug usb0&#xA;iface usb0 inet static&#xA;    address 172.20.2.1&#xA;    netmask 255.255.255.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Reload the services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl daemon-reload&#xA;sudo systemctl enable systemd-networkd&#xA;sudo systemctl enable usb-gadget&#xA;sudo systemctl start systemd-networkd&#xA;sudo systemctl start usb-gadget&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You must reboot to be able to use it as a USB gadget (with ip)&lt;/p&gt; &#xA;&lt;h6&gt;Windows PC Configuration&lt;/h6&gt; &#xA;&lt;p&gt;Set the static IP address on your Windows PC:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;IP Address&lt;/strong&gt;: &lt;code&gt;172.20.2.2&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subnet Mask&lt;/strong&gt;: &lt;code&gt;255.255.255.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Default Gateway&lt;/strong&gt;: &lt;code&gt;172.20.2.1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DNS Servers&lt;/strong&gt;: &lt;code&gt;8.8.8.8&lt;/code&gt;, &lt;code&gt;8.8.4.4&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Bjorn&lt;/h2&gt; &#xA;&lt;h3&gt;Manual Start&lt;/h3&gt; &#xA;&lt;p&gt;To manually start Bjorn (without the service, ensure the service is stopped «&amp;nbsp;sudo systemctl stop bjorn.service&amp;nbsp;»):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/bjorn/Bjorn&#xA;&#xA;# Run Bjorn&#xA;sudo python Bjorn.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Service Control&lt;/h3&gt; &#xA;&lt;p&gt;Control the Bjorn service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start Bjorn&#xA;sudo systemctl start bjorn.service&#xA;&#xA;# Stop Bjorn&#xA;sudo systemctl stop bjorn.service&#xA;&#xA;# Check status&#xA;sudo systemctl status bjorn.service&#xA;&#xA;# View logs&#xA;sudo journalctl -u bjorn.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fresh Start&lt;/h3&gt; &#xA;&lt;p&gt;To reset Bjorn to a clean state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm -rf /home/bjorn/Bjorn/config/*.json \&#xA;    /home/bjorn/Bjorn/data/*.csv \&#xA;    /home/bjorn/Bjorn/data/*.log \&#xA;    /home/bjorn/Bjorn/data/output/data_stolen/* \&#xA;    /home/bjorn/Bjorn/data/output/crackedpwd/* \&#xA;    /home/bjorn/Bjorn/config/* \&#xA;    /home/bjorn/Bjorn/data/output/scan_results/* \&#xA;    /home/bjorn/Bjorn/__pycache__ \&#xA;    /home/bjorn/Bjorn/config/__pycache__ \&#xA;    /home/bjorn/Bjorn/data/__pycache__ \&#xA;    /home/bjorn/Bjorn/actions/__pycache__ \&#xA;    /home/bjorn/Bjorn/resources/__pycache__ \&#xA;    /home/bjorn/Bjorn/web/__pycache__ \&#xA;    /home/bjorn/Bjorn/*.log \&#xA;    /home/bjorn/Bjorn/resources/waveshare_epd/__pycache__ \&#xA;    /home/bjorn/Bjorn/data/logs/* \&#xA;    /home/bjorn/Bjorn/data/output/vulnerabilities/* \&#xA;    /home/bjorn/Bjorn/data/logs/*&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything will be recreated automatically at the next launch of Bjorn.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Important Configuration Files&lt;/h2&gt; &#xA;&lt;h3&gt;Shared Configuration (&lt;code&gt;shared_config.json&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Defines various settings for Bjorn, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Boolean settings (&lt;code&gt;manual_mode&lt;/code&gt;, &lt;code&gt;websrv&lt;/code&gt;, &lt;code&gt;debug_mode&lt;/code&gt;, etc.).&lt;/li&gt; &#xA; &lt;li&gt;Time intervals and delays.&lt;/li&gt; &#xA; &lt;li&gt;Network settings.&lt;/li&gt; &#xA; &lt;li&gt;Port lists and blacklists. These settings are accessible on the webpage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Actions Configuration (&lt;code&gt;actions.json&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Lists the actions to be performed by Bjorn, including (dynamically generated with the content of the folder):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Module and class definitions.&lt;/li&gt; &#xA; &lt;li&gt;Port assignments.&lt;/li&gt; &#xA; &lt;li&gt;Parent-child relationships.&lt;/li&gt; &#xA; &lt;li&gt;Action status definitions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues and Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Current Development Issues&lt;/h3&gt; &#xA;&lt;h4&gt;1. Long Runtime Issue&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Problem&lt;/strong&gt;: &lt;code&gt;OSError: [Errno 24] Too many open files&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: Partially resolved with system limits configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Workaround&lt;/strong&gt;: Implemented file descriptor limits increase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;: Check open files with &lt;code&gt;lsof -p $(pgrep -f Bjorn.py) | wc -l&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;At the moment the logs show periodically this information as (FD : XXX)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Troubleshooting Steps&lt;/h3&gt; &#xA;&lt;h4&gt;1. Service Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Check service status&#xA;sudo systemctl status bjorn.service&#xA;&#xA;# View detailed logs&#xA;sudo journalctl -u bjorn.service -f&#xA;&#xA;# Check port 8000 usage&#xA;sudo lsof -i :8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Display Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Verify SPI devices&#xA;ls /dev/spi*&#xA;&#xA;# Check user permissions&#xA;sudo usermod -a -G spi,gpio bjorn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Network Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Check network interfaces&#xA;ip addr show&#xA;&#xA;# Test USB gadget interface&#xA;ip link show usb0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Permission Issues&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Fix ownership&#xA;sudo chown -R bjorn:bjorn /home/bjorn/Bjorn&#xA;&#xA;# Fix permissions&#xA;sudo chmod -R 755 /home/bjorn/Bjorn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;E-Paper Display Support&lt;/h2&gt; &#xA;&lt;p&gt;Currently hardcoded for the 2.13-inch V2 &amp;amp; V4 e-Paper HAT. My program automatically detect the screen model and adapt the python expressions into my code.&lt;/p&gt; &#xA;&lt;p&gt;For other versions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;As i dont have the v1 and v3 to validate my algorithm, i just hope it will work properly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ghosting removed ! 🍾&lt;/h3&gt; &#xA;&lt;p&gt;In my journey to make Bjorn work with the different screen versions, I struggled, hacking several parameters and found out that it was possible to remove the ghosting of screens! I let you see this, I think this method will be very useful for all other projects with the e-paper screen!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Guidelines&lt;/h2&gt; &#xA;&lt;h3&gt;Adding New Actions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new action file in &lt;code&gt;actions/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Implement required methods: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;__init__(self, shared_data)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;execute(self, ip, port, row, status_key)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the action to &lt;code&gt;actions.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow existing action patterns.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a test environment.&lt;/li&gt; &#xA; &lt;li&gt;Use an isolated network.&lt;/li&gt; &#xA; &lt;li&gt;Follow ethical guidelines.&lt;/li&gt; &#xA; &lt;li&gt;Document test cases.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web Interface&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access&lt;/strong&gt;: &lt;code&gt;http://[device-ip]:8000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Real-time monitoring with a console.&lt;/li&gt; &#xA;   &lt;li&gt;Configuration management.&lt;/li&gt; &#xA;   &lt;li&gt;Viewing results. (Credentials and files)&lt;/li&gt; &#xA;   &lt;li&gt;System control.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Roadmap&lt;/h2&gt; &#xA;&lt;h3&gt;Current Focus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stability improvements.&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;Service reliability.&lt;/li&gt; &#xA; &lt;li&gt;Documentation updates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Future Plans&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Additional attack modules.&lt;/li&gt; &#xA; &lt;li&gt;Enhanced reporting.&lt;/li&gt; &#xA; &lt;li&gt;Improved user interface.&lt;/li&gt; &#xA; &lt;li&gt;Extended protocol support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The project welcomes contributions in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New attack modules.&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;Documentation.&lt;/li&gt; &#xA; &lt;li&gt;Feature improvements.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support and Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Report Issues&lt;/strong&gt;: Via GitHub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Guidelines&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Follow ethical guidelines.&lt;/li&gt; &#xA;   &lt;li&gt;Document reproduction steps.&lt;/li&gt; &#xA;   &lt;li&gt;Provide logs and context.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Bjorn is a powerful tool designed to perform comprehensive network scanning, vulnerability assessment, and data exfiltration. Its modular design and extensive configuration options allow for flexible and targeted operations. By combining different actions and orchestrating them intelligently, Bjorn can provide valuable insights into network security and help identify and mitigate potential risks.&lt;/p&gt; &#xA;&lt;p&gt;The e-Paper HAT display and web interface make it easy to monitor and interact with Bjorn, providing real-time updates and status information. With its extensible architecture and customizable actions, Bjorn can be adapted to suit a wide range of security testing and monitoring needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Bjorn is distributed under the MIT License. See the &lt;code&gt;LICENSE&lt;/code&gt; file for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/infinition/Bjorn/main/#table-of-contents&#34;&gt;↖️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Author&lt;/strong&gt;: infinition&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=&#34;https://github.com/infinition/Bjorn&#34;&gt;infinition/Bjorn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This document is subject to change as the project evolves. Please refer to the GitHub repository for the most recent updates.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>google-gemini/generative-ai-python</title>
    <updated>2024-11-10T01:36:47Z</updated>
    <id>tag:github.com,2024-11-10:/google-gemini/generative-ai-python</id>
    <link href="https://github.com/google-gemini/generative-ai-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Python library for the Google Gemini API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Google AI Python SDK for the Gemini API&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/google-generativeai&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/google-generativeai.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/google-generativeai&#34; alt=&#34;Python support&#34;&gt; &lt;img src=&#34;https://img.shields.io/pypi/dd/google-generativeai&#34; alt=&#34;PyPI - Downloads&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Google AI Python SDK is the easiest way for Python developers to build with the Gemini API. The Gemini API gives you access to Gemini &lt;a href=&#34;https://ai.google.dev/models/gemini&#34;&gt;models&lt;/a&gt; created by &lt;a href=&#34;https://deepmind.google/technologies/gemini/#introduction&#34;&gt;Google DeepMind&lt;/a&gt;. Gemini models are built from the ground up to be multimodal, so you can reason seamlessly across text, images, and code.&lt;/p&gt; &#xA;&lt;h2&gt;Get started with the Gemini API&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://aistudio.google.com/&#34;&gt;Google AI Studio&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Login with your Google account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aistudio.google.com/app/apikey&#34;&gt;Create&lt;/a&gt; an API key.&lt;/li&gt; &#xA; &lt;li&gt;Try a Python SDK &lt;a href=&#34;https://github.com/google-gemini/gemini-api-cookbook/raw/main/quickstarts/Prompting.ipynb&#34;&gt;quickstart&lt;/a&gt; in the &lt;a href=&#34;https://github.com/google-gemini/gemini-api-cookbook/&#34;&gt;Gemini API Cookbook&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For detailed instructions, try the &lt;a href=&#34;https://ai.google.dev/tutorials/python_quickstart&#34;&gt;Python SDK tutorial&lt;/a&gt; on &lt;a href=&#34;https://ai.google.dev&#34;&gt;ai.google.dev&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/google-gemini/gemini-api-cookbook/&#34;&gt;Gemini API Cookbook&lt;/a&gt; or &lt;a href=&#34;https://ai.google.dev&#34;&gt;ai.google.dev&lt;/a&gt; for complete code.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install from &lt;a href=&#34;https://pypi.org/project/google-generativeai&#34;&gt;PyPI&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install -U google-generativeai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Import the SDK and configure your API key.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import google.generativeai as genai&#xA;import os&#xA;&#xA;genai.configure(api_key=os.environ[&#34;GEMINI_API_KEY&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a model and run a prompt.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;model = genai.GenerativeModel(&#39;gemini-1.5-flash&#39;)&#xA;response = model.generate_content(&#34;The opposite of hot is&#34;)&#xA;print(response.text)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/google-gemini/gemini-api-cookbook/&#34;&gt;Gemini API Cookbook&lt;/a&gt; or &lt;a href=&#34;https://ai.google.dev&#34;&gt;ai.google.dev&lt;/a&gt; for complete documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/google/generative-ai-python/raw/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for more information on contributing to the Google AI Python SDK.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>