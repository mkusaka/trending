<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-18T01:36:33Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>django-cms/django-cms</title>
    <updated>2022-11-18T01:36:33Z</updated>
    <id>tag:github.com,2022-11-18:/django-cms/django-cms</id>
    <link href="https://github.com/django-cms/django-cms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The easy-to-use and developer-friendly enterprise CMS powered by Django&lt;/p&gt;&lt;hr&gt;&lt;p&gt;########## django CMS ########## .. image:: &lt;a href=&#34;https://travis-ci.org/django-cms/django-cms.svg?branch=develop&#34;&gt;https://travis-ci.org/django-cms/django-cms.svg?branch=develop&lt;/a&gt; :target: &lt;a href=&#34;https://travis-ci.org/django-cms/django-cms&#34;&gt;https://travis-ci.org/django-cms/django-cms&lt;/a&gt; .. image:: &lt;a href=&#34;https://img.shields.io/pypi/v/django-cms.svg&#34;&gt;https://img.shields.io/pypi/v/django-cms.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/django-cms/&#34;&gt;https://pypi.python.org/pypi/django-cms/&lt;/a&gt; .. image:: &lt;a href=&#34;https://img.shields.io/badge/wheel-yes-green.svg&#34;&gt;https://img.shields.io/badge/wheel-yes-green.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/django-cms/&#34;&gt;https://pypi.python.org/pypi/django-cms/&lt;/a&gt; .. image:: &lt;a href=&#34;https://img.shields.io/pypi/l/django-cms.svg&#34;&gt;https://img.shields.io/pypi/l/django-cms.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.python.org/pypi/django-cms/&#34;&gt;https://pypi.python.org/pypi/django-cms/&lt;/a&gt; .. image:: &lt;a href=&#34;https://codeclimate.com/github/divio/django-cms/badges/gpa.svg&#34;&gt;https://codeclimate.com/github/divio/django-cms/badges/gpa.svg&lt;/a&gt; :target: &lt;a href=&#34;https://codeclimate.com/github/divio/django-cms&#34;&gt;https://codeclimate.com/github/divio/django-cms&lt;/a&gt; :alt: Code Climate&lt;/p&gt; &#xA;&lt;p&gt;Open source enterprise content management system based on the Django framework and backed by the non-profit django CMS Association (&lt;code&gt;Sponsor us! &amp;lt;https://www.django-cms.org/en/memberships/&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Contribute to this project and win rewards&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Because django CMS is a community-driven project, we welcome everyone to &lt;code&gt;get involved in the project &amp;lt;https://www.django-cms.org/en/contribute/&amp;gt;&lt;/code&gt;_ and &lt;code&gt;receive a reward &amp;lt;https://www.django-cms.org/en/bounty-program/&amp;gt;&lt;/code&gt;_ for their contribution. Become part of a fantastic community and help us make django CMS the best open source CMS in the world.&lt;/p&gt; &#xA;&lt;p&gt;.. ATTENTION::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Please use the ``develop`` branch as the target for pull requests for on-going development.&#xA;&#xA;Security fixes will be backported to older branches by the core team as appropriate.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Features&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hierarchical pages&lt;/li&gt; &#xA; &lt;li&gt;extensive built-in support for multilingual websites&lt;/li&gt; &#xA; &lt;li&gt;multi-site support&lt;/li&gt; &#xA; &lt;li&gt;draft/publish workflows&lt;/li&gt; &#xA; &lt;li&gt;version control&lt;/li&gt; &#xA; &lt;li&gt;a sophisticated publishing architecture, that&#39;s also usable in your own applications&lt;/li&gt; &#xA; &lt;li&gt;frontend content editing&lt;/li&gt; &#xA; &lt;li&gt;a hierarchical content structure for nested plugins&lt;/li&gt; &#xA; &lt;li&gt;an extensible navigation system that your own applications can hook into&lt;/li&gt; &#xA; &lt;li&gt;SEO-friendly URLs&lt;/li&gt; &#xA; &lt;li&gt;designed to integrate thoroughly into other applications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Developing applications that integrate with and take advantage of django CMS features is easy and well-documented.&lt;/p&gt; &#xA;&lt;p&gt;More information on &lt;code&gt;our website &amp;lt;https://www.django-cms.org&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Python/Django requirements for the current release version &amp;lt;http://docs.django-cms.org/en/latest/#software-version-requirements-and-release-notes&amp;gt;&lt;/code&gt;_ in our documentation.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;installation how-to guide for an overview of some other requirements and dependencies of the current release &amp;lt;http://docs.django-cms.org/en/latest/how_to/install.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Getting started&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;These &lt;code&gt;tutorials &amp;lt;http://docs.django-cms.org/en/latest/introduction/index.html&amp;gt;&lt;/code&gt;_ take you step-by-step through some key aspects of django CMS.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Documentation&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Our documentation working group maintains documentation for several versions of the project. Key versions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stable &amp;lt;http://docs.django-cms.org&amp;gt;&lt;/code&gt;_ (default), for the &lt;strong&gt;current release&lt;/strong&gt; version&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;latest &amp;lt;http://docs.django-cms.org/en/latest/&amp;gt;&lt;/code&gt;_, representing the latest build of the &lt;strong&gt;release-3.4.x branch&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;develop &amp;lt;http://docs.django-cms.org/en/develop/&amp;gt;&lt;/code&gt;_, representing the latest build of the &lt;strong&gt;develop branch&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about our branch policy, see &lt;code&gt;Branches &amp;lt;http://docs.django-cms.org/en/latest/contributing/development-policies.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Our documentation is hosted courtesy of &lt;code&gt;Read the Docs &amp;lt;https://readthedocs.org&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The dependencies for the docs are compiled by &lt;code&gt;pip-tools &amp;lt;https://github.com/jazzband/pip-tools&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Test django CMS in our demo&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The demo platform is kindly provided by Divio, platinum member of the django CMS Association.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://raw.githubusercontent.com/django-cms/django-cms/develop/docs/images/try-with-divio.png&#34;&gt;https://raw.githubusercontent.com/django-cms/django-cms/develop/docs/images/try-with-divio.png&lt;/a&gt; :target: &lt;a href=&#34;https://www.django-cms.org/en/django-cms-demo/&#34;&gt;https://www.django-cms.org/en/django-cms-demo/&lt;/a&gt; :alt: Try demo with Divio Cloud&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Getting Help&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Please head over to our &lt;code&gt;Slack channel &amp;lt;https://www.django-cms.org/slack&amp;gt;&lt;/code&gt;_ or our &lt;code&gt;discourse forum &amp;lt;https://discourse.django-cms.org/&amp;gt;&lt;/code&gt;_ for support.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Professional support&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Choose from a list of &lt;code&gt;trusted tech partner &amp;lt;https://www.django-cms.org/en/tech-partners/&amp;gt;&lt;/code&gt;_ of the django CMS Association to get your website project delivered successfully.&lt;/p&gt; &#xA;&lt;p&gt;Choose a &lt;code&gt;trusted web host &amp;lt;https://www.django-cms.org/en/hosting-services/&amp;gt;&lt;/code&gt;_ for your django CMS project and get your website online today.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The django CMS Association&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The django CMS Association is a non-profit organization that was founded in 2020 with the goal to drive the success of django CMS, by increasing customer happiness, market share and open-source contributions. We provide infrastructure and guidance for the django CMS project.&lt;/p&gt; &#xA;&lt;p&gt;The non-profit django CMS Association is dependent on donations to fulfill its purpose. The best way to donate is to become a member of the association and pay membership fees. The funding will be funneled back into core development and community projects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Join the django CMS Association &amp;lt;https://www.django-cms.org/en/contribute/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Credits&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Includes icons from &lt;code&gt;FamFamFam &amp;lt;http://www.famfamfam.com&amp;gt;&lt;/code&gt;_.&lt;/li&gt; &#xA; &lt;li&gt;Python tree engine powered by &lt;code&gt;django-treebeard &amp;lt;https://tabo.pe/projects/django-treebeard/&amp;gt;&lt;/code&gt;_.&lt;/li&gt; &#xA; &lt;li&gt;JavaScript tree in admin uses &lt;code&gt;jsTree &amp;lt;https://www.jstree.com&amp;gt;&lt;/code&gt;_.&lt;/li&gt; &#xA; &lt;li&gt;Many thanks to &lt;code&gt;all the contributors &amp;lt;https://github.com/django-cms/django-cms/graphs/contributors&amp;gt;&lt;/code&gt;_ to django CMS!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>conan-io/conan</title>
    <updated>2022-11-18T01:36:33Z</updated>
    <id>tag:github.com,2022-11-18:/conan-io/conan</id>
    <link href="https://github.com/conan-io/conan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Conan - The open-source C/C++ package manager&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|Logo|&lt;/p&gt; &#xA;&lt;h1&gt;Conan&lt;/h1&gt; &#xA;&lt;p&gt;Decentralized, open-source (MIT), C/C++ package manager.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Homepage: &lt;a href=&#34;https://conan.io/&#34;&gt;https://conan.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github: &lt;a href=&#34;https://github.com/conan-io/conan&#34;&gt;https://github.com/conan-io/conan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docs: &lt;a href=&#34;https://docs.conan.io/en/latest/&#34;&gt;https://docs.conan.io/en/latest/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack: &lt;a href=&#34;https://cppalliance.org/slack/&#34;&gt;https://cppalliance.org/slack/&lt;/a&gt; (#conan channel)&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/conan_io&#34;&gt;https://twitter.com/conan_io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Conan is a package manager for C and C++ developers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is fully decentralized. Users can host their packages on their servers, privately. Integrates with Artifactory and Bintray.&lt;/li&gt; &#xA; &lt;li&gt;Portable. Works across all platforms, including Linux, OSX, Windows (with native and first-class support, WSL, MinGW), Solaris, FreeBSD, embedded and cross-compiling, docker, WSL&lt;/li&gt; &#xA; &lt;li&gt;Manage binaries. It can create, upload and download binaries for any configuration and platform, even cross-compiling, saving lots of time in development and continuous integration. The binary compatibility can be configured and customized. Manage all your artifacts in the same way on all platforms.&lt;/li&gt; &#xA; &lt;li&gt;Integrates with any build system, including any proprietary and custom one. Provides tested support for major build systems (CMake, MSBuild, Makefiles, Meson, etc).&lt;/li&gt; &#xA; &lt;li&gt;Extensible: Its python based recipes, together with extensions points allows for great power and flexibility.&lt;/li&gt; &#xA; &lt;li&gt;Large and active community, especially in Github (&lt;a href=&#34;https://github.com/conan-io/conan&#34;&gt;https://github.com/conan-io/conan&lt;/a&gt;) and Slack (&lt;a href=&#34;https://cpplang-inviter.cppalliance.org/&#34;&gt;https://cpplang-inviter.cppalliance.org/&lt;/a&gt; #conan channel). This community also creates and maintains packages in ConanCenter and Bincrafters repositories in Bintray.&lt;/li&gt; &#xA; &lt;li&gt;Stable. Used in production by many companies, since 1.0 there is a commitment not to break package recipes and documented behavior.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;+-------------------------+-------------------------+ | &lt;strong&gt;develop&lt;/strong&gt; | &lt;strong&gt;Code Climate&lt;/strong&gt; | +=========================+=========================+ | |Build Status Develop| | |Develop climate| | +-------------------------+-------------------------+&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://docs.conan.io/en/latest/installation.html&#34;&gt;https://docs.conan.io/en/latest/installation.html&lt;/a&gt; to know how to install and start using Conan. TL;DR:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block::&lt;/p&gt; &#xA;&lt;p&gt;$ pip install conan&lt;/p&gt; &#xA;&lt;h2&gt;Install a development version&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;strong&gt;Conan&lt;/strong&gt; client and server in Windows, MacOS, and Linux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install pip following&lt;/strong&gt; &lt;code&gt;pip docs&lt;/code&gt;_.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone Conan repository:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;.. code-block:: bash&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ git clone https://github.com/conan-io/conan.git conan-io&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: repository directory name matters, some directories are known to be problematic to run tests (e.g. &lt;code&gt;conan&lt;/code&gt;). &lt;code&gt;conan-io&lt;/code&gt; directory name was tested and guaranteed to be working.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install in editable mode&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;.. code-block:: bash&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ cd conan-io &amp;amp;&amp;amp; sudo pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are in Windows, using &lt;code&gt;sudo&lt;/code&gt; is not required.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;You are ready, try to run Conan:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;.. code-block::&lt;/p&gt; &lt;p&gt;$ conan --help&lt;/p&gt; &lt;p&gt;Consumer commands install Installs the requirements specified in a recipe (conanfile.py or conanfile.txt). config Manages Conan configuration. get Gets a file or list a directory of a given reference or package. info Gets information about the dependency graph of a recipe. search Searches package recipes and binaries in the local cache or a remote. Unless a remote is specified only the local cache is searched. Creator commands new Creates a new package recipe template with a &#39;conanfile.py&#39; and optionally, &#39;test_package&#39; testing files. create Builds a binary package for a recipe (conanfile.py). upload Uploads a recipe and binary packages to a remote. export Copies the recipe (conanfile.py &amp;amp; associated files) to your local cache. export-pkg Exports a recipe, then creates a package from local source and build folders. test Tests a package consuming it from a conanfile.py with a test() method. Package development commands source Calls your local conanfile.py &#39;source()&#39; method. build Calls your local conanfile.py &#39;build()&#39; method. package Calls your local conanfile.py &#39;package()&#39; method. editable Manages editable packages (packages that reside in the user workspace, but are consumed as if they were in the cache). workspace Manages a workspace (a set of packages consumed from the user workspace that belongs to the same project). Misc commands profile Lists profiles in the &#39;.conan/profiles&#39; folder, or shows profile details. remote Manages the remote list and the package recipes associated with a remote. user Authenticates against a remote with user/pass, caching the auth token. imports Calls your local conanfile.py or conanfile.txt &#39;imports&#39; method. copy Copies conan recipes and packages to another user/channel. remove Removes packages or binaries matching pattern from local cache or remote. alias Creates and exports an &#39;alias package recipe&#39;. download Downloads recipe and binaries to the local cache, without using settings. inspect Displays conanfile attributes, like name, version, and options. Works locally, in local cache and remote. help Shows help for a specific command. lock Generates and manipulates lock files. frogarian Conan The Frogarian&lt;/p&gt; &lt;p&gt;Conan commands. Type &#34;conan &lt;command&gt; -h&#34; for help&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing to the project&lt;/h1&gt; &#xA;&lt;p&gt;Feedback and contribution are always welcome in this project. Please read our &lt;code&gt;contributing guide &amp;lt;https://github.com/conan-io/conan/blob/develop/.github/CONTRIBUTING.md&amp;gt;&lt;/code&gt;&lt;em&gt;. Also, if you plan to contribute, please add some testing for your changes. You can read the &lt;code&gt;Conan tests guidelines section &amp;lt;https://github.com/conan-io/conan/blob/develop/conans/test/README.md&amp;gt;&lt;/code&gt;&lt;/em&gt; for some advise on how to write tests for Conan.&lt;/p&gt; &#xA;&lt;h1&gt;Running the tests&lt;/h1&gt; &#xA;&lt;h2&gt;Using tox&lt;/h2&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m tox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will install the needed requirements and launch &lt;code&gt;pytest&lt;/code&gt; skipping some heavy and slow tests. If you want to run the full test suite:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m tox -e full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Without tox&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install python requirements&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m pip install -r conans/requirements.txt&#xA;$ python -m pip install -r conans/requirements_server.txt&#xA;$ python -m pip install -r conans/requirements_dev.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are not Windows and you are not using a python virtual environment, you will need to run these commands using &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before you can run the tests, you need to set a few environment variables first.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export PYTHONPATH=$PYTHONPATH:$(pwd)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows it would be (while being in the Conan root directory):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ set PYTHONPATH=.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure that your &lt;code&gt;cmake&lt;/code&gt; has version 2.8 or later. You can see the version with the following command:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cmake --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The appropriate values of &lt;code&gt;CONAN_COMPILER&lt;/code&gt; and &lt;code&gt;CONAN_COMPILER_VERSION&lt;/code&gt; depend on your operating system and your requirements.&lt;/p&gt; &#xA;&lt;p&gt;These should work for the GCC from &lt;code&gt;build-essential&lt;/code&gt; on Ubuntu 14.04:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export CONAN_COMPILER=gcc&#xA;$ export CONAN_COMPILER_VERSION=4.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These should work for OS X:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export CONAN_COMPILER=clang&#xA;$ export CONAN_COMPILER_VERSION=3.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the actual tests like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m pytest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a couple of test attributes defined, as &lt;code&gt;slow&lt;/code&gt; that you can use to filter the tests, and do not execute them:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m pytest . -m &#34;not slow&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A few minutes later it should print &lt;code&gt;OK&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;............................................................................................&#xA;----------------------------------------------------------------------&#xA;Ran 146 tests in 50.993s&#xA;&#xA;OK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run specific tests, you can specify the test name too, something like:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m pytest conans/test/unittests/client/cmd/export_test.py::ExportTest::test_export_warning -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-s&lt;/code&gt; argument can be useful to see some output that otherwise is captured by pytest.&lt;/p&gt; &#xA;&lt;p&gt;Also, you can run tests against an instance of Artifactory. Those tests should add the attribute &lt;code&gt;artifactory_ready&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ python -m pytest . -m artifactory_ready&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some environment variables have to be defined to run them. For example, for an Artifactory instance that is running on the localhost with default user and password configured, the variables could take the values:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export CONAN_TEST_WITH_ARTIFACTORY=1&#xA;$ export ARTIFACTORY_DEFAULT_URL=http://localhost:8081/artifactory&#xA;$ export ARTIFACTORY_DEFAULT_USER=admin&#xA;$ export ARTIFACTORY_DEFAULT_PASSWORD=password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ARTIFACTORY_DEFAULT_URL&lt;/code&gt; is the base url for the Artifactory repo, not one for a specific repository. Running the tests with a real Artifactory instance will create repos on the fly so please use a separate server for testing purposes.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;MIT LICENSE &amp;lt;./LICENSE.md&amp;gt;&lt;/code&gt;__&lt;/p&gt; &#xA;&lt;p&gt;.. |Build Status Develop| image:: &lt;a href=&#34;https://ci.conan.io/buildStatus/icon?job=ConanTestSuite/develop&#34;&gt;https://ci.conan.io/buildStatus/icon?job=ConanTestSuite/develop&lt;/a&gt; :target: &lt;a href=&#34;https://ci.conan.io/job/ConanTestSuite/job/develop/&#34;&gt;https://ci.conan.io/job/ConanTestSuite/job/develop/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |Develop climate| image:: &lt;a href=&#34;https://api.codeclimate.com/v1/badges/081b53e570d5220b34e4/maintainability.svg&#34;&gt;https://api.codeclimate.com/v1/badges/081b53e570d5220b34e4/maintainability.svg&lt;/a&gt; :target: &lt;a href=&#34;https://codeclimate.com/github/conan-io/conan/maintainability&#34;&gt;https://codeclimate.com/github/conan-io/conan/maintainability&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |Logo| image:: &lt;a href=&#34;https://conan.io/img/jfrog_conan_logo.png&#34;&gt;https://conan.io/img/jfrog_conan_logo.png&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;pip docs&lt;/code&gt;: &lt;a href=&#34;https://pip.pypa.io/en/stable/installation/&#34;&gt;https://pip.pypa.io/en/stable/installation/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>onnx/onnx</title>
    <updated>2022-11-18T01:36:33Z</updated>
    <id>tag:github.com,2022-11-18:/onnx/onnx</id>
    <link href="https://github.com/onnx/onnx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open standard for machine learning interoperability&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;40%&#34; src=&#34;https://github.com/onnx/onnx/raw/main/docs/onnx-horizontal-color.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/onnx-pipelines/onnx/_build/latest?definitionId=5&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnx-pipelines/onnx/_apis/build/status/Windows-CI?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/onnx-pipelines/onnx/_build/latest?definitionId=7&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnx-pipelines/onnx/_apis/build/status/Linux-CI?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/onnx-pipelines/onnx/_build/latest?definitionId=6&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/onnx-pipelines/onnx/_apis/build/status/MacOS-CI?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3313&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3313/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://onnx.ai&#34;&gt;Open Neural Network Exchange (ONNX)&lt;/a&gt; is an open ecosystem that empowers AI developers to choose the right tools as their project evolves. ONNX provides an open source format for AI models, both deep learning and traditional ML. It defines an extensible computation graph model, as well as definitions of built-in operators and standard data types. Currently we focus on the capabilities needed for inferencing (scoring).&lt;/p&gt; &#xA;&lt;p&gt;ONNX is &lt;a href=&#34;http://onnx.ai/supported-tools&#34;&gt;widely supported&lt;/a&gt; and can be found in many frameworks, tools, and hardware. Enabling interoperability between different frameworks and streamlining the path from research to production helps increase the speed of innovation in the AI community. We invite the community to join us and further evolve ONNX.&lt;/p&gt; &#xA;&lt;h1&gt;Use ONNX&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://onnx.ai/onnx/&#34;&gt;Documentation of ONNX Python Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onnx/tutorials&#34;&gt;Tutorials for creating ONNX models&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onnx/models&#34;&gt;Pre-trained ONNX models&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Learn about the ONNX spec&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/Overview.md&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/IR.md&#34;&gt;ONNX intermediate representation spec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/Versioning.md&#34;&gt;Versioning principles of the spec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/Operators.md&#34;&gt;Operators documentation&lt;/a&gt; (development version)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://onnx.ai/onnx/operators/index.html&#34;&gt;Operators documentation&lt;/a&gt; (latest release)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/PythonAPIOverview.md&#34;&gt;Python API Overview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Programming utilities for working with ONNX Graphs&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/ShapeInference.md&#34;&gt;Shape and Type Inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onnx/optimizer&#34;&gt;Graph Optimization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/VersionConverter.md&#34;&gt;Opset Version Conversion&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribute&lt;/h1&gt; &#xA;&lt;p&gt;ONNX is a &lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/community/readme.md&#34;&gt;community project&lt;/a&gt;. We encourage you to join the effort and contribute feedback, ideas, and code. You can participate in the &lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/community/sigs.md&#34;&gt;Special Interest Groups&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/community/working-groups.md&#34;&gt;Working Groups&lt;/a&gt; to shape the future of ONNX.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;If you think some operator should be added to ONNX specification, please read &lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/AddNewOp.md&#34;&gt;this document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Discuss&lt;/h1&gt; &#xA;&lt;p&gt;We encourage you to open &lt;a href=&#34;https://github.com/onnx/onnx/issues&#34;&gt;Issues&lt;/a&gt;, or use &lt;a href=&#34;https://lfaifoundation.slack.com/&#34;&gt;Slack&lt;/a&gt; (If you have not joined yet, please use this &lt;a href=&#34;https://join.slack.com/t/lfaifoundation/shared_invite/zt-o65errpw-gMTbwNr7FnNbVXNVFkmyNA&#34;&gt;link&lt;/a&gt; to join the group) for more real-time discussion.&lt;/p&gt; &#xA;&lt;h1&gt;Follow Us&lt;/h1&gt; &#xA;&lt;p&gt;Stay up to date with the latest ONNX news. [&lt;a href=&#34;https://www.facebook.com/onnxai/&#34;&gt;Facebook&lt;/a&gt;] [&lt;a href=&#34;https://twitter.com/onnxai&#34;&gt;Twitter&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Official Python packages&lt;/h2&gt; &#xA;&lt;p&gt;ONNX released packages are published in PyPi.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install onnx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://test.pypi.org/project/onnx-weekly/&#34;&gt;Weekly packages&lt;/a&gt; are published in test pypi to enable experimentation and early testing.&lt;/p&gt; &#xA;&lt;h2&gt;vcpkg packages&lt;/h2&gt; &#xA;&lt;p&gt;onnx is in the maintenance list of &lt;a href=&#34;https://github.com/microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt;, you can easily use vcpkg to build and install it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/microsoft/vcpkg.git&#xA;cd vcpkg&#xA;./bootstrap-vcpkg.bat # For powershell&#xA;./bootstrap-vcpkg.sh # For bash&#xA;./vcpkg install onnx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Conda packages&lt;/h2&gt; &#xA;&lt;p&gt;A binary build of ONNX is available from &lt;a href=&#34;https://conda.io&#34;&gt;Conda&lt;/a&gt;, in &lt;a href=&#34;https://conda-forge.org/&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge onnx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build ONNX from Source&lt;/h2&gt; &#xA;&lt;p&gt;Before building from source uninstall any existing versions of onnx &lt;code&gt;pip uninstall onnx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;c++17 or higher C++ compiler version is required to build ONNX from source on Windows. For other platforms, please use C++11 or higher versions.&lt;/p&gt; &#xA;&lt;p&gt;Generally speaking, you need to install &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;protobuf C/C++ libraries and tools&lt;/a&gt; before proceeding forward. Then depending on how you installed protobuf, you need to set environment variable CMAKE_ARGS to &#34;-DONNX_USE_PROTOBUF_SHARED_LIBS=ON&#34; or &#34;-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF&#34;. For example, you may need to run the following command:&lt;/p&gt; &#xA;&lt;p&gt;Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CMAKE_ARGS=&#34;-DONNX_USE_PROTOBUF_SHARED_LIBS=ON&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;set CMAKE_ARGS=&#34;-DONNX_USE_PROTOBUF_SHARED_LIBS=ON&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ON/OFF depends on what kind of protobuf library you have. Shared libraries are files ending with *.dll/*.so/*.dylib. Static libraries are files ending with *.a/*.lib. This option depends on how you get your protobuf library and how it was built. And it is default OFF. You don&#39;t need to run the commands above if you&#39;d prefer to use a static protobuf library.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you are building ONNX from source, it is recommended that you also build Protobuf locally as a static library. The version distributed with conda-forge is a DLL, but ONNX expects it to be a static library. Building protobuf locally also lets you control the version of protobuf. The tested and recommended version is 3.20.2.&lt;/p&gt; &#xA;&lt;p&gt;The instructions in this README assume you are using Visual Studio. It is recommended that you run all the commands from a shell started from &#34;x64 Native Tools Command Prompt for VS 2019&#34; and keep the build system generator for cmake (e.g., cmake -G &#34;Visual Studio 16 2019&#34;) consistent while building protobuf as well as ONNX.&lt;/p&gt; &#xA;&lt;p&gt;You can get protobuf by running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;git clone https://github.com/protocolbuffers/protobuf.git&#xA;cd protobuf&#xA;git checkout v3.20.2&#xA;cd cmake&#xA;cmake -G &#34;Visual Studio 16 2019&#34; -A x64 -DCMAKE_INSTALL_PREFIX=&amp;lt;protobuf_install_dir&amp;gt; -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -Dprotobuf_BUILD_SHARED_LIBS=OFF -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_EXAMPLES=OFF .&#xA;msbuild protobuf.sln /m /p:Configuration=Release&#xA;msbuild INSTALL.vcxproj /p:Configuration=Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then it will be built as a static library and installed to &amp;lt;protobuf_install_dir&amp;gt;. Please add the bin directory(which contains protoc.exe) to your PATH.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;set PATH=&amp;lt;protobuf_install_dir&amp;gt;/bin;%PATH%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note: if your protobuf_install_dir contains spaces, &lt;strong&gt;do not&lt;/strong&gt; add quotation marks around it.&lt;/p&gt; &#xA;&lt;p&gt;Alternative: if you don&#39;t want to change your PATH, you can set ONNX_PROTOC_EXECUTABLE instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bat&#34;&gt;set CMAKE_ARGS=-DONNX_PROTOC_EXECUTABLE=&amp;lt;full_path_to_protoc.exe&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can build ONNX as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/onnx/onnx.git&#xA;cd onnx&#xA;git submodule update --init --recursive&#xA;# prefer lite proto&#xA;set CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;First, you need to install protobuf. The minimum Protobuf compiler (protoc) version required by ONNX is 3.0.0. Please note that old protoc versions might not work with &lt;code&gt;CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Ubuntu 18.04 (and newer) users may choose to install protobuf via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install python3-pip python3-dev libprotobuf-dev protobuf-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, it is required to add &lt;code&gt;-DONNX_USE_PROTOBUF_SHARED_LIBS=ON&lt;/code&gt; to CMAKE_ARGS in the ONNX build step.&lt;/p&gt; &#xA;&lt;p&gt;A more general way is to build and install it from source. See the instructions below for more details.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Installing Protobuf from source &lt;/summary&gt; &#xA; &lt;p&gt;Debian/Ubuntu:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/protocolbuffers/protobuf.git&#xA;  cd protobuf&#xA;  git checkout v3.20.2&#xA;  git submodule update --init --recursive&#xA;  mkdir build_source &amp;amp;&amp;amp; cd build_source&#xA;  cmake ../cmake -Dprotobuf_BUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release&#xA;  make -j$(nproc)&#xA;  make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;CentOS/RHEL/Fedora:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/protocolbuffers/protobuf.git&#xA;  cd protobuf&#xA;  git checkout v3.20.2&#xA;  git submodule update --init --recursive&#xA;  mkdir build_source &amp;amp;&amp;amp; cd build_source&#xA;  cmake ../cmake  -DCMAKE_INSTALL_LIBDIR=lib64 -Dprotobuf_BUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_SYSCONFDIR=/etc -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release&#xA;  make -j$(nproc)&#xA;  make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Here &#34;-DCMAKE_POSITION_INDEPENDENT_CODE=ON&#34; is crucial. By default static libraries are built without &#34;-fPIC&#34; flag, they are not position independent code. But shared libraries must be position independent code. Python C/C++ extensions(like ONNX) are shared libraries. So if a static library was not built with &#34;-fPIC&#34;, it can&#39;t be linked to such a shared library.&lt;/p&gt; &#xA; &lt;p&gt;Once build is successful, update PATH to include protobuf paths.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Then you can build ONNX as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/onnx/onnx.git&#xA;cd onnx&#xA;git submodule update --init --recursive&#xA;# Optional: prefer lite proto&#xA;export CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;export NUM_CORES=`sysctl -n hw.ncpu`&#xA;brew update&#xA;brew install autoconf &amp;amp;&amp;amp; brew install automake&#xA;wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.2/protobuf-cpp-3.20.2.tar.gz&#xA;tar -xvf protobuf-cpp-3.20.2.tar.gz&#xA;cd protobuf-3.20.2&#xA;mkdir build_source &amp;amp;&amp;amp; cd build_source&#xA;cmake ../cmake -Dprotobuf_BUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -Dprotobuf_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=Release&#xA;make -j${NUM_CORES}&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once build is successful, update PATH to include protobuf paths.&lt;/p&gt; &#xA;&lt;p&gt;Then you can build ONNX as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recursive https://github.com/onnx/onnx.git&#xA;cd onnx&#xA;# Optional: prefer lite proto&#xA;set CMAKE_ARGS=-DONNX_USE_LITE_PROTO=ON&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Verify Installation&lt;/h2&gt; &#xA;&lt;p&gt;After installation, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -c &#34;import onnx&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to verify it works.&lt;/p&gt; &#xA;&lt;h2&gt;Common Build Options&lt;/h2&gt; &#xA;&lt;p&gt;For full list refer to CMakeLists.txt &lt;strong&gt;Environment variables&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;USE_MSVC_STATIC_RUNTIME&lt;/code&gt; should be 1 or 0, not ON or OFF. When set to 1 onnx links statically to runtime library. &lt;strong&gt;Default&lt;/strong&gt;: USE_MSVC_STATIC_RUNTIME=0&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DEBUG&lt;/code&gt; should be 0 or 1. When set to 1 onnx is built in debug mode. or debug versions of the dependencies, you need to open the &lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/CMakeLists.txt&#34;&gt;CMakeLists file&lt;/a&gt; and append a letter &lt;code&gt;d&lt;/code&gt; at the end of the package name lines. For example, &lt;code&gt;NAMES protobuf-lite&lt;/code&gt; would become &lt;code&gt;NAMES protobuf-lited&lt;/code&gt;. &lt;strong&gt;Default&lt;/strong&gt;: Debug=0&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;CMake variables&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ONNX_USE_PROTOBUF_SHARED_LIBS&lt;/code&gt; should be ON or OFF. &lt;strong&gt;Default&lt;/strong&gt;: ONNX_USE_PROTOBUF_SHARED_LIBS=OFF USE_MSVC_STATIC_RUNTIME=0 &lt;code&gt;ONNX_USE_PROTOBUF_SHARED_LIBS&lt;/code&gt; determines how onnx links to protobuf libraries.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When set to ON - onnx will dynamically link to protobuf shared libs, PROTOBUF_USE_DLLS will be defined as described &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/raw/master/cmake/README.md#dlls-vs-static-linking&#34;&gt;here&lt;/a&gt;, Protobuf_USE_STATIC_LIBS will be set to OFF and &lt;code&gt;USE_MSVC_STATIC_RUNTIME&lt;/code&gt; must be 0.&lt;/li&gt; &#xA;   &lt;li&gt;When set to OFF - onnx will link statically to protobuf, and Protobuf_USE_STATIC_LIBS will be set to ON (to force the use of the static libraries) and &lt;code&gt;USE_MSVC_STATIC_RUNTIME&lt;/code&gt; can be 0 or 1.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ONNX_USE_LITE_PROTO&lt;/code&gt; should be ON or OFF. When set to ON onnx uses lite protobuf instead of full protobuf. &lt;strong&gt;Default&lt;/strong&gt;: ONNX_USE_LITE_PROTO=OFF&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ONNX_WERROR&lt;/code&gt; should be ON or OFF. When set to ON warnings are treated as errors. &lt;strong&gt;Default&lt;/strong&gt;: ONNX_WERROR=OFF in local builds, ON in CI and release pipelines.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common Errors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Note: the &lt;code&gt;import onnx&lt;/code&gt; command does not work from the source checkout directory; in this case you&#39;ll see &lt;code&gt;ModuleNotFoundError: No module named &#39;onnx.onnx_cpp2py_export&#39;&lt;/code&gt;. Change into another directory to fix this error.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you run into any issues while building Protobuf as a static library, please ensure that shared Protobuf libraries, like libprotobuf, are not installed on your device or in the conda environment. If these shared libraries exist, either remove them to build Protobuf from source as a static library, or skip the Protobuf build from source to use the shared version directly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you run into any issues while building ONNX from source, and your error message reads, &#34;Could not find pythonXX.lib&#34;, ensure that you have consistent Python versions for common commands, such as &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt;. Clean all existing build files and rebuild ONNX again.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;ONNX uses &lt;a href=&#34;https://docs.pytest.org&#34;&gt;pytest&lt;/a&gt; as test driver. In order to run tests, you will first need to install pytest:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install pytest nbval&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing pytest, use the following command to run tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/docs/CONTRIBUTING.md&#34;&gt;contributor guide&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/onnx/onnx/main/LICENSE&#34;&gt;Apache License v2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Code of Conduct&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://onnx.ai/codeofconduct.html&#34;&gt;ONNX Open Source Code of Conduct&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>