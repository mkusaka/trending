<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-01T01:41:41Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dosisod/refurb</title>
    <updated>2022-10-01T01:41:41Z</updated>
    <id>tag:github.com,2022-10-01:/dosisod/refurb</id>
    <link href="https://github.com/dosisod/refurb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for refurbishing and modernizing Python codebases&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Refurb&lt;/h1&gt; &#xA;&lt;p&gt;A tool for refurbishing and modernizing Python codebases.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# main.py&#xA;&#xA;for filename in [&#34;file1.txt&#34;, &#34;file2.txt&#34;]:&#xA;    with open(filename) as f:&#xA;        contents = f.read()&#xA;&#xA;    lines = contents.splitlines()&#xA;&#xA;    for line in lines:&#xA;        if not line or line.startswith(&#34;# &#34;) or line.startswith(&#34;// &#34;):&#xA;            continue&#xA;&#xA;        for word in line.split():&#xA;            print(f&#34;[{word}]&#34;, end=&#34;&#34;)&#xA;&#xA;        print(&#34;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ refurb main.py&#xA;main.py:3:17 [FURB109]: Use `in (x, y, z)` instead of `in [x, y, z]`&#xA;main.py:4:5 [FURB101]: Use `y = Path(x).read_text()` instead of `with open(x, ...) as f: y = f.read()`&#xA;main.py:10:40 [FURB102]: Replace `x.startswith(y) or x.startswith(z)` with `x.startswith((y, z))`&#xA;main.py:16:9 [FURB105]: Use `print() instead of `print(&#34;&#34;)`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Before installing, it is recommended that you setup a &lt;a href=&#34;https://docs.python.org/3/tutorial/venv.html&#34;&gt;virtual environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip3 install refurb&#xA;$ refurb file.py folder/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Refurb only supports Python 3.10. It can check Python 3.6 code and up, but Refurb itself must be ran through Python 3.10.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Explanations For Checks&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;refurb --explain FURB123&lt;/code&gt;, where &lt;code&gt;FURB123&lt;/code&gt; is the error code you are trying to look up. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ refurb --explain FURB123&#xA;Don&#39;t cast a variable or literal if it is already of that type. For&#xA;example:&#xA;&#xA;Bad:&#xA;&#xA;```&#xA;name = str(&#34;bob&#34;)&#xA;num = int(123)&#xA;```&#xA;&#xA;Good:&#xA;&#xA;```&#xA;name = &#34;bob&#34;&#xA;num = 123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignoring Errors&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--ignore 123&lt;/code&gt; to ignore error 123. The error code can be in the form &lt;code&gt;FURB123&lt;/code&gt; or &lt;code&gt;123&lt;/code&gt;. This flag can be repeated.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;FURB&lt;/code&gt; prefix indicates that this is a built-in error. The &lt;code&gt;FURB&lt;/code&gt; prefix is optional, but for all other errors (ie, &lt;code&gt;ABC123&lt;/code&gt;), the prefix is required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also use inline comments to disable errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;x = int(0)  # noqa: FURB123&#xA;y = list()  # noqa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;noqa: FURB123&lt;/code&gt; specifically ignores the FURB123 error for that line, and &lt;code&gt;noqa&lt;/code&gt; ignores all errors on that line.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring Refurb&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the command line arguments, you can also add your settings in the &lt;code&gt;pyproject.toml&lt;/code&gt; file. For example, the following command line arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;refurb file.py --ignore 100 --load some_module --quiet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Corresponds to the following in your &lt;code&gt;pyproject.toml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tool.refurb]&#xA;ignore = [100]&#xA;load = [&#34;some_module&#34;]&#xA;quiet = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now all you need to type is &lt;code&gt;refurb file.py&lt;/code&gt;! Supplying command line arguments will override any existing settings in the config file.&lt;/p&gt; &#xA;&lt;h2&gt;Using Refurb With &lt;code&gt;pre-commit&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can use Refurb with &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; by adding the following to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  - repo: https://github.com/dosisod/refurb&#xA;    rev: REVISION&#xA;    hooks:&#xA;      - id: refurb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replacing &lt;code&gt;REVISION&lt;/code&gt; with a version or SHA of your choosing (or leave it blank to let &lt;code&gt;pre-commit&lt;/code&gt; find the most recent one for you).&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Installing plugins for Refurb is very easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip3 install refurb-plugin-example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;refurb-plugin-example&lt;/code&gt; is the name of the plugin. Refurb will automatically load any installed plugins.&lt;/p&gt; &#xA;&lt;p&gt;To make your own Refurb plugin, see the &lt;a href=&#34;https://github.com/dosisod/refurb-plugin-example&#34;&gt;&lt;code&gt;refurb-plugin-example&lt;/code&gt; repository&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Writing Your Own Check&lt;/h2&gt; &#xA;&lt;p&gt;If you want to extend Refurb but don&#39;t want to make a full-fledged plugin, you can easily create a one-off check file with the &lt;code&gt;refurb gen&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that this command uses the &lt;code&gt;fzf&lt;/code&gt; fuzzy-finder for getting user input, so you will need to &lt;a href=&#34;https://github.com/junegunn/fzf#installation&#34;&gt;install fzf&lt;/a&gt; before continuing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here is the basic overview for creating a new check using the &lt;code&gt;refurb gen&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;First select the node type you want to accept&lt;/li&gt; &#xA; &lt;li&gt;Then type in where you want to save the auto generated file&lt;/li&gt; &#xA; &lt;li&gt;Add your code to the new file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To get an idea of what you need to add to your check, use the &lt;code&gt;--debug&lt;/code&gt; flag to see the AST representation for a given file (ie, &lt;code&gt;refurb --debug file.py&lt;/code&gt;). Take a look at the files in the &lt;code&gt;refurb/checks/&lt;/code&gt; folder for some examples.&lt;/p&gt; &#xA;&lt;p&gt;Then, to load your new check, use &lt;code&gt;refurb file.py --load your.path.here&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that when using &lt;code&gt;--load&lt;/code&gt;, you need to use dots in your argument, just like importing a normal python module.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;To setup locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/dosisod/refurb&#xA;$ cd refurb&#xA;$ make install&#xA;$ make install-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tests can be ran all at once using &lt;code&gt;make&lt;/code&gt;, or you can run each tool on its own using &lt;code&gt;make black&lt;/code&gt;, &lt;code&gt;make flake8&lt;/code&gt;, and so on.&lt;/p&gt; &#xA;&lt;p&gt;Unit tests can be ran with &lt;code&gt;pytest&lt;/code&gt; or &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Since the end-to-end (e2e) tests are slow, they are not ran when running &lt;code&gt;make&lt;/code&gt;. You will need to run &lt;code&gt;make test-e2e&lt;/code&gt; to run them.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Why Does This Exist?&lt;/h2&gt; &#xA;&lt;p&gt;I love doing code reviews: I like taking something and making it better, faster, more elegant, and so on. Lots of static analysis tools already exist, but none of them seem to be focused on making code more elegant, more readable, or more modern. That is where Refurb comes in.&lt;/p&gt; &#xA;&lt;p&gt;Refurb is heavily inspired by &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html&#34;&gt;clippy&lt;/a&gt;, the built-in linter for Rust.&lt;/p&gt; &#xA;&lt;h2&gt;What Refurb Is Not&lt;/h2&gt; &#xA;&lt;p&gt;Refurb is not a style/type checker. It is not meant as a first-line of defense for linting and finding bugs, it is meant for making good code even better.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stark0de/nginxpwner</title>
    <updated>2022-10-01T01:41:41Z</updated>
    <id>tag:github.com,2022-10-01:/stark0de/nginxpwner</id>
    <link href="https://github.com/stark0de/nginxpwner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Nginxpwner is a simple tool to look for common Nginx misconfigurations and vulnerabilities.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nginxpwner&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/vm3LWFj4/nginxpwner.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nginxpwner is a simple tool to look for common Nginx misconfigurations and vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd /opt&#xA;git clone https://github.com/stark0de/nginxpwner&#xA;cd nginxpwner&#xA;chmod +x install.sh&#xA;./install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install using Docker&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/stark0de/nginxpwner&#xA;cd nginxpwner&#xA;sudo docker build -t nginxpwner:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker run -it nginxpwner:latest /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Target tab in Burp, select host, right click, copy all URLs in this host, copy to a file&#xA;&#xA;cat urllist | unfurl paths | cut -d&#34;/&#34; -f2-3 | sort -u &amp;gt; /tmp/pathlist &#xA;&#xA;Or get the list of paths you already discovered in the application in some other way. Note: the paths should not start with /&#xA;&#xA;Finally:&#xA;&#xA;python3 nginxpwner.py https://example.com /tmp/pathlist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes:&lt;/h2&gt; &#xA;&lt;p&gt;It actually checks for:&lt;/p&gt; &#xA;&lt;p&gt;-Gets Ngnix version and gets its possible exploits using searchsploit and tells if it is outdated&lt;/p&gt; &#xA;&lt;p&gt;-Throws a wordlist specific to Nginx via gobuster&lt;/p&gt; &#xA;&lt;p&gt;-Checks if it is vulnerable to CRLF via a common misconfiguration of using $uri in redirects&lt;/p&gt; &#xA;&lt;p&gt;-Checks for CRLF in all of the paths provided&lt;/p&gt; &#xA;&lt;p&gt;-Checks if the PURGE HTTP method is available from the outside&lt;/p&gt; &#xA;&lt;p&gt;-Checks for variable leakage misconfiguration&lt;/p&gt; &#xA;&lt;p&gt;-Checks for path traversal vulnerabilities via merge_slashes set to off&lt;/p&gt; &#xA;&lt;p&gt;-Tests for differences in the length of responses when using hop-by-hop headers (ex: X-Forwarded-Host)&lt;/p&gt; &#xA;&lt;p&gt;-Uses Kyubi to test for path traversal vulnerabilities via misconfigured alias&lt;/p&gt; &#xA;&lt;p&gt;-Tests for 401/403 bypass using X-Accel-Redirect&lt;/p&gt; &#xA;&lt;p&gt;-Shows the payload to check for Raw backend reading response misconfiguration&lt;/p&gt; &#xA;&lt;p&gt;-Checks if the site uses PHP and suggests some nginx-specific tests for PHP sites&lt;/p&gt; &#xA;&lt;p&gt;-Tests for the common integer overflow vulnerability in Nginx&#39;s range filter module (CVE-2017-7529)&lt;/p&gt; &#xA;&lt;p&gt;The tool uses the Server header in the response to do some of the tests. There are other CMS and so which are built on Nginx like Centminmod, OpenResty, Pantheon or Tengine for example which don&#39;t return that header. In that case please use nginx-pwner-no-server-header.py with the same parameters than the other script&lt;/p&gt; &#xA;&lt;p&gt;Also, for the exploit search to run correctly you should do: searchsploit -u in Kali from time to time&lt;/p&gt; &#xA;&lt;p&gt;The tool does not check for web cache poisoning/deception vulnerabilities nor request smuggling, you should test that with specific tools for those vulnerabilities. NginxPwner is mainly focused in misconfigurations developers may have introduced in the nginx.conf without being aware of them.&lt;/p&gt; &#xA;&lt;p&gt;Credit to shibli2700 for his awesome tool Kyubi &lt;a href=&#34;https://github.com/shibli2700/Kyubi&#34;&gt;https://github.com/shibli2700/Kyubi&lt;/a&gt; and to all the contributors of gobuster. Credits also to Detectify (which actually discovered many of this misconfigurations in NGINX)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/latexify_py</title>
    <updated>2022-10-01T01:41:41Z</updated>
    <id>tag:github.com,2022-10-01:/google/latexify_py</id>
    <link href="https://github.com/google/latexify_py" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generates LaTeX math description from Python functions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;latexify_py&lt;/h1&gt; &#xA;&lt;p&gt;A Python package that generates LaTeX math description from Python 🐍 functions.&lt;/p&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Which Python version? ... Using 3.6 AST.&lt;/li&gt; &#xA; &lt;li&gt;GPT-3? ... No, rule-based.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;shell pip install latexify-py &lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Follow provided example on &lt;a href=&#34;https://colab.research.google.com/drive/1MuiawKpVIZ12MWwyYuzZHmbKThdM5wNJ?usp=sharing&#34;&gt;Google Colaboratory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;To contribute to this Project refer &lt;a href=&#34;https://github.com/google/latexify_py/raw/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Current Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://contributors-img.web.app/image?repo=google/latexify_py&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Refer Contributors list &lt;a href=&#34;https://github.com/google/latexify_py/graphs/contributors&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This is not an officially supported Google product.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This Repository follows &lt;a href=&#34;https://github.com/google/latexify_py/raw/develop/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>