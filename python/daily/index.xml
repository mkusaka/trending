<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-17T01:34:23Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fixie-ai/ultravox</title>
    <updated>2024-11-17T01:34:23Z</updated>
    <id>tag:github.com,2024-11-17:/fixie-ai/ultravox</id>
    <link href="https://github.com/fixie-ai/ultravox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast multimodal LLM for real-time voice&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;img alt=&#34;Ultravox&#34; src=&#34;https://zfmrfvimiaqahezndsse.supabase.co/storage/v1/object/public/images/custom/Introducing%20Ultravox%20Wide.jpg&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; A fast multimodal LLM for real-time voice &lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Latest News&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2024/08 — &lt;a href=&#34;https://github.com/fixie-ai/ultravox/releases/tag/v0.4&#34;&gt;Ultravox 0.4&lt;/a&gt; available&lt;/li&gt; &#xA; &lt;li&gt;2024/08 — &lt;a href=&#34;https://github.com/fixie-ai/ultravox/releases/tag/v0.3&#34;&gt;Ultravox 0.3&lt;/a&gt; available&lt;/li&gt; &#xA; &lt;li&gt;2024/08 — Preview of Ultravox APIs available, more information &lt;a href=&#34;https://fixie-ai.github.io/ultradox/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;About&lt;/h1&gt; &#xA;&lt;p&gt;Ultravox is a new kind of multimodal LLM that can understand text as well as human speech, without the need for a separate Audio Speech Recognition (ASR) stage. Building on research like &lt;a href=&#34;https://arxiv.org/abs/2209.03143&#34;&gt;AudioLM&lt;/a&gt;, &lt;a href=&#34;https://ai.meta.com/blog/seamless-m4t/&#34;&gt;SeamlessM4T&lt;/a&gt;, &lt;a href=&#34;https://tincans.ai/slm&#34;&gt;Gazelle&lt;/a&gt;, &lt;a href=&#34;https://github.com/0nutation/SpeechGPT/tree/main/speechgpt&#34;&gt;SpeechGPT&lt;/a&gt;, and others, Ultravox is able to extend any open-weight LLM with a multimodal projector that converts audio directly into the high-dimensional space used by LLM. We&#39;ve trained versions on Llama 3, Mistral, and Gemma. This direct coupling allows Ultravox to respond much more quickly than systems that combine separate ASR and LLM components. In the future this will also allow Ultravox to natively understand the paralinguistic cues of timing and emotion that are omnipresent in human speech.&lt;/p&gt; &#xA;&lt;p&gt;The current version of Ultravox (v0.4), when invoked with audio content, has a time-to-first-token (TTFT) of approximately 150ms, and a tokens-per-second rate of ~60 using a Llama 3.1 8B backbone. While quite fast, we believe there is considerable room for improvement in these numbers.&lt;/p&gt; &#xA;&lt;p&gt;Ultravox currently takes in audio and emits streaming text. As we evolve the model, we&#39;ll train it to be able to emit a stream of speech tokens that can then be converted directly into raw audio by an appropriate unit vocoder.&lt;/p&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;See Ultravox in action on our &lt;a href=&#34;https://demo.ultravox.ai&#34;&gt;demo page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Discord&lt;/h3&gt; &#xA;&lt;p&gt;Join us on our Discord server &lt;a href=&#34;https://discord.gg/Qw6KHxv8YB&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Jobs&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re interested in working on Ultravox fulltime, we&#39;re hiring! Check out our jobs page &lt;a href=&#34;https://careers.fixie.ai&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Inference Server&lt;/h3&gt; &#xA;&lt;p&gt;You can try out Ultravox using your own audio content (as a WAV file) by spinning up an Ultravox instance on our partner, BaseTen: &lt;a href=&#34;https://www.baseten.co/library/ultravox/&#34;&gt;https://www.baseten.co/library/ultravox/&lt;/a&gt;. They offer free credits to get started.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in running Ultravox in a real-time capacity, we offer a set of managed APIs as well. You can learn more about getting access to those &lt;a href=&#34;https://docs.ultravox.ai&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Model&lt;/h3&gt; &#xA;&lt;p&gt;You can download the latest weights from the &lt;a href=&#34;https://huggingface.co/fixie-ai/&#34;&gt;Ultravox Hugging Face page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1ey81xuuMzrJaBwztb_Rq24Cit37GQokD2aAes_KkGVI/edit&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fixie-ai/ultravox/main/docs/assets/Ultravox%20Model%20Architecture.svg?sanitize=true&#34; alt=&#34;architecture diagram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Read on if you&#39;re interested in training your own version of Ultravox.&lt;/p&gt; &#xA;&lt;h2&gt;Environment Setup (Mac)&lt;/h2&gt; &#xA;&lt;p&gt;Install the basic tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brew.sh&#34;&gt;&lt;code&gt;Homebrew&lt;/code&gt;&lt;/a&gt; is a package manager for MacOS that also mostly works for Linux. If you&#39;re running Debian or Ubuntu Linux, you can alternatively get by with apt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://just.systems/man/en/&#34;&gt;&lt;code&gt;Just&lt;/code&gt;&lt;/a&gt; simplifies our shell workflows. It frequently functions as our interface to all the other tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;brew update&#xA;brew install just&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a Python virtual environment and install the necessary packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;re using Poetry to manage the Python virtual environment.&lt;/p&gt; &#xA;&lt;h3&gt;Mosaic Environment Setup (Fixie Internal)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use &lt;a href=&#34;https://docs.mosaicml.com/projects/mcli/en/latest/quick_start/getting_started.html&#34;&gt;Mosaic&lt;/a&gt; for training, you need to setup a few things to run on the Mosaic Platform.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &amp;amp; login to the Mosaic CLI&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --upgrade mosaicml-cli&#xA;&#xA;mcli init&#xA;&#xA;mcli set api-key &amp;lt;new-value&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;set API keys for tools we use:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Huggging Face token for accessing walled data and models&#xA;mcli create secret env HF_TOKEN=hf_&amp;lt;your_token&amp;gt;&#xA;&#xA;# WandB token for logging experiments&#xA;mcli create secret env WANDB_PROJECT=ultravox&#xA;mcli create secret env WANDB_API_KEY=&amp;lt;your_wandb_key&amp;gt;&#xA;&#xA;# GCP credentials for accessing data (e.g. BoolQ)&#xA;# Get service_account.json file from Justin/Farzad and put it in the root dir, then&#xA;mcli create secret gcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Training&lt;/h2&gt; &#xA;&lt;p&gt;Currently, we keep both the LLM and the audio encoder frozen and only train the adapter/projector. Training Ultraox v0.4 took 2-3 hours on 8xH100 GPUs for 14K training steps.&lt;/p&gt; &#xA;&lt;h3&gt;Use-Cases for Training Ultravox&lt;/h3&gt; &#xA;&lt;p&gt;Why would you want to (re-) train Ultravox? Here are a few scenarios:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You want to use a different LLM or audio encoder backbone.&lt;/p&gt; &lt;p&gt;a. In this case you need to re-train the adapter. You can use &lt;code&gt;release_config.yaml&lt;/code&gt;, which contains our config for our latest release, and you should be able to simply change the base LLM or encoder by specifying &lt;code&gt;--text-model &amp;lt;hf-model-id-for-llm&amp;gt;&lt;/code&gt; and/or &lt;code&gt;--audio-model &amp;lt;hf-model-id-for-encoder&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You want to improve the knowledge of the model --&amp;gt; NO NEED TO TRAIN ULTRAVOX!&lt;/p&gt; &lt;p&gt;a. We suggest to either use RAG on the fly (no training needed), or fine-tune the LLM backbone instead. You might need to re-train Ultravox if you fine-tune the LLM.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You want to use your own audio data, for example to add support for a new language.&lt;/p&gt; &lt;p&gt;a. First step, prepare your dataset: at bare minimum, the samples should have an &lt;code&gt;audio&lt;/code&gt; and a text &lt;code&gt;continuation&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;b. Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/fixie-ai/ultravox/main/ultravox/tools/ds_tool/ds_tool.py&#34;&gt;&lt;code&gt;ds_tool.py&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/fixie-ai/ultravox/main/ultravox/tools/ds_tool/continuation.jinja&#34;&gt;&lt;code&gt;continuation.jinja&lt;/code&gt;&lt;/a&gt; as well as &lt;a href=&#34;https://huggingface.co/datasets/fixie-ai/common_voice_17_0/viewer/fr&#34;&gt;our variant of Common Voice&lt;/a&gt; that was created using &lt;code&gt;ds_tool&lt;/code&gt; to add the &lt;code&gt;continuation&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;c. Add your dataset to the dataset mix in &lt;code&gt;release_config.yaml&lt;/code&gt; and train.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There&#39;s no one-size fits all. If you need help you can find us on our Discord server &lt;a href=&#34;https://discord.gg/Qw6KHxv8YB&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to Train&lt;/h3&gt; &#xA;&lt;p&gt;We do most of our training on the &lt;a href=&#34;https://docs.mosaicml.com&#34;&gt;MosaicML platform&lt;/a&gt; and therefore most of our tooling and docs are Mosaic-related. However, you can do the same training on your own GPU without much difficulty. Here we assume you have the environment set up (run &lt;code&gt;just install&lt;/code&gt;). You can also take a look at &lt;a href=&#34;https://raw.githubusercontent.com/fixie-ai/ultravox/main/setup.sh&#34;&gt;&lt;code&gt;setup.sh&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To kick off a training run you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python -m ultravox.training.train --config_path ultravox/training/configs/release_config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For DDP training make sure to add &lt;code&gt;torchrun&lt;/code&gt;. We also recommend prefetching weights in advance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TRAIN_ARGS=&#34;--config_path ultravox/training/configs/release_config.yaml&#34;&#xA;poetry run python -m ultravox.training.helpers.prefetch_weights $TRAIN_ARGS&#xA;poetry run torchrun --nproc_per_node=8 -m ultravox.training.train $TRAIN_ARGS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a debug run, you can use smaller models, datasets, or batch size. Here&#39;s a config that uses TinyLlama as the LLM backbone:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry run python -m ultravox.training.train --config_path ultravox/training/configs/asr_tinyllama_100s.yaml --batch_size 1 --report_logs_to tensorboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/lebrice/simpleparsing/&#34;&gt;SimpleParsing&lt;/a&gt; for configs. Configs are composable (i.e. you can specify zero or many configs) and &lt;code&gt;meta_config.yaml&lt;/code&gt; is always used as the default. See &lt;a href=&#34;https://raw.githubusercontent.com/fixie-ai/ultravox/main/ultravox/training/config_base.py&#34;&gt;&lt;code&gt;configs_base.py&lt;/code&gt;&lt;/a&gt; to find the parameters you modify, such as the &lt;code&gt;--text-model&lt;/code&gt;, &lt;code&gt;--device&lt;/code&gt;, &lt;code&gt;--exp-name&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h3&gt;MosaicML Training (Fixie Internal)&lt;/h3&gt; &#xA;&lt;p&gt;Before running any training jobs, you need to setup your SSH key in the Mosaic Platform: &lt;a href=&#34;https://docs.mosaicml.com/projects/mcli/en/latest/resources/secrets/ssh.html#page-secrets-ssh&#34;&gt;https://docs.mosaicml.com/projects/mcli/en/latest/resources/secrets/ssh.html#page-secrets-ssh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## Create a new SSH key and add it to the Mosaic Platform&#xA;# ssh-keygen -f ~/.ssh/mclid_id_rsa&#xA;## add the **public** key to Github&#xA;# mcli create secret ssh ~/.ssh/mclid_id_rsa&#xA;&#xA;mcli run -f mcloud.yaml --follow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other useful commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcli get clusters&#xA;&#xA;mcli util r7z2&#xA;mcli get runs&#xA;mcli get runs --cluster r7z2&#xA;&#xA;mcli run -f mcloud.yaml --follow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For interactive runs you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just mcloud --image mosaicml/composer:latest --max-duration 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IMPORTANT: Make sure to monitor your jobs and stop the machine when you&#39;re done with any job, specially interactive ones!&lt;/p&gt; &#xA;&lt;h3&gt;Running evaluations&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;infer_tool.py --json &amp;gt; file&lt;/code&gt; to create a jsonl output from a given model/dataset combo, where each line contains two values: &lt;strong&gt;question&lt;/strong&gt; and &lt;strong&gt;answer&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;eval_tool.py -f file&lt;/code&gt; to evaluate the jsonl file, which will produce an average score for the model on the dataset.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/fixie-ai/ultravox/main/Justfile&#34;&gt;Justfile&lt;/a&gt; is a good resource for finding popular commands. Here are a few:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just update    # update dependencies&#xA;just format    # run formatting (black, isort, autoflake)&#xA;just test      # run tests&#xA;just python    # activate venv and run python&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>apache/polaris</title>
    <updated>2024-11-17T01:34:23Z</updated>
    <id>tag:github.com,2024-11-17:/apache/polaris</id>
    <link href="https://github.com/apache/polaris" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Polaris, the interoperable, open source catalog for Apache Iceberg&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apache Polaris (incubating)&lt;/h1&gt; &#xA;&lt;p&gt;Apache Polaris™ is an open-source, fully-featured catalog for Apache Iceberg™. It implements Iceberg&#39;s &lt;a href=&#34;https://github.com/apache/iceberg/raw/main/open-api/rest-catalog-open-api.yaml&#34;&gt;REST API&lt;/a&gt;, enabling seamless multi-engine interoperability across a wide range of platforms, including Apache Doris™, Apache Flink®, Apache Spark™, StarRocks, and Trino.&lt;/p&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://polaris.apache.org&#34;&gt;https://polaris.apache.org&lt;/a&gt;, including &lt;a href=&#34;https://polaris.apache.org/index.html#tag/polaris-management-service_other&#34;&gt;Polaris management API doc&lt;/a&gt; and &lt;a href=&#34;https://polaris.apache.org/index.html#tag/Configuration-API&#34;&gt;Apache Iceberg REST API doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:dev-subscribe@polaris.apache.org&#34;&gt;Subscribe to the dev mailing list&lt;/a&gt; to join discussions via email or browse &lt;a href=&#34;https://lists.apache.org/list.html?dev@polaris.apache.org&#34;&gt;the archives&lt;/a&gt;. Check out the &lt;a href=&#34;https://raw.githubusercontent.com/apache/polaris/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING guide&lt;/a&gt; for contribution guidelines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://polaris-catalog.zulipchat.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Zulip-Chat-blue?color=3d4db3&amp;amp;logo=zulip&amp;amp;style=for-the-badge&amp;amp;logoColor=white&#34; alt=&#34;Zulip&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apache/polaris/actions/workflows/gradle.yml?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/apache/polaris/gradle.yml?branch=main&amp;amp;label=Main%20CI&amp;amp;logo=Github&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and Running&lt;/h2&gt; &#xA;&lt;p&gt;Apache Polaris is organized into the following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;polaris-core&lt;/code&gt; - The main Polaris entity definitions and core business logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;polaris-server&lt;/code&gt; - The Polaris REST API server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;polaris-eclipselink&lt;/code&gt; - The Eclipselink implementation of the MetaStoreManager interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Apache Polaris is built using Gradle with Java 21+ and Docker 27+.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew build&lt;/code&gt; - To build and run tests. Make sure Docker is running, as the integration tests depend on it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew assemble&lt;/code&gt; - To skip tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew test&lt;/code&gt; - To run unit tests and integration tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./gradlew runApp&lt;/code&gt; - To run the Polaris server locally on localhost:8181.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./regtests/run_spark_sql.sh&lt;/code&gt; - To connect from Spark SQL. Here are some example commands to run in the Spark SQL shell:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;create database db1;&#xA;show databases;&#xA;create table db1.table1 (id int, name string);&#xA;insert into db1.table1 values (1, &#39;a&#39;);&#xA;select * from db1.table1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Apache Polaris supports the following optional build options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-PeclipseLink=true&lt;/code&gt; – Enables the EclipseLink extension.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-PeclipseLinkDeps=[groupId]:[artifactId]:[version],...&lt;/code&gt; – Specifies one or more additional dependencies for EclipseLink (e.g., JDBC drivers) separated by commas.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;More build and run options&lt;/h3&gt; &#xA;&lt;p&gt;Running in Docker&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker build -t localhost:5001/polaris:latest .&lt;/code&gt; - To build the image. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optional build options: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;docker build -t localhost:5001/polaris:latest --build-arg ECLIPSELINK=true .&lt;/code&gt; - Enables the EclipseLink extension.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;docker build -t localhost:5001/polaris:latest --build-arg ECLIPSELINK=true --build-arg ECLIPSELINK_DEPS=[groupId]:[artifactId]:[version],... .&lt;/code&gt; – Enables the EclipseLink extension with one or more additional dependencies for EclipseLink (e.g. JDBC drivers) separated by commas.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker run -p 8181:8181 localhost:5001/polaris:latest&lt;/code&gt; - To run the image in standalone mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running in Kubernetes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./run.sh&lt;/code&gt; - To run Polaris as a mini-deployment locally. This will create one pod that bind itself to ports &lt;code&gt;8181&lt;/code&gt; and &lt;code&gt;8182&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Optional run options: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;./run.sh -b &#34;ECLIPSELINK=true&#34;&lt;/code&gt; - Enables the EclipseLink extension.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;./run.sh -b &#34;ECLIPSELINK=true;ECLIPSELINK_DEPS=[groupId]:[artifactId]:[version],...&#34;&lt;/code&gt; – Enables the EclipseLink extension with one or more additional dependencies for EclipseLink (e.g. JDBC drivers) separated by commas.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl port-forward svc/polaris-service -n polaris 8181:8181 8182:8182&lt;/code&gt; - To create secure connections between a local machine and a pod within the cluster for both service and metrics endpoints. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Currently supported metrics endpoints: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;localhost:8182/metrics&lt;/li&gt; &#xA;     &lt;li&gt;localhost:8182/healthcheck&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl get pods -n polaris&lt;/code&gt; - To check the status of the pods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl get deployment -n polaris&lt;/code&gt; - To check the status of the deployment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl describe deployment polaris-deployment -n polaris&lt;/code&gt; - To troubleshoot if things aren&#39;t working as expected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running regression tests&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./regtests/run.sh&lt;/code&gt; - To run regression tests in another terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker compose up --build --exit-code-from regtest&lt;/code&gt; - To run regression tests in a Docker environment.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Building docs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docs are generated using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; using the &lt;a href=&#34;https://www.docsy.dev/docs/&#34;&gt;Docsy&lt;/a&gt; theme.&lt;/li&gt; &#xA; &lt;li&gt;To view the site locally, run &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;site/bin/run-hugo-in-docker.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/apache/polaris/main/site/README.md&#34;&gt;README in &lt;code&gt;site/&lt;/code&gt;&lt;/a&gt; for more information.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache Polaris is under the Apache License Version 2.0. See the &lt;a href=&#34;https://raw.githubusercontent.com/apache/polaris/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;ASF Incubator disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Apache Polaris™ is an effort undergoing incubation at The Apache Software Foundation (ASF), sponsored by the Apache Incubator. Incubation is required of all newly accepted projects until a further review indicates that the infrastructure, communications, and decision making process have stabilized in a manner consistent with other successful ASF projects. While incubation status is not necessarily a reflection of the completeness or stability of the code, it does indicate that the project has yet to be fully endorsed by the ASF.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Apache®, Apache Polaris™, Apache Iceberg™, Apache Spark™ are either registered trademarks or trademarks of the Apache Software Foundation in the United States and/or other countries.&lt;/sub&gt;&lt;/p&gt;</summary>
  </entry>
</feed>