<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-26T01:36:30Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Guovin/IPTV</title>
    <updated>2024-11-26T01:36:30Z</updated>
    <id>tag:github.com,2024-11-26:/Guovin/IPTV</id>
    <link href="https://github.com/Guovin/IPTV" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📺IPTV电视直播源更新工具🚀：包含💰央视、📡卫视、☘️广东及各省份地方台、🌊港·澳·台、🎬电影、🎥咪咕、🏀体育、🪁动画、🎮游戏、🎵音乐、🏛经典剧场；支持自定义增加频道；支持组播源、酒店源、订阅源、关键字搜索；每天自动更新两次，结果可用于TVBox等播放软件；支持工作流、Docker(amd64/arm64)、命令行、GUI运行方式 | IPTV live TV source update tool&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/static/images/logo.png&#34; alt=&#34;logo&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;IPTV电视直播源更新工具&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; 自定义频道菜单，根据模板频道，自动获取并更新最新的直播源接口，测速校验后生成可用的接口文件&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; 默认结果包含：📺央视频道、💰央视付费频道、📡卫视频道、🏠广东频道、🌊港·澳·台频道、🎬电影频道、🎥咪咕直播、🏀体育频道、🪁动画频道、🎮游戏频道、🎵音乐频道、🏛经典剧场&#xA;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;具体频道&lt;/summary&gt; &#xA; &lt;div&gt;&#xA;   📺央视频道: CCTV-1, CCTV-2, CCTV-3, CCTV-4, CCTV-5, CCTV-5+, CCTV-6, CCTV-7, CCTV-8, CCTV-9, CCTV-10, CCTV-11, CCTV-12, CCTV-13, CCTV-14, CCTV-15, CCTV-16, CCTV-17, CETV1, CETV2, CETV4, CETV5 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   💰央视付费频道: 文化精品, 央视台球, 风云音乐, 第一剧场, 风云剧场, 怀旧剧场, 女性时尚, 高尔夫网球, 风云足球, 电视指南, 世界地理, 兵器科技 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   📡卫视频道: 广东卫视, 香港卫视, 浙江卫视, 湖南卫视, 北京卫视, 湖北卫视, 黑龙江卫视, 安徽卫视, 重庆卫视, 东方卫视, 东南卫视, 甘肃卫视, 广西卫视, 贵州卫视, 海南卫视, 河北卫视, 河南卫视, 吉林卫视, 江苏卫视, 江西卫视, 辽宁卫视, 内蒙古卫视, 宁夏卫视, 青海卫视, 山东卫视, 山西卫视, 陕西卫视, 四川卫视, 深圳卫视, 三沙卫视, 天津卫视, 西藏卫视, 新疆卫视, 云南卫视 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   ☘️广东频道: 广东珠江, 广东体育, 广东新闻, 广东民生, 广东卫视, 大湾区卫视, 广州综合, 广州影视, 广州竞赛, 江门综合, 江门侨乡生活, 佛山综合, 深圳卫视, 汕头综合, 汕头经济, 汕头文旅, 茂名综合, 茂名公共 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   ☘️各省份地方台 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🌊港·澳·台: 翡翠台, 明珠台, 凤凰中文, 凤凰资讯, 凤凰香港, 凤凰卫视, TVBS亚洲, 香港卫视, 纬来体育, 纬来育乐, J2, Viutv, 三立台湾, 无线新闻, 三立新闻, 东森综合, 东森超视, 东森电影, Now剧集, Now华剧, 靖天资讯, 星卫娱乐, 卫视卡式 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎬电影频道: CHC家庭影院, CHC动作电影, CHC高清电影, 淘剧场, 淘娱乐, 淘电影, NewTV惊悚悬疑, NewTV动作电影, 黑莓电影, 纬来电影, 靖天映画, 靖天戏剧, 星卫娱乐, 艾尔达娱乐, 经典电影, IPTV经典电影, 天映经典, 无线星河, 星空卫视, 私人影院, 东森电影, 龙祥电影, 东森洋片, 东森超视 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎥咪咕直播: 咪咕直播1-45 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏀体育频道: CCTV-5, CCTV-5+, 广东体育, 纬来体育, 五星体育, 体育赛事, 劲爆体育, 爱体育, 超级体育, 精品体育, 广州竞赛, 深圳体育, 福建体育, 辽宁体育, 山东体育, 成都体育, 天津体育, 江苏体育, 安徽综艺体育, 吉林篮球, 睛彩篮球, 睛彩羽毛球, 睛彩广场舞, 风云足球, 足球频道, 魅力足球, 天元围棋, 快乐垂钓, JJ斗地主 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🪁动画频道: 少儿动画, 卡酷动画, 动漫秀场, 新动漫, 青春动漫, 爱动漫, 中录动漫, 宝宝动画, CN卡通, 优漫卡通, 金鹰卡通, 睛彩少儿, 黑莓动画, 炫动卡通, 24H国漫热播, 浙江少儿, 河北少儿科教, 七龙珠, 火影忍者, 海绵宝宝, 中华小当家, 斗破苍穹玄幻剧, 猫和老鼠, 经典动漫, 蜡笔小新, 漫画解说 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎮游戏频道: 游戏风云, 游戏竞技, 电竞游戏, 海看电竞, 电竞天堂, 爱电竞 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🎵音乐频道: CCTV-15, 风云音乐, 音乐现场, 音乐之声, 潮流音乐, 天津音乐, 音乐广播, 音乐调频广播 &#xA; &lt;/div&gt; &#xA; &lt;br&gt; &#xA; &lt;div&gt;&#xA;   🏛经典剧场: 笑傲江湖, 天龙八部, 鹿鼎记, 仙剑奇侠传, 西游记, 三国演义, 水浒传, 新白娘子传奇, 天龙八部, 济公游记, 封神榜, 闯关东, 上海滩, 射雕英雄传 &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Guovin/TV/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/guovin/tv&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.python.org/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/python-%20%3E%3D%203.8-47c219&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Guovin/TV/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/guovin/tv/total&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/guovern/tv-requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/guovern/tv-requests?label=docker:requests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/guovern/tv-driver&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/guovern/tv-driver?label=docker:driver&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/Guovin/TV/fork&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/guovin/tv&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/README_en.md&#34;&gt;English&lt;/a&gt; | 中文&lt;/p&gt; &#xA;&lt;h2&gt;✅ 特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ 自定义模板，生成您想要的频道&lt;/li&gt; &#xA; &lt;li&gt;✅ 支持多种获取源方式：组播源、酒店源、订阅源、关键字搜索&lt;/li&gt; &#xA; &lt;li&gt;✅ 接口测速验效，响应时间、分辨率优先级，过滤无效接口&lt;/li&gt; &#xA; &lt;li&gt;✅ 偏好设置：IPv6、接口来源排序优先级与数量配置、接口白名单&lt;/li&gt; &#xA; &lt;li&gt;✅ 定时执行，北京时间每日 6:00 与 18:00 执行更新&lt;/li&gt; &#xA; &lt;li&gt;✅ 支持多种运行方式：工作流、命令行、GUI 软件、Docker(amd64/arm64)&lt;/li&gt; &#xA; &lt;li&gt;✨ 更多功能请见&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/docs/config.md&#34;&gt;配置参数&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔗 最新结果&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接口源：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://ghproxy.net/raw.githubusercontent.com/Guovin/TV/gd/output/result.m3u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://ghproxy.net/raw.githubusercontent.com/Guovin/TV/gd/output/result.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数据源：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://ghproxy.net/raw.githubusercontent.com/Guovin/TV/gd/source.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ 配置&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/docs/config.md&#34;&gt;配置参数&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 快速上手&lt;/h2&gt; &#xA;&lt;h3&gt;方式一：工作流&lt;/h3&gt; &#xA;&lt;p&gt;Fork 本项目并开启工作流更新，具体步骤请见&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/docs/tutorial.md&#34;&gt;详细教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;方式二：命令行&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pip install pipenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pipenv install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pipenv run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;方式三：GUI 软件&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;下载&lt;a href=&#34;https://github.com/Guovin/TV/releases&#34;&gt;更新工具软件&lt;/a&gt;，打开软件，点击更新，即可完成更新&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;或者在项目目录下运行以下命令，即可打开 GUI 软件：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pipenv run ui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/docs/images/ui.png&#34; alt=&#34;更新工具软件&#34; title=&#34;更新工具软件&#34; style=&#34;height:600px&#34;&gt; &#xA;&lt;h3&gt;方式四：Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;driver：性能要求较高，更新速度较慢，稳定性、成功率高；修改配置 open_driver = False 可切换到 request 版本（推荐酒店源、组播源、关键字搜索使用此版本）&lt;/li&gt; &#xA; &lt;li&gt;requests：轻量级，性能要求低，更新速度快，稳定性不确定（推荐订阅源使用此版本）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;建议都试用一次，选择自己合适的版本&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;拉取镜像：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;driver：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull guovern/tv-driver:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull guovern/tv-requests:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;运行容器：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;driver：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 8000:8000 guovern/tv-driver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 8000:8000 guovern/tv-requests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;卷挂载参数（可选）： 实现宿主机文件与容器文件同步，修改模板、配置、获取更新结果文件可直接在宿主机文件夹下操作&lt;/p&gt; &#xA;&lt;p&gt;以宿主机路径/etc/docker 为例：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;driver：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /etc/docker/config:/tv-driver/config -v /etc/docker/output:/tv-driver/output -d -p 8000:8000 guovern/tv-driver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;requests：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v /etc/docker/config:/tv-requests/config -v /etc/docker/output:/tv-requests/output -d -p 8000:8000 guovern/tv-requests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;更新结果：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;接口地址：ip:8000&lt;/li&gt; &#xA; &lt;li&gt;接口详情：ip:8000/result&lt;/li&gt; &#xA; &lt;li&gt;测速日志：ip:8000/log&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🗓️ 更新日志&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/CHANGELOG.md&#34;&gt;更新日志&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💰️ 赞赏&lt;/h2&gt; &#xA;&lt;div&gt;&#xA; 开发维护不易，请我喝杯咖啡☕️吧~&#xA;&lt;/div&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;支付宝&lt;/th&gt; &#xA;   &lt;th&gt;微信&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/static/images/alipay.jpg&#34; alt=&#34;支付宝扫码&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/static/images/appreciate.jpg&#34; alt=&#34;微信扫码&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;👀 关注&lt;/h2&gt; &#xA;&lt;p&gt;微信公众号搜索 Govin，或扫码，接收更新推送、学习更多使用技巧：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/static/images/qrcode.jpg&#34; alt=&#34;微信公众号&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📣 免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本项目仅供学习交流用途，接口数据均来源于网络，如有侵权，请联系删除&lt;/p&gt; &#xA;&lt;h2&gt;⚖️ 许可证&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Guovin/IPTV/master/LICENSE&#34;&gt;MIT&lt;/a&gt; License © 2024-PRESENT &lt;a href=&#34;https://github.com/guovin&#34;&gt;Govin&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bambu-Research-Group/RFID-Tag-Guide</title>
    <updated>2024-11-26T01:36:30Z</updated>
    <id>tag:github.com,2024-11-26:/Bambu-Research-Group/RFID-Tag-Guide</id>
    <link href="https://github.com/Bambu-Research-Group/RFID-Tag-Guide" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Instructions on how to read out the bambulab nfc tags&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bambulab RFID Tag Guide&lt;/h1&gt; &#xA;&lt;p&gt;This guide gives you a basic overview how you can decrypt and read your tags. Since we don&#39;t know how Bambulab will react on this guide and the general reverse engineering of the tags: &lt;strong&gt;Please don&#39;t share you tag&#39;s UID and the related keys for now.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We are currently working on a way to submit the tag data in a secure way so analysis on the data could be done.&lt;/p&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;!--ts--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#project-summary&#34;&gt;Project Summary&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#faqs&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#how-do-rfid-tags-work&#34;&gt;How do RFID tags work?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#how-to-contribute&#34;&gt;How to contribute&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#todostimelinenext-steps&#34;&gt;Todos/Timeline/Next steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#required-equipment&#34;&gt;Required Equipment&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#proxmark3-compatible-readers&#34;&gt;Proxmark3 compatible readers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#proxmark3-easy&#34;&gt;Proxmark3 Easy&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#hacking-a-bambulab-tag-and-readout-of-its-data&#34;&gt;Hacking a Bambulab Tag and readout of its data&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#bambulab-ams-rfid-reader-location&#34;&gt;Bambulab AMS RFID reader location&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#bambulab-ams-lite-rfid-reader-location&#34;&gt;Bambulab AMS Lite RFID reader location&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#proxmark3-placement-for-sniffing&#34;&gt;Proxmark3 placement for sniffing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#key-derivation&#34;&gt;Key Derivation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#dump-rfid-contents-bin&#34;&gt;Dump RFID Contents (.bin)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#tag-documentation&#34;&gt;Tag Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-overview&#34;&gt;Block Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;MIFARE Encryption Keys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-0&#34;&gt;Block 0&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-1&#34;&gt;Block 1&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-2&#34;&gt;Block 2&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-4&#34;&gt;Block 4&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-5&#34;&gt;Block 5&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-6&#34;&gt;Block 6&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-8&#34;&gt;Block 8&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-9&#34;&gt;Block 9&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-10&#34;&gt;Block 10&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-12&#34;&gt;Block 12&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-13&#34;&gt;Block 13&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-14&#34;&gt;Block 14&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-16&#34;&gt;Block 16&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-17&#34;&gt;Block 17&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#compatible-rfid-tags----by-generation&#34;&gt;Compatible RFID tags - By generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#reverse-engineering-rfid-board&#34;&gt;Reverse engineering RFID Board&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--te--&gt; &#xA;&lt;h2&gt;Project Summary&lt;/h2&gt; &#xA;&lt;p&gt;This is a research group dedicated to documenting the data structures used by Bambulab 3D printers to identify filament data.&lt;/p&gt; &#xA;&lt;h3&gt;FAQs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Can I clone tags?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Yes, you can read and clone tags using a tool such as a Proxmark3&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Can I create custom tags?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No, tags are digitally signed. Even if you modify the contents, the printer will reject any tags without a valid RSA signature&lt;/li&gt; &#xA;   &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/OpenSourceRfid.md&#34;&gt;Open Source RFID Tag&lt;/a&gt; has been proposed to allow anyone to create / modify their own tags. This must be adopted by printer manufacturers, or you can mod your own printer for support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;What are the next steps for this project?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Decyphering the rest of the unknwn tag content&lt;/li&gt; &#xA;   &lt;li&gt;Custom AMS firmware that allows custom tags to be read while ignoring the signature&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#todostimelinenext-steps&#34;&gt;Todos/Timeline/Next steps&lt;/a&gt; for more info&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How do RFID tags work?&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a high-level summary of how everything works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BambuLab printers use MiFare 13.56MHZ RFID tags &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;These tags contain a unique ID that is not encrypted (called the UID)&lt;/li&gt; &#xA;   &lt;li&gt;In most cases UID is fixed (not-changable). Some &#34;hackable&#34; rfid tags allow you to set the UID to anything you want&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Blocks (Encrypted) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MiFare tags also contain &#34;Blocks&#34; of data. Each block contains info about the spool, such as Material, Color, Manufacturing Date, etc. See &lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#tag-stucture&#34;&gt;Tag stucture&lt;/a&gt; section for details&lt;/li&gt; &#xA;   &lt;li&gt;The blocks are encrypted, meaning that you need to have a KEY to decipher them&lt;/li&gt; &#xA;   &lt;li&gt;Each block is encrypted with a different key&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Encryption Keys &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Keys are unique to each RFID tag. Even if you discover the key for one tag, that doesn&#39;t mean you can use that same key to unlock a different tag.&lt;/li&gt; &#xA;   &lt;li&gt;As of 11/19/24, keys can be derived from the UID. After reading the UID from the tag, the KDF (key derivation function) can be used to derive the 16 keys.&lt;/li&gt; &#xA;   &lt;li&gt;(Outdated, sniffing is no longer required now that the KDF is known) Keys can be sniffed by using a device (such as a ProxMark 3) to listen in on the communication between the AMS and the rfid tag.&lt;/li&gt; &#xA;   &lt;li&gt;Once the keys have been sniffed, they can be saved and used to read the contents of the tag directly (without an AMS). (Reminder, the saved keys will ONLY work for the tag they were sniffed from)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;RSA Signature &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;One of the blocks contains a 2048-bit RSA Signature&lt;/li&gt; &#xA;   &lt;li&gt;RSA signatures are a way to digitally sign / certify authenticity of content, and they are effectively un-breakable (this is how things like cryptocurrency remain secure)&lt;/li&gt; &#xA;   &lt;li&gt;RSA signatures encompass all of the data of the RFID tag. Changing a single byte somewhere else in the tag would require a completely different signature to be considered genuine&lt;/li&gt; &#xA;   &lt;li&gt;Bambu printers check the content of the tag and then check if the signature is valid. If the signature is invalid, it rejects the tag&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cloning Tags &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Even though there is a signature, a tag can be cloned&lt;/li&gt; &#xA;   &lt;li&gt;To clone a tag, it must have the same UID, identical content from the data blocks, and the identical RSA signature&lt;/li&gt; &#xA;   &lt;li&gt;Changing even one byte will cause the signature to be invalid, and the tag will be rejected&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom Tags &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is very unlikely to happen, mostly due to the RSA signature. Only Bambu has their &#34;Private Key&#34; which is used to digitally sign these tags.&lt;/li&gt; &#xA;   &lt;li&gt;To create a custom key, you need to know the following info: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;RSA Signature Private Key. You&#39;d have to get this from bambu, good luck&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Since Bambulab will likely not remove the signature requirement, you would need custom AMS firmware to read tags and ignore the signature&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to contribute&lt;/h3&gt; &#xA;&lt;p&gt;If you have a Proxmark3 (or other RFID debugging tool), you can sniff and decrypt the contents of your tags and submit them for review. The more data we have, the easier it is to compare differences to learn what each byte represents. A lot of the contents have been deciphered (see &lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#tag-stucture&#34;&gt;Tag stucture&lt;/a&gt;), but there is still more unknown data still left.&lt;/p&gt; &#xA;&lt;h2&gt;Todos/Timeline/Next steps&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tool for automatic trace analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Web service for tag submisson with automatic anonymized data publishing to github&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tag content analysis&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Generate keys based on an arbitrary UID&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Required Equipment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bambulab 3D Printer with AMS or AMS Lite&lt;/li&gt; &#xA; &lt;li&gt;Bambulab Filament spool &lt;strong&gt;or&lt;/strong&gt; the related tags&lt;/li&gt; &#xA; &lt;li&gt;A Proxmark3-compatible RFID reader&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/RfidResearchGroup/proxmark3&#34;&gt;proxmark3 software&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Proxmark3 compatible readers&lt;/h3&gt; &#xA;&lt;h4&gt;Proxmark3 Easy&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/images/Proxmark3_easy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Proxmark3 Easy is sufficient for all the tasks that need to be done. You can buy a clone from Alixepress, Amazon or Dangerous Things.&lt;/p&gt; &#xA;&lt;h2&gt;Hacking a Bambulab Tag and readout of its data&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to obtain the We document here the most simple approach to get all required A-Keys and the data of the tag. The easiest way is to sniff the data.&lt;/p&gt; &#xA;&lt;h3&gt;Bambulab AMS RFID reader location&lt;/h3&gt; &#xA;&lt;p&gt;The Bambulab AMS RFID readers are located between slots 1&amp;amp;2 and slots 3&amp;amp;4.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/images/filament-slots.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bambulab AMS Lite RFID reader location&lt;/h3&gt; &#xA;&lt;p&gt;The Bambulab AMS Lite RFID readers are located at the base of each spool holder.&lt;/p&gt; &#xA;&lt;p&gt;For sniffing, you will need to place the Proxmark in between the RFID tag and the reader on the AMS. As there is not much clearance, it is recommended to temporarily remove the low frequency radio (the topmost piece) if you can, as it will not be used in this process.&lt;/p&gt; &#xA;&lt;h3&gt;Proxmark3 placement for sniffing&lt;/h3&gt; &#xA;&lt;p&gt;For sniffing, you will need to place the Proxmark3 against the reader. On the AMS lite, you must place it in between the reader and the spool. On the AMS, it is recommended to place it between the reader and the spool, but you may place it on the other side (for example, load the spool into slot 1 and place the Proxmark3 against the reader in slot 2).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] As there is not much clearance, it may be helpful to disassemble the Proxmark3 Easy and remove the top and middle layers. For this particular process, you will only need the bottom-most layer.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you place the Proxmark in between the AMS reader and the spool, make sure that spool rotates so that the RFID tag moves away from the reader, otherwise the AMS will assume that it is reading the tag from its neighboring slot and attempt to rewind it until it cannot see the RFID tag.&lt;/p&gt; &#xA;&lt;h3&gt;Key Derivation&lt;/h3&gt; &#xA;&lt;p&gt;As of 11/19/24, keys can now be derived from the UID of a tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from Cryptodome.Protocol.KDF import HKDF&#xA;from Cryptodome.Hash import SHA256&#xA;&#xA;uid=bytes([0x02,0x3b,0x44,0x74])&#xA;master = bytes([0x9a,0x75,0x9c,0xf2,0xc4,0xf7,0xca,0xff,0x22,0x2c,0xb9,0x76,0x9b,0x41,0xbc,0x96]) &#xA;&#xA;keys=HKDF(uid, 6, master, SHA256, 16, context=b&#34;RFID-A\0&#34;)&#xA;&#xA;print([a.hex() for a in keys])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dump RFID Contents (.bin)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run ProxMark3 Software&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In a terminal, run &lt;code&gt;pm3&lt;/code&gt; to start the Proxmark3 Software&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sniff Communication&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Start sniffing with: &lt;code&gt;hf 14a sniff -c -r&lt;/code&gt;&lt;br&gt; (hf=High Frequency, 14a=Tag Type, Sniff=command, -c and -r mean &#34;capture on triggers instead of continuously)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Place your Proxmark3 between the tag and the AMS. Recommended: Use tape to hold it in place.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Load a strand of filament into the AMS. This is what triggers the AMS to attempt to read the RFID tag.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Press the button on the ProxMark to end capture after the filament has completed loading&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extract the Keys&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automatic&lt;/strong&gt; (recommended)&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;Save the trace results to a file with: &lt;code&gt;trace save -f [FILENAME]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Open a new terminal window and run the trace key extractor script in this repository with Python 3: &lt;code&gt;python3 traceKeyExtractor.py&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Input the trace results filepath or drag and drop it into the terminal window&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;After the keys are extracted, return to the Proxmark3 software&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Remove the spool from the AMS and hold the Proxmark3 against the RFID tag of the spool&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Run &lt;code&gt;hf mf fchk -f [dictionaryFilepath] --dump&lt;/code&gt; to create a key file&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;The program will report the destination of the key file that it saved. Copy this filepath to your clipboard.&lt;/p&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[+] Found keys have been dumped to /Users/mitch/hf-mf-75066B1D-key.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual&lt;/strong&gt; (not recommended)&lt;/p&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Key Dictionary&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;We will discover keys one at a time and save them to a dictionary file.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Navigate to your Proxmark3 software installation directory. This will be specific to your Operating System and Installation.&lt;/p&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;macOS (Intel) Example: &lt;code&gt;/usr/local/Cellar/proxmark3/4.17768/share/proxmark3/&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;macOS (ARM) Eample: &lt;code&gt;/opt/homebrew/Cellar/proxmark3/4.17768/share/proxmark3/&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;Windows Example: TBD&lt;/li&gt; &#xA;         &lt;li&gt;Linux Example: TBD&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Open a text editor and save a blank file called &lt;code&gt;myDictionary.dic&lt;/code&gt; into the &lt;code&gt;dictionaries/&lt;/code&gt; folder of your Proxmark3 software installation directory.&lt;/p&gt; &lt;p&gt;(You can call this file anything you want, but for the rest of this example, we will refer to it as &#34;myDictionary&#34;)&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Leave this file open, we will continue to add keys to it in the next step&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extract Keys From Trace&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Run &lt;code&gt;trace list -t mf -f myDictionary&lt;/code&gt; to view the trace that was recorded from sniffing in the previous step.&lt;/p&gt; &lt;p&gt;This uses the key dictionary &lt;code&gt;myDictionary.dic&lt;/code&gt; that we created in step 3.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Read the output and look for anything that mentions a key.&lt;/p&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt; &lt;p&gt;Three Possible Formats:&lt;/p&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;code&gt;key E0B50731BE27 prng WEAK&lt;/code&gt; - Follow Step 5&lt;/li&gt; &#xA;           &lt;li&gt;&lt;code&gt;nested probable key: 50B0318A4FE7&lt;/code&gt; - Follow Step 6&lt;/li&gt; &#xA;           &lt;li&gt;&lt;code&gt;Nested authentication detected.&lt;/code&gt; - Follow Step 7&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt; &lt;p&gt;Each of these 3 entries can provide us with a valid key. Follow step 5, 6, or 7 depending on which type of key you encounter.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;First Key - Plain Text&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Example: &lt;code&gt;key E0B50731BE27 prng WEAK&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;This is the first key that was discovered by sniffing AMS traffic.&lt;/li&gt; &#xA;       &lt;li&gt;Copy/paste this key into the &lt;code&gt;myDictionary.dic&lt;/code&gt; file that you created in step 3, then save the file.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nested Probable Key&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Example: &lt;code&gt;nested probable key: 50B0318A4FE7&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Copy/paste this key into the &lt;code&gt;myDictionary.dic&lt;/code&gt; file that you created in step 3, then save the file.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nested Authentication Key&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Example: &lt;pre&gt;&lt;code&gt;Nested authentication detected.&#xA;tools/mf_nonce_brute/mf_nonce_brute 75066b1d 4db2f2ac 0101 70fcdd3d 328eb1e6 1101 28b75cfd 0010 5196401C&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;       &lt;li&gt;Open a second terminal window, and change directories into your Proxmark3 software installation directory. This is specific to your OS and PM3 installation. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;macOS/Linux: &lt;code&gt;cd $(brew --prefix proxmark3)/share/proxmark3/&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;Windows: TBD&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;CD into the tools folder &lt;code&gt;cd tools/&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;Copy the command from ProxMark starting at &lt;code&gt;mf_nonce_brute&lt;/code&gt;, including all the arguments (random letters/numbers) after it, and run the program from the &lt;code&gt;tools/&lt;/code&gt; directory. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Example (macOS/Linux): &lt;code&gt;./mf_nonce_brute 75066b1d 4db2f2ac 0101 70fcdd3d 328eb1e6 1101 28b75cfd 0010 5196401C&lt;/code&gt;&lt;/li&gt; &#xA;         &lt;li&gt;Example (Windows): &lt;code&gt;mf_nonce_brute.exe 75066b1d 4db2f2ac 0101 70fcdd3d 328eb1e6 1101 28b75cfd 0010 5196401C&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;The program will discover a key. Copy/paste this key into your &lt;code&gt;myDictionary.dic&lt;/code&gt; file, and SAVE IT. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Example Output: &lt;pre&gt;&lt;code&gt;Valid Key found [ 202efd3dcdfd ]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Check Keys (Optional)&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to check how many valid keys you&#39;ve discovered, you can do this test&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;This is optional, and you can choose to wait until you have discovered all of the keys&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: Performing a key check will erase the trace that you recorded during step 2, and will require you to re-sniff data (repeat step 2)&lt;/p&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;If you want to save your trace to avoid re-sniffing, use &lt;code&gt;trace save -f &amp;lt;trace-name&amp;gt;&lt;/code&gt; and &lt;code&gt;trace load -f &amp;lt;trace-name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;Run &lt;code&gt;hf mf fchk --1k -f myDictionary&lt;/code&gt; to test your keys&lt;/p&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Example Output (showing 11/16 keys discovered): &lt;pre&gt;&lt;code&gt;[+] found keys:&#xA;&#xA;[+] -----+-----+--------------+---+--------------+----&#xA;[+]  Sec | Blk | key A        |res| key B        |res&#xA;[+] -----+-----+--------------+---+--------------+----&#xA;[+]  000 | 003 | E0B50731BE27 | 1 | ------------ | 0&#xA;[+]  001 | 007 | 63654DB94D97 | 1 | ------------ | 0&#xA;[+]  002 | 011 | 387C06EFFDC8 | 1 | ------------ | 0&#xA;[+]  003 | 015 | 38963E577E43 | 1 | ------------ | 0&#xA;[+]  004 | 019 | 8A3EA2564692 | 1 | ------------ | 0&#xA;[+]  005 | 023 | 935E0F11857A | 1 | ------------ | 0&#xA;[+]  006 | 027 | EBC8F7D23A06 | 1 | ------------ | 0&#xA;[+]  007 | 031 | DD6128F13D4C | 1 | ------------ | 0&#xA;[+]  008 | 035 | ------------ | 0 | ------------ | 0&#xA;[+]  009 | 039 | 4E470B09521F | 1 | ------------ | 0&#xA;[+]  010 | 043 | 50EB8811A69C | 1 | ------------ | 0&#xA;[+]  011 | 047 | 4BDD25091824 | 1 | ------------ | 0&#xA;[+]  012 | 051 | ------------ | 0 | ------------ | 0&#xA;[+]  013 | 055 | ------------ | 0 | ------------ | 0&#xA;[+]  014 | 059 | ------------ | 0 | ------------ | 0&#xA;[+]  015 | 063 | ------------ | 0 | ------------ | 0&#xA;[+] -----+-----+--------------+---+--------------+----&#xA;[+] ( 0:Failed / 1:Success )&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Find Remaining Keys&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Repeat step 4 until all 16 keys are discovered&lt;/li&gt; &#xA;       &lt;li&gt;Your dictionary may be larger than 16 entries if you accidentally copied a duplicate key or an invalid key. These invalid entries are fine, and you can ignore them&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: When you think you have discovered all 16 keys, perform step 8 to verify that your keys are correct.&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;strong&gt;Convert Dictionary to Key File&lt;/strong&gt;&lt;/p&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Remove the spool from the AMS and hold the Proxmark3 against the RFID tag of the spool&lt;/li&gt; &#xA;       &lt;li&gt;Run &lt;code&gt;hf mf fchk --1k -f myDictionary --dump&lt;/code&gt; to create a key file&lt;/li&gt; &#xA;       &lt;li&gt;The program will report the destination of the key file that it saved. Copy this filepath to your clipboard &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;Example: &lt;pre&gt;&lt;code&gt;[+] Found keys have been dumped to /Users/mitch/hf-mf-75066B1D-key.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dump RFID Contents&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;hf mf dump -k [path-to-keyfile]&lt;/code&gt; while the Proxmark3 is on the spool&#39;s RFID tag to dump the contents of the tag using the 16 keys we discovered&lt;/li&gt; &#xA;   &lt;li&gt;There should be no errors&lt;/li&gt; &#xA;   &lt;li&gt;The output should tell you where your &lt;code&gt;.bin&lt;/code&gt; file is saved &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Example: &lt;pre&gt;&lt;code&gt;[+] saved 1024 bytes to binary file /Users/mitch/hf-mf-75066B1D-dump.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tag Documentation&lt;/h2&gt; &#xA;&lt;p&gt;This contains documentation for the known and unknown data that is contained in each block on the RFID tag.&lt;/p&gt; &#xA;&lt;h3&gt;Block Overview&lt;/h3&gt; &#xA;&lt;p&gt;Summary of what kind of data is stored in each block. Detailed info for each block is documented below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;sec&lt;/th&gt; &#xA;   &lt;th&gt;blk&lt;/th&gt; &#xA;   &lt;th&gt;Data&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-0&#34;&gt;Block 0&lt;/a&gt; UID and Tag Manufacturer Data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-1&#34;&gt;Block 1&lt;/a&gt; Tray Info Index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-2&#34;&gt;Block 2&lt;/a&gt; Filament Type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 3&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-4&#34;&gt;Block 4&lt;/a&gt; Detailed Filament Type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-5&#34;&gt;Block 5&lt;/a&gt; Spool Weight, Color Code, Filament Diameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-6&#34;&gt;Block 6&lt;/a&gt; Temperatures and Drying Info&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 7&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-8&#34;&gt;Block 8&lt;/a&gt; X Cam Info, Nozzle Diameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-9&#34;&gt;Block 9&lt;/a&gt; Tray UID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-10&#34;&gt;Block 10&lt;/a&gt; Spool Width&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 11&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-12&#34;&gt;Block 12&lt;/a&gt; Production Date/Time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-13&#34;&gt;Block 13&lt;/a&gt; Short Production Date/Time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-14&#34;&gt;Block 14&lt;/a&gt; Filament Length&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 15&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-16&#34;&gt;Block 16&lt;/a&gt; Extra Color Info&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#block-17&#34;&gt;Block 17&lt;/a&gt; &lt;strong&gt;Unknown&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 19&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 23&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 27&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 31&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 35&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Empty&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/#mifare-encryption-keys&#34;&gt;Block 39&lt;/a&gt; MIFARE encryption keys, Unrelated to BambuLab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10-15&lt;/td&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;RSA-2048 Signature&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The first part of the filament serial number seems to be the Tag UID.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] All numbers are encoded as Little Endian (LE).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;MIFARE Encryption Keys&lt;/h3&gt; &#xA;&lt;p&gt;Every 4th block (eg Sector X, Block 3) contains encryption keys that are part of the MIFARE RFID standard. This has nothing to do with BambuLab&#39;s memory format. All BambuLab tags use the same Permission Bits (Access Control)&lt;/p&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA PP PP PP PP BB BB BB BB BB BB&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;RAW Bin&lt;/td&gt; &#xA;   &lt;td&gt;A-Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6 (PP)&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;RAW Bin&lt;/td&gt; &#xA;   &lt;td&gt;Permission Bits (Access Control)&lt;br&gt;ALWAYS &lt;code&gt;87 87 87 69&lt;/code&gt; (hex) for Bambu Tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10 (BB)&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;RAW Bin&lt;/td&gt; &#xA;   &lt;td&gt;B-Key (always &lt;code&gt;00 00 00 00 00 00&lt;/code&gt; for Bambu tags)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 0&lt;/h3&gt; &#xA;&lt;p&gt;Note: Block 0 is Read-only. The contents are set by the tag manufacturer.&lt;/p&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA BB BB BB BB BB BB BB BB BB BB BB BB&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Tag UID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 (BB)&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;RAW Bin&lt;/td&gt; &#xA;   &lt;td&gt;Tag Manufacturer Data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 1&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA AA AA BB BB BB BB BB BB BB BB&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Tray Info Index - Material Variant Identifier&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8 (BB)&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Tray Info Index - Unique Material Identifier&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 2&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Filament Type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 4&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Detailed Filament Type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Known Values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PLA Basic&lt;/li&gt; &#xA; &lt;li&gt;PLA Matte&lt;/li&gt; &#xA; &lt;li&gt;PLA Silk&lt;/li&gt; &#xA; &lt;li&gt;PLA Galaxy&lt;/li&gt; &#xA; &lt;li&gt;PLA Sparkle&lt;/li&gt; &#xA; &lt;li&gt;Support for PLA (prev. Support W)&lt;/li&gt; &#xA; &lt;li&gt;PLA-CF (prev. PLA Tough)&lt;/li&gt; &#xA; &lt;li&gt;PETG Basic&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Block 5&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA BB BB __ __ CC CC CC CC __ __ __ __&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;RGBA&lt;/td&gt; &#xA;   &lt;td&gt;Color in hex RGBA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 (BB)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Spool Weight in grams (&lt;code&gt;E8 03&lt;/code&gt; --&amp;gt; 1000 g)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8 (CC)&lt;/td&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;float (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Filament Diameter in milimeters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 6&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA BB BB CC CC DD DD EE EE FF FF __ __ __ __&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Drying Temperature in °C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2 (BB)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Drying time in hours&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 (CC)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Bed Temerature Type &lt;strong&gt;(types unknown)&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6 (DD)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Bed Temperature in °C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8 (EE)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Max Temperature for Hotend in °C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10 (FF)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Min Temperature for Hotend in °C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 8&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA AA AA AA AA AA AA BB BB BB BB&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;RAW Bin&lt;/td&gt; &#xA;   &lt;td&gt;X Cam info&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12 (BB)&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;float (LE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Nozzle Diameter...?&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 9&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Tray UID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 10&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;__ __ __ __ AA AA __ __ __ __ __ __ __ __ __ __&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Spool Width in µm (&lt;code&gt;E1 19&lt;/code&gt; --&amp;gt; 6625µm --&amp;gt; 66.25mm )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 12&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Production Date and Time in ASCII (&lt;code&gt;&amp;lt;year&amp;gt;_&amp;lt;month&amp;gt;_&amp;lt;day&amp;gt;_&amp;lt;hour&amp;gt;_&amp;lt;minute&amp;gt;&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 13&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA AA&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Short Production Date/Time...?&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 14&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;__ __ __ __ AA AA __ __ __ __ __ __ __ __ __ __&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Filament length in meters...?&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Block 16&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA BB BB CC CC CC CC __ __ __ __ __ __ __ __&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Format Identifier&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2 (BB)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;uint16 (LE)&lt;/td&gt; &#xA;   &lt;td&gt;Color Count&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 (CC)&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;RGBA&lt;/td&gt; &#xA;   &lt;td&gt;Second color in &lt;em&gt;reverse&lt;/em&gt; hex ABGR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Known Format Identifiers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;00 00 = Empty&lt;/li&gt; &#xA; &lt;li&gt;02 00 = Color Info&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Block 17&lt;/h3&gt; &#xA;&lt;p&gt;Example Data: &lt;code&gt;AA AA __ __ __ __ __ __ __ __ __ __ __ __ __ __&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;position&lt;/th&gt; &#xA;   &lt;th&gt;length&lt;/th&gt; &#xA;   &lt;th&gt;type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0 (AA)&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Unknown&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Unknown&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Compatible RFID tags - By generation&lt;/h2&gt; &#xA;&lt;p&gt;There are tags known as &#34;Magic Tags&#34; which allow functionality that&#39;s not part of the classic MIFARE spec. One example is that most Magic Tags allow the UID to be changed, which is normally read-only on MIFARE tags. Magic tags are often refered to by their &#34;generation&#34;, eg &#34;Magic Gen 1&#34;. Each newer generation increases the functionality, but tends to also be more expensive)&lt;/p&gt; &#xA;&lt;p&gt;Gen 1 --&amp;gt; &lt;strong&gt;Not compatible&lt;/strong&gt;(due to AMS checking if tag is unlockable with command 0x40)&lt;/p&gt; &#xA;&lt;p&gt;Gen 2 --&amp;gt; &lt;strong&gt;Works&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gen 2 OTW --&amp;gt; &lt;strong&gt;Not tested&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gen 3 --&amp;gt; &lt;strong&gt;Not tested&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gen 4 --&amp;gt; &lt;strong&gt;Not tested&lt;/strong&gt;(The best option but pricey and hard to source in small chip formfactor)&lt;/p&gt; &#xA;&lt;p&gt;FUID --&amp;gt; &lt;strong&gt;Works&lt;/strong&gt; &#34;Fused UID&#34; aka &#34;write-once UID&#34;. Once a UID is written, it cannot be changed&lt;/p&gt; &#xA;&lt;h2&gt;Reverse engineering RFID Board&lt;/h2&gt; &#xA;&lt;p&gt;For ease of debugging and lowering the cost of failures the RFID board is reverse engineered. You can find complete production ready gerber files and bill of materials in rfid-board folder&lt;/p&gt; &#xA;&lt;p&gt;As a nice to benefit to have is that you can manufacture boards in different colors. &lt;img src=&#34;https://raw.githubusercontent.com/Bambu-Research-Group/RFID-Tag-Guide/main/rfid-board/Photo_PCB_BBL-RFID.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>