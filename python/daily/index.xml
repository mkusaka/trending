<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-06T01:36:20Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YaoFANGUK/video-subtitle-remover</title>
    <updated>2024-04-06T01:36:20Z</updated>
    <id>tag:github.com,2024-04-06:/YaoFANGUK/video-subtitle-remover</id>
    <link href="https://github.com/YaoFANGUK/video-subtitle-remover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于AI的图片/视频硬字幕去除、文本水印去除，无损分辨率生成去字幕、去水印后的图片/视频文件。无需申请第三方API，本地实现。AI-based tool for removing hard-coded subtitles and text-like watermarks from videos or Pictures.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/YaoFANGUK/video-subtitle-remover/main/README_en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;项目简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202-red.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Python-3.8+-blue.svg?sanitize=true&#34; alt=&#34;python version&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/OS-Windows/macOS/Linux-green.svg?sanitize=true&#34; alt=&#34;support os&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Video-subtitle-remover (VSR) 是一款基于AI技术，将视频中的硬字幕去除的软件。 主要实现了以下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;无损分辨率&lt;/strong&gt;将视频中的硬字幕去除，生成去除字幕后的文件&lt;/li&gt; &#xA; &lt;li&gt;通过超强AI算法模型，对去除字幕文本的区域进行填充（非相邻像素填充与马赛克去除）&lt;/li&gt; &#xA; &lt;li&gt;支持自定义字幕位置，仅去除定义位置中的字幕（传入位置）&lt;/li&gt; &#xA; &lt;li&gt;支持全视频自动去除所有文本（不传入位置）&lt;/li&gt; &#xA; &lt;li&gt;支持多选图片批量去除水印文本&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p style=&#34;text-align:center;&#34;&gt;&lt;img src=&#34;https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo.png&#34; alt=&#34;demo.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用说明：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有使用问题请加群讨论，QQ群：806152575&lt;/li&gt; &#xA; &lt;li&gt;直接下载压缩包解压运行，如果不能运行再按照下面的教程，尝试源码安装conda环境运行&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;下载地址：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows GPU版本v1.1.0（GPU）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;百度网盘: &lt;a href=&#34;https://pan.baidu.com/s/1zR6CjRztmOGBbOkqK8R1Ng?pwd=vsr1&#34;&gt;vsr_windows_gpu_v1.1.0.zip&lt;/a&gt; 提取码：&lt;strong&gt;vsr1&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Google Drive: &lt;a href=&#34;https://drive.google.com/drive/folders/1NRgLNoHHOmdO4GxLhkPbHsYfMOB_3Elr?usp=sharing&#34;&gt;vsr_windows_gpu_v1.1.0.zip&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;仅供具有Nvidia显卡的用户使用(AMD的显卡不行)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;演示&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GUI版：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p style=&#34;text-align:center;&#34;&gt;&lt;img src=&#34;https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo2.gif&#34; alt=&#34;demo2.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://b23.tv/guEbl9C&#34;&gt;点击查看演示视频👇&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p style=&#34;text-align:center;&#34;&gt;&lt;a href=&#34;https://b23.tv/guEbl9C&#34;&gt;&lt;img src=&#34;https://github.com/YaoFANGUK/video-subtitle-remover/raw/main/design/demo.gif&#34; alt=&#34;demo.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;源码使用说明&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;无Nvidia显卡请勿使用本项目&lt;/strong&gt;，最低配置：&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;GPU&lt;/strong&gt;：GTX 1060或以上显卡&lt;/p&gt; &#xA; &lt;p&gt;CPU: 支持AVX指令集&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;1. 下载安装Miniconda&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows: &lt;a href=&#34;https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Windows-x86_64.exe&#34;&gt;Miniconda3-py38_4.11.0-Windows-x86_64.exe&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux: &lt;a href=&#34;https://repo.anaconda.com/miniconda/Miniconda3-py38_4.11.0-Linux-x86_64.sh&#34;&gt;Miniconda3-py38_4.11.0-Linux-x86_64.sh&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. 创建并激活虚机环境&lt;/h4&gt; &#xA;&lt;p&gt;（1）切换到源码所在目录：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd &amp;lt;源码所在目录&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;例如：如果你的源代码放在D盘的tools文件下，并且源代码的文件夹名为video-subtitle-remover，就输入 &lt;code&gt;cd D:/tools/video-subtitle-remover-main&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;（2）创建激活conda环境&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda create -n videoEnv python=3.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda activate videoEnv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. 安装依赖文件&lt;/h4&gt; &#xA;&lt;p&gt;请确保你已经安装 python 3.8+，使用conda创建项目虚拟环境并激活环境 (建议创建虚拟环境运行，以免后续出现问题)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;安装CUDA和cuDNN&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Linux用户&lt;/summary&gt; &#xA;   &lt;h5&gt;(1) 下载CUDA 11.7&lt;/h5&gt; &#xA;   &lt;pre&gt;&lt;code&gt;wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;(2) 安装CUDA 11.7&lt;/h5&gt; &#xA;   &lt;pre&gt;&lt;code&gt;sudo sh cuda_11.7.0_515.43.04_linux.run&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;1. 输入accept&lt;/p&gt; &#xA;   &lt;img src=&#34;https://i.328888.xyz/2023/03/31/iwVoeH.png&#34; width=&#34;500&#34; alt=&#34;&#34;&gt; &#xA;   &lt;p&gt;2. 选中CUDA Toolkit 11.7（如果你没有安装nvidia驱动则选中Driver，如果你已经安装了nvidia驱动请不要选中driver），之后选中install，回车&lt;/p&gt; &#xA;   &lt;img src=&#34;https://i.328888.xyz/2023/03/31/iwVThJ.png&#34; width=&#34;500&#34; alt=&#34;&#34;&gt; &#xA;   &lt;p&gt;3. 添加环境变量&lt;/p&gt; &#xA;   &lt;p&gt;在 ~/.bashrc 加入以下内容&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code&gt;# CUDA&#xA;export PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}&#xA;export LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;使其生效&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code&gt;source ~/.bashrc&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;h5&gt;(3) 下载cuDNN 8.4.1&lt;/h5&gt; &#xA;   &lt;p&gt;国内：&lt;a href=&#34;https://pan.baidu.com/s/1Gd_pSVzWfX1G7zCuqz6YYA&#34;&gt;cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz&lt;/a&gt; 提取码：57mg&lt;/p&gt; &#xA;   &lt;p&gt;国外：&lt;a href=&#34;https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz&#34;&gt;cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;h5&gt;(4) 安装cuDNN 8.4.1&lt;/h5&gt; &#xA;   &lt;pre&gt;&lt;code&gt; tar -xf cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz&#xA; mv cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive cuda&#xA; sudo cp ./cuda/include/* /usr/local/cuda-11.7/include/&#xA; sudo cp ./cuda/lib/* /usr/local/cuda-11.7/lib64/&#xA; sudo chmod a+r /usr/local/cuda-11.7/lib64/*&#xA; sudo chmod a+r /usr/local/cuda-11.7/include/*&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;Windows用户&lt;/summary&gt; &#xA;   &lt;h5&gt;(1) 下载CUDA 11.7&lt;/h5&gt; &#xA;   &lt;a href=&#34;https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_516.01_windows.exe&#34;&gt;cuda_11.7.0_516.01_windows.exe&lt;/a&gt; &#xA;   &lt;h5&gt;(2) 安装CUDA 11.7&lt;/h5&gt; &#xA;   &lt;h5&gt;(3) 下载cuDNN 8.2.4&lt;/h5&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-windows-x64-v8.2.4.15.zip&#34;&gt;cudnn-windows-x64-v8.2.4.15.zip&lt;/a&gt;&lt;/p&gt; &#xA;   &lt;h5&gt;(4) 安装cuDNN 8.2.4&lt;/h5&gt; &#xA;   &lt;p&gt; 将cuDNN解压后的cuda文件夹中的bin, include, lib目录下的文件复制到C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.7\对应目录下 &lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装GPU版本Paddlepaddle:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;windows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/windows/mkl/avx/stable.html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Linux:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python -m pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装GPU版本Pytorch:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;conda install pytorch==2.0.1 torchvision==0.16.0 pytorch-cuda=11.8 -c pytorch -c nvidia&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;或者使用&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install torch==2.0.1 torchvision==0.16.0 --index-url https://download.pytorch.org/whl/cu118&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装其他依赖:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4. 运行程序&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行图形化界面&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python gui.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行命令行版本(CLI)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python ./backend/main.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;提取速度慢怎么办&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;修改backend/config.py中的参数，可以大幅度提高去除速度&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MODE = InpaintMode.STTN  # 设置为STTN算法&#xA;STTN_SKIP_DETECTION = True # 跳过字幕检测，跳过后可能会导致要去除的字幕遗漏或者误伤不需要去除字幕的视频帧&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;视频去除效果不好怎么办&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;修改backend/config.py中的参数，尝试不同的去除算法，算法介绍&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;InpaintMode.STTN 算法：对于真人视频效果较好，速度快，可以跳过字幕检测&lt;/li&gt; &#xA;  &lt;li&gt;InpaintMode.LAMA 算法：对于图片效果最好，对动画类视频效果好，速度一般，不可以跳过字幕检测&lt;/li&gt; &#xA;  &lt;li&gt;InpaintMode.PROPAINTER 算法： 需要消耗大量显存，速度较慢，对运动非常剧烈的视频效果较好&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用STTN算法&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MODE = InpaintMode.STTN  # 设置为STTN算法&#xA;# 相邻帧数, 调大会增加显存占用，效果变好&#xA;STTN_NEIGHBOR_STRIDE = 10&#xA;# 参考帧长度, 调大会增加显存占用，效果变好&#xA;STTN_REFERENCE_LENGTH = 10&#xA;# 设置STTN算法最大同时处理的帧数量，设置越大速度越慢，但效果越好&#xA;# 要保证STTN_MAX_LOAD_NUM大于STTN_NEIGHBOR_STRIDE和STTN_REFERENCE_LENGTH&#xA;STTN_MAX_LOAD_NUM = 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;使用LAMA算法&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MODE = InpaintMode.LAMA  # 设置为STTN算法&#xA;LAMA_SUPER_FAST = False  # 保证效果&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果对模型去字幕的效果不满意，可以查看design文件夹里面的训练方法，利用backend/tools/train里面的代码进行训练，然后将训练的模型替换旧模型即可&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;CondaHTTPError&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;将项目中的.condarc放在用户目录下(C:/Users/&amp;lt;你的用户名&amp;gt;)，如果用户目录已经存在该文件则覆盖&lt;/p&gt; &#xA;&lt;p&gt;解决方案：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/260034241&#34;&gt;https://zhuanlan.zhihu.com/p/260034241&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;7z文件解压错误&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;解决方案：升级7-zip解压程序到最新版本&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;4090使用cuda 11.7跑不起来&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;解决方案：改用cuda 11.8&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install torch==2.1.0 torchvision==0.16.0 --index-url https://download.pytorch.org/whl/cu118&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;赞助&lt;/h2&gt; &#xA;&lt;img src=&#34;https://i.imgur.com/EMCP5Lv.jpeg&#34; width=&#34;600&#34;&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;捐赠者&lt;/th&gt; &#xA;   &lt;th&gt;累计捐赠金额&lt;/th&gt; &#xA;   &lt;th&gt;赞助席位&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;坤V&lt;/td&gt; &#xA;   &lt;td&gt;400.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;金牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jenkit&lt;/td&gt; &#xA;   &lt;td&gt;200.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;金牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;麦格&lt;/td&gt; &#xA;   &lt;td&gt;100.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;金牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;无痕&lt;/td&gt; &#xA;   &lt;td&gt;100.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;金牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wr&lt;/td&gt; &#xA;   &lt;td&gt;100.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;金牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;陈凯&lt;/td&gt; &#xA;   &lt;td&gt;50.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;银牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tshuang&lt;/td&gt; &#xA;   &lt;td&gt;20.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;银牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;很奇异&lt;/td&gt; &#xA;   &lt;td&gt;15.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;银牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;何斐&lt;/td&gt; &#xA;   &lt;td&gt;10.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;铜牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://lanmaoba.com&#34;&gt;老猫&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;8.80 RMB&lt;/td&gt; &#xA;   &lt;td&gt;铜牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;长缨在手&lt;/td&gt; &#xA;   &lt;td&gt;6.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;铜牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stephen&lt;/td&gt; &#xA;   &lt;td&gt;2.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;铜牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Leo&lt;/td&gt; &#xA;   &lt;td&gt;1.00 RMB&lt;/td&gt; &#xA;   &lt;td&gt;铜牌赞助席位&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>qilingframework/qiling</title>
    <updated>2024-04-06T01:36:20Z</updated>
    <id>tag:github.com,2024-04-06:/qilingframework/qiling</id>
    <link href="https://github.com/qilingframework/qiling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A True Instrumentable Binary Emulation Framework&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://docs.qiling.io&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/qilingframework/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/qiling&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/qiling&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/qilingframework&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat%20on-Telegram-brightgreen.svg?sanitize=true&#34; alt=&#34;Chat on Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://raw.githubusercontent.com/qilingframework/qiling/master/docs/qiling2_logo_small.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qilingframework/qiling/issues/134&#34;&gt;Qiling&#39;s usecase, blog and related work&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Qiling is an advanced binary emulation framework, with the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emulate multi-platforms: Windows, MacOS, Linux, Android, BSD, UEFI, DOS, MBR, Ethereum Virtual Machine&lt;/li&gt; &#xA; &lt;li&gt;Emulate multi-architectures: 8086, X86, X86_64, ARM, ARM64, MIPS, RISCV, PowerPC&lt;/li&gt; &#xA; &lt;li&gt;Support multiple file formats: PE, MachO, ELF, COM, MBR&lt;/li&gt; &#xA; &lt;li&gt;Support Windows Driver (.sys), Linux Kernel Module (.ko) &amp;amp; MacOS Kernel (.kext) via &lt;a href=&#34;https://groundx.io/demigod/&#34;&gt;Demigod&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Emulates &amp;amp; sandbox code in an isolated environment&lt;/li&gt; &#xA; &lt;li&gt;Provides a fully configurable sandbox&lt;/li&gt; &#xA; &lt;li&gt;Provides in-depth memory, register, OS level and filesystem level API&lt;/li&gt; &#xA; &lt;li&gt;Fine-grain instrumentation: allows hooks at various levels (instruction/basic-block/memory-access/exception/syscall/IO/etc)&lt;/li&gt; &#xA; &lt;li&gt;Provides virtual machine level API such as save and restore current execution state&lt;/li&gt; &#xA; &lt;li&gt;Supports cross architecture and platform debugging capabilities&lt;/li&gt; &#xA; &lt;li&gt;Built-in debugger with reverse debugging capability&lt;/li&gt; &#xA; &lt;li&gt;Allows dynamic hotpatch on-the-fly running code, including the loaded library&lt;/li&gt; &#xA; &lt;li&gt;True framework in Python, making it easy to build customized security analysis tools on top&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Qiling also made its way to various international conferences.&lt;/p&gt; &#xA;&lt;p&gt;2022:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/eu-22/arsenal/schedule/#reversing-mcu-with-firmware-emulation-29553&#34;&gt;Black Hat, EU&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blackhatmea.com/node/724&#34;&gt;Black Hat, MEA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2021:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/us-21/arsenal/schedule/index.html#bringing-the-x-complete-re-experience-to-smart-contract-24119&#34;&gt;Black Hat, USA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://conference.hitb.org/hitbsecconf2021ams/sessions/when-qiling-framework-meets-symbolic-execution/&#34;&gt;Hack In The Box, Amsterdam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/asia-21/arsenal/schedule/index.html#qiling-smart-analysis-for-smart-contract-22643&#34;&gt;Black Hat, Asia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2020:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/eu-20/arsenal/schedule/index.html#qiling-framework-deep-dive-into-obfuscated-binary-analysis-21781&#34;&gt;Black Hat, Europe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/us-20/arsenal/schedule/index.html#qiling-framework-from-dark-to-dawn-----enlightening-the-analysis-of-the-most-mysterious-iot-firmware--21062&#34;&gt;Black Hat, USA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/us-20/briefings/schedule/#demigod-the-art-of-emulating-kernel-rootkits-20009&#34;&gt;Black Hat, USA (Demigod)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/asia-20/arsenal/schedule/index.html#qiling-lightweight-advanced-binary-analyzer-19245&#34;&gt;Black Hat, Asia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://conference.hitb.org/lockdown-livestream/&#34;&gt;Hack In The Box, Lockdown 001&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://conference.hitb.org/hitb-lockdown002/virtual-labs/virtual-lab-qiling-framework-learn-how-to-build-a-fuzzer-based-on-a-1day-bug/&#34;&gt;Hack In The Box, Lockdown 002&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cyberweek.ae/2020/lab-qiling-framework/&#34;&gt;Hack In The Box, Cyberweek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nullcon.net/website/goa-2020/speakers/kaijern-lau.php&#34;&gt;Nullcon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2019:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.defcon.org/html/defcon-27/dc-27-demolabs.html#QiLing&#34;&gt;Defcon, USA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hitcon.org/2019/CMT/agenda&#34;&gt;Hitcon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zeronights.ru/report-en/qiling-io-advanced-binary-emulation-framework/&#34;&gt;Zeronights&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Qiling is backed by &lt;a href=&#34;http://www.unicorn-engine.org&#34;&gt;Unicorn engine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Visit our website &lt;a href=&#34;https://www.qiling.io&#34;&gt;https://www.qiling.io&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;p&gt;This project is released and distributed under &lt;a href=&#34;https://github.com/qilingframework/qiling/raw/master/COPYING&#34;&gt;free software license GPLv2&lt;/a&gt; and later version.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Qiling vs other Emulators&lt;/h4&gt; &#xA;&lt;p&gt;There are many open source emulators, but two projects closest to Qiling are &lt;a href=&#34;http://www.unicorn-engine.org&#34;&gt;Unicorn&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://qemu.org&#34;&gt;Qemu usermode&lt;/a&gt;. This section explains the main differences of Qiling against them.&lt;/p&gt; &#xA;&lt;h5&gt;Qiling vs Unicorn engine&lt;/h5&gt; &#xA;&lt;p&gt;Built on top of Unicorn, but Qiling &amp;amp; Unicorn are two different animals.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unicorn is just a CPU emulator, so it focuses on emulating CPU instructions, that can understand emulator memory. Beyond that, Unicorn is not aware of higher level concepts, such as dynamic libraries, system calls, I/O handling or executable formats like PE, MachO or ELF. As a result, Unicorn can only emulate raw machine instructions, without Operating System (OS) context&lt;/li&gt; &#xA; &lt;li&gt;Qiling is designed as a higher level framework, that leverages Unicorn to emulate CPU instructions, but can understand OS: it has executable format loaders (for PE, MachO &amp;amp; ELF at the moment), dynamic linkers (so we can load &amp;amp; relocate shared libraries), syscall &amp;amp; IO handlers. For this reason, Qiling can run executable binary without requiring its native OS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Qiling vs Qemu usermode&lt;/h5&gt; &#xA;&lt;p&gt;Qemu usermode does similar thing to our emulator, that is to emulate whole executable binaries in cross-architecture way. However, Qiling offers some important differences against Qemu usermode.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qiling is a true analysis framework, that allows you to build your own dynamic analysis tools on top (in friendly Python language). Meanwhile, Qemu is just a tool, not a framework&lt;/li&gt; &#xA; &lt;li&gt;Qiling can perform dynamic instrumentation, and can even hotpatch code at runtime. Qemu does not do either&lt;/li&gt; &#xA; &lt;li&gt;Not only working cross-architecture, Qiling is also cross-platform, so for example you can run Linux ELF file on top of Windows. In contrast, Qemu usermode only run binary of the same OS, such as Linux ELF on Linux, due to the way it forwards syscall from emulated code to native OS&lt;/li&gt; &#xA; &lt;li&gt;Qiling supports more platforms, including Windows, MacOS, Linux &amp;amp; BSD. Qemu usermode can only handle Linux &amp;amp; BSD&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://docs.qiling.io/en/latest/install/&#34;&gt;setup guide&lt;/a&gt; file for how to install Qiling Framework.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The example below shows how to use Qiling framework in the most striaghtforward way to emulate a Windows executable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qiling import Qiling&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    # initialize Qiling instance, specifying the executable to emulate and the emulated system root.&#xA;    # note that the current working directory is assumed to be Qiling home&#xA;    ql = Qiling([r&#39;examples/rootfs/x86_windows/bin/x86_hello.exe&#39;], r&#39;examples/rootfs/x86_windows&#39;)&#xA;&#xA;    # start emulation&#xA;    ql.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following example shows how a Windows crackme may be patched dynamically to make it always display the &#34;Congratulation&#34; dialog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qiling import Qiling&#xA;&#xA;def force_call_dialog_func(ql: Qiling):&#xA;    # get DialogFunc address from current stack frame&#xA;    lpDialogFunc = ql.stack_read(-8)&#xA;&#xA;    # setup stack memory for DialogFunc&#xA;    ql.stack_push(0)&#xA;    ql.stack_push(1001)     # IDS_APPNAME&#xA;    ql.stack_push(0x111)    # WM_COMMAND&#xA;    ql.stack_push(0)&#xA;&#xA;    # push return address&#xA;    ql.stack_push(0x0401018)&#xA;&#xA;    # resume emulation from DialogFunc address&#xA;    ql.arch.regs.eip = lpDialogFunc&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    # initialize Qiling instance&#xA;    ql = Qiling([r&#39;rootfs/x86_windows/bin/Easy_CrackMe.exe&#39;], r&#39;rootfs/x86_windows&#39;)&#xA;&#xA;    # NOP out some code&#xA;    ql.patch(0x004010B5, b&#39;\x90\x90&#39;)&#xA;    ql.patch(0x004010CD, b&#39;\x90\x90&#39;)&#xA;    ql.patch(0x0040110B, b&#39;\x90\x90&#39;)&#xA;    ql.patch(0x00401112, b&#39;\x90\x90&#39;)&#xA;&#xA;    # hook at an address with a callback&#xA;    ql.hook_address(force_call_dialog_func, 0x00401016)&#xA;    ql.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The below Youtube video shows how the above example works.&lt;/p&gt; &#xA;&lt;h4&gt;Emulating ARM router firmware on Ubuntu X64 machine&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qiling Framework hot-patch and emulates ARM router&#39;s /usr/bin/httpd on a X86_64Bit Ubuntu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=e3_T3KLh2NU&#34; title=&#34; Demo #3 Emulating and Fuzz ARM router firmware&#34;&gt;&lt;img src=&#34;https://github.com/qilingframework/theme.qiling.io/raw/master/source/img/fuzzer.jpg?raw=true&#34; alt=&#34;qiling Tutorial: Emulating and Fuzz ARM router firmware&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Qiling&#39;s IDAPro Plugin: Instrument and Decrypt Mirai&#39;s Secret&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This video demonstrate how Qiling&#39;s IDAPro plugin able to make IDApro run with Qiling instrumentation engine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=ZWMWTq2WTXk&#34; title=&#34;Qiling&#39;s IDAPro Plugin: Instrument and Decrypt Mirai&#39;s Secret&#34;&gt;&lt;img src=&#34;http://img.youtube.com/vi/ZWMWTq2WTXk/0.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GDBserver with IDAPro demo&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solving a simple CTF challenge with Qiling Framework and IDAPro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SPjVAt2FkKA&#34; title=&#34;Video DEMO 2&#34;&gt;&lt;img src=&#34;https://i.ytimg.com/vi/SPjVAt2FkKA/0.jpg&#34; alt=&#34;Solving a simple CTF challenge with Qiling Framework and IDAPro&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Emulating MBR&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qiling Framework emulates MBR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/qilingframework/theme.qiling.io/raw/master/source/img/mbr.png?raw=true&#34; title=&#34;Demo #4 Emulating UEFI&#34;&gt;&lt;img src=&#34;https://github.com/qilingframework/theme.qiling.io/raw/master/source/img/mbr.png?raw=true&#34; alt=&#34;qiling DEMO: Emulating MBR&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Qltool&lt;/h4&gt; &#xA;&lt;p&gt;Qiling also provides a friendly tool named &lt;code&gt;qltool&lt;/code&gt; to quickly emulate shellcode &amp;amp; executable binaries.&lt;/p&gt; &#xA;&lt;p&gt;With qltool, easy execution can be performed:&lt;/p&gt; &#xA;&lt;p&gt;With shellcode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./qltool code --os linux --arch arm --format hex -f examples/shellcodes/linarm32_tcp_reverse_shell.hex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With binary file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./qltool run -f examples/rootfs/x8664_linux/bin/x8664_hello --rootfs  examples/rootfs/x8664_linux/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With binary and GDB debugger enable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./qltool run -f examples/rootfs/x8664_linux/bin/x8664_hello --gdb 127.0.0.1:9999 --rootfs examples/rootfs/x8664_linux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With code coverage collection (UEFI only for now):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./qltool run -f examples/rootfs/x8664_efi/bin/TcgPlatformSetupPolicy --rootfs examples/rootfs/x8664_efi --coverage-format drcov --coverage-file TcgPlatformSetupPolicy.cov&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With json output (Windows mainly):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./qltool run -f examples/rootfs/x86_windows/bin/x86_hello.exe --rootfs  examples/rootfs/x86_windows/ --console False --json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Contact&lt;/h4&gt; &#xA;&lt;p&gt;Get the latest info from our website &lt;a href=&#34;https://www.qiling.io&#34;&gt;https://www.qiling.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Contact us at email &lt;a href=&#34;mailto:info@qiling.io&#34;&gt;info@qiling.io&lt;/a&gt;, or via Twitter &lt;a href=&#34;https://twitter.com/qiling_io&#34;&gt;@qiling_io&lt;/a&gt; or &lt;a href=&#34;https://www.weibo.com/sgniwx&#34;&gt;Weibo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Core developers, Key Contributors and etc&lt;/h4&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/qilingframework/qiling/raw/dev/CREDITS.md&#34;&gt;CREDITS.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zk-Call/zkp-hmac-communication-python</title>
    <updated>2024-04-06T01:36:20Z</updated>
    <id>tag:github.com,2024-04-06:/zk-Call/zkp-hmac-communication-python</id>
    <link href="https://github.com/zk-Call/zkp-hmac-communication-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;Zero-Knowledge&#34; Proof Implementation with HMAC Communication in Python&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/assets/Banner.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;zk-Call &amp;amp; Labs&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;strong&gt;&#34;Zero-Knowledge&#34; Proof Implementation with HMAC Communication in Python&lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;http://badges.github.io/stability-badges/dist/experimental.svg?sanitize=true&#34; alt=&#34;Experimental&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sub&gt; Built by &lt;a href=&#34;https://github.com/zk-Call&#34;&gt; zk-Call&lt;/a&gt; :) &lt;/sub&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/#purpose&#34;&gt;Purpose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/#how-it-works&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/#example-usage&#34;&gt;Example Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This repository hosts a refined implementation of &lt;strong&gt;Schnorr&#39;s protocol&lt;/strong&gt;, innovatively incorporating a state seed for enhanced security measures. While the underlying proofs may appear intricate, I aim to elucidate their functionality to the best of my ability. However, for a deeper understanding, I encourage referencing the seminal research papers underpinning this implementation, as they offer comprehensive insights.&lt;/p&gt; &#xA;&lt;p&gt;For further exploration:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/pdf/1107.1626.pdf&#34;&gt;Elliptic Curve Based &#34;Zero-Knowledge&#34; Proofs and Their Applicability on Resource Constrained Devices by Ioannis Chatzigiannakis, Apostolos Pyrgelis, Paul G. Spirakis, and Yannis C. Stamatiou&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, this repository delves into the concepts of &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt; and &lt;strong&gt;Hash-based Message Authentication Codes (HMACs)&lt;/strong&gt;. &lt;strong&gt;ZKPs&lt;/strong&gt; are cryptographic protocols that allow one party &lt;strong&gt;(the prover)&lt;/strong&gt; to prove to another party &lt;strong&gt;(the verifier)&lt;/strong&gt; that a given statement is true, without revealing any additional information beyond the validity of the statement itself. This property is particularly valuable for preserving privacy while establishing trust.&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, &lt;strong&gt;HMACs&lt;/strong&gt; are a type of cryptographic hash function used for message authentication. They involve a cryptographic hash function &lt;strong&gt;(such as SHA-256)&lt;/strong&gt; and a secret cryptographic key. &lt;strong&gt;HMACs&lt;/strong&gt; provide a way to verify both the data integrity and the authenticity of a message, ensuring that it has not been altered or tampered with during transmission and that it indeed originates from the purported sender.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;In today&#39;s rapidly evolving IT and application development landscape, &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt; emerge as a pivotal paradigm for authentication security. Their capacity to affirm the validity of a claim—such as proving possession of a secret password—without revealing any sensitive information about the claim itself, such as passwords or hashes, revolutionizes the assurance of secure AAA operations (authentication, authorization, and accounting). &lt;strong&gt;zk-Call &amp;amp; Labs&lt;/strong&gt; represents an implementation of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Non-interactive_zero-knowledge_proof&#34;&gt;&lt;strong&gt;Non-Interactive &#34;Zero-Knowledge&#34; Proof&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(NIZKP)&lt;/strong&gt; protocol tailored specifically for validating text-based secrets. This framework proves invaluable for safeguarding passwords and other authentication mechanisms, ensuring robust security measures without compromising privacy. Additionally, the integration of &lt;strong&gt;HMAC (Hash-Based Message Authentication Code)&lt;/strong&gt; further fortifies the authentication process, enhancing data integrity and thwarting potential security breaches.&lt;/p&gt; &#xA;&lt;h2&gt;How It Works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The authentication protocol employed in this system operates based on two fundamental concepts:&lt;/strong&gt; &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt; and &lt;strong&gt;Hash-Based Message Authentication Code (HMAC)&lt;/strong&gt;. Let&#39;s delve into each of these components and understand how they synergize to ensure secure authentication in messaging applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt; form the bedrock of privacy-preserving authentication mechanisms. These proofs allow one party &lt;strong&gt;(the prover)&lt;/strong&gt; to demonstrate the validity of a claim to another party &lt;strong&gt;(the verifier)&lt;/strong&gt; without revealing any additional information beyond the claim&#39;s validity. In essence, &lt;strong&gt;ZKPs&lt;/strong&gt; enable authentication without the need for the prover to disclose sensitive data, such as passwords or cryptographic keys.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Application in Authentication:&lt;/strong&gt; In the context of messaging applications, &lt;strong&gt;ZKPs&lt;/strong&gt; play a pivotal role in verifying a user&#39;s identity without the need to transmit explicit credentials over the network. Instead, users can generate cryptographic proofs attesting to their identity or possession of certain credentials without exposing those credentials themselves. This ensures that sensitive information remains confidential during the authentication process, bolstering security and privacy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hash-Based Message Authentication Code (HMAC):&lt;/strong&gt; &lt;strong&gt;HMAC&lt;/strong&gt; provides a robust mechanism for verifying the integrity and authenticity of messages exchanged between parties. It involves the use of a cryptographic hash function in conjunction with a secret key to generate a unique code &lt;strong&gt;(the HMAC)&lt;/strong&gt; for each message. This code serves as a digital signature, allowing the recipient to verify that the message has not been tampered with or altered during transmission.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Application in Authentication:&lt;/strong&gt; In messaging applications, &lt;strong&gt;HMAC&lt;/strong&gt; can be employed to authenticate message senders and ensure the integrity of communication channels. By appending an &lt;strong&gt;HMAC&lt;/strong&gt; to each message using a shared secret key, both the sender and recipient can validate the message&#39;s authenticity upon receipt. Any unauthorized modifications to the message would result in a mismatch between the &lt;strong&gt;computed HMAC&lt;/strong&gt; and the &lt;strong&gt;received HMAC&lt;/strong&gt;, thereby alerting the recipient to potential tampering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Synergistic Operation:&lt;/strong&gt; When combined, &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs&lt;/strong&gt; and &lt;strong&gt;HMAC&lt;/strong&gt; create a formidable framework for secure authentication in messaging applications. &lt;strong&gt;ZKPs&lt;/strong&gt; facilitate identity verification without divulging sensitive information, while &lt;strong&gt;HMAC&lt;/strong&gt; ensures the integrity and authenticity of messages exchanged between parties. Together, these mechanisms uphold the confidentiality, integrity, and authenticity of communication channels, safeguarding users&#39; privacy and security in the digital realm.&lt;/p&gt; &#xA;&lt;h1&gt;API&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;&#34;Zero-Knowledge&#34;&lt;/code&gt;&lt;/strong&gt; Python API is meant to be simple and intuitive:&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Core Components&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;Core Components&lt;/code&gt;&lt;/strong&gt; are key for establishing a secure and efficient framework for cryptographic protocols; streamlining the creation and validation of &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt;. They enhance anonymous, data-safe proof validations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/assets/Core%20Components.png&#34; alt=&#34;Detailed Schematic Overview of Core Components&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeParams:&lt;/h4&gt; &#xA;&lt;p&gt;The parameters used to initialize the &lt;strong&gt;&#34;Zero-Knowledge&#34;&lt;/strong&gt; crypto system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeParams(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Parameters used to construct a Zero-Knowledge Proof state using an curve and a random salt&#xA;    &#34;&#34;&#34;&#xA;    algorithm: str                    # Hashing algorithm name&#xA;    curve: str                  # Standard Elliptic Curve name to use&#xA;    s: int                      # Random salt for the state&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeSignature:&lt;/h4&gt; &#xA;&lt;p&gt;A crytographic &lt;strong&gt;&#34;Zero-Knowledge&#34;&lt;/strong&gt; signature that can be used to verify future messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeSignature(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Cryptographic public signature used to verify future messages&#xA;    &#34;&#34;&#34;&#xA;    params: ZeroKnowledgeParams       # Reference ZeroKnowledge Parameters&#xA;    signature: int              # The public key derived from your original secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeProof:&lt;/h4&gt; &#xA;&lt;p&gt;A cryptograpgic proof that can be verified against a signature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeProof(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Non-deterministic cryptographic Zero-Knowledge Proof that can be verified to ensure the&#xA;    private key used to create the proof is the same key used to generate the signature&#xA;    &#34;&#34;&#34;&#xA;    params: ZeroKnowledgeParams        # Reference ZeroKnowledge Parameters&#xA;    c: int                      # The hash of the signed data and random point, R&#xA;    m: int                      # The offset from the secret `r` (`R=r*g`) from c * Hash(secret)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeData&lt;/h4&gt; &#xA;&lt;p&gt;Wrapper that contains a proof and the necessary data to validate the proof against a signature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeData(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Wrapper to contain data and a signed proof using the data&#xA;    &#34;&#34;&#34;&#xA;    data: Union[str, bytes, int]&#xA;    proof: ZeroKnowledgeProof&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;ZeroKnowledge&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;ZeroKnowledge&lt;/code&gt;&lt;/strong&gt; class is the central component of &lt;strong&gt;&lt;code&gt;ZeroKnowledge&lt;/code&gt;&lt;/strong&gt; and its state (defined by &lt;strong&gt;&lt;code&gt;ZeroKnowledgeParams&lt;/code&gt;&lt;/strong&gt;) should be inherently known to both the Client (Prover) and Server (Verifier).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-python/main/assets/ZeroKnowledge.png&#34; alt=&#34;Comprehensive Visual Guide to ZeroKnowledge Framework&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Instance Methods&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;9%&#34;&gt;Method&lt;/th&gt; &#xA;   &lt;th width=&#34;46%&#34;&gt;Params&lt;/th&gt; &#xA;   &lt;th width=&#34;10%&#34;&gt;Role&lt;/th&gt; &#xA;   &lt;th width=&#34;35%&#34;&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;create_signature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;secret: Union[str, bytes]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prover&lt;/td&gt; &#xA;   &lt;td&gt;Create a cryptographic signature derived from the value &lt;code&gt;secret&lt;/code&gt; to be generated during initial registration and stored for subsequent challenge proofs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sign&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;secret: Union[str, bytes]&lt;/code&gt; &lt;br&gt; &lt;code&gt;data: Union[str, bytes, int]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prover&lt;/td&gt; &#xA;   &lt;td&gt;Create a &lt;code&gt;ZeroKnowledgeData&lt;/code&gt; object using the &lt;code&gt;secret&lt;/code&gt; and any additional data. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;challenge: Union[ZeroKnowledgeData, ZeroKnowledgeProof]&lt;/code&gt; &lt;br&gt; &lt;code&gt;signature: ZeroKnowledgeSignature&lt;/code&gt; &lt;br&gt; &lt;code&gt;data: Optional[Union[str, bytes, int]]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Verifier&lt;/td&gt; &#xA;   &lt;td&gt;Verify the user-provided &lt;code&gt;challenge&lt;/code&gt; against the stored &lt;code&gt;signature&lt;/code&gt; and randomly generated &lt;code&gt;token&lt;/code&gt; to verify the validity of the challenge.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Example Usage&lt;/h1&gt; &#xA;&lt;p&gt;TODO: Include &lt;strong&gt;&lt;code&gt;Example Usage&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example 1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;&#34;&#34;&#xA;Extremely simple example of hmac&#xA;&#34;&#34;&#34;&#xA;from queue import Queue&#xA;from threading import Thread&#xA;from src.Hmac.core import HmacClient&#xA;from src.SeedGeneration.core import SeedGenerator&#xA;&#xA;DEBUG = True&#xA;&#xA;&#xA;def print_msg(who: str, message: str) -&amp;gt; None:&#xA;    &#34;&#34;&#34;&#xA;    Function to print debug messages. Prints the message only if the DEBUG flag is set to True.&#xA;&#xA;    Args:&#xA;        who (str): Identifier of the message sender.&#xA;        message (str): Message to print.&#xA;    &#34;&#34;&#34;&#xA;    if DEBUG:&#xA;        print(f&#39;[{who}] {message}\n&#39;)&#xA;&#xA;&#xA;def client(client_socket: Queue, server_socket: Queue):&#xA;    &#34;&#34;&#34;&#xA;    Function representing the client logic.&#xA;&#xA;    Args:&#xA;        client_socket (Queue): Queue for data exchange between the client and server.&#xA;        server_socket (Queue): Queue for data exchange between the server and client.&#xA;    &#34;&#34;&#34;&#xA;    # Generating the main seed&#xA;    main_seed = SeedGenerator(phrase=&#34;job&#34;).generate()&#xA;&#xA;    # Creating an instance of HmacClient for encrypting messages&#xA;    obj = HmacClient(algorithm=&#34;sha256&#34;, secret=main_seed, symbol_count=1)&#xA;&#xA;    # Sending the main seed to the server&#xA;    server_socket.put(main_seed)&#xA;&#xA;    # Checking if the server has successfully received the seed&#xA;    if client_socket.get() == obj.encrypt_message(&#39;&#39;):&#xA;        # If successful, send a message to the server&#xA;        message = &#39;hello&#39;&#xA;        server_socket.put(obj.encrypt_message_by_chunks(message))&#xA;        print_msg(&#39;client&#39;, f&#39;client sent message {message}&#39;)&#xA;&#xA;        # Checking if the server has successfully decrypted the message&#xA;        if client_socket.get() == obj.encrypt_message(message):&#xA;            print_msg(&#39;client&#39;, &#39;server has decrypt message&#39;)&#xA;&#xA;&#xA;def server(server_socket: Queue, client_socket: Queue):&#xA;    &#34;&#34;&#34;&#xA;    Function representing the server logic.&#xA;&#xA;    Args:&#xA;        server_socket (Queue): Queue for data exchange between the server and client.&#xA;        client_socket (Queue): Queue for data exchange between the client and server.&#xA;    &#34;&#34;&#34;&#xA;    # Receiving the main seed from the client&#xA;    main_seed = server_socket.get()&#xA;&#xA;    # Creating an instance of HmacClient for encrypting messages&#xA;    obj = HmacClient(algorithm=&#34;sha256&#34;, secret=main_seed, symbol_count=1)&#xA;&#xA;    # Sending an empty message to the client as acknowledgment&#xA;    client_socket.put(obj.encrypt_message(&#39;&#39;))&#xA;&#xA;    # Receiving the encrypted message from the client&#xA;    msg = server_socket.get()&#xA;    print_msg(&#39;server&#39;, f&#39;msg encrypted {msg}&#39;)&#xA;&#xA;    # Decrypting the message&#xA;    msg_raw = obj.decrypt_message_by_chunks(msg)&#xA;    print_msg(&#39;server&#39;, f&#39;msg raw {msg_raw}&#39;)&#xA;&#xA;    # Sending the encrypted message back to the client&#xA;    client_socket.put(obj.encrypt_message(msg_raw))&#xA;&#xA;&#xA;def main():&#xA;    &#34;&#34;&#34;&#xA;    Main function to run the client and server threads.&#xA;    &#34;&#34;&#34;&#xA;    client_socket, server_socket = Queue(), Queue()&#xA;    threads = []&#xA;    threads.append(Thread(target=client, args=(client_socket, server_socket)))&#xA;    threads.append(Thread(target=server, args=(server_socket, client_socket)))&#xA;&#xA;    # Starting the threads&#xA;    for thread in threads:&#xA;        thread.start()&#xA;&#xA;    # Joining the threads to wait for their completion&#xA;    for thread in threads:&#xA;        thread.join()&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Example 2&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;&#34;&#34;&#xA;Extremely simple example of ZeroKnowledge&#xA;&#34;&#34;&#34;&#xA;from src.ZeroKnowledge.core import ZeroKnowledge&#xA;from src.ZeroKnowledge.models import ZeroKnowledgeSignature, ZeroKnowledgeData&#xA;from queue import Queue&#xA;from threading import Thread&#xA;&#xA;DEBUG = True&#xA;&#xA;&#xA;def print_msg(who: str, message: str) -&amp;gt; None:&#xA;    &#34;&#34;&#34;&#xA;    Function to print debug messages.&#xA;&#xA;    Args:&#xA;        who (str): Identifier of the message sender.&#xA;        message (str): Message to print.&#xA;    &#34;&#34;&#34;&#xA;    if DEBUG:&#xA;        print(f&#39;[{who}] {message}\n&#39;)&#xA;&#xA;&#xA;def client(client_socket: Queue, server_socket: Queue):&#xA;    &#34;&#34;&#34;&#xA;    Function representing the client logic.&#xA;&#xA;    Args:&#xA;        client_socket (Queue): Queue for data exchange between the client and server.&#xA;        server_socket (Queue): Queue for data exchange between the server and client.&#xA;    &#34;&#34;&#34;&#xA;    # Creating a ZeroKnowledge object for the client with specified curve and hash algorithm&#xA;    client_object = ZeroKnowledge.new(curve_name=&#34;secp256k1&#34;, hash_alg=&#34;sha3_256&#34;)&#xA;    idenity = &#39;John&#39;&#xA;&#xA;    # Creating a signature for the client identity&#xA;    signature = client_object.create_signature(idenity)&#xA;&#xA;    # Sending the signature to the server&#xA;    server_socket.put(signature.to_json())&#xA;    print_msg(&#39;client&#39;, f&#39;its signature {signature.to_json()}&#39;)&#xA;&#xA;    # Receiving token from the server&#xA;    token = client_socket.get()&#xA;    print_msg(&#39;client&#39;, f&#39;its token {token}&#39;)&#xA;&#xA;    # Generating proof using client identity and token&#xA;    proof = client_object.sign(idenity, token).to_json()&#xA;    print_msg(&#39;client&#39;, f&#39;proof {proof}&#39;)&#xA;&#xA;    # Sending proof to the server&#xA;    server_socket.put(proof)&#xA;&#xA;    # Receiving result from the server&#xA;    result = client_socket.get()&#xA;    print_msg(&#39;client&#39;, f&#34;{result}&#34;)&#xA;&#xA;&#xA;def server(server_socket: Queue, client_socket: Queue):&#xA;    &#34;&#34;&#34;&#xA;    Function representing the server logic.&#xA;&#xA;    Args:&#xA;        server_socket (Queue): Queue for data exchange between the server and client.&#xA;        client_socket (Queue): Queue for data exchange between the client and server.&#xA;    &#34;&#34;&#34;&#xA;    # Setting the server password&#xA;    server_password = &#34;SecretServerPassword&#34;&#xA;&#xA;    # Creating a ZeroKnowledge object for the server with specified curve and hash algorithm&#xA;    server_zk = ZeroKnowledge.new(curve_name=&#34;secp384r1&#34;, hash_alg=&#34;sha3_512&#34;)&#xA;&#xA;    # Creating a signature for the server password&#xA;    server_signature: ZeroKnowledgeSignature = server_zk.create_signature(server_password)&#xA;&#xA;    # Receiving client signature from the client&#xA;    sig = server_socket.get()&#xA;    client_signature = ZeroKnowledgeSignature.from_json(sig)&#xA;    print_msg(&#39;server&#39;, f&#39;its client signature {client_signature.to_json()}&#39;)&#xA;&#xA;    # Creating a ZeroKnowledge object for the client using client signature parameters&#xA;    client_zk = ZeroKnowledge(client_signature.params)&#xA;    print_msg(&#39;server&#39;, f&#39;its client_zk {client_zk}&#39;)&#xA;&#xA;    # Generating a token signed by the server for the client&#xA;    token = server_zk.sign(server_password, client_zk.token())&#xA;    print_msg(&#39;server&#39;, f&#39;its token {token}&#39;)&#xA;&#xA;    # Sending the token to the client&#xA;    client_socket.put(token.to_json())&#xA;&#xA;    # Receiving proof from the client&#xA;    proof = ZeroKnowledgeData.from_json(server_socket.get())&#xA;    print_msg(&#39;server&#39;, f&#39;its proof {proof}&#39;)&#xA;&#xA;    # Verifying the received proof&#xA;    token = ZeroKnowledgeData.from_json(proof.data)&#xA;    print_msg(&#39;server&#39;, f&#39;its token {token}&#39;)&#xA;    server_verif = server_zk.verify(token, server_signature)&#xA;    print_msg(&#39;server&#39;, f&#39;its server_verif {server_verif}&#39;)&#xA;&#xA;    # If server verification fails, notify the client&#xA;    if not server_verif:&#xA;        client_socket.put(False)&#xA;    else:&#xA;        # Otherwise, verify the proof using client signature&#xA;        client_verif = client_zk.verify(proof, client_signature, data=token)&#xA;        print_msg(&#39;server&#39;, f&#39;its client_verif {client_verif}&#39;)&#xA;        client_socket.put(client_verif)&#xA;&#xA;&#xA;def main():&#xA;    &#34;&#34;&#34;&#xA;    Main function to run the client and server threads.&#xA;    &#34;&#34;&#34;&#xA;    client_socket, server_socket = Queue(), Queue()&#xA;    threads = []&#xA;    threads.append(Thread(target=client, args=(client_socket, server_socket)))&#xA;    threads.append(Thread(target=server, args=(server_socket, client_socket)))&#xA;&#xA;    # Starting the threads&#xA;    for thread in threads:&#xA;        thread.start()&#xA;&#xA;    # Waiting for threads to finish execution&#xA;    for thread in threads:&#xA;        thread.join()&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Example 3&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;&#34;&#34;&#xA;Extremely simple example of ZeroKnowledge and hmac together&#xA;&#34;&#34;&#34;&#xA;from src.ZeroKnowledge.core import ZeroKnowledge&#xA;from src.ZeroKnowledge.models import ZeroKnowledgeSignature, ZeroKnowledgeData&#xA;from queue import Queue&#xA;from threading import Thread&#xA;from src.Hmac.core import HmacClient&#xA;from src.SeedGeneration.core import SeedGenerator&#xA;&#xA;DEBUG = True&#xA;&#xA;&#xA;def print_msg(who: str, message: str) -&amp;gt; None:&#xA;    if DEBUG:&#xA;        print(f&#39;[{who}] {message}\n&#39;)&#xA;&#xA;&#xA;def client(client_socket: Queue, server_socket: Queue):&#xA;    # Initializing a ZeroKnowledge object for the client with specified curve and hash algorithm&#xA;    client_object = ZeroKnowledge.new(curve_name=&#34;secp256k1&#34;, hash_alg=&#34;sha3_256&#34;)&#xA;&#xA;    # Generating a main seed for encryption&#xA;    main_seed = SeedGenerator(phrase=&#34;job&#34;).generate()&#xA;&#xA;    # Defining the client&#39;s identity&#xA;    idenity = &#39;John&#39;&#xA;&#xA;    # Creating a signature for the client&#39;s identity&#xA;    signature = client_object.create_signature(idenity)&#xA;&#xA;    # Sending the signature to the server via server_socket&#xA;    server_socket.put(signature.to_json())&#xA;    print_msg(&#39;client&#39;, f&#39;its signature {signature.to_json()}&#39;)&#xA;&#xA;    # Receiving a token from the server via client_socket&#xA;    token = client_socket.get()&#xA;    print_msg(&#39;client&#39;, f&#39;its token {token}&#39;)&#xA;&#xA;    # Generating a proof of identity using the client&#39;s identity and token&#xA;    proof = client_object.sign(idenity, token).to_json()&#xA;    print_msg(&#39;client&#39;, f&#39;proof {proof}&#39;)&#xA;&#xA;    # Sending the proof to the server via server_socket&#xA;    server_socket.put(proof)&#xA;&#xA;    # Receiving a result from the server via client_socket&#xA;    result = client_socket.get()&#xA;    print_msg(&#39;client&#39;, f&#34;{result}&#34;)&#xA;&#xA;    # If the result is True, proceed with further communication steps&#xA;    if result:&#xA;        # Sending the main seed to the server&#xA;        server_socket.put(main_seed)&#xA;&#xA;        # Initializing an HmacClient object for message encryption/decryption&#xA;        obj = HmacClient(algorithm=&#34;sha256&#34;, secret=main_seed, symbol_count=1)&#xA;&#xA;        # Verifying an empty message received from the server&#xA;        if client_socket.get() == obj.encrypt_message(&#39;&#39;):&#xA;            # Sending a message to the server&#xA;            message = &#39;hello&#39;&#xA;            server_socket.put(obj.encrypt_message_by_chunks(message))&#xA;            print_msg(&#39;client&#39;, f&#39;client sent message {message}&#39;)&#xA;&#xA;            # Verifying if the server has decrypted the message correctly&#xA;            if client_socket.get() == obj.encrypt_message(message):&#xA;                print_msg(&#39;client&#39;, &#39;server has decrypt message&#39;)&#xA;&#xA;&#xA;def server(server_socket: Queue, client_socket: Queue):&#xA;    # Defining the server&#39;s password&#xA;    server_password = &#34;SecretServerPassword&#34;&#xA;&#xA;    # Initializing a ZeroKnowledge object for the server with specified curve and hash algorithm&#xA;    server_zk = ZeroKnowledge.new(curve_name=&#34;secp384r1&#34;, hash_alg=&#34;sha3_512&#34;)&#xA;&#xA;    # Creating a signature for the server&#39;s password&#xA;    server_signature: ZeroKnowledgeSignature = server_zk.create_signature(server_password)&#xA;&#xA;    # Receiving the client&#39;s signature from the client via server_socket&#xA;    sig = server_socket.get()&#xA;    client_signature = ZeroKnowledgeSignature.from_json(sig)&#xA;    print_msg(&#39;server&#39;, f&#39;its client signature {client_signature.to_json()}&#39;)&#xA;&#xA;    # Initializing a ZeroKnowledge object for the client using client signature parameters&#xA;    client_zk = ZeroKnowledge(client_signature.params)&#xA;    print_msg(&#39;server&#39;, f&#39;its client_zk {client_zk}&#39;)&#xA;&#xA;    # Generating a token signed by the server for the client&#xA;    token = server_zk.sign(server_password, client_zk.token())&#xA;    print_msg(&#39;server&#39;, f&#39;its token {token}&#39;)&#xA;&#xA;    # Sending the token to the client via client_socket&#xA;    client_socket.put(token.to_json())&#xA;&#xA;    # Receiving a proof from the client via server_socket&#xA;    proof = ZeroKnowledgeData.from_json(server_socket.get())&#xA;    print_msg(&#39;server&#39;, f&#39;its proof {proof}&#39;)&#xA;&#xA;    # Verifying the received proof&#xA;    token = ZeroKnowledgeData.from_json(proof.data)&#xA;    print_msg(&#39;server&#39;, f&#39;its token {token}&#39;)&#xA;&#xA;    # Verifying the token and the server signature&#xA;    server_verif = server_zk.verify(token, server_signature)&#xA;    print_msg(&#39;server&#39;, f&#39;its server_verif {server_verif}&#39;)&#xA;&#xA;    # If server verification fails, notify the client&#xA;    if not server_verif:&#xA;        client_socket.put(False)&#xA;    else:&#xA;        # Otherwise, verify the proof using the client signature&#xA;        client_verif = client_zk.verify(proof, client_signature, data=token)&#xA;        print_msg(&#39;server&#39;, f&#39;its client_verif {client_verif}&#39;)&#xA;        client_socket.put(client_verif)&#xA;&#xA;        # Receiving the main seed from the client via server_socket&#xA;        main_seed = server_socket.get()&#xA;&#xA;        # Initializing an HmacClient object for message encryption/decryption using the received main seed&#xA;        obj = HmacClient(algorithm=&#34;sha256&#34;, secret=main_seed, symbol_count=1)&#xA;&#xA;        # Sending an empty message to the client&#xA;        client_socket.put(obj.encrypt_message(&#39;&#39;))&#xA;&#xA;        # Receiving an encrypted message from the client via server_socket&#xA;        msg = server_socket.get()&#xA;        print_msg(&#39;server&#39;, f&#39;msg encrypted {msg}&#39;)&#xA;&#xA;        # Decrypting the message&#xA;        msg_raw = obj.decrypt_message_by_chunks(msg)&#xA;        print_msg(&#39;server&#39;, f&#39;msg raw {msg_raw}&#39;)&#xA;&#xA;        # Sending the decrypted message back to the client&#xA;        client_socket.put(obj.encrypt_message(msg_raw))&#xA;&#xA;&#xA;def main():&#xA;    &#34;&#34;&#34;&#xA;    Main function to run the client and server threads.&#xA;    &#34;&#34;&#34;&#xA;    client_socket, server_socket = Queue(), Queue()&#xA;    threads = []&#xA;    threads.append(Thread(target=client, args=(client_socket, server_socket)))&#xA;    threads.append(Thread(target=server, args=(server_socket, client_socket)))&#xA;&#xA;    # Starting the threads&#xA;    for thread in threads:&#xA;        thread.start()&#xA;&#xA;    # Joining the threads to wait for their completion&#xA;    for thread in threads:&#xA;        thread.join()&#xA;&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    main()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>