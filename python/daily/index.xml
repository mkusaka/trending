<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-09T01:31:00Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yihong0618/Kindle_download_helper</title>
    <updated>2022-06-09T01:31:00Z</updated>
    <id>tag:github.com,2022-06-09:/yihong0618/Kindle_download_helper</id>
    <link href="https://github.com/yihong0618/Kindle_download_helper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Download all your kindle books script.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kindle_download_helper&lt;/h1&gt; &#xA;&lt;p&gt;Download all your kindle books script.&lt;/p&gt; &#xA;&lt;img width=&#34;1661&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/15976103/172113700-7be0ae1f-1aae-4b50-8377-13047c63411b.png&#34;&gt; &#xA;&lt;h2&gt;下载二进制文件&lt;/h2&gt; &#xA;&lt;p&gt;到 &lt;a href=&#34;https://github.com/yihong0618/Kindle_download_helper/releases&#34;&gt;Release&lt;/a&gt; 页面查看最新版本，获取对应系统的二进制文件下载解压即可。&lt;/p&gt; &#xA;&lt;p&gt;若打开二进制遇到问题，请参考&lt;a href=&#34;https://github.com/yihong0618/Kindle_download_helper/issues/25&#34;&gt;这个 issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用命令行&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;python3&lt;/li&gt; &#xA; &lt;li&gt;安装依赖&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用 &lt;code&gt;amazon CN&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;登陆 amazon.cn&lt;/li&gt; &#xA; &lt;li&gt;访问 &lt;a href=&#34;https://www.amazon.cn/hz/mycd/myx#/home/content/booksAll/dateDsc/&#34;&gt;https://www.amazon.cn/hz/mycd/myx#/home/content/booksAll/dateDsc/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;右键查看源码，搜索 &lt;code&gt;csrfToken&lt;/code&gt; 复制后面的 value&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;code&gt;python3 kindle.py ${csrfToken} --cn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果下载推送文件 &lt;code&gt;python3 kindle.py ${csrfToken} --cn --pdoc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;how to &lt;code&gt;amazon.com&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;login amazon.com&lt;/li&gt; &#xA; &lt;li&gt;visit &lt;a href=&#34;https://www.amazon.com/hz/mycd/myx#/home/content/booksAll/dateDsc/&#34;&gt;https://www.amazon.com/hz/mycd/myx#/home/content/booksAll/dateDsc/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;right click this page source then find &lt;code&gt;csrfToken&lt;/code&gt; value copy&lt;/li&gt; &#xA; &lt;li&gt;run: &lt;code&gt;python3 kindle.py ${csrfToken}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;if is doc file &lt;code&gt;python3 kindle.py ${csrfToken} --pdoc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;自动获取 cookie&lt;/h2&gt; &#xA;&lt;p&gt;如果你的运行环境是本机，项目可以使用 browsercookie 库自动从浏览器中获取 cookie。如果获取有问题，可以参考下面手动输入 cookie。&lt;/p&gt; &#xA;&lt;h2&gt;手动输入 cookie&lt;/h2&gt; &#xA;&lt;p&gt;若默认情况下提示 cookie 无效，你也可以手动输入 cookie 。方法是在上述全部书籍列表页面，按 &lt;kbd&gt;F12&lt;/kbd&gt; 或右键点击——检查，进入网络面板(Network)，找到任意一个 &lt;code&gt;ajax&lt;/code&gt; 请求，复制请求头里的 Cookie 即可。同时也能在 Payload 里找到 csrfToken。&lt;/p&gt; &#xA;&lt;p&gt;然后，执行 &lt;code&gt;python3 kindle.py --cookie ${cookie} ${csrfToken}&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;你也可以把 cookie 保存为文本文件，执行 &lt;code&gt;python3 kindle.py --cookie-file ${cookie_file} ${csrfToken}&lt;/code&gt; 下载书籍。&lt;/p&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cookie 和 csrf token 会过期，重新刷新下 amazon 的页面就行&lt;/li&gt; &#xA; &lt;li&gt;程序会自动在命令执行的目录下创建 &lt;code&gt;DOWNLOADS&lt;/code&gt; 目录，书会下载在 &lt;code&gt;DOWNLOADS&lt;/code&gt; 里&lt;/li&gt; &#xA; &lt;li&gt;如果你用 &lt;a href=&#34;https://github.com/apprenticeharper/DeDRM_tools&#34;&gt;DeDRM_tools&lt;/a&gt; 解密 key 存在 key.txt 里&lt;/li&gt; &#xA; &lt;li&gt;或者直接拖进 Calibre 里 please google it.&lt;/li&gt; &#xA; &lt;li&gt;如果过程中失败了可以使用 e.g. &lt;code&gt;--resume-from ${num}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;如果出现名字太长的报错可以增加: &lt;code&gt;--cut-length 80&lt;/code&gt; 来截断文件名&lt;/li&gt; &#xA; &lt;li&gt;支持推送文件下载 &lt;code&gt;--pdoc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;1045&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/15976103/172113475-92862b57-bb39-4cd7-84d5-6bc428172bc4.png&#34;&gt; &#xA;&lt;h2&gt;Enjoy&lt;/h2&gt; &#xA;&lt;h2&gt;赞赏&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;谢谢就够啦&lt;/li&gt; &#xA; &lt;li&gt;分享给需要的人就更好了&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>dortania/OpenCore-Legacy-Patcher</title>
    <updated>2022-06-09T01:31:00Z</updated>
    <id>tag:github.com,2022-06-09:/dortania/OpenCore-Legacy-Patcher</id>
    <link href="https://github.com/dortania/OpenCore-Legacy-Patcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experience macOS just like before&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/dortania/OpenCore-Legacy-Patcher/main/images/OC-Patcher.png&#34; alt=&#34;OpenCore Patcher Logo&#34; width=&#34;256&#34;&gt; &#xA; &lt;h1&gt;OpenCore Legacy Patcher&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;A Python-based project revolving around &lt;a href=&#34;https://github.com/acidanthera/OpenCorePkg&#34;&gt;Acidanthera&#39;s OpenCorePkg&lt;/a&gt; and &lt;a href=&#34;https://github.com/acidanthera/Lilu&#34;&gt;Lilu&lt;/a&gt; for both running and unlocking features in macOS on supported and unsupported Macs.&lt;/p&gt; &#xA;&lt;p&gt;Our project&#39;s main goal is to breath new life to Macs no longer supported by Apple, allowing for the installation and usage of macOS Big Sur and newer on machines as old as 2007.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/dortania/OpenCore-Legacy-Patcher/total?color=white&amp;amp;style=plastic&#34; alt=&#34;GitHub all releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/dortania/OpenCore-Legacy-Patcher?color=4B8BBE&amp;amp;style=plastic&#34; alt=&#34;GitHub top language&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/417165963327176704?color=7289da&amp;amp;label=discord&amp;amp;style=plastic&#34; alt=&#34;Discord&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Noteworthy features of OpenCore Legacy Patcher:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for macOS Big Sur and Monterey&lt;/li&gt; &#xA; &lt;li&gt;Native Over the Air(OTA) System Updates&lt;/li&gt; &#xA; &lt;li&gt;Supports Penryn and newer Macs&lt;/li&gt; &#xA; &lt;li&gt;Full support for WPA Wifi and Personal Hotspot on BCM943224 and newer chipsets&lt;/li&gt; &#xA; &lt;li&gt;System Integrity Protection, FileVault 2, .im4m Secure Boot and Vaulting&lt;/li&gt; &#xA; &lt;li&gt;Recovery OS, Safe Mode and Single-user Mode booting on non-native OSes&lt;/li&gt; &#xA; &lt;li&gt;Unlocks features such as Sidecar and AirPlay to Mac even on native Macs&lt;/li&gt; &#xA; &lt;li&gt;Enable enhanced SATA and NVMe power management on non-stock hardware&lt;/li&gt; &#xA; &lt;li&gt;Zero firmware patching required (ie. APFS ROM patching)&lt;/li&gt; &#xA; &lt;li&gt;Graphics acceleration for both Metal and non-Metal GPUs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Note: Only clean-installs and upgrades are supported, macOS Big Sur installs already patched with other patchers, such as &lt;a href=&#34;https://github.com/BenSova/Patched-Sur&#34;&gt;Patched Sur&lt;/a&gt; or &lt;a href=&#34;https://github.com/StarPlayrX/bigmac&#34;&gt;bigmac&lt;/a&gt;, cannot be used due to broken file integrity with APFS snapshots and SIP.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can however reinstall macOS with this patcher and retain your original data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note 2: Currently OpenCore Legacy Patcher officially supports patching to run macOS Big Sur and Monterey installs. For older OSes, OpenCore may function however support is currently not provided from Dortania.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For macOS Mojave and Catalina support, we recommend the use of &lt;a href=&#34;http://dosdude1.com&#34;&gt;dosdude1&#39;s patchers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To start using the project, please see our in-depth guide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dortania.github.io/OpenCore-Legacy-Patcher/&#34;&gt;OpenCore Legacy Patcher Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To get aid with the patcher, we recommend joining the &lt;a href=&#34;https://discord.gg/rqdPgH8xSN&#34;&gt;OpenCore Patcher Paradise Discord Server&lt;/a&gt;. We&#39;re actively there and is the quickest way to receive help.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please review our docs on &lt;a href=&#34;https://dortania.github.io/OpenCore-Legacy-Patcher/DEBUG.html&#34;&gt;how to debug with OpenCore&lt;/a&gt; to gather important information to help others with troubleshooting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running from source&lt;/h2&gt; &#xA;&lt;p&gt;To run the project from source, see here: &lt;a href=&#34;https://raw.githubusercontent.com/dortania/OpenCore-Legacy-Patcher/main/SOURCE.md&#34;&gt;Build and run from source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Acidanthera&#34;&gt;Acidanthera&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;OpenCorePkg as well as many of the core kexts and tools&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DhinakG&#34;&gt;DhinakG&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Main co-author&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Khronokernel&#34;&gt;Khronokernel&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Main co-author&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ausdauersportler&#34;&gt;Ausdauersportler&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iMacs Metal GPUs Upgrade Patch set and documentation&lt;/li&gt; &#xA;   &lt;li&gt;Great amounts of help debugging and code suggestions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vit9696&#34;&gt;vit9696&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Endless amount of help troubleshooting, determining fixes and writing patches&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ASentientBot&#34;&gt;ASentientBot&lt;/a&gt;, &lt;a href=&#34;https://github.com/educovas&#34;&gt;EduCovas&lt;/a&gt; and &lt;a href=&#34;https://github.com/moosethegoose2213&#34;&gt;ASentientHedgehog&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Legacy Acceleration Patch set and documentation, &lt;a href=&#34;https://github.com/moraea&#34;&gt;Moraea Organization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cdf&#34;&gt;cdf&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mac Pro on OpenCore Patch set and documentation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/cdf/Innie&#34;&gt;Innie&lt;/a&gt; and &lt;a href=&#34;https://github.com/cdf/NightShiftEnabler&#34;&gt;NightShiftEnabler&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forums.macrumors.com/members/syncretic.1173816/&#34;&gt;Syncretic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forums.macrumors.com/threads/mp3-1-others-sse-4-2-emulation-to-enable-amd-metal-driver.2206682/&#34;&gt;AAAMouSSE&lt;/a&gt;, &lt;a href=&#34;https://forums.macrumors.com/threads/mp3-1-others-sse-4-2-emulation-to-enable-amd-metal-driver.2206682/post-28447707&#34;&gt;telemetrap&lt;/a&gt; and &lt;a href=&#34;https://github.com/reenigneorcim/SurPlus&#34;&gt;SurPlus&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dosdude1&#34;&gt;dosdude1&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Main author of &lt;a href=&#34;https://github.com/dortania/OCLP-GUI&#34;&gt;original GUI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Development of previous patchers, laying out much of what needs to be patched&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/parrotgeek1&#34;&gt;parrotgeek1&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dortania/OpenCore-Legacy-Patcher/raw/4a8f61a01da72b38a4b2250386cc4b497a31a839/payloads/Config/config.plist#L1222-L1281&#34;&gt;VMM Patch Set&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BarryKN&#34;&gt;BarryKN&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Development of previous patchers, laying out much of what needs to be patched&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mariobrostech&#34;&gt;mario_bros_tech&lt;/a&gt; and the rest of the Unsupported Mac Discord &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Catalyst that started OpenCore Legacy Patcher&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arter97/&#34;&gt;arter97&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/arter97/SimpleMSR/&#34;&gt;SimpleMSR&lt;/a&gt; to disable firmware throttling in Nehalem+ MacBooks without batteries&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mrmacintosh.com&#34;&gt;Mr.Macintosh&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Endless hours helping architect and troubleshoot many portions of the project&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flagersgit&#34;&gt;flagers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Aid with Nvidia Web Driver research and development&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MacRumors and Unsupported Mac Communities &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Endless testing, reporting issues&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Apple &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for macOS and many of the kexts, frameworks and other binaries we reimplemented into newer OSes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jina-ai/jina</title>
    <updated>2022-06-09T01:31:00Z</updated>
    <id>tag:github.com,2022-06-09:/jina-ai/jina</id>
    <link href="https://github.com/jina-ai/jina" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build cross-modal and multi-modal applications on the cloud&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://docs.jina.ai&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/docs/_static/logo-light.svg?raw=true&#34; alt=&#34;Jina logo: Build cross-modal and multi-modal applications on the cloud&#34; width=&#34;150px&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Build cross-modal and multi-modal applications on the cloud&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jina-ai/jina/actions/workflows/cd.yml&#34;&gt;&lt;img alt=&#34;Github CD status&#34; src=&#34;https://github.com/jina-ai/jina/actions/workflows/cd.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/jina/&#34;&gt;&lt;img alt=&#34;PyPI&#34; src=&#34;https://img.shields.io/pypi/v/jina?label=PyPI&amp;amp;logo=pypi&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/jina-ai/jina&#34;&gt;&lt;img alt=&#34;Codecov branch&#34; src=&#34;https://img.shields.io/codecov/c/github/jina-ai/jina/master?logo=Codecov&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.jina.ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-3.0k-blueviolet?logo=slack&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- start jina-description --&gt; &#xA;&lt;p&gt;Jina is a framework that empowers anyone to build cross-modal and multi-modal&lt;sup&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jina-ai/jina/master/#example-application&#34;&gt;[*]&lt;/a&gt;&lt;/sup&gt; applications on the cloud. It uplifts a PoC into a production-ready service. Jina handles the infrastructure complexity, making advanced solution engineering and cloud-native technologies accessible to every developer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;&lt;sup&gt;&lt;a id=&#34;example-application&#34;&gt;[*]&lt;/a&gt; Example cross-modal application: &lt;a href=&#34;https://github.com/jina-ai/dalle-flow/&#34;&gt;DALL·E Flow&lt;/a&gt;; example multi-modal services: &lt;a href=&#34;https://github.com/jina-ai/clip-as-service/&#34;&gt;CLIP-as-service&lt;/a&gt;, &lt;a href=&#34;https://github.com/jina-ai/now/&#34;&gt;Jina Now&lt;/a&gt;.&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Applications built with Jina enjoy the following features out-of-the-box:&lt;/p&gt; &#xA;&lt;p&gt;🌌 &lt;strong&gt;Universal&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build applications that deliver fresh insights from multiple data types such as text, image, audio, video, 3D mesh, PDF with &lt;a href=&#34;https://docarray.jina.ai&#34;&gt;Jina AI&#39;s DocArray&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support all mainstream deep learning frameworks.&lt;/li&gt; &#xA; &lt;li&gt;Polyglot gateway that supports gRPC, Websockets, HTTP, GraphQL protocols with TLS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;⚡ &lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intuitive design pattern for high-performance microservices.&lt;/li&gt; &#xA; &lt;li&gt;Scaling at ease: set replicas, sharding in one line.&lt;/li&gt; &#xA; &lt;li&gt;Duplex streaming between client and server.&lt;/li&gt; &#xA; &lt;li&gt;Async and non-blocking data processing over dynamic flows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;☁️ &lt;strong&gt;Cloud-native&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Seamless Docker container integration: sharing, exploring, sandboxing, versioning and dependency control via &lt;a href=&#34;https://hub.jina.ai&#34;&gt;Jina Hub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fast deployment to Kubernetes, Docker Compose and Jina Cloud.&lt;/li&gt; &#xA; &lt;li&gt;Full observability via Prometheus and Grafana.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🍱 &lt;strong&gt;Ecosystem&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved engineering efficiency thanks to the Jina AI ecosystem, so you can focus on innovating with the data applications you build.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jina-ai/jina/master/#&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/core-tree-graph.svg?raw=true&#34; alt=&#34;Jina in Jina AI neural search ecosystem&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- end jina-description --&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://docs.jina.ai&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install jina&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.jina.ai/get-started/install/&#34;&gt;More install options can be found in the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Concepts&lt;/h3&gt; &#xA;&lt;p&gt;Document, Executor and Flow are three fundamental concepts in Jina.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docarray.jina.ai/&#34;&gt;&lt;strong&gt;Document&lt;/strong&gt;&lt;/a&gt; is the fundamental data structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.jina.ai/fundamentals/executor/&#34;&gt;&lt;strong&gt;Executor&lt;/strong&gt;&lt;/a&gt; is a Python class with functions that use Documents as IO.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.jina.ai/fundamentals/flow/&#34;&gt;&lt;strong&gt;Flow&lt;/strong&gt;&lt;/a&gt; ties Executors together into a pipeline and exposes it with an API gateway.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.jina.ai/fundamentals/architecture-overview/&#34;&gt;The full glossary is explained here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.jina.ai&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/no-complexity-banner.png?raw=true&#34; alt=&#34;Jina: No Infrastructure Complexity, High Engineering Efficiency&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Hello world example&lt;/h3&gt; &#xA;&lt;p&gt;Leveraging these three concepts, let&#39;s look at a simple example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jina import DocumentArray, Executor, Flow, requests&#xA;&#xA;&#xA;class MyExec(Executor):&#xA;    @requests&#xA;    async def add_text(self, docs: DocumentArray, **kwargs):&#xA;        for d in docs:&#xA;            d.text += &#39;hello, world!&#39;&#xA;&#xA;&#xA;f = Flow().add(uses=MyExec).add(uses=MyExec)&#xA;&#xA;with f:&#xA;    r = f.post(&#39;/&#39;, DocumentArray.empty(2))&#xA;    print(r.texts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first line imports three concepts we just introduced;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MyExec&lt;/code&gt; defines an async function &lt;code&gt;add_text&lt;/code&gt; that receives &lt;code&gt;DocumentArray&lt;/code&gt; from network requests and appends &lt;code&gt;&#34;hello, world&#34;&lt;/code&gt; to &lt;code&gt;.text&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;f&lt;/code&gt; defines a Flow streamlined two Executors in a chain;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;with&lt;/code&gt; block opens the Flow, sends an empty DocumentArray to the Flow, and prints the result.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Running it gives you:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jina-ai/jina/master/#&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/run-hello-world.gif?raw=true&#34; alt=&#34;Running a simple hello-world program&#34; width=&#34;70%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;At the last line we see its output &lt;code&gt;[&#39;hello, world!hello, world!&#39;, &#39;hello, world!hello, world!&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While one could use standard Python with the same number of lines and get the same output, Jina accelerates time to market of your application by making it more scalable and cloud-native. Jina also handles the infrastructure complexity in production and other Day-2 operations so that you can focus on the data application itself.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.jina.ai&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/scalability-banner.png?raw=true&#34; alt=&#34;Jina: Scalability and concurrency at ease&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Scalability and concurrency at ease&lt;/h3&gt; &#xA;&lt;p&gt;The example above can be refactored into a Python Executor file and a Flow YAML file:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; &lt;code&gt;toy.yml&lt;/code&gt; &lt;/th&gt; &#xA;   &lt;th&gt; executor.py &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jtype: Flow&#xA;with:&#xA;  port: 51000&#xA;  protocol: grpc&#xA;executors:&#xA;- uses: MyExec&#xA;  name: foo&#xA;  py_modules:&#xA;    - executor.py&#xA;- uses: MyExec&#xA;  name: bar&#xA;  py_modules:&#xA;    - executor.py&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jina import DocumentArray, Executor, requests&#xA;&#xA;&#xA;class MyExec(Executor):&#xA;    @requests&#xA;    async def add_text(self, docs: DocumentArray, **kwargs):&#xA;        for d in docs:&#xA;            d.text += &#39;hello, world!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Run the following command in the terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jina flow --uses toy.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jina-ai/jina/master/#&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/flow-block.png?raw=true&#34; alt=&#34;Running a simple hello-world program&#34; width=&#34;50%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;The server is successfully started, and you can now use a client to query it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jina import Client, Document&#xA;&#xA;c = Client(host=&#39;grpc://0.0.0.0:51000&#39;)&#xA;c.post(&#39;/&#39;, Document())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simple refactoring allows developers to write an application in the client-server style. The separation of Flow YAML and Executor Python file does not only make the project more maintainable but also brings scalability and concurrency to the next level:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The data flow on the server is non-blocking and async. New request is handled immediately when an Executor is free, regardless if previous request is still being processed.&lt;/li&gt; &#xA; &lt;li&gt;Scalability can be easily achieved by the keywords &lt;code&gt;replicas&lt;/code&gt; and &lt;code&gt;needs&lt;/code&gt; in YAML/Python. Load-balancing is automatically added when necessary to ensure the maximum throughput.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; &lt;code&gt;toy.yml&lt;/code&gt; &lt;/th&gt; &#xA;   &lt;th&gt; Flowchart &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jtype: Flow&#xA;with:&#xA;  port: 51000&#xA;  protocol: grpc&#xA;executors:&#xA;- uses: MyExec&#xA;  name: foo&#xA;  py_modules:&#xA;    - executor.py&#xA;  replicas: 2&#xA;- uses: MyExec&#xA;  name: bar&#xA;  py_modules:&#xA;    - executor.py&#xA;  replicas: 3&#xA;  needs: gateway&#xA;- needs: [foo, bar]&#xA;  name: baz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jina-ai/jina/master/#&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/scale-flow.svg?raw=true&#34; alt=&#34;Running a simple hello-world program&#34; width=&#34;70%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You now have an API gateway that supports gRPC (default), Websockets, and HTTP protocols with TLS.&lt;/li&gt; &#xA; &lt;li&gt;The communication between clients and the API gateway is duplex.&lt;/li&gt; &#xA; &lt;li&gt;The API gateway allows you to route request to a specific Executor while other parts of the Flow are still busy, via &lt;code&gt;.post(..., target_executor=...)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.jina.ai&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/container-banner.png?raw=true&#34; alt=&#34;Jina: Seamless Container Integration&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Seamless Container integration&lt;/h3&gt; &#xA;&lt;p&gt;Without having to worry about dependencies, you can easily share your Executors with others; or use public/private Executors in your project thanks to &lt;a href=&#34;https://hub.jina.ai&#34;&gt;Jina Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To create an Executor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jina hub new &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To push it to Jina Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jina hub push .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a Hub Executor in your Flow:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Docker container&lt;/th&gt; &#xA;   &lt;th&gt;Sandbox&lt;/th&gt; &#xA;   &lt;th&gt;Source&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uses: jinahub+docker://MyExecutor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uses: jinahub+sandbox://MyExecutor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uses: jinahub://MyExecutor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.add(uses=&#39;jinahub+docker://MyExecutor&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.add(uses=&#39;jinahub+sandbox://MyExecutor&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.add(uses=&#39;jinahub://MyExecutor&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Behind this smooth experience is advanced management of Executors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automated builds on the cloud&lt;/li&gt; &#xA; &lt;li&gt;Store, deploy, and deliver Executors cost-efficiently;&lt;/li&gt; &#xA; &lt;li&gt;Automatically resolve version conflicts and dependencies;&lt;/li&gt; &#xA; &lt;li&gt;Instant delivery of any Executor via Sandbox without pulling anything to local.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.jina.ai&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/cloud-native-banner.png?raw=true&#34; alt=&#34;Jina: Seamless Container Integration&#34; width=&#34;100%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Fast-lane to cloud-native&lt;/h3&gt; &#xA;&lt;p&gt;Using Kubernetes becomes easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jina export kubernetes flow.yml ./my-k8s&#xA;kubectl apply -R -f my-k8s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Docker Compose becomes easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jina export docker-compose flow.yml docker-compose.yml&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Prometheus becomes easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jina import Executor, requests, DocumentArray&#xA;&#xA;&#xA;class MyExec(Executor):&#xA;    @requests&#xA;    def encode(self, docs: DocumentArray, **kwargs):&#xA;        with self.monitor(&#39;preprocessing_seconds&#39;, &#39;Time preprocessing the requests&#39;):&#xA;            docs.tensors = preprocessing(docs)&#xA;        with self.monitor(&#xA;            &#39;model_inference_seconds&#39;, &#39;Time doing inference the requests&#39;&#xA;        ):&#xA;            docs.embedding = model_inference(docs.tensors)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using Grafana becomes easy, just &lt;a href=&#34;https://github.com/jina-ai/example-grafana-prometheus/raw/main/grafana-dashboards/flow.json&#34;&gt;download this JSON&lt;/a&gt; and import it into Grafana:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.jina.ai&#34;&gt;&lt;img src=&#34;https://github.com/jina-ai/jina/raw/master/.github/readme/grafana.png?raw=true&#34; alt=&#34;Jina: Seamless Container Integration&#34; width=&#34;70%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;What cloud-native technology is still challenging to you? &lt;a href=&#34;https://github.com/jina-ai/jina/issues&#34;&gt;Tell us&lt;/a&gt;, we will handle the complexity and make it easy for you.&lt;/p&gt; &#xA;&lt;!-- start support-pitch --&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://slack.jina.ai&#34;&gt;Slack community&lt;/a&gt; and chat with other community members about ideas.&lt;/li&gt; &#xA; &lt;li&gt;Join our &lt;a href=&#34;https://youtube.com/playlist?list=PL3UBBWOUVhFYRUa_gpYYKBqEAkO4sxmne&#34;&gt;Engineering All Hands&lt;/a&gt; meet-up to discuss your use case and learn Jina&#39;s new features. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;When?&lt;/strong&gt; The second Tuesday of every month&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Where?&lt;/strong&gt; Zoom (&lt;a href=&#34;https://calendar.google.com/calendar/embed?src=c_1t5ogfp2d45v8fit981j08mcm4%40group.calendar.google.com&amp;amp;ctz=Europe%2FBerlin&#34;&gt;see our public events calendar&lt;/a&gt;/&lt;a href=&#34;https://calendar.google.com/calendar/ical/c_1t5ogfp2d45v8fit981j08mcm4%40group.calendar.google.com/public/basic.ics&#34;&gt;.ical&lt;/a&gt;) and &lt;a href=&#34;https://youtube.com/c/jina-ai&#34;&gt;live stream on YouTube&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Subscribe to the latest video tutorials on our &lt;a href=&#34;https://youtube.com/c/jina-ai&#34;&gt;YouTube channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Join Us&lt;/h2&gt; &#xA;&lt;p&gt;Jina is backed by &lt;a href=&#34;https://jina.ai&#34;&gt;Jina AI&lt;/a&gt; and licensed under &lt;a href=&#34;https://raw.githubusercontent.com/jina-ai/jina/master/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt;. &lt;a href=&#34;https://jobs.jina.ai&#34;&gt;We are actively hiring&lt;/a&gt; AI engineers, solution engineers to build the next neural search ecosystem in open source.&lt;/p&gt; &#xA;&lt;!-- end support-pitch --&gt;</summary>
  </entry>
</feed>