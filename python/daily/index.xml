<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-08T01:38:12Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Tencent/HunyuanVideo</title>
    <updated>2025-03-08T01:38:12Z</updated>
    <id>tag:github.com,2025-03-08:/Tencent/HunyuanVideo</id>
    <link href="https://github.com/Tencent/HunyuanVideo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HunyuanVideo: A Systematic Framework For Large Video Generation Model&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/README_zh.md&#34;&gt;‰∏≠ÊñáÈòÖËØª&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/logo.png&#34; height=&#34;100&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;HunyuanVideo: A Systematic Framework For Large Video Generation Model&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/Tencent/HunyuanVideo&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=HunyuanVideo%20Code&amp;amp;message=Github&amp;amp;color=blue&#34;&gt;&lt;/a&gt; ‚ÄÇ &#xA; &lt;a href=&#34;https://aivideo.hunyuan.tencent.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Project%20Page&amp;amp;message=Web&amp;amp;color=green&#34;&gt;&lt;/a&gt; ‚ÄÇ &#xA; &lt;a href=&#34;https://video.hunyuan.tencent.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Playground&amp;amp;message=Web&amp;amp;color=green&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://arxiv.org/abs/2412.03603&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Tech%20Report&amp;amp;message=Arxiv&amp;amp;color=red&#34;&gt;&lt;/a&gt; ‚ÄÇ &#xA; &lt;a href=&#34;https://aivideo.hunyuan.tencent.com/hunyuanvideo.pdf&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Tech%20Report&amp;amp;message=High-Quality%20Version%20(~350M)&amp;amp;color=red&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://huggingface.co/tencent/HunyuanVideo&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=HunyuanVideo&amp;amp;message=HuggingFace&amp;amp;color=yellow&#34;&gt;&lt;/a&gt; ‚ÄÇ &#xA; &lt;a href=&#34;https://huggingface.co/docs/diffusers/main/api/pipelines/hunyuan_video&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=HunyuanVideo&amp;amp;message=Diffusers&amp;amp;color=yellow&#34;&gt;&lt;/a&gt; ‚ÄÇ &#xA; &lt;a href=&#34;https://huggingface.co/tencent/HunyuanVideo-PromptRewrite&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=HunyuanVideo-PromptRewrite&amp;amp;message=HuggingFace&amp;amp;color=yellow&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://replicate.com/zsxkib/hunyuan-video&#34;&gt;&lt;img src=&#34;https://replicate.com/zsxkib/hunyuan-video/badge&#34; alt=&#34;Replicate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; üëã Join our &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/assets/WECHAT.md&#34; target=&#34;_blank&#34;&gt;WeChat&lt;/a&gt; and &lt;a href=&#34;https://discord.gg/tv7FkG4Nwf&#34; target=&#34;_blank&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;hr&gt; &#xA;&lt;p&gt;This repo contains PyTorch model definitions, pre-trained weights and inference/sampling code for our paper exploring HunyuanVideo. You can find more visualizations on our &lt;a href=&#34;https://aivideo.hunyuan.tencent.com&#34;&gt;project page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2412.03603&#34;&gt;&lt;strong&gt;HunyuanVideo: A Systematic Framework For Large Video Generation Model&lt;/strong&gt;&lt;/a&gt; &#xA;  &lt;be&gt;&lt;/be&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üî•üî•üî• News!!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mar 06, 2025: üåÖ We release the &lt;a href=&#34;https://github.com/Tencent/HunyuanVideo-I2V&#34;&gt;HunyuanVideo-I2V&lt;/a&gt;, an image-to-video model based on HunyuanVideo.&lt;/li&gt; &#xA; &lt;li&gt;Jan 13, 2025: üìà We release the &lt;a href=&#34;https://github.com/Tencent/HunyuanVideo/raw/main/assets/PenguinVideoBenchmark.csv&#34;&gt;Penguin Video Benchmark&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dec 18, 2024: üèÉ‚Äç‚ôÇÔ∏è We release the &lt;a href=&#34;https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8.pt&#34;&gt;FP8 model weights&lt;/a&gt; of HunyuanVideo to save more GPU memory.&lt;/li&gt; &#xA; &lt;li&gt;Dec 17, 2024: ü§ó HunyuanVideo has been integrated into &lt;a href=&#34;https://huggingface.co/docs/diffusers/main/api/pipelines/hunyuan_video&#34;&gt;Diffusers&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dec 7, 2024: üöÄ We release the parallel inference code for HunyuanVideo powered by &lt;a href=&#34;https://github.com/xdit-project/xDiT&#34;&gt;xDiT&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Dec 3, 2024: üëã We release the inference code and model weights of HunyuanVideo. &lt;a href=&#34;https://github.com/Tencent/HunyuanVideo/raw/main/ckpts/README.md&#34;&gt;Download&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üé• Demo&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://github.com/user-attachments/assets/22440764-0d7e-438e-a44d-d0dad1006d3d&#34; width=&#34;70%&#34; poster=&#34;./assets/video_poster.png&#34;&gt; &#xA; &lt;/video&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üß© Community Contributions&lt;/h2&gt; &#xA;&lt;p&gt;If you develop/use HunyuanVideo in your projects, welcome to let us know.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ComfyUI-Kijai (FP8 Inference, V2V and IP2V Generation): &lt;a href=&#34;https://github.com/kijai/ComfyUI-HunyuanVideoWrapper&#34;&gt;ComfyUI-HunyuanVideoWrapper&lt;/a&gt; by &lt;a href=&#34;https://github.com/kijai&#34;&gt;Kijai&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ComfyUI-Native (Native Support): &lt;a href=&#34;https://comfyanonymous.github.io/ComfyUI_examples/hunyuan_video/&#34;&gt;ComfyUI-HunyuanVideo&lt;/a&gt; by &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI Official&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FastVideo (Consistency Distilled Model and Sliding Tile Attention): &lt;a href=&#34;https://github.com/hao-ai-lab/FastVideo&#34;&gt;FastVideo&lt;/a&gt; and &lt;a href=&#34;https://hao-ai-lab.github.io/blogs/sta/&#34;&gt;Sliding Tile Attention&lt;/a&gt; by &lt;a href=&#34;https://hao-ai-lab.github.io/&#34;&gt;Hao AI Lab&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HunyuanVideo-gguf (GGUF Version and Quantization): &lt;a href=&#34;https://huggingface.co/city96/HunyuanVideo-gguf&#34;&gt;HunyuanVideo-gguf&lt;/a&gt; by &lt;a href=&#34;https://huggingface.co/city96&#34;&gt;city96&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enhance-A-Video (Better Generated Video for Free): &lt;a href=&#34;https://github.com/NUS-HPC-AI-Lab/Enhance-A-Video&#34;&gt;Enhance-A-Video&lt;/a&gt; by &lt;a href=&#34;https://ai.comp.nus.edu.sg/&#34;&gt;NUS-HPC-AI-Lab&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TeaCache (Cache-based Accelerate): &lt;a href=&#34;https://github.com/LiewFeng/TeaCache&#34;&gt;TeaCache&lt;/a&gt; by &lt;a href=&#34;https://github.com/LiewFeng&#34;&gt;Feng Liu&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HunyuanVideoGP (GPU Poor version): &lt;a href=&#34;https://github.com/deepbeepmeep/HunyuanVideoGP&#34;&gt;HunyuanVideoGP&lt;/a&gt; by &lt;a href=&#34;https://github.com/deepbeepmeep&#34;&gt;DeepBeepMeep&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RIFLEx (Video Length Extrapolation): &lt;a href=&#34;https://riflex-video.github.io/&#34;&gt;RIFLEx&lt;/a&gt; by Tsinghua University&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HunyuanVideo Keyframe Control Lora: &lt;a href=&#34;https://github.com/dashtoon/hunyuan-video-keyframe-control-lora&#34;&gt;hunyuan-video-keyframe-control-lora&lt;/a&gt; by &lt;a href=&#34;https://github.com/dashtoon&#34;&gt;dashtoon&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìë Open-source Plan&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HunyuanVideo (Text-to-Video Model) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inference&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Checkpoints&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-gpus Sequence Parallel inference (Faster inference speed on more gpus)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Web Demo (Gradio)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Diffusers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; FP8 Quantified weight&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Penguin Video Benchmark&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ComfyUI&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tencent/HunyuanVideo-I2V&#34;&gt;HunyuanVideo (Image-to-Video Model)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inference&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Checkpoints&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#hunyuanvideo-a-systematic-framework-for-large-video-generation-model&#34;&gt;HunyuanVideo: A Systematic Framework For Large Video Generation Model&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-demo&#34;&gt;üé• Demo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-news&#34;&gt;üî•üî•üî• News!!&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-community-contributions&#34;&gt;üß© Community Contributions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-open-source-plan&#34;&gt;üìë Open-source Plan&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#abstract&#34;&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#hunyuanvideo-overall-architecture&#34;&gt;&lt;strong&gt;HunyuanVideo Overall Architecture&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-hunyuanvideo-key-features&#34;&gt;üéâ &lt;strong&gt;HunyuanVideo Key Features&lt;/strong&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#unified-image-and-video-generative-architecture&#34;&gt;&lt;strong&gt;Unified Image and Video Generative Architecture&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#mllm-text-encoder&#34;&gt;&lt;strong&gt;MLLM Text Encoder&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#3d-vae&#34;&gt;&lt;strong&gt;3D VAE&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#prompt-rewrite&#34;&gt;&lt;strong&gt;Prompt Rewrite&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-comparisons&#34;&gt;üìà Comparisons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-requirements&#34;&gt;üìú Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#%EF%B8%8F-dependencies-and-installation&#34;&gt;üõ†Ô∏è Dependencies and Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#installation-guide-for-linux&#34;&gt;Installation Guide for Linux&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-download-pretrained-models&#34;&gt;üß± Download Pretrained Models&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-single-gpu-inference&#34;&gt;üîë Single-gpu Inference&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#using-command-line&#34;&gt;Using Command Line&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#run-a-gradio-server&#34;&gt;Run a Gradio Server&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#more-configurations&#34;&gt;More Configurations&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-parallel-inference-on-multiple-gpus-by-xdit&#34;&gt;üöÄ Parallel Inference on Multiple GPUs by xDiT&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#using-command-line-1&#34;&gt;Using Command Line&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#--fp8-inference&#34;&gt;üöÄ FP8 Inference&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#using-command-line-2&#34;&gt;Using Command Line&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#-bibtex&#34;&gt;üîó BibTeX&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/#star-history&#34;&gt;Star History&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We present HunyuanVideo, a novel open-source video foundation model that exhibits performance in video generation that is comparable to, if not superior to, leading closed-source models. In order to train HunyuanVideo model, we adopt several key technologies for model learning, including data curation, image-video joint model training, and an efficient infrastructure designed to facilitate large-scale model training and inference. Additionally, through an effective strategy for scaling model architecture and dataset, we successfully trained a video generative model with over 13 billion parameters, making it the largest among all open-source models.&lt;/p&gt; &#xA;&lt;p&gt;We conducted extensive experiments and implemented a series of targeted designs to ensure high visual quality, motion diversity, text-video alignment, and generation stability. According to professional human evaluation results, HunyuanVideo outperforms previous state-of-the-art models, including Runway Gen-3, Luma 1.6, and 3 top-performing Chinese video generative models. By releasing the code and weights of the foundation model and its applications, we aim to bridge the gap between closed-source and open-source video foundation models. This initiative will empower everyone in the community to experiment with their ideas, fostering a more dynamic and vibrant video generation ecosystem.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;HunyuanVideo Overall Architecture&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;HunyuanVideo is trained on a spatial-temporally compressed latent space, which is compressed through a Causal 3D VAE. Text prompts are encoded using a large language model, and used as the conditions. Taking Gaussian noise and the conditions as input, our generative model produces an output latent, which is then decoded to images or videos through the 3D VAE decoder.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/overall.png&#34; height=&#34;300&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üéâ &lt;strong&gt;HunyuanVideo Key Features&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Unified Image and Video Generative Architecture&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;HunyuanVideo introduces the Transformer design and employs a Full Attention mechanism for unified image and video generation. Specifically, we use a &#34;Dual-stream to Single-stream&#34; hybrid model design for video generation. In the dual-stream phase, video and text tokens are processed independently through multiple Transformer blocks, enabling each modality to learn its own appropriate modulation mechanisms without interference. In the single-stream phase, we concatenate the video and text tokens and feed them into subsequent Transformer blocks for effective multimodal information fusion. This design captures complex interactions between visual and semantic information, enhancing overall model performance.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/backbone.png&#34; height=&#34;350&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;MLLM Text Encoder&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Some previous text-to-video models typically use pre-trained CLIP and T5-XXL as text encoders where CLIP uses Transformer Encoder and T5 uses an Encoder-Decoder structure. In contrast, we utilize a pre-trained Multimodal Large Language Model (MLLM) with a Decoder-Only structure as our text encoder, which has the following advantages: (i) Compared with T5, MLLM after visual instruction finetuning has better image-text alignment in the feature space, which alleviates the difficulty of the instruction following in diffusion models; (ii) Compared with CLIP, MLLM has demonstrated superior ability in image detail description and complex reasoning; (iii) MLLM can play as a zero-shot learner by following system instructions prepended to user prompts, helping text features pay more attention to key information. In addition, MLLM is based on causal attention while T5-XXL utilizes bidirectional attention that produces better text guidance for diffusion models. Therefore, we introduce an extra bidirectional token refiner to enhance text features.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/text_encoder.png&#34; height=&#34;275&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;3D VAE&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;HunyuanVideo trains a 3D VAE with CausalConv3D to compress pixel-space videos and images into a compact latent space. We set the compression ratios of video length, space, and channel to 4, 8, and 16 respectively. This can significantly reduce the number of tokens for the subsequent diffusion transformer model, allowing us to train videos at the original resolution and frame rate.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/refs/heads/main/assets/3dvae.png&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Prompt Rewrite&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To address the variability in linguistic style and length of user-provided prompts, we fine-tune the &lt;a href=&#34;https://github.com/Tencent/Tencent-Hunyuan-Large&#34;&gt;Hunyuan-Large model&lt;/a&gt; as our prompt rewrite model to adapt the original user prompt to model-preferred prompt.&lt;/p&gt; &#xA;&lt;p&gt;We provide two rewrite modes: Normal mode and Master mode, which can be called using different prompts. The prompts are shown &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/hyvideo/prompt_rewrite.py&#34;&gt;here&lt;/a&gt;. The Normal mode is designed to enhance the video generation model&#39;s comprehension of user intent, facilitating a more accurate interpretation of the instructions provided. The Master mode enhances the description of aspects such as composition, lighting, and camera movement, which leans towards generating videos with a higher visual quality. However, this emphasis may occasionally result in the loss of some semantic details.&lt;/p&gt; &#xA;&lt;p&gt;The Prompt Rewrite Model can be directly deployed and inferred using the &lt;a href=&#34;https://github.com/Tencent/Tencent-Hunyuan-Large&#34;&gt;Hunyuan-Large original code&lt;/a&gt;. We release the weights of the Prompt Rewrite Model &lt;a href=&#34;https://huggingface.co/Tencent/HunyuanVideo-PromptRewrite&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìà Comparisons&lt;/h2&gt; &#xA;&lt;p&gt;To evaluate the performance of HunyuanVideo, we selected five strong baselines from closed-source video generation models. In total, we utilized 1,533 text prompts, generating an equal number of video samples with HunyuanVideo in a single run. For a fair comparison, we conducted inference only once, avoiding any cherry-picking of results. When comparing with the baseline methods, we maintained the default settings for all selected models, ensuring consistent video resolution. Videos were assessed based on three criteria: Text Alignment, Motion Quality, and Visual Quality. More than 60 professional evaluators performed the evaluation. Notably, HunyuanVideo demonstrated the best overall performance, particularly excelling in motion quality. Please note that the evaluation is based on Hunyuan Video&#39;s high-quality version. This is different from the currently released fast version.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Open Source&lt;/th&gt; &#xA;   &lt;th&gt;Duration&lt;/th&gt; &#xA;   &lt;th&gt;Text Alignment&lt;/th&gt; &#xA;   &lt;th&gt;Motion Quality&lt;/th&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Visual Quality&lt;/th&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Overall&lt;/th&gt; &#xA;   &lt;th rowspan=&#34;2&#34;&gt;Ranking&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HunyuanVideo (Ours)&lt;/td&gt; &#xA;   &lt;td&gt; ‚úî &lt;/td&gt; &#xA;   &lt;td&gt;5s&lt;/td&gt; &#xA;   &lt;td&gt;61.8%&lt;/td&gt; &#xA;   &lt;td&gt;66.5%&lt;/td&gt; &#xA;   &lt;td&gt;95.7%&lt;/td&gt; &#xA;   &lt;td&gt;41.3%&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CNTopA (API)&lt;/td&gt; &#xA;   &lt;td&gt; ‚úò &lt;/td&gt; &#xA;   &lt;td&gt;5s&lt;/td&gt; &#xA;   &lt;td&gt;62.6%&lt;/td&gt; &#xA;   &lt;td&gt;61.7%&lt;/td&gt; &#xA;   &lt;td&gt;95.6%&lt;/td&gt; &#xA;   &lt;td&gt;37.7%&lt;/td&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CNTopB (Web)&lt;/td&gt; &#xA;   &lt;td&gt; ‚úò&lt;/td&gt; &#xA;   &lt;td&gt;5s&lt;/td&gt; &#xA;   &lt;td&gt;60.1%&lt;/td&gt; &#xA;   &lt;td&gt;62.9%&lt;/td&gt; &#xA;   &lt;td&gt;97.7%&lt;/td&gt; &#xA;   &lt;td&gt;37.5%&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GEN-3 alpha (Web)&lt;/td&gt; &#xA;   &lt;td&gt;‚úò&lt;/td&gt; &#xA;   &lt;td&gt;6s&lt;/td&gt; &#xA;   &lt;td&gt;47.7%&lt;/td&gt; &#xA;   &lt;td&gt;54.7%&lt;/td&gt; &#xA;   &lt;td&gt;97.5%&lt;/td&gt; &#xA;   &lt;td&gt;27.4%&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Luma1.6 (API)&lt;/td&gt;&#xA;   &lt;td&gt;‚úò&lt;/td&gt; &#xA;   &lt;td&gt;5s&lt;/td&gt; &#xA;   &lt;td&gt;57.6%&lt;/td&gt; &#xA;   &lt;td&gt;44.2%&lt;/td&gt; &#xA;   &lt;td&gt;94.1%&lt;/td&gt; &#xA;   &lt;td&gt;24.8%&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CNTopC (Web)&lt;/td&gt; &#xA;   &lt;td&gt;‚úò&lt;/td&gt; &#xA;   &lt;td&gt;5s&lt;/td&gt; &#xA;   &lt;td&gt;48.4%&lt;/td&gt; &#xA;   &lt;td&gt;47.2%&lt;/td&gt; &#xA;   &lt;td&gt;96.3%&lt;/td&gt; &#xA;   &lt;td&gt;24.6%&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìú Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The following table shows the requirements for running HunyuanVideo model (batch size = 1) to generate videos:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Model&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Setting&lt;br&gt;(height/width/frame)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;GPU Peak Memory&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HunyuanVideo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;720px1280px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HunyuanVideo&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;544px960px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45GB&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An NVIDIA GPU with CUDA support is required. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The model is tested on a single 80G GPU.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Minimum&lt;/strong&gt;: The minimum GPU memory required is 60GB for 720px1280px129f and 45G for 544px960px129f.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Recommended&lt;/strong&gt;: We recommend using a GPU with 80GB of memory for better generation quality.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Tested operating system: Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Dependencies and Installation&lt;/h2&gt; &#xA;&lt;p&gt;Begin by cloning the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/tencent/HunyuanVideo&#xA;cd HunyuanVideo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation Guide for Linux&lt;/h3&gt; &#xA;&lt;p&gt;We recommend CUDA versions 12.4 or 11.8 for the manual installation.&lt;/p&gt; &#xA;&lt;p&gt;Conda&#39;s installation instructions are available &lt;a href=&#34;https://docs.anaconda.com/free/miniconda/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 1. Create conda environment&#xA;conda create -n HunyuanVideo python==3.10.9&#xA;&#xA;# 2. Activate the environment&#xA;conda activate HunyuanVideo&#xA;&#xA;# 3. Install PyTorch and other dependencies using conda&#xA;# For CUDA 11.8&#xA;conda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=11.8 -c pytorch -c nvidia&#xA;# For CUDA 12.4&#xA;conda install pytorch==2.4.0 torchvision==0.19.0 torchaudio==2.4.0 pytorch-cuda=12.4 -c pytorch -c nvidia&#xA;&#xA;# 4. Install pip dependencies&#xA;python -m pip install -r requirements.txt&#xA;&#xA;# 5. Install flash attention v2 for acceleration (requires CUDA 11.8 or above)&#xA;python -m pip install ninja&#xA;python -m pip install git+https://github.com/Dao-AILab/flash-attention.git@v2.6.3&#xA;&#xA;# 6. Install xDiT for parallel inference (It is recommended to use torch 2.4.0 and flash-attn 2.6.3)&#xA;python -m pip install xfuser==0.4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of running into float point exception(core dump) on the specific GPU type, you may try the following solutions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Option 1: Making sure you have installed CUDA 12.4, CUBLAS&amp;gt;=12.4.5.8, and CUDNN&amp;gt;=9.00 (or simply using our CUDA 12 docker image).&#xA;pip install nvidia-cublas-cu12==12.4.5.8&#xA;export LD_LIBRARY_PATH=/opt/conda/lib/python3.8/site-packages/nvidia/cublas/lib/&#xA;&#xA;# Option 2: Forcing to explictly use the CUDA 11.8 compiled version of Pytorch and all the other packages&#xA;pip uninstall -r requirements.txt  # uninstall all packages&#xA;pip uninstall -y xfuser&#xA;pip install torch==2.4.0 --index-url https://download.pytorch.org/whl/cu118&#xA;pip install -r requirements.txt&#xA;pip install ninja&#xA;pip install git+https://github.com/Dao-AILab/flash-attention.git@v2.6.3&#xA;pip install xfuser==0.4.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, HunyuanVideo also provides a pre-built Docker image. Use the following command to pull and run the docker image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# For CUDA 12.4 (updated to avoid float point exception)&#xA;docker pull hunyuanvideo/hunyuanvideo:cuda_12&#xA;docker run -itd --gpus all --init --net=host --uts=host --ipc=host --name hunyuanvideo --security-opt=seccomp=unconfined --ulimit=stack=67108864 --ulimit=memlock=-1 --privileged hunyuanvideo/hunyuanvideo:cuda_12&#xA;&#xA;# For CUDA 11.8&#xA;docker pull hunyuanvideo/hunyuanvideo:cuda_11&#xA;docker run -itd --gpus all --init --net=host --uts=host --ipc=host --name hunyuanvideo --security-opt=seccomp=unconfined --ulimit=stack=67108864 --ulimit=memlock=-1 --privileged hunyuanvideo/hunyuanvideo:cuda_11&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üß± Download Pretrained Models&lt;/h2&gt; &#xA;&lt;p&gt;The details of download pretrained models are shown &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/HunyuanVideo/main/ckpts/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üîë Single-gpu Inference&lt;/h2&gt; &#xA;&lt;p&gt;We list the height/width/frame settings we support in the following table.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Resolution&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;h/w=9:16&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;h/w=16:9&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;h/w=4:3&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;h/w=3:4&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;h/w=1:1&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;540p&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;544px960px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;960px544px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;624px832px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;832px624px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;720px720px129f&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;720p (recommended)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;720px1280px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1280px720px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1104px832px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;832px1104px129f&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;960px960px129f&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using Command Line&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd HunyuanVideo&#xA;&#xA;python3 sample_video.py \&#xA;    --video-size 720 1280 \&#xA;    --video-length 129 \&#xA;    --infer-steps 50 \&#xA;    --prompt &#34;A cat walks on the grass, realistic style.&#34; \&#xA;    --flow-reverse \&#xA;    --use-cpu-offload \&#xA;    --save-path ./results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run a Gradio Server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 gradio_server.py --flow-reverse&#xA;&#xA;# set SERVER_NAME and SERVER_PORT manually&#xA;# SERVER_NAME=0.0.0.0 SERVER_PORT=8081 python3 gradio_server.py --flow-reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More Configurations&lt;/h3&gt; &#xA;&lt;p&gt;We list some more useful configurations for easy usage:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Argument&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--prompt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;The text prompt for video generation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--video-size&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;720 1280&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;The size of the generated video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--video-length&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;129&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;The length of the generated video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--infer-steps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;The number of steps for sampling&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--embedded-cfg-scale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Embedded Classifier free guidance scale&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--flow-shift&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7.0&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Shift factor for flow matching schedulers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--flow-reverse&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;False&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;If reverse, learning/sampling from t=1 -&amp;gt; t=0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--seed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;None&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;The random seed for generating video, if None, we init a random seed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--use-cpu-offload&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;False&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Use CPU offload for the model load to save more memory, necessary for high-res video generation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;--save-path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;./results&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Path to save the generated video&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üöÄ Parallel Inference on Multiple GPUs by xDiT&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xdit-project/xDiT&#34;&gt;xDiT&lt;/a&gt; is a Scalable Inference Engine for Diffusion Transformers (DiTs) on multi-GPU Clusters. It has successfully provided low-latency parallel inference solutions for a variety of DiTs models, including mochi-1, CogVideoX, Flux.1, SD3, etc. This repo adopted the &lt;a href=&#34;https://arxiv.org/abs/2405.07719&#34;&gt;Unified Sequence Parallelism (USP)&lt;/a&gt; APIs for parallel inference of the HunyuanVideo model.&lt;/p&gt; &#xA;&lt;h3&gt;Using Command Line&lt;/h3&gt; &#xA;&lt;p&gt;For example, to generate a video with 8 GPUs, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd HunyuanVideo&#xA;&#xA;torchrun --nproc_per_node=8 sample_video.py \&#xA;    --video-size 1280 720 \&#xA;    --video-length 129 \&#xA;    --infer-steps 50 \&#xA;    --prompt &#34;A cat walks on the grass, realistic style.&#34; \&#xA;    --flow-reverse \&#xA;    --seed 42 \&#xA;    --ulysses-degree 8 \&#xA;    --ring-degree 1 \&#xA;    --save-path ./results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the &lt;code&gt;--ulysses-degree&lt;/code&gt; and &lt;code&gt;--ring-degree&lt;/code&gt; to control the parallel configurations for the best performance. The valid parallel configurations are shown in the following table.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Supported Parallel Configurations (Click to expand)&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;--video-size&lt;/th&gt; &#xA;    &lt;th&gt;--video-length&lt;/th&gt; &#xA;    &lt;th&gt;--ulysses-degree x --ring-degree&lt;/th&gt; &#xA;    &lt;th&gt;--nproc_per_node&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1280 720 or 720 1280&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;8x1,4x2,2x4,1x8&lt;/td&gt; &#xA;    &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1280 720 or 720 1280&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;1x5&lt;/td&gt; &#xA;    &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1280 720 or 720 1280&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;4x1,2x2,1x4&lt;/td&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1280 720 or 720 1280&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;3x1,1x3&lt;/td&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1280 720 or 720 1280&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;2x1,1x2&lt;/td&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1104 832 or 832 1104&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;4x1,2x2,1x4&lt;/td&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1104 832 or 832 1104&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;3x1,1x3&lt;/td&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;1104 832 or 832 1104&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;2x1,1x2&lt;/td&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;6x1,3x2,2x3,1x6&lt;/td&gt; &#xA;    &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;4x1,2x2,1x4&lt;/td&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;3x1,1x3&lt;/td&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;1x2,2x1&lt;/td&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 544 or 544 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;6x1,3x2,2x3,1x6&lt;/td&gt; &#xA;    &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 544 or 544 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;4x1,2x2,1x4&lt;/td&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 544 or 544 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;3x1,1x3&lt;/td&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;960 544 or 544 960&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;1x2,2x1&lt;/td&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;832 624 or 624 832&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;4x1,2x2,1x4&lt;/td&gt; &#xA;    &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;624 832 or 624 832&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;3x1,1x3&lt;/td&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;832 624 or 624 832&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;2x1,1x2&lt;/td&gt; &#xA;    &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;720 720&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;1x5&lt;/td&gt; &#xA;    &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;720 720&lt;/td&gt; &#xA;    &lt;td&gt;129&lt;/td&gt; &#xA;    &lt;td&gt;3x1,1x3&lt;/td&gt; &#xA;    &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th colspan=&#34;4&#34;&gt;Latency (Sec) for 1280x720 (129 frames 50 steps) on 8xGPU&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;1&lt;/th&gt; &#xA;   &lt;th&gt;2&lt;/th&gt; &#xA;   &lt;th&gt;4&lt;/th&gt; &#xA;   &lt;th&gt;8&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;1904.08&lt;/th&gt; &#xA;   &lt;th&gt;934.09 (2.04x)&lt;/th&gt; &#xA;   &lt;th&gt;514.08 (3.70x)&lt;/th&gt; &#xA;   &lt;th&gt;337.58 (5.64x)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ FP8 Inference&lt;/h2&gt; &#xA;&lt;p&gt;Using HunyuanVideo with FP8 quantized weights, which saves about 10GB of GPU memory. You can download the &lt;a href=&#34;https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8.pt&#34;&gt;weights&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co/tencent/HunyuanVideo/blob/main/hunyuan-video-t2v-720p/transformers/mp_rank_00_model_states_fp8_map.pt&#34;&gt;weight scales&lt;/a&gt; from Huggingface.&lt;/p&gt; &#xA;&lt;h3&gt;Using Command Line&lt;/h3&gt; &#xA;&lt;p&gt;Here, you must explicitly specify the FP8 weight path. For example, to generate a video with fp8 weights, you can use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd HunyuanVideo&#xA;&#xA;DIT_CKPT_PATH={PATH_TO_FP8_WEIGHTS}/{WEIGHT_NAME}_fp8.pt&#xA;&#xA;python3 sample_video.py \&#xA;    --dit-weight ${DIT_CKPT_PATH} \&#xA;    --video-size 1280 720 \&#xA;    --video-length 129 \&#xA;    --infer-steps 50 \&#xA;    --prompt &#34;A cat walks on the grass, realistic style.&#34; \&#xA;    --seed 42 \&#xA;    --embedded-cfg-scale 6.0 \&#xA;    --flow-shift 7.0 \&#xA;    --flow-reverse \&#xA;    --use-cpu-offload \&#xA;    --use-fp8 \&#xA;    --save-path ./results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üîó BibTeX&lt;/h2&gt; &#xA;&lt;p&gt;If you find &lt;a href=&#34;https://arxiv.org/abs/2412.03603&#34;&gt;HunyuanVideo&lt;/a&gt; useful for your research and applications, please cite using this BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-BibTeX&#34;&gt;@misc{kong2024hunyuanvideo,&#xA;      title={HunyuanVideo: A Systematic Framework For Large Video Generative Models}, &#xA;      author={Weijie Kong, Qi Tian, Zijian Zhang, Rox Min, Zuozhuo Dai, Jin Zhou, Jiangfeng Xiong, Xin Li, Bo Wu, Jianwei Zhang, Kathrina Wu, Qin Lin, Aladdin Wang, Andong Wang, Changlin Li, Duojun Huang, Fang Yang, Hao Tan, Hongmei Wang, Jacob Song, Jiawang Bai, Jianbing Wu, Jinbao Xue, Joey Wang, Junkun Yuan, Kai Wang, Mengyang Liu, Pengyu Li, Shuai Li, Weiyan Wang, Wenqing Yu, Xinchi Deng, Yang Li, Yanxin Long, Yi Chen, Yutao Cui, Yuanbo Peng, Zhentao Yu, Zhiyu He, Zhiyong Xu, Zixiang Zhou, Zunnan Xu, Yangyu Tao, Qinglin Lu, Songtao Liu, Dax Zhou, Hongfa Wang, Yong Yang, Di Wang, Yuhong Liu, and Jie Jiang, along with Caesar Zhong},&#xA;      year={2024},&#xA;      archivePrefix={arXiv preprint arXiv:2412.03603},&#xA;      primaryClass={cs.CV},&#xA;      url={https://arxiv.org/abs/2412.03603}, &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We would like to thank the contributors to the &lt;a href=&#34;https://huggingface.co/stabilityai/stable-diffusion-3-medium&#34;&gt;SD3&lt;/a&gt;, &lt;a href=&#34;https://github.com/black-forest-labs/flux&#34;&gt;FLUX&lt;/a&gt;, &lt;a href=&#34;https://github.com/meta-llama/llama&#34;&gt;Llama&lt;/a&gt;, &lt;a href=&#34;https://github.com/haotian-liu/LLaVA&#34;&gt;LLaVA&lt;/a&gt;, &lt;a href=&#34;https://github.com/InternLM/xtuner&#34;&gt;Xtuner&lt;/a&gt;, &lt;a href=&#34;https://github.com/huggingface/diffusers&#34;&gt;diffusers&lt;/a&gt; and &lt;a href=&#34;https://huggingface.co&#34;&gt;HuggingFace&lt;/a&gt; repositories, for their open research and exploration. Additionally, we also thank the Tencent Hunyuan Multimodal team for their help with the text encoder.&lt;/p&gt; &#xA;&lt;h2&gt;Github Star History&lt;/h2&gt; &#xA;&lt;a href=&#34;https://star-history.com/#Tencent/HunyuanVideo&amp;amp;Date&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&amp;amp;type=Date&#34;&gt; &#xA;  &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=Tencent/HunyuanVideo&amp;amp;type=Date&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt;</summary>
  </entry>
</feed>