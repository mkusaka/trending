<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:41:27Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yihong0618/bilingual_book_maker</title>
    <updated>2023-03-05T01:41:27Z</updated>
    <id>tag:github.com,2023-03-05:/yihong0618/bilingual_book_maker</id>
    <link href="https://github.com/yihong0618/bilingual_book_maker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make bilingual epub books Using AI translate&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/yihong0618/bilingual_book_maker/main/README-CN.md&#34;&gt;中文&lt;/a&gt; | English&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;bilingual_book_maker&lt;/h1&gt; &#xA;&lt;p&gt;Make bilingual epub books Using AI translate&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/15976103/222317531-a05317c5-4eee-49de-95cd-04063d9539d9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Preparation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ChatGPT or OpenAI token&lt;/li&gt; &#xA; &lt;li&gt;prepared epub books&lt;/li&gt; &#xA; &lt;li&gt;Environment with internet access or proxy&lt;/li&gt; &#xA; &lt;li&gt;python3.8+&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;pip install -r requirements.txt&lt;/li&gt; &#xA; &lt;li&gt;OpenAI API key. If you have multiple keys, separate them by commas (xxx,xxx,xxx) to reduce errors caused by API call limits.&lt;/li&gt; &#xA; &lt;li&gt;A sample book, test_books/animal_farm.epub, is provided for testing purposes.&lt;/li&gt; &#xA; &lt;li&gt;A sample book, animal_farm.epub, is provided for testing purposes.&lt;/li&gt; &#xA; &lt;li&gt;Use --test command to preview the result if you haven&#39;t paid for the service. Note that there is a limit and it may take some time.&lt;/li&gt; &#xA; &lt;li&gt;Set the target language like &lt;code&gt;--language &#34;Simplified Chinese&#34;&lt;/code&gt;. Support &lt;code&gt; &#34;Japanese&#34; / &#34;Traditional Chinese&#34; / &#34;German&#34; / &#34;French&#34; / &#34;Korean&#34;&lt;/code&gt;. Default target language is &lt;code&gt;&#34;Simplified Chinese&#34;&lt;/code&gt;. Support language list please see the LANGUAGES at &lt;a href=&#34;https://raw.githubusercontent.com/yihong0618/bilingual_book_maker/main/utils.py&#34;&gt;utils.py&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use the --proxy parameter to enable users in mainland China to use a proxy when testing locally. Enter a string such as &lt;a href=&#34;http://127.0.0.1:7890&#34;&gt;http://127.0.0.1:7890&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use the --resume command to manually resume the process after an interruption.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Test quickly&#xA;python3 make_book.py --book_name test_books/animal_farm.epub --openai_key ${openai_key} --no_limit --test --language &#34;Simplified Chinese&#34;&#xA;# or do it&#xA;python3 make_book.py --book_name test_books/animal_farm.epub --openai_key ${openai_key} --language &#34;Simplified Chinese&#34;&#xA;# or use the GPT-3 model&#xA;export OPENAI_API_KEY=${your_api_key}&#xA;python3 make_book.py --book_name test_books/animal_farm.epub --model gpt3 --no_limit --language &#34;Simplified Chinese&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;here is a limit. If you want to speed up the process, consider paying for the service or use multiple OpenAI tokens&lt;/li&gt; &#xA; &lt;li&gt;PR welcome&lt;/li&gt; &#xA; &lt;li&gt;The DeepL model will be updated later.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Thanks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;@&lt;a href=&#34;https://github.com/yetone&#34;&gt;yetone&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contribution&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any issues or PRs are welcome.&lt;/li&gt; &#xA; &lt;li&gt;TODOs in the issue can also be selected.&lt;/li&gt; &#xA; &lt;li&gt;Please run black make_book.py before submitting the code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appreciation&lt;/h2&gt; &#xA;&lt;p&gt;Thank you, that&#39;s enough.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/15976103/222407199-1ed8930c-13a8-402b-9993-aaac8ee84744.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zhayujie/bot-on-anything</title>
    <updated>2023-03-05T01:41:27Z</updated>
    <id>tag:github.com,2023-03-05:/zhayujie/bot-on-anything</id>
    <link href="https://github.com/zhayujie/bot-on-anything" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Connect AI models (like ChatGPT-3.5, GPT-3.0) to apps (like Wechat, public account, DingTalk, Telegram, QQ). 将 ChatGPT 等算法模型应用于各类平台，目前已完成命令行、个人微信、公众号、QQ、Telegram、Gmail邮箱、Slack，计划接入Web、企业微信、钉钉等。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;p&gt;将 &lt;strong&gt;AI模型&lt;/strong&gt; 接入各类 &lt;strong&gt;消息应用&lt;/strong&gt;，开发者通过轻量配置即可在二者之间选择一条连线，运行起一个智能对话机器人，在一个项目中轻松完成多条链路的切换。该架构扩展性强，每接入一个应用可复用已有的算法能力，同样每接入一个模型也可作用于所有应用之上。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;模型：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#1-chatgpt&#34;&gt;ChatGPT (gpt-3.5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#2gpt-30&#34;&gt;GPT-3.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;应用：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#1%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF&#34;&gt;终端&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Web&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#2%E4%B8%AA%E4%BA%BA%E5%BE%AE%E4%BF%A1&#34;&gt;个人微信&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#3%E4%B8%AA%E4%BA%BA%E8%AE%A2%E9%98%85%E5%8F%B7&#34;&gt;订阅号&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#4%E4%BC%81%E4%B8%9A%E6%9C%8D%E5%8A%A1%E5%8F%B7&#34;&gt;服务号&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 企业微信&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#6telegram&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#5qq&#34;&gt;QQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 钉钉&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 飞书&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#7gmail&#34;&gt;Gmail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything#8slack&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;快速开始&lt;/h1&gt; &#xA;&lt;h2&gt;一、准备&lt;/h2&gt; &#xA;&lt;h3&gt;1.运行环境&lt;/h3&gt; &#xA;&lt;p&gt;支持 Linux、MacOS、Windows 系统（Linux服务器上可长期运行)。同时需安装 Python，建议Python版本在 3.7.1~3.10 之间。&lt;/p&gt; &#xA;&lt;p&gt;项目代码克隆：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/zhayujie/bot-on-anything&#xA;cd bot-on-anything/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;或在 Realase 直接手动下载源码。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2.配置说明&lt;/h3&gt; &#xA;&lt;p&gt;核心配置文件为 &lt;code&gt;config.json&lt;/code&gt;，在项目中提供了模板文件 &lt;code&gt;config-template.json&lt;/code&gt; ，可以从模板复制生成最终生效的 &lt;code&gt;config.json&lt;/code&gt; 文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp config-template.json config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;每一个模型和应用都有自己的配置块，最终组成完整的配置文件，整体结构如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#xA;  &#34;model&#34;: {&#xA;    &#34;type&#34; : &#34;chatgpt&#34;,             # 选用的算法模型&#xA;    &#34;openai&#34;: {&#xA;      # openAI配置&#xA;    }&#xA;  },&#xA;  &#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;wechat_mp&#34;,            # 需要接入的应用 &#xA;    &#34;wechat&#34;: {&#xA;        # 个人微信配置&#xA;    },&#xA;    &#34;wechat_mp&#34;: {&#xA;        # 公众号配置&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;配置文件在最外层分成 &lt;code&gt;model&lt;/code&gt; 和 &lt;code&gt;channel&lt;/code&gt; 两部分，model部分为模型配置，其中的 &lt;code&gt;type&lt;/code&gt; 指定了选用哪个模型；channel部分包含了应用渠道的配置，&lt;code&gt;type&lt;/code&gt; 字段指定了接入哪个应用。&lt;/p&gt; &#xA;&lt;p&gt;在使用时只需要更改 model 和 channel 配置块下的 type 字段，即可在任意模型和应用间完成切换，连接不同的通路。下面将依次介绍各个 模型 及 应用 的配置和运行过程。&lt;/p&gt; &#xA;&lt;h2&gt;二、选择模型&lt;/h2&gt; &#xA;&lt;h3&gt;1. ChatGPT&lt;/h3&gt; &#xA;&lt;p&gt;使用的模型是 &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;，详情参考&lt;a href=&#34;https://platform.openai.com/docs/guides/chat&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;(1) 注册 OpenAI 账号&lt;/h4&gt; &#xA;&lt;p&gt;前往 &lt;a href=&#34;https://beta.openai.com/signup&#34;&gt;OpenAI注册页面&lt;/a&gt; 创建账号，参考这篇 &lt;a href=&#34;https://www.cnblogs.com/damugua/p/16969508.html&#34;&gt;教程&lt;/a&gt; 可以通过虚拟手机号来接收验证码。创建完账号则前往 &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;API管理页面&lt;/a&gt; 创建一个 API Key 并保存下来，后面需要在项目中配置这个key。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;项目中使用的对话模型是 davinci，计费方式是约每 750 字 (包含请求和回复) 消耗 $0.02，图片生成是每张消耗 $0.016，账号创建有免费的 $18 额度，使用完可以更换邮箱重新注册。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;(2) 安装依赖&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install --upgrade openai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注： openai版本需要&lt;code&gt;0.27.0&lt;/code&gt;以上。如果安装失败可先升级pip，&lt;code&gt;pip3 install --upgrade pip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;(3) 配置项说明&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#xA;  &#34;model&#34;: {&#xA;    &#34;type&#34; : &#34;chatgpt&#34;,&#xA;   &#xA;    &#34;openai&#34;: {&#xA;      &#34;api_key&#34;: &#34;YOUR API KEY&#34;,&#xA;      &#34;proxy&#34;: &#34;http://127.0.0.1:7890&#34;,&#xA;      &#34;character_desc&#34;: &#34;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;api_key&lt;/code&gt;: 填入上面注册账号时创建的 &lt;code&gt;OpenAI API KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;proxy&lt;/code&gt;: 代理客户端的地址，详情参考 &lt;a href=&#34;https://github.com/zhayujie/bot-on-anything/issues/56&#34;&gt;#56&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;character_desc&lt;/code&gt;: 配置中保存着你对chatgpt说的一段话，他会记住这段话并作为他的设定，你可以为他定制任何人格&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.GPT-3.0&lt;/h3&gt; &#xA;&lt;p&gt;使用的模型是 &lt;code&gt;text-davinci-003&lt;/code&gt;，详情参考&lt;a href=&#34;https://raw.githubusercontent.com/zhayujie/bot-on-anything/master/%5Bhttps://platform.openai.com/docs/guides/chat%5D(https://platform.openai.com/docs/guides/completion/introduction)&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;使用步骤和上述GPT-3.5基本相同：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;注册OpenAI账号并配置API KEY&lt;/li&gt; &#xA; &lt;li&gt;安装openai依赖，要求版本高于 &lt;code&gt;0.25.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;修改&lt;code&gt;config.json&lt;/code&gt;配置中的type字段为 &lt;code&gt;openai&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#xA;  &#34;model&#34;: {&#xA;    &#34;type&#34; : &#34;openai&#34;,&#xA;   &#xA;    &#34;openai&#34;: {&#xA;      &#34;api_key&#34;: &#34;YOUR API KEY&#34;,&#xA;      &#34;character_desc&#34;: &#34;你是ChatGPT, 一个由OpenAI训练的大型语言模型, 你旨在回答并解决人们的任何问题，并且可以使用多种语言与人交流。&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;三、选择应用&lt;/h2&gt; &#xA;&lt;h3&gt;1.命令行终端&lt;/h3&gt; &#xA;&lt;p&gt;配置模板中默认启动的应用即是终端，无需任何额外配置，直接在项目目录下通过命令行执行 &lt;code&gt;python3 app.py&lt;/code&gt; 便可启动程序。用户通过命令行的输入与对话模型交互，且支持流式响应效果。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zhayujie/bot-on-anything/master/docs/images/terminal_demo.png&#34; alt=&#34;terminal_demo.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.个人微信&lt;/h3&gt; &#xA;&lt;p&gt;与项目 &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat&#34;&gt;chatgpt-on-wechat&lt;/a&gt; 的使用方式相同，目前接入个人微信可能导致账号被限制，暂时不建议使用。&lt;/p&gt; &#xA;&lt;p&gt;配置项说明：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;wechat&#34;,&#xA;    &#xA;    &#34;single_chat_prefix&#34;: [&#34;bot&#34;, &#34;@bot&#34;],&#xA;    &#34;single_chat_reply_prefix&#34;: &#34;[bot] &#34;,&#xA;    &#34;group_chat_prefix&#34;: [&#34;@bot&#34;],&#xA;    &#34;group_name_white_list&#34;: [&#34;ChatGPT测试群&#34;],&#xA;    &#34;image_create_prefix&#34;: [&#34;画&#34;, &#34;看&#34;, &#34;找一张&#34;],&#xA;    &#xA;    &#34;wechat&#34;: {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;个人微信的配置项放在和 &lt;code&gt;type&lt;/code&gt; 同级的层次，表示这些为公共配置，会复用于其他应用。配置加载时会优先使用模块内的配置，如果未找到便使用公共配置。&lt;/p&gt; &#xA;&lt;p&gt;在项目根目录下执行 &lt;code&gt;python3 app.py&lt;/code&gt; 即可启动程序，用手机扫码后完成登录，使用详情参考 &lt;a href=&#34;https://github.com/zhayujie/chatgpt-on-wechat&#34;&gt;chatgpt-on-wechat&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;3.个人订阅号&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;需要：&lt;/strong&gt; 一台服务器，一个订阅号&lt;/p&gt; &#xA;&lt;h4&gt;3.1 依赖安装&lt;/h4&gt; &#xA;&lt;p&gt;安装 &lt;a href=&#34;https://github.com/offu/WeRoBot&#34;&gt;werobot&lt;/a&gt; 依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install werobot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.2 配置&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;wechat_mp&#34;,&#xA;        &#xA;    &#34;wechat_mp&#34;: {&#xA;      &#34;token&#34;: &#34;YOUR TOKEN&#34;,           # token值&#xA;      &#34;port&#34;: &#34;8088&#34;                   # 程序启动监听的端口&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3.3 运行程序&lt;/h4&gt; &#xA;&lt;p&gt;在项目目录下运行 &lt;code&gt;python3 app.py&lt;/code&gt;，终端显示如下则表示已成功运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[INFO][2023-02-16 01:39:53][app.py:12] - [INIT] load config: ...&#xA;[INFO][2023-02-16 01:39:53][wechat_mp_channel.py:25] - [WX_Public] Wechat Public account service start!&#xA;Bottle v0.12.23 server starting up (using AutoServer())...&#xA;Listening on http://127.0.0.1:8088/&#xA;Hit Ctrl-C to quit.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2.2 设置公众号回调地址&lt;/h4&gt; &#xA;&lt;p&gt;在 &lt;a href=&#34;https://mp.weixin.qq.com/&#34;&gt;微信公众平台&lt;/a&gt; 中进入个人订阅号，启用服务器配置：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zhayujie/bot-on-anything/master/docs/images/wx_mp_config.png&#34; alt=&#34;wx_mp_config.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;服务器地址 (URL) 配置&lt;/strong&gt;： 如果在浏览器上通过配置的URL 能够访问到服务器上的Python程序 (默认监听8088端口)，则说明配置有效。由于公众号只能配置 80/443端口，可以修改配置为直接监听 80 端口 (需要sudo权限)，或者使用反向代理进行转发 (如nginx)。 根据官方文档说明，此处填写公网ip或域名均可。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;令牌 (Token) 配置&lt;/strong&gt;：需和 &lt;code&gt;config.json&lt;/code&gt; 配置中的token一致。&lt;/p&gt; &#xA;&lt;p&gt;详细操作过程参考 &lt;a href=&#34;https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Getting_Started_Guide.html&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;2.3 使用&lt;/h4&gt; &#xA;&lt;p&gt;用户关注订阅号后，发送消息即可。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注：用户发送消息后，微信后台会向配置的URL地址推送，但如果5s内未回复就会断开连接，同时重试3次，但往往请求openai接口不止5s。本项目中通过异步和缓存将5s超时限制优化至15s，但超出该时间仍无法正常回复。 同时每次5s连接断开时web框架会报错，待后续优化。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;4.企业服务号&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;需要：&lt;/strong&gt; 一个服务器、一个已微信认证的服务号&lt;/p&gt; &#xA;&lt;p&gt;在企业服务号中，通过先异步访问openai接口，再通过客服接口主动推送给用户的方式，解决了个人订阅号的15s超时问题。服务号的开发者模式配置和上述订阅号类似，详情参考 &lt;a href=&#34;https://developers.weixin.qq.com/doc/offiaccount/Getting_Started/Getting_Started_Guide.html&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;企业服务号的 &lt;code&gt;config.json&lt;/code&gt; 配置只需修改type为&lt;code&gt;wechat_mp_service&lt;/code&gt;，但配置块仍复用 &lt;code&gt;wechat_mp&lt;/code&gt;，在此基础上需要增加 &lt;code&gt;app_id&lt;/code&gt; 和 &lt;code&gt;app_secret&lt;/code&gt; 两个配置项。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;wechat_mp_service&#34;,&#xA;        &#xA;    &#34;wechat_mp&#34;: {&#xA;      &#34;token&#34;: &#34;YOUR TOKEN&#34;,            # token值&#xA;      &#34;port&#34;: &#34;8088&#34;,                   # 程序启动监听的端口&#xA;      &#34;app_id&#34;: &#34;YOUR APP ID&#34;,          # app ID&#xA;      &#34;app_secret&#34;: &#34;YOUR APP SECRET&#34;   # app secret&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注意：需将服务器ip地址配置在 &#34;IP白名单&#34; 内，否则用户将收不到主动推送的消息。&lt;/p&gt; &#xA;&lt;h3&gt;5.QQ&lt;/h3&gt; &#xA;&lt;p&gt;需要：一台PC或服务器 (国内网络)、一个QQ号&lt;/p&gt; &#xA;&lt;p&gt;运行qq机器人 需要额外运行一个&lt;code&gt;go-cqhttp&lt;/code&gt; 程序，cqhttp程序负责接收和发送qq消息， 我们的&lt;code&gt;bot-on-anything&lt;/code&gt;程序负责访问&lt;code&gt;openai&lt;/code&gt;生成对话内容。&lt;/p&gt; &#xA;&lt;h4&gt;5.1 下载 go-cqhttp&lt;/h4&gt; &#xA;&lt;p&gt;在 &lt;a href=&#34;https://github.com/Mrs4s/go-cqhttp/releases&#34;&gt;go-cqhttp的Release&lt;/a&gt; 中下载对应机器的程序，解压后将 &lt;code&gt;go-cqhttp&lt;/code&gt; 二进制文件放置在我们的 &lt;code&gt;bot-on-anything/channel/qq&lt;/code&gt; 目录下。 同时这里已经准备好了一个 &lt;code&gt;config.yml&lt;/code&gt; 配置文件，仅需要填写其中的 QQ 账号配置 (account-uin)。&lt;/p&gt; &#xA;&lt;h4&gt;5.2 安装 aiocqhttp&lt;/h4&gt; &#xA;&lt;p&gt;使用 &lt;a href=&#34;https://github.com/nonebot/aiocqhttp&#34;&gt;aiocqhttp&lt;/a&gt; 来与 go-cqhttp 交互， 执行以下语句安装依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install aiocqhttp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.3 配置&lt;/h4&gt; &#xA;&lt;p&gt;只需修改 &lt;code&gt;config.json&lt;/code&gt; 配置文件 channel 块中的 type 为 &lt;code&gt;qq&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;qq&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5.4 运行&lt;/h4&gt; &#xA;&lt;p&gt;首先进入 &lt;code&gt;bot-on-anything&lt;/code&gt; 项目根目录，在 终端1 运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 app.py    # 此时会监听8080端口&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;第二步打开 终端2，进入到放置 &lt;code&gt;cqhttp&lt;/code&gt; 的目录并运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd channel/qq&#xA;./go-cqhttp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;注意：目前未设置任何 关键词匹配 及 群聊白名单，对所有私聊均会自动回复，在群聊中只要被@也会自动回复。&lt;/p&gt; &#xA;&lt;h3&gt;6.Telegram&lt;/h3&gt; &#xA;&lt;p&gt;Contributor: &lt;a href=&#34;https://github.com/brucelt1993&#34;&gt;brucelt1993&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;6.1 获取token&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;telegram 机器人申请可以自行谷歌下，很简单，重要的是获取机器人的token id。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;6.2 依赖安装&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;pip install pyTelegramBotAPI&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;6.3 配置&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;telegram&#34;,&#xA;    &#34;telegram&#34;:{&#xA;      &#34;bot_token&#34;: &#34;YOUR BOT TOKEN ID&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;7.Gmail&lt;/h3&gt; &#xA;&lt;p&gt;需要: 一个服务器、一个Gmail account&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/413675377&#34;&gt;Simon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://support.google.com/mail/answer/185833?hl=en&#34;&gt;官方文档&lt;/a&gt; to create APP password for google account, config as below, then cheers!!!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;gmail&#34;,&#xA;    &#34;gmail&#34;: {&#xA;      &#34;subject_keyword&#34;: [&#34;bot&#34;, &#34;@bot&#34;],&#xA;      &#34;host_email&#34;: &#34;xxxx@gmail.com&#34;,&#xA;      &#34;host_password&#34;: &#34;GMAIL ACCESS KEY&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;8.Slack&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;需要：&lt;/strong&gt; 服务器、 Slack 应用&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contributor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/amaoo&#34;&gt;amao&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;依赖&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install slack_bolt flask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;channel&#34;: {&#xA;    &#34;type&#34;: &#34;slack&#34;,&#xA;    &#34;slack&#34;: {&#xA;      &#34;slack_bot_token&#34;: &#34;xoxb-xxxx&#34;,&#xA;      &#34;slack_signing_secret&#34;: &#34;xxxx&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;需要 80 端口,可以在 &lt;strong&gt;channel/slack/slack_channel.py:45&lt;/strong&gt; 修改相应端口&lt;/p&gt; &#xA;&lt;p&gt;将范围设置为机器人令牌范围 OAuth &amp;amp; Permission:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;app_mentions:read&#xA;channels:join&#xA;chat:write&#xA;im:history&#xA;im:read&#xA;im:writ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在事件订阅中设置范围 - Subscribe to bot events&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;app_mention&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;订阅 URL，如果端口是 80 ，可不填&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http:/你的固定公网ip或者域名:端口/slack/events&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;参考文档&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://slack.dev/bolt-python/tutorial/getting-started&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>yihong0618/xiaogpt</title>
    <updated>2023-03-05T01:41:27Z</updated>
    <id>tag:github.com,2023-03-05:/yihong0618/xiaogpt</id>
    <link href="https://github.com/yihong0618/xiaogpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;play chatgpt with xiaomi ai speaker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xiaogpt&lt;/h1&gt; &#xA;&lt;p&gt;Play ChatGPT with Xiaomi AI Speaker&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/15976103/220028375-c193a859-48a1-4270-95b6-ef540e54a621.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;一点原理&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yihong0618/gitblog/issues/258&#34;&gt;不用 root 使用小爱同学和 ChatGPT 交互折腾记&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;准备&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ChatGPT id&lt;/li&gt; &#xA; &lt;li&gt;小爱音响&lt;/li&gt; &#xA; &lt;li&gt;能正常联网的环境或 proxy&lt;/li&gt; &#xA; &lt;li&gt;python3.8+&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;pip install aiohttp # 解决 miserver 依赖&lt;/li&gt; &#xA; &lt;li&gt;pip install -r requirements.txt&lt;/li&gt; &#xA; &lt;li&gt;参考 &lt;a href=&#34;https://github.com/Yonsm/MiService&#34;&gt;MiService&lt;/a&gt; 项目 README 并在本地 terminal 跑 &lt;code&gt;micli list&lt;/code&gt; 拿到你音响的 DID 成功 &lt;strong&gt;别忘了设置 export MI_DID=xxx&lt;/strong&gt; 这个 MI_DID 用&lt;/li&gt; &#xA; &lt;li&gt;参考 &lt;a href=&#34;https://github.com/acheong08/ChatGPT&#34;&gt;revChatGPT&lt;/a&gt; 项目 README 配置 chatGPT 的 config&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;python xiaogpt.py --hardware ${your_hardware}&lt;/code&gt; hardware 你看小爱屁股上有型号，输入进来&lt;/li&gt; &#xA; &lt;li&gt;跑起来之后就可以问小爱同学问题了，“帮我&#34;开头的问题，会发送一份给 ChatGPT 然后小爱同学用 tts 回答&lt;/li&gt; &#xA; &lt;li&gt;因为现在必须指定 conversation_id 和 parent_id 来持续对话，会自动建一个新的 conversation&lt;/li&gt; &#xA; &lt;li&gt;如果上面不可用，可以尝试用手机抓包，&lt;a href=&#34;https://userprofile.mina.mi.com/device_profile/v2/conversation&#34;&gt;https://userprofile.mina.mi.com/device_profile/v2/conversation&lt;/a&gt; 找到 cookie 利用 --cookie &#39;${cookie}&#39; cookie 别忘了用单引号包裹&lt;/li&gt; &#xA; &lt;li&gt;默认用目前 ubus, 如果你的设备不支持 ubus 可以使用 --use_command 来使用 command 来 tts&lt;/li&gt; &#xA; &lt;li&gt;使用 --mute_xiaoai 选项，可以让小爱不回答，但会频繁请求，玩一下可以使用，不建议一直用&lt;/li&gt; &#xA; &lt;li&gt;使用 --account ‘${account}’ --password ‘${password}’ 可以不进行步骤 2&lt;/li&gt; &#xA; &lt;li&gt;如果有能力可以自行替换唤醒词，也可以去掉唤醒词，源码在 &lt;a href=&#34;https://github.com/yihong0618/xiaogpt/raw/main/xiaogpt.py#L32&#34;&gt;https://github.com/yihong0618/xiaogpt/blob/main/xiaogpt.py#L32&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;可以使用 gpt-3 的 api 那样可以更流畅的对话，速度快, 请 google 如何用 openai api, 命令 --use_gpt3&lt;/li&gt; &#xA; &lt;li&gt;可以使用 --use_chatgpt_api 的 api 那样可以更流畅的对话，速度特别快，达到了对话的体验, 请 google 如何用 openai api, 命令 --use_chatgpt_api&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 xiaogpt.py --hardware LX06;&#xA;# or&#xA;python3 xiaogpt.py --hardware LX06 --conversation_id=&#34;xxxxxxxx&#34;;&#xA;# or &#xA;python3 xiaogpt.py --hardware LX06 --cookie ${cookie};&#xA;# 如果你想直接输入账号密码&#xA;python3 xiaogpt.py --hardware LX06 --account ${your_xiaomi_account} --password ${your_password};&#xA;# 如果你想 mute 小米的回答&#xA;python3 xiaogpt.py --hardware LX06  --mute_xiaoai &#xA;# 如果你想使用 gpt3 ai&#xA;export OPENAI_API_KEY=${your_api_key}&#xA;python3 xiaogpt.py --hardware LX06  --mute_xiaoai --use_gpt3&#xA;# 如果你想用 chatgpt api&#xA;export OPENAI_API_KEY=${your_api_key}&#xA;python3 xiaogpt.py --hardware LX06 --use_chatgpt_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;config.json&lt;/h2&gt; &#xA;&lt;p&gt;如果想通过单一配置文件启动也是可以的, 可以通过 --config 参数指定配置文件, config 文件必须是合法的 JSON 格式 参数优先级&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cli args &amp;gt; default &amp;gt; config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 xiaogpt.py --config xiao_config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp xiao_config.json.example xiao_config.json&#xA;python3 xiaogpt.py &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;请开启小爱同学的蓝牙&lt;/li&gt; &#xA; &lt;li&gt;如果要更改提示词和 PROMPT 在代码最上面自行更改&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;QA&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;用破解么？不用&lt;/li&gt; &#xA; &lt;li&gt;连不上 revChatGPT？国情，你得设置 proxy 并且该地区可用的 proxy&lt;/li&gt; &#xA; &lt;li&gt;你做这玩意也没用啊？确实。。。但是挺好玩的，有用对你来说没用，对我们来说不一定呀&lt;/li&gt; &#xA; &lt;li&gt;想把它变得更好？PR Issue always welcome.&lt;/li&gt; &#xA; &lt;li&gt;还有问题？提 Issuse 哈哈&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;视频教程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=K4YA8YwzOOA&#34;&gt;https://www.youtube.com/watch?v=K4YA8YwzOOA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;感谢&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mi.com/&#34;&gt;xiaomi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;@&lt;a href=&#34;https://github.com/Yonsm&#34;&gt;Yonsm&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/Yonsm/MiService&#34;&gt;MiService&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;赞赏&lt;/h2&gt; &#xA;&lt;p&gt;谢谢就够了&lt;/p&gt;</summary>
  </entry>
</feed>