<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-23T01:36:37Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>encode/httpx</title>
    <updated>2024-02-23T01:36:37Z</updated>
    <id>tag:github.com,2024-02-23:/encode/httpx</id>
    <link href="https://github.com/encode/httpx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A next generation HTTP client for Python. 🦋&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.python-httpx.org/&#34;&gt;&lt;img width=&#34;350&#34; height=&#34;208&#34; src=&#34;https://raw.githubusercontent.com/encode/httpx/master/docs/img/butterfly.png&#34; alt=&#34;HTTPX&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;HTTPX&lt;/strong&gt; &lt;em&gt;- A next-generation HTTP client for Python.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/encode/httpx/actions&#34;&gt; &lt;img src=&#34;https://github.com/encode/httpx/workflows/Test%20Suite/badge.svg?sanitize=true&#34; alt=&#34;Test Suite&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/httpx/&#34;&gt; &lt;img src=&#34;https://badge.fury.io/py/httpx.svg?sanitize=true&#34; alt=&#34;Package version&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;HTTPX is a fully featured HTTP client library for Python 3. It includes &lt;strong&gt;an integrated command line client&lt;/strong&gt;, has support for both &lt;strong&gt;HTTP/1.1 and HTTP/2&lt;/strong&gt;, and provides both &lt;strong&gt;sync and async APIs&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Install HTTPX using pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install httpx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, let&#39;s get started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pycon&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import httpx&#xA;&amp;gt;&amp;gt;&amp;gt; r = httpx.get(&#39;https://www.example.org/&#39;)&#xA;&amp;gt;&amp;gt;&amp;gt; r&#xA;&amp;lt;Response [200 OK]&amp;gt;&#xA;&amp;gt;&amp;gt;&amp;gt; r.status_code&#xA;200&#xA;&amp;gt;&amp;gt;&amp;gt; r.headers[&#39;content-type&#39;]&#xA;&#39;text/html; charset=UTF-8&#39;&#xA;&amp;gt;&amp;gt;&amp;gt; r.text&#xA;&#39;&amp;lt;!doctype html&amp;gt;\n&amp;lt;html&amp;gt;\n&amp;lt;head&amp;gt;\n&amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt;...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, using the command-line client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install &#39;httpx[cli]&#39;  # The command line client is an optional dependency.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which now allows us to use HTTPX directly from the command-line...&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://raw.githubusercontent.com/encode/httpx/master/docs/img/httpx-help.png&#34; alt=&#34;httpx --help&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Sending a request...&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;700&#34; src=&#34;https://raw.githubusercontent.com/encode/httpx/master/docs/img/httpx-request.png&#34; alt=&#34;httpx http://httpbin.org/json&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;HTTPX builds on the well-established usability of &lt;code&gt;requests&lt;/code&gt;, and gives you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A broadly &lt;a href=&#34;https://www.python-httpx.org/compatibility/&#34;&gt;requests-compatible API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;An integrated command-line client.&lt;/li&gt; &#xA; &lt;li&gt;HTTP/1.1 &lt;a href=&#34;https://www.python-httpx.org/http2/&#34;&gt;and HTTP/2 support&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Standard synchronous interface, but with &lt;a href=&#34;https://www.python-httpx.org/async/&#34;&gt;async support if you need it&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ability to make requests directly to &lt;a href=&#34;https://www.python-httpx.org/advanced/#calling-into-python-web-apps&#34;&gt;WSGI applications&lt;/a&gt; or &lt;a href=&#34;https://www.python-httpx.org/async/#calling-into-python-web-apps&#34;&gt;ASGI applications&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Strict timeouts everywhere.&lt;/li&gt; &#xA; &lt;li&gt;Fully type annotated.&lt;/li&gt; &#xA; &lt;li&gt;100% test coverage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Plus all the standard features of &lt;code&gt;requests&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;International Domains and URLs&lt;/li&gt; &#xA; &lt;li&gt;Keep-Alive &amp;amp; Connection Pooling&lt;/li&gt; &#xA; &lt;li&gt;Sessions with Cookie Persistence&lt;/li&gt; &#xA; &lt;li&gt;Browser-style SSL Verification&lt;/li&gt; &#xA; &lt;li&gt;Basic/Digest Authentication&lt;/li&gt; &#xA; &lt;li&gt;Elegant Key/Value Cookies&lt;/li&gt; &#xA; &lt;li&gt;Automatic Decompression&lt;/li&gt; &#xA; &lt;li&gt;Automatic Content Decoding&lt;/li&gt; &#xA; &lt;li&gt;Unicode Response Bodies&lt;/li&gt; &#xA; &lt;li&gt;Multipart File Uploads&lt;/li&gt; &#xA; &lt;li&gt;HTTP(S) Proxy Support&lt;/li&gt; &#xA; &lt;li&gt;Connection Timeouts&lt;/li&gt; &#xA; &lt;li&gt;Streaming Downloads&lt;/li&gt; &#xA; &lt;li&gt;.netrc Support&lt;/li&gt; &#xA; &lt;li&gt;Chunked Requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install httpx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to include the optional HTTP/2 support, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install httpx[http2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTPX requires Python 3.8+.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Project documentation is available at &lt;a href=&#34;https://www.python-httpx.org/&#34;&gt;https://www.python-httpx.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a run-through of all the basics, head over to the &lt;a href=&#34;https://www.python-httpx.org/quickstart/&#34;&gt;QuickStart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more advanced topics, see the &lt;a href=&#34;https://www.python-httpx.org/advanced/&#34;&gt;Advanced Usage&lt;/a&gt; section, the &lt;a href=&#34;https://www.python-httpx.org/async/&#34;&gt;async support&lt;/a&gt; section, or the &lt;a href=&#34;https://www.python-httpx.org/http2/&#34;&gt;HTTP/2&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.python-httpx.org/api/&#34;&gt;Developer Interface&lt;/a&gt; provides a comprehensive API reference.&lt;/p&gt; &#xA;&lt;p&gt;To find out about tools that integrate with HTTPX, see &lt;a href=&#34;https://www.python-httpx.org/third_party_packages/&#34;&gt;Third Party Packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute with HTTPX check out the &lt;a href=&#34;https://www.python-httpx.org/contributing/&#34;&gt;Contributing Guide&lt;/a&gt; to learn how to start.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The HTTPX project relies on these excellent libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;httpcore&lt;/code&gt; - The underlying transport implementation for &lt;code&gt;httpx&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;h11&lt;/code&gt; - HTTP/1.1 support.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;certifi&lt;/code&gt; - SSL certificates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;idna&lt;/code&gt; - Internationalized domain name support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sniffio&lt;/code&gt; - Async library autodetection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As well as these optional installs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;h2&lt;/code&gt; - HTTP/2 support. &lt;em&gt;(Optional, with &lt;code&gt;httpx[http2]&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;socksio&lt;/code&gt; - SOCKS proxy support. &lt;em&gt;(Optional, with &lt;code&gt;httpx[socks]&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rich&lt;/code&gt; - Rich terminal support. &lt;em&gt;(Optional, with &lt;code&gt;httpx[cli]&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;click&lt;/code&gt; - Command line client support. &lt;em&gt;(Optional, with &lt;code&gt;httpx[cli]&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;brotli&lt;/code&gt; or &lt;code&gt;brotlicffi&lt;/code&gt; - Decoding for &#34;brotli&#34; compressed responses. &lt;em&gt;(Optional, with &lt;code&gt;httpx[brotli]&lt;/code&gt;)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A huge amount of credit is due to &lt;code&gt;requests&lt;/code&gt; for the API layout that much of this work follows, as well as to &lt;code&gt;urllib3&lt;/code&gt; for plenty of design inspiration around the lower-level networking details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;HTTPX is &lt;a href=&#34;https://github.com/encode/httpx/raw/master/LICENSE.md&#34;&gt;BSD licensed&lt;/a&gt; code.&lt;br&gt;Designed &amp;amp; crafted with care.&lt;/i&gt;&lt;br&gt;— 🦋 —&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>charlax/python-education</title>
    <updated>2024-02-23T01:36:37Z</updated>
    <id>tag:github.com,2024-02-23:/charlax/python-education</id>
    <link href="https://github.com/charlax/python-education" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reading list for ramping up with professional Python&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#about-this-list&#34;&gt;About this list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#learning-the-language&#34;&gt;Learning the language&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#beginner&#34;&gt;Beginner&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#intermediate&#34;&gt;Intermediate&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#writing-idiomatic-python&#34;&gt;Writing idiomatic Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#exercises&#34;&gt;Exercises&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#code-practice-websites&#34;&gt;Code practice websites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#small-exercises&#34;&gt;Small exercises&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#larger-projects&#34;&gt;Larger projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#my-exercises&#34;&gt;My exercises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#topics&#34;&gt;Topics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#algorithms&#34;&gt;Algorithms&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#best-practices&#34;&gt;Best Practices&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#beyond-python-other-programming-languages&#34;&gt;Beyond Python (other programming languages)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#celery&#34;&gt;Celery&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#code-architecture&#34;&gt;Code Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#design-patterns&#34;&gt;Design patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#example-inspiration-and-template-packages&#34;&gt;Example, inspiration and template packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#exception&#34;&gt;Exception&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#file-organisation-monorepo-folders-etc&#34;&gt;File organisation (monorepo, folders, etc.)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#functional-programming&#34;&gt;Functional programming&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#internals&#34;&gt;Internals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#magic-methods&#34;&gt;Magic methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#open-source-python-apps&#34;&gt;Open source Python apps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#packages-finding-and-using-them&#34;&gt;Packages (finding and using them)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#packages-opinionated-list&#34;&gt;Packages (opinionated list)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#packaging-creating-your-own-package&#34;&gt;Packaging (creating your own package)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#parsing&#34;&gt;Parsing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#preparing-for-interviews&#34;&gt;Preparing for interviews&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#quirks-and-gotchas&#34;&gt;Quirks and gotchas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#regular-expressions-regex&#34;&gt;Regular expressions (regex)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#sqlalchemy&#34;&gt;SQLAlchemy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#standard-library-modules&#34;&gt;Standard library modules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#static-analysis-of-code&#34;&gt;Static analysis of code&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#tools-built-with-python&#34;&gt;Tools built with Python&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#types&#34;&gt;Types&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#unicode&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#reference-and-other-lists&#34;&gt;Reference and other lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#staying-up-to-date&#34;&gt;Staying up to date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/#non-python-professional-coding-education&#34;&gt;Non-Python professional coding education&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--TOC--&gt; &#xA;&lt;h2&gt;About this list&lt;/h2&gt; &#xA;&lt;p&gt;Items:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🧰 : list of resources&lt;/li&gt; &#xA; &lt;li&gt;📖 : book&lt;/li&gt; &#xA; &lt;li&gt;🎞 : video/movie extract/movie&lt;/li&gt; &#xA; &lt;li&gt;🎤 : slides/presentation&lt;/li&gt; &#xA; &lt;li&gt;🎧 : podcast&lt;/li&gt; &#xA; &lt;li&gt;🔧 : tool&lt;/li&gt; &#xA; &lt;li&gt;⭐️ : must-read&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The goal of this documentation is to help you become a productive Python developer.&lt;/p&gt; &#xA;&lt;p&gt;It assumes that those skills will be used in a professional environment. It includes concrete exercises, because the best way to learn is by doing. It focuses on real-world, applied documentation that will help your programming on a day-to-day basis.&lt;/p&gt; &#xA;&lt;p&gt;This doc assumes programming knowledge and experience.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re also interested in generic programming best practices, I&#39;ve compiled a list of &lt;a href=&#34;https://github.com/charlax/professional-programming&#34;&gt;professional programming&lt;/a&gt; resources.&lt;/p&gt; &#xA;&lt;h2&gt;Learning the language&lt;/h2&gt; &#xA;&lt;h3&gt;Why learn Python?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackabuse.com/why-beginners-should-learn-python/&#34;&gt;Why Beginners Should Learn Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.blog/2023-03-02-why-python-keeps-growing-explained/&#34;&gt;Why Python keeps growing, explained | The GitHub Blog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Beginner&lt;/h3&gt; &#xA;&lt;p&gt;Here are some free books:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/index.html&#34;&gt;Official Tutorial&lt;/a&gt;: Python&#39;s official doc is really good, highly recommended read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://diveintopython3.problemsolving.io/&#34;&gt;Dive Into Python&lt;/a&gt;: much faster introduction to Python, a bit outdated but will get you ramped up really fast, especially if you&#39;ve learned a number of programming language in the past.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://docs.python-guide.org/en/latest/intro/learning/&#34;&gt;The Python Guide&lt;/a&gt; has some other good resources.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re coming from another language, read this article about the &lt;a href=&#34;https://medium.com/paypal-engineering/10-myths-of-enterprise-python-8302b8f21f82&#34;&gt;ten myths of enterprise Python&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to review algorithms at the same time, you can use &lt;a href=&#34;http://interactivepython.org/runestone/static/pythonds/index.html&#34;&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt; by Bradley N. Miller, David L. Ranum.&lt;/p&gt; &#xA;&lt;p&gt;Other resources include (prefer the one listed above):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://automatetheboringstuff.com/&#34;&gt;Automate the boring stuff with Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://inventwithpython.com/chapters/&#34;&gt;Invent with Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/coodict/python3-in-one-pic&#34;&gt;Learn Python in one picture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://realpython.com/python-beginner-tips/&#34;&gt;11 Beginner Tips for Learning Python Programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.python.org/moin/BeginnersGuide&#34;&gt;BeginnersGuide - Python Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python-guide.org/intro/learning/&#34;&gt;Learning Python — The Hitchhiker&#39;s Guide to Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stephensugden.com/crash_into_python/&#34;&gt;Crash into Python&lt;/a&gt;: for experienced programmers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fullstackpython.com/&#34;&gt;Full Stack Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hyperskill.org/onboarding/tracks/2&#34;&gt;Learn Computer Science&lt;/a&gt; with Python, from JetBrains&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://realpython.com/python-first-steps/&#34;&gt;How to Use Python: Your First Steps&lt;/a&gt; (RealPython)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Asabeneh/30-Days-Of-Python&#34;&gt;Asabeneh/30-Days-Of-Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Intermediate&lt;/h3&gt; &#xA;&lt;p&gt;I wrote some introductory material to advanced Python:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/advanced-python/README.md&#34;&gt;Introduction to advanced Python&lt;/a&gt; (article).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/charlax/introduction-to-advanced-python&#34;&gt;Advanced Python presentation&lt;/a&gt; (Slideshare).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://piccolo-orm.com/blog/the-power-of-python-descriptors/&#34;&gt;The power of Python descriptors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dabeaz-course/python-mastery&#34;&gt;dabeaz-course/python-mastery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Articles, videos and presentations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎞 &lt;a href=&#34;https://github.com/s16h/py-must-watch&#34;&gt;py-must-watch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎞 &lt;a href=&#34;https://calmcode.io/&#34;&gt;calmcode.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Books&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Muhammad Yasoob Ullah Khalid, &lt;a href=&#34;http://book.pythontips.com/en/latest/&#34;&gt;Intermediate Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Luciano Ramalho, &lt;a href=&#34;https://www.amazon.com/gp/product/1492056359/&#34;&gt;Fluent Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dusty Phillips, &lt;a href=&#34;http://www.amazon.com/gp/product/1784398780/&#34;&gt;Python 3 Object-Oriented Programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Brett Slatkin, &lt;a href=&#34;http://www.amazon.com/gp/product/0134034287/&#34;&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lists of books:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pythonkitchen.com/legally-free-python-books-list/&#34;&gt;Legally Free Python Books List&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Podcasts&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://talkpython.fm/&#34;&gt;Talk Python To Me podcast&lt;/a&gt; In-depth interviews and topics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonbytes.fm/&#34;&gt;Python Bytes&lt;/a&gt; Weekly python news and discussion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pythonpodcast.com/&#34;&gt;Podcast.init&lt;/a&gt; Data engineering, data science and DevOps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://realpython.com/podcasts/rpp/&#34;&gt;Real Python Podcast&lt;/a&gt; Python news and education&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writing idiomatic Python&lt;/h2&gt; &#xA;&lt;p&gt;First things first, let&#39;s get &lt;strong&gt;code style&lt;/strong&gt; out of the way. Make sure you&#39;ve read and memorized &lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;PEP8&lt;/a&gt; (code style, &lt;a href=&#34;http://pep8.org/&#34;&gt;more readable version here&lt;/a&gt;) and &lt;a href=&#34;https://www.python.org/dev/peps/pep-0257/&#34;&gt;PEP257&lt;/a&gt; (docstring style). Those two code styles are applied by almost all major Python applications and libraries. Use flake8, pydocstyle and black to ensure they are applied (check other linters and autofixers below).&lt;/p&gt; &#xA;&lt;p&gt;What is called &#34;idiomatic Python&#34; might feel magical at first, especially if you don&#39;t know Python. I&#39;d recommend getting your hands dirty with some real world Python code. Try to wander around the code, opening random files. Run the tutorial with a debugger to follow the flow and understand what&#39;s going on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bottlepy/bottle/raw/master/bottle.py&#34;&gt;bottle.py&lt;/a&gt;: bottle is a web framework. It&#39;s a great resource because it&#39;s in all in whole file! Recommended reading. You can even print it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mitsuhiko/flask&#34;&gt;flask&lt;/a&gt;: another web framework, one of the best. Reading its code is highly recommended as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can find other ideas on &lt;a href=&#34;https://news.ycombinator.com/item?id=9896369&#34;&gt;this hacker news thread&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I feel it&#39;s more important to understand the vision behind Python&#39;s design, than to know specific Python idioms. The Zen of Python will help you understand the fundamental reasoning behind each idiom.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import this&#xA;The Zen of Python, by Tim Peters&#xA;&#xA;Beautiful is better than ugly.&#xA;Explicit is better than implicit.&#xA;Simple is better than complex.&#xA;Complex is better than complicated.&#xA;Flat is better than nested.&#xA;Sparse is better than dense.&#xA;Readability counts.&#xA;Special cases aren&#39;t special enough to break the rules.&#xA;Although practicality beats purity.&#xA;Errors should never pass silently.&#xA;Unless explicitly silenced.&#xA;In the face of ambiguity, refuse the temptation to guess.&#xA;There should be one-- and preferably only one --obvious way to do it.&#xA;Although that way may not be obvious at first unless you&#39;re Dutch.&#xA;Now is better than never.&#xA;Although never is often better than *right* now.&#xA;If the implementation is hard to explain, it&#39;s a bad idea.&#xA;If the implementation is easy to explain, it may be a good idea.&#xA;Namespaces are one honking great idea -- let&#39;s do more of those!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learning idiomatic Python:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://docs.python-guide.org/en/latest/&#34;&gt;The Hitchhiker’s Guide to Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://halitalptekin.tumblr.com/post/30028271874/pythonic-syntax&#34;&gt;What the heck does “pythonic” mean?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amontalenti/elements-of-python-style&#34;&gt;Elements of Python style&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://orbifold.xyz/zen-of-python.html&#34;&gt;Meditations on the Zen of Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://davidamos.dev/3-tips-for-writing-pythonic-code/&#34;&gt;3 Tips For Writing Pythonic Code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;List of books:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Junnplus/awesome-python-books&#34;&gt;Awesome Python Books&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exercises&lt;/h2&gt; &#xA;&lt;p&gt;The best way to learn is to do.&lt;/p&gt; &#xA;&lt;h3&gt;Code practice websites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exercism.io/&#34;&gt;Exercism&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codingame.com/start&#34;&gt;Codingame&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Solve some of the &lt;a href=&#34;https://projecteuler.net/&#34;&gt;Project Euler problems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codewars.com/&#34;&gt;Codewars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackerrank.com/&#34;&gt;HackerRank&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Small exercises&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a virtual environment with &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fix a bug in one of the Python packages listed in &lt;a href=&#34;http://docs.python-guide.org/en/latest/#scenario-guide&#34;&gt;the Python guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Take inspiration from this &lt;a href=&#34;https://www.reddit.com/r/Python/comments/4e59wb/what_have_you_done_with_python_and_raspberry_pi/&#34;&gt;list of Raspberry Pi projects on reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Larger projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build a lock library for Redis.&lt;/li&gt; &#xA; &lt;li&gt;Build a cache library for Redis.&lt;/li&gt; &#xA; &lt;li&gt;Build an API for storing todos&lt;/li&gt; &#xA; &lt;li&gt;Build an API for next bus departure time.&lt;/li&gt; &#xA; &lt;li&gt;Build an ORM for a SQL database.&lt;/li&gt; &#xA; &lt;li&gt;Build a command line parser.&lt;/li&gt; &#xA; &lt;li&gt;Build a template engine.&lt;/li&gt; &#xA; &lt;li&gt;Build a static site generator.&lt;/li&gt; &#xA; &lt;li&gt;Build an HTTP library.&lt;/li&gt; &#xA; &lt;li&gt;Clone one of those &lt;a href=&#34;http://inventwithpython.com/blog/2012/02/20/i-need-practice-programming-49-ideas-for-game-clones-to-code/&#34;&gt;games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Write a game using &lt;a href=&#34;https://arcade.academy/&#34;&gt;pyarcade&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spandanb/learndb-py&#34;&gt;spandanb/learndb-py&lt;/a&gt;: learn database internals by implementing it from scratch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reddit&#39;s &lt;a href=&#34;https://www.reddit.com/r/dailyprogrammer&#34;&gt;dailyprogrammer subreddit&lt;/a&gt; has some good exercises as well.&lt;/p&gt; &#xA;&lt;p&gt;Another great way to learn Python is by contributing to one of the numerous open source libraries. Coding is not something that is to be learn in isolation, and you&#39;ll learn great valuable insights from the code review you&#39;ll get from those communities. You can look for tickets (e.g. Github issues) for Python libraries you&#39;re using, or find some in the list below, or pick one of the libraries listed in &lt;a href=&#34;https://github.com/vinta/awesome-python&#34;&gt;Awesome Python&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you pick a library where the tickets are not too involved, and where the community is still alive (i.e. there&#39;s recent merged pull requests).&lt;/p&gt; &#xA;&lt;h3&gt;My exercises&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/intro-to-python/exercises/&#34;&gt;intro-to-python/exercises&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/advanced-python/exercises/&#34;&gt;advanced-python/exercises&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Topics&lt;/h2&gt; &#xA;&lt;h3&gt;Algorithms&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheAlgorithms/Python&#34;&gt;TheAlgorithms/Python&lt;/a&gt;: all algorithms implemented in Python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Best Practices&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/sloria/7001839&#34;&gt;The Best of the Best Practices (BOBP) Guide for Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rhodesmill.org/brandon/slides/2019-11-codedive/&#34;&gt;When Python Practices Go Wrong&lt;/a&gt;: a pretty opinionated presentation that can be too concise at times, but nonetheless very interesting for somebody looking to constrain their creativity with Python constructs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://breadcrumbscollector.tech/stop-naming-your-python-modules-utils/&#34;&gt;Stop naming your python modules &#34;utils&#34;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zedr/clean-code-python&#34;&gt;zedr/clean-code-python&lt;/a&gt;: Clean Code concepts adapted for Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alexkrupp.typepad.com/sensemaking/2021/06/django-for-startup-founders-a-better-software-architecture-for-saas-startups-and-consumer-apps.html&#34;&gt;Django for Startup Founders: A better software architecture for SaaS startups and consumer apps&lt;/a&gt;: I strongly disagree with some of the points, but there&#39;s definitely some inspiration to take. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Keep business logic in services&lt;/li&gt; &#xA;   &lt;li&gt;Make services the locus of reusability&lt;/li&gt; &#xA;   &lt;li&gt;Use functions, not classes&lt;/li&gt; &#xA;   &lt;li&gt;There are exactly 4 types of errors&lt;/li&gt; &#xA;   &lt;li&gt;Use serializers responsibly, or not at all&lt;/li&gt; &#xA;   &lt;li&gt;Write admin functionality as API endpoints&lt;/li&gt; &#xA;   &lt;li&gt;Keep logic out of the front end&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Beyond Python (other programming languages)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python.html&#34;&gt;27 languages to improve your Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vindarel/languages-that-compile-to-python&#34;&gt;List of languages that compile to Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucumr.pocoo.org/2015/5/27/rust-for-pythonistas/&#34;&gt;Rust for Python Programmers&lt;/a&gt;, Armin Ronacher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mathspp.com/blog/what-learning-apl-taught-me-about-python&#34;&gt;What learning APL taught me about Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Boilerplate&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://duarteocarmo.com/blog/opinionated-python-boilerplate&#34;&gt;An opinionated Python boilerplate&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pip-tools&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ruff&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dein.fr/posts/2021-01-28-python-project-checklist&#34;&gt;A Python project checklist&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Celery&lt;/h3&gt; &#xA;&lt;p&gt;Celery is a distributed async tasks runner.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.balthazar-rouberol.com/celery-best-practices&#34;&gt;Celery best practices&lt;/a&gt;, Balthazar&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;Building command line interfaces.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.notia.ai/articles/building-an-authenticated-python-cli&#34;&gt;Building an authenticated Python CLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Architecture&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rhodesmill.org/brandon/slides/2014-07-pyohio/clean-architecture/&#34;&gt;The clean architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pcah/python-clean-architecture&#34;&gt;python-clean-architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📖 &lt;a href=&#34;https://www.cosmicpython.com/&#34;&gt;Cosmic Python&lt;/a&gt;: simple patterns for building complex Python application (free) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Domain modeling and DDD&lt;/li&gt; &#xA;   &lt;li&gt;Repository, Service Layer, and Unit of Work patterns&lt;/li&gt; &#xA;   &lt;li&gt;Event-driven architecture&lt;/li&gt; &#xA;   &lt;li&gt;Command-query responsibility segregation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://architecturenotes.co/datasette-simon-willison/&#34;&gt;Arc Note: Datasette&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Concurrency&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytes.yingw787.com/posts/2019/01/11/concurrency_with_python_why/&#34;&gt;Concurrency with Python&lt;/a&gt;: a pretty complete series of articles that goes into threads, functional programming, actor models, CSP, coroutines and data intensive architectures.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tech.preferred.jp/en/blog/working-with-configuration-in-python/&#34;&gt;Best Practices for Working with Configuration in Python Applications&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use identifiers rather than string keys to access configuration values.&lt;/li&gt; &#xA;   &lt;li&gt;Use static typing&lt;/li&gt; &#xA;   &lt;li&gt;Validate early.&lt;/li&gt; &#xA;   &lt;li&gt;Declare close to where it is used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://whalesalad.com/blog/doing-python-configuration-right&#34;&gt;Doing Python Configuration Right&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Static things that don&#39;t change often, or things that dramatically influence the behavior of the system should live in the code.&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic things that change frequently, or things that should be kept secret (API keys/credentials) should live outside the code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snarky.ca/use-toml-for-env-files/&#34;&gt;Use TOML for &lt;code&gt;.env&lt;/code&gt; files?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General introduction: &lt;a href=&#34;http://blog.ionelmc.ro/2013/06/05/python-debugging-tools/&#34;&gt;Python debugging tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A better debugger: &lt;a href=&#34;http://heather.cs.ucdavis.edu/~matloff/pudb.html&#34;&gt;pudb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zapier.com/engineering/debugging-python-boss/&#34;&gt;Debugging Python Like a Boss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.syntaxerror.tech/syntax-error-11-debugging-python/&#34;&gt;Syntax Error #11: Debugging Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;See also the more generic Docker section in &lt;a href=&#34;https://github.com/charlax/professional-programming#docker&#34;&gt;charlax/professional-programming&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonspeed.com/docker/&#34;&gt;Production-ready Docker packaging for Python developers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Design patterns&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pysnap.com/design-patterns-explained/&#34;&gt;Design patterns explained&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://python-3-patterns-idioms-test.readthedocs.org/en/latest/index.html&#34;&gt;Python 3 Patterns, Recipes and Idioms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/&#34;&gt;Decorators in 12 steps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tylerlaberge/PyPattyrn&#34;&gt;Design pattern templates in Python&lt;/a&gt; (Github)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.toptal.com/python/python-design-patterns&#34;&gt;Python Design Patterns Guide&lt;/a&gt;: a nice intro to design patterns in Python&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/faif/python-patterns&#34;&gt;faif/python-patterns&lt;/a&gt;: a collection of design patterns and idioms in Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python-patterns.guide/&#34;&gt;Python Design Patterns&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://python-patterns.guide/gang-of-four/composition-over-inheritance/&#34;&gt;The Composition Over Inheritance Principle&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eugeneyan.com/writing/design-patterns/&#34;&gt;Design Patterns in Machine Learning Code and Systems&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I maintain a &lt;a href=&#34;https://raw.githubusercontent.com/charlax/python-education/master/python-antipatterns.md&#34;&gt;list of antipatterns&lt;/a&gt; on this repo.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pandas-dev/pandas/raw/main/doc&#34;&gt;pandas&lt;/a&gt; is a great example to follow (using Sphinx, separating into quickstart, user guide, API reference).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_numpy.html&#34;&gt;Example NumPy Style Python Docstrings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://death.andgravity.com/output&#34;&gt;Why you should still read the docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example, inspiration and template packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charlax/cookiecutter-python-api&#34;&gt;charlax/cookiecutter-python-api: a cookiecutter template for an HTTP API&lt;/a&gt; with lots of best practices: mypy, flake8, isort, black, Makefile, fastapi, DDD pattern, file organization, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Authorization: &lt;a href=&#34;https://github.com/holinnn/deny&#34;&gt;holinnn/deny&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Exception&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://realpython.com/the-most-diabolical-python-antipattern/&#34;&gt;The Most Diabolical Python Antipattern&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;File organisation (monorepo, folders, etc.)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/opendoor-labs/our-python-monorepo-d34028f2b6fa&#34;&gt;OpenDoor&#39;s Python Monorepo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dropbox.tech/infrastructure/atlas--our-journey-from-a-python-monolith-to-a-managed-platform&#34;&gt;Atlas: Our journey from a Python monolith to a managed platform&lt;/a&gt; (Dropbox)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://monadical.com/posts/from-chaos-to-cohesion.html&#34;&gt;From Chaos to Cohesion: Architecting Your Own Monorepo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Functional programming&lt;/h3&gt; &#xA;&lt;p&gt;Consider checking out the same section on my &lt;a href=&#34;https://github.com/charlax/professional-programming#functional-programming-fp&#34;&gt;charlax/professional-programming&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pydanny.com/python-partials-are-fun.html&#34;&gt;Python Partials are Fun!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sfermigier/awesome-functional-python&#34;&gt;sfermigier/awesome-functional-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://martinheinz.dev/blog/52&#34;&gt;Functools - The Power of Higher-Order Functions in&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dbrattli/OSlash/wiki/Functors,-Applicatives,-And-Monads-In-Pictures&#34;&gt;Functors, Applicatives, And Monads In Pictures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nikgrozev.com/2013/12/10/monads-in-15-minutes/&#34;&gt;Monads in 15 minutes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/more-itertools/more-itertools&#34;&gt;more-itertools/more-itertools&lt;/a&gt;: more routines for operating on iterables, beyond itertools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmesyou/functional-programming-jargon.py&#34;&gt;jmesyou/functional-programming-jargon.py&lt;/a&gt;: jargon from the functional programming world in simple terms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Internals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://jakevdp.github.io/blog/2014/05/09/why-python-is-slow/&#34;&gt;Why Python is Slow: Looking Under the Hood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://guilload.com/python-string-interning/&#34;&gt;The internals of Python string interning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rhodesmill.org/brandon/slides/2014-04-pycon/data-structures/&#34;&gt;Python Data structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tech.blog.aknin.name/2010/04/02/pythons-innards-introduction/&#34;&gt;Python’s Innards: Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/floatingpoint.html&#34;&gt;15. Floating Point Arithmetic: Issues and Limitations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Python behind the scenes series:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tenthousandmeters.com/blog/python-behind-the-scenes-11-how-the-python-import-system-works/&#34;&gt;Python behind the scenes #11: how the Python import system works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tenthousandmeters.com/blog/python-behind-the-scenes-10-how-python-dictionaries-work/&#34;&gt;Python behind the scenes #10: how Python dictionaries work&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tenthousandmeters.com/blog/python-behind-the-scenes-13-the-gil-and-its-effects-on-python-multithreading/&#34;&gt;Python behind the scenes #13: the GIL and its effects on Python multithreading&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Magic methods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.rafekettler.com/magicmethods.html&#34;&gt;A Guide to Python&#39;s Magic Methods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Open source Python apps&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s often a good idea to read the Python source code of well-written applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mahmoud/awesome-python-applications&#34;&gt;mahmoud/awesome-python-applications&lt;/a&gt;: free software that works great, and also happens to be open-source Python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Packages (finding and using them)&lt;/h3&gt; &#xA;&lt;p&gt;How to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://caremad.io/2013/07/setup-vs-requirement/&#34;&gt;setup.py vs. requirements.txt&lt;/a&gt;: this is an important gotcha for any library developer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://modelpredict.com/python-dependency-management-tools&#34;&gt;Overview of python dependency management tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://meribold.org/python/2018/02/13/virtual-environments-9487/&#34;&gt;Virtual Environments Demystified&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control&#34;&gt;Commit your &lt;code&gt;poetry.lock&lt;/code&gt; file to version control&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lists:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python&#34;&gt;Awesome Python&lt;/a&gt; provides a great list of third party libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ml-tooling/best-of-web-python&#34;&gt;ml-tooling/best-of-web-python&lt;/a&gt;: awesome Python libraries for web development&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Packages (opinionated list)&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a short list of great packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://github.com/willmcgugan/rich&#34;&gt;willmcgugan/rich&lt;/a&gt;: rich text and beautiful formatting in the terminal&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://tqdm.github.io/&#34;&gt;tqdm&lt;/a&gt;: wrap any iterable and show a smart progress meter&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://github.com/tomerfiliba/plumbum&#34;&gt;tomerfiliba/plumbum&lt;/a&gt;: shell combinators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some other cool packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Acreom/quickadd&#34;&gt;Acreom/quickadd: parse natural language time and date expressions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Packaging (creating your own package)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packaging.python.org/&#34;&gt;Packaging guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/&#34;&gt;Open Sourcing a Python Project the Right Way&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.mathieu-leplatre.info/tips-for-your-makefile-with-python.html&#34;&gt;Tips for your Makefile with Python&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Environment variables with default&lt;/li&gt; &#xA;   &lt;li&gt;Full Example with Poetry&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://github.com/commitizen-tools/commitizen&#34;&gt;commitizen-tools/commitizen&lt;/a&gt;: create committing rules for projects, auto bump versions and auto changelog generation&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://github.com/nedbat/scriv&#34;&gt;nedbat/scriv&lt;/a&gt;: changelog management tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ricardoanderegg.com/posts/makefile-python-project-tricks/&#34;&gt;Makefile tricks for Python projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parsing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sadh.life/post/ast/&#34;&gt;Learn Python ASTs, by building your own linter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⭐️ &lt;a href=&#34;https://pythonspeed.com/memory/&#34;&gt;Process large datasets without running out of memory&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pythonspeed.com/articles/measuring-memory-python/&#34;&gt;Measuring memory usage in Python: it’s tricky!&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.huyng.com/posts/python-performance-analysis/&#34;&gt;A guide to analyzing Python performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/profile.html&#34;&gt;cProfile module documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dein.fr/posts/2013-05-22-using-qcachegrind-to-visualize-python-profiling&#34;&gt;Using qcachegrind to visualize profiling data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonspeed.com/articles/vectorization-python/&#34;&gt;How vectorization speeds up your Python code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://glyph.twistedmatrix.com/2022/04/you-should-compile-your-python-and-heres-why.html&#34;&gt;You Should Compile Your Python And Here’s Why&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonspeed.com/articles/python-gil/&#34;&gt;When Python can’t thread: a deep-dive into the GIL’s impact&lt;/a&gt;, PythonSpeed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When does a Python thread need to hold the GIL?&lt;/li&gt; &#xA;   &lt;li&gt;The parallelism implications of the GIL&lt;/li&gt; &#xA;   &lt;li&gt;The good scenario: Long-running C APIs that release the GIL&lt;/li&gt; &#xA;   &lt;li&gt;Bad scenario #1: “pure” Python code&lt;/li&gt; &#xA;   &lt;li&gt;Bad scenario #2: Long-running C/Rust APIs, but author forgot to release GIL&lt;/li&gt; &#xA;   &lt;li&gt;Bad scenario #3: Low-level code with pervasive Python C API usage&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pythonspeed.com/articles/consistent-benchmarking-in-ci/&#34;&gt;CI for performance: Reliable benchmarking in noisy environments&lt;/a&gt;, PythonSpeed &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Problem #1: Inconsistent results on a single machine&lt;/li&gt; &#xA;   &lt;li&gt;Problem #2: Inconsistent results across machines&lt;/li&gt; &#xA;   &lt;li&gt;Use Cachegrind&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Stories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://julien.danjou.info/blog/2015/guide-to-python-profiling-cprofile-concrete-case-carbonara&#34;&gt;Profiling Python using cProfile: a concrete case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ymichael.com/2014/03/08/profiling-python-with-cprofile.html&#34;&gt;Example cProfile session&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/how-we-optimized-python-api-server-code-100x-9da94aa883c5&#34;&gt;How we optimized Python API server code 100x&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tinkering.xyz/fmo-optimization-story/&#34;&gt;An optimization story&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;http://jiffyclub.github.io/snakeviz/&#34;&gt;SnakeViz&lt;/a&gt; is a browser based graphical viewer for the output of Python’s cProfile module.&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;http://www.vrplumber.com/programming/runsnakerun/&#34;&gt;RunSnakeRun&lt;/a&gt; is a small GUI utility that allows you to view (Python) cProfile or Profile profiler dumps in a sortable GUI view.&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://github.com/plasma-umass/scalene&#34;&gt;plasma-umass/scalene&lt;/a&gt;: a high-performance, high-precision CPU, GPU, and memory profiler&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://pytest-benchmark.readthedocs.io/en/stable/&#34;&gt;pytest-benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://github.com/benfred/py-spy&#34;&gt;benfred/py-spy&lt;/a&gt;: sampling CPU profiler written in Rust for low overhead&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;a href=&#34;https://github.com/pythonspeed/filprofiler&#34;&gt;pythonspeed/filprofiler&lt;/a&gt;: memory profiler for data processing and scientific computing applications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Preparing for interviews&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/donnemartin/interactive-coding-challenges&#34;&gt;donnemartin/interactive-coding-challenges&lt;/a&gt;: 120+ interactive Python coding interview challenges (algorithms and data structures). Includes Anki flashcards.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Quirks and gotchas&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/101268/hidden-features-of-python&#34;&gt;Hidden features of Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sahandsaba.com/thirty-python-language-features-and-tricks-you-may-not-know.html&#34;&gt;30 Python Language Features and Tricks You May Not Know About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.b-list.org/weblog/2015/oct/13/wats-doc/&#34;&gt;A collection of Python &#34;wat&#34; moments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/satwikkansal/wtfpython&#34;&gt;satwikkansal/wtfpython: a collection of interesting, subtle, and tricky Python snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Ned Batchelder, &lt;a href=&#34;https://nedbatchelder.com/text/names.html&#34;&gt;Facts and myths about Python names and values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/tutorial/floatingpoint.html&#34;&gt;Floating Point Arithmetic: Issues and Limitations&lt;/a&gt;, Python Docs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Regular expressions (regex)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/learnbyexample/py_regular_expressions/tree/master/interactive_exercises&#34;&gt;Interactive regex exercises&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://death.andgravity.com/f-re&#34;&gt;The unreasonable effectiveness of f-strings and re.VERBOSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://glyph.twistedmatrix.com/2020/08/never-run-python-in-your-downloads-folder.html&#34;&gt;Never Run ‘python’ In Your Downloads Folder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ossillate-inc/packj&#34;&gt;ossillate-inc/packj: The vetting tool 🚀 behind our large-scale security analysis platform to detect malicious/risky open-source packages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SQLAlchemy&lt;/h3&gt; &#xA;&lt;p&gt;SQLAlchemy is the de facto standard ORM for Python. It has a unique approach: contrary to most ORM, it tries very hard not to hide the SQL implementation details from you. This is great because it forces you to really understand the underlying DB.&lt;/p&gt; &#xA;&lt;p&gt;Here is some slightly outdated content that is super useful to fully leverage the library:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Watch the &lt;a href=&#34;https://www.youtube.com/watch?v=sO7FFPNvX2s&amp;amp;ab_channel=SixFeetUpCorp&#34;&gt;SQLAlchemy introduction video&lt;/a&gt;. It lasts 3 hours but is extremely insightful, and introduces to some great object oriented patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pyvideo.org/video/665/hand-coded-applications-with-sqlalchemy&#34;&gt;Handcoded application with SQLAlchemy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://alembic.readthedocs.org/en/latest/&#34;&gt;Alembic&lt;/a&gt; is a lightweight database migration tool for usage with the SQLAlchemy Database Toolkit for Python.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Standard library modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://treyhunner.com/2019/05/python-builtins-worth-learning/&#34;&gt;Python built-in functions to know&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sadh.life/post/builtins/&#34;&gt;Understanding all of Python, through its builtins&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some little known standard library modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/shelve.html&#34;&gt;shelve&lt;/a&gt;: Python object persistence&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Static analysis of code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://aboumrad.info/essential-python-tools-quality.html&#34;&gt;Essential python tools - Quality&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Half of coding time is usually spent writing tests. Yet how to write tests efficiently is very rarely taught at school - even though it came make a huge difference in engineering productivity and quality.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure you&#39;re familiar with the different kind of testing strategies laid out in &lt;a href=&#34;http://martinfowler.com/articles/microservice-testing/&#34;&gt;Testing Strategies in a Microservices Architecture&lt;/a&gt; (Martin Fowler).&lt;/p&gt; &#xA;&lt;p&gt;Then, read some of those articles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://hernantz.github.io/mock-yourself-not-your-tests.html&#34;&gt;Mock yourself, not your tests&lt;/a&gt;: great articles about the danger of mocking, and better unit testing strategies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://salmonmode.github.io//2019/03/29/building-good-tests.html&#34;&gt;Building Good Tests&lt;/a&gt;, Chris NeJame &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;1 assert per test function/method and nothing else&lt;/li&gt; &#xA;   &lt;li&gt;Use standard assert statements, instead of the unittest.TestCase assert methods&lt;/li&gt; &#xA;   &lt;li&gt;Test behavior, not implementation&lt;/li&gt; &#xA;   &lt;li&gt;Only verify state-changing method calls&lt;/li&gt; &#xA;   &lt;li&gt;Test the result, not the process&lt;/li&gt; &#xA;   &lt;li&gt;Every test should be able to be run in parallel with any other test&lt;/li&gt; &#xA;   &lt;li&gt;A test should never be flaky&lt;/li&gt; &#xA;   &lt;li&gt;Try to avoid mocking things whenever possible.&lt;/li&gt; &#xA;   &lt;li&gt;Test coverage is not a metric for what was tested; it’s a metric for what code your tests managed to hit&lt;/li&gt; &#xA;   &lt;li&gt;The code should be easy to test * Make your test code succinct and idiomatic&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pytest.org/latest/&#34;&gt;pytest&lt;/a&gt; is a test framework. It&#39;s very elegant and allows to quickly write very maintainable tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.thea.codes/my-python-testing-style-guide/&#34;&gt;My Python testing style guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Assert results and outcome, not the steps needed to get there&lt;/li&gt; &#xA;   &lt;li&gt;Use real objects for collaborators whenever possible&lt;/li&gt; &#xA;   &lt;li&gt;A mock must always have a spec&lt;/li&gt; &#xA;   &lt;li&gt;Consider using a stub or fake&lt;/li&gt; &#xA;   &lt;li&gt;Consider using a spy&lt;/li&gt; &#xA;   &lt;li&gt;Don&#39;t give mock/stubs/fakes special names&lt;/li&gt; &#xA;   &lt;li&gt;Use factory helpers to create complex collaborators&lt;/li&gt; &#xA;   &lt;li&gt;Use fixtures sparingly&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tools built with Python&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CZ-NIC/pz&#34;&gt;pz&lt;/a&gt;: easily handle day to day CLI operation via Python instead of regular Bash programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bernat.tech/the-state-of-type-hints-in-python/&#34;&gt;The state of type hints in Python&lt;/a&gt;: a good summary of typing in Python and its gotchas.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://rednafi.github.io/reflections/static-typing-python-decorators.html&#34;&gt;Static Typing Python Decorators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.daan.fyi/writings/python-protocols&#34;&gt;Static Duck Typing in Python with Protocols&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unicode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.azavea.com/blogs/labs/2014/03/solving-unicode-problems-in-python-2-7/&#34;&gt;Solving Unicode Problems in Python 2.7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/howto/unicode.html&#34;&gt;Unicode Howto in Python 3&lt;/a&gt; (official Python documentation).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.joelonsoftware.com/articles/Unicode.html&#34;&gt;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reference and other lists&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.fullstackpython.com/best-python-resources.html&#34;&gt;Best Python Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python&#34;&gt;Awesome Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCgxzjK6GuOHVKR_08TT4hJQ&#34;&gt;PyCon 2015&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Invent With Python, &lt;a href=&#34;http://inventwithpython.com/blog/2015/09/01/further-reading-intermediate-python-resources/&#34;&gt;Further Reading: Intermediate Python Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Staying up to date&lt;/h2&gt; &#xA;&lt;p&gt;There are two main newsletters for Python, which mostly cover the same things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pycoders.com/&#34;&gt;Pycoder&#39;s Weekly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pythonweekly.com/&#34;&gt;Python Weekly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also checkout the &lt;a href=&#34;https://www.reddit.com/r/Python/&#34;&gt;Python subreddit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Non-Python professional coding education&lt;/h2&gt; &#xA;&lt;p&gt;Read this up on my &lt;a href=&#34;https://github.com/charlax/professional-programming&#34;&gt;professional programming doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get in touch, checkout &lt;a href=&#34;https://www.dein.fr/&#34;&gt;my website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;My other lists&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charlax/engineering-management/&#34;&gt;engineering-management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charlax/entrepreneurship-resources&#34;&gt;entrepreneurship-resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charlax/professional-programming&#34;&gt;professional-programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charlax/python-education&#34;&gt;python-education&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>carlini/yet-another-applied-llm-benchmark</title>
    <updated>2024-02-23T01:36:37Z</updated>
    <id>tag:github.com,2024-02-23:/carlini/yet-another-applied-llm-benchmark</id>
    <link href="https://github.com/carlini/yet-another-applied-llm-benchmark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A benchmark to evaluate language models on questions I&#39;ve previously asked them to solve.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Yet Another Applied LLM Benchmark&lt;/h1&gt; &#xA;&lt;p&gt;This is a benchmark I made, for me, to test how well language models perform on tasks I care about. I know I care about them because each test is directly derived from something I&#39;ve asked a LLM to perform for me in the last year.&lt;/p&gt; &#xA;&lt;p&gt;For example, there are tests in this benchmark that evaluate the ability of a model to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;convert a python function to an equivalent-but-faster c function;&lt;/li&gt; &#xA; &lt;li&gt;decompile python bytecode to functional source code;&lt;/li&gt; &#xA; &lt;li&gt;explain the functionality of minified javascript;&lt;/li&gt; &#xA; &lt;li&gt;identify the encoding format (in this case, uuencoded) of some data;&lt;/li&gt; &#xA; &lt;li&gt;write a parser from a BNF-like grammar;&lt;/li&gt; &#xA; &lt;li&gt;convert some english sentences to SQL queries; or,&lt;/li&gt; &#xA; &lt;li&gt;write some bash oneliners&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are two defining features of this benchmark that make it interesting:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;I&#39;ve implemented a simple dataflow domain specific language to make it easy for me (or anyone else!) to add new tests that realistically evaluate model capabilities.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Directly as a result of this, I&#39;ve written nearly 100 tests for different situations I&#39;ve actually encountered when working with LLMs as assistants.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example, here&#39;s a complete test to evaluate if a model can write a &#34;hello world&#34; program.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Write a &#34;hello world&#34; program in python&#39; &amp;gt;&amp;gt; LLMRun() &amp;gt;&amp;gt; PythonRun() &amp;gt;&amp;gt; SubstringEvaluator(&#34;hello world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I first ask the model to write hello world, then run that program (in a docker container, seamlessly behind the scenes), and then check if stdout contains &#34;hello world&#34;. (You should read the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator as &#34;and then do&#34;. So &#34;a &amp;gt;&amp;gt; b&#34; means &#34;do a, and then do b&#34;.)&lt;/p&gt; &#xA;&lt;p&gt;More interestingly, here&#39;s a test case that first asks a model to produce code that draws a flag. To evaluate it, I run the code, partially judge it with another language model, and then fully evaluate the output by comparing to a reference solution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#34;Write a C program that draws an american flag to stdout.&#34; &amp;gt;&amp;gt; LLMRun() &amp;gt;&amp;gt; CRun() &amp;gt;&amp;gt; \&#xA;    LLMRun(&#34;What flag is shown in this image?&#34;) &amp;gt;&amp;gt; \&#xA;        (SubstringEvaluator(&#34;United States&#34;) | SubstringEvaluator(&#34;USA&#34;) | SubstringEvaluator(&#34;America&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This DSL makes it easy for me to evaluate significantly more diverse and more sophisticated behavior than any other evaluation benchmark I&#39;m aware of. This is helpful for determining whether or not models are capable of performing tasks I actually care about.&lt;/p&gt; &#xA;&lt;h2&gt;Results&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve evaluated a few models on this benchmark. Here&#39;s how they perform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GPT-4: 49% passed&lt;/li&gt; &#xA; &lt;li&gt;GPT-3.5: 30% passed&lt;/li&gt; &#xA; &lt;li&gt;Claude 2.1: 31% passed&lt;/li&gt; &#xA; &lt;li&gt;Claude Instant 1.2: 23% passed&lt;/li&gt; &#xA; &lt;li&gt;Mistral Medium: 25% passed&lt;/li&gt; &#xA; &lt;li&gt;Mistral Small 21% passed&lt;/li&gt; &#xA; &lt;li&gt;Gemini Pro: 21% passed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A complete evaluation grid is available &lt;a href=&#34;https://nicholas.carlini.com/writing/2024/evaluation_examples/index.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What this is not&lt;/h2&gt; &#xA;&lt;p&gt;A serious academic benchmark.&lt;/p&gt; &#xA;&lt;p&gt;In more words: this is not meant to try to rigorously evaluate the capabilities of models on any particular task. It&#39;s not meant to be something you can use to decide which model is more capable, more knowledgeable, more factual, less biased, less harmful, more aligned, more helpful, or anything else.&lt;/p&gt; &#xA;&lt;p&gt;The questions are not optimally prompt-engineered. It is entirely possible---and indeed likely!---that a better phrasing of some of the questions would allow the model to give a better answer.&lt;/p&gt; &#xA;&lt;p&gt;But I am lazy.&lt;/p&gt; &#xA;&lt;p&gt;I do not want to remind the model it is AN EXPERT IN PYTHON and tell it that I&#39;ll give it a $100,000 tip for giving the right answer OR I WILL MURDER A KITTEN but please pause....take a deep breath....and think step by step by step before answering. (Or whatever the current incantation is people use to get models to work best.)&lt;/p&gt; &#xA;&lt;p&gt;I just want to type my question and get the right answer. So this benchmark tests for that, on types of questions I&#39;ve actually cared about having answered.&lt;/p&gt; &#xA;&lt;h3&gt;Failing a question doesn&#39;t mean much&lt;/h3&gt; &#xA;&lt;p&gt;As a result of my (often intentional) lack of prompt engineering, when a model fails a question, you won&#39;t learn very much. Maybe my question was just poorly worded. Maybe it was ambiguous in some way.&lt;/p&gt; &#xA;&lt;p&gt;Instead, these tests are designed so that I learn something when the model passes. You don&#39;t luck your way into correctly compiling Rust programs without having some skill at the language. But you might luck your way into failing by naming the function something I didn&#39;t expect and so your correct code just is never invoked.&lt;/p&gt; &#xA;&lt;h2&gt;What this is&lt;/h2&gt; &#xA;&lt;p&gt;Again, it&#39;s just a collection of questions I&#39;ve actually asked language models to solve for me to help with various programming tasks, interspursed with a few questions I&#39;ve asked language models just for fun. The questions are, for the most part, unmodified questions as I typed them. This means they may not be the most clearly worded (e.g., &lt;code&gt;In python what __thing__ do I use for ~, kind of like how __add__ is for +&lt;/code&gt;, with the answser I&#39;m expecting is &lt;code&gt;__inv__&lt;/code&gt;). Other questions are &#34;unfair&#34; because they require recent knowledge (e.g., &#34;what is the hidden dimension of llama-2 70b?&#34;). But I care if a model can answer these correctly for me.&lt;/p&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;Getting this benchmark up and running is fairly straightforward.&lt;/p&gt; &#xA;&lt;h2&gt;Python requirements&lt;/h2&gt; &#xA;&lt;p&gt;On the python side you&#39;ll just need to run &lt;code&gt;pip install -r requirements.txt&lt;/code&gt; to install the python dependencies.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run it and evaluate a wide range of models you&#39;ll also need &lt;code&gt;pip install -r requirements-extra.txt&lt;/code&gt; to install the other models.&lt;/p&gt; &#xA;&lt;h2&gt;Podman (preferred)&lt;/h2&gt; &#xA;&lt;p&gt;I want to run things in a container to keep them basically safe. Docker is nicer and has slightly better security controls (and so you can use that if you want below) but on linux you need to be root or give your user almost-root permissions to start new docker jobs. This scares me a bit.&lt;/p&gt; &#xA;&lt;p&gt;So I prefer to use podman. Install it however you&#39;re supposed to for your system.&lt;/p&gt; &#xA;&lt;h2&gt;Docker (optional)&lt;/h2&gt; &#xA;&lt;p&gt;Again this is fairly system dependent so you&#39;ll have to go somewhere else to find out how to install it for your system.&lt;/p&gt; &#xA;&lt;h2&gt;Why do I need docker/podman?&lt;/h2&gt; &#xA;&lt;p&gt;The test cases in this benchmark are evaluated by directly executing code that comes out of a language model. Some tests ask the model to rename files, move files around, or make other state-changing operations to your machine.&lt;/p&gt; &#xA;&lt;p&gt;While I don&#39;t think these models have it out for us and will emit &lt;code&gt;rm -rf /&lt;/code&gt; out of malice or spite, it&#39;s entirely possible (and even likely!) that they&#39;ll produce buggy code that will just accidentally trash your computer. So, to safeguard against this, all LLM output is evaluated from within a temporary docker container that gets deleted immediately after the test is complete.&lt;/p&gt; &#xA;&lt;p&gt;(There&#39;s also another reason, though: some of the tests assume a fresh install of Ubuntu with particular dependencies in various places. These tests might behave differently on your local machine than they do from within the docker VM.)&lt;/p&gt; &#xA;&lt;p&gt;If you like to live dangerously (VERY MUCH NOT RECOMENDED) then there is a flag in the code &lt;code&gt;I_HAVE_BLIND_FAITH_IN_LLMS_AND_AM_OKAY_WITH_THEM_BRICKING_MY_MACHINE_OR_MAKING_THEM_HALT_AND_CATCH_FIRE&lt;/code&gt; that you can set to True and then this will just eval() everything that comes out of the LLMs on your machine directly.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve installed everything, there are a few setup steps before you can run the benchmark.&lt;/p&gt; &#xA;&lt;h2&gt;Add API keys&lt;/h2&gt; &#xA;&lt;p&gt;You should add API keys for any model you want to evaluate. The keys are stored in the config.json file. You can find a template at &lt;a href=&#34;https://raw.githubusercontent.com/carlini/yet-another-applied-llm-benchmark/main/config.json.example&#34;&gt;config.json.example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whatever model you are testing, you will also need to load API keys for OpenAI as the default evaluation model. This is because a few of the questions require evaluation by a second language model to judge correctness. These secondary evaluations are as simple as possible, but using a high-quality model here is helpful to ensure consistency in the results.&lt;/p&gt; &#xA;&lt;p&gt;I have had good success using gpt-4-turbo as the evaluation model, but you can configure any model that you want as the evaluator. In my experiments, I had almost identical results with the (cheaper) gpt-3.5-turbo, but in a few cases having the more capable evaluation model gives more reliable results.&lt;/p&gt; &#xA;&lt;h2&gt;Set up docker/podman container [highly recommended]&lt;/h2&gt; &#xA;&lt;p&gt;To start you&#39;ll need to create the docker container where the tests will run. This will first require that you install docker on your machine. Once you&#39;ve done that, you can then build the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t llm-benchmark-image . # if you&#39;re using docker&#xA;podman build -t llm-benchmark-image . # if you&#39;re using podman&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Set up selenium/chrome&lt;/h2&gt; &#xA;&lt;p&gt;A few test cases require Selenium and Chrome to test if models can generate valid html/javascript programs. Installing the requirements file should install selenium for you, but you&#39;ll also need to make sure you install chrome. If you&#39;re on ubuntu then you can just run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&#xA;sudo dpkg -i google-chrome-stable_current_amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Running the benchmark&lt;/h1&gt; &#xA;&lt;p&gt;Once you&#39;ve set up your environment, you can run the entire benchmark in just one line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py --model gpt-3.5-turbo --run-tests --generate-report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will run every single test that&#39;s configured on one model. It will therefore take some time, and also will cost you a few dollars in language model queries. After you can view the full reslt html file in the directory &lt;code&gt;evaluation_examples&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It will also save a cache of this run, so that the next time you can run a new model and view the two results side-by-side.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run individual test cases, you can do that too in two ways. One is to just directly run test&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PYTHONPATH=&#39;.&#39; python tests/print_hello.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explore the &lt;code&gt;run_a_simple_testcase.ipynb&lt;/code&gt; notebook to quickly run a sample test case on Colab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The other, if you want to save the result of this run so you can load it later, is to run the main script and specify which test(s) you want to run. (Be careful if you do this, though, beacuse it will overwrite any prior run.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python main.py --test print_hello --run-tests --model gpt-3.5-turbo-0125&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Modifying the benchmark&lt;/h1&gt; &#xA;&lt;h2&gt;Adding your own LLM&lt;/h2&gt; &#xA;&lt;p&gt;This framework is fairly modular. If you&#39;d like to test a new LLM, you&#39;ll just need to add a new file to llms/[model_name]_model.py which implements an inference function. From there, modify &lt;a href=&#34;https://raw.githubusercontent.com/carlini/yet-another-applied-llm-benchmark/main/llm.py&#34;&gt;llm.py&lt;/a&gt; to include the appropriate model.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new test cases&lt;/h2&gt; &#xA;&lt;p&gt;As discussed above, I&#39;ve built a small dataflow DSL to implement test cases. This should let anyone add new test cases fairly easily. Let me repeat the initial test case examples in full:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TestHelloWorld = &#39;Print &#34;hello world&#34; in python&#39; &amp;gt;&amp;gt; LLMRun() &amp;gt;&amp;gt; \&#xA;      ExtractCode() &amp;gt;&amp;gt; PythonRun() &amp;gt;&amp;gt; SubstringEvaluator(&#34;hello world&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recall that you should read the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator as &#34;and then do&#34;. If you&#39;re a bash person, it&#39;s like a &lt;code&gt;|&lt;/code&gt; pipe. If you&#39;re a haskel person, it&#39;s like the &lt;code&gt;$&lt;/code&gt; operator.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We start by running the LLM we want to test with the prompt: Print &#34;hello world&#34; in python.&lt;/li&gt; &#xA; &lt;li&gt;The model will probably give some code, but might also give an explanation or start by saying &#34;Sure! I can answer your question.&#34; So we take whatever output came out of the model and pass it through a function to just extract the first code block.&lt;/li&gt; &#xA; &lt;li&gt;We then actually go and run this python code, whatever it is. To be somewhat safe we do this by spawning a new docker env and run the code there.&lt;/li&gt; &#xA; &lt;li&gt;And finally, we verify that the code was correct, and the output of the python contains a substring of &#34;hello world&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This dataflow pipeline also lets you do more complex verification. Below is the same example as from the top where I evaluate a model&#39;s ability to understand how to draw .bmp images.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TestFlagDraw = &#34;Write a C program that draws an american flag to stdout as a bmp.&#34; &amp;gt;&amp;gt; \&#xA;       ExtractCode() &amp;gt;&amp;gt; CRun() &amp;gt;&amp;gt; LLMVisionRun(&#34;What flag is shown in this image?&#34;) &amp;gt;&amp;gt; \&#xA;          (SubstringEvaluator(&#34;United States&#34;) | \&#xA;           SubstringEvaluator(&#34;USA&#34;) | \&#xA;           SubstringEvaluator(&#34;America&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, after asking the model to draw the flag and running the resulting C code, I evaluate the model by asking &lt;em&gt;another&lt;/em&gt; model what flag has been drawn, and checking if it says something like the US flag. Is this a perfect check? No. But verification is usually easier than generation, and so it&#39;s probably a good enough approximation of what I want.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;d like to add your own tests to this benchmark feel free to open a PR! I&#39;d be happy to accept basically anything interesting.&lt;/p&gt; &#xA;&lt;h2&gt;Adding new tests&lt;/h2&gt; &#xA;&lt;p&gt;There are only a few requirements for adding a test.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Test cases must be mechanistically verifiable. This is very limiting, I know. A whole lot of what I use LLMs for isn&#39;t verifiable in this way. Especially when I&#39;m giving them large blocks of code and asking for specific changes that are hard to unit test. But in order for these to be useful your test must be easy to verify.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test cases should complete quickly. I don&#39;t want to wait several minutes just for one test to run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tests should not be evaluated against LLMs during construction. Don&#39;t modify the test because the model gave an answer you didn&#39;t like. Most LLMs are stochastic enough that there is &lt;em&gt;some&lt;/em&gt; way to elicit most behavior with enough trial and error. I want to see how the model answers with a human-written test, as they are normally asked, before LM refinement.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tests should be designed so that &lt;em&gt;passing&lt;/em&gt; demonstrates some interesting model capability. Making &#34;gotcha&#34; tests that are designed to show models fail in some way are not useful in this setup.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Test cases must not download large amounts of data from the internet. Someone else shouldn&#39;t have to pay for each run of this benchmark. If you need to test a library add it to the Dockerfile.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Fixing tests&lt;/h2&gt; &#xA;&lt;p&gt;Are there any tests here that are broken? I tried my best to make them all correct but can&#39;t guarantee correctness for sure. If so I&#39;d be happy to accept fixes.&lt;/p&gt; &#xA;&lt;p&gt;But please note: a broken test means one where the answer is &lt;strong&gt;objectively wrong&lt;/strong&gt;. Like a test that says 6 is prime. A test that just expects a specific answer to an ambiguous question is not wrong. For example, one test asks &#34;What do I do to fix AutoModel.from_pretrained to make it auto model with lm head&#34; and expects the model to tell me that I should be using the class &#34;AutoModelForCausalLM&#34;; even though the class &#34;AutoModelWithLMHead&#34; exists, that&#39;s not what I was looking for.&lt;/p&gt; &#xA;&lt;h1&gt;I want to cite this in an academic paper&lt;/h1&gt; &#xA;&lt;p&gt;No you probably don&#39;t. At least, you probably don&#39;t if you&#39;re trying to compare why your new model is better or something. This is not meant to be something for academic papers. But I&#39;ve now had at least a few people ask me about this who appear unswayed by the above argument.&lt;/p&gt; &#xA;&lt;p&gt;So here&#39;s my answer: if you want to user this in a paper, then link to this github project AND INCLUDE THE GIT COMMIT HASH YOU USED. I make NO GUARANTEES that I won&#39;t just arbitrarily edit test cases without warning. In fact, it&#39;s already happened in #1! And #3! So if you want your paper to be at all scientific make sure to include the git commit hash.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (C) 2024, Nicholas Carlini &lt;a href=&#34;mailto:nicholas@carlini.com&#34;&gt;nicholas@carlini.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>