<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-14T01:36:43Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>derv82/wifite</title>
    <updated>2024-12-14T01:36:43Z</updated>
    <id>tag:github.com,2024-12-14:/derv82/wifite</id>
    <link href="https://github.com/derv82/wifite" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;THIS PROJECT IS IN LIFE-SUPPORT MODE&lt;/h2&gt; &#xA;&lt;p&gt;This repo tracks the old version of Wifite (&lt;em&gt;v1&lt;/em&gt;) which does not receive frequent updates and has many bugs (check out the &lt;em&gt;Isuses&lt;/em&gt; tab!).&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a new version of Wifite (&lt;em&gt;Wifite2&lt;/em&gt;) available at &lt;a href=&#34;https://github.com/derv82/wifite2&#34;&gt;https://github.com/derv82/wifite2&lt;/a&gt;. &lt;em&gt;Wifite2&lt;/em&gt; has more features, bug fixes, and reliability.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Try the new Wifite2, especially if you&#39;re having problems with Wifite v1&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Wifite is for Linux only.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wifite is an automated wireless attack tool.&lt;/p&gt; &#xA;&lt;p&gt;Wifite was designed for use with pentesting distributions of Linux, such as &lt;a href=&#34;http://www.kali.org/&#34;&gt;Kali Linux&lt;/a&gt;, &lt;a href=&#34;http://www.pentoo.ch/&#34;&gt;Pentoo&lt;/a&gt;, &lt;a href=&#34;http://www.backbox.org&#34;&gt;BackBox&lt;/a&gt;; any Linux distributions with wireless drivers patched for injection. The script appears to also operate with Ubuntu 11/10, Debian 6, and Fedora 16.&lt;/p&gt; &#xA;&lt;p&gt;Wifite must be run as &lt;strong&gt;root&lt;/strong&gt;. This is required by the suite of programs it uses. Running downloaded scripts as root is a bad idea. I recommend using the Kali Linux bootable Live CD, a bootable USB stick (for persistent), or a virtual machine. Note that Virtual Machines cannot directly access hardware so a wireless USB dongle would be required.&lt;/p&gt; &#xA;&lt;p&gt;Wifite assumes that you have a wireless card and the appropriate drivers that are patched for injection and promiscuous/monitor mode.&lt;/p&gt; &#xA;&lt;h2&gt;Execution&lt;/h2&gt; &#xA;&lt;p&gt;To download and execute wifite, run the commands below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;wget https://raw.github.com/derv82/wifite/master/wifite.py&lt;/code&gt;&lt;br&gt; &lt;code&gt;chmod +x wifite.py&lt;/code&gt;&lt;br&gt; &lt;code&gt;./wifite.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Required Programs&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/derv82/wifite/wiki/Installation&#34;&gt;the installation guide&lt;/a&gt; on the wiki for help installing any of the tools below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://python.org/getit/&#34;&gt;&lt;strong&gt;Python 2.7.x&lt;/strong&gt;&lt;/a&gt;. Wifite is a Python script and requires Python to run.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://aircrack-ng.org/&#34;&gt;&lt;strong&gt;aircrack-ng suite&lt;/strong&gt;&lt;/a&gt;. This is absolutely required. The specific programs used in the suite are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;airmon-ng,&lt;/li&gt; &#xA;   &lt;li&gt;airodump-ng,&lt;/li&gt; &#xA;   &lt;li&gt;aireplay-ng,&lt;/li&gt; &#xA;   &lt;li&gt;packetforge-ng, and&lt;/li&gt; &#xA;   &lt;li&gt;aircrack-ng.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Standard linux programs.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iwconfig, ifconfig, which, iw&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Suggested Programs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;*&lt;/code&gt; indicates program is not included in &lt;a href=&#34;http://www.backtrack-linux.org/&#34;&gt;Backtrack 5 R1&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;a href=&#34;https://github.com/t6x/reaver-wps-fork-t6x&#34;&gt;&lt;strong&gt;reaver&lt;/strong&gt;&lt;/a&gt;, a Wifi-Protected Setup (WPS) attack tool. Reaver includes a scanner &#34;walsh&#34; (or &#34;wash&#34;) for detecting WPS-enabled access points. Wifite uses Reaver to scan for and attack WPS-enabled routers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;a href=&#34;https://github.com/JPaulMora/Pyrit&#34;&gt;&lt;strong&gt;pyrit&lt;/strong&gt;&lt;/a&gt;, a GPU cracker for WPA PSK keys. Wifite uses pyrit (if found) to detect handshakes. In the future, Wifite may include an option to crack WPA handshakes via pyrit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tshark&lt;/strong&gt;. Comes bundled with &lt;a href=&#34;http://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;, packet sniffing software.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://www.willhackforsushi.com/Cowpatty.html&#34;&gt;&lt;strong&gt;cowpatty&lt;/strong&gt;&lt;/a&gt;, a WPA PSK key cracker. Wifite uses cowpatty (if found) to detect handshakes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Wifite is licensed under the GNU General Public License version 2 (GNU GPL v2).&lt;/p&gt; &#xA;&lt;p&gt;(C) 2010-2012 Derv Merkler&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mherrmann/helium</title>
    <updated>2024-12-14T01:36:43Z</updated>
    <id>tag:github.com,2024-12-14:/mherrmann/helium</id>
    <link href="https://github.com/mherrmann/helium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lighter web automation with Python&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lighter web automation with Python&lt;/h1&gt; &#xA;&lt;p&gt;Helium is a Python library for automating browsers such as Chrome and Firefox. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mherrmann/helium/master/docs/helium-demo.gif&#34; alt=&#34;Helium Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Helium, you need Python 3 and Chrome or Firefox.&lt;/p&gt; &#xA;&lt;p&gt;I would recommend creating a virtual environment. This lets you install Helium for just your current project, instead of globally on your whole computer.&lt;/p&gt; &#xA;&lt;p&gt;To create and activate a virtual environment, type the following commands into a command prompt window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m venv venv&#xA;# On Mac/Linux:&#xA;source venv/bin/activate&#xA;# On Windows:&#xA;call venv\scripts\activate.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can install Helium with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pip install helium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now enter &lt;code&gt;python&lt;/code&gt; into the command prompt and (for instance) the commands in the animation at the top of this page (&lt;code&gt;from helium import *&lt;/code&gt;, ...).&lt;/p&gt; &#xA;&lt;h2&gt;Your first script&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve compiled a &lt;a href=&#34;https://raw.githubusercontent.com/mherrmann/helium/master/docs/cheatsheet.md&#34;&gt;cheatsheet&lt;/a&gt; that quickly teaches you all you need to know to be productive with Helium.&lt;/p&gt; &#xA;&lt;h2&gt;Connection to Selenium&lt;/h2&gt; &#xA;&lt;p&gt;Under the hood, Helium forwards each call to Selenium. The difference is that Helium&#39;s API is much more high-level. In Selenium, you need to use HTML IDs, XPaths and CSS selectors to identify web page elements. Helium on the other hand lets you refer to elements by user-visible labels. As a result, Helium scripts are typically 30-50% shorter than similar Selenium scripts. What&#39;s more, they are easier to read and more stable with respect to changes in the underlying web page.&lt;/p&gt; &#xA;&lt;p&gt;Because Helium is simply a wrapper around Selenium, you can freely mix the two libraries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# A Helium function:&#xA;driver = start_chrome()&#xA;# A Selenium API:&#xA;driver.execute_script(&#34;alert(&#39;Hi!&#39;);&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So in other words, you don&#39;t lose anything by using Helium over pure Selenium.&lt;/p&gt; &#xA;&lt;p&gt;In addition to its more high-level API, Helium simplifies further tasks that are traditionally painful in Selenium:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;iFrames:&lt;/strong&gt; Unlike Selenium, Helium lets you interact with elements inside nested iFrames, without having to first &#34;switch to&#34; the iFrame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Window management.&lt;/strong&gt; Helium notices when popups open or close and focuses / defocuses them like a user would. You can also easily switch to a window by (parts of) its title. No more having to iterate over Selenium window handles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Implicit waits.&lt;/strong&gt; By default, if you try click on an element with Selenium and that element is not yet present on the page, your script fails. Helium by default waits up to 10 seconds for the element to appear.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explicit waits.&lt;/strong&gt; Helium gives you a much nicer API for waiting for a condition on the web page to become true. For example: To wait for an element to appear in Selenium, you would write: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;element = WebDriverWait(driver, 10).until(&#xA;    EC.presence_of_element_located((By.ID, &#34;myDynamicElement&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; With Helium, you can write: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;wait_until(Button(&#39;Download&#39;).exists)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status of this project&lt;/h2&gt; &#xA;&lt;p&gt;I have too little spare time to maintain this project for free. If you&#39;d like my help, please go to my &lt;a href=&#34;http://herrmann.io&#34;&gt;web site&lt;/a&gt; to ask about my consulting rates. Otherwise, unless it is very easy for me, I will usually not respond to emails or issues on the issue tracker. I will however accept and merge PRs. So if you add some functionality to Helium that may be useful for others, do share it with us by creating a Pull Request. For instructions, please see &lt;a href=&#34;https://raw.githubusercontent.com/mherrmann/helium/master/#Contributing&#34;&gt;Contributing&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;h2&gt;How you can help&lt;/h2&gt; &#xA;&lt;p&gt;I find Helium extremely useful in my own projects and feel it should be more widely known. Here&#39;s how you can help with this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Star this project on GitHub.&lt;/li&gt; &#xA; &lt;li&gt;Tell your friends and colleagues about it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?text=I%20find%20Helium%20very%20useful%20for%20web%20automation%20with%20Python%3A%20https%3A//github.com/mherrmann/helium&#34;&gt;Share it on Twitter with one click&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Share it on other social media&lt;/li&gt; &#xA; &lt;li&gt;Write a blog post about Helium.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With this, I think we can eventually make Helium the de-facto standard for web automation in Python.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull Requests are very welcome. Please follow the same coding conventions as the rest of the code, in particular the use of tabs over spaces. Also, read through my &lt;a href=&#34;https://gist.github.com/mherrmann/5ce21814789152c17abd91c0b3eaadca&#34;&gt;PR guidelines&lt;/a&gt;. Doing this will save you (and me) unnecessary effort.&lt;/p&gt; &#xA;&lt;p&gt;Before you submit a PR, ensure that the tests still work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -Ur requirements/test.txt&#xA;python setup.py test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs the tests against Chrome. To run them against Firefox, set the environment variable &lt;code&gt;TEST_BROWSER&lt;/code&gt; to &lt;code&gt;firefox&lt;/code&gt;. Eg. on Mac/Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;TEST_BROWSER=firefox python setup.py test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;set TEST_BROWSER=firefox&#xA;python setup.py test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do add new functionality, you should also add tests for it. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/mherrmann/helium/master/tests&#34;&gt;&lt;code&gt;tests/&lt;/code&gt;&lt;/a&gt; directory for what this might look like.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;I (Michael Herrmann) originally developed Helium in 2013 for a Polish IT startup called BugFree software. (It could be that you have seen Helium before at &lt;a href=&#34;https://heliumhq.com&#34;&gt;https://heliumhq.com&lt;/a&gt;.) We shut down the company at the end of 2019 and I felt it would be a shame if Helium simply disappeared from the face of the earth. So I invested some time to modernize it and bring it into a state suitable for open source.&lt;/p&gt; &#xA;&lt;p&gt;Helium used to be available for both Java and Python. But because I now only use it from Python, I didn&#39;t have time to bring the Java implementation up to speed as well. Similarly for Internet Explorer: Helium used to support it, but since I have no need for it, I removed the (probably broken) old implementation.&lt;/p&gt; &#xA;&lt;p&gt;The name Helium was chosen because it is also a chemical element like Selenium, but it is lighter.&lt;/p&gt;</summary>
  </entry>
</feed>