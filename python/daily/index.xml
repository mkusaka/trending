<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-11T01:39:14Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>archlinux/archinstall</title>
    <updated>2023-09-11T01:39:14Z</updated>
    <id>tag:github.com,2023-09-11:/archlinux/archinstall</id>
    <link href="https://github.com/archlinux/archinstall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Arch Linux installer - guided, templates etc.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/archlinux/archinstall/raw/master/docs/logo.png&#34; alt=&#34;drawing&#34; width=&#34;200&#34;&gt; &#xA;&lt;!-- &lt;/div&gt; --&gt; &#xA;&lt;h1&gt;Arch Installer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/archlinux/archinstall/actions/workflows/flake8.yaml&#34;&gt;&lt;img src=&#34;https://github.com/archlinux/archinstall/actions/workflows/flake8.yaml/badge.svg?sanitize=true&#34; alt=&#34;Lint Python and Find Syntax Errors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Just another guided/automated &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_Linux&#34;&gt;Arch Linux&lt;/a&gt; installer with a twist. The installer also doubles as a python library to install Arch Linux and manage services, packages and other things inside the installed system &lt;em&gt;(Usually from a live medium)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;archinstall &lt;a href=&#34;https://discord.gg/cqXU88y&#34;&gt;discord&lt;/a&gt; server&lt;/li&gt; &#xA; &lt;li&gt;archinstall &lt;a href=&#34;https://app.element.io/#/room/#archinstall:matrix.org&#34;&gt;matrix.org&lt;/a&gt; channel&lt;/li&gt; &#xA; &lt;li&gt;archinstall &lt;a href=&#34;irc://#archinstall@irc.libera.chat:6697&#34;&gt;#archinstall@irc.libera.chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;archinstall &lt;a href=&#34;https://archinstall.readthedocs.io/&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation &amp;amp; Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo pacman -S archinstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternative ways to install are &lt;code&gt;git clone&lt;/code&gt; the repository or &lt;code&gt;pip install --upgrade archinstall&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running the &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/archinstall/scripts/guided.py&#34;&gt;guided&lt;/a&gt; installer&lt;/h2&gt; &#xA;&lt;p&gt;Assuming you are on an Arch Linux live-ISO or installed via &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# archinstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/archinstall/scripts/guided.py&#34;&gt;guided&lt;/a&gt; installer using &lt;code&gt;git&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# cd archinstall-git&#xA;# cp archinstall/scripts/guided.py&#xA;# python guided.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Advanced&lt;/h4&gt; &#xA;&lt;p&gt;Some additional options that are not needed by most users are hidden behind the &lt;code&gt;--advanced&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Running from a declarative configuration file or URL&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;archinstall&lt;/code&gt; can be run with a JSON configuration file. There are 2 different configuration files to consider, the &lt;code&gt;user_configuration.json&lt;/code&gt; contains all general installation configuration, whereas the &lt;code&gt;user_credentials.json&lt;/code&gt; contains the sensitive user configuration such as user password, root password and encryption password.&lt;/p&gt; &#xA;&lt;p&gt;An example of the user configuration file can be found here &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/examples/config-sample.json&#34;&gt;configuration file&lt;/a&gt; and example of the credentials configuration here &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/examples/creds-sample.json&#34;&gt;credentials file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HINT:&lt;/strong&gt; The configuration files can be auto-generated by starting &lt;code&gt;archinstall&lt;/code&gt;, configuring all desired menu points and then going to &lt;code&gt;Save configuration&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To load the configuration file into &lt;code&gt;archinstall&lt;/code&gt; run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;archinstall --config &amp;lt;path to user config file or URL&amp;gt; --creds &amp;lt;path to user credentials config file or URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available Languages&lt;/h1&gt; &#xA;&lt;p&gt;Archinstall is available in different languages which have been contributed and are maintained by the community. Current translations are listed below and vary in the amount of translations per language&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;English&#xA;Arabic&#xA;Brazilian Portuguese&#xA;Czech&#xA;Dutch&#xA;Estonian&#xA;French&#xA;Georgian&#xA;German&#xA;Indonesian&#xA;Italian&#xA;Korean&#xA;Modern Greek&#xA;Polish&#xA;Portuguese&#xA;Russian&#xA;Spanish&#xA;Swedish&#xA;Tamil&#xA;Turkish&#xA;Ukrainian&#xA;Urdu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any contributions to the translations are more than welcome, to get started please follow &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/archinstall/locales/README.md&#34;&gt;the guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Help or Issues&lt;/h1&gt; &#xA;&lt;p&gt;Submit an issue here on GitHub, or submit a post in the discord help channel.&lt;br&gt; When doing so, attach the &lt;code&gt;/var/log/archinstall/install.log&lt;/code&gt; to the issue ticket. This helps us help you!&lt;/p&gt; &#xA;&lt;h1&gt;Mission Statement&lt;/h1&gt; &#xA;&lt;p&gt;Archinstall promises to ship a &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/archinstall/scripts/guided.py&#34;&gt;guided installer&lt;/a&gt; that follows the &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_Linux#Principles&#34;&gt;Arch Principles&lt;/a&gt; as well as a library to manage services, packages and other Arch Linux aspects.&lt;/p&gt; &#xA;&lt;p&gt;The guided installer will provide user-friendly options along the way, but the keyword here is options, they are optional and will never be forced upon anyone. The guided installer itself is also optional to use if so desired and not forced upon anyone.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Archinstall has one fundamental function which is to be a flexible library to manage services, packages and other aspects inside the installed system. This library is in turn used by the provided guided installer but is also for anyone who wants to script their own installations.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, Archinstall will try its best to not introduce any breaking changes except for major releases which may break backwards compatibility after notifying about such changes.&lt;/p&gt; &#xA;&lt;h1&gt;Scripting your own installation&lt;/h1&gt; &#xA;&lt;h2&gt;Scripting interactive installation&lt;/h2&gt; &#xA;&lt;p&gt;There are some examples in the &lt;code&gt;examples/&lt;/code&gt; directory that should serve as a starting point.&lt;/p&gt; &#xA;&lt;p&gt;The following is a small example of how to script your own &lt;em&gt;interative&lt;/em&gt; installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pathlib import Path&#xA;&#xA;from archinstall import Installer, ProfileConfiguration, profile_handler, User&#xA;from archinstall.default_profiles.minimal import MinimalProfile&#xA;from archinstall.lib.disk.device_model import FilesystemType&#xA;from archinstall.lib.disk.encryption_menu import DiskEncryptionMenu&#xA;from archinstall.lib.disk.filesystem import FilesystemHandler&#xA;from archinstall.lib.interactions.disk_conf import select_disk_config&#xA;&#xA;fs_type = FilesystemType(&#39;ext4&#39;)&#xA;&#xA;# Select a device to use for the installation&#xA;disk_config = select_disk_config()&#xA;&#xA;# Optional: ask for disk encryption configuration&#xA;data_store = {}&#xA;disk_encryption = DiskEncryptionMenu(disk_config.device_modifications, data_store).run()&#xA;&#xA;# initiate file handler with the disk config and the optional disk encryption config&#xA;fs_handler = FilesystemHandler(disk_config, disk_encryption)&#xA;&#xA;# perform all file operations&#xA;# WARNING: this will potentially format the filesystem and delete all data&#xA;fs_handler.perform_filesystem_operations()&#xA;&#xA;mountpoint = Path(&#39;/tmp&#39;)&#xA;&#xA;with Installer(&#xA;        mountpoint,&#xA;        disk_config,&#xA;        disk_encryption=disk_encryption,&#xA;        kernels=[&#39;linux&#39;]&#xA;) as installation:&#xA;    installation.mount_ordered_layout()&#xA;    installation.minimal_installation(hostname=&#39;minimal-arch&#39;)&#xA;    installation.add_additional_packages([&#39;nano&#39;, &#39;wget&#39;, &#39;git&#39;])&#xA;&#xA;    # Optionally, install a profile of choice.&#xA;    # In this case, we install a minimal profile that is empty&#xA;    profile_config = ProfileConfiguration(MinimalProfile())&#xA;    profile_handler.install_profile_config(installation, profile_config)&#xA;&#xA;    user = User(&#39;archinstall&#39;, &#39;password&#39;, True)&#xA;    installation.create_users(user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installer will perform the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prompt the user to configurate the disk partitioning&lt;/li&gt; &#xA; &lt;li&gt;Prompt the user to setup disk encryption&lt;/li&gt; &#xA; &lt;li&gt;Create a file handler instance for the configured disk and the optional disk encryption&lt;/li&gt; &#xA; &lt;li&gt;Perform the disk operations (WARNING: this will potentially format the disks and erase all data)&lt;/li&gt; &#xA; &lt;li&gt;Installs a basic instance of Arch Linux &lt;em&gt;(base base-devel linux linux-firmware btrfs-progs efibootmgr)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Installs and configures a bootloader to partition 0 on uefi. On BIOS, it sets the root to partition 0.&lt;/li&gt; &#xA; &lt;li&gt;Install additional packages &lt;em&gt;(nano, wget, git)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new user&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Creating your own ISO with this script on it:&lt;/strong&gt; Follow &lt;a href=&#34;https://wiki.archlinux.org/index.php/archiso&#34;&gt;ArchISO&lt;/a&gt;&#39;s guide on how to create your own ISO.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Script non-interactive automated installation&lt;/h2&gt; &#xA;&lt;p&gt;For an example of a fully scripted, automated installation please see the example &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/examples/full_automated_installation.py&#34;&gt;full_automated_installation.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Unattended installation based on MAC address&lt;/h2&gt; &#xA;&lt;p&gt;Archinstall comes with an &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/examples/mac_address_installation.py&#34;&gt;unattended&lt;/a&gt; example which will look for a matching profile for the machine it is being run on, based on any local MAC address. For instance, if the machine the code is executed on has the MAC address &lt;code&gt;52:54:00:12:34:56&lt;/code&gt; it will look for a profile called &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/archinstall/default_profiles/tailored.py&#34;&gt;52-54-00-12-34-56.py&lt;/a&gt;. If it&#39;s found, the unattended installation will commence and source that profile as its installation procedure.&lt;/p&gt; &#xA;&lt;h1&gt;Profiles&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;archinstall&lt;/code&gt; ships with a set of pre-defined profiles that can be chosen during the installation process.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/archlinux/archinstall/tree/master/archinstall/default_profiles/desktops&#34;&gt;Desktop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/archlinux/archinstall/tree/master/archinstall/default_profiles/servers&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The definitions of the profiles and what packages they will install can be seen directly in the menu or &lt;a href=&#34;https://github.com/archlinux/archinstall/tree/master/archinstall/default_profiles&#34;&gt;default profiles&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;h2&gt;Using a Live ISO Image&lt;/h2&gt; &#xA;&lt;p&gt;If you want to test a commit, branch or bleeding edge release from the repository using the vanilla Arch Live ISO image, you can replace the version of archinstall with a new version and run that with the steps described below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You need a working network connection&lt;/li&gt; &#xA; &lt;li&gt;Install the build requirements with &lt;code&gt;pacman -Sy; pacman -S git python-pip gcc pkgconf&lt;/code&gt; &lt;em&gt;(note that this may or may not work depending on your RAM and current state of the squashfs maximum filesystem free space)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Uninstall the previous version of archinstall with &lt;code&gt;pip uninstall archinstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now clone the latest repository with &lt;code&gt;git clone https://github.com/archlinux/archinstall&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter the repository with &lt;code&gt;cd archinstall&lt;/code&gt; &lt;em&gt;At this stage, you can choose to check out a feature branch for instance with &lt;code&gt;git checkout v2.3.1-rc1&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the project and install it using &lt;code&gt;pip install --break-operating-system .&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;After this, running archinstall with &lt;code&gt;python -m archinstall&lt;/code&gt; will run against whatever branch you chose in step 5.&lt;/p&gt; &#xA;&lt;h2&gt;Without a Live ISO Image&lt;/h2&gt; &#xA;&lt;p&gt;To test this without a live ISO, the simplest approach is to use a local image and create a loop device.&lt;br&gt; This can be done by installing &lt;code&gt;pacman -S arch-install-scripts util-linux&lt;/code&gt; locally and doing the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# truncate -s 20G testimage.img&#xA;# losetup -fP ./testimage.img&#xA;# losetup -a | grep &#34;testimage.img&#34; | awk -F &#34;:&#34; &#39;{print $1}&#39;&#xA;# pip install --upgrade archinstall&#xA;# python -m archinstall --script guided&#xA;# qemu-system-x86_64 -enable-kvm -machine q35,accel=kvm -device intel-iommu -cpu host -m 4096 -boot order=d -drive file=./testimage.img,format=raw -drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_CODE.fd -drive if=pflash,format=raw,readonly,file=/usr/share/ovmf/x64/OVMF_VARS.fd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;em&gt;20 GB&lt;/em&gt; &lt;code&gt;testimage.img&lt;/code&gt; and create a loop device which we can use to format and install to.&lt;br&gt; &lt;code&gt;archinstall&lt;/code&gt; is installed and executed in &lt;a href=&#34;https://raw.githubusercontent.com/archlinux/archinstall/master/#docs-todo&#34;&gt;guided mode&lt;/a&gt;. Once the installation is complete, &lt;del&gt;you can use qemu/kvm to boot the test media.&lt;/del&gt;&lt;br&gt; &lt;em&gt;(You&#39;d actually need to do some EFI magic in order to point the EFI vars to the partition 0 in the test medium, so this won&#39;t work entirely out of the box, but that gives you a general idea of what we&#39;re going for here)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a &lt;a href=&#34;https://github.com/archlinux/archinstall/wiki/Building-and-Testing&#34;&gt;Building and Testing&lt;/a&gt; guide.&lt;br&gt; It will go through everything from packaging, building and running &lt;em&gt;(with qemu)&lt;/em&gt; the installer against a dev branch.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/archlinux/archinstall/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>persimmon-ai-labs/adept-inference</title>
    <updated>2023-09-11T01:39:14Z</updated>
    <id>tag:github.com,2023-09-11:/persimmon-ai-labs/adept-inference</id>
    <link href="https://github.com/persimmon-ai-labs/adept-inference" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Inference code for Persimmon-8B&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Persimmon-8B User Guide&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains inference code for &lt;a href=&#34;https://www.adept.ai/blog/persimmon-8b&#34;&gt;Persimmon-8B&lt;/a&gt;, the new LLM from Adept.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading the Checkpoint&lt;/h2&gt; &#xA;&lt;p&gt;The model checkpoints are stored on our public OCI bucket and can be downloaded using &lt;code&gt;wget&lt;/code&gt;. The base model is not fine-tuned and is released under an Apache 2.0 license. The chat model is fine-tuned and is released under a CC-BY-NC 4.0 license.&lt;/p&gt; &#xA;&lt;p&gt;Base:&lt;br&gt; &lt;a href=&#34;https://axtkn4xl5cip.objectstorage.us-phoenix-1.oci.customer-oci.com/n/axtkn4xl5cip/b/adept-public-data/o/8b_base_model_release.tar&#34;&gt;https://axtkn4xl5cip.objectstorage.us-phoenix-1.oci.customer-oci.com/n/axtkn4xl5cip/b/adept-public-data/o/8b_base_model_release.tar&lt;/a&gt;&lt;br&gt; md5sum: cd0320cba9efad9ccd18e9ec4d16ae1b&lt;/p&gt; &#xA;&lt;p&gt;Chat:&lt;br&gt; &lt;a href=&#34;https://axtkn4xl5cip.objectstorage.us-phoenix-1.oci.customer-oci.com/n/axtkn4xl5cip/b/adept-public-data/o/8b_chat_model_release.tar&#34;&gt;https://axtkn4xl5cip.objectstorage.us-phoenix-1.oci.customer-oci.com/n/axtkn4xl5cip/b/adept-public-data/o/8b_chat_model_release.tar&lt;/a&gt;&lt;br&gt; md5sum: 663aeace07269c44e90f4e8bcd07f32a&lt;/p&gt; &#xA;&lt;p&gt;Untar the model into its own directory via &lt;code&gt;tar -xvf 8b_base_model_release.tar&lt;/code&gt; or &lt;code&gt;tar -xvf 8b_chat_model_release.tar&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The scripts are set up to expect the model folder to be placed within the code directory, but you can place it elsewhere and modify the scripts accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Building Docker&lt;/h2&gt; &#xA;&lt;p&gt;Build the docker that will include all the necessary dependencies (and then some!) using the included Dockerfile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -f docker/Dockerfile -t &#39;adeptdocker&#39; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Docker&lt;/h2&gt; &#xA;&lt;p&gt;Ensure that the variable &lt;code&gt;MODEL_DIR&lt;/code&gt; in &lt;code&gt;run_text_generation_server.sh&lt;/code&gt; is set to the location of the model directory. By default it is set to &lt;code&gt;MODEL_DIR=8b_chat_model_release&lt;/code&gt;, which is the default name for the chat model. (For the base model, change this line to &lt;code&gt;MODEL_DIR=8b_base_model_release&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;sh docker_launch.sh&lt;/code&gt; will start a model server that you can query via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#39;&amp;lt;address of server&amp;gt;/api&#39; -X &#39;PUT&#39; -H &#39;Content-Type: application/json; charset=UTF-8&#39; -d &#39;{&#34;prompts&#34;: [&#34;human: Hello, how are you?\n\nadept:&#34;], &#34;tokens_to_generate&#34;: 128, &#34;top_p&#34;: 0.9, &#34;random_seed&#34;: 1234, &#34;logprobs&#34;: false}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The chat model is fine-tuned to expect inputs of the form: &lt;code&gt;human: {prompt}\n\nadept:&lt;/code&gt;[^1]. To ensure best performance from this model, please use this format! You can see an example of this in the curl command above. To automatically wrap single-turn input prompts with this structure, you can modify the definition of &lt;code&gt;megatron/text_generation/api.py::generate_and_post_process&lt;/code&gt; so that the default value for the argument &lt;code&gt;process_prompts_for_chat&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We are releasing the model with tensor parallelism of 1. In this configuration, the model requires an 80GB GPU to run naively. It should be possible to fit the model on a 40GB card by removing the unused embeddings and reducing the maximum sequence length (at the top of &lt;code&gt;run_text_generation_server.py&lt;/code&gt;).&lt;br&gt; Quantization to 8-bit or lower would make also it fit with plenty of room to spare.&lt;/li&gt; &#xA; &lt;li&gt;We included the &lt;code&gt;.vocab&lt;/code&gt; file so you can browse the vocabulary in plain text - this file is otherwise unused.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you use this model in your work, please use the following BibTeX citation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{persimmon-8b,&#xA;  author = {Elsen, Erich and Odena, Augustus and Nye, Maxwell and Ta\c{s}\i{}rlar, Sa\u{g}nak and Dao, Tri and Hawthorne, Curtis and Moparthi, Deepak and Somani, Arushi},&#xA;  title = {Releasing {Persimmon-8B}},&#xA;  url = {https://www.adept.ai/blog/persimmon-8b},&#xA;  year = {2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;[^1]: Subsequent inputs should have the form &lt;code&gt;human: {prompt}\n\nadept: {output}\n\nhuman: {follow_up}\n\nadept:&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>liwenxi/SWIFT-AI</title>
    <updated>2023-09-11T01:39:14Z</updated>
    <id>tag:github.com,2023-09-11:/liwenxi/SWIFT-AI</id>
    <link href="https://github.com/liwenxi/SWIFT-AI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast gigapixel processing system&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/img/logo_grid.png&#34; alt=&#34;Logo&#34; width=&#34;200&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;SWIFT-AI: An Extremely Fast System For Gigapixel Visual Understanding In Science&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/Version-1.0.0-blue.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/License-CC%20BY%204.0-green.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/stars/liwenxi/SWIFT-AI?color=yellow&#34; alt=&#34;Stars&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/issues/liwenxi/SWIFT-AI?color=red&#34; alt=&#34;Issues&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/badge/python-3.8-purple.svg?sanitize=true&#34; alt=&#34;Python&#34;&gt; &#xA; &lt;!-- **Authors:** --&gt; &#xA; &lt;!-- **_¹  [Wenxi Li](https://liwenxi.github.io/)_** --&gt; &#xA; &lt;!-- **Affiliations:** --&gt; &#xA; &lt;!-- _¹ Shanghai Jiao Tong University_ --&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Welcome to the dawn of a new era in scientific research with SWIFT AI, our ground-breaking system that harnesses the power of deep learning and gigapixel imagery to revolutionize visual understanding across diverse scientific fields. Pioneering in speed and accuracy, SWIFT AI promises to turn minutes into seconds, offering a giant leap in efficiency and accuracy, thereby empowering researchers and propelling the boundaries of knowledge and discovery.&lt;/p&gt; &#xA;&lt;h4&gt;📰 &lt;a href=&#34;https://xxx&#34; style=&#34;color: black; text-decoration: underline;text-decoration-style: dotted;&#34;&gt;Paper&lt;/a&gt; &lt;span&gt;🏗&lt;/span&gt; &lt;a href=&#34;https:/xxx&#34; style=&#34;color: black; text-decoration: underline;text-decoration-style: dotted;&#34;&gt;Model (via Google)&lt;/a&gt; &lt;span&gt;🏗&lt;/span&gt; &lt;a href=&#34;https://pan.baidu.com/s/1j2WMkmEj0nqOOctiQGj2Wg?pwd=v7mi&#34; style=&#34;color: black; text-decoration: underline;text-decoration-style: dotted;&#34;&gt;Model (via Baidu)&lt;/a&gt; &lt;span&gt;🗃&lt;/span&gt; &lt;a href=&#34;https://www.gigavision.cn/data/news?nav=DataSet%20Panda&amp;amp;type=nav&amp;amp;t=1689145968317&#34; style=&#34;color: black; text-decoration: underline;text-decoration-style: dotted;&#34;&gt;Dataset&lt;/a&gt; &lt;span&gt;🧱&lt;/span&gt; &lt;a href=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/#usage&#34;&gt;Code&lt;/a&gt; &lt;span&gt;🧐&lt;/span&gt; Video &lt;span&gt;🧑💻&lt;/span&gt; Demo&lt;/h4&gt; &#xA;&lt;h2&gt;Table of Contents 📚&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/#key-features&#34;&gt;Key Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/#future-work-and-contributions&#34;&gt;Future Work and Contributions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features 🔑&lt;/h2&gt; &#xA;&lt;p&gt;SWIFT-AI will become the third eye of researchers, helping to observe objects in a large field of view, and assisting the discovery of strong gravitational lenses by the &lt;a href=&#34;https://www.lsst.org/science/transient-optical-sky&#34;&gt;LSST project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/liwenxi/SWIFT-AI/main/img/Galaxy.gif&#34; alt=&#34;Zoom into NGC 1333&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;More details are coming soon!&lt;/h3&gt;</summary>
  </entry>
</feed>