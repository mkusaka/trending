<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-26T01:44:36Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AdminTurnedDevOps/DevOps-The-Hard-Way-AWS</title>
    <updated>2022-08-26T01:44:36Z</updated>
    <id>tag:github.com,2022-08-26:/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS</id>
    <link href="https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository contains free labs for setting up an entire workflow and DevOps environment from a real-world perspective in AWS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DevOps-The-Hard-Way-AWS&lt;/h1&gt; &#xA;&lt;p&gt;This tutorial contains a full, real-world solution for setting up an environment that is using DevOps technologies and practices for deploying apps and cloud services/cloud infrastructure to AWS.&lt;/p&gt; &#xA;&lt;p&gt;The repository contains free labs, documentation, diagrams, and docs for setting up an entire workflow and DevOps environment from a real-world perspective in AWS.&lt;/p&gt; &#xA;&lt;h2&gt;DevOps Scenario&lt;/h2&gt; &#xA;&lt;p&gt;The scenario that you&#39;re currently facing is you work in an organization that is very monolithic. There is a ton of bare metal, virtualization, manual deployments of applications, and &lt;strong&gt;old school&lt;/strong&gt; practices based on the current teams knowledge of IT.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;re brought in to the company and team to make things more modern so the organization can not only succeed, but stay ahead of their competition. Management now understands the needs and complexity that comes with staying ahead of their competition and they know that they need to. Otherwise, the organization will fall...&lt;/p&gt; &#xA;&lt;h2&gt;DevOps Solution&lt;/h2&gt; &#xA;&lt;p&gt;The solution is to deploy the Uber API for the sign-up page. Currently this solution is sitting on a bunch of baremetal, but it&#39;s time to sprinkle a little DevOps on it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/main/images/uber.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As a DevOps Engineer, you&#39;re more or less (most likely) not writing the app, but instead, deploying it. That&#39;s why you&#39;re not writing your own app in this tutorial.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Full Disclosure&lt;/em&gt; - I did have to edit this app a bit from Uber to make it compatible with Python3. You can find the repo here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/Python-Sample-Application&#34;&gt;https://github.com/AdminTurnedDevOps/Python-Sample-Application&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Technology Details&lt;/h2&gt; &#xA;&lt;p&gt;You will be using the following technologies and platforms to set up a DevOps environment.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;AWS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AWS will be used to host the application, cloud infrastructure, and any other services we may need to ensure the Uber app is deployed properly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GitHub &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To store the application and infrastructure/automation code&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Python will be used for the Uber app (it is written in Python) and some automation efforts that aren&#39;t in Terraform.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Terraform &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create an S3 bucket to store Terraform State files&lt;/li&gt; &#xA;   &lt;li&gt;Create an AWS ECR repository with Terraform&lt;/li&gt; &#xA;   &lt;li&gt;Create an EKS cluster&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Docker &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a Docker image&lt;/li&gt; &#xA;   &lt;li&gt;Store the Docker image in AWS ECR&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Kubernetes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;To run the Docker image that&#39;s created for the containerized Uber app. Kubernetes, in this case, EKS, will be used to orchestrate the container.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CI/CD &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use GitHub Actions to create an EKS cluster&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automated testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Testing Terraform code with Checkov&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Labs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/prerequisites.md&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VPC - When running EKS, it requires specific networking. Because all environments will most likely be different, there&#39;s a CloudFormation template for this exact purpose. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/tree/main/EKS-VPC-CloudFormation&#34;&gt;Create EKS VPC&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;AWS: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/AWS/1-Configure-Credentials-To-Access-AWS.md&#34;&gt;Configure credentials to access AWS at a programmatic level&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Terraform - The purpose of the Terraform section is to create all of the AWS cloud services you&#39;ll need from an environment/infrastructure perspective to run the Uber application. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Terraform-AWS-Services-Creation/1-Create-S3-Bucket-To-Store-TFSTATE-Files.md&#34;&gt;Create S3 Bucket To Store TFSTATE Files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Terraform-AWS-Services-Creation/2-Create-ECR.md&#34;&gt;Create an Elastic Container Registry&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Terraform-AWS-Services-Creation/3-Create-EKS-Cluster-IAM-Role-And-Policy.md&#34;&gt;Create An EKS Cluster IAM Role, And Policy For EKS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Terraform-AWS-Services-Creation/3-Create-EKS-Cluster-IAM-Role-And-Policy.md&#34;&gt;Create An EKS Cluster&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Docker - The purpose of the Docker section is to create a Docker image from the app that the organization is running on-prem (the uber app), containerize it, and store the container inside of a container repository. For the container repo, you&#39;ll use AWS ECR. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Docker/1-Create-Docker-Image.md&#34;&gt;Create The Docker Image&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Docker/Push%20Image%20To%20ECR.md&#34;&gt;Log Into AWS ECR Repository&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Kubernetes - The purpose of the Kubernetes section is to connect to EKS locally and to write the Kubernetes manifest to deploy the Python Uber app. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/kubernetes_manifest/1-Connect-To-EKS.md&#34;&gt;Connect To EKS From The Terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/kubernetes_manifest/2-Create-Kubernetes-Manifest.md&#34;&gt;Create A Kubernetes Manifest&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automated Testing - The purpose of the Automation Testing section is to ensure that all of the Terraform code is performing as it should be from a policy, security, and static code analysis perspective. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Terraform-Static-Code-Analysis/1-Checkov-For-Terraform.md&#34;&gt;Install And Run Checkov&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CICD - The purpose of this section is to automatically create an EKS cluster with CICD using GitHub Actions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/AdminTurnedDevOps/DevOps-The-Hard-Way-AWS/raw/main/Terraform-AWS-Services-Creation/4-Run-CICD-For-EKS-Cluster.md&#34;&gt;Create a GitHub Actions CICD pipeline&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>NafisiAslH/KnowledgeSharing</title>
    <updated>2022-08-26T01:44:36Z</updated>
    <id>tag:github.com,2022-08-26:/NafisiAslH/KnowledgeSharing</id>
    <link href="https://github.com/NafisiAslH/KnowledgeSharing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KnowledgeSharing&lt;/h1&gt; &#xA;&lt;p&gt;Under Construction ....&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;You can Follow &lt;a href=&#34;https://twitter.com/MeAsHacker_HNA&#34;&gt;me&lt;/a&gt; on twitter or buy me a &lt;a href=&#34;https://buymeacoffee.com/NafisiAslH&#34;&gt;Coffee&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>arshsisodiya/helios-mirror</title>
    <updated>2022-08-26T01:44:36Z</updated>
    <id>tag:github.com,2022-08-26:/arshsisodiya/helios-mirror</id>
    <link href="https://github.com/arshsisodiya/helios-mirror" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Telegram Mirror and Leech Bot&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a Telegram Bot written in Python for mirroring files on the Internet to your Google Drive or Telegram. Based on &lt;a href=&#34;https://github.com/lzzy12/python-aria-mirror-bot&#34;&gt;python-aria-mirror-bot&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;h2&gt;If you Like My work Star the repo and Follow me on Github&lt;/h2&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;h2&gt;By &lt;a href=&#34;https://github.com/arshsisodiya&#34;&gt;Arsh&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mirror logs&lt;/li&gt; &#xA; &lt;li&gt;Leech logs&lt;/li&gt; &#xA; &lt;li&gt;Source link button&lt;/li&gt; &#xA; &lt;li&gt;Database Support for leech logs&lt;/li&gt; &#xA; &lt;li&gt;Sending Leeched files and Mirror links in user&#39;s PM&lt;/li&gt; &#xA; &lt;li&gt;Added Gdtot Support back&lt;/li&gt; &#xA; &lt;li&gt;Appdrive Support&lt;/li&gt; &#xA; &lt;li&gt;Change commands directly from config.env&lt;/li&gt; &#xA; &lt;li&gt;Auto Delete All Bot Related Message in AUTO_DELETE_UPLOAD_MESSAGE_DURATION duration&lt;/li&gt; &#xA; &lt;li&gt;View File in PM button&lt;/li&gt; &#xA; &lt;li&gt;Engine stats in status&lt;/li&gt; &#xA; &lt;li&gt;Statistics button in status&lt;/li&gt; &#xA; &lt;li&gt;4 GB upload for Premium users&lt;/li&gt; &#xA; &lt;li&gt;BOT PM&lt;/li&gt; &#xA; &lt;li&gt;FORCE BOT PM&lt;/li&gt; &#xA; &lt;li&gt;Change Start buttons from config.env&lt;/li&gt; &#xA; &lt;li&gt;And many more little changes can&#39;t remember&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;By &lt;a href=&#34;https://github.com/anasty17&#34;&gt;anasty17&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;In each single file there is a major change from base code, it&#39;s almost totaly different. Here some of features and fixes that I remember.&lt;/p&gt; &#xA;&lt;h3&gt;qBittorrent&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Qbittorrent support&lt;/li&gt; &#xA; &lt;li&gt;Select files from Torrent before and while downloading&lt;/li&gt; &#xA; &lt;li&gt;Seed torrents to specific ratio and time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aria2c&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select files from Torrent before and while downloading&lt;/li&gt; &#xA; &lt;li&gt;Seed torrents to specific ratio and time&lt;/li&gt; &#xA; &lt;li&gt;Netrc support&lt;/li&gt; &#xA; &lt;li&gt;Direct link authentication for specific link while using the bot (it will work even if only username or password)&lt;/li&gt; &#xA; &lt;li&gt;Improve aria.sh&lt;/li&gt; &#xA; &lt;li&gt;Fix all download listener functions and status&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Leech&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Leech support&lt;/li&gt; &#xA; &lt;li&gt;Splitting&lt;/li&gt; &#xA; &lt;li&gt;Thumbnail for each user&lt;/li&gt; &#xA; &lt;li&gt;Set upload as document or as media for each user&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Google&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop duplicates for all tasks except yt-dlp tasks&lt;/li&gt; &#xA; &lt;li&gt;Download G-Drive links&lt;/li&gt; &#xA; &lt;li&gt;Counting files/folders from Google Drive link&lt;/li&gt; &#xA; &lt;li&gt;Search in multiple Drive folder/TeamDrive&lt;/li&gt; &#xA; &lt;li&gt;Recursive Search (only with &lt;code&gt;root&lt;/code&gt; or TeamDrive ID, folder ids will be listed with non-recursive method)&lt;/li&gt; &#xA; &lt;li&gt;Use Token.pickle if file not found with Service Account, for all Gdrive functions&lt;/li&gt; &#xA; &lt;li&gt;List result in html file instead of telegraph or telegram message to avoid limits by @junedkh&lt;/li&gt; &#xA; &lt;li&gt;Random Service Account at startup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone Status&lt;/li&gt; &#xA; &lt;li&gt;Extract Status&lt;/li&gt; &#xA; &lt;li&gt;Archive Status&lt;/li&gt; &#xA; &lt;li&gt;Seed Status&lt;/li&gt; &#xA; &lt;li&gt;Status Pages for unlimited tasks&lt;/li&gt; &#xA; &lt;li&gt;Ability to cancel upload/clone/archive/extract/split&lt;/li&gt; &#xA; &lt;li&gt;Cancel all buttons for choosing specific tasks status to cancel&lt;/li&gt; &#xA; &lt;li&gt;Fix flooding issues&lt;/li&gt; &#xA; &lt;li&gt;Fix overall upload and download speed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Yt-dlp&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Switch from youtube-dl to yt-dlp and fix all conflicts&lt;/li&gt; &#xA; &lt;li&gt;Yt-dlp quality buttons&lt;/li&gt; &#xA; &lt;li&gt;Support for download live streams&lt;/li&gt; &#xA; &lt;li&gt;Ability to use specific yt-dlp arg for each task&lt;/li&gt; &#xA; &lt;li&gt;Fix download progress&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQL Database support&lt;/li&gt; &#xA; &lt;li&gt;Save leech settings including thumbnails in database&lt;/li&gt; &#xA; &lt;li&gt;Save sudo and authorized users&lt;/li&gt; &#xA; &lt;li&gt;Incomplete task notifier to get incomplete task messages after restart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Torrents Search&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Torrent search support&lt;/li&gt; &#xA; &lt;li&gt;Search on torrents with Torrent Search API&lt;/li&gt; &#xA; &lt;li&gt;Search on torrents with variable plugins using qBittorrent search engine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Archives&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zip instead of tar&lt;/li&gt; &#xA; &lt;li&gt;Using 7-zip tool to extract all supported files&lt;/li&gt; &#xA; &lt;li&gt;Extract rar, zip and 7z within folder or splits with or without password&lt;/li&gt; &#xA; &lt;li&gt;Zip file/folder with or without password&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RSS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rss feed. Based on this repository &lt;a href=&#34;https://github.com/hyPnOtICDo0g/rss-chan&#34;&gt;rss-chan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Filter added and all functions have been improved&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Overall&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker image support for linux &lt;code&gt;amd64, arm64/v8, arm/v7, s390x&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update bot at startup and with restart command using &lt;code&gt;UPSTREAM_REPO&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mirror/Leech/Watch/Clone/Count/Del by reply&lt;/li&gt; &#xA; &lt;li&gt;Mirror/Leech/Clone multi links/files with one command&lt;/li&gt; &#xA; &lt;li&gt;Custom name for all links except torrents. For files you should add extension except yt-dlp links&lt;/li&gt; &#xA; &lt;li&gt;Extensions Filter for the files to be uploaded/cloned&lt;/li&gt; &#xA; &lt;li&gt;View Link button. Extra button to open index link in broswer instead of direct download for file&lt;/li&gt; &#xA; &lt;li&gt;Almost all repository functions have been improved and many other details can&#39;t mention all of them&lt;/li&gt; &#xA; &lt;li&gt;Many bugs have been fixed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;From Base and other Repositories&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mirror direct download links, Torrent, Mega.nz and Telegram files to Google Drive&lt;/li&gt; &#xA; &lt;li&gt;Copy files from someone&#39;s Drive to your Drive&lt;/li&gt; &#xA; &lt;li&gt;Download/Upload progress, Speeds and ETAs&lt;/li&gt; &#xA; &lt;li&gt;Mirror all youtube-dl supported links&lt;/li&gt; &#xA; &lt;li&gt;Docker support&lt;/li&gt; &#xA; &lt;li&gt;Uploading to Team Drive&lt;/li&gt; &#xA; &lt;li&gt;Index Link support&lt;/li&gt; &#xA; &lt;li&gt;Service Account support&lt;/li&gt; &#xA; &lt;li&gt;Delete files from Drive&lt;/li&gt; &#xA; &lt;li&gt;Multiple Trackers support&lt;/li&gt; &#xA; &lt;li&gt;Shell and Executor&lt;/li&gt; &#xA; &lt;li&gt;Add sudo users&lt;/li&gt; &#xA; &lt;li&gt;Extract password protected files&lt;/li&gt; &#xA; &lt;li&gt;Extract these filetypes &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;ZIP, RAR, TAR, 7z, ISO, WIM, CAB, GZIP, BZIP2, APM, ARJ, CHM, CPIO, CramFS, DEB, DMG, FAT, HFS, LZH, LZMA, LZMA2, MBR, MSI, MSLZ, NSIS, NTFS, RPM, SquashFS, UDF, VHD, XAR, Z, TAR.XZ&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;Direct links Supported: &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;mediafire, letsupload.io, hxfile.co, anonfiles.com, bayfiles.com, antfiles, fembed.com, fembed.net, femax20.com, layarkacaxxi.icu, fcdn.stream, sbplay.org, naniplay.com, naniplay.nanime.in, naniplay.nanime.biz, sbembed.com, streamtape.com, streamsb.net, feurl.com, upload.ee, pixeldrain.com, racaty.net, 1fichier.com, 1drv.ms (Only works for file not folder or business account), uptobox.com and solidfiles.com&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to deploy?&lt;/h1&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tutorial Video from A to Z: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/vishnoe115&#34;&gt;Wiszky&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/IUmq1paCiHI&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/See%20Video-black?style=for-the-badge&amp;amp;logo=YouTube&#34; width=&#34;160&#34; &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1. Installing requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this repo:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/anasty17/mirror-leech-telegram-bot mirrorbot/ &amp;amp;&amp;amp; cd mirrorbot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Debian based distros&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install python3 python3-pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Docker by following the &lt;a href=&#34;https://docs.docker.com/engine/install/debian/&#34;&gt;official Docker docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Arch and it&#39;s derivatives:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -S docker python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install dependencies for running setup scripts:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install -r requirements-cli.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;2. Setting up config file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp config_sample.env config.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remove the first line saying:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;_____REMOVE_THIS_LINE_____=True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fill up rest of the fields. Meaning of each field is discussed below:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Required Fields&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BOT_TOKEN&lt;/code&gt;: The Telegram Bot Token that you got from &lt;a href=&#34;https://t.me/BotFather&#34;&gt;@BotFather&lt;/a&gt;. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GDRIVE_FOLDER_ID&lt;/code&gt;: This is the Folder/TeamDrive ID of the Google Drive Folder or &lt;code&gt;root&lt;/code&gt; to which you want to upload all the mirrors. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OWNER_ID&lt;/code&gt;: The Telegram User ID (not username) of the Owner of the bot. &lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOWNLOAD_DIR&lt;/code&gt;: The path to the local folder where the downloads should be downloaded to. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOWNLOAD_STATUS_UPDATE_INTERVAL&lt;/code&gt;: Time in seconds after which the progress/status message will be updated. Recommended &lt;code&gt;10&lt;/code&gt; seconds at least. &lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTO_DELETE_MESSAGE_DURATION&lt;/code&gt;: Interval of time (in seconds), after which the bot deletes it&#39;s message and command message which is expected to be viewed instantly. &lt;strong&gt;NOTE&lt;/strong&gt;: Set to &lt;code&gt;-1&lt;/code&gt; to disable auto message deletion. &lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTO_DELETE_UPLOAD_MESSAGE_DURATION&lt;/code&gt;: Interval of time (in seconds), after which the bot deletes it&#39;s message and command message which is expected to be viewed instantly. &lt;strong&gt;NOTE&lt;/strong&gt;: Set to &lt;code&gt;-1&lt;/code&gt; to disable auto upload message deletion. &lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TELEGRAM_API&lt;/code&gt;: This is to authenticate your Telegram account for downloading Telegram files. You can get this from &lt;a href=&#34;https://my.telegram.org&#34;&gt;https://my.telegram.org&lt;/a&gt;. &lt;code&gt;Int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TELEGRAM_HASH&lt;/code&gt;: This is to authenticate your Telegram account for downloading Telegram files. You can get this from &lt;a href=&#34;https://my.telegram.org&#34;&gt;https://my.telegram.org&lt;/a&gt;. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Optional Fields&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BOT_PM&lt;/code&gt;: - set it&lt;code&gt;True&lt;/code&gt; if you want to send mirror links and leeched files in user&#39;s PM, Default is &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FORCE_BOT_PM&lt;/code&gt;: - set it &lt;code&gt;True&lt;/code&gt; if True all mirrored links and leeched files will be send directly in PM, Mirrored links will not get sent in Current chat and source message will be deleted immediately after mirror/leech is complete, AUTO_DELETE_UPLOAD_MESSAGE_DURATION will not apply on it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IS_TEAM_DRIVE&lt;/code&gt;: Set &lt;code&gt;True&lt;/code&gt; if uploading to TeamDrive. Default is &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DATABASE_URL&lt;/code&gt;: Your SQL Database URL. Follow this &lt;a href=&#34;https://github.com/anasty17/mirror-leech-telegram-bot/tree/master#generate-database&#34;&gt;Generate Database&lt;/a&gt; to generate database. Data will be saved in Database: auth and sudo users, leech settings including thumbnails for each user, rss data and incomplete tasks. &lt;strong&gt;NOTE&lt;/strong&gt;: If deploying on heroku and using heroku postgresql delete this variable from &lt;strong&gt;config.env&lt;/strong&gt; file. &lt;strong&gt;DATABASE_URL&lt;/strong&gt; will be grabbed from heroku variables. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTHORIZED_CHATS&lt;/code&gt;: Fill user_id and chat_id of groups/users you want to authorize. Separate them by space. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SUDO_USERS&lt;/code&gt;: Fill user_id of users whom you want to give sudo permission. Separate them by space. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IGNORE_PENDING_REQUESTS&lt;/code&gt;: Ignore pending requests after restart. Default is &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;USE_SERVICE_ACCOUNTS&lt;/code&gt;: Whether to use Service Accounts or not. For this to work see &lt;a href=&#34;https://github.com/anasty17/mirror-leech-telegram-bot#generate-service-accounts-what-is-service-account&#34;&gt;Using Service Accounts&lt;/a&gt; section below. Default is &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INDEX_URL&lt;/code&gt;: Refer to &lt;a href=&#34;https://gitlab.com/ParveenBhadooOfficial/Google-Drive-Index&#34;&gt;https://gitlab.com/ParveenBhadooOfficial/Google-Drive-Index&lt;/a&gt;. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STATUS_LIMIT&lt;/code&gt;: Limit the no. of tasks shown in status message with buttons. &lt;strong&gt;NOTE&lt;/strong&gt;: Recommended limit is &lt;code&gt;4&lt;/code&gt; tasks. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STOP_DUPLICATE&lt;/code&gt;: Bot will check file in Drive, if it is present in Drive, downloading or cloning will be stopped. (&lt;strong&gt;NOTE&lt;/strong&gt;: File will be checked using filename not file hash, so this feature is not perfect yet). Default is &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CMD_INDEX&lt;/code&gt;: commands index number. This number will added at the end all commands. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TORRENT_TIMEOUT&lt;/code&gt;: Timeout of dead torrents downloading with qBittorrent and Aria2c in seconds. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXTENSION_FILTER&lt;/code&gt;: File extensions that won&#39;t upload/clone. Separate them by space. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INCOMPLETE_TASK_NOTIFIER&lt;/code&gt;: Get incomplete task messages after restart. Require database and (supergroup or channel). Default is &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UPTOBOX_TOKEN&lt;/code&gt;: Uptobox token to mirror uptobox links. Get it from &lt;a href=&#34;https://uptobox.com/my_account&#34;&gt;Uptobox Premium Account&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UPSTREAM_REPO&lt;/code&gt;: Your github repository link, if your repo is private add &lt;code&gt;https://username:{githubtoken}@github.com/{username}/{reponame}&lt;/code&gt; format. Get token from &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;Github settings&lt;/a&gt;. So you can update your bot from filled repository on each restart. &lt;code&gt;Str&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Any change in docker or requirements you need to deploy/build again with updated repo to take effect. DON&#39;T delete .gitignore file. For more information read &lt;a href=&#34;https://github.com/anasty17/mirror-leech-telegram-bot/tree/master#upstream-repo-recommended&#34;&gt;THIS&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UPSTREAM_BRANCH&lt;/code&gt;: Upstream branch for update. Default is &lt;code&gt;master&lt;/code&gt;. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mirror&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MIRROR_LOGS&lt;/code&gt;: - Chat id of channels/groups where you want to store Mirror logs, &lt;em&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/em&gt; Add bot in Mirror logs channel/group as Admin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Leech&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;LEECH_LOG&lt;/code&gt;: - Chat id of channel/group where leeched files will be uploaded, &lt;strong&gt;NOTE:&lt;/strong&gt; only put 1 channel/group id starts with -100xxxxxxxxx, &lt;em&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/em&gt; add bot in that channel/group as Admin, if you leave this empty bot will sent leech files in current chat.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LEECH_SPLIT_SIZE&lt;/code&gt;: Size of split in bytes. Default is &lt;code&gt;2GB&lt;/code&gt;. Default is &lt;code&gt;4GB&lt;/code&gt; if your account is premium. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AS_DOCUMENT&lt;/code&gt;: Default type of Telegram file upload. Default is &lt;code&gt;False&lt;/code&gt; mean as media. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EQUAL_SPLITS&lt;/code&gt;: Split files larger than &lt;strong&gt;LEECH_SPLIT_SIZE&lt;/strong&gt; into equal parts size (Not working with zip cmd). Default is &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CUSTOM_FILENAME&lt;/code&gt;: Add custom word to leeched file name. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;USER_SESSION_STRING&lt;/code&gt;: To download/upload from your telegram account. If you own premium account. To generate session string use this command &lt;code&gt;python3 generate_string_session.py&lt;/code&gt; after mounting repo folder for sure. &lt;code&gt;Str&lt;/code&gt;. &lt;strong&gt;NOTE&lt;/strong&gt;: You can&#39;t use bot with private message. Use it with supergroup or channel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Telegraph ui&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TITLE_NAME&lt;/code&gt;: Title name for Telegraph pages (while using /list command)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTHOR_NAME&lt;/code&gt;: = Author name for Telegraph pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AUTHOR_URL&lt;/code&gt;: = Author URL for Telegraph page&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GDTOT&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CRYPT&lt;/code&gt;: Cookie for gdtot google drive link generator. Follow these &lt;a href=&#34;https://github.com/arshsisodiya/helios-mirror/tree/master#gdtot-cookies&#34;&gt;steps&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Appdrive&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;APPDRIVE_EMAIL&lt;/code&gt;: - Your Appdrive account email&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;APPDRIVE_PASS&lt;/code&gt;: - Your Appdrive account password&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Size Limits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TORRENT_DIRECT_LIMIT&lt;/code&gt;: To limit the Torrent/Direct mirror size. Don&#39;t add unit. Default unit is &lt;code&gt;GB&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ZIP_UNZIP_LIMIT&lt;/code&gt;: To limit the size of zip and unzip commands. Don&#39;t add unit. Default unit is &lt;code&gt;GB&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CLONE_LIMIT&lt;/code&gt;: To limit the size of Google Drive folder/file which you can clone. Don&#39;t add unit. Default unit is &lt;code&gt;GB&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MEGA_LIMIT&lt;/code&gt;: To limit the size of Mega download. Don&#39;t add unit. Default unit is &lt;code&gt;GB&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;STORAGE_THRESHOLD&lt;/code&gt;: To leave specific storage free and any download will lead to leave free storage less than this value will be cancelled. Don&#39;t add unit. Default unit is &lt;code&gt;GB&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;qBittorrent/Aria2c&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BASE_URL_OF_BOT&lt;/code&gt;: Valid BASE URL where the bot is deployed to use qbittorrent web selection. Format of URL should be &lt;code&gt;http://myip&lt;/code&gt;, where &lt;code&gt;myip&lt;/code&gt; is the IP/Domain(public) of your bot or if you have chosen port other than &lt;code&gt;80&lt;/code&gt; so write it in this format &lt;code&gt;http://myip:port&lt;/code&gt; (&lt;code&gt;http&lt;/code&gt; and not &lt;code&gt;https&lt;/code&gt;). This Var is optional on VPS and required for Heroku specially to avoid app sleeping/idling. For Heroku fill &lt;code&gt;https://yourappname.herokuapp.com&lt;/code&gt;. Still got idling? You can use &lt;a href=&#34;http://cron-job.org&#34;&gt;http://cron-job.org&lt;/a&gt; to ping your Heroku app. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SERVER_PORT&lt;/code&gt;: Only For VPS, which is the &lt;strong&gt;BASE_URL_OF_BOT&lt;/strong&gt; Port. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WEB_PINCODE&lt;/code&gt;: If empty or &lt;code&gt;False&lt;/code&gt; means no more pincode required while qbit web selection. &lt;code&gt;Bool&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Qbittorrent NOTE&lt;/strong&gt;: If your facing ram exceeded issue then set limit for &lt;code&gt;MaxConnecs&lt;/code&gt;, decrease &lt;code&gt;AsyncIOThreadsCount&lt;/code&gt; in qbittorrent config and set limit of &lt;code&gt;DiskWriteCacheSize&lt;/code&gt; to &lt;code&gt;32&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RSS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;RSS_DELAY&lt;/code&gt;: Time in seconds for rss refresh interval. Recommended &lt;code&gt;900&lt;/code&gt; second at least. Default is &lt;code&gt;900&lt;/code&gt; in sec. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RSS_COMMAND&lt;/code&gt;: Choose command for the desired action. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RSS_CHAT_ID&lt;/code&gt;: Chat ID where rss links will be sent. If using channel then add channel id. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RSS_USER_SESSION_STRING&lt;/code&gt;: To send rss links from your telegram account. Instead of adding bot to channel then linking the channel to group to get rss link since bot will not read command from itself or other bot. To generate session string use this command &lt;code&gt;python3 generate_string_session.py&lt;/code&gt; after mounting repo folder for sure. &lt;code&gt;Str&lt;/code&gt;. &lt;strong&gt;NOTE&lt;/strong&gt;: Don&#39;t use same session string as &lt;code&gt;USER_SESSION_STRING&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;RSS NOTE&lt;/strong&gt;: &lt;code&gt;DATABASE_URL&lt;/code&gt; and &lt;code&gt;RSS_CHAT_ID&lt;/code&gt; is required, otherwise all rss commands will not work. You must use bot in group. You can add the bot to a channel and link this channel to group so messages sent by bot to channel will be forwarded to group without using &lt;code&gt;RSS_USER_STRING_SESSION&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Private Files&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ACCOUNTS_ZIP_URL&lt;/code&gt;: Only if you want to load your Service Account externally from an Index Link or by any direct download link NOT webpage link. Archive the accounts folder to ZIP file. Fill this with the direct download link of zip file. &lt;code&gt;Str&lt;/code&gt;. If index need authentication so add direct download as shown below: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;https://username:password@example.workers.dev/...&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TOKEN_PICKLE_URL&lt;/code&gt;: Only if you want to load your &lt;strong&gt;token.pickle&lt;/strong&gt; externally from an Index Link. Fill this with the direct link of that file. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MULTI_SEARCH_URL&lt;/code&gt;: Check &lt;code&gt;drive_folder&lt;/code&gt; setup &lt;a href=&#34;https://github.com/anasty17/mirror-leech-telegram-bot/tree/master#multi-search-ids&#34;&gt;here&lt;/a&gt;. Write &lt;strong&gt;drive_folder&lt;/strong&gt; file &lt;a href=&#34;https://gist.github.com/&#34;&gt;here&lt;/a&gt;. Open the raw file of that gist, it&#39;s URL will be your required variable. Should be in this form after removing commit id: &lt;a href=&#34;https://gist.githubusercontent.com/username/gist-id/raw/drive_folder&#34;&gt;https://gist.githubusercontent.com/username/gist-id/raw/drive_folder&lt;/a&gt;. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;YT_COOKIES_URL&lt;/code&gt;: Youtube authentication cookies. Check setup &lt;a href=&#34;https://github.com/ytdl-org/youtube-dl#how-do-i-pass-cookies-to-youtube-dl&#34;&gt;Here&lt;/a&gt;. Use gist raw link and remove commit id from the link, so you can edit it from gists only. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NETRC_URL&lt;/code&gt;: To create .netrc file contains authentication for aria2c and yt-dlp. Use gist raw link and remove commit id from the link, so you can edit it from gists only. &lt;strong&gt;NOTE&lt;/strong&gt;: After editing .nterc you need to restart the docker or if deployed on heroku so restart dyno in case your edits related to aria2c authentication. &lt;code&gt;Str&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: All above url variables used incase you want edit them in future easily without deploying again or if you want to deploy from public fork. If deploying using cli or private fork you can leave these variables empty add token.pickle, accounts folder, drive_folder, .netrc and cookies.txt directly to root but you can&#39;t update them without rebuild OR simply leave all above variables and use private UPSTREAM_REPO.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MEGA&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MEGA_API_KEY&lt;/code&gt;: Mega.nz API key to mirror mega.nz links. Get it from &lt;a href=&#34;https://mega.nz/sdk&#34;&gt;Mega SDK Page&lt;/a&gt;. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MEGA_EMAIL_ID&lt;/code&gt;: E-Mail ID used to sign up on mega.nz for using premium account. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MEGA_PASSWORD&lt;/code&gt;: Password for mega.nz account. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buttons&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;VIEW_LINK&lt;/code&gt;: View Link button to open file Index Link in browser instead of direct download link, you can figure out if it&#39;s compatible with your Index code or not, open any video from you Index and check if its URL ends with &lt;code&gt;?a=view&lt;/code&gt;. Compatible with &lt;a href=&#34;https://gitlab.com/ParveenBhadooOfficial/Google-Drive-Index&#34;&gt;BhadooIndex&lt;/a&gt; Code. Default is &lt;code&gt;False&lt;/code&gt;. &lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SOURCE_LINK&lt;/code&gt;: - set it &lt;code&gt;True&lt;/code&gt; if you want to get Source Link of Mirrored/Cloned file, Default is &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Torrent Search&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SEARCH_API_LINK&lt;/code&gt;: Search api app link. Get your api from deploying this &lt;a href=&#34;https://github.com/Ryuk-me/Torrent-Api-py&#34;&gt;repository&lt;/a&gt;. &lt;code&gt;Str&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supported Sites:&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;1337x, Piratebay, Nyaasi, Torlock, Torrent Galaxy, Zooqle, Kickass, Bitsearch, MagnetDL, Libgen, YTS, Limetorrent, TorrentFunk, Glodls, TorrentProject and YourBittorrent&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SEARCH_LIMIT&lt;/code&gt;: Search limit for search api, limit for each site and not overall result limit. Default is zero (Default api limit for each site). &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SEARCH_PLUGINS&lt;/code&gt;: List of qBittorrent search plugins (github raw links). I have added some plugins, you can remove/add plugins as you want. Main Source: &lt;a href=&#34;https://github.com/qbittorrent/search-plugins/wiki/Unofficial-search-plugins&#34;&gt;qBittorrent Search Plugins (Official/Unofficial)&lt;/a&gt;. &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;3. Getting Google OAuth API credential file and token.pickle&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTES&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Old authentication changed, now we can&#39;t use bot or replit to generate token.pickle. You need OS with a browser.&lt;/li&gt; &#xA; &lt;li&gt;Windows users should install python3 and pip. You can find how to install and use them from google or from this &lt;a href=&#34;https://telegra.ph/Create-Telegram-Mirror-Leech-Bot-by-Deploying-App-with-Heroku-Branch-using-Github-Workflow-12-06&#34;&gt;telegraph&lt;/a&gt; from &lt;a href=&#34;https://github.com/vishnoe115&#34;&gt;Wiszky&lt;/a&gt; tutorial.&lt;/li&gt; &#xA; &lt;li&gt;You can ONLY open the generated link from &lt;code&gt;generate_drive_token.py&lt;/code&gt; in local browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit the &lt;a href=&#34;https://console.developers.google.com/apis/credentials&#34;&gt;Google Cloud Console&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to the OAuth Consent tab, fill it, and save.&lt;/li&gt; &#xA; &lt;li&gt;Go to the Credentials tab and click Create Credentials -&amp;gt; OAuth Client ID&lt;/li&gt; &#xA; &lt;li&gt;Choose Desktop and Create.&lt;/li&gt; &#xA; &lt;li&gt;Publish your OAuth consent screen App to prevent &lt;strong&gt;token.pickle&lt;/strong&gt; from expire&lt;/li&gt; &#xA; &lt;li&gt;Use the download button to download your credentials.&lt;/li&gt; &#xA; &lt;li&gt;Move that file to the root of mirrorbot, and rename it to &lt;strong&gt;credentials.json&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://console.developers.google.com/apis/library&#34;&gt;Google API page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Search for Google Drive Api and enable it&lt;/li&gt; &#xA; &lt;li&gt;Finally, run the script to generate &lt;strong&gt;token.pickle&lt;/strong&gt; file for Google Drive:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install google-api-python-client google-auth-httplib2 google-auth-oauthlib&#xA;python3 generate_drive_token.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deploying on VPS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT NOTES&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You must set &lt;code&gt;SERVER_PORT&lt;/code&gt; variable to &lt;code&gt;80&lt;/code&gt; or any other port you want to use.&lt;/li&gt; &#xA; &lt;li&gt;To clear the container (this will not affect on the image):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker container prune&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To delete the images:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker image prune -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Check the number of processing units of your machine with &lt;code&gt;nproc&lt;/code&gt; cmd and times it by 4, then edit &lt;code&gt;AsyncIOThreadsCount&lt;/code&gt; in qBittorrent.conf.&lt;/li&gt; &#xA; &lt;li&gt;You can add &lt;code&gt;CONFIG_FILE_URL&lt;/code&gt; variable using docker and docker-compose, google it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Deploying on VPS Using Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start Docker daemon (SKIP if already running):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dockerd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build Docker image:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker build . -t mirror-bot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run the image:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker run -p 80:80 mirror-bot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To stop the image:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker ps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker stop id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Deploying on VPS Using docker-compose&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you want to use port other than 80, change it in &lt;a href=&#34;https://github.com/anasty17/mirror-leech-telegram-bot/raw/master/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; also.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build and run Docker image:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;After editing files with nano for example (nano start.sh):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker-compose up --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To stop the image:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker-compose stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To run the image:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker-compose start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tutorial video from Tortoolkit repo for docker-compose and checking ports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/c8_TU1sPK08&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/See%20Video-black?style=for-the-badge&amp;amp;logo=YouTube&#34; width=&#34;160&#34; &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Deploying on Heroku&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/anasty17/mirror-leech-telegram-bot/tree/heroku&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Deploy%20Guide-blueviolet?style=for-the-badge&amp;amp;logo=heroku&#34; width=&#34;170&#34; &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Extras&lt;/h1&gt; &#xA;&lt;h2&gt;Bot commands to be set in &lt;a href=&#34;https://t.me/BotFather&#34;&gt;@BotFather&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;mirror - or /m Mirror&#xA;zipmirror - or /zm Mirror and upload as zip&#xA;unzipmirror - or /uzm Mirror and extract files&#xA;qbmirror - or /qm Mirror torrent using qBittorrent&#xA;qbzipmirror - or /qzm Mirror torrent and upload as zip using qb&#xA;qbunzipmirror - or /quzm Mirror torrent and extract files using qb&#xA;leech - or /l Leech&#xA;zipleech - or /zl Leech and upload as zip&#xA;unzipleech - or /uzl Leech and extract files&#xA;qbleech - or /ql Leech torrent using qBittorrent&#xA;qbzipleech - or /qzl Leech torrent and upload as zip using qb&#xA;qbunzipleech - or /quzl Leech torrent and extract using qb&#xA;clone - Copy file/folder to Drive&#xA;count - Count file/folder of Drive&#xA;ytdl - or /y Mirror yt-dlp supported link&#xA;ytdlzip - or /yz Mirror yt-dlp supported link as zip&#xA;ytdlleech - or /yl Leech through yt-dlp supported link&#xA;ytdlzipleech - or /yzl Leech yt-dlp support link as zip&#xA;leechset - Leech settings&#xA;setthumb - Set thumbnail&#xA;status - Get Mirror Status message&#xA;btsel - select files from torrent&#xA;rsslist - or /rl List all subscribed rss feed info&#xA;rssget - or /rg Get specific No. of links from specific rss feed&#xA;rsssub - or /rs Subscribe new rss feed&#xA;rssunsub - or /rus Unsubscribe rss feed by title&#xA;rssset - or /rst Rss Settings&#xA;list - Search files in Drive&#xA;search - Search for torrents with API&#xA;cancel - Cancel a task&#xA;cancelall - Cancel all tasks&#xA;del - Delete file/folder from Drive&#xA;log - Get the Bot Log&#xA;shell - Run commands in Shell&#xA;restart - Restart the Bot&#xA;stats - Bot Usage Stats&#xA;ping - Ping the Bot&#xA;help - All cmds with description&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;UPSTREAM REPO (Recommended)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UPSTREAM_REPO&lt;/code&gt; variable can be used for edit/add any file in repository.&lt;/li&gt; &#xA; &lt;li&gt;You can add private/public repository link to grab/overwrite all files from it.&lt;/li&gt; &#xA; &lt;li&gt;You can skip adding the privates files like token.pickle or accounts folder before deploying, also no need to add variables direct links except &lt;strong&gt;config.env&lt;/strong&gt;, simply fill &lt;code&gt;UPSTREAM_REPO&lt;/code&gt; private one in case you want to grab all files including private files.&lt;/li&gt; &#xA; &lt;li&gt;If you added private files while deploying and you have added private &lt;code&gt;UPSTREAM_REPO&lt;/code&gt; and your private files in this private repository, so your private files will be overwritten from this repository. Also if you are using URL variables like &lt;code&gt;TOKEN_PICKLE_URL&lt;/code&gt; then all files from those variables will override the private files that added before deploying or from private &lt;code&gt;UPSTREAM_REPO&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you filled &lt;code&gt;UPSTREAM_REPO&lt;/code&gt; with the official repository link, then be carefull incase any change in requirements.txt your bot will not start after restart. In this case you need to deploy again with updated code to install the new requirements or simply by changing the &lt;code&gt;UPSTREAM_REPO&lt;/code&gt; to you fork link with that old updates.&lt;/li&gt; &#xA; &lt;li&gt;In case you you filled &lt;code&gt;UPSTREAM_REPO&lt;/code&gt; with your fork link be carefull also if you fetched the commits from the official repository.&lt;/li&gt; &#xA; &lt;li&gt;The changes in your &lt;code&gt;UPSTREAM_REPO&lt;/code&gt; will take affect only after restart.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UPSTREAM_BRANCH&lt;/code&gt; don&#39;t ever fill heroku here.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Bittorrent Seed&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add &lt;code&gt;d:ratio:time&lt;/code&gt; perfix along with leech or mirror cmd.&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;d&lt;/code&gt; perfix alone will lead to use global options for aria2c or qbittorrent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Qbittorrent&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global options: &lt;code&gt;MaxRatio&lt;/code&gt; and &lt;code&gt;GlobalMaxSeedingMinutes&lt;/code&gt; in qbittorrent.conf, &lt;code&gt;-1&lt;/code&gt; means no limit, but you can cancel manually. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Don&#39;t change &lt;code&gt;MaxRatioAction&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aria2c&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global options: &lt;code&gt;--seed-ratio&lt;/code&gt; (0 means no limit) and &lt;code&gt;--seed-time&lt;/code&gt; (0 means no seed) in aria.sh.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Using Service Accounts for uploading to avoid user rate limit&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For Service Account to work, you must set &lt;code&gt;USE_SERVICE_ACCOUNTS&lt;/code&gt; = &#34;True&#34; in config file or environment variables. &lt;strong&gt;NOTE&lt;/strong&gt;: Using Service Accounts is only recommended while uploading to a Team Drive.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. Generate Service Accounts. &lt;a href=&#34;https://cloud.google.com/iam/docs/service-accounts&#34;&gt;What is Service Account?&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Let us create only the Service Accounts that we need.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Abuse of this feature is not the aim of this project and we do &lt;strong&gt;NOT&lt;/strong&gt; recommend that you make a lot of projects, just one project and 100 SAs allow you plenty of use, its also possible that over abuse might get your projects banned by Google.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you have created SAs in past from this script, you can also just re download the keys by running:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 gen_sa_accounts.py --download-keys $PROJECTID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; 1 Service Account can upload/copy around 750 GB a day, 1 project can make 100 Service Accounts so you can upload 75 TB a day or clone 2 TB from each file creator (uploader email).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Two methods to create service accounts&lt;/h4&gt; &#xA;&lt;p&gt;Choose one of these methods&lt;/p&gt; &#xA;&lt;h5&gt;1. Create Service Accounts in existed Project (Recommended Method)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;List your projects ids&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 gen_sa_accounts.py --list-projects&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable services automatically by this command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 gen_sa_accounts.py --enable-services $PROJECTID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create Sevice Accounts to current project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 gen_sa_accounts.py --create-sas $PROJECTID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download Sevice Accounts as accounts folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 gen_sa_accounts.py --download-keys $PROJECTID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;2. Create Service Accounts in New Project&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 gen_sa_accounts.py --quick-setup 1 --new-only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A folder named accounts will be created which will contain keys for the Service Accounts.&lt;/p&gt; &#xA;&lt;h3&gt;2. Add Service Accounts&lt;/h3&gt; &#xA;&lt;h4&gt;Two methods to add service accounts&lt;/h4&gt; &#xA;&lt;p&gt;Choose one of these methods&lt;/p&gt; &#xA;&lt;h5&gt;1. Add Them To Google Group then to Team Drive (Recommended)&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mount accounts folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd accounts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Grab emails form all accounts to emails.txt file that would be created in accounts folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;For Windows using PowerShell&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$emails = Get-ChildItem .\**.json |Get-Content -Raw |ConvertFrom-Json |Select -ExpandProperty client_email &amp;gt;&amp;gt;emails.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;For Linux&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;grep -oPh &#39;&#34;client_email&#34;: &#34;\K[^&#34;]+&#39; *.json &amp;gt; emails.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unmount acounts folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add emails from emails.txt to Google Group, after that add this Google Group to your Shared Drive and promote it to manager and delete email.txt file from accounts folder&lt;/p&gt; &#xA;&lt;h5&gt;2. Add Them To Team Drive Directly&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;python3 add_to_team_drive.py -d SharedTeamDriveSrcID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Generate Database&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Using Railway&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://railway.app&#34;&gt;railway&lt;/a&gt; and create account&lt;/li&gt; &#xA; &lt;li&gt;Start new project&lt;/li&gt; &#xA; &lt;li&gt;Press on &lt;code&gt;Provision PostgreSQL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After creating database press on &lt;code&gt;PostgresSQL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;Connect&lt;/code&gt; column&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;Postgres Connection URL&lt;/code&gt; and fill &lt;code&gt;DATABASE_URL&lt;/code&gt; variable with it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Using Heroku PostgreSQL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.to/prisma/how-to-setup-a-free-postgresql-database-on-heroku-1dc1&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/See%20Dev.to-black?style=for-the-badge&amp;amp;logo=dev.to&#34; width=&#34;160&#34; &#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Using ElephantSQL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://elephantsql.com&#34;&gt;elephantsql&lt;/a&gt; and create account&lt;/li&gt; &#xA; &lt;li&gt;Hit &lt;code&gt;Create New Instance&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the further instructions in the screen&lt;/li&gt; &#xA; &lt;li&gt;Hit &lt;code&gt;Select Region&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hit &lt;code&gt;Review&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hit &lt;code&gt;Create instance&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select your database name&lt;/li&gt; &#xA; &lt;li&gt;Copy your database url, and fill &lt;code&gt;DATABASE_URL&lt;/code&gt; variable with it&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Multi Search IDs&lt;/h2&gt; &#xA;&lt;p&gt;To use list from multi TD/folder. Run driveid.py in your terminal and follow it. It will generate &lt;strong&gt;drive_folder&lt;/strong&gt; file or u can simply create &lt;code&gt;drive_folder&lt;/code&gt; file in working directory and fill it, check below format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DriveName folderID/tdID or `root` IndexLink(if available)&#xA;DriveName folderID/tdID or `root` IndexLink(if available)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Yt-dlp and Aria2c Authentication Using .netrc File&lt;/h2&gt; &#xA;&lt;p&gt;For using your premium accounts in yt-dlp or for protected Index Links, create .netrc file according to following format:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Create .netrc and not netrc, this file will be hidden, so view hidden files to edit it after creation.&lt;/p&gt; &#xA;&lt;p&gt;Format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;machine host login username password my_password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;machine instagram login anas.tayyar password mypassword&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instagram Note&lt;/strong&gt;: You must login even if you want to download public posts and after first try you must confirm that this was you logged in from different ip(you can confirm from phone app).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Youtube Note&lt;/strong&gt;: For &lt;code&gt;youtube&lt;/code&gt; authentication use &lt;a href=&#34;https://github.com/ytdl-org/youtube-dl#how-do-i-pass-cookies-to-youtube-dl&#34;&gt;cookies.txt&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Using Aria2c you can also use built in feature from bot with or without username. Here example for index link without username.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;machine example.workers.dev password index_password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where host is the name of extractor (eg. instagram, Twitch). Multiple accounts of different hosts can be added each separated by a new line.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>