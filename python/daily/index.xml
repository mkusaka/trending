<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:43:33Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bhaskatripathi/pdfGPT</title>
    <updated>2023-04-30T01:43:33Z</updated>
    <id>tag:github.com,2023-04-30:/bhaskatripathi/pdfGPT</id>
    <link href="https://github.com/bhaskatripathi/pdfGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PDF GPT allows you to chat with the contents of your PDF file by using GPT capabilities. The only open source solution to turn your pdf files in a chatbot!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pdfGPT&lt;/h1&gt; &#xA;&lt;h3&gt;Problem Description :&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When you pass a large text to Open AI, it suffers from a 4K token limit. It cannot take an entire pdf file as an input&lt;/li&gt; &#xA; &lt;li&gt;Open AI sometimes becomes overtly chatty and returns irrelevant response not directly related to your query. This is because Open AI uses poor embeddings.&lt;/li&gt; &#xA; &lt;li&gt;ChatGPT cannot directly talk to external data. Some solutions use Langchain but it is token hungry if not implemented correctly.&lt;/li&gt; &#xA; &lt;li&gt;There are a number of solutions like &lt;a href=&#34;https://www.chatpdf.com&#34;&gt;https://www.chatpdf.com&lt;/a&gt;, &lt;a href=&#34;https://www.bespacific.com/chat-with-any-pdf&#34;&gt;https://www.bespacific.com/chat-with-any-pdf&lt;/a&gt;, &lt;a href=&#34;https://www.filechat.io&#34;&gt;https://www.filechat.io&lt;/a&gt; they have poor content quality and are prone to hallucination problem. One good way to avoid hallucinations and improve truthfulness is to use improved embeddings. To solve this problem, I propose to improve embeddings with Universal Sentence Encoder family of algorithms (Read more here: &lt;a href=&#34;https://tfhub.dev/google/collections/universal-sentence-encoder/1&#34;&gt;https://tfhub.dev/google/collections/universal-sentence-encoder/1&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Solution: What is PDF GPT ?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PDF GPT allows you to chat with an uploaded PDF file using GPT functionalities.&lt;/li&gt; &#xA; &lt;li&gt;The application intelligently breaks the document into smaller chunks and employs a powerful Deep Averaging Network Encoder to generate embeddings.&lt;/li&gt; &#xA; &lt;li&gt;A semantic search is first performed on your pdf content and the most relevant embeddings are passed to the Open AI.&lt;/li&gt; &#xA; &lt;li&gt;A custom logic generates precise responses. The returned response can even cite the page number in square brackets([]) where the information is located, adding credibility to the responses and helping to locate pertinent information quickly. The Responses are much better than the naive responses by Open AI.&lt;/li&gt; &#xA; &lt;li&gt;Andrej Karpathy mentioned in this post that KNN algorithm is most appropriate for similar problems: &lt;a href=&#34;https://twitter.com/karpathy/status/1647025230546886658&#34;&gt;https://twitter.com/karpathy/status/1647025230546886658&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;Demo URL: &lt;a href=&#34;https://bit.ly/41ZXBJM&#34;&gt;https://bit.ly/41ZXBJM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Please star this project if you like it!&lt;/p&gt; &#xA;&lt;h3&gt;UML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;    participant User&#xA;    participant System&#xA;&#xA;    User-&amp;gt;&amp;gt;System: Enter API Key&#xA;    User-&amp;gt;&amp;gt;System: Upload PDF/PDF URL&#xA;    User-&amp;gt;&amp;gt;System: Ask Question&#xA;    User-&amp;gt;&amp;gt;System: Submit Call to Action&#xA;&#xA;    System-&amp;gt;&amp;gt;System: Blank field Validations&#xA;    System-&amp;gt;&amp;gt;System: Convert PDF to Text&#xA;    System-&amp;gt;&amp;gt;System: Decompose Text to Chunks (150 word length)&#xA;    System-&amp;gt;&amp;gt;System: Check if embeddings file exists&#xA;    System-&amp;gt;&amp;gt;System: If file exists, load embeddings and set the fitted attribute to True&#xA;    System-&amp;gt;&amp;gt;System: If file doesn&#39;t exist, generate embeddings, fit the recommender, save embeddings to file and set fitted attribute to True&#xA;    System-&amp;gt;&amp;gt;System: Perform Semantic Search and return Top 5 Chunks with KNN&#xA;    System-&amp;gt;&amp;gt;System: Load Open AI prompt&#xA;    System-&amp;gt;&amp;gt;System: Embed Top 5 Chunks in Open AI Prompt&#xA;    System-&amp;gt;&amp;gt;System: Generate Answer with Davinci&#xA;&#xA;    System--&amp;gt;&amp;gt;User: Return Answer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flowchart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart TB&#xA;A[Input] --&amp;gt; B[URL]&#xA;A -- Upload File manually --&amp;gt; C[Parse PDF]&#xA;B --&amp;gt; D[Parse PDF] -- Preprocess --&amp;gt; E[Dynamic Text Chunks]&#xA;C -- Preprocess --&amp;gt; E[Dynamic Text Chunks with citation history]&#xA;E --Fit--&amp;gt;F[Generate text embedding with Deep Averaging Network Encoder on each chunk]&#xA;F -- Query --&amp;gt; G[Get Top Results]&#xA;G -- K-Nearest Neighbour --&amp;gt; K[Get Nearest Neighbour - matching citation references]&#xA;K -- Generate Prompt --&amp;gt; H[Generate Answer]&#xA;H -- Output --&amp;gt; I[Output]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#bhaskatripathi/pdfGPT&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=bhaskatripathi/pdfGPT&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Also Try:&lt;/h2&gt; &#xA;&lt;p&gt;This app creates schematic architecture diagrams, UML, flowcharts, Gantt charts and many more. You simple need to mention the usecase in natural language and it will create the desired diagram. &lt;a href=&#34;https://github.com/bhaskatripathi/Text2Diagram&#34;&gt;https://github.com/bhaskatripathi/Text2Diagram&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/NeMo-Guardrails</title>
    <updated>2023-04-30T01:43:33Z</updated>
    <id>tag:github.com,2023-04-30:/NVIDIA/NeMo-Guardrails</id>
    <link href="https://github.com/NVIDIA/NeMo-Guardrails" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NeMo Guardrails is an open-source toolkit for easily adding programmable guardrails to LLM-based conversational systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NeMo Guardrails&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/NeMo-Guardrails/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Tests-passing-green&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/NVIDIA/NeMo-Guardrails/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/NeMo-Guardrails/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Status-alpha-orange&#34; alt=&#34;Project Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/nemoguardrails&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/nemoguardrails.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.7%2B-green&#34; alt=&#34;Python 3.7+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LATEST RELEASE: You are currently on the main branch which tracks under-development progress towards the next release. The current release is version &lt;a href=&#34;https://github.com/NVIDIA/NeMo-Guardrails/tree/v0.1.0&#34;&gt;0.1.0&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NeMo Guardrails is an open-source toolkit for easily adding programmable guardrails to LLM-based conversational systems. Guardrails (or &#34;rails&#34; for short) are specific ways of controlling the output of a large language model, such as not talking about politics, responding in a particular way to specific user requests, following a predefined dialog path, using a particular language style, extracting structured data, and more.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Key Benefits&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Building Trustworthy, Safe and Secure LLM Conversational Systems:&lt;/strong&gt; The core value of using NeMo Guardrails is the ability to write rails to guide conversations. Developers can choose to define the behavior of their LLM-powered bots on certain topics and keep their creativity unencumbered for others!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Connect models, chains, services, and more via actions:&lt;/strong&gt; LLMs don&#39;t need to solve all the challenges. NeMo Guardrails provides the ability to connect your codebase or services to your chatbot seamlessly and securely!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Points of interest&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/NeMo-Guardrails/main/docs/README.md&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/NeMo-Guardrails/main/docs/architecture/README.md&#34;&gt;Understanding the architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/NeMo-Guardrails/main/examples/README.md&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install using pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; pip install nemoguardrails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To apply guardrails, you first create an &lt;code&gt;LLMRails&lt;/code&gt; instance, configure the desired rails and then use it to interact with the LLM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from nemoguardrails import LLMRails, RailsConfig&#xA;&#xA;config = RailsConfig.from_path(&#34;path/to/config&#34;)&#xA;app = LLMRails(config)&#xA;&#xA;new_message = app.generate(messages=[{&#xA;    &#34;role&#34;: &#34;user&#34;,&#xA;    &#34;content&#34;: &#34;Hello! What can you do for me?&#34;&#xA;}])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With LangChain&lt;/h3&gt; &#xA;&lt;p&gt;You can easily add guardrails on top of existing &lt;a href=&#34;https://github.com/hwchase17/langchain&#34;&gt;LangChain&lt;/a&gt; chains. For example, you can integrate a RetrievalQA chain for questions answering next to a basic guardrail against insults, as shown below.&lt;/p&gt; &#xA;&lt;p&gt;Guardrails configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-colang&#34;&gt;define user express insult&#xA;  &#34;You are stupid&#34;&#xA;&#xA;# Basic guardrail against insults.&#xA;define flow&#xA;  user express insult&#xA;  bot express calmly willingness to help&#xA;&#xA;# Here we use the QA chain for anything else.&#xA;define flow&#xA;  user ...&#xA;  $answer = execute qa_chain(query=$last_user_message)&#xA;  bot $answer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Python code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from nemoguardrails import LLMRails, RailsConfig&#xA;&#xA;config = RailsConfig.from_path(&#34;path/to/config&#34;)&#xA;app = LLMRails(config)&#xA;&#xA;# ... initialize `docsearch`&#xA;&#xA;qa_chain = RetrievalQA.from_chain_type(&#xA;    llm=app.llm, chain_type=&#34;stuff&#34;, retriever=docsearch.as_retriever()&#xA;)&#xA;app.register_action(qa_chain, name=&#34;qa_chain&#34;)&#xA;&#xA;history = [&#xA;    {&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;What is the current unemployment rate?&#34;}&#xA;]&#xA;result = app.generate(messages=history)&#xA;print(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Guardrails Configuration&lt;/h2&gt; &#xA;&lt;p&gt;This toolkit introduces Colang, a modeling language specifically created for designing flexible, yet controllable, dialogue flows. Colang has a python-like syntax and is designed to be simple and intuitive, especially for developers.&lt;/p&gt; &#xA;&lt;p&gt;To configure guardrails, you place one or more .co files in a configuration folder. Below is a basic example of controlling the greeting behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-colang&#34;&gt;define user express greeting&#xA;  &#34;Hello!&#34;&#xA;  &#34;Good afternoon!&#34;&#xA;&#xA;define flow&#xA;  user express greeting&#xA;  bot express greeting&#xA;  bot offer to help&#xA;&#xA;define bot express greeting&#xA;  &#34;Hello there!&#34;&#xA;&#xA;define bot offer to help&#xA;  &#34;How can I help you today?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Colang files can be written to perform complex activities, such as calling python scripts and performing multiple calls to the underlying language model. You should avoid loading Colang files from untrusted sources without careful inspection.&lt;/p&gt; &#xA;&lt;p&gt;For a brief introduction to the Colang syntax, check out the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/NeMo-Guardrails/main/docs/user_guide/colang-language-syntax-guide.md&#34;&gt;Colang Language Syntax Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inviting the community to contribute!&lt;/h2&gt; &#xA;&lt;p&gt;Guardrails is an open-source toolkit! While the example rails residing in the repository are excellent starting points we enthusiastically invite the community to contribute towards making the power of trustworthy, safe, and secure LLMs accessible to everyone. For guidance on setting up a development environment and how to contribute to NeMo Guardrails, see the &lt;a href=&#34;https://raw.githubusercontent.com/NVIDIA/NeMo-Guardrails/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This toolkit is licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>farshadz1997/Microsoft-Rewards-bot</title>
    <updated>2023-04-30T01:43:33Z</updated>
    <id>tag:github.com,2023-04-30:/farshadz1997/Microsoft-Rewards-bot</id>
    <link href="https://github.com/farshadz1997/Microsoft-Rewards-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple bot that uses Selenium to farm Microsoft Rewards written in Python&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://forthebadge.com/images/badges/made-with-python.svg?sanitize=true&#34; alt=&#34;cosmetic&#34;&gt; &lt;img src=&#34;https://ForTheBadge.com/images/badges/built-by-developers.svg?sanitize=true&#34; alt=&#34;cosmetic&#34;&gt; &lt;img src=&#34;https://ForTheBadge.com/images/badges/uses-git.svg?sanitize=true&#34; alt=&#34;cosmetic&#34;&gt; &lt;img src=&#34;https://ForTheBadge.com/images/badges/built-with-love.svg?sanitize=true&#34; alt=&#34;cosmetic&#34;&gt; &lt;a href=&#34;https://discord.gg/GaF8fFBtE3&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/GaF8fFBtE3&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;pre align=&#34;center&#34;&gt;&#xA;███╗   ███╗███████╗    ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗██████╗ &#xA;████╗ ████║██╔════╝    ██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝██╔══██╗&#xA;██╔████╔██║███████╗    █████╗  ███████║██████╔╝██╔████╔██║█████╗  ██████╔╝&#xA;██║╚██╔╝██║╚════██║    ██╔══╝  ██╔══██║██╔══██╗██║╚██╔╝██║██╔══╝  ██╔══██╗&#xA;██║ ╚═╝ ██║███████║    ██║     ██║  ██║██║  ██║██║ ╚═╝ ██║███████╗██║  ██║&#xA;╚═╝     ╚═╝╚══════╝    ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝&#xA;        built by @charlesbel upgraded by @farshadz1997      version 2.0&#xA;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg?style=for-the-badge&#34; alt=&#34;cosmetic&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?style=for-the-badge&#34; alt=&#34;cosmetic&#34;&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;👋 Welcome to the future of automation&lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;A simple bot that uses selenium to farm Microsoft Rewards written in Python.&lt;/h3&gt; &#xA;&lt;details align=&#34;center&#34;&gt; &#xA; &lt;summary&gt;&lt;h3&gt;GUI versions available&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;h4&gt;&lt;a href=&#34;https://github.com/farshadz1997/Microsoft-Rewards-bot-GUI&#34;&gt;PyQt5 version of bot&lt;/a&gt;&lt;/h4&gt;&lt;/summary&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/60227955/206023577-f933334c-edf3-49fe-b30e-12d806847ab7.png&#34; alt=&#34;cosmetic&#34;&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;h4&gt;&lt;a href=&#34;https://github.com/farshadz1997/Microsoft-Rewards-bot-GUI-V2&#34;&gt;⭐️New version powered by Flet framework⭐️&lt;/a&gt;&lt;/h4&gt;&lt;/summary&gt; &#xA;  &lt;img src=&#34;https://user-images.githubusercontent.com/60227955/218319443-3f5ea317-e759-4e4c-a847-926b240e2806.png&#34; alt=&#34;cosmetic&#34;&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Installation&lt;/h2&gt; &#xA;&lt;p allign=&#34;center&#34;&gt;You can also find this repository on &lt;a href=&#34;https://gitlab.com/farshadzargary1997/Microsoft-Rewards-bot&#34;&gt;Gitlab&lt;/a&gt;. You can use the simple installation guide &lt;a href=&#34;https://github.com/farshadz1997/Microsoft-Rewards-bot/raw/master/setup.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For setting up the bot in termux ( android ), follow &lt;a href=&#34;https://raw.githubusercontent.com/farshadz1997/Microsoft-Rewards-bot/master/setup.md#setup-microsoft-rewards-bot-in-termux&#34;&gt;here&lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install requirements with the following command : &lt;pre&gt;pip install -r requirements.txt&lt;/pre&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have Chrome installed (unless your using --edge)&lt;/li&gt; &#xA; &lt;li&gt;Edit the accounts.json.sample with your accounts credentials and rename it by removing &lt;code&gt;.sample&lt;/code&gt; at the end.&lt;br&gt; If you want to add more than one account, the syntax is the following (&lt;code&gt;mobile_user_agent&lt;/code&gt;, &lt;code&gt;proxy&lt;/code&gt; and &lt;code&gt;goal&lt;/code&gt; are optional). Remove &lt;code&gt;mobile_user_agent&lt;/code&gt;, &lt;code&gt;proxy&lt;/code&gt; or &lt;code&gt;goal&lt;/code&gt; from your account if you don&#39;t know how to use them: &lt;pre&gt;&lt;code class=&#34;language-accounts.json&#34;&gt;[&#xA;    {&#xA;        &#34;username&#34;: &#34;Your Email&#34;,&#xA;        &#34;password&#34;: &#34;Your Password&#34;,&#xA;        &#34;totpSecret&#34;: &#34;Your TOTP Secret (optional)&#34;,&#xA;        &#34;mobile_user_agent&#34;: &#34;your preferred mobile user agent&#34;,&#xA;        &#34;proxy&#34;: &#34;HTTP proxy (IP:PORT)&#34;,&#xA;        &#34;goal&#34;: &#34;Amazon&#34;&#xA;    },&#xA;    {&#xA;        &#34;username&#34;: &#34;Your Email 2&#34;,&#xA;        &#34;password&#34;: &#34;Your Password 2&#34;,&#xA;        &#34;totpSecret&#34;: &#34;Your TOTP Secret (optional)&#34;,&#xA;        &#34;mobile_user_agent&#34;: &#34;your preferred mobile user agent&#34;,&#xA;        &#34;proxy&#34;: &#34;HTTP proxy (IP:PORT)&#34;,&#xA;        &#34;goal&#34;: &#34;Xbox Game Pass Ultimate&#34;&#xA;     }&#xA;]   &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Due to the limits of Ipapi sometimes it returns an error, and it causes the bot to stop. So you can define the default language and location to prevent it from &lt;a href=&#34;https://github.com/farshadz1997/Microsoft-Rewards-bot/raw/479b2d4b25761d245dc6b3519627162a44d8f85b/ms_rewards_farmer.py#L367&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run the script&lt;/li&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Use optional arguments&lt;/li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;--headless&lt;/code&gt; You can use this argument to run the script in headless mode.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--no-images&lt;/code&gt; Prevent images from loading to increase performance.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--dont-check-for-updates&lt;/code&gt; Prevents script from checking updates.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--shuffle&lt;/code&gt; Randomize the order in which accounts are farmed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--redeem&lt;/code&gt; Enable auto-redeem rewards based on accounts.json goals.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--calculator&lt;/code&gt; Opens GUI calculator with custom options. When using this flag the script will not run.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--session&lt;/code&gt; Use this argument to create session for each account.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--start-at TIME&lt;/code&gt; This argument takes time in 24h format (HH:MM) to run it at the given time.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--everyday&lt;/code&gt; This argument makes the script to stay open and start it again next day at time you start.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--fast&lt;/code&gt; This argument reduces delays of script and make it faster (use this if you have high speed connection).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--superfast&lt;/code&gt; This argument is faster than fast (use this if you have a very high speed and reliable connection).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--account-browser ACCOUNT&lt;/code&gt; This argument opens session for given account if it&#39;s already exist else returns error.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--error&lt;/code&gt; When you use this argument, app displays crash error in terminal when it fails.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--telegram TOKEN CHAT_ID&lt;/code&gt; Use this argument to send logs to your telegram through your bot.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--discord WEBHOOK_URL&lt;/code&gt; Use this argument to send logs to your Discord server through webhook.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--skip-unusual&lt;/code&gt; Click on skip for 5 days on unusual activity detection.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--edge&lt;/code&gt; Use Microsoft Edge webdriver instead of Chrome.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--skip-shopping&lt;/code&gt; Skips MSN shopping game.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--repeat-shopping&lt;/code&gt; Repeat MSN shopping game. (So it runs twice per account consecutively)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--no-webdriver-manager&lt;/code&gt; Use system installed webdriver instead of webdriver-manager.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--virtual-display&lt;/code&gt; Use PyVirtualDisplay (intended for Raspberry Pi users).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--on-finish ACTION&lt;/code&gt; Action to perform on finish from one of the following: shutdown, sleep, hibernate, exit.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--currency CURRENCY&lt;/code&gt; Converts your points into your preferred currency. Available currencies: EUR, USD, AUD, INR, GBP, CAD, JPY, CHF, NZD, ZAR, BRL, CNY, HKD, SGD, THB&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--skip-if-proxy-dead&lt;/code&gt; skips farming a particular account whose supplied proxy is no longer active.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--recheck-proxy&lt;/code&gt; rechecks proxy in case they are reported dead.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--dont-check-internet&lt;/code&gt; Bot won&#39;t look for internet connection if you use this arg.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;--print-to-webhook&lt;/code&gt; Bot will send all the message printed to cli to the webhhok. (will not work if you don&#39;t use either discord or telegram argument).&lt;/li&gt; &#xA;   &lt;li&gt;For example type in your terminal &lt;code&gt;python ms_rewards_farmer.py --start-at 14:30 --everyday --fast --session&lt;/code&gt; You don&#39;t need to use all of arguments.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;li&gt;Run the script normally that session and headless disabled.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Features&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bing searches (Desktop, Mobile and Edge) with User-Agents&lt;/li&gt; &#xA; &lt;li&gt;Complete automatically the daily set&lt;/li&gt; &#xA; &lt;li&gt;Complete automatically punch cards&lt;/li&gt; &#xA; &lt;li&gt;Complete automatically the others promotions&lt;/li&gt; &#xA; &lt;li&gt;Complete MSN shopping game quiz&lt;/li&gt; &#xA; &lt;li&gt;Headless Mode&lt;/li&gt; &#xA; &lt;li&gt;Multi-Account Management&lt;/li&gt; &#xA; &lt;li&gt;If it faces to an unexpected error then try the account from first&lt;/li&gt; &#xA; &lt;li&gt;Save progress of bot in a log file and use it to pass completed account on the next start at the same day&lt;/li&gt; &#xA; &lt;li&gt;Detect suspended accounts&lt;/li&gt; &#xA; &lt;li&gt;Detect locked accounts&lt;/li&gt; &#xA; &lt;li&gt;Detect unusual activities&lt;/li&gt; &#xA; &lt;li&gt;Uses time out to prevent infinite loop&lt;/li&gt; &#xA; &lt;li&gt;You can assign custom user-agent for mobile like above example&lt;/li&gt; &#xA; &lt;li&gt;Set clock to start it at specific time&lt;/li&gt; &#xA; &lt;li&gt;For Bing search it uses random word at first try and if api failed then it uses google trends&lt;/li&gt; &#xA; &lt;li&gt;Support HTTP proxy&lt;/li&gt; &#xA; &lt;li&gt;Auto-redeem rewards&lt;/li&gt; &#xA; &lt;li&gt;Rewards Calculator &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;AUTO-REDEEM (BETA)&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;/p&gt;&#xA;&lt;h4 align=&#34;left&#34;&gt;This feature is still in beta! Feel free to try it and report any problems you find. Bear in mind that this feature was designed, so it would only redeem one card from one account each time you run the farmer. This is intentional so your accounts are less likely to get banned. If you do not specify any goal in accounts.json, it will default to Amazon Gift Cards&lt;/h4&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;⚠️CAUTION!⚠️&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h4 align=&#34;center&#34;&gt;Do not use headless mode, it can cause your account to be suspended from Microsoft Rewards.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Legal Notice!&lt;/h2&gt; &#xA;&lt;p&gt;I and contributors do not endorse breaking Microsoft’s ToS. This is a proof of concept and purely for educational purposes to learn about Python and Selenium. Contributors and I have learned a lot about Python, Selenium and even using Github and how to collaborate as a team of people remotely. Please take a look at &lt;a href=&#34;https://www.microsoft.com/en-us/servicesagreement/&#34;&gt;Microsoft ToS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support me&lt;/h2&gt; &#xA;&lt;p&gt;Your support will be much appreciated&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;b&gt;BTC (BTC network):&lt;/b&gt; bc1qn52jx934nd54vhcv6x5xxsrc7z2qvwf6atcut3&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;ETH (ERC20):&lt;/b&gt; 0x2486D75EC2675833569b85d77b01C2c37097ECc2&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;LTC:&lt;/b&gt; ltc1qc03mnemxewn6z0chfc20yw4samucg6kczmwuf8&lt;/li&gt; &#xA; &lt;li&gt;&lt;b&gt;USDT (ERC20):&lt;/b&gt; 0x2486D75EC2675833569b85d77b01C2c37097ECc2&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>