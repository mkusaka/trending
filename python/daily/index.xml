<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-09T01:37:29Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>521xueweihan/GitHub520</title>
    <updated>2022-12-09T01:37:29Z</updated>
    <id>tag:github.com,2022-12-09:/521xueweihan/GitHub520</id>
    <link href="https://github.com/521xueweihan/GitHub520" rel="alternate"></link>
    <summary type="html">&lt;p&gt;😘 让你“爱”上 GitHub，解决访问时图裂、加载慢的问题。（无需安装）&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub520&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/521xueweihan/img_logo@main/logo/readme.gif&#34;&gt; &lt;br&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/521xueweihan/HelloGitHub&#34; target=&#34;_blank&#34;&gt;HelloGitHub&lt;/a&gt;&lt;/strong&gt; 分享 GitHub 上有趣、入门级的开源项目。&lt;br&gt;兴趣是最好的老师，这里能够帮你找到编程的兴趣！ &lt;/p&gt; &#xA;&lt;p&gt;服务器续费到 2024.12 共花了：1500+💰 &lt;a href=&#34;https://cdn.jsdelivr.net/gh/521xueweihan/img_logo@main/logo/receiving_code.png&#34;&gt;点击扫码赞助&lt;/a&gt;，感谢🙏&lt;/p&gt; &#xA;&lt;h2&gt;一、介绍&lt;/h2&gt; &#xA;&lt;p&gt;对 GitHub 说&#34;爱&#34;太难了：访问慢、图片加载不出来。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;本项目无需安装任何程序，仅需 5 分钟。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;通过修改本地 hosts 文件，试图解决：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub 访问速度慢的问题&lt;/li&gt; &#xA; &lt;li&gt;GitHub 项目中的图片显示不出的问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;让你&#34;爱&#34;上 GitHub。&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;注：&lt;/em&gt; 本项目还处于测试阶段，仅在本机测试通过，如有问题欢迎提 &lt;a href=&#34;https://github.com/521xueweihan/GitHub520/issues/new&#34;&gt;issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;二、使用方法&lt;/h2&gt; &#xA;&lt;p&gt;下面的地址无需访问 GitHub 即可获取到最新的 hosts 内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;文件：&lt;code&gt;https://raw.hellogithub.com/hosts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON：&lt;code&gt;https://raw.hellogithub.com/hosts.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.1 手动方式&lt;/h3&gt; &#xA;&lt;h4&gt;2.1.1 复制下面的内容&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# GitHub520 Host Start&#xA;140.82.112.25                 alive.github.com&#xA;140.82.114.6                  api.github.com&#xA;185.199.110.153               assets-cdn.github.com&#xA;185.199.108.133               avatars.githubusercontent.com&#xA;185.199.108.133               avatars0.githubusercontent.com&#xA;185.199.108.133               avatars1.githubusercontent.com&#xA;185.199.108.133               avatars2.githubusercontent.com&#xA;185.199.108.133               avatars3.githubusercontent.com&#xA;185.199.108.133               avatars4.githubusercontent.com&#xA;185.199.108.133               avatars5.githubusercontent.com&#xA;185.199.108.133               camo.githubusercontent.com&#xA;140.82.113.22                 central.github.com&#xA;185.199.108.133               cloud.githubusercontent.com&#xA;140.82.114.9                  codeload.github.com&#xA;140.82.112.22                 collector.github.com&#xA;185.199.108.133               desktop.githubusercontent.com&#xA;185.199.108.133               favicons.githubusercontent.com&#xA;140.82.112.4                  gist.github.com&#xA;52.217.48.36                  github-cloud.s3.amazonaws.com&#xA;52.217.198.241                github-com.s3.amazonaws.com&#xA;52.217.18.76                  github-production-release-asset-2e65be.s3.amazonaws.com&#xA;52.217.44.156                 github-production-repository-file-5c1aeb.s3.amazonaws.com&#xA;52.216.110.51                 github-production-user-asset-6210df.s3.amazonaws.com&#xA;192.0.66.2                    github.blog&#xA;140.82.114.3                  github.com&#xA;140.82.114.17                 github.community&#xA;185.199.109.154               github.githubassets.com&#xA;151.101.65.194                github.global.ssl.fastly.net&#xA;185.199.110.153               github.io&#xA;185.199.108.133               github.map.fastly.net&#xA;185.199.110.153               githubstatus.com&#xA;140.82.112.26                 live.github.com&#xA;185.199.108.133               media.githubusercontent.com&#xA;185.199.108.133               objects.githubusercontent.com&#xA;13.107.42.16                  pipelines.actions.githubusercontent.com&#xA;185.199.108.133               raw.githubusercontent.com&#xA;185.199.108.133               user-images.githubusercontent.com&#xA;13.107.238.40                 vscode.dev&#xA;&#xA;&#xA;# Update time: 2022-12-09T08:20:48+08:00&#xA;# Update url: https://raw.hellogithub.com/hosts&#xA;# Star me: https://github.com/521xueweihan/GitHub520&#xA;# GitHub520 Host End&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;该内容会自动定时更新， 数据更新时间：2022-12-09T08:20:48+08:00&lt;/p&gt; &#xA;&lt;h4&gt;2.1.2 修改 hosts 文件&lt;/h4&gt; &#xA;&lt;p&gt;hosts 文件在每个系统的位置不一，详情如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 系统：&lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux 系统：&lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mac（苹果电脑）系统：&lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Android（安卓）系统：&lt;code&gt;/system/etc/hosts&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;iPhone（iOS）系统：&lt;code&gt;/etc/hosts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;修改方法，把第一步的内容复制到文本末尾：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Windows 使用记事本。&lt;/li&gt; &#xA; &lt;li&gt;Linux、Mac 使用 Root 权限：&lt;code&gt;sudo vi /etc/hosts&lt;/code&gt;。&lt;/li&gt; &#xA; &lt;li&gt;iPhone、iPad 须越狱、Android 必须要 root。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;2.1.3 激活生效&lt;/h4&gt; &#xA;&lt;p&gt;大部分情况下是直接生效，如未生效可尝试下面的办法，刷新 DNS：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows：在 CMD 窗口输入：&lt;code&gt;ipconfig /flushdns&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux 命令：&lt;code&gt;sudo nscd restart&lt;/code&gt;，如报错则须安装：&lt;code&gt;sudo apt install nscd&lt;/code&gt; 或 &lt;code&gt;sudo /etc/init.d/nscd restart&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac 命令：&lt;code&gt;sudo killall -HUP mDNSResponder&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips：&lt;/strong&gt; 上述方法无效可以尝试重启机器。&lt;/p&gt; &#xA;&lt;h3&gt;2.2 自动方式（SwitchHosts）&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;：推荐 &lt;a href=&#34;https://github.com/oldj/SwitchHosts&#34;&gt;SwitchHosts&lt;/a&gt; 工具管理 hosts&lt;/p&gt; &#xA;&lt;p&gt;以 SwitchHosts 为例，看一下怎么使用的，配置参考下面：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Title: 随意&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Type: &lt;code&gt;Remote&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;URL: &lt;code&gt;https://raw.hellogithub.com/hosts&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Auto Refresh: 最好选 &lt;code&gt;1 hour&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/521xueweihan/GitHub520/main/img/switch-hosts.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;这样每次 hosts 有更新都能及时进行更新，免去手动更新。&lt;/p&gt; &#xA;&lt;h3&gt;2.3 一行命令 (适用于类 Unix 系统)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;sed -i &#34;/# GitHub520 Host Start/Q&#34; /etc/hosts &amp;amp;&amp;amp; curl https://raw.hellogithub.com/hosts &amp;gt;&amp;gt; /etc/hosts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;将上面的命令添加到 cron，可定时执行。使用前确保 GitHub520 内容在该文件最后部分。&lt;/p&gt; &#xA;&lt;h3&gt;2.4 AdGuard 用户（自动方式）&lt;/h3&gt; &#xA;&lt;p&gt;在 &lt;strong&gt;过滤器&amp;gt;DNS 封锁清单&amp;gt;添加阻止列表&amp;gt;添加一个自定义列表&lt;/strong&gt;，配置如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;名称：随意&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;URL：&lt;code&gt;https://raw.hellogithub.com/hosts&lt;/code&gt;（和上面 SwitchHosts 使用的一样）&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如图：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/521xueweihan/GitHub520/main/img/AdGuard-rules.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;更新间隔在 &lt;strong&gt;设置 &amp;gt; 常规设置 &amp;gt; 过滤器更新间隔（设置一小时一次即可）&lt;/strong&gt;，记得勾选上 &lt;strong&gt;使用过滤器和 Hosts 文件以拦截指定域名&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/521xueweihan/GitHub520/main/img/AdGuard-rules2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;：不要添加在 &lt;strong&gt;DNS 允许清单&lt;/strong&gt; 内，只能添加在 &lt;strong&gt;DNS 封锁清单&lt;/strong&gt; 才管用。 另外，AdGuard for Mac、AdGuard for Windows、AdGuard for Android、AdGuard for IOS 等等 &lt;strong&gt;AdGuard 家族软件&lt;/strong&gt; 添加方法均类似。&lt;/p&gt; &#xA;&lt;h2&gt;三、效果对比&lt;/h2&gt; &#xA;&lt;p&gt;之前的样子：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/521xueweihan/GitHub520/main/img/old.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;修改完 hosts 的样子：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/521xueweihan/GitHub520/main/img/new.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 定时自动更新 hosts 内容&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hosts 内容无变动不会更新&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 寻到最优 IP 解析结果&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a rel=&#34;license&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width: 0&#34; src=&#34;https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png&#34;&gt;&lt;/a&gt;&lt;br&gt;本作品采用 &lt;a rel=&#34;license&#34; href=&#34;https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh&#34;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 进行许可。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shankarpandala/lazypredict</title>
    <updated>2022-12-09T01:37:29Z</updated>
    <id>tag:github.com,2022-12-09:/shankarpandala/lazypredict</id>
    <link href="https://github.com/shankarpandala/lazypredict" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lazy Predict help build a lot of basic models without much code and helps understand which models works better without any parameter tuning&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lazy Predict&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.python.org/pypi/lazypredict&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/lazypredict.svg?sanitize=true&#34; alt=&#34;image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.travis-ci.com/shankarpandala/lazypredict&#34;&gt;&lt;img src=&#34;https://app.travis-ci.com/shankarpandala/lazypredict.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lazypredict.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/lazypredict/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/lazypredict&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/lazypredict&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/shankarpandala/lazypredict&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/shankarpandala/lazypredict/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lazy Predict helps build a lot of basic models without much code and helps understand which models works better without any parameter tuning.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Free software: MIT license&lt;/li&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://lazypredict.readthedocs.io&#34;&gt;https://lazypredict.readthedocs.io&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To install Lazy Predict:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install lazypredict&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;To use Lazy Predict in a project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import lazypredict&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Classification&lt;/h1&gt; &#xA;&lt;p&gt;Example :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from lazypredict.Supervised import LazyClassifier&#xA;from sklearn.datasets import load_breast_cancer&#xA;from sklearn.model_selection import train_test_split&#xA;&#xA;data = load_breast_cancer()&#xA;X = data.data&#xA;y= data.target&#xA;&#xA;X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=.5,random_state =123)&#xA;&#xA;clf = LazyClassifier(verbose=0,ignore_warnings=True, custom_metric=None)&#xA;models,predictions = clf.fit(X_train, X_test, y_train, y_test)&#xA;&#xA;print(models)&#xA;&#xA;&#xA;| Model                          |   Accuracy |   Balanced Accuracy |   ROC AUC |   F1 Score |   Time Taken |&#xA;|:-------------------------------|-----------:|--------------------:|----------:|-----------:|-------------:|&#xA;| LinearSVC                      |   0.989474 |            0.987544 |  0.987544 |   0.989462 |    0.0150008 |&#xA;| SGDClassifier                  |   0.989474 |            0.987544 |  0.987544 |   0.989462 |    0.0109992 |&#xA;| MLPClassifier                  |   0.985965 |            0.986904 |  0.986904 |   0.985994 |    0.426     |&#xA;| Perceptron                     |   0.985965 |            0.984797 |  0.984797 |   0.985965 |    0.0120046 |&#xA;| LogisticRegression             |   0.985965 |            0.98269  |  0.98269  |   0.985934 |    0.0200036 |&#xA;| LogisticRegressionCV           |   0.985965 |            0.98269  |  0.98269  |   0.985934 |    0.262997  |&#xA;| SVC                            |   0.982456 |            0.979942 |  0.979942 |   0.982437 |    0.0140011 |&#xA;| CalibratedClassifierCV         |   0.982456 |            0.975728 |  0.975728 |   0.982357 |    0.0350015 |&#xA;| PassiveAggressiveClassifier    |   0.975439 |            0.974448 |  0.974448 |   0.975464 |    0.0130005 |&#xA;| LabelPropagation               |   0.975439 |            0.974448 |  0.974448 |   0.975464 |    0.0429988 |&#xA;| LabelSpreading                 |   0.975439 |            0.974448 |  0.974448 |   0.975464 |    0.0310006 |&#xA;| RandomForestClassifier         |   0.97193  |            0.969594 |  0.969594 |   0.97193  |    0.033     |&#xA;| GradientBoostingClassifier     |   0.97193  |            0.967486 |  0.967486 |   0.971869 |    0.166998  |&#xA;| QuadraticDiscriminantAnalysis  |   0.964912 |            0.966206 |  0.966206 |   0.965052 |    0.0119994 |&#xA;| HistGradientBoostingClassifier |   0.968421 |            0.964739 |  0.964739 |   0.968387 |    0.682003  |&#xA;| RidgeClassifierCV              |   0.97193  |            0.963272 |  0.963272 |   0.971736 |    0.0130029 |&#xA;| RidgeClassifier                |   0.968421 |            0.960525 |  0.960525 |   0.968242 |    0.0119977 |&#xA;| AdaBoostClassifier             |   0.961404 |            0.959245 |  0.959245 |   0.961444 |    0.204998  |&#xA;| ExtraTreesClassifier           |   0.961404 |            0.957138 |  0.957138 |   0.961362 |    0.0270066 |&#xA;| KNeighborsClassifier           |   0.961404 |            0.95503  |  0.95503  |   0.961276 |    0.0560005 |&#xA;| BaggingClassifier              |   0.947368 |            0.954577 |  0.954577 |   0.947882 |    0.0559971 |&#xA;| BernoulliNB                    |   0.950877 |            0.951003 |  0.951003 |   0.951072 |    0.0169988 |&#xA;| LinearDiscriminantAnalysis     |   0.961404 |            0.950816 |  0.950816 |   0.961089 |    0.0199995 |&#xA;| GaussianNB                     |   0.954386 |            0.949536 |  0.949536 |   0.954337 |    0.0139935 |&#xA;| NuSVC                          |   0.954386 |            0.943215 |  0.943215 |   0.954014 |    0.019989  |&#xA;| DecisionTreeClassifier         |   0.936842 |            0.933693 |  0.933693 |   0.936971 |    0.0170023 |&#xA;| NearestCentroid                |   0.947368 |            0.933506 |  0.933506 |   0.946801 |    0.0160074 |&#xA;| ExtraTreeClassifier            |   0.922807 |            0.912168 |  0.912168 |   0.922462 |    0.0109999 |&#xA;| CheckingClassifier             |   0.361404 |            0.5      |  0.5      |   0.191879 |    0.0170043 |&#xA;| DummyClassifier                |   0.512281 |            0.489598 |  0.489598 |   0.518924 |    0.0119965 |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Regression&lt;/h1&gt; &#xA;&lt;p&gt;Example :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;from lazypredict.Supervised import LazyRegressor&#xA;from sklearn import datasets&#xA;from sklearn.utils import shuffle&#xA;import numpy as np&#xA;&#xA;boston = datasets.load_boston()&#xA;X, y = shuffle(boston.data, boston.target, random_state=13)&#xA;X = X.astype(np.float32)&#xA;&#xA;offset = int(X.shape[0] * 0.9)&#xA;&#xA;X_train, y_train = X[:offset], y[:offset]&#xA;X_test, y_test = X[offset:], y[offset:]&#xA;&#xA;reg = LazyRegressor(verbose=0, ignore_warnings=False, custom_metric=None)&#xA;models, predictions = reg.fit(X_train, X_test, y_train, y_test)&#xA;&#xA;print(models)&#xA;&#xA;&#xA;| Model                         | Adjusted R-Squared | R-Squared |  RMSE | Time Taken |&#xA;|:------------------------------|-------------------:|----------:|------:|-----------:|&#xA;| SVR                           |               0.83 |      0.88 |  2.62 |       0.01 |&#xA;| BaggingRegressor              |               0.83 |      0.88 |  2.63 |       0.03 |&#xA;| NuSVR                         |               0.82 |      0.86 |  2.76 |       0.03 |&#xA;| RandomForestRegressor         |               0.81 |      0.86 |  2.78 |       0.21 |&#xA;| XGBRegressor                  |               0.81 |      0.86 |  2.79 |       0.06 |&#xA;| GradientBoostingRegressor     |               0.81 |      0.86 |  2.84 |       0.11 |&#xA;| ExtraTreesRegressor           |               0.79 |      0.84 |  2.98 |       0.12 |&#xA;| AdaBoostRegressor             |               0.78 |      0.83 |  3.04 |       0.07 |&#xA;| HistGradientBoostingRegressor |               0.77 |      0.83 |  3.06 |       0.17 |&#xA;| PoissonRegressor              |               0.77 |      0.83 |  3.11 |       0.01 |&#xA;| LGBMRegressor                 |               0.77 |      0.83 |  3.11 |       0.07 |&#xA;| KNeighborsRegressor           |               0.77 |      0.83 |  3.12 |       0.01 |&#xA;| DecisionTreeRegressor         |               0.65 |      0.74 |  3.79 |       0.01 |&#xA;| MLPRegressor                  |               0.65 |      0.74 |  3.80 |       1.63 |&#xA;| HuberRegressor                |               0.64 |      0.74 |  3.84 |       0.01 |&#xA;| GammaRegressor                |               0.64 |      0.73 |  3.88 |       0.01 |&#xA;| LinearSVR                     |               0.62 |      0.72 |  3.96 |       0.01 |&#xA;| RidgeCV                       |               0.62 |      0.72 |  3.97 |       0.01 |&#xA;| BayesianRidge                 |               0.62 |      0.72 |  3.97 |       0.01 |&#xA;| Ridge                         |               0.62 |      0.72 |  3.97 |       0.01 |&#xA;| TransformedTargetRegressor    |               0.62 |      0.72 |  3.97 |       0.01 |&#xA;| LinearRegression              |               0.62 |      0.72 |  3.97 |       0.01 |&#xA;| ElasticNetCV                  |               0.62 |      0.72 |  3.98 |       0.04 |&#xA;| LassoCV                       |               0.62 |      0.72 |  3.98 |       0.06 |&#xA;| LassoLarsIC                   |               0.62 |      0.72 |  3.98 |       0.01 |&#xA;| LassoLarsCV                   |               0.62 |      0.72 |  3.98 |       0.02 |&#xA;| Lars                          |               0.61 |      0.72 |  3.99 |       0.01 |&#xA;| LarsCV                        |               0.61 |      0.71 |  4.02 |       0.04 |&#xA;| SGDRegressor                  |               0.60 |      0.70 |  4.07 |       0.01 |&#xA;| TweedieRegressor              |               0.59 |      0.70 |  4.12 |       0.01 |&#xA;| GeneralizedLinearRegressor    |               0.59 |      0.70 |  4.12 |       0.01 |&#xA;| ElasticNet                    |               0.58 |      0.69 |  4.16 |       0.01 |&#xA;| Lasso                         |               0.54 |      0.66 |  4.35 |       0.02 |&#xA;| RANSACRegressor               |               0.53 |      0.65 |  4.41 |       0.04 |&#xA;| OrthogonalMatchingPursuitCV   |               0.45 |      0.59 |  4.78 |       0.02 |&#xA;| PassiveAggressiveRegressor    |               0.37 |      0.54 |  5.09 |       0.01 |&#xA;| GaussianProcessRegressor      |               0.23 |      0.43 |  5.65 |       0.03 |&#xA;| OrthogonalMatchingPursuit     |               0.16 |      0.38 |  5.89 |       0.01 |&#xA;| ExtraTreeRegressor            |               0.08 |      0.32 |  6.17 |       0.01 |&#xA;| DummyRegressor                |              -0.38 |     -0.02 |  7.56 |       0.01 |&#xA;| LassoLars                     |              -0.38 |     -0.02 |  7.56 |       0.01 |&#xA;| KernelRidge                   |             -11.50 |     -8.25 | 22.74 |       0.01 |&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sudoskys/Openaibot</title>
    <updated>2022-12-09T01:37:29Z</updated>
    <id>tag:github.com,2022-12-09:/sudoskys/Openaibot</id>
    <link href="https://github.com/sudoskys/Openaibot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 Using OpenAi&#39;s Api on Telegram to achieve chatGPT func|在 Telegram 上使用 openai *API* 对话/续写 异步机器人| 👋 支持上下文对话 | 一键部署⚡️ | 非逆向&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Openaibot&lt;/h1&gt; &#xA;&lt;p&gt;OpenAI Chat Telegram Bot&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sudoskys/Openaibot/raw/main/README.EN.md&#34;&gt;EN_README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;在 Telegram 上使用 OpenAi 写作. Python &amp;gt; 3.7。&lt;/p&gt; &#xA;&lt;p&gt;本程序利用 &lt;code&gt;Api&lt;/code&gt; 认证 &lt;code&gt;Token&lt;/code&gt; 运作，并不是 &lt;code&gt;chatGPT&lt;/code&gt; 的逆向，chatGPT &lt;strong&gt;功能&lt;/strong&gt;的 &lt;strong&gt;Python 实现&lt;/strong&gt; 由本机器人自实现。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;This is not an official OpenAI product. This is a personal project and is not affiliated with OpenAI in any way. Don&#39;t sue me&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;不对机器人生成的任何内容负责，内容由OpenAi提供&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;自己实现的 chatGPT ，体验基本一样，就是 Api 要钱&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;自制异步依赖库&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;聊天(chat) chatGpt 自实现 + NLP增强&lt;/li&gt; &#xA; &lt;li&gt;续写(write) 独立推测，续写&lt;/li&gt; &#xA; &lt;li&gt;多用户&lt;/li&gt; &#xA; &lt;li&gt;多Api key 负载，超额弹出。&lt;/li&gt; &#xA; &lt;li&gt;chatGPT api 版本实现，不逆向 preview 的 api&lt;/li&gt; &#xA; &lt;li&gt;支持私聊无感回复&lt;/li&gt; &#xA; &lt;li&gt;支持速率限制&lt;/li&gt; &#xA; &lt;li&gt;支持白名单系统&lt;/li&gt; &#xA; &lt;li&gt;支持黑名单系统&lt;/li&gt; &#xA; &lt;li&gt;支持内容过滤&lt;/li&gt; &#xA; &lt;li&gt;(20221205) 依赖库不支持异步，大量请求会阻塞,替换为自己写的异步库&lt;/li&gt; &#xA; &lt;li&gt;chatGpt 替换为自己写的 chatGpt Openai api Python 实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;见 &lt;a href=&#34;https://github.com/sudoskys/Openaibot/issues/1&#34;&gt;https://github.com/sudoskys/Openaibot/issues/1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;聊天&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;🔭利用 &lt;code&gt;/chat + 句子&lt;/code&gt; 可重置 AI 的记忆，然后只需要&lt;code&gt;回复&lt;/code&gt;即可交谈。私聊消息 或 群组24小时内的消息，会自动使用上下文进行推测和裁剪，直接回复就可以继续对话。&lt;/p&gt; &#xA;&lt;p&gt;每次使用&lt;code&gt;/chat&lt;/code&gt; 都会重置 Ai 的记忆桶。&lt;/p&gt; &#xA;&lt;p&gt;/write +句子 进行续写&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;续写&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;🥖使用 &lt;code&gt;/write&lt;/code&gt; 进行没有上下文推测的续写。&lt;/p&gt; &#xA;&lt;h2&gt;初始化&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;拉取/更新程序&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;安装脚本会自动备份恢复配置，在根目录运行(不要在程序目录内) ，更新时候重新运行就可以备份程序了，如果是小更新可以直接 &lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -LO https://raw.githubusercontent.com/sudoskys/Openaibot/main/setup.sh &amp;amp;&amp;amp; sh setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;cd Openaibot&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;配置&lt;/h2&gt; &#xA;&lt;h3&gt;配置 Redis&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;本机&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;apt-get install redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Docker + 持久化（保存在 ./redis 目录下）&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --name redis -d -v $(pwd)/redis:/data -p 6379:6379 redis redis-server --save 60 1 --loglevel warning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;配置依赖&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;过滤器&lt;/h3&gt; &#xA;&lt;p&gt;Data/Danger.form 一行一个黑名单词汇。至少要有一个。&lt;/p&gt; &#xA;&lt;p&gt;如果没有，程序会自动下拉云端默认名单，后续的 updetect 也会拉云端覆盖本地。&lt;/p&gt; &#xA;&lt;p&gt;你可以通过放置一个一行的名单来关闭这个过滤器，但是我不赞成你这样做。&lt;/p&gt; &#xA;&lt;h3&gt;配置 Config/app.toml&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;cp app_exp.toml app.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;vim app.toml&lt;/code&gt; &lt;code&gt;nano app.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置文件&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[bot]&#xA;master = [100, 200] # master user id &amp;amp;owner&#xA;botToken = &#39;key&#39;&#xA;INTRO = &#34;POWER BY OPENAI&#34;  # 后缀&#xA;ABOUT = &#34;Created by github.com/sudoskys/Openaibot&#34;&#xA;WHITE = &#34;Group NOT in WHITE list&#34;&#xA;&#xA;[proxy]&#xA;status = false&#xA;url = &#34;http://127.0.0.1:7890&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/BotFather&#34;&gt;Telegram botToken 申请&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;配置 key&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;see_api_key - 现在几个 Api key&#xA;del_api_key - 删除 Api key&#xA;add_api_key - 增加 Api key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;OPENAI_API_KEY 申请&lt;/a&gt;，支持多 key 分发负载 &lt;a href=&#34;https://openai.com/api/pricing/&#34;&gt;定价参考&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;请不要向任何人暴露你的 &lt;code&gt;app.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;运行&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nohup python3 main.py &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;查看进程&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ps -aux|grep python3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;终止进程 后加进程号码&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kill -9  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;命令&lt;/h2&gt; &#xA;&lt;p&gt;限制类设置设定为 &lt;code&gt;1&lt;/code&gt; 代表不生效。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;命令&lt;/th&gt; &#xA;   &lt;th&gt;作用&lt;/th&gt; &#xA;   &lt;th&gt;额外&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/set_user_cold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;设置用户冷却时间&lt;/td&gt; &#xA;   &lt;td&gt;时间内不能发送 1 为无限制&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/set_group_cold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;设置群组冷却时间&lt;/td&gt; &#xA;   &lt;td&gt;时间内不能发送 1 为无限制&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/set_token_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;设置输出限制长度&lt;/td&gt; &#xA;   &lt;td&gt;Api的4095限制是输入+输出，如果超限，那么请调小输出&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/set_input_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;设置输入限制长度&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;获取/备份 config.json 文件&lt;/td&gt; &#xA;   &lt;td&gt;发送文件&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/add_block_group&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;禁止&lt;/td&gt; &#xA;   &lt;td&gt;直接生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/del_block_group&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;解禁&lt;/td&gt; &#xA;   &lt;td&gt;直接生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/add_block_user&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;禁止&lt;/td&gt; &#xA;   &lt;td&gt;直接生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/del_block_user&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;解禁&lt;/td&gt; &#xA;   &lt;td&gt;直接生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/add_white_group&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;加入&lt;/td&gt; &#xA;   &lt;td&gt;需要开启白名单模式生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/add_white_user&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;加入&lt;/td&gt; &#xA;   &lt;td&gt;需要开启白名单模式生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/del_white_group&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;除名&lt;/td&gt; &#xA;   &lt;td&gt;需要开启白名单模式生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/del_white_user&lt;/code&gt; +id绝对值&lt;/td&gt; &#xA;   &lt;td&gt;除名&lt;/td&gt; &#xA;   &lt;td&gt;需要开启白名单模式生效 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/update_detect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;更新敏感词&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/open_user_white_mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;开用户白名单&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/open_group_white_mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;开群组白名单&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/close_user_white_mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;关用户白名单&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/close_group_white_mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;关群组白名单&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/open&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;开启机器人&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/close&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;关闭机器人&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/chat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;对话&lt;/td&gt; &#xA;   &lt;td&gt;每次/chat都会重新开始，遗忘记录。群组中 24 h 后不能索引回复，私聊则永久。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/write&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;续写&lt;/td&gt; &#xA;   &lt;td&gt;续写.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/see_api_key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;现在几个 Api key&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/del_api_key&lt;/code&gt; +key&lt;/td&gt; &#xA;   &lt;td&gt;删除 Api key&lt;/td&gt; &#xA;   &lt;td&gt;可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/add_api_key&lt;/code&gt; +key&lt;/td&gt; &#xA;   &lt;td&gt;增加 Api key&lt;/td&gt; &#xA;   &lt;td&gt;可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/set_user_usage_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;用户分配总额度&lt;/td&gt; &#xA;   &lt;td&gt;1 为无限制 按用户计量&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/set_hour_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;用户小时可用量&lt;/td&gt; &#xA;   &lt;td&gt;1 为无限制 按用户计量&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/reset_user_usage_limit&lt;/code&gt;+userID&lt;/td&gt; &#xA;   &lt;td&gt;重置用户分配额度&lt;/td&gt; &#xA;   &lt;td&gt;按用户计量 可跟多参数，空格分割&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;样表&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;chat - 交谈&#xA;write - 补全&#xA;set_user_cold - 设置用户冷却时间&#xA;set_group_cold - 设置群组冷却时间&#xA;set_token_limit - 设置输出限制长度&#xA;set_input_limit - 设置输入限制长度&#xA;see_api_key - 现在几个 Api key&#xA;del_api_key - 删除 Api key&#xA;add_api_key - 增加 Api key&#xA;config - 获取/备份热配置文件&#xA;set_user_usage_limit - 设置用户总额限度&#xA;reset_user_usage_limit - 重置用户额度&#xA;set_hour_limit - 设置用户小时限额&#xA;add_block_group - 禁止群组&#xA;del_block_group - 解禁群组&#xA;add_block_user - 禁止用户&#xA;del_block_user - 解禁用户&#xA;add_white_group - 加入白名单群组&#xA;add_white_user - 加入白名单用户&#xA;del_white_group - 除名白名单群&#xA;del_white_user - 除名白名单人&#xA;update_detect - 更新敏感词&#xA;open_user_white_mode - 开用户白名单&#xA;open_group_white_mode - 开群组白名单&#xA;close_user_white_mode - 关用户白名单&#xA;close_group_white_mode - 关群组白名单&#xA;open - 开启机器人&#xA;close - 关闭机器人&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;其他&lt;/h2&gt; &#xA;&lt;h3&gt;统计&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;analysis.json&lt;/code&gt; 是频率统计，60s 内的请求次数。&lt;/p&gt; &#xA;&lt;h3&gt;Config.json&lt;/h3&gt; &#xA;&lt;p&gt;会自动合并缺失的键值进行修复。&lt;/p&gt; &#xA;&lt;h3&gt;默认参数&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;群组回复记忆为 24 hours&lt;/li&gt; &#xA; &lt;li&gt;用量限制为 60000/h&lt;/li&gt; &#xA; &lt;li&gt;上下文记忆力为 7&lt;/li&gt; &#xA; &lt;li&gt;触发截断的字符数为 3333x4 (api:max 4095x4) (tokenx4 粗略估算)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;状态：靠近shit code 的方向&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Quick Dev by MVC 框架 &lt;a href=&#34;https://github.com/TelechaBot/BaseBot&#34;&gt;https://github.com/TelechaBot/BaseBot&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>