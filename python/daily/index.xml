<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-15T01:40:14Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NVIDIA/NeMo</title>
    <updated>2022-10-15T01:40:14Z</updated>
    <id>tag:github.com,2022-10-15:/NVIDIA/NeMo</id>
    <link href="https://github.com/NVIDIA/NeMo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NeMo: a toolkit for conversational AI&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|status| |documentation| |license| |lgtm_grade| |lgtm_alerts| |black|&lt;/p&gt; &#xA;&lt;p&gt;.. |status| image:: &lt;a href=&#34;http://www.repostatus.org/badges/latest/active.svg&#34;&gt;http://www.repostatus.org/badges/latest/active.svg&lt;/a&gt; :target: &lt;a href=&#34;http://www.repostatus.org/#active&#34;&gt;http://www.repostatus.org/#active&lt;/a&gt; :alt: Project Status: Active – The project has reached a stable, usable state and is being actively developed.&lt;/p&gt; &#xA;&lt;p&gt;.. |documentation| image:: &lt;a href=&#34;https://readthedocs.com/projects/nvidia-nemo/badge/?version=main&#34;&gt;https://readthedocs.com/projects/nvidia-nemo/badge/?version=main&lt;/a&gt; :alt: Documentation :target: &lt;a href=&#34;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/&#34;&gt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |license| image:: &lt;a href=&#34;https://img.shields.io/badge/License-Apache%202.0-brightgreen.svg&#34;&gt;https://img.shields.io/badge/License-Apache%202.0-brightgreen.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/NVIDIA/NeMo/raw/master/LICENSE&#34;&gt;https://github.com/NVIDIA/NeMo/blob/master/LICENSE&lt;/a&gt; :alt: NeMo core license and license for collections in this repo&lt;/p&gt; &#xA;&lt;p&gt;.. |lgtm_grade| image:: &lt;a href=&#34;https://img.shields.io/lgtm/grade/python/g/NVIDIA/NeMo.svg?logo=lgtm&amp;amp;logoWidth=18&#34;&gt;https://img.shields.io/lgtm/grade/python/g/NVIDIA/NeMo.svg?logo=lgtm&amp;amp;logoWidth=18&lt;/a&gt; :target: &lt;a href=&#34;https://lgtm.com/projects/g/NVIDIA/NeMo/context:python&#34;&gt;https://lgtm.com/projects/g/NVIDIA/NeMo/context:python&lt;/a&gt; :alt: Language grade: Python&lt;/p&gt; &#xA;&lt;p&gt;.. |lgtm_alerts| image:: &lt;a href=&#34;https://img.shields.io/lgtm/alerts/g/NVIDIA/NeMo.svg?logo=lgtm&amp;amp;logoWidth=18&#34;&gt;https://img.shields.io/lgtm/alerts/g/NVIDIA/NeMo.svg?logo=lgtm&amp;amp;logoWidth=18&lt;/a&gt; :target: &lt;a href=&#34;https://lgtm.com/projects/g/NVIDIA/NeMo/alerts/&#34;&gt;https://lgtm.com/projects/g/NVIDIA/NeMo/alerts/&lt;/a&gt; :alt: Total alerts&lt;/p&gt; &#xA;&lt;p&gt;.. |black| image:: &lt;a href=&#34;https://img.shields.io/badge/code%20style-black-000000.svg&#34;&gt;https://img.shields.io/badge/code%20style-black-000000.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/psf/black&#34;&gt;https://github.com/psf/black&lt;/a&gt; :alt: Code style: black&lt;/p&gt; &#xA;&lt;p&gt;.. _main-readme:&lt;/p&gt; &#xA;&lt;h1&gt;&lt;strong&gt;NVIDIA NeMo&lt;/strong&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;NVIDIA NeMo is a conversational AI toolkit built for researchers working on automatic speech recognition (ASR), natural language processing (NLP), and text-to-speech synthesis (TTS). The primary objective of NeMo is to help researchers from industry and academia to reuse prior work (code and pretrained models) and make it easier to create new &lt;code&gt;conversational AI models &amp;lt;https://developer.nvidia.com/conversational-ai#started&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Pre-trained NeMo models. &amp;lt;https://catalog.ngc.nvidia.com/models?query=nemo&amp;amp;orderBy=weightPopularDESC&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Introductory video. &amp;lt;https://www.youtube.com/embed/wBgpMf_KQVw&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Speech processing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Automatic Speech Recognition (ASR) &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/asr/intro.html&amp;gt;&lt;/code&gt;_ &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Supported models: Jasper, QuartzNet, CitriNet, Conformer-CTC, Conformer-Transducer, Squeezeformer-CTC, Squeezeformer-Transducer, ContextNet, LSTM-Transducer (RNNT), LSTM-CTC, ...&lt;/li&gt; &#xA;     &lt;li&gt;Supports CTC and Transducer/RNNT losses/decoders&lt;/li&gt; &#xA;     &lt;li&gt;Beam Search decoding&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;Language Modelling for ASR &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/asr/asr_language_modeling.html&amp;gt;&lt;/code&gt;_: N-gram LM in fusion with Beam Search decoding, Neural Rescoring with Transformer&lt;/li&gt; &#xA;     &lt;li&gt;Streaming and Buffered ASR (CTC/Transducer) - &lt;code&gt;Chunked Inference Examples &amp;lt;https://github.com/NVIDIA/NeMo/tree/stable/examples/asr/asr_chunked_inference&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Speech Classification and Speech Command Recognition &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/asr/speech_classification/intro.html&amp;gt;&lt;/code&gt;_: MatchboxNet (Command Recognition)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Voice activity Detection (VAD) &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/asr/speech_classification/models.html#marblenet-vad&amp;gt;&lt;/code&gt;_: MarbleNet&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Speaker Recognition &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/asr/speaker_recognition/intro.html&amp;gt;&lt;/code&gt;_: TitaNet, ECAPA_TDNN, SpeakerNet&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Speaker Diarization &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/asr/speaker_diarization/intro.html&amp;gt;&lt;/code&gt;_ &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Clustering Diarizer: TitaNet, ECAPA_TDNN, SpeakerNet&lt;/li&gt; &#xA;     &lt;li&gt;Neural Diarizer: MSDD (Multi-scale Diarization Decoder)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Speech Intent Detection and Slot Filling &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/asr/speech_intent_slot/intro.html&amp;gt;&lt;/code&gt;_: Conformer-Transformer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Pretrained models on different languages. &amp;lt;https://ngc.nvidia.com/catalog/collections/nvidia:nemo_asr&amp;gt;&lt;/code&gt;_: English, Spanish, German, Russian, Chinese, French, Italian, Polish, ...&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NGC collection of pre-trained speech processing models. &amp;lt;https://ngc.nvidia.com/catalog/collections/nvidia:nemo_asr&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Natural Language Processing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;NeMo Megatron pre-training of Large Language Models &amp;lt;https://developer.nvidia.com/nemo-megatron-early-access&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Neural Machine Translation (NMT) &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/machine_translation.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Punctuation and Capitalization &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/punctuation_and_capitalization.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Token classification (named entity recognition) &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/token_classification.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Text classification &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/text_classification.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Joint Intent and Slot Classification &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/joint_intent_slot.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Question answering &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/question_answering.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GLUE benchmark &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/glue_benchmark.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Information retrieval &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/information_retrieval.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Entity Linking &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/entity_linking.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Dialogue State Tracking &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/sgd_qa.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Prompt Learning &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/nemo_megatron/prompt_learning.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NGC collection of pre-trained NLP models. &amp;lt;https://ngc.nvidia.com/catalog/collections/nvidia:nemo_nlp&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Speech synthesis (TTS) &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/tts/intro.html#&amp;gt;&lt;/code&gt;_ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Spectrogram generation: Tacotron2, GlowTTS, TalkNet, FastPitch, FastSpeech2, Mixer-TTS, Mixer-TTS-X&lt;/li&gt; &#xA;   &lt;li&gt;Vocoders: WaveGlow, SqueezeWave, UniGlow, MelGAN, HiFiGAN, UnivNet&lt;/li&gt; &#xA;   &lt;li&gt;End-to-end speech generation: FastPitch_HifiGan_E2E, FastSpeech2_HifiGan_E2E&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NGC collection of pre-trained TTS models. &amp;lt;https://ngc.nvidia.com/catalog/collections/nvidia:nemo_tts&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Tools &amp;lt;https://github.com/NVIDIA/NeMo/tree/stable/tools&amp;gt;&lt;/code&gt;_ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Text Processing (text normalization and inverse text normalization) &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/nlp/text_normalization/intro.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;CTC-Segmentation tool &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/tools/ctc_segmentation.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Speech Data Explorer &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/tools/speech_data_explorer.html&amp;gt;&lt;/code&gt;_: a dash-based tool for interactive exploration of ASR/TTS datasets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Built for speed, NeMo can utilize NVIDIA&#39;s Tensor Cores and scale out training to multiple GPUs and multiple nodes.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Python 3.8 or above&lt;/li&gt; &#xA; &lt;li&gt;Pytorch 1.10.0 or above&lt;/li&gt; &#xA; &lt;li&gt;NVIDIA GPU for training&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;.. |main| image:: &lt;a href=&#34;https://readthedocs.com/projects/nvidia-nemo/badge/?version=main&#34;&gt;https://readthedocs.com/projects/nvidia-nemo/badge/?version=main&lt;/a&gt; :alt: Documentation Status :scale: 100% :target: &lt;a href=&#34;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/&#34;&gt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |stable| image:: &lt;a href=&#34;https://readthedocs.com/projects/nvidia-nemo/badge/?version=stable&#34;&gt;https://readthedocs.com/projects/nvidia-nemo/badge/?version=stable&lt;/a&gt; :alt: Documentation Status :scale: 100% :target: &lt;a href=&#34;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/&#34;&gt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;+---------+-------------+------------------------------------------------------------------------------------------------------------------------------------------+ | Version | Status | Description | +=========+=============+==========================================================================================================================================+ | Latest | |main| | &lt;code&gt;Documentation of the latest (i.e. main) branch. &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/main/&amp;gt;&lt;/code&gt;_ | +---------+-------------+------------------------------------------------------------------------------------------------------------------------------------------+ | Stable | |stable| | &lt;code&gt;Documentation of the stable (i.e. most recent release) branch. &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/&amp;gt;&lt;/code&gt;_ | +---------+-------------+------------------------------------------------------------------------------------------------------------------------------------------+&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;A great way to start with NeMo is by checking &lt;code&gt;one of our tutorials &amp;lt;https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/starthere/tutorials.html&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Getting help with NeMo&lt;/h2&gt; &#xA;&lt;p&gt;FAQ can be found on NeMo&#39;s &lt;code&gt;Discussions board &amp;lt;https://github.com/NVIDIA/NeMo/discussions&amp;gt;&lt;/code&gt;_. You are welcome to ask questions or start discussions there.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Conda&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;We recommend installing NeMo in a fresh Conda environment.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    conda create --name nemo python==3.8&#xA;    conda activate nemo&#xA;&#xA;Install PyTorch using their `configurator &amp;lt;https://pytorch.org/get-started/locally/&amp;gt;`_. &#xA;&#xA;.. code-block:: bash&#xA;&#xA;    conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch&#xA;&#xA;.. note::&#xA;&#xA;  The command used to install PyTorch may depend on your system.&#xA;&#xA;Pip&#xA;~~~&#xA;Use this installation mode if you want the latest released version.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    apt-get update &amp;amp;&amp;amp; apt-get install -y libsndfile1 ffmpeg&#xA;    pip install Cython&#xA;    pip install nemo_toolkit[&#39;all&#39;]&#xA;&#xA;.. note::&#xA;&#xA;    Depending on the shell used, you may need to use ``&#34;nemo_toolkit[all]&#34;`` instead in the above command.&#xA;&#xA;Pip from source&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use this installation mode if you want the a version from particular GitHub branch (e.g main).&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y libsndfile1 ffmpeg&#xA;pip install Cython&#xA;python -m pip install git+https://github.com/NVIDIA/NeMo.git@{BRANCH}#egg=nemo_toolkit[all]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From source&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Use this installation mode if you are contributing to NeMo.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    apt-get update &amp;amp;&amp;amp; apt-get install -y libsndfile1 ffmpeg&#xA;    git clone https://github.com/NVIDIA/NeMo&#xA;    cd NeMo&#xA;    ./reinstall.sh&#xA;&#xA;.. note::&#xA;&#xA;    If you only want the toolkit without additional conda-based dependencies, you may replace ``reinstall.sh``&#xA;    with ``pip install -e .`` when your PWD is the root of the NeMo repository.&#xA;&#xA;RNNT&#xA;~~~~&#xA;Note that RNNT requires numba to be installed from conda.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;  conda remove numba&#xA;  pip uninstall numba&#xA;  conda install -c conda-forge numba&#xA;&#xA;Megatron GPT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Megatron GPT training requires NVIDIA Apex to be installed.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ericharper/apex.git&#xA;cd apex&#xA;git checkout nm_v1.11.0&#xA;pip install -v --disable-pip-version-check --no-cache-dir --global-option=&#34;--cpp_ext&#34; --global-option=&#34;--cuda_ext&#34; --global-option=&#34;--fast_layer_norm&#34; --global-option=&#34;--distributed_adam&#34; --global-option=&#34;--deprecated_fused_adam&#34; ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NeMo Text Processing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NeMo Text Processing, specifically (Inverse) Text Normalization, requires `Pynini &amp;lt;https://pypi.org/project/pynini/&amp;gt;`_ to be installed.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    bash NeMo/nemo_text_processing/install_pynini.sh&#xA;&#xA;Docker containers:&#xA;~~~~~~~~~~~~~~~~~~&#xA;To build a nemo container with Dockerfile from a branch, please run &#xA;&#xA;.. code-block:: bash&#xA;&#xA;    DOCKER_BUILDKIT=1 docker build -f Dockerfile -t nemo:latest .&#xA;&#xA;&#xA;If you chose to work with main branch, we recommend using NVIDIA&#39;s PyTorch container version 22.09-py3 and then installing from GitHub.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    docker run --gpus all -it --rm -v &amp;lt;nemo_github_folder&amp;gt;:/NeMo --shm-size=8g \&#xA;    -p 8888:8888 -p 6006:6006 --ulimit memlock=-1 --ulimit \&#xA;    stack=67108864 --device=/dev/snd nvcr.io/nvidia/pytorch:22.09-py3&#xA;&#xA;Examples&#xA;--------&#xA;&#xA;Many examples can be found under `&#34;Examples&#34; &amp;lt;https://github.com/NVIDIA/NeMo/tree/stable/examples&amp;gt;`_ folder.&#xA;&#xA;&#xA;Contributing&#xA;------------&#xA;&#xA;We welcome community contributions! Please refer to the  `CONTRIBUTING.md &amp;lt;https://github.com/NVIDIA/NeMo/blob/stable/CONTRIBUTING.md&amp;gt;`_ CONTRIBUTING.md for the process.&#xA;&#xA;Publications&#xA;------------&#xA;&#xA;We provide an ever growing list of publications that utilize the NeMo framework. Please refer to `PUBLICATIONS.md &amp;lt;https://github.com/NVIDIA/NeMo/tree/stable/PUBLICATIONS.md&amp;gt;`_. We welcome the addition of your own articles to this list !&#xA;&#xA;Citation&#xA;--------&#xA;&#xA;.. code-block:: bash&#xA;&#xA;  @article{kuchaiev2019nemo,&#xA;    title={Nemo: a toolkit for building ai applications using neural modules},&#xA;    author={Kuchaiev, Oleksii and Li, Jason and Nguyen, Huyen and Hrinchuk, Oleksii and Leary, Ryan and Ginsburg, Boris and Kriman, Samuel and Beliaev, Stanislav and Lavrukhin, Vitaly and Cook, Jack and others},&#xA;    journal={arXiv preprint arXiv:1909.09577},&#xA;    year={2019}&#xA;  }&#xA;&#xA;License&#xA;-------&#xA;NeMo is under `Apache 2.0 license &amp;lt;https://github.com/NVIDIA/NeMo/blob/stable/LICENSE&amp;gt;`_.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>JingShing/NovelAI-installation-tutorial</title>
    <updated>2022-10-15T01:40:14Z</updated>
    <id>tag:github.com,2022-10-15:/JingShing/NovelAI-installation-tutorial</id>
    <link href="https://github.com/JingShing/NovelAI-installation-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NovelAI installation tutorial&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/JingShing/NovelAI-installation-tutorial/main/README_TCH.md&#34;&gt;繁體中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;p&gt;You can use lower vram to run lastest version(4chan leaked version). More detail you can click link below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JingShing/NovelAI-4chan-lowvram-ver&#34;&gt;Low vram 4chan ver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;NovelAI-installation-tutorial&lt;/h1&gt; &#xA;&lt;p&gt;You can download model &lt;a href=&#34;https://cloudflare-ipfs.com/ipfs/bafybeicpamreyp2bsocyk3hpxr7ixb2g2rnrequub3j2ahrkdxbvfbvjc4/model.ckpt&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JingShing/NovelAI-installation-tutorial/main/spell/spell_word_suggest.md&#34;&gt;Prompt recomend&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Click title to see detail.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://raw.githubusercontent.com/JingShing/NovelAI-installation-tutorial/main/spell/negative_prompt.md&#34;&gt;Negative prompt recomend&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Click title to see detail.&lt;/p&gt; &#xA;&lt;h2&gt;recommend(&lt;a href=&#34;https://github.com/JingShing/novelai-colab-ver&#34;&gt;colab&lt;/a&gt; ver)&lt;/h2&gt; &#xA;&lt;p&gt;using &lt;a href=&#34;https://github.com/JingShing/novelai-colab-ver&#34;&gt;colab&lt;/a&gt; to install novelai&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;NovelAI installation tutorial&lt;/h2&gt; &#xA;&lt;h3&gt;For windows&lt;/h3&gt; &#xA;&lt;p&gt;You can see &lt;a href=&#34;https://www.youtube.com/watch?v=8iz598BXTlg&#34;&gt;tutorial&lt;/a&gt; on &lt;a href=&#34;https://www.youtube.com/watch?v=8iz598BXTlg&#34;&gt;youtube&lt;/a&gt; by clicking img below&lt;/p&gt; &#xA;&lt;a href=&#34;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=8iz598BXTlg&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;http://img.youtube.com/vi/8iz598BXTlg/mqdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;You need to install &lt;a href=&#34;https://www.python.org/downloads/release/python-3107/&#34;&gt;python&lt;/a&gt; and &lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;git&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;after installed python and git. You need to open cmd. You can switch to the folder you like using cd command. input&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install staple-diffustion-webui&lt;/p&gt; &#xA;&lt;p&gt;You need to put &lt;a href=&#34;https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.4.pth&#34;&gt;GFPGANv1.4.pth&lt;/a&gt; at same folder of webui.py.&lt;/p&gt; &#xA;&lt;p&gt;put leaked novelai model(.ckpt) in &lt;code&gt;models folder/Stable-diffusion&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;run webui-user.bat&lt;/p&gt; &#xA;&lt;p&gt;after installed all the module you need in virtual environment and your gpu is great enough to handle ai.&lt;/p&gt; &#xA;&lt;p&gt;Congrets you can use NovelAI to spawn waifu now.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to use 7gb ver models. You need to use latest webui or download my &lt;a href=&#34;https://raw.githubusercontent.com/JingShing/NovelAI-installation-tutorial/main/modules/sd_models.py&#34;&gt;sd_models.py&lt;/a&gt; to replace with original.&lt;/li&gt; &#xA; &lt;li&gt;If you want to import vae to your model. rename the model you use with &lt;code&gt;final-pruned.ckpt&lt;/code&gt;. and find the animevae.pt in &lt;code&gt;novelaileak\stableckp&lt;/code&gt; place it in &lt;code&gt;stable-diffusion-webui\models\Stable-diffusion&lt;/code&gt; and rename it as &lt;code&gt;final-pruned.vae.pt&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;copy all the pt file in &lt;code&gt;novelaileak\stableckpt\modules\modules&lt;/code&gt; to &lt;code&gt;stable-diffusion-webui\models\hypernetworks&lt;/code&gt;(if this folder didn&#39;t exit. just create one)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pytest-dev/pytest</title>
    <updated>2022-10-15T01:40:14Z</updated>
    <id>tag:github.com,2022-10-15:/pytest-dev/pytest</id>
    <link href="https://github.com/pytest-dev/pytest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The pytest framework makes it easy to write small tests, yet scales to support complex functional testing&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/pytest-dev/pytest/raw/main/doc/en/img/pytest_logo_curves.svg&#34;&gt;https://github.com/pytest-dev/pytest/raw/main/doc/en/img/pytest_logo_curves.svg&lt;/a&gt; :target: &lt;a href=&#34;https://docs.pytest.org/en/stable/&#34;&gt;https://docs.pytest.org/en/stable/&lt;/a&gt; :align: center :height: 200 :alt: pytest&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/pypi/v/pytest.svg&#34;&gt;https://img.shields.io/pypi/v/pytest.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/pytest/&#34;&gt;https://pypi.org/project/pytest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/conda/vn/conda-forge/pytest.svg&#34;&gt;https://img.shields.io/conda/vn/conda-forge/pytest.svg&lt;/a&gt; :target: &lt;a href=&#34;https://anaconda.org/conda-forge/pytest&#34;&gt;https://anaconda.org/conda-forge/pytest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/pytest.svg&#34;&gt;https://img.shields.io/pypi/pyversions/pytest.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/pytest/&#34;&gt;https://pypi.org/project/pytest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://codecov.io/gh/pytest-dev/pytest/branch/main/graph/badge.svg&#34;&gt;https://codecov.io/gh/pytest-dev/pytest/branch/main/graph/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://codecov.io/gh/pytest-dev/pytest&#34;&gt;https://codecov.io/gh/pytest-dev/pytest&lt;/a&gt; :alt: Code coverage Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://github.com/pytest-dev/pytest/workflows/test/badge.svg&#34;&gt;https://github.com/pytest-dev/pytest/workflows/test/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/pytest-dev/pytest/actions?query=workflow%3Atest&#34;&gt;https://github.com/pytest-dev/pytest/actions?query=workflow%3Atest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://results.pre-commit.ci/badge/github/pytest-dev/pytest/main.svg&#34;&gt;https://results.pre-commit.ci/badge/github/pytest-dev/pytest/main.svg&lt;/a&gt; :target: &lt;a href=&#34;https://results.pre-commit.ci/latest/github/pytest-dev/pytest/main&#34;&gt;https://results.pre-commit.ci/latest/github/pytest-dev/pytest/main&lt;/a&gt; :alt: pre-commit.ci status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/code%20style-black-000000.svg&#34;&gt;https://img.shields.io/badge/code%20style-black-000000.svg&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/psf/black&#34;&gt;https://github.com/psf/black&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://www.codetriage.com/pytest-dev/pytest/badges/users.svg&#34;&gt;https://www.codetriage.com/pytest-dev/pytest/badges/users.svg&lt;/a&gt; :target: &lt;a href=&#34;https://www.codetriage.com/pytest-dev/pytest&#34;&gt;https://www.codetriage.com/pytest-dev/pytest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://readthedocs.org/projects/pytest/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/pytest/badge/?version=latest&lt;/a&gt; :target: &lt;a href=&#34;https://pytest.readthedocs.io/en/latest/?badge=latest&#34;&gt;https://pytest.readthedocs.io/en/latest/?badge=latest&lt;/a&gt; :alt: Documentation Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/Discord-pytest--dev-blue&#34;&gt;https://img.shields.io/badge/Discord-pytest--dev-blue&lt;/a&gt; :target: &lt;a href=&#34;https://discord.com/invite/pytest-dev&#34;&gt;https://discord.com/invite/pytest-dev&lt;/a&gt; :alt: Discord&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/Libera%20chat-%23pytest-orange&#34;&gt;https://img.shields.io/badge/Libera%20chat-%23pytest-orange&lt;/a&gt; :target: &lt;a href=&#34;https://web.libera.chat/#pytest&#34;&gt;https://web.libera.chat/#pytest&lt;/a&gt; :alt: Libera chat&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;pytest&lt;/code&gt; framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries.&lt;/p&gt; &#xA;&lt;p&gt;An example of a simple test:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# content of test_sample.py&#xA;def inc(x):&#xA;    return x + 1&#xA;&#xA;&#xA;def test_answer():&#xA;    assert inc(3) == 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute it::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pytest&#xA;============================= test session starts =============================&#xA;collected 1 items&#xA;&#xA;test_sample.py F&#xA;&#xA;================================== FAILURES ===================================&#xA;_________________________________ test_answer _________________________________&#xA;&#xA;    def test_answer():&#xA;&amp;gt;       assert inc(3) == 5&#xA;E       assert 4 == 5&#xA;E        +  where 4 = inc(3)&#xA;&#xA;test_sample.py:5: AssertionError&#xA;========================== 1 failed in 0.04 seconds ===========================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Due to &lt;code&gt;pytest&lt;/code&gt;&#39;s detailed assertion introspection, only plain &lt;code&gt;assert&lt;/code&gt; statements are used. See &lt;code&gt;getting-started &amp;lt;https://docs.pytest.org/en/stable/getting-started.html#our-first-test-run&amp;gt;&lt;/code&gt;_ for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Detailed info on failing &lt;code&gt;assert statements &amp;lt;https://docs.pytest.org/en/stable/how-to/assert.html&amp;gt;&lt;/code&gt;_ (no need to remember &lt;code&gt;self.assert*&lt;/code&gt; names)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Auto-discovery &amp;lt;https://docs.pytest.org/en/stable/explanation/goodpractices.html#python-test-discovery&amp;gt;&lt;/code&gt;_ of test modules and functions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Modular fixtures &amp;lt;https://docs.pytest.org/en/stable/explanation/fixtures.html&amp;gt;&lt;/code&gt;_ for managing small or parametrized long-lived test resources&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Can run &lt;code&gt;unittest &amp;lt;https://docs.pytest.org/en/stable/how-to/unittest.html&amp;gt;&lt;/code&gt;_ (or trial), &lt;code&gt;nose &amp;lt;https://docs.pytest.org/en/stable/how-to/nose.html&amp;gt;&lt;/code&gt;_ test suites out of the box&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python 3.7+ or PyPy3&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rich plugin architecture, with over 850+ &lt;code&gt;external plugins &amp;lt;https://docs.pytest.org/en/latest/reference/plugin_list.html&amp;gt;&lt;/code&gt;_ and thriving community&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For full documentation, including installation, tutorials and PDF documents, please see &lt;a href=&#34;https://docs.pytest.org/en/stable/&#34;&gt;https://docs.pytest.org/en/stable/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs/Requests&lt;/h2&gt; &#xA;&lt;p&gt;Please use the &lt;code&gt;GitHub issue tracker &amp;lt;https://github.com/pytest-dev/pytest/issues&amp;gt;&lt;/code&gt;_ to submit bugs or request features.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Consult the &lt;code&gt;Changelog &amp;lt;https://docs.pytest.org/en/stable/changelog.html&amp;gt;&lt;/code&gt;__ page for fixes and enhancements of each version.&lt;/p&gt; &#xA;&lt;h2&gt;Support pytest&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Open Collective&lt;/code&gt;_ is an online funding platform for open and transparent communities. It provides tools to raise money and share your finances in full transparency.&lt;/p&gt; &#xA;&lt;p&gt;It is the platform of choice for individuals and companies that want to make one-time or monthly donations directly to the project.&lt;/p&gt; &#xA;&lt;p&gt;See more details in the &lt;code&gt;pytest collective&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. _Open Collective: &lt;a href=&#34;https://opencollective.com&#34;&gt;https://opencollective.com&lt;/a&gt; .. _pytest collective: &lt;a href=&#34;https://opencollective.com/pytest&#34;&gt;https://opencollective.com/pytest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;pytest for enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of pytest and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Learn more. &amp;lt;https://tidelift.com/subscription/pkg/pypi-pytest?utm_source=pypi-pytest&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;Security ^^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;pytest has never been associated with a security vulnerability, but in any case, to report a security vulnerability please use the &lt;code&gt;Tidelift security contact &amp;lt;https://tidelift.com/security&amp;gt;&lt;/code&gt;_. Tidelift will coordinate the fix and disclosure.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Holger Krekel and others, 2004.&lt;/p&gt; &#xA;&lt;p&gt;Distributed under the terms of the &lt;code&gt;MIT&lt;/code&gt;_ license, pytest is free and open source software.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;MIT&lt;/code&gt;: &lt;a href=&#34;https://github.com/pytest-dev/pytest/raw/main/LICENSE&#34;&gt;https://github.com/pytest-dev/pytest/blob/main/LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>