<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-17T01:34:50Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>exo-lang/exo</title>
    <updated>2025-03-17T01:34:50Z</updated>
    <id>tag:github.com,2025-03-17:/exo-lang/exo</id>
    <link href="https://github.com/exo-lang/exo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exocompilation for productive programming of hardware accelerators&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/exo-lang/exo/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/exo-lang/exo/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/exo-lang/exo&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/exo-lang/exo&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/exo-lang/exo/branch/master/graph/badge.svg?token=BFIZ0WKP4I&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Basics&lt;/h1&gt; &#xA;&lt;h2&gt;Install Exo&lt;/h2&gt; &#xA;&lt;p&gt;We support Python versions 3.9 and above. If you&#39;re just using Exo, install it using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip install exo-lang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case of &lt;code&gt;ModuleNotFoundError: No module named &#39;attrs&#39;&lt;/code&gt; please upgrade your attrs module by &lt;code&gt;pip install --upgrade attrs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compile Exo&lt;/h2&gt; &#xA;&lt;p&gt;Exo files can be directly excuted with Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ python exo_file.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate generate C and header files, use &lt;code&gt;exocc&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ exocc exo_file.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the command will generate two files: &lt;code&gt;exo_file.c&lt;/code&gt; and &lt;code&gt;exo_file.h&lt;/code&gt;. These files will be created in a directory called &lt;code&gt;exo_file/&lt;/code&gt; by default. You can use optional arguments to customize the output:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;-o&lt;/code&gt; argument allows you to specify a different directory name.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;--stem&lt;/code&gt; argument allows you to specify custom names for the C file and header file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Build Exo from source&lt;/h1&gt; &#xA;&lt;p&gt;We make active use of newer Python 3.x features. Please use Python 3.9 or 3.10 if you&#39;re getting errors about unsupported features.&lt;/p&gt; &#xA;&lt;p&gt;Setting up Exo for development is like any other Python project. We &lt;em&gt;strongly&lt;/em&gt; recommend you use a virtual environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:exo-lang/exo.git&#xA;$ cd exo/&#xA;$ git submodule update --init --recursive&#xA;$ python -m venv ~/.venv/exo&#xA;$ source ~/.venv/exo/bin/activate&#xA;(exo) $ python -m pip install -U pip setuptools wheel&#xA;(exo) $ python -m pip install -r requirements.txt&#xA;(exo) $ pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will make sure you have the submodules checked out and that the pre-commit scripts (that run an autoformatter, maybe other tools in the future) run.&lt;/p&gt; &#xA;&lt;p&gt;Finally, you can build and install Exo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(exo) $ python -m build .&#xA;(exo) $ pip install dist/*.whl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;PySMT&lt;/h2&gt; &#xA;&lt;p&gt;Depending on your setup, getting PySMT to work correctly may be difficult. You need to independently install a solver such as Z3 or CVC4, and even then getting the PySMT library to correctly locate that solver may be difficult. We have included the &lt;code&gt;z3-solver&lt;/code&gt; package as a requirement, which will hopefully avoid this issue, but you can also install z3 (or your choice of solver) independently.&lt;/p&gt; &#xA;&lt;h1&gt;Notes for Testing&lt;/h1&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Build system (required)&lt;/h3&gt; &#xA;&lt;p&gt;The Exo test harness generates C code and as such needs to compile and link using an unknown (i.e. system) compiler. To do this, it generates CMake build files and invokes CMake behind the scenes.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, you must have CMake &lt;strong&gt;3.21&lt;/strong&gt; or newer installed.&lt;/p&gt; &#xA;&lt;p&gt;By default, CMake will use &lt;a href=&#34;https://ninja-build.org&#34;&gt;Ninja&lt;/a&gt; as its backend, but this may be overridden by setting the environment variable &lt;code&gt;CMAKE_GENERATOR&lt;/code&gt; to &lt;code&gt;Unix Makefiles&lt;/code&gt;, in case you do not wish to install Ninja.&lt;/p&gt; &#xA;&lt;h3&gt;SDE (optional)&lt;/h3&gt; &#xA;&lt;p&gt;For testing x86 features on processors which don&#39;t support them (e.g., AVX-512 or AMX), we rely on the &lt;a href=&#34;https://www.intel.com/content/www/us/en/developer/articles/tool/software-development-emulator.html&#34;&gt;Intel Software Development Emulator&lt;/a&gt; as an optional dependency. Tests which rely on this (namely for AMX) look for &lt;code&gt;sde64&lt;/code&gt; either in the path defined by the &lt;code&gt;SDE_PATH&lt;/code&gt; environment variable or in the system &lt;code&gt;PATH&lt;/code&gt;, and are skipped if it is not available.&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;To run the tests, simply type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the root of the project.&lt;/p&gt; &#xA;&lt;h2&gt;Running Coverage Testing&lt;/h2&gt; &#xA;&lt;p&gt;To run pytest with coverage tests, execute&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytest --cov=./ --cov-report=html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, if you want to see annotated source files, open &lt;code&gt;./htmlcov/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Learn about Exo&lt;/h1&gt; &#xA;&lt;p&gt;Take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/exo-lang/exo/main/examples/README.md&#34;&gt;examples&lt;/a&gt; directory for scheduling examples and the &lt;a href=&#34;https://raw.githubusercontent.com/exo-lang/exo/main/docs/README.md&#34;&gt;documentation&lt;/a&gt; directory for various documentation about Exo.&lt;/p&gt; &#xA;&lt;h1&gt;Contact&lt;/h1&gt; &#xA;&lt;p&gt;Please contact &lt;a href=&#34;mailto:exo@mit.edu&#34;&gt;exo@mit.edu&lt;/a&gt; or &lt;a href=&#34;mailto:yuka@csail.mit.edu&#34;&gt;yuka@csail.mit.edu&lt;/a&gt; if you have any questions.&lt;/p&gt; &#xA;&lt;h1&gt;Publication&lt;/h1&gt; &#xA;&lt;p&gt;Exo&#39;s major contributions and ideas are published in the following two papers. The gist of its design principles and features is summarized in &lt;a href=&#34;https://raw.githubusercontent.com/exo-lang/exo/main/docs/Design.md&#34;&gt;Design.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/abs/10.1145/3519939.3523446&#34;&gt;Exocompilation for Productive Programming of Hardware Accelerators&lt;/a&gt;&lt;br&gt; Yuka Ikarashi*, Gilbert Louis Bernstein*, Alex Reinking, Hasan Genc, Jonathan Ragan-Kelley&lt;br&gt; PLDI 2022&lt;br&gt; The full version with appendices can be found &lt;a href=&#34;https://people.csail.mit.edu/yuka/pdf/exo_pldi2022_full.pdf&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/2411.07211&#34;&gt;Exo 2: Growing a Scheduling Language&lt;/a&gt;&lt;br&gt; Yuka Ikarashi, Kevin Qian, Samir Droubi, Alex Reinking, Gilbert Bernstein, Jonathan Ragan-Kelley&lt;br&gt; ASPLOS 2025&lt;br&gt; The full version with appendices can be found &lt;a href=&#34;https://arxiv.org/abs/2411.07211&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use Exo, please cite both the compiler and the papers!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>subframe7536/maple-font</title>
    <updated>2025-03-17T01:34:50Z</updated>
    <id>tag:github.com,2025-03-17:/subframe7536/maple-font</id>
    <link href="https://github.com/subframe7536/maple-font" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Maple Mono: Open source monospace font with round corner, ligatures and Nerd-Font for IDE and terminal, fine-grained customization options. 带连字和控制台图标的圆角等宽字体，中英文宽度完美2:1，细粒度的自定义选项&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/resources/header.png&#34; alt=&#34;Cover&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#download&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://font.subf.dev&#34;&gt;Website&lt;/a&gt; | English | &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/README_CN.md&#34;&gt;中文&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Maple Mono&lt;/h1&gt; &#xA;&lt;p&gt;Maple Mono is an open source monospace font focused on smoothing your coding flow.&lt;/p&gt; &#xA;&lt;p&gt;I create it to enhance my working experience, and hope that it can be useful to others.&lt;/p&gt; &#xA;&lt;p&gt;V7 is a completely remade version, providing variable font format and source files of font project, redesigning more than half of the glyphs and offering smarter ligatures. You can checkout V6 &lt;a href=&#34;https://github.com/subframe7536/maple-font/tree/main&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✨ Variable - Infinity font weights with fine-grained italic glyphs.&lt;/li&gt; &#xA; &lt;li&gt;☁️ Smooth - Round corner, brand-new glyph of &lt;code&gt;@ $ % &amp;amp; Q -&amp;gt;&lt;/code&gt; and cursive &lt;code&gt;f i j k l x y&lt;/code&gt; in italic style.&lt;/li&gt; &#xA; &lt;li&gt;💪 Useful - Large amount of smart ligatures, see in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features/README.md&#34;&gt;&lt;code&gt;features/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎨 Icon - First-Class &lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd-Font&lt;/a&gt; support, make your terminal more vivid.&lt;/li&gt; &#xA; &lt;li&gt;🔨 Customize - Enable or disable font features as you want, just make your own font.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simpified Chinese, Traditional Chinese and Japanese&lt;/h3&gt; &#xA;&lt;p&gt;CN version based on &lt;a href=&#34;https://github.com/CyanoHao/Resource-Han-Rounded&#34;&gt;Resource Han Rounded&lt;/a&gt; provides complete character set support for Chinese development environments, including Simplified Chinese, Traditional Chinese, and Japanese. Meanwhile, the characteristic of perfect 2:1 alignment between Chinese and English allows this font to achieve a neat, uniform, beautiful, and comfortable appearance in scenarios such as multilingual display and Markdown tables. However, the spacing of Chinese characters is larger compared to other popular Chinese fonts. See details in &lt;a href=&#34;https://github.com/subframe7536/maple-font/releases/tag/cn-base&#34;&gt;release notes&lt;/a&gt; and &lt;a href=&#34;https://github.com/subframe7536/maple-font/issues/211&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/resources/2-1.png&#34; alt=&#34;2-1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ScreenShots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/resources/showcase.png&#34; alt=&#34;showcase.png&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pictured by &lt;a href=&#34;https://github.com/subframe7536/vscode-codeimg&#34;&gt;CodeImg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Theme: &lt;a href=&#34;https://github.com/subframe7536/vscode-theme-maple&#34;&gt;Maple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Config: font size 16px, line height 1.8, default letter spacing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download all the font archives from &lt;a href=&#34;https://github.com/subframe7536/maple-font/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew (MacOS, Linux)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Maple Mono&#xA;brew install --cask font-maple-mono&#xA;# Maple Mono NF&#xA;brew install --cask font-maple-mono-nf&#xA;# Maple Mono CN&#xA;brew install --cask font-maple-mono-cn&#xA;# Maple Mono NF CN&#xA;brew install --cask font-maple-mono-nf-cn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Maple Mono&#xA;paru -S ttf-maple-beta&#xA;# Maple Mono NF&#xA;paru -S ttf-maple-beta-nf&#xA;# Maple Mono NF CN&#xA;paru -S ttf-maple-beta-nf-cn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feature Configurations&lt;/h2&gt; &#xA;&lt;p&gt;See in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features/README.md&#34;&gt;document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!note] The web tool for visualized configuration and custom build is under development.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Naming FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ligature&lt;/strong&gt;: Default version with ligatures (&lt;code&gt;Maple Mono&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No-Ligature&lt;/strong&gt;: Default version without ligatures (&lt;code&gt;Maple Mono NL&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Normal-Ligature&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#preset&#34;&gt;&lt;code&gt;--normal&lt;/code&gt; preset&lt;/a&gt; with ligatures (&lt;code&gt;Maple Mono Normal&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Normal-No-Ligature&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#preset&#34;&gt;&lt;code&gt;--normal&lt;/code&gt; preset&lt;/a&gt; without ligatures (&lt;code&gt;Maple Mono Normal NL&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Format and Glyph Set&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Variable&lt;/strong&gt;: Minimal version, smoothly change font weight by variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TTF&lt;/strong&gt;: Minimal version, ttf format [Recommend!]&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OTF&lt;/strong&gt;: Minimal version, otf format&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WOFF2&lt;/strong&gt;: Minimal version, woff2 format, for small size on web pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NF&lt;/strong&gt;: Nerd-Font patched version, add icons for terminal (With &lt;code&gt;-NF&lt;/code&gt; suffix)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CN&lt;/strong&gt;: Chinese version, embed with Chinese and Japanese glyphs (With &lt;code&gt;-CN&lt;/code&gt; suffix)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NF-CN&lt;/strong&gt;: Full version, embed with icons, Chinese and Japanese glyphs (With &lt;code&gt;-NF-CN&lt;/code&gt; suffix)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Font Hint&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hinted font&lt;/strong&gt; is used for low resolution screen to have better render effect. From my experience, if your screen resolution is lower or equal than 1080P, it is recommended to use &#34;hinted font&#34;. Using &#34;unhinted font&#34; will lead to misalignment or uneven thickness on your text. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In this case, you can choose &lt;code&gt;MapleMono-TTF-AutoHint&lt;/code&gt; / &lt;code&gt;MapleMono-NF&lt;/code&gt; / &lt;code&gt;MapleMono-NF-CN&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Unhinted font&lt;/strong&gt; is used for high resolution screen (e.g. for MacBook). Using &#34;hinted font&#34; will blur your text or make it looks weird. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In this case, you can choose &lt;code&gt;MapleMono-OTF&lt;/code&gt; / &lt;code&gt;MapleMono-TTF&lt;/code&gt; / &lt;code&gt;MapleMono-NF-unhinted&lt;/code&gt; / &lt;code&gt;MapleMono-NF-CN-unhinted&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Why there exists &lt;code&gt;-AutoHint&lt;/code&gt; and &lt;code&gt;-unhinted&lt;/code&gt; suffix? &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;for backward compatibility, I keep the original naming scheme. &lt;code&gt;-AutoHint&lt;/code&gt; is only used for &lt;code&gt;TTF&lt;/code&gt; format.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;CDN&lt;/h2&gt; &#xA;&lt;h3&gt;Maple Mono&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fontsource.org/fonts/maple-mono&#34;&gt;fontsource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.zeoseven.com/items/443/&#34;&gt;ZeoSeven Fonts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Maple Mono CN&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chinese-font.netlify.app/zh-cn/fonts/maple-mono-cn/MapleMono-CN-Regular&#34;&gt;The Chinese Web Fonts Plan (中文网字计划)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.zeoseven.com/items/442/&#34;&gt;ZeoSeven Fonts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom Build&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;&lt;code&gt;config.json&lt;/code&gt;&lt;/a&gt; file is used to configure the build process. Checkout the &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/schema.json&#34;&gt;schema&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features/README.md&#34;&gt;document&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;There also have some &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/#build-script-usage&#34;&gt;command line options&lt;/a&gt; for customizing the build process. Cli options have higher priority than options in &lt;code&gt;config.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Use Github Actions&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/subframe7536/maple-font/actions/workflows/custom.yml&#34;&gt;Github Actions&lt;/a&gt; to build the font.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repo&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Change the content in &lt;code&gt;config.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to Actions tab&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;Custom Build&lt;/code&gt; menu item on the left&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;Run workflow&lt;/code&gt; button with options setup&lt;/li&gt; &#xA; &lt;li&gt;Wait for the build to finish&lt;/li&gt; &#xA; &lt;li&gt;Download the font archives from Releases&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/subframe7536/maple-font --depth 1 -b variable&#xA;docker build -t maple-font .&#xA;docker run -v &#34;$(pwd)/fonts:/app/fonts&#34; -e BUILD_ARGS=&#34;--normal&#34; maple-font&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local Build&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repo and run on your local machine. Make sure you have &lt;code&gt;python3&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; installed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/subframe7536/maple-font --depth 1 -b variable&#xA;pip install -r requirements.txt&#xA;python build.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For &lt;code&gt;Ubuntu&lt;/code&gt; or &lt;code&gt;Debian&lt;/code&gt;, maybe &lt;code&gt;python-is-python3&lt;/code&gt; is needed as well&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have trouble installing the dependencies, just create a new GitHub Codespace and run the commands there&lt;/p&gt; &#xA;&lt;h4&gt;Custom Nerd-Font&lt;/h4&gt; &#xA;&lt;p&gt;For custom &lt;code&gt;font-patcher&lt;/code&gt; args, &lt;code&gt;font-forge&lt;/code&gt; (and maybe &lt;code&gt;python3-fontforge&lt;/code&gt; as well) is required.&lt;/p&gt; &#xA;&lt;p&gt;Maybe you should also change &lt;code&gt;&#34;nerd_font.extra_args&#34;&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;config.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default args: &lt;code&gt;-l --careful --outputdir dir&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if &lt;code&gt;&#34;nerd_font.mono&#34;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then add &lt;code&gt;--mono&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Preset&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;build.py&lt;/code&gt; with &lt;code&gt;--normal&lt;/code&gt; flag, make the font looks not such &#34;Opinioned&#34; , just like &lt;code&gt;JetBrains Mono&lt;/code&gt; (with slashed zero).&lt;/p&gt; &#xA;&lt;h4&gt;Font Feature Freeze&lt;/h4&gt; &#xA;&lt;p&gt;There are three kind of options for feature freeze (&lt;a href=&#34;https://github.com/subframe7536/maple-font/issues/233#issuecomment-2410170270&#34;&gt;Why&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;enable&lt;/code&gt;: Forcely enable the features without setting up &lt;code&gt;cvXX&lt;/code&gt; / &lt;code&gt;ssXX&lt;/code&gt; / &lt;code&gt;zero&lt;/code&gt; in font features config, just as default glyphs / ligatures&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disable&lt;/code&gt;: Remove the features in &lt;code&gt;cvXX&lt;/code&gt; / &lt;code&gt;ssXX&lt;/code&gt; / &lt;code&gt;zero&lt;/code&gt;, which will no longer effect, even if you enable it manually&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignore&lt;/code&gt;: Do nothing&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Load Custom Feature File&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;build.py&lt;/code&gt; with &lt;code&gt;--apply-fea-file&lt;/code&gt; flag, the feature file from &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/source/features&#34;&gt;&lt;code&gt;source/features/{regular,italic}.fea&lt;/code&gt;&lt;/a&gt; will be applied into variable font. You can modify it to change all features, e.g. remove some ligatures in &lt;code&gt;calt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Chinese version&lt;/h3&gt; &#xA;&lt;p&gt;CN version is disabled by default. Run &lt;code&gt;python build.py&lt;/code&gt; with &lt;code&gt;--cn&lt;/code&gt; flag, the CN base fonts (about 130 MB) will download from GitHub.&lt;/p&gt; &#xA;&lt;p&gt;If you want to build CN base fonts from variable (about 35 MB), setup &lt;code&gt;&#34;cn.use_static_base_font&#34;: false&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;config.json&lt;/a&gt; and &lt;strong&gt;BE PATIENT&lt;/strong&gt;, instantiation will take about 20-30 minutes.&lt;/p&gt; &#xA;&lt;h4&gt;Narrow spacing in CN glyphs&lt;/h4&gt; &#xA;&lt;p&gt;If you think that CN glyphs spacing is &lt;strong&gt;tooooo large&lt;/strong&gt;, there is a &lt;strong&gt;EXPERIMENTAL&lt;/strong&gt; build option &lt;code&gt;cn.narrow&lt;/code&gt; or flag &lt;code&gt;--cn-narrow&lt;/code&gt; to narrow spacing in CN glyphs. You can see effect and track issues in &lt;a href=&#34;https://github.com/subframe7536/maple-font/issues/249&#34;&gt;#249&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;GitHub Mirror&lt;/h4&gt; &#xA;&lt;p&gt;The build script will auto download required assets from GitHub. If you have trouble downloading, please setup &lt;code&gt;github_mirror&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/subframe7536/maple-font/variable/config.json&#34;&gt;config.json&lt;/a&gt; or &lt;code&gt;$GITHUB&lt;/code&gt; to your environment variable. (Target URL will be &lt;code&gt;https://&amp;lt;github_mirror&amp;gt;/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/releases/download/&amp;lt;tag&amp;gt;/&amp;lt;file&amp;gt;&lt;/code&gt;), or just download the target &lt;code&gt;.zip&lt;/code&gt; file and put it in the same directory as &lt;code&gt;build.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Build Script Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: build.py [-h] [-v] [-d] [--debug] [-n] [--feat FEAT] [--apply-fea-file]&#xA;                [--hinted | --no-hinted] [--liga | --no-liga] [--cn-narrow]&#xA;                [--nerd-font | --no-nerd-font] [--cn | --no-cn] [--cn-both]&#xA;                [--ttf-only] [--cache] [--cn-rebuild] [--archive]&#xA;&#xA;✨ Builder and optimizer for Maple Mono&#xA;&#xA;options:&#xA;  -h, --help        show this help message and exit&#xA;  -v, --version     show program&#39;s version number and exit&#xA;  -d, --dry         Output config and exit&#xA;  --debug           Add `Debug` suffix to family name, skip optimization&#xA;&#xA;Feature Options:&#xA;  -n, --normal      Use normal preset, just like `JetBrains Mono` with slashed zero&#xA;  --feat FEAT       Freeze font features, splited by `,` (e.g. `--feat&#xA;                    zero,cv01,ss07,ss08`). No effect on variable format&#xA;  --apply-fea-file  Load feature file from `source/features/{regular,italic}.fea` to&#xA;                    variable font&#xA;  --hinted          Use hinted font as base font in NF / CN / NF-CN (default)&#xA;  --no-hinted       Use unhinted font as base font in NF / CN / NF-CN&#xA;  --liga            Preserve all the ligatures (default)&#xA;  --no-liga         Remove all the ligatures&#xA;  --cn-narrow       Make CN characters narrow (experimental)&#xA;&#xA;Build Options:&#xA;  --nerd-font       Build Nerd-Font version (default)&#xA;  --no-nerd-font    Do not build Nerd-Font version&#xA;  --cn              Build Chinese version&#xA;  --no-cn           Do not build Chinese version (default)&#xA;  --cn-both         Build both `Maple Mono CN` and `Maple Mono NF CN`. Nerd-Font&#xA;                    version must be enabled&#xA;  --ttf-only        Only build TTF format&#xA;  --cache           Reuse font cache of TTF, OTF and Woff2 formats&#xA;  --cn-rebuild      Reinstantiate CN base font&#xA;  --archive         Build font archives with config and license. If has `--cache`&#xA;                    flag, only archive Nerd-Font and CN formats&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JetBrains/JetBrainsMono&#34;&gt;JetBrains Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/googlefonts/RobotoMono&#34;&gt;Roboto Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tonsky/FiraCode&#34;&gt;Fira Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubjo/victor-mono&#34;&gt;Victor Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eigilnikolajsen/commit-mono&#34;&gt;Commit Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheRenegadeCoder/sample-programs-website&#34;&gt;Code Sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts&#34;&gt;Nerd Font&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MuTsunTsai/fontfreeze/&#34;&gt;Font Freeze&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tophix.com/font-tools/font-viewer&#34;&gt;Font Viewer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.monolisa.dev/&#34;&gt;Monolisa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.recursive.design/&#34;&gt;Recursive&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;SIL Open Font License 1.1&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ai-christianson/RA.Aid</title>
    <updated>2025-03-17T01:34:50Z</updated>
    <id>tag:github.com,2025-03-17:/ai-christianson/RA.Aid</id>
    <link href="https://github.com/ai-christianson/RA.Aid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Develop software autonomously.&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;assets/logo-white-transparent.gif&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;assets/logo-black-transparent.png&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/assets/logo-black-transparent.png&#34; alt=&#34;RA.Aid - Develop software autonomously.&#34; style=&#34;margin-bottom: 20px;&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/python-3.8%2B-blue&#34; alt=&#34;Python Versions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/status-Beta-yellow&#34; alt=&#34;Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Develop software autonomously.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;RA.Aid (pronounced &#34;raid&#34;) helps you develop software autonomously. It is a standalone coding agent built on LangGraph&#39;s agent-based task execution framework. The tool provides an intelligent assistant that can help with research, planning, and implementation of multi-step development tasks. RA.Aid can optionally integrate with &lt;code&gt;aider&lt;/code&gt; (&lt;a href=&#34;https://aider.chat/&#34;&gt;https://aider.chat/&lt;/a&gt;) via the &lt;code&gt;--use-aider&lt;/code&gt; flag to leverage its specialized code editing capabilities.&lt;/p&gt; &#xA;&lt;p&gt;The result is &lt;strong&gt;near-fully-autonomous software development&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoying RA.Aid?&lt;/strong&gt; Show your support by giving us a star ⭐ on &lt;a href=&#34;https://github.com/ai-christianson/RA.Aid&#34;&gt;GitHub&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a demo of RA.Aid adding a feature to itself:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/assets/demo-ra-aid-task-1.gif&#34; alt=&#34;RA.Aid Demo&#34; autoplay loop style=&#34;width: 100%; max-width: 800px;&#34;&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Complete documentation is available at &lt;a href=&#34;https://docs.ra-aid.ai&#34;&gt;https://docs.ra-aid.ai&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Key sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/quickstart/installation&#34;&gt;Installation Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/quickstart/recommended&#34;&gt;Recommended Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/quickstart/open-models&#34;&gt;Open Models Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/category/usage&#34;&gt;Usage Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/configuration/logging&#34;&gt;Logging System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/configuration/memory-management&#34;&gt;Memory Management&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/contributing&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ra-aid.ai/getting-help&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#development-setup&#34;&gt;Development Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;👋 &lt;strong&gt;Pull requests are very welcome!&lt;/strong&gt; Have ideas for how to impove RA.Aid? Don&#39;t be shy - your help makes a real difference!&lt;/p&gt; &#xA; &lt;p&gt;💬 &lt;strong&gt;Join our Discord community:&lt;/strong&gt; &lt;a href=&#34;https://discord.gg/f6wYbzHYxV&#34;&gt;Click here to join&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;IMPORTANT: USE AT YOUR OWN RISK&lt;/strong&gt; ⚠️&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This tool &lt;strong&gt;can and will&lt;/strong&gt; automatically execute shell commands and make code changes&lt;/li&gt; &#xA; &lt;li&gt;The --cowboy-mode flag can be enabled to skip shell command approval prompts&lt;/li&gt; &#xA; &lt;li&gt;No warranty is provided, either express or implied&lt;/li&gt; &#xA; &lt;li&gt;Always use in version-controlled repositories&lt;/li&gt; &#xA; &lt;li&gt;Review proposed changes in your git diff before committing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Step Task Planning&lt;/strong&gt;: The agent breaks down complex tasks into discrete, manageable steps and executes them sequentially. This systematic approach ensures thorough implementation and reduces errors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Automated Command Execution&lt;/strong&gt;: The agent can run shell commands automatically to accomplish tasks. While this makes it powerful, it also means you should carefully review its actions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ability to Leverage Expert Reasoning Models&lt;/strong&gt;: The agent can use advanced reasoning models such as OpenAI&#39;s o1 &lt;em&gt;just when needed&lt;/em&gt;, e.g. to solve complex debugging problems or in planning for complex feature implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Web Research Capabilities&lt;/strong&gt;: Leverages Tavily API for intelligent web searches to enhance research and gather real-world context for development tasks&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Three-Stage Architecture&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Research&lt;/strong&gt;: Analyzes codebases and gathers context&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt;: Breaks down tasks into specific, actionable steps&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt;: Executes each planned step sequentially&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;What sets RA.Aid apart is its ability to handle complex programming tasks that extend beyond single-shot code edits. By combining research, strategic planning, and implementation into a cohesive workflow, RA.Aid can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Break down and execute multi-step programming tasks&lt;/li&gt; &#xA; &lt;li&gt;Research and analyze complex codebases to answer architectural questions&lt;/li&gt; &#xA; &lt;li&gt;Plan and implement significant code changes across multiple files&lt;/li&gt; &#xA; &lt;li&gt;Provide detailed explanations of existing code structure and functionality&lt;/li&gt; &#xA; &lt;li&gt;Execute sophisticated refactoring operations with proper planning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Three-Stage Architecture&lt;/strong&gt;: The workflow consists of three powerful stages:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Research&lt;/strong&gt; 🔍 - Gather and analyze information&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Planning&lt;/strong&gt; 📋 - Develop execution strategy&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Implementation&lt;/strong&gt; ⚡ - Execute the plan with AI assistance&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;Each stage is powered by dedicated AI agents and specialized toolsets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Advanced AI Integration&lt;/strong&gt;: Built on LangChain and leverages the latest LLMs for natural language understanding and generation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Human-in-the-Loop Interaction&lt;/strong&gt;: Optional mode that enables the agent to ask you questions during task execution, ensuring higher accuracy and better handling of complex tasks that may require your input or clarification&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Comprehensive Toolset&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shell command execution&lt;/li&gt; &#xA;   &lt;li&gt;Expert querying system&lt;/li&gt; &#xA;   &lt;li&gt;File operations and management&lt;/li&gt; &#xA;   &lt;li&gt;Memory management&lt;/li&gt; &#xA;   &lt;li&gt;Research and planning tools&lt;/li&gt; &#xA;   &lt;li&gt;Code analysis capabilities&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interactive CLI Interface&lt;/strong&gt;: Simple yet powerful command-line interface for seamless interaction&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Modular Design&lt;/strong&gt;: Structured as a Python package with specialized modules for console output, processing, text utilities, and tools&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Git Integration&lt;/strong&gt;: Built-in support for Git operations and repository management&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Windows Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Python 3.8 or higher from &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;python.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install required system dependencies: &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Install Chocolatey if not already installed (run in admin PowerShell)&#xA;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))&#xA;&#xA;# Install ripgrep using Chocolatey&#xA;choco install ripgrep&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install RA.Aid: &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;pip install ra-aid&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install Windows-specific dependencies: &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;pip install pywin32&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Set up your API keys in a &lt;code&gt;.env&lt;/code&gt; file: &lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;ANTHROPIC_API_KEY=your_anthropic_key&#xA;OPENAI_API_KEY=your_openai_key&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Unix/Linux Installation&lt;/h3&gt; &#xA;&lt;p&gt;RA.Aid can be installed directly using pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install ra-aid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Before using RA.Aid, you&#39;ll need API keys for the required AI services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set up API keys based on your preferred provider:&#xA;&#xA;# For Anthropic Claude models (recommended)&#xA;export ANTHROPIC_API_KEY=your_api_key_here&#xA;&#xA;# For OpenAI models (optional)&#xA;export OPENAI_API_KEY=your_api_key_here&#xA;&#xA;# For OpenRouter provider (optional)&#xA;export OPENROUTER_API_KEY=your_api_key_here&#xA;&#xA;# For OpenAI-compatible providers (optional)&#xA;export OPENAI_API_BASE=your_api_base_url&#xA;&#xA;# For Gemini provider (optional)&#xA;export GEMINI_API_KEY=your_api_key_here&#xA;&#xA;# For web research capabilities&#xA;export TAVILY_API_KEY=your_api_key_here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: When using the &lt;code&gt;--use-aider&lt;/code&gt; flag, the programmer tool (aider) will automatically select its model based on your available API keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If ANTHROPIC_API_KEY is set, it will use Claude models&lt;/li&gt; &#xA; &lt;li&gt;If only OPENAI_API_KEY is set, it will use OpenAI models&lt;/li&gt; &#xA; &lt;li&gt;You can set multiple API keys to enable different features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can get your API keys from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anthropic API key: &lt;a href=&#34;https://console.anthropic.com/&#34;&gt;https://console.anthropic.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenAI API key: &lt;a href=&#34;https://platform.openai.com/api-keys&#34;&gt;https://platform.openai.com/api-keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenRouter API key: &lt;a href=&#34;https://openrouter.ai/keys&#34;&gt;https://openrouter.ai/keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Gemini API key: &lt;a href=&#34;https://aistudio.google.com/app/apikey&#34;&gt;https://aistudio.google.com/app/apikey&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Complete installation documentation is available in our &lt;a href=&#34;https://docs.ra-aid.ai/quickstart/installation&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;RA.Aid is designed to be simple yet powerful. Here&#39;s how to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Basic usage&#xA;ra-aid -m &#34;Your task or query here&#34;&#xA;&#xA;# Research-only mode (no implementation)&#xA;ra-aid -m &#34;Explain the authentication flow&#34; --research-only&#xA;&#xA;# File logging with console warnings (default mode)&#xA;ra-aid -m &#34;Add new feature&#34; --log-mode file&#xA;&#xA;# Console-only logging with detailed output&#xA;ra-aid -m &#34;Add new feature&#34; --log-mode console --log-level debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information is available in our &lt;a href=&#34;https://docs.ra-aid.ai/category/usage&#34;&gt;Usage Examples&lt;/a&gt;, &lt;a href=&#34;https://docs.ra-aid.ai/configuration/logging&#34;&gt;Logging System&lt;/a&gt;, and &lt;a href=&#34;https://docs.ra-aid.ai/configuration/memory-management&#34;&gt;Memory Management&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-m, --message&lt;/code&gt;: The task or query to be executed (required except in chat mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--research-only&lt;/code&gt;: Only perform research without implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--provider&lt;/code&gt;: The LLM provider to use (choices: anthropic, openai, openrouter, openai-compatible, gemini)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--model&lt;/code&gt;: The model name to use (required for non-Anthropic providers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--use-aider&lt;/code&gt;: Enable aider integration for code editing. When enabled, RA.Aid uses aider&#39;s specialized code editing capabilities instead of its own native file modification tools. This option is useful when you need aider&#39;s specific editing features or prefer its approach to code modifications. This feature is optional and disabled by default.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--research-provider&lt;/code&gt;: Provider to use specifically for research tasks (falls back to --provider if not specified)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--research-model&lt;/code&gt;: Model to use specifically for research tasks (falls back to --model if not specified)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--planner-provider&lt;/code&gt;: Provider to use specifically for planning tasks (falls back to --provider if not specified)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--planner-model&lt;/code&gt;: Model to use specifically for planning tasks (falls back to --model if not specified)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cowboy-mode&lt;/code&gt;: Skip interactive approval for shell commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--expert-provider&lt;/code&gt;: The LLM provider to use for expert knowledge queries (choices: anthropic, openai, openrouter, openai-compatible, gemini)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--expert-model&lt;/code&gt;: The model name to use for expert knowledge queries (required for non-OpenAI providers)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--hil, -H&lt;/code&gt;: Enable human-in-the-loop mode for interactive assistance during task execution&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--chat&lt;/code&gt;: Enable chat mode with direct human interaction (implies --hil)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--log-mode&lt;/code&gt;: Logging mode (choices: file, console) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;file&lt;/code&gt; (default): Logs to both file and console (only warnings and errors to console)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;console&lt;/code&gt;: Logs to console only at the specified log level with no file logging&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--log-level&lt;/code&gt;: Set specific logging level (debug, info, warning, error, critical) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;With &lt;code&gt;--log-mode=file&lt;/code&gt;: Controls the file logging level (console still shows only warnings+)&lt;/li&gt; &#xA;   &lt;li&gt;With &lt;code&gt;--log-mode=console&lt;/code&gt;: Controls the console logging level directly&lt;/li&gt; &#xA;   &lt;li&gt;Default: warning&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--experimental-fallback-handler&lt;/code&gt;: Enable experimental fallback handler to attempt to fix too calls when the same tool fails 3 times consecutively. (OPENAI_API_KEY recommended as openai has the top 5 tool calling models.) See &lt;code&gt;ra_aid/tool_leaderboard.py&lt;/code&gt; for more info.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--pretty-logger&lt;/code&gt;: Enables colored panel-style formatted logging output for better readability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--temperature&lt;/code&gt;: LLM temperature (0.0-2.0) to control randomness in responses&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--disable-limit-tokens&lt;/code&gt;: Disable token limiting for Anthropic Claude react agents&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--recursion-limit&lt;/code&gt;: Maximum recursion depth for agent operations (default: 100)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--test-cmd&lt;/code&gt;: Custom command to run tests. If set user will be asked if they want to run the test command&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--auto-test&lt;/code&gt;: Automatically run tests after each code change&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--max-test-cmd-retries&lt;/code&gt;: Maximum number of test command retry attempts (default: 3)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--test-cmd-timeout&lt;/code&gt;: Timeout in seconds for test command execution (default: 300)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt;: Show program version number and exit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--server&lt;/code&gt;: Launch the server with web interface (alpha feature)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--server-host&lt;/code&gt;: Host to listen on for server (default: 0.0.0.0) (alpha feature)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--server-port&lt;/code&gt;: Port to listen on for server (default: 1818) (alpha feature)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example Tasks&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Code Analysis:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Explain how the authentication middleware works&#34; --research-only&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Complex Changes:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Refactor the database connection code to use connection pooling&#34; --cowboy-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Automated Updates:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Update deprecated API calls across the entire codebase&#34; --cowboy-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code Research:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Analyze the current error handling patterns&#34; --research-only&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code Research:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Explain how the authentication middleware works&#34; --research-only&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Refactoring:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Refactor the database connection code to use connection pooling&#34; --cowboy-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Human-in-the-Loop Mode&lt;/h3&gt; &#xA;&lt;p&gt;Enable interactive mode to allow the agent to ask you questions during task execution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Implement a new feature&#34; --hil&#xA;# or&#xA;ra-aid -m &#34;Implement a new feature&#34; -H&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This mode is particularly useful for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complex tasks requiring human judgment&lt;/li&gt; &#xA; &lt;li&gt;Clarifying ambiguous requirements&lt;/li&gt; &#xA; &lt;li&gt;Making architectural decisions&lt;/li&gt; &#xA; &lt;li&gt;Validating critical changes&lt;/li&gt; &#xA; &lt;li&gt;Providing domain-specific knowledge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Web Research&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/assets/demo-web-research-1.gif&#34; alt=&#34;RA.Aid Demo&#34; autoplay loop style=&#34;width: 100%; max-width: 800px;&#34;&gt; &#xA;&lt;p&gt;The agent features autonomous web research capabilities powered by the &lt;a href=&#34;https://tavily.com/&#34;&gt;Tavily&lt;/a&gt; API, seamlessly integrating real-world information into its problem-solving workflow. Web research is conducted automatically when the agent determines additional context would be valuable - no explicit configuration required.&lt;/p&gt; &#xA;&lt;p&gt;For example, when researching modern authentication practices or investigating new API requirements, the agent will autonomously:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Search for current best practices and security recommendations&lt;/li&gt; &#xA; &lt;li&gt;Find relevant documentation and technical specifications&lt;/li&gt; &#xA; &lt;li&gt;Gather real-world implementation examples&lt;/li&gt; &#xA; &lt;li&gt;Stay updated on latest industry standards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While web research happens automatically as needed, you can also explicitly request research-focused tasks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Focused research task with web search capabilities&#xA;ra-aid -m &#34;Research current best practices for API rate limiting&#34; --research-only&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to set your TAVILY_API_KEY environment variable to enable this feature.&lt;/p&gt; &#xA;&lt;h3&gt;Chat Mode&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/assets/demo-chat-mode-1.gif&#34; alt=&#34;Chat Mode Demo&#34; autoplay loop style=&#34;display: block; margin: 0 auto; width: 100%; max-width: 800px;&#34;&gt; &#xA;&lt;p&gt;Enable with &lt;code&gt;--chat&lt;/code&gt; to transform ra-aid into an interactive assistant that guides you through research and implementation tasks. Have a natural conversation about what you want to build, explore options together, and dispatch work - all while maintaining context of your discussion. Perfect for when you want to think through problems collaboratively rather than just executing commands.&lt;/p&gt; &#xA;&lt;h3&gt;Server with Web Interface&lt;/h3&gt; &#xA;&lt;p&gt;RA.Aid includes a modern server with web interface that provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beautiful dark-themed chat interface&lt;/li&gt; &#xA; &lt;li&gt;Real-time streaming of command output&lt;/li&gt; &#xA; &lt;li&gt;Request history with quick resubmission&lt;/li&gt; &#xA; &lt;li&gt;Responsive design that works on all devices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To launch the server with web interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start with default settings (0.0.0.0:1818)&#xA;ra-aid --server&#xA;&#xA;# Specify custom host and port&#xA;ra-aid --server --server-host 127.0.0.1 --server-port 3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Command line options for server with web interface:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--server&lt;/code&gt;: Launch the server with web interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--server-host&lt;/code&gt;: Host to listen on (default: 0.0.0.0)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--server-port&lt;/code&gt;: Port to listen on (default: 1818)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After starting the server, open your web browser to the displayed URL (e.g., &lt;a href=&#34;http://localhost:1818&#34;&gt;http://localhost:1818&lt;/a&gt;). The interface provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Left sidebar showing request history&lt;/li&gt; &#xA; &lt;li&gt;Main chat area with real-time output&lt;/li&gt; &#xA; &lt;li&gt;Input box for typing requests&lt;/li&gt; &#xA; &lt;li&gt;Automatic reconnection handling&lt;/li&gt; &#xA; &lt;li&gt;Error reporting and status messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All ra-aid commands sent through the web interface automatically use cowboy mode for seamless execution.&lt;/p&gt; &#xA;&lt;h3&gt;Command Interruption and Feedback&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/assets/demo-chat-mode-interrupted-1.gif&#34; alt=&#34;Command Interrupt Demo&#34; autoplay loop style=&#34;display: block; margin: 0 auto; width: 100%; max-width: 800px;&#34;&gt; &#xA;&lt;p&gt;You can interrupt the agent at any time by pressing &lt;code&gt;Ctrl-C&lt;/code&gt;. This pauses the agent, allowing you to provide feedback, adjust your instructions, or steer the execution in a new direction. Press &lt;code&gt;Ctrl-C&lt;/code&gt; again if you want to completely exit the program.&lt;/p&gt; &#xA;&lt;h3&gt;Shell Command Automation with Cowboy Mode 🏇&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;--cowboy-mode&lt;/code&gt; flag enables automated shell command execution without confirmation prompts. This is useful for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CI/CD pipelines&lt;/li&gt; &#xA; &lt;li&gt;Automated testing environments&lt;/li&gt; &#xA; &lt;li&gt;Batch processing operations&lt;/li&gt; &#xA; &lt;li&gt;Scripted workflows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Update all deprecated API calls&#34; --cowboy-mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️ Important Safety Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cowboy mode skips confirmation prompts for shell commands&lt;/li&gt; &#xA; &lt;li&gt;Always use in version-controlled repositories&lt;/li&gt; &#xA; &lt;li&gt;Ensure you have a clean working tree before running&lt;/li&gt; &#xA; &lt;li&gt;Review changes in git diff before committing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Model Configuration&lt;/h3&gt; &#xA;&lt;p&gt;RA.Aid supports multiple AI providers and models. The default model is Anthropic&#39;s Claude 3 Sonnet (&lt;code&gt;claude-3-7-sonnet-20250219&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When using the &lt;code&gt;--use-aider&lt;/code&gt; flag, the programmer tool (aider) automatically selects its model based on your available API keys. It will use Claude models if ANTHROPIC_API_KEY is set, or fall back to OpenAI models if only OPENAI_API_KEY is available.&lt;/p&gt; &#xA;&lt;p&gt;Note: The expert tool can be configured to use different providers (OpenAI, Anthropic, OpenRouter, Gemini) using the --expert-provider flag along with the corresponding EXPERT_*API_KEY environment variables. Each provider requires its own API key set through the appropriate environment variable.&lt;/p&gt; &#xA;&lt;h4&gt;Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;RA.Aid supports multiple providers through environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ANTHROPIC_API_KEY&lt;/code&gt;: Required for the default Anthropic provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;: Required for OpenAI provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENROUTER_API_KEY&lt;/code&gt;: Required for OpenRouter provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DEEPSEEK_API_KEY&lt;/code&gt;: Required for DeepSeek provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OPENAI_API_BASE&lt;/code&gt;: Required for OpenAI-compatible providers along with &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GEMINI_API_KEY&lt;/code&gt;: Required for Gemini provider&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Expert Tool Environment Variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;EXPERT_OPENAI_API_KEY&lt;/code&gt;: API key for expert tool using OpenAI provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXPERT_ANTHROPIC_API_KEY&lt;/code&gt;: API key for expert tool using Anthropic provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXPERT_OPENROUTER_API_KEY&lt;/code&gt;: API key for expert tool using OpenRouter provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXPERT_OPENAI_API_BASE&lt;/code&gt;: Base URL for expert tool using OpenAI-compatible provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXPERT_GEMINI_API_KEY&lt;/code&gt;: API key for expert tool using Gemini provider&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;EXPERT_DEEPSEEK_API_KEY&lt;/code&gt;: API key for expert tool using DeepSeek provider&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can set these permanently in your shell&#39;s configuration file (e.g., &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Default provider (Anthropic)&#xA;export ANTHROPIC_API_KEY=your_api_key_here&#xA;&#xA;# For OpenAI features and expert tool&#xA;export OPENAI_API_KEY=your_api_key_here&#xA;&#xA;# For OpenRouter provider&#xA;export OPENROUTER_API_KEY=your_api_key_here&#xA;&#xA;# For OpenAI-compatible providers&#xA;export OPENAI_API_BASE=your_api_base_url&#xA;&#xA;# For Gemini provider&#xA;export GEMINI_API_KEY=your_api_key_here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Model Examples&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Anthropic (Default)&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Uses default model (claude-3-7-sonnet-20250219)&#xA;ra-aid -m &#34;Your task&#34;&#xA;&#xA;# Or explicitly specify:&#xA;ra-aid -m &#34;Your task&#34; --provider anthropic --model claude-3-5-sonnet-20241022&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using OpenAI&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Your task&#34; --provider openai --model gpt-4o&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using OpenRouter&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ra-aid -m &#34;Your task&#34; --provider openrouter --model mistralai/mistral-large-2411&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using DeepSeek&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Direct DeepSeek provider (requires DEEPSEEK_API_KEY)&#xA;ra-aid -m &#34;Your task&#34; --provider deepseek --model deepseek-reasoner&#xA;&#xA;# DeepSeek via OpenRouter&#xA;ra-aid -m &#34;Your task&#34; --provider openrouter --model deepseek/deepseek-r1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configuring Expert Provider&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The expert tool is used by the agent for complex logic and debugging tasks. It can be configured to use different providers (OpenAI, Anthropic, OpenRouter, Gemini, openai-compatible) using the --expert-provider flag along with the corresponding EXPERT_*API_KEY environment variables.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Use Anthropic for expert tool&#xA;export EXPERT_ANTHROPIC_API_KEY=your_anthropic_api_key&#xA;ra-aid -m &#34;Your task&#34; --expert-provider anthropic --expert-model claude-3-5-sonnet-20241022&#xA;&#xA;# Use OpenRouter for expert tool&#xA;export OPENROUTER_API_KEY=your_openrouter_api_key&#xA;ra-aid -m &#34;Your task&#34; --expert-provider openrouter --expert-model mistralai/mistral-large-2411&#xA;&#xA;# Use DeepSeek for expert tool&#xA;export DEEPSEEK_API_KEY=your_deepseek_api_key&#xA;ra-aid -m &#34;Your task&#34; --expert-provider deepseek --expert-model deepseek-reasoner&#xA;&#xA;# Use default OpenAI for expert tool&#xA;export EXPERT_OPENAI_API_KEY=your_openai_api_key&#xA;ra-aid -m &#34;Your task&#34; --expert-provider openai --expert-model o1&#xA;&#xA;# Use Gemini for expert tool&#xA;export EXPERT_GEMINI_API_KEY=your_gemini_api_key&#xA;ra-aid -m &#34;Your task&#34; --expert-provider gemini --expert-model gemini-2.0-flash-thinking-exp-1219&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Aider specific Environment Variables you can add:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AIDER_FLAGS&lt;/code&gt;: Optional comma-separated list of flags to pass to the underlying aider tool (e.g., &#34;yes-always,dark-mode&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Optional: Configure aider behavior&#xA;export AIDER_FLAGS=&#34;yes-always,dark-mode,no-auto-commits&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For &lt;code&gt;AIDER_FLAGS&lt;/code&gt;, you can specify flags with or without the leading &lt;code&gt;--&lt;/code&gt;. Multiple flags should be comma-separated, and spaces around flags are automatically handled. For example, both &lt;code&gt;&#34;yes-always,dark-mode&#34;&lt;/code&gt; and &lt;code&gt;&#34;--yes-always, --dark-mode&#34;&lt;/code&gt; are valid.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Performance varies between models. The default Claude 3 Sonnet model currently provides the best and most reliable results.&lt;/li&gt; &#xA; &lt;li&gt;Model configuration is done via command line arguments: &lt;code&gt;--provider&lt;/code&gt; and &lt;code&gt;--model&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;--model&lt;/code&gt; argument is required for all providers except Anthropic (which defaults to &lt;code&gt;claude-3-7-sonnet-20250219&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information is available in our &lt;a href=&#34;https://docs.ra-aid.ai/quickstart/open-models&#34;&gt;Open Models Setup&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;RA.Aid implements a three-stage architecture for handling development and research tasks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Research Stage&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Gathers information and context&lt;/li&gt; &#xA;   &lt;li&gt;Analyzes requirements&lt;/li&gt; &#xA;   &lt;li&gt;Identifies key components and dependencies&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Planning Stage&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Develops detailed implementation plans&lt;/li&gt; &#xA;   &lt;li&gt;Breaks down tasks into manageable steps&lt;/li&gt; &#xA;   &lt;li&gt;Identifies potential challenges and solutions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Implementation Stage&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Executes planned tasks&lt;/li&gt; &#xA;   &lt;li&gt;Generates code or documentation&lt;/li&gt; &#xA;   &lt;li&gt;Performs necessary system operations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Core Components&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Console Module&lt;/strong&gt; (&lt;code&gt;console/&lt;/code&gt;): Handles console output formatting and user interaction&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Processing Module&lt;/strong&gt; (&lt;code&gt;proc/&lt;/code&gt;): Manages interactive processing and workflow control&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Text Module&lt;/strong&gt; (&lt;code&gt;text/&lt;/code&gt;): Provides text processing and manipulation utilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tools Module&lt;/strong&gt; (&lt;code&gt;tools/&lt;/code&gt;): Contains various utility tools for file operations, search, and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Core Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;langchain-anthropic&lt;/code&gt;: LangChain integration with Anthropic&#39;s Claude&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tavily-python&lt;/code&gt;: Tavily API client for web research&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;langgraph&lt;/code&gt;: Graph-based workflow management&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rich&amp;gt;=13.0.0&lt;/code&gt;: Terminal formatting and output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GitPython==3.1.41&lt;/code&gt;: Git repository management&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fuzzywuzzy==0.18.0&lt;/code&gt;: Fuzzy string matching&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python-Levenshtein==0.23.0&lt;/code&gt;: Fast string matching&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pathspec&amp;gt;=0.11.0&lt;/code&gt;: Path specification utilities&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;pytest&amp;gt;=7.0.0&lt;/code&gt;: Testing framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pytest-timeout&amp;gt;=2.2.0&lt;/code&gt;: Test timeout management&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ai-christianson/RA.Aid.git&#xA;cd RA.Aid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create and activate a virtual environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv venv&#xA;source venv/bin/activate  # On Windows use `venv\Scripts\activate`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install development dependencies:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -e &#34;.[dev]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create a feature branch:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b feature/your-feature-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Make your changes and commit:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &#39;Add some feature&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Push to your fork:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin feature/your-feature-name&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow PEP 8 style guidelines&lt;/li&gt; &#xA; &lt;li&gt;Add tests for new features&lt;/li&gt; &#xA; &lt;li&gt;Update documentation as needed&lt;/li&gt; &#xA; &lt;li&gt;Keep commits focused and message clear&lt;/li&gt; &#xA; &lt;li&gt;Ensure all tests pass before submitting PR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More information is available in our &lt;a href=&#34;https://docs.ra-aid.ai/contributing&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the Apache License 2.0 - see the &lt;a href=&#34;https://raw.githubusercontent.com/ai-christianson/RA.Aid/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2024 AI Christianson&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: Please report bugs and feature requests on our &lt;a href=&#34;https://github.com/ai-christianson/RA.Aid/issues&#34;&gt;Issue Tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Repository&lt;/strong&gt;: &lt;a href=&#34;https://github.com/ai-christianson/RA.Aid&#34;&gt;https://github.com/ai-christianson/RA.Aid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://github.com/ai-christianson/RA.Aid#readme&#34;&gt;https://github.com/ai-christianson/RA.Aid#readme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>