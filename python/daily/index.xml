<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-27T01:38:38Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SUDO-AI-3D/zero123plus</title>
    <updated>2023-10-27T01:38:38Z</updated>
    <id>tag:github.com,2023-10-27:/SUDO-AI-3D/zero123plus</id>
    <link href="https://github.com/SUDO-AI-3D/zero123plus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code repository for Zero123++: a Single Image to Consistent Multi-view Diffusion Base Model.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zero123++: A Single Image to Consistent Multi-view Diffusion Base Model&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SUDO-AI-3D/zero123plus/main/resources/teaser-low.jpg&#34; alt=&#34;Teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/2310.15110&#34;&gt;[Report]&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/sudo-ai/zero123plus-demo-space&#34;&gt;[Official Demo]&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/spaces/ysharma/Zero123PlusDemo&#34;&gt;[Demo by @yvrjsharma]&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/drive/1_5ECnTOosRuAsm2tUp0zvBG0DppL-F3V?usp=sharing&#34;&gt;[Google Colab]&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;You will need &lt;code&gt;torch&lt;/code&gt; (recommended &lt;code&gt;2.0&lt;/code&gt; or higher), &lt;code&gt;diffusers&lt;/code&gt; (recommended &lt;code&gt;0.20.2&lt;/code&gt;), and &lt;code&gt;transformers&lt;/code&gt; to start. If you are using &lt;code&gt;torch&lt;/code&gt; &lt;code&gt;1.x&lt;/code&gt;, it is recommended to install &lt;code&gt;xformers&lt;/code&gt; to compute attentions in the model efficiently. The code also runs on older versions of &lt;code&gt;diffusers&lt;/code&gt;, but you may see a decrease in model performance.&lt;/p&gt; &#xA;&lt;p&gt;And you are all set! We provide a custom pipeline for &lt;code&gt;diffusers&lt;/code&gt;, so no extra code is required.&lt;/p&gt; &#xA;&lt;p&gt;To generate multi-view images from a single input image, you can run the following code (also see &lt;a href=&#34;https://raw.githubusercontent.com/SUDO-AI-3D/zero123plus/main/examples/img_to_mv.py&#34;&gt;examples/img_to_mv.py&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;import requests&#xA;from PIL import Image&#xA;from diffusers import DiffusionPipeline, EulerAncestralDiscreteScheduler&#xA;&#xA;# Load the pipeline&#xA;pipeline = DiffusionPipeline.from_pretrained(&#xA;    &#34;sudo-ai/zero123plus-v1.1&#34;, custom_pipeline=&#34;sudo-ai/zero123plus-pipeline&#34;,&#xA;    torch_dtype=torch.float16&#xA;)&#xA;&#xA;# Feel free to tune the scheduler!&#xA;# `timestep_spacing` parameter is not supported in older versions of `diffusers`&#xA;# so there may be performance degradations&#xA;# We recommend using `diffusers==0.20.2`&#xA;pipeline.scheduler = EulerAncestralDiscreteScheduler.from_config(&#xA;    pipeline.scheduler.config, timestep_spacing=&#39;trailing&#39;&#xA;)&#xA;pipeline.to(&#39;cuda:0&#39;)&#xA;&#xA;# Download an example image.&#xA;cond = Image.open(requests.get(&#34;https://d.skis.ltd/nrp/sample-data/lysol.png&#34;, stream=True).raw)&#xA;&#xA;# Run the pipeline!&#xA;result = pipeline(cond, num_inference_steps=75).images[0]&#xA;# for general real and synthetic images of general objects&#xA;# usually it is enough to have around 28 inference steps&#xA;# for images with delicate details like faces (real or anime)&#xA;# you may need 75-100 steps for the details to construct&#xA;&#xA;result.show()&#xA;result.save(&#34;output.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example requires ~5GB VRAM to run. The input image needs to be square, and the recommended image resolution is &lt;code&gt;&amp;gt;=320x320&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, Zero123++ generates opaque images with a gray background (the &lt;code&gt;zero&lt;/code&gt; for Stable Diffusion VAE). You may run an extra background removal pass like &lt;code&gt;rembg&lt;/code&gt; to remove the gray background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# !pip install rembg&#xA;import rembg&#xA;result = rembg.remove(result)&#xA;result.show()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the depth ControlNet, you can use the following example (also see &lt;a href=&#34;https://raw.githubusercontent.com/SUDO-AI-3D/zero123plus/main/examples/depth_controlnet.py&#34;&gt;examples/depth_controlnet.py&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;import requests&#xA;from PIL import Image&#xA;from diffusers import DiffusionPipeline, EulerAncestralDiscreteScheduler, ControlNetModel&#xA;&#xA;# Load the pipeline&#xA;pipeline = DiffusionPipeline.from_pretrained(&#xA;    &#34;sudo-ai/zero123plus-v1.1&#34;, custom_pipeline=&#34;sudo-ai/zero123plus-pipeline&#34;,&#xA;    torch_dtype=torch.float16&#xA;)&#xA;pipeline.add_controlnet(ControlNetModel.from_pretrained(&#xA;    &#34;sudo-ai/controlnet-zp11-depth-v1&#34;, torch_dtype=torch.float16&#xA;), conditioning_scale=0.75)&#xA;# Feel free to tune the scheduler&#xA;pipeline.scheduler = EulerAncestralDiscreteScheduler.from_config(&#xA;    pipeline.scheduler.config, timestep_spacing=&#39;trailing&#39;&#xA;)&#xA;pipeline.to(&#39;cuda:0&#39;)&#xA;# Run the pipeline&#xA;cond = Image.open(requests.get(&#34;https://d.skis.ltd/nrp/sample-data/0_cond.png&#34;, stream=True).raw)&#xA;depth = Image.open(requests.get(&#34;https://d.skis.ltd/nrp/sample-data/0_depth.png&#34;, stream=True).raw)&#xA;result = pipeline(cond, depth_image=depth, num_inference_steps=36).images[0]&#xA;result.show()&#xA;result.save(&#34;output.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example requires ~5.7GB VRAM to run.&lt;/p&gt; &#xA;&lt;h2&gt;Models&lt;/h2&gt; &#xA;&lt;p&gt;The models are available at &lt;a href=&#34;https://huggingface.co/sudo-ai&#34;&gt;https://huggingface.co/sudo-ai&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo-ai/zero123plus-v1.1&lt;/code&gt;, base Zero123++ model release (v1.1).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo-ai/controlnet-zp11-depth-v1&lt;/code&gt; depth ControlNet checkpoint release (v1) for Zero123++ (v1.1).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The source code for the diffusers custom pipeline is available in the &lt;a href=&#34;https://raw.githubusercontent.com/SUDO-AI-3D/zero123plus/main/diffusers-support&#34;&gt;diffusers-support&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Camera Poses&lt;/h2&gt; &#xA;&lt;p&gt;Output views are a fixed set of camera poses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azimuth (relative to input view): &lt;code&gt;30, 90, 150, 210, 270, 330&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Elevation (absolute): &lt;code&gt;30, -20, 30, -20, 30, -20&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Demo Locally&lt;/h2&gt; &#xA;&lt;p&gt;You will need to install extra dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;streamlit run app.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Gradio Demo, you can run &lt;code&gt;python gradio_app.py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you found Zero123++ helpful, please cite our report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{shi2023zero123plus,&#xA;      title={Zero123++: a Single Image to Consistent Multi-view Diffusion Base Model}, &#xA;      author={Ruoxi Shi and Hansheng Chen and Zhuoyang Zhang and Minghua Liu and Chao Xu and Xinyue Wei and Linghao Chen and Chong Zeng and Hao Su},&#xA;      year={2023},&#xA;      eprint={2310.15110},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CV}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>N1k0la-T/CVE-2023-36745</title>
    <updated>2023-10-27T01:38:38Z</updated>
    <id>tag:github.com,2023-10-27:/N1k0la-T/CVE-2023-36745</id>
    <link href="https://github.com/N1k0la-T/CVE-2023-36745" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>iterative/dvc</title>
    <updated>2023-10-27T01:38:38Z</updated>
    <id>tag:github.com,2023-10-27:/iterative/dvc</id>
    <link href="https://github.com/iterative/dvc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ¦‰ Data Version Control | Git for Data &amp; Models | ML Experiments Management&lt;/p&gt;&lt;hr&gt;&lt;p&gt;|Banner|&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Website &amp;lt;https://dvc.org&amp;gt;&lt;/code&gt;_ â€¢ &lt;code&gt;Docs &amp;lt;https://dvc.org/doc&amp;gt;&lt;/code&gt;_ â€¢ &lt;code&gt;Blog &amp;lt;http://blog.dataversioncontrol.com&amp;gt;&lt;/code&gt;_ â€¢ &lt;code&gt;Tutorial &amp;lt;https://dvc.org/doc/get-started&amp;gt;&lt;/code&gt;_ â€¢ &lt;code&gt;Related Technologies &amp;lt;https://dvc.org/doc/user-guide/related-technologies&amp;gt;&lt;/code&gt;_ â€¢ &lt;code&gt;How DVC works&lt;/code&gt;_ â€¢ &lt;code&gt;VS Code Extension&lt;/code&gt;_ â€¢ &lt;code&gt;Installation&lt;/code&gt;_ â€¢ &lt;code&gt;Contributing&lt;/code&gt;_ â€¢ &lt;code&gt;Community and Support&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;|CI| |Python Version| |Coverage| |VS Code| |DOI|&lt;/p&gt; &#xA;&lt;p&gt;|PyPI| |PyPI Downloads| |Packages| |Brew| |Conda| |Choco| |Snap|&lt;/p&gt; &#xA;&lt;p&gt;|&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data Version Control&lt;/strong&gt; or &lt;strong&gt;DVC&lt;/strong&gt; is a command line tool and &lt;code&gt;VS Code Extension&lt;/code&gt;_ to help you develop reproducible machine learning projects:&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;Version&lt;/strong&gt; your data and models. Store them in your cloud storage but keep their version info in your Git repo.&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;Iterate&lt;/strong&gt; fast with lightweight pipelines. When you make changes, only run the steps impacted by those changes.&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;Track&lt;/strong&gt; experiments in your local Git repo (no servers needed).&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;Compare&lt;/strong&gt; any data, code, parameters, model, or performance plots.&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;Share&lt;/strong&gt; experiments and automatically reproduce anyone&#39;s experiment.&lt;/p&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Please read our `Command Reference &amp;lt;https://dvc.org/doc/command-reference&amp;gt;`_ for a complete list.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A common CLI workflow includes:&lt;/p&gt; &#xA;&lt;p&gt;+-----------------------------------+----------------------------------------------------------------------------------------------------+ | Task | Terminal | +===================================+====================================================================================================+ | Track data | | &lt;code&gt;$ git add train.py params.yaml&lt;/code&gt; | | | | &lt;code&gt;$ dvc add images/&lt;/code&gt; | +-----------------------------------+----------------------------------------------------------------------------------------------------+ | Connect code and data | | &lt;code&gt;$ dvc stage add -n featurize -d images/ -o features/ python featurize.py&lt;/code&gt; | | | | &lt;code&gt;$ dvc stage add -n train -d features/ -d train.py -o model.p -M metrics.json python train.py&lt;/code&gt; | +-----------------------------------+----------------------------------------------------------------------------------------------------+ | Make changes and experiment | | &lt;code&gt;$ dvc exp run -n exp-baseline&lt;/code&gt; | | | | &lt;code&gt;$ vi train.py&lt;/code&gt; | | | | &lt;code&gt;$ dvc exp run -n exp-code-change&lt;/code&gt; | +-----------------------------------+----------------------------------------------------------------------------------------------------+ | Compare and select experiments | | &lt;code&gt;$ dvc exp show&lt;/code&gt; | | | | &lt;code&gt;$ dvc exp apply exp-baseline&lt;/code&gt; | +-----------------------------------+----------------------------------------------------------------------------------------------------+ | Share code | | &lt;code&gt;$ git add .&lt;/code&gt; | | | | &lt;code&gt;$ git commit -m &#39;The baseline model&#39;&lt;/code&gt; | | | | &lt;code&gt;$ git push&lt;/code&gt; | +-----------------------------------+----------------------------------------------------------------------------------------------------+ | Share data and ML models | | &lt;code&gt;$ dvc remote add myremote -d s3://mybucket/image_cnn&lt;/code&gt; | | | | &lt;code&gt;$ dvc push&lt;/code&gt; | +-----------------------------------+----------------------------------------------------------------------------------------------------+&lt;/p&gt; &#xA;&lt;h1&gt;How DVC works&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;We encourage you to read our `Get Started&#xA;&amp;lt;https://dvc.org/doc/get-started&amp;gt;`_ docs to better understand what DVC&#xA;does and how it can fit your scenarios.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The closest &lt;em&gt;analogies&lt;/em&gt; to describe the main DVC features are these:&lt;/p&gt; &#xA;&lt;p&gt;#. &lt;strong&gt;Git for data&lt;/strong&gt;: Store and share data artifacts (like Git-LFS but without a server) and models, connecting them with a Git repository. Data management meets GitOps! #. &lt;strong&gt;Makefiles&lt;/strong&gt; for ML: Describes how data or model artifacts are built from other data and code in a standard format. Now you can version your data pipelines with Git. #. Local &lt;strong&gt;experiment tracking&lt;/strong&gt;: Turn your machine into an ML experiment management platform, and collaborate with others using existing Git hosting (Github, Gitlab, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Git is employed as usual to store and version code (including DVC meta-files as placeholders for data). DVC &lt;code&gt;stores data and model files &amp;lt;https://dvc.org/doc/start/data-management&amp;gt;&lt;/code&gt;_ seamlessly in a cache outside of Git, while preserving almost the same user experience as if they were in the repo. To share and back up the &lt;em&gt;data cache&lt;/em&gt;, DVC supports multiple remote storage platforms - any cloud (S3, Azure, Google Cloud, etc.) or on-premise network storage (via SSH, for example).&lt;/p&gt; &#xA;&lt;p&gt;|Flowchart|&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DVC pipelines &amp;lt;https://dvc.org/doc/start/data-management/data-pipelines&amp;gt;&lt;/code&gt;_ (computational graphs) connect code and data together. They specify all steps required to produce a model: input dependencies including code, data, commands to run; and output information to be saved.&lt;/p&gt; &#xA;&lt;p&gt;Last but not least, &lt;code&gt;DVC Experiment Versioning &amp;lt;https://dvc.org/doc/start/experiments&amp;gt;&lt;/code&gt;_ lets you prepare and run a large number of experiments. Their results can be filtered and compared based on hyperparameters and metrics, and visualized with multiple plots.&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;VS Code Extension&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h1&gt;Visual Studio Code Extension&lt;/h1&gt; &#xA;&lt;p&gt;|VS Code|&lt;/p&gt; &#xA;&lt;p&gt;To use DVC as a GUI right from your VS Code IDE, install the &lt;code&gt;DVC Extension &amp;lt;https://marketplace.visualstudio.com/items?itemName=Iterative.dvc&amp;gt;&lt;/code&gt;_ from the Marketplace. It currently features experiment tracking and data management, and more features (data pipeline support, etc.) are coming soon!&lt;/p&gt; &#xA;&lt;p&gt;|VS Code Extension Overview|&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Note: You&#39;ll have to install core DVC on your system separately (as detailed&#xA;below). The Extension will guide you if needed.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;There are several ways to install DVC: in VS Code; using &lt;code&gt;snap&lt;/code&gt;, &lt;code&gt;choco&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;conda&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;; or with an OS-specific package. Full instructions are &lt;code&gt;available here &amp;lt;https://dvc.org/doc/get-started/install&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Snapcraft (Linux)&lt;/h2&gt; &#xA;&lt;p&gt;|Snap|&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;snap install dvc --classic&lt;/p&gt; &#xA;&lt;p&gt;This corresponds to the latest tagged release. Add &lt;code&gt;--beta&lt;/code&gt; for the latest tagged release candidate, or &lt;code&gt;--edge&lt;/code&gt; for the latest &lt;code&gt;main&lt;/code&gt; version.&lt;/p&gt; &#xA;&lt;h2&gt;Chocolatey (Windows)&lt;/h2&gt; &#xA;&lt;p&gt;|Choco|&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;choco install dvc&lt;/p&gt; &#xA;&lt;h2&gt;Brew (mac OS)&lt;/h2&gt; &#xA;&lt;p&gt;|Brew|&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;brew install dvc&lt;/p&gt; &#xA;&lt;h2&gt;Anaconda (Any platform)&lt;/h2&gt; &#xA;&lt;p&gt;|Conda|&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;conda install -c conda-forge mamba # installs much faster than conda mamba install -c conda-forge dvc&lt;/p&gt; &#xA;&lt;p&gt;Depending on the remote storage type you plan to use to keep and share your data, you might need to install optional dependencies: &lt;code&gt;dvc-s3&lt;/code&gt;, &lt;code&gt;dvc-azure&lt;/code&gt;, &lt;code&gt;dvc-gdrive&lt;/code&gt;, &lt;code&gt;dvc-gs&lt;/code&gt;, &lt;code&gt;dvc-oss&lt;/code&gt;, &lt;code&gt;dvc-ssh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;PyPI (Python)&lt;/h2&gt; &#xA;&lt;p&gt;|PyPI|&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;pip install dvc&lt;/p&gt; &#xA;&lt;p&gt;Depending on the remote storage type you plan to use to keep and share your data, you might need to specify one of the optional dependencies: &lt;code&gt;s3&lt;/code&gt;, &lt;code&gt;gs&lt;/code&gt;, &lt;code&gt;azure&lt;/code&gt;, &lt;code&gt;oss&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt;. Or &lt;code&gt;all&lt;/code&gt; to include them all. The command should look like this: &lt;code&gt;pip install &#39;dvc[s3]&#39;&lt;/code&gt; (in this case AWS S3 dependencies such as &lt;code&gt;boto3&lt;/code&gt; will be installed automatically).&lt;/p&gt; &#xA;&lt;p&gt;To install the development version, run:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;pip install git+git://github.com/iterative/dvc&lt;/p&gt; &#xA;&lt;h2&gt;Package (Platform-specific)&lt;/h2&gt; &#xA;&lt;p&gt;|Packages|&lt;/p&gt; &#xA;&lt;p&gt;Self-contained packages for Linux, Windows, and Mac are available. The latest version of the packages can be found on the GitHub &lt;code&gt;releases page &amp;lt;https://github.com/iterative/dvc/releases&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Ubuntu / Debian (deb) ^^^^^^^^^^^^^^^^^^^^^ .. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;sudo wget &lt;a href=&#34;https://dvc.org/deb/dvc.list&#34;&gt;https://dvc.org/deb/dvc.list&lt;/a&gt; -O /etc/apt/sources.list.d/dvc.list wget -qO - &lt;a href=&#34;https://dvc.org/deb/iterative.asc&#34;&gt;https://dvc.org/deb/iterative.asc&lt;/a&gt; | sudo apt-key add - sudo apt update sudo apt install dvc&lt;/p&gt; &#xA;&lt;p&gt;Fedora / CentOS (rpm) ^^^^^^^^^^^^^^^^^^^^^ .. code-block:: bash&lt;/p&gt; &#xA;&lt;p&gt;sudo wget &lt;a href=&#34;https://dvc.org/rpm/dvc.repo&#34;&gt;https://dvc.org/rpm/dvc.repo&lt;/a&gt; -O /etc/yum.repos.d/dvc.repo sudo rpm --import &lt;a href=&#34;https://dvc.org/rpm/iterative.asc&#34;&gt;https://dvc.org/rpm/iterative.asc&lt;/a&gt; sudo yum update sudo yum install dvc&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;|Maintainability|&lt;/p&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see our &lt;code&gt;Contributing Guide &amp;lt;https://dvc.org/doc/user-guide/contributing/core&amp;gt;&lt;/code&gt;_ for more details. Thanks to all our contributors!&lt;/p&gt; &#xA;&lt;p&gt;|Contribs|&lt;/p&gt; &#xA;&lt;h1&gt;Community and Support&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Twitter &amp;lt;https://twitter.com/DVCorg&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Forum &amp;lt;https://discuss.dvc.org/&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Discord Chat &amp;lt;https://dvc.org/chat&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Email &amp;lt;mailto:support@dvc.org&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Mailing List &amp;lt;https://sweedom.us10.list-manage.com/subscribe/post?u=a08bf93caae4063c4e6a351f6&amp;amp;id=24c0ecc49a&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;This project is distributed under the Apache license version 2.0 (see the LICENSE file in the project root).&lt;/p&gt; &#xA;&lt;p&gt;By submitting a pull request to this project, you agree to license your contribution under the Apache license version 2.0 to this project.&lt;/p&gt; &#xA;&lt;h1&gt;Citation&lt;/h1&gt; &#xA;&lt;p&gt;|DOI|&lt;/p&gt; &#xA;&lt;p&gt;Iterative, &lt;em&gt;DVC: Data Version Control - Git for Data &amp;amp; Models&lt;/em&gt; (2020) &lt;code&gt;DOI:10.5281/zenodo.012345 &amp;lt;https://doi.org/10.5281/zenodo.3677553&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Barrak, A., Eghan, E.E. and Adams, B. &lt;code&gt;On the Co-evolution of ML Pipelines and Source Code - Empirical Study of DVC Projects &amp;lt;https://mcis.cs.queensu.ca/publications/2021/saner.pdf&amp;gt;&lt;/code&gt;_ , in Proceedings of the 28th IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2021. Hawaii, USA.&lt;/p&gt; &#xA;&lt;p&gt;.. |Banner| image:: &lt;a href=&#34;https://dvc.org/img/logo-github-readme.png&#34;&gt;https://dvc.org/img/logo-github-readme.png&lt;/a&gt; :target: &lt;a href=&#34;https://dvc.org&#34;&gt;https://dvc.org&lt;/a&gt; :alt: DVC logo&lt;/p&gt; &#xA;&lt;p&gt;.. |VS Code Extension Overview| image:: &lt;a href=&#34;https://raw.githubusercontent.com/iterative/vscode-dvc/main/extension/docs/overview.gif&#34;&gt;https://raw.githubusercontent.com/iterative/vscode-dvc/main/extension/docs/overview.gif&lt;/a&gt; :alt: DVC Extension for VS Code&lt;/p&gt; &#xA;&lt;p&gt;.. |CI| image:: &lt;a href=&#34;https://github.com/iterative/dvc/workflows/Tests/badge.svg?branch=main&#34;&gt;https://github.com/iterative/dvc/workflows/Tests/badge.svg?branch=main&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/iterative/dvc/actions&#34;&gt;https://github.com/iterative/dvc/actions&lt;/a&gt; :alt: GHA Tests&lt;/p&gt; &#xA;&lt;p&gt;.. |Maintainability| image:: &lt;a href=&#34;https://codeclimate.com/github/iterative/dvc/badges/gpa.svg&#34;&gt;https://codeclimate.com/github/iterative/dvc/badges/gpa.svg&lt;/a&gt; :target: &lt;a href=&#34;https://codeclimate.com/github/iterative/dvc&#34;&gt;https://codeclimate.com/github/iterative/dvc&lt;/a&gt; :alt: Code Climate&lt;/p&gt; &#xA;&lt;p&gt;.. |Python Version| image:: &lt;a href=&#34;https://img.shields.io/pypi/pyversions/dvc&#34;&gt;https://img.shields.io/pypi/pyversions/dvc&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/dvc&#34;&gt;https://pypi.org/project/dvc&lt;/a&gt; :alt: Python Version&lt;/p&gt; &#xA;&lt;p&gt;.. |Coverage| image:: &lt;a href=&#34;https://codecov.io/gh/iterative/dvc/branch/main/graph/badge.svg&#34;&gt;https://codecov.io/gh/iterative/dvc/branch/main/graph/badge.svg&lt;/a&gt; :target: &lt;a href=&#34;https://codecov.io/gh/iterative/dvc&#34;&gt;https://codecov.io/gh/iterative/dvc&lt;/a&gt; :alt: Codecov&lt;/p&gt; &#xA;&lt;p&gt;.. |Snap| image:: &lt;a href=&#34;https://img.shields.io/badge/snap-install-82BEA0.svg?logo=snapcraft&#34;&gt;https://img.shields.io/badge/snap-install-82BEA0.svg?logo=snapcraft&lt;/a&gt; :target: &lt;a href=&#34;https://snapcraft.io/dvc&#34;&gt;https://snapcraft.io/dvc&lt;/a&gt; :alt: Snapcraft&lt;/p&gt; &#xA;&lt;p&gt;.. |Choco| image:: &lt;a href=&#34;https://img.shields.io/chocolatey/v/dvc?label=choco&#34;&gt;https://img.shields.io/chocolatey/v/dvc?label=choco&lt;/a&gt; :target: &lt;a href=&#34;https://chocolatey.org/packages/dvc&#34;&gt;https://chocolatey.org/packages/dvc&lt;/a&gt; :alt: Chocolatey&lt;/p&gt; &#xA;&lt;p&gt;.. |Brew| image:: &lt;a href=&#34;https://img.shields.io/homebrew/v/dvc?label=brew&#34;&gt;https://img.shields.io/homebrew/v/dvc?label=brew&lt;/a&gt; :target: &lt;a href=&#34;https://formulae.brew.sh/formula/dvc&#34;&gt;https://formulae.brew.sh/formula/dvc&lt;/a&gt; :alt: Homebrew&lt;/p&gt; &#xA;&lt;p&gt;.. |Conda| image:: &lt;a href=&#34;https://img.shields.io/conda/v/conda-forge/dvc.svg?label=conda&amp;amp;logo=conda-forge&#34;&gt;https://img.shields.io/conda/v/conda-forge/dvc.svg?label=conda&amp;amp;logo=conda-forge&lt;/a&gt; :target: &lt;a href=&#34;https://anaconda.org/conda-forge/dvc&#34;&gt;https://anaconda.org/conda-forge/dvc&lt;/a&gt; :alt: Conda-forge&lt;/p&gt; &#xA;&lt;p&gt;.. |PyPI| image:: &lt;a href=&#34;https://img.shields.io/pypi/v/dvc.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white&#34;&gt;https://img.shields.io/pypi/v/dvc.svg?label=pip&amp;amp;logo=PyPI&amp;amp;logoColor=white&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/dvc&#34;&gt;https://pypi.org/project/dvc&lt;/a&gt; :alt: PyPI&lt;/p&gt; &#xA;&lt;p&gt;.. |PyPI Downloads| image:: &lt;a href=&#34;https://img.shields.io/pypi/dm/dvc.svg?color=blue&amp;amp;label=Downloads&amp;amp;logo=pypi&amp;amp;logoColor=gold&#34;&gt;https://img.shields.io/pypi/dm/dvc.svg?color=blue&amp;amp;label=Downloads&amp;amp;logo=pypi&amp;amp;logoColor=gold&lt;/a&gt; :target: &lt;a href=&#34;https://pypi.org/project/dvc&#34;&gt;https://pypi.org/project/dvc&lt;/a&gt; :alt: PyPI Downloads&lt;/p&gt; &#xA;&lt;p&gt;.. |Packages| image:: &lt;a href=&#34;https://img.shields.io/badge/deb%7Cpkg%7Crpm%7Cexe-blue&#34;&gt;https://img.shields.io/badge/deb|pkg|rpm|exe-blue&lt;/a&gt; :target: &lt;a href=&#34;https://dvc.org/doc/install&#34;&gt;https://dvc.org/doc/install&lt;/a&gt; :alt: deb|pkg|rpm|exe&lt;/p&gt; &#xA;&lt;p&gt;.. |DOI| image:: &lt;a href=&#34;https://img.shields.io/badge/DOI-10.5281/zenodo.3677553-blue.svg&#34;&gt;https://img.shields.io/badge/DOI-10.5281/zenodo.3677553-blue.svg&lt;/a&gt; :target: &lt;a href=&#34;https://doi.org/10.5281/zenodo.3677553&#34;&gt;https://doi.org/10.5281/zenodo.3677553&lt;/a&gt; :alt: DOI&lt;/p&gt; &#xA;&lt;p&gt;.. |Flowchart| image:: &lt;a href=&#34;https://dvc.org/img/flow.gif&#34;&gt;https://dvc.org/img/flow.gif&lt;/a&gt; :target: &lt;a href=&#34;https://dvc.org/img/flow.gif&#34;&gt;https://dvc.org/img/flow.gif&lt;/a&gt; :alt: how_dvc_works&lt;/p&gt; &#xA;&lt;p&gt;.. |Contribs| image:: &lt;a href=&#34;https://contrib.rocks/image?repo=iterative/dvc&#34;&gt;https://contrib.rocks/image?repo=iterative/dvc&lt;/a&gt; :target: &lt;a href=&#34;https://github.com/iterative/dvc/graphs/contributors&#34;&gt;https://github.com/iterative/dvc/graphs/contributors&lt;/a&gt; :alt: Contributors&lt;/p&gt; &#xA;&lt;p&gt;.. |VS Code| image:: &lt;a href=&#34;https://img.shields.io/visual-studio-marketplace/v/Iterative.dvc?color=blue&amp;amp;label=VSCode&amp;amp;logo=visualstudiocode&amp;amp;logoColor=blue&#34;&gt;https://img.shields.io/visual-studio-marketplace/v/Iterative.dvc?color=blue&amp;amp;label=VSCode&amp;amp;logo=visualstudiocode&amp;amp;logoColor=blue&lt;/a&gt; :target: &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Iterative.dvc&#34;&gt;https://marketplace.visualstudio.com/items?itemName=Iterative.dvc&lt;/a&gt; :alt: VS Code Extension&lt;/p&gt;</summary>
  </entry>
</feed>