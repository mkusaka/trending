<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-08T01:34:17Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>KruxAI/ragbuilder</title>
    <updated>2024-10-08T01:34:17Z</updated>
    <id>tag:github.com,2024-10-08:/KruxAI/ragbuilder</id>
    <link href="https://github.com/KruxAI/ragbuilder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit to create optimal Production-ready RAG setup for your data&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KruxAI/ragbuilder/main/assets/ragbuilder_dark.png#gh-dark-mode-only&#34; alt=&#34;RagBuilder logo&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/KruxAI/ragbuilder/main/assets/ragbuilder_light.png#gh-light-mode-only&#34; alt=&#34;RagBuilder logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;RagBuilder is a toolkit that helps you create optimal Production-ready Retrieval-Augmented-Generation (RAG) setup for your data automatically. By performing hyperparameter tuning on various RAG parameters (Eg: chunking strategy: semantic, character etc., chunk size: 1000, 2000 etc.), RagBuilder evaluates these configurations against a test dataset to identify the best-performing setup for your data. Additionally, RagBuilder includes several state-of-the-art, pre-defined RAG templates that have shown strong performance across diverse datasets. So just bring your data, and RagBuilder will generate a production-grade RAG setup in just minutes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/8b4a5013-b1b7-40ee-820b-32c46fd99a2a&#34;&gt;https://github.com/user-attachments/assets/8b4a5013-b1b7-40ee-820b-32c46fd99a2a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KruxAI/ragbuilder/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KruxAI/ragbuilder/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KruxAI/ragbuilder/main/#set-your-openai-api-key&#34;&gt;Set your OpenAI API key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/KruxAI/ragbuilder/main/#quickstart-guide&#34;&gt;Quickstart Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hyperparameter Tuning&lt;/strong&gt;: Efficiently identify optimal RAG configurations (combination of granular parameters like chunking strategy, chunking size, embedding models, retriever types etc.) using Bayesian optimization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pre-defined RAG Templates&lt;/strong&gt;: Use state-of-the-art templates that have demonstrated strong performance across various datasets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evaluation Dataset Options&lt;/strong&gt;: Choose to generate a synthetic test dataset or provide your own.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic Reuse&lt;/strong&gt;: Automatically re-use previously generated synthetic test data when applicable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy-to-use Interface&lt;/strong&gt;: Intuitive UI to guide you through setting up, configuring, and reviewing your RAG configurations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Option 1: Install using install script:&lt;/h3&gt; &#xA;&lt;p&gt;Note: For GraphRAG, Neo4J Graph Database details must be added in the .env file. For spinning up a local Neo4J Graph Database refer repo &lt;a href=&#34;https://github.com/KruxAI/neo4j-docker&#34;&gt;https://github.com/KruxAI/neo4j-docker&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://install.ragbuilder.io/mac | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://install.ragbuilder.io/win&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run Install.bat from command prompt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;install.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set your OpenAI API key&lt;/h4&gt; &#xA;&lt;p&gt;Make sure your OpenAI API key is available by setting it as an environment variable. In MacOS and Linux, this is the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export OPENAI_API_KEY=XXXXX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and on Windows it is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set OPENAI_API_KEY=XXXXX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, run ragbuilder on your command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ragbuilder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the Ragbuilder Uvicorn app and open the browser. If the browser window doesn&#39;t open automatically, go to &lt;a href=&#34;http://localhost:8005/&#34;&gt;http://localhost:8005/&lt;/a&gt; in your browser to access the RagBuilder dashboard.&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Using Prebuilt Docker Image&lt;/h3&gt; &#xA;&lt;h4&gt;Using Docker Compose&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pull the repo. This will spin up RAGBuilder and neo4J database needed for GraphRAG.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/KruxAI/ragbuilder.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Copy the .env-Sample file to .env File&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp .env-Sample .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the .env file to add the necessary keys&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start RagBuilder App&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Once the services are up, you can access your application via &lt;a href=&#34;http://localhost:55003&#34;&gt;http://localhost:55003&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Using Docker Commands&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Pull docker image from Docker hub&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull ashwinzyx/ragbuilder:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run the Docker Container. Create .env as below and use it while running the container. The env file must be in the same directory where the docker command is being run&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Mac&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -v &#34;$(pwd):/ragbuilder&#34; --env-file .env -p 55003:8005 ashwinzyx/ragbuilder:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d -v %cd%:/ragbuilder --env-file .env -p 55003:8005 ashwinzyx/ragbuilder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;p&gt;Provide env variables using command line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run  -p 55003:8005  -e OPENAI_API_KEY=sk-....&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the Ragbuilder Uvicorn app and open the browser. If the browser window doesn&#39;t open automatically, go to &lt;a href=&#34;http://localhost:55003/&#34;&gt;http://localhost:55003/&lt;/a&gt; in your browser to access the RagBuilder dashboard.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you are crearting your own synthetic dataset for evaluation, save the csv file in the same directory where the docker run command is being executed and provide the file name only&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart Guide&lt;/h2&gt; &#xA;&lt;p&gt;Getting started is super easy. To create a new project,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click &lt;strong&gt;New Project&lt;/strong&gt; to start building your RAG.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Describe your use-case. Let&#39;s specify &#34;Q&amp;amp;A Chatbot&#34; as the description for our demo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source Data:&lt;/strong&gt; Specify the path to your source data. This could be a URL, local directory or local file path. For the sake of our demo, let&#39;s specify the URL: &lt;a href=&#34;https://lilianweng.github.io/posts/2023-06-23-agent/&#34;&gt;https://lilianweng.github.io/posts/2023-06-23-agent/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Select Ragbuilder options:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use Pre-defined RAG Templates - When selected, this&#39;ll include pre-defined RAG configuration templates that have demonstrated strong performance across various datasets and related use-cases. These templates will be evaluated against your data, providing you with performance metrics for each pre-defined configuration.&lt;/li&gt; &#xA;   &lt;li&gt;Create Custom RAG Configurations - When selected, this&#39;ll generate multiple RAG configurations based on detailed parameters like chunking strategy, chunking size, embedding model, retriever type etc. With this option, it is recommended that you opt for the Bayesian optimization option to efficiently identify the near-optimal RAG configuration for your data. More about this in a bit.*&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Next, in order to tailor your RAG configurations, you can unselect any specific options you wish to exclude (For eg: Unselecting &#34;Chunking Strategy: Character&#34; will exclude all RAG configurations that have the CharacterTextSplitter). For best results, you may want to leave all settings unchanged. But for our Quickstart demo, we will unselect everything except the below: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Chunking strategy: Markdown&lt;/li&gt; &#xA;   &lt;li&gt;Embedding model: text-embedding-3-large&lt;/li&gt; &#xA;   &lt;li&gt;Retriever: Vector DB - Similarity Search&lt;/li&gt; &#xA;   &lt;li&gt;Top k: 5&lt;/li&gt; &#xA;   &lt;li&gt;LLM: GPT-3.5 Turbo&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Select optimization approach: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Bayesian optimization (Recommended):&lt;/strong&gt; Bayesian optimization is a strategy for the optimization of objective functions that are expensive to evaluate. It is particularly useful in scenarios where the function to be optimized is unknown and expensive to compute, such as in hyperparameter tuning for machine learning models or optimizing engineering designs. This is perfect for RAG where we have multiple moving parts, each with multiple parameters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Run all Combinations:&lt;/strong&gt; This option runs all possible combinations of the options selected, offering a comprehensive performance analysis of all RAG configurations for your dataset. This option is appropriate if you have selected fewer number of options. Orherwise, this option can be resource intensive as it may yield hundreds or even thousands of unique configurations to compare. &lt;em&gt;[Note]: This may take several minutes to complete.&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Next, in Evaluation dataset options, you have the option to: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Use Existing Synthetic Test Data:&lt;/strong&gt; If synthetic test data was previously generated for your dataset, this option will appear alongside the path of the existing test data.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Generate Synthetic Test Data from My Dataset:&lt;/strong&gt; Create a new synthetic test dataset based on your existing data.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Provide a Manually Created Test Dataset:&lt;/strong&gt; Use your own test dataset file (CSV format with &#34;question&#34; and &#34;ground_truth&#34; columns). For our demo, let&#39;s go ahead and create a synthetic test data by selecting the &lt;strong&gt;Generate Synthetic Test Data&lt;/strong&gt;** option.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Before running the tool, let&#39;s review all your selections:&lt;/li&gt; &#xA; &lt;li&gt;Review all the selections and click &lt;strong&gt;Confirm&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;After processing we should see the dashboard with the results.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;strong&gt;View Code snippet&lt;/strong&gt; option in the results screen to get the code snippet of the desired RAG configuration. And voila, you&#39;ve cut down several weeks/months of effort manually creating and evaluating different RAG configuration for your dataset.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Environment Variables Setup for RagBuilder&lt;/h1&gt; &#xA;&lt;p&gt;This section provides instructions on setting up the environment variables required for the RagBuilder project. These variables need to be configured in a &lt;code&gt;.env&lt;/code&gt; file located in the same directory where you run the &lt;code&gt;ragbuilder&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;The environment variables are essential for authenticating and configuring various services used by the RagBuilder project. Below are the variables you need to set in your &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OPENAI_API_KEY&lt;/strong&gt;: The API key for OpenAI services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MISTRAL_API_KEY&lt;/strong&gt;: The API key for Mistral services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ENABLE_ANALYTICS&lt;/strong&gt;: A boolean flag to enable or disable analytics. Set to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HUGGINGFACEHUB_API_TOKEN&lt;/strong&gt;: The API token for HuggingFace Hub.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;COHERE_API_KEY&lt;/strong&gt;: The API key for Cohere services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;JINA_API_KEY&lt;/strong&gt;: The API key for Jina services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SINGLESTOREDB_URL&lt;/strong&gt;: The connection string for SingleStoreDB, formatted as &lt;code&gt;userid:password@host:port/dbname&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PINECONE_API_KEY&lt;/strong&gt;: The API key for Pinecone services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GROQ_API_KEY&lt;/strong&gt;: The API key for accessing Groq services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AZURE_OPENAI_API_KEY&lt;/strong&gt;: The API key for Azure OpenAI services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AZURE_OPENAI_ENDPOINT&lt;/strong&gt;: The endpoint URL for Azure OpenAI services. Example: &lt;code&gt;https://&amp;lt;your-resource-name&amp;gt;.openai.azure.com/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OPENAI_API_VERSION&lt;/strong&gt;: Specifies the API version for OpenAI. Example: &lt;code&gt;2024-02-01&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GOOGLE_API_KEY&lt;/strong&gt;: The API key for Google Cloud services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GOOGLE_CLOUD_PROJECT&lt;/strong&gt;: The project ID for Google Cloud.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PGVECTOR_CONNECTION_STRING&lt;/strong&gt;: The connection string for PGVector, formatted as &lt;code&gt;postgresql+psycopg://langchain:langchain@localhost:6024/langchain&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MILVUS_CONNECTION_STRING&lt;/strong&gt;: The connection string for Milvus, using a local demo DB. Example: &lt;code&gt;./milvus_demo.db&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OLLAMA_BASE_URL&lt;/strong&gt;: The base URL for accessing Ollama services. Example: &lt;code&gt;http://localhost:11434&lt;/code&gt; (use &lt;code&gt;http://host.docker.internal:11434/&lt;/code&gt; if using Docker for RagBuilder).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEO4J_URI&lt;/strong&gt;: The connection URI for Neo4J. Example: &lt;code&gt;bolt://localhost:7687&lt;/code&gt; (use &lt;code&gt;bolt://neo4j:7687&lt;/code&gt; if using Docker for RagBuilder).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEO4J_USERNAME&lt;/strong&gt;: The username for Neo4J. Default: &lt;code&gt;neo4j&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEO4J_PASSWORD&lt;/strong&gt;: The password for Neo4J. Default: &lt;code&gt;ragbuilder&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEO4J_LOAD&lt;/strong&gt;: A flag to enable loading data into Neo4J. Set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. set this to false if the Graph database is loaded and want to skip the step&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Env Variables for RAGbuilder running on Docker will vary as below&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEO4J_URI&lt;/strong&gt;: The connection URI for Neo4J. Example: use &lt;code&gt;bolt://neo4j:7687&lt;/code&gt; if using Docker for RagBuilder&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OLLAMA_BASE_URL&lt;/strong&gt;: use &lt;code&gt;http://host.docker.internal:11434/&lt;/code&gt; if using Docker for RagBuilder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example &lt;code&gt;.env&lt;/code&gt; File&lt;/h3&gt; &#xA;&lt;p&gt;Create a file named &lt;code&gt;.env&lt;/code&gt; in the directory where you will run the &lt;code&gt;ragbuilder&lt;/code&gt; command and add the following content, replacing the placeholder values with your actual keys and connection string. Ensure not to use quoutes for keys or values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;# Environment variables for the RagBuilder project&#xA;OPENAI_API_KEY=XXXXXX&#xA;MISTRAL_API_KEY=XXXXX&#xA;ENABLE_ANALYTICS=True&#xA;HUGGINGFACEHUB_API_TOKEN=XXXXXX&#xA;COHERE_API_KEY=XXXXXX&#xA;JINA_API_KEY=XXXXXX&#xA;SINGLESTOREDB_URL=userid:password@host:port/dbname&#xA;PINECONE_API_KEY=XXXXXX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new file named .env in your project directory.&lt;/li&gt; &#xA; &lt;li&gt;Copy the example content provided above into the .env file.&lt;/li&gt; &#xA; &lt;li&gt;Replace the placeholder values with your actual API keys and connection string.&lt;/li&gt; &#xA; &lt;li&gt;Save the .env file.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the .env file is located in the same directory where you run the ragbuilder command to ensure the environment variables are properly loaded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By setting up these environment variables, you enable the RagBuilder project to authenticate and interact with the necessary external services.&lt;/p&gt; &#xA;&lt;h3&gt;Usage Analytics&lt;/h3&gt; &#xA;&lt;p&gt;We collect basic usage metrics to understand how our tool is performing for users. Specifically, we track the number of runs initiated and how many complete successfully. As a startup, being data-driven is crucial for us, which is why we monitor these metrics. Rest assured, we do not collect any personal data or information that could identify you, your company, or access your data. You can see exactly what we track by reviewing the code &lt;a href=&#34;https://github.com/KruxAI/ragbuilder/raw/main/src/ragbuilder/ragbuilder.py#L381&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/KruxAI/ragbuilder/raw/main/src/ragbuilder/ragbuilder.py#L537&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Open-Wine-Components/umu-launcher</title>
    <updated>2024-10-08T01:34:17Z</updated>
    <id>tag:github.com,2024-10-08:/Open-Wine-Components/umu-launcher</id>
    <link href="https://github.com/Open-Wine-Components/umu-launcher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;umu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Open-Wine-Components/umu-launcher/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Open-Wine-Components/umu-launcher&#34; alt=&#34;Github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Open-Wine-Components/umu-launcher/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Open-Wine-Components/umu-launcher&#34; alt=&#34;GPLv3 license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Open-Wine-Components/umu-launcher/actions&#34;&gt;&lt;img src=&#34;https://github.com/Open-Wine-Components/umu-launcher/actions/workflows/umu-python.yml/badge.svg?sanitize=true&#34; alt=&#34;Actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json&#34; alt=&#34;Ruff&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/6y3BdzC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;h3&gt;What is this?&lt;/h3&gt; &#xA;&lt;p&gt;This is a unified launcher for Windows games on Linux. It is essentially a copy of the &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools&#34;&gt;Steam Runtime Tools&lt;/a&gt; and &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/container-runtime.md&#34;&gt;Steam Linux Runtime&lt;/a&gt; that Valve uses for &lt;a href=&#34;https://github.com/ValveSoftware/Proton&#34;&gt;Proton&lt;/a&gt;, with some modifications made so that it can be used outside of Steam.&lt;/p&gt; &#xA;&lt;h3&gt;Why is it called UMU?&lt;/h3&gt; &#xA;&lt;p&gt;An umu is an above-ground oven of hot volcanic stones originating from Polynesian culture. After the stones are heated, the top layer is removed and the food placed on top to heat/cook. We chose the name because Valve&#39;s containerization tool is named pressure-vessel. We&#39;re &#34;preparing&#34; the pressure vessel similar to how you would use a stove top pressure-cooker -- by placing it on our umu&#39;s &#34;stovetop&#34;&lt;/p&gt; &#xA;&lt;h3&gt;What does it do?&lt;/h3&gt; &#xA;&lt;p&gt;When Steam launches a Proton game, it launches it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/home/tcrider/.local/share/Steam/ubuntu12_32/reaper SteamLaunch AppId=348550 -- /home/tcrider/.local/share/Steam/ubuntu12_32/steam-launch-wrapper -- /home/tcrider/.local/share/Steam/steamapps/common/SteamLinuxRuntime_sniper/_v2-entry-point --verb=waitforexitandrun -- /home/tcrider/.local/share/Steam/compatibilitytools.d/GE-Proton8-27/proton waitforexitandrun /home/tcrider/.local/share/Steam/steamapps/common/Guilty Gear XX Accent Core Plus R/GGXXACPR_Win.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can ignore this &lt;code&gt;/home/tcrider/.local/share/Steam/ubuntu12_32/steam-launch-wrapper&lt;/code&gt;, it&#39;s just a process runner with no real value other than forwarding environment variables (more on that later).&lt;/p&gt; &#xA;&lt;p&gt;I managed to pull the environment variables it uses by making Steam run &lt;code&gt;printenv&lt;/code&gt; for the game&#39;s command line. We needed these envvars because Proton expects them in order to function. With them we can essentially make Proton run without needing steam at all.&lt;/p&gt; &#xA;&lt;p&gt;Next this part &lt;code&gt;/home/tcrider/.local/share/Steam/steamapps/common/SteamLinuxRuntime_sniper/_v2-entry-point&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The first part &lt;code&gt;/home/tcrider/.local/share/Steam/steamapps/common/SteamLinuxRuntime_sniper/&lt;/code&gt; is steam-runtime-tools compiled and is used alongside the sniper runtime container used during Proton builds.&lt;/p&gt; &#xA;&lt;p&gt;The second part &lt;code&gt;_v2-entry-point&lt;/code&gt; is just a bash script which loads Proton into the container and runs the game.&lt;/p&gt; &#xA;&lt;p&gt;So, umu is basically a copy paste of &lt;code&gt;SteamLinuxRuntime_sniper&lt;/code&gt;, which is a compiled version of steam-runtime-tools. We&#39;ve renamed &lt;code&gt;_v2-entry-point&lt;/code&gt; to &lt;code&gt;umu&lt;/code&gt; and added &lt;code&gt;umu-run&lt;/code&gt; to replace &lt;code&gt;steam-launch-wrapper&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you use &lt;code&gt;umu-run&lt;/code&gt; to run a game, it uses the specified &lt;code&gt;WINEPREFIX&lt;/code&gt;, Proton version, executable, and arguments passed to it to run the game in Proton, inside Steam&#39;s runtime container JUST like if you were running the game through Steam, except now you&#39;re no longer limited to Steam&#39;s game library or forced to add the game to Steam&#39;s library. In fact, you don&#39;t even have to have Steam installed.&lt;/p&gt; &#xA;&lt;h3&gt;How do I use it?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;WINEPREFIX=$HOME/Games/epic-games-store GAMEID=umu-dauntless PROTONPATH=&#34;$HOME/.steam/steam/compatibilitytools.d/GE-Proton8-28&#34; umu-run &#34;$HOME/Games/epic-games-store/drive_c/Program Files (x86)/Epic Games/Launcher/Portal/Binaries/Win32/EpicGamesLauncher.exe&#34; -opengl -SkipBuildPatchPrereq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, with &lt;code&gt;STORE&lt;/code&gt; (used mainly for protonfixes):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WINEPREFIX=$HOME/Games/epic-games-store GAMEID=umu-dauntless STORE=egs PROTONPATH=&#34;$HOME/.steam/steam/compatibilitytools.d/GE-Proton8-28&#34; umu-run &#34;$HOME/Games/epic-games-store/drive_c/Program Files (x86)/Epic Games/Launcher/Portal/Binaries/Win32/EpicGamesLauncher.exe&#34; -opengl -SkipBuildPatchPrereq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/Open-Wine-Components/umu-launcher/raw/main/docs/umu.1.scd&#34;&gt;documentation&lt;/a&gt; for more examples and the &lt;a href=&#34;https://github.com/Open-Wine-Components/umu-launcher/wiki/Frequently-asked-questions-(FAQ)&#34;&gt;project&#39;s wiki&lt;/a&gt; for Frequently Asked Questions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: umu-launcher will automatically use and download the latest Steam Runtime that is required by Proton, and move its files to &lt;code&gt;$HOME/.local/share/umu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What does this mean for other launchers (Lutris, Bottles, Heroic, Legendary, etc.)?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everyone can use + contribute to the same protonfixes, no more managing individual install scripts per launcher&lt;/li&gt; &#xA; &lt;li&gt;Everyone can run their games through Proton just like a native Steam game&lt;/li&gt; &#xA; &lt;li&gt;No Steam or Steam binaries required&lt;/li&gt; &#xA; &lt;li&gt;A unified online database of game fixes (protonfixes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Right now protonfixes packages a folder of &#39;gamefixes&#39; however it could likely be recoded to pull from online quite easily. The idea is to get all of these tools using this same &lt;code&gt;umu-run&lt;/code&gt; and just feeding their envvars into it. That way any changes that need to happen can happen in proton-ge and/or protonfixes, or a &#39;unified proton&#39; build based off GE, or whatever they want.&lt;/p&gt; &#xA;&lt;h3&gt;What is the basic plan of putting this into action?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We build a database containing various game titles, their IDs from different stores, and their correlating umu ID.&lt;/li&gt; &#xA; &lt;li&gt;Various launchers then search the database to pull the umu ID, and feed it as the game ID to &lt;code&gt;umu-run&lt;/code&gt; alongside the store type, Proton version, wine prefix, game executable, and launch arguments.&lt;/li&gt; &#xA; &lt;li&gt;When the game gets launched from &lt;code&gt;umu-run&lt;/code&gt;, protonfixes picks up the store type and umu ID and finds the appropriate fix script for it, then applies it before running the game.&lt;/li&gt; &#xA; &lt;li&gt;protonfixes has folders separated for each store type. The umu ID for a game remains the exact same across multiple stores, the only difference being it can have store specific scripts OR it can just symlink to another existing script that already has the fixes it needs.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;Borderlands 3 from EGS store.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generally a launcher is going to know which store it is using already, so that is easy enough to determine and feed the &lt;code&gt;STORE&lt;/code&gt; variable to the launcher.&lt;/li&gt; &#xA; &lt;li&gt;To determine the game title, EGS has various codenames such as &#39;Catnip&#39;. The launcher would see &#34;ok store is egs and codename is Catnip, let&#39;s search the umu database for those&#34;&lt;/li&gt; &#xA; &lt;li&gt;In our umu unified database, we create a &#39;title&#39; column, &#39;store&#39; column, &#39;codename&#39; column, &#39;umu-ID&#39; column. We add a line for Borderlands 3 and fill in the details for each column.&lt;/li&gt; &#xA; &lt;li&gt;Now the launcher can search &#39;Catnip&#39; and &#39;egs&#39; as the codename and store in the database and correlate it with Borderlands 3 and umu-12345. It can then feed umu-12345 to the &lt;code&gt;umu-run&lt;/code&gt; script.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Building umu-launcher currently requires &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, and &lt;code&gt;scdoc&lt;/code&gt; for distribution, as well as the following Python build tools: &lt;a href=&#34;https://github.com/pypa/build&#34;&gt;build&lt;/a&gt;, &lt;a href=&#34;https://github.com/pypa/hatch&#34;&gt;hatchling&lt;/a&gt;, and &lt;a href=&#34;https://github.com/pypa/installer&#34;&gt;installer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build umu-launcher, after downloading and extracting the source code from this repository, change into the newly extracted directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd umu-launcher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure the installation &lt;code&gt;PREFIX&lt;/code&gt; (this is not related to wine&#39;s &lt;code&gt;WINEPREFIX&lt;/code&gt;) use the &lt;code&gt;configure.sh&lt;/code&gt; script&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure.sh --prefix=/usr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the &lt;code&gt;--prefix&lt;/code&gt; as fit for your distribution, for example &lt;code&gt;/usr/local&lt;/code&gt;, or &lt;code&gt;/app&lt;/code&gt; for packaging through Flatpak.&lt;/p&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;make&lt;/code&gt; to build. After a successful build the resulting files should be available in the &lt;code&gt;./builddir&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;To install umu-launcher run the following command after completing the steps described above&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are packaging umu-launcher&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make DESTDIR=&amp;lt;packaging_directory&amp;gt; install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing as user&lt;/h3&gt; &#xA;&lt;p&gt;Additionally, user installations are supported if desired.&lt;/p&gt; &#xA;&lt;p&gt;First, configure the build for a user installation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./configure.sh --user-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run &lt;code&gt;make&lt;/code&gt; install&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When installing as a user, this will place the executable &lt;code&gt;umu-run&lt;/code&gt; in &lt;code&gt;$HOME/.local/bin&lt;/code&gt;. You will need to add &lt;code&gt;$HOME/.local/bin&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt; to be able to run umu-launcher this way by exporting the path in your shell&#39;s configuration, for example &lt;code&gt;$HOME/.bash_profile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export PATH=&#34;$HOME/.local/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packaging&lt;/h2&gt; &#xA;&lt;h3&gt;Nobara&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dnf install -y umu-launcher*.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux (AUR)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/umu-launcher&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/umu-launcher?style=flat&amp;amp;label=umu-launcher&#34; alt=&#34;Stable version badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;NixOS&lt;/h3&gt; &#xA;&lt;p&gt;If there is any problem with the flake feel free to open a bug report and tag any of the maintainers&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;maintainers: @beh-10257&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to add umu-launcher as a flake add this to your inputs in &lt;code&gt;flake.nix&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;  inputs = {&#xA;    umu= {&#xA;      url = &#34;git+https://github.com/Open-Wine-Components/umu-launcher/?dir=packaging\/nix&amp;amp;submodules=1&#34;;&#xA;      inputs.nixpkgs.follows = &#34;nixpkgs&#34;;&#xA;    };&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and in your &lt;code&gt;configuration.nix&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{inputs, pkgs, ... }:&#xA;{&#xA;  environment.systemPackages = [  inputs.umu.packages.${pkgs.system}.umu  ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome and appreciated. To get started, install &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;ruff&lt;/a&gt; from your distribution and enable &lt;a href=&#34;https://github.com/astral-sh/ruff/raw/main/crates/ruff_server/README.md&#34;&gt;ruff server&lt;/a&gt; in your editor.&lt;/p&gt; &#xA;&lt;h1&gt;README notes from Valve&#39;s steam-runtime-tools&lt;/h1&gt; &#xA;&lt;h1&gt;Steam Linux Runtime 3.0 (sniper)&lt;/h1&gt; &#xA;&lt;p&gt;This container-based release of the Steam Runtime is used for native Linux games, and for Proton 8.0+.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/container-runtime.md&#34;&gt;container-runtime&lt;/a&gt; for details and the &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steamrt/-/wikis/home&#34;&gt;steamrt wiki&lt;/a&gt; for a list of container-based runtimes.&lt;/p&gt; &#xA;&lt;h2&gt;Release notes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steamrt/-/wikis/Sniper-release-notes&#34;&gt;https://gitlab.steamos.cloud/steamrt/steamrt/-/wikis/Sniper-release-notes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ValveSoftware/steam-runtime/raw/master/doc/steamlinuxruntime-known-issues.md&#34;&gt;https://github.com/ValveSoftware/steam-runtime/blob/master/doc/steamlinuxruntime-known-issues.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ValveSoftware/steam-runtime/raw/master/doc/reporting-steamlinuxruntime-bugs.md&#34;&gt;https://github.com/ValveSoftware/steam-runtime/blob/master/doc/reporting-steamlinuxruntime-bugs.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development and debugging&lt;/h2&gt; &#xA;&lt;p&gt;The runtime&#39;s behaviour can be changed by running the Steam client with environment variables set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;STEAM_LINUX_RUNTIME_LOG=1&lt;/code&gt; will enable logging. Log files appear in &lt;code&gt;SteamLinuxRuntime_sniper/var/slr-*.log&lt;/code&gt;, with filenames containing the app ID. &lt;code&gt;slr-latest.log&lt;/code&gt; is a symbolic link to whichever one was created most recently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;STEAM_LINUX_RUNTIME_VERBOSE=1&lt;/code&gt; produces more detailed log output, either to a log file (if &lt;code&gt;STEAM_LINUX_RUNTIME_LOG=1&lt;/code&gt; is also used) or to the same place as &lt;code&gt;steam&lt;/code&gt; output (otherwise).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;PRESSURE_VESSEL_SHELL=instead&lt;/code&gt; runs an interactive shell in the container instead of running the game.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/distro-assumptions.md&#34;&gt;distribution assumptions&lt;/a&gt; for details of assumptions made about the host operating system, and some advice on debugging the container runtime on new Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;Game developers who are interested in targeting this environment should check the &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/sniper/sdk&#34;&gt;SDK documentation&lt;/a&gt; and &lt;a href=&#34;https://gitlab.steamos.cloud/steamrt/steam-runtime-tools/-/blob/main/docs/slr-for-game-developers.md&#34;&gt;general information for game developers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing and copyright&lt;/h2&gt; &#xA;&lt;p&gt;The Steam Runtime contains many third-party software packages under various open-source licenses.&lt;/p&gt; &#xA;&lt;p&gt;For full source code, please see the &lt;a href=&#34;https://repo.steampowered.com/steamrt-images-sniper/snapshots&#34;&gt;version-numbered subdirectory&lt;/a&gt; corresponding to the version numbers listed in &lt;code&gt;VERSIONS.txt&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>