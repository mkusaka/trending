<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-17T01:37:50Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Jxck-S/plane-notify</title>
    <updated>2022-12-17T01:37:50Z</updated>
    <id>tag:github.com,2022-12-17:/Jxck-S/plane-notify</id>
    <link href="https://github.com/Jxck-S/plane-notify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Notify If a selected plane has taken off or landed using OpenSky or ADS-B Exchange data. Compares older data to newer data to determine if a landing or takeoff has occurred. As well as nav modes, emergency squawk and resolution advisory notifications. Can output to Twitter, Discord, and Pushbullet&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plane-notify&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.codacy.com/manual/Jxck-S/plane-notify?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Jxck-S/plane-notify&amp;amp;utm_campaign=Badge_Grade_Settings&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/c4e1d839eec3468cadfe351d64dc1ac4&#34; alt=&#34;Codacy Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-yellow.svg?sanitize=true&#34; alt=&#34;GPLv3 License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Notify if configured planes have taken off or landed using Python with &lt;a href=&#34;https://opensky-network.org/&#34;&gt;OpenSky&lt;/a&gt;(free) or &lt;a href=&#34;https://www.adsbexchange.com/&#34;&gt;ADSBExchange&lt;/a&gt; Data(paid but much better), outputs location of takeoff location of landing and takeoff by reverse lookup of coordinates.&lt;/p&gt; &#xA;&lt;h3&gt;Discord Output Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/ExImages/DiscordEX.png?raw=true&#34; alt=&#34;Discord Output Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;More examples are in the ExImages folder&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/ExImages&#34;&gt;ExImages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Background&lt;/h3&gt; &#xA;&lt;p&gt;I made this program so I could track Elon Musk&#39;s Jet and share his whereabouts with others on Twitter. &lt;a href=&#34;https://twitter.com/ElonJet&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ElonJet.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; I have now expanded and run multiple accounts for multiple planes, a list of the accounts can be found here &lt;a href=&#34;https://twitter.com/i/lists/1307414615316467715&#34;&gt;plane-notify Twitter List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;m open to any help or suggestions, I realize there are many better ways to improve this program and better ways to get this program to work properly, I&#39;m only a noob. I&#39;ll accept pull requests. If you&#39;d like to discuss join &lt;a href=&#34;https://JacksTech.net/Discord&#34;&gt;https://JacksTech.net/Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/PseudoCode.md&#34;&gt;Algorithm&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Setup / Install&lt;/h2&gt; &#xA;&lt;h3&gt;Make sure Python/PIP is installed&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt update&#xA;apt install python3&#xA;apt install python3-pip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Pipenv and Dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pipenv&#xA;pipenv install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Selenium / ChromeDriver or setup Google Static Maps&lt;/h3&gt; &#xA;&lt;p&gt;Selenium/ChromeDriver is used to take a screenshot of the plane on globe.adsbexchange.com. Or use Google Static Maps, which can cost money if overused(No tutorial use &lt;a href=&#34;https://developers.google.com/maps/documentation/maps-static/get-api-key&#34;&gt;https://developers.google.com/maps/documentation/maps-static/get-api-key&lt;/a&gt; to get to a key).&lt;/p&gt; &#xA;&lt;h4&gt;Chromium&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install chromium&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These output methods once installed can be configured in the planes config you create, using the example plane1.ini&lt;/p&gt; &#xA;&lt;h3&gt;Install Screen to run in the background&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install screen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download / Clone&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install git&#xA;git clone -b multi --single-branch https://github.com/Jxck-S/plane-notify.git&#xA;cd plane-notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure main config file with keys and URLs (mainconf.ini) in the configs directory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;mainconf.ini.example&lt;/code&gt; to &lt;code&gt;mainconf.ini&lt;/code&gt; andCopy &lt;code&gt;plane1.ini.example&lt;/code&gt; to &lt;code&gt;plane1.ini&lt;/code&gt;. &lt;code&gt;plane1.ini&lt;/code&gt; can change names as long as it ends with the ini extension&lt;/li&gt; &#xA; &lt;li&gt;Edit them with nano or vi on the running machine or on your pc and transfer the config to where you will be running the bot&lt;/li&gt; &#xA; &lt;li&gt;Pick between OpenSky and ADS-B Exchange&lt;/li&gt; &#xA; &lt;li&gt;The OpenSky API is free for everyone but the data is not as good as ADS-B Exchange. The ADS-B Exchange API is not free and this program will not work for the Rapid API from ADS-B Exchange. It only works with the API that they give when you have a partnership with ADS-B Exchange. It is not cheap to get the ADS-B Exchange full API, Don&#39;t contact them unless you are ready to pay.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to add support for ADS-B Exchanges RapidAPI feel free to work on it and submit a merge request.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;ve set up multiple planes and want to use ADSB Exchange as your source you must have /all endpoint access to their API or it won&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;Pick the correct API version for ADS-B Exchange.&lt;/li&gt; &#xA; &lt;li&gt;Proxy is if your running multiple programs that use the ADSB Exchange, setup the proxy from lemonodor so you don&#39;t abuse the ADSB Exchange API, otherwise leave enable false.&lt;/li&gt; &#xA; &lt;li&gt;When using OpenSky there are more bugs because I mainly use ADS-B Exchange and work less on the OpenSky Implementation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configure individual planes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An example file is given (plane1.ini) plane config files should be in the configs directory, the program looks for any file in that folder with a .ini extension.&lt;/li&gt; &#xA; &lt;li&gt;Each plane should have its own config&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enter and create a new Screen Session&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;screen -R &amp;lt;name screen whatever you want&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start Program&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipenv run python __main__.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using with Docker&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;docker from their website&lt;/a&gt;. Run the following command from the root of the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running this command, due to the &lt;code&gt;-d&lt;/code&gt; flag the container will be running in the background. To see the logs of the docker container use &lt;code&gt;docker logs CONTAINER&lt;/code&gt; (add &lt;code&gt;-f&lt;/code&gt; to continue streaming the containers output)&lt;/p&gt; &#xA;&lt;h3&gt;Telegram message feature - march/2022&lt;/h3&gt; &#xA;&lt;p&gt;Data obtained can be sent through Telegram to a chat (contact), channel or groups.&lt;/p&gt; &#xA;&lt;p&gt;Creating a Telegram Bot&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start a conversation with &lt;a href=&#34;https://t.me/BotFather&#34;&gt;BotFather&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Send it to the BotFather: /newbot&lt;/li&gt; &#xA; &lt;li&gt;Choose a name for your bot;&lt;/li&gt; &#xA; &lt;li&gt;Choose a username for your bot;&lt;/li&gt; &#xA; &lt;li&gt;Done! You&#39;ll get a token to access the HTTP API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Getting channel or chat (contact) ID&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start a conversation with &lt;a href=&#34;https://t.me/JsonDumpBot&#34;&gt;JsonDumpBot&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;It will reply with a json with information from the message;&lt;/li&gt; &#xA; &lt;li&gt;Go to the channel or chat you want the id and forward a message from there to JsonDumpBot;&lt;/li&gt; &#xA; &lt;li&gt;Find the id in the reply. It&#39;ll look something like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;   {...&#xA;    &#34;forward_from_chat&#34;: {&#xA;          &#34;id&#34;: xxxxxxxxx,&#xA;   ...}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Don&#39;t forget to add the bot as admin in channel so messages can be sent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Getting a group ID&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;https://web.telegram.org&#34;&gt;Telegram web&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Go to group and check the url on address bar of browser;&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s the group ID (-xxxxxxxxx), it&#39;ll look something like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  https://web.telegram.org/z/#-xxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;General Cleanup&lt;/li&gt; &#xA; &lt;li&gt;Restructure project to make it proper currently random files because I didn&#39;t know how to properly structure a project before. (in progress)&lt;/li&gt; &#xA; &lt;li&gt;Add proper logging and service to run the program and remove excessive printing.&lt;/li&gt; &#xA; &lt;li&gt;Better single config YAML, or DB maybe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Jxck-S/plane-notify/multi/References.md&#34;&gt;More References/Documentation&lt;/a&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>dbt-labs/dbt-utils</title>
    <updated>2022-12-17T01:37:50Z</updated>
    <id>tag:github.com,2022-12-17:/dbt-labs/dbt-utils</id>
    <link href="https://github.com/dbt-labs/dbt-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Utility functions for dbt projects.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This &lt;a href=&#34;https://github.com/dbt-labs/dbt&#34;&gt;dbt&lt;/a&gt; package contains macros that can be (re)used across dbt projects.&lt;/p&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://hub.getdbt.com/dbt-labs/dbt_utils/latest/&#34;&gt;dbt Hub&lt;/a&gt; for the latest installation instructions, or &lt;a href=&#34;https://docs.getdbt.com/docs/package-management&#34;&gt;read the docs&lt;/a&gt; for more information on installing packages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#generic-tests&#34;&gt;Generic tests&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#equal_rowcount-source&#34;&gt;equal_rowcount&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#fewer_rows_than-source&#34;&gt;fewer_rows_than&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#equality-source&#34;&gt;equality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#expression_is_true-source&#34;&gt;expression_is_true&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#recency-source&#34;&gt;recency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#at_least_one-source&#34;&gt;at_least_one&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#not_constant-source&#34;&gt;not_constant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#not_empty_string-source&#34;&gt;not_empty_string&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#cardinality_equality-source&#34;&gt;cardinality_equality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#not_null_proportion-source&#34;&gt;not_null_proportion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#not_accepted_values-source&#34;&gt;not_accepted_values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#relationships_where-source&#34;&gt;relationships_where&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#mutually_exclusive_ranges-source&#34;&gt;mutually_exclusive_ranges&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#unique_combination_of_columns-source&#34;&gt;unique_combination_of_columns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#accepted_range-source&#34;&gt;accepted_range&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#macros&#34;&gt;Macros&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#introspective-macros&#34;&gt;Introspective macros&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_column_values-source&#34;&gt;get_column_values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_filtered_columns_in_relation-source&#34;&gt;get_filtered_columns_in_relation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_relations_by_pattern-source&#34;&gt;get_relations_by_pattern&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_relations_by_prefix-source&#34;&gt;get_relations_by_prefix&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_query_results_as_dict-source&#34;&gt;get_query_results_as_dict&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_single_value&#34;&gt;get_single_value&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#sql-generators&#34;&gt;SQL generators&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#date_spine-source&#34;&gt;date_spine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#deduplicate-source&#34;&gt;deduplicate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#haversine_distance-source&#34;&gt;haversine_distance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#group_by-source&#34;&gt;group_by&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#star-source&#34;&gt;star&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#union_relations-source&#34;&gt;union_relations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#generate_series-source&#34;&gt;generate_series&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#generate_surrogate_key-source&#34;&gt;generate_surrogate_key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#safe_add-source&#34;&gt;safe_add&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#safe_divide-source&#34;&gt;safe_divide&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#pivot-source&#34;&gt;pivot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#unpivot-source&#34;&gt;unpivot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#width_bucket-source&#34;&gt;width_bucket&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#web-macros&#34;&gt;Web macros&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_url_parameter-source&#34;&gt;get_url_parameter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_url_host-source&#34;&gt;get_url_host&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#get_url_path-source&#34;&gt;get_url_path&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#cross-database-macros&#34;&gt;Cross-database macros&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#jinja-helpers&#34;&gt;Jinja Helpers&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#pretty_time-source&#34;&gt;pretty_time&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#pretty_log_format-source&#34;&gt;pretty_log_format&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#log_info-source&#34;&gt;log_info&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#slugify-source&#34;&gt;slugify&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#materializations&#34;&gt;Materializations&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#insert_by_period&#34;&gt;insert_by_period&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Generic Tests&lt;/h3&gt; &#xA;&lt;h4&gt;equal_rowcount (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/equal_rowcount.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that two relations have the same number of rows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    tests:&#xA;      - dbt_utils.equal_rowcount:&#xA;          compare_model: ref(&#39;other_table_name&#39;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test supports the &lt;code&gt;group_by_columns&lt;/code&gt; parameter; see &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#grouping-in-tests&#34;&gt;Grouping in tests&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;fewer_rows_than (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/fewer_rows_than.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that the respective model has fewer rows than the model being compared.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    tests:&#xA;      - dbt_utils.fewer_rows_than:&#xA;          compare_model: ref(&#39;other_table_name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test supports the &lt;code&gt;group_by_columns&lt;/code&gt; parameter; see &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#grouping-in-tests&#34;&gt;Grouping in tests&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;equality (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/equality.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts the equality of two relations. Optionally specify a subset of columns to compare.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    tests:&#xA;      - dbt_utils.equality:&#xA;          compare_model: ref(&#39;other_table_name&#39;)&#xA;          compare_columns:&#xA;            - first_column&#xA;            - second_column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;expression_is_true (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/expression_is_true.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that a valid SQL expression is true for all records. This is useful when checking integrity across columns. Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify an outcome based on the application of basic algebraic operations between columns.&lt;/li&gt; &#xA; &lt;li&gt;Verify the length of a column.&lt;/li&gt; &#xA; &lt;li&gt;Verify the truth value of a column.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    tests:&#xA;      - dbt_utils.expression_is_true:&#xA;          expression: &#34;col_a + col_b = total&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The macro accepts an optional argument &lt;code&gt;where&lt;/code&gt; that allows for asserting the &lt;code&gt;expression&lt;/code&gt; on a subset of all records.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    tests:&#xA;      - dbt_utils.expression_is_true:&#xA;          expression: &#34;col_a + col_b = total&#34;&#xA;          config:&#xA;            where: &#34;created_at &amp;gt; &#39;2018-12-31&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: col_a&#xA;        tests:&#xA;          - dbt_utils.expression_is_true:&#xA;              expression: &#39;&amp;gt;= 1&#39;&#xA;      - name: col_b&#xA;        tests:&#xA;          - dbt_utils.expression_is_true:&#xA;              expression: &#39;= 1&#39;&#xA;              config:&#xA;                where: col_a = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;recency (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/recency.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that a timestamp column in the reference model contains data that is at least as recent as the defined date interval.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    tests:&#xA;      - dbt_utils.recency:&#xA;          datepart: day&#xA;          field: created_at&#xA;          interval: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test supports the &lt;code&gt;group_by_columns&lt;/code&gt; parameter; see &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#grouping-in-tests&#34;&gt;Grouping in tests&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;at_least_one (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/at_least_one.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that a column has at least one value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: col_name&#xA;        tests:&#xA;          - dbt_utils.at_least_one&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test supports the &lt;code&gt;group_by_columns&lt;/code&gt; parameter; see &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#grouping-in-tests&#34;&gt;Grouping in tests&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;not_constant (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/not_constant.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that a column does not have the same value in all rows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: column_name&#xA;        tests:&#xA;          - dbt_utils.not_constant&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test supports the &lt;code&gt;group_by_columns&lt;/code&gt; parameter; see &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#grouping-in-tests&#34;&gt;Grouping in tests&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;not_empty_string (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/not_empty_string.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that a column does not have any values equal to &lt;code&gt;&#39;&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: column_name&#xA;        tests:&#xA;          - dbt_utils.not_empty_string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The macro accepts an optional argument &lt;code&gt;trim_whitespace&lt;/code&gt; that controls whether whitespace should be trimmed from the column when evaluating. The default is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: column_name&#xA;        tests:&#xA;          - dbt_utils.not_empty_string:&#xA;              trim_whitespace: false&#xA;              &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;cardinality_equality (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/cardinality_equality.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that values in a given column have exactly the same cardinality as values from a different column in a different model.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: from_column&#xA;        tests:&#xA;          - dbt_utils.cardinality_equality:&#xA;              field: other_column_name&#xA;              to: ref(&#39;other_model_name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;not_null_proportion (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/not_null_proportion.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that the proportion of non-null values present in a column is between a specified range [&lt;code&gt;at_least&lt;/code&gt;, &lt;code&gt;at_most&lt;/code&gt;] where &lt;code&gt;at_most&lt;/code&gt; is an optional argument (default: &lt;code&gt;1.0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: my_model&#xA;    columns:&#xA;      - name: id&#xA;        tests:&#xA;          - dbt_utils.not_null_proportion:&#xA;              at_least: 0.95&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This test supports the &lt;code&gt;group_by_columns&lt;/code&gt; parameter; see &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#grouping-in-tests&#34;&gt;Grouping in tests&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;not_accepted_values (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/not_accepted_values.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that there are no rows that match the given values.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: my_model&#xA;    columns:&#xA;      - name: city&#xA;        tests:&#xA;          - dbt_utils.not_accepted_values:&#xA;              values: [&#39;Barcelona&#39;, &#39;New York&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;relationships_where (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/relationships_where.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts the referential integrity between two relations (same as the core relationships assertions) with an added predicate to filter out some rows from the test. This is useful to exclude records such as test entities, rows created in the last X minutes/hours to account for temporary gaps due to ETL limitations, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: id&#xA;        tests:&#xA;          - dbt_utils.relationships_where:&#xA;              to: ref(&#39;other_model_name&#39;)&#xA;              field: client_id&#xA;              from_condition: id &amp;lt;&amp;gt; &#39;4ca448b8-24bf-4b88-96c6-b1609499c38b&#39;&#xA;              to_condition: created_date &amp;gt;= &#39;2020-01-01&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;mutually_exclusive_ranges (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/mutually_exclusive_ranges.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that for a given lower_bound_column and upper_bound_column, the ranges between the lower and upper bounds do not overlap with the ranges of another row.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  # test that age ranges do not overlap&#xA;  - name: age_brackets&#xA;    tests:&#xA;      - dbt_utils.mutually_exclusive_ranges:&#xA;          lower_bound_column: min_age&#xA;          upper_bound_column: max_age&#xA;          gaps: not_allowed&#xA;&#xA;  # test that each customer can only have one subscription at a time&#xA;  - name: subscriptions&#xA;    tests:&#xA;      - dbt_utils.mutually_exclusive_ranges:&#xA;          lower_bound_column: started_at&#xA;          upper_bound_column: ended_at&#xA;          partition_by: customer_id&#xA;          gaps: required&#xA;&#xA;  # test that each customer can have subscriptions that start and end on the same date&#xA;  - name: subscriptions&#xA;    tests:&#xA;      - dbt_utils.mutually_exclusive_ranges:&#xA;          lower_bound_column: started_at&#xA;          upper_bound_column: ended_at&#xA;          partition_by: customer_id&#xA;          zero_length_range_allowed: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lower_bound_column&lt;/code&gt; (required): The name of the column that represents the lower value of the range. Must be not null.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;upper_bound_column&lt;/code&gt; (required): The name of the column that represents the upper value of the range. Must be not null.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;partition_by&lt;/code&gt; (optional): If a subset of records should be mutually exclusive (e.g. all periods for a single subscription_id are mutually exclusive), use this argument to indicate which column to partition by. &lt;code&gt;default=none&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gaps&lt;/code&gt; (optional): Whether there can be gaps are allowed between ranges. &lt;code&gt;default=&#39;allowed&#39;, one_of=[&#39;not_allowed&#39;, &#39;allowed&#39;, &#39;required&#39;]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zero_length_range_allowed&lt;/code&gt; (optional): Whether ranges can start and end on the same date. &lt;code&gt;default=False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both &lt;code&gt;lower_bound_column&lt;/code&gt; and &lt;code&gt;upper_bound_column&lt;/code&gt; should be not null. If this is not the case in your data source, consider passing a coalesce function to the &lt;code&gt;lower_&lt;/code&gt; and &lt;code&gt;upper_bound_column&lt;/code&gt; arguments, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: subscriptions&#xA;    tests:&#xA;      - dbt_utils.mutually_exclusive_ranges:&#xA;          lower_bound_column: coalesce(started_at, &#39;1900-01-01&#39;)&#xA;          upper_bound_column: coalesce(ended_at, &#39;2099-12-31&#39;)&#xA;          partition_by: customer_id&#xA;          gaps: allowed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Additional `gaps` and `zero_length_range_allowed` examples&lt;/summary&gt; **Understanding the `gaps` argument:** &#xA; &lt;p&gt;Here are a number of examples for each allowed &lt;code&gt;gaps&lt;/code&gt; argument.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;gaps: not_allowed&lt;/code&gt;: The upper bound of one record must be the lower bound of the next record.&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;lower_bound&lt;/th&gt; &#xA;      &lt;th&gt;upper_bound&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;0&lt;/td&gt; &#xA;      &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;1&lt;/td&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;      &lt;td&gt;3&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;gaps: allowed&lt;/code&gt; (default): There may be a gap between the upper bound of one record and the lower bound of the next record.&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;lower_bound&lt;/th&gt; &#xA;      &lt;th&gt;upper_bound&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;0&lt;/td&gt; &#xA;      &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;      &lt;td&gt;3&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;3&lt;/td&gt; &#xA;      &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;gaps: required&lt;/code&gt;: There must be a gap between the upper bound of one record and the lower bound of the next record (common for date ranges).&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;lower_bound&lt;/th&gt; &#xA;      &lt;th&gt;upper_bound&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;0&lt;/td&gt; &#xA;      &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;      &lt;td&gt;3&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;4&lt;/td&gt; &#xA;      &lt;td&gt;5&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Understanding the &lt;code&gt;zero_length_range_allowed&lt;/code&gt; argument:&lt;/strong&gt; Here are a number of examples for each allowed &lt;code&gt;zero_length_range_allowed&lt;/code&gt; argument.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;zero_length_range_allowed: false&lt;/code&gt;: (default) The upper bound of each record must be greater than its lower bound.&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;lower_bound&lt;/th&gt; &#xA;      &lt;th&gt;upper_bound&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;0&lt;/td&gt; &#xA;      &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;1&lt;/td&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;      &lt;td&gt;3&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;zero_length_range_allowed: true&lt;/code&gt;: The upper bound of each record can be greater than or equal to its lower bound.&lt;/p&gt; &#xA;   &lt;table&gt; &#xA;    &lt;thead&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;th&gt;lower_bound&lt;/th&gt; &#xA;      &lt;th&gt;upper_bound&lt;/th&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/thead&gt; &#xA;    &lt;tbody&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;0&lt;/td&gt; &#xA;      &lt;td&gt;1&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;      &lt;td&gt;2&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;     &lt;tr&gt; &#xA;      &lt;td&gt;3&lt;/td&gt; &#xA;      &lt;td&gt;4&lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt; &#xA;   &lt;/table&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;sequential_values (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/sequential_values.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This test confirms that a column contains sequential values. It can be used for both numeric values, and datetime values, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: 2&#xA;&#xA;seeds:&#xA;  - name: util_even_numbers&#xA;    columns:&#xA;      - name: i&#xA;        tests:&#xA;          - dbt_utils.sequential_values:&#xA;              interval: 2&#xA;&#xA;&#xA;  - name: util_hours&#xA;    columns:&#xA;      - name: date_hour&#xA;        tests:&#xA;          - dbt_utils.sequential_values:&#xA;              interval: 1&#xA;              datepart: &#39;hour&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;interval&lt;/code&gt; (default=1): The gap between two sequential values&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;datepart&lt;/code&gt; (default=None): Used when the gaps are a unit of time. If omitted, the test will check for a numeric gap.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This test supports the &lt;code&gt;group_by_columns&lt;/code&gt; parameter; see &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#grouping-in-tests&#34;&gt;Grouping in tests&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h4&gt;unique_combination_of_columns (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/unique_combination_of_columns.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that the combination of columns is unique. For example, the combination of month and product is unique, however neither column is unique in isolation.&lt;/p&gt; &#xA;&lt;p&gt;We generally recommend testing this uniqueness condition by either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;generating a &lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/#generate_surrogate_key-source&#34;&gt;surrogate_key&lt;/a&gt; for your model and testing the uniqueness of said key, OR&lt;/li&gt; &#xA; &lt;li&gt;passing the &lt;code&gt;unique&lt;/code&gt; test a concatenation of the columns (as discussed &lt;a href=&#34;https://docs.getdbt.com/docs/building-a-dbt-project/testing-and-documentation/testing/#testing-expressions&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;However, these approaches can become non-perfomant on large data sets, in which case we recommend using this test instead.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: revenue_by_product_by_month&#xA;  tests:&#xA;    - dbt_utils.unique_combination_of_columns:&#xA;        combination_of_columns:&#xA;          - month&#xA;          - product&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An optional &lt;code&gt;quote_columns&lt;/code&gt; argument (&lt;code&gt;default=false&lt;/code&gt;) can also be used if a column name needs to be quoted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: revenue_by_product_by_month&#xA;  tests:&#xA;    - dbt_utils.unique_combination_of_columns:&#xA;        combination_of_columns:&#xA;          - month&#xA;          - group&#xA;        quote_columns: true&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;accepted_range (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/generic_tests/accepted_range.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Asserts that a column&#39;s values fall inside an expected range. Any combination of &lt;code&gt;min_value&lt;/code&gt; and &lt;code&gt;max_value&lt;/code&gt; is allowed, and the range can be inclusive or exclusive. Provide &lt;a href=&#34;https://docs.getdbt.com/reference/resource-configs/where&#34;&gt;a &lt;code&gt;where&lt;/code&gt; argument&lt;/a&gt; to filter to specific records only.&lt;/p&gt; &#xA;&lt;p&gt;In addition to comparisons to a scalar value, you can also compare to another column&#39;s values. Any data type that supports the &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; operators can be compared, so you could also run tests like checking that all order dates are in the past.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;&#xA;models:&#xA;  - name: model_name&#xA;    columns:&#xA;      - name: user_id&#xA;        tests:&#xA;          - dbt_utils.accepted_range:&#xA;              min_value: 0&#xA;              inclusive: false&#xA;&#xA;      - name: account_created_at&#xA;        tests:&#xA;          - dbt_utils.accepted_range:&#xA;              max_value: &#34;getdate()&#34;&#xA;              #inclusive is true by default&#xA;&#xA;      - name: num_returned_orders&#xA;        tests:&#xA;          - dbt_utils.accepted_range:&#xA;              min_value: 0&#xA;              max_value: &#34;num_orders&#34;&#xA;&#xA;      - name: num_web_sessions&#xA;        tests:&#xA;          - dbt_utils.accepted_range:&#xA;              min_value: 0&#xA;              inclusive: false&#xA;              config:&#xA;                where: &#34;num_orders &amp;gt; 0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Grouping in tests&lt;/h4&gt; &#xA;&lt;p&gt;Certain tests support the optional &lt;code&gt;group_by_columns&lt;/code&gt; argument to provide more granularity in performing tests. This can be useful when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some data checks can only be expressed within a group (e.g. ID values should be unique within a group but can be repeated between groups)&lt;/li&gt; &#xA; &lt;li&gt;Some data checks are more precise when done by group (e.g. not only should table rowcounts be equal but the counts within each group should be equal)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This feature is currently available for the following tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;equal_rowcount()&lt;/li&gt; &#xA; &lt;li&gt;fewer_rows_than()&lt;/li&gt; &#xA; &lt;li&gt;recency()&lt;/li&gt; &#xA; &lt;li&gt;at_least_one()&lt;/li&gt; &#xA; &lt;li&gt;not_constant()&lt;/li&gt; &#xA; &lt;li&gt;sequential_values()&lt;/li&gt; &#xA; &lt;li&gt;non_null_proportion()&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use this feature, the names of grouping variables can be passed as a list. For example, to test for at least one valid value by group, the &lt;code&gt;group_by_columns&lt;/code&gt; argument could be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  - name: data_test_at_least_one&#xA;    columns:&#xA;      - name: field&#xA;        tests:&#xA;          - dbt_utils.at_least_one:&#xA;              group_by_columns: [&#39;customer_segment&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Macros&lt;/h2&gt; &#xA;&lt;h3&gt;Introspective macros&lt;/h3&gt; &#xA;&lt;p&gt;These macros run a query and return the results of the query as objects. They are typically abstractions over the &lt;a href=&#34;https://docs.getdbt.com/reference/dbt-jinja-functions/statement-blocks&#34;&gt;statement blocks&lt;/a&gt; in dbt.&lt;/p&gt; &#xA;&lt;h4&gt;get_column_values (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/get_column_values.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro returns the unique values for a column in a given &lt;a href=&#34;https://docs.getdbt.com/docs/writing-code-in-dbt/class-reference/#relation&#34;&gt;relation&lt;/a&gt; as an array.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;table&lt;/code&gt; (required): a &lt;a href=&#34;https://docs.getdbt.com/reference/dbt-classes#relation&#34;&gt;Relation&lt;/a&gt; (a &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;) that contains the list of columns you wish to select from&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;column&lt;/code&gt; (required): The name of the column you wish to find the column values of&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;where&lt;/code&gt; (optional, default=&lt;code&gt;none&lt;/code&gt;): A where clause to filter the column values by.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;order_by&lt;/code&gt; (optional, default=&lt;code&gt;&#39;count(*) desc&#39;&lt;/code&gt;): How the results should be ordered. The default is to order by &lt;code&gt;count(*) desc&lt;/code&gt;, i.e. decreasing frequency. Setting this as &lt;code&gt;&#39;my_column&#39;&lt;/code&gt; will sort alphabetically, while &lt;code&gt;&#39;min(created_at)&#39;&lt;/code&gt; will sort by when thevalue was first observed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_records&lt;/code&gt; (optional, default=&lt;code&gt;none&lt;/code&gt;): The maximum number of column values you want to return&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default&lt;/code&gt; (optional, default=&lt;code&gt;[]&lt;/code&gt;): The results this macro should return if the relation has not yet been created (and therefore has no column values).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Returns a list of the payment_methods in the stg_payments model_&#xA;{% set payment_methods = dbt_utils.get_column_values(table=ref(&#39;stg_payments&#39;), column=&#39;payment_method&#39;) %}&#xA;&#xA;{% for payment_method in payment_methods %}&#xA;    ...&#xA;{% endfor %}&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Returns the list sorted alphabetically&#xA;{% set payment_methods = dbt_utils.get_column_values(&#xA;        table=ref(&#39;stg_payments&#39;),&#xA;        where=&#34;payment_method = &#39;bank_transfer&#39;&#34;,&#xA;        column=&#39;payment_method&#39;,&#xA;        order_by=&#39;payment_method&#39;&#xA;) %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Returns the list sorted my most recently observed&#xA;{% set payment_methods = dbt_utils.get_column_values(&#xA;        table=ref(&#39;stg_payments&#39;),&#xA;        column=&#39;payment_method&#39;,&#xA;        order_by=&#39;max(created_at) desc&#39;,&#xA;        max_records=50,&#xA;        default=[&#39;bank_transfer&#39;, &#39;coupon&#39;, &#39;credit_card&#39;]&#xA;%}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get_filtered_columns_in_relation (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/get_filtered_columns_in_relation.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro returns an iterable Jinja list of columns for a given &lt;a href=&#34;https://docs.getdbt.com/docs/writing-code-in-dbt/class-reference/#relation&#34;&gt;relation&lt;/a&gt;, (i.e. not from a CTE)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;optionally exclude columns&lt;/li&gt; &#xA; &lt;li&gt;the input values are not case-sensitive (input uppercase or lowercase and it will work!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The native &lt;a href=&#34;https://docs.getdbt.com/reference/dbt-jinja-functions/adapter#get_columns_in_relation&#34;&gt;&lt;code&gt;adapter.get_columns_in_relation&lt;/code&gt; macro&lt;/a&gt; allows you to pull column names in a non-filtered fashion, also bringing along with it other (potentially unwanted) information, such as dtype, char_size, numeric_precision, etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;from&lt;/code&gt; (required): a &lt;a href=&#34;https://docs.getdbt.com/reference/dbt-classes#relation&#34;&gt;Relation&lt;/a&gt; (a &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;) that contains the list of columns you wish to select from&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;except&lt;/code&gt; (optional, default=&lt;code&gt;[]&lt;/code&gt;): The name of the columns you wish to exclude. (case-insensitive)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Returns a list of the columns from a relation, so you can then iterate in a for loop&#xA;{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=ref(&#39;your_model&#39;), except=[&#34;field_1&#34;, &#34;field_2&#34;]) %}&#xA;...&#xA;{% for column_name in column_names %}&#xA;    max({{ column_name }}) ... as max_&#39;{{ column_name }}&#39;,&#xA;{% endfor %}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get_relations_by_pattern (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/get_relations_by_pattern.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;Returns a list of &lt;a href=&#34;https://docs.getdbt.com/docs/writing-code-in-dbt/class-reference/#relation&#34;&gt;Relations&lt;/a&gt; that match a given schema- or table-name pattern.&lt;/p&gt; &#xA;&lt;p&gt;This macro is particularly handy when paired with &lt;code&gt;union_relations&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Returns a list of relations that match schema_pattern%.table&#xA;{% set relations = dbt_utils.get_relations_by_pattern(&#39;schema_pattern%&#39;, &#39;table_pattern&#39;) %}&#xA;&#xA;-- Returns a list of relations that match schema_pattern.table_pattern%&#xA;{% set relations = dbt_utils.get_relations_by_pattern(&#39;schema_pattern&#39;, &#39;table_pattern%&#39;) %}&#xA;&#xA;-- Returns a list of relations as above, excluding any that end in `deprecated`&#xA;{% set relations = dbt_utils.get_relations_by_pattern(&#39;schema_pattern&#39;, &#39;table_pattern%&#39;, &#39;%deprecated&#39;) %}&#xA;&#xA;-- Example using the union_relations macro&#xA;{% set event_relations = dbt_utils.get_relations_by_pattern(&#39;venue%&#39;, &#39;clicks&#39;) %}&#xA;{{ dbt_utils.union_relations(relations = event_relations) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;schema_pattern&lt;/code&gt; (required): The schema pattern to inspect for relations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;table_pattern&lt;/code&gt; (required): The name of the table/view (case insensitive).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exclude&lt;/code&gt; (optional): Exclude any relations that match this table pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;database&lt;/code&gt; (optional, default = &lt;code&gt;target.database&lt;/code&gt;): The database to inspect for relations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt; Generate drop statements for all Relations that match a naming pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;{% set relations_to_drop = dbt_utils.get_relations_by_pattern(&#xA;    schema_pattern=&#39;public&#39;,&#xA;    table_pattern=&#39;dbt\_%&#39;&#xA;) %}&#xA;&#xA;{% set sql_to_execute = [] %}&#xA;&#xA;{{ log(&#39;Statements to run:&#39;, info=True) }}&#xA;&#xA;{% for relation in relations_to_drop %}&#xA;    {% set drop_command -%}&#xA;    -- drop {{ relation.type }} {{ relation }} cascade;&#xA;    {%- endset %}&#xA;    {% do log(drop_command, info=True) %}&#xA;    {% do sql_to_execute.append(drop_command) %}&#xA;{% endfor %}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get_relations_by_prefix (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/get_relations_by_prefix.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This macro will soon be deprecated in favor of the more flexible &lt;code&gt;get_relations_by_pattern&lt;/code&gt; macro (above)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Returns a list of &lt;a href=&#34;https://docs.getdbt.com/docs/writing-code-in-dbt/class-reference/#relation&#34;&gt;Relations&lt;/a&gt; that match a given prefix, with an optional exclusion pattern. It&#39;s particularly handy paired with &lt;code&gt;union_relations&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Returns a list of relations that match schema.prefix%&#xA;{% set relations = dbt_utils.get_relations_by_prefix(&#39;my_schema&#39;, &#39;my_prefix&#39;) %}&#xA;&#xA;-- Returns a list of relations as above, excluding any that end in `deprecated`&#xA;{% set relations = dbt_utils.get_relations_by_prefix(&#39;my_schema&#39;, &#39;my_prefix&#39;, &#39;%deprecated&#39;) %}&#xA;&#xA;-- Example using the union_relations macro&#xA;{% set event_relations = dbt_utils.get_relations_by_prefix(&#39;events&#39;, &#39;event_&#39;) %}&#xA;{{ dbt_utils.union_relations(relations = event_relations) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;schema&lt;/code&gt; (required): The schema to inspect for relations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; (required): The prefix of the table/view (case insensitive)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exclude&lt;/code&gt; (optional): Exclude any relations that match this pattern.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;database&lt;/code&gt; (optional, default = &lt;code&gt;target.database&lt;/code&gt;): The database to inspect for relations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;get_query_results_as_dict (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/get_query_results_as_dict.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro returns a dictionary from a sql query, so that you don&#39;t need to interact with the Agate library to operate on the result&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{% set sql_statement %}&#xA;    select city, state from {{ ref(&#39;users&#39;) }}&#xA;{% endset %}&#xA;&#xA;{%- set places = dbt_utils.get_query_results_as_dict(sql_statement) -%}&#xA;&#xA;select&#xA;&#xA;    {% for city in places[&#39;CITY&#39;] | unique -%}&#xA;      sum(case when city = &#39;{{ city }}&#39; then 1 else 0 end) as users_in_{{ dbt_utils.slugify(city) }},&#xA;    {% endfor %}&#xA;&#xA;    {% for state in places[&#39;STATE&#39;] | unique -%}&#xA;      sum(case when state = &#39;{{ state }}&#39; then 1 else 0 end) as users_in_{{ state }},&#xA;    {% endfor %}&#xA;&#xA;    count(*) as total_total&#xA;&#xA;from {{ ref(&#39;users&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get_single_value (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/get_single_value.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro returns a single value from a sql query, so that you don&#39;t need to interact with the Agate library to operate on the result&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{% set sql_statement %}&#xA;    select max(created_at) from {{ ref(&#39;processed_orders&#39;) }}&#xA;{% endset %}&#xA;&#xA;{%- set newest_processed_order = dbt_utils.get_single_value(sql_statement) -%}&#xA;&#xA;select&#xA;&#xA;    *,&#xA;    last_order_at &amp;gt; &#39;{{ newest_processed_order }}&#39; as has_unprocessed_order&#xA;&#xA;from {{ ref(&#39;users&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQL generators&lt;/h3&gt; &#xA;&lt;p&gt;These macros generate SQL (either a complete query, or a part of a query). They often implement patterns that should be easy in SQL, but for some reason are much harder than they need to be.&lt;/p&gt; &#xA;&lt;h4&gt;date_spine (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/date_spine.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro returns the sql required to build a date spine. The spine will include the &lt;code&gt;start_date&lt;/code&gt; (if it is aligned to the &lt;code&gt;datepart&lt;/code&gt;), but it will not include the &lt;code&gt;end_date&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.date_spine(&#xA;    datepart=&#34;day&#34;,&#xA;    start_date=&#34;cast(&#39;2019-01-01&#39; as date)&#34;,&#xA;    end_date=&#34;cast(&#39;2020-01-01&#39; as date)&#34;&#xA;   )&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;deduplicate (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/deduplicate.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro returns the sql required to remove duplicate rows from a model, source, or CTE.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;relation&lt;/code&gt; (required): a &lt;a href=&#34;https://docs.getdbt.com/reference/dbt-classes#relation&#34;&gt;Relation&lt;/a&gt; (a &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;) or string which identifies the model to deduplicate.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;partition_by&lt;/code&gt; (required): column names (or expressions) to use to identify a set/window of rows out of which to select one as the deduplicated row.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;order_by&lt;/code&gt; (required): column names (or expressions) that determine the priority order of which row should be chosen if there are duplicates (comma-separated string). &lt;em&gt;NB.&lt;/em&gt; if this order by clause results in ties then which row is returned may be nondeterministic across runs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.deduplicate(&#xA;    relation=source(&#39;my_source&#39;, &#39;my_table&#39;),&#xA;    partition_by=&#39;user_id, cast(timestamp as day)&#39;,&#xA;    order_by=&#34;timestamp desc&#34;,&#xA;   )&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.deduplicate(&#xA;    relation=ref(&#39;my_model&#39;),&#xA;    partition_by=&#39;user_id&#39;,&#xA;    order_by=&#39;effective_date desc, effective_sequence desc&#39;,&#xA;   )&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;with my_cte as (&#xA;    select *&#xA;    from {{ source(&#39;my_source&#39;, &#39;my_table&#39;) }}&#xA;    where user_id = 1&#xA;)&#xA;&#xA;{{ dbt_utils.deduplicate(&#xA;    relation=&#39;my_cte&#39;,&#xA;    partition_by=&#39;user_id, cast(timestamp as day)&#39;,&#xA;    order_by=&#39;timestamp desc&#39;,&#xA;   )&#xA;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;haversine_distance (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/haversine_distance.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro calculates the &lt;a href=&#34;http://daynebatten.com/2015/09/latitude-longitude-distance-sql/&#34;&gt;haversine distance&lt;/a&gt; between a pair of x/y coordinates.&lt;/p&gt; &#xA;&lt;p&gt;Optionally takes a &lt;code&gt;unit&lt;/code&gt; string argument (&#39;km&#39; or &#39;mi&#39;) which defaults to miles (imperial system).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.haversine_distance(48.864716, 2.349014, 52.379189, 4.899431) }}&#xA;&#xA;{{ dbt_utils.haversine_distance(&#xA;    lat1=48.864716,&#xA;    lon1=2.349014,&#xA;    lat2=52.379189,&#xA;    lon2=4.899431,&#xA;    unit=&#39;km&#39;&#xA;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lat1&lt;/code&gt; (required): latitude of first location&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lon1&lt;/code&gt; (required): longitude of first location&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lat2&lt;/code&gt; (required): latitude of second location&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lon3&lt;/code&gt; (required): longitude of second location&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unit&lt;/code&gt; (optional, default=&lt;code&gt;&#39;mi&#39;&lt;/code&gt;): one of &lt;code&gt;mi&lt;/code&gt; (miles) or &lt;code&gt;km&lt;/code&gt; (kilometers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;group_by (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/groupby.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro builds a group by statement for fields 1...N&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.group_by(n=3) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Would compile to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;group by 1,2,3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;star (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/star.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro generates a comma-separated list of all fields that exist in the &lt;code&gt;from&lt;/code&gt; relation, excluding any fields listed in the &lt;code&gt;except&lt;/code&gt; argument. The construction is identical to &lt;code&gt;select * from {{ref(&#39;my_model&#39;)}}&lt;/code&gt;, replacing star (&lt;code&gt;*&lt;/code&gt;) with the star macro. This macro also has an optional &lt;code&gt;relation_alias&lt;/code&gt; argument that will prefix all generated fields with an alias (&lt;code&gt;relation_alias&lt;/code&gt;.&lt;code&gt;field_name&lt;/code&gt;). The macro also has optional &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;suffix&lt;/code&gt; arguments. When one or both are provided, they will be concatenated onto each field&#39;s alias in the output (&lt;code&gt;prefix&lt;/code&gt; ~ &lt;code&gt;field_name&lt;/code&gt; ~ &lt;code&gt;suffix&lt;/code&gt;). NB: This prevents the output from being used in any context other than a select statement. This macro also has an optional &lt;code&gt;quote_identifiers&lt;/code&gt; argument that will encase the selected columns and their aliases in double quotes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;from&lt;/code&gt; (required): a &lt;a href=&#34;https://docs.getdbt.com/reference/dbt-classes#relation&#34;&gt;Relation&lt;/a&gt; (a &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;) that contains the list of columns you wish to select from&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;except&lt;/code&gt; (optional, default=&lt;code&gt;[]&lt;/code&gt;): The name of the columns you wish to exclude. (case-insensitive)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;relation_alias&lt;/code&gt; (optional, default=&lt;code&gt;&#39;&#39;&lt;/code&gt;): will prefix all generated fields with an alias (&lt;code&gt;relation_alias&lt;/code&gt;.&lt;code&gt;field_name&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix&lt;/code&gt; (optional, default=&lt;code&gt;&#39;&#39;&lt;/code&gt;): will prefix the output &lt;code&gt;field_name&lt;/code&gt; (&lt;code&gt;field_name as prefix_field_name&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suffix&lt;/code&gt; (optional, default=&lt;code&gt;&#39;&#39;&lt;/code&gt;): will suffix the output &lt;code&gt;field_name&lt;/code&gt; (&lt;code&gt;field_name as field_name_suffix&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quote_identifiers&lt;/code&gt; (optional, default=&lt;code&gt;True&lt;/code&gt;): will encase selected columns and aliases in double quotes (&lt;code&gt;&#34;field_name&#34; as &#34;field_name&#34;&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select&#xA;  {{ dbt_utils.star(ref(&#39;my_model&#39;)) }}&#xA;from {{ ref(&#39;my_model&#39;) }}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select&#xA;  {{ dbt_utils.star(from=ref(&#39;my_model&#39;), quote_identifiers=False) }}&#xA;from {{ ref(&#39;my_model&#39;) }}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select&#xA;{{ dbt_utils.star(from=ref(&#39;my_model&#39;), except=[&#34;exclude_field_1&#34;, &#34;exclude_field_2&#34;]) }}&#xA;from {{ ref(&#39;my_model&#39;) }}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select&#xA;{{ dbt_utils.star(from=ref(&#39;my_model&#39;), except=[&#34;exclude_field_1&#34;, &#34;exclude_field_2&#34;], prefix=&#34;max_&#34;) }}&#xA;from {{ ref(&#39;my_model&#39;) }}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;union_relations (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/union.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro unions together an array of &lt;a href=&#34;https://docs.getdbt.com/docs/writing-code-in-dbt/class-reference/#relation&#34;&gt;Relations&lt;/a&gt;, even when columns have differing orders in each Relation, and/or some columns are missing from some relations. Any columns exclusive to a subset of these relations will be filled with &lt;code&gt;null&lt;/code&gt; where not present. A new column (&lt;code&gt;_dbt_source_relation&lt;/code&gt;) is also added to indicate the source for each record.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.union_relations(&#xA;    relations=[ref(&#39;my_model&#39;), source(&#39;my_source&#39;, &#39;my_table&#39;)],&#xA;    exclude=[&#34;_loaded_at&#34;]&#xA;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;relations&lt;/code&gt; (required): An array of &lt;a href=&#34;https://docs.getdbt.com/docs/writing-code-in-dbt/class-reference/#relation&#34;&gt;Relations&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exclude&lt;/code&gt; (optional): A list of column names that should be excluded from the final query.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;include&lt;/code&gt; (optional): A list of column names that should be included in the final query. Note the &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; arguments are mutually exclusive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;column_override&lt;/code&gt; (optional): A dictionary of explicit column type overrides, e.g. &lt;code&gt;{&#34;some_field&#34;: &#34;varchar(100)&#34;}&lt;/code&gt;.``&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;source_column_name&lt;/code&gt; (optional, &lt;code&gt;default=&#34;_dbt_source_relation&#34;&lt;/code&gt;): The name of the column that records the source of this row. Pass &lt;code&gt;None&lt;/code&gt; to omit this column from the results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;where&lt;/code&gt; (optional): Filter conditions to include in the &lt;code&gt;where&lt;/code&gt; clause.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;generate_series (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/generate_series.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro implements a cross-database mechanism to generate an arbitrarily long list of numbers. Specify the maximum number you&#39;d like in your list and it will create a 1-indexed SQL result set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.generate_series(upper_bound=1000) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;generate_surrogate_key (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/generate_surrogate_key.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro implements a cross-database way to generate a hashed surrogate key using the fields specified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.generate_surrogate_key([&#39;field_a&#39;, &#39;field_b&#39;[,...]]) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A precursor to this macro, &lt;code&gt;surrogate_key()&lt;/code&gt;, treated nulls and blanks strings the same. If you need to enable this incorrect behaviour for backward compatibility reasons, add the following variable to your &lt;code&gt;dbt_project.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;#dbt_project.yml&#xA;vars:&#xA;  surrogate_key_treat_nulls_as_empty_strings: true #turn on legacy behaviour&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;safe_add (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/safe_add.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro implements a cross-database way to sum nullable fields using the fields specified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.safe_add(&#39;field_a&#39;, &#39;field_b&#39;[,...]) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;safe_divide (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/cross_db_utils/safe_divide.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro performs division but returns null if the denominator is 0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;numerator&lt;/code&gt; (required): The number or SQL expression you want to divide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;denominator&lt;/code&gt; (required): The number or SQL expression you want to divide by.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.safe_divide(&#39;numerator&#39;, &#39;denominator&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;pivot (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/pivot.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro pivots values from rows to columns.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.pivot(&amp;lt;column&amp;gt;, &amp;lt;list of values&amp;gt;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Input: orders&#xA;&#xA;| size | color |&#xA;|------|-------|&#xA;| S    | red   |&#xA;| S    | blue  |&#xA;| S    | red   |&#xA;| M    | red   |&#xA;&#xA;select&#xA;  size,&#xA;  {{ dbt_utils.pivot(&#xA;      &#39;color&#39;,&#xA;      dbt_utils.get_column_values(ref(&#39;orders&#39;), &#39;color&#39;)&#xA;  ) }}&#xA;from {{ ref(&#39;orders&#39;) }}&#xA;group by size&#xA;&#xA;Output:&#xA;&#xA;| size | red | blue |&#xA;|------|-----|------|&#xA;| S    | 2   | 1    |&#xA;| M    | 1   | 0    |&#xA;&#xA;Input: orders&#xA;&#xA;| size | color | quantity |&#xA;|------|-------|----------|&#xA;| S    | red   | 1        |&#xA;| S    | blue  | 2        |&#xA;| S    | red   | 4        |&#xA;| M    | red   | 8        |&#xA;&#xA;select&#xA;  size,&#xA;  {{ dbt_utils.pivot(&#xA;      &#39;color&#39;,&#xA;      dbt_utils.get_column_values(ref(&#39;orders&#39;), &#39;color&#39;),&#xA;      agg=&#39;sum&#39;,&#xA;      then_value=&#39;quantity&#39;,&#xA;      prefix=&#39;pre_&#39;,&#xA;      suffix=&#39;_post&#39;&#xA;  ) }}&#xA;from {{ ref(&#39;orders&#39;) }}&#xA;group by size&#xA;&#xA;Output:&#xA;&#xA;| size | pre_red_post | pre_blue_post |&#xA;|------|--------------|---------------|&#xA;| S    | 5            | 2             |&#xA;| M    | 8            | 0             |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;column&lt;/code&gt;: Column name, required&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;values&lt;/code&gt;: List of row values to turn into columns, required&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;alias&lt;/code&gt;: Whether to create column aliases, default is True&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;agg&lt;/code&gt;: SQL aggregation function, default is sum&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmp&lt;/code&gt;: SQL value comparison, default is =&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;: Column alias prefix, default is blank&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suffix&lt;/code&gt;: Column alias postfix, default is blank&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;then_value&lt;/code&gt;: Value to use if comparison succeeds, default is 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;else_value&lt;/code&gt;: Value to use if comparison fails, default is 0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quote_identifiers&lt;/code&gt;: Whether to surround column aliases with double quotes, default is true&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;unpivot (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/sql/unpivot.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro &#34;un-pivots&#34; a table from wide format to long format. Functionality is similar to pandas &lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.melt.html&#34;&gt;melt&lt;/a&gt; function. Boolean values are replaced with the strings &#39;true&#39;|&#39;false&#39;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.unpivot(&#xA;  relation=ref(&#39;table_name&#39;),&#xA;  cast_to=&#39;datatype&#39;,&#xA;  exclude=[&amp;lt;list of columns to exclude from unpivot&amp;gt;],&#xA;  remove=[&amp;lt;list of columns to remove&amp;gt;],&#xA;  field_name=&amp;lt;column name for field&amp;gt;,&#xA;  value_name=&amp;lt;column name for value&amp;gt;&#xA;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Input: orders&#xA;&#xA;| date       | size | color | status     |&#xA;|------------|------|-------|------------|&#xA;| 2017-01-01 | S    | red   | complete   |&#xA;| 2017-03-01 | S    | red   | processing |&#xA;&#xA;{{ dbt_utils.unpivot(ref(&#39;orders&#39;), cast_to=&#39;varchar&#39;, exclude=[&#39;date&#39;,&#39;status&#39;]) }}&#xA;&#xA;Output:&#xA;&#xA;| date       | status     | field_name | value |&#xA;|------------|------------|------------|-------|&#xA;| 2017-01-01 | complete   | size       | S     |&#xA;| 2017-01-01 | complete   | color      | red   |&#xA;| 2017-03-01 | processing | size       | S     |&#xA;| 2017-03-01 | processing | color      | red   |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;relation&lt;/code&gt;: The &lt;a href=&#34;https://docs.getdbt.com/docs/writing-code-in-dbt/class-reference/#relation&#34;&gt;Relation&lt;/a&gt; to unpivot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cast_to&lt;/code&gt;: The data type to cast the unpivoted values to, default is varchar&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exclude&lt;/code&gt;: A list of columns to exclude from the unpivot operation but keep in the resulting table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt;: A list of columns to remove from the resulting table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;field_name&lt;/code&gt;: column name in the resulting table for field&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;value_name&lt;/code&gt;: column name in the resulting table for value&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;width_bucket (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/cross_db_utils/width_bucket.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro is modeled after the &lt;code&gt;width_bucket&lt;/code&gt; function natively available in Snowflake.&lt;/p&gt; &#xA;&lt;p&gt;From the original Snowflake &lt;a href=&#34;https://docs.snowflake.net/manuals/sql-reference/functions/width_bucket.html&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Constructs equi-width histograms, in which the histogram range is divided into intervals of identical size, and returns the bucket number into which the value of an expression falls, after it has been evaluated. The function returns an integer value or null (if any input is null). Notes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Args:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;expr&lt;/code&gt;: The expression for which the histogram is created. This expression must evaluate to a numeric value or to a value that can be implicitly converted to a numeric value.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;min_value&lt;/code&gt; and &lt;code&gt;max_value&lt;/code&gt;: The low and high end points of the acceptable range for the expression. The end points must also evaluate to numeric values and not be equal.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;num_buckets&lt;/code&gt;: The desired number of buckets; must be a positive integer value. A value from the expression is assigned to each bucket, and the function then returns the corresponding bucket number.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When an expression falls outside the range, the function returns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt; if the expression is less than min_value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;num_buckets + 1&lt;/code&gt; if the expression is greater than or equal to max_value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.width_bucket(expr, min_value, max_value, num_buckets) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web macros&lt;/h3&gt; &#xA;&lt;h4&gt;get_url_parameter (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/web/get_url_parameter.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro extracts a url parameter from a column containing a url.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.get_url_parameter(field=&#39;page_url&#39;, url_parameter=&#39;utm_source&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get_url_host (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/web/get_url_host.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro extracts a hostname from a column containing a url.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.get_url_host(field=&#39;page_url&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;get_url_path (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/web/get_url_path.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro extracts a page path from a column containing a url.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ dbt_utils.get_url_path(field=&#39;page_url&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Cross-database macros&lt;/h3&gt; &#xA;&lt;p&gt;These macros were removed from &lt;code&gt;dbt_utils&lt;/code&gt; version 1.0, as they have been implemented in dbt Core instead. See &lt;a href=&#34;https://docs.getdbt.com/reference/dbt-jinja-functions/cross-database-macros&#34;&gt;https://docs.getdbt.com/reference/dbt-jinja-functions/cross-database-macros&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Jinja Helpers&lt;/h3&gt; &#xA;&lt;h4&gt;pretty_time (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/jinja_helpers/pretty_time.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro returns a string of the current timestamp, optionally taking a datestring format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;{#- This will return a string like &#39;14:50:34&#39; -#}&#xA;{{ dbt_utils.pretty_time() }}&#xA;&#xA;{#- This will return a string like &#39;2019-05-02 14:50:34&#39; -#}&#xA;{{ dbt_utils.pretty_time(format=&#39;%Y-%m-%d %H:%M:%S&#39;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;pretty_log_format (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/jinja_helpers/pretty_log_format.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro formats the input in a way that will print nicely to the command line when you &lt;code&gt;log&lt;/code&gt; it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;{#- This will return a string like:&#xA;&#34;11:07:31 + my pretty message&#34;&#xA;-#}&#xA;&#xA;{{ dbt_utils.pretty_log_format(&#34;my pretty message&#34;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;log_info (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/jinja_helpers/log_info.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro logs a formatted message (with a timestamp) to the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;{{ dbt_utils.log_info(&#34;my pretty message&#34;) }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;11:07:28 | 1 of 1 START table model analytics.fct_orders........................ [RUN]&#xA;11:07:31 + my pretty message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;slugify (&lt;a href=&#34;https://raw.githubusercontent.com/dbt-labs/dbt-utils/main/macros/jinja_helpers/slugify.sql&#34;&gt;source&lt;/a&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;This macro is useful for transforming Jinja strings into &#34;slugs&#34;, and can be useful when using a Jinja object as a column name, especially when that Jinja object is not hardcoded.&lt;/p&gt; &#xA;&lt;p&gt;For this example, let&#39;s pretend that we have payment methods in our payments table like &lt;code&gt;[&#39;venmo App&#39;, &#39;ca$h-money&#39;, &#39;1337pay&#39;]&lt;/code&gt;, which we can&#39;t use as a column name due to the spaces and special characters. This macro does its best to strip those out in a sensible way: &lt;code&gt;[&#39;venmo_app&#39;, &#39;cah_money&#39;, &#39;_1337pay&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;{%- set payment_methods = dbt_utils.get_column_values(&#xA;    table=ref(&#39;raw_payments&#39;),&#xA;    column=&#39;payment_method&#39;&#xA;) -%}&#xA;&#xA;select&#xA;order_id,&#xA;{%- for payment_method in payment_methods %}&#xA;sum(case when payment_method = &#39;{{ payment_method }}&#39; then amount end)&#xA;  as {{ dbt_utils.slugify(payment_method) }}_amount,&#xA;&#xA;{% endfor %}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select&#xA;order_id,&#xA;&#xA;sum(case when payment_method = &#39;Venmo App&#39; then amount end)&#xA;  as venmo_app_amount,&#xA;&#xA;sum(case when payment_method = &#39;ca$h money&#39; then amount end)&#xA;  as cah_money_amount,&#xA;&#xA;sum(case when payment_method = &#39;1337pay&#39; then amount end)&#xA;  as _1337pay_amount,&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Materializations&lt;/h3&gt; &#xA;&lt;h4&gt;insert_by_period&lt;/h4&gt; &#xA;&lt;p&gt;In dbt_utils v1.0, this materialization moved to the &lt;a href=&#34;https://github.com/dbt-labs/dbt-labs-experimental-features/tree/main/insert_by_period&#34;&gt;experimental features repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Reporting bugs and contributing code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Want to report a bug or request a feature? Let us know in the &lt;code&gt;#package-ecosystem&lt;/code&gt; channel on &lt;a href=&#34;https://getdbt.com/community&#34;&gt;Slack&lt;/a&gt;, or open &lt;a href=&#34;https://github.com/dbt-labs/dbt-utils/issues/new&#34;&gt;an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Want to help us build dbt-utils? Check out the &lt;a href=&#34;https://github.com/dbt-labs/dbt-utils/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Open a Pull Request with 1) your changes, 2) updated documentation for the &lt;code&gt;README.md&lt;/code&gt; file, and 3) a working integration test.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Dispatch macros&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is primarily relevant to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Users and maintainers of community-supported &lt;a href=&#34;https://docs.getdbt.com/docs/available-adapters&#34;&gt;adapter plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Users who wish to override a low-lying &lt;code&gt;dbt_utils&lt;/code&gt; macro with a custom implementation, and have that implementation used by other &lt;code&gt;dbt_utils&lt;/code&gt; macros&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use Postgres, Redshift, Snowflake, or BigQuery, this likely does not apply to you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.getdbt.com/reference/dbt-jinja-functions/adapter#dispatch&#34;&gt;&lt;code&gt;adapter.dispatch()&lt;/code&gt;&lt;/a&gt; provides a reliable way to define different implementations of the same macro across different databases.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;dbt_project.yml&lt;/code&gt;, you can define a project-level &lt;code&gt;dispatch&lt;/code&gt; config that enables an &#34;override&#34; setting for all dispatched macros. When dbt searches for implementations of a macro in the &lt;code&gt;dbt_utils&lt;/code&gt; namespace, it will search through your list of packages instead of just looking in the &lt;code&gt;dbt_utils&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;Set the config in &lt;code&gt;dbt_project.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;dispatch:&#xA;  - macro_namespace: dbt_utils&#xA;    search_order:&#xA;      - first_package_to_search    # likely the name of your root project&#xA;      - second_package_to_search   # could be a &#34;shim&#34; package, such as spark_utils&#xA;      - dbt_utils                  # always include dbt_utils as the last place to search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If overriding a dispatched macro with a custom implementation in your own project&#39;s &lt;code&gt;macros/&lt;/code&gt; directory, you must name your custom macro with a prefix: either &lt;code&gt;default__&lt;/code&gt; (note the two underscores), or the name of your adapter followed by two underscores. For example, if you&#39;re running on Postgres and wish to override the behavior of &lt;code&gt;dbt_utils.safe_add&lt;/code&gt; (such that other macros will use your version instead), you can do this by defining a macro called either &lt;code&gt;default__safe_add&lt;/code&gt; or &lt;code&gt;postgres__safe_add&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say we have the config defined above, and we&#39;re running on Spark. When dbt goes to dispatch &lt;code&gt;dbt_utils.safe_add&lt;/code&gt;, it will search for macros the following in order:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;first_package_to_search.spark__safe_add&#xA;first_package_to_search.default__safe_add&#xA;second_package_to_search.spark__safe_add&#xA;second_package_to_search.default__safe_add&#xA;dbt_utils.spark__safe_add&#xA;dbt_utils.default__safe_add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Getting started with dbt&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.getdbt.com/docs/introduction&#34;&gt;What is dbt&lt;/a&gt;?&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://docs.getdbt.com/docs/about/viewpoint&#34;&gt;dbt viewpoint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.getdbt.com/docs/get-started/getting-started/overview&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://www.getdbt.com/community/&#34;&gt;chat&lt;/a&gt; on Slack for live questions and support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Everyone interacting in the dbt project&#39;s codebases, issue trackers, chat rooms, and mailing lists is expected to follow the &lt;a href=&#34;https://www.pypa.io/en/latest/code-of-conduct/&#34;&gt;PyPA Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>howarder3/GPT-Linebot-python-flask-on-vercel</title>
    <updated>2022-12-17T01:37:50Z</updated>
    <id>tag:github.com,2022-12-17:/howarder3/GPT-Linebot-python-flask-on-vercel</id>
    <link href="https://github.com/howarder3/GPT-Linebot-python-flask-on-vercel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GPT-Linebot using python flask for vercel&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GPT-Linebot using python flask on vercel&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;last updated: 2022/12/15&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;本文同步更新至我的個人網站：&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/&#34;&gt;【Side Project】(全圖文教學) 用 Python flask 實作類似 ChatGPT 的 Linebot，並部屬至 vercel 上&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;本篇教學無經驗的新手也可學習，無須寫任何程式。&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;無經驗預計 15 ~ 20 分鐘都可以完成。老手最快可能 5 分鐘就搞定&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;這是使用 python flask 套件撰寫的 gpt-linebot&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;不需寫 code&lt;/code&gt;，只需去網頁設定一些內容，新手 15 分鐘內也能建立自己的 gpt-linebot&lt;/li&gt; &#xA; &lt;li&gt;Why flask? 簡單好用，且支援 vercel&lt;/li&gt; &#xA; &lt;li&gt;Why vercel? &lt;code&gt;免費&lt;/code&gt;！！！免費額度就很夠一般使用，是 heroku 不再免費後的好選擇&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;註：ChatGPT 與 gpt 是同樣任務的模型，而目前透過 API 只能使用到 GPT-3 (本程式使用的方法)&lt;/p&gt; &#xA; &lt;p&gt;而非 ChatGPT 使用的 GPT-3.5&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;安裝步驟&lt;/h1&gt; &#xA;&lt;p&gt;主要會有四個地方要去：(&lt;code&gt;這部份不看也沒關係，以下照著做就可以了！&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;我的 github repo：透過 python 串接 openai 的 API，並透過 linebot sdk 提供簡單的訊息回復&lt;/li&gt; &#xA; &lt;li&gt;openai：申請 OpenAI 的 API KEY&lt;/li&gt; &#xA; &lt;li&gt;line developer：創建機器人&lt;/li&gt; &#xA; &lt;li&gt;vercel：提供訊息回復，雖然是 serverless 但已經很符合我們的需求&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;step 1. 至 github fork 專案&lt;/h2&gt; &#xA;&lt;p&gt;去我這個專案的 &lt;a href=&#34;https://github.com/howarder3/GPT-Linebot-python-flask-on-vercel&#34; title=&#34;github repo&#34;&gt;github repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;按下面的按鈕， fork 一份檔案到自己的帳號底下，等等我們會使用到&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;可以的話，旁邊的 Star 也幫我按一下，是對創作者最大的鼓勵！&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/attachment/%e6%88%aa%e5%9c%96-2022-12-13-%e4%b8%8b%e5%8d%887-27-12/&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%887.27.12.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;step 2. 申請 OpenAI 的 API KEY&lt;/h2&gt; &#xA;&lt;p&gt;可以直接去&lt;a href=&#34;https://beta.openai.com/docs/quickstart/build-your-application&#34; title=&#34;這裡&#34;&gt;這裡&lt;/a&gt;，一直往下拉，找到這個按鈕，並生成一個 API KEY&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/?attachment_id=8016&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%886.11.22.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;請務必複製下來，這個 KEY 我們取名為 &lt;code&gt;OPENAI_API_KEY &lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;step 3. 去 line developer 建立一個新的機器人&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;這邊熟悉的人動作應該超快，可以略過，&lt;/p&gt; &#xA; &lt;p&gt;以下教學是針對完全沒經驗的新手&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我們先到&lt;a href=&#34;https://developers.line.biz/zh-hant/&#34; title=&#34; line developer 的首頁&#34;&gt; line developer 的首頁&lt;/a&gt;註冊一下， 註冊完後，點選 Messaging API。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/attachment/%e6%88%aa%e5%9c%96-2022-12-13-%e4%b8%8b%e5%8d%886-32-33/&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%886.32.33.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;step 3-1. 創建新的 channel&lt;/h3&gt; &#xA;&lt;p&gt;第一次使用要創建一個新的 provider 與 channel， 一個 provider 可以有很多 channel， 「&lt;code&gt;而一個 channel 對應的就是一個 chatbot&lt;/code&gt;」， 這邊以下都照自己想要的名字跟事實填就好。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/?attachment_id=8019&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%886.36.49.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;step 3-2. 在 Basic Settings 的分頁，取得 LINE_CHANNEL_SECRET&lt;/h3&gt; &#xA;&lt;p&gt;在 Basic Settings 的分頁，往下找到 channel secret&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/?attachment_id=8021&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%886.40.36.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;請務必複製下來，這個 KEY 我們取名為 &lt;code&gt;LINE_CHANNEL_SECRET &lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;step 3-3. 在 Messaging API 的分頁，進行一些機器人初始設定 (並加機器人好友)&lt;/h3&gt; &#xA;&lt;p&gt;再來我們去上方，選擇 Messaging API 的分頁， 我們先關閉一些可能會吵的東西 (預設的自動回復之類的)，&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;這邊可以順便掃一下 QR code 或透過 line ID ，加機器人的 line 好友！　&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;我自己是設定如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/?attachment_id=8022&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%886.41.06.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;允許加入群組要注意使用 openai 額度可能會超快&lt;/li&gt; &#xA; &lt;li&gt;「&lt;code&gt;自動回復訊息必關！！！&lt;/code&gt;」，那是 line 的自動回復，不是我們要的&lt;/li&gt; &#xA; &lt;li&gt;歡迎訊息也可以關，這邊我是開著&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;step 3-4. 在 Messaging API 的分頁，取得 LINE_CHANNEL_ACCESS_TOKEN&lt;/h3&gt; &#xA;&lt;p&gt;最後，在 Messaging API 的分頁的最下面， 找到 channel access token，點選右邊發行，並把他記下來。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/?attachment_id=8020&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%886.41.14.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;請務必複製下來，這個 KEY 我們取名為 &lt;code&gt;LINE_CHANNEL_ACCESS_TOKEN &lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;請不要把這金鑰分享給別人，別人可能會拿去作壞事！！！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;然後這邊網頁先不要關，等等還會用到！！！！&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;step 4. 去 vercel 設定相關的環境變數，完成啟動機器人！&lt;/h2&gt; &#xA;&lt;h3&gt;step 4-1. 新增 project&lt;/h3&gt; &#xA;&lt;p&gt;去 &lt;a href=&#34;https://vercel.com/&#34; title=&#34;vercel 首頁&#34;&gt;vercel 首頁&lt;/a&gt;，add new project&lt;/p&gt; &#xA;&lt;p&gt;Import Git Repository，選擇你剛剛 fork 的專案 import&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/attachment/%e6%88%aa%e5%9c%96-2022-12-13-%e4%b8%8b%e5%8d%887-39-19/&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%887.39.19.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;step 4-2. 設定環境變數&lt;/h3&gt; &#xA;&lt;p&gt;選擇「Environment Variables」，把我們剛剛紀錄的 OPENAI_API_KEY、LINE_CHANNEL_SECRET、LINE_CHANNEL_ACCESS_TOKEN 都設定至環境變數， 按下 Deploy 等待一下就完成囉！&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/attachment/%e6%88%aa%e5%9c%96-2022-12-13-%e4%b8%8b%e5%8d%887-46-13/&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%887.46.13.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;完成後我們可以看到會有以下的三個環境變數&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/attachment/%e6%88%aa%e5%9c%96-2022-12-13-%e4%b8%8b%e5%8d%887-47-23/&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%887.47.23.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;step 4-3. deploy 完成後，可以簡單確認是否有成功&lt;/h3&gt; &#xA;&lt;p&gt;去部屬完成的 vercel 頁面，紅框處可以拿到我們要用的網址，&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;把這個網址複製下來，等等要用&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;這個網址我們也可以點開，應該會出現我們在程式預先寫好的 Hello, World! (應該是一個只有 Hello, World! 的網頁) 我們可以藉此確定程式有正常的被 Deploy&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/attachment/%e6%88%aa%e5%9c%96-2022-12-14-%e4%b8%8a%e5%8d%881-25-48/&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-14-%E4%B8%8A%E5%8D%881.25.48.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;step 5. 設定 webhook&lt;/h2&gt; &#xA;&lt;p&gt;回到 line developer 的 Messaging API 分頁， 將剛剛 step 4-3. 的網址填入，並在後面加上 「/webhook」，例如下圖 可以用 Verify 看看有沒有問題，通常應該會是寫「Success」&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;「&lt;code&gt;記得開啟下面的使用 Use webhook &lt;/code&gt;」&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/portfolio/personal_project/gpt-linebot-python-flask-for-vercel/attachment/%e6%88%aa%e5%9c%96-2022-12-13-%e4%b8%8b%e5%8d%889-29-23/&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-13-%E4%B8%8B%E5%8D%889.29.23.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;完成圖範例&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/?attachment_id=8017&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-12-%E4%B8%8B%E5%8D%8811.24.29.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.wongwonggoods.com/?attachment_id=8018&#34;&gt;&lt;img src=&#34;https://www.wongwonggoods.com/wp-content/uploads/2022/12/%E6%88%AA%E5%9C%96-2022-12-12-%E4%B8%8B%E5%8D%8811.21.45.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;此 linebot 的其他一些內建功能&lt;/h1&gt; &#xA;&lt;h2&gt;機器人「說話開關」&lt;/h2&gt; &#xA;&lt;p&gt;這個本來是我除錯用的，因為有時候回復一些怪東西會很吵， 意外得到好評，所以這個功能就被保留下來&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;輸入「說話」：機器人開啟說話模式，預設是開啟的&lt;/li&gt; &#xA; &lt;li&gt;輸入「閉嘴」：機器人暫停說話模式 (&lt;code&gt;但一段時間會自動再起動&lt;/code&gt;)，閉嘴後將不會對任何對話有反應。輸入「說話」可再次開啟對話。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;其他環境參數功能&lt;/h2&gt; &#xA;&lt;p&gt;參考自 &lt;a href=&#34;https://github.com/memochou1993/gpt-ai-assistant?fbclid=IwAR25uqLdKoDKEQd591fSjyM2sDJJR3Xb-VgcXDIFV_7i3RMWWv2oiyG26RQ&#34;&gt;memochou1993/gpt-ai-assistant&lt;/a&gt; 的作法，下列參數也可藉由設定 vercel 的環境變數來作調控。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;環境變數名稱&lt;/th&gt; &#xA;   &lt;th&gt;預設值&lt;/th&gt; &#xA;   &lt;th&gt;說明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAI_MODEL&lt;/td&gt; &#xA;   &lt;td&gt;text-davinci-003&lt;/td&gt; &#xA;   &lt;td&gt;請參考 OpenAI 對 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions/create#completions/create-model&#34;&gt;model&lt;/a&gt; 的敘述&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAI_TEMPERATURE&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;請參考 OpenAI 對 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions/create#completions/create-temperature&#34;&gt;temperature&lt;/a&gt; 的敘述&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAI_FREQUENCY_PENALTY&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;請參考 OpenAI 對 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty&#34;&gt;frequency_penalty&lt;/a&gt; 的敘述&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAI_PRESENCE_PENALTY&lt;/td&gt; &#xA;   &lt;td&gt;0.6&lt;/td&gt; &#xA;   &lt;td&gt;請參考 OpenAI 對 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty&#34;&gt;presence_penalty&lt;/a&gt; 的敘述&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPENAI_MAX_TOKENS&lt;/td&gt; &#xA;   &lt;td&gt;240&lt;/td&gt; &#xA;   &lt;td&gt;請參考 OpenAI 對 &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions/create#completions/create-max_tokens&#34;&gt;max_tokens&lt;/a&gt; 的敘述&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MSG_LIST_LIMIT&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;prompt 參數往回參照的句數&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;INIT_LANGUAGE&lt;/td&gt; &#xA;   &lt;td&gt;zh&lt;/td&gt; &#xA;   &lt;td&gt;決定初始語言，可設置為 &#34;zh&#34; 或 &#34;en&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;TODO List &amp;amp; Future Work&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;目前基本功能都已經有了，然後我比較忙可能沒空一直更新QQ&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;還有很多可以優化的地方，歡迎提供 PR！&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (已調整完成) 回復文字感覺不是很順 (可能需要研究一下 API 使用方法)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; (已調整完成) 記憶功能 ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;目前算法是「&lt;code&gt;紀錄使用者與 AI 的前20句對話&lt;/code&gt;」，嘗試推論出下一句話應該要說什麼。以達成延續話題的效果。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;靈感來源&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;感謝 &lt;a href=&#34;https://github.com/memochou1993/gpt-ai-assistant?fbclid=IwAR25uqLdKoDKEQd591fSjyM2sDJJR3Xb-VgcXDIFV_7i3RMWWv2oiyG26RQ&#34;&gt;memochou1993/gpt-ai-assistant&lt;/a&gt; 提供的 node.js 版本串接 vercel 示範，讓我有了想把 python linebot 也串進 vercel 的靈感，(目前感覺下來，免費又好用(?))&lt;/li&gt; &#xA; &lt;li&gt;感謝 &lt;a href=&#34;https://github.com/Lanznx/HealthLineBot&#34;&gt;Lanznx/HealthLineBot&lt;/a&gt; 給了一個很好的 python Django 範例，然而我不會 Django XD，vercel 官方文件好像也沒有提到這部份，總之後來就改成了 flask 版本，也符合 linebot 推薦的範例。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;參考資料&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Line 官方提供的 python flask 製作 linebot 的 sample code &lt;a href=&#34;https://github.com/line/line-bot-sdk-python&#34;&gt;line/line-bot-sdk-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vercel 官方提供的 python runtime Flask 範例 &lt;a href=&#34;https://vercel.com/docs/concepts/functions/serverless-functions/runtimes/python#python-version&#34;&gt;Deploy an example with Flask&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>