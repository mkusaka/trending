<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-30T01:37:07Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jlowin/fastmcp</title>
    <updated>2025-03-30T01:37:07Z</updated>
    <id>tag:github.com,2025-03-30:/jlowin/fastmcp</id>
    <link href="https://github.com/jlowin/fastmcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fast, Pythonic way to build Model Context Protocol servers üöÄ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;üéâ FastMCP has been added to the official MCP SDK! üéâ&lt;/h3&gt; &#xA; &lt;p&gt;You can now find FastMCP as part of the official Model Context Protocol Python SDK:&lt;/p&gt; &#xA; &lt;p&gt;üëâ &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;github.com/modelcontextprotocol/python-sdk&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Please note: this repository is no longer maintained.&lt;/em&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- omit in toc --&gt; &#xA; &lt;h1&gt;FastMCP üöÄ&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;The fast, Pythonic way to build MCP servers.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/fastmcp&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/fastmcp.svg?sanitize=true&#34; alt=&#34;PyPI - Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jlowin/fastmcp/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jlowin/fastmcp.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; servers are a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers simple and intuitive. Create tools, expose resources, and define prompts with clean, Pythonic code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# demo.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;mcp = FastMCP(&#34;Demo üöÄ&#34;)&#xA;&#xA;&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Give Claude access to the server by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install demo.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It&#39;s designed to be high-level and Pythonic - in most cases, decorating a function is all you need.&lt;/p&gt; &#xA;&lt;h3&gt;Key features:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: High-level interface means less code and faster development&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Build MCP servers with minimal boilerplate&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pythonic&lt;/strong&gt;: Feels natural to Python developers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete&lt;/strong&gt;*: FastMCP aims to provide a full implementation of the core MCP specification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(*emphasis on &lt;em&gt;aims&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;üö® üöß üèóÔ∏è &lt;em&gt;FastMCP is under active development, as is the MCP specification itself. Core features are working but some advanced capabilities are still in progress.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- omit in toc --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#what-is-mcp&#34;&gt;What is MCP?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#core-concepts&#34;&gt;Core Concepts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prompts&#34;&gt;Prompts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#images&#34;&gt;Images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#running-your-server&#34;&gt;Running Your Server&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#development-mode-recommended-for-building--testing&#34;&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#claude-desktop-integration-for-regular-use&#34;&gt;Claude Desktop Integration (For Regular Use)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#direct-execution-for-advanced-use-cases&#34;&gt;Direct Execution (For Advanced Use Cases)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#server-object-names&#34;&gt;Server Object Names&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#echo-server&#34;&gt;Echo Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#sqlite-explorer&#34;&gt;SQLite Explorer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#installation-1&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/#opening-a-pull-request&#34;&gt;Opening a Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We strongly recommend installing FastMCP with &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;, as it is required for deploying servers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: on macOS, uv may need to be installed with Homebrew (&lt;code&gt;brew install uv&lt;/code&gt;) in order to make it available to the Claude Desktop app.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, to use the SDK without deploying, you may use pip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install fastmcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s create a simple MCP server that exposes a calculator tool and some data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# server.py&#xA;&#xA;from fastmcp import FastMCP&#xA;&#xA;&#xA;# Create an MCP server&#xA;mcp = FastMCP(&#34;Demo&#34;)&#xA;&#xA;&#xA;# Add an addition tool&#xA;@mcp.tool()&#xA;def add(a: int, b: int) -&amp;gt; int:&#xA;    &#34;&#34;&#34;Add two numbers&#34;&#34;&#34;&#xA;    return a + b&#xA;&#xA;&#xA;# Add a dynamic greeting resource&#xA;@mcp.resource(&#34;greeting://{name}&#34;)&#xA;def get_greeting(name: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Get a personalized greeting&#34;&#34;&#34;&#xA;    return f&#34;Hello, {name}!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install this server in &lt;a href=&#34;https://claude.ai/download&#34;&gt;Claude Desktop&lt;/a&gt; and interact with it right away by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can test it with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jlowin/fastmcp/main/docs/assets/demo-inspector.png&#34; alt=&#34;MCP Inspector&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is MCP?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://modelcontextprotocol.io&#34;&gt;Model Context Protocol (MCP)&lt;/a&gt; lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. Think of it like a web API, but specifically designed for LLM interactions. MCP servers can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Expose data through &lt;strong&gt;Resources&lt;/strong&gt; (think of these sort of like GET endpoints; they are used to load information into the LLM&#39;s context)&lt;/li&gt; &#xA; &lt;li&gt;Provide functionality through &lt;strong&gt;Tools&lt;/strong&gt; (sort of like POST endpoints; they are used to execute code or otherwise produce a side effect)&lt;/li&gt; &#xA; &lt;li&gt;Define interaction patterns through &lt;strong&gt;Prompts&lt;/strong&gt; (reusable templates for LLM interactions)&lt;/li&gt; &#xA; &lt;li&gt;And more!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is a low-level &lt;a href=&#34;https://github.com/modelcontextprotocol/python-sdk&#34;&gt;Python SDK&lt;/a&gt; available for implementing the protocol directly, but FastMCP aims to make that easier by providing a high-level, Pythonic interface.&lt;/p&gt; &#xA;&lt;h2&gt;Core Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;The FastMCP server is your core interface to the MCP protocol. It handles connection management, protocol compliance, and message routing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;# Create a named server&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;# Specify dependencies for deployment and development&#xA;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;Resources are how you expose data to LLMs. They&#39;re similar to GET endpoints in a REST API - they provide data but shouldn&#39;t perform significant computation or have side effects. Some examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File contents&lt;/li&gt; &#xA; &lt;li&gt;Database schemas&lt;/li&gt; &#xA; &lt;li&gt;API responses&lt;/li&gt; &#xA; &lt;li&gt;System information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Resources can be static:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;config://app&#34;)&#xA;def get_config() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Static configuration data&#34;&#34;&#34;&#xA;    return &#34;App configuration here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or dynamic with parameters (FastMCP automatically handles these as MCP templates):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.resource(&#34;users://{user_id}/profile&#34;)&#xA;def get_user_profile(user_id: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Dynamic user data&#34;&#34;&#34;&#xA;    return f&#34;Profile data for user {user_id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;Tools let LLMs take actions through your server. Unlike resources, tools are expected to perform computation and have side effects. They&#39;re similar to POST endpoints in a REST API.&lt;/p&gt; &#xA;&lt;p&gt;Simple calculation example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.tool()&#xA;def calculate_bmi(weight_kg: float, height_m: float) -&amp;gt; float:&#xA;    &#34;&#34;&#34;Calculate BMI given weight in kg and height in meters&#34;&#34;&#34;&#xA;    return weight_kg / (height_m ** 2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTP request example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import httpx&#xA;&#xA;@mcp.tool()&#xA;async def fetch_weather(city: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Fetch current weather for a city&#34;&#34;&#34;&#xA;    async with httpx.AsyncClient() as client:&#xA;        response = await client.get(&#xA;            f&#34;https://api.weather.com/{city}&#34;&#xA;        )&#xA;        return response.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complex input handling example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pydantic import BaseModel, Field&#xA;from typing import Annotated&#xA;&#xA;class ShrimpTank(BaseModel):&#xA;    class Shrimp(BaseModel):&#xA;        name: Annotated[str, Field(max_length=10)]&#xA;&#xA;    shrimp: list[Shrimp]&#xA;&#xA;@mcp.tool()&#xA;def name_shrimp(&#xA;    tank: ShrimpTank,&#xA;    # You can use pydantic Field in function signatures for validation.&#xA;    extra_names: Annotated[list[str], Field(max_length=10)],&#xA;) -&amp;gt; list[str]:&#xA;    &#34;&#34;&#34;List all shrimp names in the tank&#34;&#34;&#34;&#xA;    return [shrimp.name for shrimp in tank.shrimp] + extra_names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are reusable templates that help LLMs interact with your server effectively. They&#39;re like &#34;best practices&#34; encoded into your server. A prompt can be as simple as a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@mcp.prompt()&#xA;def review_code(code: str) -&amp;gt; str:&#xA;    return f&#34;Please review this code:\n\n{code}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a more structured sequence of messages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp.prompts.base import UserMessage, AssistantMessage&#xA;&#xA;@mcp.prompt()&#xA;def debug_error(error: str) -&amp;gt; list[Message]:&#xA;    return [&#xA;        UserMessage(&#34;I&#39;m seeing this error:&#34;),&#xA;        UserMessage(error),&#xA;        AssistantMessage(&#34;I&#39;ll help debug that. What have you tried so far?&#34;)&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Images&lt;/h3&gt; &#xA;&lt;p&gt;FastMCP provides an &lt;code&gt;Image&lt;/code&gt; class that automatically handles image data in your server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Image&#xA;from PIL import Image as PILImage&#xA;&#xA;@mcp.tool()&#xA;def create_thumbnail(image_path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Create a thumbnail from an image&#34;&#34;&#34;&#xA;    img = PILImage.open(image_path)&#xA;    img.thumbnail((100, 100))&#xA;    &#xA;    # FastMCP automatically handles conversion and MIME types&#xA;    return Image(data=img.tobytes(), format=&#34;png&#34;)&#xA;&#xA;@mcp.tool()&#xA;def load_image(path: str) -&amp;gt; Image:&#xA;    &#34;&#34;&#34;Load an image from disk&#34;&#34;&#34;&#xA;    # FastMCP handles reading and format detection&#xA;    return Image(path=path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Images can be used as the result of both tools and resources.&lt;/p&gt; &#xA;&lt;h3&gt;Context&lt;/h3&gt; &#xA;&lt;p&gt;The Context object gives your tools and resources access to MCP capabilities. To use it, add a parameter annotated with &lt;code&gt;fastmcp.Context&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP, Context&#xA;&#xA;@mcp.tool()&#xA;async def long_task(files: list[str], ctx: Context) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Process multiple files with progress tracking&#34;&#34;&#34;&#xA;    for i, file in enumerate(files):&#xA;        ctx.info(f&#34;Processing {file}&#34;)&#xA;        await ctx.report_progress(i, len(files))&#xA;        &#xA;        # Read another resource if needed&#xA;        data = await ctx.read_resource(f&#34;file://{file}&#34;)&#xA;        &#xA;    return &#34;Processing complete&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Context object provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Progress reporting through &lt;code&gt;report_progress()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logging via &lt;code&gt;debug()&lt;/code&gt;, &lt;code&gt;info()&lt;/code&gt;, &lt;code&gt;warning()&lt;/code&gt;, and &lt;code&gt;error()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resource access through &lt;code&gt;read_resource()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Request metadata via &lt;code&gt;request_id&lt;/code&gt; and &lt;code&gt;client_id&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running Your Server&lt;/h2&gt; &#xA;&lt;p&gt;There are three main ways to use your FastMCP server, each suited for different stages of development:&lt;/p&gt; &#xA;&lt;h3&gt;Development Mode (Recommended for Building &amp;amp; Testing)&lt;/h3&gt; &#xA;&lt;p&gt;The fastest way to test and debug your server is with the MCP Inspector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This launches a web interface where you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test your tools and resources interactively&lt;/li&gt; &#xA; &lt;li&gt;See detailed logs and error messages&lt;/li&gt; &#xA; &lt;li&gt;Monitor server performance&lt;/li&gt; &#xA; &lt;li&gt;Set environment variables for testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;During development, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add dependencies with &lt;code&gt;--with&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with pandas --with numpy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mount your local code for live updates: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp dev server.py --with-editable .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Claude Desktop Integration (For Regular Use)&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is ready, install it in Claude Desktop to use it with Claude:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your server will run in an isolated environment with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic installation of dependencies specified in your FastMCP instance: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;mcp = FastMCP(&#34;My App&#34;, dependencies=[&#34;pandas&#34;, &#34;numpy&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Custom naming via &lt;code&gt;--name&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fastmcp install server.py --name &#34;My Analytics Server&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variable management: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set variables individually&#xA;fastmcp install server.py -e API_KEY=abc123 -e DB_URL=postgres://...&#xA;&#xA;# Or load from a .env file&#xA;fastmcp install server.py -f .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Direct Execution (For Advanced Use Cases)&lt;/h3&gt; &#xA;&lt;p&gt;For advanced scenarios like custom deployments or running without Claude, you can execute your server directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;My App&#34;)&#xA;&#xA;if __name__ == &#34;__main__&#34;:&#xA;    mcp.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using the FastMCP CLI&#xA;fastmcp run server.py&#xA;&#xA;# Or with Python/uv directly&#xA;python server.py&#xA;uv run python server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: When running directly, you are responsible for ensuring all dependencies are available in your environment. Any dependencies specified on the FastMCP instance are ignored.&lt;/p&gt; &#xA;&lt;p&gt;Choose this method when you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom deployment configurations&lt;/li&gt; &#xA; &lt;li&gt;Integration with other services&lt;/li&gt; &#xA; &lt;li&gt;Direct control over the server lifecycle&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Server Object Names&lt;/h3&gt; &#xA;&lt;p&gt;All FastMCP commands will look for a server object called &lt;code&gt;mcp&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt;, or &lt;code&gt;server&lt;/code&gt; in your file. If you have a different object name or multiple servers in one file, use the syntax &lt;code&gt;server.py:my_server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using a standard name&#xA;fastmcp run server.py&#xA;&#xA;# Using a custom name&#xA;fastmcp run server.py:my_custom_server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Here are a few examples of FastMCP servers. For more, see the &lt;code&gt;examples/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Echo Server&lt;/h3&gt; &#xA;&lt;p&gt;A simple server demonstrating resources, tools, and prompts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;&#xA;mcp = FastMCP(&#34;Echo&#34;)&#xA;&#xA;@mcp.resource(&#34;echo://{message}&#34;)&#xA;def echo_resource(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a resource&#34;&#34;&#34;&#xA;    return f&#34;Resource echo: {message}&#34;&#xA;&#xA;@mcp.tool()&#xA;def echo_tool(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Echo a message as a tool&#34;&#34;&#34;&#xA;    return f&#34;Tool echo: {message}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def echo_prompt(message: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create an echo prompt&#34;&#34;&#34;&#xA;    return f&#34;Please process this message: {message}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite Explorer&lt;/h3&gt; &#xA;&lt;p&gt;A more complex example showing database integration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastmcp import FastMCP&#xA;import sqlite3&#xA;&#xA;mcp = FastMCP(&#34;SQLite Explorer&#34;)&#xA;&#xA;@mcp.resource(&#34;schema://main&#34;)&#xA;def get_schema() -&amp;gt; str:&#xA;    &#34;&#34;&#34;Provide the database schema as a resource&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    schema = conn.execute(&#xA;        &#34;SELECT sql FROM sqlite_master WHERE type=&#39;table&#39;&#34;&#xA;    ).fetchall()&#xA;    return &#34;\n&#34;.join(sql[0] for sql in schema if sql[0])&#xA;&#xA;@mcp.tool()&#xA;def query_data(sql: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Execute SQL queries safely&#34;&#34;&#34;&#xA;    conn = sqlite3.connect(&#34;database.db&#34;)&#xA;    try:&#xA;        result = conn.execute(sql).fetchall()&#xA;        return &#34;\n&#34;.join(str(row) for row in result)&#xA;    except Exception as e:&#xA;        return f&#34;Error: {str(e)}&#34;&#xA;&#xA;@mcp.prompt()&#xA;def analyze_table(table: str) -&amp;gt; str:&#xA;    &#34;&#34;&#34;Create a prompt template for analyzing tables&#34;&#34;&#34;&#xA;    return f&#34;&#34;&#34;Please analyze this database table:&#xA;Table: {table}&#xA;Schema: &#xA;{get_schema()}&#xA;&#xA;What insights can you provide about the structure and relationships?&#34;&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h3&gt;Open Developer Guide&lt;/h3&gt;&lt;/summary&gt; &#xA; &lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP requires Python 3.10+ and &lt;a href=&#34;https://docs.astral.sh/uv/&#34;&gt;uv&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;h3&gt;Installation&lt;/h3&gt; &#xA; &lt;p&gt;For development, we recommend installing FastMCP with development dependencies, which includes various utilities the maintainers find useful.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/jlowin/fastmcp.git&#xA;cd fastmcp&#xA;uv sync --frozen --extra dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For running tests only (e.g., in CI), you only need the testing dependencies:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uv sync --frozen --extra tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Testing&lt;/h3&gt; &#xA; &lt;p&gt;Please make sure to test any new functionality. Your tests should be simple and atomic and anticipate change rather than cement complex patterns.&lt;/p&gt; &#xA; &lt;p&gt;Run tests from the root directory:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest -vv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Formatting&lt;/h3&gt; &#xA; &lt;p&gt;FastMCP enforces a variety of required formats, which you can automatically enforce with pre-commit.&lt;/p&gt; &#xA; &lt;p&gt;Install the pre-commit hooks:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The hooks will now run on every commit (as well as on every PR). To run them manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit run --all-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h3&gt;Opening a Pull Request&lt;/h3&gt; &#xA; &lt;p&gt;Fork the repository and create a new branch:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Make your changes and commit them:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add . &amp;amp;&amp;amp; git commit -m &#34;My changes&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Push your changes to your fork:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git push origin my-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Feel free to reach out in a GitHub issue or discussion if you have any questions!&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>jingyaogong/minimind-v</title>
    <updated>2025-03-30T01:37:07Z</updated>
    <id>tag:github.com,2025-03-30:/jingyaogong/minimind-v</id>
    <link href="https://github.com/jingyaogong/minimind-v" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üöÄ „ÄåÂ§ßÊ®°Âûã„Äç1Â∞èÊó∂‰ªé0ËÆ≠ÁªÉ26MÂèÇÊï∞ÁöÑËßÜËßâÂ§öÊ®°ÊÄÅVLMÔºÅüåè Train a 26M-parameter VLM from scratch in just 1 hours!&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/logo.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://visitor-badge.laobi.icu/badge?page_id=jingyaogong/minimind-v&#34; alt=&#34;visitors&#34;&gt; &lt;a href=&#34;https://github.com/jingyaogong/minimind-v/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/jingyaogong/minimind-v?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jingyaogong/minimind-v?v=1&#34; alt=&#34;GitHub Code License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jingyaogong/minimind-v/commits/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/jingyaogong/minimind-v&#34; alt=&#34;GitHub last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jingyaogong/minimind-v/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-blue&#34; alt=&#34;GitHub pull request&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://huggingface.co/collections/jingyaogong/minimind-v-67000833fb60b3a2e1f3597d&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%A4%97-MiniMindV%20%20Collection-blue&#34; alt=&#34;Collection&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;&#34;Â§ßÈÅìËá≥ÁÆÄ&#34;&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;‰∏≠Êñá | &lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/README_en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ê≠§È°πÁõÆÊó®Âú®‰ªé0ÂºÄÂßãÔºå‰ªÖÁî®1.3ÂùóÈí±ÊàêÊú¨ + 1Â∞èÊó∂ÔºÅÂç≥ÂèØËÆ≠ÁªÉÂá∫26MÂèÇÊï∞ÁöÑË∂ÖÂ∞èÂ§öÊ®°ÊÄÅËßÜËßâËØ≠Ë®ÄÊ®°Âûã&lt;strong&gt;MiniMind-V&lt;/strong&gt;„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MiniMind-V&lt;/strong&gt;ÊúÄÂ∞èÁâàÊú¨‰ΩìÁßØ‰ªÖ‰∏∫ GPT3 ÁöÑÁ∫¶ $\frac{1}{7000}$ÔºåÂäõÊ±ÇÂÅöÂà∞‰∏™‰∫∫GPU‰πüÂèØÂø´ÈÄüÊé®ÁêÜÁîöËá≥ËÆ≠ÁªÉ„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MiniMind-V&lt;/strong&gt;ÊòØ&lt;a href=&#34;https://github.com/jingyaogong/minimind&#34;&gt;MiniMind&lt;/a&gt;Á∫ØËØ≠Ë®ÄÊ®°ÂûãÁöÑËßÜËßâËÉΩÂäõÈ¢ùÂ§ñÊãìÂ±ï„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;È°πÁõÆÂêåÊó∂ÂåÖÂê´‰∫ÜVLMÂ§ßÊ®°ÂûãÁöÑÊûÅÁÆÄÁªìÊûÑ„ÄÅÊï∞ÊçÆÈõÜÊ∏ÖÊ¥ó„ÄÅÈ¢ÑËÆ≠ÁªÉ(Pretrain)„ÄÅÁõëÁù£ÂæÆË∞É(SFT)Á≠âÂÖ®ËøáÁ®ã‰ª£Á†Å„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Ëøô‰∏ç‰ªÖÊòØ‰∏Ä‰∏™ÂºÄÊ∫êVLMÊ®°ÂûãÁöÑÊúÄÂ∞èÂÆûÁé∞Ôºå‰πüÊòØÂÖ•Èó®ËßÜËßâËØ≠Ë®ÄÊ®°ÂûãÁöÑÁÆÄÊòéÊïôÁ®ã„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Â∏åÊúõÊ≠§È°πÁõÆËÉΩ‰∏∫ÊâÄÊúâ‰∫∫Êèê‰æõ‰∏Ä‰∏™ÊäõÁ†ñÂºïÁéâÁöÑÁ§∫‰æãÔºå‰∏ÄËµ∑ÊÑüÂèóÂàõÈÄ†ÁöÑ‰πêË∂£ÔºÅÊé®Âä®Êõ¥ÂπøÊ≥õAIÁ§æÂå∫ÁöÑËøõÊ≠•ÔºÅ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‰∏∫Èò≤Ê≠¢ËØØËß£Ôºå‚Äú1Â∞èÊó∂‚Äù Âü∫‰∫éNVIDIA 3090Á°¨‰ª∂ËÆæÂ§áÔºàÂçïÂç°ÔºâÊµãËØï&lt;code&gt;1 epoch&lt;/code&gt;Ôºå‚Äú1.3ÂùóÈí±‚Äù ÊåáGPUÊúçÂä°Âô®ÁßüÁî®ÊàêÊú¨„ÄÇ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/minimind2-v.gif&#34; alt=&#34;minimind2-v&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.modelscope.cn/studios/gongjy/MiniMind-V&#34;&gt;üîóü§ñÂú®Á∫ø‰ΩìÈ™å&lt;/a&gt; | &lt;a href=&#34;https://www.bilibili.com/video/BV1Sh1vYBEzY&#34;&gt;üîóüéûÔ∏èËßÜÈ¢ë‰ªãÁªç&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;üìå Introduction&lt;/h1&gt; &#xA;&lt;p&gt;‚ÄúÁî®‰πêÈ´òÊãºÂá∫‰∏ÄÊû∂È£ûÊú∫ÔºåËøúÊØîÂùêÂú®Â§¥Á≠âËà±ÈáåÈ£ûË°åÊõ¥ËÆ©‰∫∫ÂÖ¥Â•ãÔºÅ‚Äù ÊûÑÂª∫VLMËåÉÂºèÁöÑÂ§öÊ®°ÊÄÅÂ§ßÊ®°ÂûãÊòØÂê¶ÁúüÁöÑÂ¶ÇÊÉ≥Ë±°‰∏≠ÈÇ£Ê†∑Â§çÊùÇÔºüÂÆÉÁöÑ‰ª£Á†ÅÂÆûÁé∞Âà∞Â∫ïÂ¶Ç‰ΩïÔºü ËÆ≠ÁªÉËøáÁ®ãÁ©∂Á´üÈöæ‰∏çÈöæÔºüÈÇ£‰πàÁé∞Âú®ÔºåÊé¢Á¥¢ÂÆÉ‰ª¨ÁöÑÁ≠îÊ°àÔºå‰∏ÄËµ∑ÊÑüÂèóÂàõÈÄ†ÁöÑ‰πêË∂£ÂêßÔºÅ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] ÔºàÊà™Ëá≥2025-02-20ÔºâMiniMind-V Á≥ªÂàóÂ∑≤ÂÆåÊàê‰∫Ü‰ª•‰∏ãÂûãÂè∑Ê®°ÂûãËÆ≠ÁªÉÔºåÊúÄÂ∞è‰ªÖÈúÄ26M (0.026B)ÔºåÂç≥ÂèØÂÖ∑Â§áËØÜÂõæÂíåÂØπËØùÁöÑËÉΩÂäõÔºÅ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Ê®°Âûã (Â§ßÂ∞è)&lt;/th&gt; &#xA;   &lt;th&gt;Êé®ÁêÜÂç†Áî®&lt;/th&gt; &#xA;   &lt;th&gt;release&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniMind2-V (104M)&lt;/td&gt; &#xA;   &lt;td&gt;0.6 GB&lt;/td&gt; &#xA;   &lt;td&gt;2025.02.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniMind2-Small-V (26M)&lt;/td&gt; &#xA;   &lt;td&gt;1.1 GB&lt;/td&gt; &#xA;   &lt;td&gt;2025.02.20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v-v1-small (27M)&lt;/td&gt; &#xA;   &lt;td&gt;0.6 GB&lt;/td&gt; &#xA;   &lt;td&gt;2024.10.04&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minimind-v-v1 (109M)&lt;/td&gt; &#xA;   &lt;td&gt;1.1 GB&lt;/td&gt; &#xA;   &lt;td&gt;2024.10.04&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;üëâ&lt;strong&gt;ÊúÄËøëÊõ¥Êñ∞&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;2025-02-20 (newest üéâ)&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;MiniMind2-V‰º¥ÈöèMiniMind2ÂêåÊ≠•Êõ¥Êñ∞&lt;/li&gt; &#xA;  &lt;li&gt;Â§ßÂπÖÂáèÂ∞ëÊâÄÊúâÂÜó‰Ωô‰ª£Á†ÅÔºåËßÑËåÉ‰ª£Á†ÅÊ†ºÂºè&lt;/li&gt; &#xA;  &lt;li&gt;Â§ßÂπÖÁ≤æÁÆÄÊ®°ÂûãÂÜó‰ΩôÁªìÊûÑ&lt;/li&gt; &#xA;  &lt;li&gt;Êõ¥Êñ∞Êï∞ÊçÆÈõÜÊ†ºÂºèÔºåÊãìÂ±ïÊñ∞ÁöÑSFTÊï∞ÊçÆÈõÜ&lt;/li&gt; &#xA;  &lt;li&gt;ÊØîÂâç‰ª£VLMÊõ¥‰ºòÁßÄÁöÑÊïàÊûúÔºÅ&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;2024-10-05&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;MiniMind-VÂ¶ÇÊúüËÄåËá≥ÔºåÈ¶ñÊ¨°ÂºÄÊ∫ê&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;üìå Âø´ÈÄüÂºÄÂßã&lt;/h1&gt; &#xA;&lt;details style=&#34;color:rgb(128,128,128)&#34;&gt; &#xA; &lt;summary&gt;ÂàÜ‰∫´Êú¨‰∫∫ÁöÑËΩØÁ°¨‰ª∂ÈÖçÁΩÆÔºà‰ªÖ‰æõÂèÇËÄÉÔºâ&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;CPU: Intel(R) Core(TM) i9-10980XE CPU @ 3.00GHz&lt;/li&gt; &#xA;  &lt;li&gt;RAM: 128 GB&lt;/li&gt; &#xA;  &lt;li&gt;GPU: NVIDIA GeForce RTX 3090(24GB) * 8&lt;/li&gt; &#xA;  &lt;li&gt;Ubuntu==20.04&lt;/li&gt; &#xA;  &lt;li&gt;CUDA==12.2&lt;/li&gt; &#xA;  &lt;li&gt;Python==3.10.16&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/requirements.txt&#34;&gt;requirements.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Á¨¨0Ê≠•&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ÂÖãÈöÜ‰ª£Á†Å‰ªìÂ∫ì&#xA;git clone https://github.com/jingyaogong/minimind-v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ‰∏ãËΩΩclipÊ®°ÂûãÂà∞ ./model/vision_model ÁõÆÂΩï‰∏ã&#xA;git clone https://huggingface.co/openai/clip-vit-base-patch16&#xA;# or&#xA;git clone https://www.modelscope.cn/models/openai-mirror/clip-vit-base-patch16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚Ö† ÊµãËØïÂ∑≤ÊúâÊ®°ÂûãÊïàÊûú&lt;/h2&gt; &#xA;&lt;h3&gt;1.ÁéØÂ¢ÉÂáÜÂ§á&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.‰∏ãËΩΩÊ®°Âûã&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://huggingface.co/jingyaogong/MiniMind2-V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.ÂëΩ‰ª§Ë°åÈóÆÁ≠î&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# load=0: load from pytorch model, load=1: load from transformers-hf model&#xA;python eval_vlm.py --load 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.ÊàñÂêØÂä®WebUI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python web_demo_vlm.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚Ö° ‰ªé0ÂºÄÂßãËá™Â∑±ËÆ≠ÁªÉ&lt;/h2&gt; &#xA;&lt;h3&gt;1.ÁéØÂ¢ÉÂáÜÂ§á&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details style=&#34;color:rgb(128,128,128)&#34;&gt; &#xA; &lt;summary&gt;Ê≥®ÔºöÊèêÂâçÊµãËØïTorchÊòØÂê¶ÂèØÁî®cuda&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;import torch&#xA;print(torch.cuda.is_available())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Â¶ÇÊûú‰∏çÂèØÁî®ÔºåËØ∑Ëá™Ë°åÂéª&lt;a href=&#34;https://download.pytorch.org/whl/torch_stable.html&#34;&gt;torch_stable&lt;/a&gt; ‰∏ãËΩΩwhlÊñá‰ª∂ÂÆâË£Ö„ÄÇÂèÇËÄÉ&lt;a href=&#34;https://blog.csdn.net/weixin_45456738/article/details/141029610?ops_request_misc=&amp;amp;request_id=&amp;amp;biz_id=102&amp;amp;utm_term=%E5%AE%89%E8%A3%85torch&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-141029610.nonecase&amp;amp;spm=1018.2226.3001.4187&#34;&gt;ÈìæÊé•&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;2.Êï∞ÊçÆ‰∏ãËΩΩ&lt;/h3&gt; &#xA;&lt;p&gt;‰ªé‰∏ãÊñáÊèê‰æõÁöÑ&lt;a href=&#34;https://huggingface.co/datasets/jingyaogong/minimind-v_dataset&#34;&gt;Êï∞ÊçÆÈõÜ‰∏ãËΩΩÈìæÊé•&lt;/a&gt; ‰∏ãËΩΩÈúÄË¶ÅÁöÑÊï∞ÊçÆÊñá‰ª∂ÔºàÂàõÂª∫&lt;code&gt;./dataset&lt;/code&gt;ÁõÆÂΩïÔºâÂπ∂ÊîæÂà∞&lt;code&gt;./dataset&lt;/code&gt;‰∏ã„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;*.jsonl&lt;/code&gt;‰∏∫ÈóÆÁ≠îÊï∞ÊçÆÈõÜÔºå&lt;code&gt;*images&lt;/code&gt;‰∏∫ÈÖçÂ•óÁöÑÂõæÁâáÊï∞ÊçÆÔºå‰∏ãËΩΩÂÆåÊàêÂêéÈúÄË¶ÅËß£ÂéãÂõæÂÉèÊï∞ÊçÆ„ÄÇ&lt;/p&gt; &#xA;&lt;details style=&#34;color:rgb(128,128,128)&#34;&gt; &#xA; &lt;summary&gt;Ê≥®ÔºöÊï∞ÊçÆÈõÜÈ°ªÁü•&lt;/summary&gt; &#xA; &lt;p&gt;ËØ∑È¢ÑÁïô~5GBÁ©∫Èó¥Â≠òÊîæÊï∞ÊçÆÈõÜÔºåËã•Êó†Â§ö‰ΩôÁ©∫Èó¥Â≠òÊîæpretrainÊï∞ÊçÆÔºå ÂèØÂ∞ùËØïË∑≥ËøápretrainËÆ≠ÁªÉÊ≠•È™§Áõ¥Êé•ËøõË°åsftËÆ≠ÁªÉ„ÄÇ&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;3.ÂºÄÂßãËÆ≠ÁªÉ&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.1 È¢ÑËÆ≠ÁªÉÔºàÂ≠¶ÂõæÂÉèÊèèËø∞Ôºâ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python train_pretrain_vlm.py --epochs 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ÊâßË°åÈ¢ÑËÆ≠ÁªÉÔºåÂæóÂà∞ &lt;code&gt;pretrain_vlm_*.pth&lt;/code&gt; ‰Ωú‰∏∫È¢ÑËÆ≠ÁªÉÁöÑËæìÂá∫ÊùÉÈáçÔºàÂÖ∂‰∏≠*‰∏∫Ê®°ÂûãÁöÑdimensionÔºåÈªòËÆ§‰∏∫512Ôºâ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.2 ÁõëÁù£ÂæÆË∞ÉÔºàÂ≠¶ÁúãÂõæÂØπËØùÊñπÂºèÔºâ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python train_sft_vlm.py --epochs 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ÊâßË°åÁõëÁù£ÂæÆË∞ÉÔºåÂæóÂà∞ &lt;code&gt;sft_vlm_*.pth&lt;/code&gt; ‰Ωú‰∏∫Êåá‰ª§ÂæÆË∞ÉÁöÑËæìÂá∫ÊùÉÈáç&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details style=&#34;color:rgb(128,128,128)&#34;&gt; &#xA; &lt;summary&gt;Ê≥®ÔºöËÆ≠ÁªÉÈ°ªÁü•&lt;/summary&gt; &#xA; &lt;p&gt;ÊâÄÊúâËÆ≠ÁªÉËøáÁ®ãÈªòËÆ§ÊØèÈöî100Ê≠•‰øùÂ≠ò1Ê¨°ÂèÇÊï∞Âà∞Êñá‰ª∂&lt;code&gt;./out/***.pth&lt;/code&gt;ÔºàÊØèÊ¨°‰ºöË¶ÜÁõñÊéâÊóßÊùÉÈáçÊñá‰ª∂Ôºâ„ÄÇ&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;4.ÊµãËØïÊ®°ÂûãÊïàÊûú&lt;/h3&gt; &#xA;&lt;p&gt;Á°Æ‰øùÈúÄË¶ÅÊµãËØïÁöÑÊ®°Âûã&lt;code&gt;*.pth&lt;/code&gt;Êñá‰ª∂‰Ωç‰∫é&lt;code&gt;./out/&lt;/code&gt;ÁõÆÂΩï‰∏ã„ÄÇ ‰πüÂèØ‰ª•Áõ¥Êé•Âéª&lt;a href=&#34;https://huggingface.co/jingyaogong/MiniMind2-V-PyTorch&#34;&gt;Ê≠§Â§Ñ&lt;/a&gt;‰∏ãËΩΩ‰ΩøÁî®ÊàëËÆ≠ÁªÉÁöÑ&lt;code&gt;*.pth&lt;/code&gt;Êñá‰ª∂„ÄÇ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python eval_vlm.py --model_mode 1 # ÈªòËÆ§‰∏∫0ÔºöÊµãËØïpretrainÊ®°ÂûãÊïàÊûúÔºåËÆæÁΩÆ‰∏∫1ÔºöÊµãËØïsftÊ®°ÂûãÊïàÊûú&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] ËÆ≠ÁªÉËÑöÊú¨Âùá‰∏∫PytorchÂéüÁîüÊ°ÜÊû∂ÔºåÂùáÊîØÊåÅÂ§öÂç°Âä†ÈÄüÔºåÂÅáËÆæ‰Ω†ÁöÑËÆæÂ§áÊúâN (NÔºû1) Âº†ÊòæÂç°Ôºö&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;ÂçïÊú∫NÂç°ÂêØÂä®ËÆ≠ÁªÉÊñπÂºè (DDP, ÊîØÊåÅÂ§öÊú∫Â§öÂç°ÈõÜÁæ§)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;torchrun --nproc_per_node N train_xxx.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details style=&#34;color:rgb(128,128,128)&#34;&gt; &#xA; &lt;summary&gt;Ê≥®ÔºöÂÖ∂ÂÆÉÈ°ªÁü•&lt;/summary&gt; &#xA; &lt;p&gt;ÂçïÊú∫NÂç°ÂêØÂä®ËÆ≠ÁªÉ (DeepSpeed)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deepspeed --master_port 29500 --num_gpus=N train_xxx.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;ÂèØÊ†πÊçÆÈúÄË¶ÅÂºÄÂêØwandbËÆ∞ÂΩïËÆ≠ÁªÉËøáÁ®ã&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ÈúÄË¶ÅÁôªÂΩï: wandb login&#xA;torchrun --nproc_per_node N train_xxx.py --use_wandb&#xA;# and&#xA;python train_xxx.py --use_wandb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;ÈÄöËøáÊ∑ªÂä†&lt;code&gt;--use_wandb&lt;/code&gt;ÂèÇÊï∞ÔºåÂèØ‰ª•ËÆ∞ÂΩïËÆ≠ÁªÉËøáÁ®ãÔºåËÆ≠ÁªÉÂÆåÊàêÂêéÔºåÂèØ‰ª•Âú®wandbÁΩëÁ´ô‰∏äÊü•ÁúãËÆ≠ÁªÉËøáÁ®ã„ÄÇÈÄöËøá‰øÆÊîπ&lt;code&gt;wandb_project&lt;/code&gt; Âíå&lt;code&gt;wandb_run_name&lt;/code&gt;ÂèÇÊï∞ÔºåÂèØ‰ª•ÊåáÂÆöÈ°πÁõÆÂêçÁß∞ÂíåËøêË°åÂêçÁß∞„ÄÇ&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;üìå VLM Detail&lt;/h1&gt; &#xA;&lt;p&gt;MiniMind-V (VLM)ÁöÑÂü∫Â∫ßËØ≠Ë®ÄÊ®°ÂûãMiniMind (LLM)Êù•Ëá™Â≠™ÁîüÈ°πÁõÆ&lt;a href=&#34;https://github.com/jingyaogong/minimind&#34;&gt;minimind&lt;/a&gt;Ôºå ÂÖ∑‰ΩìÁöÑÊ®°ÂûãÁªìÊûÑ„ÄÅËÆ≠ÁªÉÁªÜËäÇ„ÄÅÂéüÁêÜ„ÄÅÊµãËØïÊïàÊûúÁ≠âÂùáÂèØÁßªÊ≠•&lt;a href=&#34;https://github.com/jingyaogong/minimind&#34;&gt;minimind&lt;/a&gt;È°πÁõÆÊü•ÈòÖ„ÄÇ Ê≠§Â§Ñ‰∏∫ÂáèÂ∞ëÂÜó‰ΩôÔºåÁúÅÁï•ËÆ®ËÆ∫LLMÁöÑÁõ∏ÂÖ≥ÈÉ®ÂàÜÔºåÈªòËÆ§ÊÇ®Â∑≤ÂØπMiniMind (LLM)ÁöÑÁªÜËäÇÊúâÂü∫Êú¨ÁöÑ‰∫ÜËß£„ÄÇ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Âç≥‰ΩøÊÇ®‰∏çÂ§™‰∫ÜËß£LLMÁöÑÁªÜËäÇÔºå‰πüÂèØÂèÇËÄÉ‚ÄúÂø´ÈÄüÂºÄÂßã‚ÄùÊµÅÁ®ãËÆ≠ÁªÉ‰∏Ä‰∏™MiniMind-VÔºå ËøôÂπ∂‰∏çÂèóÂà∞ÂΩ±ÂìçÔºå‰ªìÂ∫ìËá¥Âäõ‰∫éÊúÄ‰ΩéÊàêÊú¨ÁöÑÂºÄÁÆ±Âç≥Áî®ÔºÅ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;MiniMind-VÁöÑÁªìÊûÑ‰ªÖÂ¢ûÂä†Visual EncoderÂíåÁâπÂæÅÊäïÂΩ±‰∏§‰∏™Â≠êÊ®°ÂùóÔºåÂ¢ûÂä†Ê®°ÊÄÅÊ∑∑ÂêàÂàÜÊîØÔºå‰ª•ÊîØÊåÅÂ§öÁßçÊ®°ÊÄÅ‰ø°ÊÅØÁöÑËæìÂÖ•Ôºö &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/VLM-structure.png&#34; alt=&#34;LLM-structure&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/VLM-structure-moe.png&#34; alt=&#34;LLM-structure&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; „ÄêÈáçË¶Å„Äë‰∏Ä‰∫õÊúâË∂£ÁöÑÊÄùËÄÉ &lt;/summary&gt; &#xA; &lt;p&gt;Ê≠§Â§Ñ‰∏çÂ¶®Â±ïÂºÄÊÉ≥‰∏ÄÊÉ≥‰∏§‰∏™ÈóÆÈ¢òÔºö&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;‰ªÄ‰πàÂè´ÂÅö&lt;strong&gt;L&lt;/strong&gt;arge &lt;strong&gt;L&lt;/strong&gt;anguage &lt;strong&gt;M&lt;/strong&gt;odel (LLM)Ôºü&lt;/li&gt; &#xA;  &lt;li&gt;‰ªÄ‰πàÂè´ÂÅöÂ§öÊ®°ÊÄÅÊ®°ÂûãÔºü&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.jiqizhixin.com/articles/2024-09-15-3&#34;&gt;ËøôÁØáÊñáÁ´†&lt;/a&gt;ÂÆåÁæéÂêªÂêàÊú¨‰∫∫ÁöÑÊÉ≥Ê≥ïÔºö Â§ßËØ≠Ë®ÄÊ®°ÂûãÔºàLLMÔºâÂêçÂ≠óËôΩÁÑ∂Â∏¶ÊúâËØ≠Ë®Ä‰∫åÂ≠óÔºå‰ΩÜÂÆÉ‰ª¨ÂÖ∂ÂÆû‰∏éËØ≠Ë®ÄÂÖ≥Á≥ª‰∏çÂ§ßÔºåËøôÂè™ÊòØÂéÜÂè≤ÈóÆÈ¢òÔºåÊõ¥Á°ÆÂàáÁöÑÂêçÂ≠óÂ∫îËØ•ÊòØËá™ÂõûÂΩí Transformer ÊàñËÄÖÂÖ∂‰ªñ„ÄÇLLM Êõ¥Â§öÊòØ‰∏ÄÁßçÁªüËÆ°Âª∫Ê®°ÁöÑÈÄöÁî®ÊäÄÊúØÔºåÂÆÉ‰ª¨‰∏ªË¶ÅÈÄöËøáËá™ÂõûÂΩí Transformer Êù•Ê®°Êãü token ÊµÅÔºåËÄåËøô‰∫õ token ÂèØ‰ª•‰ª£Ë°®ÊñáÊú¨„ÄÅÂõæÁâá„ÄÅÈü≥È¢ë„ÄÅÂä®‰ΩúÈÄâÊã©„ÄÅÁîöËá≥ÊòØÂàÜÂ≠êÁ≠â‰ªª‰Ωï‰∏úË•ø„ÄÇ Âõ†Ê≠§ÔºåÂè™Ë¶ÅËÉΩÂ∞ÜÈóÆÈ¢òËΩ¨Âåñ‰∏∫Ê®°Êãü‰∏ÄÁ≥ªÂàóÁ¶ªÊï£ token ÁöÑÊµÅÁ®ãÔºåÁêÜËÆ∫‰∏äÈÉΩÂèØ‰ª•Â∫îÁî® LLM Êù•Ëß£ÂÜ≥„ÄÇ ÂÆûÈôÖ‰∏äÔºåÈöèÁùÄÂ§ßÂûãËØ≠Ë®ÄÊ®°ÂûãÊäÄÊúØÊ†àÁöÑÊó•ÁõäÊàêÁÜüÔºåÊàë‰ª¨ÂèØËÉΩ‰ºöÁúãÂà∞Ë∂äÊù•Ë∂äÂ§öÁöÑÈóÆÈ¢òË¢´Á∫≥ÂÖ•ËøôÁßçÂª∫Ê®°ËåÉÂºè„ÄÇ‰πüÂ∞±ÊòØËØ¥ÔºåÈóÆÈ¢òÂõ∫ÂÆöÂú®‰ΩøÁî® LLM ËøõË°å„Äé‰∏ã‰∏Ä‰∏™ token ÁöÑÈ¢ÑÊµã„ÄèÔºåÂè™ÊòØÊØè‰∏™È¢ÜÂüü‰∏≠ token ÁöÑÁî®ÈÄîÂíåÂê´‰πâÊúâÊâÄ‰∏çÂêå„ÄÇ&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://person.zju.edu.cn/xilics#694283&#34;&gt;ZJU-LiXiËÄÅÂ∏à&lt;/a&gt;ÂêåÊ†∑Ë∞àÂèäËøáÁ±ª‰ººËßÇÁÇπÔºàÂéüËØùÂ§ßÊÑèÂ¶Ç‰∏ãÔºâÔºö ÊñáÊú¨„ÄÅËßÜÈ¢ë„ÄÅËØ≠Èü≥„ÄÅÂä®‰ΩúÁ≠âÂú®‰∫∫Á±ªÁúãÊù•Â±û‰∫é„ÄåÂ§öÊ®°ÊÄÅ„Äç‰ø°Âè∑Ôºå‰ΩÜÊâÄË∞ìÁöÑ„ÄåÊ®°ÊÄÅ„ÄçÂÖ∂ÂÆûÂè™ÊòØ‰∫∫Á±ªÂú®‰ø°ÊÅØÂ≠òÂÇ®ÊñπÂºè‰∏äÁöÑ‰∏ÄÁßçÂàÜÁ±ªÊ¶ÇÂøµ„ÄÇ Â∞±ÂÉè&lt;code&gt;.txt&lt;/code&gt;Âíå&lt;code&gt;.png&lt;/code&gt;Êñá‰ª∂ÔºåËôΩÁÑ∂Âú®ËßÜËßâÂëàÁé∞ÂíåÈ´òÁ∫ßË°®Áé∞ÂΩ¢Âºè‰∏äÊúâÊâÄ‰∏çÂêåÔºå‰ΩÜÂÆÉ‰ª¨Êú¨Ë¥®‰∏äÂπ∂Ê≤°ÊúâÊ†πÊú¨Âå∫Âà´„ÄÇ ‰πãÊâÄ‰ª•Âá∫Áé∞„ÄåÂ§öÊ®°ÊÄÅ„ÄçËøô‰∏™Ê¶ÇÂøµÔºå‰ªÖ‰ªÖÊòØÂõ†‰∏∫‰∫∫Á±ªÂú®‰∏çÂêåÁöÑÊÑüÁü•Â±ÇÈù¢‰∏äÂØπËøô‰∫õ‰ø°Âè∑ÁöÑÂàÜÁ±ªÈúÄÊ±Ç„ÄÇ ÁÑ∂ËÄåÔºåÂØπ‰∫éÊú∫Âô®Êù•ËØ¥ÔºåÊó†ËÆ∫‰ø°Âè∑Êù•Ëá™‰ΩïÁßç„ÄåÊ®°ÊÄÅ„ÄçÔºåÊúÄÁªàÂÆÉ‰ª¨ÈÉΩÂè™ÊòØ‰ª•‰∏Ä‰∏≤‰∫åËøõÂà∂ÁöÑ„ÄåÂçïÊ®°ÊÄÅ„ÄçÊï∞Â≠óÂ∫èÂàóÊù•ÂëàÁé∞„ÄÇ Êú∫Âô®Âπ∂‰∏ç‰ºöÂå∫ÂàÜËøô‰∫õ‰ø°Âè∑ÁöÑÊ®°ÊÄÅÊù•Ê∫êÔºåËÄåÂè™ÊòØÂ§ÑÁêÜÂíåÂàÜÊûêËøô‰∫õÂ∫èÂàóËÉåÂêéÊâÄÊâøËΩΩÁöÑ‰ø°ÊÅØÂÜÖÂÆπ„ÄÇ&lt;/p&gt; &#xA; &lt;p&gt;‰∏™‰∫∫ËÆ§‰∏∫&lt;strong&gt;G&lt;/strong&gt;enerative &lt;strong&gt;P&lt;/strong&gt;retrained &lt;strong&gt;T&lt;/strong&gt;ransformer (GPT) ÊØî &lt;strong&gt;L&lt;/strong&gt;arge &lt;strong&gt;L&lt;/strong&gt;anguage &lt;strong&gt;M&lt;/strong&gt;odel (LLM)Êõ¥‰∏∫Ë¥¥ÂàáÔºå Âõ†Ê≠§Êú¨‰∫∫Ë°®Ëææ‰∏äÊõ¥‰π†ÊÉØÁî®&#34;GPT&#34;Âéª‰ª£Ë°®LLM/VLM/Á±ªGPTÊû∂ÊûÑÁöÑÁ≥ªÂàóÊ®°ÂûãÔºåËÄåÈùû‰∏∫‰∫ÜËπ≠OpenAIÁöÑÁÉ≠Â∫¶„ÄÇ&lt;/p&gt; &#xA; &lt;p&gt;Ëá≥Ê≠§ÔºåÊàë‰ª¨ÂèØ‰ª•Áî®‰∏ÄÂè•ËØùÊÄªÁªìGPTÁöÑÊâÄ‰ΩúÊâÄ‰∏∫Ôºö&lt;/p&gt; &#xA; &lt;p&gt;GPTÊ®°ÂûãÊ†πÊçÆÁé∞ÊúâtokenÈ¢ÑÊµãËæìÂá∫‰∏ã‰∏Ä‰∏™‰∏ã‰∏ã‰∏Ä‰∏™‰∏ã‰∏ã‰∏ã‰∏Ä‰∏™token ...ÔºåÁõ¥Âà∞Ê®°ÂûãËæìÂá∫ÁªìÊùüÁ¨¶ÔºõÊ≠§Â§ÑÁöÑ&#34;token&#34;ÂÖ∂ÂÆûÂπ∂‰∏çÈúÄË¶Å‰∏ÄÂÆöÊòØÊñáÊú¨ÔºÅ&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;gt; ÂØπ‰∫éLLMÊ®°ÂûãÔºåÂ¶ÇÊûúÈúÄË¶ÅÁêÜËß£&#34;ÂõæÁâá&#34;ÔºåÊàë‰ª¨Âè™Ë¶ÅÊää&#34;ÂõæÁâá&#34;‰Ωú‰∏∫ÂØπ‰∏ÄÁßçÁâπÊÆäÁöÑ‰ªéÊù•Ê≤°ËßÅËøáÁöÑ&#34;Â§ñÂõΩËØ≠Ë®Ä&#34;ÔºåÈÄöËøá&#34;Â§ñËØ≠ËØçÂÖ∏&#34;ÁøªËØëÂêéÂç≥ÂèØ‰Ωú‰∏∫ÁâπÊÆäÁöÑËØ≠Ë®ÄËæìÂÖ•LLM&#xA;&amp;gt; ÂØπ‰∫éLLMÊ®°ÂûãÔºåÂ¶ÇÊûúÈúÄË¶ÅÁêÜËß£&#34;Èü≥È¢ë&#34;ÔºåÊàë‰ª¨Âè™Ë¶ÅÊää&#34;Èü≥È¢ë&#34;‰Ωú‰∏∫ÂØπ‰∏ÄÁßçÁâπÊÆäÁöÑ‰ªéÊù•Ê≤°ËßÅËøáÁöÑ&#34;Â§ñÂõΩËØ≠Ë®Ä&#34;ÔºåÈÄöËøá&#34;Â§ñËØ≠ËØçÂÖ∏&#34;ÁøªËØëÂêéÂç≥ÂèØ‰Ωú‰∏∫ÁâπÊÆäÁöÑËØ≠Ë®ÄËæìÂÖ•LLM&#xA;&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;u&gt;&lt;strong&gt;‰∏∫‰∫ÜÂæóÂà∞MiniMind-VÔºåÊàë‰ª¨Âè™ÈúÄË¶ÅÂÆåÊàêËøô2‰ª∂‰∫ãÂç≥ÂèØÔºö&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;ÂÄüÂä©ÊìÖÈïøÁøªËØëÂõæÁâáÁöÑ &lt;strong&gt;&#34;Â§ñËØ≠ËØçÂÖ∏&#34;&lt;/strong&gt; ÔºåÊääÂõæÁâá‰ªé &lt;strong&gt;&#34;Â§ñÂõΩËØ≠Ë®Ä&#34;&lt;/strong&gt; ÁøªËØë‰∏∫Ê®°Âûã‰æø‰∫éÁêÜËß£ÁöÑ &lt;strong&gt;&#34;LLMËØ≠Ë®Ä&#34;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;li&gt;ËÆ≠ÁªÉÂæÆË∞ÉLLMÔºå‰ΩøÂÖ∂Âíå &lt;strong&gt;&#34;Â§ñËØ≠ËØçÂÖ∏&#34;&lt;/strong&gt; Â∫¶ËøáÁ£®ÂêàÊúüÔºå‰ªéËÄåÊõ¥Â•ΩÁöÑÁêÜËß£ÂõæÁâá&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&#34;Â§ñËØ≠ËØçÂÖ∏&#34; Áß∞‰πã‰∏∫Visual EncoderÊ®°Âûã„ÄÇ ÂíåLlaVA„ÄÅQwen-VLÁ≠âËßÜËßâËØ≠Ë®ÄÊ®°ÂûãÁ±ª‰ººÔºåMiniMind-VÂêåÊ†∑ÈÄâÁî®ÂºÄÊ∫êClipÁ≥ªÂàóÊ®°Âûã‰Ωú‰∏∫Visual Encoder„ÄÇ ÂÖ∑‰Ωì‰ΩøÁî®&lt;a href=&#34;https://huggingface.co/openai/clip-vit-base-patch16&#34;&gt;clip-vit-base-patch16&lt;/a&gt;Ôºå ‰∏ÄÁßçÂü∫‰∫é ViT-B/16 Êû∂ÊûÑÁöÑÁªèÂÖ∏Visual EncoderÁî®‰∫éÊèèËø∞ÂõæÂÉèÊñáÊú¨‰ø°ÊÅØ„ÄÇ ËæìÂÖ•ÁöÑÂõæÂÉèÂ∞∫ÂØ∏‰∏∫224x224ÔºåÂõ†‰∏∫ÂàíÂàÜÁöÑPatchÊòØ16√ó16ÔºåÊâÄ‰ª•‰ºö‰∫ßÁîü16*16=196‰∏™token‰Ωú‰∏∫encoderÁºñÁ†ÅÂ±ÇÁöÑËæìÂÖ•Ôºå ÊúÄÁªà‰∫ßÁîü1√ó768Áª¥ÁöÑÂµåÂÖ•ÂêëÈáèÁî®‰∫éÂíåÊñáÊú¨ÂØπËÆ°ÁÆóËØØÂ∑Æ„ÄÇ Êàë‰ª¨Âπ∂‰∏çÈúÄË¶ÅÊúÄÁªàÂµåÂÖ•Ë°®Á§∫ÔºåÂõ†Ê≠§Âè™ÂèñencoderÂ±ÇÁöÑËæìÂá∫Ôºå‰πüÂ∞±ÊòØVITÊ†∏ÂøÉ‰∏ªÂπ≤ÁöÑËæìÂá∫ÁâπÂæÅÂç≥ÂèØ„ÄÇ ÂÆÉÊãøÂà∞Ââç‰∏ÄÂ±ÇÁª¥Â∫¶196√ó768Â§ßÂ∞èÁöÑÁâπÂæÅÔºåÊàë‰ª¨ÊääÂÆÉ‰Ωú‰∏∫196‰∏™visual tokenËæìÂÖ•MiniMind-V„ÄÇ ‰∏éLLMÁöÑÁªìÂêàÂú®Ëé∑ÂèñÂõæÂÉèencoderÁâπÂæÅÂêéÔºå‰∏ÄÊñπÈù¢ÈúÄË¶ÅÊää768Áª¥Â∫¶ÁöÑvisual tokenÂØπÈΩêÂà∞LLMÁöÑÊñáÊú¨tokenÔºå Âè¶‰∏ÄÊñπÈù¢ÔºåË¶ÅÂ∞ÜÂõæÂÉèÁâπÂæÅÊò†Â∞ÑÂà∞‰∏éÊñáÊú¨embeddingÁõ∏ÂêåÁöÑÁ©∫Èó¥ÔºåÂç≥ÊñáÊú¨tokenÂíåÂéüÁîüÁöÑËßÜËßâtokenÈúÄË¶ÅÁ£®ÂêàÂπ∂‰∏çËÉΩÁõ¥Êé•Âú∞‰∏ÄËßÜÂêå‰ªÅÔºå ÂèØ‰ª•Áß∞‰πã‰∏∫Ë∑®Ê®°ÊÄÅÁöÑÁâπÂæÅÂØπÈΩê„ÄÇ &lt;a href=&#34;https://arxiv.org/pdf/2304.08485&#34;&gt;LlaVA-1&lt;/a&gt;‰ΩøÁî®ÁÆÄÂçïÁöÑÊó†ÂÅèÁ∫øÊÄßÂèòÊç¢ÂÆåÊàê‰∫ÜËøô‰∏ÄÊìç‰ΩúÔºåÊïàÊûúÂæà‰∏çÈîôÔºåMiniMind-VÂêåÊ†∑Â¶ÇÊ≠§„ÄÇ&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/llava-structure.png&#34; alt=&#34;llava-structure&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Ëá≥Ê≠§ÔºåMiniMind-VÁöÑÂÜÖÈÉ®ÁªìÊûÑÂèòÂåñÂ∑≤ÁªèÂëàÁé∞ÂÆåÊØï„ÄÇ&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;‰∏ãÈù¢ÔºåÊàë‰ª¨ÁÆÄÂçïËÆ®ËÆ∫MiniMind-VÁöÑÂ§ñÈÉ®ËæìÂÖ•ËæìÂá∫ÁöÑÂèòÂåñ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;VLMÁöÑËæìÂÖ•‰æùÁÑ∂ÊòØ‰∏ÄÊÆµÊñáÊú¨ÔºåÂÖ∂‰∏≠ÂåÖÂê´ÁâπÊÆäÁöÑ&lt;img&gt;Âç†‰ΩçÁ¨¶„ÄÇ Âú®ËÆ°ÁÆóÊñáÊú¨ÂµåÂÖ•ÂêéÔºåÂèØ‰ª•Â∞ÜÂõæÂÉèÁºñÁ†ÅÂô®ÁîüÊàêÁöÑÂêëÈáèÊäïÂΩ±Âà∞ËØ•Âç†‰ΩçÁ¨¶ÂØπÂ∫îÁöÑÂµåÂÖ•ÈÉ®ÂàÜÔºåÊõøÊç¢ÊéâÂéüÂÖàÁöÑÂç†‰ΩçÁ¨¶embedding„ÄÇ ‰æãÂ¶ÇÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;image&amp;gt;\nËøô‰∏™ÂõæÂÉè‰∏≠Êúâ‰ªÄ‰πàÂÜÖÂÆπÔºü&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Âú®&lt;code&gt;minimind-v&lt;/code&gt;‰∏≠Ôºå‰ΩøÁî®196‰∏™Â≠óÁ¨¶ÁªÑÊàêÁöÑ &lt;code&gt;@@@...@@@&lt;/code&gt; Âç†‰ΩçÁ¨¶‰ª£ÊõøÂõæÂÉèÔºå‰πãÊâÄ‰ª•ÊòØ196‰∏™Â≠óÁ¨¶ÔºåÂâçÈù¢ÊúâÊâÄÊèêÂèäÔºö ‰ªª‰ΩïÂõæÂÉèÈÉΩË¢´clipÊ®°Âûãencoder‰∏∫196√ó768Áª¥ÁöÑtokenÔºå Âõ†Ê≠§&lt;code&gt;minimind-v&lt;/code&gt;ÁöÑprompt‰∏∫Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;@@@......@@@\nËøô‰∏™ÂõæÁâáÊèèËø∞ÁöÑÊòØ‰ªÄ‰πàÂÜÖÂÆπÔºü&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËÆ°ÁÆóÂÆåembeddingÂíåprojectionÔºåÂπ∂ÂØπÂõæÂÉèÈÉ®ÂàÜtokenÊõøÊç¢ÂêéÊï¥‰∏™ËÆ°ÁÆóËøáÁ®ãÂà∞ËæìÂá∫ÂàôÂíåLLMÈÉ®ÂàÜÊ≤°Êúâ‰ªª‰ΩïÂå∫Âà´„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/minimind-v-input.png&#34; alt=&#34;input&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;‰∏ÄÊ¨°ÊÄßÂ§öÂõæÁöÑÂÆûÁé∞ÊñπÊ≥ïÂ∞±ÊòØÈÄöËøáÊ≥®ÂÖ•Â§ö‰∏™&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;ÂõæÂÉèÂç†‰ΩçÁ¨¶ËøõË°åÂÆûÁé∞Ôºå‰∏çÈúÄË¶Å‰øÆÊîπ‰ªª‰ΩïÊ°ÜÊû∂„ÄÇ&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; ËßÜÈ¢ëÁêÜËß£ÁöÑÊãìÂ±ïÊÄùË∑Ø &lt;/summary&gt; &#xA; &lt;p&gt;write by &lt;a href=&#34;https://github.com/xinyanghuang7&#34;&gt;@xinyanghuang7&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;ÂØπ‰∫éÂ§öÊ®°ÊÄÅÂ§ßÊ®°ÂûãÁöÑËßÜÈ¢ëÁêÜËß£ËÉΩÂäõÔºå‰∏Ä‰∏™ÂèØË°åÁöÑÊÄùË∑ØÊòØÂèÇËÄÉÁé∞ÊúâMiniCPM-V 2.6 ËøõË°åËßÜÈ¢ëÁêÜËß£ÁöÑPythonÁ§∫‰æã„ÄÇ ‰∏ªË¶ÅÊÄùÊÉ≥ÊòØÈÄöËøáÊèêÂèñËßÜÈ¢ëÂÖ≥ÈîÆÂ∏ßÔºåËÄåÂêéËøõË°åÂ§öÂõæÊé®ÁêÜ„ÄÇ Âõ†Ê≠§ÔºåÂ¶ÇÊûúÂ∏åÊúõÂú®MiniMind-V‰∏≠Ê∑ªÂä†ËßÜÈ¢ëÁêÜËß£ËÉΩÂäõÔºåÂèØ‰ª•Âú®Áé∞ÊúâÂ§öÂõæËÆ≠ÁªÉÁöÑÂü∫Á°Ä‰∏äÔºåÂèÇËÄÉÊ≠§pythonËÑöÊú¨‰∏≠ÂØπ‰∫éÂÖ≥ÈîÆÂ∏ßÁöÑÊèêÂèñÊñπÊ≥ïÔºåËÄåÂêéÂä†Â§ßËÆ≠ÁªÉÊñá‰ª∂‰∏≠ÊîØÊåÅÂõæÁâáÁöÑÊï∞Èáè„ÄÇ ÊâÄÊîØÊåÅÁöÑMAX_NUM_FRAMESË∂äÂ§öÔºåÊâÄÊ∂àËÄóÁöÑÊòæÂ≠òË∂äÂ§ß„ÄÇ&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;import torch&#xA;from PIL import Image&#xA;from transformers import AutoModel, AutoTokenizer&#xA;from decord import VideoReader, cpu  # pip install decord&#xA;&#xA;model = AutoModel.from_pretrained(&#39;openbmb/MiniCPM-V-2_6&#39;, trust_remote_code=True,&#xA;                                  attn_implementation=&#39;sdpa&#39;,&#xA;                                  torch_dtype=torch.bfloat16)  # sdpa or flash_attention_2, no eager&#xA;model = model.eval().cuda()&#xA;tokenizer = AutoTokenizer.from_pretrained(&#39;openbmb/MiniCPM-V-2_6&#39;, trust_remote_code=True)&#xA;&#xA;MAX_NUM_FRAMES = 64  # if cuda OOM set a smaller number&#xA;&#xA;&#xA;def encode_video(video_path):&#xA;    def uniform_sample(l, n):&#xA;        gap = len(l) / n&#xA;        idxs = [int(i * gap + gap / 2) for i in range(n)]&#xA;        return [l[i] for i in idxs]&#xA;&#xA;    vr = VideoReader(video_path, ctx=cpu(0))&#xA;    sample_fps = round(vr.get_avg_fps() / 1)  # FPS&#xA;    frame_idx = [i for i in range(0, len(vr), sample_fps)]&#xA;    if len(frame_idx) &amp;gt; MAX_NUM_FRAMES:&#xA;        frame_idx = uniform_sample(frame_idx, MAX_NUM_FRAMES)&#xA;    frames = vr.get_batch(frame_idx).asnumpy()&#xA;    frames = [Image.fromarray(v.astype(&#39;uint8&#39;)) for v in frames]&#xA;    print(&#39;num frames:&#39;, len(frames))&#xA;    return frames&#xA;&#xA;&#xA;video_path = &#34;video_test.mp4&#34;&#xA;frames = encode_video(video_path)&#xA;question = &#34;Describe the video&#34;&#xA;msgs = [&#xA;    {&#39;role&#39;: &#39;user&#39;, &#39;content&#39;: frames + [question]},&#xA;]&#xA;&#xA;# Set decode params for video&#xA;params = {}&#xA;params[&#34;use_image_id&#34;] = False&#xA;params[&#34;max_slice_nums&#34;] = 2  # Â¶ÇÊûúcuda OOM‰∏îËßÜÈ¢ëÂàÜËæ®ÁéáÂ§ß‰∫é448*448ÂèØËÆæ‰∏∫1&#xA;&#xA;answer = model.chat(&#xA;    image=None,&#xA;    msgs=msgs,&#xA;    tokenizer=tokenizer,&#xA;    **params&#xA;)&#xA;print(answer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Ëá≥Ê≠§Ôºå&lt;code&gt;MiniMind-V&lt;/code&gt;ÁöÑÊâÄÊúâÁªÜËäÇÂ∑≤ÁªèÂëàÁé∞ÂÆåÊØï„ÄÇ &lt;code&gt;MiniMind-V&lt;/code&gt;ÁöÑÊ®°ÂûãÂ≠êÁ±ªÂÆåÂÖ®ÁªßÊâøËá™&lt;code&gt;MiniMind&lt;/code&gt;Ôºå ‰ªÖÂü∫‰∫éÂêéËÄÖÂÅö&lt;strong&gt;ÊúÄÂ∞è&lt;/strong&gt;ÂèòÊõ¥ËÄå‰∫ßÁîüÔºå ÂÖ∂Ê†∏ÂøÉÁÆóÊ≥ïÊîπÂä®&lt;code&gt;&amp;lt; 50Ë°å&lt;/code&gt;ÔºåËøÅÁßªÈöæÂ∫¶ÊûÅ‰Ωé„ÄÇ Âõ†Ê≠§ÂèØËÉΩÂíå&lt;code&gt;LlAVA&lt;/code&gt;Á≠âÊ®°ÂûãÁªÜËäÇÂèØËÉΩÂ≠òÂú®Âå∫Âà´Ôºå‰ΩÜÊÄùË∑ØÂÆåÂÖ®Áªü‰∏Ä„ÄÇ&lt;/p&gt; &#xA;&lt;h1&gt;üìå Experiment&lt;/h1&gt; &#xA;&lt;h2&gt;‚Ö† Êï∞ÊçÆÈõÜ&lt;/h2&gt; &#xA;&lt;p&gt;Êù•Ê∫êÔºö&lt;a href=&#34;https://huggingface.co/datasets/LinkSoul/Chinese-LLaVA-Vision-Instructions&#34;&gt;Chinese-LLaVA-Vision&lt;/a&gt; ÂåÖÂê´Á∫¶57‰∏áÂº†È¢ÑËÆ≠ÁªÉÂõæÂÉèÔºåÊù•Ëá™CC-3MÂíåCOCO 2014Ôºõ &lt;a href=&#34;https://huggingface.co/datasets/BUAADreamer/llava-en-zh-300k&#34;&gt;llava-en-zh-300k&lt;/a&gt; ÂåÖÂê´300kÊù°Êåá‰ª§ÂæÆË∞ÉÊï∞ÊçÆÂíå15‰∏áÂº†ÂõæÂÉè„ÄÇ ÈóÆÁ≠îÂÜÖÂÆπÁªèËøáÁøªËØëÔºå ÂØπ‰∏≠ÊñáÊîØÊåÅÊõ¥ÂèãÂ•ΩÔºåËøõ‰∏ÄÊ≠•ÁªèËøáÊï¥ÁêÜÂπ∂&lt;code&gt;resize&lt;/code&gt;„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;(pretrain_vlm_data.jsonl) È¢ÑËÆ≠ÁªÉÊï∞ÊçÆÈõÜÊ†ºÂºèÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;conversations&#34;: [&#xA;    {&#xA;      &#34;role&#34;: &#34;user&#34;,&#xA;      &#34;content&#34;: &#34;Êèê‰æõÁªôÂÆöÂõæÂÉèÁöÑÁÆÄË¶ÅÊèèËø∞„ÄÇ\n&amp;lt;image&amp;gt;&#34;&#xA;    },&#xA;    {&#xA;      &#34;role&#34;: &#34;assistant&#34;,&#xA;      &#34;content&#34;: &#34;Ê©ÑÊ¶ÑÊ≤πÊòØËá™Áî±‰ΩøÁî®ÁöÑÂÅ•Â∫∑ÊàêÂàÜ„ÄÇ&#34;&#xA;    }&#xA;  ],&#xA;  &#34;image&#34;: &#34;GCC_train_002582585.jpg&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(sft_vlm_data.jsonl) ÂçïÂõæÊåá‰ª§ÂæÆË∞ÉÊï∞ÊçÆÈõÜÊ†ºÂºèÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;conversations&#34;: [&#xA;    {&#xA;      &#34;role&#34;: &#34;user&#34;,&#xA;      &#34;content&#34;: &#34;ÈóπÈíüÁöÑ‰ΩçÁΩÆÂØπÁù°Áú†Ë¥®ÈáèÊúâ‰ªÄ‰πàÂΩ±ÂìçÔºü&amp;lt;image&amp;gt;&#34;&#xA;    },&#xA;    {&#xA;      &#34;role&#34;: &#34;assistant&#34;,&#xA;      &#34;content&#34;: &#34;ÊääÊï∞Â≠óÈóπÈíüÊîæÂú®Â∫äÂ§¥Êüú...&#34;&#xA;    }&#xA;  ],&#xA;  &#34;image&#34;: &#34;train-00000-of-00001_image_0_0.jpg&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(sft_vlm_data_multi.jsonl) Â§öÂõæÊåá‰ª§ÂæÆË∞ÉÊï∞ÊçÆÈõÜÊ†ºÂºèÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;conversations&#34;: [&#xA;    {&#xA;      &#34;role&#34;: &#34;user&#34;,&#xA;      &#34;content&#34;: &#34;context: Source Image: &amp;lt;image&amp;gt; Target Image: &amp;lt;image&amp;gt; Instruction: What is the correct image edit instruction that can transfrom the source image to target image?&amp;lt;image&amp;gt;&#34;&#xA;    },&#xA;    {&#xA;      &#34;role&#34;: &#34;assistant&#34;,&#xA;      &#34;content&#34;: &#34;take the people out of the back in the photo. Remove the two people behind the woman in the white dress and the man in the blue suit. remove people behind the couple in the centre&#34;&#xA;    }&#xA;  ],&#xA;  &#34;image&#34;: &#34;0.jpg, 1.jpg&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Êï∞ÊçÆËØ¥Êòé &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Â§öÂõæÊï∞ÊçÆÈõÜËßÑÊ®°Áõ∏ÂØπËæÉÂ∞è‰∏î‰∏∫Ëã±ÊñáÂØπËØùÔºåÊï∞ÊçÆÈõÜ‰ªÖÂåÖÂê´‰∏§ÂõæÂØπÊØîÁöÑÂú∫ÊôØÔºåÂõ†Ê≠§ÂæÆË∞ÉÊïàÊûúÊúâÈôêÔºåËøôÈáåÂè™Êèê‰æõ‰∏ÄÁßçÂèÇËÄÉÊÄùË∑Ø„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;jsonl&lt;/code&gt;Âùá‰∏∫ÊñáÊú¨Êåá‰ª§Ôºå&lt;code&gt;images.zip&lt;/code&gt;Âùá‰∏∫ÈÖçÂ•óÁöÑÂõæÂÉèÊï∞ÊçÆÔºà‰∏ãËΩΩÂêéÈúÄË¶ÅËß£ÂéãÔºâ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Êï∞ÊçÆÈõÜ‰∏ãËΩΩÂú∞ÂùÄÔºö(&lt;a href=&#34;https://www.modelscope.cn/datasets/gongjy/minimind-v_dataset&#34;&gt;ModelScope&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/datasets/jingyaogong/minimind-v_dataset&#34;&gt;HuggingFace&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;‚Ö° ËÆ≠ÁªÉ&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;train_pretrain_vlm&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;È¢ÑËÆ≠ÁªÉ‰ªé595KÊù°Êï∞ÊçÆÈõÜ‰∏≠Â≠¶‰π†ÂõæÁâáÁöÑÈÄöÁî®Áü•ËØÜÔºåÊØîÂ¶ÇÈπøÊòØÈπøÔºåÁãóÊòØÁãó„ÄÇ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;train_sft_vlm&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Êåá‰ª§ÂæÆË∞É‰ªé300KÊù°ÁúüÂÆûÂØπËØùÊï∞ÊçÆÈõÜ‰∏≠Â≠¶‰π†ÂØπÂõæÁâáÊèêÈóÆÁöÑÁúüÂÆûÈóÆÁ≠îÊ†ºÂºèÔºåÊõ¥Á¨¶Âêà‰∏é‰∫∫Á±ªÁöÑ‰∫§ÊµÅ‰π†ÊÉØ„ÄÇ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;train_sft_vlm&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Â§öÂõæÂæÆË∞ÉÊèê‰æõdemoÔºöÈ∏üÁ±ªÂØπÊØîÊï∞ÊçÆÈõÜÔºåÈïøÂ∫¶‰∏∫13.6kÁöÑÁúüÂÆûÈóÆÁ≠îÊ†ºÂºè„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ËÆ≠ÁªÉÊó∂ÂùáÂÜªÁªìvisual encoder‰πüÂ∞±ÊòØclipÊ®°ÂûãÊ¢ØÂ∫¶Ôºå Âè™ËÆ≠ÁªÉProjectionÂíåLLM‰∏§ÈÉ®ÂàÜ„ÄÇ È¢ÑËÆ≠ÁªÉ‰∏≠ÔºåÂè™ËÆæÁΩÆProjectionÂíåLLMÁöÑÊúÄÂêé‰∏ÄÂ±ÇÂèÇÊï∞ÂèØÂ≠¶‰π†„ÄÇ Êåá‰ª§ÂæÆË∞É‰∏≠ÔºåËÆæÁΩÆProjectionÂíåLLMÁöÑÂÖ®ÈÉ®ÂèÇÊï∞ÂèØÂ≠¶‰π†„ÄÇ&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ËÆ≠ÁªÉÊó∂Èó¥ÂíåLossËµ∞ÂäøÔºà‰ªÖ‰æõÂèÇËÄÉÔºâ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Pretrain [512+8] &amp;amp; [768+16] &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/pretrain_loss.png&#34; alt=&#34;input&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SFT [512+8] &amp;amp; [768+16] &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/images/sft_loss.png&#34; alt=&#34;input&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚Ö¢ Ê®°ÂûãÊùÉÈáç&lt;/h2&gt; &#xA;&lt;p&gt;(ÂéüÁîüPyTorch&lt;code&gt;*.pth&lt;/code&gt;ÊùÉÈáçÊñá‰ª∂) ‰∏ãËΩΩÂú∞ÂùÄÔºö (&lt;a href=&#34;https://www.modelscope.cn/models/gongjy/MiniMind2-V-PyTorch&#34;&gt;ModelScope&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/jingyaogong/MiniMind2-V-PyTorch&#34;&gt;HuggingFace&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;(&lt;code&gt;Transformers&lt;/code&gt;Ê†ºÂºèÊ®°Âûã) ‰∏ãËΩΩÂú∞ÂùÄÔºö (&lt;a href=&#34;https://www.modelscope.cn/profile/gongjy&#34;&gt;ModelScope&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/collections/jingyaogong/minimind-v-67000833fb60b3a2e1f3597d&#34;&gt;HuggingFace&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ê≥®ÔºöTransformersÁâàÊú¨Âùá‰∏∫ÂçïÂõæÊåá‰ª§ÂæÆË∞ÉÂêéÁöÑ&lt;code&gt;MiniMind-V&lt;/code&gt;Ê®°Âûã&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;üìå Test&lt;/h1&gt; &#xA;&lt;h3&gt;ÊïàÊûúÊµãËØï&lt;/h3&gt; &#xA;&lt;h4&gt;ÂçïÂõæÂØπËØù&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ÂõæÁâá&lt;/th&gt; &#xA;   &lt;th&gt;MiniMind2-V&lt;/th&gt; &#xA;   &lt;th&gt;MiniMind2-V-Small&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E5%9F%8E%E5%B8%82%E8%BD%A6%E6%B0%B4%E9%A9%AC%E9%BE%99-city-traffic.jpg&#34; alt=&#34;city-traffic&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;Âõæ‰∏≠ÊòØ‰∏Ä‰∏™ÁπÅÂøôÁöÑÂüéÂ∏ÇË°óÈÅìÔºå‰∏ÄÊù°ÈïøÈïøÁöÑË°óÈÅì‰∏§ÊóÅÈÉΩÊòØÈ´òÊ•ºÂ§ßÂé¶„ÄÇËøôÊù°Ë°ó‰∏äÊå§Êª°‰∫ÜÊ±ΩËΩ¶„ÄÅÂç°ËΩ¶ÂíåÂÖ¨ÂÖ±Ê±ΩËΩ¶ÔºåËøòÊúâËÆ∏Â§öÂÖ∂‰ªñËΩ¶ËæÜÂú®Ë∑Ø‰∏äË°åÈ©∂„ÄÇÂú®Ë°óÈÅì‰∏äÔºåÂèØ‰ª•ÁúãÂà∞ËÆ∏Â§öÊ±ΩËΩ¶ÔºåÊúâÁöÑÂú®È´òÈÄüË°åÈ©∂ÔºåËÄåÂÖ∂‰ªñÁöÑÂàôÂÅúÂú®Ë°óÈÅì‰∏Ä‰æß„ÄÇÊ≠§Â§ñËøòÊúâ‰∏ÄËæÜÂÖ¨‰∫§ËΩ¶‰πüÂÅúÂú®Ë°óÈÅìÁöÑÂè≥‰æß„ÄÇË°óÈÅì‰∏äÂèØ‰ª•ÁúãÂà∞‰∫§ÈÄöÁÅØÔºåË°®ÊòéËøôÊòØ‰∏Ä‰∏™ÁπÅÂøôÁöÑÂüéÂ∏ÇÁéØÂ¢É„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;Âõæ‰∏≠ÊòØ‰∏Ä‰∏™ÁπÅÂøôÁöÑÂüéÂ∏ÇÊôØË±°ÔºåÊúâÂá†ËæÜÊ±ΩËΩ¶Âíå‰∏ÄËæÜÂç°ËΩ¶Ë°åÈ©∂Âú®ÂüéÂ∏ÇË°óÈÅì‰∏ä„ÄÇÂèØ‰ª•ÁúãÂà∞ËÆ∏Â§ö‰∫§ÈÄö‰ø°Âè∑ÁÅØÔºåÂÖ∂‰∏≠‰∏Ä‰∫õ‰Ωç‰∫éË°óÈÅìÂ∑¶‰æßÔºåÂè¶‰∏Ä‰∫õÂàôÂú®Âè≥‰æß„ÄÇÂèØ‰ª•ÁúãÂà∞ÊúâÂá†‰∏™‰∫∫Âú®Ë°ó‰∏äË°åËµ∞ÔºåÂÖ∂‰∏≠‰∏Ä‰∫õ‰∫∫Á´ôÂæóÁ¶ªË°óÈÅìÊõ¥Ëøë‰∏Ä‰∫õÔºåËÄåÂè¶‰∏Ä‰∫õÂàôË∑ùÁ¶ªËæÉËøú„ÄÇËøòÊúâ‰∏Ä‰∏™ÂÅúËΩ¶Ê†áÂøó‰Ωç‰∫éÁîªÈù¢ÁöÑÂ∑¶‰æßÔºåÊöóÁ§∫ÁùÄÂüéÂ∏ÇÁéØÂ¢É„ÄÇÂèØ‰ª•ÁúãÂà∞Ë°óÈÅì‰∏äÊúâ‰∏§ËæÜÊ±ΩËΩ¶Ôºå‰∏ÄËæÜÂú®Âè≥ËæπÔºåÂè¶‰∏ÄËæÜÂú®Â∑¶ËæπÔºåËøòÊúâ‰∏ÄËæÜÂú®Â∑¶Ëæπ„ÄÇËøôÂπÖÂõæÂÉèÊçïÊçâÂà∞‰∫ÜÈÉΩÂ∏ÇÁéØÂ¢É‰∏≠ÂÖ∏ÂûãÁöÑ‰∏ÄÂ§©„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E5%A4%AA%E7%A9%BA%E5%AE%87%E8%88%AA%E5%91%98-Astronaut-Space.jpg&#34; alt=&#34;astronaut&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;ÂõæÁâáÊòæÁ§∫‰∫Ü‰∏Ä‰∏™ÂÆáËà™ÂëòÁöÑÂÆáËà™ÂëòË∫´Á©øÂÆáËà™ÊúçÔºåÂùêÂú®‰∏ÄÊû∂Â§ßÂûãËà™Â§©È£ûÊú∫‰∏ä„ÄÇ‰ªñ‰ª¨‰ºº‰πéÊ≠£Âú®ËøõË°å‰∏ÄÊ¨°ÂÆáËà™ÂëòÁôªÊú∫Êàñ‰∏ãÊú∫ÁöÑÊóÖÁ®ã„ÄÇÂú®ÂÆáËà™ÂëòÁöÑË∫´ÂêéÔºåÊúâ‰∏Ä‰∏™ÁÅ´ÁÆ≠ÂèëÂ∞ÑÊû∂ÔºåÂèØËÉΩÊòØÁî®Êù•ÊîØÊíëÂÆáËà™ÂëòÂú®ÊóÖÁ®ã‰∏≠ÁöÑ‰ªªÂä°„ÄÇÊ≠§Â§ñÔºåËøòÊúâ‰∏ÄÊû∂È£ûÊú∫ÂÅúÂú®Êú∫Â∫ìÈôÑËøëÔºåËøõ‰∏ÄÊ≠•Ë°®ÊòéËøôÊòØ‰∏ÄÊ¨°Ëà™Á©∫Â±ï„ÄÇÂú®È£ûÊú∫ÁöÑÂë®Âõ¥ÔºåËøòÊúâ‰∏Ä‰∫õ‰∫∫Ôºå‰ΩÜ‰ªñ‰ª¨ÁúãËµ∑Êù•Á¶ªÈ£ûÊú∫ÂæàËøë„ÄÇÂèØ‰ª•ÁúãÂà∞‰∏Ä‰∏™‰∫∫Á´ôÂú®È£ûÊú∫ÈôÑËøëÔºåÂèØËÉΩÊ≠£Âú®ËßÇÂØüÊàñÁ≠âÂæÖËà™Â§©È£ûÊú∫ÂáÜÂ§áËµ∑È£û„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;Âú∫ÊôØ‰∏≠Ôºå‰∏ÄÂêçÂ£´ÂÖµÊà¥ÁùÄÂ§¥ÁõîÁ´ôÂú®‰∏ÄÊû∂Â§ßÂûãÈ£ûÊú∫‰∏ä„ÄÇËøôÊû∂È£ûÊú∫‰ºº‰πéÊòØ‰∏ÄÊû∂ÂÜõÁî®ÂÜõÁî®È£ûÊú∫Ôºå‰ºº‰πéÊ≠£ÂáÜÂ§áÁôª‰∏ä‰∏ÄÊû∂È£ûÊú∫„ÄÇÂè¶‰∏Ä‰∏™‰∫∫ÂàôÁ´ôÂú®ÂâçÈù¢ÔºåÂèØËÉΩÊ≠£Âú®ËßÇÂØüÈ£ûË°åËøáÁ®ã„ÄÇÂú®È£ûÊú∫Âë®Âõ¥ÔºåÊúâÂá†‰∏™‰∫∫ÔºåÂÖ∂‰∏≠‰∏Ä‰∫õÁ´ôÂú®Â∑¶‰æßÔºåÂè¶‰∏Ä‰∫õÂàôÁ´ôÂú®Âè≥‰æß„ÄÇ‰ªñ‰ª¨‰ºº‰πéÊ≠£Âú®ËßÇÁúãÈ£ûË°åÂëòÁöÑË°®Áé∞„ÄÇÊ≠§Â§ñÔºåËøòÊúâ‰∏ÄËæÜÂç°ËΩ¶ÂÅúÂú®Èù†ËøëÂ∑¶‰æßÁöÑ‰ΩçÁΩÆÔºåÂèØËÉΩÊòØ‰∏∫‰∫ÜÊõ¥ÂÖ∑‰ΩìÂú∞ËßÇÂØüÈ£ûË°åËøáÁ®ã„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E5%B0%8F%E7%8B%97%E7%BE%8E%E5%A5%B3%E6%B5%B7%E8%BE%B9-Dog-Woman-Sea.jpg&#34; alt=&#34;dog-woman-sea&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;ÂõæÁâá‰∏≠Ôºå‰∏Ä‰∏™Â•≥‰∫∫ÂùêÂú®Ê≤ôÊª©‰∏äÔºåÊâãÈáåÊãøÁùÄ‰∏ÄÂè™ÁôΩËâ≤ÁöÑÁãó„ÄÇÂ•πÁúãËµ∑Êù•ÂÉèÊòØ‰∏™Â•≥‰∫∫ÔºåÂùêÂú®Ê≤ôÂú∞‰∏äÔºåÁúãÁùÄÂ•π„ÄÇ‰∏ÄÂè™Áãó‰πüÂùêÂú®Â•πÊóÅËæπÔºåÁúãËµ∑Êù•ÂæàÊîæÊùæÂíåËàíÈÄÇ„ÄÇÊµ∑Êª©‰∏äÊï£Â∏ÉÁùÄÂÖ∂‰ªñÊ≤ôÊª©Ê∏∏ÂÆ¢ÔºåÊúâ‰∫õ‰∫∫ÂùêÁùÄÔºåËÄåÂè¶‰∏Ä‰∫õ‰∫∫ÂàôÂùêÂú®Êõ¥ËøúÁöÑÂú∞Êñπ„ÄÇËÉåÊôØ‰∏≠ÂèØ‰ª•ÁúãÂà∞‰∏ÄËâòËàπÔºåËøôË°®ÊòéËøôÊòØ‰∏Ä‰∏™ÂèóÊ¨¢ËøéÁöÑÊµ∑Êª©ÊóÖÊ∏∏ÁõÆÁöÑÂú∞„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;‰∏§‰∏™‰∫∫ÂùêÂú®Êµ∑Êª©‰∏äÔºå‰∏ÄËæπÊáíÊ¥ãÊ¥ãÂú∞Ë∫∫Âú®Ê≤ôÊª©‰∏äÔºåÂè¶‰∏ÄËæπÂàôÂùêÁùÄ„ÄÇ‰ªñ‰ª¨‰ºº‰πéÊ≠£Âú®‰∫´ÂèóÊµ∑ËæπÊó∂ÂÖâ„ÄÇÊµ∑Êª©‰∏äÊúâÂá†ÊääÊ§ÖÂ≠êÔºåÂÖ∂‰∏≠‰∏ÄÊääÈù†ËøëÊ≤ôÊª©ÁöÑÂ∑¶‰æßÔºåÂè¶‰∏ÄÊääÂú®‰∏≠Èó¥„ÄÇÊ≠§Â§ñÔºåËøòÊúâ‰∏ÄÂè™ÁãóË∫∫Âú®Ê≤ôÂú∞‰∏äÔºå‰∏∫Ëøô‰∏™Âú∫ÊôØÂ¢ûÊ∑ª‰∫Ü‰∏ÄÁßçÊîæÊùæÁöÑÊ∞îÊ∞õ„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E5%BD%A9%E8%99%B9%E7%80%91%E5%B8%83-Rainbow-Falls.jpg&#34; alt=&#34;rainbow-falls&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;ÁÖßÁâáÊçïÊçâÂà∞‰∏ÄÂπÖÁæé‰∏ΩÂ¶ÇÁîªÁöÑÂ§ßËá™ÁÑ∂Âú∫ÊôØÔºåËÉåÊôØÊòØÈ´òÂ±±Â≥¶Â¥ñ„ÄÇÂú®Ê∞¥ËæπÔºå‰∏ÄÂ∫ßÂ∑®Â§ßÁöÑÂñ∑Ê≥âÊ®™Ë∑®ÁùÄÊ∞¥Èù¢ÔºåÂê∏ÂºïÁùÄËÆ∏Â§öÊ∏∏ÂÆ¢„ÄÇÊ∞¥Èù¢‰∏äÊúâÂá†‰∏™‰∫∫Ôºå‰ªñ‰ª¨ÊàñÁ´ôÊàñÂùêÂú®Âñ∑Ê≥âÂë®Âõ¥ÔºåÊàñÁ´ôÊàñÂùê„ÄÇÊúâ‰∫õ‰∫∫ÂèØ‰ª•ÁúãÂà∞‰ªñ‰ª¨Âú®Ê∞¥‰∏≠Ë°åËµ∞ÔºåËÄåÂÖ∂‰ªñ‰∫∫ÂàôÁ´ôÂú®Ê∞¥Ëæπ„ÄÇÊÄª‰ΩìËÄåË®ÄÔºåËøôÂπÖÁîªÊèèÁªòÁöÑÊòØ‰∏Ä‰∏™Áæé‰∏ΩËÄåÂÆÅÈùôÁöÑÁéØÂ¢ÉÔºåÂú®ÈÇ£Èáå‰∫∫‰ª¨ÂèØ‰ª•Ê¨£ËµèÂà∞Â¶ÇÁîªËà¨ÁöÑÁæéÊôØ„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;Âú®‰∏Ä‰∏™Áæé‰∏ΩÁöÑËìùËâ≤Â§©Á©∫‰∏ãÔºå‰∏ÄÂ∫ßÂ∑®Â§ßËÄåÂ∑®Â§ßÁöÑÁôΩËâ≤ÁÄëÂ∏É‰∏äÊñπÊÇ¨ÊåÇÁùÄ‰∏ÄÂè™Â∑®Â§ßÁöÑÊπøÊµÅÊ∞¥„ÄÇËøôÂè™ÁÄëÂ∏É‰Ωç‰∫é‰∏ÄÂ∫ßÂ±±‰∏äÔºå‰∏∫Êï¥‰∏™Âú∫ÊôØÂ¢ûÊ∑ª‰∫Ü‰∏ÄÁßçËø∑‰∫∫ËÄåÂèàÂÆÅÈùôÁöÑÊ∞îÊ∞õ„ÄÇÂú®ËøôÂπÖÂõæÂÉèÁöÑËÉåÊôØ‰∏≠ÔºåÂèØ‰ª•ÁúãÂà∞Âá†ËâòËàπÔºåÂÖ∂‰∏≠‰∏Ä‰∫õÈù†ËøëÊ∞¥ËæπÔºåÂÖ∂‰ªñÁöÑÂàôÁ¶ªÂæóËæÉËøú„ÄÇËøô‰∫õËàπÂè™‰ºº‰πéÊ≠£Âú®‰∏∫È£éÊôØÊàñÊà∑Â§ñÊ¥ªÂä®ÂÅöÂáÜÂ§á„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E6%A4%85%E5%AD%90%E8%80%81%E4%BA%BA%E7%9C%8B%E4%B9%A6-Chair-Elderly-Reading.jpg&#34; alt=&#34;elderly-reading&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;Âõæ‰∏≠Ôºå‰∏Ä‰∏™Áî∑‰∫∫ÂùêÂú®ÂÖ¨Âõ≠ÁöÑÈïøÊ§Ö‰∏äÔºåÊóÅËæπÊòØ‰∏ÄÊääÁªøËâ≤Ê§ÖÂ≠ê„ÄÇ‰ªñË∫´ËæπÊúâ‰∏ÄÊú¨ÊâìÂºÄÁöÑ‰π¶Ôºå‰∏äÈù¢ÂÜôÁùÄ&#34;ËØª‰π¶&#34;‰∏ÄÂè•ËØùÔºåÊöóÁ§∫‰ªñÂèØËÉΩÊ≠£Âú®ÈòÖËØª„ÄÇÂÖ¨Âõ≠ÈáåÊúâ‰∏ÄÂº†ÈïøÊ§ÖÂíå‰∏ÄÂº†ÂÖ¨Âõ≠ÈïøÊ§ÖÔºå‰∏∫Âë®Âõ¥ÁöÑÁéØÂ¢ÉÂ¢ûÊ∑ª‰∫ÜÂá†ÂàÜÁîüÊ∞î„ÄÇÂú®ÂÖ¨Âõ≠ÁöÑÂë®Âõ¥ÔºåÊúâÂá†ËæÜÊ±ΩËΩ¶Âíå‰∏ÄËæÜÂç°ËΩ¶ÔºåË°®ÊòéËøôÊòØ‰∏Ä‰∏™ÂÖ¨ÂÖ±Âå∫Âüü„ÄÇÊ≠§Â§ñÔºåËøòÂèØ‰ª•ÁúãÂà∞‰∏Ä‰∏™‰∫∫Á´ôÂú®ÂÖ¨Âõ≠ÁöÑ‰∏çÂêå‰ΩçÁΩÆ‰∏äÔºåÂèØËÉΩÊòØÁ≠âÁùÄ‰∏äË∑ØÊàñËøáÈ©¨Ë∑Ø„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;‰∏Ä‰∏™Á©øÁùÄÁü≠Ë£§ÁöÑËÄÅ‰∫∫ÂùêÂú®ÂÖ¨Âõ≠ÈïøÊ§Ö‰∏äÔºåÂë®Âõ¥ÊòØÊ†ëÊú®„ÄÇ‰ªñ‰ºº‰πéÊ≠£Âú®ËØª‰∏ÄÊú¨‰π¶ÔºåÂèØËÉΩÊòØÂú®ËØª‰π¶„ÄÇËÉåÊôØ‰∏≠Êúâ‰∏ÄÂ∫ßÈïøÂá≥Ôºå‰∏∫Ëøô‰∏™Âú∫ÊôØÊèê‰æõ‰∫ÜÂÖÖË∂≥ÁöÑÂ∫ß‰Ωç„ÄÇÂú®ËÉåÊôØ‰∏≠ÔºåÂèØ‰ª•ÁúãÂà∞‰∏ÄÊääÊ§ÖÂ≠êÂíå‰∏ÄÂº†È§êÊ°åÔºåËøôËØ¥ÊòéËøô‰∏™Âú∫ÊôØÂèØËÉΩÊòØÂú®‰∏Ä‰∏™Êà∑Â§ñÂ∫ß‰ΩçÂå∫ÔºåÈÇ£ÈáåÊúâÊ§ÖÂ≠ê‰æõ‰∫∫‰ª¨Âùê‰∏ãÊù•ÊîæÊùæ„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E7%86%8A%E7%8C%AB%E8%8D%89%E5%9C%B0-Panda-Grassland.jpg&#34; alt=&#34;panda-grassland&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;Âõæ‰∏≠Ôºå‰∏ÄÂè™ÁôΩËâ≤ÁöÑÊ£ïÁÜäÂùêÂú®ËçâÂú∞‰∏äÔºåÊóÅËæπÊòØ‰∏ÄÂè™ÈïøÁùÄÊ£ïËâ≤ÊñëÁÇπÁöÑÂ§ßÁÜä„ÄÇËøôÂè™ÁÜäÁúãËµ∑Êù•ÂæàÂÆ≥ÁæûÊàñÈ°ΩÁöÆÔºåÂõ†‰∏∫ÂÆÉÊ≠£Ë∫∫Âú®ËçâÂú∞‰∏ä‰ºëÊÅØÔºåÁúã‰∏äÂéªÂæàÊîæÊùæ„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;Âú®ËøôÂπÖÂõæÂÉè‰∏≠Ôºå‰∏ÄÂè™Ê£ïËâ≤ÁöÑÁÜäÊ≠£Âú®ËçâÂú∞‰∏äÊº´Ê≠•„ÄÇËøôÂè™ÁÜäË¢´ÊîæÁΩÆÂú®ËçâÂú∞‰∏äÔºåÂç†ÊçÆ‰∫ÜÁîªÈù¢ÁöÑÂ§ßÈÉ®ÂàÜÁ©∫Èó¥„ÄÇÂÆÉ‰ºº‰πéÊ≠£Âú®Ëá™ÁÑ∂ÁéØÂ¢É‰∏≠Ë°åËµ∞ÔºåÂèØËÉΩÊòØÂú®ËçâÂú∞‰∏ä„ÄÇÂú®ËÉåÊôØ‰∏≠ÔºåÊúâÂá†Ê£µÊ†ëÔºå‰∏∫ÁîªÈù¢Â¢ûÊ∑ª‰∫ÜËá™ÁÑ∂ÂÖÉÁ¥†„ÄÇ‰∏ÄÂè™È∏üÂú®Âú∫ÊôØÁöÑ‰∏≠Èó¥ÈôÑËøëÈ£ûÁøîÔºå‰∏∫ÁîªÈù¢Â¢ûÊ∑ª‰∫ÜÁîüÊ∞îÂãÉÂãÉÁöÑÊ∞îÊ∞õ„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E8%87%AA%E8%A1%8C%E8%BD%A6%E9%B2%9C%E8%8A%B1-Bicycle-Flowers.jpg&#34; alt=&#34;bicycle-flowers&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;ÂõæÁâáÂ±ïÁ§∫‰∫Ü‰∏Ä‰∏™ÊºÇ‰∫ÆÁöÑËä±Áì∂ÔºåÈáåÈù¢ÊèíÊª°‰∫Ü‰∫îÈ¢úÂÖ≠Ëâ≤ÁöÑÈ≤úËä±ÂíåËä±Êùü„ÄÇËøô‰∫õËä±ÊùüÊï£ËêΩÂú®Êï¥‰∏™Ëä±Áì∂‰∏≠ÔºåÁªô‰∫∫‰∏ÄÁßçËµèÂøÉÊÇ¶ÁõÆÁöÑÊÑüËßâ„ÄÇËä±Áì∂ÈáåÊèíÁùÄ‰∫îÈ¢úÂÖ≠Ëâ≤È≤úËä±ÔºåÂàõÈÄ†Âá∫‰∏ÄÁßç‰ª§‰∫∫ËµèÂøÉÊÇ¶ÁõÆÁöÑÊôØË±°„ÄÇËøô‰∫õÈ≤úËä±Ë¢´ÊëÜÊîæÂú®‰∏ÄÂº†Ê°åÂ≠ê‰∏äÔºåÂæàÂèØËÉΩÊòØ‰∏∫‰∫ÜÂ±ïÁ§∫ÂÆÉ‰ª¨ÁöÑÁæé‰∏ΩËÄåÊëÜÊîæÁöÑ„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;Âú∫ÊôØ‰∏≠Ôºå‰∏ÄËæÜÁªøËâ≤ÂíåÁ¥´Ëâ≤Áõ∏Èó¥ÁöÑËá™Ë°åËΩ¶ÂÅúÂú®‰∏ÄÊ†ãÂª∫Á≠ëÊóÅËæπÔºåÂÆÉË¢´ÊîæÁΩÆÂú®‰∏ÄÊ£µÂ§ßÊ†ëÊóÅ„ÄÇËøôËæÜËá™Ë°åËΩ¶Ë¢´ÊëÜÊîæÂú®ÈôÑËøëÔºå‰∏∫Ëøô‰∏™Âú∫ÊôØÂ¢ûÊ∑ª‰∫ÜÂá†ÂàÜËâ≤ÂΩ©„ÄÇÈô§‰∫ÜËá™Ë°åËΩ¶Â§ñÔºåËøòÊúâ‰∏Ä‰∫õÂÖ∂‰ªñÁöÑËá™Ë°åËΩ¶ÔºåÂåÖÊã¨‰∏§‰∏™‰Ωç‰∫éÂâçÊôØ‰∏≠ÁöÑ‰∏Ä‰∏™Âíå‰Ωç‰∫éËÉåÊôØ‰∏≠Èù†Ëøë‰∏≠ÂøÉ‰ΩçÁΩÆÁöÑÂè¶‰∏Ä‰∏™„ÄÇËá™Ë°åËΩ¶ÁöÑÂ≠òÂú®Ë°®ÊòéÂÆÉÂèØËÉΩÊòØÂÅúÂú®ÈÇ£ÈáåÁöÑ„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_images/%E8%88%9E%E8%B9%88-dance.jpg&#34; alt=&#34;dance&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt; &#xA;   &lt;td&gt;ÂõæÁâá‰∏≠ÁöÑÂ•≥‰∫∫Á©øÁùÄ‰∏Ä‰ª∂ÁôΩËâ≤ËøûË°£Ë£ôÔºåËÑö‰∏äËøòÁ≥ªÁùÄ‰∏ÄÊù°ÈªëËâ≤ÁΩëÁêÉË£ô„ÄÇÂ•πÊ≠£Âú®Ë°®Êºî‰∏Ä‰∏™ÁΩëÁêÉÊØîËµõÔºåÂæàÂèØËÉΩÊòØÂú®ÊØîËµõ‰∏≠„ÄÇÂú®ËÉåÊôØ‰∏≠ÂèØ‰ª•ÁúãÂà∞Âá†ÊääÊ§ÖÂ≠êÔºåÂèØËÉΩÊòØ‰∏∫‰∫ÜËßÇ‰ºóÊàñÂÖ∂‰ªñËßÇ‰ºóÁöÑÂ∫ß‰ΩçÂÆâÊéíËÄåÊëÜÊîæÁöÑ„ÄÇÊ≠§Â§ñÔºåËøòÊúâ‰∏Ä‰∏™ÈïøÂá≥ÊîæÂú®Âú∫ÊôØÂ∑¶‰æßÔºå‰∏∫‰∫∫‰ª¨Êèê‰æõ‰∫Ü‰∏Ä‰∏™‰ºëÊÅØÁöÑÂú∞Êñπ„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;‰∏ÄÂêçË∫´Á©øÁôΩËâ≤Ë°£ÊúçÁöÑÂ•≥Â≠êÁ´ôÂú®ËàûÂè∞‰∏äÔºåÊâãÈáåÊãøÁùÄ‰∏ÄÂè™ÊâãÊãøÁùÄÁôΩËâ≤È£ûÁõò„ÄÇÂ•π‰ºº‰πéÊ≠£Âú®ÂèÇÂä†‰∏Ä‰∏™ËàûÂè∞Ëàû‰ºöÊàñÊØîËµõ„ÄÇÂú∫ÊôØ‰∏≠ËøòÊúâÂÖ∂‰ªñÂá†‰∏™‰∫∫ÔºåÂÖ∂‰∏≠‰∏Ä‰∏™Á´ôÂú®ËàûÂè∞Â∑¶‰æßÔºåÂè¶‰∏Ä‰∏™Á´ôÂú®Âè≥‰æßÔºåÁ¨¨‰∏â‰∏™‰∫∫ÂàôÁ´ôÂú®Âú∫Âú∞Âè≥‰æß„ÄÇËàûÂè∞‰∏äÊúâÂá†‰∏™ËßÇ‰ºóÔºåÊúâÁöÑÁ´ôÁùÄÔºåÊúâÁöÑÂùêÁùÄÔºåËøòÊúâ‰∏Ä‰∫õÁ´ôÁùÄ„ÄÇËøôÁúãËµ∑Êù•ÂÉèÊòØ‰∏ÄÂú∫Ê¨¢‰πêÁöÑËäÇÊó•ÊàñÊ¥ªÂä®„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Â§öÂõæÂØπËØùÔºàÊïàÊûúÂçÅÂàÜÊúâÈôêÔºâ&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ÂõæÁâá1&lt;/th&gt; &#xA;   &lt;th&gt;ÂõæÁâá2&lt;/th&gt; &#xA;   &lt;th&gt;512_sft_multi&lt;/th&gt; &#xA;   &lt;th&gt;768_sft_multi&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_multi_images/bird/0.jpg&#34; alt=&#34;a-bird.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/dataset/eval_multi_images/bird/1.jpg&#34; alt=&#34;a-bird.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ËøôÂπÖÂõæÂÉèÊòæÁ§∫‰∫Ü‰∏ÄÁßçÈ∏üÁ∞∏ÊàÆÁöÑÂú∫ÊôØÔºö‰∏Ä‰∏™Â•≥‰∫∫Á´ôÂú®Á∫¢ÁªøÁõ∏Èó¥ÁöÑÁ∫¢ÁªøÁõ∏Èó¥ÁöÑÁ¥´Ëâ≤È∏üÁ∞∏Êà¥Âú®Â•πË∫´‰∏ä„ÄÇÂ•≥‰∫∫Á´ôÂú®Á∫¢Ëâ≤ÁöÑÈ∏üÁ∞∏Êà¥Âú®Â•πË∫´‰∏äÔºåËÄåÂ•πÁöÑÁøªÈ¢Ü‰∏äÁöÑÈÇ£Âè™Á∫¢È∏üÂàôÁ´ôÂú®Â•πË∫´Âêé„ÄÇ&lt;/td&gt; &#xA;   &lt;td&gt;Ëøô‰∏§Âè™È∏üÂú®Âêå‰∏ÄÁâáÊ†ëÊûó‰∏≠È£ûÁøîÔºåÊúâÁöÑ‰Ωç‰∫éÁîªÈù¢‰∏≠ÂøÉÔºåËÄåÂè¶‰∏Ä‰∫õÂàôËæÉÂ∞èÔºåÂΩ¢Êàê‰∫ÜÈ≤úÊòéÂØπÊØî„ÄÇËøôÁßçÈ∏üÁ±ªÁöÑÂá∫Áé∞Á™ÅÂá∫‰∫ÜÂÖ∂È£ûË°åËÉΩÂäõÂíåÈÄÇÂ∫îÊÄßÔºåÂõ†‰∏∫ÂÆÉ‰ª¨ËÉΩÂ§üÂú®Ê†ëÊûó‰∏≠Âø´ÈÄüËøÖÈÄüÁßªÂä®„ÄÇÊ≠§Â§ñÔºå‰∏§Âè™È∏üÁöÑ‰ΩçÁΩÆ‰∏çÂêåÔºå‰∏Ä‰∏™Âú®ÂõæÂÉèÁöÑÂ∑¶ËæπÔºåÂè¶‰∏Ä‰∏™Âú®Âè≥ËæπÔºåËøôË°®ÊòéÂÆÉ‰ª¨Âú®Âêå‰∏ÄÁâáÊ†ëÊûó‰∏≠ÁßªÂä®ÂæóÂæàËøë„ÄÇËøôÁßçÈ∏üÁ±ªÁöÑËá™ÁÑ∂Ë°å‰∏∫‰πüÊúâÂä©‰∫éÂå∫ÂàÜËøô‰∏§ÁßçÈ∏üÁ±ªÁâ©Áßç„ÄÇ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ÊïàÊûúÂ∞èÁªìÔºö&lt;/h3&gt; &#xA;&lt;p&gt;ËßÜËßâ‰ø°Âè∑ÂØπ‰∫éLLMËßÜ‰Ωú‰∏ÄÁßçÁâπÊÆäÁöÑÂ§ñËØ≠Ôºå Âõ†Ê≠§‚ÄúÂ≠¶‰π†Â§ñËØ≠‚ÄùÁöÑËÉΩÂäõÈ´ò‰ΩéÔºå ÂæàÂ§ßÁ®ãÂ∫¶‰∏äÂèñÂÜ≥‰∫éLLMÁöÑËÉΩÂäõ„ÄÇ LLMÊÄßËÉΩË∂äÂº∫ÔºåÂØπÂ∫îÁöÑVLMÂøÖÁÑ∂Ë∂äÂº∫ÔºåÊ≠§Êó∂ÊïàÊûúÂ¢ûÁõä‰ºöÂæàÊòéÊòæ„ÄÇ&lt;/p&gt; &#xA;&lt;h4&gt;Êú™Êù•ÂÄºÂæóÊîπËøõÁöÑÊñπÈù¢Ôºö&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;gt; Êõ¥ÁÆÄÂçïÁöÑProjectionÁöÑË∑®Ê®°ÊÄÅÁâπÂæÅÂØπÈΩêÊñπÂºèÔºåÁõ∏ËæÉ‰∫éCross-AttentionÂèØËÉΩÂ§Ñ‰∫éÂä£Âäø„ÄÇ&#xA;&amp;gt; ClipÊ®°ÂûãÂèØ‰ª•Â∞ùËØïÊõ¥Â§ßÊÄßËÉΩÊõ¥Âº∫ÁöÑlargeÁ≥ªÂàóÔºåÁî®Êõ¥ÂÖ∑ÁªÜÁ≤íÂ∫¶ÁöÑtokenË°®ÂæÅÂõæÂÉèÁâπÂæÅÔºåÁõÆÂâç‰ªçÁ≤óÁ≥ô„ÄÇ&#xA;&amp;gt; ÂàÜËæ®Áéá‰∏çÈ´òÔºåÁêÜËÆ∫‰∏äÂè™Êúâ224√ó224Ôºàminimind-vÊï∞ÊçÆÈõÜ‰∏∫ËäÇÁúÅÁ©∫Èó¥Ôºå‰ªÖËÆæÂÆö‰∏∫128√ó128Ôºâ„ÄÇ&#xA;&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;üìå Acknowledge&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Â¶ÇÊûúÊÇ®ËßâÂæó &lt;code&gt;MiniMind-V&lt;/code&gt;ÂØπÊÇ®ÊúâÊâÄÂ∏ÆÂä©ÔºåÂèØ‰ª•Âú® GitHub ‰∏äÂä†‰∏Ä‰∏™‚≠ê&lt;br&gt; Ê∞¥Âπ≥ÊúâÈôêÈöæÂÖçÂ≠òÂú®Êú™Áü•ÁöÑÁ∫∞ÊºèÔºåÊ¨¢ËøéÊâÄÊúâ‰∫∫Âú®Issues‰∫§ÊµÅÊåáÊ≠£ÊàñÊèê‰∫§PRÊîπËøõÈ°πÁõÆ&lt;br&gt; ÊÇ®ÁöÑÊîØÊåÅÂ∞±ÊòØÊåÅÁª≠ÊîπËøõÈ°πÁõÆÁöÑÂä®ÂäõÔºåË∞¢Ë∞¢ÔºÅ&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;ü§ù&lt;a href=&#34;https://github.com/jingyaogong/minimind/graphs/contributors&#34;&gt;Ë¥°ÁåÆËÄÖ&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jingyaogong&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/62287848&#34; width=&#34;70px&#34; height=&#34;70px&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/xinyanghuang7&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7503252&#34; width=&#34;70px&#34; height=&#34;70px&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/chuanzhubin&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/2813798&#34; width=&#34;70px&#34; height=&#34;70px&#34;&gt;&lt;/a&gt; &amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;üòäÈ∏£Ë∞¢&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xinyanghuang7&#34;&gt;&lt;b&gt;@xinyanghuang7&lt;/b&gt;&lt;/a&gt;: &lt;a href=&#34;https://github.com/xinyanghuang7/minimind-v/tree/hxy&#34;&gt;üîóÂÆûÁé∞‰∫ÜÂÆåÊï¥ÁöÑÂ§öÂõæÂàÜÊîØ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details close&gt; &#xA; &lt;summary&gt; &lt;b&gt;ÂèÇËÄÉÈìæÊé• &amp;amp; ÊÑüË∞¢‰ª•‰∏ã‰ºòÁßÄÁöÑËÆ∫ÊñáÊàñÈ°πÁõÆ&lt;/b&gt; &lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;ÊéíÂêç‰∏çÂàÜ‰ªª‰ΩïÂÖàÂêéÈ°∫Â∫è&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2304.08485&#34;&gt;LlaVA&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/2310.03744&#34;&gt;LlaVA-VL&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://huggingface.co/datasets/LinkSoul/Chinese-LLaVA-Vision-Instructions&#34;&gt;Chinese-LLaVA-Vision-Instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;ü´∂ÊîØÊåÅËÄÖ&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/jingyaogong/minimind-v/stargazers&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://reporoster.com/stars/dark/jingyaogong/minimind-v&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://reporoster.com/stars/jingyaogong/minimind-v&#34;&gt; &#xA;  &lt;img alt=&#34;github contribution grid snake animation&#34; src=&#34;https://reporoster.com/stars/jingyaogong/minimind-v&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://github.com/jingyaogong/minimind-v/network/members&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://reporoster.com/forks/dark/jingyaogong/minimind-v&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://reporoster.com/forks/jingyaogong/minimind-v&#34;&gt; &#xA;  &lt;img alt=&#34;github contribution grid snake animation&#34; src=&#34;https://reporoster.com/forks/jingyaogong/minimind-v&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=jingyaogong/minimind-v&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=jingyaogong/minimind-v&amp;amp;type=Date&#34;&gt; &#xA; &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=jingyaogong/minimind-v&amp;amp;type=Date&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/jingyaogong/minimind-v/master/LICENSE&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>causify-ai/helpers</title>
    <updated>2025-03-30T01:37:07Z</updated>
    <id>tag:github.com,2025-03-30:/causify-ai/helpers</id>
    <link href="https://github.com/causify-ai/helpers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Causify development system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;helpers&lt;/h1&gt;</summary>
  </entry>
</feed>