<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-14T01:33:12Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>programthink/zhao</title>
    <updated>2022-08-14T01:33:12Z</updated>
    <id>tag:github.com,2022-08-14:/programthink/zhao</id>
    <link href="https://github.com/programthink/zhao" rel="alternate"></link>
    <summary type="html">&lt;p&gt;【编程随想】整理的《太子党关系网络》，专门揭露赵国的权贵&lt;/p&gt;&lt;hr&gt;&lt;p&gt;= 俺整理的《太子党关系网络》 =&lt;/p&gt; &#xA;&lt;p&gt;== 简介 ==&lt;/p&gt; &#xA;&lt;p&gt;此项目创建于2016年2月，专门用来揭露天朝的权贵（也就是传说中的“赵家人”）。&lt;/p&gt; &#xA;&lt;p&gt;俺把这几年收集整理的数据开源到 GitHub，便于多人协作——大伙儿群策群力，一起来曝光权贵家族。&lt;/p&gt; &#xA;&lt;p&gt;初次上传的数据包括：700多个数据文件（ &#39;&#39;&#39;对应700多人，130多个家族&#39;&#39;&#39; ），另有200多张图片（人物头像）。随着俺不断完善，数据会越来越多。&lt;/p&gt; &#xA;&lt;p&gt;对这个项目，俺会【持续更新】。比如朝廷每次换届的时候，俺都会补充新的素材。&lt;/p&gt; &#xA;&lt;p&gt;为了确保数据的可信度，俺主要参考“维基百科”以及一些国际权威媒体的报道（比如《纽约时报》、《华尔街日版》、《金融时报》等等）。&lt;/p&gt; &#xA;&lt;p&gt;另外，对于某些客观事实（比如：生卒年月、简历、亲戚关系），俺也参考了天朝政府的官方网站，以及墙内的“百度百科”。&lt;/p&gt; &#xA;&lt;p&gt;== 下载说明 ==&lt;/p&gt; &#xA;&lt;p&gt;GitHub 提供了“下载整个项目”的功能，但是会比较大。&lt;/p&gt; &#xA;&lt;p&gt;如果你仅仅想看《太子党关系网络》这份文档，只需在首页上方点击进入 &#39;&#39;&#39;download&#39;&#39;&#39; 这个目录。&lt;/p&gt; &#xA;&lt;p&gt;该目录下有 &#39;&#39;&#39;pdf&#39;&#39;&#39; 和 &#39;&#39;&#39;jpg&#39;&#39;&#39; 两个子目录，分别存放对应的 &#39;&#39;&#39;【文件类型】&#39;&#39;&#39; 。你想要看哪一种文件格式，就进入哪个子目录里面。&lt;/p&gt; &#xA;&lt;p&gt;进入【文件类型】的子目录之后，会看到一个文件列表（目前有13个文件）。先点击你想要的某个文件，会进入该文件的页面。&lt;/p&gt; &#xA;&lt;p&gt;然后在【右上方】你会看到一个 &#39;&#39;&#39;Raw 按钮&#39;&#39;&#39; ，在这个按钮上点【右键】，在【右键菜单】里面选“保存”或“另存为”，就可以把这个文件下载到你本机。&lt;/p&gt; &#xA;&lt;p&gt;== 多人协作说明 ==&lt;/p&gt; &#xA;&lt;p&gt;俺非常希望有更多的网友参与该项目，大伙儿一起来完善天朝权贵家族的资料。&lt;/p&gt; &#xA;&lt;p&gt;想要参与的同学，可以通过如下方式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;到[https://program-think.blogspot.com/ 俺博客]留言进行反馈，补充信息或反馈错误。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;在[https://github.com/programthink/zhao/issues 本项目发一个 issue]，补充信息或反馈错误。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fork 该项目，进行修改，然后向俺发一个 Pull Request&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;（后面两种方式，你需要有 GitHub 的帐号）&lt;/p&gt; &#xA;&lt;p&gt;== 数据格式说明 ==&lt;/p&gt; &#xA;&lt;p&gt;本项目的数据文件，全部采用[https://zh.wikipedia.org/wiki/YAML YAML 格式]。这种格式非常简洁明了，有利于完全不懂技术的网友参与编辑。&lt;/p&gt; &#xA;&lt;p&gt;而且俺在每一个 YAML 格式的文件中都写了详细的注释，便于其他网友修改。&lt;/p&gt; &#xA;&lt;p&gt;== 目录说明 ==&lt;/p&gt; &#xA;&lt;p&gt;=== data 目录 ===&lt;/p&gt; &#xA;&lt;p&gt;data 目录用来保存数据文件，该目录下另有如下三个子目录：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;person&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个目录存放个人的资料，每个人一个目录，目录名就是人名。对于偶尔有同名的情况，在目录名末尾追加数字序号来区分。&lt;/p&gt; &#xA;&lt;p&gt;每个目录下都有一个 brief.yaml 文件，包含此人的简介。&lt;/p&gt; &#xA;&lt;p&gt;有些目录下还有一个 portrait.png 文件，对应此人的头像。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;company&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个目录存放与太子党有关的公司或组织机构。目录结构与 person 类似。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;family&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个目录存放家族关系的信息。每个家族是一个 yaml 格式的文件。&lt;/p&gt; &#xA;&lt;p&gt;=== bin 目录 ===&lt;/p&gt; &#xA;&lt;p&gt;该目录存放编译脚本。该脚本的使用参见下面的章节。&lt;/p&gt; &#xA;&lt;p&gt;=== download 目录 ===&lt;/p&gt; &#xA;&lt;p&gt;该目录存放制作好的文件，目前先提供 jpg 和 pdf 两种格式。&lt;/p&gt; &#xA;&lt;p&gt;如果你需要其它格式，可以用 bin 目录下的编译脚本自行搞定（编译脚本的使用，参见下面的章节）。&lt;/p&gt; &#xA;&lt;p&gt;== 编译脚本使用说明 ==&lt;/p&gt; &#xA;&lt;p&gt;（俺是在 Linux 上编写该脚本，尚未在 Windows 上进行测试）&lt;/p&gt; &#xA;&lt;p&gt;如果你在 Windows 上使用碰到问题，可以到[https://program-think.blogspot.com/ 俺博客]留言进行反馈。也可以在[https://github.com/programthink/zhao/issues 本项目发一个 issue]。&lt;/p&gt; &#xA;&lt;p&gt;=== 脚本的命令行参数 ===&lt;/p&gt; &#xA;&lt;p&gt;俺使用 python 作为编译脚本，该脚本位于 bin 目录下。&lt;/p&gt; &#xA;&lt;p&gt;通过该脚本可以把原始数据生成为 dot 语言的脚本。然后再调用 Graphviz 把 dot 脚本生成各种格式（比如：pdf、jpeg）。&lt;/p&gt; &#xA;&lt;p&gt;要使用该脚本，先在命令行模式下进入 bin 目录，然后运行如下命令：&lt;/p&gt; &#xA;&lt;p&gt;（生成 pdf 格式的示例）&lt;/p&gt; &#xA;&lt;p&gt;&#39;&#39;&#39;python make.py pdf&#39;&#39;&#39;&lt;/p&gt; &#xA;&lt;p&gt;（生成 jpg 格式的示例）&lt;/p&gt; &#xA;&lt;p&gt;&#39;&#39;&#39;python make.py jpg&#39;&#39;&#39;&lt;/p&gt; &#xA;&lt;p&gt;=== 依赖的软件 ===&lt;/p&gt; &#xA;&lt;p&gt;要使用上述脚本，你需要事先安装相关的软件（如下）&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python（2 或 3）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;因为俺用的是 Python 脚本，所以你需要先安装 python 软件。&lt;/p&gt; &#xA;&lt;p&gt;目前 Python 有两种大版本——python2 和 python3——俺的编译脚本 &#39;&#39;&#39;【同时兼容】&#39;&#39;&#39; 这两种 Python 的大版本。&lt;/p&gt; &#xA;&lt;p&gt;对于 Python 的小版本，俺本人在 &#39;&#39;&#39;2.7&#39;&#39;&#39; 和 &#39;&#39;&#39;3.5&#39;&#39;&#39; 上测试通过。2.6 和 3.4 估计也可以。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PyYAML&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这是一个基于 python 开发的软件包，专门用来处理 YAML 格式的文件。&lt;/p&gt; &#xA;&lt;p&gt;你需要在你的 python 环境中安装该软件包。其官方链接如下：&lt;/p&gt; &#xA;&lt;p&gt;[http://pyyaml.org/wiki/PyYAML PyYAML 的官网的 wiki]&lt;/p&gt; &#xA;&lt;p&gt;[https://pypi.python.org/pypi/PyYAML Python 官网的 PYPI]&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Graphviz&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;这个软件是用来生成【关系图】的。关于该这个软件，俺已经写了一篇扫盲教程：&lt;/p&gt; &#xA;&lt;p&gt;《[https://program-think.blogspot.com/2016/02/opensource-review-graphviz.html 开源项目：【自动】绘图工具Graphviz——《太子党关系网络》就是用它制作]》&lt;/p&gt; &#xA;&lt;p&gt;== 致“反对此项目的墙内程序员” ==&lt;/p&gt; &#xA;&lt;p&gt;本项目上线第二天，就收获 363 个 star 兼 88 个 fork，甚至还挤进 GitHub 的“当日 Trending”——俺很荣幸，也很高兴有这么多人给俺捧场。&lt;/p&gt; &#xA;&lt;p&gt;但是在[https://github.com/programthink/zhao/issues 本项目的 issue 列表]中也看到好几个反对此项目的程序员（应该都来自墙内），他们担心这个项目导致 GitHub 被 GFW 封杀。&lt;/p&gt; &#xA;&lt;p&gt;这几年来，类似的言论俺已经看了不少。就好比强盗拿刀杀人，围观者不但没有谴责强盗，反而去谴责卖刀的店家——这就是传说中的“斯德哥尔摩综合症”。&lt;/p&gt; &#xA;&lt;p&gt;有兴趣的同学，可以看俺之前的博文——《[https://program-think.blogspot.com/2012/06/stockholm-syndrome.html 天朝民众的心理分析：斯德哥尔摩综合症]》&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>649453932/Chinese-Text-Classification-Pytorch</title>
    <updated>2022-08-14T01:33:12Z</updated>
    <id>tag:github.com,2022-08-14:/649453932/Chinese-Text-Classification-Pytorch</id>
    <link href="https://github.com/649453932/Chinese-Text-Classification-Pytorch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;中文文本分类，TextCNN，TextRNN，FastText，TextRCNN，BiLSTM_Attention，DPCNN，Transformer，基于pytorch，开箱即用。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chinese-Text-Classification-Pytorch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/996icu/996.ICU/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Anti%20996-blue.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;中文文本分类，TextCNN，TextRNN，FastText，TextRCNN，BiLSTM_Attention, DPCNN, Transformer, 基于pytorch，开箱即用。&lt;/p&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;模型介绍、数据流动过程：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/73176084&#34;&gt;我的博客&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;数据以字为单位输入模型，预训练词向量使用 &lt;a href=&#34;https://github.com/Embedding/Chinese-Word-Vectors&#34;&gt;搜狗新闻 Word+Character 300d&lt;/a&gt;，&lt;a href=&#34;https://pan.baidu.com/s/14k-9jsspp43ZhMxqPmsWMQ&#34;&gt;点这里下载&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;环境&lt;/h2&gt; &#xA;&lt;p&gt;python 3.7&lt;br&gt; pytorch 1.1&lt;br&gt; tqdm&lt;br&gt; sklearn&lt;br&gt; tensorboardX&lt;/p&gt; &#xA;&lt;h2&gt;中文数据集&lt;/h2&gt; &#xA;&lt;p&gt;我从&lt;a href=&#34;http://thuctc.thunlp.org/&#34;&gt;THUCNews&lt;/a&gt;中抽取了20万条新闻标题，已上传至github，文本长度在20到30之间。一共10个类别，每类2万条。&lt;/p&gt; &#xA;&lt;p&gt;类别：财经、房产、股票、教育、科技、社会、时政、体育、游戏、娱乐。&lt;/p&gt; &#xA;&lt;p&gt;数据集划分：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;数据集&lt;/th&gt; &#xA;   &lt;th&gt;数据量&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;训练集&lt;/td&gt; &#xA;   &lt;td&gt;18万&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;验证集&lt;/td&gt; &#xA;   &lt;td&gt;1万&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;测试集&lt;/td&gt; &#xA;   &lt;td&gt;1万&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;更换自己的数据集&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果用字，按照我数据集的格式来格式化你的数据。&lt;/li&gt; &#xA; &lt;li&gt;如果用词，提前分好词，词之间用空格隔开，&lt;code&gt;python run.py --model TextCNN --word True&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;使用预训练词向量：utils.py的main函数可以提取词表对应的预训练词向量。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;效果&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型&lt;/th&gt; &#xA;   &lt;th&gt;acc&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextCNN&lt;/td&gt; &#xA;   &lt;td&gt;91.22%&lt;/td&gt; &#xA;   &lt;td&gt;Kim 2014 经典的CNN文本分类&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextRNN&lt;/td&gt; &#xA;   &lt;td&gt;91.12%&lt;/td&gt; &#xA;   &lt;td&gt;BiLSTM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextRNN_Att&lt;/td&gt; &#xA;   &lt;td&gt;90.90%&lt;/td&gt; &#xA;   &lt;td&gt;BiLSTM+Attention&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextRCNN&lt;/td&gt; &#xA;   &lt;td&gt;91.54%&lt;/td&gt; &#xA;   &lt;td&gt;BiLSTM+池化&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FastText&lt;/td&gt; &#xA;   &lt;td&gt;92.23%&lt;/td&gt; &#xA;   &lt;td&gt;bow+bigram+trigram， 效果出奇的好&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DPCNN&lt;/td&gt; &#xA;   &lt;td&gt;91.25%&lt;/td&gt; &#xA;   &lt;td&gt;深层金字塔CNN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transformer&lt;/td&gt; &#xA;   &lt;td&gt;89.91%&lt;/td&gt; &#xA;   &lt;td&gt;效果较差&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bert&lt;/td&gt; &#xA;   &lt;td&gt;94.83%&lt;/td&gt; &#xA;   &lt;td&gt;bert + fc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ERNIE&lt;/td&gt; &#xA;   &lt;td&gt;94.61%&lt;/td&gt; &#xA;   &lt;td&gt;比bert略差(说好的中文碾压bert呢)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;bert和ERNIE模型代码我放到另外一个仓库了，传送门：&lt;a href=&#34;https://github.com/649453932/Bert-Chinese-Text-Classification-Pytorch&#34;&gt;Bert-Chinese-Text-Classification-Pytorch&lt;/a&gt;，后续还会搞一些bert之后的东西，欢迎star。&lt;/p&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 训练并测试：&#xA;# TextCNN&#xA;python run.py --model TextCNN&#xA;&#xA;# TextRNN&#xA;python run.py --model TextRNN&#xA;&#xA;# TextRNN_Att&#xA;python run.py --model TextRNN_Att&#xA;&#xA;# TextRCNN&#xA;python run.py --model TextRCNN&#xA;&#xA;# FastText, embedding层是随机初始化的&#xA;python run.py --model FastText --embedding random &#xA;&#xA;# DPCNN&#xA;python run.py --model DPCNN&#xA;&#xA;# Transformer&#xA;python run.py --model Transformer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;参数&lt;/h3&gt; &#xA;&lt;p&gt;模型都在models目录下，超参定义和模型定义在同一文件中。&lt;/p&gt; &#xA;&lt;h2&gt;对应论文&lt;/h2&gt; &#xA;&lt;p&gt;[1] Convolutional Neural Networks for Sentence Classification&lt;br&gt; [2] Recurrent Neural Network for Text Classification with Multi-Task Learning&lt;br&gt; [3] Attention-Based Bidirectional Long Short-Term Memory Networks for Relation Classification&lt;br&gt; [4] Recurrent Convolutional Neural Networks for Text Classification&lt;br&gt; [5] Bag of Tricks for Efficient Text Classification&lt;br&gt; [6] Deep Pyramid Convolutional Neural Networks for Text Categorization&lt;br&gt; [7] Attention Is All You Need&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ine-labs/AzureGoat</title>
    <updated>2022-08-14T01:33:12Z</updated>
    <id>tag:github.com,2022-08-14:/ine-labs/AzureGoat</id>
    <link href="https://github.com/ine-labs/AzureGoat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AzureGoat : A Damn Vulnerable Azure Infrastructure&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AzureGoat : A Damn Vulnerable Azure Infrastructure&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/25884689/183740998-da6f7ae7-2df0-4557-a6f5-2f0040ebe0dc.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compromising an organization&#39;s cloud infrastructure is like sitting on a gold mine for attackers. And sometimes, a simple misconfiguration or a vulnerability in web applications, is all an attacker needs to compromise the entire infrastructure. Since the cloud is relatively new, many developers are not fully aware of the threatscape and they end up deploying a vulnerable cloud infrastructure. Microsoft Azure cloud has become the second-largest vendor by market share in the cloud infrastructure providers (as per multiple reports), just behind AWS. There are numerous tools and vulnerable applications available for AWS for the security professional to perform attack/defense practices, but it is not the case with Azure. There are far fewer options available to the community.&lt;/p&gt; &#xA;&lt;p&gt;AzureGoat is a vulnerable by design infrastructure on Azure featuring the latest released OWASP Top 10 web application security risks (2021) and other misconfiguration based on services such as App Functions, CosmosDB, Storage Accounts, Automation and Identities. AzureGoat mimics real-world infrastructure but with added vulnerabilities. It features multiple escalation paths and is focused on a black-box approach.&lt;/p&gt; &#xA;&lt;p&gt;The project will be divided into modules and each module will be a separate web application, powered by varied tech stacks and development practices. It will leverage IaC through terraform to ease the deployment process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Presented at&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/us-22/arsenal/schedule/index.html#azuregoat--a-damn-vulnerable-azure-infrastructure-28000&#34;&gt;BlackHat USA 2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.defcon.org/node/242061&#34;&gt;DC 30: Demo Labs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Developed with &lt;span&gt;❤️&lt;/span&gt; by &lt;a href=&#34;https://ine.com/&#34;&gt;INE&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/4g3VDF5K&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/25884689/184508144-f0196d79-5843-4ea6-ad39-0c14cd0da54c.png&#34; alt=&#34;drawing&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Built With&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Azure&lt;/li&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;Python 3&lt;/li&gt; &#xA; &lt;li&gt;Terraform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;The project is scheduled to encompass all significant vulnerabilities including the OWASP TOP 10 2021, and popular cloud misconfigurations. Currently, the project contains the following vulnerabilities/misconfigurations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XSS&lt;/li&gt; &#xA; &lt;li&gt;SQL Injection&lt;/li&gt; &#xA; &lt;li&gt;Insecure Direct Object reference&lt;/li&gt; &#xA; &lt;li&gt;Server Side Request Forgery on App Function Environment&lt;/li&gt; &#xA; &lt;li&gt;Sensitive Data Exposure and Password Reset&lt;/li&gt; &#xA; &lt;li&gt;Storage Account Misconfigurations&lt;/li&gt; &#xA; &lt;li&gt;Identity Misconfigurations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An Azure Account&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To ease the deployment process the user just needs to clone this repo, login to azure cli then initialize and apply the Terraform file. This workflow will deploy the whole infrastructure and output the hosted application&#39;s URL.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps to follow:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Clone the repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ine-labs/AzureGoat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Login to Azure CLI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;az login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And follow the steps to sign in.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Create a resource group with the name &#34;azuregoat_app&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4.&lt;/strong&gt; Use terraform to deploy AzureGoat&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform init&#xA;terraform apply --auto-approve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Modules&lt;/h1&gt; &#xA;&lt;h2&gt;Module 1&lt;/h2&gt; &#xA;&lt;p&gt;The first module features a serverless blog application utilizing Azure App Functions, Storage Accounts, CosmosDB, and Azure Automation. It consists of various web application vulnerabilities and facilitates exploitation of misconfigured Azure resources.&lt;/p&gt; &#xA;&lt;p&gt;Overview of escalation paths for module-1&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/25884689/183740988-9fa75f39-8c85-4db7-a5a9-c0f4acdb2783.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Nishant Sharma, Director, Lab Platform, INE &lt;a href=&#34;mailto:nsharma@ine.com&#34;&gt;nsharma@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Jeswin Mathai, Chief Architect, Lab Platform, INE &lt;a href=&#34;mailto:jmathai@ine.com&#34;&gt;jmathai@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rachna Umaraniya, Cloud Developer, INE &lt;a href=&#34;mailto:rumaraniya@ine.com&#34;&gt;rumaraniya@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sherin Stephen, Software Engineer (Cloud), INE &lt;a href=&#34;mailto:sstephen@ine.com&#34;&gt;sstephen@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shantanu Kale, Cloud Developer, INE &lt;a href=&#34;mailto:skale@ine.com&#34;&gt;skale@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sanjeev Mahunta, Software Engineer (Cloud), INE &lt;a href=&#34;mailto:smahunta@ine.com&#34;&gt;smahunta@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Solutions&lt;/h1&gt; &#xA;&lt;p&gt;The manuals are available in the &lt;a href=&#34;https://raw.githubusercontent.com/ine-labs/AzureGoat/master/solutions/&#34;&gt;solutions&lt;/a&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;Module 1 Exploitation Videos: &lt;a href=&#34;https://www.youtube.com/playlist?list=PLcIpBb4raSZGdYHKpqIu5Boc2ziga4oGY&#34;&gt;https://www.youtube.com/playlist?list=PLcIpBb4raSZGdYHKpqIu5Boc2ziga4oGY&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For more details refer to the &#34;AzureGoat.pdf&#34; PDF file. This file contains the slide deck used for presentations.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;Blog Application HomePage&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/25884689/183741003-04609eaa-63fd-43c3-9851-d1e10b5763a9.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application Login Portal&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/183737940-b1fa7b71-82cb-4744-af6a-22386c22a934.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application Register Page&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/183737954-2ede9a5b-0797-4eef-8329-9871c14327fd.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application Logged in Dashboard&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/183737967-a2af9d1e-9805-4658-8055-f3f7ee982b63.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application User Profile&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/183737979-20c60ca1-14e0-4da9-a3c7-161ef9a62591.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions in the form of code improvements, module updates, feature improvements, and any general suggestions are welcome.&lt;/li&gt; &#xA; &lt;li&gt;Improvements to the functionalities of the current modules are also welcome.&lt;/li&gt; &#xA; &lt;li&gt;The source code for each module can be found in &lt;code&gt;modules/module-&amp;lt;Number&amp;gt;/src&lt;/code&gt; this can be used to modify the existing application code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License v2 as published by the Free Software Foundation.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Sister Projects&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ine-labs/AWSGoat&#34;&gt;AWSGoat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GCPSheep (Coming Soon)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/patoolkit&#34;&gt;PA Toolkit (Pentester Academy Wireshark Toolkit)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/reconpal&#34;&gt;ReconPal: Leveraging NLP for Infosec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/voipshark&#34;&gt;VoIPShark: Open Source VoIP Analysis Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/blemystique&#34;&gt;BLEMystique&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>