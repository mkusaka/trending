<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-30T01:32:33Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Tele-AI/TeleSpeech-ASR</title>
    <updated>2024-05-30T01:32:33Z</updated>
    <id>tag:github.com,2024-05-30:/Tele-AI/TeleSpeech-ASR</id>
    <link href="https://github.com/Tele-AI/TeleSpeech-ASR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; 星辰语音大模型-超多方言ASR &lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 🤗 &lt;a href=&#34;https://huggingface.co/Tele-AI/TeleSpeech-ASR1.0&#34; target=&#34;_blank&#34;&gt;Hugging Face&lt;/a&gt; • 🐾 &lt;a href=&#34;https://gitee.com/Tele-AI/TeleSpeech-ASR&#34; target=&#34;_blank&#34;&gt;gitee&lt;/a&gt;️ &lt;/p&gt; &#xA;&lt;h1&gt;目录&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E7%9B%AE%E5%BD%95&#34;&gt;目录&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E6%A8%A1%E5%9E%8B%E5%BC%80%E6%BA%90&#34;&gt;模型开源&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&#34;&gt;环境配置&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83&#34;&gt;预训练模型微调&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E8%A1%A8%E5%BE%81%E8%AE%AD%E7%BB%83%E4%B8%8B%E6%B8%B8%E4%BB%BB%E5%8A%A1&#34;&gt;表征训练下游任务&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87&#34;&gt;数据准备&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96&#34;&gt;特征提取&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E5%AD%97%E5%85%B8%E5%87%86%E5%A4%87&#34;&gt;字典准备&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E5%BE%AE%E8%B0%83%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%B5%81%E7%A8%8B%E7%A4%BA%E4%BE%8B&#34;&gt;微调模型推理流程示例*&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83-1&#34;&gt;预训练模型微调&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E5%BE%AE%E8%B0%83%E9%98%B6%E6%AE%B5&#34;&gt;微调阶段&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E6%8E%A8%E7%90%86%E4%B8%8E%E8%A7%A3%E7%A0%81%E9%98%B6%E6%AE%B5&#34;&gt;推理与解码阶段&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E8%A1%A8%E5%BE%81%E8%AE%AD%E7%BB%83%E4%B8%8B%E6%B8%B8%E4%BB%BB%E5%8A%A1-1&#34;&gt;表征训练下游任务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BB%93%E6%9E%9C&#34;&gt;开源数据集结果&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%8D%8F%E8%AE%AE&#34;&gt;声明与协议&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E5%A3%B0%E6%98%8E&#34;&gt;声明&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E5%8D%8F%E8%AE%AE&#34;&gt;协议&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;模型开源&lt;/h1&gt; &#xA;&lt;p&gt;星辰超多方言语音识别大模型v1.0，由30万小时无标注多方言语音数据进行预训练，并利用内部30种有标注数据进行微调，打破单一模型只能识别特定单一方言的困境，可支持理解粤语、上海话、四川话、温州话等30种方言&lt;/p&gt; &#xA;&lt;p&gt;本次开源三个模型：两个30万小时无标注语音预训练模型和一个KeSpeech数据集8种方言微调模型。发布版本和下载链接见下表&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型版本&lt;/th&gt; &#xA;   &lt;th&gt;参数量&lt;/th&gt; &#xA;   &lt;th&gt;下载链接&lt;/th&gt; &#xA;   &lt;th&gt;字典&lt;/th&gt; &#xA;   &lt;th&gt;备注&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pretrain_base&lt;/td&gt; &#xA;   &lt;td&gt;0.09 B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Tele-AI/TeleSpeech-ASR1.0/blob/main/base.pt&#34;&gt;TeleSpeech-ASR1.0-base&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✗&lt;/td&gt; &#xA;   &lt;td&gt;30万小时无标注语音预训练模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pretrain_large&lt;/td&gt; &#xA;   &lt;td&gt;0.3 B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Tele-AI/TeleSpeech-ASR1.0/blob/main/large.pt&#34;&gt;TeleSpeech-ASR1.0-large&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✗&lt;/td&gt; &#xA;   &lt;td&gt;30万小时无标注语音预训练模型&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;finetune_large_kespeech&lt;/td&gt; &#xA;   &lt;td&gt;0.3 B&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Tele-AI/TeleSpeech-ASR1.0/blob/main/finetune_large_kespeech.pt&#34;&gt;TeleSpeech-ASR1.0-large-kespeech&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/Tele-AI/TeleSpeech-ASR1.0/blob/main/dict.chr7531.txt&#34;&gt;dict.char7531.txt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;基于pretrain_large，采用KeSpeech数据集&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#KeSpeech%E5%90%84%E6%96%B9%E8%A8%80%E4%B8%8A%E7%BB%93%E6%9E%9C&#34;&gt;8种方言&lt;/a&gt;微调训练&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;finetune模型为已经在特定数据集微调过的模型，可直接使用&lt;/li&gt; &#xA; &lt;li&gt;pretrain模型为无监督预训练模型，&lt;strong&gt;无法直接进行ASR任务&lt;/strong&gt;，需要用少量标注数据进行有监督训练后使用。相比于直接训练的方言识别模型，基于预训练模型可以利用更少的有标注数据获得更好的方言识别性能。我们提供了两种有监督训练框架，用于下游ASR任务：1) 基于fairseq的预训练模型微调； 2) 基于wenet的表征提取（特征提取器）训练下游ASR模型&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;环境配置&lt;/h1&gt; &#xA;&lt;p&gt;环境依赖&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PyTorch version &amp;gt;= 1.13.0&lt;/li&gt; &#xA; &lt;li&gt;Python version &amp;gt;= 3.8&lt;/li&gt; &#xA; &lt;li&gt;数据准备、程序训练需要使用kaldi，请确保已正确安装：&lt;a href=&#34;https://github.com/kaldi-asr/kaldi&#34;&gt;https://github.com/kaldi-asr/kaldi&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;若已有提好的特征，程序运行时可以使用wenet开源框架中kaldi_io.py实现的方法替换kaldiio.load_mat，从而无需安装kaldi&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;预训练模型微调&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;fairseq安装&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装fairseq及其依赖&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/pytorch/fairseq&#xA;$ cd fairseq&#xA;$ pip install --editable ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;安装kaldiio&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ pip install kaldiio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;表征训练下游任务&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;确保fairseq已正确&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#fairseq%E5%AE%89%E8%A3%85&#34;&gt;安装&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装表征训练任务运行所需依赖&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd wenet_representation&#xA;$ pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;数据准备&lt;/h1&gt; &#xA;&lt;h2&gt;特征提取&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;特征提取&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;模型输入为40维mfcc特征，&lt;strong&gt;非原始音频&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;利用kaldi提取40维mfcc特征，运行脚本参考&lt;code&gt;prepare_kaldi_feats.sh&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;可将运行脚本&lt;code&gt;prepare_kaldi_feats.sh&lt;/code&gt;与参数设置&lt;code&gt;mfcc_hires.conf&lt;/code&gt;置于kaldi任一egs目录下（与cmd.sh等脚本平级，例如/path/to/kaldi/egs/aishell/s5/prepare_kaldi_feats.sh），运行&lt;code&gt;prepare_kaldi_feats.sh&lt;/code&gt;即可&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;为各数据集准备训练用文件&lt;code&gt;data.list&lt;/code&gt;，可参考&lt;code&gt;make_datalist.py&lt;/code&gt;，以&lt;code&gt;\t&lt;/code&gt;分隔：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat train/data.list&#xA;utt:X0000000000_100638174_S00037&#x9;feat:/data/raw_nnaudio.test.1.ark:2983479385&#x9;feat_shape:363,40&#x9;text:不惜在这种试验中毁灭包括自己在内的一切&#x9;token:不 惜 在 这 种 试 验 中 毁 灭 包 括 自 己 在 内 的 一 切&#x9;tokenid:[TOKENID]&#x9;token_shape:19,5537&#xA;utt:X0000000001_100849618_S00006&#x9;feat:/data/raw_nnaudio.test.1.ark:2984296665&#x9;feat_shape:345,40&#x9;text:在他们收到足够建立大统一模型的数据后&#x9;token:在 他 们 收 到 足 够 建 立 大 统 一 模 型 的 数 据 后&#x9;tokenid:[TOKENID]&#x9;token_shape:18,5537&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;字典准备&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;微调阶段，需要准备fairseq格式的 &lt;code&gt;dict.${label}.txt&lt;/code&gt;，&lt;code&gt;${label}&lt;/code&gt;为建模单元类型，如ltr, bpe等。以&lt;code&gt;dict.ltr.txt&lt;/code&gt;为例：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;是 2&#xA;好 3&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;预训练模型表征训练ASR任务阶段，需要准备wenet格式的&lt;code&gt;lang_char.txt&lt;/code&gt;，相比于&lt;code&gt;dict.${label}.txt&lt;/code&gt;额外添加&lt;code&gt;&amp;lt;blank&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;unk&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;sos/eos&amp;gt;&lt;/code&gt;3个token，例如&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;blank&amp;gt; 0&#xA;&amp;lt;unk&amp;gt; 1&#xA;是 2&#xA;好 3&#xA;...&#xA;&amp;lt;sos/eos&amp;gt; 5536&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;微调模型推理流程示例*&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#fairseq%E5%AE%89%E8%A3%85&#34;&gt;fairseq环境准备&lt;/a&gt;，修改&lt;code&gt;data2vec_dialect/path.sh&lt;/code&gt;文件中&lt;code&gt;/path/to/fairseq&lt;/code&gt;为fairseq安装路径&lt;/li&gt; &#xA; &lt;li&gt;利用kaldi提取音频特征，并保存为以 .tsv 结尾的文件，格式参考&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96&#34;&gt;特征提取&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;进入data2vec_dialect目录，并修改&lt;code&gt;run_scripts/decode.sh&lt;/code&gt;文件中&lt;code&gt;/path/to&lt;/code&gt;相关路径为本地存储路径&lt;/li&gt; &#xA; &lt;li&gt;执行&lt;code&gt;run_scripts/decode.sh&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;*仅经过微调后的finetune模型支持直接推理，无监督预训练模型&lt;code&gt;pretrain_base&lt;/code&gt;和&lt;code&gt;pretrain_large&lt;/code&gt;需要先在标注数据上训练后，再进行推理，详见&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83&#34;&gt;预训练模型微调&lt;/a&gt;或&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/#%E8%A1%A8%E5%BE%81%E8%AE%AD%E7%BB%83%E4%B8%8B%E6%B8%B8%E4%BB%BB%E5%8A%A1&#34;&gt;表征训练下游任务&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;预训练模型微调&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a id=&#34;预训练模型微调&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;微调阶段&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;准备&lt;code&gt;train.tsv&lt;/code&gt;和&lt;code&gt;dev.tsv&lt;/code&gt;，保存于同一训练目录下 &lt;pre&gt;&lt;code&gt;$ ln -s /path/to/train/data.list /path/to/train/train.tsv&#xA;$ ln -s /path/to/dev/data.list /path/to/train/dev.tsv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;进入data2vec_dialect路径，修改&lt;code&gt;path.sh&lt;/code&gt;文件中&lt;code&gt;/path/to/fairseq&lt;/code&gt;为fairseq安装路径&lt;/li&gt; &#xA; &lt;li&gt;将&lt;code&gt;run_scripts/run_d2v_finetune.sh&lt;/code&gt;中&lt;code&gt;/path/to&lt;/code&gt;相关路径替换&lt;/li&gt; &#xA; &lt;li&gt;修改&lt;code&gt;task.data&lt;/code&gt;为 .tsv 文件保存路径，如&lt;code&gt;task.data=/data/wenetspeech/train&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bash run_scripts/run_d2v_finetune.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;推理与解码阶段&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;同样修改&lt;code&gt;run_scripts/decode.sh&lt;/code&gt;中的模型路径、测试数据路径等 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;dataset.gen_subset&lt;/code&gt;为测试数据路径下 .tsv 文件的名称，可配置多个&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;执行 &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bash run_scripts/decode.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;表征训练下游任务&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a id=&#34;表征训练下游任务&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;进入wenet_representation路径，修改&lt;code&gt;path.sh&lt;/code&gt;文件中&lt;code&gt;fairseq&lt;/code&gt;, &lt;code&gt;data2vec_dialect&lt;/code&gt;, &lt;code&gt;wenet_representation&lt;/code&gt;相关路径&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;连续表征训练与解码：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;配置&lt;code&gt;run_d2v.sh&lt;/code&gt;中dataset相关内容，执行 &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ bash run_d2v.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;离散表征训练与解码：&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;首先根据&lt;code&gt;data.list&lt;/code&gt;，准备离散表征对应训练文件&lt;code&gt;data.list.discrete&lt;/code&gt;，修改&lt;code&gt;wenet/discrete_token/kmeans_d2v.yaml&lt;/code&gt;中&lt;code&gt;model_dir&lt;/code&gt;和&lt;code&gt;user_dir&lt;/code&gt;，执行 &lt;pre&gt;&lt;code&gt;$ bash wenet/discrete_token/dump_feat.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;再配置&lt;code&gt;run_discrete.sh&lt;/code&gt;中dataset相关内容，执行 &lt;pre&gt;&lt;code&gt;$ bash run_discrete.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;开源数据集结果&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;我们选择了多个开源中文数据集进行验证，以测试集上的字错误率 (Character Error Rate, CER) 结果作为衡量标准&lt;/li&gt; &#xA; &lt;li&gt;在Aishell-1上我们选择其Train集作为有监督数据进行训练，在Test集上统计CER&lt;/li&gt; &#xA; &lt;li&gt;在WenetSpeech上，我们分别使用100小时训练集Train_s和1000小时训练集Train_m分别作为有监督数据进行训练，在Test_Meeting测试集上统计CER&lt;/li&gt; &#xA; &lt;li&gt;Babel为NIST（美国国家标准与技术研究院）举办的低资源粤语电话识别任务数据集，我们使用其提供的训练集与测试集统计CER&lt;/li&gt; &#xA; &lt;li&gt;KeSpeech为中文多方言测试集，我们使用1396小时训练集作为有监督数据进行训练，选择提供的Test测试集统计CER&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型版本&lt;/th&gt; &#xA;   &lt;th&gt;Aishell-1 (%)&lt;/th&gt; &#xA;   &lt;th&gt;WenetSpeech* (%)&lt;/th&gt; &#xA;   &lt;th&gt;Babel (%)&lt;/th&gt; &#xA;   &lt;th&gt;KeSpeech (%)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pretrain_base&lt;/td&gt; &#xA;   &lt;td&gt;4.7&lt;/td&gt; &#xA;   &lt;td&gt;18.3 / 16.4&lt;/td&gt; &#xA;   &lt;td&gt;22.1&lt;/td&gt; &#xA;   &lt;td&gt;10.9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pretrain_large&lt;/td&gt; &#xA;   &lt;td&gt;4.0&lt;/td&gt; &#xA;   &lt;td&gt;14.3 / 13.0&lt;/td&gt; &#xA;   &lt;td&gt;19.1&lt;/td&gt; &#xA;   &lt;td&gt;8.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;*WenetSpeech中的结果为分别使用 &lt;code&gt;train_s/train_m&lt;/code&gt;训练后，在Test_Meeting上的CER&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;KeSpeech各方言上结果&#34;&gt;&lt;/a&gt; KeSpeech各方言上结果（CER%）&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型版本&lt;/th&gt; &#xA;   &lt;th&gt;普通话&lt;/th&gt; &#xA;   &lt;th&gt;北京&lt;/th&gt; &#xA;   &lt;th&gt;西南&lt;/th&gt; &#xA;   &lt;th&gt;中原&lt;/th&gt; &#xA;   &lt;th&gt;东北&lt;/th&gt; &#xA;   &lt;th&gt;兰银&lt;/th&gt; &#xA;   &lt;th&gt;江淮&lt;/th&gt; &#xA;   &lt;th&gt;冀鲁&lt;/th&gt; &#xA;   &lt;th&gt;胶辽&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pretrain_large&lt;/td&gt; &#xA;   &lt;td&gt;4.61&lt;/td&gt; &#xA;   &lt;td&gt;8.23&lt;/td&gt; &#xA;   &lt;td&gt;8.74&lt;/td&gt; &#xA;   &lt;td&gt;7.62&lt;/td&gt; &#xA;   &lt;td&gt;7.89&lt;/td&gt; &#xA;   &lt;td&gt;9.72&lt;/td&gt; &#xA;   &lt;td&gt;12.89&lt;/td&gt; &#xA;   &lt;td&gt;8.91&lt;/td&gt; &#xA;   &lt;td&gt;9.30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;声明与协议&lt;/h1&gt; &#xA;&lt;h2&gt;声明&lt;/h2&gt; &#xA;&lt;p&gt;我们在此声明，不要使用TeleSpeech模型及其衍生模型进行任何危害国家社会安全或违法的活动。同时，我们也要求使用者不要将TeleSpeech模型用于没有安全审查和备案的互联网服务。我们希望所有使用者遵守上述原则，确保科技发展在合法合规的环境下进行。&lt;/p&gt; &#xA;&lt;p&gt;我们已经尽我们所能，来确保模型训练过程中使用的数据的合规性。然而，尽管我们已经做出了巨大的努力，但由于模型和数据的复杂性，仍有可能存在一些无法预见的问题。因此，如果由于使用TeleSpeech开源模型而导致的任何问题，包括但不限于数据安全问题、公共舆论风险，或模型被误导、滥用、传播或不当利用所带来的任何风险和问题，我们将不承担任何责任。&lt;/p&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;p&gt;社区使用TeleSpeech模型需要遵循《&lt;a href=&#34;https://raw.githubusercontent.com/Tele-AI/TeleSpeech-ASR/master/TeleSpeech%E6%A8%A1%E5%9E%8B%E7%A4%BE%E5%8C%BA%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE.pdf&#34;&gt;TeleSpeech模型社区许可协议&lt;/a&gt;》。TeleSpeech模型支持商业用途，如果您计划将TeleSpeech模型或其衍生品用于商业目的，您需要通过以下联系邮箱 &lt;a href=&#34;mailto:tele_ai@chinatelecom.cn&#34;&gt;tele_ai@chinatelecom.cn&lt;/a&gt;，提交《TeleSpeech模型社区许可协议》要求的申请材料。审核通过后，将特此授予您一个非排他性、全球性、不可转让、不可再许可、可撤销的商用版权许可。&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>vladmandic/automatic</title>
    <updated>2024-05-30T01:32:33Z</updated>
    <id>tag:github.com,2024-05-30:/vladmandic/automatic</id>
    <link href="https://github.com/vladmandic/automatic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SD.Next: Advanced Implementation of Stable Diffusion and other Diffusion-based generative image models&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/vladmandic/automatic/raw/dev/html/favicon.png&#34; width=&#34;200&#34; alt=&#34;SD.Next&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;Stable Diffusion implementation with advanced features&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/vladmandic&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Sponsor&amp;amp;message=%E2%9D%A4&amp;amp;logo=GitHub&amp;amp;color=%23fe8e86&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/vladmandic/automatic?svg=true&#34; alt=&#34;Last Commit&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/vladmandic/automatic?svg=true&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://discord.gg/VjvR2tabEX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1101998836328697867?logo=Discord&amp;amp;svg=true&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/vladmandic/automatic/wiki&#34;&gt;Wiki&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/VjvR2tabEX&#34;&gt;Discord&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/#sdnext-features&#34;&gt;SD.Next Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/#backend-support&#34;&gt;Backend support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/#model-support&#34;&gt;Model support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/#platform-support&#34;&gt;Platform support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;SD.Next Features&lt;/h2&gt; &#xA;&lt;p&gt;All individual features are not listed here, instead check &lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/CHANGELOG.md&#34;&gt;ChangeLog&lt;/a&gt; for full list of changes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple backends!&lt;br&gt; ▹ &lt;strong&gt;Diffusers | Original&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple UIs!&lt;br&gt; ▹ &lt;strong&gt;Standard | Modern&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple diffusion models!&lt;br&gt; ▹ &lt;strong&gt;Stable Diffusion 1.5/2.1 | SD-XL | LCM | Segmind | Kandinsky | Pixart-α | Pixart-Σ | Stable Cascade | Würstchen | aMUSEd | DeepFloyd IF | UniDiffusion | SD-Distilled | BLiP Diffusion | KOALA | SDXS | Hyper-SD | etc.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built-in Control for Text, Image, Batch and video processing!&lt;br&gt; ▹ &lt;strong&gt;ControlNet | ControlNet XS | Control LLLite | T2I Adapters | IP Adapters&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiplatform!&lt;br&gt; ▹ &lt;strong&gt;Windows | Linux | MacOS with CPU | nVidia | AMD | IntelArc/IPEX | DirectML | OpenVINO | ONNX+Olive | ZLUDA&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Platform specific autodetection and tuning performed on install&lt;/li&gt; &#xA; &lt;li&gt;Optimized processing with latest &lt;code&gt;torch&lt;/code&gt; developments with built-in support for &lt;code&gt;torch.compile&lt;/code&gt;&lt;br&gt; and multiple compile backends: &lt;em&gt;Triton, ZLUDA, StableFast, DeepCache, OpenVINO, NNCF, IPEX, OneDiff&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Improved prompt parser&lt;/li&gt; &#xA; &lt;li&gt;Enhanced &lt;em&gt;Lora&lt;/em&gt;/&lt;em&gt;LoCon&lt;/em&gt;/&lt;em&gt;Lyco&lt;/em&gt; code supporting latest trends in training&lt;/li&gt; &#xA; &lt;li&gt;Built-in queue management&lt;/li&gt; &#xA; &lt;li&gt;Enterprise level logging and hardened API&lt;/li&gt; &#xA; &lt;li&gt;Built in installer with automatic updates and dependency management&lt;/li&gt; &#xA; &lt;li&gt;Modernized UI with theme support and number of built-in themes &lt;em&gt;(dark and light)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mobile compatible&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;em&gt;Main interface using &lt;strong&gt;StandardUI&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-text2image.jpg&#34; alt=&#34;Screenshot-Dark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Main interface using &lt;strong&gt;ModernUI&lt;/strong&gt;&lt;/em&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-modernui.jpg&#34; alt=&#34;Screenshot-Dark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For screenshots and informations on other available themes, see &lt;a href=&#34;https://github.com/vladmandic/automatic/wiki/Themes&#34;&gt;Themes Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Backend support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;SD.Next&lt;/strong&gt; supports two main backends: &lt;em&gt;Diffusers&lt;/em&gt; and &lt;em&gt;Original&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Diffusers&lt;/strong&gt;: Based on new &lt;a href=&#34;https://huggingface.co/docs/diffusers/index&#34;&gt;Huggingface Diffusers&lt;/a&gt; implementation&lt;br&gt; Supports &lt;em&gt;all&lt;/em&gt; models listed below&lt;br&gt; This backend is set as default for new installations&lt;br&gt; See &lt;a href=&#34;https://github.com/vladmandic/automatic/wiki/Diffusers&#34;&gt;wiki article&lt;/a&gt; for more information&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Original&lt;/strong&gt;: Based on &lt;a href=&#34;https://github.com/Stability-AI/stablediffusion&#34;&gt;LDM&lt;/a&gt; reference implementation and significantly expanded on by &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;A1111&lt;/a&gt;&lt;br&gt; This backend and is fully compatible with most existing functionality and extensions written for &lt;em&gt;A1111 SDWebUI&lt;/em&gt;&lt;br&gt; Supports &lt;strong&gt;SD 1.x&lt;/strong&gt; and &lt;strong&gt;SD 2.x&lt;/strong&gt; models&lt;br&gt; All other model types such as &lt;em&gt;SD-XL, LCM, Stable Cascade, PixArt, Playground, Segmind, Kandinsky, etc.&lt;/em&gt; require backend &lt;strong&gt;Diffusers&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Model support&lt;/h2&gt; &#xA;&lt;p&gt;Additional models will be added as they become available and there is public interest in them&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stability-AI/stablediffusion/&#34;&gt;RunwayML Stable Diffusion&lt;/a&gt; 1.x and 2.x &lt;em&gt;(all variants)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stability-AI/generative-models&#34;&gt;StabilityAI Stable Diffusion XL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/stabilityai/stable-video-diffusion-img2vid&#34;&gt;StabilityAI Stable Video Diffusion&lt;/a&gt; Base, XT 1.0, XT 1.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openai/consistency_models&#34;&gt;LCM: Latent Consistency Models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/playgroundai/playground-v2-256px-base&#34;&gt;Playground&lt;/a&gt; &lt;em&gt;v1, v2 256, v2 512, v2 1024 and latest v2.5&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Stability-AI/StableCascade&#34;&gt;Stable Cascade&lt;/a&gt; &lt;em&gt;Full&lt;/em&gt; and &lt;em&gt;Lite&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/amused/amused-256&#34;&gt;aMUSEd 256&lt;/a&gt; 256 and 512&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/segmind/Segmind-Vega&#34;&gt;Segmind Vega&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/segmind/SSD-1B&#34;&gt;Segmind SSD-1B&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segmind/segmoe&#34;&gt;Segmind SegMoE&lt;/a&gt; &lt;em&gt;SD and SD-XL&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ai-forever/Kandinsky-2&#34;&gt;Kandinsky&lt;/a&gt; &lt;em&gt;2.1 and 2.2 and latest 3.0&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PixArt-alpha/PixArt-alpha&#34;&gt;PixArt-α XL 2&lt;/a&gt; &lt;em&gt;Medium and Large&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PixArt-alpha/PixArt-sigma&#34;&gt;PixArt-Σ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/blog/wuertschen&#34;&gt;Warp Wuerstchen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thu-ml/unidiffuser&#34;&gt;Tsinghua UniDiffusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deep-floyd/IF&#34;&gt;DeepFloyd IF&lt;/a&gt; &lt;em&gt;Medium and Large&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/damo-vilab/text-to-video-ms-1.7b&#34;&gt;ModelScope T2V&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/blog/sd_distillation&#34;&gt;Segmind SD Distilled&lt;/a&gt; &lt;em&gt;(all variants)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dxli94.github.io/BLIP-Diffusion-website/&#34;&gt;BLIP-Diffusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/youngwanLEE/sdxl-koala&#34;&gt;KOALA 700M&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/ali-vilab/i2vgen-xl&#34;&gt;VGen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDKiro/sdxs&#34;&gt;SDXS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/ByteDance/Hyper-SD&#34;&gt;Hyper-SD&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also supported are modifiers such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;LCM&lt;/strong&gt; and &lt;strong&gt;Turbo&lt;/strong&gt; (&lt;em&gt;adversarial diffusion distillation&lt;/em&gt;) networks&lt;/li&gt; &#xA; &lt;li&gt;All &lt;strong&gt;LoRA&lt;/strong&gt; types such as LoCon, LyCORIS, HADA, IA3, Lokr, OFT&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IP-Adapters&lt;/strong&gt; for SD 1.5 and SD-XL&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;InstantID&lt;/strong&gt;, &lt;strong&gt;FaceSwap&lt;/strong&gt;, &lt;strong&gt;FaceID&lt;/strong&gt;, &lt;strong&gt;PhotoMerge&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AnimateDiff&lt;/strong&gt; for SD 1.5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platform support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;nVidia&lt;/em&gt; GPUs using &lt;strong&gt;CUDA&lt;/strong&gt; libraries on both &lt;em&gt;Windows and Linux&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;AMD&lt;/em&gt; GPUs using &lt;strong&gt;ROCm&lt;/strong&gt; libraries on &lt;em&gt;Linux&lt;/em&gt;&lt;br&gt; Support will be extended to &lt;em&gt;Windows&lt;/em&gt; once AMD releases ROCm for Windows&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Intel Arc&lt;/em&gt; GPUs using &lt;strong&gt;OneAPI&lt;/strong&gt; with &lt;em&gt;IPEX XPU&lt;/em&gt; libraries on both &lt;em&gt;Windows and Linux&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Any GPU compatible with &lt;em&gt;DirectX&lt;/em&gt; on &lt;em&gt;Windows&lt;/em&gt; using &lt;strong&gt;DirectML&lt;/strong&gt; libraries&lt;br&gt; This includes support for AMD GPUs that are not supported by native ROCm libraries&lt;/li&gt; &#xA; &lt;li&gt;Any GPU or device compatible with &lt;strong&gt;OpenVINO&lt;/strong&gt; libraries on both &lt;em&gt;Windows and Linux&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Apple M1/M2&lt;/em&gt; on &lt;em&gt;OSX&lt;/em&gt; using built-in support in Torch with &lt;strong&gt;MPS&lt;/strong&gt; optimizations&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;ONNX/Olive&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;IP Adapters&lt;/em&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-ipadapter.jpg&#34; alt=&#34;Screenshot-IPAdapter&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Color grading&lt;/em&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-color.jpg&#34; alt=&#34;Screenshot-Color&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;InstantID&lt;/em&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-instantid.jpg&#34; alt=&#34;Screenshot-InstantID&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Loading any model other than standard SD 1.x / SD 2.x requires use of backend &lt;strong&gt;Diffusers&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Loading any other models using &lt;strong&gt;Original&lt;/strong&gt; backend is not supported&lt;/li&gt; &#xA;  &lt;li&gt;Loading manually download model &lt;code&gt;.safetensors&lt;/code&gt; files is supported for specified models only (typically SD 1.x / SD 2.x / SD-XL models only)&lt;/li&gt; &#xA;  &lt;li&gt;For all other model types, use backend &lt;strong&gt;Diffusers&lt;/strong&gt; and use built in Model downloader or&lt;br&gt; select model from Networks -&amp;gt; Models -&amp;gt; Reference list in which case it will be auto-downloaded and loaded&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/automatic/wiki/Installation&#34;&gt;Step-by-step install guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/automatic/wiki/Advanced-Install&#34;&gt;Advanced install notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nWTnTyFTuAs&#34;&gt;Video: install and use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/automatic/discussions/1627&#34;&gt;Common installation errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/automatic/discussions/1011&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you can&#39;t run SD.Next locally, try cloud deployment using &lt;a href=&#34;https://rundiffusion.com?utm_source=github&amp;amp;utm_medium=referral&amp;amp;utm_campaign=SDNext&#34;&gt;RunDiffusion&lt;/a&gt;!&lt;/li&gt; &#xA;  &lt;li&gt;Server can run with or without virtual environment,&lt;br&gt; Recommended to use &lt;code&gt;VENV&lt;/code&gt; to avoid library version conflicts with other applications&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;nVidia/CUDA&lt;/strong&gt; / &lt;strong&gt;AMD/ROCm&lt;/strong&gt; / &lt;strong&gt;Intel/OneAPI&lt;/strong&gt; are auto-detected if present and available,&lt;br&gt; For any other use case such as &lt;strong&gt;DirectML&lt;/strong&gt;, &lt;strong&gt;ONNX/Olive&lt;/strong&gt;, &lt;strong&gt;OpenVINO&lt;/strong&gt; specify required parameter explicitly&lt;br&gt; or wrong packages may be installed as installer will assume CPU-only environment&lt;/li&gt; &#xA;  &lt;li&gt;Full startup sequence is logged in &lt;code&gt;sdnext.log&lt;/code&gt;,&lt;br&gt; so if you encounter any issues, please check it first&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;p&gt;Once SD.Next is installed, simply run &lt;code&gt;webui.ps1&lt;/code&gt; or &lt;code&gt;webui.bat&lt;/code&gt; (&lt;em&gt;Windows&lt;/em&gt;) or &lt;code&gt;webui.sh&lt;/code&gt; (&lt;em&gt;Linux or MacOS&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;List of available parameters, run &lt;code&gt;webui --help&lt;/code&gt; for the full &amp;amp; up-to-date list:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Server options:&#xA;  --config CONFIG                                    Use specific server configuration file, default: config.json&#xA;  --ui-config UI_CONFIG                              Use specific UI configuration file, default: ui-config.json&#xA;  --medvram                                          Split model stages and keep only active part in VRAM, default: False&#xA;  --lowvram                                          Split model components and keep only active part in VRAM, default: False&#xA;  --ckpt CKPT                                        Path to model checkpoint to load immediately, default: None&#xA;  --vae VAE                                          Path to VAE checkpoint to load immediately, default: None&#xA;  --data-dir DATA_DIR                                Base path where all user data is stored, default:&#xA;  --models-dir MODELS_DIR                            Base path where all models are stored, default: models&#xA;  --allow-code                                       Allow custom script execution, default: False&#xA;  --share                                            Enable UI accessible through Gradio site, default: False&#xA;  --insecure                                         Enable extensions tab regardless of other options, default: False&#xA;  --use-cpu USE_CPU [USE_CPU ...]                    Force use CPU for specified modules, default: []&#xA;  --listen                                           Launch web server using public IP address, default: False&#xA;  --port PORT                                        Launch web server with given server port, default: 7860&#xA;  --freeze                                           Disable editing settings&#xA;  --auth AUTH                                        Set access authentication like &#34;user:pwd,user:pwd&#34;&#34;&#xA;  --auth-file AUTH_FILE                              Set access authentication using file, default: None&#xA;  --autolaunch                                       Open the UI URL in the system&#39;s default browser upon launch&#xA;  --docs                                             Mount API docs, default: False&#xA;  --api-only                                         Run in API only mode without starting UI&#xA;  --api-log                                          Enable logging of all API requests, default: False&#xA;  --device-id DEVICE_ID                              Select the default CUDA device to use, default: None&#xA;  --cors-origins CORS_ORIGINS                        Allowed CORS origins as comma-separated list, default: None&#xA;  --cors-regex CORS_REGEX                            Allowed CORS origins as regular expression, default: None&#xA;  --tls-keyfile TLS_KEYFILE                          Enable TLS and specify key file, default: None&#xA;  --tls-certfile TLS_CERTFILE                        Enable TLS and specify cert file, default: None&#xA;  --tls-selfsign                                     Enable TLS with self-signed certificates, default: False&#xA;  --server-name SERVER_NAME                          Sets hostname of server, default: None&#xA;  --no-hashing                                       Disable hashing of checkpoints, default: False&#xA;  --no-metadata                                      Disable reading of metadata from models, default: False&#xA;  --disable-queue                                    Disable queues, default: False&#xA;  --subpath SUBPATH                                  Customize the URL subpath for usage with reverse proxy&#xA;  --backend {original,diffusers}                     force model pipeline type&#xA;  --allowed-paths ALLOWED_PATHS [ALLOWED_PATHS ...]  add additional paths to paths allowed for web access&#xA;&#xA;Setup options:&#xA;  --reset                                            Reset main repository to latest version, default: False&#xA;  --upgrade                                          Upgrade main repository to latest version, default: False&#xA;  --requirements                                     Force re-check of requirements, default: False&#xA;  --quick                                            Bypass version checks, default: False&#xA;  --use-directml                                     Use DirectML if no compatible GPU is detected, default: False&#xA;  --use-openvino                                     Use Intel OpenVINO backend, default: False&#xA;  --use-ipex                                         Force use Intel OneAPI XPU backend, default: False&#xA;  --use-cuda                                         Force use nVidia CUDA backend, default: False&#xA;  --use-rocm                                         Force use AMD ROCm backend, default: False&#xA;  --use-zluda                                        Force use ZLUDA, AMD GPUs only, default: False&#xA;  --use-xformers                                     Force use xFormers cross-optimization, default: False&#xA;  --skip-requirements                                Skips checking and installing requirements, default: False&#xA;  --skip-extensions                                  Skips running individual extension installers, default: False&#xA;  --skip-git                                         Skips running all GIT operations, default: False&#xA;  --skip-torch                                       Skips running Torch checks, default: False&#xA;  --skip-all                                         Skips running all checks, default: False&#xA;  --skip-env                                         Skips setting of env variables during startup, default: False&#xA;  --experimental                                     Allow unsupported versions of libraries, default: False&#xA;  --reinstall                                        Force reinstallation of all requirements, default: False&#xA;  --test                                             Run test only and exit&#xA;  --version                                          Print version information&#xA;  --ignore                                           Ignore any errors and attempt to continue&#xA;  --safe                                             Run in safe mode with no user extensions&#xA;&#xA;Logging options:&#xA;  --log LOG                                          Set log file, default: None&#xA;  --debug                                            Run installer with debug logging, default: False&#xA;  --profile                                          Run profiler, default: False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you don&#39;t want to use built-in &lt;code&gt;venv&lt;/code&gt; support and prefer to run SD.Next in your own environment such as &lt;em&gt;Docker&lt;/em&gt; container, &lt;em&gt;Conda&lt;/em&gt; environment or any other virtual environment, you can skip &lt;code&gt;venv&lt;/code&gt; create/activate and launch SD.Next directly using &lt;code&gt;python launch.py&lt;/code&gt; (command line flags noted above still apply).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Control&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;SD.Next&lt;/strong&gt; comes with built-in control for all types of text2image, image2image, video2video and batch processing&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Control interface&lt;/em&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-control.jpg&#34; alt=&#34;Screenshot-Control&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Control processors&lt;/em&gt;:&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-processors.jpg&#34; alt=&#34;Screenshot-Process&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Masking&lt;/em&gt;: &lt;img src=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/screenshot-mask.jpg&#34; alt=&#34;Screenshot-Mask&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extensions&lt;/h3&gt; &#xA;&lt;p&gt;SD.Next comes with several extensions pre-installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/sd-extension-system-info&#34;&gt;System Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/sd-extension-chainner&#34;&gt;chaiNNer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/sd-extension-rembg&#34;&gt;RemBg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArtVentureX/sd-webui-agent-scheduler&#34;&gt;Agent Scheduler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BinaryQuantumSoul/sdnext-modernui&#34;&gt;Modern UI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Collab&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We&#39;d love to have additional maintainers (with comes with full repo rights). If you&#39;re interested, ping us!&lt;/li&gt; &#xA; &lt;li&gt;In addition to general cross-platform code, desire is to have a lead for each of the main platforms&lt;br&gt; This should be fully cross-platform, but we&#39;d really love to have additional contributors and/or maintainers to join and help lead the efforts on different platforms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main credit goes to &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Automatic1111 WebUI&lt;/a&gt; for original codebase&lt;/li&gt; &#xA; &lt;li&gt;Additional credits are listed in &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Licenses for modules are listed in &lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/html/licenses.html&#34;&gt;Licenses&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Evolution&lt;/h3&gt; &#xA;&lt;a href=&#34;https://star-history.com/#vladmandic/automatic&amp;amp;Date&#34;&gt; &#xA; &lt;picture width=&#34;640&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=vladmandic/automatic&amp;amp;type=Date&amp;amp;theme=dark&#34;&gt; &#xA;  &lt;img src=&#34;https://api.star-history.com/svg?repos=vladmandic/automatic&amp;amp;type=Date&#34; alt=&#34;starts&#34; width=&#34;320&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ossinsight.io/analyze/vladmandic/automatic#overview&#34;&gt;OSS Stats&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docs&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re unsure how to use a feature, best place to start is &lt;a href=&#34;https://github.com/vladmandic/automatic/wiki&#34;&gt;Wiki&lt;/a&gt; and if its not there,&lt;br&gt; check &lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/CHANGELOG.md&#34;&gt;ChangeLog&lt;/a&gt; for when feature was first introduced as it will always have a short note on how to use it&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vladmandic/automatic/wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/README.md&#34;&gt;ReadMe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/TODO.md&#34;&gt;ToDo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/CHANGELOG.md&#34;&gt;ChangeLog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/vladmandic/automatic/master/cli/README.md&#34;&gt;CLI Tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- sponsors --&gt;&#xA; &lt;a href=&#34;https://github.com/Tillerz&#34;&gt;&lt;img src=&#34;https://github.com/Tillerz.png&#34; width=&#34;60px&#34; alt=&#34;Tillerz&#34;&gt;&lt;/a&gt;&#xA; &lt;a href=&#34;https://github.com/allangrant&#34;&gt;&lt;img src=&#34;https://github.com/allangrant.png&#34; width=&#34;60px&#34; alt=&#34;Allan Grant&#34;&gt;&lt;/a&gt;&#xA; &lt;a href=&#34;https://github.com/BrentOzar&#34;&gt;&lt;img src=&#34;https://github.com/BrentOzar.png&#34; width=&#34;60px&#34; alt=&#34;Brent Ozar&#34;&gt;&lt;/a&gt;&#xA; &lt;a href=&#34;https://github.com/inktomi&#34;&gt;&lt;img src=&#34;https://github.com/inktomi.png&#34; width=&#34;60px&#34; alt=&#34;Matthew Runo&#34;&gt;&lt;/a&gt;&#xA; &lt;a href=&#34;https://github.com/4joeknight4&#34;&gt;&lt;img src=&#34;https://github.com/4joeknight4.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA; &lt;a href=&#34;https://github.com/SaladTechnologies&#34;&gt;&lt;img src=&#34;https://github.com/SaladTechnologies.png&#34; width=&#34;60px&#34; alt=&#34;Salad Technologies&#34;&gt;&lt;/a&gt;&#xA; &lt;a href=&#34;https://github.com/mantzaris&#34;&gt;&lt;img src=&#34;https://github.com/mantzaris.png&#34; width=&#34;60px&#34; alt=&#34;a.v.mantzaris&#34;&gt;&lt;/a&gt;&#xA; &lt;a href=&#34;https://github.com/CurseWave&#34;&gt;&lt;img src=&#34;https://github.com/CurseWave.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- sponsors --&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>octo-models/octo</title>
    <updated>2024-05-30T01:32:33Z</updated>
    <id>tag:github.com,2024-05-30:/octo-models/octo</id>
    <link href="https://github.com/octo-models/octo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Octo is a transformer-based robot policy trained on a diverse mix of 800k robot trajectories.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Octo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://githubtocolab.com/octo-models/octo/blob/main/examples/01_inference_pretrained.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://octo-models.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Project-Page-a&#34; alt=&#34;Static Badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/rail-berkeley/octo/workflows/run-debug/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/rail-berkeley/octo/workflows/pre-commit/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo contains code for training and finetuning Octo generalist robotic policies (GRPs). Octo models are transformer-based diffusion policies, trained on a diverse mix of 800k robot trajectories.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Follow the installation instructions, then load a pretrained Octo model! See &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/&#34;&gt;examples&lt;/a&gt; for guides to zero-shot evaluation and finetuning and &lt;a href=&#34;https://colab.research.google.com/drive/1z0vELj_lX9OWeoMG_WvXnQs43aPOEAhz?usp=sharing&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; for an inference example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from octo.model.octo_model import OctoModel&#xA;model = OctoModel.load_pretrained(&#34;hf://rail-berkeley/octo-base-1.5&#34;)&#xA;print(model.get_pretty_spec())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/octo-models/octo/main/docs/assets/teaser.jpg&#34; alt=&#34;Octo model&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Out of the box, Octo supports multiple RGB camera inputs, can control various robot arms, and can be instructed via language commands or goal images. Octo uses a modular attention structure in its transformer backbone, allowing it to be effectively finetuned to robot setups with new sensory inputs, action spaces, and morphologies, using only a small target domain dataset and accessible compute budgets.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n octo python=3.10&#xA;conda activate octo&#xA;pip install -e .&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For GPU:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --upgrade &#34;jax[cuda11_pip]==0.4.20&#34; -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For TPU&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install --upgrade &#34;jax[tpu]==0.4.20&#34; -f https://storage.googleapis.com/jax-releases/libtpu_releases.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/google/jax&#34;&gt;Jax Github page&lt;/a&gt; for more details on installing Jax.&lt;/p&gt; &#xA;&lt;p&gt;Test the installation by finetuning on the debug dataset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/finetune.py --config.pretrained_path=hf://rail-berkeley/octo-small-1.5 --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Checkpoints&lt;/h2&gt; &#xA;&lt;p&gt;You can find pretrained Octo checkpoints &lt;a href=&#34;https://huggingface.co/rail-berkeley&#34;&gt;here&lt;/a&gt;. At the moment we provide the following model versions:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Inference on 1x NVIDIA 4090&lt;/th&gt; &#xA;   &lt;th&gt;Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/rail-berkeley/octo-base&#34;&gt;Octo-Base&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;13 it/sec&lt;/td&gt; &#xA;   &lt;td&gt;93M Params&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/rail-berkeley/octo-small&#34;&gt;Octo-Small&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;17 it/sec&lt;/td&gt; &#xA;   &lt;td&gt;27M Params&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;We provide simple &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples&#34;&gt;example scripts&lt;/a&gt; that demonstrate how to use and finetune Octo models, as well as how to use our data loader independently. We provide the following examples:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/01_inference_pretrained.ipynb&#34;&gt;Octo Inference&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimal example for loading and running a pretrained Octo model&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/02_finetune_new_observation_action.py&#34;&gt;Octo Finetuning&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minimal example for finetuning a pretrained Octo models on a small dataset with a new observation and action space&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/03_eval_finetuned.py&#34;&gt;Octo Rollout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Run a rollout of a pretrained Octo policy in a Gym environment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/04_eval_finetuned_on_robot.py&#34;&gt;Octo Robot Eval&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Evaluate a pretrained Octo model on a real WidowX robot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/05_dataloading.ipynb&#34;&gt;OpenX Dataloader Intro&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Walkthrough of the features of our Open X-Embodiment data loader&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/06_pytorch_oxe_dataloader.ipynb&#34;&gt;OpenX PyTorch Dataloader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Standalone Open X-Embodiment data loader in PyTorch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Octo Pretraining&lt;/h2&gt; &#xA;&lt;p&gt;To reproduce our Octo pretraining on 800k robot trajectories, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/train.py --config scripts/configs/octo_pretrain_config.py:&amp;lt;size&amp;gt; --name=octo --config.dataset_kwargs.oxe_kwargs.data_dir=... --config.dataset_kwargs.oxe_kwargs.data_mix=oxe_magic_soup ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download the pretraining dataset from the &lt;a href=&#34;https://robotics-transformer-x.github.io/&#34;&gt;Open X-Embodiment Dataset&lt;/a&gt;, install the &lt;a href=&#34;https://github.com/kpertsch/rlds_dataset_mod&#34;&gt;rlds_dataset_mod package&lt;/a&gt; and run the &lt;a href=&#34;https://github.com/kpertsch/rlds_dataset_mod/raw/main/prepare_open_x.sh&#34;&gt;prepare_open_x.sh script&lt;/a&gt;. The total size of the pre-processed dataset is ~1.2TB.&lt;/p&gt; &#xA;&lt;p&gt;We run pretraining using a TPUv4-128 pod in 8 hours for the Octo-S model and in 14 hours for Octo-B.&lt;/p&gt; &#xA;&lt;h2&gt;Octo Finetuning&lt;/h2&gt; &#xA;&lt;p&gt;We provide a &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/02_finetune_new_observation_action.py&#34;&gt;minimal example&lt;/a&gt; for finetuning with a new observation and action space.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a more advanced finetuning script that allows you to change hyperparameters via a config file and logs finetuning metrics. To run advanced finetuning, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python scripts/finetune.py --config.pretrained_path=hf://rail-berkeley/octo-small-1.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We offer three finetuning modes depending on the parts of the model that are kept frozen: &lt;code&gt;head_only&lt;/code&gt;, &lt;code&gt;head_mlp_only&lt;/code&gt;, and &lt;code&gt;full&lt;/code&gt; to finetune the full model. Additionally, one can specify the task type to finetune with: &lt;code&gt;image_conditioned&lt;/code&gt;, &lt;code&gt;language_conditioned&lt;/code&gt; or &lt;code&gt;multimodal&lt;/code&gt; for both. For example, to finetune the full transformer with image inputs only use: &lt;code&gt;--config=finetune_config.py:full,image_conditioned&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Octo Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;Loading and running a trained Octo model is as easy as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from octo.model import OctoModel&#xA;&#xA;model = OctoModel.load_pretrained(&#34;hf://rail-berkeley/octo-small-1.5&#34;)&#xA;task = model.create_tasks(texts=[&#34;pick up the spoon&#34;])&#xA;action = model.sample_actions(observation, task, rng=jax.random.PRNGKey(0))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We provide examples for evaluating Octo &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/03_eval_finetuned.py&#34;&gt;in a simulated Gym environment&lt;/a&gt; as well as &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/04_eval_finetuned_on_robot.py&#34;&gt;on a real WidowX robot&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To evaluate on your own environment, simply wrap it in a Gym interface and follow the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/examples/envs/README.md&#34;&gt;Eval Env README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code Structure&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;File&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hyperparameters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/scripts/configs/config.py&#34;&gt;config.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Defines all hyperparameters for the training run.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pretraining Loop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/scripts/train.py&#34;&gt;train.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main pretraining script.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Finetuning Loop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/scripts/finetune.py&#34;&gt;finetune.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main finetuning script.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Datasets&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/octo/data/dataset.py&#34;&gt;dataset.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Functions for creating single / interleaved datasets + data augmentation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tokenizers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/octo/model/components/tokenizers.py&#34;&gt;tokenizers.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Tokenizers that encode image / text inputs into tokens.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Octo Model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/octo/model/octo_model.py&#34;&gt;octo_model.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Main entry point for interacting with Octo models: loading, saving, and inference.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Model Architecture&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/octo/model/octo_module.py&#34;&gt;octo_module.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Combines token sequencing, transformer backbone and readout heads.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visualization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/octo/utils/visualization_lib.py&#34;&gt;visualization_lib.py&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Utilities for offline qualitative &amp;amp; quantitative eval.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;What is the &lt;code&gt;timestep_pad_mask&lt;/code&gt; in the observation dictionary?&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;timestep_pad_mask&lt;/code&gt; indicates which observations should be attended to, which is important when using multiple timesteps of observation history. Octo was trained with a history window size of 2, meaning the model can predict an action using both the current observation and the previous observation. However, at the very beginning of the trajectory, there is no previous observation, so we need to set &lt;code&gt;timestep_pad_mask=False&lt;/code&gt; at the corresponding index. If you use Octo with a window size of 1, &lt;code&gt;timestep_pad_mask&lt;/code&gt; should always just be &lt;code&gt;[True]&lt;/code&gt;, indicating that the one and only observation in the window should be attended to. Note that if you wrap your robot environment with the &lt;code&gt;HistoryWrapper&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/octo/utils/gym_wrappers.py&#34;&gt;gym_wrappers.py&lt;/a&gt;), the &lt;code&gt;timestep_pad_mask&lt;/code&gt; key will be added to the observation dictionary for you.&lt;/p&gt; &#xA;&lt;h4&gt;What is &lt;code&gt;pad_mask_dict&lt;/code&gt; in the observation dictionary?&lt;/h4&gt; &#xA;&lt;p&gt;While &lt;code&gt;timestep_pad_mask&lt;/code&gt; indicates which observations should be attended to on a timestep level, &lt;code&gt;pad_mask_dict&lt;/code&gt; indicates which elements of the observation should be attended to within a single timestep. For example, for datasets without language labels, &lt;code&gt;pad_mask_dict[&#34;language_instruction&#34;]&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;. For datasets without a wrist camera, &lt;code&gt;pad_mask_dict[&#34;image_wrist&#34;]&lt;/code&gt; is set to &lt;code&gt;False&lt;/code&gt;. For convenience, if a key is missing from the observation dict, it is equivalent to setting &lt;code&gt;pad_mask_dict&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt; for that key.&lt;/p&gt; &#xA;&lt;h4&gt;Does &lt;code&gt;model.sample_actions([...])&lt;/code&gt; return the full trajectory to solve a task?&lt;/h4&gt; &#xA;&lt;p&gt;Octo was pretrained with an action chunking size of 4, meaning it predicts the next 4 actions at once. You can choose to execute all these actions before sampling new ones, or only execute the first action before sampling new ones (also known as receding horizon control). You can also do something more advanced like &lt;a href=&#34;https://raw.githubusercontent.com/octo-models/octo/main/octo/utils/gym_wrappers.py&#34;&gt;temporal ensembling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Updates for Version 1.5&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improved cross-attention between visual and language tokens by repeating language tokens at every timestep in the context window.&lt;/li&gt; &#xA; &lt;li&gt;Augmented the language instructions in the data with rephrasings from GPT-3.5.&lt;/li&gt; &#xA; &lt;li&gt;Bug fixes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Turned off dropout in the diffusion head due to incompatibility with layer norm.&lt;/li&gt; &#xA;   &lt;li&gt;Fixed an off-by-one error with the attention mask.&lt;/li&gt; &#xA;   &lt;li&gt;Fixed an issue where different image augmentations did not get fresh random seeds.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{octo_2023,&#xA;    title={Octo: An Open-Source Generalist Robot Policy},&#xA;    author = {{Octo Model Team} and Dibya Ghosh and Homer Walke and Karl Pertsch and Kevin Black and Oier Mees and Sudeep Dasari and Joey Hejna and Charles Xu and Jianlan Luo and Tobias Kreiman and {You Liang} Tan and Pannag Sanketi and Quan Vuong and Ted Xiao and Dorsa Sadigh and Chelsea Finn and Sergey Levine},&#xA;    booktitle = {Proceedings of Robotics: Science and Systems},&#xA;    address  = {Delft, Netherlands},&#xA;    year = {2024},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>