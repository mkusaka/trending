<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-14T01:38:15Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kivy/kivy</title>
    <updated>2023-11-14T01:38:15Z</updated>
    <id>tag:github.com,2023-11-14:/kivy/kivy</id>
    <link href="https://github.com/kivy/kivy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open source UI framework written in Python, running on Windows, Linux, macOS, Android and iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kivy&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; height=&#34;256&#34; src=&#34;https://raw.githubusercontent.com/kivy/kivy/master/kivy/data/logo/kivy-icon-256.png&#34;&gt; &#xA;&lt;p&gt;Innovative user interfaces made easy.&lt;/p&gt; &#xA;&lt;p&gt;Kivy is an open source, cross-platform &lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt; framework for the development of applications that make use of innovative, multi-touch user interfaces. The aim is to allow for quick and easy interaction design and rapid prototyping whilst making your code reusable and deployable.&lt;/p&gt; &#xA;&lt;p&gt;Kivy is written in Python and &lt;a href=&#34;http://cython.org/&#34;&gt;Cython&lt;/a&gt;, based on OpenGL ES 2, supports various input devices and has an extensive widget library. With the same codebase, you can target Windows, macOS, Linux, Android and iOS. All Kivy widgets are built with multitouch support.&lt;/p&gt; &#xA;&lt;p&gt;Kivy is MIT licensed, actively developed by a great community and is supported by many projects managed by the &lt;a href=&#34;https://kivy.org/#organization&#34;&gt;Kivy Organization&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kivy/kivy/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kivy/kivy/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/r/kivy/kivy?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/kivy/kivy/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kivy/kivy/actions?query=workflow%3A%22Windows+Unittests%22&#34;&gt;&lt;img src=&#34;https://github.com/kivy/kivy/workflows/Windows%20Unittests/badge.svg?sanitize=true&#34; alt=&#34;Windows Unittests Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kivy/kivy/actions?query=workflow%3A%22Ubuntu+Unittests%22&#34;&gt;&lt;img src=&#34;https://github.com/kivy/kivy/workflows/Ubuntu%20Unittests/badge.svg?sanitize=true&#34; alt=&#34;Ubuntu Unittests Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kivy/kivy/actions?query=workflow%3A%22OSX+Unittests%22&#34;&gt;&lt;img src=&#34;https://github.com/kivy/kivy/workflows/OSX%20Unittests/badge.svg?sanitize=true&#34; alt=&#34;OSX Unittests Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kivy/kivy/actions?query=workflow%3A%22Windows+wheels%22&#34;&gt;&lt;img src=&#34;https://github.com/kivy/kivy/workflows/Windows%20wheels/badge.svg?sanitize=true&#34; alt=&#34;Windows wheels Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kivy/kivy/actions?query=workflow%3A%22Manylinux+wheels%22&#34;&gt;&lt;img src=&#34;https://github.com/kivy/kivy/workflows/Manylinux%20wheels/badge.svg?sanitize=true&#34; alt=&#34;Manylinux wheels Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kivy/kivy/actions?query=workflow%3A%22RPi+wheels%22&#34;&gt;&lt;img src=&#34;https://github.com/kivy/kivy/workflows/RPi%20wheels/badge.svg?sanitize=true&#34; alt=&#34;Raspberry Pi wheels Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kivy/kivy/actions?query=workflow%3A%22OSX+wheels%2Fapp%22&#34;&gt;&lt;img src=&#34;https://github.com/kivy/kivy/workflows/OSX%20wheels%2Fapp/badge.svg?sanitize=true&#34; alt=&#34;OSX wheels Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation, Documentation and Examples&lt;/h2&gt; &#xA;&lt;p&gt;Extensive installation instructions as well as tutorials and general documentation, including an API reference, can be found at &lt;a href=&#34;https://kivy.org/docs&#34;&gt;https://kivy.org/docs&lt;/a&gt;. A &lt;a href=&#34;https://media.readthedocs.org/pdf/kivy/latest/kivy.pdf&#34;&gt;PDF version&lt;/a&gt; is also available.&lt;/p&gt; &#xA;&lt;p&gt;Kivy ships with many examples which can be found in the &lt;code&gt;examples&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you need help, please feel free to seek assistance through our support channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the &lt;a href=&#34;https://groups.google.com/group/kivy-users&#34;&gt;Kivy Users Google Group&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ask questions using &lt;a href=&#34;https://github.com/orgs/kivy/discussions/new?category=q-a&#34;&gt;discussions&lt;/a&gt; on github&lt;/li&gt; &#xA; &lt;li&gt;Use support-channels on our official &lt;a href=&#34;https://chat.kivy.org&#34;&gt;Discord&lt;/a&gt; server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We love pull requests and discussing novel ideas. Check out our &lt;a href=&#34;https://kivy.org/docs/contribute.html&#34;&gt;contribution guide&lt;/a&gt; and feel free to improve Kivy.&lt;/p&gt; &#xA;&lt;p&gt;The following mailing list and Discord channel are used exclusively for discussions about developing the Kivy framework and its sister projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dev Group : &lt;a href=&#34;https://groups.google.com/group/kivy-dev&#34;&gt;https://groups.google.com/group/kivy-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email : &lt;a href=&#34;mailto:kivy-dev@googlegroups.com&#34;&gt;kivy-dev@googlegroups.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Discord channel:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server : &lt;a href=&#34;https://chat.kivy.org&#34;&gt;https://chat.kivy.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Channel : #dev&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sister projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/buildozer&#34;&gt;Buildozer&lt;/a&gt;: generic Python packager for Android and iOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/plyer&#34;&gt;Plyer&lt;/a&gt;: platform-independent Python wrapper for platform-dependent APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/pyjnius&#34;&gt;Pyjnius&lt;/a&gt;: dynamic access to the Java/Android API from Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/pyobjus&#34;&gt;Pyobjus&lt;/a&gt;: dynamic access to the Objective-C/iOS API from Python.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/python-for-android&#34;&gt;Python for Android&lt;/a&gt;: toolchain for building and packaging Python applications for Android.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/kivy-ios&#34;&gt;Kivy iOS&lt;/a&gt;: toolchain for building and packaging Kivy applications for iOS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/audiostream&#34;&gt;Audiostream&lt;/a&gt;: library for direct access to the microphone and speaker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/kivent&#34;&gt;KivEnt&lt;/a&gt;: entity-based game engine for Kivy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy-garden&#34;&gt;Garden&lt;/a&gt;: widgets and libraries created and maintained by users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kivy/oscpy/&#34;&gt;Oscpy&lt;/a&gt;: a fast and tested python2/3 implementation of OSC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kivy is released under the terms of the MIT License. Please refer to the LICENSE file.&lt;/li&gt; &#xA; &lt;li&gt;The provided fonts Roboto and Roboto Mono are licensed and distributed under the terms of the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, Version 2.0&lt;/a&gt;. The DejaVuSans (used for the virtual keyboard) license can be viewed &lt;a href=&#34;https://github.com/dejavu-fonts/dejavu-fonts/raw/master/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The current UI design has been adapted from Moblintouch theme&#39;s SVGs and is licensed under the terms of the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/lgpl-2.1&#34;&gt;LGPLv2.1&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/kivy/kivy/master/.github/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/kivy/kivy/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&#34;https://opencollective.com/kivy#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/kivy#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/kivy#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/kivy/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/kivy/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/kivy/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LLaVA-VL/LLaVA-Plus-Codebase</title>
    <updated>2023-11-14T01:38:15Z</updated>
    <id>tag:github.com,2023-11-14:/LLaVA-VL/LLaVA-Plus-Codebase</id>
    <link href="https://github.com/LLaVA-VL/LLaVA-Plus-Codebase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LLaVA-Plus: Large Language and Vision Assistants that Plug and Learn to Use Skills&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üåã LLaVA-Plus: Large Language and Vision Assistants that Plug and Learn to Use Skills&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Learning to Use Tools For Creating Multimodal Agents.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;[&lt;a href=&#34;https://llava-vl.github.io/llava-plus&#34;&gt;Project Page&lt;/a&gt;] [&lt;a href=&#34;https://arxiv.org/abs/2311.05437&#34;&gt;Arxiv&lt;/a&gt;] [&lt;a href=&#34;https://llavaplus.ngrok.io/&#34;&gt;Demo&lt;/a&gt;] [&lt;a href=&#34;https://huggingface.co/datasets/LLaVA-VL/llava-plus-data&#34;&gt;Data&lt;/a&gt;] [&lt;a href=&#34;https://github.com/LLaVA-VL/LLaVA-Plus-Codebase/raw/main/docs/llava-plus/modelzoo.md&#34;&gt;Model Zoo&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Some sections of the code are currently being prepared and updated. Please stay tuned.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[11/11] üî• We released &lt;strong&gt;LLaVA-Plus: Large Language and Vision Assistants that Plug and Learn to Use Skills&lt;/strong&gt;. Enable LMM to use tools for general vision tasks! Checkout the &lt;a href=&#34;&#34;&gt;paper&lt;/a&gt; and &lt;a href=&#34;https://llavaplus.ngrok.io/&#34;&gt;demo&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Code%20License-Apache_2.0-green.svg?sanitize=true&#34; alt=&#34;Code License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tatsu-lab/stanford_alpaca/raw/main/DATA_LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Data%20License-CC%20By%20NC%204.0-red.svg?sanitize=true&#34; alt=&#34;Data License&#34;&gt;&lt;/a&gt; &lt;strong&gt;Usage and License Notices&lt;/strong&gt;: The data and checkpoint are intended and licensed for research use only. They are also restricted to uses that follow the license agreement of LLaVA, LLaMA, Vicuna, and GPT-4. The dataset is CC BY NC 4.0 (allowing only non-commercial use) and models trained using the dataset should not be used outside of research purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#llava-plus-weights&#34;&gt;LLaVA-Plus Weights&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/docs/llava-plus/modelzoo.md&#34;&gt;Model Zoo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/docs/llava-plus/dataset.md&#34;&gt;Dataset&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#train&#34;&gt;Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#evaluation&#34;&gt;Evaluation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;If you are not using Linux, do &lt;em&gt;NOT&lt;/em&gt; proceed, see instructions for &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/macOS.md&#34;&gt;macOS&lt;/a&gt; and &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/Windows.md&#34;&gt;Windows&lt;/a&gt; from LLaVA.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository and navigate to the LLaVA-Plus folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/LLaVA-VL/LLaVA-Plus-Codebase LLaVA-Plus&#xA;cd LLaVA-Plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install Package&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;conda create -n llava python=3.10 -y&#xA;conda activate llava&#xA;pip install --upgrade pip  # enable PEP 660 support&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install additional packages for training cases&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip install -e &#34;.[train]&#34;&#xA;pip install flash-attn --no-build-isolation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LLaVA-Plus Weights&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;We are still preparing the part. Stay tuned!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please check out our &lt;a href=&#34;https://github.com/LLaVA-VL/LLaVA-Plus-Codebase/raw/main/docs/llava-plus/modelzoo.md&#34;&gt;Model Zoo&lt;/a&gt; for all public LLaVA-Plus checkpoints, and the instructions on how to use the weights.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://llavaplus.ngrok.io/&#34;&gt;Demo: https://llavaplus.ngrok.io/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Demo Architecture&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/images/llava-plus-arch.png&#34; alt=&#34;llava-plus-arch&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run our demo, you have four steps.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#1-Launch-a-controller&#34;&gt;Launch a controller&lt;/a&gt;: enable to control different works.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#2-Launch-a-model-worker&#34;&gt;Launch a model worker&lt;/a&gt;: core llava-plus model.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#3-Launch-tool-workers&#34;&gt;Launch tool workers&lt;/a&gt;: the tools you want to call.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/#4-Launch-a-gradio-web-server&#34;&gt;Launch a gradio web server&lt;/a&gt;: a front end page for users.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;1. Launch a controller&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.controller --host 0.0.0.0 --port 20001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Launch a model worker&lt;/h4&gt; &#xA;&lt;p&gt;This is the actual &lt;em&gt;worker&lt;/em&gt; that performs the inference on the GPU. Each worker is responsible for a single model specified in &lt;code&gt;--model-path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:20001 --port 40000 --worker http://localhost:40000 --model-path &amp;lt;huggingface or local path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait until the process finishes loading the model and you see &#34;Uvicorn running on ...&#34;. Now, refresh your Gradio web UI, and you will see the model you just launched in the model list.&lt;/p&gt; &#xA;&lt;p&gt;If you are using an Apple device with an M1 or M2 chip, you can specify the mps device by using the &lt;code&gt;--device&lt;/code&gt; flag: &lt;code&gt;--device mps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Multiple works&lt;/summary&gt; You can launch as many workers as you want, and compare between different model checkpoints in the same Gradio interface. Please keep the `--controller` the same, and modify the `--port` and `--worker` to a different port number for each worker. ```Shell python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:20001 --port &#xA; &lt;different from 40000, say 40001&gt;&#xA;   --worker http://localhost:&#xA;  &lt;change accordingly, i.e. 40001&gt;&#xA;    --model-path &#xA;   &lt;ckpt2&gt;&#xA;     ``` &#xA;   &lt;/ckpt2&gt;&#xA;  &lt;/change&gt;&#xA; &lt;/different&gt;&#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Launch a model worker (Multiple GPUs, when GPU VRAM &amp;lt;= 24GB)&lt;/summary&gt; &#xA; &lt;p&gt;If the VRAM of your GPU is less than 24GB (e.g., RTX 3090, RTX 4090, etc.), you may try running it with multiple GPUs. Our latest code base will automatically try to use multiple GPUs if you have more than one GPU. You can specify which GPUs to use with &lt;code&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt;. Below is an example of running with the first two GPUs.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;CUDA_VISIBLE_DEVICES=0,1 python -m llava.serve.model_worker --host 0.0.0.0 --controller http://localhost:20001 --port 40000 --worker http://localhost:40000 --model-path &amp;lt;huggingface or local path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;3. Launch tool workers&lt;/h4&gt; &#xA;&lt;p&gt;You need to open different tool works, as shown in the figure above, which means you need to prepare codes from other projects.&lt;/p&gt; &#xA;&lt;p&gt;We provide a detailed &lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/docs/llava-plus/tools.md&#34;&gt;guideline&lt;/a&gt; for different projects.&lt;/p&gt; &#xA;&lt;h4&gt;4. Launch a gradio web server.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;python -m llava.serve.gradio_web_server_llava_plus --controller http://localhost:20001 --model-list-mode reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You just launched the Gradio web interface. Now, you can open the web interface with the URL printed on the screen.&lt;/p&gt; &#xA;&lt;h2&gt;Train&lt;/h2&gt; &#xA;&lt;p&gt;LLaVA training consists of two stages: (1) feature alignment stage, and (2) visual instruction tuning stage.&lt;/p&gt; &#xA;&lt;p&gt;Our llava-plus is trained from the llava-stage-1-pre-trained projectors.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Training cost&lt;/summary&gt; LLaVA-Plus is trained on 4/8 A100 GPUs with 80GB memory. To train on fewer GPUs, you can reduce the `per_device_train_batch_size` and increase the `gradient_accumulation_steps` accordingly. Always keep the global batch size the same: `per_device_train_batch_size` x `gradient_accumulation_steps` x `num_gpus`. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Download Vicuna checkpoints (automatically)&lt;/summary&gt; &#xA; &lt;p&gt;Our base model Vicuna v1.5, which is an instruction-tuned chatbot, will be downloaded automatically when you run our provided training scripts. No action is needed.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Stage 1: Pretrain (feature alignment)&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/raw/main/docs/MODEL_ZOO.md#projector-weights&#34;&gt;pre-trained projector&lt;/a&gt; directly as we did.&lt;/p&gt; &#xA;&lt;p&gt;Or you may train the projector following the &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/tree/main#pretrain-feature-alignment&#34;&gt;guideline in LLaVA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stage 2: Tool Augmented Visual Instruction Tuning&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Prepare data&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Please download &lt;a href=&#34;https://huggingface.co/datasets/LLaVA-VL/llava-plus-data&#34;&gt;the training data&lt;/a&gt;, and download the images from constituting datasets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;COCO: &lt;a href=&#34;http://images.cocodataset.org/zips/train2017.zip&#34;&gt;train2017&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VisualGenome: &lt;a href=&#34;https://cs.stanford.edu/people/rak248/VG_100K_2/images.zip&#34;&gt;part1&lt;/a&gt;, &lt;a href=&#34;https://cs.stanford.edu/people/rak248/VG_100K_2/images2.zip&#34;&gt;part2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open-vision-language.github.io/infoseek/&#34;&gt;infoseek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google-research-datasets/hiertext&#34;&gt;hiertext&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start training!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Training script with DeepSpeed ZeRO-2: &lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/scripts/llava_plus/training_llava_plus_v0_7b.sh&#34;&gt;&lt;code&gt;training_llava_plus_v0_7b.sh&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/LLaVA-VL/LLaVA-Plus-Codebase/main/scripts/llava_plus/training_llava_plus_v1.3_7b.sh&#34;&gt;&lt;code&gt;training_llava_plus_v1.3_7b.sh&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;If you do not have enough GPU memory:&lt;/summary&gt; - Use LoRA. See LLaVA repo for more details. - Replace `zero2.json` with `zero3.json` or `zero3_offload.json`. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;If you are interested in finetuning LLaVA(LLaVA-Plus) model to your own task/data:&lt;/summary&gt; please check out [`Finetune_Custom_Data.md`](https://github.com/haotian-liu/LLaVA/blob/main/docs/Finetune_Custom_Data.md)„ÄÇ &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Some explainations of options:&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;--data_path path/to/llava-150k-tool-aug.json,path/to/llava-plus-v1-117k-tool-merge.json&lt;/code&gt;: You may pass multiple data files with &lt;code&gt;,&lt;/code&gt; separated.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--image_folder /path/to/coco/train2017/,/path/to/hiertext/train,/path/to/infoseek/infoseek_images,/path/to/instruct-pix2pix/clip-filtered-dataset,/path/to/goldg/vg_mdetr/images&lt;/code&gt;: You may pass multiple image folders with &lt;code&gt;,&lt;/code&gt; separated. Note that it may cause problems if multiple folders have images with the same name.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--mm_projector_type mlp2x_gelu&lt;/code&gt;: the two-layer MLP vision-language connector.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--vision_tower openai/clip-vit-large-patch14-336&lt;/code&gt;: CLIP ViT-L/14 336px.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--image_aspect_ratio pad&lt;/code&gt;: this pads the non-square images to square, instead of cropping them; it slightly reduces hallucination.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;--group_by_modality_length True&lt;/code&gt;: this should only be used when your instruction tuning dataset contains both language (e.g. ShareGPT) and multimodal (e.g. LLaVA-Instruct). It makes the training sampler only sample a single modality (either image or language) during training, which we observe to speed up training by ~25%, and does not affect the final outcome.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Evaluation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/haotian-liu/LLaVA/tree/main#evaluation&#34;&gt;LLaVA&#39;s Instruction&lt;/a&gt; on model evaluations.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find LLaVA useful for your research and applications, please cite using this BibTeX:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;&#xA;@article{liu2023llavaplus,&#xA;  title={LLaVA-Plus: Learning to Use Tools for Creating Multimodal Agents},&#xA;  author={Liu, Shilong and Cheng, Hao and Liu, Haotian and Zhang, Hao and Li, Feng and Ren, Tianhe and Zou, Xueyan and Yang, Jianwei and Su, Hang and Zhu, Jun and Zhang, Lei and Gao, Jianfeng and Li, Chunyuan},&#xA;  journal={arXiv:2311.05437},&#xA;  year={2023}&#xA;}&#xA;&#xA;@misc{liu2023llava,&#xA;      title={Visual Instruction Tuning}, &#xA;      author={Liu, Haotian and Li, Chunyuan and Wu, Qingyang and Lee, Yong Jae},&#xA;      publisher={arXiv:2304.08485},&#xA;      year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haotian-liu/LLaVA&#34;&gt;LLaVA&lt;/a&gt;, &lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;Vicuna&lt;/a&gt;: Thanks to their amazing codebase.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://llava-vl.github.io/&#34;&gt;LLaVA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Included Tools&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDEA-Research/GroundingDINO&#34;&gt;Grounding DINO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IDEA-Research/Grounded-Segment-Anything&#34;&gt;Grounded-Segment-Anything&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xinyu1205/recognize-anything&#34;&gt;Recognize Anythging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/segment-anything&#34;&gt;Segment-Anything&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UX-Decoder/Segment-Everything-Everywhere-All-At-Once&#34;&gt;SEEM: Segment Everything Everywhere All at Once&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UX-Decoder/Semantic-SAM&#34;&gt;Semantic-SAM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebookresearch/segment-anything&#34;&gt;Segment-Anything&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For future project ideas, please check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Instruction-Tuning-with-GPT-4/GPT-4-LLM&#34;&gt;Instruction Tuning with GPT-4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/LLaVA-Med&#34;&gt;LLaVA-Med: Training a Large Language-and-Vision Assistant for Biomedicine in One Day&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Luodian/Otter&#34;&gt;Otter: In-Context Multi-Modal Instruction Tuning&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cocktailpeanut/mirror</title>
    <updated>2023-11-14T01:38:15Z</updated>
    <id>tag:github.com,2023-11-14:/cocktailpeanut/mirror</id>
    <link href="https://github.com/cocktailpeanut/mirror" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mirror&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Hackable AI Powered Mirror on your laptop.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/mirror/main/bike.gif&#34; alt=&#34;bike.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mirror is a web app that constantly watches the realtime video feed from the webcam and responds with comments.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;100% Local and Private:&lt;/strong&gt; Try all kinds of ideas. Don&#39;t worry, everything happens on your laptop with NO Internet connection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FREE:&lt;/strong&gt; Since the AI model is running 100% on your machine, you can keep it running forever and experiment with different things.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hackable:&lt;/strong&gt; Simply by changing the prompt (or tweaking the code), you can easily repurpose Mirror to do different things.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;p&gt;Watch the video of Mirror in action:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7Mx1W12Tvpw&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/mirror/main/thumb.png&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When you launch the app, the browser will ask you for webcam permission.&lt;/li&gt; &#xA; &lt;li&gt;When you allow the webcam, it will start streaming the video to the AI (&lt;a href=&#34;https://huggingface.co/SkunkworksAI/BakLLaVA-1&#34;&gt;Bakllava&lt;/a&gt;, running on &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;The AI will analyze the image and stream the response, which the frontend prints in realtime.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;When you launch the web UI, it will immediately start streaming responses from the AI based on the prompt: &lt;strong&gt;&#34;Describe a person in the image&#34;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can edit this field&lt;/strong&gt; to let Mirror start streaming whatever you want&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/mirror/main/editing.gif&#34; alt=&#34;editing.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some example prompts you can try:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;What is this object I am holding?&lt;/li&gt; &#xA; &lt;li&gt;What is the person doing?&lt;/li&gt; &#xA; &lt;li&gt;Describe some notable events in the image.&lt;/li&gt; &#xA; &lt;li&gt;How many people are in this picture?&lt;/li&gt; &#xA; &lt;li&gt;Let me know if you see anything weird.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;[RECOMMENDED] 1 Click Install&lt;/h2&gt; &#xA;&lt;p&gt;Try the 1 click install using Pinokio: &lt;a href=&#34;https://pinokio.computer/item?uri=https://github.com/cocktailpeanut/mirror&#34;&gt;https://pinokio.computer/item?uri=https://github.com/cocktailpeanut/mirror&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure to use the latest version of Pinokio (0.1.49 and above)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/mirror/main/install.gif&#34; alt=&#34;install.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Mirror has a lot of moving parts, so if you don&#39;t use the 1 Click Installer, it may take a lot of work:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Orchestration of multiple backends (llama.cpp server and the gradio webui server)&lt;/li&gt; &#xA;  &lt;li&gt;Install pre-requisites, such as cmake, visual studio (windows), ffmpeg, etc.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you want to install manually, go to the following section.&lt;/p&gt; &#xA;&lt;h2&gt;Manual Install&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that everything mentioned in this entire section is essentially what the 1 Click Installer does, automatically, and works on Mac, Windows, and Linux. So if you get stuck trying to run Mirror manually, try the 1 click install.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/cocktailpeanut/mirror&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Clone llama.cpp&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ggerganov/llama.cpp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Download AI Model&lt;/h3&gt; &#xA;&lt;p&gt;Download the following bakllava model files to the &lt;code&gt;llama.cpp/models&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/mys/ggml_bakllava-1/resolve/main/ggml-model-q4_k.gguf&#34;&gt;https://huggingface.co/mys/ggml_bakllava-1/resolve/main/ggml-model-q4_k.gguf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/mys/ggml_bakllava-1/resolve/main/mmproj-model-f16.gguf&#34;&gt;https://huggingface.co/mys/ggml_bakllava-1/resolve/main/mmproj-model-f16.gguf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4. Build llama.cpp&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd llama.cpp&#xA;mkdir build&#xA;cd build&#xA;cmake ..&#xA;cmake --build . --config Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. Install requirements&lt;/h3&gt; &#xA;&lt;p&gt;Create a venv and install rerquirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python -m venv venv&#xA;source venv/bin/activate&#xA;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;6. Install prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Install FFMPEG: &lt;a href=&#34;https://ffmpeg.org/download.html&#34;&gt;https://ffmpeg.org/download.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;7. Launch the llama.cpp server&lt;/h3&gt; &#xA;&lt;p&gt;First start the llama.cpp server:&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd llama.cpp\build\bin&#xA;Release\server.exe -m ..\..\ggml-model-q4_k.gguf --mmproj ..\..\mmproj-model-f16.gguf -ngl 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mac &amp;amp; Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd llama.cpp\build\bin&#xA;./server -m ..\..\ggml-model-q4_k.gguf --mmproj ..\..\mmproj-model-f16.gguf -ngl 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;8. Launch the web UI&lt;/h4&gt; &#xA;&lt;p&gt;First activate the environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;source venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the app.py file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;python app.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The backend code was inspired and adopted from &lt;a href=&#34;https://github.com/Fuzzy-Search/realtime-bakllava&#34;&gt;Realtime Bakllava&lt;/a&gt;, which uses...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;Llama.cpp&lt;/a&gt; for the LLM Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://huggingface.co/SkunkworksAI/BakLLaVA-1&#34;&gt;Bakllava&lt;/a&gt; for the Multimodal AI model.&lt;/li&gt; &#xA; &lt;li&gt;The Web UI was built with &lt;a href=&#34;https://www.gradio.app/&#34;&gt;gradio&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>