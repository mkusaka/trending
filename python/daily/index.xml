<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-19T01:34:50Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maxdorninger/MediaManager</title>
    <updated>2025-07-19T01:34:50Z</updated>
    <id>tag:github.com,2025-07-19:/maxdorninger/MediaManager</id>
    <link href="https://github.com/maxdorninger/MediaManager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern selfhosted media management system for your media library&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://maxdorninger.github.io/MediaManager&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/maxdorninger/MediaManager/refs/heads/master/Writerside/images/logo.svg?sanitize=true&#34; alt=&#34;Logo&#34; width=&#34;260&#34; height=&#34;260&#34;&gt; &lt;/a&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt;MediaManager&lt;/h3&gt; &#xA; &lt;p align=&#34;center&#34;&gt; Modern management system for your media library &lt;br&gt; &lt;a href=&#34;https://maxdorninger.github.io/MediaManager/introduction.html&#34;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/maxdorninger/MediaManager/issues/new?labels=bug&amp;amp;template=bug_report.md&#34;&gt;Report Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/maxdorninger/MediaManager/issues/new?template=feature_request.md&#34;&gt;Request Feature&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;MediaManager is modern software to manage your TV and movie library. It is designed to be a replacement for Sonarr, Radarr, Overseer, and Jellyseer. It supports TVDB and TMDB for metadata, supports OIDC and OAuth 2.0 for authentication and supports Prowlarr and Jackett. MediaManager is built first and foremost for deployment with Docker, making it easy to set up.&lt;/p&gt; &#xA;&lt;p&gt;It also provides an API to interact with the software programmatically, allowing for automation and integration with other services.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -O docker-compose.yaml https://raw.githubusercontent.com/maxdorninger/MediaManager/refs/heads/master/docker-compose.yaml   &#xA;mkdir config&#xA;wget -O ./config/config.toml https://raw.githubusercontent.com/maxdorninger/MediaManager/refs/heads/master/config.example.toml   &#xA;# you probably need to edit the config.toml file in the ./config directory, for more help see the documentation&#xA;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://maxdorninger.github.io/MediaManager/configuration-overview.html#configuration-overview&#34;&gt;View the docs for installation instructions and more&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Support MediaManager&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/maxdorninger&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Sponsor-Maximilian%20Dorninger-orange&#34; alt=&#34;Sponsor @maxdorninger&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://buymeacoffee.com/maxdorninger&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Check out the awesome sponsors of MediaManager ❤️&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fosstodon.org/@aljazmerzen&#34;&gt;&lt;img src=&#34;https://github.com/aljazerzen.png&#34; width=&#34;80px&#34; alt=&#34;Aljaž Mur Eržen&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/ldrrp&#34;&gt;&lt;img src=&#34;https://github.com/ldrrp.png&#34; width=&#34;80px&#34; alt=&#34;Luis Rodriguez&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.star-history.com/#maxdorninger/MediaManager&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=maxdorninger/MediaManager&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; support for more torrent indexers&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; fully automatic downloads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add more logs/errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make API return proper error codes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; optimize images for web in the backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; responsive ui&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; automatically update metadata of shows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; automatically download new seasons/episodes of shows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add fallback to just copy files if hardlinks don&#39;t work&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add check at startup if hardlinks work&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; create separate metadata relay service, so that api keys for TMDB and TVDB are not strictly needed&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; support for movies&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; expand README with more information and a quickstart guide&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; improve reliability of scheduled tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add notification system&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add sequence diagrams to the documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add usenet support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; provide example configuration files&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; make media sorting algorithm configurable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add support for transmission&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; add support for configuration via toml/yaml config file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add in-depth documentation on the architecture of the codebase&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; make indexer module multithreaded&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; add delete button for movies/TV shows&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; rework prowlarr module (select which indexers to use, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;em&gt;maybe&lt;/em&gt; rework the logo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;hhttps://maxdorninger.github.io/MediaManager/issues&#34;&gt;open issues&lt;/a&gt; for a full list of proposed features (and known issues).&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/49fc18aa-b471-4be8-983e-c0ab240dfb73&#34; alt=&#34;Screenshot 2025-07-02 174732&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/3a38953d-d0fa-4a7e-83d0-dd6e6427681c&#34; alt=&#34;Screenshot 2025-07-02 174342&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/c3af4be8-b873-448c-8a4d-0d5db863aec7&#34; alt=&#34;Screenshot 2025-07-02 174616&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/0d50f53b-64da-4243-8408-1d6fc85fe81b&#34; alt=&#34;Screenshot 2025-07-02 174416&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/193e1afd-dabb-42a2-ab28-59f2784371c7&#34; alt=&#34;Screenshot 2025-06-28 222908&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developer Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;For the developer guide see the &lt;a href=&#34;https://maxdorninger.github.io/MediaManager/developer-guide.html&#34;&gt;Developer Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the AGPL 3.0. See &lt;code&gt;LICENSE.txt&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGMENTS --&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unsplash.com/@pawel_czerwinski&#34;&gt;Thanks to Pawel Czerwinski for the image on the login screen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aliasrobotics/cai</title>
    <updated>2025-07-19T01:34:50Z</updated>
    <id>tag:github.com,2025-07-19:/aliasrobotics/cai</id>
    <link href="https://github.com/aliasrobotics/cai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cybersecurity AI (CAI), an open Bug Bounty-ready Artificial Intelligence&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cybersecurity AI (&lt;code&gt;CAI&lt;/code&gt;)&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a align=&#34;center&#34; href=&#34;&#34; target=&#34;https://github.com/aliasrobotics/CAI&#34;&gt; &lt;img width=&#34;100%&#34; src=&#34;https://github.com/aliasrobotics/cai/raw/main/media/cai.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;h2&gt;🎯 Milestones&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://app.hackthebox.com/users/2268644&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_ranking-top_90_Spain_(5_days)-red.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.hackthebox.com/users/2268644&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_ranking-top_50_Spain_(6_days)-red.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.hackthebox.com/users/2268644&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_ranking-top_30_Spain_(7_days)-red.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.hackthebox.com/users/2268644&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_ranking-top_500_World_(7_days)-red.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ctf.hackthebox.com/event/2000/scoreboard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_%22Human_vs_AI%22_CTF-top_1_(AIs)_world-red.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ctf.hackthebox.com/event/2000/scoreboard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_%22Human_vs_AI%22_CTF-top_1_Spain-red.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ctf.hackthebox.com/event/2000/scoreboard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_%22Human_vs_AI%22_CTF-top_20_World-red.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ctf.hackthebox.com/event/2000/scoreboard&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/HTB_%22Human_vs_AI%22_CTF-750_$-yellow.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lu.ma/roboticshack?tk=RuryKF&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Mistral_AI_Robotics_Hackathon-2500_$-yellow.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aliasrobotics/cai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Bug_rewards-250_$-yellow.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;📦 Package Attributes&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/cai-framework&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/cai-framework.svg?sanitize=true&#34; alt=&#34;version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypistats.org/packages/cai-framework&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/cai-framework&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aliasrobotics/cai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Linux-Supported-brightgreen?logo=linux&amp;amp;logoColor=white&#34; alt=&#34;Linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aliasrobotics/cai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OS%20X-Supported-brightgreen?logo=apple&amp;amp;logoColor=white&#34; alt=&#34;OS X&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aliasrobotics/cai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Windows-Supported-brightgreen?logo=windows&amp;amp;logoColor=white&#34; alt=&#34;Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aliasrobotics/cai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Android-Supported-brightgreen?logo=android&amp;amp;logoColor=white&#34; alt=&#34;Android&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/fnUFcTaQAC&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-7289DA?logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/pdf/2504.06017&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-2504.06017-b31b1b.svg?sanitize=true&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2506.23592&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/arXiv-2506.23592-b31b1b.svg?sanitize=true&#34; alt=&#34;arXiv&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;A lightweight, ergonomic framework for building bug bounty-ready Cybersecurity AIs (CAIs).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CAI with &lt;code&gt;alias0&lt;/code&gt; on ROS message injection attacks in MiR-100 robot&lt;/th&gt; &#xA;   &lt;th&gt;CAI with &lt;code&gt;alias0&lt;/code&gt; on API vulnerability discovery at Mercado Libre&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://asciinema.org/a/dNv705hZel2Rzrw0cju9HBGPh&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/dNv705hZel2Rzrw0cju9HBGPh.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://asciinema.org/a/9Hc9z1uFcdNjqP3bY5y7wO1Ww&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/9Hc9z1uFcdNjqP3bY5y7wO1Ww.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CAI on JWT@PortSwigger CTF — Cybersecurity AI&lt;/th&gt; &#xA;   &lt;th&gt;CAI on HackableII Boot2Root CTF — Cybersecurity AI&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://asciinema.org/a/713487&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/713487.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://asciinema.org/a/713485&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/713485.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] We encourage you to read CAI&#39;s the technical report at &lt;a href=&#34;https://arxiv.org/pdf/2504.06017&#34;&gt;https://arxiv.org/pdf/2504.06017&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] &lt;span&gt;⚠&lt;/span&gt; CAI is in active development, so don&#39;t expect it to work flawlessly. Instead, contribute by raising an issue or &lt;a href=&#34;https://github.com/aliasrobotics/cai/pulls&#34;&gt;sending a PR&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Access to this library and the use of information, materials (or portions thereof), is &lt;strong&gt;&lt;u&gt;not intended&lt;/u&gt;, and is &lt;u&gt;prohibited&lt;/u&gt;, where such access or use violates applicable laws or regulations&lt;/strong&gt;. By no means the authors encourage or promote the unauthorized tampering with running systems. This can cause serious human harm and material damages.&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;By no means the authors of CAI encourage or promote the unauthorized tampering with compute systems. Please don&#39;t use the source code in here for cybercrime. &lt;u&gt;Pentest for good instead&lt;/u&gt;&lt;/em&gt;. By downloading, using, or modifying this source code, you agree to the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; and the limitations outlined in the &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/DISCLAIMER&#34;&gt;&lt;code&gt;DISCLAIMER&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔖&lt;/span&gt; Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#cybersecurity-ai-cai&#34;&gt;Cybersecurity AI (&lt;code&gt;CAI&lt;/code&gt;)&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-milestones&#34;&gt;🎯 Milestones&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-package-attributes&#34;&gt;📦 Package Attributes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#bookmark-table-of-contents&#34;&gt;&lt;span&gt;🔖&lt;/span&gt; Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#motivation&#34;&gt;Motivation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#bust_in_silhouette-why-cai&#34;&gt;&lt;span&gt;👤&lt;/span&gt; Why CAI?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#ethical-principles-behind-cai&#34;&gt;Ethical principles behind CAI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#closed-source-alternatives&#34;&gt;Closed-source alternatives&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#learn---cai-fluency&#34;&gt;Learn - &lt;code&gt;CAI&lt;/code&gt; Fluency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#nut_and_bolt-install&#34;&gt;&lt;span&gt;🔩&lt;/span&gt; Install&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#os-x&#34;&gt;OS X&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#ubuntu-2404&#34;&gt;Ubuntu 24.04&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#ubuntu-2004&#34;&gt;Ubuntu 20.04&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#windows-wsl&#34;&gt;Windows WSL&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#nut_and_bolt-setup-env-file&#34;&gt;&lt;span&gt;🔩&lt;/span&gt; Setup &lt;code&gt;.env&lt;/code&gt; file&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-custom-openai-base-url-support&#34;&gt;🔹 Custom OpenAI Base URL Support&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#triangular_ruler-architecture&#34;&gt;&lt;span&gt;📐&lt;/span&gt; Architecture:&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-agent&#34;&gt;🔹 Agent&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-tools&#34;&gt;🔹 Tools&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-handoffs&#34;&gt;🔹 Handoffs&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-patterns&#34;&gt;🔹 Patterns&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-turns-and-interactions&#34;&gt;🔹 Turns and Interactions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-tracing&#34;&gt;🔹 Tracing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#-human-in-the-loop-hitl&#34;&gt;🔹 Human-In-The-Loop (HITL)&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#rocket-quickstart&#34;&gt;&lt;span&gt;🚀&lt;/span&gt; Quickstart&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#openrouter-integration&#34;&gt;OpenRouter Integration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#mcp&#34;&gt;MCP&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#development&#34;&gt;Development&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#contributions&#34;&gt;Contributions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#optional-requirements-caiextensions&#34;&gt;Optional Requirements: caiextensions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#information_source-usage-data-collection&#34;&gt;&lt;span&gt;ℹ&lt;/span&gt; Usage Data Collection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#reproduce-ci-setup-locally&#34;&gt;Reproduce CI-Setup locally&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#citation&#34;&gt;Citation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;span&gt;👤&lt;/span&gt; Why CAI?&lt;/h3&gt; &#xA;&lt;p&gt;The cybersecurity landscape is undergoing a dramatic transformation as AI becomes increasingly integrated into security operations. &lt;strong&gt;We predict that by 2028, AI-powered security testing tools will outnumber human pentesters&lt;/strong&gt;. This shift represents a fundamental change in how we approach cybersecurity challenges. &lt;em&gt;AI is not just another tool - it&#39;s becoming essential for addressing complex security vulnerabilities and staying ahead of sophisticated threats. As organizations face more advanced cyber attacks, AI-enhanced security testing will be crucial for maintaining robust defenses.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This work builds upon prior efforts[^4] and similarly, we believe that democratizing access to advanced cybersecurity AI tools is vital for the entire security community. That&#39;s why we&#39;re releasing Cybersecurity AI (&lt;code&gt;CAI&lt;/code&gt;) as an open source framework. Our goal is to empower security researchers, ethical hackers, and organizations to build and deploy powerful AI-driven security tools. By making these capabilities openly available, we aim to level the playing field and ensure that cutting-edge security AI technology isn&#39;t limited to well-funded private companies or state actors.&lt;/p&gt; &#xA;&lt;p&gt;Bug Bounty programs have become a cornerstone of modern cybersecurity, providing a crucial mechanism for organizations to identify and fix vulnerabilities in their systems before they can be exploited. These programs have proven highly effective at securing both public and private infrastructure, with researchers discovering critical vulnerabilities that might have otherwise gone unnoticed. CAI is specifically designed to enhance these efforts by providing a lightweight, ergonomic framework for building specialized AI agents that can assist in various aspects of Bug Bounty hunting - from initial reconnaissance to vulnerability validation and reporting. Our framework aims to augment human expertise with AI capabilities, helping researchers work more efficiently and thoroughly in their quest to make digital systems more secure.&lt;/p&gt; &#xA;&lt;h3&gt;Ethical principles behind CAI&lt;/h3&gt; &#xA;&lt;p&gt;You might be wondering if releasing CAI &lt;em&gt;in-the-wild&lt;/em&gt; given its capabilities and security implications is ethical. Our decision to open-source this framework is guided by two core ethical principles:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Democratizing Cybersecurity AI&lt;/strong&gt;: We believe that advanced cybersecurity AI tools should be accessible to the entire security community, not just well-funded private companies or state actors. By releasing CAI as an open source framework, we aim to empower security researchers, ethical hackers, and organizations to build and deploy powerful AI-driven security tools, leveling the playing field in cybersecurity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Transparency in AI Security Capabilities&lt;/strong&gt;: Based on our research results, understanding of the technology, and dissection of top technical reports, we argue that current LLM vendors are undermining their cybersecurity capabilities. This is extremely dangerous and misleading. By developing CAI openly, we provide a transparent benchmark of what AI systems can actually do in cybersecurity contexts, enabling more informed decisions about security postures.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;CAI is built on the following core principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cybersecurity oriented AI framework&lt;/strong&gt;: CAI is specifically designed for cybersecurity use cases, aiming at semi- and fully-automating offensive and defensive security tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Open source, free for research&lt;/strong&gt;: CAI is open source and free for research purposes. We aim at democratizing access to AI and Cybersecurity. For professional or commercial use, including on-premise deployments, dedicated technical support and custom extensions &lt;a href=&#34;mailto:research@aliasrobotics.com&#34;&gt;reach out&lt;/a&gt; to obtain a license.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: CAI is designed to be fast, and easy to use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modular and agent-centric design&lt;/strong&gt;: CAI operates on the basis of agents and agentic patterns, which allows flexibility and scalability. You can easily add the most suitable agents and pattern for your cybersecuritytarget case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tool-integration&lt;/strong&gt;: CAI integrates already built-in tools, and allows the user to integrate their own tools with their own logic easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Logging and tracing integrated&lt;/strong&gt;: using &lt;a href=&#34;https://github.com/Arize-ai/phoenix&#34;&gt;&lt;code&gt;phoenix&lt;/code&gt;&lt;/a&gt;, the open source tracing and logging tool for LLMs. This provides the user with a detailed traceability of the agents and their execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Model Support&lt;/strong&gt;: more than 300 supported and empowered by &lt;a href=&#34;https://github.com/BerriAI/litellm&#34;&gt;LiteLLM&lt;/a&gt;. The most popular providers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Anthropic&lt;/strong&gt;: &lt;code&gt;Claude 3.7&lt;/code&gt;, &lt;code&gt;Claude 3.5&lt;/code&gt;, &lt;code&gt;Claude 3&lt;/code&gt;, &lt;code&gt;Claude 3 Opus&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;: &lt;code&gt;O1&lt;/code&gt;, &lt;code&gt;O1 Mini&lt;/code&gt;, &lt;code&gt;O3 Mini&lt;/code&gt;, &lt;code&gt;GPT-4o&lt;/code&gt;, &lt;code&gt;GPT-4.5 Preview&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;DeepSeek&lt;/strong&gt;: &lt;code&gt;DeepSeek V3&lt;/code&gt;, &lt;code&gt;DeepSeek R1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Ollama&lt;/strong&gt;: &lt;code&gt;Qwen2.5 72B&lt;/code&gt;, &lt;code&gt;Qwen2.5 14B&lt;/code&gt;, etc&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Closed-source alternatives&lt;/h3&gt; &#xA;&lt;p&gt;Cybersecurity AI is a critical field, yet many groups are misguidedly pursuing it through closed-source methods for pure economic return, leveraging similar techniques and building upon existing closed-source (&lt;em&gt;often third-party owned&lt;/em&gt;) models. This approach not only squanders valuable engineering resources but also represents an economic waste and results in redundant efforts, as they often end up reinventing the wheel. Here are some of the closed-source initiatives we keep track of and attempting to leverage genAI and agentic frameworks in cybersecurity AI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.acyber.co/&#34;&gt;Autonomous Cyber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cracken.ai/&#34;&gt;CrackenAGI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ethiack.com/&#34;&gt;ETHIACK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://horizon3.ai/&#34;&gt;Horizon3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lakera.ai&#34;&gt;Lakera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/www.mindfort.ai&#34;&gt;Mindfort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mindgard.ai/&#34;&gt;Mindgard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ndaysecurity.com/&#34;&gt;NDAY Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.runsybil.com&#34;&gt;Runsybil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.selfhack.fi&#34;&gt;Selfhack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://squr.ai/&#34;&gt;SQUR&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://staris.tech/&#34;&gt;Staris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.sxipher.com/&#34;&gt;Sxipher&lt;/a&gt; (seems discontinued)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.terra.security&#34;&gt;Terra Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xint.io/&#34;&gt;Xint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.xbow.com&#34;&gt;XBOW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zeropath.com&#34;&gt;ZeroPath&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zynap.com&#34;&gt;Zynap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://7ai.com&#34;&gt;7ai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learn - &lt;code&gt;CAI&lt;/code&gt; Fluency&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;English&lt;/th&gt; &#xA;   &lt;th&gt;Spanish&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Episode 0: What is CAI?&lt;/td&gt; &#xA;   &lt;td&gt;Cybersecurity AI (&lt;code&gt;CAI&lt;/code&gt;) explained&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=nBdTxbKM4oo&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/nBdTxbKM4oo/0.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FaUL9HXrQ5k&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/FaUL9HXrQ5k/0.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Episode 1: The &lt;code&gt;CAI&lt;/code&gt; Framework. Vision &amp;amp; Ethics&lt;/td&gt; &#xA;   &lt;td&gt;Explore the core motivation behind CAI and delve into the crucial ethical principles guiding its development. Understand the motivation behind CAI and how you can actively contribute to the future of cybersecurity and the CAI framework.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;p align=&#34;center&#34;&gt;🚧&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;p align=&#34;center&#34;&gt;🚧&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Episode 2: Foundational Concepts - LLM Agents&lt;/td&gt; &#xA;   &lt;td&gt;Bridge the gap between foundational LLMs and intelligent agents, exploring how to synergize reasoning and acting for truly dynamic interactions. Learn about AI systems that don&#39;t just generate text, but actively interact within their environment.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;p align=&#34;center&#34;&gt;🚧&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;p align=&#34;center&#34;&gt;🚧&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Episode 3: Vibe-Hacking Tutorial &#34;My first Hack&#34;&lt;/td&gt; &#xA;   &lt;td&gt;A Vibe-Hacking guide for newbies. We demonstrate a simple web security hack using a default agent and show how to leverage tools and interpret CIA output with the help of the CAI Python API. You&#39;ll also learn to compare different LLM models to find the best fit for your hacking endeavors.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;p align=&#34;center&#34;&gt;🚧&lt;/p&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;p align=&#34;center&#34;&gt;🚧&lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Annex 1: &lt;code&gt;CAI&lt;/code&gt; 0.5.x release&lt;/td&gt; &#xA;   &lt;td&gt;Introduce version 0.5 of &lt;code&gt;CAI&lt;/code&gt; including new multi-agent functionality, new commands such as &lt;code&gt;/history&lt;/code&gt;, &lt;code&gt;/compact&lt;/code&gt;, &lt;code&gt;/graph&lt;/code&gt; or &lt;code&gt;/memory&lt;/code&gt; and a case study showing how &lt;code&gt;CAI&lt;/code&gt; found a critical security flaw in OT heap pumps spread around the world.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OPFH0ANUMMw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/OPFH0ANUMMw/0.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Q8AI4E4gH8k&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/Q8AI4E4gH8k/0.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Annex 2: &lt;code&gt;CAI&lt;/code&gt; 0.4.x release and &lt;code&gt;alias0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Introducing version 0.4 of &lt;code&gt;CAI&lt;/code&gt; with &lt;em&gt;streaming&lt;/em&gt; and improved MCP support. We also introduce &lt;code&gt;alias0&lt;/code&gt;, the Privacy-First Cybersecurity AI, a Model-of-Models Intelligence that implements a Privacy-by-Design architecture and obtains state-of-the-art results in cybersecurity benchmarks.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NZjzfnvAZcc&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/NZjzfnvAZcc/0.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Annex 3: Cybersecurity AI Community Meeting #1&lt;/td&gt; &#xA;   &lt;td&gt;First Cybersecurity AI (&lt;code&gt;CAI&lt;/code&gt;) community meeting, over 40 participants from academia, industry, and defense gathered to discuss the open-source scaffolding behind CAI — a project designed to build agentic AI systems for cybersecurity that are open, modular, and Bug Bounty-ready.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4JqaTiVlgsw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/4JqaTiVlgsw/0.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔩&lt;/span&gt; Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install cai-framework&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Always create a new virtual environment to ensure proper dependency installation when updating CAI.&lt;/p&gt; &#xA;&lt;p&gt;The following subsections provide a more detailed walkthrough on selected popular Operating Systems. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#development&#34;&gt;Development&lt;/a&gt; section for developer-related install instructions.&lt;/p&gt; &#xA;&lt;h3&gt;OS X&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update &amp;amp;&amp;amp; \&#xA;    brew install git python@3.12&#xA;&#xA;# Create virtual environment&#xA;python3.12 -m venv cai_env&#xA;&#xA;# Install the package from the local directory&#xA;source cai_env/bin/activate &amp;amp;&amp;amp; pip install cai-framework&#xA;&#xA;# Generate a .env file and set up with defaults&#xA;echo -e &#39;OPENAI_API_KEY=&#34;sk-1234&#34;\nANTHROPIC_API_KEY=&#34;&#34;\nOLLAMA=&#34;&#34;\nPROMPT_TOOLKIT_NO_CPR=1\nCAI_STREAM=false&#39; &amp;gt; .env&#xA;&#xA;# Launch CAI&#xA;cai  # first launch it can take up to 30 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ubuntu 24.04&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; \&#xA;    sudo apt-get install -y git python3-pip python3.12-venv&#xA;&#xA;# Create the virtual environment&#xA;python3.12 -m venv cai_env&#xA;&#xA;# Install the package from the local directory&#xA;source cai_env/bin/activate &amp;amp;&amp;amp; pip install cai-framework&#xA;&#xA;# Generate a .env file and set up with defaults&#xA;echo -e &#39;OPENAI_API_KEY=&#34;sk-1234&#34;\nANTHROPIC_API_KEY=&#34;&#34;\nOLLAMA=&#34;&#34;\nPROMPT_TOOLKIT_NO_CPR=1\nCAI_STREAM=false&#39; &amp;gt; .env&#xA;&#xA;# Launch CAI&#xA;cai  # first launch it can take up to 30 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ubuntu 20.04&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; \&#xA;    sudo apt-get install -y software-properties-common&#xA;&#xA;# Fetch Python 3.12&#xA;sudo add-apt-repository ppa:deadsnakes/ppa &amp;amp;&amp;amp; sudo apt update&#xA;sudo apt install python3.12 python3.12-venv python3.12-dev -y&#xA;&#xA;# Create the virtual environment&#xA;python3.12 -m venv cai_env&#xA;&#xA;# Install the package from the local directory&#xA;source cai_env/bin/activate &amp;amp;&amp;amp; pip install cai-framework&#xA;&#xA;# Generate a .env file and set up with defaults&#xA;echo -e &#39;OPENAI_API_KEY=&#34;sk-1234&#34;\nANTHROPIC_API_KEY=&#34;&#34;\nOLLAMA=&#34;&#34;\nPROMPT_TOOLKIT_NO_CPR=1\nCAI_STREAM=false&#39; &amp;gt; .env&#xA;&#xA;# Launch CAI&#xA;cai  # first launch it can take up to 30 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows WSL&lt;/h3&gt; &#xA;&lt;p&gt;Go to the Microsoft page: &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/install&#34;&gt;https://learn.microsoft.com/en-us/windows/wsl/install&lt;/a&gt;. Here you will find all the instructions to install WSL&lt;/p&gt; &#xA;&lt;p&gt;From Powershell write: wsl --install&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;sudo apt-get update &amp;amp;&amp;amp; \&#xA;    sudo apt-get install -y git python3-pip python3-venv&#xA;&#xA;# Create the virtual environment&#xA;python3 -m venv cai_env&#xA;&#xA;# Install the package from the local directory&#xA;source cai_env/bin/activate &amp;amp;&amp;amp; pip install cai-framework&#xA;&#xA;# Generate a .env file and set up with defaults&#xA;echo -e &#39;OPENAI_API_KEY=&#34;sk-1234&#34;\nANTHROPIC_API_KEY=&#34;&#34;\nOLLAMA=&#34;&#34;\nPROMPT_TOOLKIT_NO_CPR=1\nCAI_STREAM=false&#39; &amp;gt; .env&#xA;&#xA;# Launch CAI&#xA;cai  # first launch it can take up to 30 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;p&gt;We recommend having at least 8 GB of RAM:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First of all, install userland &lt;a href=&#34;https://play.google.com/store/apps/details?id=tech.ula&amp;amp;hl=es&#34;&gt;https://play.google.com/store/apps/details?id=tech.ula&amp;amp;hl=es&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install Kali minimal in basic options (for free). [Or any other kali option if preferred]&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update apt keys like in this example: &lt;a href=&#34;https://superuser.com/questions/1644520/apt-get-update-issue-in-kali&#34;&gt;https://superuser.com/questions/1644520/apt-get-update-issue-in-kali&lt;/a&gt;, inside UserLand&#39;s Kali terminal execute&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Get new apt keys&#xA;wget http://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2024.1_all.deb&#xA;&#xA;# Install new apt keys&#xA;sudo dpkg -i kali-archive-keyring_2024.1_all.deb &amp;amp;&amp;amp; rm kali-archive-keyring_2024.1_all.deb&#xA;&#xA;# Update APT repository&#xA;sudo apt-get update&#xA;&#xA;# CAI requieres python 3.12, lets install it (CAI for kali in Android)&#xA;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y git python3-pip build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev pkg-config&#xA;wget https://www.python.org/ftp/python/3.12.4/Python-3.12.4.tar.xz&#xA;tar xf Python-3.12.4.tar.xz&#xA;cd ./configure --enable-optimizations&#xA;sudo make altinstall # This command takes long to execute&#xA;&#xA;# Clone CAI&#39;s source code&#xA;git clone https://github.com/aliasrobotics/cai &amp;amp;&amp;amp; cd cai&#xA;&#xA;# Create virtual environment&#xA;python3.12 -m venv cai_env&#xA;&#xA;# Install the package from the local directory&#xA;source cai_env/bin/activate &amp;amp;&amp;amp; pip3 install -e .&#xA;&#xA;# Generate a .env file and set up&#xA;cp .env.example .env  # edit here your keys/models&#xA;&#xA;# Launch CAI&#xA;cai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;span&gt;🔩&lt;/span&gt; Setup &lt;code&gt;.env&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;p&gt;CAI leverages the &lt;code&gt;.env&lt;/code&gt; file to load configuration at launch. To facilitate the setup, the repo provides an exemplary &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/.env.example&#34;&gt;&lt;code&gt;.env.example&lt;/code&gt;&lt;/a&gt; file provides a template for configuring CAI&#39;s setup and your LLM API keys to work with desired LLM models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Important:&lt;/p&gt; &#xA;&lt;p&gt;CAI does NOT provide API keys for any model by default. Don&#39;t ask us to provide keys, use your own or host your own models.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Note:&lt;/p&gt; &#xA;&lt;p&gt;The OPENAI_API_KEY must not be left blank. It should contain either &#34;sk-123&#34; (as a placeholder) or your actual API key. See &lt;a href=&#34;https://github.com/aliasrobotics/cai/issues/27&#34;&gt;https://github.com/aliasrobotics/cai/issues/27&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Note:&lt;/p&gt; &#xA;&lt;p&gt;If you are using alias0 model, make sure that CAI is &amp;gt;0.4.0 version and here you have an .env example to be able to use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=&#34;sk-1234&#34;&#xA;OLLAMA=&#34;&#34;&#xA;ALIAS_API_KEY=&#34;&amp;lt;sk-your-key&amp;gt;&#34;  # note, add yours&#xA;CAI_STEAM=False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔹 Custom OpenAI Base URL Support&lt;/h3&gt; &#xA;&lt;p&gt;CAI supports configuring a custom OpenAI API base URL via the &lt;code&gt;OPENAI_BASE_URL&lt;/code&gt; environment variable. This allows users to redirect API calls to a custom endpoint, such as a proxy or self-hosted OpenAI-compatible service.&lt;/p&gt; &#xA;&lt;p&gt;Example &lt;code&gt;.env&lt;/code&gt; entry configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OLLAMA_API_BASE=&#34;https://custom-openai-proxy.com/v1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or directly from the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OLLAMA_API_BASE=&#34;https://custom-openai-proxy.com/v1&#34; cai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;📐&lt;/span&gt; Architecture:&lt;/h2&gt; &#xA;&lt;p&gt;CAI focuses on making cybersecurity agent &lt;strong&gt;coordination&lt;/strong&gt; and &lt;strong&gt;execution&lt;/strong&gt; lightweight, highly controllable, and useful for humans. To do so it builds upon 7 pillars: &lt;code&gt;Agent&lt;/code&gt;s, &lt;code&gt;Tools&lt;/code&gt;, &lt;code&gt;Handoffs&lt;/code&gt;, &lt;code&gt;Patterns&lt;/code&gt;, &lt;code&gt;Turns&lt;/code&gt;, &lt;code&gt;Tracing&lt;/code&gt; and &lt;code&gt;HITL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                  ┌───────────────┐           ┌───────────┐&#xA;                  │      HITL     │◀─────────▶│   Turns   │&#xA;                  └───────┬───────┘           └───────────┘&#xA;                          │&#xA;                          ▼&#xA;┌───────────┐       ┌───────────┐       ┌───────────┐      ┌───────────┐&#xA;│  Patterns │◀─────▶│  Handoffs │◀────▶ │   Agents  │◀────▶│    LLMs   │&#xA;└───────────┘       └─────┬─────┘       └───────────┘      └───────────┘&#xA;                          │                   │&#xA;                          │                   ▼&#xA;┌────────────┐       ┌────┴──────┐       ┌───────────┐&#xA;│ Extensions │◀─────▶│  Tracing  │       │   Tools   │&#xA;└────────────┘       └───────────┘       └───────────┘&#xA;                                              │&#xA;                          ┌─────────────┬─────┴────┬─────────────┐&#xA;                          ▼             ▼          ▼             ▼&#xA;                    ┌───────────┐┌───────────┐┌────────────┐┌───────────┐&#xA;                    │ LinuxCmd  ││ WebSearch ││    Code    ││ SSHTunnel │&#xA;                    └───────────┘└───────────┘└────────────┘└───────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to dive deeper into the code, check the following files as a start point for using CAI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cai&#xA;├── __init__.py&#xA;│&#xA;├── cli.py                        # entrypoint for CLI&#xA;├── core.py                     # core implementation and agentic flow&#xA;├── types.py                   # main abstractions and classes&#xA;├── util.py                      # utility functions&#xA;│&#xA;├── repl                          # CLI aesthetics and commands&#xA;│   ├── commands&#xA;│   └── ui&#xA;├── agents                      # agent implementations&#xA;│   ├── one_tool.py      # agent, one agent per file&#xA;│   └── patterns            # agentic patterns, one per file&#xA;│&#xA;├── tools                        # agent tools&#xA;│   ├── common.py&#xA;&#xA;caiextensions                      # out of tree Python extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔹 Agent&lt;/h3&gt; &#xA;&lt;p&gt;At its core, CAI abstracts its cybersecurity behavior via &lt;code&gt;Agents&lt;/code&gt; and agentic &lt;code&gt;Patterns&lt;/code&gt;. An Agent in &lt;em&gt;an intelligent system that interacts with some environment&lt;/em&gt;. More technically, within CAI we embrace a robotics-centric definition wherein an agent is anything that can be viewed as a system perceiving its environment through sensors, reasoning about its goals and and acting accordingly upon that environment through actuators (&lt;em&gt;adapted&lt;/em&gt; from Russel &amp;amp; Norvig, AI: A Modern Approach). In cybersecurity, an &lt;code&gt;Agent&lt;/code&gt; interacts with systems and networks, using peripherals and network interfaces as sensors, reasons accordingly and then executes network actions as if actuators. Correspondingly, in CAI, &lt;code&gt;Agent&lt;/code&gt;s implement the &lt;code&gt;ReACT&lt;/code&gt; (Reasoning and Action) agent model[^3].&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cai.sdk.agents import Agent&#xA;from cai.core import CAI&#xA;ctf_agent = Agent(&#xA;    name=&#34;CTF Agent&#34;,&#xA;    instructions=&#34;&#34;&#34;You are a Cybersecurity expert Leader&#34;&#34;&#34;,&#xA;    model= &#34;gpt-4o&#34;,&#xA;)&#xA;&#xA;messages = [{&#xA;    &#34;role&#34;: &#34;user&#34;,&#xA;    &#34;content&#34;: &#34;CTF challenge: TryMyNetwork. Target IP: 192.168.1.1&#34;&#xA;   }]&#xA;&#xA;client = CAI()&#xA;response = client.run(agent=ctf_agent,&#xA;                      messages=messages)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔹 Tools&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Tools&lt;/code&gt; let cybersecurity agents take actions by providing interfaces to execute system commands, run security scans, analyze vulnerabilities, and interact with target systems and APIs - they are the core capabilities that enable CAI agents to perform security tasks effectively; in CAI, tools include built-in cybersecurity utilities (like LinuxCmd for command execution, WebSearch for OSINT gathering, Code for dynamic script execution, and SSHTunnel for secure remote access), function calling mechanisms that allow integration of any Python function as a security tool, and agent-as-tool functionality that enables specialized security agents (such as reconnaissance or exploit agents) to be used by other agents, creating powerful collaborative security workflows without requiring formal handoffs between agents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cai.sdk.agents import Agent&#xA;from cai.tools.common import run_command&#xA;from cai.core import CAI&#xA;&#xA;def listing_tool():&#xA;   &#34;&#34;&#34;&#xA;   This is a tool used list the files in the current directory&#xA;   &#34;&#34;&#34;&#xA;    command = &#34;ls -la&#34;&#xA;    return run_command(command, ctf=ctf)&#xA;&#xA;def generic_linux_command(command: str = &#34;&#34;, args: str = &#34;&#34;, ctf=None) -&amp;gt; str:&#xA;    &#34;&#34;&#34;&#xA;    Tool to send a linux command.&#xA;    &#34;&#34;&#34;&#xA;    command = f&#39;{command} {args}&#39;&#xA;    return run_command(command, ctf=ctf)&#xA;&#xA;ctf_agent = Agent(&#xA;    name=&#34;CTF Agent&#34;,&#xA;    instructions=&#34;&#34;&#34;You are a Cybersecurity expert Leader&#34;&#34;&#34;,&#xA;    model= &#34;claude-3-7-sonnet-20250219&#34;,&#xA;    functions=[listing_tool, generic_linux_command])&#xA;&#xA;client = CAI()&#xA;messages = [{&#xA;    &#34;role&#34;: &#34;user&#34;,&#xA;    &#34;content&#34;: &#34;CTF challenge: TryMyNetwork. Target IP: 192.168.1.1&#34;&#xA;   }]&#xA;&#xA;response = client.run(agent=ctf_agent,&#xA;                      messages=messages)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may find different &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/tools&#34;&gt;tools&lt;/a&gt;. They are grouped in 6 major categories inspired by the security kill chain [^2]:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Reconnaissance and weaponization - &lt;em&gt;reconnaissance&lt;/em&gt; (crypto, listing, etc)&lt;/li&gt; &#xA; &lt;li&gt;Exploitation - &lt;em&gt;exploitation&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Privilege escalation - &lt;em&gt;escalation&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Lateral movement - &lt;em&gt;lateral&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Data exfiltration - &lt;em&gt;exfiltration&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Command and control - &lt;em&gt;control&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🔹 Handoffs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Handoffs&lt;/code&gt; allow an &lt;code&gt;Agent&lt;/code&gt; to delegate tasks to another agent, which is crucial in cybersecurity operations where specialized expertise is needed for different phases of an engagement. In our framework, &lt;code&gt;Handoffs&lt;/code&gt; are implemented as tools for the LLM, where a &lt;strong&gt;handoff/transfer function&lt;/strong&gt; like &lt;code&gt;transfer_to_flag_discriminator&lt;/code&gt; enables the &lt;code&gt;ctf_agent&lt;/code&gt; to pass control to the &lt;code&gt;flag_discriminator_agent&lt;/code&gt; once it believes it has found the flag. This creates a security validation chain where the first agent handles exploitation and flag discovery, while the second agent specializes in flag verification, ensuring proper segregation of duties and leveraging specialized capabilities of different models for distinct security tasks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cai.sdk.agents import Agent&#xA;from cai.core import CAI&#xA;&#xA;ctf_agent = Agent(&#xA;    name=&#34;CTF Agent&#34;,&#xA;    instructions=&#34;&#34;&#34;You are a Cybersecurity expert Leader&#34;&#34;&#34;,&#xA;    model= &#34;deepseek/deepseek-chat&#34;,&#xA;    functions=[],&#xA;)&#xA;&#xA;flag_discriminator_agent = Agent(&#xA;    name=&#34;Flag Discriminator Agent&#34;,&#xA;    instructions=&#34;You are a Cybersecurity expert facing a CTF challenge. You are in charge of checking if the flag is correct.&#34;,&#xA;    model= &#34;qwen2.5:14b&#34;,&#xA;    functions=[],&#xA;)&#xA;&#xA;def transfer_to_flag_discriminator():&#xA;    &#34;&#34;&#34;&#xA;    Transfer the flag to the flag_discriminator_agent to check if it is the correct flag&#xA;    &#34;&#34;&#34;&#xA;    return flag_discriminator_agent&#xA;&#xA;ctf_agent.functions.append(transfer_to_flag_discriminator)&#xA;&#xA;client = CAI()&#xA;messages = [{&#xA;    &#34;role&#34;: &#34;user&#34;,&#xA;    &#34;content&#34;: &#34;CTF challenge: TryMyNetwork. Target IP: 192.168.1.1&#34;&#xA;   }]&#xA;&#xA;response = client.run(agent=ctf_agent,&#xA;                      messages=messages)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔹 Patterns&lt;/h3&gt; &#xA;&lt;p&gt;An agentic &lt;code&gt;Pattern&lt;/code&gt; is a &lt;em&gt;structured design paradigm&lt;/em&gt; in artificial intelligence systems where autonomous or semi-autonomous agents operate within a defined &lt;em&gt;interaction framework&lt;/em&gt; (the pattern) to achieve a goal. These &lt;code&gt;Patterns&lt;/code&gt; specify the organization, coordination, and communication methods among agents, guiding decision-making, task execution, and delegation.&lt;/p&gt; &#xA;&lt;p&gt;An agentic pattern (&lt;code&gt;AP&lt;/code&gt;) can be formally defined as a tuple:&lt;/p&gt; &#xA;&lt;p&gt;\[ AP = (A, H, D, C, E) \]&lt;/p&gt; &#xA;&lt;p&gt;wherein:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;\(A\) (Agents):&lt;/strong&gt; A set of autonomous entities, \( A = \{a_1, a_2, ..., a_n\} \), each with defined roles, capabilities, and internal states.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;\(H\) (Handoffs):&lt;/strong&gt; A function \( H: A \times T \to A \) that governs how tasks \( T \) are transferred between agents based on predefined logic (e.g., rules, negotiation, bidding).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;\(D\) (Decision Mechanism):&lt;/strong&gt; A decision function \( D: S \to A \) where \( S \) represents system states, and \( D \) determines which agent takes action at any given time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;\(C\) (Communication Protocol):&lt;/strong&gt; A messaging function \( C: A \times A \to M \), where \( M \) is a message space, defining how agents share information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;\(E\) (Execution Model):&lt;/strong&gt; A function \( E: A \times I \to O \) where \( I \) is the input space and \( O \) is the output space, defining how agents perform tasks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When building &lt;code&gt;Patterns&lt;/code&gt;, we generall y classify them among one of the following categories, though others exist:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Agentic&lt;/strong&gt; &lt;code&gt;Pattern&lt;/code&gt; &lt;strong&gt;categories&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Swarm&lt;/code&gt; (Decentralized)&lt;/td&gt; &#xA;   &lt;td&gt;Agents share tasks and self-assign responsibilities without a central orchestrator. Handoffs occur dynamically. &lt;em&gt;An example of a peer-to-peer agentic pattern is the &lt;code&gt;CTF Agentic Pattern&lt;/code&gt;, which involves a team of agents working together to solve a CTF challenge with dynamic handoffs.&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Hierarchical&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A top-level agent (e.g., &#34;PlannerAgent&#34;) assigns tasks via structured handoffs to specialized sub-agents. Alternatively, the structure of the agents is harcoded into the agentic pattern with pre-defined handoffs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Chain-of-Thought&lt;/code&gt; (Sequential Workflow)&lt;/td&gt; &#xA;   &lt;td&gt;A structured pipeline where Agent A produces an output, hands it to Agent B for reuse or refinement, and so on. Handoffs follow a linear sequence. &lt;em&gt;An example of a chain-of-thought agentic pattern is the &lt;code&gt;ReasonerAgent&lt;/code&gt;, which involves a Reasoning-type LLM that provides context to the main agent to solve a CTF challenge with a linear sequence.&lt;/em&gt;[^1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Auction-Based&lt;/code&gt; (Competitive Allocation)&lt;/td&gt; &#xA;   &lt;td&gt;Agents &#34;bid&#34; on tasks based on priority, capability, or cost. A decision agent evaluates bids and hands off tasks to the best-fit agent.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Recursive&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A single agent continuously refines its own output, treating itself as both executor and evaluator, with handoffs (internal or external) to itself. &lt;em&gt;An example of a recursive agentic pattern is the &lt;code&gt;CodeAgent&lt;/code&gt; (when used as a recursive agent), which continuously refines its own output by executing code and updating its own instructions.&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Building a &lt;code&gt;Pattern&lt;/code&gt; is rather straightforward and only requires to link together &lt;code&gt;Agents&lt;/code&gt;, &lt;code&gt;Tools&lt;/code&gt; and &lt;code&gt;Handoffs&lt;/code&gt;. For example, the following builds an offensive &lt;code&gt;Pattern&lt;/code&gt; that adopts the &lt;code&gt;Swarm&lt;/code&gt; category:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# A Swarm Pattern for Red Team Operations&#xA;from cai.agents.red_teamer import redteam_agent&#xA;from cai.agents.thought import thought_agent&#xA;from cai.agents.mail import dns_smtp_agent&#xA;&#xA;&#xA;def transfer_to_dns_agent():&#xA;    &#34;&#34;&#34;&#xA;    Use THIS always for DNS scans and domain reconnaissance about dmarc and dkim registers&#xA;    &#34;&#34;&#34;&#xA;    return dns_smtp_agent&#xA;&#xA;&#xA;def redteam_agent_handoff(ctf=None):&#xA;    &#34;&#34;&#34;&#xA;    Red Team Agent, call this function empty to transfer to redteam_agent&#xA;    &#34;&#34;&#34;&#xA;    return redteam_agent&#xA;&#xA;&#xA;def thought_agent_handoff(ctf=None):&#xA;    &#34;&#34;&#34;&#xA;    Thought Agent, call this function empty to transfer to thought_agent&#xA;    &#34;&#34;&#34;&#xA;    return thought_agent&#xA;&#xA;# Register handoff functions to enable inter-agent communication pathways&#xA;redteam_agent.functions.append(transfer_to_dns_agent)&#xA;dns_smtp_agent.functions.append(redteam_agent_handoff)&#xA;thought_agent.functions.append(redteam_agent_handoff)&#xA;&#xA;# Initialize the swarm pattern with the thought agent as the entry point&#xA;redteam_swarm_pattern = thought_agent&#xA;redteam_swarm_pattern.pattern = &#34;swarm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔹 Turns and Interactions&lt;/h3&gt; &#xA;&lt;p&gt;During the agentic flow (conversation), we distinguish between &lt;strong&gt;interactions&lt;/strong&gt; and &lt;strong&gt;turns&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Interactions&lt;/strong&gt; are sequential exchanges between one or multiple agents. Each agent executing its logic corresponds with one &lt;em&gt;interaction&lt;/em&gt;. Since an &lt;code&gt;Agent&lt;/code&gt; in CAI generally implements the &lt;code&gt;ReACT&lt;/code&gt; agent model[^3], each &lt;em&gt;interaction&lt;/em&gt; consists of 1) a reasoning step via an LLM inference and 2) act by calling zero-to-n &lt;code&gt;Tools&lt;/code&gt;. This is defined in&lt;code&gt;process_interaction()&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/core.py&#34;&gt;core.py&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Turns&lt;/strong&gt;: A turn represents a cycle of one ore more &lt;strong&gt;interactions&lt;/strong&gt; which finishes when the &lt;code&gt;Agent&lt;/code&gt; (or &lt;code&gt;Pattern&lt;/code&gt;) executing returns &lt;code&gt;None&lt;/code&gt;, judging there&#39;re no further actions to undertake. This is defined in &lt;code&gt;run()&lt;/code&gt;, see &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/core.py&#34;&gt;core.py&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] CAI Agents are not related to Assistants in the Assistants API. They are named similarly for convenience, but are otherwise completely unrelated. CAI is entirely powered by the Chat Completions API and is hence stateless between calls.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🔹 Tracing&lt;/h3&gt; &#xA;&lt;p&gt;CAI implements AI observability by adopting the OpenTelemetry standard and to do so, it leverages &lt;a href=&#34;https://github.com/Arize-ai/phoenix&#34;&gt;Phoenix&lt;/a&gt; which provides comprehensive tracing capabilities through OpenTelemetry-based instrumentation, allowing you to monitor and analyze your security operations in real-time. This integration enables detailed visibility into agent interactions, tool usage, and attack vectors throughout penetration testing workflows, making it easier to debug complex exploitation chains, track vulnerability discovery processes, and optimize agent performance for more effective security assessments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/media/tracing.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;🔹 Human-In-The-Loop (HITL)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;                      ┌─────────────────────────────────┐&#xA;                      │                                 │&#xA;                      │      Cybersecurity AI (CAI)     │&#xA;                      │                                 │&#xA;                      │       ┌─────────────────┐       │&#xA;                      │       │  Autonomous AI  │       │&#xA;                      │       └────────┬────────┘       │&#xA;                      │                │                │&#xA;                      │                │                │&#xA;                      │       ┌────────▼─────────┐      │&#xA;                      │       │ HITL Interaction │      │&#xA;                      │       └────────┬─────────┘      │&#xA;                      │                │                │&#xA;                      └────────────────┼────────────────┘&#xA;                                       │&#xA;                                       │ Ctrl+C (cli.py)&#xA;                                       │&#xA;                           ┌───────────▼───────────┐&#xA;                           │   Human Operator(s)   │&#xA;                           │  Expertise | Judgment │&#xA;                           │    Teleoperation      │&#xA;                           └───────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CAI delivers a framework for building Cybersecurity AIs with a strong emphasis on &lt;em&gt;semi-autonomous&lt;/em&gt; operation, as the reality is that &lt;strong&gt;fully-autonomous&lt;/strong&gt; cybersecurity systems remain premature and face significant challenges when tackling complex tasks. While CAI explores autonomous capabilities, we recognize that effective security operations still require human teleoperation providing expertise, judgment, and oversight in the security process.&lt;/p&gt; &#xA;&lt;p&gt;Accordingly, the Human-In-The-Loop (&lt;code&gt;HITL&lt;/code&gt;) module is a core design principle of CAI, acknowledging that human intervention and teleoperation are essential components of responsible security testing. Through the &lt;code&gt;cli.py&lt;/code&gt; interface, users can seamlessly interact with agents at any point during execution by simply pressing &lt;code&gt;Ctrl+C&lt;/code&gt;. This is implemented across &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/core.py&#34;&gt;core.py&lt;/a&gt; and also in the REPL abstractions &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/repl&#34;&gt;REPL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To start CAI after installing it, just type &lt;code&gt;cai&lt;/code&gt; in the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;└─# cai&#xA;&#xA;          CCCCCCCCCCCCC      ++++++++   ++++++++      IIIIIIIIII&#xA;       CCC::::::::::::C  ++++++++++       ++++++++++  I::::::::I&#xA;     CC:::::::::::::::C ++++++++++         ++++++++++ I::::::::I&#xA;    C:::::CCCCCCCC::::C +++++++++    ++     +++++++++ II::::::II&#xA;   C:::::C       CCCCCC +++++++     +++++     +++++++   I::::I&#xA;  C:::::C                +++++     +++++++     +++++    I::::I&#xA;  C:::::C                ++++                   ++++    I::::I&#xA;  C:::::C                 ++                     ++     I::::I&#xA;  C:::::C                  +   +++++++++++++++   +      I::::I&#xA;  C:::::C                    +++++++++++++++++++        I::::I&#xA;  C:::::C                     +++++++++++++++++         I::::I&#xA;   C:::::C       CCCCCC        +++++++++++++++          I::::I&#xA;    C:::::CCCCCCCC::::C         +++++++++++++         II::::::II&#xA;     CC:::::::::::::::C           +++++++++           I::::::::I&#xA;       CCC::::::::::::C             +++++             I::::::::I&#xA;          CCCCCCCCCCCCC               ++              IIIIIIIIII&#xA;&#xA;                      Cybersecurity AI (CAI), vX.Y.Z&#xA;                          Bug bounty-ready AI&#xA;&#xA;CAI&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That should initialize CAI and provide a prompt to execute any security task you want to perform. The navigation bar at the bottom displays important system information. This information helps you understand your environment while working with CAI.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a quick &lt;a href=&#34;https://asciinema.org/a/zm7wS5DA2o0S9pu1Tb44pnlvy&#34;&gt;demo video&lt;/a&gt; to help you get started with CAI. We&#39;ll walk through the basic steps — from launching the tool to running your first AI-powered task in the terminal. Whether you&#39;re a beginner or just curious, this guide will show you how easy it is to begin using CAI.&lt;/p&gt; &#xA;&lt;p&gt;From here on, type on &lt;code&gt;CAI&lt;/code&gt; and start your security exercise. Best way to learn is by example:&lt;/p&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;For using private models, you are given a &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/.env.example&#34;&gt;&lt;code&gt;.env.example&lt;/code&gt;&lt;/a&gt; file. Copy it and rename it as &lt;code&gt;.env&lt;/code&gt;. Fill in your corresponding API keys, and you are ready to use CAI.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of Environment Variables&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Variable&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CTF_NAME&lt;/td&gt; &#xA;    &lt;td&gt;Name of the CTF challenge to run (e.g. &#34;picoctf_static_flag&#34;)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CTF_CHALLENGE&lt;/td&gt; &#xA;    &lt;td&gt;Specific challenge name within the CTF to test&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CTF_SUBNET&lt;/td&gt; &#xA;    &lt;td&gt;Network subnet for the CTF container&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CTF_IP&lt;/td&gt; &#xA;    &lt;td&gt;IP address for the CTF container&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CTF_INSIDE&lt;/td&gt; &#xA;    &lt;td&gt;Whether to conquer the CTF from within container&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_MODEL&lt;/td&gt; &#xA;    &lt;td&gt;Model to use for agents&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_DEBUG&lt;/td&gt; &#xA;    &lt;td&gt;Set debug output level (0: Only tool outputs, 1: Verbose debug output, 2: CLI debug output)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_BRIEF&lt;/td&gt; &#xA;    &lt;td&gt;Enable/disable brief output mode&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_MAX_TURNS&lt;/td&gt; &#xA;    &lt;td&gt;Maximum number of turns for agent interactions&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_TRACING&lt;/td&gt; &#xA;    &lt;td&gt;Enable/disable OpenTelemetry tracing&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_AGENT_TYPE&lt;/td&gt; &#xA;    &lt;td&gt;Specify the agents to use (boot2root, one_tool...)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_STATE&lt;/td&gt; &#xA;    &lt;td&gt;Enable/disable stateful mode&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_MEMORY&lt;/td&gt; &#xA;    &lt;td&gt;Enable/disable memory mode (episodic, semantic, all)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_MEMORY_ONLINE&lt;/td&gt; &#xA;    &lt;td&gt;Enable/disable online memory mode&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_MEMORY_OFFLINE&lt;/td&gt; &#xA;    &lt;td&gt;Enable/disable offline memory&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_ENV_CONTEXT&lt;/td&gt; &#xA;    &lt;td&gt;Add dirs and current env to llm context&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_MEMORY_ONLINE_INTERVAL&lt;/td&gt; &#xA;    &lt;td&gt;Number of turns between online memory updates&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_PRICE_LIMIT&lt;/td&gt; &#xA;    &lt;td&gt;Price limit for the conversation in dollars&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_REPORT&lt;/td&gt; &#xA;    &lt;td&gt;Enable/disable reporter mode (ctf, nis2, pentesting)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_SUPPORT_MODEL&lt;/td&gt; &#xA;    &lt;td&gt;Model to use for the support agent&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_SUPPORT_INTERVAL&lt;/td&gt; &#xA;    &lt;td&gt;Number of turns between support agent executions&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_WORKSPACE&lt;/td&gt; &#xA;    &lt;td&gt;Defines the name of the workspace&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;CAI_WORKSPACE_DIR&lt;/td&gt; &#xA;    &lt;td&gt;Specifies the directory path where the workspace is located&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;OpenRouter Integration&lt;/h3&gt; &#xA;&lt;p&gt;The Cybersecurity AI (CAI) platform offers seamless integration with OpenRouter, a unified interface for Large Language Models (LLMs). This integration is crucial for users who wish to leverage advanced AI capabilities in their cybersecurity tasks. OpenRouter acts as a bridge, allowing CAI to communicate with various LLMs, thereby enhancing the flexibility and power of the AI agents used within CAI.&lt;/p&gt; &#xA;&lt;p&gt;To enable OpenRouter support in CAI, you need to configure your environment by adding specific entries to your &lt;code&gt;.env&lt;/code&gt; file. This setup ensures that CAI can interact with the OpenRouter API, facilitating the use of sophisticated models like Meta-LLaMA. Here’s how you can configure it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CAI_AGENT_TYPE=redteam_agent&#xA;CAI_MODEL=openrouter/meta-llama/llama-4-maverick&#xA;OPENROUTER_API_KEY=&amp;lt;sk-your-key&amp;gt;  # note, add yours&#xA;OPENROUTER_API_BASE=https://openrouter.ai/api/v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MCP&lt;/h3&gt; &#xA;&lt;p&gt;CAI supports the Model Context Protocol (MCP) for integrating external tools and services with AI agents. MCP is supported via two transport mechanisms:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;SSE (Server-Sent Events)&lt;/strong&gt; - For web-based servers that push updates over HTTP connections:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CAI&amp;gt;/mcp load http://localhost:9876/sse burp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;STDIO (Standard Input/Output)&lt;/strong&gt; - For local inter-process communication:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CAI&amp;gt;/mcp stdio myserver python mcp_server.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once connected, you can add the MCP tools to any agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CAI&amp;gt;/mcp add burp redteam_agent&#xA;Adding tools from MCP server &#39;burp&#39; to agent &#39;Red Team Agent&#39;...&#xA;                                 Adding tools to Red Team Agent&#xA;┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓&#xA;┃ Tool                              ┃ Status ┃ Details                                         ┃&#xA;┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩&#xA;│ send_http_request                 │ Added  │ Available as: send_http_request                 │&#xA;│ create_repeater_tab               │ Added  │ Available as: create_repeater_tab               │&#xA;│ send_to_intruder                  │ Added  │ Available as: send_to_intruder                  │&#xA;│ url_encode                        │ Added  │ Available as: url_encode                        │&#xA;│ url_decode                        │ Added  │ Available as: url_decode                        │&#xA;│ base64encode                      │ Added  │ Available as: base64encode                      │&#xA;│ base64decode                      │ Added  │ Available as: base64decode                      │&#xA;│ generate_random_string            │ Added  │ Available as: generate_random_string            │&#xA;│ output_project_options            │ Added  │ Available as: output_project_options            │&#xA;│ output_user_options               │ Added  │ Available as: output_user_options               │&#xA;│ set_project_options               │ Added  │ Available as: set_project_options               │&#xA;│ set_user_options                  │ Added  │ Available as: set_user_options                  │&#xA;│ get_proxy_http_history            │ Added  │ Available as: get_proxy_http_history            │&#xA;│ get_proxy_http_history_regex      │ Added  │ Available as: get_proxy_http_history_regex      │&#xA;│ get_proxy_websocket_history       │ Added  │ Available as: get_proxy_websocket_history       │&#xA;│ get_proxy_websocket_history_regex │ Added  │ Available as: get_proxy_websocket_history_regex │&#xA;│ set_task_execution_engine_state   │ Added  │ Available as: set_task_execution_engine_state   │&#xA;│ set_proxy_intercept_state         │ Added  │ Available as: set_proxy_intercept_state         │&#xA;│ get_active_editor_contents        │ Added  │ Available as: get_active_editor_contents        │&#xA;│ set_active_editor_contents        │ Added  │ Available as: set_active_editor_contents        │&#xA;└───────────────────────────────────┴────────┴─────────────────────────────────────────────────┘&#xA;Added 20 tools from server &#39;burp&#39; to agent &#39;Red Team Agent&#39;.&#xA;CAI&amp;gt;/agent 13&#xA;CAI&amp;gt;Create a repeater tab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can list all active MCP connections and their transport types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CAI&amp;gt;/mcp list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/386a1fd3-3469-4f84-9396-2a5236febe1f&#34;&gt;https://github.com/user-attachments/assets/386a1fd3-3469-4f84-9396-2a5236febe1f&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Development is facilitated via VS Code dev. environments. To try out our development environment, clone the repository, open VS Code and enter de dev. container mode:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/media/cai_devenv.gif&#34; alt=&#34;CAI Development Environment&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;p&gt;If you want to contribute to this project, use &lt;a href=&#34;https://pre-commit.com/&#34;&gt;&lt;strong&gt;Pre-commit&lt;/strong&gt;&lt;/a&gt; before your MR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pre-commit&#xA;pre-commit # files staged&#xA;pre-commit run --all-files # all files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional Requirements: caiextensions&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the extensions are not publicly available as the engineering endeavour to maintain them is significant. Instead, we&#39;re making selected custom caiextensions available for partner companies across collaborations.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;span&gt;ℹ&lt;/span&gt; Usage Data Collection&lt;/h3&gt; &#xA;&lt;p&gt;CAI is provided free of charge for researchers. To improve CAI’s detection accuracy and publish open security research, instead of payment for research use cases, we ask you to contribute to the CAI community by allowing usage data collection. This data helps us identify areas for improvement, understand how the framework is being used, and prioritize new features. Legal basis of data collection is under Art. 6 (1)(f) GDPR — CAI’s legitimate interest in maintaining and improving security tooling, with Art. 89 safeguards for research. The collected data includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic system information (OS type, Python version)&lt;/li&gt; &#xA; &lt;li&gt;Username and IP information&lt;/li&gt; &#xA; &lt;li&gt;Tool usage patterns and performance metrics&lt;/li&gt; &#xA; &lt;li&gt;Model interactions and token usage statistics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We take your privacy seriously and only collect what&#39;s needed to make CAI better. For further info, reach out to research＠aliasrobotics.com. You can disable some of the data collection features via the &lt;code&gt;CAI_TELEMETRY&lt;/code&gt; environment variable but we encourage you to keep it enabled and contribute back to research:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CAI_TELEMETRY=False cai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reproduce CI-Setup locally&lt;/h3&gt; &#xA;&lt;p&gt;To simulate the CI/CD pipeline, you can run the following in the Gitlab runner machines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it \&#xA;  --privileged \&#xA;  --network=exploitflow_net \&#xA;  --add-host=&#34;host.docker.internal:host-gateway&#34; \&#xA;  -v /cache:/cache \&#xA;  -v /var/run/docker.sock:/var/run/docker.sock:rw \&#xA;  registry.gitlab.com/aliasrobotics/alias_research/cai:latest bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;OLLAMA is giving me 404 errors&lt;/summary&gt; &#xA; &lt;p&gt;Ollama&#39;s API in OpenAI mode uses &lt;code&gt;/v1/chat/completions&lt;/code&gt; whereas the &lt;code&gt;openai&lt;/code&gt; library uses &lt;code&gt;base_url&lt;/code&gt; + &lt;code&gt;/chat/completions&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;We adopt the latter for overall alignment with the gen AI community and empower the former by allowing users to add the &lt;code&gt;v1&lt;/code&gt; themselves via:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OLLAMA_API_BASE=http://IP:PORT/v1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See the following issues that treat this topic in more detail:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/aliasrobotics/cai/issues/76&#34;&gt;https://github.com/aliasrobotics/cai/issues/76&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/aliasrobotics/cai/issues/83&#34;&gt;https://github.com/aliasrobotics/cai/issues/83&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/aliasrobotics/cai/issues/82&#34;&gt;https://github.com/aliasrobotics/cai/issues/82&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Where are all the caiextensions?&lt;/summary&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://gitlab.com/aliasrobotics/alias_research/caiextensions&#34;&gt;all caiextensions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;How do I install the report caiextension?&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/#optional-requirements-caiextensions&#34;&gt;See here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;How do I set up SSH access for Gitlab?&lt;/summary&gt; &#xA; &lt;p&gt;Generate a new SSH key&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-keygen -t ed25519&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add the key to the SSH agent&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh-add ~/.ssh/id_ed25519&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Add the public key to Gitlab Copy the key and add it to Gitlab under &lt;a href=&#34;https://gitlab.com/-/user_settings/ssh_keys&#34;&gt;https://gitlab.com/-/user_settings/ssh_keys&lt;/a&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat ~/.ssh/id_ed25519.pub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;To verify it:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ssh -T git@gitlab.com&#xA;Welcome to GitLab, @vmayoral!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;How do I clear Python cache?&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -name &#34;*.pyc&#34; -delete &amp;amp;&amp;amp; find . -name &#34;__pycache__&#34; -delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;If host networking is not working with ollama check whether it has been disabled in Docker because you are not signed in&lt;/summary&gt; &#xA; &lt;p&gt;Docker in OS X behaves funny sometimes. Check if the following message has shown up:&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Host networking has been disabled because you are not signed in. Please sign in to enable it&lt;/em&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Make sure this has been addressed and also that the Dev Container is not forwarding the 8000 port (click on x, if necessary in the ports section).&lt;/p&gt; &#xA; &lt;p&gt;To verify connection, from within the VSCode devcontainer:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v http://host.docker.internal:8000/api/version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Run CAI against any target&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-004-first-message.png&#34; alt=&#34;cai-004-first-message&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;The starting user prompt in this case is: &lt;code&gt;Target IP: 192.168.3.10, perform a full network scan&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;The agent started performing a nmap scan. You could either interact with the agent and give it more instructions, or let it run to see what it explores next.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How do I interact with the agent? Type twice CTRL + C &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-005-ctrl-c.png&#34; alt=&#34;cai-005-ctrl-c&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you want to use the HITL mode, you can do it by presssing twice &lt;code&gt;Ctrl + C&lt;/code&gt;. This will allow you to interact (prompt) with the agent whenever you want. The agent will not lose the previous context, as it is stored in the &lt;code&gt;history&lt;/code&gt; variable, which is passed to it and any agent that is called. This enables any agent to use the previous information and be more accurate and efficient.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Can I change the model while CAI is running? /model &lt;/summary&gt; &#xA; &lt;p&gt;Use &lt;code&gt;/model&lt;/code&gt; to change the model.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-007-model-change.png&#34; alt=&#34;cai-007-model-change&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How can I list all the agents available? /agent &lt;/summary&gt; &#xA; &lt;p&gt;Use &lt;code&gt;/agent&lt;/code&gt; to list all the agents available.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-010-agents-menu.png&#34; alt=&#34;cai-010-agents-menu&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Where can I list all the environment variables? /config &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-008-config.png&#34; alt=&#34;cai-008-config&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; How to know more about the CLI? /help &lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-006-help.png&#34; alt=&#34;cai-006-help&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How can I trace the whole execution?&lt;/summary&gt; The environment variable `CAI_TRACING` allows the user to set it to `CAI_TRACING=true` to enable tracing, or `CAI_TRACING=false` to disable it. When CAI is prompted by the first time, the user is provided with two paths, the execution log, and the tracing log. &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-009-logs.png&#34; alt=&#34;cai-009-logs&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can I expand CAI capabilities using previous run logs?&lt;/summary&gt; &#xA; &lt;p&gt;Absolutely! The &lt;strong&gt;memory extension&lt;/strong&gt; allows you to use a previously sucessful runs ( the log object is stored as a &lt;strong&gt;.jsonl file in the &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/logs&#34;&gt;log&lt;/a&gt; folder&lt;/strong&gt; ) in a new run against the same target. The user is also given the path highlighted in orange as shown below.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/imgs/readme_imgs/cai-009-logs.png&#34; alt=&#34;cai-009-logs&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;How to make use of this functionality?&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Run CAI against the target. Let&#39;s assume the target name is: &lt;code&gt;target001&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Get the log file path, something like: &lt;code&gt;logs/cai_20250408_111856.jsonl&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Generate the memory using any model of your preference: &lt;code&gt;shell JSONL_FILE_PATH=&#34;logs/cai_20250408_111856.jsonl&#34; CTF_INSIDE=&#34;false&#34; CAI_MEMORY_COLLECTION=&#34;target001&#34; CAI_MEMORY=&#34;episodic&#34; CAI_MODEL=&#34;claude-3-5-sonnet-20241022&#34; python3 tools/2_jsonl_to_memory.py &lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;The script &lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/tools/2_jsonl_to_memory.py&#34;&gt;&lt;code&gt;tools/2_jsonl_to_memory.py&lt;/code&gt;&lt;/a&gt; will generate a memory collection file with the most relevant steps. The quality of the memory collection will depend on the model you use.&lt;/p&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;Use the generated memory collection and execute a new run: &lt;code&gt;shell CAI_MEMORY=&#34;episodic&#34; CAI_MODEL=&#34;gpt-4o&#34; CAI_MEMORY_COLLECTION=&#34;target001&#34; CAI_TRACING=false python3 cai/cli.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Can I expand CAI capabilities using scripts or extra information?&lt;/summary&gt; &#xA; &lt;p&gt;Currently, CAI supports text based information. You can add any extra information on the target you are facing by copy-pasting it directly into the system or user prompt.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;How?&lt;/strong&gt; By adding it to the system (&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/repl/templates/system_master_template.md&#34;&gt;&lt;code&gt;system_master_template.md&lt;/code&gt;&lt;/a&gt;) or the user prompt (&lt;a href=&#34;https://raw.githubusercontent.com/aliasrobotics/cai/main/cai/repl/templates/user_master_template.md&#34;&gt;&lt;code&gt;user_master_template.md&lt;/code&gt;&lt;/a&gt;). You can always directly prompt the path to the model, and it will &lt;code&gt;cat&lt;/code&gt; it.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;How CAI licence works?&lt;/summary&gt; &#xA; &lt;p&gt;CAI’s current license does not restrict usage for research purposes. You are free to use CAI for security assessments (pentests), to develop additional features, and to integrate it into your research activities, as long as you comply with local laws.&lt;/p&gt; &#xA; &lt;p&gt;If you or your organization start benefiting commercially from CAI (e.g., offering pentesting services powered by CAI), then a commercial license will be required to help sustain the project.&lt;/p&gt; &#xA; &lt;p&gt;CAI itself is not a profit-seeking initiative. Our goal is to build a sustainable open-source project. We simply ask that those who profit from CAI contribute back and support our ongoing development.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to cite our work, please use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{mayoralvilches2025caiopenbugbountyready,&#xA;      title={CAI: An Open, Bug Bounty-Ready Cybersecurity AI},&#xA;      author={Víctor Mayoral-Vilches and Luis Javier Navarrete-Lozano and María Sanz-Gómez and Lidia Salas Espejo and Martiño Crespo-Álvarez and Francisco Oca-Gonzalez and Francesco Balassone and Alfonso Glera-Picón and Unai Ayucar-Carbajo and Jon Ander Ruiz-Alcalde and Stefan Rass and Martin Pinzger and Endika Gil-Uriarte},&#xA;      year={2025},&#xA;      eprint={2504.06017},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CR},&#xA;      url={https://arxiv.org/abs/2504.06017},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@misc{mayoralvilches2025cybersecurityaidangerousgap,&#xA;      title={Cybersecurity AI: The Dangerous Gap Between Automation and Autonomy}, &#xA;      author={Víctor Mayoral-Vilches},&#xA;      year={2025},&#xA;      eprint={2506.23592},&#xA;      archivePrefix={arXiv},&#xA;      primaryClass={cs.CR},&#xA;      url={https://arxiv.org/abs/2506.23592}, &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;CAI was initially developed by &lt;a href=&#34;https://aliasrobotics.com&#34;&gt;Alias Robotics&lt;/a&gt; and co-funded by the European EIC accelerator project RIS (GA 101161136) - HORIZON-EIC-2023-ACCELERATOR-01 call. The original agentic principles are inspired from OpenAI&#39;s &lt;a href=&#34;https://github.com/openai/swarm&#34;&gt;&lt;code&gt;swarm&lt;/code&gt;&lt;/a&gt; library and translated into newer prototypes. This project also makes use of other relevant open source building blocks including &lt;a href=&#34;https://github.com/BerriAI/litellm&#34;&gt;&lt;code&gt;LiteLLM&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/Arize-ai/phoenix&#34;&gt;&lt;code&gt;phoenix&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Footnotes --&gt; &#xA;&lt;p&gt;[^1]: Arguably, the Chain-of-Thought agentic pattern is a special case of the Hierarchical agentic pattern. [^2]: Kamhoua, C. A., Leslie, N. O., &amp;amp; Weisman, M. J. (2018). Game theoretic modeling of advanced persistent threat in internet of things. Journal of Cyber Security and Information Systems. [^3]: Yao, S., Zhao, J., Yu, D., Du, N., Shafran, I., Narasimhan, K., &amp;amp; Cao, Y. (2023, January). React: Synergizing reasoning and acting in language models. In International Conference on Learning Representations (ICLR). [^4]: Deng, G., Liu, Y., Mayoral-Vilches, V., Liu, P., Li, Y., Xu, Y., ... &amp;amp; Rass, S. (2024). {PentestGPT}: Evaluating and harnessing large language models for automated penetration testing. In 33rd USENIX Security Symposium (USENIX Security 24) (pp. 847-864).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chubin/wttr.in</title>
    <updated>2025-07-19T01:34:50Z</updated>
    <id>tag:github.com,2025-07-19:/chubin/wttr.in</id>
    <link href="https://github.com/chubin/wttr.in" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⛅ The right way to check the weather&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;wttr.in — the right way to &lt;del&gt;check&lt;/del&gt; &lt;code&gt;curl&lt;/code&gt; the weather!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;wttr.in is a console-oriented weather forecast service that supports various information representation methods like terminal-oriented ANSI-sequences for console HTTP clients (curl, httpie, or wget), HTML for web browsers, or PNG for graphical viewers.&lt;/p&gt; &#xA;&lt;p&gt;Originally started as a small project, a wrapper for &lt;a href=&#34;https://github.com/schachmat/wego&#34;&gt;wego&lt;/a&gt;, intended to demonstrate the power of the console-oriented services, &lt;em&gt;wttr.in&lt;/em&gt; became a popular weather reporting service, handling tens of millions&lt;a href=&#34;https://raw.githubusercontent.com/chubin/wttr.in/master/#wttrin-usage-stats&#34;&gt;¹&lt;/a&gt; of queries daily.&lt;/p&gt; &#xA;&lt;p&gt;You can see it running here: &lt;a href=&#34;https://wttr.in&#34;&gt;wttr.in&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wttr.in/:help&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#usage&#34;&gt;Usage&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#one-line-output&#34;&gt;One-line output&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#data-rich-output-format-v2&#34;&gt;Data-rich output format&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#map-view-v3&#34;&gt;Map view&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#different-output-formats&#34;&gt;Output formats&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#moon-phases&#34;&gt;Moon phases&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#internationalization-and-localization&#34;&gt;Internationalization&lt;/a&gt; | &lt;a href=&#34;https://github.com/chubin/wttr.in#installation&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can access the service from a shell or from a Web browser like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in&#xA;Weather for City: Paris, France&#xA;&#xA;     \   /     Clear&#xA;      .-.      10 – 11 °C&#xA;   ― (   ) ―   ↑ 11 km/h&#xA;      `-’      10 km&#xA;     /   \     0.0 mm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example weather report:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chubin/wttr.in/master/share/pics/San_Francisco.png&#34; alt=&#34;Weather Report&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or in PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-PowerShell&#34;&gt;Invoke-RestMethod https://wttr.in&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to get the weather information for a specific location? You can add the desired location to the URL in your request like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/London&#xA;$ curl wttr.in/Moscow&#xA;$ curl wttr.in/Salt+Lake+City&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you omit the location name, you will get the report for your current location based on your IP address.&lt;/p&gt; &#xA;&lt;p&gt;Use 3-letter airport codes in order to get the weather information at a certain airport:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/muc      # Weather for IATA: muc, Munich International Airport, Germany&#xA;$ curl wttr.in/ham      # Weather for IATA: ham, Hamburg Airport, Germany&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say you&#39;d like to get the weather for a geographical location other than a town or city - maybe an attraction in a city, a mountain name, or some special location. Add the character &lt;code&gt;~&lt;/code&gt; before the name to look up that special location name before the weather is then retrieved:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/~Vostok+Station&#xA;$ curl wttr.in/~Eiffel+Tower&#xA;$ curl wttr.in/~Kilimanjaro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For these examples, you&#39;ll see a line below the weather forecast output that shows the geolocation results of looking up the location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Location: Vostok Station, станция Восток, AAT, Antarctica [-78.4642714,106.8364678]&#xA;Location: Tour Eiffel, 5, Avenue Anatole France, Gros-Caillou, 7e, Paris, Île-de-France, 75007, France [48.8582602,2.29449905432]&#xA;Location: Kilimanjaro, Northern, Tanzania [-3.4762789,37.3872648]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use IP-addresses (direct) or domain names (prefixed with &lt;code&gt;@&lt;/code&gt;) to specify a location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/@github.com&#xA;$ curl wttr.in/@msu.ru&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get detailed information online, you can access the &lt;a href=&#34;https://wttr.in/:help&#34;&gt;/:help&lt;/a&gt; page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/:help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Weather Units&lt;/h3&gt; &#xA;&lt;p&gt;By default the USCS units are used for the queries from the USA and the metric system for the rest of the world. You can override this behavior by adding &lt;code&gt;?u&lt;/code&gt;, &lt;code&gt;?m&lt;/code&gt; or &lt;code&gt;?M&lt;/code&gt; to a URL like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Amsterdam?u  # USCS (used by default in US)&#xA;$ curl wttr.in/Amsterdam?m  # metric (SI) (used by default everywhere except US)&#xA;$ curl wttr.in/Amsterdam?M  # metric (SI), but show wind speed in m/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have several options to pass, write them without delimiters in between for the one-letter options, and use &lt;code&gt;&amp;amp;&lt;/code&gt; as a delimiter for the long options with values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl &#39;wttr.in/Amsterdam?m2&amp;amp;lang=nl&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It would be a rough equivalent of &lt;code&gt;-m2 --lang nl&lt;/code&gt; for the GNU CLI syntax.&lt;/p&gt; &#xA;&lt;h2&gt;Supported output formats and views&lt;/h2&gt; &#xA;&lt;p&gt;wttr.in currently supports five output formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ANSI for the terminal;&lt;/li&gt; &#xA; &lt;li&gt;Plain-text for the terminal and scripts;&lt;/li&gt; &#xA; &lt;li&gt;HTML for the browser;&lt;/li&gt; &#xA; &lt;li&gt;PNG for the graphical viewers;&lt;/li&gt; &#xA; &lt;li&gt;JSON for scripts and APIs;&lt;/li&gt; &#xA; &lt;li&gt;Prometheus metrics for scripts and APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The ANSI and HTML formats are selected based on the User-Agent string.&lt;/p&gt; &#xA;&lt;p&gt;To force plain text, which disables colors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/?T&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To restrict output to glyphs available in standard console fonts (e.g. Consolas and Lucida Console):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/?d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The PNG format can be forced by adding &lt;code&gt;.png&lt;/code&gt; to the end of the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget wttr.in/Paris.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use all of the options with the PNG-format like in an URL, but you have to separate them with &lt;code&gt;_&lt;/code&gt; instead of &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;&amp;amp;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wget wttr.in/Paris_0tqp_lang=fr.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Useful options for the PNG format:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;t&lt;/code&gt; for transparency (&lt;code&gt;transparency=150&lt;/code&gt;);&lt;/li&gt; &#xA; &lt;li&gt;transparency=0..255 for a custom transparency level.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Transparency is a useful feature when weather PNGs are used to add weather data to pictures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ convert source.jpg &amp;lt;( curl wttr.in/Oymyakon_tqp0.png ) -geometry +50+50 -composite target.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;source.jpg&lt;/code&gt; - source file;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;target.jpg&lt;/code&gt; - target file;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Oymyakon&lt;/code&gt; - name of the location;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tqp0&lt;/code&gt; - options (recommended).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/C69-wsIW0AAcAD5.jpg&#34; alt=&#34;Picture with weather data&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can embed a special wttr.in widget, that displays the weather condition for the current or a selected location, into a HTML page using the &lt;a href=&#34;https://github.com/midzer/wttr-switcher&#34;&gt;wttr-switcher&lt;/a&gt;. That is how it looks like: &lt;a href=&#34;https://midzer.github.io/wttr-switcher/&#34;&gt;wttr-switcher-example&lt;/a&gt; or on a real world web site: &lt;a href=&#34;https://feuerwehr-eisolzried.de/&#34;&gt;https://feuerwehr-eisolzried.de/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3875145/65265457-50eac180-db11-11e9-8f9b-2e1711dfc436.png&#34; alt=&#34;Embedded wttr.in example at feuerwehr-eisolzried.de&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;One-line output&lt;/h2&gt; &#xA;&lt;p&gt;One-line output format is convenient to be used to show weather info in status bar of different programs, such as &lt;em&gt;tmux&lt;/em&gt;, &lt;em&gt;weechat&lt;/em&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;For one-line output format, specify additional URL parameter &lt;code&gt;format&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Nuremberg?format=3&#xA;Nuremberg: 🌦 +11⁰C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Available preconfigured formats: 1, 2, 3, 4 and the custom format using the percent notation (see below).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1: Current weather at location: &lt;code&gt;🌦 +11⁰C&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;2: Current weather at location with more details: &lt;code&gt;🌦 🌡️+11°C 🌬️↓4km/h&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;3: Name of location and current weather at location: &lt;code&gt;Nuremberg: 🌦 +11⁰C&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;4: Name of location and current weather at location with more details: &lt;code&gt;Nuremberg: 🌦 🌡️+11°C 🌬️↓4km/h&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can specify multiple locations separated with &lt;code&gt;:&lt;/code&gt; (for repeating queries):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Nuremberg:Hamburg:Berlin?format=3&#xA;Nuremberg: 🌦 +11⁰C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to process all this queries at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -s &#39;wttr.in/{Nuremberg,Hamburg,Berlin}?format=3&#39;&#xA;Nuremberg: 🌦 +11⁰C&#xA;Hamburg: 🌦 +8⁰C&#xA;Berlin: 🌦 +8⁰C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To specify your own custom output format, use the special &lt;code&gt;%&lt;/code&gt;-notation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    c    Weather condition,&#xA;    C    Weather condition textual name,&#xA;    x    Weather condition, plain-text symbol,&#xA;    h    Humidity,&#xA;    t    Temperature (Actual),&#xA;    f    Temperature (Feels Like),&#xA;    w    Wind,&#xA;    l    Location,&#xA;    m    Moon phase 🌑🌒🌓🌔🌕🌖🌗🌘,&#xA;    M    Moon day,&#xA;    p    Precipitation (mm/3 hours),&#xA;    P    Pressure (hPa),&#xA;    u    UV index (1-12),&#xA;&#xA;    D    Dawn*,&#xA;    S    Sunrise*,&#xA;    z    Zenith*,&#xA;    s    Sunset*,&#xA;    d    Dusk*,&#xA;    T    Current time*,&#xA;    Z    Local timezone.&#xA;&#xA;(*times are shown in the local timezone)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So, these two calls are the same:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ curl wttr.in/London?format=3&#xA;    London: ⛅️ +7⁰C&#xA;    $ curl wttr.in/London?format=&#34;%l:+%c+%t\n&#34;&#xA;    London: ⛅️ +7⁰C&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;tmux&lt;/h3&gt; &#xA;&lt;p&gt;When using in &lt;code&gt;tmux.conf&lt;/code&gt;, you have to escape &lt;code&gt;%&lt;/code&gt; with &lt;code&gt;%&lt;/code&gt;, i.e. write there &lt;code&gt;%%&lt;/code&gt; instead of &lt;code&gt;%&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The output does not contain new line by default, when the %-notation is used, but it does contain it when preconfigured format (&lt;code&gt;1&lt;/code&gt;,&lt;code&gt;2&lt;/code&gt;,&lt;code&gt;3&lt;/code&gt; etc.) are used. To have the new line in the output when the %-notation is used, use &#39;\n&#39; and single quotes when doing a query from the shell.&lt;/p&gt; &#xA;&lt;p&gt;In programs, that are querying the service automatically (such as tmux), it is better to use some reasonable update interval. In tmux, you can configure it with &lt;code&gt;status-interval&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If several, &lt;code&gt;:&lt;/code&gt; separated locations, are specified in the query, specify update period as an additional query parameter &lt;code&gt;period=&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set -g status-interval 60&#xA;WEATHER=&#39;#(curl -s wttr.in/London:Stockholm:Moscow\?format\=&#34;%%l:+%%c%%20%%t%%60%%w&amp;amp;period=60&#34;)&#39;&#xA;set -g status-right &#34;$WEATHER ...&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://wttr.in/files/example-tmux-status-line.png&#34; alt=&#34;wttr.in in tmux status bar&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;WeeChat&lt;/h3&gt; &#xA;&lt;p&gt;To embed in to an IRC (&lt;a href=&#34;https://github.com/weechat/weechat&#34;&gt;WeeChat&lt;/a&gt;) client&#39;s existing status bar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/alias add wttr /exec -pipe &#34;/mute /set plugins.var.wttr&#34; url:wttr.in/Montreal?format=%l:+%c+%f+%h+%p+%P+%m+%w+%S+%s;/wait 3 /item refresh wttr&#xA;/trigger add wttr timer 60000;0;0 &#34;&#34; &#34;&#34; &#34;/wttr&#34;&#xA;/item add wttr &#34;&#34; &#34;${plugins.var.wttr}&#34;&#xA;/eval /set weechat.bar.status.items ${weechat.bar.status.items},spacer,wttr&#xA;/eval /set weechat.startup.command_after_plugins ${weechat.startup.command_after_plugins};/wttr&#xA;/wttr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XkYiRU7.png&#34; alt=&#34;wttr.in in WeeChat status bar&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;conky&lt;/h3&gt; &#xA;&lt;p&gt;Conky usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;${texeci 1800 curl wttr.in/kyiv_0pq_lang=uk.png&#xA;  | convert - -transparent black $HOME/.config/conky/out.png}&#xA;${image $HOME/.config/conky/out.png -p 0,0}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3875145/172178453-9e9ed9e3-9815-426a-9a21-afdd6e279fc8.png&#34; alt=&#34;wttr.in in conky&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;IRC&lt;/h3&gt; &#xA;&lt;p&gt;IRC integration example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenSourceTreasure/Mirc-ASCII-weather-translate-pixel-editor&#34;&gt;https://github.com/OpenSourceTreasure/Mirc-ASCII-weather-translate-pixel-editor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emojis support&lt;/h3&gt; &#xA;&lt;p&gt;To see emojis in terminal, you need:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Terminal support for emojis (was added to Cairo 1.15.8);&lt;/li&gt; &#xA; &lt;li&gt;Font with emojis support.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For the emoji font, we recommend &lt;em&gt;Noto Color Emoji&lt;/em&gt;, and a good alternative option would be the &lt;em&gt;Emoji One&lt;/em&gt; font; both of them support all necessary emoji glyphs.&lt;/p&gt; &#xA;&lt;p&gt;Font configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;$ cat ~/.config/fontconfig/fonts.conf&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE fontconfig SYSTEM &#34;fonts.dtd&#34;&amp;gt;&#xA;&amp;lt;fontconfig&amp;gt;&#xA;  &amp;lt;alias&amp;gt;&#xA;    &amp;lt;family&amp;gt;serif&amp;lt;/family&amp;gt;&#xA;    &amp;lt;prefer&amp;gt;&#xA;      &amp;lt;family&amp;gt;Noto Color Emoji&amp;lt;/family&amp;gt;&#xA;    &amp;lt;/prefer&amp;gt;&#xA;  &amp;lt;/alias&amp;gt;&#xA;  &amp;lt;alias&amp;gt;&#xA;    &amp;lt;family&amp;gt;sans-serif&amp;lt;/family&amp;gt;&#xA;    &amp;lt;prefer&amp;gt;&#xA;      &amp;lt;family&amp;gt;Noto Color Emoji&amp;lt;/family&amp;gt;&#xA;    &amp;lt;/prefer&amp;gt;&#xA;  &amp;lt;/alias&amp;gt;&#xA;  &amp;lt;alias&amp;gt;&#xA;    &amp;lt;family&amp;gt;monospace&amp;lt;/family&amp;gt;&#xA;    &amp;lt;prefer&amp;gt;&#xA;      &amp;lt;family&amp;gt;Noto Color Emoji&amp;lt;/family&amp;gt;&#xA;    &amp;lt;/prefer&amp;gt;&#xA;  &amp;lt;/alias&amp;gt;&#xA;&amp;lt;/fontconfig&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(to apply the configuration, run &lt;code&gt;fc-cache -f -v&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;In some cases, &lt;code&gt;tmux&lt;/code&gt; and the terminal understanding of some emoji characters may differ, which may cause strange effects similar to that described in #579.&lt;/p&gt; &#xA;&lt;h3&gt;Squeak&lt;/h3&gt; &#xA;&lt;p&gt;To embed into the world main docking bar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-smalltalk&#34;&gt;wttr := (UpdatingStringMorph on: [(WebClient httpGet: &#39;https://wttr.in/?format=%20%20%l:%20%C+%t&#39;) content] selector: #value)&#xA;&#x9;stepTime: 60000;&#xA;&#x9;useStringFormat;&#xA;&#x9;yourself.&#xA;dockingBar := World mainDockingBars first.&#xA;dockingBar addMorph: wttr after: (dockingBar findA: ClockMorph).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/4c2762b0-77ae-41a8-98db-3eb310d073bd&#34; alt=&#34;wttr.in integration in the Squeak world main docking bar&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Data-rich output format (v2)&lt;/h2&gt; &#xA;&lt;p&gt;In the experimental data-rich output format, that is available under the view code &lt;code&gt;v2&lt;/code&gt;, a lot of additional weather and astronomical information is available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Temperature, and precipitation changes forecast throughout the days;&lt;/li&gt; &#xA; &lt;li&gt;Moonphase for today and the next three days;&lt;/li&gt; &#xA; &lt;li&gt;The current weather condition, temperature, humidity, wind speed and direction, pressure;&lt;/li&gt; &#xA; &lt;li&gt;Timezone;&lt;/li&gt; &#xA; &lt;li&gt;Dawn, sunrise, noon, sunset, dusk time for he selected location;&lt;/li&gt; &#xA; &lt;li&gt;Precise geographical coordinates for the selected location.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ curl v2.wttr.in/München&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ curl wttr.in/München?format=v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, if you prefer Nerd Fonts instead of Emoji, &lt;code&gt;v2d&lt;/code&gt; (day) or &lt;code&gt;v2n&lt;/code&gt; (night):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ curl v2d.wttr.in/München&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://wttr.in/files/example-wttr-v2.png&#34; alt=&#34;data-rich output format&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(The mode is experimental, and it has several limitations currently:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It works only in terminal;&lt;/li&gt; &#xA; &lt;li&gt;Only English is supported).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently, you need some tweaks for some terminals, to get the best possible visualization.&lt;/p&gt; &#xA;&lt;h3&gt;URXVT&lt;/h3&gt; &#xA;&lt;p&gt;Depending on your configuration you might be taking all steps, or only a few. URXVT currently doesn&#39;t support emoji related fonts, but we can get almost the same effect using &lt;em&gt;Font-Symbola&lt;/em&gt;. So add to your &lt;code&gt;.Xresources&lt;/code&gt; file the following line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    xft:symbola:size=10:minspace=False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add it &lt;em&gt;after&lt;/em&gt; your preferred font and it will only show up when required. Then, if you see or feel like you&#39;re having spacing issues, add this: &lt;code&gt;URxvt.letterSpace: 0&lt;/code&gt; For some reason URXVT sometimes stops deciding right the word spacing and we need to force it this way.&lt;/p&gt; &#xA;&lt;p&gt;The result, should look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24360204/63842949-1d36d480-c975-11e9-81dd-998d1329bd8a.png&#34; alt=&#34;URXVT Emoji line&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Map view (v3)&lt;/h2&gt; &#xA;&lt;p&gt;In the experimental map view, that is available under the view code &lt;code&gt;v3&lt;/code&gt;, weather information about a geographical region is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    $ curl v3.wttr.in/Bayern.sxl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://v3.wttr.in/Bayern.png&#34; alt=&#34;v3.wttr.in/Bayern&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;or directly in browser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v3.wttr.in/Bayern&#34;&gt;https://v3.wttr.in/Bayern&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The map view currently supports three formats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PNG (for browser and messengers);&lt;/li&gt; &#xA; &lt;li&gt;Sixel (terminal inline images support);&lt;/li&gt; &#xA; &lt;li&gt;IIP (terminal with iterm2 inline images protocol support).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Terminal with inline images protocols support:&lt;/p&gt; &#xA;&lt;p&gt;⟶ &lt;em&gt;Detailed article: &lt;a href=&#34;https://raw.githubusercontent.com/chubin/wttr.in/master/doc/terminal-images.md&#34;&gt;Images in terminal&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Terminal&lt;/th&gt; &#xA;   &lt;th&gt;Environment&lt;/th&gt; &#xA;   &lt;th&gt;Images support&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uxterm&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mlterm&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kitty&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wezterm&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;IIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Darktile&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jexer&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GNOME Terminal&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gitlab.gnome.org/GNOME/vte/-/issues/253&#34;&gt;in-progress&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alacritty&lt;/td&gt; &#xA;   &lt;td&gt;X11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alacritty/alacritty/issues/910&#34;&gt;in-progress&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;foot&lt;/td&gt; &#xA;   &lt;td&gt;Wayland&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DomTerm&lt;/td&gt; &#xA;   &lt;td&gt;Web&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yaft&lt;/td&gt; &#xA;   &lt;td&gt;FB&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iTerm2&lt;/td&gt; &#xA;   &lt;td&gt;Mac OS X&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;IIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mintty&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows Terminal&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/issues/448&#34;&gt;in-progress&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nanno.dip.jp/softlib/man/rlogin/&#34;&gt;RLogin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;Sixel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Different output formats&lt;/h2&gt; &#xA;&lt;h3&gt;JSON output&lt;/h3&gt; &#xA;&lt;p&gt;The JSON format is a feature providing access to &lt;em&gt;wttr.in&lt;/em&gt; data through an easy-to-parse format, without requiring the user to create a complex script to reinterpret wttr.in&#39;s graphical output.&lt;/p&gt; &#xA;&lt;p&gt;To fetch information in JSON format, use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Detroit?format=j1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fetch information on the Detroit region in JSON format. The j1 format code is used to allow for the use of other layouts for the JSON output.&lt;/p&gt; &#xA;&lt;p&gt;The result will look something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;current_condition&#34;: [&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;    &#34;FeelsLikeC&#34;: &#34;25&#34;,&#xA;&#x9;&#x9;    &#34;FeelsLikeF&#34;: &#34;76&#34;,&#xA;&#x9;&#x9;    &#34;cloudcover&#34;: &#34;100&#34;,&#xA;&#x9;&#x9;    &#34;humidity&#34;: &#34;76&#34;,&#xA;&#x9;&#x9;    &#34;observation_time&#34;: &#34;04:08 PM&#34;,&#xA;&#x9;&#x9;    &#34;precipMM&#34;: &#34;0.2&#34;,&#xA;&#x9;&#x9;    &#34;pressure&#34;: &#34;1019&#34;,&#xA;&#x9;&#x9;    &#34;temp_C&#34;: &#34;22&#34;,&#xA;&#x9;&#x9;    &#34;temp_F&#34;: &#34;72&#34;,&#xA;&#x9;&#x9;    &#34;uvIndex&#34;: 5,&#xA;&#x9;&#x9;    &#34;visibility&#34;: &#34;16&#34;,&#xA;&#x9;&#x9;    &#34;weatherCode&#34;: &#34;122&#34;,&#xA;&#x9;&#x9;    &#34;weatherDesc&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;    &#34;value&#34;: &#34;Overcast&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;    ],&#xA;&#x9;&#x9;    &#34;weatherIconUrl&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;    &#34;value&#34;: &#34;&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;    ],&#xA;&#x9;&#x9;    &#34;winddir16Point&#34;: &#34;NNE&#34;,&#xA;&#x9;&#x9;    &#34;winddirDegree&#34;: &#34;20&#34;,&#xA;&#x9;&#x9;    &#34;windspeedKmph&#34;: &#34;7&#34;,&#xA;&#x9;&#x9;    &#34;windspeedMiles&#34;: &#34;4&#34;&#xA;&#x9;&#x9;}&#xA;&#x9;],&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most of these values are self-explanatory, aside from &lt;code&gt;weatherCode&lt;/code&gt;. The &lt;code&gt;weatherCode&lt;/code&gt; is an enumeration which you can find at either &lt;a href=&#34;https://www.worldweatheronline.com/developer/api/docs/weather-icons.aspx&#34;&gt;the WorldWeatherOnline website&lt;/a&gt; or &lt;a href=&#34;https://github.com/chubin/wttr.in/raw/master/lib/constants.py&#34;&gt;in the wttr.in source code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prometheus Metrics Output&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/prometheus/prometheus&#34;&gt;Prometheus&lt;/a&gt; Metrics format is a feature providing access to &lt;em&gt;wttr.in&lt;/em&gt; data through an easy-to-parse format for monitoring systems, without requiring the user to create a complex script to reinterpret wttr.in&#39;s graphical output.&lt;/p&gt; &#xA;&lt;p&gt;To fetch information in Prometheus format, use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Detroit?format=p1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fetch information on the Detroit region in Prometheus Metrics format. The &lt;code&gt;p1&lt;/code&gt; format code is used to allow for the use of other layouts for the Prometheus Metrics output.&lt;/p&gt; &#xA;&lt;p&gt;A possible configuration for Prometheus could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;    - job_name: &#39;wttr_in_detroit&#39;&#xA;        static_configs:&#xA;            - targets: [&#39;wttr.in&#39;]&#xA;        metrics_path: &#39;/Detroit&#39;&#xA;        params:&#xA;            format: [&#39;p1&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result will look something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# HELP temperature_feels_like_celsius Feels Like Temperature in Celsius&#xA;temperature_feels_like_celsius{forecast=&#34;current&#34;} 7&#xA;# HELP temperature_feels_like_fahrenheit Feels Like Temperature in Fahrenheit&#xA;temperature_feels_like_fahrenheit{forecast=&#34;current&#34;} 45&#xA;[truncated]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...&lt;/p&gt; &#xA;&lt;h2&gt;Moon phases&lt;/h2&gt; &#xA;&lt;p&gt;wttr.in can also be used to check the phase of the Moon. This example shows how to see the current Moon phase in the full-output mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Moon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get the moon phase for a particular date by adding &lt;code&gt;@YYYY-MM-DD&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Moon@2016-12-25&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The moon phase information uses &lt;a href=&#34;https://github.com/chubin/pyphoon&#34;&gt;pyphoon&lt;/a&gt; as its backend.&lt;/p&gt; &#xA;&lt;p&gt;To get the moon phase information in the online mode, use &lt;code&gt;%m&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/London?format=%m&#xA;🌖&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that the Unicode representation of moon phases suffers 2 caveats:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;With some fonts, the representation &lt;code&gt;🌘&lt;/code&gt; is ambiguous, for it either seem almost-shadowed or almost-lit, depending on whether your terminal is in light mode or dark mode. Relying on colored fonts like &lt;code&gt;noto-fonts&lt;/code&gt; works around this problem.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The representation &lt;code&gt;🌘&lt;/code&gt; is also ambiguous, for it means &#34;last quarter&#34; in northern hemisphere, but &#34;first quarter&#34; in souther hemisphere. It also means nothing in tropical zones. This is a limitation that &lt;a href=&#34;https://www.unicode.org/L2/L2017/17304-moon-var.pdf&#34;&gt;Unicode&lt;/a&gt; is aware about. But it has not been worked around at &lt;code&gt;wttr.in&lt;/code&gt; yet.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See #247, #364 for the corresponding tracking issues, and &lt;a href=&#34;https://github.com/chubin/pyphoon/issues/1&#34;&gt;pyphoon#1&lt;/a&gt; for pyphoon. Any help is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Internationalization and localization&lt;/h2&gt; &#xA;&lt;p&gt;wttr.in supports multilingual locations names that can be specified in any language in the world (it may be surprising, but many locations in the world don&#39;t have an English name).&lt;/p&gt; &#xA;&lt;p&gt;The query string should be specified in Unicode (hex-encoded or not). Spaces in the query string must be replaced with &lt;code&gt;+&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/станция+Восток&#xA;Weather report: станция Восток&#xA;&#xA;               Overcast&#xA;      .--.     -65 – -47 °C&#xA;   .-(    ).   ↑ 23 km/h&#xA;  (___.__)__)  15 km&#xA;               0.0 mm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The language used for the output (except the location name) does not depend on the input language and it is either English (by default) or the preferred language of the browser (if the query was issued from a browser) that is specified in the query headers (&lt;code&gt;Accept-Language&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The language can be set explicitly when using console clients by using command-line options like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -H &#34;Accept-Language: fr&#34; wttr.in&#xA;http GET wttr.in Accept-Language:ru&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The preferred language can be forced using the &lt;code&gt;lang&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl wttr.in/Berlin?lang=de&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The third option is to choose the language using the DNS name used in the query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl de.wttr.in/Berlin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;wttr.in is currently translated into 54 languages, and the number of supported languages is constantly growing.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://wttr.in/:translation&#34;&gt;/:translation&lt;/a&gt; to learn more about the translation process, to see the list of supported languages and contributors, or to know how you can help to translate wttr.in in your language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/C7hShiDXQAES6z1.jpg&#34; alt=&#34;Queries to wttr.in in various languages&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the application:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install external dependencies&lt;/li&gt; &#xA; &lt;li&gt;Install Python dependencies used by the service&lt;/li&gt; &#xA; &lt;li&gt;Configure IP2Location (optional)&lt;/li&gt; &#xA; &lt;li&gt;Get a WorldWeatherOnline API and configure wego&lt;/li&gt; &#xA; &lt;li&gt;Configure wttr.in&lt;/li&gt; &#xA; &lt;li&gt;Configure the HTTP-frontend service&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Install external dependencies&lt;/h3&gt; &#xA;&lt;p&gt;wttr.in has the following external dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;golang&lt;/a&gt;, wego dependency&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schachmat/wego&#34;&gt;wego&lt;/a&gt;, weather client for terminal&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After you install &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;golang&lt;/a&gt;, install &lt;code&gt;wego&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/schachmat/wego@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Python dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Python requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Flask&lt;/li&gt; &#xA; &lt;li&gt;geoip2&lt;/li&gt; &#xA; &lt;li&gt;geopy&lt;/li&gt; &#xA; &lt;li&gt;requests&lt;/li&gt; &#xA; &lt;li&gt;gevent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to get weather reports as PNG files, you&#39;ll also need to install:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PIL&lt;/li&gt; &#xA; &lt;li&gt;pyte (&amp;gt;=0.6)&lt;/li&gt; &#xA; &lt;li&gt;necessary fonts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can install most of them using &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some python package use LLVM, so install it first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get install llvm-7 llvm-7-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;virtualenv&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;virtualenv -p python3 ve&#xA;ve/bin/pip3 install -r requirements.txt&#xA;ve/bin/python3 bin/srv.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you need to install the geoip2 database. You can use a free database GeoLite2 that can be downloaded from (&lt;a href=&#34;http://dev.maxmind.com/geoip/geoip2/geolite2/&#34;&gt;http://dev.maxmind.com/geoip/geoip2/geolite2/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Configure IP2Location (optional)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use the IP2location service for IP-addresses that are not covered by GeoLite2, you have to obtain a API key of that service, and after that save into the &lt;code&gt;~/.ip2location.key&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ echo &#39;YOUR_IP2LOCATION_KEY&#39; &amp;gt; ~/.ip2location.key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t have this file, the service will be silently skipped (it is not a big problem, because the MaxMind database is pretty good).&lt;/p&gt; &#xA;&lt;h3&gt;Installation with Docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install Docker&lt;/li&gt; &#xA; &lt;li&gt;Build Docker Image&lt;/li&gt; &#xA; &lt;li&gt;These files should be mounted by the user at runtime:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;/root/.wegorc&#xA;/root/.ip2location.key (optional)&#xA;/app/airports.dat&#xA;/app/GeoLite2-City.mmdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get a WorldWeatherOnline key and configure wego&lt;/h3&gt; &#xA;&lt;p&gt;To get a WorldWeatherOnline API key, you must register here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://developer.worldweatheronline.com/auth/register&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you have a WorldWeatherOnline key, you can save it into the WWO key file: &lt;code&gt;~/.wwo.key&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, you have to specify the key in the &lt;code&gt;wego&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;$ cat ~/.wegorc&#xA;{&#xA;&#x9;&#34;APIKey&#34;: &#34;00XXXXXXXXXXXXXXXXXXXXXXXXXXX&#34;,&#xA;&#x9;&#34;City&#34;: &#34;London&#34;,&#xA;&#x9;&#34;Numdays&#34;: 3,&#xA;&#x9;&#34;Imperial&#34;: false,&#xA;&#x9;&#34;Lang&#34;: &#34;en&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;City&lt;/code&gt; parameter in &lt;code&gt;~/.wegorc&lt;/code&gt; is ignored.&lt;/p&gt; &#xA;&lt;h3&gt;Configure wttr.in&lt;/h3&gt; &#xA;&lt;p&gt;Configure the following environment variables that define the path to the local &lt;code&gt;wttr.in&lt;/code&gt; installation, to the GeoLite database, and to the &lt;code&gt;wego&lt;/code&gt; installation. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export WTTR_MYDIR=&#34;/home/igor/wttr.in&#34;&#xA;export WTTR_GEOLITE=&#34;/home/igor/wttr.in/GeoLite2-City.mmdb&#34;&#xA;export WTTR_WEGO=&#34;/home/igor/go/bin/wego&#34;&#xA;export WTTR_LISTEN_HOST=&#34;0.0.0.0&#34;&#xA;export WTTR_LISTEN_PORT=&#34;8002&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configure the HTTP-frontend service&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s recommended that you also configure the web server that will be used to access the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;&#x9;listen [::]:80;&#xA;&#x9;server_name  wttr.in *.wttr.in;&#xA;&#x9;access_log  /var/log/nginx/wttr.in-access.log  main;&#xA;&#x9;error_log  /var/log/nginx/wttr.in-error.log;&#xA;&#xA;&#x9;location / {&#xA;&#x9;    proxy_pass         http://127.0.0.1:8002;&#xA;&#xA;&#x9;    proxy_set_header   Host             $host;&#xA;&#x9;    proxy_set_header   X-Real-IP        $remote_addr;&#xA;&#x9;    proxy_set_header   X-Forwarded-For  $remote_addr;&#xA;&#xA;&#x9;    client_max_body_size       10m;&#xA;&#x9;    client_body_buffer_size    128k;&#xA;&#xA;&#x9;    proxy_connect_timeout      90;&#xA;&#x9;    proxy_send_timeout         90;&#xA;&#x9;    proxy_read_timeout         90;&#xA;&#xA;&#x9;    proxy_buffer_size          4k;&#xA;&#x9;    proxy_buffers              4 32k;&#xA;&#x9;    proxy_busy_buffers_size    64k;&#xA;&#x9;    proxy_temp_file_write_size 64k;&#xA;&#xA;&#x9;    expires                    off;&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;wttr.in usage stats&lt;/h2&gt; &#xA;&lt;p&gt;As of the end of June 2025, &lt;em&gt;wttr.in&lt;/em&gt; handles 20-25 million queries per day from 150,000 to 175,000 users, according to the access logs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chubin/wttr.in/master/share/stats/stats.png&#34; alt=&#34;wttr.in usage stats&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>