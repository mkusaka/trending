<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-11T01:34:52Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>enarjord/passivbot</title>
    <updated>2025-01-11T01:34:52Z</updated>
    <id>tag:github.com,2025-01-11:/enarjord/passivbot</id>
    <link href="https://github.com/enarjord/passivbot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Trading bot running on Bybit, Bitget, OKX, GateIO, Binance and Hyperliquid&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/enarjord/passivbot/master/docs/images/pbot_logo_full.svg?sanitize=true&#34; alt=&#34;Passivbot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Trading bot running on Bybit, OKX, Bitget, GateIO, Binance and Hyperliquid&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Used at one&#39;s own risk&lt;/strong&gt; &lt;span&gt;⚠&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;v7.2.12&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Passivbot is a cryptocurrency trading bot written in Python and Rust, intended to require minimal user intervention.&lt;/p&gt; &#xA;&lt;p&gt;It operates on perpetual futures derivatives markets, automatically creating and cancelling limit buy and sell orders on behalf of the user. It does not try to predict future price movements, it does not use technical indicators, nor does it follow trends. Rather, it is a contrarian market maker, providing resistance to price changes in both directions, thereby &#34;serving the market&#34; as a price stabilizer.&lt;/p&gt; &#xA;&lt;p&gt;Passivbot&#39;s behavior may be backtested on historical price data, using the included backtester whose CPU heavy functions are written in Rust for speed. Also included is an optimizer, which finds better configurations by iterating thousands of backtests with different candidates, converging on the optimal ones with an evolutionary algorithm.&lt;/p&gt; &#xA;&lt;h2&gt;Strategy&lt;/h2&gt; &#xA;&lt;p&gt;Inspired by the Martingale betting strategy, the robot will make a small initial entry and double down on its losing positions multiple times to bring the average entry price closer to current price action. The orders are placed in a grid, ready to absorb sudden price movements. After each re-entry, the robot quickly updates its closing orders at a set take-profit markup. This way, if there is even a minor market reversal, or &#34;bounce&#34;, the position can be closed in profit, and it starts over.&lt;/p&gt; &#xA;&lt;h3&gt;Trailing Orders&lt;/h3&gt; &#xA;&lt;p&gt;In addition to grid-based entries and closes, Passivbot may be configured to utilize trailing entries and trailing closes.&lt;/p&gt; &#xA;&lt;p&gt;For trailing entries, the bot waits for the price to move beyond a specified threshold and then retrace by a defined percentage before placing a re-entry order. Similarly, for trailing closes, the bot waits before placing its closing orders until after the price has moved favorably by a threshold percentage and then retraced by a specified percentage. This may result in the bot locking in profits more effectively by exiting positions when the market shows signs of reversing instead of at a fixed distance from average entry price.&lt;/p&gt; &#xA;&lt;p&gt;Grid and trailing orders may be combined, such that the robot enters or closes a whole or a part of the position as grid orders and/or as trailing orders.&lt;/p&gt; &#xA;&lt;h3&gt;Forager&lt;/h3&gt; &#xA;&lt;p&gt;The Forager feature dynamically chooses the most volatile markets on which to open positions. Volatility is defined as the mean of the normalized relative range for the most recent 1m candles, i.e. &lt;code&gt;mean((ohlcv.high - ohlcv.low) / ohlcv.close)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Unstucking Mechanism&lt;/h3&gt; &#xA;&lt;p&gt;Passivbot manages underperforming, or &#34;stuck&#34;, positions by realizing small losses over time. If multiple positions are stuck, the bot prioritizes positions with the smallest gap between the entry price and current market price for &#34;unstucking&#34;. Losses are limited by ensuring that the account balance does not fall under a set percentage below the past peak balance.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Passivbot and its dependencies, follow the steps below.&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: Clone the Repository&lt;/h3&gt; &#xA;&lt;p&gt;First, clone the Passivbot repository to the local machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/enarjord/passivbot.git&#xA;cd passivbot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: Install Rust&lt;/h3&gt; &#xA;&lt;p&gt;Passivbot uses Rust for some of its components. Install Rust by following these steps:&lt;/p&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://www.rust-lang.org/tools/install&#34;&gt;https://www.rust-lang.org/tools/install&lt;/a&gt; Follow the instructions to install Rustup, the Rust installer and version management tool. After installation, restart the terminal or command prompt.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: Create and Activate a Virtual Environment&lt;/h3&gt; &#xA;&lt;p&gt;Create a virtual environment to manage dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 -m venv venv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Activate the virtual environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source venv/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4: Install Python Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install all the required Python dependencies listed in the &lt;code&gt;requirements.txt&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 5 (optional): Build Rust Extensions&lt;/h3&gt; &#xA;&lt;p&gt;Passivbot will attempt to build the necessary Rust extensions automatically, but they can also be built manually by navigating to the &lt;code&gt;passivbot-rust&lt;/code&gt; directory and using &lt;code&gt;maturin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd passivbot-rust&#xA;maturin develop --release&#xA;cd ..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If changes in the Rust source are detected, recompilation is needed, which Passivbot will attempt to do automatically when starting. To manually recompile, use the commands given above.&lt;/p&gt; &#xA;&lt;h3&gt;Step 6: Add API keys&lt;/h3&gt; &#xA;&lt;p&gt;Make a copy of the api-keys template file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp api-keys.json.example api-keys.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your keys to api-keys.json.&lt;/p&gt; &#xA;&lt;h3&gt;Step 7: Run Passivbot&lt;/h3&gt; &#xA;&lt;p&gt;To start the bot with the default settings, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 src/main.py -u {account_name_from_api-keys.json}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or make a new configuration file, using &lt;code&gt;configs/template.json&lt;/code&gt; as a template, and start the bot with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 src/main.py path/to/config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Jupyter Lab&lt;/h2&gt; &#xA;&lt;p&gt;Jupyter lab needs to be run in the same virtual environment as the bot. Activate venv (see installation instructions above, step 3), and launch Jupyter lab from the Passivbot root dir with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python3 -m jupyter lab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python &amp;gt;= 3.8&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/enarjord/passivbot/master/requirements.txt&#34;&gt;requirements.txt&lt;/a&gt; dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pre-optimized configurations&lt;/h2&gt; &#xA;&lt;p&gt;Coming soon...&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://pbconfigdb.scud.dedyn.io/&#34;&gt;https://pbconfigdb.scud.dedyn.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation:&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed information about Passivbot, see documentation files here: &lt;a href=&#34;https://raw.githubusercontent.com/enarjord/passivbot/master/docs/&#34;&gt;docs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/QAF2H2UmzZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-7289DA?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/passivbot_futures&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Links, Referrals and Tip Jar&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Passivbot Manager Service:&lt;/strong&gt;&lt;br&gt; There is a paid manager service to run Passivbot on the user&#39;s behalf:&lt;br&gt; &lt;a href=&#34;http://www.passivbotmanager.com&#34;&gt;www.passivbotmanager.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Referrals:&lt;/strong&gt;&lt;br&gt; Signing up using these referrals is appreciated:&lt;br&gt; &lt;a href=&#34;https://accounts.binance.com/register?ref=TII4B07C&#34;&gt;https://accounts.binance.com/register?ref=TII4B07C&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://partner.bybit.com/b/passivbot&#34;&gt;https://partner.bybit.com/b/passivbot&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://partner.bitget.com/bg/Y8FU1W&#34;&gt;https://partner.bitget.com/bg/Y8FU1W&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.okx.com/join/PASSIVBOT&#34;&gt;https://www.okx.com/join/PASSIVBOT&lt;/a&gt; (20% rebate)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note on Binance&lt;/strong&gt;&lt;br&gt; To support continued Passivbot development, please use a Binance account which&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;was created after 2024-09-21 and&lt;/li&gt; &#xA; &lt;li&gt;either:&lt;br&gt; a) was created without a referral link, or&lt;br&gt; b) was created with referral ID: &#34;TII4B07C&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Passivbot receives commissions from trades only for accounts meeting these criteria.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BuyMeACoffee:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://www.buymeacoffee.com/enarjord&#34;&gt;https://www.buymeacoffee.com/enarjord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Donations:&lt;/strong&gt;&lt;br&gt; If the robot is profitable, consider donating as showing gratitude for its development:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;USDT or USDC Binance Smart Chain BEP20:&lt;br&gt; 0x4b7b5bf6bea228052b775c052843fde1c63ec530&lt;/li&gt; &#xA; &lt;li&gt;USDT or USDC Arbitrum One:&lt;br&gt; 0x4b7b5bf6bea228052b775c052843fde1c63ec530&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Bitcoin (BTC) via Strike:&lt;br&gt; &lt;a href=&#34;mailto:enarjord@strike.me&#34;&gt;enarjord@strike.me&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released freely without conditions. Anybody may copy, distribute, modify, use or misuse for commercial, non-commercial, educational or non-educational purposes, censor, claim as one&#39;s own or otherwise do whatever without permission from anybody.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apple/ml-depth-pro</title>
    <updated>2025-01-11T01:34:52Z</updated>
    <id>tag:github.com,2025-01-11:/apple/ml-depth-pro</id>
    <link href="https://github.com/apple/ml-depth-pro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Depth Pro: Sharp Monocular Metric Depth in Less Than a Second.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Depth Pro: Sharp Monocular Metric Depth in Less Than a Second&lt;/h2&gt; &#xA;&lt;p&gt;This software project accompanies the research paper: &lt;strong&gt;&lt;a href=&#34;https://arxiv.org/abs/2410.02073&#34;&gt;Depth Pro: Sharp Monocular Metric Depth in Less Than a Second&lt;/a&gt;&lt;/strong&gt;, &lt;em&gt;Aleksei Bochkovskii, Amaël Delaunoy, Hugo Germain, Marcel Santos, Yichao Zhou, Stephan R. Richter, and Vladlen Koltun&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apple/ml-depth-pro/main/data/depth-pro-teaser.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We present a foundation model for zero-shot metric monocular depth estimation. Our model, Depth Pro, synthesizes high-resolution depth maps with unparalleled sharpness and high-frequency details. The predictions are metric, with absolute scale, without relying on the availability of metadata such as camera intrinsics. And the model is fast, producing a 2.25-megapixel depth map in 0.3 seconds on a standard GPU. These characteristics are enabled by a number of technical contributions, including an efficient multi-scale vision transformer for dense prediction, a training protocol that combines real and synthetic datasets to achieve high metric accuracy alongside fine boundary tracing, dedicated evaluation metrics for boundary accuracy in estimated depth maps, and state-of-the-art focal length estimation from a single image.&lt;/p&gt; &#xA;&lt;p&gt;The model in this repository is a reference implementation, which has been re-trained. Its performance is close to the model reported in the paper but does not match it exactly.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We recommend setting up a virtual environment. Using e.g. miniconda, the &lt;code&gt;depth_pro&lt;/code&gt; package can be installed via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create -n depth-pro -y python=3.9&#xA;conda activate depth-pro&#xA;&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download pretrained checkpoints follow the code snippet below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source get_pretrained_models.sh   # Files will be downloaded to `checkpoints` directory.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running from commandline&lt;/h3&gt; &#xA;&lt;p&gt;We provide a helper script to directly run the model on a single image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run prediction on a single image:&#xA;depth-pro-run -i ./data/example.jpg&#xA;# Run `depth-pro-run -h` for available options.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running from python&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from PIL import Image&#xA;import depth_pro&#xA;&#xA;# Load model and preprocessing transform&#xA;model, transform = depth_pro.create_model_and_transforms()&#xA;model.eval()&#xA;&#xA;# Load and preprocess an image.&#xA;image, _, f_px = depth_pro.load_rgb(image_path)&#xA;image = transform(image)&#xA;&#xA;# Run inference.&#xA;prediction = model.infer(image, f_px=f_px)&#xA;depth = prediction[&#34;depth&#34;]  # Depth in [m].&#xA;focallength_px = prediction[&#34;focallength_px&#34;]  # Focal length in pixels.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Evaluation (boundary metrics)&lt;/h3&gt; &#xA;&lt;p&gt;Our boundary metrics can be found under &lt;code&gt;eval/boundary_metrics.py&lt;/code&gt; and used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# for a depth-based dataset&#xA;boundary_f1 = SI_boundary_F1(predicted_depth, target_depth)&#xA;&#xA;# for a mask-based dataset (image matting / segmentation) &#xA;boundary_recall = SI_boundary_Recall(predicted_depth, target_mask)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our work useful, please cite the following paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{Bochkovskii2024:arxiv,&#xA;  author     = {Aleksei Bochkovskii and Ama\&#34;{e}l Delaunoy and Hugo Germain and Marcel Santos and&#xA;               Yichao Zhou and Stephan R. Richter and Vladlen Koltun}&#xA;  title      = {Depth Pro: Sharp Monocular Metric Depth in Less Than a Second},&#xA;  journal    = {arXiv},&#xA;  year       = {2024},&#xA;  url        = {https://arxiv.org/abs/2410.02073},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This sample code is released under the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-depth-pro/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; terms.&lt;/p&gt; &#xA;&lt;p&gt;The model weights are released under the &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-depth-pro/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; terms.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Our codebase is built using multiple opensource contributions, please see &lt;a href=&#34;https://raw.githubusercontent.com/apple/ml-depth-pro/main/ACKNOWLEDGEMENTS.md&#34;&gt;Acknowledgements&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Please check the paper for a complete list of references and datasets used in this work.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PriorLabs/TabPFN</title>
    <updated>2025-01-11T01:34:52Z</updated>
    <id>tag:github.com,2025-01-11:/PriorLabs/TabPFN</id>
    <link href="https://github.com/PriorLabs/TabPFN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ TabPFN: Foundation Model for Tabular Data ⚡&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TabPFN&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/py/tabpfn&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/tabpfn.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/tabpfn&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/tabpfn&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/channels/1285598202732482621/&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1285598202732482621?color=7289da&amp;amp;label=Discord&amp;amp;logo=discord&amp;amp;logoColor=ffffff&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://priorlabs.ai/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-priorlabs.ai-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tinyurl.com/tabpfn-colab-local&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;colab&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;TabPFN is a foundation model for tabular data that outperforms traditional methods while being dramatically faster. This repository contains the core PyTorch implementation with CUDA optimization.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Major Update: Version 2.0:&lt;/strong&gt; Complete codebase overhaul with new architecture and features. Previous version available at &lt;a href=&#34;https://raw.githubusercontent.com/PriorLabs/tree/v1.0.0&#34;&gt;v1.0.0&lt;/a&gt; and &lt;code&gt;pip install tabpfn&amp;lt;2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;📚 For detailed usage examples and best practices, check out &lt;a href=&#34;https://tinyurl.com/tabpfn-colab-local&#34;&gt;Interactive Colab Tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🌐 TabPFN Ecosystem&lt;/h2&gt; &#xA;&lt;p&gt;Choose the right TabPFN implementation for your needs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/automl/tabpfn-client&#34;&gt;TabPFN Client&lt;/a&gt;&lt;/strong&gt;: Easy-to-use API client for cloud-based inference&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/priorlabs/tabpfn-extensions&#34;&gt;TabPFN Extensions&lt;/a&gt;&lt;/strong&gt;: Community extensions and integrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TabPFN (this repo)&lt;/strong&gt;: Core implementation for local deployment and research&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Try our &lt;a href=&#34;https://colab.research.google.com/drive/1SHa43VuHASLjevzO7y3-wPCxHY18-2H6?usp=sharing&#34;&gt;Interactive Colab Tutorial&lt;/a&gt; to get started quickly.&lt;/p&gt; &#xA;&lt;h2&gt;🏁 Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Simple installation&#xA;pip install tabpfn&#xA;&#xA;# Local development installation&#xA;git clone https://github.com/PriorLabs/TabPFN.git&#xA;pip install -e &#34;tabpfn[dev]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.datasets import load_breast_cancer&#xA;from sklearn.metrics import accuracy_score, roc_auc_score&#xA;from sklearn.model_selection import train_test_split&#xA;&#xA;from tabpfn import TabPFNClassifier&#xA;&#xA;# Load data&#xA;X, y = load_breast_cancer(return_X_y=True)&#xA;X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)&#xA;&#xA;# Initialize a classifier&#xA;clf = TabPFNClassifier()&#xA;clf.fit(X_train, y_train)&#xA;&#xA;# Predict probabilities&#xA;prediction_probabilities = clf.predict_proba(X_test)&#xA;print(&#34;ROC AUC:&#34;, roc_auc_score(y_test, prediction_probabilities[:, 1]))&#xA;&#xA;# Predict labels&#xA;predictions = clf.predict(X_test)&#xA;print(&#34;Accuracy&#34;, accuracy_score(y_test, predictions))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Best Results&lt;/h3&gt; &#xA;&lt;p&gt;For optimal performance, use the &lt;code&gt;AutoTabPFNClassifier&lt;/code&gt; or &lt;code&gt;AutoTabPFNRegressor&lt;/code&gt; for post-hoc ensembling. These can be found in the &lt;a href=&#34;https://github.com/PriorLabs/tabpfn-extensions&#34;&gt;TabPFN Extensions&lt;/a&gt; repository. Post-hoc ensembling combines multiple TabPFN models into an ensemble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Steps for Best Results:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the extensions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/priorlabs/tabpfn-extensions.git&#xA;pip install -e tabpfn-extensions&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from tabpfn_extensions import AutoTabPFNClassifier&#xA;&#xA;clf = AutoTabPFNClassifier(max_time=120) # 120 seconds tuning time&#xA;clf.fit(X_train, y_train)&#xA;predictions = clf.predict(X_test)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://colab.research.google.com/drive/1SHa43VuHASLjevzO7y3-wPCxHY18-2H6#scrollTo=49sMXWT5DYzj&amp;amp;line=1&amp;amp;uniqifier=1&#34;&gt;https://colab.research.google.com/drive/1SHa43VuHASLjevzO7y3-wPCxHY18-2H6#scrollTo=49sMXWT5DYzj&amp;amp;line=1&amp;amp;uniqifier=1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://priorlabs.ai/tabpfn-license/&#34;&gt;Prior Labs License (Apache 2.0 with additional attribution requirement)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📚 Citation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{hollmann2025tabpfn,&#xA; title={Accurate predictions on small data with a tabular foundation model},&#xA; author={Hollmann, Noah and M{\&#34;u}ller, Samuel and Purucker, Lennart and&#xA;         Krishnakumar, Arjun and K{\&#34;o}rfer, Max and Hoo, Shi Bin and&#xA;         Schirrmeister, Robin Tibor and Hutter, Frank},&#xA; journal={Nature},&#xA; year={2025},&#xA; month={01},&#xA; day={09},&#xA; doi={10.1038/s41586-024-08328-6},&#xA; publisher={Springer Nature},&#xA; url={https://www.nature.com/articles/s41586-024-08328-6},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤝 Join Our Community&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re building the future of tabular machine learning and would love your involvement:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect &amp;amp; Learn&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Join our &lt;a href=&#34;https://discord.gg/VJRuU3bSxt&#34;&gt;Discord Community&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Read our &lt;a href=&#34;https://priorlabs.ai/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Check out &lt;a href=&#34;https://github.com/priorlabs/tabpfn/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Contribute&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Report bugs or request features&lt;/li&gt; &#xA;   &lt;li&gt;Submit pull requests&lt;/li&gt; &#xA;   &lt;li&gt;Share your research and use cases&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stay Updated&lt;/strong&gt;: Star the repo and join Discord for the latest updates&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;🛠️ Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Setup environment:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m venv venv&#xA;source venv/bin/activate  # On Windows: venv\Scripts\activate&#xA;git clone https://github.com/PriorLabs/TabPFN.git&#xA;cd tabpfn&#xA;pip install -e &#34;.[dev]&#34;&#xA;pre-commit install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Before committing:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit run --all-files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest tests/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Built with ❤️ by &lt;a href=&#34;https://priorlabs.ai&#34;&gt;Prior Labs&lt;/a&gt; - Copyright (c) 2025 Prior Labs GmbH&lt;/p&gt;</summary>
  </entry>
</feed>