<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-09T01:33:47Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>letta-ai/letta</title>
    <updated>2024-11-09T01:33:47Z</updated>
    <id>tag:github.com,2024-11-09:/letta-ai/letta</id>
    <link href="https://github.com/letta-ai/letta" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Letta (formerly MemGPT) is a framework for creating LLM services with memory.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;assets/Letta-logo-RGB_GreyonTransparent_cropped_small.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;assets/Letta-logo-RGB_OffBlackonTransparent_cropped_small.png&#34;&gt; &#xA;  &lt;img alt=&#34;Letta logo&#34; src=&#34;https://raw.githubusercontent.com/letta-ai/letta/main/assets/Letta-logo-RGB_GreyonOffBlack_cropped_small.png&#34; width=&#34;500&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Letta (previously MemGPT)&lt;/h1&gt; &#xA; &lt;h3&gt; &lt;p&gt;&lt;a href=&#34;https://letta.com&#34;&gt;Homepage&lt;/a&gt; // &lt;a href=&#34;https://docs.letta.com&#34;&gt;Documentation&lt;/a&gt; // &lt;a href=&#34;https://forms.letta.com/early-access&#34;&gt;Letta Cloud&lt;/a&gt;&lt;/p&gt; &lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;üëæ Letta&lt;/strong&gt; is an open source framework for building stateful LLM applications. You can use Letta to build &lt;strong&gt;stateful agents&lt;/strong&gt; with advanced reasoning capabilities and transparent long-term memory. The Letta framework is white box and model-agnostic.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/letta&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1161736243340640419?label=Discord&amp;amp;logo=discord&amp;amp;logoColor=5865F2&amp;amp;style=flat-square&amp;amp;color=5865F2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/Letta_AI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-%40Letta__AI-1DA1F2?style=flat-square&amp;amp;logo=x&amp;amp;logoColor=white&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2310.08560&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Research-2310.08560-B31B1B?logo=arxiv&amp;amp;style=flat-square&#34; alt=&#34;arxiv 2310.08560&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/letta-ai/letta/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-silver?style=flat-square&#34; alt=&#34;Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cpacker/MemGPT/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/cpacker/MemGPT?style=flat-square&amp;amp;label=Release&amp;amp;color=limegreen&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cpacker/MemGPT&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/cpacker/MemGPT?style=flat-square&amp;amp;logo=github&amp;amp;label=Stars&amp;amp;color=gold&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://trendshift.io/repositories/3612&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://trendshift.io/api/badge/repositories/3612&#34; alt=&#34;cpacker%2FMemGPT | Trendshift&#34; style=&#34;width: 250px; height: 55px;&#34; width=&#34;250&#34; height=&#34;55&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;strong&gt;Looking for MemGPT?&lt;/strong&gt; You&#39;re in the right place!&lt;/p&gt; &#xA; &lt;p&gt;The MemGPT package and Docker image have been renamed to &lt;code&gt;letta&lt;/code&gt; to clarify the distinction between MemGPT agents and the API server / runtime that runs LLM agents as &lt;em&gt;services&lt;/em&gt;.&lt;/p&gt; &#xA; &lt;p&gt;You use the &lt;strong&gt;Letta &lt;em&gt;framework&lt;/em&gt;&lt;/strong&gt; to create &lt;strong&gt;MemGPT &lt;em&gt;agents&lt;/em&gt;&lt;/strong&gt;. Read more about the relationship between MemGPT and Letta &lt;a href=&#34;https://www.letta.com/blog/memgpt-and-letta&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ö° Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The two main ways to install Letta are through &lt;strong&gt;pypi&lt;/strong&gt; (&lt;code&gt;pip&lt;/code&gt;) or via &lt;strong&gt;Docker&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/strong&gt; (guide below) - the easiest way to try Letta, will default to using SQLite and ChromaDB for the database backends&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt; (guide &lt;a href=&#34;https://docs.letta.com/install#run-letta-with-docker&#34;&gt;here&lt;/a&gt;) - recommended for production settings, will default to using Postgres (+ pgvector) for the database backend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Step 1 - Install Letta using &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ pip install -U letta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2 - Set your environment variables for your chosen LLM / embedding providers&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export OPENAI_API_KEY=sk-...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Ollama (see our full &lt;a href=&#34;https://docs.letta.com/install&#34;&gt;documentation&lt;/a&gt; for examples of how to set up various providers):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ export OLLAMA_BASE_URL=http://localhost:11434&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 3 - Run the Letta CLI&lt;/h3&gt; &#xA;&lt;p&gt;You can create agents and chat with them via the Letta CLI tool (&lt;code&gt;letta run&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ letta run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;üß¨ Creating new agent...&#xA;? Select LLM model: letta-free [type=openai] [ip=https://inference.memgpt.ai]&#xA;? Select embedding model: letta-free [type=hugging-face] [ip=https://embeddings.memgpt.ai]&#xA;-&amp;gt;  ü§ñ Using persona profile: &#39;sam_pov&#39;&#xA;-&amp;gt;  üßë Using human profile: &#39;basic&#39;&#xA;-&amp;gt;  üõ†Ô∏è  8 tools: send_message, pause_heartbeats, conversation_search, conversation_search_date, archival_memory_insert, archival_memory_search, core_memory_append, core_memory_replace&#xA;&#xA;üéâ Created new agent &#39;InspiringSpinach&#39;&#xA;&#xA;Hit enter to begin (will request first Letta message)&#xA;&#xA;üí≠ User engaged. Recognize as Chad. Acknowledge presence and establish connection. Explore interests and engage in meaningful discourse.&#xA;ü§ñ Hello, Chad. It&#39;s nice to meet you. I am keen on learning and exploring new ideas and concepts. Is there a specific topic you&#39;d like to discuss today?&#xA;&#xA;&amp;gt; Enter your message: my name is Brad, not Chad...&#xA;&#xA;üí≠ A discrepancy in identity. Reflect this change in core memory. Apologize for the oversight, and rectify the error.&#xA;‚ö°üß† [function] updating memory with core_memory_replace&#xA;         First name: Chad&#xA;        ‚Üí First name: Brad&#xA;üí≠ Apologize for the mistake in recognizing his name, and begin the conversation anew, addressing him by the correct name this time.&#xA;ü§ñ I apologize for the oversight, Brad. Let&#39;s restart. It&#39;s a pleasure to meet you, Brad. Is there a specific topic you&#39;d like to discuss today?&#xA;&#xA;&amp;gt; Enter your message:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4 - Run the Letta server&lt;/h3&gt; &#xA;&lt;p&gt;You can start the Letta API server with &lt;code&gt;letta server&lt;/code&gt; (see the full API reference &lt;a href=&#34;https://docs.letta.com/api-reference&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ letta server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Initializing database...&#xA;Running: uvicorn server:app --host localhost --port 8283&#xA;INFO:     Started server process [47750]&#xA;INFO:     Waiting for application startup.&#xA;INFO:     Application startup complete.&#xA;INFO:     Uvicorn running on http://localhost:8283 (Press CTRL+C to quit)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you start the Letta API server, the ADE (Agent Development Environment) will be available on &lt;code&gt;http://localhost:8283&lt;/code&gt;: &lt;img alt=&#34;Screenshot of the Letta ADE (Agent Development Environment)&#34; src=&#34;https://raw.githubusercontent.com/letta-ai/letta/main/assets/letta_ade_screenshot.png&#34; width=&#34;1600&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In Letta, all agents are stored/persisted in the same database, so the agents you create in the CLI are accessible via the API and ADE, and vice versa. Check out the &lt;a href=&#34;https://docs.letta.com/quickstart&#34;&gt;quickstart guide on our docs&lt;/a&gt; for a tutorial where you create an agent in the Letta CLI and message the same agent via the Letta API.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ó How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;Letta is an open source project built by over a hundred contributors. There are many ways to get involved in the Letta OSS project!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Contribute to the project&lt;/strong&gt;: Interested in contributing? Start by reading our &lt;a href=&#34;https://github.com/cpacker/MemGPT/tree/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ask a question&lt;/strong&gt;: Join our community on &lt;a href=&#34;https://discord.gg/letta&#34;&gt;Discord&lt;/a&gt; and direct your questions to the &lt;code&gt;#support&lt;/code&gt; channel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Report ssues or suggest features&lt;/strong&gt;: Have an issue or a feature request? Please submit them through our &lt;a href=&#34;https://github.com/cpacker/MemGPT/issues&#34;&gt;GitHub Issues page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Explore the roadmap&lt;/strong&gt;: Curious about future developments? View and comment on our &lt;a href=&#34;https://github.com/cpacker/MemGPT/issues/1533&#34;&gt;project roadmap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Join community events&lt;/strong&gt;: Stay updated with the &lt;a href=&#34;https://lu.ma/berkeley-llm-meetup&#34;&gt;event calendar&lt;/a&gt; or follow our &lt;a href=&#34;https://twitter.com/Letta_AI&#34;&gt;Twitter account&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Legal notices&lt;/strong&gt;: By using Letta and related Letta services (such as the Letta endpoint or hosted service), you are agreeing to our &lt;a href=&#34;https://www.letta.com/privacy-policy&#34;&gt;privacy policy&lt;/a&gt; and &lt;a href=&#34;https://www.letta.com/terms-of-service&#34;&gt;terms of service&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>NVIDIA/TransformerEngine</title>
    <updated>2024-11-09T01:33:47Z</updated>
    <id>tag:github.com,2024-11-09:/NVIDIA/TransformerEngine</id>
    <link href="https://github.com/NVIDIA/TransformerEngine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library for accelerating Transformer models on NVIDIA GPUs, including using 8-bit floating point (FP8) precision on Hopper and Ada GPUs, to provide better performance with lower memory utilization in both training and inference.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. Copyright (c) 2022-2024, NVIDIA CORPORATION &amp;amp; AFFILIATES. All rights reserved.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;See LICENSE for license information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;|License|&lt;/p&gt; &#xA;&lt;h1&gt;Transformer Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;Quickstart &amp;lt;#examples&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Installation &amp;lt;#installation&amp;gt;&lt;/code&gt;_ | &lt;code&gt;User Guide &amp;lt;https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/index.html&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Examples &amp;lt;https://github.com/NVIDIA/TransformerEngine/tree/main/examples&amp;gt;&lt;/code&gt;_ | &lt;code&gt;FP8 Convergence &amp;lt;#fp8-convergence&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Integrations &amp;lt;#integrations&amp;gt;&lt;/code&gt;_ | &lt;code&gt;Release notes &amp;lt;https://docs.nvidia.com/deeplearning/transformer-engine/release-notes/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;Latest News&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[03/2024] &lt;code&gt;Turbocharged Training: Optimizing the Databricks Mosaic AI stack with FP8 &amp;lt;https://www.databricks.com/blog/turbocharged-training-optimizing-databricks-mosaic-ai-stack-fp8&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;[03/2024] &lt;code&gt;FP8 Training Support in SageMaker Model Parallelism Library &amp;lt;https://docs.aws.amazon.com/sagemaker/latest/dg/model-parallel-release-notes.html&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;[12/2023] &lt;code&gt;New NVIDIA NeMo Framework Features and NVIDIA H200 &amp;lt;https://developer.nvidia.com/blog/new-nvidia-nemo-framework-features-and-nvidia-h200-supercharge-llm-training-performance-and-versatility/&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. image:: docs/examples/H200-NeMo-performance.png :width: 600 :alt: H200&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[11/2023] &lt;code&gt;Inflection-2: The Next Step Up &amp;lt;https://inflection.ai/inflection-2&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;[11/2023] &lt;code&gt;Unleashing The Power Of Transformers With NVIDIA Transformer Engine &amp;lt;https://lambdalabs.com/blog/unleashing-the-power-of-transformers-with-nvidia-transformer-engine&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;[11/2023] &lt;code&gt;Accelerating PyTorch Training Workloads with FP8 &amp;lt;https://towardsdatascience.com/accelerating-pytorch-training-workloads-with-fp8-5a5123aec7d7&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;[09/2023] &lt;code&gt;Transformer Engine added to AWS DL Container for PyTorch Training &amp;lt;https://github.com/aws/deep-learning-containers/pull/3315&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;[06/2023] &lt;code&gt;Breaking MLPerf Training Records with NVIDIA H100 GPUs &amp;lt;https://developer.nvidia.com/blog/breaking-mlperf-training-records-with-nvidia-h100-gpus/&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;[04/2023] &lt;code&gt;Benchmarking Large Language Models on NVIDIA H100 GPUs with CoreWeave (Part 1) &amp;lt;https://www.mosaicml.com/blog/coreweave-nvidia-h100-part-1&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What is Transformer Engine?&lt;/h1&gt; &#xA;&lt;p&gt;.. overview-begin-marker-do-not-remove&lt;/p&gt; &#xA;&lt;p&gt;Transformer Engine (TE) is a library for accelerating Transformer models on NVIDIA GPUs, including using 8-bit floating point (FP8) precision on Hopper GPUs, to provide better performance with lower memory utilization in both training and inference. TE provides a collection of highly optimized building blocks for popular Transformer architectures and an automatic mixed precision-like API that can be used seamlessly with your framework-specific code. TE also includes a framework agnostic C++ API that can be integrated with other deep learning libraries to enable FP8 support for Transformers.&lt;/p&gt; &#xA;&lt;p&gt;As the number of parameters in Transformer models continues to grow, training and inference for architectures such as BERT, GPT and T5 become very memory and compute-intensive. Most deep learning frameworks train with FP32 by default. This is not essential, however, to achieve full accuracy for many deep learning models. Using mixed-precision training, which combines single-precision (FP32) with lower precision (e.g. FP16) format when training a model, results in significant speedups with minimal differences in accuracy as compared to FP32 training. With Hopper GPU architecture FP8 precision was introduced, which offers improved performance over FP16 with no degradation in accuracy. Although all major deep learning frameworks support FP16, FP8 support is not available natively in frameworks today.&lt;/p&gt; &#xA;&lt;p&gt;TE addresses the problem of FP8 support by providing APIs that integrate with popular Large Language Model (LLM) libraries. It provides a Python API consisting of modules to easily build a Transformer layer as well as a framework-agnostic library in C++ including structs and kernels needed for FP8 support. Modules provided by TE internally maintain scaling factors and other values needed for FP8 training, greatly simplifying mixed precision training for users.&lt;/p&gt; &#xA;&lt;h1&gt;Highlights&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy-to-use modules for building Transformer layers with FP8 support&lt;/li&gt; &#xA; &lt;li&gt;Optimizations (e.g. fused kernels) for Transformer models&lt;/li&gt; &#xA; &lt;li&gt;Support for FP8 on NVIDIA Hopper and NVIDIA Ada GPUs&lt;/li&gt; &#xA; &lt;li&gt;Support for optimizations across all precisions (FP16, BF16) on NVIDIA Ampere GPU architecture generations and later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;PyTorch ^^^^^^^&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: python&lt;/p&gt; &#xA;&lt;p&gt;import torch import transformer_engine.pytorch as te from transformer_engine.common import recipe&lt;/p&gt; &#xA;&lt;h1&gt;Set dimensions.&lt;/h1&gt; &#xA;&lt;p&gt;in_features = 768 out_features = 3072 hidden_size = 2048&lt;/p&gt; &#xA;&lt;h1&gt;Initialize model and inputs.&lt;/h1&gt; &#xA;&lt;p&gt;model = te.Linear(in_features, out_features, bias=True) inp = torch.randn(hidden_size, in_features, device=&#34;cuda&#34;)&lt;/p&gt; &#xA;&lt;h1&gt;Create an FP8 recipe. Note: All input args are optional.&lt;/h1&gt; &#xA;&lt;p&gt;fp8_recipe = recipe.DelayedScaling(margin=0, fp8_format=recipe.Format.E4M3)&lt;/p&gt; &#xA;&lt;h1&gt;Enable autocasting for the forward pass&lt;/h1&gt; &#xA;&lt;p&gt;with te.fp8_autocast(enabled=True, fp8_recipe=fp8_recipe): out = model(inp)&lt;/p&gt; &#xA;&lt;p&gt;loss = out.sum() loss.backward()&lt;/p&gt; &#xA;&lt;p&gt;JAX ^^^&lt;/p&gt; &#xA;&lt;p&gt;Flax&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;.. code-block:: python&#xA;&#xA;  import flax&#xA;  import jax&#xA;  import jax.numpy as jnp&#xA;  import transformer_engine.jax as te&#xA;  import transformer_engine.jax.flax as te_flax&#xA;  from transformer_engine.common import recipe&#xA;&#xA;  BATCH = 32&#xA;  SEQLEN = 128&#xA;  HIDDEN = 1024&#xA;&#xA;  # Initialize RNG and inputs.&#xA;  rng = jax.random.PRNGKey(0)&#xA;  init_rng, data_rng = jax.random.split(rng)&#xA;  inp = jax.random.normal(data_rng, [BATCH, SEQLEN, HIDDEN], jnp.float32)&#xA;&#xA;  # Create an FP8 recipe. Note: All input args are optional.&#xA;  fp8_recipe = recipe.DelayedScaling(margin=0, fp8_format=recipe.Format.HYBRID)&#xA;&#xA;  # Enable autocasting for the forward pass&#xA;  with te.fp8_autocast(enabled=True, fp8_recipe=fp8_recipe):&#xA;      model = te_flax.DenseGeneral(features=HIDDEN)&#xA;&#xA;      def loss_fn(params, other_vars, inp):&#xA;        out = model.apply({&#39;params&#39;:params, **other_vars}, inp)&#xA;        return jnp.mean(out)&#xA;&#xA;      # Initialize models.&#xA;      variables = model.init(init_rng, inp)&#xA;      other_variables, params = flax.core.pop(variables, &#39;params&#39;)&#xA;&#xA;      # Construct the forward and backward function&#xA;      fwd_bwd_fn = jax.value_and_grad(loss_fn, argnums=(0, 1))&#xA;&#xA;      for _ in range(10):&#xA;        loss, (param_grads, other_grads) = fwd_bwd_fn(params, other_variables, inp)&#xA;&#xA;.. overview-end-marker-do-not-remove&#xA;&#xA;Installation&#xA;============&#xA;.. installation&#xA;&#xA;Pre-requisites&#xA;^^^^^^^^^^^^^^^^^^^^&#xA;* Linux x86_64&#xA;* CUDA 12.0+ for Hopper and CUDA 12.1+ for Ada&#xA;* NVIDIA Driver supporting CUDA 12.0 or later&#xA;* cuDNN 8.1 or later&#xA;* For fused attention, CUDA 12.1 or later, NVIDIA Driver supporting CUDA 12.1 or later, and cuDNN 8.9 or later.&#xA;&#xA;Docker&#xA;^^^^^^^^^^^^^^^^^^^^&#xA;&#xA;The quickest way to get started with Transformer Engine is by using Docker images on&#xA;`NVIDIA GPU Cloud (NGC) Catalog &amp;lt;https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pytorch&amp;gt;`_. For example to use the NGC PyTorch container interactively,&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    docker run --gpus all -it --rm nvcr.io/nvidia/pytorch:23.10-py3&#xA;&#xA;Where 23.10 is the container version. For example, 23.10 for the October 2023 release.&#xA;&#xA;pip&#xA;^^^^^^^^^^^^^^^^^^^^&#xA;To install the latest stable version of Transformer Engine,&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    pip install git+https://github.com/NVIDIA/TransformerEngine.git@stable&#xA;&#xA;This will automatically detect if any supported deep learning frameworks are installed and build Transformer Engine support for them. To explicitly specify frameworks, set the environment variable NVTE_FRAMEWORK to a comma-separated list (e.g. NVTE_FRAMEWORK=jax,pytorch,paddle).&#xA;&#xA;Alternatively, the package can be directly installed from `Transformer Engine&#39;s PyPI &amp;lt;https://pypi.org/project/transformer-engine/&amp;gt;`_, e.g.&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    pip install transformer_engine[pytorch]&#xA;&#xA;To obtain the necessary Python bindings for Transformer Engine, the frameworks needed must be explicitly specified as extra dependencies in a comma-separated list (e.g. [jax,pytorch,paddle]). Transformer Engine ships wheels for the core library as well as the PaddlePaddle extensions. Source distributions are shipped for the JAX and PyTorch extensions.&#xA;&#xA;From source&#xA;^^^^^^^^^^^&#xA;`See the installation guide &amp;lt;https://docs.nvidia.com/deeplearning/transformer-engine/user-guide/installation.html#installation-from-source&amp;gt;`_.&#xA;&#xA;Compiling with FlashAttention-2&#xA;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;Transformer Engine release v0.11.0 adds support for FlashAttention-2 in PyTorch for improved performance.&#xA;&#xA;It is a known issue that FlashAttention-2 compilation is resource-intensive and requires a large amount of RAM (see `bug &amp;lt;https://github.com/Dao-AILab/flash-attention/issues/358&amp;gt;`_), which may lead to out of memory errors during the installation of Transformer Engine. Please try setting **MAX_JOBS=1** in the environment to circumvent the issue.&#xA;&#xA;Note that NGC PyTorch 23.08+ containers include FlashAttention-2.&#xA;&#xA;Breaking Changes&#xA;================&#xA;&#xA;v1.7: Padding mask definition for PyTorch&#xA;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^&#xA;In an effort to unify the definition and usage of the attention mask across all three frameworks in Transformer Engine, the padding mask has changed from `True` meaning inclusion of the corresponding position in attention to exclusion of that position in our PyTorch implementation. Since v1.7, all attention mask types follow the same definition where `True` means masking out the corresponding position and `False` means including that position in attention calculation.&#xA;&#xA;An example of this change is,&#xA;&#xA;.. code-block:: bash&#xA;&#xA;    # for a batch of 3 sequences where `a`s, `b`s and `c`s are the useful tokens&#xA;    # and `0`s are the padding tokens,&#xA;    [a, a, a, 0, 0,&#xA;     b, b, 0, 0, 0,&#xA;     c, c, c, c, 0]&#xA;    # the padding mask for this batch before v1.7 is,&#xA;    [ True,  True,  True, False, False,&#xA;      True,  True, False, False, False,&#xA;      True,  True,  True,  True, False]&#xA;    # and for v1.7 onwards it should be,&#xA;    [False, False, False,  True,  True,&#xA;     False, False,  True,  True,  True,&#xA;     False, False, False, False,  True]&#xA;&#xA;FP8 Convergence&#xA;===============&#xA;&#xA;FP8 has been tested extensively across different model architectures and configurations and we found **no significant difference** between FP8 and BF16 training loss curves. FP8 has also been validated for accuracy on downstream LLM tasks (e.g. LAMBADA and WikiText). Below are examples of models tested for convergence across different frameworks.&#xA;&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| Model      | Framework        | Source                                                                                                  |&#xA;+============+==================+=========================================================================================================+&#xA;| T5-770M    |  JAX/T5x         | https://github.com/NVIDIA/JAX-Toolbox/tree/main/rosetta/rosetta/projects/t5x#convergence-and-performance|&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| MPT-1.3B   |  Mosaic Composer | https://www.mosaicml.com/blog/coreweave-nvidia-h100-part-1                                              |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| GPT-5B     |  JAX/Paxml       | https://github.com/NVIDIA/JAX-Toolbox/tree/main/rosetta/rosetta/projects/pax#h100-results               |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| GPT-5B     |  NeMo Framework  | Available on request                                                                                    |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| LLama2-7B  |  Alibaba Pai     | https://mp.weixin.qq.com/s/NQT0uKXLbXyh5031zBdeBQ                                                       |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| T5-11B     |  JAX/T5x         | Available on request                                                                                    |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| MPT-13B    |  Mosaic Composer | https://www.databricks.com/blog/turbocharged-training-optimizing-databricks-mosaic-ai-stack-fp8         |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| GPT-22B    |  NeMo Framework  | Available on request                                                                                    |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| LLama2-70B |  Alibaba Pai     | https://mp.weixin.qq.com/s/NQT0uKXLbXyh5031zBdeBQ                                                       |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;| GPT-175B   |  JAX/Paxml       | https://github.com/NVIDIA/JAX-Toolbox/tree/main/rosetta/rosetta/projects/pax#h100-results               |&#xA;+------------+------------------+---------------------------------------------------------------------------------------------------------+&#xA;&#xA;Integrations&#xA;============&#xA;&#xA;Transformer Engine has been integrated with popular LLM frameworks such as:&#xA;&#xA;* `DeepSpeed &amp;lt;https://github.com/microsoft/DeepSpeed/pull/3731&amp;gt;`_&#xA;* `Hugging Face Accelerate &amp;lt;https://github.com/huggingface/accelerate/releases/tag/v0.17.0&amp;gt;`_&#xA;* `Lightning &amp;lt;https://github.com/Lightning-AI/lightning/issues/17172&amp;gt;`_&#xA;* `MosaicML Composer &amp;lt;https://github.com/mosaicml/composer/releases/tag/v0.13.1&amp;gt;`_&#xA;* `NVIDIA JAX Toolbox &amp;lt;https://github.com/NVIDIA/JAX-Toolbox&amp;gt;`_&#xA;* `NVIDIA Megatron-LM &amp;lt;https://github.com/NVIDIA/Megatron-LM&amp;gt;`_&#xA;* `NVIDIA NeMo Framework &amp;lt;https://github.com/NVIDIA/NeMo-Megatron-Launcher&amp;gt;`_&#xA;* `Amazon SageMaker Model Parallel Library &amp;lt;https://docs.aws.amazon.com/sagemaker/latest/dg/model-parallel-core-features-v2-tensor-parallelism.html&amp;gt;`_&#xA;* `Levanter &amp;lt;https://github.com/stanford-crfm/levanter&amp;gt;`_&#xA;* `Hugging Face Nanotron &amp;lt;https://github.com/huggingface/nanotron&amp;gt;`_ - Coming soon!&#xA;* `Colossal-AI &amp;lt;https://github.com/hpcaitech/ColossalAI&amp;gt;`_ - Coming soon!&#xA;* `PeriFlow &amp;lt;https://github.com/friendliai/periflow-python-sdk&amp;gt;`_ - Coming soon!&#xA;* `GPT-NeoX &amp;lt;https://github.com/EleutherAI/gpt-neox&amp;gt;`_ - Coming soon!&#xA;&#xA;&#xA;Contributing&#xA;============&#xA;&#xA;We welcome contributions to Transformer Engine! To contribute to Transformer Engine and make pull requests,&#xA;follow the guidelines outlined in the `&amp;lt;CONTRIBUTING.rst&amp;gt;`_ guide.&#xA;&#xA;Papers&#xA;======&#xA;&#xA;* `Attention original paper &amp;lt;https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf&amp;gt;`_&#xA;* `Megatron-LM tensor parallel &amp;lt;https://arxiv.org/pdf/1909.08053.pdf&amp;gt;`_&#xA;* `Megatron-LM sequence parallel &amp;lt;https://arxiv.org/pdf/2205.05198.pdf&amp;gt;`_&#xA;* `FP8 Formats for Deep Learning &amp;lt;https://arxiv.org/abs/2209.05433&amp;gt;`_&#xA;&#xA;Videos&#xA;======&#xA;&#xA;* `What&#39;s New in Transformer Engine and FP8 Training | GTC 2024 &amp;lt;https://www.nvidia.com/en-us/on-demand/session/gtc24-s62457/&amp;gt;`_&#xA;* `FP8 Training with Transformer Engine | GTC 2023 &amp;lt;https://www.nvidia.com/en-us/on-demand/session/gtcspring23-s51393&amp;gt;`_&#xA;* `FP8 for Deep Learning | GTC 2023 &amp;lt;https://www.nvidia.com/en-us/on-demand/session/gtcspring23-s52166/&amp;gt;`_&#xA;* `Inside the Hopper Architecture &amp;lt;https://www.nvidia.com/en-us/on-demand/session/gtcspring22-s42663/&amp;gt;`_&#xA;&#xA;.. |License| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg&#xA;   :target: https://opensource.org/licenses/Apache-2.0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>