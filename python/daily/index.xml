<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-19T01:36:31Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>XiaoMi/ha_xiaomi_home</title>
    <updated>2024-12-19T01:36:31Z</updated>
    <id>tag:github.com,2024-12-19:/XiaoMi/ha_xiaomi_home</id>
    <link href="https://github.com/XiaoMi/ha_xiaomi_home" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Xiaomi Home Integration for Home Assistant&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Xiaomi Home Integration for Home Assistant&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/doc/README_zh.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Xiaomi Home Integration is an integrated component of Home Assistant supported by Xiaomi official. It allows you to use Xiaomi IoT smart devices in Home Assistant.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Home Assistant version requirement:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Core $\geq$ 2024.11.0&lt;/li&gt; &#xA;  &lt;li&gt;Operating System $\geq$ 13.0&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Method 1: Git clone from GitHub&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd config&#xA;git clone https://github.com/XiaoMi/ha_xiaomi_home.git&#xA;cd ha_xiaomi_home&#xA;./install.sh /config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend this installation method, for it is convenient to switch to a tag when updating &lt;code&gt;xiaomi_home&lt;/code&gt; to a certain version.&lt;/p&gt; &#xA;&lt;p&gt;For example, update to version v1.0.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd config/ha_xiaomi_home&#xA;git checkout v1.0.0&#xA;./install.sh /config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Method 2: &lt;a href=&#34;https://hacs.xyz/&#34;&gt;HACS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;HACS &amp;gt; Overflow Menu &amp;gt; Custom repositories &amp;gt; Repository: &lt;a href=&#34;https://github.com/XiaoMi/ha_xiaomi_home.git&#34;&gt;https://github.com/XiaoMi/ha_xiaomi_home.git&lt;/a&gt; &amp;amp; Category: Integration &amp;gt; ADD&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Xiaomi Home has not been added to the HACS store as a default yet. It&#39;s coming soon.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Method 3: Manually installation via &lt;a href=&#34;https://github.com/home-assistant/addons/tree/master/samba&#34;&gt;Samba&lt;/a&gt; / &lt;a href=&#34;https://github.com/hassio-addons/addon-ftp&#34;&gt;FTPS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Download and copy &lt;code&gt;custom_components/xiaomi_home&lt;/code&gt; folder to &lt;code&gt;config/custom_components&lt;/code&gt; folder in your Home Assistant.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Login&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://my.home-assistant.io/redirect/brand/?brand=xiaomi_home&#34;&gt;Settings &amp;gt; Devices &amp;amp; services &amp;gt; ADD INTEGRATION&lt;/a&gt; &amp;gt; Search &lt;code&gt;Xiaomi Home&lt;/code&gt; &amp;gt; NEXT &amp;gt; Click here to login &amp;gt; Sign in with Xiaomi account&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://my.home-assistant.io/redirect/config_flow_start/?domain=xiaomi_home&#34;&gt;&lt;img src=&#34;https://my.home-assistant.io/badges/config_flow_start.svg?sanitize=true&#34; alt=&#34;Open your Home Assistant instance and start setting up a new integration.&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add MIoT Devices&lt;/h3&gt; &#xA;&lt;p&gt;After logging in successfully, a dialog box named &#34;Select Home and Devices&#34; pops up. You can select the home containing the device that you want to import in Home Assistant.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple User Login&lt;/h3&gt; &#xA;&lt;p&gt;After a Xiaomi account login and its user configuration are completed, you can continue to add other Xiaomi accounts in the configured Xiaomi Home Integration page.&lt;/p&gt; &#xA;&lt;p&gt;Method: &lt;a href=&#34;https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home&#34;&gt;Settings &amp;gt; Devices &amp;amp; services &amp;gt; Configured &amp;gt; Xiaomi Home&lt;/a&gt; &amp;gt; ADD HUB &amp;gt; NEXT &amp;gt; Click here to login &amp;gt; Sign in with Xiaomi account&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home&#34;&gt;&lt;img src=&#34;https://my.home-assistant.io/badges/integration.svg?sanitize=true&#34; alt=&#34;Open your Home Assistant instance and show an integration.&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Update Configurations&lt;/h3&gt; &#xA;&lt;p&gt;You can change the configurations in the &#34;Configuration Options&#34; dialog box, in which you can update your user nickname and the list of the devices importing from Xiaomi Home APP, etc.&lt;/p&gt; &#xA;&lt;p&gt;Method: &lt;a href=&#34;https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home&#34;&gt;Settings &amp;gt; Devices &amp;amp; services &amp;gt; Configured &amp;gt; Xiaomi Home&lt;/a&gt; &amp;gt; CONFIGURE &amp;gt; Select the option to update&lt;/p&gt; &#xA;&lt;h3&gt;Debug Mode for Action&lt;/h3&gt; &#xA;&lt;p&gt;You can manually send Action command message with parameters to the device when the debug mode for action is activated. The user interface for sending the Action command with parameters is shown as a Text entity.&lt;/p&gt; &#xA;&lt;p&gt;Method: &lt;a href=&#34;https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home&#34;&gt;Settings &amp;gt; Devices &amp;amp; services &amp;gt; Configured &amp;gt; Xiaomi Home&lt;/a&gt; &amp;gt; CONFIGURE &amp;gt; Debug mode for action&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Xiaomi Home Integration and the affiliated cloud interface is provided by Xiaomi officially. You need to use your Xiaomi account to login to get your device list. Xiaomi Home Integration implements OAuth 2.0 login process, which does not keep your account password in the Home Assistant application. However, due to the limitation of the Home Assistant platform, the user information (including device information, certificates, tokens, etc.) of your Xiaomi account will be saved in the Home Assistant configuration file in clear text after successful login. You need to ensure that your Home Assistant configuration file is properly stored. The exposure of your configuration file may result in others logging in with your identity.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Does Xiaomi Home Integration support all Xiaomi Home devices?&lt;/p&gt; &lt;p&gt;Xiaomi Home Integration currently supports most categories of Home device. Only a few categories are not supported. They are Bluetooth device, infrared device and virtual device.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does Xiaomi Home Integration support multiple Xiaomi accounts?&lt;/p&gt; &lt;p&gt;Yes, it supports multiple Xiaomi accounts. Furthermore, Xiaomi Home Integration allows that devices belonging to different accounts can be added to a same area.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Does Xiaomi Home Integration support local control?&lt;/p&gt; &lt;p&gt;Local control is implemented by &lt;a href=&#34;https://www.mi.com/shop/buy/detail?product_id=15755&amp;amp;cfrom=search&#34;&gt;Xiaomi Central Hub Gateway&lt;/a&gt; (firmware version 3.4.0_0000 above) or Xiaomi home devices with built-in central hub gateway (software version 0.8.0 above) inside. If you do not have a Xiaomi central hub gateway or other devices having central hub gateway function, all control commands are sent through Xiaomi Cloud. The firmware for Xiaomi central hub gateway including the built-in central hub gateway supporting Home Assistant local control feature has not been released yet. Please refer to MIoT team&#39;s notification for upgrade plans.&lt;/p&gt; &lt;p&gt;Xiaomi central hub gateway is only available in mainland China. In other regions, it is not available.&lt;/p&gt; &lt;p&gt;Xiaomi Home Integration can also implement partial local control by enabling Xiaomi LAN control function. Xiaomi LAN control function can only control IP devices (devices connected to the router via WiFi or ethernet cable) in the same local area network as Home Assistant. It cannot control BLE Mesh, ZigBee, etc. devices. This function may cause some abnormalities. We recommend not to use this function. Xiaomi LAN control function is enabled by &lt;a href=&#34;https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home&#34;&gt;Settings &amp;gt; Devices &amp;amp; services &amp;gt; Configured &amp;gt; Xiaomi Home&lt;/a&gt; &amp;gt; CONFIGURE &amp;gt; Update LAN control configuration&lt;/p&gt; &lt;p&gt;Xiaomi LAN control function is not restricted by region. It is available in all regions. However, if there is a central gateway in the local area network where Home Assistant is located, even Xiaomi LAN control function is enabled in the integration, it will not take effect.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In which regions is Xiaomi Home Integration available?&lt;/p&gt; &lt;p&gt;Xiaomi Home Integration can be used in the mainland of China, Europe, India, Russia, Singapore, and USA. As user data in Xiaomi Cloud of different regions is isolated, you need to choose your region when importing MIoT devices in the configuration process. Xiaomi Home Integration allows you to import devices of different regions to a same area.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Principle of Messaging&lt;/h2&gt; &#xA;&lt;h3&gt;Control through the Cloud&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/doc/images/cloud_control.jpg&#34; width=&#34;300&#34;&gt; &#xA; &lt;p&gt;Image 1: Cloud control architecture&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Xiaomi Home Integration subscribes to the interested device messages on the MQTT Broker in MIoT Cloud. When a device property changes or a device event occurs, the device sends an upstream message to MIoT Cloud, and the MQTT Broker pushes the subscribed device message to Xiaomi Home Integration. Because Xiaomi Home Integration does not need to poll to obtain the current device property value in the cloud, it can immediately receive the notification message when the properties change or the events occur. Thanks to the message subscription mechanism, Xiaomi Home Integration only queries the properties of all devices from the cloud once when the integration configuration is completed, which puts little access pressure on the cloud.&lt;/p&gt; &#xA;&lt;p&gt;Xiaomi Home Integration sends command messages to the devices via the HTTP interface of MIoT Cloud to control devices. The device reacts and responds after receiving the downstream message sent forward by MIoT Cloud.&lt;/p&gt; &#xA;&lt;h3&gt;Control locally&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/doc/images/local_control.jpg&#34; width=&#34;300&#34;&gt; &#xA; &lt;p&gt;Image 2: Local control architecture&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Xiaomi central hub gateway contains a standard MQTT Broker, which implements a complete subscribe-publish mechanism. Xiaomi Home Integration subscribes to the interested device messages through Xiaomi central hub gateway. When a device property changes or a device event occurs, the device sends an upstream message to Xiaomi central hub gateway, and the MQTT Broker pushes the subscribed device message to Xiaomi Home Integration.&lt;/p&gt; &#xA;&lt;p&gt;When Xiaomi Home Integration needs to control a device, it publishes a device command message to the MQTT Broker, which is then forwarded to the device by Xiaomi central hub gateway. The device reacts and responds after receiving the downstream message from the gateway.&lt;/p&gt; &#xA;&lt;h2&gt;Mapping Relationship between MIoT-Spec-V2 and Home Assistant Entity&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://iot.mi.com/v2/new/doc/introduction/knowledge/spec&#34;&gt;MIoT-Spec-V2&lt;/a&gt; is the abbreviation for MIoT Specification Version 2, which is an IoT protocol formulated by Xiaomi IoT platform to give a standard functional description of IoT devices. It includes function definition (referred to as data model by other IoT platforms), interaction model, message format, and encoding.&lt;/p&gt; &#xA;&lt;p&gt;In MIoT-Spec-V2 protocol, a product is defined as a device. A device contains several services. A service may have some properties, events and actions. Xiaomi Home Integration creates Home Assistant entities according to MIoT-Spec-V2. The conversion relationship is as follows.&lt;/p&gt; &#xA;&lt;h3&gt;General Conversion&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Property&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;format&lt;/th&gt; &#xA;   &lt;th&gt;access&lt;/th&gt; &#xA;   &lt;th&gt;value-list&lt;/th&gt; &#xA;   &lt;th&gt;value-range&lt;/th&gt; &#xA;   &lt;th&gt;Entity in Home Assistant&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;writable&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;writable&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Switch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;writable&lt;/td&gt; &#xA;   &lt;td&gt;not string &amp;amp; not bool&lt;/td&gt; &#xA;   &lt;td&gt;existent&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Select&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;writable&lt;/td&gt; &#xA;   &lt;td&gt;not string &amp;amp; not bool&lt;/td&gt; &#xA;   &lt;td&gt;non-existent&lt;/td&gt; &#xA;   &lt;td&gt;existent&lt;/td&gt; &#xA;   &lt;td&gt;Number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;not writable&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Sensor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Event&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MIoT-Spec-V2 event is transformed to Event entity in Home Assistant. The event&#39;s parameters are also passed to entity&#39;s &lt;code&gt;_trigger_event&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Action&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;in&lt;/th&gt; &#xA;   &lt;th&gt;Entity in Home Assistant&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;empty&lt;/td&gt; &#xA;   &lt;td&gt;Button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;not empty&lt;/td&gt; &#xA;   &lt;td&gt;Notify&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If the debug mode for action is activated, the Text entity will be created when the &#34;in&#34; field in the action spec is not empty.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;Attribute&#34; item in the entity details page displays the format of the input parameter which is an ordered list, enclosed in square brackets []. The string elements in the list are enclosed in double quotation marks &#34;&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the &#34;Attributes&#34; item in the details page of the Notify entity converted by the &#34;Intelligent Speaker Execute Text Directive&#34; action of xiaomi.wifispeaker.s12 siid=5, aiid=5 instance shows the action params as &lt;code&gt;[Text Content(str), Silent Execution(bool)]&lt;/code&gt;. A properly formatted input is &lt;code&gt;[&#34;Hello&#34;, true]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Specific Conversion&lt;/h3&gt; &#xA;&lt;p&gt;MIoT-Spec-V2 uses URN for defining types. The format is &lt;code&gt;urn:&amp;lt;namespace&amp;gt;:&amp;lt;type&amp;gt;:&amp;lt;name&amp;gt;:&amp;lt;value&amp;gt;[:&amp;lt;vendor-product&amp;gt;:&amp;lt;version&amp;gt;]&lt;/code&gt;, in which &lt;code&gt;name&lt;/code&gt; is a human-readable word or phrase describing the instance of device, service, property, event and action. Xiaomi Home Integration first determines whether to convert the MIoT-Spec-V2 instance into a specific Home Assistant entity based on the instance&#39;s name. For the instance that does not meet the specific conversion rules, general conversion rules are used for conversion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;namespace&lt;/code&gt; is the namespace of MIoT-Spec-V2 instance. When its value is miot-spec-v2, it means that the specification is defined by Xiaomi. When its value is bluetooth-spec, it means that the specification is defined by Bluetooth Special Interest Group (SIG). When its value is not miot-spec-v2 or bluetooth-spec, it means that the specification is defined by other vendors. If MIoT-Spec-V2 &lt;code&gt;namespace&lt;/code&gt; is not miot-spec-v2, a star mark &lt;code&gt;*&lt;/code&gt; is added in front of the entity&#39;s name .&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Device&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The conversion follows &lt;code&gt;SPEC_DEVICE_TRANS_MAP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#39;&amp;lt;device instance name&amp;gt;&#39;:{&#xA;        &#39;required&#39;:{&#xA;            &#39;&amp;lt;service instance name&amp;gt;&#39;:{&#xA;                &#39;required&#39;:{&#xA;                    &#39;properties&#39;: {&#xA;                        &#39;&amp;lt;property instance name&amp;gt;&#39;: set&amp;lt;property access: str&amp;gt;&#xA;                    },&#xA;                    &#39;events&#39;: set&amp;lt;event instance name: str&amp;gt;,&#xA;                    &#39;actions&#39;: set&amp;lt;action instance name: str&amp;gt;&#xA;                },&#xA;                &#39;optional&#39;:{&#xA;                    &#39;properties&#39;: set&amp;lt;property instance name: str&amp;gt;,&#xA;                    &#39;events&#39;: set&amp;lt;event instance name: str&amp;gt;,&#xA;                    &#39;actions&#39;: set&amp;lt;action instance name: str&amp;gt;&#xA;                }&#xA;            }&#xA;        },&#xA;        &#39;optional&#39;:{&#xA;            &#39;&amp;lt;service instance name&amp;gt;&#39;:{&#xA;                &#39;required&#39;:{&#xA;                    &#39;properties&#39;: {&#xA;                        &#39;&amp;lt;property instance name&amp;gt;&#39;: set&amp;lt;property access: str&amp;gt;&#xA;                    },&#xA;                    &#39;events&#39;: set&amp;lt;event instance name: str&amp;gt;,&#xA;                    &#39;actions&#39;: set&amp;lt;action instance name: str&amp;gt;&#xA;                },&#xA;                &#39;optional&#39;:{&#xA;                    &#39;properties&#39;: set&amp;lt;property instance name: str&amp;gt;,&#xA;                    &#39;events&#39;: set&amp;lt;event instance name: str&amp;gt;,&#xA;                    &#39;actions&#39;: set&amp;lt;action instance name: str&amp;gt;&#xA;                }&#xA;            }&#xA;        },&#xA;        &#39;entity&#39;: str&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;required&#34; field under &#34;device instance name&#34; indicates the required services of the device. The &#34;optional&#34; field under &#34;device instance name&#34; indicates the optional services of the device. The &#34;entity&#34; field indicates the Home Assistant entity to be created. The &#34;required&#34; and the &#34;optional&#34; field under &#34;service instance name&#34; are required and optional properties, events and actions of the service respectively. The value of &#34;property instance name&#34; under &#34;required&#34; &#34;properties&#34; field is the access mode of the property. The condition for a successful match is that the value of &#34;property instance name&#34; is a subset of the access mode of the corresponding MIoT-Spec-V2 property instance.&lt;/p&gt; &#xA;&lt;p&gt;Home Assistant entity will not be created if MIoT-Spec-V2 device instance does not contain all required services, properties, events or actions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Service&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The conversion follows &lt;code&gt;SPEC_SERVICE_TRANS_MAP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#39;&amp;lt;service instance name&amp;gt;&#39;:{&#xA;        &#39;required&#39;:{&#xA;            &#39;properties&#39;: {&#xA;                &#39;&amp;lt;property instance name&amp;gt;&#39;: set&amp;lt;property access: str&amp;gt;&#xA;            },&#xA;            &#39;events&#39;: set&amp;lt;event instance name: str&amp;gt;,&#xA;            &#39;actions&#39;: set&amp;lt;action instance name: str&amp;gt;&#xA;        },&#xA;        &#39;optional&#39;:{&#xA;            &#39;properties&#39;: set&amp;lt;property instance name: str&amp;gt;,&#xA;            &#39;events&#39;: set&amp;lt;event instance name: str&amp;gt;,&#xA;            &#39;actions&#39;: set&amp;lt;action instance name: str&amp;gt;&#xA;        },&#xA;        &#39;entity&#39;: str&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;required&#34; field under &#34;service instance name&#34; indicates the required properties, events and actions of the service. The &#34;optional&#34; field indicates the optional properties, events and actions of the service. The &#34;entity&#34; field indicates the Home Assistant entity to be created. The value of &#34;property instance name&#34; under &#34;required&#34; &#34;properties&#34; field is the access mode of the property. The condition for a successful match is that the value of &#34;property instance name&#34; is a subset of the access mode of the corresponding MIoT-Spec-V2 property instance.&lt;/p&gt; &#xA;&lt;p&gt;Home Assistant entity will not be created if MIoT-Spec-V2 service instance does not contain all required properties, events or actions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Property&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The conversion follows &lt;code&gt;SPEC_PROP_TRANS_MAP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#39;entities&#39;:{&#xA;        &#39;&amp;lt;entity name&amp;gt;&#39;:{&#xA;            &#39;format&#39;: set&amp;lt;str&amp;gt;,&#xA;            &#39;access&#39;: set&amp;lt;str&amp;gt;&#xA;        }&#xA;    },&#xA;    &#39;properties&#39;: {&#xA;        &#39;&amp;lt;property instance name&amp;gt;&#39;:{&#xA;            &#39;device_class&#39;: str,&#xA;            &#39;entity&#39;: str&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;format&#34; field under &#34;entity name&#34; represents the data format of the property, and matching with one value indicates a successful match. The &#34;access&#34; field under &#34;entity name&#34; represents the access mode of the property, and matching with all values is considered a successful match.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;entity&#34; field under &#34;property instance name&#34;, of which value is one of entity name under &#34;entities&#34; field, indicates the Home Assistant entity to be created. The &#34;device_class&#34; field under &#34;property instance name&#34; indicates the Home Assistant entity&#39;s &lt;code&gt;_attr_device_class&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Event&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The conversion follows &lt;code&gt;SPEC_EVENT_TRANS_MAP&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#39;&amp;lt;event instance name&amp;gt;&#39;: str&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value of the event instance name indicates &lt;code&gt;_attr_device_class&lt;/code&gt; of the Home Assistant entity to be created.&lt;/p&gt; &#xA;&lt;h3&gt;MIoT-Spec-V2 Filter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;spec_filter.json&lt;/code&gt; is used to filter out the MIoT-Spec-V2 instance that will not be converted to Home Assistant entity.&lt;/p&gt; &#xA;&lt;p&gt;The format of &lt;code&gt;spec_filter.json&lt;/code&gt; is as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;&amp;lt;MIoT-Spec-V2 device instance&amp;gt;&#34;:{&#xA;        &#34;services&#34;: list&amp;lt;service_iid: str&amp;gt;,&#xA;        &#34;properties&#34;: list&amp;lt;service_iid.property_iid: str&amp;gt;,&#xA;        &#34;events&#34;: list&amp;lt;service_iid.event_iid: str&amp;gt;,&#xA;        &#34;actions&#34;: list&amp;lt;service_iid.action_iid: str&amp;gt;,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key of &lt;code&gt;spec_filter.json&lt;/code&gt; dictionary is the urn excluding the &#34;version&#34; field of the MIoT-Spec-V2 device instance. The firmware of different versions of the same product may be associated with the MIoT-Spec-V2 device instances of different versions. It is required that the MIoT-Spec-V2 instance of a higher version must contain all MIoT-Spec-V2 instances of the lower versions when a vendor defines the MIoT-Spec-V2 of its product on MIoT platform. Thus, the key of &lt;code&gt;spec_filter.json&lt;/code&gt; does not need to specify the version number of MIoT-Spec-V2 device instance.&lt;/p&gt; &#xA;&lt;p&gt;The value of &#34;services&#34;, &#34;properties&#34;, &#34;events&#34; or &#34;actions&#34; fields under &#34;device instance&#34; is the instance id (iid) of the service, property, event or action that will be ignored in the conversion process. Wildcard matching is supported.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;urn:miot-spec-v2:device:television:0000A010:xiaomi-rmi1&#34;:{&#xA;        &#34;services&#34;: [&#34;*&#34;]   # Filter out all services. It is equivalent to completely ignoring the device with such MIoT-Spec-V2 device instance.&#xA;    },&#xA;    &#34;urn:miot-spec-v2:device:gateway:0000A019:xiaomi-hub1&#34;: {&#xA;        &#34;services&#34;: [&#34;3&#34;],  # Filter out the service whose iid=3.&#xA;        &#34;properties&#34;: [&#34;4.*&#34;]   # Filter out all properties in the service whose iid=4.&#xA;        &#34;events&#34;: [&#34;4.1&#34;],  # Filter out the iid=1 event in the iid=4 service.&#xA;        &#34;actions&#34;: [&#34;4.1&#34;]  # Filter out the iid=1 action in the iid=4 service.&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Device information service (urn:miot-spec-v2:service:device-information:00007801) of all devices will never be converted to Home Assistant entity.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple Language Support&lt;/h2&gt; &#xA;&lt;p&gt;There are 8 languages available for selection in the config flow language option of Xiaomi Home, including Simplified Chinese, Traditional Chinese, English, Spanish, Russian, French, German, and Japanese. The config flow page in Simplified Chinese and English has been manually reviewed by the developer. Other languages are translated by machine translation. If you want to modify the words and sentences in the config flow page, you need to modify the json file of the certain language in &lt;code&gt;custom_components/xiaomi_home/translations/&lt;/code&gt; and &lt;code&gt;custom_components/xiaomi_home/miot/i18n/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;When displaying Home Assistant entity name, Xiaomi Home downloads the multiple language file configured by the device vendor from MIoT Cloud, which contains translations for MIoT-Spec-V2 instances of the device. &lt;code&gt;multi_lang.json&lt;/code&gt; is a locally maintained multiple language dictionary, which has a higher priority than the multiple language file obtained from the cloud and can be used to supplement or modify the multiple language translation of devices.&lt;/p&gt; &#xA;&lt;p&gt;The format of &lt;code&gt;multi_lang.json&lt;/code&gt; is as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;&amp;lt;MIoT-Spec-V2 device instance&amp;gt;&#34;: {&#xA;        &#34;&amp;lt;language code&amp;gt;&#34;: {&#xA;            &#34;&amp;lt;instance code&amp;gt;&#34;: &amp;lt;translation: str&amp;gt;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key of &lt;code&gt;multi_lang.json&lt;/code&gt; dictionary is the urn excluding the &#34;version&#34; field of the MIoT-Spec-V2 device instance.&lt;/p&gt; &#xA;&lt;p&gt;The language code is zh-Hans, zh-Hant, en, es, ru, fr, de, or ja, corresponding to the 8 selectable languages mentioned above.&lt;/p&gt; &#xA;&lt;p&gt;The instance code is the code of the MIoT-Spec-V2 instance, which is in the format of:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;service:&amp;lt;siid&amp;gt;                  # service&#xA;service:&amp;lt;siid&amp;gt;:property:&amp;lt;piid&amp;gt;  # property&#xA;service:&amp;lt;siid&amp;gt;:property:&amp;lt;piid&amp;gt;:valuelist:&amp;lt;value&amp;gt; # the value in value-list of a property&#xA;service:&amp;lt;siid&amp;gt;:event:&amp;lt;eiid&amp;gt;     # event&#xA;service:&amp;lt;siid&amp;gt;:action:&amp;lt;aiid&amp;gt;    # action&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;siid, piid, eiid, aiid and value are all decimal three-digit integers.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;urn:miot-spec-v2:device:health-pot:0000A051:chunmi-a1&#34;: {&#xA;        &#34;zh-Hant&#34;: {&#xA;            &#34;service:002&#34;: &#34;養生壺&#34;,&#xA;            &#34;service:002:property:001&#34;: &#34;工作狀態&#34;,&#xA;            &#34;service:002:property:001:valuelist:000&#34;: &#34;待機中&#34;,&#xA;            &#34;service:002:action:002&#34;: &#34;停止烹飪&#34;,&#xA;            &#34;service:005:event:001&#34;: &#34;烹飪完成&#34;&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you edit &lt;code&gt;specv2entity.py&lt;/code&gt;, &lt;code&gt;spec_filter.json&lt;/code&gt; or &lt;code&gt;multi_lang.json&lt;/code&gt; in the &lt;code&gt;custom_components/xiaomi_home/miot/specs&lt;/code&gt; directory in your Home Assistant, you need to update the entity conversion rule in the integration&#39;s CONFIGURE page to take effect. Method: &lt;a href=&#34;https://my.home-assistant.io/redirect/integration/?domain=xiaomi_home&#34;&gt;Settings &amp;gt; Devices &amp;amp; services &amp;gt; Configured &amp;gt; Xiaomi Home&lt;/a&gt; &amp;gt; CONFIGURE &amp;gt; Update Entity Conversion Rule&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/LICENSE.md&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contribution Guidelines: &lt;a href=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/CONTRIBUTING.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/doc/CONTRIBUTING_zh.md&#34;&gt;简体中文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/XiaoMi/ha_xiaomi_home/main/CHANGELOG.md&#34;&gt;ChangeLog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Development Documents: &lt;a href=&#34;https://developers.home-assistant.io/docs/creating_component_index&#34;&gt;https://developers.home-assistant.io/docs/creating_component_index&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;miot: core code.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_client: Adding a login user in the integration needs adding a miot_client instance.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_cloud: Contains functions related to the cloud service, including OAuth login process, HTTP interface functions (to get the user information, to send the device control command, etc.)&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_device: Device entity, including device information, processing logic of property, event and action.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_mips: Message bus for subscribing and publishing method.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_spec: Parse MIoT-Spec-V2.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_lan: Device LAN control, including device discovery, device control, etc.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_mdns: Central hub gateway service LAN discovery.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_network: Obtain network status and network information.&lt;/li&gt; &#xA; &lt;li&gt;miot/miot_storage: File storage for the integration.&lt;/li&gt; &#xA; &lt;li&gt;miot/test: Test scripts.&lt;/li&gt; &#xA; &lt;li&gt;config_flow: Config flow.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>seleniumbase/SeleniumBase</title>
    <updated>2024-12-19T01:36:31Z</updated>
    <id>tag:github.com,2024-12-19:/seleniumbase/SeleniumBase</id>
    <link href="https://github.com/seleniumbase/SeleniumBase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Python APIs for web automation, testing, and bypassing bot-detection.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SeleniumBase&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/super_logo_sb3.png&#34; alt=&#34;SeleniumBase&#34; title=&#34;SeleniumBase&#34; width=&#34;350&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; class=&#34;hero__title&#34;&gt;&lt;b&gt;All-in-one Browser Automation Framework:&lt;br&gt;Web Crawling / Testing / Scraping / Stealth&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://pypi.python.org/pypi/seleniumbase&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/seleniumbase.svg?color=3399EE&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/releases&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/seleniumbase/SeleniumBase.svg?color=22AAEE&#34; alt=&#34;GitHub version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://seleniumbase.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg?sanitize=true&#34; alt=&#34;SeleniumBase Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/actions&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/seleniumbase/SeleniumBase/workflows/CI%20build/badge.svg?sanitize=true&#34; alt=&#34;SeleniumBase GitHub Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/EdhQTn3EyE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join-discord-infomational&#34; alt=&#34;Join the SeleniumBase chat on Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#python_installation&#34;&gt;🚀 Start&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/features_list.md&#34;&gt;🏰 Features&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/customizing_test_runs.md&#34;&gt;🎛️ Options&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/ReadMe.md&#34;&gt;📚 Examples&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/console_scripts/ReadMe.md&#34;&gt;🌠 Scripts&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/mobile_testing.md&#34;&gt;📱 Mobile&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/method_summary.md&#34;&gt;📘 APIs&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/syntax_formats.md&#34;&gt; 🔠 Formats&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/recorder_mode.md&#34;&gt;🔴 Recorder&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/example_logs/ReadMe.md&#34;&gt;📊 Dashboard&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/locale_codes.md&#34;&gt;🗾 Locales&lt;/a&gt; | &lt;a href=&#34;https://seleniumbase.io/devices/?url=seleniumbase.com&#34;&gt;💻 Farm&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/commander.md&#34;&gt;🎖️ GUI&lt;/a&gt; | &lt;a href=&#34;https://seleniumbase.io/demo_page&#34;&gt;📰 TestPage&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/uc_mode.md&#34;&gt;👤 UC Mode&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/cdp_mode/ReadMe.md&#34;&gt;🐙 CDP Mode&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/chart_maker/ReadMe.md&#34;&gt;📶 Charts&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/utilities/selenium_grid/ReadMe.md&#34;&gt;🌐 Grid&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/how_it_works.md&#34;&gt;👁️ How&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/examples/migration/raw_selenium&#34;&gt;🚝 Migrate&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/case_plans.md&#34;&gt;🗂️ CasePlans&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/examples/boilerplates&#34;&gt;♻️ Template&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/master_qa/ReadMe.md&#34;&gt;🧬 Hybrid&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/tour_examples/ReadMe.md&#34;&gt;🚎 Tours&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/github/workflows/ReadMe.md&#34;&gt;🤖 CI/CD&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/js_package_manager.md&#34;&gt;🕹️ JSMgr&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/translations.md&#34;&gt;🌏 Translator&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/presenter/ReadMe.md&#34;&gt;🎞️ Presenter&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/dialog_boxes/ReadMe.md&#34;&gt;🛂 Dialog&lt;/a&gt; | &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/visual_testing/ReadMe.md&#34;&gt;🖼️ Visual&lt;/a&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;SeleniumBase is the professional toolkit for web automation activities. Built for testing websites, bypassing CAPTCHAs, enhancing productivity, completing tasks, and scaling your business.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;📚 Learn from &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/examples&#34;&gt;&lt;strong&gt;over 200 examples&lt;/strong&gt; in the &lt;strong&gt;SeleniumBase/examples/&lt;/strong&gt; folder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;🐙 Note that &lt;a translate=&#34;no&#34; href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/uc_mode.md&#34;&gt;&lt;b&gt;UC Mode&lt;/b&gt;&lt;/a&gt; / &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/cdp_mode/ReadMe.md&#34;&gt;&lt;b&gt;CDP Mode&lt;/b&gt;&lt;/a&gt; (Stealth Mode) have their own ReadMe files.&lt;/p&gt; &#xA;&lt;p&gt;ℹ️ Most scripts run with raw &lt;code translate=&#34;no&#34;&gt;&lt;b&gt;python&lt;/b&gt;&lt;/code&gt;, although some scripts use &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/syntax_formats.md&#34;&gt;Syntax Formats&lt;/a&gt; that expect &lt;a href=&#34;https://docs.pytest.org/en/latest/how-to/usage.html&#34; translate=&#34;no&#34;&gt;&lt;b&gt;pytest&lt;/b&gt;&lt;/a&gt; (a Python unit-testing framework included with SeleniumBase that can discover, collect, and run tests automatically).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📗 Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_google.py&#34;&gt;raw_google.py&lt;/a&gt;, which performs a Google search:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import SB&#xA;&#xA;with SB(test=True) as sb:&#xA;    sb.open(&#34;https://google.com/ncr&#34;)&#xA;    sb.type(&#39;[title=&#34;Search&#34;]&#39;, &#34;SeleniumBase GitHub page\n&#34;)&#xA;    sb.click(&#39;[href*=&#34;github.com/seleniumbase/&#34;]&#39;)&#xA;    sb.save_screenshot_to_logs()  # ./latest_logs/&#xA;    print(sb.get_page_title())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;python raw_google.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_google.py&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/gif/google_search.gif&#34; alt=&#34;SeleniumBase Test&#34; title=&#34;SeleniumBase Test&#34; width=&#34;420&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📗 Here&#39;s an example of bypassing Cloudflare&#39;s challenge page: &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/cdp_mode/raw_gitlab.py&#34;&gt;SeleniumBase/examples/cdp_mode/raw_gitlab.py&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import SB&#xA;&#xA;with SB(uc=True, test=True, locale_code=&#34;en&#34;) as sb:&#xA;    url = &#34;https://gitlab.com/users/sign_in&#34;&#xA;    sb.activate_cdp_mode(url)&#xA;    sb.uc_gui_click_captcha()&#xA;    sb.sleep(2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://seleniumbase.github.io/other/cf_sec.jpg&#34; title=&#34;SeleniumBase&#34; width=&#34;332&#34;&gt; &lt;img src=&#34;https://seleniumbase.github.io/other/gitlab_bypass.png&#34; title=&#34;SeleniumBase&#34; width=&#34;288&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📗 Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_get_swag.py&#34;&gt;test_get_swag.py&lt;/a&gt;, which tests an e-commerce site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import BaseCase&#xA;BaseCase.main(__name__, __file__)  # Call pytest&#xA;&#xA;class MyTestClass(BaseCase):&#xA;    def test_swag_labs(self):&#xA;        self.open(&#34;https://www.saucedemo.com&#34;)&#xA;        self.type(&#34;#user-name&#34;, &#34;standard_user&#34;)&#xA;        self.type(&#34;#password&#34;, &#34;secret_sauce\n&#34;)&#xA;        self.assert_element(&#34;div.inventory_list&#34;)&#xA;        self.click(&#39;button[name*=&#34;backpack&#34;]&#39;)&#xA;        self.click(&#34;#shopping_cart_container a&#34;)&#xA;        self.assert_text(&#34;Backpack&#34;, &#34;div.cart_item&#34;)&#xA;        self.click(&#34;button#checkout&#34;)&#xA;        self.type(&#34;input#first-name&#34;, &#34;SeleniumBase&#34;)&#xA;        self.type(&#34;input#last-name&#34;, &#34;Automation&#34;)&#xA;        self.type(&#34;input#postal-code&#34;, &#34;77123&#34;)&#xA;        self.click(&#34;input#continue&#34;)&#xA;        self.click(&#34;button#finish&#34;)&#xA;        self.assert_text(&#34;Thank you for your order!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;pytest test_get_swag.py&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_get_swag.py&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/gif/fast_swag_2.gif&#34; alt=&#34;SeleniumBase Test&#34; title=&#34;SeleniumBase Test&#34; width=&#34;480&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(The default browser is &lt;code&gt;--chrome&lt;/code&gt; if not set.)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📗 Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_coffee_cart.py&#34; target=&#34;_blank&#34;&gt;test_coffee_cart.py&lt;/a&gt;, which verifies an e-commerce site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_coffee_cart.py --demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;left&#34;&gt;&lt;a href=&#34;https://seleniumbase.io/coffee/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/gif/coffee_cart.gif&#34; width=&#34;480&#34; alt=&#34;SeleniumBase Coffee Cart Test&#34; title=&#34;SeleniumBase Coffee Cart Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(&lt;code translate=&#34;no&#34;&gt;--demo&lt;/code&gt; mode slows down tests and highlights actions)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;multiple_examples&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📗 Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_demo_site.py&#34; target=&#34;_blank&#34;&gt;test_demo_site.py&lt;/a&gt;, which covers several actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_demo_site.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;left&#34;&gt;&lt;a href=&#34;https://seleniumbase.io/demo_page&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/gif/demo_page_5.gif&#34; width=&#34;480&#34; alt=&#34;SeleniumBase Example&#34; title=&#34;SeleniumBase Example&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Easy to type, click, select, toggle, drag &amp;amp; drop, and more.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;(For more examples, see the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/ReadMe.md&#34;&gt;SeleniumBase/examples/&lt;/a&gt; folder.)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/super_logo_sb3.png&#34; alt=&#34;SeleniumBase&#34; title=&#34;SeleniumBase&#34; width=&#34;232&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p dir=&#34;auto&#34;&gt;&lt;strong&gt;Explore the README:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul dir=&#34;auto&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#install_seleniumbase&#34;&gt;&lt;strong&gt;Get Started / Installation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#basic_example_and_usage&#34;&gt;&lt;strong&gt;Basic Example / Usage&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#common_methods&#34;&gt;&lt;strong&gt;Common Test Methods&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#fun_facts&#34;&gt;&lt;strong&gt;Fun Facts / Learn More&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#demo_mode_and_debugging&#34;&gt;&lt;strong&gt;Demo Mode / Debugging&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#command_line_options&#34;&gt;&lt;strong&gt;Command-line Options&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#directory_configuration&#34;&gt;&lt;strong&gt;Directory Configuration&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#seleniumbase_dashboard&#34;&gt;&lt;strong&gt;SeleniumBase Dashboard&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#creating_visual_reports&#34;&gt;&lt;strong&gt;Generating Test Reports&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; ▶️ How is &lt;b&gt;SeleniumBase&lt;/b&gt; different from raw Selenium? (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;💡 SeleniumBase is a Python framework for browser automation and testing. SeleniumBase uses &lt;a href=&#34;https://www.w3.org/TR/webdriver2/#endpoints&#34; target=&#34;_blank&#34;&gt;Selenium/WebDriver&lt;/a&gt; APIs and incorporates test-runners such as &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt;, &lt;code translate=&#34;no&#34;&gt;pynose&lt;/code&gt;, and &lt;code translate=&#34;no&#34;&gt;behave&lt;/code&gt; to provide organized structure, test discovery, test execution, test state (&lt;i&gt;eg. passed, failed, or skipped&lt;/i&gt;), and command-line options for changing default settings (&lt;i&gt;eg. browser selection&lt;/i&gt;). With raw Selenium, you would need to set up your own options-parser for configuring tests from the command-line.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase&#39;s driver manager gives you more control over automatic driver downloads. (Use &lt;code translate=&#34;no&#34;&gt;--driver-version=VER&lt;/code&gt; with your &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt; run command to specify the version.) By default, SeleniumBase will download a driver version that matches your major browser version if not set.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase automatically detects between CSS Selectors and XPath, which means you don&#39;t need to specify the type of selector in your commands (&lt;i&gt;but optionally you could&lt;/i&gt;).&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase methods often perform multiple actions in a single method call. For example, &lt;code translate=&#34;no&#34;&gt;self.type(selector, text)&lt;/code&gt; does the following:&lt;br&gt;1. Waits for the element to be visible.&lt;br&gt;2. Waits for the element to be interactive.&lt;br&gt;3. Clears the text field.&lt;br&gt;4. Types in the new text.&lt;br&gt;5. Presses Enter/Submit if the text ends in &lt;code translate=&#34;no&#34;&gt;&#34;\n&#34;&lt;/code&gt;.&lt;br&gt;With raw Selenium, those actions require multiple method calls.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase uses default timeout values when not set:&lt;br&gt; ✅ &lt;code translate=&#34;no&#34;&gt;self.click(&#34;button&#34;)&lt;/code&gt;&lt;br&gt; With raw Selenium, methods would fail instantly (&lt;i&gt;by default&lt;/i&gt;) if an element needed more time to load:&lt;br&gt; ❌ &lt;code translate=&#34;no&#34;&gt;self.driver.find_element(by=&#34;css selector&#34;, value=&#34;button&#34;).click()&lt;/code&gt;&lt;br&gt; (Reliable code is better than unreliable code.)&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase lets you change the explicit timeout values of methods:&lt;br&gt; ✅ &lt;code translate=&#34;no&#34;&gt;self.click(&#34;button&#34;, timeout=10)&lt;/code&gt;&lt;br&gt; With raw Selenium, that requires more code:&lt;br&gt; ❌ &lt;code translate=&#34;no&#34;&gt;WebDriverWait(driver, 10).until(EC.element_to_be_clickable(&#34;css selector&#34;, &#34;button&#34;)).click()&lt;/code&gt;&lt;br&gt; (Simple code is better than complex code.)&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase gives you clean error output when a test fails. With raw Selenium, error messages can get very messy.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase gives you the option to generate a dashboard and reports for tests. It also saves screenshots from failing tests to the &lt;code translate=&#34;no&#34;&gt;./latest_logs/&lt;/code&gt; folder. Raw &lt;a href=&#34;https://www.selenium.dev/documentation/webdriver/&#34; translate=&#34;no&#34; target=&#34;_blank&#34;&gt;Selenium&lt;/a&gt; does not have these options out-of-the-box.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase includes desktop GUI apps for running tests, such as &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/commander.md&#34; translate=&#34;no&#34;&gt;SeleniumBase Commander&lt;/a&gt; for &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt; and &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/behave_bdd/ReadMe.md&#34; translate=&#34;no&#34;&gt;SeleniumBase Behave GUI&lt;/a&gt; for &lt;code translate=&#34;no&#34;&gt;behave&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase has its own &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/recorder_mode.md&#34;&gt;Recorder / Test Generator&lt;/a&gt; for creating tests from manual browser actions.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase comes with &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/case_plans.md&#34;&gt;test case management software, (&#34;CasePlans&#34;)&lt;/a&gt;, for organizing tests and step descriptions.&lt;/p&gt; &#xA;  &lt;p&gt;💡 SeleniumBase includes tools for &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/chart_maker/ReadMe.md&#34;&gt;building data apps, (&#34;ChartMaker&#34;)&lt;/a&gt;, which can generate JavaScript from Python.&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;📚 &lt;b&gt;Learn about different ways of writing tests:&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📗📝 Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_simple_login.py&#34;&gt;test_simple_login.py&lt;/a&gt;, which uses &lt;code translate=&#34;no&#34;&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/fixtures/base_case.py&#34;&gt;BaseCase&lt;/a&gt;&lt;/code&gt; class inheritance, and runs with &lt;a href=&#34;https://docs.pytest.org/en/latest/how-to/usage.html&#34;&gt;pytest&lt;/a&gt; or &lt;a href=&#34;https://github.com/mdmintz/pynose&#34;&gt;pynose&lt;/a&gt;. (Use &lt;code translate=&#34;no&#34;&gt;self.driver&lt;/code&gt; to access Selenium&#39;s raw &lt;code translate=&#34;no&#34;&gt;driver&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import BaseCase&#xA;BaseCase.main(__name__, __file__)&#xA;&#xA;class TestSimpleLogin(BaseCase):&#xA;    def test_simple_login(self):&#xA;        self.open(&#34;seleniumbase.io/simple/login&#34;)&#xA;        self.type(&#34;#username&#34;, &#34;demo_user&#34;)&#xA;        self.type(&#34;#password&#34;, &#34;secret_pass&#34;)&#xA;        self.click(&#39;a:contains(&#34;Sign in&#34;)&#39;)&#xA;        self.assert_exact_text(&#34;Welcome!&#34;, &#34;h1&#34;)&#xA;        self.assert_element(&#34;img#image1&#34;)&#xA;        self.highlight(&#34;#image1&#34;)&#xA;        self.click_link(&#34;Sign out&#34;)&#xA;        self.assert_text(&#34;signed out&#34;, &#34;#top_message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📘📝 Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_login_sb.py&#34;&gt;raw_login_sb.py&lt;/a&gt;, which uses the &lt;b&gt;&lt;code translate=&#34;no&#34;&gt;SB&lt;/code&gt;&lt;/b&gt; Context Manager. Runs with pure &lt;code translate=&#34;no&#34;&gt;python&lt;/code&gt;. (Use &lt;code translate=&#34;no&#34;&gt;sb.driver&lt;/code&gt; to access Selenium&#39;s raw &lt;code translate=&#34;no&#34;&gt;driver&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import SB&#xA;&#xA;with SB() as sb:&#xA;    sb.open(&#34;seleniumbase.io/simple/login&#34;)&#xA;    sb.type(&#34;#username&#34;, &#34;demo_user&#34;)&#xA;    sb.type(&#34;#password&#34;, &#34;secret_pass&#34;)&#xA;    sb.click(&#39;a:contains(&#34;Sign in&#34;)&#39;)&#xA;    sb.assert_exact_text(&#34;Welcome!&#34;, &#34;h1&#34;)&#xA;    sb.assert_element(&#34;img#image1&#34;)&#xA;    sb.highlight(&#34;#image1&#34;)&#xA;    sb.click_link(&#34;Sign out&#34;)&#xA;    sb.assert_text(&#34;signed out&#34;, &#34;#top_message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;left&#34;&gt;📙📝 Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/raw_login_driver.py&#34;&gt;raw_login_driver.py&lt;/a&gt;, which uses the &lt;b&gt;&lt;code translate=&#34;no&#34;&gt;Driver&lt;/code&gt;&lt;/b&gt; Manager. Runs with pure &lt;code translate=&#34;no&#34;&gt;python&lt;/code&gt;. (The &lt;code&gt;driver&lt;/code&gt; is an improved version of Selenium&#39;s raw &lt;code translate=&#34;no&#34;&gt;driver&lt;/code&gt;, with more methods.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import Driver&#xA;&#xA;driver = Driver()&#xA;try:&#xA;    driver.open(&#34;seleniumbase.io/simple/login&#34;)&#xA;    driver.type(&#34;#username&#34;, &#34;demo_user&#34;)&#xA;    driver.type(&#34;#password&#34;, &#34;secret_pass&#34;)&#xA;    driver.click(&#39;a:contains(&#34;Sign in&#34;)&#39;)&#xA;    driver.assert_exact_text(&#34;Welcome!&#34;, &#34;h1&#34;)&#xA;    driver.assert_element(&#34;img#image1&#34;)&#xA;    driver.highlight(&#34;#image1&#34;)&#xA;    driver.click_link(&#34;Sign out&#34;)&#xA;    driver.assert_text(&#34;signed out&#34;, &#34;#top_message&#34;)&#xA;finally:&#xA;    driver.quit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;python_installation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/python_logo.png&#34; title=&#34;SeleniumBase&#34; width=&#34;42&#34;&gt; Set up Python &amp;amp; Git:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=FACE42&#34; title=&#34;Supported Python Versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;🔵 Add &lt;b&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt;&lt;/b&gt; and &lt;b&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/b&gt; to your System PATH.&lt;/p&gt; &#xA;&lt;p&gt;🔵 Using a &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/virtualenv_instructions.md&#34;&gt;Python virtual env&lt;/a&gt; is recommended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;install_seleniumbase&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Install SeleniumBase:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can install &lt;code&gt;seleniumbase&lt;/code&gt; from &lt;a href=&#34;https://pypi.org/project/seleniumbase/&#34;&gt;PyPI&lt;/a&gt; or &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase&#34;&gt;GitHub&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;How to install &lt;code&gt;seleniumbase&lt;/code&gt; from PyPI:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install seleniumbase&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Add &lt;code&gt;--upgrade&lt;/code&gt; OR &lt;code&gt;-U&lt;/code&gt; to upgrade SeleniumBase.)&lt;/li&gt; &#xA; &lt;li&gt;(Add &lt;code&gt;--force-reinstall&lt;/code&gt; to upgrade indirect packages.)&lt;/li&gt; &#xA; &lt;li&gt;(Use &lt;code&gt;pip3&lt;/code&gt; if multiple versions of Python are present.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;How to install &lt;code&gt;seleniumbase&lt;/code&gt; from a GitHub clone:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/seleniumbase/SeleniumBase.git&#xA;cd SeleniumBase/&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;How to upgrade an existing install from a GitHub clone:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Type &lt;code&gt;seleniumbase&lt;/code&gt; or &lt;code&gt;sbase&lt;/code&gt; to verify that SeleniumBase was installed successfully:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; ___      _          _             ___              &#xA;/ __| ___| |___ _ _ (_)_  _ _ __  | _ ) __ _ ______ &#xA;\__ \/ -_) / -_) &#39; \| | \| | &#39;  \ | _ \/ _` (_-&amp;lt; -_)&#xA;|___/\___|_\___|_||_|_|\_,_|_|_|_\|___/\__,_/__|___|&#xA;----------------------------------------------------&#xA;&#xA;╭──────────────────────────────────────────────────╮&#xA;│  * USAGE: &#34;seleniumbase [COMMAND] [PARAMETERS]&#34;  │&#xA;│  *    OR:        &#34;sbase [COMMAND] [PARAMETERS]&#34;  │&#xA;│                                                  │&#xA;│ COMMANDS:        PARAMETERS / DESCRIPTIONS:      │&#xA;│    get / install    [DRIVER_NAME] [OPTIONS]      │&#xA;│    methods          (List common Python methods) │&#xA;│    options          (List common pytest options) │&#xA;│    behave-options   (List common behave options) │&#xA;│    gui / commander  [OPTIONAL PATH or TEST FILE] │&#xA;│    behave-gui       (SBase Commander for Behave) │&#xA;│    caseplans        [OPTIONAL PATH or TEST FILE] │&#xA;│    mkdir            [DIRECTORY] [OPTIONS]        │&#xA;│    mkfile           [FILE.py] [OPTIONS]          │&#xA;│    mkrec / codegen  [FILE.py] [OPTIONS]          │&#xA;│    recorder         (Open Recorder Desktop App.) │&#xA;│    record           (If args: mkrec. Else: App.) │&#xA;│    mkpres           [FILE.py] [LANG]             │&#xA;│    mkchart          [FILE.py] [LANG]             │&#xA;│    print            [FILE] [OPTIONS]             │&#xA;│    translate        [SB_FILE.py] [LANG] [ACTION] │&#xA;│    convert          [WEBDRIVER_UNITTEST_FILE.py] │&#xA;│    extract-objects  [SB_FILE.py]                 │&#xA;│    inject-objects   [SB_FILE.py] [OPTIONS]       │&#xA;│    objectify        [SB_FILE.py] [OPTIONS]       │&#xA;│    revert-objects   [SB_FILE.py] [OPTIONS]       │&#xA;│    encrypt / obfuscate                           │&#xA;│    decrypt / unobfuscate                         │&#xA;│    proxy            (Start a basic proxy server) │&#xA;│    download server  (Get Selenium Grid JAR file) │&#xA;│    grid-hub         [start|stop] [OPTIONS]       │&#xA;│    grid-node        [start|stop] --hub=[HOST/IP] │&#xA;│                                                  │&#xA;│ *  EXAMPLE =&amp;gt; &#34;sbase get chromedriver stable&#34;    │&#xA;│ *  For command info =&amp;gt; &#34;sbase help [COMMAND]&#34;    │&#xA;│ *  For info on all commands =&amp;gt; &#34;sbase --help&#34;    │&#xA;╰──────────────────────────────────────────────────╯&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔵 Downloading webdrivers:&lt;/h3&gt; &#xA;&lt;p&gt;✅ SeleniumBase automatically downloads webdrivers as needed, such as &lt;code&gt;chromedriver&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; ▶️ Here&#39;s sample output from a chromedriver download. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;*** chromedriver to download = 131.0.6778.108 (Latest Stable) &#xA;&#xA;Downloading chromedriver-mac-arm64.zip from:&#xA;https://storage.googleapis.com/chrome-for-testing-public/131.0.6778.108/mac-arm64/chromedriver-mac-arm64.zip ...&#xA;Download Complete!&#xA;&#xA;Extracting [&#39;chromedriver&#39;] from chromedriver-mac-arm64.zip ...&#xA;Unzip Complete!&#xA;&#xA;The file [chromedriver] was saved to:&#xA;~/github/SeleniumBase/seleniumbase/drivers/&#xA;chromedriver&#xA;&#xA;Making [chromedriver 131.0.6778.108] executable ...&#xA;[chromedriver 131.0.6778.108] is now ready for use!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a id=&#34;basic_example_and_usage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Basic Example / Usage:&lt;/h2&gt; &#xA;&lt;p&gt;🔵 If you&#39;ve cloned SeleniumBase, you can run tests from the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/examples&#34;&gt;examples/&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt;Here&#39;s &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/my_first_test.py&#34;&gt;my_first_test.py&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples/&#xA;pytest my_first_test.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/my_first_test.py&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/gif/fast_swag_2.gif&#34; alt=&#34;SeleniumBase Test&#34; title=&#34;SeleniumBase Test&#34; width=&#34;480&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt;&lt;b&gt;Here&#39;s the full code for &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/my_first_test.py&#34;&gt;my_first_test.py&lt;/a&gt;:&lt;/b&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import BaseCase&#xA;BaseCase.main(__name__, __file__)&#xA;&#xA;class MyTestClass(BaseCase):&#xA;    def test_swag_labs(self):&#xA;        self.open(&#34;https://www.saucedemo.com&#34;)&#xA;        self.type(&#34;#user-name&#34;, &#34;standard_user&#34;)&#xA;        self.type(&#34;#password&#34;, &#34;secret_sauce\n&#34;)&#xA;        self.assert_element(&#34;div.inventory_list&#34;)&#xA;        self.assert_exact_text(&#34;Products&#34;, &#34;span.title&#34;)&#xA;        self.click(&#39;button[name*=&#34;backpack&#34;]&#39;)&#xA;        self.click(&#34;#shopping_cart_container a&#34;)&#xA;        self.assert_exact_text(&#34;Your Cart&#34;, &#34;span.title&#34;)&#xA;        self.assert_text(&#34;Backpack&#34;, &#34;div.cart_item&#34;)&#xA;        self.click(&#34;button#checkout&#34;)&#xA;        self.type(&#34;#first-name&#34;, &#34;SeleniumBase&#34;)&#xA;        self.type(&#34;#last-name&#34;, &#34;Automation&#34;)&#xA;        self.type(&#34;#postal-code&#34;, &#34;77123&#34;)&#xA;        self.click(&#34;input#continue&#34;)&#xA;        self.assert_text(&#34;Checkout: Overview&#34;)&#xA;        self.assert_text(&#34;Backpack&#34;, &#34;div.cart_item&#34;)&#xA;        self.assert_text(&#34;29.99&#34;, &#34;div.inventory_item_price&#34;)&#xA;        self.click(&#34;button#finish&#34;)&#xA;        self.assert_exact_text(&#34;Thank you for your order!&#34;, &#34;h2&#34;)&#xA;        self.assert_element(&#39;img[alt=&#34;Pony Express&#34;]&#39;)&#xA;        self.js_click(&#34;a#logout_sidebar_link&#34;)&#xA;        self.assert_element(&#34;div#login_button_container&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default, &lt;strong&gt;&lt;a href=&#34;https://www.w3schools.com/cssref/css_selectors.asp&#34;&gt;CSS Selectors&lt;/a&gt;&lt;/strong&gt; are used for finding page elements.&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re new to CSS Selectors, games like &lt;a href=&#34;http://flukeout.github.io/&#34;&gt;CSS Diner&lt;/a&gt; can help you learn.&lt;/li&gt; &#xA; &lt;li&gt;For more reading, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors&#34;&gt;here&#39;s an advanced guide on CSS attribute selectors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;common_methods&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Here are some common SeleniumBase methods:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.open(url)  # Navigate the browser window to the URL.&#xA;self.type(selector, text)  # Update the field with the text.&#xA;self.click(selector)  # Click the element with the selector.&#xA;self.click_link(link_text)  # Click the link containing text.&#xA;self.go_back()  # Navigate back to the previous URL.&#xA;self.select_option_by_text(dropdown_selector, option)&#xA;self.hover_and_click(hover_selector, click_selector)&#xA;self.drag_and_drop(drag_selector, drop_selector)&#xA;self.get_text(selector)  # Get the text from the element.&#xA;self.get_current_url()  # Get the URL of the current page.&#xA;self.get_page_source()  # Get the HTML of the current page.&#xA;self.get_attribute(selector, attribute)  # Get element attribute.&#xA;self.get_title()  # Get the title of the current page.&#xA;self.switch_to_frame(frame)  # Switch into the iframe container.&#xA;self.switch_to_default_content()  # Leave the iframe container.&#xA;self.open_new_window()  # Open a new window in the same browser.&#xA;self.switch_to_window(window)  # Switch to the browser window.&#xA;self.switch_to_default_window()  # Switch to the original window.&#xA;self.get_new_driver(OPTIONS)  # Open a new driver with OPTIONS.&#xA;self.switch_to_driver(driver)  # Switch to the browser driver.&#xA;self.switch_to_default_driver()  # Switch to the original driver.&#xA;self.wait_for_element(selector)  # Wait until element is visible.&#xA;self.is_element_visible(selector)  # Return element visibility.&#xA;self.is_text_visible(text, selector)  # Return text visibility.&#xA;self.sleep(seconds)  # Do nothing for the given amount of time.&#xA;self.save_screenshot(name)  # Save a screenshot in .png format.&#xA;self.assert_element(selector)  # Verify the element is visible.&#xA;self.assert_text(text, selector)  # Verify text in the element.&#xA;self.assert_exact_text(text, selector)  # Verify text is exact.&#xA;self.assert_title(title)  # Verify the title of the web page.&#xA;self.assert_downloaded_file(file)  # Verify file was downloaded.&#xA;self.assert_no_404_errors()  # Verify there are no broken links.&#xA;self.assert_no_js_errors()  # Verify there are no JS errors.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 For the complete list of SeleniumBase methods, see: &lt;b&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/method_summary.md&#34;&gt;Method Summary&lt;/a&gt;&lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;fun_facts&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Fun Facts / Learn More:&lt;/h2&gt; &#xA;&lt;p&gt;✅ SeleniumBase automatically handles common &lt;a href=&#34;https://www.selenium.dev/documentation/webdriver/&#34; target=&#34;_blank&#34;&gt;WebDriver&lt;/a&gt; actions such as launching web browsers before tests, saving screenshots during failures, and closing web browsers after tests.&lt;/p&gt; &#xA;&lt;p&gt;✅ SeleniumBase lets you customize tests via &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/customizing_test_runs.md&#34;&gt;command-line options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;✅ SeleniumBase uses simple syntax for commands. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.type(&#34;input&#34;, &#34;dogs\n&#34;)  # (The &#34;\n&#34; presses ENTER)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most SeleniumBase scripts can be run with &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt;, &lt;code translate=&#34;no&#34;&gt;pynose&lt;/code&gt;, or pure &lt;code translate=&#34;no&#34;&gt;python&lt;/code&gt;. Not all test runners can run all test formats. For example, tests that use the &lt;code&gt;sb&lt;/code&gt; pytest fixture can only be run with &lt;code&gt;pytest&lt;/code&gt;. (See &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/syntax_formats.md&#34;&gt;Syntax Formats&lt;/a&gt;) There&#39;s also a &lt;a href=&#34;https://behave.readthedocs.io/en/stable/gherkin.html#features&#34; target=&#34;_blank&#34;&gt;Gherkin&lt;/a&gt; test format that runs with &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/behave_bdd/ReadMe.md&#34;&gt;behave&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest coffee_cart_tests.py --rs&#xA;pytest test_sb_fixture.py --demo&#xA;pytest test_suite.py --rs --html=report.html --dashboard&#xA;&#xA;pynose basic_test.py --mobile&#xA;pynose test_suite.py --headless --report --show-report&#xA;&#xA;python raw_sb.py&#xA;python raw_test_scripts.py&#xA;&#xA;behave realworld.feature&#xA;behave calculator.feature -D rs -D dashboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;✅ &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt; includes automatic test discovery. If you don&#39;t specify a specific file or folder to run, &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt; will automatically search through all subdirectories for tests to run based on the following criteria:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python files that start with &lt;code&gt;test_&lt;/code&gt; or end with &lt;code&gt;_test.py&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Python methods that start with &lt;code&gt;test_&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;With a SeleniumBase &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/pytest.ini&#34;&gt;pytest.ini&lt;/a&gt; file present, you can modify default discovery settings. The Python class name can be anything because &lt;code&gt;seleniumbase.BaseCase&lt;/code&gt; inherits &lt;code&gt;unittest.TestCase&lt;/code&gt; to trigger autodiscovery.&lt;/p&gt; &#xA;&lt;p&gt;✅ You can do a pre-flight check to see which tests would get discovered by &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt; before the actual run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest --co -q&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;✅ You can be more specific when calling &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt; or &lt;code translate=&#34;no&#34;&gt;pynose&lt;/code&gt; on a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest [FILE_NAME.py]::[CLASS_NAME]::[METHOD_NAME]&#xA;&#xA;pynose [FILE_NAME.py]:[CLASS_NAME].[METHOD_NAME]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;✅ No More Flaky Tests! SeleniumBase methods automatically wait for page elements to finish loading before interacting with them (&lt;i&gt;up to a timeout limit&lt;/i&gt;). This means &lt;b&gt;you no longer need random &lt;span&gt;&lt;code translate=&#34;no&#34;&gt;time.sleep()&lt;/code&gt;&lt;/span&gt; statements&lt;/b&gt; in your scripts.&lt;/p&gt; &#xA;&lt;img src=&#34;https://img.shields.io/badge/Flaky%20Tests%3F-%20NO%21-11BBDD.svg?sanitize=true&#34; alt=&#34;NO MORE FLAKY TESTS!&#34;&gt; &#xA;&lt;p&gt;✅ SeleniumBase supports all major browsers and operating systems:&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;Browsers:&lt;/b&gt; Chrome, Edge, Firefox, and Safari.&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt;Systems:&lt;/b&gt; Linux/Ubuntu, macOS, and Windows.&lt;/p&gt; &#xA;&lt;p&gt;✅ SeleniumBase works on all popular CI/CD platforms:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/github/workflows/ReadMe.md&#34;&gt;&lt;img alt=&#34;GitHub Actions integration&#34; src=&#34;https://img.shields.io/badge/GitHub_Actions-12B2C2.svg?logo=GitHubActions&amp;amp;logoColor=CFFFC2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/azure/jenkins/ReadMe.md&#34;&gt;&lt;img alt=&#34;Jenkins integration&#34; src=&#34;https://img.shields.io/badge/Jenkins-32B242.svg?logo=jenkins&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/azure/azure_pipelines/ReadMe.md&#34;&gt;&lt;img alt=&#34;Azure integration&#34; src=&#34;https://img.shields.io/badge/Azure-2288EE.svg?logo=AzurePipelines&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/google_cloud/ReadMe.md&#34;&gt;&lt;img alt=&#34;Google Cloud integration&#34; src=&#34;https://img.shields.io/badge/Google_Cloud-11CAE8.svg?logo=GoogleCloud&amp;amp;logoColor=EE0066&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/#utilizing_advanced_features&#34;&gt;&lt;img alt=&#34;AWS integration&#34; src=&#34;https://img.shields.io/badge/AWS-4488DD.svg?logo=AmazonAWS&amp;amp;logoColor=FFFF44&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Personal_computer&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Your Computer&#34; src=&#34;https://img.shields.io/badge/%F0%9F%92%BB_Your_Computer-44E6E6.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;✅ SeleniumBase includes an automated/manual hybrid solution called &lt;b&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/master_qa/ReadMe.md&#34;&gt;MasterQA&lt;/a&gt;&lt;/b&gt; to speed up manual testing with automation while manual testers handle validation.&lt;/p&gt; &#xA;&lt;p&gt;✅ SeleniumBase supports &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/examples/offline_examples&#34;&gt;running tests while offline&lt;/a&gt; (&lt;i&gt;assuming webdrivers have previously been downloaded when online&lt;/i&gt;).&lt;/p&gt; &#xA;&lt;p&gt;✅ For a full list of SeleniumBase features, &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/features_list.md&#34;&gt;Click Here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;demo_mode_and_debugging&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Demo Mode / Debugging:&lt;/h2&gt; &#xA;&lt;p&gt;🔵 &lt;b&gt;Demo Mode&lt;/b&gt; helps you see what a test is doing. If a test is moving too fast for your eyes, run it in &lt;b&gt;Demo Mode&lt;/b&gt; to pause the browser briefly between actions, highlight page elements being acted on, and display assertions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest my_first_test.py --demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;code&gt;time.sleep(seconds)&lt;/code&gt; can be used to make a test wait at a specific spot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time; time.sleep(3)  # Do nothing for 3 seconds.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Debug Mode&lt;/strong&gt; with Python&#39;s built-in &lt;strong&gt;&lt;a href=&#34;https://docs.python.org/3/library/pdb.html&#34;&gt;pdb&lt;/a&gt;&lt;/strong&gt; library helps you debug tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pdb; pdb.set_trace()&#xA;import pytest; pytest.set_trace()&#xA;breakpoint()  # Shortcut for &#34;import pdb; pdb.set_trace()&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;(&lt;strong&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/strong&gt; commands: &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt; =&amp;gt; &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;step&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;🔵 To pause an active test that throws an exception or error, (&lt;em&gt;and keep the browser window open while &lt;strong&gt;Debug Mode&lt;/strong&gt; begins in the console&lt;/em&gt;), add &lt;strong&gt;&lt;code&gt;--pdb&lt;/code&gt;&lt;/strong&gt; as a &lt;code&gt;pytest&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_fail.py --pdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 To start tests in Debug Mode, add &lt;strong&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/strong&gt; as a &lt;code&gt;pytest&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_coffee_cart.py --trace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mdmintz/pdbp&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/gif/coffee_pdbp.gif&#34; alt=&#34;SeleniumBase test with the pdbp (Pdb+) debugger&#34; title=&#34;SeleniumBase test with the pdbp (Pdb+) debugger&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;command_line_options&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔵 Command-line Options:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;pytest_options&#34;&gt;&lt;/a&gt; ✅ Here are some useful command-line options that come with &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;-v  # Verbose mode. Prints the full name of each test and shows more details.&#xA;-q  # Quiet mode. Print fewer details in the console output when running tests.&#xA;-x  # Stop running the tests after the first failure is reached.&#xA;--html=report.html  # Creates a detailed pytest-html report after tests finish.&#xA;--co | --collect-only  # Show what tests would get run. (Without running them)&#xA;--co -q  # (Both options together!) - Do a dry run with full test names shown.&#xA;-n=NUM  # Multithread the tests using that many threads. (Speed up test runs!)&#xA;-s  # See print statements. (Should be on by default with pytest.ini present.)&#xA;--junit-xml=report.xml  # Creates a junit-xml report after tests finish.&#xA;--pdb  # If a test fails, enter Post Mortem Debug Mode. (Don&#39;t use with CI!)&#xA;--trace  # Enter Debug Mode at the beginning of each test. (Don&#39;t use with CI!)&#xA;-m=MARKER  # Run tests with the specified pytest marker.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;new_pytest_options&#34;&gt;&lt;/a&gt; ✅ SeleniumBase provides additional &lt;code translate=&#34;no&#34;&gt;pytest&lt;/code&gt; command-line options for tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;--browser=BROWSER  # (The web browser to use. Default: &#34;chrome&#34;.)&#xA;--chrome  # (Shortcut for &#34;--browser=chrome&#34;. On by default.)&#xA;--edge  # (Shortcut for &#34;--browser=edge&#34;.)&#xA;--firefox  # (Shortcut for &#34;--browser=firefox&#34;.)&#xA;--safari  # (Shortcut for &#34;--browser=safari&#34;.)&#xA;--settings-file=FILE  # (Override default SeleniumBase settings.)&#xA;--env=ENV  # (Set the test env. Access with &#34;self.env&#34; in tests.)&#xA;--account=STR  # (Set account. Access with &#34;self.account&#34; in tests.)&#xA;--data=STRING  # (Extra test data. Access with &#34;self.data&#34; in tests.)&#xA;--var1=STRING  # (Extra test data. Access with &#34;self.var1&#34; in tests.)&#xA;--var2=STRING  # (Extra test data. Access with &#34;self.var2&#34; in tests.)&#xA;--var3=STRING  # (Extra test data. Access with &#34;self.var3&#34; in tests.)&#xA;--variables=DICT  # (Extra test data. Access with &#34;self.variables&#34;.)&#xA;--user-data-dir=DIR  # (Set the Chrome user data directory to use.)&#xA;--protocol=PROTOCOL  # (The Selenium Grid protocol: http|https.)&#xA;--server=SERVER  # (The Selenium Grid server/IP used for tests.)&#xA;--port=PORT  # (The Selenium Grid port used by the test server.)&#xA;--cap-file=FILE  # (The web browser&#39;s desired capabilities to use.)&#xA;--cap-string=STRING  # (The web browser&#39;s desired capabilities to use.)&#xA;--proxy=SERVER:PORT  # (Connect to a proxy server:port as tests are running)&#xA;--proxy=USERNAME:PASSWORD@SERVER:PORT  # (Use an authenticated proxy server)&#xA;--proxy-bypass-list=STRING # (&#34;;&#34;-separated hosts to bypass, Eg &#34;*.foo.com&#34;)&#xA;--proxy-pac-url=URL  # (Connect to a proxy server using a PAC_URL.pac file.)&#xA;--proxy-pac-url=USERNAME:PASSWORD@URL  # (Authenticated proxy with PAC URL.)&#xA;--proxy-driver  # (If a driver download is needed, will use: --proxy=PROXY.)&#xA;--multi-proxy  # (Allow multiple authenticated proxies when multi-threaded.)&#xA;--agent=STRING  # (Modify the web browser&#39;s User-Agent string.)&#xA;--mobile  # (Use the mobile device emulator while running tests.)&#xA;--metrics=STRING  # (Set mobile metrics: &#34;CSSWidth,CSSHeight,PixelRatio&#34;.)&#xA;--chromium-arg=&#34;ARG=N,ARG2&#34;  # (Set Chromium args, &#34;,&#34;-separated, no spaces.)&#xA;--firefox-arg=&#34;ARG=N,ARG2&#34;  # (Set Firefox args, comma-separated, no spaces.)&#xA;--firefox-pref=SET  # (Set a Firefox preference:value set, comma-separated.)&#xA;--extension-zip=ZIP  # (Load a Chrome Extension .zip|.crx, comma-separated.)&#xA;--extension-dir=DIR  # (Load a Chrome Extension directory, comma-separated.)&#xA;--disable-features=&#34;F1,F2&#34;  # (Disable features, comma-separated, no spaces.)&#xA;--binary-location=PATH  # (Set path of the Chromium browser binary to use.)&#xA;--driver-version=VER  # (Set the chromedriver or uc_driver version to use.)&#xA;--sjw  # (Skip JS Waits for readyState to be &#34;complete&#34; or Angular to load.)&#xA;--wfa  # (Wait for AngularJS to be done loading after specific web actions.)&#xA;--pls=PLS  # (Set pageLoadStrategy on Chrome: &#34;normal&#34;, &#34;eager&#34;, or &#34;none&#34;.)&#xA;--headless  # (The default headless mode. Linux uses this mode by default.)&#xA;--headless1  # (Use Chrome&#39;s old headless mode. Fast, but has limitations.)&#xA;--headless2  # (Use Chrome&#39;s new headless mode, which supports extensions.)&#xA;--headed  # (Run tests in headed/GUI mode on Linux OS, where not default.)&#xA;--xvfb  # (Run tests using the Xvfb virtual display server on Linux OS.)&#xA;--xvfb-metrics=STRING  # (Set Xvfb display size on Linux: &#34;Width,Height&#34;.)&#xA;--locale=LOCALE_CODE  # (Set the Language Locale Code for the web browser.)&#xA;--interval=SECONDS  # (The autoplay interval for presentations &amp;amp; tour steps)&#xA;--start-page=URL  # (The starting URL for the web browser when tests begin.)&#xA;--archive-logs  # (Archive existing log files instead of deleting them.)&#xA;--archive-downloads  # (Archive old downloads instead of deleting them.)&#xA;--time-limit=SECONDS  # (Safely fail any test that exceeds the time limit.)&#xA;--slow  # (Slow down the automation. Faster than using Demo Mode.)&#xA;--demo  # (Slow down and visually see test actions as they occur.)&#xA;--demo-sleep=SECONDS  # (Set the wait time after Slow &amp;amp; Demo Mode actions.)&#xA;--highlights=NUM  # (Number of highlight animations for Demo Mode actions.)&#xA;--message-duration=SECONDS  # (The time length for Messenger alerts.)&#xA;--check-js  # (Check for JavaScript errors after page loads.)&#xA;--ad-block  # (Block some types of display ads from loading.)&#xA;--host-resolver-rules=RULES  # (Set host-resolver-rules, comma-separated.)&#xA;--block-images  # (Block images from loading during tests.)&#xA;--do-not-track  # (Indicate to websites that you don&#39;t want to be tracked.)&#xA;--verify-delay=SECONDS  # (The delay before MasterQA verification checks.)&#xA;--ee | --esc-end  # (Lets the user end the current test via the ESC key.)&#xA;--recorder  # (Enables the Recorder for turning browser actions into code.)&#xA;--rec-behave  # (Same as Recorder Mode, but also generates behave-gherkin.)&#xA;--rec-sleep  # (If the Recorder is enabled, also records self.sleep calls.)&#xA;--rec-print  # (If the Recorder is enabled, prints output after tests end.)&#xA;--disable-cookies  # (Disable Cookies on websites. Pages might break!)&#xA;--disable-js  # (Disable JavaScript on websites. Pages might break!)&#xA;--disable-csp  # (Disable the Content Security Policy of websites.)&#xA;--disable-ws  # (Disable Web Security on Chromium-based browsers.)&#xA;--enable-ws  # (Enable Web Security on Chromium-based browsers.)&#xA;--enable-sync  # (Enable &#34;Chrome Sync&#34; on websites.)&#xA;--uc | --undetected  # (Use undetected-chromedriver to evade bot-detection.)&#xA;--uc-cdp-events  # (Capture CDP events when running in &#34;--undetected&#34; mode.)&#xA;--log-cdp  # (&#34;goog:loggingPrefs&#34;, {&#34;performance&#34;: &#34;ALL&#34;, &#34;browser&#34;: &#34;ALL&#34;})&#xA;--remote-debug  # (Sync to Chrome Remote Debugger chrome://inspect/#devices)&#xA;--ftrace | --final-trace  # (Debug Mode after each test. Don&#39;t use with CI!)&#xA;--dashboard  # (Enable the SeleniumBase Dashboard. Saved at: dashboard.html)&#xA;--dash-title=STRING  # (Set the title shown for the generated dashboard.)&#xA;--enable-3d-apis  # (Enables WebGL and 3D APIs.)&#xA;--swiftshader  # (Chrome &#34;--use-gl=angle&#34; / &#34;--use-angle=swiftshader-webgl&#34;)&#xA;--incognito  # (Enable Chrome&#39;s Incognito mode.)&#xA;--guest  # (Enable Chrome&#39;s Guest mode.)&#xA;--dark  # (Enable Chrome&#39;s Dark mode.)&#xA;--devtools  # (Open Chrome&#39;s DevTools when the browser opens.)&#xA;--rs | --reuse-session  # (Reuse browser session for all tests.)&#xA;--rcs | --reuse-class-session  # (Reuse session for tests in class.)&#xA;--crumbs  # (Delete all cookies between tests reusing a session.)&#xA;--disable-beforeunload  # (Disable the &#34;beforeunload&#34; event on Chrome.)&#xA;--window-position=X,Y  # (Set the browser&#39;s starting window position.)&#xA;--window-size=WIDTH,HEIGHT  # (Set the browser&#39;s starting window size.)&#xA;--maximize  # (Start tests with the browser window maximized.)&#xA;--screenshot  # (Save a screenshot at the end of each test.)&#xA;--no-screenshot  # (No screenshots saved unless tests directly ask it.)&#xA;--visual-baseline  # (Set the visual baseline for Visual/Layout tests.)&#xA;--wire  # (Use selenium-wire&#39;s webdriver for replacing selenium webdriver.)&#xA;--external-pdf  # (Set Chromium &#34;plugins.always_open_pdf_externally&#34;:True.)&#xA;--timeout-multiplier=MULTIPLIER  # (Multiplies the default timeout values.)&#xA;--list-fail-page  # (After each failing test, list the URL of the failure.)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(See the full list of command-line option definitions &lt;strong&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/plugins/pytest_plugin.py&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;. For detailed examples of command-line options, see &lt;strong&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/customizing_test_runs.md&#34;&gt;customizing_test_runs.md&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;🔵 During test failures, logs and screenshots from the most recent test run will get saved to the &lt;code&gt;latest_logs/&lt;/code&gt; folder. Those logs will get moved to &lt;code&gt;archived_logs/&lt;/code&gt; if you add --archive_logs to command-line options, or have &lt;code&gt;ARCHIVE_EXISTING_LOGS&lt;/code&gt; set to True in &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/settings.py&#34;&gt;settings.py&lt;/a&gt;, otherwise log files with be cleaned up at the start of the next test run. The &lt;code&gt;test_suite.py&lt;/code&gt; collection contains tests that fail on purpose so that you can see how logging works.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd examples/&#xA;&#xA;pytest test_suite.py --chrome&#xA;&#xA;pytest test_suite.py --firefox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An easy way to override seleniumbase/config/settings.py is by using a custom settings file. Here&#39;s the command-line option to add to tests: (See &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/custom_settings.py&#34;&gt;examples/custom_settings.py&lt;/a&gt;) &lt;code&gt;--settings_file=custom_settings.py&lt;/code&gt; (Settings include default timeout values, a two-factor auth key, DB credentials, S3 credentials, and other important settings used by tests.)&lt;/p&gt; &#xA;&lt;p&gt;🔵 To pass additional data from the command-line to tests, add &lt;code&gt;--data=&#34;ANY STRING&#34;&lt;/code&gt;. Inside your tests, you can use &lt;code&gt;self.data&lt;/code&gt; to access that.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;directory_configuration&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Directory Configuration:&lt;/h2&gt; &#xA;&lt;p&gt;🔵 When running tests with &lt;strong&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/strong&gt;, you&#39;ll want a copy of &lt;strong&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/pytest.ini&#34;&gt;pytest.ini&lt;/a&gt;&lt;/strong&gt; in your root folders. When running tests with &lt;strong&gt;&lt;code&gt;pynose&lt;/code&gt;&lt;/strong&gt;, you&#39;ll want a copy of &lt;strong&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/setup.cfg&#34;&gt;setup.cfg&lt;/a&gt;&lt;/strong&gt; in your root folders. These files specify default configuration details for tests. Test folders should also include a blank &lt;strong&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/offline_examples/__init__.py&#34;&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/a&gt;&lt;/strong&gt; file to allow your test files to import other files from that folder.&lt;/p&gt; &#xA;&lt;p&gt;🔵 &lt;code&gt;sbase mkdir DIR&lt;/code&gt; creates a folder with config files and sample tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbase mkdir ui_tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;That new folder will have these files:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ui_tests/&#xA;├── __init__.py&#xA;├── my_first_test.py&#xA;├── parameterized_test.py&#xA;├── pytest.ini&#xA;├── requirements.txt&#xA;├── setup.cfg&#xA;├── test_demo_site.py&#xA;└── boilerplates/&#xA;    ├── __init__.py&#xA;    ├── base_test_case.py&#xA;    ├── boilerplate_test.py&#xA;    ├── classic_obj_test.py&#xA;    ├── page_objects.py&#xA;    ├── sb_fixture_test.py&#xA;    └── samples/&#xA;        ├── __init__.py&#xA;        ├── google_objects.py&#xA;        ├── google_test.py&#xA;        ├── sb_swag_test.py&#xA;        └── swag_labs_test.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;ProTip™:&lt;/b&gt; You can also create a boilerplate folder without any sample tests in it by adding &lt;code&gt;-b&lt;/code&gt; or &lt;code&gt;--basic&lt;/code&gt; to the &lt;code&gt;sbase mkdir&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sbase mkdir ui_tests --basic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;That new folder will have these files:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ui_tests/&#xA;├── __init__.py&#xA;├── pytest.ini&#xA;├── requirements.txt&#xA;└── setup.cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of those files, the &lt;code&gt;pytest.ini&lt;/code&gt; config file is the most important, followed by a blank &lt;code&gt;__init__.py&lt;/code&gt; file. There&#39;s also a &lt;code&gt;setup.cfg&lt;/code&gt; file (for pynose). Finally, the &lt;code&gt;requirements.txt&lt;/code&gt; file can be used to help you install seleniumbase into your environments (if it&#39;s not already installed).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Log files from failed tests:&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s try an example of a test that fails:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#34;&#34;&#34; test_fail.py &#34;&#34;&#34;&#xA;from seleniumbase import BaseCase&#xA;BaseCase.main(__name__, __file__)&#xA;&#xA;class MyTestClass(BaseCase):&#xA;&#xA;    def test_find_army_of_robots_on_xkcd_desert_island(self):&#xA;        self.open(&#34;https://xkcd.com/731/&#34;)&#xA;        self.assert_element(&#34;div#ARMY_OF_ROBOTS&#34;, timeout=1)  # This should fail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run it from the &lt;code&gt;examples/&lt;/code&gt; folder like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_fail.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 You&#39;ll notice that a logs folder, &lt;code&gt;./latest_logs/&lt;/code&gt;, was created to hold information (and screenshots) about the failing test. During test runs, past results get moved to the archived_logs folder if you have ARCHIVE_EXISTING_LOGS set to True in &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/settings.py&#34;&gt;settings.py&lt;/a&gt;, or if your run tests with &lt;code&gt;--archive-logs&lt;/code&gt;. If you choose not to archive existing logs, they will be deleted and replaced by the logs of the latest test run.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;seleniumbase_dashboard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; SeleniumBase Dashboard:&lt;/h2&gt; &#xA;&lt;p&gt;🔵 The &lt;code&gt;--dashboard&lt;/code&gt; option for pytest generates a SeleniumBase Dashboard located at &lt;code&gt;dashboard.html&lt;/code&gt;, which updates automatically as tests run and produce results. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest --dashboard --rs --headless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/dashboard_1.png&#34; alt=&#34;The SeleniumBase Dashboard&#34; title=&#34;The SeleniumBase Dashboard&#34; width=&#34;380&#34;&gt; &#xA;&lt;p&gt;🔵 Additionally, you can host your own SeleniumBase Dashboard Server on a port of your choice. Here&#39;s an example of that using Python&#39;s &lt;code&gt;http.server&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m http.server 1948&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 Now you can navigate to &lt;code&gt;http://localhost:1948/dashboard.html&lt;/code&gt; in order to view the dashboard as a web app. This requires two different terminal windows: one for running the server, and another for running the tests, which should be run from the same directory. (Use &lt;kbd&gt;Ctrl+C&lt;/kbd&gt; to stop the http server.)&lt;/p&gt; &#xA;&lt;p&gt;🔵 Here&#39;s a full example of what the SeleniumBase Dashboard may look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_suite.py test_image_saving.py --dashboard --rs --headless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/dashboard_2.png&#34; alt=&#34;The SeleniumBase Dashboard&#34; title=&#34;The SeleniumBase Dashboard&#34; width=&#34;520&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a id=&#34;creating_visual_reports&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Generating Test Reports:&lt;/h2&gt; &#xA;&lt;h3&gt;🔵 &lt;code&gt;pytest&lt;/code&gt; HTML Reports:&lt;/h3&gt; &#xA;&lt;p&gt;✅ Using &lt;code&gt;--html=report.html&lt;/code&gt; gives you a fancy report of the name specified after your test suite completes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_suite.py --html=report.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/html_report.png&#34; alt=&#34;Example Pytest Report&#34; title=&#34;Example Pytest Report&#34; width=&#34;520&#34;&gt; &#xA;&lt;p&gt;✅ When combining pytest html reports with SeleniumBase Dashboard usage, the pie chart from the Dashboard will get added to the html report. Additionally, if you set the html report URL to be the same as the Dashboard URL when also using the dashboard, (example: &lt;code&gt;--dashboard --html=dashboard.html&lt;/code&gt;), then the Dashboard will become an advanced html report when all the tests complete.&lt;/p&gt; &#xA;&lt;p&gt;✅ Here&#39;s an example of an upgraded html report:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_suite.py --dashboard --html=report.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/dash_report.jpg&#34; alt=&#34;Dashboard Pytest HTML Report&#34; title=&#34;Dashboard Pytest HTML Report&#34; width=&#34;520&#34;&gt; &#xA;&lt;p&gt;If viewing pytest html reports in &lt;a href=&#34;https://www.jenkins.io/&#34;&gt;Jenkins&lt;/a&gt;, you may need to &lt;a href=&#34;https://stackoverflow.com/a/46197356/7058266&#34;&gt;configure Jenkins settings&lt;/a&gt; for the html to render correctly. This is due to &lt;a href=&#34;https://www.jenkins.io/doc/book/system-administration/security/configuring-content-security-policy/&#34;&gt;Jenkins CSP changes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;--junit-xml=report.xml&lt;/code&gt; to get an xml report instead. Jenkins can use this file to display better reporting for your tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_suite.py --junit-xml=report.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔵 &lt;code&gt;pynose&lt;/code&gt; Reports:&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;--report&lt;/code&gt; option gives you a fancy report after your test suite completes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pynose test_suite.py --report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/nose_report.png&#34; alt=&#34;Example pynose Report&#34; title=&#34;Example pynose Report&#34; width=&#34;320&#34;&gt; &#xA;&lt;p&gt;(NOTE: You can add &lt;code&gt;--show-report&lt;/code&gt; to immediately display pynose reports after the test suite completes. Only use &lt;code&gt;--show-report&lt;/code&gt; when running tests locally because it pauses the test run.)&lt;/p&gt; &#xA;&lt;h3&gt;🔵 &lt;code&gt;behave&lt;/code&gt; Dashboard &amp;amp; Reports:&lt;/h3&gt; &#xA;&lt;p&gt;(The &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/examples/behave_bdd&#34;&gt;behave_bdd/&lt;/a&gt; folder can be found in the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/examples&#34;&gt;examples/&lt;/a&gt; folder.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;behave behave_bdd/features/ -D dashboard -D headless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/sb_behave_dashboard.png&#34; title=&#34;SeleniumBase&#34; width=&#34;520&#34;&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;--junit&lt;/code&gt; to get &lt;code&gt;.xml&lt;/code&gt; reports for each &lt;code translate=&#34;no&#34;&gt;behave&lt;/code&gt; feature. Jenkins can use these files to display better reporting for your tests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;behave behave_bdd/features/ --junit -D rs -D headless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔵 Allure Reports:&lt;/h3&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://allurereport.org/docs/pytest/&#34;&gt;https://allurereport.org/docs/pytest/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SeleniumBase no longer includes &lt;code&gt;allure-pytest&lt;/code&gt; as part of installed dependencies. If you want to use it, install it first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install allure-pytest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now your tests can create Allure results files, which can be processed by Allure Reports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest test_suite.py --alluredir=allure_results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Using a Proxy Server:&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to use a proxy server for your browser tests (Chromium or Firefox), you can add &lt;code&gt;--proxy=IP_ADDRESS:PORT&lt;/code&gt; as an argument on the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest proxy_test.py --proxy=IP_ADDRESS:PORT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the proxy server that you wish to use requires authentication, you can do the following (Chromium only):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SeleniumBase also supports SOCKS4 and SOCKS5 proxies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest proxy_test.py --proxy=&#34;socks4://IP_ADDRESS:PORT&#34;&#xA;&#xA;pytest proxy_test.py --proxy=&#34;socks5://IP_ADDRESS:PORT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make things easier, you can add your frequently-used proxies to PROXY_LIST in &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/proxy_list.py&#34;&gt;proxy_list.py&lt;/a&gt;, and then use &lt;code&gt;--proxy=KEY_FROM_PROXY_LIST&lt;/code&gt; to use the IP_ADDRESS:PORT of that key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest proxy_test.py --proxy=proxy1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Changing the User-Agent:&lt;/h3&gt; &#xA;&lt;p&gt;🔵 If you wish to change the User-Agent for your browser tests (Chromium and Firefox only), you can add &lt;code&gt;--agent=&#34;USER AGENT STRING&#34;&lt;/code&gt; as an argument on the command-line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest user_agent_test.py --agent=&#34;Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Handling Pop-Up Alerts:&lt;/h3&gt; &#xA;&lt;p&gt;🔵 &lt;code translate=&#34;no&#34;&gt;self.accept_alert()&lt;/code&gt; automatically waits for and accepts alert pop-ups. &lt;code translate=&#34;no&#34;&gt;self.dismiss_alert()&lt;/code&gt; automatically waits for and dismisses alert pop-ups. On occasion, some methods like &lt;code translate=&#34;no&#34;&gt;self.click(SELECTOR)&lt;/code&gt; might dismiss a pop-up on its own because they call JavaScript to make sure that the &lt;code translate=&#34;no&#34;&gt;readyState&lt;/code&gt; of the page is &lt;code translate=&#34;no&#34;&gt;complete&lt;/code&gt; before advancing. If you&#39;re trying to accept a pop-up that got dismissed this way, use this workaround: Call &lt;code translate=&#34;no&#34;&gt;self.find_element(SELECTOR).click()&lt;/code&gt; instead, (which will let the pop-up remain on the screen), and then use &lt;code translate=&#34;no&#34;&gt;self.accept_alert()&lt;/code&gt; to accept the pop-up (&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/issues/600#issuecomment-647270426&#34;&gt;more on that here&lt;/a&gt;). If pop-ups are intermittent, wrap code in a try/except block.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Building Guided Tours for Websites:&lt;/h3&gt; &#xA;&lt;p&gt;🔵 Learn about &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/tour_examples/ReadMe.md&#34;&gt;SeleniumBase Interactive Walkthroughs&lt;/a&gt; (in the &lt;code&gt;examples/tour_examples/&lt;/code&gt; folder). It&#39;s great for prototyping a website onboarding experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;utilizing_advanced_features&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Production Environments &amp;amp; Integrations:&lt;/h3&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; ▶️ Here are some things you can do to set up a production environment for your testing. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;You can set up a &lt;a href=&#34;https://jenkins.io/&#34; target=&#34;_blank&#34;&gt;Jenkins&lt;/a&gt; build server for running tests at regular intervals. For a real-world Jenkins example of headless browser automation in action, check out the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/azure/jenkins/ReadMe.md&#34;&gt;SeleniumBase Jenkins example on Azure&lt;/a&gt; or the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/integrations/google_cloud/ReadMe.md&#34;&gt;SeleniumBase Jenkins example on Google Cloud&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;You can use &lt;a href=&#34;https://selenium.dev/documentation/en/grid/&#34; target=&#34;_blank&#34;&gt;the Selenium Grid&lt;/a&gt; to scale your testing by distributing tests on several machines with parallel execution. To do this, check out the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/utilities/selenium_grid&#34;&gt;SeleniumBase selenium_grid folder&lt;/a&gt;, which should have everything you need, including the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/utilities/selenium_grid/ReadMe.md&#34;&gt;Selenium Grid ReadMe&lt;/a&gt; to help you get started.&lt;/li&gt; &#xA;  &lt;li&gt;If you&#39;re using the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/help_docs/mysql_installation.md&#34;&gt;SeleniumBase MySQL feature&lt;/a&gt; to save results from tests running on a server machine, you can install &lt;a href=&#34;https://dev.mysql.com/downloads/tools/workbench/&#34;&gt;MySQL Workbench&lt;/a&gt; to help you read &amp;amp; write from your DB more easily.&lt;/li&gt; &#xA;  &lt;li&gt;If you&#39;re using AWS, you can set up an &lt;a href=&#34;https://aws.amazon.com/s3/&#34; target=&#34;_blank&#34;&gt;Amazon S3&lt;/a&gt; account for saving log files and screenshots from your tests. To activate this feature, modify &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/seleniumbase/config/settings.py&#34;&gt;settings.py&lt;/a&gt; with connection details in the S3 section, and add &lt;code translate=&#34;no&#34;&gt;--with-s3-logging&lt;/code&gt; on the command-line when running your tests.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Here&#39;s an example of running tests with some additional features enabled:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest [YOUR_TEST_FILE.py] --with-db-reporting --with-s3-logging&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a id=&#34;detailed_method_specifications&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Detailed Method Specifications and Examples:&lt;/h3&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Navigating to a web page: (and related commands)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.open(&#34;https://xkcd.com/378/&#34;)  # This method opens the specified page.&#xA;&#xA;self.go_back()  # This method navigates the browser to the previous page.&#xA;&#xA;self.go_forward()  # This method navigates the browser forward in history.&#xA;&#xA;self.refresh_page()  # This method reloads the current page.&#xA;&#xA;self.get_current_url()  # This method returns the current page URL.&#xA;&#xA;self.get_page_source()  # This method returns the current page source.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;b&gt;ProTip™:&lt;/b&gt; You can use the &lt;code translate=&#34;no&#34;&gt;self.get_page_source()&lt;/code&gt; method with Python&#39;s &lt;code translate=&#34;no&#34;&gt;find()&lt;/code&gt; command to parse through HTML to find something specific. (For more advanced parsing, see the &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/examples/test_parse_soup.py&#34;&gt;BeautifulSoup example&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;source = self.get_page_source()&#xA;head_open_tag = source.find(&#39;&amp;lt;head&amp;gt;&#39;)&#xA;head_close_tag = source.find(&#39;&amp;lt;/head&amp;gt;&#39;, head_open_tag)&#xA;everything_inside_head = source[head_open_tag+len(&#39;&amp;lt;head&amp;gt;&#39;):head_close_tag]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Clicking:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To click an element on the page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.click(&#34;div#my_id&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ProTip™:&lt;/strong&gt; In most web browsers, you can right-click on a page and select &lt;code&gt;Inspect Element&lt;/code&gt; to see the CSS selector details that you&#39;ll need to create your own scripts.&lt;/p&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Typing Text:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code translate=&#34;no&#34;&gt;self.type(selector, text)&lt;/code&gt; # updates the text from the specified element with the specified value. An exception is raised if the element is missing or if the text field is not editable. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.type(&#34;input#id_value&#34;, &#34;2012&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code translate=&#34;no&#34;&gt;self.add_text()&lt;/code&gt; or the &lt;a href=&#34;https://www.selenium.dev/documentation/webdriver/&#34; target=&#34;_blank&#34;&gt;WebDriver&lt;/a&gt; &lt;code translate=&#34;no&#34;&gt;.send_keys()&lt;/code&gt; command, but those won&#39;t clear the text box first if there&#39;s already text inside.&lt;/p&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Getting the text from an element on a page:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;text = self.get_text(&#34;header h2&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Getting the attribute value from an element on a page:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;attribute = self.get_attribute(&#34;#comic img&#34;, &#34;title&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Asserting existence of an element on a page within some number of seconds:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.wait_for_element_present(&#34;div.my_class&#34;, timeout=10)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(NOTE: You can also use: &lt;code&gt;self.assert_element_present(ELEMENT)&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Asserting visibility of an element on a page within some number of seconds:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.wait_for_element_visible(&#34;a.my_class&#34;, timeout=5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(NOTE: The short versions of that are &lt;code&gt;self.find_element(ELEMENT)&lt;/code&gt; and &lt;code&gt;self.assert_element(ELEMENT)&lt;/code&gt;. The &lt;code&gt;find_element()&lt;/code&gt; version returns the element.)&lt;/p&gt; &#xA;&lt;p&gt;Since the line above returns the element, you can combine that with &lt;code&gt;.click()&lt;/code&gt; as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.find_element(&#34;a.my_class&#34;, timeout=5).click()&#xA;&#xA;# But you&#39;re better off using the following statement, which does the same thing:&#xA;&#xA;self.click(&#34;a.my_class&#34;)  # DO IT THIS WAY!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;ProTip™:&lt;/strong&gt; You can use dots to signify class names (Ex: &lt;code&gt;div.class_name&lt;/code&gt;) as a simplified version of &lt;code&gt;div[class=&#34;class_name&#34;]&lt;/code&gt; within a CSS selector.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;*=&lt;/code&gt; to search for any partial value in a CSS selector as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.click(&#39;a[name*=&#34;partial_name&#34;]&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Asserting visibility of text inside an element on a page within some number of seconds:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.assert_text(&#34;Make it so!&#34;, &#34;div#trek div.picard div.quotes&#34;)&#xA;self.assert_text(&#34;Tea. Earl Grey. Hot.&#34;, &#34;div#trek div.picard div.quotes&#34;, timeout=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(NOTE: &lt;code&gt;self.find_text(TEXT, ELEMENT)&lt;/code&gt; and &lt;code&gt;self.wait_for_text(TEXT, ELEMENT)&lt;/code&gt; also do this. For backwards compatibility, older method names were kept, but the default timeout may be different.)&lt;/p&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Asserting Anything:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.assert_true(var1 == var2)&#xA;&#xA;self.assert_false(var1 == var2)&#xA;&#xA;self.assert_equal(var1, var2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 &lt;strong&gt;Useful Conditional Statements: (with creative examples)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;❓ &lt;code&gt;is_element_visible(selector):&lt;/code&gt; (visible on the page)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if self.is_element_visible(&#39;div#warning&#39;):&#xA;    print(&#34;Red Alert: Something bad might be happening!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;❓ &lt;code&gt;is_element_present(selector):&lt;/code&gt; (present in the HTML)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if self.is_element_present(&#39;div#top_secret img.tracking_cookie&#39;):&#xA;    self.contact_cookie_monster()  # Not a real SeleniumBase method&#xA;else:&#xA;    current_url = self.get_current_url()&#xA;    self.contact_the_nsa(url=current_url, message=&#34;Dark Zone Found&#34;)  # Not a real SeleniumBase method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def is_there_a_cloaked_klingon_ship_on_this_page():&#xA;    if self.is_element_present(&#34;div.ships div.klingon&#34;):&#xA;        return not self.is_element_visible(&#34;div.ships div.klingon&#34;)&#xA;    return False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;❓ &lt;code&gt;is_text_visible(text, selector):&lt;/code&gt; (text visible on element)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if self.is_text_visible(&#34;You Shall Not Pass!&#34;, &#34;h1&#34;):&#xA;    self.open(&#34;https://www.youtube.com/watch?v=3xYXUeSmb-Y&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; ▶️ Click for a longer example of &lt;code translate=&#34;no&#34;&gt;is_text_visible():&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):&#xA;    selector = &#34;div.superbowl_%s div.commercials div.transcript div.picard&#34; % superbowl_year&#xA;    if self.is_text_visible(&#34;Yes, it was I who summoned you all here.&#34;, selector):&#xA;        return &#34;Picard Paramount+ Superbowl Ad 2020&#34;&#xA;    elif self.is_text_visible(&#34;Commander, signal the following: Our Network is Secure!&#34;):&#xA;        return &#34;Picard Mirror Universe iboss Superbowl Ad 2018&#34;&#xA;    elif self.is_text_visible(&#34;For the Love of Marketing and Earl Grey Tea!&#34;, selector):&#xA;        return &#34;Picard Mirror Universe HubSpot Superbowl Ad 2015&#34;&#xA;    elif self.is_text_visible(&#34;Delivery Drones... Engage&#34;, selector):&#xA;        return &#34;Picard Mirror Universe Amazon Superbowl Ad 2015&#34;&#xA;    elif self.is_text_visible(&#34;Bing it on Screen!&#34;, selector):&#xA;        return &#34;Picard Mirror Universe Microsoft Superbowl Ad 2015&#34;&#xA;    elif self.is_text_visible(&#34;OK Glass, Make it So!&#34;, selector):&#xA;        return &#34;Picard Mirror Universe Google Superbowl Ad 2015&#34;&#xA;    elif self.is_text_visible(&#34;Number One, I&#39;ve Never Seen Anything Like It.&#34;, selector):&#xA;        return &#34;Picard Mirror Universe Tesla Superbowl Ad 2015&#34;&#xA;    elif self.is_text_visible(&#34;Let us make sure history never forgets the name ... Facebook&#34;, selector):&#xA;        return &#34;Picard Mirror Universe Facebook Superbowl Ad 2015&#34;&#xA;    elif self.is_text_visible(&#34;&#34;&#34;With the first link, the chain is forged.&#xA;                              The first speech censored, the first thought forbidden,&#xA;                              the first freedom denied, chains us all irrevocably.&#34;&#34;&#34;, selector):&#xA;        return &#34;Picard Mirror Universe Wikimedia Superbowl Ad 2015&#34;&#xA;    else:&#xA;        raise Exception(&#34;Reports of my assimilation are greatly exaggerated.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;❓ &lt;code&gt;is_link_text_visible(link_text):&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if self.is_link_text_visible(&#34;Stop! Hammer time!&#34;):&#xA;    self.click_link(&#34;Stop! Hammer time!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔵 Switching Tabs:&lt;/h3&gt; &#xA;&lt;p&gt;If your test opens up a new tab/window, you can switch to it. (SeleniumBase automatically switches to new tabs that don&#39;t open to &lt;code translate=&#34;no&#34;&gt;about:blank&lt;/code&gt; URLs.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.switch_to_window(1)  # This switches to the new tab (0 is the first one)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔵 How to handle iframes:&lt;/h3&gt; &#xA;&lt;p&gt;🔵 &lt;b&gt;iframes&lt;/b&gt; follow the same principle as new windows: You must first switch to the iframe if you want to perform actions in there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.switch_to_frame(&#34;iframe&#34;)&#xA;# ... Now perform actions inside the iframe&#xA;self.switch_to_parent_frame()  # Exit the current iframe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To exit from multiple iframes, use &lt;code&gt;self.switch_to_default_content()&lt;/code&gt;. (If inside a single iframe, this has the same effect as &lt;code&gt;self.switch_to_parent_frame()&lt;/code&gt;.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.switch_to_frame(&#39;iframe[name=&#34;frame1&#34;]&#39;)&#xA;self.switch_to_frame(&#39;iframe[name=&#34;frame2&#34;]&#39;)&#xA;# ... Now perform actions inside the inner iframe&#xA;self.switch_to_default_content()  # Back to the main page&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 You can also use a context manager to act inside iframes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with self.frame_switch(&#34;iframe&#34;):&#xA;    # ... Now perform actions while inside the code block&#xA;# You have left the iframe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works with nested iframes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with self.frame_switch(&#39;iframe[name=&#34;frame1&#34;]&#39;):&#xA;    with self.frame_switch(&#39;iframe[name=&#34;frame2&#34;]&#39;):&#xA;        # ... Now perform actions while inside the code block&#xA;    # You are now back inside the first iframe&#xA;# You have left all the iframes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔵 How to execute custom jQuery scripts:&lt;/h3&gt; &#xA;&lt;p&gt;jQuery is a powerful JavaScript library that allows you to perform advanced actions in a web browser. If the web page you&#39;re on already has jQuery loaded, you can start executing jQuery scripts immediately. You&#39;d know this because the web page would contain something like the following in the HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;🔵 It&#39;s OK if you want to use jQuery on a page that doesn&#39;t have it loaded yet. To do so, run the following command first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.activate_jquery()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; ▶️ Here are some examples of using jQuery in your scripts. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.execute_script(&#34;jQuery, window.scrollTo(0, 600)&#34;)  # Scrolling the page&#xA;&#xA;self.execute_script(&#34;jQuery(&#39;#annoying-widget&#39;).hide()&#34;)  # Hiding elements on a page&#xA;&#xA;self.execute_script(&#34;jQuery(&#39;#hidden-widget&#39;).show(0)&#34;)  # Showing hidden elements on a page&#xA;&#xA;self.execute_script(&#34;jQuery(&#39;#annoying-button a&#39;).remove()&#34;)  # Removing elements on a page&#xA;&#xA;self.execute_script(&#34;jQuery(&#39;%s&#39;).mouseover()&#34; % (mouse_over_item))  # Mouse-over elements on a page&#xA;&#xA;self.execute_script(&#34;jQuery(&#39;input#the_id&#39;).val(&#39;my_text&#39;)&#34;)  # Fast text input on a page&#xA;&#xA;self.execute_script(&#34;jQuery(&#39;div#dropdown a.link&#39;).click()&#34;)  # Click elements on a page&#xA;&#xA;self.execute_script(&#34;return jQuery(&#39;div#amazing&#39;)[0].text&#34;)  # Returns the css &#34;text&#34; of the element given&#xA;&#xA;self.execute_script(&#34;return jQuery(&#39;textarea&#39;)[2].value&#34;)  # Returns the css &#34;value&#34; of the 3rd textarea element on the page&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Most of the above commands can be done directly with built-in SeleniumBase methods.)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;🔵 How to handle a restrictive CSP:&lt;/h3&gt; &#xA;&lt;p&gt;❗ Some websites have a restrictive &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&#34;&gt;Content Security Policy&lt;/a&gt; to prevent users from loading jQuery and other external libraries onto their websites. If you need to use jQuery or another JS library on those websites, add &lt;code&gt;--disable-csp&lt;/code&gt; as a &lt;code&gt;pytest&lt;/code&gt; command-line option to load a Chromium extension that bypasses the CSP.&lt;/p&gt; &#xA;&lt;h3&gt;🔵 More JavaScript fun:&lt;/h3&gt; &#xA;&lt;div&gt;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; ▶️ In this example, JavaScript creates a referral button on a page, which is then clicked. (&lt;b&gt;click to expand&lt;/b&gt;)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;start_page = &#34;https://xkcd.com/465/&#34;&#xA;destination_page = &#34;https://github.com/seleniumbase/SeleniumBase&#34;&#xA;self.open(start_page)&#xA;referral_link = &#39;&#39;&#39;&amp;lt;a class=&#39;analytics test&#39; href=&#39;%s&#39;&amp;gt;Free-Referral Button!&amp;lt;/a&amp;gt;&#39;&#39;&#39; % destination_page&#xA;self.execute_script(&#39;&#39;&#39;document.body.innerHTML = \&#34;%s\&#34;&#39;&#39;&#39; % referral_link)&#xA;self.click(&#34;a.analytics&#34;)  # Clicks the generated button&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;(Due to popular demand, this traffic generation example has been included in SeleniumBase with the &lt;code translate=&#34;no&#34;&gt;self.generate_referral(start_page, end_page)&lt;/code&gt; and the &lt;code translate=&#34;no&#34;&gt;self.generate_traffic(start_page, end_page, loops)&lt;/code&gt; methods.)&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;🔵 How to use deferred asserts:&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s say you want to verify multiple different elements on a web page in a single test, but you don&#39;t want the test to fail until you verified several elements at once so that you don&#39;t have to rerun the test to find more missing elements on the same page. That&#39;s where deferred asserts come in. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from seleniumbase import BaseCase&#xA;BaseCase.main(__name__, __file__)&#xA;&#xA;class DeferredAssertTests(BaseCase):&#xA;    def test_deferred_asserts(self):&#xA;        self.open(&#34;https://xkcd.com/993/&#34;)&#xA;        self.wait_for_element(&#34;#comic&#34;)&#xA;        self.deferred_assert_element(&#39;img[alt=&#34;Brand Identity&#34;]&#39;)&#xA;        self.deferred_assert_element(&#39;img[alt=&#34;Rocket Ship&#34;]&#39;)  # Will Fail&#xA;        self.deferred_assert_element(&#34;#comicmap&#34;)&#xA;        self.deferred_assert_text(&#34;Fake Item&#34;, &#34;ul.comicNav&#34;)  # Will Fail&#xA;        self.deferred_assert_text(&#34;Random&#34;, &#34;ul.comicNav&#34;)&#xA;        self.deferred_assert_element(&#39;a[name=&#34;Super Fake !!!&#34;]&#39;)  # Will Fail&#xA;        self.deferred_assert_exact_text(&#34;Brand Identity&#34;, &#34;#ctitle&#34;)&#xA;        self.deferred_assert_exact_text(&#34;Fake Food&#34;, &#34;#comic&#34;)  # Will Fail&#xA;        self.process_deferred_asserts()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code translate=&#34;no&#34;&gt;deferred_assert_element()&lt;/code&gt; and &lt;code translate=&#34;no&#34;&gt;deferred_assert_text()&lt;/code&gt; will save any exceptions that would be raised. To flush out all the failed deferred asserts into a single exception, make sure to call &lt;code translate=&#34;no&#34;&gt;self.process_deferred_asserts()&lt;/code&gt; at the end of your test method. If your test hits multiple pages, you can call &lt;code translate=&#34;no&#34;&gt;self.process_deferred_asserts()&lt;/code&gt; before navigating to a new page so that the screenshot from your log files matches the URL where the deferred asserts were made.&lt;/p&gt; &#xA;&lt;h3&gt;🔵 How to access raw &lt;a href=&#34;https://www.selenium.dev/documentation/webdriver/&#34; target=&#34;_blank&#34;&gt;WebDriver&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;If you need access to any commands that come with standard &lt;a href=&#34;https://www.selenium.dev/documentation/webdriver/&#34; target=&#34;_blank&#34;&gt;WebDriver&lt;/a&gt;, you can call them directly like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;self.driver.delete_all_cookies()&#xA;capabilities = self.driver.capabilities&#xA;self.driver.find_elements(&#34;partial link text&#34;, &#34;GitHub&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(In general, you&#39;ll want to use the SeleniumBase versions of methods when available.)&lt;/p&gt; &#xA;&lt;h3&gt;🔵 How to retry failing tests automatically:&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code translate=&#34;no&#34;&gt;pytest --reruns=NUM&lt;/code&gt; to retry failing tests that many times. Add &lt;code translate=&#34;no&#34;&gt;--reruns-delay=SECONDS&lt;/code&gt; to wait that many seconds between retries. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pytest --reruns=1 --reruns-delay=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the &lt;code translate=&#34;no&#34;&gt;@retry_on_exception()&lt;/code&gt; decorator to retry failing methods. (First import: &lt;code translate=&#34;no&#34;&gt;from seleniumbase import decorators&lt;/code&gt;). To learn more about SeleniumBase decorators, &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/tree/master/seleniumbase/common&#34;&gt;click here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Catch bugs in QA before deploying code to Production!&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p align=&#34;left&#34;&gt;&lt;a href=&#34;https://seleniumbase.io/error_page&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/gif/error_page.gif&#34; alt=&#34;Catch bugs in QA before deploying code to Production!&#34; title=&#34;Catch bugs in QA before deploying code to Production!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/logo7.png&#34; title=&#34;SeleniumBase&#34; width=&#34;32&#34;&gt; Wrap-Up&lt;/h3&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;div&gt;&#xA; &lt;b&gt;If you see something, say something!&lt;/b&gt;&#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed-raw/seleniumbase/SeleniumBase.svg?color=22BB88&#34; title=&#34;Closed Issues&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/pulls?q=is%3Apr+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr-closed/seleniumbase/SeleniumBase.svg?logo=github&amp;amp;logoColor=white&amp;amp;color=22BB99&#34; title=&#34;Closed Pull Requests&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/sb_logo_10t.png&#34; alt=&#34;SeleniumBase&#34; title=&#34;SeleniumBase&#34; width=&#34;274&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/seleniumbase/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/seleniumbase.svg?color=22AAEE&amp;amp;logo=python&amp;amp;logoColor=FEDC54&#34; title=&#34;Supported Python Versions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;div&gt; &#xA; &lt;span&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLp9uKicxkBc5UIlGi2BuE3aWC7JyXpD3m&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/youtube.png&#34; title=&#34;SeleniumBase Playlist on YouTube&#34; alt=&#34;SeleniumBase Playlist on YouTube&#34; width=&#34;70&#34;&gt;&lt;/a&gt;&lt;/span&gt; &#xA; &lt;span&gt;&lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/img/social/share_github.svg?sanitize=true&#34; title=&#34;SeleniumBase on GitHub&#34; alt=&#34;SeleniumBase on GitHub&#34; width=&#34;64&#34;&gt;&lt;/a&gt;&lt;/span&gt; &#xA; &lt;span&gt;&lt;a href=&#34;https://discord.gg/EdhQTn3EyE&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/other/discord_icon.png&#34; title=&#34;SeleniumBase on Discord&#34; alt=&#34;SeleniumBase on Discord&#34; width=&#34;66&#34;&gt;&lt;/a&gt;&lt;/span&gt; &#xA; &lt;span&gt;&lt;a href=&#34;https://www.facebook.com/SeleniumBase&#34;&gt;&lt;img src=&#34;https://seleniumbase.io/img/social/share_facebook.svg?sanitize=true&#34; title=&#34;SeleniumBase on Facebook&#34; alt=&#34;SeleniumBase on Facebook&#34; width=&#34;62&#34;&gt;&lt;/a&gt;&lt;/span&gt; &#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt;&#xA;&lt;div&gt;&#xA; &lt;b&gt;&lt;a href=&#34;https://github.com/mdmintz&#34;&gt;https://github.com/mdmintz&lt;/a&gt;&lt;/b&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;div&gt;&#xA; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/&#34;&gt;&lt;img src=&#34;https://seleniumbase.github.io/cdn/img/super_logo_sb3.png&#34; title=&#34;SeleniumBase&#34; width=&#34;274&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a href=&#34;https://seleniumbase.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-seleniumbase.io-11BBAA.svg?sanitize=true&#34; alt=&#34;SeleniumBase Docs&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-22BBCC.svg?sanitize=true&#34; title=&#34;SeleniumBase&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested%20with-SeleniumBase-04C38E.svg?sanitize=true&#34; alt=&#34;Tested with SeleniumBase&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/seleniumbase/SeleniumBase/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/seleniumbase/seleniumbase.svg?color=19A57B&#34; title=&#34;Stargazers&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a href=&#34;https://hellogithub.com/repository/c6be2d0f1969448697683d11a4ff915e&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://abroad.hellogithub.com/v1/widgets/recommend.svg?rid=c6be2d0f1969448697683d11a4ff915e&amp;amp;claim_uid=xcrm4p9j3d6JCO5&amp;amp;theme=small&#34; alt=&#34;Featured｜HelloGitHub&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/EdhQTn3EyE&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join-discord-infomational&#34; alt=&#34;Join the SeleniumBase chat on Discord&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://gitter.im/seleniumbase/SeleniumBase&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/seleniumbase/SeleniumBase.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;div&gt;&#xA; &lt;a href=&#34;https://pepy.tech/project/seleniumbase&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/seleniumbase&#34; alt=&#34;SeleniumBase PyPI downloads&#34;&gt;&lt;/a&gt; &#xA; &lt;img src=&#34;https://views.whatilearened.today/views/github/seleniumbase/SeleniumBase.svg?sanitize=true&#34; width=&#34;98px&#34; height=&#34;20px&#34; alt=&#34;Views&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;left&#34;&gt;&lt;/div&gt;</summary>
  </entry>
</feed>