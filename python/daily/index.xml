<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-19T01:34:28Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ArchipelagoMW/Archipelago</title>
    <updated>2025-01-19T01:34:28Z</updated>
    <id>tag:github.com,2025-01-19:/ArchipelagoMW/Archipelago</id>
    <link href="https://github.com/ArchipelagoMW/Archipelago" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Archipelago Multi-Game Randomizer and Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://archipelago.gg&#34;&gt;Archipelago&lt;/a&gt; &lt;img src=&#34;https://discordapp.com/api/guilds/731205301247803413/widget.png?style=shield&#34; alt=&#34;Discord Shield&#34;&gt; | &lt;a href=&#34;https://github.com/ArchipelagoMW/Archipelago/releases&#34;&gt;Install&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Archipelago provides a generic framework for developing multiworld capability for game randomizers. In all cases, presently, Archipelago is also the randomizer itself.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following games are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Legend of Zelda: A Link to the Past&lt;/li&gt; &#xA; &lt;li&gt;Factorio&lt;/li&gt; &#xA; &lt;li&gt;Minecraft&lt;/li&gt; &#xA; &lt;li&gt;Subnautica&lt;/li&gt; &#xA; &lt;li&gt;Slay the Spire&lt;/li&gt; &#xA; &lt;li&gt;Risk of Rain 2&lt;/li&gt; &#xA; &lt;li&gt;The Legend of Zelda: Ocarina of Time&lt;/li&gt; &#xA; &lt;li&gt;Timespinner&lt;/li&gt; &#xA; &lt;li&gt;Super Metroid&lt;/li&gt; &#xA; &lt;li&gt;Secret of Evermore&lt;/li&gt; &#xA; &lt;li&gt;Final Fantasy&lt;/li&gt; &#xA; &lt;li&gt;Rogue Legacy&lt;/li&gt; &#xA; &lt;li&gt;VVVVVV&lt;/li&gt; &#xA; &lt;li&gt;Raft&lt;/li&gt; &#xA; &lt;li&gt;Super Mario 64&lt;/li&gt; &#xA; &lt;li&gt;Meritous&lt;/li&gt; &#xA; &lt;li&gt;Super Metroid/Link to the Past combo randomizer (SMZ3)&lt;/li&gt; &#xA; &lt;li&gt;ChecksFinder&lt;/li&gt; &#xA; &lt;li&gt;ArchipIDLE&lt;/li&gt; &#xA; &lt;li&gt;Hollow Knight&lt;/li&gt; &#xA; &lt;li&gt;The Witness&lt;/li&gt; &#xA; &lt;li&gt;Sonic Adventure 2: Battle&lt;/li&gt; &#xA; &lt;li&gt;Starcraft 2&lt;/li&gt; &#xA; &lt;li&gt;Donkey Kong Country 3&lt;/li&gt; &#xA; &lt;li&gt;Dark Souls 3&lt;/li&gt; &#xA; &lt;li&gt;Super Mario World&lt;/li&gt; &#xA; &lt;li&gt;PokÃ©mon Red and Blue&lt;/li&gt; &#xA; &lt;li&gt;Hylics 2&lt;/li&gt; &#xA; &lt;li&gt;Overcooked! 2&lt;/li&gt; &#xA; &lt;li&gt;Zillion&lt;/li&gt; &#xA; &lt;li&gt;Lufia II Ancient Cave&lt;/li&gt; &#xA; &lt;li&gt;Blasphemous&lt;/li&gt; &#xA; &lt;li&gt;Wargroove&lt;/li&gt; &#xA; &lt;li&gt;Stardew Valley&lt;/li&gt; &#xA; &lt;li&gt;The Legend of Zelda&lt;/li&gt; &#xA; &lt;li&gt;The Messenger&lt;/li&gt; &#xA; &lt;li&gt;Kingdom Hearts 2&lt;/li&gt; &#xA; &lt;li&gt;The Legend of Zelda: Link&#39;s Awakening DX&lt;/li&gt; &#xA; &lt;li&gt;Clique&lt;/li&gt; &#xA; &lt;li&gt;Adventure&lt;/li&gt; &#xA; &lt;li&gt;DLC Quest&lt;/li&gt; &#xA; &lt;li&gt;Noita&lt;/li&gt; &#xA; &lt;li&gt;Undertale&lt;/li&gt; &#xA; &lt;li&gt;Bumper Stickers&lt;/li&gt; &#xA; &lt;li&gt;Mega Man Battle Network 3: Blue Version&lt;/li&gt; &#xA; &lt;li&gt;Muse Dash&lt;/li&gt; &#xA; &lt;li&gt;DOOM 1993&lt;/li&gt; &#xA; &lt;li&gt;Terraria&lt;/li&gt; &#xA; &lt;li&gt;Lingo&lt;/li&gt; &#xA; &lt;li&gt;PokÃ©mon Emerald&lt;/li&gt; &#xA; &lt;li&gt;DOOM II&lt;/li&gt; &#xA; &lt;li&gt;Shivers&lt;/li&gt; &#xA; &lt;li&gt;Heretic&lt;/li&gt; &#xA; &lt;li&gt;Landstalker: The Treasures of King Nole&lt;/li&gt; &#xA; &lt;li&gt;Final Fantasy Mystic Quest&lt;/li&gt; &#xA; &lt;li&gt;TUNIC&lt;/li&gt; &#xA; &lt;li&gt;Kirby&#39;s Dream Land 3&lt;/li&gt; &#xA; &lt;li&gt;Celeste 64&lt;/li&gt; &#xA; &lt;li&gt;Zork Grand Inquisitor&lt;/li&gt; &#xA; &lt;li&gt;Castlevania 64&lt;/li&gt; &#xA; &lt;li&gt;A Short Hike&lt;/li&gt; &#xA; &lt;li&gt;Yoshi&#39;s Island&lt;/li&gt; &#xA; &lt;li&gt;Mario &amp;amp; Luigi: Superstar Saga&lt;/li&gt; &#xA; &lt;li&gt;Bomb Rush Cyberfunk&lt;/li&gt; &#xA; &lt;li&gt;Aquaria&lt;/li&gt; &#xA; &lt;li&gt;Yu-Gi-Oh! Ultimate Masters: World Championship Tournament 2006&lt;/li&gt; &#xA; &lt;li&gt;A Hat in Time&lt;/li&gt; &#xA; &lt;li&gt;Old School Runescape&lt;/li&gt; &#xA; &lt;li&gt;Kingdom Hearts 1&lt;/li&gt; &#xA; &lt;li&gt;Mega Man 2&lt;/li&gt; &#xA; &lt;li&gt;Yacht Dice&lt;/li&gt; &#xA; &lt;li&gt;Faxanadu&lt;/li&gt; &#xA; &lt;li&gt;Saving Princess&lt;/li&gt; &#xA; &lt;li&gt;Castlevania: Circle of the Moon&lt;/li&gt; &#xA; &lt;li&gt;Inscryption&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For setup and instructions check out our &lt;a href=&#34;https://archipelago.gg/tutorial/&#34;&gt;tutorials page&lt;/a&gt;. Downloads can be found at &lt;a href=&#34;https://github.com/ArchipelagoMW/Archipelago/releases&#34;&gt;Releases&lt;/a&gt;, including compiled windows binaries.&lt;/p&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;Archipelago is built upon a strong legacy of brilliant hobbyists. We want to honor that legacy by showing it here. The repositories which Archipelago is built upon, inspired by, or otherwise owes its gratitude to are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bonta0/ALttPEntranceRandomizer/tree/multiworld_31&#34;&gt;bonta0&#39;s MultiWorld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AmazingAmpharos/ALttPEntranceRandomizer&#34;&gt;AmazingAmpharos&#39; Entrance Randomizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sporchia/alttp_vt_randomizer&#34;&gt;VT Web Randomizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Dessyreqt/alttprandomizer&#34;&gt;Dessyreqt&#39;s alttprandomizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ijwu/Enemizer/commits?author=Zarby89&#34;&gt;Zarby89&#39;s&lt;/a&gt; and &lt;a href=&#34;https://github.com/Ijwu/Enemizer/commits?author=sosuke3&#34;&gt;sosuke3&#39;s&lt;/a&gt; contributions to Enemizer, which make up the vast majority of Enemizer contributions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recognize that there is a strong community of incredibly smart people that have come before us and helped pave the path. Just because one person&#39;s name may be in a repository title does not mean that only one person made that project happen. We can&#39;t hope to perfectly cover every single contribution that lead up to Archipelago, but we hope to honor them fairly.&lt;/p&gt; &#xA;&lt;h3&gt;Path to the Archipelago&lt;/h3&gt; &#xA;&lt;p&gt;Archipelago was directly forked from bonta0&#39;s &lt;code&gt;multiworld_31&lt;/code&gt; branch of ALttPEntranceRandomizer (this project has a long legacy of its own, please check it out linked above) on January 12, 2020. The repository was then named to &lt;em&gt;MultiWorld-Utilities&lt;/em&gt; to better encompass its intended function. As Archipelago matured, then known as &#34;Berserker&#39;s MultiWorld&#34; by some, we found it necessary to transform our repository into a root level repository (as opposed to a &#39;forked repo&#39;) and change the name (which came later) to better reflect our project.&lt;/p&gt; &#xA;&lt;h2&gt;Running Archipelago&lt;/h2&gt; &#xA;&lt;p&gt;For most people, all you need to do is head over to the &lt;a href=&#34;https://github.com/ArchipelagoMW/Archipelago/releases&#34;&gt;releases page&lt;/a&gt;, then download and run the appropriate installer, or AppImage for Linux-based systems.&lt;/p&gt; &#xA;&lt;p&gt;If you are a developer or are running on a platform with no compiled releases available, please see our doc on &lt;a href=&#34;https://raw.githubusercontent.com/ArchipelagoMW/Archipelago/main/docs/running%20from%20source.md&#34;&gt;running Archipelago from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related Repositories&lt;/h2&gt; &#xA;&lt;p&gt;This project makes use of multiple other projects. We wouldn&#39;t be here without these other repositories and the contributions of their developers, past and present.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ArchipelagoMW/z3randomizer&#34;&gt;z3randomizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ijwu/Enemizer&#34;&gt;Enemizer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TestRunnerSRL/OoT-Randomizer&#34;&gt;Ocarina of Time Randomizer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute to Archipelago, including the WebHost, core program, or by adding a new game, see our &lt;a href=&#34;https://raw.githubusercontent.com/ArchipelagoMW/Archipelago/main/docs/contributing.md&#34;&gt;Contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;For Frequently asked questions, please see the website&#39;s &lt;a href=&#34;https://archipelago.gg/faq/en/&#34;&gt;FAQ Page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/ArchipelagoMW/Archipelago/main/docs/code_of_conduct.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AutoGPTQ/AutoGPTQ</title>
    <updated>2025-01-19T01:34:28Z</updated>
    <id>tag:github.com,2025-01-19:/AutoGPTQ/AutoGPTQ</id>
    <link href="https://github.com/AutoGPTQ/AutoGPTQ" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy-to-use LLMs quantization package with user-friendly apis, based on GPTQ algorithm.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;AutoGPTQ&lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;p&gt; ðŸš¨ AutoGPTQ development has stopped. Please switch to &lt;a href=&#34;https://github.com/ModelCloud/GPTQModel&#34;&gt;GPTQModel&lt;/a&gt; as drop-in replacement. ðŸš¨ &lt;/p&gt; &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;An easy-to-use LLM quantization package with user-friendly APIs, based on GPTQ algorithm (weight-only quantization).&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/PanQiWei/AutoGPTQ/releases&#34;&gt; &lt;img alt=&#34;GitHub release&#34; src=&#34;https://img.shields.io/github/release/PanQiWei/AutoGPTQ.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/auto-gptq/&#34;&gt; &lt;img alt=&#34;PyPI - Downloads&#34; src=&#34;https://img.shields.io/pypi/dd/auto-gptq&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;News or Update&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2024-02-15 - (News) - AutoGPTQ 0.7.0 is released, with &lt;a href=&#34;https://github.com/IST-DASLab/marlin&#34;&gt;Marlin&lt;/a&gt; int4*fp16 matrix multiplication kernel support, with the argument &lt;code&gt;use_marlin=True&lt;/code&gt; when loading models.&lt;/li&gt; &#xA; &lt;li&gt;2023-08-23 - (News) - ðŸ¤— Transformers, optimum and peft have integrated &lt;code&gt;auto-gptq&lt;/code&gt;, so now running and training GPTQ models can be more available to everyone! See &lt;a href=&#34;https://huggingface.co/blog/gptq-integration&#34;&gt;this blog&lt;/a&gt; and it&#39;s resources for more details!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;For more histories please turn to &lt;a href=&#34;https://raw.githubusercontent.com/AutoGPTQ/AutoGPTQ/main/docs/NEWS_OR_UPDATE.md&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Performance Comparison&lt;/h2&gt; &#xA;&lt;h3&gt;Inference Speed&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The result is generated using &lt;a href=&#34;https://raw.githubusercontent.com/AutoGPTQ/AutoGPTQ/main/examples/benchmark/generation_speed.py&#34;&gt;this script&lt;/a&gt;, batch size of input is 1, decode strategy is beam search and enforce the model to generate 512 tokens, speed metric is tokens/s (the larger, the better).&lt;/p&gt; &#xA; &lt;p&gt;The quantized model is loaded using the setup that can gain the fastest inference speed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model&lt;/th&gt; &#xA;   &lt;th&gt;GPU&lt;/th&gt; &#xA;   &lt;th&gt;num_beams&lt;/th&gt; &#xA;   &lt;th&gt;fp16&lt;/th&gt; &#xA;   &lt;th&gt;gptq-int4&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;llama-7b&lt;/td&gt; &#xA;   &lt;td&gt;1xA100-40G&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;18.87&lt;/td&gt; &#xA;   &lt;td&gt;25.53&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;llama-7b&lt;/td&gt; &#xA;   &lt;td&gt;1xA100-40G&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;68.79&lt;/td&gt; &#xA;   &lt;td&gt;91.30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;moss-moon 16b&lt;/td&gt; &#xA;   &lt;td&gt;1xA100-40G&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;12.48&lt;/td&gt; &#xA;   &lt;td&gt;15.25&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;moss-moon 16b&lt;/td&gt; &#xA;   &lt;td&gt;1xA100-40G&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;OOM&lt;/td&gt; &#xA;   &lt;td&gt;42.67&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;moss-moon 16b&lt;/td&gt; &#xA;   &lt;td&gt;2xA100-40G&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;06.83&lt;/td&gt; &#xA;   &lt;td&gt;06.78&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;moss-moon 16b&lt;/td&gt; &#xA;   &lt;td&gt;2xA100-40G&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;13.10&lt;/td&gt; &#xA;   &lt;td&gt;10.80&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt-j 6b&lt;/td&gt; &#xA;   &lt;td&gt;1xRTX3060-12G&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;OOM&lt;/td&gt; &#xA;   &lt;td&gt;29.55&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt-j 6b&lt;/td&gt; &#xA;   &lt;td&gt;1xRTX3060-12G&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;OOM&lt;/td&gt; &#xA;   &lt;td&gt;47.36&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Perplexity&lt;/h3&gt; &#xA;&lt;p&gt;For perplexity comparison, you can turn to &lt;a href=&#34;https://github.com/qwopqwop200/GPTQ-for-LLaMa#result&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/qwopqwop200/GPTQ-for-LLaMa#gptq-vs-bitsandbytes&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;AutoGPTQ is available on Linux and Windows only. You can install the latest stable release of AutoGPTQ from pip with pre-built wheels:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform version&lt;/th&gt; &#xA;   &lt;th&gt;Installation&lt;/th&gt; &#xA;   &lt;th&gt;Built against PyTorch&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CUDA 11.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install auto-gptq --no-build-isolation --extra-index-url https://huggingface.github.io/autogptq-index/whl/cu118/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.2.1+cu118&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CUDA 12.1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install auto-gptq --no-build-isolation&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.2.1+cu121&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ROCm 5.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install auto-gptq --no-build-isolation --extra-index-url https://huggingface.github.io/autogptq-index/whl/rocm573/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2.2.1+rocm5.7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;AutoGPTQ can be installed with the Triton dependency with &lt;code&gt;pip install auto-gptq[triton] --no-build-isolation&lt;/code&gt; in order to be able to use the Triton backend (currently only supports linux, no 3-bits quantization).&lt;/p&gt; &#xA;&lt;p&gt;For older AutoGPTQ, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/AutoGPTQ/AutoGPTQ/main/docs/INSTALLATION.md&#34;&gt;the previous releases installation table&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On NVIDIA systems, AutoGPTQ does not support &lt;a href=&#34;https://qiita.com/uyuni/items/733a93b975b524f89f46&#34;&gt;Maxwell or lower&lt;/a&gt; GPUs.&lt;/p&gt; &#xA;&lt;h3&gt;Install from source&lt;/h3&gt; &#xA;&lt;p&gt;Clone the source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/PanQiWei/AutoGPTQ.git &amp;amp;&amp;amp; cd AutoGPTQ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A few packages are required in order to build from source: &lt;code&gt;pip install numpy gekko pandas&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, install locally from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -vvv --no-build-isolation -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;BUILD_CUDA_EXT=0&lt;/code&gt; to disable pytorch extension building, but this is &lt;strong&gt;strongly discouraged&lt;/strong&gt; as AutoGPTQ then falls back on a slow python implementation.&lt;/p&gt; &#xA;&lt;p&gt;As a last resort, if the above command fails, you can try &lt;code&gt;python setup.py install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;On ROCm systems&lt;/h4&gt; &#xA;&lt;p&gt;To install from source for AMD GPUs supporting ROCm, please specify the &lt;code&gt;ROCM_VERSION&lt;/code&gt; environment variable. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ROCM_VERSION=5.6 pip install -vvv --no-build-isolation -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compilation can be speeded up by specifying the &lt;code&gt;PYTORCH_ROCM_ARCH&lt;/code&gt; variable (&lt;a href=&#34;https://github.com/pytorch/pytorch/raw/7b73b1e8a73a1777ebe8d2cd4487eb13da55b3ba/setup.py#L132&#34;&gt;reference&lt;/a&gt;) in order to build for a single target device, for example &lt;code&gt;gfx90a&lt;/code&gt; for MI200 series devices.&lt;/p&gt; &#xA;&lt;p&gt;For ROCm systems, the packages &lt;code&gt;rocsparse-dev&lt;/code&gt;, &lt;code&gt;hipsparse-dev&lt;/code&gt;, &lt;code&gt;rocthrust-dev&lt;/code&gt;, &lt;code&gt;rocblas-dev&lt;/code&gt; and &lt;code&gt;hipblas-dev&lt;/code&gt; are required to build.&lt;/p&gt; &#xA;&lt;h4&gt;On IntelÂ® GaudiÂ® 2 systems&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Notice: make sure you&#39;re in commit 65c2e15 or later&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To install from source for Intel Gaudi 2 HPUs, set the &lt;code&gt;BUILD_CUDA_EXT=0&lt;/code&gt; environment variable to disable building the CUDA PyTorch extension. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;BUILD_CUDA_EXT=0 pip install -vvv --no-build-isolation -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Notice that Intel Gaudi 2 uses an optimized kernel upon inference, and requires &lt;code&gt;BUILD_CUDA_EXT=0&lt;/code&gt; on non-CUDA machines.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quick Tour&lt;/h2&gt; &#xA;&lt;h3&gt;Quantization and Inference&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;warning: this is just a showcase of the usage of basic apis in AutoGPTQ, which uses only one sample to quantize a much small model, quality of quantized model using such little samples may not good.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Below is an example for the simplest use of &lt;code&gt;auto_gptq&lt;/code&gt; to quantize a model and inference after quantization:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from transformers import AutoTokenizer, TextGenerationPipeline&#xA;from auto_gptq import AutoGPTQForCausalLM, BaseQuantizeConfig&#xA;import logging&#xA;&#xA;logging.basicConfig(&#xA;    format=&#34;%(asctime)s %(levelname)s [%(name)s] %(message)s&#34;, level=logging.INFO, datefmt=&#34;%Y-%m-%d %H:%M:%S&#34;&#xA;)&#xA;&#xA;pretrained_model_dir = &#34;facebook/opt-125m&#34;&#xA;quantized_model_dir = &#34;opt-125m-4bit&#34;&#xA;&#xA;tokenizer = AutoTokenizer.from_pretrained(pretrained_model_dir, use_fast=True)&#xA;examples = [&#xA;    tokenizer(&#xA;        &#34;auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.&#34;&#xA;    )&#xA;]&#xA;&#xA;quantize_config = BaseQuantizeConfig(&#xA;    bits=4,  # quantize model to 4-bit&#xA;    group_size=128,  # it is recommended to set the value to 128&#xA;    desc_act=False,  # set to False can significantly speed up inference but the perplexity may slightly bad&#xA;)&#xA;&#xA;# load un-quantized model, by default, the model will always be loaded into CPU memory&#xA;model = AutoGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config)&#xA;&#xA;# quantize model, the examples should be list of dict whose keys can only be &#34;input_ids&#34; and &#34;attention_mask&#34;&#xA;model.quantize(examples)&#xA;&#xA;# save quantized model&#xA;model.save_quantized(quantized_model_dir)&#xA;&#xA;# save quantized model using safetensors&#xA;model.save_quantized(quantized_model_dir, use_safetensors=True)&#xA;&#xA;# push quantized model to Hugging Face Hub.&#xA;# to use use_auth_token=True, Login first via huggingface-cli login.&#xA;# or pass explcit token with: use_auth_token=&#34;hf_xxxxxxx&#34;&#xA;# (uncomment the following three lines to enable this feature)&#xA;# repo_id = f&#34;YourUserName/{quantized_model_dir}&#34;&#xA;# commit_message = f&#34;AutoGPTQ model for {pretrained_model_dir}: {quantize_config.bits}bits, gr{quantize_config.group_size}, desc_act={quantize_config.desc_act}&#34;&#xA;# model.push_to_hub(repo_id, commit_message=commit_message, use_auth_token=True)&#xA;&#xA;# alternatively you can save and push at the same time&#xA;# (uncomment the following three lines to enable this feature)&#xA;# repo_id = f&#34;YourUserName/{quantized_model_dir}&#34;&#xA;# commit_message = f&#34;AutoGPTQ model for {pretrained_model_dir}: {quantize_config.bits}bits, gr{quantize_config.group_size}, desc_act={quantize_config.desc_act}&#34;&#xA;# model.push_to_hub(repo_id, save_dir=quantized_model_dir, use_safetensors=True, commit_message=commit_message, use_auth_token=True)&#xA;&#xA;# load quantized model to the first GPU&#xA;model = AutoGPTQForCausalLM.from_quantized(quantized_model_dir, device=&#34;cuda:0&#34;)&#xA;&#xA;# download quantized model from Hugging Face Hub and load to the first GPU&#xA;# model = AutoGPTQForCausalLM.from_quantized(repo_id, device=&#34;cuda:0&#34;, use_safetensors=True, use_triton=False)&#xA;&#xA;# inference with model.generate&#xA;print(tokenizer.decode(model.generate(**tokenizer(&#34;auto_gptq is&#34;, return_tensors=&#34;pt&#34;).to(model.device))[0]))&#xA;&#xA;# or you can also use pipeline&#xA;pipeline = TextGenerationPipeline(model=model, tokenizer=tokenizer)&#xA;print(pipeline(&#34;auto-gptq is&#34;)[0][&#34;generated_text&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced features of model quantization, please reference to &lt;a href=&#34;https://raw.githubusercontent.com/AutoGPTQ/AutoGPTQ/main/examples/quantization/quant_with_alpaca.py&#34;&gt;this script&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customize Model&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Below is an example to extend `auto_gptq` to support `OPT` model, as you will see, it&#39;s very easy:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from auto_gptq.modeling import BaseGPTQForCausalLM&#xA;&#xA;&#xA;class OPTGPTQForCausalLM(BaseGPTQForCausalLM):&#xA;    # chained attribute name of transformer layer block&#xA;    layers_block_name = &#34;model.decoder.layers&#34;&#xA;    # chained attribute names of other nn modules that in the same level as the transformer layer block&#xA;    outside_layer_modules = [&#xA;        &#34;model.decoder.embed_tokens&#34;, &#34;model.decoder.embed_positions&#34;, &#34;model.decoder.project_out&#34;,&#xA;        &#34;model.decoder.project_in&#34;, &#34;model.decoder.final_layer_norm&#34;&#xA;    ]&#xA;    # chained attribute names of linear layers in transformer layer module&#xA;    # normally, there are four sub lists, for each one the modules in it can be seen as one operation,&#xA;    # and the order should be the order when they are truly executed, in this case (and usually in most cases),&#xA;    # they are: attention q_k_v projection, attention output projection, MLP project input, MLP project output&#xA;    inside_layer_modules = [&#xA;        [&#34;self_attn.k_proj&#34;, &#34;self_attn.v_proj&#34;, &#34;self_attn.q_proj&#34;],&#xA;        [&#34;self_attn.out_proj&#34;],&#xA;        [&#34;fc1&#34;],&#xA;        [&#34;fc2&#34;]&#xA;    ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After this, you can use &lt;code&gt;OPTGPTQForCausalLM.from_pretrained&lt;/code&gt; and other methods as shown in Basic.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Evaluation on Downstream Tasks&lt;/h3&gt; &#xA;&lt;p&gt;You can use tasks defined in &lt;code&gt;auto_gptq.eval_tasks&lt;/code&gt; to evaluate model&#39;s performance on specific down-stream task before and after quantization.&lt;/p&gt; &#xA;&lt;p&gt;The predefined tasks support all causal-language-models implemented in &lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;ðŸ¤— transformers&lt;/a&gt; and in this project.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Below is an example to evaluate `EleutherAI/gpt-j-6b` on sequence-classification task using `cardiffnlp/tweet_sentiment_multilingual` dataset:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from functools import partial&#xA;&#xA;import datasets&#xA;from transformers import AutoTokenizer, AutoModelForCausalLM, GenerationConfig&#xA;&#xA;from auto_gptq import AutoGPTQForCausalLM, BaseQuantizeConfig&#xA;from auto_gptq.eval_tasks import SequenceClassificationTask&#xA;&#xA;&#xA;MODEL = &#34;EleutherAI/gpt-j-6b&#34;&#xA;DATASET = &#34;cardiffnlp/tweet_sentiment_multilingual&#34;&#xA;TEMPLATE = &#34;Question:What&#39;s the sentiment of the given text? Choices are {labels}.\nText: {text}\nAnswer:&#34;&#xA;ID2LABEL = {&#xA;    0: &#34;negative&#34;,&#xA;    1: &#34;neutral&#34;,&#xA;    2: &#34;positive&#34;&#xA;}&#xA;LABELS = list(ID2LABEL.values())&#xA;&#xA;&#xA;def ds_refactor_fn(samples):&#xA;    text_data = samples[&#34;text&#34;]&#xA;    label_data = samples[&#34;label&#34;]&#xA;&#xA;    new_samples = {&#34;prompt&#34;: [], &#34;label&#34;: []}&#xA;    for text, label in zip(text_data, label_data):&#xA;        prompt = TEMPLATE.format(labels=LABELS, text=text)&#xA;        new_samples[&#34;prompt&#34;].append(prompt)&#xA;        new_samples[&#34;label&#34;].append(ID2LABEL[label])&#xA;&#xA;    return new_samples&#xA;&#xA;&#xA;#  model = AutoModelForCausalLM.from_pretrained(MODEL).eval().half().to(&#34;cuda:0&#34;)&#xA;model = AutoGPTQForCausalLM.from_pretrained(MODEL, BaseQuantizeConfig())&#xA;tokenizer = AutoTokenizer.from_pretrained(MODEL)&#xA;&#xA;task = SequenceClassificationTask(&#xA;        model=model,&#xA;        tokenizer=tokenizer,&#xA;        classes=LABELS,&#xA;        data_name_or_path=DATASET,&#xA;        prompt_col_name=&#34;prompt&#34;,&#xA;        label_col_name=&#34;label&#34;,&#xA;        **{&#xA;            &#34;num_samples&#34;: 1000,  # how many samples will be sampled to evaluation&#xA;            &#34;sample_max_len&#34;: 1024,  # max tokens for each sample&#xA;            &#34;block_max_len&#34;: 2048,  # max tokens for each data block&#xA;            # function to load dataset, one must only accept data_name_or_path as input&#xA;            # and return datasets.Dataset&#xA;            &#34;load_fn&#34;: partial(datasets.load_dataset, name=&#34;english&#34;),&#xA;            # function to preprocess dataset, which is used for datasets.Dataset.map,&#xA;            # must return Dict[str, list] with only two keys: [prompt_col_name, label_col_name]&#xA;            &#34;preprocess_fn&#34;: ds_refactor_fn,&#xA;            # truncate label when sample&#39;s length exceed sample_max_len&#xA;            &#34;truncate_prompt&#34;: False&#xA;        }&#xA;    )&#xA;&#xA;# note that max_new_tokens will be automatically specified internally based on given classes&#xA;print(task.run())&#xA;&#xA;# self-consistency&#xA;print(&#xA;    task.run(&#xA;        generation_config=GenerationConfig(&#xA;            num_beams=3,&#xA;            num_return_sequences=3,&#xA;            do_sample=True&#xA;        )&#xA;    )&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoGPTQ/AutoGPTQ/main/docs/tutorial&#34;&gt;tutorials&lt;/a&gt; provide step-by-step guidance to integrate &lt;code&gt;auto_gptq&lt;/code&gt; with your own project and some best practice principles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AutoGPTQ/AutoGPTQ/main/examples/README.md&#34;&gt;examples&lt;/a&gt; provide plenty of example scripts to use &lt;code&gt;auto_gptq&lt;/code&gt; in different ways.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Models&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;you can use &lt;code&gt;model.config.model_type&lt;/code&gt; to compare with the table below to check whether the model you use is supported by &lt;code&gt;auto_gptq&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;for example, model_type of &lt;code&gt;WizardLM&lt;/code&gt;, &lt;code&gt;vicuna&lt;/code&gt; and &lt;code&gt;gpt4all&lt;/code&gt; are all &lt;code&gt;llama&lt;/code&gt;, hence they are all supported by &lt;code&gt;auto_gptq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;model type&lt;/th&gt; &#xA;   &lt;th&gt;quantization&lt;/th&gt; &#xA;   &lt;th&gt;inference&lt;/th&gt; &#xA;   &lt;th&gt;peft-lora&lt;/th&gt; &#xA;   &lt;th&gt;peft-ada-lora&lt;/th&gt; &#xA;   &lt;th&gt;peft-adaption_prompt&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bloom&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt2&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt_neox&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;a href=&#34;https://github.com/PanQiWei/peft/tree/multi_modal_adaption_prompt&#34;&gt;requires this peft branch&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gptj&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;a href=&#34;https://github.com/PanQiWei/peft/tree/multi_modal_adaption_prompt&#34;&gt;requires this peft branch&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;llama&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;moss&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;a href=&#34;https://github.com/PanQiWei/peft/tree/multi_modal_adaption_prompt&#34;&gt;requires this peft branch&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opt&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gpt_bigcode&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;codegen&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;falcon(RefinedWebModel/RefinedWeb)&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supported Evaluation Tasks&lt;/h2&gt; &#xA;&lt;p&gt;Currently, &lt;code&gt;auto_gptq&lt;/code&gt; supports: &lt;code&gt;LanguageModelingTask&lt;/code&gt;, &lt;code&gt;SequenceClassificationTask&lt;/code&gt; and &lt;code&gt;TextSummarizationTask&lt;/code&gt;; more Tasks will come soon!&lt;/p&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;Tests can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pytest tests/ -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Which kernel is used by default?&lt;/h3&gt; &#xA;&lt;p&gt;AutoGPTQ defaults to using exllamav2 int4*fp16 kernel for matrix multiplication.&lt;/p&gt; &#xA;&lt;h3&gt;How to use Marlin kernel?&lt;/h3&gt; &#xA;&lt;p&gt;Marlin is an optimized int4 * fp16 kernel was recently proposed at &lt;a href=&#34;https://github.com/IST-DASLab/marlin&#34;&gt;https://github.com/IST-DASLab/marlin&lt;/a&gt;. This is integrated in AutoGPTQ when loading a model with &lt;code&gt;use_marlin=True&lt;/code&gt;. This kernel is available only on devices with compute capability 8.0 or 8.6 (Ampere GPUs).&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special thanks &lt;strong&gt;Elias Frantar&lt;/strong&gt;, &lt;strong&gt;Saleh Ashkboos&lt;/strong&gt;, &lt;strong&gt;Torsten Hoefler&lt;/strong&gt; and &lt;strong&gt;Dan Alistarh&lt;/strong&gt; for proposing &lt;strong&gt;GPTQ&lt;/strong&gt; algorithm and open source the &lt;a href=&#34;https://github.com/IST-DASLab/gptq&#34;&gt;code&lt;/a&gt;, and for releasing &lt;a href=&#34;https://github.com/IST-DASLab/marlin&#34;&gt;Marlin kernel&lt;/a&gt; for mixed precision computation.&lt;/li&gt; &#xA; &lt;li&gt;Special thanks &lt;strong&gt;qwopqwop200&lt;/strong&gt;, for code in this project that relevant to quantization are mainly referenced from &lt;a href=&#34;https://github.com/qwopqwop200/GPTQ-for-LLaMa/tree/cuda&#34;&gt;GPTQ-for-LLaMa&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Special thanks to &lt;strong&gt;turboderp&lt;/strong&gt;, for releasing &lt;a href=&#34;https://github.com/turboderp/exllama&#34;&gt;Exllama&lt;/a&gt; and &lt;a href=&#34;https://github.com/turboderp/exllamav2&#34;&gt;Exllama v2&lt;/a&gt; libraries with efficient mixed precision kernels.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>benbusby/whoogle-search</title>
    <updated>2025-01-19T01:34:28Z</updated>
    <id>tag:github.com,2025-01-19:/benbusby/whoogle-search</id>
    <link href="https://github.com/benbusby/whoogle-search" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A self-hosted, ad-free, privacy-respecting metasearch engine&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;As of 16 January, 2025, Google seemingly no longer supports performing search queries without JavaScript enabled. This is a fundamental part of how Whoogle works -- Whoogle requests the JavaScript-free search results, then filters out garbage from the results page and proxies all external content for the user.&lt;/p&gt; &#xA; &lt;p&gt;This is possibly a breaking change that will mean the end for Whoogle. I&#39;ll continue monitoring the status of their JS-free results and looking into workarounds, and will make another post if a solution is found (or not).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/docs/banner.png&#34; alt=&#34;Whoogle Search&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/benbusby/shoogle/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/benbusby/whoogle-search&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/benbusby/whoogle-search/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/benbusby/whoogle-search/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/benbusby/whoogle-search/actions/workflows/buildx.yml&#34;&gt;&lt;img src=&#34;https://github.com/benbusby/whoogle-search/actions/workflows/buildx.yml/badge.svg?sanitize=true&#34; alt=&#34;buildx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-benbusby-shoogle-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/e96cada2-fb6f-4528-8285-7d72abd74e8d&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/benbusby/whoogle-search&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/benbusby/whoogle-search&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://sr.ht/~benbusby/whoogle-search&#34;&gt;SourceHut&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/benbusby/whoogle-search&#34;&gt;GitHub&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Get Google search results, but without any ads, JavaScript, AMP links, cookies, or IP address tracking. Easily deployable in one click as a Docker app, and customizable with a single config file. Quick and simple to implement as a primary search engine replacement on both desktop and mobile.&lt;/p&gt; &#xA;&lt;p&gt;Contents&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#install&#34;&gt;Install/Deploy Options&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#heroku-quick-deploy&#34;&gt;Heroku Quick Deploy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#render&#34;&gt;Render.com&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#replit&#34;&gt;Repl.it&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#flyio&#34;&gt;Fly.io&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#koyeb&#34;&gt;Koyeb&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#pipx&#34;&gt;pipx&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#pip&#34;&gt;pip&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#manual-docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#arch-linux--arch-based-distributions&#34;&gt;Arch/AUR&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#helm-chart-for-kubernetes&#34;&gt;Helm/Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#environment-variables&#34;&gt;Environment Variables and Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#extra-steps&#34;&gt;Extra Steps&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#set-whoogle-as-your-primary-search-engine&#34;&gt;Set Primary Search Engine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#custom-redirecting&#34;&gt;Custom Redirecting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#custom-bangs&#34;&gt;Custom Bangs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#prevent-downtime-heroku-only&#34;&gt;Prevent Downtime (Heroku Only)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#https-enforcement&#34;&gt;Manual HTTPS Enforcement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#using-with-firefox-containers&#34;&gt;Using with Firefox Containers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#reverse-proxying&#34;&gt;Reverse Proxying&lt;/a&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#nginx&#34;&gt;Nginx&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#public-instances&#34;&gt;Public Instances&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No ads or sponsored content&lt;/li&gt; &#xA; &lt;li&gt;No JavaScript*&lt;/li&gt; &#xA; &lt;li&gt;No cookies**&lt;/li&gt; &#xA; &lt;li&gt;No tracking/linking of your personal IP address***&lt;/li&gt; &#xA; &lt;li&gt;No AMP links&lt;/li&gt; &#xA; &lt;li&gt;No URL tracking tags (i.e. utm=%s)&lt;/li&gt; &#xA; &lt;li&gt;No referrer header&lt;/li&gt; &#xA; &lt;li&gt;Tor and HTTP/SOCKS proxy support&lt;/li&gt; &#xA; &lt;li&gt;Autocomplete/search suggestions&lt;/li&gt; &#xA; &lt;li&gt;POST request search and suggestion queries (when possible)&lt;/li&gt; &#xA; &lt;li&gt;View images at full res without site redirect (currently mobile only)&lt;/li&gt; &#xA; &lt;li&gt;Light/Dark/System theme modes (with support for &lt;a href=&#34;https://github.com/benbusby/whoogle-search/wiki/User-Contributed-CSS-Themes&#34;&gt;custom CSS theming&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Randomly generated User Agent&lt;/li&gt; &#xA; &lt;li&gt;Easy to install/deploy&lt;/li&gt; &#xA; &lt;li&gt;DDG-style bang (i.e. &lt;code&gt;!&amp;lt;tag&amp;gt; &amp;lt;query&amp;gt;&lt;/code&gt;) searches&lt;/li&gt; &#xA; &lt;li&gt;User-defined &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#custom-bangs&#34;&gt;custom bangs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optional location-based searching (i.e. results near &amp;lt;city&amp;gt;)&lt;/li&gt; &#xA; &lt;li&gt;Optional NoJS mode to view search results in a separate window with JavaScript blocked&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sup&gt;*No third party JavaScript. Whoogle can be used with JavaScript disabled, but if enabled, uses JavaScript for things like presenting search suggestions.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;**No third party cookies. Whoogle uses server side cookies (sessions) to store non-sensitive configuration settings such as theme, language, etc. Just like with JavaScript, cookies can be disabled and not affect Whoogle&#39;s search functionality.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;***If deployed to a remote server, or configured to send requests through a VPN, Tor, proxy, etc.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;There are a few different ways to begin using the app, depending on your preferences:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://heroku.com/about&#34;&gt;Heroku Quick Deploy&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/benbusby/whoogle-search/tree/main&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy Deployment of App&lt;/li&gt; &#xA; &lt;li&gt;A HTTPS url (https://&amp;lt;your app name&amp;gt;.herokuapp.com)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires a &lt;strong&gt;PAID&lt;/strong&gt; Heroku Account.&lt;/li&gt; &#xA; &lt;li&gt;Sometimes has issues with auto-redirecting to &lt;code&gt;https&lt;/code&gt;. Make sure to navigate to the &lt;code&gt;https&lt;/code&gt; version of your app before adding as a default search engine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://render.com&#34;&gt;Render&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Create an account on &lt;a href=&#34;https://render.com&#34;&gt;render.com&lt;/a&gt; and import the Whoogle repo with the following settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runtime: &lt;code&gt;Python 3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build Command: &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run Command: &lt;code&gt;./run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://repl.it&#34;&gt;Repl.it&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repl.it/github/benbusby/whoogle-search&#34;&gt;&lt;img src=&#34;https://repl.it/badge/github/benbusby/whoogle-search&#34; alt=&#34;Run on Repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Requires a (free) Replit account&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Free deployment of app&lt;/li&gt; &#xA; &lt;li&gt;Free HTTPS url (https://&amp;lt;app name&amp;gt;.&amp;lt;username&amp;gt;.repl.co) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports custom domains&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Downtime after periods of inactivity (&lt;a href=&#34;https://repl.it/talk/learn/How-to-use-and-setup-UptimeRobot/9003&#34;&gt;solution&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://fly.io&#34;&gt;Fly.io&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You will need a &lt;a href=&#34;https://fly.io&#34;&gt;Fly.io&lt;/a&gt; account to deploy Whoogle.&lt;/p&gt; &#xA;&lt;h4&gt;Install the CLI: &lt;a href=&#34;https://fly.io/docs/hands-on/installing/&#34;&gt;https://fly.io/docs/hands-on/installing/&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Deploy the app&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;flyctl auth login&#xA;flyctl launch --image benbusby/whoogle-search:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first deploy won&#39;t succeed because the default &lt;code&gt;internal_port&lt;/code&gt; is wrong. To fix this, open the generated &lt;code&gt;fly.toml&lt;/code&gt; file, set &lt;code&gt;services.internal_port&lt;/code&gt; to &lt;code&gt;5000&lt;/code&gt; and run &lt;code&gt;flyctl launch&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;p&gt;Your app is now available at &lt;code&gt;https://&amp;lt;app-name&amp;gt;.fly.dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires a &lt;a href=&#34;https://fly.io/docs/about/pricing/#free-allowances&#34;&gt;&lt;strong&gt;PAID&lt;/strong&gt;&lt;/a&gt; Fly.io Account.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.koyeb.com&#34;&gt;Koyeb&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use one of the following guides to install Whoogle on Koyeb:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using GitHub: &lt;a href=&#34;https://www.koyeb.com/docs/quickstart/deploy-with-git&#34;&gt;https://www.koyeb.com/docs/quickstart/deploy-with-git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Using Docker: &lt;a href=&#34;https://www.koyeb.com/docs/quickstart/deploy-a-docker-application&#34;&gt;https://www.koyeb.com/docs/quickstart/deploy-a-docker-application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/pipxproject/pipx#install-pipx&#34;&gt;pipx&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Persistent install:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pipx install https://github.com/benbusby/whoogle-search/archive/refs/heads/main.zip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sandboxed temporary instance:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pipx run --spec git+https://github.com/benbusby/whoogle-search.git whoogle-search&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;pip&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pip install whoogle-search&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ whoogle-search --help&#xA;usage: whoogle-search [-h] [--port &amp;lt;port number&amp;gt;] [--host &amp;lt;ip address&amp;gt;] [--debug] [--https-only] [--userpass &amp;lt;username:password&amp;gt;]&#xA;                      [--proxyauth &amp;lt;username:password&amp;gt;] [--proxytype &amp;lt;socks4|socks5|http&amp;gt;] [--proxyloc &amp;lt;location:port&amp;gt;]&#xA;&#xA;Whoogle Search console runner&#xA;&#xA;optional arguments:&#xA;  -h, --help            Show this help message and exit&#xA;  --port &amp;lt;port number&amp;gt;  Specifies a port to run on (default 5000)&#xA;  --host &amp;lt;ip address&amp;gt;   Specifies the host address to use (default 127.0.0.1)&#xA;  --debug               Activates debug mode for the server (default False)&#xA;  --https-only          Enforces HTTPS redirects for all requests&#xA;  --userpass &amp;lt;username:password&amp;gt;&#xA;                        Sets a username/password basic auth combo (default None)&#xA;  --proxyauth &amp;lt;username:password&amp;gt;&#xA;                        Sets a username/password for a HTTP/SOCKS proxy (default None)&#xA;  --proxytype &amp;lt;socks4|socks5|http&amp;gt;&#xA;                        Sets a proxy type for all connections (default None)&#xA;  --proxyloc &amp;lt;location:port&amp;gt;&#xA;                        Sets a proxy location for all connections (default None)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#environment-variables&#34;&gt;available environment variables&lt;/a&gt; for additional configuration.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;Content-Security-Policy&lt;/code&gt; headers can be sent by Whoogle if you set &lt;code&gt;WHOOGLE_CSP&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libcurl4-openssl-dev&lt;/code&gt; and &lt;code&gt;libssl-dev&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;macOS: &lt;code&gt;brew install openssl curl-openssl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu: &lt;code&gt;sudo apt-get install -y libcurl4-openssl-dev libssl-dev&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Arch: &lt;code&gt;pacman -S curl openssl&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Install&lt;/h4&gt; &#xA;&lt;p&gt;Clone the repo and run the following commands to start the app in a local-only environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/benbusby/whoogle-search.git&#xA;cd whoogle-search&#xA;python3 -m venv venv&#xA;source venv/bin/activate&#xA;pip install -r requirements.txt&#xA;./run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#environment-variables&#34;&gt;available environment variables&lt;/a&gt; for additional configuration.&lt;/p&gt; &#xA;&lt;h4&gt;systemd Configuration&lt;/h4&gt; &#xA;&lt;p&gt;After building the virtual environment, you can add something like the following to &lt;code&gt;/lib/systemd/system/whoogle.service&lt;/code&gt; to set up a Whoogle Search systemd service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=Whoogle&#xA;&#xA;[Service]&#xA;# Basic auth configuration, uncomment to enable&#xA;#Environment=WHOOGLE_USER=&amp;lt;username&amp;gt;&#xA;#Environment=WHOOGLE_PASS=&amp;lt;password&amp;gt;&#xA;# Proxy configuration, uncomment to enable&#xA;#Environment=WHOOGLE_PROXY_USER=&amp;lt;proxy username&amp;gt;&#xA;#Environment=WHOOGLE_PROXY_PASS=&amp;lt;proxy password&amp;gt;&#xA;#Environment=WHOOGLE_PROXY_TYPE=&amp;lt;proxy type (http|https|proxy4|proxy5)&#xA;#Environment=WHOOGLE_PROXY_LOC=&amp;lt;proxy host/ip&amp;gt;&#xA;# Site alternative configurations, uncomment to enable&#xA;# Note: If not set, the feature will still be available&#xA;# with default values.&#xA;#Environment=WHOOGLE_ALT_TW=farside.link/nitter&#xA;#Environment=WHOOGLE_ALT_YT=farside.link/invidious&#xA;#Environment=WHOOGLE_ALT_RD=farside.link/libreddit&#xA;#Environment=WHOOGLE_ALT_MD=farside.link/scribe&#xA;#Environment=WHOOGLE_ALT_TL=farside.link/lingva&#xA;#Environment=WHOOGLE_ALT_IMG=farside.link/rimgo&#xA;#Environment=WHOOGLE_ALT_WIKI=farside.link/wikiless&#xA;#Environment=WHOOGLE_ALT_IMDB=farside.link/libremdb&#xA;#Environment=WHOOGLE_ALT_QUORA=farside.link/quetre&#xA;#Environment=WHOOGLE_ALT_SO=farside.link/anonymousoverflow&#xA;# Load values from dotenv only&#xA;#Environment=WHOOGLE_DOTENV=1&#xA;# specify dotenv location if not in default location&#xA;#Environment=WHOOGLE_DOTENV_PATH=&amp;lt;path/to&amp;gt;/whoogle.env&#xA;Type=simple&#xA;User=&amp;lt;username&amp;gt;&#xA;# If installed as a package, add:&#xA;ExecStart=&amp;lt;python_install_dir&amp;gt;/python3 &amp;lt;whoogle_install_dir&amp;gt;/whoogle-search --host 127.0.0.1 --port 5000&#xA;# For example:&#xA;# ExecStart=/usr/bin/python3 /home/my_username/.local/bin/whoogle-search --host 127.0.0.1 --port 5000&#xA;# Otherwise if running the app from source, add:&#xA;ExecStart=&amp;lt;whoogle_repo_dir&amp;gt;/run&#xA;# For example:&#xA;# ExecStart=/var/www/whoogle-search/run&#xA;WorkingDirectory=&amp;lt;whoogle_repo_dir&amp;gt;&#xA;ExecReload=/bin/kill -HUP $MAINPID&#xA;Restart=always&#xA;RestartSec=3&#xA;SyslogIdentifier=whoogle&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo systemctl daemon-reload&#xA;sudo systemctl enable whoogle&#xA;sudo systemctl start whoogle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tor Configuration &lt;em&gt;optional&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If routing your request through Tor you will need to make the following adjustments. Due to the nature of interacting with Google through Tor we will need to be able to send signals to Tor and therefore authenticate with it.&lt;/p&gt; &#xA;&lt;p&gt;There are two authentication methods, password and cookie. You will need to make changes to your torrc:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Cookie&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Uncomment or add the following lines in your torrc:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ControlPort 9051&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;CookieAuthentication 1&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;DataDirectoryGroupReadable 1&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;CookieAuthFileGroupReadable 1&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Make the tor auth cookie readable:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;This is assuming that you are using a dedicated user to run whoogle. If you are using a different user replace &lt;code&gt;whoogle&lt;/code&gt; with that user.&lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;code&gt;chmod tor:whoogle /var/lib/tor&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;chmod tor:whoogle /var/lib/tor/control_auth_cookie&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Restart the tor service:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;systemctl restart tor&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Set the Tor environment variable to 1, &lt;code&gt;WHOOGLE_CONFIG_TOR&lt;/code&gt;. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;This may be added in the systemd unit file or env file &lt;code&gt;WHOOGLE_CONFIG_TOR=1&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Password&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Run this command:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;tor --hash-password {Your Password Here}&lt;/code&gt;; put your password in place of &lt;code&gt;{Your Password Here}&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Keep the output of this command, you will be placing it in your torrc.&lt;/li&gt; &#xA;     &lt;li&gt;Keep the password input of this command, you will be using it later.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Uncomment or add the following lines in your torrc:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;ControlPort 9051&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;HashedControlPassword {Place output here}&lt;/code&gt;; put the output of the previous command in place of &lt;code&gt;{Place output here}&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Now take the password from the first step and place it in the control.conf file within the whoogle working directory, ie. &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/misc/tor/control.conf&#34;&gt;misc/tor/control.conf&lt;/a&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If you want to place your password file in a different location set this location with the &lt;code&gt;WHOOGLE_TOR_CONF&lt;/code&gt; environment variable. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Heavily restrict access to control.conf to only be readable by the user running whoogle:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;chmod 400 control.conf&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Finally set the Tor environment variable and use password variable to 1, &lt;code&gt;WHOOGLE_CONFIG_TOR&lt;/code&gt; and &lt;code&gt;WHOOGLE_TOR_USE_PASS&lt;/code&gt;. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt; section for more details.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;These may be added to the systemd unit file or env file: &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;code&gt;WHOOGLE_CONFIG_TOR=1&lt;/code&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;code&gt;WHOOGLE_TOR_USE_PASS=1&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Manual (Docker)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure the Docker daemon is running, and is accessible by your user account&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To add user permissions, you can execute &lt;code&gt;sudo usermod -aG docker yourusername&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Running &lt;code&gt;docker ps&lt;/code&gt; should return something besides an error. If you encounter an error saying the daemon isn&#39;t running, try &lt;code&gt;sudo systemctl start docker&lt;/code&gt; (Linux) or ensure the docker tool is running (Windows/macOS).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Clone and deploy the docker app using a method below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Docker CLI&lt;/h4&gt; &#xA;&lt;p&gt;Through Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull benbusby/whoogle-search&#xA;docker run --publish 5000:5000 --detach --name whoogle-search benbusby/whoogle-search:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with docker-compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/benbusby/whoogle-search.git&#xA;cd whoogle-search&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or by building yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/benbusby/whoogle-search.git&#xA;cd whoogle-search&#xA;docker build --tag whoogle-search:1.0 .&#xA;docker run --publish 5000:5000 --detach --name whoogle-search whoogle-search:1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, you can also enable some of the following environment variables to further customize your instance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --publish 5000:5000 --detach --name whoogle-search \&#xA;  -e WHOOGLE_USER=username \&#xA;  -e WHOOGLE_PASS=password \&#xA;  -e WHOOGLE_PROXY_USER=username \&#xA;  -e WHOOGLE_PROXY_PASS=password \&#xA;  -e WHOOGLE_PROXY_TYPE=socks5 \&#xA;  -e WHOOGLE_PROXY_LOC=ip \&#xA;  whoogle-search:1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And kill with: &lt;code&gt;docker rm --force whoogle-search&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli&#34;&gt;Heroku CLI&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;heroku login&#xA;heroku container:login&#xA;git clone https://github.com/benbusby/whoogle-search.git&#xA;cd whoogle-search&#xA;heroku create&#xA;heroku container:push web&#xA;heroku container:release web&#xA;heroku open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This series of commands can take a while, but once you run it once, you shouldn&#39;t have to run it again. The final command, &lt;code&gt;heroku open&lt;/code&gt; will launch a tab in your web browser, where you can test out Whoogle and even &lt;a href=&#34;https://github.com/benbusby/whoogle-search#set-whoogle-as-your-primary-search-engine&#34;&gt;set it as your primary search engine&lt;/a&gt;. You may also edit environment variables from your appâ€™s Settings tab in the Heroku Dashboard.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Arch Linux &amp;amp; Arch-based Distributions&lt;/h3&gt; &#xA;&lt;p&gt;There is an &lt;a href=&#34;https://aur.archlinux.org/packages/whoogle-git/&#34;&gt;AUR package available&lt;/a&gt;, as well as a pre-built and daily updated package available at &lt;a href=&#34;https://chaotic.cx&#34;&gt;Chaotic-AUR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Helm chart for Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;To use the Kubernetes Helm Chart:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure you have &lt;a href=&#34;https://helm.sh/docs/intro/install/&#34;&gt;Helm&lt;/a&gt; &lt;code&gt;&amp;gt;=3.0.0&lt;/code&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/charts/whoogle/values.yaml&#34;&gt;charts/whoogle/values.yaml&lt;/a&gt; as desired&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;helm install whoogle ./charts/whoogle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Using your own server, or alternative container deployment&lt;/h4&gt; &#xA;&lt;p&gt;There are other methods for deploying docker containers that are well outlined in &lt;a href=&#34;https://rollout.io/blog/the-shortlist-of-docker-hosting/&#34;&gt;this article&lt;/a&gt;, but there are too many to describe set up for each here. Generally it should be about the same amount of effort as the Heroku deployment.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your preferences, you can also deploy the app yourself on your own infrastructure. This route would require a few extra steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A server (I personally recommend &lt;a href=&#34;https://www.digitalocean.com/pricing/&#34;&gt;Digital Ocean&lt;/a&gt; or &lt;a href=&#34;https://www.linode.com/pricing/&#34;&gt;Linode&lt;/a&gt;, their cheapest tiers will work fine)&lt;/li&gt; &#xA; &lt;li&gt;Your own URL (I suppose this is optional, but recommended)&lt;/li&gt; &#xA; &lt;li&gt;SSL certificates (free through &lt;a href=&#34;https://letsencrypt.org/getting-started/&#34;&gt;Let&#39;s Encrypt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A bit more experience or willingness to work through issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;There are a few optional environment variables available for customizing a Whoogle instance. These can be set manually, or copied into &lt;code&gt;whoogle.env&lt;/code&gt; and enabled for your preferred deployment method:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Local runs: Set &lt;code&gt;WHOOGLE_DOTENV=1&lt;/code&gt; before running&lt;/li&gt; &#xA; &lt;li&gt;With &lt;code&gt;docker-compose&lt;/code&gt;: Uncomment the &lt;code&gt;env_file&lt;/code&gt; option&lt;/li&gt; &#xA; &lt;li&gt;With &lt;code&gt;docker build/run&lt;/code&gt;: Add &lt;code&gt;--env-file ./whoogle.env&lt;/code&gt; to your command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_URL_PREFIX&lt;/td&gt; &#xA;   &lt;td&gt;The URL prefix to use for the whoogle instance (i.e. &#34;/whoogle&#34;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_DOTENV&lt;/td&gt; &#xA;   &lt;td&gt;Load environment variables in &lt;code&gt;whoogle.env&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_DOTENV_PATH&lt;/td&gt; &#xA;   &lt;td&gt;The path to &lt;code&gt;whoogle.env&lt;/code&gt; if not in default location&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_USER&lt;/td&gt; &#xA;   &lt;td&gt;The username for basic auth. WHOOGLE_PASS must also be set if used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_PASS&lt;/td&gt; &#xA;   &lt;td&gt;The password for basic auth. WHOOGLE_USER must also be set if used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_PROXY_USER&lt;/td&gt; &#xA;   &lt;td&gt;The username of the proxy server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_PROXY_PASS&lt;/td&gt; &#xA;   &lt;td&gt;The password of the proxy server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_PROXY_TYPE&lt;/td&gt; &#xA;   &lt;td&gt;The type of the proxy server. Can be &#34;socks5&#34;, &#34;socks4&#34;, or &#34;http&#34;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_PROXY_LOC&lt;/td&gt; &#xA;   &lt;td&gt;The location of the proxy server (host or ip).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_USER_AGENT&lt;/td&gt; &#xA;   &lt;td&gt;The desktop user agent to use. Defaults to a randomly generated one.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_USER_AGENT_MOBILE&lt;/td&gt; &#xA;   &lt;td&gt;The mobile user agent to use. Defaults to a randomly generated one.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_USE_CLIENT_USER_AGENT&lt;/td&gt; &#xA;   &lt;td&gt;Enable to use your own user agent for all requests. Defaults to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_REDIRECTS&lt;/td&gt; &#xA;   &lt;td&gt;Specify sites that should be redirected elsewhere. See &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#custom-redirecting&#34;&gt;custom redirecting&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EXPOSE_PORT&lt;/td&gt; &#xA;   &lt;td&gt;The port where Whoogle will be exposed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTPS_ONLY&lt;/td&gt; &#xA;   &lt;td&gt;Enforce HTTPS. (See &lt;a href=&#34;https://github.com/benbusby/whoogle-search#https-enforcement&#34;&gt;here&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_TW&lt;/td&gt; &#xA;   &lt;td&gt;The twitter.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_YT&lt;/td&gt; &#xA;   &lt;td&gt;The youtube.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_RD&lt;/td&gt; &#xA;   &lt;td&gt;The reddit.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_TL&lt;/td&gt; &#xA;   &lt;td&gt;The Google Translate alternative to use. This is used for all &#34;translate ____&#34; searches. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_MD&lt;/td&gt; &#xA;   &lt;td&gt;The medium.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_IMG&lt;/td&gt; &#xA;   &lt;td&gt;The imgur.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_WIKI&lt;/td&gt; &#xA;   &lt;td&gt;The wikipedia.org alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_IMDB&lt;/td&gt; &#xA;   &lt;td&gt;The imdb.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_QUORA&lt;/td&gt; &#xA;   &lt;td&gt;The quora.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_ALT_SO&lt;/td&gt; &#xA;   &lt;td&gt;The stackoverflow.com alternative to use when site alternatives are enabled in the config. Set to &#34;&#34; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_AUTOCOMPLETE&lt;/td&gt; &#xA;   &lt;td&gt;Controls visibility of autocomplete/search suggestions. Default on -- use &#39;0&#39; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_MINIMAL&lt;/td&gt; &#xA;   &lt;td&gt;Remove everything except basic result cards from all search queries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CSP&lt;/td&gt; &#xA;   &lt;td&gt;Sets a default set of &#39;Content-Security-Policy&#39; headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_RESULTS_PER_PAGE&lt;/td&gt; &#xA;   &lt;td&gt;Set the number of results per page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_TOR_SERVICE&lt;/td&gt; &#xA;   &lt;td&gt;Enable/disable the Tor service on startup. Default on -- use &#39;0&#39; to disable.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_TOR_USE_PASS&lt;/td&gt; &#xA;   &lt;td&gt;Use password authentication for tor control port.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_TOR_CONF&lt;/td&gt; &#xA;   &lt;td&gt;The absolute path to the config file containing the password for the tor control port. Default: ./misc/tor/control.conf WHOOGLE_TOR_PASS must be 1 for this to work.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_SHOW_FAVICONS&lt;/td&gt; &#xA;   &lt;td&gt;Show/hide favicons next to search result URLs. Default on.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_UPDATE_CHECK&lt;/td&gt; &#xA;   &lt;td&gt;Enable/disable the automatic daily check for new versions of Whoogle. Default on.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_FALLBACK_ENGINE_URL&lt;/td&gt; &#xA;   &lt;td&gt;Set a fallback Search Engine URL when there is internal server error or instance is rate-limited. Search query is appended to the end of the URL (eg. &lt;a href=&#34;https://duckduckgo.com/?k1=-1&amp;amp;q=&#34;&gt;https://duckduckgo.com/?k1=-1&amp;amp;q=&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Config Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;These environment variables allow setting default config values, but can be overwritten manually by using the home page config menu. These allow a shortcut for destroying/rebuilding an instance to the same config state every time.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_DISABLE&lt;/td&gt; &#xA;   &lt;td&gt;Hide config from UI and disallow changes to config by client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_COUNTRY&lt;/td&gt; &#xA;   &lt;td&gt;Filter results by hosting country&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_LANGUAGE&lt;/td&gt; &#xA;   &lt;td&gt;Set interface language&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_SEARCH_LANGUAGE&lt;/td&gt; &#xA;   &lt;td&gt;Set search result language&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_BLOCK&lt;/td&gt; &#xA;   &lt;td&gt;Block websites from search results (use comma-separated list)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_BLOCK_TITLE&lt;/td&gt; &#xA;   &lt;td&gt;Block search result with a REGEX filter on title&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_BLOCK_URL&lt;/td&gt; &#xA;   &lt;td&gt;Block search result with a REGEX filter on URL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_THEME&lt;/td&gt; &#xA;   &lt;td&gt;Set theme mode (light, dark, or system)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_SAFE&lt;/td&gt; &#xA;   &lt;td&gt;Enable safe searches&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_ALTS&lt;/td&gt; &#xA;   &lt;td&gt;Use social media site alternatives (nitter, invidious, etc)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_NEAR&lt;/td&gt; &#xA;   &lt;td&gt;Restrict results to only those near a particular city&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_TOR&lt;/td&gt; &#xA;   &lt;td&gt;Use Tor routing (if available)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_NEW_TAB&lt;/td&gt; &#xA;   &lt;td&gt;Always open results in new tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_VIEW_IMAGE&lt;/td&gt; &#xA;   &lt;td&gt;Enable View Image option&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_GET_ONLY&lt;/td&gt; &#xA;   &lt;td&gt;Search using GET requests only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_URL&lt;/td&gt; &#xA;   &lt;td&gt;The root url of the instance (&lt;code&gt;https://&amp;lt;your url&amp;gt;/&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_STYLE&lt;/td&gt; &#xA;   &lt;td&gt;The custom CSS to use for styling (should be single line)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_PREFERENCES_ENCRYPTED&lt;/td&gt; &#xA;   &lt;td&gt;Encrypt preferences token, requires preferences key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_PREFERENCES_KEY&lt;/td&gt; &#xA;   &lt;td&gt;Key to encrypt preferences in URL (REQUIRED to show url)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WHOOGLE_CONFIG_ANON_VIEW&lt;/td&gt; &#xA;   &lt;td&gt;Include the &#34;anonymous view&#34; option for each search result&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Same as most search engines, with the exception of filtering by time range.&lt;/p&gt; &#xA;&lt;p&gt;To filter by a range of time, append &#34;:past &lt;time&gt;&#34; to the end of your search, where &lt;time&gt; can be &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, or &lt;code&gt;year&lt;/code&gt;. Example: &lt;code&gt;coronavirus updates :past hour&lt;/code&gt;&lt;/time&gt;&lt;/time&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extra Steps&lt;/h2&gt; &#xA;&lt;h3&gt;Set Whoogle as your primary search engine&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: If you&#39;re using a reverse proxy to run Whoogle Search, make sure the &#34;Root URL&#34; config option on the home page is set to your URL before going through these steps.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Browser settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firefox (Desktop) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version 89+ &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Navigate to your app&#39;s url, right click the address bar, and select &#34;Add Search Engine&#34;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Previous versions &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Navigate to your app&#39;s url, and click the 3 dot menu in the address bar. At the bottom, there should be an option to &#34;Add Search Engine&#34;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Once you&#39;ve added the new search engine, open your Firefox Preferences menu, click &#34;Search&#34; in the left menu, and use the available dropdown to select &#34;Whoogle&#34; from the list.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: If your Whoogle instance uses Firefox Containers, you&#39;ll need to &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#using-with-firefox-containers&#34;&gt;go through the steps here&lt;/a&gt; to get it working properly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Firefox (iOS) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the mobile app Settings page, tap &#34;Search&#34; within the &#34;General&#34; section. There should be an option titled &#34;Add Search Engine&#34; to select. It should prompt you to enter a title and search query url - use the following elements to fill out the form: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Title: &#34;Whoogle&#34;&lt;/li&gt; &#xA;     &lt;li&gt;URL: &lt;code&gt;http[s]://\&amp;lt;your whoogle url\&amp;gt;/search?q=%s&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Firefox (Android) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Version &amp;lt;79.0.0 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Navigate to your app&#39;s url&lt;/li&gt; &#xA;     &lt;li&gt;Long-press on the search text field&lt;/li&gt; &#xA;     &lt;li&gt;Click the &#34;Add Search Engine&#34; menu item &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Select a name and click ok&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;Click the 3 dot menu in the top right&lt;/li&gt; &#xA;     &lt;li&gt;Navigate to the settings menu and select the &#34;Search&#34; sub-menu&lt;/li&gt; &#xA;     &lt;li&gt;Select Whoogle and press &#34;Set as default&#34;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Version &amp;gt;=79.0.0 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Click the 3 dot menu in the top right&lt;/li&gt; &#xA;     &lt;li&gt;Navigate to the settings menu and select the &#34;Search&#34; sub-menu&lt;/li&gt; &#xA;     &lt;li&gt;Click &#34;Add search engine&#34;&lt;/li&gt; &#xA;     &lt;li&gt;Select the &#39;Other&#39; radio button &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Name: &#34;Whoogle&#34;&lt;/li&gt; &#xA;       &lt;li&gt;Search string to use: &lt;code&gt;https://\&amp;lt;your whoogle url\&amp;gt;/search?q=%s&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; (Mac OS X) &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Go to &lt;code&gt;Alfred Preferences&lt;/code&gt; &amp;gt; &lt;code&gt;Features&lt;/code&gt; &amp;gt; &lt;code&gt;Web Search&lt;/code&gt; and click &lt;code&gt;Add Custom Search&lt;/code&gt;. Then configure these settings&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Search URL: &lt;code&gt;https://\&amp;lt;your whoogle url\&amp;gt;/search?q={query}&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Title: &lt;code&gt;Whoogle for &#39;{query}&#39;&lt;/code&gt; (or whatever you want)&lt;/li&gt; &#xA;     &lt;li&gt;Keyword: &lt;code&gt;whoogle&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Go to &lt;code&gt;Default Results&lt;/code&gt; and click the &lt;code&gt;Setup fallback results&lt;/code&gt; button. Click &lt;code&gt;+&lt;/code&gt; and add Whoogle, then drag it to the top.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Chrome/Chromium-based Browsers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatic &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Visit the home page of your Whoogle Search instance -- this will automatically add the search engine if the &lt;a href=&#34;https://www.chromium.org/tab-to-search/&#34;&gt;requirements&lt;/a&gt; are met (GET request, no OnSubmit script, no path). If not, you can add it manually.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Manual &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Under search engines &amp;gt; manage search engines &amp;gt; add, manually enter your Whoogle instance details with a &lt;code&gt;&amp;lt;whoogle url&amp;gt;/search?q=%s&lt;/code&gt; formatted search URL.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Custom Redirecting&lt;/h3&gt; &#xA;&lt;p&gt;You can set custom site redirects using the &lt;code&gt;WHOOGLE_REDIRECTS&lt;/code&gt; environment variable. A lot of sites, such as Twitter, Reddit, etc, have built-in redirects to &lt;a href=&#34;https://sr.ht/~benbusby/farside&#34;&gt;Farside links&lt;/a&gt;, but you may want to define your own.&lt;/p&gt; &#xA;&lt;p&gt;To do this, you can use the following syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WHOOGLE_REDIRECTS=&#34;&amp;lt;parent_domain&amp;gt;:&amp;lt;new_domain&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, if you want to redirect from &#34;badsite.com&#34; to &#34;goodsite.com&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WHOOGLE_REDIRECTS=&#34;badsite.com:goodsite.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be used for multiple sites as well, with comma separation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;WHOOGLE_REDIRECTS=&#34;badA.com:goodA.com,badB.com:goodB.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Do not include &#34;http(s)://&#34; when defining your redirect.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Bangs&lt;/h3&gt; &#xA;&lt;p&gt;You can create your own custom bangs. By default, bangs are stored in &lt;code&gt;app/static/bangs&lt;/code&gt;. See &lt;a href=&#34;https://github.com/benbusby/whoogle-search/raw/main/app/static/bangs/00-whoogle.json&#34;&gt;&lt;code&gt;00-whoogle.json&lt;/code&gt;&lt;/a&gt; for an example. These are parsed in alphabetical order with later files overriding bangs set in earlier files, with the exception that DDG bangs (downloaded to &lt;code&gt;app/static/bangs/bangs.json&lt;/code&gt;) are always parsed first. Thus, any custom bangs will always override the DDG ones.&lt;/p&gt; &#xA;&lt;h3&gt;Prevent Downtime (Heroku only)&lt;/h3&gt; &#xA;&lt;p&gt;Part of the deal with Heroku&#39;s free tier is that you&#39;re allocated 550 hours/month (meaning it can&#39;t stay active 24/7), and the app is temporarily shut down after 30 minutes of inactivity. Once it becomes inactive, any Whoogle searches will still work, but it&#39;ll take an extra 10-15 seconds for the app to come back online before displaying the result, which can be frustrating if you&#39;re in a hurry.&lt;/p&gt; &#xA;&lt;p&gt;A good solution for this is to set up a simple cronjob on any device at your home that is consistently powered on and connected to the internet (in my case, a PiHole worked perfectly). All the device needs to do is fetch app content on a consistent basis to keep the app alive in whatever ~17 hour window you want it on (17 hrs * 31 days = 527, meaning you&#39;d still have 23 leftover hours each month if you searched outside of your target window).&lt;/p&gt; &#xA;&lt;p&gt;For instance, adding &lt;code&gt;*/20 7-23 * * * curl https://&amp;lt;your heroku app name&amp;gt;.herokuapp.com &amp;gt; /home/&amp;lt;username&amp;gt;/whoogle-refresh&lt;/code&gt; will fetch the home page of the app every 20 minutes between 7am and midnight, allowing for downtime from midnight to 7am. And again, this wouldn&#39;t be a hard limit - you&#39;d still have plenty of remaining hours of uptime each month in case you were searching after this window has closed.&lt;/p&gt; &#xA;&lt;p&gt;Since the instance is destroyed and rebuilt after inactivity, config settings will be reset once the app enters downtime. If you have configuration settings active that you&#39;d like to keep between periods of downtime (like dark mode for example), you could instead add &lt;code&gt;*/20 7-23 * * * curl -d &#34;dark=1&#34; -X POST https://&amp;lt;your heroku app name&amp;gt;.herokuapp.com/config &amp;gt; /home/&amp;lt;username&amp;gt;/whoogle-refresh&lt;/code&gt; to keep these settings more or less permanent, and still keep the app from entering downtime when you&#39;re using it.&lt;/p&gt; &#xA;&lt;h3&gt;HTTPS Enforcement&lt;/h3&gt; &#xA;&lt;p&gt;Only needed if your setup requires Flask to redirect to HTTPS on its own -- generally this is something that doesn&#39;t need to be handled by Whoogle Search.&lt;/p&gt; &#xA;&lt;p&gt;Note: You should have your own domain name and &lt;a href=&#34;https://letsencrypt.org/getting-started/&#34;&gt;an https certificate&lt;/a&gt; in order for this to work properly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Heroku: Ensure that the &lt;code&gt;Root URL&lt;/code&gt; configuration on the home page begins with &lt;code&gt;https://&lt;/code&gt; and not &lt;code&gt;http://&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Docker build: Add &lt;code&gt;--build-arg use_https=1&lt;/code&gt; to your run command&lt;/li&gt; &#xA; &lt;li&gt;Docker image: Set the environment variable HTTPS_ONLY=1&lt;/li&gt; &#xA; &lt;li&gt;Pip/Pipx: Add the &lt;code&gt;--https-only&lt;/code&gt; flag to the end of the &lt;code&gt;whoogle-search&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;Default &lt;code&gt;run&lt;/code&gt; script: Modify the script locally to include the &lt;code&gt;--https-only&lt;/code&gt; flag at the end of the python run command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using with Firefox Containers&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately, Firefox Containers do not currently pass through &lt;code&gt;POST&lt;/code&gt; requests (the default) to the engine, and Firefox caches the opensearch template on initial page load. To get around this, you can take the following steps to get it working as expected:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove any existing Whoogle search engines from Firefox settings&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;code&gt;GET Requests Only&lt;/code&gt; in Whoogle config&lt;/li&gt; &#xA; &lt;li&gt;Clear Firefox cache&lt;/li&gt; &#xA; &lt;li&gt;Restart Firefox&lt;/li&gt; &#xA; &lt;li&gt;Navigate to Whoogle instance and &lt;a href=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/#set-whoogle-as-your-primary-search-engine&#34;&gt;re-add the engine&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Reverse Proxying&lt;/h3&gt; &#xA;&lt;h4&gt;Nginx&lt;/h4&gt; &#xA;&lt;p&gt;Here is a sample Nginx config for Whoogle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;server {&#xA;&#x9;server_name your_domain_name.com;&#xA;&#x9;access_log /dev/null;&#xA;&#x9;error_log /dev/null;&#xA;&#xA;&#x9;location / {&#xA;&#x9;    proxy_set_header X-Real-IP $remote_addr;&#xA;&#x9;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;&#x9;    proxy_set_header X-Forwarded-Proto $scheme;&#xA;&#x9;    proxy_set_header Host $host;&#xA;&#x9;    proxy_set_header X-NginX-Proxy true;&#xA;&#x9;    proxy_set_header X-Forwarded-Host $http_host;&#xA;&#x9;    proxy_pass http://localhost:5000;&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then add SSL support using LetsEncrypt by following a guide such as &lt;a href=&#34;https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/&#34;&gt;this one&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Under the hood, Whoogle is a basic Flask app with the following structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;app/&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;routes.py&lt;/code&gt;: Primary app entrypoint, contains all API routes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;request.py&lt;/code&gt;: Handles all outbound requests, including proxied/Tor connectivity&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filter.py&lt;/code&gt;: Functions and utilities used for filtering out content from upstream Google search results&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;utils/&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;bangs.py&lt;/code&gt;: All logic related to handling DDG-style &#34;bang&#34; queries&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;results.py&lt;/code&gt;: Utility functions for interpreting/modifying individual search results&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;search.py&lt;/code&gt;: Creates and handles new search queries&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;session.py&lt;/code&gt;: Miscellaneous methods related to user sessions&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;templates/&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;: The home page template&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;display.html&lt;/code&gt;: The search results template&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;header.html&lt;/code&gt;: A general &#34;top of the page&#34; query header for desktop and mobile&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;search.html&lt;/code&gt;: An iframe-able search page&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;logo.html&lt;/code&gt;: A template consisting mostly of the Whoogle logo as an SVG (separated to help keep &lt;code&gt;index.html&lt;/code&gt; a bit cleaner)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;opensearch.xml&lt;/code&gt;: A template used for supporting &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/OpenSearch&#34;&gt;OpenSearch&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;imageresults.html&lt;/code&gt;: An &#34;experimental&#34; template used for supporting the &#34;Full Size&#34; image feature on desktop.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;static/&amp;lt;css|js&amp;gt;&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;CSS/JavaScript files, should be self-explanatory&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;static/settings&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Key-value JSON files for establishing valid configuration values&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re new to the project, the easiest way to get started would be to try fixing &lt;a href=&#34;https://github.com/benbusby/whoogle-search/issues?q=is%3Aissue+is%3Aopen+label%3Abug&#34;&gt;an open bug report&lt;/a&gt;. If there aren&#39;t any open, or if the open ones are too stale, try taking on a &lt;a href=&#34;https://github.com/benbusby/whoogle-search/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement&#34;&gt;feature request&lt;/a&gt;. Generally speaking, if you can write something that has any potential of breaking down in the future, you should write a test for it.&lt;/p&gt; &#xA;&lt;p&gt;The project follows the &lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;PEP 8 Style Guide&lt;/a&gt;, but is liable to change. Static typing should always be used when possible. Function documentation is greatly appreciated, and typically follows the below format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def contains(x: list, y: int) -&amp;gt; bool:&#xA;    &#34;&#34;&#34;Check a list (x) for the presence of an element (y)&#xA;&#xA;    Args:&#xA;        x: The list to inspect&#xA;        y: The int to look for&#xA;&#xA;    Returns:&#xA;        bool: True if the list contains the item, otherwise False&#xA;    &#34;&#34;&#34;&#xA;&#xA;    return y in x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Translating&lt;/h4&gt; &#xA;&lt;p&gt;Whoogle currently supports translations using &lt;a href=&#34;https://github.com/benbusby/whoogle-search/raw/main/app/static/settings/translations.json&#34;&gt;&lt;code&gt;translations.json&lt;/code&gt;&lt;/a&gt;. Language values in this file need to match the &#34;value&#34; of the according language in &lt;a href=&#34;https://github.com/benbusby/whoogle-search/raw/main/app/static/settings/languages.json&#34;&gt;&lt;code&gt;languages.json&lt;/code&gt;&lt;/a&gt; (i.e. &#34;lang_en&#34; for English, &#34;lang_es&#34; for Spanish, etc). After you add a new set of translations to &lt;code&gt;translations.json&lt;/code&gt;, open a PR with your changes and they will be merged in as soon as possible.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;What&#39;s the difference between this and &lt;a href=&#34;https://github.com/asciimoo/searx&#34;&gt;Searx&lt;/a&gt;?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whoogle is intended to only ever be deployed to private instances by individuals of any background, with as little effort as possible. Prior knowledge of/experience with the command line or deploying applications is not necessary to deploy Whoogle, which isn&#39;t the case with Searx. As a result, Whoogle is missing some features of Searx in order to be as easy to deploy as possible.&lt;/p&gt; &#xA;&lt;p&gt;Whoogle also only uses Google search results, not Bing/Quant/etc, and uses the existing Google search UI to make the transition away from Google search as unnoticeable as possible.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m a huge fan of Searx though and encourage anyone to use that instead if they want access to other search engines/a different UI/more configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Why does the image results page look different?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A lot of the app currently piggybacks on Google&#39;s existing support for fetching results pages with JavaScript disabled. To their credit, they&#39;ve done an excellent job with styling pages, but it seems that the image results page - particularly on mobile - is a little rough. Moving forward, with enough interest, I&#39;d like to transition to fetching the results and parsing them into a unique Whoogle-fied interface that I can style myself.&lt;/p&gt; &#xA;&lt;h2&gt;Public Instances&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Use public instances at your own discretion. The maintainers of Whoogle do not personally validate the integrity of any other instances. Popular public instances are more likely to be rate-limited or blocked.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Website&lt;/th&gt; &#xA;   &lt;th&gt;Country&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Cloudflare&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.albony.xyz/&#34;&gt;https://search.albony.xyz&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡®ðŸ‡³ IN&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.garudalinux.org&#34;&gt;https://search.garudalinux.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡«ðŸ‡® FI&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.dr460nf1r3.org&#34;&gt;https://search.dr460nf1r3.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡©ðŸ‡ª DE&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://s.tokhmi.xyz&#34;&gt;https://s.tokhmi.xyz&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¸ US&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.sethforprivacy.com&#34;&gt;https://search.sethforprivacy.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡©ðŸ‡ª DE&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.dcs0.hu&#34;&gt;https://whoogle.dcs0.hu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡­ðŸ‡º HU&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gowogle.voring.me&#34;&gt;https://gowogle.voring.me&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¸ US&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.privacydev.net&#34;&gt;https://whoogle.privacydev.net&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡«ðŸ‡· FR&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wg.vern.cc&#34;&gt;https://wg.vern.cc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¸ US&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.hxvy0.gq&#34;&gt;https://whoogle.hxvy0.gq&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡¨ðŸ‡¦ CA&lt;/td&gt; &#xA;   &lt;td&gt;Turkish Only&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.hostux.net&#34;&gt;https://whoogle.hostux.net&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;nbsp;ðŸ‡«ðŸ‡· FR&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.lunar.icu&#34;&gt;https://whoogle.lunar.icu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡©ðŸ‡ª DE&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://wgl.frail.duckdns.org&#34;&gt;https://wgl.frail.duckdns.org&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡§ðŸ‡· BR&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.no-logs.com/&#34;&gt;https://whoogle.no-logs.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡¸ðŸ‡ª SE&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.ftw.lol&#34;&gt;https://whoogle.ftw.lol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡©ðŸ‡ª DE&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle-search--replitcomreside.repl.co&#34;&gt;https://whoogle-search--replitcomreside.repl.co&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¸ US&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.notrustverify.ch&#34;&gt;https://search.notrustverify.ch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡¨ðŸ‡­ CH&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.datura.network&#34;&gt;https://whoogle.datura.network&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡©ðŸ‡ª DE&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://whoogle.yepserver.xyz&#34;&gt;https://whoogle.yepserver.xyz&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¦ UA&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.nezumi.party&#34;&gt;https://search.nezumi.party&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡®ðŸ‡¹ IT&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://search.snine.nl&#34;&gt;https://search.snine.nl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡³ðŸ‡± NL&lt;/td&gt; &#xA;   &lt;td&gt;Mult-choice&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A checkmark in the &#34;Cloudflare&#34; category here refers to the use of the reverse proxy, &lt;a href=&#34;https://cloudflare.com&#34;&gt;Cloudflare&lt;/a&gt;. The checkmark will not be listed for a site which uses Cloudflare DNS but rather the proxying service which grants Cloudflare the ability to monitor traffic to the website.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Onion Instances&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Website&lt;/th&gt; &#xA;   &lt;th&gt;Country&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://whoglqjdkgt2an4tdepberwqz3hk7tjo4kqgdnuj77rt7nshw2xqhqad.onion&#34;&gt;http://whoglqjdkgt2an4tdepberwqz3hk7tjo4kqgdnuj77rt7nshw2xqhqad.onion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¸ US&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://nuifgsnbb2mcyza74o7illtqmuaqbwu4flam3cdmsrnudwcmkqur37qd.onion&#34;&gt;http://nuifgsnbb2mcyza74o7illtqmuaqbwu4flam3cdmsrnudwcmkqur37qd.onion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡©ðŸ‡ª DE&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://whoogle.vernccvbvyi5qhfzyqengccj7lkove6bjot2xhh5kajhwvidqafczrad.onion/&#34;&gt;http://whoogle.vernccvbvyi5qhfzyqengccj7lkove6bjot2xhh5kajhwvidqafczrad.onion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¸ US&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://whoogle.g4c3eya4clenolymqbpgwz3q3tawoxw56yhzk4vugqrl6dtu3ejvhjid.onion/&#34;&gt;http://whoogle.g4c3eya4clenolymqbpgwz3q3tawoxw56yhzk4vugqrl6dtu3ejvhjid.onion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡«ðŸ‡· FR&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://whoogle.daturab6drmkhyeia4ch5gvfc2f3wgo6bhjrv3pz6n7kxmvoznlkq4yd.onion/&#34;&gt;http://whoogle.daturab6drmkhyeia4ch5gvfc2f3wgo6bhjrv3pz6n7kxmvoznlkq4yd.onion&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡©ðŸ‡ª DE&lt;/td&gt; &#xA;   &lt;td&gt;Multi-choice&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;I2P Instances&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Website&lt;/th&gt; &#xA;   &lt;th&gt;Country&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://verneks7rfjptpz5fpii7n7nrxilsidi2qxepeuuf66c3tsf4nhq.b32.i2p&#34;&gt;http://verneks7rfjptpz5fpii7n7nrxilsidi2qxepeuuf66c3tsf4nhq.b32.i2p&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;ðŸ‡ºðŸ‡¸ US&lt;/td&gt; &#xA;   &lt;td&gt;English&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h4&gt;Desktop&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/docs/screenshot_desktop.png&#34; alt=&#34;Whoogle Desktop&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Mobile&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benbusby/whoogle-search/main/docs/screenshot_mobile.png&#34; alt=&#34;Whoogle Mobile&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>