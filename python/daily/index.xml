<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-04T01:38:45Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Qiskit/qiskit</title>
    <updated>2023-10-04T01:38:45Z</updated>
    <id>tag:github.com,2023-10-04:/Qiskit/qiskit</id>
    <link href="https://github.com/Qiskit/qiskit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Qiskit is an open-source SDK for working with quantum computers at the level of extended quantum circuits, operators, and primitives.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Qiskit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Qiskit/qiskit-terra.svg?&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- long-description-skip-begin --&gt; &lt;a href=&#34;https://github.com/Qiskit/qiskit-terra/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Qiskit/qiskit-terra.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/qiskit-terra/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/dm/qiskit-terra.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Qiskit/qiskit-terra?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/Qiskit/qiskit-terra/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/pypi/pyversions/qiskit&#34; alt=&#34;PyPI - Python Version&#34;&gt; &lt;a href=&#34;https://rust-lang.github.io/rfcs/2495-min-rust-version.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/rustc-1.64.0+-blue.svg?sanitize=true&#34; alt=&#34;Minimum rustc 1.64.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/qiskit-terra&#34;&gt;&lt;img src=&#34;https://static.pepy.tech/badge/qiskit-terra&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- long-description-skip-end --&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/161550823&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/161550823.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Qiskit&lt;/strong&gt; is an open-source SDK for working with quantum computers at the level of extended quantum circuits, operators, and primitives.&lt;/p&gt; &#xA;&lt;p&gt;This library is the core component of Qiskit, which contains the building blocks for creating and working with quantum circuits, quantum operators, and primitive functions (sampler and estimator). It also contains a transpiler that supports optimizing quantum circuits and a quantum information toolbox for creating advanced quantum operators.&lt;/p&gt; &#xA;&lt;p&gt;For more details on how to use Qiskit, refer to the documentation located here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qiskit.org/documentation/&#34;&gt;https://qiskit.org/documentation/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We encourage installing Qiskit via &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install qiskit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pip will handle all dependencies automatically and you will always install the latest (and well-tested) version.&lt;/p&gt; &#xA;&lt;p&gt;To install from source, follow the instructions in the &lt;a href=&#34;https://qiskit.org/documentation/contributing_to_qiskit.html#install-install-from-source-label&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Create your first quantum program in Qiskit&lt;/h2&gt; &#xA;&lt;p&gt;Now that Qiskit is installed, it&#39;s time to begin working with Qiskit. The essential parts of a quantum program are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Define and build a quantum circuit that represents the quantum state&lt;/li&gt; &#xA; &lt;li&gt;Define the classical output by measurements or a set of observable operators&lt;/li&gt; &#xA; &lt;li&gt;Depending on the output, use the primitive function &lt;code&gt;sampler&lt;/code&gt; to sample outcomes or the &lt;code&gt;estimator&lt;/code&gt; to estimate values.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Create an example quantum circuit using the &lt;code&gt;QuantumCircuit&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np&#xA;from qiskit import QuantumCircuit&#xA;&#xA;# 1. A quantum circuit for preparing the quantum state |000&amp;gt; + i |111&amp;gt;&#xA;qc_example = QuantumCircuit(3)&#xA;qc_example.h(0)          # generate superpostion&#xA;qc_example.p(np.pi/2,0)  # add quantum phase&#xA;qc_example.cx(0,1)       # 0th-qubit-Controlled-NOT gate on 1st qubit&#xA;qc_example.cx(0,2)       # 0th-qubit-Controlled-NOT gate on 2nd qubit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This simple example makes an entangled state known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Greenberger%E2%80%93Horne%E2%80%93Zeilinger_state&#34;&gt;GHZ state&lt;/a&gt; $(|000\rangle + |111\rangle)/\sqrt{2}$. It uses the standard quantum gates: Hadamard gate (&lt;code&gt;h&lt;/code&gt;), Phase gate (&lt;code&gt;p&lt;/code&gt;), and CNOT gate (&lt;code&gt;cx&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve made your first quantum circuit, choose which primitive function you will use. Starting with &lt;code&gt;sampler&lt;/code&gt;, we use &lt;code&gt;measure_all(inplace=False)&lt;/code&gt; to get a copy of the circuit in which all the qubits are measured:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. Add the classical output in the form of measurement of all qubits&#xA;qc_measured = qc_example.measure_all(inplace=False)&#xA;&#xA;# 3. Execute using the Sampler primitive&#xA;from qiskit.primitives.sampler import Sampler&#xA;sampler = Sampler()&#xA;job = sampler.run(qc_measured, shots=1000)&#xA;result = job.result()&#xA;print(f&#34; &amp;gt; Quasi probability distribution: {result.quasi_dists}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running this will give an outcome similar to &lt;code&gt;{0: 0.497, 7: 0.503}&lt;/code&gt; which is &lt;code&gt;000&lt;/code&gt; 50% of the time and &lt;code&gt;111&lt;/code&gt; 50% of the time up to statistical fluctuations.&lt;br&gt; To illustrate the power of Estimator, we now use the quantum information toolbox to create the operator $XXY+XYX+YXX-YYY$ and pass it to the &lt;code&gt;run()&lt;/code&gt; function, along with our quantum circuit. Note the Estimator requires a circuit &lt;em&gt;&lt;strong&gt;without&lt;/strong&gt;&lt;/em&gt; measurement, so we use the &lt;code&gt;qc_example&lt;/code&gt; circuit we created earlier.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2. define the observable to be measured &#xA;from qiskit.quantum_info import SparsePauliOp&#xA;operator = SparsePauliOp.from_list([(&#34;XXY&#34;, 1), (&#34;XYX&#34;, 1), (&#34;YXX&#34;, 1), (&#34;YYY&#34;, -1)])&#xA;&#xA;# 3. Execute using the Estimator primitive&#xA;from qiskit.primitives import Estimator&#xA;estimator = Estimator()&#xA;job = estimator.run(qc_example, operator, shots=1000)&#xA;result = job.result()&#xA;print(f&#34; &amp;gt; Expectation values: {result.values}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running this will give the outcome &lt;code&gt;4&lt;/code&gt;. For fun, try to assign a value of +/- 1 to each single-qubit operator X and Y and see if you can achieve this outcome. (Spoiler alert: this is not possible!)&lt;/p&gt; &#xA;&lt;p&gt;Using the Qiskit-provided &lt;code&gt;qiskit.primitives.Sampler&lt;/code&gt; and &lt;code&gt;qiskit.primitives.Estimator&lt;/code&gt; will not take you very far. The power of quantum computing cannot be simulated on classical computers and you need to use real quantum hardware to scale to larger quantum circuits. However, running a quantum circuit on hardware requires rewriting them to the basis gates and connectivity of the quantum hardware. The tool that does this is the &lt;a href=&#34;https://qiskit.org/documentation/apidoc/transpiler.html&#34;&gt;transpiler&lt;/a&gt; and Qiskit includes transpiler passes for synthesis, optimization, mapping, and scheduling. However, it also includes a default compiler which works very well in most examples. The following code will map the example circuit to the &lt;code&gt;basis_gates = [&#39;cz&#39;, &#39;sx&#39;, &#39;rz&#39;]&lt;/code&gt; and a linear chain of qubits $0 \rightarrow 1 \rightarrow 2$ with the &lt;code&gt;coupling_map =[[0, 1], [1, 2]]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from qiskit import transpile&#xA;qc_transpiled = transpile(qc_example, basis_gates = [&#39;cz&#39;, &#39;sx&#39;, &#39;rz&#39;], coupling_map =[[0, 1], [1, 2]] , optimization_level=3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further examples of using Qiskit you can look at the tutorials in the documentation here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qiskit.org/documentation/tutorials.html&#34;&gt;https://qiskit.org/documentation/tutorials.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Executing your code on real quantum hardware&lt;/h3&gt; &#xA;&lt;p&gt;Qiskit provides an abstraction layer that lets users run quantum circuits on hardware from any vendor that provides a compatible interface. The best way to use Qiskit is with a runtime environment that provides optimized implementations of &lt;code&gt;sampler&lt;/code&gt; and &lt;code&gt;estimator&lt;/code&gt; for a given hardware platform. This runtime may involve using pre- and post-processing, such as optimized transpiler passes with error suppression, error mitigation, and, eventually, error correction built in. A runtime implements &lt;code&gt;qiskit.primitives.BaseSampler&lt;/code&gt; and &lt;code&gt;qiskit.primitives.BaseEstimator&lt;/code&gt; interfaces. For example, some packages that provide implementations of a runtime primitive implementation are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Qiskit/qiskit-ibm-runtime&#34;&gt;https://github.com/Qiskit/qiskit-ibm-runtime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Qiskit also provides a lower-level abstract interface for describing quantum backends. This interface, located in &lt;code&gt;qiskit.providers&lt;/code&gt;, defines an abstract &lt;code&gt;BackendV2&lt;/code&gt; class that providers can implement to represent their hardware or simulators to Qiskit. The backend class includes a common interface for executing circuits on the backends; however, in this interface each provider may perform different types of pre- and post-processing and return outcomes that are vendor-defined. Some examples of published provider packages that interface with real hardware are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Qiskit/qiskit-ibm-provider&#34;&gt;https://github.com/Qiskit/qiskit-ibm-provider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qiskit-community/qiskit-ionq&#34;&gt;https://github.com/qiskit-community/qiskit-ionq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qiskit-community/qiskit-aqt-provider&#34;&gt;https://github.com/qiskit-community/qiskit-aqt-provider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qiskit-community/qiskit-braket-provider&#34;&gt;https://github.com/qiskit-community/qiskit-braket-provider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qiskit-community/qiskit-quantinuum-provider&#34;&gt;https://github.com/qiskit-community/qiskit-quantinuum-provider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rigetti/qiskit-rigetti&#34;&gt;https://github.com/rigetti/qiskit-rigetti&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- This is not an exhaustive list, and if you maintain a provider package please feel free to open a PR to add new providers --&gt; &#xA;&lt;p&gt;You can refer to the documentation of these packages for further instructions on how to get access and use these systems.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to Qiskit, please take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/Qiskit/qiskit/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. By participating, you are expected to uphold our &lt;a href=&#34;https://raw.githubusercontent.com/Qiskit/qiskit/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/Qiskit/qiskit-terra/issues&#34;&gt;GitHub issues&lt;/a&gt; for tracking requests and bugs. Please &lt;a href=&#34;https://qisk.it/join-slack&#34;&gt;join the Qiskit Slack community&lt;/a&gt; for discussion, comments, and questions. For questions related to running or using Qiskit, &lt;a href=&#34;https://stackoverflow.com/questions/tagged/qiskit&#34;&gt;Stack Overflow has a &lt;code&gt;qiskit&lt;/code&gt;&lt;/a&gt;. For questions on quantum computing with Qiskit, use the &lt;code&gt;qiskit&lt;/code&gt; tag in the &lt;a href=&#34;https://quantumcomputing.stackexchange.com/questions/tagged/qiskit&#34;&gt;Quantum Computing Stack Exchange&lt;/a&gt; (please, read first the &lt;a href=&#34;https://quantumcomputing.stackexchange.com/help/how-to-ask&#34;&gt;guidelines on how to ask&lt;/a&gt; in that forum).&lt;/p&gt; &#xA;&lt;h2&gt;Authors and Citation&lt;/h2&gt; &#xA;&lt;p&gt;Qiskit is the work of &lt;a href=&#34;https://github.com/Qiskit/qiskit-terra/graphs/contributors&#34;&gt;many people&lt;/a&gt; who contribute to the project at different levels. If you use Qiskit, please cite as per the included &lt;a href=&#34;https://raw.githubusercontent.com/Qiskit/qiskit/main/CITATION.bib&#34;&gt;BibTeX file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog and Release Notes&lt;/h2&gt; &#xA;&lt;p&gt;The changelog for a particular release is dynamically generated and gets written to the release page on Github for each release. For example, you can find the page for the &lt;code&gt;0.9.0&lt;/code&gt; release here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Qiskit/qiskit-terra/releases/tag/0.9.0&#34;&gt;https://github.com/Qiskit/qiskit-terra/releases/tag/0.9.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The changelog for the current release can be found in the releases tab: &lt;a href=&#34;https://github.com/Qiskit/qiskit-terra/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Qiskit/qiskit-terra.svg?style=flat&amp;amp;label=&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; The changelog provides a quick overview of notable changes for a given release.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, as part of each release detailed release notes are written to document in detail what has changed as part of a release. This includes any documentation on potential breaking changes on upgrade and new features. For example, you can find the release notes for the &lt;code&gt;0.9.0&lt;/code&gt; release in the Qiskit documentation here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://qiskit.org/documentation/release_notes.html#terra-0-9&#34;&gt;https://qiskit.org/documentation/release_notes.html#terra-0-9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We acknowledge partial support for Qiskit development from the DOE Office of Science National Quantum Information Science Research Centers, Co-design Center for Quantum Advantage (C2QA) under contract number DE-SC0012704.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Qiskit/qiskit/main/LICENSE.txt&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>goauthentik/authentik</title>
    <updated>2023-10-04T01:38:45Z</updated>
    <id>tag:github.com,2023-10-04:/goauthentik/authentik</id>
    <link href="https://github.com/goauthentik/authentik" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The authentication glue you need.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://goauthentik.io/img/icon_top_brand_colour.svg?sanitize=true&#34; height=&#34;150&#34; alt=&#34;authentik logo&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goauthentik.io/discord&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/809154715984199690?label=Discord&amp;amp;style=for-the-badge&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goauthentik/authentik/actions/workflows/ci-main.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/goauthentik/authentik/ci-main.yml?branch=main&amp;amp;label=core%20build&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goauthentik/authentik/actions/workflows/ci-outpost.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/goauthentik/authentik/ci-outpost.yml?branch=main&amp;amp;label=outpost%20build&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/goauthentik/authentik/actions/workflows/ci-web.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/goauthentik/authentik/ci-web.yml?branch=main&amp;amp;label=web%20build&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/goauthentik/authentik&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/goauthentik/authentik?style=for-the-badge&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/beryju/authentik.svg?style=for-the-badge&#34; alt=&#34;Docker pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/v/beryju/authentik?sort=semver&amp;amp;style=for-the-badge&#34; alt=&#34;Latest version&#34;&gt; &lt;a href=&#34;https://www.transifex.com/authentik/authentik/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Help%20translate-transifex-blue?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is authentik?&lt;/h2&gt; &#xA;&lt;p&gt;authentik is an open-source Identity Provider that emphasizes flexibility and versatility. It can be seamlessly integrated into existing environments to support new protocols. authentik is also a great solution for implementing sign-up, recovery, and other similar features in your application, saving you the hassle of dealing with them.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For small/test setups it is recommended to use Docker Compose; refer to the &lt;a href=&#34;https://goauthentik.io/docs/installation/docker-compose/?utm_source=github&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For bigger setups, there is a Helm Chart &lt;a href=&#34;https://github.com/goauthentik/helm&#34;&gt;here&lt;/a&gt;. This is documented &lt;a href=&#34;https://goauthentik.io/docs/installation/kubernetes/?utm_source=github&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Light&lt;/th&gt; &#xA;   &lt;th&gt;Dark&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://goauthentik.io/img/screen_apps_light.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://goauthentik.io/img/screen_apps_dark.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://goauthentik.io/img/screen_admin_light.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://goauthentik.io/img/screen_admin_dark.jpg&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://goauthentik.io/developer-docs/?utm_source=github&#34;&gt;Developer Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/goauthentik/authentik/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Adoption and Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Your organization uses authentik? We&#39;d love to add your logo to the readme and our website! Email us @ &lt;a href=&#34;mailto:hello@goauthentik.io&#34;&gt;hello@goauthentik.io&lt;/a&gt; or open a GitHub Issue/PR! For more information on how to contribute to authentik, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/goauthentik/authentik/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md file&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ckan/ckan</title>
    <updated>2023-10-04T01:38:45Z</updated>
    <id>tag:github.com,2023-10-04:/ckan/ckan</id>
    <link href="https://github.com/ckan/ckan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CKAN is an open-source DMS (data management system) for powering data hubs and data portals. CKAN makes it easy to publish, share and use data. It powers catalog.data.gov, open.canada.ca/data, data.humdata.org among many other sites.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CKAN: The Open Source Data Portal Software&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/license-AGPL-blue.svg?style=flat&#34;&gt;https://img.shields.io/badge/license-AGPL-blue.svg?style=flat&lt;/a&gt; :target: &lt;a href=&#34;https://opensource.org/licenses/AGPL-3.0&#34;&gt;https://opensource.org/licenses/AGPL-3.0&lt;/a&gt; :alt: License&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&#34;&gt;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&lt;/a&gt; :target: &lt;a href=&#34;http://docs.ckan.org&#34;&gt;http://docs.ckan.org&lt;/a&gt; :alt: Documentation .. image:: &lt;a href=&#34;https://img.shields.io/badge/support-StackOverflow-yellowgreen.svg?style=flat&#34;&gt;https://img.shields.io/badge/support-StackOverflow-yellowgreen.svg?style=flat&lt;/a&gt; :target: &lt;a href=&#34;https://stackoverflow.com/questions/tagged/ckan&#34;&gt;https://stackoverflow.com/questions/tagged/ckan&lt;/a&gt; :alt: Support on StackOverflow&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://circleci.com/gh/ckan/ckan.svg?style=shield&#34;&gt;https://circleci.com/gh/ckan/ckan.svg?style=shield&lt;/a&gt; :target: &lt;a href=&#34;https://circleci.com/gh/ckan/ckan&#34;&gt;https://circleci.com/gh/ckan/ckan&lt;/a&gt; :alt: Build Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://coveralls.io/repos/github/ckan/ckan/badge.svg?branch=master&#34;&gt;https://coveralls.io/repos/github/ckan/ckan/badge.svg?branch=master&lt;/a&gt; :target: &lt;a href=&#34;https://coveralls.io/github/ckan/ckan?branch=master&#34;&gt;https://coveralls.io/github/ckan/ckan?branch=master&lt;/a&gt; :alt: Coverage Status&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://badges.gitter.im/gitterHQ/gitter.svg&#34;&gt;https://badges.gitter.im/gitterHQ/gitter.svg&lt;/a&gt; :target: &lt;a href=&#34;https://gitter.im/ckan/chat&#34;&gt;https://gitter.im/ckan/chat&lt;/a&gt; :alt: Chat on Gitter&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CKAN is the world’s leading open-source data portal platform&lt;/strong&gt;. CKAN makes it easy to publish, share and work with data. It&#39;s a data management system that provides a powerful platform for cataloging, storing and accessing datasets with a rich front-end, full API (for both data and catalog), visualization tools and more. Read more at &lt;code&gt;ckan.org &amp;lt;http://ckan.org/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;code&gt;CKAN Documentation &amp;lt;http://docs.ckan.org&amp;gt;&lt;/code&gt;_ for installation instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you need help with CKAN or want to ask a question, use either the &lt;code&gt;ckan-dev&lt;/code&gt;_ mailing list, the &lt;code&gt;CKAN chat on Gitter&lt;/code&gt;&lt;em&gt;, or the &lt;code&gt;CKAN tag on Stack Overflow&lt;/code&gt;&lt;/em&gt; (try searching the Stack Overflow and ckan-dev &lt;code&gt;archives&lt;/code&gt;_ for an answer to your question first).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug in CKAN, open a new issue on CKAN&#39;s &lt;code&gt;GitHub Issues&lt;/code&gt;_ (try searching first to see if there&#39;s already an issue for your bug).&lt;/p&gt; &#xA;&lt;p&gt;If you find a potential security vulnerability please email &lt;a href=&#34;mailto:security@ckan.org&#34;&gt;security@ckan.org&lt;/a&gt;, rather than creating a public issue on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;.. _CKAN tag on Stack Overflow: &lt;a href=&#34;http://stackoverflow.com/questions/tagged/ckan&#34;&gt;http://stackoverflow.com/questions/tagged/ckan&lt;/a&gt; .. _archives: &lt;a href=&#34;https://groups.google.com/a/ckan.org/g/ckan-dev&#34;&gt;https://groups.google.com/a/ckan.org/g/ckan-dev&lt;/a&gt; .. _GitHub Issues: &lt;a href=&#34;https://github.com/ckan/ckan/issues&#34;&gt;https://github.com/ckan/ckan/issues&lt;/a&gt; .. _CKAN chat on Gitter: &lt;a href=&#34;https://gitter.im/ckan/chat&#34;&gt;https://gitter.im/ckan/chat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to CKAN&lt;/h2&gt; &#xA;&lt;p&gt;For contributing to CKAN or its documentation, see &lt;code&gt;CONTRIBUTING &amp;lt;https://github.com/ckan/ckan/blob/master/CONTRIBUTING.md&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Mailing List&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Subscribe to the `ckan-dev`_ mailing list to receive news about upcoming releases and&#xA;future plans as well as questions and discussions about CKAN development, deployment, etc.&#xA;&#xA;Community Chat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to talk about CKAN development say hi to the CKAN developers and members of the CKAN community on the public &lt;code&gt;CKAN chat on Gitter&lt;/code&gt;_. Gitter is free and open-source; you can sign in with your GitHub, GitLab, or Twitter account.&lt;/p&gt; &#xA;&lt;p&gt;The logs for the old &lt;code&gt;#ckan&lt;/code&gt;_ IRC channel (2014 to 2018) can be found here: &lt;a href=&#34;https://github.com/ckan/irc-logs&#34;&gt;https://github.com/ckan/irc-logs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Wiki&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;If you&#39;ve figured out how to do something with CKAN and want to document it for&#xA;others, make a new page on the `CKAN wiki`_ and tell us about it on the&#xA;ckan-dev mailing list or on Gitter.&#xA;&#xA;.. _ckan-dev: https://groups.google.com/a/ckan.org/forum/#!forum/ckan-dev&#xA;.. _#ckan: http://webchat.freenode.net/?channels=ckan&#xA;.. _CKAN Wiki: https://github.com/ckan/ckan/wiki&#xA;.. _CKAN chat on Gitter: https://gitter.im/ckan/chat&#xA;&#xA;&#xA;Copying and License&#xA;-------------------&#xA;&#xA;This material is copyright (c) 2006-2023 Open Knowledge Foundation and contributors.&#xA;&#xA;It is open and licensed under the GNU Affero General Public License (AGPL) v3.0&#xA;whose full text may be found at:&#xA;&#xA;http://www.fsf.org/licensing/licenses/agpl-3.0.html&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>