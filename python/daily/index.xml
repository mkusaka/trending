<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-13T01:34:56Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jax-ml/jax</title>
    <updated>2025-07-13T01:34:56Z</updated>
    <id>tag:github.com,2025-07-13:/jax-ml/jax</id>
    <link href="https://github.com/jax-ml/jax" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Composable transformations of Python+NumPy programs: differentiate, vectorize, JIT to GPU/TPU, and more&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/images/jax_logo_250px.png&#34; alt=&#34;logo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Transformable numerical computing at scale&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jax-ml/jax/actions/workflows/ci-build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/jax-ml/jax/actions/workflows/ci-build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Continuous integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/jax/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/jax&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#transformations&#34;&gt;&lt;strong&gt;Transformations&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#scaling&#34;&gt;&lt;strong&gt;Scaling&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#installation&#34;&gt;&lt;strong&gt;Install guide&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://docs.jax.dev/en/latest/changelog.html&#34;&gt;&lt;strong&gt;Change logs&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://docs.jax.dev/en/latest/&#34;&gt;&lt;strong&gt;Reference docs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is JAX?&lt;/h2&gt; &#xA;&lt;p&gt;JAX is a Python library for accelerator-oriented array computation and program transformation, designed for high-performance numerical computing and large-scale machine learning.&lt;/p&gt; &#xA;&lt;p&gt;JAX can automatically differentiate native Python and NumPy functions. It can differentiate through loops, branches, recursion, and closures, and it can take derivatives of derivatives of derivatives. It supports reverse-mode differentiation (a.k.a. backpropagation) via &lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#automatic-differentiation-with-grad&#34;&gt;&lt;code&gt;jax.grad&lt;/code&gt;&lt;/a&gt; as well as forward-mode differentiation, and the two can be composed arbitrarily to any order.&lt;/p&gt; &#xA;&lt;p&gt;JAX uses &lt;a href=&#34;https://www.tensorflow.org/xla&#34;&gt;XLA&lt;/a&gt; to compile and scale your NumPy programs on TPUs, GPUs, and other hardware accelerators. You can compile your own pure functions with &lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#compilation-with-jit&#34;&gt;&lt;code&gt;jax.jit&lt;/code&gt;&lt;/a&gt;. Compilation and automatic differentiation can be composed arbitrarily.&lt;/p&gt; &#xA;&lt;p&gt;Dig a little deeper, and you&#39;ll see that JAX is really an extensible system for &lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#transformations&#34;&gt;composable function transformations&lt;/a&gt; at &lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#scaling&#34;&gt;scale&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a research project, not an official Google product. Expect &lt;a href=&#34;https://docs.jax.dev/en/latest/notebooks/Common_Gotchas_in_JAX.html&#34;&gt;sharp edges&lt;/a&gt;. Please help by trying it out, &lt;a href=&#34;https://github.com/jax-ml/jax/issues&#34;&gt;reporting bugs&lt;/a&gt;, and letting us know what you think!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jax&#xA;import jax.numpy as jnp&#xA;&#xA;def predict(params, inputs):&#xA;  for W, b in params:&#xA;    outputs = jnp.dot(inputs, W) + b&#xA;    inputs = jnp.tanh(outputs)  # inputs to the next layer&#xA;  return outputs                # no activation on last layer&#xA;&#xA;def loss(params, inputs, targets):&#xA;  preds = predict(params, inputs)&#xA;  return jnp.sum((preds - targets)**2)&#xA;&#xA;grad_loss = jax.jit(jax.grad(loss))  # compiled gradient evaluation function&#xA;perex_grads = jax.jit(jax.vmap(grad_loss, in_axes=(None, 0, 0)))  # fast per-example grads&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#transformations&#34;&gt;Transformations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#scaling&#34;&gt;Scaling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#gotchas-and-sharp-bits&#34;&gt;Current gotchas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#neural-network-libraries&#34;&gt;Neural net libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#citing-jax&#34;&gt;Citing JAX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/#reference-documentation&#34;&gt;Reference documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Transformations&lt;/h2&gt; &#xA;&lt;p&gt;At its core, JAX is an extensible system for transforming numerical functions. Here are three: &lt;code&gt;jax.grad&lt;/code&gt;, &lt;code&gt;jax.jit&lt;/code&gt;, and &lt;code&gt;jax.vmap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic differentiation with &lt;code&gt;grad&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://docs.jax.dev/en/latest/jax.html#jax.grad&#34;&gt;&lt;code&gt;jax.grad&lt;/code&gt;&lt;/a&gt; to efficiently compute reverse-mode gradients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jax&#xA;import jax.numpy as jnp&#xA;&#xA;def tanh(x):&#xA;  y = jnp.exp(-2.0 * x)&#xA;  return (1.0 - y) / (1.0 + y)&#xA;&#xA;grad_tanh = jax.grad(tanh)&#xA;print(grad_tanh(1.0))&#xA;# prints 0.4199743&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can differentiate to any order with &lt;code&gt;grad&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(jax.grad(jax.grad(jax.grad(tanh)))(1.0))&#xA;# prints 0.62162673&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;re free to use differentiation with Python control flow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def abs_val(x):&#xA;  if x &amp;gt; 0:&#xA;    return x&#xA;  else:&#xA;    return -x&#xA;&#xA;abs_val_grad = jax.grad(abs_val)&#xA;print(abs_val_grad(1.0))   # prints 1.0&#xA;print(abs_val_grad(-1.0))  # prints -1.0 (abs_val is re-evaluated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.jax.dev/en/latest/notebooks/autodiff_cookbook.html&#34;&gt;JAX Autodiff Cookbook&lt;/a&gt; and the &lt;a href=&#34;https://docs.jax.dev/en/latest/jax.html#automatic-differentiation&#34;&gt;reference docs on automatic differentiation&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Compilation with &lt;code&gt;jit&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use XLA to compile your functions end-to-end with &lt;a href=&#34;https://docs.jax.dev/en/latest/jax.html#just-in-time-compilation-jit&#34;&gt;&lt;code&gt;jit&lt;/code&gt;&lt;/a&gt;, used either as an &lt;code&gt;@jit&lt;/code&gt; decorator or as a higher-order function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jax&#xA;import jax.numpy as jnp&#xA;&#xA;def slow_f(x):&#xA;  # Element-wise ops see a large benefit from fusion&#xA;  return x * x + x * 2.0&#xA;&#xA;x = jnp.ones((5000, 5000))&#xA;fast_f = jax.jit(slow_f)&#xA;%timeit -n10 -r3 fast_f(x)&#xA;%timeit -n10 -r3 slow_f(x)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;jax.jit&lt;/code&gt; constrains the kind of Python control flow the function can use; see the tutorial on &lt;a href=&#34;https://docs.jax.dev/en/latest/control-flow.html&#34;&gt;Control Flow and Logical Operators with JIT&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-vectorization with &lt;code&gt;vmap&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.jax.dev/en/latest/jax.html#vectorization-vmap&#34;&gt;&lt;code&gt;vmap&lt;/code&gt;&lt;/a&gt; maps a function along array axes. But instead of just looping over function applications, it pushes the loop down onto the function’s primitive operations, e.g. turning matrix-vector multiplies into matrix-matrix multiplies for better performance.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;vmap&lt;/code&gt; can save you from having to carry around batch dimensions in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import jax&#xA;import jax.numpy as jnp&#xA;&#xA;def l1_distance(x, y):&#xA;  assert x.ndim == y.ndim == 1  # only works on 1D inputs&#xA;  return jnp.sum(jnp.abs(x - y))&#xA;&#xA;def pairwise_distances(dist1D, xs):&#xA;  return jax.vmap(jax.vmap(dist1D, (0, None)), (None, 0))(xs, xs)&#xA;&#xA;xs = jax.random.normal(jax.random.key(0), (100, 3))&#xA;dists = pairwise_distances(l1_distance, xs)&#xA;dists.shape  # (100, 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By composing &lt;code&gt;jax.vmap&lt;/code&gt; with &lt;code&gt;jax.grad&lt;/code&gt; and &lt;code&gt;jax.jit&lt;/code&gt;, we can get efficient Jacobian matrices, or per-example gradients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;per_example_grads = jax.jit(jax.vmap(jax.grad(loss), in_axes=(None, 0, 0)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scaling&lt;/h2&gt; &#xA;&lt;p&gt;To scale your computations across thousands of devices, you can use any composition of these:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.jax.dev/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html&#34;&gt;&lt;strong&gt;Compiler-based automatic parallelization&lt;/strong&gt;&lt;/a&gt; where you program as if using a single global machine, and the compiler chooses how to shard data and partition computation (with some user-provided constraints);&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.jax.dev/en/latest/notebooks/explicit-sharding.html&#34;&gt;&lt;strong&gt;Explicit sharding and automatic partitioning&lt;/strong&gt;&lt;/a&gt; where you still have a global view but data shardings are explicit in JAX types, inspectable using &lt;code&gt;jax.typeof&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.jax.dev/en/latest/notebooks/shard_map.html&#34;&gt;&lt;strong&gt;Manual per-device programming&lt;/strong&gt;&lt;/a&gt; where you have a per-device view of data and computation, and can communicate with explicit collectives.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;View?&lt;/th&gt; &#xA;   &lt;th&gt;Explicit sharding?&lt;/th&gt; &#xA;   &lt;th&gt;Explicit Collectives?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Auto&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Explicit&lt;/td&gt; &#xA;   &lt;td&gt;Global&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Manual&lt;/td&gt; &#xA;   &lt;td&gt;Per-device&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from jax.sharding import set_mesh, AxisType, PartitionSpec as P&#xA;mesh = jax.make_mesh((8,), (&#39;data&#39;,), axis_types=(AxisType.Explicit,))&#xA;set_mesh(mesh)&#xA;&#xA;# parameters are sharded for FSDP:&#xA;for W, b in params:&#xA;  print(f&#39;{jax.typeof(W)}&#39;)  # f32[512@data,512]&#xA;  print(f&#39;{jax.typeof(b)}&#39;)  # f32[512]&#xA;&#xA;# shard data for batch parallelism:&#xA;inputs, targets = jax.device_put((inputs, targets), P(&#39;data&#39;))&#xA;&#xA;# evaluate gradients, automatically parallelized!&#xA;gradfun = jax.jit(jax.grad(loss))&#xA;param_grads = gradfun(params, (inputs, targets))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.jax.dev/en/latest/sharded-computation.html&#34;&gt;tutorial&lt;/a&gt; and &lt;a href=&#34;https://docs.jax.dev/en/latest/advanced_guide.html&#34;&gt;advanced guides&lt;/a&gt; for more.&lt;/p&gt; &#xA;&lt;h2&gt;Gotchas and sharp bits&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://docs.jax.dev/en/latest/notebooks/Common_Gotchas_in_JAX.html&#34;&gt;Gotchas Notebook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Supported platforms&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Linux x86_64&lt;/th&gt; &#xA;   &lt;th&gt;Linux aarch64&lt;/th&gt; &#xA;   &lt;th&gt;Mac aarch64&lt;/th&gt; &#xA;   &lt;th&gt;Windows x86_64&lt;/th&gt; &#xA;   &lt;th&gt;Windows WSL2 x86_64&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA GPU&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;experimental&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google TPU&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMD GPU&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apple GPU&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;experimental&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel GPU&lt;/td&gt; &#xA;   &lt;td&gt;experimental&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Instructions&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Instructions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install -U jax&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NVIDIA GPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install -U &#34;jax[cuda12]&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google TPU&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip install -U &#34;jax[tpu]&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMD GPU (Linux)&lt;/td&gt; &#xA;   &lt;td&gt;Follow &lt;a href=&#34;https://github.com/jax-ml/jax/raw/main/build/rocm/README.md&#34;&gt;AMD&#39;s instructions&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mac GPU&lt;/td&gt; &#xA;   &lt;td&gt;Follow &lt;a href=&#34;https://developer.apple.com/metal/jax/&#34;&gt;Apple&#39;s instructions&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Intel GPU&lt;/td&gt; &#xA;   &lt;td&gt;Follow &lt;a href=&#34;https://github.com/intel/intel-extension-for-openxla/raw/main/docs/acc_jax.md&#34;&gt;Intel&#39;s instructions&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.jax.dev/en/latest/installation.html&#34;&gt;the documentation&lt;/a&gt; for information on alternative installation strategies. These include compiling from source, installing with Docker, using other versions of CUDA, a community-supported conda build, and answers to some frequently-asked questions.&lt;/p&gt; &#xA;&lt;h2&gt;Citing JAX&lt;/h2&gt; &#xA;&lt;p&gt;To cite this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@software{jax2018github,&#xA;  author = {James Bradbury and Roy Frostig and Peter Hawkins and Matthew James Johnson and Chris Leary and Dougal Maclaurin and George Necula and Adam Paszke and Jake Vander{P}las and Skye Wanderman-{M}ilne and Qiao Zhang},&#xA;  title = {{JAX}: composable transformations of {P}ython+{N}um{P}y programs},&#xA;  url = {http://github.com/jax-ml/jax},&#xA;  version = {0.3.13},&#xA;  year = {2018},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above bibtex entry, names are in alphabetical order, the version number is intended to be that from &lt;a href=&#34;https://raw.githubusercontent.com/jax-ml/jax/main/jax/version.py&#34;&gt;jax/version.py&lt;/a&gt;, and the year corresponds to the project&#39;s open-source release.&lt;/p&gt; &#xA;&lt;p&gt;A nascent version of JAX, supporting only automatic differentiation and compilation to XLA, was described in a &lt;a href=&#34;https://mlsys.org/Conferences/2019/doc/2018/146.pdf&#34;&gt;paper that appeared at SysML 2018&lt;/a&gt;. We&#39;re currently working on covering JAX&#39;s ideas and capabilities in a more comprehensive and up-to-date paper.&lt;/p&gt; &#xA;&lt;h2&gt;Reference documentation&lt;/h2&gt; &#xA;&lt;p&gt;For details about the JAX API, see the &lt;a href=&#34;https://docs.jax.dev/&#34;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For getting started as a JAX developer, see the &lt;a href=&#34;https://docs.jax.dev/en/latest/developer.html&#34;&gt;developer documentation&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>markqvist/Reticulum</title>
    <updated>2025-07-13T01:34:56Z</updated>
    <id>tag:github.com,2025-07-13:/markqvist/Reticulum</id>
    <link href="https://github.com/markqvist/Reticulum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The cryptography-based networking stack for building unstoppable networks with LoRa, Packet Radio, WiFi and everything in between.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reticulum Network Stack β &lt;img align=&#34;right&#34; src=&#34;https://static.pepy.tech/personalized-badge/rns?period=month&amp;amp;units=international_system&amp;amp;left_color=grey&amp;amp;right_color=blue&amp;amp;left_text=Installs/month&#34; style=&#34;padding-left:10px&#34;&gt;&lt;a href=&#34;https://github.com/markqvist/Reticulum/actions/workflows/build.yml&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://github.com/markqvist/Reticulum/actions/workflows/build.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/markqvist/Reticulum/master/docs/source/graphics/rns_logo_512.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Reticulum is the cryptography-based networking stack for building local and wide-area networks with readily available hardware. It can operate even with very high latency and extremely low bandwidth. Reticulum allows you to build wide-area networks with off-the-shelf tools, and offers end-to-end encryption and connectivity, initiator anonymity, autoconfiguring cryptographically backed multi-hop transport, efficient addressing, unforgeable delivery acknowledgements and more.&lt;/p&gt; &#xA;&lt;p&gt;The vision of Reticulum is to allow anyone to be their own network operator, and to make it cheap and easy to cover vast areas with a myriad of independent, inter-connectable and autonomous networks. Reticulum &lt;strong&gt;is not&lt;/strong&gt; &lt;em&gt;one&lt;/em&gt; network. It is &lt;strong&gt;a tool&lt;/strong&gt; for building &lt;em&gt;thousands of networks&lt;/em&gt;. Networks without kill-switches, surveillance, censorship and control. Networks that can freely interoperate, associate and disassociate with each other, and require no central oversight. Networks for human beings. &lt;em&gt;Networks for the people&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Reticulum is a complete networking stack, and does not rely on IP or higher layers, but it is possible to use IP as the underlying carrier for Reticulum. It is therefore trivial to tunnel Reticulum over the Internet or private IP networks.&lt;/p&gt; &#xA;&lt;p&gt;Having no dependencies on traditional networking stacks frees up overhead that has been used to implement a networking stack built directly on cryptographic principles, allowing resilience and stable functionality, even in open and trustless networks.&lt;/p&gt; &#xA;&lt;p&gt;No kernel modules or drivers are required. Reticulum runs completely in userland, and can run on practically any system that runs Python 3.&lt;/p&gt; &#xA;&lt;h2&gt;Read The Manual&lt;/h2&gt; &#xA;&lt;p&gt;The full documentation for Reticulum is available at &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/&#34;&gt;markqvist.github.io/Reticulum/manual/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also download the &lt;a href=&#34;https://github.com/markqvist/Reticulum/raw/master/docs/Reticulum%20Manual.pdf&#34;&gt;Reticulum manual as a PDF&lt;/a&gt; or &lt;a href=&#34;https://github.com/markqvist/Reticulum/raw/master/docs/Reticulum%20Manual.epub&#34;&gt;as an e-book in EPUB format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more info, see &lt;a href=&#34;https://reticulum.network/&#34;&gt;reticulum.network&lt;/a&gt; and &lt;a href=&#34;https://github.com/markqvist/Reticulum/wiki/Frequently-Asked-Questions&#34;&gt;the FAQ section of the wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notable Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coordination-less globally unique addressing and identification&lt;/li&gt; &#xA; &lt;li&gt;Fully self-configuring multi-hop routing over heterogeneous carriers&lt;/li&gt; &#xA; &lt;li&gt;Flexible scalability over heterogeneous topologies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reticulum can carry data over any mixture of physical mediums and topologies&lt;/li&gt; &#xA;   &lt;li&gt;Low-bandwidth networks can co-exist and interoperate with large, high-bandwidth networks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Initiator anonymity, communicate without revealing your identity &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reticulum does not include source addresses on any packets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Asymmetric X25519 encryption and Ed25519 signatures as a basis for all communication &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The foundational Reticulum Identity Keys are 512-bit Elliptic Curve keysets&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Forward Secrecy is available for all communication types, both for single packets and over links&lt;/li&gt; &#xA; &lt;li&gt;Reticulum uses the following format for encrypted tokens: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ephemeral per-packet and link keys and derived from an ECDH key exchange on Curve25519&lt;/li&gt; &#xA;   &lt;li&gt;AES-256 in CBC mode with PKCS7 padding&lt;/li&gt; &#xA;   &lt;li&gt;HMAC using SHA256 for authentication&lt;/li&gt; &#xA;   &lt;li&gt;IVs are generated through os.urandom()&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Unforgeable packet delivery confirmations&lt;/li&gt; &#xA; &lt;li&gt;Flexible and extensible interface system &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reticulum includes a large variety of built-in interface types&lt;/li&gt; &#xA;   &lt;li&gt;Ability to load and utilise custom user- or community-supplied interface types&lt;/li&gt; &#xA;   &lt;li&gt;Easily create your own custom interfaces for communicating over anything&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Authentication and virtual network segmentation on all supported interface types&lt;/li&gt; &#xA; &lt;li&gt;An intuitive and easy-to-use API &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Simpler and easier to use than sockets APIs, but more powerful&lt;/li&gt; &#xA;   &lt;li&gt;Makes building distributed and decentralised applications much simpler&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Reliable and efficient transfer of arbitrary amounts of data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reticulum can handle a few bytes of data or files of many gigabytes&lt;/li&gt; &#xA;   &lt;li&gt;Sequencing, compression, transfer coordination and checksumming are automatic&lt;/li&gt; &#xA;   &lt;li&gt;The API is very easy to use, and provides transfer progress&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lightweight, flexible and expandable Request/Response mechanism&lt;/li&gt; &#xA; &lt;li&gt;Efficient link establishment &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Total cost of setting up an encrypted and verified link is only 3 packets, totalling 297 bytes&lt;/li&gt; &#xA;   &lt;li&gt;Low cost of keeping links open at only 0.44 bits per second&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Reliable sequential delivery with Channel and Buffer mechanisms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;While Reticulum is already a fully featured and functional networking stack, many improvements and additions are actively being worked on, and planned for the future.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the direction and future of Reticulum, please see the &lt;a href=&#34;https://raw.githubusercontent.com/markqvist/Reticulum/master/Roadmap.md&#34;&gt;Development Roadmap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples of Reticulum Applications&lt;/h2&gt; &#xA;&lt;p&gt;If you want to quickly get an idea of what Reticulum can do, take a look at the following resources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use the &lt;a href=&#34;https://github.com/acehoss/rnsh&#34;&gt;rnsh&lt;/a&gt; program to establish remote shell sessions over Reticulum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/markqvist/lxmf&#34;&gt;LXMF&lt;/a&gt; is a distributed, delay and disruption tolerant message transfer protocol built on Reticulum&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/markqvist/lxst&#34;&gt;LXST&lt;/a&gt; protocol and framework provides real-time audio and signals transport over Reticulum. It includes primitives and utilities for building voice-based applications and hardware devices, such as the &lt;code&gt;rnphone&lt;/code&gt; program, that can be used to build hardware telephones.&lt;/li&gt; &#xA; &lt;li&gt;For an off-grid, encrypted and resilient mesh communications platform, see &lt;a href=&#34;https://github.com/markqvist/NomadNet&#34;&gt;Nomad Network&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Android, Linux, macOS and Windows app &lt;a href=&#34;https://github.com/markqvist/Sideband&#34;&gt;Sideband&lt;/a&gt; has a graphical interface and many advanced features, such as file transfers, image and voice messages, real-time voice calls, a distributed telemetry system, mapping capabilities and full plugin extensibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liamcottle/reticulum-meshchat&#34;&gt;MeshChat&lt;/a&gt; is a user-friendly LXMF client with a web-based interface, that also supports image and voice messages, as well as file transfers. It also includes a built-in page browser for browsing Nomad Network nodes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where can Reticulum be used?&lt;/h2&gt; &#xA;&lt;p&gt;Over practically any medium that can support at least a half-duplex channel with greater throughput than 5 bits per second, and an MTU of 500 bytes. Data radios, modems, LoRa radios, serial lines, AX.25 TNCs, amateur radio digital modes, WiFi and Ethernet devices, free-space optical links, and similar systems are all examples of the types of physical devices Reticulum can use.&lt;/p&gt; &#xA;&lt;p&gt;An open-source LoRa-based interface called &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/hardware.html#rnode&#34;&gt;RNode&lt;/a&gt; has been designed specifically for use with Reticulum. It is possible to build yourself, or it can be purchased as a complete transceiver that just needs a USB connection to the host.&lt;/p&gt; &#xA;&lt;p&gt;Reticulum can also be encapsulated over existing IP networks, so there&#39;s nothing stopping you from using it over wired Ethernet, your local WiFi network or the Internet, where it&#39;ll work just as well. In fact, one of the strengths of Reticulum is how easily it allows you to connect different mediums into a self-configuring, resilient and encrypted mesh, using any available mixture of available infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;As an example, it&#39;s possible to set up a Raspberry Pi connected to both a LoRa radio, a packet radio TNC and a WiFi network. Once the interfaces are configured, Reticulum will take care of the rest, and any device on the WiFi network can communicate with nodes on the LoRa and packet radio sides of the network, and vice versa.&lt;/p&gt; &#xA;&lt;h2&gt;How do I get started?&lt;/h2&gt; &#xA;&lt;p&gt;The best way to get started with the Reticulum Network Stack depends on what you want to do. For full details and examples, have a look at the &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/gettingstartedfast.html&#34;&gt;Getting Started Fast&lt;/a&gt; section of the &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/&#34;&gt;Reticulum Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To simply install Reticulum and related utilities on your system, the easiest way is via &lt;code&gt;pip&lt;/code&gt;. You can then start any program that uses Reticulum, or start Reticulum as a system service with &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/using.html#the-rnsd-utility&#34;&gt;the rnsd utility&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install rns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using an operating system that blocks normal user package installation via &lt;code&gt;pip&lt;/code&gt;, you can return &lt;code&gt;pip&lt;/code&gt; to normal behaviour by editing the &lt;code&gt;~/.config/pip/pip.conf&lt;/code&gt; file, and adding the following directive in the &lt;code&gt;[global]&lt;/code&gt; section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;[global]&#xA;break-system-packages = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the &lt;code&gt;pipx&lt;/code&gt; tool to install Reticulum in an isolated environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipx install rns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When first started, Reticulum will create a default configuration file, providing basic connectivity to other Reticulum peers that might be locally reachable. The default config file contains a few examples, and references for creating a more complex configuration.&lt;/p&gt; &#xA;&lt;p&gt;If you have an old version of &lt;code&gt;pip&lt;/code&gt; on your system, you may need to upgrade it first with &lt;code&gt;pip install pip --upgrade&lt;/code&gt;. If you no not already have &lt;code&gt;pip&lt;/code&gt; installed, you can install it using the package manager of your system with &lt;code&gt;sudo apt install python3-pip&lt;/code&gt; or similar.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed examples on how to expand communication over many mediums such as packet radio or LoRa, serial ports, or over fast IP links and the Internet using the UDP and TCP interfaces, take a look at the &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/interfaces.html&#34;&gt;Supported Interfaces&lt;/a&gt; section of the &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/&#34;&gt;Reticulum Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Included Utilities&lt;/h2&gt; &#xA;&lt;p&gt;Reticulum includes a range of useful utilities for managing your networks, viewing status and information, and other tasks. You can read more about these programs in the &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/using.html#included-utility-programs&#34;&gt;Included Utility Programs&lt;/a&gt; section of the &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/&#34;&gt;Reticulum Manual&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The system daemon &lt;code&gt;rnsd&lt;/code&gt; for running Reticulum as an always-available service&lt;/li&gt; &#xA; &lt;li&gt;An interface status utility called &lt;code&gt;rnstatus&lt;/code&gt;, that displays information about interfaces&lt;/li&gt; &#xA; &lt;li&gt;The path lookup and management tool &lt;code&gt;rnpath&lt;/code&gt; letting you view and modify path tables&lt;/li&gt; &#xA; &lt;li&gt;A diagnostics tool called &lt;code&gt;rnprobe&lt;/code&gt; for checking connectivity to destinations&lt;/li&gt; &#xA; &lt;li&gt;A simple file transfer program called &lt;code&gt;rncp&lt;/code&gt; making it easy to transfer files between systems&lt;/li&gt; &#xA; &lt;li&gt;The identity management and encryption utility &lt;code&gt;rnid&lt;/code&gt; let&#39;s you manage Identities and encrypt/decrypt files&lt;/li&gt; &#xA; &lt;li&gt;The remote command execution program &lt;code&gt;rnx&lt;/code&gt; let&#39;s you run commands and programs and retrieve output from remote systems&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All tools, including &lt;code&gt;rnx&lt;/code&gt; and &lt;code&gt;rncp&lt;/code&gt;, work reliably and well even over very low-bandwidth links like LoRa or Packet Radio. For full-featured remote shells over Reticulum, also have a look at the &lt;a href=&#34;https://github.com/acehoss/rnsh&#34;&gt;rnsh&lt;/a&gt; program.&lt;/p&gt; &#xA;&lt;h2&gt;Supported interface types and devices&lt;/h2&gt; &#xA;&lt;p&gt;Reticulum implements a range of generalised interface types that covers most of the communications hardware that Reticulum can run over. If your hardware is not supported, it&#39;s &lt;a href=&#34;https://markqvist.github.io/Reticulum/manual/interfaces.html#custom-interfaces&#34;&gt;simple to implement a custom interface module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests for custom interfaces are gratefully accepted, provided they are generally useful and well-tested in real-world usage.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the following built-in interfaces are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any Ethernet device&lt;/li&gt; &#xA; &lt;li&gt;LoRa using &lt;a href=&#34;https://unsigned.io/rnode/&#34;&gt;RNode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Packet Radio TNCs (with or without AX.25)&lt;/li&gt; &#xA; &lt;li&gt;KISS-compatible hardware and software modems&lt;/li&gt; &#xA; &lt;li&gt;Any device with a serial port&lt;/li&gt; &#xA; &lt;li&gt;TCP over IP networks&lt;/li&gt; &#xA; &lt;li&gt;UDP over IP networks&lt;/li&gt; &#xA; &lt;li&gt;External programs via stdio or pipes&lt;/li&gt; &#xA; &lt;li&gt;Custom hardware via stdio or pipes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Reticulum targets a &lt;em&gt;very&lt;/em&gt; wide usable performance envelope, but prioritises functionality and performance on low-bandwidth mediums. The goal is to provide a dynamic performance envelope from 250 bits per second, to 1 gigabit per second on normal hardware.&lt;/p&gt; &#xA;&lt;p&gt;Currently, the usable performance envelope is approximately 150 bits per second to 40 megabits per second, with physical mediums faster than that not being saturated. Performance beyond the current level is intended for future upgrades, but not highly prioritised at this point in time.&lt;/p&gt; &#xA;&lt;h2&gt;Current Status&lt;/h2&gt; &#xA;&lt;p&gt;Reticulum should currently be considered beta software. All core protocol features are implemented and functioning, but additions will probably occur as real-world use is explored. There will be bugs. The API and wire-format can be considered relatively stable at the moment, but could change if warranted.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;The installation of the default &lt;code&gt;rns&lt;/code&gt; package requires the dependencies listed below. Almost all systems and distributions have readily available packages for these dependencies, and when the &lt;code&gt;rns&lt;/code&gt; package is installed with &lt;code&gt;pip&lt;/code&gt;, they will be downloaded and installed as well.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;PyCA/cryptography&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyserial/pyserial&#34;&gt;pyserial&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On more unusual systems, and in some rare cases, it might not be possible to install or even compile one or more of the above modules. In such situations, you can use the &lt;code&gt;rnspure&lt;/code&gt; package instead, which require no external dependencies for installation. Please note that the contents of the &lt;code&gt;rns&lt;/code&gt; and &lt;code&gt;rnspure&lt;/code&gt; packages are &lt;em&gt;identical&lt;/em&gt;. The only difference is that the &lt;code&gt;rnspure&lt;/code&gt; package lists no dependencies required for installation.&lt;/p&gt; &#xA;&lt;p&gt;No matter how Reticulum is installed and started, it will load external dependencies only if they are &lt;em&gt;needed&lt;/em&gt; and &lt;em&gt;available&lt;/em&gt;. If for example you want to use Reticulum on a system that cannot support &lt;a href=&#34;https://github.com/pyserial/pyserial&#34;&gt;pyserial&lt;/a&gt;, it is perfectly possible to do so using the &lt;code&gt;rnspure&lt;/code&gt; package, but Reticulum will not be able to use serial-based interfaces. All other available modules will still be loaded when needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please Note!&lt;/strong&gt; If you use the &lt;code&gt;rnspure&lt;/code&gt; package to run Reticulum on systems that do not support &lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;PyCA/cryptography&lt;/a&gt;, it is important that you read and understand the &lt;a href=&#34;https://raw.githubusercontent.com/markqvist/Reticulum/master/#cryptographic-primitives&#34;&gt;Cryptographic Primitives&lt;/a&gt; section of this document.&lt;/p&gt; &#xA;&lt;h2&gt;Public Testnet&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to get started experimenting without building any physical networks, you are welcome to join the RNS Development Testnet.&lt;/p&gt; &#xA;&lt;p&gt;The testnet is just that, an informal network for testing and experimenting. It will be up most of the time, and anyone can join, but it also means that there&#39;s no guarantees for service availability.&lt;/p&gt; &#xA;&lt;p&gt;It probably goes without saying, but &lt;em&gt;don&#39;t use the testnet entry-points as hardcoded or default interfaces in any applications you ship to users&lt;/em&gt;. When shipping applications, the best practice is to provide your own default connectivity solutions, if needed and applicable, or in most cases, simply leave it up to the user which networks to connect to, and how.&lt;/p&gt; &#xA;&lt;p&gt;The testnet runs the very latest version of Reticulum (often even a short while before it is publicly released). Sometimes experimental versions of Reticulum might be deployed to nodes on the testnet, which means strange behaviour might occur. If none of that scares you, you can join the testnet via either TCP or I2P. Just add one of the following interfaces to your Reticulum configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# TCP/IP interface to the RNS Amsterdam Hub&#xA;  [[RNS Testnet Amsterdam]]&#xA;    type = TCPClientInterface&#xA;    enabled = yes&#xA;    target_host = amsterdam.connect.reticulum.network&#xA;    target_port = 4965&#xA;&#xA;# TCP/IP interface to the BetweenTheBorders Hub (community-provided)&#xA;  [[RNS Testnet BetweenTheBorders]]&#xA;    type = TCPClientInterface&#xA;    enabled = yes&#xA;    target_host = reticulum.betweentheborders.com&#xA;    target_port = 4242&#xA;&#xA;# Interface to Testnet I2P Hub&#xA;  [[RNS Testnet I2P Hub]]&#xA;    type = I2PInterface&#xA;    enabled = yes&#xA;    peers = g3br23bvx3lq5uddcsjii74xgmn6y5q325ovrkq2zw2wbzbqgbuq.b32.i2p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The testnet also contains a number of &lt;a href=&#34;https://github.com/markqvist/nomadnet&#34;&gt;Nomad Network&lt;/a&gt; nodes, and LXMF propagation nodes.&lt;/p&gt; &#xA;&lt;h2&gt;Support Reticulum&lt;/h2&gt; &#xA;&lt;p&gt;You can help support the continued development of open, free and private communications systems by donating via one of the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Monero:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;84FpY1QbxHcgdseePYNmhTHcrgMX4nFfBYtz2GKYToqHVVhJp8Eaw1Z1EedRnKD19b3B8NiLCGVxzKV17UMmmeEsCrPyA5w&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bitcoin&lt;/p&gt; &lt;pre&gt;&lt;code&gt;bc1p4a6axuvl7n9hpapfj8sv5reqj8kz6uxa67d5en70vzrttj0fmcusgxsfk5&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ethereum&lt;/p&gt; &lt;pre&gt;&lt;code&gt;0xae89F3B94fC4AD6563F0864a55F9a697a90261ff&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Liberapay: &lt;a href=&#34;https://liberapay.com/Reticulum/&#34;&gt;https://liberapay.com/Reticulum/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ko-Fi: &lt;a href=&#34;https://ko-fi.com/markqvist&#34;&gt;https://ko-fi.com/markqvist&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cryptographic Primitives&lt;/h2&gt; &#xA;&lt;p&gt;Reticulum uses a simple suite of efficient, strong and well-tested cryptographic primitives, with widely available implementations that can be used both on general-purpose CPUs and on microcontrollers.&lt;/p&gt; &#xA;&lt;p&gt;One of the primary considerations for choosing this particular set of primitives is that they can be implemented &lt;em&gt;safely&lt;/em&gt; with relatively few pitfalls, on practically all current computing platforms.&lt;/p&gt; &#xA;&lt;p&gt;The primitives listed here &lt;strong&gt;are authoritative&lt;/strong&gt;. Anything claiming to be Reticulum, but not using these exact primitives &lt;strong&gt;is not&lt;/strong&gt; Reticulum, and possibly an intentionally compromised or weakened clone. The utilised primitives are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reticulum Identity Keys are 512-bit Curve25519 keysets &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A 256-bit Ed25519 key for signatures&lt;/li&gt; &#xA;   &lt;li&gt;A 256-bit X22519 key for ECDH key exchanges&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;HKDF for key derivation&lt;/li&gt; &#xA; &lt;li&gt;Encrypted tokens are based on the &lt;a href=&#34;https://github.com/fernet/spec/&#34;&gt;Fernet spec&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ephemeral keys derived from an ECDH key exchange on Curve25519&lt;/li&gt; &#xA;   &lt;li&gt;HMAC using SHA256 for message authentication&lt;/li&gt; &#xA;   &lt;li&gt;IVs must be generated through &lt;code&gt;os.urandom()&lt;/code&gt; or better&lt;/li&gt; &#xA;   &lt;li&gt;AES-256 in CBC mode with PKCS7 padding&lt;/li&gt; &#xA;   &lt;li&gt;No Fernet version and timestamp metadata fields&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SHA-256&lt;/li&gt; &#xA; &lt;li&gt;SHA-512&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the default installation configuration, the &lt;code&gt;X25519&lt;/code&gt;, &lt;code&gt;Ed25519&lt;/code&gt;, and &lt;code&gt;AES-256-CBC&lt;/code&gt; primitives are provided by &lt;a href=&#34;https://www.openssl.org/&#34;&gt;OpenSSL&lt;/a&gt; (via the &lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;PyCA/cryptography&lt;/a&gt; package). The hashing functions &lt;code&gt;SHA-256&lt;/code&gt; and &lt;code&gt;SHA-512&lt;/code&gt; are provided by the standard Python &lt;a href=&#34;https://docs.python.org/3/library/hashlib.html&#34;&gt;hashlib&lt;/a&gt;. The &lt;code&gt;HKDF&lt;/code&gt;, &lt;code&gt;HMAC&lt;/code&gt;, &lt;code&gt;Token&lt;/code&gt; primitives, and the &lt;code&gt;PKCS7&lt;/code&gt; padding function are always provided by the following internal implementations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/markqvist/Reticulum/master/RNS/Cryptography/HKDF.py&#34;&gt;HKDF.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/markqvist/Reticulum/master/RNS/Cryptography/HMAC.py&#34;&gt;HMAC.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/markqvist/Reticulum/master/RNS/Cryptography/Token.py&#34;&gt;Token.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/markqvist/Reticulum/master/RNS/Cryptography/PKCS7.py&#34;&gt;PKCS7.py&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Reticulum also includes a complete implementation of all necessary primitives in pure Python. If OpenSSL and PyCA are not available on the system when Reticulum is started, Reticulum will instead use the internal pure-python primitives. A trivial consequence of this is performance, with the OpenSSL backend being &lt;em&gt;much&lt;/em&gt; faster. The most important consequence however, is the potential loss of security by using primitives that has not seen the same amount of scrutiny, testing and review as those from OpenSSL.&lt;/p&gt; &#xA;&lt;p&gt;Please note that by default, installing Reticulum will &lt;strong&gt;require&lt;/strong&gt; OpenSSL and PyCA to also be automatically installed if not already available. It is only possible to use the pure-python primitives if this requirement is specifically overridden by the user, for example by installing the &lt;code&gt;rnspure&lt;/code&gt; package instead of the normal &lt;code&gt;rns&lt;/code&gt; package, or by running directly from local source-code.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the internal pure-python primitives, it is &lt;strong&gt;highly advisable&lt;/strong&gt; that you have a good understanding of the risks that this pose, and make an informed decision on whether those risks are acceptable to you.&lt;/p&gt; &#xA;&lt;p&gt;Reticulum is relatively young software, and should be considered as such. While it has been built with cryptography best-practices very foremost in mind, it &lt;em&gt;has not&lt;/em&gt; been externally security audited, and there could very well be privacy or security breaking bugs. If you want to help out, or help sponsor an audit, please do get in touch.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements &amp;amp; Credits&lt;/h2&gt; &#xA;&lt;p&gt;Reticulum can only exist because of the mountain of Open Source work it was built on top of, the contributions of everyone involved, and everyone that has supported the project through the years. To everyone who has helped, thank you so much.&lt;/p&gt; &#xA;&lt;p&gt;A number of other modules and projects are either part of, or used by Reticulum. Sincere thanks to the authors and contributors of the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyca/cryptography&#34;&gt;PyCA/cryptography&lt;/a&gt;, &lt;em&gt;BSD License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/warner/python-pure25519&#34;&gt;Pure-25519&lt;/a&gt; by &lt;a href=&#34;https://github.com/warner&#34;&gt;Brian Warner&lt;/a&gt;, &lt;em&gt;MIT License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thomdixon/pysha2&#34;&gt;Pysha2&lt;/a&gt; by &lt;a href=&#34;https://github.com/thomdixon&#34;&gt;Thom Dixon&lt;/a&gt;, &lt;em&gt;MIT License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgurar/python-aes&#34;&gt;Python AES-128&lt;/a&gt; by &lt;a href=&#34;https://github.com/orgurar&#34;&gt;Or Gur Arie&lt;/a&gt;, &lt;em&gt;MIT License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boppreh/aes&#34;&gt;Python AES-256&lt;/a&gt; by &lt;a href=&#34;https://github.com/boppreh&#34;&gt;BoppreH&lt;/a&gt;, &lt;em&gt;MIT License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/nickovs/cc3c22d15f239a2640c185035c06f8a3#file-curve25519-py&#34;&gt;Curve25519.py&lt;/a&gt; by &lt;a href=&#34;https://gist.github.com/nickovs&#34;&gt;Nicko van Someren&lt;/a&gt;, &lt;em&gt;Public Domain&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/l-n-s/i2plib&#34;&gt;I2Plib&lt;/a&gt; by &lt;a href=&#34;https://github.com/l-n-s&#34;&gt;Viktor Villainov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyserial/pyserial&#34;&gt;PySerial&lt;/a&gt; by Chris Liechti, &lt;em&gt;BSD License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DiffSK/configobj&#34;&gt;Configobj&lt;/a&gt; by Michael Foord, Nicola Larosa, Rob Dennis &amp;amp; Eli Courtwright, &lt;em&gt;BSD License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pydron/ifaddr&#34;&gt;ifaddr&lt;/a&gt; by Stefan C. Mueller, &lt;em&gt;MIT License&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vsergeev/u-msgpack-python&#34;&gt;Umsgpack.py&lt;/a&gt; by &lt;a href=&#34;https://github.com/vsergeev&#34;&gt;Ivan A. Sergeev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>