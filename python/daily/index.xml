<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-17T01:37:24Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>startkkkkkk/Beijing_Daxuexi_Simple</title>
    <updated>2022-10-17T01:37:24Z</updated>
    <id>tag:github.com,2022-10-17:/startkkkkkk/Beijing_Daxuexi_Simple</id>
    <link href="https://github.com/startkkkkkk/Beijing_Daxuexi_Simple" rel="alternate"></link>
    <summary type="html">&lt;p&gt;北京 青年大学习 使用Github Actions自动完成&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;北京青年大学习&lt;/h1&gt; &#xA;&lt;p&gt;基于GitHub Action运行,简洁版本&lt;/p&gt; &#xA;&lt;p&gt;在运行时获取最新一集,如未学习进行学习,已学习则结束&lt;/p&gt; &#xA;&lt;p&gt;建议配置运行频率一周2次(默认为3天一次),没有成功会出错,默认配置下GitHub会向邮箱推送,所以没有推送功能&lt;/p&gt; &#xA;&lt;p&gt;一些特性：多账号支持,已学习则跳过,自动获取组织ID,验证码识别&lt;/p&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork (+ Star)&lt;/li&gt; &#xA; &lt;li&gt;填写以下SECRET （名称均为大写）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;​ (账号密码为登录青春北京的信息,可以在&lt;a href=&#34;https://m.bjyouth.net/site/login&#34;&gt;这里&lt;/a&gt;测试登录信息,&lt;a href=&#34;https://docs.github.com/cn/actions/security-guides/encrypted-secrets#creating-encrypted-secrets-for-a-repository&#34;&gt;如何添加SECRET&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;​ 方法1:单用户&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USERNAME&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;账号(必须)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PASSWORD&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;密码(必须)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;​ 方法2:支持多用户&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USERNAME&lt;/td&gt; &#xA;   &lt;td&gt;账号信息(必须): 每一行为 &lt;em&gt;&lt;strong&gt;账号 密码&lt;/strong&gt;&lt;/em&gt; 中间由空格隔开(由于需要手动权限更新workflow只能复用USERNAME这个名字了)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;在Actions界面&lt;strong&gt;手动启用(默认被禁用)&lt;/strong&gt; Workflows，&lt;strong&gt;DaXueXi&lt;/strong&gt; 自动跟随本分支更新(以希望在有变化时不用再手动fetch upstream)，如有安全顾虑&lt;strong&gt;或需要修改&lt;/strong&gt;等可选择没有自动更新的 &lt;strong&gt;DaXueXi (No update)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;(可以手动运行一次试验)，可以在Run python中看到打印的结果信息&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>Lightning-AI/stable-diffusion-deploy</title>
    <updated>2022-10-17T01:37:24Z</updated>
    <id>tag:github.com,2022-10-17:/Lightning-AI/stable-diffusion-deploy</id>
    <link href="https://github.com/Lightning-AI/stable-diffusion-deploy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn to serve Stable Diffusion models on cloud infrastructure at scale. This Lightning App shows load-balancing, orchestrating, pre-provisioning, dynamic batching, GPU-inference, micro-services working together via the Lightning Apps framework.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; &lt;img src=&#34;https://lightningaidev.wpengine.com/wp-content/uploads/2022/10/image-21.png&#34;&gt; &lt;br&gt; Use AI to inspire your art &lt;br&gt; &lt;/h1&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p align=&#34;center&#34; style=&#34;color:grey&#34;&gt;&lt;a href=&#34;https://lightning.ai/muse&#34;&gt;Muse is live here&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/stable-diffusion-deploy/main/#run-your-own&#34;&gt;Run your own&lt;/a&gt; • &lt;a href=&#34;https://www.lightning.ai/&#34;&gt;Lightning AI&lt;/a&gt; • &lt;a href=&#34;https://www.lightning.ai/muse&#34;&gt;Use Muse Live&lt;/a&gt; • &lt;a href=&#34;https://lightning.ai/pages/community/tutorial/deploy-diffusion-models/&#34;&gt;Full Tutorial&lt;/a&gt; &lt;/p&gt; &#xA;  &lt;p&gt;&lt;a href=&#34;https://lightning.ai/lightning-docs/&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pytorch-lightning/badge/?version=stable&#34; alt=&#34;ReadTheDocs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.pytorchlightning.ai/community&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-chat-green.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Lightning-AI/lightning/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Muse&lt;/h1&gt; &#xA;&lt;p&gt;Open source, stable-diffusion production server to show how to deploy diffusion models in a real production environment with: load-balancing, gpu-inference, performance-testing, micro-services orchestration and more. All handled easily with the &lt;a href=&#34;https://lightning.ai/lightning-docs/&#34;&gt;Lightning Apps framework&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lightning.ai/muse&#34;&gt;The app is live here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lightning.ai/pages/community/tutorial/deploy-diffusion-models/&#34;&gt;Full tutorial on how to build this app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;1246&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/3640001/195984024-788255e7-d01b-4522-9655-2a3ba56e80aa.png&#34;&gt; &#xA;&lt;h2&gt;Model&lt;/h2&gt; &#xA;&lt;p&gt;Muse uses the opensource Stable Diffusion model made available by &lt;a href=&#34;https://stability.ai/blog/stable-diffusion-public-release&#34;&gt;stability AI&lt;/a&gt;. We apply a few fancy tricks to make the inference super fast.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a small snippet showing our &lt;a href=&#34;https://github.com/Lightning-AI/stable-diffusion-deploy/raw/main/muse/components/stable_diffusion_serve.py#L103-L137&#34;&gt;model server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    @torch.inference_mode()&#xA;    def predict(self, dreams: List[Data], entry_time: int):&#xA;        # handle timeout&#xA;        if time.time() - entry_time &amp;gt; INFERENCE_REQUEST_TIMEOUT:&#xA;            raise TimeoutException()&#xA;&#xA;        # sets up the inference settings&#xA;        height = width = IMAGE_SIZE&#xA;        num_inference_steps = 50 if dreams[0].high_quality else 25&#xA;&#xA;        prompts = [dream.prompt for dream in dreams]&#xA;&#xA;        # GPU inference&#xA;        if torch.cuda.is_available():&#xA;            with autocast(&#34;cuda&#34;):&#xA;                torch.cuda.empty_cache()&#xA;                pil_results = self._model(&#xA;                    prompts,&#xA;                    height=height,&#xA;                    width=width,&#xA;                    num_inference_steps=num_inference_steps,&#xA;                )&#xA;            # apply filter&#xA;            nsfw_content = self._safety_checker(pil_results)&#xA;            for i, nsfw in enumerate(nsfw_content):&#xA;                if nsfw:&#xA;                    pil_results[i] = Image.open(&#34;assets/nsfw-warning.png&#34;)&#xA;        else:&#xA;            time.sleep(3)&#xA;            pil_results = [Image.fromarray(np.random.randint(0, 255, (height, width, 3), dtype=&#34;uint8&#34;))] * len(prompts)&#xA;&#xA;        # return the model&#xA;        results = []&#xA;        for image in pil_results:&#xA;            buffered = BytesIO()&#xA;            image.save(buffered, format=&#34;PNG&#34;)&#xA;            img_str = base64.b64encode(buffered.getvalue()).decode(&#34;utf-8&#34;)&#xA;            # make sure pil_results is a single item array or it&#39;ll rewrite image&#xA;            results.append({&#34;image&#34;: f&#34;data:image/png;base64,{img_str}&#34;})&#xA;&#xA;        return results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run your own&lt;/h2&gt; &#xA;&lt;p&gt;To run this app locally, follow these steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create --name muse_app python=3.9 --yes&#xA;conda activate muse_app&#xA;&#xA;git clone https://github.com/Lightning-AI/stable-diffusion-deploy.git&#xA;cd stable-diffusion-deploy&#xA;&#xA;## [Install PyTorch](https://pytorch.org) that suits your system configuration (CUDA version preferable)&#xA;pip install torch --extra-index-url https://download.pytorch.org/whl/cu116&#xA;bash dev_install.sh&#xA;&#xA;## To run the app locally&#xA;python -m lightning run app app.py&#xA;&#xA;## To run the app on the cloud to share it with your peers and users&#xA;python -m lightning run app app.py --cloud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About this Lightning App&lt;/h2&gt; &#xA;&lt;p&gt;Muse is a blueprint for building diffusion-based production systems with Lightning AI. This app shows you how to: &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Host a multi-tenant Frontend &amp;amp; Backend application architecture&lt;/li&gt; &#xA; &lt;li&gt;Full React.js UI&lt;/li&gt; &#xA; &lt;li&gt;Micro-services orchestration&lt;/li&gt; &#xA; &lt;li&gt;Cloud infrastructure pre-provisioning&lt;/li&gt; &#xA; &lt;li&gt;Serves a gpu-powered diffusion model via a REST API&lt;/li&gt; &#xA; &lt;li&gt;Dynamic GPU batching for inference requests&lt;/li&gt; &#xA; &lt;li&gt;Load balancer that autoscales infrastructure with load-changes&lt;/li&gt; &#xA; &lt;li&gt;Load Testing Lightning Component using Locust&lt;/li&gt; &#xA; &lt;li&gt;Environment variables to parametrize execution environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Slackbot&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;&lt;u&gt;How to integrate Muse to a Slack Workspace&lt;/u&gt;&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;You can integrate this app in your Slack Workspace and send images in Slack channels.&lt;/p&gt; &#xA; &lt;p&gt;This app uses the &lt;a href=&#34;https://github.com/Lightning-AI/LAI-slack-command-bot-Component&#34;&gt;Slack Command Bot Component&lt;/a&gt; to interact with Slack commands.&lt;/p&gt; &#xA; &lt;p&gt;You can also check out this video tutorial: &lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=KfQcXzWFR9I&#34;&gt; &lt;img src=&#34;https://lightningaidev.wpengine.com/wp-content/uploads/2022/10/Create-Slackbot.png&#34; width=&#34;600px&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA; &lt;h3&gt;How to create the Slack Command Bot&lt;/h3&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Go to &lt;a href=&#34;https://api.slack.com&#34;&gt;https://api.slack.com&lt;/a&gt; and create an app.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Copy the following tokens and secrets from the Slack API settings by going to &lt;a href=&#34;https://api.slack.com/apps&#34;&gt;https://api.slack.com/apps&lt;/a&gt;. These tokens have to be passed either as argument or environment variable to &lt;a href=&#34;https://github.com/Lightning-AI/LAI-slack-command-bot-Component/raw/main/slack_command_bot/component.py#L18&#34;&gt;SlackCommandBot&lt;/a&gt; class.&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;Required Token name and environment variables: &lt;/summary&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Client ID (SLACK_CLIENT_ID)&lt;/li&gt; &#xA;   &lt;li&gt;Client Secret (CLIENT_SECRET)&lt;/li&gt; &#xA;   &lt;li&gt;Signing Secret (SIGNING_SECRET)&lt;/li&gt; &#xA;   &lt;li&gt;Bot User OAuth Token (BOT_TOKEN)&lt;/li&gt; &#xA;   &lt;li&gt;App-Level Token (SLACK_TOKEN)&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/details&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Implement the &lt;code&gt;SlackCommandBot.handle_command(...)&lt;/code&gt; method the way you want to interact with the commands. The return value will be shown only to you.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Lightning-AI/stable-diffusion-deploy/main/assets/slack-ss.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; (optional)&lt;/p&gt; &#xA; &lt;p&gt;If you want your slack app to be distributable to public then you need to implement &lt;code&gt;SlackCommandBot.save_new_workspace(...)&lt;/code&gt; which should save &lt;code&gt;team_id&lt;/code&gt; and its corresponding &lt;code&gt;bot_token&lt;/code&gt; into a database.&lt;/p&gt; &#xA; &lt;p&gt;During the &lt;code&gt;handle_command(...)&lt;/code&gt; method you will need to fetch &lt;code&gt;bot_token&lt;/code&gt; based on the received &lt;code&gt;team_id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>Textualize/rich</title>
    <updated>2022-10-17T01:37:24Z</updated>
    <id>tag:github.com,2022-10-17:/Textualize/rich</id>
    <link href="https://github.com/Textualize/rich" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rich is a Python library for rich text and beautiful formatting in the terminal.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/rich/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/rich/10.11.0&#34; alt=&#34;Supported Python Versions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/rich&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/rich.svg?sanitize=true&#34; alt=&#34;PyPI version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pepy.tech/project/rich&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/rich/month&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Textualize/rich&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/Textualize/rich?label=codecov&amp;amp;logo=codecov&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.willmcgugan.com/tag/rich/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/blog-rich%20news-yellowgreen&#34; alt=&#34;Rich blog&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/willmcgugan&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/willmcgugan.svg?style=social&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/logo.svg?sanitize=true&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.md&#34;&gt;English readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.cn.md&#34;&gt;简体中文 readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.zh-tw.md&#34;&gt;正體中文 readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.es.md&#34;&gt;Lengua española readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.de.md&#34;&gt;Deutsche readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.sv.md&#34;&gt;Läs på svenska&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.ja.md&#34;&gt;日本語 readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.kr.md&#34;&gt;한국어 readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.fr.md&#34;&gt;Français readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.de-ch.md&#34;&gt;Schwizerdütsch readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.hi.md&#34;&gt;हिन्दी readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.pt-br.md&#34;&gt;Português brasileiro readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.it.md&#34;&gt;Italian readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.ru.md&#34;&gt;Русский readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.id.md&#34;&gt;Indonesian readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.fa.md&#34;&gt;فارسی readme&lt;/a&gt; • &lt;a href=&#34;https://github.com/textualize/rich/raw/master/README.tr.md&#34;&gt;Türkçe readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Rich is a Python library for &lt;em&gt;rich&lt;/em&gt; text and beautiful formatting in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://rich.readthedocs.io/en/latest/&#34;&gt;Rich API&lt;/a&gt; makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more — out of the box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/features.png&#34; alt=&#34;Features&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a video introduction to Rich see &lt;a href=&#34;https://calmcode.io/rich/introduction.html&#34;&gt;calmcode.io&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/fishnets88&#34;&gt;@fishnets88&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See what &lt;a href=&#34;https://www.willmcgugan.com/blog/pages/post/rich-tweets/&#34;&gt;people are saying about Rich&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Rich works with Linux, OSX, and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.7 or later.&lt;/p&gt; &#xA;&lt;p&gt;Rich works with &lt;a href=&#34;https://jupyter.org/&#34;&gt;Jupyter notebooks&lt;/a&gt; with no additional configuration required.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;code&gt;pip&lt;/code&gt; or your favorite PyPI package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -m pip install rich&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the following to test Rich output on your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python -m rich&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rich Print&lt;/h2&gt; &#xA;&lt;p&gt;To effortlessly add rich output to your application, you can import the &lt;a href=&#34;https://rich.readthedocs.io/en/latest/introduction.html#quick-start&#34;&gt;rich print&lt;/a&gt; method, which has the same signature as the builtin Python function. Try this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich import print&#xA;&#xA;print(&#34;Hello, [bold magenta]World[/bold magenta]!&#34;, &#34;&lt;span&gt;🧛&lt;/span&gt;&#34;, locals())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/print.png&#34; alt=&#34;Hello World&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Rich REPL&lt;/h2&gt; &#xA;&lt;p&gt;Rich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from rich import pretty&#xA;&amp;gt;&amp;gt;&amp;gt; pretty.install()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/repl.png&#34; alt=&#34;REPL&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the Console&lt;/h2&gt; &#xA;&lt;p&gt;For more control over rich terminal content, import and construct a &lt;a href=&#34;https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console&#34;&gt;Console&lt;/a&gt; object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich.console import Console&#xA;&#xA;console = Console()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Console object has a &lt;code&gt;print&lt;/code&gt; method which has an intentionally similar interface to the builtin &lt;code&gt;print&lt;/code&gt; function. Here&#39;s an example of use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;console.print(&#34;Hello&#34;, &#34;World!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you might expect, this will print &lt;code&gt;&#34;Hello World!&#34;&lt;/code&gt; to the terminal. Note that unlike the builtin &lt;code&gt;print&lt;/code&gt; function, Rich will word-wrap your text to fit within the terminal width.&lt;/p&gt; &#xA;&lt;p&gt;There are a few ways of adding color and style to your output. You can set a style for the entire output by adding a &lt;code&gt;style&lt;/code&gt; keyword argument. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;console.print(&#34;Hello&#34;, &#34;World!&#34;, style=&#34;bold red&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will be something like the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/hello_world.png&#34; alt=&#34;Hello World&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to &lt;a href=&#34;https://en.wikipedia.org/wiki/BBCode&#34;&gt;bbcode&lt;/a&gt;. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;console.print(&#34;Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/where_there_is_a_will.png&#34; alt=&#34;Console Markup&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use a Console object to generate sophisticated output with minimal effort. See the &lt;a href=&#34;https://rich.readthedocs.io/en/latest/console.html&#34;&gt;Console API&lt;/a&gt; docs for details.&lt;/p&gt; &#xA;&lt;h2&gt;Rich Inspect&lt;/h2&gt; &#xA;&lt;p&gt;Rich has an &lt;a href=&#34;https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect&#34;&gt;inspect&lt;/a&gt; function which can produce a report on any Python object, such as class, instance, or builtin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; my_list = [&#34;foo&#34;, &#34;bar&#34;]&#xA;&amp;gt;&amp;gt;&amp;gt; from rich import inspect&#xA;&amp;gt;&amp;gt;&amp;gt; inspect(my_list, methods=True)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/inspect.png&#34; alt=&#34;Log&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect&#34;&gt;inspect docs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h1&gt;Rich Library&lt;/h1&gt; &#xA;&lt;p&gt;Rich contains a number of builtin &lt;em&gt;renderables&lt;/em&gt; you can use to create elegant output in your CLI and help you debug your code.&lt;/p&gt; &#xA;&lt;p&gt;Click the following headings for details:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Log&lt;/summary&gt; &#xA; &lt;p&gt;The Console object has a &lt;code&gt;log()&lt;/code&gt; method which has a similar interface to &lt;code&gt;print()&lt;/code&gt;, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here&#39;s an example of some of these features.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich.console import Console&#xA;console = Console()&#xA;&#xA;test_data = [&#xA;    {&#34;jsonrpc&#34;: &#34;2.0&#34;, &#34;method&#34;: &#34;sum&#34;, &#34;params&#34;: [None, 1, 2, 4, False, True], &#34;id&#34;: &#34;1&#34;,},&#xA;    {&#34;jsonrpc&#34;: &#34;2.0&#34;, &#34;method&#34;: &#34;notify_hello&#34;, &#34;params&#34;: [7]},&#xA;    {&#34;jsonrpc&#34;: &#34;2.0&#34;, &#34;method&#34;: &#34;subtract&#34;, &#34;params&#34;: [42, 23], &#34;id&#34;: &#34;2&#34;},&#xA;]&#xA;&#xA;def test_log():&#xA;    enabled = False&#xA;    context = {&#xA;        &#34;foo&#34;: &#34;bar&#34;,&#xA;    }&#xA;    movies = [&#34;Deadpool&#34;, &#34;Rise of the Skywalker&#34;]&#xA;    console.log(&#34;Hello from&#34;, console, &#34;!&#34;)&#xA;    console.log(test_data, log_locals=True)&#xA;&#xA;&#xA;test_log()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The above produces the following output:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/log.png&#34; alt=&#34;Log&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Note the &lt;code&gt;log_locals&lt;/code&gt; argument, which outputs a table containing the local variables where the log method was called.&lt;/p&gt; &#xA; &lt;p&gt;The log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Logging Handler&lt;/summary&gt; &#xA; &lt;p&gt;You can also use the builtin &lt;a href=&#34;https://rich.readthedocs.io/en/latest/logging.html&#34;&gt;Handler class&lt;/a&gt; to format and colorize output from Python&#39;s logging module. Here&#39;s an example of the output:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/logging.png&#34; alt=&#34;Logging&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Emoji&lt;/summary&gt; &#xA; &lt;p&gt;To insert an emoji in to console output place the name between two colons. Here&#39;s an example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; console.print(&#34;&lt;span&gt;😃&lt;/span&gt; &lt;span&gt;🧛&lt;/span&gt; :pile_of_poo: :thumbs_up: &lt;span&gt;🦝&lt;/span&gt;&#34;)&#xA;😃 🧛 💩 👍 🦝&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Please use this feature wisely.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tables&lt;/summary&gt; &#xA; &lt;p&gt;Rich can render flexible &lt;a href=&#34;https://rich.readthedocs.io/en/latest/tables.html&#34;&gt;tables&lt;/a&gt; with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/table_movie.gif&#34; alt=&#34;table movie&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;The animation above was generated with &lt;a href=&#34;https://github.com/textualize/rich/raw/master/examples/table_movie.py&#34;&gt;table_movie.py&lt;/a&gt; in the examples directory.&lt;/p&gt; &#xA; &lt;p&gt;Here&#39;s a simpler table example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich.console import Console&#xA;from rich.table import Table&#xA;&#xA;console = Console()&#xA;&#xA;table = Table(show_header=True, header_style=&#34;bold magenta&#34;)&#xA;table.add_column(&#34;Date&#34;, style=&#34;dim&#34;, width=12)&#xA;table.add_column(&#34;Title&#34;)&#xA;table.add_column(&#34;Production Budget&#34;, justify=&#34;right&#34;)&#xA;table.add_column(&#34;Box Office&#34;, justify=&#34;right&#34;)&#xA;table.add_row(&#xA;    &#34;Dec 20, 2019&#34;, &#34;Star Wars: The Rise of Skywalker&#34;, &#34;$275,000,000&#34;, &#34;$375,126,118&#34;&#xA;)&#xA;table.add_row(&#xA;    &#34;May 25, 2018&#34;,&#xA;    &#34;[red]Solo[/red]: A Star Wars Story&#34;,&#xA;    &#34;$275,000,000&#34;,&#xA;    &#34;$393,151,347&#34;,&#xA;)&#xA;table.add_row(&#xA;    &#34;Dec 15, 2017&#34;,&#xA;    &#34;Star Wars Ep. VIII: The Last Jedi&#34;,&#xA;    &#34;$262,000,000&#34;,&#xA;    &#34;[bold]$1,332,539,889[/bold]&#34;,&#xA;)&#xA;&#xA;console.print(table)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This produces the following output:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/table.png&#34; alt=&#34;table&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Note that console markup is rendered in the same way as &lt;code&gt;print()&lt;/code&gt; and &lt;code&gt;log()&lt;/code&gt;. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).&lt;/p&gt; &#xA; &lt;p&gt;The &lt;code&gt;Table&lt;/code&gt; class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here&#39;s the same example, with the terminal made smaller than the table above:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/table2.png&#34; alt=&#34;table2&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Progress Bars&lt;/summary&gt; &#xA; &lt;p&gt;Rich can render multiple flicker-free &lt;a href=&#34;https://rich.readthedocs.io/en/latest/progress.html&#34;&gt;progress&lt;/a&gt; bars to track long-running tasks.&lt;/p&gt; &#xA; &lt;p&gt;For basic usage, wrap any sequence in the &lt;code&gt;track&lt;/code&gt; function and iterate over the result. Here&#39;s an example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich.progress import track&#xA;&#xA;for step in track(range(100)):&#xA;    do_step(step)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;It&#39;s not much harder to add multiple progress bars. Here&#39;s an example taken from the docs:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/progress.gif&#34; alt=&#34;progress&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;The columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here&#39;s another example showing a download in progress:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/downloader.gif&#34; alt=&#34;progress&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;To try this out yourself, see &lt;a href=&#34;https://github.com/textualize/rich/raw/master/examples/downloader.py&#34;&gt;examples/downloader.py&lt;/a&gt; which can download multiple URLs simultaneously while displaying progress.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Status&lt;/summary&gt; &#xA; &lt;p&gt;For situations where it is hard to calculate progress, you can use the &lt;a href=&#34;https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status&#34;&gt;status&lt;/a&gt; method which will display a &#39;spinner&#39; animation and message. The animation won&#39;t prevent you from using the console as normal. Here&#39;s an example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from time import sleep&#xA;from rich.console import Console&#xA;&#xA;console = Console()&#xA;tasks = [f&#34;task {n}&#34; for n in range(1, 11)]&#xA;&#xA;with console.status(&#34;[bold green]Working on tasks...&#34;) as status:&#xA;    while tasks:&#xA;        task = tasks.pop(0)&#xA;        sleep(1)&#xA;        console.log(f&#34;{task} complete&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This generates the following output in the terminal.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/status.gif&#34; alt=&#34;status&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;The spinner animations were borrowed from &lt;a href=&#34;https://www.npmjs.com/package/cli-spinners&#34;&gt;cli-spinners&lt;/a&gt;. You can select a spinner by specifying the &lt;code&gt;spinner&lt;/code&gt; parameter. Run the following command to see the available values:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;python -m rich.spinner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The above command generates the following output in the terminal:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/spinners.gif&#34; alt=&#34;spinners&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tree&lt;/summary&gt; &#xA; &lt;p&gt;Rich can render a &lt;a href=&#34;https://rich.readthedocs.io/en/latest/tree.html&#34;&gt;tree&lt;/a&gt; with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.&lt;/p&gt; &#xA; &lt;p&gt;The labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;python -m rich.tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This generates the following output:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/tree.png&#34; alt=&#34;markdown&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://github.com/textualize/rich/raw/master/examples/tree.py&#34;&gt;tree.py&lt;/a&gt; example for a script that displays a tree view of any directory, similar to the linux &lt;code&gt;tree&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Columns&lt;/summary&gt; &#xA; &lt;p&gt;Rich can render content in neat &lt;a href=&#34;https://rich.readthedocs.io/en/latest/columns.html&#34;&gt;columns&lt;/a&gt; with equal or optimal width. Here&#39;s a very basic clone of the (MacOS / Linux) &lt;code&gt;ls&lt;/code&gt; command which displays a directory listing in columns:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;import sys&#xA;&#xA;from rich import print&#xA;from rich.columns import Columns&#xA;&#xA;directory = os.listdir(sys.argv[1])&#xA;print(Columns(directory))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The following screenshot is the output from the &lt;a href=&#34;https://github.com/textualize/rich/raw/master/examples/columns.py&#34;&gt;columns example&lt;/a&gt; which displays data pulled from an API in columns:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/columns.png&#34; alt=&#34;columns&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Markdown&lt;/summary&gt; &#xA; &lt;p&gt;Rich can render &lt;a href=&#34;https://rich.readthedocs.io/en/latest/markdown.html&#34;&gt;markdown&lt;/a&gt; and does a reasonable job of translating the formatting to the terminal.&lt;/p&gt; &#xA; &lt;p&gt;To render markdown import the &lt;code&gt;Markdown&lt;/code&gt; class and construct it with a string containing markdown code. Then print it to the console. Here&#39;s an example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich.console import Console&#xA;from rich.markdown import Markdown&#xA;&#xA;console = Console()&#xA;with open(&#34;README.md&#34;) as readme:&#xA;    markdown = Markdown(readme.read())&#xA;console.print(markdown)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will produce output something like the following:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/markdown.png&#34; alt=&#34;markdown&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Syntax Highlighting&lt;/summary&gt; &#xA; &lt;p&gt;Rich uses the &lt;a href=&#34;https://pygments.org/&#34;&gt;pygments&lt;/a&gt; library to implement &lt;a href=&#34;https://rich.readthedocs.io/en/latest/syntax.html&#34;&gt;syntax highlighting&lt;/a&gt;. Usage is similar to rendering markdown; construct a &lt;code&gt;Syntax&lt;/code&gt; object and print it to the console. Here&#39;s an example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from rich.console import Console&#xA;from rich.syntax import Syntax&#xA;&#xA;my_code = &#39;&#39;&#39;&#xA;def iter_first_last(values: Iterable[T]) -&amp;gt; Iterable[Tuple[bool, bool, T]]:&#xA;    &#34;&#34;&#34;Iterate and generate a tuple with a flag for first and last value.&#34;&#34;&#34;&#xA;    iter_values = iter(values)&#xA;    try:&#xA;        previous_value = next(iter_values)&#xA;    except StopIteration:&#xA;        return&#xA;    first = True&#xA;    for value in iter_values:&#xA;        yield first, False, previous_value&#xA;        first = False&#xA;        previous_value = value&#xA;    yield first, True, previous_value&#xA;&#39;&#39;&#39;&#xA;syntax = Syntax(my_code, &#34;python&#34;, theme=&#34;monokai&#34;, line_numbers=True)&#xA;console = Console()&#xA;console.print(syntax)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will produce the following output:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/syntax.png&#34; alt=&#34;syntax&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Tracebacks&lt;/summary&gt; &#xA; &lt;p&gt;Rich can render &lt;a href=&#34;https://rich.readthedocs.io/en/latest/traceback.html&#34;&gt;beautiful tracebacks&lt;/a&gt; which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.&lt;/p&gt; &#xA; &lt;p&gt;Here&#39;s what it looks like on OSX (similar on Linux):&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/textualize/rich/raw/master/imgs/traceback.png&#34; alt=&#34;traceback&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;All Rich renderables make use of the &lt;a href=&#34;https://rich.readthedocs.io/en/latest/protocol.html&#34;&gt;Console Protocol&lt;/a&gt;, which you can also use to implement your own Rich content.&lt;/p&gt; &#xA;&lt;h1&gt;Rich CLI&lt;/h1&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://github.com/textualize/rich-cli&#34;&gt;Rich CLI&lt;/a&gt; for a command line application powered by Rich. Syntax highlight code, render markdown, display CSVs in tables, and more, directly from the command prompt.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/rich-cli/main/imgs/rich-cli-splash.jpg&#34; alt=&#34;Rich CLI&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Textual&lt;/h1&gt; &#xA;&lt;p&gt;See also Rich&#39;s sister project, &lt;a href=&#34;https://github.com/Textualize/textual&#34;&gt;Textual&lt;/a&gt;, which you can use to build sophisticated User Interfaces in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Textualize/textual/main/imgs/textual.png&#34; alt=&#34;Textual screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Projects using Rich&lt;/h1&gt; &#xA;&lt;p&gt;For some examples of projects using Rich, see the &lt;a href=&#34;https://www.textualize.io/rich/gallery&#34;&gt;Rich Gallery&lt;/a&gt; on &lt;a href=&#34;https://www.textualize.io&#34;&gt;Textualize.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Would you like to add your own project to the gallery? You can! Follow &lt;a href=&#34;https://www.textualize.io/gallery-instructions&#34;&gt;these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- This is a test, no need to translate --&gt;</summary>
  </entry>
</feed>