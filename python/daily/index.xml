<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-22T01:31:25Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kraanzu/dooit</title>
    <updated>2022-06-22T01:31:25Z</updated>
    <id>tag:github.com,2022-06-22:/kraanzu/dooit</id>
    <link href="https://github.com/kraanzu/dooit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A TUI todo manager&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/97718086/174438959-d8887b62-76de-4587-9619-91a4ecd6e1d6.png&#34; align=&#34;right&#34; alt=&#34;Todo Icon&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &#xA;&lt;h1&gt;Dooit ‚úîÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;A todo manager that you didn&#39;t ask for, but needed !&lt;/em&gt; &lt;br&gt; to make sure that you complete your tasks on time ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kraanzu/doit/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/kraanzu/dooit?color=red&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kraanzu/doit/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/kraanzu/dooit?color=green&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kraanzu/doit/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kraanzu/dooit?color=yellow&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation üî®&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can install dooit easily using python one-liner (you must use python version 3.10+)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3 -m pip install git+https://github.com/kraanzu/dooit.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Or the long way?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/kraanzu/dooit.git&#xA;cd dooit&#xA;pip3 install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then simply type &lt;code&gt;dooit&lt;/code&gt; in your terminal to launch it.. ezy pzy&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Config file for &lt;code&gt;dooit&lt;/code&gt; is located at your $XDG_CONFIG_HOME (or ~/.config/dooit)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Features üåü&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Some features that dooit comes with:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An interactive &amp;amp; beautiful UI&lt;/li&gt; &#xA; &lt;li&gt;Configurable icons and themes&lt;/li&gt; &#xA; &lt;li&gt;Both Mouse and Keyboard support (Vim like keybindings)&lt;/li&gt; &#xA; &lt;li&gt;Topicwise seperated Todo Lists (With branching)&lt;/li&gt; &#xA; &lt;li&gt;Editable Todo&#39;s about, date and urgency&lt;/li&gt; &#xA; &lt;li&gt;Nested todos!&lt;/li&gt; &#xA; &lt;li&gt;Sort options with menu (Name, Date, Urgency, Status)&lt;/li&gt; &#xA; &lt;li&gt;Search &amp;amp; jump-to-todo mode on the fly!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See Demo Video below in order to get a visual :)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Demo üé•&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/97718086/174479591-5fe4f425-c9f3-4db2-969c-df8aa400e103.mp4&#34;&gt;https://user-images.githubusercontent.com/97718086/174479591-5fe4f425-c9f3-4db2-969c-df8aa400e103.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contribution ü§ù&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Want to contribute? Feel free to open a PR! üò∏&lt;/li&gt; &#xA; &lt;li&gt;Got some ideas for improvements? I&#39;m all ears! üëÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Other TUI projects ü§ì :&lt;/h4&gt; &#xA;&lt;p&gt;If you liked dooit then you might wanna try out some of my other TUI projects as well&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kraanzu/termtyper&#34;&gt;termtyper&lt;/a&gt; - A typing-test app for terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kraanzu/gupshup&#34;&gt;gupshup&lt;/a&gt; - A localhost TUI chat client&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Lightning-AI/lightning</title>
    <updated>2022-06-22T01:31:25Z</updated>
    <id>tag:github.com,2022-06-22:/Lightning-AI/lightning</id>
    <link href="https://github.com/Lightning-AI/lightning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build high-performance AI models with PyTorch Lightning (organized PyTorch). Deploy models with Lightning Apps (organized Python to build end-to-end ML systems).&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pl-flash-data.s3.amazonaws.com/assets_lightning/docs/images/logos/lightning-ai.png&#34; width=&#34;400px&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;Build high-performance PyTorch models and deploy them with Lightning Apps (scalable end-to-end ML systems).&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.lightning.ai/&#34;&gt;Lightning Gallery&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/#key-features&#34;&gt;Key Features&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/#how-to-use&#34;&gt;How To Use&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/stable/&#34;&gt;Docs&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/#examples&#34;&gt;Examples&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/#community&#34;&gt;Community&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/#license&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA; &lt;!-- DO NOT ADD CONDA DOWNLOADS... README CHANGES MUST BE APPROVED BY EDEN OR WILL --&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pytorch-lightning/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/pytorch-lightning&#34; alt=&#34;PyPI - Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/py/pytorch-lightning&#34;&gt;&lt;img src=&#34;https://badge.fury.io/py/pytorch-lightning.svg?sanitize=true&#34; alt=&#34;PyPI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/pytorch-lightning&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/pytorch-lightning&#34; alt=&#34;PyPI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anaconda.org/conda-forge/pytorch-lightning&#34;&gt;&lt;img src=&#34;https://img.shields.io/conda/v/conda-forge/pytorch-lightning?label=conda&amp;amp;color=success&#34; alt=&#34;Conda&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/pytorchlightning/pytorch_lightning&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/pytorchlightning/pytorch_lightning.svg?sanitize=true&#34; alt=&#34;DockerHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/PyTorchLightning/pytorch-lightning&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/PyTorchLightning/pytorch-lightning/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/stable/starter/new-project.html&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/pytorch-lightning/badge/?version=stable&#34; alt=&#34;ReadTheDocs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/pytorch-lightning/shared_invite/zt-12iz3cds1-uyyyBYJLiaL2bqVmMN7n~A&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-chat-green.svg?logo=slack&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PytorchLightning/pytorch-lightning/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;!--&#xA;[![CodeFactor](https://www.codefactor.io/repository/github/pytorchlightning/pytorch-lightning/badge)](https://www.codefactor.io/repository/github/pytorchlightning/pytorch-lightning)&#xA;--&gt; &#xA;&lt;/div&gt; &#xA;&lt;h6&gt;*Codecov is &amp;gt; 90%+ but build delays may show less&lt;/h6&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;PyTorch Lightning is just organized PyTorch&lt;/h2&gt; &#xA;&lt;p&gt;Lightning disentangles PyTorch code to decouple the science from the engineering. &lt;img src=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/docs/source-pytorch/_static/images/general/pl_quick_start_full_compressed.gif&#34; alt=&#34;PT to PL&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build AI products with Lightning Apps&lt;/h2&gt; &#xA;&lt;p&gt;Once you&#39;re done building models, publish a paper demo or build a full production end-to-end ML system with Lightning Apps. Lightning Apps remove the cloud infrastructure boilerplate so you can focus on solving the research or business problems. Lightning Apps can run on the Lightning Cloud, your own cluster or a private cloud.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lightning.ai/&#34;&gt;Browse available Lightning apps here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pl-flash-data.s3.amazonaws.com/assets_lightning/docs/images/logos/lightning-apps-teaser.png&#34; width=&#34;80%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/src/lightning_app/README.md&#34;&gt;Learn more about Lightning Apps&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Lightning Design Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Lightning structures PyTorch code with these principles:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/philosophies.jpg&#34; max-height=&#34;250px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Lightning forces the following structure to your code which makes it reusable and shareable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Research code (the LightningModule).&lt;/li&gt; &#xA; &lt;li&gt;Engineering code (you delete, and is handled by the Trainer).&lt;/li&gt; &#xA; &lt;li&gt;Non-essential research code (logging, etc... this goes in Callbacks).&lt;/li&gt; &#xA; &lt;li&gt;Data (use PyTorch DataLoaders or organize them into a LightningDataModule).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you do this, you can train on multiple-GPUs, TPUs, CPUs and even in 16-bit precision without changing your code!&lt;/p&gt; &#xA;&lt;p&gt;Get started with our &lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/latest/starter/new-project.html&#34;&gt;2 step guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;Lightning is rigorously tested across multiple GPUs, TPUs CPUs and against major Python and PyTorch versions.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Current build statuses&lt;/summary&gt; &#xA; &lt;center&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;System / PyTorch ver.&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;1.8 (LTS, min. req.)&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;1.9&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;1.10 (latest)&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;Linux py3.7 [GPUs**]&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dev.azure.com/PytorchLightning/pytorch-lightning/_build/latest?definitionId=6&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/PytorchLightning/pytorch-lightning/_apis/build/status/PL.pytorch-lightning%20(GPUs)?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;Linux py3.7 [TPUs***]&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://circleci.com/gh/PyTorchLightning/pytorch-lightning/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/PyTorchLightning/pytorch-lightning/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;Linux py3.8 (with Conda&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-conda.yml&#34;&gt;&lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-conda.yml/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-conda.yml&#34;&gt;&lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-conda.yml/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-conda.yml&#34;&gt;&lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-conda.yml/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;Linux py3.{7,9}&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-full.yml&#34;&gt;&lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-full.yml/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;OSX py3.{7,9}&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-full.yml&#34;&gt;&lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-full.yml/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;Windows py3.{7,9}&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-full.yml&#34;&gt;&lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/actions/workflows/ci_test-full.yml/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;** tests run on two NVIDIA P100&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;em&gt;*** tests run on Google GKE TPUv2/3. TPU py3.7 means we support Colab and Kaggle env.&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/center&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How To Use&lt;/h2&gt; &#xA;&lt;h3&gt;Step 0: Install&lt;/h3&gt; &#xA;&lt;p&gt;Simple installation from PyPI&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pytorch-lightning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- following section will be skipped from PyPI description --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Other installation options&lt;/summary&gt; &#xA; &lt;!-- following section will be skipped from PyPI description --&gt; &#xA; &lt;h4&gt;Install with optional dependencies&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install pytorch-lightning[&#39;extra&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Conda&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda install pytorch-lightning -c conda-forge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Install stable 1.5.x&lt;/h4&gt; &#xA; &lt;p&gt;the actual status of 1.5 [stable] is following:&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/workflows/CI%20basic%20testing/badge.svg?branch=release%2F1.5.x&amp;amp;event=push&#34; alt=&#34;CI basic testing&#34;&gt; &lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/workflows/CI%20complete%20testing/badge.svg?branch=release%2F1.5.x&amp;amp;event=push&#34; alt=&#34;CI complete testing&#34;&gt; &lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/workflows/PyTorch%20&amp;amp;%20Conda/badge.svg?branch=release%2F1.5.x&amp;amp;event=push&#34; alt=&#34;PyTorch &amp;amp; Conda&#34;&gt; &lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/workflows/TPU%20tests/badge.svg?branch=release%2F1.5.x&amp;amp;event=push&#34; alt=&#34;TPU tests&#34;&gt; &lt;img src=&#34;https://github.com/PyTorchLightning/pytorch-lightning/workflows/Docs%20check/badge.svg?branch=release%2F1.5.x&amp;amp;event=push&#34; alt=&#34;Docs check&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Install future release from the source&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install git+https://github.com/PytorchLightning/pytorch-lightning.git@release/1.5.x --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Install bleeding-edge - future 1.6&lt;/h4&gt; &#xA; &lt;p&gt;Install nightly from the source (no guarantees)&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install https://github.com/PyTorchLightning/pytorch-lightning/archive/master.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;or from testing PyPI&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -iU https://test.pypi.org/simple/ pytorch-lightning&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- end skipping PyPI description --&gt; &#xA;&lt;h3&gt;Step 1: Add these imports&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;import torch&#xA;from torch import nn&#xA;import torch.nn.functional as F&#xA;from torchvision.datasets import MNIST&#xA;from torch.utils.data import DataLoader, random_split&#xA;from torchvision import transforms&#xA;import pytorch_lightning as pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: Define a LightningModule (nn.Module subclass)&lt;/h3&gt; &#xA;&lt;p&gt;A LightningModule defines a full &lt;em&gt;system&lt;/em&gt; (ie: a GAN, autoencoder, BERT or a simple Image Classifier).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class LitAutoEncoder(pl.LightningModule):&#xA;    def __init__(self):&#xA;        super().__init__()&#xA;        self.encoder = nn.Sequential(nn.Linear(28 * 28, 128), nn.ReLU(), nn.Linear(128, 3))&#xA;        self.decoder = nn.Sequential(nn.Linear(3, 128), nn.ReLU(), nn.Linear(128, 28 * 28))&#xA;&#xA;    def forward(self, x):&#xA;        # in lightning, forward defines the prediction/inference actions&#xA;        embedding = self.encoder(x)&#xA;        return embedding&#xA;&#xA;    def training_step(self, batch, batch_idx):&#xA;        # training_step defines the train loop. It is independent of forward&#xA;        x, y = batch&#xA;        x = x.view(x.size(0), -1)&#xA;        z = self.encoder(x)&#xA;        x_hat = self.decoder(z)&#xA;        loss = F.mse_loss(x_hat, x)&#xA;        self.log(&#34;train_loss&#34;, loss)&#xA;        return loss&#xA;&#xA;    def configure_optimizers(self):&#xA;        optimizer = torch.optim.Adam(self.parameters(), lr=1e-3)&#xA;        return optimizer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Training_step defines the training loop. Forward defines how the LightningModule behaves during inference/prediction.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: Train!&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;dataset = MNIST(os.getcwd(), download=True, transform=transforms.ToTensor())&#xA;train, val = random_split(dataset, [55000, 5000])&#xA;&#xA;autoencoder = LitAutoEncoder()&#xA;trainer = pl.Trainer()&#xA;trainer.fit(autoencoder, DataLoader(train), DataLoader(val))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced features&lt;/h2&gt; &#xA;&lt;p&gt;Lightning has over &lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/latest/common/trainer.html#trainer-flags&#34;&gt;40+ advanced features&lt;/a&gt; designed for professional AI research at scale.&lt;/p&gt; &#xA;&lt;p&gt;Here are some examples:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://pl-bolts-doc-images.s3.us-east-2.amazonaws.com/features_2.jpg&#34; max-height=&#34;600px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Highlighted feature code snippets&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 8 GPUs&#xA;# no code changes needed&#xA;trainer = Trainer(max_epochs=1, accelerator=&#34;gpu&#34;, devices=8)&#xA;&#xA;# 256 GPUs&#xA;trainer = Trainer(max_epochs=1, accelerator=&#34;gpu&#34;, devices=8, num_nodes=32)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;summary&gt;Train on TPUs without code changes&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# no code changes needed&#xA;trainer = Trainer(accelerator=&#34;tpu&#34;, devices=8)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;summary&gt;16-bit precision&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# no code changes needed&#xA;trainer = Trainer(precision=16)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;summary&gt;Experiment managers&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from pytorch_lightning import loggers&#xA;&#xA;# tensorboard&#xA;trainer = Trainer(logger=TensorBoardLogger(&#34;logs/&#34;))&#xA;&#xA;# weights and biases&#xA;trainer = Trainer(logger=loggers.WandbLogger())&#xA;&#xA;# comet&#xA;trainer = Trainer(logger=loggers.CometLogger())&#xA;&#xA;# mlflow&#xA;trainer = Trainer(logger=loggers.MLFlowLogger())&#xA;&#xA;# neptune&#xA;trainer = Trainer(logger=loggers.NeptuneLogger())&#xA;&#xA;# ... and dozens more&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;summary&gt;EarlyStopping&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;es = EarlyStopping(monitor=&#34;val_loss&#34;)&#xA;trainer = Trainer(callbacks=[es])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;summary&gt;Checkpointing&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;checkpointing = ModelCheckpoint(monitor=&#34;val_loss&#34;)&#xA;trainer = Trainer(callbacks=[checkpointing])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;summary&gt;Export to torchscript (JIT) (production use)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# torchscript&#xA;autoencoder = LitAutoEncoder()&#xA;torch.jit.save(autoencoder.to_torchscript(), &#34;model.pt&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;summary&gt;Export to ONNX (production use)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# onnx&#xA;with tempfile.NamedTemporaryFile(suffix=&#34;.onnx&#34;, delete=False) as tmpfile:&#xA;    autoencoder = LitAutoEncoder()&#xA;    input_sample = torch.randn((1, 64))&#xA;    autoencoder.to_onnx(tmpfile.name, input_sample, export_params=True)&#xA;    os.path.isfile(tmpfile.name)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Pro-level control of training loops (advanced users)&lt;/h3&gt; &#xA;&lt;p&gt;For complex/professional level work, you have optional full control of the training loop and optimizers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class LitAutoEncoder(pl.LightningModule):&#xA;    def __init__(self):&#xA;        super().__init__()&#xA;        self.automatic_optimization = False&#xA;&#xA;    def training_step(self, batch, batch_idx):&#xA;        # access your optimizers with use_pl_optimizer=False. Default is True&#xA;        opt_a, opt_b = self.optimizers(use_pl_optimizer=True)&#xA;&#xA;        loss_a = ...&#xA;        self.manual_backward(loss_a, opt_a)&#xA;        opt_a.step()&#xA;        opt_a.zero_grad()&#xA;&#xA;        loss_b = ...&#xA;        self.manual_backward(loss_b, opt_b, retain_graph=True)&#xA;        self.manual_backward(loss_b, opt_b)&#xA;        opt_b.step()&#xA;        opt_b.zero_grad()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Advantages over unstructured PyTorch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Models become hardware agnostic&lt;/li&gt; &#xA; &lt;li&gt;Code is clear to read because engineering code is abstracted away&lt;/li&gt; &#xA; &lt;li&gt;Easier to reproduce&lt;/li&gt; &#xA; &lt;li&gt;Make fewer mistakes because lightning handles the tricky engineering&lt;/li&gt; &#xA; &lt;li&gt;Keeps all the flexibility (LightningModules are still PyTorch modules), but removes a ton of boilerplate&lt;/li&gt; &#xA; &lt;li&gt;Lightning has dozens of integrations with popular machine learning tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/tree/master/tests&#34;&gt;Tested rigorously with every new PR&lt;/a&gt;. We test every combination of PyTorch and Python supported versions, every OS, multi GPUs and even TPUs.&lt;/li&gt; &#xA; &lt;li&gt;Minimal running speed overhead (about 300 ms per epoch compared with pure PyTorch).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Lightning Lite&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Lightning-AI/lightning/master/docs/source/_static/images/lightning_lite/lite.gif&#34; height=&#34;200px&#34; width=&#34;600px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;In the Lighting 1.5 release, LightningLite now enables you to leverage all the capabilities of PyTorch Lightning Accelerators without any refactoring to your training loop. Check out the &lt;a href=&#34;https://devblog.pytorchlightning.ai/scale-your-pytorch-code-with-lightninglite-d5692a303f00&#34;&gt;blogpost&lt;/a&gt; and &lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/stable/starter/lightning_lite.html&#34;&gt;docs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h6&gt;Hello world&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/latest/notebooks/lightning_examples/mnist-hello-world.html&#34;&gt;MNIST hello world&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Contrastive Learning&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/self_supervised.html#byol&#34;&gt;BYOL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/self_supervised.html#cpc-v2&#34;&gt;CPC v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/self_supervised.html#moco-v2-api&#34;&gt;Moco v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/self_supervised.html#simclr&#34;&gt;SIMCLR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;NLP&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/convolutional.html#gpt-2&#34;&gt;GPT-2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/latest/notebooks/lightning_examples/text-transformers.html&#34;&gt;BERT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Reinforcement Learning&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/reinforce_learn.html#dqn-models&#34;&gt;DQN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/reinforce_learn.html#dueling-dqn&#34;&gt;Dueling-DQN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/reinforce_learn.html#reinforce&#34;&gt;Reinforce&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Vision&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/latest/notebooks/lightning_examples/basic-gan.html&#34;&gt;GAN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Classic ML&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/classic_ml.html#logistic-regression&#34;&gt;Logistic Regression&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lightning-bolts.readthedocs.io/en/stable/deprecated/models/classic_ml.html#linear-regression&#34;&gt;Linear Regression&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The lightning community is maintained by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch-lightning.readthedocs.io/en/latest/governance.html&#34;&gt;10+ core contributors&lt;/a&gt; who are all a mix of professional engineers, Research Scientists, and Ph.D. students from top AI labs.&lt;/li&gt; &#xA; &lt;li&gt;590+ active community contributors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to help us build Lightning and reduce boilerplate for thousands of researchers? &lt;a href=&#34;https://devblog.pytorchlightning.ai/quick-contribution-guide-86d977171b3a&#34;&gt;Learn how to make your first contribution here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lightning is also part of the &lt;a href=&#34;https://pytorch.org/ecosystem/&#34;&gt;PyTorch ecosystem&lt;/a&gt; which requires projects to have solid testing, documentation and support.&lt;/p&gt; &#xA;&lt;h3&gt;Asking for help&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions please:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pytorch-lightning.rtfd.io/en/latest&#34;&gt;Read the docs&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/discussions&#34;&gt;Search through existing Discussions&lt;/a&gt;, or &lt;a href=&#34;https://github.com/PyTorchLightning/pytorch-lightning/discussions/new&#34;&gt;add a new question&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/pytorch-lightning/shared_invite/zt-pw5v393p-qRaDgEk24~EjiZNBpSQFgQ&#34;&gt;Join our slack&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>ftexchange/ftx</title>
    <updated>2022-06-22T01:31:25Z</updated>
    <id>tag:github.com,2022-06-22:/ftexchange/ftx</id>
    <link href="https://github.com/ftexchange/ftx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;FTX Sample Code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FTX Sample Code&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ftx.com/&#34;&gt;FTX&lt;/a&gt; is a cryptocurrency derivatives exchange.&lt;/p&gt; &#xA;&lt;p&gt;You can find the REST API docs &lt;a href=&#34;https://ftx1.docs.apiary.io&#34;&gt;here&lt;/a&gt;, websocket API docs &lt;a href=&#34;https://ftxwebsocket.docs.apiary.io&#34;&gt;here&lt;/a&gt;, and FIX docs &lt;a href=&#34;https://docs.ftx.com/#fix-api&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can create API keys on your &lt;a href=&#34;https://ftx.com/profile&#34;&gt;profile page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;FTX is integrated with CCXT here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccxt/ccxt/raw/master/js/ftx.js&#34;&gt;https://github.com/ccxt/ccxt/blob/master/js/ftx.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccxt/ccxt/raw/master/python/ccxt/ftx.py&#34;&gt;https://github.com/ccxt/ccxt/blob/master/python/ccxt/ftx.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccxt/ccxt/raw/master/python/ccxt/async_support/ftx.py&#34;&gt;https://github.com/ccxt/ccxt/blob/master/python/ccxt/async_support/ftx.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ccxt/ccxt/raw/master/php/ftx.php&#34;&gt;https://github.com/ccxt/ccxt/blob/master/php/ftx.php&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>