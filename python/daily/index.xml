<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Python Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-31T01:36:15Z</updated>
  <subtitle>Daily Trending of Python in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>denizsafak/abogen</title>
    <updated>2025-07-31T01:36:15Z</updated>
    <id>tag:github.com,2025-07-31:/denizsafak/abogen</id>
    <link href="https://github.com/denizsafak/abogen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate audiobooks from EPUBs, PDFs and text with synchronized captions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;abogen &lt;img width=&#34;40px&#34; title=&#34;abogen icon&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/abogen/assets/icon.ico&#34; align=&#34;right&#34; style=&#34;padding-left: 10px; padding-top:5px;&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/denizsafak/abogen/actions&#34;&gt;&lt;img src=&#34;https://github.com/denizsafak/abogen/actions/workflows/test_pip.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/denizsafak/abogen/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/denizsafak/abogen&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.org/project/abogen/&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/abogen&#34; alt=&#34;Abogen PyPi Python Versions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/denizsafak/abogen/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/os-windows%20%7C%20linux%20%7C%20macos%20-blue&#34; alt=&#34;Operating Systems&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code%20style-black-000000.svg?sanitize=true&#34; alt=&#34;Code style: black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-maroon.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Abogen is a powerful text-to-speech conversion tool that makes it easy to turn ePub, PDF, or text files into high-quality audio with matching subtitles in seconds. Use it for audiobooks, voiceovers for Instagram, YouTube, TikTok, or any project that needs natural-sounding text-to-speech, using &lt;a href=&#34;https://huggingface.co/hexgrad/Kokoro-82M&#34;&gt;Kokoro-82M&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img title=&#34;Abogen Main&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/abogen.png&#34; width=&#34;380&#34;&gt; &lt;img title=&#34;Abogen Processing&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/abogen2.png&#34; width=&#34;380&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/cb66512d-0a52-48c3-bda4-f1e6a03fb8d6&#34;&gt;https://github.com/user-attachments/assets/cb66512d-0a52-48c3-bda4-f1e6a03fb8d6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This demo was generated in just 5&amp;nbsp;seconds, producing ∼1&amp;nbsp;minute of audio with perfectly synced subtitles. To create a similar video, see &lt;a href=&#34;https://github.com/denizsafak/abogen/tree/main/demo&#34;&gt;the demo guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;How to install?&lt;/code&gt; &lt;a href=&#34;https://pypi.org/project/abogen/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/abogen&#34; alt=&#34;Abogen Compatible PyPi Python Versions&#34; align=&#34;right&#34; style=&#34;margin-top:6px;&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/espeak-ng/espeak-ng/releases/latest&#34;&gt;espeak-ng latest release&lt;/a&gt; download and run the *.msi file.&lt;/p&gt; &#xA;&lt;h4&gt;OPTION 1: Install using script&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denizsafak/abogen/archive/refs/heads/main.zip&#34;&gt;Download&lt;/a&gt; the repository&lt;/li&gt; &#xA; &lt;li&gt;Extract the ZIP file&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;WINDOWS_INSTALL.bat&lt;/code&gt; by double-clicking it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This method handles everything automatically - installing all dependencies including CUDA in a self-contained environment without requiring a separate Python installation. (You still need to install &lt;a href=&#34;https://github.com/espeak-ng/espeak-ng/releases/latest&#34;&gt;espeak-ng&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You don&#39;t need to install Python separately. The script will install Python automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;OPTION 2: Install using pip&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create a virtual environment (optional)&#xA;mkdir abogen &amp;amp;&amp;amp; cd abogen&#xA;python -m venv venv&#xA;venv\Scripts\activate&#xA;&#xA;# For NVIDIA GPUs:&#xA;pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu128&#xA;&#xA;# For AMD GPUs:&#xA;# Not supported yet, because ROCm is not available on Windows. Use Linux if you have AMD GPU.&#xA;&#xA;# Install abogen&#xA;pip install abogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install espeak-ng&#xA;brew install espeak-ng&#xA;&#xA;# Create a virtual environment (recommended)&#xA;mkdir abogen &amp;amp;&amp;amp; cd abogen&#xA;python3 -m venv venv&#xA;source venv/bin/activate&#xA;&#xA;# Install abogen&#xA;pip3 install abogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install espeak-ng&#xA;sudo apt install espeak-ng # Ubuntu/Debian&#xA;sudo pacman -S espeak-ng # Arch Linux&#xA;sudo dnf install espeak-ng # Fedora&#xA;&#xA;# Create a virtual environment (recommended)&#xA;mkdir abogen &amp;amp;&amp;amp; cd abogen&#xA;python3 -m venv venv&#xA;source venv/bin/activate&#xA;&#xA;# Install abogen&#xA;pip3 install abogen&#xA;&#xA;# For NVIDIA GPUs:&#xA;# Already supported, no need to install CUDA separately.&#xA;&#xA;# For AMD GPUs:&#xA;# After installing abogen, we need to uninstall the existing torch package&#xA;pip3 uninstall torch &#xA;pip3 install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you get &lt;code&gt;WARNING: The script abogen-cli is installed in &#39;/home/username/.local/bin&#39; which is not on PATH.&lt;/code&gt; error, run the following command to add it to your PATH:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;export PATH=\&#34;/home/$USER/.local/bin:\$PATH\&#34;&#34; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you get &#34;No matching distribution found&#34; error, try installing it on supported Python (3.10 to 3.12). You can use &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt; to manage multiple Python versions easily in Linux. Watch this &lt;a href=&#34;https://www.youtube.com/watch?v=MVyb-nI4KyI&#34;&gt;video&lt;/a&gt; by NetworkChuck for a quick guide.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/hg000125&#34;&gt;@hg000125&lt;/a&gt; for his contribution in &lt;a href=&#34;https://github.com/denizsafak/abogen/issues/23&#34;&gt;#23&lt;/a&gt;. AMD GPU support is possible thanks to his work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;How to run?&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you installed using pip, you can simply run the following command to start Abogen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;abogen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you installed using the Windows installer &lt;code&gt;(WINDOWS_INSTALL.bat)&lt;/code&gt;, It should have created a shortcut in the same folder, or your desktop. You can run it from there. If you lost the shortcut, Abogen is located in &lt;code&gt;python_embedded/Scripts/abogen.exe&lt;/code&gt;. You can run it from there directly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;How to use?&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Drag and drop any ePub, PDF, or text file (or use the built-in text editor)&lt;/li&gt; &#xA; &lt;li&gt;Configure the settings: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set speech speed&lt;/li&gt; &#xA;   &lt;li&gt;Select a voice (or create a custom voice using voice mixer)&lt;/li&gt; &#xA;   &lt;li&gt;Select subtitle generation style (by sentence, word, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;Select output format&lt;/li&gt; &#xA;   &lt;li&gt;Select where to save the output&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Hit Start&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;code&gt;In action&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;img title=&#34;Abogen in action&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/abogen.gif&#34;&gt; &#xA;&lt;p&gt;Here’s Abogen in action: in this demo, it processes ∼3,000 characters of text in just 11 seconds and turns it into 3 minutes and 28 seconds of audio, and I have a low-end &lt;strong&gt;RTX&amp;nbsp;2060&amp;nbsp;Mobile laptop GPU&lt;/strong&gt;. Your results may vary depending on your hardware.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Configuration&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Input Box&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drag and drop &lt;code&gt;ePub&lt;/code&gt;, &lt;code&gt;PDF&lt;/code&gt;, or &lt;code&gt;.TXT&lt;/code&gt; files (or use built-in text editor)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Queue options&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add multiple files to a queue and process them in batch, with individual settings for each file. See &lt;a href=&#34;https://raw.githubusercontent.com/denizsafak/abogen/main/#queue-mode&#34;&gt;Queue mode&lt;/a&gt; for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adjust speech rate from &lt;code&gt;0.1x&lt;/code&gt; to &lt;code&gt;2.0x&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Select Voice&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;First letter of the language code (e.g., &lt;code&gt;a&lt;/code&gt; for American English, &lt;code&gt;b&lt;/code&gt; for British English, etc.), second letter is for &lt;code&gt;m&lt;/code&gt; for male and &lt;code&gt;f&lt;/code&gt; for female.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Voice mixer&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create custom voices by mixing different voice models with a profile system. See &lt;a href=&#34;https://raw.githubusercontent.com/denizsafak/abogen/main/#voice-mixer&#34;&gt;Voice Mixer&lt;/a&gt; for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Voice preview&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listen to the selected voice before processing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Generate subtitles&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Disabled&lt;/code&gt;, &lt;code&gt;Sentence&lt;/code&gt;, &lt;code&gt;Sentence + Comma&lt;/code&gt;, &lt;code&gt;1 word&lt;/code&gt;, &lt;code&gt;2 words&lt;/code&gt;, &lt;code&gt;3 words&lt;/code&gt;, etc. (Represents the number of words in each subtitle entry)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Output voice format&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.WAV&lt;/code&gt;, &lt;code&gt;.FLAC&lt;/code&gt;, &lt;code&gt;.MP3&lt;/code&gt;, &lt;code&gt;.OPUS (best compression)&lt;/code&gt; and &lt;code&gt;M4B (with chapters)&lt;/code&gt; (Special thanks to &lt;a href=&#34;https://github.com/jborza&#34;&gt;@jborza&lt;/a&gt; for chapter support in PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/10&#34;&gt;#10&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Output subtitle format&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the subtitle format as &lt;code&gt;SRT (standard)&lt;/code&gt;, &lt;code&gt;ASS (wide)&lt;/code&gt;, &lt;code&gt;ASS (narrow)&lt;/code&gt;, &lt;code&gt;ASS (centered wide)&lt;/code&gt;, or &lt;code&gt;ASS (centered narrow)&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Replace single newlines with spaces&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replaces single newlines with spaces in the text. This is useful for texts that have imaginary line breaks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Save location&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Save next to input file&lt;/code&gt;, &lt;code&gt;Save to desktop&lt;/code&gt;, or &lt;code&gt;Choose output folder&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Book handler options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Chapter Control&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select specific &lt;code&gt;chapters&lt;/code&gt; from ePUBs or &lt;code&gt;chapters + pages&lt;/code&gt; from PDFs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Save each chapter separately&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save each chapter in e-books as a separate audio file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Create a merged version&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create a single audio file that combines all chapters. (If &lt;code&gt;Save each chapter separately&lt;/code&gt; is disabled, this option will be the default behavior.)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Save in a project folder with metadata&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Save the converted items in a project folder with available metadata files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Menu options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Theme&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change the application&#39;s theme using &lt;code&gt;System&lt;/code&gt;, &lt;code&gt;Light&lt;/code&gt;, or &lt;code&gt;Dark&lt;/code&gt; options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Configure max words per subtitle&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the maximum number of words per subtitle entry.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Configure max lines in log window&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the maximum number of lines to display in the log window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Separate chapters audio format&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configures the audio format for separate chapters as &lt;code&gt;wav&lt;/code&gt;, &lt;code&gt;flac&lt;/code&gt;, &lt;code&gt;mp3&lt;/code&gt;, or &lt;code&gt;opus&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Create desktop shortcut&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a shortcut on your desktop for easy access.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Open config directory&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens the directory where the configuration file is stored.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Open cache directory&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens the cache directory where converted text files are stored.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Clear cache files&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deletes cache files created during the conversion or preview.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Check for updates at startup&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Automatically checks for updates when the program starts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Disable Kokoro&#39;s internet access&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prevents Kokoro from downloading models or voices from HuggingFace Hub, useful for offline use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Reset to default settings&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Resets all settings to their default values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;&lt;code&gt;Voice Mixer&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;img title=&#34;Abogen Voice Mixer&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/voice_mixer.png&#34;&gt; &#xA;&lt;p&gt;With voice mixer, you can create custom voices by mixing different voice models. You can adjust the weight of each voice and save your custom voice as a profile for future use. The voice mixer allows you to create unique and personalized voices. (Huge thanks to &lt;a href=&#34;https://github.com/jborza&#34;&gt;@jborza&lt;/a&gt; for making this possible through his contributions in &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/5&#34;&gt;#5&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Queue Mode&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;img title=&#34;Abogen queue mode&#34; src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/queue.png&#34;&gt; &#xA;&lt;p&gt;Abogen supports &lt;strong&gt;queue mode&lt;/strong&gt;, allowing you to add multiple files to a processing queue. This is useful if you want to convert several files in one batch.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add text files (&lt;code&gt;.txt&lt;/code&gt;) directly using the &lt;strong&gt;Add files&lt;/strong&gt; button in the Queue Manager. To add PDF or EPUB files, use the input box in the main window and click the &lt;strong&gt;Add to Queue&lt;/strong&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;Each file in the queue keeps the configuration settings that were active when it was added. Changing the main window configuration afterward does &lt;strong&gt;not&lt;/strong&gt; affect files already in the queue.&lt;/li&gt; &#xA; &lt;li&gt;You can view each file&#39;s configuration by hovering over them.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Abogen will process each item in the queue automatically, saving outputs as configured.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/jborza&#34;&gt;@jborza&lt;/a&gt; for adding queue mode in PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/35&#34;&gt;#35&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;About Chapter Markers&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When you process ePUB or PDF files, Abogen converts them into text files stored in your cache directory. When you click &#34;Edit,&#34; you&#39;re actually modifying these converted text files. In these text files, you&#39;ll notice tags that look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;CHAPTER_MARKER:Chapter Title&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are chapter markers. They are automatically added when you process ePUB or PDF files, based on the chapters you select. They serve an important purpose:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow you to split the text into separate audio files for each chapter&lt;/li&gt; &#xA; &lt;li&gt;Save time by letting you reprocess only specific chapters if errors occur, rather than the entire file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can manually add these markers to plain text files for the same benefits. Simply include them in your text like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;CHAPTER_MARKER:Introduction&amp;gt;&amp;gt;&#xA;This is the beginning of my text...  &#xA;&#xA;&amp;lt;&amp;lt;CHAPTER_MARKER:Main Content&amp;gt;&amp;gt; &#xA;Here&#39;s another part...  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you process the text file, Abogen will detect these markers automatically and ask if you want to save each chapter separately and create a merged version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/denizsafak/abogen/refs/heads/main/demo/chapter_marker.png&#34; alt=&#34;Abogen Chapter Marker&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;About Metadata Tags&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Similar to chapter markers, it is possible to add metadata tags for &lt;code&gt;M4B&lt;/code&gt; files. This is useful for audiobook players that support metadata, allowing you to add information like title, author, year, etc. Abogen automatically adds these tags when you process ePUB or PDF files, but you can also add them manually to your text files. Add metadata tags &lt;strong&gt;at the beginning of your text file&lt;/strong&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;METADATA_TITLE:Title&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_ARTIST:Author&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_ALBUM:Album Title&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_YEAR:Year&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_ALBUM_ARTIST:Album Artist&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_COMPOSER:Narrator&amp;gt;&amp;gt;&#xA;&amp;lt;&amp;lt;METADATA_GENRE:Audiobook&amp;gt;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;Supported Languages&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 🇺🇸 &#39;a&#39; =&amp;gt; American English, 🇬🇧 &#39;b&#39; =&amp;gt; British English&#xA;# 🇪🇸 &#39;e&#39; =&amp;gt; Spanish es&#xA;# 🇫🇷 &#39;f&#39; =&amp;gt; French fr-fr&#xA;# 🇮🇳 &#39;h&#39; =&amp;gt; Hindi hi&#xA;# 🇮🇹 &#39;i&#39; =&amp;gt; Italian it&#xA;# 🇯🇵 &#39;j&#39; =&amp;gt; Japanese: pip install misaki[ja]&#xA;# 🇧🇷 &#39;p&#39; =&amp;gt; Brazilian Portuguese pt-br&#xA;# 🇨🇳 &#39;z&#39; =&amp;gt; Mandarin Chinese: pip install misaki[zh]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a complete list of supported languages and voices, refer to Kokoro&#39;s &lt;a href=&#34;https://huggingface.co/hexgrad/Kokoro-82M/blob/main/VOICES.md&#34;&gt;VOICES.md&lt;/a&gt;. To listen to sample audio outputs, see &lt;a href=&#34;https://huggingface.co/hexgrad/Kokoro-82M/blob/main/SAMPLES.md&#34;&gt;SAMPLES.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;MPV Config&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I highly recommend using &lt;a href=&#34;https://mpv.io/installation/&#34;&gt;MPV&lt;/a&gt; to play your audio files, as it supports displaying subtitles even without a video track. Here&#39;s my &lt;code&gt;mpv.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# --- MPV Settings ---&#xA;save-position-on-quit&#xA;keep-open=yes&#xA;# --- Subtitle ---&#xA;sub-ass-override=no&#xA;sub-margin-y=50&#xA;sub-margin-x=50&#xA;# --- Audio Quality ---&#xA;audio-spdif=ac3,dts,eac3,truehd,dts-hd&#xA;audio-channels=auto&#xA;audio-samplerate=48000&#xA;volume-max=200&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;Docker Guide&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you want to run Abogen in a Docker container:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denizsafak/abogen/archive/refs/heads/main.zip&#34;&gt;Download the repository&lt;/a&gt; and extract, or clone it using git.&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;abogen&lt;/code&gt; folder. You should see &lt;code&gt;Dockerfile&lt;/code&gt; there.&lt;/li&gt; &#xA; &lt;li&gt;Open your termminal in that directory and run the following commands:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image:&#xA;docker build --progress plain -t abogen .&#xA;&#xA;# Note that building the image may take a while.&#xA;# After building is complete, run the Docker container:&#xA;&#xA;# Windows&#xA;docker run --name abogen -v %cd%:/shared -p 5800:5800 -p 5900:5900 --gpus all abogen&#xA;&#xA;# Linux&#xA;docker run --name abogen -v $(pwd):/shared -p 5800:5800 -p 5900:5900 --gpus all abogen&#xA;&#xA;# MacOS&#xA;docker run --name abogen -v $(pwd):/shared -p 5800:5800 -p 5900:5900 abogen&#xA;&#xA;# We expose port 5800 for use by a web browser, 5900 if you want to connect with a VNC client.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Abogen launches automatically inside the container.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can access it via a web browser at &lt;a href=&#34;http://localhost:5800&#34;&gt;http://localhost:5800&lt;/a&gt; or connect to it using a VNC client at &lt;code&gt;localhost:5900&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;/shared&lt;/code&gt; directory to share files between your host and the container.&lt;/li&gt; &#xA; &lt;li&gt;For later use, start it with &lt;code&gt;docker start abogen&lt;/code&gt; and stop it with &lt;code&gt;docker stop abogen&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Known issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Audio preview is not working inside container (ALSA error).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Open cache directory&lt;/code&gt; and &lt;code&gt;Open configuration directory&lt;/code&gt; options in settings not working. (Tried pcmanfm, did not work with Abogen).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Special thanks to &lt;a href=&#34;https://www.reddit.com/user/geo38/&#34;&gt;@geo38&lt;/a&gt; from Reddit, who provided the Dockerfile and instructions in &lt;a href=&#34;https://www.reddit.com/r/selfhosted/comments/1k8x1yo/comment/mpe0bz8/&#34;&gt;this comment&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Similar Projects&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Abogen is a standalone project, but it is inspired by and shares some similarities with other projects. Here are a few:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/santinic/audiblez&#34;&gt;audiblez&lt;/a&gt;: Generate audiobooks from e-books. &lt;strong&gt;(Has CLI and GUI support)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plusuncold/autiobooks&#34;&gt;autiobooks&lt;/a&gt;: Automatically convert epubs to audiobooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mateogon/pdf-narrator&#34;&gt;pdf-narrator&lt;/a&gt;: Convert your PDFs and EPUBs into audiobooks effortlessly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/p0n1/epub_to_audiobook&#34;&gt;epub_to_audiobook&lt;/a&gt;: EPUB to audiobook converter, optimized for Audiobookshelf&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DrewThomasson/ebook2audiobook&#34;&gt;ebook2audiobook&lt;/a&gt;: Convert ebooks to audiobooks with chapters and metadata using dynamic AI models and voice cloning&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;Roadmap&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add OCR scan feature for PDF files using docling/teserract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add chapter metadata for .m4a files. (Issue &lt;a href=&#34;https://github.com/denizsafak/abogen/issues/9&#34;&gt;#9&lt;/a&gt;, PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/10&#34;&gt;#10&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for different languages in GUI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add voice formula feature that enables mixing different voice models. (Issue &lt;a href=&#34;https://github.com/denizsafak/abogen/issues/1&#34;&gt;#1&lt;/a&gt;, PR &lt;a href=&#34;https://github.com/denizsafak/abogen/pull/5&#34;&gt;#5&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add support for kokoro-onnx (If it&#39;s necessary).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add dark mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;Troubleshooting&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any issues while running Abogen, try launching it from the command line with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;abogen-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start Abogen in command-line mode and display detailed error messages. Please open a new issue on the &lt;a href=&#34;https://github.com/denizsafak/abogen/issues&#34;&gt;Issues&lt;/a&gt; page with the error message and a description of your problem.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Contributing&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I welcome contributions! If you have ideas for new features, improvements, or bug fixes, please fork the repository and submit a pull request.&lt;/p&gt; &#xA;&lt;h3&gt;For developers and contributors&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to modify the code and contribute to development, you can &lt;a href=&#34;https://github.com/denizsafak/abogen/archive/refs/heads/main.zip&#34;&gt;download the repository&lt;/a&gt;, extract it and run the following commands to build &lt;strong&gt;or&lt;/strong&gt; install the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go to the directory where you extracted the repository and run:&#xA;pip install -e .      # Installs the package in editable mode&#xA;pip install build     # Install the build package&#xA;python -m build       # Builds the package in dist folder (optional)&#xA;abogen                # Opens the GUI&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to explore the code and make any changes you like.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Credits&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Abogen uses &lt;a href=&#34;https://github.com/hexgrad/kokoro&#34;&gt;Kokoro&lt;/a&gt; for its high-quality, natural-sounding text-to-speech synthesis. Huge thanks to the Kokoro team for making this possible.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/wojiushixiaobai&#34;&gt;@wojiushixiaobai&lt;/a&gt; for &lt;a href=&#34;https://github.com/wojiushixiaobai/Python-Embed-Win64&#34;&gt;Embedded Python&lt;/a&gt; packages. These modified packages include pip pre-installed, enabling Abogen to function as a standalone application without requiring users to separately install Python in Windows.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to creators of &lt;a href=&#34;https://github.com/aerkalov/ebooklib&#34;&gt;EbookLib&lt;/a&gt;, a Python library for reading and writing ePub files, which is used for extracting text from ePub files.&lt;/li&gt; &#xA; &lt;li&gt;Special thanks to the &lt;a href=&#34;https://www.riverbankcomputing.com/software/pyqt/&#34;&gt;PyQt&lt;/a&gt; team for providing the cross-platform GUI toolkit that powers Abogen&#39;s interface.&lt;/li&gt; &#xA; &lt;li&gt;Icons: &lt;a href=&#34;https://icons8.com/icon/aRiu1GGi6Aoe/usa&#34;&gt;US&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/t3NE3BsOAQwq/great-britain&#34;&gt;Great Britain&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/ly7tzANRt33n/spain&#34;&gt;Spain&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/3muzEmi4dpD5/france&#34;&gt;France&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/esGVrxg9VCJ1/india&#34;&gt;India&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/PW8KZnP7qXzO/italy&#34;&gt;Italy&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/McQbrq9qaQye/japan&#34;&gt;Japan&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/zHmH8HpOmM90/brazil&#34;&gt;Brazil&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/Ej50Oe3crXwF/china&#34;&gt;China&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/uI49hxbpxTkp/female&#34;&gt;Female&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/12351/male&#34;&gt;Male&lt;/a&gt;, &lt;a href=&#34;https://icons8.com/icon/21698/adjust&#34;&gt;Adjust&lt;/a&gt; and &lt;a href=&#34;https://icons8.com/icon/GskSeVoroQ7u/voice-id&#34;&gt;Voice Id&lt;/a&gt; icons by &lt;a href=&#34;https://icons8.com/&#34;&gt;Icons8&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;License&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This project is available under the MIT License - see the &lt;a href=&#34;https://github.com/denizsafak/abogen/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details. &lt;a href=&#34;https://github.com/hexgrad/kokoro&#34;&gt;Kokoro&lt;/a&gt; is licensed under &lt;a href=&#34;https://github.com/hexgrad/kokoro/raw/main/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt; which allows commercial use, modification, distribution, and private use.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Subtitle generation currently works only for English. This is because Kokoro provides timestamp tokens only for English text. If you want subtitles in other languages, please request this feature in the &lt;a href=&#34;https://github.com/hexgrad/kokoro&#34;&gt;Kokoro project&lt;/a&gt;. For more technical details, see &lt;a href=&#34;https://github.com/hexgrad/kokoro/raw/6d87f4ae7abc2d14dbc4b3ef2e5f19852e861ac2/kokoro/pipeline.py#L383&#34;&gt;this line&lt;/a&gt; in the Kokoro&#39;s code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tags: audiobook, kokoro, text-to-speech, TTS, audiobook generator, audiobooks, text to speech, audiobook maker, audiobook creator, audiobook generator, voice-synthesis, text to audio, text to audio converter, text to speech converter, text to speech generator, text to speech software, text to speech app, epub to audio, pdf to audio, content-creation, media-generation&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>protectai/vulnhuntr</title>
    <updated>2025-07-31T01:36:15Z</updated>
    <id>tag:github.com,2025-07-31:/protectai/vulnhuntr</id>
    <link href="https://github.com/protectai/vulnhuntr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero shot vulnerability discovery using LLMs&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;250&#34; src=&#34;https://github.com/user-attachments/assets/d1153ab4-df29-4955-ad49-1be7fad18bb3&#34; alt=&#34;Vulnhuntr Logo&#34;&gt; &#xA; &lt;p&gt;A tool to identify remotely exploitable vulnerabilities using LLMs and static code analysis.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;World&#39;s first autonomous AI-discovered 0day vulnerabilities&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Vulnhuntr leverages the power of LLMs to automatically create and analyze entire code call chains starting from remote user input and ending at server output for detection of complex, multi-step, security-bypassing vulnerabilities that go far beyond what traditional static code analysis tools are capable of performing. See all the details including the Vulnhuntr output for all the 0-days here: &lt;a href=&#34;https://protectai.com/threat-research/vulnhuntr-first-0-day-vulnerabilities&#34;&gt;Protect AI Vulnhuntr Blog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Vulnerabilities Found&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Found a vulnerability using Vulnhuntr? Submit a report to &lt;a href=&#34;https://huntr.com&#34;&gt;huntr.com&lt;/a&gt; to get $$ and submit a PR to add it to the list below!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This table is just a sample of the vulnerabilities found so far. We will unredact as responsible disclosure periods end.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Repository&lt;/th&gt; &#xA;   &lt;th&gt;Stars&lt;/th&gt; &#xA;   &lt;th&gt;Vulnerabilities&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/binary-husky/gpt_academic&#34;&gt;gpt_academic&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;67k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-10100&#34;&gt;LFI&lt;/a&gt;, &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-10101&#34;&gt;XSS&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI&#34;&gt;ComfyUI&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;66k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-10099&#34;&gt;XSS&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/langflow-ai/langflow&#34;&gt;Langflow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;46k&lt;/td&gt; &#xA;   &lt;td&gt;RCE, IDOR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/lm-sys/FastChat&#34;&gt;FastChat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;37k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-10044&#34;&gt;SSRF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/infiniflow/ragflow&#34;&gt;Ragflow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;31k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-10131&#34;&gt;RCE&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/haotian-liu/LLaVA&#34;&gt;LLaVA&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;21k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2024-9309&#34;&gt;SSRF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/assafelovic/gpt-researcher&#34;&gt;gpt-researcher&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;17k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/assafelovic/gpt-researcher/pull/935&#34;&gt;AFO&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/letta-ai/letta&#34;&gt;Letta&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14k&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/letta-ai/letta/pull/2067&#34;&gt;AFO&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only Python codebases are supported.&lt;/li&gt; &#xA; &lt;li&gt;Can only identify the following vulnerability classes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Local file include (LFI)&lt;/li&gt; &#xA;   &lt;li&gt;Arbitrary file overwrite (AFO)&lt;/li&gt; &#xA;   &lt;li&gt;Remote code execution (RCE)&lt;/li&gt; &#xA;   &lt;li&gt;Cross site scripting (XSS)&lt;/li&gt; &#xA;   &lt;li&gt;SQL Injection (SQLI)&lt;/li&gt; &#xA;   &lt;li&gt;Server side request forgery (SSRF)&lt;/li&gt; &#xA;   &lt;li&gt;Insecure Direct Object Reference (IDOR)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Vulnhuntr strictly requires Python 3.10 because of a number of bugs in Jedi which it uses to parse Python code. It will not work reliably if installed with any other versions of Python.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We recommend using &lt;a href=&#34;https://github.com/pypa/pipx&#34;&gt;pipx&lt;/a&gt; or Docker to easily install and run Vulnhuntr.&lt;/p&gt; &#xA;&lt;p&gt;Using Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t vulnhuntr https://github.com/protectai/vulnhuntr.git#main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using pipx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pipx install git+https://github.com/protectai/vulnhuntr.git --python python3.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can install directly from source using poetry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/protectai/vulnhuntr&#xA;cd vulnhuntr &amp;amp;&amp;amp; poetry install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This tool is designed to analyze a GitHub repository for potential remotely exploitable vulnerabilities. The tool requires an API key and the local path to a GitHub repository. You may also optionally specify a custom endpoint for the LLM service.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] Always set spending limits or closely monitor costs with the LLM provider you use. This tool has the potential to rack up hefty bills as it tries to fit as much code in the LLMs context window as possible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] We recommend using Claude for the LLM. Through testing we have had better results with it over GPT.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Command Line Interface&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: vulnhuntr [-h] -r ROOT [-a ANALYZE] [-l {claude,gpt,ollama}] [-v]&#xA;&#xA;Analyze a GitHub project for vulnerabilities. Export your ANTHROPIC_API_KEY/OPENAI_API_KEY before running.&#xA;&#xA;options:&#xA;  -h, --help            show this help message and exit&#xA;  -r ROOT, --root ROOT  Path to the root directory of the project&#xA;  -a ANALYZE, --analyze ANALYZE&#xA;                        Specific path or file within the project to analyze&#xA;  -l {claude,gpt,ollama}, --llm {claude,gpt,ollama}&#xA;                        LLM client to use (default: claude)&#xA;  -v, --verbosity       Increase output verbosity (-v for INFO, -vv for DEBUG)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;From a pipx install, analyze the entire repository using Claude:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ANTHROPIC_API_KEY=&#34;sk-1234&#34;&#xA;vulnhuntr -r /path/to/target/repo/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] We recommend giving Vulnhuntr specific files that handle remote user input and scan them individually.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;From a pipx install, analyze the &lt;code&gt;/path/to/target/repo/server.py&lt;/code&gt; file using GPT-4o. Can also specify a subdirectory instead of a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export OPENAI_API_KEY=&#34;sk-1234&#34;&#xA;vulnhuntr -r /path/to/target/repo/ -a server.py -l gpt &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a docker installation, run using Claude and a custom endpoint to analyze /local/path/to/target/repo/repo-subfolder/target-file.py:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -e ANTHROPIC_API_KEY=sk-1234 -e ANTHROPIC_BASE_URL=https://localhost:1234/api -v /local/path/to/target/repo:/repo vulnhuntr:latest -r /repo -a repo-subfolder/target-file.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Experimental&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ollama is included as an option, however we haven&#39;t had success with the open source models structuring their output correctly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export OLLAMA_BASE_URL=http://localhost:11434/api/generate&#xA;export OLLAMA_MODEL=llama3.2&#xA;vulnhuntr -r /path/to/target/repo/ -a server.py -l ollama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logic Flow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/7757b053-36ff-425e-ab3d-ab0100c81d49&#34; alt=&#34;VulnHuntr logic&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;LLM summarizes the README and includes this in the system prompt&lt;/li&gt; &#xA; &lt;li&gt;LLM does initial analysis on an entire file and reports any potential vulnerabilities&lt;/li&gt; &#xA; &lt;li&gt;Vulnhuntr then gives the LLM a vulnerability-specific prompt for secondary analysis&lt;/li&gt; &#xA; &lt;li&gt;Each time the LLM analyzes the code, it requests additional context functions/classes/variables from other files in the project&lt;/li&gt; &#xA; &lt;li&gt;It continues doing this until the entire call chain from user input to server processing is complete then gives a final analysis&lt;/li&gt; &#xA; &lt;li&gt;The final analysis consists of it&#39;s reasoning, a proof of concept exploit, and a confidence score&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Generally confidence scores &amp;lt; 7 mean there&#39;s unlikely a vulnerability. Confidence scores of 7 mean it should be investigated, and confidence scores of 8+ mean it is very likely to be a valid vulnerability.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Output&lt;/h2&gt; &#xA;&lt;p&gt;The tool generates a detailed report of the vulnerabilities found in the analyzed files. The report includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial assessment results for each file.&lt;/li&gt; &#xA; &lt;li&gt;Secondary assessment results with context functions and class references.&lt;/li&gt; &#xA; &lt;li&gt;Confidence scores for vulnerabilities found.&lt;/li&gt; &#xA; &lt;li&gt;Logs of the analysis process.&lt;/li&gt; &#xA; &lt;li&gt;PoC exploit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Below is an example of a Vulnhuntr report describing a 0-day remote code execution vulnerability in &lt;a href=&#34;https://github.com/infiniflow/ragflow&#34;&gt;Ragflow&lt;/a&gt; (now fixed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scratchpad:&#xA;  1. Analyzing the add_llm function in llm_app.py. 2. Identified user input used as keys to access dictionaries: EmbeddingModel, ChatModel, RerankModel,&#xA;CvModel, and TTSModel. 3. These dictionaries contain class references, which are instantiated with user-supplied parameters. 4. The factory variable is &#xA;directly used from user input (req[&#39;llm_factory&#39;]) without proper validation. 5. The llm_name is also derived from user input in most cases. 6. The &#xA;instantiation of these classes occurs in try-except blocks, but exceptions are only used for error messages, not preventing execution. 7. The api_key &#xA;and other sensitive information are passed directly to these instantiated classes. 8. There&#39;s no comprehensive input validation or sanitization for the &#xA;factory or llm_name variables. 9. The vulnerability is in a route decorated with @login_required, indicating it&#39;s accessible to authenticated users. 10.&#xA;Reviewing the EmbeddingModel, ChatModel, RerankModel, CvModel, and TTSModel dictionaries to understand their contents and potential for exploitation.&#xA;----------------------------------------&#xA;&#xA;analysis:&#xA;  The add_llm function in llm_app.py contains a critical Remote Code Execution (RCE) vulnerability. The function uses user-supplied input &#xA;(req[&#39;llm_factory&#39;] and req[&#39;llm_name&#39;]) to dynamically instantiate classes from the EmbeddingModel, ChatModel, RerankModel, CvModel, and TTSModel &#xA;dictionaries. This pattern of using user input as a key to access and instantiate classes is inherently dangerous, as it allows an attacker to &#xA;potentially execute arbitrary code. The vulnerability is exacerbated by the lack of comprehensive input validation or sanitization on these &#xA;user-supplied values. While there are some checks for specific factory types, they are not exhaustive and can be bypassed. An attacker could potentially&#xA;provide a malicious value for &#39;llm_factory&#39; that, when used as an index to these model dictionaries, results in the execution of arbitrary code. The &#xA;vulnerability is particularly severe because it occurs in a route decorated with @login_required, suggesting it&#39;s accessible to authenticated users, &#xA;which might give a false sense of security.&#xA;----------------------------------------&#xA;&#xA;poc:&#xA;  POST /add_llm HTTP/1.1&#xA;  Host: target.com&#xA;  Content-Type: application/json&#xA;  Authorization: Bearer &amp;lt;valid_token&amp;gt;&#xA;  &#xA;  {&#xA;      &#34;llm_factory&#34;: &#34;__import__(&#39;os&#39;).system&#34;,&#xA;      &#34;llm_name&#34;: &#34;id&#34;,&#xA;      &#34;model_type&#34;: &#34;EMBEDDING&#34;,&#xA;      &#34;api_key&#34;: &#34;dummy_key&#34;&#xA;  }&#xA;  &#xA;  This payload attempts to exploit the vulnerability by setting &#39;llm_factory&#39; to a string that, when evaluated, imports the os module and calls system. &#xA;The &#39;llm_name&#39; is set to &#39;id&#39;, which would be executed as a system command if the exploit is successful.&#xA;----------------------------------------&#xA;&#xA;confidence_score:&#xA;  8&#xA;----------------------------------------&#xA;&#xA;vulnerability_types:&#xA;  - RCE&#xA;----------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;The tool logs the analysis process and results in a file named &lt;code&gt;vulhuntr.log&lt;/code&gt;. This file contains detailed information about each step of the analysis, including the initial and secondary assessments.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dan McInerney: &lt;a href=&#34;mailto:dan@protectai.com&#34;&gt;dan@protectai.com&lt;/a&gt;, &lt;a href=&#34;https://x.com/DanHMcInerney&#34;&gt;@DanHMcinerney&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Marcello Salvati: &lt;a href=&#34;mailto:marcello@protectai.com&#34;&gt;marcello@protectai.com&lt;/a&gt;, &lt;a href=&#34;https://x.com/byt3bl33d3r&#34;&gt;@byt3bl33d3r&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>